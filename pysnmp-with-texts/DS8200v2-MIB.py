#
# PySNMP MIB module DS8200v2-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DS8200v2-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:54:26 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion")
verilink, hbu = mibBuilder.importSymbols("DS8200v2-TC-MIB", "verilink", "hbu")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter64, Counter32, Bits, Unsigned32, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, MibIdentifier, Gauge32, IpAddress, ObjectIdentity, ModuleIdentity, enterprises, TimeTicks, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "Counter32", "Bits", "Unsigned32", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "MibIdentifier", "Gauge32", "IpAddress", "ObjectIdentity", "ModuleIdentity", "enterprises", "TimeTicks", "iso")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
tinterfaces = ModuleIdentity((1, 3, 6, 1, 4, 1, 321, 100, 2))
if mibBuilder.loadTexts: tinterfaces.setLastUpdated('0008180000Z')
if mibBuilder.loadTexts: tinterfaces.setOrganization('Verilink Corporation')
if mibBuilder.loadTexts: tinterfaces.setContactInfo('support@verilink.com + 1 800 285 2755')
if mibBuilder.loadTexts: tinterfaces.setDescription('DS8200v2 MIB.')
mgmtPorts = MibIdentifier((1, 3, 6, 1, 4, 1, 321, 100, 2, 1))
dbu = MibIdentifier((1, 3, 6, 1, 4, 1, 321, 100, 2, 2))
t1e1 = MibIdentifier((1, 3, 6, 1, 4, 1, 321, 100, 2, 3))
ddsNet = MibIdentifier((1, 3, 6, 1, 4, 1, 321, 100, 2, 4))
serialDte = MibIdentifier((1, 3, 6, 1, 4, 1, 321, 100, 2, 5))
analogDte = MibIdentifier((1, 3, 6, 1, 4, 1, 321, 100, 2, 6))
connection = MibIdentifier((1, 3, 6, 1, 4, 1, 321, 100, 2, 7))
maintenance = MibIdentifier((1, 3, 6, 1, 4, 1, 321, 100, 2, 8))
performance = MibIdentifier((1, 3, 6, 1, 4, 1, 321, 100, 2, 9))
itable = MibIdentifier((1, 3, 6, 1, 4, 1, 321, 100, 2, 10))
traplog = MibIdentifier((1, 3, 6, 1, 4, 1, 321, 100, 2, 11))
unitUtilities = MibIdentifier((1, 3, 6, 1, 4, 1, 321, 100, 2, 12))
productInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 321, 100, 2, 13))
netAPS = MibIdentifier((1, 3, 6, 1, 4, 1, 321, 100, 2, 14))
productModelNumber = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 2, 13, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: productModelNumber.setStatus('current')
if mibBuilder.loadTexts: productModelNumber.setDescription('This string displays the units model number')
productModelDescr = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 2, 13, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: productModelDescr.setStatus('current')
if mibBuilder.loadTexts: productModelDescr.setDescription('This string displays a brief description of the unit')
productElementId = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 2, 13, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: productElementId.setStatus('current')
if mibBuilder.loadTexts: productElementId.setDescription("This string is the same information that is in the element id field located in the utilities Screen of the unit's user interface. This field can be set from either location.")
productSoftwareRev = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 2, 13, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: productSoftwareRev.setStatus('current')
if mibBuilder.loadTexts: productSoftwareRev.setDescription('This string reports the units current software revision')
productHardwareRev = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 2, 13, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: productHardwareRev.setStatus('current')
if mibBuilder.loadTexts: productHardwareRev.setDescription('This string reports the units hardware revision')
productSerialNum = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 2, 13, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: productSerialNum.setStatus('current')
if mibBuilder.loadTexts: productSerialNum.setDescription("This string displays the unit's serial number")
productPhysicalAddress = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 2, 13, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: productPhysicalAddress.setStatus('current')
if mibBuilder.loadTexts: productPhysicalAddress.setDescription("This string displays the unit's physical ethernet address")
productNmsAddress = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 2, 13, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: productNmsAddress.setStatus('current')
if mibBuilder.loadTexts: productNmsAddress.setDescription("This string displays the unit's NMS address which is used to identify it to the TxPORT management products")
productLabelTable = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 2, 13, 9), )
if mibBuilder.loadTexts: productLabelTable.setStatus('current')
if mibBuilder.loadTexts: productLabelTable.setDescription('The Product Label Table.')
productLabelTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 2, 13, 9, 1), ).setIndexNames((0, "DS8200v2-MIB", "labelTableIndex"))
if mibBuilder.loadTexts: productLabelTableEntry.setStatus('current')
if mibBuilder.loadTexts: productLabelTableEntry.setDescription('An entry in the product label table.')
labelTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 13, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3)))
if mibBuilder.loadTexts: labelTableIndex.setStatus('current')
if mibBuilder.loadTexts: labelTableIndex.setDescription('The index into the ProductLabelTable.')
labelTableLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 13, 9, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: labelTableLabel.setStatus('current')
if mibBuilder.loadTexts: labelTableLabel.setDescription('A product label.')
labelTableValue = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 13, 9, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: labelTableValue.setStatus('current')
if mibBuilder.loadTexts: labelTableValue.setDescription('The data associated with the label.')
mgmtPortsTable = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 2, 1, 1), )
if mibBuilder.loadTexts: mgmtPortsTable.setStatus('current')
if mibBuilder.loadTexts: mgmtPortsTable.setDescription('The Management Ports table.')
mgmtPortsTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 2, 1, 1, 1), ).setIndexNames((0, "DS8200v2-MIB", "mgmtPortsTableIndex"))
if mibBuilder.loadTexts: mgmtPortsTableEntry.setStatus('current')
if mibBuilder.loadTexts: mgmtPortsTableEntry.setDescription('An entry in the Management Ports table.')
mgmtPortsTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgmtPortsTableIndex.setStatus('current')
if mibBuilder.loadTexts: mgmtPortsTableIndex.setDescription('The index into the Management Ports table.')
mgmtPortsDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgmtPortsDescription.setStatus('current')
if mibBuilder.loadTexts: mgmtPortsDescription.setDescription('Contains a textual description of the port.')
mgmtPortsElementID = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 27))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgmtPortsElementID.setStatus('current')
if mibBuilder.loadTexts: mgmtPortsElementID.setDescription('This object signifies the name of the device.')
mgmtPortsMode = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("coadial", 3), ("coadirect", 4), ("extAlarmOnOpen", 5), ("extAlarmOnClosed", 6), ("slipdial", 7), ("slipdirect", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgmtPortsMode.setStatus('current')
if mibBuilder.loadTexts: mgmtPortsMode.setDescription('This object signifies the method used by the port to report alarms.')
mgmtPortsDialPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 1, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 38))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgmtPortsDialPrefix.setStatus('current')
if mibBuilder.loadTexts: mgmtPortsDialPrefix.setDescription('This object contains the dial string prefix for a modem connected to the port.')
mgmtPortsPrimaryDialString = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 1, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgmtPortsPrimaryDialString.setStatus('current')
if mibBuilder.loadTexts: mgmtPortsPrimaryDialString.setDescription('This object contains the primary dial string for a modem connected to the port.')
mgmtPortsSecondaryDialString = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 1, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgmtPortsSecondaryDialString.setStatus('current')
if mibBuilder.loadTexts: mgmtPortsSecondaryDialString.setDescription('This object contains the secondary dial string for a modem connected to the port.')
mgmtPortsExtInitString = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 1, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 38))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgmtPortsExtInitString.setStatus('current')
if mibBuilder.loadTexts: mgmtPortsExtInitString.setDescription('This object contains the init string for a modem connected to the port.')
mgmtPortsCompressedSlip = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3), ("auto", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgmtPortsCompressedSlip.setStatus('current')
if mibBuilder.loadTexts: mgmtPortsCompressedSlip.setDescription('This object specifies if SLIP compression is to be used.')
mgmtPortsInternalModem = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("notPresent", 2), ("enabled", 3), ("disabled", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgmtPortsInternalModem.setStatus('current')
if mibBuilder.loadTexts: mgmtPortsInternalModem.setDescription('This object signifies if the internal modem (when present) is enabled.')
dbuConfigTable = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 2, 2, 1), )
if mibBuilder.loadTexts: dbuConfigTable.setStatus('current')
if mibBuilder.loadTexts: dbuConfigTable.setDescription('The Dial Backup Configuration Table.')
dbuConfigTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 2, 2, 1, 1), ).setIndexNames((0, "DS8200v2-MIB", "dbuNearIndex"), (0, "DS8200v2-MIB", "dbuFarIndex"), (0, "DS8200v2-MIB", "dbuConfigTableIndex"))
if mibBuilder.loadTexts: dbuConfigTableEntry.setStatus('current')
if mibBuilder.loadTexts: dbuConfigTableEntry.setDescription('An entry in the Dial Backup Configuration table.')
dbuNearIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dbuNearIndex.setStatus('current')
if mibBuilder.loadTexts: dbuNearIndex.setDescription('Selects the near device.')
dbuFarIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dbuFarIndex.setStatus('current')
if mibBuilder.loadTexts: dbuFarIndex.setDescription('Selects the far device.')
dbuConfigTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dbuConfigTableIndex.setStatus('current')
if mibBuilder.loadTexts: dbuConfigTableIndex.setDescription('The index into the Dial Backup table.')
dbuDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 2, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dbuDescription.setStatus('current')
if mibBuilder.loadTexts: dbuDescription.setDescription('Contains a textual description of the dbu.')
dbuRate = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("dbuRateOther", 1), ("dbuRate2400", 2), ("dbuRate4800", 3), ("dbuRate9600", 4), ("dbuRate19200", 5), ("dbuRate38400", 6), ("dbuRate56000", 7), ("dbuRate57600", 8), ("dbuRate64000", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dbuRate.setStatus('current')
if mibBuilder.loadTexts: dbuRate.setDescription('This object is the identifier of the current DDS DBU rate. The values mean: dbuRate2400 the DBU interface is operating at 2400bps dbuRate4800 the DBU interface is operating at 4800bps dbuRate9600 the DBU interface is operating at 9600bps dbuRate19200 the DBU interface is operating at 19200bps dbuRate38400 the DBU interface is operating at 38400bps dbuRate56000 the DBU interface is operating at 56000bps dbuRate57600 the DBU interface is operating at 57600bps dbuRate64000 the DBU interface is operating at 64000bps')
dbuMode = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("dbuModeOther", 1), ("dbuModeOrig", 2), ("dbuModeAnsw", 3), ("dbuModeNotAvail", 4), ("dbuModeCallbackOrig", 5), ("dbuModeCallbackAnsw", 6), ("dbuModeMaster", 7), ("dbuModeSlave", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dbuMode.setStatus('current')
if mibBuilder.loadTexts: dbuMode.setDescription("This object is the identifier of the current mode that the Dial Backup Unit is operating in. The values mean: dbuModeOrig The dial backup unit is operating in the originate mode dbuModeAnsw The dial backup unit is operating in the answer mode dbuModeNotAvail The dial backup unit's mode is not available dbuModeCallbackOrig The dial backup unit is operating in the callback originate mode dbuModeCallbackAnsw The dial backup unit is operating in the callback mode dbuModeMaster The dial backup unit is configured as a master unit dbuModeSlave The dial backup unit is configured as a slave unit")
dbuFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("dbuFormatOther", 1), ("dbuFormatSync", 2), ("dbuFormatAsync", 3), ("dbuFormatNotAvail", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dbuFormat.setStatus('current')
if mibBuilder.loadTexts: dbuFormat.setDescription("This object is the identifier of the current format that the Dial Backup Unit is operating in. The values mean: dbuFormatSync The dial backup unit is operating in the synchronous format dbuFormatAsync The dial backup unit is operating in the asynchronous format dbuFormatNotAvail The dial backup unit's format is not available")
dbuNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 2, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dbuNumber.setStatus('current')
if mibBuilder.loadTexts: dbuNumber.setDescription('This string is the currently programmed number for the dial backup unit to call')
dbuStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("dbuStatusOther", 1), ("dbuStatusDisabled", 2), ("dbuStatusEnabled", 3), ("dbuStatusActive", 4), ("dbuStatusLocked", 5), ("dbuStatusConnecting", 6), ("dbuStatusDisallowed", 7), ("dbuStatusAwaitingCall", 8), ("dbuStatusDialing", 9), ("dbuStatusDisconnecting", 10), ("dbuStatusTesting", 11), ("dbuStatusTestPassed", 12), ("dbuStatusTestFailed", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dbuStatus.setStatus('current')
if mibBuilder.loadTexts: dbuStatus.setDescription('This object is the identifier of the current Dial Backup Unit operating status. The values mean: dbuStatusDisabled The dial backup unit is either not installed or disabled dbuStatusEnabled The dial backup unit is installed and enabled dbuStatusActive The dial backup unit is currently active dbuStatusLocked The dial backup unit is in a locked state dbuStatusConnecting The dial backup unit is in the process of connecting dbuStatusDisallowed The dial backup unit is currently not allowed to activate due to the Time Of Day Enable settings dbuStatusAwaitingCall The dial backup unit is in the process of waiting for an incoming call dbuStatusDialing The dial backup unit is in the process of placing a call dbuStatusDisconnecting The dial backup unit is in the process of disconnecting dbuStatusTesting The dial backup unit is in the process of testing dbuStatusTestPassed The dial backup unit has passed a self-test dbuStatusTestFailed The dial backup unit has failed a self-test')
dbuCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("dbuCommandOther", 1), ("dbuCommandDisable", 2), ("dbuCommandEnable", 3), ("dbuCommandActivate", 4), ("dbuCommandLock", 5), ("dbuCommandEnableDaily", 6), ("dbuCommandTest", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dbuCommand.setStatus('current')
if mibBuilder.loadTexts: dbuCommand.setDescription('This object is the identifier of the current setting that the Dial Backup Unit is operating in. The values mean: dbuCommandDisable The dial backup unit is not to operate dbuCommandEnable The dial backup unit is to operate, subject to Activator and line conditions only dbuCommandActivate The dial backup unit is to operate, irregardless of line conditions dbuCommandLock The dial backup unit is to continue operating, irregardless of line conditions dbuCommandEnableDaily The dial backup unit is to operate, subject to Activator, line conditions, and the Time Of Day Enable fields dbuCommandTest The dial backup unit is commanded to test the link.')
dbuActivator1 = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("dbuActivatorOther", 1), ("dbuActivatorLOS", 2), ("dbuActivatorOOS", 3), ("dbuActivatorOOF", 4), ("dbuActivatorAny", 5), ("dbuActivatorES", 6), ("dbuActivatorSES", 7), ("dbuActivatorUAS", 8), ("dbuActivatorLOF", 9), ("dbuActivatorRAS", 10), ("dbuActivatorAIS", 11), ("dbuActivatorBPV", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dbuActivator1.setStatus('current')
if mibBuilder.loadTexts: dbuActivator1.setDescription('This object is the identifier of the current trigger that will activate the Dial Backup Unit. The values mean: dbuActivatorLOS The dial backup unit is activated by a LOS alarm condition dbuActivatorOOS The dial backup unit is activated by an OOS alarm condition dbuActivatorOOF The dial backup unit is activated by an OOF alarm condition dbuActivatorAny The dial backup unit is activated by a LOS, OOS, or OOF alarm condition dbuActivatorES The dial backup unit is activated by an ES alarm condition dbuActivatorSES The dial backup unit is activated by an SES alarm condition dbuActivatorUAS The dial backup unit is activated by an UAS alarm condition dbuActivatorLOF The dial backup unit is activated by an LOF alarm condition dbuActivatorRAS The dial backup unit is activated by an RAS alarm condition dbuActivatorAIS The dial backup unit is activated by an AIS alarm condition dbuActivatorBPV The dial backup unit is activated by an BPV alarm condition')
dbuActivator2 = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("dbuActivatorOther", 1), ("dbuActivatorLOS", 2), ("dbuActivatorOOS", 3), ("dbuActivatorOOF", 4), ("dbuActivatorAny", 5), ("dbuActivatorES", 6), ("dbuActivatorSES", 7), ("dbuActivatorUAS", 8), ("dbuActivatorLOF", 9), ("dbuActivatorRAS", 10), ("dbuActivatorAIS", 11), ("dbuActivatorBPV", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dbuActivator2.setStatus('current')
if mibBuilder.loadTexts: dbuActivator2.setDescription('This object is the identifier of the current trigger that will activate the Dial Backup Unit. The values mean: dbuActivatorLOS The dial backup unit is activated by a LOS alarm condition dbuActivatorOOS The dial backup unit is activated by a OOS alarm condition dbuActivatorOOF The dial backup unit is activated by a OOF alarm condition dbuActivatorAny The dial backup unit is activated by a LOS, OOS, or OOF alarm condition dbuActivatorES The dial backup unit is activated by an ES alarm condition dbuActivatorSES The dial backup unit is activated by an SES alarm condition dbuActivatorUAS The dial backup unit is activated by an UAS alarm condition dbuActivatorLOF The dial backup unit is activated by an LOF alarm condition dbuActivatorRAS The dial backup unit is activated by an RAS alarm condition dbuActivatorAIS The dial backup unit is activated by an AIS alarm condition dbuActivatorBPV The dial backup unit is activated by an BPV alarm condition')
dbuDialStr = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 2, 1, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dbuDialStr.setStatus('current')
if mibBuilder.loadTexts: dbuDialStr.setDescription('This string is the dial string sent to the dial backup unit during every connection attempt')
dbuInitStr = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 2, 1, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dbuInitStr.setStatus('current')
if mibBuilder.loadTexts: dbuInitStr.setDescription('This string is the initialization string sent to the dial backup unit before every connection attempt')
dbuHangupStr = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 2, 1, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dbuHangupStr.setStatus('current')
if mibBuilder.loadTexts: dbuHangupStr.setDescription('This string is the hangup command string sent to the dial backup unit after every successful call')
dbuPasswordStr = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 2, 1, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dbuPasswordStr.setStatus('current')
if mibBuilder.loadTexts: dbuPasswordStr.setDescription('This string is the prompt character and password string for the dial backup unit in Callback DBU')
dbuSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 2, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dbuSecurityOther", 1), ("dbuSecurityDisable", 2), ("dbuSecurityEnable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dbuSecurity.setStatus('current')
if mibBuilder.loadTexts: dbuSecurity.setDescription('Enables security on dial backup unit.')
dbuDtrDial = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 2, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dbuDtrDialOther", 1), ("dbuDtrDialDisable", 2), ("dbuDtrDialEnable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dbuDtrDial.setStatus('current')
if mibBuilder.loadTexts: dbuDtrDial.setDescription('Enables DTR dial feature on dial backup unit.')
dbuISDNSwitchType = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 2, 1, 1, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dbuISDNSwitchType.setStatus('current')
if mibBuilder.loadTexts: dbuISDNSwitchType.setDescription('Specifies the switch type for the ISDN DBU.')
dbuISDNSwitchVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 2, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("dbuISDNSwitchVersionOther", 1), ("dbuISDNSwitchVersionNational1", 2), ("dbuISDNSwitchVersionATTP2P", 3), ("dbuISDNSwitchVersionATTMP", 4), ("dbuISDNSwitchVersionDMS100PVCIC0", 5), ("dbuISDNSwitchVersionDMS100PVCIC1", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dbuISDNSwitchVersion.setStatus('current')
if mibBuilder.loadTexts: dbuISDNSwitchVersion.setDescription('Specifies the switch version for the ISDN DBU.')
dbuISDNTEI = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 2, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67))).clone(namedValues=NamedValues(("dbuISDNTEIOther", 1), ("dbuISDNTEIDisable", 2), ("dbuISDNTEIAuto", 3), ("dbuISDNTEI0", 4), ("dbuISDNTEI1", 5), ("dbuISDNTEI2", 6), ("dbuISDNTEI3", 7), ("dbuISDNTEI4", 8), ("dbuISDNTEI5", 9), ("dbuISDNTEI6", 10), ("dbuISDNTEI7", 11), ("dbuISDNTEI8", 12), ("dbuISDNTEI9", 13), ("dbuISDNTEI10", 14), ("dbuISDNTEI11", 15), ("dbuISDNTEI12", 16), ("dbuISDNTEI13", 17), ("dbuISDNTEI14", 18), ("dbuISDNTEI15", 19), ("dbuISDNTEI16", 20), ("dbuISDNTEI17", 21), ("dbuISDNTEI18", 22), ("dbuISDNTEI19", 23), ("dbuISDNTEI20", 24), ("dbuISDNTEI21", 25), ("dbuISDNTEI22", 26), ("dbuISDNTEI23", 27), ("dbuISDNTEI24", 28), ("dbuISDNTEI25", 29), ("dbuISDNTEI26", 30), ("dbuISDNTEI27", 31), ("dbuISDNTEI28", 32), ("dbuISDNTEI29", 33), ("dbuISDNTEI30", 34), ("dbuISDNTEI31", 35), ("dbuISDNTEI32", 36), ("dbuISDNTEI33", 37), ("dbuISDNTEI34", 38), ("dbuISDNTEI35", 39), ("dbuISDNTEI36", 40), ("dbuISDNTEI37", 41), ("dbuISDNTEI38", 42), ("dbuISDNTEI39", 43), ("dbuISDNTEI40", 44), ("dbuISDNTEI41", 45), ("dbuISDNTEI42", 46), ("dbuISDNTEI43", 47), ("dbuISDNTEI44", 48), ("dbuISDNTEI45", 49), ("dbuISDNTEI46", 50), ("dbuISDNTEI47", 51), ("dbuISDNTEI48", 52), ("dbuISDNTEI49", 53), ("dbuISDNTEI50", 54), ("dbuISDNTEI51", 55), ("dbuISDNTEI52", 56), ("dbuISDNTEI53", 57), ("dbuISDNTEI54", 58), ("dbuISDNTEI55", 59), ("dbuISDNTEI56", 60), ("dbuISDNTEI57", 61), ("dbuISDNTEI58", 62), ("dbuISDNTEI59", 63), ("dbuISDNTEI60", 64), ("dbuISDNTEI61", 65), ("dbuISDNTEI62", 66), ("dbuISDNTEI63", 67)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dbuISDNTEI.setStatus('current')
if mibBuilder.loadTexts: dbuISDNTEI.setDescription('Specifies the ISDN DBU TEI.')
dbuISDNSPID = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 2, 1, 1, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dbuISDNSPID.setStatus('current')
if mibBuilder.loadTexts: dbuISDNSPID.setDescription('Specifies the SPID for the ISDN DBU.')
dbuISDNDDNUM = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 2, 1, 1, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dbuISDNDDNUM.setStatus('current')
if mibBuilder.loadTexts: dbuISDNDDNUM.setDescription('Specifies the Data Directory Number for the ISDN DBU.')
dbuResetStringsTable = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 2, 2, 2), )
if mibBuilder.loadTexts: dbuResetStringsTable.setStatus('current')
if mibBuilder.loadTexts: dbuResetStringsTable.setDescription('A table of COLD START reprogramming strings for the dial backup unit.')
dbuResetStringsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 2, 2, 2, 1), ).setIndexNames((0, "DS8200v2-MIB", "dbuResetNearIndex"), (0, "DS8200v2-MIB", "dbuResetFarIndex"), (0, "DS8200v2-MIB", "dbuResetConfigEntryIndex"), (0, "DS8200v2-MIB", "dbuResetStringsIndex"))
if mibBuilder.loadTexts: dbuResetStringsEntry.setStatus('current')
if mibBuilder.loadTexts: dbuResetStringsEntry.setDescription('An entry in the dbuResetStringsTable.')
dbuResetNearIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dbuResetNearIndex.setStatus('current')
if mibBuilder.loadTexts: dbuResetNearIndex.setDescription('Selects the near device.')
dbuResetFarIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dbuResetFarIndex.setStatus('current')
if mibBuilder.loadTexts: dbuResetFarIndex.setDescription('Selects the far device.')
dbuResetConfigEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 2, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dbuResetConfigEntryIndex.setStatus('current')
if mibBuilder.loadTexts: dbuResetConfigEntryIndex.setDescription('The index into the Dial Backup table.')
dbuResetStringsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 2, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dbuResetStringsIndex.setStatus('current')
if mibBuilder.loadTexts: dbuResetStringsIndex.setDescription('The index into the dbuResetStringsTable.')
dbuResetString = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 2, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dbuResetString.setStatus('current')
if mibBuilder.loadTexts: dbuResetString.setDescription("This string is one of the dial backup unit's COLD START reprogramming strings")
dbuStartStopTable = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 2, 2, 3), )
if mibBuilder.loadTexts: dbuStartStopTable.setStatus('current')
if mibBuilder.loadTexts: dbuStartStopTable.setDescription('The Dial Backup StartStop Table.')
dbuStartStopTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 2, 2, 3, 1), ).setIndexNames((0, "DS8200v2-MIB", "dbuStartStopNearIndex"), (0, "DS8200v2-MIB", "dbuStartStopFarIndex"), (0, "DS8200v2-MIB", "dbuStartStopConfigEntryIndex"), (0, "DS8200v2-MIB", "dbuStartStopDayOfWeek"))
if mibBuilder.loadTexts: dbuStartStopTableEntry.setStatus('current')
if mibBuilder.loadTexts: dbuStartStopTableEntry.setDescription('An entry in the Dial Backup Start Stop table.')
dbuStartStopNearIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dbuStartStopNearIndex.setStatus('current')
if mibBuilder.loadTexts: dbuStartStopNearIndex.setDescription('Selects the near device.')
dbuStartStopFarIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 2, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dbuStartStopFarIndex.setStatus('current')
if mibBuilder.loadTexts: dbuStartStopFarIndex.setDescription('Selects the far device.')
dbuStartStopConfigEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 2, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dbuStartStopConfigEntryIndex.setStatus('current')
if mibBuilder.loadTexts: dbuStartStopConfigEntryIndex.setDescription('The index into the Dial Backup table.')
dbuStartStopDayOfWeek = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("dbuStartStopSunday", 1), ("dbuStartStopMonday", 2), ("dbuStartStopTuesday", 3), ("dbuStartStopWednesday", 4), ("dbuStartStopThursday", 5), ("dbuStartStopFriday", 6), ("dbuStartStopSaturday", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dbuStartStopDayOfWeek.setStatus('current')
if mibBuilder.loadTexts: dbuStartStopDayOfWeek.setDescription('The index into the Dial Backup Start Stop times table.')
dbuStart = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24))).clone(namedValues=NamedValues(("dbuStartHour00", 1), ("dbuStartHour01", 2), ("dbuStartHour02", 3), ("dbuStartHour03", 4), ("dbuStartHour04", 5), ("dbuStartHour05", 6), ("dbuStartHour06", 7), ("dbuStartHour07", 8), ("dbuStartHour08", 9), ("dbuStartHour09", 10), ("dbuStartHour10", 11), ("dbuStartHour11", 12), ("dbuStartHour12", 13), ("dbuStartHour13", 14), ("dbuStartHour14", 15), ("dbuStartHour15", 16), ("dbuStartHour16", 17), ("dbuStartHour17", 18), ("dbuStartHour18", 19), ("dbuStartHour19", 20), ("dbuStartHour20", 21), ("dbuStartHour21", 22), ("dbuStartHour22", 23), ("dbuStartHour23", 24)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dbuStart.setStatus('current')
if mibBuilder.loadTexts: dbuStart.setDescription('This object is the beginning of an allowable window for Dial Backup Activation.')
dbuStop = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24))).clone(namedValues=NamedValues(("dbuStopHour00", 1), ("dbuStopHour01", 2), ("dbuStopHour02", 3), ("dbuStopHour03", 4), ("dbuStopHour04", 5), ("dbuStopHour05", 6), ("dbuStopHour06", 7), ("dbuStopHour07", 8), ("dbuStopHour08", 9), ("dbuStopHour09", 10), ("dbuStopHour10", 11), ("dbuStopHour11", 12), ("dbuStopHour12", 13), ("dbuStopHour13", 14), ("dbuStopHour14", 15), ("dbuStopHour15", 16), ("dbuStopHour16", 17), ("dbuStopHour17", 18), ("dbuStopHour18", 19), ("dbuStopHour19", 20), ("dbuStopHour20", 21), ("dbuStopHour21", 22), ("dbuStopHour22", 23), ("dbuStopHour23", 24)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dbuStop.setStatus('current')
if mibBuilder.loadTexts: dbuStop.setDescription('This object is the end of an allowable window for Dial Backup Activation.')
t1e1ConfigTable = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 2, 3, 1), )
if mibBuilder.loadTexts: t1e1ConfigTable.setStatus('current')
if mibBuilder.loadTexts: t1e1ConfigTable.setDescription('The T1 and E1 Configuration Table.')
t1e1ConfigTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 2, 3, 1, 1), ).setIndexNames((0, "DS8200v2-MIB", "t1e1ConfigNearIndex"), (0, "DS8200v2-MIB", "t1e1ConfigFarIndex"), (0, "DS8200v2-MIB", "t1e1ConfigIndex"))
if mibBuilder.loadTexts: t1e1ConfigTableEntry.setStatus('current')
if mibBuilder.loadTexts: t1e1ConfigTableEntry.setDescription('An entry in the t1e1Table.')
t1e1ConfigNearIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t1e1ConfigNearIndex.setStatus('current')
if mibBuilder.loadTexts: t1e1ConfigNearIndex.setDescription('Selects the near device.')
t1e1ConfigFarIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t1e1ConfigFarIndex.setStatus('current')
if mibBuilder.loadTexts: t1e1ConfigFarIndex.setDescription('Selects the far device.')
t1e1ConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 3, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t1e1ConfigIndex.setStatus('current')
if mibBuilder.loadTexts: t1e1ConfigIndex.setDescription('This object is the index into the t1e1Table.')
t1e1Description = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 3, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: t1e1Description.setStatus('current')
if mibBuilder.loadTexts: t1e1Description.setDescription('Contains a textual description of the port.')
t1e1Mode = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("t1e1ModeOther", 1), ("t1e1ModeDTE", 2), ("t1e1ModeNetwork", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: t1e1Mode.setStatus('current')
if mibBuilder.loadTexts: t1e1Mode.setDescription('This object identifies the port as either a Network (long-haul) or DTE (short-haul) port.')
t1e1FrameType = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("t1e1FrameTypeOther", 1), ("t1e1FrameTypeESF", 2), ("t1e1FrameTypeD4", 3), ("t1e1FrameTypeCCSCRC", 4), ("t1e1FrameTypeCCS", 5), ("t1e1FrameTypeCAS", 6), ("t1e1FrameTypeCASCRC", 7), ("t1e1FrameTypeUnframed", 8), ("t1e1FrameTypeV3", 9), ("t1e1FrameTypeT1Unframed", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: t1e1FrameType.setStatus('current')
if mibBuilder.loadTexts: t1e1FrameType.setDescription('Selects the framing for the network side of the DSU/CSU.')
t1e1LineCode = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("t1e1LineCodeOther", 1), ("t1e1LineCodeAMI", 2), ("t1e1LineCodeB8ZS", 3), ("t1e1LineCodeHDB3", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: t1e1LineCode.setStatus('current')
if mibBuilder.loadTexts: t1e1LineCode.setDescription('Selects the network side line coding.')
t1e1LineBuildOut = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("t1e1LineBuildOutOther", 1), ("t1e1LineBuildOut0db", 2), ("t1e1LineBuildOut75db", 3), ("t1e1LineBuildOut15db", 4), ("t1e1LineBuildOut225db", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: t1e1LineBuildOut.setStatus('current')
if mibBuilder.loadTexts: t1e1LineBuildOut.setDescription('Selects the line build out for the network interface. The options are: t1e1LineBuildOut0db indicates a line build out of 0db t1e1LineBuildOut75db indicates a line build out of -7.5db t1e1LineBuildOut15db indicates a line build out of -15db t1e1LineBuildOut225db indicates a line build out of -22.5db')
t1e1Timing = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108))).clone(namedValues=NamedValues(("t1e1TimingOther", 1), ("t1e1TimingInternal", 2), ("t1e1TimingNetwork", 3), ("t1e1TimingT1DTE", 4), ("t1e1TimingStation", 5), ("t1e1TimingStaClock", 6), ("t1e1TimingPort1", 7), ("t1e1TimingPort2", 8), ("t1e1TimingPort3", 9), ("t1e1TimingPort4", 10), ("t1e1TimingPort5", 11), ("t1e1TimingPort6", 12), ("t1e1TimingPort7", 13), ("t1e1TimingPort8", 14), ("t1e1TimingPort9", 15), ("t1e1TimingPort10", 16), ("t1e1TimingPort11", 17), ("t1e1TimingPort12", 18), ("t1e1TimingPort13", 19), ("t1e1TimingPort14", 20), ("t1e1TimingPort15", 21), ("t1e1TimingPort16", 22), ("t1e1TimingPort17", 23), ("t1e1TimingPort18", 24), ("t1e1TimingPort19", 25), ("t1e1TimingPort20", 26), ("t1e1TimingPort21", 27), ("t1e1TimingPort22", 28), ("t1e1TimingPort23", 29), ("t1e1TimingPort24", 30), ("t1e1TimingPort25", 31), ("t1e1TimingPort26", 32), ("t1e1TimingPort27", 33), ("t1e1TimingPort28", 34), ("t1e1TimingPort29", 35), ("t1e1TimingPort30", 36), ("t1e1TimingPort31", 37), ("t1e1TimingPort32", 38), ("t1e1TimingSlot2PortA", 39), ("t1e1TimingSlot2PortB", 40), ("t1e1TimingSlot3PortA", 41), ("t1e1TimingSlot3PortB", 42), ("t1e1TimingSlot4PortA", 43), ("t1e1TimingSlot4PortB", 44), ("t1e1TimingSlot5PortA", 45), ("t1e1TimingSlot5PortB", 46), ("t1e1TimingSlot6PortA", 47), ("t1e1TimingSlot6PortB", 48), ("t1e1TimingSlot2Dsu1PortA", 49), ("t1e1TimingSlot2Dsu1PortB", 50), ("t1e1TimingSlot2Dsu2PortA", 51), ("t1e1TimingSlot2Dsu2PortB", 52), ("t1e1TimingSlot2Dsu3PortA", 53), ("t1e1TimingSlot2Dsu3PortB", 54), ("t1e1TimingSlot2Dsu4PortA", 55), ("t1e1TimingSlot2Dsu4PortB", 56), ("t1e1TimingSlot2Dsu5PortA", 57), ("t1e1TimingSlot2Dsu5PortB", 58), ("t1e1TimingSlot2Dsu6PortA", 59), ("t1e1TimingSlot2Dsu6PortB", 60), ("t1e1TimingSlot3Dsu1PortA", 61), ("t1e1TimingSlot3Dsu1PortB", 62), ("t1e1TimingSlot3Dsu2PortA", 63), ("t1e1TimingSlot3Dsu2PortB", 64), ("t1e1TimingSlot3Dsu3PortA", 65), ("t1e1TimingSlot3Dsu3PortB", 66), ("t1e1TimingSlot3Dsu4PortA", 67), ("t1e1TimingSlot3Dsu4PortB", 68), ("t1e1TimingSlot3Dsu5PortA", 69), ("t1e1TimingSlot3Dsu5PortB", 70), ("t1e1TimingSlot3Dsu6PortA", 71), ("t1e1TimingSlot3Dsu6PortB", 72), ("t1e1TimingSlot4Dsu1PortA", 73), ("t1e1TimingSlot4Dsu1PortB", 74), ("t1e1TimingSlot4Dsu2PortA", 75), ("t1e1TimingSlot4Dsu2PortB", 76), ("t1e1TimingSlot4Dsu3PortA", 77), ("t1e1TimingSlot4Dsu3PortB", 78), ("t1e1TimingSlot4Dsu4PortA", 79), ("t1e1TimingSlot4Dsu4PortB", 80), ("t1e1TimingSlot4Dsu5PortA", 81), ("t1e1TimingSlot4Dsu5PortB", 82), ("t1e1TimingSlot4Dsu6PortA", 83), ("t1e1TimingSlot4Dsu6PortB", 84), ("t1e1TimingSlot5Dsu1PortA", 85), ("t1e1TimingSlot5Dsu1PortB", 86), ("t1e1TimingSlot5Dsu2PortA", 87), ("t1e1TimingSlot5Dsu2PortB", 88), ("t1e1TimingSlot5Dsu3PortA", 89), ("t1e1TimingSlot5Dsu3PortB", 90), ("t1e1TimingSlot5Dsu4PortA", 91), ("t1e1TimingSlot5Dsu4PortB", 92), ("t1e1TimingSlot5Dsu5PortA", 93), ("t1e1TimingSlot5Dsu5PortB", 94), ("t1e1TimingSlot5Dsu6PortA", 95), ("t1e1TimingSlot5Dsu6PortB", 96), ("t1e1TimingSlot6Dsu1PortA", 97), ("t1e1TimingSlot6Dsu1PortB", 98), ("t1e1TimingSlot6Dsu2PortA", 99), ("t1e1TimingSlot6Dsu2PortB", 100), ("t1e1TimingSlot6Dsu3PortA", 101), ("t1e1TimingSlot6Dsu3PortB", 102), ("t1e1TimingSlot6Dsu4PortA", 103), ("t1e1TimingSlot6Dsu4PortB", 104), ("t1e1TimingSlot6Dsu5PortA", 105), ("t1e1TimingSlot6Dsu5PortB", 106), ("t1e1TimingSlot6Dsu6PortA", 107), ("t1e1TimingSlot6Dsu6PortB", 108)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: t1e1Timing.setStatus('current')
if mibBuilder.loadTexts: t1e1Timing.setDescription("Sets the timing source to synchronize the unit's internal timing generators.")
t1e1StationInTiming = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("t1e1StationInTimingOther", 1), ("t1e1StationInTimingNX56", 2), ("t1e1StationInTimingNX64", 3), ("t1e1StationInTiming1544", 4), ("t1e1StationInTiming2048", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: t1e1StationInTiming.setStatus('current')
if mibBuilder.loadTexts: t1e1StationInTiming.setDescription('Selects the input timing if t1e1Timing is set to Station.')
t1e1StationTiming = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 3, 1, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: t1e1StationTiming.setStatus('current')
if mibBuilder.loadTexts: t1e1StationTiming.setDescription('Selects the N-multiple when Station Input Timing is set to either NX56 or NX65. The N range is 1..24')
t1e1PRM = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 3, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("t1e1PRMOther", 1), ("t1e1PRMDisable", 2), ("t1e1PRMEnable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: t1e1PRM.setStatus('current')
if mibBuilder.loadTexts: t1e1PRM.setDescription('Enables the ANSI T1.403 Performance Report Message functions.')
t1e1ZeroSuppress = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 3, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("t1e1ZeroOther", 1), ("t1e1ZeroDisable", 2), ("t1e1ZeroEnable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: t1e1ZeroSuppress.setStatus('current')
if mibBuilder.loadTexts: t1e1ZeroSuppress.setDescription('Determines whether ones density insertion is activated after 15 zeros . To ensure compliance with TR54016, this field must be enabled.')
t1e1NationalBit = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 3, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("t1e1NationalOther", 1), ("t1e1NationalNone", 2), ("t1e1NationalSA4", 3), ("t1e1NationalSA5", 4), ("t1e1NationalSA6", 5), ("t1e1NationalSA7", 6), ("t1e1NationalSA8", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: t1e1NationalBit.setStatus('current')
if mibBuilder.loadTexts: t1e1NationalBit.setDescription('Selects a national bit to create a 4-kbps datalink between the endpoint units.')
t1e1KeepAlive = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 3, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("t1e1KeepAliveOther", 1), ("t1e1KeepAliveUnframedOnes", 2), ("t1e1KeepAliveFramedOnes", 3), ("t1e1KeepAliveLoop", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: t1e1KeepAlive.setStatus('current')
if mibBuilder.loadTexts: t1e1KeepAlive.setDescription('Selects keep alive framed and unframed ones when the unit detects LOS or OOF.')
t1e1CRC4Mode = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 3, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("t1e1CRC4Other", 1), ("t1e1CRC4Disabled", 2), ("t1e1CRC4Enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: t1e1CRC4Mode.setStatus('current')
if mibBuilder.loadTexts: t1e1CRC4Mode.setDescription('Selects whether CRC4 is enabled or disabled.')
t1e1DSXLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 3, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("t1e1DSXOther", 1), ("t1e1DSX0110", 2), ("t1e1DSX111220", 3), ("t1e1DSX221330", 4), ("t1e1DSX331440", 5), ("t1e1DSX441550", 6), ("t1e1DSX551660", 7), ("t1e1DSX661up", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: t1e1DSXLevel.setStatus('current')
if mibBuilder.loadTexts: t1e1DSXLevel.setDescription('Selects the DSX1 interface output level.')
t1e1CRC = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 3, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("t1e1CRCOther", 1), ("t1e1CRCPass", 2), ("t1e1CRCRegenerate", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: t1e1CRC.setStatus('current')
if mibBuilder.loadTexts: t1e1CRC.setDescription('Determines whether received CRC data is passed through or regenerated.')
t1e1FDLPassThrough = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 3, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("t1e1FDLPassThroughOther", 1), ("t1e1FDLPassThroughPass", 2), ("t1e1FDLPassThroughTerminate", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: t1e1FDLPassThrough.setStatus('current')
if mibBuilder.loadTexts: t1e1FDLPassThrough.setDescription('Determines whether the ESF FDL passes through the CSU or terminates.')
t1e1AudibleAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 3, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("t1e1AudibleAlarmOther", 1), ("t1e1AudibleAlarmDisabled", 2), ("t1e1AudibleAlarmEnabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: t1e1AudibleAlarm.setStatus('current')
if mibBuilder.loadTexts: t1e1AudibleAlarm.setDescription("If applicable, Enables or Disables the CSU's internal buzzer which alerts users of an alarm condition.")
t1e1Function = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 3, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("t1e1FunctionOther", 1), ("t1e1FunctionNetwork", 2), ("t1e1FunctionSlaved", 3), ("t1e1FunctionBackup", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: t1e1Function.setStatus('current')
if mibBuilder.loadTexts: t1e1Function.setDescription('Specifies the function the network port will perform in the unit. The options are: t1e1FunctionNetwork (Independent network port) t1e1FunctionSlaved (Slaved to another network port) t1e1FunctionBackup (Automatic Protection Switching Backup for another network port)')
t1e1EBitGeneration = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 3, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: t1e1EBitGeneration.setStatus('current')
if mibBuilder.loadTexts: t1e1EBitGeneration.setDescription('')
t1e1RAIGeneration = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 3, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: t1e1RAIGeneration.setStatus('current')
if mibBuilder.loadTexts: t1e1RAIGeneration.setDescription('')
t1e1SpareBitInsertion = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 3, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: t1e1SpareBitInsertion.setStatus('current')
if mibBuilder.loadTexts: t1e1SpareBitInsertion.setDescription('')
t1e1Sa4In = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 3, 1, 1, 25), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: t1e1Sa4In.setStatus('current')
if mibBuilder.loadTexts: t1e1Sa4In.setDescription('')
t1e1Sa5In = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 3, 1, 1, 26), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: t1e1Sa5In.setStatus('current')
if mibBuilder.loadTexts: t1e1Sa5In.setDescription('')
t1e1Sa6In = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 3, 1, 1, 27), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: t1e1Sa6In.setStatus('current')
if mibBuilder.loadTexts: t1e1Sa6In.setDescription('')
t1e1Sa7In = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 3, 1, 1, 28), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: t1e1Sa7In.setStatus('current')
if mibBuilder.loadTexts: t1e1Sa7In.setDescription('')
t1e1Sa8In = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 3, 1, 1, 29), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: t1e1Sa8In.setStatus('current')
if mibBuilder.loadTexts: t1e1Sa8In.setDescription('')
t1e1Sa4Out = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 3, 1, 1, 30), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: t1e1Sa4Out.setStatus('current')
if mibBuilder.loadTexts: t1e1Sa4Out.setDescription('')
t1e1Sa5Out = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 3, 1, 1, 31), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: t1e1Sa5Out.setStatus('current')
if mibBuilder.loadTexts: t1e1Sa5Out.setDescription('')
t1e1Sa6Out = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 3, 1, 1, 32), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: t1e1Sa6Out.setStatus('current')
if mibBuilder.loadTexts: t1e1Sa6Out.setDescription('')
t1e1Sa7Out = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 3, 1, 1, 33), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: t1e1Sa7Out.setStatus('current')
if mibBuilder.loadTexts: t1e1Sa7Out.setDescription('')
t1e1Sa8Out = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 3, 1, 1, 34), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: t1e1Sa8Out.setStatus('current')
if mibBuilder.loadTexts: t1e1Sa8Out.setDescription('')
t1e1AlarmTable = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 2, 3, 2), )
if mibBuilder.loadTexts: t1e1AlarmTable.setStatus('current')
if mibBuilder.loadTexts: t1e1AlarmTable.setDescription('The T1 and E1 Alarm Table.')
t1e1AlarmTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 2, 3, 2, 1), ).setIndexNames((0, "DS8200v2-MIB", "t1e1AlarmNearIndex"), (0, "DS8200v2-MIB", "t1e1AlarmFarIndex"), (0, "DS8200v2-MIB", "t1e1AlarmIndex"))
if mibBuilder.loadTexts: t1e1AlarmTableEntry.setStatus('current')
if mibBuilder.loadTexts: t1e1AlarmTableEntry.setDescription('An entry in the t1e1Table.')
t1e1AlarmNearIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t1e1AlarmNearIndex.setStatus('current')
if mibBuilder.loadTexts: t1e1AlarmNearIndex.setDescription('Selects the near device.')
t1e1AlarmFarIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t1e1AlarmFarIndex.setStatus('current')
if mibBuilder.loadTexts: t1e1AlarmFarIndex.setDescription('Selects the far device.')
t1e1AlarmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 3, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t1e1AlarmIndex.setStatus('current')
if mibBuilder.loadTexts: t1e1AlarmIndex.setDescription('This object is the index into the t1e1Table.')
t1e1StatusSummary = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 3, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: t1e1StatusSummary.setStatus('current')
if mibBuilder.loadTexts: t1e1StatusSummary.setDescription('This object provides a summary of the port status.')
t1e1AlarmSummary = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 3, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: t1e1AlarmSummary.setStatus('current')
if mibBuilder.loadTexts: t1e1AlarmSummary.setDescription('This object provides a summary of the port alarms.')
t1e1ESStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("t1e1StatusOther", 1), ("t1e1StatusNoES", 2), ("t1e1StatusES", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: t1e1ESStatus.setStatus('current')
if mibBuilder.loadTexts: t1e1ESStatus.setDescription('Reports if an Errored Second condition exists.')
t1e1ESCount = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 3, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t1e1ESCount.setStatus('current')
if mibBuilder.loadTexts: t1e1ESCount.setDescription('This count contains the number of consecutive seconds an Errored Second condition has existed.')
t1e1ESThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 3, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: t1e1ESThreshold.setStatus('current')
if mibBuilder.loadTexts: t1e1ESThreshold.setDescription('Sets the Errored Seconds alarm threshold. Setting this field to 0 disables the alarm. The threshold can be set to any value in the range 0 to 900.')
t1e1ESAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 3, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("t1e1ESAlarmOther", 1), ("t1e1ESAlarmNone", 2), ("t1e1ESAlarmThresholdExceeded", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: t1e1ESAlarm.setStatus('current')
if mibBuilder.loadTexts: t1e1ESAlarm.setDescription('This status indicates if the Errors Seconds threshold is exceeded.')
t1e1SESStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 3, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("t1e1StatusOther", 1), ("t1e1StatusNoSES", 2), ("t1e1StatusSES", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: t1e1SESStatus.setStatus('current')
if mibBuilder.loadTexts: t1e1SESStatus.setDescription('Reports if a Severely Errored condition exists.')
t1e1SESCount = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 3, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t1e1SESCount.setStatus('current')
if mibBuilder.loadTexts: t1e1SESCount.setDescription('This count contains the number of consecutive seconds a Severely Errored condition has existed.')
t1e1SESThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 3, 2, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: t1e1SESThreshold.setStatus('current')
if mibBuilder.loadTexts: t1e1SESThreshold.setDescription('Sets the Severely Errored seconds alarm threshold. Setting this field to 0 disables the alarm. The threshold can be set to any value in the range 0 to 900.')
t1e1SESAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 3, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("t1e1SESAlarmOther", 1), ("t1e1SESAlarmNone", 2), ("t1e1SESAlarmThresholdExceeded", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: t1e1SESAlarm.setStatus('current')
if mibBuilder.loadTexts: t1e1SESAlarm.setDescription('This status indicates if the Severely Errors Seconds threshold is exceeded.')
t1e1LOSSStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 3, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("t1e1StatusOther", 1), ("t1e1StatusNoLOSS", 2), ("t1e1StatusLOSS", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: t1e1LOSSStatus.setStatus('current')
if mibBuilder.loadTexts: t1e1LOSSStatus.setDescription('Reports if a Loss of Signal condition exists.')
t1e1LOSSCount = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 3, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t1e1LOSSCount.setStatus('current')
if mibBuilder.loadTexts: t1e1LOSSCount.setDescription('This count contains the number of consecutive seconds a Loss of Signal condition has existed.')
t1e1LOSSThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 3, 2, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: t1e1LOSSThreshold.setStatus('current')
if mibBuilder.loadTexts: t1e1LOSSThreshold.setDescription('Sets the Loss of Signal seconds alarm threshold. Setting this field to 0 disables the alarm. The threshold can be set to any value in the range 0 to 900.')
t1e1LOSSAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 3, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("t1e1LOSSAlarmOther", 1), ("t1e1LOSSAlarmNone", 2), ("t1e1LOSSAlarmThresholdExceeded", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: t1e1LOSSAlarm.setStatus('current')
if mibBuilder.loadTexts: t1e1LOSSAlarm.setDescription('This status indicates if the Loss of Signal Seconds threshold is exceeded.')
t1e1UASStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 3, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("t1e1StatusOther", 1), ("t1e1StatusNoUAS", 2), ("t1e1StatusUAS", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: t1e1UASStatus.setStatus('current')
if mibBuilder.loadTexts: t1e1UASStatus.setDescription('Reports if an Unavailable condition exists.')
t1e1UASCount = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 3, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t1e1UASCount.setStatus('current')
if mibBuilder.loadTexts: t1e1UASCount.setDescription('This count contains the number of consecutive seconds an Unavailable condition has existed.')
t1e1UASThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 3, 2, 1, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: t1e1UASThreshold.setStatus('current')
if mibBuilder.loadTexts: t1e1UASThreshold.setDescription('Sets the unavailable seconds alarm threshold. Setting this field to 0 disables the alarm. The threshold can be set to any value in the range 0 to 900.')
t1e1UASAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 3, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("t1e1UASAlarmOther", 1), ("t1e1UASAlarmNone", 2), ("t1e1UASAlarmThresholdExceeded", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: t1e1UASAlarm.setStatus('current')
if mibBuilder.loadTexts: t1e1UASAlarm.setDescription('This status indicates if the Unavailable Seconds threshold is exceeded.')
t1e1CSSStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 3, 2, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("t1e1StatusOther", 1), ("t1e1StatusNoCSS", 2), ("t1e1StatusCSS", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: t1e1CSSStatus.setStatus('current')
if mibBuilder.loadTexts: t1e1CSSStatus.setDescription('Reports if a Controlled Slip condition exists.')
t1e1CSSCount = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 3, 2, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t1e1CSSCount.setStatus('current')
if mibBuilder.loadTexts: t1e1CSSCount.setDescription('This count contains the number of consecutive seconds in which at least one Controlled Slip occurred.')
t1e1CSSThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 3, 2, 1, 24), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: t1e1CSSThreshold.setStatus('current')
if mibBuilder.loadTexts: t1e1CSSThreshold.setDescription('Sets the Controlled Slip seconds alarm threshold. Setting this field to 0 disables the alarm. The threshold can be set to any value in the range 0 to 900.')
t1e1CSSAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 3, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("t1e1CSSAlarmOther", 1), ("t1e1CSSAlarmNone", 2), ("t1e1CSSAlarmThresholdExceeded", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: t1e1CSSAlarm.setStatus('current')
if mibBuilder.loadTexts: t1e1CSSAlarm.setDescription('This status indicates if the Controlled Slip seconds threshold is exceeded.')
t1e1BPVSStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 3, 2, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("t1e1StatusOther", 1), ("t1e1StatusNoBPVS", 2), ("t1e1StatusBPVS", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: t1e1BPVSStatus.setStatus('current')
if mibBuilder.loadTexts: t1e1BPVSStatus.setDescription('Reports if a Bipolar Violation Error condition exists.')
t1e1BPVSCount = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 3, 2, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t1e1BPVSCount.setStatus('current')
if mibBuilder.loadTexts: t1e1BPVSCount.setDescription('This count contains the number of consecutive seconds a Bipolar Violation Error condition has existed.')
t1e1BPVSThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 3, 2, 1, 28), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: t1e1BPVSThreshold.setStatus('current')
if mibBuilder.loadTexts: t1e1BPVSThreshold.setDescription('Sets the Bipolar Violation Error seconds alarm threshold. Setting this field to 0 disables the alarm. The threshold can be set to any value in the range 0 to 900.')
t1e1BPVSAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 3, 2, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("t1e1BPVSAlarmOther", 1), ("t1e1BPVSAlarmNone", 2), ("t1e1BPVSAlarmThresholdExceeded", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: t1e1BPVSAlarm.setStatus('current')
if mibBuilder.loadTexts: t1e1BPVSAlarm.setDescription('This status indicates if the Bipolar Violation Error seconds threshold is exceeded.')
t1e1OOFSStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 3, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("t1e1StatusOther", 1), ("t1e1StatusNoOOF", 2), ("t1e1StatusOOF", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: t1e1OOFSStatus.setStatus('current')
if mibBuilder.loadTexts: t1e1OOFSStatus.setDescription('Indicates that the unit is unable to synchronize on the incoming framing pattern.')
t1e1OOFSCount = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 3, 2, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t1e1OOFSCount.setStatus('current')
if mibBuilder.loadTexts: t1e1OOFSCount.setDescription('This count contains the number of consecutive seconds an OOF condition has existed.')
t1e1OOFSThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 3, 2, 1, 32), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: t1e1OOFSThreshold.setStatus('current')
if mibBuilder.loadTexts: t1e1OOFSThreshold.setDescription('Sets the OOF seconds alarm threshold. Setting this field to 0 disables the alarm. The threshold can be set to any value in the range 0 to 900.')
t1e1OOFSAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 3, 2, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("t1e1OOFSAlarmOther", 1), ("t1e1OOFSAlarmNone", 2), ("t1e1OOFSAlarmExists", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: t1e1OOFSAlarm.setStatus('current')
if mibBuilder.loadTexts: t1e1OOFSAlarm.setDescription('Indicates if an OOF seconds alarm condition exists.')
t1e1AISStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 3, 2, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("t1e1StatusOther", 1), ("t1e1StatusNoAIS", 2), ("t1e1StatusAIS", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: t1e1AISStatus.setStatus('current')
if mibBuilder.loadTexts: t1e1AISStatus.setDescription('Indicates that the unit is receiving an unframed all ones pattern.')
t1e1AISCount = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 3, 2, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t1e1AISCount.setStatus('current')
if mibBuilder.loadTexts: t1e1AISCount.setDescription('This count contains the number of consecutive seconds an Unframed All Ones condition has existed.')
t1e1AISThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 3, 2, 1, 36), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: t1e1AISThreshold.setStatus('current')
if mibBuilder.loadTexts: t1e1AISThreshold.setDescription('Sets the AIS seconds alarm threshold. Setting this field to 0 disables the alarm. The threshold can be set to any value in the range 0 to 900.')
t1e1AISAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 3, 2, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("t1e1AISAlarmOther", 1), ("t1e1AISAlarmNone", 2), ("t1e1AISAlarmExists", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: t1e1AISAlarm.setStatus('current')
if mibBuilder.loadTexts: t1e1AISAlarm.setDescription('Indicates if an Unframed All Ones alarm condition exists.')
t1e1RASStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 3, 2, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("t1e1RASStatusOther", 1), ("t1e1RASStatusNoRAS", 2), ("t1e1RASStatusRAS", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: t1e1RASStatus.setStatus('current')
if mibBuilder.loadTexts: t1e1RASStatus.setDescription('Reports if a Remote (Yellow) Alarm condition exists.')
t1e1RASCount = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 3, 2, 1, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t1e1RASCount.setStatus('current')
if mibBuilder.loadTexts: t1e1RASCount.setDescription('This count contains the number of consecutive seconds a Remote (Yellow) Alarm condition has existed.')
t1e1RASThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 3, 2, 1, 40), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: t1e1RASThreshold.setStatus('current')
if mibBuilder.loadTexts: t1e1RASThreshold.setDescription('Sets the RAS seconds alarm threshold. Setting this field to 0 disables the alarm. The threshold can be set to any value in the range 0 to 900.')
t1e1RASAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 3, 2, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("t1e1RASAlarmOther", 1), ("t1e1RASAlarmNone", 2), ("t1e1RASAlarmExists", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: t1e1RASAlarm.setStatus('current')
if mibBuilder.loadTexts: t1e1RASAlarm.setDescription('This status indicates if a Remote (Yellow) Alarm exists.')
t1e1AlarmResetTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 3, 2, 1, 42), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: t1e1AlarmResetTimer.setStatus('current')
if mibBuilder.loadTexts: t1e1AlarmResetTimer.setDescription('Sets the Alarm Reset Timer, this field can be set to any value in the range 0 to 900.')
t1e1AlarmReset = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 3, 2, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("t1e1AlarmResetOther", 1), ("t1e1AlarmResetClearAlarms", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: t1e1AlarmReset.setStatus('current')
if mibBuilder.loadTexts: t1e1AlarmReset.setDescription('This is used to clear the current alarm counts.')
ddsNetConfigTable = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 2, 4, 1), )
if mibBuilder.loadTexts: ddsNetConfigTable.setStatus('current')
if mibBuilder.loadTexts: ddsNetConfigTable.setDescription('The dds Network Interface Configuration Table.')
ddsNetConfigTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 2, 4, 1, 1), ).setIndexNames((0, "DS8200v2-MIB", "ddsNetConfigNearIndex"), (0, "DS8200v2-MIB", "ddsNetConfigFarIndex"), (0, "DS8200v2-MIB", "ddsNetConfigIndex"))
if mibBuilder.loadTexts: ddsNetConfigTableEntry.setStatus('current')
if mibBuilder.loadTexts: ddsNetConfigTableEntry.setDescription('An entry in the Network Interface Table.')
ddsNetConfigNearIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddsNetConfigNearIndex.setStatus('current')
if mibBuilder.loadTexts: ddsNetConfigNearIndex.setDescription('Selects the near device.')
ddsNetConfigFarIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 4, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddsNetConfigFarIndex.setStatus('current')
if mibBuilder.loadTexts: ddsNetConfigFarIndex.setDescription('Selects the far device.')
ddsNetConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 4, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddsNetConfigIndex.setStatus('current')
if mibBuilder.loadTexts: ddsNetConfigIndex.setDescription('Index into the ddsNetConfigTable.')
ddsNetDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 4, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ddsNetDescription.setStatus('current')
if mibBuilder.loadTexts: ddsNetDescription.setDescription('Contains a textual description of the port.')
ddsNetRate = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("ddsNetRate2400", 1), ("ddsNetRate4800", 2), ("ddsNetRate9600", 3), ("ddsNetRate19200", 4), ("ddsNetRate38400", 5), ("ddsNetRate56000", 6), ("ddsNetRate64000", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ddsNetRate.setStatus('current')
if mibBuilder.loadTexts: ddsNetRate.setDescription('This object is the identifier of the current DDS network rate. The values mean: ddsNetRate2400 the DDS network interface is operating at 2400bps ddsNetRate4800 the DDS network interface is operating at 4800bps ddsNetRate9600 the DDS network interface is operating at 9600bps ddsNetRate19200 the DDS network interface is operating at 19200bps ddsNetRate38400 the DDS network interface is operating at 38400bps ddsNetRate56000 the DDS network interface is operating at 56000bps ddsNetRate64000 the DDS network interface is operating at 64000bps')
ddsNetMode = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ddsNetModeNormal", 1), ("ddsNetModeProprietaryTXPI", 2), ("ddsNetMode64KClearChannel", 3), ("ddsNetMode64KCCProprietaryTXPII", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ddsNetMode.setStatus('current')
if mibBuilder.loadTexts: ddsNetMode.setDescription('This variable describes mode in which data is being sent from the DDS unit back towards the network. Changing the value of this variable can cause a loss of remote communications. The values mean: ddsNetModeNormal (DDS-I) normal data mode of operation ddsNetModeProprietaryTXPI (DDS-I) data being sent out on the DDS network is in a proprietary mode to allow for remote communications, rate adaption, and SYNC to ASYNC modes ddsNetMode64KClearChannel (DDS-II) A special case of DDS-II, where the line rate is 72K, the data rate is 64K, and there is no secondary channel. ddsNetMode64KCCProprietaryTXPII (DDS-II) A special case of DDS-II, where the line rate is 72K, the data rate is 64K, and there is no secondary channel. In addition, the data being sent out on the DDS network is in a proprietary mode to allow for remote communications, rate adaption, SYNC to ASYNC, and/or TDM modes.')
ddsNetTimingSource = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ddsNetTimingNet", 1), ("ddsNetTimingInt", 2), ("ddsNetTimingDTE", 3), ("ddsNetTimingPort1", 4), ("ddsNetTimingPort2", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ddsNetTimingSource.setStatus('current')
if mibBuilder.loadTexts: ddsNetTimingSource.setDescription('This variable describes the current timing source for the DDS network interface. The values mean: ddsNetTimingNet unit dependant upon network for DDS network interface timing ddsNetTimingInt unit supplying timing for DDS network interface ddsNetTimingDTE unit dependant upon DTE device for network interface timing ddsNetTimingPort1 unit dependant upon serial port 1 device for network interface timing ddsNetTimingPort2 unit dependant upon serial port 2 device for network interface timing')
ddsNetRemComm = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ddsNetRemCommEnabled", 1), ("ddsNetRemCommDisabled", 2), ("ddsNetRemCommNotAvailable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddsNetRemComm.setStatus('current')
if mibBuilder.loadTexts: ddsNetRemComm.setDescription('This variable describes the current setting for the remote communications link. The values mean: ddsNetRemCommEnabled remote communications can be carried out end to end ddsNetRemCommDisabled remote communications are not allowed ddsNetRemCommNotAvailable this unit does not support remote communications')
ddsNetCircuitAssur = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 4, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ddsNetCircuitAssurEnabled", 1), ("ddsNetCircuitAssurDisabled", 2), ("ddsNetCircuitAssurNotAvailable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ddsNetCircuitAssur.setStatus('current')
if mibBuilder.loadTexts: ddsNetCircuitAssur.setDescription('This variable describes the current setting for the circuit assurance option. The values mean: ddsNetCircuitAssurEnabled Circuit Assurance is enabled and the integrity of the DDS loop will be maintained ddsNetCircuitAssurDisabled Circuit Assurance is disabled ddsNetCircuitAssurNotAvailable this unit does not support Circuit Assurance')
ddsNetAntiStrTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 4, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ddsNetAntiStrTimerOff", 1), ("ddsNetAntiStrTimer10", 2), ("ddsNetAntiStrTimer30", 3), ("ddsNetAntiStrTimer60", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ddsNetAntiStrTimer.setStatus('current')
if mibBuilder.loadTexts: ddsNetAntiStrTimer.setDescription('This variable describes the current setting for the anti streaming timer. The values mean: ddsNetAntiStrTimerOff the AntiStreaming Timer is off ddsNetAntiStrTimer10 the AntiStreaming Timer is set to 10 seconds ddsNetAntiStrTimer30 the AntiStreaming Timer is set to 30 seconds ddsNetAntiStrTimer60 the AntiStreaming Timer is set to 60 seconds')
ddsNetAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 2, 4, 2), )
if mibBuilder.loadTexts: ddsNetAlarmTable.setStatus('current')
if mibBuilder.loadTexts: ddsNetAlarmTable.setDescription('The dds Network Interface Alarm Table.')
ddsNetAlarmTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 2, 4, 2, 1), ).setIndexNames((0, "DS8200v2-MIB", "ddsNetAlarmNearIndex"), (0, "DS8200v2-MIB", "ddsNetAlarmFarIndex"), (0, "DS8200v2-MIB", "ddsNetAlarmIndex"))
if mibBuilder.loadTexts: ddsNetAlarmTableEntry.setStatus('current')
if mibBuilder.loadTexts: ddsNetAlarmTableEntry.setDescription('An entry in the ddsNetAlarmTable.')
ddsNetAlarmNearIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddsNetAlarmNearIndex.setStatus('current')
if mibBuilder.loadTexts: ddsNetAlarmNearIndex.setDescription('Selects the near device.')
ddsNetAlarmFarIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 4, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddsNetAlarmFarIndex.setStatus('current')
if mibBuilder.loadTexts: ddsNetAlarmFarIndex.setDescription('Selects the far device.')
ddsNetAlarmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 4, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddsNetAlarmIndex.setStatus('current')
if mibBuilder.loadTexts: ddsNetAlarmIndex.setDescription('Index into the ddsNetAlarmTable.')
ddsNetStatusSummary = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 4, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddsNetStatusSummary.setStatus('current')
if mibBuilder.loadTexts: ddsNetStatusSummary.setDescription('This object provides a summary of the port status.')
ddsNetAlarmSummary = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 4, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddsNetAlarmSummary.setStatus('current')
if mibBuilder.loadTexts: ddsNetAlarmSummary.setDescription('This object provides a summary of the port alarms.')
ddsNetLOSStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 4, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ddsNetStatusLOSOther", 1), ("ddsNetStatusNoLOS", 2), ("ddsNetStatusLOS", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddsNetLOSStatus.setStatus('current')
if mibBuilder.loadTexts: ddsNetLOSStatus.setDescription('Reports if a Loss of Signal condition exists.')
ddsNetLOSCount = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 4, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddsNetLOSCount.setStatus('current')
if mibBuilder.loadTexts: ddsNetLOSCount.setDescription('This count contains the number of consecutive seconds the unit received signal has been interrupted.')
ddsNetLOSThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 4, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("ddsNetLOSThresholdOther", 1), ("ddsNetLOSThresholdNone", 2), ("ddsNetLOSThreshold1", 3), ("ddsNetLOSThreshold2", 4), ("ddsNetLOSThreshold3", 5), ("ddsNetLOSThreshold4", 6), ("ddsNetLOSThreshold5", 7), ("ddsNetLOSThreshold10", 8), ("ddsNetLOSThreshold20", 9), ("ddsNetLOSThreshold30", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ddsNetLOSThreshold.setStatus('current')
if mibBuilder.loadTexts: ddsNetLOSThreshold.setDescription('A period, measured in seconds, in which the DDS received signal is interrupted.')
ddsNetLOSAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 4, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ddsNetLOSAlarmOther", 1), ("ddsNetLOSAlarmNone", 2), ("ddsNetLOSAlarmThresholdExceeded", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddsNetLOSAlarm.setStatus('current')
if mibBuilder.loadTexts: ddsNetLOSAlarm.setDescription('This status indicates if the Loss of Signal Seconds threshold is exceeded.')
ddsNetOOFStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 4, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ddsNetStatusOOFOther", 1), ("ddsNetStatusNoOOF", 2), ("ddsNetStatusOOF", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddsNetOOFStatus.setStatus('current')
if mibBuilder.loadTexts: ddsNetOOFStatus.setDescription('Reports if an Out of Frame condition exists.')
ddsNetOOFCount = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 4, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddsNetOOFCount.setStatus('current')
if mibBuilder.loadTexts: ddsNetOOFCount.setDescription('This count contains the number of consecutive seconds the unit has received the out of frame code.')
ddsNetOOFThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 4, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("ddsNetOOFThresholdOther", 1), ("ddsNetOOFThresholdNone", 2), ("ddsNetOOFThreshold1", 3), ("ddsNetOOFThreshold2", 4), ("ddsNetOOFThreshold3", 5), ("ddsNetOOFThreshold4", 6), ("ddsNetOOFThreshold5", 7), ("ddsNetOOFThreshold10", 8), ("ddsNetOOFThreshold20", 9), ("ddsNetOOFThreshold30", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ddsNetOOFThreshold.setStatus('current')
if mibBuilder.loadTexts: ddsNetOOFThreshold.setDescription('A period, measured in seconds, in which the Out Of Frame code is received or a frame sync loss occurred.')
ddsNetOOFAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 4, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ddsNetOOFSAlarmOther", 1), ("ddsNetOOFSAlarmNone", 2), ("ddsNetOOFSAlarmThresholdExceeded", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddsNetOOFAlarm.setStatus('current')
if mibBuilder.loadTexts: ddsNetOOFAlarm.setDescription('This status indicates if the Out of Frame Seconds threshold is exceeded.')
ddsNetOOSStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 4, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ddsNetStatusOOSOther", 1), ("ddsNetStatusNoOOS", 2), ("ddsNetStatusOOS", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddsNetOOSStatus.setStatus('current')
if mibBuilder.loadTexts: ddsNetOOSStatus.setDescription('Reports if Out of Service codes are received.')
ddsNetOOSCount = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 4, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddsNetOOSCount.setStatus('current')
if mibBuilder.loadTexts: ddsNetOOSCount.setDescription('This count contains the number of consecutive seconds the unit has received the out of service code.')
ddsNetOOSThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 4, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("ddsNetOOSThresholdOther", 1), ("ddsNetOOSThresholdNone", 2), ("ddsNetOOSThreshold1", 3), ("ddsNetOOSThreshold2", 4), ("ddsNetOOSThreshold3", 5), ("ddsNetOOSThreshold4", 6), ("ddsNetOOSThreshold5", 7), ("ddsNetOOSThreshold10", 8), ("ddsNetOOSThreshold20", 9), ("ddsNetOOSThreshold30", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ddsNetOOSThreshold.setStatus('current')
if mibBuilder.loadTexts: ddsNetOOSThreshold.setDescription('A period, measured in seconds, in which the Out Of Service code is received.')
ddsNetOOSAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 4, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ddsNetOOSAlarmOther", 1), ("ddsNetOOSAlarmNone", 2), ("ddsNetOOSAlarmThresholdExceeded", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddsNetOOSAlarm.setStatus('current')
if mibBuilder.loadTexts: ddsNetOOSAlarm.setDescription('This status indicates if the Out of Service Seconds threshold is exceeded.')
ddsNetFDLStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 4, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ddsNetStatusFDLOther", 1), ("ddsNetStatusNoFDL", 2), ("ddsNetStatusFDL", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddsNetFDLStatus.setStatus('current')
if mibBuilder.loadTexts: ddsNetFDLStatus.setDescription('Reports if Facility Data Link errors have occurred.')
ddsNetFDLCount = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 4, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddsNetFDLCount.setStatus('current')
if mibBuilder.loadTexts: ddsNetFDLCount.setDescription('This count contains the number of consecutive seconds in which FDL errors have occurred.')
ddsNetFDLThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 4, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("ddsNetFDLThresholdOther", 1), ("ddsNetFDLThresholdNone", 2), ("ddsNetFDLThreshold1", 3), ("ddsNetFDLThreshold2", 4), ("ddsNetFDLThreshold3", 5), ("ddsNetFDLThreshold4", 6), ("ddsNetFDLThreshold5", 7), ("ddsNetFDLThreshold10", 8), ("ddsNetFDLThreshold20", 9), ("ddsNetFDLThreshold30", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ddsNetFDLThreshold.setStatus('current')
if mibBuilder.loadTexts: ddsNetFDLThreshold.setDescription('A period, measured in seconds, in which FDL errors have occurred.')
ddsNetFDLAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 4, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ddsNetFDLAlarmOther", 1), ("ddsNetFDLAlarmNone", 2), ("ddsNetFDLAlarmThresholdExceeded", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddsNetFDLAlarm.setStatus('current')
if mibBuilder.loadTexts: ddsNetFDLAlarm.setDescription('This status indicates if the Facility Data Link threshold is exceeded.')
ddsNetAlarmResetTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 4, 2, 1, 22), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ddsNetAlarmResetTimer.setStatus('current')
if mibBuilder.loadTexts: ddsNetAlarmResetTimer.setDescription('Sets the Alarm Reset Timer, this field can be set to any value in the range 0 to 900.')
ddsNetAlarmReset = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 4, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ddsNetAlarmResetOther", 1), ("ddsNetAlarmResetClearAlarms", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ddsNetAlarmReset.setStatus('current')
if mibBuilder.loadTexts: ddsNetAlarmReset.setDescription('This is used to clear the current alarm counts.')
ddsNetBPVStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 4, 2, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ddsNetStatusBPVOther", 1), ("ddsNetStatusNoBPV", 2), ("ddsNetStatusBPV", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddsNetBPVStatus.setStatus('current')
if mibBuilder.loadTexts: ddsNetBPVStatus.setDescription('Reports if a Bipolar violation event occurred in the last second.')
ddsNetBPVCount = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 4, 2, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddsNetBPVCount.setStatus('current')
if mibBuilder.loadTexts: ddsNetBPVCount.setDescription('This count contains the number of consecutive seconds the unit received bipolar violations.')
ddsNetBPVThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 4, 2, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("ddsNetBPVThresholdOther", 1), ("ddsNetBPVThresholdNone", 2), ("ddsNetBPVThreshold1", 3), ("ddsNetBPVThreshold2", 4), ("ddsNetBPVThreshold3", 5), ("ddsNetBPVThreshold4", 6), ("ddsNetBPVThreshold5", 7), ("ddsNetBPVThreshold10", 8), ("ddsNetBPVThreshold20", 9), ("ddsNetBPVThreshold30", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ddsNetBPVThreshold.setStatus('current')
if mibBuilder.loadTexts: ddsNetBPVThreshold.setDescription('A period, measured in seconds, in which the unit receives bipolar violations before an alarm is triggered.')
ddsNetBPVAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 4, 2, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ddsNetBPVAlarmOther", 1), ("ddsNetBPVAlarmNone", 2), ("ddsNetBPVAlarmThresholdExceeded", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddsNetBPVAlarm.setStatus('current')
if mibBuilder.loadTexts: ddsNetBPVAlarm.setDescription('This status indicates if the Bipolar violation Seconds threshold is exceeded.')
serialDteConfigTable = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 2, 5, 1), )
if mibBuilder.loadTexts: serialDteConfigTable.setStatus('current')
if mibBuilder.loadTexts: serialDteConfigTable.setDescription('The Serial DTE Config Table.')
serialDteConfigTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 2, 5, 1, 1), ).setIndexNames((0, "DS8200v2-MIB", "serialDteConfigNearIndex"), (0, "DS8200v2-MIB", "serialDteConfigFarIndex"), (0, "DS8200v2-MIB", "serialDteConfigIndex"))
if mibBuilder.loadTexts: serialDteConfigTableEntry.setStatus('current')
if mibBuilder.loadTexts: serialDteConfigTableEntry.setDescription('An entry in the serial DTE Config Table.')
serialDteConfigNearIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialDteConfigNearIndex.setStatus('current')
if mibBuilder.loadTexts: serialDteConfigNearIndex.setDescription('Selects the near device.')
serialDteConfigFarIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 5, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialDteConfigFarIndex.setStatus('current')
if mibBuilder.loadTexts: serialDteConfigFarIndex.setDescription('Selects the far device.')
serialDteConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 5, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialDteConfigIndex.setStatus('current')
if mibBuilder.loadTexts: serialDteConfigIndex.setDescription('Index into the DteTable.')
serialDteDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 5, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialDteDescription.setStatus('current')
if mibBuilder.loadTexts: serialDteDescription.setDescription('Contains a textual description of the port.')
serialDteType = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("serialDteTypeOther", 1), ("serialDteTypeV35", 2), ("serialDteTypeRS232", 3), ("serialDteTypeEIA530", 4), ("serialDteTypeX21", 5), ("serialDteTypeV36", 6), ("serialDteTypeEIA530A", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serialDteType.setStatus('current')
if mibBuilder.loadTexts: serialDteType.setDescription('Selects the DTE port type if applicable.')
serialDteRate = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83))).clone(namedValues=NamedValues(("serialDteRateOther", 1), ("serialDteRate2400", 2), ("serialDteRate4800", 3), ("serialDteRate9600", 4), ("serialDteRate19200", 5), ("serialDteRate38400", 6), ("serialDteRate52000", 7), ("serialDteRate56000", 8), ("serialDteRate57600", 9), ("serialDteRate60000", 10), ("serialDteRate64000", 11), ("serialDteRate112000", 12), ("serialDteRate128000", 13), ("serialDteRate168000", 14), ("serialDteRate192000", 15), ("serialDteRate224000", 16), ("serialDteRate256000", 17), ("serialDteRate280000", 18), ("serialDteRate320000", 19), ("serialDteRate336000", 20), ("serialDteRate384000", 21), ("serialDteRate392000", 22), ("serialDteRate448000", 23), ("serialDteRate504000", 24), ("serialDteRate512000", 25), ("serialDteRate560000", 26), ("serialDteRate576000", 27), ("serialDteRate616000", 28), ("serialDteRate640000", 29), ("serialDteRate672000", 30), ("serialDteRate704000", 31), ("serialDteRate728000", 32), ("serialDteRate768000", 33), ("serialDteRate784000", 34), ("serialDteRate832000", 35), ("serialDteRate840000", 36), ("serialDteRate896000", 37), ("serialDteRate952000", 38), ("serialDteRate960000", 39), ("serialDteRate1008000", 40), ("serialDteRate1024000", 41), ("serialDteRate1064000", 42), ("serialDteRate1088000", 43), ("serialDteRate1120000", 44), ("serialDteRate1152000", 45), ("serialDteRate1176000", 46), ("serialDteRate1216000", 47), ("serialDteRate1232000", 48), ("serialDteRate1280000", 49), ("serialDteRate1288000", 50), ("serialDteRate1344000", 51), ("serialDteRate1400000", 52), ("serialDteRate1408000", 53), ("serialDteRate1456000", 54), ("serialDteRate1472000", 55), ("serialDteRate1512000", 56), ("serialDteRate1536000", 57), ("serialDteRate1568000", 58), ("serialDteRate1600000", 59), ("serialDteRate1624000", 60), ("serialDteRate1664000", 61), ("serialDteRate1680000", 62), ("serialDteRate1728000", 63), ("serialDteRate1736000", 64), ("serialDteRate1792000", 65), ("serialDteRate1856000", 66), ("serialDteRate1920000", 67), ("serialDteRate1984000", 68), ("serialDteRate2048000", 69), ("serialDteRate1200", 70), ("serialDteRate14400", 71), ("serialDteRate28800", 72), ("serialDteRate48000", 73), ("serialDteRate31200", 74), ("serialDteRate115200", 75), ("serialDteRate2112000", 76), ("serialDteRate2176000", 77), ("serialDteRate2240000", 78), ("serialDteRate2304000", 79), ("serialDteRate300", 80), ("serialDteRate600", 81), ("serialDteRate3072000", 82), ("serialDteRate4096000", 83)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serialDteRate.setStatus('current')
if mibBuilder.loadTexts: serialDteRate.setDescription('Selects the DTE port bit.')
serialDteInvertData = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 5, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("serialDteInvertDataOther", 1), ("serialDteInvertDataDisabled", 2), ("serialDteInvertDataEnabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serialDteInvertData.setStatus('current')
if mibBuilder.loadTexts: serialDteInvertData.setDescription('Specifies whether transmit and receive are inverted at the port.')
serialDteFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 5, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("serialDteFormatOther", 1), ("serialDteFormatSync", 2), ("serialDteFormatAsync", 3), ("serialDteFormatNotAvail", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serialDteFormat.setStatus('current')
if mibBuilder.loadTexts: serialDteFormat.setDescription('This variable describes the current operations format of the DTE interface. The values mean: serialDteFormatSync The DTE interface is currently set to operate in Synchronous clocking format serialDteFormatAsync The DTE interface is currently set to operate in the Asynchronous clocking format serialDteFormatNotAvail The DTE interface operating format is not available')
serialDteParity = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 5, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("serialDteParityOther", 1), ("serialDteParityNone", 2), ("serialDteParityOdd", 3), ("serialDteParityEven", 4), ("serialDteParityMark", 5), ("serialDteParitySpace", 6), ("serialDteParityNotAvail", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serialDteParity.setStatus('current')
if mibBuilder.loadTexts: serialDteParity.setDescription('This variable describes the current parity selected for the DTE interface. This variable is only valid when the DTE Mode is set to ASYNC. The values mean: serialDteParityNone The DTE interface is currently set for no parity bit checking or generation serialDteParityOdd The DTE interface is currently set for odd parity serialDteParityEven The DTE interface is currently set for even parity serialDteParityMark The DTE interface is currently set for mark parity serialDteParitySpace The DTE interface is currently set for space parity serialDteParityNotAvail The parity setting on the DTE interface is not available.')
serialDteStopBit = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 5, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("serialDteStopBitOther", 1), ("serialDteStopBit1", 2), ("serialDteStopBit2", 3), ("serialDteStopBitNotAvail", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serialDteStopBit.setStatus('current')
if mibBuilder.loadTexts: serialDteStopBit.setDescription('This variable describes the stop bit setting for the DTE interface. This variable is only valid when the DTE interface is set to ASYNC. The values mean: serialDteStopBit1 The DTE interface is configured to operate in the ASYNC mode with 1 stop bit serialDteStopBit2 The DTE interface is configured to operate in the ASYNC mode with 2 stop bits serialDteStopBitNotAvail The stop bit information is not available. The DTE interface is probably configured for synchronous operation.')
serialDteMode = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 5, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("serialDteModeOther", 1), ("serialDteModeDDSI", 2), ("serialDteModeDDSII", 3), ("serialDteModeTxpINormal", 4), ("serialDteModeTxpITDM", 5), ("serialDteModeTxpIINormal", 6), ("serialDteModeTxpIITDM", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serialDteMode.setStatus('current')
if mibBuilder.loadTexts: serialDteMode.setDescription('This variable describes mode in which data is being sent from the DDS unit back towards the network. ')
serialDteDSR = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 5, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("serialDteDSROther", 1), ("serialDteDSRTestOff", 2), ("serialDteDSRForcedOn", 3), ("serialDteDSRForcedOff", 4), ("serialDteDSRInternal", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serialDteDSR.setStatus('current')
if mibBuilder.loadTexts: serialDteDSR.setDescription('Selects DSR behavior.')
serialDteDCD = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 5, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("serialDteDCDOther", 1), ("serialDteDCDIdleOff", 2), ("serialDteDCDForcedOn", 3), ("serialDteDCDForcedOff", 4), ("serialDteDCDInternal", 5), ("serialDteDCDFarRTS", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serialDteDCD.setStatus('current')
if mibBuilder.loadTexts: serialDteDCD.setDescription('Selects DCD behavior.')
serialDteRTS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 5, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("serialDteRTSOther", 1), ("serialDteRTSNormal", 2), ("serialDteRTSForcedOn", 3), ("serialDteRTSExternal", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serialDteRTS.setStatus('current')
if mibBuilder.loadTexts: serialDteRTS.setDescription('Selects RTS behavior.')
serialDteRTSDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 5, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("serialDteRTSDelayOther", 1), ("serialDteRTSDelayNormal", 2), ("serialDteRTSDelayLong", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serialDteRTSDelay.setStatus('current')
if mibBuilder.loadTexts: serialDteRTSDelay.setDescription('Selects RTS to CTS transition delay.')
serialDteDTR = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 5, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("serialDteDTROther", 1), ("serialDteDTRFalse", 2), ("serialDteDTRTrue", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialDteDTR.setStatus('current')
if mibBuilder.loadTexts: serialDteDTR.setDescription('Reports if DTR from the DTE device is false.')
serialDteCTS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 5, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("serialDteCTSOther", 1), ("serialDteCTSForceTrue", 2), ("serialDteCTSForceFalse", 3), ("serialDteCTSInternal", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serialDteCTS.setStatus('current')
if mibBuilder.loadTexts: serialDteCTS.setDescription('Specifies the control of the CTS signal at the port.')
serialDteV54 = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 5, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("serialDteV54Other", 1), ("serialDteV54Disable", 2), ("serialDteV54Enable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serialDteV54.setStatus('current')
if mibBuilder.loadTexts: serialDteV54.setDescription('Specifies if the unit should respond to inband V.54 loop commands.')
serialDteLL = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 5, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("serialDteLLOther", 1), ("serialDteLLDisable", 2), ("serialDteLLEnable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serialDteLL.setStatus('current')
if mibBuilder.loadTexts: serialDteLL.setDescription('Specifies if the unit should respond to local loop activation by the local loopback signal (EIA530 or RS-232 pin 18).')
serialDteRL = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 5, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("serialDteRLOther", 1), ("serialDteRLDisable", 2), ("serialDteRLEnable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serialDteRL.setStatus('current')
if mibBuilder.loadTexts: serialDteRL.setDescription('Specifies if the unit should respond to remote loop activation by the remote loopback signal (EIA530 or RS-232 pin 21).')
serialDteStartChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 5, 1, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serialDteStartChannel.setStatus('current')
if mibBuilder.loadTexts: serialDteStartChannel.setDescription('Specifies the starting channel for the interface.')
serialDteNumberOfChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 5, 1, 1, 22), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serialDteNumberOfChannels.setStatus('current')
if mibBuilder.loadTexts: serialDteNumberOfChannels.setDescription('Specifies the number of channels allocated to the interface.')
serialDteTxClock = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 5, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("serialDteTxClockOther", 1), ("serialDteTxClockInternal", 2), ("serialDteTxClockExternal", 3), ("serialDteTxClockOversample", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serialDteTxClock.setStatus('current')
if mibBuilder.loadTexts: serialDteTxClock.setDescription('Specifies how the interface derives its transmit clock.')
serialDteBundle = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 5, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("contiguous", 2), ("alternate", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serialDteBundle.setStatus('current')
if mibBuilder.loadTexts: serialDteBundle.setDescription('Specifies the allocation pattern of channels assigned to the serial port.')
serialDteChannelRate = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 5, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("nx56k", 2), ("nx64k", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serialDteChannelRate.setStatus('current')
if mibBuilder.loadTexts: serialDteChannelRate.setDescription('Specifies the rate of all channels assigned to the serial port.')
serialDteInvertClock = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 5, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serialDteInvertClock.setStatus('current')
if mibBuilder.loadTexts: serialDteInvertClock.setDescription('Specifies if an inverted clock is used to send data from the serial port.')
serialDteCharSize = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 5, 1, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("five", 2), ("six", 3), ("seven", 4), ("eight", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serialDteCharSize.setStatus('current')
if mibBuilder.loadTexts: serialDteCharSize.setDescription('Specifies the number of bits per character. This variable is valid in ASYNC mode.')
serialDteFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 5, 1, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("none", 2), ("xonXoff", 3), ("rtsCts", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serialDteFlowControl.setStatus('current')
if mibBuilder.loadTexts: serialDteFlowControl.setDescription('Specifies the Flow control to use. This variable is valid only in ASYNC mode.')
serialDtePinStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 5, 1, 1, 29), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialDtePinStatus.setStatus('current')
if mibBuilder.loadTexts: serialDtePinStatus.setDescription('This object provides a summary of the Serial port pin status.')
serialDteInInvertClock = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 5, 1, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serialDteInInvertClock.setStatus('current')
if mibBuilder.loadTexts: serialDteInInvertClock.setDescription('Specifies to use the inverted clock edge for data clocked into the serial port.')
serialDteAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 2, 5, 2), )
if mibBuilder.loadTexts: serialDteAlarmTable.setStatus('current')
if mibBuilder.loadTexts: serialDteAlarmTable.setDescription('The Serial DTE Alarm Table.')
serialDteAlarmTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 2, 5, 2, 1), ).setIndexNames((0, "DS8200v2-MIB", "serialDteAlarmNearIndex"), (0, "DS8200v2-MIB", "serialDteAlarmFarIndex"), (0, "DS8200v2-MIB", "serialDteAlarmIndex"))
if mibBuilder.loadTexts: serialDteAlarmTableEntry.setStatus('current')
if mibBuilder.loadTexts: serialDteAlarmTableEntry.setDescription('An entry in the serial DTE Alarm Table.')
serialDteAlarmNearIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialDteAlarmNearIndex.setStatus('current')
if mibBuilder.loadTexts: serialDteAlarmNearIndex.setDescription('Selects the near device.')
serialDteAlarmFarIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 5, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialDteAlarmFarIndex.setStatus('current')
if mibBuilder.loadTexts: serialDteAlarmFarIndex.setDescription('Selects the far device.')
serialDteAlarmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 5, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialDteAlarmIndex.setStatus('current')
if mibBuilder.loadTexts: serialDteAlarmIndex.setDescription('Index into the serialDteAlarmTable.')
serialDteDTRAlarmControl = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("serialDteDTRAlarmOther", 1), ("serialDteDTRAlarmDisable", 2), ("serialDteDTRAlarmEnable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serialDteDTRAlarmControl.setStatus('current')
if mibBuilder.loadTexts: serialDteDTRAlarmControl.setDescription('Specifies if the unit should alarm on loss of DTR.')
serialDteDTRAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 5, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("serialDteDTRAlarmOther", 1), ("serialDteDTRAlarmNone", 2), ("serialDteDTRAlarmActive", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialDteDTRAlarmStatus.setStatus('current')
if mibBuilder.loadTexts: serialDteDTRAlarmStatus.setDescription('This status indicates a DTR Loss alarm is active.')
serialDteStatusSummary = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 5, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialDteStatusSummary.setStatus('current')
if mibBuilder.loadTexts: serialDteStatusSummary.setDescription('This object provides a summary of the port status.')
serialDteAlarmSummary = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 5, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialDteAlarmSummary.setStatus('current')
if mibBuilder.loadTexts: serialDteAlarmSummary.setDescription('This object provides a summary of the port alarms.')
serialDteASCStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 5, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("serialDteStatusASCOther", 1), ("serialDteStatusNoASC", 2), ("serialDteStatusASC", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialDteASCStatus.setStatus('current')
if mibBuilder.loadTexts: serialDteASCStatus.setDescription('Reports if an ASC condition exists on the interface.')
serialDteASCCount = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 5, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialDteASCCount.setStatus('current')
if mibBuilder.loadTexts: serialDteASCCount.setDescription('This count contains the number of ASC seconds received by the interface.')
serialDteASCThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 5, 2, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serialDteASCThreshold.setStatus('current')
if mibBuilder.loadTexts: serialDteASCThreshold.setDescription('The number of ASC seconds that must be received before an alarm is declared.')
serialDteASCAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 5, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("serialDteASCAlarmOther", 1), ("serialDteASCAlarmNone", 2), ("serialDteASCAlarmThresholdExceeded", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialDteASCAlarm.setStatus('current')
if mibBuilder.loadTexts: serialDteASCAlarm.setDescription('This status indicates if the ASC Seconds threshold is exceeded.')
serialDteFDLStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 5, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("serialDteStatusFDLOther", 1), ("serialDteStatusNoFDL", 2), ("serialDteStatusFDL", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialDteFDLStatus.setStatus('current')
if mibBuilder.loadTexts: serialDteFDLStatus.setDescription('Reports if an FDL error condition exists on the interface.')
serialDteFDLCount = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 5, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialDteFDLCount.setStatus('current')
if mibBuilder.loadTexts: serialDteFDLCount.setDescription('This count contains the number of FDL errored seconds received by the interface.')
serialDteFDLThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 5, 2, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serialDteFDLThreshold.setStatus('current')
if mibBuilder.loadTexts: serialDteFDLThreshold.setDescription('The number of FDL errored seconds that must be received before an alarm is declared.')
serialDteFDLAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 5, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("serialDteFDLAlarmOther", 1), ("serialDteFDLAlarmNone", 2), ("serialDteFDLAlarmThresholdExceeded", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialDteFDLAlarm.setStatus('current')
if mibBuilder.loadTexts: serialDteFDLAlarm.setDescription('This status indicates if the FDL Errored Seconds threshold is exceeded.')
serialDteLOSStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 5, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("serialDteStatusLOSOther", 1), ("serialDteStatusNoLOS", 2), ("serialDteStatusLOS", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialDteLOSStatus.setStatus('current')
if mibBuilder.loadTexts: serialDteLOSStatus.setDescription('Reports if an LOS condition exists on the interface.')
serialDteLOSCount = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 5, 2, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialDteLOSCount.setStatus('current')
if mibBuilder.loadTexts: serialDteLOSCount.setDescription('This count contains the number of LOS seconds received by the interface.')
serialDteLOSThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 5, 2, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serialDteLOSThreshold.setStatus('current')
if mibBuilder.loadTexts: serialDteLOSThreshold.setDescription('The number of LOS seconds that must be received before an alarm is declared.')
serialDteLOSAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 5, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("serialDteLOSAlarmOther", 1), ("serialDteLOSAlarmNone", 2), ("serialDteLOSAlarmThresholdExceeded", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialDteLOSAlarm.setStatus('current')
if mibBuilder.loadTexts: serialDteLOSAlarm.setDescription('This status indicates if the LOS Seconds threshold is exceeded.')
analogDteTable = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 2, 6, 1), )
if mibBuilder.loadTexts: analogDteTable.setStatus('current')
if mibBuilder.loadTexts: analogDteTable.setDescription('The Analog DTE Table.')
analogDteTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 2, 6, 1, 1), ).setIndexNames((0, "DS8200v2-MIB", "analogDteNearIndex"), (0, "DS8200v2-MIB", "analogDteFarIndex"), (0, "DS8200v2-MIB", "analogDteIndex"))
if mibBuilder.loadTexts: analogDteTableEntry.setStatus('current')
if mibBuilder.loadTexts: analogDteTableEntry.setDescription('An entry in the Analog DTE Table.')
analogDteNearIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: analogDteNearIndex.setStatus('current')
if mibBuilder.loadTexts: analogDteNearIndex.setDescription('Selects the near device.')
analogDteFarIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 6, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: analogDteFarIndex.setStatus('current')
if mibBuilder.loadTexts: analogDteFarIndex.setDescription('Selects the far device.')
analogDteIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 6, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: analogDteIndex.setStatus('current')
if mibBuilder.loadTexts: analogDteIndex.setDescription('Index into the analogDteTable.')
analogDteDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 6, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: analogDteDescription.setStatus('current')
if mibBuilder.loadTexts: analogDteDescription.setDescription('Contains a textual description of the port.')
analogDteCardType = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 6, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("analogDteCardTypeOther", 1), ("analogDteCardTypeFXS", 2), ("analogDteCardTypeFXO", 3), ("analogDteCardType4WEM", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: analogDteCardType.setStatus('current')
if mibBuilder.loadTexts: analogDteCardType.setDescription('Identifies the analog DTE card type.')
analogDteMode = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 6, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("analogDteModeOther", 1), ("analogDteModeSpare", 2), ("analogDteModeActive", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: analogDteMode.setStatus('current')
if mibBuilder.loadTexts: analogDteMode.setDescription('Selects whether the port is actively assigned to a network channel or not used.')
analogDteState = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 6, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("analogDteStateOther", 1), ("analogDteStateIdle", 2), ("analogDteStateBusy", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: analogDteState.setStatus('current')
if mibBuilder.loadTexts: analogDteState.setDescription('Displays the port status as either in the Busy or Idle state.')
analogDteElementID = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 6, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: analogDteElementID.setStatus('current')
if mibBuilder.loadTexts: analogDteElementID.setDescription('This object signifies the name of the device.')
analogDteSignalling = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 6, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29))).clone(namedValues=NamedValues(("analogDteSignallingOther", 1), ("analogDteSignallingFXSLS", 2), ("analogDteSignallingFXSGS", 3), ("analogDteSignallingUVG", 4), ("analogDteSignallingMEGLS", 5), ("analogDteSignallingMEGGS", 6), ("analogDteSignallingMEGRLS", 7), ("analogDteSignallingMEGRGS", 8), ("analogDteSignallingPLAR", 9), ("analogDteSignallingSLC96", 10), ("analogDteSignallingDIDDNIS", 11), ("analogDteSignallingDNISWLS", 12), ("analogDteSignallingDNISDLS", 13), ("analogDteSignallingDNISWRLS", 14), ("analogDteSignallingDNISDRLS", 15), ("analogDteSignallingDNISWGS", 16), ("analogDteSignallingDNISDGS", 17), ("analogDteSignallingDNISWRGS", 18), ("analogDteSignallingDNISDRGS", 19), ("analogDteSignallingFXOLS", 20), ("analogDteSignallingFXOGS", 21), ("analogDteSignallingFXOUVG", 22), ("analogDteSignallingFXOUVGR", 23), ("analogDteSignalling4WEMTYPE1", 24), ("analogDteSignalling4WEMTYPE2", 25), ("analogDteSignalling4WEMTYPE3", 26), ("analogDteSignalling4WEMTYPE4", 27), ("analogDteSignalling4WEMTYPE5", 28), ("analogDteSignalling4WEMTO", 29)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: analogDteSignalling.setStatus('current')
if mibBuilder.loadTexts: analogDteSignalling.setDescription('Selects the supervisory operation of the port.')
analogDteDNISDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 6, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("analogDteDNISDelayOther", 1), ("analogDteDNISDelay1Second", 2), ("analogDteDNISDelay2Seconds", 3), ("analogDteDNISDelay3Seconds", 4), ("analogDteDNISDelay4Seconds", 5), ("analogDteDNISDelay5Seconds", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: analogDteDNISDelay.setStatus('current')
if mibBuilder.loadTexts: analogDteDNISDelay.setDescription('If the signalling mode has a delay, it can be set from 1 to 5 seconds.')
analogDteTxGain = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 6, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("analogDteTxGainOther", 1), ("analogDteTxGain3DB", 2), ("analogDteTxGain2DB", 3), ("analogDteTxGain1DB", 4), ("analogDteTxGain0DB", 5), ("analogDteTxGainm1DB", 6), ("analogDteTxGainm2DB", 7), ("analogDteTxGainm3DB", 8), ("analogDteTxGainm4DB", 9), ("analogDteTxGainm5DB", 10), ("analogDteTxGainm6DB", 11), ("analogDteTxGainm7DB", 12), ("analogDteTxGainm8DB", 13), ("analogDteTxGainm9DB", 14), ("analogDteTxGainm10DB", 15)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: analogDteTxGain.setStatus('current')
if mibBuilder.loadTexts: analogDteTxGain.setDescription('Selects the transmit gain. Values prefixed with m are negative.')
analogDteRxGain = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 6, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20))).clone(namedValues=NamedValues(("analogDteRxGainOther", 1), ("analogDteRxGain2DB", 2), ("analogDteRxGain1DB", 3), ("analogDteRxGain0DB", 4), ("analogDteRxGainm1DB", 5), ("analogDteRxGainm2DB", 6), ("analogDteRxGainm3DB", 7), ("analogDteRxGainm4DB", 8), ("analogDteRxGainm5DB", 9), ("analogDteRxGainm6DB", 10), ("analogDteRxGainm7DB", 11), ("analogDteRxGainm8DB", 12), ("analogDteRxGainm9DB", 13), ("analogDteRxGainm10DB", 14), ("analogDteRxGainm11DB", 15), ("analogDteRxGainm12DB", 16), ("analogDteRxGainm13DB", 17), ("analogDteRxGainm14DB", 18), ("analogDteRxGainm15DB", 19), ("analogDteRxGainm16DB", 20)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: analogDteRxGain.setStatus('current')
if mibBuilder.loadTexts: analogDteRxGain.setDescription('Selects the receive gain. Values prefixed with m are negative.')
connectionTable = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 2, 7, 1), )
if mibBuilder.loadTexts: connectionTable.setStatus('current')
if mibBuilder.loadTexts: connectionTable.setDescription('The connection table.')
connectionTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 2, 7, 1, 1), ).setIndexNames((0, "DS8200v2-MIB", "connectionNearIndex"), (0, "DS8200v2-MIB", "connectionFarIndex"), (0, "DS8200v2-MIB", "connectionTableIndex"))
if mibBuilder.loadTexts: connectionTableEntry.setStatus('current')
if mibBuilder.loadTexts: connectionTableEntry.setDescription('An entry in the connection table.')
connectionNearIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 7, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionNearIndex.setStatus('current')
if mibBuilder.loadTexts: connectionNearIndex.setDescription('Selects the near device.')
connectionFarIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 7, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionFarIndex.setStatus('current')
if mibBuilder.loadTexts: connectionFarIndex.setDescription('Selects the far device.')
connectionTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 7, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionTableIndex.setStatus('current')
if mibBuilder.loadTexts: connectionTableIndex.setDescription('The index into the connection table.')
connectionTableDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 7, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 60))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionTableDescription.setStatus('current')
if mibBuilder.loadTexts: connectionTableDescription.setDescription('A description of the connection.')
connectionChannelTable = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 2, 7, 2), )
if mibBuilder.loadTexts: connectionChannelTable.setStatus('current')
if mibBuilder.loadTexts: connectionChannelTable.setDescription('The channel-level connection table.')
connectionChannelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 2, 7, 2, 1), ).setIndexNames((0, "DS8200v2-MIB", "connectionChannelNearIndex"), (0, "DS8200v2-MIB", "connectionChannelFarIndex"), (0, "DS8200v2-MIB", "connectionChannelLineIndex"), (0, "DS8200v2-MIB", "connectionChannelIndex"))
if mibBuilder.loadTexts: connectionChannelEntry.setStatus('current')
if mibBuilder.loadTexts: connectionChannelEntry.setDescription('An entry in the connectionChannelTable.')
connectionChannelNearIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 7, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionChannelNearIndex.setStatus('current')
if mibBuilder.loadTexts: connectionChannelNearIndex.setDescription('Selects the near device.')
connectionChannelFarIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 7, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionChannelFarIndex.setStatus('current')
if mibBuilder.loadTexts: connectionChannelFarIndex.setDescription('Selects the far device.')
connectionChannelLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 7, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionChannelLineIndex.setStatus('current')
if mibBuilder.loadTexts: connectionChannelLineIndex.setDescription('Selects instance of line.')
connectionChannelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 7, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionChannelIndex.setStatus('current')
if mibBuilder.loadTexts: connectionChannelIndex.setDescription('The index into the connection table.')
channelInterfaceAssignment = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 7, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106))).clone(namedValues=NamedValues(("other", 1), ("unassigned", 2), ("dTE", 3), ("remComm", 4), ("port1", 5), ("port2", 6), ("port3", 7), ("port4", 8), ("port5", 9), ("port6", 10), ("port7", 11), ("port8", 12), ("port9", 13), ("port10", 14), ("port11", 15), ("port12", 16), ("port13", 17), ("port14", 18), ("port15", 19), ("port16", 20), ("port17", 21), ("port18", 22), ("port19", 23), ("port20", 24), ("port21", 25), ("port22", 26), ("port23", 27), ("port24", 28), ("port25", 29), ("port26", 30), ("port27", 31), ("port28", 32), ("port29", 33), ("port30", 34), ("port31", 35), ("port32", 36), ("slot2PortA", 37), ("slot2PortB", 38), ("slot3PortA", 39), ("slot3PortB", 40), ("slot4PortA", 41), ("slot4PortB", 42), ("slot5PortA", 43), ("slot5PortB", 44), ("slot6PortA", 45), ("slot6PortB", 46), ("slot2Dsu1PortA", 47), ("slot2Dsu1PortB", 48), ("slot2Dsu2PortA", 49), ("slot2Dsu2PortB", 50), ("slot2Dsu3PortA", 51), ("slot2Dsu3PortB", 52), ("slot2Dsu4PortA", 53), ("slot2Dsu4PortB", 54), ("slot2Dsu5PortA", 55), ("slot2Dsu5PortB", 56), ("slot2Dsu6PortA", 57), ("slot2Dsu6PortB", 58), ("slot3Dsu1PortA", 59), ("slot3Dsu1PortB", 60), ("slot3Dsu2PortA", 61), ("slot3Dsu2PortB", 62), ("slot3Dsu3PortA", 63), ("slot3Dsu3PortB", 64), ("slot3Dsu4PortA", 65), ("slot3Dsu4PortB", 66), ("slot3Dsu5PortA", 67), ("slot3Dsu5PortB", 68), ("slot3Dsu6PortA", 69), ("slot3Dsu6PortB", 70), ("slot4Dsu1PortA", 71), ("slot4Dsu1PortB", 72), ("slot4Dsu2PortA", 73), ("slot4Dsu2PortB", 74), ("slot4Dsu3PortA", 75), ("slot4Dsu3PortB", 76), ("slot4Dsu4PortA", 77), ("slot4Dsu4PortB", 78), ("slot4Dsu5PortA", 79), ("slot4Dsu5PortB", 80), ("slot4Dsu6PortA", 81), ("slot4Dsu6PortB", 82), ("slot5Dsu1PortA", 83), ("slot5Dsu1PortB", 84), ("slot5Dsu2PortA", 85), ("slot5Dsu2PortB", 86), ("slot5Dsu3PortA", 87), ("slot5Dsu3PortB", 88), ("slot5Dsu4PortA", 89), ("slot5Dsu4PortB", 90), ("slot5Dsu5PortA", 91), ("slot5Dsu5PortB", 92), ("slot5Dsu6PortA", 93), ("slot5Dsu6PortB", 94), ("slot6Dsu1PortA", 95), ("slot6Dsu1PortB", 96), ("slot6Dsu2PortA", 97), ("slot6Dsu2PortB", 98), ("slot6Dsu3PortA", 99), ("slot6Dsu3PortB", 100), ("slot6Dsu4PortA", 101), ("slot6Dsu4PortB", 102), ("slot6Dsu5PortA", 103), ("slot6Dsu5PortB", 104), ("slot6Dsu6PortA", 105), ("slot6Dsu6PortB", 106)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: channelInterfaceAssignment.setStatus('current')
if mibBuilder.loadTexts: channelInterfaceAssignment.setDescription('The channel assignment.')
channelInterfaceDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 7, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelInterfaceDescription.setStatus('current')
if mibBuilder.loadTexts: channelInterfaceDescription.setDescription('Contains a description of the interface channel connection.')
channelInterfaceChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 7, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: channelInterfaceChannel.setStatus('current')
if mibBuilder.loadTexts: channelInterfaceChannel.setDescription('Displays the corresponding channel of the interface channel connection.')
channelSignalling = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 7, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("clearChannel", 2), ("robbedBit", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: channelSignalling.setStatus('current')
if mibBuilder.loadTexts: channelSignalling.setDescription('Allows a selection of Clear Channel or Robbed Bit signalling for each DS0.')
bertTable = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 2, 8, 1), )
if mibBuilder.loadTexts: bertTable.setStatus('current')
if mibBuilder.loadTexts: bertTable.setDescription('BERT control table.')
bertTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 2, 8, 1, 1), ).setIndexNames((0, "DS8200v2-MIB", "bertNearIndex"), (0, "DS8200v2-MIB", "bertFarIndex"), (0, "DS8200v2-MIB", "bertIndex"))
if mibBuilder.loadTexts: bertTableEntry.setStatus('current')
if mibBuilder.loadTexts: bertTableEntry.setDescription('An entry in the BERT control table.')
bertNearIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 8, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bertNearIndex.setStatus('current')
if mibBuilder.loadTexts: bertNearIndex.setDescription('Selects the near device.')
bertFarIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 8, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bertFarIndex.setStatus('current')
if mibBuilder.loadTexts: bertFarIndex.setDescription('Selects the far device.')
bertIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 8, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bertIndex.setStatus('current')
if mibBuilder.loadTexts: bertIndex.setDescription('The index into the BERT control table. Selects which BERT chip to use.')
bertPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 8, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("bertPatternOther", 1), ("bertPatternQRSS", 2), ("bertPattern63", 3), ("bertPattern511", 4), ("bertPattern2047", 5), ("bertPattern215", 6), ("bertPattern220", 7), ("bertPattern223", 8), ("bertPattern1in8", 9), ("bertPattern3in24", 10), ("bertPatternALT", 11), ("bertPatternCLEAR", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bertPattern.setStatus('current')
if mibBuilder.loadTexts: bertPattern.setDescription('Selects the test pattern to be used.')
bertLength = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 8, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("bertLengthOther", 1), ("bertLength15minutes", 2), ("bertLength30minutes", 3), ("bertLength60minutes", 4), ("bertLength24hours", 5), ("bertLengthContinuous", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bertLength.setStatus('current')
if mibBuilder.loadTexts: bertLength.setDescription('Specifies how long the test should run.')
bertPatternSync = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 8, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("bertPatternSyncOther", 1), ("bertPatternSyncNoTest", 2), ("bertPatternSyncNoSync", 3), ("bertPatternSyncInsync", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bertPatternSync.setStatus('current')
if mibBuilder.loadTexts: bertPatternSync.setDescription('Displays the current state of pattern sync during a test.')
bertElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 8, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bertElapsedTime.setStatus('current')
if mibBuilder.loadTexts: bertElapsedTime.setDescription('Displays the amount of time elapsed since a timed test began in seconds.')
bertBitErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 8, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bertBitErrors.setStatus('current')
if mibBuilder.loadTexts: bertBitErrors.setDescription('Displays the total number of bit errors detected since the test began.')
bertErroredSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 8, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bertErroredSeconds.setStatus('current')
if mibBuilder.loadTexts: bertErroredSeconds.setDescription('Displays the number of asynchronous errored seconds that have been detected since the test began.')
bertPercentEFS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 8, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bertPercentEFS.setStatus('current')
if mibBuilder.loadTexts: bertPercentEFS.setDescription('Displays a ratio derived from the number of error free seconds divided by the number of seconds accumulated in elapsed time.')
bertCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 8, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("bertCommandOther", 1), ("bertCommandStart", 2), ("bertCommandStop", 3), ("bertCommandResetErrors", 4), ("bertCommandInjectError", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bertCommand.setStatus('current')
if mibBuilder.loadTexts: bertCommand.setDescription('Issues a test command for the interface.')
bertInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 2, 8, 2), )
if mibBuilder.loadTexts: bertInterfaceTable.setStatus('current')
if mibBuilder.loadTexts: bertInterfaceTable.setDescription('BERT control interface table.')
bertInterfaceTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 2, 8, 2, 1), ).setIndexNames((0, "DS8200v2-MIB", "bertInterfaceNearIndex"), (0, "DS8200v2-MIB", "bertInterfaceFarIndex"), (0, "DS8200v2-MIB", "bertChipIndex"), (0, "DS8200v2-MIB", "bertInterfaceIndex"))
if mibBuilder.loadTexts: bertInterfaceTableEntry.setStatus('current')
if mibBuilder.loadTexts: bertInterfaceTableEntry.setDescription('An entry in the BERT control interface table.')
bertInterfaceNearIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 8, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bertInterfaceNearIndex.setStatus('current')
if mibBuilder.loadTexts: bertInterfaceNearIndex.setDescription('Selects the near device.')
bertInterfaceFarIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 8, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bertInterfaceFarIndex.setStatus('current')
if mibBuilder.loadTexts: bertInterfaceFarIndex.setDescription('Selects the far device.')
bertChipIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 8, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bertChipIndex.setStatus('current')
if mibBuilder.loadTexts: bertChipIndex.setDescription('Selects which BERT chip to use.')
bertInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 8, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bertInterfaceIndex.setStatus('current')
if mibBuilder.loadTexts: bertInterfaceIndex.setDescription('An index into the MIB-II interfaces table; the interface for the BERT settings.')
bertInterfaceSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 8, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38))).clone(namedValues=NamedValues(("bertInterfaceSettingOther", 1), ("bertInterfaceSettingIdle", 2), ("bertInterfaceSettingChannel1", 3), ("bertInterfaceSettingChannel2", 4), ("bertInterfaceSettingChannel3", 5), ("bertInterfaceSettingChannel4", 6), ("bertInterfaceSettingChannel5", 7), ("bertInterfaceSettingChannel6", 8), ("bertInterfaceSettingChannel7", 9), ("bertInterfaceSettingChannel8", 10), ("bertInterfaceSettingChannel9", 11), ("bertInterfaceSettingChannel10", 12), ("bertInterfaceSettingChannel11", 13), ("bertInterfaceSettingChannel12", 14), ("bertInterfaceSettingChannel13", 15), ("bertInterfaceSettingChannel14", 16), ("bertInterfaceSettingChannel15", 17), ("bertInterfaceSettingChannel16", 18), ("bertInterfaceSettingChannel17", 19), ("bertInterfaceSettingChannel18", 20), ("bertInterfaceSettingChannel19", 21), ("bertInterfaceSettingChannel20", 22), ("bertInterfaceSettingChannel21", 23), ("bertInterfaceSettingChannel22", 24), ("bertInterfaceSettingChannel23", 25), ("bertInterfaceSettingChannel24", 26), ("bertInterfaceSettingChannel25", 27), ("bertInterfaceSettingChannel26", 28), ("bertInterfaceSettingChannel27", 29), ("bertInterfaceSettingChannel28", 30), ("bertInterfaceSettingChannel29", 31), ("bertInterfaceSettingChannel30", 32), ("bertInterfaceSettingChannel31", 33), ("bertInterfaceSettingChannel32", 34), ("bertInterfaceSettingNet", 35), ("bertInterfaceSettingDTE", 36), ("bertInterfaceSettingNotEnabled", 37), ("bertInterfaceSettingUseService", 38)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bertInterfaceSetting.setStatus('current')
if mibBuilder.loadTexts: bertInterfaceSetting.setDescription('Specifies where to send the BERT pattern.')
bertInterfaceService = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 8, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bertInterfaceService.setStatus('current')
if mibBuilder.loadTexts: bertInterfaceService.setDescription('Specifies the service (see ipadv2.mib) to BERT. The bandwidth associated with the service will get the BERT pattern.')
bertInterfaceChannelRate = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 8, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("nx56k", 2), ("nx64k", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bertInterfaceChannelRate.setStatus('current')
if mibBuilder.loadTexts: bertInterfaceChannelRate.setDescription('Specifies the network channel rate for all channels involved in a network BERT.')
testTable = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 2, 8, 3), )
if mibBuilder.loadTexts: testTable.setStatus('current')
if mibBuilder.loadTexts: testTable.setDescription('Test control table.')
testTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 2, 8, 3, 1), ).setIndexNames((0, "DS8200v2-MIB", "testNearIndex"), (0, "DS8200v2-MIB", "testFarIndex"), (0, "DS8200v2-MIB", "testTableIndex"))
if mibBuilder.loadTexts: testTableEntry.setStatus('current')
if mibBuilder.loadTexts: testTableEntry.setDescription('An entry in the testTable.')
testNearIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 8, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: testNearIndex.setStatus('current')
if mibBuilder.loadTexts: testNearIndex.setDescription('Selects the near device.')
testFarIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 8, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: testFarIndex.setStatus('current')
if mibBuilder.loadTexts: testFarIndex.setDescription('Selects the far device.')
testTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 8, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: testTableIndex.setStatus('current')
if mibBuilder.loadTexts: testTableIndex.setDescription('The index into the testTable, one entry for each interface.')
testType = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 8, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20))).clone(namedValues=NamedValues(("testTypeOther", 1), ("testTypeNoTest", 2), ("testTypePLB", 3), ("testTypeLLB", 4), ("testtypeMLB", 5), ("testTypeFarPLB", 6), ("testTypeFarLLB", 7), ("testTypeFarMLB", 8), ("testTypePortLoop", 9), ("testTypeV54Loop", 10), ("testTypeFarV54Loop", 11), ("testTypeFarPortLoop", 12), ("testTypeTDM", 13), ("testTypeFarPortUnloop", 14), ("testTypeFarV54Unloop", 15), ("testTypeDualLoop", 16), ("testTypeNetworkSideTransparent", 17), ("testTypeNetworkSideNonTransparent", 18), ("testTypeCustomerSideTransparent", 19), ("testTypeCustomerSideNonTransparent", 20)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: testType.setStatus('current')
if mibBuilder.loadTexts: testType.setDescription('Identifies the test type for the interface.')
testLoopDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 8, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("testLoopOther", 1), ("testLoopUnidirectional", 2), ("testLoopBidirectional", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: testLoopDirection.setStatus('current')
if mibBuilder.loadTexts: testLoopDirection.setDescription('This object is the identifier of the current unit loop mode. The values mean: testLoopUnidirectional Line, Data, and V54 loops will be unidirectional Local loop will be bidirectional testLoopBidirectional All loops will be bidirectional')
testFarLLBFraming = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 8, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("testFarLLBFramingOther", 1), ("testFarLLBFramingUnframed", 2), ("testFarLLBFramingFramed", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: testFarLLBFraming.setStatus('current')
if mibBuilder.loadTexts: testFarLLBFraming.setDescription('This setting, for Far LLB tests on T1 lines, must match the far end unit loop code framing.')
testLoopInitiator = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 8, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("testLoopInitiatorOther", 1), ("testLoopInitiatorLMP", 2), ("testLoopInitiatorSNMP", 3), ("testLoopInitiatorWeb", 4), ("testLoopInitiatorEOC", 5), ("testLoopInitiatorButtons", 6), ("testLoopInitiatorDCEControl", 7), ("testLoopInitiatorISDNPRAV3", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: testLoopInitiator.setStatus('current')
if mibBuilder.loadTexts: testLoopInitiator.setDescription('Indicates who started the loop.')
testDefaultLoopType = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 8, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("testDefaultLoopTypeOther", 1), ("testDefaultLoopTypeTransparent", 2), ("testDefaultLoopTypeNonTransparent", 3), ("testDefaultLoopTypeDual", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: testDefaultLoopType.setStatus('current')
if mibBuilder.loadTexts: testDefaultLoopType.setDescription('Identifies the default loop type.')
performance24Table = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 2, 9, 1), )
if mibBuilder.loadTexts: performance24Table.setStatus('current')
if mibBuilder.loadTexts: performance24Table.setDescription('Performance table, contains TR54016 standard and enhanced data.')
performance24TableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 2, 9, 1, 1), ).setIndexNames((0, "DS8200v2-MIB", "performance24NearIndex"), (0, "DS8200v2-MIB", "performance24FarIndex"), (0, "DS8200v2-MIB", "performance24InterfaceIndex"), (0, "DS8200v2-MIB", "performance24Index"))
if mibBuilder.loadTexts: performance24TableEntry.setStatus('current')
if mibBuilder.loadTexts: performance24TableEntry.setDescription('An entry in the performance24Table.')
performance24NearIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 9, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: performance24NearIndex.setStatus('current')
if mibBuilder.loadTexts: performance24NearIndex.setDescription('Selects the near device.')
performance24FarIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 9, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: performance24FarIndex.setStatus('current')
if mibBuilder.loadTexts: performance24FarIndex.setDescription('Selects the far device.')
performance24InterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 9, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: performance24InterfaceIndex.setStatus('current')
if mibBuilder.loadTexts: performance24InterfaceIndex.setDescription('Selects the interface.')
performance24Index = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 9, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98))).clone(namedValues=NamedValues(("performance24Summary", 1), ("performance24Current", 2), ("performance24period1", 3), ("performance24period2", 4), ("performance24period3", 5), ("performance24period4", 6), ("performance24period5", 7), ("performance24period6", 8), ("performance24period7", 9), ("performance24period8", 10), ("performance24period9", 11), ("performance24period10", 12), ("performance24period11", 13), ("performance24period12", 14), ("performance24period13", 15), ("performance24period14", 16), ("performance24period15", 17), ("performance24period16", 18), ("performance24period17", 19), ("performance24period18", 20), ("performance24period19", 21), ("performance24period20", 22), ("performance24period21", 23), ("performance24period22", 24), ("performance24period23", 25), ("performance24period24", 26), ("performance24period25", 27), ("performance24period26", 28), ("performance24period27", 29), ("performance24period28", 30), ("performance24period29", 31), ("performance24period30", 32), ("performance24period31", 33), ("performance24period32", 34), ("performance24period33", 35), ("performance24period34", 36), ("performance24period35", 37), ("performance24period36", 38), ("performance24period37", 39), ("performance24period38", 40), ("performance24period39", 41), ("performance24period40", 42), ("performance24period41", 43), ("performance24period42", 44), ("performance24period43", 45), ("performance24period44", 46), ("performance24period45", 47), ("performance24period46", 48), ("performance24period47", 49), ("performance24period48", 50), ("performance24period49", 51), ("performance24period50", 52), ("performance24period51", 53), ("performance24period52", 54), ("performance24period53", 55), ("performance24period54", 56), ("performance24period55", 57), ("performance24period56", 58), ("performance24period57", 59), ("performance24period58", 60), ("performance24period59", 61), ("performance24period60", 62), ("performance24period61", 63), ("performance24period62", 64), ("performance24period63", 65), ("performance24period64", 66), ("performance24period65", 67), ("performance24period66", 68), ("performance24period67", 69), ("performance24period68", 70), ("performance24period69", 71), ("performance24period70", 72), ("performance24period71", 73), ("performance24period72", 74), ("performance24period73", 75), ("performance24period74", 76), ("performance24period75", 77), ("performance24period76", 78), ("performance24period77", 79), ("performance24period78", 80), ("performance24period79", 81), ("performance24period80", 82), ("performance24period81", 83), ("performance24period82", 84), ("performance24period83", 85), ("performance24period84", 86), ("performance24period85", 87), ("performance24period86", 88), ("performance24period87", 89), ("performance24period88", 90), ("performance24period89", 91), ("performance24period90", 92), ("performance24period91", 93), ("performance24period92", 94), ("performance24period93", 95), ("performance24period94", 96), ("performance24period95", 97), ("performance24period96", 98)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: performance24Index.setStatus('current')
if mibBuilder.loadTexts: performance24Index.setDescription('The index into the 24-hour performance table.')
performance24ES = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 9, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: performance24ES.setStatus('current')
if mibBuilder.loadTexts: performance24ES.setDescription('The number of Errored Seconds for the 15-minute period.')
performance24BES = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 9, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: performance24BES.setStatus('current')
if mibBuilder.loadTexts: performance24BES.setDescription('The number of Bursty Errored Seconds for the 15-minute period.')
performance24SES = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 9, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: performance24SES.setStatus('current')
if mibBuilder.loadTexts: performance24SES.setDescription('The number of Severely Errored Seconds for the 15-minute period.')
performance24UAS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 9, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: performance24UAS.setStatus('current')
if mibBuilder.loadTexts: performance24UAS.setDescription('The number of Unavailable Seconds for the 15-minute period.')
performance24LOFC = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 9, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: performance24LOFC.setStatus('current')
if mibBuilder.loadTexts: performance24LOFC.setDescription('The number of Loss of Frame Counts for the 15-minute period.')
performance24CSS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 9, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: performance24CSS.setStatus('current')
if mibBuilder.loadTexts: performance24CSS.setDescription('The number of Controlled Slip Seconds for the 15-minute period.')
performance24CRCES = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 9, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: performance24CRCES.setStatus('current')
if mibBuilder.loadTexts: performance24CRCES.setDescription('The number of CRC Errored Seconds for the 15-minute period.')
performance24OOFS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 9, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: performance24OOFS.setStatus('current')
if mibBuilder.loadTexts: performance24OOFS.setDescription('The number of Out of Frame Seconds for the 15-minute period.')
performance24LOSS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 9, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: performance24LOSS.setStatus('current')
if mibBuilder.loadTexts: performance24LOSS.setDescription('The number of Loss of Signal Seconds for the 15-minute period.')
performance24AISS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 9, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: performance24AISS.setStatus('current')
if mibBuilder.loadTexts: performance24AISS.setDescription('The number of Alarm Indication Signal Seconds for the 15-minute period.')
performance24RAS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 9, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: performance24RAS.setStatus('current')
if mibBuilder.loadTexts: performance24RAS.setDescription('The number of Remote Alarm (Yellow) Seconds for the 15-minute period.')
performance24BPVS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 9, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: performance24BPVS.setStatus('current')
if mibBuilder.loadTexts: performance24BPVS.setDescription('The number of Bipolar Violation Seconds for the 15-minute period.')
performance24timestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 9, 1, 1, 17), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: performance24timestamp.setStatus('current')
if mibBuilder.loadTexts: performance24timestamp.setDescription('The value of sysUpTime when the statistics were last updated.')
performance30Table = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 2, 9, 2), )
if mibBuilder.loadTexts: performance30Table.setStatus('current')
if mibBuilder.loadTexts: performance30Table.setDescription('Performance table, contains TR54016 standard and enhanced 30-day data.')
performance30TableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 2, 9, 2, 1), ).setIndexNames((0, "DS8200v2-MIB", "performance30NearIndex"), (0, "DS8200v2-MIB", "performance30FarIndex"), (0, "DS8200v2-MIB", "performance30InterfaceIndex"), (0, "DS8200v2-MIB", "performance30Index"))
if mibBuilder.loadTexts: performance30TableEntry.setStatus('current')
if mibBuilder.loadTexts: performance30TableEntry.setDescription('An entry in the performance30Table.')
performance30NearIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 9, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: performance30NearIndex.setStatus('current')
if mibBuilder.loadTexts: performance30NearIndex.setDescription('Selects the near device.')
performance30FarIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 9, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: performance30FarIndex.setStatus('current')
if mibBuilder.loadTexts: performance30FarIndex.setDescription('Selects the far device.')
performance30InterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 9, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: performance30InterfaceIndex.setStatus('current')
if mibBuilder.loadTexts: performance30InterfaceIndex.setDescription('Selects the interface.')
performance30Index = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 9, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31))).clone(namedValues=NamedValues(("performance30Summary", 1), ("performance30day1", 2), ("performance30day2", 3), ("performance30day3", 4), ("performance30day4", 5), ("performance30day5", 6), ("performance30day6", 7), ("performance30day7", 8), ("performance30day8", 9), ("performance30day9", 10), ("performance30day10", 11), ("performance30day11", 12), ("performance30day12", 13), ("performance30day13", 14), ("performance30day14", 15), ("performance30day15", 16), ("performance30day16", 17), ("performance30day17", 18), ("performance30day18", 19), ("performance30day19", 20), ("performance30day20", 21), ("performance30day21", 22), ("performance30day22", 23), ("performance30day23", 24), ("performance30day24", 25), ("performance30day25", 26), ("performance30day26", 27), ("performance30day27", 28), ("performance30day28", 29), ("performance30day29", 30), ("performance30day30", 31)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: performance30Index.setStatus('current')
if mibBuilder.loadTexts: performance30Index.setDescription('The index into the 30-day performance table.')
performance30ES = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 9, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: performance30ES.setStatus('current')
if mibBuilder.loadTexts: performance30ES.setDescription('The number of Errored Seconds for the 1-day period.')
performance30BES = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 9, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: performance30BES.setStatus('current')
if mibBuilder.loadTexts: performance30BES.setDescription('The number of Bursty Errored Seconds for the 1-day period.')
performance30SES = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 9, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: performance30SES.setStatus('current')
if mibBuilder.loadTexts: performance30SES.setDescription('The number of Severely Errored Seconds for the 1-day period.')
performance30UAS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 9, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: performance30UAS.setStatus('current')
if mibBuilder.loadTexts: performance30UAS.setDescription('The number of Unavailable Seconds for the 1-day period.')
performance30LOFC = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 9, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: performance30LOFC.setStatus('current')
if mibBuilder.loadTexts: performance30LOFC.setDescription('The number of Loss of Frame Counts for the 1-day period.')
performance30CSS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 9, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: performance30CSS.setStatus('current')
if mibBuilder.loadTexts: performance30CSS.setDescription('The number of Controlled Slip Seconds for the 1-day period.')
performance30CRCES = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 9, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: performance30CRCES.setStatus('current')
if mibBuilder.loadTexts: performance30CRCES.setDescription('The number of CRC Errored Seconds for the 1-day period.')
performance30OOFS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 9, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: performance30OOFS.setStatus('current')
if mibBuilder.loadTexts: performance30OOFS.setDescription('The number of Out of Frame Seconds for the 1-day period.')
performance30LOSS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 9, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: performance30LOSS.setStatus('current')
if mibBuilder.loadTexts: performance30LOSS.setDescription('The number of Loss of Signal Seconds for the 1-day period.')
performance30AISS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 9, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: performance30AISS.setStatus('current')
if mibBuilder.loadTexts: performance30AISS.setDescription('The number of Alarm Indication Signal Seconds for the 1-day period.')
performance30RAS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 9, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: performance30RAS.setStatus('current')
if mibBuilder.loadTexts: performance30RAS.setDescription('The number of Remote Alarm (Yellow) Seconds for the 1-day period.')
performance30BPVS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 9, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: performance30BPVS.setStatus('current')
if mibBuilder.loadTexts: performance30BPVS.setDescription('The number of Bipolar Violation Seconds for the 1-day period.')
performance30timestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 9, 2, 1, 17), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: performance30timestamp.setStatus('current')
if mibBuilder.loadTexts: performance30timestamp.setDescription('The value of sysUpTime when the statistics were last updated.')
iTable = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 2, 10, 1), )
if mibBuilder.loadTexts: iTable.setStatus('current')
if mibBuilder.loadTexts: iTable.setDescription('The interface table.')
iTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 2, 10, 1, 1), ).setIndexNames((0, "DS8200v2-MIB", "iTableNearIndex"), (0, "DS8200v2-MIB", "iTableFarIndex"), (0, "DS8200v2-MIB", "iTableIndex"))
if mibBuilder.loadTexts: iTableEntry.setStatus('current')
if mibBuilder.loadTexts: iTableEntry.setDescription('An entry in the interface table.')
iTableNearIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 10, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iTableNearIndex.setStatus('current')
if mibBuilder.loadTexts: iTableNearIndex.setDescription('Selects the near device.')
iTableFarIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 10, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iTableFarIndex.setStatus('current')
if mibBuilder.loadTexts: iTableFarIndex.setDescription('Selects the far device.')
iTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 10, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iTableIndex.setStatus('current')
if mibBuilder.loadTexts: iTableIndex.setDescription('The index into the interface table, used for addressing in above tables.')
iDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 10, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iDescription.setStatus('current')
if mibBuilder.loadTexts: iDescription.setDescription('Description of the interface.')
iType = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 10, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 192))).clone(namedValues=NamedValues(("disabled", 0), ("v35", 1), ("eia530", 2), ("rs232", 3), ("voice", 4), ("hsdata", 5), ("dualt1dte", 6), ("dualddsv1", 7), ("hexdds", 8), ("ocudp", 9), ("x21", 10), ("dualddsv2", 11), ("rfdl", 128), ("alt", 129), ("t1dte", 130), ("didte", 131), ("t1ntw", 132), ("e1ntw", 133), ("ddsntw", 134), ("ddsdte", 135), ("ddsdbu", 136), ("fxs", 137), ("fxo", 138), ("eandm", 139), ("e1sig", 192)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iType.setStatus('current')
if mibBuilder.loadTexts: iType.setDescription('Enumerated interface type.')
iSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 10, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iSlot.setStatus('current')
if mibBuilder.loadTexts: iSlot.setDescription('Device-dependent slot in which the interface resides.')
iPort = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 10, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iPort.setStatus('current')
if mibBuilder.loadTexts: iPort.setDescription('Device-dependent port in which the interface resides.')
iStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 10, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("iStatusOther", 1), ("iStatusOK", 2), ("iStatusErrored", 3), ("iStatusAlarmed", 4), ("iStatusTesting", 5), ("iStatusUnassigned", 6), ("iStatusLoopDetected", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iStatus.setStatus('current')
if mibBuilder.loadTexts: iStatus.setDescription('Status of the interface.')
traplogTable = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 2, 11, 1), )
if mibBuilder.loadTexts: traplogTable.setStatus('current')
if mibBuilder.loadTexts: traplogTable.setDescription('The traplog table.')
traplogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 2, 11, 1, 1), ).setIndexNames((0, "DS8200v2-MIB", "traplogIndex"))
if mibBuilder.loadTexts: traplogEntry.setStatus('current')
if mibBuilder.loadTexts: traplogEntry.setDescription('An entry in the traplog table.')
traplogIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 11, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traplogIndex.setStatus('current')
if mibBuilder.loadTexts: traplogIndex.setDescription('The index into the traplog table.')
traplogNearIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 11, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traplogNearIndex.setStatus('current')
if mibBuilder.loadTexts: traplogNearIndex.setDescription('Specifies the near device.')
traplogFarIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 11, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traplogFarIndex.setStatus('current')
if mibBuilder.loadTexts: traplogFarIndex.setDescription('Specifies the far device.')
traplogInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 11, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traplogInterfaceIndex.setStatus('current')
if mibBuilder.loadTexts: traplogInterfaceIndex.setDescription('Specifies the interface.')
traplogTrapNum = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 11, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traplogTrapNum.setStatus('current')
if mibBuilder.loadTexts: traplogTrapNum.setDescription('The SNMP trap id.')
traplogTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 11, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: traplogTimeStamp.setStatus('current')
if mibBuilder.loadTexts: traplogTimeStamp.setDescription('Time the SNMP was generated.')
traplogDeviceType = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 11, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21))).clone(namedValues=NamedValues(("other", 1), ("none", 2), ("t12000", 3), ("e12048", 4), ("e13021", 5), ("t13000", 6), ("t13001", 7), ("t13002", 8), ("t13030", 9), ("t13060", 10), ("t13101", 11), ("t13102", 12), ("t13111", 13), ("t13112", 14), ("dds4001", 15), ("dds4101", 16), ("dds4051", 17), ("dds4151", 18), ("dds41TDM", 19), ("generic54016", 20), ("wanSuite", 21)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: traplogDeviceType.setStatus('current')
if mibBuilder.loadTexts: traplogDeviceType.setDescription('Specifies the device type for the trap.')
traplogOID1 = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 11, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: traplogOID1.setStatus('current')
if mibBuilder.loadTexts: traplogOID1.setDescription('SNMP Object ID of 1st varbind.')
traplogDescription1 = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 11, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: traplogDescription1.setStatus('current')
if mibBuilder.loadTexts: traplogDescription1.setDescription('Description of 1st varbind.')
traplogValue1 = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 11, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: traplogValue1.setStatus('current')
if mibBuilder.loadTexts: traplogValue1.setDescription('Value of of 1st varbind.')
traplogOID2 = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 11, 1, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: traplogOID2.setStatus('current')
if mibBuilder.loadTexts: traplogOID2.setDescription('SNMP Object ID of 2nd varbind.')
traplogDescription2 = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 11, 1, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: traplogDescription2.setStatus('current')
if mibBuilder.loadTexts: traplogDescription2.setDescription('Description of 2nd varbind.')
traplogValue2 = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 11, 1, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: traplogValue2.setStatus('current')
if mibBuilder.loadTexts: traplogValue2.setDescription('Value of of 2nd varbind.')
traplogOID3 = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 11, 1, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: traplogOID3.setStatus('current')
if mibBuilder.loadTexts: traplogOID3.setDescription('SNMP Object ID of 3rd varbind.')
traplogDescription3 = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 11, 1, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: traplogDescription3.setStatus('current')
if mibBuilder.loadTexts: traplogDescription3.setDescription('Description of 3rd varbind.')
traplogValue3 = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 11, 1, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: traplogValue3.setStatus('current')
if mibBuilder.loadTexts: traplogValue3.setDescription('Value of of 3rd varbind.')
traplogDeleteEntry = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 2, 11, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: traplogDeleteEntry.setStatus('current')
if mibBuilder.loadTexts: traplogDeleteEntry.setDescription('Writing the index of a trap to this object will delete the trap entry. Writing an index value of 0 will delete all entries.')
traplogSortOption = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 2, 11, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("ascendingtimestamp", 2), ("ascendingunit", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: traplogSortOption.setStatus('current')
if mibBuilder.loadTexts: traplogSortOption.setDescription('Determines the order in which traps are presented.')
traplogLastTimeStamp = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 2, 11, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traplogLastTimeStamp.setStatus('current')
if mibBuilder.loadTexts: traplogLastTimeStamp.setDescription('The timestamp of the newest trap in the trap log.')
unitUtilitiesTable = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 2, 12, 1), )
if mibBuilder.loadTexts: unitUtilitiesTable.setStatus('current')
if mibBuilder.loadTexts: unitUtilitiesTable.setDescription('The unit utilities table.')
unitUtilitiesTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 2, 12, 1, 1), ).setIndexNames((0, "DS8200v2-MIB", "unitUtilitiesNearIndex"), (0, "DS8200v2-MIB", "unitUtilitiesFarIndex"))
if mibBuilder.loadTexts: unitUtilitiesTableEntry.setStatus('current')
if mibBuilder.loadTexts: unitUtilitiesTableEntry.setDescription('An entry in the unit utilities table.')
unitUtilitiesNearIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 12, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitUtilitiesNearIndex.setStatus('current')
if mibBuilder.loadTexts: unitUtilitiesNearIndex.setDescription('Selects the near device.')
unitUtilitiesFarIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 12, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitUtilitiesFarIndex.setStatus('current')
if mibBuilder.loadTexts: unitUtilitiesFarIndex.setDescription('Selects the far device.')
unitUtilitiesLocalPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 12, 1, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitUtilitiesLocalPassword.setStatus('current')
if mibBuilder.loadTexts: unitUtilitiesLocalPassword.setDescription('The password for local access to a device (VT100, front panel).')
unitUtilitiesTime = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 12, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitUtilitiesTime.setStatus('current')
if mibBuilder.loadTexts: unitUtilitiesTime.setDescription('This string is the current time as known to the device. The current time may be entered in this field using the HHMMSS format. For example, 3:45AM is entered as 034500 and 3:45PM is entered as 154500.')
unitUtilitiesDate = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 12, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitUtilitiesDate.setStatus('current')
if mibBuilder.loadTexts: unitUtilitiesDate.setDescription('This string is the current date as known to the device. The current date may be entered in this field using the MMDDYY format. For example, July 4, 1997 is entered as 070497.')
unitUtilitiesMaintenanceReset = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 12, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24))).clone(namedValues=NamedValues(("other", 1), ("reset", 2), ("restart", 3), ("resetProfile1", 4), ("resetProfile2", 5), ("resetProfile3", 6), ("resetProfile4", 7), ("resetProfile5", 8), ("resetProfile6", 9), ("resetProfile7", 10), ("resetProfile8", 11), ("resetProfile9", 12), ("resetProfile10", 13), ("resetProfile11", 14), ("resetProfile12", 15), ("resetProfile13", 16), ("resetProfile14", 17), ("resetProfile15", 18), ("resetProfile16", 19), ("resetProfile17", 20), ("resetProfile18", 21), ("resetProfile19", 22), ("resetProfile20", 23), ("resetProfile21", 24)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitUtilitiesMaintenanceReset.setStatus('current')
if mibBuilder.loadTexts: unitUtilitiesMaintenanceReset.setDescription('This field allows resetting the device to default values by reloading the start-up default configuration parameters.')
unitUtilitiesAlarmResetTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 12, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitUtilitiesAlarmResetTimer.setStatus('current')
if mibBuilder.loadTexts: unitUtilitiesAlarmResetTimer.setDescription('This field allows setting a timer which will cause all existing alarms on the device to be cleared upon expiration. The counter is in seconds.')
unitUtilitiesAlarmClear = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 12, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("utilitiesAlarmClearOther", 1), ("utilitiesAlarmClearNow", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitUtilitiesAlarmClear.setStatus('current')
if mibBuilder.loadTexts: unitUtilitiesAlarmClear.setDescription('Writing a value of utilitiesAlarmClearNow(2) to this field causes all existing alarms to be cleared immediately.')
unitUtilitiesSaveConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 12, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("saveConfig", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitUtilitiesSaveConfig.setStatus('current')
if mibBuilder.loadTexts: unitUtilitiesSaveConfig.setDescription('This field commands the unit to save its configuration.')
unitUtilitiesRestartStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 12, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("notNeeded", 2), ("recommended", 3), ("required", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitUtilitiesRestartStatus.setStatus('current')
if mibBuilder.loadTexts: unitUtilitiesRestartStatus.setDescription('This parameter indicates if the unit configuration needs to be saved and restarted. notNeeded - A save and restart is not needed at this time. recommended - A save and restart is recommended for optimal performance but not required. required - A save and restart is required for the unit to implement the altered configuration.')
unitUtilitiesReadOnlyPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 12, 1, 1, 11), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitUtilitiesReadOnlyPassword.setStatus('current')
if mibBuilder.loadTexts: unitUtilitiesReadOnlyPassword.setDescription('The password for read only access to a device (VT100, front panel).')
unitUtilitiesPasswordLockoutEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 12, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitUtilitiesPasswordLockoutEnable.setStatus('current')
if mibBuilder.loadTexts: unitUtilitiesPasswordLockoutEnable.setDescription('This parameter is used to enable or disable the password lockout feature.')
unitUtilitiesPasswordLockoutStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 12, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3), ("locked", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitUtilitiesPasswordLockoutStatus.setStatus('current')
if mibBuilder.loadTexts: unitUtilitiesPasswordLockoutStatus.setDescription('This parameter indicates if the password lockout feature is enabled or disabled, and if it is enabled this parameter may reflect if the password is indeed locked.')
unitUtilitiesPasswordLockoutClear = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 12, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("unlock", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitUtilitiesPasswordLockoutClear.setStatus('current')
if mibBuilder.loadTexts: unitUtilitiesPasswordLockoutClear.setDescription('This parameter is used to unlock a locked password.')
netAPSConfigTable = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 2, 14, 1), )
if mibBuilder.loadTexts: netAPSConfigTable.setStatus('current')
if mibBuilder.loadTexts: netAPSConfigTable.setDescription('One to One network Automatic Protection Switching (APS) configuration parameters table.')
netAPSConfigTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 2, 14, 1, 1), ).setIndexNames((0, "DS8200v2-MIB", "netAPSConfigNearIndex"), (0, "DS8200v2-MIB", "netAPSConfigFarIndex"), (0, "DS8200v2-MIB", "netAPSConfigifIndex"))
if mibBuilder.loadTexts: netAPSConfigTableEntry.setStatus('current')
if mibBuilder.loadTexts: netAPSConfigTableEntry.setDescription('An entry in the netAPSConfigTable.')
netAPSConfigNearIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 14, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netAPSConfigNearIndex.setStatus('current')
if mibBuilder.loadTexts: netAPSConfigNearIndex.setDescription('Selects the near device.')
netAPSConfigFarIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 14, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netAPSConfigFarIndex.setStatus('current')
if mibBuilder.loadTexts: netAPSConfigFarIndex.setDescription('Selects the far device.')
netAPSConfigifIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 14, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netAPSConfigifIndex.setStatus('current')
if mibBuilder.loadTexts: netAPSConfigifIndex.setDescription('Selects the MIB-II ifIndex.')
netAPSConfigOtherifIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 14, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netAPSConfigOtherifIndex.setStatus('current')
if mibBuilder.loadTexts: netAPSConfigOtherifIndex.setDescription('MIB-II ifIndex of the other interface involved with the APS.')
netAPSConfigMode = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 14, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("tr54017", 2), ("autoABswitch", 3), ("masterAltCarrier", 4), ("slaveAltCarrier", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netAPSConfigMode.setStatus('current')
if mibBuilder.loadTexts: netAPSConfigMode.setDescription('tr54017 - Implements TR54017 autoABswitch - Implements a single ended A/B switch between two independent lines masterAltCarrier - Master side of alternate carrier APS slaveAltCarrier - Slave side of alternate carrier APS')
netAPSConfigRevert = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 14, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netAPSConfigRevert.setStatus('current')
if mibBuilder.loadTexts: netAPSConfigRevert.setDescription('disabled - Service does not return to the primary line until the backup line fails. enabled - Service automatically returns to the primary line when the primary line is able to carry service again.')
netAPSConfigManualInhibit = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 14, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("thisLine", 3), ("otherLine", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netAPSConfigManualInhibit.setStatus('current')
if mibBuilder.loadTexts: netAPSConfigManualInhibit.setDescription('Disabled - Neither line is manually inhibited from carrying service. ThisLine - This line is manually inhibited from carrying service. OtherLine - The other line is manually inhibited from carrying service.')
netAPSConfigAvailabilityTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 14, 1, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netAPSConfigAvailabilityTimer.setStatus('current')
if mibBuilder.loadTexts: netAPSConfigAvailabilityTimer.setDescription('The line availability timer represents the minimum amount of time that is free of errors in active events that must expire before this line is returned to service availability. The timer is in seconds ranging from 0 - 900 seconds.')
netAPSConfigESThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 14, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netAPSConfigESThreshold.setStatus('current')
if mibBuilder.loadTexts: netAPSConfigESThreshold.setDescription('This parameter is the number of erred seconds in a 15-minute period needed before a transfer request is triggered. A setting of zero disables this trigger.')
netAPSConfigESCount = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 14, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netAPSConfigESCount.setStatus('current')
if mibBuilder.loadTexts: netAPSConfigESCount.setDescription('This parameter is the number of erred seconds in the current 15-minute interval. This count is reset at the beginning of a new 15-minute interval.')
netAPSConfigESSwitchEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 14, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("normal", 2), ("triggered", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netAPSConfigESSwitchEvent.setStatus('current')
if mibBuilder.loadTexts: netAPSConfigESSwitchEvent.setDescription('This status indicates if exceeding the ES threshold caused a transfer to the other line.')
netAPSConfigCSESThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 14, 1, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netAPSConfigCSESThreshold.setStatus('current')
if mibBuilder.loadTexts: netAPSConfigCSESThreshold.setDescription('This parameter is the number of consecutive SES needed before a transfer request is triggered. A setting of zero disables this trigger.')
netAPSConfigCSESCount = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 14, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netAPSConfigCSESCount.setStatus('current')
if mibBuilder.loadTexts: netAPSConfigCSESCount.setDescription('This parameter is the number of consecutive SES detected. This count stops when 900 is reached and is reset when a non-SES is detected.')
netAPSConfigCSESSwitchEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 14, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("normal", 2), ("triggered", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netAPSConfigCSESSwitchEvent.setStatus('current')
if mibBuilder.loadTexts: netAPSConfigCSESSwitchEvent.setDescription('This status indicates if exceeding the consecutive SES threshold caused a transfer to the other line.')
netAPSConfigStatusBitmap = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 14, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netAPSConfigStatusBitmap.setStatus('current')
if mibBuilder.loadTexts: netAPSConfigStatusBitmap.setDescription('TR54017 defined bitmap status for this line interface: Value is 1 if this line is carrying service. Value is 2 if this line is in a failed state. Value is 4 if this line is in an inhibit state. Value is 8 if this line is looped back. Value is 16 if the other line is in a failed state. Value is 32 if the other line is in an inhibit state. Value is 64 if the other line is looped back. Value is 128 if the manual inhibit is active Note that multiple status conditions may exist at the same time. The failed state is determined when carrier fails, or the ES threshold is reached, or the consecutive SES threshold is reached. The inhibit state is set when the manual inhibit setting affects this line or the line is inhibited by the remote end.')
netAPSConfigStatusString = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 14, 1, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netAPSConfigStatusString.setStatus('current')
if mibBuilder.loadTexts: netAPSConfigStatusString.setDescription('ASCII string version of netAPSConfigStatusBitmap for this line status bits')
netAPSConfigTimeInInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 14, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netAPSConfigTimeInInterval.setStatus('current')
if mibBuilder.loadTexts: netAPSConfigTimeInInterval.setDescription('The number of seconds into the netAPSHist24Table current interval.')
netAPSConfigValidIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 14, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netAPSConfigValidIntervals.setStatus('current')
if mibBuilder.loadTexts: netAPSConfigValidIntervals.setDescription('The number of valid intervals in the netAPSHist24Table')
netAPSConfigValidDays = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 14, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netAPSConfigValidDays.setStatus('current')
if mibBuilder.loadTexts: netAPSConfigValidDays.setDescription('The number of valid days in the netAPSHist30Table')
netAPSConfigReset = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 14, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("clearAlarms", 2), ("clearHistory", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netAPSConfigReset.setStatus('current')
if mibBuilder.loadTexts: netAPSConfigReset.setDescription('This action parameter does the following when the given value is set: other - Does nothing clearAlarms - Clear the APS events and counts clearHistory - Clear the APS history table statistics')
netAPSHist24Table = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 2, 14, 2), )
if mibBuilder.loadTexts: netAPSHist24Table.setStatus('current')
if mibBuilder.loadTexts: netAPSHist24Table.setDescription('History table, contains Network APS historical data.')
netAPSHist24TableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 2, 14, 2, 1), ).setIndexNames((0, "DS8200v2-MIB", "netAPSHist24NearIndex"), (0, "DS8200v2-MIB", "netAPSHist24FarIndex"), (0, "DS8200v2-MIB", "netAPSHist24ifIndex"), (0, "DS8200v2-MIB", "netAPSHist24Index"))
if mibBuilder.loadTexts: netAPSHist24TableEntry.setStatus('current')
if mibBuilder.loadTexts: netAPSHist24TableEntry.setDescription('An entry in the netAPSHist24Table.')
netAPSHist24NearIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 14, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netAPSHist24NearIndex.setStatus('current')
if mibBuilder.loadTexts: netAPSHist24NearIndex.setDescription('Selects the near device.')
netAPSHist24FarIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 14, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netAPSHist24FarIndex.setStatus('current')
if mibBuilder.loadTexts: netAPSHist24FarIndex.setDescription('Selects the far device.')
netAPSHist24ifIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 14, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netAPSHist24ifIndex.setStatus('current')
if mibBuilder.loadTexts: netAPSHist24ifIndex.setDescription('Selects the MIB-II ifIndex.')
netAPSHist24Index = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 14, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98))).clone(namedValues=NamedValues(("statSummary", 1), ("statCurrent", 2), ("statPeriod1", 3), ("statPeriod2", 4), ("statPeriod3", 5), ("statPeriod4", 6), ("statPeriod5", 7), ("statPeriod6", 8), ("statPeriod7", 9), ("statPeriod8", 10), ("statPeriod9", 11), ("statPeriod10", 12), ("statPeriod11", 13), ("statPeriod12", 14), ("statPeriod13", 15), ("statPeriod14", 16), ("statPeriod15", 17), ("statPeriod16", 18), ("statPeriod17", 19), ("statPeriod18", 20), ("statPeriod19", 21), ("statPeriod20", 22), ("statPeriod21", 23), ("statPeriod22", 24), ("statPeriod23", 25), ("statPeriod24", 26), ("statPeriod25", 27), ("statPeriod26", 28), ("statPeriod27", 29), ("statPeriod28", 30), ("statPeriod29", 31), ("statPeriod30", 32), ("statPeriod31", 33), ("statPeriod32", 34), ("statPeriod33", 35), ("statPeriod34", 36), ("statPeriod35", 37), ("statPeriod36", 38), ("statPeriod37", 39), ("statPeriod38", 40), ("statPeriod39", 41), ("statPeriod40", 42), ("statPeriod41", 43), ("statPeriod42", 44), ("statPeriod43", 45), ("statPeriod44", 46), ("statPeriod45", 47), ("statPeriod46", 48), ("statPeriod47", 49), ("statPeriod48", 50), ("statPeriod49", 51), ("statPeriod50", 52), ("statPeriod51", 53), ("statPeriod52", 54), ("statPeriod53", 55), ("statPeriod54", 56), ("statPeriod55", 57), ("statPeriod56", 58), ("statPeriod57", 59), ("statPeriod58", 60), ("statPeriod59", 61), ("statPeriod60", 62), ("statPeriod61", 63), ("statPeriod62", 64), ("statPeriod63", 65), ("statPeriod64", 66), ("statPeriod65", 67), ("statPeriod66", 68), ("statPeriod67", 69), ("statPeriod68", 70), ("statPeriod69", 71), ("statPeriod70", 72), ("statPeriod71", 73), ("statPeriod72", 74), ("statPeriod73", 75), ("statPeriod74", 76), ("statPeriod75", 77), ("statPeriod76", 78), ("statPeriod77", 79), ("statPeriod78", 80), ("statPeriod79", 81), ("statPeriod80", 82), ("statPeriod81", 83), ("statPeriod82", 84), ("statPeriod83", 85), ("statPeriod84", 86), ("statPeriod85", 87), ("statPeriod86", 88), ("statPeriod87", 89), ("statPeriod88", 90), ("statPeriod89", 91), ("statPeriod90", 92), ("statPeriod91", 93), ("statPeriod92", 94), ("statPeriod93", 95), ("statPeriod94", 96), ("statPeriod95", 97), ("statPeriod96", 98)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netAPSHist24Index.setStatus('current')
if mibBuilder.loadTexts: netAPSHist24Index.setDescription('The index into the 24-hour history table.')
netAPSHist24Timestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 14, 2, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netAPSHist24Timestamp.setStatus('current')
if mibBuilder.loadTexts: netAPSHist24Timestamp.setDescription('The value of sysUpTime when the statistics were last updated.')
netAPSHist24StatusBitmap = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 14, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netAPSHist24StatusBitmap.setStatus('current')
if mibBuilder.loadTexts: netAPSHist24StatusBitmap.setDescription('TR54017 defined bitmap status for this line interface: Value is 1 if this line is carrying service. Value is 2 if this line is in a failed state. Value is 4 if this line is in an inhibit state. Value is 8 if this line is looped back. Value is 16 if the other line is in a failed state. Value is 32 if the other line is in an inhibit state. Value is 64 if the other line is looped back. Value is 128 if the manual inhibit is active Note that multiple status conditions may exist at the same time. The failed state is determined when carrier fails, or the ES threshold is reached, or the consecutive SES threshold is reached. The inhibit state is set when the manual inhibit setting affects this line or the line is inhibited by the remote end.')
netAPSHist24StatusString = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 14, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netAPSHist24StatusString.setStatus('current')
if mibBuilder.loadTexts: netAPSHist24StatusString.setDescription('ASCII string version of netAPSHist24StatusBitmap for this line status bits')
netAPSHist24Occurrences = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 14, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netAPSHist24Occurrences.setStatus('current')
if mibBuilder.loadTexts: netAPSHist24Occurrences.setDescription('This parameter is the total number of times the service was transferred between lines.')
netAPSHist24Duration = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 14, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netAPSHist24Duration.setStatus('current')
if mibBuilder.loadTexts: netAPSHist24Duration.setDescription('This parameter is the number of seconds the service was provided on this line.')
netAPSHist30Table = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 2, 14, 3), )
if mibBuilder.loadTexts: netAPSHist30Table.setStatus('current')
if mibBuilder.loadTexts: netAPSHist30Table.setDescription('History table, contains Network APS 30-day historical data.')
netAPSHist30TableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 2, 14, 3, 1), ).setIndexNames((0, "DS8200v2-MIB", "netAPSHist30NearIndex"), (0, "DS8200v2-MIB", "netAPSHist30FarIndex"), (0, "DS8200v2-MIB", "netAPSHist30ifIndex"), (0, "DS8200v2-MIB", "netAPSHist30Index"))
if mibBuilder.loadTexts: netAPSHist30TableEntry.setStatus('current')
if mibBuilder.loadTexts: netAPSHist30TableEntry.setDescription('An entry in the netAPSHist30Table.')
netAPSHist30NearIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 14, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netAPSHist30NearIndex.setStatus('current')
if mibBuilder.loadTexts: netAPSHist30NearIndex.setDescription('Selects the near device.')
netAPSHist30FarIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 14, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netAPSHist30FarIndex.setStatus('current')
if mibBuilder.loadTexts: netAPSHist30FarIndex.setDescription('Selects the far device.')
netAPSHist30ifIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 14, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netAPSHist30ifIndex.setStatus('current')
if mibBuilder.loadTexts: netAPSHist30ifIndex.setDescription('Selects the MIB-II ifIndex.')
netAPSHist30Index = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 14, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31))).clone(namedValues=NamedValues(("statSummary", 1), ("statDay1", 2), ("statDay2", 3), ("statDay3", 4), ("statDay4", 5), ("statDay5", 6), ("statDay6", 7), ("statDay7", 8), ("statDay8", 9), ("statDay9", 10), ("statDay10", 11), ("statDay11", 12), ("statDay12", 13), ("statDay13", 14), ("statDay14", 15), ("statDay15", 16), ("statDay16", 17), ("statDay17", 18), ("statDay18", 19), ("statDay19", 20), ("statDay20", 21), ("statDay21", 22), ("statDay22", 23), ("statDay23", 24), ("statDay24", 25), ("statDay25", 26), ("statDay26", 27), ("statDay27", 28), ("statDay28", 29), ("statDay29", 30), ("statDay30", 31)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netAPSHist30Index.setStatus('current')
if mibBuilder.loadTexts: netAPSHist30Index.setDescription('The index into the 30-day history table.')
netAPSHist30Timestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 14, 3, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netAPSHist30Timestamp.setStatus('current')
if mibBuilder.loadTexts: netAPSHist30Timestamp.setDescription('The value of sysUpTime when the statistics were last updated.')
netAPSHist30StatusBitmap = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 14, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netAPSHist30StatusBitmap.setStatus('current')
if mibBuilder.loadTexts: netAPSHist30StatusBitmap.setDescription('TR54017 defined bitmap status for this line interface: Value is 1 if this line is carrying service. Value is 2 if this line is in a failed state. Value is 4 if this line is in an inhibit state. Value is 8 if this line is looped back. Value is 16 if the other line is in a failed state. Value is 32 if the other line is in an inhibit state. Value is 64 if the other line is looped back. Value is 128 if the manual inhibit is active Note that multiple status conditions may exist at the same time. The failed state is determined when carrier fails, or the ES threshold is reached, or the consecutive SES threshold is reached. The inhibit state is set when the manual inhibit setting affects this line or the line is inhibited by the remote end.')
netAPSHist30StatusString = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 14, 3, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netAPSHist30StatusString.setStatus('current')
if mibBuilder.loadTexts: netAPSHist30StatusString.setDescription('ASCII string version of netAPSHist30StatusBitmap for this line status bits')
netAPSHist30Occurrences = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 14, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netAPSHist30Occurrences.setStatus('current')
if mibBuilder.loadTexts: netAPSHist30Occurrences.setDescription('This parameter is the total number of times the service was transferred between lines.')
netAPSHist30Duration = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 2, 14, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netAPSHist30Duration.setStatus('current')
if mibBuilder.loadTexts: netAPSHist30Duration.setDescription('This parameter is the number of seconds the service was provided on this line.')
mibBuilder.exportSymbols("DS8200v2-MIB", netAPSHist30NearIndex=netAPSHist30NearIndex, ddsNetAntiStrTimer=ddsNetAntiStrTimer, t1e1RASThreshold=t1e1RASThreshold, netAPSConfigTableEntry=netAPSConfigTableEntry, traplogSortOption=traplogSortOption, bertBitErrors=bertBitErrors, netAPSConfigValidDays=netAPSConfigValidDays, serialDteConfigTableEntry=serialDteConfigTableEntry, dbuStartStopDayOfWeek=dbuStartStopDayOfWeek, unitUtilitiesPasswordLockoutClear=unitUtilitiesPasswordLockoutClear, netAPSHist30FarIndex=netAPSHist30FarIndex, bertInterfaceFarIndex=bertInterfaceFarIndex, mgmtPortsDescription=mgmtPortsDescription, netAPSHist30Duration=netAPSHist30Duration, serialDteFDLThreshold=serialDteFDLThreshold, performance=performance, t1e1OOFSThreshold=t1e1OOFSThreshold, connectionTableIndex=connectionTableIndex, bertTableEntry=bertTableEntry, serialDteFDLAlarm=serialDteFDLAlarm, traplogDescription3=traplogDescription3, iSlot=iSlot, performance24CRCES=performance24CRCES, ddsNetBPVCount=ddsNetBPVCount, connectionChannelTable=connectionChannelTable, netAPSConfigESSwitchEvent=netAPSConfigESSwitchEvent, serialDteAlarmIndex=serialDteAlarmIndex, iStatus=iStatus, mgmtPortsTableIndex=mgmtPortsTableIndex, traplogOID2=traplogOID2, ddsNetAlarmNearIndex=ddsNetAlarmNearIndex, performance30NearIndex=performance30NearIndex, ddsNetFDLThreshold=ddsNetFDLThreshold, tinterfaces=tinterfaces, ddsNetAlarmTableEntry=ddsNetAlarmTableEntry, ddsNetAlarmReset=ddsNetAlarmReset, bertTable=bertTable, t1e1NationalBit=t1e1NationalBit, t1e1CSSThreshold=t1e1CSSThreshold, t1e1Sa8Out=t1e1Sa8Out, t1e1ESCount=t1e1ESCount, ddsNetAlarmResetTimer=ddsNetAlarmResetTimer, netAPSConfigRevert=netAPSConfigRevert, serialDteStopBit=serialDteStopBit, maintenance=maintenance, t1e1LineCode=t1e1LineCode, serialDteConfigIndex=serialDteConfigIndex, dbuRate=dbuRate, t1e1StationInTiming=t1e1StationInTiming, dbuStartStopFarIndex=dbuStartStopFarIndex, netAPSConfigESCount=netAPSConfigESCount, t1e1AISStatus=t1e1AISStatus, mgmtPortsExtInitString=mgmtPortsExtInitString, dbuConfigTable=dbuConfigTable, dbuDescription=dbuDescription, bertChipIndex=bertChipIndex, analogDteState=analogDteState, bertInterfaceSetting=bertInterfaceSetting, traplogDeviceType=traplogDeviceType, t1e1SESAlarm=t1e1SESAlarm, testTableEntry=testTableEntry, dbuSecurity=dbuSecurity, bertPattern=bertPattern, testFarLLBFraming=testFarLLBFraming, traplogDeleteEntry=traplogDeleteEntry, performance24NearIndex=performance24NearIndex, ddsNetLOSCount=ddsNetLOSCount, netAPSConfigFarIndex=netAPSConfigFarIndex, dbuPasswordStr=dbuPasswordStr, dbuResetStringsEntry=dbuResetStringsEntry, netAPSConfigifIndex=netAPSConfigifIndex, dbuCommand=dbuCommand, netAPSHist24Index=netAPSHist24Index, serialDteDTRAlarmStatus=serialDteDTRAlarmStatus, performance24AISS=performance24AISS, ddsNetStatusSummary=ddsNetStatusSummary, performance30Table=performance30Table, t1e1=t1e1, serialDteLOSStatus=serialDteLOSStatus, netAPSConfigMode=netAPSConfigMode, performance30OOFS=performance30OOFS, analogDteDNISDelay=analogDteDNISDelay, ddsNetMode=ddsNetMode, performance30Index=performance30Index, testTable=testTable, serialDteLOSCount=serialDteLOSCount, t1e1Sa7Out=t1e1Sa7Out, performance24UAS=performance24UAS, t1e1AlarmNearIndex=t1e1AlarmNearIndex, traplogValue1=traplogValue1, channelInterfaceChannel=channelInterfaceChannel, iPort=iPort, t1e1AlarmResetTimer=t1e1AlarmResetTimer, serialDteAlarmFarIndex=serialDteAlarmFarIndex, performance30FarIndex=performance30FarIndex, t1e1ConfigNearIndex=t1e1ConfigNearIndex, t1e1ConfigIndex=t1e1ConfigIndex, productElementId=productElementId, netAPSHist30ifIndex=netAPSHist30ifIndex, serialDteChannelRate=serialDteChannelRate, mgmtPortsSecondaryDialString=mgmtPortsSecondaryDialString, testDefaultLoopType=testDefaultLoopType, performance24ES=performance24ES, itable=itable, traplogOID1=traplogOID1, serialDteDescription=serialDteDescription, serialDteASCStatus=serialDteASCStatus, unitUtilitiesTime=unitUtilitiesTime, bertLength=bertLength, connectionChannelLineIndex=connectionChannelLineIndex, analogDte=analogDte, t1e1Function=t1e1Function, t1e1CRC=t1e1CRC, ddsNetConfigFarIndex=ddsNetConfigFarIndex, dbuStatus=dbuStatus, traplogFarIndex=traplogFarIndex, ddsNetLOSThreshold=ddsNetLOSThreshold, bertNearIndex=bertNearIndex, performance24LOFC=performance24LOFC, serialDteFDLStatus=serialDteFDLStatus, mgmtPortsInternalModem=mgmtPortsInternalModem, ddsNetOOSThreshold=ddsNetOOSThreshold, t1e1BPVSStatus=t1e1BPVSStatus, netAPSConfigStatusBitmap=netAPSConfigStatusBitmap, t1e1PRM=t1e1PRM, t1e1SESStatus=t1e1SESStatus, mgmtPortsCompressedSlip=mgmtPortsCompressedSlip, ddsNetBPVAlarm=ddsNetBPVAlarm, connectionChannelNearIndex=connectionChannelNearIndex, ddsNet=ddsNet, ddsNetBPVStatus=ddsNetBPVStatus, ddsNetAlarmSummary=ddsNetAlarmSummary, labelTableIndex=labelTableIndex, serialDteRate=serialDteRate, t1e1Mode=t1e1Mode, labelTableLabel=labelTableLabel, dbuActivator1=dbuActivator1, productSoftwareRev=productSoftwareRev, serialDteRTSDelay=serialDteRTSDelay, serialDteRL=serialDteRL, serialDteAlarmTableEntry=serialDteAlarmTableEntry, analogDteIndex=analogDteIndex, traplogNearIndex=traplogNearIndex, t1e1SESThreshold=t1e1SESThreshold, unitUtilitiesNearIndex=unitUtilitiesNearIndex, netAPSHist30TableEntry=netAPSHist30TableEntry, ddsNetAlarmIndex=ddsNetAlarmIndex, dbuConfigTableEntry=dbuConfigTableEntry, connectionFarIndex=connectionFarIndex, bertIndex=bertIndex, mgmtPortsElementID=mgmtPortsElementID, unitUtilitiesTable=unitUtilitiesTable, dbuFarIndex=dbuFarIndex, unitUtilitiesPasswordLockoutStatus=unitUtilitiesPasswordLockoutStatus, performance30LOSS=performance30LOSS, ddsNetBPVThreshold=ddsNetBPVThreshold, serialDteLL=serialDteLL, bertCommand=bertCommand, iTableEntry=iTableEntry, ddsNetFDLStatus=ddsNetFDLStatus, netAPSConfigCSESThreshold=netAPSConfigCSESThreshold, analogDteElementID=analogDteElementID, dbuISDNSwitchVersion=dbuISDNSwitchVersion, dbuStartStopNearIndex=dbuStartStopNearIndex, t1e1ConfigTable=t1e1ConfigTable, dbuActivator2=dbuActivator2, t1e1ZeroSuppress=t1e1ZeroSuppress, t1e1Sa8In=t1e1Sa8In, netAPSConfigTimeInInterval=netAPSConfigTimeInInterval, analogDteTable=analogDteTable, performance24FarIndex=performance24FarIndex, ddsNetAlarmTable=ddsNetAlarmTable, traplogLastTimeStamp=traplogLastTimeStamp, productLabelTable=productLabelTable, ddsNetOOFCount=ddsNetOOFCount, unitUtilitiesPasswordLockoutEnable=unitUtilitiesPasswordLockoutEnable, performance30SES=performance30SES, serialDteType=serialDteType, unitUtilitiesDate=unitUtilitiesDate, performance24TableEntry=performance24TableEntry, iType=iType, serialDteTxClock=serialDteTxClock, ddsNetFDLCount=ddsNetFDLCount, netAPSHist24StatusString=netAPSHist24StatusString, testNearIndex=testNearIndex, serialDte=serialDte, unitUtilitiesRestartStatus=unitUtilitiesRestartStatus, bertPercentEFS=bertPercentEFS, t1e1AlarmSummary=t1e1AlarmSummary, t1e1BPVSAlarm=t1e1BPVSAlarm, dbuISDNTEI=dbuISDNTEI, productPhysicalAddress=productPhysicalAddress, performance30InterfaceIndex=performance30InterfaceIndex, connectionTableEntry=connectionTableEntry, mgmtPorts=mgmtPorts, ddsNetLOSStatus=ddsNetLOSStatus, t1e1ESStatus=t1e1ESStatus, traplog=traplog, ddsNetTimingSource=ddsNetTimingSource, analogDteTxGain=analogDteTxGain, connectionNearIndex=connectionNearIndex, t1e1CRC4Mode=t1e1CRC4Mode, bertFarIndex=bertFarIndex, t1e1Timing=t1e1Timing, serialDteStatusSummary=serialDteStatusSummary, t1e1AISAlarm=t1e1AISAlarm, t1e1ESAlarm=t1e1ESAlarm, t1e1Sa6Out=t1e1Sa6Out, t1e1UASCount=t1e1UASCount, testLoopDirection=testLoopDirection, testTableIndex=testTableIndex, performance24timestamp=performance24timestamp, bertInterfaceChannelRate=bertInterfaceChannelRate, traplogValue3=traplogValue3, performance30TableEntry=performance30TableEntry, ddsNetConfigTable=ddsNetConfigTable, t1e1AudibleAlarm=t1e1AudibleAlarm, netAPSHist24ifIndex=netAPSHist24ifIndex, netAPSConfigReset=netAPSConfigReset, t1e1OOFSStatus=t1e1OOFSStatus, traplogValue2=traplogValue2, traplogDescription2=traplogDescription2, serialDteNumberOfChannels=serialDteNumberOfChannels, dbuStart=dbuStart, iTableIndex=iTableIndex, productNmsAddress=productNmsAddress, t1e1KeepAlive=t1e1KeepAlive, serialDtePinStatus=serialDtePinStatus, netAPSConfigAvailabilityTimer=netAPSConfigAvailabilityTimer, connectionChannelIndex=connectionChannelIndex, serialDteASCThreshold=serialDteASCThreshold, t1e1Sa7In=t1e1Sa7In, productLabelTableEntry=productLabelTableEntry, performance30BES=performance30BES, ddsNetOOSStatus=ddsNetOOSStatus, serialDteLOSAlarm=serialDteLOSAlarm, dbuDtrDial=dbuDtrDial, netAPSHist30StatusBitmap=netAPSHist30StatusBitmap, analogDteCardType=analogDteCardType, traplogTrapNum=traplogTrapNum, netAPSHist30Occurrences=netAPSHist30Occurrences, performance30CSS=performance30CSS, performance30BPVS=performance30BPVS, t1e1Sa6In=t1e1Sa6In, mgmtPortsPrimaryDialString=mgmtPortsPrimaryDialString, serialDteDTR=serialDteDTR, ddsNetFDLAlarm=ddsNetFDLAlarm, t1e1ConfigTableEntry=t1e1ConfigTableEntry, t1e1CSSCount=t1e1CSSCount, bertInterfaceIndex=bertInterfaceIndex, performance24BPVS=performance24BPVS, traplogOID3=traplogOID3, netAPSConfigManualInhibit=netAPSConfigManualInhibit, unitUtilitiesAlarmResetTimer=unitUtilitiesAlarmResetTimer)
mibBuilder.exportSymbols("DS8200v2-MIB", t1e1StatusSummary=t1e1StatusSummary, traplogEntry=traplogEntry, ddsNetConfigIndex=ddsNetConfigIndex, netAPSConfigValidIntervals=netAPSConfigValidIntervals, dbuStartStopTable=dbuStartStopTable, testFarIndex=testFarIndex, t1e1StationTiming=t1e1StationTiming, t1e1SpareBitInsertion=t1e1SpareBitInsertion, analogDteFarIndex=analogDteFarIndex, t1e1AISThreshold=t1e1AISThreshold, productInfo=productInfo, netAPSHist24StatusBitmap=netAPSHist24StatusBitmap, analogDteSignalling=analogDteSignalling, analogDteTableEntry=analogDteTableEntry, t1e1UASStatus=t1e1UASStatus, performance24Table=performance24Table, serialDteBundle=serialDteBundle, unitUtilitiesSaveConfig=unitUtilitiesSaveConfig, performance30LOFC=performance30LOFC, analogDteRxGain=analogDteRxGain, dbuStop=dbuStop, iTable=iTable, dbuMode=dbuMode, t1e1AlarmTableEntry=t1e1AlarmTableEntry, connectionTableDescription=connectionTableDescription, netAPSHist24NearIndex=netAPSHist24NearIndex, t1e1Sa5Out=t1e1Sa5Out, productModelNumber=productModelNumber, connection=connection, netAPSHist24TableEntry=netAPSHist24TableEntry, t1e1BPVSThreshold=t1e1BPVSThreshold, netAPSHist24Duration=netAPSHist24Duration, netAPSConfigESThreshold=netAPSConfigESThreshold, dbuISDNDDNUM=dbuISDNDDNUM, t1e1RASAlarm=t1e1RASAlarm, ddsNetConfigTableEntry=ddsNetConfigTableEntry, dbuResetString=dbuResetString, serialDteConfigNearIndex=serialDteConfigNearIndex, performance24LOSS=performance24LOSS, bertInterfaceTable=bertInterfaceTable, netAPSHist30Table=netAPSHist30Table, ddsNetOOSAlarm=ddsNetOOSAlarm, t1e1Sa4Out=t1e1Sa4Out, channelInterfaceDescription=channelInterfaceDescription, serialDteInInvertClock=serialDteInInvertClock, ddsNetDescription=ddsNetDescription, traplogTimeStamp=traplogTimeStamp, t1e1CSSAlarm=t1e1CSSAlarm, t1e1AISCount=t1e1AISCount, t1e1DSXLevel=t1e1DSXLevel, performance30RAS=performance30RAS, netAPSHist24FarIndex=netAPSHist24FarIndex, serialDteParity=serialDteParity, unitUtilitiesMaintenanceReset=unitUtilitiesMaintenanceReset, t1e1FDLPassThrough=t1e1FDLPassThrough, serialDteCTS=serialDteCTS, dbuResetConfigEntryIndex=dbuResetConfigEntryIndex, t1e1AlarmTable=t1e1AlarmTable, t1e1LOSSAlarm=t1e1LOSSAlarm, traplogTable=traplogTable, dbu=dbu, performance24OOFS=performance24OOFS, ddsNetRate=ddsNetRate, mgmtPortsDialPrefix=mgmtPortsDialPrefix, serialDteV54=serialDteV54, unitUtilitiesAlarmClear=unitUtilitiesAlarmClear, analogDteDescription=analogDteDescription, t1e1RASStatus=t1e1RASStatus, ddsNetCircuitAssur=ddsNetCircuitAssur, t1e1Sa5In=t1e1Sa5In, bertErroredSeconds=bertErroredSeconds, serialDteAlarmSummary=serialDteAlarmSummary, performance24Index=performance24Index, dbuResetStringsIndex=dbuResetStringsIndex, netAPSConfigNearIndex=netAPSConfigNearIndex, t1e1BPVSCount=t1e1BPVSCount, performance30timestamp=performance30timestamp, netAPSHist24Table=netAPSHist24Table, dbuStartStopConfigEntryIndex=dbuStartStopConfigEntryIndex, unitUtilitiesTableEntry=unitUtilitiesTableEntry, t1e1OOFSCount=t1e1OOFSCount, performance24InterfaceIndex=performance24InterfaceIndex, iTableNearIndex=iTableNearIndex, t1e1Sa4In=t1e1Sa4In, t1e1ESThreshold=t1e1ESThreshold, t1e1Description=t1e1Description, unitUtilitiesFarIndex=unitUtilitiesFarIndex, performance24BES=performance24BES, performance24CSS=performance24CSS, ddsNetConfigNearIndex=ddsNetConfigNearIndex, netAPSConfigCSESCount=netAPSConfigCSESCount, dbuResetNearIndex=dbuResetNearIndex, dbuDialStr=dbuDialStr, netAPSHist24Occurrences=netAPSHist24Occurrences, t1e1LineBuildOut=t1e1LineBuildOut, serialDteLOSThreshold=serialDteLOSThreshold, connectionChannelFarIndex=connectionChannelFarIndex, productHardwareRev=productHardwareRev, mgmtPortsTable=mgmtPortsTable, iTableFarIndex=iTableFarIndex, bertPatternSync=bertPatternSync, netAPSHist30StatusString=netAPSHist30StatusString, t1e1LOSSStatus=t1e1LOSSStatus, t1e1RASCount=t1e1RASCount, connectionChannelEntry=connectionChannelEntry, dbuStartStopTableEntry=dbuStartStopTableEntry, t1e1UASAlarm=t1e1UASAlarm, serialDteMode=serialDteMode, traplogIndex=traplogIndex, unitUtilities=unitUtilities, performance30CRCES=performance30CRCES, serialDteDCD=serialDteDCD, bertInterfaceNearIndex=bertInterfaceNearIndex, dbuConfigTableIndex=dbuConfigTableIndex, t1e1AlarmFarIndex=t1e1AlarmFarIndex, mgmtPortsTableEntry=mgmtPortsTableEntry, serialDteASCCount=serialDteASCCount, bertInterfaceService=bertInterfaceService, performance24RAS=performance24RAS, serialDteFDLCount=serialDteFDLCount, serialDteDSR=serialDteDSR, netAPSConfigCSESSwitchEvent=netAPSConfigCSESSwitchEvent, dbuResetFarIndex=dbuResetFarIndex, t1e1EBitGeneration=t1e1EBitGeneration, t1e1UASThreshold=t1e1UASThreshold, t1e1AlarmReset=t1e1AlarmReset, t1e1ConfigFarIndex=t1e1ConfigFarIndex, netAPSHist24Timestamp=netAPSHist24Timestamp, dbuNearIndex=dbuNearIndex, ddsNetOOFAlarm=ddsNetOOFAlarm, channelInterfaceAssignment=channelInterfaceAssignment, analogDteNearIndex=analogDteNearIndex, netAPSConfigTable=netAPSConfigTable, bertInterfaceTableEntry=bertInterfaceTableEntry, serialDteConfigFarIndex=serialDteConfigFarIndex, traplogInterfaceIndex=traplogInterfaceIndex, ddsNetOOFThreshold=ddsNetOOFThreshold, analogDteMode=analogDteMode, productModelDescr=productModelDescr, ddsNetLOSAlarm=ddsNetLOSAlarm, dbuNumber=dbuNumber, serialDteCharSize=serialDteCharSize, testType=testType, performance24SES=performance24SES, netAPSHist30Index=netAPSHist30Index, ddsNetOOSCount=ddsNetOOSCount, serialDteFormat=serialDteFormat, t1e1OOFSAlarm=t1e1OOFSAlarm, performance30AISS=performance30AISS, serialDteRTS=serialDteRTS, performance30UAS=performance30UAS, serialDteInvertData=serialDteInvertData, dbuFormat=dbuFormat, t1e1AlarmIndex=t1e1AlarmIndex, netAPSHist30Timestamp=netAPSHist30Timestamp, connectionTable=connectionTable, dbuHangupStr=dbuHangupStr, t1e1CSSStatus=t1e1CSSStatus, PYSNMP_MODULE_ID=tinterfaces, serialDteASCAlarm=serialDteASCAlarm, dbuInitStr=dbuInitStr, dbuResetStringsTable=dbuResetStringsTable, t1e1LOSSCount=t1e1LOSSCount, unitUtilitiesReadOnlyPassword=unitUtilitiesReadOnlyPassword, serialDteFlowControl=serialDteFlowControl, serialDteDTRAlarmControl=serialDteDTRAlarmControl, ddsNetRemComm=ddsNetRemComm, serialDteStartChannel=serialDteStartChannel, netAPS=netAPS, unitUtilitiesLocalPassword=unitUtilitiesLocalPassword, dbuISDNSwitchType=dbuISDNSwitchType, dbuISDNSPID=dbuISDNSPID, t1e1RAIGeneration=t1e1RAIGeneration, performance30ES=performance30ES, netAPSConfigOtherifIndex=netAPSConfigOtherifIndex, serialDteConfigTable=serialDteConfigTable, ddsNetAlarmFarIndex=ddsNetAlarmFarIndex, traplogDescription1=traplogDescription1, iDescription=iDescription, t1e1SESCount=t1e1SESCount, serialDteAlarmTable=serialDteAlarmTable, mgmtPortsMode=mgmtPortsMode, t1e1FrameType=t1e1FrameType, labelTableValue=labelTableValue, serialDteAlarmNearIndex=serialDteAlarmNearIndex, netAPSConfigStatusString=netAPSConfigStatusString, productSerialNum=productSerialNum, bertElapsedTime=bertElapsedTime, serialDteInvertClock=serialDteInvertClock, channelSignalling=channelSignalling, ddsNetOOFStatus=ddsNetOOFStatus, t1e1LOSSThreshold=t1e1LOSSThreshold, testLoopInitiator=testLoopInitiator)
