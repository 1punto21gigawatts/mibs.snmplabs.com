#
# PySNMP MIB module TIMETRA-ATM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/TIMETRA-ATM-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:16:54 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint")
atmInterfaceTCAlarmState, atmInterfaceConfVccs, atmInterfaceMaxActiveVciBits, atmVclVci, atmInterfaceMaxActiveVpiBits, aal5VccEntry, atmVplEntry, atmInterfaceTCEntry, atmVplVpi, atmInterfaceCurrentMaxVpiBits, atmInterfaceConfVpcs, atmInterfaceDs3PlcpAlarmState, atmVclEntry, atmInterfaceConfEntry, atmVclVpi, atmInterfaceCurrentMaxVciBits = mibBuilder.importSymbols("ATM-MIB", "atmInterfaceTCAlarmState", "atmInterfaceConfVccs", "atmInterfaceMaxActiveVciBits", "atmVclVci", "atmInterfaceMaxActiveVpiBits", "aal5VccEntry", "atmVplEntry", "atmInterfaceTCEntry", "atmVplVpi", "atmInterfaceCurrentMaxVpiBits", "atmInterfaceConfVpcs", "atmInterfaceDs3PlcpAlarmState", "atmVclEntry", "atmInterfaceConfEntry", "atmVclVpi", "atmInterfaceCurrentMaxVciBits")
AtmVorXAdminStatus, AtmTrafficDescrParamIndex, AtmVorXOperStatus, AtmVcIdentifier, AtmConnCastType, AtmConnKind, AtmVorXLastChange, AtmVpIdentifier = mibBuilder.importSymbols("ATM-TC-MIB", "AtmVorXAdminStatus", "AtmTrafficDescrParamIndex", "AtmVorXOperStatus", "AtmVcIdentifier", "AtmConnCastType", "AtmConnKind", "AtmVorXLastChange", "AtmVpIdentifier")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
Integer32, Unsigned32, Counter64, TimeTicks, ObjectIdentity, MibIdentifier, ModuleIdentity, IpAddress, NotificationType, Bits, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "Unsigned32", "Counter64", "TimeTicks", "ObjectIdentity", "MibIdentifier", "ModuleIdentity", "IpAddress", "NotificationType", "Bits", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Counter32")
DisplayString, TimeStamp, RowStatus, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TimeStamp", "RowStatus", "TextualConvention")
tmnxChassisIndex, tmnxMDASlotNum, tmnxCardSlotNum = mibBuilder.importSymbols("TIMETRA-CHASSIS-MIB", "tmnxChassisIndex", "tmnxMDASlotNum", "tmnxCardSlotNum")
tmnxConnProfId, = mibBuilder.importSymbols("TIMETRA-CONN-PROF-MIB", "tmnxConnProfId")
tmnxSRConfs, timetraSRMIBModules, tmnxSRObjs, tmnxSRNotifyPrefix = mibBuilder.importSymbols("TIMETRA-GLOBAL-MIB", "tmnxSRConfs", "timetraSRMIBModules", "tmnxSRObjs", "tmnxSRNotifyPrefix")
timetraATMMIBModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 6527, 1, 1, 3, 27))
timetraATMMIBModule.setRevisions(('1911-02-01 00:00', '1909-02-28 00:00', '1906-03-16 00:00', '1905-08-31 00:00', '1905-01-24 00:00', '1903-10-28 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: timetraATMMIBModule.setRevisionsDescriptions(('Rev 9.0 1 Feb 2011 00:00 9.0 release of the TIMETRA-ATM-MIB.', 'Rev 7.0 28 Feb 2009 00:00 7.0 release of the TIMETRA-ATM-MIB.', 'Rev 4.0 16 Mar 2006 00:00 4.0 release of the TIMETRA-ATM-MIB.', 'Rev 3.0 31 Aug 2005 00:00 3.0 release of the TIMETRA-ATM-MIB.', 'Rev 2.1 24 Jan 2005 00:00 2.1 release of the TIMETRA-ATM-MIB.', 'Rev 0.1 28 Oct 2003 00:00 Initial version of the TIMETRA-ATM-MIB.',))
if mibBuilder.loadTexts: timetraATMMIBModule.setLastUpdated('201102010000Z')
if mibBuilder.loadTexts: timetraATMMIBModule.setOrganization('Alcatel-Lucent')
if mibBuilder.loadTexts: timetraATMMIBModule.setContactInfo('Alcatel-Lucent SROS Support Web: http://support.alcatel-lucent.com ')
if mibBuilder.loadTexts: timetraATMMIBModule.setDescription("This document is the SNMP MIB module to manage and provision ATM functionality for the Alcatel-Lucent SROS device. This includes extensions to the AToM MIB defined in RFC 2515 to allow statistics retrieval as well as extensions to the ILMI link attributes. Copyright 2003-2011 Alcatel-Lucent. All rights reserved. Reproduction of this document is authorized on the condition that the foregoing copyright notice is included. This SNMP MIB module (Specification) embodies Alcatel-Lucent's proprietary intellectual property. Alcatel-Lucent retains all title and ownership in the Specification, including any revisions. Alcatel-Lucent grants all interested parties a non-exclusive license to use and distribute an unmodified copy of this Specification in connection with management of Alcatel-Lucent products, and without fee, provided this copyright notice and license appear on all copies. This Specification is supplied 'as is', and Alcatel-Lucent makes no warranty, either express or implied, as to the use, operation, condition, or performance of the Specification.")
tAtmObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27))
tAtmMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 27))
tAtmMdaObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 1))
tAtmIntfObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 2))
tAtmVclObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 3))
tAal5VccObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 4))
tAtmTrafficDescObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 5))
tAtmVplObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 6))
tAtmVtlObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 7))
tAtmCellVclObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 8))
tAtmSystemObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 9))
tAtmIlmiLinkObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 10))
tAtmTCSublayerObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 11))
tAtmCpObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 12))
tmnxAtmNotifyPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 27))
tAtmNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 27, 0))
class AtmConnectionOwner(TextualConvention, Integer32):
    description = 'This texual convention identifies the system entity that owns a specific ATM connection.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("sap", 1), ("ilmi", 2))

class AtmOamStatus(TextualConvention, Integer32):
    description = 'This texual convention indicates the OAM operational status of ATM connections. Ete indicates end to end connection. Ais denotes alarm indication signal and Rdi is for remote defect indication. Loc indicates the alarm was due to loss of continuity.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("up", 1), ("eteAis", 2), ("eteRdi", 3), ("eteAisLoc", 4))

class AtmIlmiStatus(TextualConvention, Integer32):
    description = 'This textual convention indicates the ILMI status of the VCL or VPL. If through ILMI an operational condition or misconfiguration has been detected, tAtmVclInfoIlmiStatus or tAtmVplInfoIlmiStatus will reflect this condition.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("ok", 1), ("vpiOrVciRangeConflict", 2))

class AtmLlid(TextualConvention, OctetString):
    description = 'This texual convention is the 16 octets that identifies the system Loopback location Id (LLID). As required by the ATM OAM Loopback capability. This texual convention is defined in ITU-T standard I.610.'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(16, 16)
    fixedLength = 16

class AtmIlmiLinkUniType(TextualConvention, Integer32):
    description = 'AtmIlmiLinkUniType is an enumerated integer whose value indicates ATM UNI type.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("public", 1), ("private", 2))

class AtmIlmiLinkDeviceType(TextualConvention, Integer32):
    description = 'AtmIlmiLinkDeviceType is an enumerated integer whose value indicates the advertised device type.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("user", 1), ("node", 2))

class AtmIlmiLinkVersion(TextualConvention, Integer32):
    description = "AtmIlmiLinkVersion is an enumerated integer whose value indicates the ILMI version of either `3.0', `3.1' or `4.0' that is advertised by IME."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("undefined", 0), ("version3point1", 1), ("version4point0", 2), ("version3point0", 3))

class AtmIlmiLinkImeType(TextualConvention, Integer32):
    description = "AtmIlmiLinkImeType is an enumerated integer whose value indicates the ILMI IME type of either `User-Side' or `Network-Side'."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("userside", 1), ("networkside", 2))

tAtmMdaInfoTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 1, 1), )
if mibBuilder.loadTexts: tAtmMdaInfoTable.setStatus('obsolete')
if mibBuilder.loadTexts: tAtmMdaInfoTable.setDescription('The tAtmMdaInfoTable contains ATM MDA status information. This table is obsoleted in release 3.0.')
tAtmMdaInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 1, 1, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-CHASSIS-MIB", "tmnxCardSlotNum"), (0, "TIMETRA-CHASSIS-MIB", "tmnxMDASlotNum"))
if mibBuilder.loadTexts: tAtmMdaInfoEntry.setStatus('obsolete')
if mibBuilder.loadTexts: tAtmMdaInfoEntry.setDescription('An entry in the tAtmMdaInfoEntry containing status information applicable to an ATM MDA. This entry is obsoleted in release 3.0.')
tAtmMdaMaxSupportedVpcs = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmMdaMaxSupportedVpcs.setStatus('obsolete')
if mibBuilder.loadTexts: tAtmMdaMaxSupportedVpcs.setDescription('The value of tAtmMdaMaxSupportedVpcs indicates the maximum number of ATM VPCs that can be configured on this MDA. This object is obsoleted in release 3.0.')
tAtmMdaMaxSupportedVccs = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmMdaMaxSupportedVccs.setStatus('obsolete')
if mibBuilder.loadTexts: tAtmMdaMaxSupportedVccs.setDescription('The value of tAtmMdaMaxSupportedVccs indicates the maximum number of ATM VCCs that can be configured on this MDA. This object is obsoleted in release 3.0.')
tAtmMdaConfiguredVpcs = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmMdaConfiguredVpcs.setStatus('obsolete')
if mibBuilder.loadTexts: tAtmMdaConfiguredVpcs.setDescription('The value of tAtmMdaConfiguredVpcs indicates the number of ATM VPCs that have been configured on this MDA. This object is obsoleted in release 3.0.')
tAtmMdaConfiguredVccs = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 1, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmMdaConfiguredVccs.setStatus('obsolete')
if mibBuilder.loadTexts: tAtmMdaConfiguredVccs.setDescription('The value of tAtmMdaConfiguredVccs indicates the number of ATM VCCs that have been configured on this MDA. This object is obsoleted in release 3.0.')
tAtmIntfConfTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 2, 1), )
if mibBuilder.loadTexts: tAtmIntfConfTable.setStatus('current')
if mibBuilder.loadTexts: tAtmIntfConfTable.setDescription('The tAtmIntfConfTable contains ATM interface configuration and status not included in the AToM MIB definition in RFC 2515.')
tAtmIntfConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 2, 1, 1), )
atmInterfaceConfEntry.registerAugmentions(("TIMETRA-ATM-MIB", "tAtmIntfConfEntry"))
tAtmIntfConfEntry.setIndexNames(*atmInterfaceConfEntry.getIndexNames())
if mibBuilder.loadTexts: tAtmIntfConfEntry.setStatus('current')
if mibBuilder.loadTexts: tAtmIntfConfEntry.setDescription('An entry in the tAtmIntfConfEntry containing additional configuration and status information applicable to an ATM interface.')
tAtmIntfCurrentMaxVpcs = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmIntfCurrentMaxVpcs.setStatus('current')
if mibBuilder.loadTexts: tAtmIntfCurrentMaxVpcs.setDescription("The value of tAtmIntfCurrentMaxVpcs indicates the maximum number of VPCs that may be currently configured on this ATM interface. The value is the minimum of atmInterfaceMaxVpcs, and the atmInterfaceMaxVpcs of the interface's UNI/NNI peer as negotiated by ILMI. If the interface does not negotiate with its peer to determine the number of VPCs that can be configured on the interface, then the value of this object must equal atmInterfaceMaxVpcs.")
tAtmIntfCurrentMaxVccs = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmIntfCurrentMaxVccs.setStatus('current')
if mibBuilder.loadTexts: tAtmIntfCurrentMaxVccs.setDescription("The value of tAtmIntfCurrentMaxVccs indicates the maximum number of VCCs that may be currently supported on this ATM interface. The value is the minimum of atmInterfaceMaxVccs, and the atmInterfaceMaxVccs of the interface's UNI/NNI peer as negotiated by ILMI. If the interface does not negotiate with its peer to determine the number of VCCs that can be configured on the interface, then the value of this object must equal atmInterfaceMaxVccs.")
tAtmIntfTotalIngrCbrBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 2, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmIntfTotalIngrCbrBandwidth.setStatus('current')
if mibBuilder.loadTexts: tAtmIntfTotalIngrCbrBandwidth.setDescription('The value of tAtmIntfTotalIngrCbrBandwidth indicates the total Cbr bandwidth consumed on this interface in the ingress direction.')
tAtmIntfTotalIngrRtVbrBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 2, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmIntfTotalIngrRtVbrBandwidth.setStatus('current')
if mibBuilder.loadTexts: tAtmIntfTotalIngrRtVbrBandwidth.setDescription('The value of tAtmIntfTotalIngrRtVbrBandwidth indicates the total rtVbr bandwidth consumed on this interface in the ingress direction.')
tAtmIntfTotalIngrNrtVbrBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 2, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmIntfTotalIngrNrtVbrBandwidth.setStatus('current')
if mibBuilder.loadTexts: tAtmIntfTotalIngrNrtVbrBandwidth.setDescription('The value of tAtmIntfTotalIngrNrtVbrBandwidth indicates the total nrtVbr bandwidth consumed on this interface in the ingress direction.')
tAtmIntfTotalIngrUbrBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 2, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmIntfTotalIngrUbrBandwidth.setStatus('current')
if mibBuilder.loadTexts: tAtmIntfTotalIngrUbrBandwidth.setDescription('The value of tAtmIntfTotalIngrUbrBandwidth indicates the total Ubr bandwidth consumed on this interface in the ingress direction.')
tAtmIntfTotalEgrCbrBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 2, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmIntfTotalEgrCbrBandwidth.setStatus('current')
if mibBuilder.loadTexts: tAtmIntfTotalEgrCbrBandwidth.setDescription('The value of tAtmIntfTotalEgrCbrBandwidth indicates the total Cbr bandwidth consumed on this interface in the egress direction.')
tAtmIntfTotalEgrRtVbrBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 2, 1, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmIntfTotalEgrRtVbrBandwidth.setStatus('current')
if mibBuilder.loadTexts: tAtmIntfTotalEgrRtVbrBandwidth.setDescription('The value of tAtmIntfTotalEgrRtVbrBandwidth indicates tje total rtVbr bandwidth consumed on this interface in the egress direction.')
tAtmIntfTotalEgrNrtVbrBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 2, 1, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmIntfTotalEgrNrtVbrBandwidth.setStatus('current')
if mibBuilder.loadTexts: tAtmIntfTotalEgrNrtVbrBandwidth.setDescription('The value of tAtmIntfTotalEgrNrtVbrBandwidth indicates the total nrtVbr bandwidth consumed on this interface in the egress direction.')
tAtmIntfTotalEgrUbrBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 2, 1, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmIntfTotalEgrUbrBandwidth.setStatus('current')
if mibBuilder.loadTexts: tAtmIntfTotalEgrUbrBandwidth.setDescription('The value of tAtmIntfTotalEgrUbrBandwidth indicates the total Ubr bandwidth consumed on this interface in the egress direction.')
tAtmIntfBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 2, 1, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmIntfBandwidth.setStatus('current')
if mibBuilder.loadTexts: tAtmIntfBandwidth.setDescription('The value of tAtmIntfBandwidth indicates the total ATM link bandwidth accepted on this interface.')
tAtmIntfShapedBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 2, 1, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmIntfShapedBandwidth.setStatus('current')
if mibBuilder.loadTexts: tAtmIntfShapedBandwidth.setDescription('The value of tAtmIntfShapedBandwidth indicates the total shaped bandwidth consumed on this interface in the egress direction.')
tAtmIntfLastUnknVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 2, 1, 1, 13), AtmVpIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmIntfLastUnknVpi.setStatus('current')
if mibBuilder.loadTexts: tAtmIntfLastUnknVpi.setDescription('The value of tAtmIntfLastUnknVpi indicates the last unknown Vpi that was received on this interface.')
tAtmIntfLastUnknVci = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 2, 1, 1, 14), AtmVcIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmIntfLastUnknVci.setStatus('current')
if mibBuilder.loadTexts: tAtmIntfLastUnknVci.setDescription('The value of tAtmIntfLastUnknVci indicates the last unknown vci that was received on this interface.')
tAtmIntfOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 2, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("lowerLayerDown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmIntfOperStatus.setStatus('current')
if mibBuilder.loadTexts: tAtmIntfOperStatus.setDescription('The value of tAtmIntfOperStatus indicates the status of the ATM interface. If the SONET-PATH layer and TC Sublayer are operationally up, the ATM Interface is considered up. If the SONET-PATH layer and/or TC Sublayer is down, the ATM Interface is set to lowerLayerDown.')
tAtmIntfConfVtcs = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 2, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmIntfConfVtcs.setStatus('current')
if mibBuilder.loadTexts: tAtmIntfConfVtcs.setDescription('The value of tAtmIntfConfVtcs indicates the number of VTCs currently in use at this ATM interface.')
tAtmIntfConfIfcs = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 2, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmIntfConfIfcs.setStatus('current')
if mibBuilder.loadTexts: tAtmIntfConfIfcs.setDescription('The value of tAtmIntfConfIfcs indicates the number of IFCs currently in use at this ATM interface.')
tAtmIntfStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 2, 2), )
if mibBuilder.loadTexts: tAtmIntfStatsTable.setStatus('current')
if mibBuilder.loadTexts: tAtmIntfStatsTable.setDescription('The tAtmIntfStatsTable contains ATM interface stats at the ATM Layer.')
tAtmIntfStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 2, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: tAtmIntfStatsEntry.setStatus('current')
if mibBuilder.loadTexts: tAtmIntfStatsEntry.setDescription('An entry in the tAtmIntfStatsEntry containing statistics information applicable to an ATM interface.')
tAtmIntfStatsTotalCellsRxd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 2, 2, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmIntfStatsTotalCellsRxd.setStatus('current')
if mibBuilder.loadTexts: tAtmIntfStatsTotalCellsRxd.setDescription('The value of tAtmIntfStatsTotalCellsRxd indicates the number of valid ATM cells received by the ATM interface including both CLP=0 and CLP=1 cells. If traffic policing is implemented, then cells are counted prior to the application of traffic policing.')
tAtmIntfStatsTotalCellsTxd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 2, 2, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmIntfStatsTotalCellsTxd.setStatus('current')
if mibBuilder.loadTexts: tAtmIntfStatsTotalCellsTxd.setDescription('The value of tAtmIntfStatsTotalCellsTxd indicates the number of valid ATM cells transmitted by the ATM interface including both CLP=0 and CLP=1 cells.')
tAtmIntfStatsTotalBytesRxd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 2, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmIntfStatsTotalBytesRxd.setStatus('current')
if mibBuilder.loadTexts: tAtmIntfStatsTotalBytesRxd.setDescription('The value of tAtmIntfStatsTotalBytesRxd indicates the number of bytes received on this interface. This is the number of tAtmIntfStatsTotalCellsRxd multiplied by 53.')
tAtmIntfStatsTotalBytesTxd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 2, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmIntfStatsTotalBytesTxd.setStatus('current')
if mibBuilder.loadTexts: tAtmIntfStatsTotalBytesTxd.setDescription('The value of tAtmIntfStatsTotalBytesTxd indicates the number of bytes transmitted on this interface. This is the number of tAtmIntfStatsTotalCellsTxd multiplied by 53.')
tAtmIntfStatsTotalUnknCellsDrp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 2, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmIntfStatsTotalUnknCellsDrp.setStatus('current')
if mibBuilder.loadTexts: tAtmIntfStatsTotalUnknCellsDrp.setDescription('The value of tAtmIntfStatsTotalUnknCellsDrp indicates the number of cells dropped due to an unknown VPI/VCI.')
tAtmIntfStatsTotalHecErr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 2, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmIntfStatsTotalHecErr.setStatus('obsolete')
if mibBuilder.loadTexts: tAtmIntfStatsTotalHecErr.setDescription('The value of tAtmIntfStatsTotalHecErr indicates the number of cells with uncorrectable HEC Errors on this interface.')
tAtmIntfStatsTotalHecErrFixed = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 2, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmIntfStatsTotalHecErrFixed.setStatus('obsolete')
if mibBuilder.loadTexts: tAtmIntfStatsTotalHecErrFixed.setDescription('The value of tAtmIntfStatsTotalHecErrFixed indicates the number of cells with correctable HEC Errors on this interface.')
tAtmIntfAal5StatsTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 2, 3), )
if mibBuilder.loadTexts: tAtmIntfAal5StatsTable.setStatus('current')
if mibBuilder.loadTexts: tAtmIntfAal5StatsTable.setDescription('The tAtmIntfAal5StatsTable contains ATM interface stats at the AAL5 Layer.')
tAtmIntfAal5StatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 2, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: tAtmIntfAal5StatsEntry.setStatus('current')
if mibBuilder.loadTexts: tAtmIntfAal5StatsEntry.setDescription('An entry in the tAtmIntfAal5StatsEntry containing statistics information applicable to an ATM interface at the AAL5 Layer.')
tAtmIntfAal5StatsTotalPktsRxd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 2, 3, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmIntfAal5StatsTotalPktsRxd.setStatus('current')
if mibBuilder.loadTexts: tAtmIntfAal5StatsTotalPktsRxd.setDescription('The value of tAtmIntfAal5StatsTotalPktsRxd indicates the number of AAL5 PDUs that are received by the ATM interface.')
tAtmIntfAal5StatsTotalPktsTxd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 2, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmIntfAal5StatsTotalPktsTxd.setStatus('current')
if mibBuilder.loadTexts: tAtmIntfAal5StatsTotalPktsTxd.setDescription('The value of tAtmIntfAal5StatsTotalPktsTxd indicates the number of AAL5 PDUs that are transmitted by the ATM interface.')
tAtmIntfAal5StatsTotalPktsDrpRxd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 2, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmIntfAal5StatsTotalPktsDrpRxd.setStatus('current')
if mibBuilder.loadTexts: tAtmIntfAal5StatsTotalPktsDrpRxd.setDescription('The value of tAtmIntfAal5StatsTotalPktsDrpRxd indicates the number of AAL5 PDUs dropped by the ATM interface in the receive direction. This count does not include crc32 Errors or oversized SDU discards')
tAtmIntfAal5StatsTotalPktsDrpTxd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 2, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmIntfAal5StatsTotalPktsDrpTxd.setStatus('current')
if mibBuilder.loadTexts: tAtmIntfAal5StatsTotalPktsDrpTxd.setDescription('The value of tAtmIntfAal5StatsTotalPktsDrpTxd indicates the number of AAL5 PDUs dropped in the transmit direction. This count does not include crc32 Errors or oversized SDU discards.')
tAtmIntfAal5StatsTotalCrc32Err = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 2, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmIntfAal5StatsTotalCrc32Err.setStatus('current')
if mibBuilder.loadTexts: tAtmIntfAal5StatsTotalCrc32Err.setDescription('The value of tAtmIntfAal5StatsTotalCrc32Err indicates the number of Errors detected by the 32 bit cyclic redundancy check.')
tAtmIfcInfoTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 2, 4), )
if mibBuilder.loadTexts: tAtmIfcInfoTable.setStatus('current')
if mibBuilder.loadTexts: tAtmIfcInfoTable.setDescription('The tAtmIfcInfoTable contains configuration and status information for ATM interface-level connections.')
tAtmIfcInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 2, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: tAtmIfcInfoEntry.setStatus('current')
if mibBuilder.loadTexts: tAtmIfcInfoEntry.setDescription('An entry in the tAtmIfcInfoTable containing configuration and status information applicable to ATM interface-level connections.')
tAtmIfcAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 2, 4, 1, 1), AtmVorXAdminStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmIfcAdminStatus.setStatus('current')
if mibBuilder.loadTexts: tAtmIfcAdminStatus.setDescription('tAtmIfcAdminStatus specifies the desired administrative state of the IFC.')
tAtmIfcOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 2, 4, 1, 2), AtmVorXOperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmIfcOperStatus.setStatus('current')
if mibBuilder.loadTexts: tAtmIfcOperStatus.setDescription('tAtmIfcOperStatus indicates the current operational status of the IFC.')
tAtmIfcLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 2, 4, 1, 3), AtmVorXLastChange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmIfcLastChange.setStatus('current')
if mibBuilder.loadTexts: tAtmIfcLastChange.setDescription('tAtmIfcLastChange indicates the value of sysUpTime at the time this IFC entered its current operational state.')
tAtmIfcReceiveTrafficDescrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 2, 4, 1, 4), AtmTrafficDescrParamIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmIfcReceiveTrafficDescrIndex.setStatus('current')
if mibBuilder.loadTexts: tAtmIfcReceiveTrafficDescrIndex.setDescription('tAtmIfcReceiveTrafficDescrIndex identifies the row in the atmTrafficDescrParamTable which applies to the receive direction of the IFC.')
tAtmIfcTransmitTrafficDescrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 2, 4, 1, 5), AtmTrafficDescrParamIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmIfcTransmitTrafficDescrIndex.setStatus('current')
if mibBuilder.loadTexts: tAtmIfcTransmitTrafficDescrIndex.setDescription('tAtmIfcTransmitTrafficDescrIndex identifies the row in the atmTrafficDescrParamTable which applies to the transmit direction of the IFC.')
tAtmIfcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 2, 4, 1, 6), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmIfcRowStatus.setStatus('current')
if mibBuilder.loadTexts: tAtmIfcRowStatus.setDescription("tAtmIfcRowStatus indicates the current RowStatus of the IFC. Entries in the tAtmIfcInfoTable are created as a result of the creation of another system entity (such as a SAP). Since entries in this table can not be created directly, tAtmIfcRowStatus is read-only and will always be 'active' if the row exists.")
tAtmIfcCastType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 2, 4, 1, 7), AtmConnCastType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmIfcCastType.setStatus('current')
if mibBuilder.loadTexts: tAtmIfcCastType.setDescription('tAtmIfcCastType indicates the connection topology type.')
tAtmIfcConnKind = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 2, 4, 1, 8), AtmConnKind()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmIfcConnKind.setStatus('current')
if mibBuilder.loadTexts: tAtmIfcConnKind.setDescription('The value of tAtmIfcConnKind indicates the use of call control.')
tAtmIfcInfoOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 2, 4, 1, 9), AtmConnectionOwner()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmIfcInfoOwner.setStatus('current')
if mibBuilder.loadTexts: tAtmIfcInfoOwner.setDescription('The value of tAtmIfcInfoOwner indicates which application caused the creation of the ATM interface-level connection.')
tAtmIfcStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 2, 5), )
if mibBuilder.loadTexts: tAtmIfcStatisticsTable.setStatus('current')
if mibBuilder.loadTexts: tAtmIfcStatisticsTable.setDescription('The tAtmIfcStatisticsTable is used to gather cell-level statistics on a particular IFC entry.')
tAtmIfcStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 2, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: tAtmIfcStatisticsEntry.setStatus('current')
if mibBuilder.loadTexts: tAtmIfcStatisticsEntry.setDescription('An entry in the tAtmIfcStatisticsTable containing statistics information applicable to a particular IFC entry.')
tAtmIfcStatsTotalCellsRxd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 2, 5, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmIfcStatsTotalCellsRxd.setStatus('current')
if mibBuilder.loadTexts: tAtmIfcStatsTotalCellsRxd.setDescription('The value of tAtmIfcStatsTotalCellsRxd indicates the number of valid ATM cells received by the IFC including both CLP=0 and CLP=1 cells. If traffic policing is implemented, then cells are counted prior to the application of traffic policing.')
tAtmIfcStatsTotalClp0CellsRxd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 2, 5, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmIfcStatsTotalClp0CellsRxd.setStatus('current')
if mibBuilder.loadTexts: tAtmIfcStatsTotalClp0CellsRxd.setDescription('The value of tAtmIfcStatsTotalClp0CellsRxd indicates the number of valid ATM CLP=0 cells received by the IFC. If traffic policing is implemented, then cells are counted prior to the application of traffic policing.')
tAtmIfcStatsTotalCellsTxd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 2, 5, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmIfcStatsTotalCellsTxd.setStatus('current')
if mibBuilder.loadTexts: tAtmIfcStatsTotalCellsTxd.setDescription('The value of tAtmIfcStatsTotalCellsTxd indicates the number of valid ATM cells transmitted by the IFC including both CLP=0 and CLP=1 cells. If traffic policing is implemented, then cells are counted prior to the application of traffic policing.')
tAtmIfcStatsTotalClp0CellsTxd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 2, 5, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmIfcStatsTotalClp0CellsTxd.setStatus('current')
if mibBuilder.loadTexts: tAtmIfcStatsTotalClp0CellsTxd.setDescription('The value of tAtmIfcStatsTotalClp0CellsTxd indicates the number of valid ATM CLP=0 cells transmitted by the IFC. If traffic policing is implemented, then cells are counted prior to the application of traffic policing.')
tAtmIfcStatsTotalBytesRxd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 2, 5, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmIfcStatsTotalBytesRxd.setStatus('current')
if mibBuilder.loadTexts: tAtmIfcStatsTotalBytesRxd.setDescription('The value of tAtmIfcStatsTotalBytesRxd indicates the number of bytes received by this IFC. This is the number of tAtmIfcStatsTotalCellsRxd multiplied by 53.')
tAtmIfcStatsTotalBytesTxd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 2, 5, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmIfcStatsTotalBytesTxd.setStatus('current')
if mibBuilder.loadTexts: tAtmIfcStatsTotalBytesTxd.setDescription('The value of tAtmIfcStatsTotalBytesTxd indicates the number of bytes transmitted by this IFC. This is the number of tAtmIfcStatsTotalCellsTxd multiplied by 53.')
tAtmIfcStatsDrpCellsRxd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 2, 5, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmIfcStatsDrpCellsRxd.setStatus('current')
if mibBuilder.loadTexts: tAtmIfcStatsDrpCellsRxd.setDescription('The value of tAtmIfcStatsDrpCellsRxd indicates the number of all policer cells discards (CLP=0+1) of the IFC. This excludes any buffer management discards (if applicable).')
tAtmIfcStatsDrpClp0CellsRxd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 2, 5, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmIfcStatsDrpClp0CellsRxd.setStatus('current')
if mibBuilder.loadTexts: tAtmIfcStatsDrpClp0CellsRxd.setDescription('The value of tAtmIfcStatsDrpClp0CellsRxd indicates the number of all policer CLP=0 cells discards of the IFC. This excludes any buffer management discards (if applicable).')
tAtmIfcStatsDrpClp0CellsTxd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 2, 5, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmIfcStatsDrpClp0CellsTxd.setStatus('current')
if mibBuilder.loadTexts: tAtmIfcStatsDrpClp0CellsTxd.setDescription('The value of tAtmIfcStatsDrpClp0CellsTxd indicates the number of all CLP=0 cells discards of this IFC. This includes both discards due to buffer management and policer.')
tAtmIfcStatsTagCells = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 2, 5, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmIfcStatsTagCells.setStatus('current')
if mibBuilder.loadTexts: tAtmIfcStatsTagCells.setDescription('The value of tAtmIfcStatsTagCells indicates the number of tagged CLP=0 cells of the IFC. The egress may or may not discard these cells.')
tAtmVclInfoTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 3, 1), )
if mibBuilder.loadTexts: tAtmVclInfoTable.setStatus('current')
if mibBuilder.loadTexts: tAtmVclInfoTable.setDescription('The tAtmVclInfoTable is used to display non-configuration information on a particular VCL entry in the RFC 2515 AToM MIB.')
tAtmVclInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 3, 1, 1), )
atmVclEntry.registerAugmentions(("TIMETRA-ATM-MIB", "tAtmVclInfoEntry"))
tAtmVclInfoEntry.setIndexNames(*atmVclEntry.getIndexNames())
if mibBuilder.loadTexts: tAtmVclInfoEntry.setStatus('current')
if mibBuilder.loadTexts: tAtmVclInfoEntry.setDescription('An entry in the tAtmVclInfoTable containing non-configuration information applicable to a particular VCL entry in the AToM MIB.')
tAtmVclInfoOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 3, 1, 1, 1), AtmConnectionOwner()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmVclInfoOwner.setStatus('current')
if mibBuilder.loadTexts: tAtmVclInfoOwner.setDescription('The value of tAtmVclInfoOwner indicates which application caused the creation of the ATM VCL.')
tAtmVclInfoOamStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 3, 1, 1, 2), AtmOamStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmVclInfoOamStatus.setStatus('current')
if mibBuilder.loadTexts: tAtmVclInfoOamStatus.setDescription('The value of tAtmVclInfoOamStatus indicates the OAM operational status of the VCL.')
tAtmVclInfoIlmiStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 3, 1, 1, 3), AtmIlmiStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmVclInfoIlmiStatus.setStatus('current')
if mibBuilder.loadTexts: tAtmVclInfoIlmiStatus.setDescription('The value of tAtmVclInfoIlmiStatus indicates the ILMI status of the VCL. ')
tAtmVclInfoRxTrafficDescrIdOvr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 3, 1, 1, 4), AtmTrafficDescrParamIndex().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1000), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmVclInfoRxTrafficDescrIdOvr.setStatus('current')
if mibBuilder.loadTexts: tAtmVclInfoRxTrafficDescrIdOvr.setDescription('This object indicates the index of the ATM ingress traffic descriptor override. This override value is given by an AAA server such as a RADIUS server. The value zero indicates that no override is given.')
tAtmVclInfoTxTrafficDescrIdOvr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 3, 1, 1, 5), AtmTrafficDescrParamIndex().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1000), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmVclInfoTxTrafficDescrIdOvr.setStatus('current')
if mibBuilder.loadTexts: tAtmVclInfoTxTrafficDescrIdOvr.setDescription('This object indicates the index of the ATM egress traffic descriptor override. This override value is given by an AAA server such as a RADIUS server. The value zero indicates that no override is given.')
tAtmVclStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 3, 2), )
if mibBuilder.loadTexts: tAtmVclStatisticsTable.setStatus('current')
if mibBuilder.loadTexts: tAtmVclStatisticsTable.setDescription('The tAtmVclStatisticsTable is used to gather cell-level statistics on a particular VCL entry in the RFC 2515 AToM MIB.')
tAtmVclStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 3, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ATM-MIB", "atmVclVpi"), (0, "ATM-MIB", "atmVclVci"))
if mibBuilder.loadTexts: tAtmVclStatisticsEntry.setStatus('current')
if mibBuilder.loadTexts: tAtmVclStatisticsEntry.setDescription('An entry in the tAtmVclStatisticsTable containing statistics information applicable to a particular VCL entry in the AToM MIB.')
tAtmVclStatsTotalCellsRxd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 3, 2, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmVclStatsTotalCellsRxd.setStatus('current')
if mibBuilder.loadTexts: tAtmVclStatsTotalCellsRxd.setDescription('The value of tAtmVclStatsTotalCellsRxd indicates the number of valid ATM cells received by the VCL including both CLP=0 and CLP=1 cells. If traffic policing is implemented, then cells are counted prior to the application of traffic policing.')
tAtmVclStatsTotalCellsTxd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 3, 2, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmVclStatsTotalCellsTxd.setStatus('current')
if mibBuilder.loadTexts: tAtmVclStatsTotalCellsTxd.setDescription('The value of tAtmVclStatsTotalCellsTxd indicates the number of valid ATM cells transmitted by the VCL including both CLP=0 and CLP=1 cells. If traffic policing is implemented, then cells are counted prior to the application of traffic policing.')
tAtmVclStatsTotalBytesRxd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 3, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmVclStatsTotalBytesRxd.setStatus('current')
if mibBuilder.loadTexts: tAtmVclStatsTotalBytesRxd.setDescription('The value of tAtmVclStatsTotalBytesRxd indicates the number of bytes received by this Vcl. This is the number of tAtmVclStatsTotalCellsRxd multiplied by 53.')
tAtmVclStatsTotalBytesTxd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 3, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmVclStatsTotalBytesTxd.setStatus('current')
if mibBuilder.loadTexts: tAtmVclStatsTotalBytesTxd.setDescription('The value of tAtmVclStatsTotalBytesTxd indicates the number of bytes transmitted by this Vcl. This is the number of tAtmVclStatsTotalCellsTxd multiplied by 53.')
tAtmOamVclStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 3, 3), )
if mibBuilder.loadTexts: tAtmOamVclStatisticsTable.setStatus('current')
if mibBuilder.loadTexts: tAtmOamVclStatisticsTable.setDescription('The tAtmOamVclStatisticsTable is used to gather oam statistics on a particular VCL entry in the RFC 2515 AToM MIB.')
tAtmOamVclStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 3, 3, 1), )
atmVclEntry.registerAugmentions(("TIMETRA-ATM-MIB", "tAtmOamVclStatisticsEntry"))
tAtmOamVclStatisticsEntry.setIndexNames(*atmVclEntry.getIndexNames())
if mibBuilder.loadTexts: tAtmOamVclStatisticsEntry.setStatus('current')
if mibBuilder.loadTexts: tAtmOamVclStatisticsEntry.setDescription('An entry in the tAtmVclStatisticsTable containing statistics information applicable to a particular VCL entry in the AToM MIB.')
tAtmOamVclStatsAISCellsTxd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 3, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmOamVclStatsAISCellsTxd.setStatus('current')
if mibBuilder.loadTexts: tAtmOamVclStatsAISCellsTxd.setDescription('The value of tAtmOamVclStatsAISCellsTxd indicates the number of AIS cells transmitted on this VC for both end to end and segment.')
tAtmOamVclStatsRDICellsTxd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 3, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmOamVclStatsRDICellsTxd.setStatus('current')
if mibBuilder.loadTexts: tAtmOamVclStatsRDICellsTxd.setDescription('The value of tAtmOamVclStatsRDICellsTxd indicates the number of RDI cells transmitted on this VC for both end to end and segment.')
tAtmOamVclStatsLoopbackCellsTxd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 3, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmOamVclStatsLoopbackCellsTxd.setStatus('current')
if mibBuilder.loadTexts: tAtmOamVclStatsLoopbackCellsTxd.setDescription('The value of tAtmOamVclStatsLoopbackCellsTxd indicates the number of loopback requests and responses transmitted on this VC for both end to end and segment.')
tAtmOamVclStatsAISCellsRxd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 3, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmOamVclStatsAISCellsRxd.setStatus('current')
if mibBuilder.loadTexts: tAtmOamVclStatsAISCellsRxd.setDescription('The value of tAtmOamVclStatsAISCellsRxd indicates the number of AIS cells received on this VC for both end to end and segment.')
tAtmOamVclStatsRDICellsRxd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 3, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmOamVclStatsRDICellsRxd.setStatus('current')
if mibBuilder.loadTexts: tAtmOamVclStatsRDICellsRxd.setDescription('The value of tAtmOamVclStatsRDICellsRxd indicates the number of RDI cells received on this VC for both end to end and segment.')
tAtmOamVclStatsLoopbackCellsRxd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 3, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmOamVclStatsLoopbackCellsRxd.setStatus('current')
if mibBuilder.loadTexts: tAtmOamVclStatsLoopbackCellsRxd.setDescription('The value of tAtmOamVclStatsLoopbackCellsRxd indicates the number of loopback requests and responses received on this VC for both end to end and segment.')
tAtmOamVclStatsCrc10Err = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 3, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmOamVclStatsCrc10Err.setStatus('current')
if mibBuilder.loadTexts: tAtmOamVclStatsCrc10Err.setDescription('The value of tAtmOamVclStatsCrc10Err indicates the number of oam cells discarded with CRC 10 Errors.')
tAtmOamVclStatsOtherCellsRxd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 3, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmOamVclStatsOtherCellsRxd.setStatus('current')
if mibBuilder.loadTexts: tAtmOamVclStatsOtherCellsRxd.setDescription('This value of tAtmOamVclStatsOtherCellsRxd indicates the number of oam cells that are received but not identified.')
tAal5VccStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 4, 1), )
if mibBuilder.loadTexts: tAal5VccStatisticsTable.setStatus('current')
if mibBuilder.loadTexts: tAal5VccStatisticsTable.setDescription('tAal5VccStatisticsTable is used to gather AAL5-level statistics on a particular AAL5 VCC entry in the RFC 2515 AToM MIB.')
tAal5VccStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 4, 1, 1), )
aal5VccEntry.registerAugmentions(("TIMETRA-ATM-MIB", "tAal5VccStatisticsEntry"))
tAal5VccStatisticsEntry.setIndexNames(*aal5VccEntry.getIndexNames())
if mibBuilder.loadTexts: tAal5VccStatisticsEntry.setStatus('current')
if mibBuilder.loadTexts: tAal5VccStatisticsEntry.setDescription('An entry in the tAal5VccStatisticsTable containing statistics information applicable to a particular AAL5 VCC entry in the AToM MIB.')
tAal5VccStatsPacketsRxd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 4, 1, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAal5VccStatsPacketsRxd.setStatus('current')
if mibBuilder.loadTexts: tAal5VccStatsPacketsRxd.setDescription('The value of tAal5VccStatsPacketsRxd indicates the number of valid AAL-5 SDUs and AAL-5 SDUs with CRC-32 errors received by the AAL-5 VCC.')
tAal5VccStatsPacketsTxd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 4, 1, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAal5VccStatsPacketsTxd.setStatus('current')
if mibBuilder.loadTexts: tAal5VccStatsPacketsTxd.setDescription('The value of tAal5VccStatsPacketsTxd indicates the number of AAL-5 SDUs transmitted by the AAL-5 VCC.')
tAal5VccStatsDrpPacketsRxd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 4, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAal5VccStatsDrpPacketsRxd.setStatus('current')
if mibBuilder.loadTexts: tAal5VccStatsDrpPacketsRxd.setDescription('The value of tAal5VccStatsDrpPacketsRxd indicates the number of dropped AAL-5 SDUs that have been received on the AAL-5 VCC.')
tAal5VccStatsDrpPacketsTxd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 4, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAal5VccStatsDrpPacketsTxd.setStatus('current')
if mibBuilder.loadTexts: tAal5VccStatsDrpPacketsTxd.setDescription('The value of tAal5VccStatsDrpPacketsTxd indicates the number of dropped AAL-5 SDUs that would have been transmitted on the AAL-5 VCC.')
tAtmCellVclStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 8, 1), )
if mibBuilder.loadTexts: tAtmCellVclStatisticsTable.setStatus('current')
if mibBuilder.loadTexts: tAtmCellVclStatisticsTable.setDescription('tAtmCellVclStatisticsTable is used to gather cell-level statistics on a particular VCC entry in the RFC 2515 AToM MIB.')
tAtmCellVclStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 8, 1, 1), )
atmVclEntry.registerAugmentions(("TIMETRA-ATM-MIB", "tAtmCellVclStatisticsEntry"))
tAtmCellVclStatisticsEntry.setIndexNames(*atmVclEntry.getIndexNames())
if mibBuilder.loadTexts: tAtmCellVclStatisticsEntry.setStatus('current')
if mibBuilder.loadTexts: tAtmCellVclStatisticsEntry.setDescription('An entry in the tAtmCellVclStatisticsTable containing statistics information applicable to a particular VCL entry in the AToM MIB.')
tAtmCellVclStatsClp0CellsRxd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 8, 1, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmCellVclStatsClp0CellsRxd.setStatus('current')
if mibBuilder.loadTexts: tAtmCellVclStatsClp0CellsRxd.setDescription('The value of tAtmCellVclStatsClp0CellsRxd indicates the number of valid ATM CLP=0 cells received by the VCL.')
tAtmCellVclStatsClp0CellsTxd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 8, 1, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmCellVclStatsClp0CellsTxd.setStatus('current')
if mibBuilder.loadTexts: tAtmCellVclStatsClp0CellsTxd.setDescription('The value of tAtmCellVclStatsClp0CellsTxd indicates the number of valid ATM CLP=0 cells transmitted by the VCL.')
tAtmCellVclStatsDrpCellsRxd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 8, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmCellVclStatsDrpCellsRxd.setStatus('current')
if mibBuilder.loadTexts: tAtmCellVclStatsDrpCellsRxd.setDescription('The value of tAtmCellVclStatsDrpCellsRxd indicates the number of all policer cells discards (CLP=0+1) of the VCL. This excludes any buffer management discards (if applicable).')
tAtmCellVclStatsDrpClp0CellsRxd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 8, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmCellVclStatsDrpClp0CellsRxd.setStatus('current')
if mibBuilder.loadTexts: tAtmCellVclStatsDrpClp0CellsRxd.setDescription('The value of tAtmCellVclStatsDrpClp0CellsRxd indicates the number of all policer CLP=0 cells discards of the VCL. This excludes any buffer management discards (if applicable).')
tAtmCellVclStatsDrpClp0CellsTxd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 8, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmCellVclStatsDrpClp0CellsTxd.setStatus('current')
if mibBuilder.loadTexts: tAtmCellVclStatsDrpClp0CellsTxd.setDescription('The value of tAtmCellVclStatsDrpClp0CellsTxd indicates the number of all CLP=0 cells discards of this VCL. This includes both discards due to buffer management and policer.')
tAtmCellVclStatsTagCells = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 8, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmCellVclStatsTagCells.setStatus('current')
if mibBuilder.loadTexts: tAtmCellVclStatsTagCells.setDescription('The value of tAtmCellVclStatsTagCells indicates the number of tagged CLP=0 cells of the VCL. The egress may or may not discard these cells.')
tAtmVplInfoTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 6, 1), )
if mibBuilder.loadTexts: tAtmVplInfoTable.setStatus('current')
if mibBuilder.loadTexts: tAtmVplInfoTable.setDescription('The tAtmVplInfoTable is used to display non-configuration information on a particular VPL entry in the RFC 2515 AToM MIB.')
tAtmVplInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 6, 1, 1), )
atmVplEntry.registerAugmentions(("TIMETRA-ATM-MIB", "tAtmVplInfoEntry"))
tAtmVplInfoEntry.setIndexNames(*atmVplEntry.getIndexNames())
if mibBuilder.loadTexts: tAtmVplInfoEntry.setStatus('current')
if mibBuilder.loadTexts: tAtmVplInfoEntry.setDescription('An entry in the tAtmVplInfoTable containing non-configuration information applicable to a particular VPL entry in the AToM MIB.')
tAtmVplInfoOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 6, 1, 1, 1), AtmConnectionOwner()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmVplInfoOwner.setStatus('current')
if mibBuilder.loadTexts: tAtmVplInfoOwner.setDescription('The value of tAtmVplInfoOwner indicates which application caused the creation of the ATM VPL.')
tAtmVplInfoOamStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 6, 1, 1, 2), AtmOamStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmVplInfoOamStatus.setStatus('current')
if mibBuilder.loadTexts: tAtmVplInfoOamStatus.setDescription('The value of tAtmVplInfoOamStatus indicates the OAM operational status of the VPL.')
tAtmVplInfoIlmiStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 6, 1, 1, 3), AtmIlmiStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmVplInfoIlmiStatus.setStatus('current')
if mibBuilder.loadTexts: tAtmVplInfoIlmiStatus.setDescription('The value of tAtmVplInfoIlmiStatus indicates the ILMI status of the VPL. ')
tAtmVplStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 6, 2), )
if mibBuilder.loadTexts: tAtmVplStatisticsTable.setStatus('current')
if mibBuilder.loadTexts: tAtmVplStatisticsTable.setDescription('The tAtmVplStatisticsTable is used to gather cell-level statistics on a particular VPL entry in the RFC 2515 AToM MIB.')
tAtmVplStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 6, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ATM-MIB", "atmVplVpi"))
if mibBuilder.loadTexts: tAtmVplStatisticsEntry.setStatus('current')
if mibBuilder.loadTexts: tAtmVplStatisticsEntry.setDescription('An entry in the tAtmVplStatisticsTable containing statistics information applicable to a particular VPL entry in the AToM MIB.')
tAtmVplStatsTotalCellsRxd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 6, 2, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmVplStatsTotalCellsRxd.setStatus('current')
if mibBuilder.loadTexts: tAtmVplStatsTotalCellsRxd.setDescription('The value of tAtmVplStatsTotalCellsRxd indicates the number of valid ATM cells received by the VPL including both CLP=0 and CLP=1 cells. If traffic policing is implemented, then cells are counted prior to the application of traffic policing.')
tAtmVplStatsTotalClp0CellsRxd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 6, 2, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmVplStatsTotalClp0CellsRxd.setStatus('current')
if mibBuilder.loadTexts: tAtmVplStatsTotalClp0CellsRxd.setDescription('The value of tAtmVplStatsTotalClp0CellsRxd indicates the number of valid ATM CLP=0 cells received by the VPL. If traffic policing is implemented, then cells are counted prior to the application of traffic policing.')
tAtmVplStatsTotalCellsTxd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 6, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmVplStatsTotalCellsTxd.setStatus('current')
if mibBuilder.loadTexts: tAtmVplStatsTotalCellsTxd.setDescription('The value of tAtmVplStatsTotalCellsTxd indicates the number of valid ATM cells transmitted by the VPL including both CLP=0 and CLP=1 cells. If traffic policing is implemented, then cells are counted prior to the application of traffic policing.')
tAtmVplStatsTotalClp0CellsTxd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 6, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmVplStatsTotalClp0CellsTxd.setStatus('current')
if mibBuilder.loadTexts: tAtmVplStatsTotalClp0CellsTxd.setDescription('The value of tAtmVplStatsTotalClp0CellsTxd indicates the number of valid ATM CLP=0 cells transmitted by the VPL. If traffic policing is implemented, then cells are counted prior to the application of traffic policing.')
tAtmVplStatsTotalBytesRxd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 6, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmVplStatsTotalBytesRxd.setStatus('current')
if mibBuilder.loadTexts: tAtmVplStatsTotalBytesRxd.setDescription('The value of tAtmVplStatsTotalBytesRxd indicates the number of bytes received by this VPL. This is the number of tAtmVplStatsTotalCellsRxd multiplied by 53.')
tAtmVplStatsTotalBytesTxd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 6, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmVplStatsTotalBytesTxd.setStatus('current')
if mibBuilder.loadTexts: tAtmVplStatsTotalBytesTxd.setDescription('The value of tAtmVplStatsTotalBytesTxd indicates the number of bytes transmitted by this VPL. This is the number of tAtmVplStatsTotalCellsTxd multiplied by 53.')
tAtmVplStatsDrpCellsRxd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 6, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmVplStatsDrpCellsRxd.setStatus('current')
if mibBuilder.loadTexts: tAtmVplStatsDrpCellsRxd.setDescription('The value of tAtmVplStatsDrpCellsRxd indicates the number of all policer cells discards (CLP=0+1) of the VPL. This excludes any buffer management discards (if applicable).')
tAtmVplStatsDrpClp0CellsRxd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 6, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmVplStatsDrpClp0CellsRxd.setStatus('current')
if mibBuilder.loadTexts: tAtmVplStatsDrpClp0CellsRxd.setDescription('The value of tAtmVplStatsDrpClp0CellsRxd indicates the number of all policer CLP=0 cells discards of the VPL. This excludes any buffer management discards (if applicable).')
tAtmVplStatsDrpClp0CellsTxd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 6, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmVplStatsDrpClp0CellsTxd.setStatus('current')
if mibBuilder.loadTexts: tAtmVplStatsDrpClp0CellsTxd.setDescription('The value of tAtmVplStatsDrpClp0CellsTxd indicates the number of all CLP=0 cells discards of this VPL. This includes both discards due to buffer management and policer.')
tAtmVplStatsTagCells = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 6, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmVplStatsTagCells.setStatus('current')
if mibBuilder.loadTexts: tAtmVplStatsTagCells.setDescription('The value of tAtmVplStatsTagCells indicates the number of tagged CLP=0 cells of the VPL. The egress may or may not discard these cells.')
tAtmOamVplStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 6, 3), )
if mibBuilder.loadTexts: tAtmOamVplStatisticsTable.setStatus('current')
if mibBuilder.loadTexts: tAtmOamVplStatisticsTable.setDescription('The tAtmOamVplStatisticsTable is used to gather oam statistics on a particular VPL entry in the RFC 2515 AToM MIB.')
tAtmOamVplStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 6, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ATM-MIB", "atmVplVpi"))
if mibBuilder.loadTexts: tAtmOamVplStatisticsEntry.setStatus('current')
if mibBuilder.loadTexts: tAtmOamVplStatisticsEntry.setDescription('An entry in the tAtmVplStatisticsTable containing statistics information applicable to a particular VPL entry in the AToM MIB.')
tAtmOamVplStatsAISCellsTxd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 6, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmOamVplStatsAISCellsTxd.setStatus('current')
if mibBuilder.loadTexts: tAtmOamVplStatsAISCellsTxd.setDescription('The value of tAtmOamVplStatsAISCellsTxd indicates the number of AIS cells transmitted on this VPL for both end to end and segment.')
tAtmOamVplStatsRDICellsTxd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 6, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmOamVplStatsRDICellsTxd.setStatus('current')
if mibBuilder.loadTexts: tAtmOamVplStatsRDICellsTxd.setDescription('The value of tAtmOamVplStatsRDICellsTxd indicates the number of RDI cells transmitted on this VPL for both end to end and segment.')
tAtmOamVplStatsLoopbackCellsTxd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 6, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmOamVplStatsLoopbackCellsTxd.setStatus('current')
if mibBuilder.loadTexts: tAtmOamVplStatsLoopbackCellsTxd.setDescription('The value of tAtmOamVplStatsLoopbackCellsTxd indicates the number of loopback requests and responses transmitted on this VPL for both end to end and segment.')
tAtmOamVplStatsAISCellsRxd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 6, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmOamVplStatsAISCellsRxd.setStatus('current')
if mibBuilder.loadTexts: tAtmOamVplStatsAISCellsRxd.setDescription('The value of tAtmOamVplStatsAISCellsRxd indicates the number of AIS cells received on this VPL for both end to end and segment.')
tAtmOamVplStatsRDICellsRxd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 6, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmOamVplStatsRDICellsRxd.setStatus('current')
if mibBuilder.loadTexts: tAtmOamVplStatsRDICellsRxd.setDescription('The value of tAtmOamVplStatsRDICellsRxd indicates the number of RDI cells received on this VPL for both end to end and segment.')
tAtmOamVplStatsLoopbackCellsRxd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 6, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmOamVplStatsLoopbackCellsRxd.setStatus('current')
if mibBuilder.loadTexts: tAtmOamVplStatsLoopbackCellsRxd.setDescription('The value of tAtmOamVplStatsLoopbackCellsRxd indicates the number of loopback requests and responses received on this VPL for both end to end and segment.')
tAtmOamVplStatsCrc10Errors = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 6, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmOamVplStatsCrc10Errors.setStatus('current')
if mibBuilder.loadTexts: tAtmOamVplStatsCrc10Errors.setDescription('The value of tAtmOamVplStatsCrc10Errors indicates the number of OAM cells discarded on this VPL with CRC 10 errors.')
tAtmOamVplStatsOtherCellsRxd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 6, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmOamVplStatsOtherCellsRxd.setStatus('current')
if mibBuilder.loadTexts: tAtmOamVplStatsOtherCellsRxd.setDescription('This value of tAtmOamVplStatsOtherCellsRxd indicates the number of OAM cells that are received on this VPL but not identified.')
tAtmVtlInfoTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 7, 1), )
if mibBuilder.loadTexts: tAtmVtlInfoTable.setStatus('current')
if mibBuilder.loadTexts: tAtmVtlInfoTable.setDescription('The tAtmVtlInfoTable is used to display non-configuration information on a particular VTL entry.')
tAtmVtlInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 7, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "TIMETRA-ATM-MIB", "tAtmVtlStartVpi"), (0, "TIMETRA-ATM-MIB", "tAtmVtlEndVpi"))
if mibBuilder.loadTexts: tAtmVtlInfoEntry.setStatus('current')
if mibBuilder.loadTexts: tAtmVtlInfoEntry.setDescription('An entry in the tAtmVtlInfoTable containing non-configuration information applicable to a particular VTL entry.')
tAtmVtlStartVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 7, 1, 1, 1), AtmVpIdentifier())
if mibBuilder.loadTexts: tAtmVtlStartVpi.setStatus('current')
if mibBuilder.loadTexts: tAtmVtlStartVpi.setDescription('The starting VPI value of the VTL.')
tAtmVtlEndVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 7, 1, 1, 2), AtmVpIdentifier())
if mibBuilder.loadTexts: tAtmVtlEndVpi.setStatus('current')
if mibBuilder.loadTexts: tAtmVtlEndVpi.setDescription('The ending VPI value of the VTL.')
tAtmVtlAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 7, 1, 1, 3), AtmVorXAdminStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmVtlAdminStatus.setStatus('current')
if mibBuilder.loadTexts: tAtmVtlAdminStatus.setDescription('tAtmVtlAdminStatus specifies the desired administrative state of the VTL.')
tAtmVtlOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 7, 1, 1, 4), AtmVorXOperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmVtlOperStatus.setStatus('current')
if mibBuilder.loadTexts: tAtmVtlOperStatus.setDescription('tAtmVtlOperStatus indicates the current operational status of the VTL.')
tAtmVtlLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 7, 1, 1, 5), AtmVorXLastChange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmVtlLastChange.setStatus('current')
if mibBuilder.loadTexts: tAtmVtlLastChange.setDescription('tAtmVtlLastChange indicates the value of sysUpTime at the time this VTL entered its current operational state.')
tAtmVtlReceiveTrafficDescrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 7, 1, 1, 6), AtmTrafficDescrParamIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmVtlReceiveTrafficDescrIndex.setStatus('current')
if mibBuilder.loadTexts: tAtmVtlReceiveTrafficDescrIndex.setDescription('tAtmVtlReceiveTrafficDescrIndex identifies the row in the atmTrafficDescrParamTable which applies to the receive direction of the VTL.')
tAtmVtlTransmitTrafficDescrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 7, 1, 1, 7), AtmTrafficDescrParamIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmVtlTransmitTrafficDescrIndex.setStatus('current')
if mibBuilder.loadTexts: tAtmVtlTransmitTrafficDescrIndex.setDescription('tAtmVtlTransmitTrafficDescrIndex identifies the row in the atmTrafficDescrParamTable which applies to the transmit direction of the VTL.')
tAtmVtlRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 7, 1, 1, 8), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmVtlRowStatus.setStatus('current')
if mibBuilder.loadTexts: tAtmVtlRowStatus.setDescription("tAtmVtlRowStatus indicates the current RowStatus of the VTL. Entries in the tAtmVtlInfoTable are created as a result of the creation of another system entity (such as a SAP). Since entries in this table can not be created directly tAtmVtlRowStatus is read-only and will always be 'active' if the row exists.")
tAtmVtlCastType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 7, 1, 1, 9), AtmConnCastType().clone('p2p')).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmVtlCastType.setStatus('current')
if mibBuilder.loadTexts: tAtmVtlCastType.setDescription('tAtmVtlCastType indicates the connection topology type.')
tAtmVtlConnKind = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 7, 1, 1, 10), AtmConnKind()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmVtlConnKind.setStatus('current')
if mibBuilder.loadTexts: tAtmVtlConnKind.setDescription('tAtmVtlConnKind indicates the use of call control.')
tAtmVtlInfoOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 7, 1, 1, 11), AtmConnectionOwner()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmVtlInfoOwner.setStatus('current')
if mibBuilder.loadTexts: tAtmVtlInfoOwner.setDescription('The value of tAtmVtlInfoOwner indicates which application caused the creation of the ATM VTL.')
tAtmVtlStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 7, 2), )
if mibBuilder.loadTexts: tAtmVtlStatisticsTable.setStatus('current')
if mibBuilder.loadTexts: tAtmVtlStatisticsTable.setDescription('The tAtmVtlStatisticsTable is used to gather cell-level statistics on a particular VTL entry.')
tAtmVtlStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 7, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "TIMETRA-ATM-MIB", "tAtmVtlStartVpi"), (0, "TIMETRA-ATM-MIB", "tAtmVtlEndVpi"))
if mibBuilder.loadTexts: tAtmVtlStatisticsEntry.setStatus('current')
if mibBuilder.loadTexts: tAtmVtlStatisticsEntry.setDescription('An entry in the tAtmVtlStatisticsTable containing statistics information applicable to a particular VTL entry.')
tAtmVtlStatsTotalCellsRxd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 7, 2, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmVtlStatsTotalCellsRxd.setStatus('current')
if mibBuilder.loadTexts: tAtmVtlStatsTotalCellsRxd.setDescription('The value of tAtmVtlStatsTotalCellsRxd indicates the number of valid ATM cells received by the VTL including both CLP=0 and CLP=1 cells. If traffic policing is implemented, then cells are counted prior to the application of traffic policing.')
tAtmVtlStatsTotalClp0CellsRxd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 7, 2, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmVtlStatsTotalClp0CellsRxd.setStatus('current')
if mibBuilder.loadTexts: tAtmVtlStatsTotalClp0CellsRxd.setDescription('The value of tAtmVtlStatsTotalClp0CellsRxd indicates the number of valid ATM CLP=0 cells received by the VTL. If traffic policing is implemented, then cells are counted prior to the application of traffic policing.')
tAtmVtlStatsTotalCellsTxd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 7, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmVtlStatsTotalCellsTxd.setStatus('current')
if mibBuilder.loadTexts: tAtmVtlStatsTotalCellsTxd.setDescription('The value of tAtmVtlStatsTotalCellsTxd indicates the number of valid ATM cells transmitted by the VTL including both CLP=0 and CLP=1 cells. If traffic policing is implemented, then cells are counted prior to the application of traffic policing.')
tAtmVtlStatsTotalClp0CellsTxd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 7, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmVtlStatsTotalClp0CellsTxd.setStatus('current')
if mibBuilder.loadTexts: tAtmVtlStatsTotalClp0CellsTxd.setDescription('The value of tAtmVtlStatsTotalClp0CellsTxd indicates the number of valid ATM CLP=0 cells transmitted by the VTL. If traffic policing is implemented, then cells are counted prior to the application of traffic policing.')
tAtmVtlStatsTotalBytesRxd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 7, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmVtlStatsTotalBytesRxd.setStatus('current')
if mibBuilder.loadTexts: tAtmVtlStatsTotalBytesRxd.setDescription('The value of tAtmVtlStatsTotalBytesRxd indicates the number of bytes received by this VTL. This is the number of tAtmVtlStatsTotalCellsRxd multiplied by 53.')
tAtmVtlStatsTotalBytesTxd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 7, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmVtlStatsTotalBytesTxd.setStatus('current')
if mibBuilder.loadTexts: tAtmVtlStatsTotalBytesTxd.setDescription('The value of tAtmVtlStatsTotalBytesTxd indicates the number of bytes transmitted by this VTL. This is the number of tAtmVtlStatsTotalCellsTxd multiplied by 53.')
tAtmVtlStatsDrpCellsRxd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 7, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmVtlStatsDrpCellsRxd.setStatus('current')
if mibBuilder.loadTexts: tAtmVtlStatsDrpCellsRxd.setDescription('The value of tAtmVtlStatsDrpCellsRxd indicates the number of all policer cells discards (CLP=0+1) of the VTL. This excludes any buffer management discards (if applicable).')
tAtmVtlStatsDrpClp0CellsRxd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 7, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmVtlStatsDrpClp0CellsRxd.setStatus('current')
if mibBuilder.loadTexts: tAtmVtlStatsDrpClp0CellsRxd.setDescription('The value of tAtmVtlStatsDrpClp0CellsRxd indicates the number of all policer CLP=0 cells discards of the VTL. This excludes any buffer management discards (if applicable).')
tAtmVtlStatsDrpClp0CellsTxd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 7, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmVtlStatsDrpClp0CellsTxd.setStatus('current')
if mibBuilder.loadTexts: tAtmVtlStatsDrpClp0CellsTxd.setDescription('The value of tAtmVtlStatsDrpClp0CellsTxd indicates the number of all CLP=0 cells discards of this VTL. This includes both discards due to buffer management and policer.')
tAtmVtlStatsTagCells = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 7, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmVtlStatsTagCells.setStatus('current')
if mibBuilder.loadTexts: tAtmVtlStatsTagCells.setDescription('The value of tAtmVtlStatsTagCells indicates the number of tagged CLP=0 cells of the VTL. The egress may or may not discard these cells.')
tAtmSysLlid = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 9, 1), AtmLlid().clone(hexValue="01000000000000000000000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tAtmSysLlid.setStatus('current')
if mibBuilder.loadTexts: tAtmSysLlid.setDescription('The ATM LLID is the Loopback location ID that uniquely identifies the system for the ATM OAM Loopback purposes.')
tAtmSysOamRetryUp = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 9, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10)).clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tAtmSysOamRetryUp.setStatus('current')
if mibBuilder.loadTexts: tAtmSysOamRetryUp.setDescription('The value of tAtmSysOamRetryUp specifies the number of consecutive OAM loopback attempts that must succeed after the periodic attempt before the endpoint will transition from the eteAisLoc state to up. A value of 0 means that the endpoint will transition to the up state immediately if the periodic loopback attempt succeeds.')
tAtmSysOamRetryDown = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 9, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10)).clone(4)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tAtmSysOamRetryDown.setStatus('current')
if mibBuilder.loadTexts: tAtmSysOamRetryDown.setDescription('The value of tAtmSysOamRetryDown specifies the number of consecutive OAM loopback attempts that must fail after the periodic attempt before the endpoint will transition from the up state to eteAisLoc. A value of 0 means that the endpoint will transition to the eteAisLoc state immediately if the periodic loopback attempt fails.')
tAtmSysOamLoopbackPeriod = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 9, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 40)).clone(10)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tAtmSysOamLoopbackPeriod.setStatus('current')
if mibBuilder.loadTexts: tAtmSysOamLoopbackPeriod.setDescription('The value of tAtmSysOamLoopbackPeriod specifies the number of seconds between periodic loopback attempts on an ATM endpoint that has periodic loopback enabled.')
tAtmIlmiLinkTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 10, 1), )
if mibBuilder.loadTexts: tAtmIlmiLinkTable.setStatus('current')
if mibBuilder.loadTexts: tAtmIlmiLinkTable.setDescription('The tAtmIlmiLinkTable is used to configure ILMI Link attributes.')
tAtmIlmiLinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 10, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: tAtmIlmiLinkEntry.setStatus('current')
if mibBuilder.loadTexts: tAtmIlmiLinkEntry.setDescription('An entry in the tAtmIlmiLinkTable containing additional management information applicable to a particular ILMI link on an ATM interface')
tAtmIlmiLinkRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 10, 1, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tAtmIlmiLinkRowStatus.setStatus('current')
if mibBuilder.loadTexts: tAtmIlmiLinkRowStatus.setDescription('tAtmIlmiLinkRowStatus is used to create, delete or modify a row in this table. ')
tAtmIlmiLinkLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 10, 1, 1, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmIlmiLinkLastChanged.setStatus('current')
if mibBuilder.loadTexts: tAtmIlmiLinkLastChanged.setDescription('The value of tAtmIlmiLinkLastChanged indicates the sysUpTime value when this row was last modified.')
tAtmIlmiLinkAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 10, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tAtmIlmiLinkAdminStatus.setStatus('current')
if mibBuilder.loadTexts: tAtmIlmiLinkAdminStatus.setDescription('The value of tAtmIlmiLinkAdminStatus specifies the administrative status for the ILMI Link.')
tAtmIlmiLinkOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 10, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmIlmiLinkOperStatus.setStatus('current')
if mibBuilder.loadTexts: tAtmIlmiLinkOperStatus.setDescription('The value of tAtmIlmiLinkOperStatus indicates the operational status of the ILMI Link.')
tAtmIlmiLinkVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 10, 1, 1, 5), AtmVpIdentifier()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tAtmIlmiLinkVpi.setStatus('current')
if mibBuilder.loadTexts: tAtmIlmiLinkVpi.setDescription('The value of tAtmIlmiLinkVpi specifies the VPI value of the ILMI link. Once this row has been created, this value cannot be modified.')
tAtmIlmiLinkVci = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 10, 1, 1, 6), AtmVcIdentifier().clone(16)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tAtmIlmiLinkVci.setStatus('current')
if mibBuilder.loadTexts: tAtmIlmiLinkVci.setDescription('The value of tAtmIlmiLinkVci specifies the VCI value of the ILMI link. This value cannot be zero. Once this row has been created, this value cannot be modified.')
tAtmIlmiLinkFsmState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 10, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("stopped", 1), ("linkFailing", 2), ("establishing", 3), ("configuring", 4), ("retrievingNetworkPrefixes", 5), ("registeringNetworkPrefixes", 6), ("retrievingAddresses", 7), ("registeringAddresses", 8), ("verifying", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmIlmiLinkFsmState.setReference('ATM Forum, Integrated Local Management Interface (ILMI) Specification, Version 4.0, af-ilmi-0065.000, September 1996, Appendix 1')
if mibBuilder.loadTexts: tAtmIlmiLinkFsmState.setStatus('current')
if mibBuilder.loadTexts: tAtmIlmiLinkFsmState.setDescription('The value of tAtmIlmiLinkFsmState indicates the state of the ILMI Finite State Machine associated with this interface.')
tAtmIlmiLinkReceiveTrafficDescrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 10, 1, 1, 8), AtmTrafficDescrParamIndex().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tAtmIlmiLinkReceiveTrafficDescrIndex.setStatus('current')
if mibBuilder.loadTexts: tAtmIlmiLinkReceiveTrafficDescrIndex.setDescription('The value of tAtmIlmiLinkReceiveTrafficDescrIndex specifies the value of the atmTrafficDescrParamIndex index for the row of the ATM Traffic Descriptor Table which applies to the receive direction of this ILMI link. This value cannot be zero.')
tAtmIlmiLinkTransmitTrafficDescrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 10, 1, 1, 9), AtmTrafficDescrParamIndex().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tAtmIlmiLinkTransmitTrafficDescrIndex.setStatus('current')
if mibBuilder.loadTexts: tAtmIlmiLinkTransmitTrafficDescrIndex.setDescription('The value of tAtmIlmiLinkTransmitTrafficDescrIndex specifies the value of the atmTrafficDescrParamIndex index for the row of the ATM Traffic Descriptor Table which applies to the transmit direction of this ILMI link. This value cannot be zero.')
tAtmIlmiLinkEstablishConPollIntvl = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 10, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(1)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tAtmIlmiLinkEstablishConPollIntvl.setReference('ATM Forum, Integrated Local Management Interface (ILMI) Specification, Version 4.0, af-ilmi-0065.000, September 1996, Section 8.3.1')
if mibBuilder.loadTexts: tAtmIlmiLinkEstablishConPollIntvl.setStatus('current')
if mibBuilder.loadTexts: tAtmIlmiLinkEstablishConPollIntvl.setDescription('The value of tAtmIlmiLinkEstablishConPollIntvl specifies the amount of time S, in seconds, between successive transmissions of ILMI messages on this interface for the purpose of detecting the establishment of ILMI connectivity.')
tAtmIlmiLinkCheckConPollIntvl = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 10, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(5)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tAtmIlmiLinkCheckConPollIntvl.setReference('ATM Forum, Integrated Local Management Interface (ILMI) Specification, Version 4.0, af-ilmi-0065.000, September 1996, Section 8.3.1')
if mibBuilder.loadTexts: tAtmIlmiLinkCheckConPollIntvl.setStatus('current')
if mibBuilder.loadTexts: tAtmIlmiLinkCheckConPollIntvl.setDescription('The value of tAtmIlmiLinkCheckConPollIntvl specifies the amount of time T, in seconds, between successive transmissions of ILMI messages on this interface for the purpose of detecting loss of ILMI connectivity. The distinguished value zero disables ILMI connectivity procedures on this interface.')
tAtmIlmiLinkConPollInactFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 10, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(4)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tAtmIlmiLinkConPollInactFactor.setReference('ATM Forum, Integrated Local Management Interface (ILMI) Specification, Version 4.0, af-ilmi-0065.000, September 1996, Section 8.3.1')
if mibBuilder.loadTexts: tAtmIlmiLinkConPollInactFactor.setStatus('current')
if mibBuilder.loadTexts: tAtmIlmiLinkConPollInactFactor.setDescription('The value of tAtmIlmiLinkConPollInactFactor specifies the number K of consecutive polls on this interface for which no ILMI response message is received before ILMI connectivity is declared lost.')
tAtmIlmiLinkUniType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 10, 1, 1, 13), AtmIlmiLinkUniType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmIlmiLinkUniType.setReference('ATM Forum, Integrated Local Management Interface (ILMI) Specification, Version 4.0, af-ilmi-0065.000, September 1996, Section 8.3.4.1')
if mibBuilder.loadTexts: tAtmIlmiLinkUniType.setStatus('current')
if mibBuilder.loadTexts: tAtmIlmiLinkUniType.setDescription("The value of tAtmIlmiLinkUniType indicates the UNI type of either `public' or `private' to be advertised by ILMI from this end of the interface.")
tAtmIlmiLinkDeviceType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 10, 1, 1, 14), AtmIlmiLinkDeviceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmIlmiLinkDeviceType.setReference('ATM Forum, Integrated Local Management Interface (ILMI) Specification, Version 4.0, af-ilmi-0065.000, September 1996, Section 8.3.4.1')
if mibBuilder.loadTexts: tAtmIlmiLinkDeviceType.setStatus('current')
if mibBuilder.loadTexts: tAtmIlmiLinkDeviceType.setDescription("The value of tAtmIlmiLinkDeviceType indicates the device type of either `user' or `node' to be advertised by ILMI from this end of the interface.")
tAtmIlmiLinkVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 10, 1, 1, 15), AtmIlmiLinkVersion().clone('version4point0')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tAtmIlmiLinkVersion.setReference('ATM Forum, Integrated Local Management Interface (ILMI) Specification, Version 4.0, af-ilmi-0065.000, September 1996, Section 8.2.3.13')
if mibBuilder.loadTexts: tAtmIlmiLinkVersion.setStatus('current')
if mibBuilder.loadTexts: tAtmIlmiLinkVersion.setDescription("The value of tAtmIlmiLinkVersion specifies the ILMI version of either `3.1' or `4.0' to be advertised by ILMI from this end of the interface. The configuration of version `3.0' is not allowed.")
tAtmIlmiLinkImeType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 10, 1, 1, 16), AtmIlmiLinkImeType().clone('userside')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tAtmIlmiLinkImeType.setReference('ATM Forum, Integrated Local Management Interface (ILMI) Specification, Version 4.0, af-ilmi-0065.000, September 1996, Section 8.3.4.1')
if mibBuilder.loadTexts: tAtmIlmiLinkImeType.setStatus('current')
if mibBuilder.loadTexts: tAtmIlmiLinkImeType.setDescription("The value of tAtmIlmiLinkImeType specifies the configured IME type of either `User-Side' or `Network-Side'.")
tAtmIlmiLinkNegotiatedVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 10, 1, 1, 17), AtmIlmiLinkVersion()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmIlmiLinkNegotiatedVersion.setReference('ATM Forum, Integrated Local Management Interface (ILMI) Specification, Version 4.0, af-ilmi-0065.000, September 1996, Section 8.2.3.13')
if mibBuilder.loadTexts: tAtmIlmiLinkNegotiatedVersion.setStatus('current')
if mibBuilder.loadTexts: tAtmIlmiLinkNegotiatedVersion.setDescription("The value of tAtmIlmiLinkNegotiatedVersion specifies the ILMI version of either `3.0', `3.1' or `4.0' negotiated with peer IME.")
tAtmIlmiLinkNegotiatedImeType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 10, 1, 1, 18), AtmIlmiLinkImeType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmIlmiLinkNegotiatedImeType.setReference('ATM Forum, Integrated Local Management Interface (ILMI) Specification, Version 4.0, af-ilmi-0065.000, September 1996, Section 8.3.4.1')
if mibBuilder.loadTexts: tAtmIlmiLinkNegotiatedImeType.setStatus('current')
if mibBuilder.loadTexts: tAtmIlmiLinkNegotiatedImeType.setDescription("The value of tAtmIlmiLinkNegotiatedImeType specifies the resulting IME type of either `User-Side' or `Network-Side' based on local and remote UNI type and device type.")
tAtmIlmiLinkNeighborIfIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 10, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmIlmiLinkNeighborIfIdentifier.setReference('ATM Forum, Integrated Local Management Interface (ILMI) Specification, Version 4.0, af-ilmi-0065.000, September 1996, Section 8.3.1')
if mibBuilder.loadTexts: tAtmIlmiLinkNeighborIfIdentifier.setStatus('current')
if mibBuilder.loadTexts: tAtmIlmiLinkNeighborIfIdentifier.setDescription('The value of tAtmIlmiLinkNeighborIfIdentifier indicates the interface identifier advertised by the peer IME. A value of 0 indicates that the value has not been received from the peer IME.')
tAtmIlmiLinkNeighborSystemIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 10, 1, 1, 20), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6).clone(hexValue="00000000000000")).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmIlmiLinkNeighborSystemIdentifier.setReference('ATM Forum, Integrated Local Management Interface (ILMI) Specification, Version 4.0, af-ilmi-0065.000, September 1996, Section 8.3.1')
if mibBuilder.loadTexts: tAtmIlmiLinkNeighborSystemIdentifier.setStatus('current')
if mibBuilder.loadTexts: tAtmIlmiLinkNeighborSystemIdentifier.setDescription("The value of tAtmIlmiLinkNeighborSystemIdentifier indicates The system identifier advertised by the peer IME. A value of `0' indicates that the value has not been received from the peer IME.")
tAtmIlmiLinkNeighborUniType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 10, 1, 1, 21), AtmIlmiLinkUniType().clone('undefined')).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmIlmiLinkNeighborUniType.setReference('ATM Forum, Integrated Local Management Interface (ILMI) Specification, Version 4.0, af-ilmi-0065.000, September 1996, Section 8.3.4.1')
if mibBuilder.loadTexts: tAtmIlmiLinkNeighborUniType.setStatus('current')
if mibBuilder.loadTexts: tAtmIlmiLinkNeighborUniType.setDescription("The value of tAtmIlmiLinkNeighborUniType indicates the UNI type of either `public' or `private' that is advertised by the peer IME. A value of `undefined' indicates that the value has not been received from the peer IME.")
tAtmIlmiLinkNeighborDeviceType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 10, 1, 1, 22), AtmIlmiLinkDeviceType().clone('undefined')).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmIlmiLinkNeighborDeviceType.setReference('ATM Forum, Integrated Local Management Interface (ILMI) Specification, Version 4.0, af-ilmi-0065.000, September 1996, Section 8.3.4.1')
if mibBuilder.loadTexts: tAtmIlmiLinkNeighborDeviceType.setStatus('current')
if mibBuilder.loadTexts: tAtmIlmiLinkNeighborDeviceType.setDescription("The value of tAtmIlmiLinkNeighborDeviceType indicates the device type of either `user' or `node' that is advertised by the peer IME. A value of `undefined' indicates that the value has not been received from the peer IME.")
tAtmIlmiLinkNeighborVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 10, 1, 1, 23), AtmIlmiLinkVersion().clone('undefined')).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmIlmiLinkNeighborVersion.setReference('ATM Forum, Integrated Local Management Interface (ILMI) Specification, Version 4.0, af-ilmi-0065.000, September 1996, Section 8.2.3.13')
if mibBuilder.loadTexts: tAtmIlmiLinkNeighborVersion.setStatus('current')
if mibBuilder.loadTexts: tAtmIlmiLinkNeighborVersion.setDescription("The value of tAtmIlmiLinkNeighborVersion indicates the ILMI version of either `3.0', `3.1' or `4.0' that is advertised by the peer IME. A value of `undefined' indicates that the value has not been received from the peer IME.")
tAtmIlmiLinkNeighborMaxVpcs = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 10, 1, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmIlmiLinkNeighborMaxVpcs.setReference('ATM Forum, Integrated Local Management Interface (ILMI) Specification, Version 4.0, af-ilmi-0065.000, September 1996, Section 8.2.3.4')
if mibBuilder.loadTexts: tAtmIlmiLinkNeighborMaxVpcs.setStatus('current')
if mibBuilder.loadTexts: tAtmIlmiLinkNeighborMaxVpcs.setDescription('The value of tAtmIlmiLinkNeighborMaxVpcs indicates the maximum number of VPCs that can be supported by the neighbor. If the interface does not negotiate with its peer to determine the number of VPCs that can be configured on the interface, then the value of this object must equal 0.')
tAtmIlmiLinkNeighborMaxVccs = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 10, 1, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmIlmiLinkNeighborMaxVccs.setReference('ATM Forum, Integrated Local Management Interface (ILMI) Specification, Version 4.0, af-ilmi-0065.000, September 1996, Section 8.2.3.5')
if mibBuilder.loadTexts: tAtmIlmiLinkNeighborMaxVccs.setStatus('current')
if mibBuilder.loadTexts: tAtmIlmiLinkNeighborMaxVccs.setDescription('The value of tAtmIlmiLinkNeighborMaxVccs indicates the maximum number of VCCs that can be supported by the neighbor. If the interface does not negotiate with its peer to determine the number of VCCs that can be configured on the interface, then the value of this object must equal 0.')
tAtmIlmiLinkNeighborMaxVpiBits = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 10, 1, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmIlmiLinkNeighborMaxVpiBits.setReference('ATM Forum, Integrated Local Management Interface (ILMI) Specification, Version 4.0, af-ilmi-0065.000, September 1996, Section 8.2.3.2')
if mibBuilder.loadTexts: tAtmIlmiLinkNeighborMaxVpiBits.setStatus('current')
if mibBuilder.loadTexts: tAtmIlmiLinkNeighborMaxVpiBits.setDescription('The value of tAtmIlmiLinkNeighborMaxVpiBits indicates the maximum number of VPI bits that can be supported by the neighbor. If the interface does not negotiate with its peer to determine the number of VPI bits that can be configured on the interface, then the value of this object must equal 0.')
tAtmIlmiLinkNeighborMaxVciBits = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 10, 1, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmIlmiLinkNeighborMaxVciBits.setReference('ATM Forum, Integrated Local Management Interface (ILMI) Specification, Version 4.0, af-ilmi-0065.000, September 1996, Section 8.2.3.3')
if mibBuilder.loadTexts: tAtmIlmiLinkNeighborMaxVciBits.setStatus('current')
if mibBuilder.loadTexts: tAtmIlmiLinkNeighborMaxVciBits.setDescription('The value of tAtmIlmiLinkNeighborMaxVciBits indicates the maximum number of VCI bits that can be supported by the neighbor. If the interface does not negotiate with its peer to determine the number of VCI bits that can be configured on the interface, then the value of this object must equal 0.')
tAtmIlmiLinkStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 10, 2), )
if mibBuilder.loadTexts: tAtmIlmiLinkStatisticsTable.setStatus('current')
if mibBuilder.loadTexts: tAtmIlmiLinkStatisticsTable.setDescription('The tAtmIlmiLinkStatisticsTable is used to gather statistics on a particular ILMI Link.')
tAtmIlmiLinkStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 10, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: tAtmIlmiLinkStatisticsEntry.setStatus('current')
if mibBuilder.loadTexts: tAtmIlmiLinkStatisticsEntry.setDescription('An entry in the tAtmIlmiLinkStatisticsTable containing statistics information applicable to a particular ILMI link on an ATM interface.')
tAtmIlmiLinkOutPdus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 10, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmIlmiLinkOutPdus.setStatus('current')
if mibBuilder.loadTexts: tAtmIlmiLinkOutPdus.setDescription('The value of tAtmIlmiLinkOutPdus indicates the total number SNMP PDUs sent on this ILMI link.')
tAtmIlmiLinkOutGetRequestPdus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 10, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmIlmiLinkOutGetRequestPdus.setStatus('current')
if mibBuilder.loadTexts: tAtmIlmiLinkOutGetRequestPdus.setDescription('The value of tAtmIlmiLinkOutGetRequestPdus indicates the total number GetRequest SNMP PDUs sent on this ILMI link.')
tAtmIlmiLinkOutGetNextRequestPdus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 10, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmIlmiLinkOutGetNextRequestPdus.setStatus('current')
if mibBuilder.loadTexts: tAtmIlmiLinkOutGetNextRequestPdus.setDescription('The value of tAtmIlmiLinkOutGetNextRequestPdus indicates the total number GetNextRequest SNMP PDUs sent on this ILMI link.')
tAtmIlmiLinkOutSetRequestPdus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 10, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmIlmiLinkOutSetRequestPdus.setStatus('current')
if mibBuilder.loadTexts: tAtmIlmiLinkOutSetRequestPdus.setDescription("The value of tAtmIlmiLinkOutSetRequestPdus indicates the total number 'SetRequest' SNMP PDUs sent on this ILMI link.")
tAtmIlmiLinkOutGetResponsePdus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 10, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmIlmiLinkOutGetResponsePdus.setStatus('current')
if mibBuilder.loadTexts: tAtmIlmiLinkOutGetResponsePdus.setDescription("The value of tAtmIlmiLinkOutGetResponsePdus indicates the total number GetResponse SNMP PDUs sent on this ILMI link in response to GetRequest, GetNextRequest and 'SetRequests' received.")
tAtmIlmiLinkOutTrapPdus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 10, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmIlmiLinkOutTrapPdus.setStatus('current')
if mibBuilder.loadTexts: tAtmIlmiLinkOutTrapPdus.setDescription('The value of tAtmIlmiLinkOutTrapPdus indicates the total number Trap SNMP PDUs sent on this ILMI link.')
tAtmIlmiLinkOutTooBigErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 10, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmIlmiLinkOutTooBigErrors.setStatus('current')
if mibBuilder.loadTexts: tAtmIlmiLinkOutTooBigErrors.setDescription("The value of tAtmIlmiLinkOutTooBigErrors indicates the total number SNMP `TooBig' error messages sent on this ILMI link.")
tAtmIlmiLinkOutNoSuchNameErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 10, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmIlmiLinkOutNoSuchNameErrors.setStatus('current')
if mibBuilder.loadTexts: tAtmIlmiLinkOutNoSuchNameErrors.setDescription("The value of tAtmIlmiLinkOutNoSuchNameErrors indicates the total number SNMP `NoSuchName' error messages sent on this ILMI link.")
tAtmIlmiLinkOutBadValueErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 10, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmIlmiLinkOutBadValueErrors.setStatus('current')
if mibBuilder.loadTexts: tAtmIlmiLinkOutBadValueErrors.setDescription("The value of tAtmIlmiLinkOutBadValueErrors indicates the total number SNMP `BadValue' error messages sent on this ILMI link.")
tAtmIlmiLinkOutReadOnlyErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 10, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmIlmiLinkOutReadOnlyErrors.setStatus('current')
if mibBuilder.loadTexts: tAtmIlmiLinkOutReadOnlyErrors.setDescription("The value of tAtmIlmiLinkOutReadOnlyErrors indicates the total number SNMP `ReadOnly' error messages sent on this ILMI link.")
tAtmIlmiLinkOutGeneralErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 10, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmIlmiLinkOutGeneralErrors.setStatus('current')
if mibBuilder.loadTexts: tAtmIlmiLinkOutGeneralErrors.setDescription("The value of tAtmIlmiLinkOutGeneralErrors indicates the total number SNMP `General' error messages sent on this ILMI link.")
tAtmIlmiLinkInPdus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 10, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmIlmiLinkInPdus.setStatus('current')
if mibBuilder.loadTexts: tAtmIlmiLinkInPdus.setDescription('The value of tAtmIlmiLinkInPdus indicates the total number SNMP PDUs received on this ILMI link.')
tAtmIlmiLinkInGetRequestPdus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 10, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmIlmiLinkInGetRequestPdus.setStatus('current')
if mibBuilder.loadTexts: tAtmIlmiLinkInGetRequestPdus.setDescription('The value of tAtmIlmiLinkInGetRequestPdus indicates the total number GetRequest SNMP PDUs received on this ILMI link.')
tAtmIlmiLinkInGetNextRequestPdus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 10, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmIlmiLinkInGetNextRequestPdus.setStatus('current')
if mibBuilder.loadTexts: tAtmIlmiLinkInGetNextRequestPdus.setDescription("The value of tAtmIlmiLinkInGetNextRequestPdus indicates the total number 'GetNextRequest' SNMP PDUs received on this ILMI link.")
tAtmIlmiLinkInSetRequestPdus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 10, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmIlmiLinkInSetRequestPdus.setStatus('current')
if mibBuilder.loadTexts: tAtmIlmiLinkInSetRequestPdus.setDescription("The value of tAtmIlmiLinkInSetRequestPdus indicates the total number 'SetRequest' SNMP PDUs received on this ILMI link.")
tAtmIlmiLinkInGetResponsePdus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 10, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmIlmiLinkInGetResponsePdus.setStatus('current')
if mibBuilder.loadTexts: tAtmIlmiLinkInGetResponsePdus.setDescription("The value of tAtmIlmiLinkInGetResponsePdus indicates the total number 'GetResponse' SNMP PDUs received on this ILMI link in response to 'GetRequest', 'GetNextRequest' and 'SetRequests' sent.")
tAtmIlmiLinkInTrapPdus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 10, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmIlmiLinkInTrapPdus.setStatus('current')
if mibBuilder.loadTexts: tAtmIlmiLinkInTrapPdus.setDescription('The value of tAtmIlmiLinkInTrapPdus indicates the total number Trap SNMP PDUs received on this ILMI link.')
tAtmIlmiLinkInTooBigErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 10, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmIlmiLinkInTooBigErrors.setStatus('current')
if mibBuilder.loadTexts: tAtmIlmiLinkInTooBigErrors.setDescription("The value of tAtmIlmiLinkInTooBigErrors indicates the total number SNMP `TooBig' error messages received on this ILMI link.")
tAtmIlmiLinkInNoSuchNameErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 10, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmIlmiLinkInNoSuchNameErrors.setStatus('current')
if mibBuilder.loadTexts: tAtmIlmiLinkInNoSuchNameErrors.setDescription("The value of tAtmIlmiLinkInNoSuchNameErrors indicates the total number SNMP `NoSuchName' error messages received on this ILMI link.")
tAtmIlmiLinkInBadValueErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 10, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmIlmiLinkInBadValueErrors.setStatus('current')
if mibBuilder.loadTexts: tAtmIlmiLinkInBadValueErrors.setDescription("The value of tAtmIlmiLinkInBadValueErrors indicates the total number SNMP `BadValue' error messages received on this ILMI link.")
tAtmIlmiLinkInReadOnlyErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 10, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmIlmiLinkInReadOnlyErrors.setStatus('current')
if mibBuilder.loadTexts: tAtmIlmiLinkInReadOnlyErrors.setDescription("The value of tAtmIlmiLinkInReadOnlyErrors indicates the total number SNMP `ReadOnly' error messages received on this ILMI link.")
tAtmIlmiLinkInGeneralErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 10, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmIlmiLinkInGeneralErrors.setStatus('current')
if mibBuilder.loadTexts: tAtmIlmiLinkInGeneralErrors.setDescription("The value of tAtmIlmiLinkInGeneralErrors indicates the total number SNMP `General' error messages received on this ILMI link.")
tAtmIlmiLinkInInvalidSnmpVersionPdus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 10, 2, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmIlmiLinkInInvalidSnmpVersionPdus.setStatus('current')
if mibBuilder.loadTexts: tAtmIlmiLinkInInvalidSnmpVersionPdus.setDescription('The value of tAtmIlmiLinkInInvalidSnmpVersionPdus indicates the total number SNMP PDUs received with invalid version on this ILMI link.')
tAtmIlmiLinkInInvalidSnmpCommunityStringPdus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 10, 2, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmIlmiLinkInInvalidSnmpCommunityStringPdus.setStatus('current')
if mibBuilder.loadTexts: tAtmIlmiLinkInInvalidSnmpCommunityStringPdus.setDescription('The value of tAtmIlmiLinkInInvalidSnmpCommunityStringPdus indicates the total number SNMP PDUs received with invalid community string on this ILMI link.')
tAtmIlmiLinkInInvalidSnmpFormatPdus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 10, 2, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmIlmiLinkInInvalidSnmpFormatPdus.setStatus('current')
if mibBuilder.loadTexts: tAtmIlmiLinkInInvalidSnmpFormatPdus.setDescription('The value of tAtmIlmiLinkInInvalidSnmpFormatPdus indicates the total number SNMP PDUs received with invalid ASN.1 format on this ILMI link.')
tAtmTCSublayerTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 11, 1), )
if mibBuilder.loadTexts: tAtmTCSublayerTable.setStatus('current')
if mibBuilder.loadTexts: tAtmTCSublayerTable.setDescription('The tAtmTCSublayerTable contains the Transmission Convergence Sublayer data.')
tAtmTCSublayerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 11, 1, 1), )
atmInterfaceTCEntry.registerAugmentions(("TIMETRA-ATM-MIB", "tAtmTCSublayerEntry"))
tAtmTCSublayerEntry.setIndexNames(*atmInterfaceTCEntry.getIndexNames())
if mibBuilder.loadTexts: tAtmTCSublayerEntry.setStatus('current')
if mibBuilder.loadTexts: tAtmTCSublayerEntry.setDescription('An entry in the tAtmTCSublayerEntry containing additional management information about the Transmission Covergence Sublayer.')
tAtmTCSublayerHecErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 11, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmTCSublayerHecErrors.setStatus('current')
if mibBuilder.loadTexts: tAtmTCSublayerHecErrors.setDescription('The value of tAtmTCSublayerHecErrors indicates the number of cells with uncorrectable HEC Errors on this interface.')
tAtmTCSublayerHecErrorsFixed = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 11, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmTCSublayerHecErrorsFixed.setStatus('current')
if mibBuilder.loadTexts: tAtmTCSublayerHecErrorsFixed.setDescription('The value of tAtmTCSublayerHecErrorsFixed indicates the number of cells with correctable HEC Errors on this interface.')
tAtmCpStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 12, 1), )
if mibBuilder.loadTexts: tAtmCpStatisticsTable.setStatus('current')
if mibBuilder.loadTexts: tAtmCpStatisticsTable.setDescription('The tAtmCpStatisticsTable is used to gather statistics on connection profiles assigned to interfaces.')
tAtmCpStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 12, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "TIMETRA-CONN-PROF-MIB", "tmnxConnProfId"))
if mibBuilder.loadTexts: tAtmCpStatisticsEntry.setStatus('current')
if mibBuilder.loadTexts: tAtmCpStatisticsEntry.setDescription('An entry in the tAtmCpStatisticsTable contains statistics information applicable to a particular connection profile assigned to a particular interface.')
tAtmCpStatsTotalCellsRxd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 12, 1, 1, 1), Counter64()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmCpStatsTotalCellsRxd.setStatus('current')
if mibBuilder.loadTexts: tAtmCpStatsTotalCellsRxd.setDescription('The value of tAtmCpStatsTotalCellsRxd indicates the number of valid ATM cells received by the connection profile. If traffic policing is implemented, then cells are counted prior to the application of traffic policing. To obtain the byte count multiply tAtmCpStatsTotalCellsRxd by 53.')
tAtmCpStatsTotalCellsRxdLo = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 12, 1, 1, 2), Counter32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmCpStatsTotalCellsRxdLo.setStatus('current')
if mibBuilder.loadTexts: tAtmCpStatsTotalCellsRxdLo.setDescription('The value of tAtmCpStatsTotalCellsRxdLo indicates the lower 32-bits of tAtmCpStatsTotalCellsRxd.')
tAtmCpStatsTotalCellsRxdHi = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 12, 1, 1, 3), Counter32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmCpStatsTotalCellsRxdHi.setStatus('current')
if mibBuilder.loadTexts: tAtmCpStatsTotalCellsRxdHi.setDescription('The value of tAtmCpStatsTotalCellsRxdHi indicates the upper 32-bits of tAtmCpStatsTotalCellsRxd.')
tAtmCpStatsTotalCellsTxd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 12, 1, 1, 4), Counter64()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmCpStatsTotalCellsTxd.setStatus('current')
if mibBuilder.loadTexts: tAtmCpStatsTotalCellsTxd.setDescription('The value of tAtmCpStatsTotalCellsTxd indicates the number of valid ATM cells transmitted by the connection profile. If traffic policing is implemented, then cells are counted prior to the application of traffic policing. To obtain the byte count multiply tAtmCpStatsTotalCellsTxd by 53.')
tAtmCpStatsTotalCellsTxdLo = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 12, 1, 1, 5), Counter32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmCpStatsTotalCellsTxdLo.setStatus('current')
if mibBuilder.loadTexts: tAtmCpStatsTotalCellsTxdLo.setDescription('The value of tAtmCpStatsTotalCellsTxdLo indicates the lower 32-bits of tAtmCpStatsTotalCellsTxd.')
tAtmCpStatsTotalCellsTxdHi = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 12, 1, 1, 6), Counter32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmCpStatsTotalCellsTxdHi.setStatus('current')
if mibBuilder.loadTexts: tAtmCpStatsTotalCellsTxdHi.setDescription('The value of tAtmCpStatsTotalCellsTxdHi indicates the upper 32-bits of tAtmCpStatsTotalCellsTxd.')
tAtmCpStatsClp0CellsRxd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 12, 1, 1, 7), Counter64()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmCpStatsClp0CellsRxd.setStatus('current')
if mibBuilder.loadTexts: tAtmCpStatsClp0CellsRxd.setDescription('The value of tAtmCpStatsClp0CellsRxd indicates the number of valid ATM CLP=0 cells received by the connection profile.')
tAtmCpStatsClp0CellsRxdLo = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 12, 1, 1, 8), Counter32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmCpStatsClp0CellsRxdLo.setStatus('current')
if mibBuilder.loadTexts: tAtmCpStatsClp0CellsRxdLo.setDescription('The value of tAtmCpStatsClp0CellsRxdLo indicates the lower 32-bits of tAtmCpStatsClp0CellsRxd.')
tAtmCpStatsClp0CellsRxdHi = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 12, 1, 1, 9), Counter32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmCpStatsClp0CellsRxdHi.setStatus('current')
if mibBuilder.loadTexts: tAtmCpStatsClp0CellsRxdHi.setDescription('The value of tAtmCpStatsClp0CellsRxdHi indicates the upper 32-bits of tAtmCpStatsClp0CellsRxd.')
tAtmCpStatsClp0CellsTxd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 12, 1, 1, 10), Counter64()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmCpStatsClp0CellsTxd.setStatus('current')
if mibBuilder.loadTexts: tAtmCpStatsClp0CellsTxd.setDescription('The value of tAtmCpStatsClp0CellsTxd indicates the number of valid ATM CLP=0 cells transmitted by the connection profile.')
tAtmCpStatsClp0CellsTxdLo = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 12, 1, 1, 11), Counter32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmCpStatsClp0CellsTxdLo.setStatus('current')
if mibBuilder.loadTexts: tAtmCpStatsClp0CellsTxdLo.setDescription('The value of tAtmCpStatsClp0CellsTxdLo indicates the lower 32-bits of tAtmCpStatsClp0CellsTxd.')
tAtmCpStatsClp0CellsTxdHi = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 12, 1, 1, 12), Counter32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmCpStatsClp0CellsTxdHi.setStatus('current')
if mibBuilder.loadTexts: tAtmCpStatsClp0CellsTxdHi.setDescription('The value of tAtmCpStatsClp0CellsTxdHi indicates the upper 32-bits of tAtmCpStatsClp0CellsTxd.')
tAtmCpStatsDrpCellsRxd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 12, 1, 1, 13), Counter32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmCpStatsDrpCellsRxd.setStatus('current')
if mibBuilder.loadTexts: tAtmCpStatsDrpCellsRxd.setDescription('The value of tAtmCpStatsDrpCellsRxd indicates the number of all policer cells discards (CLP=0+1) of the connection profile. This excludes any buffer management discards (if applicable).')
tAtmCpStatsDrpClp0CellsRxd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 12, 1, 1, 14), Counter32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmCpStatsDrpClp0CellsRxd.setStatus('current')
if mibBuilder.loadTexts: tAtmCpStatsDrpClp0CellsRxd.setDescription('The value of tAtmCpStatsDrpClp0CellsRxd indicates the number of all policer CLP=0 cells discards of the connection profile. This excludes any buffer management discards (if applicable).')
tAtmCpStatsDrpClp0CellsTxd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 12, 1, 1, 15), Counter32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmCpStatsDrpClp0CellsTxd.setStatus('current')
if mibBuilder.loadTexts: tAtmCpStatsDrpClp0CellsTxd.setDescription('The value of tAtmCpStatsDrpClp0CellsTxd indicates the number of all CLP=0 cells discards of this connection profile. This includes both discards due to buffer management and policer.')
tAtmCpStatsTagCells = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 27, 12, 1, 1, 16), Counter32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: tAtmCpStatsTagCells.setStatus('current')
if mibBuilder.loadTexts: tAtmCpStatsTagCells.setDescription('The value of tAtmCpStatsTagCells indicates the number of tagged CLP=0 cells of the connection profile. The egress may or may not discard these cells.')
tAtmTcSubLayerDown = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 27, 0, 1)).setObjects(("ATM-MIB", "atmInterfaceTCAlarmState"))
if mibBuilder.loadTexts: tAtmTcSubLayerDown.setStatus('current')
if mibBuilder.loadTexts: tAtmTcSubLayerDown.setDescription('The tAtmTcSubLayerDown notification is generated when the ATM interface indicates that the TC Sublayer is currently in the Loss of Cell Delineation (LCD) defect maintenance state.')
tAtmTcSubLayerClear = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 27, 0, 2)).setObjects(("ATM-MIB", "atmInterfaceTCAlarmState"))
if mibBuilder.loadTexts: tAtmTcSubLayerClear.setStatus('current')
if mibBuilder.loadTexts: tAtmTcSubLayerClear.setDescription('The tAtmTcSubLayerClear notification is generated when the ATM interface indicates that the TC Sublayer is currently not in the Loss of Cell Delineation (LCD) defect maintenance state.')
tAtmPlcpSubLayerDown = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 27, 0, 3)).setObjects(("ATM-MIB", "atmInterfaceDs3PlcpAlarmState"))
if mibBuilder.loadTexts: tAtmPlcpSubLayerDown.setStatus('current')
if mibBuilder.loadTexts: tAtmPlcpSubLayerDown.setDescription('The tAtmPlcpSubLayerDown notification is generated when the ATM interface indicates that PLCP is currently in the far end alarm or incoming LOF defect maintenance state.')
tAtmPlcpSubLayerClear = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 27, 0, 4)).setObjects(("ATM-MIB", "atmInterfaceDs3PlcpAlarmState"))
if mibBuilder.loadTexts: tAtmPlcpSubLayerClear.setStatus('current')
if mibBuilder.loadTexts: tAtmPlcpSubLayerClear.setDescription('The tAtmPlcpSubLayerClear notification is generated when the ATM interface indicates that PLCP is currently not in the far end alarm or incoming LOF defect maintenance state.')
tAtmEpOutOfPeerVpiOrVciRange = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 27, 0, 5)).setObjects(("ATM-MIB", "atmInterfaceCurrentMaxVpiBits"), ("ATM-MIB", "atmInterfaceCurrentMaxVciBits"), ("ATM-MIB", "atmInterfaceMaxActiveVpiBits"), ("ATM-MIB", "atmInterfaceMaxActiveVciBits"))
if mibBuilder.loadTexts: tAtmEpOutOfPeerVpiOrVciRange.setStatus('current')
if mibBuilder.loadTexts: tAtmEpOutOfPeerVpiOrVciRange.setDescription('The tAtmEpOutOfPeerVpiOrVciRange notification is sent whenever an ILMI link becomes operationally up and ATM EPs are configured on the ILMI-managed interface that are outside the VPI or VCI range allowed by the peer.')
tAtmMaxPeerVccsExceeded = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 27, 0, 6)).setObjects(("TIMETRA-ATM-MIB", "tAtmIntfCurrentMaxVccs"), ("ATM-MIB", "atmInterfaceConfVccs"))
if mibBuilder.loadTexts: tAtmMaxPeerVccsExceeded.setStatus('current')
if mibBuilder.loadTexts: tAtmMaxPeerVccsExceeded.setDescription('The tAtmMaxPeerVccsExceeded notification is sent whenever an ILMI link becomes operationally up and there are more ATM VCLs configured on the ILMI-managed interface than are supported by the peer.')
tAtmMaxPeerVpcsExceeded = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 27, 0, 7)).setObjects(("TIMETRA-ATM-MIB", "tAtmIntfCurrentMaxVpcs"), ("ATM-MIB", "atmInterfaceConfVpcs"))
if mibBuilder.loadTexts: tAtmMaxPeerVpcsExceeded.setStatus('current')
if mibBuilder.loadTexts: tAtmMaxPeerVpcsExceeded.setDescription('The tAtmMaxPeerVpcsExceeded notification is sent whenever an ILMI link becomes operationally up and there are more ATM VPLs configured on the ILMI-managed interface than are supported by the peer.')
tAtmIlmiLinkStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 27, 0, 8)).setObjects(("TIMETRA-ATM-MIB", "tAtmIlmiLinkAdminStatus"), ("TIMETRA-ATM-MIB", "tAtmIlmiLinkOperStatus"), ("TIMETRA-ATM-MIB", "tAtmIlmiLinkVpi"), ("TIMETRA-ATM-MIB", "tAtmIlmiLinkVci"))
if mibBuilder.loadTexts: tAtmIlmiLinkStatusChange.setStatus('current')
if mibBuilder.loadTexts: tAtmIlmiLinkStatusChange.setDescription("The tAtmIlmiLinkStatusChange notification is sent whenever a status change occurs on an ILMI link. This includes changes to the ILMI link's administrative status and the ILMI link's operational status.")
tmnxAtmMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 27, 1))
tmnxAtmMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 27, 2))
tAtmMIBV4v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 27, 1, 3)).setObjects(("TIMETRA-ATM-MIB", "tmnxAtmIntfConfV4v0Group"), ("TIMETRA-ATM-MIB", "tmnxAtmIntfStatsV4v0Group"), ("TIMETRA-ATM-MIB", "tmnxAtmIfcInfoGroup"), ("TIMETRA-ATM-MIB", "tmnxAtmVclInfoGroup"), ("TIMETRA-ATM-MIB", "tmnxAtmVclStatisticsGroup"), ("TIMETRA-ATM-MIB", "tmnxAtmAal5VccStatisticsGroup"), ("TIMETRA-ATM-MIB", "tmnxAtmCellVclStatisticsGroup"), ("TIMETRA-ATM-MIB", "tmnxAtmVplInfoGroup"), ("TIMETRA-ATM-MIB", "tmnxAtmVplStatisticsGroup"), ("TIMETRA-ATM-MIB", "tmnxAtmVtlInfoGroup"), ("TIMETRA-ATM-MIB", "tmnxAtmVtlStatisticsGroup"), ("TIMETRA-ATM-MIB", "tmnxAtmIfcStatisticsGroup"), ("TIMETRA-ATM-MIB", "tmnxAtmSysConfV4v0Group"), ("TIMETRA-ATM-MIB", "tmnxAtmIlmiLinkGroup"), ("TIMETRA-ATM-MIB", "tmnxAtmIlmiStatisticsGroup"), ("TIMETRA-ATM-MIB", "tmnxAtmTCSublayerGroup"), ("TIMETRA-ATM-MIB", "tmnxAtmNotificationsR4r0Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tAtmMIBV4v0Compliance = tAtmMIBV4v0Compliance.setStatus('obsolete')
if mibBuilder.loadTexts: tAtmMIBV4v0Compliance.setDescription('The compliance statement for revision 4.0 of TIMETRA-ATM-MIB.')
tAtmMIBV9v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 27, 1, 4)).setObjects(("TIMETRA-ATM-MIB", "tmnxAtmIntfConfV4v0Group"), ("TIMETRA-ATM-MIB", "tmnxAtmIntfStatsV4v0Group"), ("TIMETRA-ATM-MIB", "tmnxAtmIfcInfoGroup"), ("TIMETRA-ATM-MIB", "tmnxAtmVclInfoGroup"), ("TIMETRA-ATM-MIB", "tmnxAtmVclInfoGroupV9v0"), ("TIMETRA-ATM-MIB", "tmnxAtmVclStatisticsGroup"), ("TIMETRA-ATM-MIB", "tmnxAtmAal5VccStatisticsGroup"), ("TIMETRA-ATM-MIB", "tmnxAtmCellVclStatisticsGroup"), ("TIMETRA-ATM-MIB", "tmnxAtmVplInfoGroup"), ("TIMETRA-ATM-MIB", "tmnxAtmVplStatisticsGroup"), ("TIMETRA-ATM-MIB", "tmnxAtmVtlInfoGroup"), ("TIMETRA-ATM-MIB", "tmnxAtmVtlStatisticsGroup"), ("TIMETRA-ATM-MIB", "tmnxAtmIfcStatisticsGroup"), ("TIMETRA-ATM-MIB", "tmnxAtmSysConfV4v0Group"), ("TIMETRA-ATM-MIB", "tmnxAtmIlmiLinkGroup"), ("TIMETRA-ATM-MIB", "tmnxAtmIlmiStatisticsGroup"), ("TIMETRA-ATM-MIB", "tmnxAtmTCSublayerGroup"), ("TIMETRA-ATM-MIB", "tmnxAtmNotificationsR4r0Group"), ("TIMETRA-ATM-MIB", "tmnxAtmCpStatisticsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tAtmMIBV9v0Compliance = tAtmMIBV9v0Compliance.setStatus('current')
if mibBuilder.loadTexts: tAtmMIBV9v0Compliance.setDescription('The compliance statement for revision 9.0 of TIMETRA-ATM-MIB.')
tmnxAtmVclInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 27, 2, 6)).setObjects(("TIMETRA-ATM-MIB", "tAtmVclInfoOwner"), ("TIMETRA-ATM-MIB", "tAtmVclInfoOamStatus"), ("TIMETRA-ATM-MIB", "tAtmVclInfoIlmiStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxAtmVclInfoGroup = tmnxAtmVclInfoGroup.setStatus('current')
if mibBuilder.loadTexts: tmnxAtmVclInfoGroup.setDescription('The group of objects providing for management access of ATM VCL status information on Alcatel-Lucent SROS series systems.')
tmnxAtmVclStatisticsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 27, 2, 7)).setObjects(("TIMETRA-ATM-MIB", "tAtmVclStatsTotalCellsRxd"), ("TIMETRA-ATM-MIB", "tAtmVclStatsTotalCellsTxd"), ("TIMETRA-ATM-MIB", "tAtmVclStatsTotalBytesTxd"), ("TIMETRA-ATM-MIB", "tAtmVclStatsTotalBytesRxd"), ("TIMETRA-ATM-MIB", "tAtmOamVclStatsAISCellsTxd"), ("TIMETRA-ATM-MIB", "tAtmOamVclStatsRDICellsTxd"), ("TIMETRA-ATM-MIB", "tAtmOamVclStatsLoopbackCellsTxd"), ("TIMETRA-ATM-MIB", "tAtmOamVclStatsAISCellsRxd"), ("TIMETRA-ATM-MIB", "tAtmOamVclStatsRDICellsRxd"), ("TIMETRA-ATM-MIB", "tAtmOamVclStatsLoopbackCellsRxd"), ("TIMETRA-ATM-MIB", "tAtmOamVclStatsCrc10Err"), ("TIMETRA-ATM-MIB", "tAtmOamVclStatsOtherCellsRxd"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxAtmVclStatisticsGroup = tmnxAtmVclStatisticsGroup.setStatus('current')
if mibBuilder.loadTexts: tmnxAtmVclStatisticsGroup.setDescription('The group of objects providing for management access of ATM VCL statistics on Alcatel-Lucent SROS series systems.')
tmnxAtmAal5VccStatisticsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 27, 2, 8)).setObjects(("TIMETRA-ATM-MIB", "tAal5VccStatsPacketsRxd"), ("TIMETRA-ATM-MIB", "tAal5VccStatsPacketsTxd"), ("TIMETRA-ATM-MIB", "tAal5VccStatsDrpPacketsRxd"), ("TIMETRA-ATM-MIB", "tAal5VccStatsDrpPacketsTxd"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxAtmAal5VccStatisticsGroup = tmnxAtmAal5VccStatisticsGroup.setStatus('current')
if mibBuilder.loadTexts: tmnxAtmAal5VccStatisticsGroup.setDescription('The group of objects providing for management access of AAL-5 VCC statistics on Alcatel-Lucent SROS series systems.')
tmnxAtmCellVclStatisticsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 27, 2, 9)).setObjects(("TIMETRA-ATM-MIB", "tAtmCellVclStatsClp0CellsRxd"), ("TIMETRA-ATM-MIB", "tAtmCellVclStatsClp0CellsTxd"), ("TIMETRA-ATM-MIB", "tAtmCellVclStatsDrpCellsRxd"), ("TIMETRA-ATM-MIB", "tAtmCellVclStatsDrpClp0CellsRxd"), ("TIMETRA-ATM-MIB", "tAtmCellVclStatsDrpClp0CellsTxd"), ("TIMETRA-ATM-MIB", "tAtmCellVclStatsTagCells"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxAtmCellVclStatisticsGroup = tmnxAtmCellVclStatisticsGroup.setStatus('current')
if mibBuilder.loadTexts: tmnxAtmCellVclStatisticsGroup.setDescription('The group of objects providing for management access of cell mode VCC statistics on Alcatel-Lucent SROS series systems.')
tmnxAtmVplInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 27, 2, 11)).setObjects(("TIMETRA-ATM-MIB", "tAtmVplInfoOwner"), ("TIMETRA-ATM-MIB", "tAtmVplInfoOamStatus"), ("TIMETRA-ATM-MIB", "tAtmVplInfoIlmiStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxAtmVplInfoGroup = tmnxAtmVplInfoGroup.setStatus('current')
if mibBuilder.loadTexts: tmnxAtmVplInfoGroup.setDescription('The group of objects providing for management access of ATM VPL status information on Alcatel-Lucent SROS series systems.')
tmnxAtmVplStatisticsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 27, 2, 12)).setObjects(("TIMETRA-ATM-MIB", "tAtmVplStatsTotalCellsRxd"), ("TIMETRA-ATM-MIB", "tAtmVplStatsTotalClp0CellsRxd"), ("TIMETRA-ATM-MIB", "tAtmVplStatsTotalCellsTxd"), ("TIMETRA-ATM-MIB", "tAtmVplStatsTotalClp0CellsTxd"), ("TIMETRA-ATM-MIB", "tAtmVplStatsTotalBytesTxd"), ("TIMETRA-ATM-MIB", "tAtmVplStatsTotalBytesRxd"), ("TIMETRA-ATM-MIB", "tAtmVplStatsDrpCellsRxd"), ("TIMETRA-ATM-MIB", "tAtmVplStatsDrpClp0CellsRxd"), ("TIMETRA-ATM-MIB", "tAtmVplStatsDrpClp0CellsTxd"), ("TIMETRA-ATM-MIB", "tAtmVplStatsTagCells"), ("TIMETRA-ATM-MIB", "tAtmOamVplStatsAISCellsTxd"), ("TIMETRA-ATM-MIB", "tAtmOamVplStatsRDICellsTxd"), ("TIMETRA-ATM-MIB", "tAtmOamVplStatsLoopbackCellsTxd"), ("TIMETRA-ATM-MIB", "tAtmOamVplStatsAISCellsRxd"), ("TIMETRA-ATM-MIB", "tAtmOamVplStatsRDICellsRxd"), ("TIMETRA-ATM-MIB", "tAtmOamVplStatsLoopbackCellsRxd"), ("TIMETRA-ATM-MIB", "tAtmOamVplStatsCrc10Errors"), ("TIMETRA-ATM-MIB", "tAtmOamVplStatsOtherCellsRxd"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxAtmVplStatisticsGroup = tmnxAtmVplStatisticsGroup.setStatus('current')
if mibBuilder.loadTexts: tmnxAtmVplStatisticsGroup.setDescription('The group of objects providing for management access of ATM VPL statistics on Alcatel-Lucent SROS series systems.')
tmnxAtmVtlInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 27, 2, 13)).setObjects(("TIMETRA-ATM-MIB", "tAtmVtlAdminStatus"), ("TIMETRA-ATM-MIB", "tAtmVtlOperStatus"), ("TIMETRA-ATM-MIB", "tAtmVtlLastChange"), ("TIMETRA-ATM-MIB", "tAtmVtlReceiveTrafficDescrIndex"), ("TIMETRA-ATM-MIB", "tAtmVtlTransmitTrafficDescrIndex"), ("TIMETRA-ATM-MIB", "tAtmVtlRowStatus"), ("TIMETRA-ATM-MIB", "tAtmVtlCastType"), ("TIMETRA-ATM-MIB", "tAtmVtlConnKind"), ("TIMETRA-ATM-MIB", "tAtmVtlInfoOwner"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxAtmVtlInfoGroup = tmnxAtmVtlInfoGroup.setStatus('current')
if mibBuilder.loadTexts: tmnxAtmVtlInfoGroup.setDescription('The group of objects providing for management access of ATM VTL status information on Alcatel-Lucent SROS series systems.')
tmnxAtmVtlStatisticsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 27, 2, 14)).setObjects(("TIMETRA-ATM-MIB", "tAtmVtlStatsTotalCellsRxd"), ("TIMETRA-ATM-MIB", "tAtmVtlStatsTotalClp0CellsRxd"), ("TIMETRA-ATM-MIB", "tAtmVtlStatsTotalCellsTxd"), ("TIMETRA-ATM-MIB", "tAtmVtlStatsTotalClp0CellsTxd"), ("TIMETRA-ATM-MIB", "tAtmVtlStatsTotalBytesTxd"), ("TIMETRA-ATM-MIB", "tAtmVtlStatsTotalBytesRxd"), ("TIMETRA-ATM-MIB", "tAtmVtlStatsDrpCellsRxd"), ("TIMETRA-ATM-MIB", "tAtmVtlStatsDrpClp0CellsRxd"), ("TIMETRA-ATM-MIB", "tAtmVtlStatsDrpClp0CellsTxd"), ("TIMETRA-ATM-MIB", "tAtmVtlStatsTagCells"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxAtmVtlStatisticsGroup = tmnxAtmVtlStatisticsGroup.setStatus('current')
if mibBuilder.loadTexts: tmnxAtmVtlStatisticsGroup.setDescription('The group of objects providing for management access of ATM VTL statistics on Alcatel-Lucent SROS series systems.')
tmnxAtmIfcInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 27, 2, 15)).setObjects(("TIMETRA-ATM-MIB", "tAtmIfcAdminStatus"), ("TIMETRA-ATM-MIB", "tAtmIfcOperStatus"), ("TIMETRA-ATM-MIB", "tAtmIfcLastChange"), ("TIMETRA-ATM-MIB", "tAtmIfcReceiveTrafficDescrIndex"), ("TIMETRA-ATM-MIB", "tAtmIfcTransmitTrafficDescrIndex"), ("TIMETRA-ATM-MIB", "tAtmIfcRowStatus"), ("TIMETRA-ATM-MIB", "tAtmIfcCastType"), ("TIMETRA-ATM-MIB", "tAtmIfcConnKind"), ("TIMETRA-ATM-MIB", "tAtmIfcInfoOwner"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxAtmIfcInfoGroup = tmnxAtmIfcInfoGroup.setStatus('current')
if mibBuilder.loadTexts: tmnxAtmIfcInfoGroup.setDescription('The group of objects providing for management access of ATM IFC status information on Alcatel-Lucent SROS series systems.')
tmnxAtmIfcStatisticsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 27, 2, 16)).setObjects(("TIMETRA-ATM-MIB", "tAtmIfcStatsTotalCellsRxd"), ("TIMETRA-ATM-MIB", "tAtmIfcStatsTotalClp0CellsRxd"), ("TIMETRA-ATM-MIB", "tAtmIfcStatsTotalCellsTxd"), ("TIMETRA-ATM-MIB", "tAtmIfcStatsTotalClp0CellsTxd"), ("TIMETRA-ATM-MIB", "tAtmIfcStatsTotalBytesTxd"), ("TIMETRA-ATM-MIB", "tAtmIfcStatsTotalBytesRxd"), ("TIMETRA-ATM-MIB", "tAtmIfcStatsDrpCellsRxd"), ("TIMETRA-ATM-MIB", "tAtmIfcStatsDrpClp0CellsRxd"), ("TIMETRA-ATM-MIB", "tAtmIfcStatsDrpClp0CellsTxd"), ("TIMETRA-ATM-MIB", "tAtmIfcStatsTagCells"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxAtmIfcStatisticsGroup = tmnxAtmIfcStatisticsGroup.setStatus('current')
if mibBuilder.loadTexts: tmnxAtmIfcStatisticsGroup.setDescription('The group of objects providing for management access of ATM IFC statistics on Alcatel-Lucent SROS series systems.')
tmnxAtmObsoleteV3v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 27, 2, 17)).setObjects(("TIMETRA-ATM-MIB", "tAtmMdaMaxSupportedVpcs"), ("TIMETRA-ATM-MIB", "tAtmMdaMaxSupportedVccs"), ("TIMETRA-ATM-MIB", "tAtmMdaConfiguredVpcs"), ("TIMETRA-ATM-MIB", "tAtmMdaConfiguredVccs"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxAtmObsoleteV3v0Group = tmnxAtmObsoleteV3v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxAtmObsoleteV3v0Group.setDescription('The group of objects providing made obsolete in the 3.0 release')
tmnxAtmIlmiLinkGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 27, 2, 20)).setObjects(("TIMETRA-ATM-MIB", "tAtmIlmiLinkRowStatus"), ("TIMETRA-ATM-MIB", "tAtmIlmiLinkLastChanged"), ("TIMETRA-ATM-MIB", "tAtmIlmiLinkAdminStatus"), ("TIMETRA-ATM-MIB", "tAtmIlmiLinkOperStatus"), ("TIMETRA-ATM-MIB", "tAtmIlmiLinkVpi"), ("TIMETRA-ATM-MIB", "tAtmIlmiLinkVci"), ("TIMETRA-ATM-MIB", "tAtmIlmiLinkFsmState"), ("TIMETRA-ATM-MIB", "tAtmIlmiLinkReceiveTrafficDescrIndex"), ("TIMETRA-ATM-MIB", "tAtmIlmiLinkTransmitTrafficDescrIndex"), ("TIMETRA-ATM-MIB", "tAtmIlmiLinkEstablishConPollIntvl"), ("TIMETRA-ATM-MIB", "tAtmIlmiLinkCheckConPollIntvl"), ("TIMETRA-ATM-MIB", "tAtmIlmiLinkConPollInactFactor"), ("TIMETRA-ATM-MIB", "tAtmIlmiLinkUniType"), ("TIMETRA-ATM-MIB", "tAtmIlmiLinkDeviceType"), ("TIMETRA-ATM-MIB", "tAtmIlmiLinkVersion"), ("TIMETRA-ATM-MIB", "tAtmIlmiLinkImeType"), ("TIMETRA-ATM-MIB", "tAtmIlmiLinkNegotiatedVersion"), ("TIMETRA-ATM-MIB", "tAtmIlmiLinkNegotiatedImeType"), ("TIMETRA-ATM-MIB", "tAtmIlmiLinkNeighborIfIdentifier"), ("TIMETRA-ATM-MIB", "tAtmIlmiLinkNeighborSystemIdentifier"), ("TIMETRA-ATM-MIB", "tAtmIlmiLinkNeighborUniType"), ("TIMETRA-ATM-MIB", "tAtmIlmiLinkNeighborDeviceType"), ("TIMETRA-ATM-MIB", "tAtmIlmiLinkNeighborVersion"), ("TIMETRA-ATM-MIB", "tAtmIlmiLinkNeighborMaxVpcs"), ("TIMETRA-ATM-MIB", "tAtmIlmiLinkNeighborMaxVccs"), ("TIMETRA-ATM-MIB", "tAtmIlmiLinkNeighborMaxVpiBits"), ("TIMETRA-ATM-MIB", "tAtmIlmiLinkNeighborMaxVciBits"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxAtmIlmiLinkGroup = tmnxAtmIlmiLinkGroup.setStatus('current')
if mibBuilder.loadTexts: tmnxAtmIlmiLinkGroup.setDescription('The group of objects providing for management of each ILMI link on Alcatel-Lucent SROS series systems.')
tmnxAtmIlmiStatisticsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 27, 2, 21)).setObjects(("TIMETRA-ATM-MIB", "tAtmIlmiLinkOutPdus"), ("TIMETRA-ATM-MIB", "tAtmIlmiLinkOutGetRequestPdus"), ("TIMETRA-ATM-MIB", "tAtmIlmiLinkOutGetNextRequestPdus"), ("TIMETRA-ATM-MIB", "tAtmIlmiLinkOutSetRequestPdus"), ("TIMETRA-ATM-MIB", "tAtmIlmiLinkOutGetResponsePdus"), ("TIMETRA-ATM-MIB", "tAtmIlmiLinkOutTrapPdus"), ("TIMETRA-ATM-MIB", "tAtmIlmiLinkOutTooBigErrors"), ("TIMETRA-ATM-MIB", "tAtmIlmiLinkOutNoSuchNameErrors"), ("TIMETRA-ATM-MIB", "tAtmIlmiLinkOutBadValueErrors"), ("TIMETRA-ATM-MIB", "tAtmIlmiLinkOutReadOnlyErrors"), ("TIMETRA-ATM-MIB", "tAtmIlmiLinkOutGeneralErrors"), ("TIMETRA-ATM-MIB", "tAtmIlmiLinkInPdus"), ("TIMETRA-ATM-MIB", "tAtmIlmiLinkInGetRequestPdus"), ("TIMETRA-ATM-MIB", "tAtmIlmiLinkInGetNextRequestPdus"), ("TIMETRA-ATM-MIB", "tAtmIlmiLinkInSetRequestPdus"), ("TIMETRA-ATM-MIB", "tAtmIlmiLinkInGetResponsePdus"), ("TIMETRA-ATM-MIB", "tAtmIlmiLinkInTrapPdus"), ("TIMETRA-ATM-MIB", "tAtmIlmiLinkInTooBigErrors"), ("TIMETRA-ATM-MIB", "tAtmIlmiLinkInNoSuchNameErrors"), ("TIMETRA-ATM-MIB", "tAtmIlmiLinkInBadValueErrors"), ("TIMETRA-ATM-MIB", "tAtmIlmiLinkInReadOnlyErrors"), ("TIMETRA-ATM-MIB", "tAtmIlmiLinkInGeneralErrors"), ("TIMETRA-ATM-MIB", "tAtmIlmiLinkInInvalidSnmpVersionPdus"), ("TIMETRA-ATM-MIB", "tAtmIlmiLinkInInvalidSnmpCommunityStringPdus"), ("TIMETRA-ATM-MIB", "tAtmIlmiLinkInInvalidSnmpFormatPdus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxAtmIlmiStatisticsGroup = tmnxAtmIlmiStatisticsGroup.setStatus('current')
if mibBuilder.loadTexts: tmnxAtmIlmiStatisticsGroup.setDescription('The group of objects providing for management access of ILMI statistics on Alcatel-Lucent SROS series systems.')
tmnxAtmNotificationsR4r0Group = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 27, 2, 22)).setObjects(("TIMETRA-ATM-MIB", "tAtmTcSubLayerDown"), ("TIMETRA-ATM-MIB", "tAtmTcSubLayerClear"), ("TIMETRA-ATM-MIB", "tAtmPlcpSubLayerDown"), ("TIMETRA-ATM-MIB", "tAtmPlcpSubLayerClear"), ("TIMETRA-ATM-MIB", "tAtmEpOutOfPeerVpiOrVciRange"), ("TIMETRA-ATM-MIB", "tAtmMaxPeerVccsExceeded"), ("TIMETRA-ATM-MIB", "tAtmMaxPeerVpcsExceeded"), ("TIMETRA-ATM-MIB", "tAtmIlmiLinkStatusChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxAtmNotificationsR4r0Group = tmnxAtmNotificationsR4r0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxAtmNotificationsR4r0Group.setDescription('The group of notifications providing for indications of ATM-related events on Alcatel-Lucent SROS series systems.')
tmnxAtmIntfConfV4v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 27, 2, 23)).setObjects(("TIMETRA-ATM-MIB", "tAtmIntfCurrentMaxVpcs"), ("TIMETRA-ATM-MIB", "tAtmIntfCurrentMaxVccs"), ("TIMETRA-ATM-MIB", "tAtmIntfTotalIngrCbrBandwidth"), ("TIMETRA-ATM-MIB", "tAtmIntfTotalIngrRtVbrBandwidth"), ("TIMETRA-ATM-MIB", "tAtmIntfTotalIngrNrtVbrBandwidth"), ("TIMETRA-ATM-MIB", "tAtmIntfTotalIngrUbrBandwidth"), ("TIMETRA-ATM-MIB", "tAtmIntfTotalEgrCbrBandwidth"), ("TIMETRA-ATM-MIB", "tAtmIntfTotalEgrRtVbrBandwidth"), ("TIMETRA-ATM-MIB", "tAtmIntfTotalEgrNrtVbrBandwidth"), ("TIMETRA-ATM-MIB", "tAtmIntfTotalEgrUbrBandwidth"), ("TIMETRA-ATM-MIB", "tAtmIntfBandwidth"), ("TIMETRA-ATM-MIB", "tAtmIntfShapedBandwidth"), ("TIMETRA-ATM-MIB", "tAtmIntfLastUnknVpi"), ("TIMETRA-ATM-MIB", "tAtmIntfLastUnknVci"), ("TIMETRA-ATM-MIB", "tAtmIntfOperStatus"), ("TIMETRA-ATM-MIB", "tAtmIntfConfVtcs"), ("TIMETRA-ATM-MIB", "tAtmIntfConfIfcs"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxAtmIntfConfV4v0Group = tmnxAtmIntfConfV4v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxAtmIntfConfV4v0Group.setDescription('The group of objects providing for management of each ATM interface on Alcatel-Lucent SROS series systems release 4.0.')
tmnxAtmSysConfV4v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 27, 2, 24)).setObjects(("TIMETRA-ATM-MIB", "tAtmSysLlid"), ("TIMETRA-ATM-MIB", "tAtmSysOamRetryUp"), ("TIMETRA-ATM-MIB", "tAtmSysOamRetryDown"), ("TIMETRA-ATM-MIB", "tAtmSysOamLoopbackPeriod"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxAtmSysConfV4v0Group = tmnxAtmSysConfV4v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxAtmSysConfV4v0Group.setDescription('The group of objects providing for management access of ATM system level configurations on Alcatel-Lucent SROS series systems release 4.0.')
tmnxAtmIntfStatsV4v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 27, 2, 25)).setObjects(("TIMETRA-ATM-MIB", "tAtmIntfStatsTotalCellsRxd"), ("TIMETRA-ATM-MIB", "tAtmIntfStatsTotalCellsTxd"), ("TIMETRA-ATM-MIB", "tAtmIntfStatsTotalBytesRxd"), ("TIMETRA-ATM-MIB", "tAtmIntfStatsTotalBytesTxd"), ("TIMETRA-ATM-MIB", "tAtmIntfStatsTotalUnknCellsDrp"), ("TIMETRA-ATM-MIB", "tAtmIntfAal5StatsTotalPktsRxd"), ("TIMETRA-ATM-MIB", "tAtmIntfAal5StatsTotalPktsTxd"), ("TIMETRA-ATM-MIB", "tAtmIntfAal5StatsTotalPktsDrpRxd"), ("TIMETRA-ATM-MIB", "tAtmIntfAal5StatsTotalPktsDrpTxd"), ("TIMETRA-ATM-MIB", "tAtmIntfAal5StatsTotalCrc32Err"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxAtmIntfStatsV4v0Group = tmnxAtmIntfStatsV4v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxAtmIntfStatsV4v0Group.setDescription('The group of objects providing for management access of ATM interface statistics on Alcatel-Lucent SROS series systems release 4.0.')
tmnxAtmTCSublayerGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 27, 2, 26)).setObjects(("TIMETRA-ATM-MIB", "tAtmTCSublayerHecErrors"), ("TIMETRA-ATM-MIB", "tAtmTCSublayerHecErrorsFixed"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxAtmTCSublayerGroup = tmnxAtmTCSublayerGroup.setStatus('current')
if mibBuilder.loadTexts: tmnxAtmTCSublayerGroup.setDescription('The group of objects providing for management access of an ATM TC Sublayer on Alcatel-Lucent SROS series systems.')
tmnxAtmObsoleteV4v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 27, 2, 27)).setObjects(("TIMETRA-ATM-MIB", "tAtmIntfStatsTotalHecErr"), ("TIMETRA-ATM-MIB", "tAtmIntfStatsTotalHecErrFixed"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxAtmObsoleteV4v0Group = tmnxAtmObsoleteV4v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxAtmObsoleteV4v0Group.setDescription('The group of objects providing made obsolete in the 4.0 release')
tmnxAtmCpStatisticsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 27, 2, 28)).setObjects(("TIMETRA-ATM-MIB", "tAtmCpStatsTotalCellsRxd"), ("TIMETRA-ATM-MIB", "tAtmCpStatsTotalCellsRxdLo"), ("TIMETRA-ATM-MIB", "tAtmCpStatsTotalCellsRxdHi"), ("TIMETRA-ATM-MIB", "tAtmCpStatsTotalCellsTxd"), ("TIMETRA-ATM-MIB", "tAtmCpStatsTotalCellsTxdLo"), ("TIMETRA-ATM-MIB", "tAtmCpStatsTotalCellsTxdHi"), ("TIMETRA-ATM-MIB", "tAtmCpStatsClp0CellsRxd"), ("TIMETRA-ATM-MIB", "tAtmCpStatsClp0CellsRxdLo"), ("TIMETRA-ATM-MIB", "tAtmCpStatsClp0CellsRxdHi"), ("TIMETRA-ATM-MIB", "tAtmCpStatsClp0CellsTxd"), ("TIMETRA-ATM-MIB", "tAtmCpStatsClp0CellsTxdLo"), ("TIMETRA-ATM-MIB", "tAtmCpStatsClp0CellsTxdHi"), ("TIMETRA-ATM-MIB", "tAtmCpStatsDrpCellsRxd"), ("TIMETRA-ATM-MIB", "tAtmCpStatsDrpClp0CellsRxd"), ("TIMETRA-ATM-MIB", "tAtmCpStatsDrpClp0CellsTxd"), ("TIMETRA-ATM-MIB", "tAtmCpStatsTagCells"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxAtmCpStatisticsGroup = tmnxAtmCpStatisticsGroup.setStatus('current')
if mibBuilder.loadTexts: tmnxAtmCpStatisticsGroup.setDescription('The group of objects providing for management access of ATM CP statistics on Alcatel-Lucent SROS series systems.')
tmnxAtmVclInfoGroupV9v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 27, 2, 29)).setObjects(("TIMETRA-ATM-MIB", "tAtmVclInfoRxTrafficDescrIdOvr"), ("TIMETRA-ATM-MIB", "tAtmVclInfoTxTrafficDescrIdOvr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxAtmVclInfoGroupV9v0 = tmnxAtmVclInfoGroupV9v0.setStatus('current')
if mibBuilder.loadTexts: tmnxAtmVclInfoGroupV9v0.setDescription('The group of objects providing for management access of ATM VCL status information that were added in release 9.0 of Alcatel-Lucent SROS series systems.')
mibBuilder.exportSymbols("TIMETRA-ATM-MIB", tAtmMIBV4v0Compliance=tAtmMIBV4v0Compliance, tAtmIntfConfTable=tAtmIntfConfTable, tAtmIfcStatisticsTable=tAtmIfcStatisticsTable, tAtmIlmiLinkRowStatus=tAtmIlmiLinkRowStatus, AtmLlid=AtmLlid, tAtmIntfTotalEgrCbrBandwidth=tAtmIntfTotalEgrCbrBandwidth, tAtmOamVclStatsRDICellsRxd=tAtmOamVclStatsRDICellsRxd, tAtmIlmiLinkNeighborUniType=tAtmIlmiLinkNeighborUniType, tAtmCpStatsClp0CellsTxdHi=tAtmCpStatsClp0CellsTxdHi, tAtmIlmiLinkConPollInactFactor=tAtmIlmiLinkConPollInactFactor, tmnxAtmObsoleteV3v0Group=tmnxAtmObsoleteV3v0Group, tAtmIntfStatsTable=tAtmIntfStatsTable, tAtmVclObjs=tAtmVclObjs, tAtmIfcRowStatus=tAtmIfcRowStatus, tAtmIfcReceiveTrafficDescrIndex=tAtmIfcReceiveTrafficDescrIndex, tAtmCpStatisticsEntry=tAtmCpStatisticsEntry, tAtmVclStatsTotalBytesRxd=tAtmVclStatsTotalBytesRxd, tAtmSysOamRetryDown=tAtmSysOamRetryDown, tAtmIlmiLinkImeType=tAtmIlmiLinkImeType, tAtmVtlInfoOwner=tAtmVtlInfoOwner, tAtmCpObjs=tAtmCpObjs, tAtmMaxPeerVccsExceeded=tAtmMaxPeerVccsExceeded, tAtmVclInfoOwner=tAtmVclInfoOwner, tAtmIntfAal5StatsTotalPktsDrpRxd=tAtmIntfAal5StatsTotalPktsDrpRxd, tAtmIfcStatsTotalCellsTxd=tAtmIfcStatsTotalCellsTxd, AtmIlmiLinkDeviceType=AtmIlmiLinkDeviceType, tAtmIlmiLinkInReadOnlyErrors=tAtmIlmiLinkInReadOnlyErrors, tAtmIlmiLinkTable=tAtmIlmiLinkTable, tAtmIlmiLinkInInvalidSnmpCommunityStringPdus=tAtmIlmiLinkInInvalidSnmpCommunityStringPdus, tAtmIfcStatsTotalClp0CellsRxd=tAtmIfcStatsTotalClp0CellsRxd, tAtmIntfLastUnknVci=tAtmIntfLastUnknVci, tAal5VccStatisticsEntry=tAal5VccStatisticsEntry, tAtmIlmiLinkAdminStatus=tAtmIlmiLinkAdminStatus, tAtmVclStatisticsEntry=tAtmVclStatisticsEntry, tAtmIlmiLinkNeighborDeviceType=tAtmIlmiLinkNeighborDeviceType, tmnxAtmVplInfoGroup=tmnxAtmVplInfoGroup, tAtmVplStatsTotalClp0CellsRxd=tAtmVplStatsTotalClp0CellsRxd, tmnxAtmIlmiStatisticsGroup=tmnxAtmIlmiStatisticsGroup, tAal5VccStatsDrpPacketsTxd=tAal5VccStatsDrpPacketsTxd, tAtmIlmiLinkVpi=tAtmIlmiLinkVpi, tAtmMdaMaxSupportedVpcs=tAtmMdaMaxSupportedVpcs, tAtmVtlStatsDrpClp0CellsTxd=tAtmVtlStatsDrpClp0CellsTxd, tAtmIlmiLinkInInvalidSnmpFormatPdus=tAtmIlmiLinkInInvalidSnmpFormatPdus, tAtmCpStatisticsTable=tAtmCpStatisticsTable, tmnxAtmIfcInfoGroup=tmnxAtmIfcInfoGroup, tAtmIntfTotalIngrCbrBandwidth=tAtmIntfTotalIngrCbrBandwidth, tAtmCpStatsDrpClp0CellsTxd=tAtmCpStatsDrpClp0CellsTxd, tAtmIntfTotalEgrUbrBandwidth=tAtmIntfTotalEgrUbrBandwidth, tAtmIlmiLinkEstablishConPollIntvl=tAtmIlmiLinkEstablishConPollIntvl, tAtmVplStatsDrpClp0CellsTxd=tAtmVplStatsDrpClp0CellsTxd, AtmOamStatus=AtmOamStatus, tAtmIlmiLinkObjs=tAtmIlmiLinkObjs, tAtmOamVclStatsRDICellsTxd=tAtmOamVclStatsRDICellsTxd, tAtmVplInfoOwner=tAtmVplInfoOwner, tAtmIlmiLinkInInvalidSnmpVersionPdus=tAtmIlmiLinkInInvalidSnmpVersionPdus, tAtmCellVclStatsClp0CellsRxd=tAtmCellVclStatsClp0CellsRxd, tAal5VccStatsDrpPacketsRxd=tAal5VccStatsDrpPacketsRxd, tAal5VccStatsPacketsRxd=tAal5VccStatsPacketsRxd, tmnxAtmIfcStatisticsGroup=tmnxAtmIfcStatisticsGroup, tAtmObjs=tAtmObjs, tAtmIfcStatsDrpCellsRxd=tAtmIfcStatsDrpCellsRxd, tAtmIntfTotalIngrUbrBandwidth=tAtmIntfTotalIngrUbrBandwidth, tAtmIfcTransmitTrafficDescrIndex=tAtmIfcTransmitTrafficDescrIndex, tAtmIlmiLinkNeighborMaxVpiBits=tAtmIlmiLinkNeighborMaxVpiBits, tAtmVclStatisticsTable=tAtmVclStatisticsTable, tAtmIlmiLinkNeighborMaxVciBits=tAtmIlmiLinkNeighborMaxVciBits, tAtmIlmiLinkDeviceType=tAtmIlmiLinkDeviceType, tAtmIlmiLinkNeighborSystemIdentifier=tAtmIlmiLinkNeighborSystemIdentifier, tAtmIntfStatsTotalUnknCellsDrp=tAtmIntfStatsTotalUnknCellsDrp, tAtmIlmiLinkUniType=tAtmIlmiLinkUniType, tAtmOamVclStatisticsTable=tAtmOamVclStatisticsTable, tAtmIntfAal5StatsEntry=tAtmIntfAal5StatsEntry, tAtmVplObjs=tAtmVplObjs, tAtmIlmiLinkStatusChange=tAtmIlmiLinkStatusChange, tAtmVtlStatsTotalCellsRxd=tAtmVtlStatsTotalCellsRxd, tAtmIlmiLinkNegotiatedVersion=tAtmIlmiLinkNegotiatedVersion, tAtmIfcStatsTotalBytesRxd=tAtmIfcStatsTotalBytesRxd, tAtmIntfStatsTotalCellsRxd=tAtmIntfStatsTotalCellsRxd, tAtmVtlStatsTotalBytesRxd=tAtmVtlStatsTotalBytesRxd, tAtmIntfTotalEgrRtVbrBandwidth=tAtmIntfTotalEgrRtVbrBandwidth, tmnxAtmCpStatisticsGroup=tmnxAtmCpStatisticsGroup, tAtmVtlCastType=tAtmVtlCastType, tAtmIlmiLinkOutNoSuchNameErrors=tAtmIlmiLinkOutNoSuchNameErrors, tAtmOamVclStatsCrc10Err=tAtmOamVclStatsCrc10Err, tAtmIlmiLinkTransmitTrafficDescrIndex=tAtmIlmiLinkTransmitTrafficDescrIndex, tAtmIlmiLinkEntry=tAtmIlmiLinkEntry, tAtmCpStatsClp0CellsTxd=tAtmCpStatsClp0CellsTxd, tAtmTrafficDescObjs=tAtmTrafficDescObjs, tAtmCellVclStatisticsEntry=tAtmCellVclStatisticsEntry, tAtmIntfStatsTotalHecErr=tAtmIntfStatsTotalHecErr, tAtmIlmiLinkInGetRequestPdus=tAtmIlmiLinkInGetRequestPdus, tAtmIlmiLinkInTooBigErrors=tAtmIlmiLinkInTooBigErrors, AtmIlmiStatus=AtmIlmiStatus, tAtmCellVclStatsClp0CellsTxd=tAtmCellVclStatsClp0CellsTxd, tAtmVplStatisticsEntry=tAtmVplStatisticsEntry, tAtmVclStatsTotalCellsRxd=tAtmVclStatsTotalCellsRxd, tAtmIfcInfoEntry=tAtmIfcInfoEntry, tmnxAtmVclInfoGroup=tmnxAtmVclInfoGroup, tAtmCellVclStatsDrpClp0CellsRxd=tAtmCellVclStatsDrpClp0CellsRxd, tAtmIfcInfoTable=tAtmIfcInfoTable, tAtmIfcConnKind=tAtmIfcConnKind, tAtmOamVclStatsLoopbackCellsRxd=tAtmOamVclStatsLoopbackCellsRxd, tAal5VccStatisticsTable=tAal5VccStatisticsTable, tAtmCellVclObjs=tAtmCellVclObjs, tAtmTCSublayerObjs=tAtmTCSublayerObjs, tAtmIntfStatsTotalBytesRxd=tAtmIntfStatsTotalBytesRxd, tAtmOamVplStatsLoopbackCellsRxd=tAtmOamVplStatsLoopbackCellsRxd, tAtmVtlRowStatus=tAtmVtlRowStatus, tAtmIlmiLinkNeighborMaxVccs=tAtmIlmiLinkNeighborMaxVccs, tAtmIlmiLinkOutReadOnlyErrors=tAtmIlmiLinkOutReadOnlyErrors, tAtmTCSublayerEntry=tAtmTCSublayerEntry, tAtmOamVplStatsRDICellsTxd=tAtmOamVplStatsRDICellsTxd, tAtmMIBConformance=tAtmMIBConformance, tAtmVtlAdminStatus=tAtmVtlAdminStatus, tAtmVclInfoEntry=tAtmVclInfoEntry, tAtmVplStatsTotalClp0CellsTxd=tAtmVplStatsTotalClp0CellsTxd, tAtmOamVplStatsOtherCellsRxd=tAtmOamVplStatsOtherCellsRxd, AtmConnectionOwner=AtmConnectionOwner, tAtmVtlTransmitTrafficDescrIndex=tAtmVtlTransmitTrafficDescrIndex, tAtmIntfTotalIngrNrtVbrBandwidth=tAtmIntfTotalIngrNrtVbrBandwidth, tAtmOamVplStatsAISCellsTxd=tAtmOamVplStatsAISCellsTxd, tAtmIlmiLinkReceiveTrafficDescrIndex=tAtmIlmiLinkReceiveTrafficDescrIndex, tAtmIlmiLinkInNoSuchNameErrors=tAtmIlmiLinkInNoSuchNameErrors, tAtmCpStatsTotalCellsRxdHi=tAtmCpStatsTotalCellsRxdHi, AtmIlmiLinkImeType=AtmIlmiLinkImeType, tmnxAtmSysConfV4v0Group=tmnxAtmSysConfV4v0Group, tAtmVclInfoTxTrafficDescrIdOvr=tAtmVclInfoTxTrafficDescrIdOvr, tAtmIntfLastUnknVpi=tAtmIntfLastUnknVpi, tmnxAtmVtlStatisticsGroup=tmnxAtmVtlStatisticsGroup, tAtmOamVclStatsAISCellsRxd=tAtmOamVclStatsAISCellsRxd, tmnxAtmVclInfoGroupV9v0=tmnxAtmVclInfoGroupV9v0, tAtmIlmiLinkNeighborMaxVpcs=tAtmIlmiLinkNeighborMaxVpcs, tAtmTcSubLayerDown=tAtmTcSubLayerDown, tAtmVplStatsTotalCellsRxd=tAtmVplStatsTotalCellsRxd, tAtmIfcStatsDrpClp0CellsRxd=tAtmIfcStatsDrpClp0CellsRxd, tAtmIntfStatsTotalCellsTxd=tAtmIntfStatsTotalCellsTxd, tAtmOamVclStatsAISCellsTxd=tAtmOamVclStatsAISCellsTxd, tAtmVtlLastChange=tAtmVtlLastChange, tAtmVplStatsTagCells=tAtmVplStatsTagCells, tAtmIlmiLinkOutGetRequestPdus=tAtmIlmiLinkOutGetRequestPdus, tAtmCpStatsTotalCellsTxdLo=tAtmCpStatsTotalCellsTxdLo, tAtmVtlStatsTagCells=tAtmVtlStatsTagCells, tAtmPlcpSubLayerDown=tAtmPlcpSubLayerDown, tmnxAtmVtlInfoGroup=tmnxAtmVtlInfoGroup, tAtmIlmiLinkStatisticsEntry=tAtmIlmiLinkStatisticsEntry, tmnxAtmIntfStatsV4v0Group=tmnxAtmIntfStatsV4v0Group, tAtmIntfStatsEntry=tAtmIntfStatsEntry, tAtmIntfShapedBandwidth=tAtmIntfShapedBandwidth, tAtmIfcStatsTagCells=tAtmIfcStatsTagCells, tAtmVclInfoRxTrafficDescrIdOvr=tAtmVclInfoRxTrafficDescrIdOvr, tAtmSysLlid=tAtmSysLlid, tAtmSysOamLoopbackPeriod=tAtmSysOamLoopbackPeriod, tAtmIlmiLinkCheckConPollIntvl=tAtmIlmiLinkCheckConPollIntvl, tAtmPlcpSubLayerClear=tAtmPlcpSubLayerClear, tmnxAtmVplStatisticsGroup=tmnxAtmVplStatisticsGroup, tAtmVtlStatisticsEntry=tAtmVtlStatisticsEntry, tAtmIntfObjs=tAtmIntfObjs, tAtmIntfStatsTotalHecErrFixed=tAtmIntfStatsTotalHecErrFixed, tAtmIfcCastType=tAtmIfcCastType, tmnxAtmMIBGroups=tmnxAtmMIBGroups, tAtmVtlEndVpi=tAtmVtlEndVpi, tAtmIfcStatsDrpClp0CellsTxd=tAtmIfcStatsDrpClp0CellsTxd, tAtmVplStatsTotalBytesTxd=tAtmVplStatsTotalBytesTxd, tAtmMdaObjs=tAtmMdaObjs, tmnxAtmAal5VccStatisticsGroup=tmnxAtmAal5VccStatisticsGroup, tAtmIlmiLinkOutSetRequestPdus=tAtmIlmiLinkOutSetRequestPdus, tAtmIfcOperStatus=tAtmIfcOperStatus, tAtmIfcStatsTotalBytesTxd=tAtmIfcStatsTotalBytesTxd, tAtmIlmiLinkInTrapPdus=tAtmIlmiLinkInTrapPdus, tAtmVtlStatsTotalBytesTxd=tAtmVtlStatsTotalBytesTxd, tAtmVplStatsDrpClp0CellsRxd=tAtmVplStatsDrpClp0CellsRxd, tAtmIlmiLinkOutGetNextRequestPdus=tAtmIlmiLinkOutGetNextRequestPdus, tAtmIntfOperStatus=tAtmIntfOperStatus, tAtmIlmiLinkInBadValueErrors=tAtmIlmiLinkInBadValueErrors, tAtmIntfConfVtcs=tAtmIntfConfVtcs, tmnxAtmNotifyPrefix=tmnxAtmNotifyPrefix, tAtmCpStatsTotalCellsRxdLo=tAtmCpStatsTotalCellsRxdLo, tAtmIlmiLinkOperStatus=tAtmIlmiLinkOperStatus, tAtmIntfAal5StatsTotalPktsRxd=tAtmIntfAal5StatsTotalPktsRxd, tAtmIlmiLinkFsmState=tAtmIlmiLinkFsmState, tAtmCpStatsDrpClp0CellsRxd=tAtmCpStatsDrpClp0CellsRxd, tAtmIlmiLinkOutGetResponsePdus=tAtmIlmiLinkOutGetResponsePdus, tAtmCellVclStatsTagCells=tAtmCellVclStatsTagCells, tAtmIlmiLinkNeighborIfIdentifier=tAtmIlmiLinkNeighborIfIdentifier, tAtmIfcStatisticsEntry=tAtmIfcStatisticsEntry, tAtmOamVclStatsLoopbackCellsTxd=tAtmOamVclStatsLoopbackCellsTxd, tAtmIntfAal5StatsTable=tAtmIntfAal5StatsTable, tAtmVtlStatsTotalClp0CellsTxd=tAtmVtlStatsTotalClp0CellsTxd, tAtmIntfConfIfcs=tAtmIntfConfIfcs, tAtmVtlStatsDrpCellsRxd=tAtmVtlStatsDrpCellsRxd, tmnxAtmCellVclStatisticsGroup=tmnxAtmCellVclStatisticsGroup, tmnxAtmIlmiLinkGroup=tmnxAtmIlmiLinkGroup, tAtmIlmiLinkInSetRequestPdus=tAtmIlmiLinkInSetRequestPdus, tAtmCpStatsClp0CellsRxdLo=tAtmCpStatsClp0CellsRxdLo, tAtmIlmiLinkStatisticsTable=tAtmIlmiLinkStatisticsTable, tAtmTcSubLayerClear=tAtmTcSubLayerClear, timetraATMMIBModule=timetraATMMIBModule, tAtmIlmiLinkOutTooBigErrors=tAtmIlmiLinkOutTooBigErrors, tAtmVtlStatsTotalCellsTxd=tAtmVtlStatsTotalCellsTxd, tAtmVclInfoIlmiStatus=tAtmVclInfoIlmiStatus, tAtmIlmiLinkInGetNextRequestPdus=tAtmIlmiLinkInGetNextRequestPdus, tAtmMIBV9v0Compliance=tAtmMIBV9v0Compliance, tAtmVtlInfoTable=tAtmVtlInfoTable, tAtmIntfTotalEgrNrtVbrBandwidth=tAtmIntfTotalEgrNrtVbrBandwidth, tAtmVplInfoTable=tAtmVplInfoTable, tAtmIlmiLinkNegotiatedImeType=tAtmIlmiLinkNegotiatedImeType, tAtmTCSublayerTable=tAtmTCSublayerTable, tAtmIlmiLinkOutGeneralErrors=tAtmIlmiLinkOutGeneralErrors, tAtmIlmiLinkNeighborVersion=tAtmIlmiLinkNeighborVersion, tAtmVplStatsTotalBytesRxd=tAtmVplStatsTotalBytesRxd, tAtmIfcAdminStatus=tAtmIfcAdminStatus, tAtmVplStatsDrpCellsRxd=tAtmVplStatsDrpCellsRxd, tAtmIntfAal5StatsTotalCrc32Err=tAtmIntfAal5StatsTotalCrc32Err, tAtmIlmiLinkLastChanged=tAtmIlmiLinkLastChanged, tAtmIlmiLinkOutTrapPdus=tAtmIlmiLinkOutTrapPdus, tmnxAtmMIBCompliances=tmnxAtmMIBCompliances, tmnxAtmVclStatisticsGroup=tmnxAtmVclStatisticsGroup, tAtmIntfTotalIngrRtVbrBandwidth=tAtmIntfTotalIngrRtVbrBandwidth, tAal5VccStatsPacketsTxd=tAal5VccStatsPacketsTxd, tAtmIntfAal5StatsTotalPktsDrpTxd=tAtmIntfAal5StatsTotalPktsDrpTxd, tAtmIlmiLinkOutPdus=tAtmIlmiLinkOutPdus, tAtmCpStatsTotalCellsRxd=tAtmCpStatsTotalCellsRxd, tAtmCpStatsClp0CellsRxd=tAtmCpStatsClp0CellsRxd, AtmIlmiLinkVersion=AtmIlmiLinkVersion, tAtmEpOutOfPeerVpiOrVciRange=tAtmEpOutOfPeerVpiOrVciRange, tAtmIlmiLinkOutBadValueErrors=tAtmIlmiLinkOutBadValueErrors, tAtmVclInfoTable=tAtmVclInfoTable, tAtmVplStatisticsTable=tAtmVplStatisticsTable, tAtmCpStatsTagCells=tAtmCpStatsTagCells, tAtmVtlStatisticsTable=tAtmVtlStatisticsTable, tAtmIfcLastChange=tAtmIfcLastChange, tAtmOamVplStatsRDICellsRxd=tAtmOamVplStatsRDICellsRxd, tAtmVtlReceiveTrafficDescrIndex=tAtmVtlReceiveTrafficDescrIndex, tAtmIlmiLinkVersion=tAtmIlmiLinkVersion, tAtmCpStatsClp0CellsTxdLo=tAtmCpStatsClp0CellsTxdLo, tAtmIfcStatsTotalClp0CellsTxd=tAtmIfcStatsTotalClp0CellsTxd, tAtmOamVplStatisticsTable=tAtmOamVplStatisticsTable, tAtmOamVclStatsOtherCellsRxd=tAtmOamVclStatsOtherCellsRxd, tAtmVplStatsTotalCellsTxd=tAtmVplStatsTotalCellsTxd, tmnxAtmTCSublayerGroup=tmnxAtmTCSublayerGroup, tAal5VccObjs=tAal5VccObjs, tAtmIntfCurrentMaxVpcs=tAtmIntfCurrentMaxVpcs, tAtmVtlInfoEntry=tAtmVtlInfoEntry, tAtmVtlStatsTotalClp0CellsRxd=tAtmVtlStatsTotalClp0CellsRxd, tAtmVtlStatsDrpClp0CellsRxd=tAtmVtlStatsDrpClp0CellsRxd, tAtmSysOamRetryUp=tAtmSysOamRetryUp, tAtmMdaConfiguredVpcs=tAtmMdaConfiguredVpcs, tAtmNotifications=tAtmNotifications, tAtmMdaMaxSupportedVccs=tAtmMdaMaxSupportedVccs, tAtmIntfCurrentMaxVccs=tAtmIntfCurrentMaxVccs, tAtmVclStatsTotalBytesTxd=tAtmVclStatsTotalBytesTxd, tAtmIntfAal5StatsTotalPktsTxd=tAtmIntfAal5StatsTotalPktsTxd, tAtmOamVplStatsCrc10Errors=tAtmOamVplStatsCrc10Errors, tAtmMdaInfoEntry=tAtmMdaInfoEntry)
mibBuilder.exportSymbols("TIMETRA-ATM-MIB", tAtmIntfStatsTotalBytesTxd=tAtmIntfStatsTotalBytesTxd, tAtmIlmiLinkInPdus=tAtmIlmiLinkInPdus, tAtmVtlOperStatus=tAtmVtlOperStatus, tAtmVplInfoOamStatus=tAtmVplInfoOamStatus, tAtmIfcStatsTotalCellsRxd=tAtmIfcStatsTotalCellsRxd, tAtmVtlConnKind=tAtmVtlConnKind, tAtmTCSublayerHecErrors=tAtmTCSublayerHecErrors, tAtmVtlObjs=tAtmVtlObjs, tAtmTCSublayerHecErrorsFixed=tAtmTCSublayerHecErrorsFixed, tmnxAtmNotificationsR4r0Group=tmnxAtmNotificationsR4r0Group, tAtmMdaInfoTable=tAtmMdaInfoTable, tAtmOamVplStatsLoopbackCellsTxd=tAtmOamVplStatsLoopbackCellsTxd, tAtmIlmiLinkVci=tAtmIlmiLinkVci, PYSNMP_MODULE_ID=timetraATMMIBModule, tAtmOamVclStatisticsEntry=tAtmOamVclStatisticsEntry, tAtmCellVclStatisticsTable=tAtmCellVclStatisticsTable, tAtmCellVclStatsDrpClp0CellsTxd=tAtmCellVclStatsDrpClp0CellsTxd, tmnxAtmObsoleteV4v0Group=tmnxAtmObsoleteV4v0Group, tAtmMaxPeerVpcsExceeded=tAtmMaxPeerVpcsExceeded, tAtmIntfBandwidth=tAtmIntfBandwidth, tAtmSystemObjs=tAtmSystemObjs, tAtmCpStatsTotalCellsTxd=tAtmCpStatsTotalCellsTxd, tAtmCpStatsDrpCellsRxd=tAtmCpStatsDrpCellsRxd, tmnxAtmIntfConfV4v0Group=tmnxAtmIntfConfV4v0Group, tAtmIfcInfoOwner=tAtmIfcInfoOwner, tAtmMdaConfiguredVccs=tAtmMdaConfiguredVccs, tAtmVplInfoIlmiStatus=tAtmVplInfoIlmiStatus, tAtmVclStatsTotalCellsTxd=tAtmVclStatsTotalCellsTxd, tAtmOamVplStatisticsEntry=tAtmOamVplStatisticsEntry, tAtmIlmiLinkInGetResponsePdus=tAtmIlmiLinkInGetResponsePdus, tAtmVtlStartVpi=tAtmVtlStartVpi, tAtmVplInfoEntry=tAtmVplInfoEntry, tAtmCellVclStatsDrpCellsRxd=tAtmCellVclStatsDrpCellsRxd, AtmIlmiLinkUniType=AtmIlmiLinkUniType, tAtmVclInfoOamStatus=tAtmVclInfoOamStatus, tAtmOamVplStatsAISCellsRxd=tAtmOamVplStatsAISCellsRxd, tAtmCpStatsTotalCellsTxdHi=tAtmCpStatsTotalCellsTxdHi, tAtmCpStatsClp0CellsRxdHi=tAtmCpStatsClp0CellsRxdHi, tAtmIlmiLinkInGeneralErrors=tAtmIlmiLinkInGeneralErrors, tAtmIntfConfEntry=tAtmIntfConfEntry)
