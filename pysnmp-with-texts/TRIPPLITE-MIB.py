#
# PySNMP MIB module TRIPPLITE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/TRIPPLITE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:27:40 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
NotificationType, Bits, MibIdentifier, IpAddress, iso, ObjectIdentity, ModuleIdentity, Integer32, enterprises, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Counter32, Counter64, Unsigned32, TimeTicks, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Bits", "MibIdentifier", "IpAddress", "iso", "ObjectIdentity", "ModuleIdentity", "Integer32", "enterprises", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Counter32", "Counter64", "Unsigned32", "TimeTicks", "Gauge32")
TimeInterval, TimeStamp, AutonomousType, VariablePointer, RowStatus, DateAndTime, DisplayString, TextualConvention, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TimeInterval", "TimeStamp", "AutonomousType", "VariablePointer", "RowStatus", "DateAndTime", "DisplayString", "TextualConvention", "TruthValue")
NonNegativeInteger, PositiveInteger = mibBuilder.importSymbols("UPS-MIB", "NonNegativeInteger", "PositiveInteger")
tripplite = ModuleIdentity((1, 3, 6, 1, 4, 1, 850))
tripplite.setRevisions(('2013-10-30 13:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: tripplite.setRevisionsDescriptions(('Consolidated and Released for PAL v12.06.006x',))
if mibBuilder.loadTexts: tripplite.setLastUpdated('201310301300Z')
if mibBuilder.loadTexts: tripplite.setOrganization('Tripp Lite')
if mibBuilder.loadTexts: tripplite.setContactInfo('Software Engineering Tripp Lite 1111 W. 35th St. Chicago, IL 60609')
if mibBuilder.loadTexts: tripplite.setDescription('This MIB module defines MIB objects which provide mechanisms for remote management capabilities of Tripplite PowerAlert and related software.')
tlEnumerations = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 2))
tlOperatingSystems = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 2, 1))
hpux9 = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 2, 1, 1))
sunos4 = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 2, 1, 2))
solaris = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 2, 1, 3))
osf = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 2, 1, 4))
ultrix = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 2, 1, 5))
hpux10 = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 2, 1, 6))
netbsd1 = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 2, 1, 7))
freebsd = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 2, 1, 8))
irix = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 2, 1, 9))
linux = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 2, 1, 10))
bsdi = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 2, 1, 11))
openbsd = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 2, 1, 12))
win32 = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 2, 1, 13))
hpux11 = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 2, 1, 14))
win9x = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 2, 1, 50))
winnt = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 2, 1, 51))
solspark = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 2, 1, 52))
solintel = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 2, 1, 53))
aix = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 2, 1, 54))
sco = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 2, 1, 55))
osx = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 2, 1, 56))
unknown = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 2, 1, 255))
tlPowerAlert = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 90))
tlPASystem = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 90, 1))
tlPAContacts = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 90, 1, 1))
tlPAEmailContacts = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 90, 1, 1, 1))
tlPANumberOfEmailContacts = MibScalar((1, 3, 6, 1, 4, 1, 850, 90, 1, 1, 1, 1), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlPANumberOfEmailContacts.setStatus('current')
if mibBuilder.loadTexts: tlPANumberOfEmailContacts.setDescription('The number email contacts currently defined.')
tlPAEmailContactsTable = MibTable((1, 3, 6, 1, 4, 1, 850, 90, 1, 1, 1, 2), )
if mibBuilder.loadTexts: tlPAEmailContactsTable.setStatus('current')
if mibBuilder.loadTexts: tlPAEmailContactsTable.setDescription('A list email contact entries. The number of entries is given by the value of tlPANumberOfEmailContacts.')
tlPAEmailContactEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 90, 1, 1, 1, 2, 1), ).setIndexNames((0, "TRIPPLITE-MIB", "tlPAEmailContactIndex"))
if mibBuilder.loadTexts: tlPAEmailContactEntry.setStatus('current')
if mibBuilder.loadTexts: tlPAEmailContactEntry.setDescription('An entry containing email contacts information.')
tlPAEmailContactIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 90, 1, 1, 1, 2, 1, 1), PositiveInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlPAEmailContactIndex.setStatus('current')
if mibBuilder.loadTexts: tlPAEmailContactIndex.setDescription('This is the index number of the email contact.')
tlPAEmailContactRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 90, 1, 1, 1, 2, 1, 2), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlPAEmailContactRowStatus.setStatus('current')
if mibBuilder.loadTexts: tlPAEmailContactRowStatus.setDescription('The row status for the tlPAEmailContactTable row')
tlPAEmailContactName = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 90, 1, 1, 1, 2, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlPAEmailContactName.setStatus('current')
if mibBuilder.loadTexts: tlPAEmailContactName.setDescription('The name of the email contact.')
tlPAEmailContactAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 90, 1, 1, 1, 2, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlPAEmailContactAddress.setStatus('current')
if mibBuilder.loadTexts: tlPAEmailContactAddress.setDescription('The address of the email contact.')
tlPASnmpContacts = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 90, 1, 1, 2))
tlPANumberOfSnmpContacts = MibScalar((1, 3, 6, 1, 4, 1, 850, 90, 1, 1, 2, 1), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlPANumberOfSnmpContacts.setStatus('current')
if mibBuilder.loadTexts: tlPANumberOfSnmpContacts.setDescription('The number SNMP contacts currently defined.')
tlPASnmpContactsTable = MibTable((1, 3, 6, 1, 4, 1, 850, 90, 1, 1, 2, 2), )
if mibBuilder.loadTexts: tlPASnmpContactsTable.setStatus('current')
if mibBuilder.loadTexts: tlPASnmpContactsTable.setDescription('A list SNMP contact entries. The number of entries is given by the value of tlPANumberOfSnmpContacts.')
tlPASnmpContactEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 90, 1, 1, 2, 2, 1), ).setIndexNames((0, "TRIPPLITE-MIB", "tlPASnmpContactIndex"))
if mibBuilder.loadTexts: tlPASnmpContactEntry.setStatus('current')
if mibBuilder.loadTexts: tlPASnmpContactEntry.setDescription('An entry containing SNMP contacts information.')
tlPASnmpContactIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 90, 1, 1, 2, 2, 1, 1), PositiveInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlPASnmpContactIndex.setStatus('current')
if mibBuilder.loadTexts: tlPASnmpContactIndex.setDescription('This is the index number of this SNMP contact.')
tlPASnmpContactRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 90, 1, 1, 2, 2, 1, 2), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlPASnmpContactRowStatus.setStatus('current')
if mibBuilder.loadTexts: tlPASnmpContactRowStatus.setDescription('The row status for the tlPASnmpContactTable row')
tlPASnmpContactName = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 90, 1, 1, 2, 2, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlPASnmpContactName.setStatus('current')
if mibBuilder.loadTexts: tlPASnmpContactName.setDescription('The name of the SNMP contact.')
tlPASnmpContactIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 90, 1, 1, 2, 2, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlPASnmpContactIpAddress.setStatus('current')
if mibBuilder.loadTexts: tlPASnmpContactIpAddress.setDescription('The IP address of the SNMP contact.')
tlPASnmpContactPort = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 90, 1, 1, 2, 2, 1, 5), PositiveInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlPASnmpContactPort.setStatus('current')
if mibBuilder.loadTexts: tlPASnmpContactPort.setDescription('The port of the SNMP contact.')
tlPASnmpContactSnmpVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 90, 1, 1, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("snmpv1", 1), ("snmpv2c", 2), ("snmpv3", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlPASnmpContactSnmpVersion.setStatus('current')
if mibBuilder.loadTexts: tlPASnmpContactSnmpVersion.setDescription('The SNMP contact version to use for sending traps.')
tlPASnmpContactSecurityName = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 90, 1, 1, 2, 2, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlPASnmpContactSecurityName.setStatus('current')
if mibBuilder.loadTexts: tlPASnmpContactSecurityName.setDescription('The SNMP contact security name.')
tlPASnmpContactPrivPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 90, 1, 1, 2, 2, 1, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlPASnmpContactPrivPassword.setStatus('current')
if mibBuilder.loadTexts: tlPASnmpContactPrivPassword.setDescription('The SNMP contact priv password to use for sending V3 traps.')
tlPASnmpContactAuthPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 90, 1, 1, 2, 2, 1, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlPASnmpContactAuthPassword.setStatus('current')
if mibBuilder.loadTexts: tlPASnmpContactAuthPassword.setDescription('The SNMP contact auth password to use for sending V3 traps.')
tlUPS = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 100))
tlUpsObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 100, 1))
tlUpsIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 100, 1, 1))
tlUpsIdentUpsSoftwareChecksum = MibScalar((1, 3, 6, 1, 4, 1, 850, 100, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlUpsIdentUpsSoftwareChecksum.setStatus('current')
if mibBuilder.loadTexts: tlUpsIdentUpsSoftwareChecksum.setDescription('A checksum for the UPS software.')
tlUpsIdentSerialNum = MibScalar((1, 3, 6, 1, 4, 1, 850, 100, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlUpsIdentSerialNum.setStatus('current')
if mibBuilder.loadTexts: tlUpsIdentSerialNum.setDescription('Serial number for the UPS.')
tlUpsIdentID = MibScalar((1, 3, 6, 1, 4, 1, 850, 100, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlUpsIdentID.setStatus('current')
if mibBuilder.loadTexts: tlUpsIdentID.setDescription('A user-supplied ID for the UPS.')
tlUpsSnmpCardSerialNum = MibScalar((1, 3, 6, 1, 4, 1, 850, 100, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlUpsSnmpCardSerialNum.setStatus('current')
if mibBuilder.loadTexts: tlUpsSnmpCardSerialNum.setDescription('Serial number for the UPS.')
tlUpsSelectedDeviceID = MibScalar((1, 3, 6, 1, 4, 1, 850, 100, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlUpsSelectedDeviceID.setStatus('current')
if mibBuilder.loadTexts: tlUpsSelectedDeviceID.setDescription('The device ID selected to be used for retrieving data for this mib. As the snmp web card has only one device, this is read only for it')
tlUpsLocation = MibScalar((1, 3, 6, 1, 4, 1, 850, 100, 1, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlUpsLocation.setStatus('current')
if mibBuilder.loadTexts: tlUpsLocation.setDescription('The device location string.')
tlUpsBattery = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 100, 1, 2))
tlUpsBatteryAge = MibScalar((1, 3, 6, 1, 4, 1, 850, 100, 1, 2, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlUpsBatteryAge.setStatus('current')
if mibBuilder.loadTexts: tlUpsBatteryAge.setDescription('The age of the battery in years. This is equal to the current date minus tlConfigBattReplDate.')
tlUpsTemperatureF = MibScalar((1, 3, 6, 1, 4, 1, 850, 100, 1, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlUpsTemperatureF.setStatus('current')
if mibBuilder.loadTexts: tlUpsTemperatureF.setDescription('The temperature of the battery, in Farenheight degrees. This is calculated from upsBatteryTemperature, which is in Celsius degrees.')
tlUpsInput = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 100, 1, 3))
tlUpsInputNumVoltages = MibScalar((1, 3, 6, 1, 4, 1, 850, 100, 1, 3, 1), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlUpsInputNumVoltages.setStatus('current')
if mibBuilder.loadTexts: tlUpsInputNumVoltages.setDescription('The number of input voltages. Phase to phase or phase to neutral. This variable indicates the number of rows in the input table.')
tlUpsInputVoltageTable = MibTable((1, 3, 6, 1, 4, 1, 850, 100, 1, 3, 2), )
if mibBuilder.loadTexts: tlUpsInputVoltageTable.setStatus('current')
if mibBuilder.loadTexts: tlUpsInputVoltageTable.setDescription('A list of voltage input table entries. The number of entries is given by the value of tlUpsInputNumVoltages.')
tlUpsInputVoltageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 100, 1, 3, 2, 1), ).setIndexNames((0, "TRIPPLITE-MIB", "tlUpsInputVoltageIndex"))
if mibBuilder.loadTexts: tlUpsInputVoltageEntry.setStatus('current')
if mibBuilder.loadTexts: tlUpsInputVoltageEntry.setDescription('An entry containing information applicable to a particular input voltage.')
tlUpsInputVoltageIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 100, 1, 3, 2, 1, 1), PositiveInteger())
if mibBuilder.loadTexts: tlUpsInputVoltageIndex.setStatus('current')
if mibBuilder.loadTexts: tlUpsInputVoltageIndex.setDescription('The input voltage identifier.')
tlUpsInputVoltageType = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 100, 1, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("phaseToNeutral", 0), ("phaseToPhase", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlUpsInputVoltageType.setStatus('current')
if mibBuilder.loadTexts: tlUpsInputVoltageType.setDescription('Whether voltage measured is phase to phase or phase to neutral.')
tlUpsInputVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 100, 1, 3, 2, 1, 3), NonNegativeInteger()).setUnits('RMS Volts').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlUpsInputVoltage.setStatus('current')
if mibBuilder.loadTexts: tlUpsInputVoltage.setDescription('The magnitude of the present input voltage. A value of 6553 indicates Unknown.')
tlUpsOutput = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 100, 1, 4))
tlUpsOutputPowerTotal = MibScalar((1, 3, 6, 1, 4, 1, 850, 100, 1, 4, 5), PositiveInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlUpsOutputPowerTotal.setStatus('current')
if mibBuilder.loadTexts: tlUpsOutputPowerTotal.setDescription('The power capacity of the device.')
tlUpsOutputCircuits = MibScalar((1, 3, 6, 1, 4, 1, 850, 100, 1, 4, 6), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlUpsOutputCircuits.setStatus('current')
if mibBuilder.loadTexts: tlUpsOutputCircuits.setDescription('The number of output circuits. This variable indicates the number of rows in the output circuit table.')
tlUpsOutputCircuitTable = MibTable((1, 3, 6, 1, 4, 1, 850, 100, 1, 4, 7), )
if mibBuilder.loadTexts: tlUpsOutputCircuitTable.setStatus('current')
if mibBuilder.loadTexts: tlUpsOutputCircuitTable.setDescription('A list of output currents table entries. The number of entries is given by the value of tlUpsOutputNumCircuits.')
tlUpsOutputCircuitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 100, 1, 4, 7, 1), ).setIndexNames((0, "TRIPPLITE-MIB", "tlUpsOutputCircuitIndex"))
if mibBuilder.loadTexts: tlUpsOutputCircuitEntry.setStatus('current')
if mibBuilder.loadTexts: tlUpsOutputCircuitEntry.setDescription('An entry containing information applicable to a particular output circuit.')
tlUpsOutputCircuitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 100, 1, 4, 7, 1, 1), PositiveInteger())
if mibBuilder.loadTexts: tlUpsOutputCircuitIndex.setStatus('current')
if mibBuilder.loadTexts: tlUpsOutputCircuitIndex.setDescription('The output circuit identifier.')
tlUpsOutputCircuitStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 100, 1, 4, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("open", 0), ("closed", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlUpsOutputCircuitStatus.setStatus('current')
if mibBuilder.loadTexts: tlUpsOutputCircuitStatus.setDescription('Whether the breaker is open or closed.')
tlUpsOutputCircuitLoadCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 100, 1, 4, 7, 1, 3), NonNegativeInteger()).setUnits('Tenths of Amperes').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlUpsOutputCircuitLoadCurrent.setStatus('current')
if mibBuilder.loadTexts: tlUpsOutputCircuitLoadCurrent.setDescription('The magnitude of the present output current in tenths of an amp. A value of 65534 indicates Unknown.')
tlUpsAlarm = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 100, 1, 6))
tlUpsAlarmsPresent = MibScalar((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlUpsAlarmsPresent.setStatus('current')
if mibBuilder.loadTexts: tlUpsAlarmsPresent.setDescription('The present number of active alarm conditions.')
tlUpsAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 2), )
if mibBuilder.loadTexts: tlUpsAlarmTable.setStatus('current')
if mibBuilder.loadTexts: tlUpsAlarmTable.setDescription('A list of alarm table entries.')
tlUpsAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 2, 1), ).setIndexNames((0, "TRIPPLITE-MIB", "tlUpsAlarmId"))
if mibBuilder.loadTexts: tlUpsAlarmEntry.setStatus('current')
if mibBuilder.loadTexts: tlUpsAlarmEntry.setDescription('An entry containing information applicable to a particular alarm.')
tlUpsAlarmId = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 2, 1, 1), PositiveInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlUpsAlarmId.setStatus('current')
if mibBuilder.loadTexts: tlUpsAlarmId.setDescription('A unique identifier for an alarm condition.')
tlUpsAlarmDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 2, 1, 2), AutonomousType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlUpsAlarmDescr.setStatus('current')
if mibBuilder.loadTexts: tlUpsAlarmDescr.setDescription('A description of the alarm condition.')
tlUpsAlarmTime = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 2, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlUpsAlarmTime.setStatus('current')
if mibBuilder.loadTexts: tlUpsAlarmTime.setDescription('The value of sysUpTime when the alarm condition was detected.')
tlUpsAlarmDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlUpsAlarmDetail.setStatus('current')
if mibBuilder.loadTexts: tlUpsAlarmDetail.setDescription('A textual description of the alarm condition.')
tlUpsAlarmDeviceId = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 2, 1, 5), PositiveInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlUpsAlarmDeviceId.setStatus('current')
if mibBuilder.loadTexts: tlUpsAlarmDeviceId.setDescription('A numeric identifier for the device on which the alarm is active.')
tlUpsAlarmDeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlUpsAlarmDeviceName.setStatus('current')
if mibBuilder.loadTexts: tlUpsAlarmDeviceName.setDescription('A string identifier for the device on which the alarm is active.')
tlUpsAlarmLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlUpsAlarmLocation.setStatus('current')
if mibBuilder.loadTexts: tlUpsAlarmLocation.setDescription('The location of the device on which the alarm is active.')
tlUpsAlarmGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("critical", 1), ("warning", 2), ("info", 3), ("status", 4), ("offline", 5), ("custom", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlUpsAlarmGroup.setStatus('current')
if mibBuilder.loadTexts: tlUpsAlarmGroup.setDescription('The category/group of this alarm.')
tlUpsAlarmIp = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 2, 1, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlUpsAlarmIp.setStatus('current')
if mibBuilder.loadTexts: tlUpsAlarmIp.setDescription('The originating IP address associated with this alarm.')
tlUpsAlarmMac = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 2, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlUpsAlarmMac.setStatus('current')
if mibBuilder.loadTexts: tlUpsAlarmMac.setDescription('The originating mac address associated with this alarm.')
tlUpsWellKnownAlarms = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 3))
tlUpsAlarmPrimaryPowerOutage = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 3, 1))
if mibBuilder.loadTexts: tlUpsAlarmPrimaryPowerOutage.setStatus('current')
if mibBuilder.loadTexts: tlUpsAlarmPrimaryPowerOutage.setDescription('The primary power source is not present.')
tlUpsAlarmSecondaryPowerOutage = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 3, 2))
if mibBuilder.loadTexts: tlUpsAlarmSecondaryPowerOutage.setStatus('current')
if mibBuilder.loadTexts: tlUpsAlarmSecondaryPowerOutage.setDescription('The secondary power source is not present.')
tlUpsAlarmLoadLevelAboveThreshold = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 3, 3))
if mibBuilder.loadTexts: tlUpsAlarmLoadLevelAboveThreshold.setStatus('current')
if mibBuilder.loadTexts: tlUpsAlarmLoadLevelAboveThreshold.setDescription('The load level is above the designated threshold.')
tlUpsAlarmOutputCurrentChanged = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 3, 4))
if mibBuilder.loadTexts: tlUpsAlarmOutputCurrentChanged.setStatus('current')
if mibBuilder.loadTexts: tlUpsAlarmOutputCurrentChanged.setDescription('The output current changed from its last known value.')
tlUpsAlarmBatteryAgeAboveThreshold = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 3, 5))
if mibBuilder.loadTexts: tlUpsAlarmBatteryAgeAboveThreshold.setStatus('current')
if mibBuilder.loadTexts: tlUpsAlarmBatteryAgeAboveThreshold.setDescription('One or more batteries have been determined to require replacement.')
tlUpsAlarmLoadOff = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 3, 6))
if mibBuilder.loadTexts: tlUpsAlarmLoadOff.setStatus('current')
if mibBuilder.loadTexts: tlUpsAlarmLoadOff.setDescription('The load is off.')
tlUpsAlarmUserDefined = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 3, 7))
if mibBuilder.loadTexts: tlUpsAlarmUserDefined.setStatus('current')
if mibBuilder.loadTexts: tlUpsAlarmUserDefined.setDescription('A user-defined event is in alarm.')
tlUpsAlarmBatteryBad = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 3, 8))
if mibBuilder.loadTexts: tlUpsAlarmBatteryBad.setStatus('current')
if mibBuilder.loadTexts: tlUpsAlarmBatteryBad.setDescription('One or more batteries have been determined to require replacement.')
tlUpsAlarmOnBattery = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 3, 9))
if mibBuilder.loadTexts: tlUpsAlarmOnBattery.setStatus('current')
if mibBuilder.loadTexts: tlUpsAlarmOnBattery.setDescription('The UPS is drawing power from the batteries.')
tlUpsAlarmLowBattery = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 3, 10))
if mibBuilder.loadTexts: tlUpsAlarmLowBattery.setStatus('current')
if mibBuilder.loadTexts: tlUpsAlarmLowBattery.setDescription('The remaining battery run-time is less than or equal to upsConfigLowBattTime.')
tlUpsAlarmDepletedBattery = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 3, 11))
if mibBuilder.loadTexts: tlUpsAlarmDepletedBattery.setStatus('current')
if mibBuilder.loadTexts: tlUpsAlarmDepletedBattery.setDescription('The UPS will be unable to sustain the present load when and if the utility power is lost.')
tlUpsAlarmTempBad = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 3, 12))
if mibBuilder.loadTexts: tlUpsAlarmTempBad.setStatus('current')
if mibBuilder.loadTexts: tlUpsAlarmTempBad.setDescription('A temperature is out of tolerance.')
tlUpsAlarmInputBad = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 3, 13))
if mibBuilder.loadTexts: tlUpsAlarmInputBad.setStatus('current')
if mibBuilder.loadTexts: tlUpsAlarmInputBad.setDescription('An input condition is out of tolerance.')
tlUpsAlarmOutputBad = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 3, 14))
if mibBuilder.loadTexts: tlUpsAlarmOutputBad.setStatus('current')
if mibBuilder.loadTexts: tlUpsAlarmOutputBad.setDescription('An output condition (other than OutputOverload) is out of tolerance.')
tlUpsAlarmOutputOverload = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 3, 15))
if mibBuilder.loadTexts: tlUpsAlarmOutputOverload.setStatus('current')
if mibBuilder.loadTexts: tlUpsAlarmOutputOverload.setDescription('The output load exceeds the UPS output capacity.')
tlUpsAlarmOnBypass = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 3, 16))
if mibBuilder.loadTexts: tlUpsAlarmOnBypass.setStatus('current')
if mibBuilder.loadTexts: tlUpsAlarmOnBypass.setDescription('The Bypass is presently engaged on the UPS.')
tlUpsAlarmBypassBad = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 3, 17))
if mibBuilder.loadTexts: tlUpsAlarmBypassBad.setStatus('current')
if mibBuilder.loadTexts: tlUpsAlarmBypassBad.setDescription('The Bypass is out of tolerance.')
tlUpsAlarmOutputOffAsRequested = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 3, 18))
if mibBuilder.loadTexts: tlUpsAlarmOutputOffAsRequested.setStatus('current')
if mibBuilder.loadTexts: tlUpsAlarmOutputOffAsRequested.setDescription('The UPS has shutdown as requested, i.e., the output is off.')
tlUpsAlarmUpsOffAsRequested = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 3, 19))
if mibBuilder.loadTexts: tlUpsAlarmUpsOffAsRequested.setStatus('current')
if mibBuilder.loadTexts: tlUpsAlarmUpsOffAsRequested.setDescription('The entire UPS has shutdown as commanded.')
tlUpsAlarmChargerFailed = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 3, 20))
if mibBuilder.loadTexts: tlUpsAlarmChargerFailed.setStatus('current')
if mibBuilder.loadTexts: tlUpsAlarmChargerFailed.setDescription('An uncorrected problem has been detected within the UPS charger subsystem.')
tlUpsAlarmUpsOutputOff = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 3, 21))
if mibBuilder.loadTexts: tlUpsAlarmUpsOutputOff.setStatus('current')
if mibBuilder.loadTexts: tlUpsAlarmUpsOutputOff.setDescription('The output of the UPS is in the off state.')
tlUpsAlarmUpsSystemOff = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 3, 22))
if mibBuilder.loadTexts: tlUpsAlarmUpsSystemOff.setStatus('current')
if mibBuilder.loadTexts: tlUpsAlarmUpsSystemOff.setDescription('The UPS system is in the off state.')
tlUpsAlarmFanFailure = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 3, 23))
if mibBuilder.loadTexts: tlUpsAlarmFanFailure.setStatus('current')
if mibBuilder.loadTexts: tlUpsAlarmFanFailure.setDescription('The failure of one or more fans in the UPS has been detected.')
tlUpsAlarmFuseFailure = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 3, 24))
if mibBuilder.loadTexts: tlUpsAlarmFuseFailure.setStatus('current')
if mibBuilder.loadTexts: tlUpsAlarmFuseFailure.setDescription('The failure of one or more fuses has been detected.')
tlUpsAlarmGeneralFault = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 3, 25))
if mibBuilder.loadTexts: tlUpsAlarmGeneralFault.setStatus('current')
if mibBuilder.loadTexts: tlUpsAlarmGeneralFault.setDescription('A general fault in the UPS has been detected.')
tlUpsAlarmDiagnosticTestFailed = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 3, 26))
if mibBuilder.loadTexts: tlUpsAlarmDiagnosticTestFailed.setStatus('current')
if mibBuilder.loadTexts: tlUpsAlarmDiagnosticTestFailed.setDescription('The result of the last diagnostic test indicates a failure.')
tlUpsAlarmCommunicationsLost = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 3, 27))
if mibBuilder.loadTexts: tlUpsAlarmCommunicationsLost.setStatus('current')
if mibBuilder.loadTexts: tlUpsAlarmCommunicationsLost.setDescription('A problem has been encountered in the communications between the agent and the UPS.')
tlUpsAlarmAwaitingPower = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 3, 28))
if mibBuilder.loadTexts: tlUpsAlarmAwaitingPower.setStatus('current')
if mibBuilder.loadTexts: tlUpsAlarmAwaitingPower.setDescription('The UPS output is off and the UPS is awaiting the return of input power.')
tlUpsAlarmShutdownPending = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 3, 29))
if mibBuilder.loadTexts: tlUpsAlarmShutdownPending.setStatus('current')
if mibBuilder.loadTexts: tlUpsAlarmShutdownPending.setDescription('A upsShutdownAfterDelay countdown is underway.')
tlUpsAlarmShutdownImminent = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 3, 30))
if mibBuilder.loadTexts: tlUpsAlarmShutdownImminent.setStatus('current')
if mibBuilder.loadTexts: tlUpsAlarmShutdownImminent.setDescription('The UPS will turn off power to the load in less than 5 seconds; this may be either a timed shutdown or a low battery shutdown.')
tlUpsAlarmTestInProgress = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 3, 31))
if mibBuilder.loadTexts: tlUpsAlarmTestInProgress.setStatus('current')
if mibBuilder.loadTexts: tlUpsAlarmTestInProgress.setDescription('A test is in progress, as initiated and indicated by the Test Group. Tests initiated via other implementation-specific mechanisms can indicate the presence of the testing in the alarm table, if desired, via a OBJECT-IDENTITY macro in the MIB document specific to that implementation and are outside the scope of this OBJECT-IDENTITY.')
tlUpsAlarmCircuitBreaker1Open = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 3, 32))
if mibBuilder.loadTexts: tlUpsAlarmCircuitBreaker1Open.setStatus('current')
if mibBuilder.loadTexts: tlUpsAlarmCircuitBreaker1Open.setDescription('Circuit breakers #1 is open.')
tlUpsAlarmCircuitBreaker2Open = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 3, 33))
if mibBuilder.loadTexts: tlUpsAlarmCircuitBreaker2Open.setStatus('current')
if mibBuilder.loadTexts: tlUpsAlarmCircuitBreaker2Open.setDescription('Circuit breakers #2 is open.')
tlUpsAlarmCircuitBreaker3Open = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 3, 34))
if mibBuilder.loadTexts: tlUpsAlarmCircuitBreaker3Open.setStatus('current')
if mibBuilder.loadTexts: tlUpsAlarmCircuitBreaker3Open.setDescription('Circuit breakers #3 is open.')
tlUpsAlarmCircuitBreaker4Open = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 3, 35))
if mibBuilder.loadTexts: tlUpsAlarmCircuitBreaker4Open.setStatus('current')
if mibBuilder.loadTexts: tlUpsAlarmCircuitBreaker4Open.setDescription('Circuit breakers #4 is open.')
tlUpsAlarmCircuitBreaker5Open = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 3, 36))
if mibBuilder.loadTexts: tlUpsAlarmCircuitBreaker5Open.setStatus('current')
if mibBuilder.loadTexts: tlUpsAlarmCircuitBreaker5Open.setDescription('Circuit breakers #5 is open.')
tlUpsAlarmCircuitBreaker6Open = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 3, 37))
if mibBuilder.loadTexts: tlUpsAlarmCircuitBreaker6Open.setStatus('current')
if mibBuilder.loadTexts: tlUpsAlarmCircuitBreaker6Open.setDescription('Circuit breakers #6 is open.')
tlUpsAlarmCircuitBreaker7Open = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 3, 38))
if mibBuilder.loadTexts: tlUpsAlarmCircuitBreaker7Open.setStatus('current')
if mibBuilder.loadTexts: tlUpsAlarmCircuitBreaker7Open.setDescription('Circuit breakers #7 is open.')
tlUpsAlarmCircuitBreaker8Open = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 3, 39))
if mibBuilder.loadTexts: tlUpsAlarmCircuitBreaker8Open.setStatus('current')
if mibBuilder.loadTexts: tlUpsAlarmCircuitBreaker8Open.setDescription('Circuit breakers #8 is open.')
tlUpsAlarmCurrent1AboveThreshold = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 3, 40))
if mibBuilder.loadTexts: tlUpsAlarmCurrent1AboveThreshold.setStatus('current')
if mibBuilder.loadTexts: tlUpsAlarmCurrent1AboveThreshold.setDescription('The output current on line 1 exceeds load limits.')
tlUpsAlarmCurrent2AboveThreshold = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 3, 41))
if mibBuilder.loadTexts: tlUpsAlarmCurrent2AboveThreshold.setStatus('current')
if mibBuilder.loadTexts: tlUpsAlarmCurrent2AboveThreshold.setDescription('The output current on line 2 exceeds load limits.')
tlUpsAlarmCurrent3AboveThreshold = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 3, 42))
if mibBuilder.loadTexts: tlUpsAlarmCurrent3AboveThreshold.setStatus('current')
if mibBuilder.loadTexts: tlUpsAlarmCurrent3AboveThreshold.setDescription('The output current on line 3 exceeds load limits.')
tlUpsAlarmDevName = MibScalar((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlUpsAlarmDevName.setStatus('deprecated')
if mibBuilder.loadTexts: tlUpsAlarmDevName.setDescription('The name of the device, tlDevName, corresponding to the device that is associated with this alarm.')
tlUpsAlarmDevLocation = MibScalar((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlUpsAlarmDevLocation.setStatus('deprecated')
if mibBuilder.loadTexts: tlUpsAlarmDevLocation.setDescription('The location of the device, tlDevLocation, corresponding to the device that is associated with this alarm.')
tlUpsAlarmCategory = MibScalar((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlUpsAlarmCategory.setStatus('deprecated')
if mibBuilder.loadTexts: tlUpsAlarmCategory.setDescription('The category, tlDevEvtCategory, of this alarm.')
tlUpsTest = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 100, 1, 7))
tlUpsTestDate = MibScalar((1, 3, 6, 1, 4, 1, 850, 100, 1, 7, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlUpsTestDate.setStatus('current')
if mibBuilder.loadTexts: tlUpsTestDate.setDescription('The date of the last self-test run on the ups, in the format YYYYMMDD.')
tlUpsTestResultsDetail = MibScalar((1, 3, 6, 1, 4, 1, 850, 100, 1, 7, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlUpsTestResultsDetail.setStatus('current')
if mibBuilder.loadTexts: tlUpsTestResultsDetail.setDescription('Result of the last self-test run on the ups.')
tlUpsControl = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 100, 1, 8))
tlUpsWatchdogSupported = MibScalar((1, 3, 6, 1, 4, 1, 850, 100, 1, 8, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlUpsWatchdogSupported.setStatus('current')
if mibBuilder.loadTexts: tlUpsWatchdogSupported.setDescription('Indicates whether or not this UPS supports a watchdog reboot.')
tlUpsWatchdogSecsBeforeReboot = MibScalar((1, 3, 6, 1, 4, 1, 850, 100, 1, 8, 2), NonNegativeInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlUpsWatchdogSecsBeforeReboot.setStatus('current')
if mibBuilder.loadTexts: tlUpsWatchdogSecsBeforeReboot.setDescription('The maximum number of seconds that can expire between polls that the engine makes to the UPS for data. If this time runs out, then the UPS will cycle its outputs. Set this to zero to turns disable this feature.')
tlUpsWellKnownControls = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 100, 1, 8, 3))
tlUpsControlSelfTest = MibScalar((1, 3, 6, 1, 4, 1, 850, 100, 1, 8, 3, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlUpsControlSelfTest.setStatus('current')
if mibBuilder.loadTexts: tlUpsControlSelfTest.setDescription('Set to TRUE to initiate Self Test')
tlUpsControlRamp = MibScalar((1, 3, 6, 1, 4, 1, 850, 100, 1, 8, 3, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlUpsControlRamp.setStatus('current')
if mibBuilder.loadTexts: tlUpsControlRamp.setDescription('Set to TRUE to initiate Ramp')
tlUpsControlShed = MibScalar((1, 3, 6, 1, 4, 1, 850, 100, 1, 8, 3, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlUpsControlShed.setStatus('current')
if mibBuilder.loadTexts: tlUpsControlShed.setDescription('Set to TRUE to initiate Shed')
tlUpsControlUpsOn = MibScalar((1, 3, 6, 1, 4, 1, 850, 100, 1, 8, 3, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlUpsControlUpsOn.setStatus('current')
if mibBuilder.loadTexts: tlUpsControlUpsOn.setDescription('Set to TRUE to turn UPS on')
tlUpsControlUpsOff = MibScalar((1, 3, 6, 1, 4, 1, 850, 100, 1, 8, 3, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlUpsControlUpsOff.setStatus('current')
if mibBuilder.loadTexts: tlUpsControlUpsOff.setDescription('Set to TRUE to turn UPS off')
tlUpsConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 100, 1, 9))
tlUpsConfigBattReplDate = MibScalar((1, 3, 6, 1, 4, 1, 850, 100, 1, 9, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlUpsConfigBattReplDate.setStatus('current')
if mibBuilder.loadTexts: tlUpsConfigBattReplDate.setDescription('The date on which the battery was last replaced, in the format YYYYMMDD.')
tlUpsOutlet = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 100, 1, 10))
tlUpsOutletNumOutlets = MibScalar((1, 3, 6, 1, 4, 1, 850, 100, 1, 10, 1), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlUpsOutletNumOutlets.setStatus('current')
if mibBuilder.loadTexts: tlUpsOutletNumOutlets.setDescription('The number of available Outlets in this device.')
tlUpsOutletTable = MibTable((1, 3, 6, 1, 4, 1, 850, 100, 1, 10, 2), )
if mibBuilder.loadTexts: tlUpsOutletTable.setStatus('current')
if mibBuilder.loadTexts: tlUpsOutletTable.setDescription('A list of all device Outlets for all devices.')
tlUpsOutletEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 100, 1, 10, 2, 1), ).setIndexNames((0, "TRIPPLITE-MIB", "tlUpsOutletIndex"))
if mibBuilder.loadTexts: tlUpsOutletEntry.setStatus('current')
if mibBuilder.loadTexts: tlUpsOutletEntry.setDescription('An entry containing Outlet information applicable to a particular device managed by this agent.')
tlUpsOutletIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 100, 1, 10, 2, 1, 1), PositiveInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlUpsOutletIndex.setStatus('current')
if mibBuilder.loadTexts: tlUpsOutletIndex.setDescription('This is the index number of this Outlet for the device indicated by tlDeviceIndex.')
tlUpsOutletState = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 100, 1, 10, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlUpsOutletState.setStatus('current')
if mibBuilder.loadTexts: tlUpsOutletState.setDescription('The current state of the Outlet.')
tlUpsOutletType = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 100, 1, 10, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlUpsOutletType.setStatus('current')
if mibBuilder.loadTexts: tlUpsOutletType.setDescription('This is a bit field that indicates the type of this Outlet. When 0, the outlet is not controllable and has none of the other features indicated in the bit map. When non-zero, the features present for this outlet can be interpreted with the definition. Bit Display 0 Reserved, may be 1 or 0 1 Controllable 2 3 4 5 6 7 8 9 10 11 12 13 14 15 ')
tlUpsOutletControl = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 100, 1, 10, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("turnOff", 1), ("turnOn", 2), ("cycle", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlUpsOutletControl.setStatus('current')
if mibBuilder.loadTexts: tlUpsOutletControl.setDescription('Controls the state of the Outlet.')
tlUpsOutletName = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 100, 1, 10, 2, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlUpsOutletName.setStatus('current')
if mibBuilder.loadTexts: tlUpsOutletName.setDescription('A string identifying the devices attached to the output(s) of the device.')
tlUpsOutletRampAction = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 100, 1, 10, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("remainOff", 0), ("turnOnAfterDelay", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlUpsOutletRampAction.setStatus('current')
if mibBuilder.loadTexts: tlUpsOutletRampAction.setDescription('The ramp action to take on the Outlet.')
tlUpsOutletRampDataType = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 100, 1, 10, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("delayInSeconds", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlUpsOutletRampDataType.setStatus('current')
if mibBuilder.loadTexts: tlUpsOutletRampDataType.setDescription('The type of data associated with ramp action.')
tlUpsOutletRampData = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 100, 1, 10, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlUpsOutletRampData.setStatus('current')
if mibBuilder.loadTexts: tlUpsOutletRampData.setDescription('The data value associated with type of ramp data.')
tlUpsOutletShedAction = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 100, 1, 10, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("remainOn", 0), ("turnOffAfterDelay", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlUpsOutletShedAction.setStatus('current')
if mibBuilder.loadTexts: tlUpsOutletShedAction.setDescription('The shed action to take on the Outlet.')
tlUpsOutletShedDataType = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 100, 1, 10, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("delayInSeconds", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlUpsOutletShedDataType.setStatus('current')
if mibBuilder.loadTexts: tlUpsOutletShedDataType.setDescription('The type of data associated with shed action.')
tlUpsOutletShedData = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 100, 1, 10, 2, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlUpsOutletShedData.setStatus('current')
if mibBuilder.loadTexts: tlUpsOutletShedData.setDescription('The data value associated with type of shed data.')
tlUpsOutletGroupNdx = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 100, 1, 10, 2, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlUpsOutletGroupNdx.setStatus('current')
if mibBuilder.loadTexts: tlUpsOutletGroupNdx.setDescription('tlUpsOutletGroupIndex of corresponding outlet group, or 0 if ungrouped.')
tlUpsOutletCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 100, 1, 10, 2, 1, 13), PositiveInteger()).setUnits('0.1 RMS Amp').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlUpsOutletCurrent.setStatus('current')
if mibBuilder.loadTexts: tlUpsOutletCurrent.setDescription("The value of this outlet's current, represented as 0.1A.")
tlUpsOutletPower = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 100, 1, 10, 2, 1, 14), PositiveInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlUpsOutletPower.setStatus('current')
if mibBuilder.loadTexts: tlUpsOutletPower.setDescription("The value of this outlet's power in watts.")
tlUpsOutletGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 100, 1, 11))
tlUpsOutletNumOutletGroups = MibScalar((1, 3, 6, 1, 4, 1, 850, 100, 1, 11, 1), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlUpsOutletNumOutletGroups.setStatus('current')
if mibBuilder.loadTexts: tlUpsOutletNumOutletGroups.setDescription('The number of available Outlet Groups in this device.')
tlUpsOutletGroupTable = MibTable((1, 3, 6, 1, 4, 1, 850, 100, 1, 11, 2), )
if mibBuilder.loadTexts: tlUpsOutletGroupTable.setStatus('current')
if mibBuilder.loadTexts: tlUpsOutletGroupTable.setDescription('A list of device outlet group entries. The number of entries is given by the value of tlUpsOutletNumOutletGroups.')
tlUpsOutletGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 100, 1, 11, 2, 1), ).setIndexNames((0, "TRIPPLITE-MIB", "tlUpsOutletGroupIndex"))
if mibBuilder.loadTexts: tlUpsOutletGroupEntry.setStatus('current')
if mibBuilder.loadTexts: tlUpsOutletGroupEntry.setDescription('An entry containing outlet group information applicable to a particular device managed by this agent')
tlUpsOutletGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 100, 1, 11, 2, 1, 1), PositiveInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlUpsOutletGroupIndex.setStatus('current')
if mibBuilder.loadTexts: tlUpsOutletGroupIndex.setDescription('This is the index number of this load group for the device.')
tlUpsOutletGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 100, 1, 11, 2, 1, 2), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlUpsOutletGroupRowStatus.setStatus('current')
if mibBuilder.loadTexts: tlUpsOutletGroupRowStatus.setDescription('Row status for the tlUpsOutletGroupTable')
tlUpsOutletGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 100, 1, 11, 2, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlUpsOutletGroupName.setStatus('current')
if mibBuilder.loadTexts: tlUpsOutletGroupName.setDescription('The name of this outlet group.')
tlUpsOutletGroupDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 100, 1, 11, 2, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlUpsOutletGroupDesc.setStatus('current')
if mibBuilder.loadTexts: tlUpsOutletGroupDesc.setDescription('A description for this outlet group.')
tlUpsOutletGroupState = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 100, 1, 11, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", 0), ("off", 1), ("on", 2), ("mixed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlUpsOutletGroupState.setStatus('current')
if mibBuilder.loadTexts: tlUpsOutletGroupState.setDescription('The current state of the outlet group.')
tlUpsOutletGroupControl = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 100, 1, 11, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("turnOff", 1), ("turnOn", 2), ("cycle", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlUpsOutletGroupControl.setStatus('current')
if mibBuilder.loadTexts: tlUpsOutletGroupControl.setDescription('Controls the state of every outlet associated with the group.')
tlUpsMainOutlet = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 100, 1, 12))
tlUpsMainOutletState = MibScalar((1, 3, 6, 1, 4, 1, 850, 100, 1, 12, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", 0), ("off", 1), ("on", 2), ("mixed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlUpsMainOutletState.setStatus('current')
if mibBuilder.loadTexts: tlUpsMainOutletState.setDescription('The current state of the main output of the device.')
tlUpsMainOutletControllable = MibScalar((1, 3, 6, 1, 4, 1, 850, 100, 1, 12, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlUpsMainOutletControllable.setStatus('current')
if mibBuilder.loadTexts: tlUpsMainOutletControllable.setDescription('Indicates if this device has controllable outlets')
tlUpsMainOutletControl = MibScalar((1, 3, 6, 1, 4, 1, 850, 100, 1, 12, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("idle", 0), ("turnOff", 1), ("turnOn", 2), ("cycle", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlUpsMainOutletControl.setStatus('current')
if mibBuilder.loadTexts: tlUpsMainOutletControl.setDescription('Controls the state of the main outlet of the device.')
tlUpsTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 100, 2))
tlUpsTrapAlarmEntryAddedV1 = NotificationType((1, 3, 6, 1, 4, 1, 850, 100, 2) + (0,3)).setObjects(("TRIPPLITE-MIB", "tlUpsAlarmId"), ("TRIPPLITE-MIB", "tlUpsAlarmDescr"), ("TRIPPLITE-MIB", "tlUpsAlarmDetail"), ("TRIPPLITE-MIB", "tlUpsAlarmDeviceId"), ("TRIPPLITE-MIB", "tlUpsAlarmDeviceName"), ("TRIPPLITE-MIB", "tlUpsAlarmLocation"), ("TRIPPLITE-MIB", "tlUpsAlarmGroup"))
if mibBuilder.loadTexts: tlUpsTrapAlarmEntryAddedV1.setDescription('This trap is sent each time an alarm is inserted into to the alarm table.')
tlUpsTrapAlarmEntryAdded = NotificationType((1, 3, 6, 1, 4, 1, 850, 100, 2, 3)).setObjects(("TRIPPLITE-MIB", "tlUpsAlarmId"), ("TRIPPLITE-MIB", "tlUpsAlarmDescr"), ("TRIPPLITE-MIB", "tlUpsAlarmDetail"), ("TRIPPLITE-MIB", "tlUpsAlarmDeviceId"), ("TRIPPLITE-MIB", "tlUpsAlarmDeviceName"), ("TRIPPLITE-MIB", "tlUpsAlarmLocation"), ("TRIPPLITE-MIB", "tlUpsAlarmGroup"))
if mibBuilder.loadTexts: tlUpsTrapAlarmEntryAdded.setStatus('current')
if mibBuilder.loadTexts: tlUpsTrapAlarmEntryAdded.setDescription('This trap is sent each time an alarm is inserted into to the alarm table.')
tlUpsTrapAlarmEntryRemovedV1 = NotificationType((1, 3, 6, 1, 4, 1, 850, 100, 2) + (0,4)).setObjects(("TRIPPLITE-MIB", "tlUpsAlarmId"), ("TRIPPLITE-MIB", "tlUpsAlarmDescr"), ("TRIPPLITE-MIB", "tlUpsAlarmDetail"), ("TRIPPLITE-MIB", "tlUpsAlarmDeviceId"), ("TRIPPLITE-MIB", "tlUpsAlarmDeviceName"), ("TRIPPLITE-MIB", "tlUpsAlarmLocation"), ("TRIPPLITE-MIB", "tlUpsAlarmGroup"))
if mibBuilder.loadTexts: tlUpsTrapAlarmEntryRemovedV1.setDescription('This trap is sent each time an alarm is removed from the alarm table.')
tlUpsTrapAlarmEntryRemoved = NotificationType((1, 3, 6, 1, 4, 1, 850, 100, 2, 4)).setObjects(("TRIPPLITE-MIB", "tlUpsAlarmId"), ("TRIPPLITE-MIB", "tlUpsAlarmDescr"), ("TRIPPLITE-MIB", "tlUpsAlarmDetail"), ("TRIPPLITE-MIB", "tlUpsAlarmDeviceId"), ("TRIPPLITE-MIB", "tlUpsAlarmDeviceName"), ("TRIPPLITE-MIB", "tlUpsAlarmLocation"), ("TRIPPLITE-MIB", "tlUpsAlarmGroup"))
if mibBuilder.loadTexts: tlUpsTrapAlarmEntryRemoved.setStatus('current')
if mibBuilder.loadTexts: tlUpsTrapAlarmEntryRemoved.setDescription('This trap is sent each time an alarm is removed from the alarm table.')
tlUpsTrapSystemStartup = NotificationType((1, 3, 6, 1, 4, 1, 850, 100, 2, 5))
if mibBuilder.loadTexts: tlUpsTrapSystemStartup.setStatus('current')
if mibBuilder.loadTexts: tlUpsTrapSystemStartup.setDescription("Used to inform another entity of an engine's startup. The varbinds that follow are: OBJ1 = tlEngineType Obj1Value = The type of engine providing this data OBJ2 = tlEngineSoftwareVersion Obj2Value = The current version of the engine OBJ3 = tlEngineMACAddr Obj3Value = The MAC address of the engine OBJ4 = tlUpsSnmpCardSerialNum Obj4Value = The serial number of the SNMPWEBCARD [should be 0 on PC] --- if this trap is extended, place all static OIDs above this mark. all objects below --- the number of devices (tlNumDevices) is explicit as per device for enumeration by --- the target receiver OBJ5 = tlNumDevices Obj5Value = The number of devices attached --- The following objects will be replicated per each device: OBJ6 = The OID for an entry of tlDevManufacturer, indexed by device Obj6Value = The device's manufacturer OBJ7 = The OID for an entry of tlDevModel, indexed by device Obj7Value = The device's model name OBJ8 = The OID for an entry of tlDevName, indexed by device Obj8Value = The device's display name OBJ9 = The OID for an entry of tlDevLocation, indexed by device Obj9Value = The device's location OBJ10 = The OID for an entry of tlDevRegion, indexed by device Obj10Value= The device's region OBJ11 = The OID for an entry of tlDevProtocol, indexed by device Obj11Value= The device's protocol (display string format) ")
tlUpsTrapSystemShutdown = NotificationType((1, 3, 6, 1, 4, 1, 850, 100, 2, 6))
if mibBuilder.loadTexts: tlUpsTrapSystemShutdown.setStatus('current')
if mibBuilder.loadTexts: tlUpsTrapSystemShutdown.setDescription("Used to inform another entity of an engine's startup. The varbinds that follow are: OBJ1 = tlEngineType Obj1Value = The type of engine providing this data OBJ2 = tlEngineSoftwareVersion Obj2Value = The current version of the engine OBJ3 = tlEngineMACAddr Obj3Value = The MAC address of the engine OBJ4 = tlUpsSnmpCardSerialNum Obj4Value = The serial number of the SNMPWEBCARD [should be 0 on PC] --- if this trap is extended, place all static OIDs above this mark. all objects below --- the number of devices (tlNumDevices) is explicit as per device for enumeration by --- the target receiver OBJ5 = tlNumDevices Obj5Value = The number of devices attached --- The following objects will be replicated per each device: OBJ6 = The OID for an entry of tlDevManufacturer, indexed by device Obj6Value = The device's manufacturer OBJ7 = The OID for an entry of tlDevModel, indexed by device Obj7Value = The device's model name OBJ8 = The OID for an entry of tlDevName, indexed by device Obj8Value = The device's display name OBJ9 = The OID for an entry of tlDevLocation, indexed by device Obj9Value = The device's location OBJ10 = The OID for an entry of tlDevRegion, indexed by device Obj10Value= The device's region OBJ11 = The OID for an entry of tlDevProtocol, indexed by device Obj11Value= The device's protocol (display string format) ")
tlEnviroSense = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 101))
tlEnvEnvironment = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 101, 1))
tlEnvTemperatureData = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 101, 1, 1))
tlEnvTemperatureC = MibScalar((1, 3, 6, 1, 4, 1, 850, 101, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlEnvTemperatureC.setStatus('current')
if mibBuilder.loadTexts: tlEnvTemperatureC.setDescription('The ambient temperature (C).')
tlEnvTemperatureF = MibScalar((1, 3, 6, 1, 4, 1, 850, 101, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlEnvTemperatureF.setStatus('current')
if mibBuilder.loadTexts: tlEnvTemperatureF.setDescription('The ambient temperature (F).')
tlEnvTemperatureLowLimit = MibScalar((1, 3, 6, 1, 4, 1, 850, 101, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlEnvTemperatureLowLimit.setStatus('current')
if mibBuilder.loadTexts: tlEnvTemperatureLowLimit.setDescription('The lower alarm limit for ambient temperature (F).')
tlEnvTemperatureHighLimit = MibScalar((1, 3, 6, 1, 4, 1, 850, 101, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlEnvTemperatureHighLimit.setStatus('current')
if mibBuilder.loadTexts: tlEnvTemperatureHighLimit.setDescription('The upper alarm limit for ambient temperature (F).')
tlEnvTemperatureInAlarm = MibScalar((1, 3, 6, 1, 4, 1, 850, 101, 1, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlEnvTemperatureInAlarm.setStatus('current')
if mibBuilder.loadTexts: tlEnvTemperatureInAlarm.setDescription('Indicates whether or not temperature is in alarm.')
tlEnvHumidityData = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 101, 1, 2))
tlEnvHumidity = MibScalar((1, 3, 6, 1, 4, 1, 850, 101, 1, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlEnvHumidity.setStatus('current')
if mibBuilder.loadTexts: tlEnvHumidity.setDescription('The ambient humidity (%).')
tlEnvHumidityLowLimit = MibScalar((1, 3, 6, 1, 4, 1, 850, 101, 1, 2, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlEnvHumidityLowLimit.setStatus('current')
if mibBuilder.loadTexts: tlEnvHumidityLowLimit.setDescription('The lower alarm limit for ambient humidity (%).')
tlEnvHumidityHighLimit = MibScalar((1, 3, 6, 1, 4, 1, 850, 101, 1, 2, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlEnvHumidityHighLimit.setStatus('current')
if mibBuilder.loadTexts: tlEnvHumidityHighLimit.setDescription('The upper alarm limit for ambient humidity (%).')
tlEnvHumidityInAlarm = MibScalar((1, 3, 6, 1, 4, 1, 850, 101, 1, 2, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlEnvHumidityInAlarm.setStatus('current')
if mibBuilder.loadTexts: tlEnvHumidityInAlarm.setDescription('Indicates whether or not humidity is in alarm.')
tlEnvContacts = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 101, 2))
tlEnvContactTable = MibTable((1, 3, 6, 1, 4, 1, 850, 101, 2, 1), )
if mibBuilder.loadTexts: tlEnvContactTable.setStatus('current')
if mibBuilder.loadTexts: tlEnvContactTable.setDescription('A table of contacts.')
tlEnvContactEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 101, 2, 1, 1), ).setIndexNames((0, "TRIPPLITE-MIB", "tlEnvContactIndex"))
if mibBuilder.loadTexts: tlEnvContactEntry.setStatus('current')
if mibBuilder.loadTexts: tlEnvContactEntry.setDescription('An entry containing information applicable to a particular contact.')
tlEnvContactIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 101, 2, 1, 1, 1), PositiveInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlEnvContactIndex.setStatus('current')
if mibBuilder.loadTexts: tlEnvContactIndex.setDescription('The table row index for the contact.')
tlEnvContactName = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 101, 2, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlEnvContactName.setStatus('current')
if mibBuilder.loadTexts: tlEnvContactName.setDescription('The name or description of the contact.')
tlEnvContactStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 101, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("alarm", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlEnvContactStatus.setStatus('current')
if mibBuilder.loadTexts: tlEnvContactStatus.setDescription('The current status of the contact.')
tlEnvContactConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 101, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normallyOpen", 0), ("normallyClosed", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlEnvContactConfig.setStatus('current')
if mibBuilder.loadTexts: tlEnvContactConfig.setDescription('The configuration of the contact.')
tlCooling = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 103))
tlCoolingEnvironment = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 103, 1))
tlCoolingIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 103, 1, 1))
tlCoolingModel = MibScalar((1, 3, 6, 1, 4, 1, 850, 103, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlCoolingModel.setStatus('current')
if mibBuilder.loadTexts: tlCoolingModel.setDescription('The model name for the AC Unit.')
tlCoolingManufacturer = MibScalar((1, 3, 6, 1, 4, 1, 850, 103, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlCoolingManufacturer.setStatus('current')
if mibBuilder.loadTexts: tlCoolingManufacturer.setDescription('The manufacturer of the AC Unit.')
tlCoolingSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 850, 103, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlCoolingSerialNumber.setStatus('current')
if mibBuilder.loadTexts: tlCoolingSerialNumber.setDescription('The serial number of the AC unit.')
tlCoolingFirmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 850, 103, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlCoolingFirmwareVersion.setStatus('current')
if mibBuilder.loadTexts: tlCoolingFirmwareVersion.setDescription('The firmware version of the AC Unit.')
tlCoolingHostSoftwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 850, 103, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlCoolingHostSoftwareVersion.setStatus('current')
if mibBuilder.loadTexts: tlCoolingHostSoftwareVersion.setDescription('The hardware version of the AC unit.')
tlCoolingName = MibScalar((1, 3, 6, 1, 4, 1, 850, 103, 1, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlCoolingName.setStatus('current')
if mibBuilder.loadTexts: tlCoolingName.setDescription('The user defined name for the AC Unit.')
tlCoolingLocation = MibScalar((1, 3, 6, 1, 4, 1, 850, 103, 1, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlCoolingLocation.setStatus('current')
if mibBuilder.loadTexts: tlCoolingLocation.setDescription('The user defined location of the AC Unit.')
tlCoolingStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 103, 1, 2))
tlCoolingCondOutletTemp = MibScalar((1, 3, 6, 1, 4, 1, 850, 103, 1, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlCoolingCondOutletTemp.setStatus('current')
if mibBuilder.loadTexts: tlCoolingCondOutletTemp.setDescription('The condenser outlet air stream temperature in tenths of degrees in the units Celcius/Fahrenheit as specified in tlCoolingDisplayUnits.')
tlCoolingCondInletTemp = MibScalar((1, 3, 6, 1, 4, 1, 850, 103, 1, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlCoolingCondInletTemp.setStatus('current')
if mibBuilder.loadTexts: tlCoolingCondInletTemp.setDescription('The condenser inlet air stream temperature in tenths of degrees in the units Celcius/Fahrenheit as specified in tlCoolingDisplayUnits.')
tlCoolingRefrigerantTemp = MibScalar((1, 3, 6, 1, 4, 1, 850, 103, 1, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlCoolingRefrigerantTemp.setStatus('current')
if mibBuilder.loadTexts: tlCoolingRefrigerantTemp.setDescription('The temperature of the refrigerant in the suction line. This is displayed in tenths of degrees in the units Celcius/Fahrenheit as specified in tlCoolingDisplayUnits.')
tlCoolingEvapSurfaceTemp = MibScalar((1, 3, 6, 1, 4, 1, 850, 103, 1, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlCoolingEvapSurfaceTemp.setStatus('current')
if mibBuilder.loadTexts: tlCoolingEvapSurfaceTemp.setDescription('The surface temperature of the evaporator in tenths of degrees in the units Celcius/Fahrenheit as specified in tlCoolingDisplayUnits.')
tlCoolingSuctionPressure = MibScalar((1, 3, 6, 1, 4, 1, 850, 103, 1, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlCoolingSuctionPressure.setStatus('current')
if mibBuilder.loadTexts: tlCoolingSuctionPressure.setDescription('The pressure of the compressor suction line in tenths of (Mpa/psi) depending on the value of tlCoolingDisplayUnits.')
tlCoolingDischargePressure = MibScalar((1, 3, 6, 1, 4, 1, 850, 103, 1, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlCoolingDischargePressure.setStatus('current')
if mibBuilder.loadTexts: tlCoolingDischargePressure.setDescription('The pressure of the compressor discharge line in tenths of (Mpa/psi) depending on the value of tlCoolingDisplayUnits.')
tlCoolingEvapFanSpeed = MibScalar((1, 3, 6, 1, 4, 1, 850, 103, 1, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("off", 0), ("low", 1), ("medLow", 2), ("med", 3), ("medHi", 4), ("hi", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlCoolingEvapFanSpeed.setStatus('current')
if mibBuilder.loadTexts: tlCoolingEvapFanSpeed.setDescription('The current speed of the evaporator fan.')
tlCoolingCondFanSpeed = MibScalar((1, 3, 6, 1, 4, 1, 850, 103, 1, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("off", 0), ("low", 1), ("hi", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlCoolingCondFanSpeed.setStatus('current')
if mibBuilder.loadTexts: tlCoolingCondFanSpeed.setDescription('The current speed of the condenser fan.')
tlCoolingCompFrequency = MibScalar((1, 3, 6, 1, 4, 1, 850, 103, 1, 2, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlCoolingCompFrequency.setStatus('current')
if mibBuilder.loadTexts: tlCoolingCompFrequency.setDescription('The operating frequency of the compressor in tenths of Arms.')
tlCoolingEEVPercentage = MibScalar((1, 3, 6, 1, 4, 1, 850, 103, 1, 2, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlCoolingEEVPercentage.setStatus('current')
if mibBuilder.loadTexts: tlCoolingEEVPercentage.setDescription('The opening percentage of the EEV.')
tlCoolingUnitCurrent = MibScalar((1, 3, 6, 1, 4, 1, 850, 103, 1, 2, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlCoolingUnitCurrent.setStatus('current')
if mibBuilder.loadTexts: tlCoolingUnitCurrent.setDescription('The the total current draw of the unit in tenths of Arms.')
tlCoolingFanCurrent = MibScalar((1, 3, 6, 1, 4, 1, 850, 103, 1, 2, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlCoolingFanCurrent.setStatus('current')
if mibBuilder.loadTexts: tlCoolingFanCurrent.setDescription('Thethe current draw of the Evaporator and Condenser fans in tents of Arms.')
tlCoolingCompCurrent = MibScalar((1, 3, 6, 1, 4, 1, 850, 103, 1, 2, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlCoolingCompCurrent.setStatus('current')
if mibBuilder.loadTexts: tlCoolingCompCurrent.setDescription('The operating current of the compressor in Arms.')
tlCoolingReturnAirTemp = MibScalar((1, 3, 6, 1, 4, 1, 850, 103, 1, 2, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlCoolingReturnAirTemp.setStatus('current')
if mibBuilder.loadTexts: tlCoolingReturnAirTemp.setDescription('The return air temperature in tenths of degrees in the units Celcius/Fahrenheit as specified in tlCoolingDisplayUnits.')
tlCoolingSuctionTemp = MibScalar((1, 3, 6, 1, 4, 1, 850, 103, 1, 2, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlCoolingSuctionTemp.setStatus('current')
if mibBuilder.loadTexts: tlCoolingSuctionTemp.setDescription('The temperature of the compressor suction line in tenths of degrees in the units Celcius/Fahrenheit as specified in tlCoolingDisplayUnits.')
tlCoolingSupplyAirTemp = MibScalar((1, 3, 6, 1, 4, 1, 850, 103, 1, 2, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlCoolingSupplyAirTemp.setStatus('current')
if mibBuilder.loadTexts: tlCoolingSupplyAirTemp.setDescription('The supply air temperature in tenths of degrees in the units Celcius/Fahrenheit as specified in tlCoolingDisplayUnits.')
tlCoolingRunTimes = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 103, 1, 3))
tlCoolingAirFilterRunHours = MibScalar((1, 3, 6, 1, 4, 1, 850, 103, 1, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlCoolingAirFilterRunHours.setStatus('current')
if mibBuilder.loadTexts: tlCoolingAirFilterRunHours.setDescription('Total hours the air filter has been under operation.')
tlCoolingEvapFanRunDays = MibScalar((1, 3, 6, 1, 4, 1, 850, 103, 1, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlCoolingEvapFanRunDays.setStatus('current')
if mibBuilder.loadTexts: tlCoolingEvapFanRunDays.setDescription('Total days the evaporator fan has been under operation.')
tlCoolingCondFanRunDays = MibScalar((1, 3, 6, 1, 4, 1, 850, 103, 1, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlCoolingCondFanRunDays.setStatus('current')
if mibBuilder.loadTexts: tlCoolingCondFanRunDays.setDescription('Total days the condenser fan has been under operation.')
tlCoolingCompressorRunDays = MibScalar((1, 3, 6, 1, 4, 1, 850, 103, 1, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlCoolingCompressorRunDays.setStatus('current')
if mibBuilder.loadTexts: tlCoolingCompressorRunDays.setDescription('Total days the compressor has been under operation.')
tlCoolingCondPumpRunDays = MibScalar((1, 3, 6, 1, 4, 1, 850, 103, 1, 3, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlCoolingCondPumpRunDays.setStatus('current')
if mibBuilder.loadTexts: tlCoolingCondPumpRunDays.setDescription('Total days the condensate pump has been under operation.')
tlCoolingAtomizerRunDays = MibScalar((1, 3, 6, 1, 4, 1, 850, 103, 1, 3, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlCoolingAtomizerRunDays.setStatus('current')
if mibBuilder.loadTexts: tlCoolingAtomizerRunDays.setDescription('Total days the atomizer has been under operation.')
tlCoolingConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 103, 1, 4))
tlCoolingOnOff = MibScalar((1, 3, 6, 1, 4, 1, 850, 103, 1, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("turnOffUnit", 0), ("turnOnUnit", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlCoolingOnOff.setStatus('current')
if mibBuilder.loadTexts: tlCoolingOnOff.setDescription('Turn the unit off or on.')
tlCoolingSetPointTemp = MibScalar((1, 3, 6, 1, 4, 1, 850, 103, 1, 4, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlCoolingSetPointTemp.setStatus('current')
if mibBuilder.loadTexts: tlCoolingSetPointTemp.setDescription('The set point temperature the unit will control the temperature to in tenths of degrees in Celcius or Fahrenheit based upon tleCoolDisplayUnits.')
tlCoolingAutoStart = MibScalar((1, 3, 6, 1, 4, 1, 850, 103, 1, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlCoolingAutoStart.setStatus('current')
if mibBuilder.loadTexts: tlCoolingAutoStart.setDescription('Specified if the unit should start automatically on power up.')
tlCoolingFanSpeedOverride = MibScalar((1, 3, 6, 1, 4, 1, 850, 103, 1, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("autoFanSpeed", 0), ("low", 1), ("medLow", 2), ("med", 3), ("medHi", 4), ("hi", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlCoolingFanSpeedOverride.setStatus('current')
if mibBuilder.loadTexts: tlCoolingFanSpeedOverride.setDescription('Speed of evaporator fan set by the user.')
tlCoolingControlType = MibScalar((1, 3, 6, 1, 4, 1, 850, 103, 1, 4, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("returnAirTemp", 0), ("remoteTemperature", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlCoolingControlType.setStatus('current')
if mibBuilder.loadTexts: tlCoolingControlType.setDescription('Which temperature to be used as a control point.')
tlCoolingCurrentRemoteTemp = MibScalar((1, 3, 6, 1, 4, 1, 850, 103, 1, 4, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlCoolingCurrentRemoteTemp.setStatus('current')
if mibBuilder.loadTexts: tlCoolingCurrentRemoteTemp.setDescription('The external remote temperature in tenths of degrees in Celcius or Fahrenheit depending upon value of tlCoolingDisplayUnits')
tlCoolingDisplayUnits = MibScalar((1, 3, 6, 1, 4, 1, 850, 103, 1, 4, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("metric", 0), ("english", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlCoolingDisplayUnits.setStatus('current')
if mibBuilder.loadTexts: tlCoolingDisplayUnits.setDescription('Selects English or Metric display for all readings.')
tlCoolingBeepOnKey = MibScalar((1, 3, 6, 1, 4, 1, 850, 103, 1, 4, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noBeep", 0), ("beepOn", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlCoolingBeepOnKey.setStatus('current')
if mibBuilder.loadTexts: tlCoolingBeepOnKey.setDescription('Indicates if the display sounds a beep when a key is pressed.')
tlCoolingOutputRelaySource = MibScalar((1, 3, 6, 1, 4, 1, 850, 103, 1, 4, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("allAlarmsAndWarnings", 1), ("criticalAlarmsOnly", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlCoolingOutputRelaySource.setStatus('current')
if mibBuilder.loadTexts: tlCoolingOutputRelaySource.setDescription('The alarm level that causes the ouput relay to activate.')
tlCoolingOffOnLeak = MibScalar((1, 3, 6, 1, 4, 1, 850, 103, 1, 4, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("turnOff", 0), ("alarmOnly", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlCoolingOffOnLeak.setStatus('current')
if mibBuilder.loadTexts: tlCoolingOffOnLeak.setDescription('Indicates if the unit should stop cooling when leak input is activated.')
tlCoolingOffOnInputContact = MibScalar((1, 3, 6, 1, 4, 1, 850, 103, 1, 4, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("turnOff", 0), ("alarmOnly", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlCoolingOffOnInputContact.setStatus('current')
if mibBuilder.loadTexts: tlCoolingOffOnInputContact.setDescription('Indicates if the unit should stop cooling when input contact is activated.')
tlCoolingInputContactType = MibScalar((1, 3, 6, 1, 4, 1, 850, 103, 1, 4, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ncRelay", 0), ("noRelay", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlCoolingInputContactType.setStatus('current')
if mibBuilder.loadTexts: tlCoolingInputContactType.setDescription('The input contact type.')
tlCoolingOutputRelayDefault = MibScalar((1, 3, 6, 1, 4, 1, 850, 103, 1, 4, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("nc", 0), ("no", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlCoolingOutputRelayDefault.setStatus('current')
if mibBuilder.loadTexts: tlCoolingOutputRelayDefault.setDescription('Type of contact to make when output relay is activated.')
tlCoolingAirFilterInterval = MibScalar((1, 3, 6, 1, 4, 1, 850, 103, 1, 4, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlCoolingAirFilterInterval.setStatus('current')
if mibBuilder.loadTexts: tlCoolingAirFilterInterval.setDescription('The number of weeks before the air filter needs to be changed.')
tlCoolingWaterLeakContactType = MibScalar((1, 3, 6, 1, 4, 1, 850, 103, 1, 4, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noRelay", 0), ("ncRelay", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlCoolingWaterLeakContactType.setStatus('current')
if mibBuilder.loadTexts: tlCoolingWaterLeakContactType.setDescription('The input contact type.')
tlCoolingThresholds = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 103, 1, 5))
tlCoolingMaxAirFilterRunHours = MibScalar((1, 3, 6, 1, 4, 1, 850, 103, 1, 5, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlCoolingMaxAirFilterRunHours.setStatus('current')
if mibBuilder.loadTexts: tlCoolingMaxAirFilterRunHours.setDescription('The maximum interval for air filter run hours before warning is annunciated.')
tlCoolingEnableAirFilterAlarm = MibScalar((1, 3, 6, 1, 4, 1, 850, 103, 1, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlCoolingEnableAirFilterAlarm.setStatus('current')
if mibBuilder.loadTexts: tlCoolingEnableAirFilterAlarm.setDescription('When enabled indicated that an alarm should occur when the maximum number of air filter run hours has been exceeded.')
tlCoolingMaxSupplyTemp = MibScalar((1, 3, 6, 1, 4, 1, 850, 103, 1, 5, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlCoolingMaxSupplyTemp.setStatus('current')
if mibBuilder.loadTexts: tlCoolingMaxSupplyTemp.setDescription('Maximum allowed supply air temperature before firing an alarm.')
tlCoolingMinSupplyTemp = MibScalar((1, 3, 6, 1, 4, 1, 850, 103, 1, 5, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlCoolingMinSupplyTemp.setStatus('current')
if mibBuilder.loadTexts: tlCoolingMinSupplyTemp.setDescription('Minimum allowed supply air temperature allowed before firing an alarm.')
tlCoolingTempDiffAlarm = MibScalar((1, 3, 6, 1, 4, 1, 850, 103, 1, 5, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlCoolingTempDiffAlarm.setStatus('current')
if mibBuilder.loadTexts: tlCoolingTempDiffAlarm.setDescription('Maximum allowed air temperature deviation from set allowed before firing an alarm.')
tlCoolingMaxReturnAirTemp = MibScalar((1, 3, 6, 1, 4, 1, 850, 103, 1, 5, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlCoolingMaxReturnAirTemp.setStatus('current')
if mibBuilder.loadTexts: tlCoolingMaxReturnAirTemp.setDescription('When enabled indicated that an alarm should occur when the maximum number of air filter run hours has been exceeded.')
tlCoolingAlarm = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 103, 6))
tlCoolingWellKnownAlarms = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 103, 6, 3))
tlCoolingSupplyAirSensorFault = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 103, 6, 3, 1))
if mibBuilder.loadTexts: tlCoolingSupplyAirSensorFault.setStatus('current')
if mibBuilder.loadTexts: tlCoolingSupplyAirSensorFault.setDescription('The supply air sensor is in fault.')
tlCoolingReturnAirSensorFault = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 103, 6, 3, 2))
if mibBuilder.loadTexts: tlCoolingReturnAirSensorFault.setStatus('current')
if mibBuilder.loadTexts: tlCoolingReturnAirSensorFault.setDescription('The return air sensor is in fault.')
tlCoolingCondenserInletAirSensorFault = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 103, 6, 3, 3))
if mibBuilder.loadTexts: tlCoolingCondenserInletAirSensorFault.setStatus('current')
if mibBuilder.loadTexts: tlCoolingCondenserInletAirSensorFault.setDescription('The condenser inlet air sensor is in fault.')
tlCoolingCondenserOutletAirSensorFault = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 103, 6, 3, 4))
if mibBuilder.loadTexts: tlCoolingCondenserOutletAirSensorFault.setStatus('current')
if mibBuilder.loadTexts: tlCoolingCondenserOutletAirSensorFault.setDescription('The condenser outlet air sensor is in fault.')
tlCoolingSuctionTemperatureSensorFault = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 103, 6, 3, 5))
if mibBuilder.loadTexts: tlCoolingSuctionTemperatureSensorFault.setStatus('current')
if mibBuilder.loadTexts: tlCoolingSuctionTemperatureSensorFault.setDescription('The suction temperature sensor is in fault.')
tlCoolingEvaporatorTemperatureSensorFault = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 103, 6, 3, 6))
if mibBuilder.loadTexts: tlCoolingEvaporatorTemperatureSensorFault.setStatus('current')
if mibBuilder.loadTexts: tlCoolingEvaporatorTemperatureSensorFault.setDescription('The evaporator temperature sensor is in fault.')
tlCoolingAirFilterClogged = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 103, 6, 3, 7))
if mibBuilder.loadTexts: tlCoolingAirFilterClogged.setStatus('current')
if mibBuilder.loadTexts: tlCoolingAirFilterClogged.setDescription('The air filter is clogged.')
tlCoolingAirFilterRunHoursViolation = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 103, 6, 3, 8))
if mibBuilder.loadTexts: tlCoolingAirFilterRunHoursViolation.setStatus('current')
if mibBuilder.loadTexts: tlCoolingAirFilterRunHoursViolation.setDescription('The air filter run hours was violated.')
tlCoolingSuctionPressureSensorFault = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 103, 6, 3, 9))
if mibBuilder.loadTexts: tlCoolingSuctionPressureSensorFault.setStatus('current')
if mibBuilder.loadTexts: tlCoolingSuctionPressureSensorFault.setDescription('The suction pressure sensor is in fault.')
tlCoolingInverterCommunicationsFault = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 103, 6, 3, 10))
if mibBuilder.loadTexts: tlCoolingInverterCommunicationsFault.setStatus('current')
if mibBuilder.loadTexts: tlCoolingInverterCommunicationsFault.setDescription('The inverter communications is in fault.')
tlCoolingRemoteShutdownViaInputContact = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 103, 6, 3, 11))
if mibBuilder.loadTexts: tlCoolingRemoteShutdownViaInputContact.setStatus('current')
if mibBuilder.loadTexts: tlCoolingRemoteShutdownViaInputContact.setDescription('A remote shutdown was triggerd by an input contact.')
tlCoolingCondensatePumpFault = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 103, 6, 3, 12))
if mibBuilder.loadTexts: tlCoolingCondensatePumpFault.setStatus('current')
if mibBuilder.loadTexts: tlCoolingCondensatePumpFault.setDescription('The condensate pump is in fault.')
tlCoolingLowRefrigerantStartupFault = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 103, 6, 3, 13))
if mibBuilder.loadTexts: tlCoolingLowRefrigerantStartupFault.setStatus('current')
if mibBuilder.loadTexts: tlCoolingLowRefrigerantStartupFault.setDescription('The low refrigerant startup is in fault.')
tlCoolingCondenserFanFault = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 103, 6, 3, 14))
if mibBuilder.loadTexts: tlCoolingCondenserFanFault.setStatus('current')
if mibBuilder.loadTexts: tlCoolingCondenserFanFault.setDescription('The condenser fan is in fault.')
tlCoolingCondenserFailure = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 103, 6, 3, 15))
if mibBuilder.loadTexts: tlCoolingCondenserFailure.setStatus('current')
if mibBuilder.loadTexts: tlCoolingCondenserFailure.setDescription('The condenser has failed.')
tlCoolingEvaporatorCoolingFailure = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 103, 6, 3, 16))
if mibBuilder.loadTexts: tlCoolingEvaporatorCoolingFailure.setStatus('current')
if mibBuilder.loadTexts: tlCoolingEvaporatorCoolingFailure.setDescription('The evaporator cooling is in fault.')
tlCoolingReturnAirTempHigh = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 103, 6, 3, 17))
if mibBuilder.loadTexts: tlCoolingReturnAirTempHigh.setStatus('current')
if mibBuilder.loadTexts: tlCoolingReturnAirTempHigh.setDescription('The return air temperature is high.')
tlCoolingSupplyAirTempHigh = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 103, 6, 3, 18))
if mibBuilder.loadTexts: tlCoolingSupplyAirTempHigh.setStatus('current')
if mibBuilder.loadTexts: tlCoolingSupplyAirTempHigh.setDescription('The supply air temperature is high.')
tlCoolingEvaporatorFailure = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 103, 6, 3, 19))
if mibBuilder.loadTexts: tlCoolingEvaporatorFailure.setStatus('current')
if mibBuilder.loadTexts: tlCoolingEvaporatorFailure.setDescription('The evaporator has failed.')
tlCoolingEvaporatorFreezeUp = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 103, 6, 3, 20))
if mibBuilder.loadTexts: tlCoolingEvaporatorFreezeUp.setStatus('current')
if mibBuilder.loadTexts: tlCoolingEvaporatorFreezeUp.setDescription('The evaporator is frozen.')
tlCoolingDischargePressureHigh = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 103, 6, 3, 21))
if mibBuilder.loadTexts: tlCoolingDischargePressureHigh.setStatus('current')
if mibBuilder.loadTexts: tlCoolingDischargePressureHigh.setDescription('The discharge pressure is high.')
tlCoolingPressureGaugeFailure = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 103, 6, 3, 22))
if mibBuilder.loadTexts: tlCoolingPressureGaugeFailure.setStatus('current')
if mibBuilder.loadTexts: tlCoolingPressureGaugeFailure.setDescription('The pressure gauge has failed.')
tlCoolingDischargePressurePersistentHigh = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 103, 6, 3, 23))
if mibBuilder.loadTexts: tlCoolingDischargePressurePersistentHigh.setStatus('current')
if mibBuilder.loadTexts: tlCoolingDischargePressurePersistentHigh.setDescription('The discharge pressure is persistently high.')
tlCoolingSuctionPressureLowStartFailure = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 103, 6, 3, 24))
if mibBuilder.loadTexts: tlCoolingSuctionPressureLowStartFailure.setStatus('current')
if mibBuilder.loadTexts: tlCoolingSuctionPressureLowStartFailure.setDescription('Cannot start due to low suction pressure.')
tlCoolingSuctionPressureLow = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 103, 6, 3, 25))
if mibBuilder.loadTexts: tlCoolingSuctionPressureLow.setStatus('current')
if mibBuilder.loadTexts: tlCoolingSuctionPressureLow.setDescription('The suction pressure is low.')
tlCoolingSuctionPressurePersistentLow = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 103, 6, 3, 26))
if mibBuilder.loadTexts: tlCoolingSuctionPressurePersistentLow.setStatus('current')
if mibBuilder.loadTexts: tlCoolingSuctionPressurePersistentLow.setDescription('The suction pressure is persistently low.')
tlCoolingStartupLinePressureImbalance = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 103, 6, 3, 27))
if mibBuilder.loadTexts: tlCoolingStartupLinePressureImbalance.setStatus('current')
if mibBuilder.loadTexts: tlCoolingStartupLinePressureImbalance.setDescription('The startup line pressure is in imbalance.')
tlCoolingCompressorFailure = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 103, 6, 3, 28))
if mibBuilder.loadTexts: tlCoolingCompressorFailure.setStatus('current')
if mibBuilder.loadTexts: tlCoolingCompressorFailure.setDescription('The compressor has failed.')
tlCoolingCurrentLimit = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 103, 6, 3, 29))
if mibBuilder.loadTexts: tlCoolingCurrentLimit.setStatus('current')
if mibBuilder.loadTexts: tlCoolingCurrentLimit.setDescription('The current is out of range.')
tlCoolingWaterLeak = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 103, 6, 3, 30))
if mibBuilder.loadTexts: tlCoolingWaterLeak.setStatus('current')
if mibBuilder.loadTexts: tlCoolingWaterLeak.setDescription('Water is leaking.')
tlCoolingFanUnderCurrent = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 103, 6, 3, 31))
if mibBuilder.loadTexts: tlCoolingFanUnderCurrent.setStatus('current')
if mibBuilder.loadTexts: tlCoolingFanUnderCurrent.setDescription('The fan is under current.')
tlCoolingFanOverCurrent = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 103, 6, 3, 32))
if mibBuilder.loadTexts: tlCoolingFanOverCurrent.setStatus('current')
if mibBuilder.loadTexts: tlCoolingFanOverCurrent.setDescription('The fan is over current.')
tlCoolingDischargePressureSensorFault = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 103, 6, 3, 33))
if mibBuilder.loadTexts: tlCoolingDischargePressureSensorFault.setStatus('current')
if mibBuilder.loadTexts: tlCoolingDischargePressureSensorFault.setDescription('The discharge pressure sensor is in fault.')
tlCoolingWaterFull = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 103, 6, 3, 34))
if mibBuilder.loadTexts: tlCoolingWaterFull.setStatus('current')
if mibBuilder.loadTexts: tlCoolingWaterFull.setDescription('Water is Full.')
tlConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 20))
tlCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 20, 1))
tlGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 20, 2))
tlSubsetGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 20, 2, 1))
tlBasicGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 20, 2, 2))
tlFullGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 20, 2, 3))
tlV11Groups = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 20, 2, 4))
tlDeprecatedV11Group = ObjectGroup((1, 3, 6, 1, 4, 1, 850, 20, 2, 4, 1)).setObjects(("TRIPPLITE-MIB", "upsTrapCode"), ("TRIPPLITE-MIB", "upsTrapDescription"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tlDeprecatedV11Group = tlDeprecatedV11Group.setStatus('obsolete')
if mibBuilder.loadTexts: tlDeprecatedV11Group.setDescription('The tlDeprecatedV11Group defines objects which were used by Sinetica SNMP cards on Tripplite UPSs and PowerAlert version 11. These objects are currently only used when tlEngineLegacySNMPSupport == true.')
tlDeprecatedV11NotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 850, 20, 2, 4, 2)).setObjects(("TRIPPLITE-MIB", "tlV11upsCritical"), ("TRIPPLITE-MIB", "tlV11upsWarning"), ("TRIPPLITE-MIB", "tlV11upsInformation"), ("TRIPPLITE-MIB", "tlV11upsAlarmCleared"), ("TRIPPLITE-MIB", "tlV11upsAgentStarted"), ("TRIPPLITE-MIB", "tlV11upsAgentStopped"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tlDeprecatedV11NotificationsGroup = tlDeprecatedV11NotificationsGroup.setStatus('obsolete')
if mibBuilder.loadTexts: tlDeprecatedV11NotificationsGroup.setDescription('The tlDeprecatedV11NotificationsGroup defines PowerAlert version 11 notifications. These notifications are being deprecated, but may still be used when tlEngineLegacySNMPSupport = true.')
tlObsoleteV11Group = ObjectGroup((1, 3, 6, 1, 4, 1, 850, 20, 2, 4, 3)).setObjects(("TRIPPLITE-MIB", "upsReceptaclesNumReceptacles"), ("TRIPPLITE-MIB", "upsReceptacleIndex"), ("TRIPPLITE-MIB", "upsReceptacleType"), ("TRIPPLITE-MIB", "upsReceptacleStatus"), ("TRIPPLITE-MIB", "upsReceptacleControl"), ("TRIPPLITE-MIB", "upsEnvTemperature"), ("TRIPPLITE-MIB", "upsEnvHumidity"), ("TRIPPLITE-MIB", "upsContactIndex"), ("TRIPPLITE-MIB", "upsContactName"), ("TRIPPLITE-MIB", "upsContactStatus"), ("TRIPPLITE-MIB", "upsContactConfig"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tlObsoleteV11Group = tlObsoleteV11Group.setStatus('obsolete')
if mibBuilder.loadTexts: tlObsoleteV11Group.setDescription('The tlObsoleteV11Group defines objects which were used by Sinetica SNMP cards on Tripplite UPSs. Most of these objects are obsolete.')
tlUpsFullGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 20, 2, 3, 100))
tlUpsFullIdentGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 850, 20, 2, 3, 100, 1)).setObjects(("TRIPPLITE-MIB", "tlUpsIdentUpsSoftwareChecksum"), ("TRIPPLITE-MIB", "tlUpsIdentSerialNum"), ("TRIPPLITE-MIB", "tlUpsIdentID"), ("TRIPPLITE-MIB", "tlUpsSelectedDeviceID"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tlUpsFullIdentGroup = tlUpsFullIdentGroup.setStatus('current')
if mibBuilder.loadTexts: tlUpsFullIdentGroup.setDescription("The tlUpsFullIdentGroup defines objects which are common to the Ident group of fully compliant Tripplite UPS's")
tlUpsFullBatteryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 850, 20, 2, 3, 100, 2)).setObjects(("TRIPPLITE-MIB", "tlUpsBatteryAge"), ("TRIPPLITE-MIB", "tlUpsTemperatureF"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tlUpsFullBatteryGroup = tlUpsFullBatteryGroup.setStatus('current')
if mibBuilder.loadTexts: tlUpsFullBatteryGroup.setDescription("The tlUpsFullBatteryGroup defines objects which are common to the Battery group of fully compliant Tripplite UPS's")
tlUpsFullAlarmGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 20, 2, 3, 100, 6))
tlUpsFullAlarmObjsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 850, 20, 2, 3, 100, 6, 1)).setObjects(("TRIPPLITE-MIB", "tlUpsAlarmDevName"), ("TRIPPLITE-MIB", "tlUpsAlarmDevLocation"), ("TRIPPLITE-MIB", "tlUpsAlarmCategory"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tlUpsFullAlarmObjsGroup = tlUpsFullAlarmObjsGroup.setStatus('current')
if mibBuilder.loadTexts: tlUpsFullAlarmObjsGroup.setDescription("The tlUpsFullAlarmObjsGroup defines objects which are common to the Alarm group of fully compliant Tripplite UPS's")
tlUpsFullTestGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 850, 20, 2, 3, 100, 7)).setObjects(("TRIPPLITE-MIB", "tlUpsTestDate"), ("TRIPPLITE-MIB", "tlUpsTestResultsDetail"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tlUpsFullTestGroup = tlUpsFullTestGroup.setStatus('current')
if mibBuilder.loadTexts: tlUpsFullTestGroup.setDescription("The tlUpsFullTestGroup defines objects which are common to the Test group of fully compliant Tripplite UPS's")
tlUpsFullControlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 850, 20, 2, 3, 100, 8)).setObjects(("TRIPPLITE-MIB", "tlUpsWatchdogSupported"), ("TRIPPLITE-MIB", "tlUpsWatchdogSecsBeforeReboot"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tlUpsFullControlGroup = tlUpsFullControlGroup.setStatus('current')
if mibBuilder.loadTexts: tlUpsFullControlGroup.setDescription("The tlUpsFullControlGroup defines objects which are common to the Control group of fully compliant Tripplite UPS's")
tlUpsFullConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 850, 20, 2, 3, 100, 9)).setObjects(("TRIPPLITE-MIB", "tlUpsConfigBattReplDate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tlUpsFullConfigGroup = tlUpsFullConfigGroup.setStatus('current')
if mibBuilder.loadTexts: tlUpsFullConfigGroup.setDescription("The tlUpsFullConfigGroup defines objects which are common to the Config group of fully compliant Tripplite UPS's")
tlUpsFullOutletGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 850, 20, 2, 3, 100, 10)).setObjects(("TRIPPLITE-MIB", "tlUpsOutletNumOutlets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tlUpsFullOutletGroup = tlUpsFullOutletGroup.setStatus('current')
if mibBuilder.loadTexts: tlUpsFullOutletGroup.setDescription("The tlUpsFullOutletGroup defines objects which are common to the Outlet group of fully compliant Tripplite UPS's")
trippUPS = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1))
trippUpsReceptacles = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 1))
upsReceptaclesNumReceptacles = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 1, 1), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsReceptaclesNumReceptacles.setStatus('obsolete')
if mibBuilder.loadTexts: upsReceptaclesNumReceptacles.setDescription('The number of available receptacles in this device. This variable indicates the number of rows in the receptacle table.')
upsReceptacleTable = MibTable((1, 3, 6, 1, 4, 1, 850, 1, 1, 2), )
if mibBuilder.loadTexts: upsReceptacleTable.setStatus('obsolete')
if mibBuilder.loadTexts: upsReceptacleTable.setDescription('A list of receptacle table entries. The number of entries is given by the value of upsReceptaclesNumReceptacles.')
upsReceptacleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 1, 1, 2, 1), ).setIndexNames((0, "TRIPPLITE-MIB", "upsReceptacleIndex"))
if mibBuilder.loadTexts: upsReceptacleEntry.setStatus('obsolete')
if mibBuilder.loadTexts: upsReceptacleEntry.setDescription('An entry containing information applicable to a particular receptacle.')
upsReceptacleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 2, 1, 1), PositiveInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsReceptacleIndex.setStatus('obsolete')
if mibBuilder.loadTexts: upsReceptacleIndex.setDescription('The receptacle identifier.')
upsReceptacleType = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("surgeOnly", 1), ("batteryProtected", 2), ("controllableBatteryProtected", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsReceptacleType.setStatus('obsolete')
if mibBuilder.loadTexts: upsReceptacleType.setDescription('The type of receptacle.')
upsReceptacleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsReceptacleStatus.setStatus('obsolete')
if mibBuilder.loadTexts: upsReceptacleStatus.setDescription('The status of receptacle.')
upsReceptacleControl = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("cycle", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsReceptacleControl.setStatus('obsolete')
if mibBuilder.loadTexts: upsReceptacleControl.setDescription("Setting this object to 'on' will turn on the receptacle. Setting this object to 'off' will turn off the receptacle. Setting this object to 'cycle' will turn off and then turn on the receptacle. This action will only take place if the receptacle is controllable (upsReceptacleType = controllableBatteryProtected(3)).")
trippUpsTrapInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 2))
upsTrapCode = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsTrapCode.setStatus('deprecated')
if mibBuilder.loadTexts: upsTrapCode.setDescription('A numeric code identifiying the condition that caused the trap to be sent. If the trap number is 104 (upsAgentStarted) or 105 (upsAgentStopped), this code will indicate whether the SNMP agent is software (1) or hardware (2).')
upsTrapDescription = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 2, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsTrapDescription.setStatus('deprecated')
if mibBuilder.loadTexts: upsTrapDescription.setDescription('The description of the trap.')
trippUpsEnvironment = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 3))
upsEnvTemperature = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsEnvTemperature.setStatus('obsolete')
if mibBuilder.loadTexts: upsEnvTemperature.setDescription('The ambient temperature of the EnviroSense unit (1/10 Deg C).')
upsEnvHumidity = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsEnvHumidity.setStatus('obsolete')
if mibBuilder.loadTexts: upsEnvHumidity.setDescription('The ambient humidity of the EnviroSense unit (% Humidity).')
trippUpsContacts = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 4))
upsContactTable = MibTable((1, 3, 6, 1, 4, 1, 850, 1, 4, 1), )
if mibBuilder.loadTexts: upsContactTable.setStatus('obsolete')
if mibBuilder.loadTexts: upsContactTable.setDescription('A table of contacts attached to the EnviroSense unit.')
upsContactEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 1, 4, 1, 1), ).setIndexNames((0, "TRIPPLITE-MIB", "upsContactIndex"))
if mibBuilder.loadTexts: upsContactEntry.setStatus('obsolete')
if mibBuilder.loadTexts: upsContactEntry.setDescription('An entry containing information applicable to a particular contact.')
upsContactIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 4, 1, 1, 1), PositiveInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsContactIndex.setStatus('obsolete')
if mibBuilder.loadTexts: upsContactIndex.setDescription('The contact identifier.')
upsContactName = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 4, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsContactName.setStatus('obsolete')
if mibBuilder.loadTexts: upsContactName.setDescription('The contact name.')
upsContactStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("normal", 1), ("alarm", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsContactStatus.setStatus('obsolete')
if mibBuilder.loadTexts: upsContactStatus.setDescription('The current status of the contact.')
upsContactConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normallyClosed", 0), ("normallyOpen", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsContactConfig.setStatus('obsolete')
if mibBuilder.loadTexts: upsContactConfig.setDescription('The default configuration of the contact.')
tlV11TrapsPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 0))
tlV11upsCritical = NotificationType((1, 3, 6, 1, 4, 1, 850, 1, 0, 100)).setObjects(("TRIPPLITE-MIB", "upsTrapCode"), ("TRIPPLITE-MIB", "upsTrapDescription"))
if mibBuilder.loadTexts: tlV11upsCritical.setStatus('obsolete')
if mibBuilder.loadTexts: tlV11upsCritical.setDescription('UPS Critical Alarm.')
tlV11upsWarning = NotificationType((1, 3, 6, 1, 4, 1, 850, 1, 0, 101)).setObjects(("TRIPPLITE-MIB", "upsTrapCode"), ("TRIPPLITE-MIB", "upsTrapDescription"))
if mibBuilder.loadTexts: tlV11upsWarning.setStatus('obsolete')
if mibBuilder.loadTexts: tlV11upsWarning.setDescription('UPS Warning.')
tlV11upsInformation = NotificationType((1, 3, 6, 1, 4, 1, 850, 1, 0, 102)).setObjects(("TRIPPLITE-MIB", "upsTrapCode"), ("TRIPPLITE-MIB", "upsTrapDescription"))
if mibBuilder.loadTexts: tlV11upsInformation.setStatus('obsolete')
if mibBuilder.loadTexts: tlV11upsInformation.setDescription('UPS Information.')
tlV11upsAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 850, 1, 0, 103)).setObjects(("TRIPPLITE-MIB", "upsTrapCode"), ("TRIPPLITE-MIB", "upsTrapDescription"))
if mibBuilder.loadTexts: tlV11upsAlarmCleared.setStatus('obsolete')
if mibBuilder.loadTexts: tlV11upsAlarmCleared.setDescription('UPS Alarm Cleared.')
tlV11upsAgentStarted = NotificationType((1, 3, 6, 1, 4, 1, 850, 1, 0, 104)).setObjects(("TRIPPLITE-MIB", "upsTrapCode"), ("TRIPPLITE-MIB", "upsTrapDescription"))
if mibBuilder.loadTexts: tlV11upsAgentStarted.setStatus('obsolete')
if mibBuilder.loadTexts: tlV11upsAgentStarted.setDescription('Agent started.')
tlV11upsAgentStopped = NotificationType((1, 3, 6, 1, 4, 1, 850, 1, 0, 105)).setObjects(("TRIPPLITE-MIB", "upsTrapCode"), ("TRIPPLITE-MIB", "upsTrapDescription"))
if mibBuilder.loadTexts: tlV11upsAgentStopped.setStatus('obsolete')
if mibBuilder.loadTexts: tlV11upsAgentStopped.setDescription('Agent stopped.')
mibBuilder.exportSymbols("TRIPPLITE-MIB", tlEnumerations=tlEnumerations, tlCoolingCondenserInletAirSensorFault=tlCoolingCondenserInletAirSensorFault, tlUpsAlarmInputBad=tlUpsAlarmInputBad, hpux9=hpux9, upsEnvHumidity=upsEnvHumidity, tlUpsAlarmCircuitBreaker1Open=tlUpsAlarmCircuitBreaker1Open, tlCoolingOutputRelayDefault=tlCoolingOutputRelayDefault, tlUpsAlarmUpsOffAsRequested=tlUpsAlarmUpsOffAsRequested, tlCoolingEnvironment=tlCoolingEnvironment, tlUpsInputVoltageIndex=tlUpsInputVoltageIndex, tlCoolingDischargePressurePersistentHigh=tlCoolingDischargePressurePersistentHigh, tlEnvHumidityInAlarm=tlEnvHumidityInAlarm, tlCoolingSupplyAirSensorFault=tlCoolingSupplyAirSensorFault, upsReceptaclesNumReceptacles=upsReceptaclesNumReceptacles, upsReceptacleType=upsReceptacleType, tlUpsAlarmGeneralFault=tlUpsAlarmGeneralFault, tlEnvContactStatus=tlEnvContactStatus, tlCoolingCondFanRunDays=tlCoolingCondFanRunDays, tlCoolingCondenserFailure=tlCoolingCondenserFailure, tlUpsAlarmFanFailure=tlUpsAlarmFanFailure, tlUpsOutletIndex=tlUpsOutletIndex, tlCoolingCompCurrent=tlCoolingCompCurrent, tlUpsFullControlGroup=tlUpsFullControlGroup, tlCoolingRunTimes=tlCoolingRunTimes, tlPASnmpContactPort=tlPASnmpContactPort, tlPAEmailContacts=tlPAEmailContacts, tlCoolingMaxAirFilterRunHours=tlCoolingMaxAirFilterRunHours, tlCoolingReturnAirSensorFault=tlCoolingReturnAirSensorFault, trippUpsContacts=trippUpsContacts, tlUpsSelectedDeviceID=tlUpsSelectedDeviceID, tlUpsInputNumVoltages=tlUpsInputNumVoltages, tlEnvHumidity=tlEnvHumidity, tlUpsOutletType=tlUpsOutletType, trippUPS=trippUPS, tlV11upsInformation=tlV11upsInformation, tlCoolingLowRefrigerantStartupFault=tlCoolingLowRefrigerantStartupFault, tlUpsControlShed=tlUpsControlShed, tlUpsConfigBattReplDate=tlUpsConfigBattReplDate, tlCoolingAirFilterRunHours=tlCoolingAirFilterRunHours, tlUpsInput=tlUpsInput, tlCoolingManufacturer=tlCoolingManufacturer, tlPASnmpContactName=tlPASnmpContactName, tlUpsAlarmMac=tlUpsAlarmMac, tlUpsAlarmPrimaryPowerOutage=tlUpsAlarmPrimaryPowerOutage, tlUpsAlarmCircuitBreaker7Open=tlUpsAlarmCircuitBreaker7Open, upsContactIndex=upsContactIndex, tlUpsAlarmCircuitBreaker4Open=tlUpsAlarmCircuitBreaker4Open, tlUpsOutletGroupNdx=tlUpsOutletGroupNdx, tlCoolingEvapFanSpeed=tlCoolingEvapFanSpeed, tlCoolingCurrentLimit=tlCoolingCurrentLimit, tlPASnmpContactEntry=tlPASnmpContactEntry, tlEnvTemperatureLowLimit=tlEnvTemperatureLowLimit, tlEnvContactTable=tlEnvContactTable, tlCoolingThresholds=tlCoolingThresholds, tlCoolingMinSupplyTemp=tlCoolingMinSupplyTemp, tlCoolingLocation=tlCoolingLocation, tlEnvEnvironment=tlEnvEnvironment, tlEnvContactConfig=tlEnvContactConfig, tlPASnmpContactAuthPassword=tlPASnmpContactAuthPassword, trippUpsReceptacles=trippUpsReceptacles, tlUpsAlarmUpsOutputOff=tlUpsAlarmUpsOutputOff, tlUpsInputVoltageTable=tlUpsInputVoltageTable, tlCoolingCondInletTemp=tlCoolingCondInletTemp, tlUpsOutletPower=tlUpsOutletPower, tlUpsControlUpsOn=tlUpsControlUpsOn, tlUpsOutletShedDataType=tlUpsOutletShedDataType, tlUpsAlarmOutputBad=tlUpsAlarmOutputBad, tlUpsTemperatureF=tlUpsTemperatureF, tlUpsFullGroups=tlUpsFullGroups, tlUpsOutletNumOutlets=tlUpsOutletNumOutlets, tlUpsOutletEntry=tlUpsOutletEntry, tlUpsOutputPowerTotal=tlUpsOutputPowerTotal, tlUpsAlarmTime=tlUpsAlarmTime, tlPAEmailContactAddress=tlPAEmailContactAddress, tlUpsAlarmCurrent3AboveThreshold=tlUpsAlarmCurrent3AboveThreshold, tlV11upsWarning=tlV11upsWarning, upsReceptacleEntry=upsReceptacleEntry, upsContactStatus=upsContactStatus, tlSubsetGroups=tlSubsetGroups, tlUpsMainOutletState=tlUpsMainOutletState, tlCoolingControlType=tlCoolingControlType, tlUpsAlarmTestInProgress=tlUpsAlarmTestInProgress, tlUpsTest=tlUpsTest, tlUpsAlarmIp=tlUpsAlarmIp, tlCoolingCondOutletTemp=tlCoolingCondOutletTemp, tlUPS=tlUPS, tlCoolingCompressorRunDays=tlCoolingCompressorRunDays, tlCoolingUnitCurrent=tlCoolingUnitCurrent, upsTrapDescription=upsTrapDescription, tlUpsOutletGroupEntry=tlUpsOutletGroupEntry, tlEnvContactIndex=tlEnvContactIndex, upsReceptacleStatus=upsReceptacleStatus, tlCoolingAirFilterInterval=tlCoolingAirFilterInterval, tlUpsOutletControl=tlUpsOutletControl, tlEnvTemperatureF=tlEnvTemperatureF, tlCoolingCondFanSpeed=tlCoolingCondFanSpeed, tlUpsAlarmDeviceName=tlUpsAlarmDeviceName, tlUpsAlarmCategory=tlUpsAlarmCategory, upsTrapCode=upsTrapCode, tlUpsWatchdogSupported=tlUpsWatchdogSupported, tlUpsOutletCurrent=tlUpsOutletCurrent, tlPAEmailContactRowStatus=tlPAEmailContactRowStatus, tlCoolingEEVPercentage=tlCoolingEEVPercentage, tlUpsAlarmLowBattery=tlUpsAlarmLowBattery, tlPASnmpContactPrivPassword=tlPASnmpContactPrivPassword, tlUpsTrapAlarmEntryRemovedV1=tlUpsTrapAlarmEntryRemovedV1, tlCoolingIdent=tlCoolingIdent, tlDeprecatedV11Group=tlDeprecatedV11Group, tlUpsAlarmOutputCurrentChanged=tlUpsAlarmOutputCurrentChanged, tlUpsOutletTable=tlUpsOutletTable, tlUpsAlarmBatteryBad=tlUpsAlarmBatteryBad, tlGroups=tlGroups, tlOperatingSystems=tlOperatingSystems, tlUpsAlarmCircuitBreaker8Open=tlUpsAlarmCircuitBreaker8Open, tlUpsOutputCircuitTable=tlUpsOutputCircuitTable, tlCoolingOffOnInputContact=tlCoolingOffOnInputContact, tlUpsTestResultsDetail=tlUpsTestResultsDetail, tlCoolingEvapFanRunDays=tlCoolingEvapFanRunDays, tlFullGroups=tlFullGroups, hpux10=hpux10, tlUpsAlarmDeviceId=tlUpsAlarmDeviceId, tlCoolingAirFilterRunHoursViolation=tlCoolingAirFilterRunHoursViolation, tlCoolingOnOff=tlCoolingOnOff, aix=aix, winnt=winnt, tlCoolingCurrentRemoteTemp=tlCoolingCurrentRemoteTemp, tlUpsAlarmDescr=tlUpsAlarmDescr, tlCoolingFanUnderCurrent=tlCoolingFanUnderCurrent, tlUpsOutletGroupName=tlUpsOutletGroupName, tlCoolingBeepOnKey=tlCoolingBeepOnKey, tlUpsOutputCircuitEntry=tlUpsOutputCircuitEntry, tlUpsAlarmId=tlUpsAlarmId, tlPASystem=tlPASystem, tlUpsTestDate=tlUpsTestDate, tlUpsAlarmSecondaryPowerOutage=tlUpsAlarmSecondaryPowerOutage, tlCoolingEnableAirFilterAlarm=tlCoolingEnableAirFilterAlarm, tlUpsAlarmBypassBad=tlUpsAlarmBypassBad, tlUpsWellKnownControls=tlUpsWellKnownControls, tlUpsOutletGroupDesc=tlUpsOutletGroupDesc, tlUpsOutputCircuitIndex=tlUpsOutputCircuitIndex, tlUpsAlarm=tlUpsAlarm, tlUpsAlarmDiagnosticTestFailed=tlUpsAlarmDiagnosticTestFailed, tlUpsAlarmCircuitBreaker2Open=tlUpsAlarmCircuitBreaker2Open, tlEnvTemperatureData=tlEnvTemperatureData, tlPASnmpContactIndex=tlPASnmpContactIndex, tlUpsFullTestGroup=tlUpsFullTestGroup, tlCoolingPressureGaugeFailure=tlCoolingPressureGaugeFailure, tlUpsAlarmCommunicationsLost=tlUpsAlarmCommunicationsLost, tlEnvContacts=tlEnvContacts, tlCoolingDischargePressureHigh=tlCoolingDischargePressureHigh, tlEnvHumidityData=tlEnvHumidityData, bsdi=bsdi, tlCoolingInputContactType=tlCoolingInputContactType, tlCoolingMaxSupplyTemp=tlCoolingMaxSupplyTemp, tlUpsTrapSystemStartup=tlUpsTrapSystemStartup, ultrix=ultrix, tlCoolingSuctionTemp=tlCoolingSuctionTemp, tlPASnmpContactIpAddress=tlPASnmpContactIpAddress, tlCoolingSetPointTemp=tlCoolingSetPointTemp, tlCoolingDisplayUnits=tlCoolingDisplayUnits, tlPASnmpContacts=tlPASnmpContacts, upsContactEntry=upsContactEntry, tlUpsAlarmCircuitBreaker3Open=tlUpsAlarmCircuitBreaker3Open, tlUpsControlUpsOff=tlUpsControlUpsOff, tlUpsControlRamp=tlUpsControlRamp, tlEnvContactName=tlEnvContactName, sco=sco, tlUpsAlarmBatteryAgeAboveThreshold=tlUpsAlarmBatteryAgeAboveThreshold, tlUpsOutletShedAction=tlUpsOutletShedAction, upsEnvTemperature=upsEnvTemperature, tlUpsLocation=tlUpsLocation, tlCoolingDischargePressure=tlCoolingDischargePressure, tlCoolingAirFilterClogged=tlCoolingAirFilterClogged, tlUpsBatteryAge=tlUpsBatteryAge, win32=win32, tlCoolingWaterLeak=tlCoolingWaterLeak, tlPowerAlert=tlPowerAlert, tlCoolingOffOnLeak=tlCoolingOffOnLeak, tlUpsOutlet=tlUpsOutlet, tlUpsAlarmTempBad=tlUpsAlarmTempBad, tlCoolingEvaporatorFailure=tlCoolingEvaporatorFailure, tlCoolingEvaporatorFreezeUp=tlCoolingEvaporatorFreezeUp, tlUpsOutputCircuits=tlUpsOutputCircuits, tlCoolingRefrigerantTemp=tlCoolingRefrigerantTemp, tlCooling=tlCooling, tlUpsObjects=tlUpsObjects, tlUpsOutletGroupTable=tlUpsOutletGroupTable, tlCoolingStartupLinePressureImbalance=tlCoolingStartupLinePressureImbalance, tlV11upsCritical=tlV11upsCritical, tlCoolingSerialNumber=tlCoolingSerialNumber, tlEnvTemperatureInAlarm=tlEnvTemperatureInAlarm, tlPAEmailContactsTable=tlPAEmailContactsTable, tlEnvTemperatureHighLimit=tlEnvTemperatureHighLimit, tlUpsControl=tlUpsControl, tlUpsAlarmTable=tlUpsAlarmTable, openbsd=openbsd, tlEnvContactEntry=tlEnvContactEntry, tlPASnmpContactRowStatus=tlPASnmpContactRowStatus, tlCoolingFanSpeedOverride=tlCoolingFanSpeedOverride, upsReceptacleControl=upsReceptacleControl, osf=osf, tlUpsOutput=tlUpsOutput, tlUpsAlarmOutputOverload=tlUpsAlarmOutputOverload, linux=linux, tlCoolingRemoteShutdownViaInputContact=tlCoolingRemoteShutdownViaInputContact, solspark=solspark, tlUpsBattery=tlUpsBattery, tlCoolingSuctionTemperatureSensorFault=tlCoolingSuctionTemperatureSensorFault, tlCoolingSuctionPressureLow=tlCoolingSuctionPressureLow, win9x=win9x, trippUpsTrapInfo=trippUpsTrapInfo, tlUpsAlarmCurrent2AboveThreshold=tlUpsAlarmCurrent2AboveThreshold, tlCoolingFanOverCurrent=tlCoolingFanOverCurrent, tlUpsFullIdentGroup=tlUpsFullIdentGroup, tlPASnmpContactSnmpVersion=tlPASnmpContactSnmpVersion, solintel=solintel, tlUpsOutletGroupControl=tlUpsOutletGroupControl, tlBasicGroups=tlBasicGroups, tlCoolingWaterLeakContactType=tlCoolingWaterLeakContactType, tlUpsAlarmUpsSystemOff=tlUpsAlarmUpsSystemOff, tlUpsTrapAlarmEntryAdded=tlUpsTrapAlarmEntryAdded, tlCoolingReturnAirTempHigh=tlCoolingReturnAirTempHigh, tlCoolingMaxReturnAirTemp=tlCoolingMaxReturnAirTemp, tlCoolingSuctionPressureLowStartFailure=tlCoolingSuctionPressureLowStartFailure, tlUpsMainOutletControl=tlUpsMainOutletControl, tlCoolingCondensatePumpFault=tlCoolingCondensatePumpFault, tlV11upsAgentStopped=tlV11upsAgentStopped, tlUpsAlarmCurrent1AboveThreshold=tlUpsAlarmCurrent1AboveThreshold, tlUpsTrapAlarmEntryAddedV1=tlUpsTrapAlarmEntryAddedV1, tlCoolingOutputRelaySource=tlCoolingOutputRelaySource, tlCoolingEvaporatorCoolingFailure=tlCoolingEvaporatorCoolingFailure, tlPASnmpContactsTable=tlPASnmpContactsTable, tlCoolingSuctionPressurePersistentLow=tlCoolingSuctionPressurePersistentLow, tlUpsMainOutletControllable=tlUpsMainOutletControllable, tlCoolingReturnAirTemp=tlCoolingReturnAirTemp, tlUpsFullOutletGroup=tlUpsFullOutletGroup, tlEnvHumidityHighLimit=tlEnvHumidityHighLimit, tlCoolingAutoStart=tlCoolingAutoStart, PYSNMP_MODULE_ID=tripplite, tlUpsAlarmLoadOff=tlUpsAlarmLoadOff, tlUpsAlarmOutputOffAsRequested=tlUpsAlarmOutputOffAsRequested, tlUpsAlarmsPresent=tlUpsAlarmsPresent, tlCoolingSuctionPressure=tlCoolingSuctionPressure, tlCoolingCompFrequency=tlCoolingCompFrequency, tlUpsOutletRampAction=tlUpsOutletRampAction, upsContactConfig=upsContactConfig, tlObsoleteV11Group=tlObsoleteV11Group, tlUpsOutletNumOutletGroups=tlUpsOutletNumOutletGroups, tlCoolingModel=tlCoolingModel, tlUpsMainOutlet=tlUpsMainOutlet, tlPASnmpContactSecurityName=tlPASnmpContactSecurityName, tlCoolingAtomizerRunDays=tlCoolingAtomizerRunDays, tlConformance=tlConformance, tlUpsConfig=tlUpsConfig)
mibBuilder.exportSymbols("TRIPPLITE-MIB", tlV11TrapsPrefix=tlV11TrapsPrefix, tlEnvTemperatureC=tlEnvTemperatureC, tlUpsOutletShedData=tlUpsOutletShedData, tlCoolingInverterCommunicationsFault=tlCoolingInverterCommunicationsFault, tlUpsAlarmCircuitBreaker6Open=tlUpsAlarmCircuitBreaker6Open, tlCompliances=tlCompliances, upsReceptacleTable=upsReceptacleTable, tlUpsAlarmGroup=tlUpsAlarmGroup, unknown=unknown, tlCoolingTempDiffAlarm=tlCoolingTempDiffAlarm, tlPANumberOfEmailContacts=tlPANumberOfEmailContacts, tlUpsAlarmUserDefined=tlUpsAlarmUserDefined, tlUpsWatchdogSecsBeforeReboot=tlUpsWatchdogSecsBeforeReboot, tlUpsAlarmDetail=tlUpsAlarmDetail, tlUpsInputVoltageType=tlUpsInputVoltageType, tlUpsControlSelfTest=tlUpsControlSelfTest, tlUpsTraps=tlUpsTraps, tlUpsIdent=tlUpsIdent, sunos4=sunos4, tlCoolingCompressorFailure=tlCoolingCompressorFailure, tlUpsAlarmShutdownImminent=tlUpsAlarmShutdownImminent, tlUpsOutletRampData=tlUpsOutletRampData, tlUpsAlarmCircuitBreaker5Open=tlUpsAlarmCircuitBreaker5Open, tlUpsTrapSystemShutdown=tlUpsTrapSystemShutdown, tlUpsAlarmChargerFailed=tlUpsAlarmChargerFailed, tlUpsOutletState=tlUpsOutletState, hpux11=hpux11, tlUpsIdentUpsSoftwareChecksum=tlUpsIdentUpsSoftwareChecksum, tlUpsIdentID=tlUpsIdentID, tlPAEmailContactName=tlPAEmailContactName, tlV11Groups=tlV11Groups, tlUpsFullAlarmGroup=tlUpsFullAlarmGroup, tlUpsAlarmLoadLevelAboveThreshold=tlUpsAlarmLoadLevelAboveThreshold, tlUpsTrapAlarmEntryRemoved=tlUpsTrapAlarmEntryRemoved, tlUpsInputVoltage=tlUpsInputVoltage, tlUpsAlarmDepletedBattery=tlUpsAlarmDepletedBattery, tlCoolingAlarm=tlCoolingAlarm, tlUpsAlarmAwaitingPower=tlUpsAlarmAwaitingPower, tlUpsAlarmEntry=tlUpsAlarmEntry, tlUpsOutletGroupState=tlUpsOutletGroupState, tlPAEmailContactEntry=tlPAEmailContactEntry, tlCoolingConfig=tlCoolingConfig, tlUpsOutletName=tlUpsOutletName, tlEnvHumidityLowLimit=tlEnvHumidityLowLimit, tlCoolingFanCurrent=tlCoolingFanCurrent, upsContactTable=upsContactTable, upsContactName=upsContactName, tlCoolingSupplyAirTemp=tlCoolingSupplyAirTemp, tlUpsOutputCircuitStatus=tlUpsOutputCircuitStatus, tlUpsOutletGroup=tlUpsOutletGroup, tlCoolingName=tlCoolingName, tlUpsFullAlarmObjsGroup=tlUpsFullAlarmObjsGroup, tlPAEmailContactIndex=tlPAEmailContactIndex, tlUpsAlarmDevName=tlUpsAlarmDevName, tlUpsOutletRampDataType=tlUpsOutletRampDataType, tlCoolingEvaporatorTemperatureSensorFault=tlCoolingEvaporatorTemperatureSensorFault, tlCoolingEvapSurfaceTemp=tlCoolingEvapSurfaceTemp, tlUpsIdentSerialNum=tlUpsIdentSerialNum, tlCoolingHostSoftwareVersion=tlCoolingHostSoftwareVersion, tlUpsOutputCircuitLoadCurrent=tlUpsOutputCircuitLoadCurrent, tlCoolingWaterFull=tlCoolingWaterFull, tlUpsAlarmOnBattery=tlUpsAlarmOnBattery, tlPAContacts=tlPAContacts, upsReceptacleIndex=upsReceptacleIndex, osx=osx, tlCoolingWellKnownAlarms=tlCoolingWellKnownAlarms, netbsd1=netbsd1, tlUpsAlarmLocation=tlUpsAlarmLocation, tlUpsOutletGroupRowStatus=tlUpsOutletGroupRowStatus, tlUpsAlarmFuseFailure=tlUpsAlarmFuseFailure, tlUpsFullBatteryGroup=tlUpsFullBatteryGroup, tlUpsAlarmShutdownPending=tlUpsAlarmShutdownPending, tlUpsSnmpCardSerialNum=tlUpsSnmpCardSerialNum, tripplite=tripplite, freebsd=freebsd, tlEnviroSense=tlEnviroSense, tlCoolingFirmwareVersion=tlCoolingFirmwareVersion, tlCoolingSuctionPressureSensorFault=tlCoolingSuctionPressureSensorFault, tlV11upsAlarmCleared=tlV11upsAlarmCleared, tlUpsInputVoltageEntry=tlUpsInputVoltageEntry, tlV11upsAgentStarted=tlV11upsAgentStarted, solaris=solaris, tlCoolingDischargePressureSensorFault=tlCoolingDischargePressureSensorFault, tlUpsFullConfigGroup=tlUpsFullConfigGroup, tlCoolingCondenserOutletAirSensorFault=tlCoolingCondenserOutletAirSensorFault, tlUpsWellKnownAlarms=tlUpsWellKnownAlarms, tlPANumberOfSnmpContacts=tlPANumberOfSnmpContacts, irix=irix, tlDeprecatedV11NotificationsGroup=tlDeprecatedV11NotificationsGroup, tlCoolingCondenserFanFault=tlCoolingCondenserFanFault, tlUpsAlarmDevLocation=tlUpsAlarmDevLocation, trippUpsEnvironment=trippUpsEnvironment, tlUpsAlarmOnBypass=tlUpsAlarmOnBypass, tlCoolingSupplyAirTempHigh=tlCoolingSupplyAirTempHigh, tlUpsOutletGroupIndex=tlUpsOutletGroupIndex, tlCoolingCondPumpRunDays=tlCoolingCondPumpRunDays, tlCoolingStatus=tlCoolingStatus)
