#
# PySNMP MIB module ADVA-FSPR7-CAP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ADVA-FSPR7-CAP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:15:12 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
entityShelfConnSlotNo, entityExternalPortPortNo, entityDcnPortNo, entityTerminPointClassName, entityCrossConnFromShelfNo, entityContainerClassName, entityEqptPortNo, entityCrsOptLineFromIndexNo2, entityOptLineClassName, entityExternalPortSlotNo, entityCrsOptLineToIndexNo3, entityCrsOptLineFromIndexNo4, entityFfpExtNo, entityFacilitySlotNo, entityCrossDcnSlotNo, entityDcnExtNo, entityDcnSlotNo, entityFacilityShelfNo, entityCrossConnFromClassName, entityDcnClassName, entityCrsOptLineToClassName, entityContainerShelfNo, entityFilterCableIndex4, entityTerminPointIndexNo2, entityCrossConnClassName, entityFacilityExtNo, entityCrossConnToPortNo, entityCrossDcnExtNo, entityShelfConnExtNo, entityExternalPortShelfNo, entityProtectionCableIndex2, entityOptLineIndexNo1, entityCrsOptLineToIndexNo2, entityCrossDcnPortNo, entityFfpShelfNo, entityCrsOptLineToIndexNo1, entityEqptExtNo, entityOpticalMuxPortNo, entityFfpClassName, entityFilterCableIndex2, entityContainerSlotNo, entityOpticalMuxShelfNo, entityCrsOptLineFromIndexNo1, entityShelfConnPortNo, entityEqptClassName, entityOpticalMuxClassName, entityTerminPointIndexNo3, entityCrossConnFromPortNo, entityProtectionCableIndex1, entityCrossConnToShelfNo, entityContainerExtNo, entityCrossConnToClassName, entityFacilityClassName, entityCrossConnToExtNo, entityTerminPointIndexNo4, entityFfpSlotNo, entityShelfConnShelfNo, entityFacilityPortNo, entityConnectionClassName, entityFilterCableIndex3, entityProtectionCableIndex3, entityCrsOptLineToIndexNo4, entityOpticalMuxSlotNo, entityCrossConnFromSlotNo, entityContainerPortNo, entityDcnShelfNo, entityTerminPointIndexNo1, entityProtectionCableIndex4, entityExternalPortClassName, entityOpticalMuxExtNo, entityCrsOptLineFromClassName, entityFfpPortNo, entityEqptSlotNo, entityEqptShelfNo, entityFilterCableClassName, entityCrossConnFromExtNo, entityFilterCableIndex1, entityCrossDcnClassName, entityCrsOptLineFromIndexNo3, entityCrossConnToSlotNo, entityCrossDcnShelfNo, entityCrsOptLineClassName, entityExternalPortExtNo, entityShelfConnClassName, entityProtectionCableClassName = mibBuilder.importSymbols("ADVA-FSPR7-MIB", "entityShelfConnSlotNo", "entityExternalPortPortNo", "entityDcnPortNo", "entityTerminPointClassName", "entityCrossConnFromShelfNo", "entityContainerClassName", "entityEqptPortNo", "entityCrsOptLineFromIndexNo2", "entityOptLineClassName", "entityExternalPortSlotNo", "entityCrsOptLineToIndexNo3", "entityCrsOptLineFromIndexNo4", "entityFfpExtNo", "entityFacilitySlotNo", "entityCrossDcnSlotNo", "entityDcnExtNo", "entityDcnSlotNo", "entityFacilityShelfNo", "entityCrossConnFromClassName", "entityDcnClassName", "entityCrsOptLineToClassName", "entityContainerShelfNo", "entityFilterCableIndex4", "entityTerminPointIndexNo2", "entityCrossConnClassName", "entityFacilityExtNo", "entityCrossConnToPortNo", "entityCrossDcnExtNo", "entityShelfConnExtNo", "entityExternalPortShelfNo", "entityProtectionCableIndex2", "entityOptLineIndexNo1", "entityCrsOptLineToIndexNo2", "entityCrossDcnPortNo", "entityFfpShelfNo", "entityCrsOptLineToIndexNo1", "entityEqptExtNo", "entityOpticalMuxPortNo", "entityFfpClassName", "entityFilterCableIndex2", "entityContainerSlotNo", "entityOpticalMuxShelfNo", "entityCrsOptLineFromIndexNo1", "entityShelfConnPortNo", "entityEqptClassName", "entityOpticalMuxClassName", "entityTerminPointIndexNo3", "entityCrossConnFromPortNo", "entityProtectionCableIndex1", "entityCrossConnToShelfNo", "entityContainerExtNo", "entityCrossConnToClassName", "entityFacilityClassName", "entityCrossConnToExtNo", "entityTerminPointIndexNo4", "entityFfpSlotNo", "entityShelfConnShelfNo", "entityFacilityPortNo", "entityConnectionClassName", "entityFilterCableIndex3", "entityProtectionCableIndex3", "entityCrsOptLineToIndexNo4", "entityOpticalMuxSlotNo", "entityCrossConnFromSlotNo", "entityContainerPortNo", "entityDcnShelfNo", "entityTerminPointIndexNo1", "entityProtectionCableIndex4", "entityExternalPortClassName", "entityOpticalMuxExtNo", "entityCrsOptLineFromClassName", "entityFfpPortNo", "entityEqptSlotNo", "entityEqptShelfNo", "entityFilterCableClassName", "entityCrossConnFromExtNo", "entityFilterCableIndex1", "entityCrossDcnClassName", "entityCrsOptLineFromIndexNo3", "entityCrossConnToSlotNo", "entityCrossDcnShelfNo", "entityCrsOptLineClassName", "entityExternalPortExtNo", "entityShelfConnClassName", "entityProtectionCableClassName")
FspR7TiltSetCaps, FspR7PRBSTestCaps, FspR7DispersionCompensationCaps, FspR7AdminStateCaps, FspR7Integer32Caps, FspR7OpticalFiberTypeCaps, FspR7CpAuthTypeCaps, FspR7FrameFormatCaps, FspR7LaserForcedOperationCaps, FspR7MappingCaps, FspR7ManualAutoCaps, FspR7DCFiberTypeCaps, FspR7BERThresholdCaps, FspR7ConnectorTypeCaps, FspR7OpticalBandCaps, FspR7PathNodeCaps, FspR7PortModeCaps, FspR7FlowControlModeCaps, FspR7StuffCaps, ApsRevertModeCaps, FspR7TelemetryOutputCaps, FspR7APSCommandCaps, FspR7OspfModeCaps, FspR7ForcedStatusCaps, FspR7OscUsageCaps, FspR7DispersionConfigCaps, FspR7IPv6TypeCaps, FspR7LacpTimeoutCaps, FspR7OpticalSubBandCaps, ApsTypeCaps, FspR7AutoThresResetCaps, FspR7FiberDetectCaps, FspR7ForceConfigCaps, FspR7LossAttenuationCaps, FspR7PmResetCaps, FspR7PortBehaviourCaps, FspR7YesNo, FspR7FunctionCrsCaps, FspR7GainCaps, FspR7FiberBrandCaps, FspR7PrbsPmResetCaps, FspR7NumberOfChannelsCaps, FspR7TypeConnectionCaps, FspR7XfpDecisionThresCaps, FspR7NumberOfChannelsProvCaps, FspR7AseTabOprCaps, FspR7LaneGroupInventoryCaps, FspR7TrafficDirectionCaps, FspR7RowStatusCaps, FspR7TifOutputResetCaps, FspR7BitrateCaps, FspR7OpticalInterfaceReachCaps, FspR7SnmpLongString, FspR7OptUpdateCaps, FspR7VoaModeCaps, FspR7TransmissionModeCaps, FspR7EqlzAdminStateCaps, FspR7OpticalGroupCaps, FspR7Unsigned32Caps, FspR7DisableEnableCaps, FspR7FecTypeCaps, FspR7LaserDelayTimerCaps, FspR7ScramblingCaps, FspR7RoadmNumberCaps, FspR7SupplyTypeCaps, FspR7BaundCaps, FspR7EnableDisableCaps, FspR7ErrorFwdModeCaps, FspR7LineCodingCaps, Counter64StringCaps, FspR7FltrCableTypeCaps, FspR7CapInventoryCaps, FspR7InvertTelemetryInputLogicCaps, FspR7InterfaceTypeCaps, FspR7YesNoCaps, FspR7AlsModeCaps, FspR7RedLinedStateCaps, FspR7DeploymentScenarioCaps, FspR7OtdrPeriodCaps, FspR7LacpModeCaps, FspR7OpuPayloadTypeCaps, FspR7MaxBitErrorRateCaps, FspR7NoYesCaps, FspR7YcableTypeCaps, FspR7SingleFiberLocationCaps, FspR7DispersionModesCaps, FspR7PortRoleCaps, FspR7IpModeCaps, FspR7ChannelIdentifierCaps, FspR7IpTypeCaps, FspR7UntaggedFramesCaps, FspR7BERThresholdSectionCaps, FfpTypeCaps, FspR7GainRangeCaps, FspR7TurnupConfigCaps, FspR7ChannelBandwidthCaps, FspR7PlugDataRateCaps, FspR7CodeGainCaps, FspR7ChannelSpacingCaps, FspR7NdpCleanupCaps, FspR7BidirectionalChannelCaps, FspR7EdfaOutputPowerRatingCaps, FspR7TopologyCaps, FspR7ConnCaps, FspR7PsuOutputPowerCaps, FspR7InitEqualizationCaps, FspR7LagPortTypeCaps, FspR7RlsManCaps, FspR7MuxMethodCaps, FspR7TypeCrsCaps, FspR7TxOffOnTmCaps = mibBuilder.importSymbols("ADVA-FSPR7-TC-MIB", "FspR7TiltSetCaps", "FspR7PRBSTestCaps", "FspR7DispersionCompensationCaps", "FspR7AdminStateCaps", "FspR7Integer32Caps", "FspR7OpticalFiberTypeCaps", "FspR7CpAuthTypeCaps", "FspR7FrameFormatCaps", "FspR7LaserForcedOperationCaps", "FspR7MappingCaps", "FspR7ManualAutoCaps", "FspR7DCFiberTypeCaps", "FspR7BERThresholdCaps", "FspR7ConnectorTypeCaps", "FspR7OpticalBandCaps", "FspR7PathNodeCaps", "FspR7PortModeCaps", "FspR7FlowControlModeCaps", "FspR7StuffCaps", "ApsRevertModeCaps", "FspR7TelemetryOutputCaps", "FspR7APSCommandCaps", "FspR7OspfModeCaps", "FspR7ForcedStatusCaps", "FspR7OscUsageCaps", "FspR7DispersionConfigCaps", "FspR7IPv6TypeCaps", "FspR7LacpTimeoutCaps", "FspR7OpticalSubBandCaps", "ApsTypeCaps", "FspR7AutoThresResetCaps", "FspR7FiberDetectCaps", "FspR7ForceConfigCaps", "FspR7LossAttenuationCaps", "FspR7PmResetCaps", "FspR7PortBehaviourCaps", "FspR7YesNo", "FspR7FunctionCrsCaps", "FspR7GainCaps", "FspR7FiberBrandCaps", "FspR7PrbsPmResetCaps", "FspR7NumberOfChannelsCaps", "FspR7TypeConnectionCaps", "FspR7XfpDecisionThresCaps", "FspR7NumberOfChannelsProvCaps", "FspR7AseTabOprCaps", "FspR7LaneGroupInventoryCaps", "FspR7TrafficDirectionCaps", "FspR7RowStatusCaps", "FspR7TifOutputResetCaps", "FspR7BitrateCaps", "FspR7OpticalInterfaceReachCaps", "FspR7SnmpLongString", "FspR7OptUpdateCaps", "FspR7VoaModeCaps", "FspR7TransmissionModeCaps", "FspR7EqlzAdminStateCaps", "FspR7OpticalGroupCaps", "FspR7Unsigned32Caps", "FspR7DisableEnableCaps", "FspR7FecTypeCaps", "FspR7LaserDelayTimerCaps", "FspR7ScramblingCaps", "FspR7RoadmNumberCaps", "FspR7SupplyTypeCaps", "FspR7BaundCaps", "FspR7EnableDisableCaps", "FspR7ErrorFwdModeCaps", "FspR7LineCodingCaps", "Counter64StringCaps", "FspR7FltrCableTypeCaps", "FspR7CapInventoryCaps", "FspR7InvertTelemetryInputLogicCaps", "FspR7InterfaceTypeCaps", "FspR7YesNoCaps", "FspR7AlsModeCaps", "FspR7RedLinedStateCaps", "FspR7DeploymentScenarioCaps", "FspR7OtdrPeriodCaps", "FspR7LacpModeCaps", "FspR7OpuPayloadTypeCaps", "FspR7MaxBitErrorRateCaps", "FspR7NoYesCaps", "FspR7YcableTypeCaps", "FspR7SingleFiberLocationCaps", "FspR7DispersionModesCaps", "FspR7PortRoleCaps", "FspR7IpModeCaps", "FspR7ChannelIdentifierCaps", "FspR7IpTypeCaps", "FspR7UntaggedFramesCaps", "FspR7BERThresholdSectionCaps", "FfpTypeCaps", "FspR7GainRangeCaps", "FspR7TurnupConfigCaps", "FspR7ChannelBandwidthCaps", "FspR7PlugDataRateCaps", "FspR7CodeGainCaps", "FspR7ChannelSpacingCaps", "FspR7NdpCleanupCaps", "FspR7BidirectionalChannelCaps", "FspR7EdfaOutputPowerRatingCaps", "FspR7TopologyCaps", "FspR7ConnCaps", "FspR7PsuOutputPowerCaps", "FspR7InitEqualizationCaps", "FspR7LagPortTypeCaps", "FspR7RlsManCaps", "FspR7MuxMethodCaps", "FspR7TypeCrsCaps", "FspR7TxOffOnTmCaps")
OtnTcmLevelCaps, VirtualContainerTypeCaps, LoopConfigCaps, fspR7, OhTerminationLevelCaps, ApsHoldoffTimeCaps, FspR7EquipmentTypeCaps, SonetTimingSourceCaps, ProtectionMechCaps, SonetTraceFormCaps, TimModeCaps, EthDuplexModeCaps, OtnPayloadTypeCaps, ApsDirectionCaps, EnableStateCaps = mibBuilder.importSymbols("ADVA-MIB", "OtnTcmLevelCaps", "VirtualContainerTypeCaps", "LoopConfigCaps", "fspR7", "OhTerminationLevelCaps", "ApsHoldoffTimeCaps", "FspR7EquipmentTypeCaps", "SonetTimingSourceCaps", "ProtectionMechCaps", "SonetTraceFormCaps", "TimModeCaps", "EthDuplexModeCaps", "OtnPayloadTypeCaps", "ApsDirectionCaps", "EnableStateCaps")
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
MibScalar, MibTable, MibTableRow, MibTableColumn, iso, NotificationType, Gauge32, ModuleIdentity, Integer32, Counter64, Counter32, IpAddress, MibIdentifier, Unsigned32, Bits, ObjectIdentity, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "NotificationType", "Gauge32", "ModuleIdentity", "Integer32", "Counter64", "Counter32", "IpAddress", "MibIdentifier", "Unsigned32", "Bits", "ObjectIdentity", "TimeTicks")
TextualConvention, DisplayString, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "RowStatus")
advaFspR7Cap = ModuleIdentity((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9))
advaFspR7Cap.setRevisions(('2014-10-15 00:00', '2014-09-29 00:00', '2013-12-04 00:00', '2013-08-20 00:00', '2011-05-22 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: advaFspR7Cap.setRevisionsDescriptions(('FSP3000 F7 Release 13.2.2 MIB.', 'FSP3000 F7 Release 13.2.1 MIB.', 'FSP3000 F7 Release 12.2.1 MIB.', 'FSP3000 F7 Release 12.1.1 MIB.', 'FSP3000 F7 Release 11.2 MIB.',))
if mibBuilder.loadTexts: advaFspR7Cap.setLastUpdated('201410150000Z')
if mibBuilder.loadTexts: advaFspR7Cap.setOrganization('ADVA Optical Networking')
if mibBuilder.loadTexts: advaFspR7Cap.setContactInfo('EMEA Support Phone : +49 89 89 0665 848 Fax : +49 89 89 0665 22848 Email : support@advaoptical.com North American Support Phone : 886 442 ADVA (2382) (toll-free within the US, Canada and Mexico) Fax : + 1 806 741 8529 (elsewhere) Email : support-usa@advaoptical.com Asia Pacific Support Phone : + 1 866 442 2382 (other toll-free numbers available in some countries) Email : support-asia@advaoptical.com')
if mibBuilder.loadTexts: advaFspR7Cap.setDescription('This is a MIB definition for ADVA AG Optical Networking entity management.')
managementCap = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3))
specificMgmtCap = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 2))
eqptMgmtCap = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3))
facilityMgmtCap = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4))
dcnMgmtCap = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 5))
opticalMuxMgmtCap = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 6))
shelfConnMgmtCap = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 7))
envMgmtCap = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 8))
containerMgmtCap = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 9))
opticalLineMgmtCap = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 10))
performanceCap = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6))
performanceFacilityCap = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 4))
performanceFacilityThresholdCap = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 4, 1))
pmEqptCap = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 10))
pmDcnCap = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 11))
pmDcnDataCap = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 11, 1))
pmDcnPhysicalCap = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 11, 2))
pmDcnPhysThresholdCap = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 11, 2, 2))
pmFacilityCap = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12))
pmFacilityDataCap = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1))
pmFacilityDataThresholdCap = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1))
pmFacilityPhysicalCap = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 2))
pmFacilityPhysValueCap = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 2, 1))
pmFacilityPhysThresholdCap = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 2, 2))
pmTerminPointCap = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 13))
pmOptMuxCap = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 14))
pmOptMuxDataCap = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 14, 1))
pmOptMuxPhysicalCap = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 14, 2))
pmOptMuxPhysValueCap = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 14, 2, 1))
pmOptMuxPhysThresholdCap = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 14, 2, 2))
featureSpecificCap = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7))
fiberMapCap = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 1))
eciCap = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 3))
changeServiceCap = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5))
protectionCap = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 6))
crossConnectionCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 2, 6), )
if mibBuilder.loadTexts: crossConnectionCapTable.setStatus('current')
if mibBuilder.loadTexts: crossConnectionCapTable.setDescription('crossConnectionCapTable')
crossConnectionCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 2, 6, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityCrossConnFromShelfNo"), (0, "ADVA-FSPR7-MIB", "entityCrossConnFromSlotNo"), (0, "ADVA-FSPR7-MIB", "entityCrossConnFromPortNo"), (0, "ADVA-FSPR7-MIB", "entityCrossConnFromExtNo"), (0, "ADVA-FSPR7-MIB", "entityCrossConnFromClassName"), (0, "ADVA-FSPR7-MIB", "entityCrossConnToShelfNo"), (0, "ADVA-FSPR7-MIB", "entityCrossConnToSlotNo"), (0, "ADVA-FSPR7-MIB", "entityCrossConnToPortNo"), (0, "ADVA-FSPR7-MIB", "entityCrossConnToExtNo"), (0, "ADVA-FSPR7-MIB", "entityCrossConnToClassName"), (0, "ADVA-FSPR7-MIB", "entityCrossConnClassName"))
if mibBuilder.loadTexts: crossConnectionCapEntry.setStatus('current')
if mibBuilder.loadTexts: crossConnectionCapEntry.setDescription('Entry of crossConnectionCapTable')
crossConnectionCapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 2, 6, 1, 1), FspR7RowStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crossConnectionCapRowStatus.setStatus('current')
if mibBuilder.loadTexts: crossConnectionCapRowStatus.setDescription('Cross Connection Capability RowStatus.')
crossConnectionCapAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 2, 6, 1, 2), FspR7AdminStateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crossConnectionCapAdmin.setStatus('current')
if mibBuilder.loadTexts: crossConnectionCapAdmin.setDescription('Cross Connection Capability Adminstrative State.')
crossConnectionCapRedLineState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 2, 6, 1, 3), FspR7RedLinedStateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crossConnectionCapRedLineState.setStatus('current')
if mibBuilder.loadTexts: crossConnectionCapRedLineState.setDescription('Cross Connection Capability Red Lined State.')
crossConnectionCapConn = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 2, 6, 1, 4), FspR7ConnCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crossConnectionCapConn.setStatus('current')
if mibBuilder.loadTexts: crossConnectionCapConn.setDescription('Cross Connection Capability Direction.')
crossConnectionCapAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 2, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crossConnectionCapAlias.setStatus('current')
if mibBuilder.loadTexts: crossConnectionCapAlias.setDescription('Cross Connection Capability Alias.')
crossConnectionCapPathNode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 2, 6, 1, 6), FspR7PathNodeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crossConnectionCapPathNode.setStatus('current')
if mibBuilder.loadTexts: crossConnectionCapPathNode.setDescription('Cross Connection Capability Path Node.')
crossConnectionCapTunnelAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 2, 6, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crossConnectionCapTunnelAid.setStatus('current')
if mibBuilder.loadTexts: crossConnectionCapTunnelAid.setDescription('Cross Connection Capability Tunnel AID.')
crossConnectionCapType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 2, 6, 1, 8), FspR7InterfaceTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crossConnectionCapType.setStatus('current')
if mibBuilder.loadTexts: crossConnectionCapType.setDescription('Cross Connection Capability Type Facility.')
crossConnectionCapCrsFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 2, 6, 1, 9), FspR7FunctionCrsCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crossConnectionCapCrsFunction.setStatus('current')
if mibBuilder.loadTexts: crossConnectionCapCrsFunction.setDescription('Cross Connection Capability Crs Function.')
crossConnectionCapCrsFromAidTwo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 2, 6, 1, 10), FspR7SnmpLongString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crossConnectionCapCrsFromAidTwo.setStatus('current')
if mibBuilder.loadTexts: crossConnectionCapCrsFromAidTwo.setDescription('AID of a CH-#, VCH or VCHn instance.')
crossConnectionCapCrsToAidTwo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 2, 6, 1, 11), FspR7SnmpLongString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crossConnectionCapCrsToAidTwo.setStatus('current')
if mibBuilder.loadTexts: crossConnectionCapCrsToAidTwo.setDescription('Second AID of a CH-C#, VCH or a VCHn instance.')
crossConnectionCapCrsMcAidList = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 2, 6, 1, 12), FspR7SnmpLongString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crossConnectionCapCrsMcAidList.setStatus('current')
if mibBuilder.loadTexts: crossConnectionCapCrsMcAidList.setDescription('A list of AIDs used in multicast variants of CRS')
crossConnectionCapCrsContAidList = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 2, 6, 1, 13), FspR7SnmpLongString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crossConnectionCapCrsContAidList.setStatus('current')
if mibBuilder.loadTexts: crossConnectionCapCrsContAidList.setDescription('List of AIDs for Continue Points of a CRS')
crossConnectionCapCrsContAidListTwo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 2, 6, 1, 14), FspR7SnmpLongString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crossConnectionCapCrsContAidListTwo.setStatus('current')
if mibBuilder.loadTexts: crossConnectionCapCrsContAidListTwo.setDescription('Second list of AIDs for Continue Points of a CRS')
crossOpticalLineCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 2, 7), )
if mibBuilder.loadTexts: crossOpticalLineCapTable.setStatus('current')
if mibBuilder.loadTexts: crossOpticalLineCapTable.setDescription('crossOpticalLineCapTable')
crossOpticalLineCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 2, 7, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityCrsOptLineFromIndexNo1"), (0, "ADVA-FSPR7-MIB", "entityCrsOptLineFromIndexNo2"), (0, "ADVA-FSPR7-MIB", "entityCrsOptLineFromIndexNo3"), (0, "ADVA-FSPR7-MIB", "entityCrsOptLineFromIndexNo4"), (0, "ADVA-FSPR7-MIB", "entityCrsOptLineFromClassName"), (0, "ADVA-FSPR7-MIB", "entityCrsOptLineToIndexNo1"), (0, "ADVA-FSPR7-MIB", "entityCrsOptLineToIndexNo2"), (0, "ADVA-FSPR7-MIB", "entityCrsOptLineToIndexNo3"), (0, "ADVA-FSPR7-MIB", "entityCrsOptLineToIndexNo4"), (0, "ADVA-FSPR7-MIB", "entityCrsOptLineToClassName"), (0, "ADVA-FSPR7-MIB", "entityCrsOptLineClassName"))
if mibBuilder.loadTexts: crossOpticalLineCapEntry.setStatus('current')
if mibBuilder.loadTexts: crossOpticalLineCapEntry.setDescription('Entry of crossOpticalLineCapTable')
crossOpticalLineCapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 2, 7, 1, 1), FspR7RowStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crossOpticalLineCapRowStatus.setStatus('current')
if mibBuilder.loadTexts: crossOpticalLineCapRowStatus.setDescription('Cross Optical Line Capability RowStatus.')
crossOpticalLineCapRedLineState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 2, 7, 1, 2), FspR7RedLinedStateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crossOpticalLineCapRedLineState.setStatus('current')
if mibBuilder.loadTexts: crossOpticalLineCapRedLineState.setDescription('Cross Optical Line Capability Red Lined State.')
crossOpticalLineCapConn = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 2, 7, 1, 3), FspR7ConnCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crossOpticalLineCapConn.setStatus('current')
if mibBuilder.loadTexts: crossOpticalLineCapConn.setDescription('Cross Optical Line Capability Direction.')
crossOpticalLineCapCrsType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 2, 7, 1, 4), FspR7TypeCrsCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crossOpticalLineCapCrsType.setStatus('current')
if mibBuilder.loadTexts: crossOpticalLineCapCrsType.setDescription('Cross Optical Line Capability Type.')
crossOpticalLineCapAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 2, 7, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crossOpticalLineCapAlias.setStatus('current')
if mibBuilder.loadTexts: crossOpticalLineCapAlias.setDescription('Cross Optical Line Capability Alias.')
crossOpticalLineCapTunnelAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 2, 7, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crossOpticalLineCapTunnelAid.setStatus('current')
if mibBuilder.loadTexts: crossOpticalLineCapTunnelAid.setDescription('Cross Optical Line Capability Tunnel AID.')
endOfCrossOpticalLineCapTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 2, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfCrossOpticalLineCapTable.setStatus('current')
if mibBuilder.loadTexts: endOfCrossOpticalLineCapTable.setDescription('')
crossDcnCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 2, 9), )
if mibBuilder.loadTexts: crossDcnCapTable.setStatus('current')
if mibBuilder.loadTexts: crossDcnCapTable.setDescription('crossDcnCapTable')
crossDcnCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 2, 9, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityCrossDcnShelfNo"), (0, "ADVA-FSPR7-MIB", "entityCrossDcnSlotNo"), (0, "ADVA-FSPR7-MIB", "entityCrossDcnPortNo"), (0, "ADVA-FSPR7-MIB", "entityCrossDcnExtNo"), (0, "ADVA-FSPR7-MIB", "entityCrossDcnClassName"))
if mibBuilder.loadTexts: crossDcnCapEntry.setStatus('current')
if mibBuilder.loadTexts: crossDcnCapEntry.setDescription('Entry of crossDcnCapTable')
crossDcnCapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 2, 9, 1, 1), FspR7RowStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crossDcnCapRowStatus.setStatus('current')
if mibBuilder.loadTexts: crossDcnCapRowStatus.setDescription('RowStatus object is used to create or delete a row in the table.')
crossDcnCapType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 2, 9, 1, 2), FspR7TypeConnectionCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crossDcnCapType.setStatus('current')
if mibBuilder.loadTexts: crossDcnCapType.setDescription('Type of Cross-Connect')
crossDcnCapLink = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 2, 9, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crossDcnCapLink.setStatus('current')
if mibBuilder.loadTexts: crossDcnCapLink.setDescription('Address Identifier of PPPIP LINK Entity.')
crossDcnCapEcc = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 2, 9, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crossDcnCapEcc.setStatus('current')
if mibBuilder.loadTexts: crossDcnCapEcc.setDescription('Address Identifier of ECC Entity.')
endOfCrossDcnCapTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 2, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfCrossDcnCapTable.setStatus('current')
if mibBuilder.loadTexts: endOfCrossDcnCapTable.setDescription('')
endOfSpecificMgmtCap = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 2, 10000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfSpecificMgmtCap.setStatus('current')
if mibBuilder.loadTexts: endOfSpecificMgmtCap.setDescription('')
shelfCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 1), )
if mibBuilder.loadTexts: shelfCapTable.setStatus('current')
if mibBuilder.loadTexts: shelfCapTable.setDescription('shelfCapTable')
shelfCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 1, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityEqptShelfNo"), (0, "ADVA-FSPR7-MIB", "entityEqptSlotNo"), (0, "ADVA-FSPR7-MIB", "entityEqptPortNo"), (0, "ADVA-FSPR7-MIB", "entityEqptExtNo"), (0, "ADVA-FSPR7-MIB", "entityEqptClassName"))
if mibBuilder.loadTexts: shelfCapEntry.setStatus('current')
if mibBuilder.loadTexts: shelfCapEntry.setDescription('Entry of shelfCapTable')
shelfCapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 1, 1, 1), FspR7RowStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfCapRowStatus.setStatus('current')
if mibBuilder.loadTexts: shelfCapRowStatus.setDescription('RowStatus object is used to create or delete a row in the table.')
shelfCapPsuOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 1, 1, 2), FspR7PsuOutputPowerCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfCapPsuOutputPower.setStatus('current')
if mibBuilder.loadTexts: shelfCapPsuOutputPower.setDescription('Maximum PSU Output Power')
shelfCapType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 1, 1, 3), FspR7EquipmentTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfCapType.setStatus('current')
if mibBuilder.loadTexts: shelfCapType.setDescription("The TYPE of Equipment and the MODE setting determine uniquely the number and allowed TYPE's of the provisionable dependent entities (plugs, interfaces, modules)")
shelfCapRack = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfCapRack.setStatus('current')
if mibBuilder.loadTexts: shelfCapRack.setDescription('Rack Containing Shelf')
shelfCapSupply = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 1, 1, 5), FspR7SupplyTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfCapSupply.setStatus('current')
if mibBuilder.loadTexts: shelfCapSupply.setDescription('The kind of power supply - provisioned value')
shelfCapBandProvision = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 1, 1, 6), FspR7OpticalBandCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfCapBandProvision.setStatus('current')
if mibBuilder.loadTexts: shelfCapBandProvision.setDescription('Band Provision. Reference to BAND__INVENTORY.')
shelfCapAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 1, 1, 7), FspR7AdminStateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfCapAdmin.setStatus('current')
if mibBuilder.loadTexts: shelfCapAdmin.setDescription('The Administrative State will be displayed in the GUI with full name values; it will be differently displayed in TL1 syntax according to TL1 display rules. The transaction into the UAS state requires a special destroy/delete function')
shelfCapRackNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 1, 1, 8), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfCapRackNumber.setStatus('current')
if mibBuilder.loadTexts: shelfCapRackNumber.setDescription('Number of the Rack')
shelfCapRackOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 1, 1, 9), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfCapRackOrder.setStatus('current')
if mibBuilder.loadTexts: shelfCapRackOrder.setDescription('Number place where the Shelf is placed in the rack (buttom up counting)')
shelfCapAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfCapAlias.setStatus('current')
if mibBuilder.loadTexts: shelfCapAlias.setDescription('User Applied Descriptor')
shelfCapSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 1, 1, 11), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfCapSlot.setStatus('current')
if mibBuilder.loadTexts: shelfCapSlot.setDescription('Slot Position')
endOfShelfCapTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfShelfCapTable.setStatus('current')
if mibBuilder.loadTexts: endOfShelfCapTable.setDescription('')
fanCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 3), )
if mibBuilder.loadTexts: fanCapTable.setStatus('current')
if mibBuilder.loadTexts: fanCapTable.setDescription('fanCapTable')
fanCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 3, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityEqptShelfNo"), (0, "ADVA-FSPR7-MIB", "entityEqptSlotNo"), (0, "ADVA-FSPR7-MIB", "entityEqptPortNo"), (0, "ADVA-FSPR7-MIB", "entityEqptExtNo"), (0, "ADVA-FSPR7-MIB", "entityEqptClassName"))
if mibBuilder.loadTexts: fanCapEntry.setStatus('current')
if mibBuilder.loadTexts: fanCapEntry.setDescription('Entry of fanCapTable')
fanCapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 3, 1, 1), FspR7RowStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanCapRowStatus.setStatus('current')
if mibBuilder.loadTexts: fanCapRowStatus.setDescription('RowStatus object is used to create or delete a row in the table.')
fanCapForceDestroy = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 3, 1, 2), FspR7ForcedStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanCapForceDestroy.setStatus('current')
if mibBuilder.loadTexts: fanCapForceDestroy.setDescription('Forced Destroy')
fanCapAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 3, 1, 3), FspR7AdminStateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanCapAdmin.setStatus('current')
if mibBuilder.loadTexts: fanCapAdmin.setDescription('The Administrative State will be displayed in the GUI with full name values; it will be differently displayed in TL1 syntax according to TL1 display rules. The transaction into the UAS state requires a special destroy/delete function')
fanCapType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 3, 1, 4), FspR7EquipmentTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanCapType.setStatus('current')
if mibBuilder.loadTexts: fanCapType.setDescription("The TYPE of Equipment and the MODE setting determine uniquely the number and allowed TYPE's of the provisionable dependent entities (plugs, interfaces, modules)")
fanCapAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanCapAlias.setStatus('current')
if mibBuilder.loadTexts: fanCapAlias.setDescription('User Applied Descriptor')
fanCapOutputReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 3, 1, 6), FspR7TifOutputResetCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanCapOutputReset.setStatus('current')
if mibBuilder.loadTexts: fanCapOutputReset.setDescription('Has the same function as the HW switch at the UTM board')
endOfFanCapTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfFanCapTable.setStatus('current')
if mibBuilder.loadTexts: endOfFanCapTable.setDescription('')
plugCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 5), )
if mibBuilder.loadTexts: plugCapTable.setStatus('current')
if mibBuilder.loadTexts: plugCapTable.setDescription('plugCapTable')
plugCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 5, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityEqptShelfNo"), (0, "ADVA-FSPR7-MIB", "entityEqptSlotNo"), (0, "ADVA-FSPR7-MIB", "entityEqptPortNo"), (0, "ADVA-FSPR7-MIB", "entityEqptExtNo"), (0, "ADVA-FSPR7-MIB", "entityEqptClassName"))
if mibBuilder.loadTexts: plugCapEntry.setStatus('current')
if mibBuilder.loadTexts: plugCapEntry.setDescription('Entry of plugCapTable')
plugCapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 5, 1, 1), FspR7RowStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plugCapRowStatus.setStatus('current')
if mibBuilder.loadTexts: plugCapRowStatus.setDescription('RowStatus object is used to create or delete a row in the table.')
plugCapConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 5, 1, 2), FspR7ConnectorTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plugCapConnector.setStatus('current')
if mibBuilder.loadTexts: plugCapConnector.setDescription('Connector')
plugCapType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 5, 1, 3), FspR7EquipmentTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plugCapType.setStatus('current')
if mibBuilder.loadTexts: plugCapType.setDescription("The TYPE of Equipment and the MODE setting determine uniquely the number and allowed TYPE's of the provisionable dependent entities (plugs, interfaces, modules)")
plugCapReach = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 5, 1, 4), FspR7OpticalInterfaceReachCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plugCapReach.setStatus('current')
if mibBuilder.loadTexts: plugCapReach.setDescription('Reach')
plugCapLoopbackAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 5, 1, 5), FspR7Unsigned32Caps()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: plugCapLoopbackAttenuation.setStatus('current')
if mibBuilder.loadTexts: plugCapLoopbackAttenuation.setDescription('Loop back attenuation used for Optojack SE plugs')
plugCapTransmitChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 5, 1, 6), FspR7ChannelIdentifierCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plugCapTransmitChannel.setStatus('current')
if mibBuilder.loadTexts: plugCapTransmitChannel.setDescription('Channel')
plugCapAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 5, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plugCapAlias.setStatus('current')
if mibBuilder.loadTexts: plugCapAlias.setDescription('User Applied Descriptor')
plugCapLaneGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 5, 1, 8), FspR7LaneGroupInventoryCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plugCapLaneGroup.setStatus('current')
if mibBuilder.loadTexts: plugCapLaneGroup.setDescription('Lane group to provision')
plugCapMaxDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 5, 1, 9), FspR7PlugDataRateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plugCapMaxDataRate.setStatus('current')
if mibBuilder.loadTexts: plugCapMaxDataRate.setDescription('Rate')
plugCapThirdPartyUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 5, 1, 10), EnableStateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plugCapThirdPartyUsage.setStatus('current')
if mibBuilder.loadTexts: plugCapThirdPartyUsage.setDescription('Usage of 3rd Party Plugs')
plugCapAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 5, 1, 11), FspR7AdminStateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plugCapAdmin.setStatus('current')
if mibBuilder.loadTexts: plugCapAdmin.setDescription('The Administrative State will be displayed in the GUI with full name values; it will be differently displayed in TL1 syntax according to TL1 display rules. The transaction into the UAS state requires a special destroy/delete function')
plugCapBidirectionalChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 5, 1, 12), FspR7BidirectionalChannelCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plugCapBidirectionalChannel.setStatus('current')
if mibBuilder.loadTexts: plugCapBidirectionalChannel.setDescription('Bidirectional Channel Rates from Provisioning')
plugCapChannelSpacingProvision = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 5, 1, 13), FspR7ChannelSpacingCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plugCapChannelSpacingProvision.setStatus('current')
if mibBuilder.loadTexts: plugCapChannelSpacingProvision.setDescription('Channel Space Provision, reference to CHA-SPC__INVENTORY')
endOfPlugCapTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfPlugCapTable.setStatus('current')
if mibBuilder.loadTexts: endOfPlugCapTable.setDescription('')
moduleCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 7), )
if mibBuilder.loadTexts: moduleCapTable.setStatus('current')
if mibBuilder.loadTexts: moduleCapTable.setDescription('moduleCapTable')
moduleCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 7, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityEqptShelfNo"), (0, "ADVA-FSPR7-MIB", "entityEqptSlotNo"), (0, "ADVA-FSPR7-MIB", "entityEqptPortNo"), (0, "ADVA-FSPR7-MIB", "entityEqptExtNo"), (0, "ADVA-FSPR7-MIB", "entityEqptClassName"))
if mibBuilder.loadTexts: moduleCapEntry.setStatus('current')
if mibBuilder.loadTexts: moduleCapEntry.setDescription('Entry of moduleCapTable')
moduleCapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 7, 1, 1), FspR7RowStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleCapRowStatus.setStatus('current')
if mibBuilder.loadTexts: moduleCapRowStatus.setDescription('RowStatus object is used to create or delete a row in the table.')
moduleCapForceDestroy = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 7, 1, 2), FspR7ForcedStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleCapForceDestroy.setStatus('current')
if mibBuilder.loadTexts: moduleCapForceDestroy.setDescription('Forced Destroy')
moduleCapPsuOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 7, 1, 3), FspR7PsuOutputPowerCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleCapPsuOutputPower.setStatus('current')
if mibBuilder.loadTexts: moduleCapPsuOutputPower.setDescription('Maximum PSU Output Power')
moduleCapPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 7, 1, 4), FspR7EdfaOutputPowerRatingCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleCapPower.setStatus('current')
if mibBuilder.loadTexts: moduleCapPower.setDescription('Optical Output Power Rating - Provision')
moduleCapReach = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 7, 1, 5), FspR7OpticalInterfaceReachCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleCapReach.setStatus('current')
if mibBuilder.loadTexts: moduleCapReach.setDescription('Reach')
moduleCapInitEqlz = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 7, 1, 6), FspR7InitEqualizationCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleCapInitEqlz.setStatus('current')
if mibBuilder.loadTexts: moduleCapInitEqlz.setDescription('Initiate Equalization')
moduleCapLanAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 7, 1, 7), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleCapLanAid.setStatus('current')
if mibBuilder.loadTexts: moduleCapLanAid.setDescription('AID of LAN')
moduleCapType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 7, 1, 8), FspR7EquipmentTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleCapType.setStatus('current')
if mibBuilder.loadTexts: moduleCapType.setDescription("The TYPE of Equipment and the MODE setting determine uniquely the number and allowed TYPE's of the provisionable dependent entities (plugs, interfaces, modules)")
moduleCapMapping = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 7, 1, 9), FspR7MappingCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleCapMapping.setStatus('current')
if mibBuilder.loadTexts: moduleCapMapping.setDescription('Type of mapping; transparent or framing')
moduleCapGainRange = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 7, 1, 10), FspR7GainRangeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleCapGainRange.setStatus('current')
if mibBuilder.loadTexts: moduleCapGainRange.setDescription('EDFA gain range to provision')
moduleCapSfProvision = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 7, 1, 11), FspR7SingleFiberLocationCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleCapSfProvision.setStatus('current')
if mibBuilder.loadTexts: moduleCapSfProvision.setDescription('determines the location (A or B) for Single Fiber applications')
moduleCapCapabilityLevelProvision = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 7, 1, 12), FspR7CapInventoryCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleCapCapabilityLevelProvision.setStatus('current')
if mibBuilder.loadTexts: moduleCapCapabilityLevelProvision.setDescription('Capability level provisioned')
moduleCapDCFiberType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 7, 1, 13), FspR7DCFiberTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleCapDCFiberType.setStatus('current')
if mibBuilder.loadTexts: moduleCapDCFiberType.setDescription('Dispersion Compensation Fibertype')
moduleCapChannelsProvision = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 7, 1, 14), FspR7NumberOfChannelsProvCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleCapChannelsProvision.setStatus('current')
if mibBuilder.loadTexts: moduleCapChannelsProvision.setDescription('Number of channels supported by an entity')
moduleCapFiberDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 7, 1, 15), FspR7FiberDetectCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleCapFiberDetect.setStatus('current')
if mibBuilder.loadTexts: moduleCapFiberDetect.setDescription('Fiber Detect')
moduleCapSupply = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 7, 1, 16), FspR7SupplyTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleCapSupply.setStatus('current')
if mibBuilder.loadTexts: moduleCapSupply.setDescription('The kind of power supply - provisioned value')
moduleCapGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 7, 1, 17), FspR7OpticalGroupCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleCapGroup.setStatus('current')
if mibBuilder.loadTexts: moduleCapGroup.setDescription('The Group of 4 DWDM channels or the Group of 4 CWDM channels')
moduleCapDeploy = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 7, 1, 18), FspR7DeploymentScenarioCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleCapDeploy.setStatus('current')
if mibBuilder.loadTexts: moduleCapDeploy.setDescription('Describes how the card is applied related to a network scenario')
moduleCapLagSysPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 7, 1, 19), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleCapLagSysPrio.setStatus('current')
if mibBuilder.loadTexts: moduleCapLagSysPrio.setDescription('Link Aggregation Group Actor System Priority Part of LAG ID')
moduleCapTransmitChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 7, 1, 20), FspR7ChannelIdentifierCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleCapTransmitChannel.setStatus('current')
if mibBuilder.loadTexts: moduleCapTransmitChannel.setDescription('Channel')
moduleCapBand = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 7, 1, 21), FspR7OpticalBandCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleCapBand.setStatus('current')
if mibBuilder.loadTexts: moduleCapBand.setDescription('The optical band of the module.')
moduleCapTrafficDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 7, 1, 22), FspR7TrafficDirectionCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleCapTrafficDirection.setStatus('current')
if mibBuilder.loadTexts: moduleCapTrafficDirection.setDescription('Traffic Direction')
moduleCapIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 7, 1, 23), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleCapIpAddr.setStatus('current')
if mibBuilder.loadTexts: moduleCapIpAddr.setDescription('IP Address assigned to LAN IP Interface')
moduleCapDispersionCompensation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 7, 1, 24), FspR7DispersionCompensationCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleCapDispersionCompensation.setStatus('current')
if mibBuilder.loadTexts: moduleCapDispersionCompensation.setDescription('Dispersion Compensation Value in km of SSMF fiber')
moduleCapActivateDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 7, 1, 25), FspR7YesNoCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleCapActivateDetect.setStatus('current')
if mibBuilder.loadTexts: moduleCapActivateDetect.setDescription('Initialize Topology Detection')
moduleCapOscUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 7, 1, 26), FspR7OscUsageCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleCapOscUsage.setStatus('current')
if mibBuilder.loadTexts: moduleCapOscUsage.setDescription('Select if and how the OSC is to be used on an amplifier')
moduleCapAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 7, 1, 27), FspR7AdminStateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleCapAdmin.setStatus('current')
if mibBuilder.loadTexts: moduleCapAdmin.setDescription('The Administrative State will be displayed in the GUI with full name values; it will be differently displayed in TL1 syntax according to TL1 display rules. The transaction into the UAS state requires a special destroy/delete function')
moduleCapScrambling = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 7, 1, 28), FspR7ScramblingCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleCapScrambling.setStatus('current')
if mibBuilder.loadTexts: moduleCapScrambling.setDescription('Configuration of scrambling functionality for Virtual Facilities')
moduleCapChannelsNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 7, 1, 29), FspR7NumberOfChannelsCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleCapChannelsNumber.setStatus('current')
if mibBuilder.loadTexts: moduleCapChannelsNumber.setDescription('Number of channels supported by an entity')
moduleCapChannelSpacingProvision = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 7, 1, 30), FspR7ChannelSpacingCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleCapChannelSpacingProvision.setStatus('current')
if mibBuilder.loadTexts: moduleCapChannelSpacingProvision.setDescription('Channel Space Provision, reference to CHA-SPC__INVENTORY')
moduleCapMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 7, 1, 31), FspR7TransmissionModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleCapMode.setStatus('current')
if mibBuilder.loadTexts: moduleCapMode.setDescription('Mode of the module, determine operation or functionality')
moduleCapSubBandProvision = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 7, 1, 32), FspR7OpticalSubBandCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleCapSubBandProvision.setStatus('current')
if mibBuilder.loadTexts: moduleCapSubBandProvision.setDescription('Subband - Provision')
moduleCapAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 7, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleCapAlias.setStatus('current')
if mibBuilder.loadTexts: moduleCapAlias.setDescription('User Applied Descriptor')
moduleCapFiberType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 7, 1, 34), FspR7OpticalFiberTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleCapFiberType.setStatus('current')
if mibBuilder.loadTexts: moduleCapFiberType.setDescription('Fiber of Optical Interface - Provision, Reference to FIBER__INVENTORY')
moduleCapChannelSpacing = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 7, 1, 35), FspR7ChannelSpacingCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleCapChannelSpacing.setStatus('current')
if mibBuilder.loadTexts: moduleCapChannelSpacing.setDescription('ITU Grid channel spacing')
moduleCapOutputReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 7, 1, 36), FspR7TifOutputResetCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleCapOutputReset.setStatus('current')
if mibBuilder.loadTexts: moduleCapOutputReset.setDescription('Has the same function as the HW switch at the UTM board')
moduleCapRoadmNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 7, 1, 37), FspR7RoadmNumberCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleCapRoadmNumber.setStatus('current')
if mibBuilder.loadTexts: moduleCapRoadmNumber.setDescription('Number for ROADM module typically associated with a Network Fiber or Degree')
moduleCapTopology = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 7, 1, 38), FspR7TopologyCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleCapTopology.setStatus('current')
if mibBuilder.loadTexts: moduleCapTopology.setDescription('Shows the card topology in the NE')
moduleCapForceConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 7, 1, 39), FspR7ForceConfigCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleCapForceConfig.setStatus('current')
if mibBuilder.loadTexts: moduleCapForceConfig.setDescription('Force cserver to send down configuration to module')
moduleCapMuxMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 7, 1, 40), FspR7MuxMethodCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleCapMuxMethod.setStatus('current')
if mibBuilder.loadTexts: moduleCapMuxMethod.setDescription('Selection of mux method')
moduleCapNdpCleanup = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 7, 1, 41), FspR7NdpCleanupCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleCapNdpCleanup.setStatus('current')
if mibBuilder.loadTexts: moduleCapNdpCleanup.setDescription('Cleanup Network Data Path allocation')
moduleCapRstp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 7, 1, 42), FspR7EnableDisableCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleCapRstp.setStatus('current')
if mibBuilder.loadTexts: moduleCapRstp.setDescription('Rapid spanning tree protocol')
moduleCapRemoteReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 7, 1, 43), FspR7RlsManCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleCapRemoteReset.setStatus('current')
if mibBuilder.loadTexts: moduleCapRemoteReset.setDescription('Remote reset of module. This parameter will be available only on SH9HU and SH1HUPF shelves.')
endOfModuleCap = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfModuleCap.setStatus('current')
if mibBuilder.loadTexts: endOfModuleCap.setDescription('')
protectionCableCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 9), )
if mibBuilder.loadTexts: protectionCableCapTable.setStatus('current')
if mibBuilder.loadTexts: protectionCableCapTable.setDescription('protectionCableCapTable')
protectionCableCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 9, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityProtectionCableIndex1"), (0, "ADVA-FSPR7-MIB", "entityProtectionCableIndex2"), (0, "ADVA-FSPR7-MIB", "entityProtectionCableIndex3"), (0, "ADVA-FSPR7-MIB", "entityProtectionCableIndex4"), (0, "ADVA-FSPR7-MIB", "entityProtectionCableClassName"))
if mibBuilder.loadTexts: protectionCableCapEntry.setStatus('current')
if mibBuilder.loadTexts: protectionCableCapEntry.setDescription('Entry of protectionCableCapTable')
protectionCableCapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 9, 1, 1), FspR7RowStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: protectionCableCapRowStatus.setStatus('current')
if mibBuilder.loadTexts: protectionCableCapRowStatus.setDescription('RowStatus object is used to create or delete a row in the table.')
protectionCableCapType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 9, 1, 2), FspR7YcableTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: protectionCableCapType.setStatus('current')
if mibBuilder.loadTexts: protectionCableCapType.setDescription('Type of Y-cable')
endOfProtectionCableCap = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfProtectionCableCap.setStatus('current')
if mibBuilder.loadTexts: endOfProtectionCableCap.setDescription('')
filterCableCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 11), )
if mibBuilder.loadTexts: filterCableCapTable.setStatus('current')
if mibBuilder.loadTexts: filterCableCapTable.setDescription('filterCableCapTable')
filterCableCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 11, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityFilterCableIndex1"), (0, "ADVA-FSPR7-MIB", "entityFilterCableIndex2"), (0, "ADVA-FSPR7-MIB", "entityFilterCableIndex3"), (0, "ADVA-FSPR7-MIB", "entityFilterCableIndex4"), (0, "ADVA-FSPR7-MIB", "entityFilterCableClassName"))
if mibBuilder.loadTexts: filterCableCapEntry.setStatus('current')
if mibBuilder.loadTexts: filterCableCapEntry.setDescription('Entry of filterCableCapTable')
filterCableCapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 11, 1, 1), FspR7RowStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: filterCableCapRowStatus.setStatus('current')
if mibBuilder.loadTexts: filterCableCapRowStatus.setDescription('RowStatus object is used to create or delete a row in the table.')
filterCableCapType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 11, 1, 2), FspR7FltrCableTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: filterCableCapType.setStatus('current')
if mibBuilder.loadTexts: filterCableCapType.setDescription('Filter Cable')
endOfFilterCableCap = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfFilterCableCap.setStatus('current')
if mibBuilder.loadTexts: endOfFilterCableCap.setDescription('')
endOfEqptMgmCap = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 3, 10000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfEqptMgmCap.setStatus('current')
if mibBuilder.loadTexts: endOfEqptMgmCap.setDescription('')
physicalPortCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1), )
if mibBuilder.loadTexts: physicalPortCapTable.setStatus('current')
if mibBuilder.loadTexts: physicalPortCapTable.setDescription('physicalPortCapTable')
physicalPortCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityFacilityShelfNo"), (0, "ADVA-FSPR7-MIB", "entityFacilitySlotNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityPortNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityExtNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityClassName"))
if mibBuilder.loadTexts: physicalPortCapEntry.setStatus('current')
if mibBuilder.loadTexts: physicalPortCapEntry.setDescription('Entry of physicalPortCapTable')
physicalPortCapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 1), FspR7RowStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapRowStatus.setStatus('current')
if mibBuilder.loadTexts: physicalPortCapRowStatus.setDescription('Physical Port Capability RowStatus.')
physicalPortCapType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 2), FspR7InterfaceTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapType.setStatus('current')
if mibBuilder.loadTexts: physicalPortCapType.setDescription('Physical Port Capability Facility Type.')
physicalPortCapAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 3), FspR7AdminStateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapAdmin.setStatus('current')
if mibBuilder.loadTexts: physicalPortCapAdmin.setDescription('Physical Port Capability Adminstrative State.')
physicalPortCapAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapAlias.setStatus('current')
if mibBuilder.loadTexts: physicalPortCapAlias.setDescription('User Applied Descriptor')
physicalPortCapAlsMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 5), FspR7AlsModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapAlsMode.setStatus('current')
if mibBuilder.loadTexts: physicalPortCapAlsMode.setDescription('Determines the reaction in backward direction in response to a LOS on the same Interface: on a Network Interface connected to the DWDM this is a matter of laser safety')
physicalPortCapAutoThresReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 6), FspR7AutoThresResetCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapAutoThresReset.setStatus('current')
if mibBuilder.loadTexts: physicalPortCapAutoThresReset.setDescription('Adaptive Threshold Control Reset')
physicalPortCapAutonegotiation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 7), EnableStateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapAutonegotiation.setStatus('current')
if mibBuilder.loadTexts: physicalPortCapAutonegotiation.setDescription('Auto Negotiation for the data rate')
physicalPortCapBehaviour = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 8), FspR7PortBehaviourCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapBehaviour.setStatus('current')
if mibBuilder.loadTexts: physicalPortCapBehaviour.setDescription('Behavior or Port usage based on configuration/usage in the system regardless of faceplate designation')
physicalPortCapDispertionConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 9), FspR7DispersionConfigCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapDispertionConfig.setStatus('current')
if mibBuilder.loadTexts: physicalPortCapDispertionConfig.setDescription('Chromatic Dispersion Compensation')
physicalPortCapDispersionSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 10), FspR7Integer32Caps()).setUnits('ps/nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapDispersionSetting.setStatus('current')
if mibBuilder.loadTexts: physicalPortCapDispersionSetting.setDescription('Chromatic Dispersion Compensation setting on module')
physicalPortCapDispersionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 11), FspR7DispersionModesCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapDispersionMode.setStatus('current')
if mibBuilder.loadTexts: physicalPortCapDispersionMode.setDescription('Chromatic Dispersion Compensation Mode')
physicalPortCapChannelProv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 12), FspR7ChannelIdentifierCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapChannelProv.setStatus('current')
if mibBuilder.loadTexts: physicalPortCapChannelProv.setDescription('Channel')
physicalPortCapWdmRxChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 13), FspR7ChannelIdentifierCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapWdmRxChannel.setStatus('current')
if mibBuilder.loadTexts: physicalPortCapWdmRxChannel.setDescription('Configuration of Rx optical channel')
physicalPortCapCodeGain = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 14), FspR7CodeGainCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapCodeGain.setStatus('current')
if mibBuilder.loadTexts: physicalPortCapCodeGain.setDescription('Forward Error Correction Coding gain')
physicalPortCapXfpDecisionThres = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 15), FspR7XfpDecisionThresCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapXfpDecisionThres.setStatus('current')
if mibBuilder.loadTexts: physicalPortCapXfpDecisionThres.setDescription('XFP Decision threshold setting')
physicalPortCapDisparityCorrection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 16), EnableStateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapDisparityCorrection.setStatus('current')
if mibBuilder.loadTexts: physicalPortCapDisparityCorrection.setDescription('Disparity correction')
physicalPortCapEqlzAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 17), FspR7EqlzAdminStateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapEqlzAdmin.setStatus('current')
if mibBuilder.loadTexts: physicalPortCapEqlzAdmin.setDescription('Scheduled Equalization Administration')
physicalPortCapErrorForwarding = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 18), FspR7ErrorFwdModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapErrorForwarding.setStatus('current')
if mibBuilder.loadTexts: physicalPortCapErrorForwarding.setDescription('Determines the reaction in forward direction in response to a LOS on the interface on the opposite side of the module: may override this behaviour in the interests of laser safety.')
physicalPortCapFecType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 19), FspR7FecTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapFecType.setStatus('current')
if mibBuilder.loadTexts: physicalPortCapFecType.setDescription('Forward Error Correction (Only relevant where TYPE = OTU#)')
physicalPortCapFarEndCommunication = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 20), FspR7YesNoCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapFarEndCommunication.setStatus('current')
if mibBuilder.loadTexts: physicalPortCapFarEndCommunication.setDescription('Used for Optojack plugs; Communication to Far End Plug is observed')
physicalPortCapFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 21), FspR7FlowControlModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapFlowControl.setStatus('current')
if mibBuilder.loadTexts: physicalPortCapFlowControl.setDescription('Flow Control mechanism')
physicalPortCapForceLaserOn = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 22), FspR7LaserForcedOperationCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapForceLaserOn.setStatus('current')
if mibBuilder.loadTexts: physicalPortCapForceLaserOn.setDescription('Laser Forced On')
physicalPortCapInhibitSwitchToProt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 23), FspR7YesNoCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapInhibitSwitchToProt.setStatus('current')
if mibBuilder.loadTexts: physicalPortCapInhibitSwitchToProt.setDescription('Inhibit Switch to protection facility. Inhibition blocks an automatic switch to the protection facility. Valid only for the working facility.')
physicalPortCapInhibitSwitchToWork = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 24), FspR7YesNoCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapInhibitSwitchToWork.setStatus('current')
if mibBuilder.loadTexts: physicalPortCapInhibitSwitchToWork.setDescription('Inhibit Switch to working facility. Inhibition blocks an automatic switch to the working facility. Valid only for the protection facility.')
physicalPortCapLaneChannelSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 25), FspR7ChannelIdentifierCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapLaneChannelSetting.setStatus('current')
if mibBuilder.loadTexts: physicalPortCapLaneChannelSetting.setDescription('Lane Channel Setting')
physicalPortCapLoopConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 26), LoopConfigCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapLoopConfig.setStatus('current')
if mibBuilder.loadTexts: physicalPortCapLoopConfig.setDescription('The configuration of the loopback function. - noLoop: no loop configuration on the interface. - lineLoop: the incoming signal is looped to the outgoing line on the interface. The incoming signal is sent in the downstream direction and processed as normal. - inwardLoop: the output signal is looped to the incoming line on the interface. The looped signal is transmitted unchanged on the optical output.')
physicalPortCapLaserDelayTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 27), FspR7LaserDelayTimerCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapLaserDelayTimer.setStatus('current')
if mibBuilder.loadTexts: physicalPortCapLaserDelayTimer.setDescription('Relevant only when ERRFWD=LSROFF. Enables/disables the possibility to delay turning off and on the laser. This applies to the case when turning off the laser is done as an error forwarding mechanism.')
physicalPortCapLaserOffTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 28), FspR7Unsigned32Caps()).setUnits('ms').setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapLaserOffTimer.setStatus('current')
if mibBuilder.loadTexts: physicalPortCapLaserOffTimer.setDescription('Delay before laser is swiched off')
physicalPortCapLaserOnTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 29), FspR7Unsigned32Caps()).setUnits('ms').setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapLaserOnTimer.setStatus('current')
if mibBuilder.loadTexts: physicalPortCapLaserOnTimer.setDescription('Delay before laser is switched on')
physicalPortCapLaserOffDelayFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 30), EnableStateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapLaserOffDelayFunction.setStatus('current')
if mibBuilder.loadTexts: physicalPortCapLaserOffDelayFunction.setDescription('A configuration request for the Laser Off Delay function. This function delays turning off the laser as a consequent action to a defect.')
physicalPortCapAutoPTassignment = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 31), FspR7ManualAutoCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapAutoPTassignment.setStatus('current')
if mibBuilder.loadTexts: physicalPortCapAutoPTassignment.setDescription('Auto assignment of ODU PT')
physicalPortCapTributarySlotMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 32), FspR7ManualAutoCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapTributarySlotMethod.setStatus('current')
if mibBuilder.loadTexts: physicalPortCapTributarySlotMethod.setDescription('Tributary Slot assignment method')
physicalPortCapInitiateEqualization = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 33), FspR7InitEqualizationCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapInitiateEqualization.setStatus('current')
if mibBuilder.loadTexts: physicalPortCapInitiateEqualization.setDescription('Initiate Equalization')
physicalPortCapLossAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 34), FspR7LossAttenuationCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapLossAttenuation.setStatus('current')
if mibBuilder.loadTexts: physicalPortCapLossAttenuation.setDescription('LOS Attenuation Finding in progress')
physicalPortCapOpticalSetPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 35), FspR7Integer32Caps()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapOpticalSetPoint.setStatus('current')
if mibBuilder.loadTexts: physicalPortCapOpticalSetPoint.setDescription('Sets the optical power for power equalization in ROADM or for channel power control in OPCM')
physicalPortCapDataLayerPmReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 36), FspR7PmResetCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapDataLayerPmReset.setStatus('current')
if mibBuilder.loadTexts: physicalPortCapDataLayerPmReset.setDescription('Reset data-layer Performance registers')
physicalPortCapPrbsPmReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 37), FspR7PrbsPmResetCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapPrbsPmReset.setStatus('current')
if mibBuilder.loadTexts: physicalPortCapPrbsPmReset.setDescription('Reset PRBS PM counters')
physicalPortCapTestPrbsRcvMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 38), FspR7PRBSTestCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapTestPrbsRcvMode.setStatus('current')
if mibBuilder.loadTexts: physicalPortCapTestPrbsRcvMode.setDescription('PRBS test pattern received')
physicalPortCapTestPrbsTrmtMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 39), FspR7PRBSTestCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapTestPrbsTrmtMode.setStatus('current')
if mibBuilder.loadTexts: physicalPortCapTestPrbsTrmtMode.setDescription('PRBS test pattern transmitted')
physicalPortCapSwitchCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 40), FspR7APSCommandCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapSwitchCommand.setStatus('current')
if mibBuilder.loadTexts: physicalPortCapSwitchCommand.setDescription('The switch command action for this facility. A command resulting in a switch event will also cause a change of the facility secondary state and a corresponding condition. Addressed by this command is the active port, the port to switch away from. Since this is a manual switch command, it will not switch if other port suffers from a signalfailure or a signal degrade.')
physicalPortCapOpuPayloadType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 41), FspR7OpuPayloadTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapOpuPayloadType.setStatus('current')
if mibBuilder.loadTexts: physicalPortCapOpuPayloadType.setDescription('OPU Payload Type Indicator')
physicalPortCapSigDegThresSonetLine = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 42), FspR7BERThresholdCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapSigDegThresSonetLine.setStatus('current')
if mibBuilder.loadTexts: physicalPortCapSigDegThresSonetLine.setDescription('Bit-Error-Based Degradation Definition for SONET (standard integration period)')
physicalPortCapSigDegThresSdhMs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 43), FspR7Unsigned32Caps()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapSigDegThresSdhMs.setStatus('current')
if mibBuilder.loadTexts: physicalPortCapSigDegThresSdhMs.setDescription('Block-Error-Based Degradation Definition for SDH (standard integration period). Defined as percentage Background Block Errors (30% default) evaluated over a defined period (SDPER-RS).')
physicalPortCapSigDegThresOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 44), FspR7Integer32Caps()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapSigDegThresOtu.setStatus('current')
if mibBuilder.loadTexts: physicalPortCapSigDegThresOtu.setDescription('Background-Block-Error-Based Signal Degradation Definition for OTU')
physicalPortCapSigDegThresOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 45), FspR7Integer32Caps()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapSigDegThresOdu.setStatus('current')
if mibBuilder.loadTexts: physicalPortCapSigDegThresOdu.setDescription('Background-Block-Error-Based Signal Degradation Definition for ODU')
physicalPortCapSigDegThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 46), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapSigDegThreshold.setStatus('current')
if mibBuilder.loadTexts: physicalPortCapSigDegThreshold.setDescription('Threshold for number of errors (CV or CV+DE) in one second')
physicalPortCapSigDegPcslThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 47), FspR7Unsigned32Caps()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapSigDegPcslThreshold.setStatus('current')
if mibBuilder.loadTexts: physicalPortCapSigDegPcslThreshold.setDescription('Block-Error-Based Degradation Definition for Physical Coding Sublayer')
physicalPortCapSigDegThresSonetSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 48), FspR7BERThresholdSectionCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapSigDegThresSonetSection.setStatus('current')
if mibBuilder.loadTexts: physicalPortCapSigDegThresSonetSection.setDescription('Bit-Error-Based Degradation Definition for SONET (standard integration period)')
physicalPortCapSigDegThresSdhSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 49), FspR7Unsigned32Caps()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapSigDegThresSdhSection.setStatus('current')
if mibBuilder.loadTexts: physicalPortCapSigDegThresSdhSection.setDescription('Block-Error-Based Degradation Definition for SDH (standard integration period). Defined as percentage Background Block Errors (30% default) evaluated over a defined period (SDPER-RS).')
physicalPortCapSigDegThresOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 50), FspR7Integer32Caps()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapSigDegThresOduTcmA.setStatus('current')
if mibBuilder.loadTexts: physicalPortCapSigDegThresOduTcmA.setDescription('Background-Block-Error-Based Signal Degradation Definition for TCM-A')
physicalPortCapSigDegThresOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 51), FspR7Integer32Caps()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapSigDegThresOduTcmB.setStatus('current')
if mibBuilder.loadTexts: physicalPortCapSigDegThresOduTcmB.setDescription('Background-Block-Error-Based Signal Degradation Definition for TCM-B')
physicalPortCapSigDegThresOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 52), FspR7Integer32Caps()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapSigDegThresOduTcmC.setStatus('current')
if mibBuilder.loadTexts: physicalPortCapSigDegThresOduTcmC.setDescription('Background-Block-Error-Based Signal Degradation Definition for TCM-C')
physicalPortCapSignalDegradePeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 53), FspR7Unsigned32Caps()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapSignalDegradePeriod.setStatus('current')
if mibBuilder.loadTexts: physicalPortCapSignalDegradePeriod.setDescription('The measurement period in seconds used together with the deployProvIfSigDegThresSdhRegSect based on the block error counting method. The valid range is 2..10, The default being 7.')
physicalPortCapSigDegPeriodOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 54), FspR7Unsigned32Caps()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapSigDegPeriodOdu.setStatus('current')
if mibBuilder.loadTexts: physicalPortCapSigDegPeriodOdu.setDescription('Integration Period for Signal degrade')
physicalPortCapSigDegPeriodOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 55), FspR7Unsigned32Caps()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapSigDegPeriodOtu.setStatus('current')
if mibBuilder.loadTexts: physicalPortCapSigDegPeriodOtu.setDescription('Integration Period for Signal degrade')
physicalPortCapSigDegPeriodIntegration = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 56), FspR7Unsigned32Caps()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapSigDegPeriodIntegration.setStatus('current')
if mibBuilder.loadTexts: physicalPortCapSigDegPeriodIntegration.setDescription('Integration Period for Signal degrade')
physicalPortCapSigDegPeriodSdhSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 57), FspR7Unsigned32Caps()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapSigDegPeriodSdhSection.setStatus('current')
if mibBuilder.loadTexts: physicalPortCapSigDegPeriodSdhSection.setDescription('Provisionable Signal Degrade Integration Period for SDH')
physicalPortCapSigDegPeriodOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 58), FspR7Unsigned32Caps()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapSigDegPeriodOduTcmA.setStatus('current')
if mibBuilder.loadTexts: physicalPortCapSigDegPeriodOduTcmA.setDescription('Integration Period for Signal degrade')
physicalPortCapSigDegPeriodOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 59), FspR7Unsigned32Caps()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapSigDegPeriodOduTcmB.setStatus('current')
if mibBuilder.loadTexts: physicalPortCapSigDegPeriodOduTcmB.setDescription('Integration Period of TCMB Signal Segrade')
physicalPortCapSigDegPeriodOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 60), FspR7Unsigned32Caps()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapSigDegPeriodOduTcmC.setStatus('current')
if mibBuilder.loadTexts: physicalPortCapSigDegPeriodOduTcmC.setDescription('Integration Period of TCMC Signal Segrade')
physicalPortCapOtnStuffing = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 61), FspR7StuffCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapOtnStuffing.setStatus('current')
if mibBuilder.loadTexts: physicalPortCapOtnStuffing.setDescription('Indicates if bit/byte stuffing is used in the transport signal.')
physicalPortCapTcmALevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 62), OtnTcmLevelCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapTcmALevel.setStatus('current')
if mibBuilder.loadTexts: physicalPortCapTcmALevel.setDescription('Activation of Tandem Connection Monitoring Instance A')
physicalPortCapTcmBLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 63), OtnTcmLevelCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapTcmBLevel.setStatus('current')
if mibBuilder.loadTexts: physicalPortCapTcmBLevel.setDescription('Activation of Tandem Connection Monitoring Instance B')
physicalPortCapTcmCLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 64), OtnTcmLevelCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapTcmCLevel.setStatus('current')
if mibBuilder.loadTexts: physicalPortCapTcmCLevel.setDescription('Activation of Tandem Connection Monitoring Instance C')
physicalPortCapTerminationLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 65), OhTerminationLevelCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapTerminationLevel.setStatus('current')
if mibBuilder.loadTexts: physicalPortCapTerminationLevel.setDescription('The entity is Addressable by Management [because its supporting entity is defined in the database and therefore its address existsSignal Tremination Level of Intrusive Access to Header Information. Not used in 7.0, monitoring is one layer higher than TERM level, if applicable. All conditions detected on monitoring layer will not be reported (severity degradated to NR).')
physicalPortCapTimingSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 66), SonetTimingSourceCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapTimingSource.setStatus('current')
if mibBuilder.loadTexts: physicalPortCapTimingSource.setDescription('The timing source for this interface. - internal: used in stand-alone, point-to-point topologies stand-alone (dedicated fiber operation). - loopTiming: e.g. used in point-to-point via SONET network and feeder topologies. The default is internal(1).')
physicalPortCapTimModeOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 67), TimModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapTimModeOdu.setStatus('current')
if mibBuilder.loadTexts: physicalPortCapTimModeOdu.setDescription('Detection of TIM-ODU Condition can be configured')
physicalPortCapTimModeOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 68), TimModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapTimModeOtu.setStatus('current')
if mibBuilder.loadTexts: physicalPortCapTimModeOtu.setDescription('Detection of TIM-OTU Condition can be configured')
physicalPortCapTimModeSonetSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 69), TimModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapTimModeSonetSection.setStatus('current')
if mibBuilder.loadTexts: physicalPortCapTimModeSonetSection.setDescription('Detection of TIM Sonet Section Condition can be configured')
physicalPortCapTimModeOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 70), TimModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapTimModeOduTcmA.setStatus('current')
if mibBuilder.loadTexts: physicalPortCapTimModeOduTcmA.setDescription('Detection of TIM-TCMA Condition can be configured')
physicalPortCapTimModeOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 71), TimModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapTimModeOduTcmB.setStatus('current')
if mibBuilder.loadTexts: physicalPortCapTimModeOduTcmB.setDescription('Detection of TIM-TCMB Condition can be configured')
physicalPortCapTimModeOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 72), TimModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapTimModeOduTcmC.setStatus('current')
if mibBuilder.loadTexts: physicalPortCapTimModeOduTcmC.setDescription('Detection of TIM-TCMC Condition can be configured')
physicalPortCapTraceFormSonetSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 73), SonetTraceFormCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapTraceFormSonetSection.setStatus('current')
if mibBuilder.loadTexts: physicalPortCapTraceFormSonetSection.setDescription('Byte-Length of Trace Compared to Expected')
physicalPortCapTraceExpectedSonetSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 74), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapTraceExpectedSonetSection.setStatus('current')
if mibBuilder.loadTexts: physicalPortCapTraceExpectedSonetSection.setDescription('Expected Sec/RS trace. NULL TRACE implies that no trace comparison is made.')
physicalPortCapTraceTransmitSonetSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 75), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapTraceTransmitSonetSection.setStatus('current')
if mibBuilder.loadTexts: physicalPortCapTraceTransmitSonetSection.setDescription('Sec/RS Trace to be Transmitted')
physicalPortCapTraceExpectedOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 76), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapTraceExpectedOtu.setStatus('current')
if mibBuilder.loadTexts: physicalPortCapTraceExpectedOtu.setDescription('Expected SAPI part of the OTU trace (15 character). NULL TRACE implies that no trace comparison is made.')
physicalPortCapTraceTransmitSapiOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 77), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapTraceTransmitSapiOtu.setStatus('current')
if mibBuilder.loadTexts: physicalPortCapTraceTransmitSapiOtu.setDescription('The transmitted SAPI part of the OTU trace (15 character)')
physicalPortCapTraceTransmitDapiOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 78), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapTraceTransmitDapiOtu.setStatus('current')
if mibBuilder.loadTexts: physicalPortCapTraceTransmitDapiOtu.setDescription('The transmitted DAPI part of the OTU trace (15 character)')
physicalPortCapTraceTransmitOpspOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 79), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapTraceTransmitOpspOtu.setStatus('current')
if mibBuilder.loadTexts: physicalPortCapTraceTransmitOpspOtu.setDescription('The transmitted Operator Specific part of the OTU trace (32 character)')
physicalPortCapTraceExpectedOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 80), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapTraceExpectedOdu.setStatus('current')
if mibBuilder.loadTexts: physicalPortCapTraceExpectedOdu.setDescription('Expected SAPI part of the ODU trace (15 character). NULL TRACE implies that no trace comparison is made.')
physicalPortCapTraceTransmitSapiOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 81), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapTraceTransmitSapiOdu.setStatus('current')
if mibBuilder.loadTexts: physicalPortCapTraceTransmitSapiOdu.setDescription('The transmitted SAPI part of the ODU trace (15 character)')
physicalPortCapTraceTransmitDapiOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 82), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapTraceTransmitDapiOdu.setStatus('current')
if mibBuilder.loadTexts: physicalPortCapTraceTransmitDapiOdu.setDescription('The transmitted DAPI part of the ODU trace (15 character)')
physicalPortCapTraceTransmitOpspOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 83), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapTraceTransmitOpspOdu.setStatus('current')
if mibBuilder.loadTexts: physicalPortCapTraceTransmitOpspOdu.setDescription('The transmitted Operator Specific part of the ODU trace (32 character)')
physicalPortCapTraceExpectedOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 84), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapTraceExpectedOduTcmA.setStatus('current')
if mibBuilder.loadTexts: physicalPortCapTraceExpectedOduTcmA.setDescription('Expected SAPI part of the TCMA trace (15 character). NULL TRACE-TCM implies that no trace comparison is made.')
physicalPortCapTraceTransmitSapiOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 85), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapTraceTransmitSapiOduTcmA.setStatus('current')
if mibBuilder.loadTexts: physicalPortCapTraceTransmitSapiOduTcmA.setDescription('The transmitted SAPI part of the TCMA trace (15 character)')
physicalPortCapTraceTransmitDapiOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 86), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapTraceTransmitDapiOduTcmA.setStatus('current')
if mibBuilder.loadTexts: physicalPortCapTraceTransmitDapiOduTcmA.setDescription('The transmitted DAPI part of the TCMA trace (15 character)')
physicalPortCapTraceTransmitOpspOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 87), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapTraceTransmitOpspOduTcmA.setStatus('current')
if mibBuilder.loadTexts: physicalPortCapTraceTransmitOpspOduTcmA.setDescription('The transmitted Operator Specific part of the TCMA trace (32 character)')
physicalPortCapTraceExpectedOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 88), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapTraceExpectedOduTcmB.setStatus('current')
if mibBuilder.loadTexts: physicalPortCapTraceExpectedOduTcmB.setDescription('Expected SAPI part of the TCMB trace (15 character). NULL TRACE-TCM implies that no trace comparison is made.')
physicalPortCapTraceTransmitSapiOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 89), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapTraceTransmitSapiOduTcmB.setStatus('current')
if mibBuilder.loadTexts: physicalPortCapTraceTransmitSapiOduTcmB.setDescription('The transmitted SAPI part of the TCMB trace (15 character)')
physicalPortCapTraceTransmitDapiOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 90), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapTraceTransmitDapiOduTcmB.setStatus('current')
if mibBuilder.loadTexts: physicalPortCapTraceTransmitDapiOduTcmB.setDescription('The transmitted DAPI part of the TCMB trace (15 character)')
physicalPortCapTraceTransmitOpspOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 91), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapTraceTransmitOpspOduTcmB.setStatus('current')
if mibBuilder.loadTexts: physicalPortCapTraceTransmitOpspOduTcmB.setDescription('The transmitted Operator Specific part of the TCMB trace (32 character)')
physicalPortCapTraceExpectedOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 92), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapTraceExpectedOduTcmC.setStatus('current')
if mibBuilder.loadTexts: physicalPortCapTraceExpectedOduTcmC.setDescription('Expected SAPI part of the TCMC trace (15 character). NULL TRACE-TCM implies that no trace comparison is made.')
physicalPortCapTraceTransmitSapiOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 93), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapTraceTransmitSapiOduTcmC.setStatus('current')
if mibBuilder.loadTexts: physicalPortCapTraceTransmitSapiOduTcmC.setDescription('The transmitted SAPI part of the TCMC trace (15 character)')
physicalPortCapTraceTransmitDapiOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 94), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapTraceTransmitDapiOduTcmC.setStatus('current')
if mibBuilder.loadTexts: physicalPortCapTraceTransmitDapiOduTcmC.setDescription('The transmitted DAPI part of the TCMC trace (15 character)')
physicalPortCapTraceTransmitOpspOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 95), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapTraceTransmitOpspOduTcmC.setStatus('current')
if mibBuilder.loadTexts: physicalPortCapTraceTransmitOpspOduTcmC.setDescription('The transmitted Operator Specific part of the TCMC trace (32 character)')
physicalPortCapTurnupConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 96), FspR7TurnupConfigCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapTurnupConfig.setStatus('current')
if mibBuilder.loadTexts: physicalPortCapTurnupConfig.setDescription('Turnup Operation')
physicalPortCapTxOffDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 97), FspR7EnableDisableCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapTxOffDelay.setStatus('current')
if mibBuilder.loadTexts: physicalPortCapTxOffDelay.setDescription('Enable or disable TXOFFHOLD Period for Error Forwarding and LKDO-OFF Consequent Action.')
physicalPortCapVoaMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 98), FspR7VoaModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapVoaMode.setStatus('current')
if mibBuilder.loadTexts: physicalPortCapVoaMode.setDescription('VOA operating mode')
physicalPortCapVoaSetpoint = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 99), FspR7Unsigned32Caps()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapVoaSetpoint.setStatus('current')
if mibBuilder.loadTexts: physicalPortCapVoaSetpoint.setDescription('Sets the optical attenuation of VOA')
physicalPortCapLagPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 100), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapLagPrio.setStatus('current')
if mibBuilder.loadTexts: physicalPortCapLagPrio.setDescription('Part of ID. Port pri that defines standby.')
physicalPortCapMaxFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 101), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapMaxFrameSize.setStatus('current')
if mibBuilder.loadTexts: physicalPortCapMaxFrameSize.setDescription('Max Frame Size')
physicalPortCapPayload = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 102), OtnPayloadTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapPayload.setStatus('current')
if mibBuilder.loadTexts: physicalPortCapPayload.setDescription('The PAYLOAD defines the transport service type of the payload')
physicalPortCapPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 103), FspR7PortModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapPortMode.setStatus('current')
if mibBuilder.loadTexts: physicalPortCapPortMode.setDescription('Port Mode')
physicalPortCapPortRole = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 104), FspR7PortRoleCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapPortRole.setStatus('current')
if mibBuilder.loadTexts: physicalPortCapPortRole.setDescription('ADVA cloud Port Roles')
physicalPortCapPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 105), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapPriority.setStatus('current')
if mibBuilder.loadTexts: physicalPortCapPriority.setDescription('Default PCP in case UTAG is Enabled. The Prio may be remapped in the EVC.')
physicalPortCapPvid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 106), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapPvid.setStatus('current')
if mibBuilder.loadTexts: physicalPortCapPvid.setDescription('Default VLAN ID (both STAG/CTAG mode) in case UTAG is enabled')
physicalPortCapStagType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 107), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapStagType.setStatus('current')
if mibBuilder.loadTexts: physicalPortCapStagType.setDescription('TAG type field')
physicalPortCapUtag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 108), FspR7UntaggedFramesCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapUtag.setStatus('current')
if mibBuilder.loadTexts: physicalPortCapUtag.setDescription('If untagged frames shall be enabled on this port or not.')
physicalPortCapVethAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 109), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapVethAid.setStatus('current')
if mibBuilder.loadTexts: physicalPortCapVethAid.setDescription('Shows if PORT is a member in the LAG with the VETH AID')
physicalPortCapRedLineState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 110), FspR7RedLinedStateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapRedLineState.setStatus('current')
if mibBuilder.loadTexts: physicalPortCapRedLineState.setDescription('will be set by higher level software to act as a barrier to deletion')
physicalPortCapTunnelAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 111), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapTunnelAid.setStatus('current')
if mibBuilder.loadTexts: physicalPortCapTunnelAid.setDescription('Tunnel AID')
physicalPortCapRateLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 112), FspR7DisableEnableCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapRateLimit.setStatus('current')
if mibBuilder.loadTexts: physicalPortCapRateLimit.setDescription('Selection to apply rate limit feature or not.')
physicalPortCapTxOffOnTm = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 113), FspR7TxOffOnTmCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapTxOffOnTm.setStatus('current')
if mibBuilder.loadTexts: physicalPortCapTxOffOnTm.setDescription('Relevant only when ERRFWD=TXOFF. Enables/disables the possibility to delay turning off and on the the transmitter. This applies to the case when turning off the transmitter is done as an error forwarding mechanism.')
physicalPortCapTxOffTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 114), FspR7Unsigned32Caps()).setUnits('ms').setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapTxOffTimer.setStatus('current')
if mibBuilder.loadTexts: physicalPortCapTxOffTimer.setDescription('Delay before transmitter is swiched off')
physicalPortCapTxOnTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 1, 1, 115), FspR7Unsigned32Caps()).setUnits('ms').setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPortCapTxOnTimer.setStatus('current')
if mibBuilder.loadTexts: physicalPortCapTxOnTimer.setDescription('Delay before transmitter is switched on')
virtualPortCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 2), )
if mibBuilder.loadTexts: virtualPortCapTable.setStatus('current')
if mibBuilder.loadTexts: virtualPortCapTable.setDescription('virtualPortCapTable')
virtualPortCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 2, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityFacilityShelfNo"), (0, "ADVA-FSPR7-MIB", "entityFacilitySlotNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityPortNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityExtNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityClassName"))
if mibBuilder.loadTexts: virtualPortCapEntry.setStatus('current')
if mibBuilder.loadTexts: virtualPortCapEntry.setDescription('Entry of virtualPortCapTable')
virtualPortCapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 2, 1, 1), FspR7RowStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortCapRowStatus.setStatus('current')
if mibBuilder.loadTexts: virtualPortCapRowStatus.setDescription('Virtual Port Capability RowStatus.')
virtualPortCapChannelBand = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 2, 1, 2), FspR7ChannelBandwidthCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortCapChannelBand.setStatus('current')
if mibBuilder.loadTexts: virtualPortCapChannelBand.setDescription('Virtual Port Capability Channel Bandwidth.')
virtualPortCapType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 2, 1, 3), FspR7InterfaceTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortCapType.setStatus('current')
if mibBuilder.loadTexts: virtualPortCapType.setDescription('Virtual Port Capability Facility Type.')
virtualPortCapAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortCapAlias.setStatus('current')
if mibBuilder.loadTexts: virtualPortCapAlias.setDescription('Virtual Port Capability Alias.')
virtualPortCapAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 2, 1, 5), FspR7AdminStateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortCapAdmin.setStatus('current')
if mibBuilder.loadTexts: virtualPortCapAdmin.setDescription('Virtual Port Capability Adminstrative State.')
virtualPortCapEqlzAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 2, 1, 6), FspR7EqlzAdminStateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortCapEqlzAdmin.setStatus('current')
if mibBuilder.loadTexts: virtualPortCapEqlzAdmin.setDescription('Virtual Port Capability Fiber Connection Attenuation.')
virtualPortCapInitEqlz = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 2, 1, 7), FspR7InitEqualizationCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortCapInitEqlz.setStatus('current')
if mibBuilder.loadTexts: virtualPortCapInitEqlz.setDescription('Virtual Port Capability Initiate Equalization.')
virtualPortCapLacpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 2, 1, 8), FspR7LacpModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortCapLacpMode.setStatus('current')
if mibBuilder.loadTexts: virtualPortCapLacpMode.setDescription('Enable of LACP state machine')
virtualPortCapLacpTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 2, 1, 9), FspR7LacpTimeoutCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortCapLacpTimeout.setStatus('current')
if mibBuilder.loadTexts: virtualPortCapLacpTimeout.setDescription('Timeout of the LACP')
virtualPortCapLagActivePorts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 2, 1, 10), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortCapLagActivePorts.setStatus('current')
if mibBuilder.loadTexts: virtualPortCapLagActivePorts.setDescription('Number of active ports in the Link Aggregation Group')
virtualPortCapMaxFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 2, 1, 11), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortCapMaxFrameSize.setStatus('current')
if mibBuilder.loadTexts: virtualPortCapMaxFrameSize.setDescription('Max Frame Size')
virtualPortCapPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 2, 1, 12), FspR7PortModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortCapPortMode.setStatus('current')
if mibBuilder.loadTexts: virtualPortCapPortMode.setDescription('Port Mode')
virtualPortCapDataLayerPmReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 2, 1, 13), FspR7PmResetCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortCapDataLayerPmReset.setStatus('current')
if mibBuilder.loadTexts: virtualPortCapDataLayerPmReset.setDescription('Reset data-layer Performance registers')
virtualPortCapPortRole = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 2, 1, 14), FspR7PortRoleCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortCapPortRole.setStatus('current')
if mibBuilder.loadTexts: virtualPortCapPortRole.setDescription('ADVA cloud Port Roles')
virtualPortCapLagPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 2, 1, 15), FspR7LagPortTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortCapLagPortType.setStatus('current')
if mibBuilder.loadTexts: virtualPortCapLagPortType.setDescription('Type/Speed of connected ports in the Link Aggregation Group')
virtualPortCapPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 2, 1, 16), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortCapPriority.setStatus('current')
if mibBuilder.loadTexts: virtualPortCapPriority.setDescription('Default PCP in case UTAG is Enabled. The Prio may be remapped in the EVC.')
virtualPortCapPvid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 2, 1, 17), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortCapPvid.setStatus('current')
if mibBuilder.loadTexts: virtualPortCapPvid.setDescription('Default VLAN ID (both STAG/CTAG mode) in case UTAG is enabled')
virtualPortCapRevertiveMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 2, 1, 18), ApsRevertModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortCapRevertiveMode.setStatus('current')
if mibBuilder.loadTexts: virtualPortCapRevertiveMode.setDescription('Revertive Protection Switching')
virtualPortCapStagType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortCapStagType.setStatus('current')
if mibBuilder.loadTexts: virtualPortCapStagType.setDescription('TAG type field')
virtualPortCapUtag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 2, 1, 20), FspR7UntaggedFramesCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortCapUtag.setStatus('current')
if mibBuilder.loadTexts: virtualPortCapUtag.setDescription('If untagged frames shall be enabled on this port or not.')
virtualPortCapBundle = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 2, 1, 21), FspR7SnmpLongString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortCapBundle.setStatus('current')
if mibBuilder.loadTexts: virtualPortCapBundle.setDescription('List of VC4/VC3/STS1/STS3c/STS24c/STS48c containers used in the BUNDLE')
virtualPortCapSwitchCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 2, 1, 22), FspR7APSCommandCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortCapSwitchCommand.setStatus('current')
if mibBuilder.loadTexts: virtualPortCapSwitchCommand.setDescription('The switch command action for this facility. A command resulting in a switch event will also cause a change of the facility secondary state and a corresponding condition. Addressed by this command is the active port, the port to switch away from. Since this is a manual switch command, it will not switch if other port suffers from a signalfailure or a signal degrade.')
virtualPortCapInhibitSwitchToWork = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 2, 1, 23), FspR7YesNoCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortCapInhibitSwitchToWork.setStatus('current')
if mibBuilder.loadTexts: virtualPortCapInhibitSwitchToWork.setDescription('Inhibit Switch to working facility. Inhibition blocks an automatic switch to the working facility. Valid only for the protection facility.')
virtualPortCapInhibitSwitchToProt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 2, 1, 24), FspR7YesNoCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortCapInhibitSwitchToProt.setStatus('current')
if mibBuilder.loadTexts: virtualPortCapInhibitSwitchToProt.setDescription('Inhibit Switch to protection facility. Inhibition blocks an automatic switch to the protection facility. Valid only for the working facility.')
virtualPortCapOduTribPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 2, 1, 25), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortCapOduTribPortNo.setStatus('current')
if mibBuilder.loadTexts: virtualPortCapOduTribPortNo.setDescription('ODU Tributary Port Number')
virtualPortCapOduTribTimeSlottNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 2, 1, 26), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortCapOduTribTimeSlottNo.setStatus('current')
if mibBuilder.loadTexts: virtualPortCapOduTribTimeSlottNo.setDescription('ODU Tributary slot number. Multiple values can be entered as a string, separated by commas or given as a range. For capabilities objects possible number of slots and valid range are displayed in a form: [1,2,3,8][count: 1-1] In first brackets valid slots are shown and in the second possible number of slots.')
virtualPortCapSigDegThresOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 2, 1, 27), FspR7Integer32Caps()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortCapSigDegThresOdu.setStatus('current')
if mibBuilder.loadTexts: virtualPortCapSigDegThresOdu.setDescription('Background-Block-Error-Based Signal Degradation Definition for ODU')
virtualPortCapSigDegPeriodOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 2, 1, 28), FspR7Unsigned32Caps()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortCapSigDegPeriodOdu.setStatus('current')
if mibBuilder.loadTexts: virtualPortCapSigDegPeriodOdu.setDescription('Integration Period for Signal degrade')
virtualPortCapTraceExpectedOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 2, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortCapTraceExpectedOdu.setStatus('current')
if mibBuilder.loadTexts: virtualPortCapTraceExpectedOdu.setDescription('Expected SAPI part of the ODU trace (15 character). NULL TRACE implies that no trace comparison is made.')
virtualPortCapTraceTransmitSapiOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 2, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortCapTraceTransmitSapiOdu.setStatus('current')
if mibBuilder.loadTexts: virtualPortCapTraceTransmitSapiOdu.setDescription('The transmitted SAPI part of the ODU trace (15 character)')
virtualPortCapTraceTransmitDapiOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 2, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortCapTraceTransmitDapiOdu.setStatus('current')
if mibBuilder.loadTexts: virtualPortCapTraceTransmitDapiOdu.setDescription('The transmitted DAPI part of the ODU trace (15 character)')
virtualPortCapTraceTransmitOpspOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 2, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortCapTraceTransmitOpspOdu.setStatus('current')
if mibBuilder.loadTexts: virtualPortCapTraceTransmitOpspOdu.setDescription('The transmitted Operator Specific part of the ODU trace (32 character)')
virtualPortCapTimModeOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 2, 1, 33), TimModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortCapTimModeOdu.setStatus('current')
if mibBuilder.loadTexts: virtualPortCapTimModeOdu.setDescription('Detection of TIM-ODU Condition can be configured')
virtualPortCapSigDegThresOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 2, 1, 34), FspR7Integer32Caps()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortCapSigDegThresOduTcmA.setStatus('current')
if mibBuilder.loadTexts: virtualPortCapSigDegThresOduTcmA.setDescription('Background-Block-Error-Based Signal Degradation Definition for TCM-A')
virtualPortCapSigDegPeriodOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 2, 1, 35), FspR7Unsigned32Caps()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortCapSigDegPeriodOduTcmA.setStatus('current')
if mibBuilder.loadTexts: virtualPortCapSigDegPeriodOduTcmA.setDescription('Integration Period for Signal degrade')
virtualPortCapSigDegThresOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 2, 1, 36), FspR7Integer32Caps()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortCapSigDegThresOduTcmB.setStatus('current')
if mibBuilder.loadTexts: virtualPortCapSigDegThresOduTcmB.setDescription('Background-Block-Error-Based Signal Degradation Definition for TCM-B')
virtualPortCapSigDegPeriodOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 2, 1, 37), FspR7Unsigned32Caps()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortCapSigDegPeriodOduTcmB.setStatus('current')
if mibBuilder.loadTexts: virtualPortCapSigDegPeriodOduTcmB.setDescription('Integration Period of TCMB Signal Segrade')
virtualPortCapSigDegThresOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 2, 1, 38), FspR7Integer32Caps()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortCapSigDegThresOduTcmC.setStatus('current')
if mibBuilder.loadTexts: virtualPortCapSigDegThresOduTcmC.setDescription('Background-Block-Error-Based Signal Degradation Definition for TCM-C')
virtualPortCapSigDegPeriodOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 2, 1, 39), FspR7Unsigned32Caps()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortCapSigDegPeriodOduTcmC.setStatus('current')
if mibBuilder.loadTexts: virtualPortCapSigDegPeriodOduTcmC.setDescription('Integration Period of TCMC Signal Segrade')
virtualPortCapTcmALevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 2, 1, 40), OtnTcmLevelCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortCapTcmALevel.setStatus('current')
if mibBuilder.loadTexts: virtualPortCapTcmALevel.setDescription('Activation of Tandem Connection Monitoring Instance A')
virtualPortCapTcmBLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 2, 1, 41), OtnTcmLevelCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortCapTcmBLevel.setStatus('current')
if mibBuilder.loadTexts: virtualPortCapTcmBLevel.setDescription('Activation of Tandem Connection Monitoring Instance B')
virtualPortCapTcmCLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 2, 1, 42), OtnTcmLevelCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortCapTcmCLevel.setStatus('current')
if mibBuilder.loadTexts: virtualPortCapTcmCLevel.setDescription('Activation of Tandem Connection Monitoring Instance C')
virtualPortCapTraceTransmitSapiOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 2, 1, 43), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortCapTraceTransmitSapiOduTcmA.setStatus('current')
if mibBuilder.loadTexts: virtualPortCapTraceTransmitSapiOduTcmA.setDescription('The transmitted SAPI part of the TCMA trace (15 character)')
virtualPortCapTraceTransmitDapiOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 2, 1, 44), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortCapTraceTransmitDapiOduTcmA.setStatus('current')
if mibBuilder.loadTexts: virtualPortCapTraceTransmitDapiOduTcmA.setDescription('The transmitted DAPI part of the TCMA trace (15 character)')
virtualPortCapTraceTransmitOpspOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 2, 1, 45), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortCapTraceTransmitOpspOduTcmA.setStatus('current')
if mibBuilder.loadTexts: virtualPortCapTraceTransmitOpspOduTcmA.setDescription('The transmitted Operator Specific part of the TCMA trace (32 character)')
virtualPortCapTraceExpectedOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 2, 1, 46), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortCapTraceExpectedOduTcmA.setStatus('current')
if mibBuilder.loadTexts: virtualPortCapTraceExpectedOduTcmA.setDescription('Expected SAPI part of the TCMA trace (15 character). NULL TRACE-TCM implies that no trace comparison is made.')
virtualPortCapTimModeOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 2, 1, 47), TimModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortCapTimModeOduTcmA.setStatus('current')
if mibBuilder.loadTexts: virtualPortCapTimModeOduTcmA.setDescription('Detection of TIM-TCMA Condition can be configured')
virtualPortCapTraceExpectedOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 2, 1, 48), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortCapTraceExpectedOduTcmB.setStatus('current')
if mibBuilder.loadTexts: virtualPortCapTraceExpectedOduTcmB.setDescription('Expected SAPI part of the TCMB trace (15 character). NULL TRACE-TCM implies that no trace comparison is made.')
virtualPortCapTraceTransmitSapiOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 2, 1, 49), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortCapTraceTransmitSapiOduTcmB.setStatus('current')
if mibBuilder.loadTexts: virtualPortCapTraceTransmitSapiOduTcmB.setDescription('The transmitted SAPI part of the TCMB trace (15 character)')
virtualPortCapTraceTransmitDapiOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 2, 1, 50), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortCapTraceTransmitDapiOduTcmB.setStatus('current')
if mibBuilder.loadTexts: virtualPortCapTraceTransmitDapiOduTcmB.setDescription('The transmitted DAPI part of the TCMB trace (15 character)')
virtualPortCapTraceTransmitOpspOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 2, 1, 51), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortCapTraceTransmitOpspOduTcmB.setStatus('current')
if mibBuilder.loadTexts: virtualPortCapTraceTransmitOpspOduTcmB.setDescription('The transmitted Operator Specific part of the TCMB trace (32 character)')
virtualPortCapTimModeOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 2, 1, 52), TimModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortCapTimModeOduTcmB.setStatus('current')
if mibBuilder.loadTexts: virtualPortCapTimModeOduTcmB.setDescription('Detection of TIM-TCMB Condition can be configured')
virtualPortCapTraceExpectedOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 2, 1, 53), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortCapTraceExpectedOduTcmC.setStatus('current')
if mibBuilder.loadTexts: virtualPortCapTraceExpectedOduTcmC.setDescription('Expected SAPI part of the TCMC trace (15 character). NULL TRACE-TCM implies that no trace comparison is made.')
virtualPortCapTraceTransmitSapiOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 2, 1, 54), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortCapTraceTransmitSapiOduTcmC.setStatus('current')
if mibBuilder.loadTexts: virtualPortCapTraceTransmitSapiOduTcmC.setDescription('The transmitted SAPI part of the TCMC trace (15 character)')
virtualPortCapTraceTransmitDapiOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 2, 1, 55), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortCapTraceTransmitDapiOduTcmC.setStatus('current')
if mibBuilder.loadTexts: virtualPortCapTraceTransmitDapiOduTcmC.setDescription('The transmitted DAPI part of the TCMC trace (15 character)')
virtualPortCapTraceTransmitOpspOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 2, 1, 56), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortCapTraceTransmitOpspOduTcmC.setStatus('current')
if mibBuilder.loadTexts: virtualPortCapTraceTransmitOpspOduTcmC.setDescription('The transmitted Operator Specific part of the TCMC trace (32 character)')
virtualPortCapTimModeOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 2, 1, 57), TimModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortCapTimModeOduTcmC.setStatus('current')
if mibBuilder.loadTexts: virtualPortCapTimModeOduTcmC.setDescription('Detection of TIM-TCMC Condition can be configured')
virtualPortCapTerminationLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 2, 1, 58), OhTerminationLevelCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortCapTerminationLevel.setStatus('current')
if mibBuilder.loadTexts: virtualPortCapTerminationLevel.setDescription('The entity is Addressable by Management [because its supporting entity is defined in the database and therefore its address existsSignal Tremination Level of Intrusive Access to Header Information. Not used in 7.0, monitoring is one layer higher than TERM level, if applicable. All conditions detected on monitoring layer will not be reported (severity degradated to NR).')
virtualPortCapLoopConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 2, 1, 59), LoopConfigCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortCapLoopConfig.setStatus('current')
if mibBuilder.loadTexts: virtualPortCapLoopConfig.setDescription('External or Facility Loopback')
virtualPortCapVcType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 2, 1, 60), VirtualContainerTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortCapVcType.setStatus('current')
if mibBuilder.loadTexts: virtualPortCapVcType.setDescription('Virtual Container Group Type')
virtualPortCapCir = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 2, 1, 61), FspR7Unsigned32Caps()).setUnits('Mbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortCapCir.setStatus('current')
if mibBuilder.loadTexts: virtualPortCapCir.setDescription('CIR (Committed Information Rate ) is used on Ethernet Interfaces with a policing function')
virtualPortCapOpuPayloadType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 2, 1, 62), FspR7OpuPayloadTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortCapOpuPayloadType.setStatus('current')
if mibBuilder.loadTexts: virtualPortCapOpuPayloadType.setDescription('OPU Payload Type Indicator')
virtualPortCapOtnStuffing = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 2, 1, 63), FspR7StuffCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortCapOtnStuffing.setStatus('current')
if mibBuilder.loadTexts: virtualPortCapOtnStuffing.setDescription('Indicates if bit/byte stuffing is used in the transport signal.')
virtualPortCapRedLineState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 2, 1, 64), FspR7RedLinedStateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortCapRedLineState.setStatus('current')
if mibBuilder.loadTexts: virtualPortCapRedLineState.setDescription('will be set by higher level software to act as a barrier to deletion')
virtualPortCapTunnelAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 2, 1, 65), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortCapTunnelAid.setStatus('current')
if mibBuilder.loadTexts: virtualPortCapTunnelAid.setDescription('Tunnel AID')
virtualPortCapTrafficDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 2, 1, 66), FspR7TrafficDirectionCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortCapTrafficDirection.setStatus('current')
if mibBuilder.loadTexts: virtualPortCapTrafficDirection.setDescription('Traffic Direction')
virtualPortCapChannelId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 2, 1, 67), FspR7SnmpLongString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPortCapChannelId.setStatus('current')
if mibBuilder.loadTexts: virtualPortCapChannelId.setDescription('Channel ID [1 ..256]')
endOfVirtualPortCapTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfVirtualPortCapTable.setStatus('current')
if mibBuilder.loadTexts: endOfVirtualPortCapTable.setDescription('')
endOfFacilityMgmtCap = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 4, 10000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfFacilityMgmtCap.setStatus('current')
if mibBuilder.loadTexts: endOfFacilityMgmtCap.setDescription('')
linkCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 5, 1), )
if mibBuilder.loadTexts: linkCapTable.setStatus('current')
if mibBuilder.loadTexts: linkCapTable.setDescription('linkCapTable')
linkCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 5, 1, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityDcnShelfNo"), (0, "ADVA-FSPR7-MIB", "entityDcnSlotNo"), (0, "ADVA-FSPR7-MIB", "entityDcnPortNo"), (0, "ADVA-FSPR7-MIB", "entityDcnExtNo"), (0, "ADVA-FSPR7-MIB", "entityDcnClassName"))
if mibBuilder.loadTexts: linkCapEntry.setStatus('current')
if mibBuilder.loadTexts: linkCapEntry.setDescription('Entry of linkCapTable')
linkCapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 5, 1, 1, 1), FspR7RowStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkCapRowStatus.setStatus('current')
if mibBuilder.loadTexts: linkCapRowStatus.setDescription('RowStatus object is used to create or delete a row in the table.')
linkCapType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 5, 1, 1, 2), FspR7InterfaceTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkCapType.setStatus('current')
if mibBuilder.loadTexts: linkCapType.setDescription('The TYPE defines the transport service type as wrapper with wrapper layer termination OR else as payload')
linkCapAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 5, 1, 1, 3), FspR7AdminStateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkCapAdmin.setStatus('current')
if mibBuilder.loadTexts: linkCapAdmin.setDescription('The Administrative State will be displayed in the GUI with full name values; it will be differently displayed in TL1 syntax according to TL1 display rules. The transaction into the UAS state requires a special destroy/delete function')
linkCapAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 5, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkCapAlias.setStatus('current')
if mibBuilder.loadTexts: linkCapAlias.setDescription('User Applied Descriptor')
linkCapAuthString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 5, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkCapAuthString.setStatus('current')
if mibBuilder.loadTexts: linkCapAuthString.setDescription('OSPF Authentication Key/String depending on Authentication Type')
linkCapProxyArp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 5, 1, 1, 6), FspR7NoYesCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkCapProxyArp.setStatus('current')
if mibBuilder.loadTexts: linkCapProxyArp.setDescription('If enabled then ARP requests for FENDIP (coming in on another interface in the same subnet as FENDIP) will be replied too.')
linkCapOspf = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 5, 1, 1, 7), FspR7OspfModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkCapOspf.setStatus('current')
if mibBuilder.loadTexts: linkCapOspf.setDescription('OSPF Routing (Dynamic)')
linkCapBaud = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 5, 1, 1, 8), FspR7BaundCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkCapBaud.setStatus('current')
if mibBuilder.loadTexts: linkCapBaud.setDescription('Baud rate of the serial interface')
linkCapAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 5, 1, 1, 9), FspR7CpAuthTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkCapAuthType.setStatus('current')
if mibBuilder.loadTexts: linkCapAuthType.setDescription('OSPF Authentication Type')
linkCapIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 5, 1, 1, 10), FspR7IpTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkCapIpType.setStatus('current')
if mibBuilder.loadTexts: linkCapIpType.setDescription('Type of IP configuration')
linkCapMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 5, 1, 1, 11), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkCapMetric.setStatus('current')
if mibBuilder.loadTexts: linkCapMetric.setDescription('Routing Metric')
linkCapAreaAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 5, 1, 1, 12), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkCapAreaAid.setStatus('current')
if mibBuilder.loadTexts: linkCapAreaAid.setDescription('OSPF Area AID')
linkCapNearEndIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 5, 1, 1, 13), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkCapNearEndIp.setStatus('current')
if mibBuilder.loadTexts: linkCapNearEndIp.setDescription('IP Address assigned to PPP Termination Point on Near-End NE. Defaults to System IP address')
linkCapBitrate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 5, 1, 1, 14), FspR7Unsigned32Caps()).setUnits('kbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: linkCapBitrate.setStatus('current')
if mibBuilder.loadTexts: linkCapBitrate.setDescription('Maximum provisioned bit rate for PPP/IP Link of transmitter for an ECC')
linkCapIPv6Type = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 5, 1, 1, 15), FspR7IPv6TypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkCapIPv6Type.setStatus('current')
if mibBuilder.loadTexts: linkCapIPv6Type.setDescription('Type of IPv6 configuration')
linkCapNendIPv6 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 5, 1, 1, 16), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkCapNendIPv6.setStatus('current')
if mibBuilder.loadTexts: linkCapNendIPv6.setDescription('IPv6 Address assigned to PPP Termination Point on Near-End NE.')
endOfLinkCapTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfLinkCapTable.setStatus('current')
if mibBuilder.loadTexts: endOfLinkCapTable.setDescription('')
scCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 5, 3), )
if mibBuilder.loadTexts: scCapTable.setStatus('current')
if mibBuilder.loadTexts: scCapTable.setDescription('scCapTable')
scCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 5, 3, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityDcnShelfNo"), (0, "ADVA-FSPR7-MIB", "entityDcnSlotNo"), (0, "ADVA-FSPR7-MIB", "entityDcnPortNo"), (0, "ADVA-FSPR7-MIB", "entityDcnExtNo"), (0, "ADVA-FSPR7-MIB", "entityDcnClassName"))
if mibBuilder.loadTexts: scCapEntry.setStatus('current')
if mibBuilder.loadTexts: scCapEntry.setDescription('Entry of scCapTable')
scCapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 5, 3, 1, 1), FspR7RowStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scCapRowStatus.setStatus('current')
if mibBuilder.loadTexts: scCapRowStatus.setDescription('RowStatus object is used to create or delete a row in the table.')
scCapType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 5, 3, 1, 2), FspR7InterfaceTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scCapType.setStatus('current')
if mibBuilder.loadTexts: scCapType.setDescription('The TYPE defines the transport service type as wrapper with wrapper layer termination OR else as payload')
scCapAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 5, 3, 1, 3), FspR7AdminStateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scCapAdmin.setStatus('current')
if mibBuilder.loadTexts: scCapAdmin.setDescription('The Administrative State will be displayed in the GUI with full name values; it will be differently displayed in TL1 syntax according to TL1 display rules. The transaction into the UAS state requires a special destroy/delete function')
scCapAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 5, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scCapAlias.setStatus('current')
if mibBuilder.loadTexts: scCapAlias.setDescription('User Applied Descriptor')
scCapAuthString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 5, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scCapAuthString.setStatus('current')
if mibBuilder.loadTexts: scCapAuthString.setDescription('OSPF Authentication Key/String depending on Authentication Type')
scCapOspf = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 5, 3, 1, 6), FspR7OspfModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scCapOspf.setStatus('current')
if mibBuilder.loadTexts: scCapOspf.setDescription('OSPF Routing (Dynamic)')
scCapAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 5, 3, 1, 7), FspR7CpAuthTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scCapAuthType.setStatus('current')
if mibBuilder.loadTexts: scCapAuthType.setDescription('OSPF Authentication Type')
scCapIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 5, 3, 1, 8), FspR7IpTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scCapIpType.setStatus('current')
if mibBuilder.loadTexts: scCapIpType.setDescription('Type of IP configuration')
scCapMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 5, 3, 1, 9), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scCapMetric.setStatus('current')
if mibBuilder.loadTexts: scCapMetric.setDescription('Routing Metric')
scCapAreaAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 5, 3, 1, 10), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scCapAreaAid.setStatus('current')
if mibBuilder.loadTexts: scCapAreaAid.setDescription('OSPF Area AID')
scCapAlsMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 5, 3, 1, 11), FspR7AlsModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scCapAlsMode.setStatus('current')
if mibBuilder.loadTexts: scCapAlsMode.setDescription('Determines the reaction in backward direction in response to a LOS on the same Interface: on a Network Interface connected to the DWDM this is a matter of laser safety')
scCapSigDegThresReceiver = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 5, 3, 1, 12), FspR7Unsigned32Caps()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: scCapSigDegThresReceiver.setStatus('current')
if mibBuilder.loadTexts: scCapSigDegThresReceiver.setDescription('Signal Degrade Threshold on Receiver. Reported as ATTRMT-SDHT to far end.')
scCapAutonegotiation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 5, 3, 1, 13), EnableStateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scCapAutonegotiation.setStatus('current')
if mibBuilder.loadTexts: scCapAutonegotiation.setDescription('Auto Negotiation for the data rate')
scCapBitrate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 5, 3, 1, 14), FspR7BitrateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scCapBitrate.setStatus('current')
if mibBuilder.loadTexts: scCapBitrate.setDescription('Provisioned data rate')
scCapDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 5, 3, 1, 15), EthDuplexModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scCapDuplex.setStatus('current')
if mibBuilder.loadTexts: scCapDuplex.setDescription('Duplex Mode Provision.')
scCapAttGradientTh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 5, 3, 1, 16), FspR7Unsigned32Caps()).setUnits('0.1 dB/min').setMaxAccess("readonly")
if mibBuilder.loadTexts: scCapAttGradientTh.setStatus('current')
if mibBuilder.loadTexts: scCapAttGradientTh.setDescription("Attenuation Gradient Threshold on Receive Fiber. Applies to both TRMT and RCV directions; but threshold violation is reported for each direction separately by the 'tapping' alarms: INTRUDE-RCV and INTRUDE-TRMT.")
scCapIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 5, 3, 1, 17), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scCapIpAddr.setStatus('current')
if mibBuilder.loadTexts: scCapIpAddr.setDescription('IP Address assigned to LAN IP Interface')
scCapLanAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 5, 3, 1, 18), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scCapLanAid.setStatus('current')
if mibBuilder.loadTexts: scCapLanAid.setDescription('AID of LAN')
scCapIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 5, 3, 1, 19), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scCapIpMask.setStatus('current')
if mibBuilder.loadTexts: scCapIpMask.setDescription('IP MASK assigned to LAN IP Interface')
scCapDataLayerPmReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 5, 3, 1, 20), FspR7PmResetCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scCapDataLayerPmReset.setStatus('current')
if mibBuilder.loadTexts: scCapDataLayerPmReset.setDescription('Reset data-layer Performance registers')
scCapPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 5, 3, 1, 21), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scCapPriority.setStatus('current')
if mibBuilder.loadTexts: scCapPriority.setDescription('Priority')
scCapIPv6 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 5, 3, 1, 22), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scCapIPv6.setStatus('current')
if mibBuilder.loadTexts: scCapIPv6.setDescription('IPv6 Address')
scCapIPv6PrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 5, 3, 1, 23), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scCapIPv6PrefixLen.setStatus('current')
if mibBuilder.loadTexts: scCapIPv6PrefixLen.setDescription('IPv6 Subnet Prefix Length')
scCapIpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 5, 3, 1, 24), FspR7IpModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scCapIpMode.setStatus('current')
if mibBuilder.loadTexts: scCapIpMode.setDescription('IP Mode of Operation either IPv4 only or IPv4 and IPv6. When operation supports IPv6, it is used for addresses external to the network.')
scCapGatewayProxyArp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 5, 3, 1, 25), FspR7EnableDisableCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scCapGatewayProxyArp.setStatus('current')
if mibBuilder.loadTexts: scCapGatewayProxyArp.setDescription('Gateway works as an ARP proxy')
endOfScCapTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 5, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfScCapTable.setStatus('current')
if mibBuilder.loadTexts: endOfScCapTable.setDescription('')
lanCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 5, 5), )
if mibBuilder.loadTexts: lanCapTable.setStatus('current')
if mibBuilder.loadTexts: lanCapTable.setDescription('lanCapTable')
lanCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 5, 5, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityDcnShelfNo"), (0, "ADVA-FSPR7-MIB", "entityDcnSlotNo"), (0, "ADVA-FSPR7-MIB", "entityDcnPortNo"), (0, "ADVA-FSPR7-MIB", "entityDcnExtNo"), (0, "ADVA-FSPR7-MIB", "entityDcnClassName"))
if mibBuilder.loadTexts: lanCapEntry.setStatus('current')
if mibBuilder.loadTexts: lanCapEntry.setDescription('Entry of lanCapTable')
lanCapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 5, 5, 1, 1), FspR7RowStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanCapRowStatus.setStatus('current')
if mibBuilder.loadTexts: lanCapRowStatus.setDescription('RowStatus object is used to create or delete a row in the table.')
lanCapType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 5, 5, 1, 2), FspR7InterfaceTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanCapType.setStatus('current')
if mibBuilder.loadTexts: lanCapType.setDescription('The TYPE defines the transport service type as wrapper with wrapper layer termination OR else as payload')
lanCapAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 5, 5, 1, 3), FspR7AdminStateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanCapAdmin.setStatus('current')
if mibBuilder.loadTexts: lanCapAdmin.setDescription('The Administrative State will be displayed in the GUI with full name values; it will be differently displayed in TL1 syntax according to TL1 display rules. The transaction into the UAS state requires a special destroy/delete function')
lanCapAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 5, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanCapAlias.setStatus('current')
if mibBuilder.loadTexts: lanCapAlias.setDescription('User Applied Descriptor')
lanCapAuthString = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 5, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanCapAuthString.setStatus('current')
if mibBuilder.loadTexts: lanCapAuthString.setDescription('OSPF Authentication Key/String depending on Authentication Type')
lanCapOspf = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 5, 5, 1, 6), FspR7OspfModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanCapOspf.setStatus('current')
if mibBuilder.loadTexts: lanCapOspf.setDescription('OSPF Routing (Dynamic)')
lanCapAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 5, 5, 1, 7), FspR7CpAuthTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanCapAuthType.setStatus('current')
if mibBuilder.loadTexts: lanCapAuthType.setDescription('OSPF Authentication Type')
lanCapIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 5, 5, 1, 8), FspR7IpTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanCapIpType.setStatus('current')
if mibBuilder.loadTexts: lanCapIpType.setDescription('Type of IP configuration')
lanCapMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 5, 5, 1, 9), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanCapMetric.setStatus('current')
if mibBuilder.loadTexts: lanCapMetric.setDescription('Routing Metric')
lanCapAreaAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 5, 5, 1, 10), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanCapAreaAid.setStatus('current')
if mibBuilder.loadTexts: lanCapAreaAid.setDescription('OSPF Area AID')
lanCapIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 5, 5, 1, 11), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanCapIpAddr.setStatus('current')
if mibBuilder.loadTexts: lanCapIpAddr.setDescription('IP Address assigned to LAN IP Interface')
lanCapIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 5, 5, 1, 12), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanCapIpMask.setStatus('current')
if mibBuilder.loadTexts: lanCapIpMask.setDescription('IP MASK assigned to LAN IP Interface')
lanCapPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 5, 5, 1, 13), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanCapPriority.setStatus('current')
if mibBuilder.loadTexts: lanCapPriority.setDescription('Priority')
lanCapIPv6 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 5, 5, 1, 14), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanCapIPv6.setStatus('current')
if mibBuilder.loadTexts: lanCapIPv6.setDescription('IPv6 Address')
lanCapIPv6PrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 5, 5, 1, 15), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanCapIPv6PrefixLen.setStatus('current')
if mibBuilder.loadTexts: lanCapIPv6PrefixLen.setDescription('IPv6 Subnet Prefix Length')
lanCapIpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 5, 5, 1, 16), FspR7IpModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanCapIpMode.setStatus('current')
if mibBuilder.loadTexts: lanCapIpMode.setDescription('IP Mode of Operation either IPv4 only or IPv4 and IPv6. When operation supports IPv6, it is used for addresses external to the network.')
endOfLanCapTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 5, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfLanCapTable.setStatus('current')
if mibBuilder.loadTexts: endOfLanCapTable.setDescription('')
eccCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 5, 7), )
if mibBuilder.loadTexts: eccCapTable.setStatus('current')
if mibBuilder.loadTexts: eccCapTable.setDescription('eccCapTable (Embedded Communication Channel)')
eccCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 5, 7, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityDcnShelfNo"), (0, "ADVA-FSPR7-MIB", "entityDcnSlotNo"), (0, "ADVA-FSPR7-MIB", "entityDcnPortNo"), (0, "ADVA-FSPR7-MIB", "entityDcnExtNo"), (0, "ADVA-FSPR7-MIB", "entityDcnClassName"))
if mibBuilder.loadTexts: eccCapEntry.setStatus('current')
if mibBuilder.loadTexts: eccCapEntry.setDescription('Entry of eccCapTable')
eccCapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 5, 7, 1, 1), FspR7RowStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eccCapRowStatus.setStatus('current')
if mibBuilder.loadTexts: eccCapRowStatus.setDescription('RowStatus object is used to create or delete a row in the table.')
eccCapType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 5, 7, 1, 2), FspR7InterfaceTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eccCapType.setStatus('current')
if mibBuilder.loadTexts: eccCapType.setDescription('The TYPE defines the transport service type as wrapper with wrapper layer termination OR else as payload')
eccCapAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 5, 7, 1, 3), FspR7AdminStateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eccCapAdmin.setStatus('current')
if mibBuilder.loadTexts: eccCapAdmin.setDescription('The Administrative State will be displayed in the GUI with full name values; it will be differently displayed in TL1 syntax according to TL1 display rules. The transaction into the UAS state requires a special destroy/delete function')
eccCapAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 5, 7, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eccCapAlias.setStatus('current')
if mibBuilder.loadTexts: eccCapAlias.setDescription('User Applied Descriptor')
eccCapLanAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 5, 7, 1, 5), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eccCapLanAid.setStatus('current')
if mibBuilder.loadTexts: eccCapLanAid.setDescription('AID of LAN')
eccCapExternalVid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 5, 7, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eccCapExternalVid.setStatus('current')
if mibBuilder.loadTexts: eccCapExternalVid.setDescription('External VID')
endOfEccCapTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 5, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfEccCapTable.setStatus('current')
if mibBuilder.loadTexts: endOfEccCapTable.setDescription('')
endOfDcnMgmtCap = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 5, 10000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfDcnMgmtCap.setStatus('current')
if mibBuilder.loadTexts: endOfDcnMgmtCap.setDescription('')
opticalMuxCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 6, 1), )
if mibBuilder.loadTexts: opticalMuxCapTable.setStatus('current')
if mibBuilder.loadTexts: opticalMuxCapTable.setDescription('opticalCapTable')
opticalMuxCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 6, 1, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityOpticalMuxShelfNo"), (0, "ADVA-FSPR7-MIB", "entityOpticalMuxSlotNo"), (0, "ADVA-FSPR7-MIB", "entityOpticalMuxPortNo"), (0, "ADVA-FSPR7-MIB", "entityOpticalMuxExtNo"), (0, "ADVA-FSPR7-MIB", "entityOpticalMuxClassName"))
if mibBuilder.loadTexts: opticalMuxCapEntry.setStatus('current')
if mibBuilder.loadTexts: opticalMuxCapEntry.setDescription('Entry of opticalCapTable')
opticalMuxCapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 6, 1, 1, 1), FspR7RowStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxCapRowStatus.setStatus('current')
if mibBuilder.loadTexts: opticalMuxCapRowStatus.setDescription('RowStatus object is used to create or delete a row in the table.')
opticalMuxCapPumpPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 6, 1, 1, 2), FspR7Integer32Caps()).setUnits('0.2 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxCapPumpPower.setStatus('current')
if mibBuilder.loadTexts: opticalMuxCapPumpPower.setDescription('Total raman pump power')
opticalMuxCapInhibitSwitchToWork = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 6, 1, 1, 3), FspR7YesNoCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxCapInhibitSwitchToWork.setStatus('current')
if mibBuilder.loadTexts: opticalMuxCapInhibitSwitchToWork.setDescription('Inhibit Switch to Working. Inhibition blocks a switchInhibit Switch to Protection facility. Inhibition blocksInhibit Switch to Working. Inhibition blocks a switch switch to the Protection facility (protection path).Inhibit Switch to Protection facility. Inhibition blocks switch to the Protection facility (protection path). to the Working facility (working path). to the Working facility (working path). Applicable only for the Working facility in ACT state. Applicable only for the Working facility in ACT state. Applicable for the Protection facility in ACT state. Applicable for the Protection facility in ACT state.')
opticalMuxCapForceLaserOn = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 6, 1, 1, 4), FspR7LaserForcedOperationCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxCapForceLaserOn.setStatus('current')
if mibBuilder.loadTexts: opticalMuxCapForceLaserOn.setDescription('Laser Forced On')
opticalMuxCapAseTabCreation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 6, 1, 1, 5), FspR7AseTabOprCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxCapAseTabCreation.setStatus('current')
if mibBuilder.loadTexts: opticalMuxCapAseTabCreation.setDescription('ASE Table creation in process')
opticalMuxCapOpticalSetPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 6, 1, 1, 6), FspR7Integer32Caps()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxCapOpticalSetPoint.setStatus('current')
if mibBuilder.loadTexts: opticalMuxCapOpticalSetPoint.setDescription('Sets the optical power for power equalization in ROADM or for channel power control in OPCM')
opticalMuxCapInitiateEqualization = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 6, 1, 1, 7), FspR7InitEqualizationCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxCapInitiateEqualization.setStatus('current')
if mibBuilder.loadTexts: opticalMuxCapInitiateEqualization.setDescription('Initiate Equalization')
opticalMuxCapTilt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 6, 1, 1, 8), FspR7Integer32Caps()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxCapTilt.setStatus('current')
if mibBuilder.loadTexts: opticalMuxCapTilt.setDescription('Change of optical channel power in dB over the complete transmission band')
opticalMuxCapOscOpticalSetpoint = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 6, 1, 1, 9), FspR7Integer32Caps()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxCapOscOpticalSetpoint.setStatus('current')
if mibBuilder.loadTexts: opticalMuxCapOscOpticalSetpoint.setDescription('Sets the OSC optical power')
opticalMuxCapOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 6, 1, 1, 10), FspR7Integer32Caps()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxCapOffset.setStatus('current')
if mibBuilder.loadTexts: opticalMuxCapOffset.setDescription('Sets the offset for the mean optical power for power equalization in ROADM')
opticalMuxCapSwitchCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 6, 1, 1, 11), FspR7APSCommandCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxCapSwitchCommand.setStatus('current')
if mibBuilder.loadTexts: opticalMuxCapSwitchCommand.setDescription('The switch command action for this facility. A command resulting in a switch event will also cause a change of the facility secondary state and a corresponding condition. Addressed by this command is the active port, the port to switch away from. Since this is a manual switch command, it will not switch if other port suffers from a signalfailure or a signal degrade.')
opticalMuxCapAlsMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 6, 1, 1, 12), FspR7AlsModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxCapAlsMode.setStatus('current')
if mibBuilder.loadTexts: opticalMuxCapAlsMode.setDescription('Determines the reaction in backward direction in response to a LOS on the same Interface: on a Network Interface connected to the DWDM this is a matter of laser safety')
opticalMuxCapType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 6, 1, 1, 13), FspR7InterfaceTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxCapType.setStatus('current')
if mibBuilder.loadTexts: opticalMuxCapType.setDescription('The TYPE defines the transport service type as wrapper with wrapper layer termination OR else as payload')
opticalMuxCapAttenuationGradient = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 6, 1, 1, 14), FspR7Unsigned32Caps()).setUnits('0.1 dB/min').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxCapAttenuationGradient.setStatus('current')
if mibBuilder.loadTexts: opticalMuxCapAttenuationGradient.setDescription("Attenuation Gradient Threshold on Receive Fiber. Applies to both TRMT and RCV directions; but threshold violation is reported for each direction separately by the 'tapping' alarms: INTRUDE-RCV and INTRUDE-TRMT.")
opticalMuxCapInhibitSwitchToProt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 6, 1, 1, 15), FspR7YesNoCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxCapInhibitSwitchToProt.setStatus('current')
if mibBuilder.loadTexts: opticalMuxCapInhibitSwitchToProt.setDescription('Inhibit Switch to Working. Inhibition blocks a switchInhibit Switch to Protection facility. Inhibition blocksInhibit Switch to Working. Inhibition blocks a switch')
opticalMuxCapVariableGain = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 6, 1, 1, 16), FspR7Unsigned32Caps()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxCapVariableGain.setStatus('current')
if mibBuilder.loadTexts: opticalMuxCapVariableGain.setDescription('Variable Gain of EDFA')
opticalMuxCapAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 6, 1, 1, 17), FspR7AdminStateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxCapAdmin.setStatus('current')
if mibBuilder.loadTexts: opticalMuxCapAdmin.setDescription('The Administrative State will be displayed in the GUI with full name values; it will be differently displayed in TL1 syntax according to TL1 display rules. The transaction into the UAS state requires a special destroy/delete function')
opticalMuxCapTimePeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 6, 1, 1, 18), FspR7OtdrPeriodCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxCapTimePeriod.setStatus('current')
if mibBuilder.loadTexts: opticalMuxCapTimePeriod.setDescription('NONE - OTDR measurement disabled otherwise the OTDR duration in minutes.')
opticalMuxCapSigDegThresReceiver = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 6, 1, 1, 19), FspR7Unsigned32Caps()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxCapSigDegThresReceiver.setStatus('current')
if mibBuilder.loadTexts: opticalMuxCapSigDegThresReceiver.setDescription('Signal Degrade Threshold on Receiver. Reported as ATTRMT-SDHT to far end.')
opticalMuxCapAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 6, 1, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxCapAlias.setStatus('current')
if mibBuilder.loadTexts: opticalMuxCapAlias.setDescription('User Applied Descriptor')
opticalMuxCapDataLayerPmReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 6, 1, 1, 21), FspR7PmResetCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxCapDataLayerPmReset.setStatus('current')
if mibBuilder.loadTexts: opticalMuxCapDataLayerPmReset.setDescription('Reset data-layer Performance registers')
opticalMuxCapGain = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 6, 1, 1, 22), FspR7GainCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxCapGain.setStatus('current')
if mibBuilder.loadTexts: opticalMuxCapGain.setDescription('Gain')
opticalMuxCapEdfaPwrOut = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 6, 1, 1, 23), FspR7EdfaOutputPowerRatingCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxCapEdfaPwrOut.setStatus('current')
if mibBuilder.loadTexts: opticalMuxCapEdfaPwrOut.setDescription('Optical Output Power Rating - Provision')
opticalMuxCapVoaSetpoint = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 6, 1, 1, 24), FspR7Unsigned32Caps()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxCapVoaSetpoint.setStatus('current')
if mibBuilder.loadTexts: opticalMuxCapVoaSetpoint.setDescription('Sets the optical attenuation of VOA')
opticalMuxCapFiberBrand = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 6, 1, 1, 25), FspR7FiberBrandCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxCapFiberBrand.setStatus('current')
if mibBuilder.loadTexts: opticalMuxCapFiberBrand.setDescription('Brand of fiber present in the fiber plant')
opticalMuxCapTiltSet = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 6, 1, 1, 26), FspR7TiltSetCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxCapTiltSet.setStatus('current')
if mibBuilder.loadTexts: opticalMuxCapTiltSet.setDescription('Tilt setting as discrete values versus a range')
opticalMuxCapForceFwdAsePilotOn = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 6, 1, 1, 27), FspR7LaserForcedOperationCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxCapForceFwdAsePilotOn.setStatus('current')
if mibBuilder.loadTexts: opticalMuxCapForceFwdAsePilotOn.setDescription('Force the BWD Raman pilot on to allow building of FWD Raman ASE Table')
opticalMuxCapBandProvision = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 6, 1, 1, 28), FspR7OpticalBandCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxCapBandProvision.setStatus('current')
if mibBuilder.loadTexts: opticalMuxCapBandProvision.setDescription('Band Provision. Reference to BAND__INVENTORY.')
opticalMuxCapOffsetHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 6, 1, 1, 29), FspR7Integer32Caps()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxCapOffsetHigh.setStatus('current')
if mibBuilder.loadTexts: opticalMuxCapOffsetHigh.setDescription('Sets the high level offset for power equalization in CCM')
opticalMuxCapOffsetLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 6, 1, 1, 30), FspR7Integer32Caps()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxCapOffsetLow.setStatus('current')
if mibBuilder.loadTexts: opticalMuxCapOffsetLow.setDescription('Sets the low level offset for power equalization in CCM')
opticalMuxCapOptUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 6, 1, 1, 31), FspR7OptUpdateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalMuxCapOptUpdate.setStatus('current')
if mibBuilder.loadTexts: opticalMuxCapOptUpdate.setDescription('This parameter is used to operate/trigger OPT PM update; it triggers the entity to update its current OPT PM value, which can be retrieved via GET function.')
endOfOpticalMuxCapTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfOpticalMuxCapTable.setStatus('current')
if mibBuilder.loadTexts: endOfOpticalMuxCapTable.setDescription('')
endOfOpticalMuxMgmtCap = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 6, 10000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfOpticalMuxMgmtCap.setStatus('current')
if mibBuilder.loadTexts: endOfOpticalMuxMgmtCap.setDescription('')
shelfConnCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 7, 1), )
if mibBuilder.loadTexts: shelfConnCapTable.setStatus('current')
if mibBuilder.loadTexts: shelfConnCapTable.setDescription('shelfConnCapTable')
shelfConnCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 7, 1, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityShelfConnShelfNo"), (0, "ADVA-FSPR7-MIB", "entityShelfConnSlotNo"), (0, "ADVA-FSPR7-MIB", "entityShelfConnPortNo"), (0, "ADVA-FSPR7-MIB", "entityShelfConnExtNo"), (0, "ADVA-FSPR7-MIB", "entityShelfConnClassName"))
if mibBuilder.loadTexts: shelfConnCapEntry.setStatus('current')
if mibBuilder.loadTexts: shelfConnCapEntry.setDescription('Entry of shelfConnCapTable')
shelfConnCapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 7, 1, 1, 1), FspR7RowStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfConnCapRowStatus.setStatus('current')
if mibBuilder.loadTexts: shelfConnCapRowStatus.setDescription('RowStatus object is used to create or delete a row in the table.')
shelfConnCapAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 7, 1, 1, 2), FspR7AdminStateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfConnCapAdmin.setStatus('current')
if mibBuilder.loadTexts: shelfConnCapAdmin.setDescription('The Administrative State will be displayed in the GUI with full name values; it will be differently displayed in TL1 syntax according to TL1 display rules. The transaction into the UAS state requires a special destroy/delete function')
shelfConnCapAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 7, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfConnCapAlias.setStatus('current')
if mibBuilder.loadTexts: shelfConnCapAlias.setDescription('User Applied Descriptor')
shelfConnCapFacilityType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 7, 1, 1, 4), FspR7InterfaceTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfConnCapFacilityType.setStatus('current')
if mibBuilder.loadTexts: shelfConnCapFacilityType.setDescription('The TYPE defines the transport service type as wrapper with wrapper layer termination OR else as payload')
endOfShelfConnCapTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 7, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfShelfConnCapTable.setStatus('current')
if mibBuilder.loadTexts: endOfShelfConnCapTable.setDescription('')
endOfShelfConnMgmtCap = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 7, 10000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfShelfConnMgmtCap.setStatus('current')
if mibBuilder.loadTexts: endOfShelfConnMgmtCap.setDescription('')
envPortCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 8, 1), )
if mibBuilder.loadTexts: envPortCapTable.setStatus('current')
if mibBuilder.loadTexts: envPortCapTable.setDescription('envPortCapTable')
envPortCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 8, 1, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityEqptShelfNo"), (0, "ADVA-FSPR7-MIB", "entityEqptSlotNo"), (0, "ADVA-FSPR7-MIB", "entityEqptPortNo"), (0, "ADVA-FSPR7-MIB", "entityEqptExtNo"), (0, "ADVA-FSPR7-MIB", "entityEqptClassName"))
if mibBuilder.loadTexts: envPortCapEntry.setStatus('current')
if mibBuilder.loadTexts: envPortCapEntry.setDescription('Entry of envPortCapTable')
envPortCapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 8, 1, 1, 1), FspR7RowStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envPortCapRowStatus.setStatus('current')
if mibBuilder.loadTexts: envPortCapRowStatus.setDescription('RowStatus object is used to create or delete a row in the table.')
envPortCapTelemetry = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 8, 1, 1, 2), FspR7TelemetryOutputCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envPortCapTelemetry.setStatus('current')
if mibBuilder.loadTexts: envPortCapTelemetry.setDescription('Telemetry interface output provision')
envPortCapFacilityType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 8, 1, 1, 3), FspR7InterfaceTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envPortCapFacilityType.setStatus('current')
if mibBuilder.loadTexts: envPortCapFacilityType.setDescription('The TYPE defines the transport service type as wrapper with wrapper layer termination OR else as payload')
envPortCapTifAlarmType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 8, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envPortCapTifAlarmType.setStatus('current')
if mibBuilder.loadTexts: envPortCapTifAlarmType.setDescription('Telemetry interface alarm type')
envPortCapTifAlarmMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 8, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envPortCapTifAlarmMessage.setStatus('current')
if mibBuilder.loadTexts: envPortCapTifAlarmMessage.setDescription('Telemetry interface alarm message')
envPortCapInvertTifInputLogic = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 8, 1, 1, 6), FspR7InvertTelemetryInputLogicCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envPortCapInvertTifInputLogic.setStatus('current')
if mibBuilder.loadTexts: envPortCapInvertTifInputLogic.setDescription('Invert telemetry interface input logic')
endOfEnvPortCapTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 8, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfEnvPortCapTable.setStatus('current')
if mibBuilder.loadTexts: endOfEnvPortCapTable.setDescription('')
endOfEnvMgmtCap = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 8, 10000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfEnvMgmtCap.setStatus('current')
if mibBuilder.loadTexts: endOfEnvMgmtCap.setDescription('')
containerCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 9, 1), )
if mibBuilder.loadTexts: containerCapTable.setStatus('current')
if mibBuilder.loadTexts: containerCapTable.setDescription('containerCapTable')
containerCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 9, 1, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityContainerShelfNo"), (0, "ADVA-FSPR7-MIB", "entityContainerSlotNo"), (0, "ADVA-FSPR7-MIB", "entityContainerPortNo"), (0, "ADVA-FSPR7-MIB", "entityContainerExtNo"), (0, "ADVA-FSPR7-MIB", "entityContainerClassName"))
if mibBuilder.loadTexts: containerCapEntry.setStatus('current')
if mibBuilder.loadTexts: containerCapEntry.setDescription('Entry of containerCapTable')
containerCapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 9, 1, 1, 1), FspR7RowStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerCapRowStatus.setStatus('current')
if mibBuilder.loadTexts: containerCapRowStatus.setDescription('RowStatus object is used to create or delete a row in the table.')
containerCapFacilityType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 9, 1, 1, 2), FspR7InterfaceTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: containerCapFacilityType.setStatus('current')
if mibBuilder.loadTexts: containerCapFacilityType.setDescription('The TYPE defines the transport service type as wrapper with wrapper layer termination OR else as payload')
endOfContainerCapTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 9, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfContainerCapTable.setStatus('current')
if mibBuilder.loadTexts: endOfContainerCapTable.setDescription('')
endOfContainerMgmtCap = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 9, 10000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfContainerMgmtCap.setStatus('current')
if mibBuilder.loadTexts: endOfContainerMgmtCap.setDescription('')
opticalLineCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 10, 1), )
if mibBuilder.loadTexts: opticalLineCapTable.setStatus('current')
if mibBuilder.loadTexts: opticalLineCapTable.setDescription('opticalLineCapTable')
opticalLineCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 10, 1, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityOptLineIndexNo1"), (0, "ADVA-FSPR7-MIB", "entityOptLineIndexNo1"), (0, "ADVA-FSPR7-MIB", "entityOptLineIndexNo1"), (0, "ADVA-FSPR7-MIB", "entityOptLineIndexNo1"), (0, "ADVA-FSPR7-MIB", "entityOptLineClassName"))
if mibBuilder.loadTexts: opticalLineCapEntry.setStatus('current')
if mibBuilder.loadTexts: opticalLineCapEntry.setDescription('Entry of opticalLineCapTable')
opticalLineCapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 10, 1, 1, 1), FspR7RowStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalLineCapRowStatus.setStatus('current')
if mibBuilder.loadTexts: opticalLineCapRowStatus.setDescription('RowStatus object is used to create or delete a row in the table.')
opticalLineCapTxLineAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 10, 1, 1, 2), FspR7Integer32Caps()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalLineCapTxLineAttenuation.setStatus('current')
if mibBuilder.loadTexts: opticalLineCapTxLineAttenuation.setDescription("The Attenuation (in 0.1 dB) on line connected to transmitter of this interface. If there is loss of signal then line attenuation is -65535. The value -255 will be returned if the value isn't available.")
opticalLineCapRxLineAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 10, 1, 1, 3), FspR7Integer32Caps()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalLineCapRxLineAttenuation.setStatus('current')
if mibBuilder.loadTexts: opticalLineCapRxLineAttenuation.setDescription("The Attenuation (in 0.1 dB) on line connected to receiver of this interface. If there is loss of signal then ine attenuation is -65535. The value -255 will be returned if the value isn't available.")
opticalLineCapAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 10, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalLineCapAlias.setStatus('current')
if mibBuilder.loadTexts: opticalLineCapAlias.setDescription('User Applied Descriptor')
opticalLineCapFarEndLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 10, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalLineCapFarEndLocation.setStatus('current')
if mibBuilder.loadTexts: opticalLineCapFarEndLocation.setDescription('FEND Location')
endOfOpticalLineCapTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 10, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfOpticalLineCapTable.setStatus('current')
if mibBuilder.loadTexts: endOfOpticalLineCapTable.setDescription('')
endOfOpticalLineMgmtCap = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 10, 10000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfOpticalLineMgmtCap.setStatus('current')
if mibBuilder.loadTexts: endOfOpticalLineMgmtCap.setDescription('')
endOfManagementCap = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 3, 10000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfManagementCap.setStatus('current')
if mibBuilder.loadTexts: endOfManagementCap.setDescription('')
optThresholdConfigCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 4, 1, 1), )
if mibBuilder.loadTexts: optThresholdConfigCapTable.setStatus('current')
if mibBuilder.loadTexts: optThresholdConfigCapTable.setDescription('optThresholdConfigCapTable')
optThresholdConfigCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 4, 1, 1, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityFacilityShelfNo"), (0, "ADVA-FSPR7-MIB", "entityFacilitySlotNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityPortNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityExtNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityClassName"))
if mibBuilder.loadTexts: optThresholdConfigCapEntry.setStatus('current')
if mibBuilder.loadTexts: optThresholdConfigCapEntry.setDescription('Entry of optThresholdConfigCapTable')
optThresholdConfigCapLowConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 4, 1, 1, 1, 1), FspR7Integer32Caps()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optThresholdConfigCapLowConfig.setStatus('current')
if mibBuilder.loadTexts: optThresholdConfigCapLowConfig.setDescription('Configurable threshold of the Optical Power Transmitted (output)')
optThresholdConfigCapHighConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 4, 1, 1, 1, 2), FspR7Integer32Caps()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optThresholdConfigCapHighConfig.setStatus('current')
if mibBuilder.loadTexts: optThresholdConfigCapHighConfig.setDescription('Configurable high threshold of the Optical Power Transmitted (output)')
oprThresholdConfigCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 4, 1, 2), )
if mibBuilder.loadTexts: oprThresholdConfigCapTable.setStatus('current')
if mibBuilder.loadTexts: oprThresholdConfigCapTable.setDescription('oprThresholdConfigCapTable')
oprThresholdConfigCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 4, 1, 2, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityFacilityShelfNo"), (0, "ADVA-FSPR7-MIB", "entityFacilitySlotNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityPortNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityExtNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityClassName"))
if mibBuilder.loadTexts: oprThresholdConfigCapEntry.setStatus('current')
if mibBuilder.loadTexts: oprThresholdConfigCapEntry.setDescription('Entry of oprThresholdConfigCapTable')
oprThresholdConfigCapLowConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 4, 1, 2, 1, 1), FspR7Integer32Caps()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: oprThresholdConfigCapLowConfig.setStatus('current')
if mibBuilder.loadTexts: oprThresholdConfigCapLowConfig.setDescription('Optical Input Power Received')
oprThresholdConfigCapHighConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 4, 1, 2, 1, 2), FspR7Integer32Caps()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: oprThresholdConfigCapHighConfig.setStatus('current')
if mibBuilder.loadTexts: oprThresholdConfigCapHighConfig.setDescription('Optical Input Power Received')
endOfOprThresholdConfigCapTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfOprThresholdConfigCapTable.setStatus('current')
if mibBuilder.loadTexts: endOfOprThresholdConfigCapTable.setDescription('')
endOfPerformanceFacilityThresholdCap = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 4, 1, 10000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfPerformanceFacilityThresholdCap.setStatus('current')
if mibBuilder.loadTexts: endOfPerformanceFacilityThresholdCap.setDescription('')
endOfPerformanceFacilityCap = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 4, 10000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfPerformanceFacilityCap.setStatus('current')
if mibBuilder.loadTexts: endOfPerformanceFacilityCap.setDescription('')
dcnPhysThresholdCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 11, 2, 2, 1), )
if mibBuilder.loadTexts: dcnPhysThresholdCapTable.setStatus('current')
if mibBuilder.loadTexts: dcnPhysThresholdCapTable.setDescription('')
dcnPhysThresholdCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 11, 2, 2, 1, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityDcnShelfNo"), (0, "ADVA-FSPR7-MIB", "entityDcnSlotNo"), (0, "ADVA-FSPR7-MIB", "entityDcnPortNo"), (0, "ADVA-FSPR7-MIB", "entityDcnExtNo"), (0, "ADVA-FSPR7-MIB", "entityDcnClassName"))
if mibBuilder.loadTexts: dcnPhysThresholdCapEntry.setStatus('current')
if mibBuilder.loadTexts: dcnPhysThresholdCapEntry.setDescription('')
dcnPhysThresholdCapOprLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 11, 2, 2, 1, 1, 1), FspR7Integer32Caps()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: dcnPhysThresholdCapOprLow.setStatus('current')
if mibBuilder.loadTexts: dcnPhysThresholdCapOprLow.setDescription('Optical Input Power Received')
dcnPhysThresholdCapOprHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 11, 2, 2, 1, 1, 2), FspR7Integer32Caps()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: dcnPhysThresholdCapOprHigh.setStatus('current')
if mibBuilder.loadTexts: dcnPhysThresholdCapOprHigh.setDescription('Optical Input Power Received')
dcnPhysThresholdCapAttRcvLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 11, 2, 2, 1, 1, 3), FspR7Integer32Caps()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: dcnPhysThresholdCapAttRcvLow.setStatus('current')
if mibBuilder.loadTexts: dcnPhysThresholdCapAttRcvLow.setDescription('Low Threshold for Attenuation on Receive Fiber.')
dcnPhysThresholdCapAttRcvHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 11, 2, 2, 1, 1, 4), FspR7Integer32Caps()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: dcnPhysThresholdCapAttRcvHigh.setStatus('current')
if mibBuilder.loadTexts: dcnPhysThresholdCapAttRcvHigh.setDescription('High Threshold for Attenuation on Receive Fiber')
endOfDcnPhysThresholdCapTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 11, 2, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfDcnPhysThresholdCapTable.setStatus('current')
if mibBuilder.loadTexts: endOfDcnPhysThresholdCapTable.setDescription('')
endOfPmDcnPhysThresholdCap = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 11, 2, 2, 10000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfPmDcnPhysThresholdCap.setStatus('current')
if mibBuilder.loadTexts: endOfPmDcnPhysThresholdCap.setDescription('')
endOfPmDcnPhysicalCap = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 11, 2, 10000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfPmDcnPhysicalCap.setStatus('current')
if mibBuilder.loadTexts: endOfPmDcnPhysicalCap.setDescription('')
endOfPmDcnCap = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 11, 10000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfPmDcnCap.setStatus('current')
if mibBuilder.loadTexts: endOfPmDcnCap.setDescription('')
oduFacilityDataThresholdCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 1), )
if mibBuilder.loadTexts: oduFacilityDataThresholdCapTable.setStatus('current')
if mibBuilder.loadTexts: oduFacilityDataThresholdCapTable.setDescription('')
oduFacilityDataThresholdCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 1, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityFacilityShelfNo"), (0, "ADVA-FSPR7-MIB", "entityFacilitySlotNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityPortNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityExtNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityClassName"))
if mibBuilder.loadTexts: oduFacilityDataThresholdCapEntry.setStatus('current')
if mibBuilder.loadTexts: oduFacilityDataThresholdCapEntry.setDescription('')
oduFacilityDataThresholdCapESHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 1, 1, 1), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oduFacilityDataThresholdCapESHighThres15min.setStatus('current')
if mibBuilder.loadTexts: oduFacilityDataThresholdCapESHighThres15min.setDescription('ODU Errored Seconds 15 Minute Threshold')
oduFacilityDataThresholdCapESHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 1, 1, 2), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oduFacilityDataThresholdCapESHighThres1day.setStatus('current')
if mibBuilder.loadTexts: oduFacilityDataThresholdCapESHighThres1day.setDescription('ODU Errored Seconds 1 Day Threshold')
oduFacilityDataThresholdCapSESHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 1, 1, 3), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oduFacilityDataThresholdCapSESHighThres15min.setStatus('current')
if mibBuilder.loadTexts: oduFacilityDataThresholdCapSESHighThres15min.setDescription('ODU Severely Errored Seconds 15 Minute Threshold')
oduFacilityDataThresholdCapSESHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 1, 1, 4), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oduFacilityDataThresholdCapSESHighThres1day.setStatus('current')
if mibBuilder.loadTexts: oduFacilityDataThresholdCapSESHighThres1day.setDescription('ODU Severely Errored Seconds 1 Day Threshold')
oduFacilityDataThresholdCapBbeHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 1, 1, 5), Counter64StringCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oduFacilityDataThresholdCapBbeHighThres15min.setStatus('current')
if mibBuilder.loadTexts: oduFacilityDataThresholdCapBbeHighThres15min.setDescription('ODU Background Block Errors 15 Minute Threshold')
oduFacilityDataThresholdCapBbeHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 1, 1, 6), Counter64StringCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oduFacilityDataThresholdCapBbeHighThres1day.setStatus('current')
if mibBuilder.loadTexts: oduFacilityDataThresholdCapBbeHighThres1day.setDescription('ODU Background Block Errors 1 Day Threshold')
oduFacilityDataThresholdCapUASHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 1, 1, 7), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oduFacilityDataThresholdCapUASHighThres15min.setStatus('current')
if mibBuilder.loadTexts: oduFacilityDataThresholdCapUASHighThres15min.setDescription('ODU Unavailable Seconds 15 Minute Threshold')
oduFacilityDataThresholdCapUASHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 1, 1, 8), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oduFacilityDataThresholdCapUASHighThres1day.setStatus('current')
if mibBuilder.loadTexts: oduFacilityDataThresholdCapUASHighThres1day.setDescription('ODU Unavailable Seconds 1 Day Threshold')
endOfOduFacilityDataThresholdCapTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfOduFacilityDataThresholdCapTable.setStatus('current')
if mibBuilder.loadTexts: endOfOduFacilityDataThresholdCapTable.setDescription('')
tcmAFacilityDataThresholdCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 3), )
if mibBuilder.loadTexts: tcmAFacilityDataThresholdCapTable.setStatus('current')
if mibBuilder.loadTexts: tcmAFacilityDataThresholdCapTable.setDescription('')
tcmAFacilityDataThresholdCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 3, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityFacilityShelfNo"), (0, "ADVA-FSPR7-MIB", "entityFacilitySlotNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityPortNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityExtNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityClassName"))
if mibBuilder.loadTexts: tcmAFacilityDataThresholdCapEntry.setStatus('current')
if mibBuilder.loadTexts: tcmAFacilityDataThresholdCapEntry.setDescription('')
tcmAFacilityDataThresholdCapESHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 3, 1, 1), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcmAFacilityDataThresholdCapESHighThres15min.setStatus('current')
if mibBuilder.loadTexts: tcmAFacilityDataThresholdCapESHighThres15min.setDescription('ODU Tandem Connection Monitoring A Errored Seconds 15 Minute Threshold')
tcmAFacilityDataThresholdCapESHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 3, 1, 2), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcmAFacilityDataThresholdCapESHighThres1day.setStatus('current')
if mibBuilder.loadTexts: tcmAFacilityDataThresholdCapESHighThres1day.setDescription('ODU Tandem Connection Monitoring A Errored Seconds 1 Day Threshold')
tcmAFacilityDataThresholdCapSESHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 3, 1, 3), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcmAFacilityDataThresholdCapSESHighThres15min.setStatus('current')
if mibBuilder.loadTexts: tcmAFacilityDataThresholdCapSESHighThres15min.setDescription('Tandem Connection Monitor A Section Severely Errored Seconds 15 Minute Threshold')
tcmAFacilityDataThresholdCapSESHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 3, 1, 4), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcmAFacilityDataThresholdCapSESHighThres1day.setStatus('current')
if mibBuilder.loadTexts: tcmAFacilityDataThresholdCapSESHighThres1day.setDescription('Tandem Connection Monitor A Section Severely Errored Seconds 1 Day Threshold')
tcmAFacilityDataThresholdCapBbeHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 3, 1, 5), Counter64StringCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcmAFacilityDataThresholdCapBbeHighThres15min.setStatus('current')
if mibBuilder.loadTexts: tcmAFacilityDataThresholdCapBbeHighThres15min.setDescription('ODU Tandem Connection A Background Block Errors 15 Minute Threshold')
tcmAFacilityDataThresholdCapBbeHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 3, 1, 6), Counter64StringCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcmAFacilityDataThresholdCapBbeHighThres1day.setStatus('current')
if mibBuilder.loadTexts: tcmAFacilityDataThresholdCapBbeHighThres1day.setDescription('ODU Tandem Connection A Background Block Errors 1 Day Minute Threshold')
tcmAFacilityDataThresholdCapUASHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 3, 1, 7), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcmAFacilityDataThresholdCapUASHighThres15min.setStatus('current')
if mibBuilder.loadTexts: tcmAFacilityDataThresholdCapUASHighThres15min.setDescription('ODU Tandem Connection Monitoring A Unavailable Seconds 15 Minute Threshold')
tcmAFacilityDataThresholdCapUASHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 3, 1, 8), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcmAFacilityDataThresholdCapUASHighThres1day.setStatus('current')
if mibBuilder.loadTexts: tcmAFacilityDataThresholdCapUASHighThres1day.setDescription('ODU Tandem Connection Monitoring A Unavailable Seconds 1 Day Threshold')
endOfTcmAFacilityDataThresholdCapTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfTcmAFacilityDataThresholdCapTable.setStatus('current')
if mibBuilder.loadTexts: endOfTcmAFacilityDataThresholdCapTable.setDescription('')
tcmBFacilityDataThresholdCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 5), )
if mibBuilder.loadTexts: tcmBFacilityDataThresholdCapTable.setStatus('current')
if mibBuilder.loadTexts: tcmBFacilityDataThresholdCapTable.setDescription('')
tcmBFacilityDataThresholdCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 5, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityFacilityShelfNo"), (0, "ADVA-FSPR7-MIB", "entityFacilitySlotNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityPortNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityExtNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityClassName"))
if mibBuilder.loadTexts: tcmBFacilityDataThresholdCapEntry.setStatus('current')
if mibBuilder.loadTexts: tcmBFacilityDataThresholdCapEntry.setDescription('')
tcmBFacilityDataThresholdCapBESHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 5, 1, 1), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcmBFacilityDataThresholdCapBESHighThres15min.setStatus('current')
if mibBuilder.loadTexts: tcmBFacilityDataThresholdCapBESHighThres15min.setDescription('ODU Tandem Connection Monitoring B Errored Seconds 15 Minute Threshold')
tcmBFacilityDataThresholdCapESHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 5, 1, 2), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcmBFacilityDataThresholdCapESHighThres1day.setStatus('current')
if mibBuilder.loadTexts: tcmBFacilityDataThresholdCapESHighThres1day.setDescription('ODU Tandem Connection Monitoring B Errored Seconds 1 Day Threshold')
tcmBFacilityDataThresholdCapSESHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 5, 1, 3), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcmBFacilityDataThresholdCapSESHighThres15min.setStatus('current')
if mibBuilder.loadTexts: tcmBFacilityDataThresholdCapSESHighThres15min.setDescription('Tandem Connection Monitor B Section Severely Errored Seconds 15 Minute Threshold')
tcmBFacilityDataThresholdCapSESHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 5, 1, 4), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcmBFacilityDataThresholdCapSESHighThres1day.setStatus('current')
if mibBuilder.loadTexts: tcmBFacilityDataThresholdCapSESHighThres1day.setDescription('Tandem Connection Monitor B Section Severely Errored Seconds 1 Day Threshold')
tcmBFacilityDataThresholdCapOduTcmBBbeHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 5, 1, 5), Counter64StringCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcmBFacilityDataThresholdCapOduTcmBBbeHighThres15min.setStatus('current')
if mibBuilder.loadTexts: tcmBFacilityDataThresholdCapOduTcmBBbeHighThres15min.setDescription('ODU Tandem Connection B Background Block Errors 15 Minute Threshold')
tcmBFacilityDataThresholdCapOduTcmBBbeHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 5, 1, 6), Counter64StringCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcmBFacilityDataThresholdCapOduTcmBBbeHighThres1day.setStatus('current')
if mibBuilder.loadTexts: tcmBFacilityDataThresholdCapOduTcmBBbeHighThres1day.setDescription('ODU Tandem Connection B Background Block Errors 1 Day Threshold')
tcmBFacilityDataThresholdCapUASHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 5, 1, 7), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcmBFacilityDataThresholdCapUASHighThres15min.setStatus('current')
if mibBuilder.loadTexts: tcmBFacilityDataThresholdCapUASHighThres15min.setDescription('ODU Tandem Connection Monitoring B Unavailable Seconds 15 Minute Threshold')
tcmBFacilityDataThresholdCapUASHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 5, 1, 8), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcmBFacilityDataThresholdCapUASHighThres1day.setStatus('current')
if mibBuilder.loadTexts: tcmBFacilityDataThresholdCapUASHighThres1day.setDescription('ODU Tandem Connection Monitoring B Unavailable Seconds 1 Day Threshold')
endOfTcmBFacilityDataThresholdCapTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfTcmBFacilityDataThresholdCapTable.setStatus('current')
if mibBuilder.loadTexts: endOfTcmBFacilityDataThresholdCapTable.setDescription('')
tcmCFacilityDataThresholdCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 7), )
if mibBuilder.loadTexts: tcmCFacilityDataThresholdCapTable.setStatus('current')
if mibBuilder.loadTexts: tcmCFacilityDataThresholdCapTable.setDescription('')
tcmCFacilityDataThresholdCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 7, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityFacilityShelfNo"), (0, "ADVA-FSPR7-MIB", "entityFacilitySlotNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityPortNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityExtNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityClassName"))
if mibBuilder.loadTexts: tcmCFacilityDataThresholdCapEntry.setStatus('current')
if mibBuilder.loadTexts: tcmCFacilityDataThresholdCapEntry.setDescription('')
tcmCFacilityDataThresholdCapBESHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 7, 1, 1), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcmCFacilityDataThresholdCapBESHighThres15min.setStatus('current')
if mibBuilder.loadTexts: tcmCFacilityDataThresholdCapBESHighThres15min.setDescription('ODU Tandem Connection Monitoring C Errored Seconds 15 Minute Threshold')
tcmCFacilityDataThresholdCapESHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 7, 1, 2), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcmCFacilityDataThresholdCapESHighThres1day.setStatus('current')
if mibBuilder.loadTexts: tcmCFacilityDataThresholdCapESHighThres1day.setDescription('ODU Tandem Connection Monitoring C Errored Seconds 1 Day Threshold')
tcmCFacilityDataThresholdCapSESHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 7, 1, 3), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcmCFacilityDataThresholdCapSESHighThres15min.setStatus('current')
if mibBuilder.loadTexts: tcmCFacilityDataThresholdCapSESHighThres15min.setDescription('Tandem Connection Monitor C Section Severely Errored Seconds 15 Minute Threshold')
tcmCFacilityDataThresholdCapSESHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 7, 1, 4), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcmCFacilityDataThresholdCapSESHighThres1day.setStatus('current')
if mibBuilder.loadTexts: tcmCFacilityDataThresholdCapSESHighThres1day.setDescription('Tandem Connection Monitor C Section Severely Errored Seconds 1 Day Threshold')
tcmCFacilityDataThresholdCapOduTcmCBbeHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 7, 1, 5), Counter64StringCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcmCFacilityDataThresholdCapOduTcmCBbeHighThres15min.setStatus('current')
if mibBuilder.loadTexts: tcmCFacilityDataThresholdCapOduTcmCBbeHighThres15min.setDescription('ODU Tandem Connection C Background Block Errors 15 Minute Threshold')
tcmCFacilityDataThresholdCapOduTcmCBbeHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 7, 1, 6), Counter64StringCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcmCFacilityDataThresholdCapOduTcmCBbeHighThres1day.setStatus('current')
if mibBuilder.loadTexts: tcmCFacilityDataThresholdCapOduTcmCBbeHighThres1day.setDescription('ODU Tandem Connection C Background Block Errors 1 Day Threshold')
tcmCFacilityDataThresholdCapUASHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 7, 1, 7), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcmCFacilityDataThresholdCapUASHighThres15min.setStatus('current')
if mibBuilder.loadTexts: tcmCFacilityDataThresholdCapUASHighThres15min.setDescription('ODU Tandem Connection Monitoring C Unavailable Seconds 15 Minute Threshold')
tcmCFacilityDataThresholdCapUASHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 7, 1, 8), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcmCFacilityDataThresholdCapUASHighThres1day.setStatus('current')
if mibBuilder.loadTexts: tcmCFacilityDataThresholdCapUASHighThres1day.setDescription('ODU Tandem Connection Monitoring C Unavailable Seconds 1 Day Threshold')
endOfTcmCFacilityDataThresholdCapTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfTcmCFacilityDataThresholdCapTable.setStatus('current')
if mibBuilder.loadTexts: endOfTcmCFacilityDataThresholdCapTable.setDescription('')
otuFacilityDataThresholdCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 9), )
if mibBuilder.loadTexts: otuFacilityDataThresholdCapTable.setStatus('current')
if mibBuilder.loadTexts: otuFacilityDataThresholdCapTable.setDescription('')
otuFacilityDataThresholdCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 9, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityFacilityShelfNo"), (0, "ADVA-FSPR7-MIB", "entityFacilitySlotNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityPortNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityExtNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityClassName"))
if mibBuilder.loadTexts: otuFacilityDataThresholdCapEntry.setStatus('current')
if mibBuilder.loadTexts: otuFacilityDataThresholdCapEntry.setDescription('')
otuFacilityDataThresholdCapESHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 9, 1, 1), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: otuFacilityDataThresholdCapESHighThres15min.setStatus('current')
if mibBuilder.loadTexts: otuFacilityDataThresholdCapESHighThres15min.setDescription('OTU Errored Seconds 15 Minute Threshold')
otuFacilityDataThresholdCapESHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 9, 1, 2), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: otuFacilityDataThresholdCapESHighThres1day.setStatus('current')
if mibBuilder.loadTexts: otuFacilityDataThresholdCapESHighThres1day.setDescription('OTU Errored Seconds 1 Day Threshold')
otuFacilityDataThresholdCapSESHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 9, 1, 3), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: otuFacilityDataThresholdCapSESHighThres15min.setStatus('current')
if mibBuilder.loadTexts: otuFacilityDataThresholdCapSESHighThres15min.setDescription('OTU Severely Errored Seconds 15 Minute Threshold')
otuFacilityDataThresholdCapSESHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 9, 1, 4), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: otuFacilityDataThresholdCapSESHighThres1day.setStatus('current')
if mibBuilder.loadTexts: otuFacilityDataThresholdCapSESHighThres1day.setDescription('OTU Severely Errored Seconds 1 Day Threshold')
otuFacilityDataThresholdCapBbeHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 9, 1, 5), Counter64StringCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: otuFacilityDataThresholdCapBbeHighThres15min.setStatus('current')
if mibBuilder.loadTexts: otuFacilityDataThresholdCapBbeHighThres15min.setDescription('OTU Background Block Errors 15 Minute Threshold')
otuFacilityDataThresholdCapBbeHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 9, 1, 6), Counter64StringCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: otuFacilityDataThresholdCapBbeHighThres1day.setStatus('current')
if mibBuilder.loadTexts: otuFacilityDataThresholdCapBbeHighThres1day.setDescription('OTU Background Block Errors 1 Day Threshold')
otuFacilityDataThresholdCapUASHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 9, 1, 7), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: otuFacilityDataThresholdCapUASHighThres15min.setStatus('current')
if mibBuilder.loadTexts: otuFacilityDataThresholdCapUASHighThres15min.setDescription('OTU Unavailable Seconds 15 Minute Threshold')
otuFacilityDataThresholdCapUASHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 9, 1, 8), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: otuFacilityDataThresholdCapUASHighThres1day.setStatus('current')
if mibBuilder.loadTexts: otuFacilityDataThresholdCapUASHighThres1day.setDescription('OTU Unavailable Seconds 1 Day Threshold')
endOfOtuFacilityDataThresholdCapTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfOtuFacilityDataThresholdCapTable.setStatus('current')
if mibBuilder.loadTexts: endOfOtuFacilityDataThresholdCapTable.setDescription('')
otuFecFacilityDataThresholdCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 11), )
if mibBuilder.loadTexts: otuFecFacilityDataThresholdCapTable.setStatus('current')
if mibBuilder.loadTexts: otuFecFacilityDataThresholdCapTable.setDescription('')
otuFecFacilityDataThresholdCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 11, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityFacilityShelfNo"), (0, "ADVA-FSPR7-MIB", "entityFacilitySlotNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityPortNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityExtNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityClassName"))
if mibBuilder.loadTexts: otuFecFacilityDataThresholdCapEntry.setStatus('current')
if mibBuilder.loadTexts: otuFecFacilityDataThresholdCapEntry.setDescription('')
otuFecFacilityDataThresholdCapESHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 11, 1, 1), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: otuFecFacilityDataThresholdCapESHighThres15min.setStatus('current')
if mibBuilder.loadTexts: otuFecFacilityDataThresholdCapESHighThres15min.setDescription('OTU FEC Errored Seconds 15 Minute Threshold')
otuFecFacilityDataThresholdCapESHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 11, 1, 2), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: otuFecFacilityDataThresholdCapESHighThres1day.setStatus('current')
if mibBuilder.loadTexts: otuFecFacilityDataThresholdCapESHighThres1day.setDescription('OTU FEC Errored Seconds Day Threshold')
otuFecFacilityDataThresholdCapSESHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 11, 1, 3), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: otuFecFacilityDataThresholdCapSESHighThres15min.setStatus('current')
if mibBuilder.loadTexts: otuFecFacilityDataThresholdCapSESHighThres15min.setDescription('OTU FEC Severely Errored Seconds 15 Minute Threshold')
otuFecFacilityDataThresholdCapSESHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 11, 1, 4), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: otuFecFacilityDataThresholdCapSESHighThres1day.setStatus('current')
if mibBuilder.loadTexts: otuFecFacilityDataThresholdCapSESHighThres1day.setDescription('OTU FEC Severely Errored Seconds 1 Day Threshold')
otuFecFacilityDataThresholdCapUBEHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 11, 1, 5), Counter64StringCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: otuFecFacilityDataThresholdCapUBEHighThres15min.setStatus('current')
if mibBuilder.loadTexts: otuFecFacilityDataThresholdCapUBEHighThres15min.setDescription('Uncorrected Block Errors 15 Minute Threshold')
otuFecFacilityDataThresholdCapUBEHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 11, 1, 6), Counter64StringCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: otuFecFacilityDataThresholdCapUBEHighThres1day.setStatus('current')
if mibBuilder.loadTexts: otuFecFacilityDataThresholdCapUBEHighThres1day.setDescription('Uncorrected Block Errors 1 Day Threshold')
otuFecFacilityDataThresholdCapCErrHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 11, 1, 7), Counter64StringCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: otuFecFacilityDataThresholdCapCErrHighThres15min.setStatus('current')
if mibBuilder.loadTexts: otuFecFacilityDataThresholdCapCErrHighThres15min.setDescription('FEC Corrected Errors 15 Minute Threshold')
otuFecFacilityDataThresholdCapCErrHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 11, 1, 8), Counter64StringCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: otuFecFacilityDataThresholdCapCErrHighThres1day.setStatus('current')
if mibBuilder.loadTexts: otuFecFacilityDataThresholdCapCErrHighThres1day.setDescription('FEC Corrected Errors 1 Day Threshold')
otuFecFacilityDataThresholdCapBERCErrHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 11, 1, 9), Counter64StringCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: otuFecFacilityDataThresholdCapBERCErrHighThres15min.setStatus('current')
if mibBuilder.loadTexts: otuFecFacilityDataThresholdCapBERCErrHighThres15min.setDescription('Bit Error Rate before FEC 15 Minute Threshold')
otuFecFacilityDataThresholdCapBERCErrHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 11, 1, 10), Counter64StringCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: otuFecFacilityDataThresholdCapBERCErrHighThres1day.setStatus('current')
if mibBuilder.loadTexts: otuFecFacilityDataThresholdCapBERCErrHighThres1day.setDescription('Bit Error Rate before FEC 1 Day Threshold')
endOfOtuFecFacilityDataThresholdCapTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfOtuFecFacilityDataThresholdCapTable.setStatus('current')
if mibBuilder.loadTexts: endOfOtuFecFacilityDataThresholdCapTable.setDescription('')
fecFacilityDataThresholdCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 13), )
if mibBuilder.loadTexts: fecFacilityDataThresholdCapTable.setStatus('current')
if mibBuilder.loadTexts: fecFacilityDataThresholdCapTable.setDescription('')
fecFacilityDataThresholdCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 13, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityFacilityShelfNo"), (0, "ADVA-FSPR7-MIB", "entityFacilitySlotNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityPortNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityExtNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityClassName"))
if mibBuilder.loadTexts: fecFacilityDataThresholdCapEntry.setStatus('current')
if mibBuilder.loadTexts: fecFacilityDataThresholdCapEntry.setDescription('')
fecFacilityDataThresholdCapCEHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 13, 1, 1), Counter64StringCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fecFacilityDataThresholdCapCEHighThres15min.setStatus('current')
if mibBuilder.loadTexts: fecFacilityDataThresholdCapCEHighThres15min.setDescription('FEC Corrected Errors 15 Minute Threshold')
fecFacilityDataThresholdCapCEHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 13, 1, 2), Counter64StringCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fecFacilityDataThresholdCapCEHighThres1day.setStatus('current')
if mibBuilder.loadTexts: fecFacilityDataThresholdCapCEHighThres1day.setDescription('FEC Corrected Errors 1 Day Threshold')
fecFacilityDataThresholdCapUBEHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 13, 1, 3), Counter64StringCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fecFacilityDataThresholdCapUBEHighThres15min.setStatus('current')
if mibBuilder.loadTexts: fecFacilityDataThresholdCapUBEHighThres15min.setDescription('Uncorrected Block Errors 15 Minute Threshold')
fecFacilityDataThresholdCapUBEHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 13, 1, 4), Counter64StringCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fecFacilityDataThresholdCapUBEHighThres1day.setStatus('current')
if mibBuilder.loadTexts: fecFacilityDataThresholdCapUBEHighThres1day.setDescription('Uncorrected Block Errors 1 Day Threshold')
endOfFecFacilityDataThresholdCapTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfFecFacilityDataThresholdCapTable.setStatus('current')
if mibBuilder.loadTexts: endOfFecFacilityDataThresholdCapTable.setDescription('')
pcs2FacilityDataThresholdCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 15), )
if mibBuilder.loadTexts: pcs2FacilityDataThresholdCapTable.setStatus('current')
if mibBuilder.loadTexts: pcs2FacilityDataThresholdCapTable.setDescription('')
pcs2FacilityDataThresholdCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 15, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityFacilityShelfNo"), (0, "ADVA-FSPR7-MIB", "entityFacilitySlotNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityPortNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityExtNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityClassName"))
if mibBuilder.loadTexts: pcs2FacilityDataThresholdCapEntry.setStatus('current')
if mibBuilder.loadTexts: pcs2FacilityDataThresholdCapEntry.setDescription('')
pcs2FacilityDataThresholdCapESHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 15, 1, 1), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcs2FacilityDataThresholdCapESHighThres15min.setStatus('current')
if mibBuilder.loadTexts: pcs2FacilityDataThresholdCapESHighThres15min.setDescription('Physical Coding Layer Errored Seconds 15 Minute Threshold')
pcs2FacilityDataThresholdCapESHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 15, 1, 2), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcs2FacilityDataThresholdCapESHighThres1day.setStatus('current')
if mibBuilder.loadTexts: pcs2FacilityDataThresholdCapESHighThres1day.setDescription('Physical Coding Layer Errored Seconds 1 Day Threshold')
pcs2FacilityDataThresholdCapDEHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 15, 1, 3), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcs2FacilityDataThresholdCapDEHighThres15min.setStatus('current')
if mibBuilder.loadTexts: pcs2FacilityDataThresholdCapDEHighThres15min.setDescription('Physical Coding Layer Disparity Errors 15 Minute Threshold')
pcs2FacilityDataThresholdCapDEHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 15, 1, 4), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcs2FacilityDataThresholdCapDEHighThres1day.setStatus('current')
if mibBuilder.loadTexts: pcs2FacilityDataThresholdCapDEHighThres1day.setDescription('Physical Coding Layer Disparity Errors 1 Day Threshold')
pcs2FacilityDataThresholdCapCVHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 15, 1, 5), Counter64StringCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcs2FacilityDataThresholdCapCVHighThres15min.setStatus('current')
if mibBuilder.loadTexts: pcs2FacilityDataThresholdCapCVHighThres15min.setDescription('Physical Coding Layer 15 Minute Threshold')
pcs2FacilityDataThresholdCapCVHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 15, 1, 6), Counter64StringCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcs2FacilityDataThresholdCapCVHighThres1day.setStatus('current')
if mibBuilder.loadTexts: pcs2FacilityDataThresholdCapCVHighThres1day.setDescription('Physical Coding Layer Coding Violations 1 Day Threshold')
endOfPcs2FacilityDataThresholdCapTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfPcs2FacilityDataThresholdCapTable.setStatus('current')
if mibBuilder.loadTexts: endOfPcs2FacilityDataThresholdCapTable.setDescription('')
lFacilityDataThresholdCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 17), )
if mibBuilder.loadTexts: lFacilityDataThresholdCapTable.setStatus('current')
if mibBuilder.loadTexts: lFacilityDataThresholdCapTable.setDescription('')
lFacilityDataThresholdCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 17, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityFacilityShelfNo"), (0, "ADVA-FSPR7-MIB", "entityFacilitySlotNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityPortNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityExtNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityClassName"))
if mibBuilder.loadTexts: lFacilityDataThresholdCapEntry.setStatus('current')
if mibBuilder.loadTexts: lFacilityDataThresholdCapEntry.setDescription('')
lFacilityDataThresholdCapESHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 17, 1, 1), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lFacilityDataThresholdCapESHighThres15min.setStatus('current')
if mibBuilder.loadTexts: lFacilityDataThresholdCapESHighThres15min.setDescription('Line / Multiplex Section Errored Seconds 15 Minute Threshold')
lFacilityDataThresholdCapESHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 17, 1, 2), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lFacilityDataThresholdCapESHighThres1day.setStatus('current')
if mibBuilder.loadTexts: lFacilityDataThresholdCapESHighThres1day.setDescription('Line / Multiplex Section Errored Seconds 1 Day Threshold')
lFacilityDataThresholdCapSESHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 17, 1, 3), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lFacilityDataThresholdCapSESHighThres15min.setStatus('current')
if mibBuilder.loadTexts: lFacilityDataThresholdCapSESHighThres15min.setDescription('Line / Multiplex Section Severely Errored Seconds 15 Minute Threshold')
lFacilityDataThresholdCapSESHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 17, 1, 4), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lFacilityDataThresholdCapSESHighThres1day.setStatus('current')
if mibBuilder.loadTexts: lFacilityDataThresholdCapSESHighThres1day.setDescription('Line / Multiplex Section Severely Errored Seconds 1 Day Threshold')
lFacilityDataThresholdCapUASHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 17, 1, 5), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lFacilityDataThresholdCapUASHighThres15min.setStatus('current')
if mibBuilder.loadTexts: lFacilityDataThresholdCapUASHighThres15min.setDescription('Line / Multiplex Section Unavailable Seconds 15 Minute Threshold')
lFacilityDataThresholdCapUASSHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 17, 1, 6), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lFacilityDataThresholdCapUASSHighThres1day.setStatus('current')
if mibBuilder.loadTexts: lFacilityDataThresholdCapUASSHighThres1day.setDescription('Line / Multiplex Section Unavailable Seconds 1 Day Threshold')
lFacilityDataThresholdCapCVHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 17, 1, 7), Counter64StringCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lFacilityDataThresholdCapCVHighThres15min.setStatus('current')
if mibBuilder.loadTexts: lFacilityDataThresholdCapCVHighThres15min.setDescription('Line / Multiplex Section Coding Violations 15 Minute Threshold')
lFacilityDataThresholdCapCVSHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 17, 1, 8), Counter64StringCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lFacilityDataThresholdCapCVSHighThres1day.setStatus('current')
if mibBuilder.loadTexts: lFacilityDataThresholdCapCVSHighThres1day.setDescription('Line / Multiplex Section Coding Violations 1 Day Threshold')
endOfLFacilityDataThresholdCapTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfLFacilityDataThresholdCapTable.setStatus('current')
if mibBuilder.loadTexts: endOfLFacilityDataThresholdCapTable.setDescription('')
sFacilityDataThresholdCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 19), )
if mibBuilder.loadTexts: sFacilityDataThresholdCapTable.setStatus('current')
if mibBuilder.loadTexts: sFacilityDataThresholdCapTable.setDescription('')
sFacilityDataThresholdCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 19, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityFacilityShelfNo"), (0, "ADVA-FSPR7-MIB", "entityFacilitySlotNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityPortNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityExtNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityClassName"))
if mibBuilder.loadTexts: sFacilityDataThresholdCapEntry.setStatus('current')
if mibBuilder.loadTexts: sFacilityDataThresholdCapEntry.setDescription('')
sFacilityDataThresholdCapESHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 19, 1, 1), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sFacilityDataThresholdCapESHighThres15min.setStatus('current')
if mibBuilder.loadTexts: sFacilityDataThresholdCapESHighThres15min.setDescription('Section / Regeneration Section Errored Seconds 15 Minute Threshold')
sFacilityDataThresholdCapESHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 19, 1, 2), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sFacilityDataThresholdCapESHighThres1day.setStatus('current')
if mibBuilder.loadTexts: sFacilityDataThresholdCapESHighThres1day.setDescription('Section / Regeneration Section Errored Seconds 1 Day Threshold')
sFacilityDataThresholdCapSESHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 19, 1, 3), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sFacilityDataThresholdCapSESHighThres15min.setStatus('current')
if mibBuilder.loadTexts: sFacilityDataThresholdCapSESHighThres15min.setDescription('Section / Regenerator Section Severely Errored Seconds 15 Minute Threshold')
sFacilityDataThresholdCapSESHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 19, 1, 4), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sFacilityDataThresholdCapSESHighThres1day.setStatus('current')
if mibBuilder.loadTexts: sFacilityDataThresholdCapSESHighThres1day.setDescription('Section / Regenerator Section Severely Errored Seconds 1 Day Threshold')
sFacilityDataThresholdCapSEFSHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 19, 1, 5), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sFacilityDataThresholdCapSEFSHighThres15min.setStatus('current')
if mibBuilder.loadTexts: sFacilityDataThresholdCapSEFSHighThres15min.setDescription('Section Severely Errored Frame Seconds 15 Minute Threshold')
sFacilityDataThresholdCapSEFSHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 19, 1, 6), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sFacilityDataThresholdCapSEFSHighThres1day.setStatus('current')
if mibBuilder.loadTexts: sFacilityDataThresholdCapSEFSHighThres1day.setDescription('Section Severely Errored Frame Seconds 1 Day Threshold')
sFacilityDataThresholdCapCVHighThres15min = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 19, 1, 7), Counter64StringCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sFacilityDataThresholdCapCVHighThres15min.setStatus('current')
if mibBuilder.loadTexts: sFacilityDataThresholdCapCVHighThres15min.setDescription('Section / Regenerator Section Coding Violations 15 Minute Threshold')
sFacilityDataThresholdCapCVHighThres1day = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 19, 1, 8), Counter64StringCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sFacilityDataThresholdCapCVHighThres1day.setStatus('current')
if mibBuilder.loadTexts: sFacilityDataThresholdCapCVHighThres1day.setDescription('Section / Regenerator Section Coding Violations 1 Day Threshold')
endOfSFacilityDataThresholdCapTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfSFacilityDataThresholdCapTable.setStatus('current')
if mibBuilder.loadTexts: endOfSFacilityDataThresholdCapTable.setDescription('')
endOfPmFacilityDataThresholdCap = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 1, 10000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfPmFacilityDataThresholdCap.setStatus('current')
if mibBuilder.loadTexts: endOfPmFacilityDataThresholdCap.setDescription('')
endOfPmFacilityDataCap = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 1, 10000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfPmFacilityDataCap.setStatus('current')
if mibBuilder.loadTexts: endOfPmFacilityDataCap.setDescription('')
facilityPhysThresholdCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 2, 2, 1), )
if mibBuilder.loadTexts: facilityPhysThresholdCapTable.setStatus('current')
if mibBuilder.loadTexts: facilityPhysThresholdCapTable.setDescription('')
facilityPhysThresholdCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 2, 2, 1, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityFacilityShelfNo"), (0, "ADVA-FSPR7-MIB", "entityFacilitySlotNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityPortNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityExtNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityClassName"))
if mibBuilder.loadTexts: facilityPhysThresholdCapEntry.setStatus('current')
if mibBuilder.loadTexts: facilityPhysThresholdCapEntry.setDescription('')
facilityPhysThresholdCapOpticalInputPwrLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 2, 2, 1, 1, 1), FspR7Integer32Caps()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: facilityPhysThresholdCapOpticalInputPwrLow.setStatus('current')
if mibBuilder.loadTexts: facilityPhysThresholdCapOpticalInputPwrLow.setDescription('Optical Input Power Received')
facilityPhysThresholdCapOpticalInputPwrHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 2, 2, 1, 1, 2), FspR7Integer32Caps()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: facilityPhysThresholdCapOpticalInputPwrHigh.setStatus('current')
if mibBuilder.loadTexts: facilityPhysThresholdCapOpticalInputPwrHigh.setDescription('Optical Input Power Received')
facilityPhysThresholdCapConfigurableOpticalOutputPwrLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 2, 2, 1, 1, 3), FspR7Integer32Caps()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: facilityPhysThresholdCapConfigurableOpticalOutputPwrLow.setStatus('current')
if mibBuilder.loadTexts: facilityPhysThresholdCapConfigurableOpticalOutputPwrLow.setDescription('Configurable threshold of the Optical Power Transmitted (output)')
facilityPhysThresholdCapConfigurableOpticalOutputPwrHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 2, 2, 1, 1, 4), FspR7Integer32Caps()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: facilityPhysThresholdCapConfigurableOpticalOutputPwrHigh.setStatus('current')
if mibBuilder.loadTexts: facilityPhysThresholdCapConfigurableOpticalOutputPwrHigh.setDescription('Configurable high threshold of the Optical Power Transmitted (output)')
facilityPhysThresholdCapRoundTripDelayLowThres = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 2, 2, 1, 1, 5), FspR7Integer32Caps()).setUnits('ns').setMaxAccess("readonly")
if mibBuilder.loadTexts: facilityPhysThresholdCapRoundTripDelayLowThres.setStatus('current')
if mibBuilder.loadTexts: facilityPhysThresholdCapRoundTripDelayLowThres.setDescription('Configurable low threshold for round trip delay')
facilityPhysThresholdCapRoundTripDelayHighThres = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 2, 2, 1, 1, 6), FspR7Integer32Caps()).setUnits('ns').setMaxAccess("readonly")
if mibBuilder.loadTexts: facilityPhysThresholdCapRoundTripDelayHighThres.setStatus('current')
if mibBuilder.loadTexts: facilityPhysThresholdCapRoundTripDelayHighThres.setDescription('Configurable high threshold for round trip delay')
facilityPhysThresholdCapLatencyLowThres = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 2, 2, 1, 1, 7), FspR7Integer32Caps()).setUnits('0.1 us').setMaxAccess("readonly")
if mibBuilder.loadTexts: facilityPhysThresholdCapLatencyLowThres.setStatus('current')
if mibBuilder.loadTexts: facilityPhysThresholdCapLatencyLowThres.setDescription('Configurable low threshold round trip delay')
facilityPhysThresholdCapLatencyHighThres = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 2, 2, 1, 1, 8), FspR7Integer32Caps()).setUnits('0.1 us').setMaxAccess("readonly")
if mibBuilder.loadTexts: facilityPhysThresholdCapLatencyHighThres.setStatus('current')
if mibBuilder.loadTexts: facilityPhysThresholdCapLatencyHighThres.setDescription('Configurable high threshold for round trip delay')
facilityPhysThresholdCapChromaticDispersionHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 2, 2, 1, 1, 9), FspR7Integer32Caps()).setUnits('ps/nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: facilityPhysThresholdCapChromaticDispersionHigh.setStatus('current')
if mibBuilder.loadTexts: facilityPhysThresholdCapChromaticDispersionHigh.setDescription('Chromatic Dispersion Compensation High Threshold')
facilityPhysThresholdCapChromaticDispersionLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 2, 2, 1, 1, 10), FspR7Integer32Caps()).setUnits('ps/nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: facilityPhysThresholdCapChromaticDispersionLow.setStatus('current')
if mibBuilder.loadTexts: facilityPhysThresholdCapChromaticDispersionLow.setDescription('Chromatic Dispersion Compensation Low Threshold')
facilityPhysThresholdCapCarrierFreqOffsetLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 2, 2, 1, 1, 11), FspR7Integer32Caps()).setUnits('0.001 GHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: facilityPhysThresholdCapCarrierFreqOffsetLow.setStatus('current')
if mibBuilder.loadTexts: facilityPhysThresholdCapCarrierFreqOffsetLow.setDescription('Carrier Frequency Offset Low TH')
facilityPhysThresholdCapCarrierFreqOffsetHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 2, 2, 1, 1, 12), FspR7Integer32Caps()).setUnits('0.001 GHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: facilityPhysThresholdCapCarrierFreqOffsetHigh.setStatus('current')
if mibBuilder.loadTexts: facilityPhysThresholdCapCarrierFreqOffsetHigh.setDescription('Carrier Frequency Offset High TH')
facilityPhysThresholdCapLogicalLanesSkewHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 2, 2, 1, 1, 13), FspR7Integer32Caps()).setUnits('ns').setMaxAccess("readonly")
if mibBuilder.loadTexts: facilityPhysThresholdCapLogicalLanesSkewHigh.setStatus('current')
if mibBuilder.loadTexts: facilityPhysThresholdCapLogicalLanesSkewHigh.setDescription('Skew between logical lanes farthest apart high threshold')
facilityPhysThresholdCapDispersionCompensationLowThres = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 2, 2, 1, 1, 14), FspR7Integer32Caps()).setUnits('ps/nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: facilityPhysThresholdCapDispersionCompensationLowThres.setStatus('current')
if mibBuilder.loadTexts: facilityPhysThresholdCapDispersionCompensationLowThres.setDescription('Chromatic Dispersion Compensation Low Threshold')
facilityPhysThresholdCapDispersionCompensationHighThres = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 2, 2, 1, 1, 15), FspR7Integer32Caps()).setUnits('ps/nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: facilityPhysThresholdCapDispersionCompensationHighThres.setStatus('current')
if mibBuilder.loadTexts: facilityPhysThresholdCapDispersionCompensationHighThres.setDescription('Chromatic Dispersion Compensation High Threshold')
facilityPhysThresholdCapSignalToNoiseRatioLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 2, 2, 1, 1, 16), FspR7Integer32Caps()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: facilityPhysThresholdCapSignalToNoiseRatioLow.setStatus('current')
if mibBuilder.loadTexts: facilityPhysThresholdCapSignalToNoiseRatioLow.setDescription('Signal-to-Noise Ratio Low TH')
facilityPhysThresholdCapDifferentialGroupDelayHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 2, 2, 1, 1, 17), FspR7Integer32Caps()).setUnits('ps').setMaxAccess("readonly")
if mibBuilder.loadTexts: facilityPhysThresholdCapDifferentialGroupDelayHigh.setStatus('current')
if mibBuilder.loadTexts: facilityPhysThresholdCapDifferentialGroupDelayHigh.setDescription('Differential Group Delay High TH')
endOfFacilityPhysThresholdCapTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 2, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfFacilityPhysThresholdCapTable.setStatus('current')
if mibBuilder.loadTexts: endOfFacilityPhysThresholdCapTable.setDescription('')
endOfPmFacilityPhysThresholdCap = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 2, 2, 10000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfPmFacilityPhysThresholdCap.setStatus('current')
if mibBuilder.loadTexts: endOfPmFacilityPhysThresholdCap.setDescription('')
endOfPmFacilityPhysicalCap = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 2, 10000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfPmFacilityPhysicalCap.setStatus('current')
if mibBuilder.loadTexts: endOfPmFacilityPhysicalCap.setDescription('')
endOfPmFacilityCap = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 12, 10000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfPmFacilityCap.setStatus('current')
if mibBuilder.loadTexts: endOfPmFacilityCap.setDescription('')
optMuxPhysThresholdCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 14, 2, 2, 2), )
if mibBuilder.loadTexts: optMuxPhysThresholdCapTable.setStatus('current')
if mibBuilder.loadTexts: optMuxPhysThresholdCapTable.setDescription('')
optMuxPhysThresholdCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 14, 2, 2, 2, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityOpticalMuxShelfNo"), (0, "ADVA-FSPR7-MIB", "entityOpticalMuxSlotNo"), (0, "ADVA-FSPR7-MIB", "entityOpticalMuxPortNo"), (0, "ADVA-FSPR7-MIB", "entityOpticalMuxExtNo"), (0, "ADVA-FSPR7-MIB", "entityOpticalMuxClassName"))
if mibBuilder.loadTexts: optMuxPhysThresholdCapEntry.setStatus('current')
if mibBuilder.loadTexts: optMuxPhysThresholdCapEntry.setDescription('')
optMuxPhysThresholdCapBrtxHighConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 14, 2, 2, 2, 1, 1), FspR7Integer32Caps()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: optMuxPhysThresholdCapBrtxHighConfig.setStatus('current')
if mibBuilder.loadTexts: optMuxPhysThresholdCapBrtxHighConfig.setDescription('Backreflection power High Threshold, at Tx Port')
optMuxPhysThresholdCapBrPwrReceivedHighThres = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 14, 2, 2, 2, 1, 2), FspR7Integer32Caps()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: optMuxPhysThresholdCapBrPwrReceivedHighThres.setStatus('current')
if mibBuilder.loadTexts: optMuxPhysThresholdCapBrPwrReceivedHighThres.setDescription('Backreflection Input Received High Threshold')
optMuxPhysThresholdCapConfigurableOpticalOutputPwrHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 14, 2, 2, 2, 1, 3), FspR7Integer32Caps()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optMuxPhysThresholdCapConfigurableOpticalOutputPwrHigh.setStatus('current')
if mibBuilder.loadTexts: optMuxPhysThresholdCapConfigurableOpticalOutputPwrHigh.setDescription('Configurable high threshold of the Optical Power Transmitted (output)')
optMuxPhysThresholdCapConfigurableOpticalOutputPwrLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 14, 2, 2, 2, 1, 4), FspR7Integer32Caps()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optMuxPhysThresholdCapConfigurableOpticalOutputPwrLow.setStatus('current')
if mibBuilder.loadTexts: optMuxPhysThresholdCapConfigurableOpticalOutputPwrLow.setDescription('Configurable threshold of the Optical Power Transmitted (output)')
optMuxPhysThresholdCapOscPwrRcvHighThres = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 14, 2, 2, 2, 1, 5), FspR7Integer32Caps()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optMuxPhysThresholdCapOscPwrRcvHighThres.setStatus('current')
if mibBuilder.loadTexts: optMuxPhysThresholdCapOscPwrRcvHighThres.setDescription('Optical Supervisory Channel Input Power Received High Threshold')
optMuxPhysThresholdCapOscPwrRcvLowThres = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 14, 2, 2, 2, 1, 6), FspR7Integer32Caps()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optMuxPhysThresholdCapOscPwrRcvLowThres.setStatus('current')
if mibBuilder.loadTexts: optMuxPhysThresholdCapOscPwrRcvLowThres.setDescription('Optical Supervisory Channel Input Power Received Low Threshold')
optMuxPhysThresholdCapOpticalInputPwrHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 14, 2, 2, 2, 1, 7), FspR7Integer32Caps()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optMuxPhysThresholdCapOpticalInputPwrHigh.setStatus('current')
if mibBuilder.loadTexts: optMuxPhysThresholdCapOpticalInputPwrHigh.setDescription('Optical Input Power Received')
optMuxPhysThresholdCapOpticalInputPwrLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 14, 2, 2, 2, 1, 8), FspR7Integer32Caps()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optMuxPhysThresholdCapOpticalInputPwrLow.setStatus('current')
if mibBuilder.loadTexts: optMuxPhysThresholdCapOpticalInputPwrLow.setDescription('Optical Input Power Received')
optMuxPhysThresholdCapAttRxHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 14, 2, 2, 2, 1, 9), FspR7Integer32Caps()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: optMuxPhysThresholdCapAttRxHigh.setStatus('current')
if mibBuilder.loadTexts: optMuxPhysThresholdCapAttRxHigh.setDescription('High Threshold for Attenuation on Receive Fiber')
optMuxPhysThresholdCapAttRxLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 14, 2, 2, 2, 1, 10), FspR7Integer32Caps()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: optMuxPhysThresholdCapAttRxLow.setStatus('current')
if mibBuilder.loadTexts: optMuxPhysThresholdCapAttRxLow.setDescription('Low Threshold for Attenuation on Receive Fiber.')
optMuxPhysThresholdCapAttTxHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 14, 2, 2, 2, 1, 11), FspR7Integer32Caps()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: optMuxPhysThresholdCapAttTxHigh.setStatus('current')
if mibBuilder.loadTexts: optMuxPhysThresholdCapAttTxHigh.setDescription('High Threshold of Attenuation on Transmit Fiber')
optMuxPhysThresholdCapAttTxLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 14, 2, 2, 2, 1, 12), FspR7Integer32Caps()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: optMuxPhysThresholdCapAttTxLow.setStatus('current')
if mibBuilder.loadTexts: optMuxPhysThresholdCapAttTxLow.setDescription('Low Threshold Attenuation on Transmit Fiber')
endOfOptMuxPhysThresholdCapTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 14, 2, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfOptMuxPhysThresholdCapTable.setStatus('current')
if mibBuilder.loadTexts: endOfOptMuxPhysThresholdCapTable.setDescription('')
endOfPmOptMuxPhysThresholdCap = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 6, 14, 2, 2, 10000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfPmOptMuxPhysThresholdCap.setStatus('current')
if mibBuilder.loadTexts: endOfPmOptMuxPhysThresholdCap.setDescription('')
terminationPointCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 1, 1), )
if mibBuilder.loadTexts: terminationPointCapTable.setStatus('current')
if mibBuilder.loadTexts: terminationPointCapTable.setDescription('terminationPointCapTable')
terminationPointCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 1, 1, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo1"), (0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo2"), (0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo3"), (0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo4"), (0, "ADVA-FSPR7-MIB", "entityTerminPointClassName"))
if mibBuilder.loadTexts: terminationPointCapEntry.setStatus('current')
if mibBuilder.loadTexts: terminationPointCapEntry.setDescription('Entry of terminationPointCapTable')
terminationPointCapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 1, 1, 1, 1), FspR7RowStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: terminationPointCapRowStatus.setStatus('current')
if mibBuilder.loadTexts: terminationPointCapRowStatus.setDescription('Physical Termination Point Capability RowStatus.')
terminationPointCapAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 1, 1, 1, 2), FspR7AdminStateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: terminationPointCapAdmin.setStatus('current')
if mibBuilder.loadTexts: terminationPointCapAdmin.setDescription('Physical Termination Point Capability Adminstrative State.')
terminationPointCapFiberDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 1, 1, 1, 3), FspR7FiberDetectCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: terminationPointCapFiberDetect.setStatus('current')
if mibBuilder.loadTexts: terminationPointCapFiberDetect.setDescription('Physical Termination Point Capability Fiber Detect.')
terminationPointCapAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 1, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: terminationPointCapAlias.setStatus('current')
if mibBuilder.loadTexts: terminationPointCapAlias.setDescription('Physical Termination Point Capabillity Alias.')
connectionCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 1, 2), )
if mibBuilder.loadTexts: connectionCapTable.setStatus('current')
if mibBuilder.loadTexts: connectionCapTable.setDescription('connectionCapTable')
connectionCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 1, 2, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo1"), (0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo2"), (0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo3"), (0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo4"), (0, "ADVA-FSPR7-MIB", "entityTerminPointClassName"), (0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo1"), (0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo2"), (0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo3"), (0, "ADVA-FSPR7-MIB", "entityTerminPointIndexNo4"), (0, "ADVA-FSPR7-MIB", "entityTerminPointClassName"), (0, "ADVA-FSPR7-MIB", "entityConnectionClassName"))
if mibBuilder.loadTexts: connectionCapEntry.setStatus('current')
if mibBuilder.loadTexts: connectionCapEntry.setDescription('Entry of connectionCapTable')
connectionCapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 1, 2, 1, 1), FspR7RowStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionCapRowStatus.setStatus('current')
if mibBuilder.loadTexts: connectionCapRowStatus.setDescription('Physical Connection Capability RowStatus.')
connectionCapType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 1, 2, 1, 2), FspR7TypeConnectionCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionCapType.setStatus('current')
if mibBuilder.loadTexts: connectionCapType.setDescription('Physical Connection Capability Type.')
endOfConnectionCapTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfConnectionCapTable.setStatus('current')
if mibBuilder.loadTexts: endOfConnectionCapTable.setDescription('')
endOfFiberMapCap = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 1, 10000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfFiberMapCap.setStatus('current')
if mibBuilder.loadTexts: endOfFiberMapCap.setDescription('')
externalPortCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 3, 1), )
if mibBuilder.loadTexts: externalPortCapTable.setStatus('current')
if mibBuilder.loadTexts: externalPortCapTable.setDescription('externalPortCap')
externalPortCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 3, 1, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityExternalPortShelfNo"), (0, "ADVA-FSPR7-MIB", "entityExternalPortSlotNo"), (0, "ADVA-FSPR7-MIB", "entityExternalPortPortNo"), (0, "ADVA-FSPR7-MIB", "entityExternalPortExtNo"), (0, "ADVA-FSPR7-MIB", "entityExternalPortClassName"))
if mibBuilder.loadTexts: externalPortCapEntry.setStatus('current')
if mibBuilder.loadTexts: externalPortCapEntry.setDescription('Entry of externalPortCap')
externalPortCapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 3, 1, 1, 1), FspR7RowStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalPortCapRowStatus.setStatus('current')
if mibBuilder.loadTexts: externalPortCapRowStatus.setDescription('Physical Termination Point RowStatus. Object is used to create or delete a row in the table.')
externalPortCapType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 3, 1, 1, 2), FspR7InterfaceTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalPortCapType.setStatus('current')
if mibBuilder.loadTexts: externalPortCapType.setDescription('.')
externalPortCapTransmitChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 3, 1, 1, 3), FspR7ChannelIdentifierCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalPortCapTransmitChannel.setStatus('current')
if mibBuilder.loadTexts: externalPortCapTransmitChannel.setDescription('.')
externalPortCapChannelBandwith = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 3, 1, 1, 4), FspR7ChannelBandwidthCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalPortCapChannelBandwith.setStatus('current')
if mibBuilder.loadTexts: externalPortCapChannelBandwith.setDescription('.')
externalPortCapAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 3, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalPortCapAlias.setStatus('current')
if mibBuilder.loadTexts: externalPortCapAlias.setDescription('.')
externalPortCapFarEndLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 3, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalPortCapFarEndLocation.setStatus('current')
if mibBuilder.loadTexts: externalPortCapFarEndLocation.setDescription('.')
externalPortCapBitrate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 3, 1, 1, 7), FspR7Unsigned32Caps()).setUnits('Mbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: externalPortCapBitrate.setStatus('current')
if mibBuilder.loadTexts: externalPortCapBitrate.setDescription('.')
externalPortCapFecType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 3, 1, 1, 8), FspR7FecTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalPortCapFecType.setStatus('current')
if mibBuilder.loadTexts: externalPortCapFecType.setDescription('.')
externalPortCapLineCoding = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 3, 1, 1, 9), FspR7LineCodingCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalPortCapLineCoding.setStatus('current')
if mibBuilder.loadTexts: externalPortCapLineCoding.setDescription('.')
externalPortCapFrameFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 3, 1, 1, 10), FspR7FrameFormatCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalPortCapFrameFormat.setStatus('current')
if mibBuilder.loadTexts: externalPortCapFrameFormat.setDescription('.')
externalPortCapOpticalPowerTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 3, 1, 1, 11), FspR7Integer32Caps()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: externalPortCapOpticalPowerTx.setStatus('current')
if mibBuilder.loadTexts: externalPortCapOpticalPowerTx.setDescription('.')
externalPortCapOsnrTransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 3, 1, 1, 12), FspR7Unsigned32Caps()).setUnits('dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: externalPortCapOsnrTransmit.setStatus('current')
if mibBuilder.loadTexts: externalPortCapOsnrTransmit.setDescription('.')
externalPortCapPmdTransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 3, 1, 1, 13), FspR7Unsigned32Caps()).setUnits('ps').setMaxAccess("readonly")
if mibBuilder.loadTexts: externalPortCapPmdTransmit.setStatus('current')
if mibBuilder.loadTexts: externalPortCapPmdTransmit.setDescription('.')
externalPortCapChromDisperTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 3, 1, 1, 14), FspR7Integer32Caps()).setUnits('ps/nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: externalPortCapChromDisperTx.setStatus('current')
if mibBuilder.loadTexts: externalPortCapChromDisperTx.setDescription('.')
externalPortCapMinOsnrRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 3, 1, 1, 15), FspR7Unsigned32Caps()).setUnits('dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: externalPortCapMinOsnrRcv.setStatus('current')
if mibBuilder.loadTexts: externalPortCapMinOsnrRcv.setDescription('.')
externalPortCapMinOptPowerRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 3, 1, 1, 16), FspR7Integer32Caps()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: externalPortCapMinOptPowerRcv.setStatus('current')
if mibBuilder.loadTexts: externalPortCapMinOptPowerRcv.setDescription('.')
externalPortCapMaxOptPowerRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 3, 1, 1, 17), FspR7Integer32Caps()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: externalPortCapMaxOptPowerRcv.setStatus('current')
if mibBuilder.loadTexts: externalPortCapMaxOptPowerRcv.setDescription('.')
externalPortCapMaxPmdRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 3, 1, 1, 18), FspR7Unsigned32Caps()).setUnits('ps').setMaxAccess("readonly")
if mibBuilder.loadTexts: externalPortCapMaxPmdRcv.setStatus('current')
if mibBuilder.loadTexts: externalPortCapMaxPmdRcv.setDescription('.')
externalPortCapMinChromDisperRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 3, 1, 1, 19), FspR7Integer32Caps()).setUnits('ps/nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: externalPortCapMinChromDisperRcv.setStatus('current')
if mibBuilder.loadTexts: externalPortCapMinChromDisperRcv.setDescription('.')
externalPortCapMaxChromDisperRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 3, 1, 1, 20), FspR7Integer32Caps()).setUnits('ps/nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: externalPortCapMaxChromDisperRcv.setStatus('current')
if mibBuilder.loadTexts: externalPortCapMaxChromDisperRcv.setDescription('.')
externalPortCapMaxBitErrorRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 3, 1, 1, 21), FspR7MaxBitErrorRateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalPortCapMaxBitErrorRate.setStatus('current')
if mibBuilder.loadTexts: externalPortCapMaxBitErrorRate.setDescription('.')
externalPortCapSourceProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 3, 1, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalPortCapSourceProfile.setStatus('current')
if mibBuilder.loadTexts: externalPortCapSourceProfile.setDescription('.')
endOfExternalPortCapTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfExternalPortCapTable.setStatus('current')
if mibBuilder.loadTexts: endOfExternalPortCapTable.setDescription('')
endOfEciCap = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 3, 10000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfEciCap.setStatus('current')
if mibBuilder.loadTexts: endOfEciCap.setDescription('')
changePhysicalPortServiceCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1), )
if mibBuilder.loadTexts: changePhysicalPortServiceCapTable.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceCapTable.setDescription('')
changePhysicalPortServiceCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityFacilityShelfNo"), (0, "ADVA-FSPR7-MIB", "entityFacilitySlotNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityPortNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityExtNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityClassName"))
if mibBuilder.loadTexts: changePhysicalPortServiceCapEntry.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceCapEntry.setDescription('')
changePhysicalPortServiceCapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 1), FspR7RowStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapRowStatus.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceCapRowStatus.setDescription('RowStatus object is used to create or delete a row in the table.')
changePhysicalPortServiceCapType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 2), FspR7InterfaceTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapType.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceCapType.setDescription('The TYPE defines the transport service type as wrapper with wrapper layer termination OR else as payload')
changePhysicalPortServiceCapAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 3), FspR7AdminStateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapAdmin.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceCapAdmin.setDescription('The Administrative State will be displayed in the GUI with full name values; it will be differently displayed in TL1 syntax according to TL1 display rules. The transaction into the UAS state requires a special destroy/delete function')
changePhysicalPortServiceCapAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapAlias.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceCapAlias.setDescription('User Applied Descriptor')
changePhysicalPortServiceCapAlsMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 5), FspR7AlsModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapAlsMode.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceCapAlsMode.setDescription('Determines the reaction in backward direction in response to a LOS on the same Interface: on a Network Interface connected to the DWDM this is a matter of laser safety')
changePhysicalPortServiceCapBehaviour = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 6), FspR7PortBehaviourCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapBehaviour.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceCapBehaviour.setDescription('Behavior or Port usage based on configuration/usage in the system regardless of faceplate designation')
changePhysicalPortServiceCapDispersionSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 7), FspR7Integer32Caps()).setUnits('ps/nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapDispersionSetting.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceCapDispersionSetting.setDescription('Chromatic Dispersion Compensation setting on module')
changePhysicalPortServiceCapDispersionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 8), FspR7DispersionModesCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapDispersionMode.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceCapDispersionMode.setDescription('Chromatic Dispersion Compensation Mode')
changePhysicalPortServiceCapChannelProv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 9), FspR7ChannelIdentifierCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapChannelProv.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceCapChannelProv.setDescription('Channel')
changePhysicalPortServiceCapWdmRxChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 10), FspR7ChannelIdentifierCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapWdmRxChannel.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceCapWdmRxChannel.setDescription('Configuration of Rx optical channel')
changePhysicalPortServiceCapCodeGain = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 11), FspR7CodeGainCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapCodeGain.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceCapCodeGain.setDescription('Forward Error Correction Coding gain')
changePhysicalPortServiceCapXfpDecisionThres = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 12), FspR7XfpDecisionThresCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapXfpDecisionThres.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceCapXfpDecisionThres.setDescription('XFP Decision threshold setting')
changePhysicalPortServiceCapDisparityCorrection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 13), EnableStateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapDisparityCorrection.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceCapDisparityCorrection.setDescription('Disparity correction')
changePhysicalPortServiceCapEqlzAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 14), FspR7EqlzAdminStateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapEqlzAdmin.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceCapEqlzAdmin.setDescription('Scheduled Equalization Administration')
changePhysicalPortServiceCapErrorForwarding = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 15), FspR7ErrorFwdModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapErrorForwarding.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceCapErrorForwarding.setDescription('Determines the reaction in forward direction in response to a LOS on the interface on the opposite side of the module: may override this behaviour in the interests of laser safety.')
changePhysicalPortServiceCapFecType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 16), FspR7FecTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapFecType.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceCapFecType.setDescription('Forward Error Correction (Only relevant where TYPE = OTU#)')
changePhysicalPortServiceCapFarEndCommunication = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 17), FspR7YesNoCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapFarEndCommunication.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceCapFarEndCommunication.setDescription('Used for Optojack plugs; Communication to Far End Plug is observed')
changePhysicalPortServiceCapFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 18), FspR7FlowControlModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapFlowControl.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceCapFlowControl.setDescription('Flow Control mechanism')
changePhysicalPortServiceCapLaneChannelSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 19), FspR7ChannelIdentifierCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapLaneChannelSetting.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceCapLaneChannelSetting.setDescription('Lane Channel Setting')
changePhysicalPortServiceCapLaserDelayTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 20), FspR7LaserDelayTimerCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapLaserDelayTimer.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceCapLaserDelayTimer.setDescription('Relevant only when ERRFWD=LSROFF. Enables/disables the possibility to delay turning off and on the laser. This applies to the case when turning off the laser is done as an error forwarding mechanism.')
changePhysicalPortServiceCapLaserOffTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 21), FspR7Unsigned32Caps()).setUnits('ms').setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapLaserOffTimer.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceCapLaserOffTimer.setDescription('Delay before laser is swiched off')
changePhysicalPortServiceCapLaserOnTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 22), FspR7Unsigned32Caps()).setUnits('ms').setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapLaserOnTimer.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceCapLaserOnTimer.setDescription('Delay before laser is switched on')
changePhysicalPortServiceCapLaserOffDelayFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 23), EnableStateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapLaserOffDelayFunction.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceCapLaserOffDelayFunction.setDescription('A configuration request for the Laser Off Delay function. This function delays turning off the laser as a consequent action to a defect.')
changePhysicalPortServiceCapAutoPTassignment = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 24), FspR7ManualAutoCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapAutoPTassignment.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceCapAutoPTassignment.setDescription('Auto assignment of ODU PT')
changePhysicalPortServiceCapTributarySlotMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 25), FspR7ManualAutoCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapTributarySlotMethod.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceCapTributarySlotMethod.setDescription('Tributary Slot assignment method')
changePhysicalPortServiceCapOpticalSetPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 26), FspR7Integer32Caps()).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapOpticalSetPoint.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceCapOpticalSetPoint.setDescription('Sets the optical power for power equalization in ROADM or for channel power control in OPCM')
changePhysicalPortServiceCapOpuPayloadType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 27), FspR7OpuPayloadTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapOpuPayloadType.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceCapOpuPayloadType.setDescription('OPU Payload Type Indicator')
changePhysicalPortServiceCapSigDegThresSonetLine = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 28), FspR7BERThresholdCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapSigDegThresSonetLine.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceCapSigDegThresSonetLine.setDescription('Bit-Error-Based Degradation Definition for SONET (standard integration period)')
changePhysicalPortServiceCapSigDegThresSdhMs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 29), FspR7Unsigned32Caps()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapSigDegThresSdhMs.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceCapSigDegThresSdhMs.setDescription('Block-Error-Based Degradation Definition for SDH (standard integration period). Defined as percentage Background Block Errors (30% default) evaluated over a defined period (SDPER-RS).')
changePhysicalPortServiceCapSigDegThresOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 30), FspR7Integer32Caps()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapSigDegThresOtu.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceCapSigDegThresOtu.setDescription('Background-Block-Error-Based Signal Degradation Definition for OTU')
changePhysicalPortServiceCapSigDegThresOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 31), FspR7Integer32Caps()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapSigDegThresOdu.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceCapSigDegThresOdu.setDescription('Background-Block-Error-Based Signal Degradation Definition for ODU')
changePhysicalPortServiceCapSigDegThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 32), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapSigDegThreshold.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceCapSigDegThreshold.setDescription('Threshold for number of errors (CV or CV+DE) in one second')
changePhysicalPortServiceCapSigDegPcslThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 33), FspR7Unsigned32Caps()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapSigDegPcslThreshold.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceCapSigDegPcslThreshold.setDescription('Block-Error-Based Degradation Definition for Physical Coding Sublayer')
changePhysicalPortServiceCapSigDegThresSonetSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 34), FspR7BERThresholdSectionCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapSigDegThresSonetSection.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceCapSigDegThresSonetSection.setDescription('Bit-Error-Based Degradation Definition for SONET (standard integration period)')
changePhysicalPortServiceCapSigDegThresSdhSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 35), FspR7Unsigned32Caps()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapSigDegThresSdhSection.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceCapSigDegThresSdhSection.setDescription('Block-Error-Based Degradation Definition for SDH (standard integration period). Defined as percentage Background Block Errors (30% default) evaluated over a defined period (SDPER-RS).')
changePhysicalPortServiceCapSigDegThresOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 36), FspR7Integer32Caps()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapSigDegThresOduTcmA.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceCapSigDegThresOduTcmA.setDescription('Background-Block-Error-Based Signal Degradation Definition for TCM-A')
changePhysicalPortServiceCapSigDegThresOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 37), FspR7Integer32Caps()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapSigDegThresOduTcmB.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceCapSigDegThresOduTcmB.setDescription('Background-Block-Error-Based Signal Degradation Definition for TCM-B')
changePhysicalPortServiceCapSigDegThresOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 38), FspR7Integer32Caps()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapSigDegThresOduTcmC.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceCapSigDegThresOduTcmC.setDescription('Background-Block-Error-Based Signal Degradation Definition for TCM-C')
changePhysicalPortServiceCapSignalDegradePeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 39), FspR7Unsigned32Caps()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapSignalDegradePeriod.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceCapSignalDegradePeriod.setDescription('The measurement period in seconds used together with the deployProvIfSigDegThresSdhRegSect based on the block error counting method. The valid range is 2..10, The default being 7.')
changePhysicalPortServiceCapSigDegPeriodOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 40), FspR7Unsigned32Caps()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapSigDegPeriodOdu.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceCapSigDegPeriodOdu.setDescription('Integration Period for Signal degrade')
changePhysicalPortServiceCapSigDegPeriodOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 41), FspR7Unsigned32Caps()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapSigDegPeriodOtu.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceCapSigDegPeriodOtu.setDescription('Integration Period for Signal degrade')
changePhysicalPortServiceCapSigDegPeriodIntegration = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 42), FspR7Unsigned32Caps()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapSigDegPeriodIntegration.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceCapSigDegPeriodIntegration.setDescription('Integration Period for Signal degrade')
changePhysicalPortServiceCapSigDegPeriodSdhSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 43), FspR7Unsigned32Caps()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapSigDegPeriodSdhSection.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceCapSigDegPeriodSdhSection.setDescription('Provisionable Signal Degrade Integration Period for SDH')
changePhysicalPortServiceCapSigDegPeriodOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 44), FspR7Unsigned32Caps()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapSigDegPeriodOduTcmA.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceCapSigDegPeriodOduTcmA.setDescription('Integration Period for Signal degrade')
changePhysicalPortServiceCapSigDegPeriodOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 45), FspR7Unsigned32Caps()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapSigDegPeriodOduTcmB.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceCapSigDegPeriodOduTcmB.setDescription('Integration Period of TCMB Signal Segrade')
changePhysicalPortServiceCapSigDegPeriodOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 46), FspR7Unsigned32Caps()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapSigDegPeriodOduTcmC.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceCapSigDegPeriodOduTcmC.setDescription('Integration Period of TCMC Signal Segrade')
changePhysicalPortServiceCapOtnStuffing = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 47), FspR7StuffCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapOtnStuffing.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceCapOtnStuffing.setDescription('Indicates if bit/byte stuffing is used in the transport signal.')
changePhysicalPortServiceCapTcmALevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 48), OtnTcmLevelCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapTcmALevel.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceCapTcmALevel.setDescription('Activation of Tandem Connection Monitoring Instance A')
changePhysicalPortServiceCapTcmBLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 49), OtnTcmLevelCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapTcmBLevel.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceCapTcmBLevel.setDescription('Activation of Tandem Connection Monitoring Instance B')
changePhysicalPortServiceCapTcmCLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 50), OtnTcmLevelCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapTcmCLevel.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceCapTcmCLevel.setDescription('Activation of Tandem Connection Monitoring Instance C')
changePhysicalPortServiceCapTerminationLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 51), OhTerminationLevelCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapTerminationLevel.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceCapTerminationLevel.setDescription('The entity is Addressable by Management [because its supporting entity is defined in the database and therefore its address existsSignal Tremination Level of Intrusive Access to Header Information. Not used in 7.0, monitoring is one layer higher than TERM level, if applicable. All conditions detected on monitoring layer will not be reported (severity degradated to NR).')
changePhysicalPortServiceCapTimingSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 52), SonetTimingSourceCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapTimingSource.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceCapTimingSource.setDescription('The timing source for this interface. - internal: used in stand-alone, point-to-point topologies stand-alone (dedicated fiber operation). - loopTiming: e.g. used in point-to-point via SONET network and feeder topologies. The default is internal(1).')
changePhysicalPortServiceCapTimModeOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 53), TimModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapTimModeOdu.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceCapTimModeOdu.setDescription('Detection of TIM-ODU Condition can be configured')
changePhysicalPortServiceCapTimModeOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 54), TimModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapTimModeOtu.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceCapTimModeOtu.setDescription('Detection of TIM-OTU Condition can be configured')
changePhysicalPortServiceCapTimModeSonetSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 55), TimModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapTimModeSonetSection.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceCapTimModeSonetSection.setDescription('Detection of TIM Sonet Section Condition can be configured')
changePhysicalPortServiceCapTimModeOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 56), TimModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapTimModeOduTcmA.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceCapTimModeOduTcmA.setDescription('Detection of TIM-TCMA Condition can be configured')
changePhysicalPortServiceCapTimModeOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 57), TimModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapTimModeOduTcmB.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceCapTimModeOduTcmB.setDescription('Detection of TIM-TCMB Condition can be configured')
changePhysicalPortServiceCapTimModeOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 58), TimModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapTimModeOduTcmC.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceCapTimModeOduTcmC.setDescription('Detection of TIM-TCMC Condition can be configured')
changePhysicalPortServiceCapTraceFormSonetSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 59), SonetTraceFormCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapTraceFormSonetSection.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceCapTraceFormSonetSection.setDescription('Byte-Length of Trace Compared to Expected')
changePhysicalPortServiceCapTraceExpectedSonetSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 60), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapTraceExpectedSonetSection.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceCapTraceExpectedSonetSection.setDescription('Expected Sec/RS trace. NULL TRACE implies that no trace comparison is made.')
changePhysicalPortServiceCapTraceTransmitSonetSection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 61), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapTraceTransmitSonetSection.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceCapTraceTransmitSonetSection.setDescription('Sec/RS Trace to be Transmitted')
changePhysicalPortServiceCapTraceExpectedOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 62), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapTraceExpectedOtu.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceCapTraceExpectedOtu.setDescription('Expected SAPI part of the OTU trace (15 character). NULL TRACE implies that no trace comparison is made.')
changePhysicalPortServiceCapTraceTransmitSapiOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 63), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapTraceTransmitSapiOtu.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceCapTraceTransmitSapiOtu.setDescription('The transmitted SAPI part of the OTU trace (15 character)')
changePhysicalPortServiceCapTraceTransmitDapiOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 64), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapTraceTransmitDapiOtu.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceCapTraceTransmitDapiOtu.setDescription('The transmitted DAPI part of the OTU trace (15 character)')
changePhysicalPortServiceCapTraceTransmitOpspOtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 65), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapTraceTransmitOpspOtu.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceCapTraceTransmitOpspOtu.setDescription('The transmitted Operator Specific part of the OTU trace (32 character)')
changePhysicalPortServiceCapTraceExpectedOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 66), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapTraceExpectedOdu.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceCapTraceExpectedOdu.setDescription('Expected SAPI part of the ODU trace (15 character). NULL TRACE implies that no trace comparison is made.')
changePhysicalPortServiceCapTraceTransmitSapiOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 67), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapTraceTransmitSapiOdu.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceCapTraceTransmitSapiOdu.setDescription('The transmitted SAPI part of the ODU trace (15 character)')
changePhysicalPortServiceCapTraceTransmitDapiOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 68), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapTraceTransmitDapiOdu.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceCapTraceTransmitDapiOdu.setDescription('The transmitted DAPI part of the ODU trace (15 character)')
changePhysicalPortServiceCapTraceTransmitOpspOdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 69), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapTraceTransmitOpspOdu.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceCapTraceTransmitOpspOdu.setDescription('The transmitted Operator Specific part of the ODU trace (32 character)')
changePhysicalPortServiceCapTraceExpectedOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 70), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapTraceExpectedOduTcmA.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceCapTraceExpectedOduTcmA.setDescription('Expected SAPI part of the TCMA trace (15 character). NULL TRACE-TCM implies that no trace comparison is made.')
changePhysicalPortServiceCapTraceTransmitSapiOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 71), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapTraceTransmitSapiOduTcmA.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceCapTraceTransmitSapiOduTcmA.setDescription('The transmitted SAPI part of the TCMA trace (15 character)')
changePhysicalPortServiceCapTraceTransmitDapiOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 72), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapTraceTransmitDapiOduTcmA.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceCapTraceTransmitDapiOduTcmA.setDescription('The transmitted DAPI part of the TCMA trace (15 character)')
changePhysicalPortServiceCapTraceTransmitOpspOduTcmA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 73), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapTraceTransmitOpspOduTcmA.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceCapTraceTransmitOpspOduTcmA.setDescription('The transmitted Operator Specific part of the TCMA trace (32 character)')
changePhysicalPortServiceCapTraceExpectedOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 74), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapTraceExpectedOduTcmB.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceCapTraceExpectedOduTcmB.setDescription('Expected SAPI part of the TCMB trace (15 character). NULL TRACE-TCM implies that no trace comparison is made.')
changePhysicalPortServiceCapTraceTransmitSapiOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 75), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapTraceTransmitSapiOduTcmB.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceCapTraceTransmitSapiOduTcmB.setDescription('The transmitted SAPI part of the TCMB trace (15 character)')
changePhysicalPortServiceCapTraceTransmitDapiOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 76), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapTraceTransmitDapiOduTcmB.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceCapTraceTransmitDapiOduTcmB.setDescription('The transmitted DAPI part of the TCMB trace (15 character)')
changePhysicalPortServiceCapTraceTransmitOpspOduTcmB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 77), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapTraceTransmitOpspOduTcmB.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceCapTraceTransmitOpspOduTcmB.setDescription('The transmitted Operator Specific part of the TCMB trace (32 character)')
changePhysicalPortServiceCapTraceExpectedOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 78), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapTraceExpectedOduTcmC.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceCapTraceExpectedOduTcmC.setDescription('Expected SAPI part of the TCMC trace (15 character). NULL TRACE-TCM implies that no trace comparison is made.')
changePhysicalPortServiceCapTraceTransmitSapiOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 79), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapTraceTransmitSapiOduTcmC.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceCapTraceTransmitSapiOduTcmC.setDescription('The transmitted SAPI part of the TCMC trace (15 character)')
changePhysicalPortServiceCapTraceTransmitDapiOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 80), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapTraceTransmitDapiOduTcmC.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceCapTraceTransmitDapiOduTcmC.setDescription('The transmitted DAPI part of the TCMC trace (15 character)')
changePhysicalPortServiceCapTraceTransmitOpspOduTcmC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 81), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapTraceTransmitOpspOduTcmC.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceCapTraceTransmitOpspOduTcmC.setDescription('The transmitted Operator Specific part of the TCMC trace (32 character)')
changePhysicalPortServiceCapTxOffDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 82), FspR7EnableDisableCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapTxOffDelay.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceCapTxOffDelay.setDescription('Enable or disable TXOFFHOLD Period for Error Forwarding and LKDO-OFF Consequent Action.')
changePhysicalPortServiceCapVoaMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 83), FspR7VoaModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapVoaMode.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceCapVoaMode.setDescription('VOA operating mode')
changePhysicalPortServiceCapVoaSetpoint = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 84), FspR7Unsigned32Caps()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapVoaSetpoint.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceCapVoaSetpoint.setDescription('Sets the optical attenuation of VOA')
changePhysicalPortServiceCapTxOffOnTm = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 85), FspR7TxOffOnTmCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapTxOffOnTm.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceCapTxOffOnTm.setDescription('Relevant only when ERRFWD=TXOFF. Enables/disables the possibility to delay turning off and on the the transmitter. This applies to the case when turning off the transmitter is done as an error forwarding mechanism.')
changePhysicalPortServiceCapTxOffTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 86), FspR7Unsigned32Caps()).setUnits('ms').setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapTxOffTimer.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceCapTxOffTimer.setDescription('Delay before transmitter is swiched off')
changePhysicalPortServiceCapTxOnTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 1, 1, 87), FspR7Unsigned32Caps()).setUnits('ms').setMaxAccess("readonly")
if mibBuilder.loadTexts: changePhysicalPortServiceCapTxOnTimer.setStatus('current')
if mibBuilder.loadTexts: changePhysicalPortServiceCapTxOnTimer.setDescription('Delay before transmitter is switched on')
endOfChangePhysicalPortServiceCapTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfChangePhysicalPortServiceCapTable.setStatus('current')
if mibBuilder.loadTexts: endOfChangePhysicalPortServiceCapTable.setDescription('')
endOfChangeServiceCap = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 5, 10000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfChangeServiceCap.setStatus('current')
if mibBuilder.loadTexts: endOfChangeServiceCap.setDescription('')
ffpCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 6, 2), )
if mibBuilder.loadTexts: ffpCapTable.setStatus('current')
if mibBuilder.loadTexts: ffpCapTable.setDescription('FfpCapTable')
ffpCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 6, 2, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityFfpShelfNo"), (0, "ADVA-FSPR7-MIB", "entityFfpSlotNo"), (0, "ADVA-FSPR7-MIB", "entityFfpPortNo"), (0, "ADVA-FSPR7-MIB", "entityFfpExtNo"), (0, "ADVA-FSPR7-MIB", "entityFfpClassName"))
if mibBuilder.loadTexts: ffpCapEntry.setStatus('current')
if mibBuilder.loadTexts: ffpCapEntry.setDescription('Entry of FfpCapTable')
ffpCapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 6, 2, 1, 1), FspR7RowStatusCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ffpCapRowStatus.setStatus('current')
if mibBuilder.loadTexts: ffpCapRowStatus.setDescription('RowStatus')
ffpCapCreationMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 6, 2, 1, 2), FfpTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ffpCapCreationMethod.setStatus('current')
if mibBuilder.loadTexts: ffpCapCreationMethod.setDescription('Type of protection (normal/forced)')
ffpCapSDswitching = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 6, 2, 1, 3), EnableStateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ffpCapSDswitching.setStatus('current')
if mibBuilder.loadTexts: ffpCapSDswitching.setDescription('This state controls whether the switch criteria for the APS group will include the Signal Degrade alarm.')
ffpCapHoldOffTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 6, 2, 1, 4), ApsHoldoffTimeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ffpCapHoldOffTime.setStatus('current')
if mibBuilder.loadTexts: ffpCapHoldOffTime.setDescription('This value controls the switch delay (0 to 10 seconds in 100ms steps) for the protection group. Changing the hold-off time when the timer is active will not affect the active timer. The change will take effect the next time the timer is active.')
ffpCapProtectionMech = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 6, 2, 1, 5), ProtectionMechCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ffpCapProtectionMech.setStatus('current')
if mibBuilder.loadTexts: ffpCapProtectionMech.setDescription('The protection type of this protection group.')
ffpCapWorkingAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 6, 2, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ffpCapWorkingAid.setStatus('current')
if mibBuilder.loadTexts: ffpCapWorkingAid.setDescription('AID of working port involved in the protection group.')
ffpCapProtectionAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 6, 2, 1, 7), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ffpCapProtectionAid.setStatus('current')
if mibBuilder.loadTexts: ffpCapProtectionAid.setDescription('(Protection AID) AID of protection entity involved in the protection group.')
ffpCapSignalDegradeSwitching = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 6, 2, 1, 8), EnableStateCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ffpCapSignalDegradeSwitching.setStatus('current')
if mibBuilder.loadTexts: ffpCapSignalDegradeSwitching.setDescription('Switch Trigger Additionally on Signal Degrade Link Detection')
ffpCapFarEndIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 6, 2, 1, 9), FspR7YesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ffpCapFarEndIp.setStatus('current')
if mibBuilder.loadTexts: ffpCapFarEndIp.setDescription('IP Address assigned to PPP Termination Point on Far-End NE. Default is set by NE System on LINK establishment if FENDIPACPT = Y')
ffpCapPeerAid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 6, 2, 1, 10), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ffpCapPeerAid.setStatus('current')
if mibBuilder.loadTexts: ffpCapPeerAid.setDescription('AID of Protection Partner involved in the protection group.')
ffpCapApsType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 6, 2, 1, 11), ApsTypeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ffpCapApsType.setStatus('current')
if mibBuilder.loadTexts: ffpCapApsType.setDescription('The type of APS implemented in this protection group.')
ffpCapRevertMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 6, 2, 1, 12), ApsRevertModeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ffpCapRevertMode.setStatus('current')
if mibBuilder.loadTexts: ffpCapRevertMode.setDescription('Revertive Protection Switching')
ffpCapWaitToRestore = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 6, 2, 1, 13), FspR7Unsigned32Caps()).setUnits('min').setMaxAccess("readonly")
if mibBuilder.loadTexts: ffpCapWaitToRestore.setStatus('current')
if mibBuilder.loadTexts: ffpCapWaitToRestore.setDescription('Wait to Restore Timer value')
ffpCapDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 6, 2, 1, 14), ApsDirectionCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ffpCapDirection.setStatus('current')
if mibBuilder.loadTexts: ffpCapDirection.setDescription("Indicates whether the APS function is 'unidirectional' (single-ended) or 'bidirectional' (dual-ended).")
endOfFfpCapTable = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 6, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfFfpCapTable.setStatus('current')
if mibBuilder.loadTexts: endOfFfpCapTable.setDescription('')
endOfProtectionCap = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 7, 6, 10000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfProtectionCap.setStatus('current')
if mibBuilder.loadTexts: endOfProtectionCap.setDescription('')
conformanceCap = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 10))
compliancesCap = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 10, 1))
groupsCap = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 10, 2))
complianceCap = ModuleCompliance((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 10, 1, 1)).setObjects(("ADVA-FSPR7-CAP-MIB", "objectGroupCap"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    complianceCap = complianceCap.setStatus('current')
if mibBuilder.loadTexts: complianceCap.setDescription('The compliance statement for entities implementing the ADVA FSPR7 CAP MIB.')
objectGroupCap = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 11, 9, 10, 2, 1)).setObjects(("ADVA-FSPR7-CAP-MIB", "crossConnectionCapRowStatus"), ("ADVA-FSPR7-CAP-MIB", "crossConnectionCapAdmin"), ("ADVA-FSPR7-CAP-MIB", "crossConnectionCapRedLineState"), ("ADVA-FSPR7-CAP-MIB", "crossConnectionCapConn"), ("ADVA-FSPR7-CAP-MIB", "crossConnectionCapAlias"), ("ADVA-FSPR7-CAP-MIB", "crossConnectionCapPathNode"), ("ADVA-FSPR7-CAP-MIB", "crossConnectionCapTunnelAid"), ("ADVA-FSPR7-CAP-MIB", "crossOpticalLineCapRowStatus"), ("ADVA-FSPR7-CAP-MIB", "crossOpticalLineCapRedLineState"), ("ADVA-FSPR7-CAP-MIB", "crossOpticalLineCapConn"), ("ADVA-FSPR7-CAP-MIB", "crossOpticalLineCapCrsType"), ("ADVA-FSPR7-CAP-MIB", "crossOpticalLineCapAlias"), ("ADVA-FSPR7-CAP-MIB", "crossOpticalLineCapTunnelAid"), ("ADVA-FSPR7-CAP-MIB", "crossConnectionCapType"), ("ADVA-FSPR7-CAP-MIB", "physicalPortCapRowStatus"), ("ADVA-FSPR7-CAP-MIB", "physicalPortCapType"), ("ADVA-FSPR7-CAP-MIB", "physicalPortCapAdmin"), ("ADVA-FSPR7-CAP-MIB", "virtualPortCapRowStatus"), ("ADVA-FSPR7-CAP-MIB", "virtualPortCapChannelBand"), ("ADVA-FSPR7-CAP-MIB", "virtualPortCapType"), ("ADVA-FSPR7-CAP-MIB", "virtualPortCapAlias"), ("ADVA-FSPR7-CAP-MIB", "virtualPortCapAdmin"), ("ADVA-FSPR7-CAP-MIB", "virtualPortCapEqlzAdmin"), ("ADVA-FSPR7-CAP-MIB", "virtualPortCapInitEqlz"), ("ADVA-FSPR7-CAP-MIB", "optThresholdConfigCapLowConfig"), ("ADVA-FSPR7-CAP-MIB", "optThresholdConfigCapHighConfig"), ("ADVA-FSPR7-CAP-MIB", "oprThresholdConfigCapLowConfig"), ("ADVA-FSPR7-CAP-MIB", "oprThresholdConfigCapHighConfig"), ("ADVA-FSPR7-CAP-MIB", "terminationPointCapRowStatus"), ("ADVA-FSPR7-CAP-MIB", "terminationPointCapAdmin"), ("ADVA-FSPR7-CAP-MIB", "terminationPointCapFiberDetect"), ("ADVA-FSPR7-CAP-MIB", "terminationPointCapAlias"), ("ADVA-FSPR7-CAP-MIB", "connectionCapRowStatus"), ("ADVA-FSPR7-CAP-MIB", "connectionCapType"), ("ADVA-FSPR7-CAP-MIB", "externalPortCapRowStatus"), ("ADVA-FSPR7-CAP-MIB", "externalPortCapType"), ("ADVA-FSPR7-CAP-MIB", "externalPortCapTransmitChannel"), ("ADVA-FSPR7-CAP-MIB", "externalPortCapChannelBandwith"), ("ADVA-FSPR7-CAP-MIB", "externalPortCapAlias"), ("ADVA-FSPR7-CAP-MIB", "externalPortCapFarEndLocation"), ("ADVA-FSPR7-CAP-MIB", "externalPortCapBitrate"), ("ADVA-FSPR7-CAP-MIB", "externalPortCapMaxChromDisperRcv"), ("ADVA-FSPR7-CAP-MIB", "externalPortCapMaxBitErrorRate"), ("ADVA-FSPR7-CAP-MIB", "externalPortCapSourceProfile"), ("ADVA-FSPR7-CAP-MIB", "externalPortCapFecType"), ("ADVA-FSPR7-CAP-MIB", "externalPortCapLineCoding"), ("ADVA-FSPR7-CAP-MIB", "externalPortCapFrameFormat"), ("ADVA-FSPR7-CAP-MIB", "externalPortCapOpticalPowerTx"), ("ADVA-FSPR7-CAP-MIB", "externalPortCapOsnrTransmit"), ("ADVA-FSPR7-CAP-MIB", "externalPortCapPmdTransmit"), ("ADVA-FSPR7-CAP-MIB", "externalPortCapChromDisperTx"), ("ADVA-FSPR7-CAP-MIB", "externalPortCapMinOsnrRcv"), ("ADVA-FSPR7-CAP-MIB", "externalPortCapMinOptPowerRcv"), ("ADVA-FSPR7-CAP-MIB", "externalPortCapMaxOptPowerRcv"), ("ADVA-FSPR7-CAP-MIB", "externalPortCapMaxPmdRcv"), ("ADVA-FSPR7-CAP-MIB", "externalPortCapMinChromDisperRcv"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    objectGroupCap = objectGroupCap.setStatus('current')
if mibBuilder.loadTexts: objectGroupCap.setDescription('A list of objects used for configuration of an entity in ADVA FSPR7 CAP MIB.')
mibBuilder.exportSymbols("ADVA-FSPR7-CAP-MIB", physicalPortCapOtnStuffing=physicalPortCapOtnStuffing, optMuxPhysThresholdCapConfigurableOpticalOutputPwrHigh=optMuxPhysThresholdCapConfigurableOpticalOutputPwrHigh, moduleCapPsuOutputPower=moduleCapPsuOutputPower, lanCapIPv6=lanCapIPv6, pmTerminPointCap=pmTerminPointCap, pmFacilityCap=pmFacilityCap, physicalPortCapTimingSource=physicalPortCapTimingSource, physicalPortCapFlowControl=physicalPortCapFlowControl, tcmBFacilityDataThresholdCapTable=tcmBFacilityDataThresholdCapTable, optMuxPhysThresholdCapTable=optMuxPhysThresholdCapTable, crossDcnCapEcc=crossDcnCapEcc, filterCableCapType=filterCableCapType, fanCapTable=fanCapTable, virtualPortCapLacpMode=virtualPortCapLacpMode, linkCapIpType=linkCapIpType, externalPortCapChromDisperTx=externalPortCapChromDisperTx, shelfCapRackNumber=shelfCapRackNumber, physicalPortCapTraceExpectedOduTcmB=physicalPortCapTraceExpectedOduTcmB, oprThresholdConfigCapHighConfig=oprThresholdConfigCapHighConfig, changePhysicalPortServiceCapTraceTransmitSapiOduTcmB=changePhysicalPortServiceCapTraceTransmitSapiOduTcmB, crossConnectionCapTunnelAid=crossConnectionCapTunnelAid, physicalPortCapTxOffDelay=physicalPortCapTxOffDelay, endOfShelfConnCapTable=endOfShelfConnCapTable, optThresholdConfigCapEntry=optThresholdConfigCapEntry, tcmBFacilityDataThresholdCapEntry=tcmBFacilityDataThresholdCapEntry, otuFecFacilityDataThresholdCapCErrHighThres15min=otuFecFacilityDataThresholdCapCErrHighThres15min, virtualPortCapDataLayerPmReset=virtualPortCapDataLayerPmReset, virtualPortCapPortRole=virtualPortCapPortRole, virtualPortCapVcType=virtualPortCapVcType, conformanceCap=conformanceCap, lanCapType=lanCapType, changePhysicalPortServiceCapTraceTransmitOpspOduTcmA=changePhysicalPortServiceCapTraceTransmitOpspOduTcmA, opticalMuxCapInhibitSwitchToProt=opticalMuxCapInhibitSwitchToProt, crossDcnCapLink=crossDcnCapLink, physicalPortCapSigDegThresSonetSection=physicalPortCapSigDegThresSonetSection, physicalPortCapFecType=physicalPortCapFecType, lanCapTable=lanCapTable, scCapAttGradientTh=scCapAttGradientTh, optMuxPhysThresholdCapOscPwrRcvHighThres=optMuxPhysThresholdCapOscPwrRcvHighThres, physicalPortCapLoopConfig=physicalPortCapLoopConfig, plugCapMaxDataRate=plugCapMaxDataRate, endOfPmFacilityCap=endOfPmFacilityCap, moduleCapChannelSpacingProvision=moduleCapChannelSpacingProvision, compliancesCap=compliancesCap, crossOpticalLineCapRowStatus=crossOpticalLineCapRowStatus, changePhysicalPortServiceCapBehaviour=changePhysicalPortServiceCapBehaviour, crossConnectionCapCrsContAidListTwo=crossConnectionCapCrsContAidListTwo, moduleCapDCFiberType=moduleCapDCFiberType, changePhysicalPortServiceCapTxOffOnTm=changePhysicalPortServiceCapTxOffOnTm, changePhysicalPortServiceCapVoaSetpoint=changePhysicalPortServiceCapVoaSetpoint, shelfCapTable=shelfCapTable, scCapOspf=scCapOspf, changePhysicalPortServiceCapTributarySlotMethod=changePhysicalPortServiceCapTributarySlotMethod, physicalPortCapTestPrbsTrmtMode=physicalPortCapTestPrbsTrmtMode, tcmBFacilityDataThresholdCapSESHighThres15min=tcmBFacilityDataThresholdCapSESHighThres15min, crossConnectionCapRowStatus=crossConnectionCapRowStatus, endOfFiberMapCap=endOfFiberMapCap, dcnPhysThresholdCapTable=dcnPhysThresholdCapTable, pcs2FacilityDataThresholdCapDEHighThres15min=pcs2FacilityDataThresholdCapDEHighThres15min, externalPortCapRowStatus=externalPortCapRowStatus, physicalPortCapPortRole=physicalPortCapPortRole, endOfProtectionCableCap=endOfProtectionCableCap, changePhysicalPortServiceCapSigDegThresSonetSection=changePhysicalPortServiceCapSigDegThresSonetSection, opticalMuxCapFiberBrand=opticalMuxCapFiberBrand, externalPortCapOpticalPowerTx=externalPortCapOpticalPowerTx, physicalPortCapTraceTransmitOpspOduTcmB=physicalPortCapTraceTransmitOpspOduTcmB, physicalPortCapVethAid=physicalPortCapVethAid, moduleCapTransmitChannel=moduleCapTransmitChannel, endOfFanCapTable=endOfFanCapTable, pmDcnCap=pmDcnCap, envPortCapTable=envPortCapTable, lanCapAuthType=lanCapAuthType, changePhysicalPortServiceCapOpuPayloadType=changePhysicalPortServiceCapOpuPayloadType, oduFacilityDataThresholdCapEntry=oduFacilityDataThresholdCapEntry, moduleCapFiberType=moduleCapFiberType, containerCapTable=containerCapTable, virtualPortCapTcmBLevel=virtualPortCapTcmBLevel, filterCableCapRowStatus=filterCableCapRowStatus, virtualPortCapTraceTransmitDapiOduTcmA=virtualPortCapTraceTransmitDapiOduTcmA, lFacilityDataThresholdCapEntry=lFacilityDataThresholdCapEntry, externalPortCapOsnrTransmit=externalPortCapOsnrTransmit, connectionCapType=connectionCapType, envPortCapEntry=envPortCapEntry, endOfShelfConnMgmtCap=endOfShelfConnMgmtCap, endOfOpticalLineCapTable=endOfOpticalLineCapTable, physicalPortCapTimModeOdu=physicalPortCapTimModeOdu, scCapAreaAid=scCapAreaAid, eqptMgmtCap=eqptMgmtCap, physicalPortCapAdmin=physicalPortCapAdmin, changePhysicalPortServiceCapSigDegPeriodSdhSection=changePhysicalPortServiceCapSigDegPeriodSdhSection, externalPortCapMinChromDisperRcv=externalPortCapMinChromDisperRcv, physicalPortCapDisparityCorrection=physicalPortCapDisparityCorrection, opticalMuxCapRowStatus=opticalMuxCapRowStatus, virtualPortCapOduTribPortNo=virtualPortCapOduTribPortNo, changePhysicalPortServiceCapTxOffTimer=changePhysicalPortServiceCapTxOffTimer, virtualPortCapTraceTransmitOpspOduTcmA=virtualPortCapTraceTransmitOpspOduTcmA, virtualPortCapTraceTransmitDapiOdu=virtualPortCapTraceTransmitDapiOdu, scCapBitrate=scCapBitrate, changePhysicalPortServiceCapAlias=changePhysicalPortServiceCapAlias, tcmCFacilityDataThresholdCapSESHighThres15min=tcmCFacilityDataThresholdCapSESHighThres15min, sFacilityDataThresholdCapESHighThres1day=sFacilityDataThresholdCapESHighThres1day, physicalPortCapForceLaserOn=physicalPortCapForceLaserOn, scCapIpAddr=scCapIpAddr, moduleCapAdmin=moduleCapAdmin, virtualPortCapEqlzAdmin=virtualPortCapEqlzAdmin, scCapAuthString=scCapAuthString, pmFacilityPhysicalCap=pmFacilityPhysicalCap, opticalMuxCapEntry=opticalMuxCapEntry, facilityPhysThresholdCapLatencyLowThres=facilityPhysThresholdCapLatencyLowThres, shelfCapSupply=shelfCapSupply, tcmBFacilityDataThresholdCapOduTcmBBbeHighThres15min=tcmBFacilityDataThresholdCapOduTcmBBbeHighThres15min, opticalMuxCapAttenuationGradient=opticalMuxCapAttenuationGradient, facilityPhysThresholdCapDispersionCompensationHighThres=facilityPhysThresholdCapDispersionCompensationHighThres, physicalPortCapType=physicalPortCapType, fecFacilityDataThresholdCapCEHighThres15min=fecFacilityDataThresholdCapCEHighThres15min, tcmAFacilityDataThresholdCapBbeHighThres1day=tcmAFacilityDataThresholdCapBbeHighThres1day, changePhysicalPortServiceCapTimingSource=changePhysicalPortServiceCapTimingSource, otuFacilityDataThresholdCapSESHighThres15min=otuFacilityDataThresholdCapSESHighThres15min, virtualPortCapTrafficDirection=virtualPortCapTrafficDirection, endOfChangePhysicalPortServiceCapTable=endOfChangePhysicalPortServiceCapTable, tcmAFacilityDataThresholdCapSESHighThres1day=tcmAFacilityDataThresholdCapSESHighThres1day, oduFacilityDataThresholdCapSESHighThres1day=oduFacilityDataThresholdCapSESHighThres1day, physicalPortCapChannelProv=physicalPortCapChannelProv, linkCapEntry=linkCapEntry, endOfConnectionCapTable=endOfConnectionCapTable, changePhysicalPortServiceCapTraceTransmitSapiOduTcmA=changePhysicalPortServiceCapTraceTransmitSapiOduTcmA, performanceCap=performanceCap, physicalPortCapTerminationLevel=physicalPortCapTerminationLevel, oduFacilityDataThresholdCapESHighThres15min=oduFacilityDataThresholdCapESHighThres15min, changePhysicalPortServiceCapAutoPTassignment=changePhysicalPortServiceCapAutoPTassignment, endOfShelfCapTable=endOfShelfCapTable, ffpCapCreationMethod=ffpCapCreationMethod, shelfCapBandProvision=shelfCapBandProvision, plugCapThirdPartyUsage=plugCapThirdPartyUsage, physicalPortCapAutoThresReset=physicalPortCapAutoThresReset, changePhysicalPortServiceCapSigDegThresSdhSection=changePhysicalPortServiceCapSigDegThresSdhSection, dcnMgmtCap=dcnMgmtCap, moduleCapScrambling=moduleCapScrambling, changePhysicalPortServiceCapTraceTransmitSapiOdu=changePhysicalPortServiceCapTraceTransmitSapiOdu, oduFacilityDataThresholdCapBbeHighThres1day=oduFacilityDataThresholdCapBbeHighThres1day, scCapGatewayProxyArp=scCapGatewayProxyArp, pmOptMuxPhysThresholdCap=pmOptMuxPhysThresholdCap, virtualPortCapSwitchCommand=virtualPortCapSwitchCommand, physicalPortCapSigDegThresOduTcmB=physicalPortCapSigDegThresOduTcmB, endOfFfpCapTable=endOfFfpCapTable, connectionCapEntry=connectionCapEntry, pcs2FacilityDataThresholdCapESHighThres15min=pcs2FacilityDataThresholdCapESHighThres15min, physicalPortCapRateLimit=physicalPortCapRateLimit, facilityPhysThresholdCapConfigurableOpticalOutputPwrLow=facilityPhysThresholdCapConfigurableOpticalOutputPwrLow, physicalPortCapVoaMode=physicalPortCapVoaMode, virtualPortCapSigDegThresOdu=virtualPortCapSigDegThresOdu, virtualPortCapRowStatus=virtualPortCapRowStatus, endOfTcmCFacilityDataThresholdCapTable=endOfTcmCFacilityDataThresholdCapTable, ffpCapHoldOffTime=ffpCapHoldOffTime, ffpCapProtectionAid=ffpCapProtectionAid, linkCapNearEndIp=linkCapNearEndIp, physicalPortCapTestPrbsRcvMode=physicalPortCapTestPrbsRcvMode, crossConnectionCapType=crossConnectionCapType, lFacilityDataThresholdCapSESHighThres15min=lFacilityDataThresholdCapSESHighThres15min, otuFecFacilityDataThresholdCapTable=otuFecFacilityDataThresholdCapTable, opticalMuxCapEdfaPwrOut=opticalMuxCapEdfaPwrOut, tcmAFacilityDataThresholdCapTable=tcmAFacilityDataThresholdCapTable, physicalPortCapDispertionConfig=physicalPortCapDispertionConfig, moduleCapEntry=moduleCapEntry, fanCapEntry=fanCapEntry, physicalPortCapEqlzAdmin=physicalPortCapEqlzAdmin, physicalPortCapLaneChannelSetting=physicalPortCapLaneChannelSetting, opticalMuxCapTiltSet=opticalMuxCapTiltSet, scCapIPv6PrefixLen=scCapIPv6PrefixLen, tcmCFacilityDataThresholdCapOduTcmCBbeHighThres1day=tcmCFacilityDataThresholdCapOduTcmCBbeHighThres1day, endOfEqptMgmCap=endOfEqptMgmCap, otuFacilityDataThresholdCapSESHighThres1day=otuFacilityDataThresholdCapSESHighThres1day, virtualPortCapAdmin=virtualPortCapAdmin, scCapTable=scCapTable, moduleCapMuxMethod=moduleCapMuxMethod, virtualPortCapStagType=virtualPortCapStagType, facilityPhysThresholdCapDispersionCompensationLowThres=facilityPhysThresholdCapDispersionCompensationLowThres, shelfConnCapFacilityType=shelfConnCapFacilityType, fiberMapCap=fiberMapCap, moduleCapPower=moduleCapPower, physicalPortCapEntry=physicalPortCapEntry, tcmCFacilityDataThresholdCapBESHighThres15min=tcmCFacilityDataThresholdCapBESHighThres15min, endOfFecFacilityDataThresholdCapTable=endOfFecFacilityDataThresholdCapTable, protectionCap=protectionCap, virtualPortCapSigDegPeriodOduTcmA=virtualPortCapSigDegPeriodOduTcmA, physicalPortCapTraceTransmitOpspOtu=physicalPortCapTraceTransmitOpspOtu, opticalMuxMgmtCap=opticalMuxMgmtCap, endOfPcs2FacilityDataThresholdCapTable=endOfPcs2FacilityDataThresholdCapTable, virtualPortCapLagPortType=virtualPortCapLagPortType, pmDcnPhysThresholdCap=pmDcnPhysThresholdCap, opticalMuxCapOffsetHigh=opticalMuxCapOffsetHigh, physicalPortCapTimModeSonetSection=physicalPortCapTimModeSonetSection, physicalPortCapTraceTransmitDapiOduTcmC=physicalPortCapTraceTransmitDapiOduTcmC, virtualPortCapTraceTransmitSapiOduTcmA=virtualPortCapTraceTransmitSapiOduTcmA, changePhysicalPortServiceCapTraceTransmitSapiOtu=changePhysicalPortServiceCapTraceTransmitSapiOtu, physicalPortCapDataLayerPmReset=physicalPortCapDataLayerPmReset, opticalMuxCapSwitchCommand=opticalMuxCapSwitchCommand, terminationPointCapEntry=terminationPointCapEntry, ffpCapPeerAid=ffpCapPeerAid, shelfCapRack=shelfCapRack, terminationPointCapRowStatus=terminationPointCapRowStatus, opticalMuxCapSigDegThresReceiver=opticalMuxCapSigDegThresReceiver, envPortCapFacilityType=envPortCapFacilityType, sFacilityDataThresholdCapCVHighThres15min=sFacilityDataThresholdCapCVHighThres15min, opticalMuxCapOptUpdate=opticalMuxCapOptUpdate, terminationPointCapTable=terminationPointCapTable, pmDcnDataCap=pmDcnDataCap, advaFspR7Cap=advaFspR7Cap, physicalPortCapTributarySlotMethod=physicalPortCapTributarySlotMethod, moduleCapNdpCleanup=moduleCapNdpCleanup, lanCapPriority=lanCapPriority, facilityPhysThresholdCapEntry=facilityPhysThresholdCapEntry, lFacilityDataThresholdCapUASSHighThres1day=lFacilityDataThresholdCapUASSHighThres1day, crossConnectionCapCrsFromAidTwo=crossConnectionCapCrsFromAidTwo, containerCapFacilityType=containerCapFacilityType, physicalPortCapTurnupConfig=physicalPortCapTurnupConfig, tcmCFacilityDataThresholdCapEntry=tcmCFacilityDataThresholdCapEntry, otuFecFacilityDataThresholdCapSESHighThres1day=otuFecFacilityDataThresholdCapSESHighThres1day, facilityPhysThresholdCapSignalToNoiseRatioLow=facilityPhysThresholdCapSignalToNoiseRatioLow, otuFacilityDataThresholdCapEntry=otuFacilityDataThresholdCapEntry, endOfScCapTable=endOfScCapTable, otuFacilityDataThresholdCapBbeHighThres1day=otuFacilityDataThresholdCapBbeHighThres1day, fanCapAdmin=fanCapAdmin, physicalPortCapWdmRxChannel=physicalPortCapWdmRxChannel, crossConnectionCapCrsToAidTwo=crossConnectionCapCrsToAidTwo, virtualPortCapOpuPayloadType=virtualPortCapOpuPayloadType, opticalMuxCapVoaSetpoint=opticalMuxCapVoaSetpoint, virtualPortCapTraceExpectedOduTcmC=virtualPortCapTraceExpectedOduTcmC, tcmAFacilityDataThresholdCapUASHighThres1day=tcmAFacilityDataThresholdCapUASHighThres1day, virtualPortCapLoopConfig=virtualPortCapLoopConfig, ffpCapProtectionMech=ffpCapProtectionMech, tcmAFacilityDataThresholdCapBbeHighThres15min=tcmAFacilityDataThresholdCapBbeHighThres15min, sFacilityDataThresholdCapSEFSHighThres1day=sFacilityDataThresholdCapSEFSHighThres1day, opticalMuxCapBandProvision=opticalMuxCapBandProvision, optMuxPhysThresholdCapBrPwrReceivedHighThres=optMuxPhysThresholdCapBrPwrReceivedHighThres, changePhysicalPortServiceCapSigDegThresOdu=changePhysicalPortServiceCapSigDegThresOdu, linkCapProxyArp=linkCapProxyArp, opticalMuxCapDataLayerPmReset=opticalMuxCapDataLayerPmReset, sFacilityDataThresholdCapSEFSHighThres15min=sFacilityDataThresholdCapSEFSHighThres15min, crossOpticalLineCapTable=crossOpticalLineCapTable, otuFacilityDataThresholdCapESHighThres15min=otuFacilityDataThresholdCapESHighThres15min, shelfCapAdmin=shelfCapAdmin, virtualPortCapSigDegPeriodOduTcmB=virtualPortCapSigDegPeriodOduTcmB, changePhysicalPortServiceCapLaserOffTimer=changePhysicalPortServiceCapLaserOffTimer, dcnPhysThresholdCapEntry=dcnPhysThresholdCapEntry, physicalPortCapInitiateEqualization=physicalPortCapInitiateEqualization, physicalPortCapTraceTransmitOpspOduTcmA=physicalPortCapTraceTransmitOpspOduTcmA, changePhysicalPortServiceCapOtnStuffing=changePhysicalPortServiceCapOtnStuffing, endOfOpticalLineMgmtCap=endOfOpticalLineMgmtCap, changePhysicalPortServiceCapTraceExpectedOtu=changePhysicalPortServiceCapTraceExpectedOtu, physicalPortCapLaserOffTimer=physicalPortCapLaserOffTimer, tcmBFacilityDataThresholdCapSESHighThres1day=tcmBFacilityDataThresholdCapSESHighThres1day, externalPortCapMaxPmdRcv=externalPortCapMaxPmdRcv, physicalPortCapSigDegThresSdhMs=physicalPortCapSigDegThresSdhMs)
mibBuilder.exportSymbols("ADVA-FSPR7-CAP-MIB", complianceCap=complianceCap, virtualPortCapTerminationLevel=virtualPortCapTerminationLevel, physicalPortCapSigDegPeriodOtu=physicalPortCapSigDegPeriodOtu, virtualPortCapInitEqlz=virtualPortCapInitEqlz, tcmBFacilityDataThresholdCapUASHighThres1day=tcmBFacilityDataThresholdCapUASHighThres1day, changePhysicalPortServiceCapTraceTransmitDapiOduTcmB=changePhysicalPortServiceCapTraceTransmitDapiOduTcmB, endOfEnvMgmtCap=endOfEnvMgmtCap, pmEqptCap=pmEqptCap, moduleCapRoadmNumber=moduleCapRoadmNumber, linkCapRowStatus=linkCapRowStatus, scCapAutonegotiation=scCapAutonegotiation, opticalMuxCapForceFwdAsePilotOn=opticalMuxCapForceFwdAsePilotOn, physicalPortCapCodeGain=physicalPortCapCodeGain, moduleCapType=moduleCapType, lFacilityDataThresholdCapUASHighThres15min=lFacilityDataThresholdCapUASHighThres15min, terminationPointCapAdmin=terminationPointCapAdmin, opticalMuxCapPumpPower=opticalMuxCapPumpPower, externalPortCapMaxChromDisperRcv=externalPortCapMaxChromDisperRcv, shelfCapEntry=shelfCapEntry, lFacilityDataThresholdCapSESHighThres1day=lFacilityDataThresholdCapSESHighThres1day, shelfCapRowStatus=shelfCapRowStatus, eccCapRowStatus=eccCapRowStatus, virtualPortCapSigDegPeriodOdu=virtualPortCapSigDegPeriodOdu, envPortCapTelemetry=envPortCapTelemetry, physicalPortCapTxOffOnTm=physicalPortCapTxOffOnTm, physicalPortCapTable=physicalPortCapTable, physicalPortCapLossAttenuation=physicalPortCapLossAttenuation, opticalMuxCapForceLaserOn=opticalMuxCapForceLaserOn, pmOptMuxCap=pmOptMuxCap, ffpCapFarEndIp=ffpCapFarEndIp, physicalPortCapTraceExpectedOtu=physicalPortCapTraceExpectedOtu, moduleCapGainRange=moduleCapGainRange, endOfContainerCapTable=endOfContainerCapTable, shelfConnMgmtCap=shelfConnMgmtCap, moduleCapActivateDetect=moduleCapActivateDetect, crossConnectionCapConn=crossConnectionCapConn, physicalPortCapTimModeOduTcmC=physicalPortCapTimModeOduTcmC, scCapSigDegThresReceiver=scCapSigDegThresReceiver, crossDcnCapTable=crossDcnCapTable, lanCapIpMode=lanCapIpMode, changePhysicalPortServiceCapTraceTransmitDapiOdu=changePhysicalPortServiceCapTraceTransmitDapiOdu, physicalPortCapMaxFrameSize=physicalPortCapMaxFrameSize, ffpCapApsType=ffpCapApsType, linkCapMetric=linkCapMetric, eccCapTable=eccCapTable, physicalPortCapTraceExpectedSonetSection=physicalPortCapTraceExpectedSonetSection, physicalPortCapPvid=physicalPortCapPvid, pmDcnPhysicalCap=pmDcnPhysicalCap, groupsCap=groupsCap, ffpCapTable=ffpCapTable, otuFacilityDataThresholdCapUASHighThres1day=otuFacilityDataThresholdCapUASHighThres1day, otuFecFacilityDataThresholdCapBERCErrHighThres15min=otuFecFacilityDataThresholdCapBERCErrHighThres15min, tcmCFacilityDataThresholdCapSESHighThres1day=tcmCFacilityDataThresholdCapSESHighThres1day, opticalMuxCapOpticalSetPoint=opticalMuxCapOpticalSetPoint, facilityPhysThresholdCapChromaticDispersionLow=facilityPhysThresholdCapChromaticDispersionLow, changePhysicalPortServiceCapLaserOffDelayFunction=changePhysicalPortServiceCapLaserOffDelayFunction, endOfCrossOpticalLineCapTable=endOfCrossOpticalLineCapTable, filterCableCapEntry=filterCableCapEntry, scCapIpMask=scCapIpMask, physicalPortCapXfpDecisionThres=physicalPortCapXfpDecisionThres, opticalMuxCapTimePeriod=opticalMuxCapTimePeriod, virtualPortCapCir=virtualPortCapCir, moduleCapLanAid=moduleCapLanAid, physicalPortCapTcmCLevel=physicalPortCapTcmCLevel, changePhysicalPortServiceCapTraceFormSonetSection=changePhysicalPortServiceCapTraceFormSonetSection, fanCapForceDestroy=fanCapForceDestroy, performanceFacilityCap=performanceFacilityCap, changePhysicalPortServiceCapSigDegPeriodOdu=changePhysicalPortServiceCapSigDegPeriodOdu, filterCableCapTable=filterCableCapTable, physicalPortCapPriority=physicalPortCapPriority, endOfExternalPortCapTable=endOfExternalPortCapTable, lanCapIpType=lanCapIpType, changePhysicalPortServiceCapTimModeOduTcmA=changePhysicalPortServiceCapTimModeOduTcmA, physicalPortCapSigDegPcslThreshold=physicalPortCapSigDegPcslThreshold, facilityPhysThresholdCapCarrierFreqOffsetHigh=facilityPhysThresholdCapCarrierFreqOffsetHigh, lFacilityDataThresholdCapCVHighThres15min=lFacilityDataThresholdCapCVHighThres15min, externalPortCapFrameFormat=externalPortCapFrameFormat, facilityPhysThresholdCapTable=facilityPhysThresholdCapTable, physicalPortCapSigDegPeriodOduTcmB=physicalPortCapSigDegPeriodOduTcmB, otuFacilityDataThresholdCapUASHighThres15min=otuFacilityDataThresholdCapUASHighThres15min, optMuxPhysThresholdCapAttRxHigh=optMuxPhysThresholdCapAttRxHigh, physicalPortCapSigDegPeriodOduTcmA=physicalPortCapSigDegPeriodOduTcmA, endOfTcmAFacilityDataThresholdCapTable=endOfTcmAFacilityDataThresholdCapTable, performanceFacilityThresholdCap=performanceFacilityThresholdCap, physicalPortCapTraceTransmitDapiOtu=physicalPortCapTraceTransmitDapiOtu, crossConnectionCapCrsMcAidList=crossConnectionCapCrsMcAidList, pcs2FacilityDataThresholdCapTable=pcs2FacilityDataThresholdCapTable, optMuxPhysThresholdCapConfigurableOpticalOutputPwrLow=optMuxPhysThresholdCapConfigurableOpticalOutputPwrLow, moduleCapTrafficDirection=moduleCapTrafficDirection, physicalPortCapTraceTransmitDapiOduTcmB=physicalPortCapTraceTransmitDapiOduTcmB, endOfPerformanceFacilityCap=endOfPerformanceFacilityCap, virtualPortCapMaxFrameSize=virtualPortCapMaxFrameSize, ffpCapEntry=ffpCapEntry, physicalPortCapOpticalSetPoint=physicalPortCapOpticalSetPoint, physicalPortCapTxOnTimer=physicalPortCapTxOnTimer, tcmBFacilityDataThresholdCapESHighThres1day=tcmBFacilityDataThresholdCapESHighThres1day, fecFacilityDataThresholdCapEntry=fecFacilityDataThresholdCapEntry, changePhysicalPortServiceCapTraceTransmitOpspOtu=changePhysicalPortServiceCapTraceTransmitOpspOtu, endOfSpecificMgmtCap=endOfSpecificMgmtCap, changePhysicalPortServiceCapTraceExpectedOduTcmC=changePhysicalPortServiceCapTraceExpectedOduTcmC, moduleCapRowStatus=moduleCapRowStatus, externalPortCapPmdTransmit=externalPortCapPmdTransmit, virtualPortCapTunnelAid=virtualPortCapTunnelAid, shelfConnCapAlias=shelfConnCapAlias, virtualPortCapTimModeOduTcmA=virtualPortCapTimModeOduTcmA, changePhysicalPortServiceCapTraceTransmitSonetSection=changePhysicalPortServiceCapTraceTransmitSonetSection, optThresholdConfigCapTable=optThresholdConfigCapTable, physicalPortCapTraceTransmitDapiOdu=physicalPortCapTraceTransmitDapiOdu, plugCapChannelSpacingProvision=plugCapChannelSpacingProvision, changePhysicalPortServiceCapTcmCLevel=changePhysicalPortServiceCapTcmCLevel, protectionCableCapType=protectionCableCapType, managementCap=managementCap, changeServiceCap=changeServiceCap, facilityPhysThresholdCapCarrierFreqOffsetLow=facilityPhysThresholdCapCarrierFreqOffsetLow, fecFacilityDataThresholdCapCEHighThres1day=fecFacilityDataThresholdCapCEHighThres1day, plugCapConnector=plugCapConnector, moduleCapSfProvision=moduleCapSfProvision, lanCapMetric=lanCapMetric, changePhysicalPortServiceCapXfpDecisionThres=changePhysicalPortServiceCapXfpDecisionThres, opticalMuxCapAdmin=opticalMuxCapAdmin, lanCapAuthString=lanCapAuthString, endOfOptMuxPhysThresholdCapTable=endOfOptMuxPhysThresholdCapTable, opticalMuxCapOffsetLow=opticalMuxCapOffsetLow, virtualPortCapLacpTimeout=virtualPortCapLacpTimeout, moduleCapCapabilityLevelProvision=moduleCapCapabilityLevelProvision, plugCapLaneGroup=plugCapLaneGroup, virtualPortCapTimModeOduTcmB=virtualPortCapTimModeOduTcmB, changePhysicalPortServiceCapVoaMode=changePhysicalPortServiceCapVoaMode, endOfOtuFacilityDataThresholdCapTable=endOfOtuFacilityDataThresholdCapTable, endOfPmDcnCap=endOfPmDcnCap, changePhysicalPortServiceCapEqlzAdmin=changePhysicalPortServiceCapEqlzAdmin, changePhysicalPortServiceCapTcmALevel=changePhysicalPortServiceCapTcmALevel, physicalPortCapBehaviour=physicalPortCapBehaviour, physicalPortCapTraceExpectedOduTcmA=physicalPortCapTraceExpectedOduTcmA, envPortCapRowStatus=envPortCapRowStatus, changePhysicalPortServiceCapTxOnTimer=changePhysicalPortServiceCapTxOnTimer, virtualPortCapRevertiveMode=virtualPortCapRevertiveMode, oprThresholdConfigCapLowConfig=oprThresholdConfigCapLowConfig, eccCapType=eccCapType, changePhysicalPortServiceCapAlsMode=changePhysicalPortServiceCapAlsMode, physicalPortCapPrbsPmReset=physicalPortCapPrbsPmReset, eciCap=eciCap, physicalPortCapTcmBLevel=physicalPortCapTcmBLevel, externalPortCapBitrate=externalPortCapBitrate, physicalPortCapLaserOffDelayFunction=physicalPortCapLaserOffDelayFunction, physicalPortCapTraceExpectedOdu=physicalPortCapTraceExpectedOdu, externalPortCapType=externalPortCapType, changePhysicalPortServiceCapDispersionSetting=changePhysicalPortServiceCapDispersionSetting, virtualPortCapTraceTransmitDapiOduTcmC=virtualPortCapTraceTransmitDapiOduTcmC, virtualPortCapInhibitSwitchToProt=virtualPortCapInhibitSwitchToProt, plugCapEntry=plugCapEntry, endOfSFacilityDataThresholdCapTable=endOfSFacilityDataThresholdCapTable, physicalPortCapTraceTransmitSapiOduTcmB=physicalPortCapTraceTransmitSapiOduTcmB, scCapAuthType=scCapAuthType, envMgmtCap=envMgmtCap, endOfOprThresholdConfigCapTable=endOfOprThresholdConfigCapTable, externalPortCapFarEndLocation=externalPortCapFarEndLocation, changePhysicalPortServiceCapSigDegPeriodOduTcmC=changePhysicalPortServiceCapSigDegPeriodOduTcmC, changePhysicalPortServiceCapTcmBLevel=changePhysicalPortServiceCapTcmBLevel, virtualPortCapAlias=virtualPortCapAlias, externalPortCapSourceProfile=externalPortCapSourceProfile, virtualPortCapChannelId=virtualPortCapChannelId, ffpCapSDswitching=ffpCapSDswitching, moduleCapTopology=moduleCapTopology, changePhysicalPortServiceCapDispersionMode=changePhysicalPortServiceCapDispersionMode, shelfCapAlias=shelfCapAlias, otuFacilityDataThresholdCapESHighThres1day=otuFacilityDataThresholdCapESHighThres1day, crossOpticalLineCapRedLineState=crossOpticalLineCapRedLineState, endOfOduFacilityDataThresholdCapTable=endOfOduFacilityDataThresholdCapTable, otuFacilityDataThresholdCapBbeHighThres15min=otuFacilityDataThresholdCapBbeHighThres15min, physicalPortCapTraceExpectedOduTcmC=physicalPortCapTraceExpectedOduTcmC, opticalMuxCapVariableGain=opticalMuxCapVariableGain, plugCapBidirectionalChannel=plugCapBidirectionalChannel, externalPortCapChannelBandwith=externalPortCapChannelBandwith, changePhysicalPortServiceCapTraceTransmitSapiOduTcmC=changePhysicalPortServiceCapTraceTransmitSapiOduTcmC, fecFacilityDataThresholdCapUBEHighThres15min=fecFacilityDataThresholdCapUBEHighThres15min, physicalPortCapPortMode=physicalPortCapPortMode, virtualPortCapTraceTransmitSapiOduTcmB=virtualPortCapTraceTransmitSapiOduTcmB, changePhysicalPortServiceCapEntry=changePhysicalPortServiceCapEntry, endOfTcmBFacilityDataThresholdCapTable=endOfTcmBFacilityDataThresholdCapTable, virtualPortCapTcmCLevel=virtualPortCapTcmCLevel, optMuxPhysThresholdCapAttTxLow=optMuxPhysThresholdCapAttTxLow, physicalPortCapDispersionMode=physicalPortCapDispersionMode, endOfEccCapTable=endOfEccCapTable, externalPortCapFecType=externalPortCapFecType, changePhysicalPortServiceCapTraceTransmitOpspOduTcmC=changePhysicalPortServiceCapTraceTransmitOpspOduTcmC, crossOpticalLineCapConn=crossOpticalLineCapConn, opticalMuxCapTilt=opticalMuxCapTilt, changePhysicalPortServiceCapTraceTransmitOpspOdu=changePhysicalPortServiceCapTraceTransmitOpspOdu, tcmAFacilityDataThresholdCapUASHighThres15min=tcmAFacilityDataThresholdCapUASHighThres15min, changePhysicalPortServiceCapLaneChannelSetting=changePhysicalPortServiceCapLaneChannelSetting, linkCapNendIPv6=linkCapNendIPv6, envPortCapTifAlarmMessage=envPortCapTifAlarmMessage, lanCapAlias=lanCapAlias, moduleCapChannelsProvision=moduleCapChannelsProvision, fanCapAlias=fanCapAlias, eccCapLanAid=eccCapLanAid, virtualPortCapTraceExpectedOdu=virtualPortCapTraceExpectedOdu, lFacilityDataThresholdCapTable=lFacilityDataThresholdCapTable, virtualPortCapType=virtualPortCapType, changePhysicalPortServiceCapTraceTransmitDapiOduTcmC=changePhysicalPortServiceCapTraceTransmitDapiOduTcmC, moduleCapOscUsage=moduleCapOscUsage, protectionCableCapEntry=protectionCableCapEntry, plugCapReach=plugCapReach, pmOptMuxPhysValueCap=pmOptMuxPhysValueCap, moduleCapChannelsNumber=moduleCapChannelsNumber, moduleCapMapping=moduleCapMapping, virtualPortCapPortMode=virtualPortCapPortMode, shelfConnCapRowStatus=shelfConnCapRowStatus, endOfPmFacilityDataThresholdCap=endOfPmFacilityDataThresholdCap, moduleCapAlias=moduleCapAlias, optMuxPhysThresholdCapAttTxHigh=optMuxPhysThresholdCapAttTxHigh, crossConnectionCapCrsFunction=crossConnectionCapCrsFunction, specificMgmtCap=specificMgmtCap, endOfOtuFecFacilityDataThresholdCapTable=endOfOtuFecFacilityDataThresholdCapTable, physicalPortCapSwitchCommand=physicalPortCapSwitchCommand, lanCapIPv6PrefixLen=lanCapIPv6PrefixLen, changePhysicalPortServiceCapSigDegPcslThreshold=changePhysicalPortServiceCapSigDegPcslThreshold, virtualPortCapTraceTransmitSapiOduTcmC=virtualPortCapTraceTransmitSapiOduTcmC, scCapPriority=scCapPriority, pcs2FacilityDataThresholdCapDEHighThres1day=pcs2FacilityDataThresholdCapDEHighThres1day, lFacilityDataThresholdCapESHighThres1day=lFacilityDataThresholdCapESHighThres1day, linkCapAuthString=linkCapAuthString, moduleCapFiberDetect=moduleCapFiberDetect, crossConnectionCapRedLineState=crossConnectionCapRedLineState, crossDcnCapType=crossDcnCapType, optMuxPhysThresholdCapOpticalInputPwrLow=optMuxPhysThresholdCapOpticalInputPwrLow, pcs2FacilityDataThresholdCapESHighThres1day=pcs2FacilityDataThresholdCapESHighThres1day, virtualPortCapRedLineState=virtualPortCapRedLineState, endOfOpticalMuxCapTable=endOfOpticalMuxCapTable, endOfFilterCableCap=endOfFilterCableCap, optMuxPhysThresholdCapOscPwrRcvLowThres=optMuxPhysThresholdCapOscPwrRcvLowThres, scCapIPv6=scCapIPv6, fanCapType=fanCapType, virtualPortCapTraceTransmitOpspOduTcmC=virtualPortCapTraceTransmitOpspOduTcmC, tcmAFacilityDataThresholdCapEntry=tcmAFacilityDataThresholdCapEntry, externalPortCapTable=externalPortCapTable, pcs2FacilityDataThresholdCapEntry=pcs2FacilityDataThresholdCapEntry, physicalPortCapSigDegThresSonetLine=physicalPortCapSigDegThresSonetLine, changePhysicalPortServiceCapSigDegPeriodOduTcmA=changePhysicalPortServiceCapSigDegPeriodOduTcmA, ffpCapRevertMode=ffpCapRevertMode, facilityPhysThresholdCapRoundTripDelayLowThres=facilityPhysThresholdCapRoundTripDelayLowThres, facilityPhysThresholdCapChromaticDispersionHigh=facilityPhysThresholdCapChromaticDispersionHigh, scCapAdmin=scCapAdmin, shelfCapRackOrder=shelfCapRackOrder, envPortCapTifAlarmType=envPortCapTifAlarmType, externalPortCapMinOsnrRcv=externalPortCapMinOsnrRcv, fecFacilityDataThresholdCapTable=fecFacilityDataThresholdCapTable, dcnPhysThresholdCapAttRcvHigh=dcnPhysThresholdCapAttRcvHigh, scCapAlsMode=scCapAlsMode, changePhysicalPortServiceCapOpticalSetPoint=changePhysicalPortServiceCapOpticalSetPoint, optThresholdConfigCapHighConfig=optThresholdConfigCapHighConfig, tcmBFacilityDataThresholdCapBESHighThres15min=tcmBFacilityDataThresholdCapBESHighThres15min, changePhysicalPortServiceCapSigDegThresOtu=changePhysicalPortServiceCapSigDegThresOtu)
mibBuilder.exportSymbols("ADVA-FSPR7-CAP-MIB", moduleCapDispersionCompensation=moduleCapDispersionCompensation, linkCapAdmin=linkCapAdmin, containerMgmtCap=containerMgmtCap, physicalPortCapLaserOnTimer=physicalPortCapLaserOnTimer, physicalPortCapAutonegotiation=physicalPortCapAutonegotiation, shelfCapSlot=shelfCapSlot, moduleCapRemoteReset=moduleCapRemoteReset, opticalLineCapTable=opticalLineCapTable, virtualPortCapOduTribTimeSlottNo=virtualPortCapOduTribTimeSlottNo, virtualPortCapTcmALevel=virtualPortCapTcmALevel, optMuxPhysThresholdCapAttRxLow=optMuxPhysThresholdCapAttRxLow, moduleCapMode=moduleCapMode, scCapIpType=scCapIpType, endOfPmOptMuxPhysThresholdCap=endOfPmOptMuxPhysThresholdCap, externalPortCapTransmitChannel=externalPortCapTransmitChannel, pmFacilityPhysValueCap=pmFacilityPhysValueCap, lanCapRowStatus=lanCapRowStatus, tcmCFacilityDataThresholdCapUASHighThres15min=tcmCFacilityDataThresholdCapUASHighThres15min, physicalPortCapTraceTransmitSapiOduTcmC=physicalPortCapTraceTransmitSapiOduTcmC, virtualPortCapUtag=virtualPortCapUtag, physicalPortCapErrorForwarding=physicalPortCapErrorForwarding, physicalPortCapLaserDelayTimer=physicalPortCapLaserDelayTimer, endOfOpticalMuxMgmtCap=endOfOpticalMuxMgmtCap, physicalPortCapSigDegPeriodSdhSection=physicalPortCapSigDegPeriodSdhSection, scCapMetric=scCapMetric, changePhysicalPortServiceCapTimModeOdu=changePhysicalPortServiceCapTimModeOdu, physicalPortCapAlias=physicalPortCapAlias, featureSpecificCap=featureSpecificCap, moduleCapInitEqlz=moduleCapInitEqlz, facilityPhysThresholdCapDifferentialGroupDelayHigh=facilityPhysThresholdCapDifferentialGroupDelayHigh, lanCapIpAddr=lanCapIpAddr, endOfChangeServiceCap=endOfChangeServiceCap, moduleCapTable=moduleCapTable, opticalMuxCapInitiateEqualization=opticalMuxCapInitiateEqualization, dcnPhysThresholdCapOprHigh=dcnPhysThresholdCapOprHigh, oduFacilityDataThresholdCapTable=oduFacilityDataThresholdCapTable, physicalPortCapSigDegThresOduTcmC=physicalPortCapSigDegThresOduTcmC, changePhysicalPortServiceCapSignalDegradePeriod=changePhysicalPortServiceCapSignalDegradePeriod, endOfFacilityMgmtCap=endOfFacilityMgmtCap, endOfManagementCap=endOfManagementCap, virtualPortCapTraceTransmitOpspOdu=virtualPortCapTraceTransmitOpspOdu, fecFacilityDataThresholdCapUBEHighThres1day=fecFacilityDataThresholdCapUBEHighThres1day, facilityPhysThresholdCapOpticalInputPwrHigh=facilityPhysThresholdCapOpticalInputPwrHigh, physicalPortCapTraceTransmitSapiOtu=physicalPortCapTraceTransmitSapiOtu, endOfLFacilityDataThresholdCapTable=endOfLFacilityDataThresholdCapTable, virtualPortCapOtnStuffing=virtualPortCapOtnStuffing, linkCapTable=linkCapTable, crossOpticalLineCapAlias=crossOpticalLineCapAlias, PYSNMP_MODULE_ID=advaFspR7Cap, plugCapType=plugCapType, lFacilityDataThresholdCapESHighThres15min=lFacilityDataThresholdCapESHighThres15min, opticalLineCapFarEndLocation=opticalLineCapFarEndLocation, facilityPhysThresholdCapLogicalLanesSkewHigh=facilityPhysThresholdCapLogicalLanesSkewHigh, changePhysicalPortServiceCapType=changePhysicalPortServiceCapType, plugCapAdmin=plugCapAdmin, sFacilityDataThresholdCapESHighThres15min=sFacilityDataThresholdCapESHighThres15min, endOfPmDcnPhysicalCap=endOfPmDcnPhysicalCap, linkCapBaud=linkCapBaud, optMuxPhysThresholdCapBrtxHighConfig=optMuxPhysThresholdCapBrtxHighConfig, externalPortCapMinOptPowerRcv=externalPortCapMinOptPowerRcv, otuFecFacilityDataThresholdCapEntry=otuFecFacilityDataThresholdCapEntry, changePhysicalPortServiceCapSigDegThresOduTcmB=changePhysicalPortServiceCapSigDegThresOduTcmB, terminationPointCapAlias=terminationPointCapAlias, changePhysicalPortServiceCapWdmRxChannel=changePhysicalPortServiceCapWdmRxChannel, externalPortCapEntry=externalPortCapEntry, virtualPortCapTraceExpectedOduTcmB=virtualPortCapTraceExpectedOduTcmB, tcmAFacilityDataThresholdCapSESHighThres15min=tcmAFacilityDataThresholdCapSESHighThres15min, sFacilityDataThresholdCapTable=sFacilityDataThresholdCapTable, sFacilityDataThresholdCapCVHighThres1day=sFacilityDataThresholdCapCVHighThres1day, crossConnectionCapTable=crossConnectionCapTable, physicalPortCapSignalDegradePeriod=physicalPortCapSignalDegradePeriod, lanCapOspf=lanCapOspf, pcs2FacilityDataThresholdCapCVHighThres1day=pcs2FacilityDataThresholdCapCVHighThres1day, endOfEciCap=endOfEciCap, pcs2FacilityDataThresholdCapCVHighThres15min=pcs2FacilityDataThresholdCapCVHighThres15min, endOfPmFacilityPhysicalCap=endOfPmFacilityPhysicalCap, eccCapAlias=eccCapAlias, linkCapAreaAid=linkCapAreaAid, linkCapBitrate=linkCapBitrate, changePhysicalPortServiceCapSigDegThresSonetLine=changePhysicalPortServiceCapSigDegThresSonetLine, pmFacilityPhysThresholdCap=pmFacilityPhysThresholdCap, physicalPortCapTraceTransmitSapiOduTcmA=physicalPortCapTraceTransmitSapiOduTcmA, plugCapRowStatus=plugCapRowStatus, oduFacilityDataThresholdCapESHighThres1day=oduFacilityDataThresholdCapESHighThres1day, virtualPortCapBundle=virtualPortCapBundle, fanCapOutputReset=fanCapOutputReset, endOfPerformanceFacilityThresholdCap=endOfPerformanceFacilityThresholdCap, facilityPhysThresholdCapConfigurableOpticalOutputPwrHigh=facilityPhysThresholdCapConfigurableOpticalOutputPwrHigh, opticalLineCapRxLineAttenuation=opticalLineCapRxLineAttenuation, physicalPortCapUtag=physicalPortCapUtag, virtualPortCapPriority=virtualPortCapPriority, tcmCFacilityDataThresholdCapUASHighThres1day=tcmCFacilityDataThresholdCapUASHighThres1day, physicalPortCapInhibitSwitchToWork=physicalPortCapInhibitSwitchToWork, physicalPortCapTraceFormSonetSection=physicalPortCapTraceFormSonetSection, oduFacilityDataThresholdCapUASHighThres15min=oduFacilityDataThresholdCapUASHighThres15min, scCapRowStatus=scCapRowStatus, linkCapAuthType=linkCapAuthType, endOfEnvPortCapTable=endOfEnvPortCapTable, moduleCapBand=moduleCapBand, opticalMuxCapOffset=opticalMuxCapOffset, endOfPmFacilityPhysThresholdCap=endOfPmFacilityPhysThresholdCap, physicalPortCapTimModeOtu=physicalPortCapTimModeOtu, physicalPortCapTimModeOduTcmB=physicalPortCapTimModeOduTcmB, changePhysicalPortServiceCapSigDegPeriodIntegration=changePhysicalPortServiceCapSigDegPeriodIntegration, endOfDcnMgmtCap=endOfDcnMgmtCap, facilityPhysThresholdCapRoundTripDelayHighThres=facilityPhysThresholdCapRoundTripDelayHighThres, opticalLineCapAlias=opticalLineCapAlias, externalPortCapLineCoding=externalPortCapLineCoding, changePhysicalPortServiceCapSigDegThresSdhMs=changePhysicalPortServiceCapSigDegThresSdhMs, facilityPhysThresholdCapLatencyHighThres=facilityPhysThresholdCapLatencyHighThres, changePhysicalPortServiceCapTraceTransmitDapiOduTcmA=changePhysicalPortServiceCapTraceTransmitDapiOduTcmA, physicalPortCapSigDegThreshold=physicalPortCapSigDegThreshold, facilityMgmtCap=facilityMgmtCap, ffpCapSignalDegradeSwitching=ffpCapSignalDegradeSwitching, physicalPortCapSigDegPeriodIntegration=physicalPortCapSigDegPeriodIntegration, physicalPortCapTcmALevel=physicalPortCapTcmALevel, shelfCapType=shelfCapType, endOfLinkCapTable=endOfLinkCapTable, eccCapAdmin=eccCapAdmin, endOfCrossDcnCapTable=endOfCrossDcnCapTable, optThresholdConfigCapLowConfig=optThresholdConfigCapLowConfig, facilityPhysThresholdCapOpticalInputPwrLow=facilityPhysThresholdCapOpticalInputPwrLow, crossConnectionCapAlias=crossConnectionCapAlias, crossOpticalLineCapEntry=crossOpticalLineCapEntry, virtualPortCapTraceTransmitSapiOdu=virtualPortCapTraceTransmitSapiOdu, shelfConnCapEntry=shelfConnCapEntry, externalPortCapAlias=externalPortCapAlias, changePhysicalPortServiceCapSigDegThresOduTcmC=changePhysicalPortServiceCapSigDegThresOduTcmC, plugCapTable=plugCapTable, physicalPortCapStagType=physicalPortCapStagType, eccCapEntry=eccCapEntry, plugCapAlias=plugCapAlias, virtualPortCapTraceTransmitOpspOduTcmB=virtualPortCapTraceTransmitOpspOduTcmB, moduleCapOutputReset=moduleCapOutputReset, oduFacilityDataThresholdCapSESHighThres15min=oduFacilityDataThresholdCapSESHighThres15min, opticalMuxCapAseTabCreation=opticalMuxCapAseTabCreation, virtualPortCapLagActivePorts=virtualPortCapLagActivePorts, moduleCapGroup=moduleCapGroup, moduleCapReach=moduleCapReach, physicalPortCapFarEndCommunication=physicalPortCapFarEndCommunication, opticalMuxCapAlias=opticalMuxCapAlias, changePhysicalPortServiceCapLaserOnTimer=changePhysicalPortServiceCapLaserOnTimer, virtualPortCapTraceTransmitDapiOduTcmB=virtualPortCapTraceTransmitDapiOduTcmB, dcnPhysThresholdCapAttRcvLow=dcnPhysThresholdCapAttRcvLow, physicalPortCapAutoPTassignment=physicalPortCapAutoPTassignment, otuFecFacilityDataThresholdCapBERCErrHighThres1day=otuFecFacilityDataThresholdCapBERCErrHighThres1day, changePhysicalPortServiceCapTimModeSonetSection=changePhysicalPortServiceCapTimModeSonetSection, moduleCapSubBandProvision=moduleCapSubBandProvision, tcmCFacilityDataThresholdCapTable=tcmCFacilityDataThresholdCapTable, virtualPortCapTraceExpectedOduTcmA=virtualPortCapTraceExpectedOduTcmA, oprThresholdConfigCapEntry=oprThresholdConfigCapEntry, changePhysicalPortServiceCapAdmin=changePhysicalPortServiceCapAdmin, changePhysicalPortServiceCapFecType=changePhysicalPortServiceCapFecType, otuFecFacilityDataThresholdCapUBEHighThres15min=otuFecFacilityDataThresholdCapUBEHighThres15min, sFacilityDataThresholdCapSESHighThres1day=sFacilityDataThresholdCapSESHighThres1day, changePhysicalPortServiceCapChannelProv=changePhysicalPortServiceCapChannelProv, optMuxPhysThresholdCapEntry=optMuxPhysThresholdCapEntry, shelfConnCapAdmin=shelfConnCapAdmin, changePhysicalPortServiceCapErrorForwarding=changePhysicalPortServiceCapErrorForwarding, tcmAFacilityDataThresholdCapESHighThres15min=tcmAFacilityDataThresholdCapESHighThres15min, changePhysicalPortServiceCapTable=changePhysicalPortServiceCapTable, opticalLineCapRowStatus=opticalLineCapRowStatus, linkCapIPv6Type=linkCapIPv6Type, ffpCapRowStatus=ffpCapRowStatus, opticalMuxCapType=opticalMuxCapType, changePhysicalPortServiceCapTraceTransmitDapiOtu=changePhysicalPortServiceCapTraceTransmitDapiOtu, pmOptMuxDataCap=pmOptMuxDataCap, crossDcnCapEntry=crossDcnCapEntry, crossDcnCapRowStatus=crossDcnCapRowStatus, moduleCapForceConfig=moduleCapForceConfig, tcmBFacilityDataThresholdCapOduTcmBBbeHighThres1day=tcmBFacilityDataThresholdCapOduTcmBBbeHighThres1day, physicalPortCapRedLineState=physicalPortCapRedLineState, scCapDataLayerPmReset=scCapDataLayerPmReset, externalPortCapMaxBitErrorRate=externalPortCapMaxBitErrorRate, changePhysicalPortServiceCapCodeGain=changePhysicalPortServiceCapCodeGain, physicalPortCapSigDegThresSdhSection=physicalPortCapSigDegThresSdhSection, plugCapTransmitChannel=plugCapTransmitChannel, lanCapAdmin=lanCapAdmin, changePhysicalPortServiceCapTraceTransmitOpspOduTcmB=changePhysicalPortServiceCapTraceTransmitOpspOduTcmB, changePhysicalPortServiceCapLaserDelayTimer=changePhysicalPortServiceCapLaserDelayTimer, endOfVirtualPortCapTable=endOfVirtualPortCapTable, physicalPortCapSigDegPeriodOduTcmC=physicalPortCapSigDegPeriodOduTcmC, otuFacilityDataThresholdCapTable=otuFacilityDataThresholdCapTable, changePhysicalPortServiceCapDisparityCorrection=changePhysicalPortServiceCapDisparityCorrection, changePhysicalPortServiceCapSigDegPeriodOduTcmB=changePhysicalPortServiceCapSigDegPeriodOduTcmB, crossConnectionCapEntry=crossConnectionCapEntry, fanCapRowStatus=fanCapRowStatus, ffpCapWaitToRestore=ffpCapWaitToRestore, tcmCFacilityDataThresholdCapESHighThres1day=tcmCFacilityDataThresholdCapESHighThres1day, physicalPortCapTunnelAid=physicalPortCapTunnelAid, virtualPortCapSigDegThresOduTcmC=virtualPortCapSigDegThresOduTcmC, lFacilityDataThresholdCapCVSHighThres1day=lFacilityDataThresholdCapCVSHighThres1day, changePhysicalPortServiceCapTimModeOduTcmC=changePhysicalPortServiceCapTimModeOduTcmC, opticalMuxCapTable=opticalMuxCapTable, scCapEntry=scCapEntry, physicalPortCapTraceTransmitOpspOduTcmC=physicalPortCapTraceTransmitOpspOduTcmC, linkCapType=linkCapType, physicalPortCapSigDegThresOduTcmA=physicalPortCapSigDegThresOduTcmA, physicalPortCapSigDegThresOtu=physicalPortCapSigDegThresOtu, moduleCapIpAddr=moduleCapIpAddr, opticalLineCapTxLineAttenuation=opticalLineCapTxLineAttenuation, scCapIpMode=scCapIpMode, endOfPmDcnPhysThresholdCap=endOfPmDcnPhysThresholdCap, connectionCapRowStatus=connectionCapRowStatus, opticalLineMgmtCap=opticalLineMgmtCap, moduleCapSupply=moduleCapSupply, protectionCableCapRowStatus=protectionCableCapRowStatus, crossConnectionCapAdmin=crossConnectionCapAdmin, otuFecFacilityDataThresholdCapESHighThres15min=otuFecFacilityDataThresholdCapESHighThres15min, virtualPortCapTable=virtualPortCapTable, changePhysicalPortServiceCapSigDegPeriodOtu=changePhysicalPortServiceCapSigDegPeriodOtu, virtualPortCapSigDegThresOduTcmA=virtualPortCapSigDegThresOduTcmA, opticalMuxCapGain=opticalMuxCapGain, ffpCapDirection=ffpCapDirection, physicalPortCapSigDegPeriodOdu=physicalPortCapSigDegPeriodOdu, physicalPortCapInhibitSwitchToProt=physicalPortCapInhibitSwitchToProt, moduleCapRstp=moduleCapRstp, physicalPortCapSigDegThresOdu=physicalPortCapSigDegThresOdu, endOfPlugCapTable=endOfPlugCapTable, crossConnectionCapPathNode=crossConnectionCapPathNode, plugCapLoopbackAttenuation=plugCapLoopbackAttenuation, protectionCableCapTable=protectionCableCapTable, containerCapRowStatus=containerCapRowStatus, virtualPortCapEntry=virtualPortCapEntry, connectionCapTable=connectionCapTable, eccCapExternalVid=eccCapExternalVid, endOfFacilityPhysThresholdCapTable=endOfFacilityPhysThresholdCapTable, physicalPortCapLagPrio=physicalPortCapLagPrio, virtualPortCapSigDegPeriodOduTcmC=virtualPortCapSigDegPeriodOduTcmC, physicalPortCapDispersionSetting=physicalPortCapDispersionSetting, otuFecFacilityDataThresholdCapCErrHighThres1day=otuFecFacilityDataThresholdCapCErrHighThres1day, objectGroupCap=objectGroupCap, endOfDcnPhysThresholdCapTable=endOfDcnPhysThresholdCapTable, opticalMuxCapOscOpticalSetpoint=opticalMuxCapOscOpticalSetpoint, changePhysicalPortServiceCapTraceExpectedOduTcmA=changePhysicalPortServiceCapTraceExpectedOduTcmA, lanCapAreaAid=lanCapAreaAid, changePhysicalPortServiceCapSigDegThresOduTcmA=changePhysicalPortServiceCapSigDegThresOduTcmA, oprThresholdConfigCapTable=oprThresholdConfigCapTable, physicalPortCapTimModeOduTcmA=physicalPortCapTimModeOduTcmA, opticalLineCapEntry=opticalLineCapEntry, otuFecFacilityDataThresholdCapUBEHighThres1day=otuFecFacilityDataThresholdCapUBEHighThres1day, changePhysicalPortServiceCapSigDegThreshold=changePhysicalPortServiceCapSigDegThreshold, physicalPortCapTraceTransmitSonetSection=physicalPortCapTraceTransmitSonetSection, crossOpticalLineCapTunnelAid=crossOpticalLineCapTunnelAid, tcmBFacilityDataThresholdCapUASHighThres15min=tcmBFacilityDataThresholdCapUASHighThres15min, otuFecFacilityDataThresholdCapESHighThres1day=otuFecFacilityDataThresholdCapESHighThres1day, externalPortCapMaxOptPowerRcv=externalPortCapMaxOptPowerRcv, changePhysicalPortServiceCapTraceExpectedOduTcmB=changePhysicalPortServiceCapTraceExpectedOduTcmB, physicalPortCapTraceTransmitOpspOdu=physicalPortCapTraceTransmitOpspOdu, virtualPortCapSigDegThresOduTcmB=virtualPortCapSigDegThresOduTcmB, endOfLanCapTable=endOfLanCapTable, changePhysicalPortServiceCapTraceExpectedOdu=changePhysicalPortServiceCapTraceExpectedOdu, sFacilityDataThresholdCapEntry=sFacilityDataThresholdCapEntry, virtualPortCapInhibitSwitchToWork=virtualPortCapInhibitSwitchToWork)
mibBuilder.exportSymbols("ADVA-FSPR7-CAP-MIB", moduleCapChannelSpacing=moduleCapChannelSpacing, endOfProtectionCap=endOfProtectionCap, moduleCapDeploy=moduleCapDeploy, scCapLanAid=scCapLanAid, otuFecFacilityDataThresholdCapSESHighThres15min=otuFecFacilityDataThresholdCapSESHighThres15min, moduleCapLagSysPrio=moduleCapLagSysPrio, tcmCFacilityDataThresholdCapOduTcmCBbeHighThres15min=tcmCFacilityDataThresholdCapOduTcmCBbeHighThres15min, scCapAlias=scCapAlias, scCapDuplex=scCapDuplex, lanCapEntry=lanCapEntry, oduFacilityDataThresholdCapUASHighThres1day=oduFacilityDataThresholdCapUASHighThres1day, dcnPhysThresholdCapOprLow=dcnPhysThresholdCapOprLow, virtualPortCapPvid=virtualPortCapPvid, changePhysicalPortServiceCapTxOffDelay=changePhysicalPortServiceCapTxOffDelay, shelfConnCapTable=shelfConnCapTable, optMuxPhysThresholdCapOpticalInputPwrHigh=optMuxPhysThresholdCapOpticalInputPwrHigh, endOfModuleCap=endOfModuleCap, crossOpticalLineCapCrsType=crossOpticalLineCapCrsType, shelfCapPsuOutputPower=shelfCapPsuOutputPower, crossConnectionCapCrsContAidList=crossConnectionCapCrsContAidList, endOfPmFacilityDataCap=endOfPmFacilityDataCap, physicalPortCapAlsMode=physicalPortCapAlsMode, physicalPortCapTraceTransmitSapiOdu=physicalPortCapTraceTransmitSapiOdu, changePhysicalPortServiceCapRowStatus=changePhysicalPortServiceCapRowStatus, physicalPortCapTxOffTimer=physicalPortCapTxOffTimer, physicalPortCapPayload=physicalPortCapPayload, opticalMuxCapAlsMode=opticalMuxCapAlsMode, terminationPointCapFiberDetect=terminationPointCapFiberDetect, oduFacilityDataThresholdCapBbeHighThres15min=oduFacilityDataThresholdCapBbeHighThres15min, scCapType=scCapType, lanCapIpMask=lanCapIpMask, ffpCapWorkingAid=ffpCapWorkingAid, pmFacilityDataThresholdCap=pmFacilityDataThresholdCap, pmOptMuxPhysicalCap=pmOptMuxPhysicalCap, changePhysicalPortServiceCapTimModeOtu=changePhysicalPortServiceCapTimModeOtu, virtualPortCapTimModeOdu=virtualPortCapTimModeOdu, changePhysicalPortServiceCapFlowControl=changePhysicalPortServiceCapFlowControl, changePhysicalPortServiceCapFarEndCommunication=changePhysicalPortServiceCapFarEndCommunication, tcmAFacilityDataThresholdCapESHighThres1day=tcmAFacilityDataThresholdCapESHighThres1day, envPortCapInvertTifInputLogic=envPortCapInvertTifInputLogic, endOfContainerMgmtCap=endOfContainerMgmtCap, changePhysicalPortServiceCapTerminationLevel=changePhysicalPortServiceCapTerminationLevel, changePhysicalPortServiceCapTimModeOduTcmB=changePhysicalPortServiceCapTimModeOduTcmB, linkCapOspf=linkCapOspf, moduleCapForceDestroy=moduleCapForceDestroy, sFacilityDataThresholdCapSESHighThres15min=sFacilityDataThresholdCapSESHighThres15min, virtualPortCapTimModeOduTcmC=virtualPortCapTimModeOduTcmC, virtualPortCapChannelBand=virtualPortCapChannelBand, changePhysicalPortServiceCapTraceExpectedSonetSection=changePhysicalPortServiceCapTraceExpectedSonetSection, pmFacilityDataCap=pmFacilityDataCap, physicalPortCapVoaSetpoint=physicalPortCapVoaSetpoint, physicalPortCapRowStatus=physicalPortCapRowStatus, physicalPortCapTraceTransmitDapiOduTcmA=physicalPortCapTraceTransmitDapiOduTcmA, linkCapAlias=linkCapAlias, containerCapEntry=containerCapEntry, opticalMuxCapInhibitSwitchToWork=opticalMuxCapInhibitSwitchToWork, physicalPortCapOpuPayloadType=physicalPortCapOpuPayloadType)
