#
# PySNMP MIB module CISCO-EIGRP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-EIGRP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:56:32 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
InterfaceIndexOrZero, ifIndex = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero", "ifIndex")
InetAddressPrefixLength, InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressPrefixLength", "InetAddress", "InetAddressType")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, ModuleIdentity, Gauge32, MibIdentifier, IpAddress, Counter32, TimeTicks, NotificationType, iso, Bits, Counter64, ObjectIdentity, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "ModuleIdentity", "Gauge32", "MibIdentifier", "IpAddress", "Counter32", "TimeTicks", "NotificationType", "iso", "Bits", "Counter64", "ObjectIdentity", "Unsigned32")
TextualConvention, TruthValue, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TruthValue", "DisplayString")
ciscoEigrpMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 449))
ciscoEigrpMIB.setRevisions(('2011-11-24 00:00', '2004-11-16 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoEigrpMIB.setRevisionsDescriptions(('Added new notification cEigrpNbrDownEvent. Added the following new objects to cEigrpTopoEntry: cEigrpFdistanceWide, cEigrpDistanceWide and cEigrpReportDistanceWide. Added the following new groups: cEigrpNotificationGroupSupR01 and cEigrpTopoDataGroupSupR01. Added new compliance cEigrpMIBComplianceRev1, which deprecates cEigrpMIBCompliance.', 'Initial version of the MIB module.',))
if mibBuilder.loadTexts: ciscoEigrpMIB.setLastUpdated('201111240000Z')
if mibBuilder.loadTexts: ciscoEigrpMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoEigrpMIB.setContactInfo('Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-eigrp@cisco.com')
if mibBuilder.loadTexts: ciscoEigrpMIB.setDescription('Enhanced Interior Gateway Protocol (EIGRP) is a Cisco proprietary distance vector routing protocol. It is based on the Diffusing Update Algorithm (DUAL), which is a method of finding loop-free paths through a network. Directly connected routers running EIGRP form neighbor adjacencies in order to propagate best-path and alternate-path routing information for configured and learned routes. The tables defined within the MIB are closely aligned with how the router command-line interface for EIGRP displays information on EIGRP configurations, i.e., the topology table contains objects associated with the EIGRP topology commands, and the peer table contains objects associated withe EIGRP neighbor commands, etc. There are five main tables within this mib: EIGRP VPN table Contains information regarding which virtual private networks (VPN) are configured with EIGRP. EIGRP traffic statistics table Contains counter & statistcs regarding specific types of EIGRP packets sent and related collective information per VPN and per autonomous system (AS). EIGRP topology table Contains information regarding EIGRP routes received in updates and originated locally. EIGRP sends and receives routing updates from adjacent routers running EIGRP with which it formed a peer relationship. EIGRP peer (neighbor) table Contains information about neighbor EIGRP routers with which peer adjacencies have been established. EIGRP uses a Hello protocol to form neighbor relationships with directly connected routers also running EIGRP. EIGRP interfaces table Contains information and statistics on each of the configured to run. RIB-scale ========== The Wide-Metrics feature calculates all metrics in 64-bit under named mode EIGRP. Since the RIB can only hold 32-bit, we divide the wide metrics by RIB-scale (range 1-255, default value 128) to convert it to a 32-bit value before assiging it to RIB metrics.')
class EigrpUpTimeString(TextualConvention, OctetString):
    description = "Specifies a timer value in days, hours, minutes, and seconds in ASCII format. If the up time is less than 24 hours, the number of days will not be reflected and the string will be formatted like this: 'hh:mm:ss', reflecting hours, minutes, and seconds. If the up time is greater than 24 hours, EIGRP is less precise and the minutes and seconds are not reflected. Instead only the days and hours are shown and the string will be formatted like this: 'xxxdxxh'."
    status = 'current'
    displayHint = '8a'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 8)

class EigrpVersionString(TextualConvention, OctetString):
    description = 'Specifies an ASCII string representing the IOS major and minor version followed by the EIGRP major and minor version.'
    status = 'current'
    displayHint = '1d.1d/1d.1d'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 9)

cEigrpMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 449, 0))
cEigrpMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 449, 1))
cEigrpMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 449, 2))
cEigrpVpnInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 449, 1, 1))
cEigrpAsInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 449, 1, 2))
cEigrpTopologyInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 449, 1, 3))
cEigrpPeerInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 449, 1, 4))
cEigrpInterfaceInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 449, 1, 5))
cEigrpVpnTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 449, 1, 1, 1), )
if mibBuilder.loadTexts: cEigrpVpnTable.setStatus('current')
if mibBuilder.loadTexts: cEigrpVpnTable.setDescription("This table contains information on those VPN's configured to run EIGRP. The VPN creation on a router is independent of the routing protocol to be used over it. A VPN is given a name and has a dedicated routing table associated with it. This routing table is identified internally by a unique integer value.")
cEigrpVpnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 449, 1, 1, 1, 1), ).setIndexNames((0, "CISCO-EIGRP-MIB", "cEigrpVpnId"))
if mibBuilder.loadTexts: cEigrpVpnEntry.setStatus('current')
if mibBuilder.loadTexts: cEigrpVpnEntry.setDescription('Information relating to a single VPN which is configured to run EIGRP.')
cEigrpVpnId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 449, 1, 1, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cEigrpVpnId.setStatus('current')
if mibBuilder.loadTexts: cEigrpVpnId.setDescription("The unique VPN identifier. This is a unique integer relative to all other VPN's defined on the router. It also identifies internally the routing table instance.")
cEigrpVpnName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 449, 1, 1, 1, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cEigrpVpnName.setStatus('current')
if mibBuilder.loadTexts: cEigrpVpnName.setDescription('The name given to the VPN.')
cEigrpTraffStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 449, 1, 2, 1), )
if mibBuilder.loadTexts: cEigrpTraffStatsTable.setStatus('current')
if mibBuilder.loadTexts: cEigrpTraffStatsTable.setDescription('Table of EIGRP traffic statistics and information associated with all EIGRP autonomous systems.')
cEigrpTraffStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 449, 1, 2, 1, 1), ).setIndexNames((0, "CISCO-EIGRP-MIB", "cEigrpVpnId"), (0, "CISCO-EIGRP-MIB", "cEigrpAsNumber"))
if mibBuilder.loadTexts: cEigrpTraffStatsEntry.setStatus('current')
if mibBuilder.loadTexts: cEigrpTraffStatsEntry.setDescription('The set of statistics and information for a single EIGRP Autonomous System.')
cEigrpAsNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 449, 1, 2, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cEigrpAsNumber.setStatus('current')
if mibBuilder.loadTexts: cEigrpAsNumber.setDescription('The Autonomous System number which is unique integer per VPN.')
cEigrpNbrCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 449, 1, 2, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cEigrpNbrCount.setStatus('current')
if mibBuilder.loadTexts: cEigrpNbrCount.setDescription('The total number of live EIGRP neighbors formed on all interfaces whose IP addresses fall under networks configured in the EIGRP AS.')
cEigrpHellosSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 449, 1, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cEigrpHellosSent.setStatus('current')
if mibBuilder.loadTexts: cEigrpHellosSent.setDescription('The total number Hello packets that have been sent to all EIGRP neighbors formed on all interfaces whose IP addresses fall under networks configured for the EIGRP AS.')
cEigrpHellosRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 449, 1, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cEigrpHellosRcvd.setStatus('current')
if mibBuilder.loadTexts: cEigrpHellosRcvd.setDescription('The total number Hello packets that have been received from all EIGRP neighbors formed on all interfaces whose IP addresses fall under networks configured for the EIGRP AS.')
cEigrpUpdatesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 449, 1, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cEigrpUpdatesSent.setStatus('current')
if mibBuilder.loadTexts: cEigrpUpdatesSent.setDescription('The total number routing update packets that have been sent to all EIGRP neighbors formed on all interfaces whose IP addresses fall under networks configured for the EIGRP AS.')
cEigrpUpdatesRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 449, 1, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cEigrpUpdatesRcvd.setStatus('current')
if mibBuilder.loadTexts: cEigrpUpdatesRcvd.setDescription('The total number routing update packets that have been received from all EIGRP neighbors formed on all interfaces whose IP addresses fall under networks configured for the EIGRP AS.')
cEigrpQueriesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 449, 1, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cEigrpQueriesSent.setStatus('current')
if mibBuilder.loadTexts: cEigrpQueriesSent.setDescription('The total number alternate route query packets that have been sent to all EIGRP neighbors formed on all interfaces whose IP addresses fall under networks configured for the EIGRP AS.')
cEigrpQueriesRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 449, 1, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cEigrpQueriesRcvd.setStatus('current')
if mibBuilder.loadTexts: cEigrpQueriesRcvd.setDescription('The total number alternate route query packets that have been received from all EIGRP neighbors formed on all interfaces whose IP addresses fall under networks configured for the EIGRP AS.')
cEigrpRepliesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 449, 1, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cEigrpRepliesSent.setStatus('current')
if mibBuilder.loadTexts: cEigrpRepliesSent.setDescription('The total number query reply packets that have been sent to all EIGRP neighbors formed on all interfaces whose IP addresses fall under networks configured for the EIGRP AS.')
cEigrpRepliesRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 449, 1, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cEigrpRepliesRcvd.setStatus('current')
if mibBuilder.loadTexts: cEigrpRepliesRcvd.setDescription('The total number query reply packets that have been received from all EIGRP neighbors formed on all interfaces whose IP addresses fall under networks configured for the EIGRP AS.')
cEigrpAcksSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 449, 1, 2, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cEigrpAcksSent.setStatus('current')
if mibBuilder.loadTexts: cEigrpAcksSent.setDescription('The total number packet acknowledgements that have been sent to all EIGRP neighbors formed on all interfaces whose IP addresses fall under networks configured for the EIGRP AS.')
cEigrpAcksRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 449, 1, 2, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cEigrpAcksRcvd.setStatus('current')
if mibBuilder.loadTexts: cEigrpAcksRcvd.setDescription('The total number packet acknowledgements that have been received from all EIGRP neighbors formed on all interfaces whose IP addresses fall under networks configured for the EIGRP AS.')
cEigrpInputQHighMark = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 449, 1, 2, 1, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cEigrpInputQHighMark.setStatus('current')
if mibBuilder.loadTexts: cEigrpInputQHighMark.setDescription('The highest number of EIGRP packets in the input queue waiting to be processed internally addressed to this AS.')
cEigrpInputQDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 449, 1, 2, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cEigrpInputQDrops.setStatus('current')
if mibBuilder.loadTexts: cEigrpInputQDrops.setDescription('The number of EIGRP packets dropped from the input queue due to it being full within the AS.')
cEigrpSiaQueriesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 449, 1, 2, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cEigrpSiaQueriesSent.setStatus('current')
if mibBuilder.loadTexts: cEigrpSiaQueriesSent.setDescription('The total number of Stuck-In-Active (SIA) query packets sent to all EIGRP neighbors formed on all interfaces whose IP addresses fall under networks configured for the EIGRP AS.')
cEigrpSiaQueriesRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 449, 1, 2, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cEigrpSiaQueriesRcvd.setStatus('current')
if mibBuilder.loadTexts: cEigrpSiaQueriesRcvd.setDescription('The total number of Stuck-In-Active (SIA) query packets received from all EIGRP neighbors formed on all interfaces whose IP addresses fall under networks configured for the EIGRP AS.')
cEigrpAsRouterIdType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 449, 1, 2, 1, 1, 17), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cEigrpAsRouterIdType.setStatus('current')
if mibBuilder.loadTexts: cEigrpAsRouterIdType.setDescription('The format of the router-id configured or automatically selected for the EIGRP AS.')
cEigrpAsRouterId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 449, 1, 2, 1, 1, 18), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cEigrpAsRouterId.setStatus('current')
if mibBuilder.loadTexts: cEigrpAsRouterId.setDescription('The router-id configured or automatically selected for the EIGRP AS. Each EIGRP routing process has a unique router-id selected from each autonomous system configured. The format is governed by object cEigrpAsRouterIdType.')
cEigrpTopoRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 449, 1, 2, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cEigrpTopoRoutes.setStatus('current')
if mibBuilder.loadTexts: cEigrpTopoRoutes.setDescription('The total number of EIGRP derived routes currently existing in the topology table for the AS.')
cEigrpHeadSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 449, 1, 2, 1, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cEigrpHeadSerial.setStatus('current')
if mibBuilder.loadTexts: cEigrpHeadSerial.setDescription('Routes in a topology table for an AS are assigned serial numbers and are sequenced internally as they are inserted and deleted. The serial number of the first route in that internal sequence is called the head serial number. Each AS has its own topology table, and its own serial number space, each of which begins with the value 1. A serial number of zero implies that there are no routes in the topology.')
cEigrpNextSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 449, 1, 2, 1, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cEigrpNextSerial.setStatus('current')
if mibBuilder.loadTexts: cEigrpNextSerial.setDescription('The serial number that would be assigned to the next new or changed route in the topology table for the AS.')
cEigrpXmitPendReplies = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 449, 1, 2, 1, 1, 22), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cEigrpXmitPendReplies.setStatus('current')
if mibBuilder.loadTexts: cEigrpXmitPendReplies.setDescription('When alternate route query packets are sent to adjacent EIGRP peers in an AS, replies are expected. This object is the total number of outstanding replies expected to queries that have been sent to peers in the current AS. It remains at zero most of the time until an EIGRP route becomes active.')
cEigrpXmitDummies = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 449, 1, 2, 1, 1, 23), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cEigrpXmitDummies.setStatus('current')
if mibBuilder.loadTexts: cEigrpXmitDummies.setDescription('A dummy is a temporary internal entity used as a place holder in the topology table for an AS. They are not transmitted in routing updates. This is the total number currently in existence associated with the AS.')
cEigrpTopoTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 449, 1, 3, 1), )
if mibBuilder.loadTexts: cEigrpTopoTable.setStatus('current')
if mibBuilder.loadTexts: cEigrpTopoTable.setDescription('The table of EIGRP routes and their associated attributes for an Autonomous System (AS) configured in a VPN is called a topology table. All route entries in the topology table will be indexed by IP network type, IP network number and network mask (prefix) size.')
cEigrpTopoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 449, 1, 3, 1, 1), ).setIndexNames((0, "CISCO-EIGRP-MIB", "cEigrpVpnId"), (0, "CISCO-EIGRP-MIB", "cEigrpAsNumber"), (0, "CISCO-EIGRP-MIB", "cEigrpDestNetType"), (0, "CISCO-EIGRP-MIB", "cEigrpDestNet"), (0, "CISCO-EIGRP-MIB", "cEigrpDestNetPrefixLen"))
if mibBuilder.loadTexts: cEigrpTopoEntry.setStatus('current')
if mibBuilder.loadTexts: cEigrpTopoEntry.setDescription('The entry for a single EIGRP topology table in the given AS.')
cEigrpDestNetType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 449, 1, 3, 1, 1, 1), InetAddressType())
if mibBuilder.loadTexts: cEigrpDestNetType.setStatus('current')
if mibBuilder.loadTexts: cEigrpDestNetType.setDescription('The format of the destination IP network number for a single route in the topology table in the AS specified in cEigrpDestNet.')
cEigrpDestNet = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 449, 1, 3, 1, 1, 2), InetAddress())
if mibBuilder.loadTexts: cEigrpDestNet.setStatus('current')
if mibBuilder.loadTexts: cEigrpDestNet.setDescription('The destination IP network number for a single route in the topology table in the AS. The format is governed by object cEigrpDestNetType.')
cEigrpDestNetPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 449, 1, 3, 1, 1, 4), InetAddressPrefixLength())
if mibBuilder.loadTexts: cEigrpDestNetPrefixLen.setStatus('current')
if mibBuilder.loadTexts: cEigrpDestNetPrefixLen.setDescription('The prefix length associated with the destination IP network address for a single route in the topology table in the AS. The format is governed by the object cEigrpDestNetType.')
cEigrpActive = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 449, 1, 3, 1, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cEigrpActive.setStatus('current')
if mibBuilder.loadTexts: cEigrpActive.setDescription('A value of true(1) indicates the route to the destination network has failed and an active (query) search for an alternative path is in progress. A value of false(2) indicates the route is stable (passive).')
cEigrpStuckInActive = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 449, 1, 3, 1, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cEigrpStuckInActive.setStatus('current')
if mibBuilder.loadTexts: cEigrpStuckInActive.setDescription('A value of true(1) indicates that that this route which is in active state (cEigrpActive = true(1)) has not received any replies to queries for alternate paths, and a second EIGRP route query, called a stuck-in-active query, has now been sent.')
cEigrpDestSuccessors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 449, 1, 3, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cEigrpDestSuccessors.setStatus('current')
if mibBuilder.loadTexts: cEigrpDestSuccessors.setDescription('A successor is the next routing hop for a path to the destination IP network number for a single route in the topology table in the AS. There can be several potential successors if there are multiple paths to the destination. This is the total number of successors for a topology entry.')
cEigrpFdistance = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 449, 1, 3, 1, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cEigrpFdistance.setStatus('current')
if mibBuilder.loadTexts: cEigrpFdistance.setDescription('The feasibility (best) distance is the minimum distance from this router to the destination IP network in this topology entry. The feasibility distance is used in determining the best successor for a path to the destination network.')
cEigrpRouteOriginType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 449, 1, 3, 1, 1, 9), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cEigrpRouteOriginType.setStatus('current')
if mibBuilder.loadTexts: cEigrpRouteOriginType.setDescription('This is a text string describing the internal origin of the EIGRP route represented by the topology entry.')
cEigrpRouteOriginAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 449, 1, 3, 1, 1, 10), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cEigrpRouteOriginAddrType.setStatus('current')
if mibBuilder.loadTexts: cEigrpRouteOriginAddrType.setDescription('The format of the IP address defined as the origin of this topology route entry.')
cEigrpRouteOriginAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 449, 1, 3, 1, 1, 11), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cEigrpRouteOriginAddr.setStatus('current')
if mibBuilder.loadTexts: cEigrpRouteOriginAddr.setDescription('If the origin of the topology route entry is external to this router, then this object is the IP address of the router from which it originated. The format is governed by object cEigrpRouteOriginAddrType.')
cEigrpNextHopAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 449, 1, 3, 1, 1, 12), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cEigrpNextHopAddressType.setStatus('current')
if mibBuilder.loadTexts: cEigrpNextHopAddressType.setDescription('The format of the next hop IP address for the route represented by the topology entry.')
cEigrpNextHopAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 449, 1, 3, 1, 1, 13), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cEigrpNextHopAddress.setStatus('current')
if mibBuilder.loadTexts: cEigrpNextHopAddress.setDescription('This is the next hop IP address for the route represented by the topology entry. The next hop is where network traffic will be routed to in order to reach the destination network for this topology entry. The format is governed by cEigrpNextHopAddressType.')
cEigrpNextHopInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 449, 1, 3, 1, 1, 14), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cEigrpNextHopInterface.setStatus('current')
if mibBuilder.loadTexts: cEigrpNextHopInterface.setDescription('The interface through which the next hop IP address is reached to send network traffic to the destination network represented by the topology entry.')
cEigrpDistance = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 449, 1, 3, 1, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cEigrpDistance.setStatus('current')
if mibBuilder.loadTexts: cEigrpDistance.setDescription('The computed distance to the destination network entry from this router.')
cEigrpReportDistance = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 449, 1, 3, 1, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cEigrpReportDistance.setStatus('current')
if mibBuilder.loadTexts: cEigrpReportDistance.setDescription('The computed distance to the destination network in the topology entry reported to this router by the originator of this route.')
cEigrpFdistanceWide = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 449, 1, 3, 1, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cEigrpFdistanceWide.setStatus('current')
if mibBuilder.loadTexts: cEigrpFdistanceWide.setDescription('The feasibility (best) distance is the minimum distance from this router to the destination IP network in this topology entry. The feasibility distance is used in determining the best successor for a path to the destination network. This is the Wide Metric 64-bit value and not the RIB-scaled 32-bit value.')
cEigrpDistanceWide = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 449, 1, 3, 1, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cEigrpDistanceWide.setStatus('current')
if mibBuilder.loadTexts: cEigrpDistanceWide.setDescription('The computed distance to the destination network entry from this router. This is the Wide Metric 64-bit value and not the RIB-scaled 32-bit value.')
cEigrpReportDistanceWide = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 449, 1, 3, 1, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cEigrpReportDistanceWide.setStatus('current')
if mibBuilder.loadTexts: cEigrpReportDistanceWide.setDescription('The computed distance to the destination network in the topology entry reported to this router by the originator of this route. This is the Wide Metric 64-bit value and not the RIB-scaled 32-bit value.')
cEigrpPeerTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 449, 1, 4, 1), )
if mibBuilder.loadTexts: cEigrpPeerTable.setStatus('current')
if mibBuilder.loadTexts: cEigrpPeerTable.setDescription('The table of established EIGRP peers (neighbors) in the selected autonomous system. Peers are indexed by their unique internal handle id, as well as the AS number and VPN id. The peer entry is removed from the table if the peer is declared down.')
cEigrpPeerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 449, 1, 4, 1, 1), ).setIndexNames((0, "CISCO-EIGRP-MIB", "cEigrpVpnId"), (0, "CISCO-EIGRP-MIB", "cEigrpAsNumber"), (0, "CISCO-EIGRP-MIB", "cEigrpHandle"))
if mibBuilder.loadTexts: cEigrpPeerEntry.setStatus('current')
if mibBuilder.loadTexts: cEigrpPeerEntry.setDescription('Statistics and operational parameters for a single peer in the AS.')
cEigrpHandle = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 449, 1, 4, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cEigrpHandle.setStatus('current')
if mibBuilder.loadTexts: cEigrpHandle.setDescription('The unique internal identifier for the peer in the AS. This is a unique value among peer entries in a selected table.')
cEigrpPeerAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 449, 1, 4, 1, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cEigrpPeerAddrType.setStatus('current')
if mibBuilder.loadTexts: cEigrpPeerAddrType.setDescription('The format of the remote source IP address used by the peer to establish the EIGRP adjacency with this router.')
cEigrpPeerAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 449, 1, 4, 1, 1, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cEigrpPeerAddr.setStatus('current')
if mibBuilder.loadTexts: cEigrpPeerAddr.setDescription('The source IP address used by the peer to establish the EIGRP adjacency with this router. The format is governed by object cEigrpPeerAddrType.')
cEigrpPeerIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 449, 1, 4, 1, 1, 4), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cEigrpPeerIfIndex.setStatus('current')
if mibBuilder.loadTexts: cEigrpPeerIfIndex.setDescription('The ifIndex of the interface on this router through which this peer can be reached.')
cEigrpHoldTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 449, 1, 4, 1, 1, 5), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cEigrpHoldTime.setStatus('current')
if mibBuilder.loadTexts: cEigrpHoldTime.setDescription('The count-down timer indicating how much time must pass without receiving a hello packet from this EIGRP peer before this router declares the peer down. A peer declared as down is removed from the table and is no longer visible.')
cEigrpUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 449, 1, 4, 1, 1, 6), EigrpUpTimeString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cEigrpUpTime.setStatus('current')
if mibBuilder.loadTexts: cEigrpUpTime.setDescription('The elapsed time since the EIGRP adjacency was first established with the peer.')
cEigrpSrtt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 449, 1, 4, 1, 1, 7), Unsigned32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cEigrpSrtt.setStatus('current')
if mibBuilder.loadTexts: cEigrpSrtt.setDescription('The computed smooth round trip time for packets to and from the peer.')
cEigrpRto = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 449, 1, 4, 1, 1, 8), Unsigned32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cEigrpRto.setStatus('current')
if mibBuilder.loadTexts: cEigrpRto.setDescription('The computed retransmission timeout for the peer. This value is computed over time as packets are sent to the peer and acknowledgements are received from it, and is the amount of time to wait before resending a packet from the retransmission queue to the peer when an expected acknowledgement has not been received.')
cEigrpPktsEnqueued = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 449, 1, 4, 1, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cEigrpPktsEnqueued.setStatus('current')
if mibBuilder.loadTexts: cEigrpPktsEnqueued.setDescription('The number of any EIGRP packets currently enqueued waiting to be sent to this peer.')
cEigrpLastSeq = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 449, 1, 4, 1, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cEigrpLastSeq.setStatus('current')
if mibBuilder.loadTexts: cEigrpLastSeq.setDescription('All transmitted EIGRP packets have a sequence number assigned. This is the sequence number of the last EIGRP packet sent to this peer.')
cEigrpVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 449, 1, 4, 1, 1, 11), EigrpVersionString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cEigrpVersion.setStatus('current')
if mibBuilder.loadTexts: cEigrpVersion.setDescription('The EIGRP version information reported by the remote peer.')
cEigrpRetrans = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 449, 1, 4, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cEigrpRetrans.setStatus('current')
if mibBuilder.loadTexts: cEigrpRetrans.setDescription('The cumulative number of retransmissions to this peer during the period that the peer adjacency has remained up.')
cEigrpRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 449, 1, 4, 1, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cEigrpRetries.setStatus('current')
if mibBuilder.loadTexts: cEigrpRetries.setDescription('The number of times the current unacknowledged packet has been retried, i.e. resent to this peer to be acknowledged.')
cEigrpInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 449, 1, 5, 1), )
if mibBuilder.loadTexts: cEigrpInterfaceTable.setStatus('current')
if mibBuilder.loadTexts: cEigrpInterfaceTable.setDescription('The table of interfaces over which EIGRP is running, and their associated statistics. This table is independent of whether any peer adjacencies have been formed over the interfaces or not. Interfaces running EIGRP are determined by whether their assigned IP addresses fall within configured EIGRP network statements.')
cEigrpInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 449, 1, 5, 1, 1), ).setIndexNames((0, "CISCO-EIGRP-MIB", "cEigrpVpnId"), (0, "CISCO-EIGRP-MIB", "cEigrpAsNumber"), (0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cEigrpInterfaceEntry.setStatus('current')
if mibBuilder.loadTexts: cEigrpInterfaceEntry.setDescription('Information for a single interface running EIGRP in the AS and VPN.')
cEigrpPeerCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 449, 1, 5, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cEigrpPeerCount.setStatus('current')
if mibBuilder.loadTexts: cEigrpPeerCount.setDescription('The number of EIGRP adjacencies currently formed with peers reached through this interface.')
cEigrpXmitReliableQ = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 449, 1, 5, 1, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cEigrpXmitReliableQ.setStatus('current')
if mibBuilder.loadTexts: cEigrpXmitReliableQ.setDescription('The number of EIGRP packets currently waiting in the reliable transport (acknowledgement-required) transmission queue to be sent to a peer.')
cEigrpXmitUnreliableQ = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 449, 1, 5, 1, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cEigrpXmitUnreliableQ.setStatus('current')
if mibBuilder.loadTexts: cEigrpXmitUnreliableQ.setDescription('The number EIGRP of packets currently waiting in the unreliable transport (no acknowledgement required) transmission queue.')
cEigrpMeanSrtt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 449, 1, 5, 1, 1, 6), Unsigned32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cEigrpMeanSrtt.setStatus('current')
if mibBuilder.loadTexts: cEigrpMeanSrtt.setDescription('The average of all the computed smooth round trip time values for a packet to and from all peers established on this interface.')
cEigrpPacingReliable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 449, 1, 5, 1, 1, 7), Unsigned32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cEigrpPacingReliable.setStatus('current')
if mibBuilder.loadTexts: cEigrpPacingReliable.setDescription('The configured time interval between EIGRP packet transmissions on the interface when the reliable transport method is used.')
cEigrpPacingUnreliable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 449, 1, 5, 1, 1, 8), Unsigned32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cEigrpPacingUnreliable.setStatus('current')
if mibBuilder.loadTexts: cEigrpPacingUnreliable.setDescription('The configured time interval between EIGRP packet transmissions on the interface when the unreliable transport method is used.')
cEigrpMFlowTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 449, 1, 5, 1, 1, 9), Unsigned32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cEigrpMFlowTimer.setStatus('current')
if mibBuilder.loadTexts: cEigrpMFlowTimer.setDescription('The configured multicast flow control timer value for this interface.')
cEigrpPendingRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 449, 1, 5, 1, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cEigrpPendingRoutes.setStatus('current')
if mibBuilder.loadTexts: cEigrpPendingRoutes.setDescription('The number of queued EIGRP routing updates awaiting transmission on this interface.')
cEigrpHelloInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 449, 1, 5, 1, 1, 11), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cEigrpHelloInterval.setStatus('current')
if mibBuilder.loadTexts: cEigrpHelloInterval.setDescription('The configured time interval between Hello packet transmissions for this interface.')
cEigrpXmitNextSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 449, 1, 5, 1, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cEigrpXmitNextSerial.setStatus('current')
if mibBuilder.loadTexts: cEigrpXmitNextSerial.setDescription('The serial number of the next EIGRP packet that is to be queued for transmission on this interface.')
cEigrpUMcasts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 449, 1, 5, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cEigrpUMcasts.setStatus('current')
if mibBuilder.loadTexts: cEigrpUMcasts.setDescription('The total number of unreliable (no acknowledgement required) EIGRP multicast packets sent on this interface.')
cEigrpRMcasts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 449, 1, 5, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cEigrpRMcasts.setStatus('current')
if mibBuilder.loadTexts: cEigrpRMcasts.setDescription('The total number of reliable (acknowledgement required) EIGRP multicast packets sent on this interface.')
cEigrpUUcasts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 449, 1, 5, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cEigrpUUcasts.setStatus('current')
if mibBuilder.loadTexts: cEigrpUUcasts.setDescription('The total number of unreliable (no acknowledgement required) EIGRP unicast packets sent on this interface.')
cEigrpRUcasts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 449, 1, 5, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cEigrpRUcasts.setStatus('current')
if mibBuilder.loadTexts: cEigrpRUcasts.setDescription('The total number of reliable (acknowledgement required) unicast packets sent on this interface.')
cEigrpMcastExcepts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 449, 1, 5, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cEigrpMcastExcepts.setStatus('current')
if mibBuilder.loadTexts: cEigrpMcastExcepts.setDescription('The total number of EIGRP multicast exception transmissions that have occurred on this interface.')
cEigrpCRpkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 449, 1, 5, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cEigrpCRpkts.setStatus('current')
if mibBuilder.loadTexts: cEigrpCRpkts.setDescription('The total number EIGRP Conditional-Receive packets sent on this interface.')
cEigrpAcksSuppressed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 449, 1, 5, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cEigrpAcksSuppressed.setStatus('current')
if mibBuilder.loadTexts: cEigrpAcksSuppressed.setDescription('The total number of individual EIGRP acknowledgement packets that have been suppressed and combined in an already enqueued outbound reliable packet on this interface.')
cEigrpRetransSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 449, 1, 5, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cEigrpRetransSent.setStatus('current')
if mibBuilder.loadTexts: cEigrpRetransSent.setDescription('The total number EIGRP packet retransmissions sent on the interface.')
cEigrpOOSrvcd = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 449, 1, 5, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cEigrpOOSrvcd.setStatus('current')
if mibBuilder.loadTexts: cEigrpOOSrvcd.setDescription('The total number of out-of-sequence EIGRP packets received.')
cEigrpAuthMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 449, 1, 5, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("md5", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cEigrpAuthMode.setStatus('current')
if mibBuilder.loadTexts: cEigrpAuthMode.setDescription('The EIGRP authentication mode of the interface. none : no authentication enabled on the interface md5 : MD5 authentication enabled on the interface')
cEigrpAuthKeyChain = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 449, 1, 5, 1, 1, 23), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cEigrpAuthKeyChain.setStatus('current')
if mibBuilder.loadTexts: cEigrpAuthKeyChain.setDescription('The name of the authentication key-chain configured on this interface. The key-chain is a reference to which set of secret keys are to be accessed in order to determine which secret key string to use. The key chain name is not the secret key string password and can also be used in other routing protocols, such as RIP and ISIS.')
cEigrpAuthFailureEvent = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 449, 0, 1)).setObjects(("CISCO-EIGRP-MIB", "cEigrpPeerAddrType"), ("CISCO-EIGRP-MIB", "cEigrpPeerAddr"))
if mibBuilder.loadTexts: cEigrpAuthFailureEvent.setStatus('current')
if mibBuilder.loadTexts: cEigrpAuthFailureEvent.setDescription('This notification is sent when EIGRP MD5 authentication is enabled on any interface and peer adjacencies are formed, and any adjacencies go down as a result of an authentication failure.')
cEigrpRouteStuckInActive = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 449, 0, 2)).setObjects(("CISCO-EIGRP-MIB", "cEigrpPeerAddrType"), ("CISCO-EIGRP-MIB", "cEigrpPeerAddr"), ("CISCO-EIGRP-MIB", "cEigrpStuckInActive"))
if mibBuilder.loadTexts: cEigrpRouteStuckInActive.setStatus('current')
if mibBuilder.loadTexts: cEigrpRouteStuckInActive.setDescription('This notification is sent when a route in the topology table is stuck in an active state. During the query phase for a new route to a destination network, a route is described as being in the active state if when an alternate path is actively being sought, no replies are received to normal queries or stuck-in-active queries.')
cEigrpNbrDownEvent = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 449, 0, 3)).setObjects(("CISCO-EIGRP-MIB", "cEigrpPeerAddrType"), ("CISCO-EIGRP-MIB", "cEigrpPeerAddr"))
if mibBuilder.loadTexts: cEigrpNbrDownEvent.setStatus('current')
if mibBuilder.loadTexts: cEigrpNbrDownEvent.setDescription('This notification is sent when any EIGRP peer adjacency goes down.')
cEigrpMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 449, 2, 1))
cEigrpMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 449, 2, 2))
cEigrpMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 449, 2, 1, 1)).setObjects(("CISCO-EIGRP-MIB", "cEigrpVpnDataGroup"), ("CISCO-EIGRP-MIB", "cEigrpTrafficStatsGroup"), ("CISCO-EIGRP-MIB", "cEigrpInterfaceDataGroup"), ("CISCO-EIGRP-MIB", "cEigrpPeerDataGroup"), ("CISCO-EIGRP-MIB", "cEigrpTopoDataGroup"), ("CISCO-EIGRP-MIB", "cEigrpNotificationsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cEigrpMIBCompliance = cEigrpMIBCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: cEigrpMIBCompliance.setDescription('The compliance statement for entities which implement the Cisco EIGRP Management MIB.')
cEigrpMIBComplianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 449, 2, 1, 2)).setObjects(("CISCO-EIGRP-MIB", "cEigrpVpnDataGroup"), ("CISCO-EIGRP-MIB", "cEigrpTrafficStatsGroup"), ("CISCO-EIGRP-MIB", "cEigrpInterfaceDataGroup"), ("CISCO-EIGRP-MIB", "cEigrpPeerDataGroup"), ("CISCO-EIGRP-MIB", "cEigrpTopoDataGroup"), ("CISCO-EIGRP-MIB", "cEigrpNotificationsGroup"), ("CISCO-EIGRP-MIB", "cEigrpNotificationsGroupSupR01"), ("CISCO-EIGRP-MIB", "cEigrpTopoDataGroupSupR01"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cEigrpMIBComplianceRev1 = cEigrpMIBComplianceRev1.setStatus('current')
if mibBuilder.loadTexts: cEigrpMIBComplianceRev1.setDescription('The Revison1 compliance statement for entities which implement the Cisco EIGRP Management MIB.')
cEigrpVpnDataGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 449, 2, 2, 1)).setObjects(("CISCO-EIGRP-MIB", "cEigrpVpnName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cEigrpVpnDataGroup = cEigrpVpnDataGroup.setStatus('current')
if mibBuilder.loadTexts: cEigrpVpnDataGroup.setDescription('The collection of VPN names which have been configured with one or more EIGRP autonmous systems.')
cEigrpTrafficStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 449, 2, 2, 2)).setObjects(("CISCO-EIGRP-MIB", "cEigrpHellosSent"), ("CISCO-EIGRP-MIB", "cEigrpHellosRcvd"), ("CISCO-EIGRP-MIB", "cEigrpUpdatesSent"), ("CISCO-EIGRP-MIB", "cEigrpUpdatesRcvd"), ("CISCO-EIGRP-MIB", "cEigrpQueriesSent"), ("CISCO-EIGRP-MIB", "cEigrpQueriesRcvd"), ("CISCO-EIGRP-MIB", "cEigrpRepliesSent"), ("CISCO-EIGRP-MIB", "cEigrpRepliesRcvd"), ("CISCO-EIGRP-MIB", "cEigrpAcksSent"), ("CISCO-EIGRP-MIB", "cEigrpAcksRcvd"), ("CISCO-EIGRP-MIB", "cEigrpInputQHighMark"), ("CISCO-EIGRP-MIB", "cEigrpInputQDrops"), ("CISCO-EIGRP-MIB", "cEigrpSiaQueriesSent"), ("CISCO-EIGRP-MIB", "cEigrpSiaQueriesRcvd"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cEigrpTrafficStatsGroup = cEigrpTrafficStatsGroup.setStatus('current')
if mibBuilder.loadTexts: cEigrpTrafficStatsGroup.setDescription('A collection of objects providing management information regarding collective EIGRP packet statistics for all EIGRP autonomous systems configured.')
cEigrpInterfaceDataGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 449, 2, 2, 3)).setObjects(("CISCO-EIGRP-MIB", "cEigrpPeerCount"), ("CISCO-EIGRP-MIB", "cEigrpXmitReliableQ"), ("CISCO-EIGRP-MIB", "cEigrpXmitUnreliableQ"), ("CISCO-EIGRP-MIB", "cEigrpMeanSrtt"), ("CISCO-EIGRP-MIB", "cEigrpPacingReliable"), ("CISCO-EIGRP-MIB", "cEigrpPacingUnreliable"), ("CISCO-EIGRP-MIB", "cEigrpMFlowTimer"), ("CISCO-EIGRP-MIB", "cEigrpPendingRoutes"), ("CISCO-EIGRP-MIB", "cEigrpHelloInterval"), ("CISCO-EIGRP-MIB", "cEigrpXmitNextSerial"), ("CISCO-EIGRP-MIB", "cEigrpUMcasts"), ("CISCO-EIGRP-MIB", "cEigrpRMcasts"), ("CISCO-EIGRP-MIB", "cEigrpUUcasts"), ("CISCO-EIGRP-MIB", "cEigrpRUcasts"), ("CISCO-EIGRP-MIB", "cEigrpMcastExcepts"), ("CISCO-EIGRP-MIB", "cEigrpCRpkts"), ("CISCO-EIGRP-MIB", "cEigrpAcksSuppressed"), ("CISCO-EIGRP-MIB", "cEigrpRetransSent"), ("CISCO-EIGRP-MIB", "cEigrpOOSrvcd"), ("CISCO-EIGRP-MIB", "cEigrpAuthMode"), ("CISCO-EIGRP-MIB", "cEigrpAuthKeyChain"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cEigrpInterfaceDataGroup = cEigrpInterfaceDataGroup.setStatus('current')
if mibBuilder.loadTexts: cEigrpInterfaceDataGroup.setDescription('A collection of objects providing management information for interfaces over which EIGRP is configured and running.')
cEigrpPeerDataGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 449, 2, 2, 4)).setObjects(("CISCO-EIGRP-MIB", "cEigrpNbrCount"), ("CISCO-EIGRP-MIB", "cEigrpPeerAddrType"), ("CISCO-EIGRP-MIB", "cEigrpPeerAddr"), ("CISCO-EIGRP-MIB", "cEigrpPeerIfIndex"), ("CISCO-EIGRP-MIB", "cEigrpHoldTime"), ("CISCO-EIGRP-MIB", "cEigrpUpTime"), ("CISCO-EIGRP-MIB", "cEigrpSrtt"), ("CISCO-EIGRP-MIB", "cEigrpRto"), ("CISCO-EIGRP-MIB", "cEigrpPktsEnqueued"), ("CISCO-EIGRP-MIB", "cEigrpLastSeq"), ("CISCO-EIGRP-MIB", "cEigrpVersion"), ("CISCO-EIGRP-MIB", "cEigrpRetrans"), ("CISCO-EIGRP-MIB", "cEigrpRetries"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cEigrpPeerDataGroup = cEigrpPeerDataGroup.setStatus('current')
if mibBuilder.loadTexts: cEigrpPeerDataGroup.setDescription('A collection of objects providing management information for EIGRP peer adjacencies formed in the EIGRP autonoumous systems.')
cEigrpTopoDataGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 449, 2, 2, 5)).setObjects(("CISCO-EIGRP-MIB", "cEigrpAsRouterId"), ("CISCO-EIGRP-MIB", "cEigrpAsRouterIdType"), ("CISCO-EIGRP-MIB", "cEigrpTopoRoutes"), ("CISCO-EIGRP-MIB", "cEigrpHeadSerial"), ("CISCO-EIGRP-MIB", "cEigrpNextSerial"), ("CISCO-EIGRP-MIB", "cEigrpXmitPendReplies"), ("CISCO-EIGRP-MIB", "cEigrpXmitDummies"), ("CISCO-EIGRP-MIB", "cEigrpActive"), ("CISCO-EIGRP-MIB", "cEigrpStuckInActive"), ("CISCO-EIGRP-MIB", "cEigrpDestSuccessors"), ("CISCO-EIGRP-MIB", "cEigrpFdistance"), ("CISCO-EIGRP-MIB", "cEigrpRouteOriginType"), ("CISCO-EIGRP-MIB", "cEigrpRouteOriginAddrType"), ("CISCO-EIGRP-MIB", "cEigrpRouteOriginAddr"), ("CISCO-EIGRP-MIB", "cEigrpNextHopAddressType"), ("CISCO-EIGRP-MIB", "cEigrpNextHopAddress"), ("CISCO-EIGRP-MIB", "cEigrpNextHopInterface"), ("CISCO-EIGRP-MIB", "cEigrpDistance"), ("CISCO-EIGRP-MIB", "cEigrpReportDistance"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cEigrpTopoDataGroup = cEigrpTopoDataGroup.setStatus('current')
if mibBuilder.loadTexts: cEigrpTopoDataGroup.setDescription('A collection of objects providing management information for EIGRP topology routes derived within autonomous systems and received in updates from EIGRP neighbors.')
cEigrpNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 449, 2, 2, 6)).setObjects(("CISCO-EIGRP-MIB", "cEigrpAuthFailureEvent"), ("CISCO-EIGRP-MIB", "cEigrpRouteStuckInActive"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cEigrpNotificationsGroup = cEigrpNotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: cEigrpNotificationsGroup.setDescription('Group of notifications on EIGRP routers.')
cEigrpNotificationsGroupSupR01 = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 449, 2, 2, 7)).setObjects(("CISCO-EIGRP-MIB", "cEigrpNbrDownEvent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cEigrpNotificationsGroupSupR01 = cEigrpNotificationsGroupSupR01.setStatus('current')
if mibBuilder.loadTexts: cEigrpNotificationsGroupSupR01.setDescription('Additional Notifications that supplement cEigrpNotificationsGroup.')
cEigrpTopoDataGroupSupR01 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 449, 2, 2, 8)).setObjects(("CISCO-EIGRP-MIB", "cEigrpFdistanceWide"), ("CISCO-EIGRP-MIB", "cEigrpDistanceWide"), ("CISCO-EIGRP-MIB", "cEigrpReportDistanceWide"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cEigrpTopoDataGroupSupR01 = cEigrpTopoDataGroupSupR01.setStatus('current')
if mibBuilder.loadTexts: cEigrpTopoDataGroupSupR01.setDescription('Collection of objects providing wide metric management information for EIGRP topology routes that supplement the cEIGRPTopoDataGroup.')
mibBuilder.exportSymbols("CISCO-EIGRP-MIB", cEigrpNotificationsGroupSupR01=cEigrpNotificationsGroupSupR01, ciscoEigrpMIB=ciscoEigrpMIB, cEigrpDestNetPrefixLen=cEigrpDestNetPrefixLen, cEigrpXmitPendReplies=cEigrpXmitPendReplies, cEigrpRto=cEigrpRto, cEigrpReportDistance=cEigrpReportDistance, cEigrpRouteOriginAddr=cEigrpRouteOriginAddr, cEigrpAcksSuppressed=cEigrpAcksSuppressed, cEigrpPktsEnqueued=cEigrpPktsEnqueued, cEigrpUUcasts=cEigrpUUcasts, cEigrpXmitUnreliableQ=cEigrpXmitUnreliableQ, cEigrpSiaQueriesSent=cEigrpSiaQueriesSent, cEigrpRetrans=cEigrpRetrans, cEigrpRUcasts=cEigrpRUcasts, cEigrpRouteOriginAddrType=cEigrpRouteOriginAddrType, cEigrpLastSeq=cEigrpLastSeq, cEigrpMeanSrtt=cEigrpMeanSrtt, cEigrpDestNetType=cEigrpDestNetType, cEigrpMcastExcepts=cEigrpMcastExcepts, cEigrpAcksRcvd=cEigrpAcksRcvd, cEigrpUMcasts=cEigrpUMcasts, cEigrpDestNet=cEigrpDestNet, cEigrpHelloInterval=cEigrpHelloInterval, cEigrpTopoDataGroup=cEigrpTopoDataGroup, cEigrpUpTime=cEigrpUpTime, cEigrpPendingRoutes=cEigrpPendingRoutes, EigrpUpTimeString=EigrpUpTimeString, cEigrpInterfaceInfo=cEigrpInterfaceInfo, cEigrpVpnEntry=cEigrpVpnEntry, cEigrpTraffStatsTable=cEigrpTraffStatsTable, cEigrpAcksSent=cEigrpAcksSent, cEigrpRouteStuckInActive=cEigrpRouteStuckInActive, cEigrpPeerInfo=cEigrpPeerInfo, cEigrpPacingReliable=cEigrpPacingReliable, cEigrpTraffStatsEntry=cEigrpTraffStatsEntry, cEigrpVpnInfo=cEigrpVpnInfo, cEigrpCRpkts=cEigrpCRpkts, cEigrpPeerAddr=cEigrpPeerAddr, cEigrpFdistance=cEigrpFdistance, cEigrpPeerAddrType=cEigrpPeerAddrType, cEigrpTopologyInfo=cEigrpTopologyInfo, cEigrpTopoEntry=cEigrpTopoEntry, cEigrpXmitNextSerial=cEigrpXmitNextSerial, cEigrpUpdatesRcvd=cEigrpUpdatesRcvd, cEigrpHoldTime=cEigrpHoldTime, cEigrpRetries=cEigrpRetries, cEigrpTrafficStatsGroup=cEigrpTrafficStatsGroup, cEigrpReportDistanceWide=cEigrpReportDistanceWide, cEigrpHellosSent=cEigrpHellosSent, cEigrpNextHopInterface=cEigrpNextHopInterface, cEigrpAsRouterId=cEigrpAsRouterId, cEigrpOOSrvcd=cEigrpOOSrvcd, cEigrpVpnId=cEigrpVpnId, cEigrpNextSerial=cEigrpNextSerial, cEigrpNextHopAddress=cEigrpNextHopAddress, cEigrpDistance=cEigrpDistance, cEigrpInputQHighMark=cEigrpInputQHighMark, cEigrpAuthMode=cEigrpAuthMode, cEigrpActive=cEigrpActive, cEigrpPeerEntry=cEigrpPeerEntry, cEigrpInterfaceDataGroup=cEigrpInterfaceDataGroup, cEigrpMIBGroups=cEigrpMIBGroups, cEigrpTopoTable=cEigrpTopoTable, cEigrpUpdatesSent=cEigrpUpdatesSent, cEigrpNotificationsGroup=cEigrpNotificationsGroup, cEigrpDestSuccessors=cEigrpDestSuccessors, cEigrpAuthKeyChain=cEigrpAuthKeyChain, cEigrpHeadSerial=cEigrpHeadSerial, cEigrpStuckInActive=cEigrpStuckInActive, cEigrpVpnName=cEigrpVpnName, cEigrpVpnTable=cEigrpVpnTable, cEigrpQueriesSent=cEigrpQueriesSent, cEigrpVpnDataGroup=cEigrpVpnDataGroup, cEigrpRMcasts=cEigrpRMcasts, cEigrpRouteOriginType=cEigrpRouteOriginType, cEigrpQueriesRcvd=cEigrpQueriesRcvd, cEigrpMIBCompliance=cEigrpMIBCompliance, cEigrpHandle=cEigrpHandle, cEigrpFdistanceWide=cEigrpFdistanceWide, cEigrpMIBComplianceRev1=cEigrpMIBComplianceRev1, cEigrpAsNumber=cEigrpAsNumber, cEigrpHellosRcvd=cEigrpHellosRcvd, cEigrpNextHopAddressType=cEigrpNextHopAddressType, cEigrpSiaQueriesRcvd=cEigrpSiaQueriesRcvd, cEigrpRetransSent=cEigrpRetransSent, cEigrpDistanceWide=cEigrpDistanceWide, cEigrpPacingUnreliable=cEigrpPacingUnreliable, PYSNMP_MODULE_ID=ciscoEigrpMIB, EigrpVersionString=EigrpVersionString, cEigrpPeerCount=cEigrpPeerCount, cEigrpAsRouterIdType=cEigrpAsRouterIdType, cEigrpXmitDummies=cEigrpXmitDummies, cEigrpRepliesSent=cEigrpRepliesSent, cEigrpInterfaceTable=cEigrpInterfaceTable, cEigrpInterfaceEntry=cEigrpInterfaceEntry, cEigrpXmitReliableQ=cEigrpXmitReliableQ, cEigrpMIBCompliances=cEigrpMIBCompliances, cEigrpPeerTable=cEigrpPeerTable, cEigrpMIBObjects=cEigrpMIBObjects, cEigrpMIBConformance=cEigrpMIBConformance, cEigrpPeerIfIndex=cEigrpPeerIfIndex, cEigrpVersion=cEigrpVersion, cEigrpNbrDownEvent=cEigrpNbrDownEvent, cEigrpRepliesRcvd=cEigrpRepliesRcvd, cEigrpAuthFailureEvent=cEigrpAuthFailureEvent, cEigrpMIBNotifications=cEigrpMIBNotifications, cEigrpInputQDrops=cEigrpInputQDrops, cEigrpPeerDataGroup=cEigrpPeerDataGroup, cEigrpAsInfo=cEigrpAsInfo, cEigrpNbrCount=cEigrpNbrCount, cEigrpTopoRoutes=cEigrpTopoRoutes, cEigrpTopoDataGroupSupR01=cEigrpTopoDataGroupSupR01, cEigrpMFlowTimer=cEigrpMFlowTimer, cEigrpSrtt=cEigrpSrtt)
