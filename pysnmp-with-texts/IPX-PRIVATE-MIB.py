#
# PySNMP MIB module IPX-PRIVATE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/IPX-PRIVATE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:56:57 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
cjnProtocol, = mibBuilder.importSymbols("Cajun-ROOT", "cjnProtocol")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter32, Bits, Unsigned32, Gauge32, IpAddress, ObjectIdentity, Integer32, NotificationType, MibIdentifier, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, Counter64, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "Bits", "Unsigned32", "Gauge32", "IpAddress", "ObjectIdentity", "Integer32", "NotificationType", "MibIdentifier", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "Counter64", "iso")
DisplayString, RowStatus, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "RowStatus", "TextualConvention")
cjnIpx = ModuleIdentity((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 3))
if mibBuilder.loadTexts: cjnIpx.setLastUpdated('9904010000Z')
if mibBuilder.loadTexts: cjnIpx.setOrganization("Lucent's Concord Technology Center (CTC)")
if mibBuilder.loadTexts: cjnIpx.setContactInfo('Marc Cochran -- mcochran@lucent.com')
if mibBuilder.loadTexts: cjnIpx.setDescription('Cajun IPX Routing Private MIB')
class NetNumber(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(4, 4)
    fixedLength = 4

class NodeNumber(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

class ServiceType(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(2, 2)
    fixedLength = 2

class ServiceName(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(1, 47)

class ServiceSocket(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(2, 2)
    fixedLength = 2

cjnIpxGlobalGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 3, 1))
cjnIpxEnabled = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cjnIpxEnabled.setStatus('current')
if mibBuilder.loadTexts: cjnIpxEnabled.setDescription('Enable / Disable IPX Routing on this system.')
cjnIpxGlobalStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 3, 4))
cjnIpxInReceives = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 3, 4, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnIpxInReceives.setStatus('current')
if mibBuilder.loadTexts: cjnIpxInReceives.setDescription('The number of received IPX packets, including those received in error.')
cjnIpxInDelivers = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 3, 4, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnIpxInDelivers.setStatus('current')
if mibBuilder.loadTexts: cjnIpxInDelivers.setDescription('The number of received IPX packets delivered locally.')
cjnIpxForwarded = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 3, 4, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnIpxForwarded.setStatus('current')
if mibBuilder.loadTexts: cjnIpxForwarded.setDescription('The number of received IPX packets forwarded.')
cjnIpxNetBIOSReceives = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 3, 4, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnIpxNetBIOSReceives.setStatus('current')
if mibBuilder.loadTexts: cjnIpxNetBIOSReceives.setDescription('The number of received IPX NetBIOS packets.')
cjnIpxInDiscards = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 3, 4, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnIpxInDiscards.setStatus('current')
if mibBuilder.loadTexts: cjnIpxInDiscards.setDescription('The number of IPX packets received but discarded due to reasons other than those accounted for by cjnIpxInHdrErrors and cjnIpxInUnknownSockets.')
cjnIpxInHdrErrors = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 3, 4, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnIpxInHdrErrors.setStatus('current')
if mibBuilder.loadTexts: cjnIpxInHdrErrors.setDescription('The number of IPX packets discarded due to errors in their headers, including any IPX packet with a size less than the minimum of 30 bytes.')
cjnIpxInUnknownSockets = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 3, 4, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnIpxInUnknownSockets.setStatus('current')
if mibBuilder.loadTexts: cjnIpxInUnknownSockets.setDescription('The number of IPX packets discarded because the destination socket was not open.')
cjnIpxInTooManyHops = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 3, 4, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnIpxInTooManyHops.setStatus('current')
if mibBuilder.loadTexts: cjnIpxInTooManyHops.setDescription('The number of IPX packets discarded due to exceeding the maximum hop count.')
cjnIpxInBadChecksums = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 3, 4, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnIpxInBadChecksums.setStatus('current')
if mibBuilder.loadTexts: cjnIpxInBadChecksums.setDescription('The number of IPX packets discarded due to having an incorrect checksum.')
cjnIpxOutRequests = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 3, 4, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnIpxOutRequests.setStatus('current')
if mibBuilder.loadTexts: cjnIpxOutRequests.setDescription('The number of IPX packets supplied locally for transmission, not including any packets counted in cjnIpxForwarded.')
cjnIpxOutPackets = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 3, 4, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnIpxOutPackets.setStatus('current')
if mibBuilder.loadTexts: cjnIpxOutPackets.setDescription('The number of IPX packets transmitted.')
cjnIpxOutDiscards = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 3, 4, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnIpxOutDiscards.setStatus('current')
if mibBuilder.loadTexts: cjnIpxOutDiscards.setDescription('The number of outgoing IPX packets discarded.')
cjnIpxOutNoRoutes = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 3, 4, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnIpxOutNoRoutes.setStatus('current')
if mibBuilder.loadTexts: cjnIpxOutNoRoutes.setDescription('The number of times an IPX packet, either received or supplied locally for transmission, could not be transmitted because no route to the destination was found.')
cjnIpxInPingRequests = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 3, 4, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnIpxInPingRequests.setStatus('current')
if mibBuilder.loadTexts: cjnIpxInPingRequests.setDescription('The number of received ping requests.')
cjnIpxInPingReplies = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 3, 4, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnIpxInPingReplies.setStatus('current')
if mibBuilder.loadTexts: cjnIpxInPingReplies.setDescription('The number of received ping replies.')
cjnIpxOutPingRequests = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 3, 4, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnIpxOutPingRequests.setStatus('current')
if mibBuilder.loadTexts: cjnIpxOutPingRequests.setDescription('The number of transmitted ping requests.')
cjnIpxOutPingReplies = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 3, 4, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnIpxOutPingReplies.setStatus('current')
if mibBuilder.loadTexts: cjnIpxOutPingReplies.setDescription('The number of transmitted ping replies.')
cjnIpxGlobalStatsReset = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 3, 4, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cjnIpxGlobalStatsReset.setStatus('current')
if mibBuilder.loadTexts: cjnIpxGlobalStatsReset.setDescription('When set to the value enable (1) all IPX Global statistics are reset to zero after which the value of this MIB object returns to disable(2).')
cjnIpxRouteGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 3, 5))
cjnIpxMaxRoutes = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 3, 5, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10240)).clone(2048)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cjnIpxMaxRoutes.setStatus('current')
if mibBuilder.loadTexts: cjnIpxMaxRoutes.setDescription('Specify the maximum number of routes that can be stored in the IPX route table.')
cjnIpxDefaultRouteEnabled = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 3, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cjnIpxDefaultRouteEnabled.setStatus('current')
if mibBuilder.loadTexts: cjnIpxDefaultRouteEnabled.setDescription('Enable or disable IPX routing using a default route (if one is known).')
cjnIpxNumRoutes = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 3, 5, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnIpxNumRoutes.setStatus('current')
if mibBuilder.loadTexts: cjnIpxNumRoutes.setDescription('The number of routes.')
cjnIpxPeakNumRoutes = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 3, 5, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnIpxPeakNumRoutes.setStatus('current')
if mibBuilder.loadTexts: cjnIpxPeakNumRoutes.setDescription('The peak number of routes.')
cjnIpxRouteAddFailures = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 3, 5, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnIpxRouteAddFailures.setStatus('current')
if mibBuilder.loadTexts: cjnIpxRouteAddFailures.setDescription('The number of times an attempt to add a route failed, usually due to the number of routes exceeding cjnIpxMaxRoutes.')
cjnIpxStaticRouteGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 3, 5, 6))
cjnIpxStaticRouteTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 3, 5, 6, 1), )
if mibBuilder.loadTexts: cjnIpxStaticRouteTable.setStatus('current')
if mibBuilder.loadTexts: cjnIpxStaticRouteTable.setDescription('A list of Cajun IPX static route entries.')
cjnIpxStaticRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 3, 5, 6, 1, 1), ).setIndexNames((0, "IPX-PRIVATE-MIB", "cjnIpxStaticRouteNet"))
if mibBuilder.loadTexts: cjnIpxStaticRouteEntry.setStatus('current')
if mibBuilder.loadTexts: cjnIpxStaticRouteEntry.setDescription('A Cajun IPX static route instance.')
cjnIpxStaticRouteNet = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 3, 5, 6, 1, 1, 1), NetNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnIpxStaticRouteNet.setStatus('current')
if mibBuilder.loadTexts: cjnIpxStaticRouteNet.setDescription("The IPX network number of the route's destination.")
cjnIpxStaticRouteRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 3, 5, 6, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnIpxStaticRouteRowStatus.setStatus('current')
if mibBuilder.loadTexts: cjnIpxStaticRouteRowStatus.setDescription('The status of this row, by which new entries may be created, or old entries deleted from this table.')
cjnIpxStaticRouteIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 3, 5, 6, 1, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnIpxStaticRouteIfIndex.setStatus('current')
if mibBuilder.loadTexts: cjnIpxStaticRouteIfIndex.setDescription('The ifIndex value of the interface used to reach the next hop.')
cjnIpxStaticRouteNextHopNode = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 3, 5, 6, 1, 1, 4), NodeNumber()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnIpxStaticRouteNextHopNode.setStatus('current')
if mibBuilder.loadTexts: cjnIpxStaticRouteNextHopNode.setDescription('The node number of the next hop.')
cjnIpxStaticRouteTicks = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 3, 5, 6, 1, 1, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnIpxStaticRouteTicks.setStatus('current')
if mibBuilder.loadTexts: cjnIpxStaticRouteTicks.setDescription("The delay, in ticks, to reach the route's destination.")
cjnIpxStaticRouteHops = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 3, 5, 6, 1, 1, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnIpxStaticRouteHops.setStatus('current')
if mibBuilder.loadTexts: cjnIpxStaticRouteHops.setDescription("The number of hops necessary to reach the route's destination.")
cjnIpxRouteTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 3, 5, 7), )
if mibBuilder.loadTexts: cjnIpxRouteTable.setStatus('current')
if mibBuilder.loadTexts: cjnIpxRouteTable.setDescription('A list of Cajun IPX route entries.')
cjnIpxRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 3, 5, 7, 1), ).setIndexNames((0, "IPX-PRIVATE-MIB", "cjnIpxRouteNet"))
if mibBuilder.loadTexts: cjnIpxRouteEntry.setStatus('current')
if mibBuilder.loadTexts: cjnIpxRouteEntry.setDescription('A Cajun IPX route instance.')
cjnIpxRouteNet = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 3, 5, 7, 1, 1), NetNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnIpxRouteNet.setStatus('current')
if mibBuilder.loadTexts: cjnIpxRouteNet.setDescription("The IPX network number of the route's destination.")
cjnIpxRouteRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 3, 5, 7, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnIpxRouteRowStatus.setStatus('current')
if mibBuilder.loadTexts: cjnIpxRouteRowStatus.setDescription('The status of this row, by which entries may ONLY be deleted from this table.')
cjnIpxRouteIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 3, 5, 7, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnIpxRouteIfIndex.setStatus('current')
if mibBuilder.loadTexts: cjnIpxRouteIfIndex.setDescription('The ifIndex value of the interface used to reach the next hop.')
cjnIpxRouteNextHopNode = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 3, 5, 7, 1, 4), NodeNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnIpxRouteNextHopNode.setStatus('current')
if mibBuilder.loadTexts: cjnIpxRouteNextHopNode.setDescription('The node number of the next hop.')
cjnIpxRouteTicks = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 3, 5, 7, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnIpxRouteTicks.setStatus('current')
if mibBuilder.loadTexts: cjnIpxRouteTicks.setDescription("The delay, in ticks, to reach the route's destination.")
cjnIpxRouteHops = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 3, 5, 7, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnIpxRouteHops.setStatus('current')
if mibBuilder.loadTexts: cjnIpxRouteHops.setDescription("The number of hops necessary to reach the route's destination.")
cjnIpxRouteProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 3, 5, 7, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("local", 1), ("rip", 2), ("static", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnIpxRouteProtocol.setStatus('current')
if mibBuilder.loadTexts: cjnIpxRouteProtocol.setDescription('The routing protocol from which knowledge of this destination was obtained.')
cjnIpxServicesGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 3, 6))
cjnIpxMaxServices = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 3, 6, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10240)).clone(2048)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cjnIpxMaxServices.setStatus('current')
if mibBuilder.loadTexts: cjnIpxMaxServices.setDescription('Specify the maximum number of services that can be stored in the IPX service table.')
cjnIpxNumServices = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 3, 6, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnIpxNumServices.setStatus('current')
if mibBuilder.loadTexts: cjnIpxNumServices.setDescription('The number of IPX services.')
cjnIpxPeakNumServices = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 3, 6, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnIpxPeakNumServices.setStatus('current')
if mibBuilder.loadTexts: cjnIpxPeakNumServices.setDescription('The peak number of services.')
cjnIpxServiceAddFailures = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 3, 6, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnIpxServiceAddFailures.setStatus('current')
if mibBuilder.loadTexts: cjnIpxServiceAddFailures.setDescription('The number of times an attempt to add a service failed, usually due to the number of services exceeding cjnIpxMaxServices.')
cjnIpxStaticServiceGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 3, 6, 5))
cjnIpxStaticServiceTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 3, 6, 5, 1), )
if mibBuilder.loadTexts: cjnIpxStaticServiceTable.setStatus('current')
if mibBuilder.loadTexts: cjnIpxStaticServiceTable.setDescription('A list of Cajun IPX static service entries.')
cjnIpxStaticServiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 3, 6, 5, 1, 1), ).setIndexNames((0, "IPX-PRIVATE-MIB", "cjnIpxStaticServiceType"), (0, "IPX-PRIVATE-MIB", "cjnIpxStaticServiceName"))
if mibBuilder.loadTexts: cjnIpxStaticServiceEntry.setStatus('current')
if mibBuilder.loadTexts: cjnIpxStaticServiceEntry.setDescription('A Cajun IPX static service instance.')
cjnIpxStaticServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 3, 6, 5, 1, 1, 1), ServiceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnIpxStaticServiceType.setStatus('current')
if mibBuilder.loadTexts: cjnIpxStaticServiceType.setDescription('The service type.')
cjnIpxStaticServiceName = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 3, 6, 5, 1, 1, 2), ServiceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnIpxStaticServiceName.setStatus('current')
if mibBuilder.loadTexts: cjnIpxStaticServiceName.setDescription('The service name.')
cjnIpxStaticServiceRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 3, 6, 5, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnIpxStaticServiceRowStatus.setStatus('current')
if mibBuilder.loadTexts: cjnIpxStaticServiceRowStatus.setDescription('The status of this row, by which new entries may be created, or old entries deleted from this table.')
cjnIpxStaticServiceNet = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 3, 6, 5, 1, 1, 4), NetNumber()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnIpxStaticServiceNet.setStatus('current')
if mibBuilder.loadTexts: cjnIpxStaticServiceNet.setDescription('The IPX network number portion of the IPX address of the service.')
cjnIpxStaticServiceNode = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 3, 6, 5, 1, 1, 5), NodeNumber()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnIpxStaticServiceNode.setStatus('current')
if mibBuilder.loadTexts: cjnIpxStaticServiceNode.setDescription('The node portion of the IPX address of the service.')
cjnIpxStaticServiceSocket = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 3, 6, 5, 1, 1, 6), ServiceSocket()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnIpxStaticServiceSocket.setStatus('current')
if mibBuilder.loadTexts: cjnIpxStaticServiceSocket.setDescription('The socket portion of the IPX address of the service.')
cjnIpxStaticServiceIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 3, 6, 5, 1, 1, 7), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnIpxStaticServiceIfIndex.setStatus('current')
if mibBuilder.loadTexts: cjnIpxStaticServiceIfIndex.setDescription('The ifIndex value of the interface used to reach the service.')
cjnIpxStaticServiceNextHopNode = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 3, 6, 5, 1, 1, 8), NodeNumber()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnIpxStaticServiceNextHopNode.setStatus('current')
if mibBuilder.loadTexts: cjnIpxStaticServiceNextHopNode.setDescription('The IPX node number of the next hop.')
cjnIpxStaticServiceHops = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 3, 6, 5, 1, 1, 9), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnIpxStaticServiceHops.setStatus('current')
if mibBuilder.loadTexts: cjnIpxStaticServiceHops.setDescription('The number of hops to the service.')
cjnIpxServiceTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 3, 6, 6), )
if mibBuilder.loadTexts: cjnIpxServiceTable.setStatus('current')
if mibBuilder.loadTexts: cjnIpxServiceTable.setDescription('A list of Cajun IPX service entries.')
cjnIpxServiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 3, 6, 6, 1), ).setIndexNames((0, "IPX-PRIVATE-MIB", "cjnIpxServiceType"), (0, "IPX-PRIVATE-MIB", "cjnIpxServiceName"))
if mibBuilder.loadTexts: cjnIpxServiceEntry.setStatus('current')
if mibBuilder.loadTexts: cjnIpxServiceEntry.setDescription('A Cajun IPX service instance.')
cjnIpxServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 3, 6, 6, 1, 1), ServiceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnIpxServiceType.setStatus('current')
if mibBuilder.loadTexts: cjnIpxServiceType.setDescription('The service type.')
cjnIpxServiceName = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 3, 6, 6, 1, 2), ServiceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnIpxServiceName.setStatus('current')
if mibBuilder.loadTexts: cjnIpxServiceName.setDescription('The service name.')
cjnIpxServiceRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 3, 6, 6, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnIpxServiceRowStatus.setStatus('current')
if mibBuilder.loadTexts: cjnIpxServiceRowStatus.setDescription('The status of this row, by which entries may ONLY be deleted from this table.')
cjnIpxServiceNet = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 3, 6, 6, 1, 4), NetNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnIpxServiceNet.setStatus('current')
if mibBuilder.loadTexts: cjnIpxServiceNet.setDescription('The IPX network number portion of the IPX address of the service.')
cjnIpxServiceNode = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 3, 6, 6, 1, 5), NodeNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnIpxServiceNode.setStatus('current')
if mibBuilder.loadTexts: cjnIpxServiceNode.setDescription('The node portion of the IPX address of the service.')
cjnIpxServiceSocket = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 3, 6, 6, 1, 6), ServiceSocket()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnIpxServiceSocket.setStatus('current')
if mibBuilder.loadTexts: cjnIpxServiceSocket.setDescription('The socket portion of the IPX address of the service.')
cjnIpxServiceIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 3, 6, 6, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnIpxServiceIfIndex.setStatus('current')
if mibBuilder.loadTexts: cjnIpxServiceIfIndex.setDescription('The ifIndex value of the interface used to reach the service.')
cjnIpxServiceNextHopNode = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 3, 6, 6, 1, 8), NodeNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnIpxServiceNextHopNode.setStatus('current')
if mibBuilder.loadTexts: cjnIpxServiceNextHopNode.setDescription('The IPX node number of the next hop.')
cjnIpxServiceHops = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 3, 6, 6, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnIpxServiceHops.setStatus('current')
if mibBuilder.loadTexts: cjnIpxServiceHops.setDescription('The number of hops to the service.')
cjnIpxServiceProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 3, 6, 6, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sap", 1), ("static", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnIpxServiceProtocol.setStatus('current')
if mibBuilder.loadTexts: cjnIpxServiceProtocol.setDescription('The protocol from which knowledge of this service was obtained.')
mibBuilder.exportSymbols("IPX-PRIVATE-MIB", cjnIpxStaticServiceRowStatus=cjnIpxStaticServiceRowStatus, cjnIpxRouteNet=cjnIpxRouteNet, cjnIpxStaticRouteTicks=cjnIpxStaticRouteTicks, cjnIpxInDelivers=cjnIpxInDelivers, cjnIpxRouteHops=cjnIpxRouteHops, cjnIpxOutNoRoutes=cjnIpxOutNoRoutes, cjnIpxRouteIfIndex=cjnIpxRouteIfIndex, cjnIpxStaticRouteHops=cjnIpxStaticRouteHops, cjnIpxServiceIfIndex=cjnIpxServiceIfIndex, cjnIpxStaticServiceTable=cjnIpxStaticServiceTable, cjnIpxServiceName=cjnIpxServiceName, cjnIpxStaticServiceType=cjnIpxStaticServiceType, cjnIpxRouteNextHopNode=cjnIpxRouteNextHopNode, cjnIpxStaticRouteTable=cjnIpxStaticRouteTable, cjnIpxRouteAddFailures=cjnIpxRouteAddFailures, cjnIpxServiceProtocol=cjnIpxServiceProtocol, cjnIpxServiceTable=cjnIpxServiceTable, cjnIpxInHdrErrors=cjnIpxInHdrErrors, cjnIpx=cjnIpx, cjnIpxRouteProtocol=cjnIpxRouteProtocol, cjnIpxStaticServiceNet=cjnIpxStaticServiceNet, cjnIpxInReceives=cjnIpxInReceives, PYSNMP_MODULE_ID=cjnIpx, NetNumber=NetNumber, cjnIpxGlobalStatsReset=cjnIpxGlobalStatsReset, cjnIpxServiceEntry=cjnIpxServiceEntry, cjnIpxOutRequests=cjnIpxOutRequests, cjnIpxNetBIOSReceives=cjnIpxNetBIOSReceives, cjnIpxGlobalStatsGroup=cjnIpxGlobalStatsGroup, cjnIpxServiceAddFailures=cjnIpxServiceAddFailures, cjnIpxStaticRouteGroup=cjnIpxStaticRouteGroup, cjnIpxStaticServiceHops=cjnIpxStaticServiceHops, cjnIpxStaticRouteIfIndex=cjnIpxStaticRouteIfIndex, cjnIpxInPingReplies=cjnIpxInPingReplies, ServiceType=ServiceType, cjnIpxPeakNumRoutes=cjnIpxPeakNumRoutes, cjnIpxMaxServices=cjnIpxMaxServices, cjnIpxRouteGroup=cjnIpxRouteGroup, cjnIpxNumServices=cjnIpxNumServices, cjnIpxServiceRowStatus=cjnIpxServiceRowStatus, cjnIpxOutDiscards=cjnIpxOutDiscards, cjnIpxStaticRouteNextHopNode=cjnIpxStaticRouteNextHopNode, cjnIpxOutPackets=cjnIpxOutPackets, cjnIpxOutPingReplies=cjnIpxOutPingReplies, cjnIpxStaticServiceIfIndex=cjnIpxStaticServiceIfIndex, cjnIpxRouteEntry=cjnIpxRouteEntry, cjnIpxStaticServiceNode=cjnIpxStaticServiceNode, cjnIpxNumRoutes=cjnIpxNumRoutes, cjnIpxDefaultRouteEnabled=cjnIpxDefaultRouteEnabled, cjnIpxStaticRouteRowStatus=cjnIpxStaticRouteRowStatus, cjnIpxStaticServiceEntry=cjnIpxStaticServiceEntry, cjnIpxStaticServiceName=cjnIpxStaticServiceName, cjnIpxInTooManyHops=cjnIpxInTooManyHops, cjnIpxInDiscards=cjnIpxInDiscards, cjnIpxStaticServiceGroup=cjnIpxStaticServiceGroup, cjnIpxInUnknownSockets=cjnIpxInUnknownSockets, cjnIpxGlobalGroup=cjnIpxGlobalGroup, cjnIpxForwarded=cjnIpxForwarded, cjnIpxServicesGroup=cjnIpxServicesGroup, cjnIpxEnabled=cjnIpxEnabled, cjnIpxServiceSocket=cjnIpxServiceSocket, ServiceSocket=ServiceSocket, cjnIpxStaticRouteEntry=cjnIpxStaticRouteEntry, cjnIpxStaticServiceSocket=cjnIpxStaticServiceSocket, cjnIpxServiceType=cjnIpxServiceType, cjnIpxStaticRouteNet=cjnIpxStaticRouteNet, NodeNumber=NodeNumber, cjnIpxInBadChecksums=cjnIpxInBadChecksums, cjnIpxServiceNet=cjnIpxServiceNet, cjnIpxMaxRoutes=cjnIpxMaxRoutes, ServiceName=ServiceName, cjnIpxRouteRowStatus=cjnIpxRouteRowStatus, cjnIpxRouteTicks=cjnIpxRouteTicks, cjnIpxStaticServiceNextHopNode=cjnIpxStaticServiceNextHopNode, cjnIpxServiceHops=cjnIpxServiceHops, cjnIpxInPingRequests=cjnIpxInPingRequests, cjnIpxRouteTable=cjnIpxRouteTable, cjnIpxServiceNode=cjnIpxServiceNode, cjnIpxOutPingRequests=cjnIpxOutPingRequests, cjnIpxPeakNumServices=cjnIpxPeakNumServices, cjnIpxServiceNextHopNode=cjnIpxServiceNextHopNode)
