#
# PySNMP MIB module CISCO-WAN-NCDP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-WAN-NCDP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:20:37 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
ifIndex, InterfaceIndexOrZero = mibBuilder.importSymbols("IF-MIB", "ifIndex", "InterfaceIndexOrZero")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
Counter64, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, IpAddress, Counter32, TimeTicks, NotificationType, Unsigned32, Gauge32, Integer32, MibIdentifier, Bits, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "IpAddress", "Counter32", "TimeTicks", "NotificationType", "Unsigned32", "Gauge32", "Integer32", "MibIdentifier", "Bits", "iso")
TimeStamp, RowStatus, DisplayString, TruthValue, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TimeStamp", "RowStatus", "DisplayString", "TruthValue", "TextualConvention")
ciscoWanNcdpMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 223))
ciscoWanNcdpMIB.setRevisions(('2001-11-07 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoWanNcdpMIB.setRevisionsDescriptions(('Initial version of the MIB.',))
if mibBuilder.loadTexts: ciscoWanNcdpMIB.setLastUpdated('200111070000Z')
if mibBuilder.loadTexts: ciscoWanNcdpMIB.setOrganization('Cisco System Inc.')
if mibBuilder.loadTexts: ciscoWanNcdpMIB.setContactInfo(' Cisco Systems Customer Service Postal: 170 West Tasman Drive, San Jose CA 95134-1706. USA Tel: +1 800 553-NETS E-mail: cs-atm@ciscoWAN.com')
if mibBuilder.loadTexts: ciscoWanNcdpMIB.setDescription("This MIB module is intended for the management of network clock distribution and the Network Clock Distribution Protocol (NCDP) in Cisco MGX ATM switches. This MIB allows enabling automatic network clock configuration and distribution as well as configuration of manual clock sources. NCDP allows automatic distribution of network clocking sources in the network. A spanning network clock distribution tree is constructed by each node in the network and each node is synchonized to one single 'master' clock reference. A source of network clock for the device may be an oscillator local to the device or a Building Integrated Timing Supply (BITS) port or an interface that supports synchronous clock recovery. An 'index'('cwnClockSourceIndex') is assigned by the NCDP protocol entity in the managed system to identify each available source of network clock on the managed system.")
cwnMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 223, 1))
cwnGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 223, 1, 1))
cwnClockSource = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 223, 1, 2))
cwnManualSource = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 223, 1, 3))
cwnAtmSource = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 223, 1, 4))
cwnAtmInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 223, 1, 5))
class ClockStratum(TextualConvention, Integer32):
    reference = "American National Standards Institute, ANSI T1.101, 'Synchronization Interface for Digital Networks'. Bell Communications Research, GR-436-CORE, 'Digital Network Synchronization Plan'."
    description = 'The stratum level associated with a source of network clock or a device.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("other", 1), ("s1", 2), ("s2e", 3), ("s2", 4), ("s3e", 5), ("s3", 6), ("s4e", 7), ("s4", 8))

class ClockHealthStatus(TextualConvention, Integer32):
    description = "The health of a source of network clock. A value of 'good' indicates that a given source of network clock is known by the managed system to be good. This indicates the managed system was able to 'lock' onto the clock source. A value of 'bad' indicates that a given source of network clock is known by the managed system to be bad. This indicates the managed system was not able to 'lock' onto the clock source. A value of 'unknown' indicates that the health of the source of network clock is unknown to the managed system. This indicates the managed system has not tried to 'lock' onto the clock source."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("good", 1), ("bad", 2), ("unknown", 3))

class ClockSourceIndex(TextualConvention, Integer32):
    description = "An 'index' assigned by the device that uniquely identifies an available clock source on the device."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 2147483647)

cwnDistributionMethod = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 223, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ncdp", 1), ("manual", 2))).clone('ncdp')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwnDistributionMethod.setStatus('current')
if mibBuilder.loadTexts: cwnDistributionMethod.setDescription("The method used to distribute network clock for the device. When the mode of operation is 'ncdp', this device participates in NCDP protocol. A single 'master' clock source will be identified as the clock source for this network as a result. The tables 'cwnAtmSourceTable' and 'cwnAtmInterfaceTable' are used in this mode. When the mode of operation is 'manual', the network clock source is statically configured in this device. The table 'cwnManualSourceTable' is used in this mode.")
cwnNodeStratum = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 223, 1, 1, 2), ClockStratum().clone('s2')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwnNodeStratum.setStatus('current')
if mibBuilder.loadTexts: cwnNodeStratum.setDescription("This variable contains the stratum level of the node. This object is only used if the distribution method is 'ncdp'.")
cwnMaxDiameter = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 223, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 255)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwnMaxDiameter.setStatus('current')
if mibBuilder.loadTexts: cwnMaxDiameter.setDescription("The maximum possible height of a network clock distribution tree in the network. This variable must be configured with the same value for all devices participating in NCDP within the network. This object is only used if the distribution method is 'ncdp'.")
cwnMessageInterval = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 223, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(75, 60000)).clone(500)).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwnMessageInterval.setStatus('current')
if mibBuilder.loadTexts: cwnMessageInterval.setDescription("The interval at which NCDP configuration PDUs ('Hellos') are to be generated. The message interval directly affects the convergence time of the NCDP algorithm. Convergence time is equal to the max network diameter * message interval + transmission delays + the time a configuration PDU is spent being processed in each device. Thus if transmission delays and processing delays are both close to 0, the convergence time is approximately ( max network diameter * message interval ) milliseconds. This object is only used if the distribution method is 'ncdp'.")
cwnHoldTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 223, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(75, 60000)).clone(500)).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwnHoldTime.setStatus('current')
if mibBuilder.loadTexts: cwnHoldTime.setDescription("The minimum delay between the transmission of two consecutive NCDP configuration PDUs on an interface. The value of this object should normally be set to match the value of cwnMessageInterval. If the value of this object is higher than the value of cwnMessageInterval, NCDP configuration PDUs will end up being propagated at the rate specified by the value of this object instead. This object is only used if the distribution method is 'ncdp'.")
cwnChangeReason = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 223, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("none", 2), ("lossOfLock", 3), ("lossOfActivity", 4), ("ncdpRestructure", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwnChangeReason.setStatus('current')
if mibBuilder.loadTexts: cwnChangeReason.setDescription("The reason for the most recent change of a source of network clock, as indicated by the change in the value of 'ciscoWanChangeTimeStamp'. 'none' indicates that the source of network clock has not changed. 'lossOfLock' indicates that the clock source was changed because the network clocking hardware lost lock on the previous network clock source. 'lossOfActivity' indicates that the clock source was changed because the network clocking hardware detected a loss of activity on the previous network clock source. 'ncdpRestructure' indicates that the NCDP entity has changed the clock source as a result of a network-wide network clock distribution tree restructuring process. When the reason for a clock switchover is none of the above, the value of this object is 'other'.")
cwnChangeTimeStamp = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 223, 1, 1, 7), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwnChangeTimeStamp.setStatus('current')
if mibBuilder.loadTexts: cwnChangeTimeStamp.setDescription('The value of sysUpTime when the most recent change of a source of network clock occurred. A value of 0 indicates that no such event has occurred since the instantiation of this object.')
cwnRootClockSource = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 223, 1, 1, 8), ClockSourceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwnRootClockSource.setStatus('current')
if mibBuilder.loadTexts: cwnRootClockSource.setDescription("The 'index' of the network clock source that is actively supplying network clock within the device. When the value of this variable is used as an index into the 'cwnAtmSourceTable' and the indicated clock source has 'cwnAtmSourceBestClockSource' with value 'true', then the indicated clock source is the root of some clock distribution tree.")
cwnClockSourceTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 223, 1, 2, 1), )
if mibBuilder.loadTexts: cwnClockSourceTable.setStatus('current')
if mibBuilder.loadTexts: cwnClockSourceTable.setDescription('A table of network clock sources available to the managed system.')
cwnClockSourceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 223, 1, 2, 1, 1), ).setIndexNames((0, "CISCO-WAN-NCDP-MIB", "cwnClockSourceIndex"))
if mibBuilder.loadTexts: cwnClockSourceEntry.setStatus('current')
if mibBuilder.loadTexts: cwnClockSourceEntry.setDescription("An entry in this table contains an available clock source on the device. A source of network clock for the device may be an oscillator local to the device or a Building Integrated Timing Supply (BITS) port or an interface that supports synchronous clock recovery. An index is assigned by the device to uniquely identify each of the source of networking clock on the managed system. A description is associated with each clock source. This description gives detail information of this clock source. The management station should poll this table to obtain these 'cwnClockSourceIndex' and use these indexes to configure clock source in 'cwnManualSourceTable' or 'cwnAtmSourceTable'.")
cwnClockSourceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 223, 1, 2, 1, 1, 1), ClockSourceIndex())
if mibBuilder.loadTexts: cwnClockSourceIndex.setStatus('current')
if mibBuilder.loadTexts: cwnClockSourceIndex.setDescription("An 'index' assigned by the device which uniquely identifies an available clock source on the device. ")
cwnClockSourceDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 223, 1, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwnClockSourceDesc.setStatus('current')
if mibBuilder.loadTexts: cwnClockSourceDesc.setDescription('A description of the clock source associated with this entry. The description contains port/type information of this clock source. The format of this entry is implementation specific.')
cwnInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 223, 1, 2, 1, 1, 3), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwnInterfaceIndex.setStatus('current')
if mibBuilder.loadTexts: cwnInterfaceIndex.setDescription("If this variable has a non-zero value, this is the 'ifIndex' associated with this entry. The 'ifIndex' identifies an ATM Virtual Interface (ifType 'atmVirtual(149)'). If this variable has a value of 'zero', this entry is not associated with an 'ifIndex' and its type is identified by 'cwnOtherClockSource'.")
cwnOtherClockSource = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 223, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("internalOscillator", 2), ("bitsClockE1", 3), ("bitsClockT1", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwnOtherClockSource.setStatus('current')
if mibBuilder.loadTexts: cwnOtherClockSource.setDescription("This variable identifies the type of a clock source that does not have an 'ifIndex' associated. This value is 'none(1) if 'cwnInterfaceIndex' contains a non-zero value. The value 'internalOscillator(1) indicates a clock source is an oscillator local to the device. The value 'bitsClockE1(2) indicates a Building Integrated Timing Supply (BITS) clock source on an E1 port. The value 'bitsClockT1(3) indicates a BITS clock source on a T1 port.")
cwnManualSourceTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 223, 1, 3, 1), )
if mibBuilder.loadTexts: cwnManualSourceTable.setStatus('current')
if mibBuilder.loadTexts: cwnManualSourceTable.setDescription('A table of network clock sources to be manually configured for the managed system.')
cwnManualSourceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 223, 1, 3, 1, 1), ).setIndexNames((0, "CISCO-WAN-NCDP-MIB", "cwnManualSourcePriority"))
if mibBuilder.loadTexts: cwnManualSourceEntry.setStatus('current')
if mibBuilder.loadTexts: cwnManualSourceEntry.setDescription("When the value of cwnDistributionMethod is 'manual', the managed system uses this table to select a source of network clock for the managed system from the entries in 'cwnClockSourceTable'. The management system uses 'cwnClockSourceIndex' to configure the associated clock source to be a primary, secondary or default clock source. A source of network clock for the device may be an oscillator local to the device or a Building Integrated Timing Supply (BITS) port or an interface that supports synchronous clock recovery. When the managed system initializes it creates a row for the device's default source of network clock, (the entry having 'cwnManualSourcePriority' with value 'default'). Only read operations is allowed on the columnar objects in this row. Other rows are created or destroyed by a management station or through the device's local management interface when a source of network clock is configured or removed. A row is not made active until a valid value for 'cwnManualSourceIndex' is supplied. A management station may perform a write operation on any columnar object while the row is active or not in service. ")
cwnManualSourcePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 223, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("primary", 1), ("secondary", 2), ("default", 3))))
if mibBuilder.loadTexts: cwnManualSourcePriority.setStatus('current')
if mibBuilder.loadTexts: cwnManualSourcePriority.setDescription('A value used to configure an available network clock source to be primary, secondary or default manual clock source.')
cwnManualSourceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 223, 1, 3, 1, 1, 2), ClockSourceIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwnManualSourceIndex.setStatus('current')
if mibBuilder.loadTexts: cwnManualSourceIndex.setDescription("An 'index' value used to identify the primary, secondary ,or default manual clock source.")
cwnManualClockHealth = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 223, 1, 3, 1, 1, 3), ClockHealthStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwnManualClockHealth.setStatus('current')
if mibBuilder.loadTexts: cwnManualClockHealth.setDescription('The health of the clock source.')
cwnManualRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 223, 1, 3, 1, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwnManualRowStatus.setStatus('current')
if mibBuilder.loadTexts: cwnManualRowStatus.setDescription('The status of this conceptual row.')
cwnAtmSourceTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 223, 1, 4, 1), )
if mibBuilder.loadTexts: cwnAtmSourceTable.setStatus('current')
if mibBuilder.loadTexts: cwnAtmSourceTable.setDescription('A table of configured network clock sources advertised by this managed system when using NCDP.')
cwnAtmSourceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 223, 1, 4, 1, 1), ).setIndexNames((0, "CISCO-WAN-NCDP-MIB", "cwnClockSourceIndex"))
if mibBuilder.loadTexts: cwnAtmSourceEntry.setStatus('current')
if mibBuilder.loadTexts: cwnAtmSourceEntry.setDescription("Network clock status for sources of network clock identified by 'cwnClockSourceIndex' and used by the managed system when the value of 'cwnDistributionMethod' is 'ncdp'. The managed device selects one entry in this table to advertise as the best available clock source for the device. Cooperating NCDP protocol entities select the best available clock source among those advertised within the cooperating group and build a clock distribution tree rooted at that clock source. When the value of 'cwnRootClockSource' is used as an index into this table and the indicated clock source has 'cwnAtmSourceBestClockSource' with value 'true' then the indicated clock source is the root of some clock distribution tree. If only one such root exists on all participating devices in the network, then it is the root of a network wide clock distribution tree. When the managed system initializes it creates a row for the device's default source of network clock. This row cannot be destroyed by a management station. Within this row a write operation is only allowed on the 'cwnAtmSourcePriority' object. The status of this row is always active. The default source can always be found by issuing a read operation on the row within 'cwnManualSourceTable' that has 'default' as the value of 'cwnManualSourcePriority'. The other rows are created or destroyed by a management station or through the device's local management interface when a source of network clock is configured or removed. The values of 'cwnAtmSourcePriority', 'cwnAtmSourceStratum' and 'cwnAtmSourcePRSReference' collectively describe a source of network clock. They are the three components of a vector used as an input to the NCDP algorithm to make clock source selection decisions.")
cwnAtmSourceBestClockSource = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 223, 1, 4, 1, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwnAtmSourceBestClockSource.setStatus('current')
if mibBuilder.loadTexts: cwnAtmSourceBestClockSource.setDescription('An indication of whether this is the best clock source being advertised.')
cwnAtmSourcePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 223, 1, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(128)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwnAtmSourcePriority.setStatus('current')
if mibBuilder.loadTexts: cwnAtmSourcePriority.setDescription("The network-wide priority of this clock source if configured as a source of network clock for NCDP. The highest priority clock source is that clock source having the lowest positive numeric value. The clock source with the highest priority is selected as the root of the clock distribution tree by the NCDP algorithm. If more that one clock source is configured with with the same priority the NCDP algorithm uses the value 'cwnAtmSourceStratum' as a tiebreaker.")
cwnAtmSourceStratum = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 223, 1, 4, 1, 1, 3), ClockStratum().clone('s2')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwnAtmSourceStratum.setStatus('current')
if mibBuilder.loadTexts: cwnAtmSourceStratum.setDescription("The stratum level associated with this clock source if configured as a source of network clock for NCDP. If the value of this object is used as a tiebreaker , the lower of the given values is the winner. If the values are the same, the value of 'cwnAtmSourcePRSReference' is used as a tiebreaker by the NCDP algorithm.")
cwnAtmSourcePRSReference = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 223, 1, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("internal", 1), ("external", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwnAtmSourcePRSReference.setStatus('current')
if mibBuilder.loadTexts: cwnAtmSourcePRSReference.setDescription("An value that identifies the Primary Reference Source that the network clock available from this source is traceable to if configured as a source of network clock for NCDP. The object takes the value 'internal' when the PRS for this source is an onboard oscillator local to the device. For any other cases the value 'external' is used. If the value of this object is used as a tiebreaker by the algorithm,'external' wins over 'internal'. All 'external' sources of network clock are assumed to be traceable to the same PRS by the NCDP protocol entity.")
cwnAtmSourceClockHealth = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 223, 1, 4, 1, 1, 5), ClockHealthStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwnAtmSourceClockHealth.setStatus('current')
if mibBuilder.loadTexts: cwnAtmSourceClockHealth.setDescription('The health of the clock source.')
cwnAtmSourceRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 223, 1, 4, 1, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwnAtmSourceRowStatus.setStatus('current')
if mibBuilder.loadTexts: cwnAtmSourceRowStatus.setDescription('The status of this conceptual row.')
cwnAtmInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 223, 1, 5, 1), )
if mibBuilder.loadTexts: cwnAtmInterfaceTable.setStatus('current')
if mibBuilder.loadTexts: cwnAtmInterfaceTable.setDescription("A table containing the status of NCDP on the device's ATM Network-to-Network(NNI) interfaces.")
cwnAtmInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 223, 1, 5, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cwnAtmInterfaceEntry.setStatus('current')
if mibBuilder.loadTexts: cwnAtmInterfaceEntry.setDescription("An entry in this table contains the status of NCDP on an ATM Netowrk-to-Network (NNI) interface. A row in this table is created by the managed system and disappears when the associated entity disappears. When a row is created all of the row objects are instantiated. Each entry identified by 'ifIndex' is of ifType 'atmvirtual(149)'. ")
cwnAtmInterfaceEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 223, 1, 5, 1, 1, 1), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwnAtmInterfaceEnable.setStatus('current')
if mibBuilder.loadTexts: cwnAtmInterfaceEnable.setDescription("An indication of whether NCDP is presently running on an ATM Network-to-Network interface. When NCDP is enabled for an interface, the interface is an active member of the clock distribution topology. After this object is instantiated by the agent the managed system initializes the value of this object to 'true'. By default, all Network-to-Network interfaces participate in NCDP until it's disabled by setting the value of this object to 'false'.")
cwnAtmInterfaceAdminWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 223, 1, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16777215)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwnAtmInterfaceAdminWeight.setStatus('current')
if mibBuilder.loadTexts: cwnAtmInterfaceAdminWeight.setDescription('A weight metric used by the NCDP protocol entity and associated with a physical interface that supports synchronous clock recovery. When NCDP is enabled for the physical interface the value of this object is used by NCDP algorithms during tree computations. The lower the administrative weight, the more attractive the given link is to the NCDP algorithm. If the weight of a link is changed, it can cause the NCDP protocol entity to reconstruct the clock distribution tree.')
cwnAtmInterfaceVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 223, 1, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwnAtmInterfaceVpi.setStatus('current')
if mibBuilder.loadTexts: cwnAtmInterfaceVpi.setDescription("The Virtual Path Identifier(VPI) value of the Virtual Channel Connection(VCC) supporting the NCDP entity at this ATM interface. If the values of 'cwnAtmInterfaceVpi' and 'cwnAtmInterfaceVci' are both equal to zero then the NCDP entity is not supported at this ATM interface.")
cwnAtmInterfaceVci = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 223, 1, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(34)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwnAtmInterfaceVci.setStatus('current')
if mibBuilder.loadTexts: cwnAtmInterfaceVci.setDescription("The Virtual Channel Identifier(VCI) value of the VCC supporting the NCDP entity at this ATM interface. If the values of 'cwnAtmInterfaceVpi' and 'cwnAtmInterfaceVci' are both equal to zero then the NCDP entity is not supported at this ATM interface.")
ciscoWanNcdpMIBNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 223, 2))
ciscoWanNcdpMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 223, 2, 0))
ciscoWanNcdpMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 223, 3))
ciscoWanNcdpMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 223, 3, 1))
ciscoWanNcdpMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 223, 3, 2))
ciscoWanMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 223, 3, 1, 1)).setObjects(("CISCO-WAN-NCDP-MIB", "ciscoWanNcdpGlobalGroup"), ("CISCO-WAN-NCDP-MIB", "ciscoWanNcdpClockSourceGroup"), ("CISCO-WAN-NCDP-MIB", "ciscoWanNcdpManualGroup"), ("CISCO-WAN-NCDP-MIB", "ciscoWanNcdpAtmGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoWanMIBCompliance = ciscoWanMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: ciscoWanMIBCompliance.setDescription('The compliance statement for SNMPv2 entities which implement network clock distribution methods and NCDP.')
ciscoWanNcdpGlobalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 223, 3, 2, 1)).setObjects(("CISCO-WAN-NCDP-MIB", "cwnDistributionMethod"), ("CISCO-WAN-NCDP-MIB", "cwnNodeStratum"), ("CISCO-WAN-NCDP-MIB", "cwnMaxDiameter"), ("CISCO-WAN-NCDP-MIB", "cwnMessageInterval"), ("CISCO-WAN-NCDP-MIB", "cwnHoldTime"), ("CISCO-WAN-NCDP-MIB", "cwnChangeReason"), ("CISCO-WAN-NCDP-MIB", "cwnChangeTimeStamp"), ("CISCO-WAN-NCDP-MIB", "cwnRootClockSource"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoWanNcdpGlobalGroup = ciscoWanNcdpGlobalGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoWanNcdpGlobalGroup.setDescription('This group contains global objects providing for management of network clock distribution and NCDP entities.')
ciscoWanNcdpClockSourceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 223, 3, 2, 2)).setObjects(("CISCO-WAN-NCDP-MIB", "cwnClockSourceDesc"), ("CISCO-WAN-NCDP-MIB", "cwnInterfaceIndex"), ("CISCO-WAN-NCDP-MIB", "cwnOtherClockSource"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoWanNcdpClockSourceGroup = ciscoWanNcdpClockSourceGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoWanNcdpClockSourceGroup.setDescription('This group contains the available clock source on the managed system.')
ciscoWanNcdpManualGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 223, 3, 2, 3)).setObjects(("CISCO-WAN-NCDP-MIB", "cwnManualSourceIndex"), ("CISCO-WAN-NCDP-MIB", "cwnManualClockHealth"), ("CISCO-WAN-NCDP-MIB", "cwnManualRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoWanNcdpManualGroup = ciscoWanNcdpManualGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoWanNcdpManualGroup.setDescription('This group contains objects for manual configuration of clock sources on the managed system.')
ciscoWanNcdpAtmGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 223, 3, 2, 4)).setObjects(("CISCO-WAN-NCDP-MIB", "cwnAtmSourceBestClockSource"), ("CISCO-WAN-NCDP-MIB", "cwnAtmSourcePriority"), ("CISCO-WAN-NCDP-MIB", "cwnAtmSourceStratum"), ("CISCO-WAN-NCDP-MIB", "cwnAtmSourcePRSReference"), ("CISCO-WAN-NCDP-MIB", "cwnAtmSourceClockHealth"), ("CISCO-WAN-NCDP-MIB", "cwnAtmSourceRowStatus"), ("CISCO-WAN-NCDP-MIB", "cwnAtmInterfaceEnable"), ("CISCO-WAN-NCDP-MIB", "cwnAtmInterfaceAdminWeight"), ("CISCO-WAN-NCDP-MIB", "cwnAtmInterfaceVpi"), ("CISCO-WAN-NCDP-MIB", "cwnAtmInterfaceVci"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoWanNcdpAtmGroup = ciscoWanNcdpAtmGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoWanNcdpAtmGroup.setDescription('This group contains objects for configuration of NCDP entity on an ATM platform.')
mibBuilder.exportSymbols("CISCO-WAN-NCDP-MIB", cwnMaxDiameter=cwnMaxDiameter, PYSNMP_MODULE_ID=ciscoWanNcdpMIB, cwnInterfaceIndex=cwnInterfaceIndex, cwnManualSource=cwnManualSource, cwnManualClockHealth=cwnManualClockHealth, ciscoWanNcdpMIBCompliances=ciscoWanNcdpMIBCompliances, cwnAtmSource=cwnAtmSource, ciscoWanNcdpMIBConformance=ciscoWanNcdpMIBConformance, cwnAtmInterfaceVci=cwnAtmInterfaceVci, ciscoWanNcdpMIBNotificationPrefix=ciscoWanNcdpMIBNotificationPrefix, cwnAtmSourceStratum=cwnAtmSourceStratum, ClockStratum=ClockStratum, cwnAtmInterface=cwnAtmInterface, cwnManualSourceEntry=cwnManualSourceEntry, cwnMIBObjects=cwnMIBObjects, cwnAtmSourceClockHealth=cwnAtmSourceClockHealth, cwnClockSourceEntry=cwnClockSourceEntry, cwnClockSource=cwnClockSource, ciscoWanMIBCompliance=ciscoWanMIBCompliance, cwnAtmInterfaceEnable=cwnAtmInterfaceEnable, cwnChangeReason=cwnChangeReason, cwnClockSourceIndex=cwnClockSourceIndex, ciscoWanNcdpManualGroup=ciscoWanNcdpManualGroup, cwnNodeStratum=cwnNodeStratum, cwnChangeTimeStamp=cwnChangeTimeStamp, cwnAtmInterfaceAdminWeight=cwnAtmInterfaceAdminWeight, ciscoWanNcdpClockSourceGroup=ciscoWanNcdpClockSourceGroup, cwnManualSourceIndex=cwnManualSourceIndex, cwnAtmSourceRowStatus=cwnAtmSourceRowStatus, cwnGlobal=cwnGlobal, cwnHoldTime=cwnHoldTime, cwnMessageInterval=cwnMessageInterval, cwnAtmInterfaceTable=cwnAtmInterfaceTable, cwnAtmSourcePRSReference=cwnAtmSourcePRSReference, cwnClockSourceTable=cwnClockSourceTable, cwnAtmInterfaceVpi=cwnAtmInterfaceVpi, cwnDistributionMethod=cwnDistributionMethod, cwnClockSourceDesc=cwnClockSourceDesc, cwnAtmSourcePriority=cwnAtmSourcePriority, ciscoWanNcdpAtmGroup=ciscoWanNcdpAtmGroup, ciscoWanNcdpMIB=ciscoWanNcdpMIB, cwnAtmSourceBestClockSource=cwnAtmSourceBestClockSource, cwnAtmInterfaceEntry=cwnAtmInterfaceEntry, cwnAtmSourceTable=cwnAtmSourceTable, cwnRootClockSource=cwnRootClockSource, cwnOtherClockSource=cwnOtherClockSource, ClockSourceIndex=ClockSourceIndex, ciscoWanNcdpGlobalGroup=ciscoWanNcdpGlobalGroup, cwnManualRowStatus=cwnManualRowStatus, cwnManualSourceTable=cwnManualSourceTable, ciscoWanNcdpMIBGroups=ciscoWanNcdpMIBGroups, ClockHealthStatus=ClockHealthStatus, cwnAtmSourceEntry=cwnAtmSourceEntry, ciscoWanNcdpMIBNotifications=ciscoWanNcdpMIBNotifications, cwnManualSourcePriority=cwnManualSourcePriority)
