#
# PySNMP MIB module ASCEND-SPARING-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ASCEND-SPARING-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:29:12 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
sparingGroup, = mibBuilder.importSymbols("ASCEND-MIB", "sparingGroup")
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ModuleIdentity, MibIdentifier, Integer32, Counter64, NotificationType, TimeTicks, Counter32, IpAddress, iso, ObjectIdentity, Bits, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "MibIdentifier", "Integer32", "Counter64", "NotificationType", "TimeTicks", "Counter32", "IpAddress", "iso", "ObjectIdentity", "Bits", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
sparingGlobalGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 30, 1))
sparingSlotGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 30, 2))
sparingIfGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 30, 3))
sparingSlotMode = MibScalar((1, 3, 6, 1, 4, 1, 529, 30, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("disable", 2), ("manual", 3), ("automatic", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sparingSlotMode.setStatus('mandatory')
if mibBuilder.loadTexts: sparingSlotMode.setDescription('The administrative mode of the overall slot sparing function')
sparingSlotTable = MibTable((1, 3, 6, 1, 4, 1, 529, 30, 2, 2), )
if mibBuilder.loadTexts: sparingSlotTable.setStatus('mandatory')
if mibBuilder.loadTexts: sparingSlotTable.setDescription('A table of slots with enabled sparing functionality. The slot is represented by a row in the table if its sparing capability is one of two: - being a spare - being able to be backed up by spare slot')
sparingSlotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 529, 30, 2, 2, 1), ).setIndexNames((0, "ASCEND-SPARING-MIB", "sparingSlotPrimaryIndex"), (0, "ASCEND-SPARING-MIB", "sparingSlotSparingIndex"))
if mibBuilder.loadTexts: sparingSlotEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sparingSlotEntry.setDescription('Entry holding information about an individual slot that has sparing support ')
sparingSlotPrimaryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 30, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sparingSlotPrimaryIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sparingSlotPrimaryIndex.setDescription('The slot number of the module being backed up by a spare. The index is the same as slotIndex.')
sparingSlotSparingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 30, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sparingSlotSparingIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sparingSlotSparingIndex.setDescription('The slot number of the slot that is the backup for sparingSlotPrimaryIndex. The index is the same as slotIndex.')
sparingSlotStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 30, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("standby", 1), ("fault", 2), ("active", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sparingSlotStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sparingSlotStatus.setDescription('The current sparing state.')
sparingSlotLastStatusChange = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 30, 2, 2, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sparingSlotLastStatusChange.setStatus('mandatory')
if mibBuilder.loadTexts: sparingSlotLastStatusChange.setDescription('System uptime at the time of the last sparingSlotStatus change. This value is 0 if no change of sparingSlotStatus was observed since reboot.')
sparingSlotLastChangeReason = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 30, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("manual", 2), ("automatic", 3), ("test", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sparingSlotLastChangeReason.setStatus('mandatory')
if mibBuilder.loadTexts: sparingSlotLastChangeReason.setDescription('The reason for last change in sparingSlotStatus.')
sparingSlotStatusChangeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 30, 2, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sparingSlotStatusChangeCount.setStatus('mandatory')
if mibBuilder.loadTexts: sparingSlotStatusChangeCount.setDescription('The number of changes in sparingSlotStatus since the last restart of the subsystem.')
sparingIfTable = MibTable((1, 3, 6, 1, 4, 1, 529, 30, 3, 2), )
if mibBuilder.loadTexts: sparingIfTable.setStatus('mandatory')
if mibBuilder.loadTexts: sparingIfTable.setDescription('A table of interfaces with enabled sparing functionality. The interface is represented by a row in the table if its sparing capability is one of two: - being a spare - being able to be backed up by spare interface.')
sparingIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 529, 30, 3, 2, 1), ).setIndexNames((0, "ASCEND-SPARING-MIB", "sparingIfPrimaryIndex"), (0, "ASCEND-SPARING-MIB", "sparingIfSparingIndex"))
if mibBuilder.loadTexts: sparingIfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sparingIfEntry.setDescription('Entry holding information about an individual interface that has sparing support')
sparingIfPrimaryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 30, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sparingIfPrimaryIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sparingIfPrimaryIndex.setDescription('The interface number being backed up by a spare. The sparingIfPrimaryIndex is the same as ifIndex.')
sparingIfSparingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 30, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sparingIfSparingIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sparingIfSparingIndex.setDescription('The interface number of the slot that is the backup for sparingIfPrimaryIndex. The sparingIfSparingIndex is the same as ifIndex.')
sparingIfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 30, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("standby", 1), ("fault", 2), ("active", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sparingIfStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sparingIfStatus.setDescription('The current sparing state.')
sparingIfLastStatusChange = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 30, 3, 2, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sparingIfLastStatusChange.setStatus('mandatory')
if mibBuilder.loadTexts: sparingIfLastStatusChange.setDescription('System uptime at the time of the last sparingIfStatus change. This value is 0 if no change of sparingIfStatus was observed since reboot.')
sparingIfLastChangeReason = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 30, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("manual", 2), ("automatic", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sparingIfLastChangeReason.setStatus('mandatory')
if mibBuilder.loadTexts: sparingIfLastChangeReason.setDescription('The reason for last change in sparingIfStatus.')
sparingIfStatusChangeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 30, 3, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sparingIfStatusChangeCount.setStatus('mandatory')
if mibBuilder.loadTexts: sparingIfStatusChangeCount.setDescription('The number of changes in sparingIfStatus since the last restart of the subsystem.')
mibBuilder.exportSymbols("ASCEND-SPARING-MIB", sparingIfStatusChangeCount=sparingIfStatusChangeCount, sparingIfLastChangeReason=sparingIfLastChangeReason, sparingIfSparingIndex=sparingIfSparingIndex, sparingIfEntry=sparingIfEntry, sparingSlotMode=sparingSlotMode, sparingSlotStatus=sparingSlotStatus, sparingSlotStatusChangeCount=sparingSlotStatusChangeCount, sparingSlotEntry=sparingSlotEntry, sparingIfTable=sparingIfTable, sparingSlotSparingIndex=sparingSlotSparingIndex, sparingGlobalGroup=sparingGlobalGroup, sparingIfLastStatusChange=sparingIfLastStatusChange, sparingSlotLastChangeReason=sparingSlotLastChangeReason, sparingSlotLastStatusChange=sparingSlotLastStatusChange, sparingSlotTable=sparingSlotTable, sparingSlotGroup=sparingSlotGroup, sparingIfGroup=sparingIfGroup, sparingSlotPrimaryIndex=sparingSlotPrimaryIndex, sparingIfPrimaryIndex=sparingIfPrimaryIndex, sparingIfStatus=sparingIfStatus)
