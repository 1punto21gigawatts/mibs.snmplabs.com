#
# PySNMP MIB module ADAPTEC-UNIVERSAL-STORAGE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ADAPTEC-UNIVERSAL-STORAGE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:13:28 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibIdentifier, NotificationType, Counter32, enterprises, Gauge32, ModuleIdentity, ObjectIdentity, IpAddress, iso, Integer32, Counter64, NotificationType, Bits, TimeTicks, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "NotificationType", "Counter32", "enterprises", "Gauge32", "ModuleIdentity", "ObjectIdentity", "IpAddress", "iso", "Integer32", "Counter64", "NotificationType", "Bits", "TimeTicks", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
adaptec = MibIdentifier((1, 3, 6, 1, 4, 1, 795))
universalStorage = MibIdentifier((1, 3, 6, 1, 4, 1, 795, 14))
ausMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 795, 14, 1))
ausMibStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 795, 14, 1, 100))
ausAggregatedController = MibIdentifier((1, 3, 6, 1, 4, 1, 795, 14, 1, 200))
ausController = MibIdentifier((1, 3, 6, 1, 4, 1, 795, 14, 1, 201))
ausControllerRelationship = MibIdentifier((1, 3, 6, 1, 4, 1, 795, 14, 1, 202))
ausI2ORaidController = MibIdentifier((1, 3, 6, 1, 4, 1, 795, 14, 1, 210))
ausCCodeController = MibIdentifier((1, 3, 6, 1, 4, 1, 795, 14, 1, 211))
ausHostRAIDController = MibIdentifier((1, 3, 6, 1, 4, 1, 795, 14, 1, 212))
ausServeRAIDController = MibIdentifier((1, 3, 6, 1, 4, 1, 795, 14, 1, 213))
ausChannel = MibIdentifier((1, 3, 6, 1, 4, 1, 795, 14, 1, 300))
ausChannelRelationship = MibIdentifier((1, 3, 6, 1, 4, 1, 795, 14, 1, 301))
ausDevice = MibIdentifier((1, 3, 6, 1, 4, 1, 795, 14, 1, 400))
ausDevicePort = MibIdentifier((1, 3, 6, 1, 4, 1, 795, 14, 1, 401))
ausStorageDevice = MibIdentifier((1, 3, 6, 1, 4, 1, 795, 14, 1, 410))
ausEnclosureDevice = MibIdentifier((1, 3, 6, 1, 4, 1, 795, 14, 1, 411))
ausExternalRaidDevice = MibIdentifier((1, 3, 6, 1, 4, 1, 795, 14, 1, 412))
ausOtherDevice = MibIdentifier((1, 3, 6, 1, 4, 1, 795, 14, 1, 499))
ausEnclosureFan = MibIdentifier((1, 3, 6, 1, 4, 1, 795, 14, 1, 500))
ausEnclosurePowerSupply = MibIdentifier((1, 3, 6, 1, 4, 1, 795, 14, 1, 501))
ausEnclosureTemperatureSensor = MibIdentifier((1, 3, 6, 1, 4, 1, 795, 14, 1, 502))
ausEnclosureSlot = MibIdentifier((1, 3, 6, 1, 4, 1, 795, 14, 1, 503))
ausArray = MibIdentifier((1, 3, 6, 1, 4, 1, 795, 14, 1, 1000))
ausExtent = MibIdentifier((1, 3, 6, 1, 4, 1, 795, 14, 1, 1001))
ausSpare = MibIdentifier((1, 3, 6, 1, 4, 1, 795, 14, 1, 1002))
ausEventLogCount = MibIdentifier((1, 3, 6, 1, 4, 1, 795, 14, 1, 2000))
ausEventLog = MibIdentifier((1, 3, 6, 1, 4, 1, 795, 14, 1, 2001))
class TriState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("unknown", 1), ("false", 2), ("true", 3))

class ObjectStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("unknown", 1), ("other", 2), ("okay", 3), ("warning", 4), ("failure", 5))

class OptionStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("unknown", 1), ("other", 2), ("notApplicable", 3), ("notInstalled", 4), ("installedAndInactive", 5), ("installedAndActive", 6))

class BatteryStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))
    namedValues = NamedValues(("unknown", 1), ("other", 2), ("notApplicable", 3), ("notInstalled", 4), ("okay", 5), ("failed", 6), ("charging", 7), ("discharging", 8), ("inMaintenanceMode", 9))

class IndexList(DisplayString):
    pass

ausMibStatusRevMajor = MibScalar((1, 3, 6, 1, 4, 1, 795, 14, 1, 100, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausMibStatusRevMajor.setStatus('mandatory')
if mibBuilder.loadTexts: ausMibStatusRevMajor.setDescription('The major number of the revision of the Adaptec Universal Storage MIB.')
ausMibStatusRevMinor = MibScalar((1, 3, 6, 1, 4, 1, 795, 14, 1, 100, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausMibStatusRevMinor.setStatus('mandatory')
if mibBuilder.loadTexts: ausMibStatusRevMinor.setDescription('The minor number of the revision of the Adaptec Universal Storage MIB.')
ausMibStatusSecondsSinceInitiation = MibScalar((1, 3, 6, 1, 4, 1, 795, 14, 1, 100, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausMibStatusSecondsSinceInitiation.setStatus('mandatory')
if mibBuilder.loadTexts: ausMibStatusSecondsSinceInitiation.setDescription('The number of elapsed seconds since this SNMP subagent was initiated.')
ausMibStatusCopyright = MibScalar((1, 3, 6, 1, 4, 1, 795, 14, 1, 100, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausMibStatusCopyright.setStatus('mandatory')
if mibBuilder.loadTexts: ausMibStatusCopyright.setDescription("Copyright notification. This string shall always be reported as 'Copyright (C) 2005 Adaptec, Inc'. The year may be modified as appropriate.")
ausMibStatusOverall = MibScalar((1, 3, 6, 1, 4, 1, 795, 14, 1, 100, 5), ObjectStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausMibStatusOverall.setStatus('mandatory')
if mibBuilder.loadTexts: ausMibStatusOverall.setDescription("Overall operational status. This is the 'worst' overall status of all controllers reported in the MIB.")
ausAggregatedControllerTable = MibTable((1, 3, 6, 1, 4, 1, 795, 14, 1, 200, 1), )
if mibBuilder.loadTexts: ausAggregatedControllerTable.setStatus('mandatory')
if mibBuilder.loadTexts: ausAggregatedControllerTable.setDescription('A list of aggregated controllers.')
ausAggregatedControllerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 795, 14, 1, 200, 1, 1), ).setIndexNames((0, "ADAPTEC-UNIVERSAL-STORAGE-MIB", "ausAggregatedControllerIndex"))
if mibBuilder.loadTexts: ausAggregatedControllerEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ausAggregatedControllerEntry.setDescription('An aggregated controller entry.')
ausAggregatedControllerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 200, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausAggregatedControllerIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ausAggregatedControllerIndex.setDescription('A unique index value for each aggregated controller beginning with 1.')
ausAggregatedControllerList = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 200, 1, 1, 2), IndexList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausAggregatedControllerList.setStatus('mandatory')
if mibBuilder.loadTexts: ausAggregatedControllerList.setDescription('A list of indices into the ausControllerTable specifying the controllers that are aggregated by a software driver to form an array.')
ausControllerTable = MibTable((1, 3, 6, 1, 4, 1, 795, 14, 1, 201, 1), )
if mibBuilder.loadTexts: ausControllerTable.setStatus('mandatory')
if mibBuilder.loadTexts: ausControllerTable.setDescription('A list of controllers.')
ausControllerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 795, 14, 1, 201, 1, 1), ).setIndexNames((0, "ADAPTEC-UNIVERSAL-STORAGE-MIB", "ausControllerIndex"))
if mibBuilder.loadTexts: ausControllerEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ausControllerEntry.setDescription('A controller entry.')
ausControllerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 201, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausControllerIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ausControllerIndex.setDescription('A unique index value for each controller beginning with 1.')
ausControllerUniqueId = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 201, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausControllerUniqueId.setStatus('mandatory')
if mibBuilder.loadTexts: ausControllerUniqueId.setDescription('An ID for this controller that is unique across all namespaces.')
ausControllerVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 201, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausControllerVendor.setStatus('mandatory')
if mibBuilder.loadTexts: ausControllerVendor.setDescription('Vendor (manufacturer) of the controller.')
ausControllerModel = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 201, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausControllerModel.setStatus('mandatory')
if mibBuilder.loadTexts: ausControllerModel.setDescription('Model (descriptive name) of the controller.')
ausControllerRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 201, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausControllerRevision.setStatus('mandatory')
if mibBuilder.loadTexts: ausControllerRevision.setDescription('Revision information of the controller.')
ausControllerSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 201, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausControllerSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: ausControllerSerialNumber.setDescription('Serial number of the controller.')
ausControllerDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 201, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausControllerDescription.setStatus('mandatory')
if mibBuilder.loadTexts: ausControllerDescription.setDescription('Free form text for additional description of the controller.')
ausControllerHostBusType = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 201, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unknown", 1), ("other", 2), ("notApplicable", 3), ("pci", 4), ("pci-32", 5), ("pci-64", 6), ("picx", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausControllerHostBusType.setStatus('mandatory')
if mibBuilder.loadTexts: ausControllerHostBusType.setDescription('Type of host computer system bus for this controller.')
ausControllerHostBusMaximumTransferRate = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 201, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausControllerHostBusMaximumTransferRate.setStatus('mandatory')
if mibBuilder.loadTexts: ausControllerHostBusMaximumTransferRate.setDescription('Maximum possible transfer rate on the host bus in megabytes per second.')
ausControllerNumberOfChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 201, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausControllerNumberOfChannels.setStatus('mandatory')
if mibBuilder.loadTexts: ausControllerNumberOfChannels.setDescription('The number of channels present on this controller.')
ausControllerHighestChannelWithDevices = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 201, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausControllerHighestChannelWithDevices.setStatus('mandatory')
if mibBuilder.loadTexts: ausControllerHighestChannelWithDevices.setDescription('The 0-relative channel number within the controller which has at least one device attached to it.')
ausControllerInstalledMemory = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 201, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausControllerInstalledMemory.setStatus('mandatory')
if mibBuilder.loadTexts: ausControllerInstalledMemory.setDescription('Memory installed on this controller in megabytes.')
ausControllerAudibleAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 201, 1, 1, 13), OptionStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausControllerAudibleAlarmStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ausControllerAudibleAlarmStatus.setDescription('Status of audible alarm for this controller.')
ausControllerBatteryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 201, 1, 1, 14), BatteryStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausControllerBatteryStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ausControllerBatteryStatus.setDescription('Status of battery for this controller.')
ausControllerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 201, 1, 1, 15), ObjectStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausControllerStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ausControllerStatus.setDescription('Operational status of this controller.')
ausControllerOverallStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 201, 1, 1, 16), ObjectStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausControllerOverallStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ausControllerOverallStatus.setDescription("Overall operational status of this controller and its children. This is the 'worst' status of the controller status and that of all arrays and un-arrayed devices attached to this controller.")
ausControllerRelationshipTable = MibTable((1, 3, 6, 1, 4, 1, 795, 14, 1, 202, 1), )
if mibBuilder.loadTexts: ausControllerRelationshipTable.setStatus('mandatory')
if mibBuilder.loadTexts: ausControllerRelationshipTable.setDescription('A list of controller relationships.')
ausControllerRelationshipEntry = MibTableRow((1, 3, 6, 1, 4, 1, 795, 14, 1, 202, 1, 1), ).setIndexNames((0, "ADAPTEC-UNIVERSAL-STORAGE-MIB", "ausControllerRelationshipIndex"))
if mibBuilder.loadTexts: ausControllerRelationshipEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ausControllerRelationshipEntry.setDescription('A controller relationship entry.')
ausControllerRelationshipIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 202, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausControllerRelationshipIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ausControllerRelationshipIndex.setDescription('A unique index value for each controller relationship beginning with 1.')
ausControllerRelationshipType = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 202, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("hostAttachedController", 1), ("externalRaid", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausControllerRelationshipType.setStatus('mandatory')
if mibBuilder.loadTexts: ausControllerRelationshipType.setDescription('Selects whether this row entry is a relationship between entries in the ausController table or entries in the ausExternalRaidDevice table. Setting of this field determines if the ausControllerRelationshipList is a list of indices in the ausController table or the ausExternalRaidDevice table.')
ausControllerRelationshipList = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 202, 1, 1, 3), IndexList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausControllerRelationshipList.setStatus('mandatory')
if mibBuilder.loadTexts: ausControllerRelationshipList.setDescription('A list of indices into the appropriate controller table specifying the controllers that are related.')
ausControllerRelationshipRelation = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 202, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausControllerRelationshipRelation.setStatus('mandatory')
if mibBuilder.loadTexts: ausControllerRelationshipRelation.setDescription('The attributes of the relationship among the related controllers.')
ausI2ORaidControllerTable = MibTable((1, 3, 6, 1, 4, 1, 795, 14, 1, 210, 1), )
if mibBuilder.loadTexts: ausI2ORaidControllerTable.setStatus('mandatory')
if mibBuilder.loadTexts: ausI2ORaidControllerTable.setDescription('A list of I2O RAID storage controllers.')
ausI2ORaidControllerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 795, 14, 1, 210, 1, 1), ).setIndexNames((0, "ADAPTEC-UNIVERSAL-STORAGE-MIB", "ausI2ORaidControllerIndex"))
if mibBuilder.loadTexts: ausI2ORaidControllerEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ausI2ORaidControllerEntry.setDescription('A I2O RAID storage controller entry.')
ausI2ORaidControllerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 210, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausI2ORaidControllerIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ausI2ORaidControllerIndex.setDescription('A unique index value for each I2O RAID controller.')
ausI2ORaidControllerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 210, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967294))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausI2ORaidControllerAddress.setStatus('mandatory')
if mibBuilder.loadTexts: ausI2ORaidControllerAddress.setDescription('The controller Address (normally displayed in hex.) It is a 32-bit value representing the memory address used by the controller')
ausI2ORaidControllerBackgroundTaskPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 210, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausI2ORaidControllerBackgroundTaskPriority.setStatus('mandatory')
if mibBuilder.loadTexts: ausI2ORaidControllerBackgroundTaskPriority.setDescription("This object controls the priority of array background tasks such as Build, Rebuild and Verify for this controller. The values range from 1 to 10. A value of 1 is the slowest but uses the least amount of the controller's bandwidth. While a value of 10 is the fastest but it uses the most bandwidth.")
ausI2ORaidControllerBiosRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 210, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausI2ORaidControllerBiosRevision.setStatus('mandatory')
if mibBuilder.loadTexts: ausI2ORaidControllerBiosRevision.setDescription('The controller B.I.O.S. revision information.')
ausI2ORaidControllerSmorRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 210, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausI2ORaidControllerSmorRevision.setStatus('mandatory')
if mibBuilder.loadTexts: ausI2ORaidControllerSmorRevision.setDescription('The controller S.M.O.R. revision information.')
ausI2ORaidControllerMainIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 210, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausI2ORaidControllerMainIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ausI2ORaidControllerMainIndex.setDescription('This is the index into ausControllerTable of the row that is extended by this row of ausI2ORaidControllerTable.')
ausCCodeControllerTable = MibTable((1, 3, 6, 1, 4, 1, 795, 14, 1, 211, 1), )
if mibBuilder.loadTexts: ausCCodeControllerTable.setStatus('mandatory')
if mibBuilder.loadTexts: ausCCodeControllerTable.setDescription('A list of Container Code storage controllers.')
ausCCodeControllerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 795, 14, 1, 211, 1, 1), ).setIndexNames((0, "ADAPTEC-UNIVERSAL-STORAGE-MIB", "ausCCodeControllerIndex"))
if mibBuilder.loadTexts: ausCCodeControllerEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ausCCodeControllerEntry.setDescription('A Container Code storage controller entry.')
ausCCodeControllerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 211, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausCCodeControllerIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ausCCodeControllerIndex.setDescription('A unique index value for each Container Code controller.')
ausCCodeControllerPCIBusId = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 211, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausCCodeControllerPCIBusId.setStatus('mandatory')
if mibBuilder.loadTexts: ausCCodeControllerPCIBusId.setDescription('The identifier of the host computer PCI bus the controller is attached to.')
ausCCodeControllerPCISlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 211, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausCCodeControllerPCISlotNumber.setStatus('mandatory')
if mibBuilder.loadTexts: ausCCodeControllerPCISlotNumber.setDescription('The slot number of the host computer PCI bus the controller is in.')
ausCCodeControllerBiosVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 211, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausCCodeControllerBiosVersion.setStatus('mandatory')
if mibBuilder.loadTexts: ausCCodeControllerBiosVersion.setDescription('The B.I.O.S. software version.')
ausCCodeControllerMainIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 211, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausCCodeControllerMainIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ausCCodeControllerMainIndex.setDescription('This is the index into ausControllerTable of the row that is extended by this row of ausCCodeControllerTable.')
ausHostRAIDControllerTable = MibTable((1, 3, 6, 1, 4, 1, 795, 14, 1, 212, 1), )
if mibBuilder.loadTexts: ausHostRAIDControllerTable.setStatus('mandatory')
if mibBuilder.loadTexts: ausHostRAIDControllerTable.setDescription('A list of HostRAID storage controllers.')
ausHostRAIDControllerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 795, 14, 1, 212, 1, 1), ).setIndexNames((0, "ADAPTEC-UNIVERSAL-STORAGE-MIB", "ausHostRAIDControllerIndex"))
if mibBuilder.loadTexts: ausHostRAIDControllerEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ausHostRAIDControllerEntry.setDescription('A HostRAID storage controller entry.')
ausHostRAIDControllerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 212, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausHostRAIDControllerIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ausHostRAIDControllerIndex.setDescription('A unique index value for each HostRAID controller.')
ausHostRAIDControllerPCIBus = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 212, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausHostRAIDControllerPCIBus.setStatus('mandatory')
if mibBuilder.loadTexts: ausHostRAIDControllerPCIBus.setDescription('The PCI bus number of this controller.')
ausHostRAIDControllerPCIDevice = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 212, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausHostRAIDControllerPCIDevice.setStatus('mandatory')
if mibBuilder.loadTexts: ausHostRAIDControllerPCIDevice.setDescription('The PCI device number of this controller.')
ausHostRAIDControllerPCIFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 212, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausHostRAIDControllerPCIFunction.setStatus('mandatory')
if mibBuilder.loadTexts: ausHostRAIDControllerPCIFunction.setDescription('The PCI function number of this controller.')
ausHostRAIDControllerMainIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 212, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausHostRAIDControllerMainIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ausHostRAIDControllerMainIndex.setDescription('This is the index into ausControllerTable of the row that is extended by this row of ausI2ORaidControllerTable.')
ausServeRAIDControllerTable = MibTable((1, 3, 6, 1, 4, 1, 795, 14, 1, 213, 1), )
if mibBuilder.loadTexts: ausServeRAIDControllerTable.setStatus('mandatory')
if mibBuilder.loadTexts: ausServeRAIDControllerTable.setDescription('A list of ServeRAID storage controllers.')
ausServeRAIDControllerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 795, 14, 1, 213, 1, 1), ).setIndexNames((0, "ADAPTEC-UNIVERSAL-STORAGE-MIB", "ausServeRAIDControllerIndex"))
if mibBuilder.loadTexts: ausServeRAIDControllerEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ausServeRAIDControllerEntry.setDescription('A ServeRAID storage controller entry.')
ausServeRAIDControllerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 213, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausServeRAIDControllerIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ausServeRAIDControllerIndex.setDescription('A unique index value for each ServeRAID controller.')
ausServeRAIDControllerBIOSRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 213, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausServeRAIDControllerBIOSRevision.setStatus('mandatory')
if mibBuilder.loadTexts: ausServeRAIDControllerBIOSRevision.setDescription('The B.I.O.S. Revision of this controller.')
ausServeRAIDControllerDefaultRebuildRate = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 213, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("other", 2), ("low", 3), ("medium", 4), ("high", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausServeRAIDControllerDefaultRebuildRate.setStatus('mandatory')
if mibBuilder.loadTexts: ausServeRAIDControllerDefaultRebuildRate.setDescription('The default rebuild rate of this controller.')
ausServeRAIDControllerSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 213, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausServeRAIDControllerSlotNumber.setStatus('mandatory')
if mibBuilder.loadTexts: ausServeRAIDControllerSlotNumber.setDescription('The slot number of this controller.')
ausServeRAIDControllerMainIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 213, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausServeRAIDControllerMainIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ausServeRAIDControllerMainIndex.setDescription('This is the index into ausControllerTable of the row that is extended by this row of ausServeRAIDControllerTable.')
ausChannelTable = MibTable((1, 3, 6, 1, 4, 1, 795, 14, 1, 300, 1), )
if mibBuilder.loadTexts: ausChannelTable.setStatus('mandatory')
if mibBuilder.loadTexts: ausChannelTable.setDescription('A list of channels.')
ausChannelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 795, 14, 1, 300, 1, 1), ).setIndexNames((0, "ADAPTEC-UNIVERSAL-STORAGE-MIB", "ausChannelIndex"))
if mibBuilder.loadTexts: ausChannelEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ausChannelEntry.setDescription('A channel entry.')
ausChannelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 300, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausChannelIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ausChannelIndex.setDescription('A unique index value for each channel beginning with 1.')
ausChannelLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 300, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("hostAttached", 1), ("externalRaid", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausChannelLocation.setStatus('mandatory')
if mibBuilder.loadTexts: ausChannelLocation.setDescription('Indicates whether the channelAusControllerIndex field should be interpreted as an index into the controllerTable or the externalRaidDeviceTable. In other words, shows whether this channel is a channel connected directly to the host or is a back-end channel connected to an external RAID controller.')
ausChannelAusControllerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 300, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausChannelAusControllerIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ausChannelAusControllerIndex.setDescription('Index into the Adaptec Universal Storage controller table containing the entry that hosts this channel, or an index into the externalRaidDevice table containing the external RAID controller that hosts this channel. Where the index points is selected by channelLocation above.')
ausChannelAusControllerChannelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 300, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausChannelAusControllerChannelNumber.setStatus('mandatory')
if mibBuilder.loadTexts: ausChannelAusControllerChannelNumber.setDescription('Channel number within the controller referenced by channelAusControllerIndex. Channels are numbered sequentially starting with 0.')
ausChannelType = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 300, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unknown", 1), ("other", 2), ("scsi", 3), ("ide", 4), ("fibreChannel", 5), ("sata", 6), ("sas", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausChannelType.setStatus('mandatory')
if mibBuilder.loadTexts: ausChannelType.setDescription('Physical transmission technology for this channel.')
ausChannelTypeDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 300, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausChannelTypeDescription.setStatus('mandatory')
if mibBuilder.loadTexts: ausChannelTypeDescription.setDescription("A finer-grained description for the channel. For example, SCSI may be further refined as 'Ultra160' or 'Ultra320'. IDE may be further refined per the various different performance types available.")
ausChannelControllerId = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 300, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausChannelControllerId.setStatus('mandatory')
if mibBuilder.loadTexts: ausChannelControllerId.setDescription('Controller ID number used on this channel. Meaning is dependent on channelType. For example, SCSI channels would report controller SCSI ID in this field. The field is a string to allow for a wide range of addressing schemes.')
ausChannelControllerSubId = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 300, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausChannelControllerSubId.setStatus('mandatory')
if mibBuilder.loadTexts: ausChannelControllerSubId.setDescription('Controller SubId number used on this channel. Meaning is dependent on channelType. For example, SCSI channels would report controller SCSI LUN in this field. The field is a string to allow for a wide range of addressing schemes.')
ausChannelWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 300, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausChannelWidth.setStatus('mandatory')
if mibBuilder.loadTexts: ausChannelWidth.setDescription('Width of the channel in bits. For example, SCSI would be 8 or 16. Serial interfaces would be 1.')
ausChannelMaximumTransferRate = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 300, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausChannelMaximumTransferRate.setStatus('mandatory')
if mibBuilder.loadTexts: ausChannelMaximumTransferRate.setDescription('Maximum transfer rate of this channel in megabytes per second.')
ausChannelMaximumAttachments = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 300, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausChannelMaximumAttachments.setStatus('mandatory')
if mibBuilder.loadTexts: ausChannelMaximumAttachments.setDescription("Maximum number of devices that may be attached to this this channel (include controller in the count). In case of SATA, this is the total number of ports. Ports are virtualized into IDs on 'SCSI channels'.")
ausChannelOverallStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 300, 1, 1, 12), ObjectStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausChannelOverallStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ausChannelOverallStatus.setDescription("Overall operational status of this channel. This is the 'worst' status of all arrays and un-arrayed devices attached to this channel.")
ausChannelRelationshipTable = MibTable((1, 3, 6, 1, 4, 1, 795, 14, 1, 301, 1), )
if mibBuilder.loadTexts: ausChannelRelationshipTable.setStatus('mandatory')
if mibBuilder.loadTexts: ausChannelRelationshipTable.setDescription('A list of channel relationships.')
ausChannelRelationshipEntry = MibTableRow((1, 3, 6, 1, 4, 1, 795, 14, 1, 301, 1, 1), ).setIndexNames((0, "ADAPTEC-UNIVERSAL-STORAGE-MIB", "ausChannelRelationshipIndex"))
if mibBuilder.loadTexts: ausChannelRelationshipEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ausChannelRelationshipEntry.setDescription('A channel relationship entry.')
ausChannelRelationshipIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 301, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausChannelRelationshipIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ausChannelRelationshipIndex.setDescription('A unique index value for each channel relationship beginning with 1.')
ausChannelRelationshipList = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 301, 1, 1, 2), IndexList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausChannelRelationshipList.setStatus('mandatory')
if mibBuilder.loadTexts: ausChannelRelationshipList.setDescription('A list of indices into the channel table specifying the channels that are related.')
ausChannelRelationshipRelation = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 301, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausChannelRelationshipRelation.setStatus('mandatory')
if mibBuilder.loadTexts: ausChannelRelationshipRelation.setDescription('The attributes of the relationship among the related controllers.')
ausDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 795, 14, 1, 400, 1), )
if mibBuilder.loadTexts: ausDeviceTable.setStatus('mandatory')
if mibBuilder.loadTexts: ausDeviceTable.setDescription('A list of devices.')
ausDeviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 795, 14, 1, 400, 1, 1), ).setIndexNames((0, "ADAPTEC-UNIVERSAL-STORAGE-MIB", "ausDeviceIndex"))
if mibBuilder.loadTexts: ausDeviceEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ausDeviceEntry.setDescription('A device entry.')
ausDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 400, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausDeviceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ausDeviceIndex.setDescription('A unique index value for each device beginning with 1.')
ausDeviceUniqueId = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 400, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausDeviceUniqueId.setStatus('mandatory')
if mibBuilder.loadTexts: ausDeviceUniqueId.setDescription('An ID for this device that is unique across all namespaces.')
ausDeviceAusChannelIndices = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 400, 1, 1, 3), IndexList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausDeviceAusChannelIndices.setStatus('mandatory')
if mibBuilder.loadTexts: ausDeviceAusChannelIndices.setDescription('A list of indices into the Adaptec Universal Storage Channel table to which this device is attached. (For detailed information about connections between the device and the channel, refer to the ausDevicePort table.)')
ausDeviceType = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 400, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("unknown", 1), ("other", 2), ("directAccess", 3), ("sequentialAccess", 4), ("printer", 5), ("processor", 6), ("writeOnce", 7), ("cdRom", 8), ("scanner", 9), ("opticalMemory", 10), ("mediumChanger", 11), ("communications", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausDeviceType.setStatus('mandatory')
if mibBuilder.loadTexts: ausDeviceType.setDescription('Device type for this device.')
ausDeviceTypeGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 400, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("noSubordinateTable", 1), ("storageDevice", 2), ("enclosureDevice", 3), ("externalRaidDevice", 4), ("otherDevice", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausDeviceTypeGroup.setStatus('mandatory')
if mibBuilder.loadTexts: ausDeviceTypeGroup.setDescription('Selects which of the subordinate device tables contains more information about this device.')
ausDeviceVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 400, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausDeviceVendor.setStatus('mandatory')
if mibBuilder.loadTexts: ausDeviceVendor.setDescription('Vendor (manufacturer) of this device.')
ausDeviceModel = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 400, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausDeviceModel.setStatus('mandatory')
if mibBuilder.loadTexts: ausDeviceModel.setDescription('Model of this device.')
ausDeviceRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 400, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausDeviceRevision.setStatus('mandatory')
if mibBuilder.loadTexts: ausDeviceRevision.setDescription('Revision information for this device.')
ausDeviceSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 400, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausDeviceSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: ausDeviceSerialNumber.setDescription('Serial number of this device.')
ausDeviceNumberOfPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 400, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausDeviceNumberOfPorts.setStatus('mandatory')
if mibBuilder.loadTexts: ausDeviceNumberOfPorts.setDescription('Number of entries present in the device port table for this device (which is the same as the number of ports on the device).')
ausDeviceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 400, 1, 1, 11), ObjectStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausDeviceStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ausDeviceStatus.setDescription('Operational status of this device.')
ausDevicePortTable = MibTable((1, 3, 6, 1, 4, 1, 795, 14, 1, 401, 1), )
if mibBuilder.loadTexts: ausDevicePortTable.setStatus('mandatory')
if mibBuilder.loadTexts: ausDevicePortTable.setDescription('A list of device ports.')
ausDevicePortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 795, 14, 1, 401, 1, 1), ).setIndexNames((0, "ADAPTEC-UNIVERSAL-STORAGE-MIB", "ausDevicePortIndex"))
if mibBuilder.loadTexts: ausDevicePortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ausDevicePortEntry.setDescription('A device port entry.')
ausDevicePortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 401, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausDevicePortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ausDevicePortIndex.setDescription('A unique index value for each device port beginning with 1.')
ausDevicePortUniqueId = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 401, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausDevicePortUniqueId.setStatus('mandatory')
if mibBuilder.loadTexts: ausDevicePortUniqueId.setDescription('An ID for this device port that is unique across all namespaces.')
ausDevicePortAusDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 401, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausDevicePortAusDeviceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ausDevicePortAusDeviceIndex.setDescription('Index into the Adaptec Universal Storage Device table locating the device that contains this port.')
ausDevicePortAusDevicePortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 401, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausDevicePortAusDevicePortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: ausDevicePortAusDevicePortNumber.setDescription('Port number within the device referenced by ausDevicePortAusDeviceIndex. Ports are numbered sequentially starting with 0.')
ausDevicePortAusChannelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 401, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausDevicePortAusChannelIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ausDevicePortAusChannelIndex.setDescription('Index into the Adaptec Universal Storage Channel table locating the channel to which this device port is attached.')
ausDevicePortId = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 401, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausDevicePortId.setStatus('mandatory')
if mibBuilder.loadTexts: ausDevicePortId.setDescription('Port ID number used by this device. Meaning is dependent on channel type. For example, SCSI channels would report device SCSI ID in this field. The field is a string to allow for a wide range of addressing schemes.')
ausDevicePortSubId = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 401, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausDevicePortSubId.setStatus('mandatory')
if mibBuilder.loadTexts: ausDevicePortSubId.setDescription('Port SubId number used by this device. Meaning is dependent on channel type. For example, SCSI channels would report device SCSI LUN in this field. The field is a string to allow for a wide range of addressing schemes.')
ausDevicePortWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 401, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausDevicePortWidth.setStatus('mandatory')
if mibBuilder.loadTexts: ausDevicePortWidth.setDescription('Port width capability of this device. This may be narrower than the channel width - for example, an eight bit SCSI device on a sixteen bit SCSI channel.')
ausDevicePortMaximumTransferRate = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 401, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausDevicePortMaximumTransferRate.setStatus('mandatory')
if mibBuilder.loadTexts: ausDevicePortMaximumTransferRate.setDescription('Maximum transfer rate of this device in megabytes per second.')
ausDevicePortNegotiatedTransferRate = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 401, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausDevicePortNegotiatedTransferRate.setStatus('mandatory')
if mibBuilder.loadTexts: ausDevicePortNegotiatedTransferRate.setDescription('Negotiated transfer rate of this device port/ controller channel pair in megabytes per second.')
ausDevicePortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 401, 1, 1, 11), ObjectStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausDevicePortStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ausDevicePortStatus.setDescription('Operational status of this device port.')
ausStorageDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 795, 14, 1, 410, 1), )
if mibBuilder.loadTexts: ausStorageDeviceTable.setStatus('mandatory')
if mibBuilder.loadTexts: ausStorageDeviceTable.setDescription('A list of storage devices.')
ausStorageDeviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 795, 14, 1, 410, 1, 1), ).setIndexNames((0, "ADAPTEC-UNIVERSAL-STORAGE-MIB", "ausStorageDeviceIndex"))
if mibBuilder.loadTexts: ausStorageDeviceEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ausStorageDeviceEntry.setDescription('A storage device entry.')
ausStorageDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 410, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausStorageDeviceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ausStorageDeviceIndex.setDescription('A unique index value for each storage device.')
ausStorageDeviceDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 410, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausStorageDeviceDescription.setStatus('mandatory')
if mibBuilder.loadTexts: ausStorageDeviceDescription.setDescription('Free form text for additional description of the storage device.')
ausStorageDeviceFormattedCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 410, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausStorageDeviceFormattedCapacity.setStatus('mandatory')
if mibBuilder.loadTexts: ausStorageDeviceFormattedCapacity.setDescription('Formatted capacity of this storage device in megabytes.')
ausStorageDeviceBlockSize = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 410, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausStorageDeviceBlockSize.setStatus('mandatory')
if mibBuilder.loadTexts: ausStorageDeviceBlockSize.setDescription('Physical block size of this storage device in bytes.')
ausStorageDeviceNumberOfBlocksLow = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 410, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausStorageDeviceNumberOfBlocksLow.setStatus('mandatory')
if mibBuilder.loadTexts: ausStorageDeviceNumberOfBlocksLow.setDescription('Number of physical blocks for this storage device (least significant 32 bits of 64 bit value).')
ausStorageDeviceNumberOfBlocksHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 410, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausStorageDeviceNumberOfBlocksHigh.setStatus('mandatory')
if mibBuilder.loadTexts: ausStorageDeviceNumberOfBlocksHigh.setDescription('Number of physical blocks for this storage device (most significant 32 bits of 64 bit value).')
ausStorageDeviceRemovableMedia = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 410, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("notSupported", 2), ("supportedAndNotLoaded", 3), ("supportedAndLoaded", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausStorageDeviceRemovableMedia.setStatus('mandatory')
if mibBuilder.loadTexts: ausStorageDeviceRemovableMedia.setDescription('Status of removable media for this storage device.')
ausStorageDeviceSmartStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 410, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("notSupported", 2), ("notEnabled", 3), ("okay", 4), ("errorPredicted", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausStorageDeviceSmartStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ausStorageDeviceSmartStatus.setDescription('S.M.A.R.T. status of this storage device.')
ausStorageDeviceMainIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 410, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausStorageDeviceMainIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ausStorageDeviceMainIndex.setDescription('This is the index into ausDeviceTable of the row that is extended by this row of ausStorageDeviceTable.')
ausEnclosureDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 795, 14, 1, 411, 1), )
if mibBuilder.loadTexts: ausEnclosureDeviceTable.setStatus('mandatory')
if mibBuilder.loadTexts: ausEnclosureDeviceTable.setDescription('A list of enclosure devices.')
ausEnclosureDeviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 795, 14, 1, 411, 1, 1), ).setIndexNames((0, "ADAPTEC-UNIVERSAL-STORAGE-MIB", "ausEnclosureDeviceIndex"))
if mibBuilder.loadTexts: ausEnclosureDeviceEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ausEnclosureDeviceEntry.setDescription('An enclosure device entry.')
ausEnclosureDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 411, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausEnclosureDeviceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ausEnclosureDeviceIndex.setDescription('A unique index value for each enclosure device.')
ausEnclosureDeviceDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 411, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausEnclosureDeviceDescription.setStatus('mandatory')
if mibBuilder.loadTexts: ausEnclosureDeviceDescription.setDescription('Free form text for additional description of the enclosure.')
ausEnclosureDeviceProcessorType = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 411, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("unknown", 1), ("other", 2), ("decFault", 3), ("saf-te", 4), ("ses", 5), ("aemi", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausEnclosureDeviceProcessorType.setStatus('mandatory')
if mibBuilder.loadTexts: ausEnclosureDeviceProcessorType.setDescription('Standard supported by this enclosure.')
ausEnclosureDeviceNumberOfFans = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 411, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausEnclosureDeviceNumberOfFans.setStatus('mandatory')
if mibBuilder.loadTexts: ausEnclosureDeviceNumberOfFans.setDescription('Number of fans installed in this enclosure.')
ausEnclosureDeviceNumberOfPowerSupplies = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 411, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausEnclosureDeviceNumberOfPowerSupplies.setStatus('mandatory')
if mibBuilder.loadTexts: ausEnclosureDeviceNumberOfPowerSupplies.setDescription('Number of power supplies installed in this enclosure.')
ausEnclosureDeviceNumberOfSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 411, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausEnclosureDeviceNumberOfSlots.setStatus('mandatory')
if mibBuilder.loadTexts: ausEnclosureDeviceNumberOfSlots.setDescription('Number of slots installed in this enclosure.')
ausEnclosureDeviceNumberOfTemperatureSensors = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 411, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausEnclosureDeviceNumberOfTemperatureSensors.setStatus('mandatory')
if mibBuilder.loadTexts: ausEnclosureDeviceNumberOfTemperatureSensors.setDescription('Number of temperature sensors installed in this enclosure.')
ausEnclosureDeviceIdLow = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 411, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausEnclosureDeviceIdLow.setStatus('mandatory')
if mibBuilder.loadTexts: ausEnclosureDeviceIdLow.setDescription('Unique enclosure ID obtained from inquiry (least significant 32 bits of 64 bit value).')
ausEnclosureDeviceIdHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 411, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausEnclosureDeviceIdHigh.setStatus('mandatory')
if mibBuilder.loadTexts: ausEnclosureDeviceIdHigh.setDescription('Unique enclosure ID obtained from inquiry (most significant 32 bits of 64 bit value).')
ausEnclosureDeviceStandardRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 411, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausEnclosureDeviceStandardRevision.setStatus('mandatory')
if mibBuilder.loadTexts: ausEnclosureDeviceStandardRevision.setDescription('Revision of standard adhered to for this enclosure (obtained from inquiry).')
ausEnclosureDevicePowerOnTime = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 411, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausEnclosureDevicePowerOnTime.setStatus('mandatory')
if mibBuilder.loadTexts: ausEnclosureDevicePowerOnTime.setDescription('Total number of power on minutes for this enclosure.')
ausEnclosureDevicePowerCycles = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 411, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausEnclosureDevicePowerCycles.setStatus('mandatory')
if mibBuilder.loadTexts: ausEnclosureDevicePowerCycles.setDescription('Total number of power cycles for this enclosure.')
ausEnclosureDeviceDoorLock = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 411, 1, 1, 13), OptionStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausEnclosureDeviceDoorLock.setStatus('mandatory')
if mibBuilder.loadTexts: ausEnclosureDeviceDoorLock.setDescription("Presence and current status of this enclosure's door lock.")
ausEnclosureDeviceSpeaker = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 411, 1, 1, 14), OptionStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausEnclosureDeviceSpeaker.setStatus('mandatory')
if mibBuilder.loadTexts: ausEnclosureDeviceSpeaker.setDescription("Presence and current status of this enclosure's speaker.")
ausEnclosureDeviceTemperatureState = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 411, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("other", 2), ("okay", 3), ("tooHot", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausEnclosureDeviceTemperatureState.setStatus('mandatory')
if mibBuilder.loadTexts: ausEnclosureDeviceTemperatureState.setDescription('Indicates state of internal temperature for this enclosure.')
ausEnclosureDeviceMainIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 411, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausEnclosureDeviceMainIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ausEnclosureDeviceMainIndex.setDescription('This is the index into ausDeviceTable of the row that is extended by this row of ausEnclosureDeviceTable.')
ausExternalRaidDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 795, 14, 1, 412, 1), )
if mibBuilder.loadTexts: ausExternalRaidDeviceTable.setStatus('mandatory')
if mibBuilder.loadTexts: ausExternalRaidDeviceTable.setDescription('A list of external RAID controllers.')
ausExternalRaidDeviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 795, 14, 1, 412, 1, 1), ).setIndexNames((0, "ADAPTEC-UNIVERSAL-STORAGE-MIB", "ausExternalRaidDeviceIndex"))
if mibBuilder.loadTexts: ausExternalRaidDeviceEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ausExternalRaidDeviceEntry.setDescription('An external RAID controller entry.')
ausExternalRaidDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 412, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausExternalRaidDeviceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ausExternalRaidDeviceIndex.setDescription('A unique index value for each external RAID device.')
ausExternalRaidDeviceDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 412, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausExternalRaidDeviceDescription.setStatus('mandatory')
if mibBuilder.loadTexts: ausExternalRaidDeviceDescription.setDescription('Free form text for additional description of the external RAID controller.')
ausExternalRaidDeviceNumberOfChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 412, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausExternalRaidDeviceNumberOfChannels.setStatus('mandatory')
if mibBuilder.loadTexts: ausExternalRaidDeviceNumberOfChannels.setDescription('The number of back-end channels present on this external RAID controller.')
ausExternalRaidDeviceInstalledMemory = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 412, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausExternalRaidDeviceInstalledMemory.setStatus('mandatory')
if mibBuilder.loadTexts: ausExternalRaidDeviceInstalledMemory.setDescription('Installed memory in this external RAID controller in megabytes.')
ausExternalRaidDeviceAudibleAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 412, 1, 1, 5), OptionStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausExternalRaidDeviceAudibleAlarmStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ausExternalRaidDeviceAudibleAlarmStatus.setDescription('Status of audible alarm for this external RAID controller.')
ausExternalRaidDeviceBatteryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 412, 1, 1, 6), BatteryStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausExternalRaidDeviceBatteryStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ausExternalRaidDeviceBatteryStatus.setDescription('Status of battery for this external RAID controller.')
ausExternalRaidDeviceMainIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 412, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausExternalRaidDeviceMainIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ausExternalRaidDeviceMainIndex.setDescription('This is the index into ausDeviceTable of the row that is extended by this row of ausExternalRaidDeviceTable.')
ausOtherDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 795, 14, 1, 499, 1), )
if mibBuilder.loadTexts: ausOtherDeviceTable.setStatus('mandatory')
if mibBuilder.loadTexts: ausOtherDeviceTable.setDescription('A list of other devices.')
ausOtherDeviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 795, 14, 1, 499, 1, 1), ).setIndexNames((0, "ADAPTEC-UNIVERSAL-STORAGE-MIB", "ausOtherDeviceIndex"))
if mibBuilder.loadTexts: ausOtherDeviceEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ausOtherDeviceEntry.setDescription('An other device entry.')
ausOtherDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 499, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausOtherDeviceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ausOtherDeviceIndex.setDescription('A unique index value for each other device.')
ausOtherDeviceDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 499, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausOtherDeviceDescription.setStatus('mandatory')
if mibBuilder.loadTexts: ausOtherDeviceDescription.setDescription('Free form text for additional description of this device.')
ausOtherDeviceMainIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 499, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausOtherDeviceMainIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ausOtherDeviceMainIndex.setDescription('This is the index into ausDeviceTable of the row that is extended by this row of ausOtherDeviceTable.')
ausEnclosureFanTable = MibTable((1, 3, 6, 1, 4, 1, 795, 14, 1, 500, 1), )
if mibBuilder.loadTexts: ausEnclosureFanTable.setStatus('mandatory')
if mibBuilder.loadTexts: ausEnclosureFanTable.setDescription('A list of enclosure fans.')
ausEnclosureFanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 795, 14, 1, 500, 1, 1), ).setIndexNames((0, "ADAPTEC-UNIVERSAL-STORAGE-MIB", "ausEnclosureFanIndex"))
if mibBuilder.loadTexts: ausEnclosureFanEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ausEnclosureFanEntry.setDescription('An enclosure fan entry.')
ausEnclosureFanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 500, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausEnclosureFanIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ausEnclosureFanIndex.setDescription('A unique index value for each fan.')
ausEnclosureFanAusEnclosureDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 500, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausEnclosureFanAusEnclosureDeviceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ausEnclosureFanAusEnclosureDeviceIndex.setDescription('The index of the ausEnclosureDeviceTable entry housing this fan.')
ausEnclosureFanOrdinal = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 500, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausEnclosureFanOrdinal.setStatus('mandatory')
if mibBuilder.loadTexts: ausEnclosureFanOrdinal.setDescription('Zero-relative fan number within an enclosure.')
ausEnclosureFanSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 500, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unknown", 1), ("other", 2), ("off", 3), ("quarterSpeed", 4), ("halfSpeed", 5), ("threeQuartersSpeed", 6), ("fullSpeed", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausEnclosureFanSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: ausEnclosureFanSpeed.setDescription('Rotational speed of this fan.')
ausEnclosureFanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 500, 1, 1, 5), ObjectStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausEnclosureFanStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ausEnclosureFanStatus.setDescription('Status of this fan.')
ausEnclosurePowerSupplyTable = MibTable((1, 3, 6, 1, 4, 1, 795, 14, 1, 501, 1), )
if mibBuilder.loadTexts: ausEnclosurePowerSupplyTable.setStatus('mandatory')
if mibBuilder.loadTexts: ausEnclosurePowerSupplyTable.setDescription('A list of enclosure power supplies.')
ausEnclosurePowerSupplyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 795, 14, 1, 501, 1, 1), ).setIndexNames((0, "ADAPTEC-UNIVERSAL-STORAGE-MIB", "ausEnclosurePowerSupplyIndex"))
if mibBuilder.loadTexts: ausEnclosurePowerSupplyEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ausEnclosurePowerSupplyEntry.setDescription('An enclosure power supply entry.')
ausEnclosurePowerSupplyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 501, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausEnclosurePowerSupplyIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ausEnclosurePowerSupplyIndex.setDescription('A unique index value for each power supply.')
ausEnclosurePowerSupplyAusEnclosureDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 501, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausEnclosurePowerSupplyAusEnclosureDeviceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ausEnclosurePowerSupplyAusEnclosureDeviceIndex.setDescription('The index of the ausEnclosureDeviceTable entry housing this power supply.')
ausEnclosurePowerSupplyOrdinal = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 501, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausEnclosurePowerSupplyOrdinal.setStatus('mandatory')
if mibBuilder.loadTexts: ausEnclosurePowerSupplyOrdinal.setDescription('Zero-relative power supply number within an enclosure.')
ausEnclosurePowerSupplyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 501, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("unknown", 1), ("other", 2), ("operationalAndOn", 3), ("operationalAndOff", 4), ("onAndMalfunctioning", 5), ("offAndMalfunctioning", 6), ("installed", 7), ("notInstalled", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausEnclosurePowerSupplyStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ausEnclosurePowerSupplyStatus.setDescription('Status of this power supply.')
ausEnclosureTemperatureSensorTable = MibTable((1, 3, 6, 1, 4, 1, 795, 14, 1, 502, 1), )
if mibBuilder.loadTexts: ausEnclosureTemperatureSensorTable.setStatus('mandatory')
if mibBuilder.loadTexts: ausEnclosureTemperatureSensorTable.setDescription('A list of enclosure temperature sensors.')
ausEnclosureTemperatureSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 795, 14, 1, 502, 1, 1), ).setIndexNames((0, "ADAPTEC-UNIVERSAL-STORAGE-MIB", "ausEnclosureTemperatureSensorIndex"))
if mibBuilder.loadTexts: ausEnclosureTemperatureSensorEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ausEnclosureTemperatureSensorEntry.setDescription('An enclosure temperature sensor entry.')
ausEnclosureTemperatureSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 502, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausEnclosureTemperatureSensorIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ausEnclosureTemperatureSensorIndex.setDescription('A unique index value for each temperature sensor.')
ausEnclosureTemperatureSensorAusEnclosureDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 502, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausEnclosureTemperatureSensorAusEnclosureDeviceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ausEnclosureTemperatureSensorAusEnclosureDeviceIndex.setDescription('The index of the ausEnclosureDeviceTable entry housing this temperature sensor.')
ausEnclosureTemperatureSensorOrdinal = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 502, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausEnclosureTemperatureSensorOrdinal.setStatus('mandatory')
if mibBuilder.loadTexts: ausEnclosureTemperatureSensorOrdinal.setDescription('Zero-relative temperature sensor number within an enclosure.')
ausEnclosureTemperatureSensorOverTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 502, 1, 1, 4), ObjectStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausEnclosureTemperatureSensorOverTemperature.setStatus('mandatory')
if mibBuilder.loadTexts: ausEnclosureTemperatureSensorOverTemperature.setDescription('Specifies whether this temperature sensor has detected an over temperature condition.')
ausEnclosureTemperatureSensorDegrees = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 502, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausEnclosureTemperatureSensorDegrees.setStatus('mandatory')
if mibBuilder.loadTexts: ausEnclosureTemperatureSensorDegrees.setDescription('Temperature registered by this sensor in degrees Fahrenheit.')
ausEnclosureSlotTable = MibTable((1, 3, 6, 1, 4, 1, 795, 14, 1, 503, 1), )
if mibBuilder.loadTexts: ausEnclosureSlotTable.setStatus('mandatory')
if mibBuilder.loadTexts: ausEnclosureSlotTable.setDescription('A list of enclosure slots.')
ausEnclosureSlotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 795, 14, 1, 503, 1, 1), ).setIndexNames((0, "ADAPTEC-UNIVERSAL-STORAGE-MIB", "ausEnclosureSlotIndex"))
if mibBuilder.loadTexts: ausEnclosureSlotEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ausEnclosureSlotEntry.setDescription('An enclosure slot entry.')
ausEnclosureSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 503, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausEnclosureSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ausEnclosureSlotIndex.setDescription('A unique index value for each slot.')
ausEnclosureSlotAusEnclosureDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 503, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausEnclosureSlotAusEnclosureDeviceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ausEnclosureSlotAusEnclosureDeviceIndex.setDescription('The index of the ausEnclosureDeviceTable entry housing this slot.')
ausEnclosureSlotOrdinal = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 503, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausEnclosureSlotOrdinal.setStatus('mandatory')
if mibBuilder.loadTexts: ausEnclosureSlotOrdinal.setDescription('Zero-relative slot number within an enclosure.')
ausEnclosureSlotPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 503, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausEnclosureSlotPortId.setStatus('mandatory')
if mibBuilder.loadTexts: ausEnclosureSlotPortId.setDescription('Port ID number used by the device at this slot. Meaning is dependent on channel type. For example, SCSI channels would report device SCSI ID in this field. The field is a string to allow for a wide range of addressing schemes.')
ausEnclosureSlotInsertions = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 503, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausEnclosureSlotInsertions.setStatus('mandatory')
if mibBuilder.loadTexts: ausEnclosureSlotInsertions.setDescription('Number of device insertions for this slot.')
ausArrayTable = MibTable((1, 3, 6, 1, 4, 1, 795, 14, 1, 1000, 1), )
if mibBuilder.loadTexts: ausArrayTable.setStatus('mandatory')
if mibBuilder.loadTexts: ausArrayTable.setDescription('A list of arrays.')
ausArrayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 795, 14, 1, 1000, 1, 1), ).setIndexNames((0, "ADAPTEC-UNIVERSAL-STORAGE-MIB", "ausArrayIndex"))
if mibBuilder.loadTexts: ausArrayEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ausArrayEntry.setDescription('An array entry.')
ausArrayIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 1000, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausArrayIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ausArrayIndex.setDescription('A unique index value for each array beginning with 1.')
ausArrayName = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 1000, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausArrayName.setStatus('mandatory')
if mibBuilder.loadTexts: ausArrayName.setDescription('The name assigned to this array.')
ausArrayCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 1000, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausArrayCapacity.setStatus('mandatory')
if mibBuilder.loadTexts: ausArrayCapacity.setDescription('Capacity of this array in megabytes. This is data (usable) size, not the sum of all extents.')
ausArrayType = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 1000, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("unknown", 1), ("other", 2), ("raid0", 3), ("raid1", 4), ("raid2", 5), ("raid3", 6), ("raid4", 7), ("raid5", 8), ("raid6", 9), ("raid10", 10), ("raid50", 11), ("volume", 12), ("volume-of-raid0", 13), ("volume-of-raid1", 14), ("volume-of-raid5", 15), ("raid1e", 16), ("raid5ee", 17), ("raid-volume", 18), ("raid60", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausArrayType.setStatus('mandatory')
if mibBuilder.loadTexts: ausArrayType.setDescription('RAID level used by this array.')
ausArrayStripeSize = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 1000, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausArrayStripeSize.setStatus('mandatory')
if mibBuilder.loadTexts: ausArrayStripeSize.setDescription('Stripe size used by this array.')
ausArrayTaskStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 1000, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("unknown", 1), ("other", 2), ("noTaskActive", 3), ("reconstruct", 4), ("zeroInitialize", 5), ("verify", 6), ("verifyWithFix", 7), ("modification", 8), ("copyback", 9), ("compaction", 10), ("expansion", 11), ("snapshotBackup", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausArrayTaskStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ausArrayTaskStatus.setDescription('Task status of this array.')
ausArrayTaskCompletion = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 1000, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausArrayTaskCompletion.setStatus('mandatory')
if mibBuilder.loadTexts: ausArrayTaskCompletion.setDescription('Percentage completion of running task, if any. Reports as 100 if no task is active.')
ausArrayTaskPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 1000, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("unknown", 1), ("other", 2), ("notSupported", 3), ("notApplicable", 4), ("none", 5), ("low", 6), ("medium", 7), ("high", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausArrayTaskPriority.setStatus('mandatory')
if mibBuilder.loadTexts: ausArrayTaskPriority.setDescription('Priority of the running task (if any).')
ausArrayHostingControllerType = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 1000, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("physicalController", 1), ("aggregateController", 2), ("externalRaidController", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausArrayHostingControllerType.setStatus('mandatory')
if mibBuilder.loadTexts: ausArrayHostingControllerType.setDescription('This field tells whether the hosting controller for this array is an actual physical controller, an aggregate controller (multiple controllers made to look like one through software), or an external RAID controller. This field is used to select the meaning of the following ausArrayControllerIndex field.')
ausArrayHostingControllerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 1000, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausArrayHostingControllerIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ausArrayHostingControllerIndex.setDescription('This field associates this array with its hosting controller. if the ausArrayControllerType field equals physicalController, then this field is an index into the ausController table. If the ausArrayControllerType field equals aggregateController, then this field is an index into the ausAggregateController table. If the ausArrayControllerType field equal externalRaidController, then this field is an index into the ausExternalRaidDevice table.')
ausArrayStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 1000, 1, 1, 11), ObjectStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausArrayStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ausArrayStatus.setDescription('Current health of this array.')
ausArrayState = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 1000, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("unknown", 1), ("other", 2), ("optimal", 3), ("quickInited", 4), ("impacted", 5), ("degraded", 6), ("failed", 7), ("compacted", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausArrayState.setStatus('mandatory')
if mibBuilder.loadTexts: ausArrayState.setDescription('Current health of this array.')
ausArrayCacheStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 1000, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("other", 2), ("disabled", 3), ("writeBack", 4), ("writeThru", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausArrayCacheStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ausArrayCacheStatus.setDescription('Current write cache status of this array.')
ausArrayMembership = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 1000, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausArrayMembership.setStatus('mandatory')
if mibBuilder.loadTexts: ausArrayMembership.setDescription('For non-composite arrays (e.g., a straight mirror, RAID-1, set) this field is always 0. For composite arrays (e.g. stripe set of mirrors, RAID-10) this field indicates the position in the array hierarchy. If this is the topmost array in the hierarchy, this field will be 0. If this is a subordinate array in the hierarchy, this field is set to a value equal to the index of the entry in the Array Table locating its parent.')
ausExtentTable = MibTable((1, 3, 6, 1, 4, 1, 795, 14, 1, 1001, 1), )
if mibBuilder.loadTexts: ausExtentTable.setStatus('mandatory')
if mibBuilder.loadTexts: ausExtentTable.setDescription('A list of disk extents.')
ausExtentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 795, 14, 1, 1001, 1, 1), ).setIndexNames((0, "ADAPTEC-UNIVERSAL-STORAGE-MIB", "ausExtentIndex"))
if mibBuilder.loadTexts: ausExtentEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ausExtentEntry.setDescription('A disk extent entry.')
ausExtentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 1001, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausExtentIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ausExtentIndex.setDescription('A unique index value for each disk extent beginning with 1.')
ausExtentAusDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 1001, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausExtentAusDeviceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ausExtentAusDeviceIndex.setDescription('Index into the Adaptec Universal Storage device table that describes the physical disk containing this extent.')
ausExtentSize = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 1001, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausExtentSize.setStatus('mandatory')
if mibBuilder.loadTexts: ausExtentSize.setDescription('Size of this extent rounded to nearest megabyte.')
ausExtentStartingLBALow = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 1001, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausExtentStartingLBALow.setStatus('mandatory')
if mibBuilder.loadTexts: ausExtentStartingLBALow.setDescription('Starting disk LBA (logical buffer address) used by this extent (least significant 32 bits of 64 bit value).')
ausExtentStartingLBAHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 1001, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausExtentStartingLBAHigh.setStatus('mandatory')
if mibBuilder.loadTexts: ausExtentStartingLBAHigh.setDescription('Starting disk LBA (logical buffer address) used by this extent (most significant 32 bits of 64 bit value).')
ausExtentNumberOfBlocksLow = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 1001, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausExtentNumberOfBlocksLow.setStatus('mandatory')
if mibBuilder.loadTexts: ausExtentNumberOfBlocksLow.setDescription('Number of disk blocks used by this extent (least significant 32 bits of 64 bit value).')
ausExtentNumberOfBlocksHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 1001, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausExtentNumberOfBlocksHigh.setStatus('mandatory')
if mibBuilder.loadTexts: ausExtentNumberOfBlocksHigh.setDescription('Number of disk blocks used by this extent (most significant 32 bits of 64 bit value).')
ausExtentArrayMembership = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 1001, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausExtentArrayMembership.setStatus('mandatory')
if mibBuilder.loadTexts: ausExtentArrayMembership.setDescription('Index into the Adaptec Universal Storage array table selecting the array of which this extent is a member.')
ausSpareTable = MibTable((1, 3, 6, 1, 4, 1, 795, 14, 1, 1002, 1), )
if mibBuilder.loadTexts: ausSpareTable.setStatus('mandatory')
if mibBuilder.loadTexts: ausSpareTable.setDescription('A list of spares.')
ausSpareEntry = MibTableRow((1, 3, 6, 1, 4, 1, 795, 14, 1, 1002, 1, 1), ).setIndexNames((0, "ADAPTEC-UNIVERSAL-STORAGE-MIB", "ausSpareIndex"))
if mibBuilder.loadTexts: ausSpareEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ausSpareEntry.setDescription('A spare entry.')
ausSpareIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 1002, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausSpareIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ausSpareIndex.setDescription('A unique index value for each spare beginning with 1.')
ausSpareAusDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 1002, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausSpareAusDeviceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ausSpareAusDeviceIndex.setDescription('Index into the Adaptec Universal Storage device table that describes the physical disk corresponding to this spare.')
ausSpareType = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 1002, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("global", 1), ("dedicated", 2), ("externalRaidGlobal", 3), ("unknown", 4), ("other", 5), ("standby", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausSpareType.setStatus('mandatory')
if mibBuilder.loadTexts: ausSpareType.setDescription('Specifies whether this is a global spare (allocated to a controller), a dedicated spare (allocated to an array), an external RAID global spare (allocated to an external RAID controller), or a standby spare (allocated to a controller).')
ausSpareAusControllerOrArrayIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 1002, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausSpareAusControllerOrArrayIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ausSpareAusControllerOrArrayIndex.setDescription('If this is a global spare, this field contains an index into the Adaptec Universal Storage controller table selecting the controller for which the spare relationship exists. If this is a dedicated spare, this field contains an index into the Adaptec Universal Storage array table selecting the array for which the spare relationship exists. If this is an external RAID global spare, this field contains an index into the Adaptec Universal Storage external RAID device table selecting the controller for which the spare relationship exists.')
ausEventLogNumEntries = MibScalar((1, 3, 6, 1, 4, 1, 795, 14, 1, 2000, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausEventLogNumEntries.setStatus('mandatory')
if mibBuilder.loadTexts: ausEventLogNumEntries.setDescription('The number of entries in the Event Log.')
ausEventLogTable = MibTable((1, 3, 6, 1, 4, 1, 795, 14, 1, 2001, 1), )
if mibBuilder.loadTexts: ausEventLogTable.setStatus('mandatory')
if mibBuilder.loadTexts: ausEventLogTable.setDescription('A circular list of event log entries. The number of entries is given by the value of eventLogCount. Current maximum event log count is fixed at 256, but could be programmable (via MIB variable and/or .INI file) in the future.')
ausEventLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 795, 14, 1, 2001, 1, 1), ).setIndexNames((0, "ADAPTEC-UNIVERSAL-STORAGE-MIB", "ausEventLogIndex"))
if mibBuilder.loadTexts: ausEventLogEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ausEventLogEntry.setDescription('An event log entry.')
ausEventLogIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 2001, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausEventLogIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ausEventLogIndex.setDescription('A unique index value for each event log table entry beginning with 1.')
ausEventLogString = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 2001, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausEventLogString.setStatus('mandatory')
if mibBuilder.loadTexts: ausEventLogString.setDescription('A text string containing the text of the event as generated by middleware.')
ausEventLogTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 14, 1, 2001, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ausEventLogTimeStamp.setStatus('mandatory')
if mibBuilder.loadTexts: ausEventLogTimeStamp.setDescription('The time stamp assigned this event by middleware, in UNIX time_t format.')
ausTrapObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 795, 14, 1, 9000))
ausTrapMessage = MibScalar((1, 3, 6, 1, 4, 1, 795, 14, 1, 9000, 1), DisplayString())
if mibBuilder.loadTexts: ausTrapMessage.setStatus('mandatory')
if mibBuilder.loadTexts: ausTrapMessage.setDescription('Message delivered by the trap.')
ausTrapObjectIndex = MibScalar((1, 3, 6, 1, 4, 1, 795, 14, 1, 9000, 2), Integer32())
if mibBuilder.loadTexts: ausTrapObjectIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ausTrapObjectIndex.setDescription('An index into a MIB table specifying the object associated with the trap. If the index is 0, then an index is not available (for example, for a deleted object).')
ausTrapControllerType = MibScalar((1, 3, 6, 1, 4, 1, 795, 14, 1, 9000, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("aggregateController", 1), ("internalController", 2), ("externalController", 3))))
if mibBuilder.loadTexts: ausTrapControllerType.setStatus('mandatory')
if mibBuilder.loadTexts: ausTrapControllerType.setDescription('Describes which type of controller generated this trap, and therefore which table is indexed.')
ausTrapControllerStatus = MibScalar((1, 3, 6, 1, 4, 1, 795, 14, 1, 9000, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("okay", 1), ("noControllersFound", 2), ("controllerAdded", 3), ("controllerDeleted", 4), ("controllerFailover", 5), ("commandsNotResponding", 6), ("cannotReadControllerInformation", 7), ("replaceBattery", 8), ("defectiveCache", 9), ("firmwareVersionMismatch", 10))))
if mibBuilder.loadTexts: ausTrapControllerStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ausTrapControllerStatus.setDescription('Status of the controller that generated this trap.')
ausTrapDeviceStatus = MibScalar((1, 3, 6, 1, 4, 1, 795, 14, 1, 9000, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("okay", 1), ("deviceAdded", 2), ("deviceRemoved", 3), ("deviceFailed", 4), ("smartEvent", 5), ("unsupportedDeviceType", 6))))
if mibBuilder.loadTexts: ausTrapDeviceStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ausTrapDeviceStatus.setDescription('Status of the device that generated this trap.')
ausTrapEnclosureStatus = MibScalar((1, 3, 6, 1, 4, 1, 795, 14, 1, 9000, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("enclosureResponding", 1), ("enclosureNotResponding", 2), ("fanMalfunction", 3), ("fanOperational", 4), ("fanRemoved", 5), ("fanInstalled", 6), ("temperatureInRange", 7), ("temperatureOutOfRange", 8), ("powerSupplyMalfunction", 9), ("powerSupplyOperational", 10), ("powerSupplyRemoved", 11), ("powerSupplyInstalled", 12))))
if mibBuilder.loadTexts: ausTrapEnclosureStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ausTrapEnclosureStatus.setDescription('Status of the enclosure that generated this trap.')
ausTrapEnclosureObjectOrdinal = MibScalar((1, 3, 6, 1, 4, 1, 795, 14, 1, 9000, 7), Integer32())
if mibBuilder.loadTexts: ausTrapEnclosureObjectOrdinal.setStatus('mandatory')
if mibBuilder.loadTexts: ausTrapEnclosureObjectOrdinal.setDescription('Zero relative ordinal number of affected fan, temperature sensor, power supply, slot, etc., in an enclosure. Field will be -1 if not needed (for example, when the trap refers to the enclosure as a whole rather than a piece of the enclosure).')
ausTrapArrayStatus = MibScalar((1, 3, 6, 1, 4, 1, 795, 14, 1, 9000, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("okay", 1), ("critical", 2), ("offline", 3), ("blocked", 4), ("unblocked", 5))))
if mibBuilder.loadTexts: ausTrapArrayStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ausTrapArrayStatus.setDescription('Status of the array that generated this trap.')
ausTrapArrayTaskStatus = MibScalar((1, 3, 6, 1, 4, 1, 795, 14, 1, 9000, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24))).clone(namedValues=NamedValues(("rebuilding", 1), ("rebuildComplete", 2), ("rebuildFailed", 3), ("synchronizing", 4), ("synchronizationComplete", 5), ("synchronizationFailed", 6), ("migrating", 7), ("migrationComplete", 8), ("migrationFailed", 9), ("compressing", 10), ("compressionComplete", 11), ("compressionFailed", 12), ("decompressing", 13), ("decompressionComplete", 14), ("decompressionFailed", 15), ("compacting", 16), ("compactionComplete", 17), ("compactionFailed", 18), ("expanding", 19), ("expansionComplete", 20), ("expansionFailed", 21), ("flashCopying", 22), ("flashCopyComplete", 23), ("flashCopyFailed", 24))))
if mibBuilder.loadTexts: ausTrapArrayTaskStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ausTrapArrayTaskStatus.setDescription('Status of the array task that generated this trap.')
ausTrapSpareStatus = MibScalar((1, 3, 6, 1, 4, 1, 795, 14, 1, 9000, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("okay", 1), ("added", 2), ("deleted", 3), ("failed", 4))))
if mibBuilder.loadTexts: ausTrapSpareStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ausTrapSpareStatus.setDescription('Status of the spare that generated this trap.')
ausTrapEnumAsText = MibScalar((1, 3, 6, 1, 4, 1, 795, 14, 1, 9000, 11), DisplayString())
if mibBuilder.loadTexts: ausTrapEnumAsText.setStatus('mandatory')
if mibBuilder.loadTexts: ausTrapEnumAsText.setDescription('A string corresponding to a trap enumeration value.')
ausTrapOtherInformational = NotificationType((1, 3, 6, 1, 4, 1, 795, 14, 1) + (0,1001)).setObjects(("ADAPTEC-UNIVERSAL-STORAGE-MIB", "ausTrapMessage"))
if mibBuilder.loadTexts: ausTrapOtherInformational.setDescription('Other informational trap message')
ausTrapOtherWarning = NotificationType((1, 3, 6, 1, 4, 1, 795, 14, 1) + (0,1002)).setObjects(("ADAPTEC-UNIVERSAL-STORAGE-MIB", "ausTrapMessage"))
if mibBuilder.loadTexts: ausTrapOtherWarning.setDescription('Other warning trap message')
ausTrapOtherFatal = NotificationType((1, 3, 6, 1, 4, 1, 795, 14, 1) + (0,1003)).setObjects(("ADAPTEC-UNIVERSAL-STORAGE-MIB", "ausTrapMessage"))
if mibBuilder.loadTexts: ausTrapOtherFatal.setDescription('Other fatal trap message')
ausTrapDeviceInformation = NotificationType((1, 3, 6, 1, 4, 1, 795, 14, 1) + (0,1010)).setObjects(("ADAPTEC-UNIVERSAL-STORAGE-MIB", "ausTrapObjectIndex"), ("ADAPTEC-UNIVERSAL-STORAGE-MIB", "ausTrapDeviceStatus"), ("ADAPTEC-UNIVERSAL-STORAGE-MIB", "ausTrapEnumAsText"))
if mibBuilder.loadTexts: ausTrapDeviceInformation.setDescription('Informational status of a device')
ausTrapDeviceWarning = NotificationType((1, 3, 6, 1, 4, 1, 795, 14, 1) + (0,1011)).setObjects(("ADAPTEC-UNIVERSAL-STORAGE-MIB", "ausTrapObjectIndex"), ("ADAPTEC-UNIVERSAL-STORAGE-MIB", "ausTrapDeviceStatus"), ("ADAPTEC-UNIVERSAL-STORAGE-MIB", "ausTrapEnumAsText"))
if mibBuilder.loadTexts: ausTrapDeviceWarning.setDescription('Warning status of a device')
ausTrapDeviceFatal = NotificationType((1, 3, 6, 1, 4, 1, 795, 14, 1) + (0,1012)).setObjects(("ADAPTEC-UNIVERSAL-STORAGE-MIB", "ausTrapObjectIndex"), ("ADAPTEC-UNIVERSAL-STORAGE-MIB", "ausTrapDeviceStatus"), ("ADAPTEC-UNIVERSAL-STORAGE-MIB", "ausTrapEnumAsText"))
if mibBuilder.loadTexts: ausTrapDeviceFatal.setDescription('Fatal status of a device')
ausTrapEnclosureInformation = NotificationType((1, 3, 6, 1, 4, 1, 795, 14, 1) + (0,1020)).setObjects(("ADAPTEC-UNIVERSAL-STORAGE-MIB", "ausTrapObjectIndex"), ("ADAPTEC-UNIVERSAL-STORAGE-MIB", "ausTrapEnclosureStatus"), ("ADAPTEC-UNIVERSAL-STORAGE-MIB", "ausTrapEnumAsText"), ("ADAPTEC-UNIVERSAL-STORAGE-MIB", "ausTrapEnclosureObjectOrdinal"))
if mibBuilder.loadTexts: ausTrapEnclosureInformation.setDescription('Informational status of an enclosure')
ausTrapEnclosureWarning = NotificationType((1, 3, 6, 1, 4, 1, 795, 14, 1) + (0,1021)).setObjects(("ADAPTEC-UNIVERSAL-STORAGE-MIB", "ausTrapObjectIndex"), ("ADAPTEC-UNIVERSAL-STORAGE-MIB", "ausTrapEnclosureStatus"), ("ADAPTEC-UNIVERSAL-STORAGE-MIB", "ausTrapEnumAsText"), ("ADAPTEC-UNIVERSAL-STORAGE-MIB", "ausTrapEnclosureObjectOrdinal"))
if mibBuilder.loadTexts: ausTrapEnclosureWarning.setDescription('Warning status of an enclosure')
ausTrapEnclosureFatal = NotificationType((1, 3, 6, 1, 4, 1, 795, 14, 1) + (0,1022)).setObjects(("ADAPTEC-UNIVERSAL-STORAGE-MIB", "ausTrapObjectIndex"), ("ADAPTEC-UNIVERSAL-STORAGE-MIB", "ausTrapEnclosureStatus"), ("ADAPTEC-UNIVERSAL-STORAGE-MIB", "ausTrapEnumAsText"), ("ADAPTEC-UNIVERSAL-STORAGE-MIB", "ausTrapEnclosureObjectOrdinal"))
if mibBuilder.loadTexts: ausTrapEnclosureFatal.setDescription('Fatal status of an enclosure')
ausTrapArrayInformation = NotificationType((1, 3, 6, 1, 4, 1, 795, 14, 1) + (0,1030)).setObjects(("ADAPTEC-UNIVERSAL-STORAGE-MIB", "ausTrapObjectIndex"), ("ADAPTEC-UNIVERSAL-STORAGE-MIB", "ausTrapArrayStatus"), ("ADAPTEC-UNIVERSAL-STORAGE-MIB", "ausTrapEnumAsText"))
if mibBuilder.loadTexts: ausTrapArrayInformation.setDescription('Informational status of an array')
ausTrapArrayWarning = NotificationType((1, 3, 6, 1, 4, 1, 795, 14, 1) + (0,1031)).setObjects(("ADAPTEC-UNIVERSAL-STORAGE-MIB", "ausTrapObjectIndex"), ("ADAPTEC-UNIVERSAL-STORAGE-MIB", "ausTrapArrayStatus"), ("ADAPTEC-UNIVERSAL-STORAGE-MIB", "ausTrapEnumAsText"))
if mibBuilder.loadTexts: ausTrapArrayWarning.setDescription('Warning status of an array')
ausTrapArrayFatal = NotificationType((1, 3, 6, 1, 4, 1, 795, 14, 1) + (0,1032)).setObjects(("ADAPTEC-UNIVERSAL-STORAGE-MIB", "ausTrapObjectIndex"), ("ADAPTEC-UNIVERSAL-STORAGE-MIB", "ausTrapArrayStatus"), ("ADAPTEC-UNIVERSAL-STORAGE-MIB", "ausTrapEnumAsText"))
if mibBuilder.loadTexts: ausTrapArrayFatal.setDescription('Fatal status of an array')
ausTrapArrayTaskInformation = NotificationType((1, 3, 6, 1, 4, 1, 795, 14, 1) + (0,1040)).setObjects(("ADAPTEC-UNIVERSAL-STORAGE-MIB", "ausTrapObjectIndex"), ("ADAPTEC-UNIVERSAL-STORAGE-MIB", "ausTrapArrayTaskStatus"), ("ADAPTEC-UNIVERSAL-STORAGE-MIB", "ausTrapEnumAsText"))
if mibBuilder.loadTexts: ausTrapArrayTaskInformation.setDescription('Informational status of an array task')
ausTrapArrayTaskWarning = NotificationType((1, 3, 6, 1, 4, 1, 795, 14, 1) + (0,1041)).setObjects(("ADAPTEC-UNIVERSAL-STORAGE-MIB", "ausTrapObjectIndex"), ("ADAPTEC-UNIVERSAL-STORAGE-MIB", "ausTrapArrayTaskStatus"), ("ADAPTEC-UNIVERSAL-STORAGE-MIB", "ausTrapEnumAsText"))
if mibBuilder.loadTexts: ausTrapArrayTaskWarning.setDescription('Warning status of an array task')
ausTrapArrayTaskFatal = NotificationType((1, 3, 6, 1, 4, 1, 795, 14, 1) + (0,1042)).setObjects(("ADAPTEC-UNIVERSAL-STORAGE-MIB", "ausTrapObjectIndex"), ("ADAPTEC-UNIVERSAL-STORAGE-MIB", "ausTrapArrayTaskStatus"), ("ADAPTEC-UNIVERSAL-STORAGE-MIB", "ausTrapEnumAsText"))
if mibBuilder.loadTexts: ausTrapArrayTaskFatal.setDescription('Fatal status of an array task')
ausTrapSpareInformation = NotificationType((1, 3, 6, 1, 4, 1, 795, 14, 1) + (0,1050)).setObjects(("ADAPTEC-UNIVERSAL-STORAGE-MIB", "ausTrapObjectIndex"), ("ADAPTEC-UNIVERSAL-STORAGE-MIB", "ausTrapSpareStatus"), ("ADAPTEC-UNIVERSAL-STORAGE-MIB", "ausTrapEnumAsText"))
if mibBuilder.loadTexts: ausTrapSpareInformation.setDescription('Informational status of a spare')
ausTrapSpareWarning = NotificationType((1, 3, 6, 1, 4, 1, 795, 14, 1) + (0,1051)).setObjects(("ADAPTEC-UNIVERSAL-STORAGE-MIB", "ausTrapObjectIndex"), ("ADAPTEC-UNIVERSAL-STORAGE-MIB", "ausTrapSpareStatus"), ("ADAPTEC-UNIVERSAL-STORAGE-MIB", "ausTrapEnumAsText"))
if mibBuilder.loadTexts: ausTrapSpareWarning.setDescription('Warning status of a spare')
ausTrapSpareFatal = NotificationType((1, 3, 6, 1, 4, 1, 795, 14, 1) + (0,1052)).setObjects(("ADAPTEC-UNIVERSAL-STORAGE-MIB", "ausTrapObjectIndex"), ("ADAPTEC-UNIVERSAL-STORAGE-MIB", "ausTrapSpareStatus"), ("ADAPTEC-UNIVERSAL-STORAGE-MIB", "ausTrapEnumAsText"))
if mibBuilder.loadTexts: ausTrapSpareFatal.setDescription('Fatal status of a spare')
mibBuilder.exportSymbols("ADAPTEC-UNIVERSAL-STORAGE-MIB", ausExternalRaidDeviceEntry=ausExternalRaidDeviceEntry, ausTrapArrayStatus=ausTrapArrayStatus, ausTrapArrayTaskWarning=ausTrapArrayTaskWarning, ausControllerIndex=ausControllerIndex, ausDeviceTypeGroup=ausDeviceTypeGroup, ausTrapObjectIndex=ausTrapObjectIndex, ausExternalRaidDeviceAudibleAlarmStatus=ausExternalRaidDeviceAudibleAlarmStatus, ausCCodeController=ausCCodeController, ausHostRAIDControllerPCIBus=ausHostRAIDControllerPCIBus, ausChannelType=ausChannelType, ausEnclosureSlotInsertions=ausEnclosureSlotInsertions, ausServeRAIDControllerIndex=ausServeRAIDControllerIndex, ausChannelEntry=ausChannelEntry, ausStorageDeviceNumberOfBlocksLow=ausStorageDeviceNumberOfBlocksLow, ausDeviceSerialNumber=ausDeviceSerialNumber, ausExternalRaidDeviceBatteryStatus=ausExternalRaidDeviceBatteryStatus, ausChannelMaximumAttachments=ausChannelMaximumAttachments, ausChannelRelationshipIndex=ausChannelRelationshipIndex, ausEnclosurePowerSupplyTable=ausEnclosurePowerSupplyTable, ausSpareIndex=ausSpareIndex, ausSpareAusControllerOrArrayIndex=ausSpareAusControllerOrArrayIndex, ausChannelLocation=ausChannelLocation, ausDevicePortAusChannelIndex=ausDevicePortAusChannelIndex, ausI2ORaidControllerSmorRevision=ausI2ORaidControllerSmorRevision, ausEnclosureDeviceNumberOfFans=ausEnclosureDeviceNumberOfFans, ausTrapEnumAsText=ausTrapEnumAsText, ausExternalRaidDevice=ausExternalRaidDevice, ausControllerRelationshipRelation=ausControllerRelationshipRelation, ausDevicePortNegotiatedTransferRate=ausDevicePortNegotiatedTransferRate, ausI2ORaidControllerBackgroundTaskPriority=ausI2ORaidControllerBackgroundTaskPriority, ausExternalRaidDeviceMainIndex=ausExternalRaidDeviceMainIndex, ausEnclosureFanSpeed=ausEnclosureFanSpeed, ausTrapEnclosureObjectOrdinal=ausTrapEnclosureObjectOrdinal, ausTrapArrayTaskInformation=ausTrapArrayTaskInformation, ausControllerHostBusType=ausControllerHostBusType, ausExtentIndex=ausExtentIndex, ausEnclosureDeviceStandardRevision=ausEnclosureDeviceStandardRevision, ausEventLogIndex=ausEventLogIndex, ausAggregatedControllerIndex=ausAggregatedControllerIndex, ausEnclosureSlot=ausEnclosureSlot, ausChannelAusControllerIndex=ausChannelAusControllerIndex, ausChannelMaximumTransferRate=ausChannelMaximumTransferRate, ausControllerInstalledMemory=ausControllerInstalledMemory, ausStorageDeviceTable=ausStorageDeviceTable, ausTrapArrayInformation=ausTrapArrayInformation, ausEnclosureSlotTable=ausEnclosureSlotTable, ausEventLogNumEntries=ausEventLogNumEntries, ausChannelControllerId=ausChannelControllerId, ausDeviceEntry=ausDeviceEntry, ausTrapDeviceWarning=ausTrapDeviceWarning, ausI2ORaidControllerIndex=ausI2ORaidControllerIndex, ausSpareEntry=ausSpareEntry, ausCCodeControllerPCISlotNumber=ausCCodeControllerPCISlotNumber, ausTrapEnclosureFatal=ausTrapEnclosureFatal, ausTrapArrayWarning=ausTrapArrayWarning, ausDeviceNumberOfPorts=ausDeviceNumberOfPorts, ausTrapControllerStatus=ausTrapControllerStatus, ausController=ausController, ausEnclosureDevice=ausEnclosureDevice, ausDeviceUniqueId=ausDeviceUniqueId, ausStorageDeviceRemovableMedia=ausStorageDeviceRemovableMedia, ausEnclosureDeviceTable=ausEnclosureDeviceTable, ausArrayState=ausArrayState, ausExternalRaidDeviceInstalledMemory=ausExternalRaidDeviceInstalledMemory, TriState=TriState, ausHostRAIDControllerEntry=ausHostRAIDControllerEntry, ausDevicePortStatus=ausDevicePortStatus, ausCCodeControllerMainIndex=ausCCodeControllerMainIndex, ausEnclosureDeviceIdLow=ausEnclosureDeviceIdLow, ausTrapDeviceInformation=ausTrapDeviceInformation, ausEnclosureTemperatureSensor=ausEnclosureTemperatureSensor, ausEventLogString=ausEventLogString, ausEnclosureDeviceProcessorType=ausEnclosureDeviceProcessorType, BatteryStatus=BatteryStatus, ausTrapDeviceStatus=ausTrapDeviceStatus, ausTrapOtherFatal=ausTrapOtherFatal, ausAggregatedController=ausAggregatedController, ausEnclosureFan=ausEnclosureFan, ausHostRAIDControllerPCIDevice=ausHostRAIDControllerPCIDevice, ausMibStatus=ausMibStatus, ausOtherDeviceEntry=ausOtherDeviceEntry, ausEnclosurePowerSupplyOrdinal=ausEnclosurePowerSupplyOrdinal, universalStorage=universalStorage, ausArrayIndex=ausArrayIndex, ausControllerHostBusMaximumTransferRate=ausControllerHostBusMaximumTransferRate, ausEnclosureFanStatus=ausEnclosureFanStatus, ausExtentTable=ausExtentTable, ausEnclosureDeviceEntry=ausEnclosureDeviceEntry, ausMibStatusRevMajor=ausMibStatusRevMajor, ausOtherDevice=ausOtherDevice, ausAggregatedControllerEntry=ausAggregatedControllerEntry, adaptec=adaptec, ausStorageDeviceNumberOfBlocksHigh=ausStorageDeviceNumberOfBlocksHigh, ausArrayTaskStatus=ausArrayTaskStatus, ausControllerVendor=ausControllerVendor, ausCCodeControllerBiosVersion=ausCCodeControllerBiosVersion, ausChannelIndex=ausChannelIndex, ausArrayTable=ausArrayTable, ausDevicePortEntry=ausDevicePortEntry, ausExtent=ausExtent, ausEventLogTimeStamp=ausEventLogTimeStamp, ausArrayCacheStatus=ausArrayCacheStatus, ausTrapSpareFatal=ausTrapSpareFatal, ausEnclosureFanEntry=ausEnclosureFanEntry, ausEnclosureDeviceMainIndex=ausEnclosureDeviceMainIndex, ausTrapSpareInformation=ausTrapSpareInformation, ausDeviceRevision=ausDeviceRevision, ausDeviceVendor=ausDeviceVendor, ausAggregatedControllerList=ausAggregatedControllerList, ausHostRAIDController=ausHostRAIDController, ausEnclosureDeviceDoorLock=ausEnclosureDeviceDoorLock, ausEnclosureTemperatureSensorOrdinal=ausEnclosureTemperatureSensorOrdinal, ausControllerRelationshipTable=ausControllerRelationshipTable, ausDeviceType=ausDeviceType, ausStorageDeviceMainIndex=ausStorageDeviceMainIndex, ausControllerTable=ausControllerTable, ausEnclosurePowerSupplyIndex=ausEnclosurePowerSupplyIndex, ausEnclosureTemperatureSensorTable=ausEnclosureTemperatureSensorTable, ausTrapOtherWarning=ausTrapOtherWarning, ausTrapDeviceFatal=ausTrapDeviceFatal, ausEnclosureSlotOrdinal=ausEnclosureSlotOrdinal, ausCCodeControllerPCIBusId=ausCCodeControllerPCIBusId, ausChannelTypeDescription=ausChannelTypeDescription, ausEnclosureTemperatureSensorEntry=ausEnclosureTemperatureSensorEntry, ausExtentEntry=ausExtentEntry, ausEnclosurePowerSupply=ausEnclosurePowerSupply, ausHostRAIDControllerTable=ausHostRAIDControllerTable, ausEnclosurePowerSupplyAusEnclosureDeviceIndex=ausEnclosurePowerSupplyAusEnclosureDeviceIndex, ausArrayHostingControllerIndex=ausArrayHostingControllerIndex, ausEnclosureFanIndex=ausEnclosureFanIndex, ausControllerHighestChannelWithDevices=ausControllerHighestChannelWithDevices, ausOtherDeviceTable=ausOtherDeviceTable, ausTrapEnclosureWarning=ausTrapEnclosureWarning, ausControllerRelationshipType=ausControllerRelationshipType, ausServeRAIDControllerBIOSRevision=ausServeRAIDControllerBIOSRevision, ausControllerSerialNumber=ausControllerSerialNumber, ausServeRAIDControllerMainIndex=ausServeRAIDControllerMainIndex, IndexList=IndexList, ausEnclosureDeviceNumberOfPowerSupplies=ausEnclosureDeviceNumberOfPowerSupplies, ausI2ORaidControllerBiosRevision=ausI2ORaidControllerBiosRevision, ausSpare=ausSpare, ausControllerAudibleAlarmStatus=ausControllerAudibleAlarmStatus, ausEnclosureDeviceNumberOfSlots=ausEnclosureDeviceNumberOfSlots, ausEventLogCount=ausEventLogCount, ausArrayEntry=ausArrayEntry, ausEnclosureSlotAusEnclosureDeviceIndex=ausEnclosureSlotAusEnclosureDeviceIndex, ausTrapSpareStatus=ausTrapSpareStatus, ausDeviceAusChannelIndices=ausDeviceAusChannelIndices, ausStorageDeviceEntry=ausStorageDeviceEntry, ausArrayHostingControllerType=ausArrayHostingControllerType, ausStorageDeviceBlockSize=ausStorageDeviceBlockSize, ausDevicePort=ausDevicePort, ausControllerUniqueId=ausControllerUniqueId, ausEnclosureDeviceTemperatureState=ausEnclosureDeviceTemperatureState, ausSpareType=ausSpareType, ausStorageDeviceIndex=ausStorageDeviceIndex, ausDevicePortId=ausDevicePortId, ausControllerOverallStatus=ausControllerOverallStatus, ausDevicePortUniqueId=ausDevicePortUniqueId, ausControllerNumberOfChannels=ausControllerNumberOfChannels, ausEnclosureTemperatureSensorOverTemperature=ausEnclosureTemperatureSensorOverTemperature, ausExtentNumberOfBlocksLow=ausExtentNumberOfBlocksLow, ausExternalRaidDeviceDescription=ausExternalRaidDeviceDescription, ausControllerStatus=ausControllerStatus, ausDeviceIndex=ausDeviceIndex, ausControllerEntry=ausControllerEntry, ausEnclosureSlotIndex=ausEnclosureSlotIndex, ausStorageDeviceSmartStatus=ausStorageDeviceSmartStatus, ausEnclosurePowerSupplyEntry=ausEnclosurePowerSupplyEntry, ausExtentStartingLBALow=ausExtentStartingLBALow, ausCCodeControllerTable=ausCCodeControllerTable, ausOtherDeviceIndex=ausOtherDeviceIndex, ausDevicePortIndex=ausDevicePortIndex, ObjectStatus=ObjectStatus, ausChannelRelationshipTable=ausChannelRelationshipTable, ausI2ORaidControllerEntry=ausI2ORaidControllerEntry, ausEnclosureDevicePowerCycles=ausEnclosureDevicePowerCycles, ausServeRAIDControllerSlotNumber=ausServeRAIDControllerSlotNumber, ausStorageDeviceDescription=ausStorageDeviceDescription, ausArrayName=ausArrayName, ausArrayMembership=ausArrayMembership, ausMIB=ausMIB, ausMibStatusSecondsSinceInitiation=ausMibStatusSecondsSinceInitiation, ausControllerModel=ausControllerModel, ausHostRAIDControllerMainIndex=ausHostRAIDControllerMainIndex, ausDevicePortTable=ausDevicePortTable, ausDevicePortWidth=ausDevicePortWidth, ausExtentSize=ausExtentSize, ausOtherDeviceMainIndex=ausOtherDeviceMainIndex, ausMibStatusRevMinor=ausMibStatusRevMinor, ausSpareTable=ausSpareTable, ausTrapControllerType=ausTrapControllerType, ausTrapEnclosureStatus=ausTrapEnclosureStatus, ausTrapEnclosureInformation=ausTrapEnclosureInformation, ausArrayCapacity=ausArrayCapacity, ausExtentNumberOfBlocksHigh=ausExtentNumberOfBlocksHigh, ausSpareAusDeviceIndex=ausSpareAusDeviceIndex, ausEnclosureFanTable=ausEnclosureFanTable, ausOtherDeviceDescription=ausOtherDeviceDescription, ausChannelAusControllerChannelNumber=ausChannelAusControllerChannelNumber, ausEnclosureFanOrdinal=ausEnclosureFanOrdinal, ausArrayTaskPriority=ausArrayTaskPriority, ausChannelRelationshipList=ausChannelRelationshipList, ausChannelWidth=ausChannelWidth, ausArrayType=ausArrayType, ausI2ORaidControllerMainIndex=ausI2ORaidControllerMainIndex, ausChannelRelationshipEntry=ausChannelRelationshipEntry, ausEnclosureDeviceIndex=ausEnclosureDeviceIndex, ausChannelRelationship=ausChannelRelationship, ausEnclosureTemperatureSensorIndex=ausEnclosureTemperatureSensorIndex, ausDevicePortAusDeviceIndex=ausDevicePortAusDeviceIndex, ausTrapArrayFatal=ausTrapArrayFatal, ausControllerRevision=ausControllerRevision, ausExtentArrayMembership=ausExtentArrayMembership, ausChannelRelationshipRelation=ausChannelRelationshipRelation, ausEnclosureDeviceIdHigh=ausEnclosureDeviceIdHigh, ausServeRAIDController=ausServeRAIDController, ausTrapObjects=ausTrapObjects, ausArray=ausArray, ausServeRAIDControllerDefaultRebuildRate=ausServeRAIDControllerDefaultRebuildRate, ausMibStatusCopyright=ausMibStatusCopyright, ausDevice=ausDevice, ausEnclosureDeviceDescription=ausEnclosureDeviceDescription, ausTrapSpareWarning=ausTrapSpareWarning, ausChannel=ausChannel, ausEnclosureTemperatureSensorAusEnclosureDeviceIndex=ausEnclosureTemperatureSensorAusEnclosureDeviceIndex, ausCCodeControllerEntry=ausCCodeControllerEntry, ausHostRAIDControllerIndex=ausHostRAIDControllerIndex, ausControllerBatteryStatus=ausControllerBatteryStatus, ausChannelTable=ausChannelTable, ausChannelControllerSubId=ausChannelControllerSubId, ausDevicePortMaximumTransferRate=ausDevicePortMaximumTransferRate, ausEnclosureFanAusEnclosureDeviceIndex=ausEnclosureFanAusEnclosureDeviceIndex, ausEnclosurePowerSupplyStatus=ausEnclosurePowerSupplyStatus, ausEnclosureDevicePowerOnTime=ausEnclosureDevicePowerOnTime, ausArrayStripeSize=ausArrayStripeSize, ausControllerRelationshipIndex=ausControllerRelationshipIndex, ausEventLog=ausEventLog, ausEventLogTable=ausEventLogTable, ausTrapArrayTaskStatus=ausTrapArrayTaskStatus, ausExtentAusDeviceIndex=ausExtentAusDeviceIndex, ausArrayStatus=ausArrayStatus, ausChannelOverallStatus=ausChannelOverallStatus, ausDeviceStatus=ausDeviceStatus, ausExternalRaidDeviceTable=ausExternalRaidDeviceTable, ausServeRAIDControllerTable=ausServeRAIDControllerTable, ausDeviceTable=ausDeviceTable, ausI2ORaidControllerAddress=ausI2ORaidControllerAddress, ausEventLogEntry=ausEventLogEntry, ausEnclosureTemperatureSensorDegrees=ausEnclosureTemperatureSensorDegrees, ausMibStatusOverall=ausMibStatusOverall, ausTrapOtherInformational=ausTrapOtherInformational, ausExternalRaidDeviceIndex=ausExternalRaidDeviceIndex, ausDevicePortAusDevicePortNumber=ausDevicePortAusDevicePortNumber)
mibBuilder.exportSymbols("ADAPTEC-UNIVERSAL-STORAGE-MIB", ausExternalRaidDeviceNumberOfChannels=ausExternalRaidDeviceNumberOfChannels, ausCCodeControllerIndex=ausCCodeControllerIndex, ausControllerDescription=ausControllerDescription, ausHostRAIDControllerPCIFunction=ausHostRAIDControllerPCIFunction, ausDevicePortSubId=ausDevicePortSubId, ausStorageDevice=ausStorageDevice, ausServeRAIDControllerEntry=ausServeRAIDControllerEntry, ausControllerRelationshipList=ausControllerRelationshipList, ausStorageDeviceFormattedCapacity=ausStorageDeviceFormattedCapacity, ausEnclosureDeviceNumberOfTemperatureSensors=ausEnclosureDeviceNumberOfTemperatureSensors, OptionStatus=OptionStatus, ausDeviceModel=ausDeviceModel, ausEnclosureDeviceSpeaker=ausEnclosureDeviceSpeaker, ausI2ORaidControllerTable=ausI2ORaidControllerTable, ausArrayTaskCompletion=ausArrayTaskCompletion, ausControllerRelationshipEntry=ausControllerRelationshipEntry, ausI2ORaidController=ausI2ORaidController, ausExtentStartingLBAHigh=ausExtentStartingLBAHigh, ausEnclosureSlotEntry=ausEnclosureSlotEntry, ausControllerRelationship=ausControllerRelationship, ausTrapMessage=ausTrapMessage, ausAggregatedControllerTable=ausAggregatedControllerTable, ausTrapArrayTaskFatal=ausTrapArrayTaskFatal, ausEnclosureSlotPortId=ausEnclosureSlotPortId)
