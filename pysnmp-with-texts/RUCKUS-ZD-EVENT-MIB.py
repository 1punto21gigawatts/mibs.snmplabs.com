#
# PySNMP MIB module RUCKUS-ZD-EVENT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/RUCKUS-ZD-EVENT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:59:13 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
ruckusEvents, = mibBuilder.importSymbols("RUCKUS-ROOT-MIB", "ruckusEvents")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Counter64, IpAddress, NotificationType, iso, ObjectIdentity, ModuleIdentity, Unsigned32, Counter32, Gauge32, MibIdentifier, Bits, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Counter64", "IpAddress", "NotificationType", "iso", "ObjectIdentity", "ModuleIdentity", "Unsigned32", "Counter32", "Gauge32", "MibIdentifier", "Bits", "Integer32")
MacAddress, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "TextualConvention", "DisplayString")
ruckusZDEventMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 25053, 2, 2))
if mibBuilder.loadTexts: ruckusZDEventMIB.setLastUpdated('201010150800Z')
if mibBuilder.loadTexts: ruckusZDEventMIB.setOrganization('Ruckus Wireless, Inc.')
if mibBuilder.loadTexts: ruckusZDEventMIB.setContactInfo('Ruckus Wireless Inc. Postal: 880 W Maude Ave Sunnyvale, CA 94085 USA EMail: support@ruckuswireless.com Phone: +1-650-265-4200')
if mibBuilder.loadTexts: ruckusZDEventMIB.setDescription('Ruckus ZD event objects, including trap OID and trap payload.')
ruckusZDEventTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 25053, 2, 2, 1))
ruckusZDEventObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 25053, 2, 2, 2))
ruckusZDEventAPJoinTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 2, 1, 1)).setObjects(("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventSerial"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventNEID"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventSeverity"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventType"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventTime"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventStatus"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventTitle"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventAPMacAddr"))
if mibBuilder.loadTexts: ruckusZDEventAPJoinTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusZDEventAPJoinTrap.setDescription("Trigger when there is a AP join event. The AP's MAC address is enclosed.")
ruckusZDEventSSIDSpoofTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 2, 1, 2)).setObjects(("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventSerial"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventNEID"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventSeverity"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventType"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventTime"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventStatus"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventTitle"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventSSID"))
if mibBuilder.loadTexts: ruckusZDEventSSIDSpoofTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusZDEventSSIDSpoofTrap.setDescription("Trigger when a SSID-spoofing rogue AP is detected. The rogue AP's MAC address and SSID are enclosed.")
ruckusZDEventMACSpoofTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 2, 1, 3)).setObjects(("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventSerial"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventNEID"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventSeverity"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventType"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventTime"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventStatus"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventTitle"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventSSID"))
if mibBuilder.loadTexts: ruckusZDEventMACSpoofTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusZDEventMACSpoofTrap.setDescription("Trigger when a MAC-spoofing rogue AP is detected. The rogue AP's MAC address and SSID are enclosed.")
ruckusZDEventRogueAPTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 2, 1, 4)).setObjects(("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventSerial"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventNEID"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventSeverity"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventType"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventTime"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventStatus"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventTitle"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventSSID"))
if mibBuilder.loadTexts: ruckusZDEventRogueAPTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusZDEventRogueAPTrap.setDescription("Trigger when a rogue AP is detected. The rogue AP's MAC address and SSID are enclosed.")
ruckusZDEventAPLostTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 2, 1, 5)).setObjects(("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventSerial"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventNEID"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventSeverity"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventType"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventTime"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventStatus"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventTitle"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventAPMacAddr"))
if mibBuilder.loadTexts: ruckusZDEventAPLostTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusZDEventAPLostTrap.setDescription("Trigger when AP lost contact. The AP's MAC address is enclosed.")
ruckusZDEventAPLostHeartbeatTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 2, 1, 6)).setObjects(("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventSerial"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventNEID"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventSeverity"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventType"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventTime"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventStatus"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventTitle"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventAPMacAddr"))
if mibBuilder.loadTexts: ruckusZDEventAPLostHeartbeatTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusZDEventAPLostHeartbeatTrap.setDescription("Trigger when AP lost heartbeats. The AP's MAC address is enclosed.")
ruckusZDEventClientAuthFailBlockTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 2, 1, 7)).setObjects(("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventSerial"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventNEID"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventSeverity"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventType"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventTime"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventStatus"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventTitle"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventClientMacAddr"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventAPMacAddr"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventSSID"))
if mibBuilder.loadTexts: ruckusZDEventClientAuthFailBlockTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusZDEventClientAuthFailBlockTrap.setDescription("Triggered when a client fails authentication too many times in a row. The client's MAC address, AP's MAC address and SSID are enclosed.")
ruckusZDEventAPResetTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 2, 1, 8)).setObjects(("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventSerial"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventNEID"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventSeverity"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventType"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventTime"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventStatus"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventTitle"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventContent"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventAPMacAddr"))
if mibBuilder.loadTexts: ruckusZDEventAPResetTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusZDEventAPResetTrap.setDescription('Trigger when AP reboots.')
ruckusZDEventIPChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 2, 1, 9)).setObjects(("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventSerial"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventNEID"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventSeverity"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventType"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventTime"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventStatus"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventTitle"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventContent"))
if mibBuilder.loadTexts: ruckusZDEventIPChangeTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusZDEventIPChangeTrap.setDescription('Trigger when IP changes.')
ruckusZDEventSystemColdStartTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 2, 1, 10)).setObjects(("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventSerial"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventNEID"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventSeverity"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventType"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventTime"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventStatus"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventTitle"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventContent"))
if mibBuilder.loadTexts: ruckusZDEventSystemColdStartTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusZDEventSystemColdStartTrap.setDescription('Trigger when system performs cold start.')
ruckusZDEventAPChannelChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 2, 1, 11)).setObjects(("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventSerial"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventNEID"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventSeverity"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventType"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventTime"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventStatus"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventTitle"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventContent"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventAPMacAddr"))
if mibBuilder.loadTexts: ruckusZDEventAPChannelChangeTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusZDEventAPChannelChangeTrap.setDescription('Trigger when AP channel changes.')
ruckusZDEventRadiusAuthUnavailableTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 2, 1, 12)).setObjects(("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventSerial"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventNEID"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventSeverity"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventType"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventTime"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventStatus"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventTitle"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventContent"))
if mibBuilder.loadTexts: ruckusZDEventRadiusAuthUnavailableTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusZDEventRadiusAuthUnavailableTrap.setDescription('Trigger when RADIUS authentication server unavailable.')
ruckusZDEventRadiusAcctUnavailableTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 2, 1, 13)).setObjects(("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventSerial"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventNEID"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventSeverity"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventType"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventTime"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventStatus"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventTitle"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventContent"))
if mibBuilder.loadTexts: ruckusZDEventRadiusAcctUnavailableTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusZDEventRadiusAcctUnavailableTrap.setDescription('Trigger when RADIUS accounting server unavailable.')
ruckusZDEventClientJoinFailAPBusyTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 2, 1, 14)).setObjects(("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventSerial"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventNEID"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventSeverity"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventType"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventTime"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventStatus"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventTitle"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventContent"))
if mibBuilder.loadTexts: ruckusZDEventClientJoinFailAPBusyTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusZDEventClientJoinFailAPBusyTrap.setDescription('Trigger when client joins fail because AP is busy.')
ruckusZDEventInterferenceADHoc = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 2, 1, 15)).setObjects(("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventSerial"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventNEID"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventSeverity"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventType"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventTime"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventStatus"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventTitle"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventContent"))
if mibBuilder.loadTexts: ruckusZDEventInterferenceADHoc.setStatus('current')
if mibBuilder.loadTexts: ruckusZDEventInterferenceADHoc.setDescription('Trigger when an interference AD hoc is detected.')
ruckusZDEventImageUpgradeFailTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 2, 1, 16)).setObjects(("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventSerial"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventNEID"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventSeverity"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventType"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventTime"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventStatus"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventTitle"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventContent"))
if mibBuilder.loadTexts: ruckusZDEventImageUpgradeFailTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusZDEventImageUpgradeFailTrap.setDescription('Trigger when AP image upgrade fails.')
ruckusZDEventHeartbeatTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 2, 1, 22)).setObjects(("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventSerial"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventNEID"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventSeverity"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventType"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventTime"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventStatus"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventTitle"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventContent"))
if mibBuilder.loadTexts: ruckusZDEventHeartbeatTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusZDEventHeartbeatTrap.setDescription('Trigger with trap heartbeat sent.')
ruckusZDEventAttackedTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 2, 1, 24)).setObjects(("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventSerial"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventNEID"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventSeverity"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventType"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventTime"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventStatus"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventTitle"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventContent"))
if mibBuilder.loadTexts: ruckusZDEventAttackedTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusZDEventAttackedTrap.setDescription('Trigger with a malicious attack is found.')
ruckusZDEventSystemWarmStartTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 2, 1, 25)).setObjects(("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventSerial"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventNEID"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventSeverity"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventType"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventTime"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventStatus"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventTitle"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventContent"))
if mibBuilder.loadTexts: ruckusZDEventSystemWarmStartTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusZDEventSystemWarmStartTrap.setDescription('Trigger when system performs warm start.')
ruckusZDEventInterfereAPTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 2, 1, 26)).setObjects(("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventSerial"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventNEID"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventSeverity"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventType"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventTime"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventStatus"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventTitle"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventContent"))
if mibBuilder.loadTexts: ruckusZDEventInterfereAPTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusZDEventInterfereAPTrap.setDescription('Trigger when a rogue AP used same channel with current AP is detected.')
ruckusZDEventAPSystemColdStartTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 2, 1, 31)).setObjects(("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventSerial"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventNEID"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventSeverity"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventType"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventTime"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventStatus"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventTitle"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventContent"))
if mibBuilder.loadTexts: ruckusZDEventAPSystemColdStartTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusZDEventAPSystemColdStartTrap.setDescription('Trigger when an AP performs cold start.')
ruckusZDEventAPSystemWarmStartTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 2, 1, 32)).setObjects(("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventSerial"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventNEID"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventSeverity"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventType"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventTime"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventStatus"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventTitle"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventContent"))
if mibBuilder.loadTexts: ruckusZDEventAPSystemWarmStartTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusZDEventAPSystemWarmStartTrap.setDescription('Trigger when an AP performs warm start.')
ruckusZDEventAPSSIDChangedTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 2, 1, 33)).setObjects(("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventSerial"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventNEID"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventSeverity"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventType"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventTime"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventStatus"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventTitle"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventContent"))
if mibBuilder.loadTexts: ruckusZDEventAPSSIDChangedTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusZDEventAPSSIDChangedTrap.setDescription('Trigger when an AP SSID changed.')
ruckusZDEventAPClientExceedValve = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 2, 1, 34)).setObjects(("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventSerial"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventNEID"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventSeverity"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventType"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventTime"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventStatus"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventTitle"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventContent"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventAPMacAddr"))
if mibBuilder.loadTexts: ruckusZDEventAPClientExceedValve.setStatus('current')
if mibBuilder.loadTexts: ruckusZDEventAPClientExceedValve.setDescription('Triggered when AP online client exceed valve.')
ruckusZDEventAPAvailableStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 2, 1, 35)).setObjects(("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventSerial"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventNEID"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventSeverity"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventType"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventTime"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventStatus"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventTitle"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventContent"))
if mibBuilder.loadTexts: ruckusZDEventAPAvailableStatusTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusZDEventAPAvailableStatusTrap.setDescription('Trigger when AP is available.')
ruckusZDEventAPWirelessInterfaceFaultTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 2, 1, 36)).setObjects(("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventSerial"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventNEID"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventSeverity"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventType"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventTime"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventStatus"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventTitle"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventContent"))
if mibBuilder.loadTexts: ruckusZDEventAPWirelessInterfaceFaultTrap.setStatus('current')
if mibBuilder.loadTexts: ruckusZDEventAPWirelessInterfaceFaultTrap.setDescription('Trigger when AP wireless interface is fault.')
ruckusZDEventSystemCpuUtilExceedValve = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 2, 1, 37)).setObjects(("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventSerial"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventNEID"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventSeverity"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventType"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventTime"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventStatus"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventTitle"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventContent"))
if mibBuilder.loadTexts: ruckusZDEventSystemCpuUtilExceedValve.setStatus('current')
if mibBuilder.loadTexts: ruckusZDEventSystemCpuUtilExceedValve.setDescription('Trigger when System CPU utilization is exceed valve.')
ruckusZDEventSystemMemUtilExceedValve = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 2, 1, 38)).setObjects(("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventSerial"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventNEID"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventSeverity"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventType"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventTime"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventStatus"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventTitle"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventContent"))
if mibBuilder.loadTexts: ruckusZDEventSystemMemUtilExceedValve.setStatus('current')
if mibBuilder.loadTexts: ruckusZDEventSystemMemUtilExceedValve.setDescription('Trigger when System memory utilization is exceed valve.')
ruckusZDEventSystemBandwidthUtilExceedValve = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 2, 1, 39)).setObjects(("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventSerial"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventNEID"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventSeverity"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventType"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventTime"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventStatus"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventTitle"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventContent"))
if mibBuilder.loadTexts: ruckusZDEventSystemBandwidthUtilExceedValve.setStatus('current')
if mibBuilder.loadTexts: ruckusZDEventSystemBandwidthUtilExceedValve.setDescription('Trigger when System bandwidth utilization is exceed valve.')
ruckusZDEventSystemDropPacketRateExceedValve = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 2, 1, 40)).setObjects(("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventSerial"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventNEID"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventSeverity"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventType"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventTime"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventStatus"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventTitle"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventContent"))
if mibBuilder.loadTexts: ruckusZDEventSystemDropPacketRateExceedValve.setStatus('current')
if mibBuilder.loadTexts: ruckusZDEventSystemDropPacketRateExceedValve.setDescription('Trigger when System drop packet rate is exceed valve.')
ruckusZDEventAPSyncTimeFail = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 2, 1, 41)).setObjects(("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventSerial"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventNEID"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventSeverity"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventType"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventTime"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventStatus"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventTitle"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventContent"))
if mibBuilder.loadTexts: ruckusZDEventAPSyncTimeFail.setStatus('current')
if mibBuilder.loadTexts: ruckusZDEventAPSyncTimeFail.setDescription('Trigger when AP sync clock failure with AC.')
ruckusZDEventSystemCpuUtilClrWarn = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 2, 1, 42)).setObjects(("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventSerial"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventNEID"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventSeverity"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventType"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventTime"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventStatus"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventTitle"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventContent"))
if mibBuilder.loadTexts: ruckusZDEventSystemCpuUtilClrWarn.setStatus('current')
if mibBuilder.loadTexts: ruckusZDEventSystemCpuUtilClrWarn.setDescription('Trigger when System CPU utilization is under the valve.')
ruckusZDEventSystemMemUtilClrwarn = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 2, 1, 43)).setObjects(("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventSerial"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventNEID"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventSeverity"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventType"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventTime"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventStatus"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventTitle"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventContent"))
if mibBuilder.loadTexts: ruckusZDEventSystemMemUtilClrwarn.setStatus('current')
if mibBuilder.loadTexts: ruckusZDEventSystemMemUtilClrwarn.setDescription('Trigger when System memory utilization is under the valve.')
ruckusZDEventClientJoin = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 2, 1, 60)).setObjects(("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventSerial"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventNEID"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventSeverity"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventType"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventTime"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventStatus"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventTitle"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventClientMacAddr"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventAPMacAddr"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventSSID"))
if mibBuilder.loadTexts: ruckusZDEventClientJoin.setStatus('current')
if mibBuilder.loadTexts: ruckusZDEventClientJoin.setDescription("Triggered when a client join a AP success. The client's MAC address, AP's MAC address and SSID are enclosed.")
ruckusZDEventClientJoinFailed = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 2, 1, 61)).setObjects(("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventSerial"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventNEID"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventSeverity"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventType"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventTime"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventStatus"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventTitle"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventClientMacAddr"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventAPMacAddr"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventSSID"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventReason"))
if mibBuilder.loadTexts: ruckusZDEventClientJoinFailed.setStatus('current')
if mibBuilder.loadTexts: ruckusZDEventClientJoinFailed.setDescription("Triggered when a client join a AP failed. The client's MAC address, AP's MAC address and SSID are enclosed.")
ruckusZDEventClientJoinFailedAPBusy = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 2, 1, 62)).setObjects(("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventSerial"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventNEID"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventSeverity"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventType"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventTime"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventStatus"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventTitle"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventClientMacAddr"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventAPMacAddr"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventSSID"))
if mibBuilder.loadTexts: ruckusZDEventClientJoinFailedAPBusy.setStatus('current')
if mibBuilder.loadTexts: ruckusZDEventClientJoinFailedAPBusy.setDescription("Triggered when a client join a AP failed because of AP too busy. The client's MAC address, AP's MAC address and SSID are enclosed.")
ruckusZDEventClientDisconnect = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 2, 1, 63)).setObjects(("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventSerial"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventNEID"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventSeverity"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventType"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventTime"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventStatus"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventTitle"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventClientMacAddr"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventAPMacAddr"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventSSID"))
if mibBuilder.loadTexts: ruckusZDEventClientDisconnect.setStatus('current')
if mibBuilder.loadTexts: ruckusZDEventClientDisconnect.setDescription("Triggered when a client disconnect from AP. The client's MAC address, AP's MAC address and SSID are enclosed.")
ruckusZDEventClientRoamOut = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 2, 1, 64)).setObjects(("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventSerial"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventNEID"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventSeverity"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventType"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventTime"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventStatus"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventTitle"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventClientMacAddr"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventAPMacAddr"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventSSID"))
if mibBuilder.loadTexts: ruckusZDEventClientRoamOut.setStatus('current')
if mibBuilder.loadTexts: ruckusZDEventClientRoamOut.setDescription("Triggered when a client roam out from AP. The client's MAC address, AP's MAC address and SSID are enclosed.")
ruckusZDEventClientRoamIn = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 2, 1, 65)).setObjects(("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventSerial"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventNEID"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventSeverity"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventType"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventTime"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventStatus"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventTitle"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventClientMacAddr"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventAPMacAddr"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventSSID"))
if mibBuilder.loadTexts: ruckusZDEventClientRoamIn.setStatus('current')
if mibBuilder.loadTexts: ruckusZDEventClientRoamIn.setDescription("Triggered when a client roam in from AP. The client's MAC address, AP's MAC address and SSID are enclosed.")
ruckusZDEventClientAuthFailed = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 2, 1, 66)).setObjects(("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventSerial"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventNEID"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventSeverity"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventType"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventTime"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventStatus"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventTitle"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventClientMacAddr"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventAPMacAddr"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventSSID"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventReason"))
if mibBuilder.loadTexts: ruckusZDEventClientAuthFailed.setStatus('current')
if mibBuilder.loadTexts: ruckusZDEventClientAuthFailed.setDescription("Triggered when a client authenticate failure . The client's MAC address, AP's MAC address and SSID are enclosed.Failure reason.")
ruckusZDEventClientAuthorizationFailed = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 2, 1, 67)).setObjects(("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventSerial"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventNEID"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventSeverity"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventType"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventTime"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventStatus"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventTitle"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventClientMacAddr"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventAPMacAddr"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventSSID"))
if mibBuilder.loadTexts: ruckusZDEventClientAuthorizationFailed.setStatus('current')
if mibBuilder.loadTexts: ruckusZDEventClientAuthorizationFailed.setDescription("Triggered when a client has no authorization to join a AP. The client's MAC address, AP's MAC address and SSID are enclosed.")
ruckusZDEventAPCPUvalve = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 2, 1, 83)).setObjects(("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventSerial"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventNEID"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventSeverity"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventType"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventTime"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventStatus"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventTitle"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventContent"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventAPMacAddr"))
if mibBuilder.loadTexts: ruckusZDEventAPCPUvalve.setStatus('current')
if mibBuilder.loadTexts: ruckusZDEventAPCPUvalve.setDescription('Triggered when AP cpu util exceed valve.')
ruckusZDEventAPMEMvalve = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 2, 1, 84)).setObjects(("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventSerial"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventNEID"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventSeverity"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventType"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventTime"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventStatus"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventTitle"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventContent"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventAPMacAddr"))
if mibBuilder.loadTexts: ruckusZDEventAPMEMvalve.setStatus('current')
if mibBuilder.loadTexts: ruckusZDEventAPMEMvalve.setDescription('Triggered when AP memory util exceed valve.')
ruckusZDEventAPCPUvalveClrwarn = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 2, 1, 85)).setObjects(("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventSerial"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventNEID"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventSeverity"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventType"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventTime"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventStatus"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventTitle"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventContent"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventAPMacAddr"))
if mibBuilder.loadTexts: ruckusZDEventAPCPUvalveClrwarn.setStatus('current')
if mibBuilder.loadTexts: ruckusZDEventAPCPUvalveClrwarn.setDescription('Trigger when AP cpu utilization is under the valve.')
ruckusZDEventAPMEMvalveClrwarn = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 2, 1, 86)).setObjects(("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventSerial"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventNEID"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventSeverity"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventType"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventTime"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventStatus"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventTitle"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventContent"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventAPMacAddr"))
if mibBuilder.loadTexts: ruckusZDEventAPMEMvalveClrwarn.setStatus('current')
if mibBuilder.loadTexts: ruckusZDEventAPMEMvalveClrwarn.setDescription('Trigger when AP memory utilization is under the valve.')
ruckusZDEventAPNumStaExceedValveClrwarn = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 2, 1, 87)).setObjects(("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventSerial"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventNEID"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventSeverity"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventType"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventTime"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventStatus"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventTitle"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventContent"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventAPMacAddr"))
if mibBuilder.loadTexts: ruckusZDEventAPNumStaExceedValveClrwarn.setStatus('current')
if mibBuilder.loadTexts: ruckusZDEventAPNumStaExceedValveClrwarn.setDescription('Trigger when online client clr warning.')
ruckusZDEventDhcpPoolFull = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 2, 1, 88)).setObjects(("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventSerial"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventNEID"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventSeverity"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventType"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventTime"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventStatus"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventTitle"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventContent"))
if mibBuilder.loadTexts: ruckusZDEventDhcpPoolFull.setStatus('current')
if mibBuilder.loadTexts: ruckusZDEventDhcpPoolFull.setDescription('Trigger when DHCP pool is full.')
ruckusZDEventDhcpPoolAbun = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 2, 1, 89)).setObjects(("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventSerial"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventNEID"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventSeverity"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventType"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventTime"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventStatus"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventTitle"), ("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventContent"))
if mibBuilder.loadTexts: ruckusZDEventDhcpPoolAbun.setStatus('current')
if mibBuilder.loadTexts: ruckusZDEventDhcpPoolAbun.setDescription('Trigger when DHCP pool is abundant.')
ruckusZDEventSmartRedundancyChangetoActive = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 2, 1, 100)).setObjects(("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventIpAddr"))
if mibBuilder.loadTexts: ruckusZDEventSmartRedundancyChangetoActive.setStatus('current')
if mibBuilder.loadTexts: ruckusZDEventSmartRedundancyChangetoActive.setDescription('[Smart Redundancy] Peer ZoneDirector peer ip not found, system changed to active state')
ruckusZDEventSmartRedundancyActiveConnected = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 2, 1, 101)).setObjects(("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventIpAddr"))
if mibBuilder.loadTexts: ruckusZDEventSmartRedundancyActiveConnected.setStatus('current')
if mibBuilder.loadTexts: ruckusZDEventSmartRedundancyActiveConnected.setDescription('[Smart Redundancy] connected, system is in active state')
ruckusZDEventSmartRedundancyActiveDisconnected = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 2, 1, 102)).setObjects(("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventIpAddr"))
if mibBuilder.loadTexts: ruckusZDEventSmartRedundancyActiveDisconnected.setStatus('current')
if mibBuilder.loadTexts: ruckusZDEventSmartRedundancyActiveDisconnected.setDescription('[Smart Redundancy] disconnected, system is in active state')
ruckusZDEventSmartRedundancyStandbyConnected = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 2, 1, 103)).setObjects(("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventIpAddr"))
if mibBuilder.loadTexts: ruckusZDEventSmartRedundancyStandbyConnected.setStatus('current')
if mibBuilder.loadTexts: ruckusZDEventSmartRedundancyStandbyConnected.setDescription('[Smart Redundancy] connected, system is in standby state')
ruckusZDEventSmartRedundancyStandbyDisconnected = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 2, 1, 104)).setObjects(("RUCKUS-ZD-EVENT-MIB", "ruckusZDEventIpAddr"))
if mibBuilder.loadTexts: ruckusZDEventSmartRedundancyStandbyDisconnected.setStatus('current')
if mibBuilder.loadTexts: ruckusZDEventSmartRedundancyStandbyDisconnected.setDescription('[Smart Redundancy] disconnected, system is in standby state')
ruckusZDEventSerial = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 2, 2, 1), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ruckusZDEventSerial.setStatus('current')
if mibBuilder.loadTexts: ruckusZDEventSerial.setDescription('Trap serial number.')
ruckusZDEventNEID = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 2, 2, 2), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ruckusZDEventNEID.setStatus('current')
if mibBuilder.loadTexts: ruckusZDEventNEID.setDescription('Network element ID.')
ruckusZDEventSeverity = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 2, 2, 3), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ruckusZDEventSeverity.setStatus('current')
if mibBuilder.loadTexts: ruckusZDEventSeverity.setDescription('Severity level of the trap.')
ruckusZDEventType = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 2, 2, 4), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ruckusZDEventType.setStatus('current')
if mibBuilder.loadTexts: ruckusZDEventType.setDescription('Trap type.')
ruckusZDEventTime = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 2, 2, 5), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ruckusZDEventTime.setStatus('current')
if mibBuilder.loadTexts: ruckusZDEventTime.setDescription('Time when trap occured.')
ruckusZDEventStatus = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 2, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("raise", 1), ("clear", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ruckusZDEventStatus.setStatus('current')
if mibBuilder.loadTexts: ruckusZDEventStatus.setDescription('Trap status.')
ruckusZDEventTitle = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 2, 2, 7), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ruckusZDEventTitle.setStatus('current')
if mibBuilder.loadTexts: ruckusZDEventTitle.setDescription('Trap title.')
ruckusZDEventContent = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 2, 2, 8), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ruckusZDEventContent.setStatus('current')
if mibBuilder.loadTexts: ruckusZDEventContent.setDescription('Trap content.')
ruckusZDEventClientMacAddr = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 2, 2, 15), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ruckusZDEventClientMacAddr.setStatus('current')
if mibBuilder.loadTexts: ruckusZDEventClientMacAddr.setDescription("The client's MAC address.")
ruckusZDEventAPMacAddr = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 2, 2, 18), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ruckusZDEventAPMacAddr.setStatus('current')
if mibBuilder.loadTexts: ruckusZDEventAPMacAddr.setDescription("The AP's MAC address.")
ruckusZDEventRogueMacAddr = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 2, 2, 20), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ruckusZDEventRogueMacAddr.setStatus('current')
if mibBuilder.loadTexts: ruckusZDEventRogueMacAddr.setDescription("The rogue AP's MAC address.")
ruckusZDEventSSID = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 2, 2, 23), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ruckusZDEventSSID.setStatus('current')
if mibBuilder.loadTexts: ruckusZDEventSSID.setDescription('SSID.')
ruckusZDEventChannel = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 2, 2, 25), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ruckusZDEventChannel.setStatus('current')
if mibBuilder.loadTexts: ruckusZDEventChannel.setDescription('Channel.')
ruckusZDEventReason = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 2, 2, 28), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ruckusZDEventReason.setStatus('current')
if mibBuilder.loadTexts: ruckusZDEventReason.setDescription('Failure Reason.')
ruckusZDEventIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 2, 2, 30), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ruckusZDEventIpAddr.setStatus('current')
if mibBuilder.loadTexts: ruckusZDEventIpAddr.setDescription('IpAddress (ipv4 and ipv6).')
mibBuilder.exportSymbols("RUCKUS-ZD-EVENT-MIB", ruckusZDEventClientRoamIn=ruckusZDEventClientRoamIn, ruckusZDEventSystemWarmStartTrap=ruckusZDEventSystemWarmStartTrap, PYSNMP_MODULE_ID=ruckusZDEventMIB, ruckusZDEventAPLostTrap=ruckusZDEventAPLostTrap, ruckusZDEventImageUpgradeFailTrap=ruckusZDEventImageUpgradeFailTrap, ruckusZDEventSmartRedundancyStandbyConnected=ruckusZDEventSmartRedundancyStandbyConnected, ruckusZDEventClientJoinFailed=ruckusZDEventClientJoinFailed, ruckusZDEventIPChangeTrap=ruckusZDEventIPChangeTrap, ruckusZDEventClientAuthorizationFailed=ruckusZDEventClientAuthorizationFailed, ruckusZDEventAPMEMvalveClrwarn=ruckusZDEventAPMEMvalveClrwarn, ruckusZDEventAPClientExceedValve=ruckusZDEventAPClientExceedValve, ruckusZDEventRadiusAuthUnavailableTrap=ruckusZDEventRadiusAuthUnavailableTrap, ruckusZDEventSystemMemUtilExceedValve=ruckusZDEventSystemMemUtilExceedValve, ruckusZDEventAPLostHeartbeatTrap=ruckusZDEventAPLostHeartbeatTrap, ruckusZDEventAPSSIDChangedTrap=ruckusZDEventAPSSIDChangedTrap, ruckusZDEventType=ruckusZDEventType, ruckusZDEventClientMacAddr=ruckusZDEventClientMacAddr, ruckusZDEventRogueAPTrap=ruckusZDEventRogueAPTrap, ruckusZDEventSeverity=ruckusZDEventSeverity, ruckusZDEventSSID=ruckusZDEventSSID, ruckusZDEventAPMEMvalve=ruckusZDEventAPMEMvalve, ruckusZDEventDhcpPoolAbun=ruckusZDEventDhcpPoolAbun, ruckusZDEventMIB=ruckusZDEventMIB, ruckusZDEventAPChannelChangeTrap=ruckusZDEventAPChannelChangeTrap, ruckusZDEventAPSyncTimeFail=ruckusZDEventAPSyncTimeFail, ruckusZDEventStatus=ruckusZDEventStatus, ruckusZDEventSystemCpuUtilExceedValve=ruckusZDEventSystemCpuUtilExceedValve, ruckusZDEventAPMacAddr=ruckusZDEventAPMacAddr, ruckusZDEventDhcpPoolFull=ruckusZDEventDhcpPoolFull, ruckusZDEventSerial=ruckusZDEventSerial, ruckusZDEventClientJoinFailAPBusyTrap=ruckusZDEventClientJoinFailAPBusyTrap, ruckusZDEventIpAddr=ruckusZDEventIpAddr, ruckusZDEventAPJoinTrap=ruckusZDEventAPJoinTrap, ruckusZDEventTraps=ruckusZDEventTraps, ruckusZDEventTitle=ruckusZDEventTitle, ruckusZDEventClientDisconnect=ruckusZDEventClientDisconnect, ruckusZDEventSystemCpuUtilClrWarn=ruckusZDEventSystemCpuUtilClrWarn, ruckusZDEventAPResetTrap=ruckusZDEventAPResetTrap, ruckusZDEventContent=ruckusZDEventContent, ruckusZDEventRogueMacAddr=ruckusZDEventRogueMacAddr, ruckusZDEventObjects=ruckusZDEventObjects, ruckusZDEventRadiusAcctUnavailableTrap=ruckusZDEventRadiusAcctUnavailableTrap, ruckusZDEventClientJoinFailedAPBusy=ruckusZDEventClientJoinFailedAPBusy, ruckusZDEventClientAuthFailBlockTrap=ruckusZDEventClientAuthFailBlockTrap, ruckusZDEventAPSystemColdStartTrap=ruckusZDEventAPSystemColdStartTrap, ruckusZDEventAPCPUvalveClrwarn=ruckusZDEventAPCPUvalveClrwarn, ruckusZDEventSystemColdStartTrap=ruckusZDEventSystemColdStartTrap, ruckusZDEventSystemMemUtilClrwarn=ruckusZDEventSystemMemUtilClrwarn, ruckusZDEventClientAuthFailed=ruckusZDEventClientAuthFailed, ruckusZDEventAPCPUvalve=ruckusZDEventAPCPUvalve, ruckusZDEventClientRoamOut=ruckusZDEventClientRoamOut, ruckusZDEventSmartRedundancyStandbyDisconnected=ruckusZDEventSmartRedundancyStandbyDisconnected, ruckusZDEventAPWirelessInterfaceFaultTrap=ruckusZDEventAPWirelessInterfaceFaultTrap, ruckusZDEventNEID=ruckusZDEventNEID, ruckusZDEventTime=ruckusZDEventTime, ruckusZDEventInterfereAPTrap=ruckusZDEventInterfereAPTrap, ruckusZDEventSmartRedundancyChangetoActive=ruckusZDEventSmartRedundancyChangetoActive, ruckusZDEventMACSpoofTrap=ruckusZDEventMACSpoofTrap, ruckusZDEventSSIDSpoofTrap=ruckusZDEventSSIDSpoofTrap, ruckusZDEventClientJoin=ruckusZDEventClientJoin, ruckusZDEventSmartRedundancyActiveConnected=ruckusZDEventSmartRedundancyActiveConnected, ruckusZDEventSystemBandwidthUtilExceedValve=ruckusZDEventSystemBandwidthUtilExceedValve, ruckusZDEventAttackedTrap=ruckusZDEventAttackedTrap, ruckusZDEventSmartRedundancyActiveDisconnected=ruckusZDEventSmartRedundancyActiveDisconnected, ruckusZDEventHeartbeatTrap=ruckusZDEventHeartbeatTrap, ruckusZDEventAPAvailableStatusTrap=ruckusZDEventAPAvailableStatusTrap, ruckusZDEventChannel=ruckusZDEventChannel, ruckusZDEventAPSystemWarmStartTrap=ruckusZDEventAPSystemWarmStartTrap, ruckusZDEventReason=ruckusZDEventReason, ruckusZDEventSystemDropPacketRateExceedValve=ruckusZDEventSystemDropPacketRateExceedValve, ruckusZDEventInterferenceADHoc=ruckusZDEventInterferenceADHoc, ruckusZDEventAPNumStaExceedValveClrwarn=ruckusZDEventAPNumStaExceedValveClrwarn)
