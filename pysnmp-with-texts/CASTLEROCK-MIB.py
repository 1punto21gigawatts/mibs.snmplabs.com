#
# PySNMP MIB module CASTLEROCK-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CASTLEROCK-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:47:11 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
TimeTicks, NotificationType, NotificationType, ObjectIdentity, Counter64, enterprises, IpAddress, ModuleIdentity, MibIdentifier, Counter32, Unsigned32, Gauge32, Integer32, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "NotificationType", "NotificationType", "ObjectIdentity", "Counter64", "enterprises", "IpAddress", "ModuleIdentity", "MibIdentifier", "Counter32", "Unsigned32", "Gauge32", "Integer32", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
castleRock = MibIdentifier((1, 3, 6, 1, 4, 1, 56))
snmpc = MibIdentifier((1, 3, 6, 1, 4, 1, 56, 12))
snmpc_Events = MibIdentifier((1, 3, 6, 1, 4, 1, 56, 12, 1)).setLabel("snmpc-Events")
addressGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 56, 12, 2))
objectGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 56, 12, 3))
alarmGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 56, 12, 4))
mibGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 56, 12, 5))
systemGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 56, 12, 6))
defunctGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 56, 12, 7))
availGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 56, 12, 8))
appGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 56, 12, 9))
global_Defaults = MibIdentifier((1, 3, 6, 1, 4, 1, 56, 12, 1, 1)).setLabel("global-Defaults")
snmpc_Status_Polling = MibIdentifier((1, 3, 6, 1, 4, 1, 56, 12, 1, 2)).setLabel("snmpc-Status-Polling")
snmpc_Threshold_Alarm = MibIdentifier((1, 3, 6, 1, 4, 1, 56, 12, 1, 3)).setLabel("snmpc-Threshold-Alarm")
snmpc_System_Info = MibIdentifier((1, 3, 6, 1, 4, 1, 56, 12, 1, 5)).setLabel("snmpc-System-Info")
snmpc_Mib_Compiler = MibIdentifier((1, 3, 6, 1, 4, 1, 56, 12, 1, 6)).setLabel("snmpc-Mib-Compiler")
snmpc_App_Events = MibIdentifier((1, 3, 6, 1, 4, 1, 56, 12, 1, 7)).setLabel("snmpc-App-Events")
respTime_Poll = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 8, 1), Gauge32()).setLabel("respTime-Poll").setMaxAccess("readonly")
if mibBuilder.loadTexts: respTime_Poll.setStatus('mandatory')
if mibBuilder.loadTexts: respTime_Poll.setDescription('The last response time in milliseconds for IP/SNMP polling')
respTime_Web = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 8, 2), Gauge32()).setLabel("respTime-Web").setMaxAccess("readonly")
if mibBuilder.loadTexts: respTime_Web.setStatus('mandatory')
if mibBuilder.loadTexts: respTime_Web.setDescription('The last response time in milliseconds for WEB protocol')
respTime_Ftp = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 8, 3), Gauge32()).setLabel("respTime-Ftp").setMaxAccess("readonly")
if mibBuilder.loadTexts: respTime_Ftp.setStatus('mandatory')
if mibBuilder.loadTexts: respTime_Ftp.setDescription('The last response time in milliseconds for FTP protocol')
respTime_Smtp = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 8, 4), Gauge32()).setLabel("respTime-Smtp").setMaxAccess("readonly")
if mibBuilder.loadTexts: respTime_Smtp.setStatus('mandatory')
if mibBuilder.loadTexts: respTime_Smtp.setDescription('The last response time in milliseconds for SMTP protocol')
respTime_Telnet = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 8, 5), Gauge32()).setLabel("respTime-Telnet").setMaxAccess("readonly")
if mibBuilder.loadTexts: respTime_Telnet.setStatus('mandatory')
if mibBuilder.loadTexts: respTime_Telnet.setDescription('The last response time in milliseconds for TELNET protocol')
respTime_User1 = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 8, 6), Gauge32()).setLabel("respTime-User1").setMaxAccess("readonly")
if mibBuilder.loadTexts: respTime_User1.setStatus('mandatory')
if mibBuilder.loadTexts: respTime_User1.setDescription('The last response time in milliseconds for User protocol 1')
respTime_User2 = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 8, 7), Gauge32()).setLabel("respTime-User2").setMaxAccess("readonly")
if mibBuilder.loadTexts: respTime_User2.setStatus('mandatory')
if mibBuilder.loadTexts: respTime_User2.setDescription('The last response time in milliseconds for User protocol 2')
pollOK_Poll = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 8, 8), Counter32()).setLabel("pollOK-Poll").setMaxAccess("readonly")
if mibBuilder.loadTexts: pollOK_Poll.setStatus('mandatory')
if mibBuilder.loadTexts: pollOK_Poll.setDescription('Polls responded for IP/SNMP polling')
pollOK_Web = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 8, 9), Counter32()).setLabel("pollOK-Web").setMaxAccess("readonly")
if mibBuilder.loadTexts: pollOK_Web.setStatus('mandatory')
if mibBuilder.loadTexts: pollOK_Web.setDescription('Polls responded for WEB protocol')
pollOK_Ftp = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 8, 10), Counter32()).setLabel("pollOK-Ftp").setMaxAccess("readonly")
if mibBuilder.loadTexts: pollOK_Ftp.setStatus('mandatory')
if mibBuilder.loadTexts: pollOK_Ftp.setDescription('Polls responded for FTP protocol')
pollOK_Smtp = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 8, 11), Counter32()).setLabel("pollOK-Smtp").setMaxAccess("readonly")
if mibBuilder.loadTexts: pollOK_Smtp.setStatus('mandatory')
if mibBuilder.loadTexts: pollOK_Smtp.setDescription('Polls responded for SMTP protocol')
pollOK_Telnet = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 8, 12), Counter32()).setLabel("pollOK-Telnet").setMaxAccess("readonly")
if mibBuilder.loadTexts: pollOK_Telnet.setStatus('mandatory')
if mibBuilder.loadTexts: pollOK_Telnet.setDescription('Polls responded for TELNET protocol')
pollOK_User1 = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 8, 13), Counter32()).setLabel("pollOK-User1").setMaxAccess("readonly")
if mibBuilder.loadTexts: pollOK_User1.setStatus('mandatory')
if mibBuilder.loadTexts: pollOK_User1.setDescription('Polls responded for User1 protocol')
pollOK_User2 = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 8, 14), Counter32()).setLabel("pollOK-User2").setMaxAccess("readonly")
if mibBuilder.loadTexts: pollOK_User2.setStatus('mandatory')
if mibBuilder.loadTexts: pollOK_User2.setDescription('Polls responded for User2 protocol')
pollFail_Poll = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 8, 15), Counter32()).setLabel("pollFail-Poll").setMaxAccess("readonly")
if mibBuilder.loadTexts: pollFail_Poll.setStatus('mandatory')
if mibBuilder.loadTexts: pollFail_Poll.setDescription('Total polls failed for IP/SNMP polling')
pollFail_Web = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 8, 16), Counter32()).setLabel("pollFail-Web").setMaxAccess("readonly")
if mibBuilder.loadTexts: pollFail_Web.setStatus('mandatory')
if mibBuilder.loadTexts: pollFail_Web.setDescription('Total polls failed for WEB protocol')
pollFail_Ftp = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 8, 17), Counter32()).setLabel("pollFail-Ftp").setMaxAccess("readonly")
if mibBuilder.loadTexts: pollFail_Ftp.setStatus('mandatory')
if mibBuilder.loadTexts: pollFail_Ftp.setDescription('Total polls failed for FTP protocol')
pollFail_Smtp = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 8, 18), Counter32()).setLabel("pollFail-Smtp").setMaxAccess("readonly")
if mibBuilder.loadTexts: pollFail_Smtp.setStatus('mandatory')
if mibBuilder.loadTexts: pollFail_Smtp.setDescription('Total polls failed for SMTP protocol')
pollFail_Telnet = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 8, 19), Counter32()).setLabel("pollFail-Telnet").setMaxAccess("readonly")
if mibBuilder.loadTexts: pollFail_Telnet.setStatus('mandatory')
if mibBuilder.loadTexts: pollFail_Telnet.setDescription('Total polls failed for TELNET protocol')
pollFail_User1 = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 8, 20), Counter32()).setLabel("pollFail-User1").setMaxAccess("readonly")
if mibBuilder.loadTexts: pollFail_User1.setStatus('mandatory')
if mibBuilder.loadTexts: pollFail_User1.setDescription('Total polls failed for User1 protocol')
pollFail_User2 = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 8, 21), Counter32()).setLabel("pollFail-User2").setMaxAccess("readonly")
if mibBuilder.loadTexts: pollFail_User2.setStatus('mandatory')
if mibBuilder.loadTexts: pollFail_User2.setDescription('Total polls failed for User2 protocol')
pctFail_Poll = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 8, 22), Gauge32()).setLabel("pctFail-Poll").setMaxAccess("readonly")
if mibBuilder.loadTexts: pctFail_Poll.setStatus('mandatory')
if mibBuilder.loadTexts: pctFail_Poll.setDescription('The percent failed responses for IP/SNMP polling')
pctFail_Web = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 8, 23), Gauge32()).setLabel("pctFail-Web").setMaxAccess("readonly")
if mibBuilder.loadTexts: pctFail_Web.setStatus('mandatory')
if mibBuilder.loadTexts: pctFail_Web.setDescription('The percent failed polls for WEB protocol')
pctFail_Ftp = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 8, 24), Gauge32()).setLabel("pctFail-Ftp").setMaxAccess("readonly")
if mibBuilder.loadTexts: pctFail_Ftp.setStatus('mandatory')
if mibBuilder.loadTexts: pctFail_Ftp.setDescription('The percent failed polls for FTP protocol')
pctFail_Smtp = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 8, 25), Gauge32()).setLabel("pctFail-Smtp").setMaxAccess("readonly")
if mibBuilder.loadTexts: pctFail_Smtp.setStatus('mandatory')
if mibBuilder.loadTexts: pctFail_Smtp.setDescription('The percent failed polls for SMTP protocol')
pctFail_Telnet = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 8, 26), Gauge32()).setLabel("pctFail-Telnet").setMaxAccess("readonly")
if mibBuilder.loadTexts: pctFail_Telnet.setStatus('mandatory')
if mibBuilder.loadTexts: pctFail_Telnet.setDescription('The percent failed polls for TELNET protocol')
pctFail_User1 = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 8, 27), Gauge32()).setLabel("pctFail-User1").setMaxAccess("readonly")
if mibBuilder.loadTexts: pctFail_User1.setStatus('mandatory')
if mibBuilder.loadTexts: pctFail_User1.setDescription('The percent failed polls for User1 protocol')
pctFail_User2 = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 8, 28), Gauge32()).setLabel("pctFail-User2").setMaxAccess("readonly")
if mibBuilder.loadTexts: pctFail_User2.setStatus('mandatory')
if mibBuilder.loadTexts: pctFail_User2.setDescription('The percent failed polls for User2 protocol')
curState_POLL = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 8, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("unk", 0), ("noresp", 1), ("up", 2), ("up-err", 3), ("down", 4)))).setLabel("curState-POLL").setMaxAccess("readonly")
if mibBuilder.loadTexts: curState_POLL.setStatus('mandatory')
if mibBuilder.loadTexts: curState_POLL.setDescription('The current poll status for IP/SNMP polling')
curState_WEB = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 8, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("unk", 0), ("noresp", 1), ("up", 2), ("up-err", 3), ("down", 4)))).setLabel("curState-WEB").setMaxAccess("readonly")
if mibBuilder.loadTexts: curState_WEB.setStatus('mandatory')
if mibBuilder.loadTexts: curState_WEB.setDescription('The current poll status for WEB protocol')
curState_FTP = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 8, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("unk", 0), ("noresp", 1), ("up", 2), ("up-err", 3), ("down", 4)))).setLabel("curState-FTP").setMaxAccess("readonly")
if mibBuilder.loadTexts: curState_FTP.setStatus('mandatory')
if mibBuilder.loadTexts: curState_FTP.setDescription('The current poll status for FTP protocol')
curState_SMTP = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 8, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("unk", 0), ("noresp", 1), ("up", 2), ("up-err", 3), ("down", 4)))).setLabel("curState-SMTP").setMaxAccess("readonly")
if mibBuilder.loadTexts: curState_SMTP.setStatus('mandatory')
if mibBuilder.loadTexts: curState_SMTP.setDescription('The current poll status for SMTP protocol')
curState_TELNET = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 8, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("unk", 0), ("noresp", 1), ("up", 2), ("up-err", 3), ("down", 4)))).setLabel("curState-TELNET").setMaxAccess("readonly")
if mibBuilder.loadTexts: curState_TELNET.setStatus('mandatory')
if mibBuilder.loadTexts: curState_TELNET.setDescription('The current poll status for TELNET protocol')
curState_User1 = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 8, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("unk", 0), ("noresp", 1), ("up", 2), ("up-err", 3), ("down", 4)))).setLabel("curState-User1").setMaxAccess("readonly")
if mibBuilder.loadTexts: curState_User1.setStatus('mandatory')
if mibBuilder.loadTexts: curState_User1.setDescription('The last response time in milliseconds for User protocol 1')
curState_User2 = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 8, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("unk", 0), ("noresp", 1), ("up", 2), ("up-err", 3), ("down", 4)))).setLabel("curState-User2").setMaxAccess("readonly")
if mibBuilder.loadTexts: curState_User2.setStatus('mandatory')
if mibBuilder.loadTexts: curState_User2.setDescription('The last response time in milliseconds for User protocol 2')
respTime_User3 = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 8, 52), Gauge32()).setLabel("respTime-User3").setMaxAccess("readonly")
if mibBuilder.loadTexts: respTime_User3.setStatus('mandatory')
if mibBuilder.loadTexts: respTime_User3.setDescription('The last response time in milliseconds for User protocol 3')
respTime_User4 = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 8, 53), Gauge32()).setLabel("respTime-User4").setMaxAccess("readonly")
if mibBuilder.loadTexts: respTime_User4.setStatus('mandatory')
if mibBuilder.loadTexts: respTime_User4.setDescription('The last response time in milliseconds for User protocol 4')
pollOK_User3 = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 8, 54), Counter32()).setLabel("pollOK-User3").setMaxAccess("readonly")
if mibBuilder.loadTexts: pollOK_User3.setStatus('mandatory')
if mibBuilder.loadTexts: pollOK_User3.setDescription('Polls responded for User3 protocol')
pollOK_User4 = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 8, 55), Counter32()).setLabel("pollOK-User4").setMaxAccess("readonly")
if mibBuilder.loadTexts: pollOK_User4.setStatus('mandatory')
if mibBuilder.loadTexts: pollOK_User4.setDescription('Polls responded for User4 protocol')
pollFail_User3 = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 8, 56), Counter32()).setLabel("pollFail-User3").setMaxAccess("readonly")
if mibBuilder.loadTexts: pollFail_User3.setStatus('mandatory')
if mibBuilder.loadTexts: pollFail_User3.setDescription('Total polls failed for User3 protocol')
pollFail_User4 = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 8, 57), Counter32()).setLabel("pollFail-User4").setMaxAccess("readonly")
if mibBuilder.loadTexts: pollFail_User4.setStatus('mandatory')
if mibBuilder.loadTexts: pollFail_User4.setDescription('Total polls failed for User4 protocol')
pctFail_User3 = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 8, 58), Gauge32()).setLabel("pctFail-User3").setMaxAccess("readonly")
if mibBuilder.loadTexts: pctFail_User3.setStatus('mandatory')
if mibBuilder.loadTexts: pctFail_User3.setDescription('The percent failed polls for User3 protocol')
pctFail_User4 = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 8, 59), Gauge32()).setLabel("pctFail-User4").setMaxAccess("readonly")
if mibBuilder.loadTexts: pctFail_User4.setStatus('mandatory')
if mibBuilder.loadTexts: pctFail_User4.setDescription('The percent failed polls for User2 protocol')
curState_User3 = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 8, 60), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("unk", 0), ("noresp", 1), ("up", 2), ("up-err", 3), ("down", 4)))).setLabel("curState-User3").setMaxAccess("readonly")
if mibBuilder.loadTexts: curState_User3.setStatus('mandatory')
if mibBuilder.loadTexts: curState_User3.setDescription('The current state of the User3 protocol application')
curState_User4 = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 8, 61), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("unk", 0), ("noresp", 1), ("up", 2), ("up-err", 3), ("down", 4)))).setLabel("curState-User4").setMaxAccess("readonly")
if mibBuilder.loadTexts: curState_User4.setStatus('mandatory')
if mibBuilder.loadTexts: curState_User4.setDescription('The current state of the User4 protocol application')
pollSvcType = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 8, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("regpoll", 1), ("web", 2), ("ftp", 3), ("smtp", 4), ("telnet", 5), ("user1", 6), ("user2", 7), ("user3", 8), ("user4", 9))))
if mibBuilder.loadTexts: pollSvcType.setStatus('mandatory')
if mibBuilder.loadTexts: pollSvcType.setDescription('TCP type for a service polling status trap')
avgRespTime_Poll = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 8, 38), Gauge32()).setLabel("avgRespTime-Poll").setMaxAccess("readonly")
if mibBuilder.loadTexts: avgRespTime_Poll.setStatus('mandatory')
if mibBuilder.loadTexts: avgRespTime_Poll.setDescription('The average response time IP/SNMP polling since system start')
avgRespTime_Web = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 8, 39), Gauge32()).setLabel("avgRespTime-Web").setMaxAccess("readonly")
if mibBuilder.loadTexts: avgRespTime_Web.setStatus('mandatory')
if mibBuilder.loadTexts: avgRespTime_Web.setDescription('The average response time for WEB protocol since system start')
avgRespTime_Ftp = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 8, 40), Gauge32()).setLabel("avgRespTime-Ftp").setMaxAccess("readonly")
if mibBuilder.loadTexts: avgRespTime_Ftp.setStatus('mandatory')
if mibBuilder.loadTexts: avgRespTime_Ftp.setDescription('The average response time for FTP protocol since system start')
avgRespTime_Smtp = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 8, 41), Gauge32()).setLabel("avgRespTime-Smtp").setMaxAccess("readonly")
if mibBuilder.loadTexts: avgRespTime_Smtp.setStatus('mandatory')
if mibBuilder.loadTexts: avgRespTime_Smtp.setDescription('The average response time for SMTP protocol since system start')
avgRespTime_Telnet = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 8, 42), Gauge32()).setLabel("avgRespTime-Telnet").setMaxAccess("readonly")
if mibBuilder.loadTexts: avgRespTime_Telnet.setStatus('mandatory')
if mibBuilder.loadTexts: avgRespTime_Telnet.setDescription('The average response time for TELNET protocol since system start')
avgRespTime_User1 = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 8, 43), Gauge32()).setLabel("avgRespTime-User1").setMaxAccess("readonly")
if mibBuilder.loadTexts: avgRespTime_User1.setStatus('mandatory')
if mibBuilder.loadTexts: avgRespTime_User1.setDescription('The average response time for User 1 protocol since system start')
avgRespTime_User2 = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 8, 44), Gauge32()).setLabel("avgRespTime-User2").setMaxAccess("readonly")
if mibBuilder.loadTexts: avgRespTime_User2.setStatus('mandatory')
if mibBuilder.loadTexts: avgRespTime_User2.setDescription('The average response time for User 2 protocol since system start')
avgPctFail_Poll = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 8, 45), Gauge32()).setLabel("avgPctFail-Poll").setMaxAccess("readonly")
if mibBuilder.loadTexts: avgPctFail_Poll.setStatus('mandatory')
if mibBuilder.loadTexts: avgPctFail_Poll.setDescription('The average % failures for IP/SNMP polling')
avgPctFail_Web = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 8, 46), Gauge32()).setLabel("avgPctFail-Web").setMaxAccess("readonly")
if mibBuilder.loadTexts: avgPctFail_Web.setStatus('mandatory')
if mibBuilder.loadTexts: avgPctFail_Web.setDescription('The average % failures for WEB protocol')
avgPctFail_Ftp = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 8, 47), Gauge32()).setLabel("avgPctFail-Ftp").setMaxAccess("readonly")
if mibBuilder.loadTexts: avgPctFail_Ftp.setStatus('mandatory')
if mibBuilder.loadTexts: avgPctFail_Ftp.setDescription('The average % failures for FTP protocol')
avgPctFail_Smtp = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 8, 48), Gauge32()).setLabel("avgPctFail-Smtp").setMaxAccess("readonly")
if mibBuilder.loadTexts: avgPctFail_Smtp.setStatus('mandatory')
if mibBuilder.loadTexts: avgPctFail_Smtp.setDescription('The average % failures for SMTP protocol')
avgPctFail_Telnet = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 8, 49), Gauge32()).setLabel("avgPctFail-Telnet").setMaxAccess("readonly")
if mibBuilder.loadTexts: avgPctFail_Telnet.setStatus('mandatory')
if mibBuilder.loadTexts: avgPctFail_Telnet.setDescription('The average % failures for TELNET protocol')
avgPctFail_User1 = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 8, 50), Gauge32()).setLabel("avgPctFail-User1").setMaxAccess("readonly")
if mibBuilder.loadTexts: avgPctFail_User1.setStatus('mandatory')
if mibBuilder.loadTexts: avgPctFail_User1.setDescription('The average % failures for User 1 protocol')
avgPctFail_User2 = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 8, 51), Gauge32()).setLabel("avgPctFail-User2").setMaxAccess("readonly")
if mibBuilder.loadTexts: avgPctFail_User2.setStatus('mandatory')
if mibBuilder.loadTexts: avgPctFail_User2.setDescription('The average % failures for User 2 protocol')
avgRespTime_User3 = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 8, 62), Gauge32()).setLabel("avgRespTime-User3").setMaxAccess("readonly")
if mibBuilder.loadTexts: avgRespTime_User3.setStatus('mandatory')
if mibBuilder.loadTexts: avgRespTime_User3.setDescription('The average response time for User 3 protocol since system start')
avgRespTime_User4 = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 8, 63), Gauge32()).setLabel("avgRespTime-User4").setMaxAccess("readonly")
if mibBuilder.loadTexts: avgRespTime_User4.setStatus('mandatory')
if mibBuilder.loadTexts: avgRespTime_User4.setDescription('The average response time for User 4 protocol since system start')
avgPctFail_User3 = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 8, 64), Gauge32()).setLabel("avgPctFail-User3").setMaxAccess("readonly")
if mibBuilder.loadTexts: avgPctFail_User3.setStatus('mandatory')
if mibBuilder.loadTexts: avgPctFail_User3.setDescription('The average % failures for User 3 protocol')
avgPctFail_User4 = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 8, 65), Gauge32()).setLabel("avgPctFail-User4").setMaxAccess("readonly")
if mibBuilder.loadTexts: avgPctFail_User4.setStatus('mandatory')
if mibBuilder.loadTexts: avgPctFail_User4.setDescription('The average % failures for User 4 protocol')
systemComponent = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("discoveryStatusPoller", 1), ("historyPoller", 2), ("domainMaster", 3), ("userConsole", 4), ("domainSlave", 5), ("snmpcServer", 6))))
if mibBuilder.loadTexts: systemComponent.setStatus('mandatory')
if mibBuilder.loadTexts: systemComponent.setDescription('The type of SNMPc NT component generating a system error Trap')
systemStatus = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 6, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2))))
if mibBuilder.loadTexts: systemStatus.setStatus('mandatory')
if mibBuilder.loadTexts: systemStatus.setDescription(' ')
systemLogMessage = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 6, 3), DisplayString())
if mibBuilder.loadTexts: systemLogMessage.setStatus('mandatory')
if mibBuilder.loadTexts: systemLogMessage.setDescription('A diagnostic description of an error that occurred in an SNMPc NT component')
systemErrorCode = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 6, 4), Integer32())
if mibBuilder.loadTexts: systemErrorCode.setStatus('mandatory')
if mibBuilder.loadTexts: systemErrorCode.setDescription('Detail error code for an SNMPc NT component error message')
deviceAddress = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 2, 1), OctetString())
if mibBuilder.loadTexts: deviceAddress.setStatus('mandatory')
if mibBuilder.loadTexts: deviceAddress.setDescription('The address of the device that is described by an event. The event is generated by the SNMPc NT Polling Agent, at pollAgentAddress, not the device at this address.')
deviceMapID = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 2, 2), Integer32())
if mibBuilder.loadTexts: deviceMapID.setStatus('mandatory')
if mibBuilder.loadTexts: deviceMapID.setDescription(' ')
pollAgentAddress = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 2, 3), IpAddress())
if mibBuilder.loadTexts: pollAgentAddress.setStatus('mandatory')
if mibBuilder.loadTexts: pollAgentAddress.setDescription('')
serverAddress = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 2, 4), IpAddress())
if mibBuilder.loadTexts: serverAddress.setStatus('mandatory')
if mibBuilder.loadTexts: serverAddress.setDescription('')
consAddress = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 2, 5), IpAddress())
if mibBuilder.loadTexts: consAddress.setStatus('mandatory')
if mibBuilder.loadTexts: consAddress.setDescription('')
consUser = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 2, 6), DisplayString())
if mibBuilder.loadTexts: consUser.setStatus('mandatory')
if mibBuilder.loadTexts: consUser.setDescription('')
objectName = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 3, 1), DisplayString())
if mibBuilder.loadTexts: objectName.setStatus('mandatory')
if mibBuilder.loadTexts: objectName.setDescription('')
objectNumber = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 3, 2), Integer32())
if mibBuilder.loadTexts: objectNumber.setStatus('mandatory')
if mibBuilder.loadTexts: objectNumber.setDescription('')
alarmVariable = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 4, 1), DisplayString())
if mibBuilder.loadTexts: alarmVariable.setStatus('mandatory')
if mibBuilder.loadTexts: alarmVariable.setDescription('')
alarmInstance = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 4, 2), DisplayString())
if mibBuilder.loadTexts: alarmInstance.setStatus('mandatory')
if mibBuilder.loadTexts: alarmInstance.setDescription('')
alarmValue = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 4, 3), Integer32())
if mibBuilder.loadTexts: alarmValue.setStatus('mandatory')
if mibBuilder.loadTexts: alarmValue.setDescription('')
alarmThreshold = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 4, 4), Integer32())
if mibBuilder.loadTexts: alarmThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: alarmThreshold.setDescription('')
alarmExpression = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 4, 5), DisplayString())
if mibBuilder.loadTexts: alarmExpression.setStatus('mandatory')
if mibBuilder.loadTexts: alarmExpression.setDescription('')
mibSourceFile = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 5, 1), DisplayString())
if mibBuilder.loadTexts: mibSourceFile.setStatus('mandatory')
if mibBuilder.loadTexts: mibSourceFile.setDescription('')
appName = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 9, 1), DisplayString())
if mibBuilder.loadTexts: appName.setStatus('mandatory')
if mibBuilder.loadTexts: appName.setDescription('The name of a third part add-on application')
appMessage = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 9, 2), DisplayString())
if mibBuilder.loadTexts: appMessage.setStatus('mandatory')
if mibBuilder.loadTexts: appMessage.setDescription('A message generated by a third part add-on application')
dummyTrap = NotificationType((1, 3, 6, 1, 4, 1, 56, 12, 1, 1) + (0,1))
if mibBuilder.loadTexts: dummyTrap.setDescription('The default event action for all enterprises')
pollLastStateDown = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1))))
if mibBuilder.loadTexts: pollLastStateDown.setStatus('mandatory')
if mibBuilder.loadTexts: pollLastStateDown.setDescription('The poll state of a device before it started responding')
pollSnmpErrorCode = MibScalar((1, 3, 6, 1, 4, 1, 56, 12, 1, 2, 2), Integer32())
if mibBuilder.loadTexts: pollSnmpErrorCode.setStatus('mandatory')
if mibBuilder.loadTexts: pollSnmpErrorCode.setDescription('The SNMP PDU error-status for a rejected poll request')
pollResponse = NotificationType((1, 3, 6, 1, 4, 1, 56, 12, 1, 2) + (0,1)).setObjects(("CASTLEROCK-MIB", "pollLastStateDown"))
if mibBuilder.loadTexts: pollResponse.setDescription('Device is responding to requests from the Polling Agent')
pollNoResponse = NotificationType((1, 3, 6, 1, 4, 1, 56, 12, 1, 2) + (0,2))
if mibBuilder.loadTexts: pollNoResponse.setDescription('Device failed one poll (including retries) from the Polling Agent')
pollStatusTestPass = NotificationType((1, 3, 6, 1, 4, 1, 56, 12, 1, 2) + (0,3)).setObjects(("CASTLEROCK-MIB", "alarmVariable"), ("CASTLEROCK-MIB", "alarmValue"))
if mibBuilder.loadTexts: pollStatusTestPass.setDescription('SNMP Status polling variable has an OK value')
pollStatusTestFail = NotificationType((1, 3, 6, 1, 4, 1, 56, 12, 1, 2) + (0,4)).setObjects(("CASTLEROCK-MIB", "alarmVariable"), ("CASTLEROCK-MIB", "alarmValue"))
if mibBuilder.loadTexts: pollStatusTestFail.setDescription('SNMP Status polling variable has a Bad value')
pollRequestRejected = NotificationType((1, 3, 6, 1, 4, 1, 56, 12, 1, 2) + (0,5)).setObjects(("CASTLEROCK-MIB", "pollSnmpErrorCode"))
if mibBuilder.loadTexts: pollRequestRejected.setDescription('SNMP sysObjectID or Status polling variable was rejected')
pollDeviceDown = NotificationType((1, 3, 6, 1, 4, 1, 56, 12, 1, 2) + (0,6))
if mibBuilder.loadTexts: pollDeviceDown.setDescription('Device has not responded to 3 requests from the Polling Agent, including retries for each request.')
pollServiceResponding = NotificationType((1, 3, 6, 1, 4, 1, 56, 12, 1, 2) + (0,7)).setObjects(("CASTLEROCK-MIB", "pollSvcType"), ("CASTLEROCK-MIB", "pollLastStateDown"))
if mibBuilder.loadTexts: pollServiceResponding.setDescription('TCP service poll OK')
pollServiceNoResponse = NotificationType((1, 3, 6, 1, 4, 1, 56, 12, 1, 2) + (0,8)).setObjects(("CASTLEROCK-MIB", "pollSvcType"))
if mibBuilder.loadTexts: pollServiceNoResponse.setDescription('TCP service not responding to one poll (including retries)')
pollServiceDown = NotificationType((1, 3, 6, 1, 4, 1, 56, 12, 1, 2) + (0,9)).setObjects(("CASTLEROCK-MIB", "pollSvcType"))
if mibBuilder.loadTexts: pollServiceDown.setDescription('TCP service poll failed 3 attempts (including retries)')
alarmAutoThresholdTrigger = NotificationType((1, 3, 6, 1, 4, 1, 56, 12, 1, 3) + (0,1)).setObjects(("CASTLEROCK-MIB", "alarmVariable"), ("CASTLEROCK-MIB", "alarmInstance"), ("CASTLEROCK-MIB", "alarmValue"), ("CASTLEROCK-MIB", "alarmThreshold"))
if mibBuilder.loadTexts: alarmAutoThresholdTrigger.setDescription(' ')
alarmAutoThresholdSet = NotificationType((1, 3, 6, 1, 4, 1, 56, 12, 1, 3) + (0,2)).setObjects(("CASTLEROCK-MIB", "alarmVariable"), ("CASTLEROCK-MIB", "alarmInstance"), ("CASTLEROCK-MIB", "alarmThreshold"))
if mibBuilder.loadTexts: alarmAutoThresholdSet.setDescription(' ')
alarmAutoThresholdExpand = NotificationType((1, 3, 6, 1, 4, 1, 56, 12, 1, 3) + (0,3)).setObjects(("CASTLEROCK-MIB", "alarmVariable"), ("CASTLEROCK-MIB", "alarmInstance"), ("CASTLEROCK-MIB", "alarmThreshold"))
if mibBuilder.loadTexts: alarmAutoThresholdExpand.setDescription(' ')
alarmAutoThresholdReduce = NotificationType((1, 3, 6, 1, 4, 1, 56, 12, 1, 3) + (0,4)).setObjects(("CASTLEROCK-MIB", "alarmVariable"), ("CASTLEROCK-MIB", "alarmInstance"), ("CASTLEROCK-MIB", "alarmThreshold"))
if mibBuilder.loadTexts: alarmAutoThresholdReduce.setDescription(' ')
alarmManualThresholdTrigger = NotificationType((1, 3, 6, 1, 4, 1, 56, 12, 1, 3) + (0,5)).setObjects(("CASTLEROCK-MIB", "alarmVariable"), ("CASTLEROCK-MIB", "alarmInstance"), ("CASTLEROCK-MIB", "alarmValue"), ("CASTLEROCK-MIB", "alarmExpression"))
if mibBuilder.loadTexts: alarmManualThresholdTrigger.setDescription(' ')
alarmManualThresholdReset = NotificationType((1, 3, 6, 1, 4, 1, 56, 12, 1, 3) + (0,6)).setObjects(("CASTLEROCK-MIB", "alarmVariable"), ("CASTLEROCK-MIB", "alarmInstance"), ("CASTLEROCK-MIB", "alarmValue"), ("CASTLEROCK-MIB", "alarmExpression"))
if mibBuilder.loadTexts: alarmManualThresholdReset.setDescription(' ')
pollAgentConnect = NotificationType((1, 3, 6, 1, 4, 1, 56, 12, 1, 5) + (0,1)).setObjects(("CASTLEROCK-MIB", "systemComponent"))
if mibBuilder.loadTexts: pollAgentConnect.setDescription('SNMPc Polling Agent Connected over RPC')
pollAgentDisconnect = NotificationType((1, 3, 6, 1, 4, 1, 56, 12, 1, 5) + (0,2)).setObjects(("CASTLEROCK-MIB", "systemComponent"))
if mibBuilder.loadTexts: pollAgentDisconnect.setDescription('SNMPc Polling Agent RPC Connection Lost')
systemInfo = NotificationType((1, 3, 6, 1, 4, 1, 56, 12, 1, 5) + (0,3)).setObjects(("CASTLEROCK-MIB", "systemComponent"), ("CASTLEROCK-MIB", "systemLogMessage"))
if mibBuilder.loadTexts: systemInfo.setDescription('SNMPc Component diagnostic information message')
systemWarn = NotificationType((1, 3, 6, 1, 4, 1, 56, 12, 1, 5) + (0,4)).setObjects(("CASTLEROCK-MIB", "systemComponent"), ("CASTLEROCK-MIB", "systemLogMessage"), ("CASTLEROCK-MIB", "systemErrorCode"))
if mibBuilder.loadTexts: systemWarn.setDescription('SNMPc Component diagnostic warning message')
systemError = NotificationType((1, 3, 6, 1, 4, 1, 56, 12, 1, 5) + (0,5)).setObjects(("CASTLEROCK-MIB", "systemComponent"), ("CASTLEROCK-MIB", "systemLogMessage"), ("CASTLEROCK-MIB", "systemErrorCode"))
if mibBuilder.loadTexts: systemError.setDescription('SNMPc Component diagnostic error message')
diskLowWarning = NotificationType((1, 3, 6, 1, 4, 1, 56, 12, 1, 5) + (0,6))
if mibBuilder.loadTexts: diskLowWarning.setDescription('Disk space below 50MB - system will shutdown at < 10MB')
diskLowError = NotificationType((1, 3, 6, 1, 4, 1, 56, 12, 1, 5) + (0,7))
if mibBuilder.loadTexts: diskLowError.setDescription('Disk space below 10MB - system shut down')
appInfo = NotificationType((1, 3, 6, 1, 4, 1, 56, 12, 1, 7) + (0,1)).setObjects(("CASTLEROCK-MIB", "appName"), ("CASTLEROCK-MIB", "appMessage"))
if mibBuilder.loadTexts: appInfo.setDescription('Vendor application diagnostic warning message')
appWarn = NotificationType((1, 3, 6, 1, 4, 1, 56, 12, 1, 7) + (0,2)).setObjects(("CASTLEROCK-MIB", "appName"), ("CASTLEROCK-MIB", "appMessage"))
if mibBuilder.loadTexts: appWarn.setDescription('Vendor application diagnostic information message')
appError = NotificationType((1, 3, 6, 1, 4, 1, 56, 12, 1, 7) + (0,3)).setObjects(("CASTLEROCK-MIB", "appName"), ("CASTLEROCK-MIB", "appMessage"))
if mibBuilder.loadTexts: appError.setDescription('Vendor application diagnostic error message')
mibBuilder.exportSymbols("CASTLEROCK-MIB", objectGroup=objectGroup, pollFail_User3=pollFail_User3, objectName=objectName, alarmManualThresholdTrigger=alarmManualThresholdTrigger, avgRespTime_Web=avgRespTime_Web, appWarn=appWarn, respTime_Telnet=respTime_Telnet, avgRespTime_Ftp=avgRespTime_Ftp, objectNumber=objectNumber, curState_User2=curState_User2, respTime_User3=respTime_User3, avgPctFail_User3=avgPctFail_User3, systemErrorCode=systemErrorCode, systemError=systemError, systemComponent=systemComponent, deviceMapID=deviceMapID, snmpc_Status_Polling=snmpc_Status_Polling, pollOK_Web=pollOK_Web, dummyTrap=dummyTrap, pollLastStateDown=pollLastStateDown, pollServiceDown=pollServiceDown, snmpc=snmpc, snmpc_System_Info=snmpc_System_Info, pollOK_Telnet=pollOK_Telnet, avgRespTime_Smtp=avgRespTime_Smtp, avgPctFail_Ftp=avgPctFail_Ftp, alarmGroup=alarmGroup, pctFail_Web=pctFail_Web, pollOK_Smtp=pollOK_Smtp, systemInfo=systemInfo, availGroup=availGroup, alarmManualThresholdReset=alarmManualThresholdReset, mibGroup=mibGroup, pollServiceResponding=pollServiceResponding, pollFail_User2=pollFail_User2, respTime_Ftp=respTime_Ftp, diskLowError=diskLowError, curState_SMTP=curState_SMTP, curState_User3=curState_User3, appGroup=appGroup, snmpc_Events=snmpc_Events, alarmValue=alarmValue, avgPctFail_Telnet=avgPctFail_Telnet, respTime_Web=respTime_Web, alarmVariable=alarmVariable, pollFail_Smtp=pollFail_Smtp, pollStatusTestPass=pollStatusTestPass, pollOK_Poll=pollOK_Poll, snmpc_Mib_Compiler=snmpc_Mib_Compiler, pollFail_Telnet=pollFail_Telnet, appError=appError, respTime_User2=respTime_User2, pollFail_Poll=pollFail_Poll, respTime_User1=respTime_User1, curState_User1=curState_User1, pollFail_User1=pollFail_User1, pollOK_User2=pollOK_User2, curState_WEB=curState_WEB, pollFail_Ftp=pollFail_Ftp, pollResponse=pollResponse, pollOK_User3=pollOK_User3, serverAddress=serverAddress, alarmAutoThresholdTrigger=alarmAutoThresholdTrigger, pollOK_Ftp=pollOK_Ftp, consAddress=consAddress, avgRespTime_Poll=avgRespTime_Poll, pctFail_Telnet=pctFail_Telnet, pollServiceNoResponse=pollServiceNoResponse, systemWarn=systemWarn, pollOK_User4=pollOK_User4, appName=appName, avgPctFail_User4=avgPctFail_User4, respTime_User4=respTime_User4, deviceAddress=deviceAddress, pctFail_User4=pctFail_User4, avgRespTime_User4=avgRespTime_User4, pollNoResponse=pollNoResponse, pollRequestRejected=pollRequestRejected, systemLogMessage=systemLogMessage, avgRespTime_Telnet=avgRespTime_Telnet, avgPctFail_Web=avgPctFail_Web, mibSourceFile=mibSourceFile, alarmThreshold=alarmThreshold, appMessage=appMessage, pctFail_User3=pctFail_User3, alarmExpression=alarmExpression, respTime_Poll=respTime_Poll, avgPctFail_User1=avgPctFail_User1, global_Defaults=global_Defaults, alarmAutoThresholdExpand=alarmAutoThresholdExpand, pollStatusTestFail=pollStatusTestFail, pctFail_Ftp=pctFail_Ftp, pollFail_User4=pollFail_User4, pctFail_User1=pctFail_User1, curState_POLL=curState_POLL, pollDeviceDown=pollDeviceDown, pctFail_Smtp=pctFail_Smtp, pollOK_User1=pollOK_User1, alarmInstance=alarmInstance, curState_User4=curState_User4, defunctGroup=defunctGroup, systemStatus=systemStatus, pollAgentDisconnect=pollAgentDisconnect, respTime_Smtp=respTime_Smtp, appInfo=appInfo, avgPctFail_Smtp=avgPctFail_Smtp, addressGroup=addressGroup, avgRespTime_User2=avgRespTime_User2, pollAgentAddress=pollAgentAddress, pollAgentConnect=pollAgentConnect, pctFail_Poll=pctFail_Poll, snmpc_App_Events=snmpc_App_Events, consUser=consUser, curState_FTP=curState_FTP, alarmAutoThresholdSet=alarmAutoThresholdSet, castleRock=castleRock, systemGroup=systemGroup, avgPctFail_User2=avgPctFail_User2, snmpc_Threshold_Alarm=snmpc_Threshold_Alarm, curState_TELNET=curState_TELNET, avgRespTime_User3=avgRespTime_User3, pollFail_Web=pollFail_Web, pollSnmpErrorCode=pollSnmpErrorCode, avgPctFail_Poll=avgPctFail_Poll, pctFail_User2=pctFail_User2, alarmAutoThresholdReduce=alarmAutoThresholdReduce, diskLowWarning=diskLowWarning, pollSvcType=pollSvcType, avgRespTime_User1=avgRespTime_User1)
