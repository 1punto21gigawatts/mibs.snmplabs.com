#
# PySNMP MIB module H3C-HPEOC-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/H3C-HPEOC-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:22:16 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint")
h3cCommon, = mibBuilder.importSymbols("HUAWEI-3COM-OID-MIB", "h3cCommon")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ObjectIdentity, Bits, Unsigned32, iso, Counter32, ModuleIdentity, Counter64, Integer32, IpAddress, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, TimeTicks, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "Bits", "Unsigned32", "iso", "Counter32", "ModuleIdentity", "Counter64", "Integer32", "IpAddress", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "TimeTicks", "NotificationType")
TruthValue, DisplayString, MacAddress, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "DisplayString", "MacAddress", "TextualConvention")
h3cHPEOC = ModuleIdentity((1, 3, 6, 1, 4, 1, 2011, 10, 2, 84))
if mibBuilder.loadTexts: h3cHPEOC.setLastUpdated('200708281008Z')
if mibBuilder.loadTexts: h3cHPEOC.setOrganization('Hangzhou H3C Tech. Co., Ltd.')
if mibBuilder.loadTexts: h3cHPEOC.setContactInfo('SMB EOC Team H3C Technologies Co., Ltd. 310 Liuhe Road, Zhijiang Science Park, Hangzhou, P.R.China http://www.h3c.com Zip:310053.')
if mibBuilder.loadTexts: h3cHPEOC.setDescription(' The objects in this MIB module are used to manage and display current configuration of Ethernet Over Cable Network (EOC) which based on HomePlug(HP) AV Specification. ')
h3cHPEOCSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 10, 2, 84, 1))
h3cHPEOCCltVlanType = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 84, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ieee8021q", 1), ("portbased", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cHPEOCCltVlanType.setStatus('current')
if mibBuilder.loadTexts: h3cHPEOCCltVlanType.setDescription(" Control EOC CLT's VLAN type, ieee8021q : 802.1q VLAN mode, portbased : portbased VLAN mode. ")
h3cHPEOCCltVlanManTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 84, 1, 2), )
if mibBuilder.loadTexts: h3cHPEOCCltVlanManTable.setStatus('current')
if mibBuilder.loadTexts: h3cHPEOCCltVlanManTable.setDescription(' This table implements the management of CLT(Coax Line Terminal) VLAN. ')
h3cHPEOCCltVlanManEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 84, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: h3cHPEOCCltVlanManEntry.setStatus('current')
if mibBuilder.loadTexts: h3cHPEOCCltVlanManEntry.setDescription(' The entry of the table h3cHPEOCCltVlanManTable. ')
h3cHPEOCCltEthPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 84, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("debug", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cHPEOCCltEthPortType.setStatus('current')
if mibBuilder.loadTexts: h3cHPEOCCltEthPortType.setDescription(" Control CLT ethernet ports' type, normal : port which used for normal translation, debug : port which used for debug. ")
h3cHPEOCCltSysManTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 84, 1, 3), )
if mibBuilder.loadTexts: h3cHPEOCCltSysManTable.setStatus('current')
if mibBuilder.loadTexts: h3cHPEOCCltSysManTable.setDescription(' This table implements the management of CLT(Coax Line Terminal). ')
h3cHPEOCCltSysManEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 84, 1, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: h3cHPEOCCltSysManEntry.setStatus('current')
if mibBuilder.loadTexts: h3cHPEOCCltSysManEntry.setDescription(' The entry of the table h3cHPEOCCltSysManTable. ')
h3cHPEOCCltDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 84, 1, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 126))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cHPEOCCltDescr.setStatus('current')
if mibBuilder.loadTexts: h3cHPEOCCltDescr.setDescription(' Set the description of CLT. ')
h3cHPEOCCltFwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 84, 1, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cHPEOCCltFwVersion.setStatus('current')
if mibBuilder.loadTexts: h3cHPEOCCltFwVersion.setDescription(' EOC firmware version. If the object length is zero, it means the version is unknown. ')
h3cHPEOCCnuSysManTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 84, 1, 4), )
if mibBuilder.loadTexts: h3cHPEOCCnuSysManTable.setStatus('current')
if mibBuilder.loadTexts: h3cHPEOCCnuSysManTable.setDescription(' This table implements the management of CNUs. ')
h3cHPEOCCnuSysManEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 84, 1, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: h3cHPEOCCnuSysManEntry.setStatus('current')
if mibBuilder.loadTexts: h3cHPEOCCnuSysManEntry.setDescription(' The entry of the table h3cHPEOCCnuSysManTable. ')
h3cHPEOCCnuBcastControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 84, 1, 4, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cHPEOCCnuBcastControl.setStatus('current')
if mibBuilder.loadTexts: h3cHPEOCCnuBcastControl.setDescription(' Broadcast storm suppression status. true(1) - Broadcast storm suppression enable. false(2) - Broadcast storm suppression disable. ')
h3cHPEOCCnuAnonymStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 84, 1, 4, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cHPEOCCnuAnonymStatus.setStatus('current')
if mibBuilder.loadTexts: h3cHPEOCCnuAnonymStatus.setDescription(' Anonymity status. true(1) - the user which uses the CNU is anonymous. false(2) - the user which uses the CNU has an account. ')
h3cHPEOCCnuMacLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 84, 1, 4, 1, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cHPEOCCnuMacLimit.setStatus('current')
if mibBuilder.loadTexts: h3cHPEOCCnuMacLimit.setDescription(" Configure the max number of MAC address entries which can access through the CNU, it ranges from 1 to 8. Otherwise, If configure 0, the CNU won't limit the MAC address entry. If configure 0xFF, it means no MAC address entry can access the CNU. ")
h3cHPEOCCltAutoUpgrade = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 84, 1, 5), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cHPEOCCltAutoUpgrade.setStatus('current')
if mibBuilder.loadTexts: h3cHPEOCCltAutoUpgrade.setDescription(' Auto upgrade Status. true(1) - The firmware of the CNU will be auto changed by CLT. false(2)- The firmware of the CNU will not be auto changed. ')
h3cHPEOCOnLineCnuNumber = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 84, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cHPEOCOnLineCnuNumber.setStatus('current')
if mibBuilder.loadTexts: h3cHPEOCOnLineCnuNumber.setDescription(' The total number of the online CNU(s). ')
h3cHPEOCCpuMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 84, 1, 7), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cHPEOCCpuMacAddress.setStatus('current')
if mibBuilder.loadTexts: h3cHPEOCCpuMacAddress.setDescription(" EOC CPU's MAC address. ")
h3cHPEOCOffLineCnuNumber = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 84, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cHPEOCOffLineCnuNumber.setStatus('current')
if mibBuilder.loadTexts: h3cHPEOCOffLineCnuNumber.setDescription(' The total number of the offline CNU(s). ')
h3cHPEOCDownLoadCNUFWResult = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 84, 1, 9), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: h3cHPEOCDownLoadCNUFWResult.setStatus('current')
if mibBuilder.loadTexts: h3cHPEOCDownLoadCNUFWResult.setDescription(' Download CNU firmware result. ')
h3cHPEOCCltAutoUpgradeType = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 84, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("flash", 1), ("ftp", 2), ("tftp", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cHPEOCCltAutoUpgradeType.setStatus('current')
if mibBuilder.loadTexts: h3cHPEOCCltAutoUpgradeType.setDescription(' Type of auto upgrade status. It depends on h3cHPEOCCltAutoUpgrade status. flash - The CLT auto upgrade the firmware inside its flash to the CNUs. ftp - First download the firmware from FTP server to the CLT, then the CLT auto upgrade the firmware to the CNUs. tftp - First download the firmware from TFTP server to the CLT, then the CLT auto upgrade the firmware to the CNUs. ')
h3cHPEOCAutoUpObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 10, 2, 84, 1, 11))
h3cHPEOCServerAddress = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 84, 1, 11, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cHPEOCServerAddress.setStatus('current')
if mibBuilder.loadTexts: h3cHPEOCServerAddress.setDescription(' The address of remote host acting as server for operation. The default value is 0.0.0.0 ')
h3cHPEOCServerUser = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 84, 1, 11, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cHPEOCServerUser.setStatus('current')
if mibBuilder.loadTexts: h3cHPEOCServerUser.setDescription(' When using ftp to transfer files, the user name must be specified through this node. It contains 1 to 30 characters. ')
h3cHPEOCServerPassword = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 84, 1, 11, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cHPEOCServerPassword.setStatus('current')
if mibBuilder.loadTexts: h3cHPEOCServerPassword.setDescription(' Remote user password for copying via ftp protocol. Optionally, this object may be ignored for protocols other than ftp. It contains 1 to 31 characters. ')
h3cHPEOCCableInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 10, 2, 84, 2))
h3cHPEOCCableInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 84, 2, 1), )
if mibBuilder.loadTexts: h3cHPEOCCableInfoTable.setStatus('current')
if mibBuilder.loadTexts: h3cHPEOCCableInfoTable.setDescription(' This table defines the primary parameters of the cable information. ')
h3cHPEOCCableInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 84, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: h3cHPEOCCableInfoEntry.setStatus('current')
if mibBuilder.loadTexts: h3cHPEOCCableInfoEntry.setDescription(' The entry of the table h3cHPEOCCableInfoTable. ')
h3cHPEOCFECErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 84, 2, 1, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cHPEOCFECErrors.setStatus('current')
if mibBuilder.loadTexts: h3cHPEOCFECErrors.setDescription(" The cable port's FEC bits errors ratio. FEC means the payload Forward Error Correction. It's a technology of controlling errors. Packets in transmission is checked by the receiver, if error occurs, the receiver will announce the sender to resend. ")
h3cHPEOCAvgBitsPerCarrier = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 84, 2, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cHPEOCAvgBitsPerCarrier.setStatus('current')
if mibBuilder.loadTexts: h3cHPEOCAvgBitsPerCarrier.setDescription(" The cable port's average bits per carrier. ")
h3cHPEOCAvgSNRPerCarrier = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 84, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cHPEOCAvgSNRPerCarrier.setStatus('current')
if mibBuilder.loadTexts: h3cHPEOCAvgSNRPerCarrier.setDescription(" The cable port's signal noise ratio(SNR) bits per carrier. ")
h3cHPEOCAvgInPBCRCErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 84, 2, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cHPEOCAvgInPBCRCErrors.setStatus('current')
if mibBuilder.loadTexts: h3cHPEOCAvgInPBCRCErrors.setDescription(' The input PB CRC errors on average. ')
h3cHPEOCInTotalPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 84, 2, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cHPEOCInTotalPkts.setStatus('current')
if mibBuilder.loadTexts: h3cHPEOCInTotalPkts.setDescription(' The total number of packets(including bad packets) received on this interface. ')
h3cHPEOCAvgOutPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 84, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cHPEOCAvgOutPower.setStatus('current')
if mibBuilder.loadTexts: h3cHPEOCAvgOutPower.setDescription(" The cable port's power sent on average, the unit is db. ")
h3cHPEOCAvgOutPBCRCErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 84, 2, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cHPEOCAvgOutPBCRCErrors.setStatus('current')
if mibBuilder.loadTexts: h3cHPEOCAvgOutPBCRCErrors.setDescription(" The cable port's physical block(PB) cyclic redundancy check(CRC) errors sent on average. ")
h3cHPEOCOutTotalPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 84, 2, 1, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cHPEOCOutTotalPkts.setStatus('current')
if mibBuilder.loadTexts: h3cHPEOCOutTotalPkts.setDescription(' The total count of the packets(including bad packets) sent on this interface. ')
h3cHPEOCBitPerSymbolTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 84, 2, 2), )
if mibBuilder.loadTexts: h3cHPEOCBitPerSymbolTable.setStatus('current')
if mibBuilder.loadTexts: h3cHPEOCBitPerSymbolTable.setDescription(' This table defines the bits per symbol parameters of the cable line. ')
h3cHPEOCBitPerSymbolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 84, 2, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "H3C-HPEOC-MIB", "h3cHPEOCBitPerSymbolIndex"))
if mibBuilder.loadTexts: h3cHPEOCBitPerSymbolEntry.setStatus('current')
if mibBuilder.loadTexts: h3cHPEOCBitPerSymbolEntry.setDescription(' The entry of the table h3cHPEOCBitPerSymbolTable. ')
h3cHPEOCBitPerSymbolIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 84, 2, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: h3cHPEOCBitPerSymbolIndex.setStatus('current')
if mibBuilder.loadTexts: h3cHPEOCBitPerSymbolIndex.setDescription(' The index of the h3cHPEOCBitPerSymbolTable. ')
h3cHPEOCBitPerSymbol = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 84, 2, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cHPEOCBitPerSymbol.setStatus('current')
if mibBuilder.loadTexts: h3cHPEOCBitPerSymbol.setDescription(' h3cHPEOCBitPerSymbol returns all the bits per symbol on the fixed frequency. Each 4 bits stand for one value, all the values picking-up will make up a cable bit map. ')
mibBuilder.exportSymbols("H3C-HPEOC-MIB", h3cHPEOCServerAddress=h3cHPEOCServerAddress, h3cHPEOCOffLineCnuNumber=h3cHPEOCOffLineCnuNumber, h3cHPEOC=h3cHPEOC, h3cHPEOCDownLoadCNUFWResult=h3cHPEOCDownLoadCNUFWResult, h3cHPEOCAvgSNRPerCarrier=h3cHPEOCAvgSNRPerCarrier, h3cHPEOCFECErrors=h3cHPEOCFECErrors, h3cHPEOCCltVlanType=h3cHPEOCCltVlanType, h3cHPEOCInTotalPkts=h3cHPEOCInTotalPkts, h3cHPEOCSystem=h3cHPEOCSystem, h3cHPEOCCnuSysManTable=h3cHPEOCCnuSysManTable, h3cHPEOCAvgOutPower=h3cHPEOCAvgOutPower, h3cHPEOCCnuAnonymStatus=h3cHPEOCCnuAnonymStatus, h3cHPEOCCltAutoUpgrade=h3cHPEOCCltAutoUpgrade, h3cHPEOCCableInfoTable=h3cHPEOCCableInfoTable, PYSNMP_MODULE_ID=h3cHPEOC, h3cHPEOCCltFwVersion=h3cHPEOCCltFwVersion, h3cHPEOCServerPassword=h3cHPEOCServerPassword, h3cHPEOCCltSysManTable=h3cHPEOCCltSysManTable, h3cHPEOCCnuBcastControl=h3cHPEOCCnuBcastControl, h3cHPEOCCableInfoEntry=h3cHPEOCCableInfoEntry, h3cHPEOCAutoUpObjects=h3cHPEOCAutoUpObjects, h3cHPEOCCltEthPortType=h3cHPEOCCltEthPortType, h3cHPEOCAvgOutPBCRCErrors=h3cHPEOCAvgOutPBCRCErrors, h3cHPEOCCableInfo=h3cHPEOCCableInfo, h3cHPEOCCpuMacAddress=h3cHPEOCCpuMacAddress, h3cHPEOCCltVlanManTable=h3cHPEOCCltVlanManTable, h3cHPEOCServerUser=h3cHPEOCServerUser, h3cHPEOCBitPerSymbolTable=h3cHPEOCBitPerSymbolTable, h3cHPEOCCltSysManEntry=h3cHPEOCCltSysManEntry, h3cHPEOCCltDescr=h3cHPEOCCltDescr, h3cHPEOCOnLineCnuNumber=h3cHPEOCOnLineCnuNumber, h3cHPEOCBitPerSymbol=h3cHPEOCBitPerSymbol, h3cHPEOCCltAutoUpgradeType=h3cHPEOCCltAutoUpgradeType, h3cHPEOCCltVlanManEntry=h3cHPEOCCltVlanManEntry, h3cHPEOCOutTotalPkts=h3cHPEOCOutTotalPkts, h3cHPEOCCnuSysManEntry=h3cHPEOCCnuSysManEntry, h3cHPEOCAvgInPBCRCErrors=h3cHPEOCAvgInPBCRCErrors, h3cHPEOCBitPerSymbolIndex=h3cHPEOCBitPerSymbolIndex, h3cHPEOCCnuMacLimit=h3cHPEOCCnuMacLimit, h3cHPEOCAvgBitsPerCarrier=h3cHPEOCAvgBitsPerCarrier, h3cHPEOCBitPerSymbolEntry=h3cHPEOCBitPerSymbolEntry)
