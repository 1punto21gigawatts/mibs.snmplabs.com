#
# PySNMP MIB module DLINK-3100-rlBrgMulticast-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DLINK-3100-rlBrgMulticast-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:49:28 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
MacAddress, = mibBuilder.importSymbols("BRIDGE-MIB", "MacAddress")
rndErrorSeverity, rndErrorDesc = mibBuilder.importSymbols("DLINK-3100-DEVICEPARAMS-MIB", "rndErrorSeverity", "rndErrorDesc")
rlMacMulticast, rndNotifications, rnd, rlBrgMulticast = mibBuilder.importSymbols("DLINK-3100-MIB", "rlMacMulticast", "rndNotifications", "rnd", "rlBrgMulticast")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
PortList, VlanIndex = mibBuilder.importSymbols("Q-BRIDGE-MIB", "PortList", "VlanIndex")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Gauge32, ModuleIdentity, iso, MibIdentifier, ObjectIdentity, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, Integer32, IpAddress, TimeTicks, Unsigned32, NotificationType, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "ModuleIdentity", "iso", "MibIdentifier", "ObjectIdentity", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "Integer32", "IpAddress", "TimeTicks", "Unsigned32", "NotificationType", "Bits")
TruthValue, DisplayString, TextualConvention, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "DisplayString", "TextualConvention", "RowStatus")
rlMacMulticastEnable = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 55, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlMacMulticastEnable.setStatus('current')
if mibBuilder.loadTexts: rlMacMulticastEnable.setDescription('Enable/Disable MAC Multicast bridging in the device.')
rlIgmpSnoop = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 55, 2))
rlIgmpSnoopMibVersion = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 55, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlIgmpSnoopMibVersion.setStatus('current')
if mibBuilder.loadTexts: rlIgmpSnoopMibVersion.setDescription("MIB's version, the current version is 3. IGMP Snooping supports IGMPv3.")
rlIgmpSnoopEnable = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 55, 2, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlIgmpSnoopEnable.setStatus('current')
if mibBuilder.loadTexts: rlIgmpSnoopEnable.setDescription('Enable/Disable IGMP Snooping in the switch.')
rlIgmpSnoopHostAgingTime = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 55, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(260)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlIgmpSnoopHostAgingTime.setStatus('current')
if mibBuilder.loadTexts: rlIgmpSnoopHostAgingTime.setDescription('The amount of time that should pass before aging out an entry in the rlIgmpSnoopGroupTable will be aged out.')
rlIgmpSnoopRouterAgingTime = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 55, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)).clone(300)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlIgmpSnoopRouterAgingTime.setStatus('current')
if mibBuilder.loadTexts: rlIgmpSnoopRouterAgingTime.setDescription('The amount of time that should pass before aging out an entry in the rlIgmpSnoopInterfaceTable will be aged out.')
class IgmpVersion(TextualConvention, Integer32):
    description = 'IGMP version.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("none", 0), ("v1", 1), ("v2", 2), ("v3", 3))

rlIgmpSnoopVlanTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 55, 2, 7), )
if mibBuilder.loadTexts: rlIgmpSnoopVlanTable.setStatus('current')
if mibBuilder.loadTexts: rlIgmpSnoopVlanTable.setDescription('The table listing the per vlan parameters : enable/disable , aging-out timers , filter ports and permanent ports.')
rlIgmpSnoopVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 55, 2, 7, 1), ).setIndexNames((0, "DLINK-3100-rlBrgMulticast-MIB", "rlIgmpSnoopVlanTag"))
if mibBuilder.loadTexts: rlIgmpSnoopVlanEntry.setStatus('current')
if mibBuilder.loadTexts: rlIgmpSnoopVlanEntry.setDescription('An entry (conceptual row) in the rlIgmpSnoopVlanTable.')
rlIgmpSnoopVlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 55, 2, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlIgmpSnoopVlanTag.setStatus('current')
if mibBuilder.loadTexts: rlIgmpSnoopVlanTag.setDescription('The tag of the VLAN for which this entry contains information for an IP Multicast Router.')
rlIgmpSnoopVlanEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 55, 2, 7, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlIgmpSnoopVlanEnable.setStatus('current')
if mibBuilder.loadTexts: rlIgmpSnoopVlanEnable.setDescription('Enable/Disable IGMP Snooping in the vlan.')
rlIgmpSnoopVlanRouterLearn = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 55, 2, 7, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlIgmpSnoopVlanRouterLearn.setStatus('current')
if mibBuilder.loadTexts: rlIgmpSnoopVlanRouterLearn.setDescription('Enable/Disable of Learning of routers in the vlan.')
rlIgmpSnoopVlanHostTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 55, 2, 7, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(260)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlIgmpSnoopVlanHostTimeOut.setStatus('current')
if mibBuilder.loadTexts: rlIgmpSnoopVlanHostTimeOut.setDescription('The amount of time that should pass before aging out an entry in the rlIgmpSnoopMembershipTable for this vlan.')
rlIgmpSnoopVlanQuerierTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 55, 2, 7, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)).clone(260)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlIgmpSnoopVlanQuerierTimeOut.setStatus('current')
if mibBuilder.loadTexts: rlIgmpSnoopVlanQuerierTimeOut.setDescription('The amount of time where no query is heard until querier is activated')
rlIgmpSnoopVlanRouterTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 55, 2, 7, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)).clone(300)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlIgmpSnoopVlanRouterTimeOut.setStatus('current')
if mibBuilder.loadTexts: rlIgmpSnoopVlanRouterTimeOut.setDescription('The amount of time that should pass before aging out a port in the router ports dynamically learnt for this vlan.')
rlIgmpSnoopVlanLeaveTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 55, 2, 7, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(10)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlIgmpSnoopVlanLeaveTimeOut.setStatus('current')
if mibBuilder.loadTexts: rlIgmpSnoopVlanLeaveTimeOut.setDescription('The amount of time that should pass before aging out an entry in the rlIgmpSnoopMembershipTable for this vlan, after recieving a leave/exclude message from the port of the entry.')
rlIgmpSnoopVlanIgmpVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 55, 2, 7, 1, 8), IgmpVersion()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlIgmpSnoopVlanIgmpVersion.setStatus('current')
if mibBuilder.loadTexts: rlIgmpSnoopVlanIgmpVersion.setDescription('The current IGMP protocol version running on the VLAN.')
rlIgmpSnoopVlanRouterPortlist = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 55, 2, 7, 1, 9), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlIgmpSnoopVlanRouterPortlist.setStatus('current')
if mibBuilder.loadTexts: rlIgmpSnoopVlanRouterPortlist.setDescription('List of router ports learned dynamically on this VLAN from PIM, DVMRP, MRDISC and IGMP Query messages ')
rlIgmpSnoopIGMP224ReportsHandle = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 55, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allow", 1), ("ignore", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlIgmpSnoopIGMP224ReportsHandle.setStatus('current')
if mibBuilder.loadTexts: rlIgmpSnoopIGMP224ReportsHandle.setDescription('This varaiable indicates whether to allow IGMP reports for groups in the 224.0.0.X range when the group address is already manually configured or to ignore.')
rlIgmpSnoopMulticastTvTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 55, 2, 10), )
if mibBuilder.loadTexts: rlIgmpSnoopMulticastTvTable.setStatus('current')
if mibBuilder.loadTexts: rlIgmpSnoopMulticastTvTable.setDescription(' multicast vlan used for this port')
rlIgmpSnoopMulticastTvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 55, 2, 10, 1), ).setIndexNames((0, "DLINK-3100-rlBrgMulticast-MIB", "rlIgmpSnoopMulticastTvVID"), (0, "DLINK-3100-rlBrgMulticast-MIB", "rlIgmpSnoopMulticastTvGroup"))
if mibBuilder.loadTexts: rlIgmpSnoopMulticastTvEntry.setStatus('current')
if mibBuilder.loadTexts: rlIgmpSnoopMulticastTvEntry.setDescription(' entry of multicast ip')
rlIgmpSnoopMulticastTvVID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 55, 2, 10, 1, 1), VlanIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlIgmpSnoopMulticastTvVID.setStatus('current')
if mibBuilder.loadTexts: rlIgmpSnoopMulticastTvVID.setDescription('Specify the multicast ip to be used.')
rlIgmpSnoopMulticastTvGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 55, 2, 10, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlIgmpSnoopMulticastTvGroup.setStatus('current')
if mibBuilder.loadTexts: rlIgmpSnoopMulticastTvGroup.setDescription('Specify the multicast ip to be used.')
rlIgmpSnoopMulticastTvStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 55, 2, 10, 1, 3), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlIgmpSnoopMulticastTvStatus.setStatus('current')
if mibBuilder.loadTexts: rlIgmpSnoopMulticastTvStatus.setDescription('The row status variable, used according to row installation and removal conventions.')
rlIgmpSnoopMembershipTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 55, 2, 11), )
if mibBuilder.loadTexts: rlIgmpSnoopMembershipTable.setStatus('current')
if mibBuilder.loadTexts: rlIgmpSnoopMembershipTable.setDescription('The table listing the IP multicast memberships.')
rlIgmpSnoopMembershipEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 55, 2, 11, 1), ).setIndexNames((0, "DLINK-3100-rlBrgMulticast-MIB", "rlIgmpSnoopMembershipVlanTag"), (0, "DLINK-3100-rlBrgMulticast-MIB", "rlIgmpSnoopMembershipGroupIpAddress"), (0, "DLINK-3100-rlBrgMulticast-MIB", "rlIgmpSnoopMembershipSourceIpAddress"))
if mibBuilder.loadTexts: rlIgmpSnoopMembershipEntry.setStatus('current')
if mibBuilder.loadTexts: rlIgmpSnoopMembershipEntry.setDescription('An entry (conceptual row) in the rlIgmpSnoopMembershipTable.')
rlIgmpSnoopMembershipVlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 55, 2, 11, 1, 1), VlanIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlIgmpSnoopMembershipVlanTag.setStatus('current')
if mibBuilder.loadTexts: rlIgmpSnoopMembershipVlanTag.setDescription('The VLAN tag for which this entry contains multicast membership information.')
rlIgmpSnoopMembershipGroupIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 55, 2, 11, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlIgmpSnoopMembershipGroupIpAddress.setStatus('current')
if mibBuilder.loadTexts: rlIgmpSnoopMembershipGroupIpAddress.setDescription('The multicast group address.')
rlIgmpSnoopMembershipSourceIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 55, 2, 11, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlIgmpSnoopMembershipSourceIpAddress.setStatus('current')
if mibBuilder.loadTexts: rlIgmpSnoopMembershipSourceIpAddress.setDescription('The unicast source address.')
rlIgmpSnoopMembershipIncPortlist = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 55, 2, 11, 1, 4), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlIgmpSnoopMembershipIncPortlist.setStatus('current')
if mibBuilder.loadTexts: rlIgmpSnoopMembershipIncPortlist.setDescription('Included ports, where a report message was heard for the group (IGMP version 2|1) or group and source address (IGMP version 3).')
rlIgmpSnoopMembershipExcPortlist = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 55, 2, 11, 1, 5), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlIgmpSnoopMembershipExcPortlist.setStatus('current')
if mibBuilder.loadTexts: rlIgmpSnoopMembershipExcPortlist.setDescription('Excluded ports where an exclude report message was heard for the group and source address (IGMP version 3). ')
rlIgmpSnoopMembershipExpiryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 55, 2, 11, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlIgmpSnoopMembershipExpiryTime.setStatus('obsolete')
if mibBuilder.loadTexts: rlIgmpSnoopMembershipExpiryTime.setDescription('Time till entry will expire.')
rlIgmpSnoopMembershipCompatibilityMode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 55, 2, 11, 1, 7), IgmpVersion()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlIgmpSnoopMembershipCompatibilityMode.setStatus('current')
if mibBuilder.loadTexts: rlIgmpSnoopMembershipCompatibilityMode.setDescription('IGMP group compatibility mode.')
rlIgmpSnoopQuerierVlanTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 55, 2, 12), )
if mibBuilder.loadTexts: rlIgmpSnoopQuerierVlanTable.setStatus('current')
if mibBuilder.loadTexts: rlIgmpSnoopQuerierVlanTable.setDescription('A table that contains IGMP Snooping Querier information about every vlan. This is indexed by vlan tag.')
rlIgmpSnoopQuerierVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 55, 2, 12, 1), ).setIndexNames((0, "DLINK-3100-rlBrgMulticast-MIB", "rlIgmpSnoopQuerierVlanTag"))
if mibBuilder.loadTexts: rlIgmpSnoopQuerierVlanEntry.setStatus('current')
if mibBuilder.loadTexts: rlIgmpSnoopQuerierVlanEntry.setDescription('An entry (conceptual row) in the rlIgmpSnoopQuerierVlanTable.')
rlIgmpSnoopQuerierVlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 55, 2, 12, 1, 1), VlanIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlIgmpSnoopQuerierVlanTag.setStatus('current')
if mibBuilder.loadTexts: rlIgmpSnoopQuerierVlanTag.setDescription('An IGMP Snoop Querier entry vlan tag.')
rlIgmpSnoopQuerierAdminEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 55, 2, 12, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlIgmpSnoopQuerierAdminEnable.setStatus('current')
if mibBuilder.loadTexts: rlIgmpSnoopQuerierAdminEnable.setDescription('The desired administrative state of IGMP Snoop Querier on the vlan.')
rlIgmpSnoopQuerierOperEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 55, 2, 12, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlIgmpSnoopQuerierOperEnable.setStatus('current')
if mibBuilder.loadTexts: rlIgmpSnoopQuerierOperEnable.setDescription('The current operational state of IGMP Snoop Querier on the vlan.')
rlIgmpSnoopQuerierAdminAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 55, 2, 12, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlIgmpSnoopQuerierAdminAddr.setStatus('current')
if mibBuilder.loadTexts: rlIgmpSnoopQuerierAdminAddr.setDescription('The desired IP address is being used in IGMP Snoop Querier messages on the vlan.')
rlIgmpSnoopQuerierOperAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 55, 2, 12, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlIgmpSnoopQuerierOperAddr.setStatus('current')
if mibBuilder.loadTexts: rlIgmpSnoopQuerierOperAddr.setDescription('The current operational IP address is being used in IGMP Snoop Querier messages on the vlan.')
rlIgmpSnoopQuerierAdminVersionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 55, 2, 12, 1, 6), IgmpVersion()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlIgmpSnoopQuerierAdminVersionNumber.setStatus('current')
if mibBuilder.loadTexts: rlIgmpSnoopQuerierAdminVersionNumber.setDescription('The highest version number of IGMP Snoop Querier for the vlan.')
rlIgmpSnoopQuerierOperVersionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 55, 2, 12, 1, 7), IgmpVersion()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlIgmpSnoopQuerierOperVersionNumber.setStatus('current')
if mibBuilder.loadTexts: rlIgmpSnoopQuerierOperVersionNumber.setDescription('The current operational version number of IGMP Snoop Querier for the vlan.')
rlMacMulticastMaxEntriesNum = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 55, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlMacMulticastMaxEntriesNum.setStatus('current')
if mibBuilder.loadTexts: rlMacMulticastMaxEntriesNum.setDescription('The maximum number of Mac Multicast entries the device supports.')
rlMacMulticastFilter = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 55, 4))
rlMacMulticastUnregFilterEnable = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 55, 4, 1), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlMacMulticastUnregFilterEnable.setStatus('current')
if mibBuilder.loadTexts: rlMacMulticastUnregFilterEnable.setDescription('Each bit represent a port whether Unregistered Multicast Filtering enable ')
rlBrgMulticastMibVersion = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 116, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlBrgMulticastMibVersion.setStatus('current')
if mibBuilder.loadTexts: rlBrgMulticastMibVersion.setDescription("MIB's version, the current version is 4. Snooping supports IGMPv1/v2/v3 and MLDv1/v2.")
rlBrgStaticIpMulticastTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 116, 3), )
if mibBuilder.loadTexts: rlBrgStaticIpMulticastTable.setStatus('current')
if mibBuilder.loadTexts: rlBrgStaticIpMulticastTable.setDescription('A table containing filtering information for IP Multicast addresses for each VLAN.')
rlBrgStaticIpMulticastEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 116, 3, 1), ).setIndexNames((0, "DLINK-3100-rlBrgMulticast-MIB", "rlBrgStaticIpMulticastVlanTag"), (0, "DLINK-3100-rlBrgMulticast-MIB", "rlBrgStaticIpMulticastGroupAddress"), (0, "DLINK-3100-rlBrgMulticast-MIB", "rlBrgStaticIpMulticastSourceAddress"))
if mibBuilder.loadTexts: rlBrgStaticIpMulticastEntry.setStatus('current')
if mibBuilder.loadTexts: rlBrgStaticIpMulticastEntry.setDescription('Filtering information configured into the device. The set of ports to which frames containing this IP Multicast destination address and IP source address are allowed to be forwarded.')
rlBrgStaticIpMulticastVlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 116, 3, 1, 1), VlanIndex())
if mibBuilder.loadTexts: rlBrgStaticIpMulticastVlanTag.setStatus('current')
if mibBuilder.loadTexts: rlBrgStaticIpMulticastVlanTag.setDescription('The VLAN tag for which this entry is configured.')
rlBrgStaticIpMulticastGroupAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 116, 3, 1, 2), IpAddress())
if mibBuilder.loadTexts: rlBrgStaticIpMulticastGroupAddress.setStatus('current')
if mibBuilder.loadTexts: rlBrgStaticIpMulticastGroupAddress.setDescription('The multicast group address for which the filtering information applies ')
rlBrgStaticIpMulticastSourceAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 116, 3, 1, 3), IpAddress())
if mibBuilder.loadTexts: rlBrgStaticIpMulticastSourceAddress.setStatus('current')
if mibBuilder.loadTexts: rlBrgStaticIpMulticastSourceAddress.setDescription('The unicast group address for which the filtering information applies.')
rlBrgStaticIpMulticastFrwPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 116, 3, 1, 4), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlBrgStaticIpMulticastFrwPorts.setStatus('current')
if mibBuilder.loadTexts: rlBrgStaticIpMulticastFrwPorts.setDescription('The ports the data should be forwarded to ')
rlBrgStaticIpMulticastForbiddenPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 116, 3, 1, 5), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlBrgStaticIpMulticastForbiddenPorts.setStatus('current')
if mibBuilder.loadTexts: rlBrgStaticIpMulticastForbiddenPorts.setDescription('The ports that overrides dynamic configuration and prevents multicast data forwarding for the group or group and source to these ports.')
rlBrgStaticIpMulticastStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 116, 3, 1, 6), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlBrgStaticIpMulticastStatus.setStatus('current')
if mibBuilder.loadTexts: rlBrgStaticIpMulticastStatus.setDescription("The status of the table entry. It's used to add/delete an entry")
rlBrgIpMulticastTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 116, 4), )
if mibBuilder.loadTexts: rlBrgIpMulticastTable.setStatus('current')
if mibBuilder.loadTexts: rlBrgIpMulticastTable.setDescription('A table containing all filtering information for IP Multicast addresses for each VLAN ')
rlBrgIpMulticastEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 116, 4, 1), ).setIndexNames((0, "DLINK-3100-rlBrgMulticast-MIB", "rlBrgIpMulticastVlanTag"), (0, "DLINK-3100-rlBrgMulticast-MIB", "rlBrgIpMulticastGroupAddress"), (0, "DLINK-3100-rlBrgMulticast-MIB", "rlBrgIpMulticastSourceAddress"))
if mibBuilder.loadTexts: rlBrgIpMulticastEntry.setStatus('current')
if mibBuilder.loadTexts: rlBrgIpMulticastEntry.setDescription('An entry (conceptual row) in the rlBrgIpMulticastTable contains IP Multicast FDB data ')
rlBrgIpMulticastVlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 116, 4, 1, 1), VlanIndex())
if mibBuilder.loadTexts: rlBrgIpMulticastVlanTag.setStatus('current')
if mibBuilder.loadTexts: rlBrgIpMulticastVlanTag.setDescription('The VLAN tag for which this entry is configured.')
rlBrgIpMulticastGroupAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 116, 4, 1, 2), IpAddress())
if mibBuilder.loadTexts: rlBrgIpMulticastGroupAddress.setStatus('current')
if mibBuilder.loadTexts: rlBrgIpMulticastGroupAddress.setDescription('Multicast group address (destination address) of data frames ')
rlBrgIpMulticastSourceAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 116, 4, 1, 3), IpAddress())
if mibBuilder.loadTexts: rlBrgIpMulticastSourceAddress.setStatus('current')
if mibBuilder.loadTexts: rlBrgIpMulticastSourceAddress.setDescription('Unicast source address of data frames.')
rlBrgIpMulticastEgressPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 116, 4, 1, 4), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlBrgIpMulticastEgressPorts.setStatus('current')
if mibBuilder.loadTexts: rlBrgIpMulticastEgressPorts.setDescription('The complete set of ports, in this VLAN, to which frames destined for this Group IP address or Group and Source address are currently being explicitly forwarded. This does not include ports for which this address is only implicitly forwarded, in the dot1qForwardAllPorts list.')
rlBrgIpMulticastLearntPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 116, 4, 1, 5), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlBrgIpMulticastLearntPorts.setStatus('current')
if mibBuilder.loadTexts: rlBrgIpMulticastLearntPorts.setDescription('The subset of ports in rlBrgIpMulticastEgressPorts which were learnt by IGMP or some other dynamic mechanism, in this Filtering database..')
rlBrgStaticInetMulticastTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 116, 5), )
if mibBuilder.loadTexts: rlBrgStaticInetMulticastTable.setStatus('current')
if mibBuilder.loadTexts: rlBrgStaticInetMulticastTable.setDescription('A table containing filtering information for INET (Pv4 and IPv6) Multicast addresses for each VLAN.')
rlBrgStaticInetMulticastEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 116, 5, 1), ).setIndexNames((0, "DLINK-3100-rlBrgMulticast-MIB", "rlBrgStaticInetMulticastVlanTag"), (0, "DLINK-3100-rlBrgMulticast-MIB", "rlBrgStaticInetMulticastGroupAddressType"), (0, "DLINK-3100-rlBrgMulticast-MIB", "rlBrgStaticInetMulticastGroupAddress"), (0, "DLINK-3100-rlBrgMulticast-MIB", "rlBrgStaticInetMulticastSourceAddressType"), (0, "DLINK-3100-rlBrgMulticast-MIB", "rlBrgStaticInetMulticastSourceAddress"))
if mibBuilder.loadTexts: rlBrgStaticInetMulticastEntry.setStatus('current')
if mibBuilder.loadTexts: rlBrgStaticInetMulticastEntry.setDescription('Filtering information configured into the device. The set of ports to which frames containing this IP Multicast destination address and IP source address are allowed to be forwarded.')
rlBrgStaticInetMulticastVlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 116, 5, 1, 1), VlanIndex())
if mibBuilder.loadTexts: rlBrgStaticInetMulticastVlanTag.setStatus('current')
if mibBuilder.loadTexts: rlBrgStaticInetMulticastVlanTag.setDescription('The VLAN tag for which this entry is configured.')
rlBrgStaticInetMulticastGroupAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 116, 5, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlBrgStaticInetMulticastGroupAddressType.setStatus('current')
if mibBuilder.loadTexts: rlBrgStaticInetMulticastGroupAddressType.setDescription('Inet type ipv6/ipv4.')
rlBrgStaticInetMulticastGroupAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 116, 5, 1, 3), InetAddress())
if mibBuilder.loadTexts: rlBrgStaticInetMulticastGroupAddress.setStatus('current')
if mibBuilder.loadTexts: rlBrgStaticInetMulticastGroupAddress.setDescription('The multicast group address for which the filtering information applies ')
rlBrgStaticInetMulticastSourceAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 116, 5, 1, 4), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlBrgStaticInetMulticastSourceAddressType.setStatus('current')
if mibBuilder.loadTexts: rlBrgStaticInetMulticastSourceAddressType.setDescription('Inet type ipv6/ipv4.')
rlBrgStaticInetMulticastSourceAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 116, 5, 1, 5), InetAddress())
if mibBuilder.loadTexts: rlBrgStaticInetMulticastSourceAddress.setStatus('current')
if mibBuilder.loadTexts: rlBrgStaticInetMulticastSourceAddress.setDescription('The unicast group address for which the filtering information applies.')
rlBrgStaticInetMulticastFrwPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 116, 5, 1, 6), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlBrgStaticInetMulticastFrwPorts.setStatus('current')
if mibBuilder.loadTexts: rlBrgStaticInetMulticastFrwPorts.setDescription('The ports the data should be forwarded to ')
rlBrgStaticInetMulticastForbiddenPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 116, 5, 1, 7), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlBrgStaticInetMulticastForbiddenPorts.setStatus('current')
if mibBuilder.loadTexts: rlBrgStaticInetMulticastForbiddenPorts.setDescription('The ports that overrides dynamic configuration and prevents multicast data forwarding for the group or group and source to these ports.')
rlBrgStaticInetMulticastStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 116, 5, 1, 8), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlBrgStaticInetMulticastStatus.setStatus('current')
if mibBuilder.loadTexts: rlBrgStaticInetMulticastStatus.setDescription("The status of the table entry. It's used to add/delete an entry")
rlBrgInetMulticastTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 116, 6), )
if mibBuilder.loadTexts: rlBrgInetMulticastTable.setStatus('current')
if mibBuilder.loadTexts: rlBrgInetMulticastTable.setDescription('A table containing all filtering information for IP Multicast addresses for each VLAN ')
rlBrgInetMulticastEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 116, 6, 1), ).setIndexNames((0, "DLINK-3100-rlBrgMulticast-MIB", "rlBrgInetMulticastVlanTag"), (0, "DLINK-3100-rlBrgMulticast-MIB", "rlBrgInetMulticastGroupAddressType"), (0, "DLINK-3100-rlBrgMulticast-MIB", "rlBrgInetMulticastGroupAddress"), (0, "DLINK-3100-rlBrgMulticast-MIB", "rlBrgInetMulticastSourceAddressType"), (0, "DLINK-3100-rlBrgMulticast-MIB", "rlBrgInetMulticastSourceAddress"))
if mibBuilder.loadTexts: rlBrgInetMulticastEntry.setStatus('current')
if mibBuilder.loadTexts: rlBrgInetMulticastEntry.setDescription('An entry (conceptual row) in the rlBrgInetMulticastTable contains IP Multicast FDB data ')
rlBrgInetMulticastVlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 116, 6, 1, 1), VlanIndex())
if mibBuilder.loadTexts: rlBrgInetMulticastVlanTag.setStatus('current')
if mibBuilder.loadTexts: rlBrgInetMulticastVlanTag.setDescription('The VLAN tag for which this entry is configured.')
rlBrgInetMulticastGroupAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 116, 6, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlBrgInetMulticastGroupAddressType.setStatus('current')
if mibBuilder.loadTexts: rlBrgInetMulticastGroupAddressType.setDescription('Inet type IPv4/IPv6.')
rlBrgInetMulticastGroupAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 116, 6, 1, 3), InetAddress())
if mibBuilder.loadTexts: rlBrgInetMulticastGroupAddress.setStatus('current')
if mibBuilder.loadTexts: rlBrgInetMulticastGroupAddress.setDescription('Multicast group address (destination address) of data frames ')
rlBrgInetMulticastSourceAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 116, 6, 1, 4), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlBrgInetMulticastSourceAddressType.setStatus('current')
if mibBuilder.loadTexts: rlBrgInetMulticastSourceAddressType.setDescription('Inet type IPv4/IPv6.')
rlBrgInetMulticastSourceAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 116, 6, 1, 5), InetAddress())
if mibBuilder.loadTexts: rlBrgInetMulticastSourceAddress.setStatus('current')
if mibBuilder.loadTexts: rlBrgInetMulticastSourceAddress.setDescription('Unicast source address of data frames.')
rlBrgInetMulticastEgressPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 116, 6, 1, 6), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlBrgInetMulticastEgressPorts.setStatus('current')
if mibBuilder.loadTexts: rlBrgInetMulticastEgressPorts.setDescription('The complete set of ports, in this VLAN, to which frames destined for this Group IP address or Group and Source address are currently being explicitly forwarded. This does not include ports for which this address is only implicitly forwarded, in the dot1qForwardAllPorts list.')
rlBrgInetMulticastLearntPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 116, 6, 1, 7), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlBrgInetMulticastLearntPorts.setStatus('current')
if mibBuilder.loadTexts: rlBrgInetMulticastLearntPorts.setDescription('The subset of ports in rlBrgIpMulticastEgressPorts which were learnt by IGMP or some other dynamic mechanism, in this Filtering database..')
rlBrgIpmFdbRefTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 116, 7), )
if mibBuilder.loadTexts: rlBrgIpmFdbRefTable.setStatus('current')
if mibBuilder.loadTexts: rlBrgIpmFdbRefTable.setDescription('A table containing all information stored in IPM FDB overlapping Reference Table ')
rlBrgIpmFdbRefEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 116, 7, 1), ).setIndexNames((0, "DLINK-3100-rlBrgMulticast-MIB", "rlBrgIpmFdbRefVlanTag"), (0, "DLINK-3100-rlBrgMulticast-MIB", "rlBrgIpmFdbRefGroupAddressType"), (0, "DLINK-3100-rlBrgMulticast-MIB", "rlBrgIpmFdbRefGroupAddress"), (0, "DLINK-3100-rlBrgMulticast-MIB", "rlBrgIpmFdbRefSourceAddressType"), (0, "DLINK-3100-rlBrgMulticast-MIB", "rlBrgIpmFdbRefSourceAddress"))
if mibBuilder.loadTexts: rlBrgIpmFdbRefEntry.setStatus('current')
if mibBuilder.loadTexts: rlBrgIpmFdbRefEntry.setDescription('An entry (conceptual row) in the rlBrgIpmFdbRefTable contains overlapping Reference Table FDB data ')
rlBrgIpmFdbRefVlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 116, 7, 1, 1), VlanIndex())
if mibBuilder.loadTexts: rlBrgIpmFdbRefVlanTag.setStatus('current')
if mibBuilder.loadTexts: rlBrgIpmFdbRefVlanTag.setDescription('The VLAN tag for which this entry is configured.')
rlBrgIpmFdbRefGroupAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 116, 7, 1, 2), InetAddressType())
if mibBuilder.loadTexts: rlBrgIpmFdbRefGroupAddressType.setStatus('current')
if mibBuilder.loadTexts: rlBrgIpmFdbRefGroupAddressType.setDescription('Multicast group address (destination address) of data frames ')
rlBrgIpmFdbRefGroupAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 116, 7, 1, 3), InetAddress())
if mibBuilder.loadTexts: rlBrgIpmFdbRefGroupAddress.setStatus('current')
if mibBuilder.loadTexts: rlBrgIpmFdbRefGroupAddress.setDescription('Multicast group address (destination address) of data frames ')
rlBrgIpmFdbRefSourceAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 116, 7, 1, 4), InetAddressType())
if mibBuilder.loadTexts: rlBrgIpmFdbRefSourceAddressType.setStatus('current')
if mibBuilder.loadTexts: rlBrgIpmFdbRefSourceAddressType.setDescription('Unicast source address of data frames.')
rlBrgIpmFdbRefSourceAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 116, 7, 1, 5), InetAddress())
if mibBuilder.loadTexts: rlBrgIpmFdbRefSourceAddress.setStatus('current')
if mibBuilder.loadTexts: rlBrgIpmFdbRefSourceAddress.setDescription('Unicast source address of data frames.')
rlBrgIpmFdbRefPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 116, 7, 1, 6), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlBrgIpmFdbRefPorts.setStatus('current')
if mibBuilder.loadTexts: rlBrgIpmFdbRefPorts.setDescription('The list of ports represented in IPM FDB overlapping Reference Table')
class DynamicCmdType(TextualConvention, Integer32):
    description = 'Type of Dynamic IPM FDB command: Create Entry, Delete Entry, Set ports Pset.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("createEntry", 0), ("deleteEntry", 1), ("addPorts", 2), ("deletePorts", 3))

rlBrgDynamicCmdTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 116, 8), )
if mibBuilder.loadTexts: rlBrgDynamicCmdTable.setStatus('current')
if mibBuilder.loadTexts: rlBrgDynamicCmdTable.setDescription('The (conceptual) table for Dynamic IPM FDB command. For debugging purposes only. This MIB is prohibited to be used with working IGMP/MLD snooping')
rlBrgDynamicCmdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 116, 8, 1), ).setIndexNames((0, "DLINK-3100-rlBrgMulticast-MIB", "rlBrgDynamicCmdKey"))
if mibBuilder.loadTexts: rlBrgDynamicCmdEntry.setStatus('current')
if mibBuilder.loadTexts: rlBrgDynamicCmdEntry.setDescription('An entry (conceptual row) in the rlBrgDynamicCmdTable.')
rlBrgDynamicCmdKey = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 116, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1)))
if mibBuilder.loadTexts: rlBrgDynamicCmdKey.setStatus('current')
if mibBuilder.loadTexts: rlBrgDynamicCmdKey.setDescription('Key of the rlBrgDynamicCmdTable table')
rlBrgDynamicCmdVlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 116, 8, 1, 2), VlanIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlBrgDynamicCmdVlanTag.setStatus('current')
if mibBuilder.loadTexts: rlBrgDynamicCmdVlanTag.setDescription('The VLAN tag for which this entry is configured.')
rlBrgDynamicCmdGroupAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 116, 8, 1, 3), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlBrgDynamicCmdGroupAddressType.setStatus('current')
if mibBuilder.loadTexts: rlBrgDynamicCmdGroupAddressType.setDescription('Multicast group address (destination address) of data frames ')
rlBrgDynamicCmdGroupAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 116, 8, 1, 4), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlBrgDynamicCmdGroupAddress.setStatus('current')
if mibBuilder.loadTexts: rlBrgDynamicCmdGroupAddress.setDescription('Multicast group address (destination address) of data frames ')
rlBrgDynamicCmdSourceAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 116, 8, 1, 5), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlBrgDynamicCmdSourceAddressType.setStatus('current')
if mibBuilder.loadTexts: rlBrgDynamicCmdSourceAddressType.setDescription('Unicast source address of data frames.')
rlBrgDynamicCmdSourceAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 116, 8, 1, 6), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlBrgDynamicCmdSourceAddress.setStatus('current')
if mibBuilder.loadTexts: rlBrgDynamicCmdSourceAddress.setDescription('Unicast source address of data frames.')
rlBrgDynamicCmdPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 116, 8, 1, 7), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlBrgDynamicCmdPorts.setStatus('current')
if mibBuilder.loadTexts: rlBrgDynamicCmdPorts.setDescription('The list of ports for them the command is issued')
rlBrgDynamicCmdType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 116, 8, 1, 8), DynamicCmdType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlBrgDynamicCmdType.setStatus('current')
if mibBuilder.loadTexts: rlBrgDynamicCmdType.setDescription('Current type of command')
rlMldSnoop = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 55, 5))
rlMldSnoopEnable = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 55, 5, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlMldSnoopEnable.setStatus('current')
if mibBuilder.loadTexts: rlMldSnoopEnable.setDescription('Enable/Disable Mld Snooping in the switch.')
rlMldSnoopHostAgingTime = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 55, 5, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 2147483647)).clone(260)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlMldSnoopHostAgingTime.setStatus('obsolete')
if mibBuilder.loadTexts: rlMldSnoopHostAgingTime.setDescription('The amount of time that should pass before aging out an entry in the rlMldSnoopGroupTable will be aged out.')
rlMldSnoopRouterAgingTime = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 55, 5, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)).clone(300)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlMldSnoopRouterAgingTime.setStatus('obsolete')
if mibBuilder.loadTexts: rlMldSnoopRouterAgingTime.setDescription('The amount of time that should pass before aging out an entry in the rlMldSnoopInterfaceTable will be aged out.')
rlIgmpMldSnoopMembershipTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 55, 5, 4), )
if mibBuilder.loadTexts: rlIgmpMldSnoopMembershipTable.setStatus('current')
if mibBuilder.loadTexts: rlIgmpMldSnoopMembershipTable.setDescription('The table listing the IP multicast memberships.')
rlIgmpMldSnoopMembershipEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 55, 5, 4, 1), ).setIndexNames((0, "DLINK-3100-rlBrgMulticast-MIB", "rlIgmpMldSnoopMembershipVlanTag"), (0, "DLINK-3100-rlBrgMulticast-MIB", "rlIgmpMldSnoopMembershipGroupIpAddressType"), (0, "DLINK-3100-rlBrgMulticast-MIB", "rlIgmpMldSnoopMembershipGroupIpAddress"), (0, "DLINK-3100-rlBrgMulticast-MIB", "rlIgmpMldSnoopMembershipSourceIpAddressType"), (0, "DLINK-3100-rlBrgMulticast-MIB", "rlIgmpMldSnoopMembershipSourceIpAddress"))
if mibBuilder.loadTexts: rlIgmpMldSnoopMembershipEntry.setStatus('current')
if mibBuilder.loadTexts: rlIgmpMldSnoopMembershipEntry.setDescription('An entry (conceptual row) in the rlIgmpMldSnoopMembershipTable.')
rlIgmpMldSnoopMembershipVlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 55, 5, 4, 1, 1), VlanIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlIgmpMldSnoopMembershipVlanTag.setStatus('current')
if mibBuilder.loadTexts: rlIgmpMldSnoopMembershipVlanTag.setDescription('The VLAN tag for which this entry contains multicast membership information.')
rlIgmpMldSnoopMembershipGroupIpAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 55, 5, 4, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlIgmpMldSnoopMembershipGroupIpAddressType.setStatus('current')
if mibBuilder.loadTexts: rlIgmpMldSnoopMembershipGroupIpAddressType.setDescription('Inet type IPv4/IPv6.')
rlIgmpMldSnoopMembershipGroupIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 55, 5, 4, 1, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlIgmpMldSnoopMembershipGroupIpAddress.setStatus('current')
if mibBuilder.loadTexts: rlIgmpMldSnoopMembershipGroupIpAddress.setDescription('The multicast group address.')
rlIgmpMldSnoopMembershipSourceIpAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 55, 5, 4, 1, 4), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlIgmpMldSnoopMembershipSourceIpAddressType.setStatus('current')
if mibBuilder.loadTexts: rlIgmpMldSnoopMembershipSourceIpAddressType.setDescription('Inet type IPv4/IPv6.')
rlIgmpMldSnoopMembershipSourceIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 55, 5, 4, 1, 5), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlIgmpMldSnoopMembershipSourceIpAddress.setStatus('current')
if mibBuilder.loadTexts: rlIgmpMldSnoopMembershipSourceIpAddress.setDescription('The unicast source address.')
rlIgmpMldSnoopMembershipIncPortlist = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 55, 5, 4, 1, 6), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlIgmpMldSnoopMembershipIncPortlist.setStatus('current')
if mibBuilder.loadTexts: rlIgmpMldSnoopMembershipIncPortlist.setDescription('Included ports, where a report message was heard for the group (IGMPv2/V1 or MLDv1) or group and source address (IGMPv3/MLDv2).')
rlIgmpMldSnoopMembershipExcPortlist = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 55, 5, 4, 1, 7), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlIgmpMldSnoopMembershipExcPortlist.setStatus('current')
if mibBuilder.loadTexts: rlIgmpMldSnoopMembershipExcPortlist.setDescription('list of excluded ports to which an exclude report message was heard for the group and source address (IGMPv3/MLDv2 ). ')
rlIgmpMldSnoopMembershipExpiryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 55, 5, 4, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlIgmpMldSnoopMembershipExpiryTime.setStatus('obsolete')
if mibBuilder.loadTexts: rlIgmpMldSnoopMembershipExpiryTime.setDescription('Time till entry will expire.')
rlIgmpMldSnoopMembershipCompatibilityMode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 55, 5, 4, 1, 9), IgmpVersion()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlIgmpMldSnoopMembershipCompatibilityMode.setStatus('current')
if mibBuilder.loadTexts: rlIgmpMldSnoopMembershipCompatibilityMode.setDescription('IGMP/MLD group compatibility mode.')
rlIgmpMldSnoopVlanTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 55, 5, 5), )
if mibBuilder.loadTexts: rlIgmpMldSnoopVlanTable.setStatus('current')
if mibBuilder.loadTexts: rlIgmpMldSnoopVlanTable.setDescription('The table lists the per vlan parameters : enable/disable , aging-out timers , filter ports and permanent ports.')
rlIgmpMldSnoopVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 55, 5, 5, 1), ).setIndexNames((0, "DLINK-3100-rlBrgMulticast-MIB", "rlIgmpMldSnoopVlanInetAddressType"), (0, "DLINK-3100-rlBrgMulticast-MIB", "rlIgmpMldSnoopVlanTag"))
if mibBuilder.loadTexts: rlIgmpMldSnoopVlanEntry.setStatus('current')
if mibBuilder.loadTexts: rlIgmpMldSnoopVlanEntry.setDescription('An entry (conceptual row) in the rlIgmpSnoopVlanTable.')
rlIgmpMldSnoopVlanInetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 55, 5, 5, 1, 1), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlIgmpMldSnoopVlanInetAddressType.setStatus('current')
if mibBuilder.loadTexts: rlIgmpMldSnoopVlanInetAddressType.setDescription('Inet type ipv6/ipv4.')
rlIgmpMldSnoopVlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 55, 5, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlIgmpMldSnoopVlanTag.setStatus('current')
if mibBuilder.loadTexts: rlIgmpMldSnoopVlanTag.setDescription('The tag of the VLAN for which this entry contains information for an IP Multicast Router.')
rlIgmpMldSnoopVlanEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 55, 5, 5, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlIgmpMldSnoopVlanEnable.setStatus('current')
if mibBuilder.loadTexts: rlIgmpMldSnoopVlanEnable.setDescription('Enable/Disable IGMP Snooping in the vlan.')
rlIgmpMldSnoopVlanRouterLearn = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 55, 5, 5, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlIgmpMldSnoopVlanRouterLearn.setStatus('current')
if mibBuilder.loadTexts: rlIgmpMldSnoopVlanRouterLearn.setDescription('Enable/Disable of Learning of routers in the vlan.')
rlIgmpMldSnoopVlanHostTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 55, 5, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 2147483647)).clone(260)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlIgmpMldSnoopVlanHostTimeOut.setStatus('obsolete')
if mibBuilder.loadTexts: rlIgmpMldSnoopVlanHostTimeOut.setDescription('The amount of time that should pass before aging out an entry in the rlIgmpSnoopMembershipTable for this vlan.')
rlIgmpMldSnoopVlanQuerierTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 55, 5, 5, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)).clone(260)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlIgmpMldSnoopVlanQuerierTimeOut.setStatus('obsolete')
if mibBuilder.loadTexts: rlIgmpMldSnoopVlanQuerierTimeOut.setDescription('The amount of time where no query is heard until querier is activated')
rlIgmpMldSnoopVlanRouterTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 55, 5, 5, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)).clone(300)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlIgmpMldSnoopVlanRouterTimeOut.setStatus('obsolete')
if mibBuilder.loadTexts: rlIgmpMldSnoopVlanRouterTimeOut.setDescription('The amount of time that should pass before aging out a port in the router ports dynamically learnt for this vlan.')
rlIgmpMldSnoopVlanLeaveTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 55, 5, 5, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(10)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlIgmpMldSnoopVlanLeaveTimeOut.setStatus('obsolete')
if mibBuilder.loadTexts: rlIgmpMldSnoopVlanLeaveTimeOut.setDescription('The amount of time that should pass before aging out an entry in the rlIgmpSnoopMembershipTable for this vlan, after recieving a leave/exclude message from the port of the entry.')
rlIgmpMldSnoopVlanIgmpVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 55, 5, 5, 1, 9), IgmpVersion()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlIgmpMldSnoopVlanIgmpVersion.setStatus('current')
if mibBuilder.loadTexts: rlIgmpMldSnoopVlanIgmpVersion.setDescription('The current IGMP protocol version running on the VLAN.')
rlIgmpMldSnoopVlanRouterPortlist = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 55, 5, 5, 1, 10), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlIgmpMldSnoopVlanRouterPortlist.setStatus('current')
if mibBuilder.loadTexts: rlIgmpMldSnoopVlanRouterPortlist.setDescription('List of router ports learned dynamically from PIM, DVMRP, MRDISC, MOSPF and IGMP/MLD Query messages on this VLAN ')
rlIgmpMldSnoopVlanRouterStaticPortlist = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 55, 5, 5, 1, 11), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlIgmpMldSnoopVlanRouterStaticPortlist.setStatus('current')
if mibBuilder.loadTexts: rlIgmpMldSnoopVlanRouterStaticPortlist.setDescription('List of router ports configured statically on this VLAN.')
rlIgmpMldSnoopVlanRouterForbiddenPortlist = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 55, 5, 5, 1, 12), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlIgmpMldSnoopVlanRouterForbiddenPortlist.setStatus('current')
if mibBuilder.loadTexts: rlIgmpMldSnoopVlanRouterForbiddenPortlist.setDescription('List of ports statically configured to NOT be router ports on this VLAN')
rlIgmpMldSnoopVlanQueryOverride = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 55, 5, 5, 1, 13), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlIgmpMldSnoopVlanQueryOverride.setStatus('current')
if mibBuilder.loadTexts: rlIgmpMldSnoopVlanQueryOverride.setDescription('Enable/Disable overriding of Query values')
rlIgmpMldSnoopVlanOperRobustness = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 55, 5, 5, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlIgmpMldSnoopVlanOperRobustness.setStatus('current')
if mibBuilder.loadTexts: rlIgmpMldSnoopVlanOperRobustness.setDescription('The Robustness Variable allows tuning for the expected packet loss on a subnet. If a subnet is expected to be lossy, the Robustness Variable may be increased. IGMP and MLD are robust to (Robustness Variable-1) packet losses.')
rlIgmpMldSnoopVlanOperQueryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 55, 5, 5, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 31744)).clone(125)).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rlIgmpMldSnoopVlanOperQueryInterval.setStatus('current')
if mibBuilder.loadTexts: rlIgmpMldSnoopVlanOperQueryInterval.setDescription('The frequency at which IGMP or MLD Host-Query packets are transmitted on this interface. This variable must be a non-zero value.')
rlIgmpMldSnoopVlanOperQueryMaxResponseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 55, 5, 5, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 31744)).clone(100)).setUnits('tenths of seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rlIgmpMldSnoopVlanOperQueryMaxResponseTime.setReference('RFC 3810 section 9.3')
if mibBuilder.loadTexts: rlIgmpMldSnoopVlanOperQueryMaxResponseTime.setStatus('current')
if mibBuilder.loadTexts: rlIgmpMldSnoopVlanOperQueryMaxResponseTime.setDescription('The maximum query response interval advertised in MGMDv2 or v3 queries on this interface.')
rlIgmpMldSnoopVlanOperLastMemberQueryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 55, 5, 5, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 31744)).clone(1)).setUnits('tenths of seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rlIgmpMldSnoopVlanOperLastMemberQueryInterval.setStatus('current')
if mibBuilder.loadTexts: rlIgmpMldSnoopVlanOperLastMemberQueryInterval.setDescription('The Last Member Query Interval is the Max Query Response Interval inserted into group-specific queries sent in response to leave group messages, and is also the amount of time between group-specific query messages. This value may be tuned to modify the leave latency of the network. A reduced value results in reduced time to detect the loss of the last member of a group. The value of this object is irrelevant if mgmdRouterInterfaceVersion is 1.')
rlIgmpMldSnoopVlanOperLastMemberQueryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 55, 5, 5, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlIgmpMldSnoopVlanOperLastMemberQueryCount.setStatus('current')
if mibBuilder.loadTexts: rlIgmpMldSnoopVlanOperLastMemberQueryCount.setDescription('Represents the number of group-specific and group-and-source-specific queries sent by the router before it assumes there are no local members.')
rlIgmpMldSnoopVlanOperStartupQueryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 55, 5, 5, 1, 19), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlIgmpMldSnoopVlanOperStartupQueryCount.setStatus('current')
if mibBuilder.loadTexts: rlIgmpMldSnoopVlanOperStartupQueryCount.setDescription('Represents the number of Queries sent out on startup separated by the Startup Query Interval.')
rlIgmpMldSnoopVlanOperStartupQueryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 55, 5, 5, 1, 20), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 31744))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rlIgmpMldSnoopVlanOperStartupQueryInterval.setStatus('current')
if mibBuilder.loadTexts: rlIgmpMldSnoopVlanOperStartupQueryInterval.setDescription('This variable represents the interval between General Queries sent by a Querier on startup.')
rlIgmpMldSnoopVlanOperHostTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 55, 5, 5, 1, 21), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rlIgmpMldSnoopVlanOperHostTimeOut.setStatus('current')
if mibBuilder.loadTexts: rlIgmpMldSnoopVlanOperHostTimeOut.setDescription('The amount of time that should pass before aging out an entry in the rlIgmpSnoopMembershipTable for this vlan. DEFVAL { rlIgmpMldSnoopVlanOperRobustness * rlIgmpMldSnoopVlanOperQueryInterval + rlIgmpMldSnoopVlanOperQueryMaxResponseTime }')
rlIgmpMldSnoopVlanOperRouterTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 55, 5, 5, 1, 22), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rlIgmpMldSnoopVlanOperRouterTimeOut.setStatus('current')
if mibBuilder.loadTexts: rlIgmpMldSnoopVlanOperRouterTimeOut.setDescription('The amount of time that should pass before aging out a port in the router ports dynamically learnt for this vlan. DEFVAL { rlIgmpMldSnoopVlanOperRobustness * rlIgmpMldSnoopVlanOperQueryInterval }')
rlIgmpMldSnoopVlanOperLeaveTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 55, 5, 5, 1, 23), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rlIgmpMldSnoopVlanOperLeaveTimeOut.setStatus('current')
if mibBuilder.loadTexts: rlIgmpMldSnoopVlanOperLeaveTimeOut.setDescription('The amount of time that should pass before aging out an entry in the rlIgmpSnoopMembershipTable for this vlan, after recieving a leave/exclude message from the port of the entry. DEFVAL { rlIgmpMldSnoopVlanOperLastMemberQueryCount * rlIgmpMldSnoopVlanOperLastMemberQueryInterval }')
rlIgmpMldSnoopVlanAdminRobustness = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 55, 5, 5, 1, 24), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlIgmpMldSnoopVlanAdminRobustness.setStatus('current')
if mibBuilder.loadTexts: rlIgmpMldSnoopVlanAdminRobustness.setDescription('The Robustness Variable allows tuning for the expected packet loss on a subnet. If a subnet is expected to be lossy, the Robustness Variable may be increased. IGMP and MLD are robust to (Robustness Variable-1) packet losses.')
rlIgmpMldSnoopVlanAdminQueryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 55, 5, 5, 1, 25), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 31744)).clone(125)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlIgmpMldSnoopVlanAdminQueryInterval.setStatus('current')
if mibBuilder.loadTexts: rlIgmpMldSnoopVlanAdminQueryInterval.setDescription('The frequency at which IGMP or MLD Host-Query packets are transmitted on this interface. This variable must be a non-zero value.')
rlIgmpMldSnoopVlanAdminQueryMaxResponseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 55, 5, 5, 1, 26), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 31744)).clone(100)).setUnits('tenths of seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlIgmpMldSnoopVlanAdminQueryMaxResponseTime.setReference('RFC 3810 section 9.3')
if mibBuilder.loadTexts: rlIgmpMldSnoopVlanAdminQueryMaxResponseTime.setStatus('current')
if mibBuilder.loadTexts: rlIgmpMldSnoopVlanAdminQueryMaxResponseTime.setDescription('The maximum query response interval advertised in MGMDv2 or v3 queries on this interface.')
rlIgmpMldSnoopVlanAdminLastMemberQueryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 55, 5, 5, 1, 27), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 31744)).clone(1)).setUnits('tenths of seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlIgmpMldSnoopVlanAdminLastMemberQueryInterval.setStatus('current')
if mibBuilder.loadTexts: rlIgmpMldSnoopVlanAdminLastMemberQueryInterval.setDescription('The Last Member Query Interval is the Max Query Response Interval inserted into group-specific queries sent in response to leave group messages, and is also the amount of time between group-specific query messages. This value may be tuned to modify the leave latency of the network. A reduced value results in reduced time to detect the loss of the last member of a group. The value of this object is irrelevant if mgmdRouterInterfaceVersion is 1.')
rlIgmpMldSnoopVlanAdminLastMemberQueryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 55, 5, 5, 1, 28), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlIgmpMldSnoopVlanAdminLastMemberQueryCount.setStatus('current')
if mibBuilder.loadTexts: rlIgmpMldSnoopVlanAdminLastMemberQueryCount.setDescription('Represents the number of group-specific and group-and-source-specific queries sent by the router before it assumes there are no local members.')
rlIgmpMldSnoopVlanAdminStartupQueryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 55, 5, 5, 1, 29), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlIgmpMldSnoopVlanAdminStartupQueryCount.setStatus('current')
if mibBuilder.loadTexts: rlIgmpMldSnoopVlanAdminStartupQueryCount.setDescription('Represents the number of Queries sent out on startup separated by the Startup Query Interval.')
rlIgmpMldSnoopVlanAdminStartupQueryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 55, 5, 5, 1, 30), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 31744))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlIgmpMldSnoopVlanAdminStartupQueryInterval.setStatus('current')
if mibBuilder.loadTexts: rlIgmpMldSnoopVlanAdminStartupQueryInterval.setDescription('This variable represents the interval between General Queries sent by a Querier on startup.')
rlIgmpMldSnoopVlanAdminHostTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 55, 5, 5, 1, 31), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlIgmpMldSnoopVlanAdminHostTimeOut.setStatus('current')
if mibBuilder.loadTexts: rlIgmpMldSnoopVlanAdminHostTimeOut.setDescription('The amount of time that should pass before aging out an entry in the rlIgmpSnoopMembershipTable for this vlan. DEFVAL { rlIgmpMldSnoopVlanAdminRobustness * rlIgmpMldSnoopVlanAdminQueryInterval + rlIgmpMldSnoopVlanAdminQueryMaxResponseTime }')
rlIgmpMldSnoopVlanAdminRouterTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 55, 5, 5, 1, 32), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlIgmpMldSnoopVlanAdminRouterTimeOut.setStatus('current')
if mibBuilder.loadTexts: rlIgmpMldSnoopVlanAdminRouterTimeOut.setDescription('The amount of time that should pass before aging out a port in the router ports dynamically learnt for this vlan. DEFVAL { rlIgmpMldSnoopVlanAdminRobustness * rlIgmpMldSnoopVlanAdminQueryInterval }')
rlIgmpMldSnoopVlanAdminLeaveTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 55, 5, 5, 1, 33), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlIgmpMldSnoopVlanAdminLeaveTimeOut.setStatus('current')
if mibBuilder.loadTexts: rlIgmpMldSnoopVlanAdminLeaveTimeOut.setDescription('The amount of time that should pass before aging out an entry in the rlIgmpSnoopMembershipTable for this vlan, after recieving a leave/exclude message from the port of the entry. DEFVAL { rlIgmpMldSnoopVlanAdminLastMemberQueryCount * rlIgmpMldSnoopVlanAdminLastMemberQueryInterval }')
rlIgmpMldSnoopVlanIsImmediateLeave = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 55, 5, 5, 1, 34), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlIgmpMldSnoopVlanIsImmediateLeave.setStatus('current')
if mibBuilder.loadTexts: rlIgmpMldSnoopVlanIsImmediateLeave.setDescription(' Enable/Disable immediate leave on this Vlan')
rlIgmpMldSnoopMulticastTvTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 55, 5, 6), )
if mibBuilder.loadTexts: rlIgmpMldSnoopMulticastTvTable.setStatus('current')
if mibBuilder.loadTexts: rlIgmpMldSnoopMulticastTvTable.setDescription(' multicast vlan used for this port')
rlIgmpMldSnoopMulticastTvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 55, 5, 6, 1), ).setIndexNames((0, "DLINK-3100-rlBrgMulticast-MIB", "rlIgmpMldSnoopMulticastTvInetAddressType"), (0, "DLINK-3100-rlBrgMulticast-MIB", "rlIgmpMldSnoopMulticastTvVID"), (0, "DLINK-3100-rlBrgMulticast-MIB", "rlIgmpMldSnoopMulticastTvGroupAddressType"), (0, "DLINK-3100-rlBrgMulticast-MIB", "rlIgmpMldSnoopMulticastTvGroup"))
if mibBuilder.loadTexts: rlIgmpMldSnoopMulticastTvEntry.setStatus('current')
if mibBuilder.loadTexts: rlIgmpMldSnoopMulticastTvEntry.setDescription(' entry of multicast ip')
rlIgmpMldSnoopMulticastTvInetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 55, 5, 6, 1, 1), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlIgmpMldSnoopMulticastTvInetAddressType.setStatus('current')
if mibBuilder.loadTexts: rlIgmpMldSnoopMulticastTvInetAddressType.setDescription('Inet type ipv6/ipv4.')
rlIgmpMldSnoopMulticastTvVID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 55, 5, 6, 1, 2), VlanIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlIgmpMldSnoopMulticastTvVID.setStatus('current')
if mibBuilder.loadTexts: rlIgmpMldSnoopMulticastTvVID.setDescription('Specify the multicast ip to be used.')
rlIgmpMldSnoopMulticastTvGroupAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 55, 5, 6, 1, 3), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlIgmpMldSnoopMulticastTvGroupAddressType.setStatus('current')
if mibBuilder.loadTexts: rlIgmpMldSnoopMulticastTvGroupAddressType.setDescription('Inet type ipv6/ipv4.')
rlIgmpMldSnoopMulticastTvGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 55, 5, 6, 1, 4), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlIgmpMldSnoopMulticastTvGroup.setStatus('current')
if mibBuilder.loadTexts: rlIgmpMldSnoopMulticastTvGroup.setDescription('Specify the multicast ip to be used.')
rlIgmpMldSnoopMulticastTvStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 55, 5, 6, 1, 5), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlIgmpMldSnoopMulticastTvStatus.setStatus('current')
if mibBuilder.loadTexts: rlIgmpMldSnoopMulticastTvStatus.setDescription('The row status variable, used according to row installation and removal conventions.')
rlIgmpMldSnoopQuerierVlanTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 55, 5, 7), )
if mibBuilder.loadTexts: rlIgmpMldSnoopQuerierVlanTable.setStatus('current')
if mibBuilder.loadTexts: rlIgmpMldSnoopQuerierVlanTable.setDescription('A table that contains IGMP/MLD Snooping Querier information about every vlan. This is indexed by vlan tag.')
rlIgmpMldSnoopQuerierVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 55, 5, 7, 1), ).setIndexNames((0, "DLINK-3100-rlBrgMulticast-MIB", "rlIgmpMldSnoopQuerierVlanTag"))
if mibBuilder.loadTexts: rlIgmpMldSnoopQuerierVlanEntry.setStatus('current')
if mibBuilder.loadTexts: rlIgmpMldSnoopQuerierVlanEntry.setDescription('An entry (conceptual row) in the rlIgmpMldSnoopQuerierVlanTable.')
rlIgmpMldSnoopQuerierVlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 55, 5, 7, 1, 1), VlanIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlIgmpMldSnoopQuerierVlanTag.setStatus('current')
if mibBuilder.loadTexts: rlIgmpMldSnoopQuerierVlanTag.setDescription('An IGMP/MLD Snoop Querier entry vlan tag.')
rlIgmpMldSnoopQuerierAdminEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 55, 5, 7, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlIgmpMldSnoopQuerierAdminEnable.setStatus('current')
if mibBuilder.loadTexts: rlIgmpMldSnoopQuerierAdminEnable.setDescription('The desired administrative state of IGMP/MLD Snoop Querier on the vlan.')
rlIgmpMldSnoopQuerierOperEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 55, 5, 7, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlIgmpMldSnoopQuerierOperEnable.setStatus('current')
if mibBuilder.loadTexts: rlIgmpMldSnoopQuerierOperEnable.setDescription('The current operational state of IGMP/MLD Snoop Querier on the vlan.')
rlIgmpMldSnoopQuerierAdminAddrInetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 55, 5, 7, 1, 4), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlIgmpMldSnoopQuerierAdminAddrInetAddressType.setStatus('current')
if mibBuilder.loadTexts: rlIgmpMldSnoopQuerierAdminAddrInetAddressType.setDescription('Inet type IPv6/IPv4.')
rlIgmpMldSnoopQuerierAdminAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 55, 5, 7, 1, 5), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlIgmpMldSnoopQuerierAdminAddr.setStatus('current')
if mibBuilder.loadTexts: rlIgmpMldSnoopQuerierAdminAddr.setDescription('The desired IP address is being used in IGMP/MLD Snoop Querier messages on the vlan.')
rlIgmpMldSnoopQuerierOperAddrInetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 55, 5, 7, 1, 6), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlIgmpMldSnoopQuerierOperAddrInetAddressType.setStatus('current')
if mibBuilder.loadTexts: rlIgmpMldSnoopQuerierOperAddrInetAddressType.setDescription('Inet type IPv6/IPv4.')
rlIgmpMldSnoopQuerierOperAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 55, 5, 7, 1, 7), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlIgmpMldSnoopQuerierOperAddr.setStatus('current')
if mibBuilder.loadTexts: rlIgmpMldSnoopQuerierOperAddr.setDescription('The current operational IP address is being used in IGMP/MLD Snoop Querier messages on the vlan.')
rlIgmpMldSnoopQuerierAdminVersionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 55, 5, 7, 1, 8), IgmpVersion()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlIgmpMldSnoopQuerierAdminVersionNumber.setStatus('current')
if mibBuilder.loadTexts: rlIgmpMldSnoopQuerierAdminVersionNumber.setDescription('The highest version number of IGMP Snoop Querier for the vlan.')
rlIgmpMldSnoopQuerierOperVersionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 55, 5, 7, 1, 9), IgmpVersion()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlIgmpMldSnoopQuerierOperVersionNumber.setStatus('current')
if mibBuilder.loadTexts: rlIgmpMldSnoopQuerierOperVersionNumber.setDescription('The current operational version number of IGMP Snoop Querier for the vlan.')
rlMacMulticastUnregFilterFailed = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89) + (0,1)).setObjects(("DLINK-3100-DEVICEPARAMS-MIB", "rndErrorDesc"), ("DLINK-3100-DEVICEPARAMS-MIB", "rndErrorSeverity"))
if mibBuilder.loadTexts: rlMacMulticastUnregFilterFailed.setDescription('Warning trap indicating - Setting Mac Unregistered Filtering on port is failed. The bound variable rndErrorDesc provides the interface number. ')
rlIgmpMldSnoopTriplePlayPort = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 0, 208)).setObjects(("DLINK-3100-DEVICEPARAMS-MIB", "rndErrorDesc"), ("DLINK-3100-DEVICEPARAMS-MIB", "rndErrorSeverity"))
if mibBuilder.loadTexts: rlIgmpMldSnoopTriplePlayPort.setStatus('current')
if mibBuilder.loadTexts: rlIgmpMldSnoopTriplePlayPort.setDescription('Informational trap indicating that a query was recieved on a triple play port.')
mibBuilder.exportSymbols("DLINK-3100-rlBrgMulticast-MIB", rlBrgIpmFdbRefGroupAddress=rlBrgIpmFdbRefGroupAddress, rlIgmpSnoopHostAgingTime=rlIgmpSnoopHostAgingTime, rlBrgIpMulticastEgressPorts=rlBrgIpMulticastEgressPorts, rlBrgDynamicCmdKey=rlBrgDynamicCmdKey, rlIgmpMldSnoopVlanAdminRobustness=rlIgmpMldSnoopVlanAdminRobustness, rlIgmpSnoopMembershipIncPortlist=rlIgmpSnoopMembershipIncPortlist, rlIgmpMldSnoopMulticastTvInetAddressType=rlIgmpMldSnoopMulticastTvInetAddressType, rlBrgStaticInetMulticastGroupAddressType=rlBrgStaticInetMulticastGroupAddressType, rlIgmpMldSnoopVlanTag=rlIgmpMldSnoopVlanTag, rlIgmpMldSnoopMulticastTvGroup=rlIgmpMldSnoopMulticastTvGroup, rlIgmpMldSnoopQuerierOperEnable=rlIgmpMldSnoopQuerierOperEnable, DynamicCmdType=DynamicCmdType, rlIgmpMldSnoopMembershipTable=rlIgmpMldSnoopMembershipTable, rlIgmpMldSnoopMembershipEntry=rlIgmpMldSnoopMembershipEntry, rlIgmpMldSnoopQuerierAdminVersionNumber=rlIgmpMldSnoopQuerierAdminVersionNumber, rlIgmpMldSnoopVlanLeaveTimeOut=rlIgmpMldSnoopVlanLeaveTimeOut, rlIgmpMldSnoopVlanAdminRouterTimeOut=rlIgmpMldSnoopVlanAdminRouterTimeOut, rlIgmpSnoopMulticastTvEntry=rlIgmpSnoopMulticastTvEntry, rlIgmpMldSnoopMembershipIncPortlist=rlIgmpMldSnoopMembershipIncPortlist, rlBrgStaticInetMulticastEntry=rlBrgStaticInetMulticastEntry, rlIgmpMldSnoopVlanOperHostTimeOut=rlIgmpMldSnoopVlanOperHostTimeOut, rlMldSnoopRouterAgingTime=rlMldSnoopRouterAgingTime, rlIgmpMldSnoopVlanOperRouterTimeOut=rlIgmpMldSnoopVlanOperRouterTimeOut, rlIgmpMldSnoopVlanAdminHostTimeOut=rlIgmpMldSnoopVlanAdminHostTimeOut, rlBrgDynamicCmdTable=rlBrgDynamicCmdTable, rlBrgInetMulticastTable=rlBrgInetMulticastTable, rlIgmpSnoopMulticastTvStatus=rlIgmpSnoopMulticastTvStatus, rlIgmpSnoopVlanTag=rlIgmpSnoopVlanTag, rlMacMulticastUnregFilterEnable=rlMacMulticastUnregFilterEnable, rlBrgIpMulticastVlanTag=rlBrgIpMulticastVlanTag, rlIgmpSnoopMulticastTvTable=rlIgmpSnoopMulticastTvTable, rlBrgInetMulticastSourceAddressType=rlBrgInetMulticastSourceAddressType, rlIgmpMldSnoopMulticastTvEntry=rlIgmpMldSnoopMulticastTvEntry, rlIgmpSnoopMembershipVlanTag=rlIgmpSnoopMembershipVlanTag, rlMacMulticastMaxEntriesNum=rlMacMulticastMaxEntriesNum, rlBrgInetMulticastEntry=rlBrgInetMulticastEntry, rlBrgInetMulticastLearntPorts=rlBrgInetMulticastLearntPorts, rlIgmpSnoopVlanEntry=rlIgmpSnoopVlanEntry, rlBrgIpmFdbRefVlanTag=rlBrgIpmFdbRefVlanTag, rlBrgDynamicCmdSourceAddressType=rlBrgDynamicCmdSourceAddressType, rlBrgIpmFdbRefSourceAddressType=rlBrgIpmFdbRefSourceAddressType, rlBrgMulticastMibVersion=rlBrgMulticastMibVersion, rlIgmpSnoopQuerierAdminAddr=rlIgmpSnoopQuerierAdminAddr, rlIgmpMldSnoopVlanHostTimeOut=rlIgmpMldSnoopVlanHostTimeOut, rlIgmpSnoopVlanRouterLearn=rlIgmpSnoopVlanRouterLearn, rlIgmpMldSnoopMulticastTvTable=rlIgmpMldSnoopMulticastTvTable, rlBrgIpmFdbRefTable=rlBrgIpmFdbRefTable, rlIgmpSnoop=rlIgmpSnoop, rlBrgDynamicCmdEntry=rlBrgDynamicCmdEntry, rlIgmpSnoopMembershipTable=rlIgmpSnoopMembershipTable, rlBrgDynamicCmdPorts=rlBrgDynamicCmdPorts, rlIgmpSnoopQuerierAdminVersionNumber=rlIgmpSnoopQuerierAdminVersionNumber, rlIgmpMldSnoopVlanAdminLastMemberQueryInterval=rlIgmpMldSnoopVlanAdminLastMemberQueryInterval, rlIgmpSnoopQuerierVlanTag=rlIgmpSnoopQuerierVlanTag, rlIgmpSnoopVlanQuerierTimeOut=rlIgmpSnoopVlanQuerierTimeOut, rlIgmpSnoopVlanIgmpVersion=rlIgmpSnoopVlanIgmpVersion, rlBrgStaticInetMulticastSourceAddressType=rlBrgStaticInetMulticastSourceAddressType, rlIgmpSnoopQuerierVlanTable=rlIgmpSnoopQuerierVlanTable, rlIgmpSnoopMulticastTvVID=rlIgmpSnoopMulticastTvVID, rlBrgStaticIpMulticastForbiddenPorts=rlBrgStaticIpMulticastForbiddenPorts, rlIgmpMldSnoopQuerierOperAddr=rlIgmpMldSnoopQuerierOperAddr, rlBrgInetMulticastVlanTag=rlBrgInetMulticastVlanTag, rlBrgIpmFdbRefEntry=rlBrgIpmFdbRefEntry, rlIgmpSnoopVlanEnable=rlIgmpSnoopVlanEnable, rlMacMulticastFilter=rlMacMulticastFilter, rlIgmpMldSnoopQuerierAdminEnable=rlIgmpMldSnoopQuerierAdminEnable, rlIgmpSnoopMembershipGroupIpAddress=rlIgmpSnoopMembershipGroupIpAddress, rlIgmpMldSnoopVlanOperRobustness=rlIgmpMldSnoopVlanOperRobustness, rlBrgStaticIpMulticastEntry=rlBrgStaticIpMulticastEntry, rlIgmpMldSnoopMulticastTvVID=rlIgmpMldSnoopMulticastTvVID, rlMldSnoopHostAgingTime=rlMldSnoopHostAgingTime, rlIgmpMldSnoopVlanOperLastMemberQueryInterval=rlIgmpMldSnoopVlanOperLastMemberQueryInterval, rlIgmpMldSnoopVlanAdminStartupQueryCount=rlIgmpMldSnoopVlanAdminStartupQueryCount, rlIgmpMldSnoopQuerierAdminAddrInetAddressType=rlIgmpMldSnoopQuerierAdminAddrInetAddressType, rlIgmpSnoopMulticastTvGroup=rlIgmpSnoopMulticastTvGroup, rlIgmpMldSnoopTriplePlayPort=rlIgmpMldSnoopTriplePlayPort, rlIgmpSnoopVlanRouterPortlist=rlIgmpSnoopVlanRouterPortlist, rlIgmpMldSnoopVlanOperQueryMaxResponseTime=rlIgmpMldSnoopVlanOperQueryMaxResponseTime, rlIgmpMldSnoopVlanOperStartupQueryInterval=rlIgmpMldSnoopVlanOperStartupQueryInterval, rlIgmpMldSnoopMembershipExpiryTime=rlIgmpMldSnoopMembershipExpiryTime, rlIgmpMldSnoopVlanRouterTimeOut=rlIgmpMldSnoopVlanRouterTimeOut, rlBrgInetMulticastGroupAddressType=rlBrgInetMulticastGroupAddressType, rlBrgDynamicCmdVlanTag=rlBrgDynamicCmdVlanTag, rlIgmpMldSnoopVlanEnable=rlIgmpMldSnoopVlanEnable, rlIgmpMldSnoopVlanIsImmediateLeave=rlIgmpMldSnoopVlanIsImmediateLeave, rlIgmpMldSnoopVlanAdminLeaveTimeOut=rlIgmpMldSnoopVlanAdminLeaveTimeOut, rlBrgInetMulticastEgressPorts=rlBrgInetMulticastEgressPorts, rlIgmpMldSnoopMembershipExcPortlist=rlIgmpMldSnoopMembershipExcPortlist, rlBrgIpMulticastEntry=rlBrgIpMulticastEntry, rlIgmpSnoopQuerierOperEnable=rlIgmpSnoopQuerierOperEnable, rlIgmpSnoopVlanLeaveTimeOut=rlIgmpSnoopVlanLeaveTimeOut, rlIgmpMldSnoopVlanIgmpVersion=rlIgmpMldSnoopVlanIgmpVersion, rlBrgStaticInetMulticastFrwPorts=rlBrgStaticInetMulticastFrwPorts, rlIgmpSnoopVlanHostTimeOut=rlIgmpSnoopVlanHostTimeOut, rlIgmpSnoopMembershipCompatibilityMode=rlIgmpSnoopMembershipCompatibilityMode, rlBrgIpmFdbRefGroupAddressType=rlBrgIpmFdbRefGroupAddressType, rlIgmpMldSnoopQuerierOperAddrInetAddressType=rlIgmpMldSnoopQuerierOperAddrInetAddressType, rlBrgDynamicCmdType=rlBrgDynamicCmdType, rlIgmpMldSnoopMembershipGroupIpAddress=rlIgmpMldSnoopMembershipGroupIpAddress, rlIgmpMldSnoopVlanOperLastMemberQueryCount=rlIgmpMldSnoopVlanOperLastMemberQueryCount, rlMacMulticastEnable=rlMacMulticastEnable, rlBrgIpMulticastSourceAddress=rlBrgIpMulticastSourceAddress, rlBrgStaticIpMulticastTable=rlBrgStaticIpMulticastTable, rlBrgStaticInetMulticastTable=rlBrgStaticInetMulticastTable, rlIgmpSnoopQuerierVlanEntry=rlIgmpSnoopQuerierVlanEntry, rlMldSnoopEnable=rlMldSnoopEnable, rlIgmpMldSnoopMembershipCompatibilityMode=rlIgmpMldSnoopMembershipCompatibilityMode, rlIgmpMldSnoopMembershipVlanTag=rlIgmpMldSnoopMembershipVlanTag, rlIgmpSnoopQuerierAdminEnable=rlIgmpSnoopQuerierAdminEnable, rlIgmpMldSnoopVlanAdminLastMemberQueryCount=rlIgmpMldSnoopVlanAdminLastMemberQueryCount, rlIgmpMldSnoopVlanQuerierTimeOut=rlIgmpMldSnoopVlanQuerierTimeOut, rlIgmpMldSnoopVlanOperQueryInterval=rlIgmpMldSnoopVlanOperQueryInterval, rlBrgStaticInetMulticastVlanTag=rlBrgStaticInetMulticastVlanTag, rlIgmpMldSnoopVlanTable=rlIgmpMldSnoopVlanTable, rlIgmpMldSnoopVlanAdminQueryMaxResponseTime=rlIgmpMldSnoopVlanAdminQueryMaxResponseTime, rlIgmpSnoopVlanRouterTimeOut=rlIgmpSnoopVlanRouterTimeOut, rlIgmpSnoopQuerierOperAddr=rlIgmpSnoopQuerierOperAddr, rlIgmpMldSnoopVlanOperLeaveTimeOut=rlIgmpMldSnoopVlanOperLeaveTimeOut, rlBrgIpmFdbRefSourceAddress=rlBrgIpmFdbRefSourceAddress, rlBrgStaticIpMulticastVlanTag=rlBrgStaticIpMulticastVlanTag, rlBrgStaticInetMulticastStatus=rlBrgStaticInetMulticastStatus, rlBrgInetMulticastGroupAddress=rlBrgInetMulticastGroupAddress, rlIgmpMldSnoopVlanRouterLearn=rlIgmpMldSnoopVlanRouterLearn, rlBrgDynamicCmdGroupAddress=rlBrgDynamicCmdGroupAddress, rlIgmpMldSnoopVlanOperStartupQueryCount=rlIgmpMldSnoopVlanOperStartupQueryCount, rlIgmpMldSnoopQuerierVlanTable=rlIgmpMldSnoopQuerierVlanTable, rlBrgStaticIpMulticastFrwPorts=rlBrgStaticIpMulticastFrwPorts, IgmpVersion=IgmpVersion, rlBrgStaticInetMulticastGroupAddress=rlBrgStaticInetMulticastGroupAddress, rlIgmpSnoopIGMP224ReportsHandle=rlIgmpSnoopIGMP224ReportsHandle, rlIgmpSnoopMembershipEntry=rlIgmpSnoopMembershipEntry, rlBrgStaticInetMulticastForbiddenPorts=rlBrgStaticInetMulticastForbiddenPorts, rlIgmpMldSnoopMembershipSourceIpAddressType=rlIgmpMldSnoopMembershipSourceIpAddressType, rlBrgIpMulticastLearntPorts=rlBrgIpMulticastLearntPorts, rlIgmpSnoopQuerierOperVersionNumber=rlIgmpSnoopQuerierOperVersionNumber, rlIgmpSnoopMembershipExpiryTime=rlIgmpSnoopMembershipExpiryTime, rlBrgStaticIpMulticastStatus=rlBrgStaticIpMulticastStatus, rlIgmpMldSnoopVlanQueryOverride=rlIgmpMldSnoopVlanQueryOverride, rlBrgIpMulticastTable=rlBrgIpMulticastTable, rlIgmpMldSnoopVlanAdminQueryInterval=rlIgmpMldSnoopVlanAdminQueryInterval, rlMacMulticastUnregFilterFailed=rlMacMulticastUnregFilterFailed, rlIgmpMldSnoopQuerierVlanTag=rlIgmpMldSnoopQuerierVlanTag, rlIgmpMldSnoopMembershipSourceIpAddress=rlIgmpMldSnoopMembershipSourceIpAddress, rlBrgInetMulticastSourceAddress=rlBrgInetMulticastSourceAddress, rlIgmpMldSnoopVlanInetAddressType=rlIgmpMldSnoopVlanInetAddressType, rlIgmpSnoopMembershipSourceIpAddress=rlIgmpSnoopMembershipSourceIpAddress, rlIgmpMldSnoopVlanEntry=rlIgmpMldSnoopVlanEntry, rlIgmpSnoopVlanTable=rlIgmpSnoopVlanTable, rlBrgStaticIpMulticastGroupAddress=rlBrgStaticIpMulticastGroupAddress, rlIgmpMldSnoopMulticastTvGroupAddressType=rlIgmpMldSnoopMulticastTvGroupAddressType, rlIgmpMldSnoopQuerierAdminAddr=rlIgmpMldSnoopQuerierAdminAddr, rlBrgStaticIpMulticastSourceAddress=rlBrgStaticIpMulticastSourceAddress, rlIgmpMldSnoopMulticastTvStatus=rlIgmpMldSnoopMulticastTvStatus, rlIgmpSnoopEnable=rlIgmpSnoopEnable, rlIgmpMldSnoopVlanRouterStaticPortlist=rlIgmpMldSnoopVlanRouterStaticPortlist, rlIgmpMldSnoopVlanRouterForbiddenPortlist=rlIgmpMldSnoopVlanRouterForbiddenPortlist, rlBrgIpmFdbRefPorts=rlBrgIpmFdbRefPorts, rlIgmpMldSnoopQuerierOperVersionNumber=rlIgmpMldSnoopQuerierOperVersionNumber, rlMldSnoop=rlMldSnoop, rlIgmpMldSnoopVlanAdminStartupQueryInterval=rlIgmpMldSnoopVlanAdminStartupQueryInterval, rlIgmpMldSnoopVlanRouterPortlist=rlIgmpMldSnoopVlanRouterPortlist, rlIgmpSnoopRouterAgingTime=rlIgmpSnoopRouterAgingTime, rlBrgIpMulticastGroupAddress=rlBrgIpMulticastGroupAddress, rlBrgDynamicCmdGroupAddressType=rlBrgDynamicCmdGroupAddressType, rlIgmpMldSnoopQuerierVlanEntry=rlIgmpMldSnoopQuerierVlanEntry, rlIgmpSnoopMembershipExcPortlist=rlIgmpSnoopMembershipExcPortlist, rlIgmpMldSnoopMembershipGroupIpAddressType=rlIgmpMldSnoopMembershipGroupIpAddressType, rlIgmpSnoopMibVersion=rlIgmpSnoopMibVersion, rlBrgStaticInetMulticastSourceAddress=rlBrgStaticInetMulticastSourceAddress, rlBrgDynamicCmdSourceAddress=rlBrgDynamicCmdSourceAddress)
