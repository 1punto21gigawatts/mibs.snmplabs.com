#
# PySNMP MIB module GENLIC-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/GENLIC-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:19:27 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Integer32, NotificationType, ObjectIdentity, iso, enterprises, Gauge32, IpAddress, MibIdentifier, TimeTicks, ModuleIdentity, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, Unsigned32, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "NotificationType", "ObjectIdentity", "iso", "enterprises", "Gauge32", "IpAddress", "MibIdentifier", "TimeTicks", "ModuleIdentity", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "Unsigned32", "Bits")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
lannet = MibIdentifier((1, 3, 6, 1, 4, 1, 81))
license = ModuleIdentity((1, 3, 6, 1, 4, 1, 81, 37))
if mibBuilder.loadTexts: license.setLastUpdated('0006220000Z')
if mibBuilder.loadTexts: license.setOrganization('Lucent Technologies Inc.')
if mibBuilder.loadTexts: license.setContactInfo('Itai Zilbershtein -- izilbers@lucent.com')
if mibBuilder.loadTexts: license.setDescription('Lucent Common License MIB')
licensePerModule = MibIdentifier((1, 3, 6, 1, 4, 1, 81, 37, 1))
licModuleIdentTable = MibTable((1, 3, 6, 1, 4, 1, 81, 37, 1, 1), )
if mibBuilder.loadTexts: licModuleIdentTable.setStatus('current')
if mibBuilder.loadTexts: licModuleIdentTable.setDescription('Table of module identifieres used for requesting licenses')
licModuleIdentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 81, 37, 1, 1, 1), ).setIndexNames((0, "GENLIC-MIB", "licModuleIdentIndex"))
if mibBuilder.loadTexts: licModuleIdentEntry.setStatus('current')
if mibBuilder.loadTexts: licModuleIdentEntry.setDescription('An entry in the table, containing data about a single modules operations.')
licModuleIdentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 37, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: licModuleIdentIndex.setStatus('current')
if mibBuilder.loadTexts: licModuleIdentIndex.setDescription('Index which identifies the module inside the chassis for which this entry contains information. Equals the number of the slot by which the group is accessed or the stackable index.')
licModuleIdentUniqueID = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 37, 1, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: licModuleIdentUniqueID.setStatus('current')
if mibBuilder.loadTexts: licModuleIdentUniqueID.setDescription('The Unique identifier of this module. Example: the MAC Address of the agent onboard a P330 module. Must be 6 octets long.')
licFeatureTable = MibTable((1, 3, 6, 1, 4, 1, 81, 37, 1, 2), )
if mibBuilder.loadTexts: licFeatureTable.setStatus('current')
if mibBuilder.loadTexts: licFeatureTable.setDescription('Table of features and their licenses as entered to each module.')
licFeatureTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 81, 37, 1, 2, 1), ).setIndexNames((0, "GENLIC-MIB", "licModuleIdentIndex"), (0, "GENLIC-MIB", "licFeatureId"))
if mibBuilder.loadTexts: licFeatureTableEntry.setStatus('current')
if mibBuilder.loadTexts: licFeatureTableEntry.setDescription('An entry in the table, containing data about a particular feature on a particular module.')
licFeatureId = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 37, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 208, 209))).clone(namedValues=NamedValues(("smon", 1), ("richLayer2", 2), ("routing", 3), ("serverLoadBalance", 4), ("rfc1483", 5), ("loadBalance", 6), ("cajunViewPlus", 208), ("realNetRules", 209)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: licFeatureId.setStatus('current')
if mibBuilder.loadTexts: licFeatureId.setDescription('The basic feature type. Features numbered 208 (0xD0) and above are reserved for host-based applications. ')
licFeatureModifier = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 37, 1, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: licFeatureModifier.setStatus('current')
if mibBuilder.loadTexts: licFeatureModifier.setDescription('The FeatureModifier field for this feature. value Set when a license is entered.')
licFeatureName = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 37, 1, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: licFeatureName.setStatus('current')
if mibBuilder.loadTexts: licFeatureName.setDescription('The name of the feature. Used by CLI commands. Must be a lowercase string without spaces. Feature Names: smon - Switch Monitoring routing - Enable routing functions rich-layer-2 - Enable Policy calssifications and actions in a Layer 2 switch server-load-balance - Load balancing server traffic. rfc-1483 - Enable RFC 1483 functions. load-balance - Enable load balancing. cajun-view-plus - host-based Network Managemnet application real-net-rules - host-based Policy Management application.')
licFeatureLicense = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 37, 1, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 12)).clone(hexValue="0")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: licFeatureLicense.setStatus('current')
if mibBuilder.loadTexts: licFeatureLicense.setDescription('The License needed for this feature. The length serves to diffrentiate between the old SMON scheme and the new versions. 9 octet string - license version 0x02 and onwards 12 octets string - old SMON license. Note that on pre-configured devices, a feature may be active without a license key (License key=0).')
licFeatureLicenseStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 37, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("licensed", 1), ("unlicensed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: licFeatureLicenseStatus.setStatus('current')
if mibBuilder.loadTexts: licFeatureLicenseStatus.setDescription('The state of the feature in terms of the licensing mechanism. State will change to licensed(1) if a valid license is enetered, or if the feature is somhow pre-configured. Note that a licensed feature may be inactive. However, an unlicened feature cannot be activated.')
mibBuilder.exportSymbols("GENLIC-MIB", licModuleIdentTable=licModuleIdentTable, licFeatureTableEntry=licFeatureTableEntry, license=license, licModuleIdentUniqueID=licModuleIdentUniqueID, licFeatureModifier=licFeatureModifier, lannet=lannet, licensePerModule=licensePerModule, licFeatureTable=licFeatureTable, licFeatureLicense=licFeatureLicense, licModuleIdentIndex=licModuleIdentIndex, licModuleIdentEntry=licModuleIdentEntry, licFeatureName=licFeatureName, licFeatureId=licFeatureId, PYSNMP_MODULE_ID=license, licFeatureLicenseStatus=licFeatureLicenseStatus)
