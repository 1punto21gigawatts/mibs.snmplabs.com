#
# PySNMP MIB module ZHONE-COM-VOIP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ZHONE-COM-VOIP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:47:24 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
applIndex, = mibBuilder.importSymbols("NETWORK-SERVICES-MIB", "applIndex")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
IpAddress, Counter32, NotificationType, TimeTicks, Integer32, Bits, MibIdentifier, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, iso, Gauge32, Counter64, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "Counter32", "NotificationType", "TimeTicks", "Integer32", "Bits", "MibIdentifier", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "iso", "Gauge32", "Counter64", "ModuleIdentity")
TruthValue, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "DisplayString", "TextualConvention")
ZhoneCodecType, = mibBuilder.importSymbols("ZHONE-GEN-SUBSCRIBER", "ZhoneCodecType")
zhoneVoice, = mibBuilder.importSymbols("Zhone", "zhoneVoice")
ZhoneRowStatus, = mibBuilder.importSymbols("Zhone-TC", "ZhoneRowStatus")
zhoneVoip = ModuleIdentity((1, 3, 6, 1, 4, 1, 5504, 4, 3, 4))
zhoneVoip.setRevisions(('2014-10-16 23:33', '2014-08-26 10:40', '2014-07-03 02:40', '2014-06-16 21:40', '2014-05-22 14:09', '2014-01-02 22:13', '2012-09-17 23:42', '2012-09-17 23:39', '2011-12-22 02:24', '2011-10-20 12:14', '2011-07-25 11:44', '2009-10-07 01:41', '2009-03-21 02:08', '2008-10-31 01:12', '2008-08-27 23:02', '2008-06-11 17:40', '2007-07-16 02:45', '2006-04-13 15:53', '2005-10-11 11:46', '2005-07-12 10:25', '2005-07-07 16:06', '2005-07-07 15:12', '2005-06-01 11:09', '2005-05-19 15:46', '2005-05-14 21:24', '2005-02-28 10:49', '2004-11-01 14:34', '2004-03-03 17:40', '2004-02-24 12:36', '2004-01-06 15:37', '2003-11-06 10:08', '2003-10-16 14:53', '2003-08-27 11:30', '2003-08-08 17:19', '2003-05-28 12:00', '2003-03-31 18:03', '2003-02-18 14:32',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: zhoneVoip.setRevisionsDescriptions(('V01.07.27 Added description field to sip-dialplan profile', 'V01.07.26 Added dialplan-class field to sip-dialplan profile', 'V01.07.25 Added two new fields zhoneVoipServerTransportProtocol, zhoneVoipSigLocalPortNumber to voip-server-entry.', 'V01.07.24 Add field zhoneVoipServerMessageRetryCount to zhoneVoipServer table', 'V01.07.23 Added voipFeatures field to voip-server-entry', 'V01.07.22 Added Ericsson APZ60 to the list of Server IDs', 'V01.07.21 Added new field registerReadyTimeout to voip server entry', 'V01.07.20 Added new field dtmfPayloadId to voip server entry', 'V01.07.19 New softswitch alu-5060 is added in zhoneVoipServerId', 'V01.07.18 Added new sipDialPlanType intercom', 'V01.07.17 -- added rtpDSCP and signalingDSCP', 'V01.07.16 -- Added new softswitch genband-g6 to voip-server-entry profile', 'V01.07.15 -- Added new softswitch values to voip-server-entry profile', 'Added RTP Term Id Syntax in voip-server-entry profile.', 'Added new sip-dialplan type isdnsig', 'V01.07.12 -- Added new soft switches and behaviorStringOne to voip-server-entry profile', 'V01.07.11 -- Added new soft switch values and protocl entry to voip-server-entry profile', 'V01.07.10 -- add megaco protocol', 'V01.07.09 -- copy content of sipCommonCfgExpiresMethodTable to voipserver', 'V01.07.08 -- copy content of voipsystem to voipserver', 'V01.07.07 -- Add overrideInterfDigitTimeout to zhoneVoipSipDialPlanEntry', 'V01.07.06 -- change number-of-digits from 1..32 to 0..32', 'V01.07.05 - Added ESA as one of the dialplan type', 'V01.07.04 - Changed voipServerEntry in sip-dialplan range to be 0 - 255 for peer to peer case.', 'V01.07.04 - Added index to voip-server-entry', 'V01.07.03 - Added a new field Dial Plan Type', 'V01.07.03 - add zhoneVoipServerId', 'V01.07.02 - add zhoneVoipServerUdpPortNumber.', 'V01.07.01 - Update voipServer markup.', 'V01.07.00 - Added zhoneVoipServerTable.', 'V01.06.00 - Added system-domain-name field to voip-system profile', 'V01.05.00 - Added ipTos entry.', 'V01.04.00 - Added malicious caller entry', 'V01.03.00 - Added destName, prefix strip, prefix add to sip dial plan', 'V01.02.00 - added zhoneVoipHuntGroup', 'V01.01.00 - added sip dial plan', 'V01.00.00 - Initial revision',))
if mibBuilder.loadTexts: zhoneVoip.setLastUpdated('201408261040Z')
if mibBuilder.loadTexts: zhoneVoip.setOrganization('Zhone Technologies.')
if mibBuilder.loadTexts: zhoneVoip.setContactInfo(' Postal: Zhone Technologies, Inc. @ Zhone Way 7001 Oakport Street Oakland, CA 94621 USA Toll-Free: +1 877-ZHONE20 (+1 877-946-6320) Tel: +1-510-777-7000 Fax: +1-510-777-7001 E-mail: support@zhone.com')
if mibBuilder.loadTexts: zhoneVoip.setDescription('Voice over IP configuration for Zhone products')
zhoneVoipSystem = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 4, 3, 4, 1))
if mibBuilder.loadTexts: zhoneVoipSystem.setStatus('deprecated')
if mibBuilder.loadTexts: zhoneVoipSystem.setDescription('Only SIP-PLAR is using this profile. The regular SIP and MGCP setting is moving to Voip-Server-Entry profile.')
zhoneVoipSystemProtocol = MibScalar((1, 3, 6, 1, 4, 1, 5504, 4, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sip", 1), ("mgcp", 2))).clone('sip')).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVoipSystemProtocol.setStatus('deprecated')
if mibBuilder.loadTexts: zhoneVoipSystemProtocol.setDescription('The signalling protocol used for VOIP. Choicees are SIP (Session Initiation Protocol) and MGCP (Media Gateway Control Protocol. Currently, the device only supports SIP.')
zhoneVoipSystemSendCallProceedingTone = MibScalar((1, 3, 6, 1, 4, 1, 5504, 4, 3, 4, 1, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneVoipSystemSendCallProceedingTone.setStatus('deprecated')
if mibBuilder.loadTexts: zhoneVoipSystemSendCallProceedingTone.setDescription('Indicates whether, on call originations destined to the PSTN, the device should play a call proceeding tone while waiting for ring-back tone from the switch.')
zhoneVoipSystemRtcpEnabled = MibScalar((1, 3, 6, 1, 4, 1, 5504, 4, 3, 4, 1, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneVoipSystemRtcpEnabled.setStatus('deprecated')
if mibBuilder.loadTexts: zhoneVoipSystemRtcpEnabled.setDescription('Indicates whether the Real-Time Control Protocol is enabled for the device. ')
zhoneVoipSystemRtcpPacketInterval = MibScalar((1, 3, 6, 1, 4, 1, 5504, 4, 3, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2500, 10000)).clone(5000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneVoipSystemRtcpPacketInterval.setStatus('deprecated')
if mibBuilder.loadTexts: zhoneVoipSystemRtcpPacketInterval.setDescription("RTCP packet interval, in milleseconds. Range is 2500 to 10000 ms. This object's value is only pertinent if RTCP has been enabled.")
zhoneVoipSystemInterdigitTimeout = MibScalar((1, 3, 6, 1, 4, 1, 5504, 4, 3, 4, 1, 5), Integer32().clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneVoipSystemInterdigitTimeout.setStatus('deprecated')
if mibBuilder.loadTexts: zhoneVoipSystemInterdigitTimeout.setDescription('This parameter indicates the duration, in seconds, that the device will wait after each digit is entered before assuming the user has finished entering digits. ')
zhoneVoipSystemIpTos = MibScalar((1, 3, 6, 1, 4, 1, 5504, 4, 3, 4, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneVoipSystemIpTos.setStatus('deprecated')
if mibBuilder.loadTexts: zhoneVoipSystemIpTos.setDescription('This parameter indicates the tos value that is set in the ip header for voice of ip traffic.')
zhoneVoipSystemDomainName = MibScalar((1, 3, 6, 1, 4, 1, 5504, 4, 3, 4, 1, 7), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVoipSystemDomainName.setStatus('deprecated')
if mibBuilder.loadTexts: zhoneVoipSystemDomainName.setDescription('This parameter is ignored.')
zhoneVoipObjects = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 4, 3, 4, 2)).setObjects(("ZHONE-COM-VOIP-MIB", "nextVoipSipDialPlanId"), ("ZHONE-COM-VOIP-MIB", "zhoneVoipSipDialString"), ("ZHONE-COM-VOIP-MIB", "zhoneVoipSipDialIpAddr"), ("ZHONE-COM-VOIP-MIB", "zhoneVoipSipDialPlanRowStatus"), ("ZHONE-COM-VOIP-MIB", "nextZhoneVoipHuntGroupId"), ("ZHONE-COM-VOIP-MIB", "zhoneVoipHuntGroupDestUri"), ("ZHONE-COM-VOIP-MIB", "zhoneVoipHuntGroupRowStatus"), ("ZHONE-COM-VOIP-MIB", "zhoneVoipSipDialPrefixAdd"), ("ZHONE-COM-VOIP-MIB", "zhoneVoipSipDialPrefixStrip"), ("ZHONE-COM-VOIP-MIB", "zhoneVoipSipDialNumOfDigits"), ("ZHONE-COM-VOIP-MIB", "zhoneVoipSipDialDestName"), ("ZHONE-COM-VOIP-MIB", "zhoneVoipHuntGroupPortMembers"), ("ZHONE-COM-VOIP-MIB", "zhoneVoipHuntGroupDefaultCodec"), ("ZHONE-COM-VOIP-MIB", "nextVoipMaliciousCallerId"), ("ZHONE-COM-VOIP-MIB", "zhoneVoipMaliciousCallerUri"), ("ZHONE-COM-VOIP-MIB", "zhoneVoipServerId"), ("ZHONE-COM-VOIP-MIB", "zhoneVoipServerUdpPortNumber"), ("ZHONE-COM-VOIP-MIB", "zhoneVoipServerAddr"), ("ZHONE-COM-VOIP-MIB", "zhoneVoipServerAddrType"), ("ZHONE-COM-VOIP-MIB", "zhoneVoipServerRowStatus"), ("ZHONE-COM-VOIP-MIB", "zhoneVoipSipDialPlanType"), ("ZHONE-COM-VOIP-MIB", "zhoneVoipServerSessionTimer"), ("ZHONE-COM-VOIP-MIB", "zhoneVoipServerSessionExpiration"), ("ZHONE-COM-VOIP-MIB", "zhoneVoipServerSessionMinSE"), ("ZHONE-COM-VOIP-MIB", "zhoneVoipServerSessionCallerReqTimer"), ("ZHONE-COM-VOIP-MIB", "zhoneVoipServerSessionCalleeReqTimer"), ("ZHONE-COM-VOIP-MIB", "zhoneVoipServerSessionCallerSpecifyRefresher"), ("ZHONE-COM-VOIP-MIB", "zhoneVoipServerSessionCalleeSpecifyRefresher"), ("ZHONE-COM-VOIP-MIB", "zhoneVoipServerExpiresInvite"), ("ZHONE-COM-VOIP-MIB", "zhoneVoipServerExpiresRegister"), ("ZHONE-COM-VOIP-MIB", "zhoneVoipServerHeaderMethod"), ("ZHONE-COM-VOIP-MIB", "zhoneVoipMaliciousCallerRowStatus"), ("ZHONE-COM-VOIP-MIB", "zhoneVoipMaliciousCallerEnable"), ("ZHONE-COM-VOIP-MIB", "zhoneVoipServerBehaviorStringOne"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhoneVoipObjects = zhoneVoipObjects.setStatus('current')
if mibBuilder.loadTexts: zhoneVoipObjects.setDescription('Zhone VOIP objects.')
zhoneVoipSipDialPlan = MibIdentifier((1, 3, 6, 1, 4, 1, 5504, 4, 3, 4, 3))
nextVoipSipDialPlanId = MibScalar((1, 3, 6, 1, 4, 1, 5504, 4, 3, 4, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nextVoipSipDialPlanId.setStatus('current')
if mibBuilder.loadTexts: nextVoipSipDialPlanId.setDescription('Returns the next unused dial plan entry id. ')
zhoneVoipSipDialPlanTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 4, 3, 4, 3, 2), )
if mibBuilder.loadTexts: zhoneVoipSipDialPlanTable.setStatus('current')
if mibBuilder.loadTexts: zhoneVoipSipDialPlanTable.setDescription("This table defines a dialing plan for POTS to SIP originations. A dialing plan consists of a series of acceptable dial strings and the corresponding IP addresses to which SIP control messages (e.g., Invite) are sent to initiate the call. Each dial string is represented as digits, wildcards, and regular-expression-like patterns as the following rules show: 1. A leading '*' or '#' are allowed. 2. Digits 0-9 are allowed. 3. A wildcard 'x' represents any digit 0-9 4. A digit range can be specified using brackets [ ], as follows: [135] means a single digit with acceptable values 1,3, or 5. [1-4] means a single digit with acceptable values 1,2,3, or 4. Examples of valid dial strings: 911 - literal digit string 911 #87 - literal digit string #87 *6x - *6 followed by any single digit 35xxx - 35 followed by any 3 digits 77xxx - 77 followed by any 3 digits 3[35]xxx - 33 or 35 followed by any 3 digits 31[1-3]xxxx - 311, 312, 313, followed by any 4 digits Notes: (1) The length of the dial string is limited 1o 128 characters (2) Though the dialplan supports the '#' and '*' keys, the device may not support any features that use them (e.g., *69). (3) In the case where a collected digit set matches more than one dial string, the device will pick the dial string with the most leading literal digits that match. For example, given two dial strings: 35xxx 3[35]xxx and a collected digit set of 35123, the first dial plan string is selected because it contains two leading literal digits that match, as opposed to the second, which has only one leading literal digit. (4) Variable length dial strings, e.g. 353 followed by any number of digits, are not supported. (5) In the future, a dial string may be configurable such that it only applies to a subset of the supported ports (e.g., ports with international calling capabilities might be restricted). This is currently not supported; a dial string applies to all subscriberers. Support will be added for per-port control, most likely by adding port masks to the dial plan entry.")
zhoneVoipSipDialPlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 4, 3, 4, 3, 2, 1), ).setIndexNames((0, "ZHONE-COM-VOIP-MIB", "zhoneVoipSipDialPlanId"))
if mibBuilder.loadTexts: zhoneVoipSipDialPlanEntry.setStatus('current')
if mibBuilder.loadTexts: zhoneVoipSipDialPlanEntry.setDescription('An entry in the SIP dial plan table.')
zhoneVoipSipDialPlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 4, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: zhoneVoipSipDialPlanId.setStatus('current')
if mibBuilder.loadTexts: zhoneVoipSipDialPlanId.setDescription('The unique identifier of the dial plan entry.')
zhoneVoipSipDialString = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 4, 3, 2, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVoipSipDialString.setStatus('current')
if mibBuilder.loadTexts: zhoneVoipSipDialString.setDescription('A dial string against which collected digits are matched.')
zhoneVoipSipDialIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 4, 3, 2, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVoipSipDialIpAddr.setStatus('current')
if mibBuilder.loadTexts: zhoneVoipSipDialIpAddr.setDescription('Upon detecting a match between the collected digits and the dial string for this table entry, this IP address is used for SIP negotiations to initiate the call.')
zhoneVoipSipDialPlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 4, 3, 2, 1, 4), ZhoneRowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVoipSipDialPlanRowStatus.setStatus('current')
if mibBuilder.loadTexts: zhoneVoipSipDialPlanRowStatus.setDescription('The row status is used to create or delete an entry in this table.')
zhoneVoipSipDialDestName = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 4, 3, 2, 1, 5), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVoipSipDialDestName.setStatus('current')
if mibBuilder.loadTexts: zhoneVoipSipDialDestName.setDescription('Name of the destination for the dial string')
zhoneVoipSipDialNumOfDigits = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 4, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVoipSipDialNumOfDigits.setStatus('current')
if mibBuilder.loadTexts: zhoneVoipSipDialNumOfDigits.setDescription('Number of digits to wait for before initiating the call')
zhoneVoipSipDialPrefixStrip = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 4, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVoipSipDialPrefixStrip.setStatus('current')
if mibBuilder.loadTexts: zhoneVoipSipDialPrefixStrip.setDescription('Number of prefix digits to strip from dialled digits')
zhoneVoipSipDialPrefixAdd = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 4, 3, 2, 1, 8), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVoipSipDialPrefixAdd.setStatus('current')
if mibBuilder.loadTexts: zhoneVoipSipDialPrefixAdd.setDescription('String to be added to the beginning of the dialled digits before call initiation')
zhoneVoipSipDialPlanType = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 4, 3, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("normal", 1), ("callpark", 2), ("esa", 3), ("isdnsig", 4), ("intercom", 5))).clone('normal')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVoipSipDialPlanType.setStatus('current')
if mibBuilder.loadTexts: zhoneVoipSipDialPlanType.setDescription('DialPlanType indicates the type of the dial plan. UA has to differenciate between normal dialing and dialing when call features like call park is initiated. The different kinds of dial plan types are: Normal Call Park ESA (Emergency stand alone) isdnsig (ISDN-PRI) Intercom')
zhoneVoipServerEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 4, 3, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVoipServerEntryIndex.setStatus('current')
if mibBuilder.loadTexts: zhoneVoipServerEntryIndex.setDescription('An index to associated voip-server-entry for this sip-dialplan.')
zhoneVoipOverrideInterdigitTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 4, 3, 2, 1, 11), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVoipOverrideInterdigitTimeout.setStatus('current')
if mibBuilder.loadTexts: zhoneVoipOverrideInterdigitTimeout.setDescription('This parameter overrides the interdigit timeout in voip-system profile. It indicates the duration, in seconds, that the device will wait after each digit is entered before assuming the user has finished entering digits. ')
zhoneVoipSipDialPlanClass = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 4, 3, 2, 1, 12), Bits().clone(namedValues=NamedValues(("emergency", 0)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVoipSipDialPlanClass.setStatus('current')
if mibBuilder.loadTexts: zhoneVoipSipDialPlanClass.setDescription('This parameter is used to configured the dial plan specific features.')
zhoneVoipSipDialPlanDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 4, 3, 2, 1, 13), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneVoipSipDialPlanDescription.setStatus('current')
if mibBuilder.loadTexts: zhoneVoipSipDialPlanDescription.setDescription('This field gives details about the sip-dialplan')
zhoneVoipHuntGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 5504, 4, 3, 4, 4))
nextZhoneVoipHuntGroupId = MibScalar((1, 3, 6, 1, 4, 1, 5504, 4, 3, 4, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nextZhoneVoipHuntGroupId.setStatus('current')
if mibBuilder.loadTexts: nextZhoneVoipHuntGroupId.setDescription('Returns the next unused hunt group entry id. ')
zhoneVoipHuntGroupTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 4, 3, 4, 4, 3), )
if mibBuilder.loadTexts: zhoneVoipHuntGroupTable.setStatus('current')
if mibBuilder.loadTexts: zhoneVoipHuntGroupTable.setDescription('A hunt groups is defined to map a SIP uniform resource identifier (URI) or dirctory number (DN) to multiple DS0s, to allow a greater number of incoming calls to that URI/DN. A hunt group consists of the following information: - the target DN/URI - the default codec to be used for the call, and - the DS0 ports in the hunt-group. Notes: A URI defined in a subscriber-voice-sip profile cannot also be defined as part of a hunt group. This is enforced by the device. A DS0 must be provisioned in the subVoiceSipTable before that DS0 can be used in a hunt group. This is enforced by the device. A DS0 may be part of more than one hunt group. ')
zhoneVoipHuntGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 4, 3, 4, 4, 3, 1), ).setIndexNames((0, "ZHONE-COM-VOIP-MIB", "zhoneVoipHuntGroupId"))
if mibBuilder.loadTexts: zhoneVoipHuntGroupEntry.setStatus('current')
if mibBuilder.loadTexts: zhoneVoipHuntGroupEntry.setDescription('An entry in the hunt group table.')
zhoneVoipHuntGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 4, 4, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: zhoneVoipHuntGroupId.setStatus('current')
if mibBuilder.loadTexts: zhoneVoipHuntGroupId.setDescription('The unique identifier of the hunt group entry.')
zhoneVoipHuntGroupDestUri = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 4, 4, 3, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVoipHuntGroupDestUri.setStatus('current')
if mibBuilder.loadTexts: zhoneVoipHuntGroupDestUri.setDescription('The DN (directory number) or SIP URI (uniform resource identifier) being called. This is the called party from the incoming SIP Invite message.')
zhoneVoipHuntGroupDefaultCodec = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 4, 4, 3, 1, 3), ZhoneCodecType().clone('g711mu')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVoipHuntGroupDefaultCodec.setStatus('current')
if mibBuilder.loadTexts: zhoneVoipHuntGroupDefaultCodec.setDescription('The default codec to use for a call to a member of this hunt group.')
zhoneVoipHuntGroupPortMembers = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 4, 4, 3, 1, 4), Bits().clone(namedValues=NamedValues(("port1", 0), ("port2", 1), ("port3", 2), ("port4", 3), ("port5", 4), ("port6", 5), ("port7", 6), ("port8", 7), ("port9", 8), ("port10", 9), ("port11", 10), ("port12", 11), ("port13", 12), ("port14", 13), ("port15", 14), ("port16", 15), ("port17", 16), ("port18", 17), ("port19", 18), ("port20", 19), ("port21", 20), ("port22", 21), ("port23", 22), ("port24", 23)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVoipHuntGroupPortMembers.setStatus('current')
if mibBuilder.loadTexts: zhoneVoipHuntGroupPortMembers.setDescription('Indicates which ports are contained in the hunt group.')
zhoneVoipHuntGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 4, 4, 3, 1, 5), ZhoneRowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVoipHuntGroupRowStatus.setStatus('current')
if mibBuilder.loadTexts: zhoneVoipHuntGroupRowStatus.setDescription('The row status is used to create or delete an entry in this table.')
zhoneVoipMaliciousCaller = MibIdentifier((1, 3, 6, 1, 4, 1, 5504, 4, 3, 4, 5))
nextVoipMaliciousCallerId = MibScalar((1, 3, 6, 1, 4, 1, 5504, 4, 3, 4, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nextVoipMaliciousCallerId.setStatus('current')
if mibBuilder.loadTexts: nextVoipMaliciousCallerId.setDescription('eturns the next unused malicious caller entry index')
zhoneVoipMaliciousCallerTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 4, 3, 4, 5, 2), )
if mibBuilder.loadTexts: zhoneVoipMaliciousCallerTable.setStatus('current')
if mibBuilder.loadTexts: zhoneVoipMaliciousCallerTable.setDescription("This table defines a malicious caller whose call will be rejected if enabled. SIP terminal administrator needs to provision URI of this table exactly as it appears in the incoming session notification's(SIP INVITE) calling user's address-of-record(AOR) formatted as a SIP URI. The SIP URI can contain either a telephone number(RFC 2806) or an alphanumeric identification(RFC 2806) Entries in the table are case sensitive, shall not contain visual separations and have the exact length as it appears in the SIP INVITE message ")
zhoneVoipMaliciousCallerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 4, 3, 4, 5, 2, 1), ).setIndexNames((0, "ZHONE-COM-VOIP-MIB", "zhoneVoipMaliciousCallerId"))
if mibBuilder.loadTexts: zhoneVoipMaliciousCallerEntry.setStatus('current')
if mibBuilder.loadTexts: zhoneVoipMaliciousCallerEntry.setDescription('An entry in the malicious caller table')
zhoneVoipMaliciousCallerId = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 4, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: zhoneVoipMaliciousCallerId.setStatus('current')
if mibBuilder.loadTexts: zhoneVoipMaliciousCallerId.setDescription('The unique identifier of the malicious call reject entry.')
zhoneVoipMaliciousCallerUri = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 4, 5, 2, 1, 2), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVoipMaliciousCallerUri.setStatus('current')
if mibBuilder.loadTexts: zhoneVoipMaliciousCallerUri.setDescription("Incoming call from this URI will be rejected. The network operator is responsible for provisioning exactly as per appearance in the incoming session notification (SIP INVITE) the calling user's address-of-record (AOR) formatted as a SIP URI")
zhoneVoipMaliciousCallerEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 4, 5, 2, 1, 3), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVoipMaliciousCallerEnable.setStatus('current')
if mibBuilder.loadTexts: zhoneVoipMaliciousCallerEnable.setDescription('Indicates whether the incoming call reject is enabled')
zhoneVoipMaliciousCallerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 4, 5, 2, 1, 4), ZhoneRowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVoipMaliciousCallerRowStatus.setStatus('current')
if mibBuilder.loadTexts: zhoneVoipMaliciousCallerRowStatus.setDescription('The row status is used to create or delete an entry in this table.')
zhoneVoipServerCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 5504, 4, 3, 4, 6))
zhoneVoipServerTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 4, 3, 4, 6, 1), )
if mibBuilder.loadTexts: zhoneVoipServerTable.setStatus('current')
if mibBuilder.loadTexts: zhoneVoipServerTable.setDescription('Table of VOIP Server addresses applicable to each VOIP user agent within the system.')
zhoneVoipServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 4, 3, 4, 6, 1, 1), ).setIndexNames((0, "NETWORK-SERVICES-MIB", "applIndex"), (0, "ZHONE-COM-VOIP-MIB", "zhoneVoipServerAddressIndex"))
if mibBuilder.loadTexts: zhoneVoipServerEntry.setStatus('current')
if mibBuilder.loadTexts: zhoneVoipServerEntry.setDescription('An entry within the table. Indexed by applIndex, which is the slot number, and a user specified unique number.')
zhoneVoipServerAddressIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 4, 6, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: zhoneVoipServerAddressIndex.setStatus('current')
if mibBuilder.loadTexts: zhoneVoipServerAddressIndex.setDescription("A unique identifier of a server address when multiple addresses are configured by the MGCP entity. If one address isn't reachable, then another can be tried.")
zhoneVoipServerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 4, 6, 1, 1, 2), ZhoneRowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVoipServerRowStatus.setStatus('current')
if mibBuilder.loadTexts: zhoneVoipServerRowStatus.setDescription('Row Status is used to create, modify or delete an entry.')
zhoneVoipServerAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 4, 6, 1, 1, 3), InetAddressType().clone('ipv4')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVoipServerAddrType.setStatus('current')
if mibBuilder.loadTexts: zhoneVoipServerAddrType.setDescription('This object specifies the type of address contained in the associated instance of sipVoipServerAddr.')
zhoneVoipServerAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 4, 6, 1, 1, 4), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVoipServerAddr.setStatus('current')
if mibBuilder.loadTexts: zhoneVoipServerAddr.setDescription('This object specifies the address of a VOIP server this user agent will use to proxy/redirect calls.')
zhoneVoipServerUdpPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 4, 6, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(2427)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVoipServerUdpPortNumber.setStatus('current')
if mibBuilder.loadTexts: zhoneVoipServerUdpPortNumber.setDescription('Specifies the UDP Port number for the MGCP Gateway. 2427 is the IANA Registered MGCP Gateway port.')
zhoneVoipServerId = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 4, 6, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38))).clone(namedValues=NamedValues(("longboard", 1), ("asterisk", 2), ("sipexpressrouter", 3), ("metaswitch", 4), ("sylantro", 5), ("broadsoft", 6), ("ubiquity", 7), ("generalbandwidth", 8), ("tekelec-T6000", 9), ("generic", 10), ("sonus", 11), ("siemens", 12), ("tekelec-T9000", 13), ("lucent-telica", 14), ("nortel-cs2000", 15), ("nuera", 16), ("lucent-imerge", 17), ("coppercom", 18), ("newcross", 19), ("cisco-bts", 20), ("cirpack-utp", 21), ("italtel-issw", 22), ("cisco-pgw", 23), ("microtrol-msk10", 24), ("nortel-dms10", 25), ("verso-clarent-c5cm", 26), ("cedarpoint-safari", 27), ("huawei-softx3000", 28), ("nortel-cs1500", 29), ("taqua-t7000", 30), ("utstarcom-mswitch", 31), ("broadsoft-broadworks", 32), ("broadsoft-m6", 33), ("genband-g9", 34), ("netcentrex", 35), ("genband-g6", 36), ("alu-5060", 37), ("ericsson-apz60", 38))).clone('generic')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVoipServerId.setStatus('current')
if mibBuilder.loadTexts: zhoneVoipServerId.setDescription('Identifies the voip server type.')
zhoneVoipServerProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 4, 6, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("sip", 1), ("mgcp", 2), ("megaco", 3), ("ncs", 4))).clone('sip')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVoipServerProtocol.setStatus('current')
if mibBuilder.loadTexts: zhoneVoipServerProtocol.setDescription('The signalling protocol used for VOIP. Choicees are SIP (Session Initiation Protocol) and MGCP (Media Gateway Control Protocol). ')
zhoneVoipServerSendCallProceedingTone = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 4, 6, 1, 1, 8), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVoipServerSendCallProceedingTone.setStatus('current')
if mibBuilder.loadTexts: zhoneVoipServerSendCallProceedingTone.setDescription('ndicates whether, on call originations destined to the PSTN, the device should play a call proceeding tone while waiting for ring-back tone from the switch.')
zhoneVoipServerRtcpEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 4, 6, 1, 1, 9), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVoipServerRtcpEnabled.setStatus('current')
if mibBuilder.loadTexts: zhoneVoipServerRtcpEnabled.setDescription('Indicates whether the Real-Time Control Protocol is enabled for the device. ')
zhoneVoipServerRtcpPacketInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 4, 6, 1, 1, 10), Integer32().clone(5000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVoipServerRtcpPacketInterval.setStatus('current')
if mibBuilder.loadTexts: zhoneVoipServerRtcpPacketInterval.setDescription("RTCP packet interval, in milleseconds. Range is 2500 to 10000 ms. This object's value is only pertinent if RTCP has been enabled.")
zhoneVoipServerInterDigitTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 4, 6, 1, 1, 11), Integer32().clone(10)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVoipServerInterDigitTimeout.setStatus('current')
if mibBuilder.loadTexts: zhoneVoipServerInterDigitTimeout.setDescription('This parameter indicates the duration, in seconds, that the device will wait after each digit is entered before assuming the user has finished entering digits. ')
zhoneVoipServerIpTos = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 4, 6, 1, 1, 12), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVoipServerIpTos.setStatus('current')
if mibBuilder.loadTexts: zhoneVoipServerIpTos.setDescription('This parameter indicates the tos value that is set in the ip header for voice of ip traffic.')
zhoneVoipServerDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 4, 6, 1, 1, 13), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVoipServerDomainName.setStatus('current')
if mibBuilder.loadTexts: zhoneVoipServerDomainName.setDescription('This parameter indicates the Universal Resource Identifier (URI) of the system.')
zhoneVoipServerExpiresInvite = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 4, 6, 1, 1, 14), Unsigned32()).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVoipServerExpiresInvite.setStatus('current')
if mibBuilder.loadTexts: zhoneVoipServerExpiresInvite.setDescription('For user agent clients, this value is inserted into the Expires header. For proxy servers, if a received request contained an Expires header, then the value in the header takes precedence.')
zhoneVoipServerExpiresRegister = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 4, 6, 1, 1, 15), Unsigned32()).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVoipServerExpiresRegister.setStatus('current')
if mibBuilder.loadTexts: zhoneVoipServerExpiresRegister.setDescription('For user agent clients, this value is inserted into the Expires header. For registrar servers, if a received request contained an Expires header, then the value in the header takes precedence.')
zhoneVoipServerHeaderMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 4, 6, 1, 1, 16), Bits().clone(namedValues=NamedValues(("invite", 0), ("register", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVoipServerHeaderMethod.setStatus('current')
if mibBuilder.loadTexts: zhoneVoipServerHeaderMethod.setDescription('This convention is a bit map. Each bit represents a SIP method where the Expires header should be included. If a bit has value 1, then the requests corresponding to that SIP method must include an Expires header line. If a bit has value 0, then the Expires header line will not be added. Combinations of bits can be set when the Expires header line is required in multiple SIP methods. bit 0 : INVITE method. bit 1 : REGISTER Method.')
zhoneVoipServerSessionTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 4, 6, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('off')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVoipServerSessionTimer.setStatus('current')
if mibBuilder.loadTexts: zhoneVoipServerSessionTimer.setDescription("Support session timers on : Session timers are supported, and SIP messages will have a 'Supported: timer' header off: Session timers are NOT supported, and SIP messages will NOT have a 'Supported: timer' header")
zhoneVoipServerSessionExpiration = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 4, 6, 1, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(90, 2147483647)).clone(180)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVoipServerSessionExpiration.setStatus('current')
if mibBuilder.loadTexts: zhoneVoipServerSessionExpiration.setDescription('The time at which an element (proxy, UAC, UAS) will consider the SIP session timed out, if no successful session refresh transaction occurs beforehand.')
zhoneVoipServerSessionMinSE = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 4, 6, 1, 1, 19), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(90, 2147483647)).clone(180)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVoipServerSessionMinSE.setStatus('current')
if mibBuilder.loadTexts: zhoneVoipServerSessionMinSE.setDescription('Because of the processing load of mid-dialog requests, all elements (proxy, UAC, UAS) can have configured minimum value for the session interval that they are willing to accept.')
zhoneVoipServerSessionCallerReqTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 4, 6, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2))).clone('no')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVoipServerSessionCallerReqTimer.setStatus('current')
if mibBuilder.loadTexts: zhoneVoipServerSessionCallerReqTimer.setDescription("This field specifies the caller's action yes: Caller (UAC) will request for timer when making outbound calls no : Caller (UAC) will NOT request for timer when making outbound calls")
zhoneVoipServerSessionCalleeReqTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 4, 6, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2))).clone('no')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVoipServerSessionCalleeReqTimer.setStatus('current')
if mibBuilder.loadTexts: zhoneVoipServerSessionCalleeReqTimer.setDescription("When caller supports timer but did not request one this field specifies the callee's action yes: Callee (UAS) will request for timer no : Callee (UAS) will NOT request for timer")
zhoneVoipServerSessionCallerSpecifyRefresher = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 4, 6, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("uac", 1), ("uas", 2), ("omit", 3))).clone('omit')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVoipServerSessionCallerSpecifyRefresher.setStatus('current')
if mibBuilder.loadTexts: zhoneVoipServerSessionCallerSpecifyRefresher.setDescription('Caller specifies the refresher: UAC : Caller specifies itself (UAC) as the refresher UAS : Caller specifies the callee (UAS) as the refresher Omit: Caller does NOT explicitly specify the refresher')
zhoneVoipServerSessionCalleeSpecifyRefresher = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 4, 6, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("uac", 1), ("uas", 2))).clone('uac')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVoipServerSessionCalleeSpecifyRefresher.setStatus('current')
if mibBuilder.loadTexts: zhoneVoipServerSessionCalleeSpecifyRefresher.setDescription('When UAC did not specify refresher tag, callee specifies the refresher: UAC : Callee specifies the caller (UAC) as the refresher UAS : Callee specifies itself (UAS) as the refresher')
zhoneVoipServerDtmfMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 4, 6, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("inband", 1), ("rfc2833", 2), ("rfc2833only", 3))).clone('rfc2833')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVoipServerDtmfMode.setStatus('current')
if mibBuilder.loadTexts: zhoneVoipServerDtmfMode.setDescription('Indicates whether dtmf digits are to be passed as codec voice packets or special separate packets (rfc2833). ')
zhoneVoipServerBehaviorStringOne = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 4, 6, 1, 1, 25), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setUnits('characters').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVoipServerBehaviorStringOne.setStatus('current')
if mibBuilder.loadTexts: zhoneVoipServerBehaviorStringOne.setDescription('This field is used to control any switch specific behavior of the VOIP Gateway.')
zhoneVoipServerRtpTermIdSyntax = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 4, 6, 1, 1, 26), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 96))).setUnits('characters').setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneVoipServerRtpTermIdSyntax.setStatus('current')
if mibBuilder.loadTexts: zhoneVoipServerRtpTermIdSyntax.setDescription('This field describes the Ephemeral term ID syntax for the switch. The RTP syntax varies from switch to switch.But the string should contain atleast one %eid format, eg <string>%eid<string> . This field is supported only for the Megaco protocol for all other protocols this field will be initialized to NULL. If the protocol is megaco and the field is NULL, Ephemeral term id will be updated to default syntax of the server Id given. If the server Id is not provisioned with the default id then field will be updated to NULL. ')
zhoneVoipServerRtpDSCP = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 4, 6, 1, 1, 27), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVoipServerRtpDSCP.setStatus('current')
if mibBuilder.loadTexts: zhoneVoipServerRtpDSCP.setDescription("This parameter indicates DSCP value for voip's rtp traffic. NOTE:zhoneVoipServerIpTos field must be zero before entering a new value into this field. Valid code values: <0-63> Differentiated services codepoint value af11 Mark packets with AF11 dscp (001010) af12 Mark packets with AF12 dscp (001100) af13 Mark packets with AF13 dscp (001110) af21 Mark packets with AF21 dscp (010010) af22 Mark packets with AF22 dscp (010100) af23 Mark packets with AF23 dscp (010110) af31 Mark packets with AF31 dscp (011010) af32 Mark packets with AF32 dscp (011100) af33 Mark packets with AF33 dscp (011110) af41 Mark packets with AF41 dscp (100010) af42 Mark packets with AF42 dscp (100100) af43 Mark packets with AF43 dscp (100110) cs1 Mark packets with CS1(precedence 1) dscp (001000) cs2 Mark packets with CS2(precedence 2) dscp (010000) cs3 Mark packets with CS3(precedence 3) dscp (011000) cs4 Mark packets with CS4(precedence 4) dscp (100000) cs5 Mark packets with CS5(precedence 5) dscp (101000) cs6 Mark packets with CS6(precedence 6) dscp (110000) cs7 Mark packets with CS7(precedence 7) dscp (111000) default Mark packets with default dscp (000000) ef Mark packets with EF dscp (101110) ")
zhoneVoipServerSignalingDSCP = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 4, 6, 1, 1, 28), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVoipServerSignalingDSCP.setStatus('current')
if mibBuilder.loadTexts: zhoneVoipServerSignalingDSCP.setDescription("This parameter indicates DSCP value for voip's signaling traffic. Valid code values: <0-63> Differentiated services codepoint value af11 Mark packets with AF11 dscp (001010) af12 Mark packets with AF12 dscp (001100) af13 Mark packets with AF13 dscp (001110) af21 Mark packets with AF21 dscp (010010) af22 Mark packets with AF22 dscp (010100) af23 Mark packets with AF23 dscp (010110) af31 Mark packets with AF31 dscp (011010) af32 Mark packets with AF32 dscp (011100) af33 Mark packets with AF33 dscp (011110) af41 Mark packets with AF41 dscp (100010) af42 Mark packets with AF42 dscp (100100) af43 Mark packets with AF43 dscp (100110) cs1 Mark packets with CS1(precedence 1) dscp (001000) cs2 Mark packets with CS2(precedence 2) dscp (010000) cs3 Mark packets with CS3(precedence 3) dscp (011000) cs4 Mark packets with CS4(precedence 4) dscp (100000) cs5 Mark packets with CS5(precedence 5) dscp (101000) cs6 Mark packets with CS6(precedence 6) dscp (110000) cs7 Mark packets with CS7(precedence 7) dscp (111000) default Mark packets with default dscp (000000) ef Mark packets with EF dscp (101110) ")
zhoneVoipServerDtmfPayloadId = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 4, 6, 1, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(96, 127)).clone(101)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneVoipServerDtmfPayloadId.setStatus('current')
if mibBuilder.loadTexts: zhoneVoipServerDtmfPayloadId.setDescription('Description.')
zhoneVoipServerRegisterReadyTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 4, 6, 1, 1, 30), Unsigned32().clone(10)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVoipServerRegisterReadyTimeout.setStatus('current')
if mibBuilder.loadTexts: zhoneVoipServerRegisterReadyTimeout.setDescription('For Megaco Service change Messages this value will be used in service-change-delay.')
zhoneVoipServerMessageRetryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 4, 6, 1, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVoipServerMessageRetryCount.setStatus('current')
if mibBuilder.loadTexts: zhoneVoipServerMessageRetryCount.setDescription('This field specifies the number of retries of SIP message to every DNS resolved server IP addresses. The default behaviour means that the SIP message will be retransmitted to the first DNS resolved IP address once and the remaining retransmissions will be to the second DNS resolved IP address. The default value of zero or DNS resolved to a single IP address means that the default behaviour will take effect')
zhoneVoipServerFeatures = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 4, 6, 1, 1, 32), Bits().clone(namedValues=NamedValues(("sip-outbound", 0), ("gruu", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVoipServerFeatures.setStatus('current')
if mibBuilder.loadTexts: zhoneVoipServerFeatures.setDescription('Set of features can be enabled for voip server Bit Feature --- -------- 1 sip outbound 2 gruu')
zhoneVoipServerTransportProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 4, 6, 1, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("udp", 1), ("tcp", 2))).clone('udp')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVoipServerTransportProtocol.setStatus('current')
if mibBuilder.loadTexts: zhoneVoipServerTransportProtocol.setDescription('This field specifies type of transport protocol configured. Possible values are udp and tcp.')
zhoneVoipSigLocalPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 4, 6, 1, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(5060)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVoipSigLocalPortNumber.setStatus('current')
if mibBuilder.loadTexts: zhoneVoipSigLocalPortNumber.setDescription('This field specifies signalling local port number, used when tcp is configured as tranport protocol.')
mibBuilder.exportSymbols("ZHONE-COM-VOIP-MIB", zhoneVoipSipDialPlanId=zhoneVoipSipDialPlanId, zhoneVoipSipDialString=zhoneVoipSipDialString, zhoneVoipServerDtmfMode=zhoneVoipServerDtmfMode, zhoneVoipServerExpiresInvite=zhoneVoipServerExpiresInvite, zhoneVoipServerRowStatus=zhoneVoipServerRowStatus, zhoneVoip=zhoneVoip, zhoneVoipServerEntry=zhoneVoipServerEntry, zhoneVoipServerSessionMinSE=zhoneVoipServerSessionMinSE, zhoneVoipHuntGroup=zhoneVoipHuntGroup, zhoneVoipSystemRtcpPacketInterval=zhoneVoipSystemRtcpPacketInterval, zhoneVoipMaliciousCallerRowStatus=zhoneVoipMaliciousCallerRowStatus, zhoneVoipServerFeatures=zhoneVoipServerFeatures, zhoneVoipHuntGroupTable=zhoneVoipHuntGroupTable, zhoneVoipMaliciousCallerUri=zhoneVoipMaliciousCallerUri, zhoneVoipServerTransportProtocol=zhoneVoipServerTransportProtocol, zhoneVoipServerDtmfPayloadId=zhoneVoipServerDtmfPayloadId, zhoneVoipHuntGroupDestUri=zhoneVoipHuntGroupDestUri, zhoneVoipOverrideInterdigitTimeout=zhoneVoipOverrideInterdigitTimeout, zhoneVoipServerEntryIndex=zhoneVoipServerEntryIndex, zhoneVoipSystemProtocol=zhoneVoipSystemProtocol, zhoneVoipSipDialPlanRowStatus=zhoneVoipSipDialPlanRowStatus, zhoneVoipSipDialNumOfDigits=zhoneVoipSipDialNumOfDigits, zhoneVoipServerExpiresRegister=zhoneVoipServerExpiresRegister, zhoneVoipSystemIpTos=zhoneVoipSystemIpTos, zhoneVoipObjects=zhoneVoipObjects, zhoneVoipServerSessionCalleeSpecifyRefresher=zhoneVoipServerSessionCalleeSpecifyRefresher, zhoneVoipHuntGroupId=zhoneVoipHuntGroupId, zhoneVoipSystemDomainName=zhoneVoipSystemDomainName, zhoneVoipSipDialDestName=zhoneVoipSipDialDestName, zhoneVoipServerAddrType=zhoneVoipServerAddrType, zhoneVoipServerDomainName=zhoneVoipServerDomainName, zhoneVoipSipDialPlanDescription=zhoneVoipSipDialPlanDescription, zhoneVoipServerSessionCallerReqTimer=zhoneVoipServerSessionCallerReqTimer, zhoneVoipMaliciousCallerEnable=zhoneVoipMaliciousCallerEnable, zhoneVoipServerSignalingDSCP=zhoneVoipServerSignalingDSCP, PYSNMP_MODULE_ID=zhoneVoip, zhoneVoipServerSessionExpiration=zhoneVoipServerSessionExpiration, zhoneVoipServerSessionTimer=zhoneVoipServerSessionTimer, zhoneVoipServerUdpPortNumber=zhoneVoipServerUdpPortNumber, zhoneVoipServerHeaderMethod=zhoneVoipServerHeaderMethod, zhoneVoipSipDialIpAddr=zhoneVoipSipDialIpAddr, zhoneVoipServerBehaviorStringOne=zhoneVoipServerBehaviorStringOne, zhoneVoipSystemSendCallProceedingTone=zhoneVoipSystemSendCallProceedingTone, zhoneVoipSystemRtcpEnabled=zhoneVoipSystemRtcpEnabled, zhoneVoipHuntGroupEntry=zhoneVoipHuntGroupEntry, zhoneVoipSystem=zhoneVoipSystem, zhoneVoipServerCfg=zhoneVoipServerCfg, zhoneVoipServerTable=zhoneVoipServerTable, zhoneVoipServerProtocol=zhoneVoipServerProtocol, zhoneVoipServerInterDigitTimeout=zhoneVoipServerInterDigitTimeout, zhoneVoipMaliciousCallerEntry=zhoneVoipMaliciousCallerEntry, zhoneVoipSystemInterdigitTimeout=zhoneVoipSystemInterdigitTimeout, zhoneVoipSipDialPlanType=zhoneVoipSipDialPlanType, zhoneVoipServerMessageRetryCount=zhoneVoipServerMessageRetryCount, zhoneVoipHuntGroupDefaultCodec=zhoneVoipHuntGroupDefaultCodec, zhoneVoipServerAddr=zhoneVoipServerAddr, zhoneVoipServerSessionCalleeReqTimer=zhoneVoipServerSessionCalleeReqTimer, nextVoipSipDialPlanId=nextVoipSipDialPlanId, zhoneVoipServerRtcpPacketInterval=zhoneVoipServerRtcpPacketInterval, zhoneVoipServerId=zhoneVoipServerId, zhoneVoipServerSessionCallerSpecifyRefresher=zhoneVoipServerSessionCallerSpecifyRefresher, zhoneVoipSigLocalPortNumber=zhoneVoipSigLocalPortNumber, zhoneVoipServerRtpTermIdSyntax=zhoneVoipServerRtpTermIdSyntax, nextVoipMaliciousCallerId=nextVoipMaliciousCallerId, zhoneVoipSipDialPrefixAdd=zhoneVoipSipDialPrefixAdd, zhoneVoipSipDialPlanClass=zhoneVoipSipDialPlanClass, zhoneVoipMaliciousCallerTable=zhoneVoipMaliciousCallerTable, zhoneVoipServerRtcpEnabled=zhoneVoipServerRtcpEnabled, zhoneVoipMaliciousCaller=zhoneVoipMaliciousCaller, zhoneVoipHuntGroupRowStatus=zhoneVoipHuntGroupRowStatus, zhoneVoipServerSendCallProceedingTone=zhoneVoipServerSendCallProceedingTone, zhoneVoipSipDialPlanTable=zhoneVoipSipDialPlanTable, zhoneVoipSipDialPlan=zhoneVoipSipDialPlan, zhoneVoipSipDialPlanEntry=zhoneVoipSipDialPlanEntry, zhoneVoipMaliciousCallerId=zhoneVoipMaliciousCallerId, zhoneVoipServerIpTos=zhoneVoipServerIpTos, zhoneVoipSipDialPrefixStrip=zhoneVoipSipDialPrefixStrip, zhoneVoipServerRtpDSCP=zhoneVoipServerRtpDSCP, zhoneVoipServerRegisterReadyTimeout=zhoneVoipServerRegisterReadyTimeout, zhoneVoipServerAddressIndex=zhoneVoipServerAddressIndex, nextZhoneVoipHuntGroupId=nextZhoneVoipHuntGroupId, zhoneVoipHuntGroupPortMembers=zhoneVoipHuntGroupPortMembers)
