#
# PySNMP MIB module ES-RACKTIVITY-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ES-RACKTIVITY-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:06:21 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
MibIdentifier, TimeTicks, IpAddress, NotificationType, Counter32, Counter64, Gauge32, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, enterprises, Bits, iso, ObjectIdentity, Integer32, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "TimeTicks", "IpAddress", "NotificationType", "Counter32", "Counter64", "Gauge32", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "enterprises", "Bits", "iso", "ObjectIdentity", "Integer32", "Unsigned32")
DisplayString, TextualConvention, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "MacAddress")
esRACKTIVITYMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 34097, 9))
esRACKTIVITYMIB.setRevisions(('2014-04-23 03:33',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: esRACKTIVITYMIB.setRevisionsDescriptions(('Initial version',))
if mibBuilder.loadTexts: esRACKTIVITYMIB.setLastUpdated('201404230333Z')
if mibBuilder.loadTexts: esRACKTIVITYMIB.setOrganization('Racktivity')
if mibBuilder.loadTexts: esRACKTIVITYMIB.setContactInfo('http://www.racktivity.com')
if mibBuilder.loadTexts: esRACKTIVITYMIB.setDescription('The MIB module for the Racktivity Devices')
class Version(TextualConvention, OctetString):
    description = 'Displays a version number'
    status = 'current'
    displayHint = '1d.1d.1d.1d'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(4, 4)
    fixedLength = 4

racktivity = MibIdentifier((1, 3, 6, 1, 4, 1, 34097))
racktivityNotif = MibIdentifier((1, 3, 6, 1, 4, 1, 34097, 9, 0))
class Utenth(TextualConvention, Unsigned32):
    description = '0.1'
    status = 'current'
    displayHint = 'd-1'

class Uhundredth(TextualConvention, Unsigned32):
    description = '0.01'
    status = 'current'
    displayHint = 'd-2'

class Uthousandth(TextualConvention, Unsigned32):
    description = '0.001'
    status = 'current'
    displayHint = 'd-3'

class Stenth(TextualConvention, Integer32):
    description = '0.1'
    status = 'current'
    displayHint = 'd-1'

class Shundredth(TextualConvention, Integer32):
    description = '0.01'
    status = 'current'
    displayHint = 'd-2'

class Sthousandth(TextualConvention, Integer32):
    description = '0.001'
    status = 'current'
    displayHint = 'd-3'

class EVENTFLAGS(TextualConvention, Integer32):
    description = 'enumeration of all eventflags possible'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("sNMPTrapOff", 0), ("sNMPTrapOn", 1))

class CURPORTSTATE(TextualConvention, Integer32):
    description = 'enumeration of all port states possible'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23))
    namedValues = NamedValues(("portOff", 0), ("portOnNoWarning", 1), ("portOff1", 2), ("portOnWithWarningCurrent", 3), ("portOff2", 4), ("portOnWithWarningPower", 5), ("portOff3", 6), ("portOnWithWarningCurrentAndPower", 7), ("portOffWithError", 8), ("portOnNoWarning1", 9), ("portOffWithError1", 10), ("portOnWithWarningCurrent1", 11), ("portOffWithError2", 12), ("portOnWithWarningPower1", 13), ("portOffWithError3", 14), ("portOnWithWarnCurrentAndPower1", 15), ("portOffWithDelayOn", 16), ("portOnNoWarning2", 17), ("portOffWithDelayOn1", 18), ("portOnWithWarningCurrent2", 19), ("portOffWithDelayOn2", 20), ("portOnWithWarningPower2", 21), ("portOffWithDelayOn3", 22), ("portOnWithWarnCurrentAndPower2", 23))

masterModule = MibIdentifier((1, 3, 6, 1, 4, 1, 34097, 9, 77))
eMasterTable = MibTable((1, 3, 6, 1, 4, 1, 34097, 9, 77, 1), )
if mibBuilder.loadTexts: eMasterTable.setStatus('current')
if mibBuilder.loadTexts: eMasterTable.setDescription('NO_INFO')
eMasterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 34097, 9, 77, 1, 1), ).setIndexNames((0, "ES-RACKTIVITY-MIB", "masterModuleIndex"), (0, "ES-RACKTIVITY-MIB", "masterIndex"))
if mibBuilder.loadTexts: eMasterEntry.setStatus('current')
if mibBuilder.loadTexts: eMasterEntry.setDescription('NO_INFO')
masterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 77, 1, 1, 65537), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: masterIndex.setStatus('current')
if mibBuilder.loadTexts: masterIndex.setDescription('Index for the selected Master Module')
masterModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 77, 1, 1, 65538), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: masterModuleIndex.setStatus('current')
if mibBuilder.loadTexts: masterModuleIndex.setDescription('Selected Master Module')
mGeneralModuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 77, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mGeneralModuleStatus.setStatus('current')
if mibBuilder.loadTexts: mGeneralModuleStatus.setDescription('General status of a module.')
mSpecificModuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 77, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mSpecificModuleStatus.setStatus('current')
if mibBuilder.loadTexts: mSpecificModuleStatus.setDescription('Specific status of a module.')
mCurrentTime = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 77, 1, 1, 3), TimeTicks()).setUnits('UNIX').setMaxAccess("readwrite")
if mibBuilder.loadTexts: mCurrentTime.setStatus('current')
if mibBuilder.loadTexts: mCurrentTime.setDescription('Gets or sets the current time (not possible when NTP is enabled). (unit: UNIX)')
mVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 77, 1, 1, 4), Uhundredth()).setUnits('V').setMaxAccess("readonly")
if mibBuilder.loadTexts: mVoltage.setStatus('current')
if mibBuilder.loadTexts: mVoltage.setDescription('Gets the voltage of a power module. (unit: 0.01V)')
mTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 77, 1, 1, 11), Utenth()).setUnits('K').setMaxAccess("readonly")
if mibBuilder.loadTexts: mTemperature.setStatus('current')
if mibBuilder.loadTexts: mTemperature.setDescription('Gets the current temperature of a temperature sensor. (unit: 0.1K)')
mCurrentIP = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 77, 1, 1, 14), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mCurrentIP.setStatus('current')
if mibBuilder.loadTexts: mCurrentIP.setDescription('Gets the current IP address. To set the IP address, use IPADDR instead.')
mTotalCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 77, 1, 1, 17), Uthousandth()).setUnits('A').setMaxAccess("readonly")
if mibBuilder.loadTexts: mTotalCurrent.setStatus('current')
if mibBuilder.loadTexts: mTotalCurrent.setDescription('Gets the total current of a power module. (unit: 0.001A)')
mTotalRealPower = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 77, 1, 1, 18), Unsigned32()).setUnits('W').setMaxAccess("readonly")
if mibBuilder.loadTexts: mTotalRealPower.setStatus('current')
if mibBuilder.loadTexts: mTotalRealPower.setDescription('Gets the total power level of a power module. (unit: W)')
mTotalActiveEnergy = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 77, 1, 1, 20), Uthousandth()).setUnits('kWh').setMaxAccess("readonly")
if mibBuilder.loadTexts: mTotalActiveEnergy.setStatus('current')
if mibBuilder.loadTexts: mTotalActiveEnergy.setDescription('Gets the total energy of a power module. (unit: 0.001kWh)')
mLineCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 77, 1, 1, 32), Uthousandth().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('A').setMaxAccess("readonly")
if mibBuilder.loadTexts: mLineCurrent.setStatus('current')
if mibBuilder.loadTexts: mLineCurrent.setDescription('Gets the current line current. (unit: 0.001A)')
mFuseCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 77, 1, 1, 33), Uthousandth().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('A').setMaxAccess("readonly")
if mibBuilder.loadTexts: mFuseCurrent.setStatus('current')
if mibBuilder.loadTexts: mFuseCurrent.setDescription('Gets the current through a fuse. (unit: 0.001A)')
mCurrentSubNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 77, 1, 1, 34), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mCurrentSubNetMask.setStatus('current')
if mibBuilder.loadTexts: mCurrentSubNetMask.setDescription('Gets the current subnet mask. To set the subnet mask use SNMSK instead.')
mCurrentDNSServer = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 77, 1, 1, 35), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mCurrentDNSServer.setStatus('current')
if mibBuilder.loadTexts: mCurrentDNSServer.setDescription('Gets the current DNS server. To set the DNS server use DNSSRV instead.')
mCurrentStdGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 77, 1, 1, 36), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mCurrentStdGateway.setStatus('current')
if mibBuilder.loadTexts: mCurrentStdGateway.setDescription('Gets the current standard gateway. To set the standard gateway use STDGW instead.')
mUPSPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 77, 1, 1, 37), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mUPSPresent.setStatus('current')
if mibBuilder.loadTexts: mUPSPresent.setDescription('Checks if a UPS is present.')
mUPSStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 77, 1, 1, 38), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mUPSStatus.setStatus('current')
if mibBuilder.loadTexts: mUPSStatus.setDescription('Gets the working status of a UPS (if its working on its batteries or not).')
mUPSEstimatedRunTime = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 77, 1, 1, 39), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('min').setMaxAccess("readonly")
if mibBuilder.loadTexts: mUPSEstimatedRunTime.setStatus('current')
if mibBuilder.loadTexts: mUPSEstimatedRunTime.setDescription('Gets the estimated run time of a UPS. (unit: min)')
mUPSBatteryLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 77, 1, 1, 40), Utenth().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: mUPSBatteryLevel.setStatus('current')
if mibBuilder.loadTexts: mUPSBatteryLevel.setDescription('The current UPS battery level. (unit: 0.1%)')
mHighCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 77, 1, 1, 41), Stenth()).setUnits('A').setMaxAccess("readonly")
if mibBuilder.loadTexts: mHighCurrent.setStatus('current')
if mibBuilder.loadTexts: mHighCurrent.setDescription('The current for high values (unit: 0.1A)')
mUpsCommunicationStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 77, 1, 1, 42), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mUpsCommunicationStatus.setStatus('current')
if mibBuilder.loadTexts: mUpsCommunicationStatus.setDescription('Status information of communication with the UPS')
mHighPower = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 77, 1, 1, 43), Shundredth().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setUnits('kW').setMaxAccess("readonly")
if mibBuilder.loadTexts: mHighPower.setStatus('current')
if mibBuilder.loadTexts: mHighPower.setDescription('The power for high values (unit: 0.01kW)')
mTotalHighCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 77, 1, 1, 44), Stenth().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('A').setMaxAccess("readonly")
if mibBuilder.loadTexts: mTotalHighCurrent.setStatus('current')
if mibBuilder.loadTexts: mTotalHighCurrent.setDescription('The current for high values (unit: 0.1A)')
mTotalHighPower = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 77, 1, 1, 45), Shundredth().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setUnits('kW').setMaxAccess("readonly")
if mibBuilder.loadTexts: mTotalHighPower.setStatus('current')
if mibBuilder.loadTexts: mTotalHighPower.setDescription('The power for high values (unit: 0.01kW)')
mPositiveEnergy = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 77, 1, 1, 46), Uthousandth().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setUnits('kWh').setMaxAccess("readonly")
if mibBuilder.loadTexts: mPositiveEnergy.setStatus('current')
if mibBuilder.loadTexts: mPositiveEnergy.setDescription('Gets the positive energy used by an outlet. (unit: 0.001kWh)')
mNegativeEnergy = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 77, 1, 1, 47), Uthousandth().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setUnits('kWh').setMaxAccess("readonly")
if mibBuilder.loadTexts: mNegativeEnergy.setStatus('current')
if mibBuilder.loadTexts: mNegativeEnergy.setDescription('Gets the negative energy used by an outlet. (unit: 0.001kWh)')
mTotalPositiveEnergy = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 77, 1, 1, 48), Uthousandth().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setUnits('kWh').setMaxAccess("readonly")
if mibBuilder.loadTexts: mTotalPositiveEnergy.setStatus('current')
if mibBuilder.loadTexts: mTotalPositiveEnergy.setDescription('Gets the positive energy of the module. (unit: 0.001kWh)')
mTotalNegativeEnergy = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 77, 1, 1, 49), Uthousandth().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setUnits('kWh').setMaxAccess("readonly")
if mibBuilder.loadTexts: mTotalNegativeEnergy.setStatus('current')
if mibBuilder.loadTexts: mTotalNegativeEnergy.setDescription('Gets the negative energy of the module. (unit: 0.001kWh)')
mCloudStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 77, 1, 1, 56), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mCloudStatus.setStatus('current')
if mibBuilder.loadTexts: mCloudStatus.setDescription('Gets the status of the connection with the cloud. 0 = Idle state; 1 = Disabled; 2 = Initialising; 3 = Initialising - No connection; 4 = Initialising - No key; 5 = Connection Ok; 6 = Connection Failed; 7 = Connection Failed - No key.')
mStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 77, 1, 1, 1000), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mStatus.setStatus('current')
if mibBuilder.loadTexts: mStatus.setDescription('status of a module')
mModuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 77, 1, 1, 10001), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mModuleName.setStatus('current')
if mibBuilder.loadTexts: mModuleName.setDescription('Gets, sets or defaults the module name.')
mFirmwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 77, 1, 1, 10002), Version()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mFirmwareVersion.setStatus('current')
if mibBuilder.loadTexts: mFirmwareVersion.setDescription("Gets the version of the module's firmware.")
mHardwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 77, 1, 1, 10003), Version()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mHardwareVersion.setStatus('current')
if mibBuilder.loadTexts: mHardwareVersion.setDescription("Gets the version of a module's hardware.")
mFirmwareID = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 77, 1, 1, 10004), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mFirmwareID.setStatus('current')
if mibBuilder.loadTexts: mFirmwareID.setDescription("Gets the ID of the module's firmware.")
mHardwareID = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 77, 1, 1, 10005), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mHardwareID.setStatus('current')
if mibBuilder.loadTexts: mHardwareID.setDescription("Gets the ID of a module's hardware.")
mRackName = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 77, 1, 1, 10006), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mRackName.setStatus('current')
if mibBuilder.loadTexts: mRackName.setDescription('Gets, sets or defaults the name of the rack.')
mRackPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 77, 1, 1, 10007), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mRackPosition.setStatus('current')
if mibBuilder.loadTexts: mRackPosition.setDescription('Gets, sets or defaults the position in the rack.')
mIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 77, 1, 1, 10011), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mIPAddress.setStatus('current')
if mibBuilder.loadTexts: mIPAddress.setDescription('Gets, sets or defaults the IP address (when DHCP is disabled).')
mSubNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 77, 1, 1, 10012), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mSubNetMask.setStatus('current')
if mibBuilder.loadTexts: mSubNetMask.setDescription('Gets, sets or defaults the subnet mask (when DHCP is disabled).')
mStdGateWay = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 77, 1, 1, 10013), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mStdGateWay.setStatus('current')
if mibBuilder.loadTexts: mStdGateWay.setDescription('Gets, sets or defaults the standard gateway (when DHCP is disabled).')
mDnsServer = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 77, 1, 1, 10014), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mDnsServer.setStatus('current')
if mibBuilder.loadTexts: mDnsServer.setDescription('Gets, sets or defaults the IP address of the used DNS server (when DHCP is disabled).')
mMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 77, 1, 1, 10015), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mMAC.setStatus('current')
if mibBuilder.loadTexts: mMAC.setDescription('Gets the MAC address of a master module.')
mDHCPEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 77, 1, 1, 10016), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mDHCPEnable.setStatus('current')
if mibBuilder.loadTexts: mDHCPEnable.setDescription('Enables, disables or defaults DHCP. Set to 1 to enable DHCP, or 0 to disable DHCP.')
mNTPServer = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 77, 1, 1, 10017), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mNTPServer.setStatus('current')
if mibBuilder.loadTexts: mNTPServer.setDescription('Gets, sets or defaults the NTP (Network Time Protocol) server IP address.')
mUseDefaultNTPServer = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 77, 1, 1, 10018), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mUseDefaultNTPServer.setStatus('current')
if mibBuilder.loadTexts: mUseDefaultNTPServer.setDescription('Enables, disables or defaults the usage of the default NTP (Network Time Protocol) server (pool.ntp.org).')
mUseNTP = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 77, 1, 1, 10019), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mUseNTP.setStatus('current')
if mibBuilder.loadTexts: mUseNTP.setDescription('Enables, disables or defaults NTP (Network Time Protocol). Set to 1 to enable NTP, or 0 to disable NTP.')
mSNMPTrapRecvIP = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 77, 1, 1, 10020), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mSNMPTrapRecvIP.setStatus('current')
if mibBuilder.loadTexts: mSNMPTrapRecvIP.setDescription('Gets, sets or defaults the SNMP trap receiver IP address.')
mSNMPTrapRecvPort = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 77, 1, 1, 10021), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mSNMPTrapRecvPort.setStatus('current')
if mibBuilder.loadTexts: mSNMPTrapRecvPort.setDescription('Gets, sets or defaults the SNMP tap receiver port.')
mSNMPControl = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 77, 1, 1, 10024), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mSNMPControl.setStatus('current')
if mibBuilder.loadTexts: mSNMPControl.setDescription('Enables, disables or defaults write access over SNMP. Set to 1 to disable write access, or 0 to enable write access.')
mECSServer = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 77, 1, 1, 10028), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mECSServer.setStatus('current')
if mibBuilder.loadTexts: mECSServer.setDescription('Gets, sets or defaults the ECS (Energy Cloud Sentinel) server IP address.')
mUseECSServer = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 77, 1, 1, 10029), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mUseECSServer.setStatus('current')
if mibBuilder.loadTexts: mUseECSServer.setDescription('Enables, disables or defaults the use of an ECS (Energy Cloud Sentinel) server. Set to 1 to enable or 0 to disable.')
mDisplayLock = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 77, 1, 1, 10031), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mDisplayLock.setStatus('current')
if mibBuilder.loadTexts: mDisplayLock.setDescription('Gets, sets or defaults the display lock. If the display is locked, you can still view information on the display, but you are not allowed to change settings through the menu system.')
mDisplayTimeOn = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 77, 1, 1, 10032), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setUnits('min').setMaxAccess("readwrite")
if mibBuilder.loadTexts: mDisplayTimeOn.setStatus('current')
if mibBuilder.loadTexts: mDisplayTimeOn.setDescription('Gets, sets or defaults the display sleep timer. If the display is inactive for longer than this time, the display turns off to save power. Time is in minutes. (unit: min)')
mMaxVoltageWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 77, 1, 1, 10047), Uhundredth().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('V').setMaxAccess("readwrite")
if mibBuilder.loadTexts: mMaxVoltageWarning.setStatus('current')
if mibBuilder.loadTexts: mMaxVoltageWarning.setDescription('Gets, sets or defaults the maximum voltage warning level. (unit: 0.01V)')
mMinVoltageWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 77, 1, 1, 10049), Uhundredth().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('V').setMaxAccess("readwrite")
if mibBuilder.loadTexts: mMinVoltageWarning.setStatus('current')
if mibBuilder.loadTexts: mMinVoltageWarning.setDescription('Gets, sets or defaults the minimum voltage warning level. (unit: 0.01V)')
mMinTemperatureWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 77, 1, 1, 10052), Utenth().subtype(subtypeSpec=ValueRangeConstraint(2232, 4732))).setUnits('K').setMaxAccess("readwrite")
if mibBuilder.loadTexts: mMinTemperatureWarning.setStatus('current')
if mibBuilder.loadTexts: mMinTemperatureWarning.setDescription('Gets, sets or defaults the minimum temperature warning level (use DEF accessor to reset). (unit: 0.1K)')
mMaxTemperatureWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 77, 1, 1, 10053), Utenth().subtype(subtypeSpec=ValueRangeConstraint(2232, 4732))).setUnits('K').setMaxAccess("readwrite")
if mibBuilder.loadTexts: mMaxTemperatureWarning.setStatus('current')
if mibBuilder.loadTexts: mMaxTemperatureWarning.setDescription('Gets, sets or defaults the maximum temperature warning level (use DEF accessor to reset). (unit: 0.1K)')
mGeneralEventEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 77, 1, 1, 10074), EVENTFLAGS()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGeneralEventEnable.setStatus('current')
if mibBuilder.loadTexts: mGeneralEventEnable.setDescription('Gets, sets or defaults general events. If set to 0, no events will be generated. Set to 1 to generate events on media indicated by the event bitfields.')
mSNMPSysContact = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 77, 1, 1, 10075), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mSNMPSysContact.setStatus('current')
if mibBuilder.loadTexts: mSNMPSysContact.setDescription('Gets, sets or defaults the SNMP contact information.')
mCurrentWarningEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 77, 1, 1, 10078), EVENTFLAGS()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mCurrentWarningEvent.setStatus('current')
if mibBuilder.loadTexts: mCurrentWarningEvent.setDescription('Enables or disables the SNMP trap if the outlet current warning level is exceeded.')
mPowerWarningEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 77, 1, 1, 10080), EVENTFLAGS()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mPowerWarningEvent.setStatus('current')
if mibBuilder.loadTexts: mPowerWarningEvent.setDescription('Enables or disables the SNMP trap if the power warning level is exceeded.')
mTotalCurrentWarningEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 77, 1, 1, 10082), EVENTFLAGS()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mTotalCurrentWarningEvent.setStatus('current')
if mibBuilder.loadTexts: mTotalCurrentWarningEvent.setDescription('Enables or disables the SNMP trap if the total outlet current warning level is exceeded.')
mTotalPowerWarningEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 77, 1, 1, 10084), EVENTFLAGS()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mTotalPowerWarningEvent.setStatus('current')
if mibBuilder.loadTexts: mTotalPowerWarningEvent.setDescription('Enables or disables the SNMP trap if the total power warning level is exceeded.')
mVoltageWarningEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 77, 1, 1, 10086), EVENTFLAGS()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mVoltageWarningEvent.setStatus('current')
if mibBuilder.loadTexts: mVoltageWarningEvent.setDescription('Enables or disables the SNMP trap if the voltage warning level is exceeded.')
mTemperatureWarningEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 77, 1, 1, 10087), EVENTFLAGS()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mTemperatureWarningEvent.setStatus('current')
if mibBuilder.loadTexts: mTemperatureWarningEvent.setDescription('Enables or disables the SNMP trap if the temperature warning level is exceeded.')
mDisplayBrightness = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 77, 1, 1, 10098), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mDisplayBrightness.setStatus('current')
if mibBuilder.loadTexts: mDisplayBrightness.setDescription('Gets, sets or defaults the display brightness (if supported).')
mECSServerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 77, 1, 1, 10106), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mECSServerPort.setStatus('current')
if mibBuilder.loadTexts: mECSServerPort.setDescription('Gets, sets or defaults the ECS (Energy Cloud Sentinel) server port.')
mExternalSensorLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 77, 1, 1, 10109), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mExternalSensorLabel.setStatus('current')
if mibBuilder.loadTexts: mExternalSensorLabel.setDescription('Gets, sets or defaults the external sensor label. External sensors can be connected to Energy Sensors.')
mHttpsOnly = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 77, 1, 1, 10127), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mHttpsOnly.setStatus('current')
if mibBuilder.loadTexts: mHttpsOnly.setDescription('Enables or disables the use of HTTPS (secure HTTP). Set to 1 to enable HTTPS only, or 0 to also enable HTTP.')
mTelnetSsl = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 77, 1, 1, 10128), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mTelnetSsl.setStatus('current')
if mibBuilder.loadTexts: mTelnetSsl.setDescription('Enables or disables the use of Telnet SSL (secure Telnet). Set to 1 to enable Telnet SSL, or 0 to disable Telnet SSL).')
mCookieTimeToLive = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 77, 1, 1, 10130), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('min').setMaxAccess("readwrite")
if mibBuilder.loadTexts: mCookieTimeToLive.setStatus('current')
if mibBuilder.loadTexts: mCookieTimeToLive.setDescription('The TTL (Time To Live) of the website cookie. (unit: min)')
mLineCurrentWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 77, 1, 1, 10131), Uthousandth().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: mLineCurrentWarningThreshold.setStatus('current')
if mibBuilder.loadTexts: mLineCurrentWarningThreshold.setDescription('Gets, sets the warning threshold of the linecurrent. (unit: 0.001A)')
mLineCurrentOffThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 77, 1, 1, 10132), Uthousandth().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: mLineCurrentOffThreshold.setStatus('current')
if mibBuilder.loadTexts: mLineCurrentOffThreshold.setDescription('Gets, sets the off threshold of the linecurrent. (unit: 0.001A)')
mLineCurrentWarningEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 77, 1, 1, 10133), EVENTFLAGS()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mLineCurrentWarningEvent.setStatus('current')
if mibBuilder.loadTexts: mLineCurrentWarningEvent.setDescription('Enables or disables the SNMP trap if the linecurrent warning level is exceeded.')
mLineCurrentOffEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 77, 1, 1, 10134), EVENTFLAGS()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mLineCurrentOffEvent.setStatus('current')
if mibBuilder.loadTexts: mLineCurrentOffEvent.setDescription('Enables or disables the SNMP trap if the linecurrent off level is exceeded.')
mFuseCurrentWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 77, 1, 1, 10142), Uthousandth().subtype(subtypeSpec=ValueRangeConstraint(0, 32000))).setUnits('A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: mFuseCurrentWarningThreshold.setStatus('current')
if mibBuilder.loadTexts: mFuseCurrentWarningThreshold.setDescription('Gets, sets or defaults the maximum current warning threshold per fuse. (unit: 0.001A)')
mFuseCurrentOffThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 77, 1, 1, 10143), Uthousandth().subtype(subtypeSpec=ValueRangeConstraint(0, 32000))).setUnits('A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: mFuseCurrentOffThreshold.setStatus('current')
if mibBuilder.loadTexts: mFuseCurrentOffThreshold.setDescription('Gets, sets or defaults the maximum current off threshold per fuse. (unit: 0.001A)')
mFuseCurrentWarningEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 77, 1, 1, 10144), EVENTFLAGS()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mFuseCurrentWarningEvent.setStatus('current')
if mibBuilder.loadTexts: mFuseCurrentWarningEvent.setDescription('Enables or disables the SNMP trap if the fusecurrent warning threshold is exceeded.')
mFuseCurrentOffEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 77, 1, 1, 10145), EVENTFLAGS()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mFuseCurrentOffEvent.setStatus('current')
if mibBuilder.loadTexts: mFuseCurrentOffEvent.setDescription('Enables or disables the SNMP trap if the fusecurrent off threshold is exceeded.')
mDeviceID = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 77, 1, 1, 10150), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mDeviceID.setStatus('current')
if mibBuilder.loadTexts: mDeviceID.setDescription('The ID of the device.')
mDeviceVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 77, 1, 1, 10151), Version()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mDeviceVersion.setStatus('current')
if mibBuilder.loadTexts: mDeviceVersion.setDescription('The version of the device.')
mSysName = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 77, 1, 1, 10152), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mSysName.setStatus('current')
if mibBuilder.loadTexts: mSysName.setDescription('The full name of the device.')
mElectricalTopology = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 77, 1, 1, 10153), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mElectricalTopology.setStatus('current')
if mibBuilder.loadTexts: mElectricalTopology.setDescription('Gets the electrical topology of the unit.')
mFusePortTopology = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 77, 1, 1, 10154), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mFusePortTopology.setStatus('current')
if mibBuilder.loadTexts: mFusePortTopology.setDescription('Gets the topology between the outlets and fuses.')
mLineFuseTopology = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 77, 1, 1, 10155), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mLineFuseTopology.setStatus('current')
if mibBuilder.loadTexts: mLineFuseTopology.setDescription('Gets the topology between the inlet (cable or connection) and the fuses.')
mSSOIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 77, 1, 1, 10156), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mSSOIPAddress.setStatus('current')
if mibBuilder.loadTexts: mSSOIPAddress.setDescription('Gets, sets the IP address of an SSO (Smart Style Office).')
mSSOLoginCredentials = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 77, 1, 1, 10157), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mSSOLoginCredentials.setStatus('current')
if mibBuilder.loadTexts: mSSOLoginCredentials.setDescription('Gets, sets the login credentials of an SSO (Smart Style Office).')
mSSOGracefullShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 77, 1, 1, 10158), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mSSOGracefullShutdown.setStatus('current')
if mibBuilder.loadTexts: mSSOGracefullShutdown.setDescription("Gets, sets the string to send if the UPS' battery level is below the set threshold.")
mUPSWarningLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 77, 1, 1, 10159), Utenth().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mUPSWarningLevel.setStatus('current')
if mibBuilder.loadTexts: mUPSWarningLevel.setDescription('Gets, sets or defaults the graceful shutdown threshold of a UPS.')
mUPSOffLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 77, 1, 1, 10160), Utenth().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mUPSOffLevel.setStatus('current')
if mibBuilder.loadTexts: mUPSOffLevel.setDescription('Gets, sets or defaults the threshold of a UPS to set outlets off.')
mMaxHighCurrentWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 77, 1, 1, 10165), Stenth().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setUnits('A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: mMaxHighCurrentWarning.setStatus('current')
if mibBuilder.loadTexts: mMaxHighCurrentWarning.setDescription('Gets sets or defaults the maximum high current warning level. (unit: 0.1A)')
mUpsMonitoringProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 77, 1, 1, 10167), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mUpsMonitoringProtocol.setStatus('current')
if mibBuilder.loadTexts: mUpsMonitoringProtocol.setDescription('Disables/Enables UPS monitoring and selects the protocol used for UPS monitoring. 0 = Disabled; 1 = Use old APC protocol')
mUpsEmergencyThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 77, 1, 1, 10168), Utenth().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setUnits('%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: mUpsEmergencyThreshold.setStatus('current')
if mibBuilder.loadTexts: mUpsEmergencyThreshold.setDescription('When the UPS battery level goes below this threshold a shutdown request will be sent to all agents (unit: 0.1%)')
mUpsRecoveryThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 77, 1, 1, 10169), Utenth().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setUnits('%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: mUpsRecoveryThreshold.setStatus('current')
if mibBuilder.loadTexts: mUpsRecoveryThreshold.setDescription('When the UPS battery level goes above this threshold a outlets will be powered on as configured by the user (unit: 0.1%)')
mUpsEventFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 77, 1, 1, 10170), EVENTFLAGS()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mUpsEventFlags.setStatus('current')
if mibBuilder.loadTexts: mUpsEventFlags.setDescription('Event flags for events related to the UPS monitoring')
mRecoveryPowerThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 77, 1, 1, 10171), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(20, 4000))).setUnits('W').setMaxAccess("readwrite")
if mibBuilder.loadTexts: mRecoveryPowerThreshold.setStatus('current')
if mibBuilder.loadTexts: mRecoveryPowerThreshold.setDescription('When the UPS was on battery and it went below UPSEMERGTHRES, the outlets that have a load below the RECOVPOWERTHRES will be power cycled once the UPS is back on mains power and exceeds UPSRECOVTHRES (unit: W)')
mMinHighCurrentWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 77, 1, 1, 10176), Stenth().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setUnits('A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: mMinHighCurrentWarning.setStatus('current')
if mibBuilder.loadTexts: mMinHighCurrentWarning.setDescription('Gets sets or defaults the minimum high current warning level. (unit: 0.1A)')
mMinHighPowerWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 77, 1, 1, 10177), Shundredth().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setUnits('kW').setMaxAccess("readwrite")
if mibBuilder.loadTexts: mMinHighPowerWarning.setStatus('current')
if mibBuilder.loadTexts: mMinHighPowerWarning.setDescription('Gets sets or defaults the power min high current warning level. (unit: 0.01kW)')
mMaxHighPowerWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 77, 1, 1, 10178), Shundredth().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setUnits('kW').setMaxAccess("readwrite")
if mibBuilder.loadTexts: mMaxHighPowerWarning.setStatus('current')
if mibBuilder.loadTexts: mMaxHighPowerWarning.setDescription('Gets sets or defaults the power max high current warning level. (unit: 0.01kW)')
mHeartbeatInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 77, 1, 1, 10179), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: mHeartbeatInterval.setStatus('current')
if mibBuilder.loadTexts: mHeartbeatInterval.setDescription('Interval (in seconds) between 2 heartbeat SNMP traps, Set to 0 to disable (unit: s)')
mMinTotalHighCurrentWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 77, 1, 1, 10180), Stenth().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setUnits('A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: mMinTotalHighCurrentWarning.setStatus('current')
if mibBuilder.loadTexts: mMinTotalHighCurrentWarning.setDescription('Gets sets or defaults the maximum high current warning level. (unit: 0.1A)')
mMaxTotalHighCurrentWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 77, 1, 1, 10181), Stenth().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setUnits('A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: mMaxTotalHighCurrentWarning.setStatus('current')
if mibBuilder.loadTexts: mMaxTotalHighCurrentWarning.setDescription('Gets sets or defaults the maximum high current warning level. (unit: 0.1A)')
mMinTotalHighPowerWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 77, 1, 1, 10182), Shundredth().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setUnits('kW').setMaxAccess("readwrite")
if mibBuilder.loadTexts: mMinTotalHighPowerWarning.setStatus('current')
if mibBuilder.loadTexts: mMinTotalHighPowerWarning.setDescription('Gets sets or defaults the power min high current warning level. (unit: 0.01kW)')
mMaxTotalHighPowerWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 77, 1, 1, 10183), Shundredth().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setUnits('kW').setMaxAccess("readwrite")
if mibBuilder.loadTexts: mMaxTotalHighPowerWarning.setStatus('current')
if mibBuilder.loadTexts: mMaxTotalHighPowerWarning.setDescription('Gets sets or defaults the power max high current warning level. (unit: 0.01kW)')
mCloudState = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 77, 1, 1, 10208), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mCloudState.setStatus('current')
if mibBuilder.loadTexts: mCloudState.setDescription('Set if the device needs to push info to the init cloud (val=0) or to the normal cloud (val=1)')
mSensorBias = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 77, 1, 1, 10210), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setUnits('mV').setMaxAccess("readwrite")
if mibBuilder.loadTexts: mSensorBias.setStatus('current')
if mibBuilder.loadTexts: mSensorBias.setDescription('get or set the DC sensor bias (unit: mV)')
mDaisyChainDeviceMode = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 77, 1, 1, 10211), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mDaisyChainDeviceMode.setStatus('current')
if mibBuilder.loadTexts: mDaisyChainDeviceMode.setDescription('allowed modes: 0: standalone (master without daisy chain slaves) 1: daisy chain master 2: daisy chain slave 1 3: daisy chain slave 2 4: daisy chain slave 3')
mSNMPTrapUser = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 77, 1, 1, 10212), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mSNMPTrapUser.setStatus('current')
if mibBuilder.loadTexts: mSNMPTrapUser.setDescription('Gets, sets or defaults the SNMP tap user out of the user list.')
mUSMUser = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 77, 1, 1, 10213), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mUSMUser.setStatus('current')
if mibBuilder.loadTexts: mUSMUser.setDescription('Gets, sets or defaults the SNMP USM security user')
mUSMAuthPassphrase = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 77, 1, 1, 10214), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mUSMAuthPassphrase.setStatus('current')
if mibBuilder.loadTexts: mUSMAuthPassphrase.setDescription('Gets, sets or defaults the SNMP USM authentication passphrase (Always MD5)')
mUSMPrivPassphrase = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 77, 1, 1, 10215), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mUSMPrivPassphrase.setStatus('current')
if mibBuilder.loadTexts: mUSMPrivPassphrase.setDescription('Gets, sets or defaults the SNMP USM private passphrase (Always AES)')
mSNMPV2GetSetEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 77, 1, 1, 10216), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mSNMPV2GetSetEnable.setStatus('current')
if mibBuilder.loadTexts: mSNMPV2GetSetEnable.setDescription('Gets, sets or defaults the SNMP V2 Enable for get ,set or walk but not for traps.')
mSNMPV3GetSetEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 77, 1, 1, 10217), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mSNMPV3GetSetEnable.setStatus('current')
if mibBuilder.loadTexts: mSNMPV3GetSetEnable.setDescription('Gets, sets or defaults the SNMP V3 Enable for get ,set or walk but not for traps.')
mUSMAuthPassphraseLength = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 77, 1, 1, 10218), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mUSMAuthPassphraseLength.setStatus('current')
if mibBuilder.loadTexts: mUSMAuthPassphraseLength.setDescription('Gets, sets or defaults the SNMP USM authentication passphrase length')
mUSMPrivPassphraseLength = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 77, 1, 1, 10219), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mUSMPrivPassphraseLength.setStatus('current')
if mibBuilder.loadTexts: mUSMPrivPassphraseLength.setDescription('Gets, sets or defaults the SNMP USM private passphrase length')
mSNMPTrapEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 77, 1, 1, 10222), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mSNMPTrapEnable.setStatus('current')
if mibBuilder.loadTexts: mSNMPTrapEnable.setDescription('Gets, sets or defaults the SNMP Trap Enable per trap account')
mLDAPAttribute = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 77, 1, 1, 10227), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mLDAPAttribute.setStatus('current')
if mibBuilder.loadTexts: mLDAPAttribute.setDescription('Attribute linked to the LDAPFilter')
mLDAPPath = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 77, 1, 1, 10228), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mLDAPPath.setStatus('current')
if mibBuilder.loadTexts: mLDAPPath.setDescription('Relative Path to be used for the LDAPFilter')
mLDAPAdminGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 77, 1, 1, 10229), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mLDAPAdminGroupName.setStatus('current')
if mibBuilder.loadTexts: mLDAPAdminGroupName.setDescription('GroupName for Admin Credentials in LDAP')
mLDAPRestrictedGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 77, 1, 1, 10230), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mLDAPRestrictedGroupName.setStatus('current')
if mibBuilder.loadTexts: mLDAPRestrictedGroupName.setDescription('GroupName for Restricted Credentials in LDAP')
mLDAPGuestGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 77, 1, 1, 10231), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mLDAPGuestGroupName.setStatus('current')
if mibBuilder.loadTexts: mLDAPGuestGroupName.setDescription('GroupName for Guest Credentials in LDAP')
mLDAPEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 77, 1, 1, 10232), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mLDAPEnable.setStatus('current')
if mibBuilder.loadTexts: mLDAPEnable.setDescription('Enable or disable login via LDAP credentials')
mLDAPLoginWrapper = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 77, 1, 1, 10233), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mLDAPLoginWrapper.setStatus('current')
if mibBuilder.loadTexts: mLDAPLoginWrapper.setDescription('Wrapper for login in with LDAP')
mLDAPServer = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 77, 1, 1, 10235), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mLDAPServer.setStatus('current')
if mibBuilder.loadTexts: mLDAPServer.setDescription('NO_INFO')
mLocalAuthEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 77, 1, 1, 10236), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mLocalAuthEnable.setStatus('current')
if mibBuilder.loadTexts: mLocalAuthEnable.setDescription('Set if local authentication is still possible if LDAP is enabled')
powerModule = MibIdentifier((1, 3, 6, 1, 4, 1, 34097, 9, 80))
ePowerTable = MibTable((1, 3, 6, 1, 4, 1, 34097, 9, 80, 1), )
if mibBuilder.loadTexts: ePowerTable.setStatus('current')
if mibBuilder.loadTexts: ePowerTable.setDescription('NO_INFO')
ePowerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 34097, 9, 80, 1, 1), ).setIndexNames((0, "ES-RACKTIVITY-MIB", "powerModuleIndex"), (0, "ES-RACKTIVITY-MIB", "powerIndex"))
if mibBuilder.loadTexts: ePowerEntry.setStatus('current')
if mibBuilder.loadTexts: ePowerEntry.setDescription('NO_INFO')
powerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 80, 1, 1, 65537), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: powerIndex.setStatus('current')
if mibBuilder.loadTexts: powerIndex.setDescription('Index for the selected Power Module')
powerModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 80, 1, 1, 65538), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: powerModuleIndex.setStatus('current')
if mibBuilder.loadTexts: powerModuleIndex.setDescription('Selected Power Module')
pGeneralModuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 80, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pGeneralModuleStatus.setStatus('current')
if mibBuilder.loadTexts: pGeneralModuleStatus.setDescription('General status of a module.')
pSpecificModuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 80, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pSpecificModuleStatus.setStatus('current')
if mibBuilder.loadTexts: pSpecificModuleStatus.setDescription('Specific status of a module.')
pCurrentTime = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 80, 1, 1, 3), TimeTicks()).setUnits('UNIX').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pCurrentTime.setStatus('current')
if mibBuilder.loadTexts: pCurrentTime.setDescription('Gets or sets the current time (not possible when NTP is enabled). (unit: UNIX)')
pVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 80, 1, 1, 4), Uhundredth()).setUnits('V').setMaxAccess("readonly")
if mibBuilder.loadTexts: pVoltage.setStatus('current')
if mibBuilder.loadTexts: pVoltage.setDescription('Gets the voltage of a power module. (unit: 0.01V)')
pFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 80, 1, 1, 5), Uthousandth()).setUnits('Hz').setMaxAccess("readonly")
if mibBuilder.loadTexts: pFrequency.setStatus('current')
if mibBuilder.loadTexts: pFrequency.setDescription('Gets the frequency of the input voltage of a power module. (unit: 0.001Hz)')
pCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 80, 1, 1, 6), Uthousandth()).setUnits('A').setMaxAccess("readonly")
if mibBuilder.loadTexts: pCurrent.setStatus('current')
if mibBuilder.loadTexts: pCurrent.setDescription('Gets the current of an outlet. (unit: 0.001A)')
pPower = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 80, 1, 1, 7), Unsigned32()).setUnits('W').setMaxAccess("readonly")
if mibBuilder.loadTexts: pPower.setStatus('current')
if mibBuilder.loadTexts: pPower.setDescription('Gets the power of an outlet. (unit: W)')
pStatePortCur = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 80, 1, 1, 8), CURPORTSTATE()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pStatePortCur.setStatus('current')
if mibBuilder.loadTexts: pStatePortCur.setDescription('Gets the current state of an outlet. To toggle an outlet use PORTSTAT (CLI) or pPortstate (SNMP) (GUID 10035) instead.')
pActiveEnergy = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 80, 1, 1, 9), Uthousandth()).setUnits('kWh').setMaxAccess("readonly")
if mibBuilder.loadTexts: pActiveEnergy.setStatus('current')
if mibBuilder.loadTexts: pActiveEnergy.setDescription('Gets the energy used by an outlet. (unit: 0.001kWh)')
pApparentEnergy = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 80, 1, 1, 10), Uthousandth()).setUnits('kVAh').setMaxAccess("readonly")
if mibBuilder.loadTexts: pApparentEnergy.setStatus('current')
if mibBuilder.loadTexts: pApparentEnergy.setDescription('Gets the apparent energy used by an outlet. (unit: 0.001kVAh)')
pTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 80, 1, 1, 11), Utenth()).setUnits('K').setMaxAccess("readonly")
if mibBuilder.loadTexts: pTemperature.setStatus('current')
if mibBuilder.loadTexts: pTemperature.setDescription('Gets the current temperature of a temperature sensor. (unit: 0.1K)')
pApparentPower = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 80, 1, 1, 15), Unsigned32()).setUnits('VA').setMaxAccess("readonly")
if mibBuilder.loadTexts: pApparentPower.setStatus('current')
if mibBuilder.loadTexts: pApparentPower.setDescription('Gets the apparent power of an outlet. (unit: VA)')
pPowerFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 80, 1, 1, 16), Unsigned32()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: pPowerFactor.setStatus('current')
if mibBuilder.loadTexts: pPowerFactor.setDescription('Gets the power factor of an outlet. (unit: %)')
pTotalCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 80, 1, 1, 17), Uthousandth()).setUnits('A').setMaxAccess("readonly")
if mibBuilder.loadTexts: pTotalCurrent.setStatus('current')
if mibBuilder.loadTexts: pTotalCurrent.setDescription('Gets the total current of a power module. (unit: 0.001A)')
pTotalRealPower = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 80, 1, 1, 18), Unsigned32()).setUnits('W').setMaxAccess("readonly")
if mibBuilder.loadTexts: pTotalRealPower.setStatus('current')
if mibBuilder.loadTexts: pTotalRealPower.setDescription('Gets the total power level of a power module. (unit: W)')
pTotalApparentPower = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 80, 1, 1, 19), Unsigned32()).setUnits('VA').setMaxAccess("readonly")
if mibBuilder.loadTexts: pTotalApparentPower.setStatus('current')
if mibBuilder.loadTexts: pTotalApparentPower.setDescription('Gets the total apparent power of a power module. (unit: VA)')
pTotalActiveEnergy = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 80, 1, 1, 20), Uthousandth()).setUnits('kWh').setMaxAccess("readonly")
if mibBuilder.loadTexts: pTotalActiveEnergy.setStatus('current')
if mibBuilder.loadTexts: pTotalActiveEnergy.setDescription('Gets the total energy of a power module. (unit: 0.001kWh)')
pTotalApparentEnergy = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 80, 1, 1, 21), Uthousandth()).setUnits('kVAh').setMaxAccess("readonly")
if mibBuilder.loadTexts: pTotalApparentEnergy.setStatus('current')
if mibBuilder.loadTexts: pTotalApparentEnergy.setDescription('Gets the total apparent energy of a power module. (unit: 0.001kVAh)')
pTotalPowerFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 80, 1, 1, 22), Unsigned32()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: pTotalPowerFactor.setStatus('current')
if mibBuilder.loadTexts: pTotalPowerFactor.setDescription('Gets the total power factor of a power module. (unit: %)')
pTimeOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 80, 1, 1, 24), Unsigned32()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: pTimeOnline.setStatus('current')
if mibBuilder.loadTexts: pTimeOnline.setDescription('Gets the amount of seconds since the last reset. (unit: s)')
pTotalHarmonicDistortion = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 80, 1, 1, 50), Utenth().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: pTotalHarmonicDistortion.setStatus('current')
if mibBuilder.loadTexts: pTotalHarmonicDistortion.setDescription('total harmonic distortion - outlet (unit: 0.1%)')
pPhase = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 80, 1, 1, 51), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('degr').setMaxAccess("readonly")
if mibBuilder.loadTexts: pPhase.setStatus('current')
if mibBuilder.loadTexts: pPhase.setDescription('the phase between 2 waves (unit: degr)')
pBigCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 80, 1, 1, 52), Unsigned32()).setUnits('A').setMaxAccess("readonly")
if mibBuilder.loadTexts: pBigCurrent.setStatus('current')
if mibBuilder.loadTexts: pBigCurrent.setDescription('Gets the current of an outlet. (unit: 0.0001A)')
pBigPower = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 80, 1, 1, 53), Uthousandth()).setUnits('W').setMaxAccess("readonly")
if mibBuilder.loadTexts: pBigPower.setStatus('current')
if mibBuilder.loadTexts: pBigPower.setDescription('Gets the power of an outlet. (unit: 0.001W)')
pBigApparentPower = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 80, 1, 1, 54), Uthousandth()).setUnits('VA').setMaxAccess("readonly")
if mibBuilder.loadTexts: pBigApparentPower.setStatus('current')
if mibBuilder.loadTexts: pBigApparentPower.setDescription('Gets the apparent power of an outlet. (unit: 0.001VA)')
pDetectedPhase = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 80, 1, 1, 55), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pDetectedPhase.setStatus('current')
if mibBuilder.loadTexts: pDetectedPhase.setDescription('Gives the best matching Phase per currentsensor. Updated every 8s. returnes 255 if no good phaselink is found')
pModuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 80, 1, 1, 10001), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pModuleName.setStatus('current')
if mibBuilder.loadTexts: pModuleName.setDescription('Gets, sets or defaults the module name.')
pFirmwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 80, 1, 1, 10002), Version()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pFirmwareVersion.setStatus('current')
if mibBuilder.loadTexts: pFirmwareVersion.setDescription("Gets the version of the module's firmware.")
pHardwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 80, 1, 1, 10003), Version()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pHardwareVersion.setStatus('current')
if mibBuilder.loadTexts: pHardwareVersion.setDescription("Gets the version of a module's hardware.")
pFirmwareID = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 80, 1, 1, 10004), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pFirmwareID.setStatus('current')
if mibBuilder.loadTexts: pFirmwareID.setDescription("Gets the ID of the module's firmware.")
pHardwareID = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 80, 1, 1, 10005), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pHardwareID.setStatus('current')
if mibBuilder.loadTexts: pHardwareID.setDescription("Gets the ID of a module's hardware.")
pPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 80, 1, 1, 10034), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pPortName.setStatus('current')
if mibBuilder.loadTexts: pPortName.setDescription('Gets, sets or defaults the name of an outlet.')
pPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 80, 1, 1, 10035), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pPortState.setStatus('current')
if mibBuilder.loadTexts: pPortState.setDescription('Sets the state of an outlet: 0=OFF, 1=ON, 2=POWER CYCLE. To get the state of an outlet use CPORTSTAT (CLI) or pStatePortCur (SNMP) (GUID 8) instead.')
pCurrentPriorOff = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 80, 1, 1, 10036), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pCurrentPriorOff.setStatus('current')
if mibBuilder.loadTexts: pCurrentPriorOff.setDescription('Gets, sets or defaults the priority of an outlet. Priority settings are used when 1 or more outlets must be turned off because the total current of a power module was exceeded.')
pDelayOn = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 80, 1, 1, 10037), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pDelayOn.setStatus('current')
if mibBuilder.loadTexts: pDelayOn.setDescription('Gets, sets or defaults the outlet turn-on delay. Use this to reduce inrush current when the Energy Switch boots. (unit: s)')
pMaxCurrentOff = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 80, 1, 1, 10038), Uthousandth().subtype(subtypeSpec=ValueRangeConstraint(100, 8000))).setUnits('A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pMaxCurrentOff.setStatus('current')
if mibBuilder.loadTexts: pMaxCurrentOff.setDescription('Gets, sets or defaults the maximum current off level of an outlet. (unit: 0.001A)')
pMaxCurrentWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 80, 1, 1, 10039), Uthousandth().subtype(subtypeSpec=ValueRangeConstraint(100, 8000))).setUnits('A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pMaxCurrentWarning.setStatus('current')
if mibBuilder.loadTexts: pMaxCurrentWarning.setDescription('Gets, sets or defaults the maximum current warning level of an outlet. (unit: 0.001A)')
pMaxPowerOff = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 80, 1, 1, 10040), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(20, 2000))).setUnits('W').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pMaxPowerOff.setStatus('current')
if mibBuilder.loadTexts: pMaxPowerOff.setDescription('Gets, sets or defaults the maximum power off level of an outlet. (unit: W)')
pMaxPowerWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 80, 1, 1, 10041), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(20, 2000))).setUnits('W').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pMaxPowerWarning.setStatus('current')
if mibBuilder.loadTexts: pMaxPowerWarning.setDescription('Gets, sets or defaults the maximum power warning level of an outlet. (unit: W)')
pMaxTotalCurrentOff = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 80, 1, 1, 10042), Uthousandth().subtype(subtypeSpec=ValueRangeConstraint(100, 16000))).setUnits('A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pMaxTotalCurrentOff.setStatus('current')
if mibBuilder.loadTexts: pMaxTotalCurrentOff.setDescription('Gets, sets or defaults the total maximum current off level of a power module. (unit: 0.001A)')
pMaxTotalCurrentWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 80, 1, 1, 10043), Uthousandth().subtype(subtypeSpec=ValueRangeConstraint(100, 16000))).setUnits('A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pMaxTotalCurrentWarning.setStatus('current')
if mibBuilder.loadTexts: pMaxTotalCurrentWarning.setDescription('Gets, sets or defaults the total maximum current warning level of a power module. (unit: 0.001A)')
pMaxTotalPowerOff = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 80, 1, 1, 10044), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(20, 4000))).setUnits('W').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pMaxTotalPowerOff.setStatus('current')
if mibBuilder.loadTexts: pMaxTotalPowerOff.setDescription('Gets, sets or defaults the maximum total power off level. (unit: W)')
pMaxTotalPowerWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 80, 1, 1, 10045), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(20, 4000))).setUnits('W').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pMaxTotalPowerWarning.setStatus('current')
if mibBuilder.loadTexts: pMaxTotalPowerWarning.setDescription('Gets, sets or defaults the maximum total power warning level. (unit: W)')
pMaxVoltageWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 80, 1, 1, 10047), Uhundredth().subtype(subtypeSpec=ValueRangeConstraint(5000, 30000))).setUnits('V').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pMaxVoltageWarning.setStatus('current')
if mibBuilder.loadTexts: pMaxVoltageWarning.setDescription('Gets, sets or defaults the maximum voltage warning level. (unit: 0.01V)')
pMinVoltageWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 80, 1, 1, 10049), Uhundredth().subtype(subtypeSpec=ValueRangeConstraint(5000, 30000))).setUnits('V').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pMinVoltageWarning.setStatus('current')
if mibBuilder.loadTexts: pMinVoltageWarning.setDescription('Gets, sets or defaults the minimum voltage warning level. (unit: 0.01V)')
pMinTemperatureWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 80, 1, 1, 10052), Utenth().subtype(subtypeSpec=ValueRangeConstraint(2232, 4732))).setUnits('K').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pMinTemperatureWarning.setStatus('current')
if mibBuilder.loadTexts: pMinTemperatureWarning.setDescription('Gets, sets or defaults the minimum temperature warning level (use DEF accessor to reset). (unit: 0.1K)')
pMaxTemperatureWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 80, 1, 1, 10053), Utenth().subtype(subtypeSpec=ValueRangeConstraint(2232, 4732))).setUnits('K').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pMaxTemperatureWarning.setStatus('current')
if mibBuilder.loadTexts: pMaxTemperatureWarning.setDescription('Gets, sets or defaults the maximum temperature warning level (use DEF accessor to reset). (unit: 0.1K)')
pPortStateEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 80, 1, 1, 10076), EVENTFLAGS()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pPortStateEvent.setStatus('current')
if mibBuilder.loadTexts: pPortStateEvent.setDescription('Enables or disables the SNMP trap if the state of an outlet is changed.')
pCurrentOffEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 80, 1, 1, 10077), EVENTFLAGS()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pCurrentOffEvent.setStatus('current')
if mibBuilder.loadTexts: pCurrentOffEvent.setDescription('Enables or disables the SNMP trap if the outlet current off level is exceeded.')
pCurrentWarningEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 80, 1, 1, 10078), EVENTFLAGS()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pCurrentWarningEvent.setStatus('current')
if mibBuilder.loadTexts: pCurrentWarningEvent.setDescription('Enables or disables the SNMP trap if the outlet current warning level is exceeded.')
pPowerOffEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 80, 1, 1, 10079), EVENTFLAGS()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pPowerOffEvent.setStatus('current')
if mibBuilder.loadTexts: pPowerOffEvent.setDescription('Enables or disables the SNMP trap if the power off level is exceeded.')
pPowerWarningEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 80, 1, 1, 10080), EVENTFLAGS()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pPowerWarningEvent.setStatus('current')
if mibBuilder.loadTexts: pPowerWarningEvent.setDescription('Enables or disables the SNMP trap if the power warning level is exceeded.')
pTotalCurrentOffEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 80, 1, 1, 10081), EVENTFLAGS()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pTotalCurrentOffEvent.setStatus('current')
if mibBuilder.loadTexts: pTotalCurrentOffEvent.setDescription('Enables or disables the SNMP trap if the total outlet current off level is exceeded.')
pTotalCurrentWarningEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 80, 1, 1, 10082), EVENTFLAGS()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pTotalCurrentWarningEvent.setStatus('current')
if mibBuilder.loadTexts: pTotalCurrentWarningEvent.setDescription('Enables or disables the SNMP trap if the total outlet current warning level is exceeded.')
pTotalPowerOffEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 80, 1, 1, 10083), EVENTFLAGS()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pTotalPowerOffEvent.setStatus('current')
if mibBuilder.loadTexts: pTotalPowerOffEvent.setDescription('Enables or disables the SNMP trap if the total power off level is exceeded.')
pTotalPowerWarningEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 80, 1, 1, 10084), EVENTFLAGS()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pTotalPowerWarningEvent.setStatus('current')
if mibBuilder.loadTexts: pTotalPowerWarningEvent.setDescription('Enables or disables the SNMP trap if the total power warning level is exceeded.')
pVoltageWarningEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 80, 1, 1, 10086), EVENTFLAGS()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pVoltageWarningEvent.setStatus('current')
if mibBuilder.loadTexts: pVoltageWarningEvent.setDescription('Enables or disables the SNMP trap if the voltage warning level is exceeded.')
pTemperatureWarningEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 80, 1, 1, 10087), EVENTFLAGS()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pTemperatureWarningEvent.setStatus('current')
if mibBuilder.loadTexts: pTemperatureWarningEvent.setDescription('Enables or disables the SNMP trap if the temperature warning level is exceeded.')
pMaxOverheatingOff = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 80, 1, 1, 10090), Utenth().subtype(subtypeSpec=ValueRangeConstraint(2232, 4732))).setUnits('K').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pMaxOverheatingOff.setStatus('current')
if mibBuilder.loadTexts: pMaxOverheatingOff.setDescription('Gets, sets or defaults the maximum overheat temperature off level. (unit: 0.1K)')
pOverheatingOffEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 80, 1, 1, 10091), EVENTFLAGS()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pOverheatingOffEvent.setStatus('current')
if mibBuilder.loadTexts: pOverheatingOffEvent.setDescription('Enables or disables the SNMP trap if the overtemperature off level is exceeded.')
pPowerCycleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 80, 1, 1, 10099), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pPowerCycleTime.setStatus('current')
if mibBuilder.loadTexts: pPowerCycleTime.setDescription('Gets, sets or defaults the time interval that is used to do a power cycle of an outlet. (unit: s)')
pExternalSensorLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 80, 1, 1, 10109), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pExternalSensorLabel.setStatus('current')
if mibBuilder.loadTexts: pExternalSensorLabel.setDescription('Gets, sets or defaults the external sensor label. External sensors can be connected to Energy Sensors.')
pMaxOverheatingWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 80, 1, 1, 10121), Utenth().subtype(subtypeSpec=ValueRangeConstraint(2232, 4732))).setUnits('K').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pMaxOverheatingWarning.setStatus('current')
if mibBuilder.loadTexts: pMaxOverheatingWarning.setDescription('Gets, sets or defaults the overheating temperature warning level. (unit: 0.1K)')
pOverheatingWarningEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 80, 1, 1, 10122), EVENTFLAGS()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pOverheatingWarningEvent.setStatus('current')
if mibBuilder.loadTexts: pOverheatingWarningEvent.setDescription('Enables or disables the SNMP trap if the overheat warning level is exceeded.')
pMicroIntTimeThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 80, 1, 1, 10135), Utenth().subtype(subtypeSpec=ValueRangeConstraint(10, 65535))).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pMicroIntTimeThreshold.setStatus('current')
if mibBuilder.loadTexts: pMicroIntTimeThreshold.setDescription('The minimum time the voltage must be interrupted before it is seen as a micro interruption (unit: 0.1ms)')
pMicroIntEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 80, 1, 1, 10136), EVENTFLAGS()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pMicroIntEvent.setStatus('current')
if mibBuilder.loadTexts: pMicroIntEvent.setDescription('Enables or disables the SNMP trap if a microinterruption on the voltage is detected.')
pSoftFuseCurrentThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 80, 1, 1, 10137), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setUnits('A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSoftFuseCurrentThreshold.setStatus('current')
if mibBuilder.loadTexts: pSoftFuseCurrentThreshold.setDescription('The threshold of the soft fuse is a factor of the maximum nominal current off (unit: A)')
pSoftFuseDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 80, 1, 1, 10138), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSoftFuseDelay.setStatus('current')
if mibBuilder.loadTexts: pSoftFuseDelay.setDescription('The minimum time the current of an outlet must be above the soft fuse current threshold to switch it off. (unit: ms)')
pSoftFuseEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 80, 1, 1, 10139), EVENTFLAGS()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSoftFuseEvent.setStatus('current')
if mibBuilder.loadTexts: pSoftFuseEvent.setDescription('Enables or disables the SNMP trap if a soft fuse is triggered.')
pPhaseShiftEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 80, 1, 1, 10140), EVENTFLAGS()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pPhaseShiftEvent.setStatus('current')
if mibBuilder.loadTexts: pPhaseShiftEvent.setDescription('Enables or disables the SNMP trap if a phase shift on the voltage is detected.')
pSchedulePortOnTime = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 80, 1, 1, 10146), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1439))).setUnits('min').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSchedulePortOnTime.setStatus('current')
if mibBuilder.loadTexts: pSchedulePortOnTime.setDescription('Gets, sets or defaults the time for the scheduler to turn on an outlet. (unit: min)')
pSchedulePortOffTime = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 80, 1, 1, 10147), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1439))).setUnits('min').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSchedulePortOffTime.setStatus('current')
if mibBuilder.loadTexts: pSchedulePortOffTime.setDescription('Gets, sets or defaults the time for the scheduler to turn off an outlet. (unit: min)')
pEnableSchedulePort = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 80, 1, 1, 10148), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pEnableSchedulePort.setStatus('current')
if mibBuilder.loadTexts: pEnableSchedulePort.setDescription('Enables or disables the scheduler on an outlet. When enabled the scheduling is repeated daily.')
pBlockSetPortOff = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 80, 1, 1, 10161), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pBlockSetPortOff.setStatus('current')
if mibBuilder.loadTexts: pBlockSetPortOff.setDescription('Prevent outlets to be set off (only delay on and powercycle are still possible).')
pSchedulePortChangeEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 80, 1, 1, 10166), EVENTFLAGS()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pSchedulePortChangeEvent.setStatus('current')
if mibBuilder.loadTexts: pSchedulePortChangeEvent.setDescription('event if a port has changed state because of the scheduler')
pAgentIP = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 80, 1, 1, 10172), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pAgentIP.setStatus('current')
if mibBuilder.loadTexts: pAgentIP.setDescription('IP address of the agent associated to this outlet')
pAgentPort = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 80, 1, 1, 10173), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pAgentPort.setStatus('current')
if mibBuilder.loadTexts: pAgentPort.setDescription('Network port on which the associated agent will listen')
pAgentCommunicationEventFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 80, 1, 1, 10174), EVENTFLAGS()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pAgentCommunicationEventFlags.setStatus('current')
if mibBuilder.loadTexts: pAgentCommunicationEventFlags.setDescription('Event flags for events related to agent communication')
pAlwaysOn = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 80, 1, 1, 10175), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pAlwaysOn.setStatus('current')
if mibBuilder.loadTexts: pAlwaysOn.setDescription('Outlets marked as Always On can only be power cycled by the user')
pGenericTransducerParameters = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 80, 1, 1, 10190), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2000, 2000000000))).setUnits('mA/V').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pGenericTransducerParameters.setStatus('current')
if mibBuilder.loadTexts: pGenericTransducerParameters.setDescription('sets the slope of the transducer transfer function when the generic transducer type is selected (unit: mA/V)')
pMaxBigCurrentWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 80, 1, 1, 10193), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(100, 400000000))).setUnits('A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pMaxBigCurrentWarning.setStatus('current')
if mibBuilder.loadTexts: pMaxBigCurrentWarning.setDescription('Gets, sets or defaults the maximum current warning level of an outlet. (unit: 0.0001A)')
pMaxBigPowerWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 80, 1, 1, 10194), Uthousandth().subtype(subtypeSpec=ValueRangeConstraint(2000, 2000000000))).setUnits('W').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pMaxBigPowerWarning.setStatus('current')
if mibBuilder.loadTexts: pMaxBigPowerWarning.setDescription('Gets, sets or defaults the maximum power warning level of an outlet. (unit: 0.001W)')
pGroupNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 80, 1, 1, 10195), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pGroupNumber.setStatus('current')
if mibBuilder.loadTexts: pGroupNumber.setDescription('Group number per port to group ports')
pPhaseLink = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 80, 1, 1, 10196), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pPhaseLink.setStatus('current')
if mibBuilder.loadTexts: pPhaseLink.setDescription('Link the current port with a voltage phase')
pCurrentSensorSelector = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 80, 1, 1, 10197), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pCurrentSensorSelector.setStatus('current')
if mibBuilder.loadTexts: pCurrentSensorSelector.setDescription('Selection of the currentsensor connected to port. To enter your own value you need to use 255 and fill in guid 10190.')
pMinBigCurrentWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 80, 1, 1, 10209), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 400000000))).setUnits('A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pMinBigCurrentWarning.setStatus('current')
if mibBuilder.loadTexts: pMinBigCurrentWarning.setDescription('Gets, sets or defaults the minimum current warning level of a port. (unit: 0.0001A)')
esnModule = MibIdentifier((1, 3, 6, 1, 4, 1, 34097, 9, 65))
eESNTable = MibTable((1, 3, 6, 1, 4, 1, 34097, 9, 65, 1), )
if mibBuilder.loadTexts: eESNTable.setStatus('current')
if mibBuilder.loadTexts: eESNTable.setDescription('Temperature Humidity Presure Airflow Waterleak')
eESNEntry = MibTableRow((1, 3, 6, 1, 4, 1, 34097, 9, 65, 1, 1), ).setIndexNames((0, "ES-RACKTIVITY-MIB", "esnModuleIndex"), (0, "ES-RACKTIVITY-MIB", "esnIndex"))
if mibBuilder.loadTexts: eESNEntry.setStatus('current')
if mibBuilder.loadTexts: eESNEntry.setDescription('Temperature Humidity Presure Airflow Waterleak')
esnIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 65, 1, 1, 65537), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: esnIndex.setStatus('current')
if mibBuilder.loadTexts: esnIndex.setDescription('Index for the selected ESN Module')
esnModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 65, 1, 1, 65538), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: esnModuleIndex.setStatus('current')
if mibBuilder.loadTexts: esnModuleIndex.setDescription('Selected ESN Module')
aGeneralModuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 65, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aGeneralModuleStatus.setStatus('current')
if mibBuilder.loadTexts: aGeneralModuleStatus.setDescription('General status of a module.')
aSpecificModuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 65, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aSpecificModuleStatus.setStatus('current')
if mibBuilder.loadTexts: aSpecificModuleStatus.setDescription('Specific status of a module.')
aCurrentTime = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 65, 1, 1, 3), TimeTicks()).setUnits('UNIX').setMaxAccess("readwrite")
if mibBuilder.loadTexts: aCurrentTime.setStatus('current')
if mibBuilder.loadTexts: aCurrentTime.setDescription('Gets or sets the current time (not possible when NTP is enabled). (unit: UNIX)')
aVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 65, 1, 1, 4), Uhundredth()).setUnits('V').setMaxAccess("readonly")
if mibBuilder.loadTexts: aVoltage.setStatus('current')
if mibBuilder.loadTexts: aVoltage.setDescription('Gets the voltage of a power module. (unit: 0.01V)')
aStatePortCur = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 65, 1, 1, 8), CURPORTSTATE()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aStatePortCur.setStatus('current')
if mibBuilder.loadTexts: aStatePortCur.setDescription('Gets the current state of an outlet. To toggle an outlet use PORTSTAT (CLI) or pPortstate (SNMP) (GUID 10035) instead.')
aTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 65, 1, 1, 11), Utenth()).setUnits('K').setMaxAccess("readonly")
if mibBuilder.loadTexts: aTemperature.setStatus('current')
if mibBuilder.loadTexts: aTemperature.setDescription('Gets the current temperature of a temperature sensor. (unit: 0.1K)')
aHumidity = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 65, 1, 1, 12), Utenth()).setUnits('RH').setMaxAccess("readonly")
if mibBuilder.loadTexts: aHumidity.setStatus('current')
if mibBuilder.loadTexts: aHumidity.setDescription('Gets the relative humidity. (unit: 0.1RH)')
aAirflow = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 65, 1, 1, 23), Utenth()).setUnits('m/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: aAirflow.setStatus('current')
if mibBuilder.loadTexts: aAirflow.setDescription('Gets the current airflow level. (unit: 0.1m/s)')
aDewPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 65, 1, 1, 25), Utenth().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('K').setMaxAccess("readonly")
if mibBuilder.loadTexts: aDewPoint.setStatus('current')
if mibBuilder.loadTexts: aDewPoint.setDescription('Gets the current dewpoint. Taking the current humidity into consideration, condensation will occur if the temperature drops below this level. (unit: 0.1K)')
aPressure = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 65, 1, 1, 26), Utenth()).setUnits('hPa').setMaxAccess("readonly")
if mibBuilder.loadTexts: aPressure.setStatus('current')
if mibBuilder.loadTexts: aPressure.setDescription('Gets the atmospheric pressure. (unit: 0.1hPa)')
aAnalogueInput = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 65, 1, 1, 27), Unsigned32()).setUnits('mV').setMaxAccess("readonly")
if mibBuilder.loadTexts: aAnalogueInput.setStatus('current')
if mibBuilder.loadTexts: aAnalogueInput.setDescription('Gets the value of an analog input (voltage). (unit: mV)')
aWaterleak = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 65, 1, 1, 28), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aWaterleak.setStatus('current')
if mibBuilder.loadTexts: aWaterleak.setDescription('Gets the current state of the water leak sensor.')
aMotionDetected = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 65, 1, 1, 29), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aMotionDetected.setStatus('current')
if mibBuilder.loadTexts: aMotionDetected.setDescription('Gets or resets whether motion has been detected.')
aIOPort = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 65, 1, 1, 30), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aIOPort.setStatus('current')
if mibBuilder.loadTexts: aIOPort.setDescription('Gets the state of a digital input.')
aHighCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 65, 1, 1, 41), Stenth().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setUnits('A').setMaxAccess("readonly")
if mibBuilder.loadTexts: aHighCurrent.setStatus('current')
if mibBuilder.loadTexts: aHighCurrent.setDescription('The current for high values (unit: 0.1A)')
aHighPower = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 65, 1, 1, 43), Shundredth().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setUnits('kW').setMaxAccess("readonly")
if mibBuilder.loadTexts: aHighPower.setStatus('current')
if mibBuilder.loadTexts: aHighPower.setDescription('The power for high values (unit: 0.01kW)')
aModuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 65, 1, 1, 10001), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aModuleName.setStatus('current')
if mibBuilder.loadTexts: aModuleName.setDescription('Gets, sets or defaults the module name.')
aFirmwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 65, 1, 1, 10002), Version()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aFirmwareVersion.setStatus('current')
if mibBuilder.loadTexts: aFirmwareVersion.setDescription("Gets the version of the module's firmware.")
aHardwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 65, 1, 1, 10003), Version()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aHardwareVersion.setStatus('current')
if mibBuilder.loadTexts: aHardwareVersion.setDescription("Gets the version of a module's hardware.")
aFirmwareID = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 65, 1, 1, 10004), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aFirmwareID.setStatus('current')
if mibBuilder.loadTexts: aFirmwareID.setDescription("Gets the ID of the module's firmware.")
aHardwareID = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 65, 1, 1, 10005), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aHardwareID.setStatus('current')
if mibBuilder.loadTexts: aHardwareID.setDescription("Gets the ID of a module's hardware.")
aDisplayTimeOn = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 65, 1, 1, 10032), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setUnits('min').setMaxAccess("readwrite")
if mibBuilder.loadTexts: aDisplayTimeOn.setStatus('current')
if mibBuilder.loadTexts: aDisplayTimeOn.setDescription('Gets, sets or defaults the display sleep timer. If the display is inactive for longer than this time, the display turns off to save power. Time is in minutes. (unit: min)')
aMaxVoltageWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 65, 1, 1, 10047), Uhundredth().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('V').setMaxAccess("readwrite")
if mibBuilder.loadTexts: aMaxVoltageWarning.setStatus('current')
if mibBuilder.loadTexts: aMaxVoltageWarning.setDescription('Gets, sets or defaults the maximum voltage warning level. (unit: 0.01V)')
aMinVoltageWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 65, 1, 1, 10049), Uhundredth().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('V').setMaxAccess("readwrite")
if mibBuilder.loadTexts: aMinVoltageWarning.setStatus('current')
if mibBuilder.loadTexts: aMinVoltageWarning.setDescription('Gets, sets or defaults the minimum voltage warning level. (unit: 0.01V)')
aMinTemperatureWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 65, 1, 1, 10052), Utenth().subtype(subtypeSpec=ValueRangeConstraint(2232, 4732))).setUnits('K').setMaxAccess("readwrite")
if mibBuilder.loadTexts: aMinTemperatureWarning.setStatus('current')
if mibBuilder.loadTexts: aMinTemperatureWarning.setDescription('Gets, sets or defaults the minimum temperature warning level (use DEF accessor to reset). (unit: 0.1K)')
aMaxTemperatureWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 65, 1, 1, 10053), Utenth().subtype(subtypeSpec=ValueRangeConstraint(2232, 4732))).setUnits('K').setMaxAccess("readwrite")
if mibBuilder.loadTexts: aMaxTemperatureWarning.setStatus('current')
if mibBuilder.loadTexts: aMaxTemperatureWarning.setDescription('Gets, sets or defaults the maximum temperature warning level (use DEF accessor to reset). (unit: 0.1K)')
aMinHumidityWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 65, 1, 1, 10054), Utenth().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setUnits('RH').setMaxAccess("readwrite")
if mibBuilder.loadTexts: aMinHumidityWarning.setStatus('current')
if mibBuilder.loadTexts: aMinHumidityWarning.setDescription('Gets, sets or defaults the minimum relative humidity warning level (use DEF accessor to reset). (unit: 0.1RH)')
aMaxHumidityWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 65, 1, 1, 10055), Utenth().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setUnits('RH').setMaxAccess("readwrite")
if mibBuilder.loadTexts: aMaxHumidityWarning.setStatus('current')
if mibBuilder.loadTexts: aMaxHumidityWarning.setDescription('Gets, sets or defaults the maximum relative humidity warning level (use DEF accessor to reset). (unit: 0.1RH)')
aCurrentWarningEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 65, 1, 1, 10078), EVENTFLAGS()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aCurrentWarningEvent.setStatus('current')
if mibBuilder.loadTexts: aCurrentWarningEvent.setDescription('Enables or disables the SNMP trap if the outlet current warning level is exceeded.')
aPowerWarningEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 65, 1, 1, 10080), EVENTFLAGS()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aPowerWarningEvent.setStatus('current')
if mibBuilder.loadTexts: aPowerWarningEvent.setDescription('Enables or disables the SNMP trap if the power warning level is exceeded.')
aVoltageWarningEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 65, 1, 1, 10086), EVENTFLAGS()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aVoltageWarningEvent.setStatus('current')
if mibBuilder.loadTexts: aVoltageWarningEvent.setDescription('Enables or disables the SNMP trap if the voltage warning level is exceeded.')
aTemperatureWarningEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 65, 1, 1, 10087), EVENTFLAGS()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aTemperatureWarningEvent.setStatus('current')
if mibBuilder.loadTexts: aTemperatureWarningEvent.setDescription('Enables or disables the SNMP trap if the temperature warning level is exceeded.')
aHumidityWarningEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 65, 1, 1, 10088), EVENTFLAGS()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aHumidityWarningEvent.setStatus('current')
if mibBuilder.loadTexts: aHumidityWarningEvent.setDescription('Enables or disables the SNMP trap if the humidity warning level is exceeded.')
aDewPointWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 65, 1, 1, 10092), Utenth().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('K').setMaxAccess("readwrite")
if mibBuilder.loadTexts: aDewPointWarning.setStatus('current')
if mibBuilder.loadTexts: aDewPointWarning.setDescription('Gets, sets or defaults the dewpoint warning level. If the temperature difference between the current temperature and the dewpoint temperature drops below this value, an event is generated. (unit: 0.1K)')
aDewPointWarningEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 65, 1, 1, 10093), EVENTFLAGS()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aDewPointWarningEvent.setStatus('current')
if mibBuilder.loadTexts: aDewPointWarningEvent.setDescription('Enables or disables the SNMP trap if the dewpoint warning level is exceeded.')
aDewPointViolationEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 65, 1, 1, 10094), EVENTFLAGS()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aDewPointViolationEvent.setStatus('current')
if mibBuilder.loadTexts: aDewPointViolationEvent.setDescription('Enables or disables the SNMP trap if the dewpoint temperature is reached.')
aPressureWarningEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 65, 1, 1, 10095), EVENTFLAGS()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aPressureWarningEvent.setStatus('current')
if mibBuilder.loadTexts: aPressureWarningEvent.setDescription('Enables or disables the SNMP trap if the atmospheric pressure warning level is exceeded.')
aMinPressureWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 65, 1, 1, 10096), Utenth().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('hPa').setMaxAccess("readwrite")
if mibBuilder.loadTexts: aMinPressureWarning.setStatus('current')
if mibBuilder.loadTexts: aMinPressureWarning.setDescription('Gets, sets or defaults the minimum atmospheric pressure warning level. (unit: 0.1hPa)')
aMaxPressureWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 65, 1, 1, 10097), Utenth().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('hPa').setMaxAccess("readwrite")
if mibBuilder.loadTexts: aMaxPressureWarning.setStatus('current')
if mibBuilder.loadTexts: aMaxPressureWarning.setDescription('Gets, sets or defaults the maximum atmospheric pressure warning level. (unit: 0.1hPa)')
aDisplayBrightness = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 65, 1, 1, 10098), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aDisplayBrightness.setStatus('current')
if mibBuilder.loadTexts: aDisplayBrightness.setDescription('Gets, sets or defaults the display brightness (if supported).')
aMotionSensitivity = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 65, 1, 1, 10107), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aMotionSensitivity.setStatus('current')
if mibBuilder.loadTexts: aMotionSensitivity.setDescription('Gets, sets or defaults the sensitivity of a motion sensor.')
aExternalSensorLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 65, 1, 1, 10109), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aExternalSensorLabel.setStatus('current')
if mibBuilder.loadTexts: aExternalSensorLabel.setDescription('Gets, sets or defaults the external sensor label. External sensors can be connected to Energy Sensors.')
aRelayLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 65, 1, 1, 10110), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aRelayLabel.setStatus('current')
if mibBuilder.loadTexts: aRelayLabel.setDescription('Gets, sets or defaults an Energy Sensor relay label.')
aMinAnalogueInputWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 65, 1, 1, 10111), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('mV').setMaxAccess("readwrite")
if mibBuilder.loadTexts: aMinAnalogueInputWarning.setStatus('current')
if mibBuilder.loadTexts: aMinAnalogueInputWarning.setDescription('Gets, sets or defaults the lower warning level for an analog input. A warning is generated if this level is exceeded. (unit: mV)')
aMaxAnalogueInputWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 65, 1, 1, 10112), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aMaxAnalogueInputWarning.setStatus('current')
if mibBuilder.loadTexts: aMaxAnalogueInputWarning.setDescription('Gets, sets or defaults the upper warning level for an analog input. A warning is generated if this level is exceeded.')
aWaterleakWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 65, 1, 1, 10113), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aWaterleakWarning.setStatus('current')
if mibBuilder.loadTexts: aWaterleakWarning.setDescription('Gets, sets or defaults the water leak detection state (0 = disabled, other values = enabled).')
aMinAirflowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 65, 1, 1, 10114), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aMinAirflowWarning.setStatus('current')
if mibBuilder.loadTexts: aMinAirflowWarning.setDescription('Gets, sets or defaults the minimum warning level for an airflow sensor. A warning is generated if this level is exceeded.')
aMaxAirflowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 65, 1, 1, 10115), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aMaxAirflowWarning.setStatus('current')
if mibBuilder.loadTexts: aMaxAirflowWarning.setDescription('Gets, sets or defaults the maximum warning level for an airflow sensor. A warning is generated if this level is exceeded.')
aAnalogueInputWarningEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 65, 1, 1, 10116), EVENTFLAGS()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aAnalogueInputWarningEvent.setStatus('current')
if mibBuilder.loadTexts: aAnalogueInputWarningEvent.setDescription('Enables or disables the SNMP trap if the analog input warning level is exceeded.')
aWaterleakWarningEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 65, 1, 1, 10117), EVENTFLAGS()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aWaterleakWarningEvent.setStatus('current')
if mibBuilder.loadTexts: aWaterleakWarningEvent.setDescription('Enables or disables the SNMP trap if a water leak is detected.')
aAirflowWarningEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 65, 1, 1, 10118), EVENTFLAGS()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aAirflowWarningEvent.setStatus('current')
if mibBuilder.loadTexts: aAirflowWarningEvent.setDescription('Enables or disables the SNMP trap if the airflow warning level is exceeded.')
aRelayAssertActionEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 65, 1, 1, 10119), EVENTFLAGS()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aRelayAssertActionEvent.setStatus('current')
if mibBuilder.loadTexts: aRelayAssertActionEvent.setDescription('Enables or disables the SNMP trap if an Energy Sensor relay is asserted.')
aRelayDeassertActionEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 65, 1, 1, 10120), EVENTFLAGS()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aRelayDeassertActionEvent.setStatus('current')
if mibBuilder.loadTexts: aRelayDeassertActionEvent.setDescription('Enables or disables the SNMP trap if an Energy Sensor relay is deasserted.')
aMotionWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 65, 1, 1, 10141), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aMotionWarning.setStatus('current')
if mibBuilder.loadTexts: aMotionWarning.setDescription('Gets, sets or defaults the motion warning threshold.')
aMotionWarningEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 65, 1, 1, 10149), EVENTFLAGS()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aMotionWarningEvent.setStatus('current')
if mibBuilder.loadTexts: aMotionWarningEvent.setDescription('Enables or disables the SNMP trap if the motion warning threshold is exceeded.')
aDeviceID = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 65, 1, 1, 10150), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aDeviceID.setStatus('current')
if mibBuilder.loadTexts: aDeviceID.setDescription('The ID of the device.')
aDeviceVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 65, 1, 1, 10151), Version()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aDeviceVersion.setStatus('current')
if mibBuilder.loadTexts: aDeviceVersion.setDescription('The version of the device.')
aSysName = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 65, 1, 1, 10152), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aSysName.setStatus('current')
if mibBuilder.loadTexts: aSysName.setDescription('The full name of the device.')
aMaxHighCurrentWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 65, 1, 1, 10165), Stenth().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setUnits('A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: aMaxHighCurrentWarning.setStatus('current')
if mibBuilder.loadTexts: aMaxHighCurrentWarning.setDescription('Gets sets or defaults the maximum high current warning level. (unit: 0.1A)')
aMinHighCurrentWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 65, 1, 1, 10176), Stenth().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setUnits('A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: aMinHighCurrentWarning.setStatus('current')
if mibBuilder.loadTexts: aMinHighCurrentWarning.setDescription('Gets sets or defaults the minimum high current warning level. (unit: 0.1A)')
aMinHighPowerWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 65, 1, 1, 10177), Shundredth().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setUnits('kW').setMaxAccess("readwrite")
if mibBuilder.loadTexts: aMinHighPowerWarning.setStatus('current')
if mibBuilder.loadTexts: aMinHighPowerWarning.setDescription('Gets sets or defaults the power min high current warning level. (unit: 0.01kW)')
aMaxHighPowerWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 65, 1, 1, 10178), Shundredth().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setUnits('kW').setMaxAccess("readwrite")
if mibBuilder.loadTexts: aMaxHighPowerWarning.setStatus('current')
if mibBuilder.loadTexts: aMaxHighPowerWarning.setDescription('Gets sets or defaults the power max high current warning level. (unit: 0.01kW)')
aIOPortWarningEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 65, 1, 1, 10192), EVENTFLAGS()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aIOPortWarningEvent.setStatus('current')
if mibBuilder.loadTexts: aIOPortWarningEvent.setDescription('Enables or disables the SNMP trap if the IO Port change state.')
testmoduleModule = MibIdentifier((1, 3, 6, 1, 4, 1, 34097, 9, 89))
eTestModuleTable = MibTable((1, 3, 6, 1, 4, 1, 34097, 9, 89, 1), )
if mibBuilder.loadTexts: eTestModuleTable.setStatus('current')
if mibBuilder.loadTexts: eTestModuleTable.setDescription('Module to test the R-bus')
eTestModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 34097, 9, 89, 1, 1), ).setIndexNames((0, "ES-RACKTIVITY-MIB", "testmoduleModuleIndex"), (0, "ES-RACKTIVITY-MIB", "testmoduleIndex"))
if mibBuilder.loadTexts: eTestModuleEntry.setStatus('current')
if mibBuilder.loadTexts: eTestModuleEntry.setDescription('Module to test the R-bus')
testmoduleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 89, 1, 1, 65537), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: testmoduleIndex.setStatus('current')
if mibBuilder.loadTexts: testmoduleIndex.setDescription('Index for the selected TestModule Module')
testmoduleModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 89, 1, 1, 65538), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: testmoduleModuleIndex.setStatus('current')
if mibBuilder.loadTexts: testmoduleModuleIndex.setDescription('Selected TestModule Module')
yGeneralModuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 89, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: yGeneralModuleStatus.setStatus('current')
if mibBuilder.loadTexts: yGeneralModuleStatus.setDescription('General status of a module.')
ySpecificModuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 89, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ySpecificModuleStatus.setStatus('current')
if mibBuilder.loadTexts: ySpecificModuleStatus.setDescription('Specific status of a module.')
yCurrentTime = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 89, 1, 1, 3), TimeTicks()).setUnits('UNIX').setMaxAccess("readwrite")
if mibBuilder.loadTexts: yCurrentTime.setStatus('current')
if mibBuilder.loadTexts: yCurrentTime.setDescription('Gets or sets the current time (not possible when NTP is enabled). (unit: UNIX)')
yCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 89, 1, 1, 6), Uthousandth()).setUnits('A').setMaxAccess("readonly")
if mibBuilder.loadTexts: yCurrent.setStatus('current')
if mibBuilder.loadTexts: yCurrent.setDescription('Gets the current of an outlet. (unit: 0.001A)')
yStatePortCur = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 89, 1, 1, 8), CURPORTSTATE()).setMaxAccess("readonly")
if mibBuilder.loadTexts: yStatePortCur.setStatus('current')
if mibBuilder.loadTexts: yStatePortCur.setDescription('Gets the current state of an outlet. To toggle an outlet use PORTSTAT (CLI) or pPortstate (SNMP) (GUID 10035) instead.')
yAnalogueInput = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 89, 1, 1, 27), Unsigned32()).setUnits('mV').setMaxAccess("readonly")
if mibBuilder.loadTexts: yAnalogueInput.setStatus('current')
if mibBuilder.loadTexts: yAnalogueInput.setDescription('Gets the value of an analog input (voltage). (unit: mV)')
yModuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 89, 1, 1, 10001), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: yModuleName.setStatus('current')
if mibBuilder.loadTexts: yModuleName.setDescription('Gets, sets or defaults the module name.')
yFirmwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 89, 1, 1, 10002), Version()).setMaxAccess("readonly")
if mibBuilder.loadTexts: yFirmwareVersion.setStatus('current')
if mibBuilder.loadTexts: yFirmwareVersion.setDescription("Gets the version of the module's firmware.")
yHardwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 89, 1, 1, 10003), Version()).setMaxAccess("readonly")
if mibBuilder.loadTexts: yHardwareVersion.setStatus('current')
if mibBuilder.loadTexts: yHardwareVersion.setDescription("Gets the version of a module's hardware.")
yFirmwareID = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 89, 1, 1, 10004), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: yFirmwareID.setStatus('current')
if mibBuilder.loadTexts: yFirmwareID.setDescription("Gets the ID of the module's firmware.")
yHardwareID = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 89, 1, 1, 10005), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: yHardwareID.setStatus('current')
if mibBuilder.loadTexts: yHardwareID.setDescription("Gets the ID of a module's hardware.")
pcModule = MibIdentifier((1, 3, 6, 1, 4, 1, 34097, 9, 85))
ePCTable = MibTable((1, 3, 6, 1, 4, 1, 34097, 9, 85, 1), )
if mibBuilder.loadTexts: ePCTable.setStatus('current')
if mibBuilder.loadTexts: ePCTable.setDescription('NO_INFO')
ePCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 34097, 9, 85, 1, 1), ).setIndexNames((0, "ES-RACKTIVITY-MIB", "pcModuleIndex"), (0, "ES-RACKTIVITY-MIB", "pcIndex"))
if mibBuilder.loadTexts: ePCEntry.setStatus('current')
if mibBuilder.loadTexts: ePCEntry.setDescription('NO_INFO')
pcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 85, 1, 1, 65537), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: pcIndex.setStatus('current')
if mibBuilder.loadTexts: pcIndex.setDescription('Index for the selected PC Module')
pcModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 85, 1, 1, 65538), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: pcModuleIndex.setStatus('current')
if mibBuilder.loadTexts: pcModuleIndex.setDescription('Selected PC Module')
uGeneralModuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 85, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uGeneralModuleStatus.setStatus('current')
if mibBuilder.loadTexts: uGeneralModuleStatus.setDescription('General status of a module.')
uSpecificModuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 85, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uSpecificModuleStatus.setStatus('current')
if mibBuilder.loadTexts: uSpecificModuleStatus.setDescription('Specific status of a module.')
uCurrentTime = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 85, 1, 1, 3), TimeTicks()).setUnits('UNIX').setMaxAccess("readwrite")
if mibBuilder.loadTexts: uCurrentTime.setStatus('current')
if mibBuilder.loadTexts: uCurrentTime.setDescription('Gets or sets the current time (not possible when NTP is enabled). (unit: UNIX)')
uVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 85, 1, 1, 4), Uhundredth().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('V').setMaxAccess("readonly")
if mibBuilder.loadTexts: uVoltage.setStatus('current')
if mibBuilder.loadTexts: uVoltage.setDescription('Gets the voltage of a power module. (unit: 0.01V)')
uCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 85, 1, 1, 6), Uthousandth().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('A').setMaxAccess("readonly")
if mibBuilder.loadTexts: uCurrent.setStatus('current')
if mibBuilder.loadTexts: uCurrent.setDescription('Gets the current of an outlet. (unit: 0.001A)')
uStatePortCur = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 85, 1, 1, 8), CURPORTSTATE()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uStatePortCur.setStatus('current')
if mibBuilder.loadTexts: uStatePortCur.setDescription('Gets the current state of an outlet. To toggle an outlet use PORTSTAT (CLI) or pPortstate (SNMP) (GUID 10035) instead.')
uTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 85, 1, 1, 11), Utenth().subtype(subtypeSpec=ValueRangeConstraint(2232, 4732))).setUnits('K').setMaxAccess("readonly")
if mibBuilder.loadTexts: uTemperature.setStatus('current')
if mibBuilder.loadTexts: uTemperature.setDescription('Gets the current temperature of a temperature sensor. (unit: 0.1K)')
uHumidity = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 85, 1, 1, 12), Utenth().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setUnits('RH').setMaxAccess("readonly")
if mibBuilder.loadTexts: uHumidity.setStatus('current')
if mibBuilder.loadTexts: uHumidity.setDescription('Gets the relative humidity. (unit: 0.1RH)')
uModuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 85, 1, 1, 10001), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uModuleName.setStatus('current')
if mibBuilder.loadTexts: uModuleName.setDescription('Gets, sets or defaults the module name.')
uFirmwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 85, 1, 1, 10002), Version()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uFirmwareVersion.setStatus('current')
if mibBuilder.loadTexts: uFirmwareVersion.setDescription("Gets the version of the module's firmware.")
uHardwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 85, 1, 1, 10003), Version()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uHardwareVersion.setStatus('current')
if mibBuilder.loadTexts: uHardwareVersion.setDescription("Gets the version of a module's hardware.")
uFirmwareID = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 85, 1, 1, 10004), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uFirmwareID.setStatus('current')
if mibBuilder.loadTexts: uFirmwareID.setDescription("Gets the ID of the module's firmware.")
uHardwareID = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 85, 1, 1, 10005), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uHardwareID.setStatus('current')
if mibBuilder.loadTexts: uHardwareID.setDescription("Gets the ID of a module's hardware.")
uPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 85, 1, 1, 10035), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uPortState.setStatus('current')
if mibBuilder.loadTexts: uPortState.setDescription('Sets the state of an outlet: 0=OFF, 1=ON, 2=POWER CYCLE. To get the state of an outlet use CPORTSTAT (CLI) or pStatePortCur (SNMP) (GUID 8) instead.')
energymonitorModule = MibIdentifier((1, 3, 6, 1, 4, 1, 34097, 9, 69))
eEnergyMonitorTable = MibTable((1, 3, 6, 1, 4, 1, 34097, 9, 69, 1), )
if mibBuilder.loadTexts: eEnergyMonitorTable.setStatus('current')
if mibBuilder.loadTexts: eEnergyMonitorTable.setDescription('NO_INFO')
eEnergyMonitorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 34097, 9, 69, 1, 1), ).setIndexNames((0, "ES-RACKTIVITY-MIB", "energymonitorModuleIndex"), (0, "ES-RACKTIVITY-MIB", "energymonitorIndex"))
if mibBuilder.loadTexts: eEnergyMonitorEntry.setStatus('current')
if mibBuilder.loadTexts: eEnergyMonitorEntry.setDescription('NO_INFO')
energymonitorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 69, 1, 1, 65537), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: energymonitorIndex.setStatus('current')
if mibBuilder.loadTexts: energymonitorIndex.setDescription('Index for the selected EnergyMonitor Module')
energymonitorModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 69, 1, 1, 65538), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: energymonitorModuleIndex.setStatus('current')
if mibBuilder.loadTexts: energymonitorModuleIndex.setDescription('Selected EnergyMonitor Module')
eGeneralModuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 69, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eGeneralModuleStatus.setStatus('current')
if mibBuilder.loadTexts: eGeneralModuleStatus.setDescription('General status of a module.')
eSpecificModuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 69, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eSpecificModuleStatus.setStatus('current')
if mibBuilder.loadTexts: eSpecificModuleStatus.setDescription('Specific status of a module.')
eCurrentTime = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 69, 1, 1, 3), TimeTicks()).setUnits('UNIX').setMaxAccess("readwrite")
if mibBuilder.loadTexts: eCurrentTime.setStatus('current')
if mibBuilder.loadTexts: eCurrentTime.setDescription('Gets or sets the current time (not possible when NTP is enabled). (unit: UNIX)')
eVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 69, 1, 1, 4), Uhundredth()).setUnits('V').setMaxAccess("readonly")
if mibBuilder.loadTexts: eVoltage.setStatus('current')
if mibBuilder.loadTexts: eVoltage.setDescription('Gets the voltage of a power module. (unit: 0.01V)')
eFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 69, 1, 1, 5), Uthousandth()).setUnits('Hz').setMaxAccess("readonly")
if mibBuilder.loadTexts: eFrequency.setStatus('current')
if mibBuilder.loadTexts: eFrequency.setDescription('Gets the frequency of the input voltage of a power module. (unit: 0.001Hz)')
eCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 69, 1, 1, 6), Uthousandth()).setUnits('A').setMaxAccess("readonly")
if mibBuilder.loadTexts: eCurrent.setStatus('current')
if mibBuilder.loadTexts: eCurrent.setDescription('Gets the current of an outlet. (unit: 0.001A)')
ePower = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 69, 1, 1, 7), Unsigned32()).setUnits('W').setMaxAccess("readonly")
if mibBuilder.loadTexts: ePower.setStatus('current')
if mibBuilder.loadTexts: ePower.setDescription('Gets the power of an outlet. (unit: W)')
eActiveEnergy = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 69, 1, 1, 9), Uthousandth()).setUnits('kWh').setMaxAccess("readonly")
if mibBuilder.loadTexts: eActiveEnergy.setStatus('current')
if mibBuilder.loadTexts: eActiveEnergy.setDescription('Gets the energy used by an outlet. (unit: 0.001kWh)')
eApparentEnergy = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 69, 1, 1, 10), Uthousandth()).setUnits('kVAh').setMaxAccess("readonly")
if mibBuilder.loadTexts: eApparentEnergy.setStatus('current')
if mibBuilder.loadTexts: eApparentEnergy.setDescription('Gets the apparent energy used by an outlet. (unit: 0.001kVAh)')
eTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 69, 1, 1, 11), Utenth()).setUnits('K').setMaxAccess("readonly")
if mibBuilder.loadTexts: eTemperature.setStatus('current')
if mibBuilder.loadTexts: eTemperature.setDescription('Gets the current temperature of a temperature sensor. (unit: 0.1K)')
eApparentPower = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 69, 1, 1, 15), Unsigned32()).setUnits('VA').setMaxAccess("readonly")
if mibBuilder.loadTexts: eApparentPower.setStatus('current')
if mibBuilder.loadTexts: eApparentPower.setDescription('Gets the apparent power of an outlet. (unit: VA)')
ePowerFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 69, 1, 1, 16), Unsigned32()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: ePowerFactor.setStatus('current')
if mibBuilder.loadTexts: ePowerFactor.setDescription('Gets the power factor of an outlet. (unit: %)')
eTotalCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 69, 1, 1, 17), Uthousandth()).setUnits('A').setMaxAccess("readonly")
if mibBuilder.loadTexts: eTotalCurrent.setStatus('current')
if mibBuilder.loadTexts: eTotalCurrent.setDescription('Gets the total current of a power module. (unit: 0.001A)')
eTotalRealPower = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 69, 1, 1, 18), Unsigned32()).setUnits('W').setMaxAccess("readonly")
if mibBuilder.loadTexts: eTotalRealPower.setStatus('current')
if mibBuilder.loadTexts: eTotalRealPower.setDescription('Gets the total power level of a power module. (unit: W)')
eTotalApparentPower = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 69, 1, 1, 19), Unsigned32()).setUnits('VA').setMaxAccess("readonly")
if mibBuilder.loadTexts: eTotalApparentPower.setStatus('current')
if mibBuilder.loadTexts: eTotalApparentPower.setDescription('Gets the total apparent power of a power module. (unit: VA)')
eTotalActiveEnergy = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 69, 1, 1, 20), Uthousandth()).setUnits('kWh').setMaxAccess("readonly")
if mibBuilder.loadTexts: eTotalActiveEnergy.setStatus('current')
if mibBuilder.loadTexts: eTotalActiveEnergy.setDescription('Gets the total energy of a power module. (unit: 0.001kWh)')
eTotalApparentEnergy = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 69, 1, 1, 21), Uthousandth()).setUnits('kVAh').setMaxAccess("readonly")
if mibBuilder.loadTexts: eTotalApparentEnergy.setStatus('current')
if mibBuilder.loadTexts: eTotalApparentEnergy.setDescription('Gets the total apparent energy of a power module. (unit: 0.001kVAh)')
eTotalPowerFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 69, 1, 1, 22), Unsigned32()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: eTotalPowerFactor.setStatus('current')
if mibBuilder.loadTexts: eTotalPowerFactor.setDescription('Gets the total power factor of a power module. (unit: %)')
eTimeOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 69, 1, 1, 24), Unsigned32()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: eTimeOnline.setStatus('current')
if mibBuilder.loadTexts: eTimeOnline.setDescription('Gets the amount of seconds since the last reset. (unit: s)')
eTotalHarmonicDistortion = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 69, 1, 1, 50), Utenth().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: eTotalHarmonicDistortion.setStatus('current')
if mibBuilder.loadTexts: eTotalHarmonicDistortion.setDescription('total harmonic distortion - outlet (unit: 0.1%)')
eModuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 69, 1, 1, 10001), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eModuleName.setStatus('current')
if mibBuilder.loadTexts: eModuleName.setDescription('Gets, sets or defaults the module name.')
eFirmwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 69, 1, 1, 10002), Version()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eFirmwareVersion.setStatus('current')
if mibBuilder.loadTexts: eFirmwareVersion.setDescription("Gets the version of the module's firmware.")
eHardwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 69, 1, 1, 10003), Version()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eHardwareVersion.setStatus('current')
if mibBuilder.loadTexts: eHardwareVersion.setDescription("Gets the version of a module's hardware.")
eFirmwareID = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 69, 1, 1, 10004), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eFirmwareID.setStatus('current')
if mibBuilder.loadTexts: eFirmwareID.setDescription("Gets the ID of the module's firmware.")
eHardwareID = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 69, 1, 1, 10005), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eHardwareID.setStatus('current')
if mibBuilder.loadTexts: eHardwareID.setDescription("Gets the ID of a module's hardware.")
eMaxCurrentWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 69, 1, 1, 10039), Uthousandth().subtype(subtypeSpec=ValueRangeConstraint(100, 8000))).setUnits('A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: eMaxCurrentWarning.setStatus('current')
if mibBuilder.loadTexts: eMaxCurrentWarning.setDescription('Gets, sets or defaults the maximum current warning level of an outlet. (unit: 0.001A)')
eMaxPowerWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 69, 1, 1, 10041), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(20, 2000))).setUnits('W').setMaxAccess("readwrite")
if mibBuilder.loadTexts: eMaxPowerWarning.setStatus('current')
if mibBuilder.loadTexts: eMaxPowerWarning.setDescription('Gets, sets or defaults the maximum power warning level of an outlet. (unit: W)')
eMaxTotalCurrentWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 69, 1, 1, 10043), Uthousandth().subtype(subtypeSpec=ValueRangeConstraint(100, 16000))).setUnits('A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: eMaxTotalCurrentWarning.setStatus('current')
if mibBuilder.loadTexts: eMaxTotalCurrentWarning.setDescription('Gets, sets or defaults the total maximum current warning level of a power module. (unit: 0.001A)')
eMaxTotalPowerWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 69, 1, 1, 10045), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(20, 4000))).setUnits('W').setMaxAccess("readwrite")
if mibBuilder.loadTexts: eMaxTotalPowerWarning.setStatus('current')
if mibBuilder.loadTexts: eMaxTotalPowerWarning.setDescription('Gets, sets or defaults the maximum total power warning level. (unit: W)')
eMaxVoltageWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 69, 1, 1, 10047), Uhundredth().subtype(subtypeSpec=ValueRangeConstraint(5000, 30000))).setUnits('V').setMaxAccess("readwrite")
if mibBuilder.loadTexts: eMaxVoltageWarning.setStatus('current')
if mibBuilder.loadTexts: eMaxVoltageWarning.setDescription('Gets, sets or defaults the maximum voltage warning level. (unit: 0.01V)')
eMinVoltageWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 69, 1, 1, 10049), Uhundredth().subtype(subtypeSpec=ValueRangeConstraint(5000, 30000))).setUnits('V').setMaxAccess("readwrite")
if mibBuilder.loadTexts: eMinVoltageWarning.setStatus('current')
if mibBuilder.loadTexts: eMinVoltageWarning.setDescription('Gets, sets or defaults the minimum voltage warning level. (unit: 0.01V)')
eMinTemperatureWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 69, 1, 1, 10052), Utenth().subtype(subtypeSpec=ValueRangeConstraint(2232, 4732))).setUnits('K').setMaxAccess("readwrite")
if mibBuilder.loadTexts: eMinTemperatureWarning.setStatus('current')
if mibBuilder.loadTexts: eMinTemperatureWarning.setDescription('Gets, sets or defaults the minimum temperature warning level (use DEF accessor to reset). (unit: 0.1K)')
eMaxTemperatureWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 69, 1, 1, 10053), Utenth().subtype(subtypeSpec=ValueRangeConstraint(2232, 4732))).setUnits('K').setMaxAccess("readwrite")
if mibBuilder.loadTexts: eMaxTemperatureWarning.setStatus('current')
if mibBuilder.loadTexts: eMaxTemperatureWarning.setDescription('Gets, sets or defaults the maximum temperature warning level (use DEF accessor to reset). (unit: 0.1K)')
eCurrentWarningEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 69, 1, 1, 10078), EVENTFLAGS()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eCurrentWarningEvent.setStatus('current')
if mibBuilder.loadTexts: eCurrentWarningEvent.setDescription('Enables or disables the SNMP trap if the outlet current warning level is exceeded.')
ePowerWarningEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 69, 1, 1, 10080), EVENTFLAGS()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ePowerWarningEvent.setStatus('current')
if mibBuilder.loadTexts: ePowerWarningEvent.setDescription('Enables or disables the SNMP trap if the power warning level is exceeded.')
eTotalCurrentWarningEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 69, 1, 1, 10082), EVENTFLAGS()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eTotalCurrentWarningEvent.setStatus('current')
if mibBuilder.loadTexts: eTotalCurrentWarningEvent.setDescription('Enables or disables the SNMP trap if the total outlet current warning level is exceeded.')
eTotalPowerWarningEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 69, 1, 1, 10084), EVENTFLAGS()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eTotalPowerWarningEvent.setStatus('current')
if mibBuilder.loadTexts: eTotalPowerWarningEvent.setDescription('Enables or disables the SNMP trap if the total power warning level is exceeded.')
eVoltageWarningEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 69, 1, 1, 10086), EVENTFLAGS()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eVoltageWarningEvent.setStatus('current')
if mibBuilder.loadTexts: eVoltageWarningEvent.setDescription('Enables or disables the SNMP trap if the voltage warning level is exceeded.')
eTemperatureWarningEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 69, 1, 1, 10087), EVENTFLAGS()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eTemperatureWarningEvent.setStatus('current')
if mibBuilder.loadTexts: eTemperatureWarningEvent.setDescription('Enables or disables the SNMP trap if the temperature warning level is exceeded.')
eMicroIntTimeThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 69, 1, 1, 10135), Utenth().subtype(subtypeSpec=ValueRangeConstraint(10, 65535))).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: eMicroIntTimeThreshold.setStatus('current')
if mibBuilder.loadTexts: eMicroIntTimeThreshold.setDescription('The minimum time the voltage must be interrupted before it is seen as a micro interruption (unit: 0.1ms)')
eMicroIntEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 69, 1, 1, 10136), EVENTFLAGS()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eMicroIntEvent.setStatus('current')
if mibBuilder.loadTexts: eMicroIntEvent.setDescription('Enables or disables the SNMP trap if a microinterruption on the voltage is detected.')
threephasepowerModule = MibIdentifier((1, 3, 6, 1, 4, 1, 34097, 9, 66))
eThreePhasePowerTable = MibTable((1, 3, 6, 1, 4, 1, 34097, 9, 66, 1), )
if mibBuilder.loadTexts: eThreePhasePowerTable.setStatus('current')
if mibBuilder.loadTexts: eThreePhasePowerTable.setDescription('NO_INFO')
eThreePhasePowerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 34097, 9, 66, 1, 1), ).setIndexNames((0, "ES-RACKTIVITY-MIB", "threephasepowerModuleIndex"), (0, "ES-RACKTIVITY-MIB", "threephasepowerIndex"))
if mibBuilder.loadTexts: eThreePhasePowerEntry.setStatus('current')
if mibBuilder.loadTexts: eThreePhasePowerEntry.setDescription('NO_INFO')
threephasepowerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 66, 1, 1, 65537), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: threephasepowerIndex.setStatus('current')
if mibBuilder.loadTexts: threephasepowerIndex.setDescription('Index for the selected ThreePhasePower Module')
threephasepowerModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 66, 1, 1, 65538), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: threephasepowerModuleIndex.setStatus('current')
if mibBuilder.loadTexts: threephasepowerModuleIndex.setDescription('Selected ThreePhasePower Module')
measuring3phaseModule = MibIdentifier((1, 3, 6, 1, 4, 1, 34097, 9, 81))
eMeasuring3PhaseTable = MibTable((1, 3, 6, 1, 4, 1, 34097, 9, 81, 1), )
if mibBuilder.loadTexts: eMeasuring3PhaseTable.setStatus('current')
if mibBuilder.loadTexts: eMeasuring3PhaseTable.setDescription('NO_INFO')
eMeasuring3PhaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 34097, 9, 81, 1, 1), ).setIndexNames((0, "ES-RACKTIVITY-MIB", "measuring3phaseModuleIndex"), (0, "ES-RACKTIVITY-MIB", "measuring3phaseIndex"))
if mibBuilder.loadTexts: eMeasuring3PhaseEntry.setStatus('current')
if mibBuilder.loadTexts: eMeasuring3PhaseEntry.setDescription('NO_INFO')
measuring3phaseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 81, 1, 1, 65537), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: measuring3phaseIndex.setStatus('current')
if mibBuilder.loadTexts: measuring3phaseIndex.setDescription('Index for the selected Measuring3Phase Module')
measuring3phaseModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 81, 1, 1, 65538), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: measuring3phaseModuleIndex.setStatus('current')
if mibBuilder.loadTexts: measuring3phaseModuleIndex.setDescription('Selected Measuring3Phase Module')
qGeneralModuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 81, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qGeneralModuleStatus.setStatus('current')
if mibBuilder.loadTexts: qGeneralModuleStatus.setDescription('General status of a module.')
qSpecificModuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 81, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qSpecificModuleStatus.setStatus('current')
if mibBuilder.loadTexts: qSpecificModuleStatus.setDescription('Specific status of a module.')
qCurrentTime = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 81, 1, 1, 3), TimeTicks()).setUnits('UNIX').setMaxAccess("readwrite")
if mibBuilder.loadTexts: qCurrentTime.setStatus('current')
if mibBuilder.loadTexts: qCurrentTime.setDescription('Gets or sets the current time (not possible when NTP is enabled). (unit: UNIX)')
qVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 81, 1, 1, 4), Uhundredth()).setUnits('V').setMaxAccess("readonly")
if mibBuilder.loadTexts: qVoltage.setStatus('current')
if mibBuilder.loadTexts: qVoltage.setDescription('Gets the voltage of a power module. (unit: 0.01V)')
qFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 81, 1, 1, 5), Uthousandth()).setUnits('Hz').setMaxAccess("readonly")
if mibBuilder.loadTexts: qFrequency.setStatus('current')
if mibBuilder.loadTexts: qFrequency.setDescription('Gets the frequency of the input voltage of a power module. (unit: 0.001Hz)')
qActiveEnergy = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 81, 1, 1, 9), Uthousandth()).setUnits('kWh').setMaxAccess("readonly")
if mibBuilder.loadTexts: qActiveEnergy.setStatus('current')
if mibBuilder.loadTexts: qActiveEnergy.setDescription('Gets the energy used by an outlet. (unit: 0.001kWh)')
qApparentEnergy = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 81, 1, 1, 10), Uthousandth()).setUnits('kVAh').setMaxAccess("readonly")
if mibBuilder.loadTexts: qApparentEnergy.setStatus('current')
if mibBuilder.loadTexts: qApparentEnergy.setDescription('Gets the apparent energy used by an outlet. (unit: 0.001kVAh)')
qTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 81, 1, 1, 11), Utenth()).setUnits('K').setMaxAccess("readonly")
if mibBuilder.loadTexts: qTemperature.setStatus('current')
if mibBuilder.loadTexts: qTemperature.setDescription('Gets the current temperature of a temperature sensor. (unit: 0.1K)')
qPowerFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 81, 1, 1, 16), Unsigned32()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: qPowerFactor.setStatus('current')
if mibBuilder.loadTexts: qPowerFactor.setDescription('Gets the power factor of an outlet. (unit: %)')
qTimeOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 81, 1, 1, 24), Unsigned32()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: qTimeOnline.setStatus('current')
if mibBuilder.loadTexts: qTimeOnline.setDescription('Gets the amount of seconds since the last reset. (unit: s)')
qIOPort = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 81, 1, 1, 30), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qIOPort.setStatus('current')
if mibBuilder.loadTexts: qIOPort.setDescription('Gets the state of a digital input.')
qTotalHarmonicDistortion = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 81, 1, 1, 50), Utenth().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: qTotalHarmonicDistortion.setStatus('current')
if mibBuilder.loadTexts: qTotalHarmonicDistortion.setDescription('total harmonic distortion - outlet (unit: 0.1%)')
qPhase = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 81, 1, 1, 51), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('degr').setMaxAccess("readonly")
if mibBuilder.loadTexts: qPhase.setStatus('current')
if mibBuilder.loadTexts: qPhase.setDescription('the phase between 2 waves (unit: degr)')
qBigCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 81, 1, 1, 52), Unsigned32()).setUnits('A').setMaxAccess("readonly")
if mibBuilder.loadTexts: qBigCurrent.setStatus('current')
if mibBuilder.loadTexts: qBigCurrent.setDescription('Gets the current of an outlet. (unit: 0.0001A)')
qBigPower = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 81, 1, 1, 53), Uthousandth()).setUnits('W').setMaxAccess("readonly")
if mibBuilder.loadTexts: qBigPower.setStatus('current')
if mibBuilder.loadTexts: qBigPower.setDescription('Gets the power of an outlet. (unit: 0.001W)')
qBigApparentPower = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 81, 1, 1, 54), Uthousandth()).setUnits('VA').setMaxAccess("readonly")
if mibBuilder.loadTexts: qBigApparentPower.setStatus('current')
if mibBuilder.loadTexts: qBigApparentPower.setDescription('Gets the apparent power of an outlet. (unit: 0.001VA)')
qStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 81, 1, 1, 1000), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qStatus.setStatus('current')
if mibBuilder.loadTexts: qStatus.setDescription('status of a module')
qModuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 81, 1, 1, 10001), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qModuleName.setStatus('current')
if mibBuilder.loadTexts: qModuleName.setDescription('Gets, sets or defaults the module name.')
qFirmwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 81, 1, 1, 10002), Version()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qFirmwareVersion.setStatus('current')
if mibBuilder.loadTexts: qFirmwareVersion.setDescription("Gets the version of the module's firmware.")
qHardwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 81, 1, 1, 10003), Version()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qHardwareVersion.setStatus('current')
if mibBuilder.loadTexts: qHardwareVersion.setDescription("Gets the version of a module's hardware.")
qFirmwareID = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 81, 1, 1, 10004), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qFirmwareID.setStatus('current')
if mibBuilder.loadTexts: qFirmwareID.setDescription("Gets the ID of the module's firmware.")
qHardwareID = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 81, 1, 1, 10005), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qHardwareID.setStatus('current')
if mibBuilder.loadTexts: qHardwareID.setDescription("Gets the ID of a module's hardware.")
qPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 81, 1, 1, 10035), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qPortState.setStatus('current')
if mibBuilder.loadTexts: qPortState.setDescription('Sets the state of an outlet: 0=OFF, 1=ON, 2=POWER CYCLE. To get the state of an outlet use CPORTSTAT (CLI) or pStatePortCur (SNMP) (GUID 8) instead.')
qMaxVoltageWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 81, 1, 1, 10047), Uhundredth().subtype(subtypeSpec=ValueRangeConstraint(5000, 30000))).setUnits('V').setMaxAccess("readwrite")
if mibBuilder.loadTexts: qMaxVoltageWarning.setStatus('current')
if mibBuilder.loadTexts: qMaxVoltageWarning.setDescription('Gets, sets or defaults the maximum voltage warning level. (unit: 0.01V)')
qMinVoltageWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 81, 1, 1, 10049), Uhundredth().subtype(subtypeSpec=ValueRangeConstraint(5000, 30000))).setUnits('V').setMaxAccess("readwrite")
if mibBuilder.loadTexts: qMinVoltageWarning.setStatus('current')
if mibBuilder.loadTexts: qMinVoltageWarning.setDescription('Gets, sets or defaults the minimum voltage warning level. (unit: 0.01V)')
qMinTemperatureWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 81, 1, 1, 10052), Utenth().subtype(subtypeSpec=ValueRangeConstraint(2232, 4732))).setUnits('K').setMaxAccess("readwrite")
if mibBuilder.loadTexts: qMinTemperatureWarning.setStatus('current')
if mibBuilder.loadTexts: qMinTemperatureWarning.setDescription('Gets, sets or defaults the minimum temperature warning level (use DEF accessor to reset). (unit: 0.1K)')
qMaxTemperatureWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 81, 1, 1, 10053), Utenth().subtype(subtypeSpec=ValueRangeConstraint(2232, 4732))).setUnits('K').setMaxAccess("readwrite")
if mibBuilder.loadTexts: qMaxTemperatureWarning.setStatus('current')
if mibBuilder.loadTexts: qMaxTemperatureWarning.setDescription('Gets, sets or defaults the maximum temperature warning level (use DEF accessor to reset). (unit: 0.1K)')
qPortStateEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 81, 1, 1, 10076), EVENTFLAGS()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qPortStateEvent.setStatus('current')
if mibBuilder.loadTexts: qPortStateEvent.setDescription('Enables or disables the SNMP trap if the state of an outlet is changed.')
qCurrentWarningEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 81, 1, 1, 10078), EVENTFLAGS()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qCurrentWarningEvent.setStatus('current')
if mibBuilder.loadTexts: qCurrentWarningEvent.setDescription('Enables or disables the SNMP trap if the outlet current warning level is exceeded.')
qPowerWarningEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 81, 1, 1, 10080), EVENTFLAGS()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qPowerWarningEvent.setStatus('current')
if mibBuilder.loadTexts: qPowerWarningEvent.setDescription('Enables or disables the SNMP trap if the power warning level is exceeded.')
qVoltageWarningEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 81, 1, 1, 10086), EVENTFLAGS()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qVoltageWarningEvent.setStatus('current')
if mibBuilder.loadTexts: qVoltageWarningEvent.setDescription('Enables or disables the SNMP trap if the voltage warning level is exceeded.')
qTemperatureWarningEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 81, 1, 1, 10087), EVENTFLAGS()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qTemperatureWarningEvent.setStatus('current')
if mibBuilder.loadTexts: qTemperatureWarningEvent.setDescription('Enables or disables the SNMP trap if the temperature warning level is exceeded.')
qMicroIntTimeThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 81, 1, 1, 10135), Utenth().subtype(subtypeSpec=ValueRangeConstraint(10, 65535))).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: qMicroIntTimeThreshold.setStatus('current')
if mibBuilder.loadTexts: qMicroIntTimeThreshold.setDescription('The minimum time the voltage must be interrupted before it is seen as a micro interruption (unit: 0.1ms)')
qMicroIntEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 81, 1, 1, 10136), EVENTFLAGS()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qMicroIntEvent.setStatus('current')
if mibBuilder.loadTexts: qMicroIntEvent.setDescription('Enables or disables the SNMP trap if a microinterruption on the voltage is detected.')
qDeviceID = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 81, 1, 1, 10150), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qDeviceID.setStatus('current')
if mibBuilder.loadTexts: qDeviceID.setDescription('The ID of the device.')
qDeviceVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 81, 1, 1, 10151), Version()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qDeviceVersion.setStatus('current')
if mibBuilder.loadTexts: qDeviceVersion.setDescription('The version of the device.')
qMaxBigCurrentWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 81, 1, 1, 10193), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(100, 400000000))).setUnits('A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: qMaxBigCurrentWarning.setStatus('current')
if mibBuilder.loadTexts: qMaxBigCurrentWarning.setDescription('Gets, sets or defaults the maximum current warning level of an outlet. (unit: 0.0001A)')
qMaxBigPowerWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 81, 1, 1, 10194), Uthousandth().subtype(subtypeSpec=ValueRangeConstraint(2000, 2000000000))).setUnits('W').setMaxAccess("readwrite")
if mibBuilder.loadTexts: qMaxBigPowerWarning.setStatus('current')
if mibBuilder.loadTexts: qMaxBigPowerWarning.setDescription('Gets, sets or defaults the maximum power warning level of an outlet. (unit: 0.001W)')
qCurrentSensorSelector = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 81, 1, 1, 10197), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qCurrentSensorSelector.setStatus('current')
if mibBuilder.loadTexts: qCurrentSensorSelector.setDescription('Selection of the currentsensor connected to port. To enter your own value you need to use 255 and fill in guid 10190.')
qMinBigCurrentWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 81, 1, 1, 10209), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 400000000))).setUnits('A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: qMinBigCurrentWarning.setStatus('current')
if mibBuilder.loadTexts: qMinBigCurrentWarning.setDescription('Gets, sets or defaults the minimum current warning level of a port. (unit: 0.0001A)')
qkWhMode = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 81, 1, 1, 10234), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qkWhMode.setStatus('current')
if mibBuilder.loadTexts: qkWhMode.setDescription('Set the mode when to count kWh, 0 = always, 1 = only positive, 2= only negative')
displaymoduleModule = MibIdentifier((1, 3, 6, 1, 4, 1, 34097, 9, 68))
eDisplayModuleTable = MibTable((1, 3, 6, 1, 4, 1, 34097, 9, 68, 1), )
if mibBuilder.loadTexts: eDisplayModuleTable.setStatus('current')
if mibBuilder.loadTexts: eDisplayModuleTable.setDescription('NO_INFO')
eDisplayModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 34097, 9, 68, 1, 1), ).setIndexNames((0, "ES-RACKTIVITY-MIB", "displaymoduleModuleIndex"), (0, "ES-RACKTIVITY-MIB", "displaymoduleIndex"))
if mibBuilder.loadTexts: eDisplayModuleEntry.setStatus('current')
if mibBuilder.loadTexts: eDisplayModuleEntry.setDescription('NO_INFO')
displaymoduleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 68, 1, 1, 65537), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: displaymoduleIndex.setStatus('current')
if mibBuilder.loadTexts: displaymoduleIndex.setDescription('Index for the selected DisplayModule Module')
displaymoduleModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 68, 1, 1, 65538), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: displaymoduleModuleIndex.setStatus('current')
if mibBuilder.loadTexts: displaymoduleModuleIndex.setDescription('Selected DisplayModule Module')
dGeneralModuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 68, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dGeneralModuleStatus.setStatus('current')
if mibBuilder.loadTexts: dGeneralModuleStatus.setDescription('General status of a module.')
dSpecificModuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 68, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dSpecificModuleStatus.setStatus('current')
if mibBuilder.loadTexts: dSpecificModuleStatus.setDescription('Specific status of a module.')
dCurrentTime = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 68, 1, 1, 3), TimeTicks()).setUnits('UNIX').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dCurrentTime.setStatus('current')
if mibBuilder.loadTexts: dCurrentTime.setDescription('Gets or sets the current time (not possible when NTP is enabled). (unit: UNIX)')
dTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 68, 1, 1, 11), Utenth()).setUnits('K').setMaxAccess("readonly")
if mibBuilder.loadTexts: dTemperature.setStatus('current')
if mibBuilder.loadTexts: dTemperature.setDescription('Gets the current temperature of a temperature sensor. (unit: 0.1K)')
dTimeOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 68, 1, 1, 24), Unsigned32()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: dTimeOnline.setStatus('current')
if mibBuilder.loadTexts: dTimeOnline.setDescription('Gets the amount of seconds since the last reset. (unit: s)')
dModuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 68, 1, 1, 10001), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dModuleName.setStatus('current')
if mibBuilder.loadTexts: dModuleName.setDescription('Gets, sets or defaults the module name.')
dFirmwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 68, 1, 1, 10002), Version()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dFirmwareVersion.setStatus('current')
if mibBuilder.loadTexts: dFirmwareVersion.setDescription("Gets the version of the module's firmware.")
dHardwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 68, 1, 1, 10003), Version()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dHardwareVersion.setStatus('current')
if mibBuilder.loadTexts: dHardwareVersion.setDescription("Gets the version of a module's hardware.")
dFirmwareID = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 68, 1, 1, 10004), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dFirmwareID.setStatus('current')
if mibBuilder.loadTexts: dFirmwareID.setDescription("Gets the ID of the module's firmware.")
dHardwareID = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 68, 1, 1, 10005), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dHardwareID.setStatus('current')
if mibBuilder.loadTexts: dHardwareID.setDescription("Gets the ID of a module's hardware.")
dMinTemperatureWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 68, 1, 1, 10052), Utenth().subtype(subtypeSpec=ValueRangeConstraint(2232, 4732))).setUnits('K').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dMinTemperatureWarning.setStatus('current')
if mibBuilder.loadTexts: dMinTemperatureWarning.setDescription('Gets, sets or defaults the minimum temperature warning level (use DEF accessor to reset). (unit: 0.1K)')
dMaxTemperatureWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 68, 1, 1, 10053), Utenth().subtype(subtypeSpec=ValueRangeConstraint(2232, 4732))).setUnits('K').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dMaxTemperatureWarning.setStatus('current')
if mibBuilder.loadTexts: dMaxTemperatureWarning.setDescription('Gets, sets or defaults the maximum temperature warning level (use DEF accessor to reset). (unit: 0.1K)')
dDisplayAllDevices = MibTableColumn((1, 3, 6, 1, 4, 1, 34097, 9, 68, 1, 1, 10237), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dDisplayAllDevices.setStatus('current')
if mibBuilder.loadTexts: dDisplayAllDevices.setDescription('If a display need to show all devices or just a small list')
errorValueTooHighRaised = NotificationType((1, 3, 6, 1, 4, 1, 34097, 9, 0, 16))
if mibBuilder.loadTexts: errorValueTooHighRaised.setStatus('current')
if mibBuilder.loadTexts: errorValueTooHighRaised.setDescription('This trap is sent when an element goes above the specified error threshold indicating the maximum value for this element')
errorValueTooLowRaised = NotificationType((1, 3, 6, 1, 4, 1, 34097, 9, 0, 17))
if mibBuilder.loadTexts: errorValueTooLowRaised.setStatus('current')
if mibBuilder.loadTexts: errorValueTooLowRaised.setDescription('This trap is sent when an element goes below the specified error threshold indicating the minimum value for this element')
errorRaised = NotificationType((1, 3, 6, 1, 4, 1, 34097, 9, 0, 18))
if mibBuilder.loadTexts: errorRaised.setStatus('current')
if mibBuilder.loadTexts: errorRaised.setDescription('This trap is sent when an element gets into an error state')
errorValueTooHighCleared = NotificationType((1, 3, 6, 1, 4, 1, 34097, 9, 0, 19))
if mibBuilder.loadTexts: errorValueTooHighCleared.setStatus('current')
if mibBuilder.loadTexts: errorValueTooHighCleared.setDescription('This trap is sent when an element goes below the specified error threshold indicating the maximum value for this element')
errorValueTooLowCleared = NotificationType((1, 3, 6, 1, 4, 1, 34097, 9, 0, 20))
if mibBuilder.loadTexts: errorValueTooLowCleared.setStatus('current')
if mibBuilder.loadTexts: errorValueTooLowCleared.setDescription('This trap is sent when an element goes above the specified error threshold indicating the minimum value for this element')
errorCleared = NotificationType((1, 3, 6, 1, 4, 1, 34097, 9, 0, 21))
if mibBuilder.loadTexts: errorCleared.setStatus('current')
if mibBuilder.loadTexts: errorCleared.setDescription('This trap is sent when an element recovers from an error state')
warningValueTooHighRaised = NotificationType((1, 3, 6, 1, 4, 1, 34097, 9, 0, 48))
if mibBuilder.loadTexts: warningValueTooHighRaised.setStatus('current')
if mibBuilder.loadTexts: warningValueTooHighRaised.setDescription('This trap is sent when an element goes above the specified warning threshold indicating the maximum value for this element')
warningValueTooLowRaised = NotificationType((1, 3, 6, 1, 4, 1, 34097, 9, 0, 49))
if mibBuilder.loadTexts: warningValueTooLowRaised.setStatus('current')
if mibBuilder.loadTexts: warningValueTooLowRaised.setDescription('This trap is sent when an element goes below the specified warning threshold indicating the minimum value for this element')
warningRaised = NotificationType((1, 3, 6, 1, 4, 1, 34097, 9, 0, 50))
if mibBuilder.loadTexts: warningRaised.setStatus('current')
if mibBuilder.loadTexts: warningRaised.setDescription('This trap is sent when an element gets into an warning state')
warningValueTooHighCleared = NotificationType((1, 3, 6, 1, 4, 1, 34097, 9, 0, 51))
if mibBuilder.loadTexts: warningValueTooHighCleared.setStatus('current')
if mibBuilder.loadTexts: warningValueTooHighCleared.setDescription('This trap is sent when an element goes below the specified warning threshold indicating the maximum value for this element')
warningValueTooLowCleared = NotificationType((1, 3, 6, 1, 4, 1, 34097, 9, 0, 52))
if mibBuilder.loadTexts: warningValueTooLowCleared.setStatus('current')
if mibBuilder.loadTexts: warningValueTooLowCleared.setDescription('This trap is sent when an element goes above the specified warning threshold indicating the minimum value for this element')
warningCleared = NotificationType((1, 3, 6, 1, 4, 1, 34097, 9, 0, 53))
if mibBuilder.loadTexts: warningCleared.setStatus('current')
if mibBuilder.loadTexts: warningCleared.setDescription('This trap is sent when an element recovers from an warning state')
infoValueTooHighRaised = NotificationType((1, 3, 6, 1, 4, 1, 34097, 9, 0, 80))
if mibBuilder.loadTexts: infoValueTooHighRaised.setStatus('current')
if mibBuilder.loadTexts: infoValueTooHighRaised.setDescription('This trap is sent when an element goes above a specified threshold indicating the maximum value for this element')
infoPortStateChanged = NotificationType((1, 3, 6, 1, 4, 1, 34097, 9, 0, 96))
if mibBuilder.loadTexts: infoPortStateChanged.setStatus('current')
if mibBuilder.loadTexts: infoPortStateChanged.setDescription('This trap is sent when a port changes state for any reason')
infoReset = NotificationType((1, 3, 6, 1, 4, 1, 34097, 9, 0, 97))
if mibBuilder.loadTexts: infoReset.setStatus('current')
if mibBuilder.loadTexts: infoReset.setDescription('This trap is sent when a module is reboot')
infoValueTooLowRaised = NotificationType((1, 3, 6, 1, 4, 1, 34097, 9, 0, 81))
if mibBuilder.loadTexts: infoValueTooLowRaised.setStatus('current')
if mibBuilder.loadTexts: infoValueTooLowRaised.setDescription('This trap is sent when an element goes below a specified threshold indicating the minimum value for this element')
infoRaised = NotificationType((1, 3, 6, 1, 4, 1, 34097, 9, 0, 82))
if mibBuilder.loadTexts: infoRaised.setStatus('current')
if mibBuilder.loadTexts: infoRaised.setDescription('This trap is sent when an element gets into a specific state')
infoValueTooHighCleared = NotificationType((1, 3, 6, 1, 4, 1, 34097, 9, 0, 83))
if mibBuilder.loadTexts: infoValueTooHighCleared.setStatus('current')
if mibBuilder.loadTexts: infoValueTooHighCleared.setDescription('This trap is sent when an element goes below a specified threshold indicating the maximum value for this element')
infoValueTooLowCleared = NotificationType((1, 3, 6, 1, 4, 1, 34097, 9, 0, 84))
if mibBuilder.loadTexts: infoValueTooLowCleared.setStatus('current')
if mibBuilder.loadTexts: infoValueTooLowCleared.setDescription('This trap is sent when an element goes above a specified threshold indicating the minimum value for this element')
infoCleared = NotificationType((1, 3, 6, 1, 4, 1, 34097, 9, 0, 85))
if mibBuilder.loadTexts: infoCleared.setStatus('current')
if mibBuilder.loadTexts: infoCleared.setDescription('This trap is sent when an element recovers from a specific state')
infoUpgrade = NotificationType((1, 3, 6, 1, 4, 1, 34097, 9, 0, 98))
if mibBuilder.loadTexts: infoUpgrade.setStatus('current')
if mibBuilder.loadTexts: infoUpgrade.setDescription('This trap is sent when upgrade or downgrade of firmware is completed')
warningMicroInterruption = NotificationType((1, 3, 6, 1, 4, 1, 34097, 9, 0, 54))
if mibBuilder.loadTexts: warningMicroInterruption.setStatus('current')
if mibBuilder.loadTexts: warningMicroInterruption.setDescription('This event is raised when a micro interruption is detected above a threshold time')
warningPhaseShift = NotificationType((1, 3, 6, 1, 4, 1, 34097, 9, 0, 55))
if mibBuilder.loadTexts: warningPhaseShift.setStatus('current')
if mibBuilder.loadTexts: warningPhaseShift.setDescription('This event is raised when a phase shift is detected above a threshold')
infoPortSchedule = NotificationType((1, 3, 6, 1, 4, 1, 34097, 9, 0, 99))
if mibBuilder.loadTexts: infoPortSchedule.setStatus('current')
if mibBuilder.loadTexts: infoPortSchedule.setDescription('This trap is sent when a port changes state because of a scheduling')
infoHeartbeat = NotificationType((1, 3, 6, 1, 4, 1, 34097, 9, 0, 100))
if mibBuilder.loadTexts: infoHeartbeat.setStatus('current')
if mibBuilder.loadTexts: infoHeartbeat.setDescription('This trap is sent when a heartbeat has occurred')
esRacktivityConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 34097, 9, 2))
esRacktivityMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 34097, 9, 2, 1))
esRacktivityMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 34097, 9, 2, 2))
esRacktivityConpliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 34097, 9, 2, 2, 1)).setObjects(("ES-RACKTIVITY-MIB", "esRacktivityMIBGroup"), ("ES-RACKTIVITY-MIB", "esRacktivityNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    esRacktivityConpliance = esRacktivityConpliance.setStatus('current')
if mibBuilder.loadTexts: esRacktivityConpliance.setDescription('The compliance statements for a Racktivity device.')
esRacktivityMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 34097, 9, 2, 1, 1))
for _esRacktivityMIBGroup_obj in [[("ES-RACKTIVITY-MIB", "mGeneralModuleStatus"), ("ES-RACKTIVITY-MIB", "mSpecificModuleStatus"), ("ES-RACKTIVITY-MIB", "mCurrentTime"), ("ES-RACKTIVITY-MIB", "mVoltage"), ("ES-RACKTIVITY-MIB", "mTemperature"), ("ES-RACKTIVITY-MIB", "mCurrentIP"), ("ES-RACKTIVITY-MIB", "mTotalCurrent"), ("ES-RACKTIVITY-MIB", "mTotalRealPower"), ("ES-RACKTIVITY-MIB", "mTotalActiveEnergy"), ("ES-RACKTIVITY-MIB", "mLineCurrent"), ("ES-RACKTIVITY-MIB", "mFuseCurrent"), ("ES-RACKTIVITY-MIB", "mCurrentSubNetMask"), ("ES-RACKTIVITY-MIB", "mCurrentDNSServer"), ("ES-RACKTIVITY-MIB", "mCurrentStdGateway"), ("ES-RACKTIVITY-MIB", "mUPSPresent"), ("ES-RACKTIVITY-MIB", "mUPSStatus"), ("ES-RACKTIVITY-MIB", "mUPSEstimatedRunTime"), ("ES-RACKTIVITY-MIB", "mUPSBatteryLevel"), ("ES-RACKTIVITY-MIB", "mHighCurrent"), ("ES-RACKTIVITY-MIB", "mUpsCommunicationStatus"), ("ES-RACKTIVITY-MIB", "mHighPower"), ("ES-RACKTIVITY-MIB", "mTotalHighCurrent"), ("ES-RACKTIVITY-MIB", "mTotalHighPower"), ("ES-RACKTIVITY-MIB", "mPositiveEnergy"), ("ES-RACKTIVITY-MIB", "mNegativeEnergy"), ("ES-RACKTIVITY-MIB", "mTotalPositiveEnergy"), ("ES-RACKTIVITY-MIB", "mTotalNegativeEnergy"), ("ES-RACKTIVITY-MIB", "mCloudStatus"), ("ES-RACKTIVITY-MIB", "mStatus"), ("ES-RACKTIVITY-MIB", "mModuleName"), ("ES-RACKTIVITY-MIB", "mFirmwareVersion"), ("ES-RACKTIVITY-MIB", "mHardwareVersion"), ("ES-RACKTIVITY-MIB", "mFirmwareID"), ("ES-RACKTIVITY-MIB", "mHardwareID"), ("ES-RACKTIVITY-MIB", "mRackName"), ("ES-RACKTIVITY-MIB", "mRackPosition"), ("ES-RACKTIVITY-MIB", "mIPAddress"), ("ES-RACKTIVITY-MIB", "mSubNetMask"), ("ES-RACKTIVITY-MIB", "mStdGateWay"), ("ES-RACKTIVITY-MIB", "mDnsServer"), ("ES-RACKTIVITY-MIB", "mMAC"), ("ES-RACKTIVITY-MIB", "mDHCPEnable"), ("ES-RACKTIVITY-MIB", "mNTPServer"), ("ES-RACKTIVITY-MIB", "mUseDefaultNTPServer"), ("ES-RACKTIVITY-MIB", "mUseNTP"), ("ES-RACKTIVITY-MIB", "mSNMPTrapRecvIP"), ("ES-RACKTIVITY-MIB", "mSNMPTrapRecvPort"), ("ES-RACKTIVITY-MIB", "mSNMPControl"), ("ES-RACKTIVITY-MIB", "mECSServer"), ("ES-RACKTIVITY-MIB", "mUseECSServer"), ("ES-RACKTIVITY-MIB", "mDisplayLock"), ("ES-RACKTIVITY-MIB", "mDisplayTimeOn"), ("ES-RACKTIVITY-MIB", "mMaxVoltageWarning"), ("ES-RACKTIVITY-MIB", "mMinVoltageWarning"), ("ES-RACKTIVITY-MIB", "mMinTemperatureWarning"), ("ES-RACKTIVITY-MIB", "mMaxTemperatureWarning"), ("ES-RACKTIVITY-MIB", "mGeneralEventEnable"), ("ES-RACKTIVITY-MIB", "mSNMPSysContact"), ("ES-RACKTIVITY-MIB", "mCurrentWarningEvent"), ("ES-RACKTIVITY-MIB", "mPowerWarningEvent"), ("ES-RACKTIVITY-MIB", "mTotalCurrentWarningEvent"), ("ES-RACKTIVITY-MIB", "mTotalPowerWarningEvent"), ("ES-RACKTIVITY-MIB", "mVoltageWarningEvent"), ("ES-RACKTIVITY-MIB", "mTemperatureWarningEvent"), ("ES-RACKTIVITY-MIB", "mDisplayBrightness"), ("ES-RACKTIVITY-MIB", "mECSServerPort"), ("ES-RACKTIVITY-MIB", "mExternalSensorLabel"), ("ES-RACKTIVITY-MIB", "mHttpsOnly"), ("ES-RACKTIVITY-MIB", "mTelnetSsl"), ("ES-RACKTIVITY-MIB", "mCookieTimeToLive"), ("ES-RACKTIVITY-MIB", "mLineCurrentWarningThreshold"), ("ES-RACKTIVITY-MIB", "mLineCurrentOffThreshold"), ("ES-RACKTIVITY-MIB", "mLineCurrentWarningEvent"), ("ES-RACKTIVITY-MIB", "mLineCurrentOffEvent"), ("ES-RACKTIVITY-MIB", "mFuseCurrentWarningThreshold"), ("ES-RACKTIVITY-MIB", "mFuseCurrentOffThreshold"), ("ES-RACKTIVITY-MIB", "mFuseCurrentWarningEvent"), ("ES-RACKTIVITY-MIB", "mFuseCurrentOffEvent"), ("ES-RACKTIVITY-MIB", "mDeviceID"), ("ES-RACKTIVITY-MIB", "mDeviceVersion"), ("ES-RACKTIVITY-MIB", "mSysName"), ("ES-RACKTIVITY-MIB", "mElectricalTopology"), ("ES-RACKTIVITY-MIB", "mFusePortTopology"), ("ES-RACKTIVITY-MIB", "mLineFuseTopology"), ("ES-RACKTIVITY-MIB", "mSSOIPAddress"), ("ES-RACKTIVITY-MIB", "mSSOLoginCredentials"), ("ES-RACKTIVITY-MIB", "mSSOGracefullShutdown"), ("ES-RACKTIVITY-MIB", "mUPSWarningLevel"), ("ES-RACKTIVITY-MIB", "mUPSOffLevel"), ("ES-RACKTIVITY-MIB", "mMaxHighCurrentWarning"), ("ES-RACKTIVITY-MIB", "mUpsMonitoringProtocol"), ("ES-RACKTIVITY-MIB", "mUpsEmergencyThreshold"), ("ES-RACKTIVITY-MIB", "mUpsRecoveryThreshold"), ("ES-RACKTIVITY-MIB", "mUpsEventFlags"), ("ES-RACKTIVITY-MIB", "mRecoveryPowerThreshold"), ("ES-RACKTIVITY-MIB", "mMinHighCurrentWarning"), ("ES-RACKTIVITY-MIB", "mMinHighPowerWarning"), ("ES-RACKTIVITY-MIB", "mMaxHighPowerWarning"), ("ES-RACKTIVITY-MIB", "mHeartbeatInterval"), ("ES-RACKTIVITY-MIB", "mMinTotalHighCurrentWarning"), ("ES-RACKTIVITY-MIB", "mMaxTotalHighCurrentWarning"), ("ES-RACKTIVITY-MIB", "mMinTotalHighPowerWarning"), ("ES-RACKTIVITY-MIB", "mMaxTotalHighPowerWarning"), ("ES-RACKTIVITY-MIB", "mCloudState"), ("ES-RACKTIVITY-MIB", "mSensorBias"), ("ES-RACKTIVITY-MIB", "mDaisyChainDeviceMode"), ("ES-RACKTIVITY-MIB", "mSNMPTrapUser"), ("ES-RACKTIVITY-MIB", "mUSMUser"), ("ES-RACKTIVITY-MIB", "mUSMAuthPassphrase"), ("ES-RACKTIVITY-MIB", "mUSMPrivPassphrase"), ("ES-RACKTIVITY-MIB", "mSNMPV2GetSetEnable"), ("ES-RACKTIVITY-MIB", "mSNMPV3GetSetEnable"), ("ES-RACKTIVITY-MIB", "mUSMAuthPassphraseLength"), ("ES-RACKTIVITY-MIB", "mUSMPrivPassphraseLength"), ("ES-RACKTIVITY-MIB", "mSNMPTrapEnable"), ("ES-RACKTIVITY-MIB", "mLDAPAttribute"), ("ES-RACKTIVITY-MIB", "mLDAPPath"), ("ES-RACKTIVITY-MIB", "mLDAPAdminGroupName"), ("ES-RACKTIVITY-MIB", "mLDAPRestrictedGroupName"), ("ES-RACKTIVITY-MIB", "mLDAPGuestGroupName"), ("ES-RACKTIVITY-MIB", "mLDAPEnable"), ("ES-RACKTIVITY-MIB", "mLDAPLoginWrapper"), ("ES-RACKTIVITY-MIB", "mLDAPServer"), ("ES-RACKTIVITY-MIB", "mLocalAuthEnable"), ("ES-RACKTIVITY-MIB", "pGeneralModuleStatus"), ("ES-RACKTIVITY-MIB", "pSpecificModuleStatus"), ("ES-RACKTIVITY-MIB", "pCurrentTime"), ("ES-RACKTIVITY-MIB", "pVoltage"), ("ES-RACKTIVITY-MIB", "pFrequency"), ("ES-RACKTIVITY-MIB", "pCurrent"), ("ES-RACKTIVITY-MIB", "pPower"), ("ES-RACKTIVITY-MIB", "pStatePortCur"), ("ES-RACKTIVITY-MIB", "pActiveEnergy"), ("ES-RACKTIVITY-MIB", "pApparentEnergy"), ("ES-RACKTIVITY-MIB", "pTemperature"), ("ES-RACKTIVITY-MIB", "pApparentPower"), ("ES-RACKTIVITY-MIB", "pPowerFactor"), ("ES-RACKTIVITY-MIB", "pTotalCurrent"), ("ES-RACKTIVITY-MIB", "pTotalRealPower"), ("ES-RACKTIVITY-MIB", "pTotalApparentPower"), ("ES-RACKTIVITY-MIB", "pTotalActiveEnergy"), ("ES-RACKTIVITY-MIB", "pTotalApparentEnergy"), ("ES-RACKTIVITY-MIB", "pTotalPowerFactor"), ("ES-RACKTIVITY-MIB", "pTimeOnline"), ("ES-RACKTIVITY-MIB", "pTotalHarmonicDistortion"), ("ES-RACKTIVITY-MIB", "pPhase"), ("ES-RACKTIVITY-MIB", "pBigCurrent"), ("ES-RACKTIVITY-MIB", "pBigPower"), ("ES-RACKTIVITY-MIB", "pBigApparentPower"), ("ES-RACKTIVITY-MIB", "pDetectedPhase"), ("ES-RACKTIVITY-MIB", "pModuleName"), ("ES-RACKTIVITY-MIB", "pFirmwareVersion"), ("ES-RACKTIVITY-MIB", "pHardwareVersion"), ("ES-RACKTIVITY-MIB", "pFirmwareID"), ("ES-RACKTIVITY-MIB", "pHardwareID"), ("ES-RACKTIVITY-MIB", "pPortName"), ("ES-RACKTIVITY-MIB", "pPortState"), ("ES-RACKTIVITY-MIB", "pCurrentPriorOff"), ("ES-RACKTIVITY-MIB", "pDelayOn"), ("ES-RACKTIVITY-MIB", "pMaxCurrentOff"), ("ES-RACKTIVITY-MIB", "pMaxCurrentWarning"), ("ES-RACKTIVITY-MIB", "pMaxPowerOff"), ("ES-RACKTIVITY-MIB", "pMaxPowerWarning"), ("ES-RACKTIVITY-MIB", "pMaxTotalCurrentOff"), ("ES-RACKTIVITY-MIB", "pMaxTotalCurrentWarning"), ("ES-RACKTIVITY-MIB", "pMaxTotalPowerOff"), ("ES-RACKTIVITY-MIB", "pMaxTotalPowerWarning"), ("ES-RACKTIVITY-MIB", "pMaxVoltageWarning"), ("ES-RACKTIVITY-MIB", "pMinVoltageWarning"), ("ES-RACKTIVITY-MIB", "pMinTemperatureWarning"), ("ES-RACKTIVITY-MIB", "pMaxTemperatureWarning"), ("ES-RACKTIVITY-MIB", "pPortStateEvent"), ("ES-RACKTIVITY-MIB", "pCurrentOffEvent"), ("ES-RACKTIVITY-MIB", "pCurrentWarningEvent"), ("ES-RACKTIVITY-MIB", "pPowerOffEvent"), ("ES-RACKTIVITY-MIB", "pPowerWarningEvent"), ("ES-RACKTIVITY-MIB", "pTotalCurrentOffEvent"), ("ES-RACKTIVITY-MIB", "pTotalCurrentWarningEvent"), ("ES-RACKTIVITY-MIB", "pTotalPowerOffEvent"), ("ES-RACKTIVITY-MIB", "pTotalPowerWarningEvent"), ("ES-RACKTIVITY-MIB", "pVoltageWarningEvent"), ("ES-RACKTIVITY-MIB", "pTemperatureWarningEvent"), ("ES-RACKTIVITY-MIB", "pMaxOverheatingOff"), ("ES-RACKTIVITY-MIB", "pOverheatingOffEvent"), ("ES-RACKTIVITY-MIB", "pPowerCycleTime"), ("ES-RACKTIVITY-MIB", "pExternalSensorLabel"), ("ES-RACKTIVITY-MIB", "pMaxOverheatingWarning"), ("ES-RACKTIVITY-MIB", "pOverheatingWarningEvent"), ("ES-RACKTIVITY-MIB", "pMicroIntTimeThreshold"), ("ES-RACKTIVITY-MIB", "pMicroIntEvent"), ("ES-RACKTIVITY-MIB", "pSoftFuseCurrentThreshold"), ("ES-RACKTIVITY-MIB", "pSoftFuseDelay"), ("ES-RACKTIVITY-MIB", "pSoftFuseEvent"), ("ES-RACKTIVITY-MIB", "pPhaseShiftEvent"), ("ES-RACKTIVITY-MIB", "pSchedulePortOnTime"), ("ES-RACKTIVITY-MIB", "pSchedulePortOffTime"), ("ES-RACKTIVITY-MIB", "pEnableSchedulePort"), ("ES-RACKTIVITY-MIB", "pBlockSetPortOff"), ("ES-RACKTIVITY-MIB", "pSchedulePortChangeEvent"), ("ES-RACKTIVITY-MIB", "pAgentIP"), ("ES-RACKTIVITY-MIB", "pAgentPort"), ("ES-RACKTIVITY-MIB", "pAgentCommunicationEventFlags"), ("ES-RACKTIVITY-MIB", "pAlwaysOn"), ("ES-RACKTIVITY-MIB", "pGenericTransducerParameters"), ("ES-RACKTIVITY-MIB", "pMaxBigCurrentWarning"), ("ES-RACKTIVITY-MIB", "pMaxBigPowerWarning"), ("ES-RACKTIVITY-MIB", "pGroupNumber"), ("ES-RACKTIVITY-MIB", "pPhaseLink"), ("ES-RACKTIVITY-MIB", "pCurrentSensorSelector"), ("ES-RACKTIVITY-MIB", "pMinBigCurrentWarning"), ("ES-RACKTIVITY-MIB", "aGeneralModuleStatus"), ("ES-RACKTIVITY-MIB", "aSpecificModuleStatus"), ("ES-RACKTIVITY-MIB", "aCurrentTime"), ("ES-RACKTIVITY-MIB", "aVoltage"), ("ES-RACKTIVITY-MIB", "aStatePortCur"), ("ES-RACKTIVITY-MIB", "aTemperature"), ("ES-RACKTIVITY-MIB", "aHumidity"), ("ES-RACKTIVITY-MIB", "aAirflow"), ("ES-RACKTIVITY-MIB", "aDewPoint"), ("ES-RACKTIVITY-MIB", "aPressure"), ("ES-RACKTIVITY-MIB", "aAnalogueInput"), ("ES-RACKTIVITY-MIB", "aWaterleak"), ("ES-RACKTIVITY-MIB", "aMotionDetected"), ("ES-RACKTIVITY-MIB", "aIOPort"), ("ES-RACKTIVITY-MIB", "aHighCurrent"), ("ES-RACKTIVITY-MIB", "aHighPower"), ("ES-RACKTIVITY-MIB", "aModuleName"), ("ES-RACKTIVITY-MIB", "aFirmwareVersion"), ("ES-RACKTIVITY-MIB", "aHardwareVersion"), ("ES-RACKTIVITY-MIB", "aFirmwareID"), ("ES-RACKTIVITY-MIB", "aHardwareID"), ("ES-RACKTIVITY-MIB", "aDisplayTimeOn"), ("ES-RACKTIVITY-MIB", "aMaxVoltageWarning"), ("ES-RACKTIVITY-MIB", "aMinVoltageWarning"), ("ES-RACKTIVITY-MIB", "aMinTemperatureWarning"), ("ES-RACKTIVITY-MIB", "aMaxTemperatureWarning"), ("ES-RACKTIVITY-MIB", "aMinHumidityWarning"), ("ES-RACKTIVITY-MIB", "aMaxHumidityWarning"), ("ES-RACKTIVITY-MIB", "aCurrentWarningEvent"), ("ES-RACKTIVITY-MIB", "aPowerWarningEvent"), ("ES-RACKTIVITY-MIB", "aVoltageWarningEvent"), ("ES-RACKTIVITY-MIB", "aTemperatureWarningEvent"), ("ES-RACKTIVITY-MIB", "aHumidityWarningEvent"), ("ES-RACKTIVITY-MIB", "aDewPointWarning"), ("ES-RACKTIVITY-MIB", "aDewPointWarningEvent"), ("ES-RACKTIVITY-MIB", "aDewPointViolationEvent"), ("ES-RACKTIVITY-MIB", "aPressureWarningEvent"), ("ES-RACKTIVITY-MIB", "aMinPressureWarning"), ("ES-RACKTIVITY-MIB", "aMaxPressureWarning"), ("ES-RACKTIVITY-MIB", "aDisplayBrightness"), ("ES-RACKTIVITY-MIB", "aMotionSensitivity"), ("ES-RACKTIVITY-MIB", "aExternalSensorLabel"), ("ES-RACKTIVITY-MIB", "aRelayLabel"), ("ES-RACKTIVITY-MIB", "aMinAnalogueInputWarning"), ("ES-RACKTIVITY-MIB", "aMaxAnalogueInputWarning")], [("ES-RACKTIVITY-MIB", "aWaterleakWarning"), ("ES-RACKTIVITY-MIB", "aMinAirflowWarning"), ("ES-RACKTIVITY-MIB", "aMaxAirflowWarning"), ("ES-RACKTIVITY-MIB", "aAnalogueInputWarningEvent"), ("ES-RACKTIVITY-MIB", "aWaterleakWarningEvent"), ("ES-RACKTIVITY-MIB", "aAirflowWarningEvent"), ("ES-RACKTIVITY-MIB", "aRelayAssertActionEvent"), ("ES-RACKTIVITY-MIB", "aRelayDeassertActionEvent"), ("ES-RACKTIVITY-MIB", "aMotionWarning"), ("ES-RACKTIVITY-MIB", "aMotionWarningEvent"), ("ES-RACKTIVITY-MIB", "aDeviceID"), ("ES-RACKTIVITY-MIB", "aDeviceVersion"), ("ES-RACKTIVITY-MIB", "aSysName"), ("ES-RACKTIVITY-MIB", "aMaxHighCurrentWarning"), ("ES-RACKTIVITY-MIB", "aMinHighCurrentWarning"), ("ES-RACKTIVITY-MIB", "aMinHighPowerWarning"), ("ES-RACKTIVITY-MIB", "aMaxHighPowerWarning"), ("ES-RACKTIVITY-MIB", "aIOPortWarningEvent"), ("ES-RACKTIVITY-MIB", "yGeneralModuleStatus"), ("ES-RACKTIVITY-MIB", "ySpecificModuleStatus"), ("ES-RACKTIVITY-MIB", "yCurrentTime"), ("ES-RACKTIVITY-MIB", "yCurrent"), ("ES-RACKTIVITY-MIB", "yStatePortCur"), ("ES-RACKTIVITY-MIB", "yAnalogueInput"), ("ES-RACKTIVITY-MIB", "yModuleName"), ("ES-RACKTIVITY-MIB", "yFirmwareVersion"), ("ES-RACKTIVITY-MIB", "yHardwareVersion"), ("ES-RACKTIVITY-MIB", "yFirmwareID"), ("ES-RACKTIVITY-MIB", "yHardwareID"), ("ES-RACKTIVITY-MIB", "uGeneralModuleStatus"), ("ES-RACKTIVITY-MIB", "uSpecificModuleStatus"), ("ES-RACKTIVITY-MIB", "uCurrentTime"), ("ES-RACKTIVITY-MIB", "uVoltage"), ("ES-RACKTIVITY-MIB", "uCurrent"), ("ES-RACKTIVITY-MIB", "uStatePortCur"), ("ES-RACKTIVITY-MIB", "uTemperature"), ("ES-RACKTIVITY-MIB", "uHumidity"), ("ES-RACKTIVITY-MIB", "uModuleName"), ("ES-RACKTIVITY-MIB", "uFirmwareVersion"), ("ES-RACKTIVITY-MIB", "uHardwareVersion"), ("ES-RACKTIVITY-MIB", "uFirmwareID"), ("ES-RACKTIVITY-MIB", "uHardwareID"), ("ES-RACKTIVITY-MIB", "uPortState"), ("ES-RACKTIVITY-MIB", "eGeneralModuleStatus"), ("ES-RACKTIVITY-MIB", "eSpecificModuleStatus"), ("ES-RACKTIVITY-MIB", "eCurrentTime"), ("ES-RACKTIVITY-MIB", "eVoltage"), ("ES-RACKTIVITY-MIB", "eFrequency"), ("ES-RACKTIVITY-MIB", "eCurrent"), ("ES-RACKTIVITY-MIB", "ePower"), ("ES-RACKTIVITY-MIB", "eActiveEnergy"), ("ES-RACKTIVITY-MIB", "eApparentEnergy"), ("ES-RACKTIVITY-MIB", "eTemperature"), ("ES-RACKTIVITY-MIB", "eApparentPower"), ("ES-RACKTIVITY-MIB", "ePowerFactor"), ("ES-RACKTIVITY-MIB", "eTotalCurrent"), ("ES-RACKTIVITY-MIB", "eTotalRealPower"), ("ES-RACKTIVITY-MIB", "eTotalApparentPower"), ("ES-RACKTIVITY-MIB", "eTotalActiveEnergy"), ("ES-RACKTIVITY-MIB", "eTotalApparentEnergy"), ("ES-RACKTIVITY-MIB", "eTotalPowerFactor"), ("ES-RACKTIVITY-MIB", "eTimeOnline"), ("ES-RACKTIVITY-MIB", "eTotalHarmonicDistortion"), ("ES-RACKTIVITY-MIB", "eModuleName"), ("ES-RACKTIVITY-MIB", "eFirmwareVersion"), ("ES-RACKTIVITY-MIB", "eHardwareVersion"), ("ES-RACKTIVITY-MIB", "eFirmwareID"), ("ES-RACKTIVITY-MIB", "eHardwareID"), ("ES-RACKTIVITY-MIB", "eMaxCurrentWarning"), ("ES-RACKTIVITY-MIB", "eMaxPowerWarning"), ("ES-RACKTIVITY-MIB", "eMaxTotalCurrentWarning"), ("ES-RACKTIVITY-MIB", "eMaxTotalPowerWarning"), ("ES-RACKTIVITY-MIB", "eMaxVoltageWarning"), ("ES-RACKTIVITY-MIB", "eMinVoltageWarning"), ("ES-RACKTIVITY-MIB", "eMinTemperatureWarning"), ("ES-RACKTIVITY-MIB", "eMaxTemperatureWarning"), ("ES-RACKTIVITY-MIB", "eCurrentWarningEvent"), ("ES-RACKTIVITY-MIB", "ePowerWarningEvent"), ("ES-RACKTIVITY-MIB", "eTotalCurrentWarningEvent"), ("ES-RACKTIVITY-MIB", "eTotalPowerWarningEvent"), ("ES-RACKTIVITY-MIB", "eVoltageWarningEvent"), ("ES-RACKTIVITY-MIB", "eTemperatureWarningEvent"), ("ES-RACKTIVITY-MIB", "eMicroIntTimeThreshold"), ("ES-RACKTIVITY-MIB", "eMicroIntEvent"), ("ES-RACKTIVITY-MIB", "qGeneralModuleStatus"), ("ES-RACKTIVITY-MIB", "qSpecificModuleStatus"), ("ES-RACKTIVITY-MIB", "qCurrentTime"), ("ES-RACKTIVITY-MIB", "qVoltage"), ("ES-RACKTIVITY-MIB", "qFrequency"), ("ES-RACKTIVITY-MIB", "qActiveEnergy"), ("ES-RACKTIVITY-MIB", "qApparentEnergy"), ("ES-RACKTIVITY-MIB", "qTemperature"), ("ES-RACKTIVITY-MIB", "qPowerFactor"), ("ES-RACKTIVITY-MIB", "qTimeOnline"), ("ES-RACKTIVITY-MIB", "qIOPort"), ("ES-RACKTIVITY-MIB", "qTotalHarmonicDistortion"), ("ES-RACKTIVITY-MIB", "qPhase"), ("ES-RACKTIVITY-MIB", "qBigCurrent"), ("ES-RACKTIVITY-MIB", "qBigPower"), ("ES-RACKTIVITY-MIB", "qBigApparentPower"), ("ES-RACKTIVITY-MIB", "qStatus"), ("ES-RACKTIVITY-MIB", "qModuleName"), ("ES-RACKTIVITY-MIB", "qFirmwareVersion"), ("ES-RACKTIVITY-MIB", "qHardwareVersion"), ("ES-RACKTIVITY-MIB", "qFirmwareID"), ("ES-RACKTIVITY-MIB", "qHardwareID"), ("ES-RACKTIVITY-MIB", "qPortState"), ("ES-RACKTIVITY-MIB", "qMaxVoltageWarning"), ("ES-RACKTIVITY-MIB", "qMinVoltageWarning"), ("ES-RACKTIVITY-MIB", "qMinTemperatureWarning"), ("ES-RACKTIVITY-MIB", "qMaxTemperatureWarning"), ("ES-RACKTIVITY-MIB", "qPortStateEvent"), ("ES-RACKTIVITY-MIB", "qCurrentWarningEvent"), ("ES-RACKTIVITY-MIB", "qPowerWarningEvent"), ("ES-RACKTIVITY-MIB", "qVoltageWarningEvent"), ("ES-RACKTIVITY-MIB", "qTemperatureWarningEvent"), ("ES-RACKTIVITY-MIB", "qMicroIntTimeThreshold"), ("ES-RACKTIVITY-MIB", "qMicroIntEvent"), ("ES-RACKTIVITY-MIB", "qDeviceID"), ("ES-RACKTIVITY-MIB", "qDeviceVersion"), ("ES-RACKTIVITY-MIB", "qMaxBigCurrentWarning"), ("ES-RACKTIVITY-MIB", "qMaxBigPowerWarning"), ("ES-RACKTIVITY-MIB", "qCurrentSensorSelector"), ("ES-RACKTIVITY-MIB", "qMinBigCurrentWarning"), ("ES-RACKTIVITY-MIB", "qkWhMode"), ("ES-RACKTIVITY-MIB", "dGeneralModuleStatus"), ("ES-RACKTIVITY-MIB", "dSpecificModuleStatus"), ("ES-RACKTIVITY-MIB", "dCurrentTime"), ("ES-RACKTIVITY-MIB", "dTemperature"), ("ES-RACKTIVITY-MIB", "dTimeOnline"), ("ES-RACKTIVITY-MIB", "dModuleName"), ("ES-RACKTIVITY-MIB", "dFirmwareVersion"), ("ES-RACKTIVITY-MIB", "dHardwareVersion"), ("ES-RACKTIVITY-MIB", "dFirmwareID"), ("ES-RACKTIVITY-MIB", "dHardwareID"), ("ES-RACKTIVITY-MIB", "dMinTemperatureWarning"), ("ES-RACKTIVITY-MIB", "dMaxTemperatureWarning"), ("ES-RACKTIVITY-MIB", "dDisplayAllDevices")]]:
    if getattr(mibBuilder, 'version', 0) < (4, 4, 2):
        # WARNING: leading objects get lost here!
        esRacktivityMIBGroup = esRacktivityMIBGroup.setObjects(*_esRacktivityMIBGroup_obj)
    else:
        esRacktivityMIBGroup = esRacktivityMIBGroup.setObjects(*_esRacktivityMIBGroup_obj, **dict(append=True))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    esRacktivityMIBGroup = esRacktivityMIBGroup.setStatus('current')
if mibBuilder.loadTexts: esRacktivityMIBGroup.setDescription('All accessible objects in a Racktivity device')
esRacktivityNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 34097, 9, 2, 1, 2)).setObjects(("ES-RACKTIVITY-MIB", "errorValueTooHighRaised"), ("ES-RACKTIVITY-MIB", "errorValueTooLowRaised"), ("ES-RACKTIVITY-MIB", "errorRaised"), ("ES-RACKTIVITY-MIB", "errorValueTooHighCleared"), ("ES-RACKTIVITY-MIB", "errorValueTooLowCleared"), ("ES-RACKTIVITY-MIB", "errorCleared"), ("ES-RACKTIVITY-MIB", "warningValueTooHighRaised"), ("ES-RACKTIVITY-MIB", "warningValueTooLowRaised"), ("ES-RACKTIVITY-MIB", "warningRaised"), ("ES-RACKTIVITY-MIB", "warningValueTooHighCleared"), ("ES-RACKTIVITY-MIB", "warningValueTooLowCleared"), ("ES-RACKTIVITY-MIB", "warningCleared"), ("ES-RACKTIVITY-MIB", "infoValueTooHighRaised"), ("ES-RACKTIVITY-MIB", "infoPortStateChanged"), ("ES-RACKTIVITY-MIB", "infoReset"), ("ES-RACKTIVITY-MIB", "infoValueTooLowRaised"), ("ES-RACKTIVITY-MIB", "infoRaised"), ("ES-RACKTIVITY-MIB", "infoValueTooHighCleared"), ("ES-RACKTIVITY-MIB", "infoValueTooLowCleared"), ("ES-RACKTIVITY-MIB", "infoCleared"), ("ES-RACKTIVITY-MIB", "infoUpgrade"), ("ES-RACKTIVITY-MIB", "warningMicroInterruption"), ("ES-RACKTIVITY-MIB", "warningPhaseShift"), ("ES-RACKTIVITY-MIB", "infoPortSchedule"), ("ES-RACKTIVITY-MIB", "infoHeartbeat"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    esRacktivityNotificationGroup = esRacktivityNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: esRacktivityNotificationGroup.setDescription('All notification that can be sent out by a Racktivity device')
mibBuilder.exportSymbols("ES-RACKTIVITY-MIB", mSNMPTrapEnable=mSNMPTrapEnable, mMinHighPowerWarning=mMinHighPowerWarning, esnModule=esnModule, aIOPortWarningEvent=aIOPortWarningEvent, pOverheatingOffEvent=pOverheatingOffEvent, mUseNTP=mUseNTP, eModuleName=eModuleName, esnIndex=esnIndex, dMinTemperatureWarning=dMinTemperatureWarning, yFirmwareVersion=yFirmwareVersion, mIPAddress=mIPAddress, eTotalPowerWarningEvent=eTotalPowerWarningEvent, powerIndex=powerIndex, infoHeartbeat=infoHeartbeat, pPhaseLink=pPhaseLink, mCurrentDNSServer=mCurrentDNSServer, qModuleName=qModuleName, mUseDefaultNTPServer=mUseDefaultNTPServer, measuring3phaseModuleIndex=measuring3phaseModuleIndex, mCloudState=mCloudState, dGeneralModuleStatus=dGeneralModuleStatus, dFirmwareVersion=dFirmwareVersion, mPowerWarningEvent=mPowerWarningEvent, aSysName=aSysName, aSpecificModuleStatus=aSpecificModuleStatus, mStatus=mStatus, aHardwareVersion=aHardwareVersion, qVoltageWarningEvent=qVoltageWarningEvent, aMaxVoltageWarning=aMaxVoltageWarning, ePower=ePower, pSchedulePortOffTime=pSchedulePortOffTime, mFuseCurrent=mFuseCurrent, mHighCurrent=mHighCurrent, mTotalNegativeEnergy=mTotalNegativeEnergy, mTemperatureWarningEvent=mTemperatureWarningEvent, qMaxBigPowerWarning=qMaxBigPowerWarning, qActiveEnergy=qActiveEnergy, mLDAPAdminGroupName=mLDAPAdminGroupName, uSpecificModuleStatus=uSpecificModuleStatus, pSpecificModuleStatus=pSpecificModuleStatus, errorValueTooLowRaised=errorValueTooLowRaised, mHardwareID=mHardwareID, dMaxTemperatureWarning=dMaxTemperatureWarning, mNegativeEnergy=mNegativeEnergy, eMinTemperatureWarning=eMinTemperatureWarning, eTotalActiveEnergy=eTotalActiveEnergy, aWaterleak=aWaterleak, mDeviceID=mDeviceID, aMinHighPowerWarning=aMinHighPowerWarning, eMicroIntEvent=eMicroIntEvent, mTotalPowerWarningEvent=mTotalPowerWarningEvent, mTemperature=mTemperature, aRelayDeassertActionEvent=aRelayDeassertActionEvent, aDisplayBrightness=aDisplayBrightness, aAnalogueInput=aAnalogueInput, powerModuleIndex=powerModuleIndex, infoValueTooLowRaised=infoValueTooLowRaised, aMaxHighCurrentWarning=aMaxHighCurrentWarning, eMeasuring3PhaseTable=eMeasuring3PhaseTable, measuring3phaseIndex=measuring3phaseIndex, eVoltage=eVoltage, mUpsEmergencyThreshold=mUpsEmergencyThreshold, mLDAPAttribute=mLDAPAttribute, pDetectedPhase=pDetectedPhase, qPhase=qPhase, eTotalRealPower=eTotalRealPower, mMaxHighPowerWarning=mMaxHighPowerWarning, mLDAPLoginWrapper=mLDAPLoginWrapper, aExternalSensorLabel=aExternalSensorLabel, eEnergyMonitorEntry=eEnergyMonitorEntry, aMaxTemperatureWarning=aMaxTemperatureWarning, pMaxTotalCurrentOff=pMaxTotalCurrentOff, esRacktivityNotificationGroup=esRacktivityNotificationGroup, pTotalApparentPower=pTotalApparentPower, pBigCurrent=pBigCurrent, aTemperatureWarningEvent=aTemperatureWarningEvent, eMaxPowerWarning=eMaxPowerWarning, uVoltage=uVoltage, yModuleName=yModuleName, errorRaised=errorRaised, mCookieTimeToLive=mCookieTimeToLive, eESNEntry=eESNEntry, infoCleared=infoCleared, pMaxBigCurrentWarning=pMaxBigCurrentWarning, pBigPower=pBigPower, eHardwareID=eHardwareID, pMicroIntTimeThreshold=pMicroIntTimeThreshold, eApparentEnergy=eApparentEnergy, aPressure=aPressure, yStatePortCur=yStatePortCur, ePCEntry=ePCEntry, mFuseCurrentWarningEvent=mFuseCurrentWarningEvent, qTemperature=qTemperature, testmoduleIndex=testmoduleIndex, pPhase=pPhase, mRackPosition=mRackPosition, aMotionSensitivity=aMotionSensitivity, qCurrentWarningEvent=qCurrentWarningEvent, aDeviceID=aDeviceID, Stenth=Stenth, mSNMPV3GetSetEnable=mSNMPV3GetSetEnable, esRacktivityMIBGroups=esRacktivityMIBGroups, warningCleared=warningCleared, mPositiveEnergy=mPositiveEnergy, aMotionWarningEvent=aMotionWarningEvent, pFirmwareVersion=pFirmwareVersion, qIOPort=qIOPort, pMaxPowerWarning=pMaxPowerWarning, qMaxVoltageWarning=qMaxVoltageWarning, mLDAPRestrictedGroupName=mLDAPRestrictedGroupName, pAgentIP=pAgentIP, aMinVoltageWarning=aMinVoltageWarning, mLineCurrentOffEvent=mLineCurrentOffEvent, mDHCPEnable=mDHCPEnable, qFirmwareVersion=qFirmwareVersion, aMaxHighPowerWarning=aMaxHighPowerWarning, mMinVoltageWarning=mMinVoltageWarning, mUPSWarningLevel=mUPSWarningLevel, pExternalSensorLabel=pExternalSensorLabel, aMotionDetected=aMotionDetected, aCurrentWarningEvent=aCurrentWarningEvent, ePowerFactor=ePowerFactor, Utenth=Utenth, mFirmwareVersion=mFirmwareVersion, pOverheatingWarningEvent=pOverheatingWarningEvent, uHumidity=uHumidity, qBigApparentPower=qBigApparentPower, pMaxTotalPowerWarning=pMaxTotalPowerWarning, qPowerFactor=qPowerFactor, mLDAPEnable=mLDAPEnable, eMasterEntry=eMasterEntry, pVoltageWarningEvent=pVoltageWarningEvent, mHighPower=mHighPower, pGeneralModuleStatus=pGeneralModuleStatus, errorValueTooLowCleared=errorValueTooLowCleared, mHeartbeatInterval=mHeartbeatInterval, mStdGateWay=mStdGateWay, qMinVoltageWarning=qMinVoltageWarning, mGeneralEventEnable=mGeneralEventEnable, yGeneralModuleStatus=yGeneralModuleStatus, pSchedulePortOnTime=pSchedulePortOnTime, mDaisyChainDeviceMode=mDaisyChainDeviceMode, pCurrentWarningEvent=pCurrentWarningEvent, mCurrentStdGateway=mCurrentStdGateway, aFirmwareVersion=aFirmwareVersion, mFuseCurrentOffThreshold=mFuseCurrentOffThreshold, mUPSOffLevel=mUPSOffLevel, qApparentEnergy=qApparentEnergy, mUseECSServer=mUseECSServer, dHardwareID=dHardwareID, pMaxPowerOff=pMaxPowerOff, esRACKTIVITYMIB=esRACKTIVITYMIB, mLineCurrentWarningThreshold=mLineCurrentWarningThreshold, pTotalCurrentOffEvent=pTotalCurrentOffEvent, pMaxOverheatingWarning=pMaxOverheatingWarning, pTotalApparentEnergy=pTotalApparentEnergy, pMaxCurrentOff=pMaxCurrentOff, mFusePortTopology=mFusePortTopology, pCurrentOffEvent=pCurrentOffEvent, mTelnetSsl=mTelnetSsl, eDisplayModuleTable=eDisplayModuleTable, eMaxVoltageWarning=eMaxVoltageWarning, mHttpsOnly=mHttpsOnly, aVoltage=aVoltage, mDnsServer=mDnsServer, mSNMPTrapRecvIP=mSNMPTrapRecvIP, ePowerTable=ePowerTable, aDewPointViolationEvent=aDewPointViolationEvent, eTestModuleEntry=eTestModuleEntry, eMaxTotalPowerWarning=eMaxTotalPowerWarning, qBigPower=qBigPower, eTotalCurrentWarningEvent=eTotalCurrentWarningEvent, mFirmwareID=mFirmwareID, warningMicroInterruption=warningMicroInterruption, pHardwareVersion=pHardwareVersion, aDewPoint=aDewPoint, pFrequency=pFrequency, eTestModuleTable=eTestModuleTable, mSSOLoginCredentials=mSSOLoginCredentials, uHardwareVersion=uHardwareVersion, uFirmwareID=uFirmwareID, warningValueTooLowCleared=warningValueTooLowCleared, eHardwareVersion=eHardwareVersion, qCurrentTime=qCurrentTime, infoRaised=infoRaised, eCurrentWarningEvent=eCurrentWarningEvent, mUpsEventFlags=mUpsEventFlags, Sthousandth=Sthousandth, pCurrentSensorSelector=pCurrentSensorSelector, aMotionWarning=aMotionWarning, mUPSPresent=mUPSPresent, mLDAPGuestGroupName=mLDAPGuestGroupName, mDeviceVersion=mDeviceVersion, pAgentCommunicationEventFlags=pAgentCommunicationEventFlags, mMinHighCurrentWarning=mMinHighCurrentWarning, eVoltageWarningEvent=eVoltageWarningEvent, threephasepowerModuleIndex=threephasepowerModuleIndex, mECSServer=mECSServer, mCloudStatus=mCloudStatus, aAirflow=aAirflow, uFirmwareVersion=uFirmwareVersion, infoValueTooHighCleared=infoValueTooHighCleared, aMaxAirflowWarning=aMaxAirflowWarning, mUSMAuthPassphrase=mUSMAuthPassphrase, mGeneralModuleStatus=mGeneralModuleStatus, aMinTemperatureWarning=aMinTemperatureWarning, aStatePortCur=aStatePortCur, mRecoveryPowerThreshold=mRecoveryPowerThreshold, eMaxTotalCurrentWarning=eMaxTotalCurrentWarning, aMinHumidityWarning=aMinHumidityWarning, uGeneralModuleStatus=uGeneralModuleStatus, measuring3phaseModule=measuring3phaseModule, eMinVoltageWarning=eMinVoltageWarning, pPowerFactor=pPowerFactor, PYSNMP_MODULE_ID=esRACKTIVITYMIB, dSpecificModuleStatus=dSpecificModuleStatus, dFirmwareID=dFirmwareID, qCurrentSensorSelector=qCurrentSensorSelector, pTemperatureWarningEvent=pTemperatureWarningEvent, aMinAnalogueInputWarning=aMinAnalogueInputWarning, aWaterleakWarningEvent=aWaterleakWarningEvent, infoValueTooLowCleared=infoValueTooLowCleared, esRacktivityConpliance=esRacktivityConpliance, aHighCurrent=aHighCurrent, esRacktivityMIBCompliances=esRacktivityMIBCompliances, errorValueTooHighRaised=errorValueTooHighRaised, eTotalApparentPower=eTotalApparentPower, aCurrentTime=aCurrentTime, qMaxTemperatureWarning=qMaxTemperatureWarning, mNTPServer=mNTPServer, dDisplayAllDevices=dDisplayAllDevices, uModuleName=uModuleName, qMinTemperatureWarning=qMinTemperatureWarning, qTimeOnline=qTimeOnline, qVoltage=qVoltage, masterModule=masterModule, pFirmwareID=pFirmwareID, pTotalActiveEnergy=pTotalActiveEnergy, aVoltageWarningEvent=aVoltageWarningEvent, eThreePhasePowerEntry=eThreePhasePowerEntry, mSNMPSysContact=mSNMPSysContact, qTemperatureWarningEvent=qTemperatureWarningEvent, qMicroIntTimeThreshold=qMicroIntTimeThreshold, uHardwareID=uHardwareID, pPortName=pPortName, qDeviceVersion=qDeviceVersion, mLineFuseTopology=mLineFuseTopology, aMaxPressureWarning=aMaxPressureWarning, pCurrent=pCurrent, aMaxAnalogueInputWarning=aMaxAnalogueInputWarning, pAgentPort=pAgentPort, pMaxCurrentWarning=pMaxCurrentWarning, pTimeOnline=pTimeOnline, aMinPressureWarning=aMinPressureWarning)
mibBuilder.exportSymbols("ES-RACKTIVITY-MIB", aGeneralModuleStatus=aGeneralModuleStatus, qMaxBigCurrentWarning=qMaxBigCurrentWarning, infoReset=infoReset, pPortStateEvent=pPortStateEvent, pApparentPower=pApparentPower, testmoduleModule=testmoduleModule, mSensorBias=mSensorBias, pcIndex=pcIndex, pTotalHarmonicDistortion=pTotalHarmonicDistortion, mTotalActiveEnergy=mTotalActiveEnergy, aIOPort=aIOPort, qFrequency=qFrequency, eESNTable=eESNTable, pCurrentPriorOff=pCurrentPriorOff, mLineCurrentOffThreshold=mLineCurrentOffThreshold, mSysName=mSysName, mSpecificModuleStatus=mSpecificModuleStatus, aPressureWarningEvent=aPressureWarningEvent, mSNMPControl=mSNMPControl, pTotalCurrentWarningEvent=pTotalCurrentWarningEvent, mMaxVoltageWarning=mMaxVoltageWarning, testmoduleModuleIndex=testmoduleModuleIndex, pMinVoltageWarning=pMinVoltageWarning, dModuleName=dModuleName, ePCTable=ePCTable, ySpecificModuleStatus=ySpecificModuleStatus, qStatus=qStatus, esnModuleIndex=esnModuleIndex, mExternalSensorLabel=mExternalSensorLabel, pMaxOverheatingOff=pMaxOverheatingOff, dTimeOnline=dTimeOnline, mMinTotalHighPowerWarning=mMinTotalHighPowerWarning, eMicroIntTimeThreshold=eMicroIntTimeThreshold, aHumidityWarningEvent=aHumidityWarningEvent, mUpsMonitoringProtocol=mUpsMonitoringProtocol, mCurrentTime=mCurrentTime, eCurrentTime=eCurrentTime, aAnalogueInputWarningEvent=aAnalogueInputWarningEvent, aRelayAssertActionEvent=aRelayAssertActionEvent, yAnalogueInput=yAnalogueInput, mUPSBatteryLevel=mUPSBatteryLevel, mSSOIPAddress=mSSOIPAddress, mCurrentSubNetMask=mCurrentSubNetMask, pTotalPowerFactor=pTotalPowerFactor, energymonitorIndex=energymonitorIndex, qkWhMode=qkWhMode, qPortState=qPortState, pPowerWarningEvent=pPowerWarningEvent, infoPortSchedule=infoPortSchedule, eFrequency=eFrequency, pTotalPowerOffEvent=pTotalPowerOffEvent, ePowerEntry=ePowerEntry, mMaxTemperatureWarning=mMaxTemperatureWarning, pBigApparentPower=pBigApparentPower, mElectricalTopology=mElectricalTopology, pTemperature=pTemperature, mTotalHighPower=mTotalHighPower, yHardwareVersion=yHardwareVersion, pEnableSchedulePort=pEnableSchedulePort, warningRaised=warningRaised, CURPORTSTATE=CURPORTSTATE, mLocalAuthEnable=mLocalAuthEnable, mUSMPrivPassphrase=mUSMPrivPassphrase, displaymoduleIndex=displaymoduleIndex, yFirmwareID=yFirmwareID, qHardwareVersion=qHardwareVersion, eTotalHarmonicDistortion=eTotalHarmonicDistortion, pPortState=pPortState, pActiveEnergy=pActiveEnergy, eTimeOnline=eTimeOnline, pMaxTotalCurrentWarning=pMaxTotalCurrentWarning, pStatePortCur=pStatePortCur, mVoltage=mVoltage, mFuseCurrentOffEvent=mFuseCurrentOffEvent, aDewPointWarningEvent=aDewPointWarningEvent, pMicroIntEvent=pMicroIntEvent, EVENTFLAGS=EVENTFLAGS, racktivity=racktivity, eFirmwareVersion=eFirmwareVersion, eMaxTemperatureWarning=eMaxTemperatureWarning, mLineCurrent=mLineCurrent, aHumidity=aHumidity, dHardwareVersion=dHardwareVersion, qFirmwareID=qFirmwareID, mCurrentIP=mCurrentIP, threephasepowerModule=threephasepowerModule, pCurrentTime=pCurrentTime, mVoltageWarningEvent=mVoltageWarningEvent, eGeneralModuleStatus=eGeneralModuleStatus, powerModule=powerModule, eActiveEnergy=eActiveEnergy, warningValueTooHighCleared=warningValueTooHighCleared, mUpsCommunicationStatus=mUpsCommunicationStatus, mLDAPPath=mLDAPPath, mLineCurrentWarningEvent=mLineCurrentWarningEvent, pTotalRealPower=pTotalRealPower, Uhundredth=Uhundredth, aHardwareID=aHardwareID, mMaxTotalHighPowerWarning=mMaxTotalHighPowerWarning, mSNMPV2GetSetEnable=mSNMPV2GetSetEnable, dCurrentTime=dCurrentTime, eDisplayModuleEntry=eDisplayModuleEntry, yCurrentTime=yCurrentTime, mSSOGracefullShutdown=mSSOGracefullShutdown, eSpecificModuleStatus=eSpecificModuleStatus, Uthousandth=Uthousandth, pMaxTemperatureWarning=pMaxTemperatureWarning, mMaxHighCurrentWarning=mMaxHighCurrentWarning, pMaxTotalPowerOff=pMaxTotalPowerOff, aMinHighCurrentWarning=aMinHighCurrentWarning, mFuseCurrentWarningThreshold=mFuseCurrentWarningThreshold, mECSServerPort=mECSServerPort, pMaxBigPowerWarning=pMaxBigPowerWarning, mHardwareVersion=mHardwareVersion, errorCleared=errorCleared, esRacktivityMIBGroup=esRacktivityMIBGroup, mTotalPositiveEnergy=mTotalPositiveEnergy, mMAC=mMAC, mTotalRealPower=mTotalRealPower, mMaxTotalHighCurrentWarning=mMaxTotalHighCurrentWarning, mUSMUser=mUSMUser, aModuleName=aModuleName, energymonitorModule=energymonitorModule, qPowerWarningEvent=qPowerWarningEvent, aDisplayTimeOn=aDisplayTimeOn, pVoltage=pVoltage, pHardwareID=pHardwareID, displaymoduleModule=displaymoduleModule, eTotalPowerFactor=eTotalPowerFactor, qSpecificModuleStatus=qSpecificModuleStatus, mUSMPrivPassphraseLength=mUSMPrivPassphraseLength, aRelayLabel=aRelayLabel, qMinBigCurrentWarning=qMinBigCurrentWarning, mUpsRecoveryThreshold=mUpsRecoveryThreshold, eCurrent=eCurrent, pDelayOn=pDelayOn, pSoftFuseCurrentThreshold=pSoftFuseCurrentThreshold, aPowerWarningEvent=aPowerWarningEvent, warningPhaseShift=warningPhaseShift, aAirflowWarningEvent=aAirflowWarningEvent, qMicroIntEvent=qMicroIntEvent, qDeviceID=qDeviceID, ePowerWarningEvent=ePowerWarningEvent, pMaxVoltageWarning=pMaxVoltageWarning, mLDAPServer=mLDAPServer, pBlockSetPortOff=pBlockSetPortOff, aHighPower=aHighPower, qBigCurrent=qBigCurrent, pPowerOffEvent=pPowerOffEvent, aTemperature=aTemperature, pApparentEnergy=pApparentEnergy, mMinTemperatureWarning=mMinTemperatureWarning, pModuleName=pModuleName, mSNMPTrapRecvPort=mSNMPTrapRecvPort, mCurrentWarningEvent=mCurrentWarningEvent, pPower=pPower, eMeasuring3PhaseEntry=eMeasuring3PhaseEntry, infoPortStateChanged=infoPortStateChanged, mDisplayTimeOn=mDisplayTimeOn, qHardwareID=qHardwareID, eTemperatureWarningEvent=eTemperatureWarningEvent, pSchedulePortChangeEvent=pSchedulePortChangeEvent, aMaxHumidityWarning=aMaxHumidityWarning, mTotalCurrentWarningEvent=mTotalCurrentWarningEvent, mDisplayLock=mDisplayLock, mTotalHighCurrent=mTotalHighCurrent, uStatePortCur=uStatePortCur, eThreePhasePowerTable=eThreePhasePowerTable, mModuleName=mModuleName, threephasepowerIndex=threephasepowerIndex, aDewPointWarning=aDewPointWarning, pTotalCurrent=pTotalCurrent, pGenericTransducerParameters=pGenericTransducerParameters, masterModuleIndex=masterModuleIndex, eMasterTable=eMasterTable, eFirmwareID=eFirmwareID, pAlwaysOn=pAlwaysOn, mUSMAuthPassphraseLength=mUSMAuthPassphraseLength, esRacktivityConformance=esRacktivityConformance, pcModuleIndex=pcModuleIndex, masterIndex=masterIndex, yCurrent=yCurrent, pPhaseShiftEvent=pPhaseShiftEvent, aMinAirflowWarning=aMinAirflowWarning, displaymoduleModuleIndex=displaymoduleModuleIndex, racktivityNotif=racktivityNotif, qTotalHarmonicDistortion=qTotalHarmonicDistortion, warningValueTooLowRaised=warningValueTooLowRaised, aWaterleakWarning=aWaterleakWarning, pPowerCycleTime=pPowerCycleTime, dTemperature=dTemperature, mMinTotalHighCurrentWarning=mMinTotalHighCurrentWarning, mTotalCurrent=mTotalCurrent, pMinTemperatureWarning=pMinTemperatureWarning, qGeneralModuleStatus=qGeneralModuleStatus, mSNMPTrapUser=mSNMPTrapUser, pTotalPowerWarningEvent=pTotalPowerWarningEvent, eTemperature=eTemperature, uTemperature=uTemperature, errorValueTooHighCleared=errorValueTooHighCleared, pSoftFuseEvent=pSoftFuseEvent, mUPSStatus=mUPSStatus, infoUpgrade=infoUpgrade, energymonitorModuleIndex=energymonitorModuleIndex, pcModule=pcModule, pSoftFuseDelay=pSoftFuseDelay, aFirmwareID=aFirmwareID, eEnergyMonitorTable=eEnergyMonitorTable, qPortStateEvent=qPortStateEvent, pMinBigCurrentWarning=pMinBigCurrentWarning, mUPSEstimatedRunTime=mUPSEstimatedRunTime, mRackName=mRackName, pGroupNumber=pGroupNumber, mDisplayBrightness=mDisplayBrightness, mSubNetMask=mSubNetMask, Shundredth=Shundredth, yHardwareID=yHardwareID, eApparentPower=eApparentPower, uCurrentTime=uCurrentTime, uCurrent=uCurrent, warningValueTooHighRaised=warningValueTooHighRaised, uPortState=uPortState, eTotalApparentEnergy=eTotalApparentEnergy, eMaxCurrentWarning=eMaxCurrentWarning, eTotalCurrent=eTotalCurrent, infoValueTooHighRaised=infoValueTooHighRaised, Version=Version, aDeviceVersion=aDeviceVersion)
