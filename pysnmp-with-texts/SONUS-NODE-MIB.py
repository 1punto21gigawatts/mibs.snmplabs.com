#
# PySNMP MIB module SONUS-NODE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SONUS-NODE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:09:55 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
NotificationType, Counter64, MibIdentifier, Bits, ObjectIdentity, Unsigned32, iso, Integer32, Gauge32, ModuleIdentity, IpAddress, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Counter64", "MibIdentifier", "Bits", "ObjectIdentity", "Unsigned32", "iso", "Integer32", "Gauge32", "ModuleIdentity", "IpAddress", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks")
TextualConvention, DateAndTime, DisplayString, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DateAndTime", "DisplayString", "RowStatus")
sonusSlotIndex, sonusEventLevel, sonusEventDescription, sonusPortIndex, sonusShelfIndex, sonusEventClass = mibBuilder.importSymbols("SONUS-COMMON-MIB", "sonusSlotIndex", "sonusEventLevel", "sonusEventDescription", "sonusPortIndex", "sonusShelfIndex", "sonusEventClass")
sonusSystemMIBs, = mibBuilder.importSymbols("SONUS-SMI", "sonusSystemMIBs")
SonusServiceState, SonusAdminAction, SonusSoftwareVersion, SonusName, AdapterTypeID, ServerFunctionType, ServerTypeID, SonusAdminState, SonusAccessLevel, HwTypeID = mibBuilder.importSymbols("SONUS-TC", "SonusServiceState", "SonusAdminAction", "SonusSoftwareVersion", "SonusName", "AdapterTypeID", "ServerFunctionType", "ServerTypeID", "SonusAdminState", "SonusAccessLevel", "HwTypeID")
sonusNodeMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1))
if mibBuilder.loadTexts: sonusNodeMIB.setLastUpdated('200107310000Z')
if mibBuilder.loadTexts: sonusNodeMIB.setOrganization('Sonus Networks, Inc.')
if mibBuilder.loadTexts: sonusNodeMIB.setContactInfo(' Customer Support Sonus Networks, Inc, 5 carlisle Road Westford, MA 01886 USA Tel: 978-692-8999 Fax: 978-392-9118 E-mail: cs.snmp@sonusnet.com')
if mibBuilder.loadTexts: sonusNodeMIB.setDescription('The MIB Module for Node Management.')
sonusNodeMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1))
sonusNode = MibIdentifier((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 1))
sonusNodeAdmnObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 1, 1))
sonusNodeAdmnShelves = MibScalar((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusNodeAdmnShelves.setStatus('current')
if mibBuilder.loadTexts: sonusNodeAdmnShelves.setDescription('The number of shelves configured to be present in this node.')
sonusNodeAdmnTelnetLogin = MibScalar((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 1, 1, 2), SonusAdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusNodeAdmnTelnetLogin.setStatus('current')
if mibBuilder.loadTexts: sonusNodeAdmnTelnetLogin.setDescription('')
sonusNodeStatusObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 1, 2))
sonusNodeStatShelvesPresent = MibScalar((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 1, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusNodeStatShelvesPresent.setStatus('current')
if mibBuilder.loadTexts: sonusNodeStatShelvesPresent.setDescription('The number of shelves currently present in this node.')
sonusNodeStatNextIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 1, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusNodeStatNextIfIndex.setStatus('current')
if mibBuilder.loadTexts: sonusNodeStatNextIfIndex.setDescription('This MIB object identifies the next ifIndex to use in the creation of an interface. This MIB object directly corresponds to the ifIndex MIB object in the ifTable. A value of 0 means that no next ifIndex is currently available.')
sonusNodeStatMgmtStatus = MibScalar((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 1, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("manageable", 1), ("softwareUpgradeInProgress", 2), ("softwareUpgradeFailed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusNodeStatMgmtStatus.setStatus('current')
if mibBuilder.loadTexts: sonusNodeStatMgmtStatus.setDescription("Identifies if this node can be effectively managed by a network management system. A value of 'manageable' indicates that it can be; the other values indicate that a significant operation is in progress and that a network management system should minimize any requests of this node.")
sonusNodeShelfAdmnTable = MibTable((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 1, 3), )
if mibBuilder.loadTexts: sonusNodeShelfAdmnTable.setStatus('current')
if mibBuilder.loadTexts: sonusNodeShelfAdmnTable.setDescription("This table contains information about each shelf which is configured to be a member of the node. This table describes the configured characteristics of each shelf, including the shelve's identity (sonusNodeShelfAdmnIpaddr1 and sonusNodeShelfAdmnIpaddr2). A row must be created by the manager for every slave shelf that is to join the master shelf as part of the node. Slave shelves which do not have correct entries in this table, can not join the node. A management entity may create rows for shelves that are anticipated to join the node in the future.")
sonusNodeShelfAdmnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 1, 3, 1), ).setIndexNames((0, "SONUS-NODE-MIB", "sonusNodeShelfAdmnIndex"))
if mibBuilder.loadTexts: sonusNodeShelfAdmnEntry.setStatus('current')
if mibBuilder.loadTexts: sonusNodeShelfAdmnEntry.setDescription('This table describes the shelves that are configured as members of the GSX9000 Switch node.')
sonusNodeShelfAdmnIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusNodeShelfAdmnIndex.setStatus('current')
if mibBuilder.loadTexts: sonusNodeShelfAdmnIndex.setDescription('Identifies the target shelf in the node. Each node may be compprised of one or more shelves. The maximum number of shelves allowed in a node is six.')
sonusNodeShelfAdmnState = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 1, 3, 1, 2), SonusAdminState()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sonusNodeShelfAdmnState.setStatus('current')
if mibBuilder.loadTexts: sonusNodeShelfAdmnState.setDescription('The configured state of the target shelf in the node.')
sonusNodeShelfAdmnIpaddr1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 1, 3, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sonusNodeShelfAdmnIpaddr1.setStatus('current')
if mibBuilder.loadTexts: sonusNodeShelfAdmnIpaddr1.setDescription("The IP Address of the shelf. This value identifies the shelf that may join the node. Each shelf has two IP addresses that it may be reached by. This is the first of those two addresses. Note that it is not possible to change this object on the master shelf. That would be tantamount to changing that shelf's IP address.")
sonusNodeShelfAdmnIpaddr2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 1, 3, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sonusNodeShelfAdmnIpaddr2.setStatus('current')
if mibBuilder.loadTexts: sonusNodeShelfAdmnIpaddr2.setDescription("The IP Address of the shelf. This value identifies the shelf that may join the node. Each shelf has two IP addresses that it may be reached by. This is the second of those two addresses. Note that it is not possible to change this object on the master shelf. That would be tantamount to changing the shelf's IP address.")
sonusNodeShelfAdmn48VdcAState = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 1, 3, 1, 5), SonusAdminState()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sonusNodeShelfAdmn48VdcAState.setStatus('current')
if mibBuilder.loadTexts: sonusNodeShelfAdmn48VdcAState.setDescription("The configured state of the shelf's 48 VDC A-power supply. Indicates whether the A supply SHOULD be present. This object is not capable of disabling a connected supply.")
sonusNodeShelfAdmn48VdcBState = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 1, 3, 1, 6), SonusAdminState()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sonusNodeShelfAdmn48VdcBState.setStatus('current')
if mibBuilder.loadTexts: sonusNodeShelfAdmn48VdcBState.setDescription("The configured state of the shelf's 48 VDC B-power supply. Indicates whether the B supply SHOULD be present. This object is not capable of disabling a connected supply.")
sonusNodeShelfAdmnStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 1, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("absent", 1), ("detected", 2), ("accepted", 3), ("shuttingDown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusNodeShelfAdmnStatus.setStatus('current')
if mibBuilder.loadTexts: sonusNodeShelfAdmnStatus.setDescription('The status of the indexed shelf in the GSX9000 node. If the value of this object is not accepted(3) or shuttingDown(4), then the objects in Sonus Shelf Status table are unavailable. The value of this object does not reach accepted(3) until after the slave shelf has contacted the master shelf, and has successfully joined the node. A value of shuttingDown(4) indicates the shelf will be unavailable shortly.')
sonusNodeShelfAdmnRestart = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 1, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("restart", 2), ("shutdown", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sonusNodeShelfAdmnRestart.setStatus('current')
if mibBuilder.loadTexts: sonusNodeShelfAdmnRestart.setDescription('This object is used to reset a shelf in the node. The object causes the management servers on the indexed shelf to perform the indicated operation. The restart(2) operation causes the management servers to reboot. The shutdown(3) operation causes the management servers to disable power to all cards on the indexed shelf, including themselves. The shutdown(3) operation requires physical intervention to re-power the shelf. This object always reads as unknown(1).')
sonusNodeShelfAdmnRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 1, 3, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sonusNodeShelfAdmnRowStatus.setStatus('current')
if mibBuilder.loadTexts: sonusNodeShelfAdmnRowStatus.setDescription('This object indicates the row status for this table.')
sonusNodeShelfStatTable = MibTable((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 1, 4), )
if mibBuilder.loadTexts: sonusNodeShelfStatTable.setStatus('current')
if mibBuilder.loadTexts: sonusNodeShelfStatTable.setDescription("This table contains status information about each shelf in the GSX9000 Switch node. Shelves within the node can can be configured before they are physically attached to the node. Shelves that are attached may not be powered or correctly configured as a slave. Therefore, it is possible that a slave shelf can not be detected, and is absent. The value of sonusNodeShelfAdmnStatus indicates the availability of this shelf. If the sonusNodeShelfAdmnStatus value for the index shelf does not indicate a status value of 'accepted', then this status table is not available.")
sonusNodeShelfStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 1, 4, 1), ).setIndexNames((0, "SONUS-NODE-MIB", "sonusNodeShelfStatIndex"))
if mibBuilder.loadTexts: sonusNodeShelfStatEntry.setStatus('current')
if mibBuilder.loadTexts: sonusNodeShelfStatEntry.setDescription('This table describes the shelves that are configured as members of the GSX9000 Switch node.')
sonusNodeShelfStatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 1, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusNodeShelfStatIndex.setStatus('current')
if mibBuilder.loadTexts: sonusNodeShelfStatIndex.setDescription('Identifies the target shelf within the node. Returns the same value as sonusNodeShelfStatIndex, the index into this instance.')
sonusNodeShelfStatSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusNodeShelfStatSlots.setStatus('current')
if mibBuilder.loadTexts: sonusNodeShelfStatSlots.setDescription('The number of physical slots present in this shelf.')
sonusNodeShelfStatSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 1, 4, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusNodeShelfStatSerialNumber.setStatus('current')
if mibBuilder.loadTexts: sonusNodeShelfStatSerialNumber.setDescription('Identifies the Sonus serial number for this shelf.')
sonusNodeShelfStatType = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("slave", 1), ("master", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusNodeShelfStatType.setStatus('current')
if mibBuilder.loadTexts: sonusNodeShelfStatType.setDescription('Identifies the Sonus shelf type. A shelf may be either the master shelf for the node, or it may be one of several slave shelves in the node. Every node contains exactly one master shelf. The master shelf in the management focal point for the node.')
sonusNodeShelfStatFan = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 1, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("notPresent", 1), ("controllerFailure", 2), ("singleFailure", 3), ("multipleFailures", 4), ("powerFailure", 5), ("operational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusNodeShelfStatFan.setStatus('current')
if mibBuilder.loadTexts: sonusNodeShelfStatFan.setDescription("Identifies the status of the shelf's fan tray. A controllerFailure(2) indicates that the fan status can not be obtained. In that case in can not be determined if the fans are operational, or experiencing other failures as well.")
sonusNodeShelfStat48VAStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 1, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("absent", 1), ("present", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusNodeShelfStat48VAStatus.setStatus('current')
if mibBuilder.loadTexts: sonusNodeShelfStat48VAStatus.setDescription("The status of the shelf's 48 VDC A-power supply.")
sonusNodeShelfStat48VBStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 1, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("absent", 1), ("present", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusNodeShelfStat48VBStatus.setStatus('current')
if mibBuilder.loadTexts: sonusNodeShelfStat48VBStatus.setDescription("The status of the shelf's 48 VDC B-power supply.")
sonusNodeShelfStatBackplane = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 1, 4, 1, 8), HwTypeID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusNodeShelfStatBackplane.setStatus('current')
if mibBuilder.loadTexts: sonusNodeShelfStatBackplane.setDescription('The hardware type ID of the backplane in this shelf.')
sonusNodeShelfStatBootCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 1, 4, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusNodeShelfStatBootCount.setStatus('current')
if mibBuilder.loadTexts: sonusNodeShelfStatBootCount.setDescription('Specifies the number of times that this shelf has been booted. The boot count is specified from the perspective of the active management module running in the indexed shelf.')
sonusNodeShelfStatTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 1, 4, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusNodeShelfStatTemperature.setStatus('current')
if mibBuilder.loadTexts: sonusNodeShelfStatTemperature.setDescription("Indicates the temperature being sensed at this shelf's intake manifold. The temperature is indicated in Celcius.")
sonusNodeShelfStatFanSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 1, 4, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("high", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusNodeShelfStatFanSpeed.setStatus('current')
if mibBuilder.loadTexts: sonusNodeShelfStatFanSpeed.setDescription('Indicates the speed of the fan.')
sonusNodeSrvrAdmnTable = MibTable((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 1, 5), )
if mibBuilder.loadTexts: sonusNodeSrvrAdmnTable.setStatus('current')
if mibBuilder.loadTexts: sonusNodeSrvrAdmnTable.setDescription("The server module ADMN table describes the configuration of each server module slot in an indexed shelf. A slot in a shelf, MUST be configured to accept a particular server module HWTYPE. If the wrong type of server module is detected in the slot, that server module will not be allowed to complete its boot process. All server modules are held in the RESET state until that server module's state is set to ENABLED. A server module must have its state set to DISABLED, before the row can be deleted. The row must be deleted, and re-created in order to change the HWTYPE of the row. The server module mode must be set to OUTOFSERVICE before the row's state can be set to DISABLED. Deleting a row in this table, clears the server module hardware type association for this slot. THIS IS A MAJOR CONFIGURATION CHANGE. All configured parameters associated with this slot are permanently lost when the server module is deleted. A server module can not be deleted, until it's state has been set to DISABLED. A row's default value for state is DISABLED. The server module located in the slot is immediately placed in reset when its state is set to disabled.")
sonusNodeSrvrAdmnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 1, 5, 1), ).setIndexNames((0, "SONUS-NODE-MIB", "sonusNodeSrvrAdmnShelfIndex"), (0, "SONUS-NODE-MIB", "sonusNodeSrvrAdmnSlotIndex"))
if mibBuilder.loadTexts: sonusNodeSrvrAdmnEntry.setStatus('current')
if mibBuilder.loadTexts: sonusNodeSrvrAdmnEntry.setDescription('')
sonusNodeSrvrAdmnShelfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusNodeSrvrAdmnShelfIndex.setStatus('current')
if mibBuilder.loadTexts: sonusNodeSrvrAdmnShelfIndex.setDescription('Identifies the target shelf. Returns the same value as sonusNodeShelfStatIndex, which was used to index into this table.')
sonusNodeSrvrAdmnSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusNodeSrvrAdmnSlotIndex.setStatus('current')
if mibBuilder.loadTexts: sonusNodeSrvrAdmnSlotIndex.setDescription('Identifies the target slot within the shelf.')
sonusNodeSrvrAdmnHwType = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 1, 5, 1, 3), ServerTypeID()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusNodeSrvrAdmnHwType.setStatus('current')
if mibBuilder.loadTexts: sonusNodeSrvrAdmnHwType.setDescription('Identifies the type of server module the indexed slot has been configured to accept. Server modules other than this type are rejected by the System Manager. This object is required to create a row instance.')
sonusNodeSrvrAdmnState = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 1, 5, 1, 4), SonusAdminState().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusNodeSrvrAdmnState.setStatus('current')
if mibBuilder.loadTexts: sonusNodeSrvrAdmnState.setDescription('A server module must be enabled before System Manager will fully recognize it. The server module must be disabled before the server module can be deleted.')
sonusNodeSrvrAdmnMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 1, 5, 1, 5), SonusServiceState().clone('inService')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusNodeSrvrAdmnMode.setStatus('current')
if mibBuilder.loadTexts: sonusNodeSrvrAdmnMode.setDescription('A server module which is outOfService will not accept new calls. When taken out of service, its active calls may either be dried up or terminated, depending on the action specified. Server modules are created with a mode of inService. A server module must be outOfService in order to change its state to disabled.')
sonusNodeSrvrAdmnAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 1, 5, 1, 6), SonusAdminAction().clone('force')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusNodeSrvrAdmnAction.setStatus('current')
if mibBuilder.loadTexts: sonusNodeSrvrAdmnAction.setDescription('The type of action to perform when a server module is taken out of service. The active calls on the server module can be dried up for a specified dryup limit, or they can be forced to be terminated.')
sonusNodeSrvrAdmnDryupLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 1, 5, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusNodeSrvrAdmnDryupLimit.setStatus('current')
if mibBuilder.loadTexts: sonusNodeSrvrAdmnDryupLimit.setDescription('Server module dryup limit, specified in minutes. If the server module has not dried up by the time this limit expires, the remaining active calls are abruptly terminated. A dryup limit of zero indicates that the system will wait forever for the dryup to complete.')
sonusNodeSrvrAdmnDumpState = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 1, 5, 1, 8), SonusAdminState().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusNodeSrvrAdmnDumpState.setStatus('current')
if mibBuilder.loadTexts: sonusNodeSrvrAdmnDumpState.setDescription('Indicates if a server module will create a crashblock file when a critical error which prevents the module from continuing, has occured.')
sonusNodeSrvrAdmnRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 1, 5, 1, 9), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusNodeSrvrAdmnRowStatus.setStatus('current')
if mibBuilder.loadTexts: sonusNodeSrvrAdmnRowStatus.setDescription('Deleting a server module will place that slot in reset. All configuration parameters associated with the server module in this slot are destroyed.')
sonusNodeSrvrAdmnRedundancyRole = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 1, 5, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("redundant", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusNodeSrvrAdmnRedundancyRole.setStatus('current')
if mibBuilder.loadTexts: sonusNodeSrvrAdmnRedundancyRole.setDescription('Specifies the redundancy role this server module will play. This object is required to create a row instance.')
sonusNodeSrvrAdmnAdapHwType = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 1, 5, 1, 11), AdapterTypeID()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusNodeSrvrAdmnAdapHwType.setStatus('current')
if mibBuilder.loadTexts: sonusNodeSrvrAdmnAdapHwType.setDescription('Identifies the type of adapter module the indexed slot has been configured to accept. Adapter modules other than this type are rejected by the System Manager. This object is required to create a row instance.')
sonusNodeSrvrAdmnSpecialFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 1, 5, 1, 12), ServerFunctionType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusNodeSrvrAdmnSpecialFunction.setStatus('current')
if mibBuilder.loadTexts: sonusNodeSrvrAdmnSpecialFunction.setDescription('Specifies the logical function for this server module. This object may be specified only at row creation time, but is not required. If not specified, an appropriate default value will be assigned based on the server and adapter hardware types. A value of default(1) is not accepted or used.')
sonusNodeSlotTable = MibTable((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 1, 6), )
if mibBuilder.loadTexts: sonusNodeSlotTable.setStatus('current')
if mibBuilder.loadTexts: sonusNodeSlotTable.setDescription('The node slot table describes')
sonusNodeSlotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 1, 6, 1), ).setIndexNames((0, "SONUS-NODE-MIB", "sonusNodeSlotShelfIndex"), (0, "SONUS-NODE-MIB", "sonusNodeSlotIndex"))
if mibBuilder.loadTexts: sonusNodeSlotEntry.setStatus('current')
if mibBuilder.loadTexts: sonusNodeSlotEntry.setDescription('')
sonusNodeSlotShelfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusNodeSlotShelfIndex.setStatus('current')
if mibBuilder.loadTexts: sonusNodeSlotShelfIndex.setDescription('Identifies the indexed shelf. Returns the same value as sonusNodeShelfStatIndex, which is used to index into this table.')
sonusNodeSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusNodeSlotIndex.setStatus('current')
if mibBuilder.loadTexts: sonusNodeSlotIndex.setDescription('Identifies the indexed slot within the shelf.')
sonusNodeSlotState = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 1, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("unknown", 1), ("empty", 2), ("inserted", 3), ("reset", 4), ("boot", 5), ("sonicId", 6), ("coreDump", 7), ("holdOff", 8), ("loading", 9), ("activating", 10), ("activated", 11), ("running", 12), ("faulted", 13), ("powerOff", 14), ("powerFail", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusNodeSlotState.setStatus('current')
if mibBuilder.loadTexts: sonusNodeSlotState.setDescription('Identifies the operational state of the indexed slot in the shelf.')
sonusNodeSlotHwType = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 1, 6, 1, 4), HwTypeID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusNodeSlotHwType.setStatus('current')
if mibBuilder.loadTexts: sonusNodeSlotHwType.setDescription('Identifies the hardware type of the server module which was detected in the slot. Valid only if the sonusNodeSlotState is greater than inserted(2).')
sonusNodeSlotHwTypeRev = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 1, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusNodeSlotHwTypeRev.setStatus('current')
if mibBuilder.loadTexts: sonusNodeSlotHwTypeRev.setDescription('Identifies the hardware type revision of the server module which was detected in the slot. Valid only if the sonusNodeSlotState is greater than inserted(2).')
sonusNodeSlotPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 1, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("powerFault", 2), ("powerOK", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusNodeSlotPower.setStatus('current')
if mibBuilder.loadTexts: sonusNodeSlotPower.setDescription('Identifies the server modules power mode. If the slot state is empty, the power status is unknown(1).')
sonusNodeSlotAdapState = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 1, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("empty", 2), ("present", 3), ("faulted", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusNodeSlotAdapState.setStatus('current')
if mibBuilder.loadTexts: sonusNodeSlotAdapState.setDescription('Identifies the adapter state of the indexed slot in the shelf.')
sonusNodeSlotAdapHwType = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 1, 6, 1, 8), HwTypeID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusNodeSlotAdapHwType.setStatus('current')
if mibBuilder.loadTexts: sonusNodeSlotAdapHwType.setDescription('Identifies the hardware type of the adapter module which was detected in the slot. Valid only if the sonusNodeSlotAdapState is present(3).')
sonusNodeSrvrStatTable = MibTable((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 1, 7), )
if mibBuilder.loadTexts: sonusNodeSrvrStatTable.setStatus('current')
if mibBuilder.loadTexts: sonusNodeSrvrStatTable.setDescription("The node server status table describes the status of the indexed server module in the node. This table is unavailable if the sonusNodeShelfStatStatus object indicates that this slot is empty. If the sonusNodeSrvrStatType object returns either 'absent' or 'unknown' the value of all other objects within this table are indeterministic.")
sonusNodeSrvrStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 1, 7, 1), ).setIndexNames((0, "SONUS-NODE-MIB", "sonusNodeSrvrStatShelfIndex"), (0, "SONUS-NODE-MIB", "sonusNodeSrvrStatSlotIndex"))
if mibBuilder.loadTexts: sonusNodeSrvrStatEntry.setStatus('current')
if mibBuilder.loadTexts: sonusNodeSrvrStatEntry.setDescription('')
sonusNodeSrvrStatShelfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusNodeSrvrStatShelfIndex.setStatus('current')
if mibBuilder.loadTexts: sonusNodeSrvrStatShelfIndex.setDescription('Identifies the target shelf. Returns the same value as sonusNodeShelfStatIndex, which was used to index into this table.')
sonusNodeSrvrStatSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 1, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusNodeSrvrStatSlotIndex.setStatus('current')
if mibBuilder.loadTexts: sonusNodeSrvrStatSlotIndex.setDescription('Identifies the target slot within the shelf.')
sonusNodeSrvrStatMiddVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 1, 7, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusNodeSrvrStatMiddVersion.setStatus('current')
if mibBuilder.loadTexts: sonusNodeSrvrStatMiddVersion.setDescription('Identifies the version of the MIDD EEPROM on this server module.')
sonusNodeSrvrStatHwType = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 1, 7, 1, 4), HwTypeID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusNodeSrvrStatHwType.setStatus('current')
if mibBuilder.loadTexts: sonusNodeSrvrStatHwType.setDescription('Identifies the type of server module in the indexed slot.')
sonusNodeSrvrStatSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 1, 7, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusNodeSrvrStatSerialNum.setStatus('current')
if mibBuilder.loadTexts: sonusNodeSrvrStatSerialNum.setDescription('Identifies the serial number of the server module. This is the serial number assigned to the server module at manufacture.')
sonusNodeSrvrStatPartNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 1, 7, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusNodeSrvrStatPartNum.setStatus('current')
if mibBuilder.loadTexts: sonusNodeSrvrStatPartNum.setDescription('Identifies the part number of the module. This is the part number assigned to the module at manufacture.')
sonusNodeSrvrStatPartNumRev = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 1, 7, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusNodeSrvrStatPartNumRev.setStatus('current')
if mibBuilder.loadTexts: sonusNodeSrvrStatPartNumRev.setDescription('Identifies the manufacture part number revision level of the server module.')
sonusNodeSrvrStatMfgDate = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 1, 7, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusNodeSrvrStatMfgDate.setStatus('current')
if mibBuilder.loadTexts: sonusNodeSrvrStatMfgDate.setDescription('The date this server module assembly was manufactured.')
sonusNodeSrvrStatFlashVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 1, 7, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusNodeSrvrStatFlashVersion.setStatus('current')
if mibBuilder.loadTexts: sonusNodeSrvrStatFlashVersion.setDescription('Identifies the version of the firmware within the non-volatile FLASH device on this server module.')
sonusNodeSrvrStatSwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 1, 7, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusNodeSrvrStatSwVersion.setStatus('current')
if mibBuilder.loadTexts: sonusNodeSrvrStatSwVersion.setDescription('Identifies the version of the runtime software application this is currently executing on this server module.')
sonusNodeSrvrStatBuildNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 1, 7, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusNodeSrvrStatBuildNum.setStatus('current')
if mibBuilder.loadTexts: sonusNodeSrvrStatBuildNum.setDescription('Identifies the build number of this software version.')
sonusNodeSrvrStatMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 1, 7, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("standby", 1), ("active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusNodeSrvrStatMode.setStatus('current')
if mibBuilder.loadTexts: sonusNodeSrvrStatMode.setDescription('Identifies the operational status of the module in the indexed slot.')
sonusNodeSrvrStatTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 1, 7, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusNodeSrvrStatTemperature.setStatus('current')
if mibBuilder.loadTexts: sonusNodeSrvrStatTemperature.setDescription('Indicates the current Celcius temperature being sensed by the server module in the indexed slot.')
sonusNodeSrvrStatMemUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 1, 7, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusNodeSrvrStatMemUtilization.setStatus('current')
if mibBuilder.loadTexts: sonusNodeSrvrStatMemUtilization.setDescription('The current memory utilization of this server module. The value returned is a number from 0 to 100, representing the percentage of memory utilization. Note that this number can be somewhat misleading as many data structures are pre-allocated to ensure that the server modules maximum load capacity can be acheived and maintained. This may result is relatively high memory utilizations under fairly low load.')
sonusNodeSrvrStatCpuUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 1, 7, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusNodeSrvrStatCpuUtilization.setStatus('current')
if mibBuilder.loadTexts: sonusNodeSrvrStatCpuUtilization.setDescription('The current CPU utilization of this server module. The value returned is a number from 0 to 100, representing the percentage of CPU utilization.')
sonusNodeSrvrStatHwTypeRev = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 1, 7, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusNodeSrvrStatHwTypeRev.setStatus('current')
if mibBuilder.loadTexts: sonusNodeSrvrStatHwTypeRev.setDescription('The hardware type revision number of this server module.')
sonusNodeSrvrStatSwVersionCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 1, 7, 1, 17), SonusSoftwareVersion()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusNodeSrvrStatSwVersionCode.setStatus('current')
if mibBuilder.loadTexts: sonusNodeSrvrStatSwVersionCode.setDescription('Octet string that identifies the version of the runtime software application that is currently executing on this server module: Byte(s) Code ------- ---- 0 major version 1 minor version 2 release version 3 type (1:alpha, 2:beta, 3:release, 4:special) 4-5 type number')
sonusNodeSrvrStatEpldRev = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 1, 7, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusNodeSrvrStatEpldRev.setStatus('current')
if mibBuilder.loadTexts: sonusNodeSrvrStatEpldRev.setDescription('The EPLD revision level of this server module. An overall number which represents the total level of the server module.')
sonusNodeSrvrStatHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 1, 7, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusNodeSrvrStatHostName.setStatus('current')
if mibBuilder.loadTexts: sonusNodeSrvrStatHostName.setDescription('Identifies the host name that software load of this module had been built on.')
sonusNodeSrvrStatUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 1, 7, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusNodeSrvrStatUserName.setStatus('current')
if mibBuilder.loadTexts: sonusNodeSrvrStatUserName.setDescription('Identifies the user who builds software load of this module.')
sonusNodeSrvrStatViewName = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 1, 7, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusNodeSrvrStatViewName.setStatus('current')
if mibBuilder.loadTexts: sonusNodeSrvrStatViewName.setDescription('Identifies the viewName used for software build.')
sonusNodeSrvrStatTotalMem = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 1, 7, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusNodeSrvrStatTotalMem.setStatus('current')
if mibBuilder.loadTexts: sonusNodeSrvrStatTotalMem.setDescription('Indicates the total memory size of the server module.')
sonusNodeSrvrStatFreeMem = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 1, 7, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusNodeSrvrStatFreeMem.setStatus('current')
if mibBuilder.loadTexts: sonusNodeSrvrStatFreeMem.setDescription('Indicates the total memory available on the server module.')
sonusNodeSrvrStatTotalSharedMem = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 1, 7, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusNodeSrvrStatTotalSharedMem.setStatus('current')
if mibBuilder.loadTexts: sonusNodeSrvrStatTotalSharedMem.setDescription('Indicates the total shared memory size of the server module.')
sonusNodeSrvrStatFreeSharedMem = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 1, 7, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusNodeSrvrStatFreeSharedMem.setStatus('current')
if mibBuilder.loadTexts: sonusNodeSrvrStatFreeSharedMem.setDescription('Indicates the total shared memory available on the server module.')
sonusNodeAdapStatTable = MibTable((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 1, 11), )
if mibBuilder.loadTexts: sonusNodeAdapStatTable.setStatus('current')
if mibBuilder.loadTexts: sonusNodeAdapStatTable.setDescription('The node adapter status table describes the status of the indexed adapter module in the node. This table is unavailable if the sonusNodeSlotAdapState object indicates that this slot is unknown, empty or faulted.')
sonusNodeAdapStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 1, 11, 1), ).setIndexNames((0, "SONUS-NODE-MIB", "sonusNodeAdapStatShelfIndex"), (0, "SONUS-NODE-MIB", "sonusNodeAdapStatSlotIndex"))
if mibBuilder.loadTexts: sonusNodeAdapStatEntry.setStatus('current')
if mibBuilder.loadTexts: sonusNodeAdapStatEntry.setDescription('')
sonusNodeAdapStatShelfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 1, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusNodeAdapStatShelfIndex.setStatus('current')
if mibBuilder.loadTexts: sonusNodeAdapStatShelfIndex.setDescription('Identifies the target shelf.')
sonusNodeAdapStatSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 1, 11, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusNodeAdapStatSlotIndex.setStatus('current')
if mibBuilder.loadTexts: sonusNodeAdapStatSlotIndex.setDescription('Identifies the target slot within the shelf.')
sonusNodeAdapStatMiddVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 1, 11, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusNodeAdapStatMiddVersion.setStatus('current')
if mibBuilder.loadTexts: sonusNodeAdapStatMiddVersion.setDescription('Identifies the version of the MIDD EEPROM on this adapter module.')
sonusNodeAdapStatHwType = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 1, 11, 1, 4), HwTypeID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusNodeAdapStatHwType.setStatus('current')
if mibBuilder.loadTexts: sonusNodeAdapStatHwType.setDescription('Identifies the type of adapter module in the indexed slot.')
sonusNodeAdapStatHwTypeRev = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 1, 11, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusNodeAdapStatHwTypeRev.setStatus('current')
if mibBuilder.loadTexts: sonusNodeAdapStatHwTypeRev.setDescription('Identifies the hardware type revision of the adapter module detected in the slot.')
sonusNodeAdapStatSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 1, 11, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusNodeAdapStatSerialNum.setStatus('current')
if mibBuilder.loadTexts: sonusNodeAdapStatSerialNum.setDescription('Identifies the serial number of the adapter module. This is the serial number assigned to the card at manufacture.')
sonusNodeAdapStatPartNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 1, 11, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusNodeAdapStatPartNum.setStatus('current')
if mibBuilder.loadTexts: sonusNodeAdapStatPartNum.setDescription('Identifies the part number of the adapter module. This is the part number assigned to the card at manufacture.')
sonusNodeAdapStatPartNumRev = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 1, 11, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusNodeAdapStatPartNumRev.setStatus('current')
if mibBuilder.loadTexts: sonusNodeAdapStatPartNumRev.setDescription('Identifies the assembly revision level of the adapter module.')
sonusNodeAdapStatMfgDate = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 1, 11, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusNodeAdapStatMfgDate.setStatus('current')
if mibBuilder.loadTexts: sonusNodeAdapStatMfgDate.setDescription('The date this adapter module was manufactured.')
sonusNodeSlotAdmnTable = MibTable((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 1, 12), )
if mibBuilder.loadTexts: sonusNodeSlotAdmnTable.setStatus('current')
if mibBuilder.loadTexts: sonusNodeSlotAdmnTable.setDescription('The node slot admn table provides physical manipulation of a slot location in a shelf.')
sonusNodeSlotAdmnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 1, 12, 1), ).setIndexNames((0, "SONUS-NODE-MIB", "sonusNodeSlotAdmnShelfIndex"), (0, "SONUS-NODE-MIB", "sonusNodeSlotAdmnSlotIndex"))
if mibBuilder.loadTexts: sonusNodeSlotAdmnEntry.setStatus('current')
if mibBuilder.loadTexts: sonusNodeSlotAdmnEntry.setDescription('')
sonusNodeSlotAdmnShelfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 1, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusNodeSlotAdmnShelfIndex.setStatus('current')
if mibBuilder.loadTexts: sonusNodeSlotAdmnShelfIndex.setDescription('Identifies the target shelf.')
sonusNodeSlotAdmnSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 1, 12, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusNodeSlotAdmnSlotIndex.setStatus('current')
if mibBuilder.loadTexts: sonusNodeSlotAdmnSlotIndex.setDescription('Identifies the target slot within the shelf.')
sonusNodeSlotAdmnReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 1, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("undefined", 1), ("reset", 2), ("coredump", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusNodeSlotAdmnReset.setStatus('current')
if mibBuilder.loadTexts: sonusNodeSlotAdmnReset.setDescription('Setting this object to reset(2) or coredump(3), will physically reset the server module installed in the indexed slot. This object always reads as undefined(1). This object bypasses all consistency and safety checks. This object is intended for evaluation testing.')
sonusNvsConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 2))
sonusNvsConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 2, 1), )
if mibBuilder.loadTexts: sonusNvsConfigTable.setStatus('current')
if mibBuilder.loadTexts: sonusNvsConfigTable.setDescription('This table specifies the Boot Parameters that apply only to the MNS present in the indexed shelf and slot. The Boot Parameters can only be accessed if the shelf is actively part of the node.')
sonusNvsConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 2, 1, 1), ).setIndexNames((0, "SONUS-NODE-MIB", "sonusBparamShelfIndex"))
if mibBuilder.loadTexts: sonusNvsConfigEntry.setStatus('current')
if mibBuilder.loadTexts: sonusNvsConfigEntry.setDescription('')
sonusBparamShelfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusBparamShelfIndex.setStatus('current')
if mibBuilder.loadTexts: sonusBparamShelfIndex.setDescription('Identifies the target shelf. This object returns the value of sonusNodeShelfStatIndex which was used to index into this table.')
sonusBparamUnused = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 2, 1, 1, 2), Integer32())
if mibBuilder.loadTexts: sonusBparamUnused.setStatus('current')
if mibBuilder.loadTexts: sonusBparamUnused.setDescription('Unused')
sonusBparamPasswd = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 2, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 23))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusBparamPasswd.setStatus('current')
if mibBuilder.loadTexts: sonusBparamPasswd.setDescription('The secure password which is used to access the Boot PROM menu subsystem. This object is not available through SNMP.')
sonusBparamIpAddrSlot1Port0 = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 2, 1, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusBparamIpAddrSlot1Port0.setStatus('current')
if mibBuilder.loadTexts: sonusBparamIpAddrSlot1Port0.setDescription('The IP address assigned to the field service port. This port is not intended for customer use.')
sonusBparamIpMaskSlot1Port0 = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 2, 1, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusBparamIpMaskSlot1Port0.setStatus('current')
if mibBuilder.loadTexts: sonusBparamIpMaskSlot1Port0.setDescription('The IP Address Mask assigned to the field service port.')
sonusBparamIpGatewaySlot1Port0 = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 2, 1, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusBparamIpGatewaySlot1Port0.setStatus('current')
if mibBuilder.loadTexts: sonusBparamIpGatewaySlot1Port0.setDescription('The default IP Gateway address used by the field service port.')
sonusBparamIfSpeedTypeSlot1Port0 = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("autoNegotiate", 1), ("fullDuplex100", 2), ("halfDuplex100", 3), ("fullDuplex10", 4), ("halfDuplex10", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusBparamIfSpeedTypeSlot1Port0.setStatus('current')
if mibBuilder.loadTexts: sonusBparamIfSpeedTypeSlot1Port0.setDescription('The default link speed setting used by the field service port.')
sonusBparamIpAddrSlot1Port1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 2, 1, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusBparamIpAddrSlot1Port1.setStatus('current')
if mibBuilder.loadTexts: sonusBparamIpAddrSlot1Port1.setDescription('The IP address assigned to management port number one.')
sonusBparamIpMaskSlot1Port1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 2, 1, 1, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusBparamIpMaskSlot1Port1.setStatus('current')
if mibBuilder.loadTexts: sonusBparamIpMaskSlot1Port1.setDescription('The IP address mask used by management port one.')
sonusBparamIpGatewaySlot1Port1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 2, 1, 1, 10), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusBparamIpGatewaySlot1Port1.setStatus('current')
if mibBuilder.loadTexts: sonusBparamIpGatewaySlot1Port1.setDescription('The default IP Gateway address used by management port one.')
sonusBparamIfSpeedTypeSlot1Port1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("autoNegotiate", 1), ("fullDuplex100", 2), ("halfDuplex100", 3), ("fullDuplex10", 4), ("halfDuplex10", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusBparamIfSpeedTypeSlot1Port1.setStatus('current')
if mibBuilder.loadTexts: sonusBparamIfSpeedTypeSlot1Port1.setDescription('The default link speed setting used by management port one.')
sonusBparamIpAddrSlot1Port2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 2, 1, 1, 12), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusBparamIpAddrSlot1Port2.setStatus('current')
if mibBuilder.loadTexts: sonusBparamIpAddrSlot1Port2.setDescription('The IP address assigned to management port number two.')
sonusBparamIpMaskSlot1Port2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 2, 1, 1, 13), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusBparamIpMaskSlot1Port2.setStatus('current')
if mibBuilder.loadTexts: sonusBparamIpMaskSlot1Port2.setDescription('The IP address mask used by management port two.')
sonusBparamIpGatewaySlot1Port2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 2, 1, 1, 14), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusBparamIpGatewaySlot1Port2.setStatus('current')
if mibBuilder.loadTexts: sonusBparamIpGatewaySlot1Port2.setDescription('The default gateway address used by management port two.')
sonusBparamIfSpeedTypeSlot1Port2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 2, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("autoNegotiate", 1), ("fullDuplex100", 2), ("halfDuplex100", 3), ("fullDuplex10", 4), ("halfDuplex10", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusBparamIfSpeedTypeSlot1Port2.setStatus('current')
if mibBuilder.loadTexts: sonusBparamIfSpeedTypeSlot1Port2.setDescription('The default link speed setting used by management port two.')
sonusBparamIpAddrSlot2Port0 = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 2, 1, 1, 16), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusBparamIpAddrSlot2Port0.setStatus('current')
if mibBuilder.loadTexts: sonusBparamIpAddrSlot2Port0.setDescription('The IP address assigned to the field service port. This port is not intended for customer use.')
sonusBparamIpMaskSlot2Port0 = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 2, 1, 1, 17), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusBparamIpMaskSlot2Port0.setStatus('current')
if mibBuilder.loadTexts: sonusBparamIpMaskSlot2Port0.setDescription('The IP Address Mask assigned to the field service port.')
sonusBparamIpGatewaySlot2Port0 = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 2, 1, 1, 18), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusBparamIpGatewaySlot2Port0.setStatus('current')
if mibBuilder.loadTexts: sonusBparamIpGatewaySlot2Port0.setDescription('The default IP Gateway address used by the field service port.')
sonusBparamIfSpeedTypeSlot2Port0 = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 2, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("autoNegotiate", 1), ("fullDuplex100", 2), ("halfDuplex100", 3), ("fullDuplex10", 4), ("halfDuplex10", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusBparamIfSpeedTypeSlot2Port0.setStatus('current')
if mibBuilder.loadTexts: sonusBparamIfSpeedTypeSlot2Port0.setDescription('The default link speed setting used by the field service port.')
sonusBparamIpAddrSlot2Port1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 2, 1, 1, 20), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusBparamIpAddrSlot2Port1.setStatus('current')
if mibBuilder.loadTexts: sonusBparamIpAddrSlot2Port1.setDescription('The IP address assigned to management port number one.')
sonusBparamIpMaskSlot2Port1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 2, 1, 1, 21), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusBparamIpMaskSlot2Port1.setStatus('current')
if mibBuilder.loadTexts: sonusBparamIpMaskSlot2Port1.setDescription('The IP address mask used by management port one.')
sonusBparamIpGatewaySlot2Port1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 2, 1, 1, 22), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusBparamIpGatewaySlot2Port1.setStatus('current')
if mibBuilder.loadTexts: sonusBparamIpGatewaySlot2Port1.setDescription('The default IP Gateway address used by management port one.')
sonusBparamIfSpeedTypeSlot2Port1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 2, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("autoNegotiate", 1), ("fullDuplex100", 2), ("halfDuplex100", 3), ("fullDuplex10", 4), ("halfDuplex10", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusBparamIfSpeedTypeSlot2Port1.setStatus('current')
if mibBuilder.loadTexts: sonusBparamIfSpeedTypeSlot2Port1.setDescription('The default link speed setting used by management port one.')
sonusBparamIpAddrSlot2Port2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 2, 1, 1, 24), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusBparamIpAddrSlot2Port2.setStatus('current')
if mibBuilder.loadTexts: sonusBparamIpAddrSlot2Port2.setDescription('The IP address assigned to management port number two.')
sonusBparamIpMaskSlot2Port2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 2, 1, 1, 25), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusBparamIpMaskSlot2Port2.setStatus('current')
if mibBuilder.loadTexts: sonusBparamIpMaskSlot2Port2.setDescription('The IP address mask used by management port two.')
sonusBparamIpGatewaySlot2Port2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 2, 1, 1, 26), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusBparamIpGatewaySlot2Port2.setStatus('current')
if mibBuilder.loadTexts: sonusBparamIpGatewaySlot2Port2.setDescription('The default gateway address used by management port two.')
sonusBparamIfSpeedTypeSlot2Port2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 2, 1, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("autoNegotiate", 1), ("fullDuplex100", 2), ("halfDuplex100", 3), ("fullDuplex10", 4), ("halfDuplex10", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusBparamIfSpeedTypeSlot2Port2.setStatus('current')
if mibBuilder.loadTexts: sonusBparamIfSpeedTypeSlot2Port2.setDescription('The default link speed setting used by management port two.')
sonusBparamBootDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 2, 1, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusBparamBootDelay.setStatus('current')
if mibBuilder.loadTexts: sonusBparamBootDelay.setDescription('The amount of delay used to allow an administrator to gain access to the NVS configuration menus before the runtime software is loaded. The delay is specified in seconds. Increasing this delay, will increase the total system boot time by the same amount.')
sonusBparamCoreState = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 2, 1, 1, 29), SonusAdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusBparamCoreState.setStatus('current')
if mibBuilder.loadTexts: sonusBparamCoreState.setDescription('Specifies whether core dumps are enabled. If core dumps are disabled, a fatal software fault will result in a reboot without the overhead of performing the core dump operation.')
sonusBparamCoreLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 2, 1, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("sensitive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusBparamCoreLevel.setStatus('current')
if mibBuilder.loadTexts: sonusBparamCoreLevel.setDescription('Specifies the type of core dump behavior the shelf will display. Under normal(1) behavior, the server modules will execute a core dump only for fatal software errors. Under sensitive(2) behavior, the server modules will execute a core dump when the software recognizes a major, but non-fatal, software fault. Normal(1) is the strongly recommended setting.')
sonusBparamBaudRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 2, 1, 1, 31), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusBparamBaudRate.setStatus('current')
if mibBuilder.loadTexts: sonusBparamBaudRate.setDescription("The baud rate of a management port's physical interface.")
sonusBparamNfsPrimary = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 2, 1, 1, 32), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusBparamNfsPrimary.setStatus('current')
if mibBuilder.loadTexts: sonusBparamNfsPrimary.setDescription('The IP Address of the primary NFS Server for this switch.')
sonusBparamNfsSecondary = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 2, 1, 1, 33), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusBparamNfsSecondary.setStatus('current')
if mibBuilder.loadTexts: sonusBparamNfsSecondary.setDescription('The IP Address of the secondary NFS Server for this switch.')
sonusBparamNfsMountPri = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 2, 1, 1, 34), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusBparamNfsMountPri.setStatus('current')
if mibBuilder.loadTexts: sonusBparamNfsMountPri.setDescription('The NFS mount point exported by the Primary NFS server.')
sonusBparamNfsMountSec = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 2, 1, 1, 35), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusBparamNfsMountSec.setStatus('current')
if mibBuilder.loadTexts: sonusBparamNfsMountSec.setDescription('The NFS mount point exported by the Secondary NFS server.')
sonusBparamNfsPathUpgrade = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 2, 1, 1, 36), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusBparamNfsPathUpgrade.setStatus('current')
if mibBuilder.loadTexts: sonusBparamNfsPathUpgrade.setDescription('The name of the temporary load path override. This path is tried before the sonusBparamNfsPathLoad when specified. If the sonusBparamNfsPathUpgrade fails to completely boot the switch after three consecutive attempts, the path is automatically abandoned in favor of the sonusBparamNfsPathLoad.')
sonusBparamNfsPathLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 2, 1, 1, 37), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusBparamNfsPathLoad.setStatus('current')
if mibBuilder.loadTexts: sonusBparamNfsPathLoad.setDescription("The directory, beneath the exported NFS mount point, which contains the switch's operational directories.")
sonusBparamPrimName = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 2, 1, 1, 38), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusBparamPrimName.setStatus('current')
if mibBuilder.loadTexts: sonusBparamPrimName.setDescription('The primary load file name for this server module.')
sonusBparamSecName = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 2, 1, 1, 39), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusBparamSecName.setStatus('current')
if mibBuilder.loadTexts: sonusBparamSecName.setDescription('The secondary load file name for this server module. The secondary file is tried when the primary file can not be opened or read.')
sonusBparamMasterState = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 2, 1, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("slave", 1), ("master", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusBparamMasterState.setStatus('current')
if mibBuilder.loadTexts: sonusBparamMasterState.setDescription('Specifies whether this shelf will participate in the node as a master shelf, or as a slave shelf. Each node contains exactly one master shelf, and may contain multiple slave shelves.')
sonusBparamParamMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 2, 1, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("binaryFile", 2), ("defaults", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusBparamParamMode.setStatus('current')
if mibBuilder.loadTexts: sonusBparamParamMode.setDescription('Specifies the binary parameter file mode of the node. This mode specifies whether the node will attempt to load a binary parameter file. The paramMode can be set to disabled(1) which disables parameter file loading. The mode can be set to defaults(3), which temporarily disables binary parameter file loading, until after the next binary parameter file save cycle initiated by the runtime software. In both of these disabled cases, the node boots with default parameters and automatically loads and executes the CLI startup script. The paramMode may be set to binaryFile(2), which enables binary parameter file loading and disables the automatic CLI startup script loading. A binary parameter file must exist before the node can succesfully load a binary parameter file. The node will load default parameters when a valid parameter file can not be loaded. The node loads default parameters when either the parameter mode is set to disabled(1) or when the mode is set to defaults(3). When the mode is set to defaults(3), the mode is automatically updated to binaryFile(2) on the first parameter save cycle.')
sonusBparamCliScript = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 2, 1, 1, 42), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusBparamCliScript.setStatus('current')
if mibBuilder.loadTexts: sonusBparamCliScript.setDescription('The name of the CLI script which will be run automatically when the switch intentionally boots with default parameters. The switch will intentionally boot with default parameters when sonusBparamParamMode is set to either disabled(1) or defaults(3). This CLI script will never be run when the sonusBparamParamMode is set to binaryFile(2). If the script is not specified, or if it can not be located, it is not run. The switch expects to find the script file in the cli/sys directory, beneath the load path specified directory.')
sonusBparamUId = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 2, 1, 1, 43), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusBparamUId.setStatus('current')
if mibBuilder.loadTexts: sonusBparamUId.setDescription('The UNIX user ID used for all file accesses on both the primary and secondary NFS servers.')
sonusBparamGrpId = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 2, 1, 1, 44), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusBparamGrpId.setStatus('current')
if mibBuilder.loadTexts: sonusBparamGrpId.setDescription('The UNIX group ID used for all file accesses on both the primary and secondary NFS servers.')
sonusBparamCoreDumpLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 2, 1, 1, 45), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusBparamCoreDumpLimit.setStatus('current')
if mibBuilder.loadTexts: sonusBparamCoreDumpLimit.setDescription('Indicates the maximum number of core dump files which can be created on behalf of a Server which is requesting a core dump. Setting the value to zero indicates no limit. This object is intended to limit the number of core dumps (and the amount of disk space used) when a Server repeatedly crashes.')
sonusBparamNfsPathSoftware = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 2, 1, 1, 46), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusBparamNfsPathSoftware.setStatus('current')
if mibBuilder.loadTexts: sonusBparamNfsPathSoftware.setDescription('The name of the software load path. This path is is appended to the Boot Path. This object may be NULL, in which case the software is loaded directly from the Boot Path. This object allows multiple revisions of software to be maintained below the Boot Path. This object can be overridden by the Upgrade Path object during a LSWU. During general operation the complete software load path is formed by concatenating this object to the Boot Path and any applicable file system mount point.')
sonusFlashConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 2, 2), )
if mibBuilder.loadTexts: sonusFlashConfigTable.setStatus('current')
if mibBuilder.loadTexts: sonusFlashConfigTable.setDescription('This table specifies the FLASH Update parameters for the indexed server module. The Boot Firmware for each server module is contained in the FLASH device. It is essential that once the upgrade process is initiated, that it be allowed to complete without interruption. Power loss or manually reseting the server module during the upgrade process will result in a loss of Boot Firmware.')
sonusFlashConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 2, 2, 1), ).setIndexNames((0, "SONUS-NODE-MIB", "sonusFlashAdmnShelfIndex"), (0, "SONUS-NODE-MIB", "sonusFlashAdmnSlotIndex"))
if mibBuilder.loadTexts: sonusFlashConfigEntry.setStatus('current')
if mibBuilder.loadTexts: sonusFlashConfigEntry.setDescription('')
sonusFlashAdmnShelfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusFlashAdmnShelfIndex.setStatus('current')
if mibBuilder.loadTexts: sonusFlashAdmnShelfIndex.setDescription('Identifies the target shelf within the node.')
sonusFlashAdmnSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusFlashAdmnSlotIndex.setStatus('current')
if mibBuilder.loadTexts: sonusFlashAdmnSlotIndex.setDescription('Identifies the target slot within the shelf.')
sonusFlashAdmnUpdateButton = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("update", 1))).clone('update')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusFlashAdmnUpdateButton.setStatus('current')
if mibBuilder.loadTexts: sonusFlashAdmnUpdateButton.setDescription("Initiate the update of the specified server module's FLASH PROM now. This object always reads as the value update(1).")
sonusFlashStatusTable = MibTable((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 2, 3), )
if mibBuilder.loadTexts: sonusFlashStatusTable.setStatus('current')
if mibBuilder.loadTexts: sonusFlashStatusTable.setDescription('This table specifies the status of the FLASH Update process.')
sonusFlashStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 2, 3, 1), ).setIndexNames((0, "SONUS-NODE-MIB", "sonusFlashStatShelfIndex"), (0, "SONUS-NODE-MIB", "sonusFlashStatSlotIndex"))
if mibBuilder.loadTexts: sonusFlashStatusEntry.setStatus('current')
if mibBuilder.loadTexts: sonusFlashStatusEntry.setDescription('')
sonusFlashStatShelfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusFlashStatShelfIndex.setStatus('current')
if mibBuilder.loadTexts: sonusFlashStatShelfIndex.setDescription('Identifies the target shelf within the node.')
sonusFlashStatSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusFlashStatSlotIndex.setStatus('current')
if mibBuilder.loadTexts: sonusFlashStatSlotIndex.setDescription('Identifies the target slot within the shelf.')
sonusFlashStatState = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("idle", 1), ("waitReply", 2), ("waitData", 3), ("imageComplete", 4), ("flashErase", 5), ("flashWrite", 6), ("done", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusFlashStatState.setStatus('current')
if mibBuilder.loadTexts: sonusFlashStatState.setDescription('The current state of the FLASH update process on the target server module.')
sonusFlashStatLastStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17))).clone(namedValues=NamedValues(("success", 1), ("unknown", 2), ("inProgress", 3), ("badRequest", 4), ("noReply", 5), ("managerNack", 6), ("timerResources", 7), ("dataTimeout", 8), ("msgSequence", 9), ("memoryResources", 10), ("imageChecksum", 11), ("badBlkType", 12), ("flashErase", 13), ("flashWrite", 14), ("flashChecksum", 15), ("mgrNack", 16), ("badState", 17)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusFlashStatLastStatus.setStatus('current')
if mibBuilder.loadTexts: sonusFlashStatLastStatus.setDescription('The status of the last FLASH update that was executed.')
sonusUser = MibIdentifier((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 3))
sonusUserList = MibIdentifier((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 3, 1))
sonusUserListNextIndex = MibScalar((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusUserListNextIndex.setStatus('current')
if mibBuilder.loadTexts: sonusUserListNextIndex.setDescription('The next valid index to use when creating a new sonusUserListEntry')
sonusUserListTable = MibTable((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 3, 1, 2), )
if mibBuilder.loadTexts: sonusUserListTable.setStatus('current')
if mibBuilder.loadTexts: sonusUserListTable.setDescription('This table specifies the user access list for the node.')
sonusUserListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 3, 1, 2, 1), ).setIndexNames((0, "SONUS-NODE-MIB", "sonusUserListIndex"))
if mibBuilder.loadTexts: sonusUserListEntry.setStatus('current')
if mibBuilder.loadTexts: sonusUserListEntry.setDescription('')
sonusUserListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 3, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusUserListIndex.setStatus('current')
if mibBuilder.loadTexts: sonusUserListIndex.setDescription('Identifies the target user list entry.')
sonusUserListState = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 3, 1, 2, 1, 2), SonusAdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusUserListState.setStatus('current')
if mibBuilder.loadTexts: sonusUserListState.setDescription('The administrative state of this user entry.')
sonusUserListUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 3, 1, 2, 1, 3), SonusName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusUserListUserName.setStatus('current')
if mibBuilder.loadTexts: sonusUserListUserName.setDescription('The user name of this user.')
sonusUserListProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 3, 1, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 23))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusUserListProfileName.setStatus('current')
if mibBuilder.loadTexts: sonusUserListProfileName.setDescription('The name of the profile applied to this user entry.')
sonusUserListPasswd = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 3, 1, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(4, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusUserListPasswd.setStatus('current')
if mibBuilder.loadTexts: sonusUserListPasswd.setDescription('The password for this user.')
sonusUserListComment = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 3, 1, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusUserListComment.setStatus('current')
if mibBuilder.loadTexts: sonusUserListComment.setDescription('A comment that is associated with this user.')
sonusUserListAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 3, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("readOnly", 1), ("readWrite", 2), ("admin", 3))).clone('readOnly')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusUserListAccess.setStatus('current')
if mibBuilder.loadTexts: sonusUserListAccess.setDescription('The priviledge level of this user.')
sonusUserListRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 3, 1, 2, 1, 8), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusUserListRowStatus.setStatus('current')
if mibBuilder.loadTexts: sonusUserListRowStatus.setDescription('Row status object for this table.')
sonusUserListStatusTable = MibTable((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 3, 1, 3), )
if mibBuilder.loadTexts: sonusUserListStatusTable.setStatus('current')
if mibBuilder.loadTexts: sonusUserListStatusTable.setDescription('This table specifies status of the user access list for the node.')
sonusUserListStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 3, 1, 3, 1), ).setIndexNames((0, "SONUS-NODE-MIB", "sonusUserListStatusIndex"))
if mibBuilder.loadTexts: sonusUserListStatusEntry.setStatus('current')
if mibBuilder.loadTexts: sonusUserListStatusEntry.setDescription('')
sonusUserListStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 3, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6)))
if mibBuilder.loadTexts: sonusUserListStatusIndex.setStatus('current')
if mibBuilder.loadTexts: sonusUserListStatusIndex.setDescription('Identifies the target user list status entry.')
sonusUserListStatusLastConfigChange = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 3, 1, 3, 1, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusUserListStatusLastConfigChange.setStatus('current')
if mibBuilder.loadTexts: sonusUserListStatusLastConfigChange.setDescription('Octet string that identifies the GMT timestamp of last successful SET PDU from this CLI user. field octects contents range ----- ------- -------- ----- 1 1-2 year 0..65536 2 3 month 1..12 3 4 day 1..31 4 5 hour 0..23 5 6 minutes 0..59 6 7 seconds 0..59 7 8 deci-sec 0..9 * Notes: - the value of year is in network-byte order')
sonusUserProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 3, 2))
sonusUserProfileNextIndex = MibScalar((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 3, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusUserProfileNextIndex.setStatus('current')
if mibBuilder.loadTexts: sonusUserProfileNextIndex.setDescription('The next valid index to use when creating an entry in the sonusUserProfileTable.')
sonusUserProfileTable = MibTable((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 3, 2, 2), )
if mibBuilder.loadTexts: sonusUserProfileTable.setStatus('current')
if mibBuilder.loadTexts: sonusUserProfileTable.setDescription('This table specifies the user access list for the node.')
sonusUserProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 3, 2, 2, 1), ).setIndexNames((0, "SONUS-NODE-MIB", "sonusUserProfileIndex"))
if mibBuilder.loadTexts: sonusUserProfileEntry.setStatus('current')
if mibBuilder.loadTexts: sonusUserProfileEntry.setDescription('')
sonusUserProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 3, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusUserProfileIndex.setStatus('current')
if mibBuilder.loadTexts: sonusUserProfileIndex.setDescription('Identifies the target profile entry.')
sonusUserProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 3, 2, 2, 1, 2), SonusName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusUserProfileName.setStatus('current')
if mibBuilder.loadTexts: sonusUserProfileName.setDescription('The name of this user profile. This object is required to create the table entry.')
sonusUserProfileUserState = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 3, 2, 2, 1, 3), SonusAdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusUserProfileUserState.setStatus('current')
if mibBuilder.loadTexts: sonusUserProfileUserState.setDescription('The administrative state of this profiled user entry.')
sonusUserProfileUserPasswd = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 3, 2, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(4, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusUserProfileUserPasswd.setStatus('current')
if mibBuilder.loadTexts: sonusUserProfileUserPasswd.setDescription('The password for the profiled user entry.')
sonusUserProfileUserComment = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 3, 2, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusUserProfileUserComment.setStatus('current')
if mibBuilder.loadTexts: sonusUserProfileUserComment.setDescription('The comment that is associated with the profiled user entry.')
sonusUserProfileUserAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 3, 2, 2, 1, 6), SonusAccessLevel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusUserProfileUserAccess.setStatus('current')
if mibBuilder.loadTexts: sonusUserProfileUserAccess.setDescription('The priviledge level of the profiled user entry.')
sonusUserProfileUserCommentState = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 3, 2, 2, 1, 7), SonusAdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusUserProfileUserCommentState.setStatus('current')
if mibBuilder.loadTexts: sonusUserProfileUserCommentState.setDescription('Indicates whether the sonusUserProfileUserComment object is present in this user profile.')
sonusUserProfileUserPasswdState = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 3, 2, 2, 1, 8), SonusAdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusUserProfileUserPasswdState.setStatus('current')
if mibBuilder.loadTexts: sonusUserProfileUserPasswdState.setDescription('Indicates whether the sonusUserProfileUserPasswd object is present in this user profile.')
sonusUserProfileUserAccessState = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 3, 2, 2, 1, 9), SonusAdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusUserProfileUserAccessState.setStatus('current')
if mibBuilder.loadTexts: sonusUserProfileUserAccessState.setDescription('Indicates whether the sonusUserProfileUserAccess object is present in this user profile.')
sonusUserProfileUserStateState = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 3, 2, 2, 1, 10), SonusAdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusUserProfileUserStateState.setStatus('current')
if mibBuilder.loadTexts: sonusUserProfileUserStateState.setDescription('Indicates whether the sonusUserProfileUserState object is present in this user profile.')
sonusUserProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 3, 2, 2, 1, 11), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusUserProfileRowStatus.setStatus('current')
if mibBuilder.loadTexts: sonusUserProfileRowStatus.setDescription('')
sonusSwLoad = MibIdentifier((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 4))
sonusSwLoadTable = MibTable((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 4, 1), )
if mibBuilder.loadTexts: sonusSwLoadTable.setStatus('current')
if mibBuilder.loadTexts: sonusSwLoadTable.setDescription('This table specifies the hardware type based software load table for the server modules in the node.')
sonusSwLoadEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 4, 1, 1), ).setIndexNames((0, "SONUS-NODE-MIB", "sonusSwLoadAdmnIndex"))
if mibBuilder.loadTexts: sonusSwLoadEntry.setStatus('current')
if mibBuilder.loadTexts: sonusSwLoadEntry.setDescription('')
sonusSwLoadAdmnIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusSwLoadAdmnIndex.setStatus('current')
if mibBuilder.loadTexts: sonusSwLoadAdmnIndex.setDescription('Identifies the target software load entry.')
sonusSwLoadAdmnImageName = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 4, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusSwLoadAdmnImageName.setStatus('current')
if mibBuilder.loadTexts: sonusSwLoadAdmnImageName.setDescription('Identifies the name of the image to load for the hardware type identified by sonusSwLoadAdmnHwType.')
sonusSwLoadAdmnHwType = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 4, 1, 1, 3), ServerTypeID()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusSwLoadAdmnHwType.setStatus('current')
if mibBuilder.loadTexts: sonusSwLoadAdmnHwType.setDescription('Identifies the target hardware type for the load image. This object can only be written at row creation.')
sonusSwLoadAdmnRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 4, 1, 1, 4), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusSwLoadAdmnRowStatus.setStatus('current')
if mibBuilder.loadTexts: sonusSwLoadAdmnRowStatus.setDescription('The RowStatus object for this row.')
sonusSwLoadSpecTable = MibTable((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 4, 2), )
if mibBuilder.loadTexts: sonusSwLoadSpecTable.setStatus('current')
if mibBuilder.loadTexts: sonusSwLoadSpecTable.setDescription('This table specifies the hardware type based software load table for the server modules in the node.')
sonusSwLoadSpecEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 4, 2, 1), ).setIndexNames((0, "SONUS-NODE-MIB", "sonusSwLoadSpecAdmnShelfIndex"), (0, "SONUS-NODE-MIB", "sonusSwLoadSpecAdmnSlotIndex"))
if mibBuilder.loadTexts: sonusSwLoadSpecEntry.setStatus('current')
if mibBuilder.loadTexts: sonusSwLoadSpecEntry.setDescription('')
sonusSwLoadSpecAdmnShelfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusSwLoadSpecAdmnShelfIndex.setStatus('current')
if mibBuilder.loadTexts: sonusSwLoadSpecAdmnShelfIndex.setDescription('Identifies the target shelf for this load entry entry.')
sonusSwLoadSpecAdmnSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 4, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusSwLoadSpecAdmnSlotIndex.setStatus('current')
if mibBuilder.loadTexts: sonusSwLoadSpecAdmnSlotIndex.setDescription('Identifies the target slot within the chassis for this load entry.')
sonusSwLoadSpecAdmnImageName = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 4, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusSwLoadSpecAdmnImageName.setStatus('current')
if mibBuilder.loadTexts: sonusSwLoadSpecAdmnImageName.setDescription('Identifies the name of the image to load.')
sonusSwLoadSpecAdmnRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 4, 2, 1, 4), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusSwLoadSpecAdmnRowStatus.setStatus('current')
if mibBuilder.loadTexts: sonusSwLoadSpecAdmnRowStatus.setDescription('The RowStatus object for this row.')
sonusParam = MibIdentifier((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 5))
sonusParamStatusObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 5, 1))
sonusParamSaveSeqNumber = MibScalar((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusParamSaveSeqNumber.setStatus('current')
if mibBuilder.loadTexts: sonusParamSaveSeqNumber.setDescription('The parameter save sequence number assigned to this parameter file.')
sonusParamSaveTimeStart = MibScalar((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusParamSaveTimeStart.setStatus('current')
if mibBuilder.loadTexts: sonusParamSaveTimeStart.setDescription('The system uptime, measured in milliseconds, when the last parameter save cycle started.')
sonusParamSaveTimeStop = MibScalar((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusParamSaveTimeStop.setStatus('current')
if mibBuilder.loadTexts: sonusParamSaveTimeStop.setDescription('The system uptime, measured in milliseconds, when the last parameter save cycle ended.')
sonusParamSaveDuration = MibScalar((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusParamSaveDuration.setStatus('current')
if mibBuilder.loadTexts: sonusParamSaveDuration.setDescription('The measured time in milliseconds to complete the last parameter save cycle.')
sonusParamSaveTotalBytes = MibScalar((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusParamSaveTotalBytes.setStatus('current')
if mibBuilder.loadTexts: sonusParamSaveTotalBytes.setDescription('The number of bytes contained in the last binary parameter file saved.')
sonusParamSaveTotalRecords = MibScalar((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 5, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusParamSaveTotalRecords.setStatus('current')
if mibBuilder.loadTexts: sonusParamSaveTotalRecords.setDescription('The number of individual parameter records contained in the last binary parameter file saved.')
sonusParamSaveFilename = MibScalar((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 5, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusParamSaveFilename.setStatus('current')
if mibBuilder.loadTexts: sonusParamSaveFilename.setDescription('Identifies the name of the image to load for the hardware type identified by sonusSwLoadAdmnHwType.')
sonusParamSaveState = MibScalar((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 5, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("idle", 1), ("synchronize", 2), ("lock", 3), ("holdoff", 4), ("fopen", 5), ("collect", 6), ("fclose", 7), ("done", 8), ("retry", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusParamSaveState.setStatus('current')
if mibBuilder.loadTexts: sonusParamSaveState.setDescription("The current state of the active Management Server's parameter saving process.")
sonusParamLoadServer = MibScalar((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 5, 1, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusParamLoadServer.setStatus('current')
if mibBuilder.loadTexts: sonusParamLoadServer.setDescription('The IP Address of the NFS server from which parameters were loaded from.')
sonusParamLoadFileType = MibScalar((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 5, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("primary", 1), ("backup", 2), ("temporary", 3), ("none", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusParamLoadFileType.setStatus('current')
if mibBuilder.loadTexts: sonusParamLoadFileType.setDescription('The type of binary parameter which was loaded. Under normal circumstances, the primary(1) parameter file will always be loaded. When default parameters are used, no parameter file is loaded, and the value none(4) is used for the file type.')
sonusParamLoadStatus = MibScalar((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 5, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("defaults", 1), ("success", 2), ("paramError", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusParamLoadStatus.setStatus('current')
if mibBuilder.loadTexts: sonusParamLoadStatus.setDescription('Indicates the status of the last binary parameter file load. The value defaults(1) indicates that parameters were not loaded and that the node began with default parameters. The value success(2) indicates that a binary parameter file was successfully loaded when the node booted. The value paramError(3) indicates that the node attempted to load a binary parameter file and that there was an error in the processing of the file. The node may be running with a partial parameter file when this error is indicated.')
sonusParamLoadSeqNumber = MibScalar((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 5, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusParamLoadSeqNumber.setStatus('current')
if mibBuilder.loadTexts: sonusParamLoadSeqNumber.setDescription('')
sonusParamLoadTotalRecords = MibScalar((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 5, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusParamLoadTotalRecords.setStatus('current')
if mibBuilder.loadTexts: sonusParamLoadTotalRecords.setDescription('')
sonusParamLoadTotalBytes = MibScalar((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 5, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusParamLoadTotalBytes.setStatus('current')
if mibBuilder.loadTexts: sonusParamLoadTotalBytes.setDescription('')
sonusParamLoadDuration = MibScalar((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 5, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusParamLoadDuration.setStatus('current')
if mibBuilder.loadTexts: sonusParamLoadDuration.setDescription('')
sonusParamLoadSerialNum = MibScalar((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 5, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusParamLoadSerialNum.setStatus('current')
if mibBuilder.loadTexts: sonusParamLoadSerialNum.setDescription('Identifies the serial number of the node which created the parameter file loaded by this node.')
sonusParamSavePrimarySrvrState = MibScalar((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 5, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("unknown", 1), ("failed", 2), ("failing", 3), ("behind", 4), ("current", 5), ("ahead", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusParamSavePrimarySrvrState.setStatus('current')
if mibBuilder.loadTexts: sonusParamSavePrimarySrvrState.setDescription('The current state of parameter saving to this NFS server.')
sonusParamSavePrimarySrvrReason = MibScalar((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 5, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("success", 1), ("create", 2), ("fopen", 3), ("header", 4), ("timer", 5), ("nfs", 6), ("flush", 7), ("write", 8), ("close", 9), ("move", 10), ("memory", 11), ("none", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusParamSavePrimarySrvrReason.setStatus('current')
if mibBuilder.loadTexts: sonusParamSavePrimarySrvrReason.setDescription('The failure code associated with the last parameter save pass to this NFS server.')
sonusParamSaveSecondarySrvrState = MibScalar((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 5, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("unknown", 1), ("failed", 2), ("failing", 3), ("behind", 4), ("current", 5), ("ahead", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusParamSaveSecondarySrvrState.setStatus('current')
if mibBuilder.loadTexts: sonusParamSaveSecondarySrvrState.setDescription('The current state of parameter saving to this NFS server.')
sonusParamSaveSecondarySrvrReason = MibScalar((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 5, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("success", 1), ("create", 2), ("fopen", 3), ("header", 4), ("timer", 5), ("nfs", 6), ("flush", 7), ("write", 8), ("close", 9), ("move", 10), ("memory", 11), ("none", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusParamSaveSecondarySrvrReason.setStatus('current')
if mibBuilder.loadTexts: sonusParamSaveSecondarySrvrReason.setDescription('The failure code associated with the last parameter save pass to this NFS server.')
sonusParamLastSaveTime = MibScalar((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 5, 1, 21), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusParamLastSaveTime.setStatus('current')
if mibBuilder.loadTexts: sonusParamLastSaveTime.setDescription('Octet string that identifies the GMT timestamp of last successful PIF write. field octects contents range ----- ------- -------- ----- 1 1-2 year 0..65536 2 3 month 1..12 3 4 day 1..31 4 5 hour 0..23 5 6 minutes 0..59 6 7 seconds 0..59 7 8 deci-sec 0..9 * Notes: - the value of year is in network-byte order ')
sonusParamAdminObject = MibIdentifier((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 5, 2))
sonusParamAdmnMaxIncrPifs = MibScalar((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 5, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusParamAdmnMaxIncrPifs.setStatus('current')
if mibBuilder.loadTexts: sonusParamAdmnMaxIncrPifs.setDescription('The maximum of Incremental PIF files saved per NFS server')
sonusNfs = MibIdentifier((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 6))
sonusNfsAdmnTable = MibTable((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 6, 1), )
if mibBuilder.loadTexts: sonusNfsAdmnTable.setStatus('current')
if mibBuilder.loadTexts: sonusNfsAdmnTable.setDescription('This table specifies the configurable NFS options for each MNS in each shelf.')
sonusNfsAdmnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 6, 1, 1), ).setIndexNames((0, "SONUS-NODE-MIB", "sonusNfsAdmnShelfIndex"), (0, "SONUS-NODE-MIB", "sonusNfsAdmnSlotIndex"))
if mibBuilder.loadTexts: sonusNfsAdmnEntry.setStatus('current')
if mibBuilder.loadTexts: sonusNfsAdmnEntry.setDescription('')
sonusNfsAdmnShelfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusNfsAdmnShelfIndex.setStatus('current')
if mibBuilder.loadTexts: sonusNfsAdmnShelfIndex.setDescription('Identifies the target shelf. This object returns the value of sonusNodeShelfStatIndex which was used to index into this table.')
sonusNfsAdmnSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusNfsAdmnSlotIndex.setStatus('current')
if mibBuilder.loadTexts: sonusNfsAdmnSlotIndex.setDescription('Identifies the target MNS module slot within the shelf.')
sonusNfsAdmnMountServer = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noop", 1), ("primary", 2), ("secondary", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusNfsAdmnMountServer.setStatus('current')
if mibBuilder.loadTexts: sonusNfsAdmnMountServer.setDescription('Mounts the Primary or Secondary NFS server using mount parameters obtained from the NVS Boot parameters sonusBparamNfsPrimary or sonusBparamNfsSecondary, and sonusBparamNfsMountPri or sonusBparamNfsMountSec. Continuous retries will occur until the mount succeeds. This object is always read as noop(1).')
sonusNfsAdmnUnmountServer = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noop", 1), ("standby", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusNfsAdmnUnmountServer.setStatus('current')
if mibBuilder.loadTexts: sonusNfsAdmnUnmountServer.setDescription('Unmounts the standby NFS server. Note: unmounting this server will disrupt any file I/O currently taking place on it. Continuous retries will occur until the unmount succeeds. This object is always read as noop(1).')
sonusNfsAdmnToggleActiveServer = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 6, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noop", 1), ("toggle", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusNfsAdmnToggleActiveServer.setStatus('current')
if mibBuilder.loadTexts: sonusNfsAdmnToggleActiveServer.setDescription('Toggles the Active NFS server between the Primary and Secondary, provided both servers are currently mounted. This object is always read as noop(1).')
sonusNfsAdmnSetWritable = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 6, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noop", 1), ("primary", 2), ("secondary", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusNfsAdmnSetWritable.setStatus('current')
if mibBuilder.loadTexts: sonusNfsAdmnSetWritable.setDescription('Clears the perception of a read-only condition on the Primary or Secondary NFS server, so that server will be considered viable as the Active server. This object is always read as noop(1).')
sonusNfsStatTable = MibTable((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 6, 2), )
if mibBuilder.loadTexts: sonusNfsStatTable.setStatus('current')
if mibBuilder.loadTexts: sonusNfsStatTable.setDescription('This table specifies NFS status objects for each MNS in each shelf.')
sonusNfsStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 6, 2, 1), ).setIndexNames((0, "SONUS-NODE-MIB", "sonusNfsStatShelfIndex"), (0, "SONUS-NODE-MIB", "sonusNfsStatSlotIndex"))
if mibBuilder.loadTexts: sonusNfsStatEntry.setStatus('current')
if mibBuilder.loadTexts: sonusNfsStatEntry.setDescription('')
sonusNfsStatShelfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusNfsStatShelfIndex.setStatus('current')
if mibBuilder.loadTexts: sonusNfsStatShelfIndex.setDescription('Identifies the target shelf. This object returns the value of sonusNodeShelfStatIndex which was used to index into this table.')
sonusNfsStatSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 6, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusNfsStatSlotIndex.setStatus('current')
if mibBuilder.loadTexts: sonusNfsStatSlotIndex.setDescription('Identifies the target MNS module slot within the shelf.')
sonusNfsStatPrimaryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 6, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("mounted", 1), ("mounting", 2), ("unmounted", 3), ("unmounting", 4), ("readOnly", 5), ("testing", 6), ("failed", 7), ("invalid", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusNfsStatPrimaryStatus.setStatus('current')
if mibBuilder.loadTexts: sonusNfsStatPrimaryStatus.setDescription('Indicates the mount status of the Primary NFS server: mounted and functioning properly, attemping to mount, indefinitely unmounted, attempting to unmount, mounted but read-only, testing connectivity, server failure, or invalid NFS parameters.')
sonusNfsStatSecondaryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 6, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("mounted", 1), ("mounting", 2), ("unmounted", 3), ("unmounting", 4), ("readOnly", 5), ("testing", 6), ("failed", 7), ("invalid", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusNfsStatSecondaryStatus.setStatus('current')
if mibBuilder.loadTexts: sonusNfsStatSecondaryStatus.setDescription('Indicates the mount status of the Secondary NFS server: mounted and functioning properly, attemping to mount, indefinitely unmounted, attempting to unmount, mounted but read-only, testing connectivity, server failure, or invalid NFS parameters.')
sonusNfsStatActiveServer = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 6, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("primary", 2), ("secondary", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusNfsStatActiveServer.setStatus('current')
if mibBuilder.loadTexts: sonusNfsStatActiveServer.setDescription('Indicates the current Active NFS server. This may change due to NFS failures or NFS administrative operations.')
sonusNfsStatStandbyServer = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 6, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("primary", 2), ("secondary", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusNfsStatStandbyServer.setStatus('current')
if mibBuilder.loadTexts: sonusNfsStatStandbyServer.setDescription('Indicates the current Standby NFS server. This may change due to NFS failures or NFS administrative operations.')
sonusNfsStatPrimaryIP = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 6, 2, 1, 11), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusNfsStatPrimaryIP.setStatus('current')
if mibBuilder.loadTexts: sonusNfsStatPrimaryIP.setDescription('The IP Address of the currently mounted Primary NFS server. This may differ from the NVS settings if the user modified sonusBparamNfsPrimary without unmounting and remounting the Primary server.')
sonusNfsStatSecondaryIP = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 6, 2, 1, 12), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusNfsStatSecondaryIP.setStatus('current')
if mibBuilder.loadTexts: sonusNfsStatSecondaryIP.setDescription('The IP Address of the currently mounted Secondary NFS server. This may differ from the NVS settings if the user modified sonusBparamNfsSecondary without unmounting and remounting the Secondary server.')
sonusNfsStatPrimaryMount = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 6, 2, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusNfsStatPrimaryMount.setStatus('current')
if mibBuilder.loadTexts: sonusNfsStatPrimaryMount.setDescription('The mount point currently in use on the Primary NFS server. This may differ from the NVS settings if the user modified sonusBparamNfsMountPri without unmounting and remounting the Primary server.')
sonusNfsStatSecondaryMount = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 6, 2, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusNfsStatSecondaryMount.setStatus('current')
if mibBuilder.loadTexts: sonusNfsStatSecondaryMount.setDescription('The mount point currently in use on the Secondary NFS server. This may differ from the NVS settings if the user modified sonusBparamNfsMountSec without unmounting and remounting the Secondary server.')
sonusNfsStatPrimaryLastError = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 6, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("none", 1), ("badVolumeStructure", 2), ("tooManyFiles", 3), ("volumeFull", 4), ("serverHardError", 5), ("quotaExceeded", 6), ("staleNfsHandle", 7), ("nfsTimeout", 8), ("rpcCanNotSend", 9), ("noAccess", 10), ("other", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusNfsStatPrimaryLastError.setStatus('current')
if mibBuilder.loadTexts: sonusNfsStatPrimaryLastError.setDescription('Last consequential error received from the Primary NFS server. This object is reset to none(1) if the server is remounted.')
sonusNfsStatSecondaryLastError = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 1, 6, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("none", 1), ("badVolumeStructure", 2), ("tooManyFiles", 3), ("volumeFull", 4), ("serverHardError", 5), ("quotaExceeded", 6), ("staleNfsHandle", 7), ("nfsTimeout", 8), ("rpcCanNotSend", 9), ("noAccess", 10), ("other", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusNfsStatSecondaryLastError.setStatus('current')
if mibBuilder.loadTexts: sonusNfsStatSecondaryLastError.setDescription('Last consequential error received from the Secondary NFS server. This object is reset to none(1) if the server is remounted.')
sonusNodeMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 2))
sonusNodeMIBNotificationsPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 2, 0))
sonusNodeMIBNotificationsObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 2, 1))
sonusNfsServer = MibScalar((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("primary", 1), ("secondary", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusNfsServer.setStatus('current')
if mibBuilder.loadTexts: sonusNfsServer.setDescription('The NFS server referred to by the trap.')
sonusNfsRole = MibScalar((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("standby", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusNfsRole.setStatus('current')
if mibBuilder.loadTexts: sonusNfsRole.setDescription('Role assumed by the NFS server referred to by the trap.')
sonusNfsServerIp = MibScalar((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusNfsServerIp.setStatus('current')
if mibBuilder.loadTexts: sonusNfsServerIp.setDescription('The IP address of the NFS server referred to by the trap.')
sonusNfsServerMount = MibScalar((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusNfsServerMount.setStatus('current')
if mibBuilder.loadTexts: sonusNfsServerMount.setDescription('The mount point used on the NFS server referred to by the trap.')
sonusNfsReason = MibScalar((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("adminOperation", 1), ("serverFailure", 2), ("serverNotWritable", 3), ("serverRecovery", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusNfsReason.setStatus('current')
if mibBuilder.loadTexts: sonusNfsReason.setDescription('The reason for the generation of the trap - administrative operation (mount, unmount, or toggle), server failure, server not writable, or server recovery.')
sonusNfsErrorCode = MibScalar((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("none", 1), ("badVolumeStructure", 2), ("tooManyFiles", 3), ("volumeFull", 4), ("serverHardError", 5), ("quotaExceeded", 6), ("staleNfsHandle", 7), ("nfsTimeout", 8), ("rpcCanNotSend", 9), ("noAccess", 10), ("other", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusNfsErrorCode.setStatus('current')
if mibBuilder.loadTexts: sonusNfsErrorCode.setDescription('The NFS error that occurred.')
sonusNodeShelfPowerA48VdcNormalNotification = NotificationType((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 2, 0, 1)).setObjects(("SONUS-COMMON-MIB", "sonusShelfIndex"), ("SONUS-COMMON-MIB", "sonusEventDescription"), ("SONUS-COMMON-MIB", "sonusEventClass"), ("SONUS-COMMON-MIB", "sonusEventLevel"))
if mibBuilder.loadTexts: sonusNodeShelfPowerA48VdcNormalNotification.setStatus('current')
if mibBuilder.loadTexts: sonusNodeShelfPowerA48VdcNormalNotification.setDescription('A sonusShelfPowerA48VdcNormal trap indicates that 48V DC source A is operating normally for the specified shelf.')
sonusNodeShelfPowerB48VdcNormalNotification = NotificationType((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 2, 0, 2)).setObjects(("SONUS-COMMON-MIB", "sonusShelfIndex"), ("SONUS-COMMON-MIB", "sonusEventDescription"), ("SONUS-COMMON-MIB", "sonusEventClass"), ("SONUS-COMMON-MIB", "sonusEventLevel"))
if mibBuilder.loadTexts: sonusNodeShelfPowerB48VdcNormalNotification.setStatus('current')
if mibBuilder.loadTexts: sonusNodeShelfPowerB48VdcNormalNotification.setDescription('A sonusShelfPowerB48VdcNormal trap indicates that 48V DC source B is operating normally for the specified shelf.')
sonusNodeShelfPowerA48VdcFailureNotification = NotificationType((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 2, 0, 3)).setObjects(("SONUS-COMMON-MIB", "sonusShelfIndex"), ("SONUS-COMMON-MIB", "sonusEventDescription"), ("SONUS-COMMON-MIB", "sonusEventClass"), ("SONUS-COMMON-MIB", "sonusEventLevel"))
if mibBuilder.loadTexts: sonusNodeShelfPowerA48VdcFailureNotification.setStatus('current')
if mibBuilder.loadTexts: sonusNodeShelfPowerA48VdcFailureNotification.setDescription('A sonusShelfPowerA48VdcFailure trap indicates that 48V DC source A has failed for the specified shelf.')
sonusNodeShelfPowerB48VdcFailureNotification = NotificationType((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 2, 0, 4)).setObjects(("SONUS-COMMON-MIB", "sonusShelfIndex"), ("SONUS-COMMON-MIB", "sonusEventDescription"), ("SONUS-COMMON-MIB", "sonusEventClass"), ("SONUS-COMMON-MIB", "sonusEventLevel"))
if mibBuilder.loadTexts: sonusNodeShelfPowerB48VdcFailureNotification.setStatus('current')
if mibBuilder.loadTexts: sonusNodeShelfPowerB48VdcFailureNotification.setDescription('A sonusShelfPowerB48VdcFailure trap indicates that 48V DC source A has failed for the specified shelf.')
sonusNodeShelfFanTrayFailureNotification = NotificationType((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 2, 0, 5)).setObjects(("SONUS-COMMON-MIB", "sonusShelfIndex"), ("SONUS-COMMON-MIB", "sonusEventDescription"), ("SONUS-COMMON-MIB", "sonusEventClass"), ("SONUS-COMMON-MIB", "sonusEventLevel"))
if mibBuilder.loadTexts: sonusNodeShelfFanTrayFailureNotification.setStatus('current')
if mibBuilder.loadTexts: sonusNodeShelfFanTrayFailureNotification.setDescription('A sonusNodeShelfFanTrayFailure trap indicates that the fan controller on the specified shelf is indicating a problem. The Event Log should be examined for more detail. The fan tray should be replaced immediately.')
sonusNodeShelfFanTrayOperationalNotification = NotificationType((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 2, 0, 6)).setObjects(("SONUS-COMMON-MIB", "sonusShelfIndex"), ("SONUS-COMMON-MIB", "sonusEventDescription"), ("SONUS-COMMON-MIB", "sonusEventClass"), ("SONUS-COMMON-MIB", "sonusEventLevel"))
if mibBuilder.loadTexts: sonusNodeShelfFanTrayOperationalNotification.setStatus('current')
if mibBuilder.loadTexts: sonusNodeShelfFanTrayOperationalNotification.setDescription('A sonusNodeShelfFanTrayOperational trap indicates that the fan controller is fully operational on the specified shelf.')
sonusNodeShelfFanTrayRemovedNotification = NotificationType((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 2, 0, 7)).setObjects(("SONUS-COMMON-MIB", "sonusShelfIndex"), ("SONUS-COMMON-MIB", "sonusEventDescription"), ("SONUS-COMMON-MIB", "sonusEventClass"), ("SONUS-COMMON-MIB", "sonusEventLevel"))
if mibBuilder.loadTexts: sonusNodeShelfFanTrayRemovedNotification.setStatus('current')
if mibBuilder.loadTexts: sonusNodeShelfFanTrayRemovedNotification.setDescription('A sonusNodeShelfFanTrayRemoved trap indicates that the fan tray has been removed from the specified shelf. The fan tray should be replaced as soon as possible to avoid damage to the equipment as a result of overheating.')
sonusNodeShelfFanTrayPresentNotification = NotificationType((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 2, 0, 8)).setObjects(("SONUS-COMMON-MIB", "sonusShelfIndex"), ("SONUS-COMMON-MIB", "sonusEventDescription"), ("SONUS-COMMON-MIB", "sonusEventClass"), ("SONUS-COMMON-MIB", "sonusEventLevel"))
if mibBuilder.loadTexts: sonusNodeShelfFanTrayPresentNotification.setStatus('current')
if mibBuilder.loadTexts: sonusNodeShelfFanTrayPresentNotification.setDescription('A sonusNodeShelfFanTrayPresent trap indicates that a fan tray is present for the specified shelf.')
sonusNodeShelfIntakeTempWarningNotification = NotificationType((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 2, 0, 9)).setObjects(("SONUS-COMMON-MIB", "sonusShelfIndex"), ("SONUS-COMMON-MIB", "sonusEventDescription"), ("SONUS-COMMON-MIB", "sonusEventClass"), ("SONUS-COMMON-MIB", "sonusEventLevel"))
if mibBuilder.loadTexts: sonusNodeShelfIntakeTempWarningNotification.setStatus('current')
if mibBuilder.loadTexts: sonusNodeShelfIntakeTempWarningNotification.setDescription('A sonusNodeShelfIntakeTempWarning trap indicates that the intake temperature of the specified shelf has exceeded 45C degrees.')
sonusNodeServerTempWarningNotification = NotificationType((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 2, 0, 10)).setObjects(("SONUS-COMMON-MIB", "sonusShelfIndex"), ("SONUS-COMMON-MIB", "sonusSlotIndex"), ("SONUS-COMMON-MIB", "sonusEventDescription"), ("SONUS-COMMON-MIB", "sonusEventClass"), ("SONUS-COMMON-MIB", "sonusEventLevel"))
if mibBuilder.loadTexts: sonusNodeServerTempWarningNotification.setStatus('current')
if mibBuilder.loadTexts: sonusNodeServerTempWarningNotification.setDescription('A sonusNodeServerTempWarning trap indicates that the operating temperature of the specified shelf and slot has exceeded 60C degrees.')
sonusNodeServerTempFailureNotification = NotificationType((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 2, 0, 11)).setObjects(("SONUS-COMMON-MIB", "sonusShelfIndex"), ("SONUS-COMMON-MIB", "sonusSlotIndex"), ("SONUS-COMMON-MIB", "sonusEventDescription"), ("SONUS-COMMON-MIB", "sonusEventClass"), ("SONUS-COMMON-MIB", "sonusEventLevel"))
if mibBuilder.loadTexts: sonusNodeServerTempFailureNotification.setStatus('current')
if mibBuilder.loadTexts: sonusNodeServerTempFailureNotification.setDescription('A sonusNodeServerTempFailure trap indicates that the operating temperature of the specified shelf and slot has exceeded 70C degrees. A server module operating for any length of time at this temperature is in danger of being physically damaged. The specified module should be disabled and/or removed from the shelf.')
sonusNodeServerTempNormalNotification = NotificationType((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 2, 0, 12)).setObjects(("SONUS-COMMON-MIB", "sonusShelfIndex"), ("SONUS-COMMON-MIB", "sonusSlotIndex"), ("SONUS-COMMON-MIB", "sonusEventDescription"), ("SONUS-COMMON-MIB", "sonusEventClass"), ("SONUS-COMMON-MIB", "sonusEventLevel"))
if mibBuilder.loadTexts: sonusNodeServerTempNormalNotification.setStatus('current')
if mibBuilder.loadTexts: sonusNodeServerTempNormalNotification.setDescription('A sonusNodeServerTempNormal trap indicates that the operating temperature of the specified shelf and slot has is below 60C degrees.')
sonusNodeServerInsertedNotification = NotificationType((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 2, 0, 13)).setObjects(("SONUS-COMMON-MIB", "sonusShelfIndex"), ("SONUS-COMMON-MIB", "sonusSlotIndex"), ("SONUS-COMMON-MIB", "sonusEventDescription"), ("SONUS-COMMON-MIB", "sonusEventClass"), ("SONUS-COMMON-MIB", "sonusEventLevel"))
if mibBuilder.loadTexts: sonusNodeServerInsertedNotification.setStatus('current')
if mibBuilder.loadTexts: sonusNodeServerInsertedNotification.setDescription('A sonusNodeServerInserted trap indicates that a server module has been inserted in the specified shelf and slot.')
sonusNodeServerRemovedNotification = NotificationType((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 2, 0, 14)).setObjects(("SONUS-COMMON-MIB", "sonusShelfIndex"), ("SONUS-COMMON-MIB", "sonusSlotIndex"), ("SONUS-COMMON-MIB", "sonusEventDescription"), ("SONUS-COMMON-MIB", "sonusEventClass"), ("SONUS-COMMON-MIB", "sonusEventLevel"))
if mibBuilder.loadTexts: sonusNodeServerRemovedNotification.setStatus('current')
if mibBuilder.loadTexts: sonusNodeServerRemovedNotification.setDescription('A sonusNodeServerRemoved trap indicates that a server module has been removed from the specified shelf and slot.')
sonusNodeServerResetNotification = NotificationType((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 2, 0, 15)).setObjects(("SONUS-COMMON-MIB", "sonusShelfIndex"), ("SONUS-COMMON-MIB", "sonusSlotIndex"), ("SONUS-COMMON-MIB", "sonusEventDescription"), ("SONUS-COMMON-MIB", "sonusEventClass"), ("SONUS-COMMON-MIB", "sonusEventLevel"))
if mibBuilder.loadTexts: sonusNodeServerResetNotification.setStatus('current')
if mibBuilder.loadTexts: sonusNodeServerResetNotification.setDescription('A sonusNodeServerReset trap indicates that the server module in the specified shelf and slot has been reset.')
sonusNodeServerOperationalNotification = NotificationType((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 2, 0, 16)).setObjects(("SONUS-COMMON-MIB", "sonusShelfIndex"), ("SONUS-COMMON-MIB", "sonusSlotIndex"), ("SONUS-COMMON-MIB", "sonusEventDescription"), ("SONUS-COMMON-MIB", "sonusEventClass"), ("SONUS-COMMON-MIB", "sonusEventLevel"))
if mibBuilder.loadTexts: sonusNodeServerOperationalNotification.setStatus('current')
if mibBuilder.loadTexts: sonusNodeServerOperationalNotification.setDescription('A sonusNodeServerOperational trap indicates that the booting and initialization has completed successfully for the server module in the specified shelf and slot.')
sonusNodeServerPowerFailureNotification = NotificationType((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 2, 0, 17)).setObjects(("SONUS-COMMON-MIB", "sonusShelfIndex"), ("SONUS-COMMON-MIB", "sonusSlotIndex"), ("SONUS-COMMON-MIB", "sonusEventDescription"), ("SONUS-COMMON-MIB", "sonusEventClass"), ("SONUS-COMMON-MIB", "sonusEventLevel"))
if mibBuilder.loadTexts: sonusNodeServerPowerFailureNotification.setStatus('current')
if mibBuilder.loadTexts: sonusNodeServerPowerFailureNotification.setDescription('A sonusNodeServerPowerFailure trap indicates that a power failure has been detected for the server module in the specified shelf and slot.')
sonusNodeServerSoftwareFailureNotification = NotificationType((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 2, 0, 18)).setObjects(("SONUS-COMMON-MIB", "sonusShelfIndex"), ("SONUS-COMMON-MIB", "sonusSlotIndex"), ("SONUS-COMMON-MIB", "sonusEventDescription"), ("SONUS-COMMON-MIB", "sonusEventClass"), ("SONUS-COMMON-MIB", "sonusEventLevel"))
if mibBuilder.loadTexts: sonusNodeServerSoftwareFailureNotification.setStatus('current')
if mibBuilder.loadTexts: sonusNodeServerSoftwareFailureNotification.setDescription('A sonusNodeServerSoftwareFailure trap indicates that a software failure has occurred or the server module in the specified shelf and slot. The EventLog should be viewed for possible additional information.')
sonusNodeServerHardwareFailureNotification = NotificationType((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 2, 0, 19)).setObjects(("SONUS-COMMON-MIB", "sonusShelfIndex"), ("SONUS-COMMON-MIB", "sonusSlotIndex"), ("SONUS-COMMON-MIB", "sonusEventDescription"), ("SONUS-COMMON-MIB", "sonusEventClass"), ("SONUS-COMMON-MIB", "sonusEventLevel"))
if mibBuilder.loadTexts: sonusNodeServerHardwareFailureNotification.setStatus('current')
if mibBuilder.loadTexts: sonusNodeServerHardwareFailureNotification.setDescription('A sonusNodeServerHardwareFailure trap indicates that a hardware failure has occurred or the server module in the specified shelf and slot. The EventLog should be viewed for possible additional information.')
sonusNodeAdapterInsertedNotification = NotificationType((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 2, 0, 20)).setObjects(("SONUS-COMMON-MIB", "sonusShelfIndex"), ("SONUS-COMMON-MIB", "sonusSlotIndex"), ("SONUS-COMMON-MIB", "sonusEventDescription"), ("SONUS-COMMON-MIB", "sonusEventClass"), ("SONUS-COMMON-MIB", "sonusEventLevel"))
if mibBuilder.loadTexts: sonusNodeAdapterInsertedNotification.setStatus('current')
if mibBuilder.loadTexts: sonusNodeAdapterInsertedNotification.setDescription('A sonusNodeAdapterInserted trap indicates that an adapter module has been inserted in the specified shelf and slot.')
sonusNodeAdapterRemovedNotification = NotificationType((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 2, 0, 21)).setObjects(("SONUS-COMMON-MIB", "sonusShelfIndex"), ("SONUS-COMMON-MIB", "sonusSlotIndex"), ("SONUS-COMMON-MIB", "sonusEventDescription"), ("SONUS-COMMON-MIB", "sonusEventClass"), ("SONUS-COMMON-MIB", "sonusEventLevel"))
if mibBuilder.loadTexts: sonusNodeAdapterRemovedNotification.setStatus('current')
if mibBuilder.loadTexts: sonusNodeAdapterRemovedNotification.setDescription('A sonusNodeAdpaterRemoved trap indicates that an adapter module has been removed from the specified shelf and slot.')
sonusNodeMtaInsertedNotification = NotificationType((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 2, 0, 22)).setObjects(("SONUS-COMMON-MIB", "sonusShelfIndex"), ("SONUS-COMMON-MIB", "sonusSlotIndex"), ("SONUS-COMMON-MIB", "sonusEventDescription"), ("SONUS-COMMON-MIB", "sonusEventClass"), ("SONUS-COMMON-MIB", "sonusEventLevel"))
if mibBuilder.loadTexts: sonusNodeMtaInsertedNotification.setStatus('current')
if mibBuilder.loadTexts: sonusNodeMtaInsertedNotification.setDescription('A sonusNodeMtaInserted trap indicates that a Management Timing Adapter has been inserted in the specified shelf and slot.')
sonusNodeMtaRemovedNotification = NotificationType((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 2, 0, 23)).setObjects(("SONUS-COMMON-MIB", "sonusShelfIndex"), ("SONUS-COMMON-MIB", "sonusSlotIndex"), ("SONUS-COMMON-MIB", "sonusEventDescription"), ("SONUS-COMMON-MIB", "sonusEventClass"), ("SONUS-COMMON-MIB", "sonusEventLevel"))
if mibBuilder.loadTexts: sonusNodeMtaRemovedNotification.setStatus('current')
if mibBuilder.loadTexts: sonusNodeMtaRemovedNotification.setDescription('A sonusNodeMtaRemoved trap indicates that a Management Timing Adapter has been removed from the specified shelf and slot.')
sonusNodeEthernetActiveNotification = NotificationType((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 2, 0, 24)).setObjects(("SONUS-COMMON-MIB", "sonusShelfIndex"), ("SONUS-COMMON-MIB", "sonusSlotIndex"), ("SONUS-COMMON-MIB", "sonusPortIndex"), ("SONUS-COMMON-MIB", "sonusEventDescription"), ("SONUS-COMMON-MIB", "sonusEventClass"), ("SONUS-COMMON-MIB", "sonusEventLevel"))
if mibBuilder.loadTexts: sonusNodeEthernetActiveNotification.setStatus('current')
if mibBuilder.loadTexts: sonusNodeEthernetActiveNotification.setDescription('A sonusNodeEthernetActive trap indicates that an Ethernet link is active for the specified shelf, slot and port.')
sonusNodeEthernetInactiveNotification = NotificationType((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 2, 0, 25)).setObjects(("SONUS-COMMON-MIB", "sonusShelfIndex"), ("SONUS-COMMON-MIB", "sonusSlotIndex"), ("SONUS-COMMON-MIB", "sonusPortIndex"), ("SONUS-COMMON-MIB", "sonusEventDescription"), ("SONUS-COMMON-MIB", "sonusEventClass"), ("SONUS-COMMON-MIB", "sonusEventLevel"))
if mibBuilder.loadTexts: sonusNodeEthernetInactiveNotification.setStatus('current')
if mibBuilder.loadTexts: sonusNodeEthernetInactiveNotification.setDescription('A sonusNodeEthernetInactive trap indicates that an Ethernet link is inactive for the specified shelf, slot and port.')
sonusNodeEthernetDegradedNotification = NotificationType((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 2, 0, 26)).setObjects(("SONUS-COMMON-MIB", "sonusShelfIndex"), ("SONUS-COMMON-MIB", "sonusSlotIndex"), ("SONUS-COMMON-MIB", "sonusPortIndex"), ("SONUS-COMMON-MIB", "sonusEventDescription"), ("SONUS-COMMON-MIB", "sonusEventClass"), ("SONUS-COMMON-MIB", "sonusEventLevel"))
if mibBuilder.loadTexts: sonusNodeEthernetDegradedNotification.setStatus('current')
if mibBuilder.loadTexts: sonusNodeEthernetDegradedNotification.setDescription('A sonusNodeEthernetDegraded trap indicates that an Ethernet link is detecting network errors for the specified shelf, slot and port. The EventLog should be viewed for possible additional information.')
sonusNodeBootNotification = NotificationType((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 2, 0, 27)).setObjects(("SONUS-COMMON-MIB", "sonusEventDescription"), ("SONUS-COMMON-MIB", "sonusEventClass"), ("SONUS-COMMON-MIB", "sonusEventLevel"))
if mibBuilder.loadTexts: sonusNodeBootNotification.setStatus('current')
if mibBuilder.loadTexts: sonusNodeBootNotification.setDescription("The Management Node Server module, in the node's master shelf, has begun the Node Boot process.")
sonusNodeSlaveShelfBootNotification = NotificationType((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 2, 0, 28)).setObjects(("SONUS-COMMON-MIB", "sonusShelfIndex"), ("SONUS-COMMON-MIB", "sonusEventDescription"), ("SONUS-COMMON-MIB", "sonusEventClass"), ("SONUS-COMMON-MIB", "sonusEventLevel"))
if mibBuilder.loadTexts: sonusNodeSlaveShelfBootNotification.setStatus('current')
if mibBuilder.loadTexts: sonusNodeSlaveShelfBootNotification.setDescription("The Management Node Server module, in a node's slave shelf, has begun the Node Boot process.")
sonusNodeNfsServerSwitchoverNotification = NotificationType((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 2, 0, 29)).setObjects(("SONUS-COMMON-MIB", "sonusShelfIndex"), ("SONUS-COMMON-MIB", "sonusSlotIndex"), ("SONUS-NODE-MIB", "sonusNfsServer"), ("SONUS-NODE-MIB", "sonusNfsServerIp"), ("SONUS-NODE-MIB", "sonusNfsServerMount"), ("SONUS-NODE-MIB", "sonusNfsReason"), ("SONUS-COMMON-MIB", "sonusEventDescription"), ("SONUS-COMMON-MIB", "sonusEventClass"), ("SONUS-COMMON-MIB", "sonusEventLevel"))
if mibBuilder.loadTexts: sonusNodeNfsServerSwitchoverNotification.setStatus('current')
if mibBuilder.loadTexts: sonusNodeNfsServerSwitchoverNotification.setDescription('Indicates that the Active NFS server has switched over to the Standby for the specified reason on the MNS in the given shelf and slot. The NFS server specified is the new Active.')
sonusNodeNfsServerOutOfServiceNotification = NotificationType((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 2, 0, 30)).setObjects(("SONUS-COMMON-MIB", "sonusShelfIndex"), ("SONUS-COMMON-MIB", "sonusSlotIndex"), ("SONUS-NODE-MIB", "sonusNfsServer"), ("SONUS-NODE-MIB", "sonusNfsServerIp"), ("SONUS-NODE-MIB", "sonusNfsServerMount"), ("SONUS-NODE-MIB", "sonusNfsReason"), ("SONUS-NODE-MIB", "sonusNfsErrorCode"), ("SONUS-COMMON-MIB", "sonusEventDescription"), ("SONUS-COMMON-MIB", "sonusEventClass"), ("SONUS-COMMON-MIB", "sonusEventLevel"))
if mibBuilder.loadTexts: sonusNodeNfsServerOutOfServiceNotification.setStatus('current')
if mibBuilder.loadTexts: sonusNodeNfsServerOutOfServiceNotification.setDescription('Indicates that the NFS server specified went out-of-service for the reason provided on the MNS in the given shelf and slot. If it was the result of a server failure, the error that caused the failure is also specified.')
sonusNodeNfsServerInServiceNotification = NotificationType((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 2, 0, 31)).setObjects(("SONUS-COMMON-MIB", "sonusShelfIndex"), ("SONUS-COMMON-MIB", "sonusSlotIndex"), ("SONUS-NODE-MIB", "sonusNfsServer"), ("SONUS-NODE-MIB", "sonusNfsServerIp"), ("SONUS-NODE-MIB", "sonusNfsServerMount"), ("SONUS-NODE-MIB", "sonusNfsReason"), ("SONUS-NODE-MIB", "sonusNfsRole"), ("SONUS-COMMON-MIB", "sonusEventDescription"), ("SONUS-COMMON-MIB", "sonusEventClass"), ("SONUS-COMMON-MIB", "sonusEventLevel"))
if mibBuilder.loadTexts: sonusNodeNfsServerInServiceNotification.setStatus('current')
if mibBuilder.loadTexts: sonusNodeNfsServerInServiceNotification.setDescription('Indicates that the NFS server specified came in-service for the reason provided on the MNS in the given shelf and slot. The Active/Standby role assumed by the server is also provided.')
sonusNodeNfsServerNotWritableNotification = NotificationType((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 2, 0, 32)).setObjects(("SONUS-COMMON-MIB", "sonusShelfIndex"), ("SONUS-COMMON-MIB", "sonusSlotIndex"), ("SONUS-NODE-MIB", "sonusNfsServer"), ("SONUS-NODE-MIB", "sonusNfsServerIp"), ("SONUS-NODE-MIB", "sonusNfsServerMount"), ("SONUS-NODE-MIB", "sonusNfsErrorCode"), ("SONUS-COMMON-MIB", "sonusEventDescription"), ("SONUS-COMMON-MIB", "sonusEventClass"), ("SONUS-COMMON-MIB", "sonusEventLevel"))
if mibBuilder.loadTexts: sonusNodeNfsServerNotWritableNotification.setStatus('current')
if mibBuilder.loadTexts: sonusNodeNfsServerNotWritableNotification.setDescription('Indicates that the NFS server specified is no longer writable by the MNS in the given shelf and slot. The error code received is provided.')
sonusNodeServerDisabledNotification = NotificationType((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 2, 0, 33)).setObjects(("SONUS-COMMON-MIB", "sonusShelfIndex"), ("SONUS-COMMON-MIB", "sonusSlotIndex"), ("SONUS-COMMON-MIB", "sonusEventDescription"), ("SONUS-COMMON-MIB", "sonusEventClass"), ("SONUS-COMMON-MIB", "sonusEventLevel"))
if mibBuilder.loadTexts: sonusNodeServerDisabledNotification.setStatus('current')
if mibBuilder.loadTexts: sonusNodeServerDisabledNotification.setDescription('The server modules administrative state has been set to disabled.')
sonusNodeServerEnabledNotification = NotificationType((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 2, 0, 34)).setObjects(("SONUS-COMMON-MIB", "sonusShelfIndex"), ("SONUS-COMMON-MIB", "sonusSlotIndex"), ("SONUS-COMMON-MIB", "sonusEventDescription"), ("SONUS-COMMON-MIB", "sonusEventClass"), ("SONUS-COMMON-MIB", "sonusEventLevel"))
if mibBuilder.loadTexts: sonusNodeServerEnabledNotification.setStatus('current')
if mibBuilder.loadTexts: sonusNodeServerEnabledNotification.setDescription('The server modules administrative state has been set to enabled.')
sonusNodeServerDeletedNotification = NotificationType((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 2, 0, 35)).setObjects(("SONUS-COMMON-MIB", "sonusShelfIndex"), ("SONUS-COMMON-MIB", "sonusSlotIndex"), ("SONUS-COMMON-MIB", "sonusEventDescription"), ("SONUS-COMMON-MIB", "sonusEventClass"), ("SONUS-COMMON-MIB", "sonusEventLevel"))
if mibBuilder.loadTexts: sonusNodeServerDeletedNotification.setStatus('current')
if mibBuilder.loadTexts: sonusNodeServerDeletedNotification.setDescription("The server module has been deleted from the node's configuration. All configuration data associated with the server module has been deleted.")
sonusParamBackupLoadNotification = NotificationType((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 2, 0, 36)).setObjects(("SONUS-COMMON-MIB", "sonusEventDescription"), ("SONUS-COMMON-MIB", "sonusEventClass"), ("SONUS-COMMON-MIB", "sonusEventLevel"))
if mibBuilder.loadTexts: sonusParamBackupLoadNotification.setStatus('current')
if mibBuilder.loadTexts: sonusParamBackupLoadNotification.setDescription('The backup parameter file was loaded. This indicates that the primary parameter file was lost or corrupted. The backup parameter file may contain data which is older than what the primary parameter file contains.')
sonusParamCorruptionNotification = NotificationType((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 2, 0, 37)).setObjects(("SONUS-NODE-MIB", "sonusParamLoadFileType"), ("SONUS-COMMON-MIB", "sonusEventDescription"), ("SONUS-COMMON-MIB", "sonusEventClass"), ("SONUS-COMMON-MIB", "sonusEventLevel"))
if mibBuilder.loadTexts: sonusParamCorruptionNotification.setStatus('current')
if mibBuilder.loadTexts: sonusParamCorruptionNotification.setDescription('The binary parameter inspected was corrupted. The indicated file was skipped due to corruption. This trap is only transmitted if a valid backup parameter file is located and successfully loaded.')
sonusNodeAdapterMissingNotification = NotificationType((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 2, 0, 38)).setObjects(("SONUS-COMMON-MIB", "sonusShelfIndex"), ("SONUS-COMMON-MIB", "sonusSlotIndex"), ("SONUS-COMMON-MIB", "sonusEventDescription"), ("SONUS-COMMON-MIB", "sonusEventClass"), ("SONUS-COMMON-MIB", "sonusEventLevel"))
if mibBuilder.loadTexts: sonusNodeAdapterMissingNotification.setStatus('current')
if mibBuilder.loadTexts: sonusNodeAdapterMissingNotification.setDescription('A sonusNodeAdpaterMissing trap indicates that an adapter module has not been detected in a specific shelf and slot.')
sonusNodeAdapterFailureNotification = NotificationType((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 2, 0, 39)).setObjects(("SONUS-COMMON-MIB", "sonusShelfIndex"), ("SONUS-COMMON-MIB", "sonusSlotIndex"), ("SONUS-COMMON-MIB", "sonusEventDescription"), ("SONUS-COMMON-MIB", "sonusEventClass"), ("SONUS-COMMON-MIB", "sonusEventLevel"))
if mibBuilder.loadTexts: sonusNodeAdapterFailureNotification.setStatus('current')
if mibBuilder.loadTexts: sonusNodeAdapterFailureNotification.setDescription('A sonusNodeAdpaterFailure trap indicates that an adapter module has been detected but is not operational.')
sonusNodeSlotResetNotification = NotificationType((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 2, 0, 40)).setObjects(("SONUS-COMMON-MIB", "sonusShelfIndex"), ("SONUS-COMMON-MIB", "sonusSlotIndex"), ("SONUS-COMMON-MIB", "sonusEventDescription"), ("SONUS-COMMON-MIB", "sonusEventClass"), ("SONUS-COMMON-MIB", "sonusEventLevel"))
if mibBuilder.loadTexts: sonusNodeSlotResetNotification.setStatus('current')
if mibBuilder.loadTexts: sonusNodeSlotResetNotification.setDescription('A sonusNodeSlotReset trap indicates that a server module in the designated slot was reset.')
sonusNodeParamWriteCompleteNotification = NotificationType((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 2, 0, 41)).setObjects(("SONUS-NODE-MIB", "sonusParamSaveFilename"), ("SONUS-NODE-MIB", "sonusParamSaveSeqNumber"), ("SONUS-NODE-MIB", "sonusParamLastSaveTime"), ("SONUS-COMMON-MIB", "sonusEventDescription"), ("SONUS-COMMON-MIB", "sonusEventClass"), ("SONUS-COMMON-MIB", "sonusEventLevel"))
if mibBuilder.loadTexts: sonusNodeParamWriteCompleteNotification.setStatus('current')
if mibBuilder.loadTexts: sonusNodeParamWriteCompleteNotification.setDescription('A sonusNodeParamWriteComplete trap indicates that NFS server successfully complete PIF write.')
sonusNodeParamWriteErrorNotification = NotificationType((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 2, 0, 42)).setObjects(("SONUS-NODE-MIB", "sonusParamSavePrimarySrvrReason"), ("SONUS-COMMON-MIB", "sonusEventDescription"), ("SONUS-COMMON-MIB", "sonusEventClass"), ("SONUS-COMMON-MIB", "sonusEventLevel"))
if mibBuilder.loadTexts: sonusNodeParamWriteErrorNotification.setStatus('current')
if mibBuilder.loadTexts: sonusNodeParamWriteErrorNotification.setDescription('A sonusNodeParamWriteError trap indicates that error occured during PIF write.')
sonusNodeBootMnsActiveNotification = NotificationType((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 2, 0, 43)).setObjects(("SONUS-COMMON-MIB", "sonusShelfIndex"), ("SONUS-COMMON-MIB", "sonusSlotIndex"), ("SONUS-COMMON-MIB", "sonusEventDescription"), ("SONUS-COMMON-MIB", "sonusEventClass"), ("SONUS-COMMON-MIB", "sonusEventLevel"))
if mibBuilder.loadTexts: sonusNodeBootMnsActiveNotification.setStatus('current')
if mibBuilder.loadTexts: sonusNodeBootMnsActiveNotification.setDescription('The Management Node Server module in the specified shelf and slot has become active following a Node Boot.')
sonusNodeShelfIntakeTempNormalNotification = NotificationType((1, 3, 6, 1, 4, 1, 2879, 2, 1, 1, 2, 0, 44)).setObjects(("SONUS-COMMON-MIB", "sonusShelfIndex"), ("SONUS-COMMON-MIB", "sonusEventDescription"), ("SONUS-COMMON-MIB", "sonusEventClass"), ("SONUS-COMMON-MIB", "sonusEventLevel"))
if mibBuilder.loadTexts: sonusNodeShelfIntakeTempNormalNotification.setStatus('current')
if mibBuilder.loadTexts: sonusNodeShelfIntakeTempNormalNotification.setDescription('A sonusNodeShelfIntakeTempNormal trap indicates that the intake temperature of the specified shelf is at or below 45C degrees.')
mibBuilder.exportSymbols("SONUS-NODE-MIB", sonusNodeSrvrAdmnTable=sonusNodeSrvrAdmnTable, sonusBparamNfsPrimary=sonusBparamNfsPrimary, sonusNodeAdapStatMfgDate=sonusNodeAdapStatMfgDate, sonusNodeSrvrAdmnState=sonusNodeSrvrAdmnState, sonusNfsAdmnSetWritable=sonusNfsAdmnSetWritable, sonusFlashConfigTable=sonusFlashConfigTable, sonusNodeSrvrStatShelfIndex=sonusNodeSrvrStatShelfIndex, sonusBparamIfSpeedTypeSlot2Port0=sonusBparamIfSpeedTypeSlot2Port0, sonusParamLastSaveTime=sonusParamLastSaveTime, sonusNodeSrvrStatUserName=sonusNodeSrvrStatUserName, sonusNodeAdapStatShelfIndex=sonusNodeAdapStatShelfIndex, sonusUserProfileUserAccess=sonusUserProfileUserAccess, sonusNfsStatActiveServer=sonusNfsStatActiveServer, sonusNodeSlotAdmnSlotIndex=sonusNodeSlotAdmnSlotIndex, sonusNfsStatTable=sonusNfsStatTable, sonusSwLoadAdmnIndex=sonusSwLoadAdmnIndex, sonusNfsStatSecondaryLastError=sonusNfsStatSecondaryLastError, sonusNodeServerResetNotification=sonusNodeServerResetNotification, sonusNodeShelfPowerB48VdcNormalNotification=sonusNodeShelfPowerB48VdcNormalNotification, sonusNvsConfigTable=sonusNvsConfigTable, sonusNodeShelfStatBackplane=sonusNodeShelfStatBackplane, sonusNodeShelfPowerA48VdcNormalNotification=sonusNodeShelfPowerA48VdcNormalNotification, sonusNodeAdapterFailureNotification=sonusNodeAdapterFailureNotification, sonusNodeSlotAdapState=sonusNodeSlotAdapState, sonusSwLoadAdmnImageName=sonusSwLoadAdmnImageName, sonusNodeAdapStatHwType=sonusNodeAdapStatHwType, sonusNfs=sonusNfs, sonusFlashStatLastStatus=sonusFlashStatLastStatus, sonusNodeServerEnabledNotification=sonusNodeServerEnabledNotification, sonusParamAdmnMaxIncrPifs=sonusParamAdmnMaxIncrPifs, sonusNfsStatPrimaryMount=sonusNfsStatPrimaryMount, sonusSwLoadTable=sonusSwLoadTable, sonusNodeShelfAdmn48VdcAState=sonusNodeShelfAdmn48VdcAState, sonusNodeSrvrStatCpuUtilization=sonusNodeSrvrStatCpuUtilization, sonusNodeSrvrStatPartNum=sonusNodeSrvrStatPartNum, sonusSwLoadSpecAdmnRowStatus=sonusSwLoadSpecAdmnRowStatus, sonusNodeSrvrStatTotalMem=sonusNodeSrvrStatTotalMem, sonusBparamSecName=sonusBparamSecName, sonusNodeSrvrAdmnRowStatus=sonusNodeSrvrAdmnRowStatus, sonusSwLoadAdmnRowStatus=sonusSwLoadAdmnRowStatus, sonusBparamIfSpeedTypeSlot2Port2=sonusBparamIfSpeedTypeSlot2Port2, sonusSwLoad=sonusSwLoad, sonusNodeParamWriteErrorNotification=sonusNodeParamWriteErrorNotification, sonusUserListComment=sonusUserListComment, sonusNodeShelfStatFanSpeed=sonusNodeShelfStatFanSpeed, sonusNodeSrvrStatFreeMem=sonusNodeSrvrStatFreeMem, sonusBparamNfsSecondary=sonusBparamNfsSecondary, sonusNfsAdmnEntry=sonusNfsAdmnEntry, sonusNodeShelfStat48VAStatus=sonusNodeShelfStat48VAStatus, sonusNodeAdapterInsertedNotification=sonusNodeAdapterInsertedNotification, sonusParamLoadTotalBytes=sonusParamLoadTotalBytes, sonusNodeSlotAdmnReset=sonusNodeSlotAdmnReset, sonusBparamCoreLevel=sonusBparamCoreLevel, sonusUserListTable=sonusUserListTable, sonusNodeSrvrStatSwVersionCode=sonusNodeSrvrStatSwVersionCode, sonusUserProfileUserPasswdState=sonusUserProfileUserPasswdState, sonusNfsStatShelfIndex=sonusNfsStatShelfIndex, sonusNodeShelfFanTrayPresentNotification=sonusNodeShelfFanTrayPresentNotification, sonusBparamNfsMountSec=sonusBparamNfsMountSec, sonusNodeServerDeletedNotification=sonusNodeServerDeletedNotification, sonusNodeShelfAdmnRestart=sonusNodeShelfAdmnRestart, sonusBparamIpAddrSlot1Port1=sonusBparamIpAddrSlot1Port1, sonusNodeShelfIntakeTempWarningNotification=sonusNodeShelfIntakeTempWarningNotification, sonusBparamNfsPathUpgrade=sonusBparamNfsPathUpgrade, sonusBparamBaudRate=sonusBparamBaudRate, sonusNodeBootMnsActiveNotification=sonusNodeBootMnsActiveNotification, sonusNodeMIB=sonusNodeMIB, sonusBparamIfSpeedTypeSlot2Port1=sonusBparamIfSpeedTypeSlot2Port1, sonusParamSaveTimeStart=sonusParamSaveTimeStart, sonusParamSaveDuration=sonusParamSaveDuration, sonusBparamIpAddrSlot2Port0=sonusBparamIpAddrSlot2Port0, sonusNodeShelfFanTrayRemovedNotification=sonusNodeShelfFanTrayRemovedNotification, sonusParamLoadSeqNumber=sonusParamLoadSeqNumber, sonusUserListNextIndex=sonusUserListNextIndex, sonusSwLoadSpecAdmnShelfIndex=sonusSwLoadSpecAdmnShelfIndex, sonusNodeSrvrStatSerialNum=sonusNodeSrvrStatSerialNum, sonusNodeShelfFanTrayFailureNotification=sonusNodeShelfFanTrayFailureNotification, sonusNodeShelfStatEntry=sonusNodeShelfStatEntry, sonusBparamBootDelay=sonusBparamBootDelay, sonusUserProfileUserStateState=sonusUserProfileUserStateState, sonusBparamIpAddrSlot1Port0=sonusBparamIpAddrSlot1Port0, sonusNfsStatPrimaryStatus=sonusNfsStatPrimaryStatus, sonusNodeServerSoftwareFailureNotification=sonusNodeServerSoftwareFailureNotification, sonusNodeSrvrStatViewName=sonusNodeSrvrStatViewName, sonusNodeSlotAdmnTable=sonusNodeSlotAdmnTable, sonusBparamIpMaskSlot1Port1=sonusBparamIpMaskSlot1Port1, sonusNodeSrvrStatMode=sonusNodeSrvrStatMode, sonusParamBackupLoadNotification=sonusParamBackupLoadNotification, sonusNodeShelfIntakeTempNormalNotification=sonusNodeShelfIntakeTempNormalNotification, sonusParamSaveTimeStop=sonusParamSaveTimeStop, sonusParamSaveSeqNumber=sonusParamSaveSeqNumber, sonusNodeSrvrStatTable=sonusNodeSrvrStatTable, sonusNodeStatMgmtStatus=sonusNodeStatMgmtStatus, sonusNodeSrvrAdmnEntry=sonusNodeSrvrAdmnEntry, sonusNodeMtaRemovedNotification=sonusNodeMtaRemovedNotification, sonusNodeSlotAdapHwType=sonusNodeSlotAdapHwType, sonusNodeSrvrStatMfgDate=sonusNodeSrvrStatMfgDate, sonusNfsStatSecondaryIP=sonusNfsStatSecondaryIP, sonusBparamIpGatewaySlot1Port0=sonusBparamIpGatewaySlot1Port0, sonusNodeMtaInsertedNotification=sonusNodeMtaInsertedNotification, sonusBparamIpGatewaySlot1Port1=sonusBparamIpGatewaySlot1Port1, sonusBparamIfSpeedTypeSlot1Port0=sonusBparamIfSpeedTypeSlot1Port0, sonusNode=sonusNode, sonusNodeSrvrAdmnDumpState=sonusNodeSrvrAdmnDumpState, sonusFlashStatState=sonusFlashStatState, sonusBparamIpAddrSlot1Port2=sonusBparamIpAddrSlot1Port2, sonusNodeSrvrStatSlotIndex=sonusNodeSrvrStatSlotIndex, sonusNfsAdmnUnmountServer=sonusNfsAdmnUnmountServer, sonusNodeShelfAdmnEntry=sonusNodeShelfAdmnEntry, sonusNodeBootNotification=sonusNodeBootNotification, sonusUserListUserName=sonusUserListUserName, sonusNodeSlotTable=sonusNodeSlotTable, sonusParamCorruptionNotification=sonusParamCorruptionNotification, sonusNodeShelfStatType=sonusNodeShelfStatType, sonusSwLoadSpecEntry=sonusSwLoadSpecEntry, sonusNodeStatNextIfIndex=sonusNodeStatNextIfIndex, sonusNodeSlotState=sonusNodeSlotState, sonusUserListAccess=sonusUserListAccess, sonusNodeSrvrAdmnAdapHwType=sonusNodeSrvrAdmnAdapHwType, sonusNodeAdapStatEntry=sonusNodeAdapStatEntry, sonusNvsConfig=sonusNvsConfig, sonusNodeAdmnTelnetLogin=sonusNodeAdmnTelnetLogin, sonusNodeShelfStat48VBStatus=sonusNodeShelfStat48VBStatus, sonusNodeMIBNotifications=sonusNodeMIBNotifications, sonusUserListProfileName=sonusUserListProfileName, sonusNodeNfsServerSwitchoverNotification=sonusNodeNfsServerSwitchoverNotification, sonusNodeSlaveShelfBootNotification=sonusNodeSlaveShelfBootNotification, sonusUserProfileUserAccessState=sonusUserProfileUserAccessState, sonusNodeSrvrAdmnMode=sonusNodeSrvrAdmnMode, sonusBparamIpMaskSlot2Port2=sonusBparamIpMaskSlot2Port2, sonusParamSaveTotalBytes=sonusParamSaveTotalBytes, sonusNodeShelfFanTrayOperationalNotification=sonusNodeShelfFanTrayOperationalNotification, sonusBparamIfSpeedTypeSlot1Port1=sonusBparamIfSpeedTypeSlot1Port1, sonusUserProfileRowStatus=sonusUserProfileRowStatus, sonusNodeShelfPowerB48VdcFailureNotification=sonusNodeShelfPowerB48VdcFailureNotification, sonusParamSaveState=sonusParamSaveState, sonusFlashAdmnSlotIndex=sonusFlashAdmnSlotIndex, sonusBparamIpGatewaySlot2Port0=sonusBparamIpGatewaySlot2Port0, sonusNodeAdapStatSlotIndex=sonusNodeAdapStatSlotIndex, sonusNodeAdapStatPartNumRev=sonusNodeAdapStatPartNumRev, sonusBparamIpGatewaySlot2Port2=sonusBparamIpGatewaySlot2Port2, sonusBparamNfsMountPri=sonusBparamNfsMountPri, sonusNodeSrvrAdmnAction=sonusNodeSrvrAdmnAction, sonusNfsServer=sonusNfsServer, sonusUserProfileEntry=sonusUserProfileEntry, sonusNodeServerRemovedNotification=sonusNodeServerRemovedNotification, sonusFlashStatusTable=sonusFlashStatusTable, sonusSwLoadSpecAdmnSlotIndex=sonusSwLoadSpecAdmnSlotIndex, sonusUserProfileUserCommentState=sonusUserProfileUserCommentState, sonusBparamShelfIndex=sonusBparamShelfIndex, sonusParamLoadTotalRecords=sonusParamLoadTotalRecords, sonusBparamNfsPathLoad=sonusBparamNfsPathLoad, sonusUserListStatusLastConfigChange=sonusUserListStatusLastConfigChange, sonusNodeParamWriteCompleteNotification=sonusNodeParamWriteCompleteNotification, sonusNodeShelfAdmnTable=sonusNodeShelfAdmnTable, sonusNodeStatShelvesPresent=sonusNodeStatShelvesPresent, sonusUserListEntry=sonusUserListEntry, sonusNodeAdapStatPartNum=sonusNodeAdapStatPartNum, sonusNodeServerTempFailureNotification=sonusNodeServerTempFailureNotification, sonusNodeAdapStatSerialNum=sonusNodeAdapStatSerialNum, sonusFlashConfigEntry=sonusFlashConfigEntry, sonusNodeShelfAdmn48VdcBState=sonusNodeShelfAdmn48VdcBState, sonusNfsStatSecondaryMount=sonusNfsStatSecondaryMount, sonusUserProfileUserState=sonusUserProfileUserState, sonusNodeSrvrStatEpldRev=sonusNodeSrvrStatEpldRev, sonusNodeSrvrAdmnSpecialFunction=sonusNodeSrvrAdmnSpecialFunction, sonusNodeSrvrStatFlashVersion=sonusNodeSrvrStatFlashVersion, sonusSwLoadSpecTable=sonusSwLoadSpecTable, sonusParamSaveTotalRecords=sonusParamSaveTotalRecords, sonusNodeSrvrStatFreeSharedMem=sonusNodeSrvrStatFreeSharedMem, sonusNodeNfsServerInServiceNotification=sonusNodeNfsServerInServiceNotification, sonusBparamCliScript=sonusBparamCliScript, sonusNodeSrvrStatTemperature=sonusNodeSrvrStatTemperature, sonusParamSaveSecondarySrvrReason=sonusParamSaveSecondarySrvrReason, sonusFlashStatSlotIndex=sonusFlashStatSlotIndex, sonusNodeNfsServerOutOfServiceNotification=sonusNodeNfsServerOutOfServiceNotification, sonusNodeShelfAdmnIpaddr1=sonusNodeShelfAdmnIpaddr1, sonusBparamParamMode=sonusBparamParamMode, sonusBparamIpMaskSlot1Port0=sonusBparamIpMaskSlot1Port0, sonusNodeShelfStatTable=sonusNodeShelfStatTable, sonusUser=sonusUser, sonusNodeServerPowerFailureNotification=sonusNodeServerPowerFailureNotification, sonusParamSaveSecondarySrvrState=sonusParamSaveSecondarySrvrState, sonusFlashAdmnUpdateButton=sonusFlashAdmnUpdateButton, sonusNodeEthernetDegradedNotification=sonusNodeEthernetDegradedNotification, sonusNodeServerOperationalNotification=sonusNodeServerOperationalNotification, sonusNfsAdmnToggleActiveServer=sonusNfsAdmnToggleActiveServer, sonusParamLoadSerialNum=sonusParamLoadSerialNum, sonusBparamPrimName=sonusBparamPrimName, sonusNodeSrvrStatHostName=sonusNodeSrvrStatHostName, sonusUserListStatusTable=sonusUserListStatusTable, sonusNodeNfsServerNotWritableNotification=sonusNodeNfsServerNotWritableNotification, sonusNfsAdmnMountServer=sonusNfsAdmnMountServer, sonusNodeServerTempNormalNotification=sonusNodeServerTempNormalNotification, sonusParamLoadFileType=sonusParamLoadFileType, sonusNodeSrvrStatSwVersion=sonusNodeSrvrStatSwVersion, sonusUserListStatusIndex=sonusUserListStatusIndex, sonusNfsServerMount=sonusNfsServerMount, sonusFlashStatusEntry=sonusFlashStatusEntry, sonusNodeShelfPowerA48VdcFailureNotification=sonusNodeShelfPowerA48VdcFailureNotification, sonusBparamUId=sonusBparamUId, sonusNfsStatSlotIndex=sonusNfsStatSlotIndex, sonusNodeSrvrAdmnDryupLimit=sonusNodeSrvrAdmnDryupLimit, sonusUserListPasswd=sonusUserListPasswd, sonusNodeSrvrStatMemUtilization=sonusNodeSrvrStatMemUtilization, sonusUserProfileNextIndex=sonusUserProfileNextIndex, sonusNodeSrvrAdmnHwType=sonusNodeSrvrAdmnHwType, sonusUserProfileName=sonusUserProfileName, sonusUserProfile=sonusUserProfile, sonusNodeAdapStatMiddVersion=sonusNodeAdapStatMiddVersion, sonusUserProfileTable=sonusUserProfileTable, sonusNodeAdmnObjects=sonusNodeAdmnObjects, sonusFlashAdmnShelfIndex=sonusFlashAdmnShelfIndex, sonusBparamIpMaskSlot1Port2=sonusBparamIpMaskSlot1Port2, sonusNodeEthernetActiveNotification=sonusNodeEthernetActiveNotification, sonusNodeShelfStatSlots=sonusNodeShelfStatSlots, sonusNodeServerTempWarningNotification=sonusNodeServerTempWarningNotification, sonusNodeShelfAdmnState=sonusNodeShelfAdmnState, sonusNodeMIBObjects=sonusNodeMIBObjects, sonusNodeSrvrAdmnRedundancyRole=sonusNodeSrvrAdmnRedundancyRole, sonusNfsAdmnShelfIndex=sonusNfsAdmnShelfIndex, sonusParam=sonusParam, sonusNfsStatEntry=sonusNfsStatEntry, sonusFlashStatShelfIndex=sonusFlashStatShelfIndex, sonusNfsStatStandbyServer=sonusNfsStatStandbyServer, sonusNodeSlotHwType=sonusNodeSlotHwType, sonusNodeShelfAdmnStatus=sonusNodeShelfAdmnStatus, sonusBparamPasswd=sonusBparamPasswd, sonusNodeSlotHwTypeRev=sonusNodeSlotHwTypeRev, sonusParamSaveFilename=sonusParamSaveFilename, sonusNodeSlotAdmnEntry=sonusNodeSlotAdmnEntry, sonusNodeSrvrAdmnShelfIndex=sonusNodeSrvrAdmnShelfIndex, sonusBparamCoreState=sonusBparamCoreState, sonusNfsServerIp=sonusNfsServerIp, sonusNodeSrvrStatEntry=sonusNodeSrvrStatEntry, sonusBparamUnused=sonusBparamUnused, sonusBparamCoreDumpLimit=sonusBparamCoreDumpLimit, sonusUserList=sonusUserList, sonusNodeServerInsertedNotification=sonusNodeServerInsertedNotification, sonusNfsStatPrimaryLastError=sonusNfsStatPrimaryLastError, sonusNodeMIBNotificationsObjects=sonusNodeMIBNotificationsObjects, sonusSwLoadEntry=sonusSwLoadEntry, sonusNodeShelfStatFan=sonusNodeShelfStatFan, sonusNodeShelfStatSerialNumber=sonusNodeShelfStatSerialNumber, sonusSwLoadSpecAdmnImageName=sonusSwLoadSpecAdmnImageName, sonusBparamIfSpeedTypeSlot1Port2=sonusBparamIfSpeedTypeSlot1Port2, sonusBparamIpAddrSlot2Port1=sonusBparamIpAddrSlot2Port1, sonusNfsRole=sonusNfsRole, sonusNodeSlotResetNotification=sonusNodeSlotResetNotification, sonusParamStatusObjects=sonusParamStatusObjects, sonusUserListRowStatus=sonusUserListRowStatus, sonusNfsStatSecondaryStatus=sonusNfsStatSecondaryStatus, sonusBparamNfsPathSoftware=sonusBparamNfsPathSoftware, sonusUserListIndex=sonusUserListIndex)
mibBuilder.exportSymbols("SONUS-NODE-MIB", sonusBparamIpAddrSlot2Port2=sonusBparamIpAddrSlot2Port2, sonusNvsConfigEntry=sonusNvsConfigEntry, sonusNodeAdapStatHwTypeRev=sonusNodeAdapStatHwTypeRev, sonusNodeShelfAdmnIndex=sonusNodeShelfAdmnIndex, sonusSwLoadAdmnHwType=sonusSwLoadAdmnHwType, sonusNodeSlotPower=sonusNodeSlotPower, sonusParamLoadDuration=sonusParamLoadDuration, sonusNodeMIBNotificationsPrefix=sonusNodeMIBNotificationsPrefix, sonusNodeSrvrStatBuildNum=sonusNodeSrvrStatBuildNum, sonusUserProfileUserPasswd=sonusUserProfileUserPasswd, sonusParamLoadStatus=sonusParamLoadStatus, sonusNfsAdmnTable=sonusNfsAdmnTable, sonusNodeShelfAdmnIpaddr2=sonusNodeShelfAdmnIpaddr2, sonusNodeSlotShelfIndex=sonusNodeSlotShelfIndex, sonusNodeAdapterRemovedNotification=sonusNodeAdapterRemovedNotification, sonusNodeSrvrStatPartNumRev=sonusNodeSrvrStatPartNumRev, sonusBparamMasterState=sonusBparamMasterState, PYSNMP_MODULE_ID=sonusNodeMIB, sonusNodeStatusObjects=sonusNodeStatusObjects, sonusNodeAdapStatTable=sonusNodeAdapStatTable, sonusBparamGrpId=sonusBparamGrpId, sonusNfsReason=sonusNfsReason, sonusNodeSrvrStatHwTypeRev=sonusNodeSrvrStatHwTypeRev, sonusNodeAdmnShelves=sonusNodeAdmnShelves, sonusParamSavePrimarySrvrState=sonusParamSavePrimarySrvrState, sonusNodeShelfAdmnRowStatus=sonusNodeShelfAdmnRowStatus, sonusNodeSlotEntry=sonusNodeSlotEntry, sonusUserProfileUserComment=sonusUserProfileUserComment, sonusNodeSrvrStatTotalSharedMem=sonusNodeSrvrStatTotalSharedMem, sonusBparamIpGatewaySlot1Port2=sonusBparamIpGatewaySlot1Port2, sonusNodeSrvrAdmnSlotIndex=sonusNodeSrvrAdmnSlotIndex, sonusBparamIpGatewaySlot2Port1=sonusBparamIpGatewaySlot2Port1, sonusNodeSrvrStatMiddVersion=sonusNodeSrvrStatMiddVersion, sonusParamLoadServer=sonusParamLoadServer, sonusParamSavePrimarySrvrReason=sonusParamSavePrimarySrvrReason, sonusUserProfileIndex=sonusUserProfileIndex, sonusNfsAdmnSlotIndex=sonusNfsAdmnSlotIndex, sonusNodeSlotAdmnShelfIndex=sonusNodeSlotAdmnShelfIndex, sonusNodeAdapterMissingNotification=sonusNodeAdapterMissingNotification, sonusNodeSlotIndex=sonusNodeSlotIndex, sonusNodeShelfStatIndex=sonusNodeShelfStatIndex, sonusUserListState=sonusUserListState, sonusNodeEthernetInactiveNotification=sonusNodeEthernetInactiveNotification, sonusNodeServerHardwareFailureNotification=sonusNodeServerHardwareFailureNotification, sonusNodeShelfStatBootCount=sonusNodeShelfStatBootCount, sonusNfsErrorCode=sonusNfsErrorCode, sonusBparamIpMaskSlot2Port0=sonusBparamIpMaskSlot2Port0, sonusParamAdminObject=sonusParamAdminObject, sonusNodeServerDisabledNotification=sonusNodeServerDisabledNotification, sonusNodeSrvrStatHwType=sonusNodeSrvrStatHwType, sonusNodeShelfStatTemperature=sonusNodeShelfStatTemperature, sonusUserListStatusEntry=sonusUserListStatusEntry, sonusBparamIpMaskSlot2Port1=sonusBparamIpMaskSlot2Port1, sonusNfsStatPrimaryIP=sonusNfsStatPrimaryIP)
