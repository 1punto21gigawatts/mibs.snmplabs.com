#
# PySNMP MIB module CISCO-IEEE8021-CFM-EXT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-IEEE8021-CFM-EXT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:00:01 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
Dot1agCfmMpDirection, dot1agCfmMdIndex, dot1agCfmMaIndex = mibBuilder.importSymbols("IEEE8021-CFM-MIB", "Dot1agCfmMpDirection", "dot1agCfmMdIndex", "dot1agCfmMaIndex")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
VlanId, = mibBuilder.importSymbols("Q-BRIDGE-MIB", "VlanId")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
Counter32, Bits, IpAddress, Gauge32, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, Integer32, Unsigned32, MibIdentifier, iso, NotificationType, TimeTicks, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "Bits", "IpAddress", "Gauge32", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "Integer32", "Unsigned32", "MibIdentifier", "iso", "NotificationType", "TimeTicks", "ObjectIdentity")
TextualConvention, MacAddress, StorageType, DisplayString, RowStatus, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "MacAddress", "StorageType", "DisplayString", "RowStatus", "TruthValue")
ciscoIeee8021CfmExtMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 679))
ciscoIeee8021CfmExtMIB.setRevisions(('2008-11-13 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoIeee8021CfmExtMIB.setRevisionsDescriptions(('Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoIeee8021CfmExtMIB.setLastUpdated('200811130000Z')
if mibBuilder.loadTexts: ciscoIeee8021CfmExtMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoIeee8021CfmExtMIB.setContactInfo('Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-lan-switch-snmp@cisco.com')
if mibBuilder.loadTexts: ciscoIeee8021CfmExtMIB.setDescription('A MIB module for extending the IEEE8021-CFM-MIB and IEEE8021-CFM-V2-MIB to add objects which provide additional information about Connectivity Fault management(CFM) not available in IEEE8021-CFM-MIB and IEEE8021-CFM-V2-MIB. Glossary: Connectivity Fault Management (CFM): Connectivity Fault Management comprises capabilities for detecting, verifying, and isolating connectivity failures in Virtual Bridged Local Area Networks. Maintenance Domain (MD): The network or the part of the network for which faults in connectivity can be managed. Service Access Point (SAP): The point at which a service is offered. Domain Service Access Point (DoSAP): A member of a set of SAPs at which a Maintenance Domain is capable of offering connectivity to systems outside the Maintenance Domain. Intermediate Service Access Points (ISAP): A SAP, interior to a Maintenance Domain, through which frames can pass in transit from DoSAP to DoSAP. Maintenance association End Point (MEP): An actively managed CFM entity, associated with a specific domain service access point of a service instance, which can generate and receive CFM PDUs and track any responses. Maintenance Association (MA): A set of MEPs, each configured with the same MAID and MD Level, established to verify the integrity of a single service instance. Maintenance domain Intermediate Point (MIP): A CFM entity consisting of two MHFs. A MHF is a CFM entity, associated with a single Maintenance Domain, and thus with a single MD Level and a set of VIDs, that cannot generate CFM PDUs, but only in response to received CFM PDUs. Continuity Check Message (CCM): A multicast CFM PDU transmitted periodically by a MEP in order to ensure continuity over the MA to which the transmitting MEP belongs. No reply is sent by any MP in response to receiving a CCM. Continuity Check Initiator (CCI): A state machine. Once it starts, CCMs will be generated. Linktrace Message (LTM): A CFM PDU initiated by a MEP to trace a path to a target MAC address, forwarded from MIP to MIP, up to the point at which the LTM reaches its target, a MEP, or can no longer be forwarded. Linktrace Reply (LTR): A unicast CFM PDU sent by an MP to a MEP, in response to receiving an LTM from that MEP. Content Addressable memory (CAM): The CAM table is consulted to make the frame forwarding decision. On Ethernet networks that transmit IP, switches learn MAC addresses from the source address of ethernet frames on the interfaces.')
cIeeeCfmExtMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 679, 0))
cIeeeCfmExtMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 679, 1))
cIeeeCfmExtMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 679, 2))
ciceCfmGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 679, 1, 1))
ciceCfmLtr = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 679, 1, 2))
ciceCfmMa = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 679, 1, 3))
ciceCfmIfObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 679, 1, 4))
ciceCfmMep = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 679, 1, 5))
ciceCfmEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 679, 1, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciceCfmEnable.setStatus('current')
if mibBuilder.loadTexts: ciceCfmEnable.setDescription("This object enables or disables the CFM feature of the local device. When the object is 'true', CFM feature is enabled. When the object is 'false', CFM feature is disabled.")
ciceCfmMaxMdLevel = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 679, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciceCfmMaxMdLevel.setStatus('current')
if mibBuilder.loadTexts: ciceCfmMaxMdLevel.setDescription('This object indicates the maximum MD level that has been configured through dot1agCfmMdMdLevel of IEEE8021-CFM-MIB in the system.')
ciceCfmBrainAddress = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 679, 1, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciceCfmBrainAddress.setStatus('current')
if mibBuilder.loadTexts: ciceCfmBrainAddress.setDescription('This object indicates the brain MAC address of the bridge. The brain MAC address is used by unicast CFM messages.')
ciceCfmCcMulticastAddress = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 679, 1, 1, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciceCfmCcMulticastAddress.setStatus('current')
if mibBuilder.loadTexts: ciceCfmCcMulticastAddress.setDescription('This object indicates the CFM Continuity Check multicast Mac Address.')
ciceCfmLtmMulticastAddress = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 679, 1, 1, 5), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciceCfmLtmMulticastAddress.setStatus('current')
if mibBuilder.loadTexts: ciceCfmLtmMulticastAddress.setDescription('This object indicates the CFM LTM multicast Mac Address.')
ciceCfmEnableFaultAlarm = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 679, 1, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciceCfmEnableFaultAlarm.setStatus('current')
if mibBuilder.loadTexts: ciceCfmEnableFaultAlarm.setDescription("This variable indicates whether the system produces the dot1agCfmFaultAlarm defined in IEEE8021-CFM-MIB. A value of 'false' prevents dot1agCfmFaultAlarm from being generated.")
ciceCfmLtrEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 679, 1, 2, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciceCfmLtrEnable.setStatus('current')
if mibBuilder.loadTexts: ciceCfmLtrEnable.setDescription("This object specifies whether caching CFM LTRs in dot1agCfmLtrTable of IEEE8021-CFM-MIB is enabled. The Linktrace replies will be cached in dot1agCfmLtrTable only if this object has the value of 'true'.")
ciceCfmLtrHoldTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 679, 1, 2, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setUnits('minutes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciceCfmLtrHoldTime.setStatus('current')
if mibBuilder.loadTexts: ciceCfmLtrHoldTime.setDescription('This object is the cache time for retaining an entry in dot1agCfmLtrTable of IEEE8021-CFM-MIB.')
ciceCfmLtrSize = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 679, 1, 2, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciceCfmLtrSize.setStatus('current')
if mibBuilder.loadTexts: ciceCfmLtrSize.setDescription('This object is the cache size of LTRs in dot1agCfmLtrTable of IEEE8021-CFM-MIB. A value of zero for this object indicates that there is no limitation on the cache size.')
ciceCfmMaNetTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 679, 1, 3, 1), )
if mibBuilder.loadTexts: ciceCfmMaNetTable.setStatus('current')
if mibBuilder.loadTexts: ciceCfmMaNetTable.setDescription('This table contains a list of Maintenance Association.')
ciceCfmMaNetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 679, 1, 3, 1, 1), ).setIndexNames((0, "IEEE8021-CFM-MIB", "dot1agCfmMdIndex"), (0, "IEEE8021-CFM-MIB", "dot1agCfmMaIndex"))
if mibBuilder.loadTexts: ciceCfmMaNetEntry.setStatus('current')
if mibBuilder.loadTexts: ciceCfmMaNetEntry.setDescription('An entry containing Continuity Check configuration for a particular MA.')
ciceCfmMaNetCciEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 679, 1, 3, 1, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciceCfmMaNetCciEnable.setStatus('current')
if mibBuilder.loadTexts: ciceCfmMaNetCciEnable.setDescription("This object specifies whether Continuity Check Initiator is enabled. A value of 'true' indicates that the Continuity Check Initiator state machine will start and all MEPs in this MA will generate Continuity Check Messages (CCMs).")
ciceCfmMaNetCciDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 679, 1, 3, 1, 1, 2), Dot1agCfmMpDirection()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciceCfmMaNetCciDirection.setStatus('current')
if mibBuilder.loadTexts: ciceCfmMaNetCciDirection.setDescription('This object specifies the direction in which the Maintenance association faces on the bridge port.')
ciceCfmMaNetLossThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 679, 1, 3, 1, 1, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciceCfmMaNetLossThreshold.setStatus('current')
if mibBuilder.loadTexts: ciceCfmMaNetLossThreshold.setDescription('This object specifies the number of CCMs that is allowed to be lost before cleaning up the corresponding entry in CC database.')
ciceCfmInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 679, 1, 4, 1), )
if mibBuilder.loadTexts: ciceCfmInterfaceTable.setStatus('current')
if mibBuilder.loadTexts: ciceCfmInterfaceTable.setDescription('This table contains a list of CFM capable ports.')
ciceCfmInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 679, 1, 4, 1, 1), ).setIndexNames((0, "CISCO-IEEE8021-CFM-EXT-MIB", "ciceCfmIfIndex"))
if mibBuilder.loadTexts: ciceCfmInterfaceEntry.setStatus('current')
if mibBuilder.loadTexts: ciceCfmInterfaceEntry.setDescription('An entry containing information about the CFM state on a particular CFM capable port.')
ciceCfmIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 679, 1, 4, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: ciceCfmIfIndex.setReference('RFC 2233 - The Interfaces Group MIB using SMIv2, McCloghrie, K., and F. Kastenholtz, Nov. 1997')
if mibBuilder.loadTexts: ciceCfmIfIndex.setStatus('current')
if mibBuilder.loadTexts: ciceCfmIfIndex.setDescription('The port number associated with this CFM port. This is a unique index for an entry in the ciceCfmInterfaceTable. A non-zero index for an entry indicates the ifIndex for the corresponding CFM capable interface entry in the ifTable. Note that this table does not necessarily correspond one-to-one with all entries in the Interface MIB; rather, only those which are enabled for CFM functionality.')
ciceCfmIfState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 679, 1, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("transparent", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciceCfmIfState.setStatus('current')
if mibBuilder.loadTexts: ciceCfmIfState.setDescription('The administrative CFM state of the port. enable - enables CFM on the port. disable - disables CFM on the port. transparent - forward CFM frames like regular data traffic.')
ciceCfmMipTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 679, 1, 4, 2), )
if mibBuilder.loadTexts: ciceCfmMipTable.setStatus('current')
if mibBuilder.loadTexts: ciceCfmMipTable.setDescription('This table contains a list of Maintenance domain Intermediate Points. This table manages MIPs which are created by rules specified on the Maintenance Association (MA) and Maintenance Domain (MD) on the local device. MIPs can also be created by rules specified on Default MD Level, which is covered by dot1agCfmDefaultMdTable in IEEE8021-CFM-MIB.')
ciceCfmMipEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 679, 1, 4, 2, 1), ).setIndexNames((0, "CISCO-IEEE8021-CFM-EXT-MIB", "ciceCfmIfIndex"), (0, "CISCO-IEEE8021-CFM-EXT-MIB", "ciceCfmMipVlanIndex"))
if mibBuilder.loadTexts: ciceCfmMipEntry.setStatus('current')
if mibBuilder.loadTexts: ciceCfmMipEntry.setDescription('An entry containing configuration of a particular MIP. Each row in the table represents a different MIP. In order to facilitate the diagnosis of connectivity failures, an administrator can make a DoSAP visible as an ISAP to the immediately enclosing Maintenance Domain by configuring it as a MIP. In the lowest Maintenance Domains, the MIPs can be configured on individual Bridge Ports.')
ciceCfmMipVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 679, 1, 4, 2, 1, 1), VlanId())
if mibBuilder.loadTexts: ciceCfmMipVlanIndex.setStatus('current')
if mibBuilder.loadTexts: ciceCfmMipVlanIndex.setDescription('The VLAN-ID with which the MIP is associated on the interface.')
ciceCfmMipMdLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 679, 1, 4, 2, 1, 2), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciceCfmMipMdLevel.setStatus('current')
if mibBuilder.loadTexts: ciceCfmMipMdLevel.setDescription('The MD level of the MIP.')
ciceCfmMipStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 679, 1, 4, 2, 1, 3), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciceCfmMipStorageType.setStatus('current')
if mibBuilder.loadTexts: ciceCfmMipStorageType.setDescription('The storage type for this conceptual row.')
ciceCfmMipRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 679, 1, 4, 2, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciceCfmMipRowStatus.setStatus('current')
if mibBuilder.loadTexts: ciceCfmMipRowStatus.setDescription('The status of the row. The writable columns in a row can not be changed if the row is active. All columns must have a valid value before a row can be activated.')
ciceCfmMacEnableIfTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 679, 1, 4, 3), )
if mibBuilder.loadTexts: ciceCfmMacEnableIfTable.setStatus('current')
if mibBuilder.loadTexts: ciceCfmMacEnableIfTable.setDescription('This table contains a list of VLANs on CFM interfaces. Each row in the table represents a MAC enable configuration on an interface associated with a VLAN. Creating one row installs a system CAM entry. Linktrace replies and Loopback messages and replies could be seen from the interface for which the Mac address was learnt via the system CAM table for Down MEPs.')
ciceCfmMacEnableIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 679, 1, 4, 3, 1), ).setIndexNames((0, "CISCO-IEEE8021-CFM-EXT-MIB", "ciceCfmIfIndex"), (0, "CISCO-IEEE8021-CFM-EXT-MIB", "ciceCfmMacEnableVlanIndex"))
if mibBuilder.loadTexts: ciceCfmMacEnableIfEntry.setStatus('current')
if mibBuilder.loadTexts: ciceCfmMacEnableIfEntry.setDescription('An entry containing MAC enable configuration of a particular VLAN on an interface.')
ciceCfmMacEnableVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 679, 1, 4, 3, 1, 1), VlanId())
if mibBuilder.loadTexts: ciceCfmMacEnableVlanIndex.setStatus('current')
if mibBuilder.loadTexts: ciceCfmMacEnableVlanIndex.setDescription('The VLAN-ID with which the MAC enable attribute is associated on the interface.')
ciceCfmMacEnableStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 679, 1, 4, 3, 1, 2), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciceCfmMacEnableStorageType.setStatus('current')
if mibBuilder.loadTexts: ciceCfmMacEnableStorageType.setDescription('The storage type for this conceptual row.')
ciceCfmMacEnableRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 679, 1, 4, 3, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciceCfmMacEnableRowStatus.setStatus('current')
if mibBuilder.loadTexts: ciceCfmMacEnableRowStatus.setDescription('The status of the row. The writable columns in a row can not be changed if the row is active. All columns must have a valid value before a row can be activated.')
ciceCfmMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 679, 2, 1))
ciceCfmMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 679, 2, 2))
ciceCfmMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 679, 2, 1, 1)).setObjects(("CISCO-IEEE8021-CFM-EXT-MIB", "ciceCfmGlobalObjectsGroup"), ("CISCO-IEEE8021-CFM-EXT-MIB", "ciceCfmInterfaceGroup"), ("CISCO-IEEE8021-CFM-EXT-MIB", "ciceCfmLtrConfigGroup"), ("CISCO-IEEE8021-CFM-EXT-MIB", "ciceCfmMaNetGroup"), ("CISCO-IEEE8021-CFM-EXT-MIB", "ciceCfmMipGroup"), ("CISCO-IEEE8021-CFM-EXT-MIB", "ciceCfmMacEnableGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciceCfmMIBCompliance = ciceCfmMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: ciceCfmMIBCompliance.setDescription('The compliance statement for the CISCO-IEEE8021-CFM-EXT-MIB.')
ciceCfmGlobalObjectsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 679, 2, 2, 1)).setObjects(("CISCO-IEEE8021-CFM-EXT-MIB", "ciceCfmEnable"), ("CISCO-IEEE8021-CFM-EXT-MIB", "ciceCfmMaxMdLevel"), ("CISCO-IEEE8021-CFM-EXT-MIB", "ciceCfmBrainAddress"), ("CISCO-IEEE8021-CFM-EXT-MIB", "ciceCfmCcMulticastAddress"), ("CISCO-IEEE8021-CFM-EXT-MIB", "ciceCfmLtmMulticastAddress"), ("CISCO-IEEE8021-CFM-EXT-MIB", "ciceCfmEnableFaultAlarm"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciceCfmGlobalObjectsGroup = ciceCfmGlobalObjectsGroup.setStatus('current')
if mibBuilder.loadTexts: ciceCfmGlobalObjectsGroup.setDescription('This is a collection of objects which provided the global information of the CFM feature not covered in IEEE8021-CFM-MIB.')
ciceCfmLtrConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 679, 2, 2, 2)).setObjects(("CISCO-IEEE8021-CFM-EXT-MIB", "ciceCfmLtrEnable"), ("CISCO-IEEE8021-CFM-EXT-MIB", "ciceCfmLtrHoldTime"), ("CISCO-IEEE8021-CFM-EXT-MIB", "ciceCfmLtrSize"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciceCfmLtrConfigGroup = ciceCfmLtrConfigGroup.setStatus('current')
if mibBuilder.loadTexts: ciceCfmLtrConfigGroup.setDescription('This is a collection of objects which provided the configuration to cache CFM LTRs.')
ciceCfmMaNetGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 679, 2, 2, 3)).setObjects(("CISCO-IEEE8021-CFM-EXT-MIB", "ciceCfmMaNetCciEnable"), ("CISCO-IEEE8021-CFM-EXT-MIB", "ciceCfmMaNetCciDirection"), ("CISCO-IEEE8021-CFM-EXT-MIB", "ciceCfmMaNetLossThreshold"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciceCfmMaNetGroup = ciceCfmMaNetGroup.setStatus('current')
if mibBuilder.loadTexts: ciceCfmMaNetGroup.setDescription('This is a collection of objects which provided the extra MA configuration cross all bridges in a Maintenance Domain (MD), and across all components of a single bridge.')
ciceCfmInterfaceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 679, 2, 2, 4)).setObjects(("CISCO-IEEE8021-CFM-EXT-MIB", "ciceCfmIfState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciceCfmInterfaceGroup = ciceCfmInterfaceGroup.setStatus('current')
if mibBuilder.loadTexts: ciceCfmInterfaceGroup.setDescription('This is a collection of objects which provides the CFM configuration on the interfaces.')
ciceCfmMipGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 679, 2, 2, 5)).setObjects(("CISCO-IEEE8021-CFM-EXT-MIB", "ciceCfmMipMdLevel"), ("CISCO-IEEE8021-CFM-EXT-MIB", "ciceCfmMipStorageType"), ("CISCO-IEEE8021-CFM-EXT-MIB", "ciceCfmMipRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciceCfmMipGroup = ciceCfmMipGroup.setStatus('current')
if mibBuilder.loadTexts: ciceCfmMipGroup.setDescription('This is a collection of objects which provides the MIP configuration on the local device.')
ciceCfmMacEnableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 679, 2, 2, 6)).setObjects(("CISCO-IEEE8021-CFM-EXT-MIB", "ciceCfmMacEnableStorageType"), ("CISCO-IEEE8021-CFM-EXT-MIB", "ciceCfmMacEnableRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciceCfmMacEnableGroup = ciceCfmMacEnableGroup.setStatus('current')
if mibBuilder.loadTexts: ciceCfmMacEnableGroup.setDescription('This is a collection of objects which provides the MAC enable enable configuration of the interfaces on the local device.')
mibBuilder.exportSymbols("CISCO-IEEE8021-CFM-EXT-MIB", ciceCfmInterfaceGroup=ciceCfmInterfaceGroup, ciceCfmMacEnableVlanIndex=ciceCfmMacEnableVlanIndex, cIeeeCfmExtMIBNotifs=cIeeeCfmExtMIBNotifs, ciceCfmLtrConfigGroup=ciceCfmLtrConfigGroup, ciceCfmEnable=ciceCfmEnable, ciceCfmMIBCompliance=ciceCfmMIBCompliance, ciceCfmEnableFaultAlarm=ciceCfmEnableFaultAlarm, ciceCfmMaNetEntry=ciceCfmMaNetEntry, cIeeeCfmExtMIBObjects=cIeeeCfmExtMIBObjects, ciceCfmMipEntry=ciceCfmMipEntry, ciceCfmBrainAddress=ciceCfmBrainAddress, ciceCfmMaNetCciEnable=ciceCfmMaNetCciEnable, ciceCfmInterfaceTable=ciceCfmInterfaceTable, ciceCfmMipStorageType=ciceCfmMipStorageType, ciceCfmInterfaceEntry=ciceCfmInterfaceEntry, ciceCfmIfIndex=ciceCfmIfIndex, ciceCfmLtr=ciceCfmLtr, ciceCfmMacEnableRowStatus=ciceCfmMacEnableRowStatus, ciceCfmMipVlanIndex=ciceCfmMipVlanIndex, ciceCfmMIBGroups=ciceCfmMIBGroups, ciceCfmMacEnableGroup=ciceCfmMacEnableGroup, ciceCfmGlobalObjectsGroup=ciceCfmGlobalObjectsGroup, ciceCfmLtmMulticastAddress=ciceCfmLtmMulticastAddress, ciceCfmMaNetTable=ciceCfmMaNetTable, ciceCfmMaNetGroup=ciceCfmMaNetGroup, ciceCfmMaNetCciDirection=ciceCfmMaNetCciDirection, ciceCfmMep=ciceCfmMep, ciceCfmIfObjects=ciceCfmIfObjects, ciceCfmMa=ciceCfmMa, ciscoIeee8021CfmExtMIB=ciscoIeee8021CfmExtMIB, ciceCfmIfState=ciceCfmIfState, ciceCfmMipGroup=ciceCfmMipGroup, ciceCfmMacEnableIfEntry=ciceCfmMacEnableIfEntry, cIeeeCfmExtMIBConformance=cIeeeCfmExtMIBConformance, ciceCfmMacEnableStorageType=ciceCfmMacEnableStorageType, ciceCfmMipTable=ciceCfmMipTable, ciceCfmCcMulticastAddress=ciceCfmCcMulticastAddress, ciceCfmMIBCompliances=ciceCfmMIBCompliances, ciceCfmMacEnableIfTable=ciceCfmMacEnableIfTable, ciceCfmLtrSize=ciceCfmLtrSize, ciceCfmMipMdLevel=ciceCfmMipMdLevel, ciceCfmLtrEnable=ciceCfmLtrEnable, ciceCfmMipRowStatus=ciceCfmMipRowStatus, ciceCfmLtrHoldTime=ciceCfmLtrHoldTime, ciceCfmGlobal=ciceCfmGlobal, ciceCfmMaxMdLevel=ciceCfmMaxMdLevel, ciceCfmMaNetLossThreshold=ciceCfmMaNetLossThreshold, PYSNMP_MODULE_ID=ciscoIeee8021CfmExtMIB)
