#
# PySNMP MIB module CXLLCInterfaceModule-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CXLLCInterfaceModule-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:33:00 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint")
Alias, cxLlcim = mibBuilder.importSymbols("CXProduct-SMI", "Alias", "cxLlcim")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
NotificationType, IpAddress, TimeTicks, iso, Unsigned32, ModuleIdentity, ObjectIdentity, Counter64, Integer32, Bits, Gauge32, MibIdentifier, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "IpAddress", "TimeTicks", "iso", "Unsigned32", "ModuleIdentity", "ObjectIdentity", "Counter64", "Integer32", "Bits", "Gauge32", "MibIdentifier", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
llcimConnectInterval = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 34, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 900)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llcimConnectInterval.setStatus('mandatory')
if mibBuilder.loadTexts: llcimConnectInterval.setDescription('Determines the amount of time between LLC-2 XID or TEST retries. Range of Values: 10 - 900 seconds Default Value: 30 seconds Configuration Changed: administrative')
llcimSapTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 34, 10), )
if mibBuilder.loadTexts: llcimSapTable.setStatus('mandatory')
if mibBuilder.loadTexts: llcimSapTable.setDescription('A table containing configuration information about each LLC-2 Interface Module service access point.')
llcimSapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 34, 10, 1), ).setIndexNames((0, "CXLLCInterfaceModule-MIB", "llcimSapNumber"))
if mibBuilder.loadTexts: llcimSapEntry.setStatus('mandatory')
if mibBuilder.loadTexts: llcimSapEntry.setDescription('Defines a row in the llcimSapTable. Each row contains the objects which define an LLC-2 service access point.')
llcimSapNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 34, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcimSapNumber.setStatus('mandatory')
if mibBuilder.loadTexts: llcimSapNumber.setDescription("Identifies this SAP (service access point) with a numerical value. Values for each SAP must be unique. A value of '0' is automatically allocated to the first LLCIM upper SAP. This upper SAP row always exists and cannot be deleted.")
llcimSapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 34, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llcimSapRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: llcimSapRowStatus.setDescription('Determines the status of the objects in a table row. Options: invalid (1): Row is flagged, after next reset the values will be disabled and the row is deleted from the table valid (2): Values are enabled Default Value: none Configuration Changed: administrative')
llcimSapAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 34, 10, 1, 3), Alias()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llcimSapAlias.setStatus('mandatory')
if mibBuilder.loadTexts: llcimSapAlias.setDescription('Identifies this service access point by a textual name. Names must be unique across all service access points at all layers. Range of Values: 1 -16 alphanumeric characters (first character must be a letter) Default Value: none Configuration Changed: administrative')
llcimSapCompanionAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 34, 10, 1, 4), Alias()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llcimSapCompanionAlias.setStatus('mandatory')
if mibBuilder.loadTexts: llcimSapCompanionAlias.setDescription("Determines the remote SAP this SAP communicates with. This object contains the textual name of the remote SAP. If this object is associated with a lower SAP, this object is set to the value of the corresponding LAPB/D MAC SAP Alias (lapbdMacSapAlias). The LAPB/D SAP must have the following objects defined as follows: labpdMacSapLapType set to 'lapb' lapbdMacSapLapBProtocolFlavor set to 'v8022' Range of Values: 1 -16 alphanumeric characters (first character must be a letter) Default Value: none Configuration Changed: administrative")
llcimSapType = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 34, 10, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("lower", 1), ("upper", 2))).clone('lower')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llcimSapType.setStatus('mandatory')
if mibBuilder.loadTexts: llcimSapType.setDescription('Determines if this SAP (service access point) is an upper or lower SAP. Options: lower (1): This is a lower SAP, used to communicate with a LAPB/D MAC SAP. upper (2): This is an upper SAP, used to communicate with an upper layer service. Default Value: lower (1) Configuration Changed: administrative')
llcimSapConnectMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 34, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("generateXid", 1), ("waitForXid", 2), ("immediate", 3))).clone('generateXid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llcimSapConnectMethod.setStatus('mandatory')
if mibBuilder.loadTexts: llcimSapConnectMethod.setDescription('Determines if the NULL XID exchange used to establish an LLC link is initiated by this station or by the remote station. Options: generateXid (1): This station initiates the NULL XID exchange. waitForXid (2): This station waits for the other side to initiate the NULL XID exchange. Default Value: generateXid (1) Configuration Changed: administrative and operative')
llcimSapState = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 34, 10, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("offLine", 1), ("unbound", 2), ("notConnected", 3), ("testExchange", 4), ("xidIssued", 5), ("waitXid", 6), ("connected", 7), ("setMode", 8), ("waitSetMode", 9), ("setModeReceived", 10), ("data", 11), ("inLinkDisconnect", 12), ("outLinkDisconnect", 13), ("outLineDisconnect", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcimSapState.setStatus('mandatory')
if mibBuilder.loadTexts: llcimSapState.setDescription('Indicates the state of this service access point. Options: offLine (1): Indicates that the SAP is not configured. unbound (2): Indicates that this SAP is not bound to its companion SAP. notConnected (3): Indicates that the link is idle. testExchange (4): Indicates that the TEST exchange is ongoing. xidIssued (5): Indicates that this SAP has sent a NULL XID. waitXid (6): Indicates that this SAP is waiting for the remote to send a NULL XID. connected (7): Indicates that the link is established (TEST and XID exchanges has been successfully completed). setMode (8): Indicates that this SAP has sent a Set Mode command to the remote. waitSetMode (9): Indicates that this SAP is waiting for a Set Mode command from the remote. setModeReceived (10): Indicates that this SAP has received a Set Mode command from the remote. data (11): Indicates that data exchange mode has been reached. inLinkDisconnect (12): Indicates that the link has been disconnected (a DISC was received from the remote). outLinkDisconnect (13): Indicates that the link has been disconnected (a DISC was sent to the remote). outLineDisconnect (14) Indicates that the connection to the remote is being terminated.')
mibBuilder.exportSymbols("CXLLCInterfaceModule-MIB", llcimSapAlias=llcimSapAlias, llcimConnectInterval=llcimConnectInterval, llcimSapType=llcimSapType, llcimSapState=llcimSapState, llcimSapEntry=llcimSapEntry, llcimSapCompanionAlias=llcimSapCompanionAlias, llcimSapNumber=llcimSapNumber, llcimSapConnectMethod=llcimSapConnectMethod, llcimSapRowStatus=llcimSapRowStatus, llcimSapTable=llcimSapTable)
