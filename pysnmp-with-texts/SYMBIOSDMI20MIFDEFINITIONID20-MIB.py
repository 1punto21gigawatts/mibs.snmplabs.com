#
# PySNMP MIB module SYMBIOSDMI20MIFDEFINITIONID20-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SYMBIOSDMI20MIFDEFINITIONID20-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:13:53 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, NotificationType, Counter64, NotificationType, MibIdentifier, iso, Bits, ObjectIdentity, Gauge32, TimeTicks, IpAddress, Counter32, enterprises, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "NotificationType", "Counter64", "NotificationType", "MibIdentifier", "iso", "Bits", "ObjectIdentity", "Gauge32", "TimeTicks", "IpAddress", "Counter32", "enterprises", "ModuleIdentity")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class DmiCounter(Counter32):
    pass

class DmiInteger(Integer32):
    pass

class DmiInteger64(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(-18446744073709551615, 18446744073709551615)

class DmiDisplaystring(DisplayString):
    pass

class DmiDateX(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(28, 28)
    fixedLength = 28

class DmiComponentIndex(Integer32):
    pass

symbios = MibIdentifier((1, 3, 6, 1, 4, 1, 1123))
cosprings = MibIdentifier((1, 3, 6, 1, 4, 1, 1123, 3))
scsi = MibIdentifier((1, 3, 6, 1, 4, 1, 1123, 3, 1))
fam8xx = MibIdentifier((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2))
id20 = MibIdentifier((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20))
dmtfGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1))
tComponentid = MibTable((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 1), )
if mibBuilder.loadTexts: tComponentid.setStatus('mandatory')
if mibBuilder.loadTexts: tComponentid.setDescription('This group defines the attributes common to all components. This group is required.')
eComponentid = MibTableRow((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 1, 1), ).setIndexNames((0, "SYMBIOSDMI20MIFDEFINITIONID20-MIB", "DmiComponentIndex"))
if mibBuilder.loadTexts: eComponentid.setStatus('mandatory')
if mibBuilder.loadTexts: eComponentid.setDescription('')
a1Manufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 1, 1, 1), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1Manufacturer.setStatus('mandatory')
if mibBuilder.loadTexts: a1Manufacturer.setDescription('Manufacturer of this component.')
a1Product = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 1, 1, 2), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1Product.setStatus('mandatory')
if mibBuilder.loadTexts: a1Product.setDescription('Product name for this component.')
a1Version = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 1, 1, 3), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1Version.setStatus('mandatory')
if mibBuilder.loadTexts: a1Version.setDescription('Version number of this component.')
a1SerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 1, 1, 4), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1SerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: a1SerialNumber.setDescription('Serial number for this component')
a1Installation = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 1, 1, 5), DmiDateX()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1Installation.setStatus('mandatory')
if mibBuilder.loadTexts: a1Installation.setDescription('The installation date and time of this component. The Service Layer assigns this value, the manufacturer should leave it blank.')
a1Verify = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("vAnErrorOccurredCheckStatusCode", 0), ("vThisComponentDoesNotExist", 1), ("vTheVerifyIsNotSupported", 2), ("vReserved", 3), ("vThisComponentExistsButTheFunctionalityI", 4), ("vThisComponentExistsButTheFunctionality1", 5), ("vThisComponentExistsAndIsNotFunctioningC", 6), ("vThisComponentExistsAndIsFunctioningCorr", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1Verify.setStatus('mandatory')
if mibBuilder.loadTexts: a1Verify.setDescription('A code that provides a level of verification that the component is still installed and working.')
tSubcomponentSoftware = MibTable((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 2), )
if mibBuilder.loadTexts: tSubcomponentSoftware.setStatus('mandatory')
if mibBuilder.loadTexts: tSubcomponentSoftware.setDescription('This group describes the software resources that are used by a component or subcomponent.')
eSubcomponentSoftware = MibTableRow((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 2, 1), ).setIndexNames((0, "SYMBIOSDMI20MIFDEFINITIONID20-MIB", "DmiComponentIndex"), (0, "SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a2SoftwareIndex"))
if mibBuilder.loadTexts: eSubcomponentSoftware.setStatus('mandatory')
if mibBuilder.loadTexts: eSubcomponentSoftware.setDescription('')
a2SoftwareIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 2, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2SoftwareIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a2SoftwareIndex.setDescription('An index into the SubComponent Software table')
a2Type = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 2, 1, 2), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2Type.setStatus('mandatory')
if mibBuilder.loadTexts: a2Type.setDescription("The type of software resource described by this row. For example this value would be 'Device Driver', 'INF File', 'Boot ROM', and etc.")
a2Vendor = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 2, 1, 3), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2Vendor.setStatus('mandatory')
if mibBuilder.loadTexts: a2Vendor.setDescription('The name of the vendor who supplied this piece of software.')
a2Version = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 2, 1, 4), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2Version.setStatus('mandatory')
if mibBuilder.loadTexts: a2Version.setDescription('The revision level of this piece of software. For example the Version Major, Version Minor, Revision, and Build numbers.')
a2Description = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 2, 1, 5), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2Description.setStatus('mandatory')
if mibBuilder.loadTexts: a2Description.setDescription('An additional description of this piece of software')
a2IdentificationCode = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 2, 1, 6), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2IdentificationCode.setStatus('mandatory')
if mibBuilder.loadTexts: a2IdentificationCode.setDescription('The Stock Keeping Unit (SKU) or Part Number for this piece of software.')
a2LanguageEdition = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 2, 1, 7), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2LanguageEdition.setStatus('mandatory')
if mibBuilder.loadTexts: a2LanguageEdition.setDescription('Identifies the language edition of this piece of software.')
a2InterfaceDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 2, 1, 8), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2InterfaceDescription.setStatus('mandatory')
if mibBuilder.loadTexts: a2InterfaceDescription.setDescription("This is the specification or operating system to which this piece of software conforms. (e.g. 'Microsoft NT', 'NetWare', etc.)")
a2InterfaceVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 2, 1, 9), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2InterfaceVersion.setStatus('mandatory')
if mibBuilder.loadTexts: a2InterfaceVersion.setDescription("The specification or operating system version to which this piece of software conforms. (e.g. '4.0 or higher', '3.xx', etc.)")
tWorldwideIdentifer = MibTable((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 3), )
if mibBuilder.loadTexts: tWorldwideIdentifer.setStatus('mandatory')
if mibBuilder.loadTexts: tWorldwideIdentifer.setDescription('The Worldwide Identifer')
eWorldwideIdentifer = MibTableRow((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 3, 1), ).setIndexNames((0, "SYMBIOSDMI20MIFDEFINITIONID20-MIB", "DmiComponentIndex"), (0, "SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a3WorldwideIdentifierIndex"))
if mibBuilder.loadTexts: eWorldwideIdentifer.setStatus('mandatory')
if mibBuilder.loadTexts: eWorldwideIdentifer.setDescription('')
a3WorldwideIdentifierIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 3, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3WorldwideIdentifierIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a3WorldwideIdentifierIndex.setDescription('An index into the Worldwide Identifier table.')
a3WorldwideIdentifierType = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vNone", 3), ("vVendorIdProductIdSerialNumber", 4), ("vIeeeExtendedUniqueIdentifier64-bit", 5), ("vFc-ph64-bitName-identifier", 6), ("vBinary", 7), ("vUnicode", 8), ("vLanMacAddress", 9), ("vWanAccessAddress", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3WorldwideIdentifierType.setStatus('mandatory')
if mibBuilder.loadTexts: a3WorldwideIdentifierType.setDescription('The type of identifier displayed by the Worldwide Identifier attribute.')
a3WorldwideIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 3, 1, 3), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3WorldwideIdentifier.setStatus('mandatory')
if mibBuilder.loadTexts: a3WorldwideIdentifier.setDescription('The Worldwide identifier for this device.')
tFieldReplaceableUnit = MibTable((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 4), )
if mibBuilder.loadTexts: tFieldReplaceableUnit.setStatus('mandatory')
if mibBuilder.loadTexts: tFieldReplaceableUnit.setDescription('A Field Replaceable Unit (FRU), is defined as a hardware component which is designed to be separately removable for replacement or repair. For the purposes of this definition, a motherboard and a fixed hard disk are FRUs, whereas a fixed hard disk platter or a chip fixed in place on the motherboard are not FRUs since they are not designed to be separately removable. Each instance within the FRU table should contain the device group and instance data for the associated hardware component.')
eFieldReplaceableUnit = MibTableRow((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 4, 1), ).setIndexNames((0, "SYMBIOSDMI20MIFDEFINITIONID20-MIB", "DmiComponentIndex"), (0, "SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a4FruIndex"))
if mibBuilder.loadTexts: eFieldReplaceableUnit.setStatus('mandatory')
if mibBuilder.loadTexts: eFieldReplaceableUnit.setDescription('')
a4FruIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 4, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4FruIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a4FruIndex.setDescription('The index into the Field Replaceable Unit table.')
a4DeviceGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 4, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4DeviceGroupIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a4DeviceGroupIndex.setDescription('The group ID of the group referencing this Field Replaceable Unit instance.')
a4Description = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 4, 1, 3), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4Description.setStatus('mandatory')
if mibBuilder.loadTexts: a4Description.setDescription('A clear description of this Field Replaceable Unit.')
a4Manufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 4, 1, 4), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4Manufacturer.setStatus('mandatory')
if mibBuilder.loadTexts: a4Manufacturer.setDescription('The name of the company manufacturing or providing this Field Replaceable Unit.')
a4Model = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 4, 1, 5), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4Model.setStatus('mandatory')
if mibBuilder.loadTexts: a4Model.setDescription("The manufacturer's model number for this Field Replaceable Unit.")
a4PartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 4, 1, 6), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4PartNumber.setStatus('mandatory')
if mibBuilder.loadTexts: a4PartNumber.setDescription('A part number by which a replacement part can be ordered for this Field Replaceable Unit.')
a4FruSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 4, 1, 7), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4FruSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: a4FruSerialNumber.setDescription("The manufacturer's serial number for this Field Replaceable Unit.")
a4RevisionLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 4, 1, 8), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4RevisionLevel.setStatus('mandatory')
if mibBuilder.loadTexts: a4RevisionLevel.setDescription('The revision level of this Field Replaceable Unit.')
a4WarrantyStartDate = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 4, 1, 9), DmiDateX()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4WarrantyStartDate.setStatus('mandatory')
if mibBuilder.loadTexts: a4WarrantyStartDate.setDescription('The start date of the service warranty for this Field Replaceabl Unit.')
a4WarrantyDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 4, 1, 10), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4WarrantyDuration.setStatus('mandatory')
if mibBuilder.loadTexts: a4WarrantyDuration.setDescription('The total duration of this Field Replaceable Unit warranty in months.')
a4SupportPhoneNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 4, 1, 11), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4SupportPhoneNumber.setStatus('mandatory')
if mibBuilder.loadTexts: a4SupportPhoneNumber.setDescription('The phone number(s) for support for this Field Replaceable Unit.')
a4FruInternetUniformResourceLocator = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 4, 1, 12), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4FruInternetUniformResourceLocator.setStatus('mandatory')
if mibBuilder.loadTexts: a4FruInternetUniformResourceLocator.setDescription('The Internet Uniform Resource Locator string that can be used through a World Wide Web browser to obtain further information about this FRU')
tStorageDevices = MibTable((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 5), )
if mibBuilder.loadTexts: tStorageDevices.setStatus('mandatory')
if mibBuilder.loadTexts: tStorageDevices.setDescription('This group defines the mass storage devices in this system.')
eStorageDevices = MibTableRow((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 5, 1), ).setIndexNames((0, "SYMBIOSDMI20MIFDEFINITIONID20-MIB", "DmiComponentIndex"), (0, "SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a5StorageDeviceIndex"))
if mibBuilder.loadTexts: eStorageDevices.setStatus('mandatory')
if mibBuilder.loadTexts: eStorageDevices.setDescription('')
a5StorageDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 5, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a5StorageDeviceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a5StorageDeviceIndex.setDescription('An index into the storage device table.')
a5Type = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vRigidDiskDrive", 3), ("vFlexibleDisketteDrive", 4), ("vOpticalWrite-onceread-manyWormDrive", 6), ("vMagneto-opticalDrive", 7), ("vCompactDiskDrive", 8), ("vFlashDisk", 9), ("vCartridgeRigidDiskDrive", 10), ("vOpticalFloppyDiskDrive", 11), ("vTapeDrive", 12), ("vMediaChanger", 13), ("vSolidState", 14), ("vDigitalVersatileDiskDvdDrive", 15), ("vDigitalVersatileDiskDvdramRamDrive", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a5Type.setStatus('mandatory')
if mibBuilder.loadTexts: a5Type.setDescription("The type of this mass storage device. If 'Other' is used, then the Type Description attribute shall be used.")
a5TypeDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 5, 1, 3), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a5TypeDescription.setStatus('mandatory')
if mibBuilder.loadTexts: a5TypeDescription.setDescription("A longer description of the storage device. For example: 3.5 inch flexible diskette drive using diskettes with a maximum capacity of 1.44MB. If 'Other' was specified above, then this field shall be used. Otherwise, the contents of this optional field shall not contradict the Storage Device Type specified above.")
a5Sub_identifier = MibScalar((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 5, 1, 4), DmiDisplaystring()).setLabel("a5Sub-identifier").setMaxAccess("readonly")
if mibBuilder.loadTexts: a5Sub_identifier.setStatus('mandatory')
if mibBuilder.loadTexts: a5Sub_identifier.setDescription("The sub-identifier for this storage device (e.g., the device's SCSI logical unit number).")
a5MediaDataBlockSize = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 5, 1, 5), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a5MediaDataBlockSize.setStatus('mandatory')
if mibBuilder.loadTexts: a5MediaDataBlockSize.setDescription('The size in bytes of the data blocks used on the storage media. If the media block size is unknown or not consistent across the media, then this value shall be zero.')
a5FormattedMediaCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 5, 1, 6), DmiInteger64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a5FormattedMediaCapacity.setStatus('mandatory')
if mibBuilder.loadTexts: a5FormattedMediaCapacity.setDescription('The total size in bytes of this storage media after it has been formatted.')
a5RemovableDevice = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1), ("vUnknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a5RemovableDevice.setStatus('mandatory')
if mibBuilder.loadTexts: a5RemovableDevice.setDescription('If true, then this storage device is removable (e.g.: PCMCIA device).')
a5DeviceLoaded = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 5, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1), ("vUnknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a5DeviceLoaded.setStatus('mandatory')
if mibBuilder.loadTexts: a5DeviceLoaded.setDescription("If true, then the storage device is loaded. If the device is not removable, then this value shall be 'TRUE'.")
a5RemovableMedia = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 5, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1), ("vUnknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a5RemovableMedia.setStatus('mandatory')
if mibBuilder.loadTexts: a5RemovableMedia.setDescription('If true, then the media in this storage device is removable.')
a5MediaLoaded = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 5, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1), ("vUnknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a5MediaLoaded.setStatus('mandatory')
if mibBuilder.loadTexts: a5MediaLoaded.setDescription("If true, the media in this storage device is loaded. If the media is not removable, then this value shall be 'TRUE' ")
a5Compression = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 5, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1), ("vUnknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a5Compression.setStatus('mandatory')
if mibBuilder.loadTexts: a5Compression.setDescription('If true, the storage device supports compression.')
a5Encryption = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 5, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1), ("vUnknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a5Encryption.setStatus('mandatory')
if mibBuilder.loadTexts: a5Encryption.setDescription('If true, the storage device supports encryption.')
tStorageDevicesEvents = MibTable((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 6), )
if mibBuilder.loadTexts: tStorageDevicesEvents.setStatus('mandatory')
if mibBuilder.loadTexts: tStorageDevicesEvents.setDescription('Storage Devices events.')
eStorageDevicesEvents = MibTableRow((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 6, 1), ).setIndexNames((0, "SYMBIOSDMI20MIFDEFINITIONID20-MIB", "DmiComponentIndex"), (0, "SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a6AssociatedGroup"))
if mibBuilder.loadTexts: eStorageDevicesEvents.setStatus('mandatory')
if mibBuilder.loadTexts: eStorageDevicesEvents.setDescription('')
a6StorageDevicesEventType = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("vRebuildInProgress", 1), ("vStorageDeviceReadying", 2), ("vStorageDeviceError", 3), ("vSelf-monitoringWarning", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a6StorageDevicesEventType.setStatus('mandatory')
if mibBuilder.loadTexts: a6StorageDevicesEventType.setDescription('The type of Storage Devices event that has occurred.')
a6EventSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32))).clone(namedValues=NamedValues(("vMonitor", 1), ("vInformation", 2), ("vOk", 4), ("vNon-critical", 8), ("vCritical", 16), ("vNon-recoverable", 32)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a6EventSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: a6EventSeverity.setDescription('The severity of this event.')
a6EventIsStateBased = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a6EventIsStateBased.setStatus('mandatory')
if mibBuilder.loadTexts: a6EventIsStateBased.setDescription('The value of this attribute determined whether the Event being reported is a state-based Event or not. If the value of this attribute is TRUE then the Event is state-based. Else the Event is not state-based')
a6EventStateKey = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 6, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a6EventStateKey.setStatus('mandatory')
if mibBuilder.loadTexts: a6EventStateKey.setDescription('This attribute holds the key identifying a row of the Event State group within the Component in which the event generator group is located. The Current State attribute within the row contains the current state of this state-based event. The current state can be one of the four severities: OK, Non-Critical, Critical, and Non-Recoverable.')
a6AssociatedGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 6, 1, 5), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a6AssociatedGroup.setStatus('mandatory')
if mibBuilder.loadTexts: a6AssociatedGroup.setDescription('The')
a6EventSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a6EventSystem.setStatus('mandatory')
if mibBuilder.loadTexts: a6EventSystem.setDescription('The major functional aspect of the product causing the fault.')
a6EventSubsystem = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a6EventSubsystem.setStatus('mandatory')
if mibBuilder.loadTexts: a6EventSubsystem.setDescription('The minor functional aspect of the product causing the fault.')
a6EventSolution = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 6, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("v1stCheckCabling2ndPowerCycleDeviceLas", 3), ("vBackupDataFromFailingDeviceAndReplaceTh", 4), ("vRunDiskAdministrator", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a6EventSolution.setStatus('mandatory')
if mibBuilder.loadTexts: a6EventSolution.setDescription('A solution to the problem that caused the event.')
a6InstanceDataPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 6, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a6InstanceDataPresent.setStatus('mandatory')
if mibBuilder.loadTexts: a6InstanceDataPresent.setDescription('Indicates whether the second event block contains instance-speci ic data.')
a6EventMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 6, 1, 10), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a6EventMessage.setStatus('mandatory')
if mibBuilder.loadTexts: a6EventMessage.setDescription('Auxiliary information related to the event.')
tStorageController = MibTable((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 7), )
if mibBuilder.loadTexts: tStorageController.setStatus('mandatory')
if mibBuilder.loadTexts: tStorageController.setDescription('This group defines the storage controller in this system.')
eStorageController = MibTableRow((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 7, 1), ).setIndexNames((0, "SYMBIOSDMI20MIFDEFINITIONID20-MIB", "DmiComponentIndex"), (0, "SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a7ControllerIndex"))
if mibBuilder.loadTexts: eStorageController.setStatus('mandatory')
if mibBuilder.loadTexts: eStorageController.setDescription('')
a7ControllerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 7, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7ControllerIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a7ControllerIndex.setDescription('An index into the Storage Controller table.')
a7Identification = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 7, 1, 2), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7Identification.setStatus('mandatory')
if mibBuilder.loadTexts: a7Identification.setDescription('e.g. Name, brand and hardware revision level of the storage controller.')
a7ProtectionManagement = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vUnprotected", 3), ("vProtected", 4), ("vProtectedThroughScsi-3ControllerCommand", 5), ("vProtectedThroughScsi-3ControllerComman1", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7ProtectionManagement.setStatus('mandatory')
if mibBuilder.loadTexts: a7ProtectionManagement.setDescription('Indicates whether or not the controller provides redundancy or protection against device failures.')
a7BusMaster = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1), ("vUnknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7BusMaster.setStatus('mandatory')
if mibBuilder.loadTexts: a7BusMaster.setDescription('If true, then this storage controller is the bus master.')
a7SecondsSinceLastPower_up = MibScalar((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 7, 1, 5), DmiInteger()).setLabel("a7SecondsSinceLastPower-up").setMaxAccess("readonly")
if mibBuilder.loadTexts: a7SecondsSinceLastPower_up.setStatus('mandatory')
if mibBuilder.loadTexts: a7SecondsSinceLastPower_up.setDescription('The number of seconds that have passed since this controller was last powered on.')
tStorageControllerEvents = MibTable((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 8), )
if mibBuilder.loadTexts: tStorageControllerEvents.setStatus('mandatory')
if mibBuilder.loadTexts: tStorageControllerEvents.setDescription('Storage Controller events.')
eStorageControllerEvents = MibTableRow((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 8, 1), ).setIndexNames((0, "SYMBIOSDMI20MIFDEFINITIONID20-MIB", "DmiComponentIndex"), (0, "SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a8AssociatedGroup"))
if mibBuilder.loadTexts: eStorageControllerEvents.setStatus('mandatory')
if mibBuilder.loadTexts: eStorageControllerEvents.setDescription('')
a8StorageControllerEventType = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vStorageControllerError", 1), ("vSelf-monitoringWarning1", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a8StorageControllerEventType.setStatus('mandatory')
if mibBuilder.loadTexts: a8StorageControllerEventType.setDescription('The type of Storage Controller event that has occurred.')
a8EventSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32))).clone(namedValues=NamedValues(("vMonitor", 1), ("vInformation", 2), ("vOk", 4), ("vNon-critical", 8), ("vCritical", 16), ("vNon-recoverable", 32)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a8EventSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: a8EventSeverity.setDescription('The severity of this event.')
a8EventIsStateBased = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a8EventIsStateBased.setStatus('mandatory')
if mibBuilder.loadTexts: a8EventIsStateBased.setDescription('The value of this attribute determined whether the Event being reported is a state-based Event or not. If the value of this attribute is TRUE then the Event is state-based. Else the Event is not state-based')
a8EventStateKey = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 8, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a8EventStateKey.setStatus('mandatory')
if mibBuilder.loadTexts: a8EventStateKey.setDescription('This attribute holds the key identifying a row of the Event State group within the Component in which the event generator group is located. The Current State attribute within the row contains the current state of this state-based event. The current state can be one of the four severities: OK, Non-Critical, Critical, and Non-Recoverable.')
a8AssociatedGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 8, 1, 5), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a8AssociatedGroup.setStatus('mandatory')
if mibBuilder.loadTexts: a8AssociatedGroup.setDescription('The')
a8EventSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 8, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a8EventSystem.setStatus('mandatory')
if mibBuilder.loadTexts: a8EventSystem.setDescription('The major functional aspect of the product causing the fault.')
a8EventSubsystem = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 8, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a8EventSubsystem.setStatus('mandatory')
if mibBuilder.loadTexts: a8EventSubsystem.setDescription('The minor functional aspect of the product causing the fault.')
a8EventSolution = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 8, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("v1stCheckCabling2ndPowerCycleSystemLas", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a8EventSolution.setStatus('mandatory')
if mibBuilder.loadTexts: a8EventSolution.setDescription('A solution to the problem that caused the event.')
a8InstanceDataPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 8, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a8InstanceDataPresent.setStatus('mandatory')
if mibBuilder.loadTexts: a8InstanceDataPresent.setDescription('Indicates whether the second event block contains instance-speci ic data.')
a8EventMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 8, 1, 10), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a8EventMessage.setStatus('mandatory')
if mibBuilder.loadTexts: a8EventMessage.setDescription('Auxiliary information related to the event.')
tBusPort = MibTable((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 9), )
if mibBuilder.loadTexts: tBusPort.setStatus('mandatory')
if mibBuilder.loadTexts: tBusPort.setDescription('This global table has one entry for each of the Bus Ports in this Component.')
eBusPort = MibTableRow((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 9, 1), ).setIndexNames((0, "SYMBIOSDMI20MIFDEFINITIONID20-MIB", "DmiComponentIndex"), (0, "SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a9BusPortIndex"))
if mibBuilder.loadTexts: eBusPort.setStatus('mandatory')
if mibBuilder.loadTexts: eBusPort.setDescription('')
a9BusPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 9, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9BusPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a9BusPortIndex.setDescription('An index into the Bus Port table.')
a9Protocol = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 9, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vEisa", 3), ("vIsa", 4), ("vPci", 5), ("vAtaatapi", 6), ("vFlexibleDiskette", 7), ("v1496", 8), ("vScsiParallelInterface", 9), ("vScsiFibreChannelProtocol", 10), ("vScsiSerialBusProtocol", 11), ("vScsiSerialBusProtocol-21394", 12), ("vScsiSerialStorageArchitecture", 13), ("vVesa", 14), ("vPcmcia", 15), ("vUniversalSerialBus", 16), ("vParallelPort", 17), ("vEscon", 18), ("vDiagnostic", 19), ("vI2c", 20), ("vPower", 21), ("vHippi", 22), ("vMultibus", 23), ("vVme", 24), ("vIpi", 25), ("vIeee-488", 26), ("vRs232", 27), ("vIeee802310base5", 28), ("vIeee802310base2", 29), ("vIeee80231base5", 30), ("vIeee802310broad36", 31), ("vIeee8023100basevg", 32), ("vIeee8025Token-ring", 33), ("vAnsiX3t95Fddi", 34), ("vMca", 35)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9Protocol.setStatus('mandatory')
if mibBuilder.loadTexts: a9Protocol.setDescription("The protocol describing the electrical characteristic of the Bus Port. If 'Other' is used, then the Protocol Description attribute shall be used.")
a9ProtocolDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 9, 1, 3), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9ProtocolDescription.setStatus('mandatory')
if mibBuilder.loadTexts: a9ProtocolDescription.setDescription("Additional description of the protocol described above. If 'Other' was specified above, then this field shall be used. Otherwise, the contents of this optional field shall not contradict the Protocol specified above.")
a9SignalCharacteristics = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 9, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vSingleEnded", 3), ("vDifferential", 4), ("vLowVoltageDifferential", 5), ("vOptical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9SignalCharacteristics.setStatus('mandatory')
if mibBuilder.loadTexts: a9SignalCharacteristics.setDescription('The signal characteristics of the Bus Port being described.')
a9AddressDescriptor = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 9, 1, 5), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9AddressDescriptor.setStatus('mandatory')
if mibBuilder.loadTexts: a9AddressDescriptor.setDescription('The address descriptor of this bus port. For example, the SCSI address of this port.')
a9Isochronous = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 9, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9Isochronous.setStatus('mandatory')
if mibBuilder.loadTexts: a9Isochronous.setDescription('Indicates whether or not this bus port supports isochronous transfers.')
a9MaximumWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 9, 1, 7), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9MaximumWidth.setStatus('mandatory')
if mibBuilder.loadTexts: a9MaximumWidth.setDescription("The maximum width, in bits, of this Bus Port's data path. A value of 1 should be used for serial.")
a9MaximumTransferRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 9, 1, 8), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9MaximumTransferRate.setStatus('mandatory')
if mibBuilder.loadTexts: a9MaximumTransferRate.setDescription('The theoretical maximum transfer rate, in millions of bytes per second, that this Bus Port is capable of achieving under ideal conditions. A value of zero should be used if the transfer rate is less than 1 million bytes per second. A value of 0x80000000 should be used if the transfer rate is unknown.')
a9MaximumNumberOfAttachments = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 9, 1, 9), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9MaximumNumberOfAttachments.setStatus('mandatory')
if mibBuilder.loadTexts: a9MaximumNumberOfAttachments.setDescription("The maximum number of directly addressable entities supported by this bus port's protocol. A value of zero should be used if the number of attachments is unknown.")
a9ConnectorType = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 9, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vNone", 3), ("vScsiAHigh-densityShielded50Pins", 4), ("vScsiAHigh-densityUnshielded50Pins", 5), ("vScsiALow-densityShielded50Pins", 6), ("vScsiALow-densityUnshielded50Pins", 7), ("vScsiPHigh-densityShielded68Pins", 8), ("vScsiPHigh-densityUnshielded68Pins", 9), ("vScsiSca-i80Pins", 10), ("vScsiSca-ii80Pins", 11), ("vScsiFibreChannelDb9Copper", 12), ("vScsiFibreChannelFibre", 13), ("vScsiFibreChannelSca-ii40Pins", 14), ("vScsiFibreChannelSca-ii20Pins", 15), ("vScsiFibreChannelBnc", 16), ("vAta3-12Inch40Pins", 17), ("vAta2-12Inch44Pins", 18), ("vSerial9Pin", 19), ("vSerial25Pin", 20), ("vRs23225Pin", 21), ("vRs422", 22), ("vIeee-488", 23), ("vAui", 24), ("vUptCategory3", 25), ("vUptCategory4", 26), ("vUptCategory5", 27), ("vBnc", 28), ("vStpRj11", 29), ("vStpRj45", 30), ("vStpDb9", 31), ("vFiberMic", 32), ("vAppleAui", 33), ("vPciSlot", 34), ("vIsaSlot", 35), ("vEisaSlot", 36), ("vVesaSlot", 37), ("vPcmciaSlot", 38), ("vPcCardSlot", 39), ("vFloppyDiskette5-14Inch", 40), ("vFloppyDiskette3-12Inch", 41), ("vHssdc6Pins", 42), ("vGbicSocket", 43), ("v13946Pins", 44), ("vScsiVhdciShielded68Pins", 45)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9ConnectorType.setStatus('mandatory')
if mibBuilder.loadTexts: a9ConnectorType.setDescription("Describes how options (cards, devices, etc.) physically connect to this bus port. If 'Other' is used, then the Connector Type Description attribute shall be used.")
a9ConnectorTypeDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 9, 1, 11), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9ConnectorTypeDescription.setStatus('mandatory')
if mibBuilder.loadTexts: a9ConnectorTypeDescription.setDescription("An additional text description of the type of connector describe above. If 'Other' was specified above, then this field shall be used. Otherwis , the contents of this optional field shall not contradict the connector specified above.")
a9ConnectorGender = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 9, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vFemale", 3), ("vMale", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9ConnectorGender.setStatus('mandatory')
if mibBuilder.loadTexts: a9ConnectorGender.setDescription('Indicates the gender of the connector described above.')
tFibreChannelBusPortExtensions = MibTable((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 10), )
if mibBuilder.loadTexts: tFibreChannelBusPortExtensions.setStatus('mandatory')
if mibBuilder.loadTexts: tFibreChannelBusPortExtensions.setDescription('This group extents the Bus Port group with Fibre Channel specific attributes.')
eFibreChannelBusPortExtensions = MibTableRow((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 10, 1), ).setIndexNames((0, "SYMBIOSDMI20MIFDEFINITIONID20-MIB", "DmiComponentIndex"), (0, "SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a10BusPortIndex"))
if mibBuilder.loadTexts: eFibreChannelBusPortExtensions.setStatus('mandatory')
if mibBuilder.loadTexts: eFibreChannelBusPortExtensions.setDescription('')
a10BusPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 10, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a10BusPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a10BusPortIndex.setDescription('The index into the Bus Port Table that this Fibre Channel group is extending.')
a10EndToEndCredit = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 10, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a10EndToEndCredit.setStatus('mandatory')
if mibBuilder.loadTexts: a10EndToEndCredit.setDescription('The number of allowable outstanding acknowledgments for a sequence.')
a10BufferToBufferCredit = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 10, 1, 3), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a10BufferToBufferCredit.setStatus('mandatory')
if mibBuilder.loadTexts: a10BufferToBufferCredit.setDescription('The number of frames which can be handled by the node before a wait for the buffer ready is required, and prior to subsequent frame transmiss ons.')
a10LinkType = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vCopper", 3), ("vFibre-SingleMode1300Nanometers", 4), ("vFibre-SingleMode1500Nanometers", 5), ("vFibre-Multimode50-Laser", 6), ("vFibre-Multimode50-Led", 7), ("vFibre-Multimode625-Laser", 8), ("vFibre-Multimode625-Led", 9), ("vFibreLongWave", 10), ("vFibreShortWave", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a10LinkType.setStatus('mandatory')
if mibBuilder.loadTexts: a10LinkType.setDescription('Reports whether copper or fibre media is used.')
a10FlowControlClassType = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 10, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vClass-1", 3), ("vClass-2", 4), ("vClass-3", 5), ("vClass-1class-2", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a10FlowControlClassType.setStatus('mandatory')
if mibBuilder.loadTexts: a10FlowControlClassType.setDescription('Identifies the Flow Control Class Type.')
a10FlowControlAcknowledgmentType = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vAck-0", 3), ("vAck-1", 4), ("vAck-n", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a10FlowControlAcknowledgmentType.setStatus('mandatory')
if mibBuilder.loadTexts: a10FlowControlAcknowledgmentType.setDescription('Identifies the Flow Control Acknowledgment Type.')
a10FabricTopology = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 10, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1), ("vUnknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a10FabricTopology.setStatus('mandatory')
if mibBuilder.loadTexts: a10FabricTopology.setDescription('If true, a fabric topology exists within the fibre channel bus port.')
tMassStorageAssociation = MibTable((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 11), )
if mibBuilder.loadTexts: tMassStorageAssociation.setStatus('mandatory')
if mibBuilder.loadTexts: tMassStorageAssociation.setDescription('Mass storage associations define the relationships between the various components of the Storage Subsystem.')
eMassStorageAssociation = MibTableRow((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 11, 1), ).setIndexNames((0, "SYMBIOSDMI20MIFDEFINITIONID20-MIB", "DmiComponentIndex"), (0, "SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a11AssociationIndex"))
if mibBuilder.loadTexts: eMassStorageAssociation.setStatus('mandatory')
if mibBuilder.loadTexts: eMassStorageAssociation.setDescription('')
a11AssociationIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 11, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a11AssociationIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a11AssociationIndex.setDescription('An index into the Association table.')
a11Type = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 11, 1, 2), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a11Type.setStatus('mandatory')
if mibBuilder.loadTexts: a11Type.setDescription('This field specifies the type of the association.')
a11Reference1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 11, 1, 3), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a11Reference1.setStatus('mandatory')
if mibBuilder.loadTexts: a11Reference1.setDescription('A reference to an object.')
a11Reference2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 11, 1, 4), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a11Reference2.setStatus('mandatory')
if mibBuilder.loadTexts: a11Reference2.setDescription('A reference to an object.')
tMassStorageAssociationEvents = MibTable((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 12), )
if mibBuilder.loadTexts: tMassStorageAssociationEvents.setStatus('mandatory')
if mibBuilder.loadTexts: tMassStorageAssociationEvents.setDescription('Mass Storage Association events.')
eMassStorageAssociationEvents = MibTableRow((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 12, 1), ).setIndexNames((0, "SYMBIOSDMI20MIFDEFINITIONID20-MIB", "DmiComponentIndex"), (0, "SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a12AssociatedGroup"))
if mibBuilder.loadTexts: eMassStorageAssociationEvents.setStatus('mandatory')
if mibBuilder.loadTexts: eMassStorageAssociationEvents.setDescription('')
a12MassStorageAssociationEventType = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("vNewObjectDetected", 1), ("vExistingObjectReplaced", 2), ("vExistingObjectGone", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a12MassStorageAssociationEventType.setStatus('mandatory')
if mibBuilder.loadTexts: a12MassStorageAssociationEventType.setDescription('The type of Mass storage association where a change has occurred ')
a12EventSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32))).clone(namedValues=NamedValues(("vMonitor", 1), ("vInformation", 2), ("vOk", 4), ("vNon-critical", 8), ("vCritical", 16), ("vNon-recoverable", 32)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a12EventSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: a12EventSeverity.setDescription('The severity of this event.')
a12EventIsStateBased = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a12EventIsStateBased.setStatus('mandatory')
if mibBuilder.loadTexts: a12EventIsStateBased.setDescription('The value of this attribute determined whether the Event being reported is a state-based Event or not. If the value of this attribute is TRUE then the Event is state-based. Else the Event is not state-based')
a12EventStateKey = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 12, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a12EventStateKey.setStatus('mandatory')
if mibBuilder.loadTexts: a12EventStateKey.setDescription('This attribute holds the key identifying a row of the Event State group within the Component in which the event generator group is located. The Current State attribute within the row contains the current state of this state-based event. The current state can be one of the four severities: OK, Non-Critical, Critical, and Non-Recoverable.')
a12AssociatedGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 12, 1, 5), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a12AssociatedGroup.setStatus('mandatory')
if mibBuilder.loadTexts: a12AssociatedGroup.setDescription('The class name of the group that is associated with the events defined in this EventGeneration group.')
a12EventSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 12, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("vOther", 0), ("vUnknown", 1), ("vStorageController", 2), ("vStorageDevice", 3), ("vBusPort", 4), ("vVolumeSet", 5), ("vProtectedSpaceExtent", 6), ("vAggregateProtectedSpaceExtent", 7), ("vPhysicalExtent", 8), ("vAggregatePhysicalExtent", 9), ("vRedundancyGroup", 10), ("vCache", 11), ("vSoftwareSubcomponent", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a12EventSystem.setStatus('mandatory')
if mibBuilder.loadTexts: a12EventSystem.setDescription('The mass storage association object type which is causing a change.')
a12EventSubsystem = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 12, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a12EventSubsystem.setStatus('mandatory')
if mibBuilder.loadTexts: a12EventSubsystem.setDescription('The minor functional aspect of the product causing the fault.')
a12EventSolution = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 12, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vNoActionIsRequired", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a12EventSolution.setStatus('mandatory')
if mibBuilder.loadTexts: a12EventSolution.setDescription('A solution to the problem that caused the event.')
a12InstanceDataPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 12, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a12InstanceDataPresent.setStatus('mandatory')
if mibBuilder.loadTexts: a12InstanceDataPresent.setDescription('Indicates whether the second event block contains instance-speci ic data.')
a12EventMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 12, 1, 10), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a12EventMessage.setStatus('mandatory')
if mibBuilder.loadTexts: a12EventMessage.setDescription('Auxiliary information related to the event.')
tBusPortAssociation = MibTable((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 13), )
if mibBuilder.loadTexts: tBusPortAssociation.setStatus('mandatory')
if mibBuilder.loadTexts: tBusPortAssociation.setDescription('Bus Port Association ')
eBusPortAssociation = MibTableRow((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 13, 1), ).setIndexNames((0, "SYMBIOSDMI20MIFDEFINITIONID20-MIB", "DmiComponentIndex"), (0, "SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a13BusPortAssociationIndex"))
if mibBuilder.loadTexts: eBusPortAssociation.setStatus('mandatory')
if mibBuilder.loadTexts: eBusPortAssociation.setDescription('')
a13BusPortAssociationIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 13, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a13BusPortAssociationIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a13BusPortAssociationIndex.setDescription('An index into the Bus Port Association table. This index is the same as the index in the Association group that defines the bus port association.')
a13NegotiatedSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 13, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a13NegotiatedSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: a13NegotiatedSpeed.setDescription('The maximum burst transfer rate, in millions of bytes, which was negotiated between the two associated bus ports.')
a13NegotiatedWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 13, 1, 3), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a13NegotiatedWidth.setStatus('mandatory')
if mibBuilder.loadTexts: a13NegotiatedWidth.setDescription('The width, in bits, of the bus ports data path which was negotiated between the two associated bus ports.')
tOperationalState = MibTable((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 14), )
if mibBuilder.loadTexts: tOperationalState.setStatus('mandatory')
if mibBuilder.loadTexts: tOperationalState.setDescription('This group provides the operational state, usage, and availabili y status, and administrative state indicators for specific Device Group instance .')
eOperationalState = MibTableRow((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 14, 1), ).setIndexNames((0, "SYMBIOSDMI20MIFDEFINITIONID20-MIB", "DmiComponentIndex"), (0, "SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a14OperationalStateInstanceIndex"))
if mibBuilder.loadTexts: eOperationalState.setStatus('mandatory')
if mibBuilder.loadTexts: eOperationalState.setDescription('')
a14OperationalStateInstanceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 14, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a14OperationalStateInstanceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a14OperationalStateInstanceIndex.setDescription('The Index into the Operational State table.')
a14DeviceGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 14, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a14DeviceGroupIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a14DeviceGroupIndex.setDescription('The group ID of the group referencing this instance.')
a14OperationalStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 14, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vEnabled", 3), ("vDisabled", 4), ("vNotApplicable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a14OperationalStatus.setStatus('mandatory')
if mibBuilder.loadTexts: a14OperationalStatus.setDescription('The operational status of the Device Group instance.')
a14UsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 14, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vIdle", 3), ("vActive", 4), ("vBusy", 5), ("vNotApplicable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a14UsageState.setStatus('mandatory')
if mibBuilder.loadTexts: a14UsageState.setDescription('The usage state of the Device Group instance.')
a14AvailabilityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 14, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vRunning", 3), ("vWarning", 4), ("vInTest", 5), ("vNotApplicable", 6), ("vPowerOff", 7), ("vOffLine", 8), ("vOffDuty", 9), ("vDegraded", 10), ("vNotInstalled", 11), ("vInstallError", 12), ("vPowerSave", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a14AvailabilityStatus.setStatus('mandatory')
if mibBuilder.loadTexts: a14AvailabilityStatus.setDescription('The availability status of the Device Group instance.')
a14AdministrativeState = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 14, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vLocked", 3), ("vUnlocked", 4), ("vNotApplicable", 5), ("vShuttingDown", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a14AdministrativeState.setStatus('mandatory')
if mibBuilder.loadTexts: a14AdministrativeState.setDescription('The administrative state of the Device Group instance.')
a14FatalErrorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 14, 1, 7), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a14FatalErrorCount.setStatus('mandatory')
if mibBuilder.loadTexts: a14FatalErrorCount.setDescription('The accumulated Fatal or Non-recoverable error count for this Device Group instance.')
a14MajorErrorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 14, 1, 8), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a14MajorErrorCount.setStatus('mandatory')
if mibBuilder.loadTexts: a14MajorErrorCount.setDescription('The accumulated Major or Critical error count for this Device Group instance.')
a14WarningErrorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 14, 1, 9), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a14WarningErrorCount.setStatus('mandatory')
if mibBuilder.loadTexts: a14WarningErrorCount.setDescription('The accumulated Warning or Non-Critical error count for this Device Group instance.')
a14CurrentErrorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 14, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vOk", 3), ("vNon-critical1", 4), ("vCritical", 5), ("vNon-recoverable1", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a14CurrentErrorStatus.setStatus('mandatory')
if mibBuilder.loadTexts: a14CurrentErrorStatus.setDescription("This attribute presents the current error status for this Device Group instance. The most critical error status in effect should be presented. I.e. if a part of the Device Group instance is 'Critical', while other status is 'Non-critical' then the status 'Critical' should be reported.")
a14DevicePredictedFailureStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 14, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vNotSupportedByThisDevice", 3), ("vNoFailurePredictedByTheDevice", 4), ("vDeviceFailurePredictedByTheDevice", 5), ("vMediaFailurePredictedByTheDevice", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a14DevicePredictedFailureStatus.setStatus('mandatory')
if mibBuilder.loadTexts: a14DevicePredictedFailureStatus.setDescription('Enumeration describing the current Device Predicted Failure Status (e.g.: the S.M.A.R.T. status of the device).')
tSymbiosEventPolling = MibTable((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 15), )
if mibBuilder.loadTexts: tSymbiosEventPolling.setStatus('mandatory')
if mibBuilder.loadTexts: tSymbiosEventPolling.setDescription('This group is the Symbios Vendor unique group for dealing with Event Polling.')
eSymbiosEventPolling = MibTableRow((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 15, 1), ).setIndexNames((0, "SYMBIOSDMI20MIFDEFINITIONID20-MIB", "DmiComponentIndex"))
if mibBuilder.loadTexts: eSymbiosEventPolling.setStatus('mandatory')
if mibBuilder.loadTexts: eSymbiosEventPolling.setDescription('')
a15SymbiosFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 15, 1, 1), DmiInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a15SymbiosFlag.setStatus('mandatory')
if mibBuilder.loadTexts: a15SymbiosFlag.setDescription('An Symbios Vendor Unique Flag.')
a15SmartEventPolling = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 15, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("vDisabled", 0), ("vEnabled", 1), ("vUnknown", 2), ("vNotApplicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a15SmartEventPolling.setStatus('mandatory')
if mibBuilder.loadTexts: a15SmartEventPolling.setDescription('A flag indicating whether or not the CI will poll for SMART events.')
a15ScanEventPolling = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 15, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("vDisabled", 0), ("vEnabled", 1), ("vUnknown", 2), ("vNotApplicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a15ScanEventPolling.setStatus('mandatory')
if mibBuilder.loadTexts: a15ScanEventPolling.setDescription('A flag indicating whether or not the CI will scan for a change in Devices and Controllers.')
a15Saf_teEventPolling = MibScalar((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 15, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("vDisabled", 0), ("vEnabled", 1), ("vUnknown", 2), ("vNotApplicable", 3)))).setLabel("a15Saf-teEventPolling").setMaxAccess("readwrite")
if mibBuilder.loadTexts: a15Saf_teEventPolling.setStatus('mandatory')
if mibBuilder.loadTexts: a15Saf_teEventPolling.setDescription('A flag indicating whether or not the CI will poll for SAF-TE events.')
a15EventPollingPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 15, 1, 5), DmiInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a15EventPollingPeriod.setStatus('mandatory')
if mibBuilder.loadTexts: a15EventPollingPeriod.setDescription('The event poll period in number of minutes.')
tSymbiosSmartDevice = MibTable((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 16), )
if mibBuilder.loadTexts: tSymbiosSmartDevice.setStatus('mandatory')
if mibBuilder.loadTexts: tSymbiosSmartDevice.setDescription('This group is a Symbios Vendor unique group for dealing with Smart Storage Devices.')
eSymbiosSmartDevice = MibTableRow((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 16, 1), ).setIndexNames((0, "SYMBIOSDMI20MIFDEFINITIONID20-MIB", "DmiComponentIndex"), (0, "SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a16SymSmartDeviceIndex"))
if mibBuilder.loadTexts: eSymbiosSmartDevice.setStatus('mandatory')
if mibBuilder.loadTexts: eSymbiosSmartDevice.setDescription('')
a16SymSmartDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 16, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a16SymSmartDeviceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a16SymSmartDeviceIndex.setDescription('An index into the Symbios Vendor Unique Device info table. This index corresponds to the Storage Device index.')
a16SmartReportingCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 16, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("vDisabled", 0), ("vEnabled", 1), ("vUnknown", 2), ("vNotSupported", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a16SmartReportingCapability.setStatus('mandatory')
if mibBuilder.loadTexts: a16SmartReportingCapability.setDescription("A flag indicating the state of a Devices's SMART reporting capability.")
tSaf_teProcessor = MibTable((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 17), ).setLabel("tSaf-teProcessor")
if mibBuilder.loadTexts: tSaf_teProcessor.setStatus('mandatory')
if mibBuilder.loadTexts: tSaf_teProcessor.setDescription('This group defines a SAF-TE Processor')
eSaf_teProcessor = MibTableRow((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 17, 1), ).setLabel("eSaf-teProcessor").setIndexNames((0, "SYMBIOSDMI20MIFDEFINITIONID20-MIB", "DmiComponentIndex"), (0, "SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a17Saf-teProcessorIndex"))
if mibBuilder.loadTexts: eSaf_teProcessor.setStatus('mandatory')
if mibBuilder.loadTexts: eSaf_teProcessor.setDescription('')
a17Saf_teProcessorIndex = MibScalar((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 17, 1, 1), DmiInteger()).setLabel("a17Saf-teProcessorIndex").setMaxAccess("readonly")
if mibBuilder.loadTexts: a17Saf_teProcessorIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a17Saf_teProcessorIndex.setDescription('An index into the SAF-TE processor table.')
a17StorageControllerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 17, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a17StorageControllerIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a17StorageControllerIndex.setDescription('An index into the Storage Controller table.')
a17ScsiId = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 17, 1, 3), DmiInteger64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a17ScsiId.setStatus('mandatory')
if mibBuilder.loadTexts: a17ScsiId.setDescription('The SCSI target/initiator identifier.')
a17ScsiLun = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 17, 1, 4), DmiInteger64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a17ScsiLun.setStatus('mandatory')
if mibBuilder.loadTexts: a17ScsiLun.setDescription('The SCSI logical unit number.')
a17VendorId = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 17, 1, 5), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a17VendorId.setStatus('mandatory')
if mibBuilder.loadTexts: a17VendorId.setDescription('The vendor ID that is returned in the Inquiry command')
a17ProductId = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 17, 1, 6), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a17ProductId.setStatus('mandatory')
if mibBuilder.loadTexts: a17ProductId.setDescription('The product ID that is returned in the Inquiry command')
a17FirmwareRevisionLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 17, 1, 7), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a17FirmwareRevisionLevel.setStatus('mandatory')
if mibBuilder.loadTexts: a17FirmwareRevisionLevel.setDescription('Identifies the current firmware revision of the SAF-TE processor ')
a17EnclosureUniqueIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 17, 1, 8), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a17EnclosureUniqueIdentifier.setStatus('mandatory')
if mibBuilder.loadTexts: a17EnclosureUniqueIdentifier.setDescription('This field specifies the unique unit number for the SAF-TE processor.')
a17Saf_teSpecificationRevisionLevel = MibScalar((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 17, 1, 9), DmiDisplaystring()).setLabel("a17Saf-teSpecificationRevisionLevel").setMaxAccess("readonly")
if mibBuilder.loadTexts: a17Saf_teSpecificationRevisionLevel.setStatus('mandatory')
if mibBuilder.loadTexts: a17Saf_teSpecificationRevisionLevel.setDescription('Identifies the revision of the SAF-TE interface specification to which this device claims compliance.')
a17HasLocks = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 17, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1), ("vUnknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a17HasLocks.setStatus('mandatory')
if mibBuilder.loadTexts: a17HasLocks.setDescription('If true, then this SAF-TE processor is contained within an enclosure that has locks.')
a17HasSpeakers = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 17, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1), ("vUnknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a17HasSpeakers.setStatus('mandatory')
if mibBuilder.loadTexts: a17HasSpeakers.setDescription('If true, then this SAF-TE processor is contained within an enclosure that has speakers.')
a17DoorLocked = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 17, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1), ("vUnknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a17DoorLocked.setStatus('mandatory')
if mibBuilder.loadTexts: a17DoorLocked.setDescription('If true, then this SAF-TE processor enclosure is locked.')
a17SpeakerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 17, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1), ("vUnknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a17SpeakerStatus.setStatus('mandatory')
if mibBuilder.loadTexts: a17SpeakerStatus.setDescription('If true, then this SAF-TE processor enclsoure speakers are turned on. If false, then the speakers are off or not installed.')
a17PowerOnMinutes = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 17, 1, 14), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a17PowerOnMinutes.setStatus('mandatory')
if mibBuilder.loadTexts: a17PowerOnMinutes.setDescription('Total number of power on minutes.')
a17PowerOnCycles = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 17, 1, 15), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a17PowerOnCycles.setStatus('mandatory')
if mibBuilder.loadTexts: a17PowerOnCycles.setDescription('Total number of times the SAF-TE enclosure has been power on.')
a17TemperatureOutOfRange = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 17, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1), ("vUnknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a17TemperatureOutOfRange.setStatus('mandatory')
if mibBuilder.loadTexts: a17TemperatureOutOfRange.setDescription('If true, then the temperature is out of range.')
tSaf_teControlledFan = MibTable((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 18), ).setLabel("tSaf-teControlledFan")
if mibBuilder.loadTexts: tSaf_teControlledFan.setStatus('mandatory')
if mibBuilder.loadTexts: tSaf_teControlledFan.setDescription('This group defines status of a fan controlled by a SAF-TE Processor')
eSaf_teControlledFan = MibTableRow((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 18, 1), ).setLabel("eSaf-teControlledFan").setIndexNames((0, "SYMBIOSDMI20MIFDEFINITIONID20-MIB", "DmiComponentIndex"), (0, "SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a18Saf-teControlledFanIndex"))
if mibBuilder.loadTexts: eSaf_teControlledFan.setStatus('mandatory')
if mibBuilder.loadTexts: eSaf_teControlledFan.setDescription('')
a18Saf_teControlledFanIndex = MibScalar((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 18, 1, 1), DmiInteger()).setLabel("a18Saf-teControlledFanIndex").setMaxAccess("readonly")
if mibBuilder.loadTexts: a18Saf_teControlledFanIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a18Saf_teControlledFanIndex.setDescription('An index into the SAF-TE controlled fan table.')
a18Saf_teProcessorIndex = MibScalar((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 18, 1, 2), DmiInteger()).setLabel("a18Saf-teProcessorIndex").setMaxAccess("readonly")
if mibBuilder.loadTexts: a18Saf_teProcessorIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a18Saf_teProcessorIndex.setDescription('The Index to the SAF-TE proccessor that is controlling this fan.')
a18Status = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 18, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 128))).clone(namedValues=NamedValues(("vFanIsOperational", 0), ("vFanIsMalfunctioning", 1), ("vFanIsNotInstalled", 2), ("vUnknownStatus", 128)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a18Status.setStatus('mandatory')
if mibBuilder.loadTexts: a18Status.setDescription('The fan status.')
tSaf_teControlledPowerSupply = MibTable((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 19), ).setLabel("tSaf-teControlledPowerSupply")
if mibBuilder.loadTexts: tSaf_teControlledPowerSupply.setStatus('mandatory')
if mibBuilder.loadTexts: tSaf_teControlledPowerSupply.setDescription('This group defines status of a Power Supply controlled by a SAF-TE Processor')
eSaf_teControlledPowerSupply = MibTableRow((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 19, 1), ).setLabel("eSaf-teControlledPowerSupply").setIndexNames((0, "SYMBIOSDMI20MIFDEFINITIONID20-MIB", "DmiComponentIndex"), (0, "SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a19Saf-teControlledPowerSupplyIndex"))
if mibBuilder.loadTexts: eSaf_teControlledPowerSupply.setStatus('mandatory')
if mibBuilder.loadTexts: eSaf_teControlledPowerSupply.setDescription('')
a19Saf_teControlledPowerSupplyIndex = MibScalar((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 19, 1, 1), DmiInteger()).setLabel("a19Saf-teControlledPowerSupplyIndex").setMaxAccess("readonly")
if mibBuilder.loadTexts: a19Saf_teControlledPowerSupplyIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a19Saf_teControlledPowerSupplyIndex.setDescription('An index into the SAF-TE controlled Power Supply table.')
a19Saf_teProcessorIndex = MibScalar((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 19, 1, 2), DmiInteger()).setLabel("a19Saf-teProcessorIndex").setMaxAccess("readonly")
if mibBuilder.loadTexts: a19Saf_teProcessorIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a19Saf_teProcessorIndex.setDescription('The Index to the SAF-TE proccessor that is controlling this Power Supply.')
a19Status = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 19, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 16, 17, 32, 33, 128))).clone(namedValues=NamedValues(("vPowerSupplyIsOperationalAndOn", 0), ("vPowerSupplyIsOperationalAndOff", 1), ("vPowerSupplyIsMalfunctioningAndCommanded", 16), ("vPowerSupplyIsMalfunctioningAndCommande1", 17), ("vPowerSupplyIsNotPresent", 32), ("vPowerSupplyIsPresent", 33), ("vUnknownStatus", 128)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a19Status.setStatus('mandatory')
if mibBuilder.loadTexts: a19Status.setDescription('The Power Supply status.')
tSaf_teControlledSlot = MibTable((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 20), ).setLabel("tSaf-teControlledSlot")
if mibBuilder.loadTexts: tSaf_teControlledSlot.setStatus('mandatory')
if mibBuilder.loadTexts: tSaf_teControlledSlot.setDescription('This group defines status of a Slot controlled by a SAF-TE Processor')
eSaf_teControlledSlot = MibTableRow((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 20, 1), ).setLabel("eSaf-teControlledSlot").setIndexNames((0, "SYMBIOSDMI20MIFDEFINITIONID20-MIB", "DmiComponentIndex"), (0, "SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a20Saf-teControlledSlotIndex"))
if mibBuilder.loadTexts: eSaf_teControlledSlot.setStatus('mandatory')
if mibBuilder.loadTexts: eSaf_teControlledSlot.setDescription('')
a20Saf_teControlledSlotIndex = MibScalar((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 20, 1, 1), DmiInteger()).setLabel("a20Saf-teControlledSlotIndex").setMaxAccess("readonly")
if mibBuilder.loadTexts: a20Saf_teControlledSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a20Saf_teControlledSlotIndex.setDescription('An index into the SAF-TE controlled Slot table.')
a20Saf_teProcessorIndex = MibScalar((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 20, 1, 2), DmiInteger()).setLabel("a20Saf-teProcessorIndex").setMaxAccess("readonly")
if mibBuilder.loadTexts: a20Saf_teProcessorIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a20Saf_teProcessorIndex.setDescription('The Index to the SAF-TE proccessor table that is controlling this Slot.')
a20ScsiId = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 20, 1, 3), DmiInteger64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a20ScsiId.setStatus('mandatory')
if mibBuilder.loadTexts: a20ScsiId.setDescription('The SCSI target/initiator identifier for this slot.')
a20NumberOfInsertions = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 20, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a20NumberOfInsertions.setStatus('mandatory')
if mibBuilder.loadTexts: a20NumberOfInsertions.setDescription('The total number of device insertions for this slot while the enclosure is powered on.')
a20State = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 20, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("vDevicePresent-Ready", 1), ("vDevicePresent-NotReady", 2), ("vDevicePresent-HotSpare", 3), ("vDevicePresent-ReadyForRemoval", 4), ("vDeviceNotPresent", 5), ("vDeviceNotPresent-ReadyForInsertion", 6), ("vUnconfigured", 7), ("vUnknownState", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a20State.setStatus('mandatory')
if mibBuilder.loadTexts: a20State.setDescription('The slot state.')
a20Rebuild = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 20, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("vNotRebuilding", 0), ("vRebuildInProcess", 1), ("vRebuildStopped", 2), ("vUnknownStatus", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a20Rebuild.setStatus('mandatory')
if mibBuilder.loadTexts: a20Rebuild.setDescription('Rebuild status')
a20DeviceFault = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 20, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1), ("vUnknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a20DeviceFault.setStatus('mandatory')
if mibBuilder.loadTexts: a20DeviceFault.setDescription('If true, the device has exhibited some hardware or data fault.')
a20InFailedArray = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 20, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1), ("vUnknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a20InFailedArray.setStatus('mandatory')
if mibBuilder.loadTexts: a20InFailedArray.setDescription('If true, the device is in an array and an error has occurred on any member of the array.')
a20InCriticalArray = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 20, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1), ("vUnknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a20InCriticalArray.setStatus('mandatory')
if mibBuilder.loadTexts: a20InCriticalArray.setDescription('If true, the device is in an array that is non fault-tolerant.')
a20ParityCheck = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 20, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1), ("vUnknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a20ParityCheck.setStatus('mandatory')
if mibBuilder.loadTexts: a20ParityCheck.setDescription('If true, the device is in an array that is undergoing a parity check operation.')
a20PredictedFault = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 20, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1), ("vUnknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a20PredictedFault.setStatus('mandatory')
if mibBuilder.loadTexts: a20PredictedFault.setDescription('If true, the device has been tagged by a fault prediction algorithm as being likely to fail in the near future.')
tSaf_teControlledTemperatureSensor = MibTable((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 21), ).setLabel("tSaf-teControlledTemperatureSensor")
if mibBuilder.loadTexts: tSaf_teControlledTemperatureSensor.setStatus('mandatory')
if mibBuilder.loadTexts: tSaf_teControlledTemperatureSensor.setDescription('This group defines status of a Temperature sensor controlled by a SAF-TE Processor')
eSaf_teControlledTemperatureSensor = MibTableRow((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 21, 1), ).setLabel("eSaf-teControlledTemperatureSensor").setIndexNames((0, "SYMBIOSDMI20MIFDEFINITIONID20-MIB", "DmiComponentIndex"), (0, "SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a21Saf-teControlledTemperatureSensorInde"))
if mibBuilder.loadTexts: eSaf_teControlledTemperatureSensor.setStatus('mandatory')
if mibBuilder.loadTexts: eSaf_teControlledTemperatureSensor.setDescription('')
a21Saf_teControlledTemperatureSensorInde = MibScalar((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 21, 1, 1), DmiInteger()).setLabel("a21Saf-teControlledTemperatureSensorInde").setMaxAccess("readonly")
if mibBuilder.loadTexts: a21Saf_teControlledTemperatureSensorInde.setStatus('mandatory')
if mibBuilder.loadTexts: a21Saf_teControlledTemperatureSensorInde.setDescription('An index into the SAF-TE controlled Temperature sensor table.')
a21Saf_teProcessorIndex = MibScalar((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 21, 1, 2), DmiInteger()).setLabel("a21Saf-teProcessorIndex").setMaxAccess("readonly")
if mibBuilder.loadTexts: a21Saf_teProcessorIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a21Saf_teProcessorIndex.setDescription('The Index to the SAF-TE proccessor that is controlling this Temperature sensor.')
a21Temperature = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 21, 1, 3), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a21Temperature.setStatus('mandatory')
if mibBuilder.loadTexts: a21Temperature.setDescription('The current temperature in degrees Fahrenheit.')
tNetworkAdapter802PortGroup = MibTable((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 22), )
if mibBuilder.loadTexts: tNetworkAdapter802PortGroup.setStatus('mandatory')
if mibBuilder.loadTexts: tNetworkAdapter802PortGroup.setDescription('Contains objects related to each of the network ports on the network adapter.')
eNetworkAdapter802PortGroup = MibTableRow((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 22, 1), ).setIndexNames((0, "SYMBIOSDMI20MIFDEFINITIONID20-MIB", "DmiComponentIndex"), (0, "SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a22PortIndex"))
if mibBuilder.loadTexts: eNetworkAdapter802PortGroup.setStatus('mandatory')
if mibBuilder.loadTexts: eNetworkAdapter802PortGroup.setDescription('')
a22PortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 22, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a22PortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a22PortIndex.setDescription("This attribute is the ordinal of the network port within the network adapter, i.e. the 'port number'.")
a22PermanentNetworkAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 22, 1, 2), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a22PermanentNetworkAddress.setStatus('mandatory')
if mibBuilder.loadTexts: a22PermanentNetworkAddress.setDescription('This is the node address stored permanently in the adapter.')
a22CurrentNetworkAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 22, 1, 3), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a22CurrentNetworkAddress.setStatus('mandatory')
if mibBuilder.loadTexts: a22CurrentNetworkAddress.setDescription('This is the node address that can be modified by software, sometimes referred to as the Locally Administered Address (LAA).')
a22ConnectorType = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 22, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("vUnknown", 1), ("vAui", 2), ("vUtpCategory3", 3), ("vUtpCategory4", 4), ("vUtpCategory5", 5), ("vBnc", 6), ("vStpRj45", 7), ("vStpDb9", 8), ("vFiberMic", 9), ("vAppleAui", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a22ConnectorType.setStatus('mandatory')
if mibBuilder.loadTexts: a22ConnectorType.setDescription('This is the type of connector currently being used to physically attach this port to the LAN.')
a22DataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 22, 1, 5), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a22DataRate.setStatus('mandatory')
if mibBuilder.loadTexts: a22DataRate.setDescription('This is the rate at which data is transferred over the LAN in Mbps.')
tNetworkAdapterHardwareGroup = MibTable((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 23), )
if mibBuilder.loadTexts: tNetworkAdapterHardwareGroup.setStatus('mandatory')
if mibBuilder.loadTexts: tNetworkAdapterHardwareGroup.setDescription('Contains objects related to the network adapter hardware.')
eNetworkAdapterHardwareGroup = MibTableRow((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 23, 1), ).setIndexNames((0, "SYMBIOSDMI20MIFDEFINITIONID20-MIB", "DmiComponentIndex"))
if mibBuilder.loadTexts: eNetworkAdapterHardwareGroup.setStatus('mandatory')
if mibBuilder.loadTexts: eNetworkAdapterHardwareGroup.setDescription('')
a23NetworkTopology = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 23, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("vOther", 1), ("v10MbpsEthernet", 2), ("v100MbpsEthernet", 3), ("v10010MbpsEthernet", 4), ("v100MbpsVgAnylan", 5), ("v4MbpsToken-ring", 6), ("v16MbpsToken-ring", 7), ("v164MbpsToken-ring", 8), ("v2MbpsArcnet", 9), ("v20MbpsArcnet", 10), ("vFddi", 11), ("vAtm", 12), ("vAppletalk", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a23NetworkTopology.setStatus('mandatory')
if mibBuilder.loadTexts: a23NetworkTopology.setDescription('This is the network media access method/topology supported by this adapter.')
a23TransmissionCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 23, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vNormal", 1), ("vFullDuplex", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a23TransmissionCapability.setStatus('mandatory')
if mibBuilder.loadTexts: a23TransmissionCapability.setDescription('The transmission capabilities of the adapter.')
a23NetworkAdapterRamSize = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 23, 1, 3), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a23NetworkAdapterRamSize.setStatus('mandatory')
if mibBuilder.loadTexts: a23NetworkAdapterRamSize.setDescription('This is the total size of adapter RAM in Kb.')
a23BusType = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 23, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 256))).clone(namedValues=NamedValues(("vOther", 1), ("vIsa", 2), ("vEisa", 3), ("vMca", 4), ("vPci", 5), ("vVl", 6), ("vPcmcia", 7), ("vParallel", 8), ("vNec98", 9), ("vMotherboard", 256)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a23BusType.setStatus('mandatory')
if mibBuilder.loadTexts: a23BusType.setDescription('This is the type of bus used to interface the adapter to the host.')
a23BusWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 23, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("v8BitCard", 3), ("v16BitCard", 4), ("v32BitCard", 5), ("v64BitCard", 6), ("v128BitCard", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a23BusWidth.setStatus('mandatory')
if mibBuilder.loadTexts: a23BusWidth.setDescription('This is the width (in bits) of the data path used to interface the adapter with the host.')
tEventGenerationForPowerSupply = MibTable((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 24), )
if mibBuilder.loadTexts: tEventGenerationForPowerSupply.setStatus('mandatory')
if mibBuilder.loadTexts: tEventGenerationForPowerSupply.setDescription('')
eEventGenerationForPowerSupply = MibTableRow((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 24, 1), ).setIndexNames((0, "SYMBIOSDMI20MIFDEFINITIONID20-MIB", "DmiComponentIndex"), (0, "SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a24AssociatedGroup"))
if mibBuilder.loadTexts: eEventGenerationForPowerSupply.setStatus('mandatory')
if mibBuilder.loadTexts: eEventGenerationForPowerSupply.setDescription('')
a24EventType = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 24, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(256, 257, 258))).clone(namedValues=NamedValues(("vPowerSupplyFailed", 256), ("vPowerSupplyOk", 257), ("vPowerSupplyLikelyToFail", 258)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a24EventType.setStatus('mandatory')
if mibBuilder.loadTexts: a24EventType.setDescription('The type of event that has occurred.')
a24EventSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 24, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32))).clone(namedValues=NamedValues(("vMonitor", 1), ("vInformation", 2), ("vOk", 4), ("vNon-critical", 8), ("vCritical", 16), ("vNon-recoverable", 32)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a24EventSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: a24EventSeverity.setDescription('The severity of this event.')
a24IsEventState_based = MibScalar((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 24, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setLabel("a24IsEventState-based").setMaxAccess("readonly")
if mibBuilder.loadTexts: a24IsEventState_based.setStatus('mandatory')
if mibBuilder.loadTexts: a24IsEventState_based.setDescription('The value of this attributedetermines whether the Event being reportedis a state-based Event or not. If the valueof this attribute is TRUE then the Event isstate-based. Otherwise the Event is notstate-based.')
a24EventStateKey = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 24, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a24EventStateKey.setStatus('mandatory')
if mibBuilder.loadTexts: a24EventStateKey.setDescription("A unique, single integer key into the EventState group if this is a state-based Event.If this is not a state-based Event then thisthis attribute's value is not defined.")
a24AssociatedGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 24, 1, 5), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a24AssociatedGroup.setStatus('mandatory')
if mibBuilder.loadTexts: a24AssociatedGroup.setDescription('The class name of the group that is associatedwith the events defined in this EventGeneration group.')
a24EventSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 24, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a24EventSystem.setStatus('mandatory')
if mibBuilder.loadTexts: a24EventSystem.setDescription('The major functional aspect of the productcausing the fault.')
a24EventSubsystem = MibScalar((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 24, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a24EventSubsystem.setStatus('mandatory')
if mibBuilder.loadTexts: a24EventSubsystem.setDescription('The minor functional aspect of the productcausing the fault.')
a24IsInstanceDataPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 24, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a24IsInstanceDataPresent.setStatus('mandatory')
if mibBuilder.loadTexts: a24IsInstanceDataPresent.setDescription('Indicates whether the second event block containsinstance-specif c data.')
a24EventMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 24, 1, 9), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a24EventMessage.setStatus('mandatory')
if mibBuilder.loadTexts: a24EventMessage.setDescription('Auxillary information releated to the eventThis text contains the name of the Probe')
tEventGenerationForTemperatureProbe = MibTable((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 25), )
if mibBuilder.loadTexts: tEventGenerationForTemperatureProbe.setStatus('mandatory')
if mibBuilder.loadTexts: tEventGenerationForTemperatureProbe.setDescription('')
eEventGenerationForTemperatureProbe = MibTableRow((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 25, 1), ).setIndexNames((0, "SYMBIOSDMI20MIFDEFINITIONID20-MIB", "DmiComponentIndex"), (0, "SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a25AssociatedGroup"))
if mibBuilder.loadTexts: eEventGenerationForTemperatureProbe.setStatus('mandatory')
if mibBuilder.loadTexts: eEventGenerationForTemperatureProbe.setDescription('')
a25EventType = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 25, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("vTemperatureOutOfRange", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a25EventType.setStatus('mandatory')
if mibBuilder.loadTexts: a25EventType.setDescription('The type of event that has occurred.')
a25EventSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 25, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32))).clone(namedValues=NamedValues(("vMonitor", 1), ("vInformation", 2), ("vOk", 4), ("vNon-critical", 8), ("vCritical", 16), ("vNon-recoverable", 32)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a25EventSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: a25EventSeverity.setDescription('The severity of this event.')
a25IsEventState_based = MibScalar((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 25, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setLabel("a25IsEventState-based").setMaxAccess("readonly")
if mibBuilder.loadTexts: a25IsEventState_based.setStatus('mandatory')
if mibBuilder.loadTexts: a25IsEventState_based.setDescription('The value of this attributedetermines whether the Event being reportedis a state-based Event or not. If the valueof this attribute is TRUE then the Event isstate-based. Otherwise the Event is notstate-based.')
a25EventStateKey = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 25, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a25EventStateKey.setStatus('mandatory')
if mibBuilder.loadTexts: a25EventStateKey.setDescription("A unique, single integer key into the EventState group if this is a state-based Event.If this is not a state-based Event then thisthis attribute's value is not defined.")
a25AssociatedGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 25, 1, 5), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a25AssociatedGroup.setStatus('mandatory')
if mibBuilder.loadTexts: a25AssociatedGroup.setDescription('The class name of the group that is associatedwith the events defined in this EventGeneration group.')
a25EventSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 25, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a25EventSystem.setStatus('mandatory')
if mibBuilder.loadTexts: a25EventSystem.setDescription('The major functional aspect of the productcausing the fault.')
a25EventSubsystem = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 25, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a25EventSubsystem.setStatus('mandatory')
if mibBuilder.loadTexts: a25EventSubsystem.setDescription('The minor functional aspect of the productcausing the fault.')
a25IsInstanceDataPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 25, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a25IsInstanceDataPresent.setStatus('mandatory')
if mibBuilder.loadTexts: a25IsInstanceDataPresent.setDescription('Indicates whether the second event block containsinstance-specif c data.')
a25EventMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 25, 1, 9), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a25EventMessage.setStatus('mandatory')
if mibBuilder.loadTexts: a25EventMessage.setDescription('Auxillary information releated to the eventThis text contains the name of the Probe')
tEventGenerationForFans = MibTable((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 26), )
if mibBuilder.loadTexts: tEventGenerationForFans.setStatus('mandatory')
if mibBuilder.loadTexts: tEventGenerationForFans.setDescription('')
eEventGenerationForFans = MibTableRow((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 26, 1), ).setIndexNames((0, "SYMBIOSDMI20MIFDEFINITIONID20-MIB", "DmiComponentIndex"), (0, "SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a26AssociatedGroup"))
if mibBuilder.loadTexts: eEventGenerationForFans.setStatus('mandatory')
if mibBuilder.loadTexts: eEventGenerationForFans.setDescription('')
a26EventType = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 26, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("vFanFailure", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a26EventType.setStatus('mandatory')
if mibBuilder.loadTexts: a26EventType.setDescription('The type of event that has occurred.')
a26EventSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 26, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32))).clone(namedValues=NamedValues(("vMonitor", 1), ("vInformation", 2), ("vOk", 4), ("vNon-critical", 8), ("vCritical", 16), ("vNon-recoverable", 32)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a26EventSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: a26EventSeverity.setDescription('The severity of this event.')
a26IsEventState_based = MibScalar((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 26, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setLabel("a26IsEventState-based").setMaxAccess("readonly")
if mibBuilder.loadTexts: a26IsEventState_based.setStatus('mandatory')
if mibBuilder.loadTexts: a26IsEventState_based.setDescription('The value of this attributedetermines whether the Event being reportedis a state-based Event or not. If the valueof this attribute is TRUE then the Event isstate-based. Otherwise the Event is notstate-based.')
a26EventStateKey = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 26, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a26EventStateKey.setStatus('mandatory')
if mibBuilder.loadTexts: a26EventStateKey.setDescription("A unique, single integer key into the EventState group if this is a state-based Event.If this is not a state-based Event then thisthis attribute's value is not defined.")
a26AssociatedGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 26, 1, 5), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a26AssociatedGroup.setStatus('mandatory')
if mibBuilder.loadTexts: a26AssociatedGroup.setDescription('The class name of the group that is associatedwith the events defined in this EventGeneration group.')
a26EventSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 26, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a26EventSystem.setStatus('mandatory')
if mibBuilder.loadTexts: a26EventSystem.setDescription('The major functional aspect of the productcausing the fault.')
a26EventSubsystem = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 26, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a26EventSubsystem.setStatus('mandatory')
if mibBuilder.loadTexts: a26EventSubsystem.setDescription('The minor functional aspect of the productcausing the fault.')
a26IsInstanceDataPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 26, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a26IsInstanceDataPresent.setStatus('mandatory')
if mibBuilder.loadTexts: a26IsInstanceDataPresent.setDescription('Indicates whether the second event block containsinstance-specif c data.')
a26EventMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 26, 1, 9), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a26EventMessage.setStatus('mandatory')
if mibBuilder.loadTexts: a26EventMessage.setDescription('Auxillary information releated to the eventThis text contains the name of the Probe')
tSymbiosHealth = MibTable((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 27), )
if mibBuilder.loadTexts: tSymbiosHealth.setStatus('mandatory')
if mibBuilder.loadTexts: tSymbiosHealth.setDescription('This group is the Symbios Vendor unique group for reporting the health.')
eSymbiosHealth = MibTableRow((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 27, 1), ).setIndexNames((0, "SYMBIOSDMI20MIFDEFINITIONID20-MIB", "DmiComponentIndex"))
if mibBuilder.loadTexts: eSymbiosHealth.setStatus('mandatory')
if mibBuilder.loadTexts: eSymbiosHealth.setDescription('')
a27OverallHealthStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 27, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vOk", 3), ("vDegraded", 4), ("vNon-recoverable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a27OverallHealthStatus.setStatus('mandatory')
if mibBuilder.loadTexts: a27OverallHealthStatus.setDescription('Status indicating the overall health.')
a27OverallControllerHealthStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 27, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vOk", 3), ("vDegraded", 4), ("vNon-recoverable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a27OverallControllerHealthStatus.setStatus('mandatory')
if mibBuilder.loadTexts: a27OverallControllerHealthStatus.setDescription('Status indicating the overall health of the controllers.')
a27Non_recoverableControllers = MibScalar((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 27, 1, 3), DmiInteger()).setLabel("a27Non-recoverableControllers").setMaxAccess("readonly")
if mibBuilder.loadTexts: a27Non_recoverableControllers.setStatus('mandatory')
if mibBuilder.loadTexts: a27Non_recoverableControllers.setDescription('The number of controllers reporting a non-recoverable status.')
a27DegradedControllers = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 27, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a27DegradedControllers.setStatus('mandatory')
if mibBuilder.loadTexts: a27DegradedControllers.setDescription('The number of controllers reporting a degraded status.')
a27OverallDeviceHealthStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 27, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vOk", 3), ("vDegraded", 4), ("vNon-recoverable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a27OverallDeviceHealthStatus.setStatus('mandatory')
if mibBuilder.loadTexts: a27OverallDeviceHealthStatus.setDescription('Status indicating the overall health of the devices.')
a27Non_recoverableDevices = MibScalar((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 27, 1, 6), DmiInteger()).setLabel("a27Non-recoverableDevices").setMaxAccess("readonly")
if mibBuilder.loadTexts: a27Non_recoverableDevices.setStatus('mandatory')
if mibBuilder.loadTexts: a27Non_recoverableDevices.setDescription('The number of devices reporting a non-recoverable status.')
a27DegradedDevices = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 27, 1, 7), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a27DegradedDevices.setStatus('mandatory')
if mibBuilder.loadTexts: a27DegradedDevices.setDescription('The number of devices reporting a degraded status.')
tMiftomib = MibTable((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 99), )
if mibBuilder.loadTexts: tMiftomib.setStatus('mandatory')
if mibBuilder.loadTexts: tMiftomib.setDescription('This group defines attributes required for DMI to SNMP translati n.')
eMiftomib = MibTableRow((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 99, 1), ).setIndexNames((0, "SYMBIOSDMI20MIFDEFINITIONID20-MIB", "DmiComponentIndex"))
if mibBuilder.loadTexts: eMiftomib.setStatus('mandatory')
if mibBuilder.loadTexts: eMiftomib.setDescription('')
a99MibName = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 99, 1, 1), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a99MibName.setStatus('mandatory')
if mibBuilder.loadTexts: a99MibName.setDescription('The MIB name that defines this MIF')
a99MibOid = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 99, 1, 2), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a99MibOid.setStatus('mandatory')
if mibBuilder.loadTexts: a99MibOid.setDescription('The MIB OID that corresponds to this MIF')
a99DisableTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 99, 1, 3), DmiInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a99DisableTrap.setStatus('mandatory')
if mibBuilder.loadTexts: a99DisableTrap.setDescription('This attribute can be changed to disable sending oftraps from this component')
trap1ID20forStorageDevices = NotificationType((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 6, 1) + (0,1)).setObjects(("SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a6StorageDevicesEventType"), ("SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a6EventSeverity"), ("SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a6EventIsStateBased"), ("SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a6EventStateKey"), ("SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a6AssociatedGroup"), ("SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a6EventSystem"), ("SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a6EventSubsystem"), ("SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a6EventSolution"), ("SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a6InstanceDataPresent"), ("SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a6EventMessage"), ("SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a5StorageDeviceIndex"))
if mibBuilder.loadTexts: trap1ID20forStorageDevices.setDescription('Self-Monitoring Warning (predictive failure - data recovery possible)')
trap2ID20forStorageDevices = NotificationType((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 6, 1) + (0,2)).setObjects(("SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a6StorageDevicesEventType"), ("SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a6EventSeverity"), ("SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a6EventIsStateBased"), ("SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a6EventStateKey"), ("SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a6AssociatedGroup"), ("SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a6EventSystem"), ("SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a6EventSubsystem"), ("SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a6EventSolution"), ("SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a6InstanceDataPresent"), ("SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a6EventMessage"), ("SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a5StorageDeviceIndex"))
if mibBuilder.loadTexts: trap2ID20forStorageDevices.setDescription('Self-Monitoring Warning (predictive failure - data recovery questionable)')
trap3ID20forStorageController = NotificationType((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 8, 1) + (0,3)).setObjects(("SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a8StorageControllerEventType"), ("SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a8EventSeverity"), ("SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a8EventIsStateBased"), ("SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a8EventStateKey"), ("SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a8AssociatedGroup"), ("SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a8EventSystem"), ("SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a8EventSubsystem"), ("SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a8EventSolution"), ("SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a8InstanceDataPresent"), ("SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a8EventMessage"), ("SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a7ControllerIndex"))
if mibBuilder.loadTexts: trap3ID20forStorageController.setDescription('Storage Controller Error (not responding)')
trap4ID20forMassStorageAssociation = NotificationType((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 12, 1) + (0,4)).setObjects(("SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a12MassStorageAssociationEventType"), ("SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a12EventSeverity"), ("SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a12EventIsStateBased"), ("SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a12EventStateKey"), ("SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a12AssociatedGroup"), ("SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a12EventSystem"), ("SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a12EventSubsystem"), ("SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a12EventSolution"), ("SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a12InstanceDataPresent"), ("SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a12EventMessage"), ("SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a11AssociationIndex"))
if mibBuilder.loadTexts: trap4ID20forMassStorageAssociation.setDescription('New Storage controller detected')
trap5ID20forMassStorageAssociation = NotificationType((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 12, 1) + (0,5)).setObjects(("SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a12MassStorageAssociationEventType"), ("SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a12EventSeverity"), ("SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a12EventIsStateBased"), ("SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a12EventStateKey"), ("SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a12AssociatedGroup"), ("SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a12EventSystem"), ("SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a12EventSubsystem"), ("SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a12EventSolution"), ("SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a12InstanceDataPresent"), ("SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a12EventMessage"), ("SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a11AssociationIndex"))
if mibBuilder.loadTexts: trap5ID20forMassStorageAssociation.setDescription('New device detected')
trap6ID20forMassStorageAssociation = NotificationType((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 12, 1) + (0,6)).setObjects(("SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a12MassStorageAssociationEventType"), ("SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a12EventSeverity"), ("SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a12EventIsStateBased"), ("SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a12EventStateKey"), ("SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a12AssociatedGroup"), ("SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a12EventSystem"), ("SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a12EventSubsystem"), ("SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a12EventSolution"), ("SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a12InstanceDataPresent"), ("SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a12EventMessage"), ("SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a11AssociationIndex"))
if mibBuilder.loadTexts: trap6ID20forMassStorageAssociation.setDescription('Existing controller changed')
trap7ID20forMassStorageAssociation = NotificationType((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 12, 1) + (0,7)).setObjects(("SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a12MassStorageAssociationEventType"), ("SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a12EventSeverity"), ("SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a12EventIsStateBased"), ("SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a12EventStateKey"), ("SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a12AssociatedGroup"), ("SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a12EventSystem"), ("SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a12EventSubsystem"), ("SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a12EventSolution"), ("SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a12InstanceDataPresent"), ("SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a12EventMessage"), ("SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a11AssociationIndex"))
if mibBuilder.loadTexts: trap7ID20forMassStorageAssociation.setDescription('Existing device changed')
mibBuilder.exportSymbols("SYMBIOSDMI20MIFDEFINITIONID20-MIB", a20ParityCheck=a20ParityCheck, a10LinkType=a10LinkType, a14AvailabilityStatus=a14AvailabilityStatus, a2Description=a2Description, a7ControllerIndex=a7ControllerIndex, a26EventSystem=a26EventSystem, a3WorldwideIdentifier=a3WorldwideIdentifier, a14CurrentErrorStatus=a14CurrentErrorStatus, a26IsEventState_based=a26IsEventState_based, a8EventSystem=a8EventSystem, DmiComponentIndex=DmiComponentIndex, a27Non_recoverableDevices=a27Non_recoverableDevices, a15EventPollingPeriod=a15EventPollingPeriod, a12EventSeverity=a12EventSeverity, eSaf_teControlledFan=eSaf_teControlledFan, a15SmartEventPolling=a15SmartEventPolling, a6EventMessage=a6EventMessage, trap6ID20forMassStorageAssociation=trap6ID20forMassStorageAssociation, a1Manufacturer=a1Manufacturer, eFieldReplaceableUnit=eFieldReplaceableUnit, a18Saf_teProcessorIndex=a18Saf_teProcessorIndex, a6StorageDevicesEventType=a6StorageDevicesEventType, a5RemovableMedia=a5RemovableMedia, tBusPortAssociation=tBusPortAssociation, a24IsEventState_based=a24IsEventState_based, a11Reference1=a11Reference1, a24EventStateKey=a24EventStateKey, a9MaximumTransferRate=a9MaximumTransferRate, scsi=scsi, eNetworkAdapterHardwareGroup=eNetworkAdapterHardwareGroup, a24EventMessage=a24EventMessage, tNetworkAdapterHardwareGroup=tNetworkAdapterHardwareGroup, tStorageDevices=tStorageDevices, a13BusPortAssociationIndex=a13BusPortAssociationIndex, a12EventStateKey=a12EventStateKey, tEventGenerationForTemperatureProbe=tEventGenerationForTemperatureProbe, a25EventStateKey=a25EventStateKey, trap5ID20forMassStorageAssociation=trap5ID20forMassStorageAssociation, tMiftomib=tMiftomib, a24EventSubsystem=a24EventSubsystem, a20InCriticalArray=a20InCriticalArray, a99MibOid=a99MibOid, eSymbiosSmartDevice=eSymbiosSmartDevice, a16SmartReportingCapability=a16SmartReportingCapability, a14UsageState=a14UsageState, a14WarningErrorCount=a14WarningErrorCount, a26EventSubsystem=a26EventSubsystem, a12InstanceDataPresent=a12InstanceDataPresent, a27DegradedDevices=a27DegradedDevices, a17VendorId=a17VendorId, a4WarrantyDuration=a4WarrantyDuration, eSaf_teProcessor=eSaf_teProcessor, eEventGenerationForPowerSupply=eEventGenerationForPowerSupply, a4Model=a4Model, a22DataRate=a22DataRate, a6EventIsStateBased=a6EventIsStateBased, a21Saf_teProcessorIndex=a21Saf_teProcessorIndex, a2Vendor=a2Vendor, tBusPort=tBusPort, a7Identification=a7Identification, a17ScsiId=a17ScsiId, cosprings=cosprings, a2InterfaceVersion=a2InterfaceVersion, a2Type=a2Type, a6EventSeverity=a6EventSeverity, a25AssociatedGroup=a25AssociatedGroup, a8EventSeverity=a8EventSeverity, a17HasSpeakers=a17HasSpeakers, tSaf_teControlledPowerSupply=tSaf_teControlledPowerSupply, a22ConnectorType=a22ConnectorType, a10BusPortIndex=a10BusPortIndex, a27OverallHealthStatus=a27OverallHealthStatus, a20ScsiId=a20ScsiId, eBusPort=eBusPort, a25EventMessage=a25EventMessage, tSymbiosSmartDevice=tSymbiosSmartDevice, a10BufferToBufferCredit=a10BufferToBufferCredit, a12EventSystem=a12EventSystem, a26EventSeverity=a26EventSeverity, eBusPortAssociation=eBusPortAssociation, a26EventMessage=a26EventMessage, a5MediaDataBlockSize=a5MediaDataBlockSize, a7SecondsSinceLastPower_up=a7SecondsSinceLastPower_up, eStorageDevicesEvents=eStorageDevicesEvents, id20=id20, a9BusPortIndex=a9BusPortIndex, tSaf_teProcessor=tSaf_teProcessor, tStorageControllerEvents=tStorageControllerEvents, a3WorldwideIdentifierType=a3WorldwideIdentifierType, a8AssociatedGroup=a8AssociatedGroup, eFibreChannelBusPortExtensions=eFibreChannelBusPortExtensions, a25IsInstanceDataPresent=a25IsInstanceDataPresent, tSymbiosHealth=tSymbiosHealth, a25EventSystem=a25EventSystem, a25EventSubsystem=a25EventSubsystem, a17StorageControllerIndex=a17StorageControllerIndex, a11Type=a11Type, a5DeviceLoaded=a5DeviceLoaded, a13NegotiatedWidth=a13NegotiatedWidth, a24EventSeverity=a24EventSeverity, a6EventStateKey=a6EventStateKey, trap7ID20forMassStorageAssociation=trap7ID20forMassStorageAssociation, a25EventType=a25EventType, a4Description=a4Description, a4FruIndex=a4FruIndex, a3WorldwideIdentifierIndex=a3WorldwideIdentifierIndex, a6EventSubsystem=a6EventSubsystem, a8EventMessage=a8EventMessage, a5TypeDescription=a5TypeDescription, eStorageDevices=eStorageDevices, a9MaximumNumberOfAttachments=a9MaximumNumberOfAttachments, a2InterfaceDescription=a2InterfaceDescription, a14DeviceGroupIndex=a14DeviceGroupIndex, a17SpeakerStatus=a17SpeakerStatus, DmiInteger=DmiInteger, eMassStorageAssociation=eMassStorageAssociation, a16SymSmartDeviceIndex=a16SymSmartDeviceIndex, a23BusType=a23BusType, a27OverallDeviceHealthStatus=a27OverallDeviceHealthStatus, a24EventSystem=a24EventSystem, a17TemperatureOutOfRange=a17TemperatureOutOfRange, a4WarrantyStartDate=a4WarrantyStartDate, a6InstanceDataPresent=a6InstanceDataPresent, a9ConnectorType=a9ConnectorType, a27OverallControllerHealthStatus=a27OverallControllerHealthStatus, a1Verify=a1Verify, tMassStorageAssociation=tMassStorageAssociation, eOperationalState=eOperationalState, symbios=symbios, a4RevisionLevel=a4RevisionLevel, a10FlowControlClassType=a10FlowControlClassType, a4FruSerialNumber=a4FruSerialNumber, a8EventSolution=a8EventSolution, trap4ID20forMassStorageAssociation=trap4ID20forMassStorageAssociation, a4SupportPhoneNumber=a4SupportPhoneNumber, a17HasLocks=a17HasLocks, a20DeviceFault=a20DeviceFault, a25EventSeverity=a25EventSeverity, a7BusMaster=a7BusMaster, a27DegradedControllers=a27DegradedControllers, a5Type=a5Type, a12EventMessage=a12EventMessage, a5StorageDeviceIndex=a5StorageDeviceIndex, a20PredictedFault=a20PredictedFault, eEventGenerationForFans=eEventGenerationForFans, a9ConnectorGender=a9ConnectorGender, eMiftomib=eMiftomib, eStorageController=eStorageController, trap2ID20forStorageDevices=trap2ID20forStorageDevices, a9MaximumWidth=a9MaximumWidth, a24EventType=a24EventType, a18Status=a18Status, a15SymbiosFlag=a15SymbiosFlag, a1Product=a1Product, a8EventIsStateBased=a8EventIsStateBased, eSubcomponentSoftware=eSubcomponentSoftware, a14MajorErrorCount=a14MajorErrorCount, a5Encryption=a5Encryption, a1Version=a1Version, a19Saf_teProcessorIndex=a19Saf_teProcessorIndex, a9Isochronous=a9Isochronous, tComponentid=tComponentid, a19Status=a19Status, a6EventSystem=a6EventSystem, a20Rebuild=a20Rebuild, eSaf_teControlledTemperatureSensor=eSaf_teControlledTemperatureSensor, a14DevicePredictedFailureStatus=a14DevicePredictedFailureStatus, a4FruInternetUniformResourceLocator=a4FruInternetUniformResourceLocator, a14OperationalStateInstanceIndex=a14OperationalStateInstanceIndex, a22PermanentNetworkAddress=a22PermanentNetworkAddress, a17PowerOnMinutes=a17PowerOnMinutes, eEventGenerationForTemperatureProbe=eEventGenerationForTemperatureProbe, a11AssociationIndex=a11AssociationIndex, a24IsInstanceDataPresent=a24IsInstanceDataPresent, a26EventStateKey=a26EventStateKey, trap1ID20forStorageDevices=trap1ID20forStorageDevices, a14AdministrativeState=a14AdministrativeState, tNetworkAdapter802PortGroup=tNetworkAdapter802PortGroup, DmiInteger64=DmiInteger64, a8StorageControllerEventType=a8StorageControllerEventType, a7ProtectionManagement=a7ProtectionManagement, tFieldReplaceableUnit=tFieldReplaceableUnit, a17FirmwareRevisionLevel=a17FirmwareRevisionLevel, a17DoorLocked=a17DoorLocked, a6AssociatedGroup=a6AssociatedGroup, a5Sub_identifier=a5Sub_identifier, a17ScsiLun=a17ScsiLun, eWorldwideIdentifer=eWorldwideIdentifer, a17Saf_teProcessorIndex=a17Saf_teProcessorIndex, tStorageController=tStorageController, a22PortIndex=a22PortIndex, a5MediaLoaded=a5MediaLoaded, a27Non_recoverableControllers=a27Non_recoverableControllers, tEventGenerationForFans=tEventGenerationForFans, a5RemovableDevice=a5RemovableDevice, a20Saf_teControlledSlotIndex=a20Saf_teControlledSlotIndex, a22CurrentNetworkAddress=a22CurrentNetworkAddress, tEventGenerationForPowerSupply=tEventGenerationForPowerSupply, eSaf_teControlledSlot=eSaf_teControlledSlot, a1SerialNumber=a1SerialNumber, tSaf_teControlledFan=tSaf_teControlledFan, a12AssociatedGroup=a12AssociatedGroup, a17ProductId=a17ProductId, a18Saf_teControlledFanIndex=a18Saf_teControlledFanIndex, a20State=a20State, a9ConnectorTypeDescription=a9ConnectorTypeDescription, a99DisableTrap=a99DisableTrap, a1Installation=a1Installation, eSaf_teControlledPowerSupply=eSaf_teControlledPowerSupply, a17EnclosureUniqueIdentifier=a17EnclosureUniqueIdentifier, a4Manufacturer=a4Manufacturer, tMassStorageAssociationEvents=tMassStorageAssociationEvents, a2Version=a2Version, a11Reference2=a11Reference2, tSaf_teControlledSlot=tSaf_teControlledSlot, a26IsInstanceDataPresent=a26IsInstanceDataPresent, tSubcomponentSoftware=tSubcomponentSoftware, a14OperationalStatus=a14OperationalStatus, a9AddressDescriptor=a9AddressDescriptor, tSymbiosEventPolling=tSymbiosEventPolling, a24AssociatedGroup=a24AssociatedGroup, tOperationalState=tOperationalState, trap3ID20forStorageController=trap3ID20forStorageController, a2IdentificationCode=a2IdentificationCode, a8InstanceDataPresent=a8InstanceDataPresent, a23TransmissionCapability=a23TransmissionCapability, a23BusWidth=a23BusWidth, a15Saf_teEventPolling=a15Saf_teEventPolling, a8EventStateKey=a8EventStateKey, a9ProtocolDescription=a9ProtocolDescription, dmtfGroups=dmtfGroups, a12EventIsStateBased=a12EventIsStateBased, tFibreChannelBusPortExtensions=tFibreChannelBusPortExtensions, a4PartNumber=a4PartNumber, a21Temperature=a21Temperature, a26AssociatedGroup=a26AssociatedGroup, a23NetworkAdapterRamSize=a23NetworkAdapterRamSize, tSaf_teControlledTemperatureSensor=tSaf_teControlledTemperatureSensor, DmiCounter=DmiCounter, a17PowerOnCycles=a17PowerOnCycles, a17Saf_teSpecificationRevisionLevel=a17Saf_teSpecificationRevisionLevel, a21Saf_teControlledTemperatureSensorInde=a21Saf_teControlledTemperatureSensorInde, a6EventSolution=a6EventSolution, a2LanguageEdition=a2LanguageEdition, a9Protocol=a9Protocol, eSymbiosEventPolling=eSymbiosEventPolling, a20Saf_teProcessorIndex=a20Saf_teProcessorIndex, a2SoftwareIndex=a2SoftwareIndex, a12EventSolution=a12EventSolution, eSymbiosHealth=eSymbiosHealth, eMassStorageAssociationEvents=eMassStorageAssociationEvents, a4DeviceGroupIndex=a4DeviceGroupIndex, a12MassStorageAssociationEventType=a12MassStorageAssociationEventType, a10FlowControlAcknowledgmentType=a10FlowControlAcknowledgmentType)
mibBuilder.exportSymbols("SYMBIOSDMI20MIFDEFINITIONID20-MIB", a19Saf_teControlledPowerSupplyIndex=a19Saf_teControlledPowerSupplyIndex, eStorageControllerEvents=eStorageControllerEvents, a13NegotiatedSpeed=a13NegotiatedSpeed, DmiDisplaystring=DmiDisplaystring, a20InFailedArray=a20InFailedArray, a20NumberOfInsertions=a20NumberOfInsertions, a10EndToEndCredit=a10EndToEndCredit, a23NetworkTopology=a23NetworkTopology, a26EventType=a26EventType, a9SignalCharacteristics=a9SignalCharacteristics, a12EventSubsystem=a12EventSubsystem, a99MibName=a99MibName, tStorageDevicesEvents=tStorageDevicesEvents, fam8xx=fam8xx, a8EventSubsystem=a8EventSubsystem, eNetworkAdapter802PortGroup=eNetworkAdapter802PortGroup, a5Compression=a5Compression, a14FatalErrorCount=a14FatalErrorCount, DmiDateX=DmiDateX, a5FormattedMediaCapacity=a5FormattedMediaCapacity, a25IsEventState_based=a25IsEventState_based, eComponentid=eComponentid, tWorldwideIdentifer=tWorldwideIdentifer, a15ScanEventPolling=a15ScanEventPolling, a10FabricTopology=a10FabricTopology)
