#
# PySNMP MIB module AC-PSTN-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/AC-PSTN-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:09:32 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
acGeneric, acProducts, acRegistrations, acBoardMibs, audioCodes = mibBuilder.importSymbols("AUDIOCODES-TYPES-MIB", "acGeneric", "acProducts", "acRegistrations", "acBoardMibs", "audioCodes")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
TimeTicks, Unsigned32, Counter64, ModuleIdentity, iso, Bits, ObjectIdentity, NotificationType, MibIdentifier, Integer32, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, enterprises, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Unsigned32", "Counter64", "ModuleIdentity", "iso", "Bits", "ObjectIdentity", "NotificationType", "MibIdentifier", "Integer32", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "enterprises", "IpAddress")
RowStatus, TAddress, DisplayString, DateAndTime, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TAddress", "DisplayString", "DateAndTime", "TextualConvention")
acPSTN = ModuleIdentity((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9))
if mibBuilder.loadTexts: acPSTN.setLastUpdated('200909301722Z')
if mibBuilder.loadTexts: acPSTN.setOrganization('AudioCodes Ltd')
if mibBuilder.loadTexts: acPSTN.setContactInfo('Postal: Support AudioCodes LTD 1 Hayarden Street Airport City Lod, ISRAEL 70151 Tel: 972-3-9764000 Fax: 972-3-9764040 Email: support@audiocodes.com Web: www.audiocodes.com')
if mibBuilder.loadTexts: acPSTN.setDescription('')
acPSTNConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1))
acTrunkConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 1))
acTrunk = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 1, 1))
acTrunkTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 1, 1, 1), )
if mibBuilder.loadTexts: acTrunkTable.setStatus('current')
if mibBuilder.loadTexts: acTrunkTable.setDescription('')
acTrunkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 1, 1, 1, 1), ).setIndexNames((0, "AC-PSTN-MIB", "acTrunkIndex"))
if mibBuilder.loadTexts: acTrunkEntry.setStatus('current')
if mibBuilder.loadTexts: acTrunkEntry.setDescription('')
acTrunkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 1, 1, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 83))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acTrunkIndex.setStatus('current')
if mibBuilder.loadTexts: acTrunkIndex.setDescription('Trunk ID at board in which the call is taking place. AC INI-Param: N/A')
acTrunkAdministrativeState = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("locked", 0), ("unLocked", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acTrunkAdministrativeState.setStatus('current')
if mibBuilder.loadTexts: acTrunkAdministrativeState.setDescription('Trunk Administrative State. Access: Online. AC INI-Param: N/A')
acTrunkProtocolType = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 50, 51, 52, 53, 54, 55, 56, 57))).clone(namedValues=NamedValues(("nONE", 0), ("e1EuroISDN", 1), ("t1Cas", 2), ("t1RawCas", 3), ("t1Transparent", 4), ("e1Transparent31", 5), ("e1Transparent30", 6), ("e1Mfcr2", 7), ("e1CasR2", 8), ("e1RawCAS", 9), ("t1-NI2ISDN", 10), ("t1-4EssISDN", 11), ("t1-5Ess-9-ISDN", 12), ("t1-5Ess-10-ISDN", 13), ("t1-Dms100-ISDN", 14), ("j1-TRANSPARENT", 15), ("t1-NTT-ISDN", 16), ("e1-AUSTEL-ISDN", 17), ("e1-HKT-ISDN", 18), ("e1-KOR-ISDN", 19), ("t1-HKT-ISDN", 20), ("e1-QSIG", 21), ("e1-TNZ-22", 22), ("t1-EXTRA-23", 23), ("t1-IUA", 28), ("e1-IUA", 29), ("e1-EXTRA-30", 30), ("e1-FRENCH-VN3-ISDN", 31), ("t1-EXTRA-32", 32), ("eXTRA-33", 33), ("t1-EURO-ISDN", 34), ("t1-DMS100-MERIDIAN-ISDN", 35), ("t1-NI1-ISDN", 36), ("e1-DUA", 37), ("e1-Q931-PACKETS", 38), ("t1-Q931-PACKETS", 39), ("e1-NI2-ISDN", 40), ("e1-CAS-R15", 41), ("v5", 43), ("bRI-EURO-ISDN", 50), ("bRI-NI-2", 51), ("bRI-DMS100", 52), ("bRI-5ESS", 53), ("bRI-QSIG", 54), ("bRI-VNG", 55), ("bRI-NTT", 56), ("bRI-IUA", 57)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acTrunkProtocolType.setStatus('current')
if mibBuilder.loadTexts: acTrunkProtocolType.setDescription('Used to set the PSTN protocol to be used for this trunk. Relevant only when TDMBusType=acFRAMERS (2). Either: NONE = 0 E1_EURO_ISDN = 1 T1_CAS = 2 T1_RAW_CAS = 3 T1_TRANSPARENT = 4 E1_TRANSPARENT_31 = 5 E1_TRANSPARENT_30 = 6 E1_MFCR2 = 7 E1_CAS = 8 E1_RAW_CAS = 9 T1_NI2_ISDN = 10 T1_4ESS_ISDN = 11 T1_5ESS_9_ISDN = 12 T1_5ESS_10_ISDN = 13 T1_DMS100_ISDN = 14 J1_TRANSPARENT = 15 T1_NTT_ISDN = 16 E1_AUSTEL_ISDN = 17 E1_HKT_ISDN = 18 E1_KOR_ISDN = 19 T1_HKT_ISDN = 20 E1_QSIG = 21 E1_TNZ_ISDN = 22 T1_QSIG = 23 T1_IUA = 28 E1_IUA = 29 E1_FRENCH_VN6_ISDN = 30 E1_FRENCH_VN3_ISDN = 31 T1_EURO_ISDN = 34 T1_DMS100_MERIDIAN_ISDN = 35 T1_NI1_ISDN = 36 E1_DUA = 37 E1_Q931_PACKETS = 38 T1_Q931_PACKETS = 39 E1_NI2_ISDN = 40 E1-CAS-R15 = 41 V5 = 43 BRI-EURO-ISDN = 50 BRI-NI-2 = 51 BRI-DMS100 = 52 BRI-5ESS = 53 BRI-QSIG = 54 BRI-VNG = 55 BRI-NTT = 56 BRI-IUA = 57. . Access: Online. AC INI-Param: PROTOCOLTYPE')
acTrunkClockMaster = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("acCLOCK-MASTER-OFF", 0), ("acCLOCK-MASTER-ON", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acTrunkClockMaster.setStatus('current')
if mibBuilder.loadTexts: acTrunkClockMaster.setDescription('Used to select the trunk clock source. 0 = acCLOCK_MASTER_OFF (clock recovered from the line) 1 = acCLOCK_MASTER_ON (the trunk clock source is provided by the internal/TDM bus clock source depending on the parameter TDM Bus Clock Source). Access: Online. AC INI-Param: CLOCKMASTER')
acTrunkFramingMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 1, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("eXTENDED-SUPER-FRAME", 0), ("sUPER-FRAME", 1), ("e1-FRAMING-DDF", 2), ("e1-FRAMING-MFF-CRC4", 3), ("e1-FRAMING-MFF-CRC4-EXT", 4), ("t1-FRAMING-F4", 6), ("t1-FRAMING-F12", 7), ("t1-FRAMING-ESF", 8), ("t1-FRAMING-ESF-CRC6", 9), ("t1-FRAMING-F72", 10), ("t1-FRAMING-ESF-CRC6-JT", 11)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acTrunkFramingMethod.setStatus('current')
if mibBuilder.loadTexts: acTrunkFramingMethod.setDescription('Selects the Framing method to be used for this trunk. Access: Online. AC INI-Param: N/A')
acTrunkLineCode = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("acB8ZS", 0), ("acAMI", 1), ("acHDB3", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acTrunkLineCode.setStatus('current')
if mibBuilder.loadTexts: acTrunkLineCode.setDescription('Use to select line code. B8ZS or AMI for T1 spans and HDB3 or AMI for E1 spans. 0 = Use B8ZS line code (for T1 trunks only = default) 1 = Use AMI line code (for T1 or E1 trunks) 2 = Use HDB3 line code (for E1 trunks only). Access: Online. AC INI-Param: LINECODE')
acTrunkTraceLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 1, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 15))).clone(namedValues=NamedValues(("acNO-TRACE", 0), ("acFULL-ISDN-TRACE", 1), ("acLAYER3-ISDN-TRACE", 2), ("acONLY-ISDN-Q931-MSGS-TRACE", 3), ("acLAYER3-ISDN-TRACE-NO-DUPLICATION", 4), ("acFULL-ISDN-TRACE-WITH-DUPLICATION", 5), ("acISDN-Q931-RAW-DATA-TRACE", 6), ("acISDN-Q921-RAW-DATA-TRACE", 7), ("acISDN-Q931-Q921-RAW-DATA-TRACE", 8), ("acSS7-MTP2", 10), ("acSS7-MTP2-AND-APPLI", 11), ("acSS7-MTP2-SL-L3-NO-MSU", 12), ("acSS7-AAL", 15)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acTrunkTraceLevel.setStatus('current')
if mibBuilder.loadTexts: acTrunkTraceLevel.setDescription('Defines the Trace level: acNO_TRACE = 0 acFULL_ISDN_TRACE = 1 acLAYER3_ISDN_TRACE = 2 acONLY_ISDN_Q931_MSGS_TRACE = 3 acLAYER3_ISDN_TRACE_NO_DUPLICATION = 4 acFULL_ISDN_TRACE_WITH_DUPLICATION = 5 acISDN_Q931_RAW_DATA_TRACE = 6 acISDN_Q921_RAW_DATA_TRACE = 7 acISDN_Q931_Q921_RAW_DATA_TRACE = 8 acSS7_MTP2 = 10 acSS7_MTP2_AND_APPLI = 11 acSS7_MTP2_SL_L3_NO_MSU = 12 acSS7_AAL = 15. Access: Online. AC INI-Param: TRACELEVEL')
acTrunkDialPlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 1, 1, 1, 1, 8), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acTrunkDialPlanName.setStatus('current')
if mibBuilder.loadTexts: acTrunkDialPlanName.setDescription('Sets the Dial Plan name that will be used on the specific trunk. Range = string 11 characters. Access: Instant. AC INI-Param: CasTrunkDialPlanName')
acTrunkLineType = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 1, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(10, 11, 12, 21))).clone(namedValues=NamedValues(("lineTypeE1", 10), ("lineTypeT1", 11), ("lineTypeBRI", 12), ("lineTypeUnknown", 21)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acTrunkLineType.setStatus('current')
if mibBuilder.loadTexts: acTrunkLineType.setDescription('Line type. lineTypeBRI(12) - If the physical type is BRI. lineTypeE1(10)/lineTypeT1(11) - For non BRI IF when there are other lines that are already configured to either E1 or T1. lineTypeUnknown(-1) - For non BRI IF when no lines are configured. AC INI-Param: N/A')
acTrunkAutoClockPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 1, 1, 1, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acTrunkAutoClockPriority.setStatus('current')
if mibBuilder.loadTexts: acTrunkAutoClockPriority.setDescription('Defines the trunk priority for auto-clock fallback (Priority range: 0 - 100 (0 - 99 are priority settings, in which 0 = highest Priority and is the default setting 100 = Do not choose this trunk). Access: Online. AC INI-Param: AutoClockTrunkPriority')
acTrunkDeactivate = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 1, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notAvailable", 0), ("deActivated", 1), ("activated", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acTrunkDeactivate.setStatus('current')
if mibBuilder.loadTexts: acTrunkDeactivate.setDescription("Deactivating a trunk forces AIS alarm on that trunk. Deactivation is used for trunk maintenance without locking the trunk. Activating the trunk will stop the alarm on the trunk. notAvailable(0) appears when the trunk is locked. The trunk can't be SET to this state. Access: Online. AC INI-Param: N/A")
acTrunkLine = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 1, 2))
acTrunkLineTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 1, 2, 1), )
if mibBuilder.loadTexts: acTrunkLineTable.setStatus('current')
if mibBuilder.loadTexts: acTrunkLineTable.setDescription('')
acTrunkLineEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 1, 2, 1, 1), ).setIndexNames((0, "AC-PSTN-MIB", "acTrunkIndex"))
if mibBuilder.loadTexts: acTrunkLineEntry.setStatus('current')
if mibBuilder.loadTexts: acTrunkLineEntry.setDescription('')
acTrunkLineBuildOutLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("ac0DB", 0), ("ac7-5DB", 1), ("ac15DB", 2), ("ac22-5DB", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acTrunkLineBuildOutLoss.setStatus('current')
if mibBuilder.loadTexts: acTrunkLineBuildOutLoss.setDescription('Used to select the line build out loss to be used for this trunk. 0 = 0 dB 1 = 7.5 dB 2 = 15 dB 3 = 22.5 dB. Access: Online. AC INI-Param: LINEBUILDOUT.LOSS')
acTrunkLineBuildOutOverwrite = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("acNO-OVER-WRITE", 0), ("acOVER-WRITE", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acTrunkLineBuildOutOverwrite.setStatus('current')
if mibBuilder.loadTexts: acTrunkLineBuildOutOverwrite.setDescription("Used to overwrite the Framer's XPM registers values (these registers control the line pulse shape). 0 = No overwrite 1 = Overwrite. Access: Online. AC INI-Param: LINEBUILDOUT.OVERWRITE")
acTrunkLineBuildOutXPM0 = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 1, 2, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acTrunkLineBuildOutXPM0.setStatus('current')
if mibBuilder.loadTexts: acTrunkLineBuildOutXPM0.setDescription("Used to control the Framer's XPM0 register value (line pulse shape control). Applicable only when TrunkConfig.LineBuildOut.Overwrite=1. Should be used only by expert users. Range = 0 to 255. Access: Online. AC INI-Param: LINEBUILDOUT.XPM0")
acTrunkLineBuildOutXPM1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 1, 2, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acTrunkLineBuildOutXPM1.setStatus('current')
if mibBuilder.loadTexts: acTrunkLineBuildOutXPM1.setDescription("Used to control the Framer's XPM1 register value (line pulse shape control). Applicable only when TrunkConfig.LineBuildOut.Overwrite=1. Should be used only by expert users. Range = 0 to 255. Access: Online. AC INI-Param: LINEBUILDOUT.XPM1")
acTrunkLineBuildOutXPM2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 1, 2, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acTrunkLineBuildOutXPM2.setStatus('current')
if mibBuilder.loadTexts: acTrunkLineBuildOutXPM2.setDescription("Used to control the Framer's XPM2 register value (line pulse shape control). Applicable only when TrunkConfig.LineBuildOut.Overwrite=1. Should be used only by expert users. Range = 0 to 255. Access: Online. AC INI-Param: LINEBUILDOUT.XPM2")
acTrunkISDN = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 1, 3))
acTrunkISDNCommon = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 1, 3, 1))
acTrunkISDNCommonTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 1, 3, 1, 1), )
if mibBuilder.loadTexts: acTrunkISDNCommonTable.setStatus('current')
if mibBuilder.loadTexts: acTrunkISDNCommonTable.setDescription('')
acTrunkISDNCommonEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 1, 3, 1, 1, 1), ).setIndexNames((0, "AC-PSTN-MIB", "acTrunkIndex"))
if mibBuilder.loadTexts: acTrunkISDNCommonEntry.setStatus('current')
if mibBuilder.loadTexts: acTrunkISDNCommonEntry.setDescription('')
acTrunkISDNCommonTerminationSide = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 1, 3, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("acUSER-TERMINATION-SIDE", 0), ("acNETWORK-TERMINATION-SIDE", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acTrunkISDNCommonTerminationSide.setStatus('current')
if mibBuilder.loadTexts: acTrunkISDNCommonTerminationSide.setDescription('Used to set the ISDN Termination to either User or Network. Termination = For ISDN only. User side = 0 Network side = 1. Access: Online. AC INI-Param: TERMINATIONSIDE')
acTrunkISDNCommonQ931LayerResponseBehavior = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 1, 3, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483647, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acTrunkISDNCommonQ931LayerResponseBehavior.setStatus('current')
if mibBuilder.loadTexts: acTrunkISDNCommonQ931LayerResponseBehavior.setDescription('Bit-field used to determine several behavior options, which influence how the Q.931 protocol behaves. Access: Online. AC INI-Param: ISDNIBEHAVIOR')
acTrunkISDNCommonIncomingCallsBehavior = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 1, 3, 1, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acTrunkISDNCommonIncomingCallsBehavior.setStatus('current')
if mibBuilder.loadTexts: acTrunkISDNCommonIncomingCallsBehavior.setDescription("This is the bit-field used to determine several behavior options that influence how the ISDN Stack INCOMING calls behave. Refer to the Appendix A.8 'ISDN Flexible Behavior' in the VoPLib Reference Library User's Manual Document #: LTRT-00740. Access: Online. AC INI-Param: ISDNINCALLSBEHAVIOR")
acTrunkISDNCommonOutgoingCallsBehavior = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 1, 3, 1, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acTrunkISDNCommonOutgoingCallsBehavior.setStatus('current')
if mibBuilder.loadTexts: acTrunkISDNCommonOutgoingCallsBehavior.setDescription("This is the bit-field used to determine several behavior options that influence how the ISDN Stack OUTGOING calls behave. Refer to Appendix A.8 in the 'VoPLib Reference Library User's Manual. Access: Online. AC INI-Param: ISDNOUTCALLSBEHAVIOR")
acTrunkISDNCommonGeneralCCBehavior = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 1, 3, 1, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acTrunkISDNCommonGeneralCCBehavior.setStatus('current')
if mibBuilder.loadTexts: acTrunkISDNCommonGeneralCCBehavior.setDescription("This is the bit-field used to determine several general ISDN behavior options. Refer to the Appendix A.8 'ISDN Flexible Behavior' in the VoPLib Reference Library User's Manual Document #: LTRT-00740. Access: Online. AC INI-Param: ISDNGENERALCCBEHAVIOR")
acTrunkISDNCommonIuaInterfaceId = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 1, 3, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acTrunkISDNCommonIuaInterfaceId.setStatus('current')
if mibBuilder.loadTexts: acTrunkISDNCommonIuaInterfaceId.setDescription('Defines the IUA trunk interface ID value - unsigned integer - in RFC 3057 - SIGTRAN. Default = 0xFFFFFFFF. AC INI-Param: N/A')
acTrunkISDNCommonDuplicateQ931BuffMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 1, 3, 1, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acTrunkISDNCommonDuplicateQ931BuffMode.setStatus('current')
if mibBuilder.loadTexts: acTrunkISDNCommonDuplicateQ931BuffMode.setDescription("Activates / de-activates delivery of raw Q.931 messages. Refer to the VoPLib documentation ('ISDN Flexible Behavior'). Access: Online. AC INI-Param: ISDNDUPLICATEQ931BUFFMODE")
acTrunkISDNCommonBRILayer2Mode = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 1, 3, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("bRI-L2-MODE-P2P", 0), ("bRI-L2-MODE-P2MP", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acTrunkISDNCommonBRILayer2Mode.setStatus('current')
if mibBuilder.loadTexts: acTrunkISDNCommonBRILayer2Mode.setDescription('Indicates point to point or point to Multipoint mode for layer2. Applicable in BRI trunks only. One of the following values: Point to point = 0 Point to Multipoint = 1 . Access: Online. AC INI-Param: BriLayer2Mode')
acTrunkISDNNfas = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 1, 3, 2))
acTrunkISDNNfasTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 1, 3, 2, 1), )
if mibBuilder.loadTexts: acTrunkISDNNfasTable.setStatus('current')
if mibBuilder.loadTexts: acTrunkISDNNfasTable.setDescription('')
acTrunkISDNNfasEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 1, 3, 2, 1, 1), ).setIndexNames((0, "AC-PSTN-MIB", "acTrunkIndex"))
if mibBuilder.loadTexts: acTrunkISDNNfasEntry.setStatus('current')
if mibBuilder.loadTexts: acTrunkISDNNfasEntry.setDescription('')
acTrunkISDNNfasDchConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 1, 3, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("acDCH-CONFIG-PRIMARY", 0), ("acDCH-CONFIG-BACKUP", 1), ("acDCH-CONFIG-NFAS", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acTrunkISDNNfasDchConfig.setStatus('current')
if mibBuilder.loadTexts: acTrunkISDNNfasDchConfig.setDescription('Defines D-channel configuration. This setting is only applicable to ISDN PRI protocols that support NFAS and/or D-channel backup procedures. 0 = D-channel is Primary 1 = Backup 2 = NFAS. Access: Online. AC INI-Param: DCHCONFIG')
acTrunkISDNNfasInterfaceId = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 1, 3, 2, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acTrunkISDNNfasInterfaceId.setStatus('current')
if mibBuilder.loadTexts: acTrunkISDNNfasInterfaceId.setDescription('Defines the Interface ID. Works with NS_EXPLICIT_INTERFACE_ID. Refer to the VoPLib documentation(ISDN Flexible Behavior). Default = (unsigned char)-1. Range = 0 to 255. Access: Online. AC INI-Param: ISDNNFASINTERFACEID')
acTrunkISDNNfasGroupNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 1, 3, 2, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 9))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acTrunkISDNNfasGroupNumber.setStatus('current')
if mibBuilder.loadTexts: acTrunkISDNNfasGroupNumber.setDescription('Relevant only for T1 ISDN NFAS trunks indicates the group number of the NFAS group. ;Valid NFAS group numbers are only 1 to 9, 0 indicating that this trunk is not NFAS (in this case the ISDNNFASInterfaceID and DchConfig parameters are ignored). Access: Online. AC INI-Param: NFASGROUPNUMBER')
acTrunkISDNDpnss = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 1, 3, 3))
acTrunkISDNDpnssTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 1, 3, 3, 1), )
if mibBuilder.loadTexts: acTrunkISDNDpnssTable.setStatus('current')
if mibBuilder.loadTexts: acTrunkISDNDpnssTable.setDescription('')
acTrunkISDNDpnssEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 1, 3, 3, 1, 1), ).setIndexNames((0, "AC-PSTN-MIB", "acTrunkIndex"))
if mibBuilder.loadTexts: acTrunkISDNDpnssEntry.setStatus('current')
if mibBuilder.loadTexts: acTrunkISDNDpnssEntry.setDescription('')
acTrunkISDNDpnssBehavior = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 1, 3, 3, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acTrunkISDNDpnssBehavior.setStatus('current')
if mibBuilder.loadTexts: acTrunkISDNDpnssBehavior.setDescription('The DPNSSBehaviour parameter represents a Bit field parameter. Each bit represents a specific type of DPNSS behavior. Currently only the first 2 bits are in use. - DPNSS_BEHAV_STOP_SABMR_AFTER_NL_AND_NT1 bit: (bit #0, bit mask 0x0001) When set to 1: DPNSS stops repeating SABMR after NL and NT1 limits are exceeded. When set to 0: DPNSS continues repeating SABMR after NL and NT1 limits are exceeded. Default is 0 (continue repeating SABMR) - DPNSS_BEHAV_FULL_STARTUP_SUCCESS bit: (bit #1, bit mask 0x0002) When set to 1: the Startup Procedure is considered as a SUCCESS only when ALL DLCs succeeded to Reset When set to 0: the Startup Procedure is considered as a SUCCESS as soon as 1 DLC succeeded to Reset Default is 0: (only partial reset is considered as a success). . Access: Online. AC INI-Param: DPNSSBehavior')
acTrunkISDNDpnssNumRealChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 1, 3, 3, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acTrunkISDNDpnssNumRealChannels.setStatus('current')
if mibBuilder.loadTexts: acTrunkISDNDpnssNumRealChannels.setDescription('This parameter is relevant only to protocol ISDN DPNSS. Defines the number of real channels. Default value is 30. Valid range 1 to 30. Access: Online. AC INI-Param: DPNSSNumRealChannels')
acTrunkISDNDpnssNumVirtualChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 1, 3, 3, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acTrunkISDNDpnssNumVirtualChannels.setStatus('current')
if mibBuilder.loadTexts: acTrunkISDNDpnssNumVirtualChannels.setDescription('This parameter is relevant only to protocol ISDN DPNSS. Defines the number of virtual channels. Default value is 30. Valid range 0 to 30. Access: Online. AC INI-Param: DPNSSNumVirtualChannels')
acTrunkCAS = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 1, 4))
acTrunkCASTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 1, 4, 1), )
if mibBuilder.loadTexts: acTrunkCASTable.setStatus('current')
if mibBuilder.loadTexts: acTrunkCASTable.setDescription('')
acTrunkCASEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 1, 4, 1, 1), ).setIndexNames((0, "AC-PSTN-MIB", "acTrunkIndex"))
if mibBuilder.loadTexts: acTrunkCASEntry.setStatus('current')
if mibBuilder.loadTexts: acTrunkCASEntry.setDescription('')
acTrunkCASTablesIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 1, 4, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acTrunkCASTablesIndex.setStatus('current')
if mibBuilder.loadTexts: acTrunkCASTablesIndex.setDescription('This parameter determines which CAS protocol file to use on a specific trunk. The index value corresponds to the number configured for the parameter CASFileName_X. Range = not greater than the parameter defining the PSTN CAS Table Num. Access: Online. AC INI-Param: CASTABLEINDEX')
acTrunkCASTablePerChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 1, 4, 1, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acTrunkCASTablePerChannel.setStatus('current')
if mibBuilder.loadTexts: acTrunkCASTablePerChannel.setDescription("Sets the Cas protocol table index per channel. User need to set each channel the table number 0-7, with comma saperator between channels: '1,3,1,3,1,3..'. Access: Online. AC INI-Param: CasChannelIndex")
acTrunkV5 = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 1, 5))
acTrunkV5Table = MibTable((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 1, 5, 1), )
if mibBuilder.loadTexts: acTrunkV5Table.setStatus('current')
if mibBuilder.loadTexts: acTrunkV5Table.setDescription('')
acTrunkV5Entry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 1, 5, 1, 1), ).setIndexNames((0, "AC-PSTN-MIB", "acTrunkIndex"))
if mibBuilder.loadTexts: acTrunkV5Entry.setStatus('current')
if mibBuilder.loadTexts: acTrunkV5Entry.setDescription('')
acTrunkV5NumberOfCChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 1, 5, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acTrunkV5NumberOfCChannels.setStatus('current')
if mibBuilder.loadTexts: acTrunkV5NumberOfCChannels.setDescription('Indicates the number of timeslots used as communication channels in a V5 trunk. 0 - No C-channel, the trunk is voice only. 1 - Timeslot 16 is used for the V5 signaling . Access: Online. AC INI-Param: V5NumberOfCChannels')
acTrunkV5ProtocolSide = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 1, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("an-Side", 0), ("le-Side", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acTrunkV5ProtocolSide.setStatus('current')
if mibBuilder.loadTexts: acTrunkV5ProtocolSide.setDescription('Indicates the V5 side of the V5 protocol served by the trunk.. 0 - AN side. 1 - LE side . Access: Online. AC INI-Param: V5ProtocolSide')
acTrunkGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 1, 8))
acTrunkGlobalLifeLineType = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 1, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("hW-Only", 0), ("hW-And-Link-Detection", 1), ("hW-And-Link-And-Network-Detection", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acTrunkGlobalLifeLineType.setStatus('current')
if mibBuilder.loadTexts: acTrunkGlobalLifeLineType.setDescription('This parameter is used to define the type of trunk lifeline. Short trunks 1-2, 3-4. 0 = Activate lifeline on power down 1 = Activate lifeline on power down or on detection of LAN disconnect 2 = Activate lifeline on power down or on detection of LAN disconnect or loss of ping. Access: Offline. AC INI-Param: TrunkLifeLineType')
acISDNConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 2))
acMiscISDN = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 2, 1))
acMiscISDNQ931RelayMode = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 3))).clone(namedValues=NamedValues(("none", 0), ("activateLAPDmessaging", 1), ("layer3-IS-IUA", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acMiscISDNQ931RelayMode.setStatus('current')
if mibBuilder.loadTexts: acMiscISDNQ931RelayMode.setDescription('Activates / de-activates the ISDN level 3 Q.931 Relay Mode. Choose 0 or ActivateLAPDmessaging or Q931_RELAY_TO_HOST or Layer3_IS_IUA. Access: Offline. AC INI-Param: Q931RELAYMODE')
acMiscISDNDuplicateQ931BuffMode = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 2, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acMiscISDNDuplicateQ931BuffMode.setStatus('obsolete')
if mibBuilder.loadTexts: acMiscISDNDuplicateQ931BuffMode.setDescription(' Access: Offline. AC INI-Param: ISDNDUPLICATEQ931BUFFMODE')
acDS3Config = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 3))
acDS3ConfigFramingMethod = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("dS3-M23", 0), ("dS3-C-BIT-PARITY", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDS3ConfigFramingMethod.setStatus('obsolete')
if mibBuilder.loadTexts: acDS3ConfigFramingMethod.setDescription('Used to select the physical DS3 framing method to be used in this board. 0 = M23 framing 1 = C Bit Parity. Access: Offline. AC INI-Param: DS3FRAMINGMETHOD')
acDS3ConfigClockSource = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("acClock-Source-External", 0), ("acClock-Source-Local-Board", 1), ("acClock-Source-Local-PLL", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDS3ConfigClockSource.setStatus('obsolete')
if mibBuilder.loadTexts: acDS3ConfigClockSource.setDescription("Selects the physical DS3 framing method to be used in this board. Applicable only to the TP-2810. 0 = DS3 Clock is recovered from the line 1 = DS3 trunk clock source is provided by the board's internal clock 2 = Clock is taken from the local PLL which is not synchronized with any other clock. Access: Offline. AC INI-Param: DS3CLOCKSOURCE")
acDS3ConfigLineBuiltOut = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("acLINE-BUILT-OUT-LEVEL-1", 0), ("acLINE-BUILT-OUT-LEVEL-2", 1), ("acLINE-BUILT-OUT-LEVEL-3", 2), ("acLINE-BUILT-OUT-LEVEL-4", 3), ("acLINE-BUILT-OUT-LEVEL-5", 4), ("acLINE-BUILT-OUT-LEVEL-6", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDS3ConfigLineBuiltOut.setStatus('obsolete')
if mibBuilder.loadTexts: acDS3ConfigLineBuiltOut.setDescription('Used to select the DS3 line build out. Applies only to the TP-2810. Access: Offline. AC INI-Param: DS3LINEBUILTOUT')
acCasConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 4))
acCasConfigEnable = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acCasConfigEnable.setStatus('current')
if mibBuilder.loadTexts: acCasConfigEnable.setDescription("This parameter enables or disables the possibility CAS protocol configuration. At TP6310 When this parameter is enable the conference will disabled in case it's relevant. 0 = Disable 1 = Enable. Access: Offline. AC INI-Param: CASProtocolEnable")
acCASFile = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 4, 2))
acCASFileTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 4, 2, 1), )
if mibBuilder.loadTexts: acCASFileTable.setStatus('current')
if mibBuilder.loadTexts: acCASFileTable.setDescription('')
acCASFileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 4, 2, 1, 1), ).setIndexNames((0, "AC-PSTN-MIB", "acCASFileIndex"))
if mibBuilder.loadTexts: acCASFileEntry.setStatus('current')
if mibBuilder.loadTexts: acCASFileEntry.setDescription('')
acCASFileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 4, 2, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acCASFileIndex.setStatus('current')
if mibBuilder.loadTexts: acCASFileIndex.setDescription('Cas Table Indexd. AC INI-Param: N/A')
acCASFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 4, 2, 1, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acCASFileName.setStatus('current')
if mibBuilder.loadTexts: acCASFileName.setDescription('This is a pointer to the CAS filename index (0-7). The index is CASFileName_X. CASFileName_0 through to CASFileName_7 are the path and names of the CAS protocol configuration files. AC INI-Param: CASFILENAME')
acSonetSDH = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 5))
acSonetSDHTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 5, 1), )
if mibBuilder.loadTexts: acSonetSDHTable.setStatus('current')
if mibBuilder.loadTexts: acSonetSDHTable.setDescription('')
acSonetSDHEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 5, 1, 1), ).setIndexNames((0, "AC-PSTN-MIB", "acSonetSDHIndex"))
if mibBuilder.loadTexts: acSonetSDHEntry.setStatus('current')
if mibBuilder.loadTexts: acSonetSDHEntry.setDescription('')
acSonetSDHIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 5, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1)))
if mibBuilder.loadTexts: acSonetSDHIndex.setStatus('current')
if mibBuilder.loadTexts: acSonetSDHIndex.setDescription('Fiber groupe index. AC INI-Param: N/A')
acSonetSDHFbrGrpMappingType = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 3, 15))).clone(namedValues=NamedValues(("asynchronousVT15andDS1", 0), ("asynchronousTU12andE1", 1), ("sTS1asynchronousDS3", 3), ("undefined", 15)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetSDHFbrGrpMappingType.setStatus('current')
if mibBuilder.loadTexts: acSonetSDHFbrGrpMappingType.setDescription('Selects SDH/SONET mapping type (signal label + payload mapping type) for the PSTN interface. Generally per Fiber Group. Single Fiber Group supported in the PSTN interface of TP6310 and TP12610. Applicable only to the TP-6310 and TP-12610. Relevant only when acSysTDMBusType = acFRAMERS (2). 0 = Asynchronous VT1.5 and DS1 1 = Asynchronous TU12 and E1 3 = Asynchronous mapping of DS3 in STS1, DS3 channelized to DS1s 15 = Undefined Should be in coordination with other parameters as follows: - sonetMediumType - acTrunkProtocolType. Access: Offline. AC INI-Param: SDHFbrGrp_Mapping_Type')
acSonetSDHFbrGrpKlmNumberingScheme = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("numberingScheme-MLK", 0), ("numberingScheme-LMK", 1), ("numberingScheme-KLM", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetSDHFbrGrpKlmNumberingScheme.setStatus('current')
if mibBuilder.loadTexts: acSonetSDHFbrGrpKlmNumberingScheme.setDescription('Provides VC/VT numbering scheme for STM-1/OC3 fiber group. Access: Offline. AC INI-Param: SDHFbrGrp_KLM_Numbering_Scheme')
acSonetSDHFbrGrpAPSDirectionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("unidirectional", 0), ("bidirectional", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetSDHFbrGrpAPSDirectionMode.setStatus('current')
if mibBuilder.loadTexts: acSonetSDHFbrGrpAPSDirectionMode.setDescription('Sets the Automatic Protection Switch Unidir/Bidir mode for the Fiber Group. Access: Offline. AC INI-Param: SDHFbrGrp_APS_DirMode')
acSonetSDHFbrGrpAPSRevertMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("nonRevertive", 0), ("revertive", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetSDHFbrGrpAPSRevertMode.setStatus('current')
if mibBuilder.loadTexts: acSonetSDHFbrGrpAPSRevertMode.setDescription('Sets the Automatic Protection Switch Revertive mode for the Fiber Group. Access: Offline. AC INI-Param: SDHFbrGrp_APS_RevertMode')
acSonetSDHFbrGrpAPSWaitToRestoreTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 5, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(5, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetSDHFbrGrpAPSWaitToRestoreTime.setStatus('current')
if mibBuilder.loadTexts: acSonetSDHFbrGrpAPSWaitToRestoreTime.setDescription('Sets the APS Wait-to-restore time for the Fiber Group. Access: Offline. AC INI-Param: SDHFbrGrp_APS_WTR')
acPSTNStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 2))
acTrunkStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 2, 1))
acTrunkStatusTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 2, 1, 1), )
if mibBuilder.loadTexts: acTrunkStatusTable.setStatus('current')
if mibBuilder.loadTexts: acTrunkStatusTable.setDescription('')
acTrunkStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 2, 1, 1, 1), ).setIndexNames((0, "AC-PSTN-MIB", "acTrunkIndex"))
if mibBuilder.loadTexts: acTrunkStatusEntry.setStatus('current')
if mibBuilder.loadTexts: acTrunkStatusEntry.setDescription('')
acTrunkStatusLedStatusColor = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 2, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("off", 0), ("red", 1), ("green", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acTrunkStatusLedStatusColor.setStatus('current')
if mibBuilder.loadTexts: acTrunkStatusLedStatusColor.setDescription('Trunk led status color. AC INI-Param: N/A')
acTrunkStatusLedStatusState = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 2, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("steady", 0), ("blink", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acTrunkStatusLedStatusState.setStatus('current')
if mibBuilder.loadTexts: acTrunkStatusLedStatusState.setDescription('Trunk led status blinking rate. AC INI-Param: N/A')
acTrunkStatusChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 2, 1, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acTrunkStatusChannels.setStatus('current')
if mibBuilder.loadTexts: acTrunkStatusChannels.setDescription("Reperesents Trunk's Channels-Status. Each nibble (half Byte) presents one channel status, as following: 1 - invalid B-Channel. 2 - None. 3 - Open. 4 - Media. 5 - SS7. 6 - HDLC. 7 - DPNSS. 8 - CAS. AC INI-Param: N/A")
acTrunkStatusV5InterfaceNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 2, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acTrunkStatusV5InterfaceNum.setStatus('current')
if mibBuilder.loadTexts: acTrunkStatusV5InterfaceNum.setDescription('V5.2 interface containing this trunk. -1 means information not available or not relevant. AC INI-Param: N/A')
acTrunkStatusV5LinkID = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 2, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 62))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acTrunkStatusV5LinkID.setStatus('current')
if mibBuilder.loadTexts: acTrunkStatusV5LinkID.setDescription('V5.2 link containing this trunk. -1 means information not available or not relevant. AC INI-Param: N/A')
acTrunkStatusDChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 2, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 10))).clone(namedValues=NamedValues(("dChannelEstablished", 0), ("dChannelNotEstablished", 1), ("dChannelNotApplicable", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acTrunkStatusDChannel.setStatus('current')
if mibBuilder.loadTexts: acTrunkStatusDChannel.setDescription("Describes the trunk's D channel status. 0 - dChannelEstablished 1 - dChannelNotEstablished 10 - dChannelNotApplicable. AC INI-Param: N/A")
acTrunkStatusAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 2, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("greyDisabled", 0), ("greenActive", 1), ("redLosLof", 2), ("blueAis", 3), ("yellowRai", 4), ("orangeDChannel", 5), ("purpleLowerLayerDown", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acTrunkStatusAlarm.setStatus('current')
if mibBuilder.loadTexts: acTrunkStatusAlarm.setDescription("Describes the trunk's alarm status. 1 - Disabled. 2 - Active - OK. 3 - LOS/LOF Alarm. 4 - AIS Alarm. 5 - RAI Alram. 6 - D-Channel Alarm. 7 - Lower Layer Down. AC INI-Param: N/A")
acDigitalLegs = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 2, 2))
acDigitalLegsTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 2, 2, 1), )
if mibBuilder.loadTexts: acDigitalLegsTable.setStatus('current')
if mibBuilder.loadTexts: acDigitalLegsTable.setDescription('')
acDigitalLegsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 2, 2, 1, 1), ).setIndexNames((0, "AC-PSTN-MIB", "acDigitalLegsLegIndex"))
if mibBuilder.loadTexts: acDigitalLegsEntry.setStatus('current')
if mibBuilder.loadTexts: acDigitalLegsEntry.setDescription('')
acDigitalLegsLegIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 2, 2, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000)))
if mibBuilder.loadTexts: acDigitalLegsLegIndex.setStatus('current')
if mibBuilder.loadTexts: acDigitalLegsLegIndex.setDescription('Decribes The Digital EndPoint In A Call. AC INI-Param: N/A')
acDigitalLegsCallIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 2, 2, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDigitalLegsCallIndex.setStatus('current')
if mibBuilder.loadTexts: acDigitalLegsCallIndex.setDescription('Decribes The Call which The Digital EndPoint Participant In It. AC INI-Param: N/A')
acDigitalLegsTrunk = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 2, 2, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDigitalLegsTrunk.setStatus('current')
if mibBuilder.loadTexts: acDigitalLegsTrunk.setDescription('Describes the Trunk the Leg belong to. AC INI-Param: N/A')
acDigitalLegsBchannel = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 2, 2, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 76500))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDigitalLegsBchannel.setStatus('current')
if mibBuilder.loadTexts: acDigitalLegsBchannel.setDescription('Describes the Bchannel the Leg belong to. AC INI-Param: N/A')
acDigitalLegsEchoCanceller = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 2, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDigitalLegsEchoCanceller.setStatus('current')
if mibBuilder.loadTexts: acDigitalLegsEchoCanceller.setDescription('Enables or Disables the Echo Canceller. AC INI-Param: N/A')
acDigitalLegsDTMFDetection = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 2, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDigitalLegsDTMFDetection.setStatus('current')
if mibBuilder.loadTexts: acDigitalLegsDTMFDetection.setDescription('Enables or Disables the DTMF Detection. AC INI-Param: N/A')
acDigitalLegsVoiceVolume = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 2, 2, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 20000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDigitalLegsVoiceVolume.setStatus('current')
if mibBuilder.loadTexts: acDigitalLegsVoiceVolume.setDescription('Describs the volume of the voice in dB. AC INI-Param: N/A')
acDigitalLegsHighPassFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 2, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDigitalLegsHighPassFilter.setStatus('current')
if mibBuilder.loadTexts: acDigitalLegsHighPassFilter.setDescription('Enables or Disables theHigh Pass Filter. AC INI-Param: N/A')
acDigitalLegsInputGain = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 2, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDigitalLegsInputGain.setStatus('current')
if mibBuilder.loadTexts: acDigitalLegsInputGain.setDescription('Describes the Input Gain on the leg in dB. AC INI-Param: N/A')
acDigitalLegsDSPDevice = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 2, 2, 1, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 20000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDigitalLegsDSPDevice.setStatus('current')
if mibBuilder.loadTexts: acDigitalLegsDSPDevice.setDescription('describes the DSP Device the Leg connected to. AC INI-Param: N/A')
acDigitalLegsLegName = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 2, 2, 1, 1, 11), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDigitalLegsLegName.setStatus('current')
if mibBuilder.loadTexts: acDigitalLegsLegName.setDescription('Describes the Leg Name as in the Control Protocol. AC INI-Param: N/A')
acSDHKLMNumberingScheme = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 2, 3))
acSDHKLMNumberingSchemeTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 2, 3, 1), )
if mibBuilder.loadTexts: acSDHKLMNumberingSchemeTable.setStatus('current')
if mibBuilder.loadTexts: acSDHKLMNumberingSchemeTable.setDescription('')
acSDHKLMNumberingSchemeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 2, 3, 1, 1), ).setIndexNames((0, "AC-PSTN-MIB", "acSDHKLMNumberingSchemeTrunkIndex"))
if mibBuilder.loadTexts: acSDHKLMNumberingSchemeEntry.setStatus('current')
if mibBuilder.loadTexts: acSDHKLMNumberingSchemeEntry.setDescription('')
acSDHKLMNumberingSchemeTrunkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 2, 3, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000)))
if mibBuilder.loadTexts: acSDHKLMNumberingSchemeTrunkIndex.setStatus('current')
if mibBuilder.loadTexts: acSDHKLMNumberingSchemeTrunkIndex.setDescription('Trunk Number. AC INI-Param: N/A')
acSDHKLMNumberingSchemeTUG3OrSTS1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 2, 3, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSDHKLMNumberingSchemeTUG3OrSTS1.setStatus('current')
if mibBuilder.loadTexts: acSDHKLMNumberingSchemeTUG3OrSTS1.setDescription(' AC INI-Param: N/A')
acSDHKLMNumberingSchemeTUG2OrVTG = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 2, 3, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSDHKLMNumberingSchemeTUG2OrVTG.setStatus('current')
if mibBuilder.loadTexts: acSDHKLMNumberingSchemeTUG2OrVTG.setDescription(' AC INI-Param: N/A')
acSDHKLMNumberingSchemeTU12OrVT15 = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 2, 3, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSDHKLMNumberingSchemeTU12OrVT15.setStatus('current')
if mibBuilder.loadTexts: acSDHKLMNumberingSchemeTU12OrVT15.setDescription(' AC INI-Param: N/A')
acFiberGroupStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 2, 4))
acFiberGroupStatusActiveLink = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 2, 4, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acFiberGroupStatusActiveLink.setStatus('current')
if mibBuilder.loadTexts: acFiberGroupStatusActiveLink.setDescription('Fiber group active link number. 0 - there is no active fiber group link. AC INI-Param: N/A')
mibBuilder.exportSymbols("AC-PSTN-MIB", acSonetSDHEntry=acSonetSDHEntry, acDigitalLegsBchannel=acDigitalLegsBchannel, acDigitalLegsTable=acDigitalLegsTable, acSonetSDHTable=acSonetSDHTable, acSDHKLMNumberingSchemeTrunkIndex=acSDHKLMNumberingSchemeTrunkIndex, acPSTN=acPSTN, acCasConfigEnable=acCasConfigEnable, acTrunkGlobalLifeLineType=acTrunkGlobalLifeLineType, acTrunkISDNDpnssBehavior=acTrunkISDNDpnssBehavior, acDigitalLegsTrunk=acDigitalLegsTrunk, acTrunkISDNNfasInterfaceId=acTrunkISDNNfasInterfaceId, acTrunkStatusLedStatusColor=acTrunkStatusLedStatusColor, acTrunkDeactivate=acTrunkDeactivate, acDigitalLegsCallIndex=acDigitalLegsCallIndex, acDigitalLegsInputGain=acDigitalLegsInputGain, acTrunkISDNCommonOutgoingCallsBehavior=acTrunkISDNCommonOutgoingCallsBehavior, acTrunkEntry=acTrunkEntry, acTrunkCASTable=acTrunkCASTable, acDS3Config=acDS3Config, acTrunkISDNDpnssTable=acTrunkISDNDpnssTable, acSonetSDHFbrGrpAPSRevertMode=acSonetSDHFbrGrpAPSRevertMode, acTrunkISDN=acTrunkISDN, acTrunkV5Table=acTrunkV5Table, acTrunkCASTablesIndex=acTrunkCASTablesIndex, acTrunkISDNNfas=acTrunkISDNNfas, acTrunkDialPlanName=acTrunkDialPlanName, acTrunkISDNCommonTerminationSide=acTrunkISDNCommonTerminationSide, acTrunkLineEntry=acTrunkLineEntry, acSDHKLMNumberingSchemeEntry=acSDHKLMNumberingSchemeEntry, acTrunkISDNNfasGroupNumber=acTrunkISDNNfasGroupNumber, acCASFileIndex=acCASFileIndex, acTrunkStatusDChannel=acTrunkStatusDChannel, acTrunkLineType=acTrunkLineType, acMiscISDN=acMiscISDN, acDigitalLegsHighPassFilter=acDigitalLegsHighPassFilter, acTrunkConfig=acTrunkConfig, acTrunkStatusEntry=acTrunkStatusEntry, acTrunkLineCode=acTrunkLineCode, acTrunkISDNDpnssNumVirtualChannels=acTrunkISDNDpnssNumVirtualChannels, acTrunkV5=acTrunkV5, acTrunkISDNCommonTable=acTrunkISDNCommonTable, acTrunkISDNNfasDchConfig=acTrunkISDNNfasDchConfig, acPSTNStatus=acPSTNStatus, acDS3ConfigFramingMethod=acDS3ConfigFramingMethod, acTrunkStatusTable=acTrunkStatusTable, PYSNMP_MODULE_ID=acPSTN, acFiberGroupStatusActiveLink=acFiberGroupStatusActiveLink, acTrunkISDNCommonGeneralCCBehavior=acTrunkISDNCommonGeneralCCBehavior, acMiscISDNDuplicateQ931BuffMode=acMiscISDNDuplicateQ931BuffMode, acTrunkISDNNfasTable=acTrunkISDNNfasTable, acTrunkStatusLedStatusState=acTrunkStatusLedStatusState, acTrunkGlobal=acTrunkGlobal, acTrunkISDNDpnssEntry=acTrunkISDNDpnssEntry, acSonetSDHFbrGrpMappingType=acSonetSDHFbrGrpMappingType, acTrunkClockMaster=acTrunkClockMaster, acDigitalLegsEntry=acDigitalLegsEntry, acTrunkLineBuildOutXPM0=acTrunkLineBuildOutXPM0, acTrunkISDNCommon=acTrunkISDNCommon, acTrunkLine=acTrunkLine, acTrunkV5Entry=acTrunkV5Entry, acDigitalLegsVoiceVolume=acDigitalLegsVoiceVolume, acTrunkISDNCommonDuplicateQ931BuffMode=acTrunkISDNCommonDuplicateQ931BuffMode, acSDHKLMNumberingSchemeTU12OrVT15=acSDHKLMNumberingSchemeTU12OrVT15, acSDHKLMNumberingSchemeTUG2OrVTG=acSDHKLMNumberingSchemeTUG2OrVTG, acTrunkV5NumberOfCChannels=acTrunkV5NumberOfCChannels, acCASFileTable=acCASFileTable, acTrunk=acTrunk, acCASFile=acCASFile, acTrunkCAS=acTrunkCAS, acSonetSDHFbrGrpAPSWaitToRestoreTime=acSonetSDHFbrGrpAPSWaitToRestoreTime, acDigitalLegsDSPDevice=acDigitalLegsDSPDevice, acTrunkISDNDpnssNumRealChannels=acTrunkISDNDpnssNumRealChannels, acISDNConfig=acISDNConfig, acTrunkProtocolType=acTrunkProtocolType, acTrunkStatusV5LinkID=acTrunkStatusV5LinkID, acFiberGroupStatus=acFiberGroupStatus, acMiscISDNQ931RelayMode=acMiscISDNQ931RelayMode, acDigitalLegsDTMFDetection=acDigitalLegsDTMFDetection, acTrunkISDNDpnss=acTrunkISDNDpnss, acDS3ConfigLineBuiltOut=acDS3ConfigLineBuiltOut, acTrunkISDNCommonQ931LayerResponseBehavior=acTrunkISDNCommonQ931LayerResponseBehavior, acDigitalLegsLegName=acDigitalLegsLegName, acDigitalLegsLegIndex=acDigitalLegsLegIndex, acSDHKLMNumberingSchemeTable=acSDHKLMNumberingSchemeTable, acTrunkLineBuildOutLoss=acTrunkLineBuildOutLoss, acTrunkTable=acTrunkTable, acTrunkISDNCommonIuaInterfaceId=acTrunkISDNCommonIuaInterfaceId, acPSTNConfiguration=acPSTNConfiguration, acCasConfig=acCasConfig, acTrunkISDNCommonBRILayer2Mode=acTrunkISDNCommonBRILayer2Mode, acTrunkCASTablePerChannel=acTrunkCASTablePerChannel, acTrunkStatusChannels=acTrunkStatusChannels, acSonetSDHIndex=acSonetSDHIndex, acTrunkTraceLevel=acTrunkTraceLevel, acTrunkFramingMethod=acTrunkFramingMethod, acTrunkLineBuildOutXPM2=acTrunkLineBuildOutXPM2, acTrunkLineBuildOutXPM1=acTrunkLineBuildOutXPM1, acSonetSDHFbrGrpAPSDirectionMode=acSonetSDHFbrGrpAPSDirectionMode, acDS3ConfigClockSource=acDS3ConfigClockSource, acDigitalLegsEchoCanceller=acDigitalLegsEchoCanceller, acTrunkCASEntry=acTrunkCASEntry, acTrunkStatusV5InterfaceNum=acTrunkStatusV5InterfaceNum, acSonetSDH=acSonetSDH, acCASFileEntry=acCASFileEntry, acTrunkLineBuildOutOverwrite=acTrunkLineBuildOutOverwrite, acTrunkISDNNfasEntry=acTrunkISDNNfasEntry, acTrunkAdministrativeState=acTrunkAdministrativeState, acTrunkStatusAlarm=acTrunkStatusAlarm, acDigitalLegs=acDigitalLegs, acCASFileName=acCASFileName, acSonetSDHFbrGrpKlmNumberingScheme=acSonetSDHFbrGrpKlmNumberingScheme, acTrunkAutoClockPriority=acTrunkAutoClockPriority, acTrunkLineTable=acTrunkLineTable, acSDHKLMNumberingScheme=acSDHKLMNumberingScheme, acTrunkISDNCommonIncomingCallsBehavior=acTrunkISDNCommonIncomingCallsBehavior, acTrunkV5ProtocolSide=acTrunkV5ProtocolSide, acTrunkIndex=acTrunkIndex, acSDHKLMNumberingSchemeTUG3OrSTS1=acSDHKLMNumberingSchemeTUG3OrSTS1, acTrunkISDNCommonEntry=acTrunkISDNCommonEntry, acTrunkStatus=acTrunkStatus)
