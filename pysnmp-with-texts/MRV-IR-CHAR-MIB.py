#
# PySNMP MIB module MRV-IR-CHAR-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/MRV-IR-CHAR-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:15:29 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint")
TrapSeverity, mrvLx = mibBuilder.importSymbols("MRV-IR-SYSTEM-MIB", "TrapSeverity", "mrvLx")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, ObjectIdentity, ModuleIdentity, NotificationType, Bits, Integer32, iso, Unsigned32, Counter64, Gauge32, MibIdentifier, TimeTicks, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "ObjectIdentity", "ModuleIdentity", "NotificationType", "Bits", "Integer32", "iso", "Unsigned32", "Counter64", "Gauge32", "MibIdentifier", "TimeTicks", "IpAddress")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
irCharMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 33, 100, 2))
if mibBuilder.loadTexts: irCharMib.setLastUpdated('200711180000Z')
if mibBuilder.loadTexts: irCharMib.setOrganization('MRV Communications - BPD Division')
if mibBuilder.loadTexts: irCharMib.setContactInfo('Postal: MRV Communications, Inc. 295 Foster Street Littleton, MA 01460')
if mibBuilder.loadTexts: irCharMib.setDescription('This is the MRV LX Character MIB module.')
class IrContactState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("open", 1), ("closed", 2))

class IrControlState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("deassert", 1), ("assert", 2))

class PortAccessType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19))
    namedValues = NamedValues(("local", 1), ("remote", 2), ("dynamic", 3), ("power", 4), ("sensor", 5), ("apd", 6), ("dataBuffer", 7), ("tcpPipe", 8), ("control", 9), ("master", 10), ("slave", 11), ("ppp", 12), ("notify", 13), ("none", 14), ("hdam", 16), ("ldam", 17), ("lpd", 18), ("ups", 19))

class PortSpeed(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))
    namedValues = NamedValues(("sp134", 1), ("sp200", 2), ("sp300", 3), ("sp600", 4), ("sp1200", 5), ("sp2400", 6), ("sp4800", 7), ("sp9600", 8), ("sp19200", 9), ("sp38400", 10), ("sp57600", 11), ("sp115200", 12), ("sp230400", 13), ("sp460800", 14), ("sp921600", 15))

class PortAuthType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("none", 1), ("securid", 2), ("radius", 3), ("tacacs", 4), ("ldap", 5), ("local", 6))

class SignalStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("up", 1), ("down", 2))

irCharNumber = MibScalar((1, 3, 6, 1, 4, 1, 33, 100, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: irCharNumber.setStatus('current')
if mibBuilder.loadTexts: irCharNumber.setDescription('The number of entries in irCharPortTable.')
irCharPortTable = MibTable((1, 3, 6, 1, 4, 1, 33, 100, 2, 2), )
if mibBuilder.loadTexts: irCharPortTable.setStatus('current')
if mibBuilder.loadTexts: irCharPortTable.setDescription('A list of character port entries.')
irCharPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 100, 2, 2, 1), ).setIndexNames((0, "MRV-IR-CHAR-MIB", "irCharPortIndex"))
if mibBuilder.loadTexts: irCharPortEntry.setStatus('current')
if mibBuilder.loadTexts: irCharPortEntry.setDescription('A character port entry.')
irCharPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: irCharPortIndex.setStatus('current')
if mibBuilder.loadTexts: irCharPortIndex.setDescription('An index value that uniquely identifies a port.')
irCharPortAccessType = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 2, 2, 1, 2), PortAccessType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: irCharPortAccessType.setStatus('current')
if mibBuilder.loadTexts: irCharPortAccessType.setDescription('The access type value for the port.')
irCharPortFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("xon", 2), ("cts", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: irCharPortFlowControl.setStatus('current')
if mibBuilder.loadTexts: irCharPortFlowControl.setDescription('The flow control mechanism configured for the port.')
irCharPortStopBits = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: irCharPortStopBits.setStatus('current')
if mibBuilder.loadTexts: irCharPortStopBits.setDescription('The number of stop bits configured for the port.')
irCharPortParity = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("odd", 2), ("even", 3), ("mark", 4), ("space", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: irCharPortParity.setStatus('current')
if mibBuilder.loadTexts: irCharPortParity.setDescription('The parity configured for the port.')
irCharPortBitsPerChar = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(7, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: irCharPortBitsPerChar.setStatus('current')
if mibBuilder.loadTexts: irCharPortBitsPerChar.setDescription('The number of bits per character.')
irCharPortAutoDial = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: irCharPortAutoDial.setStatus('deprecated')
if mibBuilder.loadTexts: irCharPortAutoDial.setDescription('The auto dial setting for the port. This object has been deprecated and will be removed in the next release.')
irCharPortAutoHangup = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: irCharPortAutoHangup.setStatus('current')
if mibBuilder.loadTexts: irCharPortAutoHangup.setDescription('The auto hangup setting for the port.')
irCharPortAutobaud = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: irCharPortAutobaud.setStatus('current')
if mibBuilder.loadTexts: irCharPortAutobaud.setDescription('The autobaud status for the port.')
irCharPortAutobaudRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 2, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: irCharPortAutobaudRetry.setStatus('current')
if mibBuilder.loadTexts: irCharPortAutobaudRetry.setDescription('The autobaud retry interval (in secods).')
irCharPortInSignalCts = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 2, 2, 1, 11), SignalStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: irCharPortInSignalCts.setStatus('current')
if mibBuilder.loadTexts: irCharPortInSignalCts.setDescription('The current value of the input CTS signal.')
irCharPortInSignalDsr = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 2, 2, 1, 12), SignalStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: irCharPortInSignalDsr.setStatus('current')
if mibBuilder.loadTexts: irCharPortInSignalDsr.setDescription('The current value of the input DSR signal.')
irCharPortInSignalDcd = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 2, 2, 1, 13), SignalStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: irCharPortInSignalDcd.setStatus('current')
if mibBuilder.loadTexts: irCharPortInSignalDcd.setDescription('The current value of the input DCD signal.')
irCharPortOutSignalRts = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 2, 2, 1, 14), SignalStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: irCharPortOutSignalRts.setStatus('current')
if mibBuilder.loadTexts: irCharPortOutSignalRts.setDescription('The current value of the output RTS signal.')
irCharPortOutSignalDtr = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 2, 2, 1, 15), SignalStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: irCharPortOutSignalDtr.setStatus('current')
if mibBuilder.loadTexts: irCharPortOutSignalDtr.setDescription('The current value of the output DTR signal.')
irCharPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 2, 2, 1, 16), PortSpeed()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: irCharPortSpeed.setStatus('current')
if mibBuilder.loadTexts: irCharPortSpeed.setDescription('The port speed in bits per second.')
irCharPortPrompt = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 2, 2, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: irCharPortPrompt.setStatus('current')
if mibBuilder.loadTexts: irCharPortPrompt.setDescription('An administratively assigned prompt for the port.')
irCharPortBreak = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 2, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: irCharPortBreak.setStatus('current')
if mibBuilder.loadTexts: irCharPortBreak.setDescription('The break status for the port.')
irCharPortSpecialBreakString = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 2, 2, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: irCharPortSpecialBreakString.setStatus('current')
if mibBuilder.loadTexts: irCharPortSpecialBreakString.setDescription('An administratively assigned special break string for the port.')
irCharPortSpecialBreak = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 2, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: irCharPortSpecialBreak.setStatus('current')
if mibBuilder.loadTexts: irCharPortSpecialBreak.setDescription('The special break status for the port.')
irCharPortInboundAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 2, 2, 1, 21), PortAuthType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: irCharPortInboundAuth.setStatus('current')
if mibBuilder.loadTexts: irCharPortInboundAuth.setDescription('The inbound authentication status for the port.')
irCharPortOutboundAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 2, 2, 1, 22), PortAuthType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: irCharPortOutboundAuth.setStatus('current')
if mibBuilder.loadTexts: irCharPortOutboundAuth.setDescription('The outbound authentication status for the port.')
irCharPortAuthFallback = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 2, 2, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: irCharPortAuthFallback.setStatus('current')
if mibBuilder.loadTexts: irCharPortAuthFallback.setDescription('The Authentication fallback attempts for the port.')
irCharPortRadiusAcct = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 2, 2, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: irCharPortRadiusAcct.setStatus('current')
if mibBuilder.loadTexts: irCharPortRadiusAcct.setDescription('The Radius accounting status for the port.')
irCharPortTacacsAcct = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 2, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: irCharPortTacacsAcct.setStatus('current')
if mibBuilder.loadTexts: irCharPortTacacsAcct.setDescription('The Tacacs accounting status for the port.')
irCharPortTransparent = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 2, 2, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: irCharPortTransparent.setStatus('current')
if mibBuilder.loadTexts: irCharPortTransparent.setDescription('The transparent status for the port.')
irCharPortDataBufferSize = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 2, 2, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1024, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: irCharPortDataBufferSize.setStatus('current')
if mibBuilder.loadTexts: irCharPortDataBufferSize.setDescription('An administratively assigned data buffer log size')
irCharPortDataBufferSyslog = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 2, 2, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: irCharPortDataBufferSyslog.setStatus('current')
if mibBuilder.loadTexts: irCharPortDataBufferSyslog.setDescription('The data buffer syslog status for the port.')
irCharPortDataBufferDisplay = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 2, 2, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("prompt", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: irCharPortDataBufferDisplay.setStatus('current')
if mibBuilder.loadTexts: irCharPortDataBufferDisplay.setDescription('The data buffer display status for the port.')
irCharPortDataBufferTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 2, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: irCharPortDataBufferTimeStamp.setStatus('current')
if mibBuilder.loadTexts: irCharPortDataBufferTimeStamp.setDescription('The data buffer time stamp status for the port.')
irCharPortTelnetPort = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 2, 2, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: irCharPortTelnetPort.setStatus('current')
if mibBuilder.loadTexts: irCharPortTelnetPort.setDescription('The configured port used to telnet to the device attached to this port.')
irCharPortSshPort = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 2, 2, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: irCharPortSshPort.setStatus('current')
if mibBuilder.loadTexts: irCharPortSshPort.setDescription('The configured port used to SSH to the device attached to this port.')
irCharPortStatsTable = MibTable((1, 3, 6, 1, 4, 1, 33, 100, 2, 3), )
if mibBuilder.loadTexts: irCharPortStatsTable.setStatus('current')
if mibBuilder.loadTexts: irCharPortStatsTable.setDescription('A list of character port stats entries.')
irCharPortStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 100, 2, 3, 1), )
irCharPortEntry.registerAugmentions(("MRV-IR-CHAR-MIB", "irCharPortStatsEntry"))
irCharPortStatsEntry.setIndexNames(*irCharPortEntry.getIndexNames())
if mibBuilder.loadTexts: irCharPortStatsEntry.setStatus('current')
if mibBuilder.loadTexts: irCharPortStatsEntry.setDescription('A character port stats entry.')
irCharPortTransmitBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 2, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: irCharPortTransmitBytes.setStatus('current')
if mibBuilder.loadTexts: irCharPortTransmitBytes.setDescription('The number of bytes transmitted on the port.')
irCharPortReceiveBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 2, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: irCharPortReceiveBytes.setStatus('current')
if mibBuilder.loadTexts: irCharPortReceiveBytes.setDescription('The number of bytes received on the port.')
irCharPortFrameErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 2, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: irCharPortFrameErrors.setStatus('current')
if mibBuilder.loadTexts: irCharPortFrameErrors.setDescription('The number of frame errors on the port.')
irCharPortOverrunErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 2, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: irCharPortOverrunErrors.setStatus('current')
if mibBuilder.loadTexts: irCharPortOverrunErrors.setDescription('The number of overrun errors on the port.')
irCharPortParityErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 2, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: irCharPortParityErrors.setStatus('current')
if mibBuilder.loadTexts: irCharPortParityErrors.setDescription('The number of parity errors on the port.')
irTempSensorTable = MibTable((1, 3, 6, 1, 4, 1, 33, 100, 2, 4), )
if mibBuilder.loadTexts: irTempSensorTable.setStatus('current')
if mibBuilder.loadTexts: irTempSensorTable.setDescription('List of temperature sensor entries.')
irTempSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 100, 2, 4, 1), ).setIndexNames((0, "MRV-IR-CHAR-MIB", "irTempPortIndex"), (0, "MRV-IR-CHAR-MIB", "irTempSensorIndex"))
if mibBuilder.loadTexts: irTempSensorEntry.setStatus('current')
if mibBuilder.loadTexts: irTempSensorEntry.setDescription('A temp sensor entry.')
irTempPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 2, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: irTempPortIndex.setStatus('current')
if mibBuilder.loadTexts: irTempPortIndex.setDescription('The port on which the temp sensor is configured.')
irTempSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 2, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: irTempSensorIndex.setStatus('current')
if mibBuilder.loadTexts: irTempSensorIndex.setDescription('A unique value that identifies a specific configured temp sensor.')
irTempValue = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 2, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: irTempValue.setStatus('current')
if mibBuilder.loadTexts: irTempValue.setDescription('The current temperature value.')
irTempValueUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 2, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("celsius", 1), ("fahrenheit", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: irTempValueUnits.setStatus('current')
if mibBuilder.loadTexts: irTempValueUnits.setDescription('This object indicates the units for the temperature value.')
irTempThresholdHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 2, 4, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: irTempThresholdHigh.setStatus('current')
if mibBuilder.loadTexts: irTempThresholdHigh.setDescription('The high temperature threhsold value.')
irTempThresholdLow = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 2, 4, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: irTempThresholdLow.setStatus('current')
if mibBuilder.loadTexts: irTempThresholdLow.setDescription('The low temperature threhsold value.')
irTempTrapSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 2, 4, 1, 7), TrapSeverity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: irTempTrapSeverity.setStatus('current')
if mibBuilder.loadTexts: irTempTrapSeverity.setDescription('The severity value to be sent in the threshold trap.')
irTempHysteresis = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 2, 4, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: irTempHysteresis.setStatus('current')
if mibBuilder.loadTexts: irTempHysteresis.setDescription('After crossing a threshold, the delta by which the caliberated value must drop within the normal range before the alarm condition is cleared (i.e. a cleared alarm is generated).')
irHumiditySensorTable = MibTable((1, 3, 6, 1, 4, 1, 33, 100, 2, 5), )
if mibBuilder.loadTexts: irHumiditySensorTable.setStatus('current')
if mibBuilder.loadTexts: irHumiditySensorTable.setDescription('A list of humidity sensor entries.')
irHumiditySensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 100, 2, 5, 1), ).setIndexNames((0, "MRV-IR-CHAR-MIB", "irHumidityPortIndex"), (0, "MRV-IR-CHAR-MIB", "irHumiditySensorIndex"))
if mibBuilder.loadTexts: irHumiditySensorEntry.setStatus('current')
if mibBuilder.loadTexts: irHumiditySensorEntry.setDescription('A humidity sensor entry.')
irHumidityPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 2, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: irHumidityPortIndex.setStatus('current')
if mibBuilder.loadTexts: irHumidityPortIndex.setDescription('The port on which the humidity sensor is configured.')
irHumiditySensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 2, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: irHumiditySensorIndex.setStatus('current')
if mibBuilder.loadTexts: irHumiditySensorIndex.setDescription('A unique value that identifies a specific configured humidity sensor.')
irHumidityValue = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 2, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: irHumidityValue.setStatus('current')
if mibBuilder.loadTexts: irHumidityValue.setDescription('The current humidity value (as a percentage).')
irHumidityThresholdHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 2, 5, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: irHumidityThresholdHigh.setStatus('current')
if mibBuilder.loadTexts: irHumidityThresholdHigh.setDescription('The high humidity threhsold value.')
irHumidityThresholdLow = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 2, 5, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: irHumidityThresholdLow.setStatus('current')
if mibBuilder.loadTexts: irHumidityThresholdLow.setDescription('The low humidity threhsold value.')
irHumidityTrapSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 2, 5, 1, 6), TrapSeverity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: irHumidityTrapSeverity.setStatus('current')
if mibBuilder.loadTexts: irHumidityTrapSeverity.setDescription('The severity value to be sent in the threshold trap.')
irHumidityHysteresis = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 2, 5, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: irHumidityHysteresis.setStatus('current')
if mibBuilder.loadTexts: irHumidityHysteresis.setDescription('After crossing a threshold, the delta by which the caliberated value must drop within the normal range before the alarm condition is cleared (i.e. a cleared alarm is generated).')
irPowerTable = MibTable((1, 3, 6, 1, 4, 1, 33, 100, 2, 6), )
if mibBuilder.loadTexts: irPowerTable.setStatus('current')
if mibBuilder.loadTexts: irPowerTable.setDescription('A list of power port entries.')
irPowerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 100, 2, 6, 1), )
irCharPortEntry.registerAugmentions(("MRV-IR-CHAR-MIB", "irPowerEntry"))
irPowerEntry.setIndexNames(*irCharPortEntry.getIndexNames())
if mibBuilder.loadTexts: irPowerEntry.setStatus('current')
if mibBuilder.loadTexts: irPowerEntry.setDescription('A power port config entry.')
irPowerModuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 2, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("module5150", 1), ("module4800", 2), ("module5250", 3), ("moduleOther", 4), ("module5210", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: irPowerModuleType.setStatus('current')
if mibBuilder.loadTexts: irPowerModuleType.setDescription('The type of power module attached to the power port.')
irPowerCurrentLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 2, 6, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: irPowerCurrentLoad.setStatus('current')
if mibBuilder.loadTexts: irPowerCurrentLoad.setDescription('An Ascii string indicating the total unit current load, in Amps.')
irPowerOutletCount = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 2, 6, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: irPowerOutletCount.setStatus('current')
if mibBuilder.loadTexts: irPowerOutletCount.setDescription('The number of power outlets on the module.')
irPowerCurrentLoadA = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 2, 6, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: irPowerCurrentLoadA.setStatus('current')
if mibBuilder.loadTexts: irPowerCurrentLoadA.setDescription("An Ascii string indicating the current load, in Amps, of input feed A. Note that this info is available only on certain models. A value of 'N/A' indicates that this information is not available.")
irPowerCurrentLoadB = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 2, 6, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: irPowerCurrentLoadB.setStatus('current')
if mibBuilder.loadTexts: irPowerCurrentLoadB.setDescription("An Ascii string indicating the current load, in Amps, of input feed B. Note that this info is available only on certain models. A value of 'N/A' indicates that this information is not available.")
irPowerCurrentLoadC = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 2, 6, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: irPowerCurrentLoadC.setStatus('current')
if mibBuilder.loadTexts: irPowerCurrentLoadC.setDescription("An Ascii string indicating the current load, in Amps, of input feed C. Note that this info is available only on certain models. A value of 'N/A' indicates that this information is not available.")
irPowerOutletTable = MibTable((1, 3, 6, 1, 4, 1, 33, 100, 2, 7), )
if mibBuilder.loadTexts: irPowerOutletTable.setStatus('current')
if mibBuilder.loadTexts: irPowerOutletTable.setDescription('A list of Power Outlet entries.')
irPowerOutletEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 100, 2, 7, 1), ).setIndexNames((0, "MRV-IR-CHAR-MIB", "irPowerPortIndex"), (0, "MRV-IR-CHAR-MIB", "irPowerOutletIndex"))
if mibBuilder.loadTexts: irPowerOutletEntry.setStatus('current')
if mibBuilder.loadTexts: irPowerOutletEntry.setDescription('A power outlet entry.')
irPowerPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 2, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: irPowerPortIndex.setStatus('current')
if mibBuilder.loadTexts: irPowerPortIndex.setDescription('An index which uniquely identifies a physical power port.')
irPowerOutletIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 2, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: irPowerOutletIndex.setStatus('current')
if mibBuilder.loadTexts: irPowerOutletIndex.setDescription('An index which uniquely identifies an outlet on a power outlet port.')
irPowerOutletName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 2, 7, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: irPowerOutletName.setStatus('current')
if mibBuilder.loadTexts: irPowerOutletName.setDescription('A name used to identify this power outlet.')
irPowerOutletStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 2, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: irPowerOutletStatus.setStatus('current')
if mibBuilder.loadTexts: irPowerOutletStatus.setDescription('The status of the power outlet.')
irPowerOutletAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 2, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("on", 2), ("off", 3), ("reboot", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: irPowerOutletAction.setStatus('current')
if mibBuilder.loadTexts: irPowerOutletAction.setDescription('A read of this object always returns the value other(1). Setting it to one of the other values causes the corresponding action to take place.')
irPowerOutletCurrentLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 2, 7, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: irPowerOutletCurrentLoad.setStatus('current')
if mibBuilder.loadTexts: irPowerOutletCurrentLoad.setDescription("An Ascii string indicating the current load, in Amps, for this outlet. A value of 'N/A' indicates that this information is not available.")
irTcpPipeTable = MibTable((1, 3, 6, 1, 4, 1, 33, 100, 2, 8), )
if mibBuilder.loadTexts: irTcpPipeTable.setStatus('current')
if mibBuilder.loadTexts: irTcpPipeTable.setDescription('A list of TcpPipe port entries.')
irTcpPipeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 100, 2, 8, 1), )
irCharPortEntry.registerAugmentions(("MRV-IR-CHAR-MIB", "irTcpPipeEntry"))
irTcpPipeEntry.setIndexNames(*irCharPortEntry.getIndexNames())
if mibBuilder.loadTexts: irTcpPipeEntry.setStatus('current')
if mibBuilder.loadTexts: irTcpPipeEntry.setDescription('A TcpPipe port config entry.')
irTcpPipeRemoteIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 2, 8, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: irTcpPipeRemoteIpAddress.setStatus('current')
if mibBuilder.loadTexts: irTcpPipeRemoteIpAddress.setDescription('The IP address of the remote end of the TCP connection.')
irTcpPipeRemoteTcpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 2, 8, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2001, 9999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: irTcpPipeRemoteTcpPort.setStatus('current')
if mibBuilder.loadTexts: irTcpPipeRemoteTcpPort.setDescription('The TCP port number for the remote end of the TCP connection.')
irTcpPipeWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 2, 8, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(128, 1400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: irTcpPipeWindowSize.setStatus('current')
if mibBuilder.loadTexts: irTcpPipeWindowSize.setDescription('The TCP window size to use for the TCP connection.')
irTcpPipeConnRetryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 2, 8, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: irTcpPipeConnRetryCount.setStatus('current')
if mibBuilder.loadTexts: irTcpPipeConnRetryCount.setDescription('The TCP connection retry count to use for the TCP connection.')
irTcpPipeConnStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 2, 8, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("idle", 0), ("connecting", 1), ("connected", 2), ("suspended", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: irTcpPipeConnStatus.setStatus('current')
if mibBuilder.loadTexts: irTcpPipeConnStatus.setDescription('The TCP connection status.')
irModem = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 100, 2, 9))
irModemCfgTable = MibTable((1, 3, 6, 1, 4, 1, 33, 100, 2, 9, 1), )
if mibBuilder.loadTexts: irModemCfgTable.setStatus('current')
if mibBuilder.loadTexts: irModemCfgTable.setDescription('A list of modem config entries.')
irModemCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 100, 2, 9, 1, 1), ).setIndexNames((0, "MRV-IR-CHAR-MIB", "irModemIndex"))
if mibBuilder.loadTexts: irModemCfgEntry.setStatus('current')
if mibBuilder.loadTexts: irModemCfgEntry.setDescription('A modem config entry.')
irModemIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 2, 9, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: irModemIndex.setStatus('current')
if mibBuilder.loadTexts: irModemIndex.setDescription('An index value that uniquely identifies a modem.')
irModemTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 2, 9, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: irModemTimeout.setStatus('current')
if mibBuilder.loadTexts: irModemTimeout.setDescription('The number of seconds to wait to detect remote end setting DSR signal high before giving up trying to establish a call.')
irModemRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 2, 9, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: irModemRetry.setStatus('current')
if mibBuilder.loadTexts: irModemRetry.setDescription('The number of times to try establishing a call.')
irModemState = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 2, 9, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: irModemState.setStatus('current')
if mibBuilder.loadTexts: irModemState.setDescription('This indicates whether the modem is enabled or disabled on a port.')
irModemPooling = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 2, 9, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: irModemPooling.setStatus('current')
if mibBuilder.loadTexts: irModemPooling.setDescription('This indicates whether modem pooling is enabled or disabled.')
irModemDialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 2, 9, 1, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: irModemDialNumber.setStatus('current')
if mibBuilder.loadTexts: irModemDialNumber.setDescription('The phone number to dial when setting up a call.')
irModemInitString = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 2, 9, 1, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: irModemInitString.setStatus('current')
if mibBuilder.loadTexts: irModemInitString.setDescription('The modem initialisation string.')
irInternalModemPort = MibScalar((1, 3, 6, 1, 4, 1, 33, 100, 2, 9, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: irInternalModemPort.setStatus('current')
if mibBuilder.loadTexts: irInternalModemPort.setDescription('The physical port to which an internal modem is attached. A value of 0 indicates there is no internal modem present.')
irInternalModemType = MibScalar((1, 3, 6, 1, 4, 1, 33, 100, 2, 9, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("v90", 2), ("rs485", 3), ("gsmGprs", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: irInternalModemType.setStatus('current')
if mibBuilder.loadTexts: irInternalModemType.setDescription('The type of modem module installed in the system.')
irLdAlarmConfigTable = MibTable((1, 3, 6, 1, 4, 1, 33, 100, 2, 10), )
if mibBuilder.loadTexts: irLdAlarmConfigTable.setStatus('current')
if mibBuilder.loadTexts: irLdAlarmConfigTable.setDescription('A list of ldam alarm port config entries.')
irLdAlarmConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 100, 2, 10, 1), ).setIndexNames((0, "MRV-IR-CHAR-MIB", "irLdAlarmPortIndex"), (0, "MRV-IR-CHAR-MIB", "irLdAlarmPointIndex"))
if mibBuilder.loadTexts: irLdAlarmConfigEntry.setStatus('current')
if mibBuilder.loadTexts: irLdAlarmConfigEntry.setDescription('An ldam alarm port config entry.')
irLdAlarmPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 2, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: irLdAlarmPortIndex.setStatus('current')
if mibBuilder.loadTexts: irLdAlarmPortIndex.setDescription('The alarm port index.')
irLdAlarmPointIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 2, 10, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: irLdAlarmPointIndex.setStatus('current')
if mibBuilder.loadTexts: irLdAlarmPointIndex.setDescription('An integer which uniquely identifies an alarm point on this port.')
irLdAlarmName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 2, 10, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: irLdAlarmName.setStatus('current')
if mibBuilder.loadTexts: irLdAlarmName.setDescription('The name assigned to the alarm point.')
irLdAlarmDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 2, 10, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: irLdAlarmDescription.setStatus('current')
if mibBuilder.loadTexts: irLdAlarmDescription.setDescription('A user configurable alarm point description string.')
irLdAlarmContactState = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 2, 10, 1, 5), IrContactState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: irLdAlarmContactState.setStatus('current')
if mibBuilder.loadTexts: irLdAlarmContactState.setDescription('The current state of the alarm point contacts.')
irLdAlarmContactFaultState = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 2, 10, 1, 6), IrContactState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: irLdAlarmContactFaultState.setStatus('current')
if mibBuilder.loadTexts: irLdAlarmContactFaultState.setDescription('The contact state (open or closed) which indicates the fault condition. If the value of this object and irLdAlarmContactState is the same, then the alarm point has been triggered.')
irLdAlarmTrapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 2, 10, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: irLdAlarmTrapStatus.setStatus('current')
if mibBuilder.loadTexts: irLdAlarmTrapStatus.setDescription('This indicates whether an snmp trap will be generated when this alarm point is generated.')
irLdAlarmTrapSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 2, 10, 1, 8), TrapSeverity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: irLdAlarmTrapSeverity.setStatus('current')
if mibBuilder.loadTexts: irLdAlarmTrapSeverity.setDescription('The trap severity assigned to this alarm point. This value will be sent when an alarm fires and an snmp trap is generated.')
irLdAlarmCount = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 2, 10, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: irLdAlarmCount.setStatus('current')
if mibBuilder.loadTexts: irLdAlarmCount.setDescription('The number of times the alarm point has been generated since the LX was started.')
irLdAlarmTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 2, 10, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: irLdAlarmTimestamp.setStatus('current')
if mibBuilder.loadTexts: irLdAlarmTimestamp.setDescription('A timestamp string indicating the time the last alarm was generated. A null string indicates that the alarm point has not been triggered.')
irLdControlConfigTable = MibTable((1, 3, 6, 1, 4, 1, 33, 100, 2, 11), )
if mibBuilder.loadTexts: irLdControlConfigTable.setStatus('current')
if mibBuilder.loadTexts: irLdControlConfigTable.setDescription('A list of ldam control port config entries.')
irLdControlConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 100, 2, 11, 1), ).setIndexNames((0, "MRV-IR-CHAR-MIB", "irLdControlPortIndex"), (0, "MRV-IR-CHAR-MIB", "irLdControlPointIndex"))
if mibBuilder.loadTexts: irLdControlConfigEntry.setStatus('current')
if mibBuilder.loadTexts: irLdControlConfigEntry.setDescription('An ldam control port config entry.')
irLdControlPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 2, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: irLdControlPortIndex.setStatus('current')
if mibBuilder.loadTexts: irLdControlPortIndex.setDescription('The control port index.')
irLdControlPointIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 2, 11, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: irLdControlPointIndex.setStatus('current')
if mibBuilder.loadTexts: irLdControlPointIndex.setDescription('An integer which uniquely identifies a control point on this port.')
irLdControlName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 2, 11, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: irLdControlName.setStatus('current')
if mibBuilder.loadTexts: irLdControlName.setDescription('The name assigned to the control point.')
irLdControlDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 2, 11, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: irLdControlDescription.setStatus('current')
if mibBuilder.loadTexts: irLdControlDescription.setDescription('A user configurable control point description string.')
irLdControlState = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 2, 11, 1, 5), IrControlState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: irLdControlState.setStatus('current')
if mibBuilder.loadTexts: irLdControlState.setDescription('The configured control state (deassert or assert).')
irLdControlEnergizedState = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 2, 11, 1, 6), IrControlState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: irLdControlEnergizedState.setStatus('current')
if mibBuilder.loadTexts: irLdControlEnergizedState.setDescription('The configured energized state (deassert or assert). If the value of this object and irLdControlState is the same, then the operational state will be on.')
irRs485PortTable = MibTable((1, 3, 6, 1, 4, 1, 33, 100, 2, 12), )
if mibBuilder.loadTexts: irRs485PortTable.setStatus('current')
if mibBuilder.loadTexts: irRs485PortTable.setDescription('A list of RS485 character port entries.')
irRs485PortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 100, 2, 12, 1), ).setIndexNames((0, "MRV-IR-CHAR-MIB", "irRs485PortIndex"))
if mibBuilder.loadTexts: irRs485PortEntry.setStatus('current')
if mibBuilder.loadTexts: irRs485PortEntry.setDescription('An RS485 character port entry.')
irRs485PortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 2, 12, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: irRs485PortIndex.setStatus('current')
if mibBuilder.loadTexts: irRs485PortIndex.setDescription('An index value that uniquely identifies an RS485 port. This value maps to the same index in the irCharPortTable.')
irRs485PortDuplexMode = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 2, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("full", 1), ("half", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: irRs485PortDuplexMode.setStatus('current')
if mibBuilder.loadTexts: irRs485PortDuplexMode.setDescription('The duplex mode for this RS485 port.')
irRs485PortEchoMode = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 2, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: irRs485PortEchoMode.setStatus('current')
if mibBuilder.loadTexts: irRs485PortEchoMode.setDescription('The echo mode for this RS4585 port. This is used when irRs485PortDuplexMode object is set to half(2).')
irRs485PortTransmitter = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 2, 12, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("always", 1), ("rts", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: irRs485PortTransmitter.setStatus('current')
if mibBuilder.loadTexts: irRs485PortTransmitter.setDescription('The transmitter setting for this RS4585 port. This is used when irRs485PortDuplexMode object is set to full(1).')
irGsmPortTable = MibTable((1, 3, 6, 1, 4, 1, 33, 100, 2, 13), )
if mibBuilder.loadTexts: irGsmPortTable.setStatus('current')
if mibBuilder.loadTexts: irGsmPortTable.setDescription('A list of GSM/GPRS port entries.')
irGsmPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 100, 2, 13, 1), ).setIndexNames((0, "MRV-IR-CHAR-MIB", "irGsmPortIndex"))
if mibBuilder.loadTexts: irGsmPortEntry.setStatus('current')
if mibBuilder.loadTexts: irGsmPortEntry.setDescription('An GSM/GPRS port entry.')
irGsmPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 2, 13, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: irGsmPortIndex.setStatus('current')
if mibBuilder.loadTexts: irGsmPortIndex.setDescription('An index value that uniquely identifies an GSM/GPRS port. This value maps to the same index in the irCharPortTable.')
irGsmPortRcvSigStrength = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 2, 13, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: irGsmPortRcvSigStrength.setStatus('current')
if mibBuilder.loadTexts: irGsmPortRcvSigStrength.setDescription('The received signal strenth.')
irGsmPortBitErrorRate = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 2, 13, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: irGsmPortBitErrorRate.setStatus('current')
if mibBuilder.loadTexts: irGsmPortBitErrorRate.setDescription('The port bit error rate.')
irUpsTable = MibTable((1, 3, 6, 1, 4, 1, 33, 100, 2, 14), )
if mibBuilder.loadTexts: irUpsTable.setStatus('current')
if mibBuilder.loadTexts: irUpsTable.setDescription('A list of ups entries.')
irUpsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 100, 2, 14, 1), )
irCharPortEntry.registerAugmentions(("MRV-IR-CHAR-MIB", "irUpsEntry"))
irUpsEntry.setIndexNames(*irCharPortEntry.getIndexNames())
if mibBuilder.loadTexts: irUpsEntry.setStatus('current')
if mibBuilder.loadTexts: irUpsEntry.setDescription('A ups entry.')
irUpsType = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 2, 14, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("smart", 1), ("simple", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: irUpsType.setStatus('current')
if mibBuilder.loadTexts: irUpsType.setDescription('The ups type. It indicates the protocol used to communicate with the ups. A value of smart(1) means use Ascii based commands. A value of simple(2) means use RS232 signals (DTR, CTS). Note that, when irUpsType is simple, only irUpsStatus info is available.')
irUpsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 2, 14, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("offline", 1), ("online", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: irUpsStatus.setStatus('current')
if mibBuilder.loadTexts: irUpsStatus.setDescription('The ups status. A value of offline(1) indicates the ups is not providing power to the attached devices. A value of online(2) indicates the ups is providing power to the attached devices.')
irUpsModel = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 2, 14, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: irUpsModel.setStatus('current')
if mibBuilder.loadTexts: irUpsModel.setDescription('The ups model.')
irUpsCharge = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 2, 14, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: irUpsCharge.setStatus('current')
if mibBuilder.loadTexts: irUpsCharge.setDescription('The ups charge, as a percentage.')
irUpsLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 2, 14, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: irUpsLoad.setStatus('current')
if mibBuilder.loadTexts: irUpsLoad.setDescription('The current load, as a percentage.')
irUpsLife = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 2, 14, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: irUpsLife.setStatus('current')
if mibBuilder.loadTexts: irUpsLife.setDescription('The ups life (time remaining), in minutes.')
mibBuilder.exportSymbols("MRV-IR-CHAR-MIB", irPowerEntry=irPowerEntry, irTcpPipeRemoteIpAddress=irTcpPipeRemoteIpAddress, irLdAlarmPortIndex=irLdAlarmPortIndex, irPowerCurrentLoadB=irPowerCurrentLoadB, irHumidityValue=irHumidityValue, irLdAlarmConfigEntry=irLdAlarmConfigEntry, irModemDialNumber=irModemDialNumber, irCharPortAuthFallback=irCharPortAuthFallback, irCharPortBitsPerChar=irCharPortBitsPerChar, irRs485PortTable=irRs485PortTable, irRs485PortEntry=irRs485PortEntry, irCharPortOutSignalDtr=irCharPortOutSignalDtr, PortAuthType=PortAuthType, irCharPortTable=irCharPortTable, irUpsCharge=irUpsCharge, irModem=irModem, irInternalModemType=irInternalModemType, irLdAlarmTrapSeverity=irLdAlarmTrapSeverity, irLdControlState=irLdControlState, irLdControlConfigEntry=irLdControlConfigEntry, irTempValueUnits=irTempValueUnits, irCharPortSpecialBreakString=irCharPortSpecialBreakString, irCharPortBreak=irCharPortBreak, irHumidityThresholdLow=irHumidityThresholdLow, irTempSensorTable=irTempSensorTable, irCharPortTacacsAcct=irCharPortTacacsAcct, irTempPortIndex=irTempPortIndex, irPowerOutletAction=irPowerOutletAction, irCharPortSshPort=irCharPortSshPort, irRs485PortDuplexMode=irRs485PortDuplexMode, irModemCfgTable=irModemCfgTable, irLdAlarmDescription=irLdAlarmDescription, irTcpPipeWindowSize=irTcpPipeWindowSize, irCharPortSpecialBreak=irCharPortSpecialBreak, irCharPortAutoHangup=irCharPortAutoHangup, irLdControlPointIndex=irLdControlPointIndex, irLdAlarmCount=irLdAlarmCount, irCharPortRadiusAcct=irCharPortRadiusAcct, PortAccessType=PortAccessType, irCharPortOutSignalRts=irCharPortOutSignalRts, irTempSensorIndex=irTempSensorIndex, irUpsEntry=irUpsEntry, irTcpPipeEntry=irTcpPipeEntry, irCharPortTransparent=irCharPortTransparent, irLdAlarmPointIndex=irLdAlarmPointIndex, IrContactState=IrContactState, PortSpeed=PortSpeed, irLdAlarmName=irLdAlarmName, irUpsType=irUpsType, irCharPortInSignalCts=irCharPortInSignalCts, irCharPortPrompt=irCharPortPrompt, irCharPortDataBufferTimeStamp=irCharPortDataBufferTimeStamp, irCharPortSpeed=irCharPortSpeed, irCharPortTelnetPort=irCharPortTelnetPort, IrControlState=IrControlState, irCharPortTransmitBytes=irCharPortTransmitBytes, irCharPortParityErrors=irCharPortParityErrors, irCharPortAutobaudRetry=irCharPortAutobaudRetry, irTempValue=irTempValue, irInternalModemPort=irInternalModemPort, irUpsTable=irUpsTable, irPowerOutletCount=irPowerOutletCount, irLdAlarmTimestamp=irLdAlarmTimestamp, irModemPooling=irModemPooling, irPowerOutletIndex=irPowerOutletIndex, irTcpPipeRemoteTcpPort=irTcpPipeRemoteTcpPort, irUpsLife=irUpsLife, irCharNumber=irCharNumber, irGsmPortBitErrorRate=irGsmPortBitErrorRate, irRs485PortEchoMode=irRs485PortEchoMode, irCharPortAutoDial=irCharPortAutoDial, irModemRetry=irModemRetry, irRs485PortIndex=irRs485PortIndex, irModemTimeout=irModemTimeout, irTempThresholdLow=irTempThresholdLow, irUpsLoad=irUpsLoad, irUpsModel=irUpsModel, irModemInitString=irModemInitString, irPowerOutletName=irPowerOutletName, irCharPortInSignalDcd=irCharPortInSignalDcd, irGsmPortRcvSigStrength=irGsmPortRcvSigStrength, SignalStatus=SignalStatus, irCharPortOutboundAuth=irCharPortOutboundAuth, irCharPortFrameErrors=irCharPortFrameErrors, irUpsStatus=irUpsStatus, irCharPortAutobaud=irCharPortAutobaud, irCharPortInboundAuth=irCharPortInboundAuth, irHumiditySensorEntry=irHumiditySensorEntry, irCharPortAccessType=irCharPortAccessType, irPowerOutletCurrentLoad=irPowerOutletCurrentLoad, irHumidityHysteresis=irHumidityHysteresis, irModemIndex=irModemIndex, irCharPortInSignalDsr=irCharPortInSignalDsr, irLdAlarmTrapStatus=irLdAlarmTrapStatus, irHumidityThresholdHigh=irHumidityThresholdHigh, irPowerCurrentLoadA=irPowerCurrentLoadA, irCharPortReceiveBytes=irCharPortReceiveBytes, irCharPortParity=irCharPortParity, irHumiditySensorIndex=irHumiditySensorIndex, irPowerOutletStatus=irPowerOutletStatus, irLdAlarmContactFaultState=irLdAlarmContactFaultState, irTempSensorEntry=irTempSensorEntry, irLdControlEnergizedState=irLdControlEnergizedState, irTempHysteresis=irTempHysteresis, irPowerCurrentLoad=irPowerCurrentLoad, irHumiditySensorTable=irHumiditySensorTable, irPowerModuleType=irPowerModuleType, irTcpPipeTable=irTcpPipeTable, irCharPortDataBufferDisplay=irCharPortDataBufferDisplay, irHumidityTrapSeverity=irHumidityTrapSeverity, irLdControlPortIndex=irLdControlPortIndex, irCharPortStatsTable=irCharPortStatsTable, irPowerTable=irPowerTable, irCharPortOverrunErrors=irCharPortOverrunErrors, irPowerCurrentLoadC=irPowerCurrentLoadC, irLdControlName=irLdControlName, irPowerOutletTable=irPowerOutletTable, irLdControlConfigTable=irLdControlConfigTable, irGsmPortEntry=irGsmPortEntry, irCharPortFlowControl=irCharPortFlowControl, irLdAlarmConfigTable=irLdAlarmConfigTable, irModemState=irModemState, irGsmPortIndex=irGsmPortIndex, irPowerOutletEntry=irPowerOutletEntry, irCharMib=irCharMib, irLdControlDescription=irLdControlDescription, irCharPortStopBits=irCharPortStopBits, irLdAlarmContactState=irLdAlarmContactState, irTempThresholdHigh=irTempThresholdHigh, irCharPortDataBufferSyslog=irCharPortDataBufferSyslog, irPowerPortIndex=irPowerPortIndex, PYSNMP_MODULE_ID=irCharMib, irCharPortIndex=irCharPortIndex, irTcpPipeConnRetryCount=irTcpPipeConnRetryCount, irTempTrapSeverity=irTempTrapSeverity, irRs485PortTransmitter=irRs485PortTransmitter, irModemCfgEntry=irModemCfgEntry, irGsmPortTable=irGsmPortTable, irCharPortEntry=irCharPortEntry, irHumidityPortIndex=irHumidityPortIndex, irCharPortDataBufferSize=irCharPortDataBufferSize, irCharPortStatsEntry=irCharPortStatsEntry, irTcpPipeConnStatus=irTcpPipeConnStatus)
