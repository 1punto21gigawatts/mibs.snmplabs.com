#
# PySNMP MIB module PBC-KODIAK-M-G10-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/PBC-KODIAK-M-G10-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:37:42 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint")
pbcCaps, pbcReqs, pbcModuleRegs, pbcProducts = mibBuilder.importSymbols("PBC-ENT-MIB", "pbcCaps", "pbcReqs", "pbcModuleRegs", "pbcProducts")
pbcCardIfCardIndex, = mibBuilder.importSymbols("PBC-GENERIC-MIB", "pbcCardIfCardIndex")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
Counter32, iso, TimeTicks, NotificationType, Unsigned32, MibIdentifier, Integer32, IpAddress, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, Gauge32, Bits, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "iso", "TimeTicks", "NotificationType", "Unsigned32", "MibIdentifier", "Integer32", "IpAddress", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "Gauge32", "Bits", "Counter64")
TextualConvention, DisplayString, DateAndTime = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "DateAndTime")
pbcKodiakMG10Mib = ModuleIdentity((1, 3, 6, 1, 4, 1, 5987, 1, 1, 3))
if mibBuilder.loadTexts: pbcKodiakMG10Mib.setLastUpdated('200106211721Z')
if mibBuilder.loadTexts: pbcKodiakMG10Mib.setOrganization('Pacific Broadband Communications')
if mibBuilder.loadTexts: pbcKodiakMG10Mib.setContactInfo('Contact-info.')
if mibBuilder.loadTexts: pbcKodiakMG10Mib.setDescription('MIB Module for the Kodiak M-G10 CMTS.')
pbcKodiakMG10Cmts = MibIdentifier((1, 3, 6, 1, 4, 1, 5987, 3, 1))
pbcG10SystemEnvMon = MibIdentifier((1, 3, 6, 1, 4, 1, 5987, 3, 1, 1))
sytemEnvMonObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 5987, 3, 1, 1, 1))
systemEnvMonPowerSupply = MibIdentifier((1, 3, 6, 1, 4, 1, 5987, 3, 1, 1, 1, 1))
systemEnvMonPowerSupplyEntityIndex = MibScalar((1, 3, 6, 1, 4, 1, 5987, 3, 1, 1, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemEnvMonPowerSupplyEntityIndex.setStatus('current')
if mibBuilder.loadTexts: systemEnvMonPowerSupplyEntityIndex.setDescription("entPhysicalIndex of this card's entry in the Entity MIB's (RFC2737) entPhysicalTable or '0', if none.")
systemEnvMonPowerSupplyStatus = MibScalar((1, 3, 6, 1, 4, 1, 5987, 3, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("degraded", 2), ("failed", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemEnvMonPowerSupplyStatus.setStatus('current')
if mibBuilder.loadTexts: systemEnvMonPowerSupplyStatus.setDescription('Description.')
systemEnvMonTemperature = MibIdentifier((1, 3, 6, 1, 4, 1, 5987, 3, 1, 1, 1, 3))
systemEnvMonAmbientTemperatureHighThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5987, 3, 1, 1, 1, 3, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemEnvMonAmbientTemperatureHighThreshold.setStatus('current')
if mibBuilder.loadTexts: systemEnvMonAmbientTemperatureHighThreshold.setDescription('If the ambient temperature exceeds this value, a warning notification will be generated. The user may use this feature to be alerted to problems with the HVAC at the installed location.')
systemEnvMonAmbientTemperatureLowThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5987, 3, 1, 1, 1, 3, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemEnvMonAmbientTemperatureLowThreshold.setStatus('current')
if mibBuilder.loadTexts: systemEnvMonAmbientTemperatureLowThreshold.setDescription('If the ambient temperature falls below this value, a warning notification will be generated. The user may use this feature to be alerted to problems with the HVAC at the installed location.')
systemEnvMonAmbientTermperatureNumEntries = MibScalar((1, 3, 6, 1, 4, 1, 5987, 3, 1, 1, 1, 3, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemEnvMonAmbientTermperatureNumEntries.setStatus('current')
if mibBuilder.loadTexts: systemEnvMonAmbientTermperatureNumEntries.setDescription('Number of entries in the temperature monitoring status table.')
systemEnvMonAmbientTemperatureTable = MibTable((1, 3, 6, 1, 4, 1, 5987, 3, 1, 1, 1, 3, 4), )
if mibBuilder.loadTexts: systemEnvMonAmbientTemperatureTable.setStatus('current')
if mibBuilder.loadTexts: systemEnvMonAmbientTemperatureTable.setDescription('Table of temperature status maintained by the system/chassis environment monitor.')
systemEnvMonAmbientTemperatureEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5987, 3, 1, 1, 1, 3, 4, 1), ).setIndexNames((0, "PBC-GENERIC-MIB", "pbcCardIfCardIndex"))
if mibBuilder.loadTexts: systemEnvMonAmbientTemperatureEntry.setStatus('current')
if mibBuilder.loadTexts: systemEnvMonAmbientTemperatureEntry.setDescription('An entry in the temperature status table representing the status of ambient temperature monitoring on one module (card). The index is the same as that used in the pbcCardTable.')
systemEnvMonAmbientTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 3, 1, 1, 1, 3, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemEnvMonAmbientTemperature.setStatus('current')
if mibBuilder.loadTexts: systemEnvMonAmbientTemperature.setDescription('Current temperature at the monitoring point for this module (card).')
systemEnvMonFanTrayStatusNumEntries = MibScalar((1, 3, 6, 1, 4, 1, 5987, 3, 1, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemEnvMonFanTrayStatusNumEntries.setStatus('current')
if mibBuilder.loadTexts: systemEnvMonFanTrayStatusNumEntries.setDescription('Number of entries in the fan status monitoring table.')
systemEnvMonFanTrayStatusTable = MibTable((1, 3, 6, 1, 4, 1, 5987, 3, 1, 1, 1, 6), )
if mibBuilder.loadTexts: systemEnvMonFanTrayStatusTable.setStatus('current')
if mibBuilder.loadTexts: systemEnvMonFanTrayStatusTable.setDescription('Table of fan status maintained by the system environment monitor.')
systemEnvMonFanTrayStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5987, 3, 1, 1, 1, 6, 1), ).setIndexNames((0, "PBC-KODIAK-M-G10-MIB", "systemEnvMonFanStatusIndex"))
if mibBuilder.loadTexts: systemEnvMonFanTrayStatusEntry.setStatus('current')
if mibBuilder.loadTexts: systemEnvMonFanTrayStatusEntry.setDescription('An entry in the temperature status table representing the status of one monitoring point.')
systemEnvMonFanTrayStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 3, 1, 1, 1, 6, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemEnvMonFanTrayStatusIndex.setStatus('current')
if mibBuilder.loadTexts: systemEnvMonFanTrayStatusIndex.setDescription('Chassis-assigned ndex number of this fan tray.')
systemEnvMonFanTrayStatusEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 3, 1, 1, 1, 6, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemEnvMonFanTrayStatusEntityIndex.setStatus('current')
if mibBuilder.loadTexts: systemEnvMonFanTrayStatusEntityIndex.setDescription("entPhysicalIndex of this fan tray's entry in the Entity MIB's (RFC2737) entPhysicalTable or '0', if none. ")
systemEnvMonFanStatusNumEntries = MibScalar((1, 3, 6, 1, 4, 1, 5987, 3, 1, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemEnvMonFanStatusNumEntries.setStatus('current')
if mibBuilder.loadTexts: systemEnvMonFanStatusNumEntries.setDescription('Number of fan entries in the fan status table.')
systemEnvMonFanStatusTable = MibTable((1, 3, 6, 1, 4, 1, 5987, 3, 1, 1, 1, 8), )
if mibBuilder.loadTexts: systemEnvMonFanStatusTable.setStatus('current')
if mibBuilder.loadTexts: systemEnvMonFanStatusTable.setDescription('Table with individual fan speeds for the fans in each tray.')
systemEnvMonFanStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5987, 3, 1, 1, 1, 8, 1), ).setIndexNames((0, "PBC-KODIAK-M-G10-MIB", "systemEnvMonFanTrayStatusIndex"), (0, "PBC-KODIAK-M-G10-MIB", "systemEnvMonFanStatusIndex"))
if mibBuilder.loadTexts: systemEnvMonFanStatusEntry.setStatus('current')
if mibBuilder.loadTexts: systemEnvMonFanStatusEntry.setDescription('Fan speed and thresholds for one fan.')
systemEnvMonFanStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 3, 1, 1, 1, 8, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemEnvMonFanStatusIndex.setStatus('current')
if mibBuilder.loadTexts: systemEnvMonFanStatusIndex.setDescription('Description.')
systemEnvMonFanStatusSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 3, 1, 1, 1, 8, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemEnvMonFanStatusSpeed.setStatus('current')
if mibBuilder.loadTexts: systemEnvMonFanStatusSpeed.setDescription('Current speed of the fan.')
pbcG10SystemConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 5987, 3, 1, 2))
pbcG10SystemGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 5987, 3, 1, 2, 1))
pbcSystemEnvMonGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5987, 3, 1, 2, 1, 1)).setObjects(("PBC-KODIAK-M-G10-MIB", "systemEnvMonFanStatusNumEntries"), ("PBC-KODIAK-M-G10-MIB", "systemEnvMonFanStatusIndex"), ("PBC-KODIAK-M-G10-MIB", "systemEnvMonPowerSupplyEntityIndex"), ("PBC-KODIAK-M-G10-MIB", "systemEnvMonPowerSupplyStatus"), ("PBC-KODIAK-M-G10-MIB", "systemEnvMonAmbientTermperatureNumEntries"), ("PBC-KODIAK-M-G10-MIB", "systemEnvMonAmbientTemperature"), ("PBC-KODIAK-M-G10-MIB", "systemEnvMonFanTrayStatusNumEntries"), ("PBC-KODIAK-M-G10-MIB", "systemEnvMonFanTrayStatusIndex"), ("PBC-KODIAK-M-G10-MIB", "systemEnvMonFanTrayStatusEntityIndex"), ("PBC-KODIAK-M-G10-MIB", "systemEnvMonFanStatusSpeed"), ("PBC-KODIAK-M-G10-MIB", "systemEnvMonAmbientTemperatureLowThreshold"), ("PBC-KODIAK-M-G10-MIB", "systemEnvMonAmbientTemperatureHighThreshold"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pbcSystemEnvMonGroup = pbcSystemEnvMonGroup.setStatus('current')
if mibBuilder.loadTexts: pbcSystemEnvMonGroup.setDescription('Objects associated with system environment monitoring.')
pbcG10RedundancyGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5987, 3, 1, 2, 1, 2)).setObjects(("PBC-KODIAK-M-G10-MIB", "pbcG10CmtsDMRGroupIndex"), ("PBC-KODIAK-M-G10-MIB", "pbcG10CmtsDMRGroupSlotNbr"), ("PBC-KODIAK-M-G10-MIB", "pbcG10CmtsDMRGroupDmCardIndex"), ("PBC-KODIAK-M-G10-MIB", "pbcG10CmtsDMRGroupImCardIndex"), ("PBC-KODIAK-M-G10-MIB", "pbcG10CmtsDMRGroupRole"), ("PBC-KODIAK-M-G10-MIB", "pbcG10CmtsDMRGroupStatus"), ("PBC-KODIAK-M-G10-MIB", "pbcG10CmtsDMRGroupAlias"), ("PBC-KODIAK-M-G10-MIB", "pbcG10CmtsDMRGroupAction"), ("PBC-KODIAK-M-G10-MIB", "pbcG10CmtsDMRGroupSwitchIn"), ("PBC-KODIAK-M-G10-MIB", "pbcG10CmtsDMRGroupSwitchAt"), ("PBC-KODIAK-M-G10-MIB", "pbcG10CmtsDMRGroupFreeze"), ("PBC-KODIAK-M-G10-MIB", "pbcG10CmtsCCMPrimarySlot"), ("PBC-KODIAK-M-G10-MIB", "pbcG10CmtsCCMAction"), ("PBC-KODIAK-M-G10-MIB", "pbcG10CmtsCCMSwitchIn"), ("PBC-KODIAK-M-G10-MIB", "pbcG10CmtsCCMSwitchAt"), ("PBC-KODIAK-M-G10-MIB", "pbcG10CmtsNICRedundancyEnable"), ("PBC-KODIAK-M-G10-MIB", "pbcG10CmtsNicDmConnectivityDmCardSlotNumber"), ("PBC-KODIAK-M-G10-MIB", "pbcG10CmtsNicDmConnectivityConnectTo"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pbcG10RedundancyGroup = pbcG10RedundancyGroup.setStatus('current')
if mibBuilder.loadTexts: pbcG10RedundancyGroup.setDescription('Objects associated with DM, NIC and CCM Module Redundancy.')
pbcG10SystemCompliance = MibIdentifier((1, 3, 6, 1, 4, 1, 5987, 3, 1, 2, 3))
pbcG10SystemBasicCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 5987, 3, 1, 2, 3, 1)).setObjects(("PBC-KODIAK-M-G10-MIB", "pbcSystemEnvMonGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pbcG10SystemBasicCompliance = pbcG10SystemBasicCompliance.setStatus('current')
if mibBuilder.loadTexts: pbcG10SystemBasicCompliance.setDescription('Group support required for basic G10 level compliance.')
pbcG10RedundancyCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 5987, 3, 1, 2, 3, 2)).setObjects(("PBC-KODIAK-M-G10-MIB", "pbcG10RedundancyGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pbcG10RedundancyCompliance = pbcG10RedundancyCompliance.setStatus('current')
if mibBuilder.loadTexts: pbcG10RedundancyCompliance.setDescription('Group support required for G10 Redundancy compliance.')
pbcG10DMRedundancy = MibIdentifier((1, 3, 6, 1, 4, 1, 5987, 3, 1, 3))
pbcG10CmtsDMRGroupTable = MibTable((1, 3, 6, 1, 4, 1, 5987, 3, 1, 3, 1), )
if mibBuilder.loadTexts: pbcG10CmtsDMRGroupTable.setStatus('current')
if mibBuilder.loadTexts: pbcG10CmtsDMRGroupTable.setDescription('Table Containing the status of various DOCSIS Module Redunduncy Groups. If ths are no DM Reundandancy Groups present on the G10 CMTS, this table is empty.')
pbcG10CmtsDMRGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5987, 3, 1, 3, 1, 1), ).setIndexNames((0, "PBC-KODIAK-M-G10-MIB", "pbcG10CmtsDMRGroupIndex"), (0, "PBC-KODIAK-M-G10-MIB", "pbcG10CmtsDMRGroupSlotNbr"))
if mibBuilder.loadTexts: pbcG10CmtsDMRGroupEntry.setStatus('current')
if mibBuilder.loadTexts: pbcG10CmtsDMRGroupEntry.setDescription('An entry describing the status of various DOCSIS Module Redundancy Groups.')
pbcG10CmtsDMRGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 3, 1, 3, 1, 1, 1), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: pbcG10CmtsDMRGroupIndex.setStatus('current')
if mibBuilder.loadTexts: pbcG10CmtsDMRGroupIndex.setDescription('An Unique identifier that identifies a DOCSIS Module Redundancy Group. Its value is the same as the slot number that contains the Standby DOCSIS Module within the Redundancy Group. All entries with the same value of pbcG10CmtsDMRGroupIndex belong to the same DM Redundancy Group.')
pbcG10CmtsDMRGroupSlotNbr = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 3, 1, 3, 1, 1, 2), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: pbcG10CmtsDMRGroupSlotNbr.setStatus('current')
if mibBuilder.loadTexts: pbcG10CmtsDMRGroupSlotNbr.setDescription('The slot number of the corresponding DOCSIS Module.')
pbcG10CmtsDMRGroupDmCardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 3, 1, 3, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbcG10CmtsDMRGroupDmCardIndex.setStatus('current')
if mibBuilder.loadTexts: pbcG10CmtsDMRGroupDmCardIndex.setDescription('The index in the pbcCardTable for the corresponding DOCSIS Module. If the DOCSIS Module is not present in the system, this value is reported as 0.')
pbcG10CmtsDMRGroupImCardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 3, 1, 3, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbcG10CmtsDMRGroupImCardIndex.setStatus('current')
if mibBuilder.loadTexts: pbcG10CmtsDMRGroupImCardIndex.setDescription('The index in the pbcCardTable for the corresponding Real I/O Module. The corresponding Rear I/O Module MUST always be present in the system, or else this entry will not even exist in this table.')
pbcG10CmtsDMRGroupRole = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 3, 1, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("active", 1), ("standby", 2), ("excluded", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbcG10CmtsDMRGroupRole.setStatus('current')
if mibBuilder.loadTexts: pbcG10CmtsDMRGroupRole.setDescription('The role of this DOCSIS Module in the Redundancy Group. The active (1) role corresponds to a DOCSIS Module where the external R/F connections terminate and is normally serving the subscribers. The standby (2) role corresponds to a DOCSIS Module that is in a standby mode, and to which the R/F from an active module can be directed in the event of a failure of an active module within the redundancy group. The excluded (3) role implies that the corresponding DOCSIS Module has been instructed by the operator to be excluded from being a member of the Redundancy Group.')
pbcG10CmtsDMRGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 3, 1, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("notPresent", 1), ("offline", 2), ("online", 3), ("failed", 4), ("covering", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbcG10CmtsDMRGroupStatus.setStatus('current')
if mibBuilder.loadTexts: pbcG10CmtsDMRGroupStatus.setDescription('Defines the operational status of the corresponding DOCSIS Module card. The notPresent (1) status implies that the DOCSIS Module has been removed from the system, or was never present in the system. The offline (2) status implies that an operator has shutdown the card either through the CLI, or through the pbcCardTable. The online (3) status means that an active DOCSIS Module is functioning normally; or for a standby card it implies that the DOCSIS Module is functioning normally and is ready to cover an active module in the event of a failure. The failed (4) status implies that a failure had been detected previously. The covering (5) status applies only to a standby module and implies that it is covering for a failed module ')
pbcG10CmtsDMRGroupAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 3, 1, 3, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbcG10CmtsDMRGroupAlias.setStatus('current')
if mibBuilder.loadTexts: pbcG10CmtsDMRGroupAlias.setDescription('For a module in the standby role, this object has a value of 0 if it is not covering any active modules, else it identifies the slot number of the DOCSIS Module that it is covering. For a module in an active role, this object has a value of 0 if it has not failed, or is not being covered by a standby in case of failure, else it identifies the slot number of the standby DOCSIS Module that is covering this module')
pbcG10CmtsDMRGroupAction = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 3, 1, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("excluded", 2), ("include", 3), ("switchIn", 4), ("switchAt", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbcG10CmtsDMRGroupAction.setStatus('current')
if mibBuilder.loadTexts: pbcG10CmtsDMRGroupAction.setDescription('This object allows the operator to take certain actions on the corresponding DOCSIS Module. Action none (1) has no effect on the DOCSIS Module. The exclude (2) action excludes the module as a member of the Redundancy Group. When an active module has been excluded from a Redundancy Group, it can no longer be covered by a standby in the event of a failure. Action exclude (2) cannot be applied on a standby module. The include (3) action nullifies the effect of a previous exclude (2) action. If no exclude (2) action had been taken before for this DOCSIS Module, the include (3) action has no effect. The switchIn (4) action schedules an active module to switch to standby module, or a standby module to switch back to the active module it is covering within the time-period specified by pbcG10CmtsDMRGroupSwitchIn object. For more details, refer to the description of that object. The switchAt (5) action schedules an active module to switch to standby module, or a standby module to switch back to the active module it is covering at a date and time specified by pbcG10CmtsDMRGroupSwitchAt object. For more details, refer to the description of that object. When read back, this object always returns the value none(1) ')
pbcG10CmtsDMRGroupSwitchIn = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 3, 1, 3, 1, 1, 9), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pbcG10CmtsDMRGroupSwitchIn.setStatus('current')
if mibBuilder.loadTexts: pbcG10CmtsDMRGroupSwitchIn.setDescription('When read, this object specifies the time in seconds relative to the current time when a switchover is scheduled for this module, or 0 if no switchover has been scheduled. For an active module, the switchover implies a forced fail-over to the standby module, and for a standby module the switchover implies handing control back to the active module it is covering, if any. When written to in conjunction with a value of switchIn (4) for the object pbcG10CmtsDMRGroupAction, it specifies a time in seconds in which a switchover MUST take place. A value of 0 implies that switchover be started immediately. ')
pbcG10CmtsDMRGroupSwitchAt = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 3, 1, 3, 1, 1, 10), DateAndTime()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pbcG10CmtsDMRGroupSwitchAt.setStatus('current')
if mibBuilder.loadTexts: pbcG10CmtsDMRGroupSwitchAt.setDescription('When read, this object specifies the time when a switchover is scheduled for this module, or an NULL (Hex String 00 00 00 00 00 00 00 00) value if no switchover has been scheduled. For an active module, the switchover implies a forced fail-over to the standby module, and for a standby module the switchover implies handing control back to the active module it is covering, if any. When written to in conjunction with a value of switchAt (4) for the object pbcG10CmtsDMRGroupAction, it specifies a date and time on which a switchover MUST take place. A value of NULL (Hex String 00 00 00 00 00 00 00 00) implies that switchover be started immediately ')
pbcG10CmtsDMRGroupFreeze = MibScalar((1, 3, 6, 1, 4, 1, 5987, 3, 1, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("freeze", 1), ("nofreeze", 2))).clone('nofreeze')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pbcG10CmtsDMRGroupFreeze.setStatus('current')
if mibBuilder.loadTexts: pbcG10CmtsDMRGroupFreeze.setDescription('Writing freeze (1) would disallow all the Redundancy configuration changes. To be able to make configuration changes, this value has to be nofreeze (2).')
pbcG10CmtsCCMRedundancy = MibIdentifier((1, 3, 6, 1, 4, 1, 5987, 3, 1, 4))
pbcG10CmtsCCMRedundancyObject = MibIdentifier((1, 3, 6, 1, 4, 1, 5987, 3, 1, 4, 1))
pbcG10CmtsCCMPrimarySlot = MibScalar((1, 3, 6, 1, 4, 1, 5987, 3, 1, 4, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbcG10CmtsCCMPrimarySlot.setStatus('current')
if mibBuilder.loadTexts: pbcG10CmtsCCMPrimarySlot.setDescription('Identifies the slot number of the CCM Module that is currently in the primary role. ')
pbcG10CmtsCCMAction = MibScalar((1, 3, 6, 1, 4, 1, 5987, 3, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("switchIn", 2), ("switchAt", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pbcG10CmtsCCMAction.setStatus('current')
if mibBuilder.loadTexts: pbcG10CmtsCCMAction.setDescription('This object allows the operator to take certain actions on the CCM Module. Action none (1) has no effect on the CCM Module. The switchIn (2) action schedules the primary CCM to switch to standby or standby CCM to primary within the time-period specified by pbcG10CmtsCcmSwitchIn object. For more details, refer to the description of that object. The switchAt (3) action schedules the primary CCM to switch to standby or standby CCM to primary at a date and time specified by pbcG10CmtsCcmSwitchAt object. For more details, refer to the description of that object. When read back, this object always returns the value none (1). ')
pbcG10CmtsCCMSwitchIn = MibScalar((1, 3, 6, 1, 4, 1, 5987, 3, 1, 4, 1, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pbcG10CmtsCCMSwitchIn.setStatus('current')
if mibBuilder.loadTexts: pbcG10CmtsCCMSwitchIn.setDescription('When read, this object specifies the time in seconds relative to the current time when a switchover is scheduled for the currently active CCM module, or 0 if no switchover has been scheduled. When written to in conjunction with a value of switchIn (2) for the object pbcG10CmtsCCMAction, it specifies a time in seconds in which a switchover MUST take place. A value of 0 implies that switchover be started immediately.')
pbcG10CmtsCCMSwitchAt = MibScalar((1, 3, 6, 1, 4, 1, 5987, 3, 1, 4, 1, 4), DateAndTime()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pbcG10CmtsCCMSwitchAt.setStatus('current')
if mibBuilder.loadTexts: pbcG10CmtsCCMSwitchAt.setDescription('When read, this object specifies the time when a switchover is scheduled for the currently active CCM module, or an NULL (Hex String 00 00 00 00 00 00 00 00) value if no switchover has been scheduled. When written to in conjunction with a value of switchAt (3) for the object pbcG10CmtsCcmAction, it specifies a date and time at which a switchover MUST take place. A value of NULL (Hex String 00 00 00 00 00 00 00 00) implies that switchover be started immediately.')
pbcG10CmtsNICRedundancy = MibIdentifier((1, 3, 6, 1, 4, 1, 5987, 3, 1, 5))
pbcG10CmtsNICRedundancyObject = MibIdentifier((1, 3, 6, 1, 4, 1, 5987, 3, 1, 5, 1))
pbcG10CmtsNICRedundancyEnable = MibScalar((1, 3, 6, 1, 4, 1, 5987, 3, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pbcG10CmtsNICRedundancyEnable.setStatus('current')
if mibBuilder.loadTexts: pbcG10CmtsNICRedundancyEnable.setDescription('Enable/Disable NIC Redundancy for the whole system.')
pbcG10CmtsNicDmConnectivityTable = MibTable((1, 3, 6, 1, 4, 1, 5987, 3, 1, 5, 1, 2), )
if mibBuilder.loadTexts: pbcG10CmtsNicDmConnectivityTable.setStatus('current')
if mibBuilder.loadTexts: pbcG10CmtsNicDmConnectivityTable.setDescription('Table containing information about connectivity between DOCSIS and NIC modules. For every DOCSIS Module in the system there is two entries in this table (One for oddCableInterface and the other for evenCableInterface).')
pbcG10CmtsNicDmConnectivityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5987, 3, 1, 5, 1, 2, 1), ).setIndexNames((0, "PBC-KODIAK-M-G10-MIB", "pbcG10CmtsNicDmConnectivityDmIndex"), (0, "PBC-KODIAK-M-G10-MIB", "pbcG10CmtsNicDmConnectivityCableInterfaceIndex"))
if mibBuilder.loadTexts: pbcG10CmtsNicDmConnectivityEntry.setStatus('current')
if mibBuilder.loadTexts: pbcG10CmtsNicDmConnectivityEntry.setDescription('An entry describing the status of connectivity between DOCSIS Modules and NIC modules. ')
pbcG10CmtsNicDmConnectivityDmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 3, 1, 5, 1, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: pbcG10CmtsNicDmConnectivityDmIndex.setStatus('current')
if mibBuilder.loadTexts: pbcG10CmtsNicDmConnectivityDmIndex.setDescription('A unique identifier that identifies a DOCSIS Module.')
pbcG10CmtsNicDmConnectivityCableInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 3, 1, 5, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("oddCableInterface", 1), ("evenCableInterface", 2))))
if mibBuilder.loadTexts: pbcG10CmtsNicDmConnectivityCableInterfaceIndex.setStatus('current')
if mibBuilder.loadTexts: pbcG10CmtsNicDmConnectivityCableInterfaceIndex.setDescription('Cable Connectivity mode index to differentiate between Odd and Even cable interfaces in the DOCSIS Module. 1. oddCableInterfaces (1) meaning all odd numbered cable interfaces in the DOCSIS Modules are connected to the NIC modules specified by the pbcCmtsDmConnectTo. 2. evenCableInterfaces (2) meaning all even numbered cable interfaces in the DOCSIS Modulesare connected to the NIC modules specified by the pbcCmtsDmConnectTo. ')
pbcG10CmtsNicDmConnectivityDmCardSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 3, 1, 5, 1, 2, 1, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pbcG10CmtsNicDmConnectivityDmCardSlotNumber.setStatus('current')
if mibBuilder.loadTexts: pbcG10CmtsNicDmConnectivityDmCardSlotNumber.setDescription('Slot Number where the DOCSIS Modules resides in the chassis.')
pbcG10CmtsNicDmConnectivityConnectTo = MibTableColumn((1, 3, 6, 1, 4, 1, 5987, 3, 1, 5, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("nic5", 1), ("nic9", 2), ("rf45a", 3), ("rf45b", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pbcG10CmtsNicDmConnectivityConnectTo.setStatus('current')
if mibBuilder.loadTexts: pbcG10CmtsNicDmConnectivityConnectTo.setDescription('The DOCSIS Module connects to the NIC module in slot 5 if pbcG10CmtsNicDmConnectivityConnectTo is nic5 (1), or NIC module in slot 9 if pbcG10CmtsNicDmConnectivityConnectTo is nic9 (2). or RJ45 Port-a if pbcG10CmtsNicDmConnectivityConnectTo is rj45a (3). or RJ45 Port-b if pbcG10CmtsNicDmConnectivityConnectTo is rj45b (4). ')
mibBuilder.exportSymbols("PBC-KODIAK-M-G10-MIB", pbcG10CmtsNicDmConnectivityTable=pbcG10CmtsNicDmConnectivityTable, pbcG10SystemGroups=pbcG10SystemGroups, pbcG10CmtsDMRGroupSwitchAt=pbcG10CmtsDMRGroupSwitchAt, pbcG10CmtsDMRGroupSlotNbr=pbcG10CmtsDMRGroupSlotNbr, pbcG10SystemEnvMon=pbcG10SystemEnvMon, systemEnvMonPowerSupplyEntityIndex=systemEnvMonPowerSupplyEntityIndex, systemEnvMonPowerSupplyStatus=systemEnvMonPowerSupplyStatus, pbcG10CmtsDMRGroupDmCardIndex=pbcG10CmtsDMRGroupDmCardIndex, pbcG10CmtsNICRedundancyEnable=pbcG10CmtsNICRedundancyEnable, systemEnvMonFanStatusNumEntries=systemEnvMonFanStatusNumEntries, pbcG10RedundancyCompliance=pbcG10RedundancyCompliance, systemEnvMonAmbientTermperatureNumEntries=systemEnvMonAmbientTermperatureNumEntries, pbcG10CmtsDMRGroupStatus=pbcG10CmtsDMRGroupStatus, systemEnvMonFanTrayStatusNumEntries=systemEnvMonFanTrayStatusNumEntries, pbcG10CmtsCCMRedundancyObject=pbcG10CmtsCCMRedundancyObject, pbcG10CmtsNicDmConnectivityDmCardSlotNumber=pbcG10CmtsNicDmConnectivityDmCardSlotNumber, pbcKodiakMG10Cmts=pbcKodiakMG10Cmts, pbcSystemEnvMonGroup=pbcSystemEnvMonGroup, PYSNMP_MODULE_ID=pbcKodiakMG10Mib, pbcG10CmtsCCMPrimarySlot=pbcG10CmtsCCMPrimarySlot, pbcG10SystemBasicCompliance=pbcG10SystemBasicCompliance, pbcG10SystemCompliance=pbcG10SystemCompliance, pbcG10CmtsDMRGroupAction=pbcG10CmtsDMRGroupAction, systemEnvMonAmbientTemperature=systemEnvMonAmbientTemperature, pbcG10CmtsDMRGroupImCardIndex=pbcG10CmtsDMRGroupImCardIndex, pbcG10CmtsNICRedundancy=pbcG10CmtsNICRedundancy, systemEnvMonFanStatusTable=systemEnvMonFanStatusTable, sytemEnvMonObjects=sytemEnvMonObjects, systemEnvMonAmbientTemperatureLowThreshold=systemEnvMonAmbientTemperatureLowThreshold, pbcG10DMRedundancy=pbcG10DMRedundancy, pbcG10CmtsDMRGroupTable=pbcG10CmtsDMRGroupTable, pbcG10CmtsCCMAction=pbcG10CmtsCCMAction, systemEnvMonFanTrayStatusEntry=systemEnvMonFanTrayStatusEntry, systemEnvMonAmbientTemperatureEntry=systemEnvMonAmbientTemperatureEntry, pbcG10RedundancyGroup=pbcG10RedundancyGroup, pbcG10CmtsNicDmConnectivityEntry=pbcG10CmtsNicDmConnectivityEntry, pbcG10CmtsDMRGroupSwitchIn=pbcG10CmtsDMRGroupSwitchIn, pbcG10SystemConformance=pbcG10SystemConformance, pbcG10CmtsDMRGroupRole=pbcG10CmtsDMRGroupRole, systemEnvMonAmbientTemperatureTable=systemEnvMonAmbientTemperatureTable, systemEnvMonFanStatusEntry=systemEnvMonFanStatusEntry, pbcG10CmtsCCMSwitchIn=pbcG10CmtsCCMSwitchIn, pbcG10CmtsDMRGroupFreeze=pbcG10CmtsDMRGroupFreeze, pbcG10CmtsCCMSwitchAt=pbcG10CmtsCCMSwitchAt, pbcG10CmtsNICRedundancyObject=pbcG10CmtsNICRedundancyObject, systemEnvMonFanStatusIndex=systemEnvMonFanStatusIndex, systemEnvMonFanTrayStatusTable=systemEnvMonFanTrayStatusTable, pbcG10CmtsCCMRedundancy=pbcG10CmtsCCMRedundancy, pbcG10CmtsNicDmConnectivityConnectTo=pbcG10CmtsNicDmConnectivityConnectTo, pbcG10CmtsDMRGroupEntry=pbcG10CmtsDMRGroupEntry, pbcG10CmtsDMRGroupAlias=pbcG10CmtsDMRGroupAlias, pbcG10CmtsNicDmConnectivityCableInterfaceIndex=pbcG10CmtsNicDmConnectivityCableInterfaceIndex, systemEnvMonFanStatusSpeed=systemEnvMonFanStatusSpeed, systemEnvMonPowerSupply=systemEnvMonPowerSupply, pbcKodiakMG10Mib=pbcKodiakMG10Mib, systemEnvMonTemperature=systemEnvMonTemperature, pbcG10CmtsNicDmConnectivityDmIndex=pbcG10CmtsNicDmConnectivityDmIndex, systemEnvMonFanTrayStatusIndex=systemEnvMonFanTrayStatusIndex, systemEnvMonAmbientTemperatureHighThreshold=systemEnvMonAmbientTemperatureHighThreshold, pbcG10CmtsDMRGroupIndex=pbcG10CmtsDMRGroupIndex, systemEnvMonFanTrayStatusEntityIndex=systemEnvMonFanTrayStatusEntityIndex)
