#
# PySNMP MIB module ROUTING-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ROUTING-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:58:26 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
routing, = mibBuilder.importSymbols("CORIOLIS-MIB", "routing")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ModuleIdentity, Unsigned32, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, MibIdentifier, IpAddress, Gauge32, TimeTicks, Integer32, NotificationType, Bits, iso, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Unsigned32", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "MibIdentifier", "IpAddress", "Gauge32", "TimeTicks", "Integer32", "NotificationType", "Bits", "iso", "Counter32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
routingMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 5812, 7, 1))
if mibBuilder.loadTexts: routingMIB.setLastUpdated('0007270000Z')
if mibBuilder.loadTexts: routingMIB.setOrganization('Coriolis Networks')
if mibBuilder.loadTexts: routingMIB.setContactInfo(' Shubhra Garg Postal: 330 Codman Hill Road, Boxboro MA, 01719. Tel: +1 978 264 1904 Fax: +1 978 264 1929 E-mail: shubhra@coriolisnet.com')
if mibBuilder.loadTexts: routingMIB.setDescription('The MIB module for coriolis proprietary routing variables')
routeAdvPrefixTable = MibTable((1, 3, 6, 1, 4, 1, 5812, 7, 2), )
if mibBuilder.loadTexts: routeAdvPrefixTable.setStatus('current')
if mibBuilder.loadTexts: routeAdvPrefixTable.setDescription('The routing prefix table. For NEs(including the GNE) whose subnet number is included in this table, the subnet route gets added to the routing tables and propagated by routing protocols rather than the host route')
routeAdvPrefixEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5812, 7, 2, 1), ).setIndexNames((0, "ROUTING-MIB", "routeAdvSummAddr"), (0, "ROUTING-MIB", "routeAdvSummMask"))
if mibBuilder.loadTexts: routeAdvPrefixEntry.setStatus('current')
if mibBuilder.loadTexts: routeAdvPrefixEntry.setDescription('Entry containing information about subnet numbers and the corresponding masks')
routeAdvSummAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 7, 2, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routeAdvSummAddr.setStatus('current')
if mibBuilder.loadTexts: routeAdvSummAddr.setDescription(' The subnet number, used as an index in the table ')
routeAdvSummMask = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 7, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routeAdvSummMask.setStatus('current')
if mibBuilder.loadTexts: routeAdvSummMask.setDescription(' The subnet mask, used as an index in the table ')
routeAdvSummRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 7, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("invalid", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: routeAdvSummRowStatus.setStatus('current')
if mibBuilder.loadTexts: routeAdvSummRowStatus.setDescription(' The row status is used to add entries to the prefix table or delete those entries ')
routeAdvSummRipAdminCost = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 7, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: routeAdvSummRipAdminCost.setStatus('current')
if mibBuilder.loadTexts: routeAdvSummRipAdminCost.setDescription(' This parameter is the RIP metric that is used when the entry is added to the RIP routing table ')
routeAdvSummOspfAdminCost = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 7, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: routeAdvSummOspfAdminCost.setStatus('current')
if mibBuilder.loadTexts: routeAdvSummOspfAdminCost.setDescription(' This parameter is the OSPF metric that is used when the entry is added to the RIP routing table ')
routeAdvSummNumSuppressedRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 7, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: routeAdvSummNumSuppressedRoutes.setStatus('current')
if mibBuilder.loadTexts: routeAdvSummNumSuppressedRoutes.setDescription(' This is the number of host routes that have been suppressed by this prefix route if this prefix route has been added to the RIP routing table. ')
mibBuilder.exportSymbols("ROUTING-MIB", routingMIB=routingMIB, routeAdvSummAddr=routeAdvSummAddr, routeAdvSummRipAdminCost=routeAdvSummRipAdminCost, routeAdvSummMask=routeAdvSummMask, routeAdvSummOspfAdminCost=routeAdvSummOspfAdminCost, routeAdvSummRowStatus=routeAdvSummRowStatus, routeAdvSummNumSuppressedRoutes=routeAdvSummNumSuppressedRoutes, routeAdvPrefixEntry=routeAdvPrefixEntry, PYSNMP_MODULE_ID=routingMIB, routeAdvPrefixTable=routeAdvPrefixTable)
