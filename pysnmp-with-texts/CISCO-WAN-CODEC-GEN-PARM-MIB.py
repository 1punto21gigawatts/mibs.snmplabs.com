#
# PySNMP MIB module CISCO-WAN-CODEC-GEN-PARM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-WAN-CODEC-GEN-PARM-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:20:22 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint")
ciscoWan, = mibBuilder.importSymbols("CISCOWAN-SMI", "ciscoWan")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
Integer32, Gauge32, Bits, iso, ObjectIdentity, TimeTicks, ModuleIdentity, Unsigned32, Counter64, Counter32, IpAddress, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "Gauge32", "Bits", "iso", "ObjectIdentity", "TimeTicks", "ModuleIdentity", "Unsigned32", "Counter64", "Counter32", "IpAddress", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
ciscoWanCodecGenParmMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 351, 150, 21))
ciscoWanCodecGenParmMIB.setRevisions(('2004-03-17 00:00', '2004-01-30 00:00', '2003-05-23 00:00', '2001-09-10 00:00', '2001-08-21 15:00', '2001-08-02 15:00', '2001-06-15 15:00', '2001-03-20 15:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoWanCodecGenParmMIB.setRevisionsDescriptions(('Add new enums to vismCodecJitterInitialDelay in order to support lossless codec. Updated vismCodecJitterInitialDelay description. ', '1. Update descriptions in MIB. 2. added jitter with fixed timestamp to vismCodecJitterDelayMode. ', 'added Lossless codec. ', 'added codec G723 family. ', 'added codecGenParmNotifications entry. ', 'description modification and LAST-UPDATED modify. ', "changed the name to from 'codec jitter' to 'codec gen parm' so that this table can be used for all non application specific per codec based MIB objects. ", 'Initial draft. ',))
if mibBuilder.loadTexts: ciscoWanCodecGenParmMIB.setLastUpdated('200403170000Z')
if mibBuilder.loadTexts: ciscoWanCodecGenParmMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoWanCodecGenParmMIB.setContactInfo(' Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-vism@cisco.com')
if mibBuilder.loadTexts: ciscoWanCodecGenParmMIB.setDescription('This MIB provides configuration of Jitter buffer mode on a call and initial jitter delay value per Codec based. Prior to this, the configuration are specify on a Card based. The Card level objects vismJitterDelayMode and vismJitterInitialDelay in CISCO-VISM-MODULE-MIB are now deprecated. ')
ciscoWanCodecGenParmMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 150, 21, 1))
vismCodecGenParmGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 150, 21, 1, 1))
vismCodecGenParmTable = MibTable((1, 3, 6, 1, 4, 1, 351, 150, 21, 1, 1, 1), )
if mibBuilder.loadTexts: vismCodecGenParmTable.setStatus('current')
if mibBuilder.loadTexts: vismCodecGenParmTable.setDescription('vismCodecGenParmTable contains configuration information about per codec based general parameters regardless of its application. ')
vismCodecGenParmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 150, 21, 1, 1, 1, 1), ).setIndexNames((0, "CISCO-WAN-CODEC-GEN-PARM-MIB", "vismCodecIndex"))
if mibBuilder.loadTexts: vismCodecGenParmEntry.setStatus('current')
if mibBuilder.loadTexts: vismCodecGenParmEntry.setDescription('User can modify the parameters at any time. If there are active calls going on, the new settings will not take affect until the next call. The last modified values are retained when VISM card reboots. ')
vismCodecIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 21, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("g711u", 1), ("g711a", 2), ("g726r32000", 3), ("g729a", 4), ("g729ab", 5), ("clearChannel", 6), ("g726r16000", 7), ("g726r24000", 8), ("g726r40000", 9), ("g723h", 11), ("g723ah", 12), ("g723l", 13), ("g723al", 14), ("lossless", 15))))
if mibBuilder.loadTexts: vismCodecIndex.setStatus('current')
if mibBuilder.loadTexts: vismCodecIndex.setDescription('This is the index to this table. 1 represents G.711u 2 represents G.711a 3 represents G.726 at rate 32 kbps 4 represents G.729a 5 represents G.729ab 6 represents clear channel 7 represents G.726 at rate 16 kbps 8 represents G.726 at rate 24 kbps 9 represents G.726 at rate 40 kbps 10 is RESERVED 11 represents G.723.1-H 12 represents G.723.1a-H 13 represents G.723.1-L 14 represents G.723.1a-L 15 represents Lossless ')
vismCodecJitterDelayMode = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 21, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("fixed", 1), ("adaptive", 2), ("fixedWithTimeStamp", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismCodecJitterDelayMode.setStatus('current')
if mibBuilder.loadTexts: vismCodecJitterDelayMode.setDescription("This object is used to provision the jitter buffer mode to be apply to a call connection. The possible values are: 'fixed' : means use a constant jitter buffer size, which is defined by the vismJitterInitialDelay (specify in CISCO-VISM-MODULE-MIB MIB) variable. The DSP will be instructed to use fixed with no time-stamps mode. 'adaptive': means let the DSP pick the optimal value for the call connection. 'fixedWithTimeStamp': means use a constant jitter buffer size, which is defined by the vismJitterInitialDelay variable. The DSP will be instructed to use fixed with time-stamps mode. For 'g711u', 'g711a', 'clearChannel', and 'lossless' the default value is fixed. For 'g726r32000', 'g729a', 'g729ab', 'g726r16000', 'g726r24000','g726r40000', 'g723h','g723l', 'g723ah' and 'g723al' the default value is adaptive. ")
vismCodecJitterInitialDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 21, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100))).clone(namedValues=NamedValues(("zero", 1), ("two", 2), ("three", 3), ("four", 4), ("five", 5), ("six", 6), ("seven", 7), ("eight", 8), ("nine", 9), ("ten", 10), ("eleven", 11), ("twelve", 12), ("thirteen", 13), ("fourteen", 14), ("fifteen", 15), ("sixteen", 16), ("seventeen", 17), ("eighteen", 18), ("nineteen", 19), ("twenty", 20), ("twentyone", 21), ("twentytwo", 22), ("twentythree", 23), ("twentyfour", 24), ("twentyfive", 25), ("twentysix", 26), ("twentyseven", 27), ("twentyeight", 28), ("twentynine", 29), ("thirty", 30), ("thirtyone", 31), ("thirtytwo", 32), ("thirtythree", 33), ("thirtyfour", 34), ("thirtyfive", 35), ("thirtysix", 36), ("thirtyseven", 37), ("thirtyeight", 38), ("thirtynine", 39), ("fourty", 40), ("fortyone", 41), ("fortytwo", 42), ("fortythree", 43), ("fortyfour", 44), ("fortyfive", 45), ("fortysix", 46), ("fortyseven", 47), ("fortyeight", 48), ("fortynine", 49), ("fifty", 50), ("fiftyfive", 55), ("sixty", 60), ("sixtyfive", 65), ("seventy", 70), ("seventyfive", 75), ("eighty", 80), ("eightyfive", 85), ("ninty", 90), ("ninetyfive", 95), ("hundred", 100)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismCodecJitterInitialDelay.setStatus('current')
if mibBuilder.loadTexts: vismCodecJitterInitialDelay.setDescription("This object defines the jitter buffer size in milliseconds. If the vismCodecJitterDelayMode is set to be 'fixed', the jitter buffer is fixed at this value for the duration of the call, if it is set to 'adaptive', the value of this object is the initial jitter buffer size, and the DSP will adapt to an optimal size dynamically. For G.711u, G.711a, Clear Channel, the default value is 100 ms. For lossless the default value is 16ms. For 'g726r32000', 'g729a', 'g729ab', 'g726r16000', 'g726r24000','g726r40000', 'g723h','g723l', 'g723ah' and 'g723al' the default value is 60 ms. The jitter buffer size of this object differs for each set of codecs supported on VISM card. A set of codecs supported is identified by vismCodecTemplateNum object(defined in CISCO-VISM-CODEC-MIB MIB). For codecs in template number 1, 3, 4, and 5: the jitter buffer size is as follow: 'zero', 'five', 'ten' 'fifteen', 'twenty', 'thirty', 'fourty', 'fifty', 'sixty', 'seventy', 'eighty', 'ninty', 'hundred'. For codecs in template 2, the jitter buffer size is as follow: 'zero', 'five', 'ten', 'fifteen', 'twenty', 'twentyfive', 'thirty', 'thirtyfive', 'fourty', 'fortyfive', 'fifty', 'fiftyfive', 'sixty', 'sixtyfive', 'seventy', 'seventyfive', 'eighty', 'eightyfive', 'ninty', 'ninetyfive', 'hundred'. When the codec template changes, the value of this object will be implicitly set to the default value. ")
vismCodecGenParmNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 150, 21, 2))
vismCodecGenParmNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 150, 21, 2, 0))
vismCodecGenParmMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 150, 21, 3))
vismCodecGenParmMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 150, 21, 3, 1))
vismCodecGenParmMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 150, 21, 3, 2))
vismCodecGenParmMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 351, 150, 21, 3, 1, 1)).setObjects(("CISCO-WAN-CODEC-GEN-PARM-MIB", "vismCodecGenParmGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vismCodecGenParmMIBCompliance = vismCodecGenParmMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: vismCodecGenParmMIBCompliance.setDescription('The complaince statement for VISM codec general parameter group. ')
vismCodecGenParmGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 150, 21, 3, 2, 1)).setObjects(("CISCO-WAN-CODEC-GEN-PARM-MIB", "vismCodecJitterDelayMode"), ("CISCO-WAN-CODEC-GEN-PARM-MIB", "vismCodecJitterInitialDelay"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vismCodecGenParmGroup = vismCodecGenParmGroup.setStatus('current')
if mibBuilder.loadTexts: vismCodecGenParmGroup.setDescription('This group contains objects that is per codec based and non application specific. ')
mibBuilder.exportSymbols("CISCO-WAN-CODEC-GEN-PARM-MIB", vismCodecGenParmMIBCompliances=vismCodecGenParmMIBCompliances, vismCodecGenParmNotificationPrefix=vismCodecGenParmNotificationPrefix, vismCodecIndex=vismCodecIndex, vismCodecGenParmMIBGroups=vismCodecGenParmMIBGroups, vismCodecGenParmEntry=vismCodecGenParmEntry, vismCodecJitterDelayMode=vismCodecJitterDelayMode, vismCodecJitterInitialDelay=vismCodecJitterInitialDelay, vismCodecGenParmMIBConformance=vismCodecGenParmMIBConformance, vismCodecGenParmTable=vismCodecGenParmTable, ciscoWanCodecGenParmMIBObjects=ciscoWanCodecGenParmMIBObjects, vismCodecGenParmGrp=vismCodecGenParmGrp, vismCodecGenParmNotifications=vismCodecGenParmNotifications, ciscoWanCodecGenParmMIB=ciscoWanCodecGenParmMIB, vismCodecGenParmGroup=vismCodecGenParmGroup, PYSNMP_MODULE_ID=ciscoWanCodecGenParmMIB, vismCodecGenParmMIBCompliance=vismCodecGenParmMIBCompliance)
