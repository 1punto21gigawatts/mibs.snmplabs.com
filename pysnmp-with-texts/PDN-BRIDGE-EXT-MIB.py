#
# PySNMP MIB module PDN-BRIDGE-EXT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/PDN-BRIDGE-EXT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:38:12 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint")
dot1dBasePort, dot1dBasePortEntry = mibBuilder.importSymbols("BRIDGE-MIB", "dot1dBasePort", "dot1dBasePortEntry")
pdn_common, = mibBuilder.importSymbols("PDN-HEADER-MIB", "pdn-common")
PdnTestAndIncrDerivedIndexTC, = mibBuilder.importSymbols("PDN-TC", "PdnTestAndIncrDerivedIndexTC")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
Counter64, Gauge32, ObjectIdentity, ModuleIdentity, TimeTicks, Counter32, NotificationType, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, Integer32, Bits, MibIdentifier, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "Gauge32", "ObjectIdentity", "ModuleIdentity", "TimeTicks", "Counter32", "NotificationType", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "Integer32", "Bits", "MibIdentifier", "Unsigned32")
TestAndIncr, RowStatus, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TestAndIncr", "RowStatus", "DisplayString", "TextualConvention")
pdnBridgeExtMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 58))
pdnBridgeExtMIB.setRevisions(('2005-10-26 00:00', '2005-10-05 00:00', '2005-09-29 00:00', '2005-09-12 00:00', '2005-08-15 00:00', '2004-12-10 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: pdnBridgeExtMIB.setRevisionsDescriptions(('VLAN stacking (Q in Q) extentions for Dot1dBasePort.', 'Added IMPLIED keyword to index for the pdnDot1dTrafficProfileInvMappingTable.', 'Change the size restriction for pdnDot1dTrafficProfileName such that a zero-length string is not supported.', 'Added a Layer 2 Traffic Profile Group to support the configuration of attributes associated with traffic profiles.', 'Added pdnDot1dBasePortUnknownMulticastForwardingMode to direct what to do with unknown layer 2 multicast frames.', 'Initial release.',))
if mibBuilder.loadTexts: pdnBridgeExtMIB.setLastUpdated('200510260000Z')
if mibBuilder.loadTexts: pdnBridgeExtMIB.setOrganization('Paradyne Networks MIB Working Group Other information about group editing the MIB')
if mibBuilder.loadTexts: pdnBridgeExtMIB.setContactInfo('Paradyne Networks, Inc. 8545 126th Avenue North Largo, FL 33733 www.paradyne.com General Comments to: mibwg_team@paradyne.com Editors Clay Sikes, Jesus Pinto, Dave Hammers, Prakash Easwar')
if mibBuilder.loadTexts: pdnBridgeExtMIB.setDescription('This MIB module provides objects that extend the BRIDGE-MIB. ==================================================== == == == Copyright (C) 2005 Zhone Technologies, Inc == == == ====================================================')
pdnBridgeExtNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 58, 0))
pdnBridgeExtObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 58, 1))
pdnBridgeExtAFNs = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 58, 2))
pdnBridgeExtConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 58, 3))
pdnDot1dTrafficProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 58, 1, 2))
pdnDot1dBasePortExtTable = MibTable((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 58, 1, 1), )
if mibBuilder.loadTexts: pdnDot1dBasePortExtTable.setStatus('current')
if mibBuilder.loadTexts: pdnDot1dBasePortExtTable.setDescription('Extends the dot1dBasePortTable in the BRIDGE-MIB.')
pdnDot1dBasePortExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 58, 1, 1, 1), )
dot1dBasePortEntry.registerAugmentions(("PDN-BRIDGE-EXT-MIB", "pdnDot1dBasePortExtEntry"))
pdnDot1dBasePortExtEntry.setIndexNames(*dot1dBasePortEntry.getIndexNames())
if mibBuilder.loadTexts: pdnDot1dBasePortExtEntry.setStatus('current')
if mibBuilder.loadTexts: pdnDot1dBasePortExtEntry.setDescription('An entry in the dot1dBasePortTable Table.')
pdnDot1dBasePortMaxFdbEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 58, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdnDot1dBasePortMaxFdbEntries.setStatus('current')
if mibBuilder.loadTexts: pdnDot1dBasePortMaxFdbEntries.setDescription("This object configures the maximum number of entries in the bridge port's Forwarding Database. The value `0' is a special case that indicates that there is no limit to the number of entries in the database.")
pdnDot1dBasePortRole = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 58, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("subscriber", 1), ("network", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdnDot1dBasePortRole.setStatus('current')
if mibBuilder.loadTexts: pdnDot1dBasePortRole.setDescription('This object defines the role of a bridge port. The role on a bridge port role can be defined as subscriber or network as follows: Subscriber: ---------- A port on the IP DSLAM or Aggregator that faces toward or directly connects to a DSL interface on which an end user (subscriber) would be located. This would typically be the DSL ports directly on a unit or the ports on an aggregator that connect to another DSLAM. Network: ------- A Port that connects to the service providers network, aggregation device or to a shared resource such as a server. ')
pdnDot1dBasePortUnknownMulticastForwardingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 58, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("flood", 1), ("drop", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdnDot1dBasePortUnknownMulticastForwardingMode.setStatus('current')
if mibBuilder.loadTexts: pdnDot1dBasePortUnknownMulticastForwardingMode.setDescription("Configures the layer 2 unknown multicast forwarding mode. A layer 2 frame is `unknown' if there is no entry in the Forwarding Database which identifies the set of ports to forward the multicast frame on. When set to `flood(1)', the `unknown' multicast frame will be forwarded on all bridge ports. When set to `drop(2)', the `unknown' multicast frame will be dropped and not be forwarded on any bridge port.")
pdnDot1dBasePortOuterTag = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 58, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdnDot1dBasePortOuterTag.setStatus('current')
if mibBuilder.loadTexts: pdnDot1dBasePortOuterTag.setDescription('When VLAN stacking (Q in Q) is desired for untagged packets on a port, this object contains the value of the outer 802.1q VLAN outer tag. A value of zero (0) indicates that VLAN stacking is not enabled.')
pdnDot1dBasePortOuterPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 58, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdnDot1dBasePortOuterPriority.setStatus('current')
if mibBuilder.loadTexts: pdnDot1dBasePortOuterPriority.setDescription('When VLAN stacking (Q in Q) is desired for untagged packets on a port, this object contains the value of the priority bits in the 802.1q VLAN outer tag. If pdnDot1dBasePortOuterTag (above) is zero (0) this object is ignored.')
pdnDot1dBasePortOuterEthertype = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 58, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(33024)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdnDot1dBasePortOuterEthertype.setStatus('current')
if mibBuilder.loadTexts: pdnDot1dBasePortOuterEthertype.setDescription('When VLAN stacking (Q in Q) is desired for untagged packets on a port, this object contains the value of the ethertype in the 802.1q VLAN outer tag. If pdnDot1dBasePortOuterTag (above) is zero (0) this object is ignored.')
pdnDot1dTrafficProfileNextIndex = MibScalar((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 58, 1, 2, 1), TestAndIncr()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdnDot1dTrafficProfileNextIndex.setStatus('current')
if mibBuilder.loadTexts: pdnDot1dTrafficProfileNextIndex.setDescription('This object is used to establish the next unused index (pdnDot1dTrafficProfileIndex) for the pdnDot1dTrafficProfileTable. This object is used to assist the manager in selecting a value for pdnDot1dTrafficProfileIndex. Because this object is of syntax TestAndIncr (see the SNMPv2-TC document, RFC 2579), it can also be used to avoid race conditions with multiple managers trying to create rows in the table. If the result of the SET for pdnDot1dTrafficProfileIndex is not success, this means the value has been changed from index (i.e. another manager used the value), so a new value is required. The algorithm is: done = false while done == false index = GET (pdnDot1dTrafficProfileNextIndex.0) SET (pdnDot1dTrafficProfileNextIndex.0=index) if (set failed) done = false else pdnDot1dTrafficProfileRowStatus.index=createAndGo SET (pdnDot1dTrafficProfileRowStatus.index) if (set failed) done = false else done = true other error handling This description was modeled from RFC2494, DS0BUNDLE-MIB.')
pdnDot1dTrafficProfileTable = MibTable((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 58, 1, 2, 2), )
if mibBuilder.loadTexts: pdnDot1dTrafficProfileTable.setStatus('current')
if mibBuilder.loadTexts: pdnDot1dTrafficProfileTable.setDescription('The Paradyne Layer 2 Traffic Profile Table. Provides attributes for traffic profiles for MAC bridges based on the IEEE 802.1D standard.')
pdnDot1dTrafficProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 58, 1, 2, 2, 1), ).setIndexNames((0, "PDN-BRIDGE-EXT-MIB", "pdnDot1dTrafficProfileIndex"))
if mibBuilder.loadTexts: pdnDot1dTrafficProfileEntry.setStatus('current')
if mibBuilder.loadTexts: pdnDot1dTrafficProfileEntry.setDescription('Each entry represents a particular traffic profile. Another table in this module will map to entries in this table.')
pdnDot1dTrafficProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 58, 1, 2, 2, 1, 1), PdnTestAndIncrDerivedIndexTC())
if mibBuilder.loadTexts: pdnDot1dTrafficProfileIndex.setStatus('current')
if mibBuilder.loadTexts: pdnDot1dTrafficProfileIndex.setDescription('A unique identifier for a table entry. This object is expected to be derived from the use of pdnDot1dTrafficProfileNextIndex object above.')
pdnDot1dTrafficProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 58, 1, 2, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pdnDot1dTrafficProfileRowStatus.setStatus('current')
if mibBuilder.loadTexts: pdnDot1dTrafficProfileRowStatus.setDescription('This object allows create, change, and delete operations on the table. The delete operation can only occur when the pdnDot1dTrafficProfileNbrRefs is 0 meaning that there are no references to this particular traffic profile.')
pdnDot1dTrafficProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 58, 1, 2, 2, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pdnDot1dTrafficProfileName.setStatus('current')
if mibBuilder.loadTexts: pdnDot1dTrafficProfileName.setDescription('An alphanumeric string to name the profile for the table entry.')
pdnDot1dTrafficProfileNbrRefs = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 58, 1, 2, 2, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnDot1dTrafficProfileNbrRefs.setStatus('current')
if mibBuilder.loadTexts: pdnDot1dTrafficProfileNbrRefs.setDescription('The number of entries in the Traffic Profile Mapping Table that reference this traffic profile entry.')
pdnDot1dTrafficProfileTrafficClass = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 58, 1, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("data", 1), ("video", 2), ("voice", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pdnDot1dTrafficProfileTrafficClass.setStatus('current')
if mibBuilder.loadTexts: pdnDot1dTrafficProfileTrafficClass.setDescription('The classification of traffic the entry is to be associated with.')
pdnDot1dTrafficProfileMaxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 58, 1, 2, 2, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setUnits('bps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: pdnDot1dTrafficProfileMaxRate.setStatus('current')
if mibBuilder.loadTexts: pdnDot1dTrafficProfileMaxRate.setDescription("The maximum rate attribute in bits per second. This provides `rate limiting' functionality. If the value of this object is `0', then this attribute is not applied to the traffic profile. That is, the traffic classified for this entry in the table is not `rate limited'.")
pdnDot1dTrafficProfileInvMappingTable = MibTable((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 58, 1, 2, 3), )
if mibBuilder.loadTexts: pdnDot1dTrafficProfileInvMappingTable.setStatus('current')
if mibBuilder.loadTexts: pdnDot1dTrafficProfileInvMappingTable.setDescription('This table identifies the mapping from a profile name (pdnDot1dTrafficProfileName) to a profile index (pdnDot1dTrafficProfileIndex).')
pdnDot1dTrafficProfileInvMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 58, 1, 2, 3, 1), ).setIndexNames((1, "PDN-BRIDGE-EXT-MIB", "pdnDot1dTrafficProfileName"))
if mibBuilder.loadTexts: pdnDot1dTrafficProfileInvMappingEntry.setStatus('current')
if mibBuilder.loadTexts: pdnDot1dTrafficProfileInvMappingEntry.setDescription('Each entry represents the profile index that is mapped from the profile name.')
pdnDot1dTrafficProfileInvIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 58, 1, 2, 3, 1, 1), PdnTestAndIncrDerivedIndexTC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnDot1dTrafficProfileInvIndex.setStatus('current')
if mibBuilder.loadTexts: pdnDot1dTrafficProfileInvIndex.setDescription('The profile index that corresponds to the table entry.')
pdnDot1dTrafficProfileMappingTable = MibTable((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 58, 1, 2, 4), )
if mibBuilder.loadTexts: pdnDot1dTrafficProfileMappingTable.setStatus('current')
if mibBuilder.loadTexts: pdnDot1dTrafficProfileMappingTable.setDescription('Maps a MAC bridge port and traffic class to an entry in the Traffic Profile Table (pdnDot1dTrafficProfileTable).')
pdnDot1dTrafficProfileMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 58, 1, 2, 4, 1), ).setIndexNames((0, "BRIDGE-MIB", "dot1dBasePort"), (0, "PDN-BRIDGE-EXT-MIB", "pdnDot1dTrafficProfileMappingSubPort"))
if mibBuilder.loadTexts: pdnDot1dTrafficProfileMappingEntry.setStatus('current')
if mibBuilder.loadTexts: pdnDot1dTrafficProfileMappingEntry.setDescription('An entry maps a MAC bridge port and a subport to a traffic class profile. The pdnDot1dTrafficProfileNbrRefs object in the pdnDot1dTrafficProfileTable indicates the number of entries in this table that references or maps to a particular entry in the pdnDot1dTrafficProfileTable.')
pdnDot1dTrafficProfileMappingSubPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 58, 1, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: pdnDot1dTrafficProfileMappingSubPort.setStatus('current')
if mibBuilder.loadTexts: pdnDot1dTrafficProfileMappingSubPort.setDescription("The subport portion of the entry definition. Subports are supported in implementations where MAC bridge ports can be subdivided. Implementations that do not support the subdividing of MAC bridge ports should set this object to `1'.")
pdnDot1dTrafficProfileMappingRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 58, 1, 2, 4, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pdnDot1dTrafficProfileMappingRowStatus.setStatus('current')
if mibBuilder.loadTexts: pdnDot1dTrafficProfileMappingRowStatus.setDescription('This object allows create, change, and delete operations on the table.')
pdnDot1dTrafficProfileMappingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 58, 1, 2, 4, 1, 3), PdnTestAndIncrDerivedIndexTC()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pdnDot1dTrafficProfileMappingIndex.setStatus('current')
if mibBuilder.loadTexts: pdnDot1dTrafficProfileMappingIndex.setDescription('The traffic profile in the pdnDot1dTrafficProfileTable, identified by the pdnDot1dTrafficProfileIndex that this entry maps to.')
pdnBridgeExtCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 58, 3, 1))
pdnBridgeExtGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 58, 3, 2))
pdnBridgeExtCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 58, 3, 1, 1)).setObjects(("PDN-BRIDGE-EXT-MIB", "pdnDot1dBasePortMaxFdbEntriesGroup"), ("PDN-BRIDGE-EXT-MIB", "pdnDot1dBasePortRoleGroup"), ("PDN-BRIDGE-EXT-MIB", "pdnDot1dBasePortUnknownMulticastForwardingModeGroup"), ("PDN-BRIDGE-EXT-MIB", "pdnDot1dTrafficProfileBasicGroup"), ("PDN-BRIDGE-EXT-MIB", "pdnDot1dTrafficProfileMaxRateGroup"), ("PDN-BRIDGE-EXT-MIB", "pdnDot1dQinQVlanGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pdnBridgeExtCompliance = pdnBridgeExtCompliance.setStatus('current')
if mibBuilder.loadTexts: pdnBridgeExtCompliance.setDescription('The compliance statement for network elements implementing extensions to the BRIDGE-MIB.')
pdnBridgeExtObjGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 58, 3, 2, 1))
pdnBridgeExtAfnGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 58, 3, 2, 2))
pdnBridgeExtNtfyGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 58, 3, 2, 3))
pdnBridgeExtTPGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 58, 3, 2, 1, 4))
pdnDot1dBasePortMaxFdbEntriesGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 58, 3, 2, 1, 1)).setObjects(("PDN-BRIDGE-EXT-MIB", "pdnDot1dBasePortMaxFdbEntries"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pdnDot1dBasePortMaxFdbEntriesGroup = pdnDot1dBasePortMaxFdbEntriesGroup.setStatus('current')
if mibBuilder.loadTexts: pdnDot1dBasePortMaxFdbEntriesGroup.setDescription("Configures the maximum number of entries allowed in a bridge port's forwarding database.")
pdnDot1dBasePortRoleGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 58, 3, 2, 1, 2)).setObjects(("PDN-BRIDGE-EXT-MIB", "pdnDot1dBasePortRole"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pdnDot1dBasePortRoleGroup = pdnDot1dBasePortRoleGroup.setStatus('current')
if mibBuilder.loadTexts: pdnDot1dBasePortRoleGroup.setDescription('Objects related to the role attribute on a bridge port.')
pdnDot1dBasePortUnknownMulticastForwardingModeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 58, 3, 2, 1, 3)).setObjects(("PDN-BRIDGE-EXT-MIB", "pdnDot1dBasePortUnknownMulticastForwardingMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pdnDot1dBasePortUnknownMulticastForwardingModeGroup = pdnDot1dBasePortUnknownMulticastForwardingModeGroup.setStatus('current')
if mibBuilder.loadTexts: pdnDot1dBasePortUnknownMulticastForwardingModeGroup.setDescription('Provides the ability to configure the forwarding mode for unknown multicast frames.')
pdnDot1dQinQVlanGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 58, 3, 2, 1, 5)).setObjects(("PDN-BRIDGE-EXT-MIB", "pdnDot1dBasePortOuterTag"), ("PDN-BRIDGE-EXT-MIB", "pdnDot1dBasePortOuterPriority"), ("PDN-BRIDGE-EXT-MIB", "pdnDot1dBasePortOuterEthertype"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pdnDot1dQinQVlanGroup = pdnDot1dQinQVlanGroup.setStatus('current')
if mibBuilder.loadTexts: pdnDot1dQinQVlanGroup.setDescription('Objects related to QinQ VLAN (802.1ad')
pdnDot1dTrafficProfileBasicGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 58, 3, 2, 1, 4, 1)).setObjects(("PDN-BRIDGE-EXT-MIB", "pdnDot1dTrafficProfileNextIndex"), ("PDN-BRIDGE-EXT-MIB", "pdnDot1dTrafficProfileName"), ("PDN-BRIDGE-EXT-MIB", "pdnDot1dTrafficProfileRowStatus"), ("PDN-BRIDGE-EXT-MIB", "pdnDot1dTrafficProfileNbrRefs"), ("PDN-BRIDGE-EXT-MIB", "pdnDot1dTrafficProfileTrafficClass"), ("PDN-BRIDGE-EXT-MIB", "pdnDot1dTrafficProfileInvIndex"), ("PDN-BRIDGE-EXT-MIB", "pdnDot1dTrafficProfileMappingRowStatus"), ("PDN-BRIDGE-EXT-MIB", "pdnDot1dTrafficProfileMappingIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pdnDot1dTrafficProfileBasicGroup = pdnDot1dTrafficProfileBasicGroup.setStatus('current')
if mibBuilder.loadTexts: pdnDot1dTrafficProfileBasicGroup.setDescription("Objects supporting the `basic' framework for configuring traffic profiles. Objects supporting specific attributes of a profile exist in other groups.")
pdnDot1dTrafficProfileMaxRateGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 58, 3, 2, 1, 4, 2)).setObjects(("PDN-BRIDGE-EXT-MIB", "pdnDot1dTrafficProfileMaxRate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pdnDot1dTrafficProfileMaxRateGroup = pdnDot1dTrafficProfileMaxRateGroup.setStatus('current')
if mibBuilder.loadTexts: pdnDot1dTrafficProfileMaxRateGroup.setDescription('Object to support the configuration of the maximum rate traffic profile attribute.')
mibBuilder.exportSymbols("PDN-BRIDGE-EXT-MIB", pdnDot1dBasePortExtEntry=pdnDot1dBasePortExtEntry, pdnDot1dTrafficProfileIndex=pdnDot1dTrafficProfileIndex, pdnDot1dBasePortExtTable=pdnDot1dBasePortExtTable, pdnDot1dTrafficProfileInvMappingTable=pdnDot1dTrafficProfileInvMappingTable, pdnDot1dBasePortRole=pdnDot1dBasePortRole, pdnDot1dBasePortUnknownMulticastForwardingMode=pdnDot1dBasePortUnknownMulticastForwardingMode, pdnDot1dBasePortMaxFdbEntriesGroup=pdnDot1dBasePortMaxFdbEntriesGroup, pdnDot1dTrafficProfileTrafficClass=pdnDot1dTrafficProfileTrafficClass, pdnDot1dTrafficProfileBasicGroup=pdnDot1dTrafficProfileBasicGroup, pdnDot1dTrafficProfileName=pdnDot1dTrafficProfileName, pdnDot1dBasePortOuterTag=pdnDot1dBasePortOuterTag, pdnDot1dTrafficProfileEntry=pdnDot1dTrafficProfileEntry, pdnDot1dTrafficProfileMappingIndex=pdnDot1dTrafficProfileMappingIndex, pdnBridgeExtObjGroups=pdnBridgeExtObjGroups, pdnDot1dTrafficProfileInvIndex=pdnDot1dTrafficProfileInvIndex, pdnDot1dBasePortOuterPriority=pdnDot1dBasePortOuterPriority, pdnDot1dTrafficProfileRowStatus=pdnDot1dTrafficProfileRowStatus, pdnDot1dTrafficProfileMappingEntry=pdnDot1dTrafficProfileMappingEntry, pdnBridgeExtObjects=pdnBridgeExtObjects, PYSNMP_MODULE_ID=pdnBridgeExtMIB, pdnBridgeExtNotifications=pdnBridgeExtNotifications, pdnBridgeExtMIB=pdnBridgeExtMIB, pdnDot1dTrafficProfileNextIndex=pdnDot1dTrafficProfileNextIndex, pdnDot1dTrafficProfileMaxRate=pdnDot1dTrafficProfileMaxRate, pdnBridgeExtAFNs=pdnBridgeExtAFNs, pdnDot1dTrafficProfileMaxRateGroup=pdnDot1dTrafficProfileMaxRateGroup, pdnBridgeExtAfnGroups=pdnBridgeExtAfnGroups, pdnBridgeExtTPGroups=pdnBridgeExtTPGroups, pdnDot1dTrafficProfileInvMappingEntry=pdnDot1dTrafficProfileInvMappingEntry, pdnDot1dTrafficProfileNbrRefs=pdnDot1dTrafficProfileNbrRefs, pdnDot1dTrafficProfileMappingSubPort=pdnDot1dTrafficProfileMappingSubPort, pdnDot1dTrafficProfileTable=pdnDot1dTrafficProfileTable, pdnBridgeExtCompliance=pdnBridgeExtCompliance, pdnBridgeExtGroups=pdnBridgeExtGroups, pdnBridgeExtCompliances=pdnBridgeExtCompliances, pdnBridgeExtNtfyGroups=pdnBridgeExtNtfyGroups, pdnDot1dBasePortOuterEthertype=pdnDot1dBasePortOuterEthertype, pdnDot1dTrafficProfileMappingTable=pdnDot1dTrafficProfileMappingTable, pdnDot1dQinQVlanGroup=pdnDot1dQinQVlanGroup, pdnDot1dTrafficProfile=pdnDot1dTrafficProfile, pdnDot1dBasePortRoleGroup=pdnDot1dBasePortRoleGroup, pdnBridgeExtConformance=pdnBridgeExtConformance, pdnDot1dBasePortUnknownMulticastForwardingModeGroup=pdnDot1dBasePortUnknownMulticastForwardingModeGroup, pdnDot1dBasePortMaxFdbEntries=pdnDot1dBasePortMaxFdbEntries, pdnDot1dTrafficProfileMappingRowStatus=pdnDot1dTrafficProfileMappingRowStatus)
