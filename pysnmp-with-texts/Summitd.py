#
# PySNMP MIB module Summitd (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Summitd
# Produced by pysmi-0.3.4 at Wed May  1 15:14:46 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Gauge32, iso, TimeTicks, NotificationType, ObjectIdentity, Unsigned32, MibIdentifier, Counter32, IpAddress, Bits, Counter64, Integer32, ModuleIdentity, enterprises, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "iso", "TimeTicks", "NotificationType", "ObjectIdentity", "Unsigned32", "MibIdentifier", "Counter32", "IpAddress", "Bits", "Counter64", "Integer32", "ModuleIdentity", "enterprises", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
summit_development = MibIdentifier((1, 3, 6, 1, 4, 1, 23688)).setLabel("summit-development")
summit_Products = MibIdentifier((1, 3, 6, 1, 4, 1, 23688, 1)).setLabel("summit-Products")
uni_a = MibIdentifier((1, 3, 6, 1, 4, 1, 23688, 1, 1)).setLabel("uni-a")
name = MibScalar((1, 3, 6, 1, 4, 1, 23688, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: name.setStatus('mandatory')
if mibBuilder.loadTexts: name.setDescription('Name of the unit.')
condition = MibScalar((1, 3, 6, 1, 4, 1, 23688, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ok", 1), ("error", 2), ("warning", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: condition.setStatus('mandatory')
if mibBuilder.loadTexts: condition.setDescription('Condition of the unit (1-ok,2-Error,3-Warning).')
mannum = MibScalar((1, 3, 6, 1, 4, 1, 23688, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mannum.setStatus('mandatory')
if mibBuilder.loadTexts: mannum.setDescription('Maufacturing number of the unit.')
status = MibScalar((1, 3, 6, 1, 4, 1, 23688, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: status.setStatus('mandatory')
if mibBuilder.loadTexts: status.setDescription('Status of the unit.')
rssi = MibScalar((1, 3, 6, 1, 4, 1, 23688, 1, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rssi.setStatus('mandatory')
if mibBuilder.loadTexts: rssi.setDescription('Receive strenght indicator in -db (negative level).')
ebno = MibScalar((1, 3, 6, 1, 4, 1, 23688, 1, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ebno.setStatus('mandatory')
if mibBuilder.loadTexts: ebno.setDescription('Eb/No signal quality in 0.1 db (72 -> 7.2db).')
berr = MibScalar((1, 3, 6, 1, 4, 1, 23688, 1, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: berr.setStatus('mandatory')
if mibBuilder.loadTexts: berr.setDescription('Bit error rate bit/sec.')
temperature = MibScalar((1, 3, 6, 1, 4, 1, 23688, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperature.setStatus('mandatory')
if mibBuilder.loadTexts: temperature.setDescription('Temperature of the unit .')
maxENspeed = MibScalar((1, 3, 6, 1, 4, 1, 23688, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxENspeed.setStatus('mandatory')
if mibBuilder.loadTexts: maxENspeed.setDescription('Maximum enabled speed of the radio in Mbit/sec.')
currentRadioSpeed = MibScalar((1, 3, 6, 1, 4, 1, 23688, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentRadioSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: currentRadioSpeed.setDescription('Current speed of the radio in Mbit/sec')
type = MibScalar((1, 3, 6, 1, 4, 1, 23688, 1, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: type.setStatus('mandatory')
if mibBuilder.loadTexts: type.setDescription('Uni type.')
txFreq = MibScalar((1, 3, 6, 1, 4, 1, 23688, 1, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txFreq.setStatus('mandatory')
if mibBuilder.loadTexts: txFreq.setDescription('Frequency of the transmitter in MHz.')
rxFreq = MibScalar((1, 3, 6, 1, 4, 1, 23688, 1, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxFreq.setStatus('mandatory')
if mibBuilder.loadTexts: rxFreq.setDescription('Frequency of the receiver in MHz.')
txDataSpeed = MibScalar((1, 3, 6, 1, 4, 1, 23688, 1, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txDataSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: txDataSpeed.setDescription('Current data speed of the transmitter in bit/sec.')
rxDataSpeed = MibScalar((1, 3, 6, 1, 4, 1, 23688, 1, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxDataSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: rxDataSpeed.setDescription('Current data speed of the receiver in bit/sec.')
remoteName = MibScalar((1, 3, 6, 1, 4, 1, 23688, 1, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteName.setStatus('mandatory')
if mibBuilder.loadTexts: remoteName.setDescription('Name of the remote Unit.')
remoteIPaddress = MibScalar((1, 3, 6, 1, 4, 1, 23688, 1, 1, 17), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteIPaddress.setStatus('mandatory')
if mibBuilder.loadTexts: remoteIPaddress.setDescription('IP address of the remote unit')
atpc = MibScalar((1, 3, 6, 1, 4, 1, 23688, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atpc.setStatus('mandatory')
if mibBuilder.loadTexts: atpc.setDescription('ATPC - Automatic Transmit Power Control (1-enabled, 2-disabled)')
txPower = MibScalar((1, 3, 6, 1, 4, 1, 23688, 1, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txPower.setStatus('mandatory')
if mibBuilder.loadTexts: txPower.setDescription('Actual Transmit Power [dBm]')
acm = MibScalar((1, 3, 6, 1, 4, 1, 23688, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acm.setStatus('mandatory')
if mibBuilder.loadTexts: acm.setDescription('ACM - Adaptive Coding & Modulation (1-enabled, 2-disabled)')
txModulation = MibScalar((1, 3, 6, 1, 4, 1, 23688, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("qam-2", 1), ("qam-4", 2), ("qam-8", 3), ("qam-16", 4), ("qam-32", 5), ("qam-64", 6), ("qam-128", 7), ("qam-256", 8), ("qam-512", 9), ("qam-1024", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: txModulation.setStatus('mandatory')
if mibBuilder.loadTexts: txModulation.setDescription('Current Modulation (Tx)')
rxModulation = MibScalar((1, 3, 6, 1, 4, 1, 23688, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("qam-2", 1), ("qam-4", 2), ("qam-8", 3), ("qam-16", 4), ("qam-32", 5), ("qam-64", 6), ("qam-128", 7), ("qam-256", 8), ("qam-512", 9), ("qam-1024", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxModulation.setStatus('mandatory')
if mibBuilder.loadTexts: rxModulation.setDescription('Current Modulation (Rx)')
txBandwidth = MibScalar((1, 3, 6, 1, 4, 1, 23688, 1, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txBandwidth.setStatus('mandatory')
if mibBuilder.loadTexts: txBandwidth.setDescription('Actual Transmit Bandwidth [MHz]')
rxBandwidth = MibScalar((1, 3, 6, 1, 4, 1, 23688, 1, 1, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxBandwidth.setStatus('mandatory')
if mibBuilder.loadTexts: rxBandwidth.setDescription('Actual Receiver Bandwidth [MHz]')
licenseExpire = MibScalar((1, 3, 6, 1, 4, 1, 23688, 1, 1, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseExpire.setStatus('mandatory')
if mibBuilder.loadTexts: licenseExpire.setDescription('License expire time (time to blocked radio) [day], 0 Blocked, -1 no Expire time set')
summitd_Common = MibIdentifier((1, 3, 6, 1, 4, 1, 23688, 2)).setLabel("summitd-Common")
summitd_Experimental = MibIdentifier((1, 3, 6, 1, 4, 1, 23688, 3)).setLabel("summitd-Experimental")
mibBuilder.exportSymbols("Summitd", txDataSpeed=txDataSpeed, remoteName=remoteName, txPower=txPower, licenseExpire=licenseExpire, status=status, maxENspeed=maxENspeed, rssi=rssi, rxModulation=rxModulation, condition=condition, txBandwidth=txBandwidth, rxBandwidth=rxBandwidth, txFreq=txFreq, berr=berr, summit_development=summit_development, summitd_Common=summitd_Common, currentRadioSpeed=currentRadioSpeed, ebno=ebno, summitd_Experimental=summitd_Experimental, temperature=temperature, summit_Products=summit_Products, atpc=atpc, mannum=mannum, uni_a=uni_a, remoteIPaddress=remoteIPaddress, rxFreq=rxFreq, rxDataSpeed=rxDataSpeed, type=type, txModulation=txModulation, acm=acm, name=name)
