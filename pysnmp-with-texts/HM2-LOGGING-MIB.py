#
# PySNMP MIB module HM2-LOGGING-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HM2-LOGGING-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:31:41 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint")
Hm2TlsCipherSuites, Hm2TlsVersions = mibBuilder.importSymbols("HM2-MGMTACCESS-MIB", "Hm2TlsCipherSuites", "Hm2TlsVersions")
hm2ConfigurationMibs, HmTimeSeconds1970, HmEnabledStatus = mibBuilder.importSymbols("HM2-TC-MIB", "hm2ConfigurationMibs", "HmTimeSeconds1970", "HmEnabledStatus")
InetAddress, InetPortNumber, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetPortNumber", "InetAddressType")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, Unsigned32, MibIdentifier, NotificationType, ObjectIdentity, Counter64, ModuleIdentity, iso, Counter32, IpAddress, TimeTicks, Bits, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "Unsigned32", "MibIdentifier", "NotificationType", "ObjectIdentity", "Counter64", "ModuleIdentity", "iso", "Counter32", "IpAddress", "TimeTicks", "Bits", "Integer32")
TextualConvention, RowStatus, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "RowStatus", "DisplayString")
hm2LoggingMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 248, 11, 23))
hm2LoggingMib.setRevisions(('2012-08-08 00:00', '2011-03-16 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hm2LoggingMib.setRevisionsDescriptions(('Modify hm2LogSyslogServerIPAddrType description because DNS was added.', 'Initial version.',))
if mibBuilder.loadTexts: hm2LoggingMib.setLastUpdated('201208080000Z')
if mibBuilder.loadTexts: hm2LoggingMib.setOrganization('Hirschmann Automation and Control GmbH')
if mibBuilder.loadTexts: hm2LoggingMib.setContactInfo('Postal: Stuttgarter Str. 45-51 72654 Neckartenzlingen Germany Phone: +49 7127 140 E-mail: hac.support@belden.com')
if mibBuilder.loadTexts: hm2LoggingMib.setDescription('Hirschmann Logging MIB. Copyright (C) 2012. All Rights Reserved.')
class HmAgentLogSeverity(TextualConvention, Integer32):
    reference = 'RFC3164 - 4.1.1: Table 2'
    description = 'Severity code used in determining the SysLog priority value.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("emergency", 0), ("alert", 1), ("critical", 2), ("error", 3), ("warning", 4), ("notice", 5), ("informational", 6), ("debug", 7))

hm2LoggingMibNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 23, 0))
hm2LoggingMibObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 23, 1))
hm2LogSnmpLoggingGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 23, 1, 1))
hm2LogCliCommandsLoggingGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 23, 1, 2))
hm2LogConsoleLoggingGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 23, 1, 3))
hm2LogBufferedLoggingGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 23, 1, 4))
hm2LogSyslogGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 23, 1, 5))
hm2LogPersistentGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 23, 1, 6))
hm2LogCounterGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 23, 1, 7))
hm2LogTemperatureGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 23, 1, 8))
hm2LogAuditGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 23, 1, 9))
hm2LogEmailAlertGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 23, 1, 10))
hm2LogSnmpLogGetRequest = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 23, 1, 1, 1), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2LogSnmpLogGetRequest.setStatus('current')
if mibBuilder.loadTexts: hm2LogSnmpLogGetRequest.setDescription('Enable logging of SNMP GET requests.')
hm2LogSnmpLogSetRequest = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 23, 1, 1, 2), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2LogSnmpLogSetRequest.setStatus('current')
if mibBuilder.loadTexts: hm2LogSnmpLogSetRequest.setDescription('Enable logging of SNMP SET requests.')
hm2LogSnmpLogGetSeverity = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 23, 1, 1, 3), HmAgentLogSeverity().clone('notice')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2LogSnmpLogGetSeverity.setStatus('current')
if mibBuilder.loadTexts: hm2LogSnmpLogGetSeverity.setDescription('Define the log severity for SNMP GET requests.')
hm2LogSnmpLogSetSeverity = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 23, 1, 1, 4), HmAgentLogSeverity().clone('notice')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2LogSnmpLogSetSeverity.setStatus('current')
if mibBuilder.loadTexts: hm2LogSnmpLogSetSeverity.setDescription('Define the log severity for SNMP SET requests.')
hm2LogCliCommandsAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 23, 1, 2, 1), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2LogCliCommandsAdminStatus.setStatus('current')
if mibBuilder.loadTexts: hm2LogCliCommandsAdminStatus.setDescription('Administratively enable/disable the logging of the CLI commands.')
hm2LogConsoleAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 23, 1, 3, 1), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2LogConsoleAdminStatus.setStatus('current')
if mibBuilder.loadTexts: hm2LogConsoleAdminStatus.setDescription('Admin mode for console logs')
hm2LogConsoleSeverityFilter = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 23, 1, 3, 2), HmAgentLogSeverity().clone('warning')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2LogConsoleSeverityFilter.setStatus('current')
if mibBuilder.loadTexts: hm2LogConsoleSeverityFilter.setDescription('Severity filter for console logs')
hm2LogBufferdLogLevelThreshold = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 23, 1, 4, 1), HmAgentLogSeverity().clone('warning')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2LogBufferdLogLevelThreshold.setStatus('current')
if mibBuilder.loadTexts: hm2LogBufferdLogLevelThreshold.setDescription('Severities at or below this threshold are logged in the buffered log and will not be overwritten by lower priority log messages.')
hm2LogSyslogAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 23, 1, 5, 1), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2LogSyslogAdminStatus.setStatus('current')
if mibBuilder.loadTexts: hm2LogSyslogAdminStatus.setDescription('Enable or disable syslog logging globally.')
hm2LogSyslogClientTlsVersions = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 23, 1, 5, 2), Hm2TlsVersions().clone(namedValues=NamedValues(("tlsv1-2", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2LogSyslogClientTlsVersions.setStatus('current')
if mibBuilder.loadTexts: hm2LogSyslogClientTlsVersions.setDescription('The TLS versions supported by the syslog client.')
hm2LogSyslogClientTlsCipherSuites = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 23, 1, 5, 3), Hm2TlsCipherSuites().clone(namedValues=NamedValues(("tls-rsa-with-aes-128-cbc-sha", 1), ("tls-dhe-rsa-with-aes-128-cbc-sha", 2), ("tls-ecdhe-rsa-with-aes-128-cbc-sha", 4), ("tls-ecdhe-rsa-with-aes-128-gcm-sha256", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2LogSyslogClientTlsCipherSuites.setStatus('current')
if mibBuilder.loadTexts: hm2LogSyslogClientTlsCipherSuites.setDescription('The cipher suite supported by the syslog client.')
hm2LogSyslogServerTable = MibTable((1, 3, 6, 1, 4, 1, 248, 11, 23, 1, 5, 10), )
if mibBuilder.loadTexts: hm2LogSyslogServerTable.setStatus('current')
if mibBuilder.loadTexts: hm2LogSyslogServerTable.setDescription('A list of syslog servers')
hm2LogSyslogServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 11, 23, 1, 5, 10, 1), ).setIndexNames((0, "HM2-LOGGING-MIB", "hm2LogSyslogServerIndex"))
if mibBuilder.loadTexts: hm2LogSyslogServerEntry.setStatus('current')
if mibBuilder.loadTexts: hm2LogSyslogServerEntry.setDescription('An entry of syslog servers')
hm2LogSyslogServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 23, 1, 5, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2LogSyslogServerIndex.setStatus('current')
if mibBuilder.loadTexts: hm2LogSyslogServerIndex.setDescription('An index that uniquely identifies the entry in the table and so the syslog server.')
hm2LogSyslogServerIPAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 23, 1, 5, 10, 1, 2), InetAddressType().clone('ipv4')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2LogSyslogServerIPAddrType.setStatus('current')
if mibBuilder.loadTexts: hm2LogSyslogServerIPAddrType.setDescription('Address type for server IP address. Currently, only ipv4(1) and dns(16) are supported.')
hm2LogSyslogServerIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 23, 1, 5, 10, 1, 3), InetAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2LogSyslogServerIPAddr.setStatus('current')
if mibBuilder.loadTexts: hm2LogSyslogServerIPAddr.setDescription('IP address of syslog server for logging.')
hm2LogSyslogServerUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 23, 1, 5, 10, 1, 4), InetPortNumber().clone(514)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2LogSyslogServerUdpPort.setStatus('current')
if mibBuilder.loadTexts: hm2LogSyslogServerUdpPort.setDescription('TCP or UDP port used for syslog server transmission. If this value is zero then the default port 514 is used.')
hm2LogSyslogServerLevelUpto = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 23, 1, 5, 10, 1, 5), HmAgentLogSeverity().clone('warning')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2LogSyslogServerLevelUpto.setStatus('current')
if mibBuilder.loadTexts: hm2LogSyslogServerLevelUpto.setDescription('Up to log level to be sent to this syslog server.')
hm2LogSyslogServerLogType = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 23, 1, 5, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("systemlog", 1), ("audittrail", 2))).clone('systemlog')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2LogSyslogServerLogType.setStatus('current')
if mibBuilder.loadTexts: hm2LogSyslogServerLogType.setDescription('Defines the type of log messages to be sent to the syslog server. systemlog (1): Define the system event log entries as stored also in the system event log. audittrail (2): Define the audit trail log entries.')
hm2LogSyslogServerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 23, 1, 5, 10, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2LogSyslogServerRowStatus.setStatus('current')
if mibBuilder.loadTexts: hm2LogSyslogServerRowStatus.setDescription('Syslog server entry status. active(1) - This syslog server is active. notInService(2) - Row has been suspended. notReady(3) - Row has incomplete values. createAndGo(4) - Accept row values and activate. createAndWait(5)- Accept row values and wait. destroy(6) - Set to this value to remove this syslog server entry.')
hm2LogSyslogServerTransportType = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 23, 1, 5, 10, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("udp", 1), ("tls", 2))).clone('udp')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2LogSyslogServerTransportType.setStatus('current')
if mibBuilder.loadTexts: hm2LogSyslogServerTransportType.setDescription('The transport type used to deliver the log messages to the syslog server. When set to udp(1) the syslog messages are sent over UDP on the configured port. When set to tls(2) the syslog messages are sent over TLS on configured TCP port (hm2LogSyslogServerUdpPort).')
hm2LogPersistAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 23, 1, 6, 1), HmEnabledStatus().clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2LogPersistAdminStatus.setStatus('current')
if mibBuilder.loadTexts: hm2LogPersistAdminStatus.setDescription('Enable or disable persistent logging globally.')
hm2LogPersistMaxFileSize = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 23, 1, 6, 2), Integer32().clone(1024)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2LogPersistMaxFileSize.setStatus('current')
if mibBuilder.loadTexts: hm2LogPersistMaxFileSize.setDescription('Maximum persistent logfile size on non-volatile medium in Kbytes (0..4096). If this value is zero logging is disabled.')
hm2LogPersistFilesMax = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 23, 1, 6, 3), Integer32().clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2LogPersistFilesMax.setStatus('current')
if mibBuilder.loadTexts: hm2LogPersistFilesMax.setDescription('Maximum number of persistent logfiles on non-volatile medium (0..25). If this value is zero logging and archiving is disabled.')
hm2LogPersistLevelUpto = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 23, 1, 6, 4), HmAgentLogSeverity().clone('warning')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2LogPersistLevelUpto.setStatus('current')
if mibBuilder.loadTexts: hm2LogPersistLevelUpto.setDescription('Up to log level to be sent to the persistent log')
hm2LogPersistentFileTable = MibTable((1, 3, 6, 1, 4, 1, 248, 11, 23, 1, 6, 5), )
if mibBuilder.loadTexts: hm2LogPersistentFileTable.setStatus('current')
if mibBuilder.loadTexts: hm2LogPersistentFileTable.setDescription('A list of persistent log files')
hm2LogPersistentFileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 11, 23, 1, 6, 5, 1), ).setIndexNames((0, "HM2-LOGGING-MIB", "hm2LogPersistentFileIndex"))
if mibBuilder.loadTexts: hm2LogPersistentFileEntry.setStatus('current')
if mibBuilder.loadTexts: hm2LogPersistentFileEntry.setDescription('An entry of persistent log files')
hm2LogPersistentFileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 23, 1, 6, 5, 1, 1), Integer32())
if mibBuilder.loadTexts: hm2LogPersistentFileIndex.setStatus('current')
if mibBuilder.loadTexts: hm2LogPersistentFileIndex.setDescription('The index of the table.')
hm2LogPersistentFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 23, 1, 6, 5, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2LogPersistentFileName.setStatus('current')
if mibBuilder.loadTexts: hm2LogPersistentFileName.setDescription('The name of the log file.')
hm2LogPersistentFileSize = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 23, 1, 6, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2LogPersistentFileSize.setStatus('current')
if mibBuilder.loadTexts: hm2LogPersistentFileSize.setDescription('The size of the file in bytes.')
hm2LogCounterOperatingHours = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 23, 1, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2LogCounterOperatingHours.setStatus('current')
if mibBuilder.loadTexts: hm2LogCounterOperatingHours.setDescription('Cumulated uptime of the device in seconds.')
hm2LogCounterFlashTable = MibTable((1, 3, 6, 1, 4, 1, 248, 11, 23, 1, 7, 10), )
if mibBuilder.loadTexts: hm2LogCounterFlashTable.setStatus('current')
if mibBuilder.loadTexts: hm2LogCounterFlashTable.setDescription('A list of log counter entries')
hm2LogCounterFlashEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 11, 23, 1, 7, 10, 1), ).setIndexNames((0, "HM2-LOGGING-MIB", "hm2LogCounterFlashBlock"))
if mibBuilder.loadTexts: hm2LogCounterFlashEntry.setStatus('current')
if mibBuilder.loadTexts: hm2LogCounterFlashEntry.setDescription('An entry of log counter entries')
hm2LogCounterFlashBlock = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 23, 1, 7, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("bootBlock", 1), ("fileSystem", 2), ("imageStorage", 3), ("parameters", 4), ("formatFs", 5), ("userFormatFs", 6), ("dhcpBindings", 7), ("persistentLog", 8))))
if mibBuilder.loadTexts: hm2LogCounterFlashBlock.setStatus('current')
if mibBuilder.loadTexts: hm2LogCounterFlashBlock.setDescription('The name of the flash region.')
hm2LogCounterFlashDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 23, 1, 7, 10, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2LogCounterFlashDescription.setStatus('current')
if mibBuilder.loadTexts: hm2LogCounterFlashDescription.setDescription('The textual description of the group.')
hm2LogCounterFlashCount = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 23, 1, 7, 10, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2LogCounterFlashCount.setStatus('current')
if mibBuilder.loadTexts: hm2LogCounterFlashCount.setDescription('The number of flash sectors in this group.')
hm2LogCounterFlashValue = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 23, 1, 7, 10, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2LogCounterFlashValue.setStatus('current')
if mibBuilder.loadTexts: hm2LogCounterFlashValue.setDescription('The number of sector erase operations performed for this group.')
hm2LogTempMinimum = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 23, 1, 8, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2LogTempMinimum.setStatus('current')
if mibBuilder.loadTexts: hm2LogTempMinimum.setDescription('Minimal temperature on the device in 10th of centigrade (Celsius).')
hm2LogTempMaximum = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 23, 1, 8, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2LogTempMaximum.setStatus('current')
if mibBuilder.loadTexts: hm2LogTempMaximum.setDescription('Maximal temperature on the device in 10th of centigrade (Celsius).')
hm2LogTempVariationCount = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 23, 1, 8, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2LogTempVariationCount.setStatus('current')
if mibBuilder.loadTexts: hm2LogTempVariationCount.setDescription('Number of variations (up or down) by minimum 20 centigrade (Celsius) in maximum one hour period.')
hm2LogTempHistTable = MibTable((1, 3, 6, 1, 4, 1, 248, 11, 23, 1, 8, 10), )
if mibBuilder.loadTexts: hm2LogTempHistTable.setStatus('current')
if mibBuilder.loadTexts: hm2LogTempHistTable.setDescription('A list of temperature ranges and how many hours the device has been in these ranges (histogram).')
hm2LogTempHistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 11, 23, 1, 8, 10, 1), ).setIndexNames((0, "HM2-LOGGING-MIB", "hm2LogTempHistIndex"))
if mibBuilder.loadTexts: hm2LogTempHistEntry.setStatus('current')
if mibBuilder.loadTexts: hm2LogTempHistEntry.setDescription('An entry of temperature ranges and how many hours the device has been in these ranges (histogram).')
hm2LogTempHistIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 23, 1, 8, 10, 1, 1), Integer32())
if mibBuilder.loadTexts: hm2LogTempHistIndex.setStatus('current')
if mibBuilder.loadTexts: hm2LogTempHistIndex.setDescription('Index')
hm2LogTempHistRangeMin = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 23, 1, 8, 10, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2LogTempHistRangeMin.setStatus('current')
if mibBuilder.loadTexts: hm2LogTempHistRangeMin.setDescription('The lower bound of the range in 10th of centigrade (Celsius).')
hm2LogTempHistRangeMax = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 23, 1, 8, 10, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2LogTempHistRangeMax.setStatus('current')
if mibBuilder.loadTexts: hm2LogTempHistRangeMax.setDescription('The upper bound of the range in 10th of centigrade (Celsius).')
hm2LogTempHistTime = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 23, 1, 8, 10, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2LogTempHistTime.setStatus('current')
if mibBuilder.loadTexts: hm2LogTempHistTime.setDescription('The time spent in this range in minutes.')
hm2LogAuditTrailComment = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 23, 1, 9, 1), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(1, 80), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2LogAuditTrailComment.setStatus('current')
if mibBuilder.loadTexts: hm2LogAuditTrailComment.setDescription('Enter a Comment to begin or end a group of entries in the audit trail. Returns an empty string when read.')
hm2LogEmailAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 23, 1, 10, 1), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2LogEmailAdminStatus.setStatus('current')
if mibBuilder.loadTexts: hm2LogEmailAdminStatus.setDescription('Admin mode for logging email-alert.')
hm2LogEmailFromAddress = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 23, 1, 10, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2LogEmailFromAddress.setStatus('current')
if mibBuilder.loadTexts: hm2LogEmailFromAddress.setDescription('Mail address from which the mail has be sent.')
hm2LogEmailLogDuration = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 23, 1, 10, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 1440)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2LogEmailLogDuration.setStatus('current')
if mibBuilder.loadTexts: hm2LogEmailLogDuration.setDescription('Periodic timer (in minutes) to send an email-alert.')
hm2LogEmailUrgentSeverity = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 23, 1, 10, 4), HmAgentLogSeverity().clone('alert')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2LogEmailUrgentSeverity.setStatus('current')
if mibBuilder.loadTexts: hm2LogEmailUrgentSeverity.setDescription('Log Severity at/below which the email-alert to be sent immediately.')
hm2LogEmailNonUrgentSeverity = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 23, 1, 10, 5), HmAgentLogSeverity().clone('warning')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2LogEmailNonUrgentSeverity.setStatus('current')
if mibBuilder.loadTexts: hm2LogEmailNonUrgentSeverity.setDescription('Log Severity at/below which the log should be saved in a buffer and sent as an email-alert later(In case of log duration timeout / log buffer overflow ).')
hm2LogEmailNumEmailsSent = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 23, 1, 10, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2LogEmailNumEmailsSent.setStatus('current')
if mibBuilder.loadTexts: hm2LogEmailNumEmailsSent.setDescription('Number of email alerts that have been sent successfully.')
hm2LogEmailNumEmailFailures = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 23, 1, 10, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2LogEmailNumEmailFailures.setStatus('current')
if mibBuilder.loadTexts: hm2LogEmailNumEmailFailures.setDescription('Number of email alerts that could not be sent.')
hm2LogEmailTimeOfLastMailSent = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 23, 1, 10, 8), HmTimeSeconds1970()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2LogEmailTimeOfLastMailSent.setStatus('current')
if mibBuilder.loadTexts: hm2LogEmailTimeOfLastMailSent.setDescription('Local system time (hm2SystemLocalTime) when the last mail was sent.')
hm2LogEmailAction = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 23, 1, 10, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("test", 2), ("non-urgent", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2LogEmailAction.setStatus('current')
if mibBuilder.loadTexts: hm2LogEmailAction.setDescription("After configuring all email alert settings, set this object to 'test' to sendt a test message to the configured address(es). Setting the object to 'non-urgent' will force the device to immediately sent all buffered logs to the configured email server(s)/address(es). When read the object is read it always returns 'other'. The object can't be set as 'other'.")
hm2LogEmailTestMessageType = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 23, 1, 10, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("urgent", 1), ("non-urgent", 2))).clone('urgent')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2LogEmailTestMessageType.setStatus('current')
if mibBuilder.loadTexts: hm2LogEmailTestMessageType.setDescription('Message type for testing email alert functionality.')
hm2LogEmailTestMessageBody = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 23, 1, 10, 11), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2LogEmailTestMessageBody.setStatus('current')
if mibBuilder.loadTexts: hm2LogEmailTestMessageBody.setDescription('Message body for testing email alert functionality.')
hm2LogEmailToAddressTable = MibTable((1, 3, 6, 1, 4, 1, 248, 11, 23, 1, 10, 15), )
if mibBuilder.loadTexts: hm2LogEmailToAddressTable.setStatus('current')
if mibBuilder.loadTexts: hm2LogEmailToAddressTable.setDescription('The table listing the destination email address and the message type.')
hm2LogEmailToAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 11, 23, 1, 10, 15, 1), ).setIndexNames((0, "HM2-LOGGING-MIB", "hm2LogEmailToAddrMessageIndex"))
if mibBuilder.loadTexts: hm2LogEmailToAddressEntry.setStatus('current')
if mibBuilder.loadTexts: hm2LogEmailToAddressEntry.setDescription('The table entry listing the destination email address and the message type.')
hm2LogEmailToAddrMessageIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 23, 1, 10, 15, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)))
if mibBuilder.loadTexts: hm2LogEmailToAddrMessageIndex.setStatus('current')
if mibBuilder.loadTexts: hm2LogEmailToAddrMessageIndex.setDescription('An integer used only for indexing purposes. Generally monotonically increasing from 1 as new addresses are configured. Re-use of values for this index should be avoided.')
hm2LogEmailToAddrMessageType = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 23, 1, 10, 15, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("urgent", 1), ("non-urgent", 2))).clone('urgent')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2LogEmailToAddrMessageType.setStatus('current')
if mibBuilder.loadTexts: hm2LogEmailToAddrMessageType.setDescription('Log message type.')
hm2LogEmailToAddrAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 23, 1, 10, 15, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2LogEmailToAddrAddress.setStatus('current')
if mibBuilder.loadTexts: hm2LogEmailToAddrAddress.setDescription('Email address to which the email-alert to be sent.')
hm2LogEmailToAddrEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 23, 1, 10, 15, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2LogEmailToAddrEntryStatus.setStatus('current')
if mibBuilder.loadTexts: hm2LogEmailToAddrEntryStatus.setDescription('Create, change or delete the entry.')
hm2LogEmailSubjectTable = MibTable((1, 3, 6, 1, 4, 1, 248, 11, 23, 1, 10, 16), )
if mibBuilder.loadTexts: hm2LogEmailSubjectTable.setStatus('current')
if mibBuilder.loadTexts: hm2LogEmailSubjectTable.setDescription('List of subject of the email for particular message type.')
hm2LogEmailSubjectEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 11, 23, 1, 10, 16, 1), ).setIndexNames((0, "HM2-LOGGING-MIB", "hm2LogEmailSubjectMessageType"))
if mibBuilder.loadTexts: hm2LogEmailSubjectEntry.setStatus('current')
if mibBuilder.loadTexts: hm2LogEmailSubjectEntry.setDescription('This entry shows what kind of subject to be used for the given message type.')
hm2LogEmailSubjectMessageType = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 23, 1, 10, 16, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("urgent", 1), ("non-urgent", 2))))
if mibBuilder.loadTexts: hm2LogEmailSubjectMessageType.setStatus('current')
if mibBuilder.loadTexts: hm2LogEmailSubjectMessageType.setDescription('Log message Type')
hm2LogEmailSubject = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 23, 1, 10, 16, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2LogEmailSubject.setStatus('current')
if mibBuilder.loadTexts: hm2LogEmailSubject.setDescription('Email subject for given message type.')
hm2LogEmailSubjectEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 23, 1, 10, 16, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2LogEmailSubjectEntryStatus.setStatus('current')
if mibBuilder.loadTexts: hm2LogEmailSubjectEntryStatus.setDescription('Create, change or delete the entry.')
hm2LogEmailMailServerTable = MibTable((1, 3, 6, 1, 4, 1, 248, 11, 23, 1, 10, 17), )
if mibBuilder.loadTexts: hm2LogEmailMailServerTable.setStatus('current')
if mibBuilder.loadTexts: hm2LogEmailMailServerTable.setDescription('The (conceptual) table listing the mail servers.')
hm2LogEmailMailServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 11, 23, 1, 10, 17, 1), ).setIndexNames((0, "HM2-LOGGING-MIB", "hm2LogEmailSmtpAddrIndex"))
if mibBuilder.loadTexts: hm2LogEmailMailServerEntry.setStatus('current')
if mibBuilder.loadTexts: hm2LogEmailMailServerEntry.setDescription('This entry shows the conmfiguration for the mail server(s).')
hm2LogEmailSmtpAddrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 23, 1, 10, 17, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: hm2LogEmailSmtpAddrIndex.setStatus('current')
if mibBuilder.loadTexts: hm2LogEmailSmtpAddrIndex.setDescription('An integer used only for indexing purposes. Re-use of values for this index is allowed.')
hm2LogEmailSmtpAddrDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 23, 1, 10, 17, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2LogEmailSmtpAddrDescr.setStatus('current')
if mibBuilder.loadTexts: hm2LogEmailSmtpAddrDescr.setDescription('The description of the server configured.')
hm2LogEmailSmtpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 23, 1, 10, 17, 1, 3), InetAddressType().clone('ipv4')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2LogEmailSmtpAddrType.setStatus('current')
if mibBuilder.loadTexts: hm2LogEmailSmtpAddrType.setDescription('Email SMTP address type.')
hm2LogEmailSmtpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 23, 1, 10, 17, 1, 4), InetAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2LogEmailSmtpAddr.setStatus('current')
if mibBuilder.loadTexts: hm2LogEmailSmtpAddr.setDescription('SMTP server address.')
hm2LogEmailSmtpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 23, 1, 10, 17, 1, 5), InetPortNumber().clone(25)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2LogEmailSmtpPort.setStatus('current')
if mibBuilder.loadTexts: hm2LogEmailSmtpPort.setDescription('SMTP port number. When this object is set to 0, it resets to factory default port number 25.')
hm2LogEmailSmtpSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 23, 1, 10, 17, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("tlsv1", 2))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2LogEmailSmtpSecurity.setStatus('current')
if mibBuilder.loadTexts: hm2LogEmailSmtpSecurity.setDescription('This is the authentication mechanism that should be used.')
hm2LogEmailSmtpLoginID = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 23, 1, 10, 17, 1, 7), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2LogEmailSmtpLoginID.setStatus('current')
if mibBuilder.loadTexts: hm2LogEmailSmtpLoginID.setDescription("This user id is used while the switch/router is being authenticated by the SMTP server, if the hm2LogEmailSmtpSecurity is configured to 'tlsv1'.")
hm2LogEmailSmtpPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 23, 1, 10, 17, 1, 8), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2LogEmailSmtpPassword.setStatus('current')
if mibBuilder.loadTexts: hm2LogEmailSmtpPassword.setDescription("This password is used while the switch/router is being authenticated by the SMTP server, if the hm2LogEmailSmtpSecurity is configured to 'tlsv1'.")
hm2LogEmailSmtpEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 23, 1, 10, 17, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2LogEmailSmtpEntryStatus.setStatus('current')
if mibBuilder.loadTexts: hm2LogEmailSmtpEntryStatus.setDescription('Create, change or delete the entry.')
hm2LogEmailSmtpTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 23, 1, 10, 17, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 15)).clone(3)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2LogEmailSmtpTimeout.setStatus('current')
if mibBuilder.loadTexts: hm2LogEmailSmtpTimeout.setDescription('Time out duration (in seconds) before packets are retransmitted.')
hm2LogEmailClientTlsVersions = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 23, 1, 10, 18), Hm2TlsVersions().clone(namedValues=NamedValues(("tlsv1-0", 0), ("tlsv1-2", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2LogEmailClientTlsVersions.setStatus('current')
if mibBuilder.loadTexts: hm2LogEmailClientTlsVersions.setDescription('The TLS version supported by the email-alert logging client.')
hm2LogEmailClientTlsCipherSuites = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 23, 1, 10, 19), Hm2TlsCipherSuites().clone(namedValues=NamedValues(("tls-dhe-rsa-with-aes-128-cbc-sha", 2), ("tls-ecdhe-rsa-with-aes-128-cbc-sha", 4), ("tls-ecdhe-rsa-with-aes-128-gcm-sha256", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2LogEmailClientTlsCipherSuites.setStatus('current')
if mibBuilder.loadTexts: hm2LogEmailClientTlsCipherSuites.setDescription('The cipher suite supported by the email-alert logging client.')
hm2LogAuditStartNextSector = NotificationType((1, 3, 6, 1, 4, 1, 248, 11, 23, 0, 1))
if mibBuilder.loadTexts: hm2LogAuditStartNextSector.setStatus('current')
if mibBuilder.loadTexts: hm2LogAuditStartNextSector.setDescription('A notification shall be sent when the audit trail has filled one sector and starts a new one.')
hm2LogEmailSendFailed = NotificationType((1, 3, 6, 1, 4, 1, 248, 11, 23, 0, 2)).setObjects(("HM2-LOGGING-MIB", "hm2LogEmailNumEmailFailures"))
if mibBuilder.loadTexts: hm2LogEmailSendFailed.setStatus('current')
if mibBuilder.loadTexts: hm2LogEmailSendFailed.setDescription('Whenever a mail sending to the SMTP server is failed, this trap is sent with a count of how many times the connection to the SMTP server is failed so far.')
mibBuilder.exportSymbols("HM2-LOGGING-MIB", hm2LogEmailToAddrMessageIndex=hm2LogEmailToAddrMessageIndex, hm2LogEmailNumEmailFailures=hm2LogEmailNumEmailFailures, hm2LogEmailClientTlsVersions=hm2LogEmailClientTlsVersions, hm2LogEmailToAddressTable=hm2LogEmailToAddressTable, hm2LogSnmpLogGetSeverity=hm2LogSnmpLogGetSeverity, hm2LogEmailSubject=hm2LogEmailSubject, hm2LogPersistMaxFileSize=hm2LogPersistMaxFileSize, hm2LogCliCommandsAdminStatus=hm2LogCliCommandsAdminStatus, hm2LogPersistentFileEntry=hm2LogPersistentFileEntry, hm2LogEmailUrgentSeverity=hm2LogEmailUrgentSeverity, hm2LogEmailSmtpAddrIndex=hm2LogEmailSmtpAddrIndex, hm2LogSyslogClientTlsVersions=hm2LogSyslogClientTlsVersions, PYSNMP_MODULE_ID=hm2LoggingMib, hm2LogEmailSmtpPort=hm2LogEmailSmtpPort, hm2LogCounterFlashBlock=hm2LogCounterFlashBlock, hm2LogEmailNumEmailsSent=hm2LogEmailNumEmailsSent, hm2LogEmailSendFailed=hm2LogEmailSendFailed, hm2LogCounterFlashEntry=hm2LogCounterFlashEntry, hm2LogSyslogServerEntry=hm2LogSyslogServerEntry, hm2LogSyslogServerUdpPort=hm2LogSyslogServerUdpPort, hm2LogEmailTestMessageBody=hm2LogEmailTestMessageBody, hm2LoggingMibObjects=hm2LoggingMibObjects, hm2LogTempHistEntry=hm2LogTempHistEntry, hm2LogBufferedLoggingGroup=hm2LogBufferedLoggingGroup, hm2LogSyslogServerTransportType=hm2LogSyslogServerTransportType, hm2LogAuditGroup=hm2LogAuditGroup, hm2LogConsoleAdminStatus=hm2LogConsoleAdminStatus, hm2LogTempMaximum=hm2LogTempMaximum, hm2LogSnmpLoggingGroup=hm2LogSnmpLoggingGroup, HmAgentLogSeverity=HmAgentLogSeverity, hm2LogCounterFlashCount=hm2LogCounterFlashCount, hm2LogEmailTimeOfLastMailSent=hm2LogEmailTimeOfLastMailSent, hm2LoggingMibNotifications=hm2LoggingMibNotifications, hm2LogSnmpLogSetRequest=hm2LogSnmpLogSetRequest, hm2LogEmailSmtpSecurity=hm2LogEmailSmtpSecurity, hm2LogSyslogServerTable=hm2LogSyslogServerTable, hm2LogCliCommandsLoggingGroup=hm2LogCliCommandsLoggingGroup, hm2LogEmailSmtpPassword=hm2LogEmailSmtpPassword, hm2LogAuditStartNextSector=hm2LogAuditStartNextSector, hm2LogEmailSubjectEntryStatus=hm2LogEmailSubjectEntryStatus, hm2LogEmailSmtpAddr=hm2LogEmailSmtpAddr, hm2LogEmailToAddrMessageType=hm2LogEmailToAddrMessageType, hm2LogAuditTrailComment=hm2LogAuditTrailComment, hm2LogCounterFlashValue=hm2LogCounterFlashValue, hm2LogPersistAdminStatus=hm2LogPersistAdminStatus, hm2LogCounterFlashTable=hm2LogCounterFlashTable, hm2LogSyslogServerIPAddrType=hm2LogSyslogServerIPAddrType, hm2LogEmailClientTlsCipherSuites=hm2LogEmailClientTlsCipherSuites, hm2LogPersistentFileSize=hm2LogPersistentFileSize, hm2LogEmailLogDuration=hm2LogEmailLogDuration, hm2LogCounterGroup=hm2LogCounterGroup, hm2LogSyslogServerIndex=hm2LogSyslogServerIndex, hm2LogEmailSmtpEntryStatus=hm2LogEmailSmtpEntryStatus, hm2LogSyslogServerLevelUpto=hm2LogSyslogServerLevelUpto, hm2LogCounterOperatingHours=hm2LogCounterOperatingHours, hm2LogEmailSubjectEntry=hm2LogEmailSubjectEntry, hm2LogEmailMailServerTable=hm2LogEmailMailServerTable, hm2LogTempHistTime=hm2LogTempHistTime, hm2LogEmailAdminStatus=hm2LogEmailAdminStatus, hm2LoggingMib=hm2LoggingMib, hm2LogSyslogServerIPAddr=hm2LogSyslogServerIPAddr, hm2LogEmailToAddrEntryStatus=hm2LogEmailToAddrEntryStatus, hm2LogTempHistRangeMax=hm2LogTempHistRangeMax, hm2LogSnmpLogGetRequest=hm2LogSnmpLogGetRequest, hm2LogSyslogServerRowStatus=hm2LogSyslogServerRowStatus, hm2LogEmailToAddrAddress=hm2LogEmailToAddrAddress, hm2LogBufferdLogLevelThreshold=hm2LogBufferdLogLevelThreshold, hm2LogTempHistTable=hm2LogTempHistTable, hm2LogTempVariationCount=hm2LogTempVariationCount, hm2LogEmailToAddressEntry=hm2LogEmailToAddressEntry, hm2LogEmailSubjectMessageType=hm2LogEmailSubjectMessageType, hm2LogTemperatureGroup=hm2LogTemperatureGroup, hm2LogSyslogGroup=hm2LogSyslogGroup, hm2LogPersistentFileIndex=hm2LogPersistentFileIndex, hm2LogTempMinimum=hm2LogTempMinimum, hm2LogSyslogClientTlsCipherSuites=hm2LogSyslogClientTlsCipherSuites, hm2LogPersistFilesMax=hm2LogPersistFilesMax, hm2LogEmailSmtpAddrType=hm2LogEmailSmtpAddrType, hm2LogTempHistRangeMin=hm2LogTempHistRangeMin, hm2LogEmailSmtpTimeout=hm2LogEmailSmtpTimeout, hm2LogConsoleSeverityFilter=hm2LogConsoleSeverityFilter, hm2LogPersistentFileTable=hm2LogPersistentFileTable, hm2LogPersistentFileName=hm2LogPersistentFileName, hm2LogEmailMailServerEntry=hm2LogEmailMailServerEntry, hm2LogEmailSmtpLoginID=hm2LogEmailSmtpLoginID, hm2LogTempHistIndex=hm2LogTempHistIndex, hm2LogEmailNonUrgentSeverity=hm2LogEmailNonUrgentSeverity, hm2LogEmailAlertGroup=hm2LogEmailAlertGroup, hm2LogSyslogServerLogType=hm2LogSyslogServerLogType, hm2LogPersistentGroup=hm2LogPersistentGroup, hm2LogSnmpLogSetSeverity=hm2LogSnmpLogSetSeverity, hm2LogSyslogAdminStatus=hm2LogSyslogAdminStatus, hm2LogEmailSubjectTable=hm2LogEmailSubjectTable, hm2LogEmailFromAddress=hm2LogEmailFromAddress, hm2LogEmailSmtpAddrDescr=hm2LogEmailSmtpAddrDescr, hm2LogPersistLevelUpto=hm2LogPersistLevelUpto, hm2LogCounterFlashDescription=hm2LogCounterFlashDescription, hm2LogEmailTestMessageType=hm2LogEmailTestMessageType, hm2LogEmailAction=hm2LogEmailAction, hm2LogConsoleLoggingGroup=hm2LogConsoleLoggingGroup)
