#
# PySNMP MIB module MPSLA (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/MPSLA
# Produced by pysmi-0.3.4 at Wed May  1 14:15:02 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
mpTrapObject, mpMgmt = mibBuilder.importSymbols("MAIPU-SMI", "mpTrapObject", "mpMgmt")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
IpAddress, ModuleIdentity, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, NotificationType, Integer32, iso, Bits, Unsigned32, MibIdentifier, ObjectIdentity, Counter64, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "ModuleIdentity", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "NotificationType", "Integer32", "iso", "Bits", "Unsigned32", "MibIdentifier", "ObjectIdentity", "Counter64", "Counter32")
RowStatus, DisplayString, TextualConvention, PhysAddress, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "DisplayString", "TextualConvention", "PhysAddress", "TruthValue")
class EnabledStatus(TextualConvention, Integer32):
    description = 'A simple status value for the object.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("enabled", 1), ("disabled", 2))

mpTrap = ObjectIdentity((1, 3, 6, 1, 4, 1, 5651, 2, 1))
if mibBuilder.loadTexts: mpTrap.setStatus('current')
if mibBuilder.loadTexts: mpTrap.setDescription('Private trap properties.')
mpTrapClass = MibScalar((1, 3, 6, 1, 4, 1, 5651, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("emergencies", 1), ("alerts", 2), ("critical", 3), ("errors", 4), ("warnings", 5), ("notifications", 6), ("informational", 7), ("debugging", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpTrapClass.setStatus('current')
if mibBuilder.loadTexts: mpTrapClass.setDescription('The class of the Traps.')
mpTrapDescr = MibScalar((1, 3, 6, 1, 4, 1, 5651, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpTrapDescr.setStatus('current')
if mibBuilder.loadTexts: mpTrapDescr.setDescription('Describe the reason of the trap.')
mpTrapType = MibScalar((1, 3, 6, 1, 4, 1, 5651, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("system", 1), ("interface", 2), ("other", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpTrapType.setStatus('current')
if mibBuilder.loadTexts: mpTrapType.setDescription('The type of each trap,show the category.')
mpTraps = ObjectIdentity((1, 3, 6, 1, 4, 1, 5651, 2, 2))
if mibBuilder.loadTexts: mpTraps.setStatus('current')
if mibBuilder.loadTexts: mpTraps.setDescription("All the successor object identifiers of maipu.traps are the same as those of maipu.products, which represent the source device type of traps. When maipu Agent send out traps, it should set the 'enterprise' field to an OID which indicates the device type, so that when a NMS receive the trap, it could lookup such field to identify different device. For example: 'Specific' = 1 in a trap package may represent different meaning in different kinds of device, if 'enterprise' = 1.3.6.1.4.1.5651.2.6.1, then NMS could know that it is sent from a MP9400, so the trap means 'Modem card power-on'.")
mpSla = ObjectIdentity((1, 3, 6, 1, 4, 1, 5651, 2, 2, 62))
if mibBuilder.loadTexts: mpSla.setStatus('current')
if mibBuilder.loadTexts: mpSla.setDescription('Subtree for SLA.')
mpios = MibIdentifier((1, 3, 6, 1, 4, 1, 5651, 3, 20))
iosSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1))
iosObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1))
sysSLA = ModuleIdentity((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201))
if mibBuilder.loadTexts: sysSLA.setLastUpdated('0809171056Z')
if mibBuilder.loadTexts: sysSLA.setOrganization('Maipu Communication Technology Co. LTD.')
if mibBuilder.loadTexts: sysSLA.setContactInfo('Maipu Communication Technology Co. LTD.')
if mibBuilder.loadTexts: sysSLA.setDescription('Node for System SLA subtree.')
sysSlaGbl = MibIdentifier((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 1))
sysSlaCtrl = MibScalar((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 1, 1), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSlaCtrl.setStatus('current')
if mibBuilder.loadTexts: sysSlaCtrl.setDescription('RTR global switch enable(2)-enable RTR module disable(2)-no RTR module')
sysSlaResponder = MibScalar((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSlaResponder.setStatus('current')
if mibBuilder.loadTexts: sysSlaResponder.setDescription('Rtr Responder TRUE(1)-Rtr Responder False(2)-no Rtr Responder on valid in jitter entity now')
sysSlaNotUsedEntityId = MibScalar((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSlaNotUsedEntityId.setStatus('current')
if mibBuilder.loadTexts: sysSlaNotUsedEntityId.setDescription('The entity id that not in use')
sysSlaNotUsedScheId = MibScalar((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSlaNotUsedScheId.setStatus('current')
if mibBuilder.loadTexts: sysSlaNotUsedScheId.setDescription('The schedule id that not in use')
sysSlaEntityMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 2))
sysSlaEntityTable = MibTable((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 2, 100), )
if mibBuilder.loadTexts: sysSlaEntityTable.setStatus('current')
if mibBuilder.loadTexts: sysSlaEntityTable.setDescription('Rtr entity table,config or view information about Rtr entity')
sysSlaEntityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 2, 100, 1), ).setIndexNames((0, "MPSLA", "rtrEntityId"))
if mibBuilder.loadTexts: sysSlaEntityEntry.setStatus('current')
if mibBuilder.loadTexts: sysSlaEntityEntry.setDescription('Rtr entity,config or view information about Rtr entity')
slaEntityId = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 2, 100, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaEntityId.setStatus('current')
if mibBuilder.loadTexts: slaEntityId.setDescription('Rtr entity Id,index')
slaEntityName = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 2, 100, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaEntityName.setStatus('current')
if mibBuilder.loadTexts: slaEntityName.setDescription('rtr entity name,araised aumatically,read-only')
slaEntityType = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 2, 100, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("icmpEcho", 1), ("jitter", 2), ("flowStatistics", 3), ("udpecho", 4), ("icmpPathJit", 5), ("icmpPathEcho", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaEntityType.setStatus('current')
if mibBuilder.loadTexts: slaEntityType.setDescription('rtr entity,inlcuding icmpEcho,jitter,flow statistics,udpecho,icmp path echo,icmp path jitter')
slaEntityRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 2, 100, 1, 4), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaEntityRowStatus.setStatus('current')
if mibBuilder.loadTexts: slaEntityRowStatus.setDescription('rtr entity row status')
sysSlaGroupMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 3))
sysSlaGroupTable = MibTable((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 3, 100), )
if mibBuilder.loadTexts: sysSlaGroupTable.setStatus('current')
if mibBuilder.loadTexts: sysSlaGroupTable.setDescription('Rtr group table')
sysSlaGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 3, 100, 1), ).setIndexNames((0, "MPSLA", "slaGroupId"))
if mibBuilder.loadTexts: sysSlaGroupEntry.setStatus('current')
if mibBuilder.loadTexts: sysSlaGroupEntry.setDescription('Rtr group entity')
slaGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 3, 100, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaGroupId.setStatus('current')
if mibBuilder.loadTexts: slaGroupId.setDescription('rtr group id,index')
slaGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 3, 100, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaGroupName.setStatus('current')
if mibBuilder.loadTexts: slaGroupName.setDescription('rtr group name,araised aumatically, read-only')
slaGroupInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 3, 100, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaGroupInterval.setStatus('current')
if mibBuilder.loadTexts: slaGroupInterval.setDescription('rtr group interval, seconds')
slaGroupEntityMembers = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 3, 100, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaGroupEntityMembers.setStatus('current')
if mibBuilder.loadTexts: slaGroupEntityMembers.setDescription('RTR group membersstring type 1310-2050 string length no more than 255, separated by comma,no space in the string')
slaGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 3, 100, 1, 5), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaGroupRowStatus.setStatus('current')
if mibBuilder.loadTexts: slaGroupRowStatus.setDescription('rtr group table row status')
sysSlaScheduleMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 4))
sysSlaScheduleTable = MibTable((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 4, 100), )
if mibBuilder.loadTexts: sysSlaScheduleTable.setStatus('current')
if mibBuilder.loadTexts: sysSlaScheduleTable.setDescription('rtr schedule table')
sysSlaScheduleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 4, 100, 1), ).setIndexNames((0, "MPSLA", "slaScheduleId"))
if mibBuilder.loadTexts: sysSlaScheduleEntry.setStatus('current')
if mibBuilder.loadTexts: sysSlaScheduleEntry.setDescription('rtr schedule table entry')
slaScheduleId = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 4, 100, 1, 1), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaScheduleId.setStatus('current')
if mibBuilder.loadTexts: slaScheduleId.setDescription('rtr schedule Id,index')
slaScheduleType = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 4, 100, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("entity", 1), ("group", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaScheduleType.setStatus('current')
if mibBuilder.loadTexts: slaScheduleType.setDescription('rtr schedule type')
slaScheduleObjId = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 4, 100, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaScheduleObjId.setStatus('current')
if mibBuilder.loadTexts: slaScheduleObjId.setDescription('id of rtrschedule object which means rtr group or entity.')
slaScheduleStartTimeFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 4, 100, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("startNow", 1), ("afterTime", 2), ("startTime", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaScheduleStartTimeFlag.setStatus('current')
if mibBuilder.loadTexts: slaScheduleStartTimeFlag.setDescription('RTR schedule start time. startNow; afterTime; startTime-start at the given time')
slaScheduleAfterTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 4, 100, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaScheduleAfterTime.setStatus('current')
if mibBuilder.loadTexts: slaScheduleAfterTime.setDescription('RTR schedule given time. type string HH:MM:SS valid when sysRtrScheduleFlag is afterTime.')
slaScheduleStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 4, 100, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaScheduleStartTime.setStatus('current')
if mibBuilder.loadTexts: slaScheduleStartTime.setDescription('RTR schedule given time. type string HH:MM:SS,mm,dd,yyyy valid when sysRtrScheduleFlag is startTime.')
slaScheduleAgeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 4, 100, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaScheduleAgeOut.setStatus('current')
if mibBuilder.loadTexts: slaScheduleAgeOut.setDescription('rtr schedule ageout time in second.')
slaScheduleLifeFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 4, 100, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("forever", 1), ("repeatAndDie", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaScheduleLifeFlag.setStatus('current')
if mibBuilder.loadTexts: slaScheduleLifeFlag.setDescription("rtr schedule's life forever,if config, no need to config lifetime and repeat times repeatAndDie,if config, need to config lifetime and repeat times")
slaScheduleLifeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 4, 100, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaScheduleLifeTime.setStatus('current')
if mibBuilder.loadTexts: slaScheduleLifeTime.setDescription("rtr schedule's lieftime in second, valid only when rtrScheduleLifeFlag is repeatAndDie.")
slaScheduleRepeat = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 4, 100, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaScheduleRepeat.setStatus('current')
if mibBuilder.loadTexts: slaScheduleRepeat.setDescription("rtr schedule's repeat times, valid only when rtrScheduleLifeFlag is repeatAndDie.")
slaScheduleInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 4, 100, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaScheduleInterval.setStatus('current')
if mibBuilder.loadTexts: slaScheduleInterval.setDescription('rtr schedule interval in second')
slaScheduleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 4, 100, 1, 12), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaScheduleRowStatus.setStatus('current')
if mibBuilder.loadTexts: slaScheduleRowStatus.setDescription('rtr schedule row status')
sysSlaIcmpEchoMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 5))
sysSlaIcmpEchoTable = MibTable((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 5, 100), )
if mibBuilder.loadTexts: sysSlaIcmpEchoTable.setStatus('current')
if mibBuilder.loadTexts: sysSlaIcmpEchoTable.setDescription('RTR ICMP entity table')
sysSlaIcmpEchoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 5, 100, 1), ).setIndexNames((0, "MPSLA", "slaIcmpEchoTableEntityId"))
if mibBuilder.loadTexts: sysSlaIcmpEchoEntry.setStatus('current')
if mibBuilder.loadTexts: sysSlaIcmpEchoEntry.setDescription('RTR ICMP entity entry')
slaIcmpEchoTableEntityId = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 5, 100, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaIcmpEchoTableEntityId.setStatus('current')
if mibBuilder.loadTexts: slaIcmpEchoTableEntityId.setDescription('ICMP entity ID,index')
slaIcmpEchoTargetIp = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 5, 100, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaIcmpEchoTargetIp.setStatus('current')
if mibBuilder.loadTexts: slaIcmpEchoTargetIp.setDescription('ICMPECHO(ping) destination address')
slaIcmpEchoPktNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 5, 100, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 200000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaIcmpEchoPktNum.setStatus('current')
if mibBuilder.loadTexts: slaIcmpEchoPktNum.setDescription('ICMP PING send packets number,default 1. pkt-num * timeout must be less than schedule interval')
slaIcmpEchoPktLen = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 5, 100, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(36, 18024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaIcmpEchoPktLen.setStatus('current')
if mibBuilder.loadTexts: slaIcmpEchoPktLen.setDescription('ICMP PING send packets size,default 70.')
slaIcmpEchoTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 5, 100, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaIcmpEchoTimeout.setStatus('current')
if mibBuilder.loadTexts: slaIcmpEchoTimeout.setDescription('ICMP ping reply timeout in seconds,default 2 seconds. pkt-num * timeout must be less than schedule interval')
slaIcmpEchoSchInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 5, 100, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaIcmpEchoSchInterval.setStatus('current')
if mibBuilder.loadTexts: slaIcmpEchoSchInterval.setDescription('IcmpEcho interval in seconds,default 12 seconds. schedule interval must be larger than timout * pkt-num')
slaIcmpEchoExtendFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 5, 100, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaIcmpEchoExtendFlag.setStatus('current')
if mibBuilder.loadTexts: slaIcmpEchoExtendFlag.setDescription('ICMP extern ping flag, have set Tos,verify data,DF,sourceIp and vrf or yet.')
slaIcmpEchoVrfName = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 5, 100, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaIcmpEchoVrfName.setStatus('current')
if mibBuilder.loadTexts: slaIcmpEchoVrfName.setDescription('vrfname type string, valid only rtrIcmpEchoExtendFlag is TRUE,default global.')
slaIcmpEchoSourceIp = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 5, 100, 1, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaIcmpEchoSourceIp.setStatus('current')
if mibBuilder.loadTexts: slaIcmpEchoSourceIp.setDescription('ICMP source IP address, valid only rtrIcmpEchoExtendFlag is TRUE.')
slaIcmpEchoTos = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 5, 100, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaIcmpEchoTos.setStatus('current')
if mibBuilder.loadTexts: slaIcmpEchoTos.setDescription('ICMP TOS value, valid only rtrIcmpEchoExtendFlag is TRUE,default 0.')
slaIcmpEchoSetDf = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 5, 100, 1, 11), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaIcmpEchoSetDf.setStatus('current')
if mibBuilder.loadTexts: slaIcmpEchoSetDf.setDescription('ICMP pakcet DF bit, valid only rtrIcmpEchoExtendFlag is TRUE,default TRUE.')
slaIcmpEchoVerifyData = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 5, 100, 1, 12), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaIcmpEchoVerifyData.setStatus('current')
if mibBuilder.loadTexts: slaIcmpEchoVerifyData.setDescription('ICMP verifay data flag, valid only rtrIcmpEchoExtendFlag is TRUE,default FALSE.')
slaIcmpEchoHistorySize = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 5, 100, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaIcmpEchoHistorySize.setStatus('current')
if mibBuilder.loadTexts: slaIcmpEchoHistorySize.setDescription("ICMPECHO entity 's history size,default 1.")
slaIcmpEchoPeriods = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 5, 100, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaIcmpEchoPeriods.setStatus('current')
if mibBuilder.loadTexts: slaIcmpEchoPeriods.setDescription('periods,default 1.')
slaIcmpEchoAlarmType = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 5, 100, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("log", 1), ("trap", 2), ("logAndTrap", 3), ("noLogAndtrap", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaIcmpEchoAlarmType.setStatus('current')
if mibBuilder.loadTexts: slaIcmpEchoAlarmType.setDescription('RTR entity alarm type loglog message trapsnmp trap logAndTrap-log message and snmp trap noLogAndtrap-no log message and no snmp trap,default.')
slaIcmpEchoIsScheduling = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 5, 100, 1, 16), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaIcmpEchoIsScheduling.setStatus('current')
if mibBuilder.loadTexts: slaIcmpEchoIsScheduling.setDescription('TRUE(1)-in scheduling FALSE(2)-not in scheduling')
slaIcmpEchoRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 5, 100, 1, 17), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaIcmpEchoRowStatus.setStatus('current')
if mibBuilder.loadTexts: slaIcmpEchoRowStatus.setDescription('ICMP row status')
sysSlaIcmpEchoHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 5, 200), )
if mibBuilder.loadTexts: sysSlaIcmpEchoHistoryTable.setStatus('current')
if mibBuilder.loadTexts: sysSlaIcmpEchoHistoryTable.setDescription('RTR ICMP entity history table')
sysSlaIcmpEchoHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 5, 200, 1), ).setIndexNames((0, "MPSLA", "slaIcmpEchoHisTableEntityId"), (0, "MPSLA", "slaIcmpechoHistoryIndex"))
if mibBuilder.loadTexts: sysSlaIcmpEchoHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: sysSlaIcmpEchoHistoryEntry.setDescription('RTR ICMP entity entry')
slaIcmpEchoHisTableEntityId = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 5, 200, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaIcmpEchoHisTableEntityId.setStatus('current')
if mibBuilder.loadTexts: slaIcmpEchoHisTableEntityId.setDescription('ICMP entity id,index')
slaIcmpEchoHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 5, 200, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaIcmpEchoHistoryIndex.setStatus('current')
if mibBuilder.loadTexts: slaIcmpEchoHistoryIndex.setDescription('ICMP entity history index')
slaIcmpEchoRtt = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 5, 200, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaIcmpEchoRtt.setStatus('current')
if mibBuilder.loadTexts: slaIcmpEchoRtt.setDescription('ICMP entity rtt')
slaIcmpEchoPktLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 5, 200, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaIcmpEchoPktLoss.setStatus('current')
if mibBuilder.loadTexts: slaIcmpEchoPktLoss.setDescription('ICMP entity pkt loss ')
slaIcmpEchoTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 5, 200, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 39))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaIcmpEchoTime.setStatus('current')
if mibBuilder.loadTexts: slaIcmpEchoTime.setDescription('recorded time')
slaIcmpEchoTableRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 5, 200, 1, 6), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaIcmpEchoTableRowStatus.setStatus('current')
if mibBuilder.loadTexts: slaIcmpEchoTableRowStatus.setDescription('ICMP row status')
sysSlaJitterMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 6))
sysSlaJitterTable = MibTable((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 6, 100), )
if mibBuilder.loadTexts: sysSlaJitterTable.setStatus('current')
if mibBuilder.loadTexts: sysSlaJitterTable.setDescription('RTR JITTER entity table')
sysSlaJitterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 6, 100, 1), ).setIndexNames((0, "MPSLA", "slaJitterTableEntityId"))
if mibBuilder.loadTexts: sysSlaJitterEntry.setStatus('current')
if mibBuilder.loadTexts: sysSlaJitterEntry.setDescription('RTR JITTER entity entry')
slaJitterTableEntityId = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 6, 100, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaJitterTableEntityId.setStatus('current')
if mibBuilder.loadTexts: slaJitterTableEntityId.setDescription('JITTER entity id,index')
slaJitterState = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 6, 100, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("init", 1), ("pend", 2), ("request", 3), ("transmit", 4), ("halt", 5), ("finished", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaJitterState.setStatus('current')
if mibBuilder.loadTexts: slaJitterState.setDescription('JITTE entity1init2pend, 3send request4-send packets 5-halt, 6finish')
slaJitterTargetIp = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 6, 100, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaJitterTargetIp.setStatus('current')
if mibBuilder.loadTexts: slaJitterTargetIp.setDescription('JITTER responder destination ip address')
slaJitterTargetPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 6, 100, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaJitterTargetPort.setStatus('current')
if mibBuilder.loadTexts: slaJitterTargetPort.setDescription('JITTER responder destination port')
slaJitterCodec = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 6, 100, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("g711MULAW", 1), ("g711ALAW", 2), ("g729A", 3), ("userDefined", 4), ("invalid", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaJitterCodec.setStatus('current')
if mibBuilder.loadTexts: slaJitterCodec.setDescription('JITTER codec type,including: 1 G711MULAW,2 G711ALAW,3 G729A,4 USER_DEFINED 5 UNKOWN')
slaJitterPktLen = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 6, 100, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 1500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaJitterPktLen.setStatus('current')
if mibBuilder.loadTexts: slaJitterPktLen.setDescription('JITTER codec packet length, read-writable when rtrJitterCodec is USER_DEFINED else read-only type:byte.')
slaJitterPktNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 6, 100, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaJitterPktNum.setStatus('current')
if mibBuilder.loadTexts: slaJitterPktNum.setDescription('JITTER codec packet number, read-writable when rtrJitterCodec is USER_DEFINED else read-only. pkt-num * pkt-interval must be less than timeout')
slaJitterPktInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 6, 100, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(20, 6000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaJitterPktInterval.setStatus('current')
if mibBuilder.loadTexts: slaJitterPktInterval.setDescription('JITTER codec packet send interval, read-writable when rtrJitterCodec is USER_DEFINED,default 20 ms. else read-only, type:ms. pkt-num * pkt-interval must be less than timeout')
slaJitterSchInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 6, 100, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaJitterSchInterval.setStatus('current')
if mibBuilder.loadTexts: slaJitterSchInterval.setDescription('Jitter schedule interval, read-writable when rtrJitterCodec is USER_DEFINED,default 6s. else read-only, type:s. schedule interval must be larger than timeout')
slaJitterSourceIp = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 6, 100, 1, 10), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaJitterSourceIp.setStatus('current')
if mibBuilder.loadTexts: slaJitterSourceIp.setDescription('JITTER source IP address')
slaJitterSourcePort = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 6, 100, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaJitterSourcePort.setStatus('current')
if mibBuilder.loadTexts: slaJitterSourcePort.setDescription('JITTER source port')
slaJitterTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 6, 100, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 604800000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaJitterTimeout.setStatus('current')
if mibBuilder.loadTexts: slaJitterTimeout.setDescription('JITTER timeout value,type:ms,default 5000, notice,schedule interval must be larger than timeout')
slaJitterVrfName = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 6, 100, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaJitterVrfName.setStatus('current')
if mibBuilder.loadTexts: slaJitterVrfName.setDescription('JITTER vrf string,default global.')
slaJitterTos = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 6, 100, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaJitterTos.setStatus('current')
if mibBuilder.loadTexts: slaJitterTos.setDescription('JITTER pakcet TOS value,default 0.')
slaJitterHistorySize = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 6, 100, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaJitterHistorySize.setStatus('current')
if mibBuilder.loadTexts: slaJitterHistorySize.setDescription("JITTER entity's history size,default 1.")
slaJitterPeriods = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 6, 100, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaJitterPeriods.setStatus('current')
if mibBuilder.loadTexts: slaJitterPeriods.setDescription('periods,default 1.')
slaJitterAlarmType = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 6, 100, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("log", 1), ("trap", 2), ("logAndTrap", 3), ("noLogAndtrap", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaJitterAlarmType.setStatus('current')
if mibBuilder.loadTexts: slaJitterAlarmType.setDescription('RTR entity alarm type log(1)log message trap(2)snmp trap logAndTrap(3)-log message and snmp trap noLogAndtrap(4)-no log message and no snmp trap,default.')
slaJitterTableRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 6, 100, 1, 18), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaJitterTableRowStatus.setStatus('current')
if mibBuilder.loadTexts: slaJitterTableRowStatus.setDescription('JITTER row status')
sysSlaJitterHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 6, 200), )
if mibBuilder.loadTexts: sysSlaJitterHistoryTable.setStatus('current')
if mibBuilder.loadTexts: sysSlaJitterHistoryTable.setDescription('RTR JITTER history table')
sysSlaJitterHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 6, 200, 1), ).setIndexNames((0, "MPSLA", "slaJitterHisTableEntityId"), (0, "MPSLA", "slaJitterHistoryIndex"))
if mibBuilder.loadTexts: sysSlaJitterHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: sysSlaJitterHistoryEntry.setDescription('RTR JITTER entity entry')
slaJitterHisTableEntityId = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 6, 200, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaJitterHisTableEntityId.setStatus('current')
if mibBuilder.loadTexts: slaJitterHisTableEntityId.setDescription('JITTER entity id, index')
slaJitterHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 6, 200, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaJitterHistoryIndex.setStatus('current')
if mibBuilder.loadTexts: slaJitterHistoryIndex.setDescription('JITTER history index')
slaJitterRtt = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 6, 200, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaJitterRtt.setStatus('current')
if mibBuilder.loadTexts: slaJitterRtt.setDescription('JITTER round-trip-time value in ms')
slaJitterPktLossSd = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 6, 200, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaJitterPktLossSd.setStatus('current')
if mibBuilder.loadTexts: slaJitterPktLossSd.setDescription('JITTER total lossed pakcets which send by the source ')
slaJitterPktLossDs = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 6, 200, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaJitterPktLossDs.setStatus('current')
if mibBuilder.loadTexts: slaJitterPktLossDs.setDescription('JITTER total loss pakcets which send by the target')
slaJitterSd = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 6, 200, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaJitterSd.setStatus('current')
if mibBuilder.loadTexts: slaJitterSd.setDescription('JITTER destination to source jitter in millisecond')
slaJitterDs = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 6, 200, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaJitterDs.setStatus('current')
if mibBuilder.loadTexts: slaJitterDs.setDescription('JITTER source to destination jitter in millisecond')
slaJitterDelaySd = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 6, 200, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaJitterDelaySd.setStatus('current')
if mibBuilder.loadTexts: slaJitterDelaySd.setDescription('JITTER maximal destination to source delay in millisecond')
slaJitterDelayDs = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 6, 200, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaJitterDelayDs.setStatus('current')
if mibBuilder.loadTexts: slaJitterDelayDs.setDescription('JITTER maximal source to destination delay in millisecond')
slaJitterIcpif = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 6, 200, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaJitterIcpif.setStatus('current')
if mibBuilder.loadTexts: slaJitterIcpif.setDescription('JITTER icpif')
slaJitterMos = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 6, 200, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaJitterMos.setStatus('current')
if mibBuilder.loadTexts: slaJitterMos.setDescription('JITTER MOS')
slaJitterTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 6, 200, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaJitterTime.setStatus('current')
if mibBuilder.loadTexts: slaJitterTime.setDescription('recorded time')
slaJitterHisTableRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 6, 200, 1, 13), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaJitterHisTableRowStatus.setStatus('current')
if mibBuilder.loadTexts: slaJitterHisTableRowStatus.setDescription('JITTER history row status')
sysSlaUdpEchoMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 7))
sysSlaUdpEchoTable = MibTable((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 7, 100), )
if mibBuilder.loadTexts: sysSlaUdpEchoTable.setStatus('current')
if mibBuilder.loadTexts: sysSlaUdpEchoTable.setDescription('RTR UDPECHO entity table')
sysSlaUdpEchoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 7, 100, 1), ).setIndexNames((0, "MPSLA", "slaUdpEchoTableEntityId"))
if mibBuilder.loadTexts: sysSlaUdpEchoEntry.setStatus('current')
if mibBuilder.loadTexts: sysSlaUdpEchoEntry.setDescription('RTR UDPECHO entity entry')
slaUdpEchoTableEntityId = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 7, 100, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaUdpEchoTableEntityId.setStatus('current')
if mibBuilder.loadTexts: slaUdpEchoTableEntityId.setDescription('UDPECHO entity id,index')
slaUdpEchoState = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 7, 100, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("init", 1), ("pend", 2), ("request", 3), ("transmit", 4), ("halt", 5), ("finished", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaUdpEchoState.setStatus('current')
if mibBuilder.loadTexts: slaUdpEchoState.setDescription('UDPECHO entity1init2pend 3send request4-send packets5-halt, 6finish')
slaUdpEchoTargetIp = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 7, 100, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaUdpEchoTargetIp.setStatus('current')
if mibBuilder.loadTexts: slaUdpEchoTargetIp.setDescription('UDPECHO responder destination ip address')
slaUdpEchoTargetPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 7, 100, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaUdpEchoTargetPort.setStatus('current')
if mibBuilder.loadTexts: slaUdpEchoTargetPort.setDescription('UDPECHO responder destination port')
slaUdpEchoPktLen = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 7, 100, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 1500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaUdpEchoPktLen.setStatus('current')
if mibBuilder.loadTexts: slaUdpEchoPktLen.setDescription('UDPECHO packet length,default 16.')
slaUdpEchoSchInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 7, 100, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaUdpEchoSchInterval.setStatus('current')
if mibBuilder.loadTexts: slaUdpEchoSchInterval.setDescription('UDPECHO schedule interval in milliseconds,default 6. type:s. schedule interval must be larger than timeout')
slaUdpEchoSourceIp = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 7, 100, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaUdpEchoSourceIp.setStatus('current')
if mibBuilder.loadTexts: slaUdpEchoSourceIp.setDescription('UDPECHO source IP address')
slaUdpEchoSourcePort = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 7, 100, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaUdpEchoSourcePort.setStatus('current')
if mibBuilder.loadTexts: slaUdpEchoSourcePort.setDescription('UDPECHO source port')
slaUdpEchoTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 7, 100, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 604800000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaUdpEchoTimeout.setStatus('current')
if mibBuilder.loadTexts: slaUdpEchoTimeout.setDescription('UDPECHO timeout value,type:ms,default 5000. schedule interval must be larger than timeout')
slaUdpEchoVrfName = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 7, 100, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaUdpEchoVrfName.setStatus('current')
if mibBuilder.loadTexts: slaUdpEchoVrfName.setDescription('UDPECHO vrf string,default global.')
slaUdpEchoTos = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 7, 100, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaUdpEchoTos.setStatus('current')
if mibBuilder.loadTexts: slaUdpEchoTos.setDescription('UDPECHO pakcet TOS value,default 0.')
slaUdpEchoHistorySize = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 7, 100, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaUdpEchoHistorySize.setStatus('current')
if mibBuilder.loadTexts: slaUdpEchoHistorySize.setDescription("UDPECHO entity's history size,defualt 1.")
slaUdpEchoPeriods = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 7, 100, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaUdpEchoPeriods.setStatus('current')
if mibBuilder.loadTexts: slaUdpEchoPeriods.setDescription('periods,default 1.')
slaUdpEchoAlarmType = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 7, 100, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("log", 1), ("trap", 2), ("logAndTrap", 3), ("noLogAndtrap", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaUdpEchoAlarmType.setStatus('current')
if mibBuilder.loadTexts: slaUdpEchoAlarmType.setDescription('RTR entity alarm type, loglog message, trapsnmp trap, logAndTrap-log message and snmp trap, noLogAndtrap-no log message and no snmp trap,default.')
slaUdpEchoTableRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 7, 100, 1, 15), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaUdpEchoTableRowStatus.setStatus('current')
if mibBuilder.loadTexts: slaUdpEchoTableRowStatus.setDescription('UDPECHO row status')
sysSlaUdpEchoHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 7, 200), )
if mibBuilder.loadTexts: sysSlaUdpEchoHistoryTable.setStatus('current')
if mibBuilder.loadTexts: sysSlaUdpEchoHistoryTable.setDescription('RTR UDPECHO entity table')
sysSlaUdpEchoHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 7, 200, 1), ).setIndexNames((0, "MPSLA", "slaUdpEchoHisTableEntityId"), (0, "MPSLA", "slaUdpEchoHistoryIndex"))
if mibBuilder.loadTexts: sysSlaUdpEchoHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: sysSlaUdpEchoHistoryEntry.setDescription('RTR UDPECHO entity entry')
slaUdpEchoHisTableEntityId = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 7, 200, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaUdpEchoHisTableEntityId.setStatus('current')
if mibBuilder.loadTexts: slaUdpEchoHisTableEntityId.setDescription('UDPECHO entity id,idx')
slaUdpEchoHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 7, 200, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaUdpEchoHistoryIndex.setStatus('current')
if mibBuilder.loadTexts: slaUdpEchoHistoryIndex.setDescription('UDPECHO history index')
slaUdpEchoPktLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 7, 200, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaUdpEchoPktLoss.setStatus('current')
if mibBuilder.loadTexts: slaUdpEchoPktLoss.setDescription('UDPECHO total lossed pakcets which send by the source ')
slaUdpEchoRtt = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 7, 200, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaUdpEchoRtt.setStatus('current')
if mibBuilder.loadTexts: slaUdpEchoRtt.setDescription('UDPECHO rtt in millisecond')
slaUdpEchoTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 7, 200, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaUdpEchoTime.setStatus('current')
if mibBuilder.loadTexts: slaUdpEchoTime.setDescription('UDPECHO rtt in millisecond')
slaUdpEchoHisTableRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 7, 200, 1, 6), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaUdpEchoHisTableRowStatus.setStatus('current')
if mibBuilder.loadTexts: slaUdpEchoHisTableRowStatus.setDescription('UDPECHO row status')
sysSlaFlStaMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 8))
sysSlaFlStaTable = MibTable((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 8, 100), )
if mibBuilder.loadTexts: sysSlaFlStaTable.setStatus('current')
if mibBuilder.loadTexts: sysSlaFlStaTable.setDescription('RTR flow statistics table')
sysSlaFlStaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 8, 100, 1), ).setIndexNames((0, "MPSLA", "slaFlStaTableEntityId"))
if mibBuilder.loadTexts: sysSlaFlStaEntry.setStatus('current')
if mibBuilder.loadTexts: sysSlaFlStaEntry.setDescription('RTR flow statistics entry')
slaFlStaTableEntityId = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 8, 100, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaFlStaTableEntityId.setStatus('current')
if mibBuilder.loadTexts: slaFlStaTableEntityId.setDescription('flow statistics entity Id')
slaFlStaIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 8, 100, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaFlStaIfName.setStatus('current')
if mibBuilder.loadTexts: slaFlStaIfName.setDescription('interface name which will be statistic')
slaFlStaInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 8, 100, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaFlStaInterval.setStatus('current')
if mibBuilder.loadTexts: slaFlStaInterval.setDescription('monitor interval in second,default 600.')
slaFlStaHistorySize = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 8, 100, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaFlStaHistorySize.setStatus('current')
if mibBuilder.loadTexts: slaFlStaHistorySize.setDescription("flow statistics entity's history size,default 1.")
slaFlStaPeriods = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 8, 100, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaFlStaPeriods.setStatus('current')
if mibBuilder.loadTexts: slaFlStaPeriods.setDescription('periods,default 1.')
slaFlStaAlarmType = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 8, 100, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("log", 1), ("trap", 2), ("logAndTrap", 3), ("noLogAndtrap", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaFlStaAlarmType.setStatus('current')
if mibBuilder.loadTexts: slaFlStaAlarmType.setDescription('RTR entity alarm type loglog message trapsnmp trap logAndTrap-log message and snmp trap noLogAndtrap-no log message and no snmp trap,default')
slaFlStaTableRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 8, 100, 1, 7), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaFlStaTableRowStatus.setStatus('current')
if mibBuilder.loadTexts: slaFlStaTableRowStatus.setDescription('flow statistics row status')
sysSlaFlStaHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 8, 200), )
if mibBuilder.loadTexts: sysSlaFlStaHistoryTable.setStatus('current')
if mibBuilder.loadTexts: sysSlaFlStaHistoryTable.setDescription('RTR flow statistics table')
sysSlaFlStaHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 8, 200, 1), ).setIndexNames((0, "MPSLA", "slaFlStaHisTableEntityId"), (0, "MPSLA", "slaFlStaHistoryIndex"))
if mibBuilder.loadTexts: sysSlaFlStaHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: sysSlaFlStaHistoryEntry.setDescription('RTR flow statistics entry')
slaFlStaHisTableEntityId = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 8, 200, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaFlStaHisTableEntityId.setStatus('current')
if mibBuilder.loadTexts: slaFlStaHisTableEntityId.setDescription('flow statistics entity Id')
slaFlStaHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 8, 200, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaFlStaHistoryIndex.setStatus('current')
if mibBuilder.loadTexts: slaFlStaHistoryIndex.setDescription('Pakcets received once sampling period ')
slaFlStaInputPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 8, 200, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaFlStaInputPkts.setStatus('current')
if mibBuilder.loadTexts: slaFlStaInputPkts.setDescription('Pakcets received once sampling period ')
slaFlStaInputFlow = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 8, 200, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaFlStaInputFlow.setStatus('current')
if mibBuilder.loadTexts: slaFlStaInputFlow.setDescription('maximal flow value received')
slaFlStaOutputPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 8, 200, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaFlStaOutputPkts.setStatus('current')
if mibBuilder.loadTexts: slaFlStaOutputPkts.setDescription('Pakcets send once sampling period ')
slaFlStaOutputFlow = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 8, 200, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaFlStaOutputFlow.setStatus('current')
if mibBuilder.loadTexts: slaFlStaOutputFlow.setDescription('maximal flow send ')
slaFlStaTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 8, 200, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaFlStaTime.setStatus('current')
if mibBuilder.loadTexts: slaFlStaTime.setDescription('maximal flow send ')
slaFlStaHisTableRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 8, 200, 1, 8), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaFlStaHisTableRowStatus.setStatus('current')
if mibBuilder.loadTexts: slaFlStaHisTableRowStatus.setDescription('flow statistics row status')
sysSlaIcmpPathJitMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 9))
sysSlaIcmpPathJitTable = MibTable((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 9, 100), )
if mibBuilder.loadTexts: sysSlaIcmpPathJitTable.setStatus('current')
if mibBuilder.loadTexts: sysSlaIcmpPathJitTable.setDescription('RTR ICMP PATH JITTER entity table')
sysSlaIcmpPathJitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 9, 100, 1), ).setIndexNames((0, "MPSLA", "slaIcmpPJTableEntityId"))
if mibBuilder.loadTexts: sysSlaIcmpPathJitEntry.setStatus('current')
if mibBuilder.loadTexts: sysSlaIcmpPathJitEntry.setDescription('RTR ICMP entity entry')
slaIcmpPJTableEntityId = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 9, 100, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaIcmpPJTableEntityId.setStatus('current')
if mibBuilder.loadTexts: slaIcmpPJTableEntityId.setDescription('ICMP PATH JITTER entity ID,index')
slaIcmpPJTargetIp = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 9, 100, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaIcmpPJTargetIp.setStatus('current')
if mibBuilder.loadTexts: slaIcmpPJTargetIp.setDescription('ICMP PATH JITTER(ping) destination address')
slaIcmpPJPktNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 9, 100, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 200000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaIcmpPJPktNum.setStatus('current')
if mibBuilder.loadTexts: slaIcmpPJPktNum.setDescription('ICMP PATH JITTER PING send packets number,default 10. pkt-num * pkt-interval must be less than timeout')
slaIcmpPJPktLen = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 9, 100, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(36, 18024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaIcmpPJPktLen.setStatus('current')
if mibBuilder.loadTexts: slaIcmpPJPktLen.setDescription('ICMP PATH JITTER PING send packets size,default 32.')
slaIcmpPJTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 9, 100, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 604800000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaIcmpPJTimeout.setStatus('current')
if mibBuilder.loadTexts: slaIcmpPJTimeout.setDescription('ICMP ping reply timeout in miliseconds,default 5000. schedule interval must be larger than timeout')
slaIcmpPJPktInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 9, 100, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(20, 6000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaIcmpPJPktInterval.setStatus('current')
if mibBuilder.loadTexts: slaIcmpPJPktInterval.setDescription('IcmpEcho packet interval in milliseconds,default 20. pkt-num * pkt-interval must be less than timeout')
slaIcmpPJSchInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 9, 100, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 604800))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaIcmpPJSchInterval.setStatus('current')
if mibBuilder.loadTexts: slaIcmpPJSchInterval.setDescription('IcmpEcho interval in seconds,default 60. schedule interval must be larger than timeout')
slaIcmpPJVrfName = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 9, 100, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaIcmpPJVrfName.setStatus('current')
if mibBuilder.loadTexts: slaIcmpPJVrfName.setDescription('vrfname string,default global.')
slaIcmpPJSourceIp = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 9, 100, 1, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaIcmpPJSourceIp.setStatus('current')
if mibBuilder.loadTexts: slaIcmpPJSourceIp.setDescription('ICMP PATH JITTER source IP address')
slaIcmpPJTos = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 9, 100, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaIcmpPJTos.setStatus('current')
if mibBuilder.loadTexts: slaIcmpPJTos.setDescription('ICMP PATH JITTER TOS value,default 0.')
slaIcmpPJVerifyData = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 9, 100, 1, 11), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaIcmpPJVerifyData.setStatus('current')
if mibBuilder.loadTexts: slaIcmpPJVerifyData.setDescription("ICMP PATH JITTER verifay data flag true(1)-verifa data; false(2)-don't verify data,default.")
slaIcmpPJAlarmType = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 9, 100, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("log", 1), ("trap", 2), ("logAndTrap", 3), ("noLogAndtrap", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaIcmpPJAlarmType.setStatus('current')
if mibBuilder.loadTexts: slaIcmpPJAlarmType.setDescription('RTR entity alarm type loglog message trapsnmp trap logAndTrap-log message and snmp trap noLogAndtrap-no log message and no snmp trap,default.')
slaIcmpPJTargetOnly = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 9, 100, 1, 13), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaIcmpPJTargetOnly.setStatus('current')
if mibBuilder.loadTexts: slaIcmpPJTargetOnly.setDescription('ICMP PATH JITTER target only or not. TRUE-target only,default; FALSE-hop by hop.')
slaIcmpPJHistorySize = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 9, 100, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaIcmpPJHistorySize.setStatus('current')
if mibBuilder.loadTexts: slaIcmpPJHistorySize.setDescription("Max size of ICMP PATH JITTER entity's history,default 1.")
slaIcmpPJPeriods = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 9, 100, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaIcmpPJPeriods.setStatus('current')
if mibBuilder.loadTexts: slaIcmpPJPeriods.setDescription('periods,default 1.')
slaIcmpPJLsrPath = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 9, 100, 1, 16), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaIcmpPJLsrPath.setStatus('current')
if mibBuilder.loadTexts: slaIcmpPJLsrPath.setDescription('Lsr-path of ICMP PATH JITTER entity,default 0.0.0.0')
slaIcmpPJIsScheduling = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 9, 100, 1, 17), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaIcmpPJIsScheduling.setStatus('current')
if mibBuilder.loadTexts: slaIcmpPJIsScheduling.setDescription('Status of schedule of ICMP PATH JITTER entity TRUE(1)-in scheduling, FALSE(2)-not in scheduling')
slaIcmpPJTableRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 9, 100, 1, 18), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaIcmpPJTableRowStatus.setStatus('current')
if mibBuilder.loadTexts: slaIcmpPJTableRowStatus.setDescription('ICMP PATH JITTER row status')
sysSlaIcmpPathJitHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 9, 200), )
if mibBuilder.loadTexts: sysSlaIcmpPathJitHistoryTable.setStatus('current')
if mibBuilder.loadTexts: sysSlaIcmpPathJitHistoryTable.setDescription('RTR ICMP PATH JITTER entity history table')
sysSlaIcmpPathJitHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 9, 200, 1), ).setIndexNames((0, "MPSLA", "slaIcmpPJHisTableEntityId"), (0, "MPSLA", "slaIcmpPJHopIndex"), (0, "MPSLA", "slaIcmpPJHistoryIndex"), (0, "MPSLA", "slaIcmpPJGetStatus"))
if mibBuilder.loadTexts: sysSlaIcmpPathJitHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: sysSlaIcmpPathJitHistoryEntry.setDescription('RTR ICMP entity entry')
slaIcmpPJHisTableEntityId = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 9, 200, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaIcmpPJHisTableEntityId.setStatus('current')
if mibBuilder.loadTexts: slaIcmpPJHisTableEntityId.setDescription('ICMP PATH JITTER entity hop index')
slaIcmpPJHopIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 9, 200, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaIcmpPJHopIndex.setStatus('current')
if mibBuilder.loadTexts: slaIcmpPJHopIndex.setDescription('ICMP PATH JITTER entity hop index')
slaIcmpPJHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 9, 200, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaIcmpPJHistoryIndex.setStatus('current')
if mibBuilder.loadTexts: slaIcmpPJHistoryIndex.setDescription('ICMP PATH JITTER entity history index,now we only record the last message')
slaIcmpPJRtt = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 9, 200, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaIcmpPJRtt.setStatus('current')
if mibBuilder.loadTexts: slaIcmpPJRtt.setDescription('ICMP entity rtt')
slaIcmpPJJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 9, 200, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaIcmpPJJitter.setStatus('current')
if mibBuilder.loadTexts: slaIcmpPJJitter.setDescription('ICMP entity jitter')
slaIcmpPJPktLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 9, 200, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaIcmpPJPktLoss.setStatus('current')
if mibBuilder.loadTexts: slaIcmpPJPktLoss.setDescription('ICMP entity packet loss')
slaIcmpPJTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 9, 200, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaIcmpPJTime.setStatus('current')
if mibBuilder.loadTexts: slaIcmpPJTime.setDescription('recorded time')
slaIcmpPJGetStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 9, 200, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaIcmpPJGetStatus.setStatus('current')
if mibBuilder.loadTexts: slaIcmpPJGetStatus.setDescription('1:has get all hop history; 0:has not get all hop history')
slaIcmpPJHisTableRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 9, 200, 1, 9), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaIcmpPJHisTableRowStatus.setStatus('current')
if mibBuilder.loadTexts: slaIcmpPJHisTableRowStatus.setDescription('ICMP row status')
sysSlaIcmpPathEchoMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 10))
sysSlaIcmpPathEchoTable = MibTable((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 10, 100), )
if mibBuilder.loadTexts: sysSlaIcmpPathEchoTable.setStatus('current')
if mibBuilder.loadTexts: sysSlaIcmpPathEchoTable.setDescription('RTR ICMP PATH JITTER entity table')
sysSlaIcmpPathEchoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 10, 100, 1), ).setIndexNames((0, "MPSLA", "slaIcmpPETableEntityId"))
if mibBuilder.loadTexts: sysSlaIcmpPathEchoEntry.setStatus('current')
if mibBuilder.loadTexts: sysSlaIcmpPathEchoEntry.setDescription('RTR ICMP entity entry')
slaIcmpPETableEntityId = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 10, 100, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaIcmpPETableEntityId.setStatus('current')
if mibBuilder.loadTexts: slaIcmpPETableEntityId.setDescription('ICMP PATH ECHO entity ID,index')
slaIcmpPETargetIp = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 10, 100, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaIcmpPETargetIp.setStatus('current')
if mibBuilder.loadTexts: slaIcmpPETargetIp.setDescription('ICMP PATH ECHO(ping) destination address')
slaIcmpPEPktLen = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 10, 100, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(36, 18024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaIcmpPEPktLen.setStatus('current')
if mibBuilder.loadTexts: slaIcmpPEPktLen.setDescription('ICMP PATH ECHO PING send packets size,default 32.')
slaIcmpPETimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 10, 100, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 604800000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaIcmpPETimeout.setStatus('current')
if mibBuilder.loadTexts: slaIcmpPETimeout.setDescription('ICMP ping reply timeout in miliseconds,default 5000. schedule interval must be larger than timeout')
slaIcmpPESchInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 10, 100, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaIcmpPESchInterval.setStatus('current')
if mibBuilder.loadTexts: slaIcmpPESchInterval.setDescription('IcmpPathEcho interval in seconds,default 60. schedule interval must be larger than timeout')
slaIcmpPEVrfName = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 10, 100, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaIcmpPEVrfName.setStatus('current')
if mibBuilder.loadTexts: slaIcmpPEVrfName.setDescription('vrfname string,default global.')
slaIcmpPESourceIp = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 10, 100, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaIcmpPESourceIp.setStatus('current')
if mibBuilder.loadTexts: slaIcmpPESourceIp.setDescription('ICMP PATH ECHO source IP address')
slaIcmpPETos = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 10, 100, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaIcmpPETos.setStatus('current')
if mibBuilder.loadTexts: slaIcmpPETos.setDescription('ICMP PATH ECHO TOS value,default 0.')
slaIcmpPEVerifyData = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 10, 100, 1, 9), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaIcmpPEVerifyData.setStatus('current')
if mibBuilder.loadTexts: slaIcmpPEVerifyData.setDescription("ICMP PATH JITTER verifay data flag true(1)-verify data; false(2)-don't verify data,default.")
slaIcmpPELsrPath = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 10, 100, 1, 10), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaIcmpPELsrPath.setStatus('current')
if mibBuilder.loadTexts: slaIcmpPELsrPath.setDescription('ICMP PATH JITTER lsr-path,default 0.0.0.0')
slaIcmpPEHistorySize = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 10, 100, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaIcmpPEHistorySize.setStatus('current')
if mibBuilder.loadTexts: slaIcmpPEHistorySize.setDescription("Max size of ICMP PATH ECHO entity 's history,default 1.")
slaIcmpPEPeriods = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 10, 100, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaIcmpPEPeriods.setStatus('current')
if mibBuilder.loadTexts: slaIcmpPEPeriods.setDescription('periods,default 1.')
slaIcmpPEAlarmType = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 10, 100, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("log", 1), ("trap", 2), ("logAndTrap", 3), ("noLogAndtrap", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaIcmpPEAlarmType.setStatus('current')
if mibBuilder.loadTexts: slaIcmpPEAlarmType.setDescription('RTR entity alarm type loglog message trapsnmp trap logAndTrap-log message and snmp trap noLogAndtrap-no log message and no snmp trap,default 1.')
slaIcmpPETargetOnly = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 10, 100, 1, 14), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaIcmpPETargetOnly.setStatus('current')
if mibBuilder.loadTexts: slaIcmpPETargetOnly.setDescription('TRUE(1)-targetOnly FALSE(2)-not targetOnly,default.')
slaIcmpPEIsScheduling = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 10, 100, 1, 15), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaIcmpPEIsScheduling.setStatus('current')
if mibBuilder.loadTexts: slaIcmpPEIsScheduling.setDescription('The scheduling status of ICMP PATH ECHO entity TRUE(1)-in scheduling FALSE(2)-not in scheduling')
slaIcmpPETableRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 10, 100, 1, 16), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaIcmpPETableRowStatus.setStatus('current')
if mibBuilder.loadTexts: slaIcmpPETableRowStatus.setDescription('ICMP PATH JITTER row status')
sysSlaIcmpPathEchoHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 10, 200), )
if mibBuilder.loadTexts: sysSlaIcmpPathEchoHistoryTable.setStatus('current')
if mibBuilder.loadTexts: sysSlaIcmpPathEchoHistoryTable.setDescription('RTR ICMP PATH ECHO entity history table')
sysSlaIcmpPathEchoHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 10, 200, 1), ).setIndexNames((0, "MPSLA", "slaIcmpPEHisTableEntityId"), (0, "MPSLA", "slaIcmpPEHopIndex"), (0, "MPSLA", "slaIcmpPEHistoryIndex"), (0, "MPSLA", "slaIcmpPEGetStatus"))
if mibBuilder.loadTexts: sysSlaIcmpPathEchoHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: sysSlaIcmpPathEchoHistoryEntry.setDescription('RTR ICMP entity entry')
slaIcmpPEHisTableEntityId = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 10, 200, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaIcmpPEHisTableEntityId.setStatus('current')
if mibBuilder.loadTexts: slaIcmpPEHisTableEntityId.setDescription('ICMP PATH ECHO entity id,index')
slaIcmpPEHopIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 10, 200, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaIcmpPEHopIndex.setStatus('current')
if mibBuilder.loadTexts: slaIcmpPEHopIndex.setDescription('ICMP PATH ECHO hop index')
slaIcmpPEHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 10, 200, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaIcmpPEHistoryIndex.setStatus('current')
if mibBuilder.loadTexts: slaIcmpPEHistoryIndex.setDescription('ICMP PATH ECHO entity history index')
slaIcmpPERtt = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 10, 200, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaIcmpPERtt.setStatus('current')
if mibBuilder.loadTexts: slaIcmpPERtt.setDescription('ICMP PATH ECHO entity rtt')
slaIcmpPEPktLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 10, 200, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaIcmpPEPktLoss.setStatus('current')
if mibBuilder.loadTexts: slaIcmpPEPktLoss.setDescription('ICMP PATH ECHO entity packet loss')
slaIcmpPETime = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 10, 200, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 29))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaIcmpPETime.setStatus('current')
if mibBuilder.loadTexts: slaIcmpPETime.setDescription('recorded time')
slaIcmpPEGetStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 10, 200, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaIcmpPEGetStatus.setStatus('current')
if mibBuilder.loadTexts: slaIcmpPEGetStatus.setDescription('1:has get all hop history; 0:has not get all hop history')
slaIcmpPEHisTableRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 10, 200, 1, 8), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaIcmpPEHisTableRowStatus.setStatus('current')
if mibBuilder.loadTexts: slaIcmpPEHisTableRowStatus.setDescription('ICMP PATH ECHO row status')
sysSlaThresholdMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 11))
sysSlaThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 11, 100), )
if mibBuilder.loadTexts: sysSlaThresholdTable.setStatus('current')
if mibBuilder.loadTexts: sysSlaThresholdTable.setDescription('RTR alarm table')
sysSlaThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 11, 100, 1), ).setIndexNames((0, "MPSLA", "slaThresholdTableEntityId"), (0, "MPSLA", "slaThresholdString"), (0, "MPSLA", "slaThresholdIndex"))
if mibBuilder.loadTexts: sysSlaThresholdEntry.setStatus('current')
if mibBuilder.loadTexts: sysSlaThresholdEntry.setDescription('RTR threshold entry')
slaThresholdTableEntityId = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 11, 100, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaThresholdTableEntityId.setStatus('current')
if mibBuilder.loadTexts: slaThresholdTableEntityId.setDescription('SLA entity ID,index')
slaThresholdString = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 11, 100, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 29))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaThresholdString.setStatus('current')
if mibBuilder.loadTexts: slaThresholdString.setDescription("icmpEcho-rtt(threshold of icmp echo's rtt,0-9000ms(default:9000ms)), icmpEcho-pktLoss(threshold of icmp echo's pkt loss,0-200000000(default:200000000)), udpEcho-rtt(threshold of udp echo's rtt,0-9000ms(default:9000ms)), udpEcho-pktLoss(threshold of udp echo's packet loss,0-1(default:1)) jitter-rtt(threshold of jitter's rtt,0-9000ms(default:9000ms)), jitter-jitterSd(threshold of jitter entity's jitter from source to dest,0-6000ms(default:6000ms)), jitter-jitterDs(threshold of jitter entity's jitter from dest to source,0-6000ms(default:6000ms)), jitter-delaySd(threshold of jitter entity's delay from source to dest,0-5000ms(default:5000ms)), jitter-delayDs(threshold of jitter entity's delay from dest to source,0-5000ms(default:5000ms)), jitter-pktLossSd(threshold of jitter entity's pkt loss from source to dest,0-200000000(default:200000000)), jitter-PktLossDs(threshold of jitter entity's pkt loss from dest to source,0-200000000(default:200000000)), jitter-mos(threshold of jitter entity's mos,0-10000000(default:10000000)), jitter-icpif(threshold of jitter entity's icpif,0-100000000(default:100000000)), icmpPathJitter-rtt(threshold of icmp path jitter entity's rtt,0-9000ms(default:9000ms)), icmpPathJitter-pktLoss(threshold of icmp path jitter entity's pkt loss,0-200000000(default:200000000)), icmpPathJitter-jitter(threshold of icmp path jitter entity's jitter,0-6000ms(default:6000ms)), icmpPathEcho-rtt(threshold of icmp path echo entity's rtt,0-9000ms(default:9000ms)), icmpPathEcho-pktloss(threshold of icmp path echo entity's [kt loss,0-1(default:1)), flSta-inPkt(threshold of flow statistics entity's input packet,0-200000000(default:200000000)), flSta-inFlow(threshold of flow statistics entity's input flow,0-200000000(default:200000000)), flSta-outPkt(threshold of flow statistics entity's output packet,0-200000000(default:200000000)), flSta-outFlow(threshold of flow statistics entity's output flow,0-200000000(default:200000000)), macping-delay(threshold of mac sla unidrectional delay, 0-5000ms(default:500ms)), macping-rtDelay(threshold of mac sla ring back delay, 0-5000ms(default:500ms)), macping-jitter(threshold of mac sla jitter, 0-5000ms(default:500ms)), macping-lostPC(threshold of mac sla lost percent, 0-50(default:50%))")
slaThresholdValue = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 11, 100, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaThresholdValue.setStatus('current')
if mibBuilder.loadTexts: slaThresholdValue.setDescription('The value of each threshold')
slaThresholdDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 11, 100, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaThresholdDirection.setStatus('current')
if mibBuilder.loadTexts: slaThresholdDirection.setDescription('1(>= -Alarm when result is bigger than or equal to threshold(default)), 2(<= -Alarm when result is smaller than or equal to threshold)')
slaThresholdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 11, 100, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaThresholdIndex.setStatus('current')
if mibBuilder.loadTexts: slaThresholdIndex.setDescription('Only used by equipment.')
slaThresholdRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 11, 100, 1, 6), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaThresholdRowStatus.setStatus('current')
if mibBuilder.loadTexts: slaThresholdRowStatus.setDescription('Rtr entity row status')
sysSlaMacPingMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 12))
mpMacPingTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 12, 1))
sysSlaMacPingTable = MibTable((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 12, 100), )
if mibBuilder.loadTexts: sysSlaMacPingTable.setStatus('current')
if mibBuilder.loadTexts: sysSlaMacPingTable.setDescription('MAC SLAʵϢ')
sysSlaMacPingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 12, 100, 1), ).setIndexNames((0, "MPSLA", "slaMacPingEntityId"))
if mibBuilder.loadTexts: sysSlaMacPingEntry.setStatus('current')
if mibBuilder.loadTexts: sysSlaMacPingEntry.setDescription('MAC SLAʵϢ')
slaMacPingEntityId = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 12, 100, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaMacPingEntityId.setStatus('current')
if mibBuilder.loadTexts: slaMacPingEntityId.setDescription('MAC SLA ʵID')
slaMacPingState = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 12, 100, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("stop", 1), ("run", 2), ("pause", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaMacPingState.setStatus('current')
if mibBuilder.loadTexts: slaMacPingState.setDescription('MAC SLA ʵ嵱ǰ״̬1stop2run3pause')
slaMacPingName = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 12, 100, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 49))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaMacPingName.setStatus('current')
if mibBuilder.loadTexts: slaMacPingName.setDescription('MAC SLAʵ')
slaMacPingCfmMdId = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 12, 100, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 43))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaMacPingCfmMdId.setStatus('current')
if mibBuilder.loadTexts: slaMacPingCfmMdId.setDescription('MAC SLAʵ\U000f6a35CFM')
slaMacPingCfmMaId = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 12, 100, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 45))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaMacPingCfmMaId.setStatus('current')
if mibBuilder.loadTexts: slaMacPingCfmMaId.setDescription('MAC SLAʵ\U000f6a35CFMʵ')
slaMacPingCfmSrcMepId = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 12, 100, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 8191))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaMacPingCfmSrcMepId.setStatus('current')
if mibBuilder.loadTexts: slaMacPingCfmSrcMepId.setDescription('MAC SLAʵԵԴMEP ID')
slaMacPingDesMepId = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 12, 100, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 8191))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaMacPingDesMepId.setStatus('current')
if mibBuilder.loadTexts: slaMacPingDesMepId.setDescription('MAC SLAʵԵĿMEP ID')
slaMacPingCyclsec = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 12, 100, 1, 8), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaMacPingCyclsec.setStatus('current')
if mibBuilder.loadTexts: slaMacPingCyclsec.setDescription('һMAC SLAĲ,Ĭ600(s),ֵСslaMacPingSchedInterval(ڼʱ)')
slaMacPingPktNumPerCycl = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 12, 100, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaMacPingPktNumPerCycl.setStatus('current')
if mibBuilder.loadTexts: slaMacPingPktNumPerCycl.setDescription('һβڲԱĸ(Ĭ10)')
slaMacPingAvgCyclNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 12, 100, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaMacPingAvgCyclNum.setStatus('current')
if mibBuilder.loadTexts: slaMacPingAvgCyclNum.setDescription('ƽֵͳڸ(Ĭ5)')
slaMacPingLastCycleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 12, 100, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaMacPingLastCycleTime.setStatus('current')
if mibBuilder.loadTexts: slaMacPingLastCycleTime.setDescription('MAC SLAʵһֲʱ')
slaMacPingAvgValueTimes = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 12, 100, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaMacPingAvgValueTimes.setStatus('current')
if mibBuilder.loadTexts: slaMacPingAvgValueTimes.setDescription('ƽֵͳƴ')
slaMacPingRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 12, 100, 1, 13), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slaMacPingRowStatus.setStatus('current')
if mibBuilder.loadTexts: slaMacPingRowStatus.setDescription('MAC SLAʵϢ״̬')
slaMacPingSchedInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 12, 100, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaMacPingSchedInterval.setStatus('current')
if mibBuilder.loadTexts: slaMacPingSchedInterval.setDescription('MAC SLAʵڼ,Ĭ605(s), ֵڲʱslaMacPingCycleTime.')
slaMacPingHistoryMaxCount = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 12, 100, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaMacPingHistoryMaxCount.setStatus('current')
if mibBuilder.loadTexts: slaMacPingHistoryMaxCount.setDescription('MAC SLAʵƽֵʷ¼ĬΪˣ255')
slaMacPingDesMac = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 12, 100, 1, 16), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaMacPingDesMac.setStatus('current')
if mibBuilder.loadTexts: slaMacPingDesMac.setDescription('SLA destination mac address ,ĿMacַ')
slaMacPingRemDevName = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 12, 100, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaMacPingRemDevName.setStatus('current')
if mibBuilder.loadTexts: slaMacPingRemDevName.setDescription('SLA destination device name ,Զ豸')
mpSlaTrap = NotificationType((1, 3, 6, 1, 4, 1, 5651, 2, 2, 62, 1)).setObjects(("MPSLA", "slaThresholdTableEntityId"), ("MPSLA", "slaThresholdString"), ("MPSLA", "slaThresholdValue"), ("MPSLA", "slaThresholdDirection"))
if mibBuilder.loadTexts: mpSlaTrap.setStatus('current')
if mibBuilder.loadTexts: mpSlaTrap.setDescription('This notification is generated when network trafic is not so good.')
sysSlaNmsMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 13))
sysSlaNmsTable = MibTable((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 13, 100), )
if mibBuilder.loadTexts: sysSlaNmsTable.setStatus('current')
if mibBuilder.loadTexts: sysSlaNmsTable.setDescription('Rtr entity table,config or view information about Rtr entity')
sysSlaNmsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 13, 100, 1), ).setIndexNames((0, "MPSLA", "rtrEntityId"))
if mibBuilder.loadTexts: sysSlaNmsEntry.setStatus('current')
if mibBuilder.loadTexts: sysSlaNmsEntry.setDescription('Rtr entity,config or view information about Rtr entity')
slaNmsEntityId = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 13, 100, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaNmsEntityId.setStatus('current')
if mibBuilder.loadTexts: slaNmsEntityId.setDescription('Rtr entity Id,index')
slaNmsScheduleId = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 13, 100, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaNmsScheduleId.setStatus('current')
if mibBuilder.loadTexts: slaNmsScheduleId.setDescription('Rtr schedule id.')
slaNmsId = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 13, 100, 1, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaNmsId.setStatus('current')
if mibBuilder.loadTexts: slaNmsId.setDescription('Rtr NMS schedule Id,specified by NMS(mp5)')
slaNmsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 201, 13, 100, 1, 4), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaNmsRowStatus.setStatus('current')
if mibBuilder.loadTexts: slaNmsRowStatus.setDescription('rtr entity row status')
mibBuilder.exportSymbols("MPSLA", sysSlaIcmpEchoHistoryEntry=sysSlaIcmpEchoHistoryEntry, slaScheduleAgeOut=slaScheduleAgeOut, mpios=mpios, slaFlStaOutputPkts=slaFlStaOutputPkts, slaIcmpPJPktLen=slaIcmpPJPktLen, slaIcmpPESchInterval=slaIcmpPESchInterval, sysSlaUdpEchoEntry=sysSlaUdpEchoEntry, slaScheduleId=slaScheduleId, slaIcmpEchoPktLoss=slaIcmpEchoPktLoss, sysSlaFlStaHistoryEntry=sysSlaFlStaHistoryEntry, slaNmsId=slaNmsId, slaIcmpEchoRowStatus=slaIcmpEchoRowStatus, sysSlaUdpEchoHistoryTable=sysSlaUdpEchoHistoryTable, slaJitterSourceIp=slaJitterSourceIp, sysSlaResponder=sysSlaResponder, slaUdpEchoRtt=slaUdpEchoRtt, slaIcmpPEPeriods=slaIcmpPEPeriods, slaIcmpPEPktLoss=slaIcmpPEPktLoss, slaFlStaHisTableEntityId=slaFlStaHisTableEntityId, sysSlaCtrl=sysSlaCtrl, slaIcmpPEPktLen=slaIcmpPEPktLen, sysSlaIcmpPathJitEntry=sysSlaIcmpPathJitEntry, slaThresholdTableEntityId=slaThresholdTableEntityId, slaIcmpEchoSetDf=slaIcmpEchoSetDf, slaIcmpEchoSourceIp=slaIcmpEchoSourceIp, slaUdpEchoTargetPort=slaUdpEchoTargetPort, slaMacPingAvgValueTimes=slaMacPingAvgValueTimes, slaIcmpEchoVerifyData=slaIcmpEchoVerifyData, slaJitterRtt=slaJitterRtt, sysSlaIcmpPathEchoMgt=sysSlaIcmpPathEchoMgt, slaIcmpPJHisTableEntityId=slaIcmpPJHisTableEntityId, slaIcmpPJSourceIp=slaIcmpPJSourceIp, sysSlaGroupTable=sysSlaGroupTable, slaIcmpPJTime=slaIcmpPJTime, slaIcmpPJJitter=slaIcmpPJJitter, slaMacPingEntityId=slaMacPingEntityId, slaUdpEchoPeriods=slaUdpEchoPeriods, slaIcmpEchoTableEntityId=slaIcmpEchoTableEntityId, sysSlaUdpEchoTable=sysSlaUdpEchoTable, slaIcmpPJTos=slaIcmpPJTos, sysSLA=sysSLA, sysSlaScheduleTable=sysSlaScheduleTable, slaIcmpEchoTime=slaIcmpEchoTime, slaJitterVrfName=slaJitterVrfName, slaUdpEchoPktLen=slaUdpEchoPktLen, slaIcmpPJIsScheduling=slaIcmpPJIsScheduling, slaIcmpPEVerifyData=slaIcmpPEVerifyData, slaJitterDelaySd=slaJitterDelaySd, slaIcmpPJPktInterval=slaIcmpPJPktInterval, slaIcmpPJGetStatus=slaIcmpPJGetStatus, slaJitterPktLossDs=slaJitterPktLossDs, slaMacPingLastCycleTime=slaMacPingLastCycleTime, slaIcmpPJPeriods=slaIcmpPJPeriods, slaMacPingSchedInterval=slaMacPingSchedInterval, slaUdpEchoVrfName=slaUdpEchoVrfName, mpTrapType=mpTrapType, slaJitterSchInterval=slaJitterSchInterval, slaUdpEchoState=slaUdpEchoState, slaUdpEchoHistoryIndex=slaUdpEchoHistoryIndex, slaJitterTargetPort=slaJitterTargetPort, slaIcmpPERtt=slaIcmpPERtt, slaJitterPktLossSd=slaJitterPktLossSd, slaThresholdIndex=slaThresholdIndex, slaFlStaPeriods=slaFlStaPeriods, slaScheduleStartTime=slaScheduleStartTime, slaIcmpPJTableRowStatus=slaIcmpPJTableRowStatus, slaGroupRowStatus=slaGroupRowStatus, slaIcmpEchoAlarmType=slaIcmpEchoAlarmType, iosObjects=iosObjects, slaIcmpEchoPktLen=slaIcmpEchoPktLen, sysSlaMacPingEntry=sysSlaMacPingEntry, slaMacPingState=slaMacPingState, EnabledStatus=EnabledStatus, slaIcmpEchoTimeout=slaIcmpEchoTimeout, slaIcmpPJTargetOnly=slaIcmpPJTargetOnly, sysSlaFlStaEntry=sysSlaFlStaEntry, slaUdpEchoHisTableEntityId=slaUdpEchoHisTableEntityId, slaIcmpPJPktLoss=slaIcmpPJPktLoss, slaIcmpPETargetOnly=slaIcmpPETargetOnly, slaEntityRowStatus=slaEntityRowStatus, slaMacPingHistoryMaxCount=slaMacPingHistoryMaxCount, sysSlaNmsTable=sysSlaNmsTable, sysSlaUdpEchoMgt=sysSlaUdpEchoMgt, mpTrapDescr=mpTrapDescr, slaGroupInterval=slaGroupInterval, slaIcmpPJLsrPath=slaIcmpPJLsrPath, sysSlaNmsMgt=sysSlaNmsMgt, slaMacPingCyclsec=slaMacPingCyclsec, sysSlaIcmpEchoTable=sysSlaIcmpEchoTable, slaJitterTime=slaJitterTime, sysSlaJitterHistoryEntry=sysSlaJitterHistoryEntry, slaIcmpPJHistorySize=slaIcmpPJHistorySize, slaUdpEchoAlarmType=slaUdpEchoAlarmType, slaIcmpPESourceIp=slaIcmpPESourceIp, sysSlaFlStaMgt=sysSlaFlStaMgt, slaMacPingDesMac=slaMacPingDesMac, slaJitterDs=slaJitterDs, slaMacPingPktNumPerCycl=slaMacPingPktNumPerCycl, slaIcmpPEGetStatus=slaIcmpPEGetStatus, slaThresholdRowStatus=slaThresholdRowStatus, slaMacPingRemDevName=slaMacPingRemDevName, slaIcmpEchoHistorySize=slaIcmpEchoHistorySize, sysSlaScheduleEntry=sysSlaScheduleEntry, slaUdpEchoHistorySize=slaUdpEchoHistorySize, slaIcmpPETargetIp=slaIcmpPETargetIp, slaScheduleLifeFlag=slaScheduleLifeFlag, slaScheduleRepeat=slaScheduleRepeat, slaIcmpPETos=slaIcmpPETos, slaJitterPeriods=slaJitterPeriods, slaMacPingRowStatus=slaMacPingRowStatus, sysSlaIcmpPathEchoTable=sysSlaIcmpPathEchoTable, slaScheduleLifeTime=slaScheduleLifeTime, slaEntityId=slaEntityId, slaIcmpEchoTargetIp=slaIcmpEchoTargetIp, slaFlStaOutputFlow=slaFlStaOutputFlow, sysSlaIcmpPathJitTable=sysSlaIcmpPathJitTable, sysSlaIcmpPathEchoHistoryTable=sysSlaIcmpPathEchoHistoryTable, sysSlaIcmpPathEchoHistoryEntry=sysSlaIcmpPathEchoHistoryEntry, slaJitterIcpif=slaJitterIcpif, slaScheduleType=slaScheduleType, slaUdpEchoTableRowStatus=slaUdpEchoTableRowStatus, sysSlaUdpEchoHistoryEntry=sysSlaUdpEchoHistoryEntry, slaJitterSourcePort=slaJitterSourcePort, mpSlaTrap=mpSlaTrap, slaMacPingAvgCyclNum=slaMacPingAvgCyclNum, slaScheduleStartTimeFlag=slaScheduleStartTimeFlag, sysSlaGroupEntry=sysSlaGroupEntry, slaIcmpPETimeout=slaIcmpPETimeout, sysSlaScheduleMgt=sysSlaScheduleMgt, slaUdpEchoTargetIp=slaUdpEchoTargetIp, sysSlaThresholdEntry=sysSlaThresholdEntry, slaIcmpPJHopIndex=slaIcmpPJHopIndex, slaFlStaInputFlow=slaFlStaInputFlow, slaFlStaAlarmType=slaFlStaAlarmType, slaIcmpPEHisTableRowStatus=slaIcmpPEHisTableRowStatus, slaScheduleRowStatus=slaScheduleRowStatus, slaJitterPktLen=slaJitterPktLen, slaIcmpPJVerifyData=slaIcmpPJVerifyData, slaJitterTimeout=slaJitterTimeout, slaFlStaHistorySize=slaFlStaHistorySize, slaMacPingCfmMdId=slaMacPingCfmMdId, slaUdpEchoTime=slaUdpEchoTime, slaIcmpEchoRtt=slaIcmpEchoRtt, sysSlaEntityEntry=sysSlaEntityEntry, slaJitterMos=slaJitterMos, slaJitterTargetIp=slaJitterTargetIp, slaIcmpEchoSchInterval=slaIcmpEchoSchInterval, slaNmsRowStatus=slaNmsRowStatus, slaJitterState=slaJitterState, sysSlaIcmpPathJitHistoryEntry=sysSlaIcmpPathJitHistoryEntry, slaJitterHistoryIndex=slaJitterHistoryIndex, mpMacPingTraps=mpMacPingTraps, slaJitterAlarmType=slaJitterAlarmType, slaUdpEchoSchInterval=slaUdpEchoSchInterval, sysSlaJitterMgt=sysSlaJitterMgt, sysSlaEntityTable=sysSlaEntityTable, slaIcmpPETime=slaIcmpPETime, sysSlaMacPingMgt=sysSlaMacPingMgt, slaIcmpPJPktNum=slaIcmpPJPktNum, slaFlStaHistoryIndex=slaFlStaHistoryIndex, sysSlaNotUsedScheId=sysSlaNotUsedScheId, slaIcmpPJSchInterval=slaIcmpPJSchInterval, sysSlaGroupMgt=sysSlaGroupMgt, slaIcmpEchoVrfName=slaIcmpEchoVrfName, slaGroupName=slaGroupName, slaIcmpPJTargetIp=slaIcmpPJTargetIp, slaIcmpPEHopIndex=slaIcmpPEHopIndex, sysSlaMacPingTable=sysSlaMacPingTable, mpTraps=mpTraps, slaIcmpPEAlarmType=slaIcmpPEAlarmType, slaScheduleInterval=slaScheduleInterval, sysSlaJitterEntry=sysSlaJitterEntry, slaJitterSd=slaJitterSd, slaJitterCodec=slaJitterCodec, slaUdpEchoSourcePort=slaUdpEchoSourcePort, slaThresholdString=slaThresholdString, slaUdpEchoTimeout=slaUdpEchoTimeout, slaIcmpEchoExtendFlag=slaIcmpEchoExtendFlag, sysSlaIcmpPathJitMgt=sysSlaIcmpPathJitMgt, slaUdpEchoTos=slaUdpEchoTos, sysSlaIcmpEchoMgt=sysSlaIcmpEchoMgt, slaJitterHisTableEntityId=slaJitterHisTableEntityId, slaIcmpPEHistorySize=slaIcmpPEHistorySize, sysSlaThresholdMgt=sysSlaThresholdMgt, slaThresholdValue=slaThresholdValue, slaEntityName=slaEntityName, slaIcmpEchoTos=slaIcmpEchoTos, sysSlaFlStaTable=sysSlaFlStaTable, sysSlaThresholdTable=sysSlaThresholdTable, slaMacPingCfmMaId=slaMacPingCfmMaId, slaIcmpEchoIsScheduling=slaIcmpEchoIsScheduling, slaUdpEchoPktLoss=slaUdpEchoPktLoss, slaFlStaInterval=slaFlStaInterval, sysSlaFlStaHistoryTable=sysSlaFlStaHistoryTable, slaUdpEchoHisTableRowStatus=slaUdpEchoHisTableRowStatus, slaIcmpEchoHistoryIndex=slaIcmpEchoHistoryIndex, slaScheduleAfterTime=slaScheduleAfterTime, slaNmsScheduleId=slaNmsScheduleId, slaFlStaTableEntityId=slaFlStaTableEntityId, slaIcmpEchoHisTableEntityId=slaIcmpEchoHisTableEntityId, slaIcmpPEHisTableEntityId=slaIcmpPEHisTableEntityId, slaMacPingDesMepId=slaMacPingDesMepId, slaJitterPktInterval=slaJitterPktInterval, sysSlaNotUsedEntityId=sysSlaNotUsedEntityId, sysSlaIcmpEchoEntry=sysSlaIcmpEchoEntry, slaScheduleObjId=slaScheduleObjId, slaIcmpPJHistoryIndex=slaIcmpPJHistoryIndex, slaFlStaHisTableRowStatus=slaFlStaHisTableRowStatus, mpTrapClass=mpTrapClass, slaIcmpPJVrfName=slaIcmpPJVrfName, slaNmsEntityId=slaNmsEntityId, iosSystem=iosSystem, slaIcmpPEVrfName=slaIcmpPEVrfName, slaIcmpPJTimeout=slaIcmpPJTimeout, slaIcmpEchoPktNum=slaIcmpEchoPktNum, sysSlaIcmpPathJitHistoryTable=sysSlaIcmpPathJitHistoryTable, slaUdpEchoTableEntityId=slaUdpEchoTableEntityId, slaJitterHisTableRowStatus=slaJitterHisTableRowStatus, slaThresholdDirection=slaThresholdDirection, slaIcmpPEIsScheduling=slaIcmpPEIsScheduling, slaIcmpPETableEntityId=slaIcmpPETableEntityId, slaIcmpPJAlarmType=slaIcmpPJAlarmType, mpTrap=mpTrap, slaGroupEntityMembers=slaGroupEntityMembers, slaIcmpEchoPeriods=slaIcmpEchoPeriods, slaFlStaIfName=slaFlStaIfName, slaIcmpPJTableEntityId=slaIcmpPJTableEntityId, sysSlaJitterTable=sysSlaJitterTable, slaIcmpPJRtt=slaIcmpPJRtt, slaJitterTos=slaJitterTos, slaFlStaTime=slaFlStaTime, slaMacPingName=slaMacPingName, slaJitterTableRowStatus=slaJitterTableRowStatus, slaEntityType=slaEntityType, sysSlaJitterHistoryTable=sysSlaJitterHistoryTable, slaGroupId=slaGroupId, slaFlStaTableRowStatus=slaFlStaTableRowStatus, sysSlaGbl=sysSlaGbl, sysSlaIcmpEchoHistoryTable=sysSlaIcmpEchoHistoryTable, slaIcmpPJHisTableRowStatus=slaIcmpPJHisTableRowStatus, slaJitterHistorySize=slaJitterHistorySize, slaUdpEchoSourceIp=slaUdpEchoSourceIp, slaJitterDelayDs=slaJitterDelayDs, slaIcmpPELsrPath=slaIcmpPELsrPath, slaIcmpPEHistoryIndex=slaIcmpPEHistoryIndex, sysSlaEntityMgt=sysSlaEntityMgt, slaMacPingCfmSrcMepId=slaMacPingCfmSrcMepId, sysSlaIcmpPathEchoEntry=sysSlaIcmpPathEchoEntry, slaJitterTableEntityId=slaJitterTableEntityId, slaJitterPktNum=slaJitterPktNum, slaFlStaInputPkts=slaFlStaInputPkts, slaIcmpEchoTableRowStatus=slaIcmpEchoTableRowStatus, sysSlaNmsEntry=sysSlaNmsEntry, slaIcmpPETableRowStatus=slaIcmpPETableRowStatus)
mibBuilder.exportSymbols("MPSLA", mpSla=mpSla, PYSNMP_MODULE_ID=sysSLA)
