#
# PySNMP MIB module SMSAGENT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SMSAGENT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:07:49 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Integer32, Bits, Unsigned32, Counter64, ObjectIdentity, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, enterprises, Counter32, NotificationType, ModuleIdentity, MibIdentifier, Gauge32, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "Bits", "Unsigned32", "Counter64", "ObjectIdentity", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "enterprises", "Counter32", "NotificationType", "ModuleIdentity", "MibIdentifier", "Gauge32", "TimeTicks")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
unisys = MibIdentifier((1, 3, 6, 1, 4, 1, 223))
unisysOpen = MibIdentifier((1, 3, 6, 1, 4, 1, 223, 10))
cfgAgent = MibIdentifier((1, 3, 6, 1, 4, 1, 223, 10, 7))
cfgAgentVersion = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentVersion.setStatus('mandatory')
if mibBuilder.loadTexts: cfgAgentVersion.setDescription('The internal version number of this SNMP Extension Agent.')
cfgAgentRevision = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 7, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentRevision.setStatus('mandatory')
if mibBuilder.loadTexts: cfgAgentRevision.setDescription('The internal revision number of this SNMP Extension Agent.')
cfgAgentMIBVersion = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 7, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentMIBVersion.setStatus('mandatory')
if mibBuilder.loadTexts: cfgAgentMIBVersion.setDescription('The internal version number of the MIB for this SNMP Extension Agent.')
cfgAgentMIBRevision = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 7, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentMIBRevision.setStatus('mandatory')
if mibBuilder.loadTexts: cfgAgentMIBRevision.setDescription('The internal revision number of the MIB for this SNMP Extension Agent.')
cfgAgentBIOSVendor = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 7, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentBIOSVendor.setStatus('mandatory')
if mibBuilder.loadTexts: cfgAgentBIOSVendor.setDescription('A description of the system BIOS vendor.')
cfgAgentBIOSVersion = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 7, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentBIOSVersion.setStatus('mandatory')
if mibBuilder.loadTexts: cfgAgentBIOSVersion.setDescription("A description of the version of the system vendor's BIOS.")
cfgAgentBIOSDate = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 7, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentBIOSDate.setStatus('mandatory')
if mibBuilder.loadTexts: cfgAgentBIOSDate.setDescription('The date that the system BIOS was created.')
cfgAgentBIOSsROMInKb = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 7, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentBIOSsROMInKb.setStatus('mandatory')
if mibBuilder.loadTexts: cfgAgentBIOSsROMInKb.setDescription('The size of the BIOS read-only memory in kilobytes.')
cfgAgentBIOSBusSupport = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 7, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentBIOSBusSupport.setStatus('mandatory')
if mibBuilder.loadTexts: cfgAgentBIOSBusSupport.setDescription('The bus interface(s) supported by the system BIOS.')
cfgAgentBIOSAddress = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 7, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentBIOSAddress.setStatus('mandatory')
if mibBuilder.loadTexts: cfgAgentBIOSAddress.setDescription('The memory address used to access the system BIOS.')
cfgAgentBIOSInterruptId = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 7, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentBIOSInterruptId.setStatus('mandatory')
if mibBuilder.loadTexts: cfgAgentBIOSInterruptId.setDescription('The interrupt ID used to access the system BIOS.')
cfgAgentnCPUs = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 7, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentnCPUs.setStatus('mandatory')
if mibBuilder.loadTexts: cfgAgentnCPUs.setDescription('The number of CPUs listed in the subsequent CPUs table.')
cfgAgentCPUsTbl = MibTable((1, 3, 6, 1, 4, 1, 223, 10, 7, 13), )
if mibBuilder.loadTexts: cfgAgentCPUsTbl.setStatus('mandatory')
if mibBuilder.loadTexts: cfgAgentCPUsTbl.setDescription('CPU table consisting of a list of system CPUs.')
cfgAgentCPUsTblEntry = MibTableRow((1, 3, 6, 1, 4, 1, 223, 10, 7, 13, 1), )
if mibBuilder.loadTexts: cfgAgentCPUsTblEntry.setStatus('mandatory')
cfgAgentCPUClass = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 7, 13, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentCPUClass.setStatus('mandatory')
if mibBuilder.loadTexts: cfgAgentCPUClass.setDescription('The class of central processor (eg: Intel x86).')
cfgAgentCPUName = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 7, 13, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentCPUName.setStatus('mandatory')
if mibBuilder.loadTexts: cfgAgentCPUName.setDescription("The vendor's name for the CPU (eg: 80486).")
cfgAgentCPUVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 7, 13, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentCPUVendor.setStatus('mandatory')
if mibBuilder.loadTexts: cfgAgentCPUVendor.setDescription('The vendor of the CPU chipset (eg: Genuine Intel).')
cfgAgentCPUSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 7, 13, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentCPUSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: cfgAgentCPUSpeed.setDescription('The approximate operating frequency (in MHz) of the CPU chipset.')
cfgAgentCPUsCacheInKb = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 7, 13, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentCPUsCacheInKb.setStatus('mandatory')
if mibBuilder.loadTexts: cfgAgentCPUsCacheInKb.setDescription('The size (in kilobytes) of the CPU operational memory cache.')
cfgAgentCPUState = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 7, 13, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentCPUState.setStatus('mandatory')
if mibBuilder.loadTexts: cfgAgentCPUState.setDescription('The current state of the CPU: active(1), disabled(2).')
cfgAgentSysName = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 7, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentSysName.setStatus('mandatory')
if mibBuilder.loadTexts: cfgAgentSysName.setDescription('The (network) name of this computer.')
cfgAgentSysBoardVersion = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 7, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentSysBoardVersion.setStatus('mandatory')
if mibBuilder.loadTexts: cfgAgentSysBoardVersion.setDescription("The vendor's board version information.")
cfgAgentSysUptimeMilSec = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 7, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentSysUptimeMilSec.setStatus('mandatory')
if mibBuilder.loadTexts: cfgAgentSysUptimeMilSec.setDescription('The length of time that this system has been active (in miliseconds).')
cfgAgentSysOS = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 7, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentSysOS.setStatus('mandatory')
if mibBuilder.loadTexts: cfgAgentSysOS.setDescription('The operating system and its version running on this system.')
cfgAgentSysnDMAs = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 7, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentSysnDMAs.setStatus('mandatory')
if mibBuilder.loadTexts: cfgAgentSysnDMAs.setDescription('The number of DMA channels available on this system.')
cfgAgentnIRQs = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 7, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentnIRQs.setStatus('mandatory')
if mibBuilder.loadTexts: cfgAgentnIRQs.setDescription('The number of IRQs listed in the subsequent IRQs table.')
cfgAgentIRQsTbl = MibTable((1, 3, 6, 1, 4, 1, 223, 10, 7, 20), )
if mibBuilder.loadTexts: cfgAgentIRQsTbl.setStatus('mandatory')
if mibBuilder.loadTexts: cfgAgentIRQsTbl.setDescription('IRQ table consisting of a list of IRQs allocated on this system.')
cfgAgentIRQsTblEntry = MibTableRow((1, 3, 6, 1, 4, 1, 223, 10, 7, 20, 1), )
if mibBuilder.loadTexts: cfgAgentIRQsTblEntry.setStatus('mandatory')
cfgAgentIRQ = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 7, 20, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentIRQ.setStatus('mandatory')
if mibBuilder.loadTexts: cfgAgentIRQ.setDescription('The allocated IRQ number. The agent returns -1 if the IRQ number is not available for the corresponding cfgAgentIRQOwner.')
cfgAgentIRQOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 7, 20, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentIRQOwner.setStatus('mandatory')
if mibBuilder.loadTexts: cfgAgentIRQOwner.setDescription('The name of the device/controller that has allocated this IRQ.')
cfgAgentIRQBus = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 7, 20, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentIRQBus.setStatus('mandatory')
if mibBuilder.loadTexts: cfgAgentIRQBus.setDescription('The bus that the IRQ device/controller uses.')
cfgAgentIRQClass = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 7, 20, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentIRQClass.setStatus('mandatory')
if mibBuilder.loadTexts: cfgAgentIRQClass.setDescription('The class of the device/controller that has allocated this IRQ.')
cfgAgentMemSizeInMb = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 7, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentMemSizeInMb.setStatus('mandatory')
if mibBuilder.loadTexts: cfgAgentMemSizeInMb.setDescription('The size of physical memory on the system in megabytes.')
cfgAgentMemType = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 7, 22), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentMemType.setStatus('mandatory')
if mibBuilder.loadTexts: cfgAgentMemType.setDescription('A description of the type of memory installed on the system.')
cfgAgentMemSpeed = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 7, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentMemSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: cfgAgentMemSpeed.setDescription('The operating speed (in MHz) of the memory installed on the system.')
cfgAgentMemCacheInKb = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 7, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentMemCacheInKb.setStatus('mandatory')
if mibBuilder.loadTexts: cfgAgentMemCacheInKb.setDescription('The size of the memory hardware cache in kilobytes.')
cfgAgentMemBanks = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 7, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentMemBanks.setStatus('mandatory')
if mibBuilder.loadTexts: cfgAgentMemBanks.setDescription('The number of memory banks on this system.')
cfgAgentMemSpeedSupported = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 7, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentMemSpeedSupported.setStatus('mandatory')
if mibBuilder.loadTexts: cfgAgentMemSpeedSupported.setDescription('The supported speed (in MHz) of memory installed on the system.')
cfgAgentIOKbdType = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 7, 27), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentIOKbdType.setStatus('mandatory')
if mibBuilder.loadTexts: cfgAgentIOKbdType.setDescription('The type of keyboard in use on the system.')
cfgAgentIOMouseType = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 7, 28), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentIOMouseType.setStatus('mandatory')
if mibBuilder.loadTexts: cfgAgentIOMouseType.setDescription('The type of mouse in use on the system.')
cfgAgentIOVidType = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 7, 29), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentIOVidType.setStatus('mandatory')
if mibBuilder.loadTexts: cfgAgentIOVidType.setDescription('The type of display monitor in use on the system.')
cfgAgentnSerials = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 7, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentnSerials.setStatus('mandatory')
if mibBuilder.loadTexts: cfgAgentnSerials.setDescription('The number of serial ports listed in the subsequent serial ports table.')
cfgAgentSerialsTbl = MibTable((1, 3, 6, 1, 4, 1, 223, 10, 7, 31), )
if mibBuilder.loadTexts: cfgAgentSerialsTbl.setStatus('mandatory')
if mibBuilder.loadTexts: cfgAgentSerialsTbl.setDescription('Serial port table consisting of a list of serial ports.')
cfgAgentSerialsTblEntry = MibTableRow((1, 3, 6, 1, 4, 1, 223, 10, 7, 31, 1), )
if mibBuilder.loadTexts: cfgAgentSerialsTblEntry.setStatus('mandatory')
cfgAgentSerialPort = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 7, 31, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentSerialPort.setStatus('mandatory')
if mibBuilder.loadTexts: cfgAgentSerialPort.setDescription("The serial I/O port controller's port address.")
cfgAgentnParallels = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 7, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentnParallels.setStatus('mandatory')
if mibBuilder.loadTexts: cfgAgentnParallels.setDescription('The number of parallel ports listed in the subsequent parallel ports table.')
cfgAgentParallelsTbl = MibTable((1, 3, 6, 1, 4, 1, 223, 10, 7, 33), )
if mibBuilder.loadTexts: cfgAgentParallelsTbl.setStatus('mandatory')
if mibBuilder.loadTexts: cfgAgentParallelsTbl.setDescription('Parallel port table consisting of a list of parallel ports.')
cfgAgentParallelsTblEntry = MibTableRow((1, 3, 6, 1, 4, 1, 223, 10, 7, 33, 1), )
if mibBuilder.loadTexts: cfgAgentParallelsTblEntry.setStatus('mandatory')
cfgAgentParallelPort = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 7, 33, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentParallelPort.setStatus('mandatory')
if mibBuilder.loadTexts: cfgAgentParallelPort.setDescription("The parallel I/O port controller's port address.")
cfgAgentnControllers = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 7, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentnControllers.setStatus('mandatory')
if mibBuilder.loadTexts: cfgAgentnControllers.setDescription('The number of controllers listed in the subsequent controllers table.')
cfgAgentControllersTbl = MibTable((1, 3, 6, 1, 4, 1, 223, 10, 7, 35), )
if mibBuilder.loadTexts: cfgAgentControllersTbl.setStatus('mandatory')
if mibBuilder.loadTexts: cfgAgentControllersTbl.setDescription('Controller table consisting of a list of controllers.')
cfgAgentControllersTblEntry = MibTableRow((1, 3, 6, 1, 4, 1, 223, 10, 7, 35, 1), )
if mibBuilder.loadTexts: cfgAgentControllersTblEntry.setStatus('mandatory')
cfgAgentControllerType = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 7, 35, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentControllerType.setStatus('mandatory')
if mibBuilder.loadTexts: cfgAgentControllerType.setDescription('The type of device controller.')
cfgAgentControllerName = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 7, 35, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentControllerName.setStatus('mandatory')
if mibBuilder.loadTexts: cfgAgentControllerName.setDescription("The controller's device name.")
cfgAgentControllerIRQ = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 7, 35, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentControllerIRQ.setStatus('mandatory')
if mibBuilder.loadTexts: cfgAgentControllerIRQ.setDescription('The IRQ number used by the device controller. The agent returns -1 if the IRQ number is not available for the corresponding controller.')
cfgAgentnTrapDests = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 7, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentnTrapDests.setStatus('mandatory')
if mibBuilder.loadTexts: cfgAgentnTrapDests.setDescription('The number of trap destinations listed in the subsequent trap destinations table.')
cfgAgentTrapDestsTbl = MibTable((1, 3, 6, 1, 4, 1, 223, 10, 7, 37), )
if mibBuilder.loadTexts: cfgAgentTrapDestsTbl.setStatus('mandatory')
if mibBuilder.loadTexts: cfgAgentTrapDestsTbl.setDescription('Trap destinations table consisting of a list of trap destinations.')
cfgAgentTrapDestsTblEntry = MibTableRow((1, 3, 6, 1, 4, 1, 223, 10, 7, 37, 1), )
if mibBuilder.loadTexts: cfgAgentTrapDestsTblEntry.setStatus('mandatory')
cfgAgentTrapDestId = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 7, 37, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentTrapDestId.setStatus('mandatory')
if mibBuilder.loadTexts: cfgAgentTrapDestId.setDescription('The identifier of this trap destination.')
cfgAgentTrapDestIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 7, 37, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgAgentTrapDestIPAddr.setStatus('mandatory')
if mibBuilder.loadTexts: cfgAgentTrapDestIPAddr.setDescription('The IP address of this trap destination.')
cfgAgentCommunityString = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 7, 37, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentCommunityString.setStatus('mandatory')
if mibBuilder.loadTexts: cfgAgentCommunityString.setDescription('The community that this trap destination belongs too.')
cfgAgentnPlatforms = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 7, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentnPlatforms.setStatus('mandatory')
if mibBuilder.loadTexts: cfgAgentnPlatforms.setDescription('The number of OEM Platforms listed in the subsequent table.')
cfgAgentPlatforms = MibTable((1, 3, 6, 1, 4, 1, 223, 10, 7, 39), )
if mibBuilder.loadTexts: cfgAgentPlatforms.setStatus('mandatory')
if mibBuilder.loadTexts: cfgAgentPlatforms.setDescription('Platform table consisting of a list of Platform Information from BIOS table.')
cfgAgentPlatformTblEntry = MibTableRow((1, 3, 6, 1, 4, 1, 223, 10, 7, 39, 1), )
if mibBuilder.loadTexts: cfgAgentPlatformTblEntry.setStatus('mandatory')
cfgAgentOEMPlatform = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 7, 39, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentOEMPlatform.setStatus('mandatory')
if mibBuilder.loadTexts: cfgAgentOEMPlatform.setDescription('The name of the Platform.')
cfgAgentProductID = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 7, 39, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentProductID.setStatus('mandatory')
if mibBuilder.loadTexts: cfgAgentProductID.setDescription('The name of the Product ID.')
cfgAgentnConsoleMgr = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 7, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentnConsoleMgr.setStatus('mandatory')
if mibBuilder.loadTexts: cfgAgentnConsoleMgr.setDescription('The number of esConsoleMgr.')
cfgAgentConsoleMgr = MibTable((1, 3, 6, 1, 4, 1, 223, 10, 7, 41), )
if mibBuilder.loadTexts: cfgAgentConsoleMgr.setStatus('mandatory')
if mibBuilder.loadTexts: cfgAgentConsoleMgr.setDescription('ConsoleMgr table consisting of a list of ConsoleMgr Information.')
cfgAgentConsoleMgrTblEntry = MibTableRow((1, 3, 6, 1, 4, 1, 223, 10, 7, 41, 1), )
if mibBuilder.loadTexts: cfgAgentConsoleMgrTblEntry.setStatus('mandatory')
cfgAgentCMCardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 7, 41, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentCMCardIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cfgAgentCMCardIndex.setDescription('The index of the esConsoleMgr table.')
cfgAgentCMIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 7, 41, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentCMIPAddress.setStatus('mandatory')
if mibBuilder.loadTexts: cfgAgentCMIPAddress.setDescription('The IP address of the esConsoleMgr.')
cfgAgentCMHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 7, 41, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentCMHostName.setStatus('mandatory')
if mibBuilder.loadTexts: cfgAgentCMHostName.setDescription('The host name of the esConsoleMgr.')
cfgAgentCMHardwareVer = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 7, 41, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentCMHardwareVer.setStatus('mandatory')
if mibBuilder.loadTexts: cfgAgentCMHardwareVer.setDescription('The hardware version of the esConsoleMgr.')
cfgAgentCMFirmwareVer = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 7, 41, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentCMFirmwareVer.setStatus('mandatory')
if mibBuilder.loadTexts: cfgAgentCMFirmwareVer.setDescription('The firmware version of the esConsoleMgr.')
netAgent = MibIdentifier((1, 3, 6, 1, 4, 1, 223, 10, 8))
netAgentVersion = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 8, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netAgentVersion.setStatus('mandatory')
if mibBuilder.loadTexts: netAgentVersion.setDescription('The internal version number of this SNMP Extension Agent.')
netAgentRevision = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 8, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netAgentRevision.setStatus('mandatory')
if mibBuilder.loadTexts: netAgentRevision.setDescription('The internal revision number of this SNMP Extension Agent.')
netAgentMIBVersion = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 8, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netAgentMIBVersion.setStatus('mandatory')
if mibBuilder.loadTexts: netAgentMIBVersion.setDescription('The internal version number of the MIB for this SNMP Extension Agent.')
netAgentMIBRevision = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 8, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netAgentMIBRevision.setStatus('mandatory')
if mibBuilder.loadTexts: netAgentMIBRevision.setDescription('The internal revision number of the MIB for this SNMP Extension Agent.')
netAgentMachineName = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 8, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netAgentMachineName.setStatus('mandatory')
if mibBuilder.loadTexts: netAgentMachineName.setDescription('The network (NetBIOS) name of this computer.')
netAgentLogonServer = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 8, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netAgentLogonServer.setStatus('mandatory')
if mibBuilder.loadTexts: netAgentLogonServer.setDescription('The network domain name that this computer is connected to.')
netAgentnNICs = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 8, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netAgentnNICs.setStatus('mandatory')
if mibBuilder.loadTexts: netAgentnNICs.setDescription('The number of network interface cards (NIC) listed in the subsequent NIC table.')
netAgentNICsTbl = MibTable((1, 3, 6, 1, 4, 1, 223, 10, 8, 8), )
if mibBuilder.loadTexts: netAgentNICsTbl.setStatus('mandatory')
if mibBuilder.loadTexts: netAgentNICsTbl.setDescription('Network interface cards (NIC) table consisting of a list of installed system NICs.')
netAgentNICTblEntry = MibTableRow((1, 3, 6, 1, 4, 1, 223, 10, 8, 8, 1), )
if mibBuilder.loadTexts: netAgentNICTblEntry.setStatus('mandatory')
netAgentVendorID = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 8, 8, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netAgentVendorID.setStatus('mandatory')
if mibBuilder.loadTexts: netAgentVendorID.setDescription("The manufacturer's internal network adapter card identification string.")
netAgentMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 8, 8, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netAgentMACAddress.setStatus('mandatory')
if mibBuilder.loadTexts: netAgentMACAddress.setDescription("The network adapter card's unique network address.")
netAgentFirmwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 8, 8, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netAgentFirmwareVersion.setStatus('mandatory')
if mibBuilder.loadTexts: netAgentFirmwareVersion.setDescription("The manufacturer's network adapter card firmware version.")
netAgentFirmwareRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 8, 8, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netAgentFirmwareRevision.setStatus('mandatory')
if mibBuilder.loadTexts: netAgentFirmwareRevision.setDescription("The manufacturer's network adapter card firmware revision.")
netAgentControllerType = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 8, 8, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netAgentControllerType.setStatus('mandatory')
if mibBuilder.loadTexts: netAgentControllerType.setDescription('The type of PC bus connector used by this network adapter card.')
netAgentControllerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 8, 8, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netAgentControllerPort.setStatus('mandatory')
if mibBuilder.loadTexts: netAgentControllerPort.setDescription('The controller port number/address used by this network adapter card.')
netAgentControllerIRQ = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 8, 8, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netAgentControllerIRQ.setStatus('mandatory')
if mibBuilder.loadTexts: netAgentControllerIRQ.setDescription('The controller IRQ number used by this network adapter card.')
netAgentControllerBaseIO = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 8, 8, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netAgentControllerBaseIO.setStatus('mandatory')
if mibBuilder.loadTexts: netAgentControllerBaseIO.setDescription('The controller base IO address used by this network adapter card.')
netAgentDataSent = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 8, 8, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netAgentDataSent.setStatus('mandatory')
if mibBuilder.loadTexts: netAgentDataSent.setDescription('The number of network packets sent by this computer.')
netAgentDataReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 8, 8, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netAgentDataReceived.setStatus('mandatory')
if mibBuilder.loadTexts: netAgentDataReceived.setDescription('The number of network packets received by this computer.')
netAgentNICDriver = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 8, 8, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netAgentNICDriver.setStatus('mandatory')
if mibBuilder.loadTexts: netAgentNICDriver.setDescription("The network adapter card's driver specification.")
netAgentDriverName = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 8, 8, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netAgentDriverName.setStatus('mandatory')
if mibBuilder.loadTexts: netAgentDriverName.setDescription("The network adapter card's driver name.")
sftAgent = MibIdentifier((1, 3, 6, 1, 4, 1, 223, 10, 9))
sftAgentVersion = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 9, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sftAgentVersion.setStatus('mandatory')
if mibBuilder.loadTexts: sftAgentVersion.setDescription('The internal version number of this SNMP Extension Agent.')
sftAgentRevision = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 9, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sftAgentRevision.setStatus('mandatory')
if mibBuilder.loadTexts: sftAgentRevision.setDescription('The internal revision number of this SNMP Extension Agent.')
sftAgentMIBVersion = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 9, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sftAgentMIBVersion.setStatus('mandatory')
if mibBuilder.loadTexts: sftAgentMIBVersion.setDescription('The internal version number of the MIB for this SNMP Extension Agent.')
sftAgentMIBRevision = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 9, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sftAgentMIBRevision.setStatus('mandatory')
if mibBuilder.loadTexts: sftAgentMIBRevision.setDescription('The internal revision number of the MIB for this SNMP Extension Agent.')
sftAgentnPackages = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 9, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sftAgentnPackages.setStatus('mandatory')
if mibBuilder.loadTexts: sftAgentnPackages.setDescription('The number of Packages listed in the subsequent Packages table.')
sftAgentPackagesTbl = MibTable((1, 3, 6, 1, 4, 1, 223, 10, 9, 6), )
if mibBuilder.loadTexts: sftAgentPackagesTbl.setStatus('mandatory')
if mibBuilder.loadTexts: sftAgentPackagesTbl.setDescription('Package table consisting of a list of uninstallable packages.')
sftAgentPackagesTblEntry = MibTableRow((1, 3, 6, 1, 4, 1, 223, 10, 9, 6, 1), )
if mibBuilder.loadTexts: sftAgentPackagesTblEntry.setStatus('mandatory')
sftAgentPackage = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 9, 6, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sftAgentPackage.setStatus('mandatory')
if mibBuilder.loadTexts: sftAgentPackage.setDescription('The name of the package that can be uninstalled.')
sftAgentnServices = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 9, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sftAgentnServices.setStatus('mandatory')
if mibBuilder.loadTexts: sftAgentnServices.setDescription('The number of Services listed in the subsequent Services table.')
sftAgentServicesTbl = MibTable((1, 3, 6, 1, 4, 1, 223, 10, 9, 8), )
if mibBuilder.loadTexts: sftAgentServicesTbl.setStatus('mandatory')
if mibBuilder.loadTexts: sftAgentServicesTbl.setDescription('Service table consisting of a list of installed system services.')
sftAgentServicesTblEntry = MibTableRow((1, 3, 6, 1, 4, 1, 223, 10, 9, 8, 1), )
if mibBuilder.loadTexts: sftAgentServicesTblEntry.setStatus('mandatory')
sftAgentService = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 9, 8, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sftAgentService.setStatus('mandatory')
if mibBuilder.loadTexts: sftAgentService.setDescription('The name of the service that has been installed.')
sftAgentServiceStartup = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 9, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("boot", 0), ("system", 1), ("auto", 2), ("manual", 3), ("disabled", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sftAgentServiceStartup.setStatus('mandatory')
if mibBuilder.loadTexts: sftAgentServiceStartup.setDescription('The service startup mode: boot(0), system(1), auto(2), manual(3), disabled(4).')
sftAgentServiceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 9, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("stopped", 1), ("running", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sftAgentServiceStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sftAgentServiceStatus.setDescription('The service status: stopped(1), running(2).')
sftAgentServiceDesired = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 9, 8, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("stopping", 1), ("running", 2), ("ignore", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sftAgentServiceDesired.setStatus('mandatory')
if mibBuilder.loadTexts: sftAgentServiceDesired.setDescription('The service request: stopping(1), running(2), ignore(3).')
sftAgentnDevices = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 9, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sftAgentnDevices.setStatus('mandatory')
if mibBuilder.loadTexts: sftAgentnDevices.setDescription('The number of Devices listed in the subsequent Devices table.')
sftAgentDevicesTbl = MibTable((1, 3, 6, 1, 4, 1, 223, 10, 9, 10), )
if mibBuilder.loadTexts: sftAgentDevicesTbl.setStatus('mandatory')
if mibBuilder.loadTexts: sftAgentDevicesTbl.setDescription('Device table consisting of a list of installed system devices.')
sftAgentDevicesTblEntry = MibTableRow((1, 3, 6, 1, 4, 1, 223, 10, 9, 10, 1), )
if mibBuilder.loadTexts: sftAgentDevicesTblEntry.setStatus('mandatory')
sftAgentDevice = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 9, 10, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sftAgentDevice.setStatus('mandatory')
if mibBuilder.loadTexts: sftAgentDevice.setDescription('The name of the device that has been installed.')
sftAgentDeviceStartup = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 9, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("boot", 0), ("system", 1), ("auto", 2), ("manual", 3), ("disabled", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sftAgentDeviceStartup.setStatus('mandatory')
if mibBuilder.loadTexts: sftAgentDeviceStartup.setDescription('The device startup mode: boot(0), system(1), auto(2), manual(3), disabled(4).')
sftAgentCriticalServices = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 9, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sftAgentCriticalServices.setStatus('mandatory')
if mibBuilder.loadTexts: sftAgentCriticalServices.setDescription('The total number of services in critical state.')
sftAgentSvcIndex = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 9, 99), Integer32())
if mibBuilder.loadTexts: sftAgentSvcIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sftAgentSvcIndex.setDescription('Indicates the number (starting from 1) of the unit reported in an alert message.')
sftAgentSvcStateTrap = NotificationType((1, 3, 6, 1, 4, 1, 223, 10, 9) + (0,1)).setObjects(("SMSAGENT-MIB", "sftAgentService"), ("SMSAGENT-MIB", "sftAgentServiceStatus"), ("SMSAGENT-MIB", "sftAgentServiceDesired"), ("SMSAGENT-MIB", "sftAgentCriticalServices"))
if mibBuilder.loadTexts: sftAgentSvcStateTrap.setDescription('This service state does not match the desired state.')
sftAgentSvcStateOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 223, 10, 9) + (0,11)).setObjects(("SMSAGENT-MIB", "sftAgentService"), ("SMSAGENT-MIB", "sftAgentServiceStatus"), ("SMSAGENT-MIB", "sftAgentServiceDesired"), ("SMSAGENT-MIB", "sftAgentCriticalServices"))
if mibBuilder.loadTexts: sftAgentSvcStateOkTrap.setDescription('The service state is matching the desired state.')
strAgent = MibIdentifier((1, 3, 6, 1, 4, 1, 223, 10, 10))
strAgentVersion = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 10, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strAgentVersion.setStatus('mandatory')
if mibBuilder.loadTexts: strAgentVersion.setDescription('The internal version number of this SNMP Extension Agent.')
strAgentRevision = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 10, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strAgentRevision.setStatus('mandatory')
if mibBuilder.loadTexts: strAgentRevision.setDescription('The internal revision number of this SNMP Extension Agent.')
strAgentMIBVersion = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 10, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strAgentMIBVersion.setStatus('mandatory')
if mibBuilder.loadTexts: strAgentMIBVersion.setDescription('The internal version number of the MIB for this SNMP Extension Agent.')
strAgentMIBRevision = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 10, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strAgentMIBRevision.setStatus('mandatory')
if mibBuilder.loadTexts: strAgentMIBRevision.setDescription('The internal revision number of the MIB for this SNMP Extension Agent.')
strAgentnControllers = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 10, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strAgentnControllers.setStatus('mandatory')
if mibBuilder.loadTexts: strAgentnControllers.setDescription('The number of disk controllers listed in the subsequent Controllers table.')
strAgentControllersTbl = MibTable((1, 3, 6, 1, 4, 1, 223, 10, 10, 6), )
if mibBuilder.loadTexts: strAgentControllersTbl.setStatus('mandatory')
if mibBuilder.loadTexts: strAgentControllersTbl.setDescription('Controller table consisting of a list of uninstallable Controllers.')
strAgentControllersTblEntry = MibTableRow((1, 3, 6, 1, 4, 1, 223, 10, 10, 6, 1), )
if mibBuilder.loadTexts: strAgentControllersTblEntry.setStatus('mandatory')
strAgentCtlrType = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 10, 6, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strAgentCtlrType.setStatus('mandatory')
if mibBuilder.loadTexts: strAgentCtlrType.setDescription('The type of the controller: SCSI or IDE.')
strAgentCtlrVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 10, 6, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strAgentCtlrVendor.setStatus('mandatory')
if mibBuilder.loadTexts: strAgentCtlrVendor.setDescription("The name of the controller's vendor.")
strAgentCtlrFirmware = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 10, 6, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strAgentCtlrFirmware.setStatus('mandatory')
if mibBuilder.loadTexts: strAgentCtlrFirmware.setDescription("The description of the controller's firmware version.")
strAgentCtlrSerialNo = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 10, 6, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strAgentCtlrSerialNo.setStatus('mandatory')
if mibBuilder.loadTexts: strAgentCtlrSerialNo.setDescription('The name of the Controller that can be uninstalled.')
strAgentCtlrDMA = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 10, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strAgentCtlrDMA.setStatus('mandatory')
if mibBuilder.loadTexts: strAgentCtlrDMA.setDescription('The DMA number used by the controller.')
strAgentCtlrIRQ = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 10, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strAgentCtlrIRQ.setStatus('mandatory')
if mibBuilder.loadTexts: strAgentCtlrIRQ.setDescription('The IRQ number used by the controller.')
strAgentCtlrAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 10, 6, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strAgentCtlrAddress.setStatus('mandatory')
if mibBuilder.loadTexts: strAgentCtlrAddress.setDescription('The memory address used by the controller.')
strAgentCtlrIOPort = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 10, 6, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strAgentCtlrIOPort.setStatus('mandatory')
if mibBuilder.loadTexts: strAgentCtlrIOPort.setDescription('The I/O port number used by the controller.')
strAgentnDisks = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 10, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strAgentnDisks.setStatus('mandatory')
if mibBuilder.loadTexts: strAgentnDisks.setDescription('The number of Disks listed in the subsequent Disks table.')
strAgentDisksTbl = MibTable((1, 3, 6, 1, 4, 1, 223, 10, 10, 8), )
if mibBuilder.loadTexts: strAgentDisksTbl.setStatus('mandatory')
if mibBuilder.loadTexts: strAgentDisksTbl.setDescription('Disk table consisting of a list of installed system disks.')
strAgentDisksTblEntry = MibTableRow((1, 3, 6, 1, 4, 1, 223, 10, 10, 8, 1), )
if mibBuilder.loadTexts: strAgentDisksTblEntry.setStatus('mandatory')
strAgentDiskVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 10, 8, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strAgentDiskVendor.setStatus('mandatory')
if mibBuilder.loadTexts: strAgentDiskVendor.setDescription('The vendor of this disk device.')
strAgentDiskDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 10, 8, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strAgentDiskDescription.setStatus('mandatory')
if mibBuilder.loadTexts: strAgentDiskDescription.setDescription('A description of the type of device.')
strAgentDiskFirmware = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 10, 8, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strAgentDiskFirmware.setStatus('mandatory')
if mibBuilder.loadTexts: strAgentDiskFirmware.setDescription("The description of the device's firmware version.")
strAgentDiskPort = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 10, 8, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strAgentDiskPort.setStatus('mandatory')
if mibBuilder.loadTexts: strAgentDiskPort.setDescription('The SCSI port this device is attached to.')
strAgentDiskBus = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 10, 8, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strAgentDiskBus.setStatus('mandatory')
if mibBuilder.loadTexts: strAgentDiskBus.setDescription('The SCSI bus number on the SCSI port that this device is attached to.')
strAgentDiskLUN = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 10, 8, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strAgentDiskLUN.setStatus('mandatory')
if mibBuilder.loadTexts: strAgentDiskLUN.setDescription("This SCSI device's logical unit number (LUN).")
strAgentDiskID = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 10, 8, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strAgentDiskID.setStatus('mandatory')
if mibBuilder.loadTexts: strAgentDiskID.setDescription("This SCSI device's SCSI ID.")
strAgentDiskSerialNo = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 10, 8, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strAgentDiskSerialNo.setStatus('mandatory')
if mibBuilder.loadTexts: strAgentDiskSerialNo.setDescription("The vendor's serial number for the device.")
strAgentDisknSectors = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 10, 8, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strAgentDisknSectors.setStatus('mandatory')
if mibBuilder.loadTexts: strAgentDisknSectors.setDescription('The number of sectors (512b) that this device can store.')
strAgentDiskDriveLetters = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 10, 8, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strAgentDiskDriveLetters.setStatus('mandatory')
if mibBuilder.loadTexts: strAgentDiskDriveLetters.setDescription('A list of the drive letters that have storage on this device.')
strAgentDiskSizeInMb = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 10, 8, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strAgentDiskSizeInMb.setStatus('mandatory')
if mibBuilder.loadTexts: strAgentDiskSizeInMb.setDescription('The capacity (in megabytes) of this device.')
strAgentDiskState = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 10, 8, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("accessable", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: strAgentDiskState.setStatus('mandatory')
if mibBuilder.loadTexts: strAgentDiskState.setDescription('The operational state of the device: accessable(1), off-line(2).')
strAgentDiskXfersPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 10, 8, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strAgentDiskXfersPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: strAgentDiskXfersPerSec.setDescription('the number of disk transfers per second reported by this device.')
strAgentDiskSmartCond = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 10, 8, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("safe", 1), ("degraded", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: strAgentDiskSmartCond.setStatus('mandatory')
if mibBuilder.loadTexts: strAgentDiskSmartCond.setDescription('The SMART condition of the device: unknown(0), safe(1), degraded(2).')
strAgentnFloppies = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 10, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strAgentnFloppies.setStatus('mandatory')
if mibBuilder.loadTexts: strAgentnFloppies.setDescription('The number of floppy drives listed in the subsequent Floppies table.')
strAgentFloppyTbl = MibTable((1, 3, 6, 1, 4, 1, 223, 10, 10, 10), )
if mibBuilder.loadTexts: strAgentFloppyTbl.setStatus('mandatory')
if mibBuilder.loadTexts: strAgentFloppyTbl.setDescription('Floppy table consisting of a list of floppy devices.')
strAgentFloppyTblEntry = MibTableRow((1, 3, 6, 1, 4, 1, 223, 10, 10, 10, 1), )
if mibBuilder.loadTexts: strAgentFloppyTblEntry.setStatus('mandatory')
strAgentFlopVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 10, 10, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strAgentFlopVendor.setStatus('mandatory')
if mibBuilder.loadTexts: strAgentFlopVendor.setDescription('The vendor information for this floppy drive.')
strAgentFlopDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 10, 10, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strAgentFlopDescription.setStatus('mandatory')
if mibBuilder.loadTexts: strAgentFlopDescription.setDescription("The vendor's description of this floppy drive.")
strAgentFlopFirmware = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 10, 10, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strAgentFlopFirmware.setStatus('mandatory')
if mibBuilder.loadTexts: strAgentFlopFirmware.setDescription("The description and version information from this floppy drive's firmware")
strAgentFlopSerialNo = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 10, 10, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strAgentFlopSerialNo.setStatus('mandatory')
if mibBuilder.loadTexts: strAgentFlopSerialNo.setDescription('The serial number of this floppy drive.')
strAgentnVolumes = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 10, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strAgentnVolumes.setStatus('mandatory')
if mibBuilder.loadTexts: strAgentnVolumes.setDescription('The number of volumes listed in the subsequent Volumes table.')
strAgentVolumesTbl = MibTable((1, 3, 6, 1, 4, 1, 223, 10, 10, 12), )
if mibBuilder.loadTexts: strAgentVolumesTbl.setStatus('mandatory')
if mibBuilder.loadTexts: strAgentVolumesTbl.setDescription('Volume table consisting of a list of installed storage volumes.')
strAgentVolumesTblEntry = MibTableRow((1, 3, 6, 1, 4, 1, 223, 10, 10, 12, 1), )
if mibBuilder.loadTexts: strAgentVolumesTblEntry.setStatus('mandatory')
strAgentVolDriveLetter = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 10, 12, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strAgentVolDriveLetter.setStatus('mandatory')
if mibBuilder.loadTexts: strAgentVolDriveLetter.setDescription('The drive letter that allows access to this storage volume.')
strAgentVolDriveLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 10, 12, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strAgentVolDriveLabel.setStatus('mandatory')
if mibBuilder.loadTexts: strAgentVolDriveLabel.setDescription('The label assigned to this volume (for display purposes).')
strAgentVolFileSystemType = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 10, 12, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strAgentVolFileSystemType.setStatus('mandatory')
if mibBuilder.loadTexts: strAgentVolFileSystemType.setDescription('The type of file system configured for this volume (eg: FAT, NTFS).')
strAgentVolCapacityInMb = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 10, 12, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strAgentVolCapacityInMb.setStatus('mandatory')
if mibBuilder.loadTexts: strAgentVolCapacityInMb.setDescription('The size (in megabytes) of this storage volume.')
strAgentVolClusterSize = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 10, 12, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strAgentVolClusterSize.setStatus('mandatory')
if mibBuilder.loadTexts: strAgentVolClusterSize.setDescription('The size of each cluster (storage unit) in sectors (512 bytes).')
strAgentVolPercentUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 10, 12, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strAgentVolPercentUsed.setStatus('mandatory')
if mibBuilder.loadTexts: strAgentVolPercentUsed.setDescription('The percent of volume storage space used (monitored by the agent).')
strAgentVolThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 10, 12, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: strAgentVolThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: strAgentVolThreshold.setDescription('The threshold of volume storage space (monitored by the agent,if not 100)')
strAgentStateThreshhold = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 10, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: strAgentStateThreshhold.setStatus('mandatory')
if mibBuilder.loadTexts: strAgentStateThreshhold.setDescription('Indicates whether a drive that goes off-line should cause an alert. (1 = yes)')
strAgentSpaceThreshhold = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 10, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: strAgentSpaceThreshhold.setStatus('deprecated')
if mibBuilder.loadTexts: strAgentSpaceThreshhold.setDescription('Indicates the maximum disk consumption (%) allowed before an alert is issued. This object has been replaced by individual disk volume space thresholds for strAgent version 1.3 or higher. If the current Unisys Agents returns a -999 value, this object is indicated being obsolete.')
strAgentCriticalVol = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 10, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strAgentCriticalVol.setStatus('mandatory')
if mibBuilder.loadTexts: strAgentCriticalVol.setDescription('Indicates the total number of volumes in critical state.')
strAgentIndex = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 10, 99), Integer32())
if mibBuilder.loadTexts: strAgentIndex.setStatus('mandatory')
if mibBuilder.loadTexts: strAgentIndex.setDescription('Indicates the number (starting from 1) of the unit reported in an alert message.')
strAgentStateTrap = NotificationType((1, 3, 6, 1, 4, 1, 223, 10, 10) + (0,1)).setObjects(("SMSAGENT-MIB", "strAgentDiskState"), ("SMSAGENT-MIB", "strAgentIndex"))
if mibBuilder.loadTexts: strAgentStateTrap.setDescription('The disk drive is no longer accessable (off-line).')
strAgentSpaceTrap = NotificationType((1, 3, 6, 1, 4, 1, 223, 10, 10) + (0,2)).setObjects(("SMSAGENT-MIB", "strAgentVolPercentUsed"), ("SMSAGENT-MIB", "strAgentIndex"))
if mibBuilder.loadTexts: strAgentSpaceTrap.setDescription('The space used on the volume has exceeded the indicated threshhold.')
strAgentVolSpaceTrap = NotificationType((1, 3, 6, 1, 4, 1, 223, 10, 10) + (0,4)).setObjects(("SMSAGENT-MIB", "strAgentVolDriveLetter"), ("SMSAGENT-MIB", "strAgentVolPercentUsed"), ("SMSAGENT-MIB", "strAgentVolThreshold"), ("SMSAGENT-MIB", "strAgentCriticalVol"))
if mibBuilder.loadTexts: strAgentVolSpaceTrap.setDescription('The space used on the volume has exceeded the indicated threshhold.')
strAgentSmartTrap = NotificationType((1, 3, 6, 1, 4, 1, 223, 10, 10) + (0,3)).setObjects(("SMSAGENT-MIB", "strAgentDiskSmartCond"), ("SMSAGENT-MIB", "strAgentIndex"))
if mibBuilder.loadTexts: strAgentSmartTrap.setDescription('The condition of the disk drive has degraded. It should be archived and replaced immediately to avoid data loss due to failure.')
strAgentStateOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 223, 10, 10) + (0,11)).setObjects(("SMSAGENT-MIB", "strAgentDiskState"), ("SMSAGENT-MIB", "strAgentIndex"))
if mibBuilder.loadTexts: strAgentStateOkTrap.setDescription('The disk drive is again accessable (on-line).')
strAgentSpaceOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 223, 10, 10) + (0,12)).setObjects(("SMSAGENT-MIB", "strAgentVolPercentUsed"), ("SMSAGENT-MIB", "strAgentIndex"))
if mibBuilder.loadTexts: strAgentSpaceOkTrap.setDescription('The space used on the volume has returned to an acceptable level.')
strAgentVolSpaceOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 223, 10, 10) + (0,14)).setObjects(("SMSAGENT-MIB", "strAgentVolDriveLetter"), ("SMSAGENT-MIB", "strAgentVolPercentUsed"), ("SMSAGENT-MIB", "strAgentVolThreshold"), ("SMSAGENT-MIB", "strAgentCriticalVol"))
if mibBuilder.loadTexts: strAgentVolSpaceOkTrap.setDescription('The space used on the volume has returned to an acceptable level.')
strAgentSmartOKTrap = NotificationType((1, 3, 6, 1, 4, 1, 223, 10, 10) + (0,13)).setObjects(("SMSAGENT-MIB", "strAgentDiskSmartCond"), ("SMSAGENT-MIB", "strAgentIndex"))
if mibBuilder.loadTexts: strAgentSmartOKTrap.setDescription("The degraded condition of the disk drive has cleared. Continue to monitor this drive's performance to ensure the integrity of its data.")
sysAgent = MibIdentifier((1, 3, 6, 1, 4, 1, 223, 10, 11))
sysAgentVersion = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 11, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysAgentVersion.setStatus('mandatory')
if mibBuilder.loadTexts: sysAgentVersion.setDescription('The internal version number of this SNMP Extension Agent.')
sysAgentRevision = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 11, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysAgentRevision.setStatus('mandatory')
if mibBuilder.loadTexts: sysAgentRevision.setDescription('The internal revision number of this SNMP Extension Agent.')
sysAgentMIBVersion = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 11, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysAgentMIBVersion.setStatus('mandatory')
if mibBuilder.loadTexts: sysAgentMIBVersion.setDescription('The internal version number of the MIB for this SNMP Extension Agent.')
sysAgentMIBRevision = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 11, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysAgentMIBRevision.setStatus('mandatory')
if mibBuilder.loadTexts: sysAgentMIBRevision.setDescription('The internal revision number of the MIB for this SNMP Extension Agent.')
sysAgentCPUCyclesUsed = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 11, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysAgentCPUCyclesUsed.setStatus('mandatory')
if mibBuilder.loadTexts: sysAgentCPUCyclesUsed.setDescription('The percentage of CPU cycles used.')
sysAgentPCICyclesUsed = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 11, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysAgentPCICyclesUsed.setStatus('mandatory')
if mibBuilder.loadTexts: sysAgentPCICyclesUsed.setDescription('The percentage of PCI bus cycles used.')
sysAgentInterrupts = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 11, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysAgentInterrupts.setStatus('mandatory')
if mibBuilder.loadTexts: sysAgentInterrupts.setDescription('The number of interrupts processed per second.')
sysAgentMemorySize = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 11, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysAgentMemorySize.setStatus('mandatory')
if mibBuilder.loadTexts: sysAgentMemorySize.setDescription('The size of memory in megabytes.')
sysAgentMemoryUsed = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 11, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysAgentMemoryUsed.setStatus('mandatory')
if mibBuilder.loadTexts: sysAgentMemoryUsed.setDescription('The percentage of memory in use.')
sysAgentPageFaults = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 11, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysAgentPageFaults.setStatus('mandatory')
if mibBuilder.loadTexts: sysAgentPageFaults.setDescription('The number of page faults per second.')
sysAgentPageFaultThreshhold = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 11, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysAgentPageFaultThreshhold.setStatus('mandatory')
if mibBuilder.loadTexts: sysAgentPageFaultThreshhold.setDescription('The minimum number of page faults per second that will generate an alert.')
sysAgentMemoryThreshhold = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 11, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysAgentMemoryThreshhold.setStatus('mandatory')
if mibBuilder.loadTexts: sysAgentMemoryThreshhold.setDescription('The minimum amount of memory consumption that will generate an alert.')
sysAgentCpuThreshhold = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 11, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysAgentCpuThreshhold.setStatus('mandatory')
if mibBuilder.loadTexts: sysAgentCpuThreshhold.setDescription('The minimum percentage of CPU cycle used that will generate an alert.')
sysAgentTotalNoCpu = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 11, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysAgentTotalNoCpu.setStatus('mandatory')
if mibBuilder.loadTexts: sysAgentTotalNoCpu.setDescription('The total number of CPU in the system.')
sysAgentCPUsTbl = MibTable((1, 3, 6, 1, 4, 1, 223, 10, 11, 15), )
if mibBuilder.loadTexts: sysAgentCPUsTbl.setStatus('mandatory')
if mibBuilder.loadTexts: sysAgentCPUsTbl.setDescription('CPU table consisting of a list of system CPUs and cycles used.')
sysAgentCPUsTblEntry = MibTableRow((1, 3, 6, 1, 4, 1, 223, 10, 11, 15, 1), )
if mibBuilder.loadTexts: sysAgentCPUsTblEntry.setStatus('mandatory')
sysAgentCPUIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 11, 15, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysAgentCPUIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sysAgentCPUIndex.setDescription('The index number of the CPU in the system.')
sysAgentCPUCycleUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 11, 15, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysAgentCPUCycleUsed.setStatus('mandatory')
if mibBuilder.loadTexts: sysAgentCPUCycleUsed.setDescription('The percentage of CPU cycles used by each CPU in the system.')
sysAgentIndex = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 11, 99), Integer32())
if mibBuilder.loadTexts: sysAgentIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sysAgentIndex.setDescription('Indicates the number (starting from 1) of the unit reported in an alert message. (Not used in this agent.)')
sysAgentMemTrap = NotificationType((1, 3, 6, 1, 4, 1, 223, 10, 11) + (0,1)).setObjects(("SMSAGENT-MIB", "sysAgentMemoryUsed"), ("SMSAGENT-MIB", "sysAgentIndex"))
if mibBuilder.loadTexts: sysAgentMemTrap.setDescription('The percentage of memory in use has exceeded the indicated threshhold.')
sysAgentPageTrap = NotificationType((1, 3, 6, 1, 4, 1, 223, 10, 11) + (0,2)).setObjects(("SMSAGENT-MIB", "sysAgentPageFaults"), ("SMSAGENT-MIB", "sysAgentIndex"))
if mibBuilder.loadTexts: sysAgentPageTrap.setDescription('The number of page faults has exceeded the indicated threshhold.')
sysAgentCpuTrap = NotificationType((1, 3, 6, 1, 4, 1, 223, 10, 11) + (0,3)).setObjects(("SMSAGENT-MIB", "SysAgentCpuCycleUsed"), ("SMSAGENT-MIB", "SysAgentIndex"))
if mibBuilder.loadTexts: sysAgentCpuTrap.setDescription('The percentage of CPU Cycle used has exceeded the indicated threshold.')
sysAgentMemoryTrap = NotificationType((1, 3, 6, 1, 4, 1, 223, 10, 11) + (0,4)).setObjects(("SMSAGENT-MIB", "sysAgentMemoryUsed"), ("SMSAGENT-MIB", "sysAgentMemoryThreshhold"))
if mibBuilder.loadTexts: sysAgentMemoryTrap.setDescription('The percentage of memory in use has exceeded the indicated threshhold.')
sysAgentPageFaultTrap = NotificationType((1, 3, 6, 1, 4, 1, 223, 10, 11) + (0,5)).setObjects(("SMSAGENT-MIB", "sysAgentPageFaults"), ("SMSAGENT-MIB", "sysAgentPageFaultThreshhold"))
if mibBuilder.loadTexts: sysAgentPageFaultTrap.setDescription('The number of page faults has exceeded the indicated threshhold.')
sysAgentProcessorTrap = NotificationType((1, 3, 6, 1, 4, 1, 223, 10, 11) + (0,6)).setObjects(("SMSAGENT-MIB", "SysAgentCpuCycleUsed"), ("SMSAGENT-MIB", "sysAgentCpuThreshhold"))
if mibBuilder.loadTexts: sysAgentProcessorTrap.setDescription('The percentage of CPU Cycle used has exceeded the indicated threshold.')
sysAgentMemOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 223, 10, 11) + (0,11)).setObjects(("SMSAGENT-MIB", "sysAgentMemoryUsed"), ("SMSAGENT-MIB", "sysAgentIndex"))
if mibBuilder.loadTexts: sysAgentMemOkTrap.setDescription('The percentage of memory in use has returned to an accecptable level.')
sysAgentPageOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 223, 10, 11) + (0,12)).setObjects(("SMSAGENT-MIB", "sysAgentPageFaults"), ("SMSAGENT-MIB", "sysAgentIndex"))
if mibBuilder.loadTexts: sysAgentPageOkTrap.setDescription('The number of page faults has returned to an accecptable level.')
sysAgentCpuOKTrap = NotificationType((1, 3, 6, 1, 4, 1, 223, 10, 11) + (0,13)).setObjects(("SMSAGENT-MIB", "SysAgentCpuCycleUsed"), ("SMSAGENT-MIB", "SysAgentIndex"))
if mibBuilder.loadTexts: sysAgentCpuOKTrap.setDescription('The percentage of CPU Cycle used has returned to an acceptable level.')
sysAgentMemoryOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 223, 10, 11) + (0,14)).setObjects(("SMSAGENT-MIB", "sysAgentMemoryUsed"), ("SMSAGENT-MIB", "sysAgentMemoryThreshhold"))
if mibBuilder.loadTexts: sysAgentMemoryOkTrap.setDescription('The percentage of memory in use has returned to an accecptable level.')
sysAgentPageFaultOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 223, 10, 11) + (0,15)).setObjects(("SMSAGENT-MIB", "sysAgentPageFaults"), ("SMSAGENT-MIB", "sysAgentPageFaultThreshhold"))
if mibBuilder.loadTexts: sysAgentPageFaultOkTrap.setDescription('The number of page faults has returned to an accecptable level.')
sysAgentProcessorOKTrap = NotificationType((1, 3, 6, 1, 4, 1, 223, 10, 11) + (0,16)).setObjects(("SMSAGENT-MIB", "SysAgentCpuCycleUsed"), ("SMSAGENT-MIB", "sysAgentCpuThreshhold"))
if mibBuilder.loadTexts: sysAgentProcessorOKTrap.setDescription('The percentage of CPU Cycle used has returned to an acceptable level.')
mibBuilder.exportSymbols("SMSAGENT-MIB", sysAgentPageFaultOkTrap=sysAgentPageFaultOkTrap, strAgentnVolumes=strAgentnVolumes, cfgAgentnTrapDests=cfgAgentnTrapDests, cfgAgentCMIPAddress=cfgAgentCMIPAddress, cfgAgentBIOSVendor=cfgAgentBIOSVendor, sftAgentServicesTblEntry=sftAgentServicesTblEntry, strAgentDiskSerialNo=strAgentDiskSerialNo, strAgentDisknSectors=strAgentDisknSectors, cfgAgentnSerials=cfgAgentnSerials, cfgAgentTrapDestId=cfgAgentTrapDestId, cfgAgentCMHostName=cfgAgentCMHostName, cfgAgentParallelsTbl=cfgAgentParallelsTbl, sftAgentSvcStateTrap=sftAgentSvcStateTrap, strAgentFloppyTbl=strAgentFloppyTbl, strAgentnFloppies=strAgentnFloppies, strAgentVolSpaceOkTrap=strAgentVolSpaceOkTrap, strAgentCtlrAddress=strAgentCtlrAddress, cfgAgentBIOSVersion=cfgAgentBIOSVersion, cfgAgentCPUSpeed=cfgAgentCPUSpeed, cfgAgentPlatforms=cfgAgentPlatforms, cfgAgentConsoleMgr=cfgAgentConsoleMgr, netAgentControllerBaseIO=netAgentControllerBaseIO, strAgentVolumesTbl=strAgentVolumesTbl, netAgentFirmwareVersion=netAgentFirmwareVersion, cfgAgentBIOSsROMInKb=cfgAgentBIOSsROMInKb, strAgentDiskDriveLetters=strAgentDiskDriveLetters, cfgAgentParallelsTblEntry=cfgAgentParallelsTblEntry, cfgAgentMIBRevision=cfgAgentMIBRevision, cfgAgentCMFirmwareVer=cfgAgentCMFirmwareVer, cfgAgentControllerName=cfgAgentControllerName, strAgentVolClusterSize=strAgentVolClusterSize, sysAgentCpuThreshhold=sysAgentCpuThreshhold, cfgAgentMemBanks=cfgAgentMemBanks, strAgentCtlrType=strAgentCtlrType, sysAgentMemorySize=sysAgentMemorySize, unisys=unisys, strAgentIndex=strAgentIndex, sysAgentCPUsTbl=sysAgentCPUsTbl, sysAgentPageFaults=sysAgentPageFaults, sysAgentMIBRevision=sysAgentMIBRevision, strAgentCriticalVol=strAgentCriticalVol, sftAgentPackagesTbl=sftAgentPackagesTbl, sysAgentMemTrap=sysAgentMemTrap, cfgAgent=cfgAgent, netAgent=netAgent, netAgentFirmwareRevision=netAgentFirmwareRevision, strAgentCtlrVendor=strAgentCtlrVendor, cfgAgentBIOSInterruptId=cfgAgentBIOSInterruptId, strAgentRevision=strAgentRevision, cfgAgentParallelPort=cfgAgentParallelPort, cfgAgentCPUsTblEntry=cfgAgentCPUsTblEntry, strAgentDiskSmartCond=strAgentDiskSmartCond, strAgentVolDriveLetter=strAgentVolDriveLetter, sysAgentIndex=sysAgentIndex, sysAgentCpuOKTrap=sysAgentCpuOKTrap, netAgentVendorID=netAgentVendorID, cfgAgentControllerIRQ=cfgAgentControllerIRQ, netAgentnNICs=netAgentnNICs, netAgentDataSent=netAgentDataSent, strAgentMIBVersion=strAgentMIBVersion, strAgentControllersTblEntry=strAgentControllersTblEntry, cfgAgentIOMouseType=cfgAgentIOMouseType, strAgentFlopFirmware=strAgentFlopFirmware, cfgAgentIRQ=cfgAgentIRQ, cfgAgentnIRQs=cfgAgentnIRQs, netAgentMACAddress=netAgentMACAddress, strAgentMIBRevision=strAgentMIBRevision, sftAgentMIBVersion=sftAgentMIBVersion, strAgentDiskDescription=strAgentDiskDescription, strAgentDiskSizeInMb=strAgentDiskSizeInMb, sysAgent=sysAgent, cfgAgentOEMPlatform=cfgAgentOEMPlatform, strAgentDiskVendor=strAgentDiskVendor, cfgAgentCPUName=cfgAgentCPUName, sftAgentSvcIndex=sftAgentSvcIndex, sysAgentCpuTrap=sysAgentCpuTrap, sysAgentMemoryTrap=sysAgentMemoryTrap, strAgentCtlrFirmware=strAgentCtlrFirmware, sftAgentDevicesTbl=sftAgentDevicesTbl, cfgAgentMemSpeed=cfgAgentMemSpeed, cfgAgentConsoleMgrTblEntry=cfgAgentConsoleMgrTblEntry, strAgentVolCapacityInMb=strAgentVolCapacityInMb, cfgAgentMemSpeedSupported=cfgAgentMemSpeedSupported, netAgentControllerIRQ=netAgentControllerIRQ, netAgentMIBVersion=netAgentMIBVersion, netAgentNICsTbl=netAgentNICsTbl, unisysOpen=unisysOpen, cfgAgentRevision=cfgAgentRevision, strAgentVolThreshold=strAgentVolThreshold, cfgAgentCPUsCacheInKb=cfgAgentCPUsCacheInKb, cfgAgentMemCacheInKb=cfgAgentMemCacheInKb, sftAgentService=sftAgentService, strAgentCtlrIOPort=strAgentCtlrIOPort, strAgentFlopVendor=strAgentFlopVendor, strAgentCtlrSerialNo=strAgentCtlrSerialNo, cfgAgentMemSizeInMb=cfgAgentMemSizeInMb, cfgAgentMIBVersion=cfgAgentMIBVersion, cfgAgentIRQBus=cfgAgentIRQBus, sysAgentCPUCycleUsed=sysAgentCPUCycleUsed, strAgentSmartOKTrap=strAgentSmartOKTrap, cfgAgentnConsoleMgr=cfgAgentnConsoleMgr, netAgentControllerType=netAgentControllerType, strAgentStateThreshhold=strAgentStateThreshhold, cfgAgentSerialsTbl=cfgAgentSerialsTbl, strAgentDiskBus=strAgentDiskBus, sysAgentRevision=sysAgentRevision, strAgentDiskLUN=strAgentDiskLUN, cfgAgentBIOSDate=cfgAgentBIOSDate, cfgAgentVersion=cfgAgentVersion, sftAgentPackagesTblEntry=sftAgentPackagesTblEntry, strAgentCtlrDMA=strAgentCtlrDMA, sysAgentMemOkTrap=sysAgentMemOkTrap, netAgentNICDriver=netAgentNICDriver, sftAgentDevice=sftAgentDevice, sysAgentMIBVersion=sysAgentMIBVersion, cfgAgentSysOS=cfgAgentSysOS, sysAgentCPUCyclesUsed=sysAgentCPUCyclesUsed, strAgentSpaceThreshhold=strAgentSpaceThreshhold, cfgAgentBIOSAddress=cfgAgentBIOSAddress, cfgAgentIRQsTbl=cfgAgentIRQsTbl, cfgAgentCommunityString=cfgAgentCommunityString, netAgentLogonServer=netAgentLogonServer, sysAgentCPUsTblEntry=sysAgentCPUsTblEntry, sysAgentProcessorOKTrap=sysAgentProcessorOKTrap, sysAgentCPUIndex=sysAgentCPUIndex, cfgAgentPlatformTblEntry=cfgAgentPlatformTblEntry, cfgAgentTrapDestsTblEntry=cfgAgentTrapDestsTblEntry, cfgAgentControllersTbl=cfgAgentControllersTbl, strAgentnDisks=strAgentnDisks, cfgAgentCMCardIndex=cfgAgentCMCardIndex, sftAgentServiceStartup=sftAgentServiceStartup, sysAgentInterrupts=sysAgentInterrupts, cfgAgentCPUClass=cfgAgentCPUClass, cfgAgentSerialPort=cfgAgentSerialPort, sftAgentDeviceStartup=sftAgentDeviceStartup, strAgentnControllers=strAgentnControllers, strAgentSpaceOkTrap=strAgentSpaceOkTrap, netAgentDataReceived=netAgentDataReceived, sftAgentVersion=sftAgentVersion, strAgent=strAgent, strAgentSpaceTrap=strAgentSpaceTrap, sysAgentPageFaultThreshhold=sysAgentPageFaultThreshhold, cfgAgentProductID=cfgAgentProductID, cfgAgentBIOSBusSupport=cfgAgentBIOSBusSupport, netAgentMachineName=netAgentMachineName, strAgentVolumesTblEntry=strAgentVolumesTblEntry, sysAgentPageOkTrap=sysAgentPageOkTrap, sysAgentPCICyclesUsed=sysAgentPCICyclesUsed, cfgAgentTrapDestIPAddr=cfgAgentTrapDestIPAddr, cfgAgentSysName=cfgAgentSysName, cfgAgentCPUVendor=cfgAgentCPUVendor, sftAgentServicesTbl=sftAgentServicesTbl, cfgAgentCPUsTbl=cfgAgentCPUsTbl, cfgAgentIOVidType=cfgAgentIOVidType, sftAgentDevicesTblEntry=sftAgentDevicesTblEntry, strAgentFloppyTblEntry=strAgentFloppyTblEntry, strAgentStateTrap=strAgentStateTrap, cfgAgentIRQClass=cfgAgentIRQClass, strAgentStateOkTrap=strAgentStateOkTrap, strAgentSmartTrap=strAgentSmartTrap, netAgentControllerPort=netAgentControllerPort, sftAgentnDevices=sftAgentnDevices, strAgentVersion=strAgentVersion, strAgentFlopSerialNo=strAgentFlopSerialNo, sftAgentnPackages=sftAgentnPackages, sftAgentPackage=sftAgentPackage, sysAgentMemoryThreshhold=sysAgentMemoryThreshhold, strAgentDiskFirmware=strAgentDiskFirmware, sftAgentServiceDesired=sftAgentServiceDesired, sysAgentMemoryUsed=sysAgentMemoryUsed, netAgentVersion=netAgentVersion, sftAgentSvcStateOkTrap=sftAgentSvcStateOkTrap, strAgentVolSpaceTrap=strAgentVolSpaceTrap, cfgAgentControllersTblEntry=cfgAgentControllersTblEntry, sftAgentRevision=sftAgentRevision, cfgAgentCPUState=cfgAgentCPUState, cfgAgentSysnDMAs=cfgAgentSysnDMAs, strAgentDiskXfersPerSec=strAgentDiskXfersPerSec, strAgentCtlrIRQ=strAgentCtlrIRQ, cfgAgentSerialsTblEntry=cfgAgentSerialsTblEntry, cfgAgentCMHardwareVer=cfgAgentCMHardwareVer, sysAgentProcessorTrap=sysAgentProcessorTrap, cfgAgentSysUptimeMilSec=cfgAgentSysUptimeMilSec, strAgentDiskID=strAgentDiskID, strAgentFlopDescription=strAgentFlopDescription, cfgAgentnControllers=cfgAgentnControllers, strAgentDiskPort=strAgentDiskPort, cfgAgentIRQsTblEntry=cfgAgentIRQsTblEntry, sysAgentMemoryOkTrap=sysAgentMemoryOkTrap, sysAgentPageFaultTrap=sysAgentPageFaultTrap, strAgentVolPercentUsed=strAgentVolPercentUsed, cfgAgentnParallels=cfgAgentnParallels, cfgAgentIRQOwner=cfgAgentIRQOwner, strAgentVolFileSystemType=strAgentVolFileSystemType, sysAgentTotalNoCpu=sysAgentTotalNoCpu, netAgentDriverName=netAgentDriverName, cfgAgentnPlatforms=cfgAgentnPlatforms, sftAgentServiceStatus=sftAgentServiceStatus, sysAgentVersion=sysAgentVersion, sftAgentnServices=sftAgentnServices, sftAgentCriticalServices=sftAgentCriticalServices, sysAgentPageTrap=sysAgentPageTrap, cfgAgentnCPUs=cfgAgentnCPUs, strAgentControllersTbl=strAgentControllersTbl, strAgentDisksTblEntry=strAgentDisksTblEntry, sftAgentMIBRevision=sftAgentMIBRevision, cfgAgentMemType=cfgAgentMemType, netAgentMIBRevision=netAgentMIBRevision, strAgentDiskState=strAgentDiskState, cfgAgentIOKbdType=cfgAgentIOKbdType, sftAgent=sftAgent, strAgentVolDriveLabel=strAgentVolDriveLabel, cfgAgentSysBoardVersion=cfgAgentSysBoardVersion, netAgentNICTblEntry=netAgentNICTblEntry, cfgAgentTrapDestsTbl=cfgAgentTrapDestsTbl, strAgentDisksTbl=strAgentDisksTbl, netAgentRevision=netAgentRevision, cfgAgentControllerType=cfgAgentControllerType)
