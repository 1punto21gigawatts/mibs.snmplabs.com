#
# PySNMP MIB module ISDN-OPT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ISDN-OPT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:57:12 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, ModuleIdentity, ObjectIdentity, enterprises, Counter64, MibIdentifier, iso, IpAddress, Unsigned32, Counter32, Integer32, Gauge32, NotificationType, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "ModuleIdentity", "ObjectIdentity", "enterprises", "Counter64", "MibIdentifier", "iso", "IpAddress", "Unsigned32", "Counter32", "Integer32", "Gauge32", "NotificationType", "Bits")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
codex = MibIdentifier((1, 3, 6, 1, 4, 1, 449))
cdxProductSpecific = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2))
cdx6500 = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1))
cdx6500Configuration = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2))
cdx6500CfgGeneralGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2))
isgIsdnCfgGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 19))
cdx6500Statistics = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3))
cdx6500StatOtherStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2))
isgIsdnStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 9))
cdx6500Controls = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 4))
isgIsdnCtrlGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 8))
class DisplayString(OctetString):
    pass

isgVGIsdnCfgChanTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 19, 1), )
if mibBuilder.loadTexts: isgVGIsdnCfgChanTable.setStatus('mandatory')
if mibBuilder.loadTexts: isgVGIsdnCfgChanTable.setDescription('This table contains ISDN Channel Configuration parameters.')
isgVGIsdnCfgChanTableEntry = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 19, 1, 1), ).setIndexNames((0, "ISDN-OPT-MIB", "isgVGIsdnCfgEntryNum"))
if mibBuilder.loadTexts: isgVGIsdnCfgChanTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: isgVGIsdnCfgChanTableEntry.setDescription('An ISDN Channel Configuration Table Entry.')
isgVGIsdnCfgEntryNum = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 19, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isgVGIsdnCfgEntryNum.setStatus('mandatory')
if mibBuilder.loadTexts: isgVGIsdnCfgEntryNum.setDescription('This indicates the Channel Configuration Table Entry Number.')
isgVGIsdnCfgChanType = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 19, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("isdnNone", 1), ("isdnD", 2), ("isdnB1", 3), ("isdnB2", 4), ("isdn2B", 5), ("isdnB", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isgVGIsdnCfgChanType.setStatus('mandatory')
if mibBuilder.loadTexts: isgVGIsdnCfgChanType.setDescription('ISDN Channel Type.')
isgVGIsdnCfgDChanPort = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 19, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 5, 100))).clone(namedValues=NamedValues(("dchanzero", 1), ("dchanone", 2), ("dchanfour", 5), ("nc", 100)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isgVGIsdnCfgDChanPort.setStatus('mandatory')
if mibBuilder.loadTexts: isgVGIsdnCfgDChanPort.setDescription('The associated port for the ISDN D-channel. dchanzero : Both B channels have access type Permanent. No D Channel data. dchanone : Packet Data on D-channel (Port 1 Type = X25) or B-channel access type is Switched type. dchanfour : Packet Data on D-Channel (Port 4 Type = X25). nc : Skipped during configuration. ')
isgVGIsdnCfgSwitchType = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 19, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 6, 8, 9, 11, 13, 14, 15))).clone(namedValues=NamedValues(("bri1tr6Stype", 2), ("bri5essStype", 3), ("briDms100Stype", 6), ("briKddStype", 8), ("briEtsiStype", 9), ("briNi1Stype", 11), ("briNttStype", 13), ("briTs013Stype", 14), ("briVnStype", 15)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isgVGIsdnCfgSwitchType.setStatus('mandatory')
if mibBuilder.loadTexts: isgVGIsdnCfgSwitchType.setDescription('Specifies switch type for the central office. bri1tr6Stype : German National ISDN. bri5essStype : AT&T switch briDms100Stype : DMS 100. briKddStype : Japanese International Access ISDN. briEtsiStype : Euro ISDB BRI (NET3). briNi1Stype : National ISDN version 1. briNttStype : Japanese National ISDN. briTs013Stype : Australian National ISDN. briVnStype : France National ISDN.')
isgVGIsdnCfgDChanTEI = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 19, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isgVGIsdnCfgDChanTEI.setStatus('mandatory')
if mibBuilder.loadTexts: isgVGIsdnCfgDChanTEI.setDescription('The Terminal Endpoint Identifier value is provided by the service provider. The range for TEI is 0..63, 127, 255. If the Switch Type is configured as DMS-1, the possible range for TEI selection will be limited to 1..63. If TEI is configured to 255, the next valid TEI will be used and if TEI is configured to 127, automatic TEI negotiation will take place.')
isgVGIsdnCfgDPckTraffic = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 19, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isgVGIsdnCfgDPckTraffic.setStatus('mandatory')
if mibBuilder.loadTexts: isgVGIsdnCfgDPckTraffic.setDescription('enable : Signalling and X.25 data over the D Channel. disable : Only signalling data over the D Channel.')
isgVGIsdnCfgDChanDN = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 19, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 17))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isgVGIsdnCfgDChanDN.setStatus('mandatory')
if mibBuilder.loadTexts: isgVGIsdnCfgDChanDN.setDescription('Local Subscriber Directory Number (DN) DN is provided by the ISDN service provider.')
isgVGIsdnCfgDSPID = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 19, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 21))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isgVGIsdnCfgDSPID.setStatus('mandatory')
if mibBuilder.loadTexts: isgVGIsdnCfgDSPID.setDescription('The Service Profile ID identifies the service profile and is provided by the ISDN service provider.')
isgVGIsdnCfgFirstBChanPort = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 19, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isgVGIsdnCfgFirstBChanPort.setStatus('mandatory')
if mibBuilder.loadTexts: isgVGIsdnCfgFirstBChanPort.setDescription("0 : No call or TEI activity for the following objects prefixed by `isgVGIsdnCfgFirst' 1-3 : The associated port whose traffic will be on the ISDN B-channel which has the call and TEI objects prefixed by `isgVGIsdnCfgFirst'.")
isgVGIsdnCfgFirstAccType = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 19, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("perm", 1), ("cmd", 2), ("pmd", 3), ("cvl", 4), ("dov", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isgVGIsdnCfgFirstAccType.setStatus('mandatory')
if mibBuilder.loadTexts: isgVGIsdnCfgFirstAccType.setDescription('perm : Dedicated (nailed-down) B-channel service. cmd : Dialed B-channel service: Circuit Mode. pmd : Dialed B-channel service: Packet Mode. cvl : Dialed B-channel service: Circuit Mode (Virtual Leased Line). dov : dialed B-channel service: Circuit Mode (Data over voice).')
isgVGIsdnCfgFirstCallDisablSTm = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 19, 1, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isgVGIsdnCfgFirstCallDisablSTm.setStatus('mandatory')
if mibBuilder.loadTexts: isgVGIsdnCfgFirstCallDisablSTm.setDescription("The Call Disable Start Time indicates whether ISDN calls will/will-not be blocked. This field is blank or displayed in the format `HHMM'. blank : ISDN calls will not be blocked. HHMM : ISDN calls will be blocked starting at HH hour MM minutes.")
isgVGIsdnCfgFirstCallEnablSTm = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 19, 1, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isgVGIsdnCfgFirstCallEnablSTm.setStatus('mandatory')
if mibBuilder.loadTexts: isgVGIsdnCfgFirstCallEnablSTm.setDescription("The Call Enable Start Time indicates whether ISDN calls will/will-not be blocked. This field is blank or displayed in the format `HHMM'. blank : ISDN calls will not be blocked. HHMM : ISDN calls will be blocked starting at HH hour MM minutes.")
isgVGIsdnCfgFirstSPBU = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 19, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isgVGIsdnCfgFirstSPBU.setStatus('mandatory')
if mibBuilder.loadTexts: isgVGIsdnCfgFirstSPBU.setDescription("This port is configured to carry Same Port Backup (SPBU) feature. This feature requires the corresponding Port's Connection Type be SIMP.")
isgVGIsdnCfgFirstSPBUOpt = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 19, 1, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 18))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isgVGIsdnCfgFirstSPBUOpt.setStatus('mandatory')
if mibBuilder.loadTexts: isgVGIsdnCfgFirstSPBUOpt.setDescription('Same Port Backup (SPBU) feature options This defines the switch back criteria for the backup ISDN line. NONE : No SPBU feature options. TIMEOUT : Based on a pre-configured timeout period. CALL : Based on the status of the Backup ISDN call. Any combination of the above can be specified by summing (e.g. TIMEOUT+CALL).')
isgVGIsdnCfgFirstSPBUTmOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 19, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 240))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isgVGIsdnCfgFirstSPBUTmOut.setStatus('mandatory')
if mibBuilder.loadTexts: isgVGIsdnCfgFirstSPBUTmOut.setDescription('Same Port Backup (SPBU) Timeout Counter. This defines the ISDN call duration time before a return to the leased line is attempted. This parameter is valid when TIMEOUT option is selected. The timeout period is a 1 minute interval.')
isgVGIsdnCfgFirstRate = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 19, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("rate64k", 1), ("rate128k", 2), ("rate56k", 3), ("rate112k", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isgVGIsdnCfgFirstRate.setStatus('mandatory')
if mibBuilder.loadTexts: isgVGIsdnCfgFirstRate.setDescription('This parameter specifies the line speed for this channel. rate64k : No Adaptation rate128k : Bonded, no adaptation rate56k : Rate Adapted to 64K rate112k : Rate Adapted to 12D8K.')
isgVGIsdnCfgFirstTEI = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 19, 1, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isgVGIsdnCfgFirstTEI.setStatus('mandatory')
if mibBuilder.loadTexts: isgVGIsdnCfgFirstTEI.setDescription('The value for the TEI (Terminal Endpoint Identifier). is provided by the service provider. The range is 0..63, 127, 255. Select 127 for automatic TEI negotiation and 255 to use Packet D TEI.')
isgVGIsdnCfgFirstSPID = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 19, 1, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 21))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isgVGIsdnCfgFirstSPID.setStatus('mandatory')
if mibBuilder.loadTexts: isgVGIsdnCfgFirstSPID.setDescription('The Service Profile ID identifies the service profile and is provided by the ISDN service provider.')
isgVGIsdnCfgFirstDN = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 19, 1, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 17))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isgVGIsdnCfgFirstDN.setStatus('mandatory')
if mibBuilder.loadTexts: isgVGIsdnCfgFirstDN.setDescription('Local Subscriber Directory Number (DN) DN is provided by the ISDN service provider.')
isgVGIsdnCfgFirstSubAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 19, 1, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 21))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isgVGIsdnCfgFirstSubAddr.setStatus('mandatory')
if mibBuilder.loadTexts: isgVGIsdnCfgFirstSubAddr.setDescription('Outgoing call : This subaddress will be sent in the call setup message. Incoming call : This subaddress will be used for call verification if provided.')
isgVGIsdnCfgFirstOutDialNum1 = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 19, 1, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 17))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isgVGIsdnCfgFirstOutDialNum1.setStatus('mandatory')
if mibBuilder.loadTexts: isgVGIsdnCfgFirstOutDialNum1.setDescription('The phone number to dial when establishing an ISDN outbound call.')
isgVGIsdnCfgFirstOutDialNum2 = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 19, 1, 1, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 17))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isgVGIsdnCfgFirstOutDialNum2.setStatus('mandatory')
if mibBuilder.loadTexts: isgVGIsdnCfgFirstOutDialNum2.setDescription('The phone number to dial if B1 Outbound Dial Number #1 is not available. Alternate attempts will be made between Number#1 and Number#2.')
isgVGIsdnCfgFirstDialRetryIntrvl = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 19, 1, 1, 23), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isgVGIsdnCfgFirstDialRetryIntrvl.setStatus('mandatory')
if mibBuilder.loadTexts: isgVGIsdnCfgFirstDialRetryIntrvl.setDescription('The Dial Retry Timer defines the time (1 second interval) between ISDN dial attempts. The range is 0, 15-3600. The timer will be disabled by a configuration of 0.')
isgVGIsdnCfgFirstNumCallRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 19, 1, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isgVGIsdnCfgFirstNumCallRetries.setStatus('mandatory')
if mibBuilder.loadTexts: isgVGIsdnCfgFirstNumCallRetries.setDescription('The Dial Retry Counter specifies the number of times the ISDN will attempt calling at the Call Retry Interval. The value of 0 will allow unlimited number of attempts.')
isgVGIsdnCfgSecondChanPort = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 19, 1, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isgVGIsdnCfgSecondChanPort.setStatus('mandatory')
if mibBuilder.loadTexts: isgVGIsdnCfgSecondChanPort.setDescription("0 : No call or TEI activity for the following objects prefixed by `isgVGIsdnCfgSecond' 1-3 : The associated port whose traffic will be on the ISDN B-channel which has the call and TEI objects prefixed by `isgVGIsdnCfgSecond'.")
isgVGIsdnCfgSecondAccType = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 19, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("perm", 1), ("cmd", 2), ("pmd", 3), ("cvl", 4), ("dov", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isgVGIsdnCfgSecondAccType.setStatus('mandatory')
if mibBuilder.loadTexts: isgVGIsdnCfgSecondAccType.setDescription('perm : Dedicated (nailed-down) B-channel service. cmd : Dialed B-channel service: Circuit Mode. pmd : Dialed B-channel service: Packet Mode. cvl : Dialed B-channel service: Circuit Mode (Virtual Leased Line). dov : dialed B-channel service: Circuit Mode (Data over voice).')
isgVGIsdnCfgSecondCallDisablSTm = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 19, 1, 1, 27), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isgVGIsdnCfgSecondCallDisablSTm.setStatus('mandatory')
if mibBuilder.loadTexts: isgVGIsdnCfgSecondCallDisablSTm.setDescription("The Call Disable Start Time indicates whether ISDN calls will/will-not be blocked. This field is blank or displayed in the format `HHMM'. blank : ISDN calls will not be blocked. HHMM : ISDN calls will be blocked starting at HH hour MM minutes.")
isgVGIsdnCfgSecondCallEnablSTm = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 19, 1, 1, 28), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isgVGIsdnCfgSecondCallEnablSTm.setStatus('mandatory')
if mibBuilder.loadTexts: isgVGIsdnCfgSecondCallEnablSTm.setDescription("The Call Enable Start Time indicates whether ISDN calls will/will-not be blocked. This field is blank or displayed in the format `HHMM'. blank : ISDN calls will not be blocked. HHMM : ISDN calls will be blocked starting at HH hour MM minutes.")
isgVGIsdnCfgSecondSPBU = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 19, 1, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isgVGIsdnCfgSecondSPBU.setStatus('mandatory')
if mibBuilder.loadTexts: isgVGIsdnCfgSecondSPBU.setDescription("This port is configured to carry Same Port Backup (SPBU) feature. This feature requires the corresponding Port's Connection Type be SIMP.")
isgVGIsdnCfgSecondSPBUOpt = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 19, 1, 1, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 18))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isgVGIsdnCfgSecondSPBUOpt.setStatus('mandatory')
if mibBuilder.loadTexts: isgVGIsdnCfgSecondSPBUOpt.setDescription('Same Port Backup (SPBU) feature options This defines the switch back criteria for the backup ISDN line. NONE : No SPBU feature options. TIMEOUT : Based on a pre-configured timeout period. CALL : Based on the status of the Backup ISDN call. Any combination of the above can be specified by summing (e.g. TIMEOUT+CALL).')
isgVGIsdnCfgSecondSPBUTmOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 19, 1, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 240))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isgVGIsdnCfgSecondSPBUTmOut.setStatus('mandatory')
if mibBuilder.loadTexts: isgVGIsdnCfgSecondSPBUTmOut.setDescription('Same Port Backup (SPBU) Timeout Counter. This defines the ISDN call duration time before a return to the leased line is attempted. This parameter is valid when TIMEOUT option is selected.The timeout period is a 1 minute interval.')
isgVGIsdnCfgSecondRate = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 19, 1, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("rate64k", 1), ("rate56k", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isgVGIsdnCfgSecondRate.setStatus('mandatory')
if mibBuilder.loadTexts: isgVGIsdnCfgSecondRate.setDescription('This parameter specifies the line speed for this channel. rate64k : No Adaptation rate56k : Rate Adapted to 64K.')
isgVGIsdnCfgSecondTEI = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 19, 1, 1, 33), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isgVGIsdnCfgSecondTEI.setStatus('mandatory')
if mibBuilder.loadTexts: isgVGIsdnCfgSecondTEI.setDescription('The value for the TEI (Terminal Endpoint Identifier). is provided by the service provider. The range is 0..63, 127, 255. Select 127 for automatic TEI negotiation and 255 to use TEI selected for B1.')
isgVGIsdnCfgSecondSPID = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 19, 1, 1, 34), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 21))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isgVGIsdnCfgSecondSPID.setStatus('mandatory')
if mibBuilder.loadTexts: isgVGIsdnCfgSecondSPID.setDescription('The Service Profile ID identifies the service profile and is provided by the ISDN service provider.')
isgVGIsdnCfgSecondDN = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 19, 1, 1, 35), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 17))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isgVGIsdnCfgSecondDN.setStatus('mandatory')
if mibBuilder.loadTexts: isgVGIsdnCfgSecondDN.setDescription('Local Subscriber Directory Number (DN) DN is provided by the ISDN service provider.')
isgVGIsdnCfgSecondSubAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 19, 1, 1, 36), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 21))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isgVGIsdnCfgSecondSubAddr.setStatus('mandatory')
if mibBuilder.loadTexts: isgVGIsdnCfgSecondSubAddr.setDescription('Outgoing call : This subaddress will be sent in the call setup message. Incoming call : This subaddress will be used for call verification if provided.')
isgVGIsdnCfgSecondOutDialNum1 = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 19, 1, 1, 37), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 17))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isgVGIsdnCfgSecondOutDialNum1.setStatus('mandatory')
if mibBuilder.loadTexts: isgVGIsdnCfgSecondOutDialNum1.setDescription('The phone number to dial when establishing an ISDN outbound call.')
isgVGIsdnCfgSecondOutDialNum2 = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 19, 1, 1, 38), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 17))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isgVGIsdnCfgSecondOutDialNum2.setStatus('mandatory')
if mibBuilder.loadTexts: isgVGIsdnCfgSecondOutDialNum2.setDescription('The phone number to dial if B1 Outbound Dial Number #1 is not available. Alternate attempts will be made between Number#1 and Number#2.')
isgVGIsdnCfgSecondDialRetryIntrvl = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 19, 1, 1, 39), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isgVGIsdnCfgSecondDialRetryIntrvl.setStatus('mandatory')
if mibBuilder.loadTexts: isgVGIsdnCfgSecondDialRetryIntrvl.setDescription('The Dial Retry Timer defines the time (1 second interval) between ISDN dial attempts. The range is 0, 15-3600. The timer will be disabled by a configuration of 0.')
isgVGIsdnCfgSecondNumCallRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 19, 1, 1, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isgVGIsdnCfgSecondNumCallRetries.setStatus('mandatory')
if mibBuilder.loadTexts: isgVGIsdnCfgSecondNumCallRetries.setDescription('The Dial Retry Counter specifies the number of times the ISDN will attempt calling at the Call Retry Interval. The value of 0 will allow unlimited number of attempts.')
isgVGIsdnCfgFirstPlainOldTelSet = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 19, 1, 1, 41), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isgVGIsdnCfgFirstPlainOldTelSet.setStatus('mandatory')
if mibBuilder.loadTexts: isgVGIsdnCfgFirstPlainOldTelSet.setDescription('none: No Telephone support required pots1: Plain Old Telephone Set 1 connected')
isgVGIsdnCfgFirstCallPerm = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 19, 1, 1, 42), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isgVGIsdnCfgFirstCallPerm.setStatus('mandatory')
if mibBuilder.loadTexts: isgVGIsdnCfgFirstCallPerm.setDescription('out - Initiates Call only, does not accept call inc - Accepts Call only, does not send call to network')
isgVGIsdnCfgFirstChSelect = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 19, 1, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("preferred", 1), ("exclusive", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isgVGIsdnCfgFirstChSelect.setStatus('mandatory')
if mibBuilder.loadTexts: isgVGIsdnCfgFirstChSelect.setDescription('exclusive - implies channel requested will be fixed with the configured selection preferred - it will be up to the network to grant a channel for connection')
isgVGIsdnCfgSecondPlainOldTelSet = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 19, 1, 1, 44), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isgVGIsdnCfgSecondPlainOldTelSet.setStatus('mandatory')
if mibBuilder.loadTexts: isgVGIsdnCfgSecondPlainOldTelSet.setDescription('none: No Telephone support required pots1: Plain Old Telephone Set 1 connected pots2: Plain Old Telephone Set 2 connected')
isgVGIsdnCfgSecondCallPerm = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 19, 1, 1, 45), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isgVGIsdnCfgSecondCallPerm.setStatus('mandatory')
if mibBuilder.loadTexts: isgVGIsdnCfgSecondCallPerm.setDescription('out - Initiates Call only, does not accept call inc - Accepts Call only, does not send call to network')
isgVGIsdnCfgSecondChSelect = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 19, 1, 1, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("preferred", 1), ("exclusive", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isgVGIsdnCfgSecondChSelect.setStatus('mandatory')
if mibBuilder.loadTexts: isgVGIsdnCfgSecondChSelect.setDescription('exclusive - implies channel requested will be fixed with the configured selection preferred - it will be up to the network to grant a channel for connection')
isgVGIsdnStats = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 9, 1))
isgVGIsdnCCStatsTbl = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 9, 1, 1), )
if mibBuilder.loadTexts: isgVGIsdnCCStatsTbl.setStatus('mandatory')
if mibBuilder.loadTexts: isgVGIsdnCCStatsTbl.setDescription('ISDN DSL Current Call Statistics Table.')
isgVGIsdnCCStatsTblEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 9, 1, 1, 1), ).setIndexNames((0, "ISDN-OPT-MIB", "isgVGIsdnCCStatsDSLNum"), (0, "ISDN-OPT-MIB", "isgVGIsdnCCStatsChType"))
if mibBuilder.loadTexts: isgVGIsdnCCStatsTblEntry.setStatus('mandatory')
if mibBuilder.loadTexts: isgVGIsdnCCStatsTblEntry.setDescription('Current Call Statistics Table Entries.')
isgVGIsdnCCStatsDSLNum = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 9, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isgVGIsdnCCStatsDSLNum.setStatus('mandatory')
if mibBuilder.loadTexts: isgVGIsdnCCStatsDSLNum.setDescription('Digital Service Loop Number.')
isgVGIsdnCCStatsChType = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 9, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dChannel", 1), ("b1Channel", 2), ("b2Channel", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isgVGIsdnCCStatsChType.setStatus('mandatory')
if mibBuilder.loadTexts: isgVGIsdnCCStatsChType.setDescription('ISDN Channel Type.')
isgVGIsdnCCStatsSwtchType = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 9, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 6, 8, 9, 11, 13, 14, 15, 16))).clone(namedValues=NamedValues(("bri1tr6Stype", 2), ("bri5essStype", 3), ("briDms100Stype", 6), ("briKddStype", 8), ("briEtsiStype", 9), ("briNi1Stype", 11), ("briNttStype", 13), ("briTs013Stype", 14), ("briVnStype", 15), ("unsupported", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isgVGIsdnCCStatsSwtchType.setStatus('mandatory')
if mibBuilder.loadTexts: isgVGIsdnCCStatsSwtchType.setDescription('Switch Type. bri1tr6Stype : German National ISDN. bri5essStype : AT&T switch briDms100Stype : DMS 100. briKddStype : Japanese International Access ISDN. briEtsiStype : Euro ISDB BRI (NET3). briNi1Stype : National ISDN version 1. briNttStype : Japanese National ISDN. briTs013Stype : Australian National ISDN. briVnStype : France National ISDN. unsupported : Unsupported Switch Type.')
isgVGIsdnCCStatsL1State = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 9, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("l1Setup", 1), ("l1Active", 2), ("l1Deactive", 3), ("l1B1Loop", 4), ("l1B2Loop", 5), ("l1B1B2Loop", 6), ("l12BDLoop", 7), ("unknown", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isgVGIsdnCCStatsL1State.setStatus('mandatory')
if mibBuilder.loadTexts: isgVGIsdnCCStatsL1State.setDescription('Level1 State. l1Setup : Setup State. l1Active : Active State. l1Deactive : Inactive State. l1B1Loop : Loop Test State. l1B2Loop : Loop Test State. l1B1B2Loop : Loop Test State. l12BDLoop : Loop Test State. unknown : Loop Test State.')
isgVGIsdnCCStatsTEI = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 9, 1, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isgVGIsdnCCStatsTEI.setStatus('mandatory')
if mibBuilder.loadTexts: isgVGIsdnCCStatsTEI.setDescription('Terminal Endpoint Identifier.')
isgVGIsdnCCStatsCallgAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 9, 1, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 21))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isgVGIsdnCCStatsCallgAddr.setStatus('mandatory')
if mibBuilder.loadTexts: isgVGIsdnCCStatsCallgAddr.setDescription('Current Call Statistics : Calling Address.')
isgVGIsdnCCStatsCalldAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 9, 1, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 21))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isgVGIsdnCCStatsCalldAddr.setStatus('mandatory')
if mibBuilder.loadTexts: isgVGIsdnCCStatsCalldAddr.setDescription('Current Call Statistics : Called Address.')
isgVGIsdnCCStatsSubaddr = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 9, 1, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 21))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isgVGIsdnCCStatsSubaddr.setStatus('mandatory')
if mibBuilder.loadTexts: isgVGIsdnCCStatsSubaddr.setDescription('Current Call Statistics : Call Subaddress.')
isgVGIsdnCCStatsDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 9, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noCall", 1), ("outgoing", 2), ("incoming", 3), ("collision", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isgVGIsdnCCStatsDirection.setStatus('mandatory')
if mibBuilder.loadTexts: isgVGIsdnCCStatsDirection.setDescription('Current Call Statistics : Call Direction. noCall : Channel is idle. outgoing : Call is coming from Vanguard into the ISDN network. incoming : Call is coming into Vanguard from the ISDN Network. collision : A Call collision is detected.')
isgVGIsdnCCStatsAccType = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 9, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("permanent", 1), ("cktMode", 2), ("pktMode", 3), ("cvl", 4), ("notApplicable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isgVGIsdnCCStatsAccType.setStatus('mandatory')
if mibBuilder.loadTexts: isgVGIsdnCCStatsAccType.setDescription('Current Call Statistics : Channel Access Type. permanent : Permanent B is selected. cktMode : Dialed B-channel service: Circuit Mode. pktMode : Dialed B-channel service: Packet Mode. cvl : Dialed B-channel service: Circuit Mode (Virtual Leased Line).')
isgVGIsdnCCStatsCallStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 9, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("waitInit", 1), ("initFail", 2), ("termIdle", 3), ("callInit", 4), ("discSent", 5), ("hostProc", 6), ("callConn", 7), ("notApplicable", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isgVGIsdnCCStatsCallStatus.setStatus('mandatory')
if mibBuilder.loadTexts: isgVGIsdnCCStatsCallStatus.setDescription("Current Call Statistics : Call Status. waitInit : FIT waiting for SPID registration. initFail : FIT's SPID registration has failed. termIdle : Terminal is currently idle (ready for calls). callInit : An outbound call setup is sent. discSent : A disconnect request is sent. hostProc : In Call Proc./Alert State. callConn : An outbound/inbound call is connected. notApplicable : Not applicable to this channel. This object is only applicable to B1/B2 Channels.")
isgVGIsdnCCStatsLineSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 9, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("rate64k", 1), ("rate56k", 2), ("rate0k", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isgVGIsdnCCStatsLineSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: isgVGIsdnCCStatsLineSpeed.setDescription('Current Call Statistics : Line Speed. rate64k : No Adaptation rate128k : Bonded, no adaptation rate56k : Rate Adapted to 64K rate112k : Rate Adapted to 12D8K.')
isgVGIsdnCCStatsPortConn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 9, 1, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isgVGIsdnCCStatsPortConn.setStatus('mandatory')
if mibBuilder.loadTexts: isgVGIsdnCCStatsPortConn.setDescription('Current Call Statistics : Port number to carry this call.')
isgVGIsdnCCStatsCauseCode = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 9, 1, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isgVGIsdnCCStatsCauseCode.setStatus('mandatory')
if mibBuilder.loadTexts: isgVGIsdnCCStatsCauseCode.setDescription('Current Call Statistics : Cause Code sent/received in the Q.931 message.')
isgVGIsdnCCStatsCallStarted = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 9, 1, 1, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 18))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isgVGIsdnCCStatsCallStarted.setStatus('mandatory')
if mibBuilder.loadTexts: isgVGIsdnCCStatsCallStarted.setDescription('Current Call Statistics : Call Start Time.')
isgVGIsdnCCStatsDChanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 9, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isgVGIsdnCCStatsDChanStatus.setStatus('mandatory')
if mibBuilder.loadTexts: isgVGIsdnCCStatsDChanStatus.setDescription('enabled : D channel is enabled. disabled : D channel is disabled.')
isgVGIsdnCCStatsTrmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 9, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("fitWaitInit", 1), ("fitFailed", 2), ("fitTimeout", 3), ("networkTimeout", 4), ("spiDerror", 5), ("online", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isgVGIsdnCCStatsTrmStatus.setStatus('mandatory')
if mibBuilder.loadTexts: isgVGIsdnCCStatsTrmStatus.setDescription('fitWaitInit : Fully Initializing Terminal (FIT) is waiting for SPID registration. fitFailed : FIT registration failed, check alarm for cause. fitTimeout : SPID registration has timed out, waiting for retry. networkTimeout : Network is not responding to SPID registration sent. spidError : Network rejected SPID registration due to error in the ID. online : Terminal is ready for ISDN communication.')
isgVGIsdnCCStatsTrmTei = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 9, 1, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isgVGIsdnCCStatsTrmTei.setStatus('mandatory')
if mibBuilder.loadTexts: isgVGIsdnCCStatsTrmTei.setDescription('Terminal (B1/B2) TEI.')
isgVGIsdnCHStatsTbl = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 9, 1, 2), )
if mibBuilder.loadTexts: isgVGIsdnCHStatsTbl.setStatus('mandatory')
if mibBuilder.loadTexts: isgVGIsdnCHStatsTbl.setDescription('ISDN DSL Call History Table.')
isgVGIsdnCHStatsTblEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 9, 1, 2, 1), ).setIndexNames((0, "ISDN-OPT-MIB", "isgVGIsdnCHStatsDSLNum"), (0, "ISDN-OPT-MIB", "isgVGIsdnCHStatsChType"), (0, "ISDN-OPT-MIB", "isgVGIsdnCHStatsSession"))
if mibBuilder.loadTexts: isgVGIsdnCHStatsTblEntry.setStatus('mandatory')
if mibBuilder.loadTexts: isgVGIsdnCHStatsTblEntry.setDescription('ISDN DSL Call History Table Entries.')
isgVGIsdnCHStatsDSLNum = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 9, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isgVGIsdnCHStatsDSLNum.setStatus('mandatory')
if mibBuilder.loadTexts: isgVGIsdnCHStatsDSLNum.setDescription('Digital Service Loop Number.')
isgVGIsdnCHStatsChType = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 9, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("b1Channel", 1), ("b2Channel", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isgVGIsdnCHStatsChType.setStatus('mandatory')
if mibBuilder.loadTexts: isgVGIsdnCHStatsChType.setDescription('ISDN Channel Type.')
isgVGIsdnCHStatsSession = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 9, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isgVGIsdnCHStatsSession.setStatus('mandatory')
if mibBuilder.loadTexts: isgVGIsdnCHStatsSession.setDescription('Call Session Number tracked. 0 : Most Recent call. 1 : Previous call. 2 : Oldest call.')
isgVGIsdnCHStatsNumCalld = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 9, 1, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isgVGIsdnCHStatsNumCalld.setStatus('mandatory')
if mibBuilder.loadTexts: isgVGIsdnCHStatsNumCalld.setDescription('If the call is outgoing, this is the phone number that has been called. If the call is incoming, this is the number that is calling (provided the line has subscribed to Caller ID Display.')
isgVGIsdnCHStatsDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 9, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noCall", 1), ("outgoing", 2), ("incoming", 3), ("collision", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isgVGIsdnCHStatsDirection.setStatus('mandatory')
if mibBuilder.loadTexts: isgVGIsdnCHStatsDirection.setDescription('Direction of the call. noCall : Channel is idle. outgoing : Call is coming from Vanguard into the ISDN network. incoming : Call is coming into Vanguard from the ISDN Network. collision : A Call collision is detected.')
isgVGIsdnCHStatsCauseCode = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 9, 1, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isgVGIsdnCHStatsCauseCode.setStatus('mandatory')
if mibBuilder.loadTexts: isgVGIsdnCHStatsCauseCode.setDescription('Cause Code sent/received in the Q.931 message.')
isgVGIsdnCHStatsLineSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 9, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("rate64k", 1), ("rate56k", 2), ("rate0k", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isgVGIsdnCHStatsLineSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: isgVGIsdnCHStatsLineSpeed.setDescription('Line Speed for the call. rate64k : No Adaptation rate56k : Rate Adapted to 64K rate0k : Rate Adapted to 0K.')
isgVGIsdnCHStatsAsscPort = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 9, 1, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isgVGIsdnCHStatsAsscPort.setStatus('mandatory')
if mibBuilder.loadTexts: isgVGIsdnCHStatsAsscPort.setDescription('Associated Port number to carry this call.')
isgVGIsdnCHStatsStrtTm = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 9, 1, 2, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 18))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isgVGIsdnCHStatsStrtTm.setStatus('mandatory')
if mibBuilder.loadTexts: isgVGIsdnCHStatsStrtTm.setDescription('Call Start Time.')
isgVGIsdnCHStatsEndTm = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 9, 1, 2, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 13))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isgVGIsdnCHStatsEndTm.setStatus('mandatory')
if mibBuilder.loadTexts: isgVGIsdnCHStatsEndTm.setDescription('Call End Time.')
isgVGIsdnPRICCStatsTbl = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 9, 1, 3), )
if mibBuilder.loadTexts: isgVGIsdnPRICCStatsTbl.setStatus('mandatory')
if mibBuilder.loadTexts: isgVGIsdnPRICCStatsTbl.setDescription('ISDN PRI DSL Current Call Statistics Table.')
isgVGIsdnPRICCStatsTblEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 9, 1, 3, 1), ).setIndexNames((0, "ISDN-OPT-MIB", "isgVGIsdnPRICCStatsDSLNum"))
if mibBuilder.loadTexts: isgVGIsdnPRICCStatsTblEntry.setStatus('mandatory')
if mibBuilder.loadTexts: isgVGIsdnPRICCStatsTblEntry.setDescription('PRI Current Call Statistics Table Entries.')
isgVGIsdnPRICCStatsDSLNum = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 9, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isgVGIsdnPRICCStatsDSLNum.setStatus('mandatory')
if mibBuilder.loadTexts: isgVGIsdnPRICCStatsDSLNum.setDescription('Digital Service Loop Number.')
isgVGIsdnPRICCStatsSwtchType = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 9, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("priUnspecifiedStype", 1), ("priNi2Stype", 2), ("pri5essStype", 3), ("priDms100Stype", 4), ("priNttStype", 5), ("priTs014Stype", 6), ("priEtsiStype", 7), ("priQsigMStype", 8), ("priQsigSStype", 9), ("priT1QsigMStype", 10), ("priT1QsigSStype", 11), ("unsupported", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isgVGIsdnPRICCStatsSwtchType.setStatus('mandatory')
if mibBuilder.loadTexts: isgVGIsdnPRICCStatsSwtchType.setDescription('Switch Type. bri1tr6Stype : German National ISDN. priNi2Stype : National ISDN version 2. pri5essStype : AT&T switch priDms100Stype : DMS 100. priNttStype : Japanese National ISDN. priTs014Stype : Australian National ISDN. priEtsiStype : Euro ISDB BRI (NET3). priQsigMStype : Master Side QSIG PBX. priQsigSStype : Slave Side QSIG PBX. priT1QsigMStype : T1 Master Side QSIG PBX. priT1QsigSStype : T1 Slave Side QSIG PBX. unsupported : Unsupported Switch Type.')
isgVGIsdnPRICCStatsDChannelState = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 9, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dChannelUp", 1), ("dChannelDown", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isgVGIsdnPRICCStatsDChannelState.setStatus('mandatory')
if mibBuilder.loadTexts: isgVGIsdnPRICCStatsDChannelState.setDescription('D Channel Status. dChannelUp : D Channel Up. dChannelDown : D Channel Down. unknown : Loop Test State.')
isgVGIsdnBootChannel = MibScalar((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("boot", 1), ("noBoot", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: isgVGIsdnBootChannel.setStatus('mandatory')
if mibBuilder.loadTexts: isgVGIsdnBootChannel.setDescription('Boot the ISDN channels.')
mibBuilder.exportSymbols("ISDN-OPT-MIB", isgVGIsdnCfgFirstOutDialNum1=isgVGIsdnCfgFirstOutDialNum1, isgVGIsdnPRICCStatsSwtchType=isgVGIsdnPRICCStatsSwtchType, isgVGIsdnCfgFirstBChanPort=isgVGIsdnCfgFirstBChanPort, isgVGIsdnCCStatsTrmTei=isgVGIsdnCCStatsTrmTei, isgVGIsdnCCStatsCallStatus=isgVGIsdnCCStatsCallStatus, isgVGIsdnCfgSecondDN=isgVGIsdnCfgSecondDN, isgVGIsdnCfgFirstCallDisablSTm=isgVGIsdnCfgFirstCallDisablSTm, isgVGIsdnCfgSecondSPBU=isgVGIsdnCfgSecondSPBU, isgVGIsdnCHStatsAsscPort=isgVGIsdnCHStatsAsscPort, isgVGIsdnCfgFirstNumCallRetries=isgVGIsdnCfgFirstNumCallRetries, isgVGIsdnCfgSecondTEI=isgVGIsdnCfgSecondTEI, isgVGIsdnCfgSecondOutDialNum1=isgVGIsdnCfgSecondOutDialNum1, isgVGIsdnPRICCStatsDSLNum=isgVGIsdnPRICCStatsDSLNum, isgVGIsdnCfgChanType=isgVGIsdnCfgChanType, isgVGIsdnCfgFirstSPBUTmOut=isgVGIsdnCfgFirstSPBUTmOut, isgVGIsdnCfgSwitchType=isgVGIsdnCfgSwitchType, isgVGIsdnCfgDSPID=isgVGIsdnCfgDSPID, isgVGIsdnCfgSecondRate=isgVGIsdnCfgSecondRate, isgVGIsdnCCStatsLineSpeed=isgVGIsdnCCStatsLineSpeed, isgVGIsdnCfgFirstSubAddr=isgVGIsdnCfgFirstSubAddr, isgVGIsdnPRICCStatsDChannelState=isgVGIsdnPRICCStatsDChannelState, isgVGIsdnCfgSecondCallPerm=isgVGIsdnCfgSecondCallPerm, isgVGIsdnCfgSecondCallDisablSTm=isgVGIsdnCfgSecondCallDisablSTm, isgVGIsdnCfgSecondChanPort=isgVGIsdnCfgSecondChanPort, isgVGIsdnCfgFirstSPBUOpt=isgVGIsdnCfgFirstSPBUOpt, isgVGIsdnCfgDPckTraffic=isgVGIsdnCfgDPckTraffic, isgVGIsdnCCStatsTblEntry=isgVGIsdnCCStatsTblEntry, isgVGIsdnCCStatsTrmStatus=isgVGIsdnCCStatsTrmStatus, isgVGIsdnCfgFirstTEI=isgVGIsdnCfgFirstTEI, isgVGIsdnCfgEntryNum=isgVGIsdnCfgEntryNum, isgVGIsdnCfgFirstCallEnablSTm=isgVGIsdnCfgFirstCallEnablSTm, isgVGIsdnCHStatsSession=isgVGIsdnCHStatsSession, isgVGIsdnCfgFirstCallPerm=isgVGIsdnCfgFirstCallPerm, isgVGIsdnCfgDChanPort=isgVGIsdnCfgDChanPort, isgVGIsdnCfgFirstPlainOldTelSet=isgVGIsdnCfgFirstPlainOldTelSet, isgVGIsdnCfgSecondSPBUOpt=isgVGIsdnCfgSecondSPBUOpt, isgVGIsdnCCStatsCallgAddr=isgVGIsdnCCStatsCallgAddr, isgVGIsdnCfgSecondSubAddr=isgVGIsdnCfgSecondSubAddr, cdx6500CfgGeneralGroup=cdx6500CfgGeneralGroup, isgVGIsdnCHStatsDirection=isgVGIsdnCHStatsDirection, isgVGIsdnCHStatsNumCalld=isgVGIsdnCHStatsNumCalld, isgVGIsdnCfgFirstChSelect=isgVGIsdnCfgFirstChSelect, isgVGIsdnCfgFirstDialRetryIntrvl=isgVGIsdnCfgFirstDialRetryIntrvl, isgIsdnCfgGroup=isgIsdnCfgGroup, isgVGIsdnCfgSecondDialRetryIntrvl=isgVGIsdnCfgSecondDialRetryIntrvl, isgVGIsdnCCStatsAccType=isgVGIsdnCCStatsAccType, isgVGIsdnStats=isgVGIsdnStats, isgVGIsdnCCStatsCalldAddr=isgVGIsdnCCStatsCalldAddr, isgVGIsdnCCStatsDirection=isgVGIsdnCCStatsDirection, isgVGIsdnCHStatsLineSpeed=isgVGIsdnCHStatsLineSpeed, isgVGIsdnCHStatsCauseCode=isgVGIsdnCHStatsCauseCode, cdx6500StatOtherStatsGroup=cdx6500StatOtherStatsGroup, isgVGIsdnPRICCStatsTbl=isgVGIsdnPRICCStatsTbl, isgVGIsdnCCStatsChType=isgVGIsdnCCStatsChType, isgVGIsdnCCStatsCallStarted=isgVGIsdnCCStatsCallStarted, isgVGIsdnCHStatsTbl=isgVGIsdnCHStatsTbl, isgVGIsdnBootChannel=isgVGIsdnBootChannel, DisplayString=DisplayString, isgVGIsdnCHStatsChType=isgVGIsdnCHStatsChType, isgVGIsdnCfgFirstRate=isgVGIsdnCfgFirstRate, isgVGIsdnCCStatsCauseCode=isgVGIsdnCCStatsCauseCode, isgVGIsdnCfgDChanTEI=isgVGIsdnCfgDChanTEI, isgVGIsdnCCStatsSwtchType=isgVGIsdnCCStatsSwtchType, isgVGIsdnCfgChanTableEntry=isgVGIsdnCfgChanTableEntry, isgVGIsdnCHStatsTblEntry=isgVGIsdnCHStatsTblEntry, isgVGIsdnCfgFirstDN=isgVGIsdnCfgFirstDN, isgVGIsdnCfgSecondCallEnablSTm=isgVGIsdnCfgSecondCallEnablSTm, isgVGIsdnCfgSecondOutDialNum2=isgVGIsdnCfgSecondOutDialNum2, cdx6500Controls=cdx6500Controls, cdx6500=cdx6500, isgVGIsdnPRICCStatsTblEntry=isgVGIsdnPRICCStatsTblEntry, cdxProductSpecific=cdxProductSpecific, isgVGIsdnCCStatsDSLNum=isgVGIsdnCCStatsDSLNum, isgVGIsdnCCStatsSubaddr=isgVGIsdnCCStatsSubaddr, isgVGIsdnCHStatsEndTm=isgVGIsdnCHStatsEndTm, isgVGIsdnCfgSecondSPID=isgVGIsdnCfgSecondSPID, isgVGIsdnCfgSecondChSelect=isgVGIsdnCfgSecondChSelect, isgVGIsdnCfgSecondPlainOldTelSet=isgVGIsdnCfgSecondPlainOldTelSet, isgIsdnStatsGroup=isgIsdnStatsGroup, cdx6500Configuration=cdx6500Configuration, isgVGIsdnCfgSecondNumCallRetries=isgVGIsdnCfgSecondNumCallRetries, codex=codex, isgVGIsdnCCStatsTbl=isgVGIsdnCCStatsTbl, isgVGIsdnCHStatsDSLNum=isgVGIsdnCHStatsDSLNum, isgVGIsdnCfgChanTable=isgVGIsdnCfgChanTable, isgVGIsdnCfgFirstAccType=isgVGIsdnCfgFirstAccType, isgVGIsdnCCStatsPortConn=isgVGIsdnCCStatsPortConn, isgVGIsdnCfgFirstOutDialNum2=isgVGIsdnCfgFirstOutDialNum2, isgVGIsdnCCStatsTEI=isgVGIsdnCCStatsTEI, cdx6500Statistics=cdx6500Statistics, isgVGIsdnCfgFirstSPBU=isgVGIsdnCfgFirstSPBU, isgVGIsdnCfgFirstSPID=isgVGIsdnCfgFirstSPID, isgVGIsdnCCStatsDChanStatus=isgVGIsdnCCStatsDChanStatus, isgVGIsdnCfgDChanDN=isgVGIsdnCfgDChanDN, isgVGIsdnCfgSecondSPBUTmOut=isgVGIsdnCfgSecondSPBUTmOut, isgIsdnCtrlGroup=isgIsdnCtrlGroup, isgVGIsdnCfgSecondAccType=isgVGIsdnCfgSecondAccType, isgVGIsdnCHStatsStrtTm=isgVGIsdnCHStatsStrtTm, isgVGIsdnCCStatsL1State=isgVGIsdnCCStatsL1State)
