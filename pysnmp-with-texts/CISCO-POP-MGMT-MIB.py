#
# PySNMP MIB module CISCO-POP-MGMT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-POP-MGMT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:09:39 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection")
ciscoExperiment, = mibBuilder.importSymbols("CISCO-SMI", "ciscoExperiment")
dsx1LineIndex, dsx1LineStatus = mibBuilder.importSymbols("DS1-MIB", "dsx1LineIndex", "dsx1LineStatus")
InterfaceIndexOrZero, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
NotificationType, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, TimeTicks, Gauge32, Counter64, ObjectIdentity, MibIdentifier, Integer32, Bits, Counter32, Unsigned32, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "TimeTicks", "Gauge32", "Counter64", "ObjectIdentity", "MibIdentifier", "Integer32", "Bits", "Counter32", "Unsigned32", "ModuleIdentity")
DisplayString, TimeStamp, TextualConvention, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TimeStamp", "TextualConvention", "TruthValue")
ciscoPopMgmtMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 10, 19))
ciscoPopMgmtMIB.setRevisions(('2005-12-21 00:00', '2002-12-26 00:00', '2000-11-29 00:00', '2000-03-03 00:00', '1998-02-02 00:00', '1997-10-21 00:00', '1997-05-01 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoPopMgmtMIB.setRevisionsDescriptions(('Imported dsx1LineIndex from DS1-MIB instead of RFC1406-MIB Changed SYNTAX of cpmDS1SlotIndex cpmDS1PortIndex cpmChannelIndex cpmDS1UsageSlotIndex cpmDS1UsagePortIndex cpmActiveCallSummaryIndex cpmCallHistorySummaryIndex cpmActiveModemSlot cpmActiveModemPort cpmActiveEntrySlot cpmActiveEntryPort cpmActiveEntryChannel from Integer32 to Integer32 (0..2147483647) Imported Unsigned32 from SNMPv2-SMI instead of CISCO-TC.', 'Added voice(6) to object cpmCallType. Added Notification Group cpmNotificationGroupRev1', 'Added cpmCallVolume with objects: cpmCallVolSuccISDNDigital cpmCallVolAnalogCallClearedNormally', 'Extended cpmDs1DS0UsageTable with objects: cpmDS1TotalAnalogCalls cpmDS1TotalDigitalCalls cpmDS1TotalV110Calls cpmDS1TotalV120Calls cpmDS1TotalCalls cpmDS1TotalTimeInUse cpmDS1CurrentIdle cpmDS1CurrentOutOfService cpmDS1CurrentBusyout cpmDS1InOctets cpmDS1OutOctets cpmDS1InPackets cpmDS1OutPackets Added system level summary objects: cpmISDNCfgActiveDChannels cpmISDNCfgBChannelsTimeInUse cpmISDNCfgBChannelsTimeInUseAnalog cpmISDNCfgBChannelCalls cpmISDNCfgBChannelAnalogCalls cpmTotalISDNSyncPPPCalls Added DS0StatusTable with objects: cpmDS0OperStatus cpmDS0BusyoutAdminStatus cpmDS0BusyoutAllow cpmDS0BusyoutStatus cpmDS0BusyoutSource cpmDS0BusyoutTime cpmDS0ConfigFunction cpmDS0InterfaceIndex Added busyout notification and notification enable object: cpmDS0BusyoutNotification cpmDS0BusyoutNotifyEnable cpmDS1LoopbackNotifyConfig cpmDS1LoopbackNotifyEnable cpmDS1LoopbackNotification ', 'Added objects: cpmISDNCfgBChanInUseForVoice cpmCASCfgBChanInUseForVoice Added enumeration-type: voice', 'Added objects: cpmDS1DS0UsageTable cpmActiveDS0sHighWaterMark cpmSW56CfgBChannelsInUse', 'Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoPopMgmtMIB.setLastUpdated('200512210000Z')
if mibBuilder.loadTexts: ciscoPopMgmtMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoPopMgmtMIB.setContactInfo(' Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-apm@cisco.com')
if mibBuilder.loadTexts: ciscoPopMgmtMIB.setDescription('Cisco Point Of Presence Management MIB to provide DSX1 and DSX0 facilities management and call summaries.')
ciscoPopMgmtMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 19, 1))
cpmDS0Usage = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 19, 1, 1))
cpmCallFailure = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 19, 1, 2))
cpmActiveCallSummary = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 19, 1, 3))
cpmCallHistorySummary = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 19, 1, 4))
cpmDS0Status = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 19, 1, 5))
cpmDS1LoopbackNotifyConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 19, 1, 6))
cpmCallVolume = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 19, 1, 7))
cpmDS0UsageTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 19, 1, 1, 1), )
if mibBuilder.loadTexts: cpmDS0UsageTable.setStatus('current')
if mibBuilder.loadTexts: cpmDS0UsageTable.setDescription('The DS0 usage table is for hardware and software objects not used as interfaces, and not covered in rfc1213. These objects include analog calls coming over ISDN, Channelized T1, and Channelized E1. This table is created for every DS1 line in the device.')
cpmDS0UsageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 19, 1, 1, 1, 1), ).setIndexNames((0, "CISCO-POP-MGMT-MIB", "cpmDS1SlotIndex"), (0, "CISCO-POP-MGMT-MIB", "cpmDS1PortIndex"), (0, "CISCO-POP-MGMT-MIB", "cpmChannelIndex"))
if mibBuilder.loadTexts: cpmDS0UsageEntry.setStatus('current')
if mibBuilder.loadTexts: cpmDS0UsageEntry.setDescription('An entry in the DS0 Usage table.')
cpmDS1SlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 19, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: cpmDS1SlotIndex.setStatus('current')
if mibBuilder.loadTexts: cpmDS1SlotIndex.setDescription('The slot index indicates the slot number on the device where the DS1 card resides.')
cpmDS1PortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 19, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: cpmDS1PortIndex.setStatus('current')
if mibBuilder.loadTexts: cpmDS1PortIndex.setDescription('The port index indicates the port number of a specific DS1 on the DS1 card in the slot')
cpmChannelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 19, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: cpmChannelIndex.setStatus('current')
if mibBuilder.loadTexts: cpmChannelIndex.setDescription('The channel index that distinguishes the DS0 timeslot of the DS1 port. The range of the channel index is based on the number of T1/E1 channels: 1-24(T1) and 1-31(E1).')
cpmConfiguredType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 19, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("isdn", 2), ("ct1", 3), ("ce1", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmConfiguredType.setStatus('current')
if mibBuilder.loadTexts: cpmConfiguredType.setDescription('The configured technology for the channel: ISDN(2), Channelized T1 (3) or Channelized E1 (4).')
cpmDS0CallType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 19, 1, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("idle", 1), ("unknown", 2), ("analog", 3), ("digital", 4), ("v110", 5), ("v120", 6), ("voice", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmDS0CallType.setStatus('current')
if mibBuilder.loadTexts: cpmDS0CallType.setDescription('The type of the current call carried by this DS0. idle - This DS0 is currently idle. unknown - The data type of the call currently occupying this DS0 is not one of the types listed here. analog - The data type of the call currently occupying this DS0 is analog, i.e. a modem call. digital - The data type of the call currently occupying this DS0 is digital. v110 - The call currently occupying this DS0 is a V110 call. v120 - The call currently occupying this DS0 is a V120 call. voice - The call currently occupying this DS0 is a voice call.')
cpmL2Encapsulation = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 19, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("idle", 1), ("unknown", 2), ("ppp", 3), ("slip", 4), ("arap", 5), ("hdlc", 6), ("exec", 7), ("voice", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmL2Encapsulation.setStatus('current')
if mibBuilder.loadTexts: cpmL2Encapsulation.setDescription('The data link encapsulation of the call currently occuppying this DS0: idle - This DS0 is currently idle. unknown - The encapsulation of the currently active call on this DS0 is not one of the options following. PPP - slip - arap - hdlc - exec - voice - voice encapsulation; IANA type voiceEncap(103)')
cpmCallCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 19, 1, 1, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmCallCount.setStatus('current')
if mibBuilder.loadTexts: cpmCallCount.setDescription('The number of calls that have occupied this DS0.')
cpmTimeInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 19, 1, 1, 1, 1, 8), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmTimeInUse.setStatus('current')
if mibBuilder.loadTexts: cpmTimeInUse.setDescription('The amount of time that this DS0 has been in use. This is computed by summing up the call durations of all past calls that have occupied this DS0.')
cpmInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 19, 1, 1, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmInOctets.setStatus('current')
if mibBuilder.loadTexts: cpmInOctets.setDescription("The total number of octets received on this DS0 for data calls (cpmDS0CallType has the value 'analog(3)' or 'digital(4)' or 'v110(5)' or 'v120(6)'). All the received 'raw' octets are counted, including any protocol headers which may or may not be present, depending on the service type of data call.")
cpmOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 19, 1, 1, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmOutOctets.setStatus('current')
if mibBuilder.loadTexts: cpmOutOctets.setDescription("The total number of octets transmitted on this DS0 for data calls (cpmDS0CallType has the value 'analog(3)' or 'digital(4)' or 'v110(5)' or 'v120(6)'). All the transmitted 'raw' octets are counted, including any protocol headers which may or may not be present, depending on the service type of data call.")
cpmInPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 19, 1, 1, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmInPackets.setStatus('current')
if mibBuilder.loadTexts: cpmInPackets.setDescription("The total number of packets received on this DS0 for data calls (cpmDS0CallTyp has the value 'analog(3)' or 'digital(4)' or 'v110(5)' or 'v120(6)').")
cpmOutPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 19, 1, 1, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmOutPackets.setStatus('current')
if mibBuilder.loadTexts: cpmOutPackets.setDescription("The total number of packets transmitted on this DS0 for data calls (cpmDS0CallTyp has the value 'analog(3)' or 'digital(4)' or 'v110(5)' or 'v120(6)').")
cpmAssociatedInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 19, 1, 1, 1, 1, 13), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmAssociatedInterface.setStatus('current')
if mibBuilder.loadTexts: cpmAssociatedInterface.setDescription('This is the value of ifIndex when the specific channel has an active call with a corresponding interface in the ifTable. For example, a digital ISDN call has a value pointing to the B-Channel entry in the ifTable. A modem call over ISDN or CT1/CE1 has a value pointing to the async interface of the modem assigned to this call. If the channel is idle, this value is 0.')
cpmISDNCfgBChanInUseForAnalog = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 19, 1, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmISDNCfgBChanInUseForAnalog.setStatus('current')
if mibBuilder.loadTexts: cpmISDNCfgBChanInUseForAnalog.setDescription('The number of configured ISDN B-Channels that are currently occupied by analog calls.')
cpmISDNCfgBChannelsInUse = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 19, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmISDNCfgBChannelsInUse.setStatus('current')
if mibBuilder.loadTexts: cpmISDNCfgBChannelsInUse.setDescription('The number of configured ISDN B-Channels that are currently occupied by both Digital and Analog calls.')
cpmActiveDS0s = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 19, 1, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmActiveDS0s.setStatus('current')
if mibBuilder.loadTexts: cpmActiveDS0s.setDescription('The number of DS0s that are currently in use.')
cpmPPPCalls = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 19, 1, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmPPPCalls.setStatus('current')
if mibBuilder.loadTexts: cpmPPPCalls.setDescription('The current number of active PPP calls received by the managed device')
cpmV120Calls = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 19, 1, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmV120Calls.setStatus('current')
if mibBuilder.loadTexts: cpmV120Calls.setDescription('The current number of active V.120 calls received by the managed device')
cpmV110Calls = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 19, 1, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmV110Calls.setStatus('current')
if mibBuilder.loadTexts: cpmV110Calls.setDescription('The current number of active V.110 calls received by the managed device')
cpmActiveDS0sHighWaterMark = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 19, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmActiveDS0sHighWaterMark.setStatus('current')
if mibBuilder.loadTexts: cpmActiveDS0sHighWaterMark.setDescription('The high water mark for number of DS0s that are active simultaneously')
cpmDS1DS0UsageTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 19, 1, 1, 9), )
if mibBuilder.loadTexts: cpmDS1DS0UsageTable.setStatus('current')
if mibBuilder.loadTexts: cpmDS1DS0UsageTable.setDescription('The DS1-DS0-usage table is for hardware and software objects not used as interfaces, and not covered in rfc1213. These objects provide information on timeslots usage for a particular DS1.')
cpmDS1DS0UsageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 19, 1, 1, 9, 1), ).setIndexNames((0, "CISCO-POP-MGMT-MIB", "cpmDS1UsageSlotIndex"), (0, "CISCO-POP-MGMT-MIB", "cpmDS1UsagePortIndex"))
if mibBuilder.loadTexts: cpmDS1DS0UsageEntry.setStatus('current')
if mibBuilder.loadTexts: cpmDS1DS0UsageEntry.setDescription('An entry in the DS0 Usage table.')
cpmDS1UsageSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 19, 1, 1, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: cpmDS1UsageSlotIndex.setStatus('current')
if mibBuilder.loadTexts: cpmDS1UsageSlotIndex.setDescription('The slot index indicates the slot number on the device where the DS1 card resides. The slot index of the first slot is starting from 0 and increment by 1 for the next slot in the device.')
cpmDS1UsagePortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 19, 1, 1, 9, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: cpmDS1UsagePortIndex.setStatus('current')
if mibBuilder.loadTexts: cpmDS1UsagePortIndex.setDescription('The port index indicates the port number of a specific DS1 on the DS1 card in the slot. The port index of the first port is starting from 0 and increment by 1 for the next port on the DS1 card.')
cpmDS1ActiveDS0s = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 19, 1, 1, 9, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmDS1ActiveDS0s.setStatus('current')
if mibBuilder.loadTexts: cpmDS1ActiveDS0s.setDescription('The number of DS0s that are currently in use for a particular DS1.')
cpmDS1ActiveDS0sHighWaterMark = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 19, 1, 1, 9, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmDS1ActiveDS0sHighWaterMark.setStatus('current')
if mibBuilder.loadTexts: cpmDS1ActiveDS0sHighWaterMark.setDescription('The highest number of simultaneously actived DS0s on a specified DS1.')
cpmDS1TotalAnalogCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 19, 1, 1, 9, 1, 5), Counter32()).setUnits('calls').setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmDS1TotalAnalogCalls.setStatus('current')
if mibBuilder.loadTexts: cpmDS1TotalAnalogCalls.setDescription("The accumulated number of analog data calls (cpmDS0CallType has the value 'analog(3)') on all ds0s within this DS1 since system startup. The object includes active and terminated calls.")
cpmDS1TotalDigitalCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 19, 1, 1, 9, 1, 6), Counter32()).setUnits('calls').setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmDS1TotalDigitalCalls.setStatus('current')
if mibBuilder.loadTexts: cpmDS1TotalDigitalCalls.setDescription("The accumulated number of digital data calls (cpmDS0CallType has the value 'digital(4)') on all ds0s within this DS1 since system startup. The object includes active and terminated calls.")
cpmDS1TotalV110Calls = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 19, 1, 1, 9, 1, 7), Counter32()).setUnits('calls').setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmDS1TotalV110Calls.setStatus('current')
if mibBuilder.loadTexts: cpmDS1TotalV110Calls.setDescription("The accumulated number of v.110 data calls (cpmDS0CallType has the value 'v110(5)') on all ds0s within this DS1 since system startup. The object includes active and terminated calls.")
cpmDS1TotalV120Calls = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 19, 1, 1, 9, 1, 8), Counter32()).setUnits('calls').setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmDS1TotalV120Calls.setStatus('current')
if mibBuilder.loadTexts: cpmDS1TotalV120Calls.setDescription("The accumulated number of v.120 data calls (cpmDS0CallType has the value 'v120(6)') on all ds0s within this DS1 since system startup. The object includes active and terminated calls.")
cpmDS1TotalCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 19, 1, 1, 9, 1, 9), Counter32()).setUnits('calls').setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmDS1TotalCalls.setStatus('current')
if mibBuilder.loadTexts: cpmDS1TotalCalls.setDescription('The total number of calls on all the DS0s within this DS1 since last system re-initialization. The object includes active and terminated calls. This only includes DS0s configured as bearer channels, not those configured for signaling, such as PRI D-channel.')
cpmDS1TotalTimeInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 19, 1, 1, 9, 1, 10), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmDS1TotalTimeInUse.setStatus('current')
if mibBuilder.loadTexts: cpmDS1TotalTimeInUse.setDescription('The total call duration on all the DS0s within this DS1 since last system re-initialization. This only includes DS0s configured as bearer channels, not those configured for signaling, such as PRI D-channel.')
cpmDS1CurrentIdle = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 19, 1, 1, 9, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmDS1CurrentIdle.setStatus('current')
if mibBuilder.loadTexts: cpmDS1CurrentIdle.setDescription('The total number of DS0s currently in idle state within this DS1. This only includes DS0s configured as bearer and CAS channels, not those configured for signaling, such as PRI D-channel. See cpmDS0OperStatus in the cpmDS0StatusTable for individual DS0s.')
cpmDS1CurrentOutOfService = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 19, 1, 1, 9, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmDS1CurrentOutOfService.setStatus('current')
if mibBuilder.loadTexts: cpmDS1CurrentOutOfService.setDescription('The total number of DS0s in this DS1 currently placed out of service. This only includes DS0s configured as bearer and CAS channels, not those configured for signaling, such as PRI D-channel. See cpmDS0OperStatus in the cpmDS0StatusTable for individual DS0s.')
cpmDS1CurrentBusyout = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 19, 1, 1, 9, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmDS1CurrentBusyout.setStatus('current')
if mibBuilder.loadTexts: cpmDS1CurrentBusyout.setDescription('The total number of DS0s in this DS1 which currently have been requested to be busied out, but are not yet out of service. When an active call on a busied out DS0 terminates, the DS0 will be out of service, this object will be decremented and cpmDS1TotalOutOfService will be incremented. This only includes DS0s configured as bearer channels, not those configured for signaling, such as PRI D-channel. See cpmDS0AdminStatus in the cpmDS0StatusTable for individual DS0s.')
cpmDS1InOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 19, 1, 1, 9, 1, 14), Counter32()).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmDS1InOctets.setStatus('current')
if mibBuilder.loadTexts: cpmDS1InOctets.setDescription('The total number of octets received over all the DS0 bearer channels within this DS1 since last system re-initialization. This value is a sum of all the cpmInOctets objects in the cpmDS0UsageTable for this DS1.')
cpmDS1OutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 19, 1, 1, 9, 1, 15), Counter32()).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmDS1OutOctets.setStatus('current')
if mibBuilder.loadTexts: cpmDS1OutOctets.setDescription('The total number of octets transmitted over all the DS0 bearer channels within this DS1 since last system re-initialization. This value is a sum of all the cpmOutOctets objects in the cpmDS0UsageTable for this DS1.')
cpmDS1InPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 19, 1, 1, 9, 1, 16), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmDS1InPackets.setStatus('current')
if mibBuilder.loadTexts: cpmDS1InPackets.setDescription('The total number of data packets received over all the DS0 bearer channels within this DS1 since last system re-initialization. This value is a sum of all the cpmInPackets objects in the cpmDS0UsageTable for this DS1. It consists of PPP or PCM voice data packets.')
cpmDS1OutPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 19, 1, 1, 9, 1, 17), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmDS1OutPackets.setStatus('current')
if mibBuilder.loadTexts: cpmDS1OutPackets.setDescription('The total number of data packets transmitted over all the DS0 bearer channels within this DS1 since last system re-initialization. This value is a sum of all the cpmOutPackets objects in the cpmDS0UsageTable for this DS1. It consists of PPP or PCM voice data packets.')
cpmSW56CfgBChannelsInUse = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 19, 1, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmSW56CfgBChannelsInUse.setStatus('current')
if mibBuilder.loadTexts: cpmSW56CfgBChannelsInUse.setDescription('The number of configured SW56 B-Channels that are currently occupied by Digital calls.')
cpmISDNCfgBChanInUseForVoice = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 19, 1, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmISDNCfgBChanInUseForVoice.setStatus('current')
if mibBuilder.loadTexts: cpmISDNCfgBChanInUseForVoice.setDescription('The number of configured ISDN B-Channels that are currently occupied by Voice calls.')
cpmCASCfgBChanInUseForVoice = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 19, 1, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmCASCfgBChanInUseForVoice.setStatus('current')
if mibBuilder.loadTexts: cpmCASCfgBChanInUseForVoice.setDescription('The number of configured CAS Channels that are currently occupied by Voice calls.')
cpmISDNCfgActiveDChannels = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 19, 1, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmISDNCfgActiveDChannels.setStatus('current')
if mibBuilder.loadTexts: cpmISDNCfgActiveDChannels.setDescription('The number of ISDN signaling channels which are active.')
cpmISDNCfgBChannelsTimeInUse = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 19, 1, 1, 14), Counter32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmISDNCfgBChannelsTimeInUse.setStatus('current')
if mibBuilder.loadTexts: cpmISDNCfgBChannelsTimeInUse.setDescription('The total call duration on all the ISDN B-channels since last system re-initialization.')
cpmISDNCfgBChannelsTimeInUseAnlg = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 19, 1, 1, 15), Counter32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmISDNCfgBChannelsTimeInUseAnlg.setStatus('current')
if mibBuilder.loadTexts: cpmISDNCfgBChannelsTimeInUseAnlg.setDescription('The total analog call duration on all the ISDN B-channels since last system re-initialization. Analog call type is identified in cpmDS0CallType.')
cpmISDNCfgBChannelCalls = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 19, 1, 1, 16), Counter32()).setUnits('calls').setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmISDNCfgBChannelCalls.setStatus('current')
if mibBuilder.loadTexts: cpmISDNCfgBChannelCalls.setDescription('The total number of calls on all the ISDN B-channels since last system re-initialization.')
cpmISDNCfgBChannelAnalogCalls = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 19, 1, 1, 17), Counter32()).setUnits('calls').setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmISDNCfgBChannelAnalogCalls.setStatus('current')
if mibBuilder.loadTexts: cpmISDNCfgBChannelAnalogCalls.setDescription('The total number of analog calls on all the ISDN B-channels since last system re-initialization. Analog call type is identified in cpmDS0CallType.')
cpmTotalISDNSyncPPPCalls = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 19, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmTotalISDNSyncPPPCalls.setStatus('current')
if mibBuilder.loadTexts: cpmTotalISDNSyncPPPCalls.setDescription('The total number of ISDN-sync PPP calls received by the managed device since last system re-initialization.')
cpmDS0BusyoutNotifyEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 19, 1, 5, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpmDS0BusyoutNotifyEnable.setStatus('current')
if mibBuilder.loadTexts: cpmDS0BusyoutNotifyEnable.setDescription("This variable controls generation of cpmDS0BusyoutNotification. When this variable is 'true(1)', generation of cpmDS0BusyoutNotification is enabled. When this variable is 'false(2)', generation of cpmDS0BusyoutNotification is disabled. The default value is 'false(2)'. ")
cpmDS0StatusTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 19, 1, 5, 2), )
if mibBuilder.loadTexts: cpmDS0StatusTable.setStatus('current')
if mibBuilder.loadTexts: cpmDS0StatusTable.setDescription('The DS0 Status Table provides additional DS0 level information and configuration. This table is an extension of the cpmDS0UsageTable. ')
cpmDS0StatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 19, 1, 5, 2, 1), )
cpmDS0UsageEntry.registerAugmentions(("CISCO-POP-MGMT-MIB", "cpmDS0StatusEntry"))
cpmDS0StatusEntry.setIndexNames(*cpmDS0UsageEntry.getIndexNames())
if mibBuilder.loadTexts: cpmDS0StatusEntry.setStatus('current')
if mibBuilder.loadTexts: cpmDS0StatusEntry.setDescription('Status for an individual DS0. This entry AUGMENTS the cpmDS0UsageEntry. An entry exists for each configured DS0 in the system. ')
cpmDS0OperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 19, 1, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("unknown", 1), ("down", 2), ("idle", 3), ("setup", 4), ("connected", 5), ("test", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmDS0OperStatus.setStatus('current')
if mibBuilder.loadTexts: cpmDS0OperStatus.setDescription('The operational state of the DSO. This object provides more detailed information than the IF-MIB ifOperStatus. unknown - The DSO is in an unknown state down - The DS0 is out of service idle - This DS0 is currently idle setup - A new connection is in the process of being established connected - A active connection exists test - The DSO is undergoing internal testing ')
cpmDS0BusyoutAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 19, 1, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noBusyout", 1), ("busyout", 2), ("busyoutImmediate", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpmDS0BusyoutAdminStatus.setStatus('current')
if mibBuilder.loadTexts: cpmDS0BusyoutAdminStatus.setDescription('The administratively requested busyout state of the DSO. This object represents the desired busyout state of the DS0, which may or may not be reflected in the operation state, cpmDS0OperStatus. This object may be set via SNMP or the system console. noBusyout - No administrative busyout has been requested busyout - The DS0 will be shutdown when it next transitions to idle(2) cpmDS0OperStatus busyoutImmediate - Immediately transition the DS0 to down(2), terminating any current activity The effect of setting this object to busyout or busyoutImmediate is constrained by the value of cpmDS0BusyoutAllowed. If cpmDS0BusyoutAllowed has a value of false, attempting to set this object to busyout or busyoutImmediate will fail. This object provides more busyout information not available from the IF-MIB ifAdminStatus. This object reflects busyout requests configured on the local system as defined for the object cpmDS0BusyoutSource. ')
cpmDS0BusyoutAllow = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 19, 1, 5, 2, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmDS0BusyoutAllow.setStatus('current')
if mibBuilder.loadTexts: cpmDS0BusyoutAllow.setDescription('The object indicates if busyout requests for this DSO will be allowed. true - Setting cpmDS0BusyoutAdminStatus to busyout(2) or busyoutImmediate(3) will be accepted false - Busyout requests for this DS0 are not allowed The default value is true(1). If cpmDS0BusyoutAllowed has a value of false(2), attempting to set cpmDS0BusyoutAdminStatus to busyout or busyoutImmediate will fail. This object only constrains setting the value of cpmDS0BusyoutAdminStatus when cpmDS0BusyoutAdminStatus is set via SNMP. ')
cpmDS0BusyoutStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 19, 1, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noBusyout", 1), ("busyoutPending", 2), ("busiedOut", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmDS0BusyoutStatus.setStatus('current')
if mibBuilder.loadTexts: cpmDS0BusyoutStatus.setDescription('The busyout status of the DSO. noBusyout - The DS0 is not busied out nor has a busyout pending. busyoutPending - The DS0 has a busyout request pending. It will shutdown when it next transitions to idle(2) cpmDS0OperStatus. busiedOut - The DS0 is out of service due to a busyout request. This object is needed to reflect busyouts initiated other than administrativly, as described in cpmDS0BusyoutSource. ')
cpmDS0BusyoutSource = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 19, 1, 5, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("local", 2), ("internal", 3), ("remote", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmDS0BusyoutSource.setStatus('current')
if mibBuilder.loadTexts: cpmDS0BusyoutSource.setDescription('The source of the busyout request either pending or active for the DSO. none - The DS0 is not busied out nor has a busyout request pending local - The DS0 is busied out or has a pending request due to an adminstrative command issued locally. internal - The DS0 is busied out or has a pending request due to internal system processing. remote - The DS0 is busied out or has a pending request due to a request from the peer switch. ')
cpmDS0BusyoutTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 19, 1, 5, 2, 1, 6), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmDS0BusyoutTime.setStatus('current')
if mibBuilder.loadTexts: cpmDS0BusyoutTime.setDescription('Value of sysUpTime when the most recent busyout request was issued for this DS0. The value is zero indicates no busyout request has been issued. ')
cpmDS0ConfigFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 19, 1, 5, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unknown", 1), ("t1CcsSignallingChan", 2), ("t1CcsBearerChan", 3), ("e1CcsSignallingChan", 4), ("e1CcsBearerChan", 5), ("t1CasChan", 6), ("e1CasChan", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmDS0ConfigFunction.setStatus('current')
if mibBuilder.loadTexts: cpmDS0ConfigFunction.setDescription('The object indicates the function this DSO is configured to provide. This object provides more detail than cpmConfiguredType. unknown - Unknown configuration t1SignallingChan - DS0 is configured as a T1 common channel signalling (CCS) such as ISDN PRI D-channel t1CcsBearerChan - DS0 is configured as a T1 common channel signalling (CCS) bearer channel e1SignallingChan - DS0 is configured as a E1 common channel signalling (CCS) such as ISDN PRI D-channel e1CcsBearerChan - DS0 is configured as a E1 common channel signalling (CCS) bearer channel t1CasChan - DS0 is configured as a T1 channel associated signalling channel e1CasChan - DS0 is configured as a E1 channel associated signalling channel ')
cpmDS0InterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 19, 1, 5, 2, 1, 8), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmDS0InterfaceIndex.setStatus('current')
if mibBuilder.loadTexts: cpmDS0InterfaceIndex.setDescription('This is the value of ifIndex in the ifTable for this DS0.')
cpmISDNCallsRejected = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 19, 1, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmISDNCallsRejected.setStatus('current')
if mibBuilder.loadTexts: cpmISDNCallsRejected.setDescription('The number of rejected ISDN calls in this managed device.')
cpmModemCallsRejected = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 19, 1, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmModemCallsRejected.setStatus('current')
if mibBuilder.loadTexts: cpmModemCallsRejected.setDescription('The number of rejected modem calls in this managed device.')
cpmISDNCallsClearedAbnormally = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 19, 1, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmISDNCallsClearedAbnormally.setStatus('current')
if mibBuilder.loadTexts: cpmISDNCallsClearedAbnormally.setDescription('The number of connected ISDN calls that have been abnormally cleared, that is, they were cleared by some event other than the following: a - The transmission of a normal disconnect message by the local end. b - The reception of a normal disconnect message from the remote end.')
cpmModemCallsClearedAbnormally = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 19, 1, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmModemCallsClearedAbnormally.setStatus('current')
if mibBuilder.loadTexts: cpmModemCallsClearedAbnormally.setDescription('The number of connected modem calls that have been abnormally cleared, that is, they were not cleared with the proper modem protocol handshakes.')
cpmISDNNoResource = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 19, 1, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmISDNNoResource.setStatus('current')
if mibBuilder.loadTexts: cpmISDNNoResource.setDescription('The number of ISDN calls that have been rejected because there is no B-Channel available to handle the call.')
cpmModemNoResource = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 19, 1, 2, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmModemNoResource.setStatus('current')
if mibBuilder.loadTexts: cpmModemNoResource.setDescription('The number of modem calls that have been rejected because there is no modem available to handle the call.')
cpmCallVolSuccISDNDigital = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 19, 1, 7, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmCallVolSuccISDNDigital.setStatus('current')
if mibBuilder.loadTexts: cpmCallVolSuccISDNDigital.setDescription("The number of incoming and outgoing successful ISDN digital data calls (cpmDS0CallType has the value 'digital(4)'), since system startup. A successful call is a terminated call that has a disconnect cause of 'normal call clearing(16)'.")
cpmCallVolAnalogCallClearedNormally = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 19, 1, 7, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmCallVolAnalogCallClearedNormally.setStatus('current')
if mibBuilder.loadTexts: cpmCallVolAnalogCallClearedNormally.setDescription("The number of incoming and outgoing successful analog data calls which use modem resource (cpmDS0CallType has the value 'analog(3)'), since system startup. A successful call is a terminated call who is cleared by the proper modem protocol handshake.")
cpmActiveCallSummaryTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 19, 1, 3, 1), )
if mibBuilder.loadTexts: cpmActiveCallSummaryTable.setStatus('current')
if mibBuilder.loadTexts: cpmActiveCallSummaryTable.setDescription('The active call summary table is needed to track currently active calls. This table is needed because modem calls are not in CALL-HISTORY-MIB, and the DIAL-CONTROL_MIB is not yet available.')
cpmActiveCallSummaryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 19, 1, 3, 1, 1), ).setIndexNames((0, "CISCO-POP-MGMT-MIB", "cpmActiveCallStartTimeIndex"), (0, "CISCO-POP-MGMT-MIB", "cpmActiveCallSummaryIndex"))
if mibBuilder.loadTexts: cpmActiveCallSummaryEntry.setStatus('current')
if mibBuilder.loadTexts: cpmActiveCallSummaryEntry.setDescription('An entry in the Call Summary table.')
cpmActiveCallStartTimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 19, 1, 3, 1, 1, 1), TimeStamp())
if mibBuilder.loadTexts: cpmActiveCallStartTimeIndex.setStatus('current')
if mibBuilder.loadTexts: cpmActiveCallStartTimeIndex.setDescription('The start time of the current call.')
cpmActiveCallSummaryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 19, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: cpmActiveCallSummaryIndex.setStatus('current')
if mibBuilder.loadTexts: cpmActiveCallSummaryIndex.setDescription('Arbitrary small integer to distinguish calls that occured at the same time tick.')
cpmActiveUserID = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 19, 1, 3, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmActiveUserID.setStatus('current')
if mibBuilder.loadTexts: cpmActiveUserID.setDescription('The User login ID or zero length string if unavailable.')
cpmActiveUserIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 19, 1, 3, 1, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmActiveUserIpAddr.setStatus('current')
if mibBuilder.loadTexts: cpmActiveUserIpAddr.setDescription('The IP address of the call or 0.0.0.0 if unavailable. This object comes directly from IOS.')
cpmActiveCallType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 19, 1, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("unknown", 1), ("analog", 2), ("digital", 3), ("v110", 4), ("v120", 5), ("voice", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmActiveCallType.setStatus('current')
if mibBuilder.loadTexts: cpmActiveCallType.setDescription('The call type: unknown - None of the following analog - Modem call digital - Digital call v110 - V110 Call v120 - V120 Call voice - Voice Call')
cpmActiveModemSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 19, 1, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmActiveModemSlot.setStatus('current')
if mibBuilder.loadTexts: cpmActiveModemSlot.setDescription('Identification of modem resource allocated to call. This is the value of cmSlotIndex from CISCO-MODEM-MGMT-MIB. This value along with cpmActiveModemPort uniquely identifies a modem. Value is -1 if call does not utilize a modem.')
cpmActiveModemPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 19, 1, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmActiveModemPort.setStatus('current')
if mibBuilder.loadTexts: cpmActiveModemPort.setDescription('Identification of modem resource allocated to call. This is the value of cmPortIndex from CISCO-MODEM-MGMT-MIB. This value along with cpmActiveModemSlot uniquely identifies a modem. Value is -1 if call does not utilize a modem.')
cpmActiveCallDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 19, 1, 3, 1, 1, 8), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmActiveCallDuration.setStatus('current')
if mibBuilder.loadTexts: cpmActiveCallDuration.setDescription('The duration of the current call.')
cpmActiveEntrySlot = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 19, 1, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmActiveEntrySlot.setStatus('current')
if mibBuilder.loadTexts: cpmActiveEntrySlot.setDescription('The logical slot in which the DS1 line that the user connected on resides.')
cpmActiveEntryPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 19, 1, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmActiveEntryPort.setStatus('current')
if mibBuilder.loadTexts: cpmActiveEntryPort.setDescription('The logical port for the DS1 line that the user connected on.')
cpmActiveEntryChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 19, 1, 3, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmActiveEntryChannel.setStatus('current')
if mibBuilder.loadTexts: cpmActiveEntryChannel.setDescription('The channel within the DS1 that is allocated to the call.')
cpmActiveRemotePhoneNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 19, 1, 3, 1, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmActiveRemotePhoneNumber.setStatus('current')
if mibBuilder.loadTexts: cpmActiveRemotePhoneNumber.setDescription('The remote telephone number. For a call into the device, this is the originating number. For a call out of the device, this is the dialed number. If not available the string length is zero.')
cpmActiveLocalPhoneNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 19, 1, 3, 1, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmActiveLocalPhoneNumber.setStatus('current')
if mibBuilder.loadTexts: cpmActiveLocalPhoneNumber.setDescription('The local telephone number. For a call into the device, this is the dialed number. For a call out of the device, this is the originating number. If not available the string length is zero.')
cpmActiveTTYNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 19, 1, 3, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmActiveTTYNumber.setStatus('current')
if mibBuilder.loadTexts: cpmActiveTTYNumber.setDescription("The TTY number associated with this call. This information comes from the IOS 'show line' command.")
cpmCallHistorySummaryTableMaxLength = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 19, 1, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 500)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpmCallHistorySummaryTableMaxLength.setStatus('current')
if mibBuilder.loadTexts: cpmCallHistorySummaryTableMaxLength.setDescription('The upper limit on the number of entries that the cpmCallHistoryTable may contain. A value of 0 will prevent any history from being retained. When this table is full, the oldest entry will be deleted and the new one will be created.')
cpmCallHistorySummaryRetainTimer = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 19, 1, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 500)).clone(15)).setUnits('minutes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpmCallHistorySummaryRetainTimer.setStatus('current')
if mibBuilder.loadTexts: cpmCallHistorySummaryRetainTimer.setDescription('The minimum amount of time that an cpmCallHistoryEntry will be maintained before being deleted. A value of 0 will prevent any history from being retained, but will not prevent callCompletion traps being genarated.')
cpmCallHistorySummaryTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 19, 1, 4, 3), )
if mibBuilder.loadTexts: cpmCallHistorySummaryTable.setStatus('current')
if mibBuilder.loadTexts: cpmCallHistorySummaryTable.setDescription('The call history summary table is needed to track ended active calls. This table is needed because modem calls are not in CALL-HISTORY-MIB; the CISCO-ISDN-MIB objects do not contain information about the active calls; and the DIAL-CONTROL_MIB is not yet available.')
cpmCallHistorySummaryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 19, 1, 4, 3, 1), ).setIndexNames((0, "CISCO-POP-MGMT-MIB", "cpmCallDisconnectTimeIndex"), (0, "CISCO-POP-MGMT-MIB", "cpmCallStartTimeIndex"), (0, "CISCO-POP-MGMT-MIB", "cpmCallHistorySummaryIndex"))
if mibBuilder.loadTexts: cpmCallHistorySummaryEntry.setStatus('current')
if mibBuilder.loadTexts: cpmCallHistorySummaryEntry.setDescription('An entry in the Call Summary table.')
cpmCallDisconnectTimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 19, 1, 4, 3, 1, 1), TimeStamp())
if mibBuilder.loadTexts: cpmCallDisconnectTimeIndex.setStatus('current')
if mibBuilder.loadTexts: cpmCallDisconnectTimeIndex.setDescription('The disconnect time of the call.')
cpmCallStartTimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 19, 1, 4, 3, 1, 2), TimeStamp())
if mibBuilder.loadTexts: cpmCallStartTimeIndex.setStatus('current')
if mibBuilder.loadTexts: cpmCallStartTimeIndex.setDescription('The start time of the current call.')
cpmCallHistorySummaryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 19, 1, 4, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: cpmCallHistorySummaryIndex.setStatus('current')
if mibBuilder.loadTexts: cpmCallHistorySummaryIndex.setDescription('Arbitrary small integer to distinguish calls that occured at the same time tick.')
cpmUserID = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 19, 1, 4, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmUserID.setStatus('current')
if mibBuilder.loadTexts: cpmUserID.setDescription('The User login ID or zero length string if unavailable. This object comes directly from IOS.')
cpmUserIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 19, 1, 4, 3, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmUserIpAddr.setStatus('current')
if mibBuilder.loadTexts: cpmUserIpAddr.setDescription('The IP address of the call or 0.0.0.0 if unavailable. This object comes directly from IOS.')
cpmCallType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 19, 1, 4, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("unknown", 1), ("analog", 2), ("digital", 3), ("v110", 4), ("v120", 5), ("voice", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmCallType.setStatus('current')
if mibBuilder.loadTexts: cpmCallType.setDescription('The call type: unknown - None of the following analog - Modem call digital - Digital call v110 - V110 Call v120 - V120 Call voice - Voice Call')
cpmModemSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 19, 1, 4, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmModemSlot.setStatus('current')
if mibBuilder.loadTexts: cpmModemSlot.setDescription('Identification of modem resource allocated to call. This is the value of cmSlotIndex from CISCO-MODEM-MGMT-MIB. This value along with cpmModemPort uniquely identifies a modem. Value is -1 if call does not utilize a modem.')
cpmModemPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 19, 1, 4, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmModemPort.setStatus('current')
if mibBuilder.loadTexts: cpmModemPort.setDescription('Identification of modem resource allocated to call. This is the value of cmPortIndex from CISCO-MODEM-MGMT-MIB. This value along with cpmModemSlot uniquely identifies a modem. Value is -1 if call does not utilize a modem.')
cpmCallDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 19, 1, 4, 3, 1, 9), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmCallDuration.setStatus('current')
if mibBuilder.loadTexts: cpmCallDuration.setDescription('The duration of the current call.')
cpmEntrySlot = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 19, 1, 4, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmEntrySlot.setStatus('current')
if mibBuilder.loadTexts: cpmEntrySlot.setDescription('The physical system slot in which the DS1 line that the user connected on resides.')
cpmEntryPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 19, 1, 4, 3, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmEntryPort.setStatus('current')
if mibBuilder.loadTexts: cpmEntryPort.setDescription('The logical port for the DS1 line that the user connected on.')
cpmEntryChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 19, 1, 4, 3, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmEntryChannel.setStatus('current')
if mibBuilder.loadTexts: cpmEntryChannel.setDescription('The channel within the DS1 that is allocated to the call.')
cpmRemotePhoneNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 19, 1, 4, 3, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmRemotePhoneNumber.setStatus('current')
if mibBuilder.loadTexts: cpmRemotePhoneNumber.setDescription('The remote telephone number. For a call into the device, this is the originating number. For a call out of the device, this is the dialed number. If not available the string length is zero.')
cpmLocalPhoneNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 19, 1, 4, 3, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmLocalPhoneNumber.setStatus('current')
if mibBuilder.loadTexts: cpmLocalPhoneNumber.setDescription('The local telephone number. For a call into the device, this is the dialed number. For a call out of the device, this is the originating number. If not available the string length is zero.')
cpmTTYNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 19, 1, 4, 3, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmTTYNumber.setStatus('current')
if mibBuilder.loadTexts: cpmTTYNumber.setDescription("The TTY number associated with this call. This information comes from the IOS 'show line' command.")
cpmDS1LoopbackNotifyEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 19, 1, 6, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpmDS1LoopbackNotifyEnable.setStatus('current')
if mibBuilder.loadTexts: cpmDS1LoopbackNotifyEnable.setDescription("This variable controls the generation of cpmDS1LoopbackNotification When this variable is 'true(1)', generation of these notification is enabled. When this variable is 'false(2)', generation is disabled The default value is 'false(2)'. ")
cPopMgmtMIBNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 19, 2))
cpmNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 19, 2, 0))
cpmDS0BusyoutNotification = NotificationType((1, 3, 6, 1, 4, 1, 9, 10, 19, 2, 0, 1)).setObjects(("CISCO-POP-MGMT-MIB", "cpmDS0BusyoutStatus"), ("CISCO-POP-MGMT-MIB", "cpmDS0BusyoutTime"), ("CISCO-POP-MGMT-MIB", "cpmDS0BusyoutSource"), ("CISCO-POP-MGMT-MIB", "cpmDS0InterfaceIndex"))
if mibBuilder.loadTexts: cpmDS0BusyoutNotification.setStatus('current')
if mibBuilder.loadTexts: cpmDS0BusyoutNotification.setDescription('This notification is sent when there is a state change in cpmDS0BusyoutStatus object.')
cpmDS1LoopbackNotification = NotificationType((1, 3, 6, 1, 4, 1, 9, 10, 19, 2, 0, 2)).setObjects(("DS1-MIB", "dsx1LineStatus"), ("DS1-MIB", "dsx1LineIndex"))
if mibBuilder.loadTexts: cpmDS1LoopbackNotification.setStatus('current')
if mibBuilder.loadTexts: cpmDS1LoopbackNotification.setDescription('This notification is sent when there is a state change in dsx1LineStatus object of RFC1406-MIB.')
cpmMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 19, 3))
cpmMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 19, 3, 1))
cpmMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 19, 3, 2))
cpmMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 10, 19, 3, 1, 1)).setObjects(("CISCO-POP-MGMT-MIB", "cpmDS0UsageGroup"), ("CISCO-POP-MGMT-MIB", "cpmCallFailureGroup"), ("CISCO-POP-MGMT-MIB", "cpmActiveCallSummaryGroup"), ("CISCO-POP-MGMT-MIB", "cpmCallHistorySummaryGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpmMIBCompliance = cpmMIBCompliance.setStatus('obsolete')
if mibBuilder.loadTexts: cpmMIBCompliance.setDescription('The compliance statement used in a PoPM Stack, which implement the Cisco PoP Management MIB')
cpmMIBComplianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 10, 19, 3, 1, 2)).setObjects(("CISCO-POP-MGMT-MIB", "cpmDS0UsageGroupRev1"), ("CISCO-POP-MGMT-MIB", "cpmCallFailureGroup"), ("CISCO-POP-MGMT-MIB", "cpmActiveCallSummaryGroup"), ("CISCO-POP-MGMT-MIB", "cpmCallHistorySummaryGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpmMIBComplianceRev1 = cpmMIBComplianceRev1.setStatus('obsolete')
if mibBuilder.loadTexts: cpmMIBComplianceRev1.setDescription('The compliance statement used in a PoPM Stack, which implement the Cisco PoP Management MIB')
cpmComplianceRev2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 10, 19, 3, 1, 3)).setObjects(("CISCO-POP-MGMT-MIB", "cpmDS0UsageGroupRev2"), ("CISCO-POP-MGMT-MIB", "cpmCallFailureGroup"), ("CISCO-POP-MGMT-MIB", "cpmActiveCallSummaryGroup"), ("CISCO-POP-MGMT-MIB", "cpmCallHistorySummaryGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpmComplianceRev2 = cpmComplianceRev2.setStatus('obsolete')
if mibBuilder.loadTexts: cpmComplianceRev2.setDescription('The compliance statement used in a PoPM Stack, which implement the Cisco PoP Management MIB')
cpmMIBComplianceRev3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 10, 19, 3, 1, 4)).setObjects(("CISCO-POP-MGMT-MIB", "cpmDS0UsageGroupRev2"), ("CISCO-POP-MGMT-MIB", "cpmCallFailureGroup"), ("CISCO-POP-MGMT-MIB", "cpmActiveCallSummaryGroup"), ("CISCO-POP-MGMT-MIB", "cpmCallHistorySummaryGroup"), ("CISCO-POP-MGMT-MIB", "cpmDS0StatusGroup"), ("CISCO-POP-MGMT-MIB", "cpmDS1UsageGroup"), ("CISCO-POP-MGMT-MIB", "cpmSystemGroup"), ("CISCO-POP-MGMT-MIB", "cpmNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpmMIBComplianceRev3 = cpmMIBComplianceRev3.setStatus('deprecated')
if mibBuilder.loadTexts: cpmMIBComplianceRev3.setDescription('The compliance statement used in a PoPM Stack, which implement the Cisco PoP Management MIB')
cpmMIBComplianceRev4 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 10, 19, 3, 1, 5)).setObjects(("CISCO-POP-MGMT-MIB", "cpmDS0UsageGroupRev2"), ("CISCO-POP-MGMT-MIB", "cpmCallFailureGroup"), ("CISCO-POP-MGMT-MIB", "cpmActiveCallSummaryGroup"), ("CISCO-POP-MGMT-MIB", "cpmCallHistorySummaryGroup"), ("CISCO-POP-MGMT-MIB", "cpmCallVolumeGroup"), ("CISCO-POP-MGMT-MIB", "cpmDS0StatusGroup"), ("CISCO-POP-MGMT-MIB", "cpmDS1UsageGroup"), ("CISCO-POP-MGMT-MIB", "cpmSystemGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpmMIBComplianceRev4 = cpmMIBComplianceRev4.setStatus('deprecated')
if mibBuilder.loadTexts: cpmMIBComplianceRev4.setDescription('The compliance statement used in a PoPM Stack, which implement the Cisco PoP Management MIB')
cpmMIBComplianceRev5 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 10, 19, 3, 1, 6)).setObjects(("CISCO-POP-MGMT-MIB", "cpmDS0UsageGroupRev2"), ("CISCO-POP-MGMT-MIB", "cpmCallFailureGroup"), ("CISCO-POP-MGMT-MIB", "cpmActiveCallSummaryGroup"), ("CISCO-POP-MGMT-MIB", "cpmCallHistorySummaryGroup"), ("CISCO-POP-MGMT-MIB", "cpmCallVolumeGroup"), ("CISCO-POP-MGMT-MIB", "cpmDS0StatusGroup"), ("CISCO-POP-MGMT-MIB", "cpmDS1UsageGroup"), ("CISCO-POP-MGMT-MIB", "cpmSystemGroup"), ("CISCO-POP-MGMT-MIB", "cpmDS1LoopbackNotifyConfigGroup"), ("CISCO-POP-MGMT-MIB", "cpmNotificationGroupRev1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpmMIBComplianceRev5 = cpmMIBComplianceRev5.setStatus('current')
if mibBuilder.loadTexts: cpmMIBComplianceRev5.setDescription('The compliance statement used in a PoPM Stack, which implement the Cisco PoP Management MIB')
cpmDS0UsageGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 19, 3, 2, 1)).setObjects(("CISCO-POP-MGMT-MIB", "cpmConfiguredType"), ("CISCO-POP-MGMT-MIB", "cpmDS0CallType"), ("CISCO-POP-MGMT-MIB", "cpmL2Encapsulation"), ("CISCO-POP-MGMT-MIB", "cpmCallCount"), ("CISCO-POP-MGMT-MIB", "cpmTimeInUse"), ("CISCO-POP-MGMT-MIB", "cpmInOctets"), ("CISCO-POP-MGMT-MIB", "cpmOutOctets"), ("CISCO-POP-MGMT-MIB", "cpmInPackets"), ("CISCO-POP-MGMT-MIB", "cpmOutPackets"), ("CISCO-POP-MGMT-MIB", "cpmAssociatedInterface"), ("CISCO-POP-MGMT-MIB", "cpmISDNCfgBChanInUseForAnalog"), ("CISCO-POP-MGMT-MIB", "cpmISDNCfgBChannelsInUse"), ("CISCO-POP-MGMT-MIB", "cpmActiveDS0s"), ("CISCO-POP-MGMT-MIB", "cpmPPPCalls"), ("CISCO-POP-MGMT-MIB", "cpmV120Calls"), ("CISCO-POP-MGMT-MIB", "cpmV110Calls"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpmDS0UsageGroup = cpmDS0UsageGroup.setStatus('obsolete')
if mibBuilder.loadTexts: cpmDS0UsageGroup.setDescription('A collection of objects providing the analog and digital statistics for a DS1.')
cpmCallFailureGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 19, 3, 2, 2)).setObjects(("CISCO-POP-MGMT-MIB", "cpmISDNCallsRejected"), ("CISCO-POP-MGMT-MIB", "cpmModemCallsRejected"), ("CISCO-POP-MGMT-MIB", "cpmISDNCallsClearedAbnormally"), ("CISCO-POP-MGMT-MIB", "cpmModemCallsClearedAbnormally"), ("CISCO-POP-MGMT-MIB", "cpmISDNNoResource"), ("CISCO-POP-MGMT-MIB", "cpmModemNoResource"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpmCallFailureGroup = cpmCallFailureGroup.setStatus('current')
if mibBuilder.loadTexts: cpmCallFailureGroup.setDescription('A collection of objects providing aggregate totals of call failures')
cpmActiveCallSummaryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 19, 3, 2, 3)).setObjects(("CISCO-POP-MGMT-MIB", "cpmActiveUserID"), ("CISCO-POP-MGMT-MIB", "cpmActiveCallType"), ("CISCO-POP-MGMT-MIB", "cpmActiveUserIpAddr"), ("CISCO-POP-MGMT-MIB", "cpmActiveModemSlot"), ("CISCO-POP-MGMT-MIB", "cpmActiveModemPort"), ("CISCO-POP-MGMT-MIB", "cpmActiveCallDuration"), ("CISCO-POP-MGMT-MIB", "cpmActiveEntrySlot"), ("CISCO-POP-MGMT-MIB", "cpmActiveEntryPort"), ("CISCO-POP-MGMT-MIB", "cpmActiveEntryChannel"), ("CISCO-POP-MGMT-MIB", "cpmActiveRemotePhoneNumber"), ("CISCO-POP-MGMT-MIB", "cpmActiveLocalPhoneNumber"), ("CISCO-POP-MGMT-MIB", "cpmActiveTTYNumber"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpmActiveCallSummaryGroup = cpmActiveCallSummaryGroup.setStatus('current')
if mibBuilder.loadTexts: cpmActiveCallSummaryGroup.setDescription('A collection of objects providing the summary of the currently active calls.')
cpmCallHistorySummaryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 19, 3, 2, 4)).setObjects(("CISCO-POP-MGMT-MIB", "cpmCallHistorySummaryTableMaxLength"), ("CISCO-POP-MGMT-MIB", "cpmCallHistorySummaryRetainTimer"), ("CISCO-POP-MGMT-MIB", "cpmUserID"), ("CISCO-POP-MGMT-MIB", "cpmUserIpAddr"), ("CISCO-POP-MGMT-MIB", "cpmCallType"), ("CISCO-POP-MGMT-MIB", "cpmModemSlot"), ("CISCO-POP-MGMT-MIB", "cpmModemPort"), ("CISCO-POP-MGMT-MIB", "cpmCallDuration"), ("CISCO-POP-MGMT-MIB", "cpmEntrySlot"), ("CISCO-POP-MGMT-MIB", "cpmEntryPort"), ("CISCO-POP-MGMT-MIB", "cpmEntryChannel"), ("CISCO-POP-MGMT-MIB", "cpmRemotePhoneNumber"), ("CISCO-POP-MGMT-MIB", "cpmLocalPhoneNumber"), ("CISCO-POP-MGMT-MIB", "cpmTTYNumber"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpmCallHistorySummaryGroup = cpmCallHistorySummaryGroup.setStatus('current')
if mibBuilder.loadTexts: cpmCallHistorySummaryGroup.setDescription('A collection of objects providing the summary of calls that were recently terminated.')
cpmDS0UsageGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 19, 3, 2, 5)).setObjects(("CISCO-POP-MGMT-MIB", "cpmConfiguredType"), ("CISCO-POP-MGMT-MIB", "cpmDS0CallType"), ("CISCO-POP-MGMT-MIB", "cpmL2Encapsulation"), ("CISCO-POP-MGMT-MIB", "cpmCallCount"), ("CISCO-POP-MGMT-MIB", "cpmTimeInUse"), ("CISCO-POP-MGMT-MIB", "cpmInOctets"), ("CISCO-POP-MGMT-MIB", "cpmOutOctets"), ("CISCO-POP-MGMT-MIB", "cpmInPackets"), ("CISCO-POP-MGMT-MIB", "cpmOutPackets"), ("CISCO-POP-MGMT-MIB", "cpmAssociatedInterface"), ("CISCO-POP-MGMT-MIB", "cpmISDNCfgBChanInUseForAnalog"), ("CISCO-POP-MGMT-MIB", "cpmISDNCfgBChannelsInUse"), ("CISCO-POP-MGMT-MIB", "cpmActiveDS0s"), ("CISCO-POP-MGMT-MIB", "cpmPPPCalls"), ("CISCO-POP-MGMT-MIB", "cpmV120Calls"), ("CISCO-POP-MGMT-MIB", "cpmV110Calls"), ("CISCO-POP-MGMT-MIB", "cpmActiveDS0sHighWaterMark"), ("CISCO-POP-MGMT-MIB", "cpmDS1ActiveDS0s"), ("CISCO-POP-MGMT-MIB", "cpmDS1ActiveDS0sHighWaterMark"), ("CISCO-POP-MGMT-MIB", "cpmSW56CfgBChannelsInUse"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpmDS0UsageGroupRev1 = cpmDS0UsageGroupRev1.setStatus('obsolete')
if mibBuilder.loadTexts: cpmDS0UsageGroupRev1.setDescription('A collection of objects providing the analog and digital statistics for a DS1.')
cpmDS0UsageGroupRev2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 19, 3, 2, 6)).setObjects(("CISCO-POP-MGMT-MIB", "cpmConfiguredType"), ("CISCO-POP-MGMT-MIB", "cpmDS0CallType"), ("CISCO-POP-MGMT-MIB", "cpmL2Encapsulation"), ("CISCO-POP-MGMT-MIB", "cpmCallCount"), ("CISCO-POP-MGMT-MIB", "cpmTimeInUse"), ("CISCO-POP-MGMT-MIB", "cpmInOctets"), ("CISCO-POP-MGMT-MIB", "cpmOutOctets"), ("CISCO-POP-MGMT-MIB", "cpmInPackets"), ("CISCO-POP-MGMT-MIB", "cpmOutPackets"), ("CISCO-POP-MGMT-MIB", "cpmAssociatedInterface"), ("CISCO-POP-MGMT-MIB", "cpmISDNCfgBChanInUseForAnalog"), ("CISCO-POP-MGMT-MIB", "cpmISDNCfgBChannelsInUse"), ("CISCO-POP-MGMT-MIB", "cpmActiveDS0s"), ("CISCO-POP-MGMT-MIB", "cpmPPPCalls"), ("CISCO-POP-MGMT-MIB", "cpmV120Calls"), ("CISCO-POP-MGMT-MIB", "cpmV110Calls"), ("CISCO-POP-MGMT-MIB", "cpmActiveDS0sHighWaterMark"), ("CISCO-POP-MGMT-MIB", "cpmDS1ActiveDS0s"), ("CISCO-POP-MGMT-MIB", "cpmDS1ActiveDS0sHighWaterMark"), ("CISCO-POP-MGMT-MIB", "cpmSW56CfgBChannelsInUse"), ("CISCO-POP-MGMT-MIB", "cpmISDNCfgBChanInUseForVoice"), ("CISCO-POP-MGMT-MIB", "cpmCASCfgBChanInUseForVoice"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpmDS0UsageGroupRev2 = cpmDS0UsageGroupRev2.setStatus('current')
if mibBuilder.loadTexts: cpmDS0UsageGroupRev2.setDescription('A collection of objects providing the analog and digital statistics for a DS1.')
cpmDS1UsageGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 19, 3, 2, 7)).setObjects(("CISCO-POP-MGMT-MIB", "cpmDS1TotalAnalogCalls"), ("CISCO-POP-MGMT-MIB", "cpmDS1TotalDigitalCalls"), ("CISCO-POP-MGMT-MIB", "cpmDS1TotalV110Calls"), ("CISCO-POP-MGMT-MIB", "cpmDS1TotalV120Calls"), ("CISCO-POP-MGMT-MIB", "cpmDS1TotalCalls"), ("CISCO-POP-MGMT-MIB", "cpmDS1TotalTimeInUse"), ("CISCO-POP-MGMT-MIB", "cpmDS1CurrentIdle"), ("CISCO-POP-MGMT-MIB", "cpmDS1CurrentOutOfService"), ("CISCO-POP-MGMT-MIB", "cpmDS1CurrentBusyout"), ("CISCO-POP-MGMT-MIB", "cpmDS1InOctets"), ("CISCO-POP-MGMT-MIB", "cpmDS1OutOctets"), ("CISCO-POP-MGMT-MIB", "cpmDS1InPackets"), ("CISCO-POP-MGMT-MIB", "cpmDS1OutPackets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpmDS1UsageGroup = cpmDS1UsageGroup.setStatus('current')
if mibBuilder.loadTexts: cpmDS1UsageGroup.setDescription('A collection of objects providing statistics aggregation across DS0s within a DS1.')
cpmSystemGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 19, 3, 2, 8)).setObjects(("CISCO-POP-MGMT-MIB", "cpmISDNCfgActiveDChannels"), ("CISCO-POP-MGMT-MIB", "cpmISDNCfgBChannelsTimeInUse"), ("CISCO-POP-MGMT-MIB", "cpmISDNCfgBChannelsTimeInUseAnlg"), ("CISCO-POP-MGMT-MIB", "cpmISDNCfgBChannelCalls"), ("CISCO-POP-MGMT-MIB", "cpmISDNCfgBChannelAnalogCalls"), ("CISCO-POP-MGMT-MIB", "cpmTotalISDNSyncPPPCalls"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpmSystemGroup = cpmSystemGroup.setStatus('current')
if mibBuilder.loadTexts: cpmSystemGroup.setDescription('A collection of objects providing statistics aggregation for the entire system.')
cpmDS0StatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 19, 3, 2, 9)).setObjects(("CISCO-POP-MGMT-MIB", "cpmDS0BusyoutNotifyEnable"), ("CISCO-POP-MGMT-MIB", "cpmDS0OperStatus"), ("CISCO-POP-MGMT-MIB", "cpmDS0BusyoutAdminStatus"), ("CISCO-POP-MGMT-MIB", "cpmDS0BusyoutAllow"), ("CISCO-POP-MGMT-MIB", "cpmDS0BusyoutStatus"), ("CISCO-POP-MGMT-MIB", "cpmDS0BusyoutSource"), ("CISCO-POP-MGMT-MIB", "cpmDS0BusyoutTime"), ("CISCO-POP-MGMT-MIB", "cpmDS0ConfigFunction"), ("CISCO-POP-MGMT-MIB", "cpmDS0InterfaceIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpmDS0StatusGroup = cpmDS0StatusGroup.setStatus('current')
if mibBuilder.loadTexts: cpmDS0StatusGroup.setDescription('A collection of objects providing the status for a DS0.')
cpmNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 10, 19, 3, 2, 10)).setObjects(("CISCO-POP-MGMT-MIB", "cpmDS0BusyoutNotification"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpmNotificationGroup = cpmNotificationGroup.setStatus('deprecated')
if mibBuilder.loadTexts: cpmNotificationGroup.setDescription('The collection of notifications ')
cpmDS1LoopbackNotifyConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 19, 3, 2, 11)).setObjects(("CISCO-POP-MGMT-MIB", "cpmDS1LoopbackNotifyEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpmDS1LoopbackNotifyConfigGroup = cpmDS1LoopbackNotifyConfigGroup.setStatus('current')
if mibBuilder.loadTexts: cpmDS1LoopbackNotifyConfigGroup.setDescription('A collection of objects providing the notification configuration ')
cpmCallVolumeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 19, 3, 2, 12)).setObjects(("CISCO-POP-MGMT-MIB", "cpmCallVolSuccISDNDigital"), ("CISCO-POP-MGMT-MIB", "cpmCallVolAnalogCallClearedNormally"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpmCallVolumeGroup = cpmCallVolumeGroup.setStatus('current')
if mibBuilder.loadTexts: cpmCallVolumeGroup.setDescription('A collection of objects providing aggregate totals of call successfully completed')
cpmNotificationGroupRev1 = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 10, 19, 3, 2, 13)).setObjects(("CISCO-POP-MGMT-MIB", "cpmDS0BusyoutNotification"), ("CISCO-POP-MGMT-MIB", "cpmDS1LoopbackNotification"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpmNotificationGroupRev1 = cpmNotificationGroupRev1.setStatus('current')
if mibBuilder.loadTexts: cpmNotificationGroupRev1.setDescription('The collection of notifications ')
mibBuilder.exportSymbols("CISCO-POP-MGMT-MIB", cpmOutPackets=cpmOutPackets, cpmNotifications=cpmNotifications, cpmCallHistorySummaryGroup=cpmCallHistorySummaryGroup, cpmISDNNoResource=cpmISDNNoResource, cpmDS0InterfaceIndex=cpmDS0InterfaceIndex, cpmTTYNumber=cpmTTYNumber, cpmDS0UsageEntry=cpmDS0UsageEntry, cpmChannelIndex=cpmChannelIndex, cpmDS1ActiveDS0s=cpmDS1ActiveDS0s, cpmSystemGroup=cpmSystemGroup, cpmTotalISDNSyncPPPCalls=cpmTotalISDNSyncPPPCalls, cpmDS0BusyoutAdminStatus=cpmDS0BusyoutAdminStatus, cpmDS0BusyoutSource=cpmDS0BusyoutSource, cpmPPPCalls=cpmPPPCalls, cpmV120Calls=cpmV120Calls, cpmDS0StatusEntry=cpmDS0StatusEntry, cpmActiveRemotePhoneNumber=cpmActiveRemotePhoneNumber, cpmCallHistorySummary=cpmCallHistorySummary, cpmActiveCallDuration=cpmActiveCallDuration, cpmCallHistorySummaryIndex=cpmCallHistorySummaryIndex, cpmDS0UsageGroupRev2=cpmDS0UsageGroupRev2, cpmDS0CallType=cpmDS0CallType, cpmCallType=cpmCallType, cpmActiveDS0sHighWaterMark=cpmActiveDS0sHighWaterMark, cpmEntryChannel=cpmEntryChannel, cpmModemPort=cpmModemPort, cpmComplianceRev2=cpmComplianceRev2, cpmNotificationGroupRev1=cpmNotificationGroupRev1, cpmDS1CurrentOutOfService=cpmDS1CurrentOutOfService, cPopMgmtMIBNotificationPrefix=cPopMgmtMIBNotificationPrefix, cpmISDNCfgActiveDChannels=cpmISDNCfgActiveDChannels, cpmCallStartTimeIndex=cpmCallStartTimeIndex, cpmDS1OutPackets=cpmDS1OutPackets, cpmDS1LoopbackNotifyConfigGroup=cpmDS1LoopbackNotifyConfigGroup, cpmDS0Status=cpmDS0Status, cpmUserIpAddr=cpmUserIpAddr, cpmActiveCallStartTimeIndex=cpmActiveCallStartTimeIndex, cpmDS1SlotIndex=cpmDS1SlotIndex, ciscoPopMgmtMIB=ciscoPopMgmtMIB, cpmCallDisconnectTimeIndex=cpmCallDisconnectTimeIndex, cpmCallHistorySummaryTableMaxLength=cpmCallHistorySummaryTableMaxLength, cpmTimeInUse=cpmTimeInUse, cpmActiveEntrySlot=cpmActiveEntrySlot, cpmCallVolumeGroup=cpmCallVolumeGroup, cpmCallVolSuccISDNDigital=cpmCallVolSuccISDNDigital, cpmAssociatedInterface=cpmAssociatedInterface, cpmMIBGroups=cpmMIBGroups, cpmSW56CfgBChannelsInUse=cpmSW56CfgBChannelsInUse, cpmDS0UsageTable=cpmDS0UsageTable, cpmMIBConformance=cpmMIBConformance, cpmCallCount=cpmCallCount, cpmDS0OperStatus=cpmDS0OperStatus, cpmDS0ConfigFunction=cpmDS0ConfigFunction, cpmCallHistorySummaryTable=cpmCallHistorySummaryTable, cpmCASCfgBChanInUseForVoice=cpmCASCfgBChanInUseForVoice, cpmDS0BusyoutStatus=cpmDS0BusyoutStatus, cpmISDNCfgBChannelAnalogCalls=cpmISDNCfgBChannelAnalogCalls, cpmDS1TotalDigitalCalls=cpmDS1TotalDigitalCalls, cpmActiveCallSummaryTable=cpmActiveCallSummaryTable, cpmDS0StatusTable=cpmDS0StatusTable, cpmActiveCallType=cpmActiveCallType, cpmDS1LoopbackNotifyEnable=cpmDS1LoopbackNotifyEnable, cpmDS1TotalCalls=cpmDS1TotalCalls, cpmL2Encapsulation=cpmL2Encapsulation, cpmDS0UsageGroupRev1=cpmDS0UsageGroupRev1, cpmActiveCallSummary=cpmActiveCallSummary, cpmDS1UsageSlotIndex=cpmDS1UsageSlotIndex, cpmRemotePhoneNumber=cpmRemotePhoneNumber, cpmCallFailureGroup=cpmCallFailureGroup, cpmDS0StatusGroup=cpmDS0StatusGroup, cpmActiveModemPort=cpmActiveModemPort, cpmDS1TotalAnalogCalls=cpmDS1TotalAnalogCalls, cpmMIBComplianceRev3=cpmMIBComplianceRev3, cpmMIBComplianceRev5=cpmMIBComplianceRev5, cpmActiveDS0s=cpmActiveDS0s, cpmEntrySlot=cpmEntrySlot, cpmCallHistorySummaryRetainTimer=cpmCallHistorySummaryRetainTimer, cpmActiveCallSummaryGroup=cpmActiveCallSummaryGroup, cpmInOctets=cpmInOctets, cpmDS1UsagePortIndex=cpmDS1UsagePortIndex, PYSNMP_MODULE_ID=ciscoPopMgmtMIB, cpmDS1InPackets=cpmDS1InPackets, cpmDS1CurrentBusyout=cpmDS1CurrentBusyout, cpmActiveLocalPhoneNumber=cpmActiveLocalPhoneNumber, cpmDS0BusyoutAllow=cpmDS0BusyoutAllow, cpmActiveUserID=cpmActiveUserID, cpmDS1LoopbackNotifyConfig=cpmDS1LoopbackNotifyConfig, cpmISDNCfgBChannelsInUse=cpmISDNCfgBChannelsInUse, cpmDS1PortIndex=cpmDS1PortIndex, cpmCallFailure=cpmCallFailure, cpmDS1ActiveDS0sHighWaterMark=cpmDS1ActiveDS0sHighWaterMark, cpmDS1CurrentIdle=cpmDS1CurrentIdle, cpmCallVolume=cpmCallVolume, cpmDS1UsageGroup=cpmDS1UsageGroup, cpmModemCallsRejected=cpmModemCallsRejected, cpmModemSlot=cpmModemSlot, cpmOutOctets=cpmOutOctets, cpmDS1DS0UsageTable=cpmDS1DS0UsageTable, cpmInPackets=cpmInPackets, cpmISDNCfgBChanInUseForAnalog=cpmISDNCfgBChanInUseForAnalog, cpmDS1LoopbackNotification=cpmDS1LoopbackNotification, cpmEntryPort=cpmEntryPort, cpmDS0BusyoutNotification=cpmDS0BusyoutNotification, cpmDS1TotalV120Calls=cpmDS1TotalV120Calls, cpmMIBComplianceRev4=cpmMIBComplianceRev4, cpmActiveEntryChannel=cpmActiveEntryChannel, cpmMIBCompliances=cpmMIBCompliances, cpmCallDuration=cpmCallDuration, cpmLocalPhoneNumber=cpmLocalPhoneNumber, cpmDS1OutOctets=cpmDS1OutOctets, cpmISDNCfgBChannelsTimeInUseAnlg=cpmISDNCfgBChannelsTimeInUseAnlg, cpmActiveEntryPort=cpmActiveEntryPort, cpmMIBComplianceRev1=cpmMIBComplianceRev1, cpmISDNCallsRejected=cpmISDNCallsRejected, cpmISDNCfgBChannelsTimeInUse=cpmISDNCfgBChannelsTimeInUse, cpmDS1TotalTimeInUse=cpmDS1TotalTimeInUse, cpmConfiguredType=cpmConfiguredType, cpmCallVolAnalogCallClearedNormally=cpmCallVolAnalogCallClearedNormally, cpmISDNCfgBChanInUseForVoice=cpmISDNCfgBChanInUseForVoice, cpmDS0BusyoutNotifyEnable=cpmDS0BusyoutNotifyEnable, cpmISDNCallsClearedAbnormally=cpmISDNCallsClearedAbnormally, cpmActiveModemSlot=cpmActiveModemSlot, cpmDS0UsageGroup=cpmDS0UsageGroup, cpmModemNoResource=cpmModemNoResource, cpmActiveCallSummaryEntry=cpmActiveCallSummaryEntry, cpmActiveTTYNumber=cpmActiveTTYNumber, cpmUserID=cpmUserID, cpmDS1InOctets=cpmDS1InOctets, cpmDS1DS0UsageEntry=cpmDS1DS0UsageEntry, cpmModemCallsClearedAbnormally=cpmModemCallsClearedAbnormally, cpmNotificationGroup=cpmNotificationGroup, ciscoPopMgmtMIBObjects=ciscoPopMgmtMIBObjects, cpmMIBCompliance=cpmMIBCompliance, cpmDS0BusyoutTime=cpmDS0BusyoutTime, cpmActiveUserIpAddr=cpmActiveUserIpAddr, cpmCallHistorySummaryEntry=cpmCallHistorySummaryEntry, cpmISDNCfgBChannelCalls=cpmISDNCfgBChannelCalls, cpmDS1TotalV110Calls=cpmDS1TotalV110Calls, cpmActiveCallSummaryIndex=cpmActiveCallSummaryIndex, cpmV110Calls=cpmV110Calls, cpmDS0Usage=cpmDS0Usage)
