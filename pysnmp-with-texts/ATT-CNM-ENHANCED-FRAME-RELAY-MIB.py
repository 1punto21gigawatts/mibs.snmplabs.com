#
# PySNMP MIB module ATT-CNM-ENHANCED-FRAME-RELAY-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ATT-CNM-ENHANCED-FRAME-RELAY-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:31:46 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Integer32, NotificationType, Counter32, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, IpAddress, enterprises, iso, TimeTicks, ObjectIdentity, ModuleIdentity, Unsigned32, Counter64, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "NotificationType", "Counter32", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "IpAddress", "enterprises", "iso", "TimeTicks", "ObjectIdentity", "ModuleIdentity", "Unsigned32", "Counter64", "Bits")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
att_2 = MibIdentifier((1, 3, 6, 1, 4, 1, 74)).setLabel("att-2")
att_products = MibIdentifier((1, 3, 6, 1, 4, 1, 74, 1)).setLabel("att-products")
att_mgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 74, 2)).setLabel("att-mgmt")
att_cnmAgent = MibIdentifier((1, 3, 6, 1, 4, 1, 74, 1, 9)).setLabel("att-cnmAgent")
att_cnm = MibIdentifier((1, 3, 6, 1, 4, 1, 74, 2, 15)).setLabel("att-cnm")
att_cnm_efr = MibIdentifier((1, 3, 6, 1, 4, 1, 74, 2, 15, 8)).setLabel("att-cnm-efr")
attCNMefrConfigTable = MibTable((1, 3, 6, 1, 4, 1, 74, 2, 15, 8, 1), )
if mibBuilder.loadTexts: attCNMefrConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMefrConfigTable.setDescription('A list of entries containing configuration information for all Frame Relay interfaces managed by this system.')
attCNMefrConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 74, 2, 15, 8, 1, 1), ).setIndexNames((0, "ATT-CNM-ENHANCED-FRAME-RELAY-MIB", "attCNMefrConfigIndex"))
if mibBuilder.loadTexts: attCNMefrConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMefrConfigEntry.setDescription('An entry containing configuration information for a particular Frame Relay interface.')
attCNMefrConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 15, 8, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: attCNMefrConfigIndex.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMefrConfigIndex.setDescription('A unique value for each Frame Relay interface. The interface identified by a particular value of this index is the same interface as identified by the same value of an attCNMifConfigIndex object instance.')
attCNMefrMgmtType = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 15, 8, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("auto-set", 1), ("lmi", 2), ("ansi", 3), ("ccitt", 4), ("none", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: attCNMefrMgmtType.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMefrMgmtType.setDescription('This variable identifies the PVC management scheme being used to manage this Frame Relay interface. A value of auto-set(1) indicates that the interface automatically adopts the scheme being used by the access device. A value none(5) indicates that PVC management procedures are disabled on this interface.')
attCNMefrPollDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 15, 8, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("receive", 1), ("send", 2), ("both", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: attCNMefrPollDirection.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMefrPollDirection.setDescription('This variable specifies the role the Frame Relay interface performs in a bi-directional PVC management scheme. A value of receive(1) means that this interface simply responds to Status Enquiries and a value of send(2) means that this interface initiates Status Enquiries. A value of both(3) means that this interface performs both functions. This variable applies only if the type of PVC management scheme being used is not auto-set (see the attCNMefrMgmtType object).')
attCNMefrFullStatusPoll = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 15, 8, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: attCNMefrFullStatusPoll.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMefrFullStatusPoll.setDescription('This variable identifies the maximum number of Status Enquiry intervals that pass before issuance of a Full Status Enquiry message. This counter is referred to as N391 in the ANSI standard. This variable applies only if the PVC management procedures are enabled. See attCNMefrMgmtType object for more details.')
attCNMefrErrorThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 15, 8, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: attCNMefrErrorThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMefrErrorThreshold.setDescription('This variable identifies the maximum number of errored events that can occur before declaring the Frame Relay interface down. An errored event is the non-receipt of a Status Enquiry, or the receipt of a Status Enquiry with an invalid sequence number. This counter is referred to as N392 in the ANSI standard. The value for this counter cannot exceed the value of the monitored events counter (see the attCNMefrMonitoredEvents object).')
attCNMefrMonitoredEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 15, 8, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: attCNMefrMonitoredEvents.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMefrMonitoredEvents.setDescription("This variable specifies a value 'm', that is used with the Error Threshold (attCNMefrErrorThreshold) to determine link problems. A link problem is declared when the number of errors in the last 'm' monitored events exceeds the Error Threshold. This counter is referred to as N393 in the ANSI standard.")
attCNMefrIntegrityTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 15, 8, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: attCNMefrIntegrityTimer.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMefrIntegrityTimer.setDescription('This variable identifies the number of seconds between successive Status Enquiry messages. This timer is referred to as T391 in the ANSI standard. This variable is applicable only if this interface is configured to be the sender of PVC management polls (see the attCNMefrPollDirection object).')
attCNMefrPollVerifyTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 15, 8, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: attCNMefrPollVerifyTimer.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMefrPollVerifyTimer.setDescription('This variable specifies the maximum number of seconds the Frame Relay interface allows between the receipt of Status Enquiries. The expiration of this timer is considered to be an errored event. This timer is referred to as T392 in the ANSI standard. This variable is applicable only if this interface is configured to be the receiver of PVC management polls. Refer to the attCNMefrPollDirection object to verify this.')
attCNMefrLMIFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 15, 8, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("lmiFlowControlOn", 1), ("lmiFlowControlOff", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: attCNMefrLMIFlowControl.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMefrLMIFlowControl.setDescription("If the PVC management scheme being used is LMI, then this variable indicates whether this Frame Relay interface uses XON/XOFF as a means of congestion avoidance. This technique is defined in Revision 1.0 of the LMI Specification 'Frame Relay Specification with Extensions'.")
attCNMefrSupportedPVCs = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 15, 8, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: attCNMefrSupportedPVCs.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMefrSupportedPVCs.setDescription('This variable specifies the number of DLCIs currently supported on this Frame Relay interface.')
attCNMefrMeasMaxIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 15, 8, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: attCNMefrMeasMaxIntervals.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMefrMeasMaxIntervals.setDescription('This variable identifies the maximum number of measurement intervals supported for the measurements maintained by this Frame Relay interface in the attCNMefrMeasTable.')
attCNMefrMeasIntervalLen = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 15, 8, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: attCNMefrMeasIntervalLen.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMefrMeasIntervalLen.setDescription('This variable identifies the number of seconds that make up one complete measurement interval for for the measurements maintained by this Frame Relay interface in the attCNMefrMeasTable.')
attCNMefrMeasTable = MibTable((1, 3, 6, 1, 4, 1, 74, 2, 15, 8, 2), )
if mibBuilder.loadTexts: attCNMefrMeasTable.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMefrMeasTable.setDescription('A list of entries containing measurement counts, maintained during the specified measurement interval, for all Frame Relay interfaces managed by this system.')
attCNMefrMeasEntry = MibTableRow((1, 3, 6, 1, 4, 1, 74, 2, 15, 8, 2, 1), ).setIndexNames((0, "ATT-CNM-ENHANCED-FRAME-RELAY-MIB", "attCNMefrMeasIndex"), (0, "ATT-CNM-ENHANCED-FRAME-RELAY-MIB", "attCNMefrMeasInterval"))
if mibBuilder.loadTexts: attCNMefrMeasEntry.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMefrMeasEntry.setDescription('An entry containing measurement counts, maintained during the specified measurement interval, for a particular Frame Relay interface.')
attCNMefrMeasIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 15, 8, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: attCNMefrMeasIndex.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMefrMeasIndex.setDescription('A unique value for each Frame Relay interface. The interface identified by a particular value of this index is the same interface as identified by the same value of an attCNMifConfigIndex object instance.')
attCNMefrMeasInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 15, 8, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: attCNMefrMeasInterval.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMefrMeasInterval.setDescription('This variable identifies the measurement interval number for which measurement is provided. It is a number between 1 and XX, where 1 identifies the most recently completed measurement interval and XX is the least recently completed measurement interval. The value of XX is specified by the attCNMefrMeasMaxIntervals object given in the attCNMefrConfigTable. The maximum length of each measurement interval is specified by the attCNMefrMeasIntervalLen object given in the attCNMefrConfigTable.')
attCNMefrMeasTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 15, 8, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: attCNMefrMeasTimeStamp.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMefrMeasTimeStamp.setDescription('The time stamp corresponding to the end of the specified measurement interval, as measured in seconds from 00:00:00 UTC (Coordinated Universal Time) January 1, 1970. Any fraction is rounded up.')
attCNMefrMeasLocalTime = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 15, 8, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: attCNMefrMeasLocalTime.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMefrMeasLocalTime.setDescription('The time stamp corresponding to the end of the specified measurement interval. Any fraction is rounded up. It is given as a printable ASCII string showing the local time at the end of the interval.')
attCNMefrReceivedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 15, 8, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: attCNMefrReceivedOctets.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMefrReceivedOctets.setDescription('The counter associated with the number of bytes received by this Frame Relay interface during the specified measurement interval.')
attCNMefrSentOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 15, 8, 2, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: attCNMefrSentOctets.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMefrSentOctets.setDescription('The counter associated with the number of bytes sent by this Frame Relay interface during the specified measurement interval.')
attCNMefrReceivedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 15, 8, 2, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: attCNMefrReceivedFrames.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMefrReceivedFrames.setDescription('The counter associated with the number of frames received by this Frame Relay interface during the specified measurement interval.')
attCNMefrSentFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 15, 8, 2, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: attCNMefrSentFrames.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMefrSentFrames.setDescription('The counter associated with the number of frames sent by this Frame Relay interface during the specified measurement interval.')
attCNMefrBadFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 15, 8, 2, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: attCNMefrBadFrames.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMefrBadFrames.setDescription('The counter associated with the number of frames received by this Frame Relay interface that are faulty. The interface discards bad frames received. A bad frame could be a frame with a non-integral number of octets, or an aborted frame, or a frame with a bad Frame Check Sequence (FCS), or a frame that exceeds the maximum frame size.')
attCNMefrReceiverOverruns = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 15, 8, 2, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: attCNMefrReceiverOverruns.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMefrReceiverOverruns.setDescription('The counter associated with the number of receiver overruns occurred at this Frame Relay interface during the specified measurement interval. A receiver overrun occurs when frames are received faster than they can be stored and forwarded.')
attCNMefrIngressUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 15, 8, 2, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: attCNMefrIngressUtil.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMefrIngressUtil.setDescription('The counter associated with the utilization level of the Frame Relay interface, derived as the total bytes received (in the ingress direction) divided by the line speed of the interface, over the measurement interval.')
attCNMefrEgressUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 15, 8, 2, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: attCNMefrEgressUtil.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMefrEgressUtil.setDescription('The counter associated with the utilization level of the Frame Relay interface, derived as the total bytes sent (in the egress direction) divided by the line speed of the interface, over the measurement interval.')
attCNMefrPVCConfigTable = MibTable((1, 3, 6, 1, 4, 1, 74, 2, 15, 8, 3), )
if mibBuilder.loadTexts: attCNMefrPVCConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMefrPVCConfigTable.setDescription('A list of entries containing configuration information for all Frame Relay interfaces managed by this system.')
attCNMefrPVCConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 74, 2, 15, 8, 3, 1), ).setIndexNames((0, "ATT-CNM-ENHANCED-FRAME-RELAY-MIB", "attCNMefrPVCConfigIfIndex"), (0, "ATT-CNM-ENHANCED-FRAME-RELAY-MIB", "attCNMefrPVCConfigIndex"))
if mibBuilder.loadTexts: attCNMefrPVCConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMefrPVCConfigEntry.setDescription('An entry containing configuration information for a particular Frame Relay interface.')
attCNMefrPVCConfigIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 15, 8, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: attCNMefrPVCConfigIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMefrPVCConfigIfIndex.setDescription('A unique value for each Frame Relay interface. The interface identified by a particular value of this index is the same interface as identified by the same value of an attCNMifConfigIndex object instance.')
attCNMefrPVCConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 15, 8, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: attCNMefrPVCConfigIndex.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMefrPVCConfigIndex.setDescription('The DLCI number on a Frame Relay interface that identifies a unique Data Link Connection.')
attCNMefrPVCServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 15, 8, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unicast", 1), ("multicast", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: attCNMefrPVCServiceType.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMefrPVCServiceType.setDescription('This variable specifies whether the DLCI is a multicast or PVC (unicast) DLCI. A PVC DLCI is used to connect a specific endpoint to another endpoint, whereas a multicast DLCI allows an endpoint to transmit single frames to this Frame Relay interface and have them delivered to multiple destinations.')
attCNMefrLocalCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 15, 8, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: attCNMefrLocalCIR.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMefrLocalCIR.setDescription('This variable specifies the Committed Information Rate (CIR) for data transmitted on this PVC from the local device through the network via this Frame Relay interface. The maximum value for the CIR is limited to the line speed of this interface.')
attCNMefrLocalCommittedBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 15, 8, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: attCNMefrLocalCommittedBurst.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMefrLocalCommittedBurst.setDescription('This variable specifies the Committed Burst (Bc) for data transmitted on this PVC from the local device through the network via this Frame Relay interface.')
attCNMefrLocalExcessBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 15, 8, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: attCNMefrLocalExcessBurst.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMefrLocalExcessBurst.setDescription('This variable specifies the Excess Burst (Be) for data transmitted on this PVC from the local device through the network via this Frame Relay interface.')
attCNMefrRemoteCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 15, 8, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: attCNMefrRemoteCIR.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMefrRemoteCIR.setDescription('This variable specifies the Committed Information Rate (CIR) for data transmitted on this PVC from the remote device, through the network, to the local device via this Frame Relay interface. The maximum value for the CIR is limited to the line speed of this interface.')
attCNMefrRemoteCommittedBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 15, 8, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: attCNMefrRemoteCommittedBurst.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMefrRemoteCommittedBurst.setDescription('This variable specifies the Committed Burst (Bc) for data transmitted on this PVC from the remote device, through the network, to the local device via this Frame Relay interface.')
attCNMefrRemoteExcessBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 15, 8, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: attCNMefrRemoteExcessBurst.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMefrRemoteExcessBurst.setDescription('This variable specifies the Excess Burst (Be) for data transmitted on this PVC from the remote device, through the network, to the local device via this Frame Relay interface.')
attCNMefrMulticastGroup1 = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 15, 8, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: attCNMefrMulticastGroup1.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMefrMulticastGroup1.setDescription('A multicast (group) DLCI that includes this DLCI as one of its members. Any messages addressed to this multicast DLCI will be sent to this PVC and to other PVCs that belong in this group. A unicast DLCI can be a member of at most 4 groups. This variable identifies the first multicast DLCI that includes this DLCI as its member.')
attCNMefrMulticastGroup2 = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 15, 8, 3, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: attCNMefrMulticastGroup2.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMefrMulticastGroup2.setDescription('A multicast (group) DLCI that includes this DLCI as one of its members. Any messages addressed to this multicast DLCI will be sent to this PVC and to other PVCs that belong in this group. A unicast DLCI can be a member of at most 4 groups. This variable identifies the second multicast DLCI that includes this DLCI as its member.')
attCNMefrMulticastGroup3 = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 15, 8, 3, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: attCNMefrMulticastGroup3.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMefrMulticastGroup3.setDescription('A multicast (group) DLCI that includes this DLCI as one of its members. Any messages addressed to this multicast DLCI will be sent to this PVC and to other PVCs that belong in this group. A unicast DLCI can be a member of at most 4 groups. This variable identifies the third multicast DLCI that includes this DLCI as its member.')
attCNMefrMulticastGroup4 = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 15, 8, 3, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: attCNMefrMulticastGroup4.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMefrMulticastGroup4.setDescription('A multicast (group) DLCI that includes this DLCI as one of its members. Any messages addressed to this multicast DLCI will be sent to this PVC and to other PVCs that belong in this group. A unicast DLCI can be a member of at most 4 groups. This variable identifies the fourth multicast DLCI that includes this DLCI as its member.')
attCNMefrPVCMeasMaxIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 15, 8, 3, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: attCNMefrPVCMeasMaxIntervals.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMefrPVCMeasMaxIntervals.setDescription('This variable identifies the maximum number of measurement intervals supported for the measurements maintained by this Frame Relay interface in the attCNMefrPVCMeasTable.')
attCNMefrPVCMeasIntervalLen = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 15, 8, 3, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: attCNMefrPVCMeasIntervalLen.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMefrPVCMeasIntervalLen.setDescription('This variable identifies the number of seconds that make up one complete measurement interval for for the measurements maintained by this Frame Relay interface in the attCNMefrPVCMeasTable.')
attCNMefrPVCMeasTable = MibTable((1, 3, 6, 1, 4, 1, 74, 2, 15, 8, 4), )
if mibBuilder.loadTexts: attCNMefrPVCMeasTable.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMefrPVCMeasTable.setDescription('A list of entries containing PVC-level measurement counts, maintained during the specified measurement interval, for all the Frame Relay interfaces managed by this system.')
attCNMefrPVCMeasEntry = MibTableRow((1, 3, 6, 1, 4, 1, 74, 2, 15, 8, 4, 1), ).setIndexNames((0, "ATT-CNM-ENHANCED-FRAME-RELAY-MIB", "attCNMefrPVCMeasIfIndex"), (0, "ATT-CNM-ENHANCED-FRAME-RELAY-MIB", "attCNMefrPVCMeasIndex"), (0, "ATT-CNM-ENHANCED-FRAME-RELAY-MIB", "attCNMefrPVCMeasInterval"))
if mibBuilder.loadTexts: attCNMefrPVCMeasEntry.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMefrPVCMeasEntry.setDescription('An entry containing measurement counts, maintained during the specified measurement interval, for a particular PVC on a specific Frame Relay interface.')
attCNMefrPVCMeasIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 15, 8, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: attCNMefrPVCMeasIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMefrPVCMeasIfIndex.setDescription('A unique value for each Frame Relay interface. The interface identified by a particular value of this index is the same interface as identified by the same value of an attCNMifConfigIndex object instance.')
attCNMefrPVCMeasIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 15, 8, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: attCNMefrPVCMeasIndex.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMefrPVCMeasIndex.setDescription('The DLCI number on a Frame Relay interface that identifies a unique Data Link Connection.')
attCNMefrPVCMeasInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 15, 8, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: attCNMefrPVCMeasInterval.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMefrPVCMeasInterval.setDescription('This variable identifies the measurement interval number for which measurement is provided. It is a number between 1 and XX, where 1 identifies the most recently completed measurement interval and XX is the least recently completed measurement interval.')
attCNMefrPVCMeasTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 15, 8, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: attCNMefrPVCMeasTimeStamp.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMefrPVCMeasTimeStamp.setDescription('The time stamp corresponding to the end of the specified measurement interval, as measured in seconds from 00:00:00 UTC (Coordinated Universal Time) January 1, 1970. Any fraction is rounded up.')
attCNMefrPVCMeasLocalTime = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 15, 8, 4, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: attCNMefrPVCMeasLocalTime.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMefrPVCMeasLocalTime.setDescription('The time stamp corresponding to the end of the specified measurement interval. Any fraction is rounded up. It is given as a printable ASCII string showing the local time at the end of the interval.')
attCNMefrPVCReceivedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 15, 8, 4, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: attCNMefrPVCReceivedFrames.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMefrPVCReceivedFrames.setDescription('The counter associated with the number of frames received by this Frame Relay PVC during the specified measurement interval.')
attCNMefrPVCSentFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 15, 8, 4, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: attCNMefrPVCSentFrames.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMefrPVCSentFrames.setDescription('The counter associated with the number of frames sent by this Frame Relay PVC during the specified measurement interval.')
attCNMefrDiscardEligibilityFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 15, 8, 4, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: attCNMefrDiscardEligibilityFrames.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMefrDiscardEligibilityFrames.setDescription("The counter associated with the number of ingress frames received by this PVC that exceed the Committed Burst Size but don't exceed the maximum throughput configured for the PVC (the Committed Burst Size plus the Excess Burst Size). In addition, all ingress frames with the Discard Eligible (DE) Indicator bit set are included in this count.")
attCNMefrBurstSizeExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 15, 8, 4, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: attCNMefrBurstSizeExceeded.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMefrBurstSizeExceeded.setDescription('The counter associated with the number of frames that were discarded due to exceeding the maximum throughput configured for the PVC (the Committed Burst Size plus the Excess Burst Size). If the Committed Information Rate (CIR) has not been configured for the PVC, then this field is not applicable.')
attCNMefrCongestionAtIngress = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 15, 8, 4, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: attCNMefrCongestionAtIngress.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMefrCongestionAtIngress.setDescription('The counter associated with the number of times frames received by this PVC had to be discarded because buffers were unavailable or congestion control was being enforced during the specified measurement interval.')
attCNMefrCongestionAtEgress = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 15, 8, 4, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: attCNMefrCongestionAtEgress.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMefrCongestionAtEgress.setDescription('The counter associated with the number of times frames sent by this PVC had to be discarded because buffers were unavailable or congestion control was being enforced during the specified measurement interval.')
attCNMefrPVCStatusTable = MibTable((1, 3, 6, 1, 4, 1, 74, 2, 15, 8, 5), )
if mibBuilder.loadTexts: attCNMefrPVCStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMefrPVCStatusTable.setDescription('A list of entries containing status information about Data Link Connections on Frame Relay interfaces managed by this system.')
attCNMefrPVCStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 74, 2, 15, 8, 5, 1), ).setIndexNames((0, "ATT-CNM-ENHANCED-FRAME-RELAY-MIB", "attCNMefrPVCStatusIfIndex"), (0, "ATT-CNM-ENHANCED-FRAME-RELAY-MIB", "attCNMefrPVCStatusIndex"))
if mibBuilder.loadTexts: attCNMefrPVCStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMefrPVCStatusEntry.setDescription('An entry containing status information about a particular Data Link Connection on a specific Frame Relay interface.')
attCNMefrPVCStatusIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 15, 8, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: attCNMefrPVCStatusIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMefrPVCStatusIfIndex.setDescription('A unique value for each Frame Relay interface. The interface identified by a particular value of this index is the same interface as identified by the same value of an attCNMifConfigIndex object instance.')
attCNMefrPVCStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 15, 8, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: attCNMefrPVCStatusIndex.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMefrPVCStatusIndex.setDescription('The DLCI number on a Frame Relay interface that identifies a unique Data Link Connection.')
attCNMefrPVCAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 15, 8, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3), ("unknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: attCNMefrPVCAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMefrPVCAdminStatus.setDescription('The desired state of this Data Link Connection.')
attCNMefrPVCOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 15, 8, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3), ("unknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: attCNMefrPVCOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMefrPVCOperStatus.setDescription('The current operational state of this Data Link Connection.')
mibBuilder.exportSymbols("ATT-CNM-ENHANCED-FRAME-RELAY-MIB", attCNMefrReceiverOverruns=attCNMefrReceiverOverruns, attCNMefrPollVerifyTimer=attCNMefrPollVerifyTimer, attCNMefrPVCConfigTable=attCNMefrPVCConfigTable, attCNMefrLocalCommittedBurst=attCNMefrLocalCommittedBurst, attCNMefrMonitoredEvents=attCNMefrMonitoredEvents, attCNMefrPVCConfigIndex=attCNMefrPVCConfigIndex, attCNMefrConfigEntry=attCNMefrConfigEntry, attCNMefrLocalExcessBurst=attCNMefrLocalExcessBurst, attCNMefrFullStatusPoll=attCNMefrFullStatusPoll, attCNMefrConfigIndex=attCNMefrConfigIndex, attCNMefrPVCConfigIfIndex=attCNMefrPVCConfigIfIndex, attCNMefrRemoteCommittedBurst=attCNMefrRemoteCommittedBurst, attCNMefrPVCMeasTable=attCNMefrPVCMeasTable, attCNMefrPVCMeasEntry=attCNMefrPVCMeasEntry, attCNMefrPVCStatusIndex=attCNMefrPVCStatusIndex, attCNMefrPVCStatusEntry=attCNMefrPVCStatusEntry, attCNMefrRemoteExcessBurst=attCNMefrRemoteExcessBurst, attCNMefrMeasTable=attCNMefrMeasTable, att_cnm_efr=att_cnm_efr, attCNMefrMulticastGroup1=attCNMefrMulticastGroup1, attCNMefrPVCStatusIfIndex=attCNMefrPVCStatusIfIndex, attCNMefrMeasEntry=attCNMefrMeasEntry, attCNMefrPVCOperStatus=attCNMefrPVCOperStatus, attCNMefrCongestionAtEgress=attCNMefrCongestionAtEgress, attCNMefrCongestionAtIngress=attCNMefrCongestionAtIngress, attCNMefrMulticastGroup4=attCNMefrMulticastGroup4, attCNMefrDiscardEligibilityFrames=attCNMefrDiscardEligibilityFrames, attCNMefrPVCReceivedFrames=attCNMefrPVCReceivedFrames, attCNMefrPollDirection=attCNMefrPollDirection, attCNMefrPVCServiceType=attCNMefrPVCServiceType, attCNMefrSentOctets=attCNMefrSentOctets, attCNMefrMeasMaxIntervals=attCNMefrMeasMaxIntervals, attCNMefrPVCMeasIntervalLen=attCNMefrPVCMeasIntervalLen, att_mgmt=att_mgmt, attCNMefrBurstSizeExceeded=attCNMefrBurstSizeExceeded, att_2=att_2, attCNMefrReceivedOctets=attCNMefrReceivedOctets, attCNMefrIntegrityTimer=attCNMefrIntegrityTimer, att_cnmAgent=att_cnmAgent, attCNMefrMeasIndex=attCNMefrMeasIndex, attCNMefrPVCMeasInterval=attCNMefrPVCMeasInterval, attCNMefrPVCSentFrames=attCNMefrPVCSentFrames, attCNMefrPVCAdminStatus=attCNMefrPVCAdminStatus, att_products=att_products, attCNMefrReceivedFrames=attCNMefrReceivedFrames, attCNMefrSupportedPVCs=attCNMefrSupportedPVCs, att_cnm=att_cnm, attCNMefrMeasTimeStamp=attCNMefrMeasTimeStamp, attCNMefrBadFrames=attCNMefrBadFrames, attCNMefrEgressUtil=attCNMefrEgressUtil, attCNMefrMgmtType=attCNMefrMgmtType, attCNMefrLocalCIR=attCNMefrLocalCIR, attCNMefrRemoteCIR=attCNMefrRemoteCIR, attCNMefrPVCMeasLocalTime=attCNMefrPVCMeasLocalTime, attCNMefrPVCMeasTimeStamp=attCNMefrPVCMeasTimeStamp, attCNMefrMulticastGroup3=attCNMefrMulticastGroup3, attCNMefrMeasInterval=attCNMefrMeasInterval, attCNMefrPVCMeasIndex=attCNMefrPVCMeasIndex, attCNMefrMeasLocalTime=attCNMefrMeasLocalTime, attCNMefrPVCConfigEntry=attCNMefrPVCConfigEntry, attCNMefrPVCMeasIfIndex=attCNMefrPVCMeasIfIndex, attCNMefrLMIFlowControl=attCNMefrLMIFlowControl, attCNMefrMulticastGroup2=attCNMefrMulticastGroup2, attCNMefrPVCMeasMaxIntervals=attCNMefrPVCMeasMaxIntervals, attCNMefrIngressUtil=attCNMefrIngressUtil, attCNMefrPVCStatusTable=attCNMefrPVCStatusTable, attCNMefrConfigTable=attCNMefrConfigTable, attCNMefrErrorThreshold=attCNMefrErrorThreshold, attCNMefrSentFrames=attCNMefrSentFrames, attCNMefrMeasIntervalLen=attCNMefrMeasIntervalLen)
