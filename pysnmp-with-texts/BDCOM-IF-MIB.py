#
# PySNMP MIB module BDCOM-IF-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BDCOM-IF-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:36:41 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
bdMgmt, = mibBuilder.importSymbols("BDCOM-SMI", "bdMgmt")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ModuleIdentity, IpAddress, Counter64, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, Gauge32, Counter32, iso, NotificationType, Bits, TimeTicks, Integer32, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "IpAddress", "Counter64", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "Gauge32", "Counter32", "iso", "NotificationType", "Bits", "TimeTicks", "Integer32", "Unsigned32")
DisplayString, TextualConvention, PhysAddress = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "PhysAddress")
bdIfMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 3320, 9, 63))
if mibBuilder.loadTexts: bdIfMIB.setLastUpdated('20000725')
if mibBuilder.loadTexts: bdIfMIB.setOrganization('BDCom,Inc')
if mibBuilder.loadTexts: bdIfMIB.setContactInfo('Shanghai baud data communication Co.ltd Postal:No.123,Juli RD,Zhangjiang Hi-tech Park, Pudong New Zone,Shanghai City,201203 P.R.C Tel: 8621-50800666')
if mibBuilder.loadTexts: bdIfMIB.setDescription('Analog Voice Interface MIB module. This MIB manages the E&M, FXO, FXS Interfaces in the router. ')
bdIfObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 3320, 9, 63, 1))
vifTable = MibTable((1, 3, 6, 1, 4, 1, 3320, 9, 63, 1, 1), )
if mibBuilder.loadTexts: vifTable.setStatus('mandatory')
if mibBuilder.loadTexts: vifTable.setDescription('A list of voice interface entries. The number of entries is given by the value of ifNumber.')
vifEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3320, 9, 63, 1, 1, 1), ).setIndexNames((0, "BDCOM-IF-MIB", "vifIndex"))
if mibBuilder.loadTexts: vifEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vifEntry.setDescription('An interface entry containing objects at the subnetwork layer and below for a particular interface.')
vifIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 9, 63, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vifIndex.setStatus('mandatory')
if mibBuilder.loadTexts: vifIndex.setDescription("A unique value for each voice interface. Its value ranges between 1 and the value of vifNumber. The value for each voice interface must remain constant at least from one re-initialization of the entity's network management system to the next re- initialization.")
vifDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 9, 63, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vifDescr.setStatus('mandatory')
if mibBuilder.loadTexts: vifDescr.setDescription('A textual string containing information about the voice interface. This string should include the name of the manufacturer, the product name and the version of the hardware interface.')
vifType = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 9, 63, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 100, 101, 102))).clone(namedValues=NamedValues(("other", 1), ("voiceEM", 100), ("voiceFXO", 101), ("voiceFXS", 102)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vifType.setStatus('mandatory')
if mibBuilder.loadTexts: vifType.setDescription("The type of Voice interface, distinguished according to the physical/link protocol(s) immediately `below' the network layer in the protocol stack.")
vifMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 9, 63, 1, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vifMtu.setStatus('mandatory')
if mibBuilder.loadTexts: vifMtu.setDescription('The size of the largest datagram which can be sent/received on the voice interface, specified in octets. in fact,for voice interface,this value should be 0')
vifSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 9, 63, 1, 1, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vifSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: vifSpeed.setDescription('contains a zero value.')
vifPhysAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 9, 63, 1, 1, 1, 6), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vifPhysAddress.setStatus('mandatory')
if mibBuilder.loadTexts: vifPhysAddress.setDescription('contains an octet string of zero length.')
vifAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 9, 63, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vifAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: vifAdminStatus.setDescription('The desired administrative status of the Analog Telephony interface port.')
vifOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 9, 63, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3), ("unknown", 4), ("dormant", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vifOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: vifOperStatus.setDescription('The current operational state of the interface. The testing(3) state indicates that no operational packets can be passed.')
vifLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 9, 63, 1, 1, 1, 9), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vifLastChange.setStatus('mandatory')
if mibBuilder.loadTexts: vifLastChange.setDescription('The value of sysUpTime at the time the interface entered its current operational state. If the current state was entered prior to the last re- initialization of the local network management subsystem, then this object contains a zero value.')
mibBuilder.exportSymbols("BDCOM-IF-MIB", vifType=vifType, bdIfMIB=bdIfMIB, vifLastChange=vifLastChange, vifMtu=vifMtu, vifSpeed=vifSpeed, vifOperStatus=vifOperStatus, vifPhysAddress=vifPhysAddress, PYSNMP_MODULE_ID=bdIfMIB, bdIfObjects=bdIfObjects, vifTable=vifTable, vifAdminStatus=vifAdminStatus, vifIndex=vifIndex, vifDescr=vifDescr, vifEntry=vifEntry)
