#
# PySNMP MIB module HPNSAEVENT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HPNSAEVENT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:42:13 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
enterprises, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, TimeTicks, Counter64, MibIdentifier, IpAddress, Unsigned32, NotificationType, Bits, ModuleIdentity, Counter32, Gauge32, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "enterprises", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "TimeTicks", "Counter64", "MibIdentifier", "IpAddress", "Unsigned32", "NotificationType", "Bits", "ModuleIdentity", "Counter32", "Gauge32", "ObjectIdentity")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
hp = MibIdentifier((1, 3, 6, 1, 4, 1, 11))
nm = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2))
hpnsa = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 23))
hpnsaEventLog = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 23, 19))
hpnsaEventLogRev = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 23, 19, 1))
hpnsaEventLogAgentInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 23, 19, 2))
hpnsaEventAgentCfgInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 23, 19, 3))
hpnsaEventLogPresenceId = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 23, 19, 4))
hpnsaEventLogStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 23, 19, 5))
hpnsaEventCustomerAcknowledgeActions = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 23, 19, 6))
hpnsaEventLogMibRevMajor = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 19, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaEventLogMibRevMajor.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaEventLogMibRevMajor.setDescription('The major revision level of the MIB (left of the decimal).')
hpnsaEventLogMibRevMinor = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 19, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaEventLogMibRevMinor.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaEventLogMibRevMinor.setDescription('The minor revision level of the MIB (right of the decimal).')
hpnsaEventLogAgentTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 23, 19, 2, 1), )
if mibBuilder.loadTexts: hpnsaEventLogAgentTable.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaEventLogAgentTable.setDescription('A table of SNMP Agents that satisfy requests for this MIB.')
hpnsaEventLogAgentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 23, 19, 2, 1, 1), ).setIndexNames((0, "HPNSAEVENT-MIB", "hpnsaEventLogAgentIndex"))
if mibBuilder.loadTexts: hpnsaEventLogAgentEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaEventLogAgentEntry.setDescription('A description of the agents that access the hardware log')
hpnsaEventLogAgentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 19, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaEventLogAgentIndex.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaEventLogAgentIndex.setDescription('A unique index for this module description.')
hpnsaEventLogAgentName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 19, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaEventLogAgentName.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaEventLogAgentName.setDescription('Name of the Agent/Agents satisfying SNMP requests for this MIB.')
hpnsaEventLogAgentVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 19, 2, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaEventLogAgentVersion.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaEventLogAgentVersion.setDescription('Version number of the Agent/Agents satisfying SNMP requests for this MIB.')
hpnsaEventLogAgentDate = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 19, 2, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaEventLogAgentDate.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaEventLogAgentDate.setDescription('The date on which this Agent was created. field octets contents range _________________________________________________ 1 1 years since 1900 0..255 2 2 month 1..12 3 3 day 1..31 4 4 hour 0..23 5 5 minute 0..59 6 6 second 0..59 ')
hpnsaEventCfgTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 23, 19, 3, 1), )
if mibBuilder.loadTexts: hpnsaEventCfgTable.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaEventCfgTable.setDescription('A table that contains all supported event log records on the server and a flag indicating whether or not an SNMP trap needs to be sent when a particular event occurs. Table is indexed by the record type')
hpnsaEventCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 23, 19, 3, 1, 1), ).setIndexNames((0, "HPNSAEVENT-MIB", "hpnsaEventLogRecType"))
if mibBuilder.loadTexts: hpnsaEventCfgTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaEventCfgTableEntry.setDescription('A particular log event type along with the flag indicating whether or not an SNMP trap needs to be sent when that event occurs. ')
hpnsaEventLogRecType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 19, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 20, 21, 22, 23, 33, 34, 35, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 247, 248))).clone(namedValues=NamedValues(("errorEccSingleBit", 1), ("errorEccMultipleBit", 2), ("errorParityMemory", 3), ("errorBusTimeout", 4), ("errorIOChannelCheck", 5), ("errorSoftwareNMI", 6), ("errorPostMemoryResize", 7), ("errorPost", 8), ("errorPciParity", 9), ("errorPciSystem", 10), ("errorCpuFailure", 11), ("errorFailsafeTimeout", 12), ("infoSingleBitErrorDisabled", 13), ("infoErrorLoggingDisabled", 14), ("errorSystemLimitExceeded", 16), ("infoAsynchronousSystemReset", 17), ("infoSystemReconfig", 20), ("errorPCISystem", 21), ("logAreaReset", 22), ("systemRebooted", 23), ("errorECCSingleBit", 33), ("errorECCMultipleBit", 34), ("errorPOSTMemoryResize", 35), ("cpuDeconfigured", 128), ("p6ECCError", 129), ("frontPanelNMI", 130), ("cpuPciSingleFanError", 131), ("cpuPciMultipleFanError", 132), ("cpuPciFanRestored", 133), ("watchdogTimerReset", 134), ("memorySingleFanError", 135), ("memoryMultipleFanError", 136), ("memoryFanRestored", 137), ("cpuReconfigured", 138), ("powerSupplyEvent", 139), ("powerSupplyRemoved", 140), ("powerSupplyInserted", 141), ("controlBoardReset", 142), ("controlBoardPowerCycle", 143), ("cpuCardMissing", 144), ("voltageRegulatingMonitorFailure", 145), ("infoRedundantPowerSupply", 247), ("infoHotSwapModule", 248)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaEventLogRecType.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaEventLogRecType.setDescription('Type of a log event')
hpnsaEventLogRecTrapEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 19, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("trapDisabled", 1), ("trapEnabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnsaEventLogRecTrapEnable.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaEventLogRecTrapEnable.setDescription('Set the value to trapEnabled if you want the event log agent to send SNMP traps when an event of this type occurs. Set it to trapDisabled otherwise.')
hpnsaEccPresent = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 19, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaEccPresent.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaEccPresent.setDescription('Determines whether ECC memory errors are being logged in the hardware log')
hpnsaPostPresent = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 19, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaPostPresent.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaPostPresent.setDescription('Determines whether Post Errors are being logged in the hardware log')
hpnsaTempVoltagePresent = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 19, 4, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaTempVoltagePresent.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaTempVoltagePresent.setDescription('Determines whether Temperature sensor warnings are being logged in the hardware log')
hpnsaASRPresent = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 19, 4, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaASRPresent.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaASRPresent.setDescription('Determines whether ASR service is present on the server')
hpnsaNMIPresent = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 19, 4, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaNMIPresent.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaNMIPresent.setDescription('Determines whether software NMI errors are being logged in the hardware log')
hpnsaEventLogPercentFull = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 19, 5, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaEventLogPercentFull.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaEventLogPercentFull.setDescription('Percentage of the Event Log area occupied by the event record entries')
hpnsaEventLogLastErasedDate = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 19, 5, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaEventLogLastErasedDate.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaEventLogLastErasedDate.setDescription('The date and time the event log area was last erased field octets contents range _________________________________________________ 1 1 years since 1900 0..255 2 2 month 1..12 3 3 day 1..31 4 4 hour 0..23 5 5 minute 0..59 6 6 second 0..59 ')
hpnsaEventLogErasures = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 19, 5, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaEventLogErasures.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaEventLogErasures.setDescription('Number of times the logging area has been erased')
hpnsaEventLogEraseLog = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 19, 5, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1234))).clone(namedValues=NamedValues(("eraseLogNow", 1234)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnsaEventLogEraseLog.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaEventLogEraseLog.setDescription('Set this variable to integer value of 1234 in order to erase the entire log area the next time the agent polls')
hpnsaEventLogTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 23, 19, 5, 5), )
if mibBuilder.loadTexts: hpnsaEventLogTable.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaEventLogTable.setDescription('A table that contains all log events since the last time the log was cleared')
hpnsaEventLogTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 23, 19, 5, 5, 1), ).setIndexNames((0, "HPNSAEVENT-MIB", "hpnsaEventLogTableIndex"))
if mibBuilder.loadTexts: hpnsaEventLogTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaEventLogTableEntry.setDescription('Description of a log event')
hpnsaEventLogTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 19, 5, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaEventLogTableIndex.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaEventLogTableIndex.setDescription('A unique index for event')
hpnsaEventLogEntryDate = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 19, 5, 5, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaEventLogEntryDate.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaEventLogEntryDate.setDescription('The date on which this event occured field octets contents range _________________________________________________ 1 1 years since 1900 0..255 2 2 month 1..12 3 3 day 1..31 4 4 hour 0..23 5 5 minute 0..59 6 6 second 0..59 ')
hpnsaEventLogEntryDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 19, 5, 5, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaEventLogEntryDescr.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaEventLogEntryDescr.setDescription('Description of this log event, including the date and time when the event occured')
hpnsaEventLogEntryTrapID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 19, 5, 5, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaEventLogEntryTrapID.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaEventLogEntryTrapID.setDescription('Trap Id.')
hpnsaEventLogEntryVB1 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 19, 5, 5, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaEventLogEntryVB1.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaEventLogEntryVB1.setDescription('Varbind #1.')
hpnsaEventLogEntryVB2 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 19, 5, 5, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaEventLogEntryVB2.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaEventLogEntryVB2.setDescription('Varbind #2.')
hpnsaEventLogEntryVB3 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 19, 5, 5, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaEventLogEntryVB3.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaEventLogEntryVB3.setDescription('Varbind #3.')
hpnsaEventLogEntryVB4 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 19, 5, 5, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaEventLogEntryVB4.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaEventLogEntryVB4.setDescription('Varbind #4.')
hpnsaEventLogEntryVB5 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 19, 5, 5, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaEventLogEntryVB5.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaEventLogEntryVB5.setDescription('Varbind #5.')
hpnsaEventLogEntryVB6 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 19, 5, 5, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaEventLogEntryVB6.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaEventLogEntryVB6.setDescription('Varbind #6.')
hpnsaEventLogEntryVB7 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 19, 5, 5, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaEventLogEntryVB7.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaEventLogEntryVB7.setDescription('Varbind #7.')
hpnsaEventLogEntryVB8 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 19, 5, 5, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaEventLogEntryVB8.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaEventLogEntryVB8.setDescription('Varbind #8.')
hpnsaEventLogEntryAdvisory = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 19, 5, 5, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 1023))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaEventLogEntryAdvisory.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaEventLogEntryAdvisory.setDescription('Advisory or help text')
hpnsaEventLogEntryReportEntity = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 19, 5, 5, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaEventLogEntryReportEntity.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaEventLogEntryReportEntity.setDescription('Reporting entity of this event')
hpnsaEventLogEntrySeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 19, 5, 5, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaEventLogEntrySeverity.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaEventLogEntrySeverity.setDescription('Severity of this event')
hpnsaEventLogEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 19, 5, 5, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 6, 9, 15))).clone(namedValues=NamedValues(("informational", 2), ("infoWithAlert", 3), ("repaired", 6), ("caution", 9), ("critical", 15)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnsaEventLogEntryStatus.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaEventLogEntryStatus.setDescription('This value specifies the severity status of the event log entry. The event severity can be set to a desired value such as repaired.')
hpnsaEventLogEntryInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 19, 5, 5, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaEventLogEntryInfo.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaEventLogEntryInfo.setDescription('This variable contains the following info about the event: Bit 31..3 = reserved Bit 2: 0 = not-repairable, 1 = repairable Bit 1..0: 0 = not impacting local partition, 1 = impacting local partition, 2 = unknown')
hpnsaEventLogEntryUpdateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 19, 5, 5, 1, 18), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaEventLogEntryUpdateTime.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaEventLogEntryUpdateTime.setDescription('The date on which this event occured field octets contents range _________________________________________________ 1 1 years since 1900 0..255 2 2 month 1..12 3 3 day 1..31 4 4 hour 0..23 5 5 minute 0..59 6 6 second 0..59 ')
hpnsaEventLogNumberOfEvents = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 19, 5, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaEventLogNumberOfEvents.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaEventLogNumberOfEvents.setDescription('This variable indicates the number of events in the event log table.')
hpnsaEventLogAggregationStatus = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 19, 5, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaEventLogAggregationStatus.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaEventLogAggregationStatus.setDescription('This variable indicates the SEL aggregation status.')
hpnsaEventLogLocalTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 23, 19, 5, 8), )
if mibBuilder.loadTexts: hpnsaEventLogLocalTable.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaEventLogLocalTable.setDescription('A table that contains all log events in the local soft log since the last time the log was cleared')
hpnsaEventLogLocalTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 23, 19, 5, 8, 1), ).setIndexNames((0, "HPNSAEVENT-MIB", "hpnsaEventLogTableIndex"))
if mibBuilder.loadTexts: hpnsaEventLogLocalTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaEventLogLocalTableEntry.setDescription('Description of a log event in the local soft log')
hpnsaEventLogLocalTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 19, 5, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaEventLogLocalTableIndex.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaEventLogLocalTableIndex.setDescription('A unique index for event in the local soft log')
hpnsaEventLogLocalEntryDate = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 19, 5, 8, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaEventLogLocalEntryDate.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaEventLogLocalEntryDate.setDescription('The date on which this event occured field octets contents range _________________________________________________ 1 1 years since 1900 0..255 2 2 month 1..12 3 3 day 1..31 4 4 hour 0..23 5 5 minute 0..59 6 6 second 0..59 ')
hpnsaEventLogLocalEntryDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 19, 5, 8, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaEventLogLocalEntryDescr.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaEventLogLocalEntryDescr.setDescription('Description of this log event, including the date and time when the event occured')
hpnsaEventLogLocalEntryTrapID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 19, 5, 8, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaEventLogLocalEntryTrapID.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaEventLogLocalEntryTrapID.setDescription('Trap Id.')
hpnsaEventLogLocalEntryVB1 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 19, 5, 8, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaEventLogLocalEntryVB1.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaEventLogLocalEntryVB1.setDescription('Varbind #1.')
hpnsaEventLogLocalEntryVB2 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 19, 5, 8, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaEventLogLocalEntryVB2.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaEventLogLocalEntryVB2.setDescription('Varbind #2.')
hpnsaEventLogLocalEntryVB3 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 19, 5, 8, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaEventLogLocalEntryVB3.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaEventLogLocalEntryVB3.setDescription('Varbind #3.')
hpnsaEventLogLocalEntryVB4 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 19, 5, 8, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaEventLogLocalEntryVB4.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaEventLogLocalEntryVB4.setDescription('Varbind #4.')
hpnsaEventLogLocalEntryVB5 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 19, 5, 8, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaEventLogLocalEntryVB5.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaEventLogLocalEntryVB5.setDescription('Varbind #5.')
hpnsaEventLogLocalEntryVB6 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 19, 5, 8, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaEventLogLocalEntryVB6.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaEventLogLocalEntryVB6.setDescription('Varbind #6.')
hpnsaEventLogLocalEntryVB7 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 19, 5, 8, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaEventLogLocalEntryVB7.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaEventLogLocalEntryVB7.setDescription('Varbind #7.')
hpnsaEventLogLocalEntryVB8 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 19, 5, 8, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaEventLogLocalEntryVB8.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaEventLogLocalEntryVB8.setDescription('Varbind #8.')
hpnsaEventLogLocalEntryAdvisory = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 19, 5, 8, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 1023))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaEventLogLocalEntryAdvisory.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaEventLogLocalEntryAdvisory.setDescription('Advisory or help text')
hpnsaEventLogLocalEntryReportEntity = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 19, 5, 8, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaEventLogLocalEntryReportEntity.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaEventLogLocalEntryReportEntity.setDescription('Reporting entity of this event')
hpnsaEventLogLocalEntrySeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 19, 5, 8, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaEventLogLocalEntrySeverity.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaEventLogLocalEntrySeverity.setDescription('Severity of this event')
hpnsaEventLogLocalEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 19, 5, 8, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 6, 9, 15))).clone(namedValues=NamedValues(("informational", 2), ("infoWithAlert", 3), ("repaired", 6), ("caution", 9), ("critical", 15)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnsaEventLogLocalEntryStatus.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaEventLogLocalEntryStatus.setDescription('This value specifies the severity status of the event log entry. The event severity can be set to a desired value such as repaired.')
hpnsaEventLogLocalEntryInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 19, 5, 8, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaEventLogLocalEntryInfo.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaEventLogLocalEntryInfo.setDescription('This variable contains the following info about the event: Bit 31..3 = reserved Bit 2: 0 = not-repairable, 1 = repairable Bit 1..0: 0 = not impacting local partition, 1 = impacting local partition, 2 = unknown')
hpnsaEventLogLocalEntryUpdateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 19, 5, 8, 1, 18), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaEventLogLocalEntryUpdateTime.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaEventLogLocalEntryUpdateTime.setDescription('The date on which this event occured field octets contents range _________________________________________________ 1 1 years since 1900 0..255 2 2 month 1..12 3 3 day 1..31 4 4 hour 0..23 5 5 minute 0..59 6 6 second 0..59 ')
hpnsaEventLogNumOfLocalEvents = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 19, 5, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaEventLogNumOfLocalEvents.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaEventLogNumOfLocalEvents.setDescription('This variable indicates the number of events in the local event log table.')
hpnsaEventClearLEDs = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 19, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clearAttentionLED", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: hpnsaEventClearLEDs.setStatus('optional')
if mibBuilder.loadTexts: hpnsaEventClearLEDs.setDescription('Clear attention LED')
mibBuilder.exportSymbols("HPNSAEVENT-MIB", hpnsaEventLogEntryVB8=hpnsaEventLogEntryVB8, hpnsaEventLogNumOfLocalEvents=hpnsaEventLogNumOfLocalEvents, hpnsaEventLogRecTrapEnable=hpnsaEventLogRecTrapEnable, hpnsaEventLogLocalEntryUpdateTime=hpnsaEventLogLocalEntryUpdateTime, hpnsaEventLogLocalEntryDescr=hpnsaEventLogLocalEntryDescr, hpnsaEventLogLocalEntryVB2=hpnsaEventLogLocalEntryVB2, hpnsaEventLogEntryStatus=hpnsaEventLogEntryStatus, hpnsaPostPresent=hpnsaPostPresent, hpnsaEventLogEntryVB2=hpnsaEventLogEntryVB2, hpnsaEventLogEntryVB7=hpnsaEventLogEntryVB7, hpnsaEventLogLastErasedDate=hpnsaEventLogLastErasedDate, hpnsaEventLogEraseLog=hpnsaEventLogEraseLog, hpnsaEventLogEntryDate=hpnsaEventLogEntryDate, hpnsaEventLogEntryVB4=hpnsaEventLogEntryVB4, hpnsaEventLogEntryReportEntity=hpnsaEventLogEntryReportEntity, hpnsaEventLogEntryUpdateTime=hpnsaEventLogEntryUpdateTime, hpnsaEventLogTable=hpnsaEventLogTable, hpnsaEventLogLocalTable=hpnsaEventLogLocalTable, hpnsaEventLogLocalEntryVB4=hpnsaEventLogLocalEntryVB4, hpnsaEventLogAgentTable=hpnsaEventLogAgentTable, hpnsaTempVoltagePresent=hpnsaTempVoltagePresent, hpnsaASRPresent=hpnsaASRPresent, hpnsaEventCfgTable=hpnsaEventCfgTable, hpnsaEventLogLocalEntryDate=hpnsaEventLogLocalEntryDate, hpnsaEventLogEntryInfo=hpnsaEventLogEntryInfo, hpnsaEventLogLocalEntryVB8=hpnsaEventLogLocalEntryVB8, hpnsaEventCfgTableEntry=hpnsaEventCfgTableEntry, hpnsaEventLogLocalEntryTrapID=hpnsaEventLogLocalEntryTrapID, hpnsaEventLogLocalEntryVB3=hpnsaEventLogLocalEntryVB3, hpnsaEventLogEntryVB3=hpnsaEventLogEntryVB3, hpnsaEventAgentCfgInfo=hpnsaEventAgentCfgInfo, hpnsaEventLogLocalTableIndex=hpnsaEventLogLocalTableIndex, hpnsaEventCustomerAcknowledgeActions=hpnsaEventCustomerAcknowledgeActions, hpnsaEventLogEntryAdvisory=hpnsaEventLogEntryAdvisory, hpnsaEventLogLocalEntryStatus=hpnsaEventLogLocalEntryStatus, hpnsaEventLogRev=hpnsaEventLogRev, hpnsaEventLogRecType=hpnsaEventLogRecType, hpnsaEventLogEntrySeverity=hpnsaEventLogEntrySeverity, hpnsaEventLogLocalEntryVB6=hpnsaEventLogLocalEntryVB6, hpnsaEventLogErasures=hpnsaEventLogErasures, hpnsaEventLogLocalEntrySeverity=hpnsaEventLogLocalEntrySeverity, hpnsaEventLogAgentInfo=hpnsaEventLogAgentInfo, hpnsaEventLogTableEntry=hpnsaEventLogTableEntry, hpnsaEventLogTableIndex=hpnsaEventLogTableIndex, hpnsaEventLogEntryVB1=hpnsaEventLogEntryVB1, hp=hp, hpnsaEventLogAgentName=hpnsaEventLogAgentName, hpnsaEventLogLocalEntryAdvisory=hpnsaEventLogLocalEntryAdvisory, hpnsaEventLogLocalEntryInfo=hpnsaEventLogLocalEntryInfo, hpnsaEventLogAgentVersion=hpnsaEventLogAgentVersion, hpnsaEventLogMibRevMinor=hpnsaEventLogMibRevMinor, hpnsaEventLogLocalEntryReportEntity=hpnsaEventLogLocalEntryReportEntity, hpnsaEventLogAgentEntry=hpnsaEventLogAgentEntry, hpnsaNMIPresent=hpnsaNMIPresent, nm=nm, hpnsaEventLogLocalEntryVB5=hpnsaEventLogLocalEntryVB5, hpnsaEventLogAggregationStatus=hpnsaEventLogAggregationStatus, hpnsaEventLogPresenceId=hpnsaEventLogPresenceId, hpnsaEventLogEntryVB6=hpnsaEventLogEntryVB6, hpnsaEventLogNumberOfEvents=hpnsaEventLogNumberOfEvents, hpnsaEventLog=hpnsaEventLog, hpnsaEventLogStatistics=hpnsaEventLogStatistics, hpnsaEventLogEntryTrapID=hpnsaEventLogEntryTrapID, hpnsaEventLogAgentIndex=hpnsaEventLogAgentIndex, hpnsaEventLogMibRevMajor=hpnsaEventLogMibRevMajor, hpnsaEventLogPercentFull=hpnsaEventLogPercentFull, hpnsaEventLogEntryVB5=hpnsaEventLogEntryVB5, hpnsaEventLogEntryDescr=hpnsaEventLogEntryDescr, hpnsaEventLogLocalEntryVB1=hpnsaEventLogLocalEntryVB1, hpnsa=hpnsa, hpnsaEventLogLocalEntryVB7=hpnsaEventLogLocalEntryVB7, hpnsaEventLogAgentDate=hpnsaEventLogAgentDate, hpnsaEventLogLocalTableEntry=hpnsaEventLogLocalTableEntry, hpnsaEventClearLEDs=hpnsaEventClearLEDs, hpnsaEccPresent=hpnsaEccPresent)
