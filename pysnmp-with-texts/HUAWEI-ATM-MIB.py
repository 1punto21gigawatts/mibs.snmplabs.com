#
# PySNMP MIB module HUAWEI-ATM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HUAWEI-ATM-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:42:57 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint")
AtmVpIdentifier, AtmVcIdentifier = mibBuilder.importSymbols("ATM-TC-MIB", "AtmVpIdentifier", "AtmVcIdentifier")
hwDatacomm, = mibBuilder.importSymbols("HUAWEI-MIB", "hwDatacomm")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
ObjectIdentity, iso, Unsigned32, Counter64, Bits, TimeTicks, Counter32, NotificationType, ModuleIdentity, IpAddress, Integer32, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "iso", "Unsigned32", "Counter64", "Bits", "TimeTicks", "Counter32", "NotificationType", "ModuleIdentity", "IpAddress", "Integer32", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier")
TextualConvention, DisplayString, RowStatus, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "RowStatus", "TruthValue")
hwAtmMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2011, 5, 25, 156))
if mibBuilder.loadTexts: hwAtmMIB.setLastUpdated('200710172230Z')
if mibBuilder.loadTexts: hwAtmMIB.setOrganization('Huawei Technologies co.,Ltd.')
if mibBuilder.loadTexts: hwAtmMIB.setContactInfo('VRP Team Huawei Technologies co.,Ltd. Huawei Bld.,NO.3 Xinxi Rd., Shang-Di Information Industry Base, Hai-Dian District Beijing P.R. China http://www.huawei.com Zip:100085 ')
if mibBuilder.loadTexts: hwAtmMIB.setDescription('This MIB is mainly used to configure the ATM OC-3/STM-1 and ATM OC-12/STM-4 interface, IPoA, IPoEoA, PVC service type, OAM F5 loopback, parameters of the VP limit, and mapping between the peer VPI and the local VPI.')
hwAtmObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 156, 1))
hwAtmTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 156, 1, 1), )
if mibBuilder.loadTexts: hwAtmTable.setStatus('current')
if mibBuilder.loadTexts: hwAtmTable.setDescription('This table is used to configure the parameters of the ATM interface.')
hwAtmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 156, 1, 1, 1), ).setIndexNames((0, "HUAWEI-ATM-MIB", "hwAtmIfIndex"))
if mibBuilder.loadTexts: hwAtmEntry.setStatus('current')
if mibBuilder.loadTexts: hwAtmEntry.setDescription('This table is used to configure the parameters of the ATM interface.')
hwAtmIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 156, 1, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hwAtmIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwAtmIfIndex.setDescription('Indicates the interface index.')
hwAtmIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 156, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("oc3OrStm1", 1), ("oc12OrStm4", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAtmIfType.setStatus('current')
if mibBuilder.loadTexts: hwAtmIfType.setDescription('Indicates the interface type.')
hwAtmClock = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 156, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("master", 1), ("slave", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwAtmClock.setStatus('current')
if mibBuilder.loadTexts: hwAtmClock.setDescription('Master clock: uses the internal clock signal. Slave clock: uses the line clock signal.')
hwAtmFrameFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 156, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sdh", 1), ("sonet", 2))).clone('sdh')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwAtmFrameFormat.setStatus('current')
if mibBuilder.loadTexts: hwAtmFrameFormat.setDescription('For the optical interface STM-1/STM-4, the frame format on the ATM interface is SDH; for the OC-3/OC-12 interface, the frame format is SONET. The default frame format is SDH.')
hwAtmScramble = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 156, 1, 1, 1, 14), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwAtmScramble.setStatus('current')
if mibBuilder.loadTexts: hwAtmScramble.setDescription('By default, the scramble function is enabled. The scramble function takes effect only on payload rather than cell header. true: enables the scramble function. false: disables the scramble function.')
hwAtmLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 156, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 255))).clone(namedValues=NamedValues(("local", 1), ("remote", 2), ("payload", 3), ("none", 255))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwAtmLoopback.setStatus('current')
if mibBuilder.loadTexts: hwAtmLoopback.setDescription('Enable the loopback function of the channel. local: enables the local loopback on the interface. remote: enables the remote loopback on the interface. payload: enables the remote payload loopback on the interface. By default, all loopback functions are disabled.')
hwAtmMapPvpTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 156, 1, 2), )
if mibBuilder.loadTexts: hwAtmMapPvpTable.setStatus('current')
if mibBuilder.loadTexts: hwAtmMapPvpTable.setDescription('This table is used to configure the mapping between the peer VPI and the local VPI.')
hwAtmMapPvpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 156, 1, 2, 1), ).setIndexNames((0, "HUAWEI-ATM-MIB", "hwAtmMapPvpIfIndex"), (0, "HUAWEI-ATM-MIB", "hwAtmMapPvpVplVpi"))
if mibBuilder.loadTexts: hwAtmMapPvpEntry.setStatus('current')
if mibBuilder.loadTexts: hwAtmMapPvpEntry.setDescription('This table is used to configure the mapping between the peer VPI and the local VPI.')
hwAtmMapPvpIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 156, 1, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hwAtmMapPvpIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwAtmMapPvpIfIndex.setDescription('Indicates the interface index.')
hwAtmMapPvpVplVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 156, 1, 2, 1, 2), AtmVpIdentifier())
if mibBuilder.loadTexts: hwAtmMapPvpVplVpi.setStatus('current')
if mibBuilder.loadTexts: hwAtmMapPvpVplVpi.setDescription('Indicates the local VPI value. The value is an integer ranging from 0 to 255.')
hwAtmMapPvpRemoteVplVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 156, 1, 2, 1, 11), AtmVpIdentifier()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAtmMapPvpRemoteVplVpi.setStatus('current')
if mibBuilder.loadTexts: hwAtmMapPvpRemoteVplVpi.setDescription('Indicates the peer VPI value. The value is an integer ranging from 0 to 255.')
hwAtmMapPvpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 156, 1, 2, 1, 51), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAtmMapPvpRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwAtmMapPvpRowStatus.setDescription('This variable is used to create or delete an object.')
hwAtmMapPvcTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 156, 1, 3), )
if mibBuilder.loadTexts: hwAtmMapPvcTable.setStatus('current')
if mibBuilder.loadTexts: hwAtmMapPvcTable.setDescription('This table is used to configure the mapping between the peer VPI/VCI and the local VPI/VCI.')
hwAtmMapPvcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 156, 1, 3, 1), ).setIndexNames((0, "HUAWEI-ATM-MIB", "hwAtmVclIfIndex"), (0, "HUAWEI-ATM-MIB", "hwAtmVclVpi"), (0, "HUAWEI-ATM-MIB", "hwAtmVclVci"))
if mibBuilder.loadTexts: hwAtmMapPvcEntry.setStatus('current')
if mibBuilder.loadTexts: hwAtmMapPvcEntry.setDescription('This table is used to configure the mapping between the peer VPI/VCI and the local VPI/VCI.')
hwAtmMapPvcRemoteVclVci = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 156, 1, 3, 1, 11), AtmVcIdentifier()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAtmMapPvcRemoteVclVci.setStatus('current')
if mibBuilder.loadTexts: hwAtmMapPvcRemoteVclVci.setDescription('Indicates the peer VCI value. VCI is short for Virtual Channel Identifier. The VCI value ranges from 0 to 2047. Generally, the values from 0 to 31 are reserved for specail use.')
hwAtmMapPvcRemoteVclVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 156, 1, 3, 1, 12), AtmVpIdentifier()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAtmMapPvcRemoteVclVpi.setStatus('current')
if mibBuilder.loadTexts: hwAtmMapPvcRemoteVclVpi.setDescription('Indicates the peer VPI value. The value is an integer ranging from 0 to 255.')
hwAtmMapPvcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 156, 1, 3, 1, 51), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAtmMapPvcRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwAtmMapPvcRowStatus.setDescription('This variable is used to create or delete an object.')
hwAtmServiceTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 156, 1, 4), )
if mibBuilder.loadTexts: hwAtmServiceTable.setStatus('current')
if mibBuilder.loadTexts: hwAtmServiceTable.setDescription('This table is used to configure the service type and related parameters for the PVC.')
hwAtmServiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 156, 1, 4, 1), ).setIndexNames((0, "HUAWEI-ATM-MIB", "hwAtmServiceName"))
if mibBuilder.loadTexts: hwAtmServiceEntry.setStatus('current')
if mibBuilder.loadTexts: hwAtmServiceEntry.setDescription('This table is used to configure the service type for the PVC.')
hwAtmServiceName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 156, 1, 4, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31)))
if mibBuilder.loadTexts: hwAtmServiceName.setStatus('current')
if mibBuilder.loadTexts: hwAtmServiceName.setDescription('Indicates the name of the service type. The name is a string of 1 to 31 characters.')
hwAtmServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 156, 1, 4, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("cbr", 1), ("vbrNrt", 2), ("vbrRt", 3), ("ubr", 4), ("ubrPlus", 5))).clone('ubr')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAtmServiceType.setStatus('current')
if mibBuilder.loadTexts: hwAtmServiceType.setDescription('Set the service type for the PVC as required.')
hwAtmServiceOutputPcr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 156, 1, 4, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(64, 149760), )).clone(149760)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAtmServiceOutputPcr.setStatus('current')
if mibBuilder.loadTexts: hwAtmServiceOutputPcr.setDescription('Indicates the peak output rate of the ATM cell. When hwPvcServiceTableType is ubr, the peak output rate is 0.')
hwAtmServiceOutputScr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 156, 1, 4, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(64, 149760), )).clone(149760)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAtmServiceOutputScr.setStatus('current')
if mibBuilder.loadTexts: hwAtmServiceOutputScr.setDescription('Indicates the peak output rate of the ATM cell. When hwPvcServiceTableType is cbr or ubr, the peak output rate is 0.')
hwAtmServiceOutputMbs = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 156, 1, 4, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 512), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAtmServiceOutputMbs.setStatus('current')
if mibBuilder.loadTexts: hwAtmServiceOutputMbs.setDescription('Indicates the peak output rate of the ATM cell. When hwPvcServiceTableType is cbr or ubr, the peak output rate is 0.')
hwAtmServiceCbrCdvtValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 156, 1, 4, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000)).clone(500)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAtmServiceCbrCdvtValue.setStatus('current')
if mibBuilder.loadTexts: hwAtmServiceCbrCdvtValue.setDescription('Indicates the limit of the ATM cell delay variation. When hwPvcServiceTableType is cbr, the variable is valid. For other service types, the variable is 0.')
hwAtmServiceOutputMcr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 156, 1, 4, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(64, 149760), )).clone(149760)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAtmServiceOutputMcr.setStatus('current')
if mibBuilder.loadTexts: hwAtmServiceOutputMcr.setDescription('Indicates the mini width guarantee bit rate of the ATM cell. When hwPvcServiceTableType is ubr, the peak output rate is 0.')
hwAtmServiceRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 156, 1, 4, 1, 51), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAtmServiceRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwAtmServiceRowStatus.setDescription('This variable is used to create or delete an object.')
hwAtmPvcServiceTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 156, 1, 5), )
if mibBuilder.loadTexts: hwAtmPvcServiceTable.setStatus('current')
if mibBuilder.loadTexts: hwAtmPvcServiceTable.setDescription('This table is used to configure the service type for the PVC.')
hwAtmPvcServiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 156, 1, 5, 1), ).setIndexNames((0, "HUAWEI-ATM-MIB", "hwAtmVclIfIndex"), (0, "HUAWEI-ATM-MIB", "hwAtmVclVpi"), (0, "HUAWEI-ATM-MIB", "hwAtmVclVci"))
if mibBuilder.loadTexts: hwAtmPvcServiceEntry.setStatus('current')
if mibBuilder.loadTexts: hwAtmPvcServiceEntry.setDescription('This table is used to configure the service type for the PVC.')
hwAtmPvcServiceName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 156, 1, 5, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAtmPvcServiceName.setStatus('current')
if mibBuilder.loadTexts: hwAtmPvcServiceName.setDescription('Indicates the name of the service type. The name is a string of 1 to 31 characters.')
hwAtmPvcTransmittalDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 156, 1, 5, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("input", 1), ("output", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAtmPvcTransmittalDirection.setStatus('current')
if mibBuilder.loadTexts: hwAtmPvcTransmittalDirection.setDescription('Indicates the input or output tpye of the service type.')
hwAtmPvcServiceRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 156, 1, 5, 1, 51), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAtmPvcServiceRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwAtmPvcServiceRowStatus.setDescription('This variable is used to create or delete an object.')
hwAtmIfConfTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 156, 1, 11), )
if mibBuilder.loadTexts: hwAtmIfConfTable.setStatus('current')
if mibBuilder.loadTexts: hwAtmIfConfTable.setDescription('Indicates the configuration of the ATM interface.')
hwAtmIfConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 156, 1, 11, 1), ).setIndexNames((0, "HUAWEI-ATM-MIB", "hwAtmIfConfIfIndex"))
if mibBuilder.loadTexts: hwAtmIfConfEntry.setStatus('current')
if mibBuilder.loadTexts: hwAtmIfConfEntry.setDescription('Indicates the configuration of the ATM interface.')
hwAtmIfConfIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 156, 1, 11, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hwAtmIfConfIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwAtmIfConfIfIndex.setDescription('Indicates the interface index.')
hwAtmIfConfMaxVccs = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 156, 1, 11, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2048))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwAtmIfConfMaxVccs.setStatus('current')
if mibBuilder.loadTexts: hwAtmIfConfMaxVccs.setDescription('Indicates the maximum number of the PVCs.')
hwAtmIfConfOperVccs = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 156, 1, 11, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAtmIfConfOperVccs.setStatus('current')
if mibBuilder.loadTexts: hwAtmIfConfOperVccs.setDescription('Indicates the number of the configured PVCs.')
hwAtmIfConfIntfType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 156, 1, 11, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("uni", 1), ("nni", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwAtmIfConfIntfType.setStatus('current')
if mibBuilder.loadTexts: hwAtmIfConfIntfType.setDescription('This object indicates the type of the serial interface with the ATM protocol.')
hwAtmVplTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 156, 1, 12), )
if mibBuilder.loadTexts: hwAtmVplTable.setStatus('current')
if mibBuilder.loadTexts: hwAtmVplTable.setDescription('Indicates the configuration of the ATM PVP.')
hwAtmVplEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 156, 1, 12, 1), ).setIndexNames((0, "HUAWEI-ATM-MIB", "hwAtmVplIfIndex"), (0, "HUAWEI-ATM-MIB", "hwAtmVplVpi"))
if mibBuilder.loadTexts: hwAtmVplEntry.setStatus('current')
if mibBuilder.loadTexts: hwAtmVplEntry.setDescription('Indicates the configuration of the ATM PVP.')
hwAtmVplIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 156, 1, 12, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hwAtmVplIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwAtmVplIfIndex.setDescription('Indicates the interface index.')
hwAtmVplVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 156, 1, 12, 1, 2), AtmVpIdentifier())
if mibBuilder.loadTexts: hwAtmVplVpi.setStatus('current')
if mibBuilder.loadTexts: hwAtmVplVpi.setDescription('VPI.')
hwAtmVplRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 156, 1, 12, 1, 51), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAtmVplRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwAtmVplRowStatus.setDescription('Indicates the status of the row.')
hwAtmVclTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 156, 1, 13), )
if mibBuilder.loadTexts: hwAtmVclTable.setStatus('current')
if mibBuilder.loadTexts: hwAtmVclTable.setDescription('Indicates the configuration of the ATM PVC.')
hwAtmVclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 156, 1, 13, 1), ).setIndexNames((0, "HUAWEI-ATM-MIB", "hwAtmVclIfIndex"), (0, "HUAWEI-ATM-MIB", "hwAtmVclVpi"), (0, "HUAWEI-ATM-MIB", "hwAtmVclVci"))
if mibBuilder.loadTexts: hwAtmVclEntry.setStatus('current')
if mibBuilder.loadTexts: hwAtmVclEntry.setDescription('Indicates the configuration of the ATM PVC.')
hwAtmVclIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 156, 1, 13, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hwAtmVclIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwAtmVclIfIndex.setDescription('Indicates the interface index.')
hwAtmVclVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 156, 1, 13, 1, 2), AtmVpIdentifier())
if mibBuilder.loadTexts: hwAtmVclVpi.setStatus('current')
if mibBuilder.loadTexts: hwAtmVclVpi.setDescription('VPI.')
hwAtmVclVci = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 156, 1, 13, 1, 3), AtmVcIdentifier())
if mibBuilder.loadTexts: hwAtmVclVci.setStatus('current')
if mibBuilder.loadTexts: hwAtmVclVci.setDescription('VCI.')
hwAtmVclName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 156, 1, 13, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAtmVclName.setStatus('current')
if mibBuilder.loadTexts: hwAtmVclName.setDescription('Indicates the name of the PVC.')
hwAtmVccAal5EncapsType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 156, 1, 13, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("aal5Snap", 1), ("aal5Mux", 2), ("aal5MuxNonstandard", 3), ("aal5Nlpid", 4))).clone()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAtmVccAal5EncapsType.setStatus('current')
if mibBuilder.loadTexts: hwAtmVccAal5EncapsType.setDescription('Indicates the encapsulation mode of AAL5.')
hwAtmVclRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 156, 1, 13, 1, 51), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAtmVclRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwAtmVclRowStatus.setDescription('Indicates the status of the row.')
hwAtmPvcIpoaTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 156, 1, 14), )
if mibBuilder.loadTexts: hwAtmPvcIpoaTable.setStatus('current')
if mibBuilder.loadTexts: hwAtmPvcIpoaTable.setDescription('This table is used to configure the IPoA mapping on the PVC.')
hwAtmPvcIpoaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 156, 1, 14, 1), ).setIndexNames((0, "HUAWEI-ATM-MIB", "hwAtmVclIfIndex"), (0, "HUAWEI-ATM-MIB", "hwAtmVclVpi"), (0, "HUAWEI-ATM-MIB", "hwAtmVclVci"), (0, "HUAWEI-ATM-MIB", "hwAtmPvcIpoaType"), (0, "HUAWEI-ATM-MIB", "hwAtmPvcIpoaIpAddress"))
if mibBuilder.loadTexts: hwAtmPvcIpoaEntry.setStatus('current')
if mibBuilder.loadTexts: hwAtmPvcIpoaEntry.setDescription('This table is used to configure the IPoA mapping on the PVC.')
hwAtmPvcIpoaType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 156, 1, 14, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ip", 1), ("default", 2), ("inarp", 3))))
if mibBuilder.loadTexts: hwAtmPvcIpoaType.setStatus('current')
if mibBuilder.loadTexts: hwAtmPvcIpoaType.setDescription('Indicates the type of the PVC IPoA mapping. ip: sets the peer IP address and mask that are mapped to the PVC. default: configures a mapping with default route attributes. If no mapping of the next hop address of a packet can be found, the packet is sent over the PVC if the PVC is configured with default mapping. inarp: configures InARP on the PVC.')
hwAtmPvcIpoaIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 156, 1, 14, 1, 4), IpAddress())
if mibBuilder.loadTexts: hwAtmPvcIpoaIpAddress.setStatus('current')
if mibBuilder.loadTexts: hwAtmPvcIpoaIpAddress.setDescription('Indicates the peer IP address mapped to the PVC.')
hwAtmPvcIpoaIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 156, 1, 14, 1, 11), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAtmPvcIpoaIpMask.setStatus('current')
if mibBuilder.loadTexts: hwAtmPvcIpoaIpMask.setDescription('Indicates the IP address mask. The IP address mask is an optional parameter.')
hwAtmPvcIpoaInarpInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 156, 1, 14, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 600), )).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAtmPvcIpoaInarpInterval.setStatus('current')
if mibBuilder.loadTexts: hwAtmPvcIpoaInarpInterval.setDescription('Indicates the interval for sending InARP packets. The parameter is optional. The value ranges from 1 to 600 in seconds. If the type of the PVC IPoA mapping is IP or default, the value is 0. The default value is 1.')
hwAtmPvcIpoaBroadcast = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 156, 1, 14, 1, 13), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAtmPvcIpoaBroadcast.setStatus('current')
if mibBuilder.loadTexts: hwAtmPvcIpoaBroadcast.setDescription('If a mapping with this attribute is configured on the PVC, broadcast packets on the interface where the PVC resides will be sent over the PVC.')
hwAtmPvcIpoaRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 156, 1, 14, 1, 51), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAtmPvcIpoaRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwAtmPvcIpoaRowStatus.setDescription('RowStatus.')
hwAtmPvcBridgeTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 156, 1, 15), )
if mibBuilder.loadTexts: hwAtmPvcBridgeTable.setStatus('current')
if mibBuilder.loadTexts: hwAtmPvcBridgeTable.setDescription('This table is used to configure the IPoEoA mapping and PPPoEoA mapping on the PVC.')
hwAtmPvcBridgeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 156, 1, 15, 1), ).setIndexNames((0, "HUAWEI-ATM-MIB", "hwAtmVclIfIndex"), (0, "HUAWEI-ATM-MIB", "hwAtmVclVpi"), (0, "HUAWEI-ATM-MIB", "hwAtmVclVci"))
if mibBuilder.loadTexts: hwAtmPvcBridgeEntry.setStatus('current')
if mibBuilder.loadTexts: hwAtmPvcBridgeEntry.setDescription('This table is used to configure the IPoEoA mapping and PPPoEoA mapping on the PVC.')
hwAtmPvcBridgeDstIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 156, 1, 15, 1, 11), InterfaceIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAtmPvcBridgeDstIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwAtmPvcBridgeDstIfIndex.setDescription('Indicates the index of the VE interface.')
hwAtmPvcBridgeRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 156, 1, 15, 1, 51), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAtmPvcBridgeRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwAtmPvcBridgeRowStatus.setDescription('RowStatus.')
hwAtmPvcOamLoopbackTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 156, 1, 17), )
if mibBuilder.loadTexts: hwAtmPvcOamLoopbackTable.setStatus('current')
if mibBuilder.loadTexts: hwAtmPvcOamLoopbackTable.setDescription('This table is used to configure OAM F5 Loopback, enable the sending of OAM F5 Loopback cells, and configure the parameters of the retransmission check or modify the parameters of the retransmission check.')
hwAtmPvcOAMLoopbackEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 156, 1, 17, 1), ).setIndexNames((0, "HUAWEI-ATM-MIB", "hwAtmVclIfIndex"), (0, "HUAWEI-ATM-MIB", "hwAtmVclVpi"), (0, "HUAWEI-ATM-MIB", "hwAtmVclVci"))
if mibBuilder.loadTexts: hwAtmPvcOAMLoopbackEntry.setStatus('current')
if mibBuilder.loadTexts: hwAtmPvcOAMLoopbackEntry.setDescription('This table is used to configure OAM F5 Loopback.')
hwAtmPvcOAMLoopbackFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 156, 1, 17, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 600))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAtmPvcOAMLoopbackFrequency.setStatus('current')
if mibBuilder.loadTexts: hwAtmPvcOAMLoopbackFrequency.setDescription('Indicates the interval for sending OAM F5 Loopback cells.')
hwAtmPvcOAMLoopbackUpCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 156, 1, 17, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 600)).clone(3)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAtmPvcOAMLoopbackUpCount.setStatus('current')
if mibBuilder.loadTexts: hwAtmPvcOAMLoopbackUpCount.setDescription('Indicates the number of continuous OAM F5 Loopback cells that must be received before the PVC turns Up.')
hwAtmPvcOAMLoopbackDownCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 156, 1, 17, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 600)).clone(5)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAtmPvcOAMLoopbackDownCount.setStatus('current')
if mibBuilder.loadTexts: hwAtmPvcOAMLoopbackDownCount.setDescription('Indicates the number of continuous OAM F5 Loopback cells that are not received before the PVC turns Down.')
hwAtmPvcOAMLoopbackRetryFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 156, 1, 17, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAtmPvcOAMLoopbackRetryFrequency.setStatus('current')
if mibBuilder.loadTexts: hwAtmPvcOAMLoopbackRetryFrequency.setDescription('Indicates the interval for sending cells during OAM F5 Loopback retransmission verification before the PVC status changes.')
hwAtmPvcOAMLoopbackRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 156, 1, 17, 1, 51), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAtmPvcOAMLoopbackRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwAtmPvcOAMLoopbackRowStatus.setDescription('RowStatus')
hwAtmPvpLimitTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 156, 1, 18), )
if mibBuilder.loadTexts: hwAtmPvpLimitTable.setStatus('current')
if mibBuilder.loadTexts: hwAtmPvpLimitTable.setDescription('This table is used to configure the VP limit. To monitor the VP, configure related VP parameters.')
hwAtmPvpLimitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 156, 1, 18, 1), ).setIndexNames((0, "HUAWEI-ATM-MIB", "hwAtmPvpLimitIfIndex"), (0, "HUAWEI-ATM-MIB", "hwAtmPvpLimitVpi"))
if mibBuilder.loadTexts: hwAtmPvpLimitEntry.setStatus('current')
if mibBuilder.loadTexts: hwAtmPvpLimitEntry.setDescription('This table is used to configure the VP limit.')
hwAtmPvpLimitIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 156, 1, 18, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hwAtmPvpLimitIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwAtmPvpLimitIfIndex.setDescription('Indicates the interface index.')
hwAtmPvpLimitVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 156, 1, 18, 1, 2), AtmVpIdentifier())
if mibBuilder.loadTexts: hwAtmPvpLimitVpi.setStatus('current')
if mibBuilder.loadTexts: hwAtmPvpLimitVpi.setDescription('VPI.')
hwAtmPvpLimitPeakRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 156, 1, 18, 1, 11), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAtmPvpLimitPeakRate.setStatus('current')
if mibBuilder.loadTexts: hwAtmPvpLimitPeakRate.setDescription('VCI.')
hwAtmPvpLimitRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 156, 1, 18, 1, 51), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAtmPvpLimitRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwAtmPvpLimitRowStatus.setDescription('RowStatus. ')
hwAtmConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 156, 11))
hwAtmCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 156, 11, 1))
hwAtmCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2011, 5, 25, 156, 11, 1, 1)).setObjects(("HUAWEI-ATM-MIB", "hwAtmObjectGroup"), ("HUAWEI-ATM-MIB", "hwAtmMapPvpObjectGroup"), ("HUAWEI-ATM-MIB", "hwAtmMapPvcObjectGroup"), ("HUAWEI-ATM-MIB", "hwAtmPvcIpoaObjectGroup"), ("HUAWEI-ATM-MIB", "hwAtmPvcBridgeObjectGroup"), ("HUAWEI-ATM-MIB", "hwAtmPvcServiceObjectGroup"), ("HUAWEI-ATM-MIB", "hwAtmPvcOAMLoopbackObjectGroup"), ("HUAWEI-ATM-MIB", "hwAtmPvpLimitObjectGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwAtmCompliance = hwAtmCompliance.setStatus('current')
if mibBuilder.loadTexts: hwAtmCompliance.setDescription('The compliance statement for systems supporting the HUAWEI-ATM-MIB.')
hwAtmGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 156, 11, 2))
hwAtmObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 156, 11, 2, 1)).setObjects(("HUAWEI-ATM-MIB", "hwAtmIfType"), ("HUAWEI-ATM-MIB", "hwAtmClock"), ("HUAWEI-ATM-MIB", "hwAtmFrameFormat"), ("HUAWEI-ATM-MIB", "hwAtmScramble"), ("HUAWEI-ATM-MIB", "hwAtmLoopback"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwAtmObjectGroup = hwAtmObjectGroup.setStatus('current')
if mibBuilder.loadTexts: hwAtmObjectGroup.setDescription('The Atm attribute group.')
hwAtmIfConf = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 156, 11, 2, 2)).setObjects(("HUAWEI-ATM-MIB", "hwAtmIfConfMaxVccs"), ("HUAWEI-ATM-MIB", "hwAtmIfConfOperVccs"), ("HUAWEI-ATM-MIB", "hwAtmIfConfIntfType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwAtmIfConf = hwAtmIfConf.setStatus('current')
if mibBuilder.loadTexts: hwAtmIfConf.setDescription('Description.')
hwAtmVplObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 156, 11, 2, 3)).setObjects(("HUAWEI-ATM-MIB", "hwAtmPvcBridgeDstIfIndex"), ("HUAWEI-ATM-MIB", "hwAtmPvcBridgeRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwAtmVplObjectGroup = hwAtmVplObjectGroup.setStatus('current')
if mibBuilder.loadTexts: hwAtmVplObjectGroup.setDescription('The Atm Pvc Bridge attribute group.')
hwAtmVclObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 156, 11, 2, 4)).setObjects(("HUAWEI-ATM-MIB", "hwAtmVclName"), ("HUAWEI-ATM-MIB", "hwAtmVccAal5EncapsType"), ("HUAWEI-ATM-MIB", "hwAtmVclRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwAtmVclObjectGroup = hwAtmVclObjectGroup.setStatus('current')
if mibBuilder.loadTexts: hwAtmVclObjectGroup.setDescription('Description.')
hwAtmMapPvpObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 156, 11, 2, 5)).setObjects(("HUAWEI-ATM-MIB", "hwAtmMapPvpRemoteVplVpi"), ("HUAWEI-ATM-MIB", "hwAtmMapPvpRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwAtmMapPvpObjectGroup = hwAtmMapPvpObjectGroup.setStatus('current')
if mibBuilder.loadTexts: hwAtmMapPvpObjectGroup.setDescription('The Atm Map Pvp attribute group.')
hwAtmMapPvcObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 156, 11, 2, 6)).setObjects(("HUAWEI-ATM-MIB", "hwAtmMapPvcRemoteVclVpi"), ("HUAWEI-ATM-MIB", "hwAtmMapPvcRemoteVclVci"), ("HUAWEI-ATM-MIB", "hwAtmMapPvcRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwAtmMapPvcObjectGroup = hwAtmMapPvcObjectGroup.setStatus('current')
if mibBuilder.loadTexts: hwAtmMapPvcObjectGroup.setDescription('The Atm Map Pvc attribute group.')
hwAtmServiceObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 156, 11, 2, 7)).setObjects(("HUAWEI-ATM-MIB", "hwAtmServiceType"), ("HUAWEI-ATM-MIB", "hwAtmServiceOutputPcr"), ("HUAWEI-ATM-MIB", "hwAtmServiceOutputScr"), ("HUAWEI-ATM-MIB", "hwAtmServiceOutputMbs"), ("HUAWEI-ATM-MIB", "hwAtmServiceCbrCdvtValue"), ("HUAWEI-ATM-MIB", "hwAtmServiceOutputMcr"), ("HUAWEI-ATM-MIB", "hwAtmServiceRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwAtmServiceObjectGroup = hwAtmServiceObjectGroup.setStatus('current')
if mibBuilder.loadTexts: hwAtmServiceObjectGroup.setDescription('The Atm Service attribute group.')
hwAtmPvcServiceObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 156, 11, 2, 8)).setObjects(("HUAWEI-ATM-MIB", "hwAtmPvcServiceName"), ("HUAWEI-ATM-MIB", "hwAtmPvcTransmittalDirection"), ("HUAWEI-ATM-MIB", "hwAtmPvcServiceRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwAtmPvcServiceObjectGroup = hwAtmPvcServiceObjectGroup.setStatus('current')
if mibBuilder.loadTexts: hwAtmPvcServiceObjectGroup.setDescription('The Atm Pvc Service attribute group.')
hwAtmPvcIpoaObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 156, 11, 2, 9)).setObjects(("HUAWEI-ATM-MIB", "hwAtmPvcIpoaIpMask"), ("HUAWEI-ATM-MIB", "hwAtmPvcIpoaInarpInterval"), ("HUAWEI-ATM-MIB", "hwAtmPvcIpoaBroadcast"), ("HUAWEI-ATM-MIB", "hwAtmPvcIpoaRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwAtmPvcIpoaObjectGroup = hwAtmPvcIpoaObjectGroup.setStatus('current')
if mibBuilder.loadTexts: hwAtmPvcIpoaObjectGroup.setDescription('The Atm Pvc IPOA attribute group.')
hwAtmPvcBridgeObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 156, 11, 2, 10)).setObjects(("HUAWEI-ATM-MIB", "hwAtmVplRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwAtmPvcBridgeObjectGroup = hwAtmPvcBridgeObjectGroup.setStatus('current')
if mibBuilder.loadTexts: hwAtmPvcBridgeObjectGroup.setDescription('The Atm Pvl attribute group.')
hwAtmPvcOAMLoopbackObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 156, 11, 2, 11)).setObjects(("HUAWEI-ATM-MIB", "hwAtmPvcOAMLoopbackFrequency"), ("HUAWEI-ATM-MIB", "hwAtmPvcOAMLoopbackUpCount"), ("HUAWEI-ATM-MIB", "hwAtmPvcOAMLoopbackDownCount"), ("HUAWEI-ATM-MIB", "hwAtmPvcOAMLoopbackRetryFrequency"), ("HUAWEI-ATM-MIB", "hwAtmPvcOAMLoopbackRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwAtmPvcOAMLoopbackObjectGroup = hwAtmPvcOAMLoopbackObjectGroup.setStatus('current')
if mibBuilder.loadTexts: hwAtmPvcOAMLoopbackObjectGroup.setDescription('The Port attribute group.')
hwAtmPvpLimitObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 156, 11, 2, 12)).setObjects(("HUAWEI-ATM-MIB", "hwAtmPvpLimitPeakRate"), ("HUAWEI-ATM-MIB", "hwAtmPvpLimitRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwAtmPvpLimitObjectGroup = hwAtmPvpLimitObjectGroup.setStatus('current')
if mibBuilder.loadTexts: hwAtmPvpLimitObjectGroup.setDescription('The Port attribute group.')
mibBuilder.exportSymbols("HUAWEI-ATM-MIB", hwAtmPvcBridgeDstIfIndex=hwAtmPvcBridgeDstIfIndex, hwAtmPvcOAMLoopbackObjectGroup=hwAtmPvcOAMLoopbackObjectGroup, hwAtmIfConfMaxVccs=hwAtmIfConfMaxVccs, hwAtmCompliance=hwAtmCompliance, hwAtmServiceObjectGroup=hwAtmServiceObjectGroup, hwAtmIfConfEntry=hwAtmIfConfEntry, hwAtmClock=hwAtmClock, hwAtmVclName=hwAtmVclName, hwAtmIfConfIfIndex=hwAtmIfConfIfIndex, hwAtmVplVpi=hwAtmVplVpi, hwAtmVclEntry=hwAtmVclEntry, hwAtmLoopback=hwAtmLoopback, hwAtmPvcOAMLoopbackDownCount=hwAtmPvcOAMLoopbackDownCount, hwAtmPvcBridgeEntry=hwAtmPvcBridgeEntry, hwAtmPvcServiceRowStatus=hwAtmPvcServiceRowStatus, hwAtmMapPvpRemoteVplVpi=hwAtmMapPvpRemoteVplVpi, hwAtmPvcServiceEntry=hwAtmPvcServiceEntry, hwAtmPvcServiceTable=hwAtmPvcServiceTable, hwAtmPvcIpoaEntry=hwAtmPvcIpoaEntry, hwAtmVclVci=hwAtmVclVci, hwAtmPvpLimitIfIndex=hwAtmPvpLimitIfIndex, hwAtmPvpLimitTable=hwAtmPvpLimitTable, hwAtmCompliances=hwAtmCompliances, hwAtmEntry=hwAtmEntry, hwAtmMapPvcObjectGroup=hwAtmMapPvcObjectGroup, hwAtmServiceTable=hwAtmServiceTable, hwAtmPvcBridgeRowStatus=hwAtmPvcBridgeRowStatus, hwAtmPvcOAMLoopbackRetryFrequency=hwAtmPvcOAMLoopbackRetryFrequency, hwAtmServiceName=hwAtmServiceName, hwAtmPvcIpoaInarpInterval=hwAtmPvcIpoaInarpInterval, hwAtmVccAal5EncapsType=hwAtmVccAal5EncapsType, hwAtmServiceType=hwAtmServiceType, hwAtmIfIndex=hwAtmIfIndex, hwAtmPvcIpoaIpAddress=hwAtmPvcIpoaIpAddress, hwAtmGroups=hwAtmGroups, hwAtmMapPvcRowStatus=hwAtmMapPvcRowStatus, hwAtmPvcTransmittalDirection=hwAtmPvcTransmittalDirection, hwAtmPvpLimitEntry=hwAtmPvpLimitEntry, hwAtmMapPvcRemoteVclVci=hwAtmMapPvcRemoteVclVci, hwAtmMIB=hwAtmMIB, hwAtmVclTable=hwAtmVclTable, hwAtmMapPvpIfIndex=hwAtmMapPvpIfIndex, hwAtmPvpLimitRowStatus=hwAtmPvpLimitRowStatus, hwAtmConformance=hwAtmConformance, hwAtmVclVpi=hwAtmVclVpi, hwAtmObjectGroup=hwAtmObjectGroup, hwAtmVplIfIndex=hwAtmVplIfIndex, hwAtmVclIfIndex=hwAtmVclIfIndex, hwAtmVclRowStatus=hwAtmVclRowStatus, PYSNMP_MODULE_ID=hwAtmMIB, hwAtmPvcOamLoopbackTable=hwAtmPvcOamLoopbackTable, hwAtmMapPvcRemoteVclVpi=hwAtmMapPvcRemoteVclVpi, hwAtmIfType=hwAtmIfType, hwAtmScramble=hwAtmScramble, hwAtmMapPvcEntry=hwAtmMapPvcEntry, hwAtmMapPvpTable=hwAtmMapPvpTable, hwAtmPvcOAMLoopbackEntry=hwAtmPvcOAMLoopbackEntry, hwAtmMapPvpEntry=hwAtmMapPvpEntry, hwAtmPvcBridgeObjectGroup=hwAtmPvcBridgeObjectGroup, hwAtmServiceOutputMcr=hwAtmServiceOutputMcr, hwAtmPvcServiceName=hwAtmPvcServiceName, hwAtmIfConfIntfType=hwAtmIfConfIntfType, hwAtmVplRowStatus=hwAtmVplRowStatus, hwAtmObjects=hwAtmObjects, hwAtmVplEntry=hwAtmVplEntry, hwAtmPvpLimitPeakRate=hwAtmPvpLimitPeakRate, hwAtmPvcIpoaObjectGroup=hwAtmPvcIpoaObjectGroup, hwAtmTable=hwAtmTable, hwAtmPvcServiceObjectGroup=hwAtmPvcServiceObjectGroup, hwAtmIfConf=hwAtmIfConf, hwAtmVplTable=hwAtmVplTable, hwAtmPvpLimitVpi=hwAtmPvpLimitVpi, hwAtmIfConfTable=hwAtmIfConfTable, hwAtmPvcOAMLoopbackUpCount=hwAtmPvcOAMLoopbackUpCount, hwAtmPvcOAMLoopbackRowStatus=hwAtmPvcOAMLoopbackRowStatus, hwAtmPvcBridgeTable=hwAtmPvcBridgeTable, hwAtmPvcIpoaRowStatus=hwAtmPvcIpoaRowStatus, hwAtmIfConfOperVccs=hwAtmIfConfOperVccs, hwAtmPvcOAMLoopbackFrequency=hwAtmPvcOAMLoopbackFrequency, hwAtmPvpLimitObjectGroup=hwAtmPvpLimitObjectGroup, hwAtmMapPvpVplVpi=hwAtmMapPvpVplVpi, hwAtmPvcIpoaType=hwAtmPvcIpoaType, hwAtmServiceOutputMbs=hwAtmServiceOutputMbs, hwAtmFrameFormat=hwAtmFrameFormat, hwAtmMapPvcTable=hwAtmMapPvcTable, hwAtmServiceOutputScr=hwAtmServiceOutputScr, hwAtmServiceOutputPcr=hwAtmServiceOutputPcr, hwAtmMapPvpObjectGroup=hwAtmMapPvpObjectGroup, hwAtmMapPvpRowStatus=hwAtmMapPvpRowStatus, hwAtmServiceEntry=hwAtmServiceEntry, hwAtmServiceCbrCdvtValue=hwAtmServiceCbrCdvtValue, hwAtmPvcIpoaTable=hwAtmPvcIpoaTable, hwAtmPvcIpoaBroadcast=hwAtmPvcIpoaBroadcast, hwAtmVclObjectGroup=hwAtmVclObjectGroup, hwAtmPvcIpoaIpMask=hwAtmPvcIpoaIpMask, hwAtmVplObjectGroup=hwAtmVplObjectGroup, hwAtmServiceRowStatus=hwAtmServiceRowStatus)
