#
# PySNMP MIB module HUAWEI-FRC-MA5100-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HUAWEI-FRC-MA5100-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:44:44 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
hwMusaFrameIndex, hwMa5100Mib, hwMusaSlotIndex = mibBuilder.importSymbols("HUAWEI-MUSA-MA5100-MIB", "hwMusaFrameIndex", "hwMa5100Mib", "hwMusaSlotIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter64, NotificationType, ObjectIdentity, Gauge32, Counter32, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, IpAddress, iso, MibIdentifier, Unsigned32, Integer32, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "NotificationType", "ObjectIdentity", "Gauge32", "Counter32", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "IpAddress", "iso", "MibIdentifier", "Unsigned32", "Integer32", "Bits")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
hwMusaFrcMib = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 9))
hwMusaFrcBoardTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 9, 1), )
if mibBuilder.loadTexts: hwMusaFrcBoardTable.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrcBoardTable.setDescription('Musa Frc board configuration table.')
hwMusaFrcBoardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 9, 1, 1), ).setIndexNames((0, "HUAWEI-MUSA-MA5100-MIB", "hwMusaFrameIndex"), (0, "HUAWEI-MUSA-MA5100-MIB", "hwMusaSlotIndex"))
if mibBuilder.loadTexts: hwMusaFrcBoardEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrcBoardEntry.setDescription('This list contains Musa Frc Board variables.')
hwMusaFrcPvcAlarmEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 9, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMusaFrcPvcAlarmEnable.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrcPvcAlarmEnable.setDescription('The Frc PVC alarm enable or disable.')
hwMusaFrcBoardClearStatistic = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 9, 1, 1, 2), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: hwMusaFrcBoardClearStatistic.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrcBoardClearStatistic.setDescription('Clear the Frc board statisitcs.')
hwMusaFrcClockMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 9, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("local", 0), ("backplate", 1), ("line", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMusaFrcClockMode.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrcClockMode.setDescription('The phy port Clock Mode.')
hwMusaFrcPhyPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 9, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMusaFrcPhyPortId.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrcPhyPortId.setDescription('the index of the port.')
hwMusaFrcPhyPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 9, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("e1", 1), ("t1", 2), ("v35", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMusaFrcPhyPortType.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrcPhyPortType.setDescription('physical port type.')
hwMusaFrcPhyPortLineIfTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 9, 2), )
if mibBuilder.loadTexts: hwMusaFrcPhyPortLineIfTable.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrcPhyPortLineIfTable.setDescription('Musa Frc phy port line Interface table.')
hwMusaFrcPhyPortLineIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 9, 2, 1), ).setIndexNames((0, "HUAWEI-MUSA-MA5100-MIB", "hwMusaFrameIndex"), (0, "HUAWEI-MUSA-MA5100-MIB", "hwMusaSlotIndex"), (0, "HUAWEI-FRC-MA5100-MIB", "hwMusaFrcPhyPortId"))
if mibBuilder.loadTexts: hwMusaFrcPhyPortLineIfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrcPhyPortLineIfEntry.setDescription('This list contains Musa Frc phy port line If variables.')
hwMusaFrcMainClock = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 9, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("local", 0), ("backplate", 1), ("line", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMusaFrcMainClock.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrcMainClock.setDescription('The main clock. local,backplate,line.')
hwMusaFrcT1HaulMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 9, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("short", 0), ("long", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMusaFrcT1HaulMode.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrcT1HaulMode.setDescription('The T1 short/long haul mode.')
hwMusaFrcT1E1Crc = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 9, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMusaFrcT1E1Crc.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrcT1E1Crc.setDescription('The T1 crc, when T1 is ESF frame format.')
hwMusaFrcT1FrameFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 9, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("t1esf", 0), ("t1d44mf", 1), ("t1d412mf", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMusaFrcT1FrameFormat.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrcT1FrameFormat.setDescription('The T1 frame format.')
hwMusaFrcT1LineCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 9, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("b8zs", 0), ("ami", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMusaFrcT1LineCode.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrcT1LineCode.setDescription('The T1 line code.')
hwMusaFrcV35ClockMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 9, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("dceinner", 0), ("dceslave", 1), ("dceouter", 2), ("dteinner", 3), ("dteslave", 4), ("dteouter", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMusaFrcV35ClockMode.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrcV35ClockMode.setDescription('The V35 clock mode.')
hwMusaFrcT1E1TsBitMap = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 9, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMusaFrcT1E1TsBitMap.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrcT1E1TsBitMap.setDescription('The TS bit map.')
hwMusaFrcClockLoopMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 9, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("payloop", 0), ("remoteloop", 1), ("single-timeslot", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMusaFrcClockLoopMode.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrcClockLoopMode.setDescription('The phy port Clock loop mode.')
hwMusaFrcLoopState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 9, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noloop", 0), ("loop", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMusaFrcLoopState.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrcLoopState.setDescription('The phy port Clock loop state.')
hwMusaFrcV35InvertTxClock = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 9, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMusaFrcV35InvertTxClock.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrcV35InvertTxClock.setDescription('The V35 port Clock invert phase.')
hwMusaFrcSingleTimeSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 9, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMusaFrcSingleTimeSlotId.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrcSingleTimeSlotId.setDescription('The timeslot id of single timeslot loopback.')
hwMusaFrcPhyPortAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 9, 3), )
if mibBuilder.loadTexts: hwMusaFrcPhyPortAlarmTable.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrcPhyPortAlarmTable.setDescription('Musa Frc phy port alarm table.')
hwMusaFrcPhyPortAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 9, 3, 1), ).setIndexNames((0, "HUAWEI-MUSA-MA5100-MIB", "hwMusaFrameIndex"), (0, "HUAWEI-MUSA-MA5100-MIB", "hwMusaSlotIndex"), (0, "HUAWEI-FRC-MA5100-MIB", "hwMusaFrcPhyPortId"))
if mibBuilder.loadTexts: hwMusaFrcPhyPortAlarmEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrcPhyPortAlarmEntry.setDescription('This list contains Musa Frc phy port Alarm variables.')
hwMusaFrcAlarmSw = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 9, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMusaFrcAlarmSw.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrcAlarmSw.setDescription('The phy port alarm switch.')
hwMusaFrcRACTS = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 9, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noalarmup", 0), ("alarmdown", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMusaFrcRACTS.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrcRACTS.setDescription('The E1/T1 phy port remote alarm or V35 phy port CTS alarm.')
hwMusaFrcLFADSR = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 9, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noalarmup", 0), ("alarmdown", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMusaFrcLFADSR.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrcLFADSR.setDescription('The E1/T1 phy port LFA or V35 phy port DSR alarm.')
hwMusaFrcLOSPLL = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 9, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noalarmup", 0), ("alarmdown", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMusaFrcLOSPLL.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrcLOSPLL.setDescription('The E1/T1 phy port LOS alarm or V35 phy port PLL alarm.')
hwMusaFrcAISDCD = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 9, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noalarmup", 0), ("alarmdown", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMusaFrcAISDCD.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrcAISDCD.setDescription('The E1/T1 phy port AIS alarm OR V35 phy port DCD alarm.')
hwMusaFrcAlarmCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 9, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMusaFrcAlarmCount.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrcAlarmCount.setDescription('The phy port alarm count.')
hwMusaFrcDTR = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 9, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("up", 0), ("down", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMusaFrcDTR.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrcDTR.setDescription('The V35 phy port DTR alarm.')
hwMusaFrcRTS = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 9, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("up", 0), ("down", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMusaFrcRTS.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrcRTS.setDescription('The V35 phy port RTS alarm.')
hwMusaFrcSCOL = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 9, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noalarm", 0), ("alarm", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMusaFrcSCOL.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrcSCOL.setDescription('The phy port SCOL alarm.')
hwMusaFrcLogicPortTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 9, 4), )
if mibBuilder.loadTexts: hwMusaFrcLogicPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrcLogicPortTable.setDescription('Musa Frc logic port table.')
hwMusaFrcLogicPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 9, 4, 1), ).setIndexNames((0, "HUAWEI-MUSA-MA5100-MIB", "hwMusaFrameIndex"), (0, "HUAWEI-MUSA-MA5100-MIB", "hwMusaSlotIndex"), (0, "HUAWEI-FRC-MA5100-MIB", "hwMusaFrcLogicPortId"))
if mibBuilder.loadTexts: hwMusaFrcLogicPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrcLogicPortEntry.setDescription('This list contains Musa Fr logic port variables.')
hwMusaFrcLogicPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 9, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)))
if mibBuilder.loadTexts: hwMusaFrcLogicPortId.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrcLogicPortId.setDescription('The Fr Logical Port ID.')
hwMusaFrcPhyPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 9, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMusaFrcPhyPort.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrcPhyPort.setDescription('The Fr phy Port.')
hwMusaFrcE1T1TsBitMapV35NValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 9, 4, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMusaFrcE1T1TsBitMapV35NValue.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrcE1T1TsBitMapV35NValue.setDescription('The E1/T1 TS bit Map or V35 N value.')
hwMusaFrcDlciType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 9, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMusaFrcDlciType.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrcDlciType.setDescription('The DLCI type.')
hwMusaFrcFreeBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 9, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMusaFrcFreeBandwidth.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrcFreeBandwidth.setDescription('The free bandwidth.')
hwMusaFrcServiceFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 9, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("network11", 0), ("service", 1), ("hdlc", 2), ("networkN1", 3), ("frIwf", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMusaFrcServiceFlag.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrcServiceFlag.setDescription('The service FLAG.')
hwMusaFrcPortActivate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 9, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("block", 0), ("unblock", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMusaFrcPortActivate.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrcPortActivate.setDescription('The active flag.')
hwMusaFrcLogicPortOperate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 9, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("add", 0), ("del", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMusaFrcLogicPortOperate.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrcLogicPortOperate.setDescription('The operat.')
hwMusaFrcLogPortSigTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 9, 5), )
if mibBuilder.loadTexts: hwMusaFrcLogPortSigTable.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrcLogPortSigTable.setDescription(' This table contains information of system pvc')
hwMusaFrcLogPortSigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 9, 5, 1), ).setIndexNames((0, "HUAWEI-MUSA-MA5100-MIB", "hwMusaFrameIndex"), (0, "HUAWEI-MUSA-MA5100-MIB", "hwMusaSlotIndex"), (0, "HUAWEI-FRC-MA5100-MIB", "hwMusaFrcLogPortSigSide"), (0, "HUAWEI-FRC-MA5100-MIB", "hwMusaFrcLogicPortId"))
if mibBuilder.loadTexts: hwMusaFrcLogPortSigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrcLogPortSigEntry.setDescription('This list contains FR port information parameters.')
hwMusaFrcLogPortSigSide = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 9, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("frside", 0), ("atmside", 1))))
if mibBuilder.loadTexts: hwMusaFrcLogPortSigSide.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrcLogPortSigSide.setDescription('Singnalling port side')
hwMusaFrcLogPortSigProtocalType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 9, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("q933a", 0), ("ansit167d", 1), ("cisiolmi", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMusaFrcLogPortSigProtocalType.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrcLogPortSigProtocalType.setDescription('')
hwMusaFrcLogPortSigPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 9, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("user", 1), ("net", 2), ("bid", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMusaFrcLogPortSigPortType.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrcLogPortSigPortType.setDescription('')
hwMusaFrcLogPortSigN391 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 9, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMusaFrcLogPortSigN391.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrcLogPortSigN391.setDescription('N391')
hwMusaFrcLogPortSigUserN392 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 9, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMusaFrcLogPortSigUserN392.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrcLogPortSigUserN392.setDescription('UserN392')
hwMusaFrcLogPortSigUserN393 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 9, 5, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMusaFrcLogPortSigUserN393.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrcLogPortSigUserN393.setDescription('UserN393')
hwMusaFrcLogPortSigNetN392 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 9, 5, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMusaFrcLogPortSigNetN392.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrcLogPortSigNetN392.setDescription('NetN392')
hwMusaFrcLogPortSigNetN393 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 9, 5, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMusaFrcLogPortSigNetN393.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrcLogPortSigNetN393.setDescription('NetN393')
hwMusaFrcLogPortSigT391 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 9, 5, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMusaFrcLogPortSigT391.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrcLogPortSigT391.setDescription('T391')
hwMusaFrcLogPortSigT392 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 9, 5, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(6, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMusaFrcLogPortSigT392.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrcLogPortSigT392.setDescription('T392')
hwMusaFrcLogPortSigOper = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 9, 5, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("add", 0), ("del", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMusaFrcLogPortSigOper.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrcLogPortSigOper.setDescription('Signalling port operation')
hwMusaFrcIwfTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 9, 6), )
if mibBuilder.loadTexts: hwMusaFrcIwfTable.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrcIwfTable.setDescription(' This table contains Fr Iwf')
hwMusaFrcIwfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 9, 6, 1), ).setIndexNames((0, "HUAWEI-MUSA-MA5100-MIB", "hwMusaFrameIndex"), (0, "HUAWEI-MUSA-MA5100-MIB", "hwMusaSlotIndex"), (0, "HUAWEI-FRC-MA5100-MIB", "hwMusaFrcIwfCcid"))
if mibBuilder.loadTexts: hwMusaFrcIwfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrcIwfEntry.setDescription('This list contains Fr Iwf.')
hwMusaFrcIwfCcid = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 9, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 999)))
if mibBuilder.loadTexts: hwMusaFrcIwfCcid.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrcIwfCcid.setDescription('IWF CCID')
hwMusaFrcConnectMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 9, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("network11", 0), ("service", 1), ("hdlc", 2), ("networkN1", 3), ("frIwf", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMusaFrcConnectMode.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrcConnectMode.setDescription('FR connect mode')
hwMusaFrcLogicPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 9, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 494))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMusaFrcLogicPort.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrcLogicPort.setDescription('logical port')
hwMusaFrcDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 9, 6, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMusaFrcDlci.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrcDlci.setDescription('logical port dlci')
hwMusaFrcAtmVcc = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 9, 6, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 494))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMusaFrcAtmVcc.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrcAtmVcc.setDescription('atm vcc')
hwMusaFrcAtmDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 9, 6, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMusaFrcAtmDlci.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrcAtmDlci.setDescription('atm vcc')
hwMusaFrcEfci = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 9, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("efcn", 0), ("valure0", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMusaFrcEfci.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrcEfci.setDescription('atm efci')
hwMusaFrcDe = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 9, 6, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("netdeClpFrsscs", 0), ("netdeFrsscs", 1), ("srvdeClp", 2), ("srvde0", 3), ("srvde1", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMusaFrcDe.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrcDe.setDescription('atm de')
hwMusaFrcClp = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 9, 6, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("clpDe", 0), ("clp0", 1), ("clp1", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMusaFrcClp.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrcClp.setDescription('atm clp')
hwMusaFrcCir = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 9, 6, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMusaFrcCir.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrcCir.setDescription('atm cir')
hwMusaFrcEir = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 9, 6, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1984))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMusaFrcEir.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrcEir.setDescription('atm eir')
hwMusaFrcServiceMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 9, 6, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMusaFrcServiceMode.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrcServiceMode.setDescription('atm eir')
hwMusaFrcOperate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 9, 6, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("add", 0), ("del", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMusaFrcOperate.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrcOperate.setDescription('iwf operate')
hwMusaFrcLogicPortStatisTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 9, 7), )
if mibBuilder.loadTexts: hwMusaFrcLogicPortStatisTable.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrcLogicPortStatisTable.setDescription(' This table contains LogicPortStatis')
hwMusaFrcLogicPortStatisEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 9, 7, 1), ).setIndexNames((0, "HUAWEI-MUSA-MA5100-MIB", "hwMusaFrameIndex"), (0, "HUAWEI-MUSA-MA5100-MIB", "hwMusaSlotIndex"), (0, "HUAWEI-FRC-MA5100-MIB", "hwMusaFrcLogicPortId"))
if mibBuilder.loadTexts: hwMusaFrcLogicPortStatisEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrcLogicPortStatisEntry.setDescription('This list contains Logical Port Statistic.')
hwMusaFrcLogicPortActive = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 9, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("inactive", 0), ("active", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMusaFrcLogicPortActive.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrcLogicPortActive.setDescription('Active state.')
hwMusaFrcCongestState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 9, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("no", 0), ("yes", 1), ("serious", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMusaFrcCongestState.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrcCongestState.setDescription('Congest state.')
hwMusaFrcInFrameCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 9, 7, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMusaFrcInFrameCount.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrcInFrameCount.setDescription('In frame count.')
hwMusaFrcInByteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 9, 7, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMusaFrcInByteCount.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrcInByteCount.setDescription('In BYTE count.')
hwMusaFrcInLossParkageC = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 9, 7, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMusaFrcInLossParkageC.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrcInLossParkageC.setDescription('IN parkage count.')
hwMusaFrcOutFrameCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 9, 7, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMusaFrcOutFrameCount.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrcOutFrameCount.setDescription('Output frame count.')
hwMusaFrcOutByteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 9, 7, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMusaFrcOutByteCount.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrcOutByteCount.setDescription('Output BYTE count.')
hwMusaFrcOutLossParkageC = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 9, 7, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMusaFrcOutLossParkageC.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrcOutLossParkageC.setDescription('Output loss parkage count.')
hwMusaFrcAtmPortStatisTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 9, 8), )
if mibBuilder.loadTexts: hwMusaFrcAtmPortStatisTable.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrcAtmPortStatisTable.setDescription(' This table contains Atm PortStatis')
hwMusaFrcAtmPortStatisEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 9, 8, 1), ).setIndexNames((0, "HUAWEI-MUSA-MA5100-MIB", "hwMusaFrameIndex"), (0, "HUAWEI-MUSA-MA5100-MIB", "hwMusaSlotIndex"), (0, "HUAWEI-FRC-MA5100-MIB", "hwMusaFrcAtmVcc"))
if mibBuilder.loadTexts: hwMusaFrcAtmPortStatisEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrcAtmPortStatisEntry.setDescription('This list contains Atm Port Statistic.')
hwMusaFrcAtmPortActive = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 9, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("inactive", 0), ("active", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMusaFrcAtmPortActive.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrcAtmPortActive.setDescription('Active state.')
hwMusaFrcAtmCongestState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 9, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("no", 0), ("yes", 1), ("serious", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMusaFrcAtmCongestState.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrcAtmCongestState.setDescription('Congest state.')
hwMusaFrcAtmInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 9, 8, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMusaFrcAtmInFrames.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrcAtmInFrames.setDescription('In loss parkage count.')
hwMusaFrcAtmInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 9, 8, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMusaFrcAtmInBytes.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrcAtmInBytes.setDescription('Output loss parkage count.')
hwMusaFrcAtmInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 9, 8, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMusaFrcAtmInDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrcAtmInDiscards.setDescription('In loss parkage count.')
hwMusaFrcAtmOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 9, 8, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMusaFrcAtmOutFrames.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrcAtmOutFrames.setDescription('Output loss parkage count.')
hwMusaFrcAtmOutBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 9, 8, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMusaFrcAtmOutBytes.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrcAtmOutBytes.setDescription('In loss parkage count.')
hwMusaFrcAtmOutDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 9, 8, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMusaFrcAtmOutDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrcAtmOutDiscards.setDescription('Output loss parkage count.')
hwMusaFrcSigPortStatisTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 9, 9), )
if mibBuilder.loadTexts: hwMusaFrcSigPortStatisTable.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrcSigPortStatisTable.setDescription(' This table contains signal Port Statis')
hwMusaFrcSigPortStatisEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 9, 9, 1), ).setIndexNames((0, "HUAWEI-MUSA-MA5100-MIB", "hwMusaFrameIndex"), (0, "HUAWEI-MUSA-MA5100-MIB", "hwMusaSlotIndex"), (0, "HUAWEI-FRC-MA5100-MIB", "hwMusaFrcLogPortSigSide"), (0, "HUAWEI-FRC-MA5100-MIB", "hwMusaFrcLogicPortId"))
if mibBuilder.loadTexts: hwMusaFrcSigPortStatisEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrcSigPortStatisEntry.setDescription('This list contains Sig Port Statistic.')
hwMusaFrcSigType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 9, 9, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("userside", 1), ("networkside", 2), ("bidside", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMusaFrcSigType.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrcSigType.setDescription('signal port type.')
hwMusaFrcSigPortSide = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 9, 9, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("fr", 0), ("atm", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMusaFrcSigPortSide.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrcSigPortSide.setDescription('signal port side.')
hwMusaFrcUserLinkC = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 9, 9, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMusaFrcUserLinkC.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrcUserLinkC.setDescription('User link error count.')
hwMusaFrcUserProtocalC = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 9, 9, 1, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMusaFrcUserProtocalC.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrcUserProtocalC.setDescription('User protocal error count.')
hwMusaFrcUserDeactC = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 9, 9, 1, 5), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMusaFrcUserDeactC.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrcUserDeactC.setDescription('User port deactive count.')
hwMusaFrcNetworkLinkC = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 9, 9, 1, 6), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMusaFrcNetworkLinkC.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrcNetworkLinkC.setDescription('Network link error count.')
hwMusaFrcNetworkProtocalC = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 9, 9, 1, 7), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMusaFrcNetworkProtocalC.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrcNetworkProtocalC.setDescription('Network protocal error count.')
hwMusaFrcNetworkDeactC = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 9, 9, 1, 8), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMusaFrcNetworkDeactC.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrcNetworkDeactC.setDescription('Network port deactive count.')
hwMusaFrcSendFrameC = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 9, 9, 1, 9), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMusaFrcSendFrameC.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrcSendFrameC.setDescription('The number of sended frames.')
hwMusaFrcRecvFrameC = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 9, 9, 1, 10), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMusaFrcRecvFrameC.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrcRecvFrameC.setDescription('The number of received frames.')
hwMusaFrcIwfStatisTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 9, 10), )
if mibBuilder.loadTexts: hwMusaFrcIwfStatisTable.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrcIwfStatisTable.setDescription(' This table contains Iwf Statis')
hwMusaFrcIwfStatisEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 9, 10, 1), ).setIndexNames((0, "HUAWEI-MUSA-MA5100-MIB", "hwMusaFrameIndex"), (0, "HUAWEI-MUSA-MA5100-MIB", "hwMusaSlotIndex"), (0, "HUAWEI-FRC-MA5100-MIB", "hwMusaFrcIwfCcid"))
if mibBuilder.loadTexts: hwMusaFrcIwfStatisEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrcIwfStatisEntry.setDescription('This list contains Iwf Statistic.')
hwMusaFrcPvcType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 9, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("networkiwf", 0), ("serviceiwf", 1), ("hdlc", 2), ("ppp", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMusaFrcPvcType.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrcPvcType.setDescription('pvc type.')
hwMusaFrcPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 9, 10, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMusaFrcPortId.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrcPortId.setDescription('Fr Port type.')
hwMusaFrcPortDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 9, 10, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMusaFrcPortDlci.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrcPortDlci.setDescription('Fr Port DLCI.')
hwMusaFrcUpInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 9, 10, 1, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMusaFrcUpInFrames.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrcUpInFrames.setDescription('Fr in package.')
hwMusaFrcUpInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 9, 10, 1, 5), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMusaFrcUpInBytes.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrcUpInBytes.setDescription('Fr Port DLCI.')
hwMusaFrcUpInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 9, 10, 1, 6), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMusaFrcUpInDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrcUpInDiscards.setDescription('Fr Port DLCI.')
hwMusaFrcUpOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 9, 10, 1, 7), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMusaFrcUpOutFrames.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrcUpOutFrames.setDescription('Fr in package.')
hwMusaFrcUpOutBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 9, 10, 1, 8), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMusaFrcUpOutBytes.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrcUpOutBytes.setDescription('Fr Port DLCI.')
hwMusaFrcUpOutDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 9, 10, 1, 9), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMusaFrcUpOutDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrcUpOutDiscards.setDescription('Fr Port DLCI.')
hwMusaFrcAtmPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 9, 10, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMusaFrcAtmPort.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrcAtmPort.setDescription('Atm port.')
hwMusaFrcAtmPortDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 9, 10, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMusaFrcAtmPortDlci.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrcAtmPortDlci.setDescription('Atm port.')
hwMusaFrcDownInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 9, 10, 1, 12), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMusaFrcDownInFrames.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrcDownInFrames.setDescription('Atm port.')
hwMusaFrcDownInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 9, 10, 1, 13), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMusaFrcDownInBytes.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrcDownInBytes.setDescription('Atm port.')
hwMusaFrcDownInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 9, 10, 1, 14), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMusaFrcDownInDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrcDownInDiscards.setDescription('Atm port.')
hwMusaFrcDownOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 9, 10, 1, 15), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMusaFrcDownOutFrames.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrcDownOutFrames.setDescription('Atm port.')
hwMusaFrcDownOutBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 9, 10, 1, 16), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMusaFrcDownOutBytes.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrcDownOutBytes.setDescription('Atm port.')
hwMusaFrcDownOutDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 9, 10, 1, 17), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMusaFrcDownOutDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrcDownOutDiscards.setDescription('Atm port.')
hwMusaFrcIwfActive = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 9, 10, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMusaFrcIwfActive.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrcIwfActive.setDescription('Iwf active.')
hwMusaFrcPhyStatisGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 9, 11))
hwMusaFrcPhyMCCStatisTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 9, 11, 1), )
if mibBuilder.loadTexts: hwMusaFrcPhyMCCStatisTable.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrcPhyMCCStatisTable.setDescription(' This table contains Phy-MCC Statis')
hwMusaFrcPhyMCCStatisEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 9, 11, 1, 1), ).setIndexNames((0, "HUAWEI-MUSA-MA5100-MIB", "hwMusaFrameIndex"), (0, "HUAWEI-MUSA-MA5100-MIB", "hwMusaSlotIndex"), (0, "HUAWEI-FRC-MA5100-MIB", "hwMusaMccType"))
if mibBuilder.loadTexts: hwMusaFrcPhyMCCStatisEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrcPhyMCCStatisEntry.setDescription('This list contains Phy-MCC Statistic.')
hwMusaMccType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 9, 11, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mcc1", 1), ("mcc2", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMusaMccType.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaMccType.setDescription('MCC type.')
hwMusaFrcMccTxSucc = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 9, 11, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMusaFrcMccTxSucc.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrcMccTxSucc.setDescription('The frames of MCC send successfully.')
hwMusaFrcMccRxSucc = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 9, 11, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMusaFrcMccRxSucc.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrcMccRxSucc.setDescription('The frames of MCC reveiced successfully.')
hwMusaFrcMccRxQOV = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 9, 11, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMusaFrcMccRxQOV.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrcMccRxQOV.setDescription('MCC reveice queue overflow.')
hwMusaFrcMccRxMRF = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 9, 11, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMusaFrcMccRxMRF.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrcMccRxMRF.setDescription('The frames MCC reveiveed over the max length.')
hwMusaFrcMccRxLRF = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 9, 11, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMusaFrcMccRxLRF.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrcMccRxLRF.setDescription('The frames of MCC reveiveed underlength.')
hwMusaFrcMccRxIDL = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 9, 11, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMusaFrcMccRxIDL.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrcMccRxIDL.setDescription('The first IDELE-frame head in many frames.')
hwMusaFrcMccRxBSY = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 9, 11, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMusaFrcMccRxBSY.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrcMccRxBSY.setDescription('MCC has no idle BD when reveice frame.')
hwMusaFrcMccRxLG = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 9, 11, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMusaFrcMccRxLG.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrcMccRxLG.setDescription('The frames of MCC reveiveed overlength.')
hwMusaFrcMccRxNO = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 9, 11, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMusaFrcMccRxNO.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrcMccRxNO.setDescription('MCCյֽڶ֡.')
hwMusaFrcMccRxAB = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 9, 11, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMusaFrcMccRxAB.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrcMccRxAB.setDescription('MCCյ7ص1.')
hwMusaFrcMccRxCR = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 9, 11, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMusaFrcMccRxCR.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrcMccRxCR.setDescription('MCCյCRCУ֡.')
hwMusaFrcMccTxRxNID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 9, 11, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMusaFrcMccTxRxNID.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrcMccTxRxNID.setDescription('MCCյķIDLE֡.')
hwMusaFrcMccTxQOV = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 9, 11, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMusaFrcMccTxQOV.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrcMccTxQOV.setDescription('MCCж϶.')
hwMusaFrcMccTxGUN = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 9, 11, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMusaFrcMccTxGUN.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrcMccTxGUN.setDescription('MCC͵\u0378.')
hwMusaFrcMccTxGOV = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 9, 11, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMusaFrcMccTxGOV.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrcMccTxGOV.setDescription('MCCճ.')
hwMusaFrcMccTxUN = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 9, 11, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMusaFrcMccTxUN.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrcMccTxUN.setDescription('CPָʾݷ.')
hwMusaFrcMccTxNoBD = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 9, 11, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMusaFrcMccTxNoBD.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrcMccTxNoBD.setDescription('ʱBD.')
hwMusaFrcMccRxNoBuff = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 9, 11, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMusaFrcMccRxNoBuff.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrcMccRxNoBuff.setDescription('ݽʱ䲻Buffer.')
hwMusaFrcPhySARStatisTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 9, 11, 2), )
if mibBuilder.loadTexts: hwMusaFrcPhySARStatisTable.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrcPhySARStatisTable.setDescription(' This table contains Phy-SAR Statis')
hwMusaFrcPhySARStatisEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 9, 11, 2, 1), ).setIndexNames((0, "HUAWEI-MUSA-MA5100-MIB", "hwMusaFrameIndex"), (0, "HUAWEI-MUSA-MA5100-MIB", "hwMusaSlotIndex"))
if mibBuilder.loadTexts: hwMusaFrcPhySARStatisEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrcPhySARStatisEntry.setDescription('This list contains Phy-SAR Statistic.')
hwMusaFrcSarSendSucc = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 9, 11, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMusaFrcSarSendSucc.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrcSarSendSucc.setDescription('SARͳɹ.')
hwMusaFrcSarRecvSucc = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 9, 11, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMusaFrcSarRecvSucc.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrcSarRecvSucc.setDescription('SARճɹ.')
hwMusaFrcSarRxErrBSY = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 9, 11, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMusaFrcSarRxErrBSY.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrcSarRxErrBSY.setDescription('SAR֡ʱ\u07bfBD.')
hwMusaFrcSarRxErrTBNR = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 9, 11, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMusaFrcSarRxErrTBNR.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrcSarRxErrTBNR.setDescription('SARʱBD Bufferδ\u05fc.')
hwMusaFrcSarRxErrGRLI = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 9, 11, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMusaFrcSarRxErrGRLI.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrcSarRxErrGRLI.setDescription('ȫBuffer䵽ﾯ(жϷʽ).')
hwMusaFrcSarRxErrGBPB = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 9, 11, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMusaFrcSarRxErrGBPB.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrcSarRxErrGBPB.setDescription('ȫBufferBusy.')
hwMusaFrcSarRxErrINTO = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 9, 11, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMusaFrcSarRxErrINTO.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrcSarRxErrINTO.setDescription('ж϶.')
hwMusaFrcSarRxErrABRT = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 9, 11, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMusaFrcSarRxErrABRT.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrcSarRxErrABRT.setDescription('յݳΪ0֡.')
hwMusaFrcSarRxErrLNE = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 9, 11, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMusaFrcSarRxErrLNE.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrcSarRxErrLNE.setDescription('յAAL5֡PDUȷǷ.')
hwMusaFrcSarRxErrCRE = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 9, 11, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMusaFrcSarRxErrCRE.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrcSarRxErrCRE.setDescription('յ֡CRCУ.')
hwMusaFrcSarRxErrCLP = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 9, 11, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMusaFrcSarRxErrCLP.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrcSarRxErrCLP.setDescription('յCLPλ֡.')
hwMusaFrcSarRxErrCNG = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 9, 11, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMusaFrcSarRxErrCNG.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrcSarRxErrCNG.setDescription('յӵλ֡.')
hwMusaFrcSarRxErrCPUU = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 9, 11, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMusaFrcSarRxErrCPUU.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrcSarRxErrCPUU.setDescription('յ0CPCS-UU+CPI.')
hwMusaFrcSarRxErrRedLine = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 9, 11, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMusaFrcSarRxErrRedLine.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrcSarRxErrRedLine.setDescription('ȫBuffer䵽ﾯ(жϷʽ).')
hwMusaFrcSarRxErrNoBuff = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 9, 11, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMusaFrcSarRxErrNoBuff.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrcSarRxErrNoBuff.setDescription('֡ʱ䲻Buffer.')
hwMusaFrcSarTxErrTIRU = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 9, 11, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMusaFrcSarTxErrTIRU.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrcSarTxErrTIRU.setDescription('ڲģʽ£ʵ\u0378.')
hwMusaFrcSarTxErrNoBD = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 9, 11, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMusaFrcSarTxErrNoBD.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrcSarTxErrNoBD.setDescription('֡ʱ\u07bfBD.')
mibBuilder.exportSymbols("HUAWEI-FRC-MA5100-MIB", hwMusaFrcLogPortSigN391=hwMusaFrcLogPortSigN391, hwMusaFrcSigType=hwMusaFrcSigType, hwMusaFrcLogPortSigProtocalType=hwMusaFrcLogPortSigProtocalType, hwMusaFrcT1HaulMode=hwMusaFrcT1HaulMode, hwMusaFrcMccRxAB=hwMusaFrcMccRxAB, hwMusaFrcT1FrameFormat=hwMusaFrcT1FrameFormat, hwMusaFrcSigPortStatisEntry=hwMusaFrcSigPortStatisEntry, hwMusaFrcUpInBytes=hwMusaFrcUpInBytes, hwMusaFrcAtmOutBytes=hwMusaFrcAtmOutBytes, hwMusaFrcDTR=hwMusaFrcDTR, hwMusaFrcSarRxErrTBNR=hwMusaFrcSarRxErrTBNR, hwMusaFrcPhySARStatisTable=hwMusaFrcPhySARStatisTable, hwMusaFrcT1E1Crc=hwMusaFrcT1E1Crc, hwMusaFrcPortId=hwMusaFrcPortId, hwMusaFrcDlci=hwMusaFrcDlci, hwMusaFrcClockLoopMode=hwMusaFrcClockLoopMode, hwMusaFrcPhyMCCStatisTable=hwMusaFrcPhyMCCStatisTable, hwMusaFrcSarRxErrCRE=hwMusaFrcSarRxErrCRE, hwMusaFrcLogPortSigSide=hwMusaFrcLogPortSigSide, hwMusaFrcAtmPortStatisEntry=hwMusaFrcAtmPortStatisEntry, hwMusaFrcAtmOutFrames=hwMusaFrcAtmOutFrames, hwMusaFrcLogPortSigT392=hwMusaFrcLogPortSigT392, hwMusaFrcAtmPortDlci=hwMusaFrcAtmPortDlci, hwMusaFrcMccTxUN=hwMusaFrcMccTxUN, hwMusaFrcPhyPortAlarmEntry=hwMusaFrcPhyPortAlarmEntry, hwMusaFrcV35ClockMode=hwMusaFrcV35ClockMode, hwMusaFrcDownInBytes=hwMusaFrcDownInBytes, hwMusaFrcBoardEntry=hwMusaFrcBoardEntry, hwMusaFrcIwfStatisEntry=hwMusaFrcIwfStatisEntry, hwMusaFrcLogPortSigTable=hwMusaFrcLogPortSigTable, hwMusaFrcLOSPLL=hwMusaFrcLOSPLL, hwMusaFrcInLossParkageC=hwMusaFrcInLossParkageC, hwMusaFrcBoardClearStatistic=hwMusaFrcBoardClearStatistic, hwMusaFrcAtmPortActive=hwMusaFrcAtmPortActive, hwMusaFrcIwfEntry=hwMusaFrcIwfEntry, hwMusaFrcSarTxErrNoBD=hwMusaFrcSarTxErrNoBD, hwMusaFrcAtmPort=hwMusaFrcAtmPort, hwMusaFrcSCOL=hwMusaFrcSCOL, hwMusaFrcLoopState=hwMusaFrcLoopState, hwMusaFrcPhySARStatisEntry=hwMusaFrcPhySARStatisEntry, hwMusaFrcRTS=hwMusaFrcRTS, hwMusaFrcLogicPortStatisTable=hwMusaFrcLogicPortStatisTable, hwMusaFrcLogPortSigT391=hwMusaFrcLogPortSigT391, hwMusaFrcInByteCount=hwMusaFrcInByteCount, hwMusaFrcSarRxErrCNG=hwMusaFrcSarRxErrCNG, hwMusaFrcPortActivate=hwMusaFrcPortActivate, hwMusaFrcMccRxLG=hwMusaFrcMccRxLG, hwMusaFrcSarRxErrBSY=hwMusaFrcSarRxErrBSY, hwMusaFrcLogPortSigNetN392=hwMusaFrcLogPortSigNetN392, hwMusaFrcNetworkProtocalC=hwMusaFrcNetworkProtocalC, hwMusaFrcUserProtocalC=hwMusaFrcUserProtocalC, hwMusaFrcV35InvertTxClock=hwMusaFrcV35InvertTxClock, hwMusaFrcSingleTimeSlotId=hwMusaFrcSingleTimeSlotId, hwMusaFrcLogPortSigNetN393=hwMusaFrcLogPortSigNetN393, hwMusaFrcLogPortSigEntry=hwMusaFrcLogPortSigEntry, hwMusaFrcMccTxNoBD=hwMusaFrcMccTxNoBD, hwMusaFrcUpOutDiscards=hwMusaFrcUpOutDiscards, hwMusaFrcMccTxGUN=hwMusaFrcMccTxGUN, hwMusaFrcUpInDiscards=hwMusaFrcUpInDiscards, hwMusaFrcAtmVcc=hwMusaFrcAtmVcc, hwMusaFrcLogPortSigUserN393=hwMusaFrcLogPortSigUserN393, hwMusaFrcDownOutFrames=hwMusaFrcDownOutFrames, hwMusaFrcMccTxSucc=hwMusaFrcMccTxSucc, hwMusaFrcOutFrameCount=hwMusaFrcOutFrameCount, hwMusaFrcMccRxLRF=hwMusaFrcMccRxLRF, hwMusaFrcUpOutFrames=hwMusaFrcUpOutFrames, hwMusaFrcDownInFrames=hwMusaFrcDownInFrames, hwMusaFrcLogicPortStatisEntry=hwMusaFrcLogicPortStatisEntry, hwMusaFrcAtmInDiscards=hwMusaFrcAtmInDiscards, hwMusaFrcNetworkDeactC=hwMusaFrcNetworkDeactC, hwMusaFrcPhyPortAlarmTable=hwMusaFrcPhyPortAlarmTable, hwMusaFrcMccRxSucc=hwMusaFrcMccRxSucc, hwMusaFrcSarTxErrTIRU=hwMusaFrcSarTxErrTIRU, hwMusaFrcIwfActive=hwMusaFrcIwfActive, hwMusaFrcLogicPortActive=hwMusaFrcLogicPortActive, hwMusaFrcMib=hwMusaFrcMib, hwMusaFrcDownInDiscards=hwMusaFrcDownInDiscards, hwMusaFrcMccRxIDL=hwMusaFrcMccRxIDL, hwMusaFrcNetworkLinkC=hwMusaFrcNetworkLinkC, hwMusaFrcAtmDlci=hwMusaFrcAtmDlci, hwMusaFrcAtmOutDiscards=hwMusaFrcAtmOutDiscards, hwMusaFrcUserDeactC=hwMusaFrcUserDeactC, hwMusaFrcInFrameCount=hwMusaFrcInFrameCount, hwMusaFrcAISDCD=hwMusaFrcAISDCD, hwMusaFrcRecvFrameC=hwMusaFrcRecvFrameC, hwMusaFrcLogicPortTable=hwMusaFrcLogicPortTable, hwMusaFrcE1T1TsBitMapV35NValue=hwMusaFrcE1T1TsBitMapV35NValue, hwMusaFrcBoardTable=hwMusaFrcBoardTable, hwMusaFrcSigPortStatisTable=hwMusaFrcSigPortStatisTable, hwMusaFrcMccRxMRF=hwMusaFrcMccRxMRF, hwMusaFrcSarRxErrGRLI=hwMusaFrcSarRxErrGRLI, hwMusaFrcPhyPort=hwMusaFrcPhyPort, hwMusaFrcSigPortSide=hwMusaFrcSigPortSide, hwMusaFrcPhyPortType=hwMusaFrcPhyPortType, hwMusaFrcAtmInBytes=hwMusaFrcAtmInBytes, hwMusaFrcPvcType=hwMusaFrcPvcType, hwMusaFrcSarRxErrLNE=hwMusaFrcSarRxErrLNE, hwMusaFrcIwfTable=hwMusaFrcIwfTable, hwMusaFrcCir=hwMusaFrcCir, hwMusaFrcLogPortSigPortType=hwMusaFrcLogPortSigPortType, hwMusaFrcMccTxRxNID=hwMusaFrcMccTxRxNID, hwMusaFrcSarRxErrABRT=hwMusaFrcSarRxErrABRT, hwMusaFrcLogPortSigOper=hwMusaFrcLogPortSigOper, hwMusaFrcLogicPortEntry=hwMusaFrcLogicPortEntry, hwMusaFrcSarSendSucc=hwMusaFrcSarSendSucc, hwMusaFrcMccTxQOV=hwMusaFrcMccTxQOV, hwMusaFrcT1LineCode=hwMusaFrcT1LineCode, hwMusaFrcSarRxErrRedLine=hwMusaFrcSarRxErrRedLine, hwMusaFrcConnectMode=hwMusaFrcConnectMode, hwMusaFrcClockMode=hwMusaFrcClockMode, hwMusaFrcOutByteCount=hwMusaFrcOutByteCount, hwMusaFrcPhyPortLineIfTable=hwMusaFrcPhyPortLineIfTable, hwMusaFrcServiceFlag=hwMusaFrcServiceFlag, hwMusaFrcCongestState=hwMusaFrcCongestState, hwMusaFrcUpOutBytes=hwMusaFrcUpOutBytes, hwMusaFrcRACTS=hwMusaFrcRACTS, hwMusaFrcClp=hwMusaFrcClp, hwMusaFrcServiceMode=hwMusaFrcServiceMode, hwMusaFrcDlciType=hwMusaFrcDlciType, hwMusaFrcAtmCongestState=hwMusaFrcAtmCongestState, hwMusaFrcDownOutBytes=hwMusaFrcDownOutBytes, hwMusaFrcSarRecvSucc=hwMusaFrcSarRecvSucc, hwMusaFrcIwfStatisTable=hwMusaFrcIwfStatisTable, hwMusaFrcDownOutDiscards=hwMusaFrcDownOutDiscards, hwMusaFrcLFADSR=hwMusaFrcLFADSR, hwMusaFrcMccTxGOV=hwMusaFrcMccTxGOV, hwMusaFrcSarRxErrGBPB=hwMusaFrcSarRxErrGBPB, hwMusaFrcMainClock=hwMusaFrcMainClock, hwMusaFrcIwfCcid=hwMusaFrcIwfCcid, hwMusaFrcT1E1TsBitMap=hwMusaFrcT1E1TsBitMap, hwMusaFrcMccRxNoBuff=hwMusaFrcMccRxNoBuff, hwMusaFrcSarRxErrINTO=hwMusaFrcSarRxErrINTO, hwMusaFrcMccRxQOV=hwMusaFrcMccRxQOV, hwMusaMccType=hwMusaMccType, hwMusaFrcPvcAlarmEnable=hwMusaFrcPvcAlarmEnable, hwMusaFrcPortDlci=hwMusaFrcPortDlci, hwMusaFrcDe=hwMusaFrcDe, hwMusaFrcPhyPortId=hwMusaFrcPhyPortId, hwMusaFrcSarRxErrNoBuff=hwMusaFrcSarRxErrNoBuff, hwMusaFrcOutLossParkageC=hwMusaFrcOutLossParkageC, hwMusaFrcAlarmCount=hwMusaFrcAlarmCount, hwMusaFrcSarRxErrCPUU=hwMusaFrcSarRxErrCPUU, hwMusaFrcMccRxNO=hwMusaFrcMccRxNO, hwMusaFrcOperate=hwMusaFrcOperate, hwMusaFrcEfci=hwMusaFrcEfci, hwMusaFrcAtmPortStatisTable=hwMusaFrcAtmPortStatisTable, hwMusaFrcFreeBandwidth=hwMusaFrcFreeBandwidth, hwMusaFrcSarRxErrCLP=hwMusaFrcSarRxErrCLP, hwMusaFrcLogicPortOperate=hwMusaFrcLogicPortOperate, hwMusaFrcEir=hwMusaFrcEir, hwMusaFrcLogPortSigUserN392=hwMusaFrcLogPortSigUserN392, hwMusaFrcLogicPortId=hwMusaFrcLogicPortId, hwMusaFrcSendFrameC=hwMusaFrcSendFrameC, hwMusaFrcAlarmSw=hwMusaFrcAlarmSw, hwMusaFrcMccRxCR=hwMusaFrcMccRxCR, hwMusaFrcUserLinkC=hwMusaFrcUserLinkC, hwMusaFrcPhyPortLineIfEntry=hwMusaFrcPhyPortLineIfEntry, hwMusaFrcUpInFrames=hwMusaFrcUpInFrames, hwMusaFrcPhyStatisGroup=hwMusaFrcPhyStatisGroup, hwMusaFrcAtmInFrames=hwMusaFrcAtmInFrames, hwMusaFrcMccRxBSY=hwMusaFrcMccRxBSY, hwMusaFrcPhyMCCStatisEntry=hwMusaFrcPhyMCCStatisEntry, hwMusaFrcLogicPort=hwMusaFrcLogicPort)
