#
# PySNMP MIB module VDSL2-LINE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/VDSL2-LINE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:57:23 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint")
HCPerfTimeElapsed, HCPerfIntervalThreshold = mibBuilder.importSymbols("HC-PerfHist-TC-MIB", "HCPerfTimeElapsed", "HCPerfIntervalThreshold")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
ModuleIdentity, MibIdentifier, ObjectIdentity, transmission, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, TimeTicks, NotificationType, Counter64, IpAddress, Counter32, Bits, iso, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "MibIdentifier", "ObjectIdentity", "transmission", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "TimeTicks", "NotificationType", "Counter64", "IpAddress", "Counter32", "Bits", "iso", "Integer32")
TextualConvention, RowStatus, DisplayString, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "RowStatus", "DisplayString", "TruthValue")
Xdsl2BpscResult, Xdsl2ChInitPolicy, Xdsl2SymbolProtection, Xdsl2UpboKLF, Xdsl2LineCeFlag, Xdsl2LineUs0Disable, Xdsl2BitsAlloc, Xdsl2OperationModes, Xdsl2MrefPsdUs, Xdsl2LineProfiles, Xdsl2ChAtmStatus, Xdsl2LineUs0Mask, Xdsl2LineTxRefVnUs, Xdsl2PsdMaskDs, Xdsl2LineTxRefVnDs, Xdsl2LineClassMask, Xdsl2TransmissionModeType, Xdsl2Direction, Xdsl2MrefPsdDs, Xdsl2ScMaskDs, Xdsl2ChInpReport, Xdsl2Band, Xdsl2RaMode, Xdsl2CarMask, Xdsl2LineSnrMode, Xdsl2LinePsdMaskSelectUs, Xdsl2LineBpsc, Xdsl2LinePmMode, Xdsl2PsdMaskUs, Xdsl2RfiBands, Xdsl2SymbolProtection8, Xdsl2LdsfResult, Xdsl2ScMaskUs, Xdsl2PowerMngState, Xdsl2LineLdsf, Xdsl2LineReset, Xdsl2Unit, Xdsl2ConfPmsForce, Xdsl2MaxBer, Xdsl2BandUs, Xdsl2LastTransmittedState, Xdsl2ChPtmStatus, Xdsl2LineLimitMask, Xdsl2LineStatus, Xdsl2InitResult, Xdsl2Tssi = mibBuilder.importSymbols("VDSL2-LINE-TC-MIB", "Xdsl2BpscResult", "Xdsl2ChInitPolicy", "Xdsl2SymbolProtection", "Xdsl2UpboKLF", "Xdsl2LineCeFlag", "Xdsl2LineUs0Disable", "Xdsl2BitsAlloc", "Xdsl2OperationModes", "Xdsl2MrefPsdUs", "Xdsl2LineProfiles", "Xdsl2ChAtmStatus", "Xdsl2LineUs0Mask", "Xdsl2LineTxRefVnUs", "Xdsl2PsdMaskDs", "Xdsl2LineTxRefVnDs", "Xdsl2LineClassMask", "Xdsl2TransmissionModeType", "Xdsl2Direction", "Xdsl2MrefPsdDs", "Xdsl2ScMaskDs", "Xdsl2ChInpReport", "Xdsl2Band", "Xdsl2RaMode", "Xdsl2CarMask", "Xdsl2LineSnrMode", "Xdsl2LinePsdMaskSelectUs", "Xdsl2LineBpsc", "Xdsl2LinePmMode", "Xdsl2PsdMaskUs", "Xdsl2RfiBands", "Xdsl2SymbolProtection8", "Xdsl2LdsfResult", "Xdsl2ScMaskUs", "Xdsl2PowerMngState", "Xdsl2LineLdsf", "Xdsl2LineReset", "Xdsl2Unit", "Xdsl2ConfPmsForce", "Xdsl2MaxBer", "Xdsl2BandUs", "Xdsl2LastTransmittedState", "Xdsl2ChPtmStatus", "Xdsl2LineLimitMask", "Xdsl2LineStatus", "Xdsl2InitResult", "Xdsl2Tssi")
vdsl2MIB = ModuleIdentity((1, 3, 6, 1, 2, 1, 10, 251))
vdsl2MIB.setRevisions(('2009-09-30 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: vdsl2MIB.setRevisionsDescriptions(('Initial version, published as RFC 5650.',))
if mibBuilder.loadTexts: vdsl2MIB.setLastUpdated('200909300000Z')
if mibBuilder.loadTexts: vdsl2MIB.setOrganization('ADSLMIB Working Group')
if mibBuilder.loadTexts: vdsl2MIB.setContactInfo('WG-email: adslmib@ietf.org Info: https://www1.ietf.org/mailman/listinfo/adslmib Chair: Mike Sneed Sand Channel Systems Postal: P.O. Box 37324 Raleigh NC 27627-732 Email: sneedmike@hotmail.com Phone: +1 206 600 7022 Co-Chair: Menachem Dodge ECI Telecom Ltd. Postal: 30 Hasivim St. Petach Tikva 49517, Israel. Email: mbdodge@ieee.org Phone: +972 3 926 8421 Co-editor: Moti Morgenstern ECI Telecom Ltd. Postal: 30 Hasivim St. Petach Tikva 49517, Israel. Email: moti.morgenstern@ecitele.com Phone: +972 3 926 6258 Co-editor: Scott Baillie NEC Australia Postal: 649-655 Springvale Road, Mulgrave, Victoria 3170, Australia. Email: scott.baillie@nec.com.au Phone: +61 3 9264 3986 Co-editor: Umberto Bonollo NEC Australia Postal: 649-655 Springvale Road, Mulgrave, Victoria 3170, Australia. Email: umberto.bonollo@nec.com.au Phone: +61 3 9264 3385 ')
if mibBuilder.loadTexts: vdsl2MIB.setDescription(" This document defines a Management Information Base (MIB) module for use with network management protocols in the Internet community for the purpose of managing VDSL2, ADSL, ADSL2, and ADSL2+ lines. The MIB module described in RFC 2662 [RFC2662] defines objects used for managing Asymmetric Bit-Rate DSL (ADSL) interfaces per [T1E1.413], [G.992.1], and [G.992.2]. These object descriptions are based upon the specifications for the ADSL Embedded Operations Channel (EOC) as defined in American National Standards Institute (ANSI) T1E1.413 [T1E1.413] and International Telecommunication Union (ITU-T) G.992.1 [G.992.1] and G.992.2 [G.992.2]. The MIB module described in RFC 4706 [RFC4706] defines objects used for managing ADSL2 interfaces per [G.992.3] and [G.992.4], and ADSL2+ interfaces per [G.992.5]. That MIB is also capable of managing ADSL interfaces per [T1E1.413], [G.992.1], and [G.992.2]. This document does not obsolete RFC 2662 [RFC2662] or RFC 4706 [RFC4706], but rather provides a more comprehensive management model that manages VDSL2 interfaces per G.993.2 [G.993.2] as well as ADSL, ADSL2, and ADSL2+ technologies per T1E1.413, G.992.1, G.992.2, G.992.3, G.992.4, and G.992.5 ([T1E1.413], [G.992.1], [G.992.2], [G.992.3], [G.992.4], and [G.992.5], respectively). Additionally, the management framework for VDSL2 lines specified by the Digital Subscriber Line Forum (DSLF) has been taken into consideration [TR-129]. That framework is based on the ITU-T G.997.1 standard [G.997.1] and its amendment 1 [G.997.1-Am1]. The MIB module is located in the MIB tree under MIB 2 transmission, as discussed in the MIB-2 Integration (RFC 2863 [RFC2863]) section of this document. Copyright (c) 2009 IETF Trust and the persons identified as authors of the code. All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. - Neither the name of Internet Society, IETF or IETF Trust, nor the names of specific contributors, may be used to endorse or promote products derived from this software without specific prior written permission. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. This version of this MIB module is part of RFC 5650; see the RFC itself for full legal notices.")
xdsl2Notifications = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 251, 0))
xdsl2Objects = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 251, 1))
xdsl2Conformance = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 251, 2))
xdsl2Line = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 251, 1, 1))
xdsl2Status = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 251, 1, 2))
xdsl2Inventory = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 251, 1, 3))
xdsl2PM = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 251, 1, 4))
xdsl2Profile = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 251, 1, 5))
xdsl2Scalar = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 251, 1, 6))
xdsl2PMLine = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 251, 1, 4, 1))
xdsl2PMChannel = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 251, 1, 4, 2))
xdsl2ProfileLine = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 251, 1, 5, 1))
xdsl2ProfileChannel = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 251, 1, 5, 2))
xdsl2ProfileAlarmConf = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 251, 1, 5, 3))
xdsl2ScalarSC = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 251, 1, 6, 1))
xdsl2LineTable = MibTable((1, 3, 6, 1, 2, 1, 10, 251, 1, 1, 1), )
if mibBuilder.loadTexts: xdsl2LineTable.setStatus('current')
if mibBuilder.loadTexts: xdsl2LineTable.setDescription('The table xdsl2LineTable contains configuration, command and status parameters of the VDSL2/ADSL/ADSL2 or ADSL2+ line. Several objects in this table MUST be maintained in a persistent manner.')
xdsl2LineEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 251, 1, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: xdsl2LineEntry.setStatus('current')
if mibBuilder.loadTexts: xdsl2LineEntry.setDescription('The index of this table is an interface index where the interface has an ifType of vdsl2(251).')
xdsl2LineConfTemplate = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 1, 1, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)).clone('DEFVAL')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xdsl2LineConfTemplate.setReference('DSL Forum TR-129, paragraph #5.1')
if mibBuilder.loadTexts: xdsl2LineConfTemplate.setStatus('current')
if mibBuilder.loadTexts: xdsl2LineConfTemplate.setDescription('The value of this object identifies the row in the xDSL2 Line Configuration Template Table, xdsl2LineConfTemplateTable, that applies for this line. This object MUST be maintained in a persistent manner.')
xdsl2LineConfFallbackTemplate = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 1, 1, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xdsl2LineConfFallbackTemplate.setStatus('current')
if mibBuilder.loadTexts: xdsl2LineConfFallbackTemplate.setDescription('This object is used to identify the template that will be used if the xDSL2 line fails to operate using the primary template. The primary template is identified using the xdsl2LineConfTemplate object. For example, a xDSL2 line may fall back to a template with a lower rate if the rate specified in the primary template cannot be achieved. The value of this object identifies a row in the xDSL2 Line Configuration Template Table, xdsl2LineConfTemplateTable. Any row in the xdsl2LineConfTemplateTable table may be used as a fall-back template. If the xDSL2 line fails to operate using the fall-back template, then the primary template should be retried. The xTU-C should continue to alternate between the primary and fall-back templates until one of them succeeds. If the value of this object is a zero-length string, then no fall-back template is defined and only the primary template will be used. Note that implementation of this object is not mandatory. If this object is not supported, any attempt to modify this object should result in the SET request being rejected. This object MUST be maintained in a persistent manner.')
xdsl2LineAlarmConfTemplate = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 1, 1, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)).clone('DEFVAL')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xdsl2LineAlarmConfTemplate.setReference('DSL Forum TR-129, paragraph #5.1')
if mibBuilder.loadTexts: xdsl2LineAlarmConfTemplate.setStatus('current')
if mibBuilder.loadTexts: xdsl2LineAlarmConfTemplate.setDescription('The value of this object identifies the row in the xDSL2 Line Alarm Configuration Template Table, xdsl2LineAlarmConfTemplateTable, which applies to this line. This object MUST be maintained in a persistent manner.')
xdsl2LineCmndConfPmsf = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 1, 1, 1, 4), Xdsl2ConfPmsForce().clone('l3toL0')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xdsl2LineCmndConfPmsf.setReference('ITU-T G.997.1, paragraph #7.3.1.1.3 (PMSF)')
if mibBuilder.loadTexts: xdsl2LineCmndConfPmsf.setStatus('current')
if mibBuilder.loadTexts: xdsl2LineCmndConfPmsf.setDescription('Power management state forced (PMSF). Defines the line states to be forced by the near-end xTU on this line. This object MUST be maintained in a persistent manner.')
xdsl2LineCmndConfLdsf = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 1, 1, 1, 5), Xdsl2LineLdsf().clone('inhibit')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xdsl2LineCmndConfLdsf.setReference('ITU-T G.997.1, paragraph #7.3.1.1.8 (LDSF)')
if mibBuilder.loadTexts: xdsl2LineCmndConfLdsf.setStatus('current')
if mibBuilder.loadTexts: xdsl2LineCmndConfLdsf.setDescription("Loop diagnostic state forced (LDSF). Defines whether the line should be forced into the loop diagnostics mode by the near-end xTU of this line. Note that a loop diagnostic may be initiated by the far-end xTU at any time. Only when the xdsl2LineStatusPwrMngState object is in the 'l3' state and the xdsl2LineCmndConfPmsf object is in the 'l0orL2toL3' state, can the line be forced into loop diagnostic mode procedures. Upon successful completion of the loop diagnostic mode procedures, the Access Node shall set this object to 'inhibit', and xdsl2LineStatusPwrMngState will remain in the 'l3' state. The loop diagnostic data shall be available at least until xdsl2LineCmndConfPmsf is set to the 'l3toL0' state. The results of the loop diagnostic procedure are stored in the tables xdsl2SCStatusTable, xdsl2SCStatusBandTable, and xdsl2SCStatusSegmentTable. The status of the loop diagnostic procedure is indicated by xdsl2LineCmndConfLdsfFailReason. As long as loop diagnostic procedures are not completed successfully, attempts shall be made to do so, until the loop diagnostic mode is no longer forced on the line through this configuration parameter.")
xdsl2LineCmndConfLdsfFailReason = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 1, 1, 1, 6), Xdsl2LdsfResult().clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdsl2LineCmndConfLdsfFailReason.setStatus('current')
if mibBuilder.loadTexts: xdsl2LineCmndConfLdsfFailReason.setDescription('The status of the most recent occasion when the loop diagnostics state forced (LDSF) command was issued for the associated line.')
xdsl2LineCmndConfBpsc = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 1, 1, 1, 7), Xdsl2LineBpsc().clone('idle')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xdsl2LineCmndConfBpsc.setStatus('current')
if mibBuilder.loadTexts: xdsl2LineCmndConfBpsc.setDescription("Request a bits-per-subcarrier measurement to be made. A request for a bits-per-subcarrier measurement is made by setting this object to the value of 'measure'. Upon completion of the measurement request, the Access Node shall set this object to 'idle'. The SNMP agent should allow initiating a bits-per-subcarrier measurement process only if there is no other bits-per-subcarrier measurement already running, and respond with an SNMP error (e.g., wrongValue) otherwise. Note that a bits-per-subcarrier measurement is also performed during a line diagnostic procedure. This object provides an additional mechanism to fetch the bits-per-subcarrier data. This additional mechanism is provided so that bits-per-subcarrier data may be fetched without forcing the line into no power state. This is useful because the bits-per-subcarrier allocation may be adjusted at show time due to rate adaption and bit swapping. The implementation of this additional mechanism for measuring bits per subcarrier is not mandatory. The results of the bits-per-subcarrier measurement are stored in xdsl2LineSegmentTable. The status of the bits-per-subcarrier measurement is indicated by xdsl2LineCmndConfBpscFailReason.")
xdsl2LineCmndConfBpscFailReason = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 1, 1, 1, 8), Xdsl2BpscResult().clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdsl2LineCmndConfBpscFailReason.setStatus('current')
if mibBuilder.loadTexts: xdsl2LineCmndConfBpscFailReason.setDescription('The status of the most recent bits-per-subcarrier measurement request issued for the associated line.')
xdsl2LineCmndConfBpscRequests = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 1, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdsl2LineCmndConfBpscRequests.setStatus('current')
if mibBuilder.loadTexts: xdsl2LineCmndConfBpscRequests.setDescription('Measurement request counter. This counter is incremented by one every time a request for a bits-per-subcarrier measurement is made. A measurement request is made by modifying the xdsl2LineCmndConfBpsc object from idle(1) to the value measure(2). The measurement results may be very large and will not fit into a single PDU; hence, multiple SNMP GET requests may be required to fetch the measurement results. Because the measurement results cannot be fetched atomically, it is possible for a second manager to start a new measurement before a first manager has fetched all of its results. An SNMP manager can use this object to ensure that the measurement results retrieved using one or more GET requests all belong to the measurement initiated by that manager. The following steps are suggested in order for the SNMP manager to initiate the bits-per-subcarrier measurement: 1. Wait for xdsl2LineCmndConfBpsc value to be idle(1). 2. Perform an SNMP GET for xdsl2LineCmndConfBpscRequests. 3. Wait a short delay (4 -> 8 seconds). 4. Perform an SNMP SET on xdsl2LineCmndConfBpsc with the value measure(2). 5. If step 4 returns an error, then go to step 1. 6. Wait for xdsl2LineCmndConfBpsc value to be idle(1). 7. Fetch measurement results using one or more GET PDUs. 8. Perform an SNMP GET for xdsl2LineCmndConfBpscRequests. 9. Compute the difference between the two values of xdsl2LineCmndConfBpscRequests. If the value is one, then the results are valid, else go to step 1.')
xdsl2LineCmndAutomodeColdStart = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 1, 1, 1, 10), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xdsl2LineCmndAutomodeColdStart.setReference('ITU-T G.997.1, paragraph #7.3.1.1.10 (Automode Cold Start Forced)')
if mibBuilder.loadTexts: xdsl2LineCmndAutomodeColdStart.setStatus('current')
if mibBuilder.loadTexts: xdsl2LineCmndAutomodeColdStart.setDescription("Automode cold start forced. This parameter is defined in order to improve testing of the performance of xTUs supporting automode when it is enabled in the MIB. Change the value of this parameter to 'true' to indicate a change in loop conditions applied to the devices under the test. The xTUs shall reset any historical information used for automode and for shortening G.994.1 handshake and initialization. Automode is the case where multiple operation-modes are enabled through the xdsl2LConfProfXtuTransSysEna object in the line configuration profile being used for the line, and where the selection of the actual operation-mode depends not only on the common capabilities of both xTUs (as exchanged in G.994.1), but also on achievable data rates under given loop conditions.")
xdsl2LineCmndConfReset = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 1, 1, 1, 11), Xdsl2LineReset().clone('idle')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xdsl2LineCmndConfReset.setStatus('current')
if mibBuilder.loadTexts: xdsl2LineCmndConfReset.setDescription("Request a line reset to occur. If this object is set to the value of 'reset', then force the line to reset (i.e., the modems will retrain). When the line has successfully reset, the SNMP agent will set the value of this object to 'idle'. Note that the xdsl2LineCmndConfPmsf object will always take precedence over this object. If the xdsl2LineCmndConfPmsf object is set to the value 'l0orL2toL3', then the line MUST NOT return to the Showtime state due to a reset request action performed using this object.")
xdsl2LineStatusActTemplate = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 1, 1, 1, 12), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdsl2LineStatusActTemplate.setStatus('current')
if mibBuilder.loadTexts: xdsl2LineStatusActTemplate.setDescription('This object is used to identify the template that is currently in use for this line. This object is updated when a successful line initialization occurs. This object indicates if the primary template (xdsl2LineConfTemplate) is in use or the fall-back template (xdsl2LineConfFallbackTemplate) is in use. If the line is not successfully initialized, then the value of this object will be a zero-length string.')
xdsl2LineStatusXtuTransSys = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 1, 1, 1, 13), Xdsl2TransmissionModeType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdsl2LineStatusXtuTransSys.setReference('ITU-T G.997.1, paragraph #7.5.1.1 (xDSL transmission system)')
if mibBuilder.loadTexts: xdsl2LineStatusXtuTransSys.setStatus('current')
if mibBuilder.loadTexts: xdsl2LineStatusXtuTransSys.setDescription("The xTU Transmission System (xTS) in use. It is coded in a bitmap representation with one bit set to '1' (the selected coding for the DSL line). This parameter may be derived from the handshaking procedures defined in Recommendation G.994.1. A set of xDSL line transmission modes, with one bit per mode.")
xdsl2LineStatusPwrMngState = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 1, 1, 1, 14), Xdsl2PowerMngState().clone('l3')).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdsl2LineStatusPwrMngState.setReference('ITU-T G.997.1, paragraph #7.5.1.5 (Line power management state)')
if mibBuilder.loadTexts: xdsl2LineStatusPwrMngState.setStatus('current')
if mibBuilder.loadTexts: xdsl2LineStatusPwrMngState.setDescription('The current power management state.')
xdsl2LineStatusInitResult = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 1, 1, 1, 15), Xdsl2InitResult().clone('noFail')).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdsl2LineStatusInitResult.setReference('ITU-T G.997.1, paragraph #7.5.1.6 (Initialization success/failure cause)')
if mibBuilder.loadTexts: xdsl2LineStatusInitResult.setStatus('current')
if mibBuilder.loadTexts: xdsl2LineStatusInitResult.setDescription('Indicates the result of the last full initialization performed on the line.')
xdsl2LineStatusLastStateDs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 1, 1, 1, 16), Xdsl2LastTransmittedState().clone('atucG9941')).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdsl2LineStatusLastStateDs.setReference('ITU-T G.997.1, paragraph #7.5.1.7 (Downstream last transmitted state)')
if mibBuilder.loadTexts: xdsl2LineStatusLastStateDs.setStatus('current')
if mibBuilder.loadTexts: xdsl2LineStatusLastStateDs.setDescription('The last successful transmitted initialization state in the downstream direction in the last full initialization performed on the line.')
xdsl2LineStatusLastStateUs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 1, 1, 1, 17), Xdsl2LastTransmittedState().clone('aturG9941')).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdsl2LineStatusLastStateUs.setReference('ITU-T G.997.1, paragraph #7.5.1.8 (Upstream last transmitted state)')
if mibBuilder.loadTexts: xdsl2LineStatusLastStateUs.setStatus('current')
if mibBuilder.loadTexts: xdsl2LineStatusLastStateUs.setDescription('The last successful transmitted initialization state in the upstream direction in the last full initialization performed on the line.')
xdsl2LineStatusXtur = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 1, 1, 1, 18), Xdsl2LineStatus().clone(namedValues=NamedValues(("noDefect", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdsl2LineStatusXtur.setReference('ITU-T G.997.1, paragraph #7.1.1.2 (Line far-end failures)')
if mibBuilder.loadTexts: xdsl2LineStatusXtur.setStatus('current')
if mibBuilder.loadTexts: xdsl2LineStatusXtur.setDescription('Indicates the current state (existing failures) of the xTU-R. This is a bitmap of possible conditions.')
xdsl2LineStatusXtuc = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 1, 1, 1, 19), Xdsl2LineStatus().clone(namedValues=NamedValues(("noDefect", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdsl2LineStatusXtuc.setReference('ITU-T G.997.1, paragraph #7.1.1.1 (Line near-end failures)')
if mibBuilder.loadTexts: xdsl2LineStatusXtuc.setStatus('current')
if mibBuilder.loadTexts: xdsl2LineStatusXtuc.setDescription('Indicates the current state (existing failures) of the xTU-C. This is a bitmap of possible conditions.')
xdsl2LineStatusAttainableRateDs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 1, 1, 1, 20), Unsigned32()).setUnits('bits/second').setMaxAccess("readonly")
if mibBuilder.loadTexts: xdsl2LineStatusAttainableRateDs.setReference('ITU-T G.997.1, paragraph #7.5.1.19 (ATTNDRds)')
if mibBuilder.loadTexts: xdsl2LineStatusAttainableRateDs.setStatus('current')
if mibBuilder.loadTexts: xdsl2LineStatusAttainableRateDs.setDescription('Maximum Attainable Data Rate Downstream. The maximum downstream net data rate currently attainable by the xTU-C transmitter and the xTU-R receiver, coded in bit/s.')
xdsl2LineStatusAttainableRateUs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 1, 1, 1, 21), Unsigned32()).setUnits('bits/second').setMaxAccess("readonly")
if mibBuilder.loadTexts: xdsl2LineStatusAttainableRateUs.setReference('ITU-T G.997.1, paragraph #7.5.1.20 (ATTNDRus)')
if mibBuilder.loadTexts: xdsl2LineStatusAttainableRateUs.setStatus('current')
if mibBuilder.loadTexts: xdsl2LineStatusAttainableRateUs.setDescription('Maximum Attainable Data Rate Upstream. The maximum upstream net data rate currently attainable by the xTU-R transmitter and the xTU-C receiver, coded in bit/s.')
xdsl2LineStatusActPsdDs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 1, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-900, 0), ValueRangeConstraint(2147483647, 2147483647), )).clone(2147483647)).setUnits('0.1 dBm/Hz').setMaxAccess("readonly")
if mibBuilder.loadTexts: xdsl2LineStatusActPsdDs.setReference('ITU-T G.997.1, paragraph #7.5.1.21 (ACTPSDds)')
if mibBuilder.loadTexts: xdsl2LineStatusActPsdDs.setStatus('current')
if mibBuilder.loadTexts: xdsl2LineStatusActPsdDs.setDescription('Actual Power Spectral Density (PSD) Downstream. The average downstream transmit PSD over the subcarriers used for downstream. It ranges from -900 to 0 units of 0.1 dBm/Hz (physical values are -90 to 0 dBm/Hz). A value of 0x7FFFFFFF (2147483647) indicates the measurement is out of range to be represented.')
xdsl2LineStatusActPsdUs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 1, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-900, 0), ValueRangeConstraint(2147483647, 2147483647), )).clone(2147483647)).setUnits('0.1 dBm/Hz').setMaxAccess("readonly")
if mibBuilder.loadTexts: xdsl2LineStatusActPsdUs.setReference('ITU-T G.997.1, paragraph #7.5.1.22 (ACTPSDus)')
if mibBuilder.loadTexts: xdsl2LineStatusActPsdUs.setStatus('current')
if mibBuilder.loadTexts: xdsl2LineStatusActPsdUs.setDescription('Actual Power Spectral Density (PSD) Upstream. The average upstream transmit PSD over the subcarriers used for upstream. It ranges from -900 to 0 units of 0.1 dBm/Hz (physical values are -90 to 0 dBm/Hz). A value of 0x7FFFFFFF (2147483647) indicates the measurement is out of range to be represented.')
xdsl2LineStatusActAtpDs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 1, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-310, 310), ValueRangeConstraint(2147483647, 2147483647), )).clone(2147483647)).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: xdsl2LineStatusActAtpDs.setReference('ITU-T G.997.1, paragraph #7.5.1.24 (ACTATPds)')
if mibBuilder.loadTexts: xdsl2LineStatusActAtpDs.setStatus('current')
if mibBuilder.loadTexts: xdsl2LineStatusActAtpDs.setDescription('Actual Aggregate Transmit Power Downstream. The total amount of transmit power delivered by the xTU-C at the U-C reference point, at the instant of measurement. It ranges from -310 to 310 units of 0.1 dBm (physical values are -31 to 31 dBm). A value of 0x7FFFFFFF (2147483647) indicates the measurement is out of range to be represented.')
xdsl2LineStatusActAtpUs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 1, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-310, 310), ValueRangeConstraint(2147483647, 2147483647), )).clone(2147483647)).setUnits('0.1 dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: xdsl2LineStatusActAtpUs.setReference('ITU-T G.997.1, paragraph #7.5.1.25 (ACTATPus)')
if mibBuilder.loadTexts: xdsl2LineStatusActAtpUs.setStatus('current')
if mibBuilder.loadTexts: xdsl2LineStatusActAtpUs.setDescription('Actual Aggregate Transmit Power Upstream. The total amount of transmit power delivered by the xTU-R at the U-R reference point, at the instant of measurement. It ranges from -310 to 310 units of 0.1 dBm (physical values are -31 to 31 dBm). A value of 0x7FFFFFFF (2147483647) indicates the measurement is out of range to be represented.')
xdsl2LineStatusActProfile = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 1, 1, 1, 26), Xdsl2LineProfiles()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdsl2LineStatusActProfile.setReference('ITU-T G.997.1, paragraph #7.5.1.2 (VDSL2 Profile)')
if mibBuilder.loadTexts: xdsl2LineStatusActProfile.setStatus('current')
if mibBuilder.loadTexts: xdsl2LineStatusActProfile.setDescription('The G.993.2 profile in use. The configuration parameter xdsl2LConfProfProfiles defines the set of allowed G.993.2 profiles. This parameter indicates the profile in use on this line. This parameter may be derived from the handshaking procedures defined in ITU-T Recommendation G.994.1.')
xdsl2LineStatusActLimitMask = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 1, 1, 1, 27), Xdsl2LineLimitMask()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdsl2LineStatusActLimitMask.setReference('ITU-T G.997.1, paragraph #7.5.1.3 (VDSL2 Limit PSD Mask and Band plan)')
if mibBuilder.loadTexts: xdsl2LineStatusActLimitMask.setStatus('current')
if mibBuilder.loadTexts: xdsl2LineStatusActLimitMask.setDescription('The Limit PSD mask and band plan in use. The configuration parameter xdsl2LConfProfLimitMask defines the set of allowed G.993.2 limit PSD masks. This parameter indicates the limit PSD mask in use on this line.')
xdsl2LineStatusActUs0Mask = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 1, 1, 1, 28), Xdsl2LineUs0Mask()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdsl2LineStatusActUs0Mask.setReference('ITU-T G.997.1, paragraph #7.5.1.4 (VDSL2 US0 PSD Mask)')
if mibBuilder.loadTexts: xdsl2LineStatusActUs0Mask.setStatus('current')
if mibBuilder.loadTexts: xdsl2LineStatusActUs0Mask.setDescription('The US0 PSD mask in use. The configuration parameter xdsl2LConfProfUs0Mask defines the set of allowed US0 PSD masks. This parameter indicates the US0 PSD mask in use on this line. This parameter may be derived from the handshaking procedures defined in ITU-T Recommendation G.994.1.')
xdsl2LineStatusActSnrModeDs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 1, 1, 1, 29), Xdsl2LineSnrMode().clone('virtualNoiseDisabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdsl2LineStatusActSnrModeDs.setReference('ITU-T G.997.1, paragraph #7.5.1.15 (ACTSNRMODEds)')
if mibBuilder.loadTexts: xdsl2LineStatusActSnrModeDs.setStatus('current')
if mibBuilder.loadTexts: xdsl2LineStatusActSnrModeDs.setDescription('This parameter indicates if the transmitter-referred virtual noise is active on the line in the downstream direction. The configuration parameter xdsl2LConfProfSnrModeDs is used to configure referred virtual noise.')
xdsl2LineStatusActSnrModeUs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 1, 1, 1, 30), Xdsl2LineSnrMode().clone('virtualNoiseDisabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdsl2LineStatusActSnrModeUs.setReference('ITU-T G.997.1, paragraph #7.5.1.18 (ACTSNRMODEus)')
if mibBuilder.loadTexts: xdsl2LineStatusActSnrModeUs.setStatus('current')
if mibBuilder.loadTexts: xdsl2LineStatusActSnrModeUs.setDescription('This parameter indicates if the transmitter-referred virtual noise is active on the line in the upstream direction. The configuration parameter xdsl2LConfProfSnrModeUs is used to configure referred virtual noise.')
xdsl2LineStatusElectricalLength = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 1, 1, 1, 31), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1280))).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: xdsl2LineStatusElectricalLength.setReference('ITU-T G.997.1, paragraph #7.5.1.23 (UPBOKLE)')
if mibBuilder.loadTexts: xdsl2LineStatusElectricalLength.setStatus('current')
if mibBuilder.loadTexts: xdsl2LineStatusElectricalLength.setDescription('This parameter contains the estimated electrical length expressed in dB at 1 MHz, kl0. This is the final electrical length that would have been sent from the VTU-O to VTU-R if the electrical length was not forced by the CO-MIB. The value ranges from 0 to 128 dB in steps of 0.1 dB.')
xdsl2LineStatusTssiDs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 1, 1, 1, 32), Xdsl2Tssi()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdsl2LineStatusTssiDs.setReference('ITU-T G.997.1, paragraph #7.5.1.29.5 (TSSpsds)')
if mibBuilder.loadTexts: xdsl2LineStatusTssiDs.setStatus('current')
if mibBuilder.loadTexts: xdsl2LineStatusTssiDs.setDescription('The transmit spectrum shaping (TSSi) breakpoints expressed as the set of breakpoints exchanged during G.994.1 (Downstream).')
xdsl2LineStatusTssiUs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 1, 1, 1, 33), Xdsl2Tssi()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdsl2LineStatusTssiUs.setReference('ITU-T G.997.1, paragraph #7.5.1.29.6 (TSSpsus)')
if mibBuilder.loadTexts: xdsl2LineStatusTssiUs.setStatus('current')
if mibBuilder.loadTexts: xdsl2LineStatusTssiUs.setDescription('The transmit spectrum shaping (TSSi) breakpoints expressed as the set of breakpoints exchanged during G.994.1 (Upstream).')
xdsl2LineStatusMrefPsdDs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 1, 1, 1, 34), Xdsl2MrefPsdDs()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdsl2LineStatusMrefPsdDs.setReference('ITU-T G.997.1, paragraph #7.5.1.29.7 (MREFPSDds)')
if mibBuilder.loadTexts: xdsl2LineStatusMrefPsdDs.setStatus('current')
if mibBuilder.loadTexts: xdsl2LineStatusMrefPsdDs.setDescription('The MEDLEY Reference PSD status parameters in the downstream direction expressed as the set of breakpoints exchanged at initialization.')
xdsl2LineStatusMrefPsdUs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 1, 1, 1, 35), Xdsl2MrefPsdUs()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdsl2LineStatusMrefPsdUs.setReference('ITU-T G.997.1, paragraph #7.5.1.29.8 (MREFPSDus)')
if mibBuilder.loadTexts: xdsl2LineStatusMrefPsdUs.setStatus('current')
if mibBuilder.loadTexts: xdsl2LineStatusMrefPsdUs.setDescription('The MEDLEY Reference PSD status parameters in the upstream direction expressed as the set of breakpoints exchanged at initialization.')
xdsl2LineStatusTrellisDs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 1, 1, 1, 36), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdsl2LineStatusTrellisDs.setReference('ITU-T G.997.1, paragraph #7.5.1.30 (TRELLISds)')
if mibBuilder.loadTexts: xdsl2LineStatusTrellisDs.setStatus('current')
if mibBuilder.loadTexts: xdsl2LineStatusTrellisDs.setDescription('This parameter reports whether trellis coding is in use in the downstream direction.')
xdsl2LineStatusTrellisUs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 1, 1, 1, 37), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdsl2LineStatusTrellisUs.setReference('ITU-T G.997.1, paragraph #7.5.1.31 (TRELLISus)')
if mibBuilder.loadTexts: xdsl2LineStatusTrellisUs.setStatus('current')
if mibBuilder.loadTexts: xdsl2LineStatusTrellisUs.setDescription('This parameter reports whether trellis coding is in use in the upstream direction.')
xdsl2LineStatusActualCe = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 1, 1, 1, 38), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 16)).clone(2)).setUnits('N/32 samples').setMaxAccess("readonly")
if mibBuilder.loadTexts: xdsl2LineStatusActualCe.setReference('ITU-T G.997.1, paragraph #7.5.1.32 (ACTUALCE)')
if mibBuilder.loadTexts: xdsl2LineStatusActualCe.setStatus('current')
if mibBuilder.loadTexts: xdsl2LineStatusActualCe.setDescription('(ACTUALCE) This parameter reports the cyclic extension used on the line. It is coded as an unsigned integer from 2 to 16 in units of N/32 samples, where 2N is the Inverse Discrete Fourier Transform (IDFT) size.')
xdsl2LineSegmentTable = MibTable((1, 3, 6, 1, 2, 1, 10, 251, 1, 2, 1), )
if mibBuilder.loadTexts: xdsl2LineSegmentTable.setStatus('current')
if mibBuilder.loadTexts: xdsl2LineSegmentTable.setDescription('The table xdsl2LineSegmentTable contains status parameters of VDSL2/ADSL/ADSL2 and ADSL2+ subcarriers. The parameters in this table are updated when a measurement request is made using the xdsl2LineCmndConfBpsc object. Note that a bits-per-subcarrier measurement is also performed during a line diagnostic procedure. This table provides an additional mechanism to fetch the bits-per-subcarrier data. This additional mechanism is provided so that bits-per-subcarrier data may be fetched without forcing the line into no power state. This is useful because the bits-per-subcarrier allocation may be adjusted at Showtime due to rate adaption and bit swapping. The implementation of this additional mechanism for measuring bits per subcarrier is not mandatory.')
xdsl2LineSegmentEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 251, 1, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "VDSL2-LINE-MIB", "xdsl2LineSegmentDirection"), (0, "VDSL2-LINE-MIB", "xdsl2LineSegment"))
if mibBuilder.loadTexts: xdsl2LineSegmentEntry.setStatus('current')
if mibBuilder.loadTexts: xdsl2LineSegmentEntry.setDescription('The table xdsl2LineSegmentEntry contains status parameters of VDSL2/ADSL/ADSL2 and ADSL2+ subcarriers. Objects in the table refer to NSus and NSds. For G.993.2, the value of NSus and NSds are, respectively, the indices of the highest supported upstream and downstream subcarriers according to the selected implementation profile. For ADSL, NSus is equal to NSCus-1 and NSds is equal to NSCds-1. One index of this table is an interface index where the interface has an ifType of vdsl2(251). A second index of this table is the transmission direction. A third index identifies the specific segment of the subcarriers status addressed.')
xdsl2LineSegmentDirection = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 2, 1, 1, 1), Xdsl2Direction())
if mibBuilder.loadTexts: xdsl2LineSegmentDirection.setStatus('current')
if mibBuilder.loadTexts: xdsl2LineSegmentDirection.setDescription('The direction of the subcarrier either upstream or downstream.')
xdsl2LineSegment = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 2, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: xdsl2LineSegment.setStatus('current')
if mibBuilder.loadTexts: xdsl2LineSegment.setDescription('The segment of the subcarriers status information provided by this row. Status parameters in this table are retrieved in segments. The first segment of the status information is retrieved with xdsl2LineSegment=1, the second segment is retrieved with xdsl2LineSegment=2, and so on. When a status parameter is retrieved in n segments where n<8) then, for that parameter, GET operations for the remaining segment numbers (n+1 to 8) will respond with a zero-length OCTET STRING.')
xdsl2LineSegmentBitsAlloc = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 2, 1, 1, 3), Xdsl2BitsAlloc()).setUnits('bits').setMaxAccess("readonly")
if mibBuilder.loadTexts: xdsl2LineSegmentBitsAlloc.setReference('ITU-T G.997.1, paragraph #7.5.1.29.1 (BITSpsds) and paragraph #7.5.1.29.2 (BITSpsus)')
if mibBuilder.loadTexts: xdsl2LineSegmentBitsAlloc.setStatus('current')
if mibBuilder.loadTexts: xdsl2LineSegmentBitsAlloc.setDescription('The bits allocation per subcarrier. An array of 256 octets (512 nibbles), designed for supporting up to 512 (downstream) subcarriers. When more than 512 subcarriers are supported, the status information is reported through multiple (up to 8) segments. The first segment is then used for the first 512 subcarriers. The second segment is used for the subcarriers 512 to 1023 and so on. The aggregate number of utilized nibbles in the downstream direction (in all segments) depends on NSds; in the upstream direction, it depends on NSus. This value is referred to here as NS. The segment number is in xdsl2SCStatusSegment. Nibble i (0 <= i < MIN((NS+1)-(segment-1)*512,512)) in each segment is set to a value in the range 0 to 15 to indicate that the respective downstream or upstream subcarrier j (j=(segement-1)*512+i) has the same amount of bits allocation.')
xdsl2LineSegmentRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 2, 1, 1, 4), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xdsl2LineSegmentRowStatus.setStatus('current')
if mibBuilder.loadTexts: xdsl2LineSegmentRowStatus.setDescription("Row Status. The SNMP agent will create a row in this table for storing the results of a measurement performed on the associated line, if the row does not already exist. The SNMP manager is not permitted to create rows in this table or set the row status to 'notInService'. In the first case, if the SNMP manager tries to create a new row, the SNMP agent responds with the value 'noCreation' in the error status field of the response-PDU. In the latter case, the SNMP agent responds with the value 'wrongValue' in the error status field of the response-PDU. The SNMP agent may have limited resources; therefore, if multiple rows coexist in this table, it may fail to add new rows to this table or allocate memory resources. If that occurs, the SNMP agent responds with the value 'noResources' (for the xdsl2LineCmndConfBpscFailReason object in xdsl2LineTable). The management system (the operator) may delete rows from this table according to any scheme. For example, after retrieving the results. When the SNMP manager deletes any row in this table, the SNMP agent MUST delete all rows in this table that have the same ifIndex value.")
xdsl2LineBandTable = MibTable((1, 3, 6, 1, 2, 1, 10, 251, 1, 1, 2), )
if mibBuilder.loadTexts: xdsl2LineBandTable.setStatus('current')
if mibBuilder.loadTexts: xdsl2LineBandTable.setDescription('The table xdsl2LineBandTable contains the, per-band line status parameters of the VDSL2/ADSL/ADSL2 or ADSL2+ line. The parameters in this table are updated at line initialization time and at Showtime.')
xdsl2LineBandEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 251, 1, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "VDSL2-LINE-MIB", "xdsl2LineBand"))
if mibBuilder.loadTexts: xdsl2LineBandEntry.setStatus('current')
if mibBuilder.loadTexts: xdsl2LineBandEntry.setDescription('One index of this table is an interface index where the interface has an ifType of vdsl2(251). A second index of this table is a per-band index covering both VDSL2 and ADSL/ADSL2/ADSL2+.')
xdsl2LineBand = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 1, 2, 1, 1), Xdsl2Band())
if mibBuilder.loadTexts: xdsl2LineBand.setStatus('current')
if mibBuilder.loadTexts: xdsl2LineBand.setDescription("Identifies the band(s) associated with this line. For ADSL/ADSL2/ADSL2+, the values 'upstream' and 'downstream' will always be present. For VDSL2, a subset of {'us0', 'ds1', 'us1' ... 'ds4', 'us4' } will always be present, together with rows for 'upstream' and 'downstream', in which only the xdsl2LineBandStatusSnrMargin object is expected to hold a valid (average) measurement.")
xdsl2LineBandStatusLnAtten = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 1, 2, 1, 2), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 1270), ValueRangeConstraint(2147483646, 2147483646), ValueRangeConstraint(2147483647, 2147483647), )).clone(2147483646)).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: xdsl2LineBandStatusLnAtten.setReference('ITU-T G.997.1, paragraph #7.5.1.9 (LATNds) and paragraph #7.5.1.10 (LATNus)6')
if mibBuilder.loadTexts: xdsl2LineBandStatusLnAtten.setStatus('current')
if mibBuilder.loadTexts: xdsl2LineBandStatusLnAtten.setDescription('Line Attenuation. When referring to a band in the downstream direction, it is the measured difference in the total power transmitted by the xTU-C and the total power received by the xTU-R over all subcarriers of that band during initialization. When referring to a band in the upstream direction, it is the measured difference in the total power transmitted by the xTU-R and the total power received by the xTU-C over all subcarriers of that band during initialization. Values range from 0 to 1270 in units of 0.1 dB (physical values are 0 to 127 dB). A special value of 0x7FFFFFFF (2147483647) indicates the line attenuation is out of range to be represented. A special value of 0x7FFFFFFE (2147483646) indicates the line attenuation measurement is unavailable.')
xdsl2LineBandStatusSigAtten = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 1, 2, 1, 3), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 1270), ValueRangeConstraint(2147483646, 2147483646), ValueRangeConstraint(2147483647, 2147483647), )).clone(2147483646)).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: xdsl2LineBandStatusSigAtten.setReference('ITU-T G.997.1, paragraph #7.5.1.11 (SATNds) and paragraph #7.5.1.12 (SATNus)')
if mibBuilder.loadTexts: xdsl2LineBandStatusSigAtten.setStatus('current')
if mibBuilder.loadTexts: xdsl2LineBandStatusSigAtten.setDescription('Signal Attenuation. When referring to a band in the downstream direction, it is the measured difference in the total power transmitted by the xTU-C and the total power received by the xTU-R over all subcarriers of that band during Showtime. When referring to a band in the upstream direction, it is the measured difference in the total power transmitted by the xTU-R and the total power received by the xTU-C over all subcarriers of that band during Showtime. Values range from 0 to 1270 in units of 0.1 dB (physical values are 0 to 127 dB). A special value of 0x7FFFFFFF (2147483647) indicates the line attenuation is out of range to be represented. A special value of 0x7FFFFFFE (2147483646) indicates the line attenuation measurement is unavailable.')
xdsl2LineBandStatusSnrMargin = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-640, 630), ValueRangeConstraint(2147483646, 2147483646), ValueRangeConstraint(2147483647, 2147483647), )).clone(2147483646)).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: xdsl2LineBandStatusSnrMargin.setReference('ITU-T G.997.1, paragraph #7.5.1.13 (SNRMds) and paragraph #7.5.1.14 (SNRMpbds) and paragraph #7.5.1.16 (SNRMus) and paragraph #7.5.1.17 (SNRMpbus)')
if mibBuilder.loadTexts: xdsl2LineBandStatusSnrMargin.setStatus('current')
if mibBuilder.loadTexts: xdsl2LineBandStatusSnrMargin.setDescription('SNR Margin is the maximum increase in dB of the noise power received at the xTU (xTU-R for a band in the downstream direction and xTU-C for a band in the upstream direction), such that the BER requirements are met for all bearer channels received at the xTU. Values range from -640 to 630 in units of 0.1 dB (physical values are -64 to 63 dB). A special value of 0x7FFFFFFF (2147483647) indicates the SNR Margin is out of range to be represented. A special value of 0x7FFFFFFE (2147483646) indicates the SNR Margin measurement is currently unavailable.')
xdsl2ChannelStatusTable = MibTable((1, 3, 6, 1, 2, 1, 10, 251, 1, 2, 2), )
if mibBuilder.loadTexts: xdsl2ChannelStatusTable.setStatus('current')
if mibBuilder.loadTexts: xdsl2ChannelStatusTable.setDescription('The table xdsl2ChannelStatusTable contains status parameters of VDSL2/ADSL/ADSL2 or ADSL2+ channel. This table contains live data from equipment.')
xdsl2ChannelStatusEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 251, 1, 2, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "VDSL2-LINE-MIB", "xdsl2ChStatusUnit"))
if mibBuilder.loadTexts: xdsl2ChannelStatusEntry.setStatus('current')
if mibBuilder.loadTexts: xdsl2ChannelStatusEntry.setDescription('One index of this table is an interface index where the interface has an ifType of a DSL channel. A second index of this table is the termination unit.')
xdsl2ChStatusUnit = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 2, 2, 1, 1), Xdsl2Unit())
if mibBuilder.loadTexts: xdsl2ChStatusUnit.setStatus('current')
if mibBuilder.loadTexts: xdsl2ChStatusUnit.setDescription('The termination unit.')
xdsl2ChStatusActDataRate = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 2, 2, 1, 2), Unsigned32()).setUnits('bits/second').setMaxAccess("readonly")
if mibBuilder.loadTexts: xdsl2ChStatusActDataRate.setReference('ITU-T G.997.1, paragraph #7.5.2.1 (Actual data rate)')
if mibBuilder.loadTexts: xdsl2ChStatusActDataRate.setStatus('current')
if mibBuilder.loadTexts: xdsl2ChStatusActDataRate.setDescription('The actual net data rate at which the bearer channel is operating, if in L0 power management state. In L1 or L2 states, it relates to the previous L0 state. The data rate is coded in bit/s.')
xdsl2ChStatusPrevDataRate = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 2, 2, 1, 3), Unsigned32()).setUnits('bits/second').setMaxAccess("readonly")
if mibBuilder.loadTexts: xdsl2ChStatusPrevDataRate.setReference('ITU-T G.997.1, paragraph #7.5.2.2 (Previous data rate)')
if mibBuilder.loadTexts: xdsl2ChStatusPrevDataRate.setStatus('current')
if mibBuilder.loadTexts: xdsl2ChStatusPrevDataRate.setDescription('The previous net data rate that the bearer channel was operating at just before the latest rate change event. This could be a full or short initialization, fast retrain, DRA or power management transitions, excluding transitions between L0 state and L1 or L2 states. The data rate is coded in bit/s.')
xdsl2ChStatusActDelay = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 2, 2, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 8176))).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: xdsl2ChStatusActDelay.setReference('ITU-T G.997.1, paragraph #7.5.2.3 (Actual interleaving delay)')
if mibBuilder.loadTexts: xdsl2ChStatusActDelay.setStatus('current')
if mibBuilder.loadTexts: xdsl2ChStatusActDelay.setDescription('The actual one-way interleaving delay introduced by the PMS-TC in the direction of the bearer channel, if in L0 power management state. In L1 or L2 states, it relates to the previous L0 state. It is coded in ms (rounded to the nearest ms).')
xdsl2ChStatusActInp = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 2, 2, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setUnits('0.1 symbols').setMaxAccess("readonly")
if mibBuilder.loadTexts: xdsl2ChStatusActInp.setReference('ITU-T G.997.1, paragraph #7.5.2.4 (ACTINP)')
if mibBuilder.loadTexts: xdsl2ChStatusActInp.setStatus('current')
if mibBuilder.loadTexts: xdsl2ChStatusActInp.setDescription('Actual impulse noise protection. This parameter reports the actual impulse noise protection (INP) on the bearer channel in the L0 state. In the L1 or L2 state, the parameter contains the INP in the previous L0 state. For ADSL, this value is computed according to the formula specified in the relevant Recommendation based on the actual framing parameters. For ITU-T Recommendation G.993.2, the method to report this value is according to the INPREPORT parameter. The value is coded in fractions of DMT symbols with a granularity of 0.1 symbols. The range is from 0 to 25.4. The special value of 255 indicates an ACTINP higher than 25.4.')
xdsl2ChStatusInpReport = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 2, 2, 1, 6), Xdsl2ChInpReport().clone('inpComputedUsingFormula')).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdsl2ChStatusInpReport.setReference('ITU-T G.997.1 Amendment 1, paragraph #7.5.2.5 (INPREPORT)')
if mibBuilder.loadTexts: xdsl2ChStatusInpReport.setStatus('current')
if mibBuilder.loadTexts: xdsl2ChStatusInpReport.setDescription('Impulse noise protection reporting mode.')
xdsl2ChStatusNFec = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 2, 2, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: xdsl2ChStatusNFec.setReference('ITU-T G.997.1, paragraph #7.5.2.6.1 (NFEC)')
if mibBuilder.loadTexts: xdsl2ChStatusNFec.setStatus('current')
if mibBuilder.loadTexts: xdsl2ChStatusNFec.setDescription('Actual size of Reed-Solomon codeword. This parameter reports the actual number of Reed-Solomon redundancy bytes per codeword used in the latency path in which the bearer channel is transported. The value is coded in bytes. It ranges from 0 to 16. The value 0 indicates no Reed-Solomon coding.')
xdsl2ChStatusRFec = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 2, 2, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setUnits('bits').setMaxAccess("readonly")
if mibBuilder.loadTexts: xdsl2ChStatusRFec.setReference('ITU-T G.997.1, paragraph #7.5.2.6.2 (RFEC)')
if mibBuilder.loadTexts: xdsl2ChStatusRFec.setStatus('current')
if mibBuilder.loadTexts: xdsl2ChStatusRFec.setDescription('Actual number of Reed-Solomon redundancy bytes. This parameter reports the actual number of Reed-Solomon redundancy bytes per codeword used in the latency path in which the bearer channel is transported. The value is coded in bytes. It ranges from 0 to 16. The value 0 indicates no Reed-Solomon coding.')
xdsl2ChStatusLSymb = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 2, 2, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('bits').setMaxAccess("readonly")
if mibBuilder.loadTexts: xdsl2ChStatusLSymb.setReference('ITU-T G.997.1, paragraph #7.5.2.6.3 (LSYMB)')
if mibBuilder.loadTexts: xdsl2ChStatusLSymb.setStatus('current')
if mibBuilder.loadTexts: xdsl2ChStatusLSymb.setDescription('Actual number of bits per symbol. This parameter reports the actual number of bits per symbol assigned to the latency path in which the bearer channel is transported. This value does not include trellis overhead. The value is coded in bits. It ranges from 0 to 65535.')
xdsl2ChStatusIntlvDepth = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 2, 2, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4096)).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdsl2ChStatusIntlvDepth.setReference('ITU-T G.997.1, paragraph #7.5.2.6.4 (INTLVDEPTH)')
if mibBuilder.loadTexts: xdsl2ChStatusIntlvDepth.setStatus('current')
if mibBuilder.loadTexts: xdsl2ChStatusIntlvDepth.setDescription('Actual interleaving depth. This parameter reports the actual depth of the interleaver used in the latency path in which the bearer channel is transported. The value ranges from 1 to 4096 in steps of 1. The value 1 indicates no interleaving.')
xdsl2ChStatusIntlvBlock = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 2, 2, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(4, 255)).clone(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdsl2ChStatusIntlvBlock.setReference('ITU-T G.997.1, paragraph #7.5.2.6.5 (INTLVBLOCK)')
if mibBuilder.loadTexts: xdsl2ChStatusIntlvBlock.setStatus('current')
if mibBuilder.loadTexts: xdsl2ChStatusIntlvBlock.setDescription('Actual interleaving block length. This parameter reports the actual block length of the interleaver used in the latency path in which the bearer channel is transported. The value ranges from 4 to 255 in steps of 1.')
xdsl2ChStatusLPath = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 2, 2, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdsl2ChStatusLPath.setReference('ITU-T G.997.1 amendment 1, paragraph #7.5.2.7 (LPATH)')
if mibBuilder.loadTexts: xdsl2ChStatusLPath.setStatus('current')
if mibBuilder.loadTexts: xdsl2ChStatusLPath.setDescription('Actual latency path. This parameter reports the index of the actual latency path in which the bearer is transported. The valid values are 0, 1, 2 and 3. For G.992.1, the FAST path shall be mapped to the latency index 0, and the INTERLEAVED path shall be mapped to the latency index 1.')
xdsl2ChStatusAtmStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 2, 2, 1, 13), Xdsl2ChAtmStatus().clone(namedValues=NamedValues(("noDefect", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdsl2ChStatusAtmStatus.setReference('ITU-T G.997.1, paragraph #7.1.4 (ATM data path failures)')
if mibBuilder.loadTexts: xdsl2ChStatusAtmStatus.setStatus('current')
if mibBuilder.loadTexts: xdsl2ChStatusAtmStatus.setDescription("Indicates current state (existing failures) of the DSL channel in case its Data Path is ATM. This is a bitmap of possible conditions. In case the channel is not of ATM Data Path, the object is set to '0'.")
xdsl2ChStatusPtmStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 2, 2, 1, 14), Xdsl2ChPtmStatus().clone(namedValues=NamedValues(("noDefect", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdsl2ChStatusPtmStatus.setReference('ITU-T G.997.1, paragraph #7.1.5 (PTM Data Path failures)')
if mibBuilder.loadTexts: xdsl2ChStatusPtmStatus.setStatus('current')
if mibBuilder.loadTexts: xdsl2ChStatusPtmStatus.setDescription("Indicates current state (existing failures) of the DSL channel in case its Data Path is PTM (Packet Transfer Mode). This is a bitmap of possible conditions. In case the channel is not of PTM Data Path, the object is set to '0'.")
xdsl2ScalarSCMaxInterfaces = MibScalar((1, 3, 6, 1, 2, 1, 10, 251, 1, 6, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdsl2ScalarSCMaxInterfaces.setStatus('current')
if mibBuilder.loadTexts: xdsl2ScalarSCMaxInterfaces.setDescription('This value determines the maximum number of interfaces supported by xdsl2SCStatusTable, xdsl2SCStatusBandTable, and xdsl2SCStatusSegmentTable.')
xdsl2ScalarSCAvailInterfaces = MibScalar((1, 3, 6, 1, 2, 1, 10, 251, 1, 6, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdsl2ScalarSCAvailInterfaces.setStatus('current')
if mibBuilder.loadTexts: xdsl2ScalarSCAvailInterfaces.setDescription('This value determines the currently available number of interfaces listed in xdsl2SCStatusTable, xdsl2SCStatusBandTable, and xdsl2SCStatusSegmentTable.')
xdsl2SCStatusTable = MibTable((1, 3, 6, 1, 2, 1, 10, 251, 1, 2, 3), )
if mibBuilder.loadTexts: xdsl2SCStatusTable.setStatus('current')
if mibBuilder.loadTexts: xdsl2SCStatusTable.setDescription('The table xdsl2SCStatusTable contains status parameters for VDSL2/ADSL/ADSL2 and ADSL2+ that provide information about the size of parameters in xdsl2SCStatusSegmentTable. The parameters in this table MUST be updated after a loop diagnostic procedure, MAY be updated after a line initialization, and MAY be updated at Showtime.')
xdsl2SCStatusEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 251, 1, 2, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "VDSL2-LINE-MIB", "xdsl2SCStatusDirection"))
if mibBuilder.loadTexts: xdsl2SCStatusEntry.setStatus('current')
if mibBuilder.loadTexts: xdsl2SCStatusEntry.setDescription('One index of this table is an interface index where the interface has an ifType of vdsl2(251). A second index of this table is the transmission direction.')
xdsl2SCStatusDirection = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 2, 3, 1, 1), Xdsl2Direction())
if mibBuilder.loadTexts: xdsl2SCStatusDirection.setStatus('current')
if mibBuilder.loadTexts: xdsl2SCStatusDirection.setDescription('The direction of the subcarrier either upstream or downstream.')
xdsl2SCStatusLinScale = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 2, 3, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdsl2SCStatusLinScale.setReference('ITU-T G.997.1, paragraph #7.5.1.26.1 (HLINSCds) and paragraph #7.5.1.26.7 (HLINSCus)')
if mibBuilder.loadTexts: xdsl2SCStatusLinScale.setStatus('current')
if mibBuilder.loadTexts: xdsl2SCStatusLinScale.setDescription('The scale factor to be applied to the H(f) linear representation values for the respective transmission direction. This parameter is only available after a loop diagnostic procedure. It is represented as an unsigned integer in the range from 1 to 2^16-1.')
xdsl2SCStatusLinScGroupSize = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 2, 3, 1, 3), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ValueRangeConstraint(4, 4), ValueRangeConstraint(8, 8), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdsl2SCStatusLinScGroupSize.setReference('ITU-T G.997.1, paragraph #7.5.1.26.2 (HLINGds) and paragraph #7.5.1.26.8 (HLINGus)')
if mibBuilder.loadTexts: xdsl2SCStatusLinScGroupSize.setStatus('current')
if mibBuilder.loadTexts: xdsl2SCStatusLinScGroupSize.setDescription('Number of subcarriers per group used to report the H(f) linear representation values for the respective transmission direction. The valid values are 1, 2, 4, and 8. For ADSL, this parameter is equal to one and, for VDSL2, it is equal to the size of a subcarrier group used to compute these parameters. This parameter is only available after a loop diagnostic procedure.')
xdsl2SCStatusLogMt = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 2, 3, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdsl2SCStatusLogMt.setReference('ITU-T G.997.1, paragraph #7.5.1.26.4 (HLOGMTds) and paragraph #7.5.1.26.10 (HLOGMTus)')
if mibBuilder.loadTexts: xdsl2SCStatusLogMt.setStatus('current')
if mibBuilder.loadTexts: xdsl2SCStatusLogMt.setDescription('This parameter contains the number of symbols used to measure the Hlog(f) values. It is represented as an unsigned integer in the range from 1 to 2^16-1. After a loop diagnostic procedure, this parameter shall contain the number of symbols used to measure the Hlog(f). It should correspond to the value specified in the Recommendation (e.g., the number of symbols in 1 s time interval for ITU-T Recommendation. G.992.3).')
xdsl2SCStatusLogScGroupSize = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 2, 3, 1, 5), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ValueRangeConstraint(4, 4), ValueRangeConstraint(8, 8), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdsl2SCStatusLogScGroupSize.setReference('ITU-T G.997.1, paragraph #7.5.1.26.5 (HLOGGds) and paragraph #7.5.1.26.11 (HLOGGus)')
if mibBuilder.loadTexts: xdsl2SCStatusLogScGroupSize.setStatus('current')
if mibBuilder.loadTexts: xdsl2SCStatusLogScGroupSize.setDescription('Number of subcarriers per group used to report the H(f) logarithmic representation values for the respective transmission direction. The valid values are 1, 2, 4, and 8. For ADSL, this parameter is equal to 1, and for VDSL2, it is equal to the size of a subcarrier group used to compute these parameters.')
xdsl2SCStatusQlnMt = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 2, 3, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdsl2SCStatusQlnMt.setReference('ITU-T G.997.1, paragraph #7.5.1.27.1 (QLNMTds) and paragraph #7.5.1.27.4 (QLNMTus)')
if mibBuilder.loadTexts: xdsl2SCStatusQlnMt.setStatus('current')
if mibBuilder.loadTexts: xdsl2SCStatusQlnMt.setDescription('This parameter contains the number of symbols used to measure the QLN(f) values. It is an unsigned integer in the range from 1 to 2^16-1. After a loop diagnostic procedure, this parameter shall contain the number of symbols used to measure the QLN(f). It should correspond to the value specified in the Recommendation (e.g., the number of symbols in 1 s time interval for ITU-T Recommendation G.992.3).')
xdsl2SCStatusQlnScGroupSize = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 2, 3, 1, 7), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ValueRangeConstraint(4, 4), ValueRangeConstraint(8, 8), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdsl2SCStatusQlnScGroupSize.setReference('ITU-T G.997.1, paragraph #7.5.1.27.2 (QLNGds) and paragraph #7.5.1.27.5 (QLNGus)')
if mibBuilder.loadTexts: xdsl2SCStatusQlnScGroupSize.setStatus('current')
if mibBuilder.loadTexts: xdsl2SCStatusQlnScGroupSize.setDescription('Number of subcarriers per group used to report the Quiet Line Noise values for the respective transmission direction. The valid values are 1, 2, 4, and 8. For ADSL, this parameter is equal to 1, and for VDSL2, it is equal to the size of a subcarrier group used to compute these parameters.')
xdsl2SCStatusSnrMtime = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 2, 3, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setUnits('symbols').setMaxAccess("readonly")
if mibBuilder.loadTexts: xdsl2SCStatusSnrMtime.setReference('ITU-T G.997.1, paragraph #7.5.1.28.1 (SNRMTds) and paragraph #7.5.1.28.4 (SNRMTus)')
if mibBuilder.loadTexts: xdsl2SCStatusSnrMtime.setStatus('current')
if mibBuilder.loadTexts: xdsl2SCStatusSnrMtime.setDescription('This parameter contains the number of symbols used to measure the SNR(f) values. It is an unsigned integer in the range from 1 to 2^16-1. After a loop diagnostic procedure, this parameter shall contain the number of symbols used to measure the SNR(f). It should correspond to the value specified in the Recommendation (e.g., the number of symbols in 1 s time interval for ITU-T Recommendation G.992.3).')
xdsl2SCStatusSnrScGroupSize = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 2, 3, 1, 9), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ValueRangeConstraint(4, 4), ValueRangeConstraint(8, 8), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdsl2SCStatusSnrScGroupSize.setReference('ITU-T G.997.1, paragraph #7.5.1.28.2 (SNRGds) and paragraph #7.5.1.28.5 (SNRGus)')
if mibBuilder.loadTexts: xdsl2SCStatusSnrScGroupSize.setStatus('current')
if mibBuilder.loadTexts: xdsl2SCStatusSnrScGroupSize.setDescription('Number of subcarriers per group used to report the SNR values on the respective transmission direction. The valid values are 1, 2, 4, and 8. For ADSL, this parameter is equal to 1, and for VDSL2, it is equal to the size of a subcarrier group used to compute these parameters.')
xdsl2SCStatusAttainableRate = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 2, 3, 1, 10), Unsigned32()).setUnits('bits/second').setMaxAccess("readonly")
if mibBuilder.loadTexts: xdsl2SCStatusAttainableRate.setReference('ITU-T G.997.1, paragraph #7.5.1.19 (ATTNDRds) and paragraph #7.5.1.20 (ATTNDRus)')
if mibBuilder.loadTexts: xdsl2SCStatusAttainableRate.setStatus('current')
if mibBuilder.loadTexts: xdsl2SCStatusAttainableRate.setDescription('Maximum Attainable Data Rate. The maximum net data rate currently attainable by the xTU-C transmitter and xTU-R receiver (when referring to downstream direction) or by the xTU-R transmitter and xTU-C receiver (when referring to upstream direction). Value is coded in bits/s. This object reflects the value of the parameter following the most recent DELT performed on the associated line. Once the DELT process is over, the parameter no longer changes until the row is deleted or a new DELT process is initiated.')
xdsl2SCStatusRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 2, 3, 1, 11), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xdsl2SCStatusRowStatus.setStatus('current')
if mibBuilder.loadTexts: xdsl2SCStatusRowStatus.setDescription("Row Status. The SNMP agent will create a row in this table for storing the results of a DELT performed on the associated line, if the row does not already exist. When a row is created in this table, the SNMP agent should also create corresponding rows in the tables xdsl2SCStatusBandTable and xdsl2SCStatusSegmentTable. The SNMP manager is not permitted to create rows in this table or set the row status to 'notInService'. In the first case, if the SNMP manager tries to create a new row, the SNMP agent responds with the value 'noCreation' in the error status field of the response-PDU. In the latter case the SNMP agent responds with the value 'wrongValue' in the error status field of the response-PDU. When a row is deleted in this table, the SNMP agent should also delete corresponding rows in the tables xdsl2SCStatusBandTable and xdsl2SCStatusSegmentTable. The SNMP agent may have limited resources; therefore, if multiple rows coexist in this table, it may fail to add new rows to this table or allocate memory resources for a new DELT process. If that occurs, the SNMP agent responds with either the value 'tableFull' or the value 'noResources' (for the xdsl2LineCmndConfLdsfFailReason object in xdsl2LineTable). The management system (the operator) may delete rows from this table according to any scheme. For example, after retrieving the results.")
xdsl2SCStatusBandTable = MibTable((1, 3, 6, 1, 2, 1, 10, 251, 1, 2, 4), )
if mibBuilder.loadTexts: xdsl2SCStatusBandTable.setStatus('current')
if mibBuilder.loadTexts: xdsl2SCStatusBandTable.setDescription('The table xdsl2SCStatusBandTable contains subcarrier status parameters for VDSL2/ADSL/ADSL2 and ADSL2+ that are grouped per- band. For ADSL/ADSL2/ADSL2+, there is a single upstream band and a single downstream band. For VDSL2, there are several downstream bands and several upstream bands. The parameters in this table are only available after a loop diagnostic procedure.')
xdsl2SCStatusBandEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 251, 1, 2, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "VDSL2-LINE-MIB", "xdsl2SCStatusBand"))
if mibBuilder.loadTexts: xdsl2SCStatusBandEntry.setStatus('current')
if mibBuilder.loadTexts: xdsl2SCStatusBandEntry.setDescription('One index of this table is an interface index where the interface has an ifType of vdsl2(251). A second index of this table is the transmission band.')
xdsl2SCStatusBand = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 2, 4, 1, 1), Xdsl2Band())
if mibBuilder.loadTexts: xdsl2SCStatusBand.setStatus('current')
if mibBuilder.loadTexts: xdsl2SCStatusBand.setDescription('The transmission band.')
xdsl2SCStatusBandLnAtten = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 2, 4, 1, 2), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 1270), ValueRangeConstraint(2147483646, 2147483646), ValueRangeConstraint(2147483647, 2147483647), )).clone(2147483646)).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: xdsl2SCStatusBandLnAtten.setReference('ITU-T G.997.1, paragraph #7.5.1.9 (LATNds) and paragraph #7.5.1.10 (LATNus)')
if mibBuilder.loadTexts: xdsl2SCStatusBandLnAtten.setStatus('current')
if mibBuilder.loadTexts: xdsl2SCStatusBandLnAtten.setDescription('When referring to a band in the downstream direction, it is the measured difference in the total power transmitted by the xTU-C and the total power received by the xTU-R over all subcarriers during diagnostics mode. When referring to a band in the upstream direction, it is the measured difference in the total power transmitted by the xTU-R and the total power received by the xTU-C over all subcarriers during diagnostics mode. It ranges from 0 to 1270 units of 0.1 dB (physical values are 0 to 127 dB). A special value of 0x7FFFFFFF (2147483647) indicates the line attenuation is out of range to be represented. A special value of 0x7FFFFFFE (2147483646) indicates the line attenuation measurement is unavailable. This object reflects the value of the parameter following the most recent DELT performed on the associated line. Once the DELT process is over, the parameter no longer changes until the row is deleted or a new DELT process is initiated.')
xdsl2SCStatusBandSigAtten = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 2, 4, 1, 3), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 1270), ValueRangeConstraint(2147483646, 2147483646), ValueRangeConstraint(2147483647, 2147483647), )).clone(2147483646)).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: xdsl2SCStatusBandSigAtten.setReference('ITU-T G.997.1, paragraph #7.5.1.11 (SATNds) and paragraph #7.5.1.12 (SATNus)')
if mibBuilder.loadTexts: xdsl2SCStatusBandSigAtten.setStatus('current')
if mibBuilder.loadTexts: xdsl2SCStatusBandSigAtten.setDescription('When referring to a band in the downstream direction, it is the measured difference in the total power transmitted by the xTU-C and the total power received by the xTU-R over all subcarriers during Showtime after the diagnostics mode. When referring to the upstream direction, it is the measured difference in the total power transmitted by the xTU-R and the total power received by the xTU-C over all subcarriers during Showtime after the diagnostics mode. It ranges from 0 to 1270 units of 0.1 dB (physical values are 0 to 127 dB). A special value of 0x7FFFFFFF (2147483647) indicates the line attenuation is out of range to be represented. A special value of 0x7FFFFFFE (2147483646) indicates the line attenuation measurement is unavailable. This object reflects the value of the parameter following the most recent DELT performed on the associated line. Once the DELT process is over, the parameter no longer changes until the row is deleted or a new DELT process is initiated.')
xdsl2SCStatusSegmentTable = MibTable((1, 3, 6, 1, 2, 1, 10, 251, 1, 2, 5), )
if mibBuilder.loadTexts: xdsl2SCStatusSegmentTable.setStatus('current')
if mibBuilder.loadTexts: xdsl2SCStatusSegmentTable.setDescription('The table xdsl2SCStatusSegmentTable contains status parameters of VDSL2/ADSL/ADSL2 and ADSL2+ subcarriers. Several objects in the table refer to NSus and NSds. For G.993.2, the value of NSus and NSds are, respectively, the indices of the highest supported upstream and downstream subcarriers according to the selected implementation profile. For ADSL, NSus is equal to NSCus-1 and NSds is equal to NSCds-1. The parameters in this table MUST be updated after a loop diagnostic procedure and MAY be updated after a line initialization and MAY be updated at Showtime.')
xdsl2SCStatusSegmentEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 251, 1, 2, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "VDSL2-LINE-MIB", "xdsl2SCStatusDirection"), (0, "VDSL2-LINE-MIB", "xdsl2SCStatusSegment"))
if mibBuilder.loadTexts: xdsl2SCStatusSegmentEntry.setStatus('current')
if mibBuilder.loadTexts: xdsl2SCStatusSegmentEntry.setDescription('One index of this table is an interface index where the interface has an ifType of vdsl2(251). A second index of this table is the transmission direction. A third index identifies the specific segment of the subcarriers status addressed.')
xdsl2SCStatusSegment = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 2, 5, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: xdsl2SCStatusSegment.setStatus('current')
if mibBuilder.loadTexts: xdsl2SCStatusSegment.setDescription('The segment of the subcarriers status information provided by this row. Several status parameters in this table are retrieved in segments. The first segment of the status information is retrieved with xdsl2SCStatusSegment=1, the second segment is retrieved with xdsl2SCStatusSegment=2, and so on. When any status parameter is retrieved in n segments where n<8), then for that parameter, GET operations for the remaining segment numbers (n+1 to 8) will respond with a zero-length OCTET STRING.')
xdsl2SCStatusSegmentLinReal = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 2, 5, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdsl2SCStatusSegmentLinReal.setReference('ITU-T G.997.1, paragraph #7.5.1.26.3 (HLINpsds) and paragraph #7.5.1.26.9 (HLINpsus)')
if mibBuilder.loadTexts: xdsl2SCStatusSegmentLinReal.setStatus('current')
if mibBuilder.loadTexts: xdsl2SCStatusSegmentLinReal.setDescription('An array of up to 512 complex H(f) linear representation values in linear scale for the respective transmission direction. It is designed to support up to 512 (downstream) subcarrier groups and can be retrieved in a single segment. The number of utilized values in the downstream direction depends on NSds; in the upstream direction, it depends on NSus. This value is referred to here as NS. Each array entry represents the real component (referred to here as a(i)) of Hlin(f = i*Df) value for a particular subcarrier group index i (0 <= i <= NS). Hlin(f) is represented as ((scale/2^15)*((a(i)+j*b(i))/2^15)), where scale is xdsl2SCStatusLinScale and a(i) and b(i) (provided by the xdsl2SCStatusSegmentLinImg object) are in the range (-2^15+1) to (+2^15-1). A special value a(i)=b(i)= -2^15 indicates that no measurement could be done for the subcarrier group because it is out of the passband or that the attenuation is out of range to be represented. This parameter is only available after a loop diagnostic procedure. Each value in this array is 16 bits wide and is stored in big endian format.')
xdsl2SCStatusSegmentLinImg = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 2, 5, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdsl2SCStatusSegmentLinImg.setReference('ITU-T G.997.1, paragraph #7.5.1.26.3 (HLINpsds) and paragraph #7.5.1.26.9 (HLINpsus)')
if mibBuilder.loadTexts: xdsl2SCStatusSegmentLinImg.setStatus('current')
if mibBuilder.loadTexts: xdsl2SCStatusSegmentLinImg.setDescription('An array of up to 512 complex H(f) linear representation values in linear scale for the respective transmission direction. It is designed to support up to 512 (downstream) subcarrier groups and can be retrieved in a single segment. The number of utilized values in the downstream direction depends on NSds; in the upstream direction, it depends on NSus. This value is referred to here as NS. Each array entry represents the imaginary component (referred to here as b(i)) of Hlin(f = i*Df) value for a particular subcarrier group index i (0 <= i <= NS). Hlin(f) is represented as ((scale/2^15)*((a(i)+j*b(i))/2^15)), where scale is xdsl2SCStatusLinScale and a(i) (provided by the xdsl2SCStatusSegmentLinReal object) and b(i) are in the range (-2^15+1) to (+2^15-1). A special value a(i)=b(i)= -2^15 indicates that no measurement could be done for the subcarrier group because it is out of the passband or that the attenuation is out of range to be represented. This parameter is only available after a loop diagnostic procedure. Each value in this array is 16 bits wide and is stored in big endian format.')
xdsl2SCStatusSegmentLog = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 2, 5, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setUnits('dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: xdsl2SCStatusSegmentLog.setReference('ITU-T G.997.1, paragraph #7.5.1.26.6 (HLOGpsds) and paragraph #7.5.1.26.12 (HLOGpsus)')
if mibBuilder.loadTexts: xdsl2SCStatusSegmentLog.setStatus('current')
if mibBuilder.loadTexts: xdsl2SCStatusSegmentLog.setDescription('An array of up to 512 real H(f) logarithmic representation values in dB for the respective transmission direction. It is designed to support up to 512 (downstream) subcarrier groups and can be retrieved in a single segment. The number of utilized values in the downstream direction depends on NSds; in the upstream direction, it depends on NSus. This value is referred to here as NS. Each array entry represents the real Hlog(f = i*Df) value for a particular subcarrier group index i, (0 <= i <= NS). The real Hlog(f) value is represented as (6-m(i)/10), with m(i) in the range 0 to 1022. A special value m=1023 indicates that no measurement could be done for the subcarrier group because it is out of the passband or that the attenuation is out of range to be represented. This parameter is applicable in loop diagnostic procedure and initialization. Each value in this array is 16 bits wide and is stored in big endian format.')
xdsl2SCStatusSegmentQln = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 2, 5, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setUnits('dBm/Hz').setMaxAccess("readonly")
if mibBuilder.loadTexts: xdsl2SCStatusSegmentQln.setReference('ITU-T G.997.1, paragraph #7.5.1.27.3 (QLNpsds) and paragraph #7.5.1.27.6 (QLNpsus)')
if mibBuilder.loadTexts: xdsl2SCStatusSegmentQln.setStatus('current')
if mibBuilder.loadTexts: xdsl2SCStatusSegmentQln.setDescription('An array of up to 512 real Quiet Line Noise values in dBm/Hz for the respective transmission direction. It is designed for up to 512 (downstream) subcarrier groups and can be retrieved in a single segment. The number of utilized values in the downstream direction depends on NSds; in the upstream direction, it depends on NSus. This value is referred to here as NS. Each array entry represents the QLN(f = i*Df) value for a particular subcarrier index i, (0 <= i <= NS). The QLN(f) is represented as ( -23-n(i)/2), with n(i) in the range 0 to 254. A special value n(i)=255 indicates that no measurement could be done for the subcarrier group because it is out of the passband or that the noise PSD is out of range to be represented. This parameter is applicable in loop diagnostic procedure and initialization. Each value in this array is 8 bits wide.')
xdsl2SCStatusSegmentSnr = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 2, 5, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setUnits('0.5 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: xdsl2SCStatusSegmentSnr.setReference('ITU-T G.997.1, paragraph #7.5.1.28.3 (SNRpsds) and paragraph #7.5.1.28.6 (SNRpsus)')
if mibBuilder.loadTexts: xdsl2SCStatusSegmentSnr.setStatus('current')
if mibBuilder.loadTexts: xdsl2SCStatusSegmentSnr.setDescription('The SNR Margin per subcarrier group, expressing the ratio between the received signal power and received noise power per subscriber group. It is an array of 512 octets, designed for supporting up to 512 (downstream) subcarrier groups and can be retrieved in a single segment. The number of utilized octets in the downstream direction depends on NSds; in the upstream direction, it depends on NSus. This value is referred to here as NS. Octet i (0 <= i <= NS) is set to a value in the range 0 to 254 to indicate that the respective downstream or upstream subcarrier group i has an SNR of: (-32 + xdsl2SCStatusSegmentSnr(i)/2) in dB (i.e., -32 to 95 dB). The special value 255 means that no measurement could be done for the subcarrier group because it is out of the PSD mask passband or that the noise PSD is out of range to be represented. Each value in this array is 8 bits wide.')
xdsl2SCStatusSegmentBitsAlloc = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 2, 5, 1, 7), Xdsl2BitsAlloc()).setUnits('bits').setMaxAccess("readonly")
if mibBuilder.loadTexts: xdsl2SCStatusSegmentBitsAlloc.setReference('ITU-T G.997.1, paragraph #7.5.1.29.1 (BITSpsds) and paragraph #7.5.1.29.2 (BITSpsus)')
if mibBuilder.loadTexts: xdsl2SCStatusSegmentBitsAlloc.setStatus('current')
if mibBuilder.loadTexts: xdsl2SCStatusSegmentBitsAlloc.setDescription('The bits allocation per subcarrier. An array of 256 octets (512 nibbles) designed for supporting up to 512 (downstream) subcarriers. When more than 512 subcarriers are supported, the status information is reported through multiple (up to 8) segments. The first segment is then used for the first 512 subcarriers. The second segment is used for the subcarriers 512 to 1023 and so on. The aggregate number of utilized nibbles in the downstream direction (in all segments) depends on NSds; in the upstream direction, it depends on NSus. This value is referred to here as NS. The segment number is in xdsl2SCStatusSegment. Nibble i (0 <= i < MIN((NS+1)-(segment-1)*512,512)) in each segment is set to a value in the range 0 to 15 to indicate that the respective downstream or upstream subcarrier j (j=(segement-1)*512+i) has the same amount of bits allocation.')
xdsl2SCStatusSegmentGainAlloc = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 2, 5, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdsl2SCStatusSegmentGainAlloc.setReference('ITU-T G.997.1, paragraph #7.5.1.29.3 (GAINSpsds) and paragraph #7.5.1.29.4 (GAINSpsus)')
if mibBuilder.loadTexts: xdsl2SCStatusSegmentGainAlloc.setStatus('current')
if mibBuilder.loadTexts: xdsl2SCStatusSegmentGainAlloc.setDescription('The gain allocation per subcarrier. An array of 512 16-bit values, designed for supporting up to 512 (downstream) subcarriers. When more then 512 subcarriers are supported, the status information is reported through multiple (up to 8) segments. The first segment is then used for the first 512 subcarriers. The second segment is used for the subcarriers 512 to 1023 and so on. The aggregate number of utilized octets in the downstream direction depends on NSds; in the upstream direction, it depends on NSus. This value is referred to here as NS. The segment number is in xdsl2SCStatusSegment. Value i (0 <= i < MIN((NS+1)-(segment-1)*512,512)) in each segment is set to a value in the range 0 to 4093 to indicate that the respective downstream or upstream subcarrier j (j=(segement-1)*512+i) has the same amount of gain value. The gain value is represented as a multiple of 1/512 on a linear scale. Each value in this array is 16 bits wide and is stored in big endian format.')
xdsl2LineInventoryTable = MibTable((1, 3, 6, 1, 2, 1, 10, 251, 1, 3, 1), )
if mibBuilder.loadTexts: xdsl2LineInventoryTable.setStatus('current')
if mibBuilder.loadTexts: xdsl2LineInventoryTable.setDescription('The table xdsl2LineInventoryTable contains an inventory of the DSL termination unit.')
xdsl2LineInventoryEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 251, 1, 3, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "VDSL2-LINE-MIB", "xdsl2LInvUnit"))
if mibBuilder.loadTexts: xdsl2LineInventoryEntry.setStatus('current')
if mibBuilder.loadTexts: xdsl2LineInventoryEntry.setDescription('One index of this table is an interface index where the interface has an ifType of vdsl2(251). A second index of this table is the termination unit.')
xdsl2LInvUnit = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 3, 1, 1, 1), Xdsl2Unit())
if mibBuilder.loadTexts: xdsl2LInvUnit.setStatus('current')
if mibBuilder.loadTexts: xdsl2LInvUnit.setDescription('The termination unit.')
xdsl2LInvG994VendorId = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 3, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdsl2LInvG994VendorId.setReference('ITU-T G.997.1, paragraph #7.4.1-7.4.2')
if mibBuilder.loadTexts: xdsl2LInvG994VendorId.setStatus('current')
if mibBuilder.loadTexts: xdsl2LInvG994VendorId.setDescription('The ADSL Transceiver Unit (ATU) G.994.1 Vendor ID as inserted in the G.994.1 CL/CLR message. It consists of 8 binary octets, including a country code followed by a (regionally allocated) provider code, as defined in Recommendation T.35.')
xdsl2LInvSystemVendorId = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 3, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdsl2LInvSystemVendorId.setReference('ITU-T G.997.1, paragraph #7.4.3-7.4.4')
if mibBuilder.loadTexts: xdsl2LInvSystemVendorId.setStatus('current')
if mibBuilder.loadTexts: xdsl2LInvSystemVendorId.setDescription('The ATU System Vendor ID (identifies the xTU system integrator) as inserted in the Overhead Messages (both xTUs for G.992.3, G.992.4, G.992.5, and G.993.2) or in the Embedded Operations Channel (xTU-R in G.992.1 and G.992.2). It consists of 8 binary octets, with same format as used for Xdsl2InvG994VendorId.')
xdsl2LInvVersionNumber = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 3, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdsl2LInvVersionNumber.setReference('ITU-T G.997.1, paragraph #7.4.5-7.4.6')
if mibBuilder.loadTexts: xdsl2LInvVersionNumber.setStatus('current')
if mibBuilder.loadTexts: xdsl2LInvVersionNumber.setDescription('The xTU version number (vendor-specific information) as inserted in the Overhead Messages (both xTUs for G.992.3, G.992.4, G.992.5, and G.993.2) or in the Embedded Operations Channel (xTU-R in G.992.1 and G.992.2). It consists of up to 16 binary octets.')
xdsl2LInvSerialNumber = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 3, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdsl2LInvSerialNumber.setReference('ITU-T G.997.1, paragraph #7.4.7-7.4.8')
if mibBuilder.loadTexts: xdsl2LInvSerialNumber.setStatus('current')
if mibBuilder.loadTexts: xdsl2LInvSerialNumber.setDescription('The xTU serial number (vendor-specific information) as inserted in the Overhead Messages (both xTUs for G.992.3, G.992.4, G.992.5, and G.993.2) or in the Embedded Operations Channel (xTU-R in G.992.1 and G.992.2). It is vendor-specific information consisting of up to 32 ASCII characters.')
xdsl2LInvSelfTestResult = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 3, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdsl2LInvSelfTestResult.setReference('ITU-T G.997.1, paragraph #7.4.9-7.4.10')
if mibBuilder.loadTexts: xdsl2LInvSelfTestResult.setStatus('current')
if mibBuilder.loadTexts: xdsl2LInvSelfTestResult.setDescription("The xTU self-test result, coded as a 32-bit value. The most significant octet of the result is '0' if the self-test passed, and '1' if the self-test failed. The interpretation of the other octets is vendor discretionary.")
xdsl2LInvTransmissionCapabilities = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 3, 1, 1, 7), Xdsl2TransmissionModeType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdsl2LInvTransmissionCapabilities.setReference('ITU-T G.997.1, paragraph #7.4.11-7.4.12')
if mibBuilder.loadTexts: xdsl2LInvTransmissionCapabilities.setStatus('current')
if mibBuilder.loadTexts: xdsl2LInvTransmissionCapabilities.setDescription("The xTU transmission system capability list of the different coding types. It is coded in a bitmap representation with 1 or more bits set. A bit set to '1' means that the xTU supports the respective coding. The value may be derived from the handshaking procedures defined in G.994.1. A set of xDSL line transmission modes, with one bit per mode.")
xdsl2LineConfTemplateTable = MibTable((1, 3, 6, 1, 2, 1, 10, 251, 1, 5, 1, 1), )
if mibBuilder.loadTexts: xdsl2LineConfTemplateTable.setStatus('current')
if mibBuilder.loadTexts: xdsl2LineConfTemplateTable.setDescription('The table xdsl2LineConfTemplateTable contains VDSL2/ADSL/ ADSL2 and ADSL2+ line configuration templates. Note that this table is also used to configure the number of bearer channels. When the number of bearer channels is increased, the SNMP agent SHOULD create rows in all tables indexed by a channel index. When the number of bearer channels is decreased, the SNMP agent SHOULD delete rows in all tables indexed by a channel index. For example, if the value of xdsl2LConfTempChan4ConfProfile is set to a non-null value, then rows SHOULD be created in xdsl2ChannelStatusTable, xdsl2PMChCurrTable, and all other tables indexed by a channel index. For example, if the value of xdsl2LConfTempChan2ConfProfile is set to a null value, then rows SHOULD be deleted in xdsl2ChannelStatusTable, xdsl2PMChCurrTable, and all other tables indexed by a channel index. Entries in this table MUST be maintained in a persistent manner.')
xdsl2LineConfTemplateEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 251, 1, 5, 1, 1, 1), ).setIndexNames((0, "VDSL2-LINE-MIB", "xdsl2LConfTempTemplateName"))
if mibBuilder.loadTexts: xdsl2LineConfTemplateEntry.setStatus('current')
if mibBuilder.loadTexts: xdsl2LineConfTemplateEntry.setDescription("A default template with an index of 'DEFVAL' will always exist, and its parameters will be set to vendor-specific values, unless otherwise specified in this document.")
xdsl2LConfTempTemplateName = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 5, 1, 1, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: xdsl2LConfTempTemplateName.setReference('DSL Forum TR-129, paragraph #5.4')
if mibBuilder.loadTexts: xdsl2LConfTempTemplateName.setStatus('current')
if mibBuilder.loadTexts: xdsl2LConfTempTemplateName.setDescription('This object identifies a row in this table.')
xdsl2LConfTempLineProfile = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 5, 1, 1, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)).clone('DEFVAL')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xdsl2LConfTempLineProfile.setReference('DSL Forum TR-129, paragraph #5.4')
if mibBuilder.loadTexts: xdsl2LConfTempLineProfile.setStatus('current')
if mibBuilder.loadTexts: xdsl2LConfTempLineProfile.setDescription('The value of this object identifies the row in the VDSL2/ADSL/ADSL2 and ADSL2+ line configuration Profile Table (xdsl2LineConfProfTable) that applies for this DSL line.')
xdsl2LConfTempChan1ConfProfile = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 5, 1, 1, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)).clone('DEFVAL')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xdsl2LConfTempChan1ConfProfile.setStatus('current')
if mibBuilder.loadTexts: xdsl2LConfTempChan1ConfProfile.setDescription('The value of this object identifies the row in the VDSL2/ ADSL/ADSL2 and ADSL2+ channel configuration Profile Table (xdsl2ChConfProfileTable) that applies to DSL bearer channel #1. The channel profile name specified here MUST match the name of an existing row in the xdsl2ChConfProfileTable table.')
xdsl2LConfTempChan1RaRatioDs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 5, 1, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(100)).setUnits('percent').setMaxAccess("readcreate")
if mibBuilder.loadTexts: xdsl2LConfTempChan1RaRatioDs.setReference('ITU-T G.997.1, paragraph #7.3.2.1.4 (Rate adaptation ratio)')
if mibBuilder.loadTexts: xdsl2LConfTempChan1RaRatioDs.setStatus('current')
if mibBuilder.loadTexts: xdsl2LConfTempChan1RaRatioDs.setDescription('Rate Adaptation Ratio. The ratio (in percent) that should be taken into account for the bearer channel #1 when performing rate adaptation on Downstream. The ratio refers to the available data rate in excess of the Minimum Data Rate, summed over all bearer channels. Also, the 100 - xdsl2LConfTempChan1RaRatioDs is the ratio of excess data rate to be assigned to all other bearer channels on Downstream direction. The sum of rate adaptation ratios over all bearers on the same direction shall be equal to 100%.')
xdsl2LConfTempChan1RaRatioUs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 5, 1, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(100)).setUnits('percent').setMaxAccess("readcreate")
if mibBuilder.loadTexts: xdsl2LConfTempChan1RaRatioUs.setReference('ITU-T G.997.1, paragraph #7.3.2.1.4 (Rate adaptation ratio)')
if mibBuilder.loadTexts: xdsl2LConfTempChan1RaRatioUs.setStatus('current')
if mibBuilder.loadTexts: xdsl2LConfTempChan1RaRatioUs.setDescription('Rate Adaptation Ratio. The ratio (in percent) that should be taken into account for the bearer channel #1 when performing rate adaptation on Upstream. The ratio refers to the available data rate in excess of the Minimum Data Rate, summed over all bearer channels. Also, the 100 - xdsl2LConfTempChan1RaRatioUs is the ratio of excess data rate to be assigned to all other bearer channels on Upstream direction. The sum of rate adaptation ratios over all bearers on the same direction shall be equal to 100%.')
xdsl2LConfTempChan2ConfProfile = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 5, 1, 1, 1, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xdsl2LConfTempChan2ConfProfile.setStatus('current')
if mibBuilder.loadTexts: xdsl2LConfTempChan2ConfProfile.setDescription('The value of this object identifies the row in the VDSL2/ ADSL/ADSL2 and ADSL2+ channel configuration Profile Table (xdsl2ChConfProfileTable) that applies to DSL bearer channel #2. If the channel is unused, then the object is set to a zero-length string. This object may be set to a zero-length string only if xdsl2LConfTempChan3ConfProfile contains a zero-length string.')
xdsl2LConfTempChan2RaRatioDs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 5, 1, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readcreate")
if mibBuilder.loadTexts: xdsl2LConfTempChan2RaRatioDs.setReference('ITU-T G.997.1, paragraph #7.3.2.1.4 (Rate adaptation ratio)')
if mibBuilder.loadTexts: xdsl2LConfTempChan2RaRatioDs.setStatus('current')
if mibBuilder.loadTexts: xdsl2LConfTempChan2RaRatioDs.setDescription('Rate Adaptation Ratio. The ratio (in percent) that should be taken into account for the bearer channel #2 when performing rate adaptation on Downstream. The ratio refers to the available data rate in excess of the Minimum Data Rate, summed over all bearer channels. Also, the 100 - xdsl2LConfTempChan2RaRatioDs is the ratio of excess data rate to be assigned to all other bearer channels on Downstream direction. The sum of rate adaptation ratios over all bearers on the same direction shall be equal to 100%.')
xdsl2LConfTempChan2RaRatioUs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 5, 1, 1, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readcreate")
if mibBuilder.loadTexts: xdsl2LConfTempChan2RaRatioUs.setReference('ITU-T G.997.1, paragraph #7.3.2.1.4 (Rate adaptation ratio)')
if mibBuilder.loadTexts: xdsl2LConfTempChan2RaRatioUs.setStatus('current')
if mibBuilder.loadTexts: xdsl2LConfTempChan2RaRatioUs.setDescription('Rate Adaptation Ratio. The ratio (in percent) that should be taken into account for the bearer channel #2 when performing rate adaptation on Upstream. The ratio refers to the available data rate in excess of the Minimum Data Rate, summed over all bearer channels. Also, the 100 - xdsl2LConfTempChan2RaRatioUs is the ratio of excess data rate to be assigned to all other bearer channels on Upstream direction. The sum of rate adaptation ratios over all bearers on the same direction shall be equal to 100%.')
xdsl2LConfTempChan3ConfProfile = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 5, 1, 1, 1, 9), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xdsl2LConfTempChan3ConfProfile.setStatus('current')
if mibBuilder.loadTexts: xdsl2LConfTempChan3ConfProfile.setDescription('The value of this object identifies the row in the VDSL2/ ADSL/ADSL2 and ADSL2+ channel configuration Profile Table (xdsl2ChConfProfileTable) that applies to DSL bearer channel #3. If the channel is unused, then the object is set to a zero-length string. This object may be set to a zero-length string only if xdsl2LConfTempChan4ConfProfile contains a zero-length string. This object may be set to a non-zero-length string only if xdsl2LConfTempChan2ConfProfile contains a non-zero-length string.')
xdsl2LConfTempChan3RaRatioDs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 5, 1, 1, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readcreate")
if mibBuilder.loadTexts: xdsl2LConfTempChan3RaRatioDs.setReference('ITU-T G.997.1, paragraph #7.3.2.1.4 (Rate adaptation ratio)')
if mibBuilder.loadTexts: xdsl2LConfTempChan3RaRatioDs.setStatus('current')
if mibBuilder.loadTexts: xdsl2LConfTempChan3RaRatioDs.setDescription('Rate Adaptation Ratio. The ratio (in percent) that should be taken into account for the bearer channel #3 when performing rate adaptation on Downstream. The ratio refers to the available data rate in excess of the Minimum Data Rate, summed over all bearer channels. Also, the 100 - xdsl2LConfTempChan3RaRatioDs is the ratio of excess data rate to be assigned to all other bearer channels on Downstream direction. The sum of rate adaptation ratios over all bearers on the same direction shall be equal to 100%.')
xdsl2LConfTempChan3RaRatioUs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 5, 1, 1, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readcreate")
if mibBuilder.loadTexts: xdsl2LConfTempChan3RaRatioUs.setReference('ITU-T G.997.1, paragraph #7.3.2.1.4 (Rate adaptation ratio)')
if mibBuilder.loadTexts: xdsl2LConfTempChan3RaRatioUs.setStatus('current')
if mibBuilder.loadTexts: xdsl2LConfTempChan3RaRatioUs.setDescription('Rate Adaptation Ratio. The ratio (in percent) that should be taken into account for the bearer channel #3 when performing rate adaptation on Upstream. The ratio refers to the available data rate in excess of the Minimum Data Rate, summed over all bearer channels. Also, the 100 - xdsl2LConfTempChan3RaRatioUs is the ratio of excess data rate to be assigned to all other bearer channels on Upstream direction. The sum of rate adaptation ratios over all bearers on the same direction shall be equal to 100%.')
xdsl2LConfTempChan4ConfProfile = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 5, 1, 1, 1, 12), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xdsl2LConfTempChan4ConfProfile.setStatus('current')
if mibBuilder.loadTexts: xdsl2LConfTempChan4ConfProfile.setDescription('The value of this object identifies the row in the VDSL2/ ADSL/ADSL2 and ADSL2+ channel configuration Profile Table (xdsl2ChConfProfileTable) that applies to DSL bearer channel #4. If the channel is unused, then the object is set to a zero-length string. This object may be set to a non-zero-length string only if xdsl2LConfTempChan3ConfProfile contains a non-zero-length string.')
xdsl2LConfTempChan4RaRatioDs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 5, 1, 1, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readcreate")
if mibBuilder.loadTexts: xdsl2LConfTempChan4RaRatioDs.setReference('ITU-T G.997.1, paragraph #7.3.2.1.4 (Rate adaptation ratio)')
if mibBuilder.loadTexts: xdsl2LConfTempChan4RaRatioDs.setStatus('current')
if mibBuilder.loadTexts: xdsl2LConfTempChan4RaRatioDs.setDescription('Rate Adaptation Ratio. The ratio (in percent) that should be taken into account for the bearer channel #4 when performing rate adaptation on Downstream. The ratio refers to the available data rate in excess of the Minimum Data Rate, summed over all bearer channels. Also, the 100 - xdsl2LConfTempChan4RaRatioDs is the ratio of excess data rate to be assigned to all other bearer channels. The sum of rate adaptation ratios over all bearers on the same direction shall sum to 100%.')
xdsl2LConfTempChan4RaRatioUs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 5, 1, 1, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readcreate")
if mibBuilder.loadTexts: xdsl2LConfTempChan4RaRatioUs.setReference('ITU-T G.997.1, paragraph #7.3.2.1.4 (Rate adaptation ratio)')
if mibBuilder.loadTexts: xdsl2LConfTempChan4RaRatioUs.setStatus('current')
if mibBuilder.loadTexts: xdsl2LConfTempChan4RaRatioUs.setDescription('Rate Adaptation Ratio. The ratio (in percent) that should be taken into account for the bearer channel #4 when performing rate adaptation on Upstream. The ratio refers to the available data rate in excess of the Minimum Data Rate, summed over all bearer channels. Also, the 100 - xdsl2LConfTempChan4RaRatioUs is the ratio of excess data rate to be assigned to all other bearer channels. The sum of rate adaptation ratios over all bearers on the same direction shall sum to 100%.')
xdsl2LConfTempRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 5, 1, 1, 1, 15), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xdsl2LConfTempRowStatus.setStatus('current')
if mibBuilder.loadTexts: xdsl2LConfTempRowStatus.setDescription("This object is used to create a new row or to modify or delete an existing row in this table. A template is activated by setting this object to 'active'. Before a profile can be deleted or taken out of service (by setting this object to 'destroy' or 'notInService'), it MUST be first unreferenced from all associated lines. A row in this table is said to be unreferenced when there is no instance of xdsl2LineConfTemplate or xdsl2LineConfFallbackTemplate that refers to the row.")
xdsl2LineConfProfTable = MibTable((1, 3, 6, 1, 2, 1, 10, 251, 1, 5, 1, 2), )
if mibBuilder.loadTexts: xdsl2LineConfProfTable.setStatus('current')
if mibBuilder.loadTexts: xdsl2LineConfProfTable.setDescription('The table xdsl2LineConfProfTable contains VDSL2/ADSL/ ADSL2 and ADSL2+ line configuration profiles. Entries in this table MUST be maintained in a persistent manner.')
xdsl2LineConfProfEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 251, 1, 5, 1, 2, 1), ).setIndexNames((0, "VDSL2-LINE-MIB", "xdsl2LConfProfProfileName"))
if mibBuilder.loadTexts: xdsl2LineConfProfEntry.setStatus('current')
if mibBuilder.loadTexts: xdsl2LineConfProfEntry.setDescription("A default profile with an index of 'DEFVAL' will always exist, and its parameters will be set to vendor-specific values, unless otherwise specified in this document.")
xdsl2LConfProfProfileName = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 5, 1, 2, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: xdsl2LConfProfProfileName.setStatus('current')
if mibBuilder.loadTexts: xdsl2LConfProfProfileName.setDescription('This object identifies a row in this table.')
xdsl2LConfProfScMaskDs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 5, 1, 2, 1, 2), Xdsl2ScMaskDs()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xdsl2LConfProfScMaskDs.setReference('ITU-T G.997.1, paragraph #7.3.1.2.6 (CARMASKds)')
if mibBuilder.loadTexts: xdsl2LConfProfScMaskDs.setStatus('current')
if mibBuilder.loadTexts: xdsl2LConfProfScMaskDs.setDescription("Subcarrier mask. A bitmap of 4096 bits that allows masking up to 4096 downstream subcarriers. If bit i (0 <= i < NSCds) is set to '1', the respective downstream subcarrier is masked, and if set to '0', the respective subcarrier is unmasked. Note that there should always be unmasked subcarriers (i.e., this object cannot be all 1's). Also note that if NSCds < 4096, all bits i (NSCds < i <= 4096) should be set to '1'.")
xdsl2LConfProfScMaskUs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 5, 1, 2, 1, 3), Xdsl2ScMaskUs()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xdsl2LConfProfScMaskUs.setReference('ITU-T G.997.1, paragraph #7.3.1.2.7 (CARMASKus)')
if mibBuilder.loadTexts: xdsl2LConfProfScMaskUs.setStatus('current')
if mibBuilder.loadTexts: xdsl2LConfProfScMaskUs.setDescription("Subcarrier mask. A bitmap of 4096 bits that allows masking up to 4096 upstream subcarriers. If bit i (0 <= i < NSCus) is set to '1', the respective upstream subcarrier is masked, and if set to '0', the respective subcarrier is unmasked. Note that there should always be unmasked subcarriers (i.e., this object cannot be all 1's). Also note that if NSCus < 4096, all bits i (NSCus < i <= 4096) should be set to '1'.")
xdsl2LConfProfVdsl2CarMask = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 5, 1, 2, 1, 4), Xdsl2CarMask()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xdsl2LConfProfVdsl2CarMask.setReference('ITU-T G.997.1, paragraph #7.3.1.2.8 (VDSL2- CARMASK)')
if mibBuilder.loadTexts: xdsl2LConfProfVdsl2CarMask.setStatus('current')
if mibBuilder.loadTexts: xdsl2LConfProfVdsl2CarMask.setDescription('VDSL2-specific subcarrier mask. This configuration parameter defines the restrictions, additional to the band plan, to determine the set of subcarriers allowed for transmission in both the upstream and downstream directions. The parameter shall describe the not masked subcarriers as one or more frequency bands. Each band is represented by start and stop subcarrier indices with a subcarrier spacing of 4.3125 kHz. The valid range of subcarrier indices runs from 0 to at least the index of the highest allowed subcarrier in both transmission directions among all profiles enabled by the parameter xdsl2LConfProfProfiles. Up to 32 bands may be specified. Other subcarriers shall be masked.')
xdsl2LConfProfRfiBands = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 5, 1, 2, 1, 5), Xdsl2RfiBands()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xdsl2LConfProfRfiBands.setReference('ITU-T G.997.1, paragraph #7.3.1.2.10 (RFIBANDS)')
if mibBuilder.loadTexts: xdsl2LConfProfRfiBands.setStatus('current')
if mibBuilder.loadTexts: xdsl2LConfProfRfiBands.setDescription('For ITU-T Recommendation G.992.5, this configuration parameter defines the subset of downstream PSD mask breakpoints, as specified in xdsl2LConfProfPsdMaskDs (PSDMASKds), that shall be used to notch an RFI band. This subset consists of pairs of consecutive subcarrier indices belonging to breakpoints: [ti; ti + 1], corresponding to the low level of the notch. The specific interpolation around these points is defined in the relevant Recommendations (e.g., ITU-T Recommendation G.992.5). The CO-MIB shall define the RFI notches using breakpoints in xdsl2LConfProfPsdMaskDs (PSDMASKds) as specified in the relevant Recommendations (e.g., ITU-T Recommendation G.992.5). For ITU-T Recommendation G.993.2, this configuration parameter defines the bands where the PSD shall be reduced as specified in #7.2.1.2/G.993.2. Each band shall be represented by a start and stop subcarrier indices with a subcarrier spacing of 4.3125 kHz. Up to 16 bands may be specified. This parameter defines the RFI bands for both the upstream and downstream directions.')
xdsl2LConfProfRaModeDs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 5, 1, 2, 1, 6), Xdsl2RaMode().clone('manual')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xdsl2LConfProfRaModeDs.setReference('ITU-T G.997.1, paragraph #7.3.1.4.1 (RA-MODEds)')
if mibBuilder.loadTexts: xdsl2LConfProfRaModeDs.setStatus('current')
if mibBuilder.loadTexts: xdsl2LConfProfRaModeDs.setDescription('The mode of operation of a rate-adaptive xTU-C in the transmit direction.')
xdsl2LConfProfRaModeUs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 5, 1, 2, 1, 7), Xdsl2RaMode().clone('manual')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xdsl2LConfProfRaModeUs.setReference('ITU-T G.997.1, paragraph #7.3.1.4.2 (RA-MODEus)')
if mibBuilder.loadTexts: xdsl2LConfProfRaModeUs.setStatus('current')
if mibBuilder.loadTexts: xdsl2LConfProfRaModeUs.setDescription('The mode of operation of a rate-adaptive xTU-R in the transmit direction.')
xdsl2LConfProfRaUsNrmDs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 5, 1, 2, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 310)).clone(10)).setUnits('0.1 dB').setMaxAccess("readcreate")
if mibBuilder.loadTexts: xdsl2LConfProfRaUsNrmDs.setReference('ITU-T G.997.1, paragraph #7.3.1.4.3 (RA-USNRMds)')
if mibBuilder.loadTexts: xdsl2LConfProfRaUsNrmDs.setStatus('current')
if mibBuilder.loadTexts: xdsl2LConfProfRaUsNrmDs.setDescription("The Downstream Up-Shift Noise Margin value, to be used when xdsl2LConfProfRaModeDs is set to 'dynamicRa'. If the downstream noise margin is above this value, and stays above it, for more than the time specified by the xdsl2LConfProfRaUsTimeDs, the xTU-R shall attempt to increase the downstream net data rate. The Downstream Up-Shift Noise Margin ranges from 0 to 310 units of 0.1 dB (physical values are 0 to 31 dB).")
xdsl2LConfProfRaUsNrmUs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 5, 1, 2, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 310)).clone(10)).setUnits('0.1 dB').setMaxAccess("readcreate")
if mibBuilder.loadTexts: xdsl2LConfProfRaUsNrmUs.setReference('ITU-T G.997.1, paragraph #7.3.1.4.4 (RA-USNRMus)')
if mibBuilder.loadTexts: xdsl2LConfProfRaUsNrmUs.setStatus('current')
if mibBuilder.loadTexts: xdsl2LConfProfRaUsNrmUs.setDescription("The Upstream Up-Shift Noise Margin value, to be used when xdsl2LConfProfRaModeUs is set to 'dynamicRa'. If the upstream noise margin is above this value, and stays above it, for more than the time specified by the xdsl2LConfProfRaUsTimeUs, the xTU-C shall attempt to increase the upstream net data rate. The Upstream Up-Shift Noise Margin ranges from 0 to 310 units of 0.1 dB (physical values are 0 to 31 dB).")
xdsl2LConfProfRaUsTimeDs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 5, 1, 2, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16383)).clone(3600)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: xdsl2LConfProfRaUsTimeDs.setReference('ITU-T G.997.1, paragraph #7.3.1.4.5 (RA-UTIMEds)')
if mibBuilder.loadTexts: xdsl2LConfProfRaUsTimeDs.setStatus('current')
if mibBuilder.loadTexts: xdsl2LConfProfRaUsTimeDs.setDescription("The Downstream Up-Shift Time Interval, to be used when xdsl2LConfProfRaModeDs is set to 'dynamicRa'. The interval of time that the downstream noise margin should stay above the Downstream Up-Shift Noise Margin before the xTU-R shall attempt to increase the downstream net data rate. The time interval ranges from 0 to 16383 seconds.")
xdsl2LConfProfRaUsTimeUs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 5, 1, 2, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16383)).clone(3600)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: xdsl2LConfProfRaUsTimeUs.setReference('ITU-T G.997.1, paragraph #7.3.1.4.6 (RA-UTIMEus)')
if mibBuilder.loadTexts: xdsl2LConfProfRaUsTimeUs.setStatus('current')
if mibBuilder.loadTexts: xdsl2LConfProfRaUsTimeUs.setDescription("The Upstream Up-Shift Time Interval, to be used when xdsl2LConfProfRaModeUs is set to 'dynamicRa'. The interval of time the upstream noise margin should stay above the Upstream Up-Shift Noise Margin before the xTU-C shall attempt to increase the upstream net data rate. The time interval ranges from 0 to 16383 seconds.")
xdsl2LConfProfRaDsNrmDs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 5, 1, 2, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 310)).clone(10)).setUnits('0.1 dB').setMaxAccess("readcreate")
if mibBuilder.loadTexts: xdsl2LConfProfRaDsNrmDs.setReference('ITU-T G.997.1, paragraph #7.3.1.4.7 (RA-DSNRMds)')
if mibBuilder.loadTexts: xdsl2LConfProfRaDsNrmDs.setStatus('current')
if mibBuilder.loadTexts: xdsl2LConfProfRaDsNrmDs.setDescription("The Downstream Down-Shift Noise Margin value, to be used when xdsl2LConfProfRaModeDs is set to 'dynamicRa'. If the downstream noise margin is below this value and stays below that value, for more than the time specified by the xdsl2LConfProfRaDsTimeDs, the xTU-R shall attempt to decrease the downstream net data rate. The Downstream Down-Shift Noise Margin ranges from 0 to 310 units of 0.1 dB (physical values are 0 to 31 dB).")
xdsl2LConfProfRaDsNrmUs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 5, 1, 2, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 310)).clone(10)).setUnits('0.1 dB').setMaxAccess("readcreate")
if mibBuilder.loadTexts: xdsl2LConfProfRaDsNrmUs.setReference('ITU-T G.997.1, paragraph #7.3.1.4.8 (RA-DSNRMus)')
if mibBuilder.loadTexts: xdsl2LConfProfRaDsNrmUs.setStatus('current')
if mibBuilder.loadTexts: xdsl2LConfProfRaDsNrmUs.setDescription("The Upstream Downshift Noise Margin value, to be used when xdsl2LConfProfRaModeUs is set to 'dynamicRa'. If the upstream noise margin is below this value and stays below that value, for more than the time specified by the xdsl2LConfProfRaDsTimeUs, the xTU-C shall attempt to decrease the upstream net data rate. The Upstream Down-Shift Noise Margin ranges from 0 to 310 units of 0.1 dB (physical values are 0 to 31 dB).")
xdsl2LConfProfRaDsTimeDs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 5, 1, 2, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16383)).clone(3600)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: xdsl2LConfProfRaDsTimeDs.setReference('ITU-T G.997.1, paragraph #7.3.1.4.9 (RA-DTIMEds)')
if mibBuilder.loadTexts: xdsl2LConfProfRaDsTimeDs.setStatus('current')
if mibBuilder.loadTexts: xdsl2LConfProfRaDsTimeDs.setDescription("The Downstream Downshift Time Interval, to be used when xdsl2LConfProfRaModeDs is set to 'dynamicRa'. The interval of time the downstream noise margin should stay below the Downstream Down-Shift Noise Margin before the xTU-R shall attempt to decrease the downstream net data rate. The time interval ranges from 0 to 16383 seconds.")
xdsl2LConfProfRaDsTimeUs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 5, 1, 2, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16383)).clone(3600)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: xdsl2LConfProfRaDsTimeUs.setReference('ITU-T G.997.1, paragraph #7.3.1.4.10 (RA-DTIMEus)')
if mibBuilder.loadTexts: xdsl2LConfProfRaDsTimeUs.setStatus('current')
if mibBuilder.loadTexts: xdsl2LConfProfRaDsTimeUs.setDescription("The Upstream Down-Shift Time Interval, to be used when xdsl2LConfProfRaModeUs is set to 'dynamicRa'. The interval of time the upstream noise margin should stay below the Upstream Down-Shift Noise Margin before the xTU-C shall attempt to decrease the upstream net data rate. The time interval ranges from 0 to 16383 seconds.")
xdsl2LConfProfTargetSnrmDs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 5, 1, 2, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 310)).clone(60)).setUnits('0.1 dB').setMaxAccess("readcreate")
if mibBuilder.loadTexts: xdsl2LConfProfTargetSnrmDs.setReference('ITU-T G.997.1, paragraph #7.3.1.3.1 (TARSNRMds)')
if mibBuilder.loadTexts: xdsl2LConfProfTargetSnrmDs.setStatus('current')
if mibBuilder.loadTexts: xdsl2LConfProfTargetSnrmDs.setDescription('The minimum Noise Margin the xTU-R receiver shall achieve, relative to the BER requirement for each of the downstream bearer channels, to successfully complete initialization. The target noise margin ranges from 0 to 310 units of 0.1 dB (physical values are 0 to 31 dB).')
xdsl2LConfProfTargetSnrmUs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 5, 1, 2, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 310)).clone(60)).setUnits('0.1 dB').setMaxAccess("readcreate")
if mibBuilder.loadTexts: xdsl2LConfProfTargetSnrmUs.setReference('ITU-T G.997.1, paragraph #7.3.1.3.2 (TARSNRMus)')
if mibBuilder.loadTexts: xdsl2LConfProfTargetSnrmUs.setStatus('current')
if mibBuilder.loadTexts: xdsl2LConfProfTargetSnrmUs.setDescription('The minimum Noise Margin the xTU-C receiver shall achieve, relative to the BER requirement for each of the upstream bearer channels, to successfully complete initialization. The target noise margin ranges from 0 to 310 units of 0.1 dB (physical values are 0 to 31 dB).')
xdsl2LConfProfMaxSnrmDs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 5, 1, 2, 1, 18), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 310), ValueRangeConstraint(2147483647, 2147483647), )).clone(310)).setUnits('0.1 dB').setMaxAccess("readcreate")
if mibBuilder.loadTexts: xdsl2LConfProfMaxSnrmDs.setReference('ITU-T G.997.1, paragraph #7.3.1.3.3 (MAXSNRMds)')
if mibBuilder.loadTexts: xdsl2LConfProfMaxSnrmDs.setStatus('current')
if mibBuilder.loadTexts: xdsl2LConfProfMaxSnrmDs.setDescription('The maximum Noise Margin the xTU-R receiver shall try to sustain. If the Noise Margin is above this level, the xTU-R shall request that the xTU-C reduce the xTU-C transmit power to get a noise margin below this limit (if this functionality is supported). The maximum noise margin ranges from 0 to 310 units of 0.1 dB (physical values are 0 to 31 dB). A value of 0x7FFFFFFF (2147483647) means that there is no maximum.')
xdsl2LConfProfMaxSnrmUs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 5, 1, 2, 1, 19), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 310), ValueRangeConstraint(2147483647, 2147483647), )).clone(310)).setUnits('0.1 dB').setMaxAccess("readcreate")
if mibBuilder.loadTexts: xdsl2LConfProfMaxSnrmUs.setReference('ITU-T G.997.1, paragraph #7.3.1.3.4 (MAXSNRMus)')
if mibBuilder.loadTexts: xdsl2LConfProfMaxSnrmUs.setStatus('current')
if mibBuilder.loadTexts: xdsl2LConfProfMaxSnrmUs.setDescription('The maximum Noise Margin the xTU-C receiver shall try to sustain. If the Noise Margin is above this level, the xTU-C shall request that the xTU-R reduce the xTU-R transmit power to get a noise margin below this limit (if this functionality is supported). The maximum noise margin ranges from 0 to 310 units of 0.1 dB (physical values are 0 to 31 dB). A value of 0x7FFFFFFF (2147483647) means that there is no maximum.')
xdsl2LConfProfMinSnrmDs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 5, 1, 2, 1, 20), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 310)).clone(10)).setUnits('0.1 dB').setMaxAccess("readcreate")
if mibBuilder.loadTexts: xdsl2LConfProfMinSnrmDs.setReference('ITU-T G.997.1, paragraph #7.3.1.3.5 (MINSNRMds)')
if mibBuilder.loadTexts: xdsl2LConfProfMinSnrmDs.setStatus('current')
if mibBuilder.loadTexts: xdsl2LConfProfMinSnrmDs.setDescription('The minimum Noise Margin the xTU-R receiver shall tolerate. If the noise margin falls below this level, the xTU-R shall request that the xTU-C increase the xTU-C transmit power. If an increase to xTU-C transmit power is not possible, a loss- of-margin (LOM) defect occurs, the xTU-R shall fail and attempt to reinitialize and the NMS shall be notified. The minimum noise margin ranges from 0 to 310 units of 0.1 dB (physical values are 0 to 31 dB). A value of 0 means that there is no minimum.')
xdsl2LConfProfMinSnrmUs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 5, 1, 2, 1, 21), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 310)).clone(10)).setUnits('0.1 dB').setMaxAccess("readcreate")
if mibBuilder.loadTexts: xdsl2LConfProfMinSnrmUs.setReference('ITU-T G.997.1, paragraph #7.3.1.3.6 (MINSNRMus)')
if mibBuilder.loadTexts: xdsl2LConfProfMinSnrmUs.setStatus('current')
if mibBuilder.loadTexts: xdsl2LConfProfMinSnrmUs.setDescription('The minimum Noise Margin the xTU-C receiver shall tolerate. If the noise margin falls below this level, the xTU-C shall request that the xTU-R increase the xTU-R transmit power. If an increase of xTU-R transmit power is not possible, a loss- of-margin (LOM) defect occurs, the xTU-C shall fail and attempt to re-initialize and the NMS shall be notified. The minimum noise margin ranges from 0 to 310 units of 0.1 dB (physical values are 0 to 31 dB). A value of 0 means that there is no minimum.')
xdsl2LConfProfMsgMinUs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 5, 1, 2, 1, 22), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(4000, 248000)).clone(4000)).setUnits('bits/second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: xdsl2LConfProfMsgMinUs.setReference('ITU-T G.997.1, paragraph #7.3.1.5.1 (MSGMINus)')
if mibBuilder.loadTexts: xdsl2LConfProfMsgMinUs.setStatus('current')
if mibBuilder.loadTexts: xdsl2LConfProfMsgMinUs.setDescription('Minimum Overhead Rate Upstream. Defines the minimum rate of the message-based overhead that shall be maintained by the xTU in upstream direction. Expressed in bits per second and ranges from 4000 to 248000 bits/s.')
xdsl2LConfProfMsgMinDs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 5, 1, 2, 1, 23), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(4000, 248000)).clone(4000)).setUnits('bits/second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: xdsl2LConfProfMsgMinDs.setReference('ITU-T G.997.1, paragraph #7.3.1.5.2 (MSGMINds)')
if mibBuilder.loadTexts: xdsl2LConfProfMsgMinDs.setStatus('current')
if mibBuilder.loadTexts: xdsl2LConfProfMsgMinDs.setDescription('Minimum Overhead Rate Downstream. Defines the minimum rate of the message-based overhead that shall be maintained by the xTU in the downstream direction. Expressed in bits per second and ranges from 4000 to 248000 bits/s.')
xdsl2LConfProfCeFlag = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 5, 1, 2, 1, 24), Xdsl2LineCeFlag()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xdsl2LConfProfCeFlag.setReference('ITU-T G.997.1, paragraph #7.3.1.6.1 (CEFLAG)')
if mibBuilder.loadTexts: xdsl2LConfProfCeFlag.setStatus('current')
if mibBuilder.loadTexts: xdsl2LConfProfCeFlag.setDescription('This parameter is a bit that enables the use of the optional cyclic extension values.')
xdsl2LConfProfSnrModeDs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 5, 1, 2, 1, 25), Xdsl2LineSnrMode().clone('virtualNoiseDisabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xdsl2LConfProfSnrModeDs.setReference('ITU-T G.997.1, paragraph #7.3.1.7.1 (SNRMODEds)')
if mibBuilder.loadTexts: xdsl2LConfProfSnrModeDs.setStatus('current')
if mibBuilder.loadTexts: xdsl2LConfProfSnrModeDs.setDescription('This parameter enables the transmitter-referred virtual noise in the downstream direction.')
xdsl2LConfProfSnrModeUs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 5, 1, 2, 1, 26), Xdsl2LineSnrMode().clone('virtualNoiseDisabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xdsl2LConfProfSnrModeUs.setReference('ITU-T G.997.1, paragraph #7.3.1.7.2 (SNRMODEus)')
if mibBuilder.loadTexts: xdsl2LConfProfSnrModeUs.setStatus('current')
if mibBuilder.loadTexts: xdsl2LConfProfSnrModeUs.setDescription('This parameter enables the transmitter-referred virtual noise in the upstream direction.')
xdsl2LConfProfTxRefVnDs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 5, 1, 2, 1, 27), Xdsl2LineTxRefVnDs()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xdsl2LConfProfTxRefVnDs.setReference('ITU-T G.997.1, paragraph #7.3.1.7.3 (TXREFVNds)')
if mibBuilder.loadTexts: xdsl2LConfProfTxRefVnDs.setStatus('current')
if mibBuilder.loadTexts: xdsl2LConfProfTxRefVnDs.setDescription('This configuration parameter defines the downstream transmitter-referred virtual noise. The TXREFVNds shall be specified through a set of breakpoints. Each breakpoint shall consist of a subcarrier index t, with a subcarrier spacing of 4.3125 kHz, and a noise PSD level (expressed in dBm/Hz) at that subcarrier. The set of breakpoints can then be represented as: [(t1,PSD1), (t2, PSD2), ... , (tN, PSDN)].')
xdsl2LConfProfTxRefVnUs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 5, 1, 2, 1, 28), Xdsl2LineTxRefVnUs()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xdsl2LConfProfTxRefVnUs.setReference('ITU-T G.997.1, paragraph #7.3.1.7.4 (TXREFVNus)')
if mibBuilder.loadTexts: xdsl2LConfProfTxRefVnUs.setStatus('current')
if mibBuilder.loadTexts: xdsl2LConfProfTxRefVnUs.setDescription('This configuration parameter defines the upstream transmitter-referred virtual noise. The TXREFVNus shall be specified through a set of breakpoints. Each breakpoint shall consist of a subcarrier index t, with a subcarrier spacing of 4.3125 kHz, and a noise PSD level (expressed in dBm/Hz) at that subcarrier. The set of breakpoints can then be represented as: [(t1, PSD1), (t2, PSD2), ... , (tN, PSDN)].')
xdsl2LConfProfXtuTransSysEna = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 5, 1, 2, 1, 29), Xdsl2TransmissionModeType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xdsl2LConfProfXtuTransSysEna.setReference('ITU-T G.997.1, paragraph #7.3.1.1.1 (XTSE)')
if mibBuilder.loadTexts: xdsl2LConfProfXtuTransSysEna.setStatus('current')
if mibBuilder.loadTexts: xdsl2LConfProfXtuTransSysEna.setDescription("xTU Transmission System Enabling (XTSE). A list of the different coding types enabled in this profile. It is coded in a bitmap representation with 1 or more bits set. A bit set to '1' means that the xTUs may apply the respective coding for the DSL line. A bit set to '0' means that the xTUs cannot apply the respective coding for the ADSL line. All 'reserved' bits should be set to '0'.")
xdsl2LConfProfPmMode = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 5, 1, 2, 1, 30), Xdsl2LinePmMode().clone(namedValues=NamedValues(("allowTransitionsToIdle", 0), ("allowTransitionsToLowPower", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xdsl2LConfProfPmMode.setReference('ITU-T G.997.1, paragraph #7.3.1.1.4 (PMMode)')
if mibBuilder.loadTexts: xdsl2LConfProfPmMode.setStatus('current')
if mibBuilder.loadTexts: xdsl2LConfProfPmMode.setDescription("Power management state Enabling (PMMode). Defines the power states the xTU-C or xTU-R may autonomously transition to on this line. This is a set of bits, where any bit with a '1' value means that the xTU is allowed to transit into the respective state and any bit with a '0' value means that the xTU is not allowed to transit into the respective state.")
xdsl2LConfProfL0Time = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 5, 1, 2, 1, 31), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(255)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: xdsl2LConfProfL0Time.setReference('ITU-T G.997.1, paragraph #7.3.1.1.5 (L0-TIME)')
if mibBuilder.loadTexts: xdsl2LConfProfL0Time.setStatus('current')
if mibBuilder.loadTexts: xdsl2LConfProfL0Time.setDescription('The minimum time (in seconds) between an Exit from the L2 state and the next Entry into the L2 state. It ranges from 0 to 255 seconds.')
xdsl2LConfProfL2Time = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 5, 1, 2, 1, 32), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(255)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: xdsl2LConfProfL2Time.setReference('ITU-T G.997.1, paragraph #7.3.1.1.6 (L2-TIME)')
if mibBuilder.loadTexts: xdsl2LConfProfL2Time.setStatus('current')
if mibBuilder.loadTexts: xdsl2LConfProfL2Time.setDescription('The minimum time (in seconds) between an Entry into the L2 state and the first Power Trim in the L2 state and between two consecutive Power Trims in the L2 state. It ranges from 0 to 255 seconds.')
xdsl2LConfProfL2Atpr = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 5, 1, 2, 1, 33), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 31)).clone(10)).setUnits('dB').setMaxAccess("readcreate")
if mibBuilder.loadTexts: xdsl2LConfProfL2Atpr.setReference('ITU-T G.997.1, paragraph #7.3.1.1.7 (L2-ATPR)')
if mibBuilder.loadTexts: xdsl2LConfProfL2Atpr.setStatus('current')
if mibBuilder.loadTexts: xdsl2LConfProfL2Atpr.setDescription('The maximum aggregate transmit power reduction (in dB) that can be performed at transition of L0 to L2 state or through a single Power Trim in the L2 state. It ranges from 0 dB to 31 dB.')
xdsl2LConfProfL2Atprt = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 5, 1, 2, 1, 34), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 31)).clone(31)).setUnits('dB').setMaxAccess("readcreate")
if mibBuilder.loadTexts: xdsl2LConfProfL2Atprt.setReference('ITU-T G.997.1, paragraph #7.3.1.1.9 (L2-ATPRT)')
if mibBuilder.loadTexts: xdsl2LConfProfL2Atprt.setStatus('current')
if mibBuilder.loadTexts: xdsl2LConfProfL2Atprt.setDescription('The total maximum aggregate transmit power reduction (in dB) that can be performed in an L2 state. This is the sum of all reductions of L2 Requests (i.e., at transition of L0 to L2 state) and Power Trims.')
xdsl2LConfProfProfiles = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 5, 1, 2, 1, 35), Xdsl2LineProfiles().clone(namedValues=NamedValues(("profile8a", 0), ("profile8b", 1), ("profile8c", 2), ("profile8d", 3), ("profile12a", 4), ("profile12b", 5), ("profile17a", 6), ("profile30a", 7)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xdsl2LConfProfProfiles.setReference('ITU-T G.997.1, paragraph #7.3.1.1.11 (PROFILES)')
if mibBuilder.loadTexts: xdsl2LConfProfProfiles.setStatus('current')
if mibBuilder.loadTexts: xdsl2LConfProfProfiles.setDescription('The configuration parameter contains the G.993.2 profiles to be allowed by the near-end xTU on this line. It is coded in a bitmap representation (0 if not allowed, 1 if allowed).')
xdsl2LConfProfDpboEPsd = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 5, 1, 2, 1, 36), Xdsl2PsdMaskDs()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xdsl2LConfProfDpboEPsd.setReference('ITU-T G.997.1, paragraph #7.3.1.2.13 (DPBOEPSD)')
if mibBuilder.loadTexts: xdsl2LConfProfDpboEPsd.setStatus('current')
if mibBuilder.loadTexts: xdsl2LConfProfDpboEPsd.setDescription('This configuration parameter defines the PSD mask that is assumed to be permitted at the exchange. This parameter shall use the same format as xdsl2LConfProfPsdMaskDs (PSDMASKds). The maximum number of breakpoints for xdsl2LConfProfDpboEPsd is 16.')
xdsl2LConfProfDpboEsEL = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 5, 1, 2, 1, 37), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 511))).setUnits('0.5 dB').setMaxAccess("readcreate")
if mibBuilder.loadTexts: xdsl2LConfProfDpboEsEL.setReference('ITU-T G.997.1, paragraph #7.3.1.2.13 (DPBOESEL)')
if mibBuilder.loadTexts: xdsl2LConfProfDpboEsEL.setStatus('current')
if mibBuilder.loadTexts: xdsl2LConfProfDpboEsEL.setDescription("This configuration parameter defines the assumed electrical length of cables (E-side cables) connecting exchange-based DSL services to a remote flexibility point (cabinet), that hosts the xTU-C that is subject to spectrally shaped downstream power back- off (DPBO) depending on this length. The electrical length is defined as the loss (in dB) of an equivalent length of hypothetical cable at a reference frequency defined by the network operator or in spectrum management regulations. This parameter shall be coded as an unsigned integer representing an electrical length from 0 dB (coded as 0) to 255.5 dB (coded as 511) in steps of 0.5 dB. All values in the range are valid. If this parameter is set to '0', the DPBO shall be disabled.")
xdsl2LConfProfDpboEsCableModelA = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 5, 1, 2, 1, 38), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 640))).setUnits('2^-8').setMaxAccess("readcreate")
if mibBuilder.loadTexts: xdsl2LConfProfDpboEsCableModelA.setReference('ITU-T G.997.1, paragraph #7.3.1.2.13 (DPBOESCMA)')
if mibBuilder.loadTexts: xdsl2LConfProfDpboEsCableModelA.setStatus('current')
if mibBuilder.loadTexts: xdsl2LConfProfDpboEsCableModelA.setDescription('The E-side Cable Model parameter A (DPBOESCMA) of the cable model (DPBOESCM) for cables connecting exchange-based DSL services to a remote flexibility point (cabinet), that hosts the xTU-C that is subject to spectrally shaped downstream power back- off (DPBO) depending on this value. The cable model is in terms of three scalars xdsl2LConfProfDpboEsCableModelA (DPBOESCMA), xdsl2LConfProfDpboEsCableModelB(DPBOESCMB), and xdsl2LConfProfDpboEsCableModelC (DPBOESCMC), that are used to estimate the frequency dependent loss of E-side cables calculated from the xdsl2LConfProfDpboEsEL (DPBOESEL) parameter. Possible values shall be coded as unsigned integers representing a scalar value from -1 (coded as 0) to 1.5 (coded as 640) in steps of 2^-8. All values in the range are valid. This parameter is used only for G.993.2.')
xdsl2LConfProfDpboEsCableModelB = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 5, 1, 2, 1, 39), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 640))).setUnits('2^-8').setMaxAccess("readcreate")
if mibBuilder.loadTexts: xdsl2LConfProfDpboEsCableModelB.setReference('ITU-T G.997.1, paragraph #7.3.1.2.13 (DPBOESCMB)')
if mibBuilder.loadTexts: xdsl2LConfProfDpboEsCableModelB.setStatus('current')
if mibBuilder.loadTexts: xdsl2LConfProfDpboEsCableModelB.setDescription('The E-side Cable Model parameter B (DPBOESCMB) of the cable model (DPBOESCM) for cables connecting exchange-based DSL services to a remote flexibility point (cabinet), that hosts the xTU-C that is subject to spectrally shaped downstream power back- off (DPBO) depending on this value. The cable model is in terms of three scalars dsl2LConfProfDpboEsCableModelA (DPBOESCMA), xdsl2LConfProfDpboEsCableModelB(DPBOESCMB), and xdsl2LConfProfDpboEsCableModelC (DPBOESCMC), that are used to estimate the frequency dependent loss of E-side cables calculated from the xdsl2LConfProfDpboEsEL (DPBOESEL) parameter. Possible values shall be coded as unsigned integers representing a scalar value from -1 (coded as 0) to 1.5 (coded as 640) in steps of 2^-8. All values in the range are valid. This parameter is used only for G.993.2.')
xdsl2LConfProfDpboEsCableModelC = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 5, 1, 2, 1, 40), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 640))).setUnits('2^-8').setMaxAccess("readcreate")
if mibBuilder.loadTexts: xdsl2LConfProfDpboEsCableModelC.setReference('ITU-T G.997.1, paragraph #7.3.1.2.13 (DPBOESCMC)')
if mibBuilder.loadTexts: xdsl2LConfProfDpboEsCableModelC.setStatus('current')
if mibBuilder.loadTexts: xdsl2LConfProfDpboEsCableModelC.setDescription('The E-side Cable Model parameter C (DPBOESCMC) of the cable model (DPBOESCM) for cables connecting exchange-based DSL services to a remote flexibility point (cabinet), that hosts the xTU-C that is subject to spectrally shaped downstream power back- off (DPBO) depending on this value. The cable model is in terms of three scalars xdsl2LConfProfDpboEsCableModelA (DPBOESCMA), xdsl2LConfProfDpboEsCableModelB(DPBOESCMB), and xdsl2LConfProfDpboEsCableModelC (DPBOESCMC), that are used to estimate the frequency dependent loss of E-side cables calculated from the xdsl2LConfProfDpboEsEL (DPBOESEL) parameter. Possible values shall be coded as unsigned integers representing a scalar value from -1 (coded as 0) to 1.5 (coded as 640) in steps of 2^-8. All values in the range are valid. This parameter is used only for G.993.2.')
xdsl2LConfProfDpboMus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 5, 1, 2, 1, 41), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setUnits('0.5 dBm/Hz').setMaxAccess("readcreate")
if mibBuilder.loadTexts: xdsl2LConfProfDpboMus.setReference('ITU-T G.997.1, paragraph #7.3.1.2.13 (DPBOMUS)')
if mibBuilder.loadTexts: xdsl2LConfProfDpboMus.setStatus('current')
if mibBuilder.loadTexts: xdsl2LConfProfDpboMus.setDescription('This configuration parameter defines the assumed Minimum Usable receive PSD mask (in dBm/Hz) for exchange-based services, used to modify parameter xdsl2LConfProfDpboFMax (DPBOFMAX) defined below (to determine the DPBO). It shall be coded as an unsigned integer representing a PSD mask level from 0 dBm/Hz (coded as 0) to -127.5 dBm/Hz (coded as 255) in steps of 0.5 dBm/Hz. All values in the range are valid. NOTE - The PSD mask level is 3.5 dB above the signal PSD level. This parameter is used only for G.993.2.')
xdsl2LConfProfDpboFMin = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 5, 1, 2, 1, 42), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048)).clone(32)).setUnits('4.3125 kHz').setMaxAccess("readcreate")
if mibBuilder.loadTexts: xdsl2LConfProfDpboFMin.setReference('ITU-T G.997.1, paragraph #7.3.1.2.13 (DPBOFMIN)')
if mibBuilder.loadTexts: xdsl2LConfProfDpboFMin.setStatus('current')
if mibBuilder.loadTexts: xdsl2LConfProfDpboFMin.setDescription('This configuration parameter defines the minimum frequency from which the DPBO shall be applied. It ranges from 0 kHz (coded as 0) to 8832 kHz (coded as 2048) in steps of 4.3125 kHz. This parameter is used only for G.993.2.')
xdsl2LConfProfDpboFMax = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 5, 1, 2, 1, 43), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(32, 6956)).clone(512)).setUnits('4.3125 kHz').setMaxAccess("readcreate")
if mibBuilder.loadTexts: xdsl2LConfProfDpboFMax.setReference('ITU-T G.997.1, paragraph #7.3.1.2.13 (DPBOFMAX)')
if mibBuilder.loadTexts: xdsl2LConfProfDpboFMax.setStatus('current')
if mibBuilder.loadTexts: xdsl2LConfProfDpboFMax.setDescription('This configuration parameter defines the maximum frequency at which DPBO may be applied. It ranges from 138 kHz (coded as 32) to 29997.75 kHz (coded as 6956) in steps of 4.3125 kHz. This parameter is used only for G.993.2.')
xdsl2LConfProfUpboKL = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 5, 1, 2, 1, 44), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1280))).setUnits('0.1 dB').setMaxAccess("readcreate")
if mibBuilder.loadTexts: xdsl2LConfProfUpboKL.setReference('ITU-T G.997.1, paragraph #7.3.1.2.14 (UPBOKL)')
if mibBuilder.loadTexts: xdsl2LConfProfUpboKL.setStatus('current')
if mibBuilder.loadTexts: xdsl2LConfProfUpboKL.setDescription("This configuration parameter defines the electrical length expressed in dB at 1 MHz, kl0, configured by the CO-MIB. The value ranges from 0 (coded as 0) to 128 dB (coded as 1280) in steps of 0.1 dB. This parameter is relevant only if xdsl2LConfProfUpboKLF is set to 'override(2)', which indicates that this parameter's value will override the VTUs' determination of the electrical length. If xdsl2LConfProfUpboKLF is set either to auto(1) or disableUpbo(3), then this parameter will be ignored.")
xdsl2LConfProfUpboKLF = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 5, 1, 2, 1, 45), Xdsl2UpboKLF().clone('disableUpbo')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xdsl2LConfProfUpboKLF.setReference('ITU-T G.997.1, paragraph #7.3.1.2.14 (UPBOKLF) ')
if mibBuilder.loadTexts: xdsl2LConfProfUpboKLF.setStatus('current')
if mibBuilder.loadTexts: xdsl2LConfProfUpboKLF.setDescription('Defines the upstream power backoff force mode.')
xdsl2LConfProfUs0Mask = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 5, 1, 2, 1, 46), Xdsl2LineUs0Mask()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xdsl2LConfProfUs0Mask.setReference('ITU-T G.997.1 Amendment 1, paragraph #7.3.1.2.18 (US0MASK)')
if mibBuilder.loadTexts: xdsl2LConfProfUs0Mask.setStatus('current')
if mibBuilder.loadTexts: xdsl2LConfProfUs0Mask.setDescription('The configuration parameter contains the US0 PSD masks to be allowed by the near-end xTU on the line. This parameter is only defined for G.993.2 Annex A. It is represented as a bitmap (0 if not allowed and 1 if allowed).')
xdsl2LConfProfForceInp = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 5, 1, 2, 1, 47), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xdsl2LConfProfForceInp.setReference('ITU-T G.997.1, paragraph #7.3.2.5 (FORCEINP)')
if mibBuilder.loadTexts: xdsl2LConfProfForceInp.setStatus('current')
if mibBuilder.loadTexts: xdsl2LConfProfForceInp.setDescription("This parameter, when set to 'true' indicates that the framer settings of the bearer shall be selected such that the impulse noise protection computed according to the formula specified in the relevant Recommendation is greater than or equal to the minimal impulse noise protection requirement. This flag shall have the same value for all the bearers of one line in the same direction.")
xdsl2LConfProfRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 5, 1, 2, 1, 48), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xdsl2LConfProfRowStatus.setStatus('current')
if mibBuilder.loadTexts: xdsl2LConfProfRowStatus.setDescription("This object is used to create a new row or to modify or delete an existing row in this table. A profile is activated by setting this object to 'active'. Before a profile can be deleted or taken out of service (by setting this object to 'destroy' or 'notInService'), it MUST be first unreferenced from all templates. A row in this table is said to be unreferenced when there is no instance of xdsl2LConfTempLineProfile that refers to the row. When a row is created in this table, the SNMP agent should also create corresponding rows in the tables xdsl2LineConfProfModeSpecTable and xdsl2LineConfProfModeSpecBandUsTable. When a row is deleted in this table, the SNMP agent should also delete corresponding rows in the tables xdsl2LineConfProfModeSpecTable and xdsl2LineConfProfModeSpecBandUsTable.")
xdsl2LineConfProfModeSpecTable = MibTable((1, 3, 6, 1, 2, 1, 10, 251, 1, 5, 1, 3), )
if mibBuilder.loadTexts: xdsl2LineConfProfModeSpecTable.setStatus('current')
if mibBuilder.loadTexts: xdsl2LineConfProfModeSpecTable.setDescription("The table xdsl2LineConfProfModeSpecTable extends the DSL line configuration profile by xDSL Mode-Specific parameters. A row in this table that has an index of xdsl2LConfProfXdslMode == defMode(1), is called a 'mandatory' row or 'default' row. A row in this table that has an index such that xdsl2LConfProfXdslMode is not equal to defMode(1), is called an 'optional' row or 'mode-specific' row. When a row in the xdsl2LineConfProfTable table (the parent row) is created, the SNMP agent will automatically create a 'mandatory' row in this table. When the parent row is deleted, the SNMP agent will automatically delete all associated rows in this table. Any attempt to delete the 'mandatory' row using the xdsl2LConfProfModeSpecRowStatus object will be rejected by the SNMP agent. The manager MAY create an 'optional' row in this table using the xdsl2LConfProfModeSpecRowStatus object if the parent row exists. The manager MAY delete an 'optional' row in this table using the xdsl2LConfProfModeSpecRowStatus object at any time. If the actual transmission mode of a DSL line does not match one of the 'optional' rows in this table, then the line will use the PSD configuration from the 'mandatory' row. Entries in this table MUST be maintained in a persistent manner.")
xdsl2LineConfProfModeSpecEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 251, 1, 5, 1, 3, 1), ).setIndexNames((0, "VDSL2-LINE-MIB", "xdsl2LConfProfProfileName"), (0, "VDSL2-LINE-MIB", "xdsl2LConfProfXdslMode"))
if mibBuilder.loadTexts: xdsl2LineConfProfModeSpecEntry.setStatus('current')
if mibBuilder.loadTexts: xdsl2LineConfProfModeSpecEntry.setDescription('The table xdsl2LineConfProfModeSpecTable extends the DSL line configuration profile by DSL Mode-Specific parameters.')
xdsl2LConfProfXdslMode = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 5, 1, 3, 1, 1), Xdsl2OperationModes())
if mibBuilder.loadTexts: xdsl2LConfProfXdslMode.setReference('DSL Forum TR-129, paragraph #5.5')
if mibBuilder.loadTexts: xdsl2LConfProfXdslMode.setStatus('current')
if mibBuilder.loadTexts: xdsl2LConfProfXdslMode.setDescription('The DSL Mode is a way of categorizing the various xDSL transmission modes into groups, each group (xDSL Mode) shares the same PSD configuration. There should be multiple entries in this table for a given line profile in case multiple bits are set in xdsl2LConfProfXtuTransSysEna for that profile.')
xdsl2LConfProfMaxNomPsdDs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 5, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-600, -300)).clone(-300)).setUnits('0.1 dBm/Hz').setMaxAccess("readcreate")
if mibBuilder.loadTexts: xdsl2LConfProfMaxNomPsdDs.setReference('ITU-T G.997.1, paragraph #7.3.1.2.1 (MAXNOMPSDds)')
if mibBuilder.loadTexts: xdsl2LConfProfMaxNomPsdDs.setStatus('current')
if mibBuilder.loadTexts: xdsl2LConfProfMaxNomPsdDs.setDescription('The maximum nominal transmit PSD in the downstream direction during initialization and Showtime. It ranges from -600 to -300 units of 0.1 dBm/Hz (physical values are -60 to -30 dBm/Hz).')
xdsl2LConfProfMaxNomPsdUs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 5, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-600, -300)).clone(-300)).setUnits('0.1 dBm/Hz').setMaxAccess("readcreate")
if mibBuilder.loadTexts: xdsl2LConfProfMaxNomPsdUs.setReference('ITU-T G.997.1, paragraph #7.3.1.2.2 (MAXNOMPSDus)')
if mibBuilder.loadTexts: xdsl2LConfProfMaxNomPsdUs.setStatus('current')
if mibBuilder.loadTexts: xdsl2LConfProfMaxNomPsdUs.setDescription('The maximum nominal transmit PSD in the upstream direction during initialization and Showtime. It ranges from -600 to -300 units of 0.1 dBm/Hz (physical values are -60 to -30 dBm/Hz).')
xdsl2LConfProfMaxNomAtpDs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 5, 1, 3, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(255)).setUnits('0.1 dBm').setMaxAccess("readcreate")
if mibBuilder.loadTexts: xdsl2LConfProfMaxNomAtpDs.setReference('ITU-T G.997.1, paragraph #7.3.1.2.3 (MAXNOMATPds)')
if mibBuilder.loadTexts: xdsl2LConfProfMaxNomAtpDs.setStatus('current')
if mibBuilder.loadTexts: xdsl2LConfProfMaxNomAtpDs.setDescription('The maximum nominal aggregate to transmit power in the downstream direction during initialization and Showtime. It ranges from 0 to 255 units of 0.1 dBm (physical values are 0 to 25.5 dBm).')
xdsl2LConfProfMaxNomAtpUs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 5, 1, 3, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(255)).setUnits('0.1 dBm').setMaxAccess("readcreate")
if mibBuilder.loadTexts: xdsl2LConfProfMaxNomAtpUs.setReference('ITU-T G.997.1, paragraph #7.3.1.2.4 (MAXNOMATPus)')
if mibBuilder.loadTexts: xdsl2LConfProfMaxNomAtpUs.setStatus('current')
if mibBuilder.loadTexts: xdsl2LConfProfMaxNomAtpUs.setDescription('The maximum nominal aggregate transmit power in the upstream direction during initialization and Showtime. It ranges from 0 to 255 units of 0.1 dBm (physical values are 0 to 25.5 dBm).')
xdsl2LConfProfMaxAggRxPwrUs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 5, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-255, 255), ValueRangeConstraint(2147483647, 2147483647), )).clone(255)).setUnits('0.1 dBm').setMaxAccess("readcreate")
if mibBuilder.loadTexts: xdsl2LConfProfMaxAggRxPwrUs.setReference('ITU-T G.997.1, paragraph #7.3.1.2.5 (MAXRXPWRus)')
if mibBuilder.loadTexts: xdsl2LConfProfMaxAggRxPwrUs.setStatus('current')
if mibBuilder.loadTexts: xdsl2LConfProfMaxAggRxPwrUs.setDescription('The maximum upstream aggregate receive power over the relevant set of subcarriers. The xTU-C should verify that the upstream power cutback is such that this maximum aggregate receive power value is honored. It ranges from -255 to 255 units of 0.1 dBm (physical values are -25.5 to 25.5 dBm). A value of 0x7FFFFFFF (2147483647) means that there is no limit.')
xdsl2LConfProfPsdMaskDs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 5, 1, 3, 1, 7), Xdsl2PsdMaskDs()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xdsl2LConfProfPsdMaskDs.setReference('ITU-T G.997.1, paragraph #7.3.1.2.9 (PSDMASKds)')
if mibBuilder.loadTexts: xdsl2LConfProfPsdMaskDs.setStatus('current')
if mibBuilder.loadTexts: xdsl2LConfProfPsdMaskDs.setDescription("The downstream PSD mask applicable at the U-C2 reference point. This parameter is used only for G.992.5 and it may impose PSD restrictions (breakpoints) in addition to the Limit PSD mask defined in G.992.5. This is a string of 32 pairs of values in the following structure: Octets 0-1 - Index of the first subcarrier used in the context of a first breakpoint. Octet 2 - The PSD reduction for the subcarrier indicated in octets 0 and 1. Octets 3-5 - Same, for a second breakpoint. Octets 6-8 - Same, for a third breakpoint. This architecture continues until octets 94-95, which are associated with a 32nd breakpoint. Each subcarrier index is an unsigned number in the range 0 and NSCds-1. Each PSD reduction value is in the range 0 (0 dBm/Hz) to 255 (-127.5 dBm/Hz) with steps of 0.5 dBm/Hz. Valid values are in the range 0 to 190 (0 to -95 dBm/Hz). When the number of breakpoints is less than 32, all remaining octets are set to the value '0'. Note that the content of this object should be correlated with the subcarrier mask and with the RFI setup.")
xdsl2LConfProfPsdMaskUs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 5, 1, 3, 1, 8), Xdsl2PsdMaskUs()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xdsl2LConfProfPsdMaskUs.setReference('ITU-T G.997.1, paragraph #7.3.1.2.12 (PSDMASKus)')
if mibBuilder.loadTexts: xdsl2LConfProfPsdMaskUs.setStatus('current')
if mibBuilder.loadTexts: xdsl2LConfProfPsdMaskUs.setDescription("The upstream PSD mask applicable at the U-R2 reference point. This parameter is used only for G.992.5, and it may impose PSD restrictions (breakpoints) in addition to the Limit PSD mask defined in G.992.5. This is a string of 16 pairs of values in the following structure: Octets 0-1 - Index of the first subcarrier used in the context of a first breakpoint. Octet 2 - The PSD reduction for the subcarrier indicated in octets 0 and 1. Octets 3-5 - Same, for a second breakpoint. Octets 6-8 - Same, for a third breakpoint. This architecture continues until octets 9-47, which are associated with a 16th breakpoint. Each subcarrier index is an unsigned number in the range 0 and NSCus-1. Each PSD reduction value is in the range 0 (0 dBm/Hz) to 255 (-127.5 dBm/Hz) with steps of 0.5 dBm/Hz. Valid values are in the range 0 to 190 (0 to -95 dBm/Hz). When the number of breakpoints is less than 16, all remaining octets are set to the value '0'. Note that the content of this object should be correlated with the subcarrier mask and with the RFI setup.")
xdsl2LConfProfPsdMaskSelectUs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 5, 1, 3, 1, 9), Xdsl2LinePsdMaskSelectUs().clone('adlu32Eu32')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xdsl2LConfProfPsdMaskSelectUs.setReference('ITU-T G.997.1, paragraph #7.3.1.2.11 (Upstream PSD mask selection)')
if mibBuilder.loadTexts: xdsl2LConfProfPsdMaskSelectUs.setStatus('current')
if mibBuilder.loadTexts: xdsl2LConfProfPsdMaskSelectUs.setDescription('The selected upstream PSD mask. This parameter is used only for Annexes J and M of G.992.3 and G.992.5, and the same selection is used for all relevant enabled bits in xdsl2LConfProfXtuTransSysEna.')
xdsl2LConfProfClassMask = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 5, 1, 3, 1, 10), Xdsl2LineClassMask().clone('a998ORb997M1cORc998B')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xdsl2LConfProfClassMask.setReference('ITU-T G.997.1 Amendment 1, paragraph #7.3.1.2.15 (CLASSMASK)')
if mibBuilder.loadTexts: xdsl2LConfProfClassMask.setStatus('current')
if mibBuilder.loadTexts: xdsl2LConfProfClassMask.setDescription('In order to reduce the number of configuration possibilities, the limit Power Spectral Density masks (see LIMITMASK) are grouped in PSD mask classes. Each class is designed such that the PSD levels of each limit PSD mask of a specific class are equal in their respective passband above 552 kHz. This parameter is defined per VDSL2 Annex enabled in the xdsl2LConfProfXtuTransSysEna object. It selects a single PSD mask class per Annex that is activated at the VTU-O.')
xdsl2LConfProfLimitMask = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 5, 1, 3, 1, 11), Xdsl2LineLimitMask()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xdsl2LConfProfLimitMask.setReference('ITU-T G.997.1 Amendment 1, paragraph #7.3.1.2.16 (LIMITMASK)')
if mibBuilder.loadTexts: xdsl2LConfProfLimitMask.setStatus('current')
if mibBuilder.loadTexts: xdsl2LConfProfLimitMask.setDescription('This configuration parameter contains the G.993.2 limit PSD masks of the selected PSD mask class, enabled by the near-end xTU on this line for each class of profiles. This parameter is defined per VDSL2 Annex enabled in the xdsl2LConfProfXtuTransSysEna object. Through this parameter, several limit PSD masks of the selected PSD mask class (xdsl2LConfProfClassMask) may be enabled. The enabling parameter is coded in a bitmap representation (0 if the associated mask is not allowed, 1 if it is allowed).')
xdsl2LConfProfUs0Disable = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 5, 1, 3, 1, 12), Xdsl2LineUs0Disable()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xdsl2LConfProfUs0Disable.setReference('ITU-T G.997.1, paragraph #7.3.1.2.17 (US0DISABLE)')
if mibBuilder.loadTexts: xdsl2LConfProfUs0Disable.setStatus('current')
if mibBuilder.loadTexts: xdsl2LConfProfUs0Disable.setDescription("This configuration parameter indicates if the use of the US0 is disabled for each limit PSD mask enabled in the xdsl2LConfProfLimitMask parameter. This parameter is defined per VDSL2 Annex enabled in the xdsl2LConfProfXtuTransSysEna object. For each limit PSD mask enabled in the xdsl2LConfProfLimitMask parameter, a bit shall indicate if the US0 is disabled. The disabling parameter is coded as a bitmap. The bit is set to '1' if the US0 is disabled for the associated limit mask. This parameter and the xdsl2LConfProfLimitMask parameter use the same structure.")
xdsl2LConfProfModeSpecRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 5, 1, 3, 1, 13), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xdsl2LConfProfModeSpecRowStatus.setStatus('current')
if mibBuilder.loadTexts: xdsl2LConfProfModeSpecRowStatus.setDescription("This object is used to create a new row or to modify or delete an existing row in this table. This row is activated by setting this object to 'active'. A 'mandatory' row, as defined in the DESCRIPTION clause of xdsl2LineConfProfModeSpecTable, cannot be deleted at all. A 'mandatory' row can be taken out of service (by setting this object to 'notInService') if the parent row in the xdsl2LineConfProfTable table is not in the 'active' state. An 'optional' row (or 'mode-specific' row) can be deleted or taken out of service (by setting this object to 'destroy' or 'notInService') at any time.")
xdsl2LineConfProfModeSpecBandUsTable = MibTable((1, 3, 6, 1, 2, 1, 10, 251, 1, 5, 1, 4), )
if mibBuilder.loadTexts: xdsl2LineConfProfModeSpecBandUsTable.setStatus('current')
if mibBuilder.loadTexts: xdsl2LineConfProfModeSpecBandUsTable.setDescription("The table xdsl2LineConfProfModeSpecBandUsTable extends xdsl2LineConfProfModeSpecTable with upstream-band-specific parameters for VDSL2, such as upstream power back-off parameters xdsl2LConfProfUpboPsdA and xdsl2LConfProfUpboPsdB (UPBOPSD-pb). When a parent 'mandatory row' is created in xdsl2LineConfProfModeSpecTable, the SNMP agent will automatically create several 'mandatory' rows in this table -- one for each upstream band: Note: A mandatory row is one where xdsl2LConfProfXdslMode = defMode(1). When the parent row is deleted, the SNMP agent will automatically delete all associated rows in this table. Any attempt to delete a 'mandatory' row using the xdsl2LConfProfModeSpecBandUsRowStatus object will be rejected by the SNMP agent. The manager MAY create a new 'optional' row in this table using the xdsl2LConfProfModeSpecBandUsRowStatus object if the associated parent row exists, and the value of xdsl2LConfProfXdslMode is a G.993.2 value. The manager MAY delete an 'optional' row in this table using the xdsl2LConfProfModeSpecBandUsRowStatus object at any time. With respect to the xdsl2LConfProfUpboPsdA and xdsl2LConfProfUpboPsdB parameters, for a given upstream band, if an optional row is missing from this table, then that means upstream power back-off is disabled for that upstream band. Entries in this table MUST be maintained in a persistent manner.")
xdsl2LineConfProfModeSpecBandUsEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 251, 1, 5, 1, 4, 1), ).setIndexNames((0, "VDSL2-LINE-MIB", "xdsl2LConfProfProfileName"), (0, "VDSL2-LINE-MIB", "xdsl2LConfProfXdslMode"), (0, "VDSL2-LINE-MIB", "xdsl2LConfProfXdslBandUs"))
if mibBuilder.loadTexts: xdsl2LineConfProfModeSpecBandUsEntry.setStatus('current')
if mibBuilder.loadTexts: xdsl2LineConfProfModeSpecBandUsEntry.setDescription('The table xdsl2LineConfProfModeSpecBandUsTable extends xdsl2LineConfProfModeSpecTable with upstream-band-specific parameters for VDSL2, such as upstream power back-off parameters xdsl2LConfProfUpboPsdA and xdsl2LConfProfUpboPsdB (UPBOPSD- pb).')
xdsl2LConfProfXdslBandUs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 5, 1, 4, 1, 1), Xdsl2BandUs())
if mibBuilder.loadTexts: xdsl2LConfProfXdslBandUs.setReference('ITU-T G.997.1, paragraph #7.3.1.2.14')
if mibBuilder.loadTexts: xdsl2LConfProfXdslBandUs.setStatus('current')
if mibBuilder.loadTexts: xdsl2LConfProfXdslBandUs.setDescription('Each value identifies a specific band in the upstream transmission direction (excluding the US0 band).')
xdsl2LConfProfUpboPsdA = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 5, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4000, 8095)).clone(4000)).setUnits('0.01 dBm/Hz').setMaxAccess("readcreate")
if mibBuilder.loadTexts: xdsl2LConfProfUpboPsdA.setReference('ITU-T G.997.1, paragraph #7.3.1.2.14 (UPBOPSD-pb)')
if mibBuilder.loadTexts: xdsl2LConfProfUpboPsdA.setStatus('current')
if mibBuilder.loadTexts: xdsl2LConfProfUpboPsdA.setDescription("This configuration parameter defines the 'a' reference parameter of the UPBO reference PSD used to compute the upstream power back-off for the upstream band. A UPBO PSD defined for each band shall consist of two parameters [a, b]. Parameter 'a' (xdsl2LConfProfUpboPsdA) ranges from 40 dBm/Hz (coded as 4000) to 80.95 dBm/Hz (coded as 8095) in steps of 0.01 dBm/Hz; and parameter 'b' (xdsl2LConfProfUpboPsdB) ranges from 0 dBm/Hz (coded as 0) to 40.95 dBm/Hz (coded as 4095) in steps of 0.01 dBm/Hz. The UPBO reference PSD at the frequency 'f' expressed in MHz shall be equal to '-a-b(SQRT(f))'. Setting xdsl2LConfProfUpboPsdA to 4000 and xdsl2LConfProfUpboPsdB to 0 is a special configuration to disable UPBO in the respective upstream band.")
xdsl2LConfProfUpboPsdB = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 5, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setUnits('0.01 dBm/Hz').setMaxAccess("readcreate")
if mibBuilder.loadTexts: xdsl2LConfProfUpboPsdB.setReference('ITU-T G.997.1, paragraph #7.3.1.2.14 (UPBOPSD-pb)')
if mibBuilder.loadTexts: xdsl2LConfProfUpboPsdB.setStatus('current')
if mibBuilder.loadTexts: xdsl2LConfProfUpboPsdB.setDescription("This configuration parameter defines the 'b' reference parameter of the UPBO reference PSD used to compute the upstream power back-off for the upstream band. A UPBO PSD defined for each band shall consist of two parameters [a, b]. Parameter 'a' (xdsl2LConfProfUpboPsdA) ranges from 40 dBm/Hz (coded as 4000) to 80.95 dBm/Hz (coded as 8095) in steps of 0.01 dBm/Hz; and parameter 'b' (xdsl2LConfProfUpboPsdB) ranges from 0 dBm/Hz (coded as 0) to 40.95 dBm/Hz (coded as 4095) in steps of 0.01 dBm/Hz. The UPBO reference PSD at the frequency 'f' expressed in MHz shall be equal to '-a-b(SQRT(f))'. Setting xdsl2LConfProfUpboPsdA to 4000 and xdsl2LConfProfUpboPsdB to 0 is a special configuration to disable UPBO in the respective upstream band.")
xdsl2LConfProfModeSpecBandUsRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 5, 1, 4, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xdsl2LConfProfModeSpecBandUsRowStatus.setStatus('current')
if mibBuilder.loadTexts: xdsl2LConfProfModeSpecBandUsRowStatus.setDescription("This object is used to create a new row or to modify or delete an existing row in this table. This row is activated by setting this object to 'active'. A 'mandatory' row, as defined in the DESCRIPTION clause of xdsl2LineConfProfModeSpecBandUsTable, cannot be deleted at all. A 'mandatory' row can be taken out of service (by setting this object to 'notInService') if the parent row in the xdsl2LineConfProfModeSpecTable table is not in the 'active' state. An 'optional' row (or 'mode-specific' row) can be deleted or taken out of service (by setting this object to 'destroy' or 'notInService') at any time.")
xdsl2ChConfProfileTable = MibTable((1, 3, 6, 1, 2, 1, 10, 251, 1, 5, 2, 1), )
if mibBuilder.loadTexts: xdsl2ChConfProfileTable.setStatus('current')
if mibBuilder.loadTexts: xdsl2ChConfProfileTable.setDescription('The table xdsl2ChConfProfileTable contains DSL channel profile configuration. Entries in this table MUST be maintained in a persistent manner.')
xdsl2ChConfProfileEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 251, 1, 5, 2, 1, 1), ).setIndexNames((0, "VDSL2-LINE-MIB", "xdsl2ChConfProfProfileName"))
if mibBuilder.loadTexts: xdsl2ChConfProfileEntry.setStatus('current')
if mibBuilder.loadTexts: xdsl2ChConfProfileEntry.setDescription("A default profile with an index of 'DEFVAL' will always exist, and its parameters will be set to vendor-specific values, unless otherwise specified in this document.")
xdsl2ChConfProfProfileName = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 5, 2, 1, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: xdsl2ChConfProfProfileName.setStatus('current')
if mibBuilder.loadTexts: xdsl2ChConfProfProfileName.setDescription('This object identifies a row in this table.')
xdsl2ChConfProfMinDataRateDs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 5, 2, 1, 1, 2), Unsigned32()).setUnits('bits/second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: xdsl2ChConfProfMinDataRateDs.setReference('ITU-T G.997.1, paragraph #7.3.2.1.1 (Minimum data rate)')
if mibBuilder.loadTexts: xdsl2ChConfProfMinDataRateDs.setStatus('current')
if mibBuilder.loadTexts: xdsl2ChConfProfMinDataRateDs.setDescription('Minimum Data Rate on Downstream direction. The minimum net data rate for the bearer channel, coded in bit/s.')
xdsl2ChConfProfMinDataRateUs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 5, 2, 1, 1, 3), Unsigned32()).setUnits('bits/second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: xdsl2ChConfProfMinDataRateUs.setReference('ITU-T G.997.1, paragraph #7.3.2.1.1 (Minimum data rate)')
if mibBuilder.loadTexts: xdsl2ChConfProfMinDataRateUs.setStatus('current')
if mibBuilder.loadTexts: xdsl2ChConfProfMinDataRateUs.setDescription('Minimum Data Rate on Upstream direction. The minimum net data rate for the bearer channel, coded in bit/s.')
xdsl2ChConfProfMinResDataRateDs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 5, 2, 1, 1, 4), Unsigned32()).setUnits('bits/second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: xdsl2ChConfProfMinResDataRateDs.setReference('ITU-T G.997.1, paragraph #7.3.2.1.2 (Minimum reserved data rate)')
if mibBuilder.loadTexts: xdsl2ChConfProfMinResDataRateDs.setStatus('current')
if mibBuilder.loadTexts: xdsl2ChConfProfMinResDataRateDs.setDescription("Minimum Reserved Data Rate on Downstream direction. The minimum reserved net data rate for the bearer channel, coded in bit/s. This parameter is used only if the Rate Adaptation Mode in the direction of the bearer channel (i.e., xdsl2LConfProfRaModeDs) is set to 'dynamicRa'.")
xdsl2ChConfProfMinResDataRateUs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 5, 2, 1, 1, 5), Unsigned32()).setUnits('bits/second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: xdsl2ChConfProfMinResDataRateUs.setReference('ITU-T G.997.1, paragraph #7.3.2.1.2 (Minimum reserved data rate)')
if mibBuilder.loadTexts: xdsl2ChConfProfMinResDataRateUs.setStatus('current')
if mibBuilder.loadTexts: xdsl2ChConfProfMinResDataRateUs.setDescription("Minimum Reserved Data Rate on Upstream direction. The minimum reserved net data rate for the bearer channel, coded in bit/s. This parameter is used only if the Rate Adaptation Mode in the direction of the bearer channel (i.e., xdsl2LConfProfRaModeUs) is set to 'dynamicRa'.")
xdsl2ChConfProfMaxDataRateDs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 5, 2, 1, 1, 6), Unsigned32()).setUnits('bits/second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: xdsl2ChConfProfMaxDataRateDs.setReference('ITU-T G.997.1, paragraph #7.3.2.1.3 (Maximum data rate)')
if mibBuilder.loadTexts: xdsl2ChConfProfMaxDataRateDs.setStatus('current')
if mibBuilder.loadTexts: xdsl2ChConfProfMaxDataRateDs.setDescription('Maximum Data Rate on Downstream direction. The maximum net data rate for the bearer channel, coded in bit/s.')
xdsl2ChConfProfMaxDataRateUs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 5, 2, 1, 1, 7), Unsigned32()).setUnits('bits/second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: xdsl2ChConfProfMaxDataRateUs.setReference('ITU-T G.997.1, paragraph #7.3.2.1.3 (Maximum data rate)')
if mibBuilder.loadTexts: xdsl2ChConfProfMaxDataRateUs.setStatus('current')
if mibBuilder.loadTexts: xdsl2ChConfProfMaxDataRateUs.setDescription('Maximum Data Rate on Upstream direction. The maximum net data rate for the bearer channel, coded in bit/s.')
xdsl2ChConfProfMinDataRateLowPwrDs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 5, 2, 1, 1, 8), Unsigned32()).setUnits('bits/second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: xdsl2ChConfProfMinDataRateLowPwrDs.setReference('ITU-T G.997.1, paragraph #7.3.2.1.5 (Minimum Data Rate in low power state)')
if mibBuilder.loadTexts: xdsl2ChConfProfMinDataRateLowPwrDs.setStatus('current')
if mibBuilder.loadTexts: xdsl2ChConfProfMinDataRateLowPwrDs.setDescription('This parameter specifies the minimum net data rate for the bearer channel as desired by the operator of the system during the low power state (L1/L2). The power management low power states L1 and L2 are defined in ITU-T Recommendations G.992.2 and G.992.3, respectively. The data rate is coded in steps of bit/s.')
xdsl2ChConfProfMinDataRateLowPwrUs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 5, 2, 1, 1, 9), Unsigned32()).setUnits('bits/second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: xdsl2ChConfProfMinDataRateLowPwrUs.setReference('ITU-T G.997.1, paragraph #7.3.2.1.5 (Minimum Data Rate in low power state)')
if mibBuilder.loadTexts: xdsl2ChConfProfMinDataRateLowPwrUs.setStatus('current')
if mibBuilder.loadTexts: xdsl2ChConfProfMinDataRateLowPwrUs.setDescription('This parameter specifies the minimum net data rate for the bearer channel as desired by the operator of the system during the low power state (L1/L2). The power management low power states L1 and L2 are defined in ITU-T Recommendations G.992.2 and G.992.3, respectively. The data rate is coded in steps of bit/s.')
xdsl2ChConfProfMaxDelayDs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 5, 2, 1, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: xdsl2ChConfProfMaxDelayDs.setReference('ITU-T G.997.1, paragraph #7.3.2.2 (Maximum interleaving delay)')
if mibBuilder.loadTexts: xdsl2ChConfProfMaxDelayDs.setStatus('current')
if mibBuilder.loadTexts: xdsl2ChConfProfMaxDelayDs.setDescription('Maximum Interleave Delay on Downstream direction. The maximum one-way interleaving delay introduced by the PMS-TC on Downstream direction. The xTUs shall choose the S (factor) and D (depth) values such that the actual one-way interleaving delay (Xdsl2ChStatusActDelay) is as close as possible to, but less than or equal to, xdsl2ChConfProfMaxDelayDs. The delay is coded in ms, with the value 0 indicating no delay bound is being imposed.')
xdsl2ChConfProfMaxDelayUs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 5, 2, 1, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: xdsl2ChConfProfMaxDelayUs.setReference('ITU-T G.997.1, paragraph #7.3.2.2 (Maximum interleaving delay)')
if mibBuilder.loadTexts: xdsl2ChConfProfMaxDelayUs.setStatus('current')
if mibBuilder.loadTexts: xdsl2ChConfProfMaxDelayUs.setDescription('Maximum Interleave Delay on Upstream direction. The maximum one-way interleaving delay introduced by the PMS-TC on Upstream direction. The xTUs shall choose the S (factor) and D (depth) values such that the actual one-way interleaving delay (Xdsl2ChStatusActDelay) is as close as possible to, but less than or equal to, xdsl2ChConfProfMaxDelayUs. The delay is coded in ms, with the value 0 indicating no delay bound is being imposed.')
xdsl2ChConfProfMinProtectionDs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 5, 2, 1, 1, 12), Xdsl2SymbolProtection().clone('noProtection')).setUnits('symbols').setMaxAccess("readcreate")
if mibBuilder.loadTexts: xdsl2ChConfProfMinProtectionDs.setReference('ITU-T G.997.1, paragraph #7.3.2.3 (INPMINds)')
if mibBuilder.loadTexts: xdsl2ChConfProfMinProtectionDs.setStatus('current')
if mibBuilder.loadTexts: xdsl2ChConfProfMinProtectionDs.setDescription('This parameter specifies the minimum impulse noise protection for the bearer channel if it is transported over DMT symbols with a subcarrier spacing of 4.3125 kHz. The impulse noise protection is expressed in DMT symbols with a subcarrier spacing of 4.3125 kHz and can take the values 1/2 and any integer from 0 to 16, inclusive. If the xTU does not support the configured INPMIN value, it shall use the nearest supported impulse noise protection greater than INPMIN.')
xdsl2ChConfProfMinProtectionUs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 5, 2, 1, 1, 13), Xdsl2SymbolProtection().clone('noProtection')).setUnits('symbols').setMaxAccess("readcreate")
if mibBuilder.loadTexts: xdsl2ChConfProfMinProtectionUs.setReference('ITU-T G.997.1, paragraph #7.3.2.3 (INPMINus)')
if mibBuilder.loadTexts: xdsl2ChConfProfMinProtectionUs.setStatus('current')
if mibBuilder.loadTexts: xdsl2ChConfProfMinProtectionUs.setDescription('This parameter specifies the minimum impulse noise protection for the bearer channel if it is transported over DMT symbols with a subcarrier spacing of 4.3125 kHz. The impulse noise protection is expressed in DMT symbols with a subcarrier spacing of 4.3125 kHz and can take the values 1/2 and any integer from 0 to 16, inclusive. If the xTU does not support the configured INPMIN value, it shall use the nearest supported impulse noise protection greater than INPMIN.')
xdsl2ChConfProfMinProtection8Ds = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 5, 2, 1, 1, 14), Xdsl2SymbolProtection8().clone('noProtection')).setUnits('symbols').setMaxAccess("readcreate")
if mibBuilder.loadTexts: xdsl2ChConfProfMinProtection8Ds.setReference('ITU-T G.997.1, paragraph #7.3.2.4 (INPMIN8ds)')
if mibBuilder.loadTexts: xdsl2ChConfProfMinProtection8Ds.setStatus('current')
if mibBuilder.loadTexts: xdsl2ChConfProfMinProtection8Ds.setDescription('This parameter specifies the minimum impulse noise protection for the bearer channel if it is transported over DMT symbols with a subcarrier spacing of 8.625 kHz. The impulse noise protection is expressed in DMT symbols with a subcarrier spacing of 8.625 kHz.')
xdsl2ChConfProfMinProtection8Us = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 5, 2, 1, 1, 15), Xdsl2SymbolProtection8().clone('noProtection')).setUnits('symbols').setMaxAccess("readcreate")
if mibBuilder.loadTexts: xdsl2ChConfProfMinProtection8Us.setReference('ITU-T G.997.1, paragraph #7.3.2.4 (INPMIN8us)')
if mibBuilder.loadTexts: xdsl2ChConfProfMinProtection8Us.setStatus('current')
if mibBuilder.loadTexts: xdsl2ChConfProfMinProtection8Us.setDescription('This parameter specifies the minimum impulse noise protection for the bearer channel if it is transported over DMT symbols with a subcarrier spacing of 8.625 kHz. The impulse noise protection is expressed in DMT symbols with a subcarrier spacing of 8.625 kHz.')
xdsl2ChConfProfMaxBerDs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 5, 2, 1, 1, 16), Xdsl2MaxBer().clone('eminus5')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xdsl2ChConfProfMaxBerDs.setReference('ITU-T G.997.1, paragraph #7.3.2.6 (Maximum bit error ratio)')
if mibBuilder.loadTexts: xdsl2ChConfProfMaxBerDs.setStatus('current')
if mibBuilder.loadTexts: xdsl2ChConfProfMaxBerDs.setDescription('Maximum Bit Error Ratio on Downstream direction. The maximum bit error ratio for the bearer channel.')
xdsl2ChConfProfMaxBerUs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 5, 2, 1, 1, 17), Xdsl2MaxBer().clone('eminus5')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xdsl2ChConfProfMaxBerUs.setReference('ITU-T G.997.1, paragraph #7.3.2.6 (Maximum bit error ratio)')
if mibBuilder.loadTexts: xdsl2ChConfProfMaxBerUs.setStatus('current')
if mibBuilder.loadTexts: xdsl2ChConfProfMaxBerUs.setDescription('Maximum Bit Error Ratio on Upstream direction. The maximum bit error ratio for the bearer channel.')
xdsl2ChConfProfUsDataRateDs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 5, 2, 1, 1, 18), Unsigned32()).setUnits('bits/second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: xdsl2ChConfProfUsDataRateDs.setReference('ITU-T G.997.1, paragraph #7.3.2.8.1 (Data rate threshold upshift)')
if mibBuilder.loadTexts: xdsl2ChConfProfUsDataRateDs.setStatus('current')
if mibBuilder.loadTexts: xdsl2ChConfProfUsDataRateDs.setDescription("Data Rate Threshold Upshift for Downstream direction. An 'Up-Shift rate change' event is triggered when the actual downstream data rate exceeds, by more than the threshold, the data rate at the last entry into Showtime. The parameter is coded in bit/s.")
xdsl2ChConfProfDsDataRateDs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 5, 2, 1, 1, 19), Unsigned32()).setUnits('bits/second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: xdsl2ChConfProfDsDataRateDs.setReference('ITU-T G.997.1, paragraph #7.3.2.8.2 (Data rate threshold downshift)')
if mibBuilder.loadTexts: xdsl2ChConfProfDsDataRateDs.setStatus('current')
if mibBuilder.loadTexts: xdsl2ChConfProfDsDataRateDs.setDescription("Data Rate Threshold Downshift for Downstream direction. A 'Down-Shift rate change' event is triggered when the actual downstream data rate is below the data rate at the last entry into Showtime, by more than the threshold. The parameter is coded in bit/s.")
xdsl2ChConfProfUsDataRateUs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 5, 2, 1, 1, 20), Unsigned32()).setUnits('bits/second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: xdsl2ChConfProfUsDataRateUs.setReference('ITU-T G.997.1, paragraph #7.3.2.8.1 (Data rate threshold upshift)')
if mibBuilder.loadTexts: xdsl2ChConfProfUsDataRateUs.setStatus('current')
if mibBuilder.loadTexts: xdsl2ChConfProfUsDataRateUs.setDescription("Data Rate Threshold Upshift for Upstream direction. An 'Up-Shift rate change' event is triggered when the actual upstream data rate exceeds, by more than the threshold, the data rate at the last entry into Showtime. The parameter is coded in bit/s.")
xdsl2ChConfProfDsDataRateUs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 5, 2, 1, 1, 21), Unsigned32()).setUnits('bits/second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: xdsl2ChConfProfDsDataRateUs.setReference('ITU-T G.997.1, paragraph #7.3.2.8.2 (Data rate threshold downshift)')
if mibBuilder.loadTexts: xdsl2ChConfProfDsDataRateUs.setStatus('current')
if mibBuilder.loadTexts: xdsl2ChConfProfDsDataRateUs.setDescription("Data Rate Threshold Downshift for Upstream direction. A 'Down-Shift rate change' event is triggered when the actual upstream data rate is below the data rate at the last entry into Showtime, by more than the threshold. The parameter is coded in bit/s.")
xdsl2ChConfProfImaEnabled = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 5, 2, 1, 1, 22), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xdsl2ChConfProfImaEnabled.setReference('ITU-T G.997.1, paragraph #7.3.4.1 (IMA operation mode enable parameter)')
if mibBuilder.loadTexts: xdsl2ChConfProfImaEnabled.setStatus('current')
if mibBuilder.loadTexts: xdsl2ChConfProfImaEnabled.setDescription("IMA Mode Enable. The parameter enables the IMA operation mode in the ATM Data Path. Relevant only if the channel is of ATM Data Path. When in 'enable' state, the ATM Data Path should comply with the requirements for IMA transmission.")
xdsl2ChConfProfMaxDelayVar = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 5, 2, 1, 1, 23), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(255)).setUnits('0.1 milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: xdsl2ChConfProfMaxDelayVar.setReference('ITU-T G.997.1 Amendment 1, paragraph #7.3.2.9 (DVMAX)')
if mibBuilder.loadTexts: xdsl2ChConfProfMaxDelayVar.setStatus('current')
if mibBuilder.loadTexts: xdsl2ChConfProfMaxDelayVar.setDescription('Maximum delay variation (DVMAX). This optional VDSL2-specific parameter specifies the maximum value for the delay variation allowed in an OLR procedure. It is ranges from 1 to 254 units of 0.1 milliseconds (i.e., 0.1 to 25.4 milliseconds) with the special value 255, which indicates that no delay variation bound is imposed.')
xdsl2ChConfProfInitPolicy = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 5, 2, 1, 1, 24), Xdsl2ChInitPolicy().clone('policy0')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xdsl2ChConfProfInitPolicy.setReference('ITU-T G.997.1 Amendment 1, paragraph #7.3.2.10 (CIPOLICY)')
if mibBuilder.loadTexts: xdsl2ChConfProfInitPolicy.setStatus('current')
if mibBuilder.loadTexts: xdsl2ChConfProfInitPolicy.setDescription('Channel Initialization Policy Selection (CIPOLICY). This optional parameter indicates which policy shall be applied to determine the transceiver configuration parameters at initialization. Those policies are defined in the respective Recommendations.')
xdsl2ChConfProfRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 5, 2, 1, 1, 25), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xdsl2ChConfProfRowStatus.setStatus('current')
if mibBuilder.loadTexts: xdsl2ChConfProfRowStatus.setDescription("This object is used to create a new row or to modify or delete an existing row in this table. A profile is activated by setting this object to 'active'. Before a profile can be deleted or taken out of service (by setting this object to 'destroy' or 'notInService'), it MUST be first unreferenced from all associated templates. A row in xdsl2ChConfProfTable is said to be unreferenced when there is no instance of xdsl2LConfTempChan1ConfProfile, xdsl2LConfTempChan2ConfProfile, xdsl2LConfTempChan3ConfProfile, or xdsl2LConfTempChan4ConfProfile that refers to the row.")
xdsl2LineAlarmConfTemplateTable = MibTable((1, 3, 6, 1, 2, 1, 10, 251, 1, 5, 3, 1), )
if mibBuilder.loadTexts: xdsl2LineAlarmConfTemplateTable.setStatus('current')
if mibBuilder.loadTexts: xdsl2LineAlarmConfTemplateTable.setDescription('The table xdsl2LineAlarConfTemplateTable contains DSL line alarm configuration templates. Entries in this table MUST be maintained in a persistent manner.')
xdsl2LineAlarmConfTemplateEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 251, 1, 5, 3, 1, 1), ).setIndexNames((0, "VDSL2-LINE-MIB", "xdsl2LAlarmConfTempTemplateName"))
if mibBuilder.loadTexts: xdsl2LineAlarmConfTemplateEntry.setStatus('current')
if mibBuilder.loadTexts: xdsl2LineAlarmConfTemplateEntry.setDescription("A default template with an index of 'DEFVAL' will always exist, and its parameters will be set to vendor-specific values, unless otherwise specified in this document.")
xdsl2LAlarmConfTempTemplateName = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 5, 3, 1, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: xdsl2LAlarmConfTempTemplateName.setStatus('current')
if mibBuilder.loadTexts: xdsl2LAlarmConfTempTemplateName.setDescription('This object identifies a row in this table.')
xdsl2LAlarmConfTempLineProfile = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 5, 3, 1, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)).clone('DEFVAL')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xdsl2LAlarmConfTempLineProfile.setReference('DSL Forum TR-129, paragraph #8.2')
if mibBuilder.loadTexts: xdsl2LAlarmConfTempLineProfile.setStatus('current')
if mibBuilder.loadTexts: xdsl2LAlarmConfTempLineProfile.setDescription('The value of this object identifies the row in the DSL Line Thresholds Configuration Profile Table (xdsl2LineAlarmConfProfileTable) that applies to this line.')
xdsl2LAlarmConfTempChan1ConfProfile = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 5, 3, 1, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)).clone('DEFVAL')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xdsl2LAlarmConfTempChan1ConfProfile.setReference('DSL Forum TR-129, paragraph #8.4')
if mibBuilder.loadTexts: xdsl2LAlarmConfTempChan1ConfProfile.setStatus('current')
if mibBuilder.loadTexts: xdsl2LAlarmConfTempChan1ConfProfile.setDescription('The value of this object identifies the row in the DSL Channel Thresholds Configuration Profile Table (xdsl2ChAlarmConfProfileTable) that applies for DSL bearer channel #1. The channel profile name specified here MUST match the name of an existing row in the xdsl2ChAlarmConfProfileTable table.')
xdsl2LAlarmConfTempChan2ConfProfile = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 5, 3, 1, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xdsl2LAlarmConfTempChan2ConfProfile.setReference('DSL Forum TR-129, paragraph #8.4')
if mibBuilder.loadTexts: xdsl2LAlarmConfTempChan2ConfProfile.setStatus('current')
if mibBuilder.loadTexts: xdsl2LAlarmConfTempChan2ConfProfile.setDescription('The value of this object identifies the row in the DSL Channel Thresholds Configuration Profile Table (xdsl2ChAlarmConfProfileTable) that applies for DSL bearer channel #2. The channel profile name specified here MUST match the name of an existing row in the xdsl2ChAlarmConfProfileTable table. If the channel is unused, then the object is set to a zero-length string.')
xdsl2LAlarmConfTempChan3ConfProfile = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 5, 3, 1, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xdsl2LAlarmConfTempChan3ConfProfile.setReference('DSL Forum TR-129, paragraph #8.4')
if mibBuilder.loadTexts: xdsl2LAlarmConfTempChan3ConfProfile.setStatus('current')
if mibBuilder.loadTexts: xdsl2LAlarmConfTempChan3ConfProfile.setDescription('The value of this object identifies the row in the DSL Channel Thresholds Configuration Profile Table (xdsl2ChAlarmConfProfileTable) that applies for DSL bearer channel #3. The channel profile name specified here MUST match the name of an existing row in the xdsl2ChAlarmConfProfileTable table. This object may be set to a non-zero-length string only if xdsl2LAlarmConfTempChan2ConfProfile contains a non-zero-length string.')
xdsl2LAlarmConfTempChan4ConfProfile = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 5, 3, 1, 1, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xdsl2LAlarmConfTempChan4ConfProfile.setReference('DSL Forum TR-129, paragraph #8.4')
if mibBuilder.loadTexts: xdsl2LAlarmConfTempChan4ConfProfile.setStatus('current')
if mibBuilder.loadTexts: xdsl2LAlarmConfTempChan4ConfProfile.setDescription('The value of this object identifies the row in the DSL Channel Thresholds Configuration Profile Table (xdsl2ChAlarmConfProfileTable) that applies for DSL bearer channel #4. The channel profile name specified here MUST match the name of an existing row in the xdsl2ChAlarmConfProfileTable table. This object may be set to a non-zero-length string only if xdsl2LAlarmConfTempChan3ConfProfile contains a non-zero-length string.')
xdsl2LAlarmConfTempRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 5, 3, 1, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xdsl2LAlarmConfTempRowStatus.setStatus('current')
if mibBuilder.loadTexts: xdsl2LAlarmConfTempRowStatus.setDescription("This object is used to create a new row or to modify or delete an existing row in this table. A template is activated by setting this object to 'active'. Before a template can be deleted or taken out of service (by setting this object to 'destroy' or 'notInService'), it MUST be first unreferenced from all associated lines. A row in this table is said to be unreferenced when there is no instance of xdsl2LineAlarmConfTemplate that refers to the row.")
xdsl2LineAlarmConfProfileTable = MibTable((1, 3, 6, 1, 2, 1, 10, 251, 1, 5, 3, 2), )
if mibBuilder.loadTexts: xdsl2LineAlarmConfProfileTable.setStatus('current')
if mibBuilder.loadTexts: xdsl2LineAlarmConfProfileTable.setDescription('The table xdsl2LineAlarmConfProfileTable contains DSL line performance threshold values. If a performance counter exceeds the threshold value specified in this table, then the SNMP agent will issue a threshold trap. Each performance counter has a unique trap type (see NOTIFICATION-TYPE definitions below). One trap will be sent per interval, per interface, per trap type. A value of 0 will disable the trap. Entries in this table MUST be maintained in a persistent manner.')
xdsl2LineAlarmConfProfileEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 251, 1, 5, 3, 2, 1), ).setIndexNames((0, "VDSL2-LINE-MIB", "xdsl2LineAlarmConfProfileName"))
if mibBuilder.loadTexts: xdsl2LineAlarmConfProfileEntry.setStatus('current')
if mibBuilder.loadTexts: xdsl2LineAlarmConfProfileEntry.setDescription("A default profile with an index of 'DEFVAL' will always exist, and its parameters will be set to vendor-specific values, unless otherwise specified in this document.")
xdsl2LineAlarmConfProfileName = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 5, 3, 2, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: xdsl2LineAlarmConfProfileName.setStatus('current')
if mibBuilder.loadTexts: xdsl2LineAlarmConfProfileName.setDescription('This object identifies a row in this table.')
xdsl2LineAlarmConfProfileXtucThresh15MinFecs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 5, 3, 2, 1, 2), HCPerfIntervalThreshold()).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: xdsl2LineAlarmConfProfileXtucThresh15MinFecs.setReference('ITU-T G.997.1, paragraph #7.2.7.2')
if mibBuilder.loadTexts: xdsl2LineAlarmConfProfileXtucThresh15MinFecs.setStatus('current')
if mibBuilder.loadTexts: xdsl2LineAlarmConfProfileXtucThresh15MinFecs.setDescription('A threshold for the xdsl2PMLCurr15MFecs counter, when xdsl2PMLCurrUnit is xtuc {1}. The value 0 means that no threshold is specified for the associated counter.')
xdsl2LineAlarmConfProfileXtucThresh15MinEs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 5, 3, 2, 1, 3), HCPerfIntervalThreshold()).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: xdsl2LineAlarmConfProfileXtucThresh15MinEs.setReference('ITU-T G.997.1, paragraph #7.2.7.2')
if mibBuilder.loadTexts: xdsl2LineAlarmConfProfileXtucThresh15MinEs.setStatus('current')
if mibBuilder.loadTexts: xdsl2LineAlarmConfProfileXtucThresh15MinEs.setDescription('A threshold for the xdsl2PMLCurr15MEs counter, when xdsl2PMLCurrUnit is xtuc {1}. The value 0 means that no threshold is specified for the associated counter.')
xdsl2LineAlarmConfProfileXtucThresh15MinSes = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 5, 3, 2, 1, 4), HCPerfIntervalThreshold()).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: xdsl2LineAlarmConfProfileXtucThresh15MinSes.setReference('ITU-T G.997.1, paragraph #7.2.7.2')
if mibBuilder.loadTexts: xdsl2LineAlarmConfProfileXtucThresh15MinSes.setStatus('current')
if mibBuilder.loadTexts: xdsl2LineAlarmConfProfileXtucThresh15MinSes.setDescription('A threshold for the xdsl2PMLCurr15MSes counter, when xdsl2PMLCurrUnit is xtuc {1}. The value 0 means that no threshold is specified for the associated counter.')
xdsl2LineAlarmConfProfileXtucThresh15MinLoss = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 5, 3, 2, 1, 5), HCPerfIntervalThreshold()).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: xdsl2LineAlarmConfProfileXtucThresh15MinLoss.setReference('ITU-T G.997.1, paragraph #7.2.7.2')
if mibBuilder.loadTexts: xdsl2LineAlarmConfProfileXtucThresh15MinLoss.setStatus('current')
if mibBuilder.loadTexts: xdsl2LineAlarmConfProfileXtucThresh15MinLoss.setDescription('A threshold for the xdsl2PMLCurr15MLoss counter, when xdsl2PMLCurrUnit is xtuc {1}. The value 0 means that no threshold is specified for the associated counter.')
xdsl2LineAlarmConfProfileXtucThresh15MinUas = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 5, 3, 2, 1, 6), HCPerfIntervalThreshold()).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: xdsl2LineAlarmConfProfileXtucThresh15MinUas.setReference('ITU-T G.997.1, paragraph #7.2.7.2')
if mibBuilder.loadTexts: xdsl2LineAlarmConfProfileXtucThresh15MinUas.setStatus('current')
if mibBuilder.loadTexts: xdsl2LineAlarmConfProfileXtucThresh15MinUas.setDescription('A threshold for the xdsl2PMLCurr15MUas counter, when xdsl2PMLCurrUnit is xtuc {1}. The value 0 means that no threshold is specified for the associated counter.')
xdsl2LineAlarmConfProfileXturThresh15MinFecs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 5, 3, 2, 1, 7), HCPerfIntervalThreshold()).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: xdsl2LineAlarmConfProfileXturThresh15MinFecs.setReference('ITU-T G.997.1, paragraph #7.2.7.2')
if mibBuilder.loadTexts: xdsl2LineAlarmConfProfileXturThresh15MinFecs.setStatus('current')
if mibBuilder.loadTexts: xdsl2LineAlarmConfProfileXturThresh15MinFecs.setDescription('A threshold for the xdsl2PMLCurr15MFecs counter, when xdsl2PMLCurrUnit is xtur {2}. The value 0 means that no threshold is specified for the associated counter.')
xdsl2LineAlarmConfProfileXturThresh15MinEs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 5, 3, 2, 1, 8), HCPerfIntervalThreshold()).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: xdsl2LineAlarmConfProfileXturThresh15MinEs.setReference('ITU-T G.997.1, paragraph #7.2.7.2')
if mibBuilder.loadTexts: xdsl2LineAlarmConfProfileXturThresh15MinEs.setStatus('current')
if mibBuilder.loadTexts: xdsl2LineAlarmConfProfileXturThresh15MinEs.setDescription('A threshold for the xdsl2PMLCurr15MEs counter, when xdsl2PMLCurrUnit is xtur {2}. The value 0 means that no threshold is specified for the associated counter.')
xdsl2LineAlarmConfProfileXturThresh15MinSes = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 5, 3, 2, 1, 9), HCPerfIntervalThreshold()).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: xdsl2LineAlarmConfProfileXturThresh15MinSes.setReference('ITU-T G.997.1, paragraph #7.2.7.2')
if mibBuilder.loadTexts: xdsl2LineAlarmConfProfileXturThresh15MinSes.setStatus('current')
if mibBuilder.loadTexts: xdsl2LineAlarmConfProfileXturThresh15MinSes.setDescription('A threshold for the xdsl2PMLCurr15MSes counter, when xdsl2PMLCurrUnit is xtur {2}. The value 0 means that no threshold is specified for the associated counter.')
xdsl2LineAlarmConfProfileXturThresh15MinLoss = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 5, 3, 2, 1, 10), HCPerfIntervalThreshold()).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: xdsl2LineAlarmConfProfileXturThresh15MinLoss.setReference('ITU-T G.997.1, paragraph #7.2.7.2')
if mibBuilder.loadTexts: xdsl2LineAlarmConfProfileXturThresh15MinLoss.setStatus('current')
if mibBuilder.loadTexts: xdsl2LineAlarmConfProfileXturThresh15MinLoss.setDescription('A threshold for the xdsl2PMLCurr15MLoss counter, when xdsl2PMLCurrUnit is xtur {2}. The value 0 means that no threshold is specified for the associated counter.')
xdsl2LineAlarmConfProfileXturThresh15MinUas = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 5, 3, 2, 1, 11), HCPerfIntervalThreshold()).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: xdsl2LineAlarmConfProfileXturThresh15MinUas.setReference('ITU-T G.997.1, paragraph #7.2.7.2')
if mibBuilder.loadTexts: xdsl2LineAlarmConfProfileXturThresh15MinUas.setStatus('current')
if mibBuilder.loadTexts: xdsl2LineAlarmConfProfileXturThresh15MinUas.setDescription('A threshold for the xdsl2PMLCurr15MUas counter, when xdsl2PMLCurrUnit is xtur {2}. The value 0 means that no threshold is specified for the associated counter.')
xdsl2LineAlarmConfProfileThresh15MinFailedFullInt = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 5, 3, 2, 1, 12), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xdsl2LineAlarmConfProfileThresh15MinFailedFullInt.setReference('ITU-T G.997.1, paragraph #7.2.7.2')
if mibBuilder.loadTexts: xdsl2LineAlarmConfProfileThresh15MinFailedFullInt.setStatus('current')
if mibBuilder.loadTexts: xdsl2LineAlarmConfProfileThresh15MinFailedFullInt.setDescription('A threshold for the xdsl2PMLInitCurr15MfailedFullInits counter. The value 0 means that no threshold is specified for the associated counter.')
xdsl2LineAlarmConfProfileThresh15MinFailedShrtInt = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 5, 3, 2, 1, 13), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xdsl2LineAlarmConfProfileThresh15MinFailedShrtInt.setReference('ITU-T G.997.1, paragraph #7.2.7.2')
if mibBuilder.loadTexts: xdsl2LineAlarmConfProfileThresh15MinFailedShrtInt.setStatus('current')
if mibBuilder.loadTexts: xdsl2LineAlarmConfProfileThresh15MinFailedShrtInt.setDescription('A threshold for the xdsl2PMLInitCurr15MFailedShortInits counter. The value 0 means that no threshold is specified for the associated counter.')
xdsl2LineAlarmConfProfileRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 5, 3, 2, 1, 14), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xdsl2LineAlarmConfProfileRowStatus.setStatus('current')
if mibBuilder.loadTexts: xdsl2LineAlarmConfProfileRowStatus.setDescription("This object is used to create a new row or to modify or delete an existing row in this table. A profile is activated by setting this object to 'active'. Before a profile can be deleted or taken out of service (by setting this object to 'destroy' or 'notInService'), it MUST be first unreferenced from all associated templates. A row in this table is said to be unreferenced when there is no instance of xdsl2LAlarmConfTempLineProfile that refers to the row.")
xdsl2ChAlarmConfProfileTable = MibTable((1, 3, 6, 1, 2, 1, 10, 251, 1, 5, 3, 3), )
if mibBuilder.loadTexts: xdsl2ChAlarmConfProfileTable.setStatus('current')
if mibBuilder.loadTexts: xdsl2ChAlarmConfProfileTable.setDescription('The table xdsl2ChAlarmConfProfileTable contains DSL channel performance threshold values. If a performance counter exceeds the threshold value specified in this table, then the SNMP agent will issue a threshold trap. Each performance counter has a unique trap type (see NOTIFICATION-TYPE definitions below). One trap will be sent per interval per interface per trap type. A value of 0 will disable the trap. Entries in this table MUST be maintained in a persistent manner.')
xdsl2ChAlarmConfProfileEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 251, 1, 5, 3, 3, 1), ).setIndexNames((0, "VDSL2-LINE-MIB", "xdsl2ChAlarmConfProfileName"))
if mibBuilder.loadTexts: xdsl2ChAlarmConfProfileEntry.setStatus('current')
if mibBuilder.loadTexts: xdsl2ChAlarmConfProfileEntry.setDescription("A default profile with an index of 'DEFVAL' will always exist, and its parameters will be set to vendor-specific values, unless otherwise specified in this document.")
xdsl2ChAlarmConfProfileName = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 5, 3, 3, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: xdsl2ChAlarmConfProfileName.setStatus('current')
if mibBuilder.loadTexts: xdsl2ChAlarmConfProfileName.setDescription('This object identifies a row in this table.')
xdsl2ChAlarmConfProfileXtucThresh15MinCodingViolations = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 5, 3, 3, 1, 2), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xdsl2ChAlarmConfProfileXtucThresh15MinCodingViolations.setReference('ITU-T G.997.1, paragraph #7.2.7.2')
if mibBuilder.loadTexts: xdsl2ChAlarmConfProfileXtucThresh15MinCodingViolations.setStatus('current')
if mibBuilder.loadTexts: xdsl2ChAlarmConfProfileXtucThresh15MinCodingViolations.setDescription('A threshold for the xdsl2PMChCurr15MCodingViolations counter, when xdsl2PMChCurrUnit is xtuc {1}. The value 0 means that no threshold is specified for the associated counter.')
xdsl2ChAlarmConfProfileXtucThresh15MinCorrected = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 5, 3, 3, 1, 3), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xdsl2ChAlarmConfProfileXtucThresh15MinCorrected.setReference('ITU-T G.997.1, paragraph #7.2.7.2')
if mibBuilder.loadTexts: xdsl2ChAlarmConfProfileXtucThresh15MinCorrected.setStatus('current')
if mibBuilder.loadTexts: xdsl2ChAlarmConfProfileXtucThresh15MinCorrected.setDescription('A threshold for the xdsl2PMChCurr15MCorrectedBlocks counter, when xdsl2PMChCurrUnit is xtuc {1}. The value 0 means that no threshold is specified for the associated counter.')
xdsl2ChAlarmConfProfileXturThresh15MinCodingViolations = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 5, 3, 3, 1, 4), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xdsl2ChAlarmConfProfileXturThresh15MinCodingViolations.setReference('ITU-T G.997.1, paragraph #7.2.7.2')
if mibBuilder.loadTexts: xdsl2ChAlarmConfProfileXturThresh15MinCodingViolations.setStatus('current')
if mibBuilder.loadTexts: xdsl2ChAlarmConfProfileXturThresh15MinCodingViolations.setDescription('A threshold for the xdsl2PMChCurr15MCodingViolations counter, when xdsl2PMChCurrUnit is xtur {2}. The value 0 means that no threshold is specified for the associated counter.')
xdsl2ChAlarmConfProfileXturThresh15MinCorrected = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 5, 3, 3, 1, 5), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xdsl2ChAlarmConfProfileXturThresh15MinCorrected.setReference('ITU-T G.997.1, paragraph #7.2.7.2')
if mibBuilder.loadTexts: xdsl2ChAlarmConfProfileXturThresh15MinCorrected.setStatus('current')
if mibBuilder.loadTexts: xdsl2ChAlarmConfProfileXturThresh15MinCorrected.setDescription('A threshold for the xdsl2PMChCurr15MCorrectedBlocks counter, when xdsl2PMChCurrUnit is xtur {2}. The value 0 means that no threshold is specified for the associated counter.')
xdsl2ChAlarmConfProfileRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 5, 3, 3, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xdsl2ChAlarmConfProfileRowStatus.setStatus('current')
if mibBuilder.loadTexts: xdsl2ChAlarmConfProfileRowStatus.setDescription("This object is used to create a new row or to modify or delete an existing row in this table. A profile is activated by setting this object to 'active'. Before a profile can be deleted or taken out of service (by setting this object to 'destroy' or 'notInService'), it MUST be first unreferenced from all associated templates. A row in xdsl2ChConfProfTable is said to be unreferenced when there is no instance of xdsl2LAlarmConfTempChan1ConfProfile, xdsl2LAlarmConfTempChan2ConfProfile, xdsl2LAlarmConfTempChan3ConfProfile, or xdsl2LAlarmConfTempChan4ConfProfile that refers to the row.")
xdsl2PMLineCurrTable = MibTable((1, 3, 6, 1, 2, 1, 10, 251, 1, 4, 1, 1), )
if mibBuilder.loadTexts: xdsl2PMLineCurrTable.setStatus('current')
if mibBuilder.loadTexts: xdsl2PMLineCurrTable.setDescription('The table xdsl2PMLineCurrTable contains current Performance Monitoring results for DSL lines.')
xdsl2PMLineCurrEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 251, 1, 4, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "VDSL2-LINE-MIB", "xdsl2PMLCurrUnit"))
if mibBuilder.loadTexts: xdsl2PMLineCurrEntry.setStatus('current')
if mibBuilder.loadTexts: xdsl2PMLineCurrEntry.setDescription('One index of this table is an interface index where the interface has an ifType of vdsl2(251). A second index of this table is the termination unit.')
xdsl2PMLCurrUnit = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 4, 1, 1, 1, 1), Xdsl2Unit())
if mibBuilder.loadTexts: xdsl2PMLCurrUnit.setStatus('current')
if mibBuilder.loadTexts: xdsl2PMLCurrUnit.setDescription('The termination unit.')
xdsl2PMLCurr15MValidIntervals = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 4, 1, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdsl2PMLCurr15MValidIntervals.setStatus('current')
if mibBuilder.loadTexts: xdsl2PMLCurr15MValidIntervals.setDescription('The number of 15-minute PM intervals for which data was collected. The value will typically be equal to the maximum number of 15-minute intervals the implementation is planned to store (i.e., beyond the scope of this MIB module) unless the measurement was (re-)started recently, in which case the value will be the number of complete 15-minute intervals for which the agent has at least some data. In certain cases (e.g., in the case where the agent is a proxy), it is possible that some intervals are unavailable. In this case, this interval is the maximum interval number for which data is available.')
xdsl2PMLCurr15MInvalidIntervals = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 4, 1, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdsl2PMLCurr15MInvalidIntervals.setStatus('current')
if mibBuilder.loadTexts: xdsl2PMLCurr15MInvalidIntervals.setDescription('The number of 15-minute PM intervals for which no data is available. The value will typically be zero except in cases where the data for some intervals are not available (e.g., in proxy situations).')
xdsl2PMLCurr15MTimeElapsed = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 4, 1, 1, 1, 4), HCPerfTimeElapsed()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: xdsl2PMLCurr15MTimeElapsed.setStatus('current')
if mibBuilder.loadTexts: xdsl2PMLCurr15MTimeElapsed.setDescription('Total elapsed seconds in this interval.')
xdsl2PMLCurr15MFecs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 4, 1, 1, 1, 5), Counter32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: xdsl2PMLCurr15MFecs.setReference('ITU-T G.997.1, paragraph #7.2.1.1.1 (FECS-L) and paragraph #7.2.1.2.1 (FECS-LFE)')
if mibBuilder.loadTexts: xdsl2PMLCurr15MFecs.setStatus('current')
if mibBuilder.loadTexts: xdsl2PMLCurr15MFecs.setDescription('Count of seconds during this interval that there was at least one FEC correction event for one or more bearer channels in this line. This parameter is inhibited during UAS or SES.')
xdsl2PMLCurr15MEs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 4, 1, 1, 1, 6), Counter32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: xdsl2PMLCurr15MEs.setReference('ITU-T G.997.1, paragraph #7.2.1.1.2 (ES-L) and paragraph #7.2.1.2.2 (ES-LFE)')
if mibBuilder.loadTexts: xdsl2PMLCurr15MEs.setStatus('current')
if mibBuilder.loadTexts: xdsl2PMLCurr15MEs.setDescription('Count of seconds during this interval that there was: xTU-C: CRC-8 >= 1 for one or more bearer channels OR LOS >= 1 OR SEF >=1 OR LPR >= 1. xTU-R: FEBE >= 1 for one or more bearer channels OR LOS-FE >=1 OR RDI >=1 OR LPR-FE >=1. This parameter is inhibited during UAS.')
xdsl2PMLCurr15MSes = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 4, 1, 1, 1, 7), Counter32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: xdsl2PMLCurr15MSes.setReference('ITU-T G.997.1, paragraph #7.2.1.1.3 (SES-L) and paragraph #7.2.1.2.3 (SES-LFE)')
if mibBuilder.loadTexts: xdsl2PMLCurr15MSes.setStatus('current')
if mibBuilder.loadTexts: xdsl2PMLCurr15MSes.setDescription('Count of seconds during this interval that there was: xTU-C: (CRC-8 anomalies in one or more of the received bearer channels) >= 18 OR LOS >= 1 OR SEF >= 1 OR LPR >= 1. xTU-R: (FEBE anomalies in one or more of the received bearer channels) >= 18 OR LOS-FE >= 1 OR RDI >= 1 OR LPR-FE >= 1. This parameter is inhibited during UAS.')
xdsl2PMLCurr15MLoss = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 4, 1, 1, 1, 8), Counter32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: xdsl2PMLCurr15MLoss.setReference('ITU-T G.997.1, paragraph #7.2.1.1.4 (LOSS-L) and paragraph #7.2.1.2.4 (LOSS-LFE)')
if mibBuilder.loadTexts: xdsl2PMLCurr15MLoss.setStatus('current')
if mibBuilder.loadTexts: xdsl2PMLCurr15MLoss.setDescription('Count of seconds during this interval that there was LOS (or LOS-FE for xTU-R).')
xdsl2PMLCurr15MUas = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 4, 1, 1, 1, 9), Counter32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: xdsl2PMLCurr15MUas.setReference('ITU-T G.997.1, paragraph #7.2.1.1.5 (UAS-L) and paragraph #7.2.1.2.5 (UAS-LFE)')
if mibBuilder.loadTexts: xdsl2PMLCurr15MUas.setStatus('current')
if mibBuilder.loadTexts: xdsl2PMLCurr15MUas.setDescription('Count of seconds in Unavailability State during this interval. Unavailability begins at the onset of 10 contiguous severely errored seconds, and ends at the onset of 10 contiguous seconds with no severely errored seconds.')
xdsl2PMLCurr1DayValidIntervals = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 4, 1, 1, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdsl2PMLCurr1DayValidIntervals.setStatus('current')
if mibBuilder.loadTexts: xdsl2PMLCurr1DayValidIntervals.setDescription('The number of 24-hour PM intervals for which data was collected. The value will typically be equal to the maximum number of 24-hour intervals the implementation is planned to store (i.e., beyond the scope of this MIB module) unless the measurement was (re-)started recently, in which case the value will be the number of complete 24-hour intervals for which the agent has at least some data. In certain cases (e.g., in the case where the agent is a proxy), it is possible that some intervals are unavailable. In this case, this interval is the maximum interval number for which data is available.')
xdsl2PMLCurr1DayInvalidIntervals = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 4, 1, 1, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdsl2PMLCurr1DayInvalidIntervals.setStatus('current')
if mibBuilder.loadTexts: xdsl2PMLCurr1DayInvalidIntervals.setDescription('The number of 24-hour PM intervals for which no data is available. The value will typically be zero except in cases where the data for some intervals are not available (e.g., in proxy situations).')
xdsl2PMLCurr1DayTimeElapsed = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 4, 1, 1, 1, 12), HCPerfTimeElapsed()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: xdsl2PMLCurr1DayTimeElapsed.setStatus('current')
if mibBuilder.loadTexts: xdsl2PMLCurr1DayTimeElapsed.setDescription('Total elapsed seconds in this interval.')
xdsl2PMLCurr1DayFecs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 4, 1, 1, 1, 13), Counter32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: xdsl2PMLCurr1DayFecs.setReference('ITU-T G.997.1, paragraph #7.2.1.1.1 (FECS-L) and paragraph #7.2.1.2.1 (FECS-LFE)')
if mibBuilder.loadTexts: xdsl2PMLCurr1DayFecs.setStatus('current')
if mibBuilder.loadTexts: xdsl2PMLCurr1DayFecs.setDescription('Count of seconds during this interval that there was at least one FEC correction event for one or more bearer channels in this line. This parameter is inhibited during UAS or SES.')
xdsl2PMLCurr1DayEs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 4, 1, 1, 1, 14), Counter32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: xdsl2PMLCurr1DayEs.setReference('ITU-T G.997.1, paragraph #7.2.1.1.2 (ES-L) and paragraph #7.2.1.2.2 (ES-LFE)')
if mibBuilder.loadTexts: xdsl2PMLCurr1DayEs.setStatus('current')
if mibBuilder.loadTexts: xdsl2PMLCurr1DayEs.setDescription('Count of seconds during this interval that there was: xTU-C: CRC-8 >= 1 for one or more bearer channels OR LOS >= 1 OR SEF >= 1 OR LPR >= 1. xTU-R: FEBE >= 1 for one or more bearer channels OR LOS-FE >= 1 OR RDI >= 1 OR LPR-FE >= 1. This parameter is inhibited during UAS.')
xdsl2PMLCurr1DaySes = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 4, 1, 1, 1, 15), Counter32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: xdsl2PMLCurr1DaySes.setReference('ITU-T G.997.1, paragraph #7.2.1.1.3 (SES-L) and paragraph #7.2.1.2.3 (SES-LFE)')
if mibBuilder.loadTexts: xdsl2PMLCurr1DaySes.setStatus('current')
if mibBuilder.loadTexts: xdsl2PMLCurr1DaySes.setDescription('Count of seconds during this interval that there was: xTU-C: (CRC-8 anomalies in one or more of the received bearer channels) >= 18 OR LOS >= 1 OR SEF >= 1 OR LPR >= 1. xTU-R: (FEBE anomalies in one or more of the received bearer channels) >= 18 OR LOS-FE >= 1. OR RDI >= 1 OR LPR-FE >= 1. This parameter is inhibited during UAS.')
xdsl2PMLCurr1DayLoss = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 4, 1, 1, 1, 16), Counter32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: xdsl2PMLCurr1DayLoss.setReference('ITU-T G.997.1, paragraph #7.2.1.1.4 (LOSS-L) and paragraph #7.2.1.2.4 (LOSS-LFE)')
if mibBuilder.loadTexts: xdsl2PMLCurr1DayLoss.setStatus('current')
if mibBuilder.loadTexts: xdsl2PMLCurr1DayLoss.setDescription('Count of seconds during this interval that there was LOS (or LOS-FE for xTU-R).')
xdsl2PMLCurr1DayUas = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 4, 1, 1, 1, 17), Counter32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: xdsl2PMLCurr1DayUas.setReference('ITU-T G.997.1, paragraph #7.2.1.1.5 (UAS-L) and paragraph #7.2.1.2.5 (UAS-LFE)')
if mibBuilder.loadTexts: xdsl2PMLCurr1DayUas.setStatus('current')
if mibBuilder.loadTexts: xdsl2PMLCurr1DayUas.setDescription('Count of seconds in Unavailability State during this interval. Unavailability begins at the onset of 10 contiguous severely errored seconds, and ends at the onset of 10 contiguous seconds with no severely errored seconds.')
xdsl2PMLineInitCurrTable = MibTable((1, 3, 6, 1, 2, 1, 10, 251, 1, 4, 1, 2), )
if mibBuilder.loadTexts: xdsl2PMLineInitCurrTable.setStatus('current')
if mibBuilder.loadTexts: xdsl2PMLineInitCurrTable.setDescription('The table xdsl2PMLineInitCurrTable contains current initialization counters for DSL lines.')
xdsl2PMLineInitCurrEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 251, 1, 4, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: xdsl2PMLineInitCurrEntry.setStatus('current')
if mibBuilder.loadTexts: xdsl2PMLineInitCurrEntry.setDescription('The index of this table is an interface index where the interface has an ifType of vdsl2(251).')
xdsl2PMLInitCurr15MValidIntervals = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 4, 1, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdsl2PMLInitCurr15MValidIntervals.setStatus('current')
if mibBuilder.loadTexts: xdsl2PMLInitCurr15MValidIntervals.setDescription('The number of 15-minute PM intervals for which data was collected. The value will typically be equal to the maximum number of 15-minute intervals the implementation is planned to store (i.e., beyond the scope of this MIB module) unless the measurement was (re-)started recently, in which case the value will be the number of complete 15-minute intervals for which the agent has at least some data. In certain cases (e.g., in the case where the agent is a proxy), it is possible that some intervals are unavailable. In this case, this interval is the maximum interval number for which data is available.')
xdsl2PMLInitCurr15MInvalidIntervals = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 4, 1, 2, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdsl2PMLInitCurr15MInvalidIntervals.setStatus('current')
if mibBuilder.loadTexts: xdsl2PMLInitCurr15MInvalidIntervals.setDescription('The number of 15-minute PM intervals for which no data is available. The value will typically be zero except in cases where the data for some intervals are not available (e.g., in proxy situations).')
xdsl2PMLInitCurr15MTimeElapsed = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 4, 1, 2, 1, 3), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: xdsl2PMLInitCurr15MTimeElapsed.setStatus('current')
if mibBuilder.loadTexts: xdsl2PMLInitCurr15MTimeElapsed.setDescription('Total elapsed seconds in this interval.')
xdsl2PMLInitCurr15MFullInits = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 4, 1, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdsl2PMLInitCurr15MFullInits.setReference('ITU-T G.997.1, paragraph #7.2.1.3.1')
if mibBuilder.loadTexts: xdsl2PMLInitCurr15MFullInits.setStatus('current')
if mibBuilder.loadTexts: xdsl2PMLInitCurr15MFullInits.setDescription('Count of full initializations attempted on the line (successful and failed) during this interval.')
xdsl2PMLInitCurr15MFailedFullInits = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 4, 1, 2, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdsl2PMLInitCurr15MFailedFullInits.setReference('ITU-T G.997.1, paragraph #7.2.1.3.2')
if mibBuilder.loadTexts: xdsl2PMLInitCurr15MFailedFullInits.setStatus('current')
if mibBuilder.loadTexts: xdsl2PMLInitCurr15MFailedFullInits.setDescription('Count of failed full initializations on the line during this interval.')
xdsl2PMLInitCurr15MShortInits = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 4, 1, 2, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdsl2PMLInitCurr15MShortInits.setReference('ITU-T G.997.1, paragraph #7.2.1.3.3')
if mibBuilder.loadTexts: xdsl2PMLInitCurr15MShortInits.setStatus('current')
if mibBuilder.loadTexts: xdsl2PMLInitCurr15MShortInits.setDescription('Count of short initializations attempted on the line (successful and failed) during this interval.')
xdsl2PMLInitCurr15MFailedShortInits = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 4, 1, 2, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdsl2PMLInitCurr15MFailedShortInits.setReference('ITU-T G.997.1, paragraph #7.2.1.3.4')
if mibBuilder.loadTexts: xdsl2PMLInitCurr15MFailedShortInits.setStatus('current')
if mibBuilder.loadTexts: xdsl2PMLInitCurr15MFailedShortInits.setDescription('Count of failed short initializations on the line during this interval.')
xdsl2PMLInitCurr1DayValidIntervals = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 4, 1, 2, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdsl2PMLInitCurr1DayValidIntervals.setStatus('current')
if mibBuilder.loadTexts: xdsl2PMLInitCurr1DayValidIntervals.setDescription('The number of 24-hour PM intervals for which data was collected. The value will typically be equal to the maximum number of 24-hour intervals the implementation is planned to store (i.e., beyond the scope of this MIB module) unless the measurement was (re-)started recently, in which case the value will be the number of complete 24-hour intervals for which the agent has at least some data. In certain cases (e.g., in the case where the agent is a proxy), it is possible that some intervals are unavailable. In this case, this interval is the maximum interval number for which data is available.')
xdsl2PMLInitCurr1DayInvalidIntervals = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 4, 1, 2, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdsl2PMLInitCurr1DayInvalidIntervals.setStatus('current')
if mibBuilder.loadTexts: xdsl2PMLInitCurr1DayInvalidIntervals.setDescription('The number of 24-hour PM intervals for which no data is available. The value will typically be zero except in cases where the data for some intervals are not available (e.g., in proxy situations).')
xdsl2PMLInitCurr1DayTimeElapsed = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 4, 1, 2, 1, 10), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: xdsl2PMLInitCurr1DayTimeElapsed.setStatus('current')
if mibBuilder.loadTexts: xdsl2PMLInitCurr1DayTimeElapsed.setDescription('Total elapsed seconds in this interval.')
xdsl2PMLInitCurr1DayFullInits = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 4, 1, 2, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdsl2PMLInitCurr1DayFullInits.setReference('ITU-T G.997.1, paragraph #7.2.1.3.1')
if mibBuilder.loadTexts: xdsl2PMLInitCurr1DayFullInits.setStatus('current')
if mibBuilder.loadTexts: xdsl2PMLInitCurr1DayFullInits.setDescription('Count of full initializations attempted on the line (successful and failed) during this interval.')
xdsl2PMLInitCurr1DayFailedFullInits = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 4, 1, 2, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdsl2PMLInitCurr1DayFailedFullInits.setReference('ITU-T G.997.1, paragraph #7.2.1.3.2')
if mibBuilder.loadTexts: xdsl2PMLInitCurr1DayFailedFullInits.setStatus('current')
if mibBuilder.loadTexts: xdsl2PMLInitCurr1DayFailedFullInits.setDescription('Count of failed full initializations on the line during this interval.')
xdsl2PMLInitCurr1DayShortInits = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 4, 1, 2, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdsl2PMLInitCurr1DayShortInits.setReference('ITU-T G.997.1, paragraph #7.2.1.3.3')
if mibBuilder.loadTexts: xdsl2PMLInitCurr1DayShortInits.setStatus('current')
if mibBuilder.loadTexts: xdsl2PMLInitCurr1DayShortInits.setDescription('Count of short initializations attempted on the line (successful and failed) during this interval.')
xdsl2PMLInitCurr1DayFailedShortInits = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 4, 1, 2, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdsl2PMLInitCurr1DayFailedShortInits.setReference('ITU-T G.997.1, paragraph #7.2.1.3.4')
if mibBuilder.loadTexts: xdsl2PMLInitCurr1DayFailedShortInits.setStatus('current')
if mibBuilder.loadTexts: xdsl2PMLInitCurr1DayFailedShortInits.setDescription('Count of failed short initializations on the line during this interval.')
xdsl2PMLineHist15MinTable = MibTable((1, 3, 6, 1, 2, 1, 10, 251, 1, 4, 1, 3), )
if mibBuilder.loadTexts: xdsl2PMLineHist15MinTable.setStatus('current')
if mibBuilder.loadTexts: xdsl2PMLineHist15MinTable.setDescription('The table xdsl2PMLineHist15MinTable contains PM line history for 15-minute intervals of DSL line.')
xdsl2PMLineHist15MinEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 251, 1, 4, 1, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "VDSL2-LINE-MIB", "xdsl2PMLHist15MUnit"), (0, "VDSL2-LINE-MIB", "xdsl2PMLHist15MInterval"))
if mibBuilder.loadTexts: xdsl2PMLineHist15MinEntry.setStatus('current')
if mibBuilder.loadTexts: xdsl2PMLineHist15MinEntry.setDescription('One index of this table is an interface index where the interface has an ifType of vdsl2(251). A second index of this table is the transmission unit. The third index is the interval number.')
xdsl2PMLHist15MUnit = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 4, 1, 3, 1, 1), Xdsl2Unit())
if mibBuilder.loadTexts: xdsl2PMLHist15MUnit.setStatus('current')
if mibBuilder.loadTexts: xdsl2PMLHist15MUnit.setDescription('The termination unit.')
xdsl2PMLHist15MInterval = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 4, 1, 3, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: xdsl2PMLHist15MInterval.setStatus('current')
if mibBuilder.loadTexts: xdsl2PMLHist15MInterval.setDescription('The interval number.')
xdsl2PMLHist15MMonitoredTime = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 4, 1, 3, 1, 3), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: xdsl2PMLHist15MMonitoredTime.setStatus('current')
if mibBuilder.loadTexts: xdsl2PMLHist15MMonitoredTime.setDescription('Total seconds monitored in this interval.')
xdsl2PMLHist15MFecs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 4, 1, 3, 1, 4), Counter32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: xdsl2PMLHist15MFecs.setReference('ITU-T G.997.1, paragraph #7.2.1.1.1 (FECS-L) and paragraph #7.2.1.2.1 (FECS-LFE)')
if mibBuilder.loadTexts: xdsl2PMLHist15MFecs.setStatus('current')
if mibBuilder.loadTexts: xdsl2PMLHist15MFecs.setDescription('Count of seconds during this interval that there was at least one FEC correction event for one or more bearer channels in this line. This parameter is inhibited during UAS or SES.')
xdsl2PMLHist15MEs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 4, 1, 3, 1, 5), Counter32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: xdsl2PMLHist15MEs.setReference('ITU-T G.997.1, paragraph #7.2.1.1.2 (ES-L) and paragraph #7.2.1.2.2 (ES-LFE)')
if mibBuilder.loadTexts: xdsl2PMLHist15MEs.setStatus('current')
if mibBuilder.loadTexts: xdsl2PMLHist15MEs.setDescription('Count of seconds during this interval that there was: xTU-C: CRC-8 >= 1 for one or more bearer channels OR LOS >= 1 OR SEF >= 1 OR LPR >= 1. xTU-R: FEBE >= 1 for one or more bearer channels OR LOS-FE >= 1 OR RDI >= 1 OR LPR-FE >= 1. This parameter is inhibited during UAS.')
xdsl2PMLHist15MSes = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 4, 1, 3, 1, 6), Counter32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: xdsl2PMLHist15MSes.setReference('ITU-T G.997.1, paragraph #7.2.1.1.3 (SES-L) and paragraph #7.2.1.2.3 (SES-LFE)')
if mibBuilder.loadTexts: xdsl2PMLHist15MSes.setStatus('current')
if mibBuilder.loadTexts: xdsl2PMLHist15MSes.setDescription('Count of seconds during this interval that there was: xTU-C: (CRC-8 anomalies in one or more of the received bearer channels) >= 18 OR LOS >= 1 OR SEF >= 1 OR LPR >= 1. xTU-R: (FEBE anomalies in one or more of the received bearer channels) >= 18 OR LOS-FE >= 1 OR RDI >= 1 OR LPR-FE >= 1. This parameter is inhibited during UAS.')
xdsl2PMLHist15MLoss = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 4, 1, 3, 1, 7), Counter32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: xdsl2PMLHist15MLoss.setReference('ITU-T G.997.1, paragraph #7.2.1.1.4 (LOSS-L) and paragraph #7.2.1.2.4 (LOSS-LFE)')
if mibBuilder.loadTexts: xdsl2PMLHist15MLoss.setStatus('current')
if mibBuilder.loadTexts: xdsl2PMLHist15MLoss.setDescription('Count of seconds during this interval that there was LOS (or LOS-FE for xTU-R).')
xdsl2PMLHist15MUas = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 4, 1, 3, 1, 8), Counter32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: xdsl2PMLHist15MUas.setReference('ITU-T G.997.1, paragraph #7.2.1.1.5 (UAS-L) and paragraph #7.2.1.2.5 (UAS-LFE)')
if mibBuilder.loadTexts: xdsl2PMLHist15MUas.setStatus('current')
if mibBuilder.loadTexts: xdsl2PMLHist15MUas.setDescription('Count of seconds in Unavailability State during this interval. Unavailability begins at the onset of 10 contiguous severely errored seconds, and ends at the onset of 10 contiguous seconds with no severely errored seconds.')
xdsl2PMLHist15MValidInterval = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 4, 1, 3, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdsl2PMLHist15MValidInterval.setStatus('current')
if mibBuilder.loadTexts: xdsl2PMLHist15MValidInterval.setDescription('This variable indicates if the data for this interval is valid.')
xdsl2PMLineHist1DayTable = MibTable((1, 3, 6, 1, 2, 1, 10, 251, 1, 4, 1, 4), )
if mibBuilder.loadTexts: xdsl2PMLineHist1DayTable.setStatus('current')
if mibBuilder.loadTexts: xdsl2PMLineHist1DayTable.setDescription('The table xdsl2PMLineHist1DayTable contains PM line history for 24-hour intervals of DSL line.')
xdsl2PMLineHist1DayEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 251, 1, 4, 1, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "VDSL2-LINE-MIB", "xdsl2PMLHist1DUnit"), (0, "VDSL2-LINE-MIB", "xdsl2PMLHist1DInterval"))
if mibBuilder.loadTexts: xdsl2PMLineHist1DayEntry.setStatus('current')
if mibBuilder.loadTexts: xdsl2PMLineHist1DayEntry.setDescription('One index of this table is an interface index where the interface has an ifType of vdsl2(251). A second index of this table is the transmission unit.The third index is the interval number.')
xdsl2PMLHist1DUnit = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 4, 1, 4, 1, 1), Xdsl2Unit())
if mibBuilder.loadTexts: xdsl2PMLHist1DUnit.setStatus('current')
if mibBuilder.loadTexts: xdsl2PMLHist1DUnit.setDescription('The termination unit.')
xdsl2PMLHist1DInterval = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 4, 1, 4, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 30)))
if mibBuilder.loadTexts: xdsl2PMLHist1DInterval.setStatus('current')
if mibBuilder.loadTexts: xdsl2PMLHist1DInterval.setDescription('The interval number.')
xdsl2PMLHist1DMonitoredTime = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 4, 1, 4, 1, 3), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: xdsl2PMLHist1DMonitoredTime.setStatus('current')
if mibBuilder.loadTexts: xdsl2PMLHist1DMonitoredTime.setDescription('Total seconds monitored in this interval.')
xdsl2PMLHist1DFecs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 4, 1, 4, 1, 4), Counter32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: xdsl2PMLHist1DFecs.setReference('ITU-T G.997.1, paragraph #7.2.1.1.1 (FECS-L) and paragraph #7.2.1.2.1 (FECS-LFE)')
if mibBuilder.loadTexts: xdsl2PMLHist1DFecs.setStatus('current')
if mibBuilder.loadTexts: xdsl2PMLHist1DFecs.setDescription('Count of seconds during this interval that there was at least one FEC correction event for one or more bearer channels in this line. This parameter is inhibited during UAS or SES.')
xdsl2PMLHist1DEs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 4, 1, 4, 1, 5), Counter32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: xdsl2PMLHist1DEs.setReference('ITU-T G.997.1, paragraph #7.2.1.1.2 (ES-L) and paragraph #7.2.1.2.2 (ES-LFE)')
if mibBuilder.loadTexts: xdsl2PMLHist1DEs.setStatus('current')
if mibBuilder.loadTexts: xdsl2PMLHist1DEs.setDescription('Count of seconds during this interval that there was: xTU-C: CRC-8 >= 1 for one or more bearer channels OR LOS >= 1 OR SEF >= 1 OR LPR >= 1. xTU-R: FEBE >= 1 for one or more bearer channels OR LOS-FE >= 1 OR RDI >= 1 OR LPR-FE >= 1. This parameter is inhibited during UAS.')
xdsl2PMLHist1DSes = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 4, 1, 4, 1, 6), Counter32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: xdsl2PMLHist1DSes.setReference('ITU-T G.997.1, paragraph #7.2.1.1.3 (SES-L) and paragraph #7.2.1.2.3 (SES-LFE)')
if mibBuilder.loadTexts: xdsl2PMLHist1DSes.setStatus('current')
if mibBuilder.loadTexts: xdsl2PMLHist1DSes.setDescription('Count of seconds during this interval that there was: xTU-C: (CRC-8 anomalies in one or more of the received bearer channels) >= 18 OR LOS >= 1 OR SEF >= 1 OR LPR >= 1. xTU-R: (FEBE anomalies in one or more of the received bearer channels) >= 18 OR LOS-FE >= 1 OR RDI >= 1 OR LPR-FE >= 1. This parameter is inhibited during UAS.')
xdsl2PMLHist1DLoss = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 4, 1, 4, 1, 7), Counter32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: xdsl2PMLHist1DLoss.setReference('ITU-T G.997.1, paragraph #7.2.1.1.4 (LOSS-L) and paragraph #7.2.1.2.4 (LOSS-LFE)')
if mibBuilder.loadTexts: xdsl2PMLHist1DLoss.setStatus('current')
if mibBuilder.loadTexts: xdsl2PMLHist1DLoss.setDescription('Count of seconds during this interval that there was LOS (or LOS-FE for xTU-R).')
xdsl2PMLHist1DUas = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 4, 1, 4, 1, 8), Counter32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: xdsl2PMLHist1DUas.setReference('ITU-T G.997.1, paragraph #7.2.1.1.5 (UAS-L) and paragraph #7.2.1.2.5 (UAS-LFE)')
if mibBuilder.loadTexts: xdsl2PMLHist1DUas.setStatus('current')
if mibBuilder.loadTexts: xdsl2PMLHist1DUas.setDescription('Count of seconds in Unavailability State during this interval. Unavailability begins at the onset of 10 contiguous severely errored seconds, and ends at the onset of 10 contiguous seconds with no severely errored seconds.')
xdsl2PMLHist1DValidInterval = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 4, 1, 4, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdsl2PMLHist1DValidInterval.setStatus('current')
if mibBuilder.loadTexts: xdsl2PMLHist1DValidInterval.setDescription('This variable indicates if the data for this interval is valid.')
xdsl2PMLineInitHist15MinTable = MibTable((1, 3, 6, 1, 2, 1, 10, 251, 1, 4, 1, 5), )
if mibBuilder.loadTexts: xdsl2PMLineInitHist15MinTable.setStatus('current')
if mibBuilder.loadTexts: xdsl2PMLineInitHist15MinTable.setDescription('The table xdsl2PMLineInitHist15MinTable contains PM line initialization history for 15-minute intervals of DSL line.')
xdsl2PMLineInitHist15MinEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 251, 1, 4, 1, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "VDSL2-LINE-MIB", "xdsl2PMLInitHist15MInterval"))
if mibBuilder.loadTexts: xdsl2PMLineInitHist15MinEntry.setStatus('current')
if mibBuilder.loadTexts: xdsl2PMLineInitHist15MinEntry.setDescription('One index of this table is an interface index where the interface has an ifType of vdsl2(251). A second index is the interval number.')
xdsl2PMLInitHist15MInterval = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 4, 1, 5, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: xdsl2PMLInitHist15MInterval.setStatus('current')
if mibBuilder.loadTexts: xdsl2PMLInitHist15MInterval.setDescription('The interval number.')
xdsl2PMLInitHist15MMonitoredTime = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 4, 1, 5, 1, 2), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: xdsl2PMLInitHist15MMonitoredTime.setStatus('current')
if mibBuilder.loadTexts: xdsl2PMLInitHist15MMonitoredTime.setDescription('Total seconds monitored in this interval.')
xdsl2PMLInitHist15MFullInits = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 4, 1, 5, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdsl2PMLInitHist15MFullInits.setReference('ITU-T G.997.1, paragraph #7.2.1.3.1')
if mibBuilder.loadTexts: xdsl2PMLInitHist15MFullInits.setStatus('current')
if mibBuilder.loadTexts: xdsl2PMLInitHist15MFullInits.setDescription('Count of full initializations attempted on the line (successful and failed) during this interval.')
xdsl2PMLInitHist15MFailedFullInits = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 4, 1, 5, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdsl2PMLInitHist15MFailedFullInits.setReference('ITU-T G.997.1, paragraph #7.2.1.3.2')
if mibBuilder.loadTexts: xdsl2PMLInitHist15MFailedFullInits.setStatus('current')
if mibBuilder.loadTexts: xdsl2PMLInitHist15MFailedFullInits.setDescription('Count of failed full initializations on the line during this interval.')
xdsl2PMLInitHist15MShortInits = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 4, 1, 5, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdsl2PMLInitHist15MShortInits.setReference('ITU-T G.997.1, paragraph #7.2.1.3.3')
if mibBuilder.loadTexts: xdsl2PMLInitHist15MShortInits.setStatus('current')
if mibBuilder.loadTexts: xdsl2PMLInitHist15MShortInits.setDescription('Count of short initializations attempted on the line (successful and failed) during this interval.')
xdsl2PMLInitHist15MFailedShortInits = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 4, 1, 5, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdsl2PMLInitHist15MFailedShortInits.setReference('ITU-T G.997.1, paragraph #7.2.1.3.4')
if mibBuilder.loadTexts: xdsl2PMLInitHist15MFailedShortInits.setStatus('current')
if mibBuilder.loadTexts: xdsl2PMLInitHist15MFailedShortInits.setDescription('Count of failed short initializations on the line during this interval.')
xdsl2PMLInitHist15MValidInterval = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 4, 1, 5, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdsl2PMLInitHist15MValidInterval.setStatus('current')
if mibBuilder.loadTexts: xdsl2PMLInitHist15MValidInterval.setDescription('This variable indicates if the data for this interval is valid.')
xdsl2PMLineInitHist1DayTable = MibTable((1, 3, 6, 1, 2, 1, 10, 251, 1, 4, 1, 6), )
if mibBuilder.loadTexts: xdsl2PMLineInitHist1DayTable.setStatus('current')
if mibBuilder.loadTexts: xdsl2PMLineInitHist1DayTable.setDescription('The table xdsl2PMLineInitHist1DayTable contains PM line initialization history for 24-hour intervals for DSL lines.')
xdsl2PMLineInitHist1DayEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 251, 1, 4, 1, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "VDSL2-LINE-MIB", "xdsl2PMLInitHist1DInterval"))
if mibBuilder.loadTexts: xdsl2PMLineInitHist1DayEntry.setStatus('current')
if mibBuilder.loadTexts: xdsl2PMLineInitHist1DayEntry.setDescription('One index of this table is an interface index where the interface has an ifType of vdsl2(251). A second index is the interval number.')
xdsl2PMLInitHist1DInterval = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 4, 1, 6, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 30)))
if mibBuilder.loadTexts: xdsl2PMLInitHist1DInterval.setStatus('current')
if mibBuilder.loadTexts: xdsl2PMLInitHist1DInterval.setDescription('The interval number.')
xdsl2PMLInitHist1DMonitoredTime = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 4, 1, 6, 1, 2), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: xdsl2PMLInitHist1DMonitoredTime.setStatus('current')
if mibBuilder.loadTexts: xdsl2PMLInitHist1DMonitoredTime.setDescription('Total seconds monitored in this interval.')
xdsl2PMLInitHist1DFullInits = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 4, 1, 6, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdsl2PMLInitHist1DFullInits.setReference('ITU-T G.997.1, paragraph #7.2.1.3.1')
if mibBuilder.loadTexts: xdsl2PMLInitHist1DFullInits.setStatus('current')
if mibBuilder.loadTexts: xdsl2PMLInitHist1DFullInits.setDescription('Count of full initializations attempted on the line (successful and failed) during this interval.')
xdsl2PMLInitHist1DFailedFullInits = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 4, 1, 6, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdsl2PMLInitHist1DFailedFullInits.setReference('ITU-T G.997.1, paragraph #7.2.1.3.2')
if mibBuilder.loadTexts: xdsl2PMLInitHist1DFailedFullInits.setStatus('current')
if mibBuilder.loadTexts: xdsl2PMLInitHist1DFailedFullInits.setDescription('Count of failed full initializations on the line during this interval.')
xdsl2PMLInitHist1DShortInits = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 4, 1, 6, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdsl2PMLInitHist1DShortInits.setReference('ITU-T G.997.1, paragraph #7.2.1.3.3')
if mibBuilder.loadTexts: xdsl2PMLInitHist1DShortInits.setStatus('current')
if mibBuilder.loadTexts: xdsl2PMLInitHist1DShortInits.setDescription('Count of short initializations attempted on the line (successful and failed) during this interval.')
xdsl2PMLInitHist1DFailedShortInits = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 4, 1, 6, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdsl2PMLInitHist1DFailedShortInits.setReference('ITU-T G.997.1, paragraph #7.2.1.3.4')
if mibBuilder.loadTexts: xdsl2PMLInitHist1DFailedShortInits.setStatus('current')
if mibBuilder.loadTexts: xdsl2PMLInitHist1DFailedShortInits.setDescription('Count of failed short initializations on the line during this interval.')
xdsl2PMLInitHist1DValidInterval = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 4, 1, 6, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdsl2PMLInitHist1DValidInterval.setStatus('current')
if mibBuilder.loadTexts: xdsl2PMLInitHist1DValidInterval.setDescription('This variable indicates if the data for this interval is valid.')
xdsl2PMChCurrTable = MibTable((1, 3, 6, 1, 2, 1, 10, 251, 1, 4, 2, 1), )
if mibBuilder.loadTexts: xdsl2PMChCurrTable.setStatus('current')
if mibBuilder.loadTexts: xdsl2PMChCurrTable.setDescription('The table xdsl2PMChCurrTable contains current Performance Monitoring results for DSL channels.')
xdsl2PMChCurrEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 251, 1, 4, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "VDSL2-LINE-MIB", "xdsl2PMChCurrUnit"))
if mibBuilder.loadTexts: xdsl2PMChCurrEntry.setStatus('current')
if mibBuilder.loadTexts: xdsl2PMChCurrEntry.setDescription('One index of this table is an interface index where the interface has an ifType of a DSL channel. A second index of this table is the termination unit.')
xdsl2PMChCurrUnit = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 4, 2, 1, 1, 1), Xdsl2Unit())
if mibBuilder.loadTexts: xdsl2PMChCurrUnit.setStatus('current')
if mibBuilder.loadTexts: xdsl2PMChCurrUnit.setDescription('The termination unit.')
xdsl2PMChCurr15MValidIntervals = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 4, 2, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdsl2PMChCurr15MValidIntervals.setStatus('current')
if mibBuilder.loadTexts: xdsl2PMChCurr15MValidIntervals.setDescription('The number of 15-minute PM intervals for which data was collected. The value will typically be equal to the maximum number of 15-minute intervals the implementation is planned to store (i.e., beyond the scope of this MIB module) unless the measurement was (re-)started recently, in which case the value will be the number of complete 15-minute intervals for which the agent has at least some data. In certain cases (e.g., in the case where the agent is a proxy), it is possible that some intervals are unavailable. In this case, this interval is the maximum interval number for which data is available.')
xdsl2PMChCurr15MInvalidIntervals = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 4, 2, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdsl2PMChCurr15MInvalidIntervals.setStatus('current')
if mibBuilder.loadTexts: xdsl2PMChCurr15MInvalidIntervals.setDescription('The number of 15-minute PM intervals for which no data is available. The value will typically be zero except in cases where the data for some intervals are not available (e.g., in proxy situations).')
xdsl2PMChCurr15MTimeElapsed = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 4, 2, 1, 1, 4), HCPerfTimeElapsed()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: xdsl2PMChCurr15MTimeElapsed.setStatus('current')
if mibBuilder.loadTexts: xdsl2PMChCurr15MTimeElapsed.setDescription('Total elapsed seconds in this interval.')
xdsl2PMChCurr15MCodingViolations = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 4, 2, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdsl2PMChCurr15MCodingViolations.setReference('ITU-T G.997.1, paragraph #7.2.2.1.1 (CV-C) and paragraph #7.2.2.2.1 (CV-CFE)')
if mibBuilder.loadTexts: xdsl2PMChCurr15MCodingViolations.setStatus('current')
if mibBuilder.loadTexts: xdsl2PMChCurr15MCodingViolations.setDescription('Count of CRC-8 (FEBE for xTU-R) anomalies occurring in the channel during the interval. This parameter is inhibited during UAS or SES. If the CRC is applied over multiple channels, then each related CRC-8 (or FEBE) anomaly SHOULD increment each of the counters related to the individual channels.')
xdsl2PMChCurr15MCorrectedBlocks = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 4, 2, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdsl2PMChCurr15MCorrectedBlocks.setReference('ITU-T G.997.1, paragraph #7.2.2.1.2 (FEC-C) and paragraph #7.2.2.2.2 (FEC-CFE)')
if mibBuilder.loadTexts: xdsl2PMChCurr15MCorrectedBlocks.setStatus('current')
if mibBuilder.loadTexts: xdsl2PMChCurr15MCorrectedBlocks.setDescription('Count of FEC (FFEC for xTU-R) anomalies (corrected code words) occurring in the channel during the interval. This parameter is inhibited during UAS or SES. If the FEC is applied over multiple channels, then each related FEC (or FFEC) anomaly SHOULD increment each of the counters related to the individual channels.')
xdsl2PMChCurr1DayValidIntervals = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 4, 2, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdsl2PMChCurr1DayValidIntervals.setStatus('current')
if mibBuilder.loadTexts: xdsl2PMChCurr1DayValidIntervals.setDescription('The number of 24-hour PM intervals for which data was collected. The value will typically be equal to the maximum number of 24-hour intervals the implementation is planned to store (i.e., beyond the scope of this MIB module) unless the measurement was (re-)started recently, in which case the value will be the number of complete 24-hour intervals for which the agent has at least some data. In certain cases (e.g., in the case where the agent is a proxy), it is possible that some intervals are unavailable. In this case, this interval is the maximum interval number for which data is available.')
xdsl2PMChCurr1DayInvalidIntervals = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 4, 2, 1, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdsl2PMChCurr1DayInvalidIntervals.setStatus('current')
if mibBuilder.loadTexts: xdsl2PMChCurr1DayInvalidIntervals.setDescription('The number of 24-hour PM intervals for which no data is available. The value will typically be zero except in cases where the data for some intervals are not available (e.g., in proxy situations).')
xdsl2PMChCurr1DayTimeElapsed = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 4, 2, 1, 1, 9), HCPerfTimeElapsed()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: xdsl2PMChCurr1DayTimeElapsed.setStatus('current')
if mibBuilder.loadTexts: xdsl2PMChCurr1DayTimeElapsed.setDescription('Total elapsed seconds in this interval.')
xdsl2PMChCurr1DayCodingViolations = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 4, 2, 1, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdsl2PMChCurr1DayCodingViolations.setReference('ITU-T G.997.1, paragraph #7.2.2.1.1 (CV-C) and paragraph #7.2.2.2.1 (CV-CFE)')
if mibBuilder.loadTexts: xdsl2PMChCurr1DayCodingViolations.setStatus('current')
if mibBuilder.loadTexts: xdsl2PMChCurr1DayCodingViolations.setDescription('Count of CRC-8 (FEBE for xTU-R) anomalies occurring in the channel during the interval. This parameter is inhibited during UAS or SES. If the CRC is applied over multiple channels, then each related CRC-8 (or FEBE) anomaly SHOULD increment each of the counters related to the individual channels.')
xdsl2PMChCurr1DayCorrectedBlocks = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 4, 2, 1, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdsl2PMChCurr1DayCorrectedBlocks.setReference('ITU-T G.997.1, paragraph #7.2.2.1.2 (FEC-C) and paragraph #7.2.2.2.2 (FEC-CFE)')
if mibBuilder.loadTexts: xdsl2PMChCurr1DayCorrectedBlocks.setStatus('current')
if mibBuilder.loadTexts: xdsl2PMChCurr1DayCorrectedBlocks.setDescription('Count of FEC (FFEC for xTU-R) anomalies (corrected code words) occurring in the channel during the interval. This parameter is inhibited during UAS or SES. If the FEC is applied over multiple channels, then each related FEC (or FFEC) anomaly SHOULD increment each of the counters related to the individual channels.')
xdsl2PMChHist15MinTable = MibTable((1, 3, 6, 1, 2, 1, 10, 251, 1, 4, 2, 2), )
if mibBuilder.loadTexts: xdsl2PMChHist15MinTable.setStatus('current')
if mibBuilder.loadTexts: xdsl2PMChHist15MinTable.setDescription('The table xdsl2PMChHist15MinTable contains Performance Monitoring (PM) history for 15-minute intervals for DSL channels PM.')
xdsl2PMChHist15MinEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 251, 1, 4, 2, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "VDSL2-LINE-MIB", "xdsl2PMChHist15MUnit"), (0, "VDSL2-LINE-MIB", "xdsl2PMChHist15MInterval"))
if mibBuilder.loadTexts: xdsl2PMChHist15MinEntry.setStatus('current')
if mibBuilder.loadTexts: xdsl2PMChHist15MinEntry.setDescription('One index of this table is an interface index where the interface has an ifType of a DSL channel. A second index of this table is the transmission unit. The third index is the interval number.')
xdsl2PMChHist15MUnit = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 4, 2, 2, 1, 1), Xdsl2Unit())
if mibBuilder.loadTexts: xdsl2PMChHist15MUnit.setStatus('current')
if mibBuilder.loadTexts: xdsl2PMChHist15MUnit.setDescription('The termination unit.')
xdsl2PMChHist15MInterval = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 4, 2, 2, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: xdsl2PMChHist15MInterval.setStatus('current')
if mibBuilder.loadTexts: xdsl2PMChHist15MInterval.setDescription('The interval number.')
xdsl2PMChHist15MMonitoredTime = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 4, 2, 2, 1, 3), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: xdsl2PMChHist15MMonitoredTime.setStatus('current')
if mibBuilder.loadTexts: xdsl2PMChHist15MMonitoredTime.setDescription('Total seconds monitored in this interval.')
xdsl2PMChHist15MCodingViolations = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 4, 2, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdsl2PMChHist15MCodingViolations.setReference('ITU-T G.997.1, paragraph #7.2.2.1.1 (CV-C) and paragraph #7.2.2.2.1 (CV-CFE)')
if mibBuilder.loadTexts: xdsl2PMChHist15MCodingViolations.setStatus('current')
if mibBuilder.loadTexts: xdsl2PMChHist15MCodingViolations.setDescription('Count of CRC-8 (FEBE for xTU-R) anomalies occurring in the channel during the interval. This parameter is inhibited during UAS or SES. If the CRC is applied over multiple channels, then each related CRC-8 (or FEBE) anomaly SHOULD increment each of the counters related to the individual channels.')
xdsl2PMChHist15MCorrectedBlocks = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 4, 2, 2, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdsl2PMChHist15MCorrectedBlocks.setReference('ITU-T G.997.1, paragraph #7.2.2.1.2 (FEC-C) and paragraph #7.2.2.2.2 (FEC-CFE)')
if mibBuilder.loadTexts: xdsl2PMChHist15MCorrectedBlocks.setStatus('current')
if mibBuilder.loadTexts: xdsl2PMChHist15MCorrectedBlocks.setDescription('Count of FEC (FFEC for xTU-R) anomalies (corrected code words) occurring in the channel during the interval. This parameter is inhibited during UAS or SES. If the FEC is applied over multiple channels, then each related FEC (or FFEC) anomaly SHOULD increment each of the counters related to the individual channels.')
xdsl2PMChHist15MValidInterval = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 4, 2, 2, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdsl2PMChHist15MValidInterval.setStatus('current')
if mibBuilder.loadTexts: xdsl2PMChHist15MValidInterval.setDescription('This variable indicates if the data for this interval is valid.')
xdsl2PMChHist1DTable = MibTable((1, 3, 6, 1, 2, 1, 10, 251, 1, 4, 2, 3), )
if mibBuilder.loadTexts: xdsl2PMChHist1DTable.setStatus('current')
if mibBuilder.loadTexts: xdsl2PMChHist1DTable.setDescription('The table xdsl2PMChHist1DTable contains Performance Monitoring (PM) history for 1-day intervals for DSL channels PM.')
xdsl2PMChHist1DEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 251, 1, 4, 2, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "VDSL2-LINE-MIB", "xdsl2PMChHist1DUnit"), (0, "VDSL2-LINE-MIB", "xdsl2PMChHist1DInterval"))
if mibBuilder.loadTexts: xdsl2PMChHist1DEntry.setStatus('current')
if mibBuilder.loadTexts: xdsl2PMChHist1DEntry.setDescription('One index of this table is an interface index where the interface has an ifType of a DSL channel. A second index of this table is the transmission unit. The third index is the interval number.')
xdsl2PMChHist1DUnit = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 4, 2, 3, 1, 1), Xdsl2Unit())
if mibBuilder.loadTexts: xdsl2PMChHist1DUnit.setStatus('current')
if mibBuilder.loadTexts: xdsl2PMChHist1DUnit.setDescription('The termination unit.')
xdsl2PMChHist1DInterval = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 4, 2, 3, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 30)))
if mibBuilder.loadTexts: xdsl2PMChHist1DInterval.setStatus('current')
if mibBuilder.loadTexts: xdsl2PMChHist1DInterval.setDescription('The interval number.')
xdsl2PMChHist1DMonitoredTime = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 4, 2, 3, 1, 3), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: xdsl2PMChHist1DMonitoredTime.setStatus('current')
if mibBuilder.loadTexts: xdsl2PMChHist1DMonitoredTime.setDescription('Total seconds monitored in this interval.')
xdsl2PMChHist1DCodingViolations = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 4, 2, 3, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdsl2PMChHist1DCodingViolations.setReference('ITU-T G.997.1, paragraph #7.2.2.1.1 (CV-C) and paragraph #7.2.2.2.1 (CV-CFE)')
if mibBuilder.loadTexts: xdsl2PMChHist1DCodingViolations.setStatus('current')
if mibBuilder.loadTexts: xdsl2PMChHist1DCodingViolations.setDescription('Count of CRC-8 (FEBE for xTU-R) anomalies occurring in the channel during the interval. This parameter is inhibited during UAS or SES. If the CRC is applied over multiple channels, then each related CRC-8 (or FEBE) anomaly SHOULD increment each of the counters related to the individual channels.')
xdsl2PMChHist1DCorrectedBlocks = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 4, 2, 3, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdsl2PMChHist1DCorrectedBlocks.setReference('ITU-T G.997.1, paragraph #7.2.2.1.2 (FEC-C) and paragraph #7.2.2.2.2 (FEC-CFE)')
if mibBuilder.loadTexts: xdsl2PMChHist1DCorrectedBlocks.setStatus('current')
if mibBuilder.loadTexts: xdsl2PMChHist1DCorrectedBlocks.setDescription('Count of FEC (FFEC for xTU-R) anomalies (corrected code words) occurring in the channel during the interval. This parameter is inhibited during UAS or SES. If the FEC is applied over multiple channels, then each related FEC (or FFEC) anomaly SHOULD increment each of the counters related to the individual channels.')
xdsl2PMChHist1DValidInterval = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 251, 1, 4, 2, 3, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdsl2PMChHist1DValidInterval.setStatus('current')
if mibBuilder.loadTexts: xdsl2PMChHist1DValidInterval.setDescription('This variable indicates if the data for this interval is valid.')
xdsl2LinePerfFECSThreshXtuc = NotificationType((1, 3, 6, 1, 2, 1, 10, 251, 0, 1)).setObjects(("VDSL2-LINE-MIB", "xdsl2PMLCurr15MFecs"), ("VDSL2-LINE-MIB", "xdsl2LineAlarmConfProfileXtucThresh15MinFecs"))
if mibBuilder.loadTexts: xdsl2LinePerfFECSThreshXtuc.setStatus('current')
if mibBuilder.loadTexts: xdsl2LinePerfFECSThreshXtuc.setDescription('This notification indicates that the FEC seconds threshold has been reached/exceeded for the referred xTU-C.')
xdsl2LinePerfFECSThreshXtur = NotificationType((1, 3, 6, 1, 2, 1, 10, 251, 0, 2)).setObjects(("VDSL2-LINE-MIB", "xdsl2PMLCurr15MFecs"), ("VDSL2-LINE-MIB", "xdsl2LineAlarmConfProfileXturThresh15MinFecs"))
if mibBuilder.loadTexts: xdsl2LinePerfFECSThreshXtur.setStatus('current')
if mibBuilder.loadTexts: xdsl2LinePerfFECSThreshXtur.setDescription('This notification indicates that the FEC seconds threshold has been reached/exceeded for the referred xTU-R.')
xdsl2LinePerfESThreshXtuc = NotificationType((1, 3, 6, 1, 2, 1, 10, 251, 0, 3)).setObjects(("VDSL2-LINE-MIB", "xdsl2PMLCurr15MEs"), ("VDSL2-LINE-MIB", "xdsl2LineAlarmConfProfileXtucThresh15MinEs"))
if mibBuilder.loadTexts: xdsl2LinePerfESThreshXtuc.setStatus('current')
if mibBuilder.loadTexts: xdsl2LinePerfESThreshXtuc.setDescription('This notification indicates that the errored seconds threshold has been reached/exceeded for the referred xTU-C.')
xdsl2LinePerfESThreshXtur = NotificationType((1, 3, 6, 1, 2, 1, 10, 251, 0, 4)).setObjects(("VDSL2-LINE-MIB", "xdsl2PMLCurr15MEs"), ("VDSL2-LINE-MIB", "xdsl2LineAlarmConfProfileXturThresh15MinEs"))
if mibBuilder.loadTexts: xdsl2LinePerfESThreshXtur.setStatus('current')
if mibBuilder.loadTexts: xdsl2LinePerfESThreshXtur.setDescription('This notification indicates that the errored seconds threshold has been reached/exceeded for the referred xTU-R.')
xdsl2LinePerfSESThreshXtuc = NotificationType((1, 3, 6, 1, 2, 1, 10, 251, 0, 5)).setObjects(("VDSL2-LINE-MIB", "xdsl2PMLCurr15MSes"), ("VDSL2-LINE-MIB", "xdsl2LineAlarmConfProfileXtucThresh15MinSes"))
if mibBuilder.loadTexts: xdsl2LinePerfSESThreshXtuc.setStatus('current')
if mibBuilder.loadTexts: xdsl2LinePerfSESThreshXtuc.setDescription('This notification indicates that the severely errored seconds threshold has been reached/exceeded for the referred xTU-C.')
xdsl2LinePerfSESThreshXtur = NotificationType((1, 3, 6, 1, 2, 1, 10, 251, 0, 6)).setObjects(("VDSL2-LINE-MIB", "xdsl2PMLCurr15MSes"), ("VDSL2-LINE-MIB", "xdsl2LineAlarmConfProfileXturThresh15MinSes"))
if mibBuilder.loadTexts: xdsl2LinePerfSESThreshXtur.setStatus('current')
if mibBuilder.loadTexts: xdsl2LinePerfSESThreshXtur.setDescription('This notification indicates that the severely errored seconds threshold has been reached/exceeded for the referred xTU-R.')
xdsl2LinePerfLOSSThreshXtuc = NotificationType((1, 3, 6, 1, 2, 1, 10, 251, 0, 7)).setObjects(("VDSL2-LINE-MIB", "xdsl2PMLCurr15MLoss"), ("VDSL2-LINE-MIB", "xdsl2LineAlarmConfProfileXtucThresh15MinLoss"))
if mibBuilder.loadTexts: xdsl2LinePerfLOSSThreshXtuc.setStatus('current')
if mibBuilder.loadTexts: xdsl2LinePerfLOSSThreshXtuc.setDescription('This notification indicates that the LOS seconds threshold has been reached/exceeded for the referred xTU-C.')
xdsl2LinePerfLOSSThreshXtur = NotificationType((1, 3, 6, 1, 2, 1, 10, 251, 0, 8)).setObjects(("VDSL2-LINE-MIB", "xdsl2PMLCurr15MLoss"), ("VDSL2-LINE-MIB", "xdsl2LineAlarmConfProfileXturThresh15MinLoss"))
if mibBuilder.loadTexts: xdsl2LinePerfLOSSThreshXtur.setStatus('current')
if mibBuilder.loadTexts: xdsl2LinePerfLOSSThreshXtur.setDescription('This notification indicates that the LOS seconds threshold has been reached/exceeded for the referred xTU-R.')
xdsl2LinePerfUASThreshXtuc = NotificationType((1, 3, 6, 1, 2, 1, 10, 251, 0, 9)).setObjects(("VDSL2-LINE-MIB", "xdsl2PMLCurr15MUas"), ("VDSL2-LINE-MIB", "xdsl2LineAlarmConfProfileXtucThresh15MinUas"))
if mibBuilder.loadTexts: xdsl2LinePerfUASThreshXtuc.setStatus('current')
if mibBuilder.loadTexts: xdsl2LinePerfUASThreshXtuc.setDescription('This notification indicates that the unavailable seconds threshold has been reached/exceeded for the referred xTU-C.')
xdsl2LinePerfUASThreshXtur = NotificationType((1, 3, 6, 1, 2, 1, 10, 251, 0, 10)).setObjects(("VDSL2-LINE-MIB", "xdsl2PMLCurr15MUas"), ("VDSL2-LINE-MIB", "xdsl2LineAlarmConfProfileXturThresh15MinUas"))
if mibBuilder.loadTexts: xdsl2LinePerfUASThreshXtur.setStatus('current')
if mibBuilder.loadTexts: xdsl2LinePerfUASThreshXtur.setDescription('This notification indicates that the unavailable seconds threshold has been reached/exceeded for the referred xTU-R.')
xdsl2LinePerfCodingViolationsThreshXtuc = NotificationType((1, 3, 6, 1, 2, 1, 10, 251, 0, 11)).setObjects(("VDSL2-LINE-MIB", "xdsl2PMChCurr15MCodingViolations"), ("VDSL2-LINE-MIB", "xdsl2ChAlarmConfProfileXtucThresh15MinCodingViolations"))
if mibBuilder.loadTexts: xdsl2LinePerfCodingViolationsThreshXtuc.setStatus('current')
if mibBuilder.loadTexts: xdsl2LinePerfCodingViolationsThreshXtuc.setDescription('This notification indicates that the coding violations threshold has been reached/exceeded for the referred xTU-C.')
xdsl2LinePerfCodingViolationsThreshXtur = NotificationType((1, 3, 6, 1, 2, 1, 10, 251, 0, 12)).setObjects(("VDSL2-LINE-MIB", "xdsl2PMChCurr15MCodingViolations"), ("VDSL2-LINE-MIB", "xdsl2ChAlarmConfProfileXturThresh15MinCodingViolations"))
if mibBuilder.loadTexts: xdsl2LinePerfCodingViolationsThreshXtur.setStatus('current')
if mibBuilder.loadTexts: xdsl2LinePerfCodingViolationsThreshXtur.setDescription('This notification indicates that the coding violations threshold has been reached/exceeded for the referred xTU-R.')
xdsl2LinePerfCorrectedThreshXtuc = NotificationType((1, 3, 6, 1, 2, 1, 10, 251, 0, 13)).setObjects(("VDSL2-LINE-MIB", "xdsl2PMChCurr15MCorrectedBlocks"), ("VDSL2-LINE-MIB", "xdsl2ChAlarmConfProfileXtucThresh15MinCorrected"))
if mibBuilder.loadTexts: xdsl2LinePerfCorrectedThreshXtuc.setStatus('current')
if mibBuilder.loadTexts: xdsl2LinePerfCorrectedThreshXtuc.setDescription('This notification indicates that the corrected blocks (FEC events) threshold has been reached/exceeded for the referred xTU-C.')
xdsl2LinePerfCorrectedThreshXtur = NotificationType((1, 3, 6, 1, 2, 1, 10, 251, 0, 14)).setObjects(("VDSL2-LINE-MIB", "xdsl2PMChCurr15MCorrectedBlocks"), ("VDSL2-LINE-MIB", "xdsl2ChAlarmConfProfileXturThresh15MinCorrected"))
if mibBuilder.loadTexts: xdsl2LinePerfCorrectedThreshXtur.setStatus('current')
if mibBuilder.loadTexts: xdsl2LinePerfCorrectedThreshXtur.setDescription('This notification indicates that the corrected blocks (FEC events) threshold has been reached/exceeded for the referred xTU-R.')
xdsl2LinePerfFailedFullInitThresh = NotificationType((1, 3, 6, 1, 2, 1, 10, 251, 0, 15)).setObjects(("VDSL2-LINE-MIB", "xdsl2PMLInitCurr15MFailedFullInits"), ("VDSL2-LINE-MIB", "xdsl2LineAlarmConfProfileThresh15MinFailedFullInt"))
if mibBuilder.loadTexts: xdsl2LinePerfFailedFullInitThresh.setStatus('current')
if mibBuilder.loadTexts: xdsl2LinePerfFailedFullInitThresh.setDescription('This notification indicates that the failed full initializations threshold has been reached/exceeded for the referred ADSL/ADSL2 or ADSL2 line.')
xdsl2LinePerfFailedShortInitThresh = NotificationType((1, 3, 6, 1, 2, 1, 10, 251, 0, 16)).setObjects(("VDSL2-LINE-MIB", "xdsl2PMLInitCurr15MFailedShortInits"), ("VDSL2-LINE-MIB", "xdsl2LineAlarmConfProfileThresh15MinFailedShrtInt"))
if mibBuilder.loadTexts: xdsl2LinePerfFailedShortInitThresh.setStatus('current')
if mibBuilder.loadTexts: xdsl2LinePerfFailedShortInitThresh.setDescription('This notification indicates that the failed short initializations threshold has been reached/exceeded for the referred VDSL2/ADSL/ADSL2 or ADSL2+ line.')
xdsl2LineStatusChangeXtuc = NotificationType((1, 3, 6, 1, 2, 1, 10, 251, 0, 17)).setObjects(("VDSL2-LINE-MIB", "xdsl2LineStatusXtuc"))
if mibBuilder.loadTexts: xdsl2LineStatusChangeXtuc.setStatus('current')
if mibBuilder.loadTexts: xdsl2LineStatusChangeXtuc.setDescription('This notification indicates that a status change is detected for the referred xTU-C.')
xdsl2LineStatusChangeXtur = NotificationType((1, 3, 6, 1, 2, 1, 10, 251, 0, 18)).setObjects(("VDSL2-LINE-MIB", "xdsl2LineStatusXtur"))
if mibBuilder.loadTexts: xdsl2LineStatusChangeXtur.setStatus('current')
if mibBuilder.loadTexts: xdsl2LineStatusChangeXtur.setDescription('This notification indicates that a status change is detected for the referred xTU-R.')
xdsl2Groups = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 251, 2, 1))
xdsl2Compliances = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 251, 2, 2))
xdsl2LineMibCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 10, 251, 2, 2, 1)).setObjects(("VDSL2-LINE-MIB", "xdsl2LineGroup"), ("VDSL2-LINE-MIB", "xdsl2ChannelStatusGroup"), ("VDSL2-LINE-MIB", "xdsl2SCStatusGroup"), ("VDSL2-LINE-MIB", "xdsl2LineInventoryGroup"), ("VDSL2-LINE-MIB", "xdsl2LineConfTemplateGroup"), ("VDSL2-LINE-MIB", "xdsl2LineConfProfGroup"), ("VDSL2-LINE-MIB", "xdsl2LineConfProfModeSpecGroup"), ("VDSL2-LINE-MIB", "xdsl2LineConfProfModeSpecBandUsGroup"), ("VDSL2-LINE-MIB", "xdsl2ChConfProfileGroup"), ("VDSL2-LINE-MIB", "xdsl2LineAlarmConfTemplateGroup"), ("VDSL2-LINE-MIB", "xdsl2PMLineCurrGroup"), ("VDSL2-LINE-MIB", "xdsl2PMLineInitCurrGroup"), ("VDSL2-LINE-MIB", "xdsl2PMLineHist15MinGroup"), ("VDSL2-LINE-MIB", "xdsl2PMLineHist1DayGroup"), ("VDSL2-LINE-MIB", "xdsl2PMLineInitHist15MinGroup"), ("VDSL2-LINE-MIB", "xdsl2PMLineInitHist1DayGroup"), ("VDSL2-LINE-MIB", "xdsl2PMChCurrGroup"), ("VDSL2-LINE-MIB", "xdsl2PMChHist15MinGroup"), ("VDSL2-LINE-MIB", "xdsl2PMChHist1DGroup"), ("VDSL2-LINE-MIB", "xdsl2LineFallbackGroup"), ("VDSL2-LINE-MIB", "xdsl2LineBpscGroup"), ("VDSL2-LINE-MIB", "xdsl2LineSegmentGroup"), ("VDSL2-LINE-MIB", "xdsl2ChannelStatusAtmGroup"), ("VDSL2-LINE-MIB", "xdsl2ChannelStatusPtmGroup"), ("VDSL2-LINE-MIB", "xdsl2LineConfProfRaGroup"), ("VDSL2-LINE-MIB", "xdsl2LineConfProfMsgMinGroup"), ("VDSL2-LINE-MIB", "xdsl2LineAlarmConfProfileGroup"), ("VDSL2-LINE-MIB", "xdsl2ChAlarmConfProfileGroup"), ("VDSL2-LINE-MIB", "xdsl2ChConfProfileAtmGroup"), ("VDSL2-LINE-MIB", "xdsl2ChConfProfileMinResGroup"), ("VDSL2-LINE-MIB", "xdsl2ChConfProfileOptAttrGroup"), ("VDSL2-LINE-MIB", "xdsl2PMLineInitCurrShortGroup"), ("VDSL2-LINE-MIB", "xdsl2PMLineInitHist15MinShortGroup"), ("VDSL2-LINE-MIB", "xdsl2PMLineInitHist1DayShortGroup"), ("VDSL2-LINE-MIB", "xdsl2ScalarSCGroup"), ("VDSL2-LINE-MIB", "xdsl2ThreshNotificationGroup"), ("VDSL2-LINE-MIB", "xdsl2StatusChangeNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    xdsl2LineMibCompliance = xdsl2LineMibCompliance.setStatus('current')
if mibBuilder.loadTexts: xdsl2LineMibCompliance.setDescription('The compliance statement for SNMP entities which manage VDSL2/ADSL/ADSL2 and ADSL2+ interfaces.')
xdsl2LineGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 251, 2, 1, 1)).setObjects(("VDSL2-LINE-MIB", "xdsl2LineConfTemplate"), ("VDSL2-LINE-MIB", "xdsl2LineAlarmConfTemplate"), ("VDSL2-LINE-MIB", "xdsl2LineCmndConfPmsf"), ("VDSL2-LINE-MIB", "xdsl2LineCmndConfLdsf"), ("VDSL2-LINE-MIB", "xdsl2LineCmndConfLdsfFailReason"), ("VDSL2-LINE-MIB", "xdsl2LineCmndAutomodeColdStart"), ("VDSL2-LINE-MIB", "xdsl2LineCmndConfReset"), ("VDSL2-LINE-MIB", "xdsl2LineStatusXtuTransSys"), ("VDSL2-LINE-MIB", "xdsl2LineStatusPwrMngState"), ("VDSL2-LINE-MIB", "xdsl2LineStatusInitResult"), ("VDSL2-LINE-MIB", "xdsl2LineStatusLastStateDs"), ("VDSL2-LINE-MIB", "xdsl2LineStatusLastStateUs"), ("VDSL2-LINE-MIB", "xdsl2LineStatusXtur"), ("VDSL2-LINE-MIB", "xdsl2LineStatusXtuc"), ("VDSL2-LINE-MIB", "xdsl2LineStatusAttainableRateDs"), ("VDSL2-LINE-MIB", "xdsl2LineStatusAttainableRateUs"), ("VDSL2-LINE-MIB", "xdsl2LineStatusActPsdDs"), ("VDSL2-LINE-MIB", "xdsl2LineStatusActPsdUs"), ("VDSL2-LINE-MIB", "xdsl2LineStatusActAtpDs"), ("VDSL2-LINE-MIB", "xdsl2LineStatusActAtpUs"), ("VDSL2-LINE-MIB", "xdsl2LineStatusActProfile"), ("VDSL2-LINE-MIB", "xdsl2LineStatusActLimitMask"), ("VDSL2-LINE-MIB", "xdsl2LineStatusActUs0Mask"), ("VDSL2-LINE-MIB", "xdsl2LineStatusActSnrModeDs"), ("VDSL2-LINE-MIB", "xdsl2LineStatusActSnrModeUs"), ("VDSL2-LINE-MIB", "xdsl2LineStatusElectricalLength"), ("VDSL2-LINE-MIB", "xdsl2LineStatusTssiDs"), ("VDSL2-LINE-MIB", "xdsl2LineStatusTssiUs"), ("VDSL2-LINE-MIB", "xdsl2LineStatusMrefPsdDs"), ("VDSL2-LINE-MIB", "xdsl2LineStatusMrefPsdUs"), ("VDSL2-LINE-MIB", "xdsl2LineStatusTrellisDs"), ("VDSL2-LINE-MIB", "xdsl2LineStatusTrellisUs"), ("VDSL2-LINE-MIB", "xdsl2LineStatusActualCe"), ("VDSL2-LINE-MIB", "xdsl2LineBandStatusLnAtten"), ("VDSL2-LINE-MIB", "xdsl2LineBandStatusSigAtten"), ("VDSL2-LINE-MIB", "xdsl2LineBandStatusSnrMargin"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    xdsl2LineGroup = xdsl2LineGroup.setStatus('current')
if mibBuilder.loadTexts: xdsl2LineGroup.setDescription('The group of configuration, status, and commands objects on the line level.')
xdsl2LineFallbackGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 251, 2, 1, 2)).setObjects(("VDSL2-LINE-MIB", "xdsl2LineConfFallbackTemplate"), ("VDSL2-LINE-MIB", "xdsl2LineStatusActTemplate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    xdsl2LineFallbackGroup = xdsl2LineFallbackGroup.setStatus('current')
if mibBuilder.loadTexts: xdsl2LineFallbackGroup.setDescription('The group of configuration, status, and commands objects on the line level that are associated with the fallback feature.')
xdsl2LineBpscGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 251, 2, 1, 3)).setObjects(("VDSL2-LINE-MIB", "xdsl2LineCmndConfBpsc"), ("VDSL2-LINE-MIB", "xdsl2LineCmndConfBpscFailReason"), ("VDSL2-LINE-MIB", "xdsl2LineCmndConfBpscRequests"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    xdsl2LineBpscGroup = xdsl2LineBpscGroup.setStatus('current')
if mibBuilder.loadTexts: xdsl2LineBpscGroup.setDescription('The group of configuration, status, and commands objects on the line level that are associated with requesting a bits-per-subcarrier measurement.')
xdsl2LineSegmentGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 251, 2, 1, 4)).setObjects(("VDSL2-LINE-MIB", "xdsl2LineSegmentBitsAlloc"), ("VDSL2-LINE-MIB", "xdsl2LineSegmentRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    xdsl2LineSegmentGroup = xdsl2LineSegmentGroup.setStatus('current')
if mibBuilder.loadTexts: xdsl2LineSegmentGroup.setDescription('The group of status and commands objects on the line level that are used to hold the results of the bits-per-subcarrier measurement.')
xdsl2ChannelStatusGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 251, 2, 1, 5)).setObjects(("VDSL2-LINE-MIB", "xdsl2ChStatusActDataRate"), ("VDSL2-LINE-MIB", "xdsl2ChStatusPrevDataRate"), ("VDSL2-LINE-MIB", "xdsl2ChStatusActDelay"), ("VDSL2-LINE-MIB", "xdsl2ChStatusActInp"), ("VDSL2-LINE-MIB", "xdsl2ChStatusInpReport"), ("VDSL2-LINE-MIB", "xdsl2ChStatusNFec"), ("VDSL2-LINE-MIB", "xdsl2ChStatusRFec"), ("VDSL2-LINE-MIB", "xdsl2ChStatusLSymb"), ("VDSL2-LINE-MIB", "xdsl2ChStatusIntlvDepth"), ("VDSL2-LINE-MIB", "xdsl2ChStatusIntlvBlock"), ("VDSL2-LINE-MIB", "xdsl2ChStatusLPath"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    xdsl2ChannelStatusGroup = xdsl2ChannelStatusGroup.setStatus('current')
if mibBuilder.loadTexts: xdsl2ChannelStatusGroup.setDescription('The group of status objects on the channel level.')
xdsl2ChannelStatusAtmGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 251, 2, 1, 6)).setObjects(("VDSL2-LINE-MIB", "xdsl2ChStatusAtmStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    xdsl2ChannelStatusAtmGroup = xdsl2ChannelStatusAtmGroup.setStatus('current')
if mibBuilder.loadTexts: xdsl2ChannelStatusAtmGroup.setDescription('The group of status objects on the data path level when it is ATM.')
xdsl2ChannelStatusPtmGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 251, 2, 1, 7)).setObjects(("VDSL2-LINE-MIB", "xdsl2ChStatusPtmStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    xdsl2ChannelStatusPtmGroup = xdsl2ChannelStatusPtmGroup.setStatus('current')
if mibBuilder.loadTexts: xdsl2ChannelStatusPtmGroup.setDescription('The group of status objects on the data path level when it is PTM.')
xdsl2SCStatusGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 251, 2, 1, 8)).setObjects(("VDSL2-LINE-MIB", "xdsl2SCStatusLinScale"), ("VDSL2-LINE-MIB", "xdsl2SCStatusLinScGroupSize"), ("VDSL2-LINE-MIB", "xdsl2SCStatusLogMt"), ("VDSL2-LINE-MIB", "xdsl2SCStatusLogScGroupSize"), ("VDSL2-LINE-MIB", "xdsl2SCStatusQlnMt"), ("VDSL2-LINE-MIB", "xdsl2SCStatusQlnScGroupSize"), ("VDSL2-LINE-MIB", "xdsl2SCStatusSnrMtime"), ("VDSL2-LINE-MIB", "xdsl2SCStatusSnrScGroupSize"), ("VDSL2-LINE-MIB", "xdsl2SCStatusBandLnAtten"), ("VDSL2-LINE-MIB", "xdsl2SCStatusBandSigAtten"), ("VDSL2-LINE-MIB", "xdsl2SCStatusAttainableRate"), ("VDSL2-LINE-MIB", "xdsl2SCStatusRowStatus"), ("VDSL2-LINE-MIB", "xdsl2SCStatusSegmentLinReal"), ("VDSL2-LINE-MIB", "xdsl2SCStatusSegmentLinImg"), ("VDSL2-LINE-MIB", "xdsl2SCStatusSegmentLog"), ("VDSL2-LINE-MIB", "xdsl2SCStatusSegmentQln"), ("VDSL2-LINE-MIB", "xdsl2SCStatusSegmentSnr"), ("VDSL2-LINE-MIB", "xdsl2SCStatusSegmentBitsAlloc"), ("VDSL2-LINE-MIB", "xdsl2SCStatusSegmentGainAlloc"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    xdsl2SCStatusGroup = xdsl2SCStatusGroup.setStatus('current')
if mibBuilder.loadTexts: xdsl2SCStatusGroup.setDescription('The group of status objects on the subcarrier level. They are updated as a result of a DELT process.')
xdsl2LineInventoryGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 251, 2, 1, 9)).setObjects(("VDSL2-LINE-MIB", "xdsl2LInvG994VendorId"), ("VDSL2-LINE-MIB", "xdsl2LInvSystemVendorId"), ("VDSL2-LINE-MIB", "xdsl2LInvVersionNumber"), ("VDSL2-LINE-MIB", "xdsl2LInvSerialNumber"), ("VDSL2-LINE-MIB", "xdsl2LInvSelfTestResult"), ("VDSL2-LINE-MIB", "xdsl2LInvTransmissionCapabilities"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    xdsl2LineInventoryGroup = xdsl2LineInventoryGroup.setStatus('current')
if mibBuilder.loadTexts: xdsl2LineInventoryGroup.setDescription('The group of inventory objects per xTU.')
xdsl2LineConfTemplateGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 251, 2, 1, 10)).setObjects(("VDSL2-LINE-MIB", "xdsl2LConfTempLineProfile"), ("VDSL2-LINE-MIB", "xdsl2LConfTempChan1ConfProfile"), ("VDSL2-LINE-MIB", "xdsl2LConfTempChan1RaRatioDs"), ("VDSL2-LINE-MIB", "xdsl2LConfTempChan1RaRatioUs"), ("VDSL2-LINE-MIB", "xdsl2LConfTempChan2ConfProfile"), ("VDSL2-LINE-MIB", "xdsl2LConfTempChan2RaRatioDs"), ("VDSL2-LINE-MIB", "xdsl2LConfTempChan2RaRatioUs"), ("VDSL2-LINE-MIB", "xdsl2LConfTempChan3ConfProfile"), ("VDSL2-LINE-MIB", "xdsl2LConfTempChan3RaRatioDs"), ("VDSL2-LINE-MIB", "xdsl2LConfTempChan3RaRatioUs"), ("VDSL2-LINE-MIB", "xdsl2LConfTempChan4ConfProfile"), ("VDSL2-LINE-MIB", "xdsl2LConfTempChan4RaRatioDs"), ("VDSL2-LINE-MIB", "xdsl2LConfTempChan4RaRatioUs"), ("VDSL2-LINE-MIB", "xdsl2LConfTempRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    xdsl2LineConfTemplateGroup = xdsl2LineConfTemplateGroup.setStatus('current')
if mibBuilder.loadTexts: xdsl2LineConfTemplateGroup.setDescription('The group of objects in a line configuration template.')
xdsl2LineConfProfGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 251, 2, 1, 11)).setObjects(("VDSL2-LINE-MIB", "xdsl2LConfProfScMaskDs"), ("VDSL2-LINE-MIB", "xdsl2LConfProfScMaskUs"), ("VDSL2-LINE-MIB", "xdsl2LConfProfVdsl2CarMask"), ("VDSL2-LINE-MIB", "xdsl2LConfProfRfiBands"), ("VDSL2-LINE-MIB", "xdsl2LConfProfRaModeDs"), ("VDSL2-LINE-MIB", "xdsl2LConfProfRaModeUs"), ("VDSL2-LINE-MIB", "xdsl2LConfProfTargetSnrmDs"), ("VDSL2-LINE-MIB", "xdsl2LConfProfTargetSnrmUs"), ("VDSL2-LINE-MIB", "xdsl2LConfProfMaxSnrmDs"), ("VDSL2-LINE-MIB", "xdsl2LConfProfMaxSnrmUs"), ("VDSL2-LINE-MIB", "xdsl2LConfProfMinSnrmDs"), ("VDSL2-LINE-MIB", "xdsl2LConfProfMinSnrmUs"), ("VDSL2-LINE-MIB", "xdsl2LConfProfCeFlag"), ("VDSL2-LINE-MIB", "xdsl2LConfProfSnrModeDs"), ("VDSL2-LINE-MIB", "xdsl2LConfProfSnrModeUs"), ("VDSL2-LINE-MIB", "xdsl2LConfProfTxRefVnDs"), ("VDSL2-LINE-MIB", "xdsl2LConfProfTxRefVnUs"), ("VDSL2-LINE-MIB", "xdsl2LConfProfXtuTransSysEna"), ("VDSL2-LINE-MIB", "xdsl2LConfProfPmMode"), ("VDSL2-LINE-MIB", "xdsl2LConfProfL0Time"), ("VDSL2-LINE-MIB", "xdsl2LConfProfL2Time"), ("VDSL2-LINE-MIB", "xdsl2LConfProfL2Atpr"), ("VDSL2-LINE-MIB", "xdsl2LConfProfL2Atprt"), ("VDSL2-LINE-MIB", "xdsl2LConfProfProfiles"), ("VDSL2-LINE-MIB", "xdsl2LConfProfDpboEPsd"), ("VDSL2-LINE-MIB", "xdsl2LConfProfDpboEsEL"), ("VDSL2-LINE-MIB", "xdsl2LConfProfDpboEsCableModelA"), ("VDSL2-LINE-MIB", "xdsl2LConfProfDpboEsCableModelB"), ("VDSL2-LINE-MIB", "xdsl2LConfProfDpboEsCableModelC"), ("VDSL2-LINE-MIB", "xdsl2LConfProfDpboMus"), ("VDSL2-LINE-MIB", "xdsl2LConfProfDpboFMin"), ("VDSL2-LINE-MIB", "xdsl2LConfProfDpboFMax"), ("VDSL2-LINE-MIB", "xdsl2LConfProfUpboKL"), ("VDSL2-LINE-MIB", "xdsl2LConfProfUpboKLF"), ("VDSL2-LINE-MIB", "xdsl2LConfProfUs0Mask"), ("VDSL2-LINE-MIB", "xdsl2LConfProfForceInp"), ("VDSL2-LINE-MIB", "xdsl2LConfProfRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    xdsl2LineConfProfGroup = xdsl2LineConfProfGroup.setStatus('current')
if mibBuilder.loadTexts: xdsl2LineConfProfGroup.setDescription('The group of objects in a line configuration profile.')
xdsl2LineConfProfRaGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 251, 2, 1, 12)).setObjects(("VDSL2-LINE-MIB", "xdsl2LConfProfRaUsNrmDs"), ("VDSL2-LINE-MIB", "xdsl2LConfProfRaUsNrmUs"), ("VDSL2-LINE-MIB", "xdsl2LConfProfRaUsTimeDs"), ("VDSL2-LINE-MIB", "xdsl2LConfProfRaUsTimeUs"), ("VDSL2-LINE-MIB", "xdsl2LConfProfRaDsNrmDs"), ("VDSL2-LINE-MIB", "xdsl2LConfProfRaDsNrmUs"), ("VDSL2-LINE-MIB", "xdsl2LConfProfRaDsTimeDs"), ("VDSL2-LINE-MIB", "xdsl2LConfProfRaDsTimeUs"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    xdsl2LineConfProfRaGroup = xdsl2LineConfProfRaGroup.setStatus('current')
if mibBuilder.loadTexts: xdsl2LineConfProfRaGroup.setDescription('The group of objects required for controlling the rate-adaptive behavior of the line.')
xdsl2LineConfProfMsgMinGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 251, 2, 1, 13)).setObjects(("VDSL2-LINE-MIB", "xdsl2LConfProfMsgMinUs"), ("VDSL2-LINE-MIB", "xdsl2LConfProfMsgMinDs"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    xdsl2LineConfProfMsgMinGroup = xdsl2LineConfProfMsgMinGroup.setStatus('current')
if mibBuilder.loadTexts: xdsl2LineConfProfMsgMinGroup.setDescription('The group of objects required for controlling the rate reserved for Overhead traffic.')
xdsl2LineConfProfModeSpecGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 251, 2, 1, 14)).setObjects(("VDSL2-LINE-MIB", "xdsl2LConfProfMaxNomPsdDs"), ("VDSL2-LINE-MIB", "xdsl2LConfProfMaxNomPsdUs"), ("VDSL2-LINE-MIB", "xdsl2LConfProfMaxNomAtpDs"), ("VDSL2-LINE-MIB", "xdsl2LConfProfMaxNomAtpUs"), ("VDSL2-LINE-MIB", "xdsl2LConfProfMaxAggRxPwrUs"), ("VDSL2-LINE-MIB", "xdsl2LConfProfPsdMaskDs"), ("VDSL2-LINE-MIB", "xdsl2LConfProfPsdMaskUs"), ("VDSL2-LINE-MIB", "xdsl2LConfProfPsdMaskSelectUs"), ("VDSL2-LINE-MIB", "xdsl2LConfProfClassMask"), ("VDSL2-LINE-MIB", "xdsl2LConfProfLimitMask"), ("VDSL2-LINE-MIB", "xdsl2LConfProfUs0Disable"), ("VDSL2-LINE-MIB", "xdsl2LConfProfModeSpecRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    xdsl2LineConfProfModeSpecGroup = xdsl2LineConfProfModeSpecGroup.setStatus('current')
if mibBuilder.loadTexts: xdsl2LineConfProfModeSpecGroup.setDescription('The group of objects in a line configuration profile that have an instance for each operation mode allowed.')
xdsl2LineConfProfModeSpecBandUsGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 251, 2, 1, 15)).setObjects(("VDSL2-LINE-MIB", "xdsl2LConfProfUpboPsdA"), ("VDSL2-LINE-MIB", "xdsl2LConfProfUpboPsdB"), ("VDSL2-LINE-MIB", "xdsl2LConfProfModeSpecBandUsRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    xdsl2LineConfProfModeSpecBandUsGroup = xdsl2LineConfProfModeSpecBandUsGroup.setStatus('current')
if mibBuilder.loadTexts: xdsl2LineConfProfModeSpecBandUsGroup.setDescription('The group of objects in a line configuration profile that have several per-upstream-band instances for each operation mode allowed.')
xdsl2ChConfProfileGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 251, 2, 1, 16)).setObjects(("VDSL2-LINE-MIB", "xdsl2ChConfProfMinDataRateDs"), ("VDSL2-LINE-MIB", "xdsl2ChConfProfMinDataRateUs"), ("VDSL2-LINE-MIB", "xdsl2ChConfProfMaxDataRateDs"), ("VDSL2-LINE-MIB", "xdsl2ChConfProfMaxDataRateUs"), ("VDSL2-LINE-MIB", "xdsl2ChConfProfMinDataRateLowPwrDs"), ("VDSL2-LINE-MIB", "xdsl2ChConfProfMinDataRateLowPwrUs"), ("VDSL2-LINE-MIB", "xdsl2ChConfProfMaxDelayDs"), ("VDSL2-LINE-MIB", "xdsl2ChConfProfMaxDelayUs"), ("VDSL2-LINE-MIB", "xdsl2ChConfProfMinProtectionDs"), ("VDSL2-LINE-MIB", "xdsl2ChConfProfMinProtectionUs"), ("VDSL2-LINE-MIB", "xdsl2ChConfProfMinProtection8Ds"), ("VDSL2-LINE-MIB", "xdsl2ChConfProfMinProtection8Us"), ("VDSL2-LINE-MIB", "xdsl2ChConfProfMaxBerDs"), ("VDSL2-LINE-MIB", "xdsl2ChConfProfMaxBerUs"), ("VDSL2-LINE-MIB", "xdsl2ChConfProfUsDataRateDs"), ("VDSL2-LINE-MIB", "xdsl2ChConfProfDsDataRateDs"), ("VDSL2-LINE-MIB", "xdsl2ChConfProfUsDataRateUs"), ("VDSL2-LINE-MIB", "xdsl2ChConfProfDsDataRateUs"), ("VDSL2-LINE-MIB", "xdsl2ChConfProfRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    xdsl2ChConfProfileGroup = xdsl2ChConfProfileGroup.setStatus('current')
if mibBuilder.loadTexts: xdsl2ChConfProfileGroup.setDescription('The group of objects in a channel configuration profile.')
xdsl2ChConfProfileAtmGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 251, 2, 1, 17)).setObjects(("VDSL2-LINE-MIB", "xdsl2ChConfProfImaEnabled"), ("VDSL2-LINE-MIB", "xdsl2ChStatusAtmStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    xdsl2ChConfProfileAtmGroup = xdsl2ChConfProfileAtmGroup.setStatus('current')
if mibBuilder.loadTexts: xdsl2ChConfProfileAtmGroup.setDescription('The group of configuration objects required when the data path is ATM.')
xdsl2ChConfProfileMinResGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 251, 2, 1, 18)).setObjects(("VDSL2-LINE-MIB", "xdsl2ChConfProfMinResDataRateDs"), ("VDSL2-LINE-MIB", "xdsl2ChConfProfMinResDataRateUs"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    xdsl2ChConfProfileMinResGroup = xdsl2ChConfProfileMinResGroup.setStatus('current')
if mibBuilder.loadTexts: xdsl2ChConfProfileMinResGroup.setDescription('The group of configuration objects required for the reserved data rate.')
xdsl2ChConfProfileOptAttrGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 251, 2, 1, 19)).setObjects(("VDSL2-LINE-MIB", "xdsl2ChConfProfMaxDelayVar"), ("VDSL2-LINE-MIB", "xdsl2ChConfProfInitPolicy"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    xdsl2ChConfProfileOptAttrGroup = xdsl2ChConfProfileOptAttrGroup.setStatus('current')
if mibBuilder.loadTexts: xdsl2ChConfProfileOptAttrGroup.setDescription('The group of various optional channel configuration parameters.')
xdsl2LineAlarmConfTemplateGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 251, 2, 1, 20)).setObjects(("VDSL2-LINE-MIB", "xdsl2LAlarmConfTempLineProfile"), ("VDSL2-LINE-MIB", "xdsl2LAlarmConfTempChan1ConfProfile"), ("VDSL2-LINE-MIB", "xdsl2LAlarmConfTempChan2ConfProfile"), ("VDSL2-LINE-MIB", "xdsl2LAlarmConfTempChan3ConfProfile"), ("VDSL2-LINE-MIB", "xdsl2LAlarmConfTempChan4ConfProfile"), ("VDSL2-LINE-MIB", "xdsl2LAlarmConfTempRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    xdsl2LineAlarmConfTemplateGroup = xdsl2LineAlarmConfTemplateGroup.setStatus('current')
if mibBuilder.loadTexts: xdsl2LineAlarmConfTemplateGroup.setDescription('The group of objects in a line alarm template.')
xdsl2LineAlarmConfProfileGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 251, 2, 1, 21)).setObjects(("VDSL2-LINE-MIB", "xdsl2LineAlarmConfProfileXtucThresh15MinFecs"), ("VDSL2-LINE-MIB", "xdsl2LineAlarmConfProfileXtucThresh15MinEs"), ("VDSL2-LINE-MIB", "xdsl2LineAlarmConfProfileXtucThresh15MinSes"), ("VDSL2-LINE-MIB", "xdsl2LineAlarmConfProfileXtucThresh15MinLoss"), ("VDSL2-LINE-MIB", "xdsl2LineAlarmConfProfileXtucThresh15MinUas"), ("VDSL2-LINE-MIB", "xdsl2LineAlarmConfProfileXturThresh15MinFecs"), ("VDSL2-LINE-MIB", "xdsl2LineAlarmConfProfileXturThresh15MinEs"), ("VDSL2-LINE-MIB", "xdsl2LineAlarmConfProfileXturThresh15MinSes"), ("VDSL2-LINE-MIB", "xdsl2LineAlarmConfProfileXturThresh15MinLoss"), ("VDSL2-LINE-MIB", "xdsl2LineAlarmConfProfileXturThresh15MinUas"), ("VDSL2-LINE-MIB", "xdsl2LineAlarmConfProfileThresh15MinFailedFullInt"), ("VDSL2-LINE-MIB", "xdsl2LineAlarmConfProfileThresh15MinFailedShrtInt"), ("VDSL2-LINE-MIB", "xdsl2LineAlarmConfProfileRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    xdsl2LineAlarmConfProfileGroup = xdsl2LineAlarmConfProfileGroup.setStatus('current')
if mibBuilder.loadTexts: xdsl2LineAlarmConfProfileGroup.setDescription('The group of objects in a line alarm profile.')
xdsl2ChAlarmConfProfileGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 251, 2, 1, 22)).setObjects(("VDSL2-LINE-MIB", "xdsl2ChAlarmConfProfileXtucThresh15MinCodingViolations"), ("VDSL2-LINE-MIB", "xdsl2ChAlarmConfProfileXtucThresh15MinCorrected"), ("VDSL2-LINE-MIB", "xdsl2ChAlarmConfProfileXturThresh15MinCodingViolations"), ("VDSL2-LINE-MIB", "xdsl2ChAlarmConfProfileXturThresh15MinCorrected"), ("VDSL2-LINE-MIB", "xdsl2ChAlarmConfProfileRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    xdsl2ChAlarmConfProfileGroup = xdsl2ChAlarmConfProfileGroup.setStatus('current')
if mibBuilder.loadTexts: xdsl2ChAlarmConfProfileGroup.setDescription('The group of objects in a channel alarm profile.')
xdsl2PMLineCurrGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 251, 2, 1, 23)).setObjects(("VDSL2-LINE-MIB", "xdsl2PMLCurr15MValidIntervals"), ("VDSL2-LINE-MIB", "xdsl2PMLCurr15MInvalidIntervals"), ("VDSL2-LINE-MIB", "xdsl2PMLCurr15MTimeElapsed"), ("VDSL2-LINE-MIB", "xdsl2PMLCurr15MFecs"), ("VDSL2-LINE-MIB", "xdsl2PMLCurr15MEs"), ("VDSL2-LINE-MIB", "xdsl2PMLCurr15MSes"), ("VDSL2-LINE-MIB", "xdsl2PMLCurr15MLoss"), ("VDSL2-LINE-MIB", "xdsl2PMLCurr15MUas"), ("VDSL2-LINE-MIB", "xdsl2PMLCurr1DayValidIntervals"), ("VDSL2-LINE-MIB", "xdsl2PMLCurr1DayInvalidIntervals"), ("VDSL2-LINE-MIB", "xdsl2PMLCurr1DayTimeElapsed"), ("VDSL2-LINE-MIB", "xdsl2PMLCurr1DayFecs"), ("VDSL2-LINE-MIB", "xdsl2PMLCurr1DayEs"), ("VDSL2-LINE-MIB", "xdsl2PMLCurr1DaySes"), ("VDSL2-LINE-MIB", "xdsl2PMLCurr1DayLoss"), ("VDSL2-LINE-MIB", "xdsl2PMLCurr1DayUas"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    xdsl2PMLineCurrGroup = xdsl2PMLineCurrGroup.setStatus('current')
if mibBuilder.loadTexts: xdsl2PMLineCurrGroup.setDescription('The group of objects that report the line-level counters for current PM intervals.')
xdsl2PMLineInitCurrGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 251, 2, 1, 24)).setObjects(("VDSL2-LINE-MIB", "xdsl2PMLInitCurr15MValidIntervals"), ("VDSL2-LINE-MIB", "xdsl2PMLInitCurr15MInvalidIntervals"), ("VDSL2-LINE-MIB", "xdsl2PMLInitCurr15MTimeElapsed"), ("VDSL2-LINE-MIB", "xdsl2PMLInitCurr15MFullInits"), ("VDSL2-LINE-MIB", "xdsl2PMLInitCurr15MFailedFullInits"), ("VDSL2-LINE-MIB", "xdsl2PMLInitCurr1DayValidIntervals"), ("VDSL2-LINE-MIB", "xdsl2PMLInitCurr1DayInvalidIntervals"), ("VDSL2-LINE-MIB", "xdsl2PMLInitCurr1DayTimeElapsed"), ("VDSL2-LINE-MIB", "xdsl2PMLInitCurr1DayFullInits"), ("VDSL2-LINE-MIB", "xdsl2PMLInitCurr1DayFailedFullInits"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    xdsl2PMLineInitCurrGroup = xdsl2PMLineInitCurrGroup.setStatus('current')
if mibBuilder.loadTexts: xdsl2PMLineInitCurrGroup.setDescription('The group of objects that report the full initialization counters for current PM intervals.')
xdsl2PMLineInitCurrShortGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 251, 2, 1, 25)).setObjects(("VDSL2-LINE-MIB", "xdsl2PMLInitCurr15MShortInits"), ("VDSL2-LINE-MIB", "xdsl2PMLInitCurr15MFailedShortInits"), ("VDSL2-LINE-MIB", "xdsl2PMLInitCurr1DayShortInits"), ("VDSL2-LINE-MIB", "xdsl2PMLInitCurr1DayFailedShortInits"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    xdsl2PMLineInitCurrShortGroup = xdsl2PMLineInitCurrShortGroup.setStatus('current')
if mibBuilder.loadTexts: xdsl2PMLineInitCurrShortGroup.setDescription('The group of objects that report the short initialization counters for current PM intervals.')
xdsl2PMLineHist15MinGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 251, 2, 1, 26)).setObjects(("VDSL2-LINE-MIB", "xdsl2PMLHist15MMonitoredTime"), ("VDSL2-LINE-MIB", "xdsl2PMLHist15MFecs"), ("VDSL2-LINE-MIB", "xdsl2PMLHist15MEs"), ("VDSL2-LINE-MIB", "xdsl2PMLHist15MSes"), ("VDSL2-LINE-MIB", "xdsl2PMLHist15MLoss"), ("VDSL2-LINE-MIB", "xdsl2PMLHist15MUas"), ("VDSL2-LINE-MIB", "xdsl2PMLHist15MValidInterval"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    xdsl2PMLineHist15MinGroup = xdsl2PMLineHist15MinGroup.setStatus('current')
if mibBuilder.loadTexts: xdsl2PMLineHist15MinGroup.setDescription('The group of line-level PM counters for the previous 15-minute intervals.')
xdsl2PMLineHist1DayGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 251, 2, 1, 27)).setObjects(("VDSL2-LINE-MIB", "xdsl2PMLHist1DMonitoredTime"), ("VDSL2-LINE-MIB", "xdsl2PMLHist1DFecs"), ("VDSL2-LINE-MIB", "xdsl2PMLHist1DEs"), ("VDSL2-LINE-MIB", "xdsl2PMLHist1DSes"), ("VDSL2-LINE-MIB", "xdsl2PMLHist1DLoss"), ("VDSL2-LINE-MIB", "xdsl2PMLHist1DUas"), ("VDSL2-LINE-MIB", "xdsl2PMLHist1DValidInterval"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    xdsl2PMLineHist1DayGroup = xdsl2PMLineHist1DayGroup.setStatus('current')
if mibBuilder.loadTexts: xdsl2PMLineHist1DayGroup.setDescription('The group of line-level PM counters for the previous 24-hour intervals.')
xdsl2PMLineInitHist15MinGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 251, 2, 1, 28)).setObjects(("VDSL2-LINE-MIB", "xdsl2PMLInitHist15MMonitoredTime"), ("VDSL2-LINE-MIB", "xdsl2PMLInitHist15MFullInits"), ("VDSL2-LINE-MIB", "xdsl2PMLInitHist15MFailedFullInits"), ("VDSL2-LINE-MIB", "xdsl2PMLInitHist15MValidInterval"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    xdsl2PMLineInitHist15MinGroup = xdsl2PMLineInitHist15MinGroup.setStatus('current')
if mibBuilder.loadTexts: xdsl2PMLineInitHist15MinGroup.setDescription('The group of PM counters for the previous 15-minute interval full initializations.')
xdsl2PMLineInitHist15MinShortGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 251, 2, 1, 29)).setObjects(("VDSL2-LINE-MIB", "xdsl2PMLInitHist15MShortInits"), ("VDSL2-LINE-MIB", "xdsl2PMLInitHist15MFailedShortInits"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    xdsl2PMLineInitHist15MinShortGroup = xdsl2PMLineInitHist15MinShortGroup.setStatus('current')
if mibBuilder.loadTexts: xdsl2PMLineInitHist15MinShortGroup.setDescription('The group of PM counters for the previous 15-minute interval short initializations.')
xdsl2PMLineInitHist1DayGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 251, 2, 1, 30)).setObjects(("VDSL2-LINE-MIB", "xdsl2PMLInitHist1DMonitoredTime"), ("VDSL2-LINE-MIB", "xdsl2PMLInitHist1DFullInits"), ("VDSL2-LINE-MIB", "xdsl2PMLInitHist1DFailedFullInits"), ("VDSL2-LINE-MIB", "xdsl2PMLInitHist1DValidInterval"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    xdsl2PMLineInitHist1DayGroup = xdsl2PMLineInitHist1DayGroup.setStatus('current')
if mibBuilder.loadTexts: xdsl2PMLineInitHist1DayGroup.setDescription('The group of PM counters for the previous 24-hour interval full initializations.')
xdsl2PMLineInitHist1DayShortGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 251, 2, 1, 31)).setObjects(("VDSL2-LINE-MIB", "xdsl2PMLInitHist1DShortInits"), ("VDSL2-LINE-MIB", "xdsl2PMLInitHist1DFailedShortInits"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    xdsl2PMLineInitHist1DayShortGroup = xdsl2PMLineInitHist1DayShortGroup.setStatus('current')
if mibBuilder.loadTexts: xdsl2PMLineInitHist1DayShortGroup.setDescription('The group of PM counters for the previous 24-hour interval short initializations.')
xdsl2PMChCurrGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 251, 2, 1, 32)).setObjects(("VDSL2-LINE-MIB", "xdsl2PMChCurr15MValidIntervals"), ("VDSL2-LINE-MIB", "xdsl2PMChCurr15MInvalidIntervals"), ("VDSL2-LINE-MIB", "xdsl2PMChCurr15MTimeElapsed"), ("VDSL2-LINE-MIB", "xdsl2PMChCurr15MCodingViolations"), ("VDSL2-LINE-MIB", "xdsl2PMChCurr15MCorrectedBlocks"), ("VDSL2-LINE-MIB", "xdsl2PMChCurr1DayValidIntervals"), ("VDSL2-LINE-MIB", "xdsl2PMChCurr1DayInvalidIntervals"), ("VDSL2-LINE-MIB", "xdsl2PMChCurr1DayTimeElapsed"), ("VDSL2-LINE-MIB", "xdsl2PMChCurr1DayCodingViolations"), ("VDSL2-LINE-MIB", "xdsl2PMChCurr1DayCorrectedBlocks"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    xdsl2PMChCurrGroup = xdsl2PMChCurrGroup.setStatus('current')
if mibBuilder.loadTexts: xdsl2PMChCurrGroup.setDescription('The group of objects that report the channel-level counters for current PM intervals.')
xdsl2PMChHist15MinGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 251, 2, 1, 33)).setObjects(("VDSL2-LINE-MIB", "xdsl2PMChHist15MMonitoredTime"), ("VDSL2-LINE-MIB", "xdsl2PMChHist15MCodingViolations"), ("VDSL2-LINE-MIB", "xdsl2PMChHist15MCorrectedBlocks"), ("VDSL2-LINE-MIB", "xdsl2PMChHist15MValidInterval"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    xdsl2PMChHist15MinGroup = xdsl2PMChHist15MinGroup.setStatus('current')
if mibBuilder.loadTexts: xdsl2PMChHist15MinGroup.setDescription('The group of objects that report the channel-level counters for previous 15-minute PM intervals.')
xdsl2PMChHist1DGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 251, 2, 1, 34)).setObjects(("VDSL2-LINE-MIB", "xdsl2PMChHist1DMonitoredTime"), ("VDSL2-LINE-MIB", "xdsl2PMChHist1DCodingViolations"), ("VDSL2-LINE-MIB", "xdsl2PMChHist1DCorrectedBlocks"), ("VDSL2-LINE-MIB", "xdsl2PMChHist1DValidInterval"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    xdsl2PMChHist1DGroup = xdsl2PMChHist1DGroup.setStatus('current')
if mibBuilder.loadTexts: xdsl2PMChHist1DGroup.setDescription('The group of objects that report the channel-level counters for previous 24-hour PM intervals.')
xdsl2ScalarSCGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 251, 2, 1, 35)).setObjects(("VDSL2-LINE-MIB", "xdsl2ScalarSCMaxInterfaces"), ("VDSL2-LINE-MIB", "xdsl2ScalarSCAvailInterfaces"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    xdsl2ScalarSCGroup = xdsl2ScalarSCGroup.setStatus('current')
if mibBuilder.loadTexts: xdsl2ScalarSCGroup.setDescription('The group of objects that report the available memory resources for DELT processes.')
xdsl2ThreshNotificationGroup = NotificationGroup((1, 3, 6, 1, 2, 1, 10, 251, 2, 1, 36)).setObjects(("VDSL2-LINE-MIB", "xdsl2LinePerfFECSThreshXtuc"), ("VDSL2-LINE-MIB", "xdsl2LinePerfFECSThreshXtur"), ("VDSL2-LINE-MIB", "xdsl2LinePerfESThreshXtuc"), ("VDSL2-LINE-MIB", "xdsl2LinePerfESThreshXtur"), ("VDSL2-LINE-MIB", "xdsl2LinePerfSESThreshXtuc"), ("VDSL2-LINE-MIB", "xdsl2LinePerfSESThreshXtur"), ("VDSL2-LINE-MIB", "xdsl2LinePerfLOSSThreshXtuc"), ("VDSL2-LINE-MIB", "xdsl2LinePerfLOSSThreshXtur"), ("VDSL2-LINE-MIB", "xdsl2LinePerfUASThreshXtuc"), ("VDSL2-LINE-MIB", "xdsl2LinePerfUASThreshXtur"), ("VDSL2-LINE-MIB", "xdsl2LinePerfCodingViolationsThreshXtuc"), ("VDSL2-LINE-MIB", "xdsl2LinePerfCodingViolationsThreshXtur"), ("VDSL2-LINE-MIB", "xdsl2LinePerfCorrectedThreshXtuc"), ("VDSL2-LINE-MIB", "xdsl2LinePerfCorrectedThreshXtur"), ("VDSL2-LINE-MIB", "xdsl2LinePerfFailedFullInitThresh"), ("VDSL2-LINE-MIB", "xdsl2LinePerfFailedShortInitThresh"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    xdsl2ThreshNotificationGroup = xdsl2ThreshNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: xdsl2ThreshNotificationGroup.setDescription('This group supports notifications of significant conditions associated with DSL lines.')
xdsl2StatusChangeNotificationGroup = NotificationGroup((1, 3, 6, 1, 2, 1, 10, 251, 2, 1, 37)).setObjects(("VDSL2-LINE-MIB", "xdsl2LineStatusChangeXtuc"), ("VDSL2-LINE-MIB", "xdsl2LineStatusChangeXtur"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    xdsl2StatusChangeNotificationGroup = xdsl2StatusChangeNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: xdsl2StatusChangeNotificationGroup.setDescription('This group supports notifications of thresholds crossing associated with DSL lines.')
mibBuilder.exportSymbols("VDSL2-LINE-MIB", xdsl2LineEntry=xdsl2LineEntry, xdsl2ScalarSCGroup=xdsl2ScalarSCGroup, xdsl2LineSegmentEntry=xdsl2LineSegmentEntry, xdsl2PMLineCurrGroup=xdsl2PMLineCurrGroup, xdsl2LInvSelfTestResult=xdsl2LInvSelfTestResult, xdsl2PMLCurr15MEs=xdsl2PMLCurr15MEs, xdsl2LConfProfMinSnrmDs=xdsl2LConfProfMinSnrmDs, xdsl2PMChHist1DCorrectedBlocks=xdsl2PMChHist1DCorrectedBlocks, xdsl2PM=xdsl2PM, xdsl2ChConfProfInitPolicy=xdsl2ChConfProfInitPolicy, xdsl2LineStatusActLimitMask=xdsl2LineStatusActLimitMask, xdsl2PMLInitCurr1DayTimeElapsed=xdsl2PMLInitCurr1DayTimeElapsed, xdsl2LConfProfPsdMaskDs=xdsl2LConfProfPsdMaskDs, xdsl2LineInventoryTable=xdsl2LineInventoryTable, xdsl2PMLInitHist1DFailedShortInits=xdsl2PMLInitHist1DFailedShortInits, xdsl2PMLHist1DMonitoredTime=xdsl2PMLHist1DMonitoredTime, xdsl2LConfTempChan1ConfProfile=xdsl2LConfTempChan1ConfProfile, xdsl2LConfProfL0Time=xdsl2LConfProfL0Time, xdsl2ChConfProfMinResDataRateDs=xdsl2ChConfProfMinResDataRateDs, xdsl2LineStatusActualCe=xdsl2LineStatusActualCe, xdsl2LConfProfMsgMinDs=xdsl2LConfProfMsgMinDs, xdsl2PMLHist15MValidInterval=xdsl2PMLHist15MValidInterval, xdsl2PMLInitCurr15MValidIntervals=xdsl2PMLInitCurr15MValidIntervals, xdsl2SCStatusLinScale=xdsl2SCStatusLinScale, xdsl2LConfProfMaxNomAtpDs=xdsl2LConfProfMaxNomAtpDs, xdsl2PMLCurr15MFecs=xdsl2PMLCurr15MFecs, xdsl2PMLineInitCurrGroup=xdsl2PMLineInitCurrGroup, xdsl2PMChCurrEntry=xdsl2PMChCurrEntry, xdsl2PMLCurr15MUas=xdsl2PMLCurr15MUas, xdsl2LineStatusInitResult=xdsl2LineStatusInitResult, xdsl2PMLInitHist15MFullInits=xdsl2PMLInitHist15MFullInits, xdsl2ScalarSCAvailInterfaces=xdsl2ScalarSCAvailInterfaces, xdsl2LConfProfRaDsNrmUs=xdsl2LConfProfRaDsNrmUs, xdsl2SCStatusLinScGroupSize=xdsl2SCStatusLinScGroupSize, xdsl2ChAlarmConfProfileEntry=xdsl2ChAlarmConfProfileEntry, xdsl2SCStatusBand=xdsl2SCStatusBand, xdsl2ChConfProfMaxDelayDs=xdsl2ChConfProfMaxDelayDs, xdsl2PMLineInitHist15MinGroup=xdsl2PMLineInitHist15MinGroup, xdsl2ChConfProfMaxDelayVar=xdsl2ChConfProfMaxDelayVar, xdsl2ChannelStatusGroup=xdsl2ChannelStatusGroup, xdsl2PMLineInitHist1DayGroup=xdsl2PMLineInitHist1DayGroup, xdsl2SCStatusSegmentTable=xdsl2SCStatusSegmentTable, xdsl2LConfProfLimitMask=xdsl2LConfProfLimitMask, xdsl2LConfProfUpboPsdB=xdsl2LConfProfUpboPsdB, xdsl2LineAlarmConfProfileXturThresh15MinFecs=xdsl2LineAlarmConfProfileXturThresh15MinFecs, xdsl2LineAlarmConfProfileThresh15MinFailedShrtInt=xdsl2LineAlarmConfProfileThresh15MinFailedShrtInt, xdsl2Status=xdsl2Status, xdsl2LConfProfRaModeUs=xdsl2LConfProfRaModeUs, xdsl2LConfProfRaUsTimeDs=xdsl2LConfProfRaUsTimeDs, xdsl2PMLineInitHist15MinShortGroup=xdsl2PMLineInitHist15MinShortGroup, xdsl2SCStatusAttainableRate=xdsl2SCStatusAttainableRate, xdsl2LConfProfRaDsTimeDs=xdsl2LConfProfRaDsTimeDs, xdsl2LineAlarmConfProfileEntry=xdsl2LineAlarmConfProfileEntry, xdsl2ChConfProfImaEnabled=xdsl2ChConfProfImaEnabled, xdsl2LConfProfDpboMus=xdsl2LConfProfDpboMus, xdsl2LConfProfMsgMinUs=xdsl2LConfProfMsgMinUs, xdsl2LineAlarmConfProfileName=xdsl2LineAlarmConfProfileName, xdsl2LineAlarmConfTemplate=xdsl2LineAlarmConfTemplate, xdsl2LineStatusLastStateUs=xdsl2LineStatusLastStateUs, xdsl2PMChHist1DGroup=xdsl2PMChHist1DGroup, xdsl2LinePerfCorrectedThreshXtuc=xdsl2LinePerfCorrectedThreshXtuc, xdsl2PMChCurr1DayCodingViolations=xdsl2PMChCurr1DayCodingViolations, xdsl2LInvSystemVendorId=xdsl2LInvSystemVendorId, xdsl2LConfProfCeFlag=xdsl2LConfProfCeFlag, xdsl2LConfTempChan1RaRatioUs=xdsl2LConfTempChan1RaRatioUs, xdsl2Compliances=xdsl2Compliances, xdsl2ChannelStatusPtmGroup=xdsl2ChannelStatusPtmGroup, xdsl2LConfProfUpboPsdA=xdsl2LConfProfUpboPsdA, xdsl2LinePerfCorrectedThreshXtur=xdsl2LinePerfCorrectedThreshXtur, xdsl2ChAlarmConfProfileTable=xdsl2ChAlarmConfProfileTable, xdsl2LAlarmConfTempRowStatus=xdsl2LAlarmConfTempRowStatus, xdsl2LineBandStatusLnAtten=xdsl2LineBandStatusLnAtten, xdsl2LineAlarmConfProfileXtucThresh15MinEs=xdsl2LineAlarmConfProfileXtucThresh15MinEs, xdsl2PMChHist15MinGroup=xdsl2PMChHist15MinGroup, xdsl2LConfTempTemplateName=xdsl2LConfTempTemplateName, xdsl2PMLCurr15MTimeElapsed=xdsl2PMLCurr15MTimeElapsed, xdsl2LConfProfTxRefVnUs=xdsl2LConfProfTxRefVnUs, xdsl2LineStatusActSnrModeUs=xdsl2LineStatusActSnrModeUs, xdsl2LineStatusXtuTransSys=xdsl2LineStatusXtuTransSys, xdsl2LineStatusActAtpUs=xdsl2LineStatusActAtpUs, xdsl2LineStatusChangeXtuc=xdsl2LineStatusChangeXtuc, xdsl2PMLInitCurr1DayFailedShortInits=xdsl2PMLInitCurr1DayFailedShortInits, xdsl2ChAlarmConfProfileGroup=xdsl2ChAlarmConfProfileGroup, xdsl2LConfProfRaUsNrmUs=xdsl2LConfProfRaUsNrmUs, xdsl2LConfProfMaxSnrmDs=xdsl2LConfProfMaxSnrmDs, xdsl2LineSegmentTable=xdsl2LineSegmentTable, xdsl2LineAlarmConfProfileXturThresh15MinLoss=xdsl2LineAlarmConfProfileXturThresh15MinLoss, xdsl2LinePerfCodingViolationsThreshXtuc=xdsl2LinePerfCodingViolationsThreshXtuc, xdsl2PMChHist15MValidInterval=xdsl2PMChHist15MValidInterval, xdsl2LinePerfESThreshXtuc=xdsl2LinePerfESThreshXtuc, xdsl2PMChCurr15MCodingViolations=xdsl2PMChCurr15MCodingViolations, xdsl2PMLInitHist1DShortInits=xdsl2PMLInitHist1DShortInits, xdsl2LAlarmConfTempLineProfile=xdsl2LAlarmConfTempLineProfile, xdsl2ChConfProfUsDataRateDs=xdsl2ChConfProfUsDataRateDs, xdsl2LinePerfLOSSThreshXtuc=xdsl2LinePerfLOSSThreshXtuc, xdsl2SCStatusSegment=xdsl2SCStatusSegment, xdsl2PMLInitHist1DValidInterval=xdsl2PMLInitHist1DValidInterval, xdsl2PMLInitHist15MShortInits=xdsl2PMLInitHist15MShortInits, xdsl2LineCmndAutomodeColdStart=xdsl2LineCmndAutomodeColdStart, xdsl2PMLHist1DSes=xdsl2PMLHist1DSes, xdsl2ChConfProfMinProtectionUs=xdsl2ChConfProfMinProtectionUs, xdsl2ChConfProfMaxDelayUs=xdsl2ChConfProfMaxDelayUs, xdsl2LineAlarmConfProfileXturThresh15MinSes=xdsl2LineAlarmConfProfileXturThresh15MinSes, xdsl2LineConfProfModeSpecBandUsTable=xdsl2LineConfProfModeSpecBandUsTable, xdsl2PMLInitHist1DMonitoredTime=xdsl2PMLInitHist1DMonitoredTime, xdsl2SCStatusBandEntry=xdsl2SCStatusBandEntry, xdsl2LConfProfVdsl2CarMask=xdsl2LConfProfVdsl2CarMask, xdsl2LConfTempChan3RaRatioDs=xdsl2LConfTempChan3RaRatioDs, xdsl2PMLInitHist15MMonitoredTime=xdsl2PMLInitHist15MMonitoredTime, xdsl2PMLInitCurr15MTimeElapsed=xdsl2PMLInitCurr15MTimeElapsed, xdsl2LineConfProfModeSpecBandUsGroup=xdsl2LineConfProfModeSpecBandUsGroup, xdsl2LConfProfXdslMode=xdsl2LConfProfXdslMode, xdsl2LConfTempChan4ConfProfile=xdsl2LConfTempChan4ConfProfile, xdsl2LineAlarmConfProfileThresh15MinFailedFullInt=xdsl2LineAlarmConfProfileThresh15MinFailedFullInt, xdsl2PMLineInitHist1DayEntry=xdsl2PMLineInitHist1DayEntry, xdsl2SCStatusSegmentLinReal=xdsl2SCStatusSegmentLinReal, xdsl2LineStatusAttainableRateDs=xdsl2LineStatusAttainableRateDs, xdsl2LConfTempChan2RaRatioDs=xdsl2LConfTempChan2RaRatioDs, xdsl2LineMibCompliance=xdsl2LineMibCompliance, xdsl2LinePerfUASThreshXtuc=xdsl2LinePerfUASThreshXtuc, xdsl2ChStatusUnit=xdsl2ChStatusUnit, xdsl2ChAlarmConfProfileXturThresh15MinCodingViolations=xdsl2ChAlarmConfProfileXturThresh15MinCodingViolations, xdsl2LConfTempChan1RaRatioDs=xdsl2LConfTempChan1RaRatioDs, xdsl2SCStatusEntry=xdsl2SCStatusEntry, xdsl2LInvTransmissionCapabilities=xdsl2LInvTransmissionCapabilities, xdsl2LConfProfL2Time=xdsl2LConfProfL2Time, xdsl2LineStatusTrellisDs=xdsl2LineStatusTrellisDs, xdsl2Conformance=xdsl2Conformance, xdsl2ChConfProfRowStatus=xdsl2ChConfProfRowStatus, xdsl2SCStatusGroup=xdsl2SCStatusGroup, xdsl2PMLInitCurr15MInvalidIntervals=xdsl2PMLInitCurr15MInvalidIntervals, xdsl2LConfProfTargetSnrmUs=xdsl2LConfProfTargetSnrmUs, xdsl2LineConfProfModeSpecGroup=xdsl2LineConfProfModeSpecGroup, xdsl2LineStatusXtur=xdsl2LineStatusXtur, xdsl2LConfTempChan3RaRatioUs=xdsl2LConfTempChan3RaRatioUs, xdsl2PMChHist1DCodingViolations=xdsl2PMChHist1DCodingViolations, xdsl2PMLInitHist1DInterval=xdsl2PMLInitHist1DInterval, xdsl2PMLHist15MFecs=xdsl2PMLHist15MFecs, xdsl2LConfProfForceInp=xdsl2LConfProfForceInp, xdsl2ChStatusIntlvBlock=xdsl2ChStatusIntlvBlock, xdsl2PMChHist15MinTable=xdsl2PMChHist15MinTable, xdsl2LConfProfMaxNomPsdDs=xdsl2LConfProfMaxNomPsdDs, xdsl2PMChHist15MMonitoredTime=xdsl2PMChHist15MMonitoredTime, xdsl2Profile=xdsl2Profile, xdsl2PMLCurrUnit=xdsl2PMLCurrUnit, xdsl2PMLHist1DLoss=xdsl2PMLHist1DLoss, xdsl2PMLHist1DUnit=xdsl2PMLHist1DUnit, xdsl2ChStatusPtmStatus=xdsl2ChStatusPtmStatus, xdsl2SCStatusBandLnAtten=xdsl2SCStatusBandLnAtten, xdsl2LineBandStatusSigAtten=xdsl2LineBandStatusSigAtten, xdsl2LInvG994VendorId=xdsl2LInvG994VendorId, xdsl2LineAlarmConfProfileXtucThresh15MinLoss=xdsl2LineAlarmConfProfileXtucThresh15MinLoss, xdsl2LinePerfFailedFullInitThresh=xdsl2LinePerfFailedFullInitThresh, xdsl2LineStatusActPsdDs=xdsl2LineStatusActPsdDs, xdsl2LConfProfDpboEsCableModelA=xdsl2LConfProfDpboEsCableModelA, xdsl2LineStatusActPsdUs=xdsl2LineStatusActPsdUs, xdsl2LinePerfSESThreshXtuc=xdsl2LinePerfSESThreshXtuc, xdsl2PMLCurr1DayTimeElapsed=xdsl2PMLCurr1DayTimeElapsed, xdsl2PMChHist1DMonitoredTime=xdsl2PMChHist1DMonitoredTime, xdsl2LConfProfSnrModeDs=xdsl2LConfProfSnrModeDs, xdsl2ChAlarmConfProfileXtucThresh15MinCorrected=xdsl2ChAlarmConfProfileXtucThresh15MinCorrected, xdsl2ChConfProfDsDataRateUs=xdsl2ChConfProfDsDataRateUs, xdsl2PMChCurr15MInvalidIntervals=xdsl2PMChCurr15MInvalidIntervals, xdsl2LinePerfFailedShortInitThresh=xdsl2LinePerfFailedShortInitThresh, xdsl2PMLHist1DFecs=xdsl2PMLHist1DFecs, xdsl2LineCmndConfBpsc=xdsl2LineCmndConfBpsc, xdsl2ChAlarmConfProfileXturThresh15MinCorrected=xdsl2ChAlarmConfProfileXturThresh15MinCorrected, xdsl2LineConfProfMsgMinGroup=xdsl2LineConfProfMsgMinGroup, xdsl2LineConfProfRaGroup=xdsl2LineConfProfRaGroup, xdsl2LConfProfRaModeDs=xdsl2LConfProfRaModeDs, xdsl2LineSegmentDirection=xdsl2LineSegmentDirection, xdsl2PMLInitHist15MInterval=xdsl2PMLInitHist15MInterval, xdsl2SCStatusSegmentQln=xdsl2SCStatusSegmentQln, xdsl2PMLInitCurr1DayValidIntervals=xdsl2PMLInitCurr1DayValidIntervals, xdsl2LineAlarmConfProfileXturThresh15MinUas=xdsl2LineAlarmConfProfileXturThresh15MinUas, xdsl2PMLCurr15MInvalidIntervals=xdsl2PMLCurr15MInvalidIntervals, xdsl2Notifications=xdsl2Notifications, xdsl2LineConfProfTable=xdsl2LineConfProfTable, xdsl2LConfProfPsdMaskSelectUs=xdsl2LConfProfPsdMaskSelectUs, xdsl2SCStatusBandTable=xdsl2SCStatusBandTable, xdsl2PMLHist1DValidInterval=xdsl2PMLHist1DValidInterval, xdsl2SCStatusSegmentGainAlloc=xdsl2SCStatusSegmentGainAlloc, xdsl2LineBandStatusSnrMargin=xdsl2LineBandStatusSnrMargin, xdsl2PMLInitHist15MFailedShortInits=xdsl2PMLInitHist15MFailedShortInits, xdsl2PMLineInitHist15MinEntry=xdsl2PMLineInitHist15MinEntry, xdsl2LineAlarmConfProfileXtucThresh15MinFecs=xdsl2LineAlarmConfProfileXtucThresh15MinFecs, xdsl2PMChHist1DTable=xdsl2PMChHist1DTable, xdsl2PMLHist15MEs=xdsl2PMLHist15MEs, xdsl2PMLCurr15MSes=xdsl2PMLCurr15MSes, xdsl2ChStatusNFec=xdsl2ChStatusNFec, xdsl2LineFallbackGroup=xdsl2LineFallbackGroup, xdsl2PMChCurr15MCorrectedBlocks=xdsl2PMChCurr15MCorrectedBlocks, xdsl2PMChHist15MCorrectedBlocks=xdsl2PMChHist15MCorrectedBlocks, xdsl2SCStatusBandSigAtten=xdsl2SCStatusBandSigAtten, xdsl2PMChCurr1DayCorrectedBlocks=xdsl2PMChCurr1DayCorrectedBlocks, xdsl2LineAlarmConfTemplateGroup=xdsl2LineAlarmConfTemplateGroup, xdsl2PMChannel=xdsl2PMChannel, xdsl2PMChCurrUnit=xdsl2PMChCurrUnit, xdsl2PMChHist15MInterval=xdsl2PMChHist15MInterval, xdsl2LConfProfScMaskDs=xdsl2LConfProfScMaskDs, xdsl2LineTable=xdsl2LineTable, xdsl2LineCmndConfLdsfFailReason=xdsl2LineCmndConfLdsfFailReason, xdsl2LConfProfProfiles=xdsl2LConfProfProfiles, xdsl2ChConfProfMaxDataRateDs=xdsl2ChConfProfMaxDataRateDs, xdsl2PMLHist1DInterval=xdsl2PMLHist1DInterval, xdsl2PMChCurrTable=xdsl2PMChCurrTable, xdsl2PMLCurr1DayFecs=xdsl2PMLCurr1DayFecs, xdsl2PMLineInitCurrEntry=xdsl2PMLineInitCurrEntry, xdsl2LInvUnit=xdsl2LInvUnit, xdsl2LineAlarmConfProfileGroup=xdsl2LineAlarmConfProfileGroup, xdsl2LConfProfL2Atpr=xdsl2LConfProfL2Atpr, xdsl2SCStatusSnrMtime=xdsl2SCStatusSnrMtime, xdsl2ChAlarmConfProfileName=xdsl2ChAlarmConfProfileName, xdsl2LAlarmConfTempTemplateName=xdsl2LAlarmConfTempTemplateName, xdsl2ChStatusActInp=xdsl2ChStatusActInp, xdsl2ChStatusLSymb=xdsl2ChStatusLSymb, xdsl2PMLInitCurr1DayFullInits=xdsl2PMLInitCurr1DayFullInits, xdsl2LineAlarmConfProfileTable=xdsl2LineAlarmConfProfileTable, xdsl2SCStatusTable=xdsl2SCStatusTable, xdsl2LineConfProfModeSpecTable=xdsl2LineConfProfModeSpecTable, xdsl2SCStatusSegmentEntry=xdsl2SCStatusSegmentEntry, xdsl2LConfProfUs0Disable=xdsl2LConfProfUs0Disable, vdsl2MIB=vdsl2MIB, xdsl2PMLInitCurr1DayFailedFullInits=xdsl2PMLInitCurr1DayFailedFullInits, xdsl2PMLineInitCurrTable=xdsl2PMLineInitCurrTable, xdsl2LConfProfRfiBands=xdsl2LConfProfRfiBands, xdsl2PMLInitHist1DFullInits=xdsl2PMLInitHist1DFullInits, xdsl2LConfProfModeSpecRowStatus=xdsl2LConfProfModeSpecRowStatus, xdsl2PMLCurr1DayEs=xdsl2PMLCurr1DayEs, xdsl2PMLineInitHist15MinTable=xdsl2PMLineInitHist15MinTable, xdsl2PMChCurr1DayValidIntervals=xdsl2PMChCurr1DayValidIntervals, xdsl2LinePerfESThreshXtur=xdsl2LinePerfESThreshXtur, xdsl2LConfProfDpboEsCableModelB=xdsl2LConfProfDpboEsCableModelB, xdsl2ChConfProfileMinResGroup=xdsl2ChConfProfileMinResGroup, xdsl2LineAlarmConfTemplateEntry=xdsl2LineAlarmConfTemplateEntry, xdsl2LConfProfMaxNomAtpUs=xdsl2LConfProfMaxNomAtpUs, xdsl2PMLineHist15MinTable=xdsl2PMLineHist15MinTable, xdsl2LineStatusXtuc=xdsl2LineStatusXtuc, xdsl2PMLineCurrEntry=xdsl2PMLineCurrEntry, xdsl2LineAlarmConfProfileRowStatus=xdsl2LineAlarmConfProfileRowStatus, xdsl2PMChCurr1DayTimeElapsed=xdsl2PMChCurr1DayTimeElapsed, PYSNMP_MODULE_ID=vdsl2MIB, xdsl2LAlarmConfTempChan3ConfProfile=xdsl2LAlarmConfTempChan3ConfProfile, xdsl2LineStatusActAtpDs=xdsl2LineStatusActAtpDs, xdsl2ChannelStatusEntry=xdsl2ChannelStatusEntry, xdsl2ChConfProfMinResDataRateUs=xdsl2ChConfProfMinResDataRateUs, xdsl2LineStatusActSnrModeDs=xdsl2LineStatusActSnrModeDs, xdsl2StatusChangeNotificationGroup=xdsl2StatusChangeNotificationGroup, xdsl2LineStatusMrefPsdDs=xdsl2LineStatusMrefPsdDs, xdsl2LineAlarmConfProfileXturThresh15MinEs=xdsl2LineAlarmConfProfileXturThresh15MinEs, xdsl2LinePerfFECSThreshXtur=xdsl2LinePerfFECSThreshXtur, xdsl2LineStatusChangeXtur=xdsl2LineStatusChangeXtur, xdsl2SCStatusQlnMt=xdsl2SCStatusQlnMt, xdsl2SCStatusSegmentSnr=xdsl2SCStatusSegmentSnr)
mibBuilder.exportSymbols("VDSL2-LINE-MIB", xdsl2LConfProfL2Atprt=xdsl2LConfProfL2Atprt, xdsl2PMChHist1DEntry=xdsl2PMChHist1DEntry, xdsl2LineConfTemplateTable=xdsl2LineConfTemplateTable, xdsl2ChStatusActDelay=xdsl2ChStatusActDelay, xdsl2ChConfProfDsDataRateDs=xdsl2ChConfProfDsDataRateDs, xdsl2LineCmndConfReset=xdsl2LineCmndConfReset, xdsl2PMLInitCurr15MFullInits=xdsl2PMLInitCurr15MFullInits, xdsl2LineInventoryGroup=xdsl2LineInventoryGroup, xdsl2LineConfFallbackTemplate=xdsl2LineConfFallbackTemplate, xdsl2LineStatusPwrMngState=xdsl2LineStatusPwrMngState, xdsl2LinePerfCodingViolationsThreshXtur=xdsl2LinePerfCodingViolationsThreshXtur, xdsl2PMChCurr15MValidIntervals=xdsl2PMChCurr15MValidIntervals, xdsl2LineInventoryEntry=xdsl2LineInventoryEntry, xdsl2ProfileChannel=xdsl2ProfileChannel, xdsl2LinePerfSESThreshXtur=xdsl2LinePerfSESThreshXtur, xdsl2PMLineInitHist1DayShortGroup=xdsl2PMLineInitHist1DayShortGroup, xdsl2LConfProfXdslBandUs=xdsl2LConfProfXdslBandUs, xdsl2LConfProfPsdMaskUs=xdsl2LConfProfPsdMaskUs, xdsl2LineCmndConfLdsf=xdsl2LineCmndConfLdsf, xdsl2LineStatusLastStateDs=xdsl2LineStatusLastStateDs, xdsl2PMLInitCurr1DayShortInits=xdsl2PMLInitCurr1DayShortInits, xdsl2LineSegment=xdsl2LineSegment, xdsl2LConfProfTargetSnrmDs=xdsl2LConfProfTargetSnrmDs, xdsl2PMChHist1DInterval=xdsl2PMChHist1DInterval, xdsl2ChStatusRFec=xdsl2ChStatusRFec, xdsl2LineConfTemplateEntry=xdsl2LineConfTemplateEntry, xdsl2LConfProfUpboKLF=xdsl2LConfProfUpboKLF, xdsl2PMLInitCurr15MFailedFullInits=xdsl2PMLInitCurr15MFailedFullInits, xdsl2LInvSerialNumber=xdsl2LInvSerialNumber, xdsl2PMLHist15MInterval=xdsl2PMLHist15MInterval, xdsl2LConfTempChan2RaRatioUs=xdsl2LConfTempChan2RaRatioUs, xdsl2PMLHist1DEs=xdsl2PMLHist1DEs, xdsl2PMLInitCurr15MFailedShortInits=xdsl2PMLInitCurr15MFailedShortInits, xdsl2PMLHist15MLoss=xdsl2PMLHist15MLoss, xdsl2LConfProfPmMode=xdsl2LConfProfPmMode, xdsl2ProfileAlarmConf=xdsl2ProfileAlarmConf, xdsl2SCStatusLogMt=xdsl2SCStatusLogMt, xdsl2ScalarSCMaxInterfaces=xdsl2ScalarSCMaxInterfaces, xdsl2LineStatusActProfile=xdsl2LineStatusActProfile, xdsl2ChConfProfileTable=xdsl2ChConfProfileTable, xdsl2ChConfProfileGroup=xdsl2ChConfProfileGroup, xdsl2LineStatusAttainableRateUs=xdsl2LineStatusAttainableRateUs, xdsl2LineStatusActUs0Mask=xdsl2LineStatusActUs0Mask, xdsl2LineAlarmConfProfileXtucThresh15MinSes=xdsl2LineAlarmConfProfileXtucThresh15MinSes, xdsl2PMLineHist1DayGroup=xdsl2PMLineHist1DayGroup, xdsl2LineAlarmConfProfileXtucThresh15MinUas=xdsl2LineAlarmConfProfileXtucThresh15MinUas, xdsl2LConfProfDpboEsCableModelC=xdsl2LConfProfDpboEsCableModelC, xdsl2LConfProfUpboKL=xdsl2LConfProfUpboKL, xdsl2PMLine=xdsl2PMLine, xdsl2ChConfProfMaxBerDs=xdsl2ChConfProfMaxBerDs, xdsl2LAlarmConfTempChan1ConfProfile=xdsl2LAlarmConfTempChan1ConfProfile, xdsl2PMLHist15MSes=xdsl2PMLHist15MSes, xdsl2PMChHist15MUnit=xdsl2PMChHist15MUnit, xdsl2Scalar=xdsl2Scalar, xdsl2PMLineInitHist1DayTable=xdsl2PMLineInitHist1DayTable, xdsl2PMLCurr1DayUas=xdsl2PMLCurr1DayUas, xdsl2ChConfProfMinDataRateUs=xdsl2ChConfProfMinDataRateUs, xdsl2PMLineHist1DayTable=xdsl2PMLineHist1DayTable, xdsl2Inventory=xdsl2Inventory, xdsl2PMLCurr1DaySes=xdsl2PMLCurr1DaySes, xdsl2LineConfProfGroup=xdsl2LineConfProfGroup, xdsl2LConfProfDpboEsEL=xdsl2LConfProfDpboEsEL, xdsl2SCStatusSegmentLinImg=xdsl2SCStatusSegmentLinImg, xdsl2ChConfProfMinDataRateLowPwrUs=xdsl2ChConfProfMinDataRateLowPwrUs, xdsl2LineSegmentBitsAlloc=xdsl2LineSegmentBitsAlloc, xdsl2Groups=xdsl2Groups, xdsl2ChConfProfileEntry=xdsl2ChConfProfileEntry, xdsl2LAlarmConfTempChan4ConfProfile=xdsl2LAlarmConfTempChan4ConfProfile, xdsl2LConfProfRowStatus=xdsl2LConfProfRowStatus, xdsl2PMLInitHist15MFailedFullInits=xdsl2PMLInitHist15MFailedFullInits, xdsl2LineGroup=xdsl2LineGroup, xdsl2ChConfProfMaxBerUs=xdsl2ChConfProfMaxBerUs, xdsl2PMLCurr15MValidIntervals=xdsl2PMLCurr15MValidIntervals, xdsl2ProfileLine=xdsl2ProfileLine, xdsl2PMLInitCurr1DayInvalidIntervals=xdsl2PMLInitCurr1DayInvalidIntervals, xdsl2ChStatusInpReport=xdsl2ChStatusInpReport, xdsl2Line=xdsl2Line, xdsl2ChStatusPrevDataRate=xdsl2ChStatusPrevDataRate, xdsl2LInvVersionNumber=xdsl2LInvVersionNumber, xdsl2PMLineHist15MinGroup=xdsl2PMLineHist15MinGroup, xdsl2PMChHist1DValidInterval=xdsl2PMChHist1DValidInterval, xdsl2PMChCurr1DayInvalidIntervals=xdsl2PMChCurr1DayInvalidIntervals, xdsl2ChAlarmConfProfileXtucThresh15MinCodingViolations=xdsl2ChAlarmConfProfileXtucThresh15MinCodingViolations, xdsl2PMLineCurrTable=xdsl2PMLineCurrTable, xdsl2PMLCurr1DayValidIntervals=xdsl2PMLCurr1DayValidIntervals, xdsl2LineCmndConfBpscRequests=xdsl2LineCmndConfBpscRequests, xdsl2PMChCurrGroup=xdsl2PMChCurrGroup, xdsl2PMLHist15MUas=xdsl2PMLHist15MUas, xdsl2LConfProfSnrModeUs=xdsl2LConfProfSnrModeUs, xdsl2LConfProfMinSnrmUs=xdsl2LConfProfMinSnrmUs, xdsl2PMLInitCurr15MShortInits=xdsl2PMLInitCurr15MShortInits, xdsl2LConfProfClassMask=xdsl2LConfProfClassMask, xdsl2PMLInitHist15MValidInterval=xdsl2PMLInitHist15MValidInterval, xdsl2LineCmndConfBpscFailReason=xdsl2LineCmndConfBpscFailReason, xdsl2LineConfProfModeSpecBandUsEntry=xdsl2LineConfProfModeSpecBandUsEntry, xdsl2LineBandTable=xdsl2LineBandTable, xdsl2ChannelStatusAtmGroup=xdsl2ChannelStatusAtmGroup, xdsl2PMLInitHist1DFailedFullInits=xdsl2PMLInitHist1DFailedFullInits, xdsl2LineConfTemplateGroup=xdsl2LineConfTemplateGroup, xdsl2ChannelStatusTable=xdsl2ChannelStatusTable, xdsl2LConfProfRaDsNrmDs=xdsl2LConfProfRaDsNrmDs, xdsl2LineStatusTssiUs=xdsl2LineStatusTssiUs, xdsl2SCStatusSegmentLog=xdsl2SCStatusSegmentLog, xdsl2PMLCurr1DayLoss=xdsl2PMLCurr1DayLoss, xdsl2PMLCurr1DayInvalidIntervals=xdsl2PMLCurr1DayInvalidIntervals, xdsl2ThreshNotificationGroup=xdsl2ThreshNotificationGroup, xdsl2LineSegmentGroup=xdsl2LineSegmentGroup, xdsl2LConfProfMaxSnrmUs=xdsl2LConfProfMaxSnrmUs, xdsl2LinePerfUASThreshXtur=xdsl2LinePerfUASThreshXtur, xdsl2ChStatusIntlvDepth=xdsl2ChStatusIntlvDepth, xdsl2LineStatusElectricalLength=xdsl2LineStatusElectricalLength, xdsl2LConfProfRaDsTimeUs=xdsl2LConfProfRaDsTimeUs, xdsl2LineConfProfEntry=xdsl2LineConfProfEntry, xdsl2ChConfProfMinDataRateDs=xdsl2ChConfProfMinDataRateDs, xdsl2LConfTempRowStatus=xdsl2LConfTempRowStatus, xdsl2LConfTempLineProfile=xdsl2LConfTempLineProfile, xdsl2LConfProfDpboFMax=xdsl2LConfProfDpboFMax, xdsl2LineConfTemplate=xdsl2LineConfTemplate, xdsl2Objects=xdsl2Objects, xdsl2LConfProfXtuTransSysEna=xdsl2LConfProfXtuTransSysEna, xdsl2LConfProfMaxNomPsdUs=xdsl2LConfProfMaxNomPsdUs, xdsl2ChStatusActDataRate=xdsl2ChStatusActDataRate, xdsl2SCStatusSegmentBitsAlloc=xdsl2SCStatusSegmentBitsAlloc, xdsl2LConfProfMaxAggRxPwrUs=xdsl2LConfProfMaxAggRxPwrUs, xdsl2ChStatusLPath=xdsl2ChStatusLPath, xdsl2LConfTempChan4RaRatioDs=xdsl2LConfTempChan4RaRatioDs, xdsl2PMLineHist1DayEntry=xdsl2PMLineHist1DayEntry, xdsl2ChAlarmConfProfileRowStatus=xdsl2ChAlarmConfProfileRowStatus, xdsl2LConfProfDpboEPsd=xdsl2LConfProfDpboEPsd, xdsl2ChConfProfUsDataRateUs=xdsl2ChConfProfUsDataRateUs, xdsl2PMChHist15MinEntry=xdsl2PMChHist15MinEntry, xdsl2PMChCurr15MTimeElapsed=xdsl2PMChCurr15MTimeElapsed, xdsl2LConfProfUs0Mask=xdsl2LConfProfUs0Mask, xdsl2SCStatusDirection=xdsl2SCStatusDirection, xdsl2LConfTempChan2ConfProfile=xdsl2LConfTempChan2ConfProfile, xdsl2ScalarSC=xdsl2ScalarSC, xdsl2LConfProfModeSpecBandUsRowStatus=xdsl2LConfProfModeSpecBandUsRowStatus, xdsl2PMChHist1DUnit=xdsl2PMChHist1DUnit, xdsl2LineSegmentRowStatus=xdsl2LineSegmentRowStatus, xdsl2LineCmndConfPmsf=xdsl2LineCmndConfPmsf, xdsl2PMLineHist15MinEntry=xdsl2PMLineHist15MinEntry, xdsl2ChConfProfMinProtection8Ds=xdsl2ChConfProfMinProtection8Ds, xdsl2LConfProfDpboFMin=xdsl2LConfProfDpboFMin, xdsl2PMLHist1DUas=xdsl2PMLHist1DUas, xdsl2LConfProfScMaskUs=xdsl2LConfProfScMaskUs, xdsl2LineStatusActTemplate=xdsl2LineStatusActTemplate, xdsl2LConfProfRaUsNrmDs=xdsl2LConfProfRaUsNrmDs, xdsl2LineStatusTssiDs=xdsl2LineStatusTssiDs, xdsl2PMLHist15MUnit=xdsl2PMLHist15MUnit, xdsl2ChConfProfProfileName=xdsl2ChConfProfProfileName, xdsl2LineBandEntry=xdsl2LineBandEntry, xdsl2LineConfProfModeSpecEntry=xdsl2LineConfProfModeSpecEntry, xdsl2ChConfProfMaxDataRateUs=xdsl2ChConfProfMaxDataRateUs, xdsl2ChConfProfMinProtectionDs=xdsl2ChConfProfMinProtectionDs, xdsl2ChConfProfMinDataRateLowPwrDs=xdsl2ChConfProfMinDataRateLowPwrDs, xdsl2SCStatusLogScGroupSize=xdsl2SCStatusLogScGroupSize, xdsl2LinePerfLOSSThreshXtur=xdsl2LinePerfLOSSThreshXtur, xdsl2LConfTempChan4RaRatioUs=xdsl2LConfTempChan4RaRatioUs, xdsl2ChStatusAtmStatus=xdsl2ChStatusAtmStatus, xdsl2LineStatusMrefPsdUs=xdsl2LineStatusMrefPsdUs, xdsl2ChConfProfileAtmGroup=xdsl2ChConfProfileAtmGroup, xdsl2PMChHist15MCodingViolations=xdsl2PMChHist15MCodingViolations, xdsl2LineAlarmConfTemplateTable=xdsl2LineAlarmConfTemplateTable, xdsl2SCStatusQlnScGroupSize=xdsl2SCStatusQlnScGroupSize, xdsl2LineStatusTrellisUs=xdsl2LineStatusTrellisUs, xdsl2LConfProfTxRefVnDs=xdsl2LConfProfTxRefVnDs, xdsl2ChConfProfMinProtection8Us=xdsl2ChConfProfMinProtection8Us, xdsl2PMLineInitCurrShortGroup=xdsl2PMLineInitCurrShortGroup, xdsl2ChConfProfileOptAttrGroup=xdsl2ChConfProfileOptAttrGroup, xdsl2SCStatusRowStatus=xdsl2SCStatusRowStatus, xdsl2PMLHist15MMonitoredTime=xdsl2PMLHist15MMonitoredTime, xdsl2LConfProfProfileName=xdsl2LConfProfProfileName, xdsl2LConfProfRaUsTimeUs=xdsl2LConfProfRaUsTimeUs, xdsl2LineBpscGroup=xdsl2LineBpscGroup, xdsl2LineBand=xdsl2LineBand, xdsl2SCStatusSnrScGroupSize=xdsl2SCStatusSnrScGroupSize, xdsl2LinePerfFECSThreshXtuc=xdsl2LinePerfFECSThreshXtuc, xdsl2LConfTempChan3ConfProfile=xdsl2LConfTempChan3ConfProfile, xdsl2LAlarmConfTempChan2ConfProfile=xdsl2LAlarmConfTempChan2ConfProfile, xdsl2PMLCurr15MLoss=xdsl2PMLCurr15MLoss)
