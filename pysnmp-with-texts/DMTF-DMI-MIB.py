#
# PySNMP MIB module DMTF-DMI-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DMTF-DMI-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:34:29 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
MibIdentifier, ModuleIdentity, Bits, ObjectIdentity, NotificationType, enterprises, Unsigned32, Gauge32, TimeTicks, IpAddress, Counter64, Counter32, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, iso = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "ModuleIdentity", "Bits", "ObjectIdentity", "NotificationType", "enterprises", "Unsigned32", "Gauge32", "TimeTicks", "IpAddress", "Counter64", "Counter32", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
dmtf = MibIdentifier((1, 3, 6, 1, 4, 1, 412))
dmiMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 412, 1))
dmiMIB.setRevisions(('1995-07-13 20:00', '1997-10-22 18:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: dmiMIB.setRevisionsDescriptions(('Draft proposed to DMTF as Remote DMI method, but not pursued further. (Bostock)', "Resurrected to bridge the co-existance gap between SNMP and DMI management frameworks in enterprise environments. Updated to reflect DMI 2.0 changes; including: formal SNMP pragma statement, final DMI event generation template and indications, new DMTF standard MIFs, plus allowance for remote SNMP/DMI proxy support. Also revised to use SNMPv2 SMI. (O'Keefe)",))
if mibBuilder.loadTexts: dmiMIB.setLastUpdated('9710221800Z')
if mibBuilder.loadTexts: dmiMIB.setOrganization('DMTF SNMP/DMI Mapping Working Committee')
if mibBuilder.loadTexts: dmiMIB.setContactInfo(" Brian O'Keefe Postal: Hewlett-Packard Company, Inc. 3404 East Harmony Road, M/S A2 Fort Collins, CO 80528 Tel: +1 970 898 4303 Fax: +1 970 898 2038 E-mail: brian_okeefe@hp.com Bok@cnd.hp.com Steve Bostock Postal: Novell, Inc. 2180 Fortune Drive M/S F5-92-2 San Jose, CA 95131 Tel: +1 408 577 8203 Fax: +1 408 577 5706 E-mail: steveb@novell.com Steve_Bostock@novell.com ")
if mibBuilder.loadTexts: dmiMIB.setDescription('The DMTF DMI MIB provides the framework for accessing DMI instrumented information and receiving DMI indications through an SNMP/DMI Mapping Agent. This MIB contains the following definitions: 1. A set of Textual Conventions used within this MIB and to be available for IMPORT by other MIBs created with the MIF-to-MIB mapping procedures. 2. A set of SNMP tables that model the DMI MI List Commands. These tables provide access to information about the DMI components and groups installed on the managed system; plus the MIF meta-data for the corresponding DMI classes. 3. A set of definitions that model the DMI Indications and standard Event Generation group.')
dmtfStdMifs = MibIdentifier((1, 3, 6, 1, 4, 1, 412, 2))
dmtfDynOids = MibIdentifier((1, 3, 6, 1, 4, 1, 412, 3))
dmiMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 412, 1, 1))
dmiClasses = MibIdentifier((1, 3, 6, 1, 4, 1, 412, 1, 1, 1))
dmiComponents = MibIdentifier((1, 3, 6, 1, 4, 1, 412, 1, 1, 2))
dmiMappingAgent = MibIdentifier((1, 3, 6, 1, 4, 1, 412, 1, 1, 3))
dmiNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 412, 1, 2))
dmiIndications = MibIdentifier((1, 3, 6, 1, 4, 1, 412, 1, 2, 0))
dmiEventVars = MibIdentifier((1, 3, 6, 1, 4, 1, 412, 1, 2, 1))
dmiMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 412, 1, 3))
dmiMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 412, 1, 3, 1))
dmiMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 412, 1, 3, 2))
dmiNotificationGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 412, 1, 3, 3))
class DmiAccess(TextualConvention, Integer32):
    description = 'The access level of a DMI Attribute. The access determines whether the attribute value can be read or written.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("unknown", 1), ("readOnly", 2), ("readWrite", 3), ("writeOnly", 4), ("unsupported", 5))

class DmiDate(TextualConvention, OctetString):
    description = "The SNMP representation of the DMI Date data type. It is a 25 octet fixed length displayable string with the following format: Octets Contents Encoding 1-4 year decimal 5-6 month decimal(1..12) 7-8 day decimal(1..31) 9-10 hour decimal(0..23) 11-12 minutes decimal(0..59) 13-14 seconds decimal(0..59) 15 dot '.' 16-21 microseconds decimal(0..999999) 22-25 offset from UTC ['+'|'-'](000..720) in minutes"
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(25, 25)
    fixedLength = 25

class DmiInteger64(TextualConvention, OctetString):
    description = 'SNMP representation of a DMI Integer64 data type is an octet string of exactly 8 octets, in network byte order.'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(8, 8)
    fixedLength = 8

class DmiString(TextualConvention, OctetString):
    description = 'A DMI displayable string. The content of the string may be any characters from either the ISO 8859-1 or Unicode character sets, but not intermixed. The string always includes a NULL (zero) termination character. The length of a string specifies the number of octets in the string, including the null termination character. For ISO 8859-1, there is one octet per character. For Unicode, there are two octets per character, including the NULL terminator.'
    status = 'current'

class DmiType(TextualConvention, Integer32):
    description = 'The MIF syntax (data type) of a DMI Attribute.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))
    namedValues = NamedValues(("unknown", 1), ("counter32", 2), ("counter64", 3), ("gauge32", 4), ("integer32", 5), ("integer64", 6), ("octetString", 7), ("displayString", 8), ("date", 9))

class DmiTDAddress(TextualConvention, OctetString):
    reference = 'RFC 1906, Transport Mappings for SNMP Version 2'
    description = 'Denotes a transport domain and address, much like the TDomain and TAddress textual convention pair defined in RFC 1902, yet in a more compact representation. The first octet identifies the transport domain. This value directly corresponds to the value of the transport domain object sub-identifier, as defined in RFC1906, that is subordinate to iso.org.dod.internet.snmpV2.snmpDomains. The remaining octets conform to the transport address syntax associated with the specified transport domain. For example, a value of 1 in the first octet corresponds to snmpUDPDomain, so the remaining octets conform to the syntax of snmpUDPAddress. For convienence, the mappings are summarized as follows. Note that UDP/IP and IPX are fixed length; CLNS, CONS and DDP are variable length. DmiTDAddress octets Domain 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15... ====== == == == == == == == == == == == == == == == UDP/IP 1 <ip-address> <port> CLNS 2 <n> <nsap-address..n> <t-selector...m> CONS 3 <n> <nsap-address..n> <t-selector...m> DDP 4 <n> <object...n><p><type..p><q><zone...q> IPX 5 <net-number> <physical-addres> <sock> '
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(1, 255)

dmiClassTable = MibTable((1, 3, 6, 1, 4, 1, 412, 1, 1, 1, 1), )
if mibBuilder.loadTexts: dmiClassTable.setStatus('current')
if mibBuilder.loadTexts: dmiClassTable.setDescription('The MIF definitions for all group classes known to the Service Layer.')
dmiClassEntry = MibTableRow((1, 3, 6, 1, 4, 1, 412, 1, 1, 1, 1, 1), ).setIndexNames((0, "DMTF-DMI-MIB", "dmiClassIndex"))
if mibBuilder.loadTexts: dmiClassEntry.setStatus('current')
if mibBuilder.loadTexts: dmiClassEntry.setDescription('The meta-data defining a particular group class. If multiple versions of a particular group class are registered with the Service Layer, the data in this entry shall pertain to the highest version.')
dmiClassIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 1, 1, 1, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmiClassIndex.setStatus('current')
if mibBuilder.loadTexts: dmiClassIndex.setDescription('A unique value for each group class known to the mapping agent for this managed node. The value for each class must remain constant at least from one re-initialization of the mapping agent to the next re-initialization. This value is NOT necessarily equal to the Group ID assigned within a given Component by the DMI Service Layer.')
dmiClassString = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 1, 1, 1, 1, 1, 2), DmiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmiClassString.setStatus('current')
if mibBuilder.loadTexts: dmiClassString.setDescription("The 'class string' assigned to the group in the 'class' statement.")
dmiClassVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 1, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 999))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmiClassVersion.setStatus('current')
if mibBuilder.loadTexts: dmiClassVersion.setDescription("The version number of the group definition providing it appeared as an integer in the 'class string'; zero otherwise.")
dmiClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 1, 1, 1, 1, 1, 4), DmiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmiClassName.setStatus('current')
if mibBuilder.loadTexts: dmiClassName.setDescription("The 'group name' from the 'name' statement in the group definition.")
dmiClassOID = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 1, 1, 1, 1, 1, 5), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmiClassOID.setStatus('current')
if mibBuilder.loadTexts: dmiClassOID.setDescription('The OBJECT IDENTIFIER of the conceptual table representing the group in an SNMP MIB. Attributes of the group may be accessed as columnar objects of this table, indexed according to the rules specified in RFC-nnnn.')
dmiClassKeyCount = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 1, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmiClassKeyCount.setStatus('current')
if mibBuilder.loadTexts: dmiClassKeyCount.setDescription("The number attributes that comprise a key for this group; zero if no 'key' statement appeared in the group definition. The ordered list of attribute Id's that comprise the key can be obtained from the dmiKeyTable")
dmiClassDescrLength = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 1, 1, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmiClassDescrLength.setStatus('current')
if mibBuilder.loadTexts: dmiClassDescrLength.setDescription("The total length (in octets) of the 'description string' from the 'description' statement in the group definition. This string can be retrieved in segments from the dmiDescrTable")
dmiClassPragma = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 1, 1, 1, 1, 1, 8), DmiString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmiClassPragma.setStatus('current')
if mibBuilder.loadTexts: dmiClassPragma.setDescription("The 'group name' from the 'name' statement in the group definition.")
dmiAttributeTable = MibTable((1, 3, 6, 1, 4, 1, 412, 1, 1, 1, 2), )
if mibBuilder.loadTexts: dmiAttributeTable.setStatus('current')
if mibBuilder.loadTexts: dmiAttributeTable.setDescription('A table listing all the meta-data for all attributes of each registered group class.')
dmiAttributeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 412, 1, 1, 1, 2, 1), ).setIndexNames((0, "DMTF-DMI-MIB", "dmiClassIndex"), (0, "DMTF-DMI-MIB", "dmiAttrId"))
if mibBuilder.loadTexts: dmiAttributeEntry.setStatus('current')
if mibBuilder.loadTexts: dmiAttributeEntry.setDescription('The meta-data defining a particular DMI attribute.')
dmiAttrId = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 1, 1, 1, 2, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmiAttrId.setStatus('current')
if mibBuilder.loadTexts: dmiAttrId.setDescription("The value of the 'id' statement from the attribute definition. This value uniquely identifies this attribute within the group. ")
dmiAttrName = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 1, 1, 1, 2, 1, 2), DmiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmiAttrName.setStatus('current')
if mibBuilder.loadTexts: dmiAttrName.setDescription("The value of the 'name' statement from the attribute definition. This name is normally used for display to human users.")
dmiAttrAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 1, 1, 1, 2, 1, 3), DmiAccess()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmiAttrAccess.setStatus('current')
if mibBuilder.loadTexts: dmiAttrAccess.setDescription("The value of the 'access' statement from the attribute definition. This value defines how the attribute may be accessed.")
dmiAttrType = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 1, 1, 1, 2, 1, 4), DmiType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmiAttrType.setStatus('current')
if mibBuilder.loadTexts: dmiAttrType.setDescription("This is the value of the 'type' statement from the attribute definition. This value specifies the datatype of the attribute.")
dmiAttrMaxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 1, 1, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmiAttrMaxSize.setStatus('current')
if mibBuilder.loadTexts: dmiAttrMaxSize.setDescription('For string types, this value specifies the maximum number of octets that may be contained in the string. Zero implies no limit specified (or a non-string datatype).')
dmiAttrEnumListCount = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 1, 1, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmiAttrEnumListCount.setStatus('current')
if mibBuilder.loadTexts: dmiAttrEnumListCount.setDescription('The number of name-value pairs in any associated enumeration list. Zero if not an enumerated integer.')
dmiAttrDescrLength = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 1, 1, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmiAttrDescrLength.setStatus('current')
if mibBuilder.loadTexts: dmiAttrDescrLength.setDescription("The total length (in octets) of the 'description string' from the 'description' statement in the group definition. This string can be retrieved in segments from the dmiDescrTable")
dmiKeyTable = MibTable((1, 3, 6, 1, 4, 1, 412, 1, 1, 1, 3), )
if mibBuilder.loadTexts: dmiKeyTable.setStatus('current')
if mibBuilder.loadTexts: dmiKeyTable.setDescription("A table of key definitions for each group that has a 'key' statement.")
dmiKeyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 412, 1, 1, 1, 3, 1), ).setIndexNames((0, "DMTF-DMI-MIB", "dmiClassIndex"), (0, "DMTF-DMI-MIB", "dmiKeyIndex"))
if mibBuilder.loadTexts: dmiKeyEntry.setStatus('current')
if mibBuilder.loadTexts: dmiKeyEntry.setDescription("An entry in this table specifies an attribute that is (part of) the 'key' for the corresponding group. ")
dmiKeyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 1, 1, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmiKeyIndex.setStatus('current')
if mibBuilder.loadTexts: dmiKeyIndex.setDescription('An ordinal that indicates this attributes position in the key for this group.')
dmiKeyType = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 1, 1, 1, 3, 1, 2), DmiType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmiKeyType.setStatus('current')
if mibBuilder.loadTexts: dmiKeyType.setDescription('The type of the attribute that forms this portion of the group key.')
dmiKeyAttrId = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 1, 1, 1, 3, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmiKeyAttrId.setStatus('current')
if mibBuilder.loadTexts: dmiKeyAttrId.setDescription('The Id of the attribute that forms this portion of the group key.')
dmiDescrTable = MibTable((1, 3, 6, 1, 4, 1, 412, 1, 1, 1, 4), )
if mibBuilder.loadTexts: dmiDescrTable.setStatus('current')
if mibBuilder.loadTexts: dmiDescrTable.setDescription('A table of description string segments. This table allows long description strings to be retrieved in segments. A complete description string can be reconstituted by concatenating the ordered set of string segments. The length of the complete string is available through the dmiClassTable or dmiAttributeTable as appropriate.')
dmiDescrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 412, 1, 1, 1, 4, 1), ).setIndexNames((0, "DMTF-DMI-MIB", "dmiClassIndex"), (0, "DMTF-DMI-MIB", "dmiAttrId"), (0, "DMTF-DMI-MIB", "dmiDescrIndex"))
if mibBuilder.loadTexts: dmiDescrEntry.setStatus('current')
if mibBuilder.loadTexts: dmiDescrEntry.setDescription('An entry in the description table contains one segment of an attribute or group description. The complete description string can be reconstituted by concatenating the ordered set of string segments. The length of the complete string is available through the dmiClassTable or dmiAttributeTable as appropriate. The description string for the group definition is accessed by specifying dmiAttrId==0')
dmiDescrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 1, 1, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmiDescrIndex.setStatus('current')
if mibBuilder.loadTexts: dmiDescrIndex.setDescription("An ordinal that indicates this segment's relative position in the complete description string for this attribute or group.")
dmiDescrText = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 1, 1, 1, 4, 1, 2), DmiString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmiDescrText.setStatus('current')
if mibBuilder.loadTexts: dmiDescrText.setDescription('A segment of the description string for this attribute or group.')
dmiEnumTable = MibTable((1, 3, 6, 1, 4, 1, 412, 1, 1, 1, 5), )
if mibBuilder.loadTexts: dmiEnumTable.setStatus('current')
if mibBuilder.loadTexts: dmiEnumTable.setDescription('A table defining all enumerated lists known to the Service Layer.')
dmiEnumEntry = MibTableRow((1, 3, 6, 1, 4, 1, 412, 1, 1, 1, 5, 1), ).setIndexNames((0, "DMTF-DMI-MIB", "dmiClassIndex"), (0, "DMTF-DMI-MIB", "dmiAttrId"), (0, "DMTF-DMI-MIB", "dmiEnumId"))
if mibBuilder.loadTexts: dmiEnumEntry.setStatus('current')
if mibBuilder.loadTexts: dmiEnumEntry.setDescription("An entry in this table defines the pairing of a string with an integer value as part of an 'Enum' definition.")
dmiEnumId = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 1, 1, 1, 5, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmiEnumId.setStatus('current')
if mibBuilder.loadTexts: dmiEnumId.setDescription("A unique value for each entry within a particular 'Enum' definition.")
dmiEnumValue = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 1, 1, 1, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmiEnumValue.setStatus('current')
if mibBuilder.loadTexts: dmiEnumValue.setDescription('The integer value that is associated with the corresponding string (dmiEnumString).')
dmiEnumString = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 1, 1, 1, 5, 1, 3), DmiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmiEnumString.setStatus('current')
if mibBuilder.loadTexts: dmiEnumString.setDescription('The displayable string that is associated with the corresponding integer value (dmiEnumValue)')
dmiComponentTable = MibTable((1, 3, 6, 1, 4, 1, 412, 1, 1, 2, 1), )
if mibBuilder.loadTexts: dmiComponentTable.setStatus('current')
if mibBuilder.loadTexts: dmiComponentTable.setDescription('A list of all components registered with the Service Layer.')
dmiComponentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 412, 1, 1, 2, 1, 1), ).setIndexNames((0, "DMTF-DMI-MIB", "dmiCompId"))
if mibBuilder.loadTexts: dmiComponentEntry.setStatus('current')
if mibBuilder.loadTexts: dmiComponentEntry.setDescription('An entry in this table describes a particular component registered with the Service Layer')
dmiCompId = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 1, 1, 2, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmiCompId.setStatus('current')
if mibBuilder.loadTexts: dmiCompId.setDescription('The unique Id assigned to the component by the Service Layer at registration time. By convention, the Service Layer itself will have an Id of one.')
dmiCompName = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 1, 1, 2, 1, 1, 2), DmiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmiCompName.setStatus('current')
if mibBuilder.loadTexts: dmiCompName.setDescription("The value of the 'name' statement from the component definition block.")
dmiCompDescrLength = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 1, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmiCompDescrLength.setStatus('current')
if mibBuilder.loadTexts: dmiCompDescrLength.setDescription('The total length of the component description string in octets.')
dmiCompGroupCount = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 1, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmiCompGroupCount.setStatus('current')
if mibBuilder.loadTexts: dmiCompGroupCount.setDescription('The number of group instances contained within this component.')
dmiCompPragma = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 1, 1, 2, 1, 1, 5), DmiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmiCompPragma.setStatus('current')
if mibBuilder.loadTexts: dmiCompPragma.setDescription("The value of the 'pragama' statement from the component definition block.")
dmiCompDescrTable = MibTable((1, 3, 6, 1, 4, 1, 412, 1, 1, 2, 2), )
if mibBuilder.loadTexts: dmiCompDescrTable.setStatus('current')
if mibBuilder.loadTexts: dmiCompDescrTable.setDescription('A table of description string segments. This table allows long description strings to be retrieved in segments. A complete description string can be reconstituted by concatenating the ordered set of string segments. The length of the complete string is available through the dmiComponentTable.')
dmiCompDescrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 412, 1, 1, 2, 2, 1), ).setIndexNames((0, "DMTF-DMI-MIB", "dmiCompId"), (0, "DMTF-DMI-MIB", "dmiCompDescrIndex"))
if mibBuilder.loadTexts: dmiCompDescrEntry.setStatus('current')
if mibBuilder.loadTexts: dmiCompDescrEntry.setDescription('An entry in the description table contains one segment of a component description. The complete description string can be reconstituted by concatenating the ordered set of string segments. The length of the complete string is available through the dmiComponentTable.')
dmiCompDescrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 1, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmiCompDescrIndex.setStatus('current')
if mibBuilder.loadTexts: dmiCompDescrIndex.setDescription("An ordinal that indicates this segment's relative position in the complete description string for this attribute or group.")
dmiCompDescrText = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 1, 1, 2, 2, 1, 2), DmiString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmiCompDescrText.setStatus('current')
if mibBuilder.loadTexts: dmiCompDescrText.setDescription('A segment of the description string for this attribute or group.')
dmiGroupTable = MibTable((1, 3, 6, 1, 4, 1, 412, 1, 1, 2, 3), )
if mibBuilder.loadTexts: dmiGroupTable.setStatus('current')
if mibBuilder.loadTexts: dmiGroupTable.setDescription('A list of all group instances contained within each component.')
dmiGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 412, 1, 1, 2, 3, 1), ).setIndexNames((0, "DMTF-DMI-MIB", "dmiCompId"), (0, "DMTF-DMI-MIB", "dmiGroupId"))
if mibBuilder.loadTexts: dmiGroupEntry.setStatus('current')
if mibBuilder.loadTexts: dmiGroupEntry.setDescription('An entry in this table describes a particular group instance within a particular component.')
dmiGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 1, 1, 2, 3, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmiGroupId.setStatus('current')
if mibBuilder.loadTexts: dmiGroupId.setDescription('An identifier assigned by the DMI Service Layer that uniquely identifies this group instance within a particular component.')
dmiGroupClassString = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 1, 1, 2, 3, 1, 2), DmiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmiGroupClassString.setStatus('current')
if mibBuilder.loadTexts: dmiGroupClassString.setDescription('The class string of the group (or table) instance as registered with the DMI Service Layer for the given component.')
dmiGroupVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 1, 1, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 999))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmiGroupVersion.setStatus('current')
if mibBuilder.loadTexts: dmiGroupVersion.setDescription("The version number of the group definition providing it appeared as an integer in the 'class string'; zero otherwise.")
dmiGroupClassIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 1, 1, 2, 3, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmiGroupClassIndex.setStatus('current')
if mibBuilder.loadTexts: dmiGroupClassIndex.setDescription('The index of the corresponding group class definition in the dmiClassTable. This index is an artifact of the mapping agent and serves as a cross-reference into the dmiClassTable for the remainder of the group class definition.')
dmiLanguageTable = MibTable((1, 3, 6, 1, 4, 1, 412, 1, 1, 2, 4), )
if mibBuilder.loadTexts: dmiLanguageTable.setStatus('current')
if mibBuilder.loadTexts: dmiLanguageTable.setDescription('A list of all language bindings registered for each component.')
dmiLanguageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 412, 1, 1, 2, 4, 1), ).setIndexNames((0, "DMTF-DMI-MIB", "dmiCompId"), (1, "DMTF-DMI-MIB", "dmiLanguage"))
if mibBuilder.loadTexts: dmiLanguageEntry.setStatus('current')
if mibBuilder.loadTexts: dmiLanguageEntry.setDescription('An entry in this table describes a particular language binding within a particular component.')
dmiLanguage = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 1, 1, 2, 4, 1, 1), DmiString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(16, 16), ValueSizeConstraint(14, 14), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmiLanguage.setStatus('current')
if mibBuilder.loadTexts: dmiLanguage.setDescription("The language string, defined by the DMI 2.0 Specification, that identifies a native language character set supported by the component. The format of the string is: 'language-code|territory-code|encoding' where language-code is one of the two-letter codes defined in ISO 639, territory-code is one of the two leteter codes defined in ISO 3166, and encoding is either 'iso8859-1' or 'unicode'.")
dmiMappingLevel = MibScalar((1, 3, 6, 1, 4, 1, 412, 1, 1, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmiMappingLevel.setStatus('current')
if mibBuilder.loadTexts: dmiMappingLevel.setDescription("The mapping level identifies the capabilities supported by the DMI-to-SNMP mapping agent. This object is defined as a bit-mask where each bit corresponds to a specific mapping capability. If the bit is '1', the capability is supported by the mapping agent. If the bit is '0', the capability is not supported. The mapping capabilities defined are: 0x01 Event Mapping Supported 0x02 Request/Response Mapping Supported 0x04 Row Addition/Deletion Supported 0x08 Remote Proxy Supported 0x10 Dynamic OID Generation Supported All other (unused) bits must be '0'. For example, a mapping agent that supports Event and Request/Response mapping, including Dynamic OID Generation, but does not support row addition/deletion nor remote proxy returns the value 0x13.")
dmiEventType = MibScalar((1, 3, 6, 1, 4, 1, 412, 1, 2, 1, 1), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: dmiEventType.setReference("DMTF DMI 2.0 Specification, Section 3.2.2.2.1' class = 'EventGeneration|<specific name>|001' name = 'Event System', ID = 1")
if mibBuilder.loadTexts: dmiEventType.setStatus('current')
if mibBuilder.loadTexts: dmiEventType.setDescription('Event-specific information that identifies the type of event within the DMI Event Generation group. Normally, this information is conveyed in the resulting SNMP Notification OID derived from the DMI Event to SNMP Trap mapping procedure. This object is not included in event specific traps. However, this object is defined for use within the generic dmiEventIndication trap, when mapping the DMI event to a specific SNMP trap is not possible (e.g., the DMI Class to SNMP OID mapping is not defined).')
dmiEventSeverity = MibScalar((1, 3, 6, 1, 4, 1, 412, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32))).clone(namedValues=NamedValues(("monitor", 1), ("information", 2), ("ok", 4), ("nonCritical", 8), ("critical", 16), ("nonRecoverable", 32)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: dmiEventSeverity.setReference("DMTF DMI 2.0 Specification, Section 3.2.2.2.2' class = 'EventGeneration|<specific name>|001' name = 'Event Severity', ID = 2")
if mibBuilder.loadTexts: dmiEventSeverity.setStatus('current')
if mibBuilder.loadTexts: dmiEventSeverity.setDescription('The severity of this event.')
dmiEventStateKey = MibScalar((1, 3, 6, 1, 4, 1, 412, 1, 2, 1, 4), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: dmiEventStateKey.setReference("DMTF DMI 2.0 Specification, Section 3.2.2.2.3&4' class = 'EventGeneration|<specific name>|001' name = 'Event Is State-Based', ID = 3; and name = 'Event State Key', ID = 4")
if mibBuilder.loadTexts: dmiEventStateKey.setStatus('current')
if mibBuilder.loadTexts: dmiEventStateKey.setDescription('The index into the Event State group for the component generating this event, provided the event is state-based. The value -1 indicates the event is not state-based.')
dmiEventAssociatedGroup = MibScalar((1, 3, 6, 1, 4, 1, 412, 1, 2, 1, 5), DmiString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: dmiEventAssociatedGroup.setReference("DMTF DMI 2.0 Specification, Section 3.2.2.2.5' class = 'EventGeneration|<specific name>|001' name = 'Associated Group', ID = 5")
if mibBuilder.loadTexts: dmiEventAssociatedGroup.setStatus('current')
if mibBuilder.loadTexts: dmiEventAssociatedGroup.setDescription('The class string of the DMI group associated with this event.')
dmiEventSystem = MibScalar((1, 3, 6, 1, 4, 1, 412, 1, 2, 1, 6), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: dmiEventSystem.setReference("DMTF DMI 2.0 Specification, Section 3.2.2.2.6' class = 'EventGeneration|<specific name>|001' name = 'Event System', ID = 6")
if mibBuilder.loadTexts: dmiEventSystem.setStatus('current')
if mibBuilder.loadTexts: dmiEventSystem.setDescription('Event-specific information that identifies the functional system of the component that caused the event. Normally, SNMP Traps mapped from a DMI Event contain an event-specific definition of this attribute. This object is not included in event specific traps. However, this object is defined for use within the generic dmiEventIndication trap, when mapping the DMI event to a specific SNMP trap is not possible (e.g., the DMI Class to SNMP OID mapping is not defined).')
dmiEventSubSystem = MibScalar((1, 3, 6, 1, 4, 1, 412, 1, 2, 1, 7), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: dmiEventSubSystem.setReference("DMTF DMI 2.0 Specification, Section 3.2.2.2.7' class = 'EventGeneration|<specific name>|001' name = 'Event Subsystem', ID = 7")
if mibBuilder.loadTexts: dmiEventSubSystem.setStatus('current')
if mibBuilder.loadTexts: dmiEventSubSystem.setDescription('Event-specific information that identifies the functional sub-system of the component that caused the event. Normally, SNMP Traps mapped from a DMI Event contain an event-specific definition of this attribute. This object is not included in event specific traps. However, this object is defined for use within the generic dmiEventIndication trap, when mapping the DMI event to a specific SNMP trap is not possible (e.g., the DMI Class to SNMP OID mapping is not defined).')
dmiEventSolution = MibScalar((1, 3, 6, 1, 4, 1, 412, 1, 2, 1, 8), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: dmiEventSolution.setReference("DMTF DMI 2.0 Specification, Section 3.2.2.3.1' class = 'EventGeneration|<specific name>|001' name = 'Event Solution', ID = 8")
if mibBuilder.loadTexts: dmiEventSolution.setStatus('current')
if mibBuilder.loadTexts: dmiEventSolution.setDescription('Event-specific information that describes the solution to the problem that caused the event. Typically, SNMP Traps mapped from a DMI Event contain an event-specific definition of this attribute. This object is not included in event specific traps. However, this object is defined for use within the generic dmiEventIndication trap, when mapping the DMI event to a specific SNMP trap is not possible (e.g., the DMI Class to SNMP OID mapping is not defined).')
dmiEventVendorMsg = MibScalar((1, 3, 6, 1, 4, 1, 412, 1, 2, 1, 10), DmiString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: dmiEventVendorMsg.setReference("DMTF DMI 2.0 Specification, Section 3.2.2.3.3' class = 'EventGeneration|<specific name>|001' name = Event Message', ID = 10")
if mibBuilder.loadTexts: dmiEventVendorMsg.setStatus('current')
if mibBuilder.loadTexts: dmiEventVendorMsg.setDescription('Vendor specific message related to the event. This data may contain any displayable string (ISO 8859-1).')
dmiEventVendorData = MibScalar((1, 3, 6, 1, 4, 1, 412, 1, 2, 1, 11), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: dmiEventVendorData.setReference("DMTF DMI 2.0 Specification, Section 3.2.2.3.4' class = 'EventGeneration|<specific name>|001' name = Vendor Specific Data', ID = 11")
if mibBuilder.loadTexts: dmiEventVendorData.setStatus('current')
if mibBuilder.loadTexts: dmiEventVendorData.setDescription('Vendor specific data related to the event. This data may contain any arbitrary string of octets.')
dmiEventDateTime = MibScalar((1, 3, 6, 1, 4, 1, 412, 1, 2, 1, 12), DmiDate()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: dmiEventDateTime.setStatus('current')
if mibBuilder.loadTexts: dmiEventDateTime.setDescription('The timestamp attached to an event indication by the DMI Service Layer.')
dmiEventClassString = MibScalar((1, 3, 6, 1, 4, 1, 412, 1, 2, 1, 13), DmiString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: dmiEventClassString.setStatus('current')
if mibBuilder.loadTexts: dmiEventClassString.setDescription('The Event Group class string used, along with the event type, to uniquely identify the DMI Event when translated into the general dmiEventIndication trap format.')
dmiEventSource = MibScalar((1, 3, 6, 1, 4, 1, 412, 1, 2, 1, 14), DmiTDAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: dmiEventSource.setStatus('current')
if mibBuilder.loadTexts: dmiEventSource.setDescription('The transport address that identifies the originator of the DMI Event or Indication. The event may be forwarded by other Service Layers acting as intermediaries for the originator of the event, or the event may have originated on a system other than the local mapping agent. This variable binding is only included in DMI Events and Indications if the original source is a system other than where the SNMP/DMI mapping agent is operating. If the transport selector (e.g., UDP port or IPX socket) of an SNMP mapping agent running on the specified system is not known, a zero (0) value is to indicate that only the network address portion is known. Otherwise, the transport selector value may be used by management applications to send SNMP requests directly to the specified system.')
dmiEventIndication = NotificationType((1, 3, 6, 1, 4, 1, 412, 1, 2, 0, 1)).setObjects(("DMTF-DMI-MIB", "dmiEventClassString"), ("DMTF-DMI-MIB", "dmiEventType"), ("DMTF-DMI-MIB", "dmiEventDateTime"), ("DMTF-DMI-MIB", "dmiCompId"), ("DMTF-DMI-MIB", "dmiEventSeverity"), ("DMTF-DMI-MIB", "dmiEventStateKey"), ("DMTF-DMI-MIB", "dmiEventAssociatedGroup"), ("DMTF-DMI-MIB", "dmiEventSystem"), ("DMTF-DMI-MIB", "dmiEventSubSystem"))
if mibBuilder.loadTexts: dmiEventIndication.setStatus('current')
if mibBuilder.loadTexts: dmiEventIndication.setDescription('A DMI Event associated with a group within a DMI component has occurred. Normally, DMI Events are translated into event specific SNMP notifications instead of this generic notification. However, this generic notification is defined for cases when mapping the DMI event to a specific SNMP trap is not possible (e.g., the DMI Class to SNMP OID mapping is not defined).')
if mibBuilder.loadTexts: dmiEventIndication.setReference("DMTF DMI 2.0 Specification, Section 7.1.1' DmiDeliverEvent() indication")
dmiComponentAddedIndication = NotificationType((1, 3, 6, 1, 4, 1, 412, 1, 2, 0, 2)).setObjects(("DMTF-DMI-MIB", "dmiCompId"), ("DMTF-DMI-MIB", "dmiCompName"))
if mibBuilder.loadTexts: dmiComponentAddedIndication.setStatus('current')
if mibBuilder.loadTexts: dmiComponentAddedIndication.setDescription('A new component has been installed into the DMI Service Layer.')
if mibBuilder.loadTexts: dmiComponentAddedIndication.setReference("DMTF DMI 2.0 Specification, Section 7.1.2' DmiComponentAdded indication")
dmiComponentDeletedIndication = NotificationType((1, 3, 6, 1, 4, 1, 412, 1, 2, 0, 3)).setObjects(("DMTF-DMI-MIB", "dmiCompId"))
if mibBuilder.loadTexts: dmiComponentDeletedIndication.setStatus('current')
if mibBuilder.loadTexts: dmiComponentDeletedIndication.setDescription('An installed component has been uninstalled from the DMI Service Layer.')
if mibBuilder.loadTexts: dmiComponentDeletedIndication.setReference("DMTF DMI 2.0 Specification, Section 7.1.3' DmiComponentDeleted indication")
dmiLanguageAddedIndication = NotificationType((1, 3, 6, 1, 4, 1, 412, 1, 2, 0, 4)).setObjects(("DMTF-DMI-MIB", "dmiCompId"), ("DMTF-DMI-MIB", "dmiLanguage"))
if mibBuilder.loadTexts: dmiLanguageAddedIndication.setStatus('current')
if mibBuilder.loadTexts: dmiLanguageAddedIndication.setDescription('A new language binding has been added to a component in the DMI Service Layer.')
if mibBuilder.loadTexts: dmiLanguageAddedIndication.setReference("DMTF DMI 2.0 Specification, Section 7.1.4' DmiLanguageAdded) indication")
dmiLanguageDeletedIndication = NotificationType((1, 3, 6, 1, 4, 1, 412, 1, 2, 0, 5)).setObjects(("DMTF-DMI-MIB", "dmiCompId"), ("DMTF-DMI-MIB", "dmiLanguage"))
if mibBuilder.loadTexts: dmiLanguageDeletedIndication.setStatus('current')
if mibBuilder.loadTexts: dmiLanguageDeletedIndication.setDescription('An existing language binding has been removed from a component in the DMI Service Layer.')
if mibBuilder.loadTexts: dmiLanguageDeletedIndication.setReference("DMTF DMI 2.0 Specification, Section 7.1.5' DmiLanguageDeleted indication")
dmiGroupAddedIndication = NotificationType((1, 3, 6, 1, 4, 1, 412, 1, 2, 0, 6)).setObjects(("DMTF-DMI-MIB", "dmiCompId"), ("DMTF-DMI-MIB", "dmiGroupId"), ("DMTF-DMI-MIB", "dmiGroupClassString"))
if mibBuilder.loadTexts: dmiGroupAddedIndication.setStatus('current')
if mibBuilder.loadTexts: dmiGroupAddedIndication.setDescription('A new group has been added to a component in the DMI Service Layer.')
if mibBuilder.loadTexts: dmiGroupAddedIndication.setReference("DMTF DMI 2.0 Specification, Section 7.1.6' DmiGroupAdded indication")
dmiGroupDeletedIndication = NotificationType((1, 3, 6, 1, 4, 1, 412, 1, 2, 0, 7)).setObjects(("DMTF-DMI-MIB", "dmiCompId"), ("DMTF-DMI-MIB", "dmiGroupId"))
if mibBuilder.loadTexts: dmiGroupDeletedIndication.setStatus('current')
if mibBuilder.loadTexts: dmiGroupDeletedIndication.setDescription('An existing group has been removed from a component in the DMI Service Layer.')
if mibBuilder.loadTexts: dmiGroupDeletedIndication.setReference("DMTF DMI 2.0 Specification, Section 7.1.7' DmiGroupDeleted indication")
dmiClassesGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 412, 1, 3, 2, 1)).setObjects(("DMTF-DMI-MIB", "dmiClassIndex"), ("DMTF-DMI-MIB", "dmiClassString"), ("DMTF-DMI-MIB", "dmiClassVersion"), ("DMTF-DMI-MIB", "dmiClassName"), ("DMTF-DMI-MIB", "dmiClassOID"), ("DMTF-DMI-MIB", "dmiClassKeyCount"), ("DMTF-DMI-MIB", "dmiClassDescrLength"), ("DMTF-DMI-MIB", "dmiClassPragma"), ("DMTF-DMI-MIB", "dmiAttrId"), ("DMTF-DMI-MIB", "dmiAttrName"), ("DMTF-DMI-MIB", "dmiAttrAccess"), ("DMTF-DMI-MIB", "dmiAttrType"), ("DMTF-DMI-MIB", "dmiAttrMaxSize"), ("DMTF-DMI-MIB", "dmiAttrEnumListCount"), ("DMTF-DMI-MIB", "dmiAttrDescrLength"), ("DMTF-DMI-MIB", "dmiKeyIndex"), ("DMTF-DMI-MIB", "dmiKeyType"), ("DMTF-DMI-MIB", "dmiKeyAttrId"), ("DMTF-DMI-MIB", "dmiDescrIndex"), ("DMTF-DMI-MIB", "dmiDescrText"), ("DMTF-DMI-MIB", "dmiEnumId"), ("DMTF-DMI-MIB", "dmiEnumValue"), ("DMTF-DMI-MIB", "dmiEnumString"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dmiClassesGroup = dmiClassesGroup.setStatus('current')
if mibBuilder.loadTexts: dmiClassesGroup.setDescription('A collection of objects that describe all group classes registered with the Service Layer.')
dmiComponentsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 412, 1, 3, 2, 2)).setObjects(("DMTF-DMI-MIB", "dmiCompId"), ("DMTF-DMI-MIB", "dmiCompName"), ("DMTF-DMI-MIB", "dmiCompDescrLength"), ("DMTF-DMI-MIB", "dmiCompGroupCount"), ("DMTF-DMI-MIB", "dmiCompPragma"), ("DMTF-DMI-MIB", "dmiCompDescrIndex"), ("DMTF-DMI-MIB", "dmiCompDescrText"), ("DMTF-DMI-MIB", "dmiGroupId"), ("DMTF-DMI-MIB", "dmiGroupClassString"), ("DMTF-DMI-MIB", "dmiGroupVersion"), ("DMTF-DMI-MIB", "dmiGroupClassId"), ("DMTF-DMI-MIB", "dmiLanguage"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dmiComponentsGroup = dmiComponentsGroup.setStatus('current')
if mibBuilder.loadTexts: dmiComponentsGroup.setDescription('A collection of objects that describe all components registered with the Service Layer.')
dmiNotificationObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 412, 1, 3, 2, 3)).setObjects(("DMTF-DMI-MIB", "dmiCompId"), ("DMTF-DMI-MIB", "dmiCompName"), ("DMTF-DMI-MIB", "dmiGroupId"), ("DMTF-DMI-MIB", "dmiGroupClassString"), ("DMTF-DMI-MIB", "dmiLanguage"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dmiNotificationObjectGroup = dmiNotificationObjectGroup.setStatus('current')
if mibBuilder.loadTexts: dmiNotificationObjectGroup.setDescription('The subset of objects required only for DMI Indication to SNMP Notification mapping.')
dmiMappingAgentGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 412, 1, 3, 2, 4)).setObjects(("DMTF-DMI-MIB", "dmiMappingLevel"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dmiMappingAgentGroup = dmiMappingAgentGroup.setStatus('current')
if mibBuilder.loadTexts: dmiMappingAgentGroup.setDescription('The general objects implemented by a mapping agent.')
dmiNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 412, 1, 3, 3, 1)).setObjects(("DMTF-DMI-MIB", "dmiComponentAddedIndication"), ("DMTF-DMI-MIB", "dmiComponentDeletedIndication"), ("DMTF-DMI-MIB", "dmiLanguageAddedIndication"), ("DMTF-DMI-MIB", "dmiLanguageDeletedIndication"), ("DMTF-DMI-MIB", "dmiGroupAddedIndication"), ("DMTF-DMI-MIB", "dmiGroupDeletedIndication"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dmiNotificationsGroup = dmiNotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: dmiNotificationsGroup.setDescription('The notifications that an SNMP entity is required to implement.')
dmiMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 412, 1, 3, 1, 1)).setObjects(("DMTF-DMI-MIB", "dmiMappingAgentGroup"), ("DMTF-DMI-MIB", "dmiClassesGroup"), ("DMTF-DMI-MIB", "dmiComponentsGroup"), ("DMTF-DMI-MIB", "dmiNotificationsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dmiMIBCompliance = dmiMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: dmiMIBCompliance.setDescription('The compliance statement for SNMP entities that implement the DMI MIB.')
dmiNotificationsOnlyCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 412, 1, 3, 1, 2)).setObjects(("DMTF-DMI-MIB", "dmiMappingAgentGroup"), ("DMTF-DMI-MIB", "dmiNotificationObjectGroup"), ("DMTF-DMI-MIB", "dmiNotificationsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dmiNotificationsOnlyCompliance = dmiNotificationsOnlyCompliance.setStatus('current')
if mibBuilder.loadTexts: dmiNotificationsOnlyCompliance.setDescription('The compliance statement for SNMP entities that implement only the DMI Indications to SNMP Notifications mapping.')
mibBuilder.exportSymbols("DMTF-DMI-MIB", dmiKeyType=dmiKeyType, dmiCompId=dmiCompId, dmiGroupVersion=dmiGroupVersion, dmiEventSubSystem=dmiEventSubSystem, dmiMIB=dmiMIB, dmiClassString=dmiClassString, dmiClasses=dmiClasses, dmiClassVersion=dmiClassVersion, dmiEnumEntry=dmiEnumEntry, DmiDate=DmiDate, dmiGroupClassString=dmiGroupClassString, DmiString=DmiString, dmiEventVars=dmiEventVars, dmiEventAssociatedGroup=dmiEventAssociatedGroup, dmiLanguageAddedIndication=dmiLanguageAddedIndication, dmiCompGroupCount=dmiCompGroupCount, dmiDescrIndex=dmiDescrIndex, dmiLanguage=dmiLanguage, dmiAttrName=dmiAttrName, dmiNotificationsOnlyCompliance=dmiNotificationsOnlyCompliance, dmiEnumString=dmiEnumString, dmiAttributeTable=dmiAttributeTable, dmiEventSolution=dmiEventSolution, dmiComponentTable=dmiComponentTable, dmiCompDescrIndex=dmiCompDescrIndex, dmiComponents=dmiComponents, dmiAttrEnumListCount=dmiAttrEnumListCount, dmiDescrTable=dmiDescrTable, dmiLanguageDeletedIndication=dmiLanguageDeletedIndication, dmiMIBConformance=dmiMIBConformance, dmiCompPragma=dmiCompPragma, dmiClassesGroup=dmiClassesGroup, dmiAttrId=dmiAttrId, dmiNotifications=dmiNotifications, dmiGroupDeletedIndication=dmiGroupDeletedIndication, DmiTDAddress=DmiTDAddress, DmiInteger64=DmiInteger64, dmiEnumTable=dmiEnumTable, dmiCompDescrEntry=dmiCompDescrEntry, dmiEventSystem=dmiEventSystem, dmiKeyEntry=dmiKeyEntry, dmiIndications=dmiIndications, dmiLanguageEntry=dmiLanguageEntry, dmiMIBGroups=dmiMIBGroups, dmiGroupAddedIndication=dmiGroupAddedIndication, dmiClassPragma=dmiClassPragma, dmiMIBCompliance=dmiMIBCompliance, dmiClassOID=dmiClassOID, dmiAttributeEntry=dmiAttributeEntry, dmiEventIndication=dmiEventIndication, dmiKeyIndex=dmiKeyIndex, dmiMappingLevel=dmiMappingLevel, dmiMappingAgent=dmiMappingAgent, dmiNotificationGroups=dmiNotificationGroups, dmiEventStateKey=dmiEventStateKey, dmiCompDescrText=dmiCompDescrText, dmiComponentEntry=dmiComponentEntry, dmiCompName=dmiCompName, dmiClassEntry=dmiClassEntry, dmiEventVendorData=dmiEventVendorData, DmiAccess=DmiAccess, dmiEventSource=dmiEventSource, dmiClassTable=dmiClassTable, dmiAttrType=dmiAttrType, dmiEnumValue=dmiEnumValue, dmiLanguageTable=dmiLanguageTable, dmiKeyTable=dmiKeyTable, dmiClassKeyCount=dmiClassKeyCount, dmiCompDescrLength=dmiCompDescrLength, dmiMIBObjects=dmiMIBObjects, dmiClassIndex=dmiClassIndex, dmiGroupTable=dmiGroupTable, dmiCompDescrTable=dmiCompDescrTable, dmiNotificationObjectGroup=dmiNotificationObjectGroup, dmiEventType=dmiEventType, dmiGroupClassIndex=dmiGroupClassIndex, DmiType=DmiType, dmiClassName=dmiClassName, dmiGroupId=dmiGroupId, dmiKeyAttrId=dmiKeyAttrId, PYSNMP_MODULE_ID=dmiMIB, dmiDescrText=dmiDescrText, dmiGroupEntry=dmiGroupEntry, dmiAttrMaxSize=dmiAttrMaxSize, dmiEventDateTime=dmiEventDateTime, dmiEventVendorMsg=dmiEventVendorMsg, dmiEventClassString=dmiEventClassString, dmiAttrDescrLength=dmiAttrDescrLength, dmiDescrEntry=dmiDescrEntry, dmtf=dmtf, dmiMappingAgentGroup=dmiMappingAgentGroup, dmiComponentDeletedIndication=dmiComponentDeletedIndication, dmiComponentsGroup=dmiComponentsGroup, dmiEnumId=dmiEnumId, dmiComponentAddedIndication=dmiComponentAddedIndication, dmtfDynOids=dmtfDynOids, dmiClassDescrLength=dmiClassDescrLength, dmiMIBCompliances=dmiMIBCompliances, dmiNotificationsGroup=dmiNotificationsGroup, dmiAttrAccess=dmiAttrAccess, dmiEventSeverity=dmiEventSeverity, dmtfStdMifs=dmtfStdMifs)
