#
# PySNMP MIB module Wellfleet-CSMACD-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Wellfleet-CSMACD-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:39:46 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Unsigned32, TimeTicks, MibIdentifier, Integer32, Counter64, Gauge32, IpAddress, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, ObjectIdentity, NotificationType, Counter32, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "TimeTicks", "MibIdentifier", "Integer32", "Counter64", "Gauge32", "IpAddress", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "ObjectIdentity", "NotificationType", "Counter32", "iso")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
wfLine, wfCSMACDAutoNegGroup = mibBuilder.importSymbols("Wellfleet-COMMON-MIB", "wfLine", "wfCSMACDAutoNegGroup")
wfCSMACDTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 4, 1), )
if mibBuilder.loadTexts: wfCSMACDTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfCSMACDTable.setDescription('CSMA/CD line record')
wfCSMACDEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 4, 1, 1), ).setIndexNames((0, "Wellfleet-CSMACD-MIB", "wfCSMACDSlot"), (0, "Wellfleet-CSMACD-MIB", "wfCSMACDConnector"))
if mibBuilder.loadTexts: wfCSMACDEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfCSMACDEntry.setDescription('An entry in the csmacd table')
wfCSMACDDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("create", 1), ("delete", 2))).clone('create')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfCSMACDDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfCSMACDDelete.setDescription('create/delete parameter, dflt = created')
wfCSMACDEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfCSMACDEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wfCSMACDEnable.setDescription('enable/disable parameter, dflt = enabled')
wfCSMACDState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("init", 3), ("notpresent", 4))).clone('notpresent')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfCSMACDState.setStatus('mandatory')
if mibBuilder.loadTexts: wfCSMACDState.setDescription('line driver state variable, Not Present, Init, Down, Up')
wfCSMACDSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfCSMACDSlot.setStatus('mandatory')
if mibBuilder.loadTexts: wfCSMACDSlot.setDescription('instance ID Slot, filled in by driver')
wfCSMACDConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 44))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfCSMACDConnector.setStatus('mandatory')
if mibBuilder.loadTexts: wfCSMACDConnector.setDescription("instance ID Connector, filled in by driver. For the ASN this attribute is an encoded value and is equal to 'module'*10 + 'connector'. Where 'module' is defined in attribute 42 and 'connector' is defined in attribute 43 of this table. For non-ASN platforms this attribute is the physical connector number on the slot.")
wfCSMACDCct = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1023))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfCSMACDCct.setStatus('mandatory')
if mibBuilder.loadTexts: wfCSMACDCct.setDescription('cct number for this line instance')
wfCSMACDBofl = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfCSMACDBofl.setStatus('mandatory')
if mibBuilder.loadTexts: wfCSMACDBofl.setDescription('bofl parameter, dflt = enabled')
wfCSMACDBoflTmo = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfCSMACDBoflTmo.setStatus('mandatory')
if mibBuilder.loadTexts: wfCSMACDBoflTmo.setDescription('bofl parameter, dflt = 5. A value of zero has a special meaning. When bofl tmo is zero, the line is killed as soon as the link down down condition is determined.')
wfCSMACDMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1518))).clone(namedValues=NamedValues(("default", 1518))).clone('default')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfCSMACDMtu.setStatus('mandatory')
if mibBuilder.loadTexts: wfCSMACDMtu.setDescription('mtu parameter, fixed')
wfCSMACDMadr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 1, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfCSMACDMadr.setStatus('mandatory')
if mibBuilder.loadTexts: wfCSMACDMadr.setDescription('line MAC address, fixed - line driver fills in')
wfCSMACDOctetsRxOk = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfCSMACDOctetsRxOk.setStatus('mandatory')
if mibBuilder.loadTexts: wfCSMACDOctetsRxOk.setDescription('Number of octets received without error')
wfCSMACDFramesRxOk = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfCSMACDFramesRxOk.setStatus('mandatory')
if mibBuilder.loadTexts: wfCSMACDFramesRxOk.setDescription('Number of frames received without error')
wfCSMACDOctetsTxOk = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfCSMACDOctetsTxOk.setStatus('mandatory')
if mibBuilder.loadTexts: wfCSMACDOctetsTxOk.setDescription('Number of octets transmitted without error')
wfCSMACDFramesTxOk = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfCSMACDFramesTxOk.setStatus('mandatory')
if mibBuilder.loadTexts: wfCSMACDFramesTxOk.setDescription('Number of frames transmitted without error')
wfCSMACDDeferredTx = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfCSMACDDeferredTx.setStatus('mandatory')
if mibBuilder.loadTexts: wfCSMACDDeferredTx.setDescription('Number of deferred transmissions')
wfCSMACDLateCollnTx = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfCSMACDLateCollnTx.setStatus('mandatory')
if mibBuilder.loadTexts: wfCSMACDLateCollnTx.setDescription('Number of late collisions')
wfCSMACDExcessvCollnTx = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfCSMACDExcessvCollnTx.setStatus('mandatory')
if mibBuilder.loadTexts: wfCSMACDExcessvCollnTx.setDescription('Number of excessive collisions')
wfCSMACDBablErrorTx = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfCSMACDBablErrorTx.setStatus('mandatory')
if mibBuilder.loadTexts: wfCSMACDBablErrorTx.setDescription('Number of frames transmitted larger than the MTU size in wfCSMACDMtu')
wfCSMACDBufErrorTx = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfCSMACDBufErrorTx.setStatus('mandatory')
if mibBuilder.loadTexts: wfCSMACDBufErrorTx.setDescription('Number of internal buffer errors')
wfCSMACDLcarTx = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfCSMACDLcarTx.setStatus('mandatory')
if mibBuilder.loadTexts: wfCSMACDLcarTx.setDescription('Number of loss of carrier errors')
wfCSMACDUfloTx = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfCSMACDUfloTx.setStatus('mandatory')
if mibBuilder.loadTexts: wfCSMACDUfloTx.setDescription('Number of transmitter underflow errors')
wfCSMACDFcsErrorRx = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfCSMACDFcsErrorRx.setStatus('mandatory')
if mibBuilder.loadTexts: wfCSMACDFcsErrorRx.setDescription('Number of receiver checksum errors')
wfCSMACDAlignErrorRx = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfCSMACDAlignErrorRx.setStatus('mandatory')
if mibBuilder.loadTexts: wfCSMACDAlignErrorRx.setDescription('Number of receiver alignment errors')
wfCSMACDLackRescErrorRx = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfCSMACDLackRescErrorRx.setStatus('mandatory')
if mibBuilder.loadTexts: wfCSMACDLackRescErrorRx.setDescription('Number of receiver lack of resource errors')
wfCSMACDTooLongErrorRx = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfCSMACDTooLongErrorRx.setStatus('mandatory')
if mibBuilder.loadTexts: wfCSMACDTooLongErrorRx.setDescription('Number of frames received exceeding the MTU size in wfCSMACDMtu.')
wfCSMACDOfloRx = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfCSMACDOfloRx.setStatus('mandatory')
if mibBuilder.loadTexts: wfCSMACDOfloRx.setDescription('Number of receiver overflow errors')
wfCSMACDMerr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 1, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfCSMACDMerr.setStatus('mandatory')
if mibBuilder.loadTexts: wfCSMACDMerr.setDescription('Number of internal memory errors')
wfCSMACDCerr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 1, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfCSMACDCerr.setStatus('mandatory')
if mibBuilder.loadTexts: wfCSMACDCerr.setDescription('Number of collision errors')
wfCSMACDHardwareFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 1, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfCSMACDHardwareFilter.setStatus('mandatory')
if mibBuilder.loadTexts: wfCSMACDHardwareFilter.setDescription('Hardware filtering parameter.')
wfCSMACDTxQueueLength = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 1, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfCSMACDTxQueueLength.setStatus('mandatory')
if mibBuilder.loadTexts: wfCSMACDTxQueueLength.setDescription('Current Transmit Queue Length')
wfCSMACDRxQueueLength = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 1, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfCSMACDRxQueueLength.setStatus('mandatory')
if mibBuilder.loadTexts: wfCSMACDRxQueueLength.setDescription('Current Receive Queue Length')
wfCSMACDTxClipFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 1, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfCSMACDTxClipFrames.setStatus('mandatory')
if mibBuilder.loadTexts: wfCSMACDTxClipFrames.setDescription("Number of frames clipped in driver's transmit routine due to transmit congestion.")
wfCSMACDRxReplenMisses = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 1, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfCSMACDRxReplenMisses.setStatus('mandatory')
if mibBuilder.loadTexts: wfCSMACDRxReplenMisses.setDescription('Number of packet buffer misses while attempting to replenish driver receive ring.')
wfCSMACDCfgTxQueueLength = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 1, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfCSMACDCfgTxQueueLength.setStatus('mandatory')
if mibBuilder.loadTexts: wfCSMACDCfgTxQueueLength.setDescription('Configured Transmit Queue Length. Values other than zero over-ride the router selected values. A value of zero has a special meaning. Zero causes router based default values to be used. Values larger than the compiled ring size are truncated to the compiled ring size.')
wfCSMACDCfgRxQueueLength = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 1, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfCSMACDCfgRxQueueLength.setStatus('mandatory')
if mibBuilder.loadTexts: wfCSMACDCfgRxQueueLength.setDescription('Configured Receive Queue Length. Values other than zero over-ride the router selected values. A value of zero has a special meaning. Zero causes router based default values to be used. Values larger than the compiled ring size are truncated to the compiled ring size.')
wfCSMACDAlignmentMode = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 1, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("all", 1), ("bytes", 2), ("disabled", 3))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfCSMACDAlignmentMode.setStatus('mandatory')
if mibBuilder.loadTexts: wfCSMACDAlignmentMode.setDescription('Enables special frame re-alignment in the Line Driver. Only needed when 4 ethernet interfaces are configured on a single slot. Only needed if experiencing transmit underflow errors (wfCSMACDUfloTx). When this attribute is set to DISABLED, non-optimally aligned frames are transmitted as is. When this attribute is set to ALL (1), all non-optimally aligned frames are re-aligned before transmission. When this attribute is set to ALIGN_OVER_128_BYTES (2), all non-optimally aligned frames over 128 bytes in length are re-aligned before transmission and frames up to and including 128 bytes in length are transmitted as is.')
wfCSMACDUnAlignedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 1, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfCSMACDUnAlignedFrames.setStatus('mandatory')
if mibBuilder.loadTexts: wfCSMACDUnAlignedFrames.setDescription('Number of non-optimally aligned frames queued to the driver for transmit. This statistic does not indicate that any frames have been dropped. If the ethernet I/O board is not a Quad Ethernet Link Module (QENET) or if it is a QENET and none of the four ethernet interfaces are experiencing transmit underflow errors (wfCSMACDUfloTx), then this statistic should be ignored. If, however, this interface or other interfaces on the QENET are experiencing transmit underflow errors, the underflows are preventable by setting the wfCSMACDAlignmentMode attribute to 1. See explanation of that attribute for more information. This attribute means that these frames are candidates for re-alignment. It does not, by itself, indicate that re-alignment is necessary.')
wfCSMACDLineNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 1, 1, 38), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfCSMACDLineNumber.setStatus('mandatory')
if mibBuilder.loadTexts: wfCSMACDLineNumber.setDescription('Logical line number associated with this driver entity.')
wfCSMACDLateCollnRx = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 1, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfCSMACDLateCollnRx.setStatus('mandatory')
if mibBuilder.loadTexts: wfCSMACDLateCollnRx.setDescription('Number of late collisions - found in QUICC Ethernet Rx Buffer Descriptors')
wfCSMACDModule = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 1, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("one", 1), ("two", 2), ("three", 3), ("four", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfCSMACDModule.setStatus('mandatory')
if mibBuilder.loadTexts: wfCSMACDModule.setDescription('Module number for ASN platform, filled in by driver. For non-ASN platforms this attribute will not be used.')
wfCSMACDActualConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 1, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("one", 1), ("two", 2), ("three", 3), ("four", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfCSMACDActualConnector.setStatus('mandatory')
if mibBuilder.loadTexts: wfCSMACDActualConnector.setDescription('Actual connector number for ASN platform, filled in by driver. For non-ASN platforms this attribute will not be used.')
wfCSMACDLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 1, 1, 42), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfCSMACDLastChange.setStatus('mandatory')
if mibBuilder.loadTexts: wfCSMACDLastChange.setDescription("The value of SysUpTime at the time the interface entered it's current operational state (UP state). SysUpTime is defined as the time (in hundredths of a second) since the network management portion of the system was last re-initialized. Usually the time since boot.")
wfCSMACDOutQLen = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 1, 1, 43), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfCSMACDOutQLen.setStatus('mandatory')
if mibBuilder.loadTexts: wfCSMACDOutQLen.setDescription('The instantaneous current length of the output packet queue (in packets).')
wfCSMACDIntProcessings = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 1, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfCSMACDIntProcessings.setStatus('mandatory')
if mibBuilder.loadTexts: wfCSMACDIntProcessings.setDescription('counts the number of times the interrupt service routine has been called')
wfCSMACDTxProcessings = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 1, 1, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfCSMACDTxProcessings.setStatus('mandatory')
if mibBuilder.loadTexts: wfCSMACDTxProcessings.setDescription('Counts the number of times the transmit routine has been called')
wfCSMACDRxProcessings = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 1, 1, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfCSMACDRxProcessings.setStatus('mandatory')
if mibBuilder.loadTexts: wfCSMACDRxProcessings.setDescription('Counts the number of times RINT processing takes place in the interrupt service routine.')
wfCSMACDTxCmplProcessings = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 1, 1, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfCSMACDTxCmplProcessings.setStatus('mandatory')
if mibBuilder.loadTexts: wfCSMACDTxCmplProcessings.setDescription('Counts the number of times the transmit complete processing takes place')
wfCSMACDTxQueueReductions = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 1, 1, 48), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfCSMACDTxQueueReductions.setStatus('mandatory')
if mibBuilder.loadTexts: wfCSMACDTxQueueReductions.setDescription('Counts the number of times the transmit queue has been shrinked in size due to the number of tx clips exceeding the treshold')
wfCSMACDSingleCollisionFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 1, 1, 49), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfCSMACDSingleCollisionFrames.setStatus('mandatory')
if mibBuilder.loadTexts: wfCSMACDSingleCollisionFrames.setDescription('A count of successfully transmitted frames on a particular interface for which transmission is inhibited by exactly one collision.')
wfCSMACDMultipleCollisionFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 1, 1, 50), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfCSMACDMultipleCollisionFrames.setStatus('mandatory')
if mibBuilder.loadTexts: wfCSMACDMultipleCollisionFrames.setDescription('A count of successfully transmitted frames on a particular interface for which transmission is inhibited by more than one collision.')
wfCSMACDInternalMacTxErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 1, 1, 51), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfCSMACDInternalMacTxErrors.setStatus('mandatory')
if mibBuilder.loadTexts: wfCSMACDInternalMacTxErrors.setDescription('A count of frames for which transmission on a particular interface fails due to an internal MAC sublayer transmit error. A frame is only counted by an instance of this object if it is not counted by the corresponding instance of either the LateCollisions object, the ExcessiveCollisions object, or the CarrierSenseErrors object.')
wfCSMACDLineCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 1, 1, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("tenbaset", 1), ("tenbasetduplex", 2), ("hundredbasetx", 3), ("hundredbasetxduplex", 4), ("hundredbaset4", 5), ("tenbasetduplexcongctrl", 6), ("hundredbasetxduplexcongctrl", 7), ("gigabitduplex", 8), ("gigabitduplexflowctrl", 9))).clone('tenbaset')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfCSMACDLineCapability.setStatus('mandatory')
if mibBuilder.loadTexts: wfCSMACDLineCapability.setDescription('If NWay is configured, this attribute contains a value that uniquely identifies the single capability that was agreed upon by the local and remote interfaces. If NWay is not configured, this attribute describes the speed and duplex setting that was configured for this interface.')
wfCSMACDEtherChipSet = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 1, 1, 53), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfCSMACDEtherChipSet.setStatus('mandatory')
if mibBuilder.loadTexts: wfCSMACDEtherChipSet.setDescription('This object contains an OBJECT IDENTIFIER which identifies the chipset used to realize the interface. This object usually identifies the Medium Access Control (MAC) chip.')
wfCSMACDRxSymbolErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 1, 1, 54), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfCSMACDRxSymbolErrors.setStatus('mandatory')
if mibBuilder.loadTexts: wfCSMACDRxSymbolErrors.setDescription('A count of frames received on a particular interface with one or more 100Mb symbol errors detected.')
wfCSMACDInternalMacRxErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 1, 1, 55), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfCSMACDInternalMacRxErrors.setStatus('mandatory')
if mibBuilder.loadTexts: wfCSMACDInternalMacRxErrors.setDescription('A count of frames for which reception on a particular interface fails due to an internal MAC sublayer receive error. A frame is only counted by an instance of this object if it is not counted by the corresponding instance of either the FrameTooLongs object, the AlignmentErrors object, or the FCSErrors object.')
wfCSMACDConfigurableSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 1, 1, 56), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfCSMACDConfigurableSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: wfCSMACDConfigurableSpeed.setDescription('This attribute will be enabled(1) if the interface supports different speed configurations. If configurable speeds are not supported on the interface, this attribute will be disabled(2). Creation of wfCSMACDAutoNegEntry records for 10/100BaseT is valid only if this attribute is enabled. For Gigabit Ethernet the latter statement is not true')
wfCSMACDRxFlushes = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 1, 1, 57), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfCSMACDRxFlushes.setStatus('mandatory')
if mibBuilder.loadTexts: wfCSMACDRxFlushes.setDescription('This attribute describes the number of times the hardware has entered a state which required a flush of the RX FIFO.')
wfCSMACDTxDeadlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 1, 1, 58), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfCSMACDTxDeadlocks.setStatus('mandatory')
if mibBuilder.loadTexts: wfCSMACDTxDeadlocks.setDescription('This attribute describes the number of times the hardware has entered a Tx Deadlock condition, and the software intervenes to free up the lock.')
wfCSMACDBoflRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 1, 1, 59), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfCSMACDBoflRetries.setStatus('mandatory')
if mibBuilder.loadTexts: wfCSMACDBoflRetries.setDescription('bofl retries, dflt = 5')
wfCSMACDBoflTmoDivisor = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 1, 1, 60), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfCSMACDBoflTmoDivisor.setStatus('mandatory')
if mibBuilder.loadTexts: wfCSMACDBoflTmoDivisor.setDescription('bofl tmo divisorr, dflt = 1')
wfCSMACDTurboBoflDebug = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 1, 1, 61), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfCSMACDTurboBoflDebug.setStatus('mandatory')
if mibBuilder.loadTexts: wfCSMACDTurboBoflDebug.setDescription('Special Turbo-BOFL debug mechanism to be used by Engineering and Manufacturing only. 31-24 : TMO - period of breath (amount of time between successive breaths of life) 23-16 : Number of packets per breath. 15-0 : Packet length in bytes - 22 bytes minimum. All bits set to zero will disable this attribute.')
wfCSMACDIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 1, 1, 62), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfCSMACDIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wfCSMACDIfIndex.setDescription('IfTable Index for this line instance, filled in by driver. For the BAC it is not the same as the circuit number.')
wfCSMACDTxFlowControlPauseFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 1, 1, 63), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfCSMACDTxFlowControlPauseFrames.setStatus('mandatory')
if mibBuilder.loadTexts: wfCSMACDTxFlowControlPauseFrames.setDescription('This attribute indicates the number of Flow Control Pause frames transmitted.')
wfCSMACDRxFlowControlPauseFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 1, 1, 64), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfCSMACDRxFlowControlPauseFrames.setStatus('mandatory')
if mibBuilder.loadTexts: wfCSMACDRxFlowControlPauseFrames.setDescription('This attribute indicates the number of Flow Control Pause frames received.')
wfCSMACDRxUnsupportedOpcodes = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 1, 1, 65), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfCSMACDRxUnsupportedOpcodes.setStatus('mandatory')
if mibBuilder.loadTexts: wfCSMACDRxUnsupportedOpcodes.setDescription('This attribute indicates the number of Control frames received that were not pause frames.')
wfCSMACDFlowControlEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 1, 1, 66), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfCSMACDFlowControlEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wfCSMACDFlowControlEnable.setDescription('Flow control enable/disable parameter, dflt = enabled')
wfCSMACDTxFlowControlPauseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 1, 1, 67), Integer32().subtype(subtypeSpec=ValueRangeConstraint(32, 65535)).clone(65535)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfCSMACDTxFlowControlPauseTime.setStatus('mandatory')
if mibBuilder.loadTexts: wfCSMACDTxFlowControlPauseTime.setDescription('This attribute indicates flow control pause time in slots.')
wfCSMACDTxFlowControlPauseZeroEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 1, 1, 68), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfCSMACDTxFlowControlPauseZeroEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wfCSMACDTxFlowControlPauseZeroEnable.setDescription('Tx Pause 0 frame generation enable/disable parameter, dflt = enabled.')
wfCSMACDDsqmsLineSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 1, 1, 69), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100000000)).clone(1250000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfCSMACDDsqmsLineSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: wfCSMACDDsqmsLineSpeed.setDescription('User-selected line speed for DSQMS client')
wfCSMACDAutoNegTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 4, 16, 1), )
if mibBuilder.loadTexts: wfCSMACDAutoNegTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfCSMACDAutoNegTable.setDescription('CSMA/CD Auto Negotiation (NWay) record')
wfCSMACDAutoNegEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 4, 16, 1, 1), ).setIndexNames((0, "Wellfleet-CSMACD-MIB", "wfCSMACDAutoNegSlot"), (0, "Wellfleet-CSMACD-MIB", "wfCSMACDAutoNegConnector"))
if mibBuilder.loadTexts: wfCSMACDAutoNegEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfCSMACDAutoNegEntry.setDescription('An entry in the csmacd table')
wfCSMACDAutoNegDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 16, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("create", 1), ("delete", 2))).clone('create')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfCSMACDAutoNegDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfCSMACDAutoNegDelete.setDescription('create/delete parameter, dflt = created')
wfCSMACDAutoNegSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 16, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfCSMACDAutoNegSlot.setStatus('mandatory')
if mibBuilder.loadTexts: wfCSMACDAutoNegSlot.setDescription('instance ID Slot, filled in by driver')
wfCSMACDAutoNegConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 16, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 44))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfCSMACDAutoNegConnector.setStatus('mandatory')
if mibBuilder.loadTexts: wfCSMACDAutoNegConnector.setDescription("instance ID Connector, filled in by driver. For the ASN this attribute is an encoded value and is equal to 'module'*10 + 'connector'. Where 'module' is defined in attribute 42 and 'connector' is defined in attribute 43 of this table. For non-ASN platforms this attribute is the physical connector number on the slot.")
wfCSMACDAutoNegSpeedSelect = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 16, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("nway", 1), ("tenbaset", 2), ("tenbasetduplex", 3), ("hundredbasetx", 4), ("hundredbasetxduplex", 5), ("hundredbaset4", 6), ("macloopback", 7), ("phyloopback", 8), ("twisterloopback", 9), ("tenbasetduplexcongctrl", 10), ("hundredbasetxduplexcongctrl", 11), ("gigabitduplex", 12), ("gigabitduplexflowctrl", 13))).clone('hundredbasetx')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfCSMACDAutoNegSpeedSelect.setStatus('mandatory')
if mibBuilder.loadTexts: wfCSMACDAutoNegSpeedSelect.setDescription('This value indicates the configured speed of the local interface. This parameter allows configuration of a specific speed and duplex setting, or allows configuration/enabling of Auto Negotiation/NWay. Selecting a specific speed (i.e. a value other than 1) implicitly disables Auto Negotiation/NWay.')
wfCSMACDAutoNegRemoteSignaling = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 16, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("detected", 1), ("notdetected", 2))).clone('notdetected')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfCSMACDAutoNegRemoteSignaling.setStatus('mandatory')
if mibBuilder.loadTexts: wfCSMACDAutoNegRemoteSignaling.setDescription('This value indicates whether the remote end of the link is operating Auto Negotiation signaling or not. It shall take the value detected if, during the previous link negotiation, FLP bursts were received from the remote end. NOTE: This parameter is only valid if SpeedSelect is configured for NWay.')
wfCSMACDAutoNegState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 16, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("configuring", 2), ("complete", 3), ("paralleldetectfail", 4))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfCSMACDAutoNegState.setStatus('mandatory')
if mibBuilder.loadTexts: wfCSMACDAutoNegState.setDescription('This value indicates whether Auto Negotiation signaling is in progress or has completed. NOTE: This parameter is only valid if SpeedSelect is configured for NWay.')
wfCSMACDAutoNegRestartAutoConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 16, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfCSMACDAutoNegRestartAutoConfig.setStatus('mandatory')
if mibBuilder.loadTexts: wfCSMACDAutoNegRestartAutoConfig.setDescription('Writing any value to this attribute forces Auto Negotiation to begin link re-negotiation. This action has no effect if Auto Negotiation signaling is disabled. NOTE: This parameter is only valid if SpeedSelect is configured for NWay.')
wfCSMACDAutoNegLocalCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 16, 1, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfCSMACDAutoNegLocalCapability.setStatus('mandatory')
if mibBuilder.loadTexts: wfCSMACDAutoNegLocalCapability.setDescription('This is a GAUGE because this attribute is 32-bit unsigned, non-increasing A value that uniquely identifies the set of capabilities of the LOCAL Auto Negotiation entity. The value is a sum which initially takes the value zero. Then, for each capability of the LOCAL interface, 2 raised to the power noted below is added to the sum. For example, a LOCAL interface which has the capability to support only 100Base-TX would have a value of 128 (2**7). In contrast, a LOCAL interface which supports both 100Base-TX and 100Base-TX Full Duplex would cause this object to have a value of 384 ((2**7) + (2**8)). The powers of 2 assigned to the capabilities are these: Power Capability 0 Pause 1 ASM_DIR 5 10Base-T 6 10Base-T Full Duplex 7 100Base-TX 8 100Base-TX Full Duplex 9 100Base-T4 14 1000Base-X 15 1000Base-X Full Duplex NOTE: This parameter is only valid if SpeedSelect is configured for NWay.')
wfCSMACDAutoNegAdvertisedCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 16, 1, 1, 9), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfCSMACDAutoNegAdvertisedCapability.setStatus('mandatory')
if mibBuilder.loadTexts: wfCSMACDAutoNegAdvertisedCapability.setDescription('This is a GAUGE because this attribute is 32-bit unsigned, non-increasing A successful set operation will result in immediate link re-negotiation if AutoNegAdminState is enabled. A value that uniquely identifies the set of capabilities advertised by the local Auto Negotiation entity. The value is a sum which initially takes the value zero. Then, for each capability of the ADVERTISED interface, 2 raised to the power noted below is added to the sum. For example, a ADVERTISED interface which has the capability to support only 100Base-TX would have a value of 128 (2**7). In contrast, an ADVERTISED interface which supports both 100Base-TX and 100Base-TX Full Duplex would cause this object to have a value of 384 ((2**7) + (2**8)). The powers of 2 assigned to the capabilities are these: Power Capability 0 Pause 1 ASM_DIR 5 10Base-T 6 10Base-T Full Duplex 7 100Base-TX 8 100Base-TX Full Duplex 9 100Base-T4 14 1000Base-X 15 1000Base-X Full Duplex NOTE: This parameter is only valid if SpeedSelect is configured for NWay.')
wfCSMACDAutoNegReceivedCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 16, 1, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfCSMACDAutoNegReceivedCapability.setStatus('mandatory')
if mibBuilder.loadTexts: wfCSMACDAutoNegReceivedCapability.setDescription('This is a GAUGE because this attribute is 32-bit unsigned, non-increasing A value that uniquely identifies the set of capabilities of the REMOTE Auto Negotiation entity. The value is a sum which initially takes the value zero. Then, for each capability of the REMOTE interface, 2 raised to the power noted below is added to the sum. For example, a REMOTE interface which has the capability to support only 100Base-TX would have a value of 128 (2**7). In contrast, a REMOTE interface which supports both 100Base-TX and 100Base-TX Full Duplex would cause this object to have a value of 384 ((2**7) + (2**8)). The powers of 2 assigned to the capabilities are these: Power Capability 0 Pause 1 ASM_DIR 5 10Base-T 6 10Base-T Full Duplex 7 100Base-TX 8 100Base-TX Full Duplex 9 100Base-T4 14 1000Base-X 15 1000Base-X Full Duplex NOTE: This parameter is only valid if SpeedSelect is configured for NWay.')
mibBuilder.exportSymbols("Wellfleet-CSMACD-MIB", wfCSMACDAutoNegEntry=wfCSMACDAutoNegEntry, wfCSMACDSlot=wfCSMACDSlot, wfCSMACDFramesRxOk=wfCSMACDFramesRxOk, wfCSMACDSingleCollisionFrames=wfCSMACDSingleCollisionFrames, wfCSMACDOutQLen=wfCSMACDOutQLen, wfCSMACDState=wfCSMACDState, wfCSMACDRxReplenMisses=wfCSMACDRxReplenMisses, wfCSMACDRxQueueLength=wfCSMACDRxQueueLength, wfCSMACDAutoNegAdvertisedCapability=wfCSMACDAutoNegAdvertisedCapability, wfCSMACDAutoNegRemoteSignaling=wfCSMACDAutoNegRemoteSignaling, wfCSMACDLineNumber=wfCSMACDLineNumber, wfCSMACDHardwareFilter=wfCSMACDHardwareFilter, wfCSMACDMerr=wfCSMACDMerr, wfCSMACDAutoNegState=wfCSMACDAutoNegState, wfCSMACDRxFlowControlPauseFrames=wfCSMACDRxFlowControlPauseFrames, wfCSMACDDelete=wfCSMACDDelete, wfCSMACDTxCmplProcessings=wfCSMACDTxCmplProcessings, wfCSMACDLateCollnTx=wfCSMACDLateCollnTx, wfCSMACDIfIndex=wfCSMACDIfIndex, wfCSMACDConnector=wfCSMACDConnector, wfCSMACDDsqmsLineSpeed=wfCSMACDDsqmsLineSpeed, wfCSMACDBofl=wfCSMACDBofl, wfCSMACDCfgTxQueueLength=wfCSMACDCfgTxQueueLength, wfCSMACDAutoNegSpeedSelect=wfCSMACDAutoNegSpeedSelect, wfCSMACDLackRescErrorRx=wfCSMACDLackRescErrorRx, wfCSMACDAlignmentMode=wfCSMACDAlignmentMode, wfCSMACDRxUnsupportedOpcodes=wfCSMACDRxUnsupportedOpcodes, wfCSMACDIntProcessings=wfCSMACDIntProcessings, wfCSMACDInternalMacRxErrors=wfCSMACDInternalMacRxErrors, wfCSMACDLineCapability=wfCSMACDLineCapability, wfCSMACDBoflRetries=wfCSMACDBoflRetries, wfCSMACDTurboBoflDebug=wfCSMACDTurboBoflDebug, wfCSMACDTxQueueReductions=wfCSMACDTxQueueReductions, wfCSMACDUfloTx=wfCSMACDUfloTx, wfCSMACDAutoNegReceivedCapability=wfCSMACDAutoNegReceivedCapability, wfCSMACDDeferredTx=wfCSMACDDeferredTx, wfCSMACDEtherChipSet=wfCSMACDEtherChipSet, wfCSMACDBoflTmoDivisor=wfCSMACDBoflTmoDivisor, wfCSMACDTxFlowControlPauseFrames=wfCSMACDTxFlowControlPauseFrames, wfCSMACDTxQueueLength=wfCSMACDTxQueueLength, wfCSMACDTable=wfCSMACDTable, wfCSMACDOfloRx=wfCSMACDOfloRx, wfCSMACDTxClipFrames=wfCSMACDTxClipFrames, wfCSMACDTxProcessings=wfCSMACDTxProcessings, wfCSMACDFlowControlEnable=wfCSMACDFlowControlEnable, wfCSMACDLateCollnRx=wfCSMACDLateCollnRx, wfCSMACDAutoNegDelete=wfCSMACDAutoNegDelete, wfCSMACDExcessvCollnTx=wfCSMACDExcessvCollnTx, wfCSMACDEntry=wfCSMACDEntry, wfCSMACDMultipleCollisionFrames=wfCSMACDMultipleCollisionFrames, wfCSMACDCerr=wfCSMACDCerr, wfCSMACDUnAlignedFrames=wfCSMACDUnAlignedFrames, wfCSMACDLastChange=wfCSMACDLastChange, wfCSMACDMadr=wfCSMACDMadr, wfCSMACDTxFlowControlPauseZeroEnable=wfCSMACDTxFlowControlPauseZeroEnable, wfCSMACDAutoNegRestartAutoConfig=wfCSMACDAutoNegRestartAutoConfig, wfCSMACDAutoNegTable=wfCSMACDAutoNegTable, wfCSMACDOctetsTxOk=wfCSMACDOctetsTxOk, wfCSMACDBufErrorTx=wfCSMACDBufErrorTx, wfCSMACDBoflTmo=wfCSMACDBoflTmo, wfCSMACDAutoNegConnector=wfCSMACDAutoNegConnector, wfCSMACDAutoNegSlot=wfCSMACDAutoNegSlot, wfCSMACDCct=wfCSMACDCct, wfCSMACDFcsErrorRx=wfCSMACDFcsErrorRx, wfCSMACDAutoNegLocalCapability=wfCSMACDAutoNegLocalCapability, wfCSMACDAlignErrorRx=wfCSMACDAlignErrorRx, wfCSMACDRxSymbolErrors=wfCSMACDRxSymbolErrors, wfCSMACDOctetsRxOk=wfCSMACDOctetsRxOk, wfCSMACDFramesTxOk=wfCSMACDFramesTxOk, wfCSMACDTxDeadlocks=wfCSMACDTxDeadlocks, wfCSMACDInternalMacTxErrors=wfCSMACDInternalMacTxErrors, wfCSMACDCfgRxQueueLength=wfCSMACDCfgRxQueueLength, wfCSMACDTooLongErrorRx=wfCSMACDTooLongErrorRx, wfCSMACDRxFlushes=wfCSMACDRxFlushes, wfCSMACDModule=wfCSMACDModule, wfCSMACDTxFlowControlPauseTime=wfCSMACDTxFlowControlPauseTime, wfCSMACDMtu=wfCSMACDMtu, wfCSMACDRxProcessings=wfCSMACDRxProcessings, wfCSMACDEnable=wfCSMACDEnable, wfCSMACDConfigurableSpeed=wfCSMACDConfigurableSpeed, wfCSMACDBablErrorTx=wfCSMACDBablErrorTx, wfCSMACDLcarTx=wfCSMACDLcarTx, wfCSMACDActualConnector=wfCSMACDActualConnector)
