#
# PySNMP MIB module CISCO-QOS-PIB-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-QOS-PIB-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:52:34 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion")
ciscoPibToMib, = mibBuilder.importSymbols("CISCO-SMI", "ciscoPibToMib")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
Bits, Counter32, Gauge32, ModuleIdentity, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, Unsigned32, TimeTicks, MibIdentifier, Counter64, NotificationType, iso, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter32", "Gauge32", "ModuleIdentity", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "Unsigned32", "TimeTicks", "MibIdentifier", "Counter64", "NotificationType", "iso", "IpAddress")
TruthValue, TextualConvention, MacAddress, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "TextualConvention", "MacAddress", "DisplayString")
ciscoQosPIBMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 18, 2, 1))
ciscoQosPIBMIB.setRevisions(('2007-08-29 00:00', '2004-05-03 00:00', '2003-02-21 00:00', '2002-05-02 00:00', '2000-06-16 00:00', '2000-05-11 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoQosPIBMIB.setRevisionsDescriptions(('Add new enum values in QosInterfaceQueueType textual convention for various queue type.', 'Add new enum value in QosInterfaceQueueType textual convention for 1p3q8t queue type.', 'Add new enum values in QosInterfaceQueueType textual convention to indicate queue types containing priority queue. Add new enum value in ThresholdSetRange textual convention for zero threshold.', 'Fix the SYNTAX of Role and RoleCombination.', 'Added QosInterfaceTypeCapabilities textual convention.', 'Initial version of this PIB module.',))
if mibBuilder.loadTexts: ciscoQosPIBMIB.setLastUpdated('200708290000Z')
if mibBuilder.loadTexts: ciscoQosPIBMIB.setOrganization('Cisco Systems Inc.')
if mibBuilder.loadTexts: ciscoQosPIBMIB.setContactInfo('Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-wbu@cisco.com')
if mibBuilder.loadTexts: ciscoQosPIBMIB.setDescription('The Cisco QOS Policy PIB for provisioning QOS policy.')
class Dscp(TextualConvention, Integer32):
    description = 'An integer that is in the range of the DiffServ codepoint values.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 63)

class QosLayer2Cos(TextualConvention, Integer32):
    description = 'An integer that is in the range of the layer 2 CoS values. This corresponds to the 802.1p and ISL CoS values.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 7)

class QueueRange(TextualConvention, Integer32):
    description = 'An integer that is limited to the number of queues per interface supported by the PIB. Limited to 64 which is the number of codepoints.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 8, 16, 32, 64))
    namedValues = NamedValues(("oneQ", 1), ("twoQ", 2), ("threeQ", 3), ("fourQ", 4), ("eightQ", 8), ("sixteenQ", 16), ("thirtyTwoQ", 32), ("sixtyFourQ", 64))

class ThresholdSetRange(TextualConvention, Integer32):
    description = 'An integer that is limited to the number of threshold sets per queue supported by the PIB. A threshold set is a collection of parameters describing queue threshold. The parameters of a threshold set depend on the drop mechanism the queue implements. For example, the threshold set for tail-drop comprises a single parameter, the percentage of queue size at which dropping occurs. The threshold set for WRED comprises two parameters; within the range of the two parameters packets are randomly dropped.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 4, 8))
    namedValues = NamedValues(("zeroT", 0), ("oneT", 1), ("twoT", 2), ("fourT", 4), ("eightT", 8))

class Percent(TextualConvention, Integer32):
    description = 'An integer that is in the range of a percent value.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 100)

class QosInterfaceQueueType(TextualConvention, Integer32):
    description = 'An enumerated type for all the known interface types. The interface types are currently limited to a predefined combination of queues and thresholds such that the product of queues and thresholds does not exceed 64 (i.e., the total number of DSCPs.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45))
    namedValues = NamedValues(("oneQ1t", 1), ("oneQ2t", 2), ("oneQ4t", 3), ("oneQ8t", 4), ("twoQ1t", 5), ("twoQ2t", 6), ("twoQ4t", 7), ("twoQ8t", 8), ("threeQ1t", 9), ("threeQ2t", 10), ("threeQ4t", 11), ("threeQ8t", 12), ("fourQ1t", 13), ("fourQ2t", 14), ("fourQ4t", 15), ("fourQ8t", 16), ("eightQ1t", 17), ("eightQ2t", 18), ("eightQ4t", 19), ("eightQ8t", 20), ("sixteenQ1t", 21), ("sixteenQ2t", 22), ("sixteenQ4t", 23), ("sixtyfourQ1t", 24), ("sixtyfourQ2t", 25), ("sixtyfourQ4t", 26), ("oneP1Q0t", 27), ("oneP1Q4t", 28), ("oneP1Q8t", 29), ("oneP2Q1t", 30), ("oneP2Q2t", 31), ("oneP3Q1t", 32), ("oneP7Q8t", 33), ("oneP3Q8t", 34), ("sixteenQ8t", 35), ("oneP15Q8t", 36), ("oneP15Q1t", 37), ("oneP7Q1t", 38), ("oneP31Q1t", 39), ("thirtytwoQ1t", 40), ("thirtytwoQ8t", 41), ("oneP31Q8t", 42), ("oneP7Q4t", 43), ("oneP3Q4t", 44), ("oneP7Q2t", 45))

class QosInterfaceTypeCapabilities(TextualConvention, Bits):
    description = 'An enumeration of interface capabilities. Used by the PDP to select policies and configuration to push to the PEP.'
    status = 'current'
    namedValues = NamedValues(("unspecified", 0), ("inputL2Classification", 1), ("inputIpClassification", 2), ("outputL2Classification", 3), ("outputIpClassification", 4), ("inputPortClassification", 19), ("outputPortClassification", 20), ("inputUflowPolicing", 5), ("inputAggregatePolicing", 6), ("outputUflowPolicing", 7), ("outputAggregatePolicing", 8), ("policeByMarkingDown", 9), ("policeByDropping", 10), ("inputUflowShaping", 21), ("inputAggregateShaping", 22), ("outputUflowShaping", 23), ("outputAggregateShaping", 24), ("fifo", 11), ("wrr", 12), ("wfq", 13), ("cq", 14), ("pq", 15), ("cbwfq", 16), ("pqWrr", 25), ("pqCbwfq", 26), ("tailDrop", 17), ("wred", 18))

class RoleCombination(TextualConvention, OctetString):
    description = "A Display string consisting of a set of roles concatenated with a '+' character where the roles are in lexicographic order from minimum to maximum."
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 255)

class PolicyInstanceId(TextualConvention, Unsigned32):
    description = 'A textual convention for an attribute that is an an unsigned integer index attribute of class. It is used for attributes that exist for the purpose of providing an integer index of an instance. For any integer index that refers to another policy instance, that other policy instance must exist. Furthermore, it is an error to try to delete a policy instance that is referred to by another instance without first deleting the referring instance.'
    status = 'current'

class Unsigned64(TextualConvention, Counter64):
    description = 'An unsigned 64 bit integer. We use SYNTAX Counter64 for the enconding rules.'
    status = 'current'

qosPIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 1))
qosDeviceConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 2))
qosDevicePibIncarnationTable = MibTable((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 2, 1), )
if mibBuilder.loadTexts: qosDevicePibIncarnationTable.setStatus('current')
if mibBuilder.loadTexts: qosDevicePibIncarnationTable.setDescription('This class contains a single policy instance that identifies the current incarnation of the PIB and the PDP that installed this incarnation. The instance of this class is reported to the PDP at client connect time so that the PDP can (attempt to) ascertain the current state of the PIB.')
qosDevicePibIncarnationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 2, 1, 1), ).setIndexNames((0, "CISCO-QOS-PIB-MIB", "qosDeviceIncarnationId"))
if mibBuilder.loadTexts: qosDevicePibIncarnationEntry.setStatus('current')
if mibBuilder.loadTexts: qosDevicePibIncarnationEntry.setDescription('The single policy instance of this class identifies the current incarnation of the PIB and the PDP that installed this incarnation.')
qosDeviceIncarnationId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 2, 1, 1, 1), PolicyInstanceId())
if mibBuilder.loadTexts: qosDeviceIncarnationId.setStatus('current')
if mibBuilder.loadTexts: qosDeviceIncarnationId.setDescription('An integer index to identify the instance of the policy class.')
qosDevicePdpName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosDevicePdpName.setStatus('current')
if mibBuilder.loadTexts: qosDevicePdpName.setDescription('The name of the PDP that installed the current incarnation of the PIB into the device. By default it is the zero length string.')
qosDevicePibIncarnation = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 2, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(128, 128)).setFixedLength(128)).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosDevicePibIncarnation.setStatus('current')
if mibBuilder.loadTexts: qosDevicePibIncarnation.setDescription('An octet string to identify the current incarnation. It has meaning to the PDP that installed the PIB and perhaps its standby PDPs. By default the empty string.')
qosDevicePibTtl = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 2, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosDevicePibTtl.setStatus('current')
if mibBuilder.loadTexts: qosDevicePibTtl.setDescription('The number of seconds after a client close or TCP timeout for which the PEP continues to enforce the policy in the PIB. After this interval, the PIB is consired expired and the device no longer enforces the policy installed in the PIB.')
qosDeviceAttributeTable = MibTable((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 2, 2), )
if mibBuilder.loadTexts: qosDeviceAttributeTable.setStatus('current')
if mibBuilder.loadTexts: qosDeviceAttributeTable.setDescription('The single instance of this class indicates specific attributes of the device. These include configuration values such as the configured PDP addresses, the maximum message size, and specific device capabilities. The latter include input port-based and output port-based classification and/or policing, support for flow based policing, aggregate based policing, traffic shaping capabilities, etc.')
qosDeviceAttributeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 2, 2, 1), ).setIndexNames((0, "CISCO-QOS-PIB-MIB", "qosDeviceAttributeId"))
if mibBuilder.loadTexts: qosDeviceAttributeEntry.setStatus('current')
if mibBuilder.loadTexts: qosDeviceAttributeEntry.setDescription('The single instance of this class indicates specific attributes of the device.')
qosDeviceAttributeId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 2, 2, 1, 1), PolicyInstanceId())
if mibBuilder.loadTexts: qosDeviceAttributeId.setStatus('current')
if mibBuilder.loadTexts: qosDeviceAttributeId.setDescription('An integer index to identify the instance of the policy class.')
qosDevicePepDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 2, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosDevicePepDomain.setStatus('current')
if mibBuilder.loadTexts: qosDevicePepDomain.setDescription('The QoS domain that this device belongs to. This is configured locally on the device (perhaps by some management protocol such as SNMP). By default, it is the zero-length string.')
qosDevicePrimaryPdp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 2, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosDevicePrimaryPdp.setStatus('current')
if mibBuilder.loadTexts: qosDevicePrimaryPdp.setDescription('The address of the PDP configured to be the primary PDP for the device.')
qosDeviceSecondaryPdp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 2, 2, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosDeviceSecondaryPdp.setStatus('current')
if mibBuilder.loadTexts: qosDeviceSecondaryPdp.setDescription('The address of the PDP configured to be the secondary PDP for the device. An address of zero indicates no secondary is configured.')
qosDeviceMaxMessageSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 2, 2, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosDeviceMaxMessageSize.setStatus('current')
if mibBuilder.loadTexts: qosDeviceMaxMessageSize.setDescription("The maximum size message that this PEP is capable of receiving in bytes. A value of zero means that the maximum message size is unspecified (but does not mean it is unlimited). A message greater than this maximum results in a MessageTooBig error on a 'no commit' REP.")
qosDeviceCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 2, 2, 1, 6), Bits().clone(namedValues=NamedValues(("unspecified", 0), ("layer2Cos", 1), ("ipPrecedence", 2), ("dscp", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosDeviceCapabilities.setStatus('current')
if mibBuilder.loadTexts: qosDeviceCapabilities.setDescription('An enumeration of device capabilities. Used by the PDP to select policies and configuration to push to the PEP.')
qosInterfaceTypeTable = MibTable((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 2, 3), )
if mibBuilder.loadTexts: qosInterfaceTypeTable.setStatus('current')
if mibBuilder.loadTexts: qosInterfaceTypeTable.setDescription('This class describes the interface types of the interfaces that exist on the device. It includes the queue type, role combination and capabilities of interfaces. The PEP does not report which specific interfaces have which characteristics.')
qosInterfaceTypeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 2, 3, 1), ).setIndexNames((0, "CISCO-QOS-PIB-MIB", "qosInterfaceTypeId"))
if mibBuilder.loadTexts: qosInterfaceTypeEntry.setStatus('current')
if mibBuilder.loadTexts: qosInterfaceTypeEntry.setDescription('An instance of this class describes a role combination for an interface type of an interface that exists on the device.')
qosInterfaceTypeId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 2, 3, 1, 1), PolicyInstanceId())
if mibBuilder.loadTexts: qosInterfaceTypeId.setStatus('current')
if mibBuilder.loadTexts: qosInterfaceTypeId.setDescription('An integer index to identify the instance of the policy class.')
qosInterfaceQueueType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 2, 3, 1, 2), QosInterfaceQueueType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosInterfaceQueueType.setStatus('current')
if mibBuilder.loadTexts: qosInterfaceQueueType.setDescription('The interface type in terms of number of queues and thresholds.')
qosInterfaceTypeRoles = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 2, 3, 1, 3), RoleCombination()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosInterfaceTypeRoles.setStatus('current')
if mibBuilder.loadTexts: qosInterfaceTypeRoles.setDescription('A combination of roles on at least one interface of type qosInterfaceType.')
qosInterfaceTypeCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 2, 3, 1, 4), QosInterfaceTypeCapabilities()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosInterfaceTypeCapabilities.setStatus('current')
if mibBuilder.loadTexts: qosInterfaceTypeCapabilities.setDescription('An enumeration of interface capabilities. Used by the PDP to select policies and configuration to push to the PEP.')
qosDomainConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 3))
qosDiffServMappingTable = MibTable((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 3, 1), )
if mibBuilder.loadTexts: qosDiffServMappingTable.setStatus('current')
if mibBuilder.loadTexts: qosDiffServMappingTable.setDescription('Maps each DSCP to a marked-down DSCP. Also maps each DSCP to an IP precedence and QosLayer2Cos. When configured for the first time, all 64 entries of the table must be specified. Thereafter, instances may be modified (with a delete and install in a single decision) but not deleted unless all instances are deleted.')
qosDiffServMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 3, 1, 1), ).setIndexNames((0, "CISCO-QOS-PIB-MIB", "qosDscp"))
if mibBuilder.loadTexts: qosDiffServMappingEntry.setStatus('current')
if mibBuilder.loadTexts: qosDiffServMappingEntry.setDescription('An instance of this class represents mappings from a DSCP.')
qosDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 3, 1, 1, 1), Dscp())
if mibBuilder.loadTexts: qosDscp.setStatus('current')
if mibBuilder.loadTexts: qosDscp.setDescription('A DSCP for which this entry contains mappings.')
qosMarkedDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 3, 1, 1, 2), Dscp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosMarkedDscp.setStatus('current')
if mibBuilder.loadTexts: qosMarkedDscp.setDescription('The DSCP to use instead of the qosDscp when the packet is out of profile and hence marked as such.')
qosL2Cos = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 3, 1, 1, 3), QosLayer2Cos()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosL2Cos.setStatus('current')
if mibBuilder.loadTexts: qosL2Cos.setDescription('The L2 CoS value to use when mapping this DSCP to layer 2 CoS.')
qosCosToDscpTable = MibTable((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 3, 2), )
if mibBuilder.loadTexts: qosCosToDscpTable.setStatus('current')
if mibBuilder.loadTexts: qosCosToDscpTable.setDescription('Maps each of eight CoS values to a DSCP. When configured for the first time, all 8 entries of the table must be specified. Thereafter, instances may be modified (with a delete and install in a single decision) but not deleted unless all instances are deleted.')
qosCosToDscpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 3, 2, 1), ).setIndexNames((0, "CISCO-QOS-PIB-MIB", "qosCosToDscpCos"))
if mibBuilder.loadTexts: qosCosToDscpEntry.setStatus('current')
if mibBuilder.loadTexts: qosCosToDscpEntry.setDescription('An instance of this class maps a CoS value to a DSCP.')
qosCosToDscpCos = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 3, 2, 1, 1), QosLayer2Cos())
if mibBuilder.loadTexts: qosCosToDscpCos.setStatus('current')
if mibBuilder.loadTexts: qosCosToDscpCos.setDescription('The L2 CoS value that is being mapped.')
qosCosToDscpDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 3, 2, 1, 2), Dscp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosCosToDscpDscp.setStatus('current')
if mibBuilder.loadTexts: qosCosToDscpDscp.setDescription('The DSCP value to use when mapping the L2 CoS to a DSCP.')
qosUnmatchedPolicy = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 4))
qosUnmatchedPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 4, 1), )
if mibBuilder.loadTexts: qosUnmatchedPolicyTable.setStatus('current')
if mibBuilder.loadTexts: qosUnmatchedPolicyTable.setDescription('A policy class that specifies what QoS to apply to a packet that does not match any other policy configured for this role combination for a particular direction of traffic.')
qosUnmatchedPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 4, 1, 1), ).setIndexNames((0, "CISCO-QOS-PIB-MIB", "qosUnmatchedPolicyId"))
if mibBuilder.loadTexts: qosUnmatchedPolicyEntry.setStatus('current')
if mibBuilder.loadTexts: qosUnmatchedPolicyEntry.setDescription('An instance of this class specifies the unmatched policy for a particular role combination for incoming or outgoing traffic.')
qosUnmatchedPolicyId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 4, 1, 1, 1), PolicyInstanceId())
if mibBuilder.loadTexts: qosUnmatchedPolicyId.setStatus('current')
if mibBuilder.loadTexts: qosUnmatchedPolicyId.setDescription('An integer index to identify the instance of the policy class.')
qosUnmatchedPolicyRole = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 4, 1, 1, 2), RoleCombination()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosUnmatchedPolicyRole.setStatus('current')
if mibBuilder.loadTexts: qosUnmatchedPolicyRole.setDescription('Role combination for which this instance applies.')
qosUnmatchedPolicyDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("in", 0), ("out", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosUnmatchedPolicyDirection.setStatus('current')
if mibBuilder.loadTexts: qosUnmatchedPolicyDirection.setDescription('The direction of packet flow at the interface in question to which this instance applies.')
qosUnmatchedPolicyDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 4, 1, 1, 4), Dscp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosUnmatchedPolicyDscp.setStatus('current')
if mibBuilder.loadTexts: qosUnmatchedPolicyDscp.setDescription('The DSCP to classify the unmatched packet with. This must be specified even if qosUnmatchedPolicyDscpTrusted is true.')
qosUnmatchedPolicyDscpTrusted = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 4, 1, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosUnmatchedPolicyDscpTrusted.setStatus('current')
if mibBuilder.loadTexts: qosUnmatchedPolicyDscpTrusted.setDescription('If this attribute is true, then the Dscp associated with the packet is trusted, i.e., it is assumed to have already been set. In this case, the Dscp is not rewritten with qosUnmatchedPolicyDscp (qosUnmatchedPolicyDscp is ignored) unless this is a non-IP packet and arrives untagged. The packet is still policed as part of its micro flow and its aggregate flow. When a trusted action is applied to an input interface, the Dscp (for an IP packet) or CoS (for a non-IP packet) associated with the packet is the one contained in the packet. When a trusted action is applied to an output interface, the Dscp associated with the packet is the one that is the result of the input classification and policing.')
qosUnmatchPolMicroFlowPolicerId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 4, 1, 1, 6), PolicyInstanceId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosUnmatchPolMicroFlowPolicerId.setStatus('current')
if mibBuilder.loadTexts: qosUnmatchPolMicroFlowPolicerId.setDescription('An index identifying the instance of policer to apply to unmatched packets. It must correspond to the integer index of an instance of class qosPolicerTable or be zero. If zero, the microflow is not policed.')
qosUnmatchedPolicyAggregateId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 4, 1, 1, 7), PolicyInstanceId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosUnmatchedPolicyAggregateId.setStatus('current')
if mibBuilder.loadTexts: qosUnmatchedPolicyAggregateId.setDescription('An index identifying the aggregate that the packet belongs to. It must correspond to the integer index of an instance of class qosAggregateTable or be zero. If zero, the microflow does not belong to any aggregate and is not policed as part of any aggregate.')
qosPolicer = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 5))
qosPolicerTable = MibTable((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 5, 1), )
if mibBuilder.loadTexts: qosPolicerTable.setStatus('current')
if mibBuilder.loadTexts: qosPolicerTable.setDescription('A class specifying policing parameters for both microflows and aggregate flows. This table is designed for policing according to a token bucket scheme where an average rate and burst size is specified.')
qosPolicerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 5, 1, 1), ).setIndexNames((0, "CISCO-QOS-PIB-MIB", "qosPolicerId"))
if mibBuilder.loadTexts: qosPolicerEntry.setStatus('current')
if mibBuilder.loadTexts: qosPolicerEntry.setDescription('An instance of this class specifies a set of policing parameters.')
qosPolicerId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 5, 1, 1, 1), PolicyInstanceId())
if mibBuilder.loadTexts: qosPolicerId.setStatus('current')
if mibBuilder.loadTexts: qosPolicerId.setDescription('An integer index to identify the instance of the policy class.')
qosPolicerRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 5, 1, 1, 2), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosPolicerRate.setStatus('current')
if mibBuilder.loadTexts: qosPolicerRate.setDescription('The token rate. It is specified in units of bit/s. A rate of zero means that all packets will be out of profile. If the qosPolicerAction is set to drop then this effectively denies any service to packets policed by this policer.')
qosPolicerNormalBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 5, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosPolicerNormalBurst.setStatus('current')
if mibBuilder.loadTexts: qosPolicerNormalBurst.setDescription('The normal size of a burst in terms of bits.')
qosPolicerExcessBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 5, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosPolicerExcessBurst.setStatus('current')
if mibBuilder.loadTexts: qosPolicerExcessBurst.setDescription('The excess size of a burst in terms of bits.')
qosPolicerAction = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("drop", 0), ("mark", 1), ("shape", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosPolicerAction.setStatus('current')
if mibBuilder.loadTexts: qosPolicerAction.setDescription('An indication of how to handle out of profile packets. When the shape action is chosen then traffic is shaped to the rate specified by qosPolicerRate.')
qosAggregateTable = MibTable((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 5, 2), )
if mibBuilder.loadTexts: qosAggregateTable.setStatus('current')
if mibBuilder.loadTexts: qosAggregateTable.setDescription('Instances of this class identify aggregate flows and the policer to apply to each.')
qosAggregateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 5, 2, 1), ).setIndexNames((0, "CISCO-QOS-PIB-MIB", "qosAggregateId"))
if mibBuilder.loadTexts: qosAggregateEntry.setStatus('current')
if mibBuilder.loadTexts: qosAggregateEntry.setDescription('An instance of this class specifies the policer to apply to an aggregate flow.')
qosAggregateId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 5, 2, 1, 1), PolicyInstanceId())
if mibBuilder.loadTexts: qosAggregateId.setStatus('current')
if mibBuilder.loadTexts: qosAggregateId.setDescription('An integer index to identify the instance of the policy class.')
qosAggregatePolicerId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 5, 2, 1, 2), PolicyInstanceId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosAggregatePolicerId.setStatus('current')
if mibBuilder.loadTexts: qosAggregatePolicerId.setDescription('An index identifying the instance of policer to apply to the aggregate. It must correspond to the integer index of an instance of class qosPolicerTable.')
qosMacQos = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 6))
qosMacClassificationTable = MibTable((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 6, 1), )
if mibBuilder.loadTexts: qosMacClassificationTable.setStatus('current')
if mibBuilder.loadTexts: qosMacClassificationTable.setDescription('A class of MAC/Vlan tuples and their associated CoS values.')
qosMacClassificationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 6, 1, 1), ).setIndexNames((0, "CISCO-QOS-PIB-MIB", "qosMacClassificationId"))
if mibBuilder.loadTexts: qosMacClassificationEntry.setStatus('current')
if mibBuilder.loadTexts: qosMacClassificationEntry.setDescription('An instance of this class specifies the mapping of a VLAN and a MAC address to a CoS value.')
qosMacClassificationId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 6, 1, 1, 1), PolicyInstanceId())
if mibBuilder.loadTexts: qosMacClassificationId.setStatus('current')
if mibBuilder.loadTexts: qosMacClassificationId.setDescription('An integer index to identify the instance of the policy class.')
qosDstMacVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosDstMacVlan.setStatus('current')
if mibBuilder.loadTexts: qosDstMacVlan.setDescription('The VLAN of the destination MAC address of the L2 frame.')
qosDstMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 6, 1, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosDstMacAddress.setStatus('current')
if mibBuilder.loadTexts: qosDstMacAddress.setDescription('The destination MAC address of the L2 frame.')
qosDstMacCos = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 6, 1, 1, 4), QosLayer2Cos()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosDstMacCos.setStatus('current')
if mibBuilder.loadTexts: qosDstMacCos.setDescription('The CoS to assign the packet with the associated MAC/VLAN tuple. Note that this CoS is overridden by the policies to classify the frame at layer 3 if there are any.')
qosIpQos = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 7))
qosIpAceTable = MibTable((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 7, 1), )
if mibBuilder.loadTexts: qosIpAceTable.setStatus('current')
if mibBuilder.loadTexts: qosIpAceTable.setDescription('ACE definitions.')
qosIpAceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 7, 1, 1), ).setIndexNames((0, "CISCO-QOS-PIB-MIB", "qosIpAceId"))
if mibBuilder.loadTexts: qosIpAceEntry.setStatus('current')
if mibBuilder.loadTexts: qosIpAceEntry.setDescription('An instance of this class specifies an ACE.')
qosIpAceId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 7, 1, 1, 1), PolicyInstanceId())
if mibBuilder.loadTexts: qosIpAceId.setStatus('current')
if mibBuilder.loadTexts: qosIpAceId.setDescription('An integer index to identify the instance of the policy class.')
qosIpAceDstAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 7, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIpAceDstAddr.setStatus('current')
if mibBuilder.loadTexts: qosIpAceDstAddr.setDescription("The IP address to match against the packet's destination IP address.")
qosIpAceDstAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 7, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIpAceDstAddrMask.setStatus('current')
if mibBuilder.loadTexts: qosIpAceDstAddrMask.setDescription('A mask for the matching of the destination IP address.')
qosIpAceSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 7, 1, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIpAceSrcAddr.setStatus('current')
if mibBuilder.loadTexts: qosIpAceSrcAddr.setDescription("The IP address to match against the packet's source IP address.")
qosIpAceSrcAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 7, 1, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIpAceSrcAddrMask.setStatus('current')
if mibBuilder.loadTexts: qosIpAceSrcAddrMask.setDescription('A mask for the matching of the source IP address.')
qosIpAceDscpMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 7, 1, 1, 6), Dscp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIpAceDscpMin.setStatus('current')
if mibBuilder.loadTexts: qosIpAceDscpMin.setDescription('The minimum value that the DSCP in the packet can have and match this ACE.')
qosIpAceDscpMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 7, 1, 1, 7), Dscp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIpAceDscpMax.setStatus('current')
if mibBuilder.loadTexts: qosIpAceDscpMax.setDescription('The maximum value that the DSCP in the packet can have and match this ACE.')
qosIpAceProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 7, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIpAceProtocol.setStatus('current')
if mibBuilder.loadTexts: qosIpAceProtocol.setDescription("The IP protocol to match against the packet's protocol. A value of zero means match all.")
qosIpAceDstL4PortMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 7, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIpAceDstL4PortMin.setStatus('current')
if mibBuilder.loadTexts: qosIpAceDstL4PortMin.setDescription("The minimum value that the packet's layer 4 dest port number can have and match this ACE.")
qosIpAceDstL4PortMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 7, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIpAceDstL4PortMax.setStatus('current')
if mibBuilder.loadTexts: qosIpAceDstL4PortMax.setDescription("The maximum value that the packet's layer 4 dest port number can have and match this ACE.")
qosIpAceSrcL4PortMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 7, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIpAceSrcL4PortMin.setStatus('current')
if mibBuilder.loadTexts: qosIpAceSrcL4PortMin.setDescription("The minimum value that the packet's layer 4 source port number can have and match this ACE.")
qosIpAceSrcL4PortMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 7, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIpAceSrcL4PortMax.setStatus('current')
if mibBuilder.loadTexts: qosIpAceSrcL4PortMax.setDescription("The maximum value that the packet's layer 4 source port number can have and match this ACE.")
qosIpAcePermit = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 7, 1, 1, 13), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIpAcePermit.setStatus('current')
if mibBuilder.loadTexts: qosIpAcePermit.setDescription('If the packet matches this ACE and the value of this attribute is true, then the matching process terminates and the QoS associated with this ACE (indirectly through the ACL) is applied to the packet. If the value of this attribute is false, then no more ACEs in this ACL are compared to this packet and matching continues with the first ACE of the next ACL.')
qosIpAclDefinitionTable = MibTable((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 7, 2), )
if mibBuilder.loadTexts: qosIpAclDefinitionTable.setStatus('current')
if mibBuilder.loadTexts: qosIpAclDefinitionTable.setDescription('A class that defines a set of ACLs each being an ordered list of ACEs.')
qosIpAclDefinitionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 7, 2, 1), ).setIndexNames((0, "CISCO-QOS-PIB-MIB", "qosIpAclDefinitionId"))
if mibBuilder.loadTexts: qosIpAclDefinitionEntry.setStatus('current')
if mibBuilder.loadTexts: qosIpAclDefinitionEntry.setDescription('An instance of this class specifies an ACE in an ACL and its order with respect to other ACEs in the same ACL.')
qosIpAclDefinitionId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 7, 2, 1, 1), PolicyInstanceId())
if mibBuilder.loadTexts: qosIpAclDefinitionId.setStatus('current')
if mibBuilder.loadTexts: qosIpAclDefinitionId.setDescription('An integer index to identify the instance of the policy class.')
qosIpAclId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 7, 2, 1, 2), PolicyInstanceId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIpAclId.setStatus('current')
if mibBuilder.loadTexts: qosIpAclId.setDescription('An index for this ACL. There will be one instance of policy class qosIpAclDefinition with this integer index for each ACE in the ACL per role combination.')
qosIpAceOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 7, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIpAceOrder.setStatus('current')
if mibBuilder.loadTexts: qosIpAceOrder.setDescription('An integer that determines the position of this ACE in the ACL. An ACE with a given order is positioned in the access contol list before one with a higher order.')
qosIpAclDefAceId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 7, 2, 1, 4), PolicyInstanceId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIpAclDefAceId.setStatus('current')
if mibBuilder.loadTexts: qosIpAclDefAceId.setDescription('This attribute specifies the ACE in the qosIpAceTable that is in the ACL specified by qosIpAclId at the position specified by qosIpAceOrder.')
qosIpAclActionTable = MibTable((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 7, 3), )
if mibBuilder.loadTexts: qosIpAclActionTable.setStatus('current')
if mibBuilder.loadTexts: qosIpAclActionTable.setDescription('A class that applies a set of ACLs to interfaces specifying, for each interface the order of the ACL with respect to other ACLs applied to the same interface and, for each ACL the action to take for a packet that matches a permit ACE in that ACL. Interfaces are specified abstractly in terms of interface role combinations.')
qosIpAclActionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 7, 3, 1), ).setIndexNames((0, "CISCO-QOS-PIB-MIB", "qosIpAclActionId"))
if mibBuilder.loadTexts: qosIpAclActionEntry.setStatus('current')
if mibBuilder.loadTexts: qosIpAclActionEntry.setDescription('An instance of this class applies an ACL to traffic in a particular direction on an interface with a particular role combination, and specifies the action for packets which match the ACL.')
qosIpAclActionId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 7, 3, 1, 1), PolicyInstanceId())
if mibBuilder.loadTexts: qosIpAclActionId.setStatus('current')
if mibBuilder.loadTexts: qosIpAclActionId.setDescription('An integer index to identify the instance of the policy class.')
qosIpAclActAclId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 7, 3, 1, 2), PolicyInstanceId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIpAclActAclId.setStatus('current')
if mibBuilder.loadTexts: qosIpAclActAclId.setDescription('The ACL associated with this action.')
qosIpAclInterfaceRoles = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 7, 3, 1, 3), RoleCombination()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIpAclInterfaceRoles.setStatus('current')
if mibBuilder.loadTexts: qosIpAclInterfaceRoles.setDescription('The interfaces to which this ACL applies specified in terms of a set of roles.')
qosIpAclInterfaceDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 7, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("in", 0), ("out", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIpAclInterfaceDirection.setStatus('current')
if mibBuilder.loadTexts: qosIpAclInterfaceDirection.setDescription('The direction of packet flow at the interface in question to which this ACL applies.')
qosIpAclOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 7, 3, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIpAclOrder.setStatus('current')
if mibBuilder.loadTexts: qosIpAclOrder.setDescription('An integer that determines the order of this ACL in the list of ACLs applied to interfaces of the specified role combination. An ACL with a given order is positioned in the list before one with a higher order.')
qosIpAclDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 7, 3, 1, 6), Dscp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIpAclDscp.setStatus('current')
if mibBuilder.loadTexts: qosIpAclDscp.setDescription('The DSCP to classify the packet with in the event that the packet matches an ACE in this ACL and the ACE is a permit.')
qosIpAclDscpTrusted = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 7, 3, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIpAclDscpTrusted.setStatus('current')
if mibBuilder.loadTexts: qosIpAclDscpTrusted.setDescription('If this attribute is true, then the Dscp associated with the packet is trusted, i.e., it is assumed to have already been set. In this case, the Dscp is not rewritten with qosIpAclDscp (qosIpAclDscp is ignored). The packet is still policed as part of its micro flow and its aggregate flow. When a trusted action is applied to an input interface, the Dscp associated with the packet is the one contained in the packet. When a trusted action is applied to an output interface, the Dscp associated with the packet is the one that is the result of the input classification and policing.')
qosIpAclMicroFlowPolicerId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 7, 3, 1, 8), PolicyInstanceId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIpAclMicroFlowPolicerId.setStatus('current')
if mibBuilder.loadTexts: qosIpAclMicroFlowPolicerId.setDescription('An index identifying the instance of policer to apply to the microflow. It must correspond to the integer index of an instance of class qosPolicerTableor be zero. If zero, the microflow is not policed.')
qosIpAclAggregateId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 7, 3, 1, 9), PolicyInstanceId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIpAclAggregateId.setStatus('current')
if mibBuilder.loadTexts: qosIpAclAggregateId.setDescription('An index identifying the aggregate that the packet belongs to. It must correspond to the integer index of an instance of class qosAggregateTable or be zero. If zero, the microflow does not belong to any aggregate and is not policed as part of any aggregate.')
qosIfParameters = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 8))
qosIfSchedulingPreferencesTable = MibTable((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 8, 1), )
if mibBuilder.loadTexts: qosIfSchedulingPreferencesTable.setStatus('current')
if mibBuilder.loadTexts: qosIfSchedulingPreferencesTable.setDescription('This class specifies the scheduling preference an interface chooses if it supports multiple scheduling types. Higher values are preferred over lower values.')
qosIfSchedulingPreferenceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 8, 1, 1), ).setIndexNames((0, "CISCO-QOS-PIB-MIB", "qosIfSchedulingPreferenceId"))
if mibBuilder.loadTexts: qosIfSchedulingPreferenceEntry.setStatus('current')
if mibBuilder.loadTexts: qosIfSchedulingPreferenceEntry.setDescription('An instance of this class specifies a scheduling preference for a queue-type on an interface with a particular role combination.')
qosIfSchedulingPreferenceId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 8, 1, 1, 1), PolicyInstanceId())
if mibBuilder.loadTexts: qosIfSchedulingPreferenceId.setStatus('current')
if mibBuilder.loadTexts: qosIfSchedulingPreferenceId.setDescription('An integer index to identify the instance of the policy class.')
qosIfSchedulingRoles = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 8, 1, 1, 2), RoleCombination()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIfSchedulingRoles.setStatus('current')
if mibBuilder.loadTexts: qosIfSchedulingRoles.setDescription('The combination of roles the interface must have for this policy instance to apply to that interface.')
qosIfSchedulingPreference = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 8, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIfSchedulingPreference.setStatus('current')
if mibBuilder.loadTexts: qosIfSchedulingPreference.setDescription('The preference to use this scheduling discipline and queue type. A higher value means a higher preference. If two disciplines have the same preference the choice is a local decision.')
qosIfSchedulingDiscipline = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 8, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("weightedFairQueueing", 1), ("weightedRoundRobin", 2), ("customQueueing", 3), ("priorityQueueing", 4), ("classBasedWFQ", 5), ("fifo", 6), ("pqWrr", 7), ("pqCbwfq", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIfSchedulingDiscipline.setStatus('current')
if mibBuilder.loadTexts: qosIfSchedulingDiscipline.setDescription('An enumerate type for all the known scheduling disciplines.')
qosIfSchedulingQueueType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 8, 1, 1, 5), QosInterfaceQueueType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIfSchedulingQueueType.setStatus('current')
if mibBuilder.loadTexts: qosIfSchedulingQueueType.setDescription('The queue type of this preference.')
qosIfDropPreferenceTable = MibTable((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 8, 2), )
if mibBuilder.loadTexts: qosIfDropPreferenceTable.setStatus('current')
if mibBuilder.loadTexts: qosIfDropPreferenceTable.setDescription('This class specifies the preference of the drop mechanism an interface chooses if it supports multiple drop mechanisms. Higher values are preferred over lower values.')
qosIfDropPreferenceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 8, 2, 1), ).setIndexNames((0, "CISCO-QOS-PIB-MIB", "qosIfDropPreferenceId"))
if mibBuilder.loadTexts: qosIfDropPreferenceEntry.setStatus('current')
if mibBuilder.loadTexts: qosIfDropPreferenceEntry.setDescription('An instance of this class specifies a drop preference for a drop mechanism on an interface with a particular role combination.')
qosIfDropPreferenceId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 8, 2, 1, 1), PolicyInstanceId())
if mibBuilder.loadTexts: qosIfDropPreferenceId.setStatus('current')
if mibBuilder.loadTexts: qosIfDropPreferenceId.setDescription('An integer index to identify the instance of the policy class.')
qosIfDropRoles = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 8, 2, 1, 2), RoleCombination()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIfDropRoles.setStatus('current')
if mibBuilder.loadTexts: qosIfDropRoles.setDescription('The combination of roles the interface must have for this policy instance to apply to that interface.')
qosIfDropPreference = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 8, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIfDropPreference.setStatus('current')
if mibBuilder.loadTexts: qosIfDropPreference.setDescription('The preference to use this drop mechanism. A higher value means a higher preference. If two mechanisms have the same preference the choice is a local decision.')
qosIfDropDiscipline = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 8, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("qosIfDropWRED", 1), ("qosIfDropTailDrop", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIfDropDiscipline.setStatus('current')
if mibBuilder.loadTexts: qosIfDropDiscipline.setDescription('An enumerate type for all the known drop mechanisms.')
qosIfDscpAssignmentTable = MibTable((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 8, 3), )
if mibBuilder.loadTexts: qosIfDscpAssignmentTable.setStatus('current')
if mibBuilder.loadTexts: qosIfDscpAssignmentTable.setDescription('The assignment of each DSCP to a queue and threshold for each interface queue type.')
qosIfDscpAssignmentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 8, 3, 1), ).setIndexNames((0, "CISCO-QOS-PIB-MIB", "qosIfDscpAssignmentId"))
if mibBuilder.loadTexts: qosIfDscpAssignmentEntry.setStatus('current')
if mibBuilder.loadTexts: qosIfDscpAssignmentEntry.setDescription('An instance of this class specifies the queue and threshold set for a packet with a particular DSCP on an interface of a particular type with a particular role combination.')
qosIfDscpAssignmentId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 8, 3, 1, 1), PolicyInstanceId())
if mibBuilder.loadTexts: qosIfDscpAssignmentId.setStatus('current')
if mibBuilder.loadTexts: qosIfDscpAssignmentId.setDescription('An integer index to identify the instance of the policy class.')
qosIfDscpRoles = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 8, 3, 1, 2), RoleCombination()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIfDscpRoles.setStatus('current')
if mibBuilder.loadTexts: qosIfDscpRoles.setDescription('The role combination the interface must be configured with.')
qosIfQueueType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 8, 3, 1, 3), QosInterfaceQueueType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIfQueueType.setStatus('current')
if mibBuilder.loadTexts: qosIfQueueType.setDescription('The interface queue type to which this row applies.')
qosIfDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 8, 3, 1, 4), Dscp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIfDscp.setStatus('current')
if mibBuilder.loadTexts: qosIfDscp.setDescription('The DSCP to which this row applies.')
qosIfQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 8, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIfQueue.setStatus('current')
if mibBuilder.loadTexts: qosIfQueue.setDescription('The queue to which the DSCP applies for the given interface type.')
qosIfThresholdSet = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 8, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIfThresholdSet.setStatus('current')
if mibBuilder.loadTexts: qosIfThresholdSet.setDescription('The threshold set of the specified queue to which the DSCP applies for the given interface type.')
qosIfRedTable = MibTable((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 8, 4), )
if mibBuilder.loadTexts: qosIfRedTable.setStatus('current')
if mibBuilder.loadTexts: qosIfRedTable.setDescription('A class of lower and upper values for each threshold set in a queue supporting WRED. If the size of the queue for a given threshold is below the lower value then packets assigned to that threshold are always accepted into the queue. If the size of the queue is above upper value then packets are always dropped. If the size of the queue is between the lower and the upper then packets are randomly dropped.')
qosIfRedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 8, 4, 1), ).setIndexNames((0, "CISCO-QOS-PIB-MIB", "qosIfRedId"))
if mibBuilder.loadTexts: qosIfRedEntry.setStatus('current')
if mibBuilder.loadTexts: qosIfRedEntry.setDescription('An instance of this class specifies threshold limits for a particular RED threshold of a given threshold set on an interface and with a particular role combination.')
qosIfRedId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 8, 4, 1, 1), PolicyInstanceId())
if mibBuilder.loadTexts: qosIfRedId.setStatus('current')
if mibBuilder.loadTexts: qosIfRedId.setDescription('An integer index to identify the instance of the policy class.')
qosIfRedRoles = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 8, 4, 1, 2), RoleCombination()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIfRedRoles.setStatus('current')
if mibBuilder.loadTexts: qosIfRedRoles.setDescription('The role combination the interface must be configured with.')
qosIfRedNumThresholdSets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 8, 4, 1, 3), ThresholdSetRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIfRedNumThresholdSets.setStatus('current')
if mibBuilder.loadTexts: qosIfRedNumThresholdSets.setDescription('The values in this entry apply only to queues with the number of thresholds specified by this attribute.')
qosIfRedThresholdSet = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 8, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIfRedThresholdSet.setStatus('current')
if mibBuilder.loadTexts: qosIfRedThresholdSet.setDescription('The threshold set to which the lower and upper values apply. It must be in the range 1 through qosIfRedNumThresholdSets. There must be exactly one PRI for each value in this range.')
qosIfRedThresholdSetLower = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 8, 4, 1, 5), Percent()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIfRedThresholdSetLower.setStatus('current')
if mibBuilder.loadTexts: qosIfRedThresholdSetLower.setDescription('The threshold value below which no packets are dropped.')
qosIfRedThresholdSetUpper = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 8, 4, 1, 6), Percent()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIfRedThresholdSetUpper.setStatus('current')
if mibBuilder.loadTexts: qosIfRedThresholdSetUpper.setDescription('The threshold value above which all packets are dropped.')
qosIfTailDropTable = MibTable((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 8, 5), )
if mibBuilder.loadTexts: qosIfTailDropTable.setStatus('current')
if mibBuilder.loadTexts: qosIfTailDropTable.setDescription('A class for threshold sets in a queue supporting tail drop. If the size of the queue for a given threshold set is at or below the specified value then packets assigned to that threshold set are always accepted into the queue. If the size of the queue is above the specified value then packets are always dropped.')
qosIfTailDropEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 8, 5, 1), ).setIndexNames((0, "CISCO-QOS-PIB-MIB", "qosIfTailDropId"))
if mibBuilder.loadTexts: qosIfTailDropEntry.setStatus('current')
if mibBuilder.loadTexts: qosIfTailDropEntry.setDescription('An instance of this class specifies the queue depth for a particular tail-drop threshold set on an interface with a particular role combination.')
qosIfTailDropId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 8, 5, 1, 1), PolicyInstanceId())
if mibBuilder.loadTexts: qosIfTailDropId.setStatus('current')
if mibBuilder.loadTexts: qosIfTailDropId.setDescription('An integer index to identify the instance of the policy class.')
qosIfTailDropRoles = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 8, 5, 1, 2), RoleCombination()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIfTailDropRoles.setStatus('current')
if mibBuilder.loadTexts: qosIfTailDropRoles.setDescription('The role combination the interface must be configured with.')
qosIfTailDropNumThresholdSets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 8, 5, 1, 3), ThresholdSetRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIfTailDropNumThresholdSets.setStatus('current')
if mibBuilder.loadTexts: qosIfTailDropNumThresholdSets.setDescription('The value in this entry applies only to queues with the number of thresholds specified by this attribute.')
qosIfTailDropThresholdSet = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 8, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIfTailDropThresholdSet.setStatus('current')
if mibBuilder.loadTexts: qosIfTailDropThresholdSet.setDescription('The threshold set to which the threshold value applies')
qosIfTailDropThresholdSetValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 8, 5, 1, 5), Percent()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIfTailDropThresholdSetValue.setStatus('current')
if mibBuilder.loadTexts: qosIfTailDropThresholdSetValue.setDescription('The threshold value above which packets are dropped.')
qosIfWeightsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 8, 6), )
if mibBuilder.loadTexts: qosIfWeightsTable.setStatus('current')
if mibBuilder.loadTexts: qosIfWeightsTable.setDescription('A class of scheduling weights for each queue of an interface that supports weighted round robin scheduling or a mix of priority queueing and weighted round robin. For a queue with N priority queues, the N highest queue numbers are the priority queues with the highest queue number having the highest priority. WRR is applied to the non-priority queues.')
qosIfWeightsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 8, 6, 1), ).setIndexNames((0, "CISCO-QOS-PIB-MIB", "qosIfWeightsId"))
if mibBuilder.loadTexts: qosIfWeightsEntry.setStatus('current')
if mibBuilder.loadTexts: qosIfWeightsEntry.setDescription('An instance of this class specifies the scheduling weight for a particular queue of an interface with a particular number of queues and with a particular role combination.')
qosIfWeightsId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 8, 6, 1, 1), PolicyInstanceId())
if mibBuilder.loadTexts: qosIfWeightsId.setStatus('current')
if mibBuilder.loadTexts: qosIfWeightsId.setDescription('An integer index to identify the instance of the policy class.')
qosIfWeightsRoles = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 8, 6, 1, 2), RoleCombination()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIfWeightsRoles.setStatus('current')
if mibBuilder.loadTexts: qosIfWeightsRoles.setDescription('The role combination the interface must be configured with.')
qosIfWeightsNumQueues = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 8, 6, 1, 3), QueueRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIfWeightsNumQueues.setStatus('current')
if mibBuilder.loadTexts: qosIfWeightsNumQueues.setDescription('The value of the weight in this instance applies only to interfaces with the number of queues specified by this attribute.')
qosIfWeightsQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 8, 6, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIfWeightsQueue.setStatus('current')
if mibBuilder.loadTexts: qosIfWeightsQueue.setDescription('The queue to which the weight applies.')
qosIfWeightsDrainSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 8, 6, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIfWeightsDrainSize.setStatus('current')
if mibBuilder.loadTexts: qosIfWeightsDrainSize.setDescription('The maximum number of bytes that may be drained from the queue in one cycle. The percentage of the bandwith allocated to this queue can be calculated from this attribute and the sum of the drain sizes of all the non-priority queues of the interface.')
qosIfWeightsQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 8, 6, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIfWeightsQueueSize.setStatus('current')
if mibBuilder.loadTexts: qosIfWeightsQueueSize.setDescription('The size of the queue in bytes. Some devices set queue size in terms of packets. These devices must calculate the queue size in packets by assuming an average packet size suitable for the particular interface. Some devices have a fixed size buffer to be shared among all queues. These devices must allocate a fraction of the total buffer space to this queue calculated as the the ratio of the queue size to the sum of the queue sizes for the interface.')
qosPIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 1, 1))
qosPIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 1, 2))
qosPIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 1, 1, 1)).setObjects(("CISCO-QOS-PIB-MIB", "qosDevicePibIncarnationTableGroup"), ("CISCO-QOS-PIB-MIB", "qosDeviceAttributeTableGroup"), ("CISCO-QOS-PIB-MIB", "qosInterfaceTypeTableGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    qosPIBCompliance = qosPIBCompliance.setStatus('current')
if mibBuilder.loadTexts: qosPIBCompliance.setDescription('The compliance statement for the QOS Policy Derived MIB.')
qosDevicePibIncarnationTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 1, 2, 1)).setObjects(("CISCO-QOS-PIB-MIB", "qosDevicePdpName"), ("CISCO-QOS-PIB-MIB", "qosDevicePibIncarnation"), ("CISCO-QOS-PIB-MIB", "qosDevicePibTtl"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    qosDevicePibIncarnationTableGroup = qosDevicePibIncarnationTableGroup.setStatus('current')
if mibBuilder.loadTexts: qosDevicePibIncarnationTableGroup.setDescription('')
qosDeviceAttributeTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 1, 2, 2)).setObjects(("CISCO-QOS-PIB-MIB", "qosDevicePepDomain"), ("CISCO-QOS-PIB-MIB", "qosDevicePrimaryPdp"), ("CISCO-QOS-PIB-MIB", "qosDeviceSecondaryPdp"), ("CISCO-QOS-PIB-MIB", "qosDeviceMaxMessageSize"), ("CISCO-QOS-PIB-MIB", "qosDeviceCapabilities"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    qosDeviceAttributeTableGroup = qosDeviceAttributeTableGroup.setStatus('current')
if mibBuilder.loadTexts: qosDeviceAttributeTableGroup.setDescription('')
qosInterfaceTypeTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 1, 2, 3)).setObjects(("CISCO-QOS-PIB-MIB", "qosInterfaceQueueType"), ("CISCO-QOS-PIB-MIB", "qosInterfaceTypeRoles"), ("CISCO-QOS-PIB-MIB", "qosInterfaceTypeCapabilities"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    qosInterfaceTypeTableGroup = qosInterfaceTypeTableGroup.setStatus('current')
if mibBuilder.loadTexts: qosInterfaceTypeTableGroup.setDescription('')
qosDiffServMappingTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 1, 2, 4)).setObjects(("CISCO-QOS-PIB-MIB", "qosMarkedDscp"), ("CISCO-QOS-PIB-MIB", "qosL2Cos"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    qosDiffServMappingTableGroup = qosDiffServMappingTableGroup.setStatus('current')
if mibBuilder.loadTexts: qosDiffServMappingTableGroup.setDescription('')
qosCosToDscpTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 1, 2, 5)).setObjects(("CISCO-QOS-PIB-MIB", "qosCosToDscpDscp"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    qosCosToDscpTableGroup = qosCosToDscpTableGroup.setStatus('current')
if mibBuilder.loadTexts: qosCosToDscpTableGroup.setDescription('')
qosUnmatchedPolicyTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 1, 2, 6)).setObjects(("CISCO-QOS-PIB-MIB", "qosUnmatchedPolicyRole"), ("CISCO-QOS-PIB-MIB", "qosUnmatchedPolicyDirection"), ("CISCO-QOS-PIB-MIB", "qosUnmatchedPolicyDscp"), ("CISCO-QOS-PIB-MIB", "qosUnmatchedPolicyDscpTrusted"), ("CISCO-QOS-PIB-MIB", "qosUnmatchPolMicroFlowPolicerId"), ("CISCO-QOS-PIB-MIB", "qosUnmatchedPolicyAggregateId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    qosUnmatchedPolicyTableGroup = qosUnmatchedPolicyTableGroup.setStatus('current')
if mibBuilder.loadTexts: qosUnmatchedPolicyTableGroup.setDescription('')
qosPolicerTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 1, 2, 7)).setObjects(("CISCO-QOS-PIB-MIB", "qosPolicerRate"), ("CISCO-QOS-PIB-MIB", "qosPolicerNormalBurst"), ("CISCO-QOS-PIB-MIB", "qosPolicerExcessBurst"), ("CISCO-QOS-PIB-MIB", "qosPolicerAction"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    qosPolicerTableGroup = qosPolicerTableGroup.setStatus('current')
if mibBuilder.loadTexts: qosPolicerTableGroup.setDescription('')
qosAggregateTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 1, 2, 8)).setObjects(("CISCO-QOS-PIB-MIB", "qosAggregatePolicerId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    qosAggregateTableGroup = qosAggregateTableGroup.setStatus('current')
if mibBuilder.loadTexts: qosAggregateTableGroup.setDescription('')
qosMacClassificationTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 1, 2, 9)).setObjects(("CISCO-QOS-PIB-MIB", "qosDstMacVlan"), ("CISCO-QOS-PIB-MIB", "qosDstMacAddress"), ("CISCO-QOS-PIB-MIB", "qosDstMacCos"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    qosMacClassificationTableGroup = qosMacClassificationTableGroup.setStatus('current')
if mibBuilder.loadTexts: qosMacClassificationTableGroup.setDescription('')
qosIpAceTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 1, 2, 10)).setObjects(("CISCO-QOS-PIB-MIB", "qosIpAceDstAddr"), ("CISCO-QOS-PIB-MIB", "qosIpAceDstAddrMask"), ("CISCO-QOS-PIB-MIB", "qosIpAceSrcAddr"), ("CISCO-QOS-PIB-MIB", "qosIpAceSrcAddrMask"), ("CISCO-QOS-PIB-MIB", "qosIpAceDscpMin"), ("CISCO-QOS-PIB-MIB", "qosIpAceDscpMax"), ("CISCO-QOS-PIB-MIB", "qosIpAceProtocol"), ("CISCO-QOS-PIB-MIB", "qosIpAceDstL4PortMin"), ("CISCO-QOS-PIB-MIB", "qosIpAceDstL4PortMax"), ("CISCO-QOS-PIB-MIB", "qosIpAceSrcL4PortMin"), ("CISCO-QOS-PIB-MIB", "qosIpAceSrcL4PortMax"), ("CISCO-QOS-PIB-MIB", "qosIpAcePermit"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    qosIpAceTableGroup = qosIpAceTableGroup.setStatus('current')
if mibBuilder.loadTexts: qosIpAceTableGroup.setDescription('')
qosIpAclDefinitionTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 1, 2, 11)).setObjects(("CISCO-QOS-PIB-MIB", "qosIpAclId"), ("CISCO-QOS-PIB-MIB", "qosIpAceOrder"), ("CISCO-QOS-PIB-MIB", "qosIpAclDefAceId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    qosIpAclDefinitionTableGroup = qosIpAclDefinitionTableGroup.setStatus('current')
if mibBuilder.loadTexts: qosIpAclDefinitionTableGroup.setDescription('')
qosIpAclActionTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 1, 2, 12)).setObjects(("CISCO-QOS-PIB-MIB", "qosIpAclActAclId"), ("CISCO-QOS-PIB-MIB", "qosIpAclInterfaceRoles"), ("CISCO-QOS-PIB-MIB", "qosIpAclInterfaceDirection"), ("CISCO-QOS-PIB-MIB", "qosIpAclOrder"), ("CISCO-QOS-PIB-MIB", "qosIpAclDscp"), ("CISCO-QOS-PIB-MIB", "qosIpAclDscpTrusted"), ("CISCO-QOS-PIB-MIB", "qosIpAclMicroFlowPolicerId"), ("CISCO-QOS-PIB-MIB", "qosIpAclAggregateId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    qosIpAclActionTableGroup = qosIpAclActionTableGroup.setStatus('current')
if mibBuilder.loadTexts: qosIpAclActionTableGroup.setDescription('')
qosIfSchedulingPreferencesTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 1, 2, 13)).setObjects(("CISCO-QOS-PIB-MIB", "qosIfSchedulingRoles"), ("CISCO-QOS-PIB-MIB", "qosIfSchedulingPreference"), ("CISCO-QOS-PIB-MIB", "qosIfSchedulingDiscipline"), ("CISCO-QOS-PIB-MIB", "qosIfSchedulingQueueType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    qosIfSchedulingPreferencesTableGroup = qosIfSchedulingPreferencesTableGroup.setStatus('current')
if mibBuilder.loadTexts: qosIfSchedulingPreferencesTableGroup.setDescription('')
qosIfDropPreferenceTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 1, 2, 14)).setObjects(("CISCO-QOS-PIB-MIB", "qosIfDropRoles"), ("CISCO-QOS-PIB-MIB", "qosIfDropPreference"), ("CISCO-QOS-PIB-MIB", "qosIfDropDiscipline"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    qosIfDropPreferenceTableGroup = qosIfDropPreferenceTableGroup.setStatus('current')
if mibBuilder.loadTexts: qosIfDropPreferenceTableGroup.setDescription('')
qosIfDscpAssignmentTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 1, 2, 15)).setObjects(("CISCO-QOS-PIB-MIB", "qosIfDscpRoles"), ("CISCO-QOS-PIB-MIB", "qosIfQueueType"), ("CISCO-QOS-PIB-MIB", "qosIfDscp"), ("CISCO-QOS-PIB-MIB", "qosIfQueue"), ("CISCO-QOS-PIB-MIB", "qosIfThresholdSet"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    qosIfDscpAssignmentTableGroup = qosIfDscpAssignmentTableGroup.setStatus('current')
if mibBuilder.loadTexts: qosIfDscpAssignmentTableGroup.setDescription('')
qosIfRedTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 1, 2, 16)).setObjects(("CISCO-QOS-PIB-MIB", "qosIfRedRoles"), ("CISCO-QOS-PIB-MIB", "qosIfRedNumThresholdSets"), ("CISCO-QOS-PIB-MIB", "qosIfRedThresholdSet"), ("CISCO-QOS-PIB-MIB", "qosIfRedThresholdSetLower"), ("CISCO-QOS-PIB-MIB", "qosIfRedThresholdSetUpper"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    qosIfRedTableGroup = qosIfRedTableGroup.setStatus('current')
if mibBuilder.loadTexts: qosIfRedTableGroup.setDescription('')
qosIfTailDropTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 1, 2, 17)).setObjects(("CISCO-QOS-PIB-MIB", "qosIfTailDropRoles"), ("CISCO-QOS-PIB-MIB", "qosIfTailDropNumThresholdSets"), ("CISCO-QOS-PIB-MIB", "qosIfTailDropThresholdSet"), ("CISCO-QOS-PIB-MIB", "qosIfTailDropThresholdSetValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    qosIfTailDropTableGroup = qosIfTailDropTableGroup.setStatus('current')
if mibBuilder.loadTexts: qosIfTailDropTableGroup.setDescription('')
qosIfWeightsTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 1, 2, 18)).setObjects(("CISCO-QOS-PIB-MIB", "qosIfWeightsRoles"), ("CISCO-QOS-PIB-MIB", "qosIfWeightsNumQueues"), ("CISCO-QOS-PIB-MIB", "qosIfWeightsQueue"), ("CISCO-QOS-PIB-MIB", "qosIfWeightsDrainSize"), ("CISCO-QOS-PIB-MIB", "qosIfWeightsQueueSize"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    qosIfWeightsTableGroup = qosIfWeightsTableGroup.setStatus('current')
if mibBuilder.loadTexts: qosIfWeightsTableGroup.setDescription('')
mibBuilder.exportSymbols("CISCO-QOS-PIB-MIB", qosUnmatchedPolicyId=qosUnmatchedPolicyId, qosL2Cos=qosL2Cos, qosIfDscpAssignmentTable=qosIfDscpAssignmentTable, qosIfDscpAssignmentEntry=qosIfDscpAssignmentEntry, qosIfTailDropTable=qosIfTailDropTable, qosPolicer=qosPolicer, qosIfRedThresholdSet=qosIfRedThresholdSet, qosPolicerAction=qosPolicerAction, qosIpAceSrcL4PortMax=qosIpAceSrcL4PortMax, PYSNMP_MODULE_ID=ciscoQosPIBMIB, qosPolicerEntry=qosPolicerEntry, Dscp=Dscp, qosDevicePibIncarnationTableGroup=qosDevicePibIncarnationTableGroup, qosIpAclActionId=qosIpAclActionId, qosPIBCompliance=qosPIBCompliance, qosIfTailDropNumThresholdSets=qosIfTailDropNumThresholdSets, qosDstMacVlan=qosDstMacVlan, qosIfQueueType=qosIfQueueType, qosInterfaceTypeId=qosInterfaceTypeId, qosDeviceMaxMessageSize=qosDeviceMaxMessageSize, qosIpAclActionEntry=qosIpAclActionEntry, qosIpAclDscpTrusted=qosIpAclDscpTrusted, qosPIBGroups=qosPIBGroups, qosIfRedTableGroup=qosIfRedTableGroup, qosIpAcePermit=qosIpAcePermit, qosIpAclAggregateId=qosIpAclAggregateId, qosIfTailDropTableGroup=qosIfTailDropTableGroup, qosIfSchedulingPreferencesTableGroup=qosIfSchedulingPreferencesTableGroup, qosIfSchedulingPreference=qosIfSchedulingPreference, QosInterfaceQueueType=QosInterfaceQueueType, qosIpAceDstAddrMask=qosIpAceDstAddrMask, qosInterfaceQueueType=qosInterfaceQueueType, qosUnmatchPolMicroFlowPolicerId=qosUnmatchPolMicroFlowPolicerId, qosDeviceAttributeEntry=qosDeviceAttributeEntry, qosPolicerId=qosPolicerId, qosPolicerRate=qosPolicerRate, qosIfSchedulingPreferencesTable=qosIfSchedulingPreferencesTable, QosInterfaceTypeCapabilities=QosInterfaceTypeCapabilities, qosIfTailDropThresholdSet=qosIfTailDropThresholdSet, qosMacClassificationTableGroup=qosMacClassificationTableGroup, qosInterfaceTypeTable=qosInterfaceTypeTable, qosIfDropRoles=qosIfDropRoles, qosCosToDscpTableGroup=qosCosToDscpTableGroup, qosCosToDscpDscp=qosCosToDscpDscp, qosIfRedThresholdSetLower=qosIfRedThresholdSetLower, qosPIBConformance=qosPIBConformance, qosIfTailDropEntry=qosIfTailDropEntry, qosIfWeightsTable=qosIfWeightsTable, qosUnmatchedPolicyEntry=qosUnmatchedPolicyEntry, qosIfWeightsDrainSize=qosIfWeightsDrainSize, qosMacClassificationEntry=qosMacClassificationEntry, qosDiffServMappingTable=qosDiffServMappingTable, qosIpAceSrcL4PortMin=qosIpAceSrcL4PortMin, qosDevicePibIncarnation=qosDevicePibIncarnation, qosDevicePepDomain=qosDevicePepDomain, qosPolicerTableGroup=qosPolicerTableGroup, qosAggregateTableGroup=qosAggregateTableGroup, qosIfSchedulingDiscipline=qosIfSchedulingDiscipline, qosCosToDscpEntry=qosCosToDscpEntry, qosIfDscpAssignmentId=qosIfDscpAssignmentId, qosDeviceSecondaryPdp=qosDeviceSecondaryPdp, qosDeviceAttributeId=qosDeviceAttributeId, qosIpAceProtocol=qosIpAceProtocol, qosIfDscpRoles=qosIfDscpRoles, qosIfRedTable=qosIfRedTable, qosIfDropPreferenceTableGroup=qosIfDropPreferenceTableGroup, qosMacClassificationTable=qosMacClassificationTable, qosIfTailDropThresholdSetValue=qosIfTailDropThresholdSetValue, qosIfWeightsQueueSize=qosIfWeightsQueueSize, qosIfDscpAssignmentTableGroup=qosIfDscpAssignmentTableGroup, QueueRange=QueueRange, qosDeviceIncarnationId=qosDeviceIncarnationId, qosIfWeightsEntry=qosIfWeightsEntry, qosIpAclInterfaceRoles=qosIpAclInterfaceRoles, qosIpAclDscp=qosIpAclDscp, qosIfSchedulingPreferenceId=qosIfSchedulingPreferenceId, qosDevicePibIncarnationTable=qosDevicePibIncarnationTable, qosDevicePibTtl=qosDevicePibTtl, PolicyInstanceId=PolicyInstanceId, qosIfWeightsId=qosIfWeightsId, qosDiffServMappingEntry=qosDiffServMappingEntry, qosIfWeightsTableGroup=qosIfWeightsTableGroup, qosIfDscp=qosIfDscp, qosIpAceEntry=qosIpAceEntry, qosUnmatchedPolicyDirection=qosUnmatchedPolicyDirection, qosUnmatchedPolicy=qosUnmatchedPolicy, qosUnmatchedPolicyDscpTrusted=qosUnmatchedPolicyDscpTrusted, qosIfQueue=qosIfQueue, qosIfRedEntry=qosIfRedEntry, qosIfDropPreferenceEntry=qosIfDropPreferenceEntry, qosInterfaceTypeEntry=qosInterfaceTypeEntry, qosUnmatchedPolicyTable=qosUnmatchedPolicyTable, qosIfSchedulingQueueType=qosIfSchedulingQueueType, qosIfWeightsRoles=qosIfWeightsRoles, qosIfRedThresholdSetUpper=qosIfRedThresholdSetUpper, qosIpAceSrcAddrMask=qosIpAceSrcAddrMask, qosDeviceAttributeTable=qosDeviceAttributeTable, qosIpAclId=qosIpAclId, ThresholdSetRange=ThresholdSetRange, qosIpAceId=qosIpAceId, qosIfRedRoles=qosIfRedRoles, qosIfDropPreferenceTable=qosIfDropPreferenceTable, qosIfTailDropRoles=qosIfTailDropRoles, Unsigned64=Unsigned64, qosIpAclActAclId=qosIpAclActAclId, qosIfDropPreferenceId=qosIfDropPreferenceId, qosIpAclActionTableGroup=qosIpAclActionTableGroup, Percent=Percent, qosIpAclDefinitionEntry=qosIpAclDefinitionEntry, qosIpAceOrder=qosIpAceOrder, qosDscp=qosDscp, qosUnmatchedPolicyRole=qosUnmatchedPolicyRole, qosDeviceCapabilities=qosDeviceCapabilities, qosIfWeightsNumQueues=qosIfWeightsNumQueues, qosInterfaceTypeTableGroup=qosInterfaceTypeTableGroup, qosDiffServMappingTableGroup=qosDiffServMappingTableGroup, qosMacClassificationId=qosMacClassificationId, qosIpAceDstL4PortMax=qosIpAceDstL4PortMax, qosIfSchedulingPreferenceEntry=qosIfSchedulingPreferenceEntry, qosAggregateEntry=qosAggregateEntry, qosUnmatchedPolicyAggregateId=qosUnmatchedPolicyAggregateId, qosIpAclMicroFlowPolicerId=qosIpAclMicroFlowPolicerId, qosIpAclActionTable=qosIpAclActionTable, qosInterfaceTypeRoles=qosInterfaceTypeRoles, qosIpAceSrcAddr=qosIpAceSrcAddr, qosIpAceDstAddr=qosIpAceDstAddr, qosIpAclInterfaceDirection=qosIpAclInterfaceDirection, qosAggregateId=qosAggregateId, qosDeviceAttributeTableGroup=qosDeviceAttributeTableGroup, qosUnmatchedPolicyDscp=qosUnmatchedPolicyDscp, qosIfDropDiscipline=qosIfDropDiscipline, qosDomainConfig=qosDomainConfig, qosPIBCompliances=qosPIBCompliances, qosIfDropPreference=qosIfDropPreference, qosDstMacCos=qosDstMacCos, qosCosToDscpTable=qosCosToDscpTable, qosIpAclDefinitionTableGroup=qosIpAclDefinitionTableGroup, qosIfWeightsQueue=qosIfWeightsQueue, qosUnmatchedPolicyTableGroup=qosUnmatchedPolicyTableGroup, qosIpAceTable=qosIpAceTable, qosPolicerExcessBurst=qosPolicerExcessBurst, qosIfSchedulingRoles=qosIfSchedulingRoles, qosIfTailDropId=qosIfTailDropId, RoleCombination=RoleCombination, qosDstMacAddress=qosDstMacAddress, qosDevicePrimaryPdp=qosDevicePrimaryPdp, QosLayer2Cos=QosLayer2Cos, qosAggregatePolicerId=qosAggregatePolicerId, ciscoQosPIBMIB=ciscoQosPIBMIB, qosPolicerTable=qosPolicerTable, qosIpQos=qosIpQos, qosIpAceDscpMax=qosIpAceDscpMax, qosMarkedDscp=qosMarkedDscp, qosPolicerNormalBurst=qosPolicerNormalBurst, qosMacQos=qosMacQos, qosDeviceConfig=qosDeviceConfig, qosIfRedNumThresholdSets=qosIfRedNumThresholdSets, qosCosToDscpCos=qosCosToDscpCos, qosIpAclOrder=qosIpAclOrder, qosIfRedId=qosIfRedId, qosIpAceDscpMin=qosIpAceDscpMin, qosIpAclDefinitionId=qosIpAclDefinitionId, qosAggregateTable=qosAggregateTable, qosDevicePdpName=qosDevicePdpName, qosIpAclDefAceId=qosIpAclDefAceId, qosIpAceDstL4PortMin=qosIpAceDstL4PortMin, qosInterfaceTypeCapabilities=qosInterfaceTypeCapabilities, qosIpAclDefinitionTable=qosIpAclDefinitionTable, qosDevicePibIncarnationEntry=qosDevicePibIncarnationEntry, qosIfParameters=qosIfParameters, qosIfThresholdSet=qosIfThresholdSet, qosIpAceTableGroup=qosIpAceTableGroup)
