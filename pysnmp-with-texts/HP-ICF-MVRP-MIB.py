#
# PySNMP MIB module HP-ICF-MVRP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HP-ICF-MVRP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:34:47 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion")
hpSwitch, = mibBuilder.importSymbols("HP-ICF-OID", "hpSwitch")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
EnabledStatus, = mibBuilder.importSymbols("P-BRIDGE-MIB", "EnabledStatus")
VlanId, = mibBuilder.importSymbols("Q-BRIDGE-MIB", "VlanId")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, NotificationType, Counter32, IpAddress, iso, Counter64, ObjectIdentity, Gauge32, MibIdentifier, ModuleIdentity, Bits, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "NotificationType", "Counter32", "IpAddress", "iso", "Counter64", "ObjectIdentity", "Gauge32", "MibIdentifier", "ModuleIdentity", "Bits", "TimeTicks")
TextualConvention, TruthValue, DisplayString, TimeInterval = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TruthValue", "DisplayString", "TimeInterval")
hpicfMvrpMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 117))
hpicfMvrpMIB.setRevisions(('2015-04-20 00:00', '2015-03-24 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hpicfMvrpMIB.setRevisionsDescriptions(('Updated the default value and description.', 'Initial revision.',))
if mibBuilder.loadTexts: hpicfMvrpMIB.setLastUpdated('201504200000Z')
if mibBuilder.loadTexts: hpicfMvrpMIB.setOrganization('HP Networking')
if mibBuilder.loadTexts: hpicfMvrpMIB.setContactInfo('Hewlett-Packard Company 8000 Foothills Blvd. Roseville, CA 95747')
if mibBuilder.loadTexts: hpicfMvrpMIB.setDescription('This MIB module describes objects to configure the MVRP feature.')
hpicfMvrpNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 117, 0))
hpicfMvrpObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 117, 1))
hpicfMvrpConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 117, 3))
hpicfMvrpConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 117, 1, 1))
hpicfMvrpStats = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 117, 1, 2))
hpicfMvrpGlobalClearStats = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 117, 1, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfMvrpGlobalClearStats.setStatus('current')
if mibBuilder.loadTexts: hpicfMvrpGlobalClearStats.setDescription('Defines the global clear statistics control for MVRP. True(1) indicates that MVRP should clear all statistic counters related to all ports in the system. A write operation of False(0) leads to a no operation and a GET request for this object always returns FALSE.')
hpicfMvrpMaxVlanLimit = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 117, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfMvrpMaxVlanLimit.setStatus('current')
if mibBuilder.loadTexts: hpicfMvrpMaxVlanLimit.setDescription('Defines the maximum number of dynamic VLANs that can be created on the system by MVRP. If the number of VLANs created by MVRP reaches this limit, the system will prevent MVRP from creating additional VLANs. A write operation for this object is not supported.')
hpicfMvrpPortConfigTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 117, 1, 1, 3), )
if mibBuilder.loadTexts: hpicfMvrpPortConfigTable.setStatus('current')
if mibBuilder.loadTexts: hpicfMvrpPortConfigTable.setDescription('A table containing MVRP port configuration information.')
hpicfMvrpPortConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 117, 1, 1, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hpicfMvrpPortConfigEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfMvrpPortConfigEntry.setDescription('An MVRP port configuration entry.')
hpicfMvrpPortConfigRegistrarMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 117, 1, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("fixed", 2))).clone('normal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfMvrpPortConfigRegistrarMode.setStatus('current')
if mibBuilder.loadTexts: hpicfMvrpPortConfigRegistrarMode.setDescription('Defines the mode of operation of all the registrar state machines associated to the port. normal - Registration as well as de-registration of VLANs are allowed. fixed - The Registrar ignores all MRP messages and remains in IN state(Registered). NOTE: Forbidden Registration Mode will be managed by ieee8021QBridgeVlanForbiddenEgressPorts.')
hpicfMvrpPortConfigPeriodicTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 117, 1, 1, 3, 1, 2), TimeInterval().subtype(subtypeSpec=ValueRangeConstraint(100, 1000000)).clone(100)).setUnits('centi-seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfMvrpPortConfigPeriodicTimer.setStatus('current')
if mibBuilder.loadTexts: hpicfMvrpPortConfigPeriodicTimer.setDescription('Interval at which the Periodic transmission state machine of an MVRP instance generates transmission opportunities for the MVRP instance.')
hpicfMvrpPortConfigPeriodicTransmissionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 117, 1, 1, 3, 1, 3), EnabledStatus().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfMvrpPortConfigPeriodicTransmissionStatus.setStatus('current')
if mibBuilder.loadTexts: hpicfMvrpPortConfigPeriodicTransmissionStatus.setDescription('Used to enable or disable the Periodic transmission state machine of an MVRP instance.')
hpicfMvrpPortStatsClearStats = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 117, 1, 1, 3, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfMvrpPortStatsClearStats.setStatus('current')
if mibBuilder.loadTexts: hpicfMvrpPortStatsClearStats.setDescription('Clear all statistics parameters corresponding to this port. True(1) indicates that MVRP will clear all statistic counters related to this port. A write operation of False(0) leads to a no operation and a GET request for this object always returns FALSE.')
hpicfMvrpPortStatsTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 117, 1, 2, 1), )
if mibBuilder.loadTexts: hpicfMvrpPortStatsTable.setStatus('current')
if mibBuilder.loadTexts: hpicfMvrpPortStatsTable.setDescription('A table containing MVRP port statistics information.')
hpicfMvrpPortStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 117, 1, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hpicfMvrpPortStatsEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfMvrpPortStatsEntry.setDescription('An MVRP port statistics entry.')
hpicfMvrpPortStatsNewReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 117, 1, 2, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfMvrpPortStatsNewReceived.setStatus('current')
if mibBuilder.loadTexts: hpicfMvrpPortStatsNewReceived.setDescription('The number of New messages received.')
hpicfMvrpPortStatsJoinInReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 117, 1, 2, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfMvrpPortStatsJoinInReceived.setStatus('current')
if mibBuilder.loadTexts: hpicfMvrpPortStatsJoinInReceived.setDescription('The number of Join In messages received.')
hpicfMvrpPortStatsJoinEmptyReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 117, 1, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfMvrpPortStatsJoinEmptyReceived.setStatus('current')
if mibBuilder.loadTexts: hpicfMvrpPortStatsJoinEmptyReceived.setDescription('The number of Join Empty messages received.')
hpicfMvrpPortStatsLeaveReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 117, 1, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfMvrpPortStatsLeaveReceived.setStatus('current')
if mibBuilder.loadTexts: hpicfMvrpPortStatsLeaveReceived.setDescription('The number of Leave messages received.')
hpicfMvrpPortStatsInReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 117, 1, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfMvrpPortStatsInReceived.setStatus('current')
if mibBuilder.loadTexts: hpicfMvrpPortStatsInReceived.setDescription('The number of In messages received.')
hpicfMvrpPortStatsEmptyReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 117, 1, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfMvrpPortStatsEmptyReceived.setStatus('current')
if mibBuilder.loadTexts: hpicfMvrpPortStatsEmptyReceived.setDescription('The number of Empty messages received.')
hpicfMvrpPortStatsLeaveAllReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 117, 1, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfMvrpPortStatsLeaveAllReceived.setStatus('current')
if mibBuilder.loadTexts: hpicfMvrpPortStatsLeaveAllReceived.setDescription('The number of Leave all messages received.')
hpicfMvrpPortStatsNewTransmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 117, 1, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfMvrpPortStatsNewTransmitted.setStatus('current')
if mibBuilder.loadTexts: hpicfMvrpPortStatsNewTransmitted.setDescription('The number of New messages transmitted.')
hpicfMvrpPortStatsJoinInTransmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 117, 1, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfMvrpPortStatsJoinInTransmitted.setStatus('current')
if mibBuilder.loadTexts: hpicfMvrpPortStatsJoinInTransmitted.setDescription('The number of Join In messages transmitted.')
hpicfMvrpPortStatsJoinEmptyTransmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 117, 1, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfMvrpPortStatsJoinEmptyTransmitted.setStatus('current')
if mibBuilder.loadTexts: hpicfMvrpPortStatsJoinEmptyTransmitted.setDescription('The number of Join Empty messages transmitted.')
hpicfMvrpPortStatsLeaveTransmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 117, 1, 2, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfMvrpPortStatsLeaveTransmitted.setStatus('current')
if mibBuilder.loadTexts: hpicfMvrpPortStatsLeaveTransmitted.setDescription('The number of Leave messages transmitted.')
hpicfMvrpPortStatsInTransmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 117, 1, 2, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfMvrpPortStatsInTransmitted.setStatus('current')
if mibBuilder.loadTexts: hpicfMvrpPortStatsInTransmitted.setDescription('The number of In messages transmitted.')
hpicfMvrpPortStatsEmptyTransmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 117, 1, 2, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfMvrpPortStatsEmptyTransmitted.setStatus('current')
if mibBuilder.loadTexts: hpicfMvrpPortStatsEmptyTransmitted.setDescription('The number of Empty messages transmitted.')
hpicfMvrpPortStatsLeaveAllTransmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 117, 1, 2, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfMvrpPortStatsLeaveAllTransmitted.setStatus('current')
if mibBuilder.loadTexts: hpicfMvrpPortStatsLeaveAllTransmitted.setDescription('The number of Leave all messages transmitted.')
hpicfMvrpPortStatsTotalPDUReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 117, 1, 2, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfMvrpPortStatsTotalPDUReceived.setStatus('current')
if mibBuilder.loadTexts: hpicfMvrpPortStatsTotalPDUReceived.setDescription('The total number of MVRP PDUs received.')
hpicfMvrpPortStatsTotalPDUTransmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 117, 1, 2, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfMvrpPortStatsTotalPDUTransmitted.setStatus('current')
if mibBuilder.loadTexts: hpicfMvrpPortStatsTotalPDUTransmitted.setDescription('The total number of MVRP PDUs transmitted.')
hpicfMvrpPortStatsFramesDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 117, 1, 2, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfMvrpPortStatsFramesDiscarded.setStatus('current')
if mibBuilder.loadTexts: hpicfMvrpPortStatsFramesDiscarded.setDescription('The number of Invalid messages received.')
hpicfBridgeMvrpStateTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 117, 1, 2, 2), )
if mibBuilder.loadTexts: hpicfBridgeMvrpStateTable.setStatus('current')
if mibBuilder.loadTexts: hpicfBridgeMvrpStateTable.setDescription('A table that contains information about the MVRP state Machine(s) configuration.')
hpicfBridgeMvrpStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 117, 1, 2, 2, 1), ).setIndexNames((0, "HP-ICF-MVRP-MIB", "hpicfMvrpVlanId"), (0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hpicfBridgeMvrpStateEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfBridgeMvrpStateEntry.setDescription('A row in a table that contains the VLAN ID and port list.')
hpicfMvrpVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 117, 1, 2, 2, 1, 1), VlanId())
if mibBuilder.loadTexts: hpicfMvrpVlanId.setStatus('current')
if mibBuilder.loadTexts: hpicfMvrpVlanId.setDescription('The VLAN ID to which this entry belongs.')
hpicfMvrpApplicantState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 117, 1, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("aa", 0), ("qa", 1), ("la", 2), ("vp", 3), ("ap", 4), ("qp", 5), ("vo", 6), ("ao", 7), ("qo", 8), ("lo", 9), ("vn", 10), ("an", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfMvrpApplicantState.setStatus('current')
if mibBuilder.loadTexts: hpicfMvrpApplicantState.setDescription(' This MIB provides the Applicant State Machine values of the MVRP enabled port as follows: 0 = aa, 1 = qa, 2 = la, 3 = vp, 4 = ap, 5 = qp, 6 = vo, 7 = ao, 8 = qo, 9 = lo, 10 = vn, 11 = an. The first letter indicates the state: V for Very anxious, A for Anxious, Q for Quiet, and L for Leaving. The second letter indicates the membership state: A for Active member, P for Passive member, O for Observer and N for New.')
hpicfMvrpRegistrarState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 117, 1, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("in", 1), ("lv", 2), ("mt", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfMvrpRegistrarState.setStatus('current')
if mibBuilder.loadTexts: hpicfMvrpRegistrarState.setDescription('This MIB provides the Registrar state machine value for the MVRP enabled port as follows: 1 = registered, 2 = leaving, 3 = empty.')
hpicfMvrpVlanLimitReachedEvent = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 117, 0, 1)).setObjects(("HP-ICF-MVRP-MIB", "hpicfMvrpMaxVlanLimit"))
if mibBuilder.loadTexts: hpicfMvrpVlanLimitReachedEvent.setStatus('current')
if mibBuilder.loadTexts: hpicfMvrpVlanLimitReachedEvent.setDescription('The number of VLANs learned dynamically by MVRP has reached a configured limit. Notify the management entity with the number of VLANs learned dynamically by MVRP and the configured MVRP VLAN limit.')
hpicfMvrpCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 117, 3, 1))
hpicfMvrpGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 117, 3, 2))
hpicfMvrpCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 117, 3, 1, 1)).setObjects(("HP-ICF-MVRP-MIB", "hpicfMvrpBaseGroup"), ("HP-ICF-MVRP-MIB", "hpicfMvrpPortConfigGroup"), ("HP-ICF-MVRP-MIB", "hpicfMvrpPortStatsGroup"), ("HP-ICF-MVRP-MIB", "hpicfMvrpPortStateGroup"), ("HP-ICF-MVRP-MIB", "hpicfMvrpNotifyGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfMvrpCompliance = hpicfMvrpCompliance.setStatus('current')
if mibBuilder.loadTexts: hpicfMvrpCompliance.setDescription('Compliance statement for MVRP.')
hpicfMvrpBaseGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 117, 3, 2, 1)).setObjects(("HP-ICF-MVRP-MIB", "hpicfMvrpGlobalClearStats"), ("HP-ICF-MVRP-MIB", "hpicfMvrpMaxVlanLimit"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfMvrpBaseGroup = hpicfMvrpBaseGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfMvrpBaseGroup.setDescription('Collection of objects for management of MVRP Base Group.')
hpicfMvrpPortConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 117, 3, 2, 2)).setObjects(("HP-ICF-MVRP-MIB", "hpicfMvrpPortConfigRegistrarMode"), ("HP-ICF-MVRP-MIB", "hpicfMvrpPortConfigPeriodicTimer"), ("HP-ICF-MVRP-MIB", "hpicfMvrpPortConfigPeriodicTransmissionStatus"), ("HP-ICF-MVRP-MIB", "hpicfMvrpPortStatsClearStats"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfMvrpPortConfigGroup = hpicfMvrpPortConfigGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfMvrpPortConfigGroup.setDescription('Collection of objects for management of MVRP Port Configuration Table.')
hpicfMvrpPortStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 117, 3, 2, 3)).setObjects(("HP-ICF-MVRP-MIB", "hpicfMvrpPortStatsNewReceived"), ("HP-ICF-MVRP-MIB", "hpicfMvrpPortStatsJoinInReceived"), ("HP-ICF-MVRP-MIB", "hpicfMvrpPortStatsJoinEmptyReceived"), ("HP-ICF-MVRP-MIB", "hpicfMvrpPortStatsLeaveReceived"), ("HP-ICF-MVRP-MIB", "hpicfMvrpPortStatsInReceived"), ("HP-ICF-MVRP-MIB", "hpicfMvrpPortStatsEmptyReceived"), ("HP-ICF-MVRP-MIB", "hpicfMvrpPortStatsLeaveAllReceived"), ("HP-ICF-MVRP-MIB", "hpicfMvrpPortStatsNewTransmitted"), ("HP-ICF-MVRP-MIB", "hpicfMvrpPortStatsJoinInTransmitted"), ("HP-ICF-MVRP-MIB", "hpicfMvrpPortStatsJoinEmptyTransmitted"), ("HP-ICF-MVRP-MIB", "hpicfMvrpPortStatsLeaveTransmitted"), ("HP-ICF-MVRP-MIB", "hpicfMvrpPortStatsInTransmitted"), ("HP-ICF-MVRP-MIB", "hpicfMvrpPortStatsEmptyTransmitted"), ("HP-ICF-MVRP-MIB", "hpicfMvrpPortStatsLeaveAllTransmitted"), ("HP-ICF-MVRP-MIB", "hpicfMvrpPortStatsTotalPDUReceived"), ("HP-ICF-MVRP-MIB", "hpicfMvrpPortStatsTotalPDUTransmitted"), ("HP-ICF-MVRP-MIB", "hpicfMvrpPortStatsFramesDiscarded"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfMvrpPortStatsGroup = hpicfMvrpPortStatsGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfMvrpPortStatsGroup.setDescription('Collection of objects for management of MVRP Statistics Table.')
hpicfMvrpPortStateGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 117, 3, 2, 4)).setObjects(("HP-ICF-MVRP-MIB", "hpicfMvrpApplicantState"), ("HP-ICF-MVRP-MIB", "hpicfMvrpRegistrarState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfMvrpPortStateGroup = hpicfMvrpPortStateGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfMvrpPortStateGroup.setDescription('Collection of objects to display Applicant and Registrar state machine of the ports.')
hpicfMvrpNotifyGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 117, 3, 2, 5)).setObjects(("HP-ICF-MVRP-MIB", "hpicfMvrpVlanLimitReachedEvent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfMvrpNotifyGroup = hpicfMvrpNotifyGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfMvrpNotifyGroup.setDescription('MVRP notification group.')
mibBuilder.exportSymbols("HP-ICF-MVRP-MIB", hpicfMvrpNotifyGroup=hpicfMvrpNotifyGroup, hpicfMvrpPortStatsInReceived=hpicfMvrpPortStatsInReceived, hpicfMvrpPortStatsJoinInTransmitted=hpicfMvrpPortStatsJoinInTransmitted, hpicfMvrpPortConfigRegistrarMode=hpicfMvrpPortConfigRegistrarMode, hpicfMvrpGroups=hpicfMvrpGroups, hpicfMvrpPortConfigPeriodicTransmissionStatus=hpicfMvrpPortConfigPeriodicTransmissionStatus, hpicfMvrpPortConfigGroup=hpicfMvrpPortConfigGroup, hpicfMvrpBaseGroup=hpicfMvrpBaseGroup, hpicfMvrpVlanLimitReachedEvent=hpicfMvrpVlanLimitReachedEvent, hpicfMvrpPortStateGroup=hpicfMvrpPortStateGroup, hpicfMvrpConformance=hpicfMvrpConformance, hpicfMvrpPortStatsGroup=hpicfMvrpPortStatsGroup, PYSNMP_MODULE_ID=hpicfMvrpMIB, hpicfMvrpObjects=hpicfMvrpObjects, hpicfMvrpStats=hpicfMvrpStats, hpicfMvrpPortStatsJoinEmptyTransmitted=hpicfMvrpPortStatsJoinEmptyTransmitted, hpicfMvrpPortStatsEmptyTransmitted=hpicfMvrpPortStatsEmptyTransmitted, hpicfMvrpMaxVlanLimit=hpicfMvrpMaxVlanLimit, hpicfMvrpPortConfigEntry=hpicfMvrpPortConfigEntry, hpicfMvrpPortStatsJoinEmptyReceived=hpicfMvrpPortStatsJoinEmptyReceived, hpicfMvrpMIB=hpicfMvrpMIB, hpicfMvrpPortStatsEntry=hpicfMvrpPortStatsEntry, hpicfMvrpConfig=hpicfMvrpConfig, hpicfMvrpPortStatsNewReceived=hpicfMvrpPortStatsNewReceived, hpicfMvrpPortStatsTable=hpicfMvrpPortStatsTable, hpicfMvrpPortStatsTotalPDUReceived=hpicfMvrpPortStatsTotalPDUReceived, hpicfMvrpPortConfigPeriodicTimer=hpicfMvrpPortConfigPeriodicTimer, hpicfMvrpPortStatsNewTransmitted=hpicfMvrpPortStatsNewTransmitted, hpicfMvrpCompliances=hpicfMvrpCompliances, hpicfMvrpApplicantState=hpicfMvrpApplicantState, hpicfMvrpVlanId=hpicfMvrpVlanId, hpicfBridgeMvrpStateEntry=hpicfBridgeMvrpStateEntry, hpicfMvrpPortStatsInTransmitted=hpicfMvrpPortStatsInTransmitted, hpicfMvrpPortStatsLeaveReceived=hpicfMvrpPortStatsLeaveReceived, hpicfMvrpPortStatsLeaveTransmitted=hpicfMvrpPortStatsLeaveTransmitted, hpicfBridgeMvrpStateTable=hpicfBridgeMvrpStateTable, hpicfMvrpPortStatsLeaveAllReceived=hpicfMvrpPortStatsLeaveAllReceived, hpicfMvrpPortStatsEmptyReceived=hpicfMvrpPortStatsEmptyReceived, hpicfMvrpCompliance=hpicfMvrpCompliance, hpicfMvrpPortStatsTotalPDUTransmitted=hpicfMvrpPortStatsTotalPDUTransmitted, hpicfMvrpRegistrarState=hpicfMvrpRegistrarState, hpicfMvrpNotifications=hpicfMvrpNotifications, hpicfMvrpGlobalClearStats=hpicfMvrpGlobalClearStats, hpicfMvrpPortStatsFramesDiscarded=hpicfMvrpPortStatsFramesDiscarded, hpicfMvrpPortStatsClearStats=hpicfMvrpPortStatsClearStats, hpicfMvrpPortStatsLeaveAllTransmitted=hpicfMvrpPortStatsLeaveAllTransmitted, hpicfMvrpPortConfigTable=hpicfMvrpPortConfigTable, hpicfMvrpPortStatsJoinInReceived=hpicfMvrpPortStatsJoinInReceived)
