#
# PySNMP MIB module CYAN-BTM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CYAN-BTM-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:33:49 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
CyanTypeTc, cyanEntityModules = mibBuilder.importSymbols("CYAN-MIB", "CyanTypeTc", "cyanEntityModules")
CyanSecServiceStateTc, CyanOpStateTc, CyanOpStateQualTc, CyanAdminStateTc, CyanRelayTc = mibBuilder.importSymbols("CYAN-TC-MIB", "CyanSecServiceStateTc", "CyanOpStateTc", "CyanOpStateQualTc", "CyanAdminStateTc", "CyanRelayTc")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
iso, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, ObjectIdentity, NotificationType, ModuleIdentity, MibIdentifier, Unsigned32, Counter64, Integer32, TimeTicks, Counter32, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "ObjectIdentity", "NotificationType", "ModuleIdentity", "MibIdentifier", "Unsigned32", "Counter64", "Integer32", "TimeTicks", "Counter32", "IpAddress")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
cyanBtmModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 28533, 5, 30, 60))
cyanBtmModule.setRevisions(('2014-12-07 05:45',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: cyanBtmModule.setRevisionsDescriptions(('Release 6.0 build 1416362081',))
if mibBuilder.loadTexts: cyanBtmModule.setLastUpdated('201412070545Z')
if mibBuilder.loadTexts: cyanBtmModule.setOrganization('Cyan, Inc.')
if mibBuilder.loadTexts: cyanBtmModule.setContactInfo(' E-mail: support@cyaninc.com Postal: Cyan, Inc. 1390 N. McDowell Blvd., # G-327 Petaluma, CA 94954 USA Tel: +1-707-735-2300')
if mibBuilder.loadTexts: cyanBtmModule.setDescription('MIB module for BOSS Termination Module')
cyanBtmMibObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 28533, 5, 30, 60, 1))
cyanBtmTable = MibTable((1, 3, 6, 1, 4, 1, 28533, 5, 30, 60, 1, 1), )
if mibBuilder.loadTexts: cyanBtmTable.setStatus('current')
if mibBuilder.loadTexts: cyanBtmTable.setDescription('A list of Btm entries.')
cyanBtmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 28533, 5, 30, 60, 1, 1, 1), ).setIndexNames((0, "CYAN-BTM-MIB", "cyanBtmShelfId"), (0, "CYAN-BTM-MIB", "cyanBtmBtmId"))
if mibBuilder.loadTexts: cyanBtmEntry.setStatus('current')
if mibBuilder.loadTexts: cyanBtmEntry.setDescription('An entry of Btm.')
cyanBtmShelfId = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 60, 1, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)))
if mibBuilder.loadTexts: cyanBtmShelfId.setStatus('current')
if mibBuilder.loadTexts: cyanBtmShelfId.setDescription('Shelf Id')
cyanBtmBtmId = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 60, 1, 1, 1, 2), Unsigned32())
if mibBuilder.loadTexts: cyanBtmBtmId.setStatus('current')
if mibBuilder.loadTexts: cyanBtmBtmId.setDescription('BTM Module Id')
cyanBtmAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 60, 1, 1, 1, 3), CyanAdminStateTc()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyanBtmAdminState.setStatus('current')
if mibBuilder.loadTexts: cyanBtmAdminState.setDescription('Administrative state')
cyanBtmAssetTag = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 60, 1, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 124))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyanBtmAssetTag.setStatus('current')
if mibBuilder.loadTexts: cyanBtmAssetTag.setDescription('Asset Tag')
cyanBtmAudible = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 60, 1, 1, 1, 5), CyanRelayTc()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyanBtmAudible.setStatus('current')
if mibBuilder.loadTexts: cyanBtmAudible.setDescription('System closes this control upon Critical/Major/Minor alarms')
cyanBtmAutoinserviceSoakTimeSec = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 60, 1, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyanBtmAutoinserviceSoakTimeSec.setStatus('current')
if mibBuilder.loadTexts: cyanBtmAutoinserviceSoakTimeSec.setDescription('Auto-In-Service soak time')
cyanBtmBaseMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 60, 1, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyanBtmBaseMacAddress.setStatus('current')
if mibBuilder.loadTexts: cyanBtmBaseMacAddress.setDescription('Base MAC address of a range of addresses')
cyanBtmCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 60, 1, 1, 1, 8), CyanRelayTc()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyanBtmCritical.setStatus('current')
if mibBuilder.loadTexts: cyanBtmCritical.setDescription('System closes this control upon Critical alarms')
cyanBtmDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 60, 1, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyanBtmDescription.setStatus('current')
if mibBuilder.loadTexts: cyanBtmDescription.setDescription('Description')
cyanBtmIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 60, 1, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyanBtmIdentifier.setStatus('current')
if mibBuilder.loadTexts: cyanBtmIdentifier.setDescription('string OID')
cyanBtmMacBlockSize = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 60, 1, 1, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyanBtmMacBlockSize.setStatus('current')
if mibBuilder.loadTexts: cyanBtmMacBlockSize.setDescription('Number of MAC addresses allocated from the base MAC address')
cyanBtmMajor = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 60, 1, 1, 1, 12), CyanRelayTc()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyanBtmMajor.setStatus('current')
if mibBuilder.loadTexts: cyanBtmMajor.setDescription('System closes this control upon Major alarms')
cyanBtmMfgCleiCode = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 60, 1, 1, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyanBtmMfgCleiCode.setStatus('current')
if mibBuilder.loadTexts: cyanBtmMfgCleiCode.setDescription('Common Language Equipment Identifier')
cyanBtmMfgEciCode = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 60, 1, 1, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyanBtmMfgEciCode.setStatus('current')
if mibBuilder.loadTexts: cyanBtmMfgEciCode.setDescription('Equipment Catalog Item')
cyanBtmMfgModuleId = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 60, 1, 1, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyanBtmMfgModuleId.setStatus('current')
if mibBuilder.loadTexts: cyanBtmMfgModuleId.setDescription('Module ID')
cyanBtmMfgPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 60, 1, 1, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyanBtmMfgPartNumber.setStatus('current')
if mibBuilder.loadTexts: cyanBtmMfgPartNumber.setDescription('Manufacturing part number')
cyanBtmMfgRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 60, 1, 1, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyanBtmMfgRevision.setStatus('current')
if mibBuilder.loadTexts: cyanBtmMfgRevision.setDescription('Mfg revision number')
cyanBtmMfgSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 60, 1, 1, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyanBtmMfgSerialNumber.setStatus('current')
if mibBuilder.loadTexts: cyanBtmMfgSerialNumber.setDescription('Mfg serial number')
cyanBtmMinor = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 60, 1, 1, 1, 19), CyanRelayTc()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyanBtmMinor.setStatus('current')
if mibBuilder.loadTexts: cyanBtmMinor.setDescription('System closes this control upon Minor alarms')
cyanBtmName = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 60, 1, 1, 1, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyanBtmName.setStatus('current')
if mibBuilder.loadTexts: cyanBtmName.setDescription('Cyan name')
cyanBtmOidClass = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 60, 1, 1, 1, 21), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyanBtmOidClass.setStatus('current')
if mibBuilder.loadTexts: cyanBtmOidClass.setDescription('OID Class')
cyanBtmOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 60, 1, 1, 1, 22), CyanOpStateTc()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyanBtmOperState.setStatus('current')
if mibBuilder.loadTexts: cyanBtmOperState.setDescription('Primary Operation State')
cyanBtmOperStateQual = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 60, 1, 1, 1, 23), CyanOpStateQualTc()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyanBtmOperStateQual.setStatus('current')
if mibBuilder.loadTexts: cyanBtmOperStateQual.setDescription('Operation state qualifier')
cyanBtmOssLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 60, 1, 1, 1, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyanBtmOssLabel.setStatus('current')
if mibBuilder.loadTexts: cyanBtmOssLabel.setDescription('CyMS label')
cyanBtmOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 60, 1, 1, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyanBtmOwner.setStatus('current')
if mibBuilder.loadTexts: cyanBtmOwner.setDescription('Owner')
cyanBtmPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 60, 1, 1, 1, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyanBtmPartNumber.setStatus('current')
if mibBuilder.loadTexts: cyanBtmPartNumber.setDescription('Cyan part number')
cyanBtmSecServState = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 60, 1, 1, 1, 27), CyanSecServiceStateTc()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyanBtmSecServState.setStatus('current')
if mibBuilder.loadTexts: cyanBtmSecServState.setDescription('Secondary service state')
cyanBtmType = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 60, 1, 1, 1, 28), CyanTypeTc()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyanBtmType.setStatus('current')
if mibBuilder.loadTexts: cyanBtmType.setDescription('Equipment type')
cyanBtmObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 28533, 5, 30, 60, 20)).setObjects(("CYAN-BTM-MIB", "cyanBtmAdminState"), ("CYAN-BTM-MIB", "cyanBtmAssetTag"), ("CYAN-BTM-MIB", "cyanBtmAudible"), ("CYAN-BTM-MIB", "cyanBtmAutoinserviceSoakTimeSec"), ("CYAN-BTM-MIB", "cyanBtmBaseMacAddress"), ("CYAN-BTM-MIB", "cyanBtmCritical"), ("CYAN-BTM-MIB", "cyanBtmDescription"), ("CYAN-BTM-MIB", "cyanBtmIdentifier"), ("CYAN-BTM-MIB", "cyanBtmMacBlockSize"), ("CYAN-BTM-MIB", "cyanBtmMajor"), ("CYAN-BTM-MIB", "cyanBtmMfgCleiCode"), ("CYAN-BTM-MIB", "cyanBtmMfgEciCode"), ("CYAN-BTM-MIB", "cyanBtmMfgModuleId"), ("CYAN-BTM-MIB", "cyanBtmMfgPartNumber"), ("CYAN-BTM-MIB", "cyanBtmMfgRevision"), ("CYAN-BTM-MIB", "cyanBtmMfgSerialNumber"), ("CYAN-BTM-MIB", "cyanBtmMinor"), ("CYAN-BTM-MIB", "cyanBtmName"), ("CYAN-BTM-MIB", "cyanBtmOidClass"), ("CYAN-BTM-MIB", "cyanBtmOperState"), ("CYAN-BTM-MIB", "cyanBtmOperStateQual"), ("CYAN-BTM-MIB", "cyanBtmOssLabel"), ("CYAN-BTM-MIB", "cyanBtmOwner"), ("CYAN-BTM-MIB", "cyanBtmPartNumber"), ("CYAN-BTM-MIB", "cyanBtmSecServState"), ("CYAN-BTM-MIB", "cyanBtmType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cyanBtmObjectGroup = cyanBtmObjectGroup.setStatus('current')
if mibBuilder.loadTexts: cyanBtmObjectGroup.setDescription('Group of objects that comes with Btm module')
cyanBtmCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 28533, 5, 30, 60, 30)).setObjects(("CYAN-BTM-MIB", "cyanBtmObjectGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cyanBtmCompliance = cyanBtmCompliance.setStatus('current')
if mibBuilder.loadTexts: cyanBtmCompliance.setDescription('The basic info needed to be a cyan Btm')
mibBuilder.exportSymbols("CYAN-BTM-MIB", PYSNMP_MODULE_ID=cyanBtmModule, cyanBtmOwner=cyanBtmOwner, cyanBtmMacBlockSize=cyanBtmMacBlockSize, cyanBtmMibObjects=cyanBtmMibObjects, cyanBtmMinor=cyanBtmMinor, cyanBtmMfgRevision=cyanBtmMfgRevision, cyanBtmMfgModuleId=cyanBtmMfgModuleId, cyanBtmIdentifier=cyanBtmIdentifier, cyanBtmOperState=cyanBtmOperState, cyanBtmOssLabel=cyanBtmOssLabel, cyanBtmBtmId=cyanBtmBtmId, cyanBtmName=cyanBtmName, cyanBtmMfgPartNumber=cyanBtmMfgPartNumber, cyanBtmMfgEciCode=cyanBtmMfgEciCode, cyanBtmDescription=cyanBtmDescription, cyanBtmMfgCleiCode=cyanBtmMfgCleiCode, cyanBtmObjectGroup=cyanBtmObjectGroup, cyanBtmAudible=cyanBtmAudible, cyanBtmOidClass=cyanBtmOidClass, cyanBtmAutoinserviceSoakTimeSec=cyanBtmAutoinserviceSoakTimeSec, cyanBtmAssetTag=cyanBtmAssetTag, cyanBtmMajor=cyanBtmMajor, cyanBtmShelfId=cyanBtmShelfId, cyanBtmEntry=cyanBtmEntry, cyanBtmMfgSerialNumber=cyanBtmMfgSerialNumber, cyanBtmSecServState=cyanBtmSecServState, cyanBtmOperStateQual=cyanBtmOperStateQual, cyanBtmType=cyanBtmType, cyanBtmAdminState=cyanBtmAdminState, cyanBtmCompliance=cyanBtmCompliance, cyanBtmModule=cyanBtmModule, cyanBtmCritical=cyanBtmCritical, cyanBtmBaseMacAddress=cyanBtmBaseMacAddress, cyanBtmTable=cyanBtmTable, cyanBtmPartNumber=cyanBtmPartNumber)
