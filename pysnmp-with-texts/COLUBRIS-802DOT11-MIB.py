#
# PySNMP MIB module COLUBRIS-802DOT11-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/COLUBRIS-802DOT11-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:25:40 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
colubrisMgmtV2, = mibBuilder.importSymbols("COLUBRIS-SMI", "colubrisMgmtV2")
ColubrisSSID, ColubrisRadioType, ColubrisSSIDOrNone, ColubrisDataRate, ColubrisNotificationEnable = mibBuilder.importSymbols("COLUBRIS-TC", "ColubrisSSID", "ColubrisRadioType", "ColubrisSSIDOrNone", "ColubrisDataRate", "ColubrisNotificationEnable")
coVirtualAccessPointConfigEntry, coVirtualApSSID = mibBuilder.importSymbols("COLUBRIS-VIRTUAL-AP-MIB", "coVirtualAccessPointConfigEntry", "coVirtualApSSID")
InterfaceIndex, ifDescr, ifIndex = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex", "ifDescr", "ifIndex")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
Integer32, Bits, IpAddress, iso, ObjectIdentity, NotificationType, Gauge32, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, Counter32, Unsigned32, Counter64, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "Bits", "IpAddress", "iso", "ObjectIdentity", "NotificationType", "Gauge32", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "Counter32", "Unsigned32", "Counter64", "TimeTicks")
TextualConvention, DisplayString, TruthValue, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "TruthValue", "MacAddress")
colubris802dot11 = ModuleIdentity((1, 3, 6, 1, 4, 1, 8744, 5, 4))
if mibBuilder.loadTexts: colubris802dot11.setLastUpdated('200910200000Z')
if mibBuilder.loadTexts: colubris802dot11.setOrganization('Colubris Networks, Inc.')
if mibBuilder.loadTexts: colubris802dot11.setContactInfo('Colubris Networks Postal: 200 West Street Ste 300 Waltham, Massachusetts 02451-1121 UNITED STATES Phone: +1 781 684 0001 Fax: +1 781 684 0009 E-mail: cn-snmp@colubris.com')
if mibBuilder.loadTexts: colubris802dot11.setDescription('The MIB module for IEEE 802.11 entities.')
coDot11ap = MibIdentifier((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1))
coDot11mac = MibIdentifier((1, 3, 6, 1, 4, 1, 8744, 5, 4, 2))
coDot11phy = MibIdentifier((1, 3, 6, 1, 4, 1, 8744, 5, 4, 3))
class WEPKeytype(TextualConvention, OctetString):
    description = 'Textual conventions from 802 definitions.'
    status = 'current'
    displayHint = '255a'
    subtypeSpec = OctetString.subtypeSpec + ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(5, 5), ValueSizeConstraint(13, 13), )
coDot11AccessPointConfigTable = MibTable((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 1), )
if mibBuilder.loadTexts: coDot11AccessPointConfigTable.setStatus('current')
if mibBuilder.loadTexts: coDot11AccessPointConfigTable.setDescription('WLAN profile configuration attributes. In tabular form to allow for multiple instances on an agent. Not supported on the M111.')
coDot11AccessPointConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 1, 1), )
coVirtualAccessPointConfigEntry.registerAugmentions(("COLUBRIS-802DOT11-MIB", "coDot11AccessPointConfigEntry"))
coDot11AccessPointConfigEntry.setIndexNames(*coVirtualAccessPointConfigEntry.getIndexNames())
if mibBuilder.loadTexts: coDot11AccessPointConfigEntry.setStatus('current')
if mibBuilder.loadTexts: coDot11AccessPointConfigEntry.setDescription('An entry in the coDot11AccessPointConfigTable. ifIndex - Each 802.11 interface is represented by an ifEntry. Interface tables in this MIB module are indexed by ifIndex. coVirtualWlanProfileIndex - Uniquely access a profile for this particular 802.11 interface.')
coDot11RelayBetweenStation = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 1, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: coDot11RelayBetweenStation.setStatus('current')
if mibBuilder.loadTexts: coDot11RelayBetweenStation.setDescription('Specifies if wireless client stations can exchange data with one another.')
coDot11BeaconPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11BeaconPeriod.setStatus('current')
if mibBuilder.loadTexts: coDot11BeaconPeriod.setDescription('Indicates the number of TUs that a station uses for scheduling Beacon transmissions. This value is transmitted in Beacon and Probe Response frames.')
coDot11DTIMPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: coDot11DTIMPeriod.setStatus('current')
if mibBuilder.loadTexts: coDot11DTIMPeriod.setDescription('Specifies the number of beacon intervals that elapse between transmission of Beacons frames containing a TIM element whose DTIM Count field is 0. This value is transmitted in the DTIM Period field of Beacon frames. Client stations use the DTIM to wake up from low-power mode to receive multicast traffic.')
coDot11PrivacyOptionImplemented = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 1, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11PrivacyOptionImplemented.setStatus('current')
if mibBuilder.loadTexts: coDot11PrivacyOptionImplemented.setDescription('Indicates if the IEEE 802.11 WEP option is enabled.')
coDot11RSNAOptionImplemented = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 1, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11RSNAOptionImplemented.setStatus('current')
if mibBuilder.loadTexts: coDot11RSNAOptionImplemented.setDescription('Indicates if the profile is RSNA-capable.')
coDot11NumberOfUsers = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11NumberOfUsers.setStatus('current')
if mibBuilder.loadTexts: coDot11NumberOfUsers.setDescription('Indicates the number of users connected via this profile.')
coDot11AddToAssociationNotification = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 1, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: coDot11AddToAssociationNotification.setStatus('current')
if mibBuilder.loadTexts: coDot11AddToAssociationNotification.setDescription('Specifies if an association trap notification is sent each time a user connects to this profile.')
coDot11PhyTxPowerAdminLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setUnits('dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: coDot11PhyTxPowerAdminLevel.setStatus('current')
if mibBuilder.loadTexts: coDot11PhyTxPowerAdminLevel.setDescription('Specifies the transmission power of the radio.')
coDot11PhyTxPowerOperLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11PhyTxPowerOperLevel.setStatus('current')
if mibBuilder.loadTexts: coDot11PhyTxPowerOperLevel.setDescription('Indicates the transmission power of the radio.')
coDot11CurrentSNRLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 92))).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11CurrentSNRLevel.setStatus('current')
if mibBuilder.loadTexts: coDot11CurrentSNRLevel.setDescription('Average SNR level for all the connected client stations.')
coDot11BSSID = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 1, 1, 11), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11BSSID.setStatus('current')
if mibBuilder.loadTexts: coDot11BSSID.setDescription('MAC Address assigned to this device.')
coDot11AdminMinimumDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 1, 1, 12), ColubrisDataRate()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: coDot11AdminMinimumDataRate.setStatus('deprecated')
if mibBuilder.loadTexts: coDot11AdminMinimumDataRate.setDescription("Specifies the minimum transmission rate that clients stations must meet in order to connect with this profile. Client stations that are below this setting will not be able to connect. The value of this object must always be less or equal than the value of coDot11MaximumDataRate. Allowed values will change according to the state of the radio's wireless mode (coDot11CurrentOperPHYType). ieee802dot11b: Lowest, 1, 2, 5.5, 11 Mbps ieee802dot11a: Lowest, 6, 9, 12, 18, 24, 36, 48, 54 Mbps ieee802dot11g: Lowest, 6, 9, 12, 18, 24, 36, 48, 54 Mbps 11bAndg: All rates permitted.")
coDot11AdminMaximumDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 1, 1, 13), ColubrisDataRate()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: coDot11AdminMaximumDataRate.setStatus('deprecated')
if mibBuilder.loadTexts: coDot11AdminMaximumDataRate.setDescription("Specifies the maximum transmission rate that clients stations must respect to connect with this profile. Clients stations that attempt to associate at a higher data rate will be refused. The value of this object must always be greater than the value of coDot11MinimumDataRate. Allowed values will change according to the state of the radio's wireless mode (coDot11CurrentOperPHYType). ieee802dot11b: 1, 2, 5.5, 11Mbs, highest ieee802dot11a: 6, 9, 12, 18, 24, 36, 48, 54 Mbps, highest ieee802dot11g: 6, 9, 12, 18, 24, 36, 48, 54 Mbps, highest 11bAndg: All rates permitted.")
coDot11HighThroughputOptionImplemented = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 1, 1, 14), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11HighThroughputOptionImplemented.setStatus('current')
if mibBuilder.loadTexts: coDot11HighThroughputOptionImplemented.setDescription('Indicates if the profile is 802.11n capable.')
coDot11AuthenticationAlgorithmsTable = MibTable((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 2), )
if mibBuilder.loadTexts: coDot11AuthenticationAlgorithmsTable.setReference('IEEE Std 802.11-1997, 7.3.1.1')
if mibBuilder.loadTexts: coDot11AuthenticationAlgorithmsTable.setStatus('current')
if mibBuilder.loadTexts: coDot11AuthenticationAlgorithmsTable.setDescription('This (conceptual) table of attributes is a set of all the authentication algorithms supported by the stations. The following are the default values and the associated algorithm: Value = 1: Open System Value = 2: Shared Key')
coDot11AuthenticationAlgorithmsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "COLUBRIS-802DOT11-MIB", "coDot11AuthenticationAlgorithmsIndex"))
if mibBuilder.loadTexts: coDot11AuthenticationAlgorithmsEntry.setStatus('current')
if mibBuilder.loadTexts: coDot11AuthenticationAlgorithmsEntry.setDescription('An Entry (conceptual row) in the Authentication Algorithms Table. ifIndex - Each 802.11 interface is represented by an ifEntry. Interface tables in this MIB module are indexed by ifIndex. coDot11AuthenticationAlgorithmsIndex - Uniquely identify an algorithm in the table.')
coDot11AuthenticationAlgorithmsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: coDot11AuthenticationAlgorithmsIndex.setStatus('current')
if mibBuilder.loadTexts: coDot11AuthenticationAlgorithmsIndex.setDescription('The auxiliary variable used to identify instances of the columnar objects in the Authentication Algorithms Table.')
coDot11AuthenticationAlgorithm = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("openSystem", 1), ("sharedKey", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11AuthenticationAlgorithm.setStatus('current')
if mibBuilder.loadTexts: coDot11AuthenticationAlgorithm.setDescription('Identifies all the authentication algorithms supported by the STAs. The following are the default values and the their associated algorithms. Value = 1: Open System Value = 2: Shared Key')
coDot11AuthenticationAlgorithmsEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 2, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11AuthenticationAlgorithmsEnable.setStatus('current')
if mibBuilder.loadTexts: coDot11AuthenticationAlgorithmsEnable.setDescription("This attribute, when true at a station, enables the acceptance of the authentication algorithm described in the corresponding table entry in authentication frames received by the station that have odd authentication sequence numbers. The default value of this attribute is 'true' for the Open System table entry and 'false' for all other table entries.")
coDot11WEPDefaultKeysTable = MibTable((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 3), )
if mibBuilder.loadTexts: coDot11WEPDefaultKeysTable.setReference('IEEE Std 802.11-1997, 8.3.2')
if mibBuilder.loadTexts: coDot11WEPDefaultKeysTable.setStatus('current')
if mibBuilder.loadTexts: coDot11WEPDefaultKeysTable.setDescription('Conceptual table for WEP default keys. This table contains the four WEP default secret key values corresponding to the four possible KeyID values. The WEP default secret keys are logically WRITE-ONLY. Attempts to read the entries in this table will return unsuccessful status and values of null or zero. The default value of each WEP default key is null. This table is not supported on the M111.')
coDot11WEPDefaultKeysEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 3, 1), )
coVirtualAccessPointConfigEntry.registerAugmentions(("COLUBRIS-802DOT11-MIB", "coDot11WEPDefaultKeysEntry"))
coDot11WEPDefaultKeysEntry.setIndexNames(*coVirtualAccessPointConfigEntry.getIndexNames())
if mibBuilder.loadTexts: coDot11WEPDefaultKeysEntry.setStatus('current')
if mibBuilder.loadTexts: coDot11WEPDefaultKeysEntry.setDescription('An Entry (conceptual row) in the WEP Default Keys Table. ifIndex - Each 802.11 interface is represented by an ifEntry. Interface tables in this MIB module are indexed by ifIndex. coVirtualWlanProfileIndex - Uniquely access a profile for this particular 802.11 interface.')
coDot11WEPDefaultKey1Value = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 3, 1, 1), WEPKeytype()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: coDot11WEPDefaultKey1Value.setStatus('current')
if mibBuilder.loadTexts: coDot11WEPDefaultKey1Value.setDescription('A WEP default secret key1 value. Reading this attribute will always return a Zero-Length string.')
coDot11WEPDefaultKey2Value = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 3, 1, 2), WEPKeytype()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: coDot11WEPDefaultKey2Value.setStatus('current')
if mibBuilder.loadTexts: coDot11WEPDefaultKey2Value.setDescription('A WEP default secret key2 value. Reading this attribute will always return a Zero-Length string.')
coDot11WEPDefaultKey3Value = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 3, 1, 3), WEPKeytype()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: coDot11WEPDefaultKey3Value.setStatus('current')
if mibBuilder.loadTexts: coDot11WEPDefaultKey3Value.setDescription('A WEP default secret key3 value. Reading this attribute will always return a Zero-Length string.')
coDot11WEPDefaultKey4Value = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 3, 1, 4), WEPKeytype()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: coDot11WEPDefaultKey4Value.setStatus('current')
if mibBuilder.loadTexts: coDot11WEPDefaultKey4Value.setDescription('A WEP default secret key4 value. Reading this attribute will always return a Zero-Length string.')
coDot11PrivacyTable = MibTable((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 4), )
if mibBuilder.loadTexts: coDot11PrivacyTable.setStatus('current')
if mibBuilder.loadTexts: coDot11PrivacyTable.setDescription('Group containing attributes related to IEEE 802.11 Privacy. In tabular form to allow multiple instances on an agent. This table is not supported on the M111.')
coDot11PrivacyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 4, 1), )
coVirtualAccessPointConfigEntry.registerAugmentions(("COLUBRIS-802DOT11-MIB", "coDot11PrivacyEntry"))
coDot11PrivacyEntry.setIndexNames(*coVirtualAccessPointConfigEntry.getIndexNames())
if mibBuilder.loadTexts: coDot11PrivacyEntry.setStatus('current')
if mibBuilder.loadTexts: coDot11PrivacyEntry.setDescription('An entry in the coDot11PrivacyTable Table. ifIndex - Each 802.11 interface is represented by an ifEntry. Interface tables in this MIB module are indexed by ifIndex. coVirtualWlanProfileIndex - Uniquely access a profile for this particular 802.11 interface.')
coDot11PrivacyInvoked = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 4, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11PrivacyInvoked.setStatus('current')
if mibBuilder.loadTexts: coDot11PrivacyInvoked.setDescription('When this attribute is TRUE, it indicates that some level of security is invoked for transmitting frames of type Data. For IEEE 802.11-1999 clients, the security mechanism used is WEP. For RSNA-capable clients, an additional variable coDot11RSNAEnabled indicates whether RSNA is enabled. If coDot11RSNAEnabled is FALSE or the MIB variable does not exist, the security mechanism invoked is WEP; if coDot11RSNAEnabled is TRUE, RSNA security mechanisms invoked are configured in the coDot11RSNAConfigTable. The default value of this attribute is FALSE.')
coDot11WEPDefaultKeyID = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: coDot11WEPDefaultKeyID.setReference('IEEE Std 802.11-1997, 8.3.2')
if mibBuilder.loadTexts: coDot11WEPDefaultKeyID.setStatus('current')
if mibBuilder.loadTexts: coDot11WEPDefaultKeyID.setDescription('This attribute indicates the use of the first, second, third, or fourth element of the WEPDefaultKeys array when set to values of zero, one, two, or three. The default value of this attribute is 0.')
coDot11ExcludeUnencrypted = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 4, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11ExcludeUnencrypted.setStatus('current')
if mibBuilder.loadTexts: coDot11ExcludeUnencrypted.setDescription('When this attribute is true, the STA does not indicate at the MAC service interface received MSDUs that have the WEP subfield of the Frame Control field equal to zero. When this attribute is false, the STA may accept MSDUs that have the WEP subfield of the Frame Control field equal to zero. The default value of this attribute is true.')
coDot11WEPICVErrorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11WEPICVErrorCount.setStatus('current')
if mibBuilder.loadTexts: coDot11WEPICVErrorCount.setDescription('This counter increments when a frame is received with the WEP subfield of the Frame Control field set to one and the value of the ICV as received in the frame does not match the ICV value that is calculated for the contents of the received frame. ICV errors for TKIP are not counted in this variable but in coDot11RSNAStatsTKIPICVErrors.')
coDot11WEPExcludedCount = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11WEPExcludedCount.setStatus('current')
if mibBuilder.loadTexts: coDot11WEPExcludedCount.setDescription('This counter increments when a frame is received with the WEP subfield of the Frame Control field set to zero and the value of coDot11ExcludeUnencrypted causes that frame to be discarded.')
coDot11RSNAEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 4, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11RSNAEnabled.setStatus('current')
if mibBuilder.loadTexts: coDot11RSNAEnabled.setDescription('Indicates if RSNA is enabled, which means that the RSN Information Element is advertised in Beacons and Probe Responses. This object requires that coDot11PrivacyInvoked also be set to TRUE.')
coDot11AssociationTable = MibTable((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 5), )
if mibBuilder.loadTexts: coDot11AssociationTable.setStatus('current')
if mibBuilder.loadTexts: coDot11AssociationTable.setDescription('Group containing attributes related to associated stations. In tabular form to allow multiple instances on an agent. This table is not supported on the M111.')
coDot11AssociationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "COLUBRIS-802DOT11-MIB", "coDot11AssociationIndex"))
if mibBuilder.loadTexts: coDot11AssociationEntry.setStatus('current')
if mibBuilder.loadTexts: coDot11AssociationEntry.setDescription('An entry in the coDot11Association Table. ifIndex - Each 802.11 interface is represented by an ifEntry. Interface tables in this MIB module are indexed by ifIndex. coDot11AssociationIndex - Uniquely identify a device inside the association table.')
coDot11AssociationIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: coDot11AssociationIndex.setStatus('current')
if mibBuilder.loadTexts: coDot11AssociationIndex.setDescription('The auxiliary variable used to identify instances of the columnar objects in the Association Table.')
coDot11StationMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 5, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11StationMACAddress.setStatus('current')
if mibBuilder.loadTexts: coDot11StationMACAddress.setDescription('Unique MAC Address assigned to the device.')
coDot11StationConnectTime = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 5, 1, 3), Counter32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11StationConnectTime.setStatus('current')
if mibBuilder.loadTexts: coDot11StationConnectTime.setDescription('Elapsed time in seconds since a station has associated to this device.')
coDot11SignalLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 5, 1, 4), Integer32()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11SignalLevel.setStatus('current')
if mibBuilder.loadTexts: coDot11SignalLevel.setDescription('Strength of the wireless signal.')
coDot11NoiseLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 5, 1, 5), Integer32()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11NoiseLevel.setStatus('current')
if mibBuilder.loadTexts: coDot11NoiseLevel.setDescription('Level of local background noise.')
coDot11SNR = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 5, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11SNR.setStatus('current')
if mibBuilder.loadTexts: coDot11SNR.setDescription('Relative strength of the signal level compared to the noise level.')
coDot11PktsRate1 = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 5, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11PktsRate1.setStatus('current')
if mibBuilder.loadTexts: coDot11PktsRate1.setDescription('Number of frames received at 1 Mbps.')
coDot11PktsRate2 = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 5, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11PktsRate2.setStatus('current')
if mibBuilder.loadTexts: coDot11PktsRate2.setDescription('Number of frames received at 2 Mbps.')
coDot11PktsRate5dot5 = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 5, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11PktsRate5dot5.setStatus('current')
if mibBuilder.loadTexts: coDot11PktsRate5dot5.setDescription('Number of frames received at 5.5 Mbps.')
coDot11PktsRate11 = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 5, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11PktsRate11.setStatus('current')
if mibBuilder.loadTexts: coDot11PktsRate11.setDescription('Number of frames received at 11 Mbps.')
coDot11PktsRate6 = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 5, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11PktsRate6.setStatus('current')
if mibBuilder.loadTexts: coDot11PktsRate6.setDescription('Number of frames received at 6 Mbps.')
coDot11PktsRate9 = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 5, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11PktsRate9.setStatus('current')
if mibBuilder.loadTexts: coDot11PktsRate9.setDescription('Number of frames received at 9 Mbps.')
coDot11PktsRate12 = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 5, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11PktsRate12.setStatus('current')
if mibBuilder.loadTexts: coDot11PktsRate12.setDescription('Number of frames received at 12 Mbps.')
coDot11PktsRate18 = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 5, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11PktsRate18.setStatus('current')
if mibBuilder.loadTexts: coDot11PktsRate18.setDescription('Number of frames received at 18 Mbps.')
coDot11PktsRate24 = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 5, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11PktsRate24.setStatus('current')
if mibBuilder.loadTexts: coDot11PktsRate24.setDescription('Number of frames received at 24 Mbps.')
coDot11PktsRate36 = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 5, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11PktsRate36.setStatus('current')
if mibBuilder.loadTexts: coDot11PktsRate36.setDescription('Number of frames received at 36 Mbps.')
coDot11PktsRate48 = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 5, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11PktsRate48.setStatus('current')
if mibBuilder.loadTexts: coDot11PktsRate48.setDescription('Number of frames received at 48 Mbps.')
coDot11PktsRate54 = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 5, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11PktsRate54.setStatus('current')
if mibBuilder.loadTexts: coDot11PktsRate54.setDescription('Number of frames received at 54 Mbps.')
coDot11TransmitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 5, 1, 19), Unsigned32()).setUnits('500Kb/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11TransmitRate.setStatus('current')
if mibBuilder.loadTexts: coDot11TransmitRate.setDescription('Current transmit rate of a station.')
coDot11ReceiveRate = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 5, 1, 20), Unsigned32()).setUnits('500Kb/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11ReceiveRate.setStatus('current')
if mibBuilder.loadTexts: coDot11ReceiveRate.setDescription('Current receive rate of a station.')
coDot11InPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 5, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11InPkts.setStatus('current')
if mibBuilder.loadTexts: coDot11InPkts.setDescription('Number of packets received from the station after the association.')
coDot11OutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 5, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11OutPkts.setStatus('current')
if mibBuilder.loadTexts: coDot11OutPkts.setDescription('Number of packets send to the station after the association.')
coDot11InOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 5, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11InOctets.setStatus('current')
if mibBuilder.loadTexts: coDot11InOctets.setDescription('Number of octets received from the station after the association.')
coDot11OutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 5, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11OutOctets.setStatus('current')
if mibBuilder.loadTexts: coDot11OutOctets.setDescription('Number of octets send to the station after the association.')
coDot11StationSSID = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 5, 1, 25), ColubrisSSIDOrNone()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11StationSSID.setStatus('current')
if mibBuilder.loadTexts: coDot11StationSSID.setDescription('SSID of the associated station.')
coDot11StationName = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 5, 1, 26), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11StationName.setStatus('current')
if mibBuilder.loadTexts: coDot11StationName.setDescription('Name of the associated station.')
coDot11StationIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 5, 1, 27), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11StationIPAddress.setStatus('current')
if mibBuilder.loadTexts: coDot11StationIPAddress.setDescription('IP address of the associated station.')
coDot11StationVLAN = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 5, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11StationVLAN.setStatus('current')
if mibBuilder.loadTexts: coDot11StationVLAN.setDescription('VLAN ID of the associated station. This object is always available on autonomous APs. However, on access-controller APs, this object is only available under certain conditions, when the client station is connected to a profile that is not access-controlled.')
coDot11StationLocalInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 5, 1, 29), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11StationLocalInterface.setStatus('current')
if mibBuilder.loadTexts: coDot11StationLocalInterface.setDescription('Specifies the Local Interface where the associated station traffic will be forwarded to.')
coDot11StaHT = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 5, 1, 30), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11StaHT.setStatus('current')
if mibBuilder.loadTexts: coDot11StaHT.setDescription('Indicates that the associated station is HT.')
coDot11StaEncryptionType = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 5, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("wep", 2), ("tkip", 3), ("aes", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11StaEncryptionType.setStatus('current')
if mibBuilder.loadTexts: coDot11StaEncryptionType.setDescription('Indicates the encryption type used by the wireless station.')
coDot11PktsTxRate1 = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 5, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11PktsTxRate1.setStatus('current')
if mibBuilder.loadTexts: coDot11PktsTxRate1.setDescription('Number of frames transmitted at 1 Mbps.')
coDot11PktsTxRate2 = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 5, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11PktsTxRate2.setStatus('current')
if mibBuilder.loadTexts: coDot11PktsTxRate2.setDescription('Number of frames transmitted at 2 Mbps.')
coDot11PktsTxRate5dot5 = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 5, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11PktsTxRate5dot5.setStatus('current')
if mibBuilder.loadTexts: coDot11PktsTxRate5dot5.setDescription('Number of frames transmitted at 5.5 Mbps.')
coDot11PktsTxRate11 = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 5, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11PktsTxRate11.setStatus('current')
if mibBuilder.loadTexts: coDot11PktsTxRate11.setDescription('Number of frames transmitted at 11 Mbps.')
coDot11PktsTxRate6 = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 5, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11PktsTxRate6.setStatus('current')
if mibBuilder.loadTexts: coDot11PktsTxRate6.setDescription('Number of frames transmitted at 6 Mbps.')
coDot11PktsTxRate9 = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 5, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11PktsTxRate9.setStatus('current')
if mibBuilder.loadTexts: coDot11PktsTxRate9.setDescription('Number of frames transmitted at 9 Mbps.')
coDot11PktsTxRate12 = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 5, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11PktsTxRate12.setStatus('current')
if mibBuilder.loadTexts: coDot11PktsTxRate12.setDescription('Number of frames transmitted at 12 Mbps.')
coDot11PktsTxRate18 = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 5, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11PktsTxRate18.setStatus('current')
if mibBuilder.loadTexts: coDot11PktsTxRate18.setDescription('Number of frames transmitted at 18 Mbps.')
coDot11PktsTxRate24 = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 5, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11PktsTxRate24.setStatus('current')
if mibBuilder.loadTexts: coDot11PktsTxRate24.setDescription('Number of frames transmitted at 24 Mbps.')
coDot11PktsTxRate36 = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 5, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11PktsTxRate36.setStatus('current')
if mibBuilder.loadTexts: coDot11PktsTxRate36.setDescription('Number of frames transmitted at 36 Mbps.')
coDot11PktsTxRate48 = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 5, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11PktsTxRate48.setStatus('current')
if mibBuilder.loadTexts: coDot11PktsTxRate48.setDescription('Number of frames transmitted at 48 Mbps.')
coDot11PktsTxRate54 = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 5, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11PktsTxRate54.setStatus('current')
if mibBuilder.loadTexts: coDot11PktsTxRate54.setDescription('Number of frames transmitted at 54 Mbps.')
coDot11WDSPortTable = MibTable((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 6), )
if mibBuilder.loadTexts: coDot11WDSPortTable.setStatus('current')
if mibBuilder.loadTexts: coDot11WDSPortTable.setDescription('Conceptual table for the local mesh links. This table contains the six local mesh MAC address. This table is not supported on the M111.')
coDot11WDSPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "COLUBRIS-802DOT11-MIB", "coDot11WDSPortIndex"))
if mibBuilder.loadTexts: coDot11WDSPortEntry.setStatus('current')
if mibBuilder.loadTexts: coDot11WDSPortEntry.setDescription('An Entry (conceptual row) in the WDS Port Table. ifIndex - Each 802.11 interface is represented by an ifEntry. Interface tables in this MIB module are indexed by ifIndex. coDot11WDSPortIndex - Uniquely identify a local mesh link inside the local mesh table.')
coDot11WDSPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6)))
if mibBuilder.loadTexts: coDot11WDSPortIndex.setStatus('current')
if mibBuilder.loadTexts: coDot11WDSPortIndex.setDescription('The auxiliary variable used to identify instances of local mesh links.')
coDot11WDSPortMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 6, 1, 2), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: coDot11WDSPortMacAddress.setStatus('current')
if mibBuilder.loadTexts: coDot11WDSPortMacAddress.setDescription('MAC address of the remote device on the other side of the local mesh link.')
coDot11WDSPortCurrentRate = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 6, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11WDSPortCurrentRate.setStatus('current')
if mibBuilder.loadTexts: coDot11WDSPortCurrentRate.setDescription('Current rate of the local mesh link.')
coDot11WDSPortSNRLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11WDSPortSNRLevel.setStatus('current')
if mibBuilder.loadTexts: coDot11WDSPortSNRLevel.setDescription('Relative strength of the signal level compared to the noise level.')
coDot11WDSPortTxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 6, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11WDSPortTxPackets.setStatus('current')
if mibBuilder.loadTexts: coDot11WDSPortTxPackets.setDescription('Number of packets transmitted on this local mesh link.')
coDot11WDSPortTxDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 6, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11WDSPortTxDropped.setStatus('current')
if mibBuilder.loadTexts: coDot11WDSPortTxDropped.setDescription('Number of packets that could not be transmitted on this local mesh link.')
coDot11WDSPortTxErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 6, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11WDSPortTxErrors.setStatus('current')
if mibBuilder.loadTexts: coDot11WDSPortTxErrors.setDescription('Number of packets that could not be sent due to the following reasons: Rx retry limit exceeded or Tx discarded because of wrong SA.')
coDot11WDSPortRxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 6, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11WDSPortRxPackets.setStatus('current')
if mibBuilder.loadTexts: coDot11WDSPortRxPackets.setDescription('Number of packets received on this local mesh link.')
coDot11WDSPortRxDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 6, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11WDSPortRxDropped.setStatus('current')
if mibBuilder.loadTexts: coDot11WDSPortRxDropped.setDescription('Number of packets that were dropped on this local mesh link due to a lack of resources.')
coDot11WDSPortRxErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 6, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11WDSPortRxErrors.setStatus('current')
if mibBuilder.loadTexts: coDot11WDSPortRxErrors.setDescription('Number of packets that could not be received due to the following reasons: Rx discards WEP excluded, Rx discards WEP ICV error, Rx MSG in bad MSG fragments, Rx MSG in MSG fragments Rx WEP undecryptable, Rx FCS errors.')
coDot11ScanTable = MibTable((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 7), )
if mibBuilder.loadTexts: coDot11ScanTable.setStatus('current')
if mibBuilder.loadTexts: coDot11ScanTable.setDescription('Conceptual table for the AP scanning results. In tabular form to allow multiple instances on an agent. This table is not supported on the WCB-200.')
coDot11ScanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 7, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "COLUBRIS-802DOT11-MIB", "coDot11ScanIndex"))
if mibBuilder.loadTexts: coDot11ScanEntry.setStatus('current')
if mibBuilder.loadTexts: coDot11ScanEntry.setDescription('An Entry (conceptual row) in the AP scan Table. ifIndex - Each 802.11 interface is represented by an ifEntry. Interface tables in this MIB module are indexed by ifIndex. coDot11ScanIndex - Uniquely identify an AP in the scan Table.')
coDot11ScanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: coDot11ScanIndex.setStatus('current')
if mibBuilder.loadTexts: coDot11ScanIndex.setDescription('The auxiliary variable used to identify instances of AP in the scan table.')
coDot11ScanMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 7, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11ScanMacAddress.setStatus('current')
if mibBuilder.loadTexts: coDot11ScanMacAddress.setDescription('The wireless MAC address of the remote device.')
coDot11ScanChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11ScanChannel.setStatus('current')
if mibBuilder.loadTexts: coDot11ScanChannel.setDescription('The operating frequency channel of the remote device.')
coDot11ScanSSID = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 7, 1, 4), ColubrisSSIDOrNone()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11ScanSSID.setStatus('current')
if mibBuilder.loadTexts: coDot11ScanSSID.setDescription('The Service Set ID broadcast by the remote device.')
coDot11ScanSignalLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 7, 1, 5), Integer32()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11ScanSignalLevel.setStatus('current')
if mibBuilder.loadTexts: coDot11ScanSignalLevel.setDescription('Strength of the wireless signal.')
coDot11ScanNoiseLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 7, 1, 6), Integer32()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11ScanNoiseLevel.setStatus('current')
if mibBuilder.loadTexts: coDot11ScanNoiseLevel.setDescription('Level of local background noise.')
coDot11ScanSNR = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 7, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11ScanSNR.setStatus('current')
if mibBuilder.loadTexts: coDot11ScanSNR.setDescription('Relative strength of the signal level compared to the noise level.')
coDot11ScanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 7, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("authorized", 1), ("unauthorized", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11ScanStatus.setStatus('current')
if mibBuilder.loadTexts: coDot11ScanStatus.setDescription("The status of the scanned device. 'unknown': The device could not determine the status of the scanned AP. 'authorized': The AP is part of the authorized list of APs. 'unauthorized': The AP is not part of the authorized list of APs.")
coDot11ScanPHYType = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 7, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ieee802dot11a", 1), ("ieee802dot11b", 2), ("ieee802dot11g", 3), ("ieee802dot11na", 4), ("ieee802dot11ng", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11ScanPHYType.setStatus('current')
if mibBuilder.loadTexts: coDot11ScanPHYType.setDescription('Radio type used by the device.')
coDot11ScanInactivityTime = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 7, 1, 10), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11ScanInactivityTime.setStatus('current')
if mibBuilder.loadTexts: coDot11ScanInactivityTime.setDescription('Elapsed time since the last beacon was seen for this device.')
coDot11ScanNetworkType = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 7, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ess", 1), ("ibss", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11ScanNetworkType.setStatus('current')
if mibBuilder.loadTexts: coDot11ScanNetworkType.setDescription('Network type used by the device.')
coDot11ScanSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 7, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("wep", 2), ("wpa", 3), ("wpa2", 4), ("wpaAndWpa2", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11ScanSecurity.setStatus('current')
if mibBuilder.loadTexts: coDot11ScanSecurity.setDescription('Indicates the WPA/Encryption type used by the wireless station.')
coDot11ScanEnabled = MibScalar((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: coDot11ScanEnabled.setStatus('current')
if mibBuilder.loadTexts: coDot11ScanEnabled.setDescription("Specifies if periodic scan should be performed or not. Not supported on the WCB-200. 'enable': Enables periodic scans on this device. 'disable': Disable periodic scans on this device.")
coDot11ScanPeriodicity = MibScalar((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 3600)).clone(600)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: coDot11ScanPeriodicity.setStatus('current')
if mibBuilder.loadTexts: coDot11ScanPeriodicity.setDescription("Specifies the time between periodic scans. Each time a scan operation is performed, only one frequency is scanned. A fair amount of periodic scans are needed in order complete a full scan of all the supported frequencies. This parameter only applies when coDot11ScanEnabled is set to 'enable'. Not supported on the M111.")
coDot11ScanAuthorizedListURL = MibScalar((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: coDot11ScanAuthorizedListURL.setStatus('current')
if mibBuilder.loadTexts: coDot11ScanAuthorizedListURL.setDescription('Specifies the URL of the file that contains a list of all authorized access points. If no valid URL is present in this field, the AP will not be able to compute the rogue table. The format of this file is XML. Each entry in the file is composed of two items: MAC address and SSID. Each entry should appear on a new line. Not supported on the M111.')
coDot11UnauthorizedAPNotificationEnabled = MibScalar((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 11), ColubrisNotificationEnable().clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: coDot11UnauthorizedAPNotificationEnabled.setStatus('current')
if mibBuilder.loadTexts: coDot11UnauthorizedAPNotificationEnabled.setDescription('Specifies if periodic coDot11UnauthorizedAPNotification events are generated. Not supported on the M111.')
coDot11UnauthorizedAPNotificationInterval = MibScalar((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000000))).setUnits('minutes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: coDot11UnauthorizedAPNotificationInterval.setStatus('current')
if mibBuilder.loadTexts: coDot11UnauthorizedAPNotificationInterval.setDescription('Interval in minutes between unauthorized AP notifications. Not supported on the M111.')
coDot11AssociationNotificationEnabled = MibScalar((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 13), ColubrisNotificationEnable().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: coDot11AssociationNotificationEnabled.setStatus('current')
if mibBuilder.loadTexts: coDot11AssociationNotificationEnabled.setDescription('Specifies if coDot11AssociationNotification events are generated. Not supported on the M111.')
coDot11AssociationNotificationInterval = MibScalar((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000))).setUnits('minutes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: coDot11AssociationNotificationInterval.setStatus('current')
if mibBuilder.loadTexts: coDot11AssociationNotificationInterval.setDescription('Interval in minutes between association notifications. Setting this attribute to 0 will disable periodic sending of association notification. Not supported on the M111.')
coDot11StationHTTable = MibTable((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 15), )
if mibBuilder.loadTexts: coDot11StationHTTable.setStatus('current')
if mibBuilder.loadTexts: coDot11StationHTTable.setDescription('Group containing attributes related to HT stations. This table is not supported on the WCB-200.')
coDot11StationHTEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 15, 1), )
coDot11AssociationEntry.registerAugmentions(("COLUBRIS-802DOT11-MIB", "coDot11StationHTEntry"))
coDot11StationHTEntry.setIndexNames(*coDot11AssociationEntry.getIndexNames())
if mibBuilder.loadTexts: coDot11StationHTEntry.setStatus('current')
if mibBuilder.loadTexts: coDot11StationHTEntry.setDescription('An entry in the station HT Table. ifIndex - Each 802.11 interface is represented by an ifEntry. Interface tables in this MIB module are indexed by ifIndex. coDot11AssociationIndex - Uniquely identify a device inside the association table.')
coDot11StaTransmitMCS = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 15, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11StaTransmitMCS.setStatus('current')
if mibBuilder.loadTexts: coDot11StaTransmitMCS.setDescription('MCS used while trasnmitting the last frame to the HT station.')
coDot11StaReceiveMCS = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 15, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11StaReceiveMCS.setStatus('current')
if mibBuilder.loadTexts: coDot11StaReceiveMCS.setDescription('MCS used by the last frame received from the HT station.')
coDot11StaChannelWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 15, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cw20MHz", 1), ("cw40MHz", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11StaChannelWidth.setStatus('current')
if mibBuilder.loadTexts: coDot11StaChannelWidth.setDescription('Channel width used by the wireless client.')
coDot11StaShortGI = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 15, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11StaShortGI.setStatus('current')
if mibBuilder.loadTexts: coDot11StaShortGI.setDescription('Indicates if the wireless client is using short GI.')
coDot11StaPktsTxMCS0 = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 15, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11StaPktsTxMCS0.setStatus('current')
if mibBuilder.loadTexts: coDot11StaPktsTxMCS0.setDescription('Number of transmitted frames while using MCS0.')
coDot11StaPktsTxMCS1 = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 15, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11StaPktsTxMCS1.setStatus('current')
if mibBuilder.loadTexts: coDot11StaPktsTxMCS1.setDescription('Number of transmitted frames while using MCS1.')
coDot11StaPktsTxMCS2 = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 15, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11StaPktsTxMCS2.setStatus('current')
if mibBuilder.loadTexts: coDot11StaPktsTxMCS2.setDescription('Number of transmitted frames while using MCS2.')
coDot11StaPktsTxMCS3 = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 15, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11StaPktsTxMCS3.setStatus('current')
if mibBuilder.loadTexts: coDot11StaPktsTxMCS3.setDescription('Number of transmitted frames while using MCS3.')
coDot11StaPktsTxMCS4 = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 15, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11StaPktsTxMCS4.setStatus('current')
if mibBuilder.loadTexts: coDot11StaPktsTxMCS4.setDescription('Number of transmitted frames while using MCS4.')
coDot11StaPktsTxMCS5 = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 15, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11StaPktsTxMCS5.setStatus('current')
if mibBuilder.loadTexts: coDot11StaPktsTxMCS5.setDescription('Number of transmitted frames while using MCS5.')
coDot11StaPktsTxMCS6 = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 15, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11StaPktsTxMCS6.setStatus('current')
if mibBuilder.loadTexts: coDot11StaPktsTxMCS6.setDescription('Number of transmitted frames while using MCS6.')
coDot11StaPktsTxMCS7 = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 15, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11StaPktsTxMCS7.setStatus('current')
if mibBuilder.loadTexts: coDot11StaPktsTxMCS7.setDescription('Number of transmitted frames while using MCS7.')
coDot11StaPktsTxMCS8 = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 15, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11StaPktsTxMCS8.setStatus('current')
if mibBuilder.loadTexts: coDot11StaPktsTxMCS8.setDescription('Number of transmitted frames while using MCS8.')
coDot11StaPktsTxMCS9 = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 15, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11StaPktsTxMCS9.setStatus('current')
if mibBuilder.loadTexts: coDot11StaPktsTxMCS9.setDescription('Number of transmitted frames while using MCS9.')
coDot11StaPktsTxMCS10 = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 15, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11StaPktsTxMCS10.setStatus('current')
if mibBuilder.loadTexts: coDot11StaPktsTxMCS10.setDescription('Number of transmitted frames while using MCS10.')
coDot11StaPktsTxMCS11 = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 15, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11StaPktsTxMCS11.setStatus('current')
if mibBuilder.loadTexts: coDot11StaPktsTxMCS11.setDescription('Number of transmitted frames while using MCS11.')
coDot11StaPktsTxMCS12 = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 15, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11StaPktsTxMCS12.setStatus('current')
if mibBuilder.loadTexts: coDot11StaPktsTxMCS12.setDescription('Number of transmitted frames while using MCS12.')
coDot11StaPktsTxMCS13 = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 15, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11StaPktsTxMCS13.setStatus('current')
if mibBuilder.loadTexts: coDot11StaPktsTxMCS13.setDescription('Number of transmitted frames while using MCS13.')
coDot11StaPktsTxMCS14 = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 15, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11StaPktsTxMCS14.setStatus('current')
if mibBuilder.loadTexts: coDot11StaPktsTxMCS14.setDescription('Number of transmitted frames while using MCS14.')
coDot11StaPktsTxMCS15 = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 15, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11StaPktsTxMCS15.setStatus('current')
if mibBuilder.loadTexts: coDot11StaPktsTxMCS15.setDescription('Number of transmitted frames while using MCS15.')
coDot11StaPktsRxMCS0 = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 15, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11StaPktsRxMCS0.setStatus('current')
if mibBuilder.loadTexts: coDot11StaPktsRxMCS0.setDescription('Number of received frames while using MCS0.')
coDot11StaPktsRxMCS1 = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 15, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11StaPktsRxMCS1.setStatus('current')
if mibBuilder.loadTexts: coDot11StaPktsRxMCS1.setDescription('Number of received frames while using MCS1.')
coDot11StaPktsRxMCS2 = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 15, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11StaPktsRxMCS2.setStatus('current')
if mibBuilder.loadTexts: coDot11StaPktsRxMCS2.setDescription('Number of received frames while using MCS2.')
coDot11StaPktsRxMCS3 = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 15, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11StaPktsRxMCS3.setStatus('current')
if mibBuilder.loadTexts: coDot11StaPktsRxMCS3.setDescription('Number of received frames while using MCS3.')
coDot11StaPktsRxMCS4 = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 15, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11StaPktsRxMCS4.setStatus('current')
if mibBuilder.loadTexts: coDot11StaPktsRxMCS4.setDescription('Number of received frames while using MCS4.')
coDot11StaPktsRxMCS5 = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 15, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11StaPktsRxMCS5.setStatus('current')
if mibBuilder.loadTexts: coDot11StaPktsRxMCS5.setDescription('Number of received frames while using MCS5.')
coDot11StaPktsRxMCS6 = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 15, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11StaPktsRxMCS6.setStatus('current')
if mibBuilder.loadTexts: coDot11StaPktsRxMCS6.setDescription('Number of received frames while using MCS6.')
coDot11StaPktsRxMCS7 = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 15, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11StaPktsRxMCS7.setStatus('current')
if mibBuilder.loadTexts: coDot11StaPktsRxMCS7.setDescription('Number of received frames while using MCS7.')
coDot11StaPktsRxMCS8 = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 15, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11StaPktsRxMCS8.setStatus('current')
if mibBuilder.loadTexts: coDot11StaPktsRxMCS8.setDescription('Number of received frames while using MCS8.')
coDot11StaPktsRxMCS9 = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 15, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11StaPktsRxMCS9.setStatus('current')
if mibBuilder.loadTexts: coDot11StaPktsRxMCS9.setDescription('Number of received frames while using MCS9.')
coDot11StaPktsRxMCS10 = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 15, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11StaPktsRxMCS10.setStatus('current')
if mibBuilder.loadTexts: coDot11StaPktsRxMCS10.setDescription('Number of received frames while using MCS10.')
coDot11StaPktsRxMCS11 = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 15, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11StaPktsRxMCS11.setStatus('current')
if mibBuilder.loadTexts: coDot11StaPktsRxMCS11.setDescription('Number of received frames while using MCS11.')
coDot11StaPktsRxMCS12 = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 15, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11StaPktsRxMCS12.setStatus('current')
if mibBuilder.loadTexts: coDot11StaPktsRxMCS12.setDescription('Number of received frames while using MCS12.')
coDot11StaPktsRxMCS13 = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 15, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11StaPktsRxMCS13.setStatus('current')
if mibBuilder.loadTexts: coDot11StaPktsRxMCS13.setDescription('Number of received frames while using MCS13.')
coDot11StaPktsRxMCS14 = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 15, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11StaPktsRxMCS14.setStatus('current')
if mibBuilder.loadTexts: coDot11StaPktsRxMCS14.setDescription('Number of received frames while using MCS14.')
coDot11StaPktsRxMCS15 = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 15, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11StaPktsRxMCS15.setStatus('current')
if mibBuilder.loadTexts: coDot11StaPktsRxMCS15.setDescription('Number of received frames while using MCS15.')
coDot11NbDetectedStation = MibScalar((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11NbDetectedStation.setStatus('current')
if mibBuilder.loadTexts: coDot11NbDetectedStation.setDescription('Number of stations in the detected station table.')
coDot11DetectedStationTable = MibTable((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 17), )
if mibBuilder.loadTexts: coDot11DetectedStationTable.setStatus('current')
if mibBuilder.loadTexts: coDot11DetectedStationTable.setDescription('Group containing attributes related to stations sending probe request. This table is not supported on the M111.')
coDot11DetectedStationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 17, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "COLUBRIS-802DOT11-MIB", "coDot11DetStaIndex"))
if mibBuilder.loadTexts: coDot11DetectedStationEntry.setStatus('current')
if mibBuilder.loadTexts: coDot11DetectedStationEntry.setDescription('An entry in the detected station Table. ifIndex - Each 802.11 interface is represented by an ifEntry. Interface tables in this MIB module are indexed by ifIndex. coDot11DetStaIndex - Uniquely identify a device inside the detected station table.')
coDot11DetStaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 17, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: coDot11DetStaIndex.setStatus('current')
if mibBuilder.loadTexts: coDot11DetStaIndex.setDescription('The auxiliary variable used to identify instances of the columnar objects in the detected station table.')
coDot11DetStaMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 17, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11DetStaMacAddress.setStatus('current')
if mibBuilder.loadTexts: coDot11DetStaMacAddress.setDescription('MAC address of the wireless client.')
coDot11DetStaChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 17, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11DetStaChannel.setStatus('current')
if mibBuilder.loadTexts: coDot11DetStaChannel.setDescription('The operating frequency channel when the last probe request was received.')
coDot11DetStaSignalLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 17, 1, 4), Integer32()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11DetStaSignalLevel.setStatus('current')
if mibBuilder.loadTexts: coDot11DetStaSignalLevel.setDescription('Strength of the wireless signal.')
coDot11DetStaNoiseLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 17, 1, 5), Integer32()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11DetStaNoiseLevel.setStatus('current')
if mibBuilder.loadTexts: coDot11DetStaNoiseLevel.setDescription('Level of local background noise.')
coDot11DetStaNbProbeReq = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 17, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11DetStaNbProbeReq.setStatus('current')
if mibBuilder.loadTexts: coDot11DetStaNbProbeReq.setDescription('Total number of probes request received from this client.')
coDot11DetStaRate = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 17, 1, 7), Unsigned32()).setUnits('500Kb/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11DetStaRate.setStatus('current')
if mibBuilder.loadTexts: coDot11DetStaRate.setDescription('Receive rate of the last probe request received from this client.')
coDot11DetStaSSID = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 17, 1, 8), ColubrisSSID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11DetStaSSID.setStatus('current')
if mibBuilder.loadTexts: coDot11DetStaSSID.setDescription('SSID contained in the last probe request received from this client.')
coDot11DetStaTimeDiscovered = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 17, 1, 9), Counter32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11DetStaTimeDiscovered.setStatus('current')
if mibBuilder.loadTexts: coDot11DetStaTimeDiscovered.setDescription('Elapsed time in seconds since the first probe has been received from this client.')
coDot11DetStaTimeLastSeen = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 1, 17, 1, 10), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11DetStaTimeLastSeen.setStatus('current')
if mibBuilder.loadTexts: coDot11DetStaTimeLastSeen.setDescription('Elapsed time in seconds since the last probe has been received from this client.')
coDot11OperationTable = MibTable((1, 3, 6, 1, 4, 1, 8744, 5, 4, 2, 1), )
if mibBuilder.loadTexts: coDot11OperationTable.setStatus('current')
if mibBuilder.loadTexts: coDot11OperationTable.setDescription('Group contains MAC attributes pertaining to the operation of the MAC. In tabular form to allow multiple instances on an agent.')
coDot11OperationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8744, 5, 4, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: coDot11OperationEntry.setStatus('current')
if mibBuilder.loadTexts: coDot11OperationEntry.setDescription('An entry in the coDot11OperationEntry Table. ifIndex - Each 802.11 interface is represented by an ifEntry. Interface tables in this MIB module are indexed by ifIndex.')
coDot11MACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 2, 1, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11MACAddress.setStatus('current')
if mibBuilder.loadTexts: coDot11MACAddress.setDescription('Unique MAC Address assigned to the STA.')
coDot11RTSThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(128, 1540), ValueRangeConstraint(2347, 2347), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: coDot11RTSThreshold.setStatus('current')
if mibBuilder.loadTexts: coDot11RTSThreshold.setDescription('Specifies the number of octets in an MPDU, below which an RTS/CTS handshake is not performed. An RTS/CTS handshake is performed at the beginning of any frame exchange sequence where the MPDU is of type Data or Management, the MPDU has an individual address in the Address1 field, and the length of the MPDU is greater than this threshold. (For additional details, refer to Table 21 in 9.7.) Setting this attribute to be larger than the maximum MSDU size has the effect of turning off the RTS/CTS handshake for frames of Data or Management type transmitted by this STA. The default value of this attribute is 2347.')
coDot11ShortRetryLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11ShortRetryLimit.setStatus('current')
if mibBuilder.loadTexts: coDot11ShortRetryLimit.setDescription('Indicates the maximum number of transmission attempts of a frame, the length of which is less than or equal to coDot11RTSThreshold, that are made before a failure condition is indicated. The default value of this attribute is 7.')
coDot11LongRetryLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11LongRetryLimit.setStatus('current')
if mibBuilder.loadTexts: coDot11LongRetryLimit.setDescription('Indicates the maximum number of transmission attempts of a frame, the length of which is greater than coDot11RTSThreshold, that are made before a failure condition is indicated. The default value of this attribute is 4.')
coDot11FragmentationThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(256, 2346))).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11FragmentationThreshold.setStatus('current')
if mibBuilder.loadTexts: coDot11FragmentationThreshold.setDescription('Indicates the current maximum size, in octets, of the MPDU that may be delivered to the PHY. An MSDU is broken down into fragments if its size exceeds the value of this attribute after adding MAC headers and trailers. An MSDU or MMPDU is fragmented when the resulting frame has an individual address in the Address1 field, and the length of the frame is larger than this threshold. The default value for this attribute is the lesser of 2346 or the aMPDUMaxLength of the attached PHY and will never exceed the lesser of 2346 or the aMPDUMaxLength of the attached PHY. The value of this attribute will never be less than 256. ')
coDot11MaxTransmitMSDULifetime = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 2, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11MaxTransmitMSDULifetime.setStatus('current')
if mibBuilder.loadTexts: coDot11MaxTransmitMSDULifetime.setDescription('Elapsed time in TU after the initial transmission of an MSDU, after which further attempts to transmit the MSDU are terminated. The default value of this attribute is 512.')
coDot11MaxReceiveLifetime = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 2, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11MaxReceiveLifetime.setStatus('current')
if mibBuilder.loadTexts: coDot11MaxReceiveLifetime.setDescription('Elapsed time in TU, after the initial reception of a fragmented MMPDU or MSDU, after which further attempts to reassemble the MMPDU or MSDU is terminated. The default value is 512.')
coDot11ManufacturerID = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 2, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11ManufacturerID.setStatus('current')
if mibBuilder.loadTexts: coDot11ManufacturerID.setDescription("The name of the manufacturer. It may include additional information at the manufacturer's discretion. The default value of this attribute is null.")
coDot11ProductID = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 2, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11ProductID.setStatus('current')
if mibBuilder.loadTexts: coDot11ProductID.setDescription("An identifier that is unique to the manufacturer. It may include additional information at the manufacturer's discretion. The default value is null.")
coDot11RadioType = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 2, 1, 1, 10), ColubrisRadioType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11RadioType.setStatus('current')
if mibBuilder.loadTexts: coDot11RadioType.setDescription('Identify the wireless device inside the HP product.')
coDot11StationDetectionState = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 2, 1, 1, 11), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: coDot11StationDetectionState.setStatus('current')
if mibBuilder.loadTexts: coDot11StationDetectionState.setDescription("The desired state of the station detection process. 'true': Analyze probe requests. 'false': Do not analyze probe requests.")
coDot11CountersTable = MibTable((1, 3, 6, 1, 4, 1, 8744, 5, 4, 2, 2), )
if mibBuilder.loadTexts: coDot11CountersTable.setStatus('current')
if mibBuilder.loadTexts: coDot11CountersTable.setDescription('Group containing attributes that are MAC counters. In tabular form to allow multiple instance on an agent.')
coDot11CountersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8744, 5, 4, 2, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: coDot11CountersEntry.setStatus('current')
if mibBuilder.loadTexts: coDot11CountersEntry.setDescription('An entry in the coDot11CountersEntry Table. ifIndex - Each 802.11 interface is represented by an ifEntry. Interface tables in this MIB module are indexed by ifIndex.')
coDot11TransmittedFragmentCount = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 2, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11TransmittedFragmentCount.setStatus('current')
if mibBuilder.loadTexts: coDot11TransmittedFragmentCount.setDescription('This counter is incremented for an acknowledged MPDU with an individual address in the address 1 field or an MPDU with a multicast address in the address 1 field of type Data or Management.')
coDot11MulticastTransmittedFrameCount = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 2, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11MulticastTransmittedFrameCount.setStatus('current')
if mibBuilder.loadTexts: coDot11MulticastTransmittedFrameCount.setDescription('This counter is incremented only when the multicast bit is set in the destination MAC address of a successfully transmitted MSDU. When operating as a STA in an ESS, where these frames are directed to the AP, this implies having received an acknowledgment to all associated MPDUs.')
coDot11FailedCount = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 2, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11FailedCount.setStatus('current')
if mibBuilder.loadTexts: coDot11FailedCount.setDescription('This counter is incremented when an MSDU is not transmitted successfully due to the number of transmit attempts exceeding either the coDot11ShortRetryLimit or coDot11LongRetryLimit.')
coDot11RetryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 2, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11RetryCount.setStatus('current')
if mibBuilder.loadTexts: coDot11RetryCount.setDescription('This counter is incremented when an MSDU is successfully transmitted after one or more retransmissions.')
coDot11MultipleRetryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 2, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11MultipleRetryCount.setStatus('current')
if mibBuilder.loadTexts: coDot11MultipleRetryCount.setDescription('This counter is incremented when an MSDU is successfully transmitted after more than one retransmission.')
coDot11FrameDuplicateCount = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 2, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11FrameDuplicateCount.setStatus('current')
if mibBuilder.loadTexts: coDot11FrameDuplicateCount.setDescription('This counter is incremented when a frame is received that the Sequence Control field indicates is a duplicate.')
coDot11RTSSuccessCount = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 2, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11RTSSuccessCount.setStatus('current')
if mibBuilder.loadTexts: coDot11RTSSuccessCount.setDescription('This counter is incremented when a CTS is received in response to an RTS.')
coDot11RTSFailureCount = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 2, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11RTSFailureCount.setStatus('current')
if mibBuilder.loadTexts: coDot11RTSFailureCount.setDescription('This counter is incremented when a CTS is not received in response to an RTS.')
coDot11ACKFailureCount = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 2, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11ACKFailureCount.setStatus('current')
if mibBuilder.loadTexts: coDot11ACKFailureCount.setDescription('This counter is incremented when an ACK is not received when expected.')
coDot11ReceivedFragmentCount = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 2, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11ReceivedFragmentCount.setStatus('current')
if mibBuilder.loadTexts: coDot11ReceivedFragmentCount.setDescription('This counter is incremented for each successfully received MPDU of type Data or Management.')
coDot11MulticastReceivedFrameCount = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 2, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11MulticastReceivedFrameCount.setStatus('current')
if mibBuilder.loadTexts: coDot11MulticastReceivedFrameCount.setDescription('This counter is incremented when a MSDU is received with the multicast bit set in the destination MAC address.')
coDot11FCSErrorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 2, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11FCSErrorCount.setStatus('current')
if mibBuilder.loadTexts: coDot11FCSErrorCount.setDescription('This counter is incremented when an FCS error is detected in a received MPDU.')
coDot11TransmittedFrameCount = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 2, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11TransmittedFrameCount.setStatus('current')
if mibBuilder.loadTexts: coDot11TransmittedFrameCount.setDescription('This counter is incremented for each successfully transmitted MSDU.')
coDot11WEPUndecryptableCount = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 2, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11WEPUndecryptableCount.setStatus('current')
if mibBuilder.loadTexts: coDot11WEPUndecryptableCount.setDescription("This counter is incremented when a frame is received with the WEP subfield of the Frame Control field set to one, and the WEPOn value for the key mapped to the TA's MAC address indicates that the frame should not have been encrypted or that frame is discarded due to the receiving STA not implementing the privacy option.")
coDot11PhyOperationTable = MibTable((1, 3, 6, 1, 4, 1, 8744, 5, 4, 3, 1), )
if mibBuilder.loadTexts: coDot11PhyOperationTable.setStatus('current')
if mibBuilder.loadTexts: coDot11PhyOperationTable.setDescription('PHY level attributes concerned with operation. In tabular form to allow multiple instances on an agent.')
coDot11PhyOperationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8744, 5, 4, 3, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: coDot11PhyOperationEntry.setStatus('current')
if mibBuilder.loadTexts: coDot11PhyOperationEntry.setDescription('An entry in the coDot11PhyOperation Table. ifIndex - Each 802.11 interface is represented by an ifEntry. Interface tables in this MIB module are indexed by ifIndex.')
coDot11PHYType = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 7))).clone(namedValues=NamedValues(("fhss", 1), ("dsss", 2), ("irbaseband", 3), ("ofdm", 4), ("ht", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11PHYType.setStatus('current')
if mibBuilder.loadTexts: coDot11PHYType.setDescription('This is an 8-bit integer value that identifies the PHY type supported by the attached PLCP and PMD. Currently defined values and their corresponding PHY types are: FHSS 2.4 GHz = 01 , DSSS 2.4 GHz = 02, IR Baseband = 03, OFDM 5 GHz = 04.')
coDot11CurrentRegDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11CurrentRegDomain.setStatus('current')
if mibBuilder.loadTexts: coDot11CurrentRegDomain.setDescription('The current regulatory domain this instance of the PMD is supporting. This object corresponds to one of the RegDomains listed in coDot11RegDomainsSupported.')
coDot11TempType = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tempType1", 1), ("tempType2", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11TempType.setStatus('current')
if mibBuilder.loadTexts: coDot11TempType.setDescription("There are different operating temperature requirements dependent on the anticipated environmental conditions. This attribute describes the current PHY's operating temperature range capability. Currently defined values and their corresponding temperature ranges are: Type 1 = X'01'-Commercial range of 0 to 40 degrees C, Type 2 = X'02'-Industrial range of -30 to 70 degrees C.")
coDot11CurrentOperFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 3, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11CurrentOperFrequency.setStatus('current')
if mibBuilder.loadTexts: coDot11CurrentOperFrequency.setDescription('The current operating frequency channel of the radio.')
coDot11CurrentOperPHYType = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ieee802dot11a", 1), ("ieee802dot11b", 2), ("ieee802dot11g", 3), ("ieee802dot11bAndg", 4), ("ieee802dot11aTurbo", 5), ("ieee802dot11n", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11CurrentOperPHYType.setStatus('current')
if mibBuilder.loadTexts: coDot11CurrentOperPHYType.setDescription('The current operating PHY type of the radio.')
coDot11Sensitivity = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("large", 1), ("medium", 2), ("small", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: coDot11Sensitivity.setStatus('current')
if mibBuilder.loadTexts: coDot11Sensitivity.setDescription('Receiver sensitivity of the radio.')
coDot11RadioEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 3, 1, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: coDot11RadioEnabled.setStatus('current')
if mibBuilder.loadTexts: coDot11RadioEnabled.setDescription('When True the radio is enabled.')
coDot11OperatingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("accessPointAndWirelessLinks", 1), ("accessPointOnly", 2), ("wirelessLinksOnly", 3), ("monitor", 4), ("sensor", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: coDot11OperatingMode.setStatus('current')
if mibBuilder.loadTexts: coDot11OperatingMode.setDescription('Operating mode of the radio. Available options are: Access point and Wireless links: Standard operating mode provides support for all wireless functions. Access point only: Only provides access point functionality, local mesh links cannot be created. Wireless links only: Only provides local mesh functionality. Wireless client stations cannot connect. Monitor: Disables access point and local mesh functions. Use this option for continuous scanning across all channels in all supported wireless modes. Sensor: Enables RF sensor functionality on this radio. Operation of this feature requires that the appropriate license is installed.')
coDot11AutoChannelEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 3, 1, 1, 9), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: coDot11AutoChannelEnabled.setStatus('current')
if mibBuilder.loadTexts: coDot11AutoChannelEnabled.setDescription('When True the Auto Channel option is enabled.')
coDot11AutoChannelInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 60, 120, 240, 480, 720, 1440))).clone(namedValues=NamedValues(("disable", 0), ("timeOfDay", 1), ("oneHour", 60), ("twoHours", 120), ("fourHours", 240), ("eightHours", 480), ("twelveHours", 720), ("tweentyFourHours", 1440)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: coDot11AutoChannelInterval.setStatus('current')
if mibBuilder.loadTexts: coDot11AutoChannelInterval.setDescription('Time interval, in minutes, between auto rescanning of the channels. Maximum is 1440 minutes (24 hours). A value of zero disables automatic rescanning of channels, the radio will automatically select a channel when the interface initializes and utilize that channel as long as the interface is operational.')
coDot11AutoPowerEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 3, 1, 1, 11), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: coDot11AutoPowerEnabled.setStatus('current')
if mibBuilder.loadTexts: coDot11AutoPowerEnabled.setDescription('When True the Auto Power option is enabled.')
coDot11AutoPowerInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 3, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(60, 120, 240, 480, 720, 1440))).clone(namedValues=NamedValues(("oneHour", 60), ("twoHours", 120), ("fourHours", 240), ("eightHours", 480), ("twelveHours", 720), ("tweentyFourHours", 1440)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: coDot11AutoPowerInterval.setStatus('current')
if mibBuilder.loadTexts: coDot11AutoPowerInterval.setDescription('Time interval, in minutes, between auto rescanning of the channels. Maximum is 1440 minutes (24 hours).')
coDot11PhyAntennaTable = MibTable((1, 3, 6, 1, 4, 1, 8744, 5, 4, 3, 2), )
if mibBuilder.loadTexts: coDot11PhyAntennaTable.setStatus('current')
if mibBuilder.loadTexts: coDot11PhyAntennaTable.setDescription('Group of attributes for PhyAntenna. In tabular form to allow multiple instances on an agent.')
coDot11PhyAntennaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8744, 5, 4, 3, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: coDot11PhyAntennaEntry.setStatus('current')
if mibBuilder.loadTexts: coDot11PhyAntennaEntry.setDescription('An entry in the coDot11PhyAntenna Table. ifIndex - Each 802.11 interface is represented by an ifEntry. Interface tables in this MIB module are indexed by ifIndex.')
coDot11CurrentTxAntenna = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11CurrentTxAntenna.setStatus('current')
if mibBuilder.loadTexts: coDot11CurrentTxAntenna.setDescription('The current antenna being used to transmit. This value is one of the values appearing in coDot11SupportedTxAntenna. This may be used by a management agent to control which antenna is used for transmission.')
coDot11DiversitySupport = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("fixedlist", 1), ("notsupported", 2), ("dynamic", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11DiversitySupport.setStatus('current')
if mibBuilder.loadTexts: coDot11DiversitySupport.setDescription("This implementation's support for diversity, encoded as: X'01': Diversity is available and is performed over the fixed list of antennas defined in coDot11DiversitySelectionRx. X'02': Diversity is not supported. X'03': Diversity is supported and control of diversity is also available, in which case the attribute coDot11DiversitySelectionRx can be dynamically modified by the LME.")
coDot11CurrentRxAntenna = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11CurrentRxAntenna.setStatus('current')
if mibBuilder.loadTexts: coDot11CurrentRxAntenna.setDescription('The current antenna being used to receive, if the coDot11 DiversitySupport indicates that diversity is not supported. The selected antenna shall be one of the antennae marked for receive in the coDot11AntennasListTable.')
coDot11PhyConfigTable = MibTable((1, 3, 6, 1, 4, 1, 8744, 5, 4, 3, 3), )
if mibBuilder.loadTexts: coDot11PhyConfigTable.setStatus('current')
if mibBuilder.loadTexts: coDot11PhyConfigTable.setDescription('PHY configuration attributes. In tabular form to allow multiple instances on an agent.')
coDot11PhyConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8744, 5, 4, 3, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: coDot11PhyConfigEntry.setStatus('current')
if mibBuilder.loadTexts: coDot11PhyConfigEntry.setDescription('An entry in the coDot11PhyConfig Table. ifIndex - Each 802.11 interface is represented by an ifEntry. Interface tables in this MIB module are indexed by ifIndex.')
coDot11PhyAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: coDot11PhyAdminStatus.setStatus('current')
if mibBuilder.loadTexts: coDot11PhyAdminStatus.setDescription("The desired state of the radio interface. 'up': Sets the radio interface to be ready to transmit and receive. 'down': Stops the transmission and reception of packets on the interface.")
coDot11PhyOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11PhyOperStatus.setStatus('current')
if mibBuilder.loadTexts: coDot11PhyOperStatus.setDescription("The current state of the radio interface. 'up': The radio interface is ready to ready to transmit and receive. 'down': The radio is not able to transmit or receive on the interface.")
coDot11PhyDSSSTable = MibTable((1, 3, 6, 1, 4, 1, 8744, 5, 4, 3, 4), )
if mibBuilder.loadTexts: coDot11PhyDSSSTable.setStatus('current')
if mibBuilder.loadTexts: coDot11PhyDSSSTable.setDescription('Entry of attributes for coDot11PhyDSSSEntry. In tabular form to allow multiple instances on an agent. This table only apply when in DSSS 2.4 GHz range')
coDot11PhyDSSSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8744, 5, 4, 3, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: coDot11PhyDSSSEntry.setStatus('current')
if mibBuilder.loadTexts: coDot11PhyDSSSEntry.setDescription('An entry in the coDot11PhyDSSSEntry Table. ifIndex - Each 802.11 interface is represented by an ifEntry. Interface tables in this MIB module are indexed by ifIndex.')
coDot11CurrentChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: coDot11CurrentChannel.setStatus('current')
if mibBuilder.loadTexts: coDot11CurrentChannel.setDescription('The desired operating frequency channel of the DSSS PHY. Valid channel numbers are as defined in 15.4.6.2.')
coDot11CCAModeSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11CCAModeSupported.setStatus('current')
if mibBuilder.loadTexts: coDot11CCAModeSupported.setDescription('coDot11CCAModeSupported is a bit-significant value, representing all of the CCA modes supported by the PHY. Valid values are: energy detect only (ED_ONLY) = 01 carrier sense only (CS_ONLY) = 02 carrier sense and energy detect (ED_and_CS)= 04 Or the logical sum of any of these values.')
coDot11CurrentCCAMode = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 3, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4))).clone(namedValues=NamedValues(("edonly", 1), ("csonly", 2), ("edandcs", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11CurrentCCAMode.setStatus('current')
if mibBuilder.loadTexts: coDot11CurrentCCAMode.setDescription('The current CCA method in operation. Valid values are: energy detect only (edonly) = 01 carrier sense only (csonly) = 02 carrier sense and energy detect (edandcs)= 04')
coDot11RegDomainsSupportedTable = MibTable((1, 3, 6, 1, 4, 1, 8744, 5, 4, 3, 5), )
if mibBuilder.loadTexts: coDot11RegDomainsSupportedTable.setStatus('current')
if mibBuilder.loadTexts: coDot11RegDomainsSupportedTable.setDescription("There are different operational requirements dependent on the regulatory domain. This attribute list describes the regulatory domains the PLCP and PMD support in this implementation. Currently defined values and their corresponding Regulatory Domains are: FCC (USA) = X'10' DOC (Canada) = X'20' ETSI (most of Europe) = X'30' Spain = X'31' France = X'32' Japan = X'41' ")
coDot11RegDomainsSupportedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8744, 5, 4, 3, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "COLUBRIS-802DOT11-MIB", "coDot11RegDomainsSupportIndex"))
if mibBuilder.loadTexts: coDot11RegDomainsSupportedEntry.setStatus('current')
if mibBuilder.loadTexts: coDot11RegDomainsSupportedEntry.setDescription('An entry in the coDot11RegDomainsSupported Table. ifIndex - Each 802.11 interface is represented by an ifEntry. Interface tables in this MIB module are indexed by ifIndex. coDot11RegDomainsSupportIndex - Uniquely specifies the regulatory domain in the table.')
coDot11RegDomainsSupportIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 3, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: coDot11RegDomainsSupportIndex.setStatus('current')
if mibBuilder.loadTexts: coDot11RegDomainsSupportIndex.setDescription('The auxiliary variable used to identify instances of the columnar objects in the RegDomainsSupported Table.')
coDot11RegDomainsSupportValue = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 3, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(16, 32, 48, 49, 50, 65))).clone(namedValues=NamedValues(("fcc", 16), ("doc", 32), ("etsi", 48), ("spain", 49), ("france", 50), ("japan", 65)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11RegDomainsSupportValue.setStatus('current')
if mibBuilder.loadTexts: coDot11RegDomainsSupportValue.setDescription("There are different operational requirements dependent on the regulatory domain. This attribute list describes the regulatory domains the PLCP and PMD support in this implementation. Currently defined values and their corresponding Regulatory Domains are: FCC (USA) = X'10' DOC (Canada) = X'20' ETSI (most of Europe) = X'30' Spain = X'31' France = X'32' Japan = X'41' ")
coDot11AntennasListTable = MibTable((1, 3, 6, 1, 4, 1, 8744, 5, 4, 3, 6), )
if mibBuilder.loadTexts: coDot11AntennasListTable.setStatus('current')
if mibBuilder.loadTexts: coDot11AntennasListTable.setDescription('This table represents the list of antennae. An antenna can be marked to be capable of transmitting, receiving, and/or for participation in receive diversity. Each entry in this table represents a single antenna with its properties. The maximum number of antennae that can be contained in this table is 255.')
coDot11AntennasListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8744, 5, 4, 3, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "COLUBRIS-802DOT11-MIB", "coDot11AntennaListIndex"))
if mibBuilder.loadTexts: coDot11AntennasListEntry.setStatus('current')
if mibBuilder.loadTexts: coDot11AntennasListEntry.setDescription('An entry in the coDot11AntennasListTable, representing the properties of a single antenna. ifIndex - Each 802.11 interface is represented by an ifEntry. Interface tables in this MIB module are indexed by ifIndex. coDot11AntennaListIndex - Uniquely identifies the antenna connected to the 802.11 interface.')
coDot11AntennaListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 3, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)))
if mibBuilder.loadTexts: coDot11AntennaListIndex.setStatus('current')
if mibBuilder.loadTexts: coDot11AntennaListIndex.setDescription('The unique index of an antenna which is used to identify the columnar objects in the coDot11AntennasList Table.')
coDot11SupportedTxAntenna = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 3, 6, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11SupportedTxAntenna.setStatus('current')
if mibBuilder.loadTexts: coDot11SupportedTxAntenna.setDescription('When true, this object indicates that the antenna represented by coDot11AntennaIndex can be used as a transmit antenna.')
coDot11SupportedRxAntenna = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 3, 6, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11SupportedRxAntenna.setStatus('current')
if mibBuilder.loadTexts: coDot11SupportedRxAntenna.setDescription('When true, this object indicates that the antenna represented by the coDot11AntennaIndex can be used as a receive antenna.')
coDot11DiversitySelectionRx = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 3, 6, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11DiversitySelectionRx.setStatus('current')
if mibBuilder.loadTexts: coDot11DiversitySelectionRx.setDescription('When true, this object indicates that the antenna represented by coDot11AntennaIndex can be used for receive diversity. This object may only be true if the antenna can be used as a receive antenna, as indicated by coDot11SupportedRxAntenna.')
coDot11SupportedDataRatesTxTable = MibTable((1, 3, 6, 1, 4, 1, 8744, 5, 4, 3, 7), )
if mibBuilder.loadTexts: coDot11SupportedDataRatesTxTable.setStatus('current')
if mibBuilder.loadTexts: coDot11SupportedDataRatesTxTable.setDescription('The Transmit bit rates supported by the PLCP and PMD, data rates are increments of 500Kb/s from 1 Mbps to 63.5 Mbps subject to limitations of each individual PHY.')
coDot11SupportedDataRatesTxEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8744, 5, 4, 3, 7, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "COLUBRIS-802DOT11-MIB", "coDot11SupportedDataRatesTxIndex"))
if mibBuilder.loadTexts: coDot11SupportedDataRatesTxEntry.setStatus('current')
if mibBuilder.loadTexts: coDot11SupportedDataRatesTxEntry.setDescription('An Entry (conceptual row) in the coDot11SupportedDataRatesTx Table. ifIndex - Each 802.11 interface is represented by an ifEntry. Interface tables in this MIB module are indexed by ifIndex. coDot11SupportedDataRatesTxIndex - Uniquely identifies a supported rate in the table.')
coDot11SupportedDataRatesTxIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 3, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12)))
if mibBuilder.loadTexts: coDot11SupportedDataRatesTxIndex.setStatus('current')
if mibBuilder.loadTexts: coDot11SupportedDataRatesTxIndex.setDescription('Index object which identifies which data rate to access.')
coDot11SupportedDataRatesTxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 3, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11SupportedDataRatesTxValue.setStatus('current')
if mibBuilder.loadTexts: coDot11SupportedDataRatesTxValue.setDescription('The transmit bit rates supported by the PLCP and PMD. Data rates are increments of 500Kb/s from 1 Mbps to 63.5 Mbps subject to limitations of each individual PHY.')
coDot11SupportedDataRatesRxTable = MibTable((1, 3, 6, 1, 4, 1, 8744, 5, 4, 3, 8), )
if mibBuilder.loadTexts: coDot11SupportedDataRatesRxTable.setStatus('current')
if mibBuilder.loadTexts: coDot11SupportedDataRatesRxTable.setDescription('The receive bit rates supported by the PLCP and PMD. Data rates are increments of 500Kb/s from 1 Mbps to 63.5 Mbps subject to limitations of each individual PHY.')
coDot11SupportedDataRatesRxEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8744, 5, 4, 3, 8, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "COLUBRIS-802DOT11-MIB", "coDot11SupportedDataRatesRxIndex"))
if mibBuilder.loadTexts: coDot11SupportedDataRatesRxEntry.setStatus('current')
if mibBuilder.loadTexts: coDot11SupportedDataRatesRxEntry.setDescription('An Entry (conceptual row) in the coDot11SupportedDataRatesRx Table. ifIndex - Each 802.11 interface is represented by an ifEntry. Interface tables in this MIB module are indexed by ifIndex. coDot11SupportedDataRatesTxIndex - Uniquely identifies a supported rate in the table.')
coDot11SupportedDataRatesRxIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 3, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12)))
if mibBuilder.loadTexts: coDot11SupportedDataRatesRxIndex.setStatus('current')
if mibBuilder.loadTexts: coDot11SupportedDataRatesRxIndex.setDescription('Index object which identifies which data rate to access.')
coDot11SupportedDataRatesRxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 3, 8, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11SupportedDataRatesRxValue.setStatus('current')
if mibBuilder.loadTexts: coDot11SupportedDataRatesRxValue.setDescription('The receive bit rates supported by the PLCP and PMD. Data rates are increments of 500Kb/s from 1 Mbps to 63.5 Mbps subject to limitations of each individual PHY.')
coDot11PhyOFDMTable = MibTable((1, 3, 6, 1, 4, 1, 8744, 5, 4, 3, 9), )
if mibBuilder.loadTexts: coDot11PhyOFDMTable.setStatus('current')
if mibBuilder.loadTexts: coDot11PhyOFDMTable.setDescription('Entry of attributes for coDot11PhyOFDMEntry. In tabular form to allow multiple instances on an agent. This table only apply when in OFDM 5 GHz range.')
coDot11PhyOFDMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8744, 5, 4, 3, 9, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: coDot11PhyOFDMEntry.setStatus('current')
if mibBuilder.loadTexts: coDot11PhyOFDMEntry.setDescription('An entry in the coDot11PhyOFDMEntry Table. ifIndex - Each 802.11 interface is represented by an ifEntry. Interface tables in this MIB module are indexed by ifIndex.')
coDot11CurrentFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 3, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: coDot11CurrentFrequency.setStatus('current')
if mibBuilder.loadTexts: coDot11CurrentFrequency.setDescription('The desired operating frequency channel of the OFDM PHY.')
coDot11TIThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 3, 9, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: coDot11TIThreshold.setStatus('current')
if mibBuilder.loadTexts: coDot11TIThreshold.setDescription('The threshold being used to detect a busy medium (frequency). CCA reports a busy medium upon detecting the RSSI above this threshold.')
coDot11FrequencyBandsSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 3, 9, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11FrequencyBandsSupported.setStatus('current')
if mibBuilder.loadTexts: coDot11FrequencyBandsSupported.setDescription('The capability of the OFDM PHY implementation to operate in the three U-NII bands. Coded as an integer value of a three 1 bit fields as follow: bit 0 - Capable of operating in the lower (5.15-5.25 GHz) U-NII band. bit 1 - Capable of operating in the middle (5.25-5.35 GHz) U-NII band. bit 2 - Capable of operating in the middle (5.725-5.825 GHz) U-NII band. For example, for an implementation capable of operating in the lower and middle bands, this object would take the value 3.')
coDot11MinimumSNRLevel = MibScalar((1, 3, 6, 1, 4, 1, 8744, 5, 4, 3, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 92))).setUnits('dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: coDot11MinimumSNRLevel.setStatus('current')
if mibBuilder.loadTexts: coDot11MinimumSNRLevel.setDescription('An SNR level notification is generated when the average SNR level is below this attribute. Not supported on the M111.')
coDot11SNRLevelNotificationEnabled = MibScalar((1, 3, 6, 1, 4, 1, 8744, 5, 4, 3, 11), ColubrisNotificationEnable().clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: coDot11SNRLevelNotificationEnabled.setStatus('current')
if mibBuilder.loadTexts: coDot11SNRLevelNotificationEnabled.setDescription('This attribute, when true, enables the generation of SNR level notifications. Not supported on the M111.')
coDot11SNRLevelNotificationInterval = MibScalar((1, 3, 6, 1, 4, 1, 8744, 5, 4, 3, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000000))).setUnits('minutes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: coDot11SNRLevelNotificationInterval.setStatus('current')
if mibBuilder.loadTexts: coDot11SNRLevelNotificationInterval.setDescription('Interval in minutes between SNR Level notifications. Not supported on the M111.')
coDot11CountryCode = MibScalar((1, 3, 6, 1, 4, 1, 8744, 5, 4, 3, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 8, 12, 31, 32, 36, 40, 48, 51, 56, 68, 76, 84, 96, 100, 112, 124, 152, 156, 158, 170, 188, 191, 196, 203, 208, 214, 218, 222, 233, 246, 250, 268, 276, 300, 320, 340, 344, 348, 352, 356, 360, 364, 372, 376, 380, 392, 393, 395, 396, 397, 398, 400, 404, 408, 410, 414, 422, 428, 438, 440, 442, 446, 458, 484, 492, 504, 512, 528, 554, 578, 586, 591, 604, 608, 616, 620, 630, 634, 642, 643, 682, 702, 703, 704, 705, 710, 716, 724, 752, 756, 760, 764, 780, 784, 788, 792, 804, 807, 818, 826, 827, 840, 858, 860, 862, 887))).clone(namedValues=NamedValues(("world", 1), ("albania", 8), ("algeria", 12), ("azerbaijan", 31), ("argentina", 32), ("australia", 36), ("austria", 40), ("bahrain", 48), ("armenia", 51), ("belgium", 56), ("bolivia", 68), ("brazil", 76), ("belize", 84), ("bruneiDarussalam", 96), ("bulgaria", 100), ("belarus", 112), ("canada", 124), ("chile", 152), ("china", 156), ("taiwan", 158), ("colombia", 170), ("costaRica", 188), ("croatia", 191), ("cyprus", 196), ("czechRepublic", 203), ("denmark", 208), ("dominicanRepublic", 214), ("ecuador", 218), ("elSalvador", 222), ("estonia", 233), ("finland", 246), ("france", 250), ("georgia", 268), ("germany", 276), ("greece", 300), ("guatemala", 320), ("honduras", 340), ("hongkong", 344), ("hungary", 348), ("iceland", 352), ("india", 356), ("indonesia", 360), ("iran", 364), ("ireland", 372), ("israel", 376), ("italy", 380), ("japanW52W53", 392), ("japanW52W53J52", 393), ("japanJ52", 395), ("japanJ5280211j", 396), ("japanClient", 397), ("kazakhstan", 398), ("jordan", 400), ("kenya", 404), ("northKorea", 408), ("southKorea", 410), ("kuwait", 414), ("lebanon", 422), ("latvia", 428), ("liechtenstein", 438), ("lithuania", 440), ("luxembourg", 442), ("macau", 446), ("malaysia", 458), ("mexico", 484), ("monaco", 492), ("morocco", 504), ("oman", 512), ("netherlands", 528), ("newZealand", 554), ("norway", 578), ("pakistan", 586), ("panama", 591), ("peru", 604), ("philippines", 608), ("poland", 616), ("portugal", 620), ("puertoRico", 630), ("qatar", 634), ("romania", 642), ("russianFederation", 643), ("saudiArabia", 682), ("singapore", 702), ("slovakia", 703), ("vietNam", 704), ("slovenia", 705), ("southAfrica", 710), ("zimbabwe", 716), ("spain", 724), ("sweden", 752), ("switzerland", 756), ("syria", 760), ("thailand", 764), ("trinidadAndTobago", 780), ("unitedArabEmirates", 784), ("tunisia", 788), ("turkey", 792), ("ukraine", 804), ("macedonia", 807), ("egypt", 818), ("unitedKingdom", 826), ("unitedKingdom58GHz", 827), ("unitedStates", 840), ("uruguay", 858), ("uzbekistan", 860), ("venezuela", 862), ("yemen", 887)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11CountryCode.setStatus('current')
if mibBuilder.loadTexts: coDot11CountryCode.setDescription('The radios are running accordingly to the regulations of this country.')
coDot11PhyHTTable = MibTable((1, 3, 6, 1, 4, 1, 8744, 5, 4, 3, 14), )
if mibBuilder.loadTexts: coDot11PhyHTTable.setStatus('current')
if mibBuilder.loadTexts: coDot11PhyHTTable.setDescription('Entry of attributes for coDot11PhyHTEntry. This table only apply when the PHY type is HT.')
coDot11PhyHTEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8744, 5, 4, 3, 14, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: coDot11PhyHTEntry.setStatus('current')
if mibBuilder.loadTexts: coDot11PhyHTEntry.setDescription('An entry in the coDot11PhyHTEntry Table. ifIndex - Each 802.11 interface is represented by an ifEntry. Interface tables in this MIB module are indexed by ifIndex.')
coDot11FortyMHzOperationImplemented = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 3, 14, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11FortyMHzOperationImplemented.setStatus('current')
if mibBuilder.loadTexts: coDot11FortyMHzOperationImplemented.setDescription('This attribute, when TRUE, indicates that 40 MHz Operation is implemented.')
coDot11FortyMHzOperationEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 3, 14, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11FortyMHzOperationEnabled.setStatus('current')
if mibBuilder.loadTexts: coDot11FortyMHzOperationEnabled.setDescription('This attribute, when TRUE, indicates that 40 MHz Operation is enabled.')
coDot11CurrentPrimaryChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 3, 14, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11CurrentPrimaryChannel.setStatus('current')
if mibBuilder.loadTexts: coDot11CurrentPrimaryChannel.setDescription('This attribute indicates the operating channel. If 20/40 MHz Mode is currently in use then this attribute indicates the primary channel.')
coDot11CurrentSecondaryChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 3, 14, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11CurrentSecondaryChannel.setStatus('current')
if mibBuilder.loadTexts: coDot11CurrentSecondaryChannel.setDescription('This attribute indicates the channel number of the secondary channel. If 20/40 MHz mode is not currently in use, this attribute value is 0.')
coDot11GreenfieldOptionImplemented = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 3, 14, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11GreenfieldOptionImplemented.setStatus('current')
if mibBuilder.loadTexts: coDot11GreenfieldOptionImplemented.setDescription('This attribute, when TRUE, indicates that the HT Greenfield option is implemented.')
coDot11GreenfieldOptionEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 3, 14, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11GreenfieldOptionEnabled.setStatus('current')
if mibBuilder.loadTexts: coDot11GreenfieldOptionEnabled.setDescription('This attribute, when TRUE, indicates that the HT Greenfield option is enabled.')
coDot11ShortGIOptionInTwentyImplemented = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 3, 14, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11ShortGIOptionInTwentyImplemented.setStatus('current')
if mibBuilder.loadTexts: coDot11ShortGIOptionInTwentyImplemented.setDescription('This attribute, when TRUE, indicates that the Short Guard option is implemented for 20 MHz operation.')
coDot11ShortGIOptionInTwentyEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 3, 14, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11ShortGIOptionInTwentyEnabled.setStatus('current')
if mibBuilder.loadTexts: coDot11ShortGIOptionInTwentyEnabled.setDescription('This attribute, when TRUE, indicates that the Short Guard option is enabled for 20 MHz operation.')
coDot11ShortGIOptionInFortyImplemented = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 3, 14, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11ShortGIOptionInFortyImplemented.setStatus('current')
if mibBuilder.loadTexts: coDot11ShortGIOptionInFortyImplemented.setDescription('This attribute, when TRUE, indicates that the Short Guard option is implemented for 40 MHz operation.')
coDot11ShortGIOptionInFortyEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 3, 14, 1, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11ShortGIOptionInFortyEnabled.setStatus('current')
if mibBuilder.loadTexts: coDot11ShortGIOptionInFortyEnabled.setDescription('This attribute, when TRUE, indicates that the Short Guard option is enabled for 40 MHz operation.')
coDot11HighestSupportedDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 3, 14, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11HighestSupportedDataRate.setStatus('current')
if mibBuilder.loadTexts: coDot11HighestSupportedDataRate.setDescription('This attribute shall specify the Highest Data Rate in Mbps at which the station may receive data.')
coDot11RSNAStatsTable = MibTable((1, 3, 6, 1, 4, 1, 8744, 5, 4, 4), )
if mibBuilder.loadTexts: coDot11RSNAStatsTable.setStatus('current')
if mibBuilder.loadTexts: coDot11RSNAStatsTable.setDescription('This table maintains statistics for SN. It is not supported on the WCB-200.')
coDot11RSNAStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8744, 5, 4, 4, 1), )
coVirtualAccessPointConfigEntry.registerAugmentions(("COLUBRIS-802DOT11-MIB", "coDot11RSNAStatsEntry"))
coDot11RSNAStatsEntry.setIndexNames(*coVirtualAccessPointConfigEntry.getIndexNames())
if mibBuilder.loadTexts: coDot11RSNAStatsEntry.setStatus('current')
if mibBuilder.loadTexts: coDot11RSNAStatsEntry.setDescription('An entry in the coDot11RSNAStatsTable.')
coDot11RSNAStatsVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 4, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11RSNAStatsVersion.setStatus('current')
if mibBuilder.loadTexts: coDot11RSNAStatsVersion.setDescription('The RSNA version which the AP associated with.')
coDot11RSNAStatsSelectedPairwiseCipher = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 4, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11RSNAStatsSelectedPairwiseCipher.setStatus('current')
if mibBuilder.loadTexts: coDot11RSNAStatsSelectedPairwiseCipher.setDescription('The AKM Suite the AP selected during association. The value consists of a three octet OUI followed by a one octet type as follows: OUI Value, Cipher, Type XX-XX-XX, 0, Reserved XX-XX-XX, 1, WEP-40 XX-XX-XX, 2, TKIP XX-XX-XX, 3, Reserved XX-XX-XX, 4, CCMP XX-XX-XX, 5, WEP-104 XX-XX-XX, 6-255, Reserved Vendor, any, Vendor Specific other, any, Reserved')
coDot11RSNAStatsTKIPICVErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11RSNAStatsTKIPICVErrors.setStatus('current')
if mibBuilder.loadTexts: coDot11RSNAStatsTKIPICVErrors.setDescription('Counts the number of TKIP ICV errors encountered when decrypting packets for the AP.')
coDot11RSNAStatsTKIPLocalMICFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11RSNAStatsTKIPLocalMICFailures.setStatus('current')
if mibBuilder.loadTexts: coDot11RSNAStatsTKIPLocalMICFailures.setDescription('Counts the number of Michael MIC failures encountered when checking the integrity of packets received from the AP at this entity.')
coDot11RSNAStatsTKIPRemoteMICFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11RSNAStatsTKIPRemoteMICFailures.setStatus('current')
if mibBuilder.loadTexts: coDot11RSNAStatsTKIPRemoteMICFailures.setDescription('Counts the number of Michael MIC failures encountered by the remote device and reported back to this entity.')
coDot11RSNAStatsTKIPCounterMeasuresInvoked = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11RSNAStatsTKIPCounterMeasuresInvoked.setStatus('current')
if mibBuilder.loadTexts: coDot11RSNAStatsTKIPCounterMeasuresInvoked.setDescription('Counts the number of times a MIC failure occurred two times within 60 seconds and countermeasures were invoked. This variable counts this for both local and remote. It increments every time countermeasures are invoked.')
coDot11RSNAStatsCCMPFormatErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11RSNAStatsCCMPFormatErrors.setStatus('current')
if mibBuilder.loadTexts: coDot11RSNAStatsCCMPFormatErrors.setDescription('The number of MSDUs received with an invalid CCMP format.')
coDot11RSNAStatsCCMPReplays = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11RSNAStatsCCMPReplays.setStatus('current')
if mibBuilder.loadTexts: coDot11RSNAStatsCCMPReplays.setDescription('The number of received unicast fragments discarded by the replay mechanism.')
coDot11RSNAStatsCCMPDecryptErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 4, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11RSNAStatsCCMPDecryptErrors.setStatus('current')
if mibBuilder.loadTexts: coDot11RSNAStatsCCMPDecryptErrors.setDescription('The number of received fragments discarded by the CCMP decryption algorithm.')
coDot11RSNAStatsTKIPReplays = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 4, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11RSNAStatsTKIPReplays.setStatus('current')
if mibBuilder.loadTexts: coDot11RSNAStatsTKIPReplays.setDescription('Counts the number of TKIP replay errors detected.')
coDot11RSNAStats4WayHandshakeFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 4, 4, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coDot11RSNAStats4WayHandshakeFailures.setStatus('current')
if mibBuilder.loadTexts: coDot11RSNAStats4WayHandshakeFailures.setDescription('Counts the number of 4-Way Handshake failures.')
coDot11ManagementMIBNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 8744, 5, 4, 5))
coDot11ManagementMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 8744, 5, 4, 5, 0))
coDot11SNRLevelNotification = NotificationType((1, 3, 6, 1, 4, 1, 8744, 5, 4, 5, 0, 1)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"), ("COLUBRIS-VIRTUAL-AP-MIB", "coVirtualApSSID"), ("COLUBRIS-802DOT11-MIB", "coDot11CurrentSNRLevel"))
if mibBuilder.loadTexts: coDot11SNRLevelNotification.setStatus('current')
if mibBuilder.loadTexts: coDot11SNRLevelNotification.setDescription('The average SNR level for all the stations using this VSC during the last three intervals is low.')
coDot11AssociationNotification = NotificationType((1, 3, 6, 1, 4, 1, 8744, 5, 4, 5, 0, 2)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"), ("COLUBRIS-802DOT11-MIB", "coDot11StationName"), ("COLUBRIS-802DOT11-MIB", "coDot11StationSSID"), ("COLUBRIS-802DOT11-MIB", "coDot11StationIPAddress"), ("COLUBRIS-802DOT11-MIB", "coDot11StationMACAddress"), ("COLUBRIS-802DOT11-MIB", "coDot11SignalLevel"), ("COLUBRIS-802DOT11-MIB", "coDot11SNR"), ("COLUBRIS-802DOT11-MIB", "coDot11TransmitRate"), ("COLUBRIS-802DOT11-MIB", "coDot11NumberOfUsers"))
if mibBuilder.loadTexts: coDot11AssociationNotification.setStatus('current')
if mibBuilder.loadTexts: coDot11AssociationNotification.setDescription('Sent when a new association is made or sent periodically using interval specified by coDot11AssociationNotificationInterval object.')
coDot11UnauthorizedAPNotification = NotificationType((1, 3, 6, 1, 4, 1, 8744, 5, 4, 5, 0, 3)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"), ("COLUBRIS-802DOT11-MIB", "coDot11ScanSSID"), ("COLUBRIS-802DOT11-MIB", "coDot11ScanMacAddress"), ("COLUBRIS-802DOT11-MIB", "coDot11ScanChannel"), ("COLUBRIS-802DOT11-MIB", "coDot11ScanPHYType"))
if mibBuilder.loadTexts: coDot11UnauthorizedAPNotification.setStatus('current')
if mibBuilder.loadTexts: coDot11UnauthorizedAPNotification.setDescription('Sent when a new unauthorized AP is detected.')
coDot11Conformance = MibIdentifier((1, 3, 6, 1, 4, 1, 8744, 5, 4, 6))
coDot11Groups = MibIdentifier((1, 3, 6, 1, 4, 1, 8744, 5, 4, 6, 1))
coDot11Compliances = MibIdentifier((1, 3, 6, 1, 4, 1, 8744, 5, 4, 6, 2))
coDot11Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 8744, 5, 4, 6, 2, 1)).setObjects(("COLUBRIS-802DOT11-MIB", "coDot11APBaseGroup"), ("COLUBRIS-802DOT11-MIB", "coDot11MACBaseGroup"), ("COLUBRIS-802DOT11-MIB", "coDot11CountersGroup"), ("COLUBRIS-802DOT11-MIB", "coDot11SmtAuthenticationAlgorithmsGroup"), ("COLUBRIS-802DOT11-MIB", "coDot11PhyConfigComplianceGroup"), ("COLUBRIS-802DOT11-MIB", "coDot11PhyConfigGroup"), ("COLUBRIS-802DOT11-MIB", "coDot11APPrivacyGroup"), ("COLUBRIS-802DOT11-MIB", "coDot11MACStatisticsGroup"), ("COLUBRIS-802DOT11-MIB", "coDot11PhyAntennaComplianceGroup"), ("COLUBRIS-802DOT11-MIB", "coDot11PhyRegDomainsSupportGroup"), ("COLUBRIS-802DOT11-MIB", "coDot11PhyAntennasListGroup"), ("COLUBRIS-802DOT11-MIB", "coDot11PhyRateGroup"), ("COLUBRIS-802DOT11-MIB", "coDot11AssociationGroup"), ("COLUBRIS-802DOT11-MIB", "coDot11AssociationConfigGroup"), ("COLUBRIS-802DOT11-MIB", "coDot11ScanGroup"), ("COLUBRIS-802DOT11-MIB", "coDot11ScanConfigGroup"), ("COLUBRIS-802DOT11-MIB", "coDot11WDSComplianceGroup"), ("COLUBRIS-802DOT11-MIB", "coDot11NotificationGroup"), ("COLUBRIS-802DOT11-MIB", "coDot11StationHTGroup"), ("COLUBRIS-802DOT11-MIB", "coDot11PhyDSSSComplianceGroup"), ("COLUBRIS-802DOT11-MIB", "coDot11PhyOFDMComplianceGroup"), ("COLUBRIS-802DOT11-MIB", "coDot11PhyHTComplianceGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    coDot11Compliance = coDot11Compliance.setStatus('deprecated')
if mibBuilder.loadTexts: coDot11Compliance.setDescription('The compliance statement for SNMPv2 entities that implement the IEEE 802.11 MIB.')
coDot11RSNCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 8744, 5, 4, 6, 2, 2)).setObjects(("COLUBRIS-802DOT11-MIB", "coDot11RSNBase"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    coDot11RSNCompliance = coDot11RSNCompliance.setStatus('current')
if mibBuilder.loadTexts: coDot11RSNCompliance.setDescription('The compliance statement for SNMPv2 entities that implement the IEEE 802.11 RSN MIB.')
coDot11ComplianceExt = ModuleCompliance((1, 3, 6, 1, 4, 1, 8744, 5, 4, 6, 2, 3)).setObjects(("COLUBRIS-802DOT11-MIB", "coDot11APBaseGroupExt"), ("COLUBRIS-802DOT11-MIB", "coDot11MACBaseGroup"), ("COLUBRIS-802DOT11-MIB", "coDot11CountersGroup"), ("COLUBRIS-802DOT11-MIB", "coDot11SmtAuthenticationAlgorithmsGroup"), ("COLUBRIS-802DOT11-MIB", "coDot11PhyConfigComplianceGroup"), ("COLUBRIS-802DOT11-MIB", "coDot11PhyConfigGroup"), ("COLUBRIS-802DOT11-MIB", "coDot11APPrivacyGroup"), ("COLUBRIS-802DOT11-MIB", "coDot11MACStatisticsGroup"), ("COLUBRIS-802DOT11-MIB", "coDot11PhyAntennaComplianceGroup"), ("COLUBRIS-802DOT11-MIB", "coDot11PhyRegDomainsSupportGroup"), ("COLUBRIS-802DOT11-MIB", "coDot11PhyAntennasListGroup"), ("COLUBRIS-802DOT11-MIB", "coDot11PhyRateGroup"), ("COLUBRIS-802DOT11-MIB", "coDot11AssociationGroup"), ("COLUBRIS-802DOT11-MIB", "coDot11AssociationConfigGroup"), ("COLUBRIS-802DOT11-MIB", "coDot11ScanGroup"), ("COLUBRIS-802DOT11-MIB", "coDot11ScanConfigGroup"), ("COLUBRIS-802DOT11-MIB", "coDot11WDSComplianceGroup"), ("COLUBRIS-802DOT11-MIB", "coDot11NotificationGroup"), ("COLUBRIS-802DOT11-MIB", "coDot11StationHTGroup"), ("COLUBRIS-802DOT11-MIB", "coDot11StationDetectionGroup"), ("COLUBRIS-802DOT11-MIB", "coDot11PhyDSSSComplianceGroup"), ("COLUBRIS-802DOT11-MIB", "coDot11PhyOFDMComplianceGroup"), ("COLUBRIS-802DOT11-MIB", "coDot11PhyHTComplianceGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    coDot11ComplianceExt = coDot11ComplianceExt.setStatus('current')
if mibBuilder.loadTexts: coDot11ComplianceExt.setDescription('The compliance statement for SNMPv2 entities that implement the IEEE 802.11 MIB.')
coDot11APBaseGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 8744, 5, 4, 6, 1, 1)).setObjects(("COLUBRIS-802DOT11-MIB", "coDot11RelayBetweenStation"), ("COLUBRIS-802DOT11-MIB", "coDot11PrivacyOptionImplemented"), ("COLUBRIS-802DOT11-MIB", "coDot11RSNAOptionImplemented"), ("COLUBRIS-802DOT11-MIB", "coDot11BeaconPeriod"), ("COLUBRIS-802DOT11-MIB", "coDot11DTIMPeriod"), ("COLUBRIS-802DOT11-MIB", "coDot11NumberOfUsers"), ("COLUBRIS-802DOT11-MIB", "coDot11AddToAssociationNotification"), ("COLUBRIS-802DOT11-MIB", "coDot11PhyTxPowerAdminLevel"), ("COLUBRIS-802DOT11-MIB", "coDot11PhyTxPowerOperLevel"), ("COLUBRIS-802DOT11-MIB", "coDot11BSSID"), ("COLUBRIS-802DOT11-MIB", "coDot11AdminMinimumDataRate"), ("COLUBRIS-802DOT11-MIB", "coDot11AdminMaximumDataRate"), ("COLUBRIS-802DOT11-MIB", "coDot11HighThroughputOptionImplemented"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    coDot11APBaseGroup = coDot11APBaseGroup.setStatus('deprecated')
if mibBuilder.loadTexts: coDot11APBaseGroup.setDescription('The AP object class provides the necessary support at the Access Point to manage the processes in the STA such that the STA may work cooperatively as a part of an IEEE 802.11 network. coDot11AdminMinimumDataRate and coDot11AdminMaximumDataRate are deprecated.')
coDot11APPrivacyGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 8744, 5, 4, 6, 1, 2)).setObjects(("COLUBRIS-802DOT11-MIB", "coDot11PrivacyInvoked"), ("COLUBRIS-802DOT11-MIB", "coDot11ExcludeUnencrypted"), ("COLUBRIS-802DOT11-MIB", "coDot11WEPICVErrorCount"), ("COLUBRIS-802DOT11-MIB", "coDot11WEPExcludedCount"), ("COLUBRIS-802DOT11-MIB", "coDot11WEPDefaultKeyID"), ("COLUBRIS-802DOT11-MIB", "coDot11WEPDefaultKey1Value"), ("COLUBRIS-802DOT11-MIB", "coDot11WEPDefaultKey2Value"), ("COLUBRIS-802DOT11-MIB", "coDot11WEPDefaultKey3Value"), ("COLUBRIS-802DOT11-MIB", "coDot11WEPDefaultKey4Value"), ("COLUBRIS-802DOT11-MIB", "coDot11RSNAEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    coDot11APPrivacyGroup = coDot11APPrivacyGroup.setStatus('current')
if mibBuilder.loadTexts: coDot11APPrivacyGroup.setDescription('The APPrivacy package is a set of attributes that are present if WEP is implemented on the Access Point.')
coDot11MACBaseGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 8744, 5, 4, 6, 1, 3)).setObjects(("COLUBRIS-802DOT11-MIB", "coDot11MACAddress"), ("COLUBRIS-802DOT11-MIB", "coDot11RTSThreshold"), ("COLUBRIS-802DOT11-MIB", "coDot11ShortRetryLimit"), ("COLUBRIS-802DOT11-MIB", "coDot11LongRetryLimit"), ("COLUBRIS-802DOT11-MIB", "coDot11FragmentationThreshold"), ("COLUBRIS-802DOT11-MIB", "coDot11MaxTransmitMSDULifetime"), ("COLUBRIS-802DOT11-MIB", "coDot11MaxReceiveLifetime"), ("COLUBRIS-802DOT11-MIB", "coDot11ManufacturerID"), ("COLUBRIS-802DOT11-MIB", "coDot11ProductID"), ("COLUBRIS-802DOT11-MIB", "coDot11RadioType"), ("COLUBRIS-802DOT11-MIB", "coDot11StationDetectionState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    coDot11MACBaseGroup = coDot11MACBaseGroup.setStatus('current')
if mibBuilder.loadTexts: coDot11MACBaseGroup.setDescription('The MAC object class provides the necessary support for access control, generation, and verification of frame check sequences, and proper delivery of valid data to upper layers.')
coDot11MACStatisticsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 8744, 5, 4, 6, 1, 4)).setObjects(("COLUBRIS-802DOT11-MIB", "coDot11RetryCount"), ("COLUBRIS-802DOT11-MIB", "coDot11MultipleRetryCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    coDot11MACStatisticsGroup = coDot11MACStatisticsGroup.setStatus('current')
if mibBuilder.loadTexts: coDot11MACStatisticsGroup.setDescription('The MACStatistics package provides extended statistical information on the operation of the MAC. This package is completely optional.')
coDot11SmtAuthenticationAlgorithmsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 8744, 5, 4, 6, 1, 5)).setObjects(("COLUBRIS-802DOT11-MIB", "coDot11AuthenticationAlgorithm"), ("COLUBRIS-802DOT11-MIB", "coDot11AuthenticationAlgorithmsEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    coDot11SmtAuthenticationAlgorithmsGroup = coDot11SmtAuthenticationAlgorithmsGroup.setStatus('current')
if mibBuilder.loadTexts: coDot11SmtAuthenticationAlgorithmsGroup.setDescription('Authentication Algorithm Table.')
coDot11PhyConfigComplianceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 8744, 5, 4, 6, 1, 6)).setObjects(("COLUBRIS-802DOT11-MIB", "coDot11MinimumSNRLevel"), ("COLUBRIS-802DOT11-MIB", "coDot11CurrentSNRLevel"), ("COLUBRIS-802DOT11-MIB", "coDot11Sensitivity"), ("COLUBRIS-802DOT11-MIB", "coDot11PhyAdminStatus"), ("COLUBRIS-802DOT11-MIB", "coDot11PhyOperStatus"), ("COLUBRIS-802DOT11-MIB", "coDot11PHYType"), ("COLUBRIS-802DOT11-MIB", "coDot11CurrentRegDomain"), ("COLUBRIS-802DOT11-MIB", "coDot11TempType"), ("COLUBRIS-802DOT11-MIB", "coDot11CurrentOperFrequency"), ("COLUBRIS-802DOT11-MIB", "coDot11CurrentOperPHYType"), ("COLUBRIS-802DOT11-MIB", "coDot11RadioEnabled"), ("COLUBRIS-802DOT11-MIB", "coDot11OperatingMode"), ("COLUBRIS-802DOT11-MIB", "coDot11AutoChannelEnabled"), ("COLUBRIS-802DOT11-MIB", "coDot11AutoChannelInterval"), ("COLUBRIS-802DOT11-MIB", "coDot11AutoPowerEnabled"), ("COLUBRIS-802DOT11-MIB", "coDot11AutoPowerInterval"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    coDot11PhyConfigComplianceGroup = coDot11PhyConfigComplianceGroup.setStatus('current')
if mibBuilder.loadTexts: coDot11PhyConfigComplianceGroup.setDescription('PHY layer operations attributes.')
coDot11PhyConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 8744, 5, 4, 6, 1, 7)).setObjects(("COLUBRIS-802DOT11-MIB", "coDot11SNRLevelNotificationEnabled"), ("COLUBRIS-802DOT11-MIB", "coDot11SNRLevelNotificationInterval"), ("COLUBRIS-802DOT11-MIB", "coDot11CountryCode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    coDot11PhyConfigGroup = coDot11PhyConfigGroup.setStatus('current')
if mibBuilder.loadTexts: coDot11PhyConfigGroup.setDescription('PHY notification configuration attributes.')
coDot11PhyAntennaComplianceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 8744, 5, 4, 6, 1, 8)).setObjects(("COLUBRIS-802DOT11-MIB", "coDot11CurrentTxAntenna"), ("COLUBRIS-802DOT11-MIB", "coDot11DiversitySupport"), ("COLUBRIS-802DOT11-MIB", "coDot11CurrentRxAntenna"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    coDot11PhyAntennaComplianceGroup = coDot11PhyAntennaComplianceGroup.setStatus('current')
if mibBuilder.loadTexts: coDot11PhyAntennaComplianceGroup.setDescription('Phy antenna attributes.')
coDot11PhyDSSSComplianceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 8744, 5, 4, 6, 1, 9)).setObjects(("COLUBRIS-802DOT11-MIB", "coDot11CurrentChannel"), ("COLUBRIS-802DOT11-MIB", "coDot11CCAModeSupported"), ("COLUBRIS-802DOT11-MIB", "coDot11CurrentCCAMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    coDot11PhyDSSSComplianceGroup = coDot11PhyDSSSComplianceGroup.setStatus('current')
if mibBuilder.loadTexts: coDot11PhyDSSSComplianceGroup.setDescription('Attributes that configure the DSSS for IEEE 802.11.')
coDot11PhyRegDomainsSupportGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 8744, 5, 4, 6, 1, 10)).setObjects(("COLUBRIS-802DOT11-MIB", "coDot11RegDomainsSupportValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    coDot11PhyRegDomainsSupportGroup = coDot11PhyRegDomainsSupportGroup.setStatus('current')
if mibBuilder.loadTexts: coDot11PhyRegDomainsSupportGroup.setDescription('Attributes that specify the supported Regulation Domains.')
coDot11PhyAntennasListGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 8744, 5, 4, 6, 1, 11)).setObjects(("COLUBRIS-802DOT11-MIB", "coDot11SupportedTxAntenna"), ("COLUBRIS-802DOT11-MIB", "coDot11SupportedRxAntenna"), ("COLUBRIS-802DOT11-MIB", "coDot11DiversitySelectionRx"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    coDot11PhyAntennasListGroup = coDot11PhyAntennasListGroup.setStatus('current')
if mibBuilder.loadTexts: coDot11PhyAntennasListGroup.setDescription('Antennas list attributes.')
coDot11PhyRateGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 8744, 5, 4, 6, 1, 12)).setObjects(("COLUBRIS-802DOT11-MIB", "coDot11SupportedDataRatesTxValue"), ("COLUBRIS-802DOT11-MIB", "coDot11SupportedDataRatesRxValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    coDot11PhyRateGroup = coDot11PhyRateGroup.setStatus('current')
if mibBuilder.loadTexts: coDot11PhyRateGroup.setDescription('Attributes for Data Rates for IEEE 802.11.')
coDot11CountersGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 8744, 5, 4, 6, 1, 13)).setObjects(("COLUBRIS-802DOT11-MIB", "coDot11TransmittedFragmentCount"), ("COLUBRIS-802DOT11-MIB", "coDot11MulticastTransmittedFrameCount"), ("COLUBRIS-802DOT11-MIB", "coDot11FailedCount"), ("COLUBRIS-802DOT11-MIB", "coDot11FrameDuplicateCount"), ("COLUBRIS-802DOT11-MIB", "coDot11RTSSuccessCount"), ("COLUBRIS-802DOT11-MIB", "coDot11RTSFailureCount"), ("COLUBRIS-802DOT11-MIB", "coDot11ACKFailureCount"), ("COLUBRIS-802DOT11-MIB", "coDot11ReceivedFragmentCount"), ("COLUBRIS-802DOT11-MIB", "coDot11MulticastReceivedFrameCount"), ("COLUBRIS-802DOT11-MIB", "coDot11FCSErrorCount"), ("COLUBRIS-802DOT11-MIB", "coDot11WEPUndecryptableCount"), ("COLUBRIS-802DOT11-MIB", "coDot11TransmittedFrameCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    coDot11CountersGroup = coDot11CountersGroup.setStatus('current')
if mibBuilder.loadTexts: coDot11CountersGroup.setDescription('Attributes from the coDot11CountersGroup that are not described in the coDot11MACStatistics group. These objects are mandatory.')
coDot11AssociationGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 8744, 5, 4, 6, 1, 14)).setObjects(("COLUBRIS-802DOT11-MIB", "coDot11StationMACAddress"), ("COLUBRIS-802DOT11-MIB", "coDot11StationConnectTime"), ("COLUBRIS-802DOT11-MIB", "coDot11SignalLevel"), ("COLUBRIS-802DOT11-MIB", "coDot11NoiseLevel"), ("COLUBRIS-802DOT11-MIB", "coDot11SNR"), ("COLUBRIS-802DOT11-MIB", "coDot11PktsRate1"), ("COLUBRIS-802DOT11-MIB", "coDot11PktsRate2"), ("COLUBRIS-802DOT11-MIB", "coDot11PktsRate5dot5"), ("COLUBRIS-802DOT11-MIB", "coDot11PktsRate6"), ("COLUBRIS-802DOT11-MIB", "coDot11PktsRate9"), ("COLUBRIS-802DOT11-MIB", "coDot11PktsRate11"), ("COLUBRIS-802DOT11-MIB", "coDot11PktsRate12"), ("COLUBRIS-802DOT11-MIB", "coDot11PktsRate18"), ("COLUBRIS-802DOT11-MIB", "coDot11PktsRate24"), ("COLUBRIS-802DOT11-MIB", "coDot11PktsRate36"), ("COLUBRIS-802DOT11-MIB", "coDot11PktsRate48"), ("COLUBRIS-802DOT11-MIB", "coDot11PktsRate54"), ("COLUBRIS-802DOT11-MIB", "coDot11TransmitRate"), ("COLUBRIS-802DOT11-MIB", "coDot11ReceiveRate"), ("COLUBRIS-802DOT11-MIB", "coDot11InPkts"), ("COLUBRIS-802DOT11-MIB", "coDot11OutPkts"), ("COLUBRIS-802DOT11-MIB", "coDot11InOctets"), ("COLUBRIS-802DOT11-MIB", "coDot11OutOctets"), ("COLUBRIS-802DOT11-MIB", "coDot11StationSSID"), ("COLUBRIS-802DOT11-MIB", "coDot11StationName"), ("COLUBRIS-802DOT11-MIB", "coDot11StationIPAddress"), ("COLUBRIS-802DOT11-MIB", "coDot11StationVLAN"), ("COLUBRIS-802DOT11-MIB", "coDot11StationLocalInterface"), ("COLUBRIS-802DOT11-MIB", "coDot11StaHT"), ("COLUBRIS-802DOT11-MIB", "coDot11StaEncryptionType"), ("COLUBRIS-802DOT11-MIB", "coDot11PktsTxRate1"), ("COLUBRIS-802DOT11-MIB", "coDot11PktsTxRate2"), ("COLUBRIS-802DOT11-MIB", "coDot11PktsTxRate5dot5"), ("COLUBRIS-802DOT11-MIB", "coDot11PktsTxRate11"), ("COLUBRIS-802DOT11-MIB", "coDot11PktsTxRate6"), ("COLUBRIS-802DOT11-MIB", "coDot11PktsTxRate9"), ("COLUBRIS-802DOT11-MIB", "coDot11PktsTxRate12"), ("COLUBRIS-802DOT11-MIB", "coDot11PktsTxRate18"), ("COLUBRIS-802DOT11-MIB", "coDot11PktsTxRate24"), ("COLUBRIS-802DOT11-MIB", "coDot11PktsTxRate36"), ("COLUBRIS-802DOT11-MIB", "coDot11PktsTxRate48"), ("COLUBRIS-802DOT11-MIB", "coDot11PktsTxRate54"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    coDot11AssociationGroup = coDot11AssociationGroup.setStatus('current')
if mibBuilder.loadTexts: coDot11AssociationGroup.setDescription('The AP object class provides the necessary support at the Access Point to manage the association table.')
coDot11AssociationConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 8744, 5, 4, 6, 1, 15)).setObjects(("COLUBRIS-802DOT11-MIB", "coDot11AssociationNotificationEnabled"), ("COLUBRIS-802DOT11-MIB", "coDot11AssociationNotificationInterval"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    coDot11AssociationConfigGroup = coDot11AssociationConfigGroup.setStatus('current')
if mibBuilder.loadTexts: coDot11AssociationConfigGroup.setDescription('The AP object class provides the necessary support at the Access Point to manage the association table. Not supported on the M111.')
coDot11ScanGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 8744, 5, 4, 6, 1, 16)).setObjects(("COLUBRIS-802DOT11-MIB", "coDot11ScanMacAddress"), ("COLUBRIS-802DOT11-MIB", "coDot11ScanChannel"), ("COLUBRIS-802DOT11-MIB", "coDot11ScanSSID"), ("COLUBRIS-802DOT11-MIB", "coDot11ScanSignalLevel"), ("COLUBRIS-802DOT11-MIB", "coDot11ScanNoiseLevel"), ("COLUBRIS-802DOT11-MIB", "coDot11ScanSNR"), ("COLUBRIS-802DOT11-MIB", "coDot11ScanStatus"), ("COLUBRIS-802DOT11-MIB", "coDot11ScanPHYType"), ("COLUBRIS-802DOT11-MIB", "coDot11ScanInactivityTime"), ("COLUBRIS-802DOT11-MIB", "coDot11ScanNetworkType"), ("COLUBRIS-802DOT11-MIB", "coDot11ScanSecurity"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    coDot11ScanGroup = coDot11ScanGroup.setStatus('current')
if mibBuilder.loadTexts: coDot11ScanGroup.setDescription('The AP object class provides the necessary support at the Access Point to manage the scan table. ')
coDot11ScanConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 8744, 5, 4, 6, 1, 17)).setObjects(("COLUBRIS-802DOT11-MIB", "coDot11ScanEnabled"), ("COLUBRIS-802DOT11-MIB", "coDot11ScanPeriodicity"), ("COLUBRIS-802DOT11-MIB", "coDot11ScanAuthorizedListURL"), ("COLUBRIS-802DOT11-MIB", "coDot11UnauthorizedAPNotificationEnabled"), ("COLUBRIS-802DOT11-MIB", "coDot11UnauthorizedAPNotificationInterval"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    coDot11ScanConfigGroup = coDot11ScanConfigGroup.setStatus('current')
if mibBuilder.loadTexts: coDot11ScanConfigGroup.setDescription('The AP object class provides the necessary support at the Access Point to manage the scan table. Not supported on the M111.')
coDot11WDSComplianceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 8744, 5, 4, 6, 1, 18)).setObjects(("COLUBRIS-802DOT11-MIB", "coDot11WDSPortMacAddress"), ("COLUBRIS-802DOT11-MIB", "coDot11WDSPortCurrentRate"), ("COLUBRIS-802DOT11-MIB", "coDot11WDSPortSNRLevel"), ("COLUBRIS-802DOT11-MIB", "coDot11WDSPortTxPackets"), ("COLUBRIS-802DOT11-MIB", "coDot11WDSPortTxDropped"), ("COLUBRIS-802DOT11-MIB", "coDot11WDSPortTxErrors"), ("COLUBRIS-802DOT11-MIB", "coDot11WDSPortRxPackets"), ("COLUBRIS-802DOT11-MIB", "coDot11WDSPortRxDropped"), ("COLUBRIS-802DOT11-MIB", "coDot11WDSPortRxErrors"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    coDot11WDSComplianceGroup = coDot11WDSComplianceGroup.setStatus('current')
if mibBuilder.loadTexts: coDot11WDSComplianceGroup.setDescription('Attributes that configure the WDS table.')
coDot11NotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 8744, 5, 4, 6, 1, 19)).setObjects(("COLUBRIS-802DOT11-MIB", "coDot11SNRLevelNotification"), ("COLUBRIS-802DOT11-MIB", "coDot11AssociationNotification"), ("COLUBRIS-802DOT11-MIB", "coDot11UnauthorizedAPNotification"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    coDot11NotificationGroup = coDot11NotificationGroup.setStatus('current')
if mibBuilder.loadTexts: coDot11NotificationGroup.setDescription('A collection of supported notifications.')
coDot11RSNBase = ObjectGroup((1, 3, 6, 1, 4, 1, 8744, 5, 4, 6, 1, 20)).setObjects(("COLUBRIS-802DOT11-MIB", "coDot11RSNAStatsVersion"), ("COLUBRIS-802DOT11-MIB", "coDot11RSNAStatsSelectedPairwiseCipher"), ("COLUBRIS-802DOT11-MIB", "coDot11RSNAStatsTKIPICVErrors"), ("COLUBRIS-802DOT11-MIB", "coDot11RSNAStatsTKIPLocalMICFailures"), ("COLUBRIS-802DOT11-MIB", "coDot11RSNAStatsTKIPRemoteMICFailures"), ("COLUBRIS-802DOT11-MIB", "coDot11RSNAStatsTKIPCounterMeasuresInvoked"), ("COLUBRIS-802DOT11-MIB", "coDot11RSNAStatsCCMPFormatErrors"), ("COLUBRIS-802DOT11-MIB", "coDot11RSNAStatsCCMPReplays"), ("COLUBRIS-802DOT11-MIB", "coDot11RSNAStatsCCMPDecryptErrors"), ("COLUBRIS-802DOT11-MIB", "coDot11RSNAStatsTKIPReplays"), ("COLUBRIS-802DOT11-MIB", "coDot11RSNAStats4WayHandshakeFailures"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    coDot11RSNBase = coDot11RSNBase.setStatus('current')
if mibBuilder.loadTexts: coDot11RSNBase.setDescription('The coDot11RSNBase object class provides the necessary support for managing RSNA functionality in the STA')
coDot11PhyOFDMComplianceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 8744, 5, 4, 6, 1, 21)).setObjects(("COLUBRIS-802DOT11-MIB", "coDot11CurrentFrequency"), ("COLUBRIS-802DOT11-MIB", "coDot11TIThreshold"), ("COLUBRIS-802DOT11-MIB", "coDot11FrequencyBandsSupported"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    coDot11PhyOFDMComplianceGroup = coDot11PhyOFDMComplianceGroup.setStatus('current')
if mibBuilder.loadTexts: coDot11PhyOFDMComplianceGroup.setDescription('Attributes that configure the OFDM for IEEE 802.11.')
coDot11StationHTGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 8744, 5, 4, 6, 1, 22)).setObjects(("COLUBRIS-802DOT11-MIB", "coDot11StaTransmitMCS"), ("COLUBRIS-802DOT11-MIB", "coDot11StaReceiveMCS"), ("COLUBRIS-802DOT11-MIB", "coDot11StaChannelWidth"), ("COLUBRIS-802DOT11-MIB", "coDot11StaShortGI"), ("COLUBRIS-802DOT11-MIB", "coDot11StaPktsTxMCS0"), ("COLUBRIS-802DOT11-MIB", "coDot11StaPktsTxMCS1"), ("COLUBRIS-802DOT11-MIB", "coDot11StaPktsTxMCS2"), ("COLUBRIS-802DOT11-MIB", "coDot11StaPktsTxMCS3"), ("COLUBRIS-802DOT11-MIB", "coDot11StaPktsTxMCS4"), ("COLUBRIS-802DOT11-MIB", "coDot11StaPktsTxMCS5"), ("COLUBRIS-802DOT11-MIB", "coDot11StaPktsTxMCS6"), ("COLUBRIS-802DOT11-MIB", "coDot11StaPktsTxMCS7"), ("COLUBRIS-802DOT11-MIB", "coDot11StaPktsTxMCS8"), ("COLUBRIS-802DOT11-MIB", "coDot11StaPktsTxMCS9"), ("COLUBRIS-802DOT11-MIB", "coDot11StaPktsTxMCS10"), ("COLUBRIS-802DOT11-MIB", "coDot11StaPktsTxMCS11"), ("COLUBRIS-802DOT11-MIB", "coDot11StaPktsTxMCS12"), ("COLUBRIS-802DOT11-MIB", "coDot11StaPktsTxMCS13"), ("COLUBRIS-802DOT11-MIB", "coDot11StaPktsTxMCS14"), ("COLUBRIS-802DOT11-MIB", "coDot11StaPktsTxMCS15"), ("COLUBRIS-802DOT11-MIB", "coDot11StaPktsRxMCS0"), ("COLUBRIS-802DOT11-MIB", "coDot11StaPktsRxMCS1"), ("COLUBRIS-802DOT11-MIB", "coDot11StaPktsRxMCS2"), ("COLUBRIS-802DOT11-MIB", "coDot11StaPktsRxMCS3"), ("COLUBRIS-802DOT11-MIB", "coDot11StaPktsRxMCS4"), ("COLUBRIS-802DOT11-MIB", "coDot11StaPktsRxMCS5"), ("COLUBRIS-802DOT11-MIB", "coDot11StaPktsRxMCS6"), ("COLUBRIS-802DOT11-MIB", "coDot11StaPktsRxMCS7"), ("COLUBRIS-802DOT11-MIB", "coDot11StaPktsRxMCS8"), ("COLUBRIS-802DOT11-MIB", "coDot11StaPktsRxMCS9"), ("COLUBRIS-802DOT11-MIB", "coDot11StaPktsRxMCS10"), ("COLUBRIS-802DOT11-MIB", "coDot11StaPktsRxMCS11"), ("COLUBRIS-802DOT11-MIB", "coDot11StaPktsRxMCS12"), ("COLUBRIS-802DOT11-MIB", "coDot11StaPktsRxMCS13"), ("COLUBRIS-802DOT11-MIB", "coDot11StaPktsRxMCS14"), ("COLUBRIS-802DOT11-MIB", "coDot11StaPktsRxMCS15"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    coDot11StationHTGroup = coDot11StationHTGroup.setStatus('current')
if mibBuilder.loadTexts: coDot11StationHTGroup.setDescription('The AP object class provides the necessary support at the Access Point to manage the station HT table.')
coDot11PhyHTComplianceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 8744, 5, 4, 6, 1, 23)).setObjects(("COLUBRIS-802DOT11-MIB", "coDot11FortyMHzOperationImplemented"), ("COLUBRIS-802DOT11-MIB", "coDot11FortyMHzOperationEnabled"), ("COLUBRIS-802DOT11-MIB", "coDot11CurrentPrimaryChannel"), ("COLUBRIS-802DOT11-MIB", "coDot11CurrentSecondaryChannel"), ("COLUBRIS-802DOT11-MIB", "coDot11GreenfieldOptionImplemented"), ("COLUBRIS-802DOT11-MIB", "coDot11GreenfieldOptionEnabled"), ("COLUBRIS-802DOT11-MIB", "coDot11ShortGIOptionInTwentyImplemented"), ("COLUBRIS-802DOT11-MIB", "coDot11ShortGIOptionInTwentyEnabled"), ("COLUBRIS-802DOT11-MIB", "coDot11ShortGIOptionInFortyImplemented"), ("COLUBRIS-802DOT11-MIB", "coDot11ShortGIOptionInFortyEnabled"), ("COLUBRIS-802DOT11-MIB", "coDot11HighestSupportedDataRate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    coDot11PhyHTComplianceGroup = coDot11PhyHTComplianceGroup.setStatus('current')
if mibBuilder.loadTexts: coDot11PhyHTComplianceGroup.setDescription('Attributes that configure the HT for IEEE 802.11.')
coDot11APBaseGroupExt = ObjectGroup((1, 3, 6, 1, 4, 1, 8744, 5, 4, 6, 1, 24)).setObjects(("COLUBRIS-802DOT11-MIB", "coDot11RelayBetweenStation"), ("COLUBRIS-802DOT11-MIB", "coDot11PrivacyOptionImplemented"), ("COLUBRIS-802DOT11-MIB", "coDot11RSNAOptionImplemented"), ("COLUBRIS-802DOT11-MIB", "coDot11BeaconPeriod"), ("COLUBRIS-802DOT11-MIB", "coDot11DTIMPeriod"), ("COLUBRIS-802DOT11-MIB", "coDot11NumberOfUsers"), ("COLUBRIS-802DOT11-MIB", "coDot11AddToAssociationNotification"), ("COLUBRIS-802DOT11-MIB", "coDot11PhyTxPowerAdminLevel"), ("COLUBRIS-802DOT11-MIB", "coDot11PhyTxPowerOperLevel"), ("COLUBRIS-802DOT11-MIB", "coDot11BSSID"), ("COLUBRIS-802DOT11-MIB", "coDot11HighThroughputOptionImplemented"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    coDot11APBaseGroupExt = coDot11APBaseGroupExt.setStatus('current')
if mibBuilder.loadTexts: coDot11APBaseGroupExt.setDescription('The AP object class provides the necessary support at the Access Point to manage the processes in the STA such that the STA may work cooperatively as a part of an IEEE 802.11 network.')
coDot11StationDetectionGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 8744, 5, 4, 6, 1, 25)).setObjects(("COLUBRIS-802DOT11-MIB", "coDot11NbDetectedStation"), ("COLUBRIS-802DOT11-MIB", "coDot11DetStaMacAddress"), ("COLUBRIS-802DOT11-MIB", "coDot11DetStaChannel"), ("COLUBRIS-802DOT11-MIB", "coDot11DetStaSignalLevel"), ("COLUBRIS-802DOT11-MIB", "coDot11DetStaNoiseLevel"), ("COLUBRIS-802DOT11-MIB", "coDot11DetStaNbProbeReq"), ("COLUBRIS-802DOT11-MIB", "coDot11DetStaRate"), ("COLUBRIS-802DOT11-MIB", "coDot11DetStaSSID"), ("COLUBRIS-802DOT11-MIB", "coDot11DetStaTimeDiscovered"), ("COLUBRIS-802DOT11-MIB", "coDot11DetStaTimeLastSeen"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    coDot11StationDetectionGroup = coDot11StationDetectionGroup.setStatus('current')
if mibBuilder.loadTexts: coDot11StationDetectionGroup.setDescription('The AP object class provides the necessary support at the Access Point to manage the station detection information.')
mibBuilder.exportSymbols("COLUBRIS-802DOT11-MIB", coDot11StaPktsTxMCS14=coDot11StaPktsTxMCS14, coDot11ap=coDot11ap, coDot11ScanPHYType=coDot11ScanPHYType, coDot11SupportedDataRatesRxIndex=coDot11SupportedDataRatesRxIndex, coDot11ScanInactivityTime=coDot11ScanInactivityTime, coDot11StaPktsRxMCS14=coDot11StaPktsRxMCS14, coDot11phy=coDot11phy, coDot11ScanEnabled=coDot11ScanEnabled, coDot11StaPktsTxMCS1=coDot11StaPktsTxMCS1, coDot11CCAModeSupported=coDot11CCAModeSupported, coDot11FCSErrorCount=coDot11FCSErrorCount, coDot11PhyAntennaTable=coDot11PhyAntennaTable, coDot11AssociationNotification=coDot11AssociationNotification, coDot11DetStaSignalLevel=coDot11DetStaSignalLevel, coDot11ScanSNR=coDot11ScanSNR, coDot11PhyHTComplianceGroup=coDot11PhyHTComplianceGroup, coDot11StaPktsTxMCS12=coDot11StaPktsTxMCS12, coDot11ScanGroup=coDot11ScanGroup, coDot11StaPktsRxMCS9=coDot11StaPktsRxMCS9, coDot11FragmentationThreshold=coDot11FragmentationThreshold, coDot11StaEncryptionType=coDot11StaEncryptionType, coDot11SupportedDataRatesRxTable=coDot11SupportedDataRatesRxTable, coDot11PhyOperationTable=coDot11PhyOperationTable, coDot11RSNAStatsSelectedPairwiseCipher=coDot11RSNAStatsSelectedPairwiseCipher, coDot11BeaconPeriod=coDot11BeaconPeriod, coDot11CurrentFrequency=coDot11CurrentFrequency, coDot11AuthenticationAlgorithmsEntry=coDot11AuthenticationAlgorithmsEntry, coDot11AuthenticationAlgorithmsTable=coDot11AuthenticationAlgorithmsTable, coDot11RSNAStatsVersion=coDot11RSNAStatsVersion, coDot11ScanNoiseLevel=coDot11ScanNoiseLevel, coDot11PhyOperStatus=coDot11PhyOperStatus, coDot11Compliances=coDot11Compliances, coDot11CurrentChannel=coDot11CurrentChannel, coDot11SNRLevelNotification=coDot11SNRLevelNotification, coDot11WEPDefaultKey4Value=coDot11WEPDefaultKey4Value, coDot11PhyOFDMTable=coDot11PhyOFDMTable, coDot11SmtAuthenticationAlgorithmsGroup=coDot11SmtAuthenticationAlgorithmsGroup, coDot11FrequencyBandsSupported=coDot11FrequencyBandsSupported, coDot11DiversitySelectionRx=coDot11DiversitySelectionRx, coDot11ScanConfigGroup=coDot11ScanConfigGroup, coDot11PktsRate1=coDot11PktsRate1, coDot11AssociationEntry=coDot11AssociationEntry, coDot11DetStaMacAddress=coDot11DetStaMacAddress, coDot11RTSFailureCount=coDot11RTSFailureCount, coDot11StaPktsRxMCS15=coDot11StaPktsRxMCS15, coDot11PktsRate24=coDot11PktsRate24, coDot11RegDomainsSupportedTable=coDot11RegDomainsSupportedTable, coDot11CountersEntry=coDot11CountersEntry, coDot11PhyConfigEntry=coDot11PhyConfigEntry, coDot11AuthenticationAlgorithm=coDot11AuthenticationAlgorithm, coDot11StaPktsRxMCS10=coDot11StaPktsRxMCS10, coDot11StaPktsRxMCS6=coDot11StaPktsRxMCS6, coDot11CurrentOperPHYType=coDot11CurrentOperPHYType, coDot11ScanSecurity=coDot11ScanSecurity, coDot11StaPktsTxMCS15=coDot11StaPktsTxMCS15, coDot11StaShortGI=coDot11StaShortGI, coDot11WEPDefaultKeysTable=coDot11WEPDefaultKeysTable, coDot11PhyOperationEntry=coDot11PhyOperationEntry, coDot11RSNAStats4WayHandshakeFailures=coDot11RSNAStats4WayHandshakeFailures, coDot11LongRetryLimit=coDot11LongRetryLimit, coDot11PrivacyTable=coDot11PrivacyTable, coDot11DetectedStationTable=coDot11DetectedStationTable, colubris802dot11=colubris802dot11, coDot11CurrentOperFrequency=coDot11CurrentOperFrequency, coDot11PktsRate18=coDot11PktsRate18, coDot11OperationTable=coDot11OperationTable, coDot11PrivacyOptionImplemented=coDot11PrivacyOptionImplemented, coDot11PhyTxPowerAdminLevel=coDot11PhyTxPowerAdminLevel, coDot11Groups=coDot11Groups, coDot11StaPktsRxMCS13=coDot11StaPktsRxMCS13, coDot11StationIPAddress=coDot11StationIPAddress, coDot11StationMACAddress=coDot11StationMACAddress, coDot11AntennasListTable=coDot11AntennasListTable, coDot11AssociationNotificationEnabled=coDot11AssociationNotificationEnabled, coDot11StaPktsRxMCS2=coDot11StaPktsRxMCS2, coDot11PrivacyInvoked=coDot11PrivacyInvoked, coDot11RadioType=coDot11RadioType, coDot11StaPktsRxMCS4=coDot11StaPktsRxMCS4, coDot11PhyHTEntry=coDot11PhyHTEntry, coDot11ManagementMIBNotificationPrefix=coDot11ManagementMIBNotificationPrefix, coDot11RSNAStatsCCMPReplays=coDot11RSNAStatsCCMPReplays, coDot11BSSID=coDot11BSSID, coDot11GreenfieldOptionImplemented=coDot11GreenfieldOptionImplemented, coDot11StaPktsTxMCS5=coDot11StaPktsTxMCS5, coDot11ManufacturerID=coDot11ManufacturerID, coDot11ShortRetryLimit=coDot11ShortRetryLimit, coDot11StaPktsTxMCS4=coDot11StaPktsTxMCS4, coDot11MACBaseGroup=coDot11MACBaseGroup, coDot11PHYType=coDot11PHYType, coDot11StaPktsRxMCS7=coDot11StaPktsRxMCS7, coDot11FrameDuplicateCount=coDot11FrameDuplicateCount, coDot11CurrentPrimaryChannel=coDot11CurrentPrimaryChannel, coDot11TransmittedFrameCount=coDot11TransmittedFrameCount, coDot11RSNAStatsTKIPLocalMICFailures=coDot11RSNAStatsTKIPLocalMICFailures, coDot11AdminMinimumDataRate=coDot11AdminMinimumDataRate, coDot11CountryCode=coDot11CountryCode, coDot11mac=coDot11mac, coDot11ScanSignalLevel=coDot11ScanSignalLevel, coDot11SupportedDataRatesTxValue=coDot11SupportedDataRatesTxValue, coDot11ScanAuthorizedListURL=coDot11ScanAuthorizedListURL, coDot11WDSPortMacAddress=coDot11WDSPortMacAddress, coDot11RSNAStatsTKIPICVErrors=coDot11RSNAStatsTKIPICVErrors, coDot11RSNAStatsTKIPRemoteMICFailures=coDot11RSNAStatsTKIPRemoteMICFailures, coDot11PktsTxRate6=coDot11PktsTxRate6, coDot11MaxTransmitMSDULifetime=coDot11MaxTransmitMSDULifetime, coDot11CurrentCCAMode=coDot11CurrentCCAMode, coDot11StationName=coDot11StationName, coDot11PktsTxRate24=coDot11PktsTxRate24, coDot11PhyRegDomainsSupportGroup=coDot11PhyRegDomainsSupportGroup, coDot11ShortGIOptionInTwentyImplemented=coDot11ShortGIOptionInTwentyImplemented, coDot11SupportedRxAntenna=coDot11SupportedRxAntenna, PYSNMP_MODULE_ID=colubris802dot11, coDot11ShortGIOptionInFortyImplemented=coDot11ShortGIOptionInFortyImplemented, coDot11ShortGIOptionInFortyEnabled=coDot11ShortGIOptionInFortyEnabled, coDot11AuthenticationAlgorithmsEnable=coDot11AuthenticationAlgorithmsEnable, coDot11WEPDefaultKeyID=coDot11WEPDefaultKeyID, coDot11CurrentTxAntenna=coDot11CurrentTxAntenna, coDot11RSNAStatsCCMPDecryptErrors=coDot11RSNAStatsCCMPDecryptErrors, coDot11PktsTxRate36=coDot11PktsTxRate36, coDot11StaReceiveMCS=coDot11StaReceiveMCS, coDot11AssociationGroup=coDot11AssociationGroup, coDot11TransmittedFragmentCount=coDot11TransmittedFragmentCount, coDot11StaPktsRxMCS3=coDot11StaPktsRxMCS3, coDot11SignalLevel=coDot11SignalLevel, coDot11DetStaSSID=coDot11DetStaSSID, coDot11ReceiveRate=coDot11ReceiveRate, coDot11InOctets=coDot11InOctets, coDot11AutoChannelEnabled=coDot11AutoChannelEnabled, coDot11PhyOFDMComplianceGroup=coDot11PhyOFDMComplianceGroup, coDot11WDSPortRxPackets=coDot11WDSPortRxPackets, WEPKeytype=WEPKeytype, coDot11StaPktsRxMCS12=coDot11StaPktsRxMCS12, coDot11PktsTxRate1=coDot11PktsTxRate1, coDot11PktsTxRate48=coDot11PktsTxRate48, coDot11RadioEnabled=coDot11RadioEnabled, coDot11StaPktsTxMCS10=coDot11StaPktsTxMCS10, coDot11StaChannelWidth=coDot11StaChannelWidth, coDot11PktsRate11=coDot11PktsRate11, coDot11StaPktsTxMCS7=coDot11StaPktsTxMCS7, coDot11PhyDSSSEntry=coDot11PhyDSSSEntry, coDot11ScanPeriodicity=coDot11ScanPeriodicity, coDot11SupportedTxAntenna=coDot11SupportedTxAntenna, coDot11PhyHTTable=coDot11PhyHTTable, coDot11StaPktsTxMCS0=coDot11StaPktsTxMCS0, coDot11APBaseGroup=coDot11APBaseGroup, coDot11CountersGroup=coDot11CountersGroup, coDot11SupportedDataRatesTxEntry=coDot11SupportedDataRatesTxEntry, coDot11HighestSupportedDataRate=coDot11HighestSupportedDataRate, coDot11AdminMaximumDataRate=coDot11AdminMaximumDataRate, coDot11WDSPortIndex=coDot11WDSPortIndex, coDot11StaPktsTxMCS3=coDot11StaPktsTxMCS3, coDot11ReceivedFragmentCount=coDot11ReceivedFragmentCount, coDot11StaPktsTxMCS2=coDot11StaPktsTxMCS2, coDot11StationHTTable=coDot11StationHTTable, coDot11StaPktsTxMCS11=coDot11StaPktsTxMCS11, coDot11PktsRate5dot5=coDot11PktsRate5dot5, coDot11WEPDefaultKey3Value=coDot11WEPDefaultKey3Value, coDot11PktsRate2=coDot11PktsRate2, coDot11DetStaRate=coDot11DetStaRate, coDot11RelayBetweenStation=coDot11RelayBetweenStation, coDot11UnauthorizedAPNotificationInterval=coDot11UnauthorizedAPNotificationInterval, coDot11StaTransmitMCS=coDot11StaTransmitMCS, coDot11WDSPortRxErrors=coDot11WDSPortRxErrors, coDot11AutoPowerInterval=coDot11AutoPowerInterval, coDot11MACStatisticsGroup=coDot11MACStatisticsGroup, coDot11SNRLevelNotificationEnabled=coDot11SNRLevelNotificationEnabled, coDot11StationDetectionState=coDot11StationDetectionState, coDot11StationConnectTime=coDot11StationConnectTime, coDot11PktsRate48=coDot11PktsRate48, coDot11PhyAntennaEntry=coDot11PhyAntennaEntry, coDot11RSNBase=coDot11RSNBase, coDot11FailedCount=coDot11FailedCount, coDot11WDSPortTxPackets=coDot11WDSPortTxPackets, coDot11AssociationConfigGroup=coDot11AssociationConfigGroup, coDot11AddToAssociationNotification=coDot11AddToAssociationNotification, coDot11RTSThreshold=coDot11RTSThreshold, coDot11StaPktsTxMCS8=coDot11StaPktsTxMCS8, coDot11ExcludeUnencrypted=coDot11ExcludeUnencrypted, coDot11MaxReceiveLifetime=coDot11MaxReceiveLifetime, coDot11RegDomainsSupportIndex=coDot11RegDomainsSupportIndex, coDot11TempType=coDot11TempType, coDot11PhyConfigGroup=coDot11PhyConfigGroup, coDot11GreenfieldOptionEnabled=coDot11GreenfieldOptionEnabled, coDot11NbDetectedStation=coDot11NbDetectedStation, coDot11ScanStatus=coDot11ScanStatus, coDot11DetectedStationEntry=coDot11DetectedStationEntry, coDot11WDSPortTxDropped=coDot11WDSPortTxDropped, coDot11AntennaListIndex=coDot11AntennaListIndex, coDot11PktsTxRate9=coDot11PktsTxRate9, coDot11StaPktsRxMCS5=coDot11StaPktsRxMCS5, coDot11ShortGIOptionInTwentyEnabled=coDot11ShortGIOptionInTwentyEnabled, coDot11StationHTGroup=coDot11StationHTGroup, coDot11AssociationTable=coDot11AssociationTable, coDot11PktsRate12=coDot11PktsRate12, coDot11WEPICVErrorCount=coDot11WEPICVErrorCount, coDot11PktsTxRate18=coDot11PktsTxRate18, coDot11RSNAStatsCCMPFormatErrors=coDot11RSNAStatsCCMPFormatErrors, coDot11WDSPortEntry=coDot11WDSPortEntry, coDot11PhyConfigTable=coDot11PhyConfigTable, coDot11AutoPowerEnabled=coDot11AutoPowerEnabled, coDot11MACAddress=coDot11MACAddress, coDot11Conformance=coDot11Conformance, coDot11InPkts=coDot11InPkts, coDot11PhyRateGroup=coDot11PhyRateGroup, coDot11WEPUndecryptableCount=coDot11WEPUndecryptableCount, coDot11APPrivacyGroup=coDot11APPrivacyGroup, coDot11StaPktsTxMCS6=coDot11StaPktsTxMCS6, coDot11WDSPortCurrentRate=coDot11WDSPortCurrentRate, coDot11PktsRate36=coDot11PktsRate36, coDot11MulticastTransmittedFrameCount=coDot11MulticastTransmittedFrameCount, coDot11PhyConfigComplianceGroup=coDot11PhyConfigComplianceGroup, coDot11RSNAStatsEntry=coDot11RSNAStatsEntry, coDot11SNRLevelNotificationInterval=coDot11SNRLevelNotificationInterval, coDot11ScanSSID=coDot11ScanSSID, coDot11RSNAEnabled=coDot11RSNAEnabled, coDot11SNR=coDot11SNR, coDot11NoiseLevel=coDot11NoiseLevel, coDot11WDSPortTxErrors=coDot11WDSPortTxErrors, coDot11StationHTEntry=coDot11StationHTEntry, coDot11FortyMHzOperationImplemented=coDot11FortyMHzOperationImplemented, coDot11UnauthorizedAPNotificationEnabled=coDot11UnauthorizedAPNotificationEnabled, coDot11DetStaNbProbeReq=coDot11DetStaNbProbeReq, coDot11NotificationGroup=coDot11NotificationGroup, coDot11UnauthorizedAPNotification=coDot11UnauthorizedAPNotification, coDot11PrivacyEntry=coDot11PrivacyEntry, coDot11WEPDefaultKeysEntry=coDot11WEPDefaultKeysEntry, coDot11PhyDSSSComplianceGroup=coDot11PhyDSSSComplianceGroup, coDot11PktsRate54=coDot11PktsRate54, coDot11RegDomainsSupportedEntry=coDot11RegDomainsSupportedEntry, coDot11RSNCompliance=coDot11RSNCompliance, coDot11SupportedDataRatesTxIndex=coDot11SupportedDataRatesTxIndex, coDot11PktsTxRate54=coDot11PktsTxRate54, coDot11Sensitivity=coDot11Sensitivity, coDot11HighThroughputOptionImplemented=coDot11HighThroughputOptionImplemented, coDot11CurrentRxAntenna=coDot11CurrentRxAntenna, coDot11PhyOFDMEntry=coDot11PhyOFDMEntry, coDot11StationVLAN=coDot11StationVLAN, coDot11ScanEntry=coDot11ScanEntry, coDot11OutPkts=coDot11OutPkts, coDot11StaPktsTxMCS9=coDot11StaPktsTxMCS9, coDot11ScanChannel=coDot11ScanChannel, coDot11MultipleRetryCount=coDot11MultipleRetryCount, coDot11CurrentRegDomain=coDot11CurrentRegDomain, coDot11WEPExcludedCount=coDot11WEPExcludedCount, coDot11AccessPointConfigEntry=coDot11AccessPointConfigEntry, coDot11WDSPortSNRLevel=coDot11WDSPortSNRLevel, coDot11AssociationNotificationInterval=coDot11AssociationNotificationInterval, coDot11StaPktsRxMCS0=coDot11StaPktsRxMCS0, coDot11PktsRate9=coDot11PktsRate9, coDot11OperationEntry=coDot11OperationEntry, coDot11MulticastReceivedFrameCount=coDot11MulticastReceivedFrameCount, coDot11AssociationIndex=coDot11AssociationIndex, coDot11PktsTxRate11=coDot11PktsTxRate11, coDot11StaPktsRxMCS11=coDot11StaPktsRxMCS11)
mibBuilder.exportSymbols("COLUBRIS-802DOT11-MIB", coDot11StationDetectionGroup=coDot11StationDetectionGroup, coDot11APBaseGroupExt=coDot11APBaseGroupExt, coDot11AuthenticationAlgorithmsIndex=coDot11AuthenticationAlgorithmsIndex, coDot11ACKFailureCount=coDot11ACKFailureCount, coDot11ScanMacAddress=coDot11ScanMacAddress, coDot11CountersTable=coDot11CountersTable, coDot11PhyAdminStatus=coDot11PhyAdminStatus, coDot11PhyTxPowerOperLevel=coDot11PhyTxPowerOperLevel, coDot11Compliance=coDot11Compliance, coDot11SupportedDataRatesTxTable=coDot11SupportedDataRatesTxTable, coDot11RSNAStatsTKIPReplays=coDot11RSNAStatsTKIPReplays, coDot11RSNAOptionImplemented=coDot11RSNAOptionImplemented, coDot11WDSPortTable=coDot11WDSPortTable, coDot11TIThreshold=coDot11TIThreshold, coDot11DetStaChannel=coDot11DetStaChannel, coDot11DiversitySupport=coDot11DiversitySupport, coDot11RTSSuccessCount=coDot11RTSSuccessCount, coDot11WEPDefaultKey2Value=coDot11WEPDefaultKey2Value, coDot11MinimumSNRLevel=coDot11MinimumSNRLevel, coDot11PktsTxRate5dot5=coDot11PktsTxRate5dot5, coDot11DetStaIndex=coDot11DetStaIndex, coDot11PktsTxRate12=coDot11PktsTxRate12, coDot11RetryCount=coDot11RetryCount, coDot11WDSPortRxDropped=coDot11WDSPortRxDropped, coDot11CurrentSecondaryChannel=coDot11CurrentSecondaryChannel, coDot11ScanTable=coDot11ScanTable, coDot11PhyDSSSTable=coDot11PhyDSSSTable, coDot11RSNAStatsTKIPCounterMeasuresInvoked=coDot11RSNAStatsTKIPCounterMeasuresInvoked, coDot11TransmitRate=coDot11TransmitRate, coDot11StaHT=coDot11StaHT, coDot11ProductID=coDot11ProductID, coDot11OutOctets=coDot11OutOctets, coDot11StaPktsRxMCS1=coDot11StaPktsRxMCS1, coDot11SupportedDataRatesRxValue=coDot11SupportedDataRatesRxValue, coDot11FortyMHzOperationEnabled=coDot11FortyMHzOperationEnabled, coDot11PhyAntennasListGroup=coDot11PhyAntennasListGroup, coDot11StaPktsTxMCS13=coDot11StaPktsTxMCS13, coDot11ScanNetworkType=coDot11ScanNetworkType, coDot11WEPDefaultKey1Value=coDot11WEPDefaultKey1Value, coDot11ComplianceExt=coDot11ComplianceExt, coDot11RegDomainsSupportValue=coDot11RegDomainsSupportValue, coDot11PhyAntennaComplianceGroup=coDot11PhyAntennaComplianceGroup, coDot11StationSSID=coDot11StationSSID, coDot11WDSComplianceGroup=coDot11WDSComplianceGroup, coDot11NumberOfUsers=coDot11NumberOfUsers, coDot11DetStaTimeDiscovered=coDot11DetStaTimeDiscovered, coDot11AntennasListEntry=coDot11AntennasListEntry, coDot11StationLocalInterface=coDot11StationLocalInterface, coDot11AutoChannelInterval=coDot11AutoChannelInterval, coDot11StaPktsRxMCS8=coDot11StaPktsRxMCS8, coDot11RSNAStatsTable=coDot11RSNAStatsTable, coDot11CurrentSNRLevel=coDot11CurrentSNRLevel, coDot11ScanIndex=coDot11ScanIndex, coDot11ManagementMIBNotifications=coDot11ManagementMIBNotifications, coDot11AccessPointConfigTable=coDot11AccessPointConfigTable, coDot11OperatingMode=coDot11OperatingMode, coDot11PktsTxRate2=coDot11PktsTxRate2, coDot11DTIMPeriod=coDot11DTIMPeriod, coDot11DetStaNoiseLevel=coDot11DetStaNoiseLevel, coDot11SupportedDataRatesRxEntry=coDot11SupportedDataRatesRxEntry, coDot11DetStaTimeLastSeen=coDot11DetStaTimeLastSeen, coDot11PktsRate6=coDot11PktsRate6)
