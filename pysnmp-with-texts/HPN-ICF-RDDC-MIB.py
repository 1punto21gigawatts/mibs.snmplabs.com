#
# PySNMP MIB module HPN-ICF-RDDC-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HPN-ICF-RDDC-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:41:07 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
hpnicfCommon, = mibBuilder.importSymbols("HPN-ICF-OID-MIB", "hpnicfCommon")
ifIndex, ifDescr = mibBuilder.importSymbols("IF-MIB", "ifIndex", "ifDescr")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Bits, NotificationType, Unsigned32, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, ObjectIdentity, IpAddress, MibIdentifier, Counter64, ModuleIdentity, Counter32, iso, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "NotificationType", "Unsigned32", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "ObjectIdentity", "IpAddress", "MibIdentifier", "Counter64", "ModuleIdentity", "Counter32", "iso", "Gauge32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
hpnicfRddc = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 151))
hpnicfRddc.setRevisions(('2014-01-03 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hpnicfRddc.setRevisionsDescriptions(('Creation Date.',))
if mibBuilder.loadTexts: hpnicfRddc.setLastUpdated('201401030000Z')
if mibBuilder.loadTexts: hpnicfRddc.setOrganization('')
if mibBuilder.loadTexts: hpnicfRddc.setContactInfo('')
if mibBuilder.loadTexts: hpnicfRddc.setDescription('Redundancy group is concerned with ensuring minimal disruption to data and control planes in case of a failover. If one of the group-node in an IRF fails, the other group-node in the IRF takes over the function of the failed group-node with minimal service interruption. This module defines the objects pertaining to redundancy group(RDDC).')
hpnicfRddcNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 151, 0))
hpnicfRddcObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 151, 1))
hpnicfRddcInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 151, 1, 1))
hpnicfRddcTrapObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 151, 1, 2))
hpnicfRddcTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 151, 1, 1, 1), )
if mibBuilder.loadTexts: hpnicfRddcTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfRddcTable.setDescription('This table describes the current status of redundancy groups.')
hpnicfRddcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 151, 1, 1, 1, 1), ).setIndexNames((0, "HPN-ICF-RDDC-MIB", "hpnicfRddcGroupIdx"))
if mibBuilder.loadTexts: hpnicfRddcEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfRddcEntry.setDescription('The entry of hpnicfRddcEntry.')
hpnicfRddcGroupIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 151, 1, 1, 1, 1, 1), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfRddcGroupIdx.setStatus('current')
if mibBuilder.loadTexts: hpnicfRddcGroupIdx.setDescription('Unique identifier of this redundancy group. 0 is an invalid value.')
hpnicfRddcGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 151, 1, 1, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfRddcGroupName.setStatus('current')
if mibBuilder.loadTexts: hpnicfRddcGroupName.setDescription('Unique identifier of this redundancy group.')
hpnicfRddcPreempTimeRemain = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 151, 1, 1, 1, 1, 3), Unsigned32()).setUnits('minutes').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfRddcPreempTimeRemain.setStatus('current')
if mibBuilder.loadTexts: hpnicfRddcPreempTimeRemain.setDescription('The redundancy group should not switch back immediately when a failover is recovered. The preempt delay timer is started for waiting the failover became believable. This object contains the current preempt delay time remained when a failover is recovered.')
hpnicfRddcPreempTimeConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 151, 1, 1, 1, 1, 4), Unsigned32()).setUnits('minutes').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfRddcPreempTimeConfig.setStatus('current')
if mibBuilder.loadTexts: hpnicfRddcPreempTimeConfig.setDescription('The current preempt delay time.')
hpnicfRddcHoldTimeRemain = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 151, 1, 1, 1, 1, 5), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfRddcHoldTimeRemain.setStatus('current')
if mibBuilder.loadTexts: hpnicfRddcHoldTimeRemain.setDescription('To prevent frequent switchovers of the redundancy group, the hold-down timer started to keeping in a state for a fixed time. This object contains the current remained hold-down time when a switchover or a failover recovery occurred.')
hpnicfRddcHoldTimeConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 151, 1, 1, 1, 1, 6), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfRddcHoldTimeConfig.setStatus('current')
if mibBuilder.loadTexts: hpnicfRddcHoldTimeConfig.setDescription('The current hold-down time.')
hpnicfRddcNodeTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 151, 1, 1, 2), )
if mibBuilder.loadTexts: hpnicfRddcNodeTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfRddcNodeTable.setDescription('This table describes the current status of a redundancy group node.')
hpnicfRddcNodeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 151, 1, 1, 2, 1), ).setIndexNames((0, "HPN-ICF-RDDC-MIB", "hpnicfRddcNodeGroupIdx"), (0, "HPN-ICF-RDDC-MIB", "hpnicfRddcNodeId"))
if mibBuilder.loadTexts: hpnicfRddcNodeEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfRddcNodeEntry.setDescription('The entry of hpnicfRddcNodeEntry.')
hpnicfRddcNodeGroupIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 151, 1, 1, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: hpnicfRddcNodeGroupIdx.setStatus('current')
if mibBuilder.loadTexts: hpnicfRddcNodeGroupIdx.setDescription('Unique identifier of this redundancy group. 0 is an invalid value.')
hpnicfRddcNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 151, 1, 1, 2, 1, 2), Unsigned32())
if mibBuilder.loadTexts: hpnicfRddcNodeId.setStatus('current')
if mibBuilder.loadTexts: hpnicfRddcNodeId.setDescription('Unique identifier of this redundancy group node. 0 is an invalid value.')
hpnicfRddcNodeBindType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 151, 1, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("chassis", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfRddcNodeBindType.setStatus('current')
if mibBuilder.loadTexts: hpnicfRddcNodeBindType.setDescription('The bind type of this redundancy group node. The current version only supports binding chassis of an IRF device.')
hpnicfRddcNodeBindInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 151, 1, 1, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfRddcNodeBindInfo.setStatus('current')
if mibBuilder.loadTexts: hpnicfRddcNodeBindInfo.setDescription('The bind information of this redundancy group node. The current version only supports binding chassis of an IRF device. If the value of hpnicfRddcNodeBindType is invalid, the value of hpnicfRddcNodeBindInfo is 65535.')
hpnicfRddcNodePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 151, 1, 1, 2, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfRddcNodePriority.setStatus('current')
if mibBuilder.loadTexts: hpnicfRddcNodePriority.setDescription('The priority of this redundancy group node. The higher the value, the greater the priority.')
hpnicfRddcNodeWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 151, 1, 1, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfRddcNodeWeight.setStatus('current')
if mibBuilder.loadTexts: hpnicfRddcNodeWeight.setDescription('The current weight of this redundancy group node. The max value is 255.')
hpnicfRddcNodeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 151, 1, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("invalid", 1), ("master", 2), ("standby", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfRddcNodeStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfRddcNodeStatus.setDescription('The current status of this redundancy group node.')
hpnicfRddcNodeInfo = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 151, 1, 2, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfRddcNodeInfo.setStatus('current')
if mibBuilder.loadTexts: hpnicfRddcNodeInfo.setDescription('This object contains node identification information where the switchover occurred.')
hpnicfRddcSwitchReason = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 151, 1, 2, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfRddcSwitchReason.setStatus('current')
if mibBuilder.loadTexts: hpnicfRddcSwitchReason.setDescription('This object contains the cause for switchover.')
hpnicfRddcSwitchoverTrap = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 151, 0, 1)).setObjects(("HPN-ICF-RDDC-MIB", "hpnicfRddcGroupIdx"), ("HPN-ICF-RDDC-MIB", "hpnicfRddcGroupName"), ("HPN-ICF-RDDC-MIB", "hpnicfRddcNodeInfo"), ("HPN-ICF-RDDC-MIB", "hpnicfRddcSwitchReason"))
if mibBuilder.loadTexts: hpnicfRddcSwitchoverTrap.setStatus('current')
if mibBuilder.loadTexts: hpnicfRddcSwitchoverTrap.setDescription('Notification to signal switchover/failover.')
hpnicfRddcFailIfRecoverTrap = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 151, 0, 2)).setObjects(("HPN-ICF-RDDC-MIB", "hpnicfRddcGroupIdx"), ("HPN-ICF-RDDC-MIB", "hpnicfRddcGroupName"), ("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
if mibBuilder.loadTexts: hpnicfRddcFailIfRecoverTrap.setStatus('current')
if mibBuilder.loadTexts: hpnicfRddcFailIfRecoverTrap.setDescription('Notification to signal the failed interface recovered.')
hpnicfRddcFailIfGenerateTrap = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 151, 0, 3)).setObjects(("HPN-ICF-RDDC-MIB", "hpnicfRddcGroupIdx"), ("HPN-ICF-RDDC-MIB", "hpnicfRddcGroupName"), ("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
if mibBuilder.loadTexts: hpnicfRddcFailIfGenerateTrap.setStatus('current')
if mibBuilder.loadTexts: hpnicfRddcFailIfGenerateTrap.setDescription('Notification to signal the failed interface generated.')
mibBuilder.exportSymbols("HPN-ICF-RDDC-MIB", hpnicfRddcInfo=hpnicfRddcInfo, hpnicfRddcFailIfRecoverTrap=hpnicfRddcFailIfRecoverTrap, hpnicfRddcSwitchReason=hpnicfRddcSwitchReason, hpnicfRddcTrapObjects=hpnicfRddcTrapObjects, hpnicfRddcObjects=hpnicfRddcObjects, hpnicfRddc=hpnicfRddc, hpnicfRddcNodeGroupIdx=hpnicfRddcNodeGroupIdx, hpnicfRddcNodeBindInfo=hpnicfRddcNodeBindInfo, hpnicfRddcEntry=hpnicfRddcEntry, hpnicfRddcNodePriority=hpnicfRddcNodePriority, hpnicfRddcTable=hpnicfRddcTable, hpnicfRddcNotifications=hpnicfRddcNotifications, hpnicfRddcNodeStatus=hpnicfRddcNodeStatus, hpnicfRddcGroupIdx=hpnicfRddcGroupIdx, hpnicfRddcNodeInfo=hpnicfRddcNodeInfo, hpnicfRddcNodeBindType=hpnicfRddcNodeBindType, hpnicfRddcNodeEntry=hpnicfRddcNodeEntry, hpnicfRddcPreempTimeConfig=hpnicfRddcPreempTimeConfig, hpnicfRddcFailIfGenerateTrap=hpnicfRddcFailIfGenerateTrap, PYSNMP_MODULE_ID=hpnicfRddc, hpnicfRddcHoldTimeRemain=hpnicfRddcHoldTimeRemain, hpnicfRddcGroupName=hpnicfRddcGroupName, hpnicfRddcNodeTable=hpnicfRddcNodeTable, hpnicfRddcNodeWeight=hpnicfRddcNodeWeight, hpnicfRddcNodeId=hpnicfRddcNodeId, hpnicfRddcHoldTimeConfig=hpnicfRddcHoldTimeConfig, hpnicfRddcSwitchoverTrap=hpnicfRddcSwitchoverTrap, hpnicfRddcPreempTimeRemain=hpnicfRddcPreempTimeRemain)
