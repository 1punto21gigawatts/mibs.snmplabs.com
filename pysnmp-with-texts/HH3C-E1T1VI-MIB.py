#
# PySNMP MIB module HH3C-E1T1VI-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HH3C-E1T1VI-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:26:32 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint")
hh3cCommon, = mibBuilder.importSymbols("HH3C-OID-MIB", "hh3cCommon")
ifDescr, ifIndex = mibBuilder.importSymbols("IF-MIB", "ifDescr", "ifIndex")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, Unsigned32, MibIdentifier, ModuleIdentity, iso, IpAddress, Counter64, ObjectIdentity, Bits, TimeTicks, NotificationType, Integer32, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "Unsigned32", "MibIdentifier", "ModuleIdentity", "iso", "IpAddress", "Counter64", "ObjectIdentity", "Bits", "TimeTicks", "NotificationType", "Integer32", "Counter32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
hh3cE1T1VI = ModuleIdentity((1, 3, 6, 1, 4, 1, 25506, 2, 76))
hh3cE1T1VI.setRevisions(('2010-04-08 18:55', '2009-06-08 17:41', '2007-04-05 15:42',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hh3cE1T1VI.setRevisionsDescriptions(('To fix bugs in the MIB file.', 'To fix bugs in the MIB file.', 'Initial version of this MIB module.',))
if mibBuilder.loadTexts: hh3cE1T1VI.setLastUpdated('201004081855Z')
if mibBuilder.loadTexts: hh3cE1T1VI.setOrganization('Hangzhou H3C Technologies Co., Ltd.')
if mibBuilder.loadTexts: hh3cE1T1VI.setContactInfo('Platform Team H3C Technologies Co., Ltd. Hai-Dian District Beijing P.R. China http://www.h3c.com Zip: 100085')
if mibBuilder.loadTexts: hh3cE1T1VI.setDescription('This MIB provides E1/T1 voice interface information that are excluded by RFC 1213 and RFC 2233')
hh3cE1T1VITable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 76, 1), )
if mibBuilder.loadTexts: hh3cE1T1VITable.setStatus('current')
if mibBuilder.loadTexts: hh3cE1T1VITable.setDescription('This table contains E1/T1 voice interface information, such as the total number of using time slot.')
hh3cE1T1VIEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 76, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hh3cE1T1VIEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cE1T1VIEntry.setDescription('This entry contains E1/T1 voice interface information. The index of this Entry is ifIndex defined in ifTable of RFC1213-MIB.')
hh3cE1T1VIUsingTimeslots = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 76, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cE1T1VIUsingTimeslots.setStatus('current')
if mibBuilder.loadTexts: hh3cE1T1VIUsingTimeslots.setDescription('The total number of using time slots on this interface.')
hh3cE1T1VIUsingTimeslotsRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 76, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cE1T1VIUsingTimeslotsRatio.setStatus('current')
if mibBuilder.loadTexts: hh3cE1T1VIUsingTimeslotsRatio.setDescription('The total ratio of using time slots on this interface.')
hh3cE1T1VINotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 76, 2))
hh3cE1T1VITrapPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 76, 2, 0))
hh3cE1T1VITrapTimeSlot = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 76, 2, 0, 1)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
if mibBuilder.loadTexts: hh3cE1T1VITrapTimeSlot.setStatus('current')
if mibBuilder.loadTexts: hh3cE1T1VITrapTimeSlot.setDescription('This trap is sent to the manager under the following condidion: All the available time slots of a E1/T1 voice interface has been in use.')
hh3cE1T1VIGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 76, 3))
hh3cE1T1VITrapTimeSlotEnable = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 76, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cE1T1VITrapTimeSlotEnable.setStatus('current')
if mibBuilder.loadTexts: hh3cE1T1VITrapTimeSlotEnable.setDescription('This attribute controls whether the hh3cE1T1VITrapTimeSlot trap will be sent or not.')
mibBuilder.exportSymbols("HH3C-E1T1VI-MIB", hh3cE1T1VITrapPrefix=hh3cE1T1VITrapPrefix, hh3cE1T1VITrapTimeSlotEnable=hh3cE1T1VITrapTimeSlotEnable, hh3cE1T1VIUsingTimeslotsRatio=hh3cE1T1VIUsingTimeslotsRatio, PYSNMP_MODULE_ID=hh3cE1T1VI, hh3cE1T1VIEntry=hh3cE1T1VIEntry, hh3cE1T1VINotifications=hh3cE1T1VINotifications, hh3cE1T1VIUsingTimeslots=hh3cE1T1VIUsingTimeslots, hh3cE1T1VITable=hh3cE1T1VITable, hh3cE1T1VIGeneral=hh3cE1T1VIGeneral, hh3cE1T1VI=hh3cE1T1VI, hh3cE1T1VITrapTimeSlot=hh3cE1T1VITrapTimeSlot)
