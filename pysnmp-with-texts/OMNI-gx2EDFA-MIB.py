#
# PySNMP MIB module OMNI-gx2EDFA-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/OMNI-gx2EDFA-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:33:17 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint")
gx2EDFA, = mibBuilder.importSymbols("GX2HFC-MIB", "gx2EDFA")
gi, motproxies = mibBuilder.importSymbols("NLS-BBNIDENT-MIB", "gi", "motproxies")
trapNetworkElemModelNumber, trapPerceivedSeverity, trapNetworkElemAlarmStatus, trapNETrapLastTrapTimeStamp, trapChangedValueInteger, trapNetworkElemAvailStatus, trapNetworkElemOperState, trapChangedValueDisplayString, trapChangedObjectId, trapText, trapNetworkElemAdminState, trapIdentifier, trapNetworkElemSerialNum = mibBuilder.importSymbols("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber", "trapPerceivedSeverity", "trapNetworkElemAlarmStatus", "trapNETrapLastTrapTimeStamp", "trapChangedValueInteger", "trapNetworkElemAvailStatus", "trapNetworkElemOperState", "trapChangedValueDisplayString", "trapChangedObjectId", "trapText", "trapNetworkElemAdminState", "trapIdentifier", "trapNetworkElemSerialNum")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
sysUpTime, = mibBuilder.importSymbols("SNMPv2-MIB", "sysUpTime")
MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, Integer32, Counter64, MibIdentifier, IpAddress, Bits, Counter32, ModuleIdentity, Unsigned32, TimeTicks, Gauge32, NotificationType, iso, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "Integer32", "Counter64", "MibIdentifier", "IpAddress", "Bits", "Counter32", "ModuleIdentity", "Unsigned32", "TimeTicks", "Gauge32", "NotificationType", "iso", "NotificationType")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class Float(Counter32):
    pass

gx2EDFADescriptor = MibIdentifier((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 1))
gx2EDFAAnalogTable = MibTable((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2), )
if mibBuilder.loadTexts: gx2EDFAAnalogTable.setStatus('mandatory')
if mibBuilder.loadTexts: gx2EDFAAnalogTable.setDescription('This table contains gx2EDFA specific parameters with nominal and current values.')
gx2EDFAAnalogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1), ).setIndexNames((0, "OMNI-gx2EDFA-MIB", "edfagx2EDFAAnalogTableIndex"))
if mibBuilder.loadTexts: gx2EDFAAnalogEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gx2EDFAAnalogEntry.setDescription('This list contains digital product class and the associated RF channel parameters and descriptions.')
gx2EDFADigitalTable = MibTable((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 3), )
if mibBuilder.loadTexts: gx2EDFADigitalTable.setStatus('mandatory')
if mibBuilder.loadTexts: gx2EDFADigitalTable.setDescription('This table contains gx2EDFA specific parameters with nominal and current values.')
gx2EDFADigitalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 3, 2), ).setIndexNames((0, "OMNI-gx2EDFA-MIB", "edfagx2EDFADigitalTableIndex"))
if mibBuilder.loadTexts: gx2EDFADigitalEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gx2EDFADigitalEntry.setDescription('This list contains digital product class and the associated RF channel parameters and descriptions.')
gx2EDFAStatusTable = MibTable((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 4), )
if mibBuilder.loadTexts: gx2EDFAStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: gx2EDFAStatusTable.setDescription('This table contains gx2EDFA specific parameters with nominal and current values.')
gx2EDFAStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 4, 3), ).setIndexNames((0, "OMNI-gx2EDFA-MIB", "edfagx2EDFAStatusTableIndex"))
if mibBuilder.loadTexts: gx2EDFAStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gx2EDFAStatusEntry.setDescription('This list contains digital product class and the associated RF channel parameters and descriptions.')
gx2EDFAFactoryTable = MibTable((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 5), )
if mibBuilder.loadTexts: gx2EDFAFactoryTable.setStatus('mandatory')
if mibBuilder.loadTexts: gx2EDFAFactoryTable.setDescription('This table contains gx2EDFA specific parameters with nominal and current values.')
gx2EDFAFactoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 5, 4), ).setIndexNames((0, "OMNI-gx2EDFA-MIB", "edfagx2EDFAFactoryTableIndex"))
if mibBuilder.loadTexts: gx2EDFAFactoryEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gx2EDFAFactoryEntry.setDescription('This list contains digital product class and the associated RF channel parameters and descriptions.')
gx2EDFAHoldTimeTable = MibTable((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 6), )
if mibBuilder.loadTexts: gx2EDFAHoldTimeTable.setStatus('mandatory')
if mibBuilder.loadTexts: gx2EDFAHoldTimeTable.setDescription('This table contains gx2EDFA specific parameters with nominal and current values.')
gx2EDFAHoldTimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 6, 5), ).setIndexNames((0, "OMNI-gx2EDFA-MIB", "gx2EDFAHoldTimeTableIndex"), (0, "OMNI-gx2EDFA-MIB", "gx2EDFAHoldTimeSpecIndex"))
if mibBuilder.loadTexts: gx2EDFAHoldTimeEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gx2EDFAHoldTimeEntry.setDescription('This list contains digital product class and the associated RF channel parameters and descriptions.')
edfagx2EDFAAnalogTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfagx2EDFAAnalogTableIndex.setStatus('mandatory')
if mibBuilder.loadTexts: edfagx2EDFAAnalogTableIndex.setDescription('The value of this object identifies the network element. This index is equal to the hfcCommonTableIndex for the same element.')
edfalabelModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfalabelModTemp.setStatus('optional')
if mibBuilder.loadTexts: edfalabelModTemp.setDescription('The value of this object provides the label of the Module Temperature Analog parameter.')
edfauomModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfauomModTemp.setStatus('optional')
if mibBuilder.loadTexts: edfauomModTemp.setDescription('The value of this object provides the Unit of Measure of the Module Temperature Analog parameter.')
edfamajorHighModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 4), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfamajorHighModTemp.setStatus('mandatory')
if mibBuilder.loadTexts: edfamajorHighModTemp.setDescription('The value of this object provides the Major High alarm value of the Module Temperature Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
edfamajorLowModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 5), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfamajorLowModTemp.setStatus('mandatory')
if mibBuilder.loadTexts: edfamajorLowModTemp.setDescription('The value of this object provides the Major Low alarm value of the Module Temperature Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
edfaminorHighModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 6), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfaminorHighModTemp.setStatus('mandatory')
if mibBuilder.loadTexts: edfaminorHighModTemp.setDescription('The value of this object provides the Minor High alarm value of the Module Temperature Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
edfaminorLowModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 7), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfaminorLowModTemp.setStatus('mandatory')
if mibBuilder.loadTexts: edfaminorLowModTemp.setDescription('The value of this object provides the Minor Low alarm value of the Module Temperature Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
edfacurrentValueModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 8), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfacurrentValueModTemp.setStatus('mandatory')
if mibBuilder.loadTexts: edfacurrentValueModTemp.setDescription('The value of this object provides the Current value of the Module Temperature Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
edfastateFlagModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfastateFlagModTemp.setStatus('mandatory')
if mibBuilder.loadTexts: edfastateFlagModTemp.setDescription('The value of this object provides the state of the Module Temperature Analog parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
edfaminValueModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 10), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfaminValueModTemp.setStatus('mandatory')
if mibBuilder.loadTexts: edfaminValueModTemp.setDescription('The value of this object provides the minimum value of the Module Temperature Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
edfamaxValueModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 11), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfamaxValueModTemp.setStatus('mandatory')
if mibBuilder.loadTexts: edfamaxValueModTemp.setDescription('The value of this object provides the maximum value of the Module Temperature Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
edfaalarmStateModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfaalarmStateModTemp.setStatus('mandatory')
if mibBuilder.loadTexts: edfaalarmStateModTemp.setDescription('The value of this object provides the curent alarm state of the Module Temperature Analog parameter.')
edfalabelOptInPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfalabelOptInPower.setStatus('optional')
if mibBuilder.loadTexts: edfalabelOptInPower.setDescription('The value of this object provides the label of the Optical Input Power Analog parameter.')
edfauomOptInPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfauomOptInPower.setStatus('optional')
if mibBuilder.loadTexts: edfauomOptInPower.setDescription('The value of this object provides the Unit of Measure of the Optical Input Power Analog parameter.')
edfamajorHighOptInPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 15), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfamajorHighOptInPower.setStatus('mandatory')
if mibBuilder.loadTexts: edfamajorHighOptInPower.setDescription('The value of this object provides the Major High alarm value of the Optical Input Power Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
edfamajorLowOptInPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 16), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfamajorLowOptInPower.setStatus('mandatory')
if mibBuilder.loadTexts: edfamajorLowOptInPower.setDescription('The value of this object provides the Major Low alarm value of the Optical Input Power Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
edfaminorHighOptInPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 17), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfaminorHighOptInPower.setStatus('mandatory')
if mibBuilder.loadTexts: edfaminorHighOptInPower.setDescription('The value of this object provides the Minor High alarm value of the Optical Input Power Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
edfaminorLowOptInPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 18), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfaminorLowOptInPower.setStatus('mandatory')
if mibBuilder.loadTexts: edfaminorLowOptInPower.setDescription('The value of this object provides the Minor Low alarm value of the Optical Input Power Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
edfacurrentValueOptInPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 19), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfacurrentValueOptInPower.setStatus('mandatory')
if mibBuilder.loadTexts: edfacurrentValueOptInPower.setDescription('The value of this object provides the Current value of the Optical Input Power Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
edfastateFlagOptInPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfastateFlagOptInPower.setStatus('mandatory')
if mibBuilder.loadTexts: edfastateFlagOptInPower.setDescription('The value of this object provides the state of the Optical Input Power Analog parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
edfaminValueOptInPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 21), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfaminValueOptInPower.setStatus('mandatory')
if mibBuilder.loadTexts: edfaminValueOptInPower.setDescription('The value of this object provides the minimum value of the Optical Input Power Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
edfamaxValueOptInPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 22), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfamaxValueOptInPower.setStatus('mandatory')
if mibBuilder.loadTexts: edfamaxValueOptInPower.setDescription('The value of this object provides the maximum value of the Optical Input Power Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
edfaalarmStateOptInPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfaalarmStateOptInPower.setStatus('mandatory')
if mibBuilder.loadTexts: edfaalarmStateOptInPower.setDescription('The value of this object provides the curent alarm state of the Optical Input Power Analog parameter.')
edfalabelOptOutPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfalabelOptOutPower.setStatus('optional')
if mibBuilder.loadTexts: edfalabelOptOutPower.setDescription('The value of this object provides the label of the Optical Output Power Analog parameter.')
edfauomOptOutPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfauomOptOutPower.setStatus('optional')
if mibBuilder.loadTexts: edfauomOptOutPower.setDescription('The value of this object provides the Unit of Measure of the Optical Output Power Analog parameter.')
edfamajorHighOptOutPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 26), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfamajorHighOptOutPower.setStatus('mandatory')
if mibBuilder.loadTexts: edfamajorHighOptOutPower.setDescription('The value of this object provides the Major High alarm value of the Optical Output Power Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
edfamajorLowOptOutPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 27), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfamajorLowOptOutPower.setStatus('mandatory')
if mibBuilder.loadTexts: edfamajorLowOptOutPower.setDescription('The value of this object provides the Major Low alarm value of the Optical Output Power Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
edfaminorHighOptOutPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 28), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfaminorHighOptOutPower.setStatus('mandatory')
if mibBuilder.loadTexts: edfaminorHighOptOutPower.setDescription('The value of this object provides the Minor High alarm value of the Optical Output Power Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
edfaminorLowOptOutPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 29), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfaminorLowOptOutPower.setStatus('mandatory')
if mibBuilder.loadTexts: edfaminorLowOptOutPower.setDescription('The value of this object provides the Minor Low alarm value of the Optical Output Power Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
edfacurrentValueOptOutPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 30), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfacurrentValueOptOutPower.setStatus('mandatory')
if mibBuilder.loadTexts: edfacurrentValueOptOutPower.setDescription('The value of this object provides the Current value of the Optical Output Power Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
edfastateFlagOptOutPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfastateFlagOptOutPower.setStatus('mandatory')
if mibBuilder.loadTexts: edfastateFlagOptOutPower.setDescription('The value of this object provides the state of the Optical Output Power Analog parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
edfaminValueOptOutPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 32), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfaminValueOptOutPower.setStatus('mandatory')
if mibBuilder.loadTexts: edfaminValueOptOutPower.setDescription('The value of this object provides the minimum value of the Optical Output Power Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
edfamaxValueOptOutPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 33), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfamaxValueOptOutPower.setStatus('mandatory')
if mibBuilder.loadTexts: edfamaxValueOptOutPower.setDescription('The value of this object provides the maximum value of the Optical Output Power Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
edfaalarmStateOptOutPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfaalarmStateOptOutPower.setStatus('mandatory')
if mibBuilder.loadTexts: edfaalarmStateOptOutPower.setDescription('The value of this object provides the curent alarm state of the Optical Output Power Analog parameter.')
edfalabelTECTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 35), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfalabelTECTemp.setStatus('optional')
if mibBuilder.loadTexts: edfalabelTECTemp.setDescription('The value of this object provides the label of the TEC Temperature Analog parameter.')
edfauomTECTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 36), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfauomTECTemp.setStatus('optional')
if mibBuilder.loadTexts: edfauomTECTemp.setDescription('The value of this object provides the Unit of Measure of the TEC Temperature Analog parameter.')
edfamajorHighTECTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 37), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfamajorHighTECTemp.setStatus('mandatory')
if mibBuilder.loadTexts: edfamajorHighTECTemp.setDescription('The value of this object provides the Major High alarm value of the TEC Temperature Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
edfamajorLowTECTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 38), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfamajorLowTECTemp.setStatus('mandatory')
if mibBuilder.loadTexts: edfamajorLowTECTemp.setDescription('The value of this object provides the Major Low alarm value of the TEC Temperature Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
edfaminorHighTECTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 39), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfaminorHighTECTemp.setStatus('mandatory')
if mibBuilder.loadTexts: edfaminorHighTECTemp.setDescription('The value of this object provides the Minor High alarm value of the TEC Temperature Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
edfaminorLowTECTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 40), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfaminorLowTECTemp.setStatus('mandatory')
if mibBuilder.loadTexts: edfaminorLowTECTemp.setDescription('The value of this object provides the Minor Low alarm value of the TEC Temperature Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
edfacurrentValueTECTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 41), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfacurrentValueTECTemp.setStatus('mandatory')
if mibBuilder.loadTexts: edfacurrentValueTECTemp.setDescription('The value of this object provides the Current value of the TEC Temperature Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
edfastateFlagTECTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfastateFlagTECTemp.setStatus('mandatory')
if mibBuilder.loadTexts: edfastateFlagTECTemp.setDescription('The value of this object provides the state of the TEC Temperature Analog parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
edfaminValueTECTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 43), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfaminValueTECTemp.setStatus('mandatory')
if mibBuilder.loadTexts: edfaminValueTECTemp.setDescription('The value of this object provides the minimum value of the TEC Temperature Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
edfamaxValueTECTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 44), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfamaxValueTECTemp.setStatus('mandatory')
if mibBuilder.loadTexts: edfamaxValueTECTemp.setDescription('The value of this object provides the maximum value of the TEC Temperature Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
edfaalarmStateTECTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfaalarmStateTECTemp.setStatus('mandatory')
if mibBuilder.loadTexts: edfaalarmStateTECTemp.setDescription('The value of this object provides the curent alarm state of the TEC Temperature Analog parameter.')
edfalabelTECCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 46), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfalabelTECCurrent.setStatus('optional')
if mibBuilder.loadTexts: edfalabelTECCurrent.setDescription('The value of this object provides the label of the TEC Current Analog parameter.')
edfauomTECCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 47), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfauomTECCurrent.setStatus('optional')
if mibBuilder.loadTexts: edfauomTECCurrent.setDescription('The value of this object provides the Unit of Measure of the TEC Current Analog parameter.')
edfamajorHighTECCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 48), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfamajorHighTECCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: edfamajorHighTECCurrent.setDescription('The value of this object provides the Major High alarm value of the TEC Current Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
edfamajorLowTECCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 49), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfamajorLowTECCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: edfamajorLowTECCurrent.setDescription('The value of this object provides the Major Low alarm value of the TEC Current Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
edfaminorHighTECCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 50), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfaminorHighTECCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: edfaminorHighTECCurrent.setDescription('The value of this object provides the Minor High alarm value of the TEC Current Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
edfaminorLowTECCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 51), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfaminorLowTECCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: edfaminorLowTECCurrent.setDescription('The value of this object provides the Minor Low alarm value of the TEC Current Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
edfacurrentValueTECCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 52), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfacurrentValueTECCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: edfacurrentValueTECCurrent.setDescription('The value of this object provides the Current value of the TEC Current Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
edfastateFlagTECCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfastateFlagTECCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: edfastateFlagTECCurrent.setDescription('The value of this object provides the state of the TEC Current Analog parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
edfaminValueTECCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 54), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfaminValueTECCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: edfaminValueTECCurrent.setDescription('The value of this object provides the minimum value of the TEC Current Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
edfamaxValueTECCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 55), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfamaxValueTECCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: edfamaxValueTECCurrent.setDescription('The value of this object provides the maximum value of the TEC Current Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
edfaalarmStateTECCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 56), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfaalarmStateTECCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: edfaalarmStateTECCurrent.setDescription('The value of this object provides the curent alarm state of the TEC Current Analog parameter.')
edfalabelLaserCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 57), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfalabelLaserCurrent.setStatus('optional')
if mibBuilder.loadTexts: edfalabelLaserCurrent.setDescription('The value of this object provides the label of the Laser Current Analog parameter.')
edfauomLaserCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 58), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfauomLaserCurrent.setStatus('optional')
if mibBuilder.loadTexts: edfauomLaserCurrent.setDescription('The value of this object provides the Unit of Measure of the Laser Current Analog parameter.')
edfamajorHighLaserCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 59), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfamajorHighLaserCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: edfamajorHighLaserCurrent.setDescription('The value of this object provides the Major High alarm value of the Laser Current Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
edfamajorLowLaserCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 60), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfamajorLowLaserCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: edfamajorLowLaserCurrent.setDescription('The value of this object provides the Major Low alarm value of the Laser Current Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
edfaminorHighLaserCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 61), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfaminorHighLaserCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: edfaminorHighLaserCurrent.setDescription('The value of this object provides the Minor High alarm value of the Laser Current Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
edfaminorLowLaserCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 62), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfaminorLowLaserCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: edfaminorLowLaserCurrent.setDescription('The value of this object provides the Minor Low alarm value of the Laser Current Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
edfacurrentValueLaserCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 63), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfacurrentValueLaserCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: edfacurrentValueLaserCurrent.setDescription('The value of this object provides the Current value of the Laser Current Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
edfastateFlagLaserCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 64), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfastateFlagLaserCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: edfastateFlagLaserCurrent.setDescription('The value of this object provides the state of the Laser Current Analog parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
edfaminValueLaserCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 65), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfaminValueLaserCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: edfaminValueLaserCurrent.setDescription('The value of this object provides the minimum value of the Laser Current Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
edfamaxValueLaserCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 66), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfamaxValueLaserCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: edfamaxValueLaserCurrent.setDescription('The value of this object provides the maximum value of the Laser Current Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
edfaalarmStateLaserCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 67), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfaalarmStateLaserCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: edfaalarmStateLaserCurrent.setDescription('The value of this object provides the curent alarm state of the Laser Current Analog parameter.')
edfalabelLaserPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 68), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfalabelLaserPower.setStatus('optional')
if mibBuilder.loadTexts: edfalabelLaserPower.setDescription('The value of this object provides the label of the Laser Power Analog parameter.')
edfauomLaserPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 69), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfauomLaserPower.setStatus('optional')
if mibBuilder.loadTexts: edfauomLaserPower.setDescription('The value of this object provides the Unit of Measure of the Laser Power Analog parameter.')
edfamajorHighLaserPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 70), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfamajorHighLaserPower.setStatus('mandatory')
if mibBuilder.loadTexts: edfamajorHighLaserPower.setDescription('The value of this object provides the Major High alarm value of the Laser Power Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
edfamajorLowLaserPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 71), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfamajorLowLaserPower.setStatus('mandatory')
if mibBuilder.loadTexts: edfamajorLowLaserPower.setDescription('The value of this object provides the Major Low alarm value of the Laser Power Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
edfaminorHighLaserPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 72), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfaminorHighLaserPower.setStatus('mandatory')
if mibBuilder.loadTexts: edfaminorHighLaserPower.setDescription('The value of this object provides the Minor High alarm value of the Laser Power Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
edfaminorLowLaserPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 73), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfaminorLowLaserPower.setStatus('mandatory')
if mibBuilder.loadTexts: edfaminorLowLaserPower.setDescription('The value of this object provides the Minor Low alarm value of the Laser Power Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
edfacurrentValueLaserPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 74), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfacurrentValueLaserPower.setStatus('mandatory')
if mibBuilder.loadTexts: edfacurrentValueLaserPower.setDescription('The value of this object provides the Current value of the Laser Power Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
edfastateFlagLaserPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 75), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfastateFlagLaserPower.setStatus('mandatory')
if mibBuilder.loadTexts: edfastateFlagLaserPower.setDescription('The value of this object provides the state of the Laser Power Analog parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
edfaminValueLaserPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 76), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfaminValueLaserPower.setStatus('mandatory')
if mibBuilder.loadTexts: edfaminValueLaserPower.setDescription('The value of this object provides the minimum value of the Laser Power Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
edfamaxValueLaserPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 77), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfamaxValueLaserPower.setStatus('mandatory')
if mibBuilder.loadTexts: edfamaxValueLaserPower.setDescription('The value of this object provides the maximum value of the Laser Power Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
edfaalarmStateLaserPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 78), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfaalarmStateLaserPower.setStatus('mandatory')
if mibBuilder.loadTexts: edfaalarmStateLaserPower.setDescription('The value of this object provides the curent alarm state of the Laser Power Analog parameter.')
edfalabel12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 79), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfalabel12Volt.setStatus('optional')
if mibBuilder.loadTexts: edfalabel12Volt.setDescription('The value of this object provides the label of the 12v Current Analog parameter.')
edfauom12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 80), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfauom12Volt.setStatus('optional')
if mibBuilder.loadTexts: edfauom12Volt.setDescription('The value of this object provides the Unit of Measure of the 12v Current Analog parameter.')
edfamajorHigh12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 81), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfamajorHigh12Volt.setStatus('mandatory')
if mibBuilder.loadTexts: edfamajorHigh12Volt.setDescription('The value of this object provides the Major High alarm value of the 12 Volt Current Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
edfamajorLow12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 82), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfamajorLow12Volt.setStatus('mandatory')
if mibBuilder.loadTexts: edfamajorLow12Volt.setDescription('The value of this object provides the Major Low alarm value of the 12 Volt Current Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
edfaminorHigh12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 83), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfaminorHigh12Volt.setStatus('mandatory')
if mibBuilder.loadTexts: edfaminorHigh12Volt.setDescription('The value of this object provides the Minor High alarm value of the 12 Volt Current Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
edfaminorLow12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 84), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfaminorLow12Volt.setStatus('mandatory')
if mibBuilder.loadTexts: edfaminorLow12Volt.setDescription('The value of this object provides the Minor Low alarm value of the 12 Volt Current Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
edfacurrentValue12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 85), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfacurrentValue12Volt.setStatus('mandatory')
if mibBuilder.loadTexts: edfacurrentValue12Volt.setDescription('The value of this object provides the Current value of the 12 Volt Current Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
edfastateFlag12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 86), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfastateFlag12Volt.setStatus('mandatory')
if mibBuilder.loadTexts: edfastateFlag12Volt.setDescription('The value of this object provides the state of the 12v Current Analog parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
edfaminValue12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 87), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfaminValue12Volt.setStatus('mandatory')
if mibBuilder.loadTexts: edfaminValue12Volt.setDescription('The value of this object provides the minimum value of the 12 Volt Current Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
edfamaxValue12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 88), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfamaxValue12Volt.setStatus('mandatory')
if mibBuilder.loadTexts: edfamaxValue12Volt.setDescription('The value of this object provides the maximum value of the 12 Volt Current Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
edfaalarmState12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 89), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfaalarmState12Volt.setStatus('mandatory')
if mibBuilder.loadTexts: edfaalarmState12Volt.setDescription('The value of this object provides the curent alarm state of the 12v Current Analog parameter.')
edfalabel37Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 90), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfalabel37Volt.setStatus('optional')
if mibBuilder.loadTexts: edfalabel37Volt.setDescription('The value of this object provides the label of the 3.7v Current Analog parameter.')
edfauom37Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 91), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfauom37Volt.setStatus('optional')
if mibBuilder.loadTexts: edfauom37Volt.setDescription('The value of this object provides the Unit of Measure of the 3.7v Current Analog parameter.')
edfamajorHigh37Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 92), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfamajorHigh37Volt.setStatus('mandatory')
if mibBuilder.loadTexts: edfamajorHigh37Volt.setDescription('The value of this object provides the Major High alarm value of the 3.7 Volt Current Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
edfamajorLow37Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 93), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfamajorLow37Volt.setStatus('mandatory')
if mibBuilder.loadTexts: edfamajorLow37Volt.setDescription('The value of this object provides the Major Low alarm value of the 3.7 Volt Current Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
edfaminorHigh37Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 94), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfaminorHigh37Volt.setStatus('mandatory')
if mibBuilder.loadTexts: edfaminorHigh37Volt.setDescription('The value of this object provides the Minor High alarm value of the 3.7 Volt Current Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
edfaminorLow37Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 95), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfaminorLow37Volt.setStatus('mandatory')
if mibBuilder.loadTexts: edfaminorLow37Volt.setDescription('The value of this object provides the Minor Low alarm value of the 3.7 Volt Current Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
edfacurrentValue37Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 96), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfacurrentValue37Volt.setStatus('mandatory')
if mibBuilder.loadTexts: edfacurrentValue37Volt.setDescription('The value of this object provides the Current value of the 3.7 Volt Current Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
edfastateFlag37Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 97), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfastateFlag37Volt.setStatus('mandatory')
if mibBuilder.loadTexts: edfastateFlag37Volt.setDescription('The value of this object provides the state of the 3.7v Current Analog parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
edfaminValue37Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 98), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfaminValue37Volt.setStatus('mandatory')
if mibBuilder.loadTexts: edfaminValue37Volt.setDescription('The value of this object provides the minimum value of the 3.7 Volt Current Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
edfamaxValue37Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 99), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfamaxValue37Volt.setStatus('mandatory')
if mibBuilder.loadTexts: edfamaxValue37Volt.setDescription('The value of this object provides the maximum value of the 3.7 Volt Current Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
edfaalarmState37Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 100), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfaalarmState37Volt.setStatus('mandatory')
if mibBuilder.loadTexts: edfaalarmState37Volt.setDescription('The value of this object provides the curent alarm state of the 3.7v Current Analog parameter.')
edfalabelFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 101), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfalabelFanCurrent.setStatus('optional')
if mibBuilder.loadTexts: edfalabelFanCurrent.setDescription('The value of this object provides the label of the Fan Current Analog parameter.')
edfauomFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 102), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfauomFanCurrent.setStatus('optional')
if mibBuilder.loadTexts: edfauomFanCurrent.setDescription('The value of this object provides the Unit of Measure of the Fan Current Analog parameter.')
edfamajorHighFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 103), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfamajorHighFanCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: edfamajorHighFanCurrent.setDescription('The value of this object provides the Major High alarm value of the Fan Current Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
edfamajorLowFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 104), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfamajorLowFanCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: edfamajorLowFanCurrent.setDescription('The value of this object provides the Major Low alarm value of the Fan Current Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
edfaminorHighFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 105), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfaminorHighFanCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: edfaminorHighFanCurrent.setDescription('The value of this object provides the Minor High alarm value of the Fan Current Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
edfaminorLowFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 106), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfaminorLowFanCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: edfaminorLowFanCurrent.setDescription('The value of this object provides the Minor Low alarm value of the Fan Current Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
edfacurrentValueFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 107), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfacurrentValueFanCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: edfacurrentValueFanCurrent.setDescription('The value of this object provides the Current value of the Fan Current Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
edfastateFlagFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 108), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfastateFlagFanCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: edfastateFlagFanCurrent.setDescription('The value of this object provides the state of the Fan Current Analog parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
edfaminValueFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 109), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfaminValueFanCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: edfaminValueFanCurrent.setDescription('The value of this object provides the minimum value of the Fan Current Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
edfamaxValueFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 110), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfamaxValueFanCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: edfamaxValueFanCurrent.setDescription('The value of this object provides the maximum value of the Fan Current Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
edfaalarmStateFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 111), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfaalarmStateFanCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: edfaalarmStateFanCurrent.setDescription('The value of this object provides the curent alarm state of the Fan Current Analog parameter.')
edfalabelOPSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 112), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfalabelOPSetting.setStatus('optional')
if mibBuilder.loadTexts: edfalabelOPSetting.setDescription('The value of this object provides the label of the Output Power Setting Analog parameter.')
edfauomOPSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 113), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfauomOPSetting.setStatus('optional')
if mibBuilder.loadTexts: edfauomOPSetting.setDescription('The value of this object provides the Unit of Measure of the 12v Current Analog parameter.')
edfamajorHighOPSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 114), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfamajorHighOPSetting.setStatus('mandatory')
if mibBuilder.loadTexts: edfamajorHighOPSetting.setDescription('The value of this object provides the Major High alarm value of the Output Power Setting Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
edfamajorLowOPSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 115), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfamajorLowOPSetting.setStatus('mandatory')
if mibBuilder.loadTexts: edfamajorLowOPSetting.setDescription('The value of this object provides the Major Low alarm value of the Output Power Setting Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
edfaminorHighOPSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 116), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfaminorHighOPSetting.setStatus('mandatory')
if mibBuilder.loadTexts: edfaminorHighOPSetting.setDescription('The value of this object provides the Minor High alarm value of the Output Power Setting Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
edfaminorLowOPSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 117), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfaminorLowOPSetting.setStatus('mandatory')
if mibBuilder.loadTexts: edfaminorLowOPSetting.setDescription('The value of this object provides the Minor Low alarm value of the Output Power Setting Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
edfacurrentValueOPSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 118), Float()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: edfacurrentValueOPSetting.setStatus('mandatory')
if mibBuilder.loadTexts: edfacurrentValueOPSetting.setDescription('The value of this object provides the Current value of the Output Power Setting Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
edfastateFlagOPSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 119), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfastateFlagOPSetting.setStatus('mandatory')
if mibBuilder.loadTexts: edfastateFlagOPSetting.setDescription('The value of this object provides the state of the Output Power Setting Analog parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
edfaminValueOPSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 120), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfaminValueOPSetting.setStatus('mandatory')
if mibBuilder.loadTexts: edfaminValueOPSetting.setDescription('The value of this object provides the minimum value of the Output Power Setting Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
edfamaxValueOPSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 121), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfamaxValueOPSetting.setStatus('mandatory')
if mibBuilder.loadTexts: edfamaxValueOPSetting.setDescription('The value of this object provides the maximum value of the Output Power Setting Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
edfaalarmStateOPSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 122), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfaalarmStateOPSetting.setStatus('mandatory')
if mibBuilder.loadTexts: edfaalarmStateOPSetting.setDescription('The value of this object provides the curent alarm state of the Output Power Setting Analog parameter.')
edfalabelLPSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 123), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfalabelLPSetting.setStatus('optional')
if mibBuilder.loadTexts: edfalabelLPSetting.setDescription('The value of this object provides the label of the Laser Power Setting Analog parameter.')
edfauomLPSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 124), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfauomLPSetting.setStatus('optional')
if mibBuilder.loadTexts: edfauomLPSetting.setDescription('The value of this object provides the Unit of Measure of the Laser Power Setting Analog parameter.')
edfamajorHighLPSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 125), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfamajorHighLPSetting.setStatus('mandatory')
if mibBuilder.loadTexts: edfamajorHighLPSetting.setDescription('The value of this object provides the Major High alarm value of the Laser Power Setting Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
edfamajorLowLPSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 126), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfamajorLowLPSetting.setStatus('mandatory')
if mibBuilder.loadTexts: edfamajorLowLPSetting.setDescription('The value of this object provides the Major Low alarm value of the Laser Power Setting Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
edfaminorHighLPSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 127), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfaminorHighLPSetting.setStatus('mandatory')
if mibBuilder.loadTexts: edfaminorHighLPSetting.setDescription('The value of this object provides the Minor High alarm value of the Laser Power Setting Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
edfaminorLowLPSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 128), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfaminorLowLPSetting.setStatus('mandatory')
if mibBuilder.loadTexts: edfaminorLowLPSetting.setDescription('The value of this object provides the Minor Low alarm value of the Laser Power Setting Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
edfacurrentValueLPSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 129), Float()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: edfacurrentValueLPSetting.setStatus('mandatory')
if mibBuilder.loadTexts: edfacurrentValueLPSetting.setDescription('The value of this object provides the Current value of the Laser Power Setting Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
edfastateFlagLPSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 130), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfastateFlagLPSetting.setStatus('mandatory')
if mibBuilder.loadTexts: edfastateFlagLPSetting.setDescription('The value of this object provides the state of the Laser Power Setting Analog parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
edfaminValueLPSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 131), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfaminValueLPSetting.setStatus('mandatory')
if mibBuilder.loadTexts: edfaminValueLPSetting.setDescription('The value of this object provides the minimum value of the Laser Power Setting Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
edfamaxValueLPSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 132), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfamaxValueLPSetting.setStatus('mandatory')
if mibBuilder.loadTexts: edfamaxValueLPSetting.setDescription('The value of this object provides the maximum value of the Laser Power Setting Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
edfaalarmStateLPSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 133), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfaalarmStateLPSetting.setStatus('mandatory')
if mibBuilder.loadTexts: edfaalarmStateLPSetting.setDescription('The value of this object provides the curent alarm state of the Laser Power Setting Analog parameter.')
edfalabelCGSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 134), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfalabelCGSetting.setStatus('optional')
if mibBuilder.loadTexts: edfalabelCGSetting.setDescription('The value of this object provides the label of the Constant Gain Setting Analog parameter.')
edfauomCGSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 135), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfauomCGSetting.setStatus('optional')
if mibBuilder.loadTexts: edfauomCGSetting.setDescription('The value of this object provides the Unit of Measure of the Constant Gain Setting Analog parameter.')
edfamajorHighCGSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 136), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfamajorHighCGSetting.setStatus('mandatory')
if mibBuilder.loadTexts: edfamajorHighCGSetting.setDescription('The value of this object provides the Major High alarm value of the Constant Gain Setting Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
edfamajorLowCGSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 137), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfamajorLowCGSetting.setStatus('mandatory')
if mibBuilder.loadTexts: edfamajorLowCGSetting.setDescription('The value of this object provides the Major Low alarm value of the Constant Gain Setting Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
edfaminorHighCGSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 138), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfaminorHighCGSetting.setStatus('mandatory')
if mibBuilder.loadTexts: edfaminorHighCGSetting.setDescription('The value of this object provides the Minor High alarm value of the Constant Gain Setting Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
edfaminorLowCGSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 139), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfaminorLowCGSetting.setStatus('mandatory')
if mibBuilder.loadTexts: edfaminorLowCGSetting.setDescription('The value of this object provides the Minor Low alarm value of the Constant Gain Setting Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
edfacurrentValueCGSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 140), Float()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: edfacurrentValueCGSetting.setStatus('mandatory')
if mibBuilder.loadTexts: edfacurrentValueCGSetting.setDescription('The value of this object provides the Current value of the Constant Gain Setting Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
edfastateFlagCGSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 141), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfastateFlagCGSetting.setStatus('mandatory')
if mibBuilder.loadTexts: edfastateFlagCGSetting.setDescription('The value of this object provides the state of the Constant Gain Setting Analog parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
edfaminValueCGSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 142), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfaminValueCGSetting.setStatus('mandatory')
if mibBuilder.loadTexts: edfaminValueCGSetting.setDescription('The value of this object provides the minimum value of the Constant Gain Setting Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
edfamaxValueCGSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 143), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfamaxValueCGSetting.setStatus('mandatory')
if mibBuilder.loadTexts: edfamaxValueCGSetting.setDescription('The value of this object provides the maximum value of the Constant Gain Setting Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
edfaalarmStateCGSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 144), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfaalarmStateCGSetting.setStatus('mandatory')
if mibBuilder.loadTexts: edfaalarmStateCGSetting.setDescription('The value of this object provides the curent alarm state of the Constant Gain Setting Analog parameter.')
edfalabelOptThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 145), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfalabelOptThreshold.setStatus('optional')
if mibBuilder.loadTexts: edfalabelOptThreshold.setDescription('The value of this object provides the label of the Optical Input Threshold Analog parameter.')
edfauomOptThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 146), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfauomOptThreshold.setStatus('optional')
if mibBuilder.loadTexts: edfauomOptThreshold.setDescription('The value of this object provides the Unit of Measure of the Optical Input Threshold Analog parameter.')
edfamajorHighOptThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 147), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfamajorHighOptThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: edfamajorHighOptThreshold.setDescription('The value of this object provides the Major High alarm value of the Optical Input Threshold Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
edfamajorLowOptThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 148), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfamajorLowOptThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: edfamajorLowOptThreshold.setDescription('The value of this object provides the Major Low alarm value of the Optical Input Threshold Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
edfaminorHighOptThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 149), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfaminorHighOptThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: edfaminorHighOptThreshold.setDescription('The value of this object provides the Minor High alarm value of the Optical Input Threshold Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
edfaminorLowOptThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 150), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfaminorLowOptThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: edfaminorLowOptThreshold.setDescription('The value of this object provides the Minor Low alarm value of the Optical Input Threshold Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
edfacurrentValueOptThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 151), Float()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: edfacurrentValueOptThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: edfacurrentValueOptThreshold.setDescription('The value of this object provides the Current value of the Optical Input Threshold Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
edfastateFlagOptThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 152), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfastateFlagOptThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: edfastateFlagOptThreshold.setDescription('The value of this object provides the state of the Optical Input Threshold Analog parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
edfaminValueOptThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 153), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfaminValueOptThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: edfaminValueOptThreshold.setDescription('The value of this object provides the minimum value of the Optical Input Threshold Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
edfamaxValueOptThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 154), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfamaxValueOptThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: edfamaxValueOptThreshold.setDescription('The value of this object provides the maximum value of the Optical Input Threshold Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
edfaalarmStateOptThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 2, 1, 155), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfaalarmStateOptThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: edfaalarmStateOptThreshold.setDescription('The value of this object provides the curent alarm state of the Optical Input Threshold Analog parameter.')
edfagx2EDFADigitalTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 3, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfagx2EDFADigitalTableIndex.setStatus('mandatory')
if mibBuilder.loadTexts: edfagx2EDFADigitalTableIndex.setDescription('The value of this object identifies the network element. This index is equal to the hfcCommonTableIndex for the same element.')
edfalabelModeSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 3, 2, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfalabelModeSetting.setStatus('optional')
if mibBuilder.loadTexts: edfalabelModeSetting.setDescription("The value of this object provides the label of the EDFA's Mode Digital parameter.")
edfaenumModeSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 3, 2, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfaenumModeSetting.setStatus('optional')
if mibBuilder.loadTexts: edfaenumModeSetting.setDescription('The value of this object represents the Enumeration values possible for the Digital parameter. Each Enumerated values is separated by a common. The first value has a enumerated value of 0.')
edfavalueModeSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 3, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("power-out-preset", 1), ("power-out-set", 2), ("laser-power-preset", 3), ("laser-power-set", 4), ("constant-gain-preset", 5), ("constant-gain-set", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: edfavalueModeSetting.setStatus('mandatory')
if mibBuilder.loadTexts: edfavalueModeSetting.setDescription('The value of this object is the current value of the parameter. It is an integer value from 0 to 5 representing the operation mode of the module.')
edfastateFlagModeSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 3, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfastateFlagModeSetting.setStatus('mandatory')
if mibBuilder.loadTexts: edfastateFlagModeSetting.setDescription('The value of this object provides the state of the the parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
edfalabelModuleState = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 3, 2, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfalabelModuleState.setStatus('optional')
if mibBuilder.loadTexts: edfalabelModuleState.setDescription('The value of this object provides the label of the Module State Digital parameter.')
edfaenumModuleState = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 3, 2, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfaenumModuleState.setStatus('optional')
if mibBuilder.loadTexts: edfaenumModuleState.setDescription('The value of this object represents the Enumeration values possible for the Digital parameter. Each Enumerated values is separated by a common. The first value has a enumerated value of 1.')
edfavalueModuleState = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 3, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: edfavalueModuleState.setStatus('mandatory')
if mibBuilder.loadTexts: edfavalueModuleState.setDescription('The value of this object is the current value of the parameter.')
edfastateFlagModuleState = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 3, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfastateFlagModuleState.setStatus('mandatory')
if mibBuilder.loadTexts: edfastateFlagModuleState.setDescription('The value of this object provides the state of the the parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
edfalabelFactoryDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 3, 2, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfalabelFactoryDefault.setStatus('optional')
if mibBuilder.loadTexts: edfalabelFactoryDefault.setDescription('The value of this object provides the label of the Factory Default Reset Digital parameter.')
edfaenumFactoryDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 3, 2, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfaenumFactoryDefault.setStatus('optional')
if mibBuilder.loadTexts: edfaenumFactoryDefault.setDescription('The value of this object represents the Enumeration values possible for the Digital parameter. Each Enumerated values is separated by a common. The first value has a enumerated value of 1.')
edfavalueFactoryDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 3, 2, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: edfavalueFactoryDefault.setStatus('mandatory')
if mibBuilder.loadTexts: edfavalueFactoryDefault.setDescription('The value of this object is the current value of the parameter.')
edfastateFlagFactoryDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 3, 2, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfastateFlagFactoryDefault.setStatus('mandatory')
if mibBuilder.loadTexts: edfastateFlagFactoryDefault.setDescription('The value of this object provides the state of the the parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
edfagx2EDFAStatusTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 4, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfagx2EDFAStatusTableIndex.setStatus('mandatory')
if mibBuilder.loadTexts: edfagx2EDFAStatusTableIndex.setDescription('The value of this object identifies the network element. This index is equal to the hfcCommonTableIndex for the same element.')
edfalabelBoot = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 4, 3, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfalabelBoot.setStatus('optional')
if mibBuilder.loadTexts: edfalabelBoot.setDescription('The value of this object provides the label of the Boot Status Status parameter.')
edfavalueBoot = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 4, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfavalueBoot.setStatus('mandatory')
if mibBuilder.loadTexts: edfavalueBoot.setDescription('The value of this object provides the current state of the parameter (0-Ok, 1-Undetermined 2-Warning, 3-Minor, 4-Major, 5-Critical).')
edfastateflagBoot = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 4, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfastateflagBoot.setStatus('mandatory')
if mibBuilder.loadTexts: edfastateflagBoot.setDescription('The value of this object provides the state of the the parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
edfalabelFlash = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 4, 3, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfalabelFlash.setStatus('optional')
if mibBuilder.loadTexts: edfalabelFlash.setDescription('The value of this object provides the label of the Flash Status Status parameter.')
edfavalueFlash = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 4, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfavalueFlash.setStatus('mandatory')
if mibBuilder.loadTexts: edfavalueFlash.setDescription('The value of this object provides the current state of the parameter (0-Ok, 1-Undetermined 2-Warning, 3-Minor, 4-Major, 5-Critical).')
edfastateflagFlash = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 4, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfastateflagFlash.setStatus('mandatory')
if mibBuilder.loadTexts: edfastateflagFlash.setDescription('The value of this object provides the state of the the parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
edfalabelFactoryDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 4, 3, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfalabelFactoryDataCRC.setStatus('optional')
if mibBuilder.loadTexts: edfalabelFactoryDataCRC.setDescription('The value of this object provides the label of the Factory Data CRC Status parameter.')
edfavalueFactoryDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 4, 3, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfavalueFactoryDataCRC.setStatus('mandatory')
if mibBuilder.loadTexts: edfavalueFactoryDataCRC.setDescription('The value of this object provides the current state of the parameter (0-Ok, 1-Undetermined 2-Warning, 3-Minor, 4-Major, 5-Critical).')
edfastateflagFactoryDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 4, 3, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfastateflagFactoryDataCRC.setStatus('mandatory')
if mibBuilder.loadTexts: edfastateflagFactoryDataCRC.setDescription('The value of this object provides the state of the the parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
edfalabelAlarmDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 4, 3, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfalabelAlarmDataCRC.setStatus('optional')
if mibBuilder.loadTexts: edfalabelAlarmDataCRC.setDescription('The value of this object provides the label of the Alarm Data CRC Status parameter.')
edfavalueAlarmDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 4, 3, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfavalueAlarmDataCRC.setStatus('mandatory')
if mibBuilder.loadTexts: edfavalueAlarmDataCRC.setDescription('The value of this object provides the current state of the parameter (0-Ok, 1-Undetermined 2-Warning, 3-Minor, 4-Major, 5-Critical).')
edfastateflagAlarmDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 4, 3, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfastateflagAlarmDataCRC.setStatus('mandatory')
if mibBuilder.loadTexts: edfastateflagAlarmDataCRC.setDescription('The value of this object provides the state of the the parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
edfalabelCalibrationDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 4, 3, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfalabelCalibrationDataCRC.setStatus('optional')
if mibBuilder.loadTexts: edfalabelCalibrationDataCRC.setDescription('The value of this object provides the label of the Calibration Data CRC Status parameter.')
edfavalueCalibrationDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 4, 3, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfavalueCalibrationDataCRC.setStatus('mandatory')
if mibBuilder.loadTexts: edfavalueCalibrationDataCRC.setDescription('The value of this object provides the current state of the parameter (0-Ok, 1-Undetermined 2-Warning, 3-Minor, 4-Major, 5-Critical).')
edfastateflagCalibrationDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 4, 3, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfastateflagCalibrationDataCRC.setStatus('mandatory')
if mibBuilder.loadTexts: edfastateflagCalibrationDataCRC.setDescription('The value of this object provides the state of the the parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
edfalabelOptInShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 4, 3, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfalabelOptInShutdown.setStatus('optional')
if mibBuilder.loadTexts: edfalabelOptInShutdown.setDescription('The value of this object provides the label of the Optical Input Power Shutdown Status parameter.')
edfavalueOptInShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 4, 3, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfavalueOptInShutdown.setStatus('mandatory')
if mibBuilder.loadTexts: edfavalueOptInShutdown.setDescription('The value of this object provides the current state of the parameter (0-Ok, 1-Undetermined 2-Warning, 3-Minor, 4-Major, 5-Critical).')
edfastateflagOptInShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 4, 3, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfastateflagOptInShutdown.setStatus('mandatory')
if mibBuilder.loadTexts: edfastateflagOptInShutdown.setDescription('The value of this object provides the state of the the parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
edfalabelTECTempShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 4, 3, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfalabelTECTempShutdown.setStatus('optional')
if mibBuilder.loadTexts: edfalabelTECTempShutdown.setDescription('The value of this object provides the label of the TEC Temperature Shutdown Status parameter.')
edfavalueTECTempShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 4, 3, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfavalueTECTempShutdown.setStatus('mandatory')
if mibBuilder.loadTexts: edfavalueTECTempShutdown.setDescription('The value of this object provides the current state of the parameter (0-Ok, 1-Undetermined 2-Warning, 3-Minor, 4-Major, 5-Critical).')
edfastateflagTECTempShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 4, 3, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfastateflagTECTempShutdown.setStatus('mandatory')
if mibBuilder.loadTexts: edfastateflagTECTempShutdown.setDescription('The value of this object provides the state of the the parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
edfalabelTECShutOverride = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 4, 3, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfalabelTECShutOverride.setStatus('optional')
if mibBuilder.loadTexts: edfalabelTECShutOverride.setDescription('The value of this object provides the label of the TEC Shutdown Override Status parameter.')
edfavalueTECShutOverride = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 4, 3, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfavalueTECShutOverride.setStatus('mandatory')
if mibBuilder.loadTexts: edfavalueTECShutOverride.setDescription('The value of this object provides the current state of the parameter (0-Ok, 1-Undetermined 2-Warning, 3-Minor, 4-Major, 5-Critical).')
edfastateflagTECShutOverride = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 4, 3, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfastateflagTECShutOverride.setStatus('mandatory')
if mibBuilder.loadTexts: edfastateflagTECShutOverride.setDescription('The value of this object provides the state of the the parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
edfalabelPowerFail = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 4, 3, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfalabelPowerFail.setStatus('optional')
if mibBuilder.loadTexts: edfalabelPowerFail.setDescription('The value of this object provides the label of the Power Supply Fail Status parameter.')
edfavaluePowerFail = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 4, 3, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfavaluePowerFail.setStatus('mandatory')
if mibBuilder.loadTexts: edfavaluePowerFail.setDescription('The value of this object provides the current state of the parameter (0-Ok, 1-Undetermined 2-Warning, 3-Minor, 4-Major, 5-Critical).')
edfastateflagPowerFail = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 4, 3, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfastateflagPowerFail.setStatus('mandatory')
if mibBuilder.loadTexts: edfastateflagPowerFail.setDescription('The value of this object provides the state of the the parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
edfalabelKeySwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 4, 3, 29), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfalabelKeySwitch.setStatus('optional')
if mibBuilder.loadTexts: edfalabelKeySwitch.setDescription('The value of this object provides the label of the Key Switch Setting Status parameter.')
edfavalueKeySwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 4, 3, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfavalueKeySwitch.setStatus('mandatory')
if mibBuilder.loadTexts: edfavalueKeySwitch.setDescription('The value of this object provides the current state of the parameter (0-Ok, 1-Undetermined 2-Warning, 3-Minor, 4-Major, 5-Critical).')
edfastateflagKeySwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 4, 3, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfastateflagKeySwitch.setStatus('mandatory')
if mibBuilder.loadTexts: edfastateflagKeySwitch.setDescription('The value of this object provides the state of the the parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
edfalabelLaserCurrShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 4, 3, 32), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfalabelLaserCurrShutdown.setStatus('optional')
if mibBuilder.loadTexts: edfalabelLaserCurrShutdown.setDescription('The value of this object provides the label of the Laser Current Shutdown Status parameter.')
edfavalueLaserCurrShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 4, 3, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfavalueLaserCurrShutdown.setStatus('mandatory')
if mibBuilder.loadTexts: edfavalueLaserCurrShutdown.setDescription('The value of this object provides the current state of the parameter (0-Ok, 1-Undetermined 2-Warning, 3-Minor, 4-Major, 5-Critical).')
edfastateflagLaserCurrShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 4, 3, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfastateflagLaserCurrShutdown.setStatus('mandatory')
if mibBuilder.loadTexts: edfastateflagLaserCurrShutdown.setDescription('The value of this object provides the state of the the parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
edfalabelLaserPowShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 4, 3, 35), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfalabelLaserPowShutdown.setStatus('optional')
if mibBuilder.loadTexts: edfalabelLaserPowShutdown.setDescription('The value of this object provides the label of the Laser Power Shutdown Status parameter.')
edfavalueLaserPowShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 4, 3, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfavalueLaserPowShutdown.setStatus('mandatory')
if mibBuilder.loadTexts: edfavalueLaserPowShutdown.setDescription('The value of this object provides the current state of the parameter (0-Ok, 1-Undetermined 2-Warning, 3-Minor, 4-Major, 5-Critical).')
edfastateflagLaserPowShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 4, 3, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfastateflagLaserPowShutdown.setStatus('mandatory')
if mibBuilder.loadTexts: edfastateflagLaserPowShutdown.setDescription('The value of this object provides the state of the the parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
edfalabelADCStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 4, 3, 38), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfalabelADCStatus.setStatus('optional')
if mibBuilder.loadTexts: edfalabelADCStatus.setDescription('The value of this object provides the label of the ADC Operation Status parameter.')
edfavalueADCStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 4, 3, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfavalueADCStatus.setStatus('mandatory')
if mibBuilder.loadTexts: edfavalueADCStatus.setDescription('The value of this object provides the current state of the parameter (0-Ok, 1-Undetermined 2-Warning, 3-Minor, 4-Major, 5-Critical).')
edfastateflagADCStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 4, 3, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfastateflagADCStatus.setStatus('mandatory')
if mibBuilder.loadTexts: edfastateflagADCStatus.setDescription('The value of this object provides the state of the the parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
edfalabelConstGainStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 4, 3, 41), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfalabelConstGainStatus.setStatus('optional')
if mibBuilder.loadTexts: edfalabelConstGainStatus.setDescription('The value of this object provides the label of the Constant Gain Status parameter.')
edfavalueConstGainStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 4, 3, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfavalueConstGainStatus.setStatus('mandatory')
if mibBuilder.loadTexts: edfavalueConstGainStatus.setDescription('The value of this object provides the current state of the parameter (0-Ok, 1-Undetermined 2-Warning, 3-Minor, 4-Major, 5-Critical).')
edfastateflagConstGainStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 4, 3, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfastateflagConstGainStatus.setStatus('mandatory')
if mibBuilder.loadTexts: edfastateflagConstGainStatus.setDescription('The value of this object provides the state of the the parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
edfalabelStandbyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 4, 3, 44), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfalabelStandbyStatus.setStatus('optional')
if mibBuilder.loadTexts: edfalabelStandbyStatus.setDescription('The value of this object provides the label of the Standby Status parameter.')
edfavalueStandbyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 4, 3, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfavalueStandbyStatus.setStatus('mandatory')
if mibBuilder.loadTexts: edfavalueStandbyStatus.setDescription('The value of this object provides the current state of the parameter (0-Ok, 1-Undetermined 2-Warning, 3-Minor, 4-Major, 5-Critical).')
edfastateflagStandbyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 4, 3, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfastateflagStandbyStatus.setStatus('mandatory')
if mibBuilder.loadTexts: edfastateflagStandbyStatus.setDescription('The value of this object provides the state of the the parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
edfagx2EDFAFactoryTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 5, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfagx2EDFAFactoryTableIndex.setStatus('mandatory')
if mibBuilder.loadTexts: edfagx2EDFAFactoryTableIndex.setDescription('The value of this object identifies the network element. This index is equal to the hfcCommonTableIndex for the same element.')
edfabootControlByte = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 5, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfabootControlByte.setStatus('mandatory')
if mibBuilder.loadTexts: edfabootControlByte.setDescription('The value of this object indicates which bank the firmware is currently being boot from.')
edfabootStatusByte = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 5, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfabootStatusByte.setStatus('mandatory')
if mibBuilder.loadTexts: edfabootStatusByte.setDescription('This object indicates the status of the last boot')
edfabank0CRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 5, 4, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfabank0CRC.setStatus('mandatory')
if mibBuilder.loadTexts: edfabank0CRC.setDescription('This object provides the CRC code of bank 0.')
edfabank1CRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 5, 4, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfabank1CRC.setStatus('mandatory')
if mibBuilder.loadTexts: edfabank1CRC.setDescription('This object provides the CRC code of bank 1.')
edfaprgEEPROMByte = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 5, 4, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfaprgEEPROMByte.setStatus('mandatory')
if mibBuilder.loadTexts: edfaprgEEPROMByte.setDescription('This object indicates if the EEPROM has been programmed')
edfafactoryCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 5, 4, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfafactoryCRC.setStatus('mandatory')
if mibBuilder.loadTexts: edfafactoryCRC.setDescription('This object provides the CRC code for the Factory data.')
edfacalculateCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 5, 4, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("factory", 1), ("calibration", 2), ("alarmdata", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfacalculateCRC.setStatus('mandatory')
if mibBuilder.loadTexts: edfacalculateCRC.setDescription('This object indicates which of the Emnums will have the CRC calculated.')
edfahourMeter = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 5, 4, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfahourMeter.setStatus('mandatory')
if mibBuilder.loadTexts: edfahourMeter.setDescription('This object provides the hour meter reading of the module.')
edfaflashPrgCntA = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 5, 4, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfaflashPrgCntA.setStatus('mandatory')
if mibBuilder.loadTexts: edfaflashPrgCntA.setDescription('This object provides the number of times the flash has been programmed on side A.')
edfaflashPrgCntB = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 5, 4, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfaflashPrgCntB.setStatus('mandatory')
if mibBuilder.loadTexts: edfaflashPrgCntB.setDescription('This object provides the number of times the flash has been programmed on side B.')
edfafwRev0 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 5, 4, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfafwRev0.setStatus('mandatory')
if mibBuilder.loadTexts: edfafwRev0.setDescription('This object provides the Revision of the firmware stores in bank 0.')
edfafwRev1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 5, 4, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: edfafwRev1.setStatus('mandatory')
if mibBuilder.loadTexts: edfafwRev1.setDescription('This object provides the Revision of the firmware stores in bank 1.')
gx2EDFAHoldTimeTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 6, 5, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gx2EDFAHoldTimeTableIndex.setStatus('mandatory')
if mibBuilder.loadTexts: gx2EDFAHoldTimeTableIndex.setDescription('The value of this object is the index of the data object.')
gx2EDFAHoldTimeSpecIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 6, 5, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gx2EDFAHoldTimeSpecIndex.setStatus('mandatory')
if mibBuilder.loadTexts: gx2EDFAHoldTimeSpecIndex.setDescription('The value of this object identifies the index of the alarm object to be modified.')
gx2EDFAHoldTimeData = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11, 6, 5, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gx2EDFAHoldTimeData.setStatus('mandatory')
if mibBuilder.loadTexts: gx2EDFAHoldTimeData.setDescription('The value of this object provides access to the hold timers used to suppress nose on analog objects. This object is a 32 bit object. Validation data is entered into bytes zero and one of the object. Bytes three and four are used to entering the hold time for the specified alarm object. The Hold timer data ranges from 0 to 1300 seconds. The index of this object corresponds to the alarm object to be modified. Alarm Hold timers correspond to the index of this object as follows: Index 1 = xxx, index 2 = xxxx, Index 3 = xxxx, The hold time is represented in seconds.')
trapEDFAConfigChangeInteger = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11) + (0,1)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapEDFAConfigChangeInteger.setDescription("This trap is issued if configuration of a single variable with integer type was changed (via ANY interface). TrapChangedValueInteger variable may contain current reading of that variable. trapPerceivedSeverity - 'indeterminate'")
trapEDFAConfigChangeDisplayString = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11) + (0,2)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueDisplayString"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapEDFAConfigChangeDisplayString.setDescription("This trap is issued if configuration of a single variable with DispalayString type was changed (via ANY interface). TrapChangedValueDisplayString variable may contain current reading of that variable. trapPerceivedSeverity - 'indeterminate'")
trapEDFAModuleTemperatureAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11) + (0,3)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapEDFAModuleTemperatureAlarm.setDescription("This trap is issued when the EDFA Module's Temperature goes out of range.")
trapEDFAOpticalInPowerAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11) + (0,4)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapEDFAOpticalInPowerAlarm.setDescription('This trap is issued when the input Optical Input Power parameter goes out of range.')
trapEDFAOpticalOutPowerAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11) + (0,5)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapEDFAOpticalOutPowerAlarm.setDescription('This trap is issued when the input Optical Output Power parameter goes out of range.')
trapEDFATECTemperatureAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11) + (0,6)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapEDFATECTemperatureAlarm.setDescription('This trap is issued when the EDFA TEC Temperature goes out of range.')
trapEDFATECCurrentAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11) + (0,7)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapEDFATECCurrentAlarm.setDescription('This trap is issued when the EDFA TEC Current goes out of range.')
trapEDFALaserCurrentAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11) + (0,8)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapEDFALaserCurrentAlarm.setDescription('This trap is issued when the EDFA Laser Current goes out of range.')
trapEDFALaserPowerAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11) + (0,9)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapEDFALaserPowerAlarm.setDescription('This trap is issued when the EDFA Laser Power goes out of range.')
trapEDFAPlus12CurrentAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11) + (0,10)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapEDFAPlus12CurrentAlarm.setDescription('This trap is issued when the EDFA 12 volt current parameter goes out of range.')
trapEDFAPlus37CurrentAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11) + (0,11)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapEDFAPlus37CurrentAlarm.setDescription('This trap is issued when the EDFA 3.7 volt current parameter goes out of range.')
trapEDFAFanCurrentAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11) + (0,12)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapEDFAFanCurrentAlarm.setDescription("This trap is issued when the EDFA Module's Fan Currrent parameter goes out of range.")
trapEDFAResetFacDefault = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11) + (0,13)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapEDFAResetFacDefault.setDescription('This trap is issued when the EDFA resets to factory defaults')
trapEDFAStandbyMode = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11) + (0,14)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapEDFAStandbyMode.setDescription('This trap is issued when the EDFA is in Standby Mode.')
trapEDFAOptInShutdown = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11) + (0,15)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapEDFAOptInShutdown.setDescription('This trap is issued when the EDFA is in Optical Input Shutdown.')
trapEDFATECTempShutdown = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11) + (0,16)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapEDFATECTempShutdown.setDescription('This trap is issued when the EDFA is in TEC Temperature Shutdown.')
trapEDFAKeySwitch = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11) + (0,17)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapEDFAKeySwitch.setDescription('This trap is issued when the Key Switch disables the EDFA.')
trapEDFAPowerFail = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11) + (0,18)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapEDFAPowerFail.setDescription('This trap is issued when there is an EDFA Power Supply Failure.')
trapEDFALasCurrShutdown = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11) + (0,19)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapEDFALasCurrShutdown.setDescription('This trap is issued when the EDFA is in Laser Current Shutdown.')
trapEDFALasPowerShutdown = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11) + (0,20)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapEDFALasPowerShutdown.setDescription('This trap is issued when the EDFA is in Laser Power Shutdown.')
trapEDFAInvalidMode = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11) + (0,21)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapEDFAInvalidMode.setDescription('This trap is issued when the EDFA is in an invalid mode.')
trapEDFAFlashAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11) + (0,22)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapEDFAFlashAlarm.setDescription("This trap is issued when the EDFA Module's boot or flash programming sequence has detected a Flash error.")
trapEDFABoot0Alarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11) + (0,23)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapEDFABoot0Alarm.setDescription("This trap is issued when the EDFA Module's Bank 0 Boot sequence has detected an error.")
trapEDFABoot1Alarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11) + (0,24)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapEDFABoot1Alarm.setDescription("This trap is issued when the EDFA Module's Bank 1 Boot sequence has detected an error.")
trapEDFAAlarmDataCRCAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11) + (0,25)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapEDFAAlarmDataCRCAlarm.setDescription('This trap is issued when the EDFA Module detects an error calculating the alarm limit CRC.')
trapEDFAFactoryDataCRCAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11) + (0,26)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapEDFAFactoryDataCRCAlarm.setDescription('This trap is issued when the EDFA Module detects an error calculating the Factory data CRC.')
trapEDFACalDataCRCAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11) + (0,27)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapEDFACalDataCRCAlarm.setDescription('This trap is issued when the EDFA Module detects an error calculating the Calibration data CRC.')
trapEDFAFacCalFloatAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11) + (0,28)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapEDFAFacCalFloatAlarm.setDescription('This trap is issued when the EDFA Module detects factory calibration float data alarm.')
trapEDFAOptInThreshAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11) + (0,29)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapEDFAOptInThreshAlarm.setDescription('This trap is issued when the EDFA Module Optical Input drops below the user set threshold.')
trapEDFAGainErrorAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 11) + (0,30)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapEDFAGainErrorAlarm.setDescription('This trap is issued when the EDFA Module cannot produce the desired user set gain in Constant Gain Set Mode.')
mibBuilder.exportSymbols("OMNI-gx2EDFA-MIB", edfalabelADCStatus=edfalabelADCStatus, edfalabelLPSetting=edfalabelLPSetting, trapEDFAOpticalInPowerAlarm=trapEDFAOpticalInPowerAlarm, trapEDFAModuleTemperatureAlarm=trapEDFAModuleTemperatureAlarm, edfaminValueLaserCurrent=edfaminValueLaserCurrent, edfavalueBoot=edfavalueBoot, edfalabelPowerFail=edfalabelPowerFail, edfaminorLowLaserPower=edfaminorLowLaserPower, edfabootStatusByte=edfabootStatusByte, edfavalueFlash=edfavalueFlash, edfavalueOptInShutdown=edfavalueOptInShutdown, edfaminorHigh37Volt=edfaminorHigh37Volt, edfamaxValueOptOutPower=edfamaxValueOptOutPower, edfaminorLowTECCurrent=edfaminorLowTECCurrent, edfauomLPSetting=edfauomLPSetting, edfavalueTECTempShutdown=edfavalueTECTempShutdown, edfavalueLaserCurrShutdown=edfavalueLaserCurrShutdown, edfaminorHighOptOutPower=edfaminorHighOptOutPower, edfaalarmStateFanCurrent=edfaalarmStateFanCurrent, trapEDFALasCurrShutdown=trapEDFALasCurrShutdown, gx2EDFAStatusEntry=gx2EDFAStatusEntry, edfaminorHighLaserCurrent=edfaminorHighLaserCurrent, edfastateFlagFanCurrent=edfastateFlagFanCurrent, gx2EDFAStatusTable=gx2EDFAStatusTable, edfaminorLowOPSetting=edfaminorLowOPSetting, edfacurrentValueOptOutPower=edfacurrentValueOptOutPower, edfaalarmStateOptThreshold=edfaalarmStateOptThreshold, edfauomModTemp=edfauomModTemp, edfaminValueTECTemp=edfaminValueTECTemp, edfastateflagTECShutOverride=edfastateflagTECShutOverride, edfamaxValueModTemp=edfamaxValueModTemp, edfamajorHighOptInPower=edfamajorHighOptInPower, edfaminorLowLPSetting=edfaminorLowLPSetting, edfaminorLow37Volt=edfaminorLow37Volt, edfaminorLowModTemp=edfaminorLowModTemp, edfaminorHighCGSetting=edfaminorHighCGSetting, edfalabelTECTemp=edfalabelTECTemp, edfaminValueLaserPower=edfaminValueLaserPower, edfaminValue12Volt=edfaminValue12Volt, edfacurrentValueOPSetting=edfacurrentValueOPSetting, Float=Float, edfastateflagFactoryDataCRC=edfastateflagFactoryDataCRC, trapEDFAAlarmDataCRCAlarm=trapEDFAAlarmDataCRCAlarm, trapEDFATECCurrentAlarm=trapEDFATECCurrentAlarm, edfastateFlagLaserCurrent=edfastateFlagLaserCurrent, edfacurrentValueLaserPower=edfacurrentValueLaserPower, trapEDFAFanCurrentAlarm=trapEDFAFanCurrentAlarm, edfamajorHighCGSetting=edfamajorHighCGSetting, edfamajorLowOptOutPower=edfamajorLowOptOutPower, edfacurrentValueModTemp=edfacurrentValueModTemp, edfamaxValueFanCurrent=edfamaxValueFanCurrent, edfavalueModeSetting=edfavalueModeSetting, edfaminorHighOPSetting=edfaminorHighOPSetting, edfamajorHighOptOutPower=edfamajorHighOptOutPower, edfalabelConstGainStatus=edfalabelConstGainStatus, edfaminorLowTECTemp=edfaminorLowTECTemp, edfalabelModeSetting=edfalabelModeSetting, edfauom37Volt=edfauom37Volt, edfamaxValue12Volt=edfamaxValue12Volt, edfaalarmStateLaserCurrent=edfaalarmStateLaserCurrent, edfamaxValueCGSetting=edfamaxValueCGSetting, edfauomOptOutPower=edfauomOptOutPower, edfalabelTECTempShutdown=edfalabelTECTempShutdown, trapEDFAConfigChangeInteger=trapEDFAConfigChangeInteger, edfacurrentValue37Volt=edfacurrentValue37Volt, edfavalueConstGainStatus=edfavalueConstGainStatus, edfamaxValueTECTemp=edfamaxValueTECTemp, edfavalueLaserPowShutdown=edfavalueLaserPowShutdown, edfamajorLowCGSetting=edfamajorLowCGSetting, edfastateFlagModTemp=edfastateFlagModTemp, edfaalarmStateOptOutPower=edfaalarmStateOptOutPower, edfalabelTECCurrent=edfalabelTECCurrent, edfamajorLowLaserPower=edfamajorLowLaserPower, edfaenumFactoryDefault=edfaenumFactoryDefault, edfamaxValueLaserPower=edfamaxValueLaserPower, edfaminValueOPSetting=edfaminValueOPSetting, edfamajorLowOptInPower=edfamajorLowOptInPower, edfaminorLowOptThreshold=edfaminorLowOptThreshold, edfalabelFlash=edfalabelFlash, edfalabelFactoryDataCRC=edfalabelFactoryDataCRC, trapEDFAFacCalFloatAlarm=trapEDFAFacCalFloatAlarm, edfavalueKeySwitch=edfavalueKeySwitch, edfauomOptInPower=edfauomOptInPower, gx2EDFAAnalogTable=gx2EDFAAnalogTable, edfavalueFactoryDefault=edfavalueFactoryDefault, edfauomOPSetting=edfauomOPSetting, edfaalarmStateOPSetting=edfaalarmStateOPSetting, trapEDFALaserPowerAlarm=trapEDFALaserPowerAlarm, edfalabelFactoryDefault=edfalabelFactoryDefault, edfamajorLowModTemp=edfamajorLowModTemp, edfabank1CRC=edfabank1CRC, trapEDFAGainErrorAlarm=trapEDFAGainErrorAlarm, edfamajorHighOptThreshold=edfamajorHighOptThreshold, edfamajorHighLaserCurrent=edfamajorHighLaserCurrent, trapEDFAOpticalOutPowerAlarm=trapEDFAOpticalOutPowerAlarm, edfaminorHighModTemp=edfaminorHighModTemp, edfacurrentValueCGSetting=edfacurrentValueCGSetting, gx2EDFADigitalEntry=gx2EDFADigitalEntry, edfauomFanCurrent=edfauomFanCurrent, edfagx2EDFAAnalogTableIndex=edfagx2EDFAAnalogTableIndex, trapEDFALasPowerShutdown=trapEDFALasPowerShutdown, edfauomLaserPower=edfauomLaserPower, edfastateflagFlash=edfastateflagFlash, edfastateFlagOPSetting=edfastateFlagOPSetting, edfalabelModTemp=edfalabelModTemp, edfamajorHigh37Volt=edfamajorHigh37Volt, edfavalueCalibrationDataCRC=edfavalueCalibrationDataCRC, trapEDFATECTemperatureAlarm=trapEDFATECTemperatureAlarm, edfaminorHighLaserPower=edfaminorHighLaserPower, trapEDFAInvalidMode=trapEDFAInvalidMode, edfafwRev0=edfafwRev0, edfalabelCalibrationDataCRC=edfalabelCalibrationDataCRC, edfauomLaserCurrent=edfauomLaserCurrent, edfalabelLaserPowShutdown=edfalabelLaserPowShutdown, edfauomTECCurrent=edfauomTECCurrent, edfamaxValueLPSetting=edfamaxValueLPSetting, edfastateFlagFactoryDefault=edfastateFlagFactoryDefault, edfalabelKeySwitch=edfalabelKeySwitch, edfavalueStandbyStatus=edfavalueStandbyStatus, edfastateFlagTECTemp=edfastateFlagTECTemp, trapEDFABoot0Alarm=trapEDFABoot0Alarm, edfastateFlagOptOutPower=edfastateFlagOptOutPower, edfamajorHighTECTemp=edfamajorHighTECTemp, gx2EDFAFactoryEntry=gx2EDFAFactoryEntry, trapEDFAStandbyMode=trapEDFAStandbyMode, edfacurrentValueTECTemp=edfacurrentValueTECTemp, edfamajorHighLaserPower=edfamajorHighLaserPower, edfamajorLowFanCurrent=edfamajorLowFanCurrent, gx2EDFAHoldTimeData=gx2EDFAHoldTimeData, edfamajorLowLPSetting=edfamajorLowLPSetting, trapEDFAPowerFail=trapEDFAPowerFail, edfastateFlagOptInPower=edfastateFlagOptInPower, edfaminValueOptOutPower=edfaminValueOptOutPower, edfalabelBoot=edfalabelBoot, edfamajorHigh12Volt=edfamajorHigh12Volt, edfastateflagPowerFail=edfastateflagPowerFail, edfastateflagADCStatus=edfastateflagADCStatus, edfabootControlByte=edfabootControlByte, edfauomCGSetting=edfauomCGSetting, edfastateflagStandbyStatus=edfastateflagStandbyStatus, edfastateFlagLaserPower=edfastateFlagLaserPower, edfastateFlagModeSetting=edfastateFlagModeSetting, edfaminorLow12Volt=edfaminorLow12Volt, gx2EDFAHoldTimeTableIndex=gx2EDFAHoldTimeTableIndex, edfavalueModuleState=edfavalueModuleState, edfaminValueCGSetting=edfaminValueCGSetting, edfalabelStandbyStatus=edfalabelStandbyStatus, edfacurrentValueOptInPower=edfacurrentValueOptInPower, edfagx2EDFAStatusTableIndex=edfagx2EDFAStatusTableIndex, edfauomTECTemp=edfauomTECTemp, edfastateFlagTECCurrent=edfastateFlagTECCurrent, edfaminorHighLPSetting=edfaminorHighLPSetting, edfavalueADCStatus=edfavalueADCStatus, trapEDFABoot1Alarm=trapEDFABoot1Alarm, gx2EDFAFactoryTable=gx2EDFAFactoryTable, trapEDFAOptInThreshAlarm=trapEDFAOptInThreshAlarm, gx2EDFAAnalogEntry=gx2EDFAAnalogEntry, edfalabelOPSetting=edfalabelOPSetting, edfalabelFanCurrent=edfalabelFanCurrent, edfamajorLowOptThreshold=edfamajorLowOptThreshold, edfalabelOptThreshold=edfalabelOptThreshold, edfavalueTECShutOverride=edfavalueTECShutOverride, edfamajorHighFanCurrent=edfamajorHighFanCurrent, edfafactoryCRC=edfafactoryCRC, edfamajorHighModTemp=edfamajorHighModTemp, edfacurrentValueFanCurrent=edfacurrentValueFanCurrent, edfaenumModeSetting=edfaenumModeSetting, trapEDFAFactoryDataCRCAlarm=trapEDFAFactoryDataCRCAlarm, edfaminValue37Volt=edfaminValue37Volt, edfaflashPrgCntA=edfaflashPrgCntA, edfaalarmStateLPSetting=edfaalarmStateLPSetting, edfaalarmState12Volt=edfaalarmState12Volt, edfaminorHighFanCurrent=edfaminorHighFanCurrent, gx2EDFAHoldTimeTable=gx2EDFAHoldTimeTable, edfastateFlagModuleState=edfastateFlagModuleState, edfastateFlagOptThreshold=edfastateFlagOptThreshold, edfastateflagAlarmDataCRC=edfastateflagAlarmDataCRC, edfamaxValue37Volt=edfamaxValue37Volt, edfaminValueLPSetting=edfaminValueLPSetting, edfastateflagLaserCurrShutdown=edfastateflagLaserCurrShutdown, edfamajorLow12Volt=edfamajorLow12Volt, trapEDFAResetFacDefault=trapEDFAResetFacDefault, trapEDFALaserCurrentAlarm=trapEDFALaserCurrentAlarm, gx2EDFADescriptor=gx2EDFADescriptor, edfalabelLaserCurrShutdown=edfalabelLaserCurrShutdown, edfaalarmStateOptInPower=edfaalarmStateOptInPower, edfastateflagOptInShutdown=edfastateflagOptInShutdown, edfacurrentValue12Volt=edfacurrentValue12Volt, edfastateflagTECTempShutdown=edfastateflagTECTempShutdown, edfacurrentValueLPSetting=edfacurrentValueLPSetting, edfaminValueOptThreshold=edfaminValueOptThreshold, edfacalculateCRC=edfacalculateCRC, edfahourMeter=edfahourMeter, edfalabelOptInShutdown=edfalabelOptInShutdown, edfabank0CRC=edfabank0CRC, gx2EDFAHoldTimeEntry=gx2EDFAHoldTimeEntry, edfastateflagLaserPowShutdown=edfastateflagLaserPowShutdown, trapEDFAFlashAlarm=trapEDFAFlashAlarm, edfaminorHighTECTemp=edfaminorHighTECTemp, edfalabel37Volt=edfalabel37Volt, edfamajorHighLPSetting=edfamajorHighLPSetting, edfaminorHigh12Volt=edfaminorHigh12Volt, edfastateflagKeySwitch=edfastateflagKeySwitch, edfaalarmStateModTemp=edfaalarmStateModTemp, edfaalarmStateTECCurrent=edfaalarmStateTECCurrent, gx2EDFAHoldTimeSpecIndex=gx2EDFAHoldTimeSpecIndex, edfafwRev1=edfafwRev1, gx2EDFADigitalTable=gx2EDFADigitalTable, edfalabelLaserCurrent=edfalabelLaserCurrent, edfamaxValueLaserCurrent=edfamaxValueLaserCurrent, edfaalarmStateTECTemp=edfaalarmStateTECTemp, edfaprgEEPROMByte=edfaprgEEPROMByte, edfaminValueOptInPower=edfaminValueOptInPower, edfaminValueModTemp=edfaminValueModTemp, trapEDFAPlus12CurrentAlarm=trapEDFAPlus12CurrentAlarm, edfaminorLowOptOutPower=edfaminorLowOptOutPower, edfastateflagCalibrationDataCRC=edfastateflagCalibrationDataCRC, edfastateFlag37Volt=edfastateFlag37Volt, trapEDFATECTempShutdown=trapEDFATECTempShutdown, edfamajorLowOPSetting=edfamajorLowOPSetting, edfaminorHighOptThreshold=edfaminorHighOptThreshold, edfaalarmStateCGSetting=edfaalarmStateCGSetting, trapEDFAPlus37CurrentAlarm=trapEDFAPlus37CurrentAlarm, edfaalarmState37Volt=edfaalarmState37Volt, edfavalueFactoryDataCRC=edfavalueFactoryDataCRC, trapEDFAOptInShutdown=trapEDFAOptInShutdown, edfacurrentValueOptThreshold=edfacurrentValueOptThreshold, edfalabelOptInPower=edfalabelOptInPower, edfaminorLowFanCurrent=edfaminorLowFanCurrent, edfamaxValueOptInPower=edfamaxValueOptInPower, edfastateFlag12Volt=edfastateFlag12Volt, edfalabelCGSetting=edfalabelCGSetting, edfalabelModuleState=edfalabelModuleState, edfavalueAlarmDataCRC=edfavalueAlarmDataCRC, trapEDFAKeySwitch=trapEDFAKeySwitch, edfaminValueFanCurrent=edfaminValueFanCurrent, edfamaxValueOptThreshold=edfamaxValueOptThreshold, edfaminValueTECCurrent=edfaminValueTECCurrent, edfaminorLowCGSetting=edfaminorLowCGSetting, edfauom12Volt=edfauom12Volt, edfamajorLowLaserCurrent=edfamajorLowLaserCurrent, edfaalarmStateLaserPower=edfaalarmStateLaserPower, edfamajorLow37Volt=edfamajorLow37Volt, edfamaxValueTECCurrent=edfamaxValueTECCurrent, edfacurrentValueTECCurrent=edfacurrentValueTECCurrent, edfamajorHighOPSetting=edfamajorHighOPSetting, edfaenumModuleState=edfaenumModuleState, edfalabelLaserPower=edfalabelLaserPower, edfaminorLowOptInPower=edfaminorLowOptInPower, edfamajorLowTECCurrent=edfamajorLowTECCurrent, edfagx2EDFAFactoryTableIndex=edfagx2EDFAFactoryTableIndex, edfalabel12Volt=edfalabel12Volt, edfaflashPrgCntB=edfaflashPrgCntB, edfaminorLowLaserCurrent=edfaminorLowLaserCurrent)
mibBuilder.exportSymbols("OMNI-gx2EDFA-MIB", edfavaluePowerFail=edfavaluePowerFail, edfacurrentValueLaserCurrent=edfacurrentValueLaserCurrent, edfastateflagBoot=edfastateflagBoot, edfamajorLowTECTemp=edfamajorLowTECTemp, edfamajorHighTECCurrent=edfamajorHighTECCurrent, edfastateflagConstGainStatus=edfastateflagConstGainStatus, trapEDFACalDataCRCAlarm=trapEDFACalDataCRCAlarm, edfauomOptThreshold=edfauomOptThreshold, edfastateFlagCGSetting=edfastateFlagCGSetting, edfagx2EDFADigitalTableIndex=edfagx2EDFADigitalTableIndex, edfaminorHighOptInPower=edfaminorHighOptInPower, edfaminorHighTECCurrent=edfaminorHighTECCurrent, edfamaxValueOPSetting=edfamaxValueOPSetting, edfalabelAlarmDataCRC=edfalabelAlarmDataCRC, edfastateFlagLPSetting=edfastateFlagLPSetting, edfalabelTECShutOverride=edfalabelTECShutOverride, edfalabelOptOutPower=edfalabelOptOutPower, trapEDFAConfigChangeDisplayString=trapEDFAConfigChangeDisplayString)
