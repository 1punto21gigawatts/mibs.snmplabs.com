#
# PySNMP MIB module CXLlcFrConv-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CXLlcFrConv-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:33:04 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion")
cxLlcFrConv, Alias = mibBuilder.importSymbols("CXProduct-SMI", "cxLlcFrConv", "Alias")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Gauge32, Counter32, ModuleIdentity, IpAddress, iso, TimeTicks, NotificationType, Unsigned32, MibIdentifier, Integer32, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "Counter32", "ModuleIdentity", "IpAddress", "iso", "TimeTicks", "NotificationType", "Unsigned32", "MibIdentifier", "Integer32", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "Counter64")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
class MacAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

class SubRef(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 255)

llcfrcnvSysRouteConnectInterval = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 33, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 900)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llcfrcnvSysRouteConnectInterval.setStatus('mandatory')
if mibBuilder.loadTexts: llcfrcnvSysRouteConnectInterval.setDescription('Determines the number of seconds between route connection attempts by the LLC-2 Frame Relay Convergence layer. Range of Values: 10 - 900 seconds Default Value: 30 seconds Configuration Changed: administrative')
llcfrcnvMibLevel = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 33, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcfrcnvMibLevel.setStatus('mandatory')
if mibBuilder.loadTexts: llcfrcnvMibLevel.setDescription('Used to determine current MIB module release supported by the agent. Object is in decimal.')
llcfrcnvSapTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 33, 10), )
if mibBuilder.loadTexts: llcfrcnvSapTable.setStatus('mandatory')
if mibBuilder.loadTexts: llcfrcnvSapTable.setDescription('This table contains configuration information for each LLC-2 Frame Relay Convergence layer SAP (service access point).')
llcfrcnvSapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 33, 10, 1), ).setIndexNames((0, "CXLlcFrConv-MIB", "llcfrcnvSapNumber"))
if mibBuilder.loadTexts: llcfrcnvSapEntry.setStatus('mandatory')
if mibBuilder.loadTexts: llcfrcnvSapEntry.setDescription('Defines a row in the llcfrcnvSapTable. Each row contains the objects which define a service access point.')
llcfrcnvSapNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 33, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcfrcnvSapNumber.setStatus('mandatory')
if mibBuilder.loadTexts: llcfrcnvSapNumber.setDescription('Identifies this SAP (service access point) with a numerical value which must be unique for each LLC-2 Frame Relay Convergence SAP. Value 0 is allocated to the Public SAP (PSAP) used to interface with the FRIM module via IAM. The row associated with value 0 always exists and cannot be deleted. All other SAPs are used to communicate with other higher layer protocols.')
llcfrcnvSapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 33, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llcfrcnvSapRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: llcfrcnvSapRowStatus.setDescription('Determines the status of the objects in a table row. Options: invalid (1): Row is flagged, after next reset the values will be disabled and the row is deleted from the table valid (2): Values are enabled Configuration Changed: administrative')
llcfrcnvSapAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 33, 10, 1, 3), Alias()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llcfrcnvSapAlias.setStatus('mandatory')
if mibBuilder.loadTexts: llcfrcnvSapAlias.setDescription('Identifies this service access point by a textual name. Names must be unique across all service access points at all layers. Range of Values: 1 -16 alphanumeric characters (first character must be a letter) Default Value: none Configuration Changed: administrative')
llcfrcnvSapSrcLlcSap = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 33, 10, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 254)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llcfrcnvSapSrcLlcSap.setStatus('mandatory')
if mibBuilder.loadTexts: llcfrcnvSapSrcLlcSap.setDescription('Determines the source LLC-2 SAP address associated with this connection. Only even values are allowed (usually assigned as a multiple of 04 hexadecimal). This SAP address should not be confused with the internal SAP numbers used by the LLC-2 layer. Range of Values: 2 - 254 (even values only) Default Value: 4 Configuration Changed: administrative and operative')
llcfrcnvSapDstLlcSap = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 33, 10, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 254)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llcfrcnvSapDstLlcSap.setStatus('mandatory')
if mibBuilder.loadTexts: llcfrcnvSapDstLlcSap.setDescription('Determines the destination LLC-2 SAP address associated with this connection. Only even values are allowed (usually assigned as a multiple of 04 hexadecimal). This SAP address should not be confused with the internal SAP numbers used by the LLC-2 layer. Range of Values: 2 - 254 (even values only) Default Value: 4 Configuration Changed: administrative and operative')
llcfrcnvSapRouteIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 33, 10, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llcfrcnvSapRouteIndex.setStatus('mandatory')
if mibBuilder.loadTexts: llcfrcnvSapRouteIndex.setDescription('Determines the route associated with this SAP (service access point). The value of this object is the llcfrcnvSRIndex which identifies the route in the llcfrcnvSysRouteTable. Multiple SAP entries may use the same system route provided that they have a different llcfrcnvSapSrcLlcSap-llcfrcnvSapDstLlcSap pair. Range of Values: 0 - 64 Note: A value of 0 indicates no route is selected. Default Value: none Related Objects: llcfrcnvSRIndex llcfrcnvSapSrcLlcSap llcfrcnvSapDstLlcSap Configuration Changed: administrative and operative')
llcfrcnvSapControl = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 33, 10, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clearStats", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: llcfrcnvSapControl.setStatus('mandatory')
if mibBuilder.loadTexts: llcfrcnvSapControl.setDescription('Clears all objects that contain statistics for this service access point. Options: clearStats (1) Configuration Changed: administrative and operative')
llcfrcnvSapState = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 33, 10, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("offLine", 1), ("unbound", 2), ("bound", 3), ("connected", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcfrcnvSapState.setStatus('mandatory')
if mibBuilder.loadTexts: llcfrcnvSapState.setDescription('Indicates the status of the SAP (service access point). Options: offLine (1): Indicates that the SAP is not configured. unbound (2): Indicates that this SAP is not bound to its companion SAP. bound (3): Indicates that this SAP is bound to its companion SAP. connected (4):.Indicates that this SAP is bound and is available for data transfer.')
llcfrcnvSapTxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 33, 10, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcfrcnvSapTxFrames.setStatus('mandatory')
if mibBuilder.loadTexts: llcfrcnvSapTxFrames.setDescription('Indicates the number of frames transmitted by this service access point.')
llcfrcnvSapRxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 33, 10, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcfrcnvSapRxFrames.setStatus('mandatory')
if mibBuilder.loadTexts: llcfrcnvSapRxFrames.setDescription('Indicates the number of frames received by this service access point.')
llcfrcnvSapTxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 33, 10, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcfrcnvSapTxOctets.setStatus('mandatory')
if mibBuilder.loadTexts: llcfrcnvSapTxOctets.setDescription('Indicates the number of octets transmitted by this service access point.')
llcfrcnvSapRxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 33, 10, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcfrcnvSapRxOctets.setStatus('mandatory')
if mibBuilder.loadTexts: llcfrcnvSapRxOctets.setDescription('Indicates the number of octets received by this service access point.')
llcfrcnvSapUnopenedServiceDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 33, 10, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcfrcnvSapUnopenedServiceDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: llcfrcnvSapUnopenedServiceDiscards.setDescription('Indicates the number of frames received and discarded by this service access point because there was no associated connection.')
llcfrcnvSapTxResets = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 33, 10, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcfrcnvSapTxResets.setStatus('mandatory')
if mibBuilder.loadTexts: llcfrcnvSapTxResets.setDescription('Indicates the number of connection reset requests issued from this service access point.')
llcfrcnvSapRxResets = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 33, 10, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcfrcnvSapRxResets.setStatus('mandatory')
if mibBuilder.loadTexts: llcfrcnvSapRxResets.setDescription('Indicates the number of connection reset requests/indications received by this service access point.')
llcfrcnvSapHostMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 33, 10, 1, 16), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llcfrcnvSapHostMacAddr.setStatus('mandatory')
if mibBuilder.loadTexts: llcfrcnvSapHostMacAddr.setDescription('This object specifies the MAC address of the host station to which the FR LLC-2 connection will be established - Used only for SNA BAN Transport. If this object is configured, then it is automatically assumed that BAN will be the SNA transport used. Otherwise, the SNA transport is BNN.')
llcfrcnvSapCntrMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 33, 10, 1, 17), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llcfrcnvSapCntrMacAddr.setStatus('mandatory')
if mibBuilder.loadTexts: llcfrcnvSapCntrMacAddr.setDescription('This object specifies the MAC address of the work station which will be connected to the host - Used only for SNA BAN Transport. If this object is configured, then it is automatically assumed that BAN will be the SNA transport used. Otherwise, the SNA transport is BNN.')
llcfrcnvSysRouteTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 33, 11), )
if mibBuilder.loadTexts: llcfrcnvSysRouteTable.setStatus('mandatory')
if mibBuilder.loadTexts: llcfrcnvSysRouteTable.setDescription('This table contains information about each LLC-2 FR Convergence system route.')
llcfrcnvSysRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 33, 11, 1), ).setIndexNames((0, "CXLlcFrConv-MIB", "llcfrcnvSRIndex"))
if mibBuilder.loadTexts: llcfrcnvSysRouteEntry.setStatus('mandatory')
if mibBuilder.loadTexts: llcfrcnvSysRouteEntry.setDescription('Defines a row in the llcfrcnvSysRouteTable. Each row contains the objects which define an LLC-2 FR Convergence system route.')
llcfrcnvSRIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 33, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcfrcnvSRIndex.setStatus('mandatory')
if mibBuilder.loadTexts: llcfrcnvSRIndex.setDescription('A number that uniquely identifies each LLC-2 Frame Relay Convergence Route. Related Objects: llcfrcnvSapRouteIndex Range of Values: 0 - 64')
llcfrcnvSRRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 33, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llcfrcnvSRRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: llcfrcnvSRRowStatus.setDescription('Determines the status of the objects in a table row. Options: invalid (1): Row is flagged, after next reset the values will be disabled and the row is deleted from the table valid (2): Values are enabled Default Value: none Configuration Changed: administrative')
llcfrcnvSRDestAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 33, 11, 1, 3), Alias()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llcfrcnvSRDestAlias.setStatus('mandatory')
if mibBuilder.loadTexts: llcfrcnvSRDestAlias.setDescription('Identifies the textual name of the destination service this route connects to. The destination alias is the name of the Frame Relay layer outlet circuit (frpCircuitAlias). Range of Values: 1 -16 alphanumeric characters (first character must be a letter) Default Value: none Configuration Changed: administrative and operative')
llcfrcnvSRControl = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 33, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clearStats", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: llcfrcnvSRControl.setStatus('mandatory')
if mibBuilder.loadTexts: llcfrcnvSRControl.setDescription('Permits control of a specific SAP (service access point). Options: clearStats (1): Clear all statistics stored by statistics objects. Configuration Changed: administrative and operative')
llcfrcnvSRPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 33, 11, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("discard", 1), ("forward", 2), ("priority-low", 3), ("priority-high", 4))).clone('forward')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llcfrcnvSRPriority.setStatus('mandatory')
if mibBuilder.loadTexts: llcfrcnvSRPriority.setDescription('Determines the filtering/forwarding action and the forwarding priority for data sent from the STP bridge. Options: discard (1): Do not forward the data. forward (2): Forward the data. priority-low (3): Forward with a low priority (Frame Relay only). priority-high (4): Forward with a high priority (Frame Relay only). Default Value: forward (2) Configuration Changed: Administrative')
llcfrcnvSRSubRef = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 33, 11, 1, 6), SubRef()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llcfrcnvSRSubRef.setStatus('mandatory')
if mibBuilder.loadTexts: llcfrcnvSRSubRef.setDescription('Specifies a reference number that uniquely identifies this route. This number is used by the FRIM (Frame Relay Interface Module) to identify routes using the same DLCI (enables PVC consolidation). This number must be unique for all routes sharing the same DLCI. Range of Values: 1 - 255 (when using PVC consolidation) 0 (when not using PVC consolidation) Default Value: 0 Configuration Changed: administrative and operative')
llcfrcnvSRRouteStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 33, 11, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("offLine", 1), ("notConnected", 2), ("inProgress", 3), ("connected", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcfrcnvSRRouteStatus.setStatus('mandatory')
if mibBuilder.loadTexts: llcfrcnvSRRouteStatus.setDescription('Indicates the status of this route. Options: offLine (1): Indicates that the route is not configured. notConnected (2): Indicates that the remote destination may not exist, or has refused the connection. inProgress (3): Indicates that the connection is in the process of being established. This is a transient state. connected (4): Indicates that the connection is established and is ready for data transfer.')
llcfrcnvSRClearStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 33, 11, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("noFailure", 1), ("internalError", 2), ("remoteAllocFailure", 3), ("remoteNoAccess", 4), ("remotePvcDown", 5), ("remotePvcBusy", 6), ("localFcnFailure", 7), ("remoteFcnFailure", 8), ("remoteAliasNotFound", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcfrcnvSRClearStatus.setStatus('mandatory')
if mibBuilder.loadTexts: llcfrcnvSRClearStatus.setDescription('Indicates the status of a failed connection. The value of this object is only valid only between attempts to establish the route connection (llcfrcnvSRRouteStatus = notConnected), and may or may not change after successive failed attempts. Options: noFailure (1): Once a system route has been successfully connected, this value is maintained for the duration of the connection. internalError (2): An internal error has occurred. remoteAllocFailure (3): There is insufficient memory available for FRIM to establish this connection. remoteNoAccess (4): The requested frame relay service does not exist. remotePvcDown (5): The requested Frame Relay outlet circuit is down. remotePvcBusy (6): The requested Frame Relay outlet circuit is already connected. localFcnFailure (7): Flow control negotiation failed. remoteFcnFailure (8): Flow control negotiation failed at the Frame Relay layer. remoteAliasNotFound (9): The destination service alias (llcfrcnvSRDestAlias) does not exist.')
llcfrcnvSROutSuccessfullConnects = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 33, 11, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcfrcnvSROutSuccessfullConnects.setStatus('mandatory')
if mibBuilder.loadTexts: llcfrcnvSROutSuccessfullConnects.setDescription('Indicates the number of successful connections originated for this route. An outgoing connection is always attempted from LLC-2 Frame Relay Convergence to FRIM.')
llcfrcnvSROutUnsuccessfullConnects = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 33, 11, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcfrcnvSROutUnsuccessfullConnects.setStatus('mandatory')
if mibBuilder.loadTexts: llcfrcnvSROutUnsuccessfullConnects.setDescription('Indicates the number of unsuccessful connections originated for this route. An outgoing connection is always attempted from LLC-2 Frame Relay Convergence to FRIM.')
mibBuilder.exportSymbols("CXLlcFrConv-MIB", llcfrcnvSapSrcLlcSap=llcfrcnvSapSrcLlcSap, llcfrcnvSysRouteEntry=llcfrcnvSysRouteEntry, llcfrcnvSapState=llcfrcnvSapState, llcfrcnvSapRxFrames=llcfrcnvSapRxFrames, llcfrcnvSapCntrMacAddr=llcfrcnvSapCntrMacAddr, llcfrcnvMibLevel=llcfrcnvMibLevel, llcfrcnvSysRouteTable=llcfrcnvSysRouteTable, llcfrcnvSRSubRef=llcfrcnvSRSubRef, llcfrcnvSROutSuccessfullConnects=llcfrcnvSROutSuccessfullConnects, llcfrcnvSRDestAlias=llcfrcnvSRDestAlias, llcfrcnvSapNumber=llcfrcnvSapNumber, llcfrcnvSapRouteIndex=llcfrcnvSapRouteIndex, llcfrcnvSapTable=llcfrcnvSapTable, llcfrcnvSapEntry=llcfrcnvSapEntry, llcfrcnvSapTxOctets=llcfrcnvSapTxOctets, MacAddress=MacAddress, llcfrcnvSapRxOctets=llcfrcnvSapRxOctets, llcfrcnvSapDstLlcSap=llcfrcnvSapDstLlcSap, llcfrcnvSapRxResets=llcfrcnvSapRxResets, llcfrcnvSysRouteConnectInterval=llcfrcnvSysRouteConnectInterval, llcfrcnvSapUnopenedServiceDiscards=llcfrcnvSapUnopenedServiceDiscards, llcfrcnvSapControl=llcfrcnvSapControl, llcfrcnvSRRouteStatus=llcfrcnvSRRouteStatus, llcfrcnvSapTxResets=llcfrcnvSapTxResets, llcfrcnvSROutUnsuccessfullConnects=llcfrcnvSROutUnsuccessfullConnects, llcfrcnvSapAlias=llcfrcnvSapAlias, SubRef=SubRef, llcfrcnvSRControl=llcfrcnvSRControl, llcfrcnvSRIndex=llcfrcnvSRIndex, llcfrcnvSRRowStatus=llcfrcnvSRRowStatus, llcfrcnvSapRowStatus=llcfrcnvSapRowStatus, llcfrcnvSapTxFrames=llcfrcnvSapTxFrames, llcfrcnvSRClearStatus=llcfrcnvSRClearStatus, llcfrcnvSRPriority=llcfrcnvSRPriority, llcfrcnvSapHostMacAddr=llcfrcnvSapHostMacAddr)
