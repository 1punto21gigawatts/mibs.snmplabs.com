#
# PySNMP MIB module LSF-SNMP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/LSF-SNMP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:08:56 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Integer32, NotificationType, IpAddress, TimeTicks, Bits, ModuleIdentity, Gauge32, Unsigned32, MibIdentifier, enterprises, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, Counter64, Counter32, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "NotificationType", "IpAddress", "TimeTicks", "Bits", "ModuleIdentity", "Gauge32", "Unsigned32", "MibIdentifier", "enterprises", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "Counter64", "Counter32", "iso")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
platform = MibIdentifier((1, 3, 6, 1, 4, 1, 2766))
lsfAgent = MibIdentifier((1, 3, 6, 1, 4, 1, 2766, 100))
lsfHosts = MibIdentifier((1, 3, 6, 1, 4, 1, 2766, 100, 1))
lsfResources = MibIdentifier((1, 3, 6, 1, 4, 1, 2766, 100, 2))
lsfBatch = MibIdentifier((1, 3, 6, 1, 4, 1, 2766, 100, 3))
lsfCluster = MibIdentifier((1, 3, 6, 1, 4, 1, 2766, 100, 4))
lsfStaticTable = MibTable((1, 3, 6, 1, 4, 1, 2766, 100, 1, 1), )
if mibBuilder.loadTexts: lsfStaticTable.setStatus('mandatory')
if mibBuilder.loadTexts: lsfStaticTable.setDescription('A table which corresponds to information displayed by the lshosts command.')
lsfStaticEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2766, 100, 1, 1, 1), ).setIndexNames((0, "LSF-SNMP-MIB", "lsfStaticIpIndex"))
if mibBuilder.loadTexts: lsfStaticEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lsfStaticEntry.setDescription("One instance (row) of host information. It is indexed by the host's IP address in order to provide a deterministic way of accessing a specific host's configuration information.")
lsfStaticIpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2766, 100, 1, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsfStaticIpIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lsfStaticIpIndex.setDescription('IP address of this host as known by LSF.')
lsfHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 2766, 100, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsfHostName.setStatus('mandatory')
if mibBuilder.loadTexts: lsfHostName.setDescription('Host name for this host as known by LSF.')
lsfType = MibTableColumn((1, 3, 6, 1, 4, 1, 2766, 100, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsfType.setStatus('mandatory')
if mibBuilder.loadTexts: lsfType.setDescription('Type of this host. Available host types are defined in the lsf.shared file, and can be displayed using the lsinfo command.')
lsfModel = MibTableColumn((1, 3, 6, 1, 4, 1, 2766, 100, 1, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsfModel.setStatus('mandatory')
if mibBuilder.loadTexts: lsfModel.setDescription('Model of this host. Available host models are defined in the lsf.shared file, and can be displayed using the lsinfo command.')
lsfCPUFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 2766, 100, 1, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsfCPUFactor.setStatus('mandatory')
if mibBuilder.loadTexts: lsfCPUFactor.setDescription("A relative measure of this host's CPU speed. It is normally represented as a floating point number, and thus has been scaled by 100 for representation in the SNMP.")
lsfNumCPU = MibTableColumn((1, 3, 6, 1, 4, 1, 2766, 100, 1, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsfNumCPU.setStatus('mandatory')
if mibBuilder.loadTexts: lsfNumCPU.setDescription('Number of CPUs in this host.')
lsfMaxMemory = MibTableColumn((1, 3, 6, 1, 4, 1, 2766, 100, 1, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsfMaxMemory.setStatus('mandatory')
if mibBuilder.loadTexts: lsfMaxMemory.setDescription('The configured amount of RAM in this host, in megabytes.')
lsfMaxSwap = MibTableColumn((1, 3, 6, 1, 4, 1, 2766, 100, 1, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsfMaxSwap.setStatus('mandatory')
if mibBuilder.loadTexts: lsfMaxSwap.setDescription('The configured amount of physical swap space on this host, in megabytes.')
lsfMaxTempSpace = MibTableColumn((1, 3, 6, 1, 4, 1, 2766, 100, 1, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsfMaxTempSpace.setStatus('mandatory')
if mibBuilder.loadTexts: lsfMaxTempSpace.setDescription('The size of the temporary file space on this machine. Typically this corresponds to /tmp, but can be overridden in LSF configuration files by the LSF_TMPDIR environment variable.')
lsfExecutionPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2766, 100, 1, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsfExecutionPriority.setStatus('mandatory')
if mibBuilder.loadTexts: lsfExecutionPriority.setDescription('The execution priority, or nice level, of processes spawned by the RES on this host.')
lsfIsServer = MibTableColumn((1, 3, 6, 1, 4, 1, 2766, 100, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsfIsServer.setStatus('mandatory')
if mibBuilder.loadTexts: lsfIsServer.setDescription("true if this host will accept and run remote processes, and false if it won't.")
lsfHostResources = MibTableColumn((1, 3, 6, 1, 4, 1, 2766, 100, 1, 1, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsfHostResources.setStatus('mandatory')
if mibBuilder.loadTexts: lsfHostResources.setDescription('A string containing the boolean resources applied to this host. Available boolean resources can be displayed using the lsinfo command.')
lsfNumClusterHosts = MibScalar((1, 3, 6, 1, 4, 1, 2766, 100, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsfNumClusterHosts.setStatus('mandatory')
if mibBuilder.loadTexts: lsfNumClusterHosts.setDescription('This is a count of how many hosts are configured into the cluster. This includes both servers and clients. It corresponds to the number of hosts returned in the ls_gethostinfo command, or the number of hosts listed by the lshosts command.')
lsfDynamicTable = MibTable((1, 3, 6, 1, 4, 1, 2766, 100, 1, 2), )
if mibBuilder.loadTexts: lsfDynamicTable.setStatus('mandatory')
if mibBuilder.loadTexts: lsfDynamicTable.setDescription('A table which corresponds to information displayed by the lsload command.')
lsfDynamicEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2766, 100, 1, 2, 1), ).setIndexNames((0, "LSF-SNMP-MIB", "lsfDynamicIpIndex"))
if mibBuilder.loadTexts: lsfDynamicEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lsfDynamicEntry.setDescription("One instance (row) of host information. It is indexed by the host's IP address in order to provide a deterministic way of accessing a specific host's load information.")
lsfDynamicIpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2766, 100, 1, 2, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsfDynamicIpIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lsfDynamicIpIndex.setDescription('IP address of this host as known by LSF.')
lsfHostStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2766, 100, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("ok", 1), ("resDown", 2), ("busy", 3), ("lockU", 4), ("lockW", 5), ("lockUW", 6), ("unavail", 7), ("unlicensed", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lsfHostStatus.setStatus('mandatory')
if mibBuilder.loadTexts: lsfHostStatus.setDescription('The operating status of LSF on this host. The host can be locked from a management entity by setting this variable to lockU(4). If the host status is lockW(5), the status will become lockUW(6). The management entity can also unlock a host by attempting to set it to ok(1).')
lsfFifteenSecondRunQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 2766, 100, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsfFifteenSecondRunQueue.setStatus('mandatory')
if mibBuilder.loadTexts: lsfFifteenSecondRunQueue.setDescription('The 15 second run queue length on this host. This value is a float which is scaled by 100 to format it as an integer.')
lsfOneMinuteRunQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 2766, 100, 1, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsfOneMinuteRunQueue.setStatus('mandatory')
if mibBuilder.loadTexts: lsfOneMinuteRunQueue.setDescription('The 1 minute run queue length on this host. This value is a float which is scaled by 100 to format it as an integer.')
lsfFifteenMinuteRunQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 2766, 100, 1, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsfFifteenMinuteRunQueue.setStatus('mandatory')
if mibBuilder.loadTexts: lsfFifteenMinuteRunQueue.setDescription('The 15 minute run queue length on this host. This value is a float which is scaled by 100 to format it as an integer.')
lsfCPUUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 2766, 100, 1, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsfCPUUtilization.setStatus('mandatory')
if mibBuilder.loadTexts: lsfCPUUtilization.setDescription("A percentage of how much CPU time is spent processing system and user processes. A high utilization means that a host's CPU is kept busy.")
lsfPagingRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2766, 100, 1, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsfPagingRate.setStatus('mandatory')
if mibBuilder.loadTexts: lsfPagingRate.setDescription('A measure of page-in and page-out requests on this host over the lim sample interval. Since it is a floating point number in LSF, it is scaled by 100 to represent it as an INTEGER.')
lsfIoRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2766, 100, 1, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsfIoRate.setStatus('mandatory')
if mibBuilder.loadTexts: lsfIoRate.setDescription('A measure of number of disk operations on this host over the last lim sample interval. The value is a floating point number in LSF, and is thus scaled by 100 to represent it as an INTEGER.')
lsfLoginSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 2766, 100, 1, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsfLoginSessions.setStatus('mandatory')
if mibBuilder.loadTexts: lsfLoginSessions.setDescription('The number of login sessions on this host.')
lsfIdleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2766, 100, 1, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsfIdleTime.setStatus('mandatory')
if mibBuilder.loadTexts: lsfIdleTime.setDescription('The number of seconds for which all interactive login sessions have been idle on this host.')
lsfFreeMemory = MibTableColumn((1, 3, 6, 1, 4, 1, 2766, 100, 1, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsfFreeMemory.setStatus('mandatory')
if mibBuilder.loadTexts: lsfFreeMemory.setDescription('The amount of free real memory on this host. The units are megabytes, scaled by 100. For example, 25 megabytes would be returned as 2500.')
lsfFreeSwap = MibTableColumn((1, 3, 6, 1, 4, 1, 2766, 100, 1, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsfFreeSwap.setStatus('mandatory')
if mibBuilder.loadTexts: lsfFreeSwap.setDescription('The amount of free physical swap on this host. The units are megabytes, scaled by 100. For example, 25 megabytes would be returned as 2500.')
lsfFreeTempSpace = MibTableColumn((1, 3, 6, 1, 4, 1, 2766, 100, 1, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsfFreeTempSpace.setStatus('mandatory')
if mibBuilder.loadTexts: lsfFreeTempSpace.setDescription('The amount of free space in the temporary filesystem. This is typically /tmp, but can be overridden in the LSF configuration files using the LSF_TMPDIR environment variable. The units are megabytes, scaled by 100. For example, 25 megabytes would be returned as 2500.')
lsfNumericTable = MibTable((1, 3, 6, 1, 4, 1, 2766, 100, 2, 1), )
if mibBuilder.loadTexts: lsfNumericTable.setStatus('mandatory')
if mibBuilder.loadTexts: lsfNumericTable.setDescription('A table which describes numeric type external indices and shared resources defined for a cluster.')
lsfNumericEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2766, 100, 2, 1, 1), ).setIndexNames((0, "LSF-SNMP-MIB", "lsfNumericIndex"), (0, "LSF-SNMP-MIB", "lsfNumericIP"))
if mibBuilder.loadTexts: lsfNumericEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lsfNumericEntry.setDescription('One instance of resource information. It is indexed by two entries: host IpAddress and a resource index which is generated by the agent by sorting a list of resource names, and numbering the resource names in ascending alphabetical order.')
lsfNumericIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2766, 100, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsfNumericIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lsfNumericIndex.setDescription('A number generated by the agent to uniquely identify this resource name.')
lsfNumericIP = MibScalar((1, 3, 6, 1, 4, 1, 2766, 100, 2, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsfNumericIP.setStatus('mandatory')
if mibBuilder.loadTexts: lsfNumericIP.setDescription('The IP address corresponding to the location of this resource.')
lsfNumericLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 2766, 100, 2, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsfNumericLocation.setStatus('mandatory')
if mibBuilder.loadTexts: lsfNumericLocation.setDescription('The host on which this resource is located.')
lsfNumericName = MibTableColumn((1, 3, 6, 1, 4, 1, 2766, 100, 2, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsfNumericName.setStatus('mandatory')
if mibBuilder.loadTexts: lsfNumericName.setDescription('The name of this resource.')
lsfNumericOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 2766, 100, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ascending", 1), ("descending", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsfNumericOrder.setStatus('mandatory')
if mibBuilder.loadTexts: lsfNumericOrder.setDescription('Indicates the direction which denotes higher load. If a resource is ascending, the load is higher when the resource is higher (e.g. incoming packets). If the resource is descending, the load is higher when the resource is lower (e.g. space on a temporary filesystem).')
lsfNumericValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2766, 100, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsfNumericValue.setStatus('mandatory')
if mibBuilder.loadTexts: lsfNumericValue.setDescription('The current value of this resource. Note that floating point values will be scaled by 100 before being returned.')
lsbHostTable = MibTable((1, 3, 6, 1, 4, 1, 2766, 100, 3, 1), )
if mibBuilder.loadTexts: lsbHostTable.setStatus('mandatory')
if mibBuilder.loadTexts: lsbHostTable.setDescription('A table which provides the same information as the bhosts command without any arguments.')
lsbHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2766, 100, 3, 1, 1), ).setIndexNames((0, "LSF-SNMP-MIB", "lsbHostIp"))
if mibBuilder.loadTexts: lsbHostEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lsbHostEntry.setDescription("One instance of batch host information. It is indexed by the host's IP address.")
lsbHostIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2766, 100, 3, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsbHostIp.setStatus('mandatory')
if mibBuilder.loadTexts: lsbHostIp.setDescription('IP address of this host.')
lsbHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 2766, 100, 3, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsbHostName.setStatus('mandatory')
if mibBuilder.loadTexts: lsbHostName.setDescription('Host name for this entry.')
lsbHostStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2766, 100, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ok", 1), ("unavail", 2), ("unreach", 3), ("closed", 4), ("unlicensed", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lsbHostStatus.setStatus('mandatory')
if mibBuilder.loadTexts: lsbHostStatus.setDescription('Current status of this host. Only when a host is in ok status can batch jobs be dispatched to it. An SNMP management entity can close hosts by setting this variable to closed(4), and can reopen hosts by setting this variable to ok(1).')
lsbHostUserJobLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2766, 100, 3, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsbHostUserJobLimit.setStatus('mandatory')
if mibBuilder.loadTexts: lsbHostUserJobLimit.setDescription('Maximum batch job slots that the host can provide per user. If the number of slots is unlimited, -1 will be returned.')
lsbHostMaximumJobs = MibTableColumn((1, 3, 6, 1, 4, 1, 2766, 100, 3, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsbHostMaximumJobs.setStatus('mandatory')
if mibBuilder.loadTexts: lsbHostMaximumJobs.setDescription('Maximum number of job slots that the host can provide in total. If the number of slots is unlimited, -1 will be returned.')
lsbHostNumberOfJobs = MibTableColumn((1, 3, 6, 1, 4, 1, 2766, 100, 3, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsbHostNumberOfJobs.setStatus('mandatory')
if mibBuilder.loadTexts: lsbHostNumberOfJobs.setDescription('Number of job slots used by jobs started on this host.')
lsbHostRunningJobs = MibTableColumn((1, 3, 6, 1, 4, 1, 2766, 100, 3, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsbHostRunningJobs.setStatus('mandatory')
if mibBuilder.loadTexts: lsbHostRunningJobs.setDescription('Number of job slots used by jobs running on this host.')
lsbSystemSuspendedJobs = MibScalar((1, 3, 6, 1, 4, 1, 2766, 100, 3, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsbSystemSuspendedJobs.setStatus('mandatory')
if mibBuilder.loadTexts: lsbSystemSuspendedJobs.setDescription('Number of job slots used by jobs suspended by LSF on the host.')
lsbUserSuspendedJobs = MibScalar((1, 3, 6, 1, 4, 1, 2766, 100, 3, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsbUserSuspendedJobs.setStatus('mandatory')
if mibBuilder.loadTexts: lsbUserSuspendedJobs.setDescription('Number of job slots used by jobs suspended by the job owner or an LSF administrator')
lsbHostReservedJobSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 2766, 100, 3, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsbHostReservedJobSlots.setStatus('mandatory')
if mibBuilder.loadTexts: lsbHostReservedJobSlots.setDescription('Number of job slots used by pending jobs which have job slots reserved on the host.')
lsbQueueTable = MibTable((1, 3, 6, 1, 4, 1, 2766, 100, 3, 2), )
if mibBuilder.loadTexts: lsbQueueTable.setStatus('mandatory')
if mibBuilder.loadTexts: lsbQueueTable.setDescription('A table which provides the same information as the bqueues command without any arguments.')
lsbQueueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2766, 100, 3, 2, 1), ).setIndexNames((0, "LSF-SNMP-MIB", "lsbQueueIndex"))
if mibBuilder.loadTexts: lsbQueueEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lsbQueueEntry.setDescription('One instance of batch queue information. The index field is generated by the agent by sorting the list of queues, and numbering the queue names in ascending alphabetical order.')
lsbQueueIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2766, 100, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsbQueueIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lsbQueueIndex.setDescription('A number generated by the agent to uniquely identify this queue.')
lsbQueueName = MibTableColumn((1, 3, 6, 1, 4, 1, 2766, 100, 3, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsbQueueName.setStatus('mandatory')
if mibBuilder.loadTexts: lsbQueueName.setDescription('The name of this queue.')
lsbQueuePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2766, 100, 3, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsbQueuePriority.setStatus('mandatory')
if mibBuilder.loadTexts: lsbQueuePriority.setDescription('The priority of the queue. It determines the order in which job queues are searched for jobs to dispatch. Queues with higher priorities are searched first.')
lsbQueueIsOpen = MibTableColumn((1, 3, 6, 1, 4, 1, 2766, 100, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("open", 1), ("closed", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lsbQueueIsOpen.setStatus('mandatory')
if mibBuilder.loadTexts: lsbQueueIsOpen.setDescription('A flag telling whether the queue is open to accept jobs submitted to it, or whether it is closed so that it will not accept jobs. The management entity can set this variable to open(1) or closed(2) to change the submission status of this queue.')
lsbQueueIsActive = MibTableColumn((1, 3, 6, 1, 4, 1, 2766, 100, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lsbQueueIsActive.setStatus('mandatory')
if mibBuilder.loadTexts: lsbQueueIsActive.setDescription('A flag telling whether the queue is active (dispatching jobs to run), or whether it is inactive so that jobs are not being dispatched. The management entity can set this variable to active(1) or inactive(2) to change the dispatching status of this queue.')
lsbQueueMaximumJobs = MibTableColumn((1, 3, 6, 1, 4, 1, 2766, 100, 3, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsbQueueMaximumJobs.setStatus('mandatory')
if mibBuilder.loadTexts: lsbQueueMaximumJobs.setDescription('The maximum number of job slots which can be used by jobs from this queue. If the number of slots is unlimited, -1 will be returned.')
lsbQueueUserJobLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2766, 100, 3, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsbQueueUserJobLimit.setStatus('mandatory')
if mibBuilder.loadTexts: lsbQueueUserJobLimit.setDescription('The maximum number of job slots a user can use for his/her jobs in this queue. If the number of slots is unlimited, -1 will be returned.')
lsbQueueProcessorJobLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2766, 100, 3, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsbQueueProcessorJobLimit.setStatus('mandatory')
if mibBuilder.loadTexts: lsbQueueProcessorJobLimit.setDescription('The maximum number of job slots which a processor can process from this queue. This limit controls the number of jobs sent to each host. The limit is configured per processor so that a multiprocessor host is automatically allowed to run more jobs. If the number of slots is unlimited, -1 will be returned.')
lsbQueueHostJobLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2766, 100, 3, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsbQueueHostJobLimit.setStatus('mandatory')
if mibBuilder.loadTexts: lsbQueueHostJobLimit.setDescription('The maximum number of job slots which a host can process from this queue. This limit controls the number of jobs sent to each host, regardless of whether a host is a uniprocessor or a multiprocessor. If the number of slots is unlimited, -1 will be returned.')
lsbQueueNumberOfJobs = MibTableColumn((1, 3, 6, 1, 4, 1, 2766, 100, 3, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsbQueueNumberOfJobs.setStatus('mandatory')
if mibBuilder.loadTexts: lsbQueueNumberOfJobs.setDescription('The total number of job slots which jobs in this queue are currently holding.')
lsbQueuePendingJobs = MibTableColumn((1, 3, 6, 1, 4, 1, 2766, 100, 3, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsbQueuePendingJobs.setStatus('mandatory')
if mibBuilder.loadTexts: lsbQueuePendingJobs.setDescription('The number of pending job slots in this queue.')
lsbQueueRunningJobs = MibTableColumn((1, 3, 6, 1, 4, 1, 2766, 100, 3, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsbQueueRunningJobs.setStatus('mandatory')
if mibBuilder.loadTexts: lsbQueueRunningJobs.setDescription('The number of running job slots in this queue.')
lsbQueueSystemSuspendedJobs = MibTableColumn((1, 3, 6, 1, 4, 1, 2766, 100, 3, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsbQueueSystemSuspendedJobs.setStatus('mandatory')
if mibBuilder.loadTexts: lsbQueueSystemSuspendedJobs.setDescription('The number of job slots suspended by the system in this queue.')
lsbQueueUserSuspendedJobs = MibTableColumn((1, 3, 6, 1, 4, 1, 2766, 100, 3, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsbQueueUserSuspendedJobs.setStatus('mandatory')
if mibBuilder.loadTexts: lsbQueueUserSuspendedJobs.setDescription('The number of job slots suspended by the user in this queue.')
lsbJobTable = MibTable((1, 3, 6, 1, 4, 1, 2766, 100, 3, 3), )
if mibBuilder.loadTexts: lsbJobTable.setStatus('mandatory')
if mibBuilder.loadTexts: lsbJobTable.setDescription('A table which provides the same information as the bjobs -r -u all command, and the resource usage of each running job.')
lsbJobEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2766, 100, 3, 3, 1), ).setIndexNames((0, "LSF-SNMP-MIB", "lsbJobId"))
if mibBuilder.loadTexts: lsbJobEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lsbJobEntry.setDescription('An instance of a running job. The entries are indexed by jobID, since it uniquely identifies running jobs in the batch system.')
lsbJobId = MibTableColumn((1, 3, 6, 1, 4, 1, 2766, 100, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsbJobId.setStatus('mandatory')
if mibBuilder.loadTexts: lsbJobId.setDescription('The number which uniquely identifies this job in the batch system.')
lsbJobName = MibTableColumn((1, 3, 6, 1, 4, 1, 2766, 100, 3, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsbJobName.setStatus('mandatory')
if mibBuilder.loadTexts: lsbJobName.setDescription('The job name assigned by the user, or the command string assigned by default.')
lsbJobUser = MibTableColumn((1, 3, 6, 1, 4, 1, 2766, 100, 3, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsbJobUser.setStatus('mandatory')
if mibBuilder.loadTexts: lsbJobUser.setDescription('The user who submitted the job.')
lsbJobQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 2766, 100, 3, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsbJobQueue.setStatus('mandatory')
if mibBuilder.loadTexts: lsbJobQueue.setDescription('The name of the queue to which the job belongs.')
lsbJobStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2766, 100, 3, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("pending", 1), ("psusp", 2), ("running", 3), ("ususp", 4), ("ssusp", 5), ("done", 6), ("exit", 7), ("unknown", 8), ("zombie", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsbJobStatus.setStatus('mandatory')
if mibBuilder.loadTexts: lsbJobStatus.setDescription('The current status of the job.')
lsbJobSubmissionHost = MibTableColumn((1, 3, 6, 1, 4, 1, 2766, 100, 3, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsbJobSubmissionHost.setStatus('mandatory')
if mibBuilder.loadTexts: lsbJobSubmissionHost.setDescription('The name of the host from which the job was submitted.')
lsbJobExecutionHost = MibTableColumn((1, 3, 6, 1, 4, 1, 2766, 100, 3, 3, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsbJobExecutionHost.setStatus('mandatory')
if mibBuilder.loadTexts: lsbJobExecutionHost.setDescription('The name of one or more hosts on which the job is executing. If the field is empty, the job has not been dispatched yet. If the execution host for a job has been removed from the configuration, this will be displayed as lost_and_found.')
lsbJobSubmitTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2766, 100, 3, 3, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsbJobSubmitTime.setStatus('mandatory')
if mibBuilder.loadTexts: lsbJobSubmitTime.setDescription('The submission time of the job.')
lsbJobProcessGroupIds = MibTableColumn((1, 3, 6, 1, 4, 1, 2766, 100, 3, 3, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsbJobProcessGroupIds.setStatus('mandatory')
if mibBuilder.loadTexts: lsbJobProcessGroupIds.setDescription('A space delimited list of process group ids which make up this job.')
lsbJobProcessIds = MibTableColumn((1, 3, 6, 1, 4, 1, 2766, 100, 3, 3, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsbJobProcessIds.setStatus('mandatory')
if mibBuilder.loadTexts: lsbJobProcessIds.setDescription('A space delimited list of process ids which make up this job.')
lsbJobCpuUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 2766, 100, 3, 3, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsbJobCpuUsage.setStatus('mandatory')
if mibBuilder.loadTexts: lsbJobCpuUsage.setDescription('The cumulative total CPU time in seconds of all processes in a job.')
lsbJobMemoryUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 2766, 100, 3, 3, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsbJobMemoryUsage.setStatus('mandatory')
if mibBuilder.loadTexts: lsbJobMemoryUsage.setDescription('The total resident memory usage in KBytes of all the processes in a job.')
lsbJobVirtualMemoryUsage = MibScalar((1, 3, 6, 1, 4, 1, 2766, 100, 3, 3, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsbJobVirtualMemoryUsage.setStatus('mandatory')
if mibBuilder.loadTexts: lsbJobVirtualMemoryUsage.setDescription('The total virtual memory usage in KBytes of all the processes in a job.')
lsfClusterName = MibScalar((1, 3, 6, 1, 4, 1, 2766, 100, 4, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsfClusterName.setStatus('mandatory')
if mibBuilder.loadTexts: lsfClusterName.setDescription('The name of the cluster for which this agent is returning information.')
lsfMasterName = MibScalar((1, 3, 6, 1, 4, 1, 2766, 100, 4, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsfMasterName.setStatus('mandatory')
if mibBuilder.loadTexts: lsfMasterName.setDescription('The hostname of the host which is running as the LSF master server for this cluster.')
lsfEvents = MibIdentifier((1, 3, 6, 1, 4, 1, 2766, 1000))
lsfLimDown = NotificationType((1, 3, 6, 1, 4, 1, 2766, 1000) + (0,1)).setObjects(("LSF-SNMP-MIB", "lsfClusterName"), ("LSF-SNMP-MIB", "lsfHostStatus"))
if mibBuilder.loadTexts: lsfLimDown.setDescription('This trap is sent when the lim on a host goes down. The variable points to the status of the host on which the lim went down.')
lsfResDown = NotificationType((1, 3, 6, 1, 4, 1, 2766, 1000) + (0,2)).setObjects(("LSF-SNMP-MIB", "lsfClusterName"), ("LSF-SNMP-MIB", "lsfHostStatus"))
if mibBuilder.loadTexts: lsfResDown.setDescription('This trap is sent when the res on a host goes down. The variable points to the status of the host on which the res went down.')
lsfSbdDown = NotificationType((1, 3, 6, 1, 4, 1, 2766, 1000) + (0,3)).setObjects(("LSF-SNMP-MIB", "lsfClusterName"), ("LSF-SNMP-MIB", "lsbHostStatus"))
if mibBuilder.loadTexts: lsfSbdDown.setDescription('This trap is sent when the sbatchd on a host goes down. The variable points to the status of the batch host on which the sbatchd went down.')
lsfHostUnlicensed = NotificationType((1, 3, 6, 1, 4, 1, 2766, 1000) + (0,4)).setObjects(("LSF-SNMP-MIB", "lsfClusterName"), ("LSF-SNMP-MIB", "lsfHostStatus"))
if mibBuilder.loadTexts: lsfHostUnlicensed.setDescription('This trap is sent when a host in the cluster becomes unlicensed.')
lsfMasterElect = NotificationType((1, 3, 6, 1, 4, 1, 2766, 1000) + (0,5)).setObjects(("LSF-SNMP-MIB", "lsfClusterName"), ("LSF-SNMP-MIB", "lsfHostName"))
if mibBuilder.loadTexts: lsfMasterElect.setDescription('This trap is sent to announce which host has won the master election.')
lsfMasterResign = NotificationType((1, 3, 6, 1, 4, 1, 2766, 1000) + (0,6)).setObjects(("LSF-SNMP-MIB", "lsfClusterName"), ("LSF-SNMP-MIB", "lsfHostName"))
if mibBuilder.loadTexts: lsfMasterResign.setDescription('This trap is sent to indicate that a host has resigned as the master host.')
lsfMbdUp = NotificationType((1, 3, 6, 1, 4, 1, 2766, 1000) + (0,7)).setObjects(("LSF-SNMP-MIB", "lsfClusterName"), ("LSF-SNMP-MIB", "lsbHostName"))
if mibBuilder.loadTexts: lsfMbdUp.setDescription('This trap is sent when an mbatchd comes up on a host, has done its initialization and replay, and is ready to start accepting and scheduling jobs.')
lsfMbdDown = NotificationType((1, 3, 6, 1, 4, 1, 2766, 1000) + (0,8)).setObjects(("LSF-SNMP-MIB", "lsfClusterName"), ("LSF-SNMP-MIB", "lsbHostName"))
if mibBuilder.loadTexts: lsfMbdDown.setDescription('This trap is sent if the mbatchd goes down in the cluster. It could be sent by mbatchd itself, or could be sent by some other agent which detects the condition.')
lsfMbdReconfig = NotificationType((1, 3, 6, 1, 4, 1, 2766, 1000) + (0,9)).setObjects(("LSF-SNMP-MIB", "lsfClusterName"), ("LSF-SNMP-MIB", "lsbHostName"))
if mibBuilder.loadTexts: lsfMbdReconfig.setDescription('This trap is sent by the mbatchd when it is going to reconfigure itself.')
lsfWorkdirFull = NotificationType((1, 3, 6, 1, 4, 1, 2766, 1000) + (0,10)).setObjects(("LSF-SNMP-MIB", "lsfClusterName"))
if mibBuilder.loadTexts: lsfWorkdirFull.setDescription('This trap is sent if the mbatchd cannot write to the LSB_SHAREDIR because it is full.')
mibBuilder.exportSymbols("LSF-SNMP-MIB", lsbJobTable=lsbJobTable, lsfNumericLocation=lsfNumericLocation, lsfNumericOrder=lsfNumericOrder, lsbJobMemoryUsage=lsbJobMemoryUsage, lsbQueueMaximumJobs=lsbQueueMaximumJobs, lsfCPUUtilization=lsfCPUUtilization, lsfMbdDown=lsfMbdDown, lsbQueueIndex=lsbQueueIndex, lsfResources=lsfResources, lsfNumericIndex=lsfNumericIndex, lsbJobStatus=lsbJobStatus, lsbSystemSuspendedJobs=lsbSystemSuspendedJobs, lsbJobExecutionHost=lsbJobExecutionHost, lsbJobEntry=lsbJobEntry, lsfType=lsfType, lsbQueueRunningJobs=lsbQueueRunningJobs, lsbJobSubmitTime=lsbJobSubmitTime, lsfSbdDown=lsfSbdDown, lsbQueueNumberOfJobs=lsbQueueNumberOfJobs, lsfMbdReconfig=lsfMbdReconfig, lsfMaxTempSpace=lsfMaxTempSpace, lsfNumericEntry=lsfNumericEntry, lsbJobProcessIds=lsbJobProcessIds, lsfMasterElect=lsfMasterElect, lsfHostName=lsfHostName, lsbHostIp=lsbHostIp, lsbJobId=lsbJobId, lsfNumericIP=lsfNumericIP, lsfStaticEntry=lsfStaticEntry, lsfStaticTable=lsfStaticTable, lsbQueueHostJobLimit=lsbQueueHostJobLimit, lsfIdleTime=lsfIdleTime, lsbJobName=lsbJobName, lsbQueueEntry=lsbQueueEntry, lsfFifteenSecondRunQueue=lsfFifteenSecondRunQueue, lsfIoRate=lsfIoRate, lsfLimDown=lsfLimDown, lsfFreeTempSpace=lsfFreeTempSpace, lsbQueuePendingJobs=lsbQueuePendingJobs, lsbQueueIsActive=lsbQueueIsActive, lsfCluster=lsfCluster, lsfAgent=lsfAgent, lsbQueueIsOpen=lsbQueueIsOpen, lsfFreeSwap=lsfFreeSwap, lsfCPUFactor=lsfCPUFactor, lsfHostUnlicensed=lsfHostUnlicensed, lsfClusterName=lsfClusterName, lsbHostReservedJobSlots=lsbHostReservedJobSlots, lsfHostResources=lsfHostResources, lsbJobVirtualMemoryUsage=lsbJobVirtualMemoryUsage, lsbHostRunningJobs=lsbHostRunningJobs, lsbQueueUserJobLimit=lsbQueueUserJobLimit, lsfHosts=lsfHosts, lsfStaticIpIndex=lsfStaticIpIndex, lsbHostNumberOfJobs=lsbHostNumberOfJobs, platform=platform, lsfDynamicIpIndex=lsfDynamicIpIndex, lsfHostStatus=lsfHostStatus, lsfResDown=lsfResDown, lsbHostStatus=lsbHostStatus, lsfMaxSwap=lsfMaxSwap, lsfModel=lsfModel, lsfMasterName=lsfMasterName, lsbJobQueue=lsbJobQueue, lsbQueuePriority=lsbQueuePriority, lsbQueueName=lsbQueueName, lsbHostEntry=lsbHostEntry, lsfIsServer=lsfIsServer, lsfNumericValue=lsfNumericValue, lsbHostMaximumJobs=lsbHostMaximumJobs, lsfExecutionPriority=lsfExecutionPriority, lsbHostTable=lsbHostTable, lsbJobUser=lsbJobUser, lsfMasterResign=lsfMasterResign, lsbQueueSystemSuspendedJobs=lsbQueueSystemSuspendedJobs, lsfWorkdirFull=lsfWorkdirFull, lsfMaxMemory=lsfMaxMemory, lsbHostUserJobLimit=lsbHostUserJobLimit, lsbQueueTable=lsbQueueTable, lsfDynamicEntry=lsfDynamicEntry, lsbHostName=lsbHostName, lsbJobSubmissionHost=lsbJobSubmissionHost, lsfNumericName=lsfNumericName, lsfNumCPU=lsfNumCPU, lsbJobCpuUsage=lsbJobCpuUsage, lsbQueueProcessorJobLimit=lsbQueueProcessorJobLimit, lsbQueueUserSuspendedJobs=lsbQueueUserSuspendedJobs, lsfMbdUp=lsfMbdUp, lsbUserSuspendedJobs=lsbUserSuspendedJobs, lsfBatch=lsfBatch, lsfEvents=lsfEvents, lsfFreeMemory=lsfFreeMemory, lsfFifteenMinuteRunQueue=lsfFifteenMinuteRunQueue, lsfPagingRate=lsfPagingRate, lsfNumClusterHosts=lsfNumClusterHosts, lsfNumericTable=lsfNumericTable, lsfLoginSessions=lsfLoginSessions, lsfOneMinuteRunQueue=lsfOneMinuteRunQueue, lsbJobProcessGroupIds=lsbJobProcessGroupIds, lsfDynamicTable=lsfDynamicTable)
