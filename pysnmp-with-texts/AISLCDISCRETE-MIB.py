#
# PySNMP MIB module AISLCDISCRETE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/AISLCDISCRETE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:16:25 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Unsigned32, IpAddress, ModuleIdentity, Integer32, enterprises, TimeTicks, ObjectIdentity, Counter64, Counter32, Gauge32, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, NotificationType, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "IpAddress", "ModuleIdentity", "Integer32", "enterprises", "TimeTicks", "ObjectIdentity", "Counter64", "Counter32", "Gauge32", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "NotificationType", "iso")
TextualConvention, TruthValue, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TruthValue", "DisplayString")
class PositiveInteger(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 2147483647)

aii = MibIdentifier((1, 3, 6, 1, 4, 1, 539))
aiSLCDiscrete = ModuleIdentity((1, 3, 6, 1, 4, 1, 539, 24))
if mibBuilder.loadTexts: aiSLCDiscrete.setLastUpdated('0002181700Z')
if mibBuilder.loadTexts: aiSLCDiscrete.setOrganization('Applied Innovation Inc.')
if mibBuilder.loadTexts: aiSLCDiscrete.setContactInfo('Engineering MIB Administrator Postal: Applied Innovation Inc. 5800 Innovation Drive Dublin, Ohio 43017-3271 Tel: 614-798-2000 Fax: 614-798-1770 Email: snmp@aiinet.com')
if mibBuilder.loadTexts: aiSLCDiscrete.setDescription('MIB module for SLCs with discrete input and output points.')
aiSLCDiscreteInputTable = MibTable((1, 3, 6, 1, 4, 1, 539, 24, 1), )
if mibBuilder.loadTexts: aiSLCDiscreteInputTable.setStatus('current')
if mibBuilder.loadTexts: aiSLCDiscreteInputTable.setDescription('Table of discrete input points indexed by point number. Includes description, configuration, and status information.')
aiSLCDiscreteInputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 539, 24, 1, 1), ).setIndexNames((0, "AISLCDISCRETE-MIB", "aislcdinPointNumber"))
if mibBuilder.loadTexts: aiSLCDiscreteInputEntry.setStatus('current')
if mibBuilder.loadTexts: aiSLCDiscreteInputEntry.setDescription('Entry of aiSLCDiscreteInputTable.')
aislcdinPointNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 24, 1, 1, 1), PositiveInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aislcdinPointNumber.setStatus('current')
if mibBuilder.loadTexts: aislcdinPointNumber.setDescription('Input point number to which this table row applies.')
aislcdinDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 24, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcdinDescription.setStatus('current')
if mibBuilder.loadTexts: aislcdinDescription.setDescription('Textual description of the point. Maximum length is 80 characters.')
aislcdinTrapEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 24, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcdinTrapEnable.setStatus('current')
if mibBuilder.loadTexts: aislcdinTrapEnable.setDescription('Enable or disable alarm traps.')
aislcdinNormalInput = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 24, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("open", 1), ("closed", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcdinNormalInput.setStatus('current')
if mibBuilder.loadTexts: aislcdinNormalInput.setDescription("Input that corresponds to the point's normal state.")
aislcdinAlarmSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 24, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("critical", 1), ("major", 2), ("minor", 3), ("info", 4), ("notReported", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcdinAlarmSeverity.setStatus('current')
if mibBuilder.loadTexts: aislcdinAlarmSeverity.setDescription("Severity of the point's alarm state, or notReported(5) if the point does not generate an alarm.")
aislcdinNormalStateText = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 24, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcdinNormalStateText.setStatus('current')
if mibBuilder.loadTexts: aislcdinNormalStateText.setDescription("Textual description of the point's normal state. Maximum length is 80 characters.")
aislcdinAlarmStateText = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 24, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcdinAlarmStateText.setStatus('current')
if mibBuilder.loadTexts: aislcdinAlarmStateText.setDescription("Textual description of the point's alarm state. Maximum length is 80 characters.")
aislcdinCurrentInput = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 24, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("open", 1), ("closed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aislcdinCurrentInput.setStatus('current')
if mibBuilder.loadTexts: aislcdinCurrentInput.setDescription('The current input to the point.')
aislcdinLastChangeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 24, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(19, 23))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aislcdinLastChangeTime.setStatus('current')
if mibBuilder.loadTexts: aislcdinLastChangeTime.setDescription('Textual representation of the time of the most recent input change. 24-hour format: YYYY-MM-DD HH:MM:SS.')
aislcdinCurrentState = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 24, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("critical", 1), ("major", 2), ("minor", 3), ("info", 4), ("normal", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aislcdinCurrentState.setStatus('current')
if mibBuilder.loadTexts: aislcdinCurrentState.setDescription("The point's current alarm state, or normal(5).")
aislcdinCurrentStateText = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 24, 1, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aislcdinCurrentStateText.setStatus('current')
if mibBuilder.loadTexts: aislcdinCurrentStateText.setDescription("Textual description of the point's current state. This is either aislcdinNormalStateText or aislcdinAlarmStateText.")
aislcdintl1AccessID = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 24, 1, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 22))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcdintl1AccessID.setStatus('current')
if mibBuilder.loadTexts: aislcdintl1AccessID.setDescription('Unique TL1 access identifier for this point. Maximum length is 22 characters.')
aislcdintl1Provisioned = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 24, 1, 1, 13), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcdintl1Provisioned.setStatus('current')
if mibBuilder.loadTexts: aislcdintl1Provisioned.setDescription('Enable TL1 management of this point.')
aislcdintl1AccessIDType = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 24, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("equipment", 1), ("environmental", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcdintl1AccessIDType.setStatus('current')
if mibBuilder.loadTexts: aislcdintl1AccessIDType.setDescription('Identifies the point as either an equipment(1) alarm condition or an environmental(2) alarm.')
aislcdintl1NotificationCode = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 24, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("critical", 1), ("major", 2), ("minor", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcdintl1NotificationCode.setStatus('current')
if mibBuilder.loadTexts: aislcdintl1NotificationCode.setDescription("Severity of the point's alarm state.")
aislcdintl1ServiceAffecting = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 24, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("serviceAffecting", 1), ("notServiceAffecting", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcdintl1ServiceAffecting.setStatus('current')
if mibBuilder.loadTexts: aislcdintl1ServiceAffecting.setDescription('Indicates whether or not the alarm affects the functioning of the equipment. This is only meaningful when aislcdintl1AccessIDType is equipment(1).')
aislcdintl1ConditionType = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 24, 1, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcdintl1ConditionType.setStatus('current')
if mibBuilder.loadTexts: aislcdintl1ConditionType.setDescription('String indicating the type of alarm condition, used only when aislcdintl1AccessIDType is equipment(1). Maximum length is 20 characters.')
aislcdintl1ConditionDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 24, 1, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcdintl1ConditionDescription.setStatus('current')
if mibBuilder.loadTexts: aislcdintl1ConditionDescription.setDescription('Textual description of the alarm condition, used only when aislcdintl1AccessIDType is equipment(1). Maximum length is 64 characters.')
aislcdintl1AlarmType = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 24, 1, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcdintl1AlarmType.setStatus('current')
if mibBuilder.loadTexts: aislcdintl1AlarmType.setDescription('String indicating the type of alarm, used only when aislcdintl1AccessIDType is environmental(2). Maximum length is 10 characters.')
aislcdintl1AlarmMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 24, 1, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcdintl1AlarmMessage.setStatus('current')
if mibBuilder.loadTexts: aislcdintl1AlarmMessage.setDescription('Textual description of the alarm, used only when aislcdintl1AccessIDType is environmental(2). Maximum length is 40 characters.')
aislcdinDebounceValue = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 24, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcdinDebounceValue.setStatus('current')
if mibBuilder.loadTexts: aislcdinDebounceValue.setDescription('Number of 100 msec intervals to wait for the input to stop bouncing.')
aiSLCDiscreteOutputTable = MibTable((1, 3, 6, 1, 4, 1, 539, 24, 2), )
if mibBuilder.loadTexts: aiSLCDiscreteOutputTable.setStatus('current')
if mibBuilder.loadTexts: aiSLCDiscreteOutputTable.setDescription('Table of discrete input points indexed by point number. Includes description, configuration, and status information.')
aiSLCDiscreteOutputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 539, 24, 2, 1), ).setIndexNames((0, "AISLCDISCRETE-MIB", "aislcdoutPointNumber"))
if mibBuilder.loadTexts: aiSLCDiscreteOutputEntry.setStatus('current')
if mibBuilder.loadTexts: aiSLCDiscreteOutputEntry.setDescription('Entry of aiSLCDiscreteOutputTable.')
aislcdoutPointNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 24, 2, 1, 1), PositiveInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aislcdoutPointNumber.setStatus('current')
if mibBuilder.loadTexts: aislcdoutPointNumber.setDescription('Output point number to which this table row applies.')
aislcdoutDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 24, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcdoutDescription.setStatus('current')
if mibBuilder.loadTexts: aislcdoutDescription.setDescription('Textual description of the point. Maximum length is 80 characters.')
aislcdoutOutputEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 24, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcdoutOutputEnable.setStatus('current')
if mibBuilder.loadTexts: aislcdoutOutputEnable.setDescription('Enable or disable this point. When the point is disabled, the output is immediately de-energized and remains so regardless of the values of other objects in this row. When the point is enabled, output is immediately set to its non-alarm state and operates according to the values of the other objects in this row.')
aislcdoutNormalOutput = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 24, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("relayOn", 1), ("relayOff", 2))))
if mibBuilder.loadTexts: aislcdoutNormalOutput.setStatus('deprecated')
if mibBuilder.loadTexts: aislcdoutNormalOutput.setDescription('DEPRECATED: use aislcdoutAlarmStateOutput.')
aislcdoutMomentaryTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 24, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 999))).setUnits('0.1 second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcdoutMomentaryTimeout.setStatus('current')
if mibBuilder.loadTexts: aislcdoutMomentaryTimeout.setDescription('If zero, the output will stay in the alarm state until it is returned to the normal state by some other event. If nonzero, this defines the time interval for momentary operation described in aislcdoutOutput. Maximum is 99.9 seconds.')
aislcdoutCurrentOutput = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 24, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("relayOn", 1), ("relayOff", 2))))
if mibBuilder.loadTexts: aislcdoutCurrentOutput.setStatus('deprecated')
if mibBuilder.loadTexts: aislcdoutCurrentOutput.setDescription('DEPRECATED: use aislcdoutOutput.')
aislcdouttl1AccessID = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 24, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 22))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcdouttl1AccessID.setStatus('current')
if mibBuilder.loadTexts: aislcdouttl1AccessID.setDescription('Unique TL1 access identifier for this point. Maximum length is 22 characters.')
aislcdoutTrapEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 24, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcdoutTrapEnable.setStatus('current')
if mibBuilder.loadTexts: aislcdoutTrapEnable.setDescription('Enable or disable traps. If enabled, a trap is sent whenever the point changes state.')
aislcdoutAlarmStateOutput = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 24, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("energized", 1), ("de-energized", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcdoutAlarmStateOutput.setStatus('current')
if mibBuilder.loadTexts: aislcdoutAlarmStateOutput.setDescription("Output that corresponds to the point's alarm state.")
aislcdoutAlarmSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 24, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("critical", 1), ("major", 2), ("minor", 3), ("info", 4), ("notReported", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcdoutAlarmSeverity.setStatus('current')
if mibBuilder.loadTexts: aislcdoutAlarmSeverity.setDescription("Severity of the point's alarm state, or notReported(5) if the point does not generate an alarm.")
aislcdoutNonAlarmStateText = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 24, 2, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcdoutNonAlarmStateText.setStatus('current')
if mibBuilder.loadTexts: aislcdoutNonAlarmStateText.setDescription("Textual description of the point's non-alarm state. Maximum length is 80 characters.")
aislcdoutAlarmStateText = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 24, 2, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcdoutAlarmStateText.setStatus('current')
if mibBuilder.loadTexts: aislcdoutAlarmStateText.setDescription("Textual description of the point's alarm state. Maximum length is 80 characters.")
aislcdoutOutput = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 24, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("energized", 1), ("de-energized", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcdoutOutput.setStatus('current')
if mibBuilder.loadTexts: aislcdoutOutput.setDescription('On a read operation, this is the current output of the point. On a write operation when the output is controlled by aislcdoutEnergizeExpression, the write is rejected. Otherwise on a write operation, when set to de-energized, the output immediately assumes this state. When set to energized, the state of the output goes to the energized state, unless the output is already waiting for its aislcdoutMomentaryTimeout interval to elapse.')
aislcdoutLastChangeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 24, 2, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(19, 23))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aislcdoutLastChangeTime.setStatus('current')
if mibBuilder.loadTexts: aislcdoutLastChangeTime.setDescription('Textual representation of the time of the most recent output change. 24-hour format: YYYY-MM-DD HH:MM:SS.')
aislcdoutCurrentState = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 24, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("critical", 1), ("major", 2), ("minor", 3), ("info", 4), ("normal", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aislcdoutCurrentState.setStatus('current')
if mibBuilder.loadTexts: aislcdoutCurrentState.setDescription("The point's current alarm state, or normal(5).")
aislcdoutCurrentStateText = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 24, 2, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aislcdoutCurrentStateText.setStatus('current')
if mibBuilder.loadTexts: aislcdoutCurrentStateText.setDescription("Textual description of the point's current state. This is either aislcdoutNonAlarmStateText or aislcdoutAlarmStateText.")
aislcdoutEnergizeExpression = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 24, 2, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcdoutEnergizeExpression.setStatus('current')
if mibBuilder.loadTexts: aislcdoutEnergizeExpression.setDescription("String that describes when this output goes into the energized state, as a function of a discrete input (or analog input for AIscout2). For AIscout, an integer >= 1 represents a discrete input, and '~' complements the input state. For AIscout2, this expression is a combination of analog and discrete inputs. Analog inputs are preceded by an 'A' and discrete inputs by a 'D'. The complement '~' works on a group of inputs. Also, multiple inputs may be specified as a comma separated list (1,3,5) or a hyphenated range (1-5). The expression is a combination of up to three ORs and as many ANDs as desired (i.e. a sum of 3 products). An empty string indicates manual control of the output point. AIscout examples: '15' -- energize the output when input 15 is alarmed (and deenergize when the input is normal). '~8' -- energize the output when input 8 is normal (and deenergize when the input is alarmed). AIscout2 examples: 'AH1,3,5' -- energize if the high alarm is active on analog inputs 1, 3 and 5. '~AH1-2&AL3' -- energize if analog inputs 1 and 2 are normal (not in the alarm state) AND analog input 3 is in the low alarm state. 'AH*|AL*|D*' -- energize if ANY analog is alarmed OR any discrete input is alarmed.")
aislcdiscPowerSupplyStatus = MibScalar((1, 3, 6, 1, 4, 1, 539, 24, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("okay", 1), ("trouble", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aislcdiscPowerSupplyStatus.setStatus('current')
if mibBuilder.loadTexts: aislcdiscPowerSupplyStatus.setDescription('Status of the power supply. okay(1) or trouble(2). When the SLC is booted, this indicates okay(1) until the software determines the correct status.')
aislcdiscPowerSupplyAStatus = MibScalar((1, 3, 6, 1, 4, 1, 539, 24, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("okay", 1), ("underVoltage", 2), ("overVoltage", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aislcdiscPowerSupplyAStatus.setStatus('current')
if mibBuilder.loadTexts: aislcdiscPowerSupplyAStatus.setDescription("Status of the 'A' power supply.")
aislcdiscPowerSupplyBStatus = MibScalar((1, 3, 6, 1, 4, 1, 539, 24, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("okay", 1), ("underVoltage", 2), ("overVoltage", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aislcdiscPowerSupplyBStatus.setStatus('current')
if mibBuilder.loadTexts: aislcdiscPowerSupplyBStatus.setDescription("Status of the 'B' power supply.")
aislcdiscFanStatus = MibScalar((1, 3, 6, 1, 4, 1, 539, 24, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("okay", 1), ("fail", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aislcdiscFanStatus.setStatus('current')
if mibBuilder.loadTexts: aislcdiscFanStatus.setDescription('Status of the fan unit.')
aislcdisc5VPowerSupplyAStatus = MibScalar((1, 3, 6, 1, 4, 1, 539, 24, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("okay", 1), ("fail", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aislcdisc5VPowerSupplyAStatus.setStatus('current')
if mibBuilder.loadTexts: aislcdisc5VPowerSupplyAStatus.setDescription("Status of the 'A' 5V power supply.")
aislcdisc5VPowerSupplyBStatus = MibScalar((1, 3, 6, 1, 4, 1, 539, 24, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("okay", 1), ("fail", 2), ("notPresent", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aislcdisc5VPowerSupplyBStatus.setStatus('current')
if mibBuilder.loadTexts: aislcdisc5VPowerSupplyBStatus.setDescription("Status of the 'B' 5V power supply.")
aislcdiscFiber1TransmitterStatus = MibScalar((1, 3, 6, 1, 4, 1, 539, 24, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("okay", 1), ("fail", 2), ("notPresent", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aislcdiscFiber1TransmitterStatus.setStatus('current')
if mibBuilder.loadTexts: aislcdiscFiber1TransmitterStatus.setDescription("Status of the first fiber port's transmitter.")
aislcdiscFiber2TransmitterStatus = MibScalar((1, 3, 6, 1, 4, 1, 539, 24, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("okay", 1), ("fail", 2), ("notPresent", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aislcdiscFiber2TransmitterStatus.setStatus('current')
if mibBuilder.loadTexts: aislcdiscFiber2TransmitterStatus.setDescription("Status of the second fiber port's transmitter.")
aislcdiscAnalogInputPowerSupplyStatus = MibScalar((1, 3, 6, 1, 4, 1, 539, 24, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("okay", 1), ("fail", 2), ("notPresent", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aislcdiscAnalogInputPowerSupplyStatus.setStatus('current')
if mibBuilder.loadTexts: aislcdiscAnalogInputPowerSupplyStatus.setDescription('Status of the analog input power supply fuse.')
mibBuilder.exportSymbols("AISLCDISCRETE-MIB", aislcdintl1ServiceAffecting=aislcdintl1ServiceAffecting, aislcdinDebounceValue=aislcdinDebounceValue, aislcdinAlarmSeverity=aislcdinAlarmSeverity, aislcdintl1AccessIDType=aislcdintl1AccessIDType, aislcdouttl1AccessID=aislcdouttl1AccessID, aislcdoutAlarmStateText=aislcdoutAlarmStateText, aislcdinCurrentStateText=aislcdinCurrentStateText, aislcdintl1AccessID=aislcdintl1AccessID, aislcdintl1ConditionType=aislcdintl1ConditionType, PositiveInteger=PositiveInteger, aislcdisc5VPowerSupplyAStatus=aislcdisc5VPowerSupplyAStatus, aiSLCDiscrete=aiSLCDiscrete, aislcdinAlarmStateText=aislcdinAlarmStateText, aislcdoutNormalOutput=aislcdoutNormalOutput, aislcdinNormalStateText=aislcdinNormalStateText, aislcdoutPointNumber=aislcdoutPointNumber, aislcdiscPowerSupplyAStatus=aislcdiscPowerSupplyAStatus, aislcdiscAnalogInputPowerSupplyStatus=aislcdiscAnalogInputPowerSupplyStatus, aislcdoutAlarmSeverity=aislcdoutAlarmSeverity, aiSLCDiscreteOutputTable=aiSLCDiscreteOutputTable, PYSNMP_MODULE_ID=aiSLCDiscrete, aislcdinPointNumber=aislcdinPointNumber, aislcdoutTrapEnable=aislcdoutTrapEnable, aislcdinCurrentState=aislcdinCurrentState, aiSLCDiscreteOutputEntry=aiSLCDiscreteOutputEntry, aislcdoutLastChangeTime=aislcdoutLastChangeTime, aii=aii, aislcdinLastChangeTime=aislcdinLastChangeTime, aislcdoutDescription=aislcdoutDescription, aislcdoutEnergizeExpression=aislcdoutEnergizeExpression, aislcdintl1AlarmType=aislcdintl1AlarmType, aislcdoutNonAlarmStateText=aislcdoutNonAlarmStateText, aislcdiscFiber2TransmitterStatus=aislcdiscFiber2TransmitterStatus, aislcdoutOutput=aislcdoutOutput, aislcdoutOutputEnable=aislcdoutOutputEnable, aislcdinTrapEnable=aislcdinTrapEnable, aislcdoutCurrentState=aislcdoutCurrentState, aislcdiscPowerSupplyBStatus=aislcdiscPowerSupplyBStatus, aislcdintl1AlarmMessage=aislcdintl1AlarmMessage, aislcdiscPowerSupplyStatus=aislcdiscPowerSupplyStatus, aislcdisc5VPowerSupplyBStatus=aislcdisc5VPowerSupplyBStatus, aislcdintl1Provisioned=aislcdintl1Provisioned, aislcdiscFiber1TransmitterStatus=aislcdiscFiber1TransmitterStatus, aiSLCDiscreteInputEntry=aiSLCDiscreteInputEntry, aislcdoutCurrentStateText=aislcdoutCurrentStateText, aislcdoutMomentaryTimeout=aislcdoutMomentaryTimeout, aislcdinCurrentInput=aislcdinCurrentInput, aislcdinDescription=aislcdinDescription, aislcdinNormalInput=aislcdinNormalInput, aislcdoutCurrentOutput=aislcdoutCurrentOutput, aislcdintl1NotificationCode=aislcdintl1NotificationCode, aislcdiscFanStatus=aislcdiscFanStatus, aislcdintl1ConditionDescription=aislcdintl1ConditionDescription, aiSLCDiscreteInputTable=aiSLCDiscreteInputTable, aislcdoutAlarmStateOutput=aislcdoutAlarmStateOutput)
