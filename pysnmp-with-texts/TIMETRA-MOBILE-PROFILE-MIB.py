#
# PySNMP MIB module TIMETRA-MOBILE-PROFILE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/TIMETRA-MOBILE-PROFILE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:19:36 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint")
InterfaceIndexOrZero, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero")
InetAddress, InetAddressType, InetAddressPrefixLength, InetPortNumber = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType", "InetAddressPrefixLength", "InetPortNumber")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
Unsigned32, TimeTicks, IpAddress, Counter64, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, NotificationType, ObjectIdentity, Gauge32, Integer32, ModuleIdentity, Counter32, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "TimeTicks", "IpAddress", "Counter64", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "NotificationType", "ObjectIdentity", "Gauge32", "Integer32", "ModuleIdentity", "Counter32", "MibIdentifier")
RowStatus, TimeStamp, TextualConvention, TruthValue, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TimeStamp", "TextualConvention", "TruthValue", "DisplayString")
timetraSRMIBModules, tmnxSRObjs, tmnxSRConfs = mibBuilder.importSymbols("TIMETRA-GLOBAL-MIB", "timetraSRMIBModules", "tmnxSRObjs", "tmnxSRConfs")
TmnxMobStaticPolPrecedenceOrZero, TmnxMobDiaPeerHost, TDSCPValue, TmnxMobDiaTransTimer, TmnxVRtrID, TmnxMobChargingProfile, TmnxMobProfPolReportingLevel, TmnxMobProfIpTtl, TmnxAdminState, TDSCPName, TmnxMobMccOrEmpty, TmnxTimeInSec, TmnxMobArpValue, TmnxMobQciValue, TItemDescription, TmnxMobProfName, TmnxEnabledDisabled, TFCName, TmnxMobMcc, TmnxMobArpValueOrZero, TmnxMobProfMbrRate, TmnxMobProfPolMeteringMethod, TTcpUdpPortOperator, TIpProtocol, TmnxMobMnc, TTcpUdpPort, TmnxMobQciValueOrZero, TmnxMobProfNameOrEmpty, TmnxMobProfGbrRate, TmnxMobMncOrEmpty, TmnxMobBufferLimit, TmnxMobQueueLimit, TNamedItemOrEmpty, TmnxMobProfPolChargingMethod = mibBuilder.importSymbols("TIMETRA-TC-MIB", "TmnxMobStaticPolPrecedenceOrZero", "TmnxMobDiaPeerHost", "TDSCPValue", "TmnxMobDiaTransTimer", "TmnxVRtrID", "TmnxMobChargingProfile", "TmnxMobProfPolReportingLevel", "TmnxMobProfIpTtl", "TmnxAdminState", "TDSCPName", "TmnxMobMccOrEmpty", "TmnxTimeInSec", "TmnxMobArpValue", "TmnxMobQciValue", "TItemDescription", "TmnxMobProfName", "TmnxEnabledDisabled", "TFCName", "TmnxMobMcc", "TmnxMobArpValueOrZero", "TmnxMobProfMbrRate", "TmnxMobProfPolMeteringMethod", "TTcpUdpPortOperator", "TIpProtocol", "TmnxMobMnc", "TTcpUdpPort", "TmnxMobQciValueOrZero", "TmnxMobProfNameOrEmpty", "TmnxMobProfGbrRate", "TmnxMobMncOrEmpty", "TmnxMobBufferLimit", "TmnxMobQueueLimit", "TNamedItemOrEmpty", "TmnxMobProfPolChargingMethod")
timetraMobProfileMIBModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 6527, 1, 1, 3, 67))
timetraMobProfileMIBModule.setRevisions(('1909-12-23 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: timetraMobProfileMIBModule.setRevisionsDescriptions(('Rev MG-1.0 23 Dec 2009 00:00 MG-1.0 release of the TIMETRA-MOBILE-PROFILE-MIB.',))
if mibBuilder.loadTexts: timetraMobProfileMIBModule.setLastUpdated('0912230000Z')
if mibBuilder.loadTexts: timetraMobProfileMIBModule.setOrganization('Alcatel-Lucent')
if mibBuilder.loadTexts: timetraMobProfileMIBModule.setContactInfo('Alcatel-Lucent 7xxx Support Web: http://www.alcatel.com/comps/pages/carrier_support.jhtml')
if mibBuilder.loadTexts: timetraMobProfileMIBModule.setDescription("This document is the SNMP MIB module to manage and provision the profile and the policy for the mobile gateways. Copyright 2008-2012 Alcatel-Lucent. All rights reserved. Reproduction of this document is authorized on the condition that the foregoing copyright notice is included. This SNMP MIB module (Specification) embodies Alcatel-Lucent's proprietary intellectual property. Alcatel-Lucent retains all title and ownership in the Specification, including any revisions. Alcatel-Lucent grants all interested parties a non-exclusive license to use and distribute an unmodified copy of this Specification in connection with management of Alcatel-Lucent products, and without fee, provided this copyright notice and license appear on all copies. This Specification is supplied 'as is', and Alcatel-Lucent makes no warranty, either express or implied, as to the use, operation, condition, or performance of the Specification.")
tmnxMobProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67))
tmnxMobProfileObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1))
tmnxMobProfileGlobalObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 2))
tmnxMobProfileConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 67))
tmnxMobProfileCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 67, 1))
tmnxMobProfileGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 67, 2))
class TmnxMobProfThreshold(TextualConvention, Unsigned32):
    description = 'The data type TmnxMobProfThreshold describes the threshold percentage.'
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(1, 100)

class TmnxMobProfMsgReTxTimeout(TextualConvention, Unsigned32):
    description = 'The data type TmnxMobProfMsgReTxTimeout describes the message retransmit timeout value in seconds.'
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(1, 30)

class TmnxMobProfMsgReTxRetryCount(TextualConvention, Unsigned32):
    description = 'The data type TmnxMobProfMsgReTxRetryCount describes the message retransmit retry count value.'
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(1, 8)

class TmnxMobProfKeepAliveTimeout(TextualConvention, Unsigned32):
    description = 'The data type TmnxMobProfKeepAliveTimeout describes the keep-alive timeout value in seconds.'
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(60, 180), )
class TmnxMobProfKeepAliveRetryCount(TextualConvention, Unsigned32):
    description = 'The data type TmnxMobProfKeepAliveRetryCount describes the keep-alive retry count value.'
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(1, 15)

class TmnxMobProfKeepAliveResponse(TextualConvention, Unsigned32):
    description = 'The data type TmnxMobProfKeepAliveResponse describes the keep-alive T3 response value in seconds.'
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(1, 20)

class TmnxMobProfKeepAliveInterval(TextualConvention, Unsigned32):
    description = 'The data type TmnxMobProfKeepAliveInterval describes the intervals between heartbeat messages'
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(60, 180), )
class TmnxMobProfAllowDiscard(TextualConvention, Integer32):
    description = 'The TmnxMobProfAllowDiscard is an enumerated integer that describes the traffic handling option for each Diameter Credit Control Application (DCCA) profile.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("allow", 1), ("discard", 2))

tmnxMobProfSysTblLstChgd = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 2, 1), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMobProfSysTblLstChgd.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfSysTblLstChgd.setDescription('The value of tmnxMobProfSysTblLstChgd indicates the sysUpTime at the time of the last modification to tmnxMobProfSysTable by adding, deleting an entry or change to a writable object in the table. If no changes were made to the table since the last re-initialization of the local network management subsystem, then this object contains a zero value.')
tmnxMobProfSysTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 1), )
if mibBuilder.loadTexts: tmnxMobProfSysTable.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfSysTable.setDescription('The tmnxMobProfSysTable has an entry for each system limit profile configured on the system. A system limit profile is configured to limit the resource utilization and can be applied in system configuration mode at the global level (applicable for all MSMs) by setting the value of TIMETRA-MOBILE-GATEWAY-MIB::tmnxMobGwSysLimitName or at the mobile system group level by setting the value of the corresponding TIMETRA-MOBILE-GATEWAY-MIB::tmnxMobGwSysGroupSysLimitName.')
tmnxMobProfSysEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 1, 1), ).setIndexNames((1, "TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfSysName"))
if mibBuilder.loadTexts: tmnxMobProfSysEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfSysEntry.setDescription("Each row entry represents a system limit profile defined in the system. Entries can be created and deleted by the user. System limit profile 'default' is created by the agent itself at system initialization. It cannot be modified or deleted.")
tmnxMobProfSysName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 1, 1, 1), TmnxMobProfName())
if mibBuilder.loadTexts: tmnxMobProfSysName.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfSysName.setDescription('The value of tmnxMobProfSysName specifies the unique name of this system limit profile.')
tmnxMobProfSysRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfSysRowStatus.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfSysRowStatus.setDescription('The value of tmnxMobProfSysRowStatus specifies the row status of this entry. It is used for creation and deletion of this system limit profile.')
tmnxMobProfSysLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 1, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMobProfSysLastChanged.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfSysLastChanged.setDescription('The value of tmnxMobProfSysLastChanged indicates the timestamp of the last change to this row in tmnxMobProfSysTable.')
tmnxMobProfSysDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 1, 1, 4), TItemDescription().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfSysDescription.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfSysDescription.setDescription('The value of tmnxMobProfSysDescription specifies the description string for this system limit profile. It can consist of any printable, seven-bit ASCII characters up to 80 characters in length.')
tmnxMobProfSysBCLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(10000, 250000)).clone(250000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfSysBCLimit.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfSysBCLimit.setDescription('The value of tmnxMobProfSysBCLimit specifies the maximum number of bearer-contexts allowed on a Mobility Service Module (MSM). The bearer-context can be a default bearer type or a dedicated bearer type.')
tmnxMobProfSysBCActivtyRate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(100, 1000)).clone(500)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfSysBCActivtyRate.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfSysBCActivtyRate.setDescription('The value of tmnxMobProfSysBCActivtyRate specifies the maximum number of bearer-contexts creation or deletion activities per second per Mobility Service Module (MSM). The bearer-context activity can be related to a default bearer or a dedicated bearer. Activities above the specified limit will not be serviced by the MSM.')
tmnxMobProfSysBCPdnLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 11)).clone(5)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfSysBCPdnLimit.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfSysBCPdnLimit.setDescription('The value of tmnxMobProfSysBCPdnLimit specifies the maximum number of bearers allowed to be established per User Equipment (UE) and Access Point Name (APN) or Packet Data Network Gateway (PGW) connection. The gateway will reject the bearer creations once this is reached and allow the bearer creations only when the bearer number reaches below the limit.')
tmnxMobProfSysBCUeLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 1, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 11)).clone(5)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfSysBCUeLimit.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfSysBCUeLimit.setDescription('The value of tmnxMobProfSysBCUeLimit specifies the maximum number of bearers allowed to be established per User Equipment (UE). Gateway will reject the bearer creations once this is reached and allow the bearer creations only when the bearer number reaches below the limit.')
tmnxMobProfSysSDFIpv4Limit = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 1, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1500000)).clone(390000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfSysSDFIpv4Limit.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfSysSDFIpv4Limit.setDescription('The value of tmnxMobProfSysSDFIpv4Limit specifies the maximum number of IPv4 service data flows on a gateway.')
tmnxMobProfSysSDFIpv6Limit = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 1, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 512000)).clone(190000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfSysSDFIpv6Limit.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfSysSDFIpv6Limit.setDescription('The value of tmnxMobProfSysSDFIpv6Limit specifies the maximum number of IPv6 service data flows on a gateway.')
tmnxMobProfSysCpuThreshldCriticl = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 1, 1, 11), TmnxMobProfThreshold().clone(50)).setUnits('percentage').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfSysCpuThreshldCriticl.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfSysCpuThreshldCriticl.setDescription('The value of tmnxMobProfSysCpuThreshldCriticl specifies the critical CPU threshold for overload control per Mobility Service Module (MSM).')
tmnxMobProfSysCpuThreshldMajor = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 1, 1, 12), TmnxMobProfThreshold().clone(50)).setUnits('percentage').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfSysCpuThreshldMajor.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfSysCpuThreshldMajor.setDescription('The value of tmnxMobProfSysCpuThreshldMajor specifies the major CPU threshold for overload control per Mobility Service Module (MSM).')
tmnxMobProfSysCpuThreshldMinor = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 1, 1, 13), TmnxMobProfThreshold().clone(50)).setUnits('percentage').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfSysCpuThreshldMinor.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfSysCpuThreshldMinor.setDescription('The value of tmnxMobProfSysCpuThreshldMinor specifies the minor CPU threshold for overload control per Mobility Service Module (MSM).')
tmnxMobProfSysMemThreshldCriticl = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 1, 1, 14), TmnxMobProfThreshold().clone(50)).setUnits('percentage').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfSysMemThreshldCriticl.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfSysMemThreshldCriticl.setDescription('The value of tmnxMobProfSysMemThreshldCriticl specifies the critical memory threshold for overload control per Mobility Service Module (MSM).')
tmnxMobProfSysMemThreshldMajor = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 1, 1, 15), TmnxMobProfThreshold().clone(50)).setUnits('percentage').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfSysMemThreshldMajor.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfSysMemThreshldMajor.setDescription('The value of tmnxMobProfSysMemThreshldMajor specifies the major memory threshold for overload control per Mobility Service Module (MSM).')
tmnxMobProfSysMemThreshldMinor = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 1, 1, 16), TmnxMobProfThreshold().clone(50)).setUnits('percentage').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfSysMemThreshldMinor.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfSysMemThreshldMinor.setDescription('The value of tmnxMobProfSysMemThreshldMinor specifies the minor memory threshold for overload control per Mobility Service Module (MSM).')
tmnxMobProfSysSgnlFailThrshldS5 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 1, 1, 17), TmnxMobProfThreshold().clone(50)).setUnits('percentage').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfSysSgnlFailThrshldS5.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfSysSgnlFailThrshldS5.setDescription('The value of tmnxMobProfSysSgnlFailThrshldS5 specifies the S5 reference point signaling failure threshold.')
tmnxMobProfSysSgnlFailThrshldS8 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 1, 1, 18), TmnxMobProfThreshold().clone(50)).setUnits('percentage').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfSysSgnlFailThrshldS8.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfSysSgnlFailThrshldS8.setDescription('The value of tmnxMobProfSysSgnlFailThrshldS8 specifies the S8 reference point signaling failure threshold.')
tmnxMobProfSysSgnlFailThrshldS11 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 1, 1, 19), TmnxMobProfThreshold().clone(50)).setUnits('percentage').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfSysSgnlFailThrshldS11.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfSysSgnlFailThrshldS11.setDescription('The value of tmnxMobProfSysSgnlFailThrshldS11 specifies the S11 reference point signaling failure threshold.')
tmnxMobProfSysSgnlFailThrshldGxc = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 1, 1, 20), TmnxMobProfThreshold().clone(50)).setUnits('percentage').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfSysSgnlFailThrshldGxc.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfSysSgnlFailThrshldGxc.setDescription('The value of tmnxMobProfSysSgnlFailThrshldGxc specifies the Gxc reference point signaling failure threshold.')
tmnxMobProfSysTrfcDropThrshldS1u = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 1, 1, 21), TmnxMobProfThreshold().clone(50)).setUnits('percentage').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfSysTrfcDropThrshldS1u.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfSysTrfcDropThrshldS1u.setDescription('The value of tmnxMobProfSysTrfcDropThrshldS1u specifies the S1u reference point traffic drop threshold.')
tmnxMobProfSysTrfcDropThrshldS5 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 1, 1, 22), TmnxMobProfThreshold().clone(50)).setUnits('percentage').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfSysTrfcDropThrshldS5.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfSysTrfcDropThrshldS5.setDescription('The value of tmnxMobProfSysTrfcDropThrshldS5 specifies the S5 reference point traffic drop threshold.')
tmnxMobProfSysTrfcDropThrshldS8 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 1, 1, 23), TmnxMobProfThreshold().clone(50)).setUnits('percentage').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfSysTrfcDropThrshldS8.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfSysTrfcDropThrshldS8.setDescription('The value of tmnxMobProfSysTrfcDropThrshldS8 specifies the S8 reference point traffic drop threshold.')
tmnxMobProfSysPagingBufferLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 1, 1, 24), TmnxMobBufferLimit().clone(8000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfSysPagingBufferLimit.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfSysPagingBufferLimit.setDescription('The value of tmnxMobProfSysPagingBufferLimit specifies the down-link buffer limit for the idle-user in the Serving Gateway (SGW). The SGW buffers down-link packets from the Packet Data Network Gateway(PGW) and indicates the Mobility Management Entity (MME) to page or wakeup the User Equipment (UE). The buffer is common for all the UE flows.')
tmnxMobProfSysPagingBufferSize = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 1, 1, 25), TmnxMobQueueLimit().clone(8000)).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfSysPagingBufferSize.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfSysPagingBufferSize.setDescription('The value of tmnxMobProfSysPagingBufferSize specifies the paging buffer-size set aside in fast-path for idle-user down-link buffering.')
tmnxMobProfSysPagingTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 1, 1, 26), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 60)).clone(30)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfSysPagingTimeout.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfSysPagingTimeout.setDescription('The value of tmnxMobProfSysPagingTimeout specifies the paging time-out value for the Serving Gateway (SGW) paging request. The SGW waits till the tmnxMobProfSysPagingTimeout time for the paging response, then the idle-user paging timer is canceled and the buffered down-link packets are discarded.')
tmnxMobProfSysS1BufferLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 1, 1, 27), TmnxMobBufferLimit().clone(8000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfSysS1BufferLimit.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfSysS1BufferLimit.setDescription('The value of tmnxMobProfSysS1BufferLimit specifies the down-link buffer limit for the S1 based mobility handover scenario in the Serving Gateway (SGW). If the buffer limit has been reached, then the incoming packets from the Packet Data Network Gateway (PGW) are dropped.')
tmnxMobProfSysS1BufferSize = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 1, 1, 28), TmnxMobQueueLimit().clone(8000)).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfSysS1BufferSize.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfSysS1BufferSize.setDescription('The value of tmnxMobProfSysS1BufferSize specifies the buffer-size set aside in fast-path for S1 based mobility down-link buffering.')
tmnxMobProfDiaTblLstChgd = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 2, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMobProfDiaTblLstChgd.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfDiaTblLstChgd.setDescription('The value of tmnxMobProfDiaTblLstChgd indicates the sysUpTime at the time of the last modification to tmnxMobProfDiaTable by adding, deleting an entry or change to a writable object in the table. If no changes were made to the table since the last re-initialization of the local network management subsystem, then this object contains a zero value.')
tmnxMobProfDiaTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 2), )
if mibBuilder.loadTexts: tmnxMobProfDiaTable.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfDiaTable.setDescription('The tmnxMobProfDiaTable has an entry for each diameter profile configured on the system. Diameter profile defines diameter connection related parameters. A maximum of 100 diameter profiles can be configured in the system.')
tmnxMobProfDiaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 2, 1), ).setIndexNames((1, "TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfDiaName"))
if mibBuilder.loadTexts: tmnxMobProfDiaEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfDiaEntry.setDescription("Each row entry represents a diameter profile defined in the system. Entries can be created and deleted by the user. Diameter profile 'default' is created by the agent itself at system initialization. It cannot be modified or deleted.")
tmnxMobProfDiaName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 2, 1, 1), TmnxMobProfName())
if mibBuilder.loadTexts: tmnxMobProfDiaName.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfDiaName.setDescription('The value of tmnxMobProfDiaName specifies the unique name of this diameter profile.')
tmnxMobProfDiaRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfDiaRowStatus.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfDiaRowStatus.setDescription('The value of tmnxMobProfDiaRowStatus specifies the row status of this entry. It is used for creation and deletion of this diameter profile.')
tmnxMobProfDiaLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 2, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMobProfDiaLastChanged.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfDiaLastChanged.setDescription('The value of tmnxMobProfDiaLastChanged indicates the timestamp of the last change to this row in tmnxMobProfDiaTable.')
tmnxMobProfDiaDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 2, 1, 4), TItemDescription().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfDiaDescription.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfDiaDescription.setDescription('The value of tmnxMobProfDiaDescription specifies the description string for this diameter profile. It can consist of any printable, seven-bit ASCII characters up to 80 characters in length.')
tmnxMobProfDiaWatchdgTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 2, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 180)).clone(30)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfDiaWatchdgTimer.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfDiaWatchdgTimer.setDescription('The value of tmnxMobProfDiaWatchdgTimer specifies the maximum amount of time the node waits for a diameter peer to respond to watchdog packet. When the watchdog timer expires, a Device-Watchdog-Request (DWR) is sent to the diameter peer and the watchdog timer is reset. If a Device-Watchdog-Answer (DWA) is not received before the next expiration of the watchdog timer, transport failure to the Diameter peer has occurred.')
tmnxMobProfDiaConnTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 2, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 180)).clone(30)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfDiaConnTimer.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfDiaConnTimer.setDescription('The value of tmnxMobProfDiaConnTimer specifies the maximum amount of time the node attempts to reconnect to a diameter peer after a connection to the peer has been brought down due to a transport failure. There are certain exceptions to this rule, such as peer which terminated the transport connection indicating that it does not wish to communicate. The configuration at peer level overrules the value configured at diameter-base level for the given peer. A value of 0 means that no attempt will be made to re-establish the connection.')
tmnxMobProfDiaTransTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 2, 1, 7), TmnxMobDiaTransTimer().clone(5)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfDiaTransTimer.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfDiaTransTimer.setDescription('The value of tmnxMobProfDiaTransTimer specifies the maximum amount of time the node waits for a diameter peer to respond before trying another peer.')
tmnxMobProfDiaIpTtl = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 2, 1, 8), TmnxMobProfIpTtl().clone(255)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfDiaIpTtl.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfDiaIpTtl.setDescription('The value of tmnxMobProfDiaIpTtl specifies the IP Time-To-Live (TTL) value to be used for diameter signaling messages.')
tmnxMobProfDiaIpDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 2, 1, 9), TDSCPValue().clone(56)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfDiaIpDscp.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfDiaIpDscp.setDescription('The value of tmnxMobProfDiaIpDscp specifies the Differentiated Services Code Point (DSCP) value in the IP header for diameter signaling messages sent. This value can be configured to treat a packet as Network Control (NC) packet ahead of Expedited Forwarding (EF) packets.')
tmnxMobProfDiaDprTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 2, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600)).clone(1800)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfDiaDprTimeout.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfDiaDprTimeout.setDescription('The value of tmnxMobProfDiaDprTimeout specifies the amount of time the node waits before re-starting diameter connection setup when remote peer intentionally disconnected by sending Disconnect-Peer-Request (DPR).')
tmnxMobProfDiaPermFailRetryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 2, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1440)).clone(30)).setUnits('minutes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfDiaPermFailRetryTime.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfDiaPermFailRetryTime.setDescription("The value of tmnxMobProfDiaPermFailRetryTime specifies the amount of time the node waits before retrying diameter connection setup to start the connection dynamically without operator's intervention incase of permanent failures from the remote peer. A value of 0 means that no attempt will be made to re-establish the connection.")
tmnxMobProfDiaDnsRefreshInt = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 2, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 86400)).clone(21600)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfDiaDnsRefreshInt.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfDiaDnsRefreshInt.setDescription('The value of tmnxMobProfDiaDnsRefreshInt specifies the amount of time the node waits before sending a Domain Name Server (DNS) query to refresh the Fully Qualified Domain Name (FQDN) resolution to a list of IP addresses. TTL received in a DNS Response is not used at the Gateway. A value of 0 means that the DNS refresh timer is disabled.')
tmnxMobProfDiaPeerTblLstChgd = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 2, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMobProfDiaPeerTblLstChgd.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfDiaPeerTblLstChgd.setDescription('The value of tmnxMobProfDiaPeerTblLstChgd indicates the sysUpTime at the time of the last modification to tmnxMobProfDiaPeerTable by adding, deleting an entry or change to a writable object in the table. If no changes were made to the table since the last re-initialization of the local network management subsystem, then this object contains a zero value.')
tmnxMobProfDiaPeerTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 3), )
if mibBuilder.loadTexts: tmnxMobProfDiaPeerTable.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfDiaPeerTable.setDescription('The tmnxMobProfDiaPeerTable has an entry for each diameter peer profile configured on the system. Diameter peer profile defines peer related information needed for diameter applications. A maximum of 75 diameter peer profiles can be configured in the system.')
tmnxMobProfDiaPeerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 3, 1), ).setIndexNames((0, "TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfDiaPeerName"))
if mibBuilder.loadTexts: tmnxMobProfDiaPeerEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfDiaPeerEntry.setDescription('Each row entry represents a diameter peer profile defined in the system. Entries can be created and deleted by the user.')
tmnxMobProfDiaPeerName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 3, 1, 1), TmnxMobProfName())
if mibBuilder.loadTexts: tmnxMobProfDiaPeerName.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfDiaPeerName.setDescription('The value of tmnxMobProfDiaPeerName specifies the unique name of this diameter peer profile.')
tmnxMobProfDiaPeerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 3, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfDiaPeerRowStatus.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfDiaPeerRowStatus.setDescription('The value of tmnxMobProfDiaPeerRowStatus specifies the row status of this entry. It is used for creation and deletion of this diameter peer profile.')
tmnxMobProfDiaPeerLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 3, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMobProfDiaPeerLastChanged.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfDiaPeerLastChanged.setDescription('The value of tmnxMobProfDiaPeerLastChanged indicates the timestamp of the last change to this row in tmnxMobProfDiaPeerTable.')
tmnxMobProfDiaPeerDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 3, 1, 4), TItemDescription().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfDiaPeerDescription.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfDiaPeerDescription.setDescription('The value of tmnxMobProfDiaPeerDescription specifies the description string for this diameter peer profile. It can consist of any printable, seven-bit ASCII characters up to 80 characters in length.')
tmnxMobProfDiaPeerDiaProfName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 3, 1, 5), TmnxMobProfNameOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfDiaPeerDiaProfName.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfDiaPeerDiaProfName.setDescription('The value of tmnxMobProfDiaPeerDiaProfName specifies the name of the diameter profile to be associated with this diameter peer profile. Multiple diameter peer profiles can reference the same diameter profile.')
tmnxMobProfDiaPeerDestRealm = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 3, 1, 6), TmnxMobDiaPeerHost().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfDiaPeerDestRealm.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfDiaPeerDestRealm.setDescription('The value of tmnxMobProfDiaPeerDestRealm specifies the destination realm of the diameter peer.')
tmnxMobProfDiaPeerTransport = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tcp", 1), ("sctp", 2))).clone('tcp')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfDiaPeerTransport.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfDiaPeerTransport.setDescription('The value of tmnxMobProfDiaPeerTransport specifies the type of diameter signaling to be used.')
tmnxMobProfDiaPeerLoadBalance = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 3, 1, 8), TmnxEnabledDisabled().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfDiaPeerLoadBalance.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfDiaPeerLoadBalance.setDescription('The value of tmnxMobProfDiaPeerLoadBalance specifies if load balanacing is enabled or not. If load balancing is enabled then all the peers will be used in round-robin fashion, otherwise only the first peer will be used for diameter sessions.')
tmnxMobProfDiaPeerIfVRtrId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 3, 1, 9), TmnxVRtrID().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfDiaPeerIfVRtrId.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfDiaPeerIfVRtrId.setDescription('The value of tmnxMobProfDiaPeerIfVRtrId specifies the virtual router to which the interface specified by tmnxMobProfDiaPeerIfIndex belongs.')
tmnxMobProfDiaPeerIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 3, 1, 10), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfDiaPeerIfIndex.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfDiaPeerIfIndex.setDescription('The value of tmnxMobProfDiaPeerIfIndex specifies the interface index of the local interface used by diameter applications.')
tmnxMobProfDiaPeerApplication = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 0), ("gx", 1), ("gxc", 2), ("rf", 3), ("gy", 4), ("s6b", 5))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfDiaPeerApplication.setReference('3GPP TS 32.251 v 8.8.0')
if mibBuilder.loadTexts: tmnxMobProfDiaPeerApplication.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfDiaPeerApplication.setDescription('The value of tmnxMobProfDiaPeerApplication specifies the type of application where this profile will be used. The names refer to the interfaces between different nodes in the LTE network.')
tmnxMobProfDiaPeerListTblLstChgd = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 2, 4), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMobProfDiaPeerListTblLstChgd.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfDiaPeerListTblLstChgd.setDescription('The value of tmnxMobProfDiaPeerListTblLstChgd indicates the sysUpTime at the time of the last modification to tmnxMobProfDiaPeerListTable by adding, deleting an entry or change to a writable object in the table. If no changes were made to the table since the last re-initialization of the local network management subsystem, then this object contains a zero value.')
tmnxMobProfDiaPeerListTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 4), )
if mibBuilder.loadTexts: tmnxMobProfDiaPeerListTable.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfDiaPeerListTable.setDescription('The tmnxMobProfDiaPeerListTable has an entry for each IP address configured in a diameter peer profile. The diameter peer profiles for Gxc and Gx reference points will have exactly one peer address provisioned. A maximum of 20 peers can be configured for each diameter peer profile defined in the system.')
tmnxMobProfDiaPeerListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 4, 1), ).setIndexNames((0, "TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfDiaPeerName"), (0, "TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfDiaPeerListIndex"))
if mibBuilder.loadTexts: tmnxMobProfDiaPeerListEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfDiaPeerListEntry.setDescription('Each row entry represents a IP address configured in a diameter peer profile. Entries can be created and deleted by the user.')
tmnxMobProfDiaPeerListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 4, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 19)))
if mibBuilder.loadTexts: tmnxMobProfDiaPeerListIndex.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfDiaPeerListIndex.setDescription('The value of tmnxMobProfDiaPeerListIndex specifies the unique value which identifies this IP address entry.')
tmnxMobProfDiaPeerListRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 4, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfDiaPeerListRowStatus.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfDiaPeerListRowStatus.setDescription("The value of tmnxMobProfDiaPeerListRowStatus specifies the row status of this entry. It is used for creation and deletion of this peer entry. In order for the row creation to succeed, values for tmnxMobProfDiaPeerListAddrType, tmnxMobProfDiaPeerListAddr and tmnxMobProfDiaPeerListPort must be included in the same SNMP SET PDU as tmnxMobProfDiaPeerListRowStatus. Otherwise, the SET request will fail with an 'inconsistentValue' error.")
tmnxMobProfDiaPeerListLastChngd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 4, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMobProfDiaPeerListLastChngd.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfDiaPeerListLastChngd.setDescription('The value of tmnxMobProfDiaPeerListLastChngd indicates the timestamp of the last change to this row in tmnxMobProfDiaPeerListTable.')
tmnxMobProfDiaPeerListAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 4, 1, 4), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfDiaPeerListAddrType.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfDiaPeerListAddrType.setDescription('The value of tmnxMobProfDiaPeerListAddrType specifies the type of address represented by tmnxMobProfDiaPeerListAddr. The value of this object cannot be modified once the row has been created.')
tmnxMobProfDiaPeerListAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 4, 1, 5), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfDiaPeerListAddr.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfDiaPeerListAddr.setDescription("The value of tmnxMobProfDiaPeerListAddr specifies the IP address of the peer for which this entry contains information. If the value of the corresponsding tmnxMobProfDiaPeerListAddrType is 'dns', then the IP address for this Peer will be obtained via DNS A-Record query. The value of this object cannot be modified once the row has been created.")
tmnxMobProfDiaPeerListPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 4, 1, 6), InetPortNumber().subtype(subtypeSpec=ValueRangeConstraint(3868, 3888)).clone(3868)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfDiaPeerListPort.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfDiaPeerListPort.setDescription('The value of tmnxMobProfDiaPeerListPort specifies the port number for this peer. The value of this object cannot be modified once the row has been created.')
tmnxMobProfDiaPeerAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 4, 1, 7), TmnxAdminState().clone('outOfService')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfDiaPeerAdminState.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfDiaPeerAdminState.setDescription('The value of tmnxMobProfDiaPeerAdminState specifies the desired administrative state of this peer.')
tmnxMobProfPmipv6TblLstChgd = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 2, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMobProfPmipv6TblLstChgd.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfPmipv6TblLstChgd.setDescription('The value of tmnxMobProfPmipv6TblLstChgd indicates the sysUpTime at the time of the last modification to tmnxMobProfPmipv6Table by adding, deleting an entry or change to a writable object in the table. If no changes were made to the table since the last re-initialization of the local network management subsystem, then this object contains a zero value.')
tmnxMobProfPmipv6Table = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 5), )
if mibBuilder.loadTexts: tmnxMobProfPmipv6Table.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfPmipv6Table.setDescription('The tmnxMobProfPmipv6Table has an entry for each Proxy Mobile IPv6 (PMIPv6) profile configured on the system. PMIPv6 profile defines protocol related information applicable to PMIPv6 peers.')
tmnxMobProfPmipv6Entry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 5, 1), ).setIndexNames((1, "TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfPmipv6Name"))
if mibBuilder.loadTexts: tmnxMobProfPmipv6Entry.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfPmipv6Entry.setDescription('Each row entry represents a Proxy Mobile IPv6 (PMIPv6) profile defined in the system. Entries can be created and deleted by the user.')
tmnxMobProfPmipv6Name = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 5, 1, 1), TmnxMobProfName())
if mibBuilder.loadTexts: tmnxMobProfPmipv6Name.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfPmipv6Name.setDescription('The value of tmnxMobProfPmipv6Name specifies the unique name of this Proxy Mobile IPv6 (PMIPv6) profile.')
tmnxMobProfPmipv6RowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 5, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfPmipv6RowStatus.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfPmipv6RowStatus.setDescription('The value of tmnxMobProfPmipv6RowStatus specifies the row status of this entry. It is used for creation and deletion of this Proxy Mobile IPv6 (PMIPv6) profile.')
tmnxMobProfPmipv6LastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 5, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMobProfPmipv6LastChanged.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfPmipv6LastChanged.setDescription('The value of tmnxMobProfPmipv6LastChanged indicates the timestamp of the last change to this row in tmnxMobProfPmipv6Table.')
tmnxMobProfPmipv6Description = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 5, 1, 4), TItemDescription().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfPmipv6Description.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfPmipv6Description.setDescription('The value of tmnxMobProfPmipv6Description specifies the description string for this profile. It can consist of any printable, seven-bit ASCII characters up to 80 characters in length.')
tmnxMobProfPmipv6MsgReTxTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 5, 1, 5), TmnxMobProfMsgReTxTimeout().clone(5)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfPmipv6MsgReTxTimeout.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfPmipv6MsgReTxTimeout.setDescription('The value of tmnxMobProfPmipv6MsgReTxTimeout specifies the time, in seconds, that the Proxy Mobile IPv6 (PMIPv6) signaling component waits for a response from the remote peer before making another transmit request.')
tmnxMobProfPmipv6MsgReTxRetryCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 5, 1, 6), TmnxMobProfMsgReTxRetryCount().clone(3)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfPmipv6MsgReTxRetryCnt.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfPmipv6MsgReTxRetryCnt.setDescription('The value of tmnxMobProfPmipv6MsgReTxRetryCnt specifies the number of times the same message is retried before declaring a failed attempt.')
tmnxMobProfPmipv6KeepAlvTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 5, 1, 7), TmnxMobProfKeepAliveResponse().clone(5)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfPmipv6KeepAlvTimeout.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfPmipv6KeepAlvTimeout.setDescription('The value of tmnxMobProfPmipv6KeepAlvTimeout specifies the time, in seconds, that the Proxy Mobile IPv6 (PMIPv6) signaling component waits for a response from a Mobile Management Entity (MME), and after receiving a response, the number of seconds it waits before sending the next echo-request message.')
tmnxMobProfPmipv6KeepAlvRetryCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 5, 1, 8), TmnxMobProfKeepAliveRetryCount().clone(4)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfPmipv6KeepAlvRetryCnt.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfPmipv6KeepAlvRetryCnt.setDescription('The value of tmnxMobProfPmipv6KeepAlvRetryCnt specifies the maximum number of times that the Proxy Mobile IPv6 (PMIPv6) signaling component attempts to send a echo-request message for which there is no reply from the remote peer. Once the retry count reaches the specified value, remote peer will be declared as unreachable.')
tmnxMobProfPmipv6KeepAlvIntvl = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 5, 1, 9), TmnxMobProfKeepAliveInterval().clone(60)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfPmipv6KeepAlvIntvl.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfPmipv6KeepAlvIntvl.setDescription('The value of tmnxMobProfPmipv6KeepAlvIntvl specifies the interval between the heartbeat messages')
tmnxMobProfPmipv6IpTtl = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 5, 1, 10), TmnxMobProfIpTtl().clone(255)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfPmipv6IpTtl.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfPmipv6IpTtl.setDescription('The value of tmnxMobProfPmipv6IpTtl specifies the IP Time-To-Live (TTL) value to be used for Proxy Mobile IPv6 (PMIPv6) messages.')
tmnxMobProfPmipv6IpDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 5, 1, 11), TDSCPValue().clone(56)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfPmipv6IpDscp.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfPmipv6IpDscp.setDescription('The value of tmnxMobProfPmipv6IpDscp specifies the Differentiated Services Code Point (DSCP) value in the IP header for Proxy Mobile IPv6 (PMIPv6) messages sent. This value can be configured to treat a packet as Network Control (NC) packet ahead of Expedited Forwarding (EF) packets.')
tmnxMobProfGtpTblLstChgd = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 2, 6), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMobProfGtpTblLstChgd.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfGtpTblLstChgd.setDescription('The value of tmnxMobProfGtpTblLstChgd indicates the sysUpTime at the time of the last modification to tmnxMobProfGtpTable by adding, deleting an entry or change to a writable object in the table. If no changes were made to the table since the last re-initialization of the local network management subsystem, then this object contains a zero value.')
tmnxMobProfGtpTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 6), )
if mibBuilder.loadTexts: tmnxMobProfGtpTable.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfGtpTable.setDescription('The tmnxMobProfGtpTable has an entry for each General Packet Radio Services Tunneling Protocol (GTP) profile configured on the system. GTP profile defines GTP signaling related configuration.')
tmnxMobProfGtpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 6, 1), ).setIndexNames((1, "TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfGtpName"))
if mibBuilder.loadTexts: tmnxMobProfGtpEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfGtpEntry.setDescription("Each row entry represents a General Packet Radio Services Tunneling Protocol (GTP) profile defined in the system. Entries can be created and deleted by the user. GTP profile 'default' is created by the agent itself at system initialization. It cannot be modified or deleted.")
tmnxMobProfGtpName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 6, 1, 1), TmnxMobProfName())
if mibBuilder.loadTexts: tmnxMobProfGtpName.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfGtpName.setDescription('The value of tmnxMobProfGtpName specifies the unique name of this General Packet Radio Services Tunneling Protocol (GTP) profile.')
tmnxMobProfGtpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 6, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfGtpRowStatus.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfGtpRowStatus.setDescription('The value of tmnxMobProfGtpRowStatus specifies the row status of this entry. It is used for creation and deletion of this General Packet Radio Services Tunneling Protocol (GTP) profile.')
tmnxMobProfGtpLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 6, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMobProfGtpLastChanged.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfGtpLastChanged.setDescription('The value of tmnxMobProfGtpLastChanged indicates the timestamp of the last change to this row in tmnxMobProfGtpTable.')
tmnxMobProfGtpDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 6, 1, 4), TItemDescription().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfGtpDescription.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfGtpDescription.setDescription('The value of tmnxMobProfGtpDescription specifies the description string for this profile. It can consist of any printable, seven-bit ASCII characters up to 80 characters in length.')
tmnxMobProfGtpMsgReTxTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 6, 1, 5), TmnxMobProfMsgReTxTimeout().clone(5)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfGtpMsgReTxTimeout.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfGtpMsgReTxTimeout.setDescription('The value of tmnxMobProfGtpMsgReTxTimeout specifies the time, in seconds, that the General Packet Radio Services Tunneling Protocol (GTP) signaling component waits for a response from the remote peer before making another transmit request. This applies to all control messages other than keep-alive messages. The value of this object is applicable for GTP-C messaging only.')
tmnxMobProfGtpMsgReTxRetryCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 6, 1, 6), TmnxMobProfMsgReTxRetryCount().clone(3)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfGtpMsgReTxRetryCnt.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfGtpMsgReTxRetryCnt.setDescription('The value of tmnxMobProfGtpMsgReTxRetryCnt specifies the number of times the same message is retried before declaring a failed attempt. The value of this object is applicable for GTP-C messaging only.')
tmnxMobProfGtpKeepAlvTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 6, 1, 7), TmnxMobProfKeepAliveTimeout().clone(60)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfGtpKeepAlvTimeout.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfGtpKeepAlvTimeout.setDescription('The value of tmnxMobProfGtpKeepAlvTimeout specifies the time, in seconds, that the General Packet Radio Services Tunneling Protocol (GTP) signaling component waits for a response from a Mobile Management Entity (MME), and after receiving a response, the number of seconds it waits before sending the next echo-request message.')
tmnxMobProfGtpKeepAlvRetryCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 6, 1, 8), TmnxMobProfKeepAliveRetryCount().clone(4)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfGtpKeepAlvRetryCnt.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfGtpKeepAlvRetryCnt.setDescription('The value of tmnxMobProfGtpKeepAlvRetryCnt specifies the maximum number of times that the General Packet Radio Services Tunneling Protocol (GTP) signaling component attempts to send a echo-request message for which there is no reply from the remote peer. Once the retry count reaches the specified value, remote peer will be declared as unreachable.')
tmnxMobProfGtpKeepAlvResp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 6, 1, 9), TmnxMobProfKeepAliveResponse().clone(5)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfGtpKeepAlvResp.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfGtpKeepAlvResp.setDescription('The value of tmnxMobProfGtpKeepAlvResp specifies the time, in seconds, that the Serving gateway (SGW) waits before resending a General Packet Radio Services Tunneling Protocol (GTP) signaling request message when a response to a request has not been received. This time is doubled for every retry.')
tmnxMobProfGtpIpTtl = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 6, 1, 10), TmnxMobProfIpTtl().clone(255)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfGtpIpTtl.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfGtpIpTtl.setDescription('The value of tmnxMobProfGtpIpTtl specifies the IP Time-To-Live (TTL) value to be used for General Packet Radio Services Tunneling Protocol (GTP) signaling messages.')
tmnxMobProfGtpIpDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 6, 1, 11), TDSCPValue().clone(56)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfGtpIpDscp.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfGtpIpDscp.setDescription('The value of tmnxMobProfGtpIpDscp specifies the Differentiated Services Code Point (DSCP) value in the IP header for General Packet Radio Services Tunneling Protocol (GTP) signaling messages sent. This value can be configured to treat a packet as Network Control (NC) packet ahead of Expedited Forwarding (EF) packets.')
tmnxMobProfPlmnListTblLstChgd = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 2, 7), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMobProfPlmnListTblLstChgd.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfPlmnListTblLstChgd.setDescription('The value of tmnxMobProfPlmnListTblLstChgd indicates the sysUpTime at the time of the last modification to tmnxMobProfPlmnListTable by adding, deleting an entry or change to a writable object in the table. If no changes were made to the table since the last re-initialization of the local network management subsystem, then this object contains a zero value.')
tmnxMobProfPlmnListTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 7), )
if mibBuilder.loadTexts: tmnxMobProfPlmnListTable.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfPlmnListTable.setDescription('The tmnxMobProfPlmnListTable has entries for Public Land Mobile Network (PLMN) lists configured on the system. A PLMN list consists of a list of Mobile Country Code (MCC) and Mobile Network Code (MNC) ids.')
tmnxMobProfPlmnListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 7, 1), ).setIndexNames((0, "TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfPlmnListName"), (0, "TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfPlmnListMcc"), (0, "TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfPlmnListMnc"))
if mibBuilder.loadTexts: tmnxMobProfPlmnListEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfPlmnListEntry.setDescription('Each row entry represents a Public Land Mobile Network (PLMN) defined in the system. Entries can be created and deleted by the user.')
tmnxMobProfPlmnListName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 7, 1, 1), TmnxMobProfName())
if mibBuilder.loadTexts: tmnxMobProfPlmnListName.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfPlmnListName.setDescription('The value of tmnxMobProfPlmnListName specifies the name of this Public Land Mobile Network (PLMN) list.')
tmnxMobProfPlmnListMcc = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 7, 1, 2), TmnxMobMcc())
if mibBuilder.loadTexts: tmnxMobProfPlmnListMcc.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfPlmnListMcc.setDescription('The value of tmnxMobProfPlmnListMcc specifies the Mobile Country Code (MCC) of this Public Land Mobile Network (PLMN).')
tmnxMobProfPlmnListMnc = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 7, 1, 3), TmnxMobMnc())
if mibBuilder.loadTexts: tmnxMobProfPlmnListMnc.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfPlmnListMnc.setDescription('The value of tmnxMobProfPlmnListMnc specifies the Mobile Network Code (MNC) of this Public Land Mobile Network (PLMN).')
tmnxMobProfPlmnListRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 7, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfPlmnListRowStatus.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfPlmnListRowStatus.setDescription('The value of tmnxMobProfPlmnListRowStatus specifies the row status of this entry. It is used for creation and deletion of this policy profile.')
tmnxMobProfPolTblLstChgd = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 2, 8), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMobProfPolTblLstChgd.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfPolTblLstChgd.setDescription('The value of tmnxMobProfPolTblLstChgd indicates the sysUpTime at the time of the last modification to tmnxMobProfPolTable by adding, deleting an entry or change to a writable object in the table. If no changes were made to the table since the last re-initialization of the local network management subsystem, then this object contains a zero value.')
tmnxMobProfPolTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 8), )
if mibBuilder.loadTexts: tmnxMobProfPolTable.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfPolTable.setDescription('The tmnxMobProfPolTable has an entry for each policy profile configured on the system. Policy profile defines QoS parameters for policy control.')
tmnxMobProfPolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 8, 1), ).setIndexNames((0, "TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfPolName"))
if mibBuilder.loadTexts: tmnxMobProfPolEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfPolEntry.setDescription('Each row entry represents a policy profile defined in the system. Entries can be created and deleted by the user. A maximum of 1024 policy profiles can be configured in the system.')
tmnxMobProfPolName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 8, 1, 1), TmnxMobProfName())
if mibBuilder.loadTexts: tmnxMobProfPolName.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfPolName.setDescription('The value of tmnxMobProfPolName specifies the unique name of this policy profile.')
tmnxMobProfPolRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 8, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfPolRowStatus.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfPolRowStatus.setDescription('The value of tmnxMobProfPolRowStatus specifies the row status of this entry. It is used for creation and deletion of this policy profile.')
tmnxMobProfPolLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 8, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMobProfPolLastChanged.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfPolLastChanged.setDescription('The value of tmnxMobProfPolLastChanged indicates the timestamp of the last change to this row in tmnxMobProfPolTable.')
tmnxMobProfPolRuleUnitName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 8, 1, 4), TNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfPolRuleUnitName.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfPolRuleUnitName.setDescription('The value of tmnxMobProfPolRuleUnitName specifies the policy rule unit profile.')
tmnxMobProfChgRuleUnitName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 8, 1, 5), TNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfChgRuleUnitName.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfChgRuleUnitName.setDescription('The value of tmnxMobProfChgRuleUnitName specifies the charging rule unit profile.')
tmnxMobProfPolQciValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 8, 1, 6), TmnxMobQciValueOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfPolQciValue.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfPolQciValue.setDescription('The value of tmnxMobProfPolQciValue is used as a reference to access a set of node-specific parameters that control bearer level QoS packet forwarding treatment. Internally, this value is mapped to Forwarding Class (FC) within the mobile gateway system.')
tmnxMobProfPolArpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 8, 1, 7), TmnxMobArpValueOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfPolArpValue.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfPolArpValue.setDescription('The value of tmnxMobProfPolArpValue specifies the admission control to prioritize allocation and retention for bearer establishment and modification.')
tmnxMobProfPolPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 8, 1, 8), TmnxMobStaticPolPrecedenceOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfPolPrecedence.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfPolPrecedence.setDescription('The value of tmnxMobProfPolPrecedence specifies the precedence value of this policy profile.')
tmnxMobProfPolInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 8, 1, 9), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMobProfPolInUse.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfPolInUse.setDescription('The value of tmnxMobProfPolInUse specifies if this policy profile is being used by one of the sessions.')
tmnxMobProfPolRefCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 8, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMobProfPolRefCount.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfPolRefCount.setDescription('The value of tmnxMobProfPolRefCount specifies the number of sessions referencing this policy profile.')
tmnxMobProfPolConfRefCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 8, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMobProfPolConfRefCount.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfPolConfRefCount.setDescription('The value of tmnxMobProfPolConfRefCount specifies the number of policy rule base entries referencing this policy profile.')
tmnxMobProfPolUntFlowTblLstChgd = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 2, 9), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMobProfPolUntFlowTblLstChgd.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfPolUntFlowTblLstChgd.setDescription('The value of tmnxMobProfPolUntFlowTblLstChgd indicates the sysUpTime at the time of the last modification to tmnxMobProfPolUntFlwTable by adding, deleting an entry or change to a writable object in the table. If no changes were made to the table since the last re-initialization of the local network management subsystem, then this object contains a zero value.')
tmnxMobProfPolUntFlwTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 9), )
if mibBuilder.loadTexts: tmnxMobProfPolUntFlwTable.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfPolUntFlwTable.setDescription('The tmnxMobProfPolUntFlwTable has an entry for each policy unit flow profile configured for a policy profile on the system. Policy unit flow profile defines a set of filters identifying a Service Data Flow (SDF).')
tmnxMobProfPolUntFlwEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 9, 1), ).setIndexNames((0, "TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfPolUnitName"), (0, "TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfPolUntFlwId"))
if mibBuilder.loadTexts: tmnxMobProfPolUntFlwEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfPolUntFlwEntry.setDescription('Each row entry represents a policy unit flow profile defined in the system. Entries can be created and deleted by the user. A maximum of 15 flow profiles can be configured for each policy base profile.')
tmnxMobProfPolUntFlwId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 9, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)))
if mibBuilder.loadTexts: tmnxMobProfPolUntFlwId.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfPolUntFlwId.setDescription('The value of tmnxMobProfPolUntFlwId specifies the unique id of this policy unit flow profile.')
tmnxMobProfPolUntFlwRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 9, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfPolUntFlwRowStatus.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfPolUntFlwRowStatus.setDescription('The value of tmnxMobProfPolUntFlwRowStatus specifies the row status of this entry. It is used for creation and deletion of this policy unit flow profile.')
tmnxMobProfPolUntFlwLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 9, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMobProfPolUntFlwLastChanged.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfPolUntFlwLastChanged.setDescription('The value of tmnxMobProfPolUntFlwLastChanged indicates the timestamp of the last change to this row in tmnxMobProfPolUntFlwTable.')
tmnxMobProfPolUntFlwDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 9, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("downLink", 1), ("upLink", 2), ("both", 3))).clone('both')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfPolUntFlwDirection.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfPolUntFlwDirection.setDescription('The value of tmnxMobProfPolUntFlwDirection specifies the direction of this Service Data Flow (SDF) filter.')
tmnxMobProfPolUntFlwMatchPrtcl = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 9, 1, 5), TIpProtocol().clone(-2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfPolUntFlwMatchPrtcl.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfPolUntFlwMatchPrtcl.setDescription("The value of tmnxMobProfPolUntFlwMatchPrtcl specifies the IP protocol to match. If the protocol is changed, the protocol specific parameters are reset. The value of tmnxMobProfPolUntFlwMatchPrtcl can not be set to '-1'.")
tmnxMobProfPolUntFlwLclAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 9, 1, 6), InetAddressType().clone('unknown')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfPolUntFlwLclAddrType.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfPolUntFlwLclAddrType.setDescription('The value of tmnxMobProfPolUntFlwLclAddrType specifies the type of address represented by tmnxMobProfPolUntFlwLclAddr.')
tmnxMobProfPolUntFlwLclAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 9, 1, 7), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )).clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfPolUntFlwLclAddr.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfPolUntFlwLclAddr.setDescription('The value of tmnxMobProfPolUntFlwLclAddr specifies the IP address to match the local-ip of the packet.')
tmnxMobProfPolUntFlwLclPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 9, 1, 8), InetAddressPrefixLength()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfPolUntFlwLclPrefixLen.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfPolUntFlwLclPrefixLen.setDescription('The value of tmnxMobProfPolUntFlwLclPrefixLen specifies the mask which is combined with received Local IP address to match address represented by tmnxMobProfPolUntFlwLclAddr.')
tmnxMobProfPolUntFlwRmtAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 9, 1, 9), InetAddressType().clone('unknown')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfPolUntFlwRmtAddrType.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfPolUntFlwRmtAddrType.setDescription('The value of tmnxMobProfPolUntFlwRmtAddrType specifies the type of address represented by tmnxMobProfPolUntFlwRmtAddr.')
tmnxMobProfPolUntFlwRmtAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 9, 1, 10), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )).clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfPolUntFlwRmtAddr.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfPolUntFlwRmtAddr.setDescription('The value of tmnxMobProfPolUntFlwRmtAddr specifies the IP address to match the remote-ip of the packet.')
tmnxMobProfPolUntFlwRmtPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 9, 1, 11), InetAddressPrefixLength()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfPolUntFlwRmtPrefixLen.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfPolUntFlwRmtPrefixLen.setDescription('The value of tmnxMobProfPolUntFlwRmtPrefixLen specifies the mask which is combined with received remote IP address to match address represented by tmnxMobProfPolUntFlwRmtAddr.')
tmnxMobProfPolUntFlwLclPortVal1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 9, 1, 12), TTcpUdpPort()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfPolUntFlwLclPortVal1.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfPolUntFlwLclPortVal1.setDescription('The value of tmnxMobProfPolUntFlwLclPortVal1 specifies the TCP or UDP starting local port. The value of this object is used as per the description for tmnxMobProfPolUntFlwLclPortOper.')
tmnxMobProfPolUntFlwLclPortVal2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 9, 1, 13), TTcpUdpPort()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfPolUntFlwLclPortVal2.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfPolUntFlwLclPortVal2.setDescription('The value of tmnxMobProfPolUntFlwLclPortVal2 specifies the TCP or UDP ending local port. The value of this object is used as per the description for tmnxMobProfPolUntFlwLclPortOper.')
tmnxMobProfPolUntFlwLclPortOper = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 9, 1, 14), TTcpUdpPortOperator().clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfPolUntFlwLclPortOper.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfPolUntFlwLclPortOper.setDescription('The value of tmnxMobProfPolUntFlwLclPortOper specifies the manner in which tmnxMobProfPolUntFlwLclPortVal1 and tmnxMobProfPolUntFlwLclPortVal2 are to be used. The values of these three objects are used as described in TTcpUdpPortOperator.')
tmnxMobProfPolUntFlwRmtPortVal1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 9, 1, 15), TTcpUdpPort()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfPolUntFlwRmtPortVal1.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfPolUntFlwRmtPortVal1.setDescription('The value of tmnxMobProfPolUntFlwRmtPortVal1 specifies the TCP or UDP starting remote port. The value of this object is used as per the description for tmnxMobProfPolUntFlwRmtPortOper.')
tmnxMobProfPolUntFlwRmtPortVal2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 9, 1, 16), TTcpUdpPort()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfPolUntFlwRmtPortVal2.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfPolUntFlwRmtPortVal2.setDescription('The value of tmnxMobProfPolUntFlwRmtPortVal2 specifies the TCP or UDP ending remote port. The value of this object is used as per the description for tmnxMobProfPolUntFlwRmtPortOper.')
tmnxMobProfPolUntFlwRmtPortOper = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 9, 1, 17), TTcpUdpPortOperator().clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfPolUntFlwRmtPortOper.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfPolUntFlwRmtPortOper.setDescription('The value of tmnxMobProfPolUntFlwRmtPortOper specifies the manner in which tmnxMobProfPolUntFlwRmtPortVal1 and tmnxMobProfPolUntFlwRmtPortVal2 are to be used. The values of these three objects are used as described in TTcpUdpPortOperator.')
tmnxMobProfPolUntFlwAaApp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 9, 1, 18), TNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfPolUntFlwAaApp.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfPolUntFlwAaApp.setDescription("The value of tmnxMobProfPolUntFlwAaApp specifies the AA application that is associated this policy. If the corresponding AA application is not specified in TIMETRA-BSX-NG-MIB::tmnxBsxAppName, an 'inconsistentValue' error will be returned.")
tmnxMobProfPolBaseTblLstChgd = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 2, 10), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMobProfPolBaseTblLstChgd.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfPolBaseTblLstChgd.setDescription('The value of tmnxMobProfPolBaseTblLstChgd indicates the sysUpTime at the time of the last modification to tmnxMobProfPolBaseTable by adding, deleting an entry or change to a writable object in the table. If no changes were made to the table since the last re-initialization of the local network management subsystem, then this object contains a zero value.')
tmnxMobProfPolBaseTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 10), )
if mibBuilder.loadTexts: tmnxMobProfPolBaseTable.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfPolBaseTable.setDescription('The tmnxMobProfPolBaseTable has entries for policy base profiles configured on the system. Each Policy base profile includes multiple policy profiles associated with a precedence value which is used for matching the User Equipment (UE) IP packets to respective bearers identified by a unique policy profile.')
tmnxMobProfPolBaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 10, 1), ).setIndexNames((0, "TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfPolBaseName"), (0, "TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfPolName"))
if mibBuilder.loadTexts: tmnxMobProfPolBaseEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfPolBaseEntry.setDescription('Each row entry represents a policy base profile defined in the system. Entries can be created and deleted by the user. A maximum of 1024 policy base profiles can be configured in the system. A maximum of 8 policy profiles can be configured in a policy base profile.')
tmnxMobProfPolBaseName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 10, 1, 1), TmnxMobProfName())
if mibBuilder.loadTexts: tmnxMobProfPolBaseName.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfPolBaseName.setDescription('The value of tmnxMobProfPolBaseName specifies the name of this policy base profile.')
tmnxMobProfPolBaseRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 10, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfPolBaseRowStatus.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfPolBaseRowStatus.setDescription('The value of tmnxMobProfPolBaseRowStatus specifies the row status of this entry. It is used for creation and deletion of this policy profile.')
tmnxMobProfPolBaseLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 10, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMobProfPolBaseLastChanged.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfPolBaseLastChanged.setDescription('The value of tmnxMobProfPolBaseLastChanged indicates the timestamp of the last change to this row in tmnxMobProfPolBaseTable.')
tmnxMobProfPolBasePrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 10, 1, 4), TmnxMobStaticPolPrecedenceOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfPolBasePrecedence.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfPolBasePrecedence.setDescription('The value of tmnxMobProfPolBasePrecedence specifies the precedence value of this policy base profile.')
tmnxMobProfPolBasePreActivate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 10, 1, 5), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfPolBasePreActivate.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfPolBasePreActivate.setDescription("The value of tmnxMobProfPolBasePreActivate specifies if a dedicated bearer can be pre-activated at the time of User Equipment (UE) attach. Pre-activation of a dedicated bearer is limited to just one additional bearer at the time of UE attach. Only one policy rule within a base policy can have the value of this object set to 'true'.")
tmnxMobProfPolBaseInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 10, 1, 6), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMobProfPolBaseInUse.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfPolBaseInUse.setDescription('The value of tmnxMobProfPolBaseInUse specifies if this policy base profile is being used by one of the sessions.')
tmnxMobProfPolBaseRefCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 10, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMobProfPolBaseRefCount.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfPolBaseRefCount.setDescription('The value of tmnxMobProfPolBaseRefCount specifies the number of sessions referencing this policy base profile.')
tmnxMobProfPolBaseConfRefCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 10, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMobProfPolBaseConfRefCount.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfPolBaseConfRefCount.setDescription('The value of tmnxMobProfPolBaseConfRefCount specifies the number of Access Point Name (APN) entries referencing this policy base profile.')
tmnxMobProfQciPolTblLstChgd = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 2, 11), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMobProfQciPolTblLstChgd.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfQciPolTblLstChgd.setDescription('The value of tmnxMobProfQciPolTblLstChgd indicates the sysUpTime at the time of the last modification to tmnxMobProfQciPolTable by adding, deleting an entry or change to a writable object in the table. If no changes were made to the table since the last re-initialization of the local network management subsystem, then this object contains a zero value.')
tmnxMobProfQciPolTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 11), )
if mibBuilder.loadTexts: tmnxMobProfQciPolTable.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfQciPolTable.setDescription('The tmnxMobProfQciPolTable has an entry for each QCI policy profile configured on the system. QoS Class Identifier (QCI) Policy profile defines internal QoS Class Identifier - Differentiated Services Code Point (QCI-DSCP) and QoS Class Identifier - Forwarding Class (QCI-FC) mapping.')
tmnxMobProfQciPolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 11, 1), ).setIndexNames((0, "TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfQciPolName"))
if mibBuilder.loadTexts: tmnxMobProfQciPolEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfQciPolEntry.setDescription("Each row entry represents a QCI policy defined in the system. Entries can be created and deleted by the user. QCI policy profile 'default' is created by the agent itself at system initialization. It cannot be modified or deleted.")
tmnxMobProfQciPolName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 11, 1, 1), TmnxMobProfName())
if mibBuilder.loadTexts: tmnxMobProfQciPolName.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfQciPolName.setDescription('The value of tmnxMobProfQciPolName specifies the unique name of this QCI policy.')
tmnxMobProfQciPolRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 11, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfQciPolRowStatus.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfQciPolRowStatus.setDescription('The value of tmnxMobProfQciPolRowStatus specifies the row status of this entry. It is used for creation and deletion of this policy profile. The creation or deletion of an entry in this table causes creation or deletion of corresponding entries in tmnxMobProfQciPolQciTable.')
tmnxMobProfQciPolLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 11, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMobProfQciPolLastChanged.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfQciPolLastChanged.setDescription('The value of tmnxMobProfQciPolLastChanged indicates the timestamp of the last change to this row in tmnxMobProfQciPolTable.')
tmnxMobProfQciPolDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 11, 1, 4), TItemDescription().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfQciPolDescription.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfQciPolDescription.setDescription('The value of tmnxMobProfQciPolDescription specifies the description string for this QCI policy. It can consist of any printable, seven-bit ASCII characters up to 80 characters in length.')
tmnxMobProfQciPolQciTblLstChgd = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 2, 12), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMobProfQciPolQciTblLstChgd.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfQciPolQciTblLstChgd.setDescription('The value of tmnxMobProfQciPolQciTblLstChgd indicates the sysUpTime at the time of the last modification to tmnxMobProfQciPolQciTable by adding, deleting an entry or change to a writable object in the table. If no changes were made to the table since the last re-initialization of the local network management subsystem, then this object contains a zero value.')
tmnxMobProfQciPolQciTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 12), )
if mibBuilder.loadTexts: tmnxMobProfQciPolQciTable.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfQciPolQciTable.setDescription('The tmnxMobProfQciPolQciTable has entries for QoS Class Identifier (QCI) and Allocation and Retention Priority (ARP) values for each QCI policy profile configured on the system.')
tmnxMobProfQciPolQciEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 12, 1), ).setIndexNames((0, "TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfQciPolName"), (0, "TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfQciPolQciValue"), (0, "TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfQciPolQciArpValue"))
if mibBuilder.loadTexts: tmnxMobProfQciPolQciEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfQciPolQciEntry.setDescription('Each row entry represents a QCI and ARP value for QCI policy defined in the system. Entries in this table are created or deleted by the agent itself when an entry is created or deleted in the tmnxMobProfQciPolTable.')
tmnxMobProfQciPolQciValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 12, 1, 1), TmnxMobQciValue())
if mibBuilder.loadTexts: tmnxMobProfQciPolQciValue.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfQciPolQciValue.setDescription('The value of tmnxMobProfQciPolQciValue indicates the QCI value.')
tmnxMobProfQciPolQciArpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 12, 1, 2), TmnxMobArpValue())
if mibBuilder.loadTexts: tmnxMobProfQciPolQciArpValue.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfQciPolQciArpValue.setDescription('The value of tmnxMobProfQciPolQciArpValue indicates the ARP value.')
tmnxMobProfQciPolQciLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 12, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMobProfQciPolQciLastChanged.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfQciPolQciLastChanged.setDescription('The value of tmnxMobProfQciPolQciLastChanged indicates the timestamp of the last change to this row in tmnxMobProfQciPolQciTable.')
tmnxMobProfQciPolQciDscpPreserve = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 12, 1, 4), TmnxEnabledDisabled().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxMobProfQciPolQciDscpPreserve.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfQciPolQciDscpPreserve.setDescription("The value of tmnxMobProfQciPolQciDscpPreserve specifies if the value of the Differentiated Services Code Point (DSCP) is preserved or not. If the value of this object is set to 'enabled', the DSCP bits are preserved. If the value of this object is set to 'disabled', the DSCP value is specified to tmnxMobProfQciPolQciDscp and tmnxMobProfQciPolQciDscpOut.")
tmnxMobProfQciPolQciDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 12, 1, 5), TDSCPName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxMobProfQciPolQciDscp.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfQciPolQciDscp.setDescription('The value of tmnxMobProfQciPolQciDscp specifies the Differentiated Services Code Point (DSCP) to be used while marking the in-profile packets. Default value for this object is set as follows, depending on the value of tmnxMobProfQciPolQciValue which indicates the QCI value. QCI Value Default value --------- ------------- 1 nc2 2 ef 3 af41 4 nc1 5 af21 6 af11 7 af11 8 cs1 9 be ')
tmnxMobProfQciPolQciDscpOut = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 12, 1, 6), TDSCPName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxMobProfQciPolQciDscpOut.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfQciPolQciDscpOut.setDescription('The value of tmnxMobProfQciPolQciDscpOut specifies the DSCP to be used while marking the out-profile packets. Default value for this object is set as follows, depending on the value of tmnxMobProfQciPolQciValue which indicates the QCI value. QCI Value Default value --------- ------------- 1 nc2 2 ef 3 af42 4 nc1 5 af22 6 af12 7 af12 8 cs1 9 be ')
tmnxMobProfQciPolQciFcName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 12, 1, 7), TFCName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxMobProfQciPolQciFcName.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfQciPolQciFcName.setDescription('The value of tmnxMobProfQciPolQciFcName specifies the Forwarding Class (FC) name. Default value for this object is set as follows, depending on the value of tmnxMobProfQciPolQciValue which indicates the QCI value. QCI Value Default value --------- ------------- 1 nc 2 ef 3 h2 4 h1 5 l1 6 af 7 af 8 l2 9 be ')
tmnxMobProfQciPolQciProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 12, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("in", 1), ("out", 2), ("applyCir", 3))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxMobProfQciPolQciProfile.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfQciPolQciProfile.setDescription("The value of tmnxMobProfQciPolQciProfile specifies the profile to be assigned to the packet. When the value of this object is set to 'applyCir', then policer provided color marking will be used for for the packet.")
tmnxMobProfPeerListTblLstChgd = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 2, 13), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMobProfPeerListTblLstChgd.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfPeerListTblLstChgd.setDescription('The value of tmnxMobProfPeerListTblLstChgd indicates the sysUpTime at the time of the last modification to tmnxMobProfPeerListTable by adding, deleting an entry or change to a writable object in the table. If no changes were made to the table since the last re-initialization of the local network management subsystem, then this object contains a zero value.')
tmnxMobProfPeerListTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 13), )
if mibBuilder.loadTexts: tmnxMobProfPeerListTable.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfPeerListTable.setDescription('The tmnxMobProfPeerListTable has an entry for each peer list configured in the system. Levels of communication for each peer in the list or unlisted peers can be configured by the user.')
tmnxMobProfPeerListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 13, 1), ).setIndexNames((0, "TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfPeerListName"))
if mibBuilder.loadTexts: tmnxMobProfPeerListEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfPeerListEntry.setDescription('Each row entry represents a peer list defined in the system. Entries can be created and deleted by the user.')
tmnxMobProfPeerListName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 13, 1, 1), TmnxMobProfName())
if mibBuilder.loadTexts: tmnxMobProfPeerListName.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfPeerListName.setDescription('The value of tmnxMobProfPeerListName specifies the unique name of this peer list.')
tmnxMobProfPeerListRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 13, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfPeerListRowStatus.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfPeerListRowStatus.setDescription('The value of tmnxMobProfPeerListRowStatus specifies the row status of this entry. It is used for creation and deletion of this peer list.')
tmnxMobProfPeerListLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 13, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMobProfPeerListLastChanged.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfPeerListLastChanged.setDescription('The value of tmnxMobProfPeerListLastChanged indicates the timestamp of the last change to this row in tmnxMobProfPeerListTable.')
tmnxMobProfPeerListDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 13, 1, 4), TItemDescription().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfPeerListDescription.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfPeerListDescription.setDescription('The value of tmnxMobProfPeerListDescription specifies the description string for this peer list. It can consist of any printable, seven-bit ASCII characters up to 80 characters in length.')
tmnxMobProfPeerListPeerTblLtCgd = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 2, 14), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMobProfPeerListPeerTblLtCgd.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfPeerListPeerTblLtCgd.setDescription('The value of tmnxMobProfPeerListPeerTblLtCgd indicates the sysUpTime at the time of the last modification to tmnxMobProfPeerListPeerTable by adding, deleting an entry or change to a writable object in the table. If no changes were made to the table since the last re-initialization of the local network management subsystem, then this object contains a zero value.')
tmnxMobProfPeerListPeerTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 14), )
if mibBuilder.loadTexts: tmnxMobProfPeerListPeerTable.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfPeerListPeerTable.setDescription('The tmnxMobProfPeerListPeerTable has entries for peers in a peer list configured on the system.')
tmnxMobProfPeerListPeerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 14, 1), ).setIndexNames((0, "TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfPeerListName"), (0, "TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfPeerListPeerAddrType"), (0, "TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfPeerListPeerAddr"), (0, "TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfPeerListPeerPrefixLen"))
if mibBuilder.loadTexts: tmnxMobProfPeerListPeerEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfPeerListPeerEntry.setDescription('Each row entry represents a peer in the peer list defined in the system. Entries can be created and deleted by the user.')
tmnxMobProfPeerListPeerAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 14, 1, 1), InetAddressType())
if mibBuilder.loadTexts: tmnxMobProfPeerListPeerAddrType.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfPeerListPeerAddrType.setDescription('The value of tmnxMobProfPeerListPeerAddrType specifies the type of address represented by tmnxMobProfPeerListPeerAddr.')
tmnxMobProfPeerListPeerAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 14, 1, 2), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: tmnxMobProfPeerListPeerAddr.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfPeerListPeerAddr.setDescription("The value of tmnxMobProfPeerListPeerAddr specifies the IP address of the peer. Unlisted IPv4 peer has address value '0.0.0.0' and Unlisted IPv6 peer has address value '0:0:0:0:0:0:0:0'.")
tmnxMobProfPeerListPeerPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 14, 1, 3), InetAddressPrefixLength())
if mibBuilder.loadTexts: tmnxMobProfPeerListPeerPrefixLen.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfPeerListPeerPrefixLen.setDescription("The value of tmnxMobProfPeerListPeerPrefixLen specifies the length of the IP netmask for the IP address represented by tmnxMobProfPeerListPeerAddr. Unlisted peer has prefix length value '0'.")
tmnxMobProfPeerListPeerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 14, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfPeerListPeerRowStatus.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfPeerListPeerRowStatus.setDescription('The value of tmnxMobProfPeerListPeerRowStatus specifies the row status of this entry. It is used for creation and deletion of this policy profile.')
tmnxMobProfPeerListPeerLastChgd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 14, 1, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMobProfPeerListPeerLastChgd.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfPeerListPeerLastChgd.setDescription('The value of tmnxMobProfPeerListPeerLastChgd indicates the timestamp of the last change to this row in tmnxMobProfPeerListPeerTable.')
tmnxMobProfPeerListPeerDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 14, 1, 6), TItemDescription().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfPeerListPeerDesc.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfPeerListPeerDesc.setDescription('The value of tmnxMobProfPeerListPeerDesc specifies the description string for this peer. It can consist of any printable, seven-bit ASCII characters up to 80 characters in length.')
tmnxMobProfPeerListPeerKeepAlive = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 14, 1, 7), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfPeerListPeerKeepAlive.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfPeerListPeerKeepAlive.setDescription("The value of tmnxMobProfPeerListPeerKeepAlive specifies whether the General Packet Radio Services Tunneling Protocol (GTP) echo is enabled for this peer. When the value of this object is set to 'true', communication is made with this peer.")
tmnxMobProfPeerListPeerAdmnState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 14, 1, 8), TmnxAdminState().clone('inService')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfPeerListPeerAdmnState.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfPeerListPeerAdmnState.setDescription('The value of tmnxMobProfPeerListPeerAdmnState specifies the desired administrative state of this peer list.')
tmnxMobProfPeerListPeerRatType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 14, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("geran", 1), ("utran", 2), ("eutran", 3), ("ehrpd", 4), ("hrpd", 5), ("oneXrtt", 6), ("umb", 7))).clone('utran')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfPeerListPeerRatType.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfPeerListPeerRatType.setDescription('The value of tmnxMobGtpPriServerMaxRequests specifies the Radio Access Technology (RAT) type being served by this peer. The RAT type should be used if the RAT type cannot be determined via the General Packet Radio Services Tunneling Protocol (GTP) message itself.')
tmnxMobProfPeerListPeerForeign = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 14, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("home", 1), ("foreign", 2), ("none", 3))).clone('home')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfPeerListPeerForeign.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfPeerListPeerForeign.setDescription("The value of tmnxMobProfPeerListPeerForeign specifies the peer as a foreign or a home node. The value 'none' will be set when tmnxMobProfPeerListPeerPlmnMcc and tmnxMobProfPeerListPeerPlmnMnc are specified.")
tmnxMobProfPeerListPeerPlmnMcc = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 14, 1, 11), TmnxMobMccOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfPeerListPeerPlmnMcc.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfPeerListPeerPlmnMcc.setDescription('The value of tmnxMobProfPeerListPeerPlmnMcc specifies the Mobile Country Code (MCC) portion of the Public Land Mobile Network (PLMN) for this peer. The value of the tmnxMobProfPeerListPeerPlmnMcc will be set as an empty string when tmnxMobProfPeerListPeerForeign is specified.')
tmnxMobProfPeerListPeerPlmnMnc = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 14, 1, 12), TmnxMobMncOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfPeerListPeerPlmnMnc.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfPeerListPeerPlmnMnc.setDescription('The value of tmnxMobProfPeerListPeerPlmnMnc specifies the Mobile Network Code (MNC) portion of the Public Land Mobile Network (PLMN) for this peer. The value of the tmnxMobProfPeerListPeerPlmnMnc will be set as an empty string when tmnxMobProfPeerListPeerForeign is specified.')
tmnxMobProfSgwChargingTblLstChgd = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 2, 15), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMobProfSgwChargingTblLstChgd.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfSgwChargingTblLstChgd.setDescription('The value of tmnxMobProfPolTblLstChgd indicates the sysUpTime at the time of the last modification to tmnxMobProfSgwChargingTable by adding, deleting an entry or change to a writable object in the table. If no changes were made to the table since the last re-initialization of the local network management subsystem, then this object contains a zero value.')
tmnxMobProfSgwChargingTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 15), )
if mibBuilder.loadTexts: tmnxMobProfSgwChargingTable.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfSgwChargingTable.setDescription('The tmnxMobProfPolTable has an entry for each SGW profile configured on the system. SGW charging profile defines charging parameters for the Serving Gateway (SGW).')
tmnxMobProfSgwChargingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 15, 1), ).setIndexNames((0, "TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfSgwChrgId"))
if mibBuilder.loadTexts: tmnxMobProfSgwChargingEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfSgwChargingEntry.setDescription('Each row entry represents a Serving Gateway (SGW) charging profile defined in the system. Entries can be created and deleted by the user. SGW charging profile 0 is created by the agent itself at system initialization. It cannot be modified or deleted.')
tmnxMobProfSgwChrgId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 15, 1, 1), TmnxMobChargingProfile())
if mibBuilder.loadTexts: tmnxMobProfSgwChrgId.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfSgwChrgId.setDescription('The value of tmnxMobProfSgwChrgId uniquely identifies a charging profile configured for the Serving Gateway (SGW).')
tmnxMobProfSgwChrgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 15, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfSgwChrgRowStatus.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfSgwChrgRowStatus.setDescription('The value of tmnxMobProfSgwChrgRowStatus specifies the row status of this entry. It is used for creation and deletion of this charging profile.')
tmnxMobProfSgwChrgLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 15, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMobProfSgwChrgLastChanged.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfSgwChrgLastChanged.setDescription('The value of tmnxMobProfSgwChrgLastChanged indicates the timestamp of the last change to this row in tmnxMobProfSgwChargingTable.')
tmnxMobProfSgwChrgDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 15, 1, 4), TItemDescription().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfSgwChrgDesc.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfSgwChrgDesc.setDescription('The value of tmnxMobProfSgwChrgDesc is a user provided description string for this charging profile for the Serving Gateway (SGW). It can consist of any printable, seven-bit ASCII characters up to 80 characters in length.')
tmnxMobProfSgwChrgOffLineState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 15, 1, 5), TmnxEnabledDisabled().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfSgwChrgOffLineState.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfSgwChrgOffLineState.setDescription('The value of tmnxMobProfSgwChrgOffLineState specifies whether offline charging is enabled for this charging profile for the Serving Gateway (SGW).')
tmnxMobProfSgwChrgPriCdfDiaPeer = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 15, 1, 6), TmnxMobProfNameOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfSgwChrgPriCdfDiaPeer.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfSgwChrgPriCdfDiaPeer.setDescription("The value of tmnxMobProfSgwChrgPriCdfDiaPeer specifies the primary Charging Data Function (CDF) diameter peer profile for this charging profile. If a corresponding diameter peer profile does not exist in tmnxMobProfDiaPeerTable, an 'inconsistentValue' error will be returned.")
tmnxMobProfSgwChrgSecCdfDiaPeer = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 15, 1, 7), TmnxMobProfNameOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfSgwChrgSecCdfDiaPeer.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfSgwChrgSecCdfDiaPeer.setDescription("The value of tmnxMobProfSgwChrgSecCdfDiaPeer specifies the secondary Charging Data Function (CDF) diameter peer profile for this charging profile. If a corresponding diameter peer profile does not exist in tmnxMobProfDiaPeerTable, an 'inconsistentValue' error will be returned.")
tmnxMobProfSgwChrgCitQosChange = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 15, 1, 8), TmnxEnabledDisabled().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfSgwChrgCitQosChange.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfSgwChrgCitQosChange.setDescription('The value of tmnxMobProfSgwChrgCitQosChange specifies whether the QoS-Change trigger is enabled, which results in List of Traffic Data Volumes container charging information added to the Charging Data Record (CDR) when there is a change in Qos.')
tmnxMobProfSgwChrgCitUsrLocChnge = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 15, 1, 9), TmnxEnabledDisabled().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfSgwChrgCitUsrLocChnge.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfSgwChrgCitUsrLocChnge.setDescription('The value of tmnxMobProfSgwChrgCitQosChange specifies whether the User Location Change trigger is enabled, which results in List of Traffic Data Volumes container charging information added to the Charging Data Record (CDR) when there is a change in Qos.')
tmnxMobProfSgwChrgCitTrfTimeChng = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 15, 1, 10), TmnxEnabledDisabled().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfSgwChrgCitTrfTimeChng.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfSgwChrgCitTrfTimeChng.setDescription('The value of tmnxMobProfSgwChrgCitTrfTimeChng specifies whether the Tarrif Time Change trigger is enabled, which results in List of Traffic Data Volumes container charging information added to the Charging Data Record (CDR) when there is a change in tarrif time.')
tmnxMobProfSgwChrgCitTrfTmStart = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 15, 1, 11), TmnxTimeInSec()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfSgwChrgCitTrfTmStart.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfSgwChrgCitTrfTmStart.setDescription('The value of tmnxMobProfSgwChrgCitTrfTmStart specifies the start of the Tarrif Time for the Charging Data Record (CDR).')
tmnxMobProfSgwChrgCitTrfTmEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 15, 1, 12), TmnxTimeInSec()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfSgwChrgCitTrfTmEnd.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfSgwChrgCitTrfTmEnd.setDescription('The value of tmnxMobProfSgwChrgCitTrfTmEnd specifies the end of the Tarrif Time for the Charging Data Record (CDR).')
tmnxMobProfSgwChrgPrctTimeLmt = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 15, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 86400)).clone(3600)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfSgwChrgPrctTimeLmt.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfSgwChrgPrctTimeLmt.setDescription('The value of tmnxMobProfSgwChrgPrctTimeLmt specifies a time limit (in seconds) applicable per session or bearer depending on the accounting level selected like PDN-level accounting or QCI/bearer-level accounting. A partial record is created when the specified time limit is satisfied.')
tmnxMobProfSgwChrgPrctVolumeLmt = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 15, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(4096)).setUnits('kbytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfSgwChrgPrctVolumeLmt.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfSgwChrgPrctVolumeLmt.setDescription('The value of tmnxMobProfSgwChrgPrctVolumeLmt specifies a data volume limit applicable per session or bearer depending on the accounting level selected like PDN-level accounting or QCI/bearer-level accounting. A partial record is created when the specified volume limit is satisfied.')
tmnxMobProfSgwChrgPrctMaxChCond = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 15, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfSgwChrgPrctMaxChCond.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfSgwChrgPrctMaxChCond.setDescription('The value of tmnxMobProfSgwChrgPrctMaxChCond specifies the maximum number of change conditions that can occur like tariff change, location change before a partial record is created.')
tmnxMobProfSgwChrgPrctMsTmzChnge = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 15, 1, 16), TmnxEnabledDisabled().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfSgwChrgPrctMsTmzChnge.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfSgwChrgPrctMsTmzChnge.setDescription('The value of tmnxMobProfSgwChrgPrctMsTmzChnge specifies whether the MS Time Zone Change partial record trigger is enabled. Upon encountering a MS Time Zone change, a partial record is created.')
tmnxMobProfSgwChrgPrctPlmnChange = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 15, 1, 17), TmnxEnabledDisabled().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfSgwChrgPrctPlmnChange.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfSgwChrgPrctPlmnChange.setDescription('The value of tmnxMobProfSgwChrgPrctPlmnChange specifies whether the plmn-change partial record trigger is enabled. Upon encountering a plmn-change, a partial record is created.')
tmnxMobProfSgwChrgPrctRatChange = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 15, 1, 18), TmnxEnabledDisabled().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfSgwChrgPrctRatChange.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfSgwChrgPrctRatChange.setDescription('The value of tmnxMobProfSgwChrgPrctRatChange specifies whether the rat-change partial record trigger is enabled. Upon encountering a rat-change, a partial record is created.')
tmnxMobProfSgwChrgPrctMgmtInterv = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 15, 1, 19), TmnxEnabledDisabled().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfSgwChrgPrctMgmtInterv.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfSgwChrgPrctMgmtInterv.setDescription('The value of tmnxMobProfSgwChrgPrctMgmtInterv specifies whether the management intervention partial record trigger is enabled. Upon management intervention, a partial record is created.')
tmnxMobProfSgwChrgCitSgwChange = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 15, 1, 20), TmnxEnabledDisabled().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfSgwChrgCitSgwChange.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxMobProfSgwChrgCitSgwChange.setDescription('The value of tmnxMobProfSgwChrgCitSgwChange specifies whether the Serving-Node-Change trigger is enabled, which results in List of Traffic Data Volumes container charging information added to the Charging Data Record (CDR) when there is a change in Mobility Management Entity (MME). This object was made obsolete in the 3.0 release. ')
tmnxMobProfSgwChrgPrctSrvNdChLmt = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 15, 1, 21), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)).clone(15)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfSgwChrgPrctSrvNdChLmt.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfSgwChrgPrctSrvNdChLmt.setDescription('The value of tmnxMobProfSgwChrgPrctSrvNdChLmt specifies a maximum limit for the change in Serving Node. A partial record is created when the specified change limit is satisfied for this Partial Record Closure Trigger(PRCT).')
tmnxMobProfPgwChargingTblLstChgd = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 2, 16), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMobProfPgwChargingTblLstChgd.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfPgwChargingTblLstChgd.setDescription('The value of tmnxMobProfPgwChargingTblLstChgd indicates the sysUpTime at the time of the last modification to tmnxMobProfPgwChargingTable by adding, deleting an entry or change to a writable object in the table. If no changes were made to the table since the last re-initialization of the local network management subsystem, then this object contains a zero value.')
tmnxMobProfPgwChargingTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 16), )
if mibBuilder.loadTexts: tmnxMobProfPgwChargingTable.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfPgwChargingTable.setDescription('The tmnxMobProfPgwChargingTable has an entry for each PGW profile configured on the system. PGW charging profile defines charging parameters for the Packet Data Network Gateway (PGW).')
tmnxMobProfPgwChargingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 16, 1), ).setIndexNames((0, "TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfPgwChrgId"))
if mibBuilder.loadTexts: tmnxMobProfPgwChargingEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfPgwChargingEntry.setDescription('Each row entry represents a Packet Data Network Gateway (PGW) charging profile defined in the system. Entries can be created and deleted by the user. PGW charging profile 0 is created by the agent itself at system initialization. It cannot be modified or deleted.')
tmnxMobProfPgwChrgId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 16, 1, 1), TmnxMobChargingProfile())
if mibBuilder.loadTexts: tmnxMobProfPgwChrgId.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfPgwChrgId.setDescription('The value of tmnxMobProfPgwChrgId uniquely identifies a charging profile configured for the Packet Data Network Gateway (PGW).')
tmnxMobProfPgwChrgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 16, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfPgwChrgRowStatus.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfPgwChrgRowStatus.setDescription('The value of tmnxMobProfPgwChrgRowStatus specifies the row status of this entry. It is used for creation and deletion of this charging profile.')
tmnxMobProfPgwChrgLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 16, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMobProfPgwChrgLastChanged.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfPgwChrgLastChanged.setDescription('The value of tmnxMobProfPgwChrgLastChanged indicates the timestamp of the last change to this row in tmnxMobProfPgwChargingTable.')
tmnxMobProfPgwChrgDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 16, 1, 4), TItemDescription().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfPgwChrgDesc.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfPgwChrgDesc.setDescription('The value of tmnxMobProfPgwChrgDesc is a user provided description string for this charging profile for the Packet Data Network Gateway (PGW).')
tmnxMobProfPgwChrgOffLineState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 16, 1, 5), TmnxEnabledDisabled().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfPgwChrgOffLineState.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfPgwChrgOffLineState.setDescription('The value of tmnxMobProfPgwChrgOffLineState specifies whether offline charging is enabled for this charging profile for the Packet Data Network Gateway (PGW).')
tmnxMobProfPgwChrgPriCdfDiaPeer = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 16, 1, 6), TmnxMobProfNameOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfPgwChrgPriCdfDiaPeer.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfPgwChrgPriCdfDiaPeer.setDescription("The value of tmnxMobProfPgwChrgPriCdfDiaPeer specifies the primary Charging Data Function (CDF) diameter peer profile for this charging profile. If a corresponding diameter peer profile does not exist in tmnxMobProfDiaPeerTable, an 'inconsistentValue' error will be returned.")
tmnxMobProfPgwChrgSecCdfDiaPeer = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 16, 1, 7), TmnxMobProfNameOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfPgwChrgSecCdfDiaPeer.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfPgwChrgSecCdfDiaPeer.setDescription("The value of tmnxMobProfPgwChrgSecCdfDiaPeer specifies the secondary Charging Data Function (CDF) diameter peer profile for this charging profile. If a corresponding diameter peer profile does not exist in tmnxMobProfDiaPeerTable, an 'inconsistentValue' error will be returned.")
tmnxMobProfPgwChrgCitQosChange = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 16, 1, 8), TmnxEnabledDisabled().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfPgwChrgCitQosChange.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfPgwChrgCitQosChange.setDescription('The value of tmnxMobProfPgwChrgCitQosChange specifies whether the QoS-Change trigger is enabled, which results in List of Traffic Data Volumes container charging information added to the Charging Data Record (CDR) when there is a change in Qos.')
tmnxMobProfPgwChrgCitUsrLocChnge = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 16, 1, 9), TmnxEnabledDisabled().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfPgwChrgCitUsrLocChnge.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfPgwChrgCitUsrLocChnge.setDescription('The value of tmnxMobProfPgwChrgCitQosChange specifies whether the User Location Change trigger is enabled, which results in List of Traffic Data Volumes container charging information added to the Charging Data Record (CDR) when there is a change in Qos.')
tmnxMobProfPgwChrgCitTrfTimeChng = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 16, 1, 10), TmnxEnabledDisabled().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfPgwChrgCitTrfTimeChng.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfPgwChrgCitTrfTimeChng.setDescription('The value of tmnxMobProfPgwChrgCitTrfTimeChng specifies whether the Tarrif Time Change trigger is enabled, which results in List of Traffic Data Volumes container charging information added to the Charging Data Record (CDR) when there is a change in tarrif time.')
tmnxMobProfPgwChrgCitTrfTmStart = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 16, 1, 11), TmnxTimeInSec()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfPgwChrgCitTrfTmStart.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfPgwChrgCitTrfTmStart.setDescription('The value of tmnxMobProfPgwChrgCitTrfTmStart specifies the start of the Tarrif Time for the Charging Data Record (CDR).')
tmnxMobProfPgwChrgCitTrfTmEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 16, 1, 12), TmnxTimeInSec()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfPgwChrgCitTrfTmEnd.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfPgwChrgCitTrfTmEnd.setDescription('The value of tmnxMobProfPgwChrgCitTrfTmEnd specifies the end of the Tarrif Time for the Charging Data Record (CDR).')
tmnxMobProfPgwChrgCitSgwChange = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 16, 1, 13), TmnxEnabledDisabled().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfPgwChrgCitSgwChange.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfPgwChrgCitSgwChange.setDescription('The value of tmnxMobProfPgwChrgCitSgwChange specifies whether the Serving-Node-Change trigger is enabled, which results in List of Traffic Data Volumes container charging information added to the Charging Data Record (CDR) when there is a change in Serving Gateway (SGW).')
tmnxMobProfPgwChrgCitTimeLmtRg = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 16, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 86400)).clone(1800)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfPgwChrgCitTimeLmtRg.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfPgwChrgCitTimeLmtRg.setDescription('The value of tmnxMobProfPgwChrgCitTimeLmtRg specifies a time limit (in seconds) applicable per rating group, which results in List of Traffic Data Volumes container charging information added to the Charging Data Record (CDR) when the time limit is reached.')
tmnxMobProfPgwChrgCitVolumeLmtRg = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 16, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 32768)).clone(2048)).setUnits('kbytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfPgwChrgCitVolumeLmtRg.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfPgwChrgCitVolumeLmtRg.setDescription('The value of tmnxMobProfPgwChrgCitVolumeLmtRg specifies a data volume limit applicable per rating group, which results in List of Traffic Data Volumes container charging information added to the Charging Data Record (CDR) when the volume limit is reached.')
tmnxMobProfPgwChrgCitTermServDf = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 16, 1, 18), TmnxEnabledDisabled().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfPgwChrgCitTermServDf.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfPgwChrgCitTermServDf.setDescription('The value of tmnxMobProfPgwChrgCitTermServDf specifies whether the termination of service data flow trigger is enabled, which results in List of Traffic Data Volumes container charging information added to the Charging Data Record (CDR) when the service data flow is terminated.')
tmnxMobProfPgwChrgPrctTimeLmt = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 16, 1, 19), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 86400)).clone(3600)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfPgwChrgPrctTimeLmt.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfPgwChrgPrctTimeLmt.setDescription('The value of tmnxMobProfPgwChrgPrctTimeLmt specifies a time limit (in seconds) applicable per session or bearer depending on the accounting level selected like PDN-level accounting or QCI/bearer-level accounting. A partial record is created when the specified time limit is satisfied.')
tmnxMobProfPgwChrgPrctVolumeLmt = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 16, 1, 20), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(4096)).setUnits('kbytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfPgwChrgPrctVolumeLmt.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfPgwChrgPrctVolumeLmt.setDescription('The value of tmnxMobProfPgwChrgPrctVolumeLmt specifies a data volume limit applicable per session or bearer depending on the accounting level selected like PDN-level accounting or QCI/bearer-level accounting. A partial record is created when the specified volume limit is satisfied.')
tmnxMobProfPgwChrgPrctMaxChCond = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 16, 1, 21), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfPgwChrgPrctMaxChCond.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfPgwChrgPrctMaxChCond.setDescription('The value of tmnxMobProfPgwChrgPrctMaxChCond specifies the maximum number of change conditions that can occur like tariff change, location change before a partial record is created.')
tmnxMobProfPgwChrgPrctMsTmzChnge = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 16, 1, 22), TmnxEnabledDisabled().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfPgwChrgPrctMsTmzChnge.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfPgwChrgPrctMsTmzChnge.setDescription('The value of tmnxMobProfPgwChrgPrctMsTmzChnge specifies whether the MS Time Zone Change partial record trigger is enabled. Upon encountering a MS Time Zone change, a partial record is created.')
tmnxMobProfPgwChrgPrctPlmnChange = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 16, 1, 23), TmnxEnabledDisabled().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfPgwChrgPrctPlmnChange.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfPgwChrgPrctPlmnChange.setDescription('The value of tmnxMobProfPgwChrgPrctPlmnChange specifies whether the plmn-change partial record trigger is enabled. Upon encountering a plmn-change, a partial record is created.')
tmnxMobProfPgwChrgPrctRatChange = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 16, 1, 24), TmnxEnabledDisabled().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfPgwChrgPrctRatChange.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfPgwChrgPrctRatChange.setDescription('The value of tmnxMobProfPgwChrgPrctRatChange specifies whether the rat-change partial record trigger is enabled. Upon encountering a rat-change, a partial record is created.')
tmnxMobProfPgwChrgGyState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 16, 1, 25), TmnxEnabledDisabled().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfPgwChrgGyState.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfPgwChrgGyState.setDescription('The value of tmnxMobProfPgwChrgGyState specifies whether online charging (Gy) is enabled for this charging profile for the Packet Data Network Gateway (PGW).')
tmnxMobProfPgwGyPriOcsDiaPeer = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 16, 1, 26), TmnxMobProfNameOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfPgwGyPriOcsDiaPeer.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfPgwGyPriOcsDiaPeer.setDescription("The value of tmnxMobProfPgwGyPriOcsDiaPeer specifies the primary Online Charging System (OCS) diameter peer profile for this online charging (Gy) profile. If a corresponding diameter peer profile does not exist in tmnxMobProfDiaPeerTable, an 'inconsistentValue' error will be returned.")
tmnxMobProfPgwGySecOcsDiaPeer = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 16, 1, 27), TmnxMobProfNameOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfPgwGySecOcsDiaPeer.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfPgwGySecOcsDiaPeer.setDescription("The value of tmnxMobProfPgwGySecOcsDiaPeer specifies the secondary Online Charging System (OCS) diameter peer profile for this online charging (Gy) profile. If a corresponding diameter peer profile does not exist in tmnxMobProfDiaPeerTable, an 'inconsistentValue' error will be returned.")
tmnxMobProfPgwGyDccaProf = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 16, 1, 28), TmnxMobProfNameOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfPgwGyDccaProf.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfPgwGyDccaProf.setDescription("The value of tmnxMobProfPgwGyDccaProf specifies Diameter Credit Control Application (DCCA) profile used for the primary and secondary Online Charging System (OCS) for this Online charging (Gy) profile. If a corresponding diameter peer profile does not exist in tmnxMobProfDiaPeerTable, an 'inconsistentValue' error will be returned.")
tmnxMobProfPgwChrgPrctSrvNdChLmt = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 16, 1, 29), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)).clone(15)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfPgwChrgPrctSrvNdChLmt.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfPgwChrgPrctSrvNdChLmt.setDescription('The value of tmnxMobProfPgwChrgPrctSrvNdChLmt specifies a maximum limit for the change in Serving Node. A partial record is created when the specified change limit is satisfied for this Partial Record Closure Trigger(PRCT).')
tmnxMobGtpPriGrpTblLstChgd = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 2, 17), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMobGtpPriGrpTblLstChgd.setStatus('current')
if mibBuilder.loadTexts: tmnxMobGtpPriGrpTblLstChgd.setDescription('The value of tmnxMobGtpPriGrpTblLstChgd indicates the sysUpTime at the time of the last modification to tmnxMobGtpPriGrpTable by adding, deleting an entry or change to a writable object in the table. If no changes were made to the table since the last re-initialization of the local network management subsystem, then this object contains a zero value.')
tmnxMobGtpPriGrpTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 17), )
if mibBuilder.loadTexts: tmnxMobGtpPriGrpTable.setStatus('current')
if mibBuilder.loadTexts: tmnxMobGtpPriGrpTable.setDescription('The tmnxMobGtpPriGrpTable has an entry for each GPRS Tunneling Protocol (GTP) Prime Server Group configured on the system. It defines GTP prime server parameters.')
tmnxMobGtpPriGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 17, 1), ).setIndexNames((0, "TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobGtpPriGrpName"))
if mibBuilder.loadTexts: tmnxMobGtpPriGrpEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxMobGtpPriGrpEntry.setDescription('Each row entry represents a GPRS Tunneling Protocol (GTP) Prime Server Group defined in the system. Entries can be created and deleted by the user.')
tmnxMobGtpPriGrpName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 17, 1, 1), TmnxMobProfName())
if mibBuilder.loadTexts: tmnxMobGtpPriGrpName.setStatus('current')
if mibBuilder.loadTexts: tmnxMobGtpPriGrpName.setDescription('The value of tmnxMobGtpPriGrpName specifies the unique name of this GPRS Tunneling Protocol (GTP) Prime Server Group.')
tmnxMobGtpPriGrpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 17, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobGtpPriGrpRowStatus.setStatus('current')
if mibBuilder.loadTexts: tmnxMobGtpPriGrpRowStatus.setDescription('The value of tmnxMobGtpPriGrpRowStatus specifies the row status of this entry. It is used for creation and deletion of this GPRS Tunneling Protocol (GTP) Prime Server Group.')
tmnxMobGtpPriGrpLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 17, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMobGtpPriGrpLastChanged.setStatus('current')
if mibBuilder.loadTexts: tmnxMobGtpPriGrpLastChanged.setDescription('The value of tmnxMobGtpPriGrpLastChanged indicates the timestamp of the last change to this row in tmnxMobGtpPriGrpTable.')
tmnxMobGtpPriGrpDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 17, 1, 4), TItemDescription().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobGtpPriGrpDescription.setStatus('current')
if mibBuilder.loadTexts: tmnxMobGtpPriGrpDescription.setDescription('The value of tmnxMobGtpPriGrpDescription specifies the description string for this GPRS Tunneling Protocol (GTP) Prime Server Group. It can consist of any printable, seven-bit ASCII characters up to 80 characters in length.')
tmnxMobGtpPriGrpMaxCdrsPerPdu = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 17, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobGtpPriGrpMaxCdrsPerPdu.setStatus('current')
if mibBuilder.loadTexts: tmnxMobGtpPriGrpMaxCdrsPerPdu.setDescription('The value of tmnxMobGtpPriGrpMaxCdrsPerPdu specifies the maximum number of the Charging Data Records (CDR) that can be placed in a single GTP Prime Server PDU. The number of CDRs will also be bound by the size of the GPRS Tunneling Protocol (GTP) Prime Server PDU.')
tmnxMobGtpPriGrpDeadtime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 17, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600))).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobGtpPriGrpDeadtime.setStatus('current')
if mibBuilder.loadTexts: tmnxMobGtpPriGrpDeadtime.setDescription('The value of tmnxMobGtpPriGrpDeadtime specifies the time that a server should be considered dead before it may be used again.')
tmnxMobGtpPriGrpRedirection = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 17, 1, 7), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobGtpPriGrpRedirection.setStatus('current')
if mibBuilder.loadTexts: tmnxMobGtpPriGrpRedirection.setDescription('The value of tmnxMobGtpPriGrpRedirection specifies whether the GPRS Tunneling Protocol (GTP) Prime Server redirection function is enabled. Enabling the redirection function allows the Charging Gateway Function (CGF) to inform the system when it is about to go out of service and it should cause the system to select a different CGF.')
tmnxMobGtpPriGrpIfVRtrId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 17, 1, 8), TmnxVRtrID().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobGtpPriGrpIfVRtrId.setStatus('current')
if mibBuilder.loadTexts: tmnxMobGtpPriGrpIfVRtrId.setDescription('The value of tmnxMobGtpPriGrpIfVRtrId specifies the virtual router to which the interface specified by tmnxMobGtpPriGrpIfIndex belongs.')
tmnxMobGtpPriGrpIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 17, 1, 9), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobGtpPriGrpIfIndex.setStatus('current')
if mibBuilder.loadTexts: tmnxMobGtpPriGrpIfIndex.setDescription('The value of tmnxMobGtpPriGrpIfIndex specifies the interface index of the local interface used by this GPRS Tunneling Protocol (GTP) Prime Server Group. The interface index at the profile level overrides the interface index at the gateway level.')
tmnxMobGtpPriGrpLocalCdrStorage = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 17, 1, 10), TmnxEnabledDisabled().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobGtpPriGrpLocalCdrStorage.setStatus('current')
if mibBuilder.loadTexts: tmnxMobGtpPriGrpLocalCdrStorage.setDescription('The value of tmnxMobGtpPriGrpLocalCdrStorage specifies whether local Charging Data Records (CDR) is enabled. The local CDR storage should be be used only if the set of charging gateways are unreachable. However, it is also possible to configure a gtp-prime-group that does not contain any charging-gateways (gtp-prime-servers). In that case the local storage target would be considered the primary option.')
tmnxMobGtpPriGrpFilePrivateInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 17, 1, 11), TNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobGtpPriGrpFilePrivateInfo.setStatus('current')
if mibBuilder.loadTexts: tmnxMobGtpPriGrpFilePrivateInfo.setDescription('The value of tmnxMobGtpPriGrpFilePrivateInfo specifies an operator configurable file private information field that is used in the file name.')
tmnxMobGtpPriGrpFileExtension = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 17, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8)).clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobGtpPriGrpFileExtension.setStatus('current')
if mibBuilder.loadTexts: tmnxMobGtpPriGrpFileExtension.setDescription('The value of tmnxMobGtpPriGrpFileExtension specifies an operator configurable file extension field that is used in the file name.')
tmnxMobGtpPriGrpFileClosureSize = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 17, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(50)).setUnits('megabytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobGtpPriGrpFileClosureSize.setStatus('current')
if mibBuilder.loadTexts: tmnxMobGtpPriGrpFileClosureSize.setDescription('The value of tmnxMobGtpPriGrpFileClosureSize specifies an operator configurable file closure size limit.')
tmnxMobGtpPriGrpFileClsLifeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 17, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 24)).clone(1)).setUnits('hours').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobGtpPriGrpFileClsLifeTime.setStatus('current')
if mibBuilder.loadTexts: tmnxMobGtpPriGrpFileClsLifeTime.setDescription('The value of tmnxMobGtpPriGrpFileClsLifeTime specifies an operator configurable file closure lifetime. The file is closed after the specified duration.')
tmnxMobGtpPriGrpFileClsMaxRecs = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 17, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(100, 75000)).clone(50000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobGtpPriGrpFileClsMaxRecs.setStatus('current')
if mibBuilder.loadTexts: tmnxMobGtpPriGrpFileClsMaxRecs.setDescription('The value of tmnxMobGtpPriGrpFileClsMaxRecs specifies an operator configurable limit for the number of Charging Data Records (CDR) that are stored in a file. The file is closed after the specified limit is reached.')
tmnxMobGtpPriGrpFileObsoleteTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 17, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)).clone(7)).setUnits('days').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobGtpPriGrpFileObsoleteTime.setStatus('current')
if mibBuilder.loadTexts: tmnxMobGtpPriGrpFileObsoleteTime.setDescription('The value of tmnxMobGtpPriGrpFileObsoleteTime specifies an operator configurable file duration, after which the file is deleted.')
tmnxMobGtpPriGrpPrimaryCf = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 17, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cf1", 1), ("cf2", 2))).clone('cf1')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobGtpPriGrpPrimaryCf.setStatus('current')
if mibBuilder.loadTexts: tmnxMobGtpPriGrpPrimaryCf.setDescription("The value of tmnxMobGtpPriGrpPrimaryCf specifies which compact flash will be used as a primary storage for the Charging Data Records (CDR) storage. If the user tries to set the 'cf1' and if the 'cf1' is not available then 'cf2' will be set as primary storage. If the user tries to set the 'cf2' and if 'cf2' is not available then cf1 will be set as primary storage.")
tmnxMobGtpPriGrpCf1State = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 17, 1, 18), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobGtpPriGrpCf1State.setStatus('current')
if mibBuilder.loadTexts: tmnxMobGtpPriGrpCf1State.setDescription('The value of tmnxMobGtpPriGrpCf1State specifies whether the first compact flash is enabled to be used for the Charging Data Records (CDR) storage. If the compact flash is not available then it will be disabled.')
tmnxMobGtpPriGrpCf1Limit = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 17, 1, 19), Unsigned32()).setUnits('megabytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobGtpPriGrpCf1Limit.setStatus('current')
if mibBuilder.loadTexts: tmnxMobGtpPriGrpCf1Limit.setDescription('The value of tmnxMobGtpPriGrpCf1Limit specifies the limit (in megabytes) for an amount of memory on the first compact flash that can be used for the Charging Data Records (CDR) storage. Once the threshold has been reached, the system can no longer support accurate charging. If the compact flash is not available then tmnxMobGtpPriGrpCf1Limit will be set to 0. If tmnxMobGtpPriGrpCf1State is enabled and the value of tmnxMobGtpPriGrpCf1Limit is 0, then maximum available memory on the second compact flash can be used for the CDR storage.')
tmnxMobGtpPriGrpCf2State = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 17, 1, 20), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobGtpPriGrpCf2State.setStatus('current')
if mibBuilder.loadTexts: tmnxMobGtpPriGrpCf2State.setDescription('The value of tmnxMobGtpPriGrpCf2State specifies whether the second compact flash is enabled to be used for the Charging Data Record (CDR) storage. If the compact flash is not available then it will be disabled.')
tmnxMobGtpPriGrpCf2Limit = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 17, 1, 21), Unsigned32()).setUnits('megabytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobGtpPriGrpCf2Limit.setStatus('current')
if mibBuilder.loadTexts: tmnxMobGtpPriGrpCf2Limit.setDescription('The value of tmnxMobGtpPriGrpCf2Limit specifies the limit (in megabytes) for an amount of memory on the second compact flash that can be used for the Charging Data Records (CDR) storage. Once the threshold has been reached, the system can no longer support accurate charging. If the compact flash is not available then tmnxMobGtpPriGrpCf2Limit will be set to 0. If tmnxMobGtpPriGrpCf2State is enabled and the value of tmnxMobGtpPriGrpCf2Limit is 0, then maximum available memory on the second compact flash can be used for the CDR storage.')
tmnxMobGtpPriGrpCpmMemoryState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 17, 1, 22), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobGtpPriGrpCpmMemoryState.setStatus('current')
if mibBuilder.loadTexts: tmnxMobGtpPriGrpCpmMemoryState.setDescription('The value of tmnxMobGtpPriGrpCpmMemoryState specifies whether the first compact flash is enabled to be used for the Charging Data Records (CDR) storage. If the compact flash is not available then it will be disabled.')
tmnxMobGtpPriGrpQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 17, 1, 23), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(10000, 500000)).clone(100000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobGtpPriGrpQueueSize.setStatus('current')
if mibBuilder.loadTexts: tmnxMobGtpPriGrpQueueSize.setDescription('The value of tmnxMobGtpPriGrpQueueSize specifies the maximum number of unsent GPRS Tunneling Protocol (GTP) packets cached in the Mobile Gateway, waiting for atleast one Charging Gateway Function (CGF) to come up. Once this threshold is reached, all the cached GTP packets are stored in the flash.')
tmnxMobGtpPriGrpAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 17, 1, 24), TmnxAdminState().clone('outOfService')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobGtpPriGrpAdminState.setStatus('current')
if mibBuilder.loadTexts: tmnxMobGtpPriGrpAdminState.setDescription('The value of tmnxMobGtpPriServerAdminState specifies the desired administrative state of this GPRS Tunneling Protocol (GTP) Prime Server Group.')
tmnxMobGtpPriGrpInactiveTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 17, 1, 25), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 60)).clone(10)).setUnits('minutes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobGtpPriGrpInactiveTimer.setStatus('current')
if mibBuilder.loadTexts: tmnxMobGtpPriGrpInactiveTimer.setDescription('The value of tmnxMobGtpPriGrpInactiveTimer specifies the amount of time the peer must remain inactive to store all the cached GPRS Tunneling Protocol (GTP) packets in the flash.')
tmnxMobGtpPriServerTblLstChgd = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 2, 18), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMobGtpPriServerTblLstChgd.setStatus('current')
if mibBuilder.loadTexts: tmnxMobGtpPriServerTblLstChgd.setDescription('The value of tmnxMobGtpPriServerTblLstChgd indicates the sysUpTime at the time of the last modification to tmnxMobGtpPriServerTable by adding, deleting an entry or change to a writable object in the table. If no changes were made to the table since the last re-initialization of the local network management subsystem, then this object contains a zero value.')
tmnxMobGtpPriServerTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 18), )
if mibBuilder.loadTexts: tmnxMobGtpPriServerTable.setStatus('current')
if mibBuilder.loadTexts: tmnxMobGtpPriServerTable.setDescription('The tmnxMobGtpPriServerTable has an entry for each GPRS Tunneling Protocol (GTP) Prime Server configured for each GTP Prime Server Group configured on the system.')
tmnxMobGtpPriServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 18, 1), ).setIndexNames((0, "TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobGtpPriGrpName"), (0, "TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobGtpPriServerIndex"))
if mibBuilder.loadTexts: tmnxMobGtpPriServerEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxMobGtpPriServerEntry.setDescription('Each row entry represents a IP address configured for each GPRS Tunneling Protocol (GTP) Prime Server. Entries can be created and deleted by the user.')
tmnxMobGtpPriServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 18, 1, 1), Unsigned32())
if mibBuilder.loadTexts: tmnxMobGtpPriServerIndex.setStatus('current')
if mibBuilder.loadTexts: tmnxMobGtpPriServerIndex.setDescription('The value of tmnxMobGtpPriServerIndex specifies the unique value which identifies this IP address entry.')
tmnxMobGtpPriServerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 18, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobGtpPriServerRowStatus.setStatus('current')
if mibBuilder.loadTexts: tmnxMobGtpPriServerRowStatus.setDescription("The value of tmnxMobGtpPriServerRowStatus specifies the row status of this entry. It is used for creation and deletion of this GPRS Tunneling Protocol (GTP) primary server entry. In order for the row creation to succeed, values for tmnxMobGtpPriServerAddrType, tmnxMobGtpPriServerAddr and tmnxMobProfDiaPeerListPort must be included in the same SNMP SET PDU as tmnxMobGtpPriServerRowStatus. Otherwise, the SET request will fail with an 'inconsistentValue' error.")
tmnxMobGtpPriServerLastChngd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 18, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMobGtpPriServerLastChngd.setStatus('current')
if mibBuilder.loadTexts: tmnxMobGtpPriServerLastChngd.setDescription('The value of tmnxMobGtpPriServerLastChngd indicates the timestamp of the last change to this row in tmnxMobGtpPriServerTable.')
tmnxMobGtpPriServerAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 18, 1, 4), TmnxAdminState().clone('outOfService')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobGtpPriServerAdminState.setStatus('current')
if mibBuilder.loadTexts: tmnxMobGtpPriServerAdminState.setDescription('The value of tmnxMobGtpPriServerAdminState specifies the desired administrative state of this GPRS Tunneling Protocol (GTP) primary server.')
tmnxMobGtpPriServerAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 18, 1, 5), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobGtpPriServerAddrType.setStatus('current')
if mibBuilder.loadTexts: tmnxMobGtpPriServerAddrType.setDescription('The value of tmnxMobGtpPriServerAddrType specifies the type of address represented by tmnxMobGtpPriServerAddr. The value of this object cannot be modified once the row has been created.')
tmnxMobGtpPriServerAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 18, 1, 6), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobGtpPriServerAddr.setStatus('current')
if mibBuilder.loadTexts: tmnxMobGtpPriServerAddr.setDescription("The value of tmnxMobGtpPriServerAddr specifies the IP address of the peer for which this entry contains information. If the value of the corresponsding tmnxMobGtpPriServerAddrType is 'dns', then the IP address for this Peer will be obtained via DNS A-Record query. The value of this object cannot be modified once the row has been created.")
tmnxMobGtpPriServerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 18, 1, 7), InetPortNumber().clone(3386)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobGtpPriServerPort.setStatus('current')
if mibBuilder.loadTexts: tmnxMobGtpPriServerPort.setDescription('The value of tmnxMobGtpPriServerPort specifies the destination TCP or UDP port number for GTP Prime Server. The value of this object cannot be modified once the row has been created.')
tmnxMobGtpPriServerRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 18, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)).clone(4)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobGtpPriServerRetries.setStatus('current')
if mibBuilder.loadTexts: tmnxMobGtpPriServerRetries.setDescription('The value of tmnxMobGtpPriServerRetries specifies the number of times the system will attempt to send a GPRS Tunneling Protocol (GTP) Prime Server PDU to a Charging Gateway Function (CGF).')
tmnxMobGtpPriServerTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 18, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 180)).clone(20)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobGtpPriServerTimeout.setStatus('current')
if mibBuilder.loadTexts: tmnxMobGtpPriServerTimeout.setDescription('The value of tmnxMobGtpPriServerTimeout specifies the interval between GPRS Tunneling Protocol (GTP) Prime Server PDU retries.')
tmnxMobGtpPriServerEchoInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 18, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600)).clone(60)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobGtpPriServerEchoInterval.setStatus('current')
if mibBuilder.loadTexts: tmnxMobGtpPriServerEchoInterval.setDescription('The value of tmnxMobGtpPriServerEchoInterval specifies the interval at which the system should send echo-requests for the GPRS Tunneling Protocol (GTP) Prime Server PDUs used to send the Charging Data Records (CDR).')
tmnxMobGtpPriServerMaxRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 18, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 512)).clone(256)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobGtpPriServerMaxRequests.setStatus('current')
if mibBuilder.loadTexts: tmnxMobGtpPriServerMaxRequests.setDescription('The value of tmnxMobGtpPriServerMaxRequests specifies the maximum number of unacknowledged GPRS Tunneling Protocol (GTP) Prime Server PDUs before the system stops sending the Charging Data Records (CDR).')
tmnxMobGtpPriServerNodeAlive = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 18, 1, 12), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobGtpPriServerNodeAlive.setStatus('current')
if mibBuilder.loadTexts: tmnxMobGtpPriServerNodeAlive.setDescription('The value of tmnxMobGtpPriServerNodeAlive specifies whethere the GPRS Tunneling Protocol (GTP) Prime Server node alive mechanism is enabled. This mechanism results in a quicker restart than the echo protocol. This command will also enable the system to respond to Node Alive Requests from the Charging Gateway Function (CGF).')
tmnxMobGtpPriServerPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 18, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobGtpPriServerPriority.setStatus('current')
if mibBuilder.loadTexts: tmnxMobGtpPriServerPriority.setDescription('The value of tmnxMobGtpPriServerPriority specifies the priority of the this GPRS Tunneling Protocol (GTP) primary server.')
tmnxMobGtpPriServerPathProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 18, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tcp", 1), ("udp", 2))).clone('udp')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobGtpPriServerPathProtocol.setStatus('current')
if mibBuilder.loadTexts: tmnxMobGtpPriServerPathProtocol.setDescription('The value of tmnxMobGtpPriServerMaxRequests specifies the path protocol used for the GPRS Tunneling Protocol (GTP) primary server.')
tmnxMobUmtsQosPolTblLstChgd = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 2, 19), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMobUmtsQosPolTblLstChgd.setStatus('current')
if mibBuilder.loadTexts: tmnxMobUmtsQosPolTblLstChgd.setDescription('The value of tmnxMobUmtsQosPolTblLstChgd indicates the sysUpTime at the time of the last modification to tmnxMobUmtsQosPolTable by adding, deleting an entry or change to a writable object in the table. If no changes were made to the table since the last re-initialization of the local network management subsystem, then this object contains a zero value.')
tmnxMobUmtsQosPolTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 19), )
if mibBuilder.loadTexts: tmnxMobUmtsQosPolTable.setStatus('current')
if mibBuilder.loadTexts: tmnxMobUmtsQosPolTable.setDescription('The tmnxMobUmtsQosPolTable has an entry for each Universal Mobile Telecommunications System (UMTS) Quality of Service (QoS) Policy configured on the system. It defines the mapping between standardized QoS Class Identifier (QCI) and pre-Rel-8 QoS parameter values.')
tmnxMobUmtsQosPolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 19, 1), ).setIndexNames((0, "TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobUmtsQosPolName"))
if mibBuilder.loadTexts: tmnxMobUmtsQosPolEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxMobUmtsQosPolEntry.setDescription("Each row entry represents a Universal Mobile Telecommunications System (UMTS) Quality of Service (QoS) Policy defined in the system. Entries can be created and deleted by the user. For each entry the mapping between pre-Rel-8 QoS parameter value pairs and QoS Class Identifier (QCI) values must be 1-to-1, which means the values for all the QCI objects in tmnxMobUmtsQosPolTable must be non-overlapping. If the mapping is not 1-to-1, at the time of association of this policy at gateway level an 'inconsistentValue' error will be returned. A maximum of 1024 policies can be configured in the system.")
tmnxMobUmtsQosPolName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 19, 1, 1), TmnxMobProfName())
if mibBuilder.loadTexts: tmnxMobUmtsQosPolName.setStatus('current')
if mibBuilder.loadTexts: tmnxMobUmtsQosPolName.setDescription('The value of tmnxMobUmtsQosPolName specifies the unique name of this Universal Mobile Telecommunications System (UMTS) Quality of Service (QoS) Policy.')
tmnxMobUmtsQosPolRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 19, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobUmtsQosPolRowStatus.setStatus('current')
if mibBuilder.loadTexts: tmnxMobUmtsQosPolRowStatus.setDescription('The value of tmnxMobUmtsQosPolRowStatus specifies the row status of this entry. It is used for creation and deletion of this Universal Mobile Telecommunications System (UMTS) Quality of Service (QoS) Policy.')
tmnxMobUmtsQosPolLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 19, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMobUmtsQosPolLastChanged.setStatus('current')
if mibBuilder.loadTexts: tmnxMobUmtsQosPolLastChanged.setDescription('The value of tmnxMobUmtsQosPolLastChanged indicates the timestamp of the last change to this row in tmnxMobUmtsQosPolTable.')
tmnxMobUmtsQosPolConvSpeechQci = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 19, 1, 4), TmnxMobQciValue().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobUmtsQosPolConvSpeechQci.setStatus('current')
if mibBuilder.loadTexts: tmnxMobUmtsQosPolConvSpeechQci.setDescription('The value of tmnxMobUmtsQosPolStreamQciValue specifies the QoS Class Identifier (QCI) value when the value for Source Statistics Descriptor (SSD) is speech and traffic class is Conversational.')
tmnxMobUmtsQosPolConvUnkTdg = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 19, 1, 5), TmnxMobQciValue().clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobUmtsQosPolConvUnkTdg.setStatus('current')
if mibBuilder.loadTexts: tmnxMobUmtsQosPolConvUnkTdg.setDescription('The value of tmnxMobUmtsQosPolStreamQciValue specifies the QoS Class Identifier (QCI) value when the value for Source Statistics Descriptor (SSD) is unknown, traffic class is Conversational and the Transfer Delay parameter is greater or equal to 150 ms.')
tmnxMobUmtsQosPolConvUnkTdl = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 19, 1, 6), TmnxMobQciValue().clone(3)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobUmtsQosPolConvUnkTdl.setStatus('current')
if mibBuilder.loadTexts: tmnxMobUmtsQosPolConvUnkTdl.setDescription('The value of tmnxMobUmtsQosPolStreamQciValue specifies the QoS Class Identifier (QCI) value when the value for Source Statistics Descriptor (SSD) is unknown, traffic class is Conversational and the Transfer Delay parameter is lower than 150 ms.')
tmnxMobUmtsQosPolStreamQciValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 19, 1, 7), TmnxMobQciValue().clone(4)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobUmtsQosPolStreamQciValue.setStatus('current')
if mibBuilder.loadTexts: tmnxMobUmtsQosPolStreamQciValue.setDescription('The value of tmnxMobUmtsQosPolStreamQciValue specifies the QoS Class Identifier (QCI) value when the value for Source Statistics Descriptor (SSD) is unknown or speech and traffic class is Streaming.')
tmnxMobUmtsQosPolInterSigP1Qci = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 19, 1, 8), TmnxMobQciValue().clone(5)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobUmtsQosPolInterSigP1Qci.setStatus('current')
if mibBuilder.loadTexts: tmnxMobUmtsQosPolInterSigP1Qci.setDescription('The value of tmnxMobUmtsQosPolInterSigP1Qci specifies the QoS Class Identifier (QCI) value when the value for Traffic Handling Priority is 1, Signaling Indication is enabled and traffic class is Interactive.')
tmnxMobUmtsQosPolInterP1Qci = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 19, 1, 9), TmnxMobQciValue().clone(6)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobUmtsQosPolInterP1Qci.setStatus('current')
if mibBuilder.loadTexts: tmnxMobUmtsQosPolInterP1Qci.setDescription('The value of tmnxMobUmtsQosPolInterP1Qci specifies the QoS Class Identifier (QCI) value when the value for Traffic Handling Priority is 1, Signaling Indication is not enabled and traffic class is Interactive.')
tmnxMobUmtsQosPolInterP2Qci = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 19, 1, 10), TmnxMobQciValue().clone(7)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobUmtsQosPolInterP2Qci.setStatus('current')
if mibBuilder.loadTexts: tmnxMobUmtsQosPolInterP2Qci.setDescription('The value of tmnxMobUmtsQosPolInterP2Qci specifies the QoS Class Identifier (QCI) value when the value for Traffic Handling Priority is 2, Signaling Indication is not enabled and traffic class is Interactive.')
tmnxMobUmtsQosPolInterP3Qci = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 19, 1, 11), TmnxMobQciValue().clone(8)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobUmtsQosPolInterP3Qci.setStatus('current')
if mibBuilder.loadTexts: tmnxMobUmtsQosPolInterP3Qci.setDescription('The value of tmnxMobUmtsQosPolInterP3Qci specifies the QoS Class Identifier (QCI) value when the value for Traffic Handling Priority is 3, Signaling Indication is not enabled and traffic class is Interactive.')
tmnxMobUmtsQosPolBackground = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 19, 1, 12), TmnxMobQciValue().clone(9)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobUmtsQosPolBackground.setStatus('current')
if mibBuilder.loadTexts: tmnxMobUmtsQosPolBackground.setDescription('The value of tmnxMobUmtsQosPolBackground specifies the QoS Class Identifier (QCI) value when the traffic class is Background.')
tmnxMobProfRadTblLstChgd = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 2, 20), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMobProfRadTblLstChgd.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfRadTblLstChgd.setDescription('The value of tmnxMobProfRadTblLstChgd indicates the sysUpTime at the time of the last modification to the tmnxMobProfRadTable by adding, deleting an entry or change to a writable object in the table. If no changes were made to the table since the last re-initialization of the local network management subsystem, then this object contains a zero value.')
tmnxMobProfRadTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 20), )
if mibBuilder.loadTexts: tmnxMobProfRadTable.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfRadTable.setDescription('The tmnxMobProfRadTable has an entry for each radius profile configured in the system. Radius profile defines parameters applicable when RADIUS is used for authentication and accounting purposes.')
tmnxMobProfRadEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 20, 1), ).setIndexNames((1, "TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfRadName"))
if mibBuilder.loadTexts: tmnxMobProfRadEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfRadEntry.setDescription('Each row entry represents a radius profile defined in the system. Entries can be created and deleted by the user.')
tmnxMobProfRadName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 20, 1, 1), TmnxMobProfName())
if mibBuilder.loadTexts: tmnxMobProfRadName.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfRadName.setDescription('The value of tmnxMobProfRadName specifies the unique name of this radius profile.')
tmnxMobProfRadRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 20, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfRadRowStatus.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfRadRowStatus.setDescription('The value of tmnxMobProfRadRowStatus specifies the row status of this entry. It is used for creation and deletion of this radius profile.')
tmnxMobProfRadLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 20, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMobProfRadLastChanged.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfRadLastChanged.setDescription('The value of tmnxMobProfRadLastChanged indicates the timestamp of the last change to this row in tmnxMobProfRadTable.')
tmnxMobProfRadDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 20, 1, 4), TItemDescription().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfRadDescription.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfRadDescription.setDescription('The value of tmnxMobProfRadDescription specifies the description string for this profile. It can consist of any printable, seven-bit ASCII characters up to 80 characters in length.')
tmnxMobProfRadAuthProbeInt = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 20, 1, 5), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(20, 600), ))).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfRadAuthProbeInt.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfRadAuthProbeInt.setDescription("The value of tmnxMobProfRadAuthProbeInt specifies the interval at which the system sends authentication probe messages to an authentication server. An authentication probe is a 'fake' Access-Request message for a certain username and password. If the server responds to the Access-Request (even with an Access- Reject), the server will be considered operational. Note that the authentication probe messages will not be sent to the servers that are used for accounting only.")
tmnxMobProfRadServerDeadTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 20, 1, 6), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(60, 3600), )).clone(300)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfRadServerDeadTime.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfRadServerDeadTime.setDescription('The value of tmnxMobProfRadServerDeadTime specifies the time, in seconds, that the server continues to be considered dead before the system will attempt to use it for normal authentication or accounting requests. When the system fails to reach a particular server after a configurable number of retries, the server is marked dead and another server is selected. Note that for the authentication servers, the system will continuously attempt to verify the operational state of the dead server if the auth-probe-interval is set to be non-zero. If the authentication server responds to an auth-probe, the system considers the server to be operational even if the dead timer has not yet expired. Once the dead-timer expires the system may once again send the server authentication or accounting messages. The server is subject to the retry-timeout and retry-count mechanism to determine if the server is still in the failed state. The server-dead-time is ignored if there are no other available servers to use (either because they are not defined or if they are also down). In this case the system will not mark the server as down. Similarly the server-dead-time can be set to 0 so that the server is never marked dead.')
tmnxMobProfRadRetryTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 20, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(3, 20)).clone(4)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfRadRetryTimeout.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfRadRetryTimeout.setDescription('The value of tmnxMobProfRadRetryTimeout specifies the time, in seconds, to wait before resending a request to which no response has been received.')
tmnxMobProfRadRetryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 20, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)).clone(4)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfRadRetryCount.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfRadRetryCount.setDescription('The value of tmnxMobProfRadRetryCount specifies the maximum number of times the system sends a radius message to the server. When this count is reached the server is considered dead and another server is selected.')
tmnxMobProfRadGrpTblLstChgd = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 2, 21), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMobProfRadGrpTblLstChgd.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfRadGrpTblLstChgd.setDescription('The value of tmnxMobProfRadGrpTblLstChgd indicates the sysUpTime at the time of the last modification to the tmnxMobProfRadGrpTable by adding, deleting an entry or change to a writable object in the table. If no changes were made to the table since the last re-initialization of the local network management subsystem, then this object contains a zero value.')
tmnxMobProfRadGrpTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 21), )
if mibBuilder.loadTexts: tmnxMobProfRadGrpTable.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfRadGrpTable.setDescription('The tmnxMobProfRadGrpTable has an entry for each radius group configured in the system. Radius group defines parameters applicable to a peer when radius is used for authentication and accounting purposes.')
tmnxMobProfRadGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 21, 1), ).setIndexNames((0, "TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfRadGrpName"))
if mibBuilder.loadTexts: tmnxMobProfRadGrpEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfRadGrpEntry.setDescription('Each row entry represents a radius group defined in the system. Entries can be created and deleted by the user.')
tmnxMobProfRadGrpName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 21, 1, 1), TmnxMobProfName())
if mibBuilder.loadTexts: tmnxMobProfRadGrpName.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfRadGrpName.setDescription('The value of tmnxMobProfRadGrpName specifies the unique name of this radius group.')
tmnxMobProfRadGrpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 21, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfRadGrpRowStatus.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfRadGrpRowStatus.setDescription('The value of tmnxMobProfRadGrpRowStatus specifies the row status of this entry. It is used for creation and deletion of this radius group.')
tmnxMobProfRadGrpLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 21, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMobProfRadGrpLastChanged.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfRadGrpLastChanged.setDescription('The value of tmnxMobProfRadGrpLastChanged indicates the timestamp of the last change to this row in tmnxMobProfRadGrpTable.')
tmnxMobProfRadGrpDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 21, 1, 4), TItemDescription().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfRadGrpDescription.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfRadGrpDescription.setDescription('The value of tmnxMobProfRadGrpDescription specifies the description string for this profile. It can consist of any printable, seven-bit ASCII characters up to 80 characters in length.')
tmnxMobProfRadGrpIfVRtrId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 21, 1, 5), TmnxVRtrID().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfRadGrpIfVRtrId.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfRadGrpIfVRtrId.setDescription('The value of tmnxMobProfRadGrpIfVRtrId specifies the virtual router to which the interface specified by tmnxMobProfRadGrpIfIndex belongs.')
tmnxMobProfRadGrpIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 21, 1, 6), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfRadGrpIfIndex.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfRadGrpIfIndex.setDescription('The value of tmnxMobProfRadGrpIfIndex specifies the interface index of the local interface used for radius authentication and accounting.')
tmnxMobProfRadGrpAuthServerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 21, 1, 7), InetPortNumber().clone(1812)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfRadGrpAuthServerPort.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfRadGrpAuthServerPort.setDescription('The value of tmnxMobProfRadGrpAuthServerPort specifies the listening port on the radius peer for authentication messages.')
tmnxMobProfRadGrpAcctServerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 21, 1, 8), InetPortNumber().clone(1813)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfRadGrpAcctServerPort.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfRadGrpAcctServerPort.setDescription('The value of tmnxMobProfRadGrpAcctServerPort specifies the listening port on the radius peer for accounting messages.')
tmnxMobProfRadGrpSecret = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 21, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 20)).clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfRadGrpSecret.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfRadGrpSecret.setDescription('The value of tmnxMobProfRadGrpSecret specifies the shared secret key to be used with the server. The value returned by tmnxMobProfRadGrpSecret is always an empty string.')
tmnxMobProfRadGrpIntUpdateIntvl = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 21, 1, 10), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(15, 1440), ))).setUnits('minutes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfRadGrpIntUpdateIntvl.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfRadGrpIntUpdateIntvl.setDescription('The value of tmnxMobProfRadGrpIntUpdateIntvl specifies the time interval, in minutes, for sending interim-update messages to the accounting server.')
tmnxMobProfRadGrpServerType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 21, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("auth", 1), ("acct", 2), ("both", 3))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfRadGrpServerType.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfRadGrpServerType.setDescription('The value of tmnxMobProfRadGrpServerType specifies the server type for this radius group.')
tmnxMobProfRadGrpRadiusProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 21, 1, 12), TmnxMobProfNameOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfRadGrpRadiusProfile.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfRadGrpRadiusProfile.setDescription("The value of tmnxMobProfRadGrpRadiusProfile specifies the radius profile name. If a corresponding radius profile does not exist in the tmnxMobProfRadTable, an 'inconsistentValue' error will be returned.")
tmnxMobProfRadGrpIgnAcctResp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 21, 1, 13), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfRadGrpIgnAcctResp.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfRadGrpIgnAcctResp.setDescription('The value of tmnxMobProfRadGrpIgnAcctResp specifies whether the mobile gateway will receive responses after sending account start request to multiple radius servers.')
tmnxMobProfRadPeerTblLstChgd = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 2, 22), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMobProfRadPeerTblLstChgd.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfRadPeerTblLstChgd.setDescription('The value of tmnxMobProfRadPeerTblLstChgd indicates the sysUpTime at the time of the last modification to the tmnxMobProfRadPeerTable by adding, deleting an entry or change to a writable object in the table. If no changes were made to the table since the last re-initialization of the local network management subsystem, then this object contains a zero value.')
tmnxMobProfRadPeerTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 22), )
if mibBuilder.loadTexts: tmnxMobProfRadPeerTable.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfRadPeerTable.setDescription('The tmnxMobProfRadPeerTable has an entry for each radius server configured for each radius group configured on the system.')
tmnxMobProfRadPeerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 22, 1), ).setIndexNames((0, "TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfRadGrpName"), (0, "TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfRadPeerIndex"))
if mibBuilder.loadTexts: tmnxMobProfRadPeerEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfRadPeerEntry.setDescription('Each row entry represents an IP address configured for each radius server. Entries can be created and deleted by the user.')
tmnxMobProfRadPeerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 22, 1, 1), Unsigned32())
if mibBuilder.loadTexts: tmnxMobProfRadPeerIndex.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfRadPeerIndex.setDescription('The value of tmnxMobProfRadPeerIndex specifies the unique value which identifies this IP address entry.')
tmnxMobProfRadPeerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 22, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfRadPeerRowStatus.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfRadPeerRowStatus.setDescription("The value of tmnxMobProfRadPeerRowStatus specifies the row status of this entry. It is used for the creation and deletion of this radius server entry. In order for the row creation to succeed, values for tmnxMobProfRadPeerAddrType, tmnxMobProfRadPeerAddr must be included in the same SNMP SET PDU as tmnxMobProfRadPeerRowStatus. Otherwise, the SET request will fail with an 'inconsistentValue' error.")
tmnxMobProfRadPeerLastChngd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 22, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMobProfRadPeerLastChngd.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfRadPeerLastChngd.setDescription('The value of tmnxMobProfRadPeerLastChngd indicates the timestamp of the last change to this row in tmnxMobProfRadPeerTable.')
tmnxMobProfRadPeerAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 22, 1, 4), TmnxAdminState().clone('outOfService')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfRadPeerAdminState.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfRadPeerAdminState.setDescription('The value of tmnxMobProfRadPeerAdminState specifies the desired administrative state of this radius server.')
tmnxMobProfRadPeerAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 22, 1, 5), InetAddressType().clone('unknown')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfRadPeerAddrType.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfRadPeerAddrType.setDescription('The value of tmnxMobProfRadPeerAddrType specifies the type of address represented by tmnxMobProfRadPeerAddr. The value of this object cannot be modified once the row has been created.')
tmnxMobProfRadPeerAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 22, 1, 6), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(1, 255)).clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfRadPeerAddr.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfRadPeerAddr.setDescription("The value of tmnxMobProfRadPeerAddr specifies the IP address of the server for which this entry contains information. If the value of the corresponsding tmnxMobProfRadPeerAddrType is 'dns', then the IP address for this server will be obtained via DNS A-Record query. The value of this object cannot be modified once the row has been created.")
tmnxMobProfRadPeerPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 22, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 3)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfRadPeerPriority.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfRadPeerPriority.setDescription("The value of tmnxMobProfRadPeerPriority specifies the priority of this server. The value of '3' is considered as the highest priority. The system will attempt to use the highest priority server available at the time. The system will automatically use round-robin load-balancing among servers configured with the same priority.")
tmnxMobProfRadPeerAuthSvrPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 22, 1, 8), InetPortNumber()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfRadPeerAuthSvrPort.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfRadPeerAuthSvrPort.setDescription('The value of tmnxMobProfRadPeerAuthSvrPort specifies the listening port on the radius server for authentication messages.')
tmnxMobProfRadPeerAcctSvrPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 22, 1, 9), InetPortNumber()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfRadPeerAcctSvrPort.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfRadPeerAcctSvrPort.setDescription('The value of tmnxMobProfRadPeerAcctSvrPort specifies the listening port on the radius server for accounting messages.')
tmnxMobProfRadPeerSecret = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 22, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 20)).clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfRadPeerSecret.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfRadPeerSecret.setDescription('The value of tmnxMobProfRadPeerSecret specifies the shared secret key to be used with the server. The value returned by tmnxMobProfRadGrpSecret is always an empty string.')
tmnxMobProfRadPeerRadProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 22, 1, 11), TmnxMobProfNameOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfRadPeerRadProfile.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfRadPeerRadProfile.setDescription("The value of tmnxMobProfRadPeerRadProfile specifies the radius profile name. If a corresponding radius profile does not exist in the tmnxMobProfRadTable, an 'inconsistentValue' error will be returned.")
tmnxMobProfDccaTblLstChgd = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 2, 23), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMobProfDccaTblLstChgd.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfDccaTblLstChgd.setDescription('The value of tmnxMobProfDccaTblLstChgd indicates the sysUpTime at the time of the last modification to tmnxMobProfDccaTable by adding, deleting an entry or change to a writable object in the table. If no changes were made to the table since the last re-initialization of the local network management subsystem, then this object contains a zero value.')
tmnxMobProfDccaTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 23), )
if mibBuilder.loadTexts: tmnxMobProfDccaTable.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfDccaTable.setDescription('The tmnxMobProfDccaTable has an entry for each Diameter Credit Control Application (DCCA) profile configured on the system. DCCA profile defines credit control related parameters for online charging. A maximum of 100 DCCA profiles can be configured in the system.')
tmnxMobProfDccaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 23, 1), ).setIndexNames((1, "TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfDccaName"))
if mibBuilder.loadTexts: tmnxMobProfDccaEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfDccaEntry.setDescription("Each row entry represents a Diameter Credit Control Application (DCCA) profile defined in the system. Entries can be created and deleted by the user. DCCA profile 'default' is created by the agent itself at system initialization. It cannot be modified or deleted.")
tmnxMobProfDccaName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 23, 1, 1), TmnxMobProfName())
if mibBuilder.loadTexts: tmnxMobProfDccaName.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfDccaName.setDescription('The value of tmnxMobProfDccaName specifies the unique name of this Diameter Credit Control Application (DCCA) profile.')
tmnxMobProfDccaRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 23, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfDccaRowStatus.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfDccaRowStatus.setDescription('The value of tmnxMobProfDccaRowStatus specifies the row status of this entry. It is used for creation and deletion of this Diameter Credit Control Application (DCCA) profile.')
tmnxMobProfDccaLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 23, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMobProfDccaLastChanged.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfDccaLastChanged.setDescription('The value of tmnxMobProfDccaLastChanged indicates the timestamp of the last change to this row in tmnxMobProfDccaTable.')
tmnxMobProfDccaDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 23, 1, 4), TItemDescription().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfDccaDescription.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfDccaDescription.setDescription('The value of tmnxMobProfDccaDescription specifies the description string for this Diameter Credit Control Application (DCCA) profile. It can consist of any printable, seven-bit ASCII characters up to 80 characters in length.')
tmnxMobProfDccaApplTxTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 23, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 30)).clone(5)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfDccaApplTxTimer.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfDccaApplTxTimer.setDescription('The value of tmnxMobProfDccaApplTxTimer specifies the application transaction timer for Credit Control Request (CCR) and Credit Control Answer (CCA).')
tmnxMobProfDccaRetryCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 23, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfDccaRetryCnt.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfDccaRetryCnt.setDescription('The value of tmnxMobProfDccaRetryCnt specifies the number of times the Credit Control Request (CCR) message will be retransmitted, when Credit Control Answer (CCA) is not received from the Online Charging System (OCS) server.')
tmnxMobProfDcca3GppQosNegProf = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 23, 1, 7), TmnxEnabledDisabled().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfDcca3GppQosNegProf.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfDcca3GppQosNegProf.setDescription('The value of tmnxMobProfDcca3GppQosNegProf specifies whether the 3GPP-QoS-Negotiated-Profile Attribute Value Pair (AVP) should be included in the Credit Control Request (CCR). Both tmnxMobProfDcca3GppQosNegProf or tmnxMobProfDccaQosInformation can not be enabled at the same time.')
tmnxMobProfDccaQosInformation = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 23, 1, 8), TmnxEnabledDisabled().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfDccaQosInformation.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfDccaQosInformation.setDescription('The value of tmnxMobProfDccaQosInformation specifies whether the Qos-Information Attribute Value Pair (AVP) should be included in the Credit Control Request (CCR). Both tmnxMobProfDcca3GppQosNegProf or tmnxMobProfDccaQosInformation can not be enabled at the same time.')
tmnxMobProfDccaCalledStationId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 23, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("real", 1), ("virtual", 2))).clone('real')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfDccaCalledStationId.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfDccaCalledStationId.setDescription('The value of tmnxMobProfDccaCalledStationId specifies whether the real or virtual Access Point Name (APN) is included in the called-station-id Attribute Value Pair (AVP).')
tmnxMobProfDccaCcSessFailover = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 23, 1, 10), TmnxEnabledDisabled().clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfDccaCcSessFailover.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfDccaCcSessFailover.setDescription('The value of tmnxMobProfDccaCcSessFailover specifies whether the failover to secondary Online Charging System is supported if the primary OCS is not available')
tmnxMobProfDccaCcSessFlovrHndl = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 23, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("terminate", 1), ("continue", 2), ("retryAndTerm", 3))).clone('terminate')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfDccaCcSessFlovrHndl.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfDccaCcSessFlovrHndl.setDescription('The value of tmnxMobProfDccaCcSessFlovrHndl specifies the credit control failure handling on the gateway')
tmnxMobProfDccaForcedReAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 23, 1, 12), TmnxMobProfAllowDiscard().clone('allow')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfDccaForcedReAuth.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfDccaForcedReAuth.setDescription('The value of tmnxMobProfDccaForcedReAuth specifies the option to allow or discard the traffic for the service while waiting for a Credit Control Answer (CCA) response message from the Online Charging System (OCS) when a Credit Control Request (CCR) message is sent to the OCS as a result of forced re-authorization by the OCS.')
tmnxMobProfDccaQuotaExNoThrsld = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 23, 1, 13), TmnxMobProfAllowDiscard().clone('allow')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfDccaQuotaExNoThrsld.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfDccaQuotaExNoThrsld.setDescription('The value of tmnxMobProfDccaQuotaExNoThrsld specifies the option to allow or discard the traffic for the service while waiting for a Credit Control Answer (CCA) response message from the Online Charging System (OCS) when no threshold is active and the quota gets exhausted.')
tmnxMobProfDccaQuotaExThrsldAct = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 23, 1, 14), TmnxMobProfAllowDiscard().clone('allow')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfDccaQuotaExThrsldAct.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfDccaQuotaExThrsldAct.setDescription('The value of tmnxMobProfDccaQuotaExThrsldAct specifies the option to allow or discard the traffic for the service while waiting for a Credit Control Answer (CCA) response message from the Online Charging System (OCS) when the validity timer expires.')
tmnxMobProfDccaQuotaUnavail = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 23, 1, 15), TmnxMobProfAllowDiscard().clone('allow')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfDccaQuotaUnavail.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfDccaQuotaUnavail.setDescription('The value of tmnxMobProfDccaQuotaUnavail specifies the option to allow or discard the traffic for the service while waiting for a Credit Control Answer (CCA) response message from the Online Charging System (OCS) when no quota is available for a Rating Group.')
tmnxMobProfDccaRatingCondtChng = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 23, 1, 16), TmnxMobProfAllowDiscard().clone('allow')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfDccaRatingCondtChng.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfDccaRatingCondtChng.setDescription('The value of tmnxMobProfDccaRatingCondtChng specifies the option to allow or discard the traffic for the service while waiting for a Credit Control Answer (CCA) response message from the Online Charging System (OCS) when a Credit Control Request (CCR) message is sent to the OCS due to the Rating-Condition change being detected and waiting for a Credit Control Answer (CCA) response message from the OCS.')
tmnxMobProfDccaValidityTimeExp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 23, 1, 17), TmnxMobProfAllowDiscard().clone('allow')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfDccaValidityTimeExp.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfDccaValidityTimeExp.setDescription('The value of tmnxMobProfDccaValidityTimeExp specifies the option to allow or discard the traffic for the service while waiting for a Credit Control Answer (CCA) response message from the Online Charging System (OCS) when there is an active threshold, but the quota gets exhausted while waiting for a CCA upon hitting the threshold.')
tmnxMobProfDccaFhSessContTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 23, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1440)).clone(30)).setUnits('minutes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfDccaFhSessContTimer.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfDccaFhSessContTimer.setDescription("The value of tmnxMobProfDccaFhSessContTimer specifies the Failure Handling Session Continue timer. When the value of the object tmnxMobProfDccaCcSessFlovrHndl is 'continue', the credit control session is considered closed. However, the service is granted for the configured period of time.")
tmnxMobProfDccaDefaultQht = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 23, 1, 19), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5)).clone(2)).setUnits('minutes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfDccaDefaultQht.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfDccaDefaultQht.setDescription('The value of tmnxMobProfDccaDefaultQht specifies the default Quota Holding Timer (QHT) that would be applicable when the Online Charging System (OCS) does not specify a QHT. When OCS specifies a QHT, it overrides the default-QHT configured on the gateway.')
tmnxMobProfDccaFirstPktBehavior = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 23, 1, 20), TmnxEnabledDisabled().clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfDccaFirstPktBehavior.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfDccaFirstPktBehavior.setDescription('The value of tmnxMobProfDccaFirstPktBehavior specifies the option to enable the behavior to request quota upon detecting a first packet for the corresponding service data flow. Credit Control is on a per Rating Group basis. All Service Data Flow (SDFs) belong to a particular Rating Group consume from the quota allocated for that Rating Group.')
tmnxMobProfPolUnitTblLstChgd = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 2, 24), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMobProfPolUnitTblLstChgd.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfPolUnitTblLstChgd.setDescription('The value of tmnxMobProfPolUnitTblLstChgd indicates the sysUpTime at the time of the last modification to tmnxMobProfPolUnitTable by adding, deleting an entry or change to a writable object in the table. If no changes were made to the table since the last re-initialization of the local network management subsystem, then this object contains a zero value.')
tmnxMobProfPolUnitTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 24), )
if mibBuilder.loadTexts: tmnxMobProfPolUnitTable.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfPolUnitTable.setDescription('The tmnxMobProfPolUnitTable has an entry for each policy rule unit profile configured on the system. Policy rule unit profile defines QoS parameters for policy control.')
tmnxMobProfPolUnitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 24, 1), ).setIndexNames((0, "TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfPolUnitName"))
if mibBuilder.loadTexts: tmnxMobProfPolUnitEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfPolUnitEntry.setDescription('Each row entry represents a policy rule unit profile defined in the system. Entries can be created and deleted by the user.')
tmnxMobProfPolUnitName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 24, 1, 1), TmnxMobProfName())
if mibBuilder.loadTexts: tmnxMobProfPolUnitName.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfPolUnitName.setDescription('The value of tmnxMobProfPolUnitName specifies the unique name of this policy rule unit profile.')
tmnxMobProfPolUnitRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 24, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfPolUnitRowStatus.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfPolUnitRowStatus.setDescription('The value of tmnxMobProfPolUnitRowStatus specifies the row status of this entry. It is used for creation and deletion of this policy rule unit profile.')
tmnxMobProfPolUnitLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 24, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMobProfPolUnitLastChanged.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfPolUnitLastChanged.setDescription('The value of tmnxMobProfPolUnitLastChanged indicates the timestamp of the last change to this row in tmnxMobProfPolUnitTable.')
tmnxMobProfPolUnitUplinkGbrRate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 24, 1, 4), TmnxMobProfGbrRate()).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfPolUnitUplinkGbrRate.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfPolUnitUplinkGbrRate.setDescription('The value of tmnxMobProfPolUnitUplinkGbrRate specifies the expected uplink Guaranteed Bit Rate (GBR) provided by the GBR bearer.')
tmnxMobProfPolUnitUplinkMbrRate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 24, 1, 5), TmnxMobProfMbrRate()).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfPolUnitUplinkMbrRate.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfPolUnitUplinkMbrRate.setDescription('The value of tmnxMobProfPolUnitUplinkMbrRate specifies the expected uplink Maximum Bit Rate (MBR) provided by the GBR bearer.')
tmnxMobProfPolUnitDwnlinkGbrRate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 24, 1, 6), TmnxMobProfGbrRate()).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfPolUnitDwnlinkGbrRate.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfPolUnitDwnlinkGbrRate.setDescription('The value of tmnxMobProfPolUnitDwnlinkGbrRate specifies the expected downlink Guaranteed Bit Rate (GBR) provided by the GBR bearer.')
tmnxMobProfPolUnitDwnlinkMbrRate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 24, 1, 7), TmnxMobProfMbrRate()).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfPolUnitDwnlinkMbrRate.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfPolUnitDwnlinkMbrRate.setDescription('The value of tmnxMobProfPolUnitDwnlinkMbrRate specifies the expected downlink Maximum Bit Rate (MBR) provided by the GBR bearer.')
tmnxMobProfPolUntFlwGateStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 24, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("allowUL", 1), ("allowDL", 2), ("allow", 3), ("drop", 4), ("autoRedirect", 5), ("redirect", 6))).clone('allow')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfPolUntFlwGateStatus.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfPolUntFlwGateStatus.setDescription("The value of tmnxMobProfPolUntFlwGateStatus specifies gating behavior associated with the policy rule unit. If the value of this object is set to 'allowUL', then IP packets that match the flow-description entry will be allowed in the uplink direction. If the value of this object is set to 'allowDL', then IP packets that match the flow-description entry will be allowed in the downlink direction. If the value of this object is set to 'allow', then IP packets that match the flow-description entry will be allowed in both the uplink and downlink directions. If the value of this object is set to 'drop', then IP packets that match the flow-description entry will be dropped in both the uplink and downlink directions. If the value of this object is set to 'autoRedirect', then the subscriber's requests will be redirected to a address specified by the online charging server upon credit expiration. If the value of this object is set to 'redirect' then the subscriber's requests will be redirected to the address specified by 'tmnxMobProfPolUntRedirectAddr' upon credit expiration.")
tmnxMobProfPolUntRedirectAdrType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 24, 1, 9), InetAddressType().clone('unknown')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfPolUntRedirectAdrType.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfPolUntRedirectAdrType.setDescription('The value of tmnxMobProfPolUntRedirectAdrType specifies the type of address represented by tmnxMobProfPolUntRedirectAddr.')
tmnxMobProfPolUntRedirectAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 24, 1, 10), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(0, 255)).clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfPolUntRedirectAddr.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfPolUntRedirectAddr.setDescription("The value of tmnxMobProfPolUntRedirectAddr specifies the IP address to redirect the http requests to upon credit expiration, when the value of tmnxMobProfPolUntFlwGateStatus is set to 'redirect'. If the value of the corresponding tmnxMobProfPolUntRedirectAdrType is 'dns', then the IP address will be obtained via DNS A-Record query.")
tmnxMobProfPolUntInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 24, 1, 11), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMobProfPolUntInUse.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfPolUntInUse.setDescription('The value of tmnxMobProfPolUntInUse specifies if this policy rule unit profile is being used by one of the policy profiles.')
tmnxMobProfPolUntRefCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 24, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMobProfPolUntRefCount.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfPolUntRefCount.setDescription('The value of tmnxMobProfPolUntRefCount specifies the number of policy profiles referencing this policy rule unit profile.')
tmnxMobProfChgUnitTblLstChgd = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 2, 25), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMobProfChgUnitTblLstChgd.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfChgUnitTblLstChgd.setDescription('The value of tmnxMobProfChgUnitTblLstChgd indicates the sysUpTime at the time of the last modification to tmnxMobProfChgUnitTable by adding, deleting an entry or change to a writable object in the table. If no changes were made to the table since the last re-initialization of the local network management subsystem, then this object contains a zero value.')
tmnxMobProfChgUnitTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 25), )
if mibBuilder.loadTexts: tmnxMobProfChgUnitTable.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfChgUnitTable.setDescription('The tmnxMobProfChgUnitTable has an entry for each charging rule unit profile configured on the system. Charging rule unit profile defines charging parameters for policy control.')
tmnxMobProfChgUnitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 25, 1), ).setIndexNames((0, "TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfChgUnitName"))
if mibBuilder.loadTexts: tmnxMobProfChgUnitEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfChgUnitEntry.setDescription('Each row entry represents a charging rule unit profile defined in the system. Entries can be created and deleted by the user.')
tmnxMobProfChgUnitName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 25, 1, 1), TmnxMobProfName())
if mibBuilder.loadTexts: tmnxMobProfChgUnitName.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfChgUnitName.setDescription('The value of tmnxMobProfChgUnitName specifies the unique name of this charging rule unit profile.')
tmnxMobProfChgUnitRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 25, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfChgUnitRowStatus.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfChgUnitRowStatus.setDescription('The value of tmnxMobProfChgUnitRowStatus specifies the row status of this entry. It is used for creation and deletion of this charging rule unit profile.')
tmnxMobProfChgUnitLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 25, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMobProfChgUnitLastChanged.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfChgUnitLastChanged.setDescription('The value of tmnxMobProfChgUnitLastChanged indicates the timestamp of the last change to this row in tmnxMobProfChgUnitTable.')
tmnxMobProfChgUnitRatingGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 25, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfChgUnitRatingGroup.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfChgUnitRatingGroup.setDescription('The value of tmnxMobProfChgUnitRatingGroup specifies the rating group (charging key) for the Policy and Charging Control (PCC) rule used for rating.')
tmnxMobProfChgUnitServIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 25, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfChgUnitServIdentifier.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfChgUnitServIdentifier.setDescription('The value of tmnxMobProfChgUnitServIdentifier specifies the service used for the Policy and Charging Control (PCC) rule.')
tmnxMobProfChgUnitReportingLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 25, 1, 6), TmnxMobProfPolReportingLevel().clone('ratingGrp')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfChgUnitReportingLevel.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfChgUnitReportingLevel.setDescription('The value of tmnxMobProfChgUnitReportingLevel specifies the level at which the usage reporting for the Policy and Charging Control (PCC) rule is applicable.')
tmnxMobProfChgUnitChargingMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 25, 1, 7), TmnxMobProfPolChargingMethod().clone('profChargingMtd')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfChgUnitChargingMethod.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfChgUnitChargingMethod.setDescription('The value of tmnxMobProfChgUnitChargingMethod specifies the applicable charging method for the service data flow specified in the Policy and Charging Control (PCC) rule.')
tmnxMobProfChgUnitMeteringMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 25, 1, 8), TmnxMobProfPolMeteringMethod().clone('volBased')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfChgUnitMeteringMethod.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfChgUnitMeteringMethod.setDescription('The value of tmnxMobProfChgUnitMeteringMethod specifies the applicable metering-method for the service data flow specified in the Policy and Charging Control (PCC) rule.')
tmnxMobProfChgUnitInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 25, 1, 9), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMobProfChgUnitInUse.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfChgUnitInUse.setDescription('The value of tmnxMobProfChgUnitInUse specifies if this charging rule unit profile is being used by one of the policy profiles.')
tmnxMobProfChgUnitRefCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 25, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMobProfChgUnitRefCount.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfChgUnitRefCount.setDescription('The value of tmnxMobProfChgUnitRefCount specifies the number of policy profiles referencing this charging rule unit profile.')
tmnxMobProfHTTPRedirctTblLstChgd = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 2, 26), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMobProfHTTPRedirctTblLstChgd.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfHTTPRedirctTblLstChgd.setDescription('The value of tmnxMobProfHTTPRedirctTblLstChgd indicates the sysUpTime at the time of the last modification to tmnxMobProfHTTPRedirectTable by adding, deleting an entry or change to a writable object in the table. If no changes were made to the table since the last re-initialization of the local network management subsystem, then this object contains a zero value.')
tmnxMobProfHTTPRedirectTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 26), )
if mibBuilder.loadTexts: tmnxMobProfHTTPRedirectTable.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfHTTPRedirectTable.setDescription('The tmnxMobProfHTTPRedirectTable has entries for HTTP redirect profiles configured on the system. Each HTTP redirect profile includes multiple policy rule unit profiles which determine the rules to be applied when in re-direct state.')
tmnxMobProfHTTPRedirectEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 26, 1), ).setIndexNames((0, "TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfHttpRedirectName"), (0, "TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfPolUnitName"))
if mibBuilder.loadTexts: tmnxMobProfHTTPRedirectEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfHTTPRedirectEntry.setDescription('Each row entry represents a HTTP redirect profile defined in the system. Entries can be created and deleted by the user.')
tmnxMobProfHttpRedirectName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 26, 1, 1), TmnxMobProfName())
if mibBuilder.loadTexts: tmnxMobProfHttpRedirectName.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfHttpRedirectName.setDescription('The value of tmnxMobProfHttpRedirectName specifies the name of this HTTP redirect policy.')
tmnxMobProfHttpRedirectRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 26, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfHttpRedirectRowStatus.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfHttpRedirectRowStatus.setDescription('The value of tmnxMobProfHttpRedirectRowStatus specifies the row status of this entry. It is used for creation and deletion of this policy profile.')
tmnxMobProfHttpRedirectLstChgd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 26, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMobProfHttpRedirectLstChgd.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfHttpRedirectLstChgd.setDescription('The value of tmnxMobProfHttpRedirectLstChgd indicates the timestamp of the last change to this row in tmnxMobProfHTTPRedirectTable.')
tmnxMobProfHttpRedirctPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 67, 1, 26, 1, 4), TmnxMobStaticPolPrecedenceOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMobProfHttpRedirctPrecedence.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfHttpRedirctPrecedence.setDescription('The value of tmnxMobProfHttpRedirctPrecedence specifies the precedence value of this policy rule unit profile.')
tmnxMobProfV1v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 67, 1, 1)).setObjects(("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfGlobalGroup"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfGroup"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfQciPolicyGroup"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfDiameterGroup"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfChargingGroup"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfGtpPrimeServerGroup"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfUmtsQosPolGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxMobProfV1v0Compliance = tmnxMobProfV1v0Compliance.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxMobProfV1v0Compliance.setDescription('The compliance statement for management of profiles for the mobile gateways on the Alcatel-Lucent 7750 Mobile Gateway systems R1.0.')
tmnxMobProfV3v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 67, 1, 2)).setObjects(("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfGlobalGroup"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfGroup"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfQciPolicyGroup"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfDiameterGroup"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfChargingGroup"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfGtpPrimeServerGroup"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfUmtsQosPolGroup"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfRadiusGroup"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfChargingV3Group"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfDccaGroup"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfGlobalV3Group"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfV3Group"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfPolicyRulesV3Group"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfPmipv6V3Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxMobProfV3v0Compliance = tmnxMobProfV3v0Compliance.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxMobProfV3v0Compliance.setDescription('The compliance statement for management of profiles for the mobile gateways on the Alcatel-Lucent 7750 Mobile Gateway systems R3.0. This compliance statement was made obsolete in the R3.1 release. ')
tmnxMobProf7xxxV10v0Compl = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 67, 1, 3)).setObjects(("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfChargingGroup"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfChargingV3Group"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfDccaGroup"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfDiameterGroup"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfGlobalGroup"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfGlobalV3Group"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfGroup"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfGtpPrimeServerGroup"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfPmipv6V3Group"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfPolicyRulesV31Group"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfPolicyRulesV3Group"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfQciPolicyGroup"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfRadiusGroup"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfUmtsQosPolGroup"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfV3Group"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfUnsupportedGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxMobProf7xxxV10v0Compl = tmnxMobProf7xxxV10v0Compl.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProf7xxxV10v0Compl.setDescription('The compliance statement for management of profiles for the mobile gateways on the Alcatel-Lucent 7750 SROS R10.0.')
tmnxMobProfV4v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 67, 1, 4)).setObjects(("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfChargingGroup"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfChargingV3Group"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfDccaGroup"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfDiameterGroup"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfGlobalGroup"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfGlobalV3Group"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfGroup"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfGtpPrimeServerGroup"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfPmipv6V3Group"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfPolicyRulesV31Group"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfPolicyRulesV3Group"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfQciPolicyGroup"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfRadiusGroup"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfUmtsQosPolGroup"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfV3Group"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfUnsupportedGroup"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfDccaV4v0Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxMobProfV4v0Compliance = tmnxMobProfV4v0Compliance.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfV4v0Compliance.setDescription('The compliance statement for management of profiles for the mobile gateways on the Alcatel-Lucent 7750 Mobile Gateway systems 4.0 release.')
tmnxMobProfGlobalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 67, 2, 1)).setObjects(("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfSysTblLstChgd"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfDiaTblLstChgd"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfDiaPeerTblLstChgd"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfDiaPeerListTblLstChgd"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfGtpTblLstChgd"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfQciPolTblLstChgd"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfQciPolQciTblLstChgd"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfPeerListTblLstChgd"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfPeerListPeerTblLtCgd"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfPolTblLstChgd"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfPolUntFlowTblLstChgd"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfPolBaseTblLstChgd"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfSgwChargingTblLstChgd"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfPgwChargingTblLstChgd"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobGtpPriGrpTblLstChgd"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobGtpPriServerTblLstChgd"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobUmtsQosPolTblLstChgd"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfPmipv6TblLstChgd"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxMobProfGlobalGroup = tmnxMobProfGlobalGroup.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfGlobalGroup.setDescription('The group of global objects supporting management of profiles for the mobile gateways on the Alcatel-Lucent 7750 Mobile Gateway systems.')
tmnxMobProfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 67, 2, 2)).setObjects(("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfSysRowStatus"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfSysLastChanged"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfSysBCLimit"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfSysBCActivtyRate"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfSysBCPdnLimit"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfSysBCUeLimit"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfSysSDFIpv4Limit"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfSysSDFIpv6Limit"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfSysCpuThreshldCriticl"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfSysCpuThreshldMajor"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfSysCpuThreshldMinor"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfSysMemThreshldCriticl"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfSysMemThreshldMajor"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfSysMemThreshldMinor"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfSysSgnlFailThrshldS5"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfSysSgnlFailThrshldS8"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfSysSgnlFailThrshldS11"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfSysSgnlFailThrshldGxc"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfSysTrfcDropThrshldS1u"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfSysTrfcDropThrshldS5"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfSysTrfcDropThrshldS8"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfSysPagingBufferLimit"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfSysPagingBufferSize"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfSysPagingTimeout"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfSysS1BufferLimit"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfSysS1BufferSize"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfGtpRowStatus"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfGtpLastChanged"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfGtpMsgReTxTimeout"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfGtpMsgReTxRetryCnt"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfGtpKeepAlvTimeout"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfGtpKeepAlvRetryCnt"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfGtpKeepAlvResp"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfGtpIpTtl"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfGtpIpDscp"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxMobProfGroup = tmnxMobProfGroup.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfGroup.setDescription('The group of objects supporting management of profiles for the mobile gateways on the Alcatel-Lucent 7750 Mobile Gateway systems.')
tmnxMobProfQciPolicyGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 67, 2, 3)).setObjects(("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfQciPolRowStatus"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfQciPolLastChanged"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfQciPolQciLastChanged"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfQciPolQciDscpPreserve"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfQciPolQciDscp"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfQciPolQciDscpOut"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfQciPolQciFcName"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfQciPolQciProfile"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxMobProfQciPolicyGroup = tmnxMobProfQciPolicyGroup.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfQciPolicyGroup.setDescription('The group of objects supporting management of QCI policies for the mobile gateways on the Alcatel-Lucent 7750 Mobile Gateway systems.')
tmnxMobProfDiameterGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 67, 2, 4)).setObjects(("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfDiaRowStatus"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfDiaLastChanged"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfDiaWatchdgTimer"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfDiaConnTimer"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfDiaTransTimer"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfDiaIpTtl"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfDiaIpDscp"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfDiaDprTimeout"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfDiaPermFailRetryTime"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfDiaDnsRefreshInt"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfDiaPeerRowStatus"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfDiaPeerLastChanged"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfDiaPeerDiaProfName"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfDiaPeerDestRealm"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfDiaPeerTransport"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfDiaPeerLoadBalance"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfDiaPeerIfVRtrId"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfDiaPeerIfIndex"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfDiaPeerApplication"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfDiaPeerListRowStatus"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfDiaPeerListLastChngd"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfDiaPeerListAddrType"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfDiaPeerListAddr"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfDiaPeerListPort"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfDiaPeerAdminState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxMobProfDiameterGroup = tmnxMobProfDiameterGroup.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfDiameterGroup.setDescription('The group of objects supporting management of the diameter profiles for the mobile gateways on the Alcatel-Lucent 7750 Mobile Gateway systems.')
tmnxMobProfUnsupportedGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 67, 2, 5)).setObjects(("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfPlmnListTblLstChgd"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfPlmnListRowStatus"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfSysDescription"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfDiaDescription"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfDiaPeerDescription"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfGtpDescription"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfQciPolDescription"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxMobProfUnsupportedGroup = tmnxMobProfUnsupportedGroup.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfUnsupportedGroup.setDescription('This group of objects is not supported on the Alcatel-Lucent 7750 Mobile Gateway systems.')
tmnxMobProfChargingGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 67, 2, 6)).setObjects(("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfSgwChrgRowStatus"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfSgwChrgLastChanged"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfSgwChrgDesc"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfSgwChrgOffLineState"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfSgwChrgPriCdfDiaPeer"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfSgwChrgSecCdfDiaPeer"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfSgwChrgCitQosChange"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfSgwChrgCitUsrLocChnge"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfSgwChrgCitTrfTimeChng"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfSgwChrgCitTrfTmStart"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfSgwChrgCitTrfTmEnd"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfSgwChrgPrctTimeLmt"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfSgwChrgPrctVolumeLmt"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfSgwChrgPrctMaxChCond"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfSgwChrgPrctMsTmzChnge"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfSgwChrgPrctPlmnChange"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfSgwChrgPrctRatChange"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfSgwChrgPrctMgmtInterv"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfPgwChrgRowStatus"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfPgwChrgLastChanged"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfPgwChrgDesc"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfPgwChrgOffLineState"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfPgwChrgPriCdfDiaPeer"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfPgwChrgSecCdfDiaPeer"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfPgwChrgCitQosChange"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfPgwChrgCitUsrLocChnge"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfPgwChrgCitTrfTimeChng"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfPgwChrgCitTrfTmStart"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfPgwChrgCitTrfTmEnd"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfPgwChrgCitSgwChange"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfPgwChrgCitTimeLmtRg"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfPgwChrgCitVolumeLmtRg"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfPgwChrgCitTermServDf"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfPgwChrgPrctTimeLmt"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfPgwChrgPrctVolumeLmt"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfPgwChrgPrctMaxChCond"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfPgwChrgPrctMsTmzChnge"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfPgwChrgPrctPlmnChange"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfPgwChrgPrctRatChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxMobProfChargingGroup = tmnxMobProfChargingGroup.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfChargingGroup.setDescription('The group of objects supporting management of the charging profiles for the mobile gateways on the Alcatel-Lucent 7750 Mobile Gateway systems.')
tmnxMobProfGtpPrimeServerGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 67, 2, 8)).setObjects(("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobGtpPriGrpRowStatus"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobGtpPriGrpLastChanged"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobGtpPriGrpDescription"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobGtpPriGrpMaxCdrsPerPdu"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobGtpPriGrpDeadtime"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobGtpPriGrpRedirection"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobGtpPriGrpIfVRtrId"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobGtpPriGrpIfIndex"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobGtpPriGrpLocalCdrStorage"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobGtpPriGrpFilePrivateInfo"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobGtpPriGrpFileExtension"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobGtpPriGrpFileClosureSize"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobGtpPriGrpFileClsLifeTime"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobGtpPriGrpFileClsMaxRecs"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobGtpPriGrpFileObsoleteTime"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobGtpPriGrpPrimaryCf"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobGtpPriGrpCf1State"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobGtpPriGrpCf1Limit"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobGtpPriGrpCf2State"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobGtpPriGrpCf2Limit"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobGtpPriGrpCpmMemoryState"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobGtpPriGrpQueueSize"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobGtpPriGrpAdminState"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobGtpPriGrpInactiveTimer"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobGtpPriServerRowStatus"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobGtpPriServerLastChngd"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobGtpPriServerAdminState"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobGtpPriServerAddrType"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobGtpPriServerAddr"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobGtpPriServerPort"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobGtpPriServerRetries"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobGtpPriServerTimeout"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobGtpPriServerEchoInterval"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobGtpPriServerMaxRequests"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobGtpPriServerNodeAlive"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobGtpPriServerPriority"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobGtpPriServerPathProtocol"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxMobProfGtpPrimeServerGroup = tmnxMobProfGtpPrimeServerGroup.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfGtpPrimeServerGroup.setDescription('The group of objects supporting management of the GPRS Tunneling Protocol (GTP) Prime Server Groups for the mobile gateways on the Alcatel-Lucent 7750 Mobile Gateway systems.')
tmnxMobProfUmtsQosPolGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 67, 2, 9)).setObjects(("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobUmtsQosPolRowStatus"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobUmtsQosPolLastChanged"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobUmtsQosPolConvSpeechQci"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobUmtsQosPolConvUnkTdg"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobUmtsQosPolConvUnkTdl"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobUmtsQosPolStreamQciValue"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobUmtsQosPolInterSigP1Qci"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobUmtsQosPolInterP1Qci"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobUmtsQosPolInterP2Qci"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobUmtsQosPolInterP3Qci"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobUmtsQosPolBackground"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxMobProfUmtsQosPolGroup = tmnxMobProfUmtsQosPolGroup.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfUmtsQosPolGroup.setDescription('The group of objects supporting management of the Universal Mobile Telecommunications System (UMTS) Quality of Service (QoS) Policy for the mobile gateways on the Alcatel-Lucent 7750 Mobile Gateway systems.')
tmnxMobProfRadiusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 67, 2, 10)).setObjects(("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfRadRowStatus"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfRadLastChanged"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfRadDescription"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfRadAuthProbeInt"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfRadServerDeadTime"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfRadRetryTimeout"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfRadRetryCount"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfRadGrpRowStatus"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfRadGrpLastChanged"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfRadGrpDescription"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfRadGrpIfVRtrId"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfRadGrpIfIndex"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfRadGrpAuthServerPort"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfRadGrpAcctServerPort"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfRadGrpSecret"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfRadGrpIntUpdateIntvl"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfRadGrpServerType"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfRadGrpRadiusProfile"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfRadGrpIgnAcctResp"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfRadPeerRowStatus"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfRadPeerLastChngd"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfRadPeerAdminState"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfRadPeerAddrType"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfRadPeerAddr"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfRadPeerPriority"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfRadPeerAuthSvrPort"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfRadPeerAcctSvrPort"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfRadPeerSecret"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfRadPeerRadProfile"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxMobProfRadiusGroup = tmnxMobProfRadiusGroup.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfRadiusGroup.setDescription('The group of objects supporting management of the radius profiles for the mobile gateways on the Alcatel 7750 series systems.')
tmnxMobProfChargingV3Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 67, 2, 11)).setObjects(("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfPgwChrgGyState"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfPgwGyPriOcsDiaPeer"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfPgwGySecOcsDiaPeer"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfPgwGyDccaProf"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfPgwChrgPrctSrvNdChLmt"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfSgwChrgPrctSrvNdChLmt"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxMobProfChargingV3Group = tmnxMobProfChargingV3Group.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfChargingV3Group.setDescription('The group of objects supporting management of the charging profiles for the mobile gateways on the Alcatel-Lucent 7750 Mobile Gateway systems in 3.0 release.')
tmnxMobProfDccaGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 67, 2, 12)).setObjects(("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfDccaRowStatus"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfDccaLastChanged"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfDccaDescription"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfDccaApplTxTimer"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfDccaRetryCnt"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfDcca3GppQosNegProf"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfDccaQosInformation"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfDccaCalledStationId"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfDccaCcSessFailover"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfDccaCcSessFlovrHndl"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfDccaForcedReAuth"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfDccaQuotaExNoThrsld"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfDccaQuotaExThrsldAct"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfDccaQuotaUnavail"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfDccaRatingCondtChng"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfDccaValidityTimeExp"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxMobProfDccaGroup = tmnxMobProfDccaGroup.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfDccaGroup.setDescription('The group of objects supporting management of the Diameter Credit Control Application (DCCA) profiles for the mobile gateways on the Alcatel-Lucent 7750 Mobile Gateway systems.')
tmnxMobProfGlobalV3Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 67, 2, 13)).setObjects(("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfDccaTblLstChgd"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfRadTblLstChgd"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfRadGrpTblLstChgd"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfRadPeerTblLstChgd"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfPolUnitTblLstChgd"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfChgUnitTblLstChgd"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfHTTPRedirctTblLstChgd"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxMobProfGlobalV3Group = tmnxMobProfGlobalV3Group.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfGlobalV3Group.setDescription('The group of global objects supporting management of profiles for the mobile gateways on the Alcatel-Lucent 7750 Mobile Gateway systems in 3.0 release.')
tmnxMobProfV3Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 67, 2, 14)).setObjects(("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfPeerListRowStatus"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfPeerListLastChanged"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfPeerListDescription"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfPeerListPeerRowStatus"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfPeerListPeerLastChgd"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfPeerListPeerDesc"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfPeerListPeerKeepAlive"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfPeerListPeerAdmnState"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfPeerListPeerRatType"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfPeerListPeerForeign"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfPeerListPeerPlmnMcc"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfPeerListPeerPlmnMnc"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxMobProfV3Group = tmnxMobProfV3Group.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfV3Group.setDescription('The group of objects supporting management of profiles for the mobile gateways on the Alcatel-Lucent 7750 Mobile Gateway systems in 3.0 release.')
tmnxMobProfPolicyRulesV3Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 67, 2, 15)).setObjects(("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfPolRowStatus"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfPolLastChanged"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfPolRuleUnitName"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfChgRuleUnitName"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfPolQciValue"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfPolArpValue"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfPolUntFlwRowStatus"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfPolUntFlwLastChanged"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfPolUntFlwDirection"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfPolUntFlwMatchPrtcl"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfPolUntFlwLclAddrType"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfPolUntFlwLclAddr"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfPolUntFlwLclPrefixLen"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfPolUntFlwRmtAddrType"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfPolUntFlwRmtAddr"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfPolUntFlwRmtPrefixLen"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfPolUntFlwLclPortVal1"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfPolUntFlwLclPortVal2"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfPolUntFlwLclPortOper"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfPolUntFlwRmtPortVal1"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfPolUntFlwRmtPortVal2"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfPolUntFlwRmtPortOper"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfPolBaseRowStatus"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfPolBaseLastChanged"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfPolBasePrecedence"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfPolBasePreActivate"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfPolUnitRowStatus"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfPolUnitLastChanged"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfPolUnitUplinkGbrRate"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfPolUnitUplinkMbrRate"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfPolUnitDwnlinkGbrRate"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfPolUnitDwnlinkMbrRate"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfPolUntFlwGateStatus"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfChgUnitRowStatus"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfChgUnitLastChanged"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfChgUnitRatingGroup"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfChgUnitServIdentifier"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfChgUnitReportingLevel"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfChgUnitChargingMethod"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfChgUnitMeteringMethod"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfPolPrecedence"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfHttpRedirectRowStatus"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfHttpRedirectLstChgd"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfPolUntRedirectAdrType"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfPolUntRedirectAddr"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfPolUntFlwAaApp"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfHttpRedirctPrecedence"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfPolUntInUse"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfPolUntRefCount"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfPolInUse"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfPolRefCount"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfChgUnitInUse"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfChgUnitRefCount"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfPolBaseInUse"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfPolBaseRefCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxMobProfPolicyRulesV3Group = tmnxMobProfPolicyRulesV3Group.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfPolicyRulesV3Group.setDescription('The group of objects supporting management of static policy rules for the mobile gateways on the Alcatel-Lucent 7750 Mobile Gateway systems in 3.0 release.')
tmnxMobProfPmipv6V3Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 67, 2, 16)).setObjects(("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfPmipv6RowStatus"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfPmipv6LastChanged"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfPmipv6Description"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfPmipv6MsgReTxTimeout"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfPmipv6MsgReTxRetryCnt"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfPmipv6KeepAlvTimeout"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfPmipv6KeepAlvRetryCnt"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfPmipv6IpTtl"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfPmipv6IpDscp"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfPmipv6KeepAlvIntvl"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxMobProfPmipv6V3Group = tmnxMobProfPmipv6V3Group.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfPmipv6V3Group.setDescription('The group of objects supporting management of PMIPv6 profiles for the mobile gateways on the Alcatel-Lucent 7750 Mobile Gateway systems in 3.0 release.')
tmnxMobProfileObsoletedGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 67, 2, 17)).setObjects(("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfSgwChrgCitSgwChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxMobProfileObsoletedGroup = tmnxMobProfileObsoletedGroup.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfileObsoletedGroup.setDescription('The group of obsoleted objects which are no longer supported in the 3.0 release on the Alcatel-Lucent 7750 Mobile Gateway Systems.')
tmnxMobProfPolicyRulesV31Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 67, 2, 18)).setObjects(("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfPolBaseConfRefCount"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfPolConfRefCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxMobProfPolicyRulesV31Group = tmnxMobProfPolicyRulesV31Group.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfPolicyRulesV31Group.setDescription('The group of objects supporting management of static policy rules for the mobile gateways on the Alcatel-Lucent 7750 Mobile Gateway systems in 3.1 release.')
tmnxMobProfDccaV4v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 67, 2, 19)).setObjects(("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfDccaFhSessContTimer"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfDccaDefaultQht"), ("TIMETRA-MOBILE-PROFILE-MIB", "tmnxMobProfDccaFirstPktBehavior"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxMobProfDccaV4v0Group = tmnxMobProfDccaV4v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxMobProfDccaV4v0Group.setDescription('The group of objects supporting management of the Diameter Credit Control Application (DCCA) profiles for the mobile gateways on the Alcatel-Lucent 7750 Mobile Gateway systems in 4.0 release.')
mibBuilder.exportSymbols("TIMETRA-MOBILE-PROFILE-MIB", tmnxMobGtpPriGrpMaxCdrsPerPdu=tmnxMobGtpPriGrpMaxCdrsPerPdu, tmnxMobProfRadPeerAddr=tmnxMobProfRadPeerAddr, tmnxMobProfPgwChrgPrctMaxChCond=tmnxMobProfPgwChrgPrctMaxChCond, tmnxMobProfileObjs=tmnxMobProfileObjs, tmnxMobProfSgwChrgPriCdfDiaPeer=tmnxMobProfSgwChrgPriCdfDiaPeer, tmnxMobProfDiaPermFailRetryTime=tmnxMobProfDiaPermFailRetryTime, tmnxMobProfRadPeerRadProfile=tmnxMobProfRadPeerRadProfile, tmnxMobProfPolRuleUnitName=tmnxMobProfPolRuleUnitName, tmnxMobProfQciPolLastChanged=tmnxMobProfQciPolLastChanged, tmnxMobProfGtpTable=tmnxMobProfGtpTable, tmnxMobProfSysBCLimit=tmnxMobProfSysBCLimit, tmnxMobProfQciPolicyGroup=tmnxMobProfQciPolicyGroup, tmnxMobProfPmipv6Table=tmnxMobProfPmipv6Table, tmnxMobProfPeerListTblLstChgd=tmnxMobProfPeerListTblLstChgd, tmnxMobProfPgwChrgPrctPlmnChange=tmnxMobProfPgwChrgPrctPlmnChange, tmnxMobProfSysDescription=tmnxMobProfSysDescription, tmnxMobProfChgUnitMeteringMethod=tmnxMobProfChgUnitMeteringMethod, tmnxMobProfRadGrpDescription=tmnxMobProfRadGrpDescription, tmnxMobGtpPriServerAddrType=tmnxMobGtpPriServerAddrType, tmnxMobProfChgUnitLastChanged=tmnxMobProfChgUnitLastChanged, tmnxMobProfPeerListPeerEntry=tmnxMobProfPeerListPeerEntry, tmnxMobProfPeerListLastChanged=tmnxMobProfPeerListLastChanged, tmnxMobProfPeerListPeerAdmnState=tmnxMobProfPeerListPeerAdmnState, tmnxMobProfDccaCalledStationId=tmnxMobProfDccaCalledStationId, tmnxMobProfDiaLastChanged=tmnxMobProfDiaLastChanged, tmnxMobProfDiaPeerListTblLstChgd=tmnxMobProfDiaPeerListTblLstChgd, tmnxMobProfPolUnitLastChanged=tmnxMobProfPolUnitLastChanged, tmnxMobProfDiaPeerListIndex=tmnxMobProfDiaPeerListIndex, tmnxMobProfPolUntRedirectAdrType=tmnxMobProfPolUntRedirectAdrType, tmnxMobUmtsQosPolInterP1Qci=tmnxMobUmtsQosPolInterP1Qci, tmnxMobProfDccaDefaultQht=tmnxMobProfDccaDefaultQht, tmnxMobProfDccaFhSessContTimer=tmnxMobProfDccaFhSessContTimer, tmnxMobProfPolUntFlwId=tmnxMobProfPolUntFlwId, tmnxMobProfPeerListTable=tmnxMobProfPeerListTable, tmnxMobProfGtpEntry=tmnxMobProfGtpEntry, tmnxMobProfPolUnitUplinkMbrRate=tmnxMobProfPolUnitUplinkMbrRate, tmnxMobProfGtpName=tmnxMobProfGtpName, tmnxMobProfPolUntFlwRmtPortVal2=tmnxMobProfPolUntFlwRmtPortVal2, tmnxMobProfGtpMsgReTxRetryCnt=tmnxMobProfGtpMsgReTxRetryCnt, tmnxMobProfRadPeerPriority=tmnxMobProfRadPeerPriority, tmnxMobGtpPriServerLastChngd=tmnxMobGtpPriServerLastChngd, tmnxMobProfHTTPRedirectEntry=tmnxMobProfHTTPRedirectEntry, tmnxMobProfPgwChargingEntry=tmnxMobProfPgwChargingEntry, tmnxMobProfPolUntFlwLclPortVal1=tmnxMobProfPolUntFlwLclPortVal1, tmnxMobProfGtpLastChanged=tmnxMobProfGtpLastChanged, tmnxMobProfPolBaseTable=tmnxMobProfPolBaseTable, tmnxMobProfPmipv6Name=tmnxMobProfPmipv6Name, tmnxMobProfQciPolQciDscpPreserve=tmnxMobProfQciPolQciDscpPreserve, tmnxMobProfSysS1BufferSize=tmnxMobProfSysS1BufferSize, tmnxMobProfSgwChrgCitTrfTmStart=tmnxMobProfSgwChrgCitTrfTmStart, tmnxMobProfSgwChrgCitSgwChange=tmnxMobProfSgwChrgCitSgwChange, tmnxMobUmtsQosPolRowStatus=tmnxMobUmtsQosPolRowStatus, tmnxMobProfDiaTable=tmnxMobProfDiaTable, tmnxMobGtpPriServerTable=tmnxMobGtpPriServerTable, tmnxMobProfSgwChrgPrctMgmtInterv=tmnxMobProfSgwChrgPrctMgmtInterv, tmnxMobProfPeerListPeerForeign=tmnxMobProfPeerListPeerForeign, tmnxMobProfHTTPRedirctTblLstChgd=tmnxMobProfHTTPRedirctTblLstChgd, tmnxMobProfPgwChrgCitTrfTmStart=tmnxMobProfPgwChrgCitTrfTmStart, tmnxMobProfSgwChrgSecCdfDiaPeer=tmnxMobProfSgwChrgSecCdfDiaPeer, tmnxMobProfDccaV4v0Group=tmnxMobProfDccaV4v0Group, tmnxMobProfDccaLastChanged=tmnxMobProfDccaLastChanged, tmnxMobProfPolConfRefCount=tmnxMobProfPolConfRefCount, tmnxMobProfChgUnitServIdentifier=tmnxMobProfChgUnitServIdentifier, tmnxMobProfDiaConnTimer=tmnxMobProfDiaConnTimer, tmnxMobGtpPriGrpFilePrivateInfo=tmnxMobGtpPriGrpFilePrivateInfo, tmnxMobProfQciPolQciLastChanged=tmnxMobProfQciPolQciLastChanged, tmnxMobProfPolUnitDwnlinkGbrRate=tmnxMobProfPolUnitDwnlinkGbrRate, tmnxMobGtpPriServerRowStatus=tmnxMobGtpPriServerRowStatus, tmnxMobProfGtpIpDscp=tmnxMobProfGtpIpDscp, tmnxMobUmtsQosPolInterSigP1Qci=tmnxMobUmtsQosPolInterSigP1Qci, tmnxMobProfPgwChrgSecCdfDiaPeer=tmnxMobProfPgwChrgSecCdfDiaPeer, tmnxMobProfPolBaseEntry=tmnxMobProfPolBaseEntry, tmnxMobProfQciPolQciEntry=tmnxMobProfQciPolQciEntry, tmnxMobProfRadRetryCount=tmnxMobProfRadRetryCount, timetraMobProfileMIBModule=timetraMobProfileMIBModule, tmnxMobProfPolicyRulesV3Group=tmnxMobProfPolicyRulesV3Group, tmnxMobProfGtpIpTtl=tmnxMobProfGtpIpTtl, tmnxMobProfRadGrpName=tmnxMobProfRadGrpName, tmnxMobGtpPriServerTblLstChgd=tmnxMobGtpPriServerTblLstChgd, tmnxMobProfQciPolQciValue=tmnxMobProfQciPolQciValue, tmnxMobProfQciPolQciFcName=tmnxMobProfQciPolQciFcName, tmnxMobProfPgwChrgLastChanged=tmnxMobProfPgwChrgLastChanged, tmnxMobProfDiaPeerRowStatus=tmnxMobProfDiaPeerRowStatus, tmnxMobProfSysSgnlFailThrshldS8=tmnxMobProfSysSgnlFailThrshldS8, tmnxMobProfDiaRowStatus=tmnxMobProfDiaRowStatus, tmnxMobProfV1v0Compliance=tmnxMobProfV1v0Compliance, tmnxMobProfDccaApplTxTimer=tmnxMobProfDccaApplTxTimer, tmnxMobProfHttpRedirctPrecedence=tmnxMobProfHttpRedirctPrecedence, tmnxMobProfGtpPrimeServerGroup=tmnxMobProfGtpPrimeServerGroup, tmnxMobProfChgUnitRatingGroup=tmnxMobProfChgUnitRatingGroup, tmnxMobProfSysName=tmnxMobProfSysName, tmnxMobProfRadTblLstChgd=tmnxMobProfRadTblLstChgd, tmnxMobProfPolUntFlwTable=tmnxMobProfPolUntFlwTable, tmnxMobProfSysMemThreshldMinor=tmnxMobProfSysMemThreshldMinor, tmnxMobProfSysBCPdnLimit=tmnxMobProfSysBCPdnLimit, tmnxMobProfPolBaseRefCount=tmnxMobProfPolBaseRefCount, tmnxMobProfDiaPeerListAddrType=tmnxMobProfDiaPeerListAddrType, tmnxMobProfPmipv6RowStatus=tmnxMobProfPmipv6RowStatus, tmnxMobProfDiaPeerDestRealm=tmnxMobProfDiaPeerDestRealm, tmnxMobGtpPriGrpName=tmnxMobGtpPriGrpName, tmnxMobProfHttpRedirectName=tmnxMobProfHttpRedirectName, tmnxMobProfSysEntry=tmnxMobProfSysEntry, tmnxMobProfV3v0Compliance=tmnxMobProfV3v0Compliance, tmnxMobProfDiaEntry=tmnxMobProfDiaEntry, tmnxMobUmtsQosPolInterP2Qci=tmnxMobUmtsQosPolInterP2Qci, tmnxMobProfDccaQosInformation=tmnxMobProfDccaQosInformation, tmnxMobProfDiaDprTimeout=tmnxMobProfDiaDprTimeout, tmnxMobProfSgwChrgPrctMsTmzChnge=tmnxMobProfSgwChrgPrctMsTmzChnge, tmnxMobGtpPriServerPriority=tmnxMobGtpPriServerPriority, tmnxMobProfSysPagingBufferSize=tmnxMobProfSysPagingBufferSize, tmnxMobProfChargingGroup=tmnxMobProfChargingGroup, tmnxMobProfPeerListPeerAddrType=tmnxMobProfPeerListPeerAddrType, tmnxMobProfSysCpuThreshldMinor=tmnxMobProfSysCpuThreshldMinor, tmnxMobProfPmipv6KeepAlvRetryCnt=tmnxMobProfPmipv6KeepAlvRetryCnt, tmnxMobProfDiameterGroup=tmnxMobProfDiameterGroup, tmnxMobGtpPriGrpFileClsMaxRecs=tmnxMobGtpPriGrpFileClsMaxRecs, tmnxMobGtpPriGrpCf1State=tmnxMobGtpPriGrpCf1State, tmnxMobProfPolTable=tmnxMobProfPolTable, tmnxMobProfDiaPeerName=tmnxMobProfDiaPeerName, tmnxMobUmtsQosPolInterP3Qci=tmnxMobUmtsQosPolInterP3Qci, tmnxMobGtpPriServerPort=tmnxMobGtpPriServerPort, TmnxMobProfAllowDiscard=TmnxMobProfAllowDiscard, TmnxMobProfKeepAliveRetryCount=TmnxMobProfKeepAliveRetryCount, tmnxMobProfSysMemThreshldCriticl=tmnxMobProfSysMemThreshldCriticl, tmnxMobProfQciPolQciProfile=tmnxMobProfQciPolQciProfile, tmnxMobProfPolUntFlwLclPortOper=tmnxMobProfPolUntFlwLclPortOper, tmnxMobProfSysS1BufferLimit=tmnxMobProfSysS1BufferLimit, tmnxMobProfPgwChrgPriCdfDiaPeer=tmnxMobProfPgwChrgPriCdfDiaPeer, tmnxMobProfRadGrpTblLstChgd=tmnxMobProfRadGrpTblLstChgd, tmnxMobProfQciPolQciTable=tmnxMobProfQciPolQciTable, tmnxMobProfPolInUse=tmnxMobProfPolInUse, tmnxMobProfSysSDFIpv4Limit=tmnxMobProfSysSDFIpv4Limit, tmnxMobProfQciPolQciDscp=tmnxMobProfQciPolQciDscp, tmnxMobProfRadPeerIndex=tmnxMobProfRadPeerIndex, tmnxMobProfPolUntFlwRmtPrefixLen=tmnxMobProfPolUntFlwRmtPrefixLen, tmnxMobProfPgwChrgRowStatus=tmnxMobProfPgwChrgRowStatus, tmnxMobGtpPriGrpAdminState=tmnxMobGtpPriGrpAdminState, TmnxMobProfThreshold=TmnxMobProfThreshold, tmnxMobProfDccaRatingCondtChng=tmnxMobProfDccaRatingCondtChng, tmnxMobProfPmipv6TblLstChgd=tmnxMobProfPmipv6TblLstChgd, tmnxMobGtpPriServerNodeAlive=tmnxMobGtpPriServerNodeAlive, tmnxMobProfPolBasePrecedence=tmnxMobProfPolBasePrecedence, tmnxMobProfPlmnListMcc=tmnxMobProfPlmnListMcc, tmnxMobProfSysTable=tmnxMobProfSysTable, tmnxMobProfRadGrpIntUpdateIntvl=tmnxMobProfRadGrpIntUpdateIntvl, tmnxMobProfile=tmnxMobProfile, tmnxMobProfPeerListPeerPlmnMcc=tmnxMobProfPeerListPeerPlmnMcc, tmnxMobProfPmipv6V3Group=tmnxMobProfPmipv6V3Group, tmnxMobProfPolUntFlwRmtAddr=tmnxMobProfPolUntFlwRmtAddr, tmnxMobProfRadGrpIfIndex=tmnxMobProfRadGrpIfIndex, tmnxMobProfileConformance=tmnxMobProfileConformance, tmnxMobGtpPriGrpQueueSize=tmnxMobGtpPriGrpQueueSize, tmnxMobProfDiaPeerListEntry=tmnxMobProfDiaPeerListEntry, tmnxMobProfSgwChrgPrctMaxChCond=tmnxMobProfSgwChrgPrctMaxChCond, tmnxMobUmtsQosPolConvSpeechQci=tmnxMobUmtsQosPolConvSpeechQci, tmnxMobProfDiaPeerIfVRtrId=tmnxMobProfDiaPeerIfVRtrId, tmnxMobProfRadGrpSecret=tmnxMobProfRadGrpSecret, TmnxMobProfKeepAliveTimeout=TmnxMobProfKeepAliveTimeout, tmnxMobProfQciPolDescription=tmnxMobProfQciPolDescription, tmnxMobGtpPriGrpCf2State=tmnxMobGtpPriGrpCf2State, tmnxMobProfPolBaseName=tmnxMobProfPolBaseName, tmnxMobProfPgwChrgCitTrfTmEnd=tmnxMobProfPgwChrgCitTrfTmEnd, tmnxMobProfRadLastChanged=tmnxMobProfRadLastChanged, tmnxMobProfPolUnitRowStatus=tmnxMobProfPolUnitRowStatus, tmnxMobProfPolUnitEntry=tmnxMobProfPolUnitEntry, tmnxMobProfDiaDescription=tmnxMobProfDiaDescription, tmnxMobProfPgwChrgOffLineState=tmnxMobProfPgwChrgOffLineState, tmnxMobProfPolUntInUse=tmnxMobProfPolUntInUse, tmnxMobProfPgwChrgId=tmnxMobProfPgwChrgId, tmnxMobGtpPriGrpPrimaryCf=tmnxMobGtpPriGrpPrimaryCf, tmnxMobProfChgUnitRefCount=tmnxMobProfChgUnitRefCount, tmnxMobProfPolTblLstChgd=tmnxMobProfPolTblLstChgd, tmnxMobProfRadGrpIfVRtrId=tmnxMobProfRadGrpIfVRtrId, tmnxMobProfRadEntry=tmnxMobProfRadEntry, tmnxMobProfPolLastChanged=tmnxMobProfPolLastChanged, tmnxMobProfPgwChrgPrctMsTmzChnge=tmnxMobProfPgwChrgPrctMsTmzChnge, tmnxMobProfDiaPeerListTable=tmnxMobProfDiaPeerListTable, tmnxMobProfPolUntFlwMatchPrtcl=tmnxMobProfPolUntFlwMatchPrtcl, TmnxMobProfMsgReTxTimeout=TmnxMobProfMsgReTxTimeout, tmnxMobProfSysSDFIpv6Limit=tmnxMobProfSysSDFIpv6Limit, tmnxMobUmtsQosPolLastChanged=tmnxMobUmtsQosPolLastChanged, tmnxMobProfSysSgnlFailThrshldGxc=tmnxMobProfSysSgnlFailThrshldGxc, tmnxMobProfGlobalGroup=tmnxMobProfGlobalGroup, PYSNMP_MODULE_ID=timetraMobProfileMIBModule, tmnxMobProfSgwChrgPrctPlmnChange=tmnxMobProfSgwChrgPrctPlmnChange, tmnxMobProfPgwChrgPrctTimeLmt=tmnxMobProfPgwChrgPrctTimeLmt, tmnxMobGtpPriGrpLastChanged=tmnxMobGtpPriGrpLastChanged, tmnxMobProfPeerListPeerTblLtCgd=tmnxMobProfPeerListPeerTblLtCgd, tmnxMobProfPlmnListRowStatus=tmnxMobProfPlmnListRowStatus, tmnxMobProfPgwChargingTable=tmnxMobProfPgwChargingTable, tmnxMobProfPolBaseInUse=tmnxMobProfPolBaseInUse, tmnxMobProfPeerListName=tmnxMobProfPeerListName, tmnxMobProfRadGrpTable=tmnxMobProfRadGrpTable, tmnxMobProfPolUntFlwRmtPortVal1=tmnxMobProfPolUntFlwRmtPortVal1, tmnxMobProfSgwChargingTable=tmnxMobProfSgwChargingTable, tmnxMobProfSgwChrgCitUsrLocChnge=tmnxMobProfSgwChrgCitUsrLocChnge, tmnxMobProfRadPeerLastChngd=tmnxMobProfRadPeerLastChngd, tmnxMobGtpPriServerEchoInterval=tmnxMobGtpPriServerEchoInterval, tmnxMobProfGtpKeepAlvTimeout=tmnxMobProfGtpKeepAlvTimeout, tmnxMobProfRadPeerAuthSvrPort=tmnxMobProfRadPeerAuthSvrPort, tmnxMobProfDccaDescription=tmnxMobProfDccaDescription, tmnxMobProfPolUntFlwLastChanged=tmnxMobProfPolUntFlwLastChanged, tmnxMobProfPmipv6LastChanged=tmnxMobProfPmipv6LastChanged, tmnxMobProfSgwChrgPrctRatChange=tmnxMobProfSgwChrgPrctRatChange, tmnxMobProf7xxxV10v0Compl=tmnxMobProf7xxxV10v0Compl, tmnxMobProfSgwChrgId=tmnxMobProfSgwChrgId, tmnxMobProfSgwChrgCitTrfTmEnd=tmnxMobProfSgwChrgCitTrfTmEnd, tmnxMobProfPlmnListEntry=tmnxMobProfPlmnListEntry, tmnxMobProfRadServerDeadTime=tmnxMobProfRadServerDeadTime, tmnxMobProfPolBaseTblLstChgd=tmnxMobProfPolBaseTblLstChgd, tmnxMobGtpPriGrpRowStatus=tmnxMobGtpPriGrpRowStatus, tmnxMobGtpPriServerIndex=tmnxMobGtpPriServerIndex, tmnxMobProfPeerListPeerTable=tmnxMobProfPeerListPeerTable, tmnxMobProfPolUntFlowTblLstChgd=tmnxMobProfPolUntFlowTblLstChgd, tmnxMobProfChgUnitChargingMethod=tmnxMobProfChgUnitChargingMethod, tmnxMobProfPgwGyDccaProf=tmnxMobProfPgwGyDccaProf, tmnxMobProfRadPeerEntry=tmnxMobProfRadPeerEntry, tmnxMobProfRadPeerTable=tmnxMobProfRadPeerTable, tmnxMobProfDiaPeerLastChanged=tmnxMobProfDiaPeerLastChanged, tmnxMobProfChargingV3Group=tmnxMobProfChargingV3Group, tmnxMobProfRadGrpRowStatus=tmnxMobProfRadGrpRowStatus, tmnxMobGtpPriGrpRedirection=tmnxMobGtpPriGrpRedirection, tmnxMobGtpPriGrpFileExtension=tmnxMobGtpPriGrpFileExtension, tmnxMobProfChgUnitName=tmnxMobProfChgUnitName, tmnxMobProfDiaPeerIfIndex=tmnxMobProfDiaPeerIfIndex, tmnxMobProfPmipv6KeepAlvIntvl=tmnxMobProfPmipv6KeepAlvIntvl, tmnxMobProfPeerListPeerPrefixLen=tmnxMobProfPeerListPeerPrefixLen, tmnxMobGtpPriGrpTblLstChgd=tmnxMobGtpPriGrpTblLstChgd, tmnxMobProfPolUntFlwRowStatus=tmnxMobProfPolUntFlwRowStatus, tmnxMobProfQciPolQciArpValue=tmnxMobProfQciPolQciArpValue, tmnxMobProfSysCpuThreshldCriticl=tmnxMobProfSysCpuThreshldCriticl, tmnxMobProfDccaName=tmnxMobProfDccaName, tmnxMobProfGtpTblLstChgd=tmnxMobProfGtpTblLstChgd, tmnxMobProfDccaCcSessFlovrHndl=tmnxMobProfDccaCcSessFlovrHndl, tmnxMobProfPolUntRedirectAddr=tmnxMobProfPolUntRedirectAddr, tmnxMobProfileObsoletedGroup=tmnxMobProfileObsoletedGroup, tmnxMobProfRadGrpEntry=tmnxMobProfRadGrpEntry, tmnxMobProfSysSgnlFailThrshldS5=tmnxMobProfSysSgnlFailThrshldS5, tmnxMobProfRadAuthProbeInt=tmnxMobProfRadAuthProbeInt, tmnxMobProfPgwChrgCitSgwChange=tmnxMobProfPgwChrgCitSgwChange, tmnxMobProfChgUnitTable=tmnxMobProfChgUnitTable, tmnxMobProfPolUnitName=tmnxMobProfPolUnitName, tmnxMobProfDiaPeerEntry=tmnxMobProfDiaPeerEntry, tmnxMobProfQciPolTblLstChgd=tmnxMobProfQciPolTblLstChgd, tmnxMobUmtsQosPolName=tmnxMobUmtsQosPolName, tmnxMobProfGroup=tmnxMobProfGroup, tmnxMobUmtsQosPolEntry=tmnxMobUmtsQosPolEntry, tmnxMobProfRadGrpServerType=tmnxMobProfRadGrpServerType, tmnxMobProfDiaPeerTblLstChgd=tmnxMobProfDiaPeerTblLstChgd, tmnxMobProfDccaForcedReAuth=tmnxMobProfDccaForcedReAuth, tmnxMobProfSgwChrgPrctSrvNdChLmt=tmnxMobProfSgwChrgPrctSrvNdChLmt, TmnxMobProfMsgReTxRetryCount=TmnxMobProfMsgReTxRetryCount, tmnxMobProfRadPeerRowStatus=tmnxMobProfRadPeerRowStatus, tmnxMobProfDiaIpDscp=tmnxMobProfDiaIpDscp)
mibBuilder.exportSymbols("TIMETRA-MOBILE-PROFILE-MIB", tmnxMobProfQciPolTable=tmnxMobProfQciPolTable, tmnxMobProfSysTblLstChgd=tmnxMobProfSysTblLstChgd, tmnxMobProfPolBasePreActivate=tmnxMobProfPolBasePreActivate, tmnxMobProfPgwChrgCitTermServDf=tmnxMobProfPgwChrgCitTermServDf, tmnxMobProfPolEntry=tmnxMobProfPolEntry, tmnxMobProfChgUnitRowStatus=tmnxMobProfChgUnitRowStatus, tmnxMobProfPolUnitUplinkGbrRate=tmnxMobProfPolUnitUplinkGbrRate, tmnxMobProfPeerListPeerDesc=tmnxMobProfPeerListPeerDesc, tmnxMobProfSgwChrgCitQosChange=tmnxMobProfSgwChrgCitQosChange, tmnxMobGtpPriGrpCf2Limit=tmnxMobGtpPriGrpCf2Limit, tmnxMobProfPolPrecedence=tmnxMobProfPolPrecedence, tmnxMobUmtsQosPolTblLstChgd=tmnxMobUmtsQosPolTblLstChgd, tmnxMobGtpPriGrpFileClosureSize=tmnxMobGtpPriGrpFileClosureSize, tmnxMobProfDiaTblLstChgd=tmnxMobProfDiaTblLstChgd, tmnxMobProfRadDescription=tmnxMobProfRadDescription, tmnxMobProfPolUnitTable=tmnxMobProfPolUnitTable, tmnxMobGtpPriServerMaxRequests=tmnxMobGtpPriServerMaxRequests, tmnxMobProfPgwChrgPrctVolumeLmt=tmnxMobProfPgwChrgPrctVolumeLmt, tmnxMobProfileGlobalObjs=tmnxMobProfileGlobalObjs, tmnxMobProfPolArpValue=tmnxMobProfPolArpValue, tmnxMobProfPolUntRefCount=tmnxMobProfPolUntRefCount, tmnxMobProfPolUnitTblLstChgd=tmnxMobProfPolUnitTblLstChgd, tmnxMobProfPmipv6Entry=tmnxMobProfPmipv6Entry, tmnxMobProfPolUnitDwnlinkMbrRate=tmnxMobProfPolUnitDwnlinkMbrRate, tmnxMobProfSysPagingTimeout=tmnxMobProfSysPagingTimeout, tmnxMobProfDccaFirstPktBehavior=tmnxMobProfDccaFirstPktBehavior, tmnxMobProfGtpDescription=tmnxMobProfGtpDescription, tmnxMobProfSgwChrgRowStatus=tmnxMobProfSgwChrgRowStatus, tmnxMobProfDccaTblLstChgd=tmnxMobProfDccaTblLstChgd, tmnxMobProfRadGrpAcctServerPort=tmnxMobProfRadGrpAcctServerPort, tmnxMobProfSysTrfcDropThrshldS8=tmnxMobProfSysTrfcDropThrshldS8, tmnxMobProfPmipv6Description=tmnxMobProfPmipv6Description, tmnxMobProfPmipv6IpDscp=tmnxMobProfPmipv6IpDscp, tmnxMobProfPolBaseRowStatus=tmnxMobProfPolBaseRowStatus, tmnxMobProfSysBCUeLimit=tmnxMobProfSysBCUeLimit, tmnxMobProfSysPagingBufferLimit=tmnxMobProfSysPagingBufferLimit, tmnxMobProfPolRefCount=tmnxMobProfPolRefCount, tmnxMobProfPgwGyPriOcsDiaPeer=tmnxMobProfPgwGyPriOcsDiaPeer, tmnxMobProfPlmnListMnc=tmnxMobProfPlmnListMnc, tmnxMobProfV3Group=tmnxMobProfV3Group, tmnxMobGtpPriGrpEntry=tmnxMobGtpPriGrpEntry, tmnxMobProfPolUntFlwLclPortVal2=tmnxMobProfPolUntFlwLclPortVal2, tmnxMobProfPolBaseLastChanged=tmnxMobProfPolBaseLastChanged, tmnxMobProfDiaName=tmnxMobProfDiaName, tmnxMobGtpPriGrpInactiveTimer=tmnxMobGtpPriGrpInactiveTimer, tmnxMobProfRadiusGroup=tmnxMobProfRadiusGroup, tmnxMobProfHttpRedirectLstChgd=tmnxMobProfHttpRedirectLstChgd, tmnxMobProfDiaPeerApplication=tmnxMobProfDiaPeerApplication, tmnxMobProfPeerListDescription=tmnxMobProfPeerListDescription, tmnxMobProfRadGrpLastChanged=tmnxMobProfRadGrpLastChanged, tmnxMobProfDccaQuotaUnavail=tmnxMobProfDccaQuotaUnavail, tmnxMobProfRadRowStatus=tmnxMobProfRadRowStatus, tmnxMobProfSysMemThreshldMajor=tmnxMobProfSysMemThreshldMajor, tmnxMobProfHTTPRedirectTable=tmnxMobProfHTTPRedirectTable, tmnxMobGtpPriGrpLocalCdrStorage=tmnxMobGtpPriGrpLocalCdrStorage, TmnxMobProfKeepAliveResponse=TmnxMobProfKeepAliveResponse, tmnxMobUmtsQosPolStreamQciValue=tmnxMobUmtsQosPolStreamQciValue, tmnxMobProfPlmnListName=tmnxMobProfPlmnListName, tmnxMobProfPolQciValue=tmnxMobProfPolQciValue, tmnxMobProfPgwChrgPrctRatChange=tmnxMobProfPgwChrgPrctRatChange, tmnxMobProfGtpKeepAlvRetryCnt=tmnxMobProfGtpKeepAlvRetryCnt, tmnxMobProfGtpMsgReTxTimeout=tmnxMobProfGtpMsgReTxTimeout, tmnxMobProfDiaPeerDescription=tmnxMobProfDiaPeerDescription, tmnxMobProfDiaPeerTransport=tmnxMobProfDiaPeerTransport, tmnxMobProfQciPolQciTblLstChgd=tmnxMobProfQciPolQciTblLstChgd, tmnxMobProfRadGrpIgnAcctResp=tmnxMobProfRadGrpIgnAcctResp, tmnxMobProfV4v0Compliance=tmnxMobProfV4v0Compliance, tmnxMobProfPolUntFlwRmtPortOper=tmnxMobProfPolUntFlwRmtPortOper, tmnxMobProfQciPolEntry=tmnxMobProfQciPolEntry, tmnxMobProfPgwChrgPrctSrvNdChLmt=tmnxMobProfPgwChrgPrctSrvNdChLmt, tmnxMobProfQciPolQciDscpOut=tmnxMobProfQciPolQciDscpOut, tmnxMobProfPgwChrgGyState=tmnxMobProfPgwChrgGyState, tmnxMobProfChgUnitEntry=tmnxMobProfChgUnitEntry, tmnxMobProfDccaRetryCnt=tmnxMobProfDccaRetryCnt, tmnxMobProfUnsupportedGroup=tmnxMobProfUnsupportedGroup, tmnxMobProfPolUntFlwLclAddr=tmnxMobProfPolUntFlwLclAddr, tmnxMobProfRadPeerAcctSvrPort=tmnxMobProfRadPeerAcctSvrPort, tmnxMobProfDiaTransTimer=tmnxMobProfDiaTransTimer, tmnxMobProfDiaPeerListAddr=tmnxMobProfDiaPeerListAddr, tmnxMobGtpPriServerEntry=tmnxMobGtpPriServerEntry, tmnxMobProfSgwChrgOffLineState=tmnxMobProfSgwChrgOffLineState, tmnxMobProfDccaRowStatus=tmnxMobProfDccaRowStatus, tmnxMobGtpPriGrpFileObsoleteTime=tmnxMobGtpPriGrpFileObsoleteTime, tmnxMobProfSgwChrgPrctTimeLmt=tmnxMobProfSgwChrgPrctTimeLmt, tmnxMobProfPmipv6IpTtl=tmnxMobProfPmipv6IpTtl, tmnxMobProfDccaGroup=tmnxMobProfDccaGroup, tmnxMobProfPolBaseConfRefCount=tmnxMobProfPolBaseConfRefCount, tmnxMobProfDccaEntry=tmnxMobProfDccaEntry, tmnxMobUmtsQosPolConvUnkTdl=tmnxMobUmtsQosPolConvUnkTdl, tmnxMobProfPeerListPeerKeepAlive=tmnxMobProfPeerListPeerKeepAlive, tmnxMobProfRadRetryTimeout=tmnxMobProfRadRetryTimeout, TmnxMobProfKeepAliveInterval=TmnxMobProfKeepAliveInterval, tmnxMobProfDiaPeerAdminState=tmnxMobProfDiaPeerAdminState, tmnxMobProfSysBCActivtyRate=tmnxMobProfSysBCActivtyRate, tmnxMobProfPlmnListTblLstChgd=tmnxMobProfPlmnListTblLstChgd, tmnxMobProfPgwChrgCitQosChange=tmnxMobProfPgwChrgCitQosChange, tmnxMobProfPolUntFlwGateStatus=tmnxMobProfPolUntFlwGateStatus, tmnxMobUmtsQosPolConvUnkTdg=tmnxMobUmtsQosPolConvUnkTdg, tmnxMobGtpPriServerPathProtocol=tmnxMobGtpPriServerPathProtocol, tmnxMobProfRadTable=tmnxMobProfRadTable, tmnxMobGtpPriGrpDescription=tmnxMobGtpPriGrpDescription, tmnxMobProfGtpKeepAlvResp=tmnxMobProfGtpKeepAlvResp, tmnxMobProfHttpRedirectRowStatus=tmnxMobProfHttpRedirectRowStatus, tmnxMobProfChgUnitReportingLevel=tmnxMobProfChgUnitReportingLevel, tmnxMobProfPeerListPeerLastChgd=tmnxMobProfPeerListPeerLastChgd, tmnxMobProfSgwChargingEntry=tmnxMobProfSgwChargingEntry, tmnxMobGtpPriServerAdminState=tmnxMobGtpPriServerAdminState, tmnxMobGtpPriGrpDeadtime=tmnxMobGtpPriGrpDeadtime, tmnxMobProfPmipv6KeepAlvTimeout=tmnxMobProfPmipv6KeepAlvTimeout, tmnxMobProfDiaWatchdgTimer=tmnxMobProfDiaWatchdgTimer, tmnxMobProfSgwChrgCitTrfTimeChng=tmnxMobProfSgwChrgCitTrfTimeChng, tmnxMobGtpPriGrpIfVRtrId=tmnxMobGtpPriGrpIfVRtrId, tmnxMobProfRadGrpAuthServerPort=tmnxMobProfRadGrpAuthServerPort, tmnxMobProfGtpRowStatus=tmnxMobProfGtpRowStatus, tmnxMobProfPolUntFlwDirection=tmnxMobProfPolUntFlwDirection, tmnxMobProfPolRowStatus=tmnxMobProfPolRowStatus, tmnxMobProfPolUntFlwRmtAddrType=tmnxMobProfPolUntFlwRmtAddrType, tmnxMobUmtsQosPolTable=tmnxMobUmtsQosPolTable, tmnxMobProfPgwChrgCitUsrLocChnge=tmnxMobProfPgwChrgCitUsrLocChnge, tmnxMobProfSysCpuThreshldMajor=tmnxMobProfSysCpuThreshldMajor, tmnxMobProfDiaPeerListPort=tmnxMobProfDiaPeerListPort, tmnxMobProfPolicyRulesV31Group=tmnxMobProfPolicyRulesV31Group, tmnxMobProfPeerListPeerAddr=tmnxMobProfPeerListPeerAddr, tmnxMobProfPgwChrgDesc=tmnxMobProfPgwChrgDesc, tmnxMobProfRadPeerTblLstChgd=tmnxMobProfRadPeerTblLstChgd, tmnxMobProfSysTrfcDropThrshldS1u=tmnxMobProfSysTrfcDropThrshldS1u, tmnxMobProfileGroups=tmnxMobProfileGroups, tmnxMobProfDiaPeerTable=tmnxMobProfDiaPeerTable, tmnxMobProfPolUntFlwEntry=tmnxMobProfPolUntFlwEntry, tmnxMobProfSgwChrgDesc=tmnxMobProfSgwChrgDesc, tmnxMobGtpPriServerAddr=tmnxMobGtpPriServerAddr, tmnxMobProfDccaTable=tmnxMobProfDccaTable, tmnxMobProfDccaQuotaExNoThrsld=tmnxMobProfDccaQuotaExNoThrsld, tmnxMobProfDccaValidityTimeExp=tmnxMobProfDccaValidityTimeExp, tmnxMobProfDiaIpTtl=tmnxMobProfDiaIpTtl, tmnxMobGtpPriGrpFileClsLifeTime=tmnxMobGtpPriGrpFileClsLifeTime, tmnxMobProfileCompliances=tmnxMobProfileCompliances, tmnxMobUmtsQosPolBackground=tmnxMobUmtsQosPolBackground, tmnxMobProfDccaCcSessFailover=tmnxMobProfDccaCcSessFailover, tmnxMobProfSgwChargingTblLstChgd=tmnxMobProfSgwChargingTblLstChgd, tmnxMobProfPgwChargingTblLstChgd=tmnxMobProfPgwChargingTblLstChgd, tmnxMobProfPeerListPeerPlmnMnc=tmnxMobProfPeerListPeerPlmnMnc, tmnxMobGtpPriGrpTable=tmnxMobGtpPriGrpTable, tmnxMobProfRadName=tmnxMobProfRadName, tmnxMobProfPeerListEntry=tmnxMobProfPeerListEntry, tmnxMobProfPgwGySecOcsDiaPeer=tmnxMobProfPgwGySecOcsDiaPeer, tmnxMobProfDiaPeerDiaProfName=tmnxMobProfDiaPeerDiaProfName, tmnxMobProfPmipv6MsgReTxRetryCnt=tmnxMobProfPmipv6MsgReTxRetryCnt, tmnxMobProfDccaQuotaExThrsldAct=tmnxMobProfDccaQuotaExThrsldAct, tmnxMobProfSgwChrgPrctVolumeLmt=tmnxMobProfSgwChrgPrctVolumeLmt, tmnxMobGtpPriServerTimeout=tmnxMobGtpPriServerTimeout, tmnxMobProfChgUnitTblLstChgd=tmnxMobProfChgUnitTblLstChgd, tmnxMobProfDiaDnsRefreshInt=tmnxMobProfDiaDnsRefreshInt, tmnxMobProfPmipv6MsgReTxTimeout=tmnxMobProfPmipv6MsgReTxTimeout, tmnxMobProfPolUntFlwLclPrefixLen=tmnxMobProfPolUntFlwLclPrefixLen, tmnxMobProfPeerListRowStatus=tmnxMobProfPeerListRowStatus, tmnxMobProfDcca3GppQosNegProf=tmnxMobProfDcca3GppQosNegProf, tmnxMobProfSysRowStatus=tmnxMobProfSysRowStatus, tmnxMobProfPolName=tmnxMobProfPolName, tmnxMobProfSysSgnlFailThrshldS11=tmnxMobProfSysSgnlFailThrshldS11, tmnxMobProfRadPeerAdminState=tmnxMobProfRadPeerAdminState, tmnxMobProfPgwChrgCitTrfTimeChng=tmnxMobProfPgwChrgCitTrfTimeChng, tmnxMobGtpPriGrpCpmMemoryState=tmnxMobGtpPriGrpCpmMemoryState, tmnxMobProfSgwChrgLastChanged=tmnxMobProfSgwChrgLastChanged, tmnxMobGtpPriGrpIfIndex=tmnxMobGtpPriGrpIfIndex, tmnxMobProfRadGrpRadiusProfile=tmnxMobProfRadGrpRadiusProfile, tmnxMobProfSysTrfcDropThrshldS5=tmnxMobProfSysTrfcDropThrshldS5, tmnxMobGtpPriGrpCf1Limit=tmnxMobGtpPriGrpCf1Limit, tmnxMobProfPlmnListTable=tmnxMobProfPlmnListTable, tmnxMobProfPgwChrgCitTimeLmtRg=tmnxMobProfPgwChrgCitTimeLmtRg, tmnxMobProfRadPeerSecret=tmnxMobProfRadPeerSecret, tmnxMobProfSysLastChanged=tmnxMobProfSysLastChanged, tmnxMobProfQciPolName=tmnxMobProfQciPolName, tmnxMobProfGlobalV3Group=tmnxMobProfGlobalV3Group, tmnxMobProfDiaPeerLoadBalance=tmnxMobProfDiaPeerLoadBalance, tmnxMobProfChgRuleUnitName=tmnxMobProfChgRuleUnitName, tmnxMobProfPolUntFlwAaApp=tmnxMobProfPolUntFlwAaApp, tmnxMobProfDiaPeerListLastChngd=tmnxMobProfDiaPeerListLastChngd, tmnxMobProfDiaPeerListRowStatus=tmnxMobProfDiaPeerListRowStatus, tmnxMobProfRadPeerAddrType=tmnxMobProfRadPeerAddrType, tmnxMobProfPeerListPeerRowStatus=tmnxMobProfPeerListPeerRowStatus, tmnxMobProfChgUnitInUse=tmnxMobProfChgUnitInUse, tmnxMobGtpPriServerRetries=tmnxMobGtpPriServerRetries, tmnxMobProfPolUntFlwLclAddrType=tmnxMobProfPolUntFlwLclAddrType, tmnxMobProfPeerListPeerRatType=tmnxMobProfPeerListPeerRatType, tmnxMobProfPgwChrgCitVolumeLmtRg=tmnxMobProfPgwChrgCitVolumeLmtRg, tmnxMobProfQciPolRowStatus=tmnxMobProfQciPolRowStatus, tmnxMobProfUmtsQosPolGroup=tmnxMobProfUmtsQosPolGroup)
