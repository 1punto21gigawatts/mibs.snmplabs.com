#
# PySNMP MIB module TCAv1-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/TCAv1-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:15:32 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Gauge32, TimeTicks, NotificationType, MibIdentifier, Unsigned32, ObjectIdentity, Bits, Integer32, iso, enterprises, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, Counter32, ModuleIdentity, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "TimeTicks", "NotificationType", "MibIdentifier", "Unsigned32", "ObjectIdentity", "Bits", "Integer32", "iso", "enterprises", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "Counter32", "ModuleIdentity", "Counter64")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
bellcore = MibIdentifier((1, 3, 6, 1, 4, 1, 148))
requirements = MibIdentifier((1, 3, 6, 1, 4, 1, 148, 1))
tcaMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 148, 1, 5))
tcaObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 148, 1, 5, 1))
tcaTable = MibTable((1, 3, 6, 1, 4, 1, 148, 1, 5, 1, 1), )
if mibBuilder.loadTexts: tcaTable.setStatus('mandatory')
if mibBuilder.loadTexts: tcaTable.setDescription('The Threshold Crossing Alert table.')
tcaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 148, 1, 5, 1, 1, 1), ).setIndexNames((0, "TCAv1-MIB", "tcaIfIndex"), (0, "TCAv1-MIB", "tcaIndex"))
if mibBuilder.loadTexts: tcaEntry.setStatus('mandatory')
if mibBuilder.loadTexts: tcaEntry.setDescription('An entry in the Threshold Crossing Alert table.')
tcaIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 148, 1, 5, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcaIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: tcaIfIndex.setDescription("The value of this object is equal to MIB II's ifIndex value for this interface sublayer (ifEntry).")
tcaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 148, 1, 5, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcaIndex.setStatus('mandatory')
if mibBuilder.loadTexts: tcaIndex.setDescription('The value of this object is used as one of the indices for this table. It is a unique identifier for this row in the table for this interface (ifIndex). The value of this object can be from 1 to N, where N is the number of potential TCAs for this interface sublayer (ifEntry).')
tcaObject = MibTableColumn((1, 3, 6, 1, 4, 1, 148, 1, 5, 1, 1, 1, 3), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcaObject.setStatus('mandatory')
if mibBuilder.loadTexts: tcaObject.setDescription('The value of this object is the OBJECT IDENTIFIER of the counter object being thresholded. The counter objects being thresholded are defined in other MIB Modules.')
tcaObjectDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 148, 1, 5, 1, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcaObjectDesc.setStatus('mandatory')
if mibBuilder.loadTexts: tcaObjectDesc.setDescription('The value of this object is a description of the counter object being thresholded. For example, DS1 Coding Violations.')
tcaThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 148, 1, 5, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcaThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: tcaThreshold.setDescription('The value of this object is the threshold value of the counter object being thresholded.')
tcaSampleType = MibTableColumn((1, 3, 6, 1, 4, 1, 148, 1, 5, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("intervalAbsoluteValue", 1), ("intervalDeltaValue", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcaSampleType.setStatus('mandatory')
if mibBuilder.loadTexts: tcaSampleType.setDescription("The value of this object is the sample type of the counter object being thresholded from the perspective of the CNM or XA-OM customer. All counters are thresholded over a 15-minute interval. However, over this 15-minute interval the threshold value may be an absolute value (e.g., used for interval counters) or a delta value (e.g., used for continuous counters). The intervals are measured locally at the agent, and are not visible to the manager. At the agent's local interval boundary, all threshold crossing measurements are reset to zero. (A counter value may cross the predefined threshold and a TCA is sent only once within a 15-minute interval.)")
tcaCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 148, 1, 5, 1, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcaCounts.setStatus('mandatory')
if mibBuilder.loadTexts: tcaCounts.setDescription('The value of this object is the number of times the threshold was crossed for this counter object, since sysUpTime was initialized or restarted. This counter is a continuous counter. It should be noted that as this object has a SYNTAX of Counter, that it does not have a defined initial value. However, it is recommended that this object be initialized to zero.')
tcaTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 148, 1, 5, 1, 1, 1, 8), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcaTimeStamp.setStatus('mandatory')
if mibBuilder.loadTexts: tcaTimeStamp.setDescription("The value of this object is equal to the value of MIB-II's sysUpTime object at which last (latest) threshold was crossed for this counter object. The value of this object is set to zero at (re)initialization.")
tcaTrapEnabler = MibTableColumn((1, 3, 6, 1, 4, 1, 148, 1, 5, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcaTrapEnabler.setStatus('mandatory')
if mibBuilder.loadTexts: tcaTrapEnabler.setDescription("Indicates whether an fyiTrap should be generated for this threshold crossing count (tcaObject). The physical layer counters' and gauges' (e.g., DS1, DS3, SONET, and PLCP) TCAs should have a default value of disabled(2). The SMDS service violations and higher layer protocol violations counters' TCAs should have a default value of enabled(1). A fyiTrap, when generated, shall have the following varBind list: tcaObject, tcaObjectDesc, tcaThreshold, and tcaTimeStamp.")
tcaConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 148, 1, 5, 2))
tcaGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 148, 1, 5, 2, 1))
tcaCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 148, 1, 5, 2, 2))
tcaCompliance = MibIdentifier((1, 3, 6, 1, 4, 1, 148, 1, 5, 2, 2, 1))
tcaGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 148, 1, 5, 2, 1, 1))
mibBuilder.exportSymbols("TCAv1-MIB", tcaMIB=tcaMIB, tcaTable=tcaTable, bellcore=bellcore, tcaTimeStamp=tcaTimeStamp, tcaObject=tcaObject, tcaIndex=tcaIndex, tcaGroups=tcaGroups, tcaCompliance=tcaCompliance, tcaObjects=tcaObjects, tcaSampleType=tcaSampleType, tcaEntry=tcaEntry, tcaCompliances=tcaCompliances, tcaTrapEnabler=tcaTrapEnabler, tcaCounts=tcaCounts, tcaThreshold=tcaThreshold, tcaIfIndex=tcaIfIndex, requirements=requirements, tcaGroup=tcaGroup, tcaObjectDesc=tcaObjectDesc, tcaConformance=tcaConformance)
