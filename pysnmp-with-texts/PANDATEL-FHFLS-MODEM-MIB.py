#
# PySNMP MIB module PANDATEL-FHFLS-MODEM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/PANDATEL-FHFLS-MODEM-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:37:16 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint")
device_id, mdmSpecifics = mibBuilder.importSymbols("PANDATEL-MODEM-MIB", "device-id", "mdmSpecifics")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter32, Integer32, MibIdentifier, enterprises, Counter64, NotificationType, Bits, ModuleIdentity, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, ObjectIdentity, IpAddress, Unsigned32, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "Integer32", "MibIdentifier", "enterprises", "Counter64", "NotificationType", "Bits", "ModuleIdentity", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "ObjectIdentity", "IpAddress", "Unsigned32", "TimeTicks")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
fhfls_modem = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 10000, 2, 103)).setLabel("fhfls-modem")
fhfls = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 103))
fhflsModemTable = MibTable((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 103, 1), )
if mibBuilder.loadTexts: fhflsModemTable.setStatus('mandatory')
if mibBuilder.loadTexts: fhflsModemTable.setDescription('The table of all FHFL-S modems in this housing.')
fhflsTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 103, 1, 1), ).setIndexNames((0, "PANDATEL-FHFLS-MODEM-MIB", "mdmRack"), (0, "PANDATEL-FHFLS-MODEM-MIB", "mdmModem"), (0, "PANDATEL-FHFLS-MODEM-MIB", "mdmPosition"))
if mibBuilder.loadTexts: fhflsTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: fhflsTableEntry.setDescription('The index of the table.')
mdmRack = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 103, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmRack.setStatus('mandatory')
if mibBuilder.loadTexts: mdmRack.setDescription('The index of the rack where the modem is installed.')
mdmModem = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 103, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmModem.setStatus('mandatory')
if mibBuilder.loadTexts: mdmModem.setDescription('This variable displays the slot number where the corresponding modem is installed in the rack.')
mdmPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 103, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("local", 1), ("remote", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmPosition.setStatus('mandatory')
if mibBuilder.loadTexts: mdmPosition.setDescription("This variable displays the location of the corresponding modem: 'local' or 'remote'. The modem which is plugged into a managed rack is 'local', the counterpart is 'remote'.")
mdmModemName = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 103, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmModemName.setStatus('mandatory')
if mibBuilder.loadTexts: mdmModemName.setDescription('A verbal name of this modem.')
mdmInterfaceEmulationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 103, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4, 5, 100))).clone(namedValues=NamedValues(("other", 1), ("te", 4), ("nt", 5), ("not-available", 100)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmInterfaceEmulationMode.setStatus('mandatory')
if mibBuilder.loadTexts: mdmInterfaceEmulationMode.setDescription("Interface mode of the unit: 'te' or 'nt'.")
mdmModemProperty = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 103, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 14, 15, 99))).clone(namedValues=NamedValues(("other", 1), ("stm1-oc3-coax", 14), ("sts3-oc3", 15), ("unknown", 99)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmModemProperty.setStatus('mandatory')
if mibBuilder.loadTexts: mdmModemProperty.setDescription('The speed class of the unit: STM-1/OC-3.')
mdmClockSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 103, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("dual", 2), ("single", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmClockSystem.setStatus('mandatory')
if mibBuilder.loadTexts: mdmClockSystem.setDescription('The clock system of the link.')
mdmClockSource = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 103, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("internal", 2), ("remote", 3), ("external", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmClockSource.setStatus('mandatory')
if mibBuilder.loadTexts: mdmClockSource.setDescription('The clock source of the link.')
mdmDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 103, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("other", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmDataRate.setStatus('mandatory')
if mibBuilder.loadTexts: mdmDataRate.setDescription('The data rate at the interface in bits per seconds.')
mdmRemoteAccessMode = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 103, 1, 1, 64), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 5))).clone(namedValues=NamedValues(("other", 1), ("disable", 2), ("enable", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmRemoteAccessMode.setStatus('mandatory')
if mibBuilder.loadTexts: mdmRemoteAccessMode.setDescription("The possibility of remote management: 'enabled' or 'disabled'. Once disabled remote management, it is not possible to enable it at the remote unit.")
mdmForcedRemoteAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 103, 1, 1, 65), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmForcedRemoteAccess.setStatus('mandatory')
if mibBuilder.loadTexts: mdmForcedRemoteAccess.setDescription("Activation of remote management: 'on' or 'off'. Status 'on' enables management of remote unit. During this process the link is restricted to management data. The transmission of user data is interrupted. Status 'off' disables management of remote unit. The link transmits user data.")
mdmClockRecovery = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 103, 1, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 100))).clone(namedValues=NamedValues(("other", 1), ("disable", 2), ("stm1-oc3-155mbps", 3), ("stm4-oc12-622mbps", 4), ("not-available", 100)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmClockRecovery.setStatus('mandatory')
if mibBuilder.loadTexts: mdmClockRecovery.setDescription('The clock recovery and data retiming at interface and line port.')
mdmInterfaceAlarmCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 103, 1, 1, 98), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 6, 7, 100))).clone(namedValues=NamedValues(("other", 1), ("disable", 2), ("no-link-signal", 3), ("no-clock-signal", 6), ("no-clock-signal-or-no-link-signal", 7), ("not-available", 100)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmInterfaceAlarmCondition.setStatus('mandatory')
if mibBuilder.loadTexts: mdmInterfaceAlarmCondition.setDescription('The alarm trigger mode at interface port.')
mdmLineAlarmCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 103, 1, 1, 99), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 100))).clone(namedValues=NamedValues(("other", 1), ("disable", 2), ("no-link-signal", 3), ("laser-fail", 4), ("no-link-signal-or-laser-fail", 5), ("no-clock-signal", 6), ("no-clock-signal-or-no-link-signal", 7), ("no-clock-signal-or-laser-fail", 8), ("all", 9), ("not-available", 100)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmLineAlarmCondition.setStatus('mandatory')
if mibBuilder.loadTexts: mdmLineAlarmCondition.setDescription('The alarm trigger mode at line port.')
mibBuilder.exportSymbols("PANDATEL-FHFLS-MODEM-MIB", fhfls_modem=fhfls_modem, mdmModemProperty=mdmModemProperty, mdmDataRate=mdmDataRate, mdmLineAlarmCondition=mdmLineAlarmCondition, mdmModem=mdmModem, mdmModemName=mdmModemName, mdmClockSource=mdmClockSource, mdmForcedRemoteAccess=mdmForcedRemoteAccess, mdmPosition=mdmPosition, mdmInterfaceAlarmCondition=mdmInterfaceAlarmCondition, mdmRemoteAccessMode=mdmRemoteAccessMode, mdmRack=mdmRack, fhflsModemTable=fhflsModemTable, fhflsTableEntry=fhflsTableEntry, mdmClockRecovery=mdmClockRecovery, mdmClockSystem=mdmClockSystem, fhfls=fhfls, mdmInterfaceEmulationMode=mdmInterfaceEmulationMode)
