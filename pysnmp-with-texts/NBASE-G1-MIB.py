#
# PySNMP MIB module NBASE-G1-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NBASE-G1-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:17:08 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
TimeTicks, Bits, Unsigned32, NotificationType, Integer32, ObjectIdentity, ModuleIdentity, Counter32, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, MibIdentifier, Counter64, IpAddress, enterprises = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Bits", "Unsigned32", "NotificationType", "Integer32", "ObjectIdentity", "ModuleIdentity", "Counter32", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "MibIdentifier", "Counter64", "IpAddress", "enterprises")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
class MacAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

nbase = MibIdentifier((1, 3, 6, 1, 4, 1, 629))
nbSwitchG1 = MibIdentifier((1, 3, 6, 1, 4, 1, 629, 1))
nbsProducts = MibIdentifier((1, 3, 6, 1, 4, 1, 629, 1, 1))
nbsSys = MibIdentifier((1, 3, 6, 1, 4, 1, 629, 1, 2))
nbsSysSnmpCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 629, 1, 3))
nbsPortCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 629, 1, 4))
nbsEtherInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 629, 1, 5))
nbsSwitchPerf = MibIdentifier((1, 3, 6, 1, 4, 1, 629, 1, 6))
nbsTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 629, 1, 7))
nbsMiniSwDb = MibIdentifier((1, 3, 6, 1, 4, 1, 629, 1, 8))
nbsMegaSwDb = MibIdentifier((1, 3, 6, 1, 4, 1, 629, 1, 9))
miniSwitch = MibIdentifier((1, 3, 6, 1, 4, 1, 629, 1, 1, 1))
megaSwitch208 = MibIdentifier((1, 3, 6, 1, 4, 1, 629, 1, 1, 2))
megaSwitch215 = MibIdentifier((1, 3, 6, 1, 4, 1, 629, 1, 1, 3))
megaFastSwitch = MibIdentifier((1, 3, 6, 1, 4, 1, 629, 1, 1, 4))
megaSwitchII = MibIdentifier((1, 3, 6, 1, 4, 1, 629, 1, 1, 5))
megaSwitch2015 = MibIdentifier((1, 3, 6, 1, 4, 1, 629, 1, 1, 6))
megaSwitch2048 = MibIdentifier((1, 3, 6, 1, 4, 1, 629, 1, 1, 7))
nbsSysFwVers = MibScalar((1, 3, 6, 1, 4, 1, 629, 1, 2, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSysFwVers.setStatus('mandatory')
if mibBuilder.loadTexts: nbsSysFwVers.setDescription('The SNMP Agent firmware version in the form Vmajor.minor')
nbsSysPortsNumber = MibScalar((1, 3, 6, 1, 4, 1, 629, 1, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSysPortsNumber.setStatus('mandatory')
if mibBuilder.loadTexts: nbsSysPortsNumber.setDescription('Number of Switching Ports provided by this system.')
nbsSysRestart = MibScalar((1, 3, 6, 1, 4, 1, 629, 1, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("running", 1), ("coldRestart", 2), ("warmRestart", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsSysRestart.setStatus('mandatory')
if mibBuilder.loadTexts: nbsSysRestart.setDescription(' This object is used to reset the system. Writing a coldRestart(2), causes the switching engine as well as the SNMP Agent CPU to be hardware resetted, similar to a power-on cycle. Writing a warmRestart(3), causes only a restart of the the SNMP Agent CPU operative software. The switching engine continues to operate. Nevertheless, it is reinitialized to the parameters value stored in the system NVRAM. These paramters may be different from those of the previous session.')
nbsSysNumRestarts = MibScalar((1, 3, 6, 1, 4, 1, 629, 1, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSysNumRestarts.setStatus('mandatory')
if mibBuilder.loadTexts: nbsSysNumRestarts.setDescription('Number of warmRestarts executed by the system, since the last coldRestart or power-on cycle.. A warmRestart may be initiated by: - writing a warmRestart value in the nbsSysRestart object. - a warmRestart command from the Administrative Interface. - the SNMP Agent Firmware due to certain conditions.')
nbsSysLastError = MibScalar((1, 3, 6, 1, 4, 1, 629, 1, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("noError", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSysLastError.setStatus('mandatory')
if mibBuilder.loadTexts: nbsSysLastError.setDescription('The error code of the last fatal error that generated a warm reset.')
nbsSysErrUptime = MibScalar((1, 3, 6, 1, 4, 1, 629, 1, 2, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSysErrUptime.setStatus('mandatory')
if mibBuilder.loadTexts: nbsSysErrUptime.setDescription('The time (in hundredths of a second) since the last cold reset/power cycle when a fatal error occured. This variable shows the system uptime from the last cold reset/power on cycle, unless a fatal error occured.')
nbsSysSwitchDBSize = MibScalar((1, 3, 6, 1, 4, 1, 629, 1, 2, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSysSwitchDBSize.setStatus('mandatory')
if mibBuilder.loadTexts: nbsSysSwitchDBSize.setDescription('The maximum size of the Switching Data Base. It indicates how many MAC Addresses may be stored in the system Switching Data Base. The possible values are 1024 or 2048.')
nbsSysSetNvramDefaults = MibScalar((1, 3, 6, 1, 4, 1, 629, 1, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("setDefaults", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsSysSetNvramDefaults.setStatus('mandatory')
if mibBuilder.loadTexts: nbsSysSetNvramDefaults.setDescription('Writing the value setDefaults to this objects will restore the defaults in the NVRAM data base. These values will take effect after a system reset')
nbsSysResetSwitchStats = MibScalar((1, 3, 6, 1, 4, 1, 629, 1, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("resetStats", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsSysResetSwitchStats.setStatus('mandatory')
if mibBuilder.loadTexts: nbsSysResetSwitchStats.setDescription('Writing the value resetStats to this object will reset all the switching counters, for all the ports including the the Ethernet, switching and the SNMP Agent computed statistics')
nbsSysStpEnable = MibScalar((1, 3, 6, 1, 4, 1, 629, 1, 2, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("stpDisable", 1), ("stpEnable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsSysStpEnable.setStatus('mandatory')
if mibBuilder.loadTexts: nbsSysStpEnable.setDescription('Writing one of the allowed values to this object will modify the Administrative state of the Spanning Tree. This value will take effect in the next session after a system reset. Writing the value StpDisable to this object will disable the Spanning Tree Engine. Writing the value StpEnable to this object will enable the Spanning Tree Engine.')
nbsSysRunStpState = MibScalar((1, 3, 6, 1, 4, 1, 629, 1, 2, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("stpDisable", 1), ("stpEnable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSysRunStpState.setStatus('mandatory')
if mibBuilder.loadTexts: nbsSysRunStpState.setDescription('Running state of the Spanning Tree Engine.')
nbsSysSelftestLevel = MibScalar((1, 3, 6, 1, 4, 1, 629, 1, 2, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ststNone", 1), ("ststShort", 2), ("ststLong", 3), ("ststDiagnostics", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsSysSelftestLevel.setStatus('mandatory')
if mibBuilder.loadTexts: nbsSysSelftestLevel.setDescription('NVRAM based level of the system selftest. It is supported only by the MegaSwitch II family. The values are : ststNone - meaning that no selftest will be executed upon boot-up ststShort- meaning that a short selftest, of approx 10-20 seconds will be executed upon boot-up ststLong - meaning that a long/extensive selftest will be executed upon boot-up ststDiagnostics - meaning that upon boot-up the diagnostics mode is entered. In this mode it is possible to interactively select the test or the group of tests that will be executed. This value may not be set through an SNMP set command.')
nbsSysFrmGen = MibIdentifier((1, 3, 6, 1, 4, 1, 629, 1, 2, 12))
nbsSysFrmGenSession = MibScalar((1, 3, 6, 1, 4, 1, 629, 1, 2, 12, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("idleFG", 1), ("runFG", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsSysFrmGenSession.setStatus('mandatory')
if mibBuilder.loadTexts: nbsSysFrmGenSession.setDescription('This object controls the activity of the Frame Generator process.')
nbsSysFrmGenDa = MibScalar((1, 3, 6, 1, 4, 1, 629, 1, 2, 12, 2), MacAddress().clone(hexValue="000000000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsSysFrmGenDa.setStatus('mandatory')
if mibBuilder.loadTexts: nbsSysFrmGenDa.setDescription('The Frame Generator Destination MAC Address.')
nbsSysFrmGenSa = MibScalar((1, 3, 6, 1, 4, 1, 629, 1, 2, 12, 3), MacAddress().clone(hexValue="000000000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsSysFrmGenSa.setStatus('mandatory')
if mibBuilder.loadTexts: nbsSysFrmGenSa.setDescription('The Frame Generator Source MAC Address.')
nbsSysFrmGenPktFill = MibScalar((1, 3, 6, 1, 4, 1, 629, 1, 2, 12, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsSysFrmGenPktFill.setStatus('mandatory')
if mibBuilder.loadTexts: nbsSysFrmGenPktFill.setDescription('The Frame Generator Packet Fill Pattern. The default is 0.')
nbsSysFrmGenPktRate = MibScalar((1, 3, 6, 1, 4, 1, 629, 1, 2, 12, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsSysFrmGenPktRate.setStatus('mandatory')
if mibBuilder.loadTexts: nbsSysFrmGenPktRate.setDescription('The Frame Generator Rate, meaning the number of packets per second to be generated. Each device is able to generate a certain number of packets/second. Default is 1 packet/second')
nbsSysFrmGenDestMap = MibScalar((1, 3, 6, 1, 4, 1, 629, 1, 2, 12, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsSysFrmGenDestMap.setStatus('mandatory')
if mibBuilder.loadTexts: nbsSysFrmGenDestMap.setDescription('The Frame Generator Destination Map = the set of ports to which the generated packets are to be sent. Each octet within the value of this object specifies a set of eight ports, with the first octet specifying ports 1 through 8, the second octet specifying ports 9 through 16, etc. Within each octet, the most significant bit represents the lowest numbered port, and the least significant bit represents the highest numbered port. Thus, each port of the switch is represented by a single bit within the value of this object. If that bit has a value of <1> then that port is included in the set of ports; the port is not included if its bit has a value of <0>. (Note that the setting of the bit corresponding to the port from which a frame is received is irrelevant.) The default value of this object is a string of ones of appropriate length.')
nbsSysFrmGenPktNum = MibScalar((1, 3, 6, 1, 4, 1, 629, 1, 2, 12, 7), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsSysFrmGenPktNum.setStatus('mandatory')
if mibBuilder.loadTexts: nbsSysFrmGenPktNum.setDescription('The Frame Generator Number of Packets to be generated. Default is 1.')
nbsSysFrmGenPktLen = MibScalar((1, 3, 6, 1, 4, 1, 629, 1, 2, 12, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsSysFrmGenPktLen.setStatus('mandatory')
if mibBuilder.loadTexts: nbsSysFrmGenPktLen.setDescription('The Frame Generator Packet Length. Default is 60 bytes')
nbsSysFrmGenXmtPktNum = MibScalar((1, 3, 6, 1, 4, 1, 629, 1, 2, 12, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSysFrmGenXmtPktNum.setStatus('mandatory')
if mibBuilder.loadTexts: nbsSysFrmGenXmtPktNum.setDescription('Number of Packets transmitted by the The Frame Generator.')
nbsSysIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 629, 1, 3, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsSysIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: nbsSysIpAddr.setDescription('The SNMP Agent Administrative value of the IP Address for the in-band access. This value is stored in the system NVRAM. The current operational IP Adress may be obtained by accessing the ipAdEntAddr entry in the ipAddrTable, for ipAdEntIfIndex 1 If the system has no current operational IP Address, meaning that, the access is done out-of-band, then this value takes effect immediately. In this case the NetMask and the BcastAddr will be automatically build. Otherwise it will take effect after a system reset')
nbsSysNetMask = MibScalar((1, 3, 6, 1, 4, 1, 629, 1, 3, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsSysNetMask.setStatus('mandatory')
if mibBuilder.loadTexts: nbsSysNetMask.setDescription('The SNMP Agent Administrative value of the subnet mask for the in-band access. This value is stored in the system NVRAM. The current operational IP Adress may be obtained by accessing the ipAdEntNetMask entry in the ipAddrTable, for ipAdEntIfIndex 1 If the system has no current operational IP Address, meaning that, the access is done out-of-band, then this value takes effect immediately. Otherwise it will take effect after a system reset')
nbsSysBcastAddr = MibScalar((1, 3, 6, 1, 4, 1, 629, 1, 3, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsSysBcastAddr.setStatus('mandatory')
if mibBuilder.loadTexts: nbsSysBcastAddr.setDescription('The SNMP Agent Administrative value of the IP Broadcast Address for the in-band access. This value is stored in the system NVRAM. The current operational IP Adress may be obtained by accessing the ipAdEntBcastAddr entry in the ipAddrTable, for ipAdEntIfIndex 1 If the system has no current operational IP Address, meaning that, the access is done out-of-band, then this value takes effect immediately. Otherwise it will take effect after a system reset')
nbsSysObIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 629, 1, 3, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsSysObIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: nbsSysObIpAddr.setDescription('The SNMP Agent Administrative value of the IP Address for the out-band access. This value is stored in the system NVRAM. The current operational IP Adress may be obtained by accessing the ipAdEntAddr entry in the ipAddrTable, for ipAdEntIfIndex equal to the SLIP interface value. If the system has no current operational Out-Band IP Address, meaning that, the access is done in-band, then this value takes effect immediately. In this case the NetMask and the BcastAddr will be automatically build. Otherwise it will take effect after a system reset')
nbsSysObNetMask = MibScalar((1, 3, 6, 1, 4, 1, 629, 1, 3, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsSysObNetMask.setStatus('mandatory')
if mibBuilder.loadTexts: nbsSysObNetMask.setDescription('The SNMP Agent Administrative value of the subnet mask for the out-band access. This value is stored in the system NVRAM. The current operational IP Adress may be obtained by accessing the ipAdEntNetMask entry in the ipAddrTable, for ipAdEntIfIndex equal to the SLIP interface value. If the system has no current operational Out-Band IP Address, meaning that, the access is done in-band, then this value takes effect immediately. Otherwise it will take effect after a system reset')
nbsSysObBcastAddr = MibScalar((1, 3, 6, 1, 4, 1, 629, 1, 3, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsSysObBcastAddr.setStatus('mandatory')
if mibBuilder.loadTexts: nbsSysObBcastAddr.setDescription('The SNMP Agent Administrative value of the IP Broadcast Address for the in-band access. This value is stored in the system NVRAM. The current operational IP Adress may be obtained by accessing the ipAdEntBcastAddr entry in the ipAddrTable, for ipAdEntIfIndex equal to the SLIP interface value. If the system has no current operational Out-Band IP Address, meaning that, the access is done in-band, then this value takes effect immediately. Otherwise it will take effect after a system reset')
nbsSysDefaultGateway = MibScalar((1, 3, 6, 1, 4, 1, 629, 1, 3, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsSysDefaultGateway.setStatus('mandatory')
if mibBuilder.loadTexts: nbsSysDefaultGateway.setDescription('The SNMP Agent Administrative value of the Default Gateway. This value is stored in the system NVRAM. The current operational Default Gateway IP Adress may be obtained by accessing ipRouteNextHop object of the 0.0.0.0 entry in the ipRouteTable. If the system has no current operational Default Gateway IP Address, then this value takes effect immediately. Otherwise it will take effect after a system reset')
nbsSysReadComunity = MibScalar((1, 3, 6, 1, 4, 1, 629, 1, 3, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsSysReadComunity.setStatus('mandatory')
if mibBuilder.loadTexts: nbsSysReadComunity.setDescription('The SNMP Agent Administrative value of the read community string. This value is stored in the system NVRAM. It will take effect after a system reset')
nbsSysWriteComunity = MibScalar((1, 3, 6, 1, 4, 1, 629, 1, 3, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsSysWriteComunity.setStatus('mandatory')
if mibBuilder.loadTexts: nbsSysWriteComunity.setDescription('The SNMP Agent Administrative value of the write community string. This value is stored in the system NVRAM. It will take effect after a system reset. The object may not be read for obvious security reasons. A GET request will be answered by a zero length string.')
nbsSysBootpEnable = MibScalar((1, 3, 6, 1, 4, 1, 629, 1, 3, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsSysBootpEnable.setStatus('mandatory')
if mibBuilder.loadTexts: nbsSysBootpEnable.setDescription('The SNMP Agent value for the activation of the BOOTP process. This value is stored in the system NVRAM also and will be preserved over system resets and power cycles.')
nbsSysTrapTblMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 629, 1, 3, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSysTrapTblMaxSize.setStatus('mandatory')
if mibBuilder.loadTexts: nbsSysTrapTblMaxSize.setDescription('The maximum size (number of rows) allowed in the trap table')
nbsSysTrapTable = MibTable((1, 3, 6, 1, 4, 1, 629, 1, 3, 12), )
if mibBuilder.loadTexts: nbsSysTrapTable.setStatus('mandatory')
if mibBuilder.loadTexts: nbsSysTrapTable.setDescription('A table of managers to whom will the traps generated by the SNMP agent will be sent. It represents the current operational table as well as the NVRAM saved table. The entries in the table are saved over system resets and power up cycles')
nbsSysTrapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 629, 1, 3, 12, 1), ).setIndexNames((0, "NBASE-G1-MIB", "nbsSysTrapTblEntIndex"))
if mibBuilder.loadTexts: nbsSysTrapEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nbsSysTrapEntry.setDescription('Contains the information necessary to generate a trap to be sent to a particular manager. The object nbsSysTrapTblEntStatus, when written is used to create or delete an entry/row in nbsSysTrapTable. To create a new entry a SET PDU with the nbsSysTrapTblEntIpAddr, nbsSysTrapTblEntComm and nbsSysTrapTblEntStatus objects is required.')
nbsSysTrapTblEntIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 3, 12, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSysTrapTblEntIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nbsSysTrapTblEntIndex.setDescription('The index of the entry/row in the trap table in the range 1 to the value of nbsSysTrapTblMaxSize.')
nbsSysTrapTblEntStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 3, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("active", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsSysTrapTblEntStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nbsSysTrapTblEntStatus.setDescription("This object is used to get/set the validity of the information contained by nbsSysTrapEntry row. Setting this object to the value invalid(1) has the effect of deleting the corresponding entry in the nbsSysTrapTable. Deleting and entry has the effect of initializing it to default values : IpAddr = 0.0.0.0 & Comm = null string. Setting this object to the value valid(2) entry has the effect of creating a new row/entry in the nbsSysTrapTable object, if an entry with the same nbsSysTrapTblEntIpAddr does not exist. If such an entry exists, then a 'badValue' error will be returned. The GET operations will receive a value of valid(2) for existing entries. An invalid(1) value indicates an entry that was deleted by a previous SET operation.")
nbsSysTrapTblEntIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 3, 12, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsSysTrapTblEntIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: nbsSysTrapTblEntIpAddr.setDescription('IP Address of a manager that is to receive the SNMP agent generated traps')
nbsSysTrapTblEntComm = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 3, 12, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsSysTrapTblEntComm.setStatus('mandatory')
if mibBuilder.loadTexts: nbsSysTrapTblEntComm.setDescription('Community string used by the SNMP agent in the traps generated')
nbsSysTftpSwFileName = MibScalar((1, 3, 6, 1, 4, 1, 629, 1, 3, 13), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsSysTftpSwFileName.setStatus('mandatory')
if mibBuilder.loadTexts: nbsSysTftpSwFileName.setDescription('The SNMP Agent Software File Name. This is the remote file name string provided to the TFTP client application when starting a Firmware Update process. This value is stored in the system NVRAM as well as in the SNMP Agent current configuration.')
nbsSysTftpParFileName = MibScalar((1, 3, 6, 1, 4, 1, 629, 1, 3, 14), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsSysTftpParFileName.setStatus('mandatory')
if mibBuilder.loadTexts: nbsSysTftpParFileName.setDescription('The SNMP Agent Parameters File Name. This is the remote file name string provided to the TFTP server application when using the BOOTP/TFTP processin order to configure the SNMP Agent. This value is stored in the system NVRAM as well as in the SNMP Agent current configuration.')
nbsSysSerialLineMode = MibScalar((1, 3, 6, 1, 4, 1, 629, 1, 3, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("adminIf", 1), ("slipIf", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsSysSerialLineMode.setStatus('mandatory')
if mibBuilder.loadTexts: nbsSysSerialLineMode.setDescription('The mode in which the serial line is used: by the local Administrative Interface, or as a SLIP line. Note that setting this object to adminIf(1) value while in SLIP mode will abort the serial connection between the SNMP Manager and the device. Setting this object to slipIf(2) while in Administrative Interface Mode will abort the local terminal connection.')
nbsSysSerialSlipBaudRate = MibScalar((1, 3, 6, 1, 4, 1, 629, 1, 3, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("b9600", 1), ("b19200", 2), ("b38400", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsSysSerialSlipBaudRate.setStatus('mandatory')
if mibBuilder.loadTexts: nbsSysSerialSlipBaudRate.setDescription('The Serial Line Baud Rate when in SLIP Mode. This value is stored in the system NVRAM as well as in the SNMP Agent current configuration.')
nbsSysTelnetSession = MibScalar((1, 3, 6, 1, 4, 1, 629, 1, 3, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("connected", 1), ("disconnect", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSysTelnetSession.setStatus('mandatory')
if mibBuilder.loadTexts: nbsSysTelnetSession.setDescription('This object indicates if there is any TELNET session in progress.')
nbsSysTelnetHost = MibScalar((1, 3, 6, 1, 4, 1, 629, 1, 3, 19), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSysTelnetHost.setStatus('mandatory')
if mibBuilder.loadTexts: nbsSysTelnetHost.setDescription('This object indicates the remote IP host that connected to the local device. It is 0.0.0.0 if there is no active Telnet session')
nbsSysTftpRswFileName = MibScalar((1, 3, 6, 1, 4, 1, 629, 1, 3, 20), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsSysTftpRswFileName.setStatus('mandatory')
if mibBuilder.loadTexts: nbsSysTftpRswFileName.setDescription('The SNMP Agent Remote Software File Name. This is the remote file name string provided to the TFTP Server application by the SNMP Agent TFTP client, when initiating a Firmware Update process. This value is stored in the system NVRAM as well as in the SNMP Agent current configuration.')
nbsSysTftpServerIP = MibScalar((1, 3, 6, 1, 4, 1, 629, 1, 3, 21), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsSysTftpServerIP.setStatus('mandatory')
if mibBuilder.loadTexts: nbsSysTftpServerIP.setDescription('This is the IP Address of the TFTP Server serving the software/parameter download/upload process, initiated by the SNMP agent. It is 0.0.0.0, if there is no TFTP server is defined')
nbsSysInitDownload = MibScalar((1, 3, 6, 1, 4, 1, 629, 1, 3, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2), ("activeAppl", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsSysInitDownload.setStatus('mandatory')
if mibBuilder.loadTexts: nbsSysInitDownload.setDescription('This is used to initiate a download session from the above TFTP server. Note that the only writeable value is active(1) and activeAppl(3), if no session is active at this moment.')
nbsSysParDownload = MibScalar((1, 3, 6, 1, 4, 1, 629, 1, 3, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsSysParDownload.setStatus('mandatory')
if mibBuilder.loadTexts: nbsSysParDownload.setDescription('This is used to initiate a parameter download session from the above TFTP server. Note that the only writeable value is active(1), if no session is active at this moment.')
nbsSysParUpload = MibScalar((1, 3, 6, 1, 4, 1, 629, 1, 3, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsSysParUpload.setStatus('mandatory')
if mibBuilder.loadTexts: nbsSysParUpload.setDescription('This is used to initiate a parameter upload session to the above TFTP server. Note that the only writeable value is active(1), if no session is active at this moment.')
nbsSysPing = MibIdentifier((1, 3, 6, 1, 4, 1, 629, 1, 3, 18))
nbsSysPingSession = MibScalar((1, 3, 6, 1, 4, 1, 629, 1, 3, 18, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("idlePing", 1), ("runPing", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsSysPingSession.setStatus('mandatory')
if mibBuilder.loadTexts: nbsSysPingSession.setDescription('This object controls the activity of the PING process progress. If GET idlePing(1) shows that the ping process is inactive - idle. If SET idlePing(1) stops an active ping process, if any. If GET runPing(2) shows an active ping process. If SET runPing(2) starts an active ping process, if none active. This has to be the last SET in order to activate the PING process')
nbsSysPingAddr = MibScalar((1, 3, 6, 1, 4, 1, 629, 1, 3, 18, 2), IpAddress().clone(hexValue="7F000001")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsSysPingAddr.setStatus('mandatory')
if mibBuilder.loadTexts: nbsSysPingAddr.setDescription('The IP Address to which the Nbase device will ping. Setting this variable initiates the ping sequence. The default value is the loopback address 127.0.0.1 .')
nbsSysPingNumber = MibScalar((1, 3, 6, 1, 4, 1, 629, 1, 3, 18, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsSysPingNumber.setStatus('mandatory')
if mibBuilder.loadTexts: nbsSysPingNumber.setDescription('The number of ICMP echo packets (pings) to be sent. The default value is 1.')
nbsSysPingRequests = MibScalar((1, 3, 6, 1, 4, 1, 629, 1, 3, 18, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSysPingRequests.setStatus('mandatory')
if mibBuilder.loadTexts: nbsSysPingRequests.setDescription('The number of ICMP echo request (pings) sent.')
nbsSysPingResps = MibScalar((1, 3, 6, 1, 4, 1, 629, 1, 3, 18, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSysPingResps.setStatus('mandatory')
if mibBuilder.loadTexts: nbsSysPingResps.setDescription('The number of ICMP echo response packets received.')
nbsSysPingOwner = MibScalar((1, 3, 6, 1, 4, 1, 629, 1, 3, 18, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("adminInterface", 1), ("snmpAgent", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSysPingOwner.setStatus('mandatory')
if mibBuilder.loadTexts: nbsSysPingOwner.setDescription('If a Ping Process is active, then the value of this object shows who activated it: the Administrative Interface or the SNMP Agent . This object value will permit to stop the Ping Process only from the interface that activated it - i.e. the owner.')
nbsPortCfgTable = MibTable((1, 3, 6, 1, 4, 1, 629, 1, 4, 1), )
if mibBuilder.loadTexts: nbsPortCfgTable.setStatus('mandatory')
if mibBuilder.loadTexts: nbsPortCfgTable.setDescription('A list of the port configurations entries. The number of entries is given by nbsSysPortsNumber')
nbsPortCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 629, 1, 4, 1, 1), ).setIndexNames((0, "NBASE-G1-MIB", "nbsPortCfgIndex"))
if mibBuilder.loadTexts: nbsPortCfgEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nbsPortCfgEntry.setDescription('Contains the information necessary to configure/describe a port configuration. The number of rows/entries is fixed. A row/entry may not be created or deleted')
nbsPortCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsPortCfgIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nbsPortCfgIndex.setDescription('A unique value for each switched port. Its value ranges from 1 to the value of nbsSysPortsNumber.')
nbsPortCfgLanType = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("none", 1), ("eth10", 2), ("eth100", 3), ("eth10-100", 4), ("eth100B", 5), ("eth1000B", 6), ("atmLane", 7), ("eth100Grp", 8), ("eth10-100Grp", 9), ("fddi", 10), ("eth100-1000", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsPortCfgLanType.setStatus('mandatory')
if mibBuilder.loadTexts: nbsPortCfgLanType.setDescription('The port LAN type that is installed (if exists)')
nbsPortCfgIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23))).clone(namedValues=NamedValues(("aui", 1), ("tp", 2), ("auiTp", 3), ("tpfd", 4), ("coax", 5), ("foMm", 6), ("foSm", 7), ("none", 8), ("foSxM", 9), ("foLxM", 10), ("foLxS1", 11), ("foLxS2", 12), ("foLxS3", 13), ("foM", 14), ("foMX", 15), ("foS1", 16), ("foS2", 17), ("foS3", 18), ("foLxS4", 19), ("foLxS5", 20), ("foS4", 21), ("foS5", 22), ("foM-10", 23)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsPortCfgIfType.setStatus('mandatory')
if mibBuilder.loadTexts: nbsPortCfgIfType.setDescription('The port physical interface that is installed (if any).')
nbsPortCfgPortSelect = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("aui", 2), ("tp", 3), ("asel", 4))).clone('asel')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsPortCfgPortSelect.setStatus('mandatory')
if mibBuilder.loadTexts: nbsPortCfgPortSelect.setDescription('The port physical interface type selection. For regular 10 Mbps Ethernet Ports, the default value is Auto Select. 100 Base-Tx ports do not support more than one type of physical interface. Setting a not supported type of interface will result in a badValue response')
nbsPortCfgIfLink = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enable", 2), ("disable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsPortCfgIfLink.setStatus('mandatory')
if mibBuilder.loadTexts: nbsPortCfgIfLink.setDescription('The link integrity status. This object is rellevant for a port of type Twisted Pair or Fiber Optic, 10 or 100 Mbps')
nbsPortCfgPortFctrl = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsPortCfgPortFctrl.setStatus('mandatory')
if mibBuilder.loadTexts: nbsPortCfgPortFctrl.setDescription('The port flow control mode selection: enable (default ) or disable')
nbsPortCfgPortDplex = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("halfDuplex", 1), ("fullDuplex", 2))).clone('halfDuplex')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsPortCfgPortDplex.setStatus('mandatory')
if mibBuilder.loadTexts: nbsPortCfgPortDplex.setDescription('The port dplex mode selection: halfDuplex(1) - default or fullDuplex(2) ')
nbsPortCfgPortDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 4, 1, 1, 8), Integer32().clone(64)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsPortCfgPortDelay.setStatus('mandatory')
if mibBuilder.loadTexts: nbsPortCfgPortDelay.setDescription('The port forwarding delay expressed in bytes, with an acceptable range of 6..64 bytes. The default is 64 bytes. This object is supported only by the NH204-AT device')
nbsPortCfgSpeedSelect = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 4, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("autoSense", 1), ("force10", 2), ("force100", 3), ("force1000", 4))).clone('autoSense')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsPortCfgSpeedSelect.setStatus('mandatory')
if mibBuilder.loadTexts: nbsPortCfgSpeedSelect.setDescription('The Ethernet Port speed selection in the case of a eth10-100(4) & eth1000B(6) nbsPortCfgLanType Ethernet port')
nbsPortCfgEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 4, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("portDisable", 1), ("portEnable", 2))).clone('portEnable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsPortCfgEnable.setStatus('mandatory')
if mibBuilder.loadTexts: nbsPortCfgEnable.setDescription('Port Enable/Disable')
nbsPortCfgIsvpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 4, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("access", 1), ("trunk", 2), ("nonIsvp", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsPortCfgIsvpMode.setStatus('mandatory')
if mibBuilder.loadTexts: nbsPortCfgIsvpMode.setDescription('The Inter-Switch Virtual Mode of this port. nonIsvp(3) means the port does not support this mode of operation. Access(1) means the port is in Access mode. Trunk(2) means the port is in Trunk mode.')
nbsPortGrpCfgNum = MibScalar((1, 3, 6, 1, 4, 1, 629, 1, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsPortGrpCfgNum.setStatus('mandatory')
if mibBuilder.loadTexts: nbsPortGrpCfgNum.setDescription('Maximum number of Switching Ports supported by the system.')
nbsPortGrpCfgTable = MibTable((1, 3, 6, 1, 4, 1, 629, 1, 4, 3), )
if mibBuilder.loadTexts: nbsPortGrpCfgTable.setStatus('mandatory')
if mibBuilder.loadTexts: nbsPortGrpCfgTable.setDescription('A list of the port configurations entries. The number of entries is given by nbsSysPortsNumber')
nbsPortGrpCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 629, 1, 4, 3, 1), ).setIndexNames((0, "NBASE-G1-MIB", "nbsPortGrpCfgIndex"))
if mibBuilder.loadTexts: nbsPortGrpCfgEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nbsPortGrpCfgEntry.setDescription('Contains the information necessary to configure/describe a port configuration. The number of rows/entries is fixed. A row/entry may not be created or deleted')
nbsPortGrpCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 4, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsPortGrpCfgIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nbsPortGrpCfgIndex.setDescription('A unique value for each switched port. Its value ranges from 1 to 32.')
nbsPortGrpCfgGrpNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 4, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsPortGrpCfgGrpNumber.setStatus('mandatory')
if mibBuilder.loadTexts: nbsPortGrpCfgGrpNumber.setDescription('number of groups ')
nbsPortGrpCfgPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 4, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsPortGrpCfgPortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: nbsPortGrpCfgPortNumber.setDescription('number of ports in group ')
nbsPortGrpCfgLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 4, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("linkOff", 1), ("linkOn", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsPortGrpCfgLinkStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nbsPortGrpCfgLinkStatus.setDescription('The link status of the port')
nbsPortGrpCfgActivity = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 4, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nonActivity", 1), ("activity", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsPortGrpCfgActivity.setStatus('mandatory')
if mibBuilder.loadTexts: nbsPortGrpCfgActivity.setDescription('The port activity')
nbsEthInfoTable = MibTable((1, 3, 6, 1, 4, 1, 629, 1, 5, 1), )
if mibBuilder.loadTexts: nbsEthInfoTable.setStatus('mandatory')
if mibBuilder.loadTexts: nbsEthInfoTable.setDescription('A list of the port NBase specific Ethernet Statistics. Number of entries is given by nbsSysPortsNumber')
nbsEthInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 629, 1, 5, 1, 1), ).setIndexNames((0, "NBASE-G1-MIB", "nbsEthInfoIndex"))
if mibBuilder.loadTexts: nbsEthInfoEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nbsEthInfoEntry.setDescription('Contains the NBase specific Ethernet Statistics for a port. The number of rows/entries is fixed. A row/entry may not be created or deleted')
nbsEthInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsEthInfoIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nbsEthInfoIndex.setDescription('A unique value for each switched port. Its value ranges from 1 to the value of nbsSysPortsNumber.')
nbsEthInfoCntFctrls = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 5, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsEthInfoCntFctrls.setStatus('mandatory')
if mibBuilder.loadTexts: nbsEthInfoCntFctrls.setDescription('Number of times the flow control mechanism was activated on the specified input port, due to a full buffer on the output port. The number is correct if the flow control mechanism is enabled')
nbsEthInfoCntExcessFctrls = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 5, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsEthInfoCntExcessFctrls.setStatus('mandatory')
if mibBuilder.loadTexts: nbsEthInfoCntExcessFctrls.setDescription('Number of times the flow control mechanism was activated unsuccessfull 15 times. The number is correct if the flow control mechanism is enabled')
nbsSwitchPerfTable = MibTable((1, 3, 6, 1, 4, 1, 629, 1, 6, 1), )
if mibBuilder.loadTexts: nbsSwitchPerfTable.setStatus('mandatory')
if mibBuilder.loadTexts: nbsSwitchPerfTable.setDescription('A list of NBase port specific performance statistics. Number of entries is given by nbsSysPortsNumber')
nbsSwitchPerfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 629, 1, 6, 1, 1), ).setIndexNames((0, "NBASE-G1-MIB", "nbsSwitchPerfIndex"))
if mibBuilder.loadTexts: nbsSwitchPerfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nbsSwitchPerfEntry.setDescription('Contains the NBase specific Ethernet Statistics for a port. The number of rows/entries is fixed. A row/entry may not be created or deleted')
nbsSwitchPerfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSwitchPerfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nbsSwitchPerfIndex.setDescription('A unique value for each switched port. Its value ranges from 1 to the value of nbsSysPortsNumber.')
nbsSwitchPerfMcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 6, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSwitchPerfMcastPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nbsSwitchPerfMcastPkts.setDescription('Number of Multicast packets received by the switching entity on this port')
nbsSwitchPerfUnknPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 6, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSwitchPerfUnknPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nbsSwitchPerfUnknPkts.setDescription('Number of packets received by the switching entity on this port with unknown destination port. As a result these packets were forwarded to all the switch other ports - flooding')
nbsPortFwdPerfTable = MibTable((1, 3, 6, 1, 4, 1, 629, 1, 6, 2), )
if mibBuilder.loadTexts: nbsPortFwdPerfTable.setStatus('mandatory')
if mibBuilder.loadTexts: nbsPortFwdPerfTable.setDescription('A list of the NBase port specific switching performance statistics. Contains the number of packets and bytes forwarded from nbsPortFwdPerfInPort to all other nbsPortFwdPerfOutPort, including itself. Number of entries is given by nbsSysPortsNumber')
nbsPortFwdPerfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 629, 1, 6, 2, 1), ).setIndexNames((0, "NBASE-G1-MIB", "nbsPortFwdPerfInPort"), (0, "NBASE-G1-MIB", "nbsPortFwdPerfOutPort"))
if mibBuilder.loadTexts: nbsPortFwdPerfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nbsPortFwdPerfEntry.setDescription('Contains the NBase specific Switching Performance statistics for a port. Contains the number of packets and bytes forwarded from nbsPortFwdPerfInPort to all other nbsPortFwdPerfOutPort, including itself. The number of rows/entries is fixed. A row/entry may not be created or deleted')
nbsPortFwdPerfInPort = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 6, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsPortFwdPerfInPort.setStatus('mandatory')
if mibBuilder.loadTexts: nbsPortFwdPerfInPort.setDescription('A unique value for each switched port. Its value ranges from 1 to the value of nbsSysPortsNumber.')
nbsPortFwdPerfOutPort = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 6, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsPortFwdPerfOutPort.setStatus('mandatory')
if mibBuilder.loadTexts: nbsPortFwdPerfOutPort.setDescription('A unique value for each switched port. Its value ranges from 1 to the value of nbsSysPortsNumber.')
nbsPortFwdPerfFwdPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 6, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsPortFwdPerfFwdPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nbsPortFwdPerfFwdPkts.setDescription('Number of packets forwarded by the switching entity from nbsPortFwdPerfInPort to nbsPortFwdPerfoutPort')
nbsPortFwdPerfFwdBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 6, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsPortFwdPerfFwdBytes.setStatus('mandatory')
if mibBuilder.loadTexts: nbsPortFwdPerfFwdBytes.setDescription('Number of packets forwarded by the switching entity from nbsPortFwdPerfInPort to nbsPortFwdPerfoutPort')
nbsMgmtPerfStats = MibIdentifier((1, 3, 6, 1, 4, 1, 629, 1, 6, 3))
nbsMgmtPerfRcvdPkts = MibScalar((1, 3, 6, 1, 4, 1, 629, 1, 6, 3, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsMgmtPerfRcvdPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nbsMgmtPerfRcvdPkts.setDescription('Number of packets received by the SNMP Agent through the management port.')
nbsMgmtPerfRcvdBytes = MibScalar((1, 3, 6, 1, 4, 1, 629, 1, 6, 3, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsMgmtPerfRcvdBytes.setStatus('mandatory')
if mibBuilder.loadTexts: nbsMgmtPerfRcvdBytes.setDescription('Number of bytes received by the SNMP Agent through the management port.')
nbsMgmtPerfFilterdPkts = MibScalar((1, 3, 6, 1, 4, 1, 629, 1, 6, 3, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsMgmtPerfFilterdPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nbsMgmtPerfFilterdPkts.setDescription('Number of packets received by the SNMP Agent through the management port, that were discarded because they carried an unknown protocol')
nbsMgmtPerfRcvBcastPkts = MibScalar((1, 3, 6, 1, 4, 1, 629, 1, 6, 3, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsMgmtPerfRcvBcastPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nbsMgmtPerfRcvBcastPkts.setDescription('Number of broadcast packets received by the SNMP Agent through the management port.')
nbsMgmtPerfXmtPkts = MibScalar((1, 3, 6, 1, 4, 1, 629, 1, 6, 3, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsMgmtPerfXmtPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nbsMgmtPerfXmtPkts.setDescription('Number of packets transmitted by the SNMP Agent through the management port. This counter indicates the number of packets generated by the Management Software. A certain packet will be transmitted once, to a single switch port, or multiple times, to multiple switch ports.')
nbsMgmtPerfXmtUcastPkts = MibScalar((1, 3, 6, 1, 4, 1, 629, 1, 6, 3, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsMgmtPerfXmtUcastPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nbsMgmtPerfXmtUcastPkts.setDescription('Number of unicast packets transmitted by the SNMP Agent through the management port.')
nbsMgmtPerfXmtMcastPkts = MibScalar((1, 3, 6, 1, 4, 1, 629, 1, 6, 3, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsMgmtPerfXmtMcastPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nbsMgmtPerfXmtMcastPkts.setDescription('Number of multicast packets transmitted by the SNMP Agent through the management port. This counter indicates the number of packets generated by the Management Software. A certain packet will be transmitted once, to a single switch port, or multiple times, to multiple switch ports.')
nbsMgmtPerfXmtBcastPkts = MibScalar((1, 3, 6, 1, 4, 1, 629, 1, 6, 3, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsMgmtPerfXmtBcastPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nbsMgmtPerfXmtBcastPkts.setDescription('Number of broadcast packets transmitted by the SNMP Agent through the management port. This counter indicates the number of packets generated by the Management Software. A certain packet will be transmitted once, to a single switch port, or multiple times, to multiple switch ports.')
nbsMgmtRcvPerfTable = MibTable((1, 3, 6, 1, 4, 1, 629, 1, 6, 4), )
if mibBuilder.loadTexts: nbsMgmtRcvPerfTable.setStatus('mandatory')
if mibBuilder.loadTexts: nbsMgmtRcvPerfTable.setDescription('A list of the NBase port specific switching performance statistics. Contains the number of packets and bytes forwarded to the Management Port from all the nbsMgmtRcvPerfOutPort ports. Number of entries is given by nbsSysPortsNumber')
nbsMgmtRcvPerfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 629, 1, 6, 4, 1), ).setIndexNames((0, "NBASE-G1-MIB", "nbsMgmtRcvPerfInPort"))
if mibBuilder.loadTexts: nbsMgmtRcvPerfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nbsMgmtRcvPerfEntry.setDescription('Contains the NBase specific Switching Performance statistics for a port. Contains the number of packets and bytes forwarded to the Management Port from all the nbsMgmtRcvPerfOutPort ports. The number of rows/entries is fixed. A row/entry may not be created or deleted')
nbsMgmtRcvPerfInPort = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 6, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsMgmtRcvPerfInPort.setStatus('mandatory')
if mibBuilder.loadTexts: nbsMgmtRcvPerfInPort.setDescription('A unique value for each switched port. Its value ranges from 1 to the value of nbsSysPortsNumber.')
nbsMgmtRcvPerfFwdPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 6, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsMgmtRcvPerfFwdPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nbsMgmtRcvPerfFwdPkts.setDescription('Number of packets forwarded by the switching entity to the Managemnt Port from nbsMgmtRcvPerfOutPort.')
nbsMgmtRcvPerfFwdBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 6, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsMgmtRcvPerfFwdBytes.setStatus('mandatory')
if mibBuilder.loadTexts: nbsMgmtRcvPerfFwdBytes.setDescription('Number of bytes forwarded by the switching entity to the Managemnt Port from nbsMgmtRcvPerfOutPort.')
nbsMgmtXmtPerfTable = MibTable((1, 3, 6, 1, 4, 1, 629, 1, 6, 5), )
if mibBuilder.loadTexts: nbsMgmtXmtPerfTable.setStatus('mandatory')
if mibBuilder.loadTexts: nbsMgmtXmtPerfTable.setDescription('A list of the NBase port specific switching performance statistics. Contains the number of packets and bytes forwarded from the Management Port to all the nbsMgmtXmtPerfOutPort ports. Number of entries is given by nbsSysPortsNumber')
nbsMgmtXmtPerfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 629, 1, 6, 5, 1), ).setIndexNames((0, "NBASE-G1-MIB", "nbsMgmtXmtPerfOutPort"))
if mibBuilder.loadTexts: nbsMgmtXmtPerfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nbsMgmtXmtPerfEntry.setDescription('Contains the NBase specific Switching Performance statistics for a port. Contains the number of packets and bytes forwarded from the Management Port to all the nbsMgmtXmtPerfOutPort ports. The number of rows/entries is fixed. A row/entry may not be created or deleted')
nbsMgmtXmtPerfOutPort = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 6, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsMgmtXmtPerfOutPort.setStatus('mandatory')
if mibBuilder.loadTexts: nbsMgmtXmtPerfOutPort.setDescription('A unique value for each switched port. Its value ranges from 1 to the value of nbsSysPortsNumber.')
nbsMgmtXmtPerfFwdPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 6, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsMgmtXmtPerfFwdPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nbsMgmtXmtPerfFwdPkts.setDescription('Number of packets forwarded by the switching entity from the Managemnt Port to nbsMgmtXmtPerfOutPort.')
nbsMgmtXmtPerfFwdBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 6, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsMgmtXmtPerfFwdBytes.setStatus('mandatory')
if mibBuilder.loadTexts: nbsMgmtXmtPerfFwdBytes.setDescription('Number of bytes forwarded by the switching entity from the Managemnt Port to nbsMgmtXmtPerfOutPort.')
nbsMegaSwRunDb = MibIdentifier((1, 3, 6, 1, 4, 1, 629, 1, 9, 1))
nbsMegaSwPermDb = MibIdentifier((1, 3, 6, 1, 4, 1, 629, 1, 9, 2))
nbsMegaSwRunDbTable = MibTable((1, 3, 6, 1, 4, 1, 629, 1, 9, 1, 1), )
if mibBuilder.loadTexts: nbsMegaSwRunDbTable.setStatus('mandatory')
if mibBuilder.loadTexts: nbsMegaSwRunDbTable.setDescription('A list of the current running Learn Table entries. Number of entries is given by nbsSysSwitchDBSize')
nbsMegaSwRunDbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 629, 1, 9, 1, 1, 1), ).setIndexNames((0, "NBASE-G1-MIB", "nbsMegaSwRunDbIndex"))
if mibBuilder.loadTexts: nbsMegaSwRunDbEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nbsMegaSwRunDbEntry.setDescription('Contains the NBase specific Learn Table entry information. The information is specific to a MAC Address. The number of rows/entries is fixed. A row/entry may not be created or deleted')
nbsMegaSwRunDbIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 9, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsMegaSwRunDbIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nbsMegaSwRunDbIndex.setDescription('A unique value for each Current Switching Data Base Entry. Its value ranges from 1 to the value of nbsSysSwitchDBSize')
nbsMegaSwRunDbStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 9, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("invalid", 1), ("system", 2), ("permanent", 3), ("deleteOnReset", 4), ("deleteOnTimeout", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsMegaSwRunDbStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nbsMegaSwRunDbStatus.setDescription('This object indicates the status of this entry. The default value is deleteOnTimeout(4). invalid(1) - this value indicates a inactive entry. The entry may receive this value either through a management SET operation or by being aged out. system(2) - this value indicates a system entry, i.e. a system address, the broadcast address or the spanning tree group address. permanent(3) - this entry is currently in use and will remain so after the next reset of the switch. This value is legal only for customFilter(2) types of entries. Setting a virtualFilter(1) entry to be permanent(2) will result in a deleteOnReset(3) status. deleteOnReset(4) - this entry is currently in use and will remain so until the next reset of the switch. deleteOnTimeout(5) - this entry is currently in use and will remain so until it is aged out.')
nbsMegaSwRunDbAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 9, 1, 1, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsMegaSwRunDbAddr.setStatus('mandatory')
if mibBuilder.loadTexts: nbsMegaSwRunDbAddr.setDescription('The destination MAC Address in a frame to which this entry forwarding information applies. This object can take the value of a unicast address, a group address or the broadcast address.')
nbsMegaSwRunDbType = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 9, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("virtualFilter", 1), ("customFilter", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsMegaSwRunDbType.setStatus('mandatory')
if mibBuilder.loadTexts: nbsMegaSwRunDbType.setDescription('This object indicates the type of the entry and its adjacent filter. The default value is VirtualFilter(1). virtualFilter(1) - this entry was either learned by the switch or was manually added through a management SET command. It has a set of virtual set of filters associated with it. See Virtual Filters definitions. customFilter (2) - this entry was manually added through a management SET command. This kind of entry is similar to the permanent dot1dStaticEntry. It has a set of destination filters/bitmaps associated with it for each input port')
nbsMegaSwRunDbDport = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 9, 1, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsMegaSwRunDbDport.setStatus('mandatory')
if mibBuilder.loadTexts: nbsMegaSwRunDbDport.setDescription('The port to which a frame containing the entry Mac Address should be forwarded, if it is not overwritten by a Virtual Filter. This object is rellevant for virtualFilter(1) type of entries only')
nbsMegaSwRunFilterTable = MibTable((1, 3, 6, 1, 4, 1, 629, 1, 9, 1, 2), )
if mibBuilder.loadTexts: nbsMegaSwRunFilterTable.setStatus('mandatory')
if mibBuilder.loadTexts: nbsMegaSwRunFilterTable.setDescription('The Switching Data Base : a list of destination filters associated with each MAC Address in the Switching Data Base. A destination filter exists for every possible input port. Number of entries is given by nbsSysPortsNumber plus one for the management port. Legal number of entries are 9 for NH208-AT , 16 for NH215-AT and 8 for NH2007')
nbsMegaSwRunFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 629, 1, 9, 1, 2, 1), ).setIndexNames((0, "NBASE-G1-MIB", "nbsMegaSwRunFilterAddr"), (0, "NBASE-G1-MIB", "nbsMegaSwRunFilterSport"))
if mibBuilder.loadTexts: nbsMegaSwRunFilterEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nbsMegaSwRunFilterEntry.setDescription('Contains the destination filter associated with a MAC Address in the Switching Data Base, when the packet was inputed through nbsMegaSwRunFilterSport port.')
nbsMegaSwRunFilterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 9, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("invalid", 1), ("system", 2), ("permanent", 3), ("deleteOnReset", 4), ("deleteOnTimeout", 5))).clone('deleteOnReset')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsMegaSwRunFilterStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nbsMegaSwRunFilterStatus.setDescription('This object indicates the status of this entry. The default value is deleteOnTimeout(4). invalid(1) - this value indicates a inactive entry. The entry may receive this value either through a management SET operation or by being aged out. Setting this value will delete the entry from the forwarding database. system(2) - this value indicates a system entry, i.e. a system address, the broadcast address or the spanning tree group address. permanent(3) - this entry is currently in use and will remain so after the next reset of the switch. This value is allowed for entries of type customFilter(2). For virtualFilter(1) type setting the status to permanent will result in a deleteOnReset(3) status. deleteOnReset(4) - this entry is currently in use and will remain so until the next reset of the switch. deleteOnTimeout(5) - this entry is currently in use and will remain so until it is aged out.')
nbsMegaSwRunFilterAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 9, 1, 2, 1, 2), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsMegaSwRunFilterAddr.setStatus('mandatory')
if mibBuilder.loadTexts: nbsMegaSwRunFilterAddr.setDescription('The destination MAC Address in a frame to which this entry forwarding information applies. This object can take the value of a unicast address, a group address or the broadcast address. This is the same as the nbsMegaSwRunDbAddr field in nbsMegaSwRunDbEntry')
nbsMegaSwRunFilterType = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 9, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("virtualFilter", 1), ("customFilter", 2))).clone('virtualFilter')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsMegaSwRunFilterType.setStatus('mandatory')
if mibBuilder.loadTexts: nbsMegaSwRunFilterType.setDescription('This object indicates the type of the entry and its adjacent filter. The default value is VirtualFilter(1). virtualFilter(1) - this entry was either learned by the switch or was manually added through a management SET command. It has a set of virtual set of filters associated with it. See Virtual Filters definitions. customFilter (2) - this entry was manually added through a management SET command. This kind of entry is similar to the permanent dot1dStaticEntry. It has a set of destination filters/bitmaps associated with it for each input port')
nbsMegaSwRunFilterDport = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 9, 1, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsMegaSwRunFilterDport.setStatus('mandatory')
if mibBuilder.loadTexts: nbsMegaSwRunFilterDport.setDescription('The port to which a frame containing the entry Mac Address would be forwarded, if it is not overwritten by a Virtual Filter. This object is rellevant for virtualFilter(1) type of entries only')
nbsMegaSwRunFilterSport = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 9, 1, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsMegaSwRunFilterSport.setStatus('mandatory')
if mibBuilder.loadTexts: nbsMegaSwRunFilterSport.setDescription("A unique value that shows for which input/source port the adjacent filter/dport map should be used. At creation time this object should not be given the value 0. It's range should be 1 to the number of ports")
nbsMegaSwRunFilterDmap = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 9, 1, 2, 1, 6), OctetString().clone(hexValue="ffff")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsMegaSwRunFilterDmap.setStatus('mandatory')
if mibBuilder.loadTexts: nbsMegaSwRunFilterDmap.setDescription("The Destination Port Bit Map = the set of ports to which the incoming packet is to be forwarded. Each octet within the value of this object specifies a set of eight ports, with the first octet specifying ports 0 through 7, the second octet specifying ports 8 through 15, etc. Within each octet, the most significant bit represents the lowest numbered port, and the least significant bit represents the highest numbered port. Thus, each port of the switch is represented by a single bit within the value of this object. If that bit has a value of <1> then that port is included in the set of ports; the port is not included if its bit has a value of <0>. (Note that the setting of the bit corresponding to the port from which a frame is received is irrelevant). Port 0 means the SNMP agent. The default value of this object is a string of ones of appropriate length, except for the source port bit and the SNMP agent port(port 0). Modifing this fields is rellevant only for customFilter(2) type of entries. Deleting the filter for a specific source port means writing the default value - all 1's.")
nbsMegaSwSvlanConnectTable = MibTable((1, 3, 6, 1, 4, 1, 629, 1, 9, 1, 3), )
if mibBuilder.loadTexts: nbsMegaSwSvlanConnectTable.setStatus('mandatory')
if mibBuilder.loadTexts: nbsMegaSwSvlanConnectTable.setDescription('A set of octet strings/filters showing the Virtual LANs Connectivity Matrix. A filter exists for every possible input port. Number of entries is given by nbsSysPortsNumber plus one for the management port. Legal number of entries are 9 for NH208-AT, 16 for NH215-AT and 8 for NH2007')
nbsMegaSwSvlanConnectEntry = MibTableRow((1, 3, 6, 1, 4, 1, 629, 1, 9, 1, 3, 1), ).setIndexNames((0, "NBASE-G1-MIB", "nbsMegaSwSvlanConnectSport"))
if mibBuilder.loadTexts: nbsMegaSwSvlanConnectEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nbsMegaSwSvlanConnectEntry.setDescription('Contains the destination filter associated with the input port nbsMegaSwSvlanConnectSport.')
nbsMegaSwSvlanConnectSport = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 9, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsMegaSwSvlanConnectSport.setStatus('mandatory')
if mibBuilder.loadTexts: nbsMegaSwSvlanConnectSport.setDescription('A unique value that shows for which input/source port the adjacent filter/dport map should be used.')
nbsMegaSwSvlanConnectDport = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 9, 1, 3, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsMegaSwSvlanConnectDport.setStatus('mandatory')
if mibBuilder.loadTexts: nbsMegaSwSvlanConnectDport.setDescription("The Destination Port Bit Map = the set of ports to which the incoming packet is to be forwarded. Each octet within the value of this object specifies a set of eight ports, with the first octet specifying ports 1 through 8, the second octet specifying ports 9 through 16, etc. Within each octet, the most significant bit represents the lowest numbered port, and the least significant bit represents the highest numbered port. Thus, each port of the switch is represented by a single bit within the value of this object. If that bit has a value of <1> then that port is included in the set of ports; the port is not included if its bit has a value of <0>. (Note that the setting of the bit corresponding to the port from which a frame is received is irrelevant.) The default value of this object is a string of ones of appropriate length, except for the source port bit. Deleteing the filter for a specific source port means writing the default value - all 1's.")
nbsMegaSwRunSvlanDb = MibIdentifier((1, 3, 6, 1, 4, 1, 629, 1, 9, 1, 4))
nbsMegaSwRunSvlanMaxNum = MibScalar((1, 3, 6, 1, 4, 1, 629, 1, 9, 1, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsMegaSwRunSvlanMaxNum.setStatus('mandatory')
if mibBuilder.loadTexts: nbsMegaSwRunSvlanMaxNum.setDescription('Maximum number of Security Virtual LANs that are supported')
nbsMegaSwRunSvlanTable = MibTable((1, 3, 6, 1, 4, 1, 629, 1, 9, 1, 4, 2), )
if mibBuilder.loadTexts: nbsMegaSwRunSvlanTable.setStatus('mandatory')
if mibBuilder.loadTexts: nbsMegaSwRunSvlanTable.setDescription('A list of the current Security Virtual LANs defined. Number of entries is given by nbsMegaSwRunSvlanMaxNum')
nbsMegaSwRunSvlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 629, 1, 9, 1, 4, 2, 1), ).setIndexNames((0, "NBASE-G1-MIB", "nbsMegaSwRunSvlanIndex"))
if mibBuilder.loadTexts: nbsMegaSwRunSvlanEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nbsMegaSwRunSvlanEntry.setDescription('Contains the descriptor of a Security Virtual LAN.')
nbsMegaSwRunSvlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 9, 1, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsMegaSwRunSvlanIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nbsMegaSwRunSvlanIndex.setDescription('The serial number of this entry in the nbsMegaSwRunSvlanTbl. It may range from 1 to the value of nbsMegaSwRunSvlanMaxNum.')
nbsMegaSwRunSvlanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 9, 1, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsMegaSwRunSvlanStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nbsMegaSwRunSvlanStatus.setDescription('The object is used to create/delete entries in the nbsMegaSwRunSvlanTable table. Setting this value to invalid(2) for a certain nbsMegaSwRunSvlanIndex, deletes this entry. To create a new entry a SET PDU with the nbsMegaSwRunSvlanList and nbsMegaSwRunSvlanStatus=valid(1) objects is required.')
nbsMegaSwRunSvlanList = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 9, 1, 4, 2, 1, 3), OctetString().clone(hexValue="ffff")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsMegaSwRunSvlanList.setStatus('mandatory')
if mibBuilder.loadTexts: nbsMegaSwRunSvlanList.setDescription('Contains the list of the ports grouped together in this Security Virtual LAN. The representation is a bit map. Each octet within the value of this object specifies a set of eight ports, with the first octet specifying ports 1 through 8, the second octet specifying ports 9 through 16, etc. Within each octet, the most significant bit represents the lowest numbered port, and the least significant bit represents the highest numbered port. Thus, each port of the switch is represented by a single bit within the value of this object. If that bit has a value of <1> then that port is included in the set of ports; the port is not included if its bit has a value of <0>. (Note that the setting of the bit corresponding to the port from which a frame is received is irrelevant.) The default value of this object is a string of ones of appropriate length, except for the source port bit.')
nbsMegaSwRunSvlanIsvlanFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 9, 1, 4, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsMegaSwRunSvlanIsvlanFlag.setStatus('mandatory')
if mibBuilder.loadTexts: nbsMegaSwRunSvlanIsvlanFlag.setDescription("This object indicates if this 'intra-switch' VLAN entry was added by defining an inter-switch VLAN. The entries that have this flag TRUE may not be edited using this access. ")
nbsMegaSwRunIsvlanMaxNum = MibScalar((1, 3, 6, 1, 4, 1, 629, 1, 9, 1, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsMegaSwRunIsvlanMaxNum.setStatus('mandatory')
if mibBuilder.loadTexts: nbsMegaSwRunIsvlanMaxNum.setDescription('Maximum number of InterSwitch Security Virtual LANs that are supported')
nbsMegaSwRunIsvlanTable = MibTable((1, 3, 6, 1, 4, 1, 629, 1, 9, 1, 4, 4), )
if mibBuilder.loadTexts: nbsMegaSwRunIsvlanTable.setStatus('mandatory')
if mibBuilder.loadTexts: nbsMegaSwRunIsvlanTable.setDescription('A list of the current InetrSwitch Security Virtual LANs defined. Number of entries is given by nbsMegaSwRunSvlanMaxNum')
nbsMegaSwRunIsvlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 629, 1, 9, 1, 4, 4, 1), ).setIndexNames((0, "NBASE-G1-MIB", "nbsMegaSwRunIsvlanIndex"))
if mibBuilder.loadTexts: nbsMegaSwRunIsvlanEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nbsMegaSwRunIsvlanEntry.setDescription('Contains the descriptor of a InterSwitch Security Virtual LAN.')
nbsMegaSwRunIsvlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 9, 1, 4, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsMegaSwRunIsvlanIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nbsMegaSwRunIsvlanIndex.setDescription('The serial number of this entry in the nbsMegaSwRunIsvlanTbl. It may range from 1 to the value of nbsMegaSwRunIsvlanMaxNum.')
nbsMegaSwRunIsvlanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 9, 1, 4, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2), ("mcast", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsMegaSwRunIsvlanStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nbsMegaSwRunIsvlanStatus.setDescription('The object is used to create/delete entries in the nbsMegaSwRunIsvlanTable table. Setting this value to invalid(2) for a certain nbsMegaSwRunIsvlanIndex, deletes this entry. To create a new entry a SET PDU with the nbsMegaSwRunIsvlanList and nbsMegaSwRunIsvlanStatus=valid(1) objects is required. -- ykfix33 - 1.03.00 Vlans with mcast(3) status are created by IGMP application -- ykfix33 - 1.03.00 in runtime and have tags from 3001 till 4095. -- ykfix33 - 1.03.00 This value is only for GET SNMP command.')
nbsMegaSwRunIsvlanList = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 9, 1, 4, 4, 1, 3), OctetString().clone(hexValue="ffff")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsMegaSwRunIsvlanList.setStatus('mandatory')
if mibBuilder.loadTexts: nbsMegaSwRunIsvlanList.setDescription('Contains the list of the ports grouped together in this Security Virtual LAN. The representation is a bit map. Each octet within the value of this object specifies a set of eight ports, with the first octet specifying ports 1 through 8, the second octet specifying ports 9 through 16, etc. Within each octet, the most significant bit represents the lowest numbered port, and the least significant bit represents the highest numbered port. Thus, each port of the switch is represented by a single bit within the value of this object. If that bit has a value of <1> then that port is included in the set of ports; the port is not included if its bit has a value of <0>. (Note that the setting of the bit corresponding to the port from which a frame is received is irrelevant.) The default value of this object is a string of ones of appropriate length, except for the source port bit.')
nbsMegaSwRunIsvlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 9, 1, 4, 4, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsMegaSwRunIsvlanName.setStatus('mandatory')
if mibBuilder.loadTexts: nbsMegaSwRunIsvlanName.setDescription('Contains an optional name for the VLAN.')
nbsMegaSwRunIsvlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 9, 1, 4, 4, 1, 5), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsMegaSwRunIsvlanTag.setStatus('mandatory')
if mibBuilder.loadTexts: nbsMegaSwRunIsvlanTag.setDescription('A 12 bit Port VLAN Identifier for this Port. 0 - The Null VLAN ID.used when the Tag Header contains only user_priority information; No VLAN identifier is present in the frame. This number is not allowed here. 1 - The Default PVID value used for tagging frames through a Bridge Port. The PVID used for tagging of frames can be changed by management. MegaSwitch II ISVLAN card supports up to 8 bits, i.e. values of 0..256. ')
nbsMegaSwRunIsvlanVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 9, 1, 4, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsMegaSwRunIsvlanVlanIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nbsMegaSwRunIsvlanVlanIndex.setDescription('Contains an index in the nbsMegaSwRunSvlanTable for this InterSwitch VLAN.')
nbsMegaSwRunVbcDb = MibIdentifier((1, 3, 6, 1, 4, 1, 629, 1, 9, 1, 5))
nbsMegaSwRunVbcMaxNum = MibScalar((1, 3, 6, 1, 4, 1, 629, 1, 9, 1, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsMegaSwRunVbcMaxNum.setStatus('mandatory')
if mibBuilder.loadTexts: nbsMegaSwRunVbcMaxNum.setDescription('Maximum number of Virtual Broadcast Domains that are supported')
nbsMegaSwRunVbcTable = MibTable((1, 3, 6, 1, 4, 1, 629, 1, 9, 1, 5, 2), )
if mibBuilder.loadTexts: nbsMegaSwRunVbcTable.setStatus('mandatory')
if mibBuilder.loadTexts: nbsMegaSwRunVbcTable.setDescription('A list of the current Virtual Broadcast Domains defined. Number of entries is given by nbsMegaSwRunVbcMaxNum')
nbsMegaSwRunVbcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 629, 1, 9, 1, 5, 2, 1), ).setIndexNames((0, "NBASE-G1-MIB", "nbsMegaSwRunVbcIndex"))
if mibBuilder.loadTexts: nbsMegaSwRunVbcEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nbsMegaSwRunVbcEntry.setDescription('Contains the list of ports included in a Virtual Broadcast Domain.')
nbsMegaSwRunVbcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 9, 1, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsMegaSwRunVbcIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nbsMegaSwRunVbcIndex.setDescription('The serial number of this entry in the nbsMegaSwRunVbcTbl. It may range from 1 to the value of nbsMegaSwRunVbcMaxNum.')
nbsMegaSwRunVbcStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 9, 1, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsMegaSwRunVbcStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nbsMegaSwRunVbcStatus.setDescription('The object is used to create/delete entries in the nbsMegaSwRunVbcTable table. Setting this value to invalid(2) for a certain nbsMegaSwRunVbcIndex, deletes this entry. To create a new entry a SET PDU with the nbsMegaSwRunVbcList and nbsMegaSwRunVbcStatus=valid(1) objects is required.')
nbsMegaSwRunVbcList = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 9, 1, 5, 2, 1, 3), OctetString().clone(hexValue="ffff")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsMegaSwRunVbcList.setStatus('mandatory')
if mibBuilder.loadTexts: nbsMegaSwRunVbcList.setDescription('Contains the list of the ports grouped together in this Virtual Broadcast Domain. The representation is a bit map. Each octet within the value of this object specifies a set of eight ports, with the first octet specifying ports 1 through 8, the second octet specifying ports 9 through 16, etc. Within each octet, the most significant bit represents the lowest numbered port, and the least significant bit represents the highest numbered port. Thus, each port of the switch is represented by a single bit within the value of this object. If that bit has a value of <1> then that port is included in the set of ports; the port is not included if its bit has a value of <0>. (Note that the setting of the bit corresponding to the port from which a frame is received is irrelevant.) The default value of this object is a string of ones of appropriate length, except for the source port bit.')
nbsMegaSwVmon = MibIdentifier((1, 3, 6, 1, 4, 1, 629, 1, 9, 1, 6))
nbsMegaSwVmonMonitorPort = MibScalar((1, 3, 6, 1, 4, 1, 629, 1, 9, 1, 6, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsMegaSwVmonMonitorPort.setStatus('mandatory')
if mibBuilder.loadTexts: nbsMegaSwVmonMonitorPort.setDescription('The port containing the Monitor Probe/Lan Analyser. Its value is in the range 1 to nbsSysPortsNumber. After system reset its value will be zero, signfying an unitialized Virtual Monitor Capability.')
nbsMegaSwVmonMonitrdPort = MibScalar((1, 3, 6, 1, 4, 1, 629, 1, 9, 1, 6, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsMegaSwVmonMonitrdPort.setStatus('mandatory')
if mibBuilder.loadTexts: nbsMegaSwVmonMonitrdPort.setDescription('The port to be monitored. Its value is in the range 1 to nbsSysPortsNumber. After system reset its value will be zero, signfying an unitialized Virtual Monitor Capability.')
nbsMegaSwVmonStatus = MibScalar((1, 3, 6, 1, 4, 1, 629, 1, 9, 1, 6, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("nonInit", 1), ("startMon", 2), ("stopMon", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsMegaSwVmonStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nbsMegaSwVmonStatus.setDescription('The status of the monitoring process. It allows to poll the state of the monitoring process - GET. Setting this object to startMon(3) value will start the monitoring process, unless the system is not initialized in nonInit(1) state. Setting this object to stopMon(3) value will stop the monitoring process, if any active, bringing it to idle. Setting this object to nonInit(3) value is illegal. This value is for GET operation only.')
nbsMegaSwPermSvlanDb = MibIdentifier((1, 3, 6, 1, 4, 1, 629, 1, 9, 2, 1))
nbsMegaSwPermSvlanMaxNum = MibScalar((1, 3, 6, 1, 4, 1, 629, 1, 9, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsMegaSwPermSvlanMaxNum.setStatus('mandatory')
if mibBuilder.loadTexts: nbsMegaSwPermSvlanMaxNum.setDescription('Maximum number of Security Virtual LANs that are supported')
nbsMegaSwPermSvlanTable = MibTable((1, 3, 6, 1, 4, 1, 629, 1, 9, 2, 1, 2), )
if mibBuilder.loadTexts: nbsMegaSwPermSvlanTable.setStatus('mandatory')
if mibBuilder.loadTexts: nbsMegaSwPermSvlanTable.setDescription('A list of the current Security Virtual LANs defined. Number of entries is given by nbsMegaSwPermSvlanMaxNum')
nbsMegaSwPermSvlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 629, 1, 9, 2, 1, 2, 1), ).setIndexNames((0, "NBASE-G1-MIB", "nbsMegaSwPermSvlanIndex"))
if mibBuilder.loadTexts: nbsMegaSwPermSvlanEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nbsMegaSwPermSvlanEntry.setDescription('Contains the list of ports included in a Virtual LAN.')
nbsMegaSwPermSvlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 9, 2, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsMegaSwPermSvlanIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nbsMegaSwPermSvlanIndex.setDescription('The serial number of this entry in the nbsMegaSwPermSvlanTbl. It may range from 1 to the value of nbsMegaSwPermSvlanMaxNum')
nbsMegaSwPermSvlanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 9, 2, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsMegaSwPermSvlanStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nbsMegaSwPermSvlanStatus.setDescription('The object is used to create/delete entries in the nbsMegaSwPermSvlanTable table. Setting this value to invalid(2) for a certain nbsMegaSwPermSvlanIndex, deletes this entry. To create a new entry a SET PDU with the nbsMegaSwPermSvlanList and nbsMegaSwPermSvlanStatus set to valid(1) objects is required.')
nbsMegaSwPermSvlanList = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 9, 2, 1, 2, 1, 3), OctetString().clone(hexValue="ffff")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsMegaSwPermSvlanList.setStatus('mandatory')
if mibBuilder.loadTexts: nbsMegaSwPermSvlanList.setDescription('Contains the list of the ports grouped together in this Security Virtual LAN. The representation is a bit map. Each octet within the value of this object specifies a set of eight ports, with the first octet specifying ports 1 through 8, the second octet specifying ports 9 through 16, etc. Within each octet, the most significant bit represents the lowest numbered port, and the least significant bit represents the highest numbered port. Thus, each port of the switch is represented by a single bit within the value of this object. If that bit has a value of <1> then that port is included in the set of ports; the port is not included if its bit has a value of <0>. (Note that the setting of the bit corresponding to the port from which a frame is received is irrelevant.) The default value of this object is a string of ones of appropriate length, except for the source port bit.')
nbsMegaSwPermIsvlanMaxNum = MibScalar((1, 3, 6, 1, 4, 1, 629, 1, 9, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsMegaSwPermIsvlanMaxNum.setStatus('mandatory')
if mibBuilder.loadTexts: nbsMegaSwPermIsvlanMaxNum.setDescription('Maximum number of InterSwitch Security Virtual LANs that are supported')
nbsMegaSwPermIsvlanTable = MibTable((1, 3, 6, 1, 4, 1, 629, 1, 9, 2, 1, 4), )
if mibBuilder.loadTexts: nbsMegaSwPermIsvlanTable.setStatus('mandatory')
if mibBuilder.loadTexts: nbsMegaSwPermIsvlanTable.setDescription('A list of the current InetrSwitch Security Virtual LANs defined. Number of entries is given by nbsMegaSwPermSvlanMaxNum')
nbsMegaSwPermIsvlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 629, 1, 9, 2, 1, 4, 1), ).setIndexNames((0, "NBASE-G1-MIB", "nbsMegaSwPermIsvlanIndex"))
if mibBuilder.loadTexts: nbsMegaSwPermIsvlanEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nbsMegaSwPermIsvlanEntry.setDescription('Contains the descriptor of a InterSwitch Security Virtual LAN.')
nbsMegaSwPermIsvlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 9, 2, 1, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsMegaSwPermIsvlanIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nbsMegaSwPermIsvlanIndex.setDescription('The serial number of this entry in the nbsMegaSwPermIsvlanTbl. It may range from 1 to the value of nbsMegaSwPermIsvlanMaxNum.')
nbsMegaSwPermIsvlanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 9, 2, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2), ("mcast", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsMegaSwPermIsvlanStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nbsMegaSwPermIsvlanStatus.setDescription('The object is used to create/delete entries in the nbsMegaSwPermIsvlanTable table. Setting this value to invalid(2) for a certain nbsMegaSwPermIsvlanIndex, deletes this entry. To create a new entry a SET PDU with the nbsMegaSwPermIsvlanList and nbsMegaSwPermIsvlanStatus=valid(1) objects is required. -- ykfix33 - 1.03.00 Vlans with mcast(3) status are created by IGMP application -- ykfix33 - 1.03.00 in runtime and have tags from 3001 till 4095. -- ykfix33 - 1.03.00 This value is only for GET SNMP command.')
nbsMegaSwPermIsvlanList = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 9, 2, 1, 4, 1, 3), OctetString().clone(hexValue="ffff")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsMegaSwPermIsvlanList.setStatus('mandatory')
if mibBuilder.loadTexts: nbsMegaSwPermIsvlanList.setDescription('Contains the list of the ports grouped together in this Security Virtual LAN. The representation is a bit map. Each octet within the value of this object specifies a set of eight ports, with the first octet specifying ports 1 through 8, the second octet specifying ports 9 through 16, etc. Within each octet, the most significant bit represents the lowest numbered port, and the least significant bit represents the highest numbered port. Thus, each port of the switch is represented by a single bit within the value of this object. If that bit has a value of <1> then that port is included in the set of ports; the port is not included if its bit has a value of <0>. (Note that the setting of the bit corresponding to the port from which a frame is received is irrelevant.) The default value of this object is a string of ones of appropriate length, except for the source port bit.')
nbsMegaSwPermIsvlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 9, 2, 1, 4, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsMegaSwPermIsvlanName.setStatus('mandatory')
if mibBuilder.loadTexts: nbsMegaSwPermIsvlanName.setDescription('Contains an optional name for the VLAN.')
nbsMegaSwPermIsvlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 9, 2, 1, 4, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsMegaSwPermIsvlanTag.setStatus('mandatory')
if mibBuilder.loadTexts: nbsMegaSwPermIsvlanTag.setDescription('A 12 bit Port VLAN Identifier for this Port. 0 - The Null VLAN ID.used when the Tag Header contains only user_priority information; No VLAN identifier is present in the frame. This number is not allowed here. 1 - The Default PVID value used for tagging frames through a Bridge Port. The PVID used for tagging of frames can be changed by management. MegaSwitch II ISVLAN card supports up to 8 bits, i.e. values of 0..256. ')
nbsMegaSwPermVbcDb = MibIdentifier((1, 3, 6, 1, 4, 1, 629, 1, 9, 2, 2))
nbsMegaSwPermVbcMaxNum = MibScalar((1, 3, 6, 1, 4, 1, 629, 1, 9, 2, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsMegaSwPermVbcMaxNum.setStatus('mandatory')
if mibBuilder.loadTexts: nbsMegaSwPermVbcMaxNum.setDescription('Maximum number of Virtual Broadcast Domains that are supported')
nbsMegaSwPermVbcTable = MibTable((1, 3, 6, 1, 4, 1, 629, 1, 9, 2, 2, 2), )
if mibBuilder.loadTexts: nbsMegaSwPermVbcTable.setStatus('mandatory')
if mibBuilder.loadTexts: nbsMegaSwPermVbcTable.setDescription('A list of the current Virtual Broadcast Domains defined. Number of entries is given by nbsMegaSwPermVbcMaxNum')
nbsMegaSwPermVbcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 629, 1, 9, 2, 2, 2, 1), ).setIndexNames((0, "NBASE-G1-MIB", "nbsMegaSwPermVbcIndex"))
if mibBuilder.loadTexts: nbsMegaSwPermVbcEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nbsMegaSwPermVbcEntry.setDescription('Contains the list of ports included in a Virtual Broadcast Domain.')
nbsMegaSwPermVbcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 9, 2, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsMegaSwPermVbcIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nbsMegaSwPermVbcIndex.setDescription('The serial number of this entry in the nbsMegaSwPermVbcTbl. It may range from 1 to the value of nbsMegaSwPermVbcMaxNum.')
nbsMegaSwPermVbcStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 9, 2, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsMegaSwPermVbcStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nbsMegaSwPermVbcStatus.setDescription('The object is used to create/delete entries in the nbsMegaSwPermVbcTable table. Setting this value to invalid(2) for a certain nbsMegaSwPermVbcIndex, deletes this entry. To create a new entry a SET PDU with the nbsMegaSwPermVbcList and nbsMegaSwPermVbcStatus set to valid(1) is required.')
nbsMegaSwPermVbcList = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 9, 2, 2, 2, 1, 3), OctetString().clone(hexValue="ffff")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsMegaSwPermVbcList.setStatus('mandatory')
if mibBuilder.loadTexts: nbsMegaSwPermVbcList.setDescription('Contains the list of the ports grouped together in this Virtual Broadcast Domain. The representation is a bit map. Each octet within the value of this object specifies a set of eight ports, with the first octet specifying ports 1 through 8, the second octet specifying ports 9 through 16, etc. Within each octet, the most significant bit represents the lowest numbered port, and the least significant bit represents the highest numbered port. Thus, each port of the switch is represented by a single bit within the value of this object. If that bit has a value of <1> then that port is included in the set of ports; the port is not included if its bit has a value of <0>. Note that the setting of the bit corresponding to the port from which a frame is received is irrelevant. The default value of this object is a string of ones of appropriate length, except for the source port bit.')
nbsTpPermAgingTime = MibScalar((1, 3, 6, 1, 4, 1, 629, 1, 9, 2, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsTpPermAgingTime.setStatus('mandatory')
if mibBuilder.loadTexts: nbsTpPermAgingTime.setDescription('Switching Data Base Aging Time - NVRAM based. Legal values are 1 to 27000.')
mibBuilder.exportSymbols("NBASE-G1-MIB", nbsMegaSwPermVbcStatus=nbsMegaSwPermVbcStatus, nbsMegaSwPermVbcEntry=nbsMegaSwPermVbcEntry, nbsMegaSwRunFilterSport=nbsMegaSwRunFilterSport, nbsSysFrmGenDa=nbsSysFrmGenDa, nbsPortCfgPortDelay=nbsPortCfgPortDelay, nbsMegaSwRunVbcIndex=nbsMegaSwRunVbcIndex, nbsMegaSwPermSvlanStatus=nbsMegaSwPermSvlanStatus, nbsMegaSwPermIsvlanTag=nbsMegaSwPermIsvlanTag, nbsSysTftpRswFileName=nbsSysTftpRswFileName, nbsSysPingNumber=nbsSysPingNumber, nbsMegaSwRunVbcList=nbsMegaSwRunVbcList, nbsMegaSwSvlanConnectTable=nbsMegaSwSvlanConnectTable, nbsMegaSwRunFilterDmap=nbsMegaSwRunFilterDmap, nbsPortCfgIfLink=nbsPortCfgIfLink, nbsSysSerialLineMode=nbsSysSerialLineMode, nbsPortGrpCfgIndex=nbsPortGrpCfgIndex, nbsMegaSwRunFilterType=nbsMegaSwRunFilterType, nbsSysDefaultGateway=nbsSysDefaultGateway, nbsSys=nbsSys, nbsMegaSwRunSvlanTable=nbsMegaSwRunSvlanTable, nbsEthInfoEntry=nbsEthInfoEntry, nbsSwitchPerf=nbsSwitchPerf, nbsMgmtXmtPerfEntry=nbsMgmtXmtPerfEntry, nbsMgmtXmtPerfFwdPkts=nbsMgmtXmtPerfFwdPkts, nbsMegaSwRunSvlanEntry=nbsMegaSwRunSvlanEntry, nbsPortCfgIfType=nbsPortCfgIfType, nbsMegaSwRunVbcStatus=nbsMegaSwRunVbcStatus, nbsSysPingSession=nbsSysPingSession, nbsMegaSwPermSvlanDb=nbsMegaSwPermSvlanDb, nbsEtherInfo=nbsEtherInfo, nbsSysTftpParFileName=nbsSysTftpParFileName, nbsPortFwdPerfOutPort=nbsPortFwdPerfOutPort, nbsMegaSwPermDb=nbsMegaSwPermDb, nbsSysFrmGen=nbsSysFrmGen, nbsPortCfgPortFctrl=nbsPortCfgPortFctrl, nbsMegaSwRunDbStatus=nbsMegaSwRunDbStatus, nbsMegaSwRunVbcEntry=nbsMegaSwRunVbcEntry, MacAddress=MacAddress, nbsSysTrapTable=nbsSysTrapTable, megaSwitch215=megaSwitch215, nbsMegaSwRunSvlanDb=nbsMegaSwRunSvlanDb, nbsEthInfoCntFctrls=nbsEthInfoCntFctrls, nbsMgmtRcvPerfFwdBytes=nbsMgmtRcvPerfFwdBytes, nbsMegaSwRunSvlanList=nbsMegaSwRunSvlanList, nbase=nbase, nbsSysTrapTblEntIndex=nbsSysTrapTblEntIndex, nbsSysTrapTblEntComm=nbsSysTrapTblEntComm, nbsSysPingOwner=nbsSysPingOwner, nbsMegaSwRunFilterDport=nbsMegaSwRunFilterDport, nbsMegaSwRunDbEntry=nbsMegaSwRunDbEntry, nbsSysTrapTblMaxSize=nbsSysTrapTblMaxSize, nbsPortGrpCfgGrpNumber=nbsPortGrpCfgGrpNumber, nbsMegaSwPermSvlanList=nbsMegaSwPermSvlanList, nbsMegaSwRunIsvlanList=nbsMegaSwRunIsvlanList, nbsSysFrmGenSa=nbsSysFrmGenSa, nbsSysObBcastAddr=nbsSysObBcastAddr, nbsMegaSwPermSvlanIndex=nbsMegaSwPermSvlanIndex, nbsSysBcastAddr=nbsSysBcastAddr, nbsMegaSwRunFilterEntry=nbsMegaSwRunFilterEntry, nbsSysSetNvramDefaults=nbsSysSetNvramDefaults, nbsMegaSwRunIsvlanTag=nbsMegaSwRunIsvlanTag, nbsPortGrpCfgNum=nbsPortGrpCfgNum, nbsSysStpEnable=nbsSysStpEnable, nbsPortCfgPortSelect=nbsPortCfgPortSelect, nbsMegaSwRunDbDport=nbsMegaSwRunDbDport, nbsSysSelftestLevel=nbsSysSelftestLevel, nbsMegaSwRunFilterAddr=nbsMegaSwRunFilterAddr, nbsMgmtXmtPerfOutPort=nbsMgmtXmtPerfOutPort, nbsSysResetSwitchStats=nbsSysResetSwitchStats, nbsSysTftpServerIP=nbsSysTftpServerIP, nbsPortFwdPerfFwdPkts=nbsPortFwdPerfFwdPkts, nbsMgmtPerfXmtPkts=nbsMgmtPerfXmtPkts, nbsMegaSwRunIsvlanVlanIndex=nbsMegaSwRunIsvlanVlanIndex, nbsMegaSwPermIsvlanStatus=nbsMegaSwPermIsvlanStatus, nbsSysLastError=nbsSysLastError, nbsSwitchPerfMcastPkts=nbsSwitchPerfMcastPkts, nbsMegaSwRunDbType=nbsMegaSwRunDbType, nbsSysTrapTblEntIpAddr=nbsSysTrapTblEntIpAddr, nbsPortCfgEnable=nbsPortCfgEnable, nbsSysTftpSwFileName=nbsSysTftpSwFileName, nbsSwitchPerfUnknPkts=nbsSwitchPerfUnknPkts, nbsTpPermAgingTime=nbsTpPermAgingTime, nbsMegaSwPermIsvlanEntry=nbsMegaSwPermIsvlanEntry, nbsMegaSwPermSvlanMaxNum=nbsMegaSwPermSvlanMaxNum, nbsSysFrmGenPktNum=nbsSysFrmGenPktNum, nbsMegaSwPermVbcTable=nbsMegaSwPermVbcTable, nbsMegaSwPermVbcList=nbsMegaSwPermVbcList, nbsMiniSwDb=nbsMiniSwDb, nbsMgmtPerfRcvdBytes=nbsMgmtPerfRcvdBytes, nbsSysPingResps=nbsSysPingResps, nbsSwitchPerfEntry=nbsSwitchPerfEntry, nbsPortCfgTable=nbsPortCfgTable, nbsMegaSwPermVbcDb=nbsMegaSwPermVbcDb, nbsMegaSwPermVbcIndex=nbsMegaSwPermVbcIndex, nbsMegaSwVmonStatus=nbsMegaSwVmonStatus, nbsMegaSwRunDb=nbsMegaSwRunDb, nbsPortFwdPerfTable=nbsPortFwdPerfTable, megaSwitch2015=megaSwitch2015, nbsSysFrmGenXmtPktNum=nbsSysFrmGenXmtPktNum, nbsMgmtPerfRcvdPkts=nbsMgmtPerfRcvdPkts, nbsMegaSwVmonMonitorPort=nbsMegaSwVmonMonitorPort, nbsMgmtPerfRcvBcastPkts=nbsMgmtPerfRcvBcastPkts, nbsMegaSwSvlanConnectEntry=nbsMegaSwSvlanConnectEntry, nbsSysTrapTblEntStatus=nbsSysTrapTblEntStatus, nbsPortGrpCfgPortNumber=nbsPortGrpCfgPortNumber, nbsPortCfgIsvpMode=nbsPortCfgIsvpMode, megaFastSwitch=megaFastSwitch, nbsMgmtRcvPerfInPort=nbsMgmtRcvPerfInPort, nbsMegaSwPermSvlanEntry=nbsMegaSwPermSvlanEntry, nbsSysTelnetHost=nbsSysTelnetHost, nbsMegaSwRunVbcMaxNum=nbsMegaSwRunVbcMaxNum, nbsMegaSwRunSvlanMaxNum=nbsMegaSwRunSvlanMaxNum, nbsSysFrmGenSession=nbsSysFrmGenSession, nbsPortFwdPerfInPort=nbsPortFwdPerfInPort, nbsMegaSwVmon=nbsMegaSwVmon, nbsPortFwdPerfFwdBytes=nbsPortFwdPerfFwdBytes, nbsSysPingRequests=nbsSysPingRequests, nbsSysFrmGenPktRate=nbsSysFrmGenPktRate, nbsMegaSwRunFilterStatus=nbsMegaSwRunFilterStatus, nbsMegaSwRunIsvlanTable=nbsMegaSwRunIsvlanTable, nbsSysRestart=nbsSysRestart, megaSwitch208=megaSwitch208, nbsMegaSwRunSvlanIndex=nbsMegaSwRunSvlanIndex, nbsPortGrpCfgActivity=nbsPortGrpCfgActivity, nbsSysPingAddr=nbsSysPingAddr, nbsEthInfoIndex=nbsEthInfoIndex, nbsSysFrmGenPktLen=nbsSysFrmGenPktLen, megaSwitchII=megaSwitchII, nbsSwitchPerfTable=nbsSwitchPerfTable, nbsMgmtPerfXmtMcastPkts=nbsMgmtPerfXmtMcastPkts, nbsMgmtRcvPerfTable=nbsMgmtRcvPerfTable, nbsMgmtPerfXmtBcastPkts=nbsMgmtPerfXmtBcastPkts, nbsSysNetMask=nbsSysNetMask, nbsEthInfoTable=nbsEthInfoTable, nbsSysErrUptime=nbsSysErrUptime, nbsSysObIpAddr=nbsSysObIpAddr, nbsSysWriteComunity=nbsSysWriteComunity, nbsSysParUpload=nbsSysParUpload, nbsSysObNetMask=nbsSysObNetMask, nbsPortCfgLanType=nbsPortCfgLanType, nbsSysSnmpCfg=nbsSysSnmpCfg, nbsEthInfoCntExcessFctrls=nbsEthInfoCntExcessFctrls, nbsMegaSwRunDbAddr=nbsMegaSwRunDbAddr, nbsSysSerialSlipBaudRate=nbsSysSerialSlipBaudRate, nbsSysTrapEntry=nbsSysTrapEntry, nbsMegaSwDb=nbsMegaSwDb, nbsPortFwdPerfEntry=nbsPortFwdPerfEntry, nbsMegaSwSvlanConnectSport=nbsMegaSwSvlanConnectSport, nbsMgmtPerfXmtUcastPkts=nbsMgmtPerfXmtUcastPkts, nbsMegaSwRunIsvlanStatus=nbsMegaSwRunIsvlanStatus, nbsMegaSwPermSvlanTable=nbsMegaSwPermSvlanTable, nbsMegaSwRunIsvlanMaxNum=nbsMegaSwRunIsvlanMaxNum, nbsMgmtRcvPerfEntry=nbsMgmtRcvPerfEntry, nbsSysFrmGenDestMap=nbsSysFrmGenDestMap, nbsProducts=nbsProducts, nbsSysReadComunity=nbsSysReadComunity, nbsPortCfgEntry=nbsPortCfgEntry, nbsTraps=nbsTraps, nbsMegaSwRunIsvlanIndex=nbsMegaSwRunIsvlanIndex, miniSwitch=miniSwitch, nbsMegaSwRunIsvlanEntry=nbsMegaSwRunIsvlanEntry, nbsSysRunStpState=nbsSysRunStpState, nbsSysTelnetSession=nbsSysTelnetSession, nbsMegaSwRunVbcDb=nbsMegaSwRunVbcDb, nbsSysFwVers=nbsSysFwVers, nbSwitchG1=nbSwitchG1, nbsPortGrpCfgTable=nbsPortGrpCfgTable, nbsPortCfgIndex=nbsPortCfgIndex, nbsSysIpAddr=nbsSysIpAddr, nbsMgmtXmtPerfTable=nbsMgmtXmtPerfTable, nbsSysParDownload=nbsSysParDownload, nbsMegaSwPermIsvlanName=nbsMegaSwPermIsvlanName, megaSwitch2048=megaSwitch2048, nbsSysNumRestarts=nbsSysNumRestarts, nbsMgmtXmtPerfFwdBytes=nbsMgmtXmtPerfFwdBytes, nbsMegaSwVmonMonitrdPort=nbsMegaSwVmonMonitrdPort, nbsMegaSwRunDbIndex=nbsMegaSwRunDbIndex, nbsPortCfg=nbsPortCfg, nbsSysFrmGenPktFill=nbsSysFrmGenPktFill, nbsMegaSwRunIsvlanName=nbsMegaSwRunIsvlanName, nbsMegaSwRunVbcTable=nbsMegaSwRunVbcTable, nbsSysPortsNumber=nbsSysPortsNumber, nbsMegaSwPermIsvlanList=nbsMegaSwPermIsvlanList, nbsMgmtPerfStats=nbsMgmtPerfStats, nbsSysBootpEnable=nbsSysBootpEnable, nbsSysInitDownload=nbsSysInitDownload, nbsSysPing=nbsSysPing, nbsMegaSwPermIsvlanMaxNum=nbsMegaSwPermIsvlanMaxNum, nbsMegaSwRunFilterTable=nbsMegaSwRunFilterTable, nbsMegaSwRunSvlanIsvlanFlag=nbsMegaSwRunSvlanIsvlanFlag, nbsMegaSwSvlanConnectDport=nbsMegaSwSvlanConnectDport, nbsPortGrpCfgEntry=nbsPortGrpCfgEntry, nbsMegaSwPermVbcMaxNum=nbsMegaSwPermVbcMaxNum, nbsMegaSwRunDbTable=nbsMegaSwRunDbTable, nbsSysSwitchDBSize=nbsSysSwitchDBSize, nbsSwitchPerfIndex=nbsSwitchPerfIndex, nbsMegaSwPermIsvlanTable=nbsMegaSwPermIsvlanTable, nbsMegaSwPermIsvlanIndex=nbsMegaSwPermIsvlanIndex, nbsMegaSwRunSvlanStatus=nbsMegaSwRunSvlanStatus, nbsMgmtRcvPerfFwdPkts=nbsMgmtRcvPerfFwdPkts, nbsMgmtPerfFilterdPkts=nbsMgmtPerfFilterdPkts, nbsPortCfgPortDplex=nbsPortCfgPortDplex, nbsPortCfgSpeedSelect=nbsPortCfgSpeedSelect, nbsPortGrpCfgLinkStatus=nbsPortGrpCfgLinkStatus)
