#
# PySNMP MIB module ZYXEL-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ZYXEL-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:50:50 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Gauge32, iso, MibIdentifier, ObjectIdentity, NotificationType, TimeTicks, ModuleIdentity, Unsigned32, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Counter32, IpAddress, Counter64, enterprises, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "iso", "MibIdentifier", "ObjectIdentity", "NotificationType", "TimeTicks", "ModuleIdentity", "Unsigned32", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Counter32", "IpAddress", "Counter64", "enterprises", "Bits")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
class DisplayString(OctetString):
    pass

zyxel = MibIdentifier((1, 3, 6, 1, 4, 1, 890))
products = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1))
prestige = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 2))
pSysVariables = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 2, 1))
pBRIVariables = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 2, 2))
pIPXVariables = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 2, 3))
pAPTVariables = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 2, 4))
pBRGVariables = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 2, 5))
pDialInVariables = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 2, 6))
pRemoteNodeVariables = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 2, 7))
pRemoteUserVariables = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 2, 8))
zyxelTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 2, 9))
whyReboot = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 2, 9, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: whyReboot.setStatus('mandatory')
if mibBuilder.loadTexts: whyReboot.setDescription('Send a message to the manager that the system is going to reboot. The variable is the reason of rebooting.')
pSysRasSWVersion = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pSysRasSWVersion.setStatus('mandatory')
if mibBuilder.loadTexts: pSysRasSWVersion.setDescription('The current RAS software version.')
pSysIsdnFWVersion = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pSysIsdnFWVersion.setStatus('mandatory')
if mibBuilder.loadTexts: pSysIsdnFWVersion.setDescription('The current ISDN firmware version.')
pSysRouteIP = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pSysRouteIP.setStatus('mandatory')
if mibBuilder.loadTexts: pSysRouteIP.setDescription('Determines if TCP/IP is enabled.')
pSysRouteIPX = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("na", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pSysRouteIPX.setStatus('mandatory')
if mibBuilder.loadTexts: pSysRouteIPX.setDescription('Determines if IPX is enabled.')
pSysRouteAPT = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("na", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pSysRouteAPT.setStatus('mandatory')
if mibBuilder.loadTexts: pSysRouteAPT.setDescription('Determines if AppleTalk is enabled.')
pSysBridge = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pSysBridge.setStatus('mandatory')
if mibBuilder.loadTexts: pSysBridge.setDescription('Determines if Bridging is enabled.')
pBRISwitchType = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 2, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("nortelcustom", 1), ("at-tni-1", 2), ("dss1", 3), ("ltr6", 4), ("at-tp2p", 5), ("at-tp2m", 6), ("nortelni-1", 7), ("at-tni-1", 8), ("at-tp2m", 9), ("nortelni-1", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pBRISwitchType.setStatus('mandatory')
if mibBuilder.loadTexts: pBRISwitchType.setDescription('Identifies the ISDN switch type.')
pBChannelUsage = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 2, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("switch-unused", 1), ("switch-switch", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pBChannelUsage.setStatus('mandatory')
if mibBuilder.loadTexts: pBChannelUsage.setDescription('Idenitifes how the B channels are used.')
p1stPhoneNumber = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 2, 2, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: p1stPhoneNumber.setStatus('mandatory')
if mibBuilder.loadTexts: p1stPhoneNumber.setDescription('First telephone number.')
p1stSpidNumber = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 2, 2, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: p1stSpidNumber.setStatus('mandatory')
if mibBuilder.loadTexts: p1stSpidNumber.setDescription('First SPID number.')
p1stAnalogCall = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 2, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("modem", 2), ("voice", 3), ("data", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: p1stAnalogCall.setStatus('mandatory')
if mibBuilder.loadTexts: p1stAnalogCall.setDescription('How the 1st channel will handle an analog call.')
p2ndPhoneNumber = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 2, 2, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: p2ndPhoneNumber.setStatus('mandatory')
if mibBuilder.loadTexts: p2ndPhoneNumber.setDescription('Second telephone number.')
p2ndSpidNumber = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 2, 2, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: p2ndSpidNumber.setStatus('mandatory')
if mibBuilder.loadTexts: p2ndSpidNumber.setDescription('Second SPID number.')
p2ndAnalogCall = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 2, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("modem", 2), ("voice", 3), ("data", 4), ("na", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: p2ndAnalogCall.setStatus('mandatory')
if mibBuilder.loadTexts: p2ndAnalogCall.setDescription('How the 2nd channel will handle an analog call.')
pFrameType8022 = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 2, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pFrameType8022.setStatus('mandatory')
if mibBuilder.loadTexts: pFrameType8022.setDescription('Frame type 802.2 is enabled.')
pSeedRouter8022 = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 2, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("na", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pSeedRouter8022.setStatus('mandatory')
if mibBuilder.loadTexts: pSeedRouter8022.setDescription('Defines if this is a seed router.')
pNetworkNumber8022 = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 2, 3, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pNetworkNumber8022.setStatus('mandatory')
if mibBuilder.loadTexts: pNetworkNumber8022.setDescription('Defines the network address for this frame type.')
pFrameType8023 = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 2, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pFrameType8023.setStatus('mandatory')
if mibBuilder.loadTexts: pFrameType8023.setDescription('Frame type 802.3 is enabled.')
pSeedRouter8023 = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 2, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("na", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pSeedRouter8023.setStatus('mandatory')
if mibBuilder.loadTexts: pSeedRouter8023.setDescription('Defines if this is a seed router.')
pNetworkNumber8023 = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 2, 3, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pNetworkNumber8023.setStatus('mandatory')
if mibBuilder.loadTexts: pNetworkNumber8023.setDescription('Defines the network address for this frame type.')
pFrameTypeEthernetII = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 2, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pFrameTypeEthernetII.setStatus('mandatory')
if mibBuilder.loadTexts: pFrameTypeEthernetII.setDescription('Frame type Ethernet II is enabled.')
pSeedRouterEthernetII = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 2, 3, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("na", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pSeedRouterEthernetII.setStatus('mandatory')
if mibBuilder.loadTexts: pSeedRouterEthernetII.setDescription('Defines if this is a seed router.')
pNetworkNumberEthernetII = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 2, 3, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pNetworkNumberEthernetII.setStatus('mandatory')
if mibBuilder.loadTexts: pNetworkNumberEthernetII.setDescription('Defines the network address for this frame type.')
pFrameTypeSnap = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 2, 3, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pFrameTypeSnap.setStatus('mandatory')
if mibBuilder.loadTexts: pFrameTypeSnap.setDescription('Frame type SNAP is enabled.')
pSeedRouterSnap = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 2, 3, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("na", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pSeedRouterSnap.setStatus('mandatory')
if mibBuilder.loadTexts: pSeedRouterSnap.setDescription('Defines if this is a seed router.')
pNetworkNumberSnap = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 2, 3, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pNetworkNumberSnap.setStatus('mandatory')
if mibBuilder.loadTexts: pNetworkNumberSnap.setDescription('Defines the network address for this frame type.')
pIPXRouteTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 2, 3, 13), )
if mibBuilder.loadTexts: pIPXRouteTable.setStatus('mandatory')
if mibBuilder.loadTexts: pIPXRouteTable.setDescription('Each row of the table provides the information for an IPX static route.')
pipxRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 2, 3, 13, 1), ).setIndexNames((0, "ZYXEL-MIB", "pIpxRtIndex"))
if mibBuilder.loadTexts: pipxRouteEntry.setStatus('mandatory')
if mibBuilder.loadTexts: pipxRouteEntry.setDescription('The object type of the rows in pIPXRouteTable.')
pIpxRtIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 2, 3, 13, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pIpxRtIndex.setStatus('mandatory')
if mibBuilder.loadTexts: pIpxRtIndex.setDescription('The index of the route entry.')
pIpxRtServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 2, 3, 13, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pIpxRtServerName.setStatus('mandatory')
if mibBuilder.loadTexts: pIpxRtServerName.setDescription('The name of the IPX route.')
pIpxRtActive = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 2, 3, 13, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pIpxRtActive.setStatus('mandatory')
if mibBuilder.loadTexts: pIpxRtActive.setDescription('Determines if the route is active or not.')
pIpxRtNetworkNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 2, 3, 13, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pIpxRtNetworkNumber.setStatus('mandatory')
if mibBuilder.loadTexts: pIpxRtNetworkNumber.setDescription('The network number for this IPX route.')
pIpxRtNodeNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 2, 3, 13, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pIpxRtNodeNumber.setStatus('mandatory')
if mibBuilder.loadTexts: pIpxRtNodeNumber.setDescription('The node number for this IPX route.')
pIpxRtSocketNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 2, 3, 13, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pIpxRtSocketNumber.setStatus('mandatory')
if mibBuilder.loadTexts: pIpxRtSocketNumber.setDescription('The socket number for this IPX route.')
pIpxRtTypeNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 2, 3, 13, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pIpxRtTypeNumber.setStatus('mandatory')
if mibBuilder.loadTexts: pIpxRtTypeNumber.setDescription('The type number for this IPX route.')
pIpxRtHopCount = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 2, 3, 13, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pIpxRtHopCount.setStatus('mandatory')
if mibBuilder.loadTexts: pIpxRtHopCount.setDescription('The hop count for this IPX route.')
pIpxRtTickCount = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 2, 3, 13, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pIpxRtTickCount.setStatus('mandatory')
if mibBuilder.loadTexts: pIpxRtTickCount.setDescription('The tick count for this IPX route.')
pIpxRtGatewayNode = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 2, 3, 13, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pIpxRtGatewayNode.setStatus('mandatory')
if mibBuilder.loadTexts: pIpxRtGatewayNode.setDescription('The remote node number that serves as the gateway for this IPX route.')
pAPTSeedRouter = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 2, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pAPTSeedRouter.setStatus('mandatory')
if mibBuilder.loadTexts: pAPTSeedRouter.setDescription('Determines if this is a seed router.')
pAPTNetworkMin = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 2, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(65536))).clone(namedValues=NamedValues(("na", 65536)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pAPTNetworkMin.setStatus('mandatory')
if mibBuilder.loadTexts: pAPTNetworkMin.setDescription('The network minimum number for the range.')
pAPTNetworkMax = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 2, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(65536))).clone(namedValues=NamedValues(("na", 65536)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pAPTNetworkMax.setStatus('mandatory')
if mibBuilder.loadTexts: pAPTNetworkMax.setDescription('The network maximum number for the range.')
pAPT1stZoneName = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 2, 4, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pAPT1stZoneName.setStatus('mandatory')
if mibBuilder.loadTexts: pAPT1stZoneName.setDescription('1st AppleTalk zone name.')
pAPT2ndZoneName = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 2, 4, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pAPT2ndZoneName.setStatus('mandatory')
if mibBuilder.loadTexts: pAPT2ndZoneName.setDescription('2nd AppleTalk zone name.')
pAPTZipTimeout = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 2, 4, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pAPTZipTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: pAPTZipTimeout.setDescription('Zip Timeout.')
pAPTRouteTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 2, 4, 7), )
if mibBuilder.loadTexts: pAPTRouteTable.setStatus('mandatory')
if mibBuilder.loadTexts: pAPTRouteTable.setDescription('Each row of this table provides the information for an AppleTalk static route.')
paptRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 2, 4, 7, 1), ).setIndexNames((0, "ZYXEL-MIB", "pAptRtIndex"))
if mibBuilder.loadTexts: paptRouteEntry.setStatus('mandatory')
if mibBuilder.loadTexts: paptRouteEntry.setDescription('The object type of the rows in pAPTRouteTable.')
pAptRtIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 2, 4, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pAptRtIndex.setStatus('mandatory')
if mibBuilder.loadTexts: pAptRtIndex.setDescription('The row index for the static route.')
pAptRt1stZoneName = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 2, 4, 7, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pAptRt1stZoneName.setStatus('mandatory')
if mibBuilder.loadTexts: pAptRt1stZoneName.setDescription('1st zone name for this static route.')
pAptRt2ndZoneName = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 2, 4, 7, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pAptRt2ndZoneName.setStatus('mandatory')
if mibBuilder.loadTexts: pAptRt2ndZoneName.setDescription('2nd zone name for this static route.')
pAptRtNetworkMin = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 2, 4, 7, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pAptRtNetworkMin.setStatus('mandatory')
if mibBuilder.loadTexts: pAptRtNetworkMin.setDescription('Network min number for this static route.')
pAptRtNetworkMax = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 2, 4, 7, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pAptRtNetworkMax.setStatus('mandatory')
if mibBuilder.loadTexts: pAptRtNetworkMax.setDescription('Network max number for this static route.')
pAptRtActive = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 2, 4, 7, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pAptRtActive.setStatus('mandatory')
if mibBuilder.loadTexts: pAptRtActive.setDescription('Determines if this static route is active.')
pAptRtMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 2, 4, 7, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pAptRtMetric.setStatus('mandatory')
if mibBuilder.loadTexts: pAptRtMetric.setDescription('Metric for this static route.')
pAptRtGatewayNode = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 2, 4, 7, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pAptRtGatewayNode.setStatus('mandatory')
if mibBuilder.loadTexts: pAptRtGatewayNode.setDescription('Gateway remote node for this static route.')
pBRGHandleIpx = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 2, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("client", 2), ("server", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pBRGHandleIpx.setStatus('mandatory')
if mibBuilder.loadTexts: pBRGHandleIpx.setDescription('Determines how prestige should handle IPX.')
pBRGRouteTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 2, 5, 2), )
if mibBuilder.loadTexts: pBRGRouteTable.setStatus('mandatory')
if mibBuilder.loadTexts: pBRGRouteTable.setDescription('Each row of this table provides the information for a Bridge static route.')
pbrgRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 2, 5, 2, 1), ).setIndexNames((0, "ZYXEL-MIB", "pBrgRtIndex"))
if mibBuilder.loadTexts: pbrgRouteEntry.setStatus('mandatory')
if mibBuilder.loadTexts: pbrgRouteEntry.setDescription('The object type of the rows in pBRGRouteTable.')
pBrgRtIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 2, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pBrgRtIndex.setStatus('mandatory')
if mibBuilder.loadTexts: pBrgRtIndex.setDescription('The row index for the static route.')
pBrgRtRouteName = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 2, 5, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pBrgRtRouteName.setStatus('mandatory')
if mibBuilder.loadTexts: pBrgRtRouteName.setDescription('Route name for this static route.')
pBrgRtActive = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 2, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pBrgRtActive.setStatus('mandatory')
if mibBuilder.loadTexts: pBrgRtActive.setDescription('Determines if this static route is active.')
pBrgRtEtherAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 2, 5, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pBrgRtEtherAddress.setStatus('mandatory')
if mibBuilder.loadTexts: pBrgRtEtherAddress.setDescription('The ethernet address for this static route.')
pBrgRtIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 2, 5, 2, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pBrgRtIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: pBrgRtIpAddress.setDescription('The ip dress for this static route.')
pBrgRtGatewayNode = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 2, 5, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pBrgRtGatewayNode.setStatus('mandatory')
if mibBuilder.loadTexts: pBrgRtGatewayNode.setDescription('Gateway remote node for this static route.')
pDIClidAuthen = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 2, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("required", 2), ("preferred", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pDIClidAuthen.setStatus('mandatory')
if mibBuilder.loadTexts: pDIClidAuthen.setDescription('CLID authentication status for incoming calls.')
pDIRecvAuthen = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 2, 6, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("chap-pap", 1), ("chap", 2), ("pap", 3), ("none", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pDIRecvAuthen.setStatus('mandatory')
if mibBuilder.loadTexts: pDIRecvAuthen.setDescription('Determines the type of authentication for incoming calls.')
pDILinkCompression = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 2, 6, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("stac", 2), ("v42bis", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pDILinkCompression.setStatus('mandatory')
if mibBuilder.loadTexts: pDILinkCompression.setDescription('Determines the type of compression algorithm used.')
pDIMaxTransferRate = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 2, 6, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("speed-128k", 1), ("speed-64k", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pDIMaxTransferRate.setStatus('mandatory')
if mibBuilder.loadTexts: pDIMaxTransferRate.setDescription('Maximum transfer rate allowed.')
pDIIdleTimeout = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 2, 6, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pDIIdleTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: pDIIdleTimeout.setDescription('The default idle timeout value.')
pDIIpAddressSupply = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 2, 6, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("user", 1), ("pool", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pDIIpAddressSupply.setStatus('mandatory')
if mibBuilder.loadTexts: pDIIpAddressSupply.setDescription('How the IP address is supplied.')
pDIIpPoolStartAddress = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 2, 6, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pDIIpPoolStartAddress.setStatus('mandatory')
if mibBuilder.loadTexts: pDIIpPoolStartAddress.setDescription('The IP pool start address.')
pDIIpPoolCount = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 2, 6, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1000))).clone(namedValues=NamedValues(("na", 1000)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pDIIpPoolCount.setStatus('mandatory')
if mibBuilder.loadTexts: pDIIpPoolCount.setDescription('Number of IP pool address to use.')
pDIIpxPool = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 2, 6, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pDIIpxPool.setStatus('mandatory')
if mibBuilder.loadTexts: pDIIpxPool.setDescription('Use IPX pool to assign IPX network number.')
pDIIpxPoolStartNetNumber = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 2, 6, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pDIIpxPoolStartNetNumber.setStatus('mandatory')
if mibBuilder.loadTexts: pDIIpxPoolStartNetNumber.setDescription('Starting IPX net number in the pool.')
pDIIpxPoolCount = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 2, 6, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1000))).clone(namedValues=NamedValues(("na", 1000)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pDIIpxPoolCount.setStatus('mandatory')
if mibBuilder.loadTexts: pDIIpxPoolCount.setDescription('IPX pool count number.')
pRemoteNodeTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 2, 7, 1), )
if mibBuilder.loadTexts: pRemoteNodeTable.setStatus('mandatory')
if mibBuilder.loadTexts: pRemoteNodeTable.setDescription('Each row of this table provides the information for one remote node.')
premoteNodeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 2, 7, 1, 1), ).setIndexNames((0, "ZYXEL-MIB", "pRNIndex"))
if mibBuilder.loadTexts: premoteNodeEntry.setStatus('mandatory')
if mibBuilder.loadTexts: premoteNodeEntry.setDescription('The object type of the rows in pRemoteNodeTable.')
pRNIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 2, 7, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pRNIndex.setStatus('mandatory')
if mibBuilder.loadTexts: pRNIndex.setDescription('Row number for this node in the remote node table.')
pRNName = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 2, 7, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pRNName.setStatus('mandatory')
if mibBuilder.loadTexts: pRNName.setDescription('Descriptive name to identify the remote node.')
pRNActive = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 2, 7, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pRNActive.setStatus('mandatory')
if mibBuilder.loadTexts: pRNActive.setDescription('To set the remote node active or inactive.')
pRNCallDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 2, 7, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("both", 1), ("incoming", 2), ("outgoing", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pRNCallDirection.setStatus('mandatory')
if mibBuilder.loadTexts: pRNCallDirection.setDescription('Call direction for the remote node.')
pRNRemLogin = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 2, 7, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pRNRemLogin.setStatus('mandatory')
if mibBuilder.loadTexts: pRNRemLogin.setDescription('Remote node login name.')
pRNRemClid = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 2, 7, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pRNRemClid.setStatus('mandatory')
if mibBuilder.loadTexts: pRNRemClid.setDescription('Remote node CLID number.')
pRNCallBack = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 2, 7, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("na", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pRNCallBack.setStatus('mandatory')
if mibBuilder.loadTexts: pRNCallBack.setDescription('Remote node callback enabled or not.')
pRNMyLogin = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 2, 7, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pRNMyLogin.setStatus('mandatory')
if mibBuilder.loadTexts: pRNMyLogin.setDescription('Your login name for a call to a remote node.')
pRN1stPhoneNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 2, 7, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pRN1stPhoneNumber.setStatus('mandatory')
if mibBuilder.loadTexts: pRN1stPhoneNumber.setDescription('Primary phone number for the remote node.')
pRN2ndPhoneNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 2, 7, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pRN2ndPhoneNumber.setStatus('mandatory')
if mibBuilder.loadTexts: pRN2ndPhoneNumber.setDescription('Secondary phone number for the remote node.')
pRNRouteType = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 2, 7, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("none", 1), ("ip", 2), ("ipx", 3), ("appletalk", 4), ("ip-ipx", 5), ("ip-appletalk", 6), ("ipx-appletalk", 7), ("ip-ipx-appletalk", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pRNRouteType.setStatus('mandatory')
if mibBuilder.loadTexts: pRNRouteType.setDescription('Route capabilities for this remote node.')
pRNBridgeEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 2, 7, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pRNBridgeEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: pRNBridgeEnabled.setDescription('Bridging enabled or disabled.')
pRNEncapsulation = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 2, 7, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ppp", 1), ("ascend", 2), ("microsoft", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pRNEncapsulation.setStatus('mandatory')
if mibBuilder.loadTexts: pRNEncapsulation.setDescription('Encapsualtion for the packets.')
pRNIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 2, 7, 1, 1, 14), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pRNIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: pRNIpAddress.setDescription('LAN IP address of remote node.')
pRNTransferRate = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 2, 7, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("speed-2-2M", 1), ("speed-56k-only", 2), ("speed-Modem", 3), ("speed-64k", 4), ("speed-128k", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pRNTransferRate.setStatus('mandatory')
if mibBuilder.loadTexts: pRNTransferRate.setDescription('Transfer rate for the call to this remote node.')
pRNIdleTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 2, 7, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pRNIdleTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: pRNIdleTimeout.setDescription('Idle timeout for this remote node.')
pRemoteUserTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 2, 8, 1), )
if mibBuilder.loadTexts: pRemoteUserTable.setStatus('mandatory')
if mibBuilder.loadTexts: pRemoteUserTable.setDescription('Each row of this table provides a remote user entry.')
premoteUserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 2, 8, 1, 1), ).setIndexNames((0, "ZYXEL-MIB", "pRUIndex"))
if mibBuilder.loadTexts: premoteUserEntry.setStatus('mandatory')
if mibBuilder.loadTexts: premoteUserEntry.setDescription('The object type of the rows in pRemoteUserTable.')
pRUIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 2, 8, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pRUIndex.setStatus('mandatory')
if mibBuilder.loadTexts: pRUIndex.setDescription('The row number of this remote user.')
pRUName = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 2, 8, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pRUName.setStatus('mandatory')
if mibBuilder.loadTexts: pRUName.setDescription('The name of this remote user.')
pRUActive = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 2, 8, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pRUActive.setStatus('mandatory')
if mibBuilder.loadTexts: pRUActive.setDescription('Determines if remote user is active or inactive')
pRUCallBack = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 2, 8, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pRUCallBack.setStatus('mandatory')
if mibBuilder.loadTexts: pRUCallBack.setDescription('Determines if callback is enabled for this remote user.')
pRUCallBackNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 2, 8, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pRUCallBackNumber.setStatus('mandatory')
if mibBuilder.loadTexts: pRUCallBackNumber.setDescription('The callback phone number of this remote user.')
pRUCallBackOverride = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 2, 8, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pRUCallBackOverride.setStatus('mandatory')
if mibBuilder.loadTexts: pRUCallBackOverride.setDescription('Determines if the callback override is enabled for this remote user.')
pRUClid = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 2, 8, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pRUClid.setStatus('mandatory')
if mibBuilder.loadTexts: pRUClid.setDescription('The CLID number for this remote user.')
pRUIdleTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 2, 8, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pRUIdleTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: pRUIdleTimeout.setDescription('The idle timeout for this remote user.')
reboot = NotificationType((1, 3, 6, 1, 4, 1, 890) + (0,1)).setObjects(("ZYXEL-MIB", "whyReboot"))
if mibBuilder.loadTexts: reboot.setDescription('Send a message to the manager that the system is going to reboot. The variable is the reason of rebooting.')
mibBuilder.exportSymbols("ZYXEL-MIB", pSeedRouter8022=pSeedRouter8022, pAPTVariables=pAPTVariables, p2ndPhoneNumber=p2ndPhoneNumber, pAptRt1stZoneName=pAptRt1stZoneName, p2ndSpidNumber=p2ndSpidNumber, pDIIpxPoolCount=pDIIpxPoolCount, pSysBridge=pSysBridge, pBrgRtEtherAddress=pBrgRtEtherAddress, pBrgRtRouteName=pBrgRtRouteName, pRNRouteType=pRNRouteType, pAptRtNetworkMax=pAptRtNetworkMax, pNetworkNumber8022=pNetworkNumber8022, pIpxRtGatewayNode=pIpxRtGatewayNode, pDIIpxPoolStartNetNumber=pDIIpxPoolStartNetNumber, pAPT2ndZoneName=pAPT2ndZoneName, pBrgRtActive=pBrgRtActive, reboot=reboot, pRUCallBackNumber=pRUCallBackNumber, pIpxRtNodeNumber=pIpxRtNodeNumber, pipxRouteEntry=pipxRouteEntry, pIpxRtTypeNumber=pIpxRtTypeNumber, pIPXVariables=pIPXVariables, p1stPhoneNumber=p1stPhoneNumber, pSysVariables=pSysVariables, pRUIdleTimeout=pRUIdleTimeout, pBrgRtIpAddress=pBrgRtIpAddress, pRNIpAddress=pRNIpAddress, pRUCallBackOverride=pRUCallBackOverride, pSysRouteAPT=pSysRouteAPT, pDIMaxTransferRate=pDIMaxTransferRate, pRUCallBack=pRUCallBack, pAPTNetworkMin=pAPTNetworkMin, pAptRtNetworkMin=pAptRtNetworkMin, pIPXRouteTable=pIPXRouteTable, p1stSpidNumber=p1stSpidNumber, pSeedRouterEthernetII=pSeedRouterEthernetII, pDIIpPoolStartAddress=pDIIpPoolStartAddress, pRNRemLogin=pRNRemLogin, products=products, pIpxRtNetworkNumber=pIpxRtNetworkNumber, pRNTransferRate=pRNTransferRate, pSysRasSWVersion=pSysRasSWVersion, pRNActive=pRNActive, pIpxRtActive=pIpxRtActive, pSysIsdnFWVersion=pSysIsdnFWVersion, paptRouteEntry=paptRouteEntry, pSysRouteIP=pSysRouteIP, pSeedRouterSnap=pSeedRouterSnap, pDIIpxPool=pDIIpxPool, pFrameTypeEthernetII=pFrameTypeEthernetII, DisplayString=DisplayString, pRUName=pRUName, pBRISwitchType=pBRISwitchType, pRNCallDirection=pRNCallDirection, pAptRt2ndZoneName=pAptRt2ndZoneName, pDILinkCompression=pDILinkCompression, pBRGVariables=pBRGVariables, pRUClid=pRUClid, pAptRtIndex=pAptRtIndex, pIpxRtHopCount=pIpxRtHopCount, pRNIndex=pRNIndex, pFrameType8023=pFrameType8023, pIpxRtSocketNumber=pIpxRtSocketNumber, pbrgRouteEntry=pbrgRouteEntry, prestige=prestige, pDIClidAuthen=pDIClidAuthen, pAptRtActive=pAptRtActive, pRNIdleTimeout=pRNIdleTimeout, pFrameType8022=pFrameType8022, pAPTNetworkMax=pAPTNetworkMax, pAPTRouteTable=pAPTRouteTable, pRNMyLogin=pRNMyLogin, pDIIpAddressSupply=pDIIpAddressSupply, pRemoteUserTable=pRemoteUserTable, zyxelTraps=zyxelTraps, pRN1stPhoneNumber=pRN1stPhoneNumber, p1stAnalogCall=p1stAnalogCall, pDIIpPoolCount=pDIIpPoolCount, pDialInVariables=pDialInVariables, pDIRecvAuthen=pDIRecvAuthen, pRemoteUserVariables=pRemoteUserVariables, pRUIndex=pRUIndex, pIpxRtTickCount=pIpxRtTickCount, premoteNodeEntry=premoteNodeEntry, pIpxRtServerName=pIpxRtServerName, pFrameTypeSnap=pFrameTypeSnap, pRemoteNodeVariables=pRemoteNodeVariables, pBRGRouteTable=pBRGRouteTable, pRNCallBack=pRNCallBack, whyReboot=whyReboot, pAPTZipTimeout=pAPTZipTimeout, pSysRouteIPX=pSysRouteIPX, pAPT1stZoneName=pAPT1stZoneName, premoteUserEntry=premoteUserEntry, pBRIVariables=pBRIVariables, pBrgRtGatewayNode=pBrgRtGatewayNode, pNetworkNumberEthernetII=pNetworkNumberEthernetII, pRN2ndPhoneNumber=pRN2ndPhoneNumber, pRNEncapsulation=pRNEncapsulation, pAPTSeedRouter=pAPTSeedRouter, pNetworkNumberSnap=pNetworkNumberSnap, pRNRemClid=pRNRemClid, pIpxRtIndex=pIpxRtIndex, pRNName=pRNName, zyxel=zyxel, pNetworkNumber8023=pNetworkNumber8023, pBChannelUsage=pBChannelUsage, pAptRtGatewayNode=pAptRtGatewayNode, pRemoteNodeTable=pRemoteNodeTable, p2ndAnalogCall=p2ndAnalogCall, pRNBridgeEnabled=pRNBridgeEnabled, pBRGHandleIpx=pBRGHandleIpx, pRUActive=pRUActive, pAptRtMetric=pAptRtMetric, pBrgRtIndex=pBrgRtIndex, pDIIdleTimeout=pDIIdleTimeout, pSeedRouter8023=pSeedRouter8023)
