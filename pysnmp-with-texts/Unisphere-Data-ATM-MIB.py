#
# PySNMP MIB module Unisphere-Data-ATM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Unisphere-Data-ATM-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:30:25 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint")
atmfM4VpTestType, atmfM4VcTestObject, atmfM4VpTestResult, atmfM4VcTestId, atmfM4VpTestObject, atmfM4VcTestType, atmfM4VpTestId, atmfM4VcTestResult = mibBuilder.importSymbols("ATM-FORUM-SNMP-M4-MIB", "atmfM4VpTestType", "atmfM4VcTestObject", "atmfM4VpTestResult", "atmfM4VcTestId", "atmfM4VpTestObject", "atmfM4VcTestType", "atmfM4VpTestId", "atmfM4VcTestResult")
atmVclVci, atmVplVpi, atmVclVpi = mibBuilder.importSymbols("ATM-MIB", "atmVclVci", "atmVplVpi", "atmVclVpi")
AtmVcIdentifier, AtmVorXAdminStatus, AtmVpIdentifier, AtmAddr = mibBuilder.importSymbols("ATM-TC-MIB", "AtmVcIdentifier", "AtmVorXAdminStatus", "AtmVpIdentifier", "AtmAddr")
InterfaceIndex, ifIndex, InterfaceIndexOrZero = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex", "ifIndex", "InterfaceIndexOrZero")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
IpAddress, Bits, MibIdentifier, ModuleIdentity, Counter64, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, TimeTicks, iso, NotificationType, ObjectIdentity, Counter32, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "Bits", "MibIdentifier", "ModuleIdentity", "Counter64", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "TimeTicks", "iso", "NotificationType", "ObjectIdentity", "Counter32", "Unsigned32")
TruthValue, DisplayString, TextualConvention, RowStatus, TimeStamp = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "DisplayString", "TextualConvention", "RowStatus", "TimeStamp")
usDataMibs, = mibBuilder.importSymbols("Unisphere-Data-MIBs", "usDataMibs")
UsdNextIfIndex, UsdEnable = mibBuilder.importSymbols("Unisphere-Data-TC", "UsdNextIfIndex", "UsdEnable")
usdAtmMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8))
usdAtmMIB.setRevisions(('2002-08-09 13:40', '2002-01-24 14:00', '2001-12-14 18:04', '2001-11-26 16:39', '2000-11-27 19:51', '2000-08-02 00:00', '2000-05-12 00:00', '2000-01-13 00:00', '1999-08-04 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: usdAtmMIB.setRevisionsDescriptions(('Added support for CAC used bandwidth. Added ATM switched virtual connection (SVC) support. Added usdAtmSubIfAddress to the usdAtmSubIfTable.', 'Added support for connection admission control (CAC).', 'Added support from ATM traffic shaping.', 'Added support for NBMA map lists. Added support for ATM ping. Changed usdAtmSubIfVccVcd and usdAtmIfIlmiVcd range to (0..2147483647). Added range to usdAtmIfCapabilityMaxVcd. Added rtVbr service catagory to usdAtmSubIfVccTable. Added support for OAM cell filter. Added PVC counter for reveived unknown protocol.', 'Added autoconfig value for usdAtmSubIfVccType. Added in/out summary cell counters. Added usdVpTunnelServiceCategory to usdAtmVpTunnelTable. Added support for atm interface capability traversal.', 'Added the usdAtmCircuitOamTable.', 'Added the usdAtmVpTunnelTable.', 'Added the usdAtmPvcStatisticsTable.', 'Initial version of this MIB module.',))
if mibBuilder.loadTexts: usdAtmMIB.setLastUpdated('200208091340Z')
if mibBuilder.loadTexts: usdAtmMIB.setOrganization('Juniper Networks, Inc.')
if mibBuilder.loadTexts: usdAtmMIB.setContactInfo(' Juniper Networks, Inc. Postal: 10 Technology Park Drive Westford, MA 01886 USA Tel: +1 978 589 5800 Email: mib@UnisphereNetworks.com')
if mibBuilder.loadTexts: usdAtmMIB.setDescription('The ATM MIB for the Unisphere Networks Inc. enterprise.')
class UsdAtmNbmaMapName(TextualConvention, OctetString):
    reference = 'RFC 854: NVT ASCII character set. See SNMPv2-TC.DisplayString DESCRIPTION for a summary.'
    description = 'An administratively assigned map name. Represents textual information taken from the NVT ASCII character set. The name must be unique per system.'
    status = 'current'
    displayHint = '32a'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(1, 32)

class UsdAtmNbmaMapNameOrNull(TextualConvention, OctetString):
    reference = 'RFC 854: NVT ASCII character set. See SNMPv2-TC.DisplayString DESCRIPTION for a summary.'
    description = 'An administratively assigned map name. Represents textual information taken from the NVT ASCII character set. The name must be unique per system. Differs from UsdAtmNbmaMapName in that it permits a zero-length string.'
    status = 'current'
    displayHint = '32a'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 32)

usdAtmObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1))
usdAtmIfLayer = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1))
usdAtmAal5IfLayer = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 2))
usdAtmSubIfLayer = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 3))
usdAtmNbma = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 4))
usdAtmPing = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 5))
usdAtmNextIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 1), UsdNextIfIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdAtmNextIfIndex.setStatus('current')
if mibBuilder.loadTexts: usdAtmNextIfIndex.setDescription('Coordinate ifIndex value allocation for entries in usdAtmIfTable. A GET of this object returns the next available ifIndex value to be used to create an entry in the associated interface table; or zero, if no valid ifIndex value is available. This object also returns a value of zero when it is the lexicographic successor of a varbind presented in an SNMP GETNEXT or GETBULK request, for which circumstance it is assumed that ifIndex allocation is unintended. Successive GETs will typically return different values, thus avoiding collisions among cooperating management clients seeking to create table entries simultaneously.')
usdAtmIfTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 2), )
if mibBuilder.loadTexts: usdAtmIfTable.setStatus('current')
if mibBuilder.loadTexts: usdAtmIfTable.setDescription('This table contains entries for ATM interfaces present in the system.')
usdAtmIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 2, 1), ).setIndexNames((0, "Unisphere-Data-ATM-MIB", "usdAtmIfIndex"))
if mibBuilder.loadTexts: usdAtmIfEntry.setStatus('current')
if mibBuilder.loadTexts: usdAtmIfEntry.setDescription('Each entry describes the characteristics of an ATM interface. Creating/deleting entries in this table causes corresponding entries for be created/deleted in ifTable/ifXTable/usdIfTable.')
usdAtmIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: usdAtmIfIndex.setStatus('current')
if mibBuilder.loadTexts: usdAtmIfIndex.setDescription('The ifIndex of the ATM interface. When creating entries in this table, suitable values for this object are determined by reading usdAtmNextIfIndex.')
usdAtmIfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdAtmIfRowStatus.setStatus('current')
if mibBuilder.loadTexts: usdAtmIfRowStatus.setDescription('Controls creation/deletion of entries in this table according to the RowStatus textual convention, constrained to support the following values only: createAndGo destroy To create an entry in this table, the following entry objects MUST be explicitly configured: usdAtmIfRowStatus usdAtmIfLowerIfIndex In addition, when creating an entry the following condition must hold: A value for usdAtmIfIndex must have been determined previously, by reading usdAtmNextIfIndex. A corresponding entry in ifTable/ifXTable/usdIfTable is created or destroyed as a result of creating/destroying an entry in this table.')
usdAtmIfLowerIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 2, 1, 3), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdAtmIfLowerIfIndex.setStatus('current')
if mibBuilder.loadTexts: usdAtmIfLowerIfIndex.setDescription('The ifIndex of an interface over which this ATM interface is to be layered. A value of zero indicates no layering. An implementation may choose to require that a nonzero value be configured at entry creation.')
usdAtmIfIlmiVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 2, 1, 4), AtmVpIdentifier()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdAtmIfIlmiVpi.setStatus('current')
if mibBuilder.loadTexts: usdAtmIfIlmiVpi.setDescription('The VPI of the ILMI of a major ATM interface.')
usdAtmIfIlmiVci = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 2, 1, 5), AtmVcIdentifier().clone(16)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdAtmIfIlmiVci.setStatus('current')
if mibBuilder.loadTexts: usdAtmIfIlmiVci.setDescription('The VCI of the ILMI of a major ATM interface.')
usdAtmIfIlmiVcd = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdAtmIfIlmiVcd.setStatus('current')
if mibBuilder.loadTexts: usdAtmIfIlmiVcd.setDescription('An integer identifier for the ILMI, used in conjunction with the command-line interface. The value must be unique among VCs configured on the same ATM interface.')
usdAtmIfIlmiPollFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdAtmIfIlmiPollFrequency.setStatus('current')
if mibBuilder.loadTexts: usdAtmIfIlmiPollFrequency.setDescription('The amount of time in seconds between successive transmissions of ILMI messages on this interface for the purpose of detecting loss of ILMI connectivity. The distinguished value zero disables ILMI connectivity procedures on this interface.')
usdAtmIfIlmiAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdAtmIfIlmiAdminState.setStatus('current')
if mibBuilder.loadTexts: usdAtmIfIlmiAdminState.setDescription('The administrative status of ILMI in the ATM interface.')
usdAtmIfUniVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("version3Dot0", 0), ("version3Dot1", 1), ("version4Dot0", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdAtmIfUniVersion.setStatus('current')
if mibBuilder.loadTexts: usdAtmIfUniVersion.setDescription('Use to specify the User Network Interface (UNI) the router should use when ILMI link auto determination is unsuccesful or ILMI is disabled.')
usdAtmIfOamCellRxAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("oamCellAdminStateDisabled", 0), ("oamCellAdminStateEnabled", 1))).clone('oamCellAdminStateEnabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdAtmIfOamCellRxAdminState.setStatus('current')
if mibBuilder.loadTexts: usdAtmIfOamCellRxAdminState.setDescription('Use to specify the OAM Cell Receive Administrative state on this interface.')
usdAtmIfInCells = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 2, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdAtmIfInCells.setStatus('current')
if mibBuilder.loadTexts: usdAtmIfInCells.setDescription('The total number of cells received on this major interface.')
usdAtmIfOutCells = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 2, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdAtmIfOutCells.setStatus('current')
if mibBuilder.loadTexts: usdAtmIfOutCells.setDescription('The total number of cells transmitted on this major interface.')
usdAtmIfVcCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 268431360))).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdAtmIfVcCount.setStatus('current')
if mibBuilder.loadTexts: usdAtmIfVcCount.setDescription('The total number of circuits configured on this interface.')
usdAtmIfMapGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 2, 1, 14), UsdAtmNbmaMapNameOrNull()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdAtmIfMapGroup.setStatus('current')
if mibBuilder.loadTexts: usdAtmIfMapGroup.setDescription('The NBMA map group this interface is associated with.')
usdAtmIfCacAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 2, 1, 15), UsdEnable().clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdAtmIfCacAdminState.setStatus('current')
if mibBuilder.loadTexts: usdAtmIfCacAdminState.setDescription('The administrative staus of CAC on this ATM major interface.')
usdAtmIfCacUbrWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 2, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdAtmIfCacUbrWeight.setStatus('current')
if mibBuilder.loadTexts: usdAtmIfCacUbrWeight.setDescription('The bandwidth associated with every UBR and UBR with PCR connection configured on the ATM major interface. This value is used for CAC computation. The units are kilo-bits per second (kbps).')
usdAtmIfCacSubscriptionBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 2, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdAtmIfCacSubscriptionBandwidth.setStatus('current')
if mibBuilder.loadTexts: usdAtmIfCacSubscriptionBandwidth.setDescription('The subscribed bandwidth of the ATM major interface. If this value is not specified or set to 0, the effective port bandwidth is used. When a Get operation is performed the current effective bandwidth is returned. The units are kilo-bits per second (kbps).')
usdAtmIfCacAvailableBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 2, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('kbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: usdAtmIfCacAvailableBandwidth.setStatus('current')
if mibBuilder.loadTexts: usdAtmIfCacAvailableBandwidth.setDescription('The available bandwidth of the ATM major interface. As connections are added or deleted on the interface, this value is updated. The units are kilo-bits per second (kbps).')
usdAtmIfOamCellFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("oamCellFilterAll", 0), ("oamCellFilterAlarm", 1))).clone('oamCellFilterAll')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdAtmIfOamCellFilter.setStatus('current')
if mibBuilder.loadTexts: usdAtmIfOamCellFilter.setDescription('The type of OAM cells to discard when usdAtmIfOamCellRxAdminState is set to oamCellAdminStateDisabled. The value oamCellFilterAlarm discards received OAM AIS and RDI cells. The value oamCellFilterAll discards all received OAM cells. Note that when usdAtmIfOamCellRxAdminState is set to oamCellAdminStateEnabled, this object has no effect.')
usdAtmIfCacUsedBandwidthUpper = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 2, 1, 24), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdAtmIfCacUsedBandwidthUpper.setStatus('current')
if mibBuilder.loadTexts: usdAtmIfCacUsedBandwidthUpper.setDescription('The most significant 32 bits of the CAC used bandwidth on the ATM major interface. The least significant 32 bits of the CAC used bandwidth are specified by usdAtmIfCacUsedBandwidthLower.')
usdAtmIfCacUsedBandwidthLower = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 2, 1, 25), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdAtmIfCacUsedBandwidthLower.setStatus('current')
if mibBuilder.loadTexts: usdAtmIfCacUsedBandwidthLower.setDescription('The least significant 32 bits of the CAC used bandwidth on the ATM major interface. The most significant 32 bits of the CAC used bandwidth are specified by usdAtmIfCacUsedBandwidthUpper.')
usdAtmPvcStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 3), )
if mibBuilder.loadTexts: usdAtmPvcStatisticsTable.setStatus('current')
if mibBuilder.loadTexts: usdAtmPvcStatisticsTable.setDescription('This table contains statistics for PVC entries.')
usdAtmPvcStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 3, 1), ).setIndexNames((0, "Unisphere-Data-ATM-MIB", "usdAtmPvcStatsIfIndex"), (0, "Unisphere-Data-ATM-MIB", "usdAtmPvcStatsVpi"), (0, "Unisphere-Data-ATM-MIB", "usdAtmPvcStatsVci"))
if mibBuilder.loadTexts: usdAtmPvcStatisticsEntry.setStatus('current')
if mibBuilder.loadTexts: usdAtmPvcStatisticsEntry.setDescription('Each entry provides statistics on an ATM PVC.')
usdAtmPvcStatsIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 3, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: usdAtmPvcStatsIfIndex.setStatus('current')
if mibBuilder.loadTexts: usdAtmPvcStatsIfIndex.setDescription('The ifIndex of the ATM interface.')
usdAtmPvcStatsVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 3, 1, 2), AtmVpIdentifier())
if mibBuilder.loadTexts: usdAtmPvcStatsVpi.setStatus('current')
if mibBuilder.loadTexts: usdAtmPvcStatsVpi.setDescription('The VPI of the ATM VCC used by this ATM interface and PVC.')
usdAtmPvcStatsVci = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 3, 1, 3), AtmVcIdentifier())
if mibBuilder.loadTexts: usdAtmPvcStatsVci.setStatus('current')
if mibBuilder.loadTexts: usdAtmPvcStatsVci.setDescription('The VCI of the ATM VCC used by this ATM interface and PVC.')
usdAtmPvcStatsInCells = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdAtmPvcStatsInCells.setStatus('current')
if mibBuilder.loadTexts: usdAtmPvcStatsInCells.setDescription('Received cells.')
usdAtmPvcStatsInCellOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdAtmPvcStatsInCellOctets.setStatus('current')
if mibBuilder.loadTexts: usdAtmPvcStatsInCellOctets.setDescription('Received cells octets.')
usdAtmPvcStatsInPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdAtmPvcStatsInPackets.setStatus('current')
if mibBuilder.loadTexts: usdAtmPvcStatsInPackets.setDescription('Received AAL PDUs.')
usdAtmPvcStatsInPacketOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdAtmPvcStatsInPacketOctets.setStatus('current')
if mibBuilder.loadTexts: usdAtmPvcStatsInPacketOctets.setDescription('Received AAL PDU octets.')
usdAtmPvcStatsOutCells = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdAtmPvcStatsOutCells.setStatus('current')
if mibBuilder.loadTexts: usdAtmPvcStatsOutCells.setDescription('Transmitted cells.')
usdAtmPvcStatsOutCellOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdAtmPvcStatsOutCellOctets.setStatus('current')
if mibBuilder.loadTexts: usdAtmPvcStatsOutCellOctets.setDescription('Transmitted cell octets.')
usdAtmPvcStatsOutPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdAtmPvcStatsOutPackets.setStatus('current')
if mibBuilder.loadTexts: usdAtmPvcStatsOutPackets.setDescription('Transmitted AAL PDUs.')
usdAtmPvcStatsOutPacketOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdAtmPvcStatsOutPacketOctets.setStatus('current')
if mibBuilder.loadTexts: usdAtmPvcStatsOutPacketOctets.setDescription('Transmitted AAL PDU octets.')
usdAtmPvcStatsInCellErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdAtmPvcStatsInCellErrors.setStatus('current')
if mibBuilder.loadTexts: usdAtmPvcStatsInCellErrors.setDescription('Received cells dropped due to errors.')
usdAtmPvcStatsinPacketErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdAtmPvcStatsinPacketErrors.setStatus('current')
if mibBuilder.loadTexts: usdAtmPvcStatsinPacketErrors.setDescription('Received packets dropped due to errors.')
usdAtmPvcStatsOutCellErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdAtmPvcStatsOutCellErrors.setStatus('current')
if mibBuilder.loadTexts: usdAtmPvcStatsOutCellErrors.setDescription('Cells not transmitted due to errors.')
usdAtmPvcStatsOutPacketErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdAtmPvcStatsOutPacketErrors.setStatus('current')
if mibBuilder.loadTexts: usdAtmPvcStatsOutPacketErrors.setDescription('Packets not transmitted due to errors.')
usdAtmPvcStatsInPacketDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdAtmPvcStatsInPacketDiscards.setStatus('current')
if mibBuilder.loadTexts: usdAtmPvcStatsInPacketDiscards.setDescription('Received packets w/o errors discarded.')
usdAtmPvcStatsInPacketOctetDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdAtmPvcStatsInPacketOctetDiscards.setStatus('current')
if mibBuilder.loadTexts: usdAtmPvcStatsInPacketOctetDiscards.setDescription('Received bytes w/o errors discarded.')
usdAtmPvcStatsInPacketUnknownProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 3, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdAtmPvcStatsInPacketUnknownProtocol.setStatus('current')
if mibBuilder.loadTexts: usdAtmPvcStatsInPacketUnknownProtocol.setDescription('Received packets that are discarded because the interface can not discern or is not configured to support this protocol.')
usdAtmVpTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 4), )
if mibBuilder.loadTexts: usdAtmVpTunnelTable.setStatus('current')
if mibBuilder.loadTexts: usdAtmVpTunnelTable.setDescription('This table contains entries for ATM VP Tunnels present in the system.')
usdAtmVpTunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 4, 1), ).setIndexNames((0, "Unisphere-Data-ATM-MIB", "usdAtmVpTunnelIfIndex"), (0, "Unisphere-Data-ATM-MIB", "usdAtmVpTunnelVpi"))
if mibBuilder.loadTexts: usdAtmVpTunnelEntry.setStatus('current')
if mibBuilder.loadTexts: usdAtmVpTunnelEntry.setDescription('Each entry describes the characteristics of an ATM VP Tunnel.')
usdAtmVpTunnelIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 4, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: usdAtmVpTunnelIfIndex.setStatus('current')
if mibBuilder.loadTexts: usdAtmVpTunnelIfIndex.setDescription('The ifIndex of the ATM interface. The value of this object is the same as the usdAtmIfIndex object in the usdAtmIfTable. Entries in this table cannot be created unless the underlying ATM interface entry is created first in the usdAtmIfTable.')
usdAtmVpTunnelVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 4, 1, 2), AtmVpIdentifier())
if mibBuilder.loadTexts: usdAtmVpTunnelVpi.setStatus('current')
if mibBuilder.loadTexts: usdAtmVpTunnelVpi.setDescription('The VPI value for this VP tunnel entry.')
usdAtmVpTunnelKbps = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdAtmVpTunnelKbps.setStatus('current')
if mibBuilder.loadTexts: usdAtmVpTunnelKbps.setDescription('The tunnel rate in kilobits per second (kbps) for this entry.')
usdAtmVpTunnelRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 4, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdAtmVpTunnelRowStatus.setStatus('current')
if mibBuilder.loadTexts: usdAtmVpTunnelRowStatus.setDescription('Controls creation/deletion of entries in this table according to the RowStatus textual convention, constrained to support the following values only: createAndGo destroy To create an entry in this table, the following entry objects MUST be explicitly configured: usdAtmVpTunnelRowStatus usdAtmVpTunnelKbps In addition, when creating an entry the following condition must hold: A correponding usdAtmVpTunnelIfIndex value must have been created in the usdAtmIfTable previously.')
usdAtmVpTunnelServiceCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nrtVbr", 1), ("cbr", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdAtmVpTunnelServiceCategory.setStatus('current')
if mibBuilder.loadTexts: usdAtmVpTunnelServiceCategory.setDescription('The ATM service category for the tunnel.')
usdAtmIfCapabilityTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 5), )
if mibBuilder.loadTexts: usdAtmIfCapabilityTable.setStatus('current')
if mibBuilder.loadTexts: usdAtmIfCapabilityTable.setDescription('This table contains entries for ATM interfaces present in the system.')
usdAtmIfCapabilityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 5, 1), ).setIndexNames((0, "Unisphere-Data-ATM-MIB", "usdAtmIfCapabilityIndex"))
if mibBuilder.loadTexts: usdAtmIfCapabilityEntry.setStatus('current')
if mibBuilder.loadTexts: usdAtmIfCapabilityEntry.setDescription('Each entry describes the capabilities of an ATM interface. A management client can use this table to determine differences in the configurable level of support across entries in this table.')
usdAtmIfCapabilityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 5, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: usdAtmIfCapabilityIndex.setStatus('current')
if mibBuilder.loadTexts: usdAtmIfCapabilityIndex.setDescription('The ifIndex of the ATM interface. The value of this object is the same as usdAtmIfIndex in the usdAtmIfTable.')
usdAtmIfCapabilityTrafficShaping = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 5, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdAtmIfCapabilityTrafficShaping.setStatus('current')
if mibBuilder.loadTexts: usdAtmIfCapabilityTrafficShaping.setDescription('Indicates whether traffic shaping is supported on this interface; true(1) indicates that it is, false(2) indicates that it is not.')
usdAtmIfCapabilityOam = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 5, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdAtmIfCapabilityOam.setStatus('current')
if mibBuilder.loadTexts: usdAtmIfCapabilityOam.setDescription('Indicates whether OAM is supported on this interface; true(1) indicates that it is, false(2) indicates that it is not.')
usdAtmIfCapabilityDefaultVcPerVp = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdAtmIfCapabilityDefaultVcPerVp.setStatus('current')
if mibBuilder.loadTexts: usdAtmIfCapabilityDefaultVcPerVp.setDescription('The default number of VCs per VP for this interface.')
usdAtmIfCapabilityNumVpiVciBits = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(8, 28))).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdAtmIfCapabilityNumVpiVciBits.setStatus('current')
if mibBuilder.loadTexts: usdAtmIfCapabilityNumVpiVciBits.setDescription('The total range of bits used for constructing VPI/VCI identifiers for this interface.')
usdAtmIfCapabilityMaxVcd = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 5, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdAtmIfCapabilityMaxVcd.setStatus('current')
if mibBuilder.loadTexts: usdAtmIfCapabilityMaxVcd.setDescription('The maximum configurable value for a VCD on this interface.')
usdAtmIfCapabilityMaxVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 5, 1, 7), AtmVpIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdAtmIfCapabilityMaxVpi.setStatus('current')
if mibBuilder.loadTexts: usdAtmIfCapabilityMaxVpi.setDescription('The maximum configurable value for a VPI on this interface.')
usdAtmIfCapabilityMaxVci = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 5, 1, 8), AtmVcIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdAtmIfCapabilityMaxVci.setStatus('current')
if mibBuilder.loadTexts: usdAtmIfCapabilityMaxVci.setDescription('The maximum configurable value for a VCI on this interface.')
usdAtmIfCapabilityOamCellFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 5, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdAtmIfCapabilityOamCellFilter.setStatus('current')
if mibBuilder.loadTexts: usdAtmIfCapabilityOamCellFilter.setDescription('Indicates whether OAM cell filter is supported on this interface; true(1) indicates that it is, false(2) indicates that it is not.')
usdAtmIfSvcSignallingTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 6), )
if mibBuilder.loadTexts: usdAtmIfSvcSignallingTable.setStatus('current')
if mibBuilder.loadTexts: usdAtmIfSvcSignallingTable.setDescription('This table contains entries for extending the usdAtmIfTable for configuring signalling information for switched virtual connection (SVC).')
usdAtmIfSvcSignallingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 6, 1), ).setIndexNames((0, "Unisphere-Data-ATM-MIB", "usdAtmIfIndex"))
if mibBuilder.loadTexts: usdAtmIfSvcSignallingEntry.setStatus('current')
if mibBuilder.loadTexts: usdAtmIfSvcSignallingEntry.setDescription('Each entry provides configuration parameters for ATM signalling on the interface.')
usdAtmIfSvcSignallingVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 6, 1, 1), AtmVpIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdAtmIfSvcSignallingVpi.setStatus('current')
if mibBuilder.loadTexts: usdAtmIfSvcSignallingVpi.setDescription('The VPI identifier of the ATM circuit used for signalling for this interface.')
usdAtmIfSvcSignallingVci = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 6, 1, 2), AtmVcIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdAtmIfSvcSignallingVci.setStatus('current')
if mibBuilder.loadTexts: usdAtmIfSvcSignallingVci.setDescription('The VCI identifier of the ATM circuit used for signalling for this interface.')
usdAtmIfSvcSignallingVcd = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 6, 1, 3), AtmVcIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdAtmIfSvcSignallingVcd.setStatus('current')
if mibBuilder.loadTexts: usdAtmIfSvcSignallingVcd.setDescription('The VCI identifier of the ATM circuit used for signalling for this interface.')
usdAtmIfSvcSignallingAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 6, 1, 4), AtmVorXAdminStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdAtmIfSvcSignallingAdminStatus.setStatus('current')
if mibBuilder.loadTexts: usdAtmIfSvcSignallingAdminStatus.setDescription('The administrative status of signalling in the ATM interface.')
usdAtmAal5NextIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 2, 1), UsdNextIfIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdAtmAal5NextIfIndex.setStatus('current')
if mibBuilder.loadTexts: usdAtmAal5NextIfIndex.setDescription('Coordinate ifIndex value allocation for entries in usdAtmAal5IfTable. A GET of this object returns the next available ifIndex value to be used to create an entry in the associated interface table; or zero, if no valid ifIndex value is available. This object also returns a value of zero when it is the lexicographic successor of a varbind presented in an SNMP GETNEXT or GETBULK request, for which circumstance it is assumed that ifIndex allocation is unintended. Successive GETs will typically return different values, thus avoiding collisions among cooperating management clients seeking to create table entries simultaneously.')
usdAtmAal5IfTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 2, 2), )
if mibBuilder.loadTexts: usdAtmAal5IfTable.setStatus('current')
if mibBuilder.loadTexts: usdAtmAal5IfTable.setDescription('This table contains entries for ATM AAL5 interfaces present in the system.')
usdAtmAal5IfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 2, 2, 1), ).setIndexNames((0, "Unisphere-Data-ATM-MIB", "usdAtmAal5IfIndex"))
if mibBuilder.loadTexts: usdAtmAal5IfEntry.setStatus('current')
if mibBuilder.loadTexts: usdAtmAal5IfEntry.setDescription('Each entry describes the characteristics of an ATM AAL5 interface. Creating/deleting entries in this table causes corresponding entries for be created/deleted in ifTable/ifXTable/usdIfTable.')
usdAtmAal5IfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 2, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: usdAtmAal5IfIndex.setStatus('current')
if mibBuilder.loadTexts: usdAtmAal5IfIndex.setDescription('The ifIndex of the ATM AAL5 interface. When creating entries in this table, suitable values for this object are determined by reading usdAtmAal5NextIfIndex.')
usdAtmAal5IfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 2, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdAtmAal5IfRowStatus.setStatus('current')
if mibBuilder.loadTexts: usdAtmAal5IfRowStatus.setDescription('Controls creation/deletion of entries in this table according to the RowStatus textual convention, constrained to support the following values only: createAndGo destroy To create an entry in this table, the following entry objects MUST be explicitly configured: usdAtmAal5IfRowStatus usdAtmAal5IfLowerIfIndex In addition, when creating an entry the following condition must hold: A value for usdAtmAal5IfIndex must have been determined previously, by reading usdAtmAal5NextIfIndex. A corresponding entry in ifTable/ifXTable/usdIfTable is created or destroyed as a result of creating/destroying an entry in this table.')
usdAtmAal5IfLowerIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 2, 2, 1, 3), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdAtmAal5IfLowerIfIndex.setStatus('current')
if mibBuilder.loadTexts: usdAtmAal5IfLowerIfIndex.setDescription('The ifIndex of an ATM interface over which this ATM AAL5 interface is to be layered. A value of zero indicates no layering. An implementation may choose to require that a nonzero value be configured at entry creation.')
usdAtmSubIfNextIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 3, 1), UsdNextIfIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdAtmSubIfNextIfIndex.setStatus('current')
if mibBuilder.loadTexts: usdAtmSubIfNextIfIndex.setDescription('Coordinate ifIndex value allocation for entries in usdAtmSubIfTable. A GET of this object returns the next available ifIndex value to be used to create an entry in the associated interface table; or zero, if no valid ifIndex value is available. This object also returns a value of zero when it is the lexicographic successor of a varbind presented in an SNMP GETNEXT or GETBULK request, for which circumstance it is assumed that ifIndex allocation is unintended. Successive GETs will typically return different values, thus avoiding collisions among cooperating management clients seeking to create table entries simultaneously.')
usdAtmSubIfTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 3, 2), )
if mibBuilder.loadTexts: usdAtmSubIfTable.setStatus('current')
if mibBuilder.loadTexts: usdAtmSubIfTable.setDescription('This table contains entries for ATM Subinterfaces present in the system.')
usdAtmSubIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 3, 2, 1), ).setIndexNames((0, "Unisphere-Data-ATM-MIB", "usdAtmSubIfIndex"))
if mibBuilder.loadTexts: usdAtmSubIfEntry.setStatus('current')
if mibBuilder.loadTexts: usdAtmSubIfEntry.setDescription('Each entry describes the characteristics of an ATM Subinterface. Creating/deleting entries in this table causes corresponding entries for be created/deleted in ifTable/ifXTable/usdIfTable.')
usdAtmSubIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 3, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: usdAtmSubIfIndex.setStatus('current')
if mibBuilder.loadTexts: usdAtmSubIfIndex.setDescription('The ifIndex of the ATM Subinterface. When creating entries in this table, suitable values for this object are determined by reading usdAtmSubNextIfIndex.')
usdAtmSubIfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 3, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdAtmSubIfRowStatus.setStatus('current')
if mibBuilder.loadTexts: usdAtmSubIfRowStatus.setDescription('Controls creation/deletion of entries in this table according to the RowStatus textual convention, constrained to support the following values only: createAndGo destroy To create an entry in this table, the following entry objects MUST be explicitly configured: usdAtmSubIfRowStatus usdAtmSubIfLowerIndex In addition, when creating an entry the following condition must hold: A value for usdAtmSubIfIndex must have been determined previously, by reading usdAtmSubIfNextIfIndex. A corresponding entry in ifTable/ifXTable/usdIfTable is created or destroyed as a result of creating/destroying an entry in this table.')
usdAtmSubIfDistinguisher = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdAtmSubIfDistinguisher.setStatus('current')
if mibBuilder.loadTexts: usdAtmSubIfDistinguisher.setDescription('An integer identifier for the subinterface, used in conjunction with the command-line interface. It is provided here for cross-reference purposes only. The value must be unique among subinterfaces configured on the same underlying ATM adaptation layer. The upper bound for the value is further constrained to be identical with the maximum number of subinterfaces supported by the lower interface. If this object is not configured, a value will be allocated internally and can be queried after table entry creation has succeeded.')
usdAtmSubIfLowerIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 3, 2, 1, 4), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdAtmSubIfLowerIfIndex.setStatus('current')
if mibBuilder.loadTexts: usdAtmSubIfLowerIfIndex.setDescription('The ifIndex of an ATM AAL5 interface over which this ATM subinterface is to be layered. A value of zero indicates no layering. An implementation may choose to require that a nonzero value be configured at entry creation.')
usdAtmSubIfNbma = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 3, 2, 1, 5), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdAtmSubIfNbma.setStatus('current')
if mibBuilder.loadTexts: usdAtmSubIfNbma.setDescription('The NBMA administrative setting. Setting this value of this object to true(1) will enable multipoint access on this interface. Setting the value to false(2), will enable point to point access on this interface.')
usdAtmSubIfAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 3, 2, 1, 6), AtmAddr().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(7, 7), ValueSizeConstraint(20, 20), )).clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdAtmSubIfAddress.setStatus('current')
if mibBuilder.loadTexts: usdAtmSubIfAddress.setDescription('Specifies the local ATM NSAP address of the circuit. A GET operation returns a full 20-octet NSAP. A SET operation only requires 7 octets, since the prefix can be implied.')
usdAtmSubIfVccTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 3, 3), )
if mibBuilder.loadTexts: usdAtmSubIfVccTable.setStatus('current')
if mibBuilder.loadTexts: usdAtmSubIfVccTable.setDescription('This table contains entries for ATM VCCs configured on ATM subinterfaces present in the system. An implementation may constrain the number of VCCs permitted to be configured per ATM Subinterface; in particular, an implementation may restrict each ATM Subinterface to have a single VCC. Attributes in this entry can only be configured at entry creation, and remain fixed for the lifetime of the entry.')
usdAtmSubIfVccEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 3, 3, 1), ).setIndexNames((0, "Unisphere-Data-ATM-MIB", "usdAtmSubIfIndex"), (0, "Unisphere-Data-ATM-MIB", "usdAtmSubIfVccVpi"), (0, "Unisphere-Data-ATM-MIB", "usdAtmSubIfVccVci"))
if mibBuilder.loadTexts: usdAtmSubIfVccEntry.setStatus('current')
if mibBuilder.loadTexts: usdAtmSubIfVccEntry.setDescription('Each entry describes the characteristics of an ATM subinterface VCC.')
usdAtmSubIfVccVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 3, 3, 1, 1), AtmVpIdentifier())
if mibBuilder.loadTexts: usdAtmSubIfVccVpi.setStatus('current')
if mibBuilder.loadTexts: usdAtmSubIfVccVpi.setDescription('The VPI of the ATM VCC used by this subinterface.')
usdAtmSubIfVccVci = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 3, 3, 1, 2), AtmVcIdentifier())
if mibBuilder.loadTexts: usdAtmSubIfVccVci.setStatus('current')
if mibBuilder.loadTexts: usdAtmSubIfVccVci.setDescription('The VCI of the ATM VCC used by this subinterface.')
usdAtmSubIfVccRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 3, 3, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdAtmSubIfVccRowStatus.setStatus('current')
if mibBuilder.loadTexts: usdAtmSubIfVccRowStatus.setDescription('Controls creation/deletion of entries in this table according to the RowStatus textual convention, constrained to support the following values only: createAndGo destroy To create an entry in this table, the following entry objects MUST be explicitly configured: usdAtmSubIfVccRowStatus In addition, when creating an entry the following conditions must hold: The ATM Subinterface identified by usdAtmSubIfIndex must exist. A positive value configured for usdAtmSubIfVccVcd must not already be assigned to an existing VCC. For each value of usdAtmSubIfVccServiceCategory, additional dependent objects in the entry require configuration as identified here: usdAtmSubIfVccServiceCategory Requires configuration of: ------------------------------------------------------------ ubr <none> ubrPcr usdAtmSubIfVccPcr nrtVbr usdAtmSubIfVccPcr usdAtmSubIfVccScr usdAtmSubIfVccMbs cbr usdAtmSubIfVccPcr rtVbr usdAtmSubIfVccPcr usdAtmSubIfVccScr usdAtmSubIfVccMbs ------------------------------------------------------------ Attributes in this entry can only be configured at entry creation, and remain fixed for the lifetime of the entry.')
usdAtmSubIfVccVcd = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdAtmSubIfVccVcd.setStatus('current')
if mibBuilder.loadTexts: usdAtmSubIfVccVcd.setDescription('An integer identifier for the circuit, used in conjunction with the command-line interface. It is provided here for cross-reference purposes only. The value must be unique among VCCs configured on the same underlying ATM interface. If this object is not configured, or is configured with a value of zero, a value will be allocated internally and can be queried after table entry creation has succeeded.')
usdAtmSubIfVccType = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 3, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("rfc1483VcMux", 0), ("rfc1483Llc", 1), ("autoconfig", 2))).clone('rfc1483VcMux')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdAtmSubIfVccType.setStatus('current')
if mibBuilder.loadTexts: usdAtmSubIfVccType.setDescription("Specifies the encapsulation used by the circuit to carry IP datagrams. Encapsulations are as specified in RFC1483 Multiprotocol Interconnect over ATM. 'autoconfig' will recognize both VcMux and LLC formats.")
usdAtmSubIfVccServiceCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 3, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("ubr", 0), ("ubrPcr", 1), ("nrtVbr", 2), ("cbr", 3), ("rtVbr", 4))).clone('ubr')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdAtmSubIfVccServiceCategory.setStatus('current')
if mibBuilder.loadTexts: usdAtmSubIfVccServiceCategory.setDescription('Service category for this circuit: ubr Unspecified Bit Rate (best effort). ubrPcr Unspecified Bit Rate with Peak Cell Rate limit. nrtVbr Non-RealTime Variable Bit Rate. cbr Constant Bit Rate. rtVbr Realtime Variable Bit Rate.')
usdAtmSubIfVccPcr = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 3, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdAtmSubIfVccPcr.setStatus('current')
if mibBuilder.loadTexts: usdAtmSubIfVccPcr.setDescription('Peak Cell Rate, in kilobits per second (kbps), of this circuit. This parameter is only required when usdAtmSubIfVccServiceCategory is configured to have one of the following values: ubrPcr nrtVbr cbr rtVbr ')
usdAtmSubIfVccScr = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 3, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdAtmSubIfVccScr.setStatus('current')
if mibBuilder.loadTexts: usdAtmSubIfVccScr.setDescription('Sustained Cell Rate, in kilobits per second (kbps), of this circuit. This parameter is only required when usdAtmSubIfVccServiceCategory is configured to have the following value: nrtVbr rtVbr ')
usdAtmSubIfVccMbs = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 3, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('cells').setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdAtmSubIfVccMbs.setStatus('current')
if mibBuilder.loadTexts: usdAtmSubIfVccMbs.setDescription('Maximum Burst Size, in cells, of this circuit. This parameter is only required when usdAtmSubIfVccServiceCategory is configured to have the following value: nrtVbr rtVbr ')
usdAtmSubIfInverseArp = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 3, 3, 1, 10), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdAtmSubIfInverseArp.setStatus('current')
if mibBuilder.loadTexts: usdAtmSubIfInverseArp.setDescription('Enables the inverse ARP protocol on this VCC; true(1) enables the protocol, false(2) disables it.')
usdAtmSubIfInverseArpRefresh = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 3, 3, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('minutes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdAtmSubIfInverseArpRefresh.setStatus('current')
if mibBuilder.loadTexts: usdAtmSubIfInverseArpRefresh.setDescription('The refresh rate in minutes between inverse ARP protocol messages.')
usdAtmCircuitOamTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 3, 4), )
if mibBuilder.loadTexts: usdAtmCircuitOamTable.setStatus('current')
if mibBuilder.loadTexts: usdAtmCircuitOamTable.setDescription('This table contains circuit OAM data for a PVC.')
usdAtmCircuitOamEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 3, 4, 1), ).setIndexNames((0, "Unisphere-Data-ATM-MIB", "usdAtmCircuitOamIfIndex"), (0, "Unisphere-Data-ATM-MIB", "usdAtmCircuitOamVpi"), (0, "Unisphere-Data-ATM-MIB", "usdAtmCircuitOamVci"))
if mibBuilder.loadTexts: usdAtmCircuitOamEntry.setStatus('current')
if mibBuilder.loadTexts: usdAtmCircuitOamEntry.setDescription('Each entry provides OAM data on an ATM PVC.')
usdAtmCircuitOamIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 3, 4, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: usdAtmCircuitOamIfIndex.setStatus('current')
if mibBuilder.loadTexts: usdAtmCircuitOamIfIndex.setDescription('The ifIndex of the ATM subinterface.')
usdAtmCircuitOamVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 3, 4, 1, 2), AtmVpIdentifier())
if mibBuilder.loadTexts: usdAtmCircuitOamVpi.setStatus('current')
if mibBuilder.loadTexts: usdAtmCircuitOamVpi.setDescription('The VPI of the ATM VCC used by this ATM interface and PVC.')
usdAtmCircuitOamVci = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 3, 4, 1, 3), AtmVcIdentifier())
if mibBuilder.loadTexts: usdAtmCircuitOamVci.setStatus('current')
if mibBuilder.loadTexts: usdAtmCircuitOamVci.setDescription('The VCI of the ATM VCC used by this ATM interface and PVC.')
usdAtmCircuitOamAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 3, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("oamAdminStateDisabled", 1), ("oamAdminStateEnabled", 2))).clone('oamAdminStateDisabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdAtmCircuitOamAdminStatus.setStatus('current')
if mibBuilder.loadTexts: usdAtmCircuitOamAdminStatus.setDescription('The administrative state of OAM for the interface identified by this entry.')
usdAtmCircuitOamLoopbackOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 3, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("oamOperStatusNotSupported", 0), ("oamOperStatusDisabled", 1), ("oamOperStatusSent", 2), ("oamOperStatusReceived", 3), ("oamOperStatusFailed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdAtmCircuitOamLoopbackOperStatus.setStatus('current')
if mibBuilder.loadTexts: usdAtmCircuitOamLoopbackOperStatus.setDescription('The operational status of OAM for the interface identified by this entry. oamOperStatusNotSupported(0) - OAM not supported on this interface oamOperStatusDisabled(1) - VC integrity disabled oamOperStatusSent(2) - Loopback sent, awaiting response oamOperStatusReceived(3) - Loopback response received, awaiting frequency oamOperStatusFailed(4) - Loopback response not received, or invalid response received')
usdAtmCircuitVcOamOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 3, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("oamVcOperStateAisState", 0), ("oamVcOperStateRdiState", 1), ("oamVcOperStateDownRetry", 2), ("oamVcOperStateUpRetry", 3), ("oamVcOperStateUp", 4), ("oamVcOperStateDown", 5), ("oamVcOperStateNotManaged", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdAtmCircuitVcOamOperStatus.setStatus('current')
if mibBuilder.loadTexts: usdAtmCircuitVcOamOperStatus.setDescription('The OAM VC operational status of this entry. oamVcOperStateAisState(0) - AIS cell received or underlying physical layer reporting transmission path AIS oamVcOperStateRdiState(1) - RDI cell received oamVcOperStateDownRetry(2) - OAM loopback failed, using retry frequency to verify that the VC is really down oamVcOperStateUpRetry(3) - OAM loopback successful, using retry frequency to verify that the VC is really up oamVcOperStateUp(4) - OAM loopback successful after up retry verification oamVcOperStateDown(5) - OAM loopback failed after down retry verification oamVcOperStateNotManaged(6)- No verification via loopback cells being performed.')
usdAtmCircuitOamLoopbackFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 3, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600)).clone(10)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdAtmCircuitOamLoopbackFrequency.setStatus('current')
if mibBuilder.loadTexts: usdAtmCircuitOamLoopbackFrequency.setDescription('The OAM loopback frequency for the interface identified by this entry.')
usdAtmCircuitInOamF5Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 3, 4, 1, 8), Counter32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: usdAtmCircuitInOamF5Cells.setStatus('current')
if mibBuilder.loadTexts: usdAtmCircuitInOamF5Cells.setDescription('Received OAM F5 cells.')
usdAtmCircuitInOamCellsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 3, 4, 1, 9), Counter32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: usdAtmCircuitInOamCellsDropped.setStatus('current')
if mibBuilder.loadTexts: usdAtmCircuitInOamCellsDropped.setDescription('Received OAM cells that were dropped.')
usdAtmCircuitOutOamF5Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 3, 4, 1, 10), Counter32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: usdAtmCircuitOutOamF5Cells.setStatus('current')
if mibBuilder.loadTexts: usdAtmCircuitOutOamF5Cells.setDescription('Transmitted OAM F5 cells.')
usdAtmCircuitInOamF5EndToEndLoopbackCells = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 3, 4, 1, 11), Counter32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: usdAtmCircuitInOamF5EndToEndLoopbackCells.setStatus('current')
if mibBuilder.loadTexts: usdAtmCircuitInOamF5EndToEndLoopbackCells.setDescription('Received OAM F5 end-to-end loopback cells.')
usdAtmCircuitInOamF5SegmentLoopbackCells = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 3, 4, 1, 12), Counter32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: usdAtmCircuitInOamF5SegmentLoopbackCells.setStatus('current')
if mibBuilder.loadTexts: usdAtmCircuitInOamF5SegmentLoopbackCells.setDescription('Received OAM F5 segment loopback cells.')
usdAtmCircuitInOamF5AisCells = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 3, 4, 1, 13), Counter32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: usdAtmCircuitInOamF5AisCells.setStatus('current')
if mibBuilder.loadTexts: usdAtmCircuitInOamF5AisCells.setDescription('Received OAM F5 AIS cells.')
usdAtmCircuitInOamF5RdiCells = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 3, 4, 1, 14), Counter32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: usdAtmCircuitInOamF5RdiCells.setStatus('current')
if mibBuilder.loadTexts: usdAtmCircuitInOamF5RdiCells.setDescription('Received OAM F5 RDI cells.')
usdAtmCircuitOutOamF5EndToEndLoopbackCells = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 3, 4, 1, 15), Counter32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: usdAtmCircuitOutOamF5EndToEndLoopbackCells.setStatus('current')
if mibBuilder.loadTexts: usdAtmCircuitOutOamF5EndToEndLoopbackCells.setDescription('Transmitted OAM F5 end-to-end loopback cells.')
usdAtmCircuitOutOamF5SegmentLoopbackCells = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 3, 4, 1, 16), Counter32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: usdAtmCircuitOutOamF5SegmentLoopbackCells.setStatus('current')
if mibBuilder.loadTexts: usdAtmCircuitOutOamF5SegmentLoopbackCells.setDescription('Transmitted OAM F5 segment loopback cells.')
usdAtmCircuitOutOamF5RdiCells = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 3, 4, 1, 17), Counter32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: usdAtmCircuitOutOamF5RdiCells.setStatus('current')
if mibBuilder.loadTexts: usdAtmCircuitOutOamF5RdiCells.setDescription('Transmitted OAM F5 RDI cells.')
usdAtmSubIfVccTrafficShapingTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 3, 5), )
if mibBuilder.loadTexts: usdAtmSubIfVccTrafficShapingTable.setStatus('current')
if mibBuilder.loadTexts: usdAtmSubIfVccTrafficShapingTable.setDescription('This table contains entries for traffic shaping of ATM VCCs configured on ATM subinterfaces present in the system. This table augments the usdAtmSubIfVccTable only for VCCs that support traffic shapping. Attributes in this entry can only be configured at entry creation, and remain fixed for the lifetime of the entry.')
usdAtmSubIfVccTrafficShapingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 3, 5, 1), )
usdAtmSubIfVccEntry.registerAugmentions(("Unisphere-Data-ATM-MIB", "usdAtmSubIfVccTrafficShapingEntry"))
usdAtmSubIfVccTrafficShapingEntry.setIndexNames(*usdAtmSubIfVccEntry.getIndexNames())
if mibBuilder.loadTexts: usdAtmSubIfVccTrafficShapingEntry.setStatus('current')
if mibBuilder.loadTexts: usdAtmSubIfVccTrafficShapingEntry.setDescription('Each entry describes the traffic shping characteristics of an ATM subinterface VCC.')
usdAtmSubIfVccTrafficShapingCdvt = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 3, 5, 1, 1), Unsigned32()).setUnits('tenths of a microsecond').setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdAtmSubIfVccTrafficShapingCdvt.setStatus('current')
if mibBuilder.loadTexts: usdAtmSubIfVccTrafficShapingCdvt.setDescription('The network cell delay variation tolerance (CDVT) in tenths of a microsecond.')
usdAtmSubIfVccTrafficShapingClp0 = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 3, 5, 1, 2), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdAtmSubIfVccTrafficShapingClp0.setStatus('current')
if mibBuilder.loadTexts: usdAtmSubIfVccTrafficShapingClp0.setDescription('Specifies whether or not only CLP0 cells are to be policed according to the traffic contract. CLP1 cells are forwarded on a best-effort basis CLP-significant model for (VBR.2, VBR.3 conformance). Applicable only for VBR circuits.')
usdAtmSubIfVccTrafficShapingTagging = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 3, 5, 1, 3), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdAtmSubIfVccTrafficShapingTagging.setStatus('current')
if mibBuilder.loadTexts: usdAtmSubIfVccTrafficShapingTagging.setDescription('Specifies whether or not CLP0 cells should be tagged for SCR policing (VBR.3 conformance). Applicable only for VBR circuits.')
usdAtmSubIfVccTrafficShapingPoliceObserve = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 3, 5, 1, 4), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdAtmSubIfVccTrafficShapingPoliceObserve.setStatus('current')
if mibBuilder.loadTexts: usdAtmSubIfVccTrafficShapingPoliceObserve.setDescription('Specifies whether of not no policing action is to be taken (note the double negative; if true(1) then no policing action will be taken; if false(2) then policing action will be taken). Regardless of the state of this object, all counters will be incremented.')
usdAtmSubIfVccTrafficShapingPacketShaping = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 3, 5, 1, 5), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdAtmSubIfVccTrafficShapingPacketShaping.setStatus('current')
if mibBuilder.loadTexts: usdAtmSubIfVccTrafficShapingPacketShaping.setDescription('Specifies whether of not to shape output traffic on a packet boundary.')
usdAtmSubIfSvcConfigTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 3, 6), )
if mibBuilder.loadTexts: usdAtmSubIfSvcConfigTable.setStatus('current')
if mibBuilder.loadTexts: usdAtmSubIfSvcConfigTable.setDescription('This table contains entries for extending the usdAtmSubIfTable to configure switched virtual connection (SVC)on the subinterfaces.')
usdAtmSubIfSvcConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 3, 6, 1), ).setIndexNames((0, "Unisphere-Data-ATM-MIB", "usdAtmSubIfIndex"))
if mibBuilder.loadTexts: usdAtmSubIfSvcConfigEntry.setStatus('current')
if mibBuilder.loadTexts: usdAtmSubIfSvcConfigEntry.setDescription('Each entry provides configuration parameters for an ATM SVC on the subinterface.')
usdAtmSubIfSvcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 3, 6, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdAtmSubIfSvcRowStatus.setStatus('current')
if mibBuilder.loadTexts: usdAtmSubIfSvcRowStatus.setDescription('Controls creation/deletion of entries in this table according to the RowStatus textual convention, constrained to support the following values only: createAndGo destroy ')
usdAtmSubIfSvcConfigDestAtmAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 3, 6, 1, 2), AtmAddr().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdAtmSubIfSvcConfigDestAtmAddress.setStatus('current')
if mibBuilder.loadTexts: usdAtmSubIfSvcConfigDestAtmAddress.setDescription('Specifies the destination ATM NSAP address of the circuit.')
usdAtmSubIfSvcConfigCircuitType = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 3, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("rfc1483VcMux", 0), ("rfc1483Llc", 1))).clone('rfc1483VcMux')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdAtmSubIfSvcConfigCircuitType.setStatus('current')
if mibBuilder.loadTexts: usdAtmSubIfSvcConfigCircuitType.setDescription('Specifies the encapsulation used by the circuit to carry IP datagrams. Encapsulations are as specified in RFC1483 Multiprotocol Interconnect over ATM.')
usdAtmSubIfSvcConfigServiceCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 3, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("ubr", 0), ("ubrPcr", 1), ("nrtVbr", 2), ("cbr", 3), ("rtVbr", 4))).clone('ubr')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdAtmSubIfSvcConfigServiceCategory.setStatus('current')
if mibBuilder.loadTexts: usdAtmSubIfSvcConfigServiceCategory.setDescription('Service category for this circuit: ubr Unspecified Bit Rate (best effort). ubrPcr Unspecified Bit Rate with Peak Cell Rate limit. nrtVbr Non-RealTime Variable Bit Rate. cbr Constant Bit Rate. rtVbr Realtime Variable Bit Rate.')
usdAtmSubIfSvcConfigPcr = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 3, 6, 1, 5), Unsigned32()).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdAtmSubIfSvcConfigPcr.setStatus('current')
if mibBuilder.loadTexts: usdAtmSubIfSvcConfigPcr.setDescription('Peak Cell Rate, in kilo-bits per second (kbps), of this circuit.')
usdAtmSubIfSvcConfigScr = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 3, 6, 1, 6), Unsigned32()).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdAtmSubIfSvcConfigScr.setStatus('current')
if mibBuilder.loadTexts: usdAtmSubIfSvcConfigScr.setDescription('Sustained Cell Rate, in kilo-bits per second (kbps), of this circuit.')
usdAtmSubIfSvcConfigMbs = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 3, 6, 1, 7), Unsigned32()).setUnits('cells').setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdAtmSubIfSvcConfigMbs.setStatus('current')
if mibBuilder.loadTexts: usdAtmSubIfSvcConfigMbs.setDescription('Maximum Burst Size, in cells, of this circuit.')
usdAtmSubIfSvcConfigCdvt = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 3, 6, 1, 8), Unsigned32()).setUnits('100us').setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdAtmSubIfSvcConfigCdvt.setStatus('current')
if mibBuilder.loadTexts: usdAtmSubIfSvcConfigCdvt.setDescription('Specify the network Cell Delay Variation Tolerance.')
usdAtmSubIfSvcConfigClp0 = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 3, 6, 1, 9), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdAtmSubIfSvcConfigClp0.setStatus('current')
if mibBuilder.loadTexts: usdAtmSubIfSvcConfigClp0.setDescription('Specify that only CLP0 cells are to be policed according to the traffic contract. CLP1 cells are forwarded on a best-effort basis CLP-significant model for (VBR.2, VBR.3 conformance).')
usdAtmSubIfSvcConfigTagging = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 3, 6, 1, 10), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdAtmSubIfSvcConfigTagging.setStatus('current')
if mibBuilder.loadTexts: usdAtmSubIfSvcConfigTagging.setDescription('Specify that CLP0 cells should be tagged for SCR policing (VBR.3 conformance).')
usdAtmSubIfSvcConfigObserve = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 3, 6, 1, 11), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdAtmSubIfSvcConfigObserve.setStatus('current')
if mibBuilder.loadTexts: usdAtmSubIfSvcConfigObserve.setDescription('Specify that no policing action is to be taken; only counters are incremented.')
usdAtmSubIfSvcConfigPacketDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 3, 6, 1, 12), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdAtmSubIfSvcConfigPacketDiscard.setStatus('current')
if mibBuilder.loadTexts: usdAtmSubIfSvcConfigPacketDiscard.setDescription('Enable early packet Discard for this circuit.')
usdAtmNbmaMapTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 4, 1), )
if mibBuilder.loadTexts: usdAtmNbmaMapTable.setStatus('current')
if mibBuilder.loadTexts: usdAtmNbmaMapTable.setDescription('This table contains entries for ATM NBMA maps.')
usdAtmNbmaMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 4, 1, 1), ).setIndexNames((0, "Unisphere-Data-ATM-MIB", "usdAtmNbmaMapName"), (0, "Unisphere-Data-ATM-MIB", "usdAtmNbmaMapVcd"))
if mibBuilder.loadTexts: usdAtmNbmaMapEntry.setStatus('current')
if mibBuilder.loadTexts: usdAtmNbmaMapEntry.setDescription('Each entry describes the characteristics of an ATM NBMA map.')
usdAtmNbmaMapName = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 4, 1, 1, 1), UsdAtmNbmaMapName())
if mibBuilder.loadTexts: usdAtmNbmaMapName.setStatus('current')
if mibBuilder.loadTexts: usdAtmNbmaMapName.setDescription('The NBMA map name.')
usdAtmNbmaMapVcd = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: usdAtmNbmaMapVcd.setStatus('current')
if mibBuilder.loadTexts: usdAtmNbmaMapVcd.setDescription('An integer identifier for the ATM circuit, used in conjunction with the command-line interface. The value must be unique among VCs configured on the same ATM interface.')
usdAtmNbmaMapIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 4, 1, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdAtmNbmaMapIpAddress.setStatus('current')
if mibBuilder.loadTexts: usdAtmNbmaMapIpAddress.setDescription('The IP address associated with this entry.')
usdAtmNbmaMapVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 4, 1, 1, 4), AtmVpIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdAtmNbmaMapVpi.setStatus('current')
if mibBuilder.loadTexts: usdAtmNbmaMapVpi.setDescription('The VPI identifier of the ATM circuit.')
usdAtmNbmaMapVci = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 4, 1, 1, 5), AtmVcIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdAtmNbmaMapVci.setStatus('current')
if mibBuilder.loadTexts: usdAtmNbmaMapVci.setDescription('The VCI identifier of the ATM circuit.')
usdAtmNbmaMapIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 4, 1, 1, 6), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdAtmNbmaMapIfIndex.setStatus('current')
if mibBuilder.loadTexts: usdAtmNbmaMapIfIndex.setDescription('The ifIndex of the ATM major interface associated with this entry. The value of this object will be zero when the map is not applied to an interface. ')
usdAtmNbmaMapBroadcast = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 4, 1, 1, 7), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdAtmNbmaMapBroadcast.setStatus('current')
if mibBuilder.loadTexts: usdAtmNbmaMapBroadcast.setDescription('The broadcast enable/disable setting for this entry. The value true(1) enable broadcast support; disable(2) disabled broadcast support for this entry.')
usdAtmNbmaMapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 4, 1, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdAtmNbmaMapRowStatus.setStatus('current')
if mibBuilder.loadTexts: usdAtmNbmaMapRowStatus.setDescription('Controls creation/deletion of entries in this table according to the RowStatus textual convention, constrained to support the following values only: createAndGo destroy Additional notes to aid the network manager: - NBMA maps are not supported on dynamic interface. - NBMA maps can only be applied to a single major ATM interface at a time. - NBMA maps cannot be deleted unless the map is removed from the ATM interface (usdAtmNbmaMapIfIndex = 0). - The values of usdAtmNbmaMapVpi, usdAtmNbmaMapVci and usdAtmNbmaMapIfIndex are zero until the map is applied to a major ATM interface. - To create an entry in this table, the following objects must be present in the set PDU: usdAtmNbmaMapIpAddress usdAtmNbmaMapBroadcast usdAtmNbmaMapRowStatus - Once created, only the following objects can be modified: usdAtmNbmaMapBroadcast ')
usdAtmNbmaMapListTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 4, 2), )
if mibBuilder.loadTexts: usdAtmNbmaMapListTable.setStatus('current')
if mibBuilder.loadTexts: usdAtmNbmaMapListTable.setDescription('This table contains entries for ATM NBMA map lists.')
usdAtmNbmaMapListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 4, 2, 1), ).setIndexNames((1, "Unisphere-Data-ATM-MIB", "usdAtmNbmaMapListName"))
if mibBuilder.loadTexts: usdAtmNbmaMapListEntry.setStatus('current')
if mibBuilder.loadTexts: usdAtmNbmaMapListEntry.setDescription('Each entry describes the characteristics of an ATM NBMA map.')
usdAtmNbmaMapListName = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 4, 2, 1, 1), UsdAtmNbmaMapName())
if mibBuilder.loadTexts: usdAtmNbmaMapListName.setStatus('current')
if mibBuilder.loadTexts: usdAtmNbmaMapListName.setDescription('The NBMA Map List name.')
usdAtmNbmaMapListRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 4, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdAtmNbmaMapListRowStatus.setStatus('current')
if mibBuilder.loadTexts: usdAtmNbmaMapListRowStatus.setDescription('Controls creation/deletion of entries in this table according to the RowStatus textual convention, constrained to support the following values only: createAndGo destroy ')
usdAtmPingTestTypes = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 5, 1))
usdAtmPingTestOamSeg = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 5, 1, 1))
if mibBuilder.loadTexts: usdAtmPingTestOamSeg.setStatus('current')
if mibBuilder.loadTexts: usdAtmPingTestOamSeg.setDescription('This identifies an OAM Ping (multiple loopbacks) Test on a VPL, VPC, VCL, or VCC termination point, using segment OAM cells. The test type must have appended to it a code that uniquely identifies an intermediate point responsible for looping back each cell. If this is absent, the loopbacks are performed at the end of the segment or connection. E.g., the OID { usdAtmPingTestOamSeg 5 } identifies that the loopbacks should be performed at the intermediate point labeled 5.')
usdAtmPingTestOamE2E = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 5, 1, 2))
if mibBuilder.loadTexts: usdAtmPingTestOamE2E.setStatus('current')
if mibBuilder.loadTexts: usdAtmPingTestOamE2E.setDescription('This identifies an OAM Ping (multiple loopbacks) Test on a VPL, VPC, VCL, or VCC termination point, using end-to-end OAM cells.')
usdAtmVpPingTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 5, 2), )
if mibBuilder.loadTexts: usdAtmVpPingTable.setStatus('current')
if mibBuilder.loadTexts: usdAtmVpPingTable.setDescription('This table contains entries for extending the ATM-FORUM-SNMP-M4-MIB atmM4VpTestTable to do ping (multiple loopback) type testing.')
usdAtmVpPingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 5, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ATM-MIB", "atmVplVpi"), (0, "ATM-FORUM-SNMP-M4-MIB", "atmfM4VpTestObject"))
if mibBuilder.loadTexts: usdAtmVpPingEntry.setStatus('current')
if mibBuilder.loadTexts: usdAtmVpPingEntry.setDescription('Each entry describes the characteristics, status and results of the most recent ATM ping test.')
usdAtmVpPingProbeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 5, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 30)).clone(5)).setUnits('probes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdAtmVpPingProbeCount.setStatus('current')
if mibBuilder.loadTexts: usdAtmVpPingProbeCount.setDescription('The number of ping probes (OAM cells) to be sent to complete the test.')
usdAtmVpPingTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 5, 2, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)).clone(5)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdAtmVpPingTimeOut.setStatus('current')
if mibBuilder.loadTexts: usdAtmVpPingTimeOut.setDescription('Specifies the time-out value, in seconds, for a remote ping operation.')
usdAtmVpPingCtlTrapGeneration = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 5, 2, 1, 3), Bits().clone(namedValues=NamedValues(("testCompletion", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdAtmVpPingCtlTrapGeneration.setStatus('current')
if mibBuilder.loadTexts: usdAtmVpPingCtlTrapGeneration.setDescription('The value of this object determines when and if to generate a notification for this entry: testCompletion(0) - Generate a usdPingTestCompleted notification. The value of this object defaults to zero, indicating that no notification has been selected.')
usdAtmVpPingSentProbes = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 5, 2, 1, 4), Unsigned32()).setUnits('probes').setMaxAccess("readonly")
if mibBuilder.loadTexts: usdAtmVpPingSentProbes.setStatus('current')
if mibBuilder.loadTexts: usdAtmVpPingSentProbes.setDescription('The number of ping probes (OAM cells) that have been sent thus far for this test. The value of this object MUST be set to zero when the atmfM4VpTestStatus object transitions from notInUse(0) to inUse(1).')
usdAtmVpPingProbeResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 5, 2, 1, 5), Unsigned32()).setUnits('probes').setMaxAccess("readonly")
if mibBuilder.loadTexts: usdAtmVpPingProbeResponses.setStatus('current')
if mibBuilder.loadTexts: usdAtmVpPingProbeResponses.setDescription('The number of ping responses that have been received thus far for this test. The value of this object MUST be set to zero when the atmfM4VpTestStatus object transitions from notInUse(0) to inUse(1).')
usdAtmVpPingStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 5, 2, 1, 6), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdAtmVpPingStartTime.setStatus('current')
if mibBuilder.loadTexts: usdAtmVpPingStartTime.setDescription('The time (sysUpTime) when the test started.')
usdAtmVpPingMinRtt = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 5, 2, 1, 7), Unsigned32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: usdAtmVpPingMinRtt.setStatus('current')
if mibBuilder.loadTexts: usdAtmVpPingMinRtt.setDescription('The shortest round-trip-time (RTT) for the pings that have received responses. The value of this object MUST be set to zero when the atmfM4VpTestStatus object transitions from notInUse(0) to inUse(1). A value of zero for this object implies that no ping responses have been received for the current test.')
usdAtmVpPingMaxRtt = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 5, 2, 1, 8), Unsigned32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: usdAtmVpPingMaxRtt.setStatus('current')
if mibBuilder.loadTexts: usdAtmVpPingMaxRtt.setDescription('The longest round-trip-time (RTT) for the pings that have received responses. The value of this object MUST be set to zero when the atmfM4VpTestStatus object transitions from notInUse(0) to inUse(1). A value of zero for this object implies that no ping responses have been received for the current test.')
usdAtmVpPingAverageRtt = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 5, 2, 1, 9), Unsigned32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: usdAtmVpPingAverageRtt.setStatus('current')
if mibBuilder.loadTexts: usdAtmVpPingAverageRtt.setDescription('The average round-trip-time (RTT) for all the pings that have received responses. The value of this object MUST be set to zero when the atmfM4VpTestStatus object transitions from notInUse(0) to inUse(1). A value of zero for this object implies that no ping responses have been received for the current test.')
usdAtmVcPingTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 5, 3), )
if mibBuilder.loadTexts: usdAtmVcPingTable.setStatus('current')
if mibBuilder.loadTexts: usdAtmVcPingTable.setDescription('This table contains entries for extending the ATM-FORUM-SNMP-M4-MIB atmM4VcTestTable to do ping (multiple loopback) type testing.')
usdAtmVcPingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 5, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ATM-MIB", "atmVclVpi"), (0, "ATM-MIB", "atmVclVci"), (0, "ATM-FORUM-SNMP-M4-MIB", "atmfM4VcTestObject"))
if mibBuilder.loadTexts: usdAtmVcPingEntry.setStatus('current')
if mibBuilder.loadTexts: usdAtmVcPingEntry.setDescription('Each entry describes the characteristics, status and results of the most recent ATM ping test.')
usdAtmVcPingProbeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 5, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 30)).clone(5)).setUnits('probes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdAtmVcPingProbeCount.setStatus('current')
if mibBuilder.loadTexts: usdAtmVcPingProbeCount.setDescription('The number of ping probes (OAM cells) to be sent to complete the test.')
usdAtmVcPingTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 5, 3, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)).clone(5)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdAtmVcPingTimeOut.setStatus('current')
if mibBuilder.loadTexts: usdAtmVcPingTimeOut.setDescription('Specifies the time-out value, in seconds, for a remote ping operation.')
usdAtmVcPingCtlTrapGeneration = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 5, 3, 1, 3), Bits().clone(namedValues=NamedValues(("testCompletion", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdAtmVcPingCtlTrapGeneration.setStatus('current')
if mibBuilder.loadTexts: usdAtmVcPingCtlTrapGeneration.setDescription('The value of this object determines when and if to generate a notification for this entry: testCompletion(0) - Generate a usdPingTestCompleted notification. The value of this object defaults to zero, indicating that no notification has been selected.')
usdAtmVcPingSentProbes = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 5, 3, 1, 4), Unsigned32()).setUnits('probes').setMaxAccess("readonly")
if mibBuilder.loadTexts: usdAtmVcPingSentProbes.setStatus('current')
if mibBuilder.loadTexts: usdAtmVcPingSentProbes.setDescription('The number of ping probes (OAM cells) that have been sent thus far for this test. The value of this object MUST be set to zero when the atmfM4VcTestStatus object transitions from notInUse(0) to inUse(1).')
usdAtmVcPingProbeResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 5, 3, 1, 5), Unsigned32()).setUnits('probes').setMaxAccess("readonly")
if mibBuilder.loadTexts: usdAtmVcPingProbeResponses.setStatus('current')
if mibBuilder.loadTexts: usdAtmVcPingProbeResponses.setDescription('The number of ping responses that have been received thus far for this test. The value of this object MUST be set to zero when the atmfM4VcTestStatus object transitions from notInUse(0) to inUse(1).')
usdAtmVcPingStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 5, 3, 1, 6), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdAtmVcPingStartTime.setStatus('current')
if mibBuilder.loadTexts: usdAtmVcPingStartTime.setDescription('The time (sysUpTime) when the test started.')
usdAtmVcPingMinRtt = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 5, 3, 1, 7), Unsigned32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: usdAtmVcPingMinRtt.setStatus('current')
if mibBuilder.loadTexts: usdAtmVcPingMinRtt.setDescription('The shortest round-trip-time (RTT) for the pings that have received responses. The value of this object MUST be set to zero when the atmfM4VcTestStatus object transitions from notInUse(0) to inUse(1). A value of zero for this object implies that no ping responses have been received for the current test.')
usdAtmVcPingMaxRtt = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 5, 3, 1, 8), Unsigned32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: usdAtmVcPingMaxRtt.setStatus('current')
if mibBuilder.loadTexts: usdAtmVcPingMaxRtt.setDescription('The longest round-trip-time (RTT) for the pings that have received responses. The value of this object MUST be set to zero when the atmfM4VcTestStatus object transitions from notInUse(0) to inUse(1). A value of zero for this object implies that no ping responses have been received for the current test.')
usdAtmVcPingAverageRtt = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 5, 3, 1, 9), Unsigned32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: usdAtmVcPingAverageRtt.setStatus('current')
if mibBuilder.loadTexts: usdAtmVcPingAverageRtt.setDescription('The average round-trip-time (RTT) for all the pings that have received responses. The value of this object MUST be set to zero when the atmfM4VcTestStatus object transitions from notInUse(0) to inUse(1). A value of zero for this object implies that no ping responses have been received for the current test.')
usdAtmTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 3))
usdAtmTrapPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 3, 0))
usdAtmVpPingTestCompleted = NotificationType((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 3, 0, 1)).setObjects(("ATM-FORUM-SNMP-M4-MIB", "atmfM4VpTestId"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4VpTestType"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4VpTestResult"), ("Unisphere-Data-ATM-MIB", "usdAtmVpPingProbeCount"), ("Unisphere-Data-ATM-MIB", "usdAtmVpPingSentProbes"), ("Unisphere-Data-ATM-MIB", "usdAtmVpPingProbeResponses"), ("Unisphere-Data-ATM-MIB", "usdAtmVpPingMinRtt"), ("Unisphere-Data-ATM-MIB", "usdAtmVpPingMaxRtt"), ("Unisphere-Data-ATM-MIB", "usdAtmVpPingAverageRtt"))
if mibBuilder.loadTexts: usdAtmVpPingTestCompleted.setStatus('current')
if mibBuilder.loadTexts: usdAtmVpPingTestCompleted.setDescription('Generated at the completion of a AtmfM4VpTest when the corresponding usdAtmVpPingCtlTrapGeneration object has the testCompletion(0) bit set.')
usdAtmVcPingTestCompleted = NotificationType((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 3, 0, 2)).setObjects(("ATM-FORUM-SNMP-M4-MIB", "atmfM4VcTestId"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4VcTestType"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4VcTestResult"), ("Unisphere-Data-ATM-MIB", "usdAtmVcPingProbeCount"), ("Unisphere-Data-ATM-MIB", "usdAtmVcPingSentProbes"), ("Unisphere-Data-ATM-MIB", "usdAtmVcPingProbeResponses"), ("Unisphere-Data-ATM-MIB", "usdAtmVcPingMinRtt"), ("Unisphere-Data-ATM-MIB", "usdAtmVcPingMaxRtt"), ("Unisphere-Data-ATM-MIB", "usdAtmVcPingAverageRtt"))
if mibBuilder.loadTexts: usdAtmVcPingTestCompleted.setStatus('current')
if mibBuilder.loadTexts: usdAtmVcPingTestCompleted.setDescription('Generated at the completion of a AtmfM4VcTest when the corresponding usdAtmVcPingCtlTrapGeneration object has the testCompletion(0) bit set.')
usdAtmConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 4))
usdAtmCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 4, 1))
usdAtmGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 4, 2))
usdAtmCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 4, 1, 1)).setObjects(("Unisphere-Data-ATM-MIB", "usdAtmGroup"), ("Unisphere-Data-ATM-MIB", "usdAtmAal5Group"), ("Unisphere-Data-ATM-MIB", "usdAtmSubIfGroup"), ("Unisphere-Data-ATM-MIB", "usdAtmVpTunnelGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdAtmCompliance = usdAtmCompliance.setStatus('obsolete')
if mibBuilder.loadTexts: usdAtmCompliance.setDescription('Obsolete compliance statement for entities which implement the Unisphere ATM MIB. This statement became obsolete when support was added for NBMA map lists and ATM ping.')
usdAtmCompliance2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 4, 1, 2)).setObjects(("Unisphere-Data-ATM-MIB", "usdAtmGroup2"), ("Unisphere-Data-ATM-MIB", "usdAtmAal5Group"), ("Unisphere-Data-ATM-MIB", "usdAtmSubIfGroup2"), ("Unisphere-Data-ATM-MIB", "usdAtmVpPingControlGroup"), ("Unisphere-Data-ATM-MIB", "usdAtmVcPingControlGroup"), ("Unisphere-Data-ATM-MIB", "usdAtmPingTrapGroup"), ("Unisphere-Data-ATM-MIB", "usdAtmVpTunnelGroup"), ("Unisphere-Data-ATM-MIB", "usdAtmNbmaMapGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdAtmCompliance2 = usdAtmCompliance2.setStatus('obsolete')
if mibBuilder.loadTexts: usdAtmCompliance2.setDescription('Obsolete compliance statement for entities which implement the Unisphere ATM MIB. This statement became obsolete when support was added for traffic shapping on VCC subinterfaces.')
usdAtmCompliance3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 4, 1, 3)).setObjects(("Unisphere-Data-ATM-MIB", "usdAtmGroup2"), ("Unisphere-Data-ATM-MIB", "usdAtmAal5Group"), ("Unisphere-Data-ATM-MIB", "usdAtmSubIfGroup2"), ("Unisphere-Data-ATM-MIB", "usdAtmVpPingControlGroup"), ("Unisphere-Data-ATM-MIB", "usdAtmVcPingControlGroup"), ("Unisphere-Data-ATM-MIB", "usdAtmPingTrapGroup"), ("Unisphere-Data-ATM-MIB", "usdAtmVpTunnelGroup"), ("Unisphere-Data-ATM-MIB", "usdAtmNbmaMapGroup"), ("Unisphere-Data-ATM-MIB", "usdAtmTrafficShapingGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdAtmCompliance3 = usdAtmCompliance3.setStatus('obsolete')
if mibBuilder.loadTexts: usdAtmCompliance3.setDescription('Obsolete compliance statement for entities which implement the Unisphere ATM MIB. This statement became obsolete when support was added for connection admission control (CAC).')
usdAtmCompliance4 = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 4, 1, 4)).setObjects(("Unisphere-Data-ATM-MIB", "usdAtmGroup3"), ("Unisphere-Data-ATM-MIB", "usdAtmAal5Group"), ("Unisphere-Data-ATM-MIB", "usdAtmSubIfGroup2"), ("Unisphere-Data-ATM-MIB", "usdAtmVpPingControlGroup"), ("Unisphere-Data-ATM-MIB", "usdAtmVcPingControlGroup"), ("Unisphere-Data-ATM-MIB", "usdAtmPingTrapGroup"), ("Unisphere-Data-ATM-MIB", "usdAtmVpTunnelGroup"), ("Unisphere-Data-ATM-MIB", "usdAtmNbmaMapGroup"), ("Unisphere-Data-ATM-MIB", "usdAtmTrafficShapingGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdAtmCompliance4 = usdAtmCompliance4.setStatus('obsolete')
if mibBuilder.loadTexts: usdAtmCompliance4.setDescription('Obsolete compliance statement for entities which implement the Unisphere ATM MIB. This statement became obsolete when ATM SVC, CAC used bandwidth and sub-interface address objects were added.')
usdAtmCompliance5 = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 4, 1, 5)).setObjects(("Unisphere-Data-ATM-MIB", "usdAtmGroup4"), ("Unisphere-Data-ATM-MIB", "usdAtmAal5Group"), ("Unisphere-Data-ATM-MIB", "usdAtmSubIfGroup3"), ("Unisphere-Data-ATM-MIB", "usdAtmVpPingControlGroup"), ("Unisphere-Data-ATM-MIB", "usdAtmVcPingControlGroup"), ("Unisphere-Data-ATM-MIB", "usdAtmPingTrapGroup"), ("Unisphere-Data-ATM-MIB", "usdAtmSvcGroup"), ("Unisphere-Data-ATM-MIB", "usdAtmVpTunnelGroup"), ("Unisphere-Data-ATM-MIB", "usdAtmNbmaMapGroup"), ("Unisphere-Data-ATM-MIB", "usdAtmTrafficShapingGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdAtmCompliance5 = usdAtmCompliance5.setStatus('current')
if mibBuilder.loadTexts: usdAtmCompliance5.setDescription('The compliance statement for entities which implement the Unisphere ATM MIB.')
usdAtmGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 4, 2, 1)).setObjects(("Unisphere-Data-ATM-MIB", "usdAtmNextIfIndex"), ("Unisphere-Data-ATM-MIB", "usdAtmIfRowStatus"), ("Unisphere-Data-ATM-MIB", "usdAtmIfLowerIfIndex"), ("Unisphere-Data-ATM-MIB", "usdAtmIfIlmiVpi"), ("Unisphere-Data-ATM-MIB", "usdAtmIfIlmiVci"), ("Unisphere-Data-ATM-MIB", "usdAtmIfIlmiVcd"), ("Unisphere-Data-ATM-MIB", "usdAtmIfIlmiPollFrequency"), ("Unisphere-Data-ATM-MIB", "usdAtmIfIlmiAdminState"), ("Unisphere-Data-ATM-MIB", "usdAtmIfUniVersion"), ("Unisphere-Data-ATM-MIB", "usdAtmIfOamCellRxAdminState"), ("Unisphere-Data-ATM-MIB", "usdAtmIfInCells"), ("Unisphere-Data-ATM-MIB", "usdAtmIfOutCells"), ("Unisphere-Data-ATM-MIB", "usdAtmIfVcCount"), ("Unisphere-Data-ATM-MIB", "usdAtmPvcStatsInCells"), ("Unisphere-Data-ATM-MIB", "usdAtmPvcStatsInCellOctets"), ("Unisphere-Data-ATM-MIB", "usdAtmPvcStatsInPackets"), ("Unisphere-Data-ATM-MIB", "usdAtmPvcStatsInPacketOctets"), ("Unisphere-Data-ATM-MIB", "usdAtmPvcStatsOutCells"), ("Unisphere-Data-ATM-MIB", "usdAtmPvcStatsOutCellOctets"), ("Unisphere-Data-ATM-MIB", "usdAtmPvcStatsOutPackets"), ("Unisphere-Data-ATM-MIB", "usdAtmPvcStatsOutPacketOctets"), ("Unisphere-Data-ATM-MIB", "usdAtmPvcStatsInCellErrors"), ("Unisphere-Data-ATM-MIB", "usdAtmPvcStatsinPacketErrors"), ("Unisphere-Data-ATM-MIB", "usdAtmPvcStatsOutCellErrors"), ("Unisphere-Data-ATM-MIB", "usdAtmPvcStatsOutPacketErrors"), ("Unisphere-Data-ATM-MIB", "usdAtmPvcStatsInPacketDiscards"), ("Unisphere-Data-ATM-MIB", "usdAtmPvcStatsInPacketOctetDiscards"), ("Unisphere-Data-ATM-MIB", "usdAtmIfCapabilityTrafficShaping"), ("Unisphere-Data-ATM-MIB", "usdAtmIfCapabilityOam"), ("Unisphere-Data-ATM-MIB", "usdAtmIfCapabilityDefaultVcPerVp"), ("Unisphere-Data-ATM-MIB", "usdAtmIfCapabilityNumVpiVciBits"), ("Unisphere-Data-ATM-MIB", "usdAtmIfCapabilityMaxVcd"), ("Unisphere-Data-ATM-MIB", "usdAtmIfCapabilityMaxVpi"), ("Unisphere-Data-ATM-MIB", "usdAtmIfCapabilityMaxVci"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdAtmGroup = usdAtmGroup.setStatus('obsolete')
if mibBuilder.loadTexts: usdAtmGroup.setDescription('Obsolete collection of objects providing management of ATM interfaces in a Unisphere product. This group became obsolete when the usdAtmIfMapGroup object was added.')
usdAtmAal5Group = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 4, 2, 2)).setObjects(("Unisphere-Data-ATM-MIB", "usdAtmAal5NextIfIndex"), ("Unisphere-Data-ATM-MIB", "usdAtmAal5IfRowStatus"), ("Unisphere-Data-ATM-MIB", "usdAtmAal5IfLowerIfIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdAtmAal5Group = usdAtmAal5Group.setStatus('current')
if mibBuilder.loadTexts: usdAtmAal5Group.setDescription('A collection of objects providing management of AAL5 interfaces in a Unisphere product.')
usdAtmSubIfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 4, 2, 3)).setObjects(("Unisphere-Data-ATM-MIB", "usdAtmSubIfNextIfIndex"), ("Unisphere-Data-ATM-MIB", "usdAtmSubIfRowStatus"), ("Unisphere-Data-ATM-MIB", "usdAtmSubIfDistinguisher"), ("Unisphere-Data-ATM-MIB", "usdAtmSubIfLowerIfIndex"), ("Unisphere-Data-ATM-MIB", "usdAtmSubIfVccRowStatus"), ("Unisphere-Data-ATM-MIB", "usdAtmSubIfVccVcd"), ("Unisphere-Data-ATM-MIB", "usdAtmSubIfVccType"), ("Unisphere-Data-ATM-MIB", "usdAtmSubIfVccServiceCategory"), ("Unisphere-Data-ATM-MIB", "usdAtmSubIfVccPcr"), ("Unisphere-Data-ATM-MIB", "usdAtmSubIfVccScr"), ("Unisphere-Data-ATM-MIB", "usdAtmSubIfVccMbs"), ("Unisphere-Data-ATM-MIB", "usdAtmCircuitOamAdminStatus"), ("Unisphere-Data-ATM-MIB", "usdAtmCircuitOamLoopbackOperStatus"), ("Unisphere-Data-ATM-MIB", "usdAtmCircuitVcOamOperStatus"), ("Unisphere-Data-ATM-MIB", "usdAtmCircuitOamLoopbackFrequency"), ("Unisphere-Data-ATM-MIB", "usdAtmCircuitInOamF5Cells"), ("Unisphere-Data-ATM-MIB", "usdAtmCircuitInOamCellsDropped"), ("Unisphere-Data-ATM-MIB", "usdAtmCircuitOutOamF5Cells"), ("Unisphere-Data-ATM-MIB", "usdAtmCircuitInOamF5EndToEndLoopbackCells"), ("Unisphere-Data-ATM-MIB", "usdAtmCircuitInOamF5SegmentLoopbackCells"), ("Unisphere-Data-ATM-MIB", "usdAtmCircuitInOamF5AisCells"), ("Unisphere-Data-ATM-MIB", "usdAtmCircuitInOamF5RdiCells"), ("Unisphere-Data-ATM-MIB", "usdAtmCircuitOutOamF5EndToEndLoopbackCells"), ("Unisphere-Data-ATM-MIB", "usdAtmCircuitOutOamF5SegmentLoopbackCells"), ("Unisphere-Data-ATM-MIB", "usdAtmCircuitOutOamF5RdiCells"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdAtmSubIfGroup = usdAtmSubIfGroup.setStatus('obsolete')
if mibBuilder.loadTexts: usdAtmSubIfGroup.setDescription('Obsolete collection of objects providing management of ATM subinterfaces in a Unisphere product. This group became obsolete when usdAtmSubIfNbma, usdAtmSubIfInverseArp, and usdAtmSubIfInverseArpRefresh were added.')
usdAtmVpTunnelGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 4, 2, 4)).setObjects(("Unisphere-Data-ATM-MIB", "usdAtmVpTunnelKbps"), ("Unisphere-Data-ATM-MIB", "usdAtmVpTunnelRowStatus"), ("Unisphere-Data-ATM-MIB", "usdAtmVpTunnelServiceCategory"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdAtmVpTunnelGroup = usdAtmVpTunnelGroup.setStatus('current')
if mibBuilder.loadTexts: usdAtmVpTunnelGroup.setDescription('A collection of objects providing management of VP tunnels in a Unisphere product.')
usdAtmNbmaMapGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 4, 2, 5)).setObjects(("Unisphere-Data-ATM-MIB", "usdAtmNbmaMapIpAddress"), ("Unisphere-Data-ATM-MIB", "usdAtmNbmaMapVpi"), ("Unisphere-Data-ATM-MIB", "usdAtmNbmaMapVci"), ("Unisphere-Data-ATM-MIB", "usdAtmNbmaMapIfIndex"), ("Unisphere-Data-ATM-MIB", "usdAtmNbmaMapBroadcast"), ("Unisphere-Data-ATM-MIB", "usdAtmNbmaMapRowStatus"), ("Unisphere-Data-ATM-MIB", "usdAtmNbmaMapListRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdAtmNbmaMapGroup = usdAtmNbmaMapGroup.setStatus('current')
if mibBuilder.loadTexts: usdAtmNbmaMapGroup.setDescription('A collection of object providing management of NBMA in a Unisphere product.')
usdAtmSubIfGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 4, 2, 6)).setObjects(("Unisphere-Data-ATM-MIB", "usdAtmSubIfNextIfIndex"), ("Unisphere-Data-ATM-MIB", "usdAtmSubIfRowStatus"), ("Unisphere-Data-ATM-MIB", "usdAtmSubIfDistinguisher"), ("Unisphere-Data-ATM-MIB", "usdAtmSubIfLowerIfIndex"), ("Unisphere-Data-ATM-MIB", "usdAtmSubIfNbma"), ("Unisphere-Data-ATM-MIB", "usdAtmSubIfVccRowStatus"), ("Unisphere-Data-ATM-MIB", "usdAtmSubIfVccVcd"), ("Unisphere-Data-ATM-MIB", "usdAtmSubIfVccType"), ("Unisphere-Data-ATM-MIB", "usdAtmSubIfVccServiceCategory"), ("Unisphere-Data-ATM-MIB", "usdAtmSubIfVccPcr"), ("Unisphere-Data-ATM-MIB", "usdAtmSubIfVccScr"), ("Unisphere-Data-ATM-MIB", "usdAtmSubIfVccMbs"), ("Unisphere-Data-ATM-MIB", "usdAtmSubIfInverseArp"), ("Unisphere-Data-ATM-MIB", "usdAtmSubIfInverseArpRefresh"), ("Unisphere-Data-ATM-MIB", "usdAtmCircuitOamAdminStatus"), ("Unisphere-Data-ATM-MIB", "usdAtmCircuitOamLoopbackOperStatus"), ("Unisphere-Data-ATM-MIB", "usdAtmCircuitVcOamOperStatus"), ("Unisphere-Data-ATM-MIB", "usdAtmCircuitOamLoopbackFrequency"), ("Unisphere-Data-ATM-MIB", "usdAtmCircuitInOamF5Cells"), ("Unisphere-Data-ATM-MIB", "usdAtmCircuitInOamCellsDropped"), ("Unisphere-Data-ATM-MIB", "usdAtmCircuitOutOamF5Cells"), ("Unisphere-Data-ATM-MIB", "usdAtmCircuitInOamF5EndToEndLoopbackCells"), ("Unisphere-Data-ATM-MIB", "usdAtmCircuitInOamF5SegmentLoopbackCells"), ("Unisphere-Data-ATM-MIB", "usdAtmCircuitInOamF5AisCells"), ("Unisphere-Data-ATM-MIB", "usdAtmCircuitInOamF5RdiCells"), ("Unisphere-Data-ATM-MIB", "usdAtmCircuitOutOamF5EndToEndLoopbackCells"), ("Unisphere-Data-ATM-MIB", "usdAtmCircuitOutOamF5SegmentLoopbackCells"), ("Unisphere-Data-ATM-MIB", "usdAtmCircuitOutOamF5RdiCells"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdAtmSubIfGroup2 = usdAtmSubIfGroup2.setStatus('obsolete')
if mibBuilder.loadTexts: usdAtmSubIfGroup2.setDescription('Obsolete collection of objects providing management of ATM subinterfaces in a Unisphere product. This group became obsolete when usdAtmSubIfAddress was added.')
usdAtmVpPingControlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 4, 2, 7)).setObjects(("Unisphere-Data-ATM-MIB", "usdAtmVpPingProbeCount"), ("Unisphere-Data-ATM-MIB", "usdAtmVpPingTimeOut"), ("Unisphere-Data-ATM-MIB", "usdAtmVpPingCtlTrapGeneration"), ("Unisphere-Data-ATM-MIB", "usdAtmVpPingSentProbes"), ("Unisphere-Data-ATM-MIB", "usdAtmVpPingProbeResponses"), ("Unisphere-Data-ATM-MIB", "usdAtmVpPingStartTime"), ("Unisphere-Data-ATM-MIB", "usdAtmVpPingMinRtt"), ("Unisphere-Data-ATM-MIB", "usdAtmVpPingMaxRtt"), ("Unisphere-Data-ATM-MIB", "usdAtmVpPingAverageRtt"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdAtmVpPingControlGroup = usdAtmVpPingControlGroup.setStatus('current')
if mibBuilder.loadTexts: usdAtmVpPingControlGroup.setDescription('A collection of object providing management of ATM VPL Ping testing in a Unisphere product.')
usdAtmVcPingControlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 4, 2, 8)).setObjects(("Unisphere-Data-ATM-MIB", "usdAtmVcPingProbeCount"), ("Unisphere-Data-ATM-MIB", "usdAtmVcPingTimeOut"), ("Unisphere-Data-ATM-MIB", "usdAtmVcPingCtlTrapGeneration"), ("Unisphere-Data-ATM-MIB", "usdAtmVcPingSentProbes"), ("Unisphere-Data-ATM-MIB", "usdAtmVcPingProbeResponses"), ("Unisphere-Data-ATM-MIB", "usdAtmVcPingStartTime"), ("Unisphere-Data-ATM-MIB", "usdAtmVcPingMinRtt"), ("Unisphere-Data-ATM-MIB", "usdAtmVcPingMaxRtt"), ("Unisphere-Data-ATM-MIB", "usdAtmVcPingAverageRtt"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdAtmVcPingControlGroup = usdAtmVcPingControlGroup.setStatus('current')
if mibBuilder.loadTexts: usdAtmVcPingControlGroup.setDescription('A collection of object providing management of ATM VCL Ping testing in a Unisphere product.')
usdAtmPingTrapGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 4, 2, 9)).setObjects(("Unisphere-Data-ATM-MIB", "usdAtmVpPingTestCompleted"), ("Unisphere-Data-ATM-MIB", "usdAtmVcPingTestCompleted"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdAtmPingTrapGroup = usdAtmPingTrapGroup.setStatus('current')
if mibBuilder.loadTexts: usdAtmPingTrapGroup.setDescription('A collection of notifications supporting ATM Ping testing in a Unisphere product.')
usdAtmGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 4, 2, 10)).setObjects(("Unisphere-Data-ATM-MIB", "usdAtmNextIfIndex"), ("Unisphere-Data-ATM-MIB", "usdAtmIfRowStatus"), ("Unisphere-Data-ATM-MIB", "usdAtmIfLowerIfIndex"), ("Unisphere-Data-ATM-MIB", "usdAtmIfIlmiVpi"), ("Unisphere-Data-ATM-MIB", "usdAtmIfIlmiVci"), ("Unisphere-Data-ATM-MIB", "usdAtmIfIlmiVcd"), ("Unisphere-Data-ATM-MIB", "usdAtmIfIlmiPollFrequency"), ("Unisphere-Data-ATM-MIB", "usdAtmIfIlmiAdminState"), ("Unisphere-Data-ATM-MIB", "usdAtmIfUniVersion"), ("Unisphere-Data-ATM-MIB", "usdAtmIfOamCellRxAdminState"), ("Unisphere-Data-ATM-MIB", "usdAtmIfInCells"), ("Unisphere-Data-ATM-MIB", "usdAtmIfOutCells"), ("Unisphere-Data-ATM-MIB", "usdAtmIfVcCount"), ("Unisphere-Data-ATM-MIB", "usdAtmIfMapGroup"), ("Unisphere-Data-ATM-MIB", "usdAtmIfOamCellFilter"), ("Unisphere-Data-ATM-MIB", "usdAtmPvcStatsInCells"), ("Unisphere-Data-ATM-MIB", "usdAtmPvcStatsInCellOctets"), ("Unisphere-Data-ATM-MIB", "usdAtmPvcStatsInPackets"), ("Unisphere-Data-ATM-MIB", "usdAtmPvcStatsInPacketOctets"), ("Unisphere-Data-ATM-MIB", "usdAtmPvcStatsOutCells"), ("Unisphere-Data-ATM-MIB", "usdAtmPvcStatsOutCellOctets"), ("Unisphere-Data-ATM-MIB", "usdAtmPvcStatsOutPackets"), ("Unisphere-Data-ATM-MIB", "usdAtmPvcStatsOutPacketOctets"), ("Unisphere-Data-ATM-MIB", "usdAtmPvcStatsInCellErrors"), ("Unisphere-Data-ATM-MIB", "usdAtmPvcStatsinPacketErrors"), ("Unisphere-Data-ATM-MIB", "usdAtmPvcStatsOutCellErrors"), ("Unisphere-Data-ATM-MIB", "usdAtmPvcStatsOutPacketErrors"), ("Unisphere-Data-ATM-MIB", "usdAtmPvcStatsInPacketDiscards"), ("Unisphere-Data-ATM-MIB", "usdAtmPvcStatsInPacketOctetDiscards"), ("Unisphere-Data-ATM-MIB", "usdAtmPvcStatsInPacketUnknownProtocol"), ("Unisphere-Data-ATM-MIB", "usdAtmIfCapabilityTrafficShaping"), ("Unisphere-Data-ATM-MIB", "usdAtmIfCapabilityOam"), ("Unisphere-Data-ATM-MIB", "usdAtmIfCapabilityDefaultVcPerVp"), ("Unisphere-Data-ATM-MIB", "usdAtmIfCapabilityNumVpiVciBits"), ("Unisphere-Data-ATM-MIB", "usdAtmIfCapabilityMaxVcd"), ("Unisphere-Data-ATM-MIB", "usdAtmIfCapabilityMaxVpi"), ("Unisphere-Data-ATM-MIB", "usdAtmIfCapabilityMaxVci"), ("Unisphere-Data-ATM-MIB", "usdAtmIfCapabilityOamCellFilter"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdAtmGroup2 = usdAtmGroup2.setStatus('obsolete')
if mibBuilder.loadTexts: usdAtmGroup2.setDescription('Obsolete collection of objects providing management of ATM interfaces in a Unisphere product. This group became obsolete when support was added for connection admission control (CAC).')
usdAtmTrafficShapingGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 4, 2, 11)).setObjects(("Unisphere-Data-ATM-MIB", "usdAtmSubIfVccTrafficShapingCdvt"), ("Unisphere-Data-ATM-MIB", "usdAtmSubIfVccTrafficShapingClp0"), ("Unisphere-Data-ATM-MIB", "usdAtmSubIfVccTrafficShapingTagging"), ("Unisphere-Data-ATM-MIB", "usdAtmSubIfVccTrafficShapingPoliceObserve"), ("Unisphere-Data-ATM-MIB", "usdAtmSubIfVccTrafficShapingPacketShaping"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdAtmTrafficShapingGroup = usdAtmTrafficShapingGroup.setStatus('current')
if mibBuilder.loadTexts: usdAtmTrafficShapingGroup.setDescription('A collection of objects providing management of ATM traffic shaping in a Unisphere product.')
usdAtmGroup3 = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 4, 2, 12)).setObjects(("Unisphere-Data-ATM-MIB", "usdAtmNextIfIndex"), ("Unisphere-Data-ATM-MIB", "usdAtmIfRowStatus"), ("Unisphere-Data-ATM-MIB", "usdAtmIfLowerIfIndex"), ("Unisphere-Data-ATM-MIB", "usdAtmIfIlmiVpi"), ("Unisphere-Data-ATM-MIB", "usdAtmIfIlmiVci"), ("Unisphere-Data-ATM-MIB", "usdAtmIfIlmiVcd"), ("Unisphere-Data-ATM-MIB", "usdAtmIfIlmiPollFrequency"), ("Unisphere-Data-ATM-MIB", "usdAtmIfIlmiAdminState"), ("Unisphere-Data-ATM-MIB", "usdAtmIfUniVersion"), ("Unisphere-Data-ATM-MIB", "usdAtmIfOamCellRxAdminState"), ("Unisphere-Data-ATM-MIB", "usdAtmIfInCells"), ("Unisphere-Data-ATM-MIB", "usdAtmIfOutCells"), ("Unisphere-Data-ATM-MIB", "usdAtmIfVcCount"), ("Unisphere-Data-ATM-MIB", "usdAtmIfMapGroup"), ("Unisphere-Data-ATM-MIB", "usdAtmIfCacAdminState"), ("Unisphere-Data-ATM-MIB", "usdAtmIfCacUbrWeight"), ("Unisphere-Data-ATM-MIB", "usdAtmIfCacSubscriptionBandwidth"), ("Unisphere-Data-ATM-MIB", "usdAtmIfCacAvailableBandwidth"), ("Unisphere-Data-ATM-MIB", "usdAtmIfOamCellFilter"), ("Unisphere-Data-ATM-MIB", "usdAtmPvcStatsInCells"), ("Unisphere-Data-ATM-MIB", "usdAtmPvcStatsInCellOctets"), ("Unisphere-Data-ATM-MIB", "usdAtmPvcStatsInPackets"), ("Unisphere-Data-ATM-MIB", "usdAtmPvcStatsInPacketOctets"), ("Unisphere-Data-ATM-MIB", "usdAtmPvcStatsOutCells"), ("Unisphere-Data-ATM-MIB", "usdAtmPvcStatsOutCellOctets"), ("Unisphere-Data-ATM-MIB", "usdAtmPvcStatsOutPackets"), ("Unisphere-Data-ATM-MIB", "usdAtmPvcStatsOutPacketOctets"), ("Unisphere-Data-ATM-MIB", "usdAtmPvcStatsInCellErrors"), ("Unisphere-Data-ATM-MIB", "usdAtmPvcStatsinPacketErrors"), ("Unisphere-Data-ATM-MIB", "usdAtmPvcStatsOutCellErrors"), ("Unisphere-Data-ATM-MIB", "usdAtmPvcStatsOutPacketErrors"), ("Unisphere-Data-ATM-MIB", "usdAtmPvcStatsInPacketDiscards"), ("Unisphere-Data-ATM-MIB", "usdAtmPvcStatsInPacketOctetDiscards"), ("Unisphere-Data-ATM-MIB", "usdAtmPvcStatsInPacketUnknownProtocol"), ("Unisphere-Data-ATM-MIB", "usdAtmIfCapabilityTrafficShaping"), ("Unisphere-Data-ATM-MIB", "usdAtmIfCapabilityOam"), ("Unisphere-Data-ATM-MIB", "usdAtmIfCapabilityDefaultVcPerVp"), ("Unisphere-Data-ATM-MIB", "usdAtmIfCapabilityNumVpiVciBits"), ("Unisphere-Data-ATM-MIB", "usdAtmIfCapabilityMaxVcd"), ("Unisphere-Data-ATM-MIB", "usdAtmIfCapabilityMaxVpi"), ("Unisphere-Data-ATM-MIB", "usdAtmIfCapabilityMaxVci"), ("Unisphere-Data-ATM-MIB", "usdAtmIfCapabilityOamCellFilter"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdAtmGroup3 = usdAtmGroup3.setStatus('obsolete')
if mibBuilder.loadTexts: usdAtmGroup3.setDescription('Obsolete collection of objects providing management of ATM interfaces in a Unisphere product. This group became obsolete when support was added for connection admission control (CAC) used bandwidth.')
usdAtmGroup4 = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 4, 2, 13)).setObjects(("Unisphere-Data-ATM-MIB", "usdAtmNextIfIndex"), ("Unisphere-Data-ATM-MIB", "usdAtmIfRowStatus"), ("Unisphere-Data-ATM-MIB", "usdAtmIfLowerIfIndex"), ("Unisphere-Data-ATM-MIB", "usdAtmIfIlmiVpi"), ("Unisphere-Data-ATM-MIB", "usdAtmIfIlmiVci"), ("Unisphere-Data-ATM-MIB", "usdAtmIfIlmiVcd"), ("Unisphere-Data-ATM-MIB", "usdAtmIfIlmiPollFrequency"), ("Unisphere-Data-ATM-MIB", "usdAtmIfIlmiAdminState"), ("Unisphere-Data-ATM-MIB", "usdAtmIfUniVersion"), ("Unisphere-Data-ATM-MIB", "usdAtmIfOamCellRxAdminState"), ("Unisphere-Data-ATM-MIB", "usdAtmIfInCells"), ("Unisphere-Data-ATM-MIB", "usdAtmIfOutCells"), ("Unisphere-Data-ATM-MIB", "usdAtmIfVcCount"), ("Unisphere-Data-ATM-MIB", "usdAtmIfMapGroup"), ("Unisphere-Data-ATM-MIB", "usdAtmIfCacAdminState"), ("Unisphere-Data-ATM-MIB", "usdAtmIfCacUbrWeight"), ("Unisphere-Data-ATM-MIB", "usdAtmIfCacSubscriptionBandwidth"), ("Unisphere-Data-ATM-MIB", "usdAtmIfCacAvailableBandwidth"), ("Unisphere-Data-ATM-MIB", "usdAtmIfOamCellFilter"), ("Unisphere-Data-ATM-MIB", "usdAtmIfCacUsedBandwidthUpper"), ("Unisphere-Data-ATM-MIB", "usdAtmIfCacUsedBandwidthLower"), ("Unisphere-Data-ATM-MIB", "usdAtmPvcStatsInCells"), ("Unisphere-Data-ATM-MIB", "usdAtmPvcStatsInCellOctets"), ("Unisphere-Data-ATM-MIB", "usdAtmPvcStatsInPackets"), ("Unisphere-Data-ATM-MIB", "usdAtmPvcStatsInPacketOctets"), ("Unisphere-Data-ATM-MIB", "usdAtmPvcStatsOutCells"), ("Unisphere-Data-ATM-MIB", "usdAtmPvcStatsOutCellOctets"), ("Unisphere-Data-ATM-MIB", "usdAtmPvcStatsOutPackets"), ("Unisphere-Data-ATM-MIB", "usdAtmPvcStatsOutPacketOctets"), ("Unisphere-Data-ATM-MIB", "usdAtmPvcStatsInCellErrors"), ("Unisphere-Data-ATM-MIB", "usdAtmPvcStatsinPacketErrors"), ("Unisphere-Data-ATM-MIB", "usdAtmPvcStatsOutCellErrors"), ("Unisphere-Data-ATM-MIB", "usdAtmPvcStatsOutPacketErrors"), ("Unisphere-Data-ATM-MIB", "usdAtmPvcStatsInPacketDiscards"), ("Unisphere-Data-ATM-MIB", "usdAtmPvcStatsInPacketOctetDiscards"), ("Unisphere-Data-ATM-MIB", "usdAtmPvcStatsInPacketUnknownProtocol"), ("Unisphere-Data-ATM-MIB", "usdAtmIfCapabilityTrafficShaping"), ("Unisphere-Data-ATM-MIB", "usdAtmIfCapabilityOam"), ("Unisphere-Data-ATM-MIB", "usdAtmIfCapabilityDefaultVcPerVp"), ("Unisphere-Data-ATM-MIB", "usdAtmIfCapabilityNumVpiVciBits"), ("Unisphere-Data-ATM-MIB", "usdAtmIfCapabilityMaxVcd"), ("Unisphere-Data-ATM-MIB", "usdAtmIfCapabilityMaxVpi"), ("Unisphere-Data-ATM-MIB", "usdAtmIfCapabilityMaxVci"), ("Unisphere-Data-ATM-MIB", "usdAtmIfCapabilityOamCellFilter"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdAtmGroup4 = usdAtmGroup4.setStatus('current')
if mibBuilder.loadTexts: usdAtmGroup4.setDescription('A collection of objects providing management of ATM interfaces in a Unisphere product.')
usdAtmSvcGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 4, 2, 14)).setObjects(("Unisphere-Data-ATM-MIB", "usdAtmIfSvcSignallingVpi"), ("Unisphere-Data-ATM-MIB", "usdAtmIfSvcSignallingVci"), ("Unisphere-Data-ATM-MIB", "usdAtmIfSvcSignallingVcd"), ("Unisphere-Data-ATM-MIB", "usdAtmIfSvcSignallingAdminStatus"), ("Unisphere-Data-ATM-MIB", "usdAtmSubIfSvcRowStatus"), ("Unisphere-Data-ATM-MIB", "usdAtmSubIfSvcConfigDestAtmAddress"), ("Unisphere-Data-ATM-MIB", "usdAtmSubIfSvcConfigCircuitType"), ("Unisphere-Data-ATM-MIB", "usdAtmSubIfSvcConfigServiceCategory"), ("Unisphere-Data-ATM-MIB", "usdAtmSubIfSvcConfigPcr"), ("Unisphere-Data-ATM-MIB", "usdAtmSubIfSvcConfigScr"), ("Unisphere-Data-ATM-MIB", "usdAtmSubIfSvcConfigMbs"), ("Unisphere-Data-ATM-MIB", "usdAtmSubIfSvcConfigCdvt"), ("Unisphere-Data-ATM-MIB", "usdAtmSubIfSvcConfigClp0"), ("Unisphere-Data-ATM-MIB", "usdAtmSubIfSvcConfigTagging"), ("Unisphere-Data-ATM-MIB", "usdAtmSubIfSvcConfigObserve"), ("Unisphere-Data-ATM-MIB", "usdAtmSubIfSvcConfigPacketDiscard"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdAtmSvcGroup = usdAtmSvcGroup.setStatus('current')
if mibBuilder.loadTexts: usdAtmSvcGroup.setDescription('A collection of objects providing management of ATM SVC interfaces in a Unisphere product.')
usdAtmSubIfGroup3 = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 4, 2, 15)).setObjects(("Unisphere-Data-ATM-MIB", "usdAtmSubIfNextIfIndex"), ("Unisphere-Data-ATM-MIB", "usdAtmSubIfRowStatus"), ("Unisphere-Data-ATM-MIB", "usdAtmSubIfDistinguisher"), ("Unisphere-Data-ATM-MIB", "usdAtmSubIfLowerIfIndex"), ("Unisphere-Data-ATM-MIB", "usdAtmSubIfNbma"), ("Unisphere-Data-ATM-MIB", "usdAtmSubIfAddress"), ("Unisphere-Data-ATM-MIB", "usdAtmSubIfVccRowStatus"), ("Unisphere-Data-ATM-MIB", "usdAtmSubIfVccVcd"), ("Unisphere-Data-ATM-MIB", "usdAtmSubIfVccType"), ("Unisphere-Data-ATM-MIB", "usdAtmSubIfVccServiceCategory"), ("Unisphere-Data-ATM-MIB", "usdAtmSubIfVccPcr"), ("Unisphere-Data-ATM-MIB", "usdAtmSubIfVccScr"), ("Unisphere-Data-ATM-MIB", "usdAtmSubIfVccMbs"), ("Unisphere-Data-ATM-MIB", "usdAtmSubIfInverseArp"), ("Unisphere-Data-ATM-MIB", "usdAtmSubIfInverseArpRefresh"), ("Unisphere-Data-ATM-MIB", "usdAtmCircuitOamAdminStatus"), ("Unisphere-Data-ATM-MIB", "usdAtmCircuitOamLoopbackOperStatus"), ("Unisphere-Data-ATM-MIB", "usdAtmCircuitVcOamOperStatus"), ("Unisphere-Data-ATM-MIB", "usdAtmCircuitOamLoopbackFrequency"), ("Unisphere-Data-ATM-MIB", "usdAtmCircuitInOamF5Cells"), ("Unisphere-Data-ATM-MIB", "usdAtmCircuitInOamCellsDropped"), ("Unisphere-Data-ATM-MIB", "usdAtmCircuitOutOamF5Cells"), ("Unisphere-Data-ATM-MIB", "usdAtmCircuitInOamF5EndToEndLoopbackCells"), ("Unisphere-Data-ATM-MIB", "usdAtmCircuitInOamF5SegmentLoopbackCells"), ("Unisphere-Data-ATM-MIB", "usdAtmCircuitInOamF5AisCells"), ("Unisphere-Data-ATM-MIB", "usdAtmCircuitInOamF5RdiCells"), ("Unisphere-Data-ATM-MIB", "usdAtmCircuitOutOamF5EndToEndLoopbackCells"), ("Unisphere-Data-ATM-MIB", "usdAtmCircuitOutOamF5SegmentLoopbackCells"), ("Unisphere-Data-ATM-MIB", "usdAtmCircuitOutOamF5RdiCells"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdAtmSubIfGroup3 = usdAtmSubIfGroup3.setStatus('current')
if mibBuilder.loadTexts: usdAtmSubIfGroup3.setDescription('A collection of objects providing management of ATM subinterfaces in a Unisphere product.')
mibBuilder.exportSymbols("Unisphere-Data-ATM-MIB", usdAtmVpPingSentProbes=usdAtmVpPingSentProbes, usdAtmIfCapabilityMaxVcd=usdAtmIfCapabilityMaxVcd, usdAtmIfCapabilityNumVpiVciBits=usdAtmIfCapabilityNumVpiVciBits, usdAtmIfCacAvailableBandwidth=usdAtmIfCacAvailableBandwidth, usdAtmMIB=usdAtmMIB, usdAtmNbmaMapIpAddress=usdAtmNbmaMapIpAddress, usdAtmNbmaMapListTable=usdAtmNbmaMapListTable, usdAtmIfCacAdminState=usdAtmIfCacAdminState, usdAtmIfSvcSignallingEntry=usdAtmIfSvcSignallingEntry, usdAtmPingTestOamE2E=usdAtmPingTestOamE2E, usdAtmPvcStatsinPacketErrors=usdAtmPvcStatsinPacketErrors, usdAtmNbmaMapName=usdAtmNbmaMapName, usdAtmTrapPrefix=usdAtmTrapPrefix, usdAtmPvcStatsOutPacketOctets=usdAtmPvcStatsOutPacketOctets, usdAtmSubIfSvcConfigPcr=usdAtmSubIfSvcConfigPcr, usdAtmCompliance4=usdAtmCompliance4, usdAtmIfIndex=usdAtmIfIndex, usdAtmPvcStatsOutCellOctets=usdAtmPvcStatsOutCellOctets, usdAtmSubIfVccScr=usdAtmSubIfVccScr, usdAtmSubIfVccServiceCategory=usdAtmSubIfVccServiceCategory, usdAtmIfCapabilityTrafficShaping=usdAtmIfCapabilityTrafficShaping, usdAtmSubIfVccTrafficShapingCdvt=usdAtmSubIfVccTrafficShapingCdvt, usdAtmSubIfVccVci=usdAtmSubIfVccVci, usdAtmCompliance=usdAtmCompliance, usdAtmIfCapabilityTable=usdAtmIfCapabilityTable, usdAtmNbmaMapRowStatus=usdAtmNbmaMapRowStatus, usdAtmPvcStatsVci=usdAtmPvcStatsVci, usdAtmCircuitInOamF5RdiCells=usdAtmCircuitInOamF5RdiCells, usdAtmPvcStatsVpi=usdAtmPvcStatsVpi, usdAtmIfSvcSignallingVpi=usdAtmIfSvcSignallingVpi, usdAtmIfVcCount=usdAtmIfVcCount, usdAtmAal5IfLayer=usdAtmAal5IfLayer, usdAtmSubIfInverseArpRefresh=usdAtmSubIfInverseArpRefresh, usdAtmVpTunnelKbps=usdAtmVpTunnelKbps, usdAtmVpPingTestCompleted=usdAtmVpPingTestCompleted, usdAtmSubIfSvcConfigTagging=usdAtmSubIfSvcConfigTagging, usdAtmSubIfVccPcr=usdAtmSubIfVccPcr, usdAtmVcPingAverageRtt=usdAtmVcPingAverageRtt, usdAtmVpPingProbeCount=usdAtmVpPingProbeCount, usdAtmAal5IfTable=usdAtmAal5IfTable, usdAtmCircuitVcOamOperStatus=usdAtmCircuitVcOamOperStatus, usdAtmNbmaMapVpi=usdAtmNbmaMapVpi, usdAtmIfCapabilityMaxVci=usdAtmIfCapabilityMaxVci, usdAtmVpPingEntry=usdAtmVpPingEntry, usdAtmIfLowerIfIndex=usdAtmIfLowerIfIndex, usdAtmNbmaMapVci=usdAtmNbmaMapVci, usdAtmVcPingEntry=usdAtmVcPingEntry, usdAtmVcPingMaxRtt=usdAtmVcPingMaxRtt, usdAtmPvcStatsInCellErrors=usdAtmPvcStatsInCellErrors, usdAtmNbmaMapVcd=usdAtmNbmaMapVcd, usdAtmAal5Group=usdAtmAal5Group, usdAtmPvcStatsInPacketUnknownProtocol=usdAtmPvcStatsInPacketUnknownProtocol, usdAtmVpTunnelVpi=usdAtmVpTunnelVpi, usdAtmPvcStatsOutPacketErrors=usdAtmPvcStatsOutPacketErrors, usdAtmSubIfVccEntry=usdAtmSubIfVccEntry, usdAtmPvcStatsInPackets=usdAtmPvcStatsInPackets, usdAtmVpPingAverageRtt=usdAtmVpPingAverageRtt, usdAtmPvcStatisticsEntry=usdAtmPvcStatisticsEntry, usdAtmSubIfLowerIfIndex=usdAtmSubIfLowerIfIndex, usdAtmSubIfVccTrafficShapingClp0=usdAtmSubIfVccTrafficShapingClp0, usdAtmVcPingStartTime=usdAtmVcPingStartTime, usdAtmSubIfSvcConfigScr=usdAtmSubIfSvcConfigScr, usdAtmIfCapabilityDefaultVcPerVp=usdAtmIfCapabilityDefaultVcPerVp, usdAtmSubIfVccTrafficShapingPacketShaping=usdAtmSubIfVccTrafficShapingPacketShaping, usdAtmIfIlmiVci=usdAtmIfIlmiVci, usdAtmVpTunnelTable=usdAtmVpTunnelTable, usdAtmSubIfTable=usdAtmSubIfTable, usdAtmVpPingControlGroup=usdAtmVpPingControlGroup, usdAtmSubIfSvcConfigCircuitType=usdAtmSubIfSvcConfigCircuitType, usdAtmCircuitOamVci=usdAtmCircuitOamVci, UsdAtmNbmaMapName=UsdAtmNbmaMapName, usdAtmCircuitOamTable=usdAtmCircuitOamTable, usdAtmVcPingTable=usdAtmVcPingTable, usdAtmSubIfSvcConfigEntry=usdAtmSubIfSvcConfigEntry, PYSNMP_MODULE_ID=usdAtmMIB, usdAtmSubIfVccTrafficShapingTagging=usdAtmSubIfVccTrafficShapingTagging, usdAtmNextIfIndex=usdAtmNextIfIndex, usdAtmSubIfInverseArp=usdAtmSubIfInverseArp, usdAtmCircuitOamVpi=usdAtmCircuitOamVpi, usdAtmPvcStatsInCellOctets=usdAtmPvcStatsInCellOctets, usdAtmCircuitOamIfIndex=usdAtmCircuitOamIfIndex, usdAtmNbmaMapGroup=usdAtmNbmaMapGroup, usdAtmIfIlmiPollFrequency=usdAtmIfIlmiPollFrequency, usdAtmSubIfVccType=usdAtmSubIfVccType, usdAtmIfIlmiVcd=usdAtmIfIlmiVcd, usdAtmCircuitOutOamF5EndToEndLoopbackCells=usdAtmCircuitOutOamF5EndToEndLoopbackCells, usdAtmIfOamCellRxAdminState=usdAtmIfOamCellRxAdminState, usdAtmSubIfNbma=usdAtmSubIfNbma, usdAtmVpPingMinRtt=usdAtmVpPingMinRtt, usdAtmVcPingTestCompleted=usdAtmVcPingTestCompleted, usdAtmPing=usdAtmPing, usdAtmSubIfVccVcd=usdAtmSubIfVccVcd, usdAtmVcPingProbeCount=usdAtmVcPingProbeCount, usdAtmVcPingSentProbes=usdAtmVcPingSentProbes, usdAtmCompliance5=usdAtmCompliance5, usdAtmSubIfVccMbs=usdAtmSubIfVccMbs, usdAtmVpPingTable=usdAtmVpPingTable, usdAtmSubIfSvcConfigCdvt=usdAtmSubIfSvcConfigCdvt, usdAtmCompliance2=usdAtmCompliance2, usdAtmPvcStatsInPacketOctets=usdAtmPvcStatsInPacketOctets, usdAtmSubIfAddress=usdAtmSubIfAddress, usdAtmObjects=usdAtmObjects, usdAtmNbmaMapListEntry=usdAtmNbmaMapListEntry, usdAtmVpPingStartTime=usdAtmVpPingStartTime, usdAtmGroup2=usdAtmGroup2, usdAtmNbmaMapListName=usdAtmNbmaMapListName, usdAtmPvcStatsOutCellErrors=usdAtmPvcStatsOutCellErrors, usdAtmPvcStatsInPacketOctetDiscards=usdAtmPvcStatsInPacketOctetDiscards, usdAtmAal5IfEntry=usdAtmAal5IfEntry, usdAtmAal5IfIndex=usdAtmAal5IfIndex, usdAtmVpTunnelRowStatus=usdAtmVpTunnelRowStatus, usdAtmSubIfVccTrafficShapingPoliceObserve=usdAtmSubIfVccTrafficShapingPoliceObserve, usdAtmIfInCells=usdAtmIfInCells, usdAtmSubIfSvcConfigObserve=usdAtmSubIfSvcConfigObserve, usdAtmCompliance3=usdAtmCompliance3, usdAtmSubIfGroup2=usdAtmSubIfGroup2, UsdAtmNbmaMapNameOrNull=UsdAtmNbmaMapNameOrNull, usdAtmVpPingMaxRtt=usdAtmVpPingMaxRtt, usdAtmIfEntry=usdAtmIfEntry, usdAtmCircuitInOamCellsDropped=usdAtmCircuitInOamCellsDropped, usdAtmIfCacUsedBandwidthLower=usdAtmIfCacUsedBandwidthLower, usdAtmIfCacUbrWeight=usdAtmIfCacUbrWeight, usdAtmAal5IfLowerIfIndex=usdAtmAal5IfLowerIfIndex, usdAtmPvcStatsOutPackets=usdAtmPvcStatsOutPackets, usdAtmNbmaMapTable=usdAtmNbmaMapTable, usdAtmSubIfGroup3=usdAtmSubIfGroup3, usdAtmGroup=usdAtmGroup, usdAtmSubIfDistinguisher=usdAtmSubIfDistinguisher, usdAtmGroup4=usdAtmGroup4, usdAtmSubIfVccRowStatus=usdAtmSubIfVccRowStatus, usdAtmVpTunnelEntry=usdAtmVpTunnelEntry, usdAtmSubIfVccTrafficShapingTable=usdAtmSubIfVccTrafficShapingTable, usdAtmSubIfVccTrafficShapingEntry=usdAtmSubIfVccTrafficShapingEntry, usdAtmVcPingControlGroup=usdAtmVcPingControlGroup, usdAtmPvcStatsInPacketDiscards=usdAtmPvcStatsInPacketDiscards, usdAtmCircuitOamLoopbackOperStatus=usdAtmCircuitOamLoopbackOperStatus, usdAtmSubIfSvcConfigClp0=usdAtmSubIfSvcConfigClp0, usdAtmSubIfSvcRowStatus=usdAtmSubIfSvcRowStatus, usdAtmIfLayer=usdAtmIfLayer, usdAtmSubIfGroup=usdAtmSubIfGroup, usdAtmVcPingCtlTrapGeneration=usdAtmVcPingCtlTrapGeneration, usdAtmIfRowStatus=usdAtmIfRowStatus, usdAtmIfOutCells=usdAtmIfOutCells, usdAtmIfSvcSignallingVci=usdAtmIfSvcSignallingVci, usdAtmVcPingProbeResponses=usdAtmVcPingProbeResponses, usdAtmNbmaMapListRowStatus=usdAtmNbmaMapListRowStatus, usdAtmNbmaMapBroadcast=usdAtmNbmaMapBroadcast, usdAtmSubIfSvcConfigTable=usdAtmSubIfSvcConfigTable, usdAtmConformance=usdAtmConformance, usdAtmIfCacUsedBandwidthUpper=usdAtmIfCacUsedBandwidthUpper, usdAtmVpTunnelGroup=usdAtmVpTunnelGroup, usdAtmIfCapabilityOam=usdAtmIfCapabilityOam, usdAtmCircuitInOamF5Cells=usdAtmCircuitInOamF5Cells, usdAtmPvcStatsIfIndex=usdAtmPvcStatsIfIndex, usdAtmCircuitOutOamF5RdiCells=usdAtmCircuitOutOamF5RdiCells, usdAtmCircuitOamAdminStatus=usdAtmCircuitOamAdminStatus, usdAtmTrafficShapingGroup=usdAtmTrafficShapingGroup, usdAtmPvcStatsOutCells=usdAtmPvcStatsOutCells, usdAtmCompliances=usdAtmCompliances, usdAtmSvcGroup=usdAtmSvcGroup, usdAtmNbmaMapEntry=usdAtmNbmaMapEntry, usdAtmIfMapGroup=usdAtmIfMapGroup, usdAtmSubIfSvcConfigServiceCategory=usdAtmSubIfSvcConfigServiceCategory, usdAtmTraps=usdAtmTraps, usdAtmSubIfVccTable=usdAtmSubIfVccTable, usdAtmSubIfSvcConfigDestAtmAddress=usdAtmSubIfSvcConfigDestAtmAddress, usdAtmVpPingCtlTrapGeneration=usdAtmVpPingCtlTrapGeneration, usdAtmVpTunnelIfIndex=usdAtmVpTunnelIfIndex, usdAtmVpPingProbeResponses=usdAtmVpPingProbeResponses, usdAtmVpTunnelServiceCategory=usdAtmVpTunnelServiceCategory, usdAtmIfSvcSignallingTable=usdAtmIfSvcSignallingTable, usdAtmIfIlmiVpi=usdAtmIfIlmiVpi, usdAtmGroup3=usdAtmGroup3, usdAtmNbma=usdAtmNbma, usdAtmCircuitOamLoopbackFrequency=usdAtmCircuitOamLoopbackFrequency, usdAtmGroups=usdAtmGroups, usdAtmSubIfEntry=usdAtmSubIfEntry, usdAtmVcPingTimeOut=usdAtmVcPingTimeOut, usdAtmVpPingTimeOut=usdAtmVpPingTimeOut, usdAtmPvcStatsInCells=usdAtmPvcStatsInCells, usdAtmVcPingMinRtt=usdAtmVcPingMinRtt, usdAtmPingTestOamSeg=usdAtmPingTestOamSeg, usdAtmAal5IfRowStatus=usdAtmAal5IfRowStatus, usdAtmNbmaMapIfIndex=usdAtmNbmaMapIfIndex, usdAtmIfCacSubscriptionBandwidth=usdAtmIfCacSubscriptionBandwidth, usdAtmSubIfNextIfIndex=usdAtmSubIfNextIfIndex, usdAtmCircuitOutOamF5SegmentLoopbackCells=usdAtmCircuitOutOamF5SegmentLoopbackCells, usdAtmIfSvcSignallingVcd=usdAtmIfSvcSignallingVcd, usdAtmIfSvcSignallingAdminStatus=usdAtmIfSvcSignallingAdminStatus, usdAtmSubIfSvcConfigPacketDiscard=usdAtmSubIfSvcConfigPacketDiscard, usdAtmIfCapabilityIndex=usdAtmIfCapabilityIndex, usdAtmSubIfRowStatus=usdAtmSubIfRowStatus, usdAtmIfCapabilityOamCellFilter=usdAtmIfCapabilityOamCellFilter, usdAtmSubIfLayer=usdAtmSubIfLayer, usdAtmIfTable=usdAtmIfTable, usdAtmSubIfIndex=usdAtmSubIfIndex, usdAtmCircuitOamEntry=usdAtmCircuitOamEntry, usdAtmCircuitInOamF5SegmentLoopbackCells=usdAtmCircuitInOamF5SegmentLoopbackCells, usdAtmCircuitInOamF5AisCells=usdAtmCircuitInOamF5AisCells, usdAtmAal5NextIfIndex=usdAtmAal5NextIfIndex, usdAtmCircuitInOamF5EndToEndLoopbackCells=usdAtmCircuitInOamF5EndToEndLoopbackCells, usdAtmSubIfSvcConfigMbs=usdAtmSubIfSvcConfigMbs, usdAtmIfCapabilityEntry=usdAtmIfCapabilityEntry, usdAtmIfIlmiAdminState=usdAtmIfIlmiAdminState, usdAtmCircuitOutOamF5Cells=usdAtmCircuitOutOamF5Cells, usdAtmPingTestTypes=usdAtmPingTestTypes, usdAtmIfUniVersion=usdAtmIfUniVersion, usdAtmPvcStatisticsTable=usdAtmPvcStatisticsTable, usdAtmPingTrapGroup=usdAtmPingTrapGroup, usdAtmIfOamCellFilter=usdAtmIfOamCellFilter, usdAtmSubIfVccVpi=usdAtmSubIfVccVpi, usdAtmIfCapabilityMaxVpi=usdAtmIfCapabilityMaxVpi)
