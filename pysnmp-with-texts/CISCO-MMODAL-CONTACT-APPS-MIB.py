#
# PySNMP MIB module CISCO-MMODAL-CONTACT-APPS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-MMODAL-CONTACT-APPS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:07:43 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
CiscoURLString, = mibBuilder.importSymbols("CISCO-TC", "CiscoURLString")
CounterBasedGauge64, = mibBuilder.importSymbols("HCNUM-TC", "CounterBasedGauge64")
InetAddressDNS, InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressDNS", "InetAddressType", "InetAddress")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
ModuleIdentity, Gauge32, Unsigned32, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, Counter32, iso, Counter64, ObjectIdentity, Integer32, NotificationType, IpAddress, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Gauge32", "Unsigned32", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "Counter32", "iso", "Counter64", "ObjectIdentity", "Integer32", "NotificationType", "IpAddress", "TimeTicks")
TextualConvention, TruthValue, DateAndTime, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TruthValue", "DateAndTime", "DisplayString")
ciscoMmodalContactAppsMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 664))
ciscoMmodalContactAppsMIB.setRevisions(('2008-07-07 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoMmodalContactAppsMIB.setRevisionsDescriptions(('Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoMmodalContactAppsMIB.setLastUpdated('200807070000Z')
if mibBuilder.loadTexts: ciscoMmodalContactAppsMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoMmodalContactAppsMIB.setContactInfo('Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-cuea@cisco.com')
if mibBuilder.loadTexts: ciscoMmodalContactAppsMIB.setDescription("The Cisco Unified Multi-Modal Contact Applications (MMCA) platform is a highly scalable, modular, extensible, open and secure platform for providing contact center applications. The Cisco Unified Expert Advisor (CUEA) is implemented on this platform. The Cisco Unified Expert Advisor application is deployed on multiple devices that form a cluster, where each device could be classified as 'Runtime' or 'Reporting'. Each device hosts a set of services and each service performs a specific task. Not all services will be running on every device. The CISCO-MMODAL-CONTACT-APPS-MIB defines the instrumentation of the services present in the Cisco Unified Expert Advisor. The MIB mainly consists of the run-time statistics of each service and also defines a Notification format. It also defines various groups of objects that are not specific to a service. DEFINITION OF TERMS AND ACRONYMS ACD Automatic Call Distributor ACMI Advanced Contact Management Interface. The interface used by the ICM to talk to generic peripherals. Also known as GED-188 Agent An Agent, also known as Expert Advisor, is a person in the enterprise who is capable of handling calls from CUEA AQ Assignment Queue Assignment Queue Assignment Queues allow Cisco Unified ICM to route call requests to groups of expert advisors. Various experts may qualify for various assignment queues based on the assignment queue membership rules, and they then log in or out of, as well as change their availability with respect to those assignment queues. An expert advisor who is available on a given assignment queue is able to be considered by the Work Assigner to receive calls according to the assignment queue's selection strategy. Attribute Definition Attributes Definitions are used by assignment queues and expert advisors. Attributes are defined by CUEA administrators and assigned to assignment queues and expert advisors. Expert advisors are routed call requests if the expert advisor's skills and attributes match those of the Assignment Queue. B2BUA Back to back user agent CM Contact Manager Contact A Contact is the internal object that represents an internal call. The Contact is created when the call arrives at CUEA, and does not terminate until the caller disconnects CTI Computer Telephony Integration CTI-OS Computer Telephony Integration - Object Server CUEA Cisco Unified Expert Advisor CUCM Cisco Unified Communications manager CUPS Cisco Unified Presence server CVP Customer Voice Portal DNIS Dialed Number Identification service ERS Enterprise Routing Services. The ERS Peripheral Gateway is a generic interface for the ICM to connect to an ACD. It exposes the ACMI protocol GED188 The ICM CTI Server/Client interface specification ICM Intelligent Contact Management ICMGW Intelligent Contact Management Gateway ICMPG ICM Peripheral Gateway IM Instant Messaging JVM Java Virtual Machine MMCA Multi Modal Contact Applications MPA Media Platform adapter MPI Media Platform Interface PG Peripheral Gateway. The Peripheral Gateway is how the ICM talks to any ACD. PIM Peripheral Information Manager. The PIM is a component of the ICM Peripheral Gateway that handles the ACD specific communication. RA Reporting Adapter RDA Resource Desktop adapter RDI Resource desktop interface RM Resource Manager RS Reporting subsystem Selection Strategy The strategy by which the Work Assigner should assign Expert Advisors to contacts. SIP Session Initiation Protocol Skills Skills are classifications for expert advisor abilities, general knowledge, and expertise. Skills may be defined by Expert Advisor administrators, and then assigned to individual experts. An expert may have multiple skills, and a competency level from 1 to 100 in each. SIMPLE SIP for Instant Messaging and Presence Leveraging Extensions WA Work Assigner.")
class CmmcaIndex(TextualConvention, Unsigned32):
    description = 'An arbitrary value which uniquely identifies a service. The value should be a small positive integer; index values for different services are not necessarily contiguous.'
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(1, 4294967295)

class CmmcaServiceType(TextualConvention, Integer32):
    description = "This textual convention is used to identify the type of service. The Cisco Unified Expert Advisor includes one or but probably multiple, of the following services. 'cm': Contact Manager: The Contact manager service is responsible for the handling of call requests and maintaining contact state. CM uses BRE to help direct call flow decision making. The major services that the CM interfaces with are the Work Assigner (WA), Media Platform Interface (MPA), Knowledge Broker (KB), the ICM Gateway (GW), and Business Rules Execution Engine (BRE). 'rm': Resource Manager: The Resource Manager (RM) is responsible for maintaining the state of assignable resources, e.g. agents. The RM interfaces to the Work Assigner, Media Platform Interface, Resource Desktop Adapter and Business Rules Engine. 'wa': Work assigner: The Work Asssigner is responsible for matching Contacts that need Resources with Resources that need Contacts. 'mpa': Media Platform Adapter: The Media Platform Adapter is a generic interface to various switching and call control platforms. Removes inconsistencies and normalizes messages before sending them. It is an SIP Back to Back user Agent, providing basic third party call control and end point functions to its clients(RM,CM,RDA). 'bre': Business Rules Engine: The BRE allows customers to define how the system will behave and then execute scripts or business rules at runtime. 'icmgw': ICM Gateway : The ICM Gateway talks to the ERS PG of ICM over the GED-188 (ACMI) protocol. It sends agent state information to the ICM so that the ICM knows whether or not to route calls. 'rda': Resource Desktop Adapter: This service is used by RM to communicate to the user interface of the Resource(Agent). It provides a normalized interface (RDI) to the RM that removes differences between communicating to different types of desktops or Resources viz;CTI-OS, Presence, WebBased desktops or Traditional/occasional agents. 'ra': Reporting Adapter: RAs listen to event streams that are produced by runtime components. They then take those events, convert them as appropriate (for example, converting them to a particular version of a schema or applying a security policy of what data can be sent to the reporting database) and then send a new message to the Cisco MMCA Reporting Subsystem. 'rs': Reporting Subsystem: The RS is responsible for writing data into the reporting database. It receives messages from various Reporting Adapters and converts them into db writes."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))
    namedValues = NamedValues(("cm", 1), ("rm", 2), ("wa", 3), ("mpa", 4), ("bre", 5), ("icmgw", 6), ("rda", 7), ("ra", 8), ("rs", 9))

class CmmcaServiceStatus(TextualConvention, Integer32):
    description = "This textual convention is used to identify the run status of a Cisco Unified Expert Advisor service. The value shown is the result of evaluating the current run status of each of the individual elements associated with the service. 'disabled' The service has not yet begun to start up. 'starting' The service is in initialization procedure, configuring and licensing, not accepting connections yet. 'inService' The service is up and running optimally, accepting connections at full QoS (if applicable). 'inServiceWarning' The service is running sub-optimally, possibly due to poor QoS or a threshold reached; see transition reason for explanation. 'inServiceCritical' The service is running but very near to failure, similar to 'inServiceWarning' but much more dire. 'partialService' The service is no longer accepting new calls but finishes processing active calls (may be due to a loss of a dependency/ connectivity, or a shutdown request). 'outOfService' The service is no longer accepting new calls and is down for some reason. It can still be brought in service. 'stopping' The service no longer accepts new connections, lets current connections terminate gracefully. 'stopped' The service has shut down and is not processing any more calls. The process itself is terminating (doing memory cleanup, saving settings, shutting down threads, etc.). 'unknown' The status of the mmca service is unknown to the SNMP agent either because the link between the agent and the application has been broken or the agent is in the midst of refreshing service status. (A refresh typically occurs after an agent restart due to configuration changes)."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))
    namedValues = NamedValues(("disabled", 1), ("starting", 2), ("inService", 3), ("inServiceWarning", 4), ("inServiceCritical", 5), ("partialService", 6), ("outOfService", 7), ("stopping", 8), ("stopped", 9), ("unknown", 10))

class CmmcaNextNodeStatus(TextualConvention, Integer32):
    description = "This textual convention is used to identify the link status of a neighbouring node with a CUEA Device. 'unknown' The status of the link is unknown to the SNMP agent either because the link between the agent and the application has been broken or the agent is in the midst of refreshing link status. (A refresh typically occurs after an agent restart due to configuration changes.) 'available' The connection between the neighbouring node and CUEA device is up and available. 'unavailable' The connection between the neighbouring node and CUEA device is down and unavailable."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("unknown", 1), ("available", 2), ("unavailable", 3))

class CmmcaConditionStatus(TextualConvention, Integer32):
    description = 'This textual convention is used to specify the severity of a specific system condition raised by CUEA or services in it. CUEA can run with certain system conditions raised. The overall system condition status of the application is specified by CmmcaSystemConditionStatus. conditionWarn(1) : This severity level indicates a warning that something is not right, however the application is still functioning, but the condition may be indicative of problem that may become more serious later. conditionCritical(2): This serverity indicates a condition where the application is not functioning properly.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("conditionWarn", 1), ("conditionCritical", 2))

class CmmcaSystemConditionStatus(TextualConvention, Integer32):
    description = "This textual convention is used to specify the overall System Condition status of CUEA application. CUEA application can run with certain conditions raised with severity specified by CmmcaConditionStatus. statusNormal(1) : No Conditions have been raised, everything is working as intended. This condition can be considered as 'Green' status, where everything is working as normal. statusWarning(2): The application is currently operating, however at least one condition with CmmcaConditionStatus : conditionWarn(1) severity has been raised but no condition with CmmcaConditionStatus : conditionCritical(2) severity has been raised. This status can be considered 'Yellow' where the application or service is operating, however some condition has been detected that could become more serious later (low memory, disk space a problem, can't connect to other members of a cluster, etc.) statusCritical(3): The application or service is not functioning as intended. One or more conditions with CmmcaConditionStatus : conditionCritical(2) severity have been raised. This status can be considered 'Red' where the application or service is not functioning as designed. There is some problem such as not being able to connect to ICM or CUPS or the message bus."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("statusNormal", 1), ("statusWarning", 2), ("statusCritical", 3))

class CmmcaSeverityLevel(TextualConvention, Integer32):
    description = "This textual convention is used to specify the severity level of an event. The severity levels are 'emergency': This severity level event indicates that a devastating failure has occurred; the system or service is unusable. Immediate operator intervention is required. 'alert': This severity level event indicates that a devastating failure is imminent that will render the system unusable. Immediate operator attention is necessary. 'critical': This severity level event indicates that a service impacting failure is likely to occur soon; an error has occurred that was not appropriately handled by the system. Operator attention is needed as soon as possible. 'error': This severity level event indicates that the system has experienced a temporary impairment or an error that was appropriately handled by the system. 'warning': This severity level event may be a precursor to an error occurrence. An operator should review the event soon to determine if action is needed. 'notice': This severity level event contains health or operational state information that may be pertinent to the health of the system but does not require the attention of the administrator at this time. 'informational': This severity level event contains interesting system-level information that is valuable to an administrator, however, the event itself does not indicate a failure or impairment condition. 'debug': This severity level event provides supplemental information that may be beneficial toward diagnosing or resolving a problem but does not in itself provide operational health status."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("emergency", 1), ("alert", 2), ("critical", 3), ("error", 4), ("warning", 5), ("notice", 6), ("informational", 7), ("debug", 8))

ciscoMmodalContactAppsMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 664, 0))
ciscoMmodalContactAppsMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 664, 1))
ciscoMmodalContactAppsMIBConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 664, 2))
cmmcaGeneralInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 1))
cmmcaLicenseInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 2))
cmmcaThreadPool = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 3))
cmmcaRuntimeInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 4))
cmmcaServices = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 5))
cmmcaServiceInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6))
cmmcaNotificationInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 7))
cmmcaEventMessageId = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 7, 1), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cmmcaEventMessageId.setStatus('current')
if mibBuilder.loadTexts: cmmcaEventMessageId.setDescription('The event message ID is the unique notification message identifier that was assigned by the CUEA application. This identifier is unique for each different notification but consistent for each instance of the same notification.')
cmmcaEventHostName = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 7, 2), SnmpAdminString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cmmcaEventHostName.setStatus('current')
if mibBuilder.loadTexts: cmmcaEventHostName.setDescription('The event host name object specifies the host name or the fully qualified domain name of the CUEA server from which this event originated.')
cmmcaEventAppName = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 7, 3), SnmpAdminString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cmmcaEventAppName.setStatus('current')
if mibBuilder.loadTexts: cmmcaEventAppName.setDescription('The event application name object specifies the service-specific name of the functional service that generated this notification. This name will vary, both in content and in format, based on the service that generated the notification. For example, the name for the first CM service may be CUEA_CM1 while the third MPA service name may be CUEA_MPA3. By convention, the application version number shall appear in the application name as well, thus the second CM service application name for Cisco Unified Expert Advisor version 1.0 will be CUEA_1_0_CM2.')
cmmcaEventMessageName = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 7, 4), SnmpAdminString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cmmcaEventMessageName.setStatus('current')
if mibBuilder.loadTexts: cmmcaEventMessageName.setDescription('The event message name object specifies the service-specific name of the Expert Advisor service notification message. This name will vary, both in content and in format, based on the event itself. The object value is used to group and correlate similar notifications.')
cmmcaEventState = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 7, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("raise", 1), ("clear", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cmmcaEventState.setStatus('current')
if mibBuilder.loadTexts: cmmcaEventState.setDescription("The event state object identifies the state (not to be confused with severity) of the notification and potentially the current state of the functional component that generated the notification. The possible states are: 'raise': A raise state identifies a notification received as a result of a health-impacting condition, such as a process failure. A subsequent clear state notification will follow when the error condition is resolved. 'clear': The clear state indicates that the condition which generated a previous raise notification has been resolved.")
cmmcaEventSeverity = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 7, 6), CmmcaSeverityLevel()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cmmcaEventSeverity.setStatus('current')
if mibBuilder.loadTexts: cmmcaEventSeverity.setDescription("The event severity object indicates the severity level of this notification. The severity levels are: 'emergency': The notification indicates that a devastating failure has occurred; the system or service is unusable. Immediate operator intervention is required. 'alert': The notification indicates that a devastating failure is imminent that will render the system unusable. Immediate operator attention is necessary. 'critical': The notification indicates that a service impacting failure is likely to occur soon; an error has occurred that was not appropriately handled by the system. Operator attention is needed as soon as possible. 'error': The notification contains important operational state information and may indicate that the system has experienced a temporary impairment or an error that was appropriately handled by the system. An operator should review the notification soon to determine if action is needed. 'warning': The notification contains important operational state information that may be a precursor to an error occurrence. An operator should review the notification soon to determine if action is needed. 'notice': The notification contains health or operational state information that may be pertinent to the health of the system but does not require the attention of the administrator at this time. 'informational': The notification contains interesting system-level information that is valuable to an administrator, however, the event itself does not indicate a failure or impairment condition. 'debug': The notification provides supplemental information that may be beneficial toward diagnosing or resolving a problem but does not in itself provide operational health status.")
cmmcaEventTimestamp = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 7, 7), DateAndTime()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cmmcaEventTimestamp.setStatus('current')
if mibBuilder.loadTexts: cmmcaEventTimestamp.setDescription('The event time stamp object specifies the date and time that the notification was generated on the originating device.')
cmmcaEventText = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 7, 8), SnmpAdminString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cmmcaEventText.setStatus('current')
if mibBuilder.loadTexts: cmmcaEventText.setDescription('The event text is the full text of the notification. This text includes a description of the event that was generated, component state information and potentially a brief description of administrative action that may be necessary to correct the condition that caused the event to occur.')
cmmcaRmTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 1), )
if mibBuilder.loadTexts: cmmcaRmTable.setStatus('current')
if mibBuilder.loadTexts: cmmcaRmTable.setDescription('This table describes the Resource Manager (RM) Service instances configured on this Device. The Resource Manager (RM) is responsible for maintaining the state of assignable resources, e.g. agents. The RM interfaces to the Work Assigner, Media Platform Interface, Resource Desktop Adapter and Business Rules Engine. Resource state is a function of information obtained from the actual resource and a rule set. Each RM only participates with in a single routing domain, and therefore only talks to a single Work Assigner. Each RM is also tied to a single MPA, and one or more RDAs that are dedicated to the RM. The BRE can be shared with other components (other RMs, and other CMs) This table has a sparse dependent relationship with the cmmcaServiceTable and hence uses the index of that table.')
cmmcaRmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 1, 1), ).setIndexNames((0, "CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaServiceIndex"))
if mibBuilder.loadTexts: cmmcaRmEntry.setStatus('current')
if mibBuilder.loadTexts: cmmcaRmEntry.setDescription('Each entry represents a configured RM service on the Device. The index in cmmcaServiceTable indexes each entry.')
cmmcaRmRtAgentsLoggedIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 1, 1, 1), Gauge32()).setUnits('agents').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaRmRtAgentsLoggedIn.setStatus('current')
if mibBuilder.loadTexts: cmmcaRmRtAgentsLoggedIn.setDescription('The Real Time indicator of the number of agents currently logged in.')
cmmcaRmRtAgentsOnCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 1, 1, 2), Gauge32()).setUnits('agents').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaRmRtAgentsOnCalls.setStatus('current')
if mibBuilder.loadTexts: cmmcaRmRtAgentsOnCalls.setDescription('The real Time indicator of the number of agents currently on calls.')
cmmcaRmRtAgentsReserved = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 1, 1, 3), Gauge32()).setUnits('agents').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaRmRtAgentsReserved.setStatus('current')
if mibBuilder.loadTexts: cmmcaRmRtAgentsReserved.setDescription('The real Time indicator of the number of agents currently in the reserved state.')
cmmcaRmRtAgentsWrapUp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 1, 1, 4), Gauge32()).setUnits('agents').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaRmRtAgentsWrapUp.setStatus('current')
if mibBuilder.loadTexts: cmmcaRmRtAgentsWrapUp.setDescription('The real Time indicator of the number of agents currently wrapping up a call.')
cmmcaRmRtAgentsReady = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 1, 1, 5), Gauge32()).setUnits('agents').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaRmRtAgentsReady.setStatus('current')
if mibBuilder.loadTexts: cmmcaRmRtAgentsReady.setDescription('The real Time indicator of the number of agents currently in the ready state.')
cmmcaRmRtAgentsNoQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 1, 1, 6), Gauge32()).setUnits('agents').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaRmRtAgentsNoQueue.setStatus('current')
if mibBuilder.loadTexts: cmmcaRmRtAgentsNoQueue.setDescription('The real Time indicator of the number of agents currently unallocated in any queue (most likely a configuration error).')
cmmcaRmAggNumOffersAccept = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 1, 1, 7), Counter64()).setUnits('offers').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaRmAggNumOffersAccept.setStatus('current')
if mibBuilder.loadTexts: cmmcaRmAggNumOffersAccept.setDescription('The number of offers accepted since application start time specified by cmmcaStartTime.')
cmmcaRmIntNumOffersAccept = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 1, 1, 8), Gauge32()).setUnits('offers').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaRmIntNumOffersAccept.setStatus('current')
if mibBuilder.loadTexts: cmmcaRmIntNumOffersAccept.setDescription('The number of offers accepted over the last interval specified by the corresponding cmmcaServiceIntPeriod in cmmcaServiceTable.')
cmmcaRmAggNumOffersReject = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 1, 1, 9), Counter64()).setUnits('offers').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaRmAggNumOffersReject.setStatus('current')
if mibBuilder.loadTexts: cmmcaRmAggNumOffersReject.setDescription('The number of offers rejected since application start time specified by cmmcaStartTime.')
cmmcaRmIntNumOffersReject = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 1, 1, 10), Gauge32()).setUnits('offers').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaRmIntNumOffersReject.setStatus('current')
if mibBuilder.loadTexts: cmmcaRmIntNumOffersReject.setDescription('The number of offers rejected over the last interval specified by the corresponding cmmcaServiceIntPeriod in cmmcaServiceTable.')
cmmcaRmAggNumOffersTimedOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 1, 1, 11), Counter64()).setUnits('offers').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaRmAggNumOffersTimedOut.setStatus('current')
if mibBuilder.loadTexts: cmmcaRmAggNumOffersTimedOut.setDescription('The number of offers that timed out since application start time specified by cmmcaStartTime.')
cmmcaRmIntNumOffersTimedOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 1, 1, 12), Gauge32()).setUnits('offers').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaRmIntNumOffersTimedOut.setStatus('current')
if mibBuilder.loadTexts: cmmcaRmIntNumOffersTimedOut.setDescription('The number of offers that timed out over the last interval specified by the corresponding cmmcaServiceIntPeriod in cmmcaServiceTable.')
cmmcaCmTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 2), )
if mibBuilder.loadTexts: cmmcaCmTable.setStatus('current')
if mibBuilder.loadTexts: cmmcaCmTable.setDescription('This table describes CM instances configured on this Device. The Contact Manager (CM) service is responsible for the handling of call requests and maintaining contact state. Instances may load share as well as support different types of contacts. This service is a critical funnel point to the rest of the system. CM uses BRE to help direct call flow decision making. The CM must be able to transparently scale and provide for fault tolerance. This is best modeled as the CM receiving work from a virtual queue. The CM only participates within a single routing domain, and therefore only talks to a single Work Assigner. Each CM is also tied to a single MPA. The BRE used by the CM can be shared among components (both CMs and RMs). This table has a sparse dependent relationship with the cmmcaServiceTable and hence uses its index.')
cmmcaCmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 2, 1), ).setIndexNames((0, "CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaServiceIndex"))
if mibBuilder.loadTexts: cmmcaCmEntry.setStatus('current')
if mibBuilder.loadTexts: cmmcaCmEntry.setDescription('Each Entry represents a configured CM service. The index in cmmcaServiceTable indexes each entry.')
cmmcaCmRtNumActiveCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 2, 1, 1), Gauge32()).setUnits('calls').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaCmRtNumActiveCalls.setStatus('current')
if mibBuilder.loadTexts: cmmcaCmRtNumActiveCalls.setDescription('The real time indicator of the number of active calls.')
cmmcaCmRtNumCallTrying = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 2, 1, 2), Gauge32()).setUnits('calls').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaCmRtNumCallTrying.setStatus('current')
if mibBuilder.loadTexts: cmmcaCmRtNumCallTrying.setDescription('The real time indicator of the number of calls where a contact is created; BRE script is started.')
cmmcaCmRtNumCallRingBack = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 2, 1, 3), Gauge32()).setUnits('calls').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaCmRtNumCallRingBack.setStatus('current')
if mibBuilder.loadTexts: cmmcaCmRtNumCallRingBack.setDescription('The real time indicator of the number of calls which are currently receiving ringback.')
cmmcaCmRtNumCallConnecting = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 2, 1, 4), Gauge32()).setUnits('calls').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaCmRtNumCallConnecting.setStatus('current')
if mibBuilder.loadTexts: cmmcaCmRtNumCallConnecting.setDescription('The real time indicator of the number of calls where a resource has been identified selected and the call is in the process of being connected.')
cmmcaCmRtNumCallConnected = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 2, 1, 5), Gauge32()).setUnits('calls').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaCmRtNumCallConnected.setStatus('current')
if mibBuilder.loadTexts: cmmcaCmRtNumCallConnected.setDescription('The real time indicator of the number of calls in which a contact is connected to one or more participant (e.g., self-service, agents, conference).')
cmmcaCmRtNumCallInitial = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 2, 1, 6), Gauge32()).setUnits('calls').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaCmRtNumCallInitial.setStatus('current')
if mibBuilder.loadTexts: cmmcaCmRtNumCallInitial.setDescription('The real time indicator of the number of calls in which a contact is in initial state.')
cmmcaCmAggNumCallArrivals = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 2, 1, 7), Counter64()).setUnits('calls').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaCmAggNumCallArrivals.setStatus('current')
if mibBuilder.loadTexts: cmmcaCmAggNumCallArrivals.setDescription('Number of new calls which arrived at the Contact Manager since application start time specified by cmmcaStartTime.')
cmmcaCmIntNumCallArrivals = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 2, 1, 8), Gauge32()).setUnits('calls').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaCmIntNumCallArrivals.setStatus('current')
if mibBuilder.loadTexts: cmmcaCmIntNumCallArrivals.setDescription('Number of new calls which arrived at the Contact Manager over the last interval specified by the corresponding cmmcaServiceIntPeriod in cmmcaServiceTable.')
cmmcaCmRtNumCallRejecting = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 2, 1, 9), Gauge32()).setUnits('calls').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaCmRtNumCallRejecting.setStatus('current')
if mibBuilder.loadTexts: cmmcaCmRtNumCallRejecting.setDescription('The real time indicator of the number of calls which could not be accepted and processed (e.g. due to invalid call, lack of system resources or licenses, or no agent available) and are currently in the process of being rejected.')
cmmcaCmRtNumCallTransferring = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 2, 1, 10), Gauge32()).setUnits('calls').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaCmRtNumCallTransferring.setStatus('current')
if mibBuilder.loadTexts: cmmcaCmRtNumCallTransferring.setDescription('The real time indicator of the number of calls in which participant changes are currently in progress (e.g.,participant adds/removes like conferencing, redirecting or transferring).')
cmmcaCmRtNumCallTerminating = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 2, 1, 11), Gauge32()).setUnits('calls').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaCmRtNumCallTerminating.setStatus('current')
if mibBuilder.loadTexts: cmmcaCmRtNumCallTerminating.setDescription('The real time indicator of the number of calls which are currently terminating because all parties but one have disconnected.')
cmmcaCmAggAvgCallDurationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 2, 1, 12), Gauge32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaCmAggAvgCallDurationTime.setStatus('current')
if mibBuilder.loadTexts: cmmcaCmAggAvgCallDurationTime.setDescription('The average call handling time since application start time specified by cmmcaStartTime.')
cmmcaCmIntAvgCallDurationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 2, 1, 13), Gauge32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaCmIntAvgCallDurationTime.setStatus('current')
if mibBuilder.loadTexts: cmmcaCmIntAvgCallDurationTime.setDescription('The average call handling time over the last interval specified by the corresponding cmmcaServiceIntPeriod in cmmcaServiceTable.')
cmmcaCmAggMaxCallDurationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 2, 1, 14), Integer32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaCmAggMaxCallDurationTime.setStatus('current')
if mibBuilder.loadTexts: cmmcaCmAggMaxCallDurationTime.setDescription('The maximum call handling time since application start time specified by cmmcaStartTime.')
cmmcaCmIntMaxCallDurationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 2, 1, 15), Integer32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaCmIntMaxCallDurationTime.setStatus('current')
if mibBuilder.loadTexts: cmmcaCmIntMaxCallDurationTime.setDescription('The maximum call handling time over the last interval specified by the corresponding cmmcaServiceIntPeriod in cmmcaServiceTable.')
cmmcaCmAggMaxCallDurationTimeDt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 2, 1, 16), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaCmAggMaxCallDurationTimeDt.setStatus('current')
if mibBuilder.loadTexts: cmmcaCmAggMaxCallDurationTimeDt.setDescription('The timestamp when the maximum call duration time since application start time, cmmcaStartTime, has occurred.')
cmmcaCmIntMaxCallDurationTimeDt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 2, 1, 17), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaCmIntMaxCallDurationTimeDt.setStatus('current')
if mibBuilder.loadTexts: cmmcaCmIntMaxCallDurationTimeDt.setDescription('The timestamp of when the maximum call duration time over the last interval, specified by the corresponding cmmcaServiceIntPeriod in cmmcaServiceTable, occurred.')
cmmcaCmAggAvgCallInQueueTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 2, 1, 18), Gauge32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaCmAggAvgCallInQueueTime.setStatus('current')
if mibBuilder.loadTexts: cmmcaCmAggAvgCallInQueueTime.setDescription('The average call time in queue since application start time specified by cmmcaStartTime.')
cmmcaCmIntAvgCallInQueueTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 2, 1, 19), Gauge32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaCmIntAvgCallInQueueTime.setStatus('current')
if mibBuilder.loadTexts: cmmcaCmIntAvgCallInQueueTime.setDescription('The average call time in queue over the last interval specified by the corresponding cmmcaServiceIntPeriod in cmmcaServiceTable.')
cmmcaCmAggMaxCallInQueueTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 2, 1, 20), Integer32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaCmAggMaxCallInQueueTime.setStatus('current')
if mibBuilder.loadTexts: cmmcaCmAggMaxCallInQueueTime.setDescription('The maximum call time in queue since application start time specified by cmmcaStartTime.')
cmmcaCmIntMaxCallInQueueTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 2, 1, 21), Integer32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaCmIntMaxCallInQueueTime.setStatus('current')
if mibBuilder.loadTexts: cmmcaCmIntMaxCallInQueueTime.setDescription('The maximum call time in queue over the last interval specified by the corresponding cmmcaServiceIntPeriod in cmmcaServiceTable.')
cmmcaCmAggMaxCallInQueueTimeDt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 2, 1, 22), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaCmAggMaxCallInQueueTimeDt.setStatus('current')
if mibBuilder.loadTexts: cmmcaCmAggMaxCallInQueueTimeDt.setDescription('The timestamp of when the maximum call time in queue since application start(cmmcaStartTime), occurred.')
cmmcaCmIntMaxCallInQueueTimeDt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 2, 1, 23), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaCmIntMaxCallInQueueTimeDt.setStatus('current')
if mibBuilder.loadTexts: cmmcaCmIntMaxCallInQueueTimeDt.setDescription('The timestamp of when the maximum call time in queue over the last interval, specified by the corresponding cmmcaServiceIntPeriod in cmmcaServiceTable, occurred.')
cmmcaCmAggAvgCallArrivalRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 2, 1, 24), Gauge32()).setUnits('calls per minute').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaCmAggAvgCallArrivalRate.setStatus('current')
if mibBuilder.loadTexts: cmmcaCmAggAvgCallArrivalRate.setDescription('The average call arrival rate since application start time specified by cmmcaStartTime.')
cmmcaCmAggMaxCallArrivalRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 2, 1, 25), Integer32()).setUnits('calls per minute').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaCmAggMaxCallArrivalRate.setStatus('current')
if mibBuilder.loadTexts: cmmcaCmAggMaxCallArrivalRate.setDescription('The maximum of interval average call arrival rate, displayed by cmmcaCmIntAvgCallArrivalRate, since application start time, specified by cmmcaStartTime.')
cmmcaCmAggMaxCallArrivalRateDt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 2, 1, 26), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaCmAggMaxCallArrivalRateDt.setStatus('current')
if mibBuilder.loadTexts: cmmcaCmAggMaxCallArrivalRateDt.setDescription('The timestamp of when the maximum call arrival rate since application start (cmmcaStartTime), occurred.')
cmmcaCmIntAvgCallArrivalRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 2, 1, 27), Gauge32()).setUnits('calls per minute').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaCmIntAvgCallArrivalRate.setStatus('current')
if mibBuilder.loadTexts: cmmcaCmIntAvgCallArrivalRate.setDescription('The average rate of calls over the last interval specified by the corresponding cmmcaServiceIntPeriod in cmmcaServiceTable.')
cmmcaRdaTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 3), )
if mibBuilder.loadTexts: cmmcaRdaTable.setStatus('current')
if mibBuilder.loadTexts: cmmcaRdaTable.setDescription('This table lists all Resource Desktop Adapter services configured on this Device. The Resource Desktop Adapter (RDA) is used by the RM to communicate to the user interface of the Resource (or Agent). This component provides a normalized interface (RDI-Resource desktop interface) to the Resource Manager that removes the differences between communicating to different types of desktops (such as CTIOS, Presence, Web Based, etc) or Resources (such as occasional or traditional agents). This type of communication typically includes requests like: - Log In or Log Out a resource from the desktop - Set the presence state of the desktop to a particular state - Show a precall message to the resource - Offer a task to the resource and get a response Each RDA is tied to a single Resource Manager, but each Resource Manager may talk to many RDAs. This table has a sparse dependent relationship with cmmcaServiceTable and hence uses its index.')
cmmcaRdaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 3, 1), ).setIndexNames((0, "CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaServiceIndex"))
if mibBuilder.loadTexts: cmmcaRdaEntry.setStatus('current')
if mibBuilder.loadTexts: cmmcaRdaEntry.setDescription('Each entry represents a configured RDA service. The cmmcaServiceTable index is used to index each entry in this table.')
cmmcaRdaAggNumMsgProc = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 3, 1, 1), Counter64()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaRdaAggNumMsgProc.setStatus('current')
if mibBuilder.loadTexts: cmmcaRdaAggNumMsgProc.setDescription('The number of messages processed since application start time specified by cmmcaStartTime.')
cmmcaRdaIntNumMsgProc = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 3, 1, 2), CounterBasedGauge64()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaRdaIntNumMsgProc.setStatus('current')
if mibBuilder.loadTexts: cmmcaRdaIntNumMsgProc.setDescription('The number of messages processed over the last interval specified by the corresponding cmmcaServiceIntPeriod in cmmcaServiceTable.')
cmmcaRdaAggNumSuccessPresenceNotifications = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 3, 1, 3), Counter64()).setUnits('notifications').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaRdaAggNumSuccessPresenceNotifications.setStatus('current')
if mibBuilder.loadTexts: cmmcaRdaAggNumSuccessPresenceNotifications.setDescription('The number of successful presence notifications since application start time specified by cmmcaStartTime.')
cmmcaRdaIntNumSuccessPresenceNotifications = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 3, 1, 4), CounterBasedGauge64()).setUnits('notifications').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaRdaIntNumSuccessPresenceNotifications.setStatus('current')
if mibBuilder.loadTexts: cmmcaRdaIntNumSuccessPresenceNotifications.setDescription('The number of successful presence notifications over the last interval specified by the corresponding cmmcaServiceIntPeriod in cmmcaServiceTable.')
cmmcaRdaRtNumActiveClients = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 3, 1, 5), Gauge32()).setUnits('clients').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaRdaRtNumActiveClients.setStatus('current')
if mibBuilder.loadTexts: cmmcaRdaRtNumActiveClients.setDescription('The real time number of active end-user devices that have capability to perform instant message operation.')
cmmcaRdaRtNumOutStandingOfferTasks = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 3, 1, 6), Gauge32()).setUnits('tasks').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaRdaRtNumOutStandingOfferTasks.setStatus('current')
if mibBuilder.loadTexts: cmmcaRdaRtNumOutStandingOfferTasks.setDescription('The real time number of outstanding offertasks to be processed.')
cmmcaRdaAggNumUnSuccessPresenceNotifications = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 3, 1, 7), Counter64()).setUnits('notifications').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaRdaAggNumUnSuccessPresenceNotifications.setStatus('current')
if mibBuilder.loadTexts: cmmcaRdaAggNumUnSuccessPresenceNotifications.setDescription('The number of unsuccessful presence notifications since application start time specified by cmmcaStartTime.')
cmmcaRdaIntNumUnSuccessPresenceNotifications = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 3, 1, 8), CounterBasedGauge64()).setUnits('notifications').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaRdaIntNumUnSuccessPresenceNotifications.setStatus('current')
if mibBuilder.loadTexts: cmmcaRdaIntNumUnSuccessPresenceNotifications.setDescription('The number of unsucessful presence notifications over the last interval specified by the corresponding cmmcaServiceIntPeriod in cmmcaServiceTable.')
cmmcaRdaRtNumInactiveClients = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 3, 1, 9), Gauge32()).setUnits('clients').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaRdaRtNumInactiveClients.setStatus('current')
if mibBuilder.loadTexts: cmmcaRdaRtNumInactiveClients.setDescription('The real time number of inactive clients.')
cmmcaBreTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 4), )
if mibBuilder.loadTexts: cmmcaBreTable.setStatus('current')
if mibBuilder.loadTexts: cmmcaBreTable.setDescription('This table describes the Business Rules Engine (BRE) services configured on this Device. The Business Rules Engine in MMCA allows customers to define how the system will behave and then execute scripts or business rules at runtime. In Cisco Unified Expert Advisor application, a very limited Business Rules Engine will be needed. It will be required only to run pre-configured basic agent scripts and contact scripts (queue to a given skill group and then connect the call). The following features are required of the BRE: - Start a script - Select a single AQ for a contact to be queued to, or a multiple AQs for a resource to be made available. - Request Resource - Direct Call Control Requests to Client (CM) - Receive and Handle Call Events (leg terminated, etc.) - Receive and change individual agent availability This table has a sparse dependent relationship with Service Table and hence uses its index.')
cmmcaBreEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 4, 1), ).setIndexNames((0, "CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaServiceIndex"))
if mibBuilder.loadTexts: cmmcaBreEntry.setStatus('current')
if mibBuilder.loadTexts: cmmcaBreEntry.setDescription('Each Entry represents a configured BRE service. The cmmcaServiceTable index indexes this table.')
cmmcaBreAggLoadedScripts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 4, 1, 1), Counter32()).setUnits('scripts').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaBreAggLoadedScripts.setStatus('current')
if mibBuilder.loadTexts: cmmcaBreAggLoadedScripts.setDescription('The total number of scripts loaded by the BRE.')
cmmcaBreAggDistinctScripts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 4, 1, 2), Counter32()).setUnits('scripts').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaBreAggDistinctScripts.setStatus('current')
if mibBuilder.loadTexts: cmmcaBreAggDistinctScripts.setDescription('The total number of distinct scripts loaded by the BRE (not including different versions of the same script).')
cmmcaBreRtActiveScripts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 4, 1, 3), Gauge32()).setUnits('scripts').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaBreRtActiveScripts.setStatus('current')
if mibBuilder.loadTexts: cmmcaBreRtActiveScripts.setDescription('The real time number of loaded BRE scripts that are active.')
cmmcaBreRtCurrentInstances = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 4, 1, 4), Gauge32()).setUnits('instances').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaBreRtCurrentInstances.setStatus('current')
if mibBuilder.loadTexts: cmmcaBreRtCurrentInstances.setDescription('The current number of script instances existing at this moment in time.')
cmmcaBreAggMaxConcurrentInstances = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 4, 1, 5), Counter32()).setUnits('instances').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaBreAggMaxConcurrentInstances.setStatus('current')
if mibBuilder.loadTexts: cmmcaBreAggMaxConcurrentInstances.setDescription('The maximum number of script instances that existed since application start time specified by cmmcaStartTime.')
cmmcaBreIntMaxConcurrentInstances = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 4, 1, 6), Gauge32()).setUnits('instances').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaBreIntMaxConcurrentInstances.setStatus('current')
if mibBuilder.loadTexts: cmmcaBreIntMaxConcurrentInstances.setDescription('The maximum number of script instances that existed over the last interval specified by the corresponding cmmcaServiceIntPeriod in cmmcaServiceTable.')
cmmcaBreAggMaxConcurrentInstancesDt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 4, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaBreAggMaxConcurrentInstancesDt.setStatus('current')
if mibBuilder.loadTexts: cmmcaBreAggMaxConcurrentInstancesDt.setDescription('The timestamp of when the maximum concurrent instances, specified by cmmcaBreAggMaxConcurrentInstances, since application start time (cmmcaStartTime) has occurred.')
cmmcaBreIntMaxConcurrentInstancesDt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 4, 1, 8), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaBreIntMaxConcurrentInstancesDt.setStatus('current')
if mibBuilder.loadTexts: cmmcaBreIntMaxConcurrentInstancesDt.setDescription('The timestamp of when the maximum concurrent instances over the last interval, specified by the corresponding cmmcaServiceIntPeriod in cmmcaServiceTable, has occurred.')
cmmcaBreAggAvgConcurrentInstances = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 4, 1, 9), Gauge32()).setUnits('instances').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaBreAggAvgConcurrentInstances.setStatus('current')
if mibBuilder.loadTexts: cmmcaBreAggAvgConcurrentInstances.setDescription('The average number of instances being worked on by the BRE since application start time specified by cmmcaStartTime.')
cmmcaBreIntAvgConcurrentInstances = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 4, 1, 10), Gauge32()).setUnits('instances').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaBreIntAvgConcurrentInstances.setStatus('current')
if mibBuilder.loadTexts: cmmcaBreIntAvgConcurrentInstances.setDescription('The average number of instances being worked on by the BRE over the last interval specified by the corresponding cmmcaServiceIntPeriod in cmmcaServiceTable.')
cmmcaBreAggTotalInstanceInitiations = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 4, 1, 11), Counter64()).setUnits('initiations').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaBreAggTotalInstanceInitiations.setStatus('current')
if mibBuilder.loadTexts: cmmcaBreAggTotalInstanceInitiations.setDescription('The total number of script instances created since application start time specified by cmmcaStartTime.')
cmmcaBreIntTotalInstanceInitiations = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 4, 1, 12), CounterBasedGauge64()).setUnits('initiations').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaBreIntTotalInstanceInitiations.setStatus('current')
if mibBuilder.loadTexts: cmmcaBreIntTotalInstanceInitiations.setDescription('The total number of script instances created over the last interval specified by the corresponding cmmcaServiceIntPeriod in cmmcaServiceTable.')
cmmcaBreAggTotalContactInstanceInitiations = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 4, 1, 13), Counter64()).setUnits('initiations').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaBreAggTotalContactInstanceInitiations.setStatus('current')
if mibBuilder.loadTexts: cmmcaBreAggTotalContactInstanceInitiations.setDescription('The total number of contact script instances created since application start time specified by cmmcaStartTime.')
cmmcaBreIntTotalContactInstanceInitiations = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 4, 1, 14), CounterBasedGauge64()).setUnits('initiations').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaBreIntTotalContactInstanceInitiations.setStatus('current')
if mibBuilder.loadTexts: cmmcaBreIntTotalContactInstanceInitiations.setDescription('The total number of contact script instances created over the last interval specified by the corresponding cmmcaServiceIntPeriod in cmmcaServiceTable.')
cmmcaBreAggTotalResourceInstanceInitiations = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 4, 1, 15), Counter64()).setUnits('initiations').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaBreAggTotalResourceInstanceInitiations.setStatus('current')
if mibBuilder.loadTexts: cmmcaBreAggTotalResourceInstanceInitiations.setDescription('The total number of resource script instances created since application start time specified by cmmcaStartTime.')
cmmcaBreIntTotalResourceInstanceInitiations = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 4, 1, 16), CounterBasedGauge64()).setUnits('initiations').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaBreIntTotalResourceInstanceInitiations.setStatus('current')
if mibBuilder.loadTexts: cmmcaBreIntTotalResourceInstanceInitiations.setDescription('The total number of resource script instances created over the last interval specified by the corresponding cmmcaServiceIntPeriod in cmmcaServiceTable.')
cmmcaBreAggTotalInstanceTerminations = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 4, 1, 17), Counter64()).setUnits('terminations').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaBreAggTotalInstanceTerminations.setStatus('current')
if mibBuilder.loadTexts: cmmcaBreAggTotalInstanceTerminations.setDescription('The total number of script instances terminated since application start time specified by cmmcaStartTime.')
cmmcaBreIntTotalInstanceTerminations = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 4, 1, 18), CounterBasedGauge64()).setUnits('terminations').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaBreIntTotalInstanceTerminations.setStatus('current')
if mibBuilder.loadTexts: cmmcaBreIntTotalInstanceTerminations.setDescription('The total number of script instances terminated over the last interval specified by the corresponding cmmcaServiceIntPeriod in cmmcaServiceTable.')
cmmcaBreAggTotalContactInstanceTerminations = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 4, 1, 19), Counter64()).setUnits('terminations').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaBreAggTotalContactInstanceTerminations.setStatus('current')
if mibBuilder.loadTexts: cmmcaBreAggTotalContactInstanceTerminations.setDescription('The total number of contact script instances terminated since application start time specified by cmmcaStartTime.')
cmmcaBreIntTotalContactInstanceTerminations = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 4, 1, 20), CounterBasedGauge64()).setUnits('terminations').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaBreIntTotalContactInstanceTerminations.setStatus('current')
if mibBuilder.loadTexts: cmmcaBreIntTotalContactInstanceTerminations.setDescription('The total number of contact script instances terminated over the last interval specified by the corresponding cmmcaServiceIntPeriod in cmmcaServiceTable.')
cmmcaBreAggTotalResourceInstanceTerminations = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 4, 1, 21), Counter64()).setUnits('terminations').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaBreAggTotalResourceInstanceTerminations.setStatus('current')
if mibBuilder.loadTexts: cmmcaBreAggTotalResourceInstanceTerminations.setDescription('The total number of resource script instances terminated since application start time specified by cmmcaStartTime.')
cmmcaBreIntTotalResourceInstanceTerminations = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 4, 1, 22), CounterBasedGauge64()).setUnits('terminations').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaBreIntTotalResourceInstanceTerminations.setStatus('current')
if mibBuilder.loadTexts: cmmcaBreIntTotalResourceInstanceTerminations.setDescription('The total number of resource script instances terminated over the last interval specified by the corresponding cmmcaServiceIntPeriod in cmmcaServiceTable.')
cmmcaBreAggTotalAbnormalEndings = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 4, 1, 23), Counter64()).setUnits('endings').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaBreAggTotalAbnormalEndings.setStatus('current')
if mibBuilder.loadTexts: cmmcaBreAggTotalAbnormalEndings.setDescription('The total number of script instances that ended abnormally since application start time specified by cmmcaStartTime.')
cmmcaBreIntTotalAbnormalEndings = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 4, 1, 24), CounterBasedGauge64()).setUnits('endings').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaBreIntTotalAbnormalEndings.setStatus('current')
if mibBuilder.loadTexts: cmmcaBreIntTotalAbnormalEndings.setDescription('The total number of script instances that ended abnormally over the last interval specified by the corresponding cmmcaServiceIntPeriod in cmmcaServiceTable.')
cmmcaBreAggTotalAbnormalContactEndings = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 4, 1, 25), Counter64()).setUnits('endings').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaBreAggTotalAbnormalContactEndings.setStatus('current')
if mibBuilder.loadTexts: cmmcaBreAggTotalAbnormalContactEndings.setDescription('The total number of contact script instances that ended abnormally since application start time specified by cmmcaStartTime.')
cmmcaBreIntTotalAbnormalContactEndings = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 4, 1, 26), CounterBasedGauge64()).setUnits('endings').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaBreIntTotalAbnormalContactEndings.setStatus('current')
if mibBuilder.loadTexts: cmmcaBreIntTotalAbnormalContactEndings.setDescription('The total number of contact script instances that ended abnormally over the last interval specified by the corresponding cmmcaServiceIntPeriod in cmmcaServiceTable.')
cmmcaBreAggTotalAbnormalResourceEndings = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 4, 1, 27), Counter64()).setUnits('endings').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaBreAggTotalAbnormalResourceEndings.setStatus('current')
if mibBuilder.loadTexts: cmmcaBreAggTotalAbnormalResourceEndings.setDescription('The total number of resource script instances that ended abnormally since application start time specified by cmmcaStartTime.')
cmmcaBreIntTotalAbnormalResourceEndings = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 4, 1, 28), CounterBasedGauge64()).setUnits('endings').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaBreIntTotalAbnormalResourceEndings.setStatus('current')
if mibBuilder.loadTexts: cmmcaBreIntTotalAbnormalResourceEndings.setDescription('The total number of resource script instances that ended abnormally over the last interval specified by the corresponding cmmcaServiceIntPeriod in cmmcaServiceTable.')
cmmcaWaTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 5), )
if mibBuilder.loadTexts: cmmcaWaTable.setStatus('current')
if mibBuilder.loadTexts: cmmcaWaTable.setDescription('This table lists the Work Assigner(WA) Service instances configured on this Device. The Work Assigner is responsible for matching Contacts that need Resources with Resources that need Contacts. The scope of a single work assigner defines a Routing Domain. A Routing Domain is a set of Contacts and a set of Resources that can be assigned to each other. This means that the size of a routing domain is constrained by how scalable a Work Assigner can be. Because of this, the Work Assigner tries to be as streamlined as possible and delegate all logic that deals with the scope of an individual resource or individual contact to the RM or the CM. Work Assigner is not the only interface that is used to communicate between the RM and the CM, it merely provides the initial assignment between the two , much in the same manner as a SIP connects two endpoints, and then gets out of the call. The Work Assigner also includes the logic to execute advanced routing features (such as resume routing, spatial routing, etc). This table has a sparse dependent relationship with cmmcaServiceTable and hence is indexed by cmmcaServiceIndex.')
cmmcaWaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 5, 1), ).setIndexNames((0, "CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaServiceIndex"))
if mibBuilder.loadTexts: cmmcaWaEntry.setStatus('current')
if mibBuilder.loadTexts: cmmcaWaEntry.setDescription('Each Entry represents a configured WA service. The index in cmmcaServiceTable is used to index this table too.')
cmmcaWaRtAssignmentQueCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 5, 1, 1), Gauge32()).setUnits('none').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaWaRtAssignmentQueCount.setStatus('current')
if mibBuilder.loadTexts: cmmcaWaRtAssignmentQueCount.setDescription('The real time number of Assignment Queues configured.')
cmmcaWaRtAttributeDefCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 5, 1, 2), Gauge32()).setUnits('none').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaWaRtAttributeDefCount.setStatus('current')
if mibBuilder.loadTexts: cmmcaWaRtAttributeDefCount.setDescription('The real time number of Attribute definitions configured.')
cmmcaWaRtSelectionStrategyCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 5, 1, 3), Gauge32()).setUnits('none').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaWaRtSelectionStrategyCount.setStatus('current')
if mibBuilder.loadTexts: cmmcaWaRtSelectionStrategyCount.setDescription('The real time number of selection strategies configured.')
cmmcaWaRtSkillCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 5, 1, 4), Gauge32()).setUnits('none').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaWaRtSkillCount.setStatus('current')
if mibBuilder.loadTexts: cmmcaWaRtSkillCount.setDescription('The real time number of skills configured.')
cmmcaWaAggTotalConfigErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 5, 1, 5), Counter64()).setUnits('none').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaWaAggTotalConfigErrors.setStatus('current')
if mibBuilder.loadTexts: cmmcaWaAggTotalConfigErrors.setDescription('The real time number of errors processing config messages.')
cmmcaWaAggCancelResourceRequestReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 5, 1, 6), Counter64()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaWaAggCancelResourceRequestReceived.setStatus('current')
if mibBuilder.loadTexts: cmmcaWaAggCancelResourceRequestReceived.setDescription('The total number of CancelResourceRequest messages received since application start time specified by cmmcaStartTime.')
cmmcaWaAggResourceRequestReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 5, 1, 7), Counter64()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaWaAggResourceRequestReceived.setStatus('current')
if mibBuilder.loadTexts: cmmcaWaAggResourceRequestReceived.setDescription('The total number of ResourceRequest messages received since application start time specified by cmmcaStartTime.')
cmmcaWaAggResourceResponseSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 5, 1, 8), Counter64()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaWaAggResourceResponseSent.setStatus('current')
if mibBuilder.loadTexts: cmmcaWaAggResourceResponseSent.setDescription('The total number of ResourceResponse messages sent since application start time specified by cmmcaStartTime.')
cmmcaWaAggCancelWorkRequestReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 5, 1, 9), Counter64()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaWaAggCancelWorkRequestReceived.setStatus('current')
if mibBuilder.loadTexts: cmmcaWaAggCancelWorkRequestReceived.setDescription('The total number of CancelWorkRequest messages received since application start time specified by cmmcaStartTime.')
cmmcaWaAggOfferTaskAcceptedSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 5, 1, 10), Counter64()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaWaAggOfferTaskAcceptedSent.setStatus('current')
if mibBuilder.loadTexts: cmmcaWaAggOfferTaskAcceptedSent.setDescription('The total mumber of OfferTaskAccept messages sent since application start time specified by cmmcaStartTime.')
cmmcaWaAggOfferTaskCancelledSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 5, 1, 11), Counter64()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaWaAggOfferTaskCancelledSent.setStatus('current')
if mibBuilder.loadTexts: cmmcaWaAggOfferTaskCancelledSent.setDescription('The total number of OfferTaskCancelled messages sent since application start time specified by cmmcaStartTime.')
cmmcaWaAggOfferTaskResponseReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 5, 1, 12), Counter64()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaWaAggOfferTaskResponseReceived.setStatus('current')
if mibBuilder.loadTexts: cmmcaWaAggOfferTaskResponseReceived.setDescription('The total number of OfferTaskResponse messages received since application start time specified by cmmcaStartTime.')
cmmcaWaAggOfferTaskSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 5, 1, 13), Counter64()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaWaAggOfferTaskSent.setStatus('current')
if mibBuilder.loadTexts: cmmcaWaAggOfferTaskSent.setDescription('The total number of OfferTask messages sent since application start time specified by cmmcaStartTime.')
cmmcaWaAggResyncResourceResponseAckSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 5, 1, 14), Counter64()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaWaAggResyncResourceResponseAckSent.setStatus('current')
if mibBuilder.loadTexts: cmmcaWaAggResyncResourceResponseAckSent.setDescription('The total number of ResyncResourceResponseAcknowledgement messages sent since application start time specified by cmmcaStartTime.')
cmmcaWaAggResyncResourceResponseReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 5, 1, 15), Counter64()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaWaAggResyncResourceResponseReceived.setStatus('current')
if mibBuilder.loadTexts: cmmcaWaAggResyncResourceResponseReceived.setDescription('The total number of ResyncResourceResponse received since application start time specified by cmmcaStartTime.')
cmmcaWaAggResyncResourceSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 5, 1, 16), Counter64()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaWaAggResyncResourceSent.setStatus('current')
if mibBuilder.loadTexts: cmmcaWaAggResyncResourceSent.setDescription('The total number of ResyncResource messages sent since application start time specified by cmmcaStartTime.')
cmmcaWaAggWorkRequestReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 5, 1, 17), Counter64()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaWaAggWorkRequestReceived.setStatus('current')
if mibBuilder.loadTexts: cmmcaWaAggWorkRequestReceived.setDescription('The total number of WorkRequest messages Received since application start time specified by cmmcaStartTime.')
cmmcaWaAggQueueEventSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 5, 1, 18), Counter64()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaWaAggQueueEventSent.setStatus('current')
if mibBuilder.loadTexts: cmmcaWaAggQueueEventSent.setDescription('The total number of QueueEvent messages sent since application start time specified by cmmcaStartTime.')
cmmcaWaAggWorkRequestCanceledSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 5, 1, 19), Counter64()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaWaAggWorkRequestCanceledSent.setStatus('current')
if mibBuilder.loadTexts: cmmcaWaAggWorkRequestCanceledSent.setDescription('The total number of WorkRequestCanceled messages sent since application start time specified by cmmcaStartTime.')
cmmcaWaAggWRIFailureResponseSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 5, 1, 20), Counter64()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaWaAggWRIFailureResponseSent.setStatus('current')
if mibBuilder.loadTexts: cmmcaWaAggWRIFailureResponseSent.setDescription('The total number of WRIFailureResponse messages sent since application start time specified by cmmcaStartTime.')
cmmcaWaAggRRIFailureResponseSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 5, 1, 21), Counter64()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaWaAggRRIFailureResponseSent.setStatus('current')
if mibBuilder.loadTexts: cmmcaWaAggRRIFailureResponseSent.setDescription('The total number of RRIFailureResponseSent messages sent since application start time specified by cmmcaStartTime.')
cmmcaWaAggResourceResponseCanceledSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 5, 1, 22), Counter64()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaWaAggResourceResponseCanceledSent.setStatus('current')
if mibBuilder.loadTexts: cmmcaWaAggResourceResponseCanceledSent.setDescription('The total number of ResourceResponseCanceled messages sent since boot time.')
cmmcaWaAggCancelQueueEventSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 5, 1, 23), Counter64()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaWaAggCancelQueueEventSent.setStatus('current')
if mibBuilder.loadTexts: cmmcaWaAggCancelQueueEventSent.setDescription('The total number of CancelQueueEvent messages sent since application start time specified by cmmcaStartTime.')
cmmcaWaAggMessageSentError = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 5, 1, 24), Counter64()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaWaAggMessageSentError.setStatus('current')
if mibBuilder.loadTexts: cmmcaWaAggMessageSentError.setDescription('The total number of times messages could not be sent since application start time specified by cmmcaStartTime.')
cmmcaWaRtResourceCriteriaCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 5, 1, 25), Gauge32()).setUnits('criteria').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaWaRtResourceCriteriaCount.setStatus('current')
if mibBuilder.loadTexts: cmmcaWaRtResourceCriteriaCount.setDescription('The real time number of resource criteria configured.')
cmmcaWaRtSelectionStrategyAttrCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 5, 1, 26), Gauge32()).setUnits('attributes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaWaRtSelectionStrategyAttrCount.setStatus('current')
if mibBuilder.loadTexts: cmmcaWaRtSelectionStrategyAttrCount.setDescription('The real time number of selection strategy attributes configured.')
cmmcaWaRtAttributeCriteriaCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 5, 1, 27), Gauge32()).setUnits('criteria').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaWaRtAttributeCriteriaCount.setStatus('current')
if mibBuilder.loadTexts: cmmcaWaRtAttributeCriteriaCount.setDescription('The real time number of attribute criteria configured.')
cmmcaWaRtResourceCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 5, 1, 28), Gauge32()).setUnits('resources').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaWaRtResourceCount.setStatus('current')
if mibBuilder.loadTexts: cmmcaWaRtResourceCount.setDescription('The real time number of resources configured.')
cmmcaWaRtAttributeValueCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 5, 1, 29), Gauge32()).setUnits('values').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaWaRtAttributeValueCount.setStatus('current')
if mibBuilder.loadTexts: cmmcaWaRtAttributeValueCount.setDescription('The real time number of attribute values configured.')
cmmcaWaRtSkillCompetencyCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 5, 1, 30), Gauge32()).setUnits('competencies').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaWaRtSkillCompetencyCount.setStatus('current')
if mibBuilder.loadTexts: cmmcaWaRtSkillCompetencyCount.setDescription('The real time number of skill competencies configured.')
cmmcaWaRtResourceMemberCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 5, 1, 31), Gauge32()).setUnits('members').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaWaRtResourceMemberCount.setStatus('current')
if mibBuilder.loadTexts: cmmcaWaRtResourceMemberCount.setDescription('The real time number of resource members configured.')
cmmcaWaRtTotalResourceCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 5, 1, 32), Gauge32()).setUnits('resources').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaWaRtTotalResourceCount.setStatus('current')
if mibBuilder.loadTexts: cmmcaWaRtTotalResourceCount.setDescription('The real time number of known total resources.')
cmmcaWaRtTotalContactCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 5, 1, 33), Gauge32()).setUnits('contacts').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaWaRtTotalContactCount.setStatus('current')
if mibBuilder.loadTexts: cmmcaWaRtTotalContactCount.setDescription('The real time number of total known total contacts.')
cmmcaWaRtTotalResourceManagerCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 5, 1, 34), Gauge32()).setUnits('services').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaWaRtTotalResourceManagerCount.setStatus('current')
if mibBuilder.loadTexts: cmmcaWaRtTotalResourceManagerCount.setDescription('The real time number of known resource manager services.')
cmmcaWaRtTotalContactManagerCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 5, 1, 35), Gauge32()).setUnits('services').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaWaRtTotalContactManagerCount.setStatus('current')
if mibBuilder.loadTexts: cmmcaWaRtTotalContactManagerCount.setDescription('The real time number of known contact manager services.')
cmmcaMpaTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 6), )
if mibBuilder.loadTexts: cmmcaMpaTable.setStatus('current')
if mibBuilder.loadTexts: cmmcaMpaTable.setDescription('This table describes MPA services configured on this Device. The Media Platform Adapter is a media platform for SIP calls: - SIP Back to Back User Agent (B2BUA), providing basic 3rd party call control and endpoint functions to its clients (RM, CM, RDA). - Used by both RM and CM for handling calls. A single Media Platform Interface(MPI) can support multiple clients (such as a RM, a CM and a RDA), SIP based MPIs will always be co-located with its clients. This table has a sparse dependent relationship with cmmcaServiceTable and hence uses its index.')
cmmcaMpaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 6, 1), ).setIndexNames((0, "CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaServiceIndex"))
if mibBuilder.loadTexts: cmmcaMpaEntry.setStatus('current')
if mibBuilder.loadTexts: cmmcaMpaEntry.setDescription('Each Entry represents a configured MPA service. Each entry is indexed by the index in cmmcaServiceTable.')
cmmcaMpaAggNewCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 6, 1, 1), Counter64()).setUnits('calls').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaMpaAggNewCalls.setStatus('current')
if mibBuilder.loadTexts: cmmcaMpaAggNewCalls.setDescription('The total number of new calls requests received since application start time specified by cmmcaStartTime.')
cmmcaMpaAggConnectsRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 6, 1, 2), Counter64()).setUnits('connects').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaMpaAggConnectsRcv.setStatus('current')
if mibBuilder.loadTexts: cmmcaMpaAggConnectsRcv.setDescription('The total number of connect attempts since application start time specified by cmmcaStartTime.')
cmmcaMpaAggAvgLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 6, 1, 3), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaMpaAggAvgLatency.setStatus('current')
if mibBuilder.loadTexts: cmmcaMpaAggAvgLatency.setDescription('The average time in milliseconds required to complete a connection.')
cmmcaMpaAggFailedInvites = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 6, 1, 4), Counter64()).setUnits('invitations').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaMpaAggFailedInvites.setStatus('current')
if mibBuilder.loadTexts: cmmcaMpaAggFailedInvites.setDescription('The total number of failed invitation attempts since application start time specified by cmmcaStartTime.')
cmmcaMpaAggFailedReinvites = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 6, 1, 5), Counter64()).setUnits('invitations').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaMpaAggFailedReinvites.setStatus('current')
if mibBuilder.loadTexts: cmmcaMpaAggFailedReinvites.setDescription('The total number of failed re-invitation attempts since application start time specified by cmmcaStartTime.')
cmmcaMpaAggTotalCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 6, 1, 6), Counter64()).setUnits('calls').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaMpaAggTotalCalls.setStatus('current')
if mibBuilder.loadTexts: cmmcaMpaAggTotalCalls.setDescription('The current number of calls into and originating from the MPA.')
cmmcaMpaRtIncomingCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 6, 1, 7), Gauge32()).setUnits('calls').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaMpaRtIncomingCalls.setStatus('current')
if mibBuilder.loadTexts: cmmcaMpaRtIncomingCalls.setDescription('The current number of Incoming calls.')
cmmcaMpaRtOutgoingCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 6, 1, 8), Gauge32()).setUnits('calls').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaMpaRtOutgoingCalls.setStatus('current')
if mibBuilder.loadTexts: cmmcaMpaRtOutgoingCalls.setDescription('The current number of calls originating from the MPA.')
cmmcaMpaRtActiveClientSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 6, 1, 9), Gauge32()).setUnits('sessions').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaMpaRtActiveClientSessions.setStatus('current')
if mibBuilder.loadTexts: cmmcaMpaRtActiveClientSessions.setDescription('The number of currently registered Client Sessions.')
cmmcaMpaAggTotalClientsRegistered = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 6, 1, 10), Counter64()).setUnits('sessions').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaMpaAggTotalClientsRegistered.setStatus('current')
if mibBuilder.loadTexts: cmmcaMpaAggTotalClientsRegistered.setDescription('The total number of client sessions opened(Including disconnected clients), since application start time specified by cmmcaStartTime.')
cmmcaMpaAggInstantMessagesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 6, 1, 11), Counter64()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaMpaAggInstantMessagesSent.setStatus('current')
if mibBuilder.loadTexts: cmmcaMpaAggInstantMessagesSent.setDescription('The total number of instant messages sent since application start time specified by cmmcaStartTime.')
cmmcaMpaAggInstantMessagesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 6, 1, 12), Counter64()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaMpaAggInstantMessagesReceived.setStatus('current')
if mibBuilder.loadTexts: cmmcaMpaAggInstantMessagesReceived.setDescription('The total number of instant messages received since application start time specified by cmmcaStartTime.')
cmmcaMpaAggPresenceUpdatesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 6, 1, 13), Counter64()).setUnits('updates').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaMpaAggPresenceUpdatesReceived.setStatus('current')
if mibBuilder.loadTexts: cmmcaMpaAggPresenceUpdatesReceived.setDescription('The total number of presence documents received since application start time specified by cmmcaStartTime.')
cmmcaMpaAggPresenceUpdatesBytesRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 6, 1, 14), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaMpaAggPresenceUpdatesBytesRcv.setStatus('current')
if mibBuilder.loadTexts: cmmcaMpaAggPresenceUpdatesBytesRcv.setDescription('Total number of bytes received in presence updates, since application start time specified by cmmcaStartTime.')
cmmcaMpaRtActiveRegisteredSipAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 6, 1, 15), Gauge32()).setUnits('addresses').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaMpaRtActiveRegisteredSipAddresses.setStatus('current')
if mibBuilder.loadTexts: cmmcaMpaRtActiveRegisteredSipAddresses.setDescription('The real time number of SIP current registrations to SIP Registrar.')
cmmcaMpaRtActiveSipControlAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 6, 1, 16), Gauge32()).setUnits('addresses').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaMpaRtActiveSipControlAddresses.setStatus('current')
if mibBuilder.loadTexts: cmmcaMpaRtActiveSipControlAddresses.setDescription('The real time number of SIP addresses currently registered.')
cmmcaMpaRtActiveIMAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 6, 1, 17), Gauge32()).setUnits('addresses').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaMpaRtActiveIMAddresses.setStatus('current')
if mibBuilder.loadTexts: cmmcaMpaRtActiveIMAddresses.setDescription('The real time number of IM addresses currently registered.')
cmmcaMpaRtActiveMonitoredPresenceAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 6, 1, 18), Gauge32()).setUnits('addresses').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaMpaRtActiveMonitoredPresenceAddresses.setStatus('current')
if mibBuilder.loadTexts: cmmcaMpaRtActiveMonitoredPresenceAddresses.setDescription('The real time number active presence addresses currently being monitored.')
cmmcaMpaAggTotalRegisteredSipAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 6, 1, 19), Counter64()).setUnits('addresses').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaMpaAggTotalRegisteredSipAddresses.setStatus('current')
if mibBuilder.loadTexts: cmmcaMpaAggTotalRegisteredSipAddresses.setDescription('The total number of SIP Registrations to SIP Registrar (Including deregistered ones) since application start time specified by cmmcaStartTime.')
cmmcaMpaAggTotalSipControlAddressesRegistered = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 6, 1, 20), Counter64()).setUnits('addresses').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaMpaAggTotalSipControlAddressesRegistered.setStatus('current')
if mibBuilder.loadTexts: cmmcaMpaAggTotalSipControlAddressesRegistered.setDescription('The total number of SIP addresses registered(Including deregistered ones) since application start time specified by cmmcaStartTime.')
cmmcaMpaAggTotalIMAddressesRegistered = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 6, 1, 21), Counter64()).setUnits('addresses').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaMpaAggTotalIMAddressesRegistered.setStatus('current')
if mibBuilder.loadTexts: cmmcaMpaAggTotalIMAddressesRegistered.setDescription('The total number of IM addresses registered(Including deregistered ones) since application start time specified by cmmcaStartTime.')
cmmcaMpaAggTotalMonitoredPresenceAddressesRegistered = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 6, 1, 22), Counter64()).setUnits('addresses').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaMpaAggTotalMonitoredPresenceAddressesRegistered.setStatus('current')
if mibBuilder.loadTexts: cmmcaMpaAggTotalMonitoredPresenceAddressesRegistered.setDescription('The total number of Presentities registered with presence server(Including deregistered ones) since application start time specified by cmmcaStartTime.')
cmmcaMpaRtActiveInteractions = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 6, 1, 23), Gauge32()).setUnits('interactions').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaMpaRtActiveInteractions.setStatus('current')
if mibBuilder.loadTexts: cmmcaMpaRtActiveInteractions.setDescription('The real time number of Interactions that currently exist.')
cmmcaMpaRtActivePublishAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 6, 1, 24), Gauge32()).setUnits('addresses').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaMpaRtActivePublishAddresses.setStatus('current')
if mibBuilder.loadTexts: cmmcaMpaRtActivePublishAddresses.setDescription('The real time number of Publishers currently registered with presence server.')
cmmcaMpaRtTotalPublishAddressesRegistered = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 6, 1, 25), Gauge32()).setUnits('addresses').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaMpaRtTotalPublishAddressesRegistered.setStatus('current')
if mibBuilder.loadTexts: cmmcaMpaRtTotalPublishAddressesRegistered.setDescription('The real time number of Publishers registered with presence server(Including deregistered ones).')
cmmcaRaTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 7), )
if mibBuilder.loadTexts: cmmcaRaTable.setStatus('current')
if mibBuilder.loadTexts: cmmcaRaTable.setDescription('This table describes Reporting Adapter (RA) services configured on this Device. Reporting adapters listen to event stream that are produced by runtime components. They then take those events, convert them as appropriate (for example, converting them to a particular version of a schema or applying a security policy of what data can be sent to the reporting database) and then send a new message to the Reporting Subsystem service. This message is sent using durability and persistence to ensure that the message will get to the Reporting Subsystem (RS). Reporting Adapters run on the same Device as the runtime components that they are monitoring. This is because the events that are being produced are delivered on a best-effort basis, and being on the same Device (and in the same JVM) ensures that the adapter will receive the event. This table has a sparse dependent relationship with cmmcaServiceTable and hence uses its index.')
cmmcaRaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 7, 1), ).setIndexNames((0, "CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaServiceIndex"))
if mibBuilder.loadTexts: cmmcaRaEntry.setStatus('current')
if mibBuilder.loadTexts: cmmcaRaEntry.setDescription('Each Entry represents a configured RA service. Each entry is indexed by the index in cmmcaServiceTable.')
cmmcaRaAggMsgReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 7, 1, 1), Counter64()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaRaAggMsgReceived.setStatus('current')
if mibBuilder.loadTexts: cmmcaRaAggMsgReceived.setDescription('The total number of messages received since application start time specified by cmmcaStartTime.')
cmmcaRaAggMsgSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 7, 1, 2), Counter64()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaRaAggMsgSent.setStatus('current')
if mibBuilder.loadTexts: cmmcaRaAggMsgSent.setDescription('The total number of messages dispatched since application start time specified by cmmcaStartTime.')
cmmcaRaAggContactDetailMesgReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 7, 1, 3), Counter64()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaRaAggContactDetailMesgReceived.setStatus('current')
if mibBuilder.loadTexts: cmmcaRaAggContactDetailMesgReceived.setDescription('The total number of contact detail messages received since application start time specified by cmmcaStartTime.')
cmmcaRaAggContactDetailMesgDispatched = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 7, 1, 4), Counter64()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaRaAggContactDetailMesgDispatched.setStatus('current')
if mibBuilder.loadTexts: cmmcaRaAggContactDetailMesgDispatched.setDescription('The total number of contact detail messages dispatched since application start time specified by cmmcaStartTime.')
cmmcaRaAggContactDetailAttribMsgDispatched = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 7, 1, 5), Counter64()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaRaAggContactDetailAttribMsgDispatched.setStatus('current')
if mibBuilder.loadTexts: cmmcaRaAggContactDetailAttribMsgDispatched.setDescription('The total number of contact detail attributes messages dispatched since application start time specified by cmmcaStartTime.')
cmmcaRaAggContactSegDetailMsgReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 7, 1, 6), Counter64()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaRaAggContactSegDetailMsgReceived.setStatus('current')
if mibBuilder.loadTexts: cmmcaRaAggContactSegDetailMsgReceived.setDescription('The total number of contact segment detail messages received since application start time specified by cmmcaStartTime.')
cmmcaRaAggContactSegDetailMesgDispatched = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 7, 1, 7), Counter64()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaRaAggContactSegDetailMesgDispatched.setStatus('current')
if mibBuilder.loadTexts: cmmcaRaAggContactSegDetailMesgDispatched.setDescription('The total number of contact segment detail messages dispatched since application start time specified by cmmcaStartTime.')
cmmcaRaAggContactSegMediaDetailMsgDispatched = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 7, 1, 8), Counter64()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaRaAggContactSegMediaDetailMsgDispatched.setStatus('current')
if mibBuilder.loadTexts: cmmcaRaAggContactSegMediaDetailMsgDispatched.setDescription('The total number of contact segment media detail messages dispatched since application start time specified by cmmcaStartTime.')
cmmcaRaAggResourceTaskDetailMsgReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 7, 1, 9), Counter64()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaRaAggResourceTaskDetailMsgReceived.setStatus('current')
if mibBuilder.loadTexts: cmmcaRaAggResourceTaskDetailMsgReceived.setDescription('The total number of resource task detail messages received since application start time specified by cmmcaStartTime.')
cmmcaRaAggResourceTaskDetailMsgDispatched = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 7, 1, 10), Counter64()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaRaAggResourceTaskDetailMsgDispatched.setStatus('current')
if mibBuilder.loadTexts: cmmcaRaAggResourceTaskDetailMsgDispatched.setDescription('The total number of resource task detail messages dispatched since application start time specified by cmmcaStartTime.')
cmmcaRaAggTaskStateChangeMsgReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 7, 1, 11), Counter64()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaRaAggTaskStateChangeMsgReceived.setStatus('current')
if mibBuilder.loadTexts: cmmcaRaAggTaskStateChangeMsgReceived.setDescription('The total number of task state change messages received since application start time specified by cmmcaStartTime.')
cmmcaRaAggResourceStateChngMesgReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 7, 1, 12), Counter64()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaRaAggResourceStateChngMesgReceived.setStatus('current')
if mibBuilder.loadTexts: cmmcaRaAggResourceStateChngMesgReceived.setDescription('The total number of resource state change messages received since application start time specified by cmmcaStartTime.')
cmmcaRaAggResourceStateChngMsgDispatched = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 7, 1, 13), Counter64()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaRaAggResourceStateChngMsgDispatched.setStatus('current')
if mibBuilder.loadTexts: cmmcaRaAggResourceStateChngMsgDispatched.setDescription('The total number of resource state change messages dispatched since application start time specified by cmmcaStartTime.')
cmmcaRaAggVersionResponseRecieved = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 7, 1, 14), Counter64()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaRaAggVersionResponseRecieved.setStatus('current')
if mibBuilder.loadTexts: cmmcaRaAggVersionResponseRecieved.setDescription('The total number of version response messages received since application start time specified by cmmcaStartTime.')
cmmcaRaAggVersionRequestDispatched = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 7, 1, 15), Counter64()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaRaAggVersionRequestDispatched.setStatus('current')
if mibBuilder.loadTexts: cmmcaRaAggVersionRequestDispatched.setDescription('The total number of version request messages dispatched since application start time specified by cmmcaStartTime.')
cmmcaRaAggNodeSyncDispatched = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 7, 1, 16), Counter64()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaRaAggNodeSyncDispatched.setStatus('current')
if mibBuilder.loadTexts: cmmcaRaAggNodeSyncDispatched.setDescription('The total number of node synchronization messages dispatched since application start time specified by cmmcaStartTime.')
cmmcaRsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 8), )
if mibBuilder.loadTexts: cmmcaRsTable.setStatus('current')
if mibBuilder.loadTexts: cmmcaRsTable.setDescription('This table describes Reporting Subsystem(RS) services configured on this Device. Reporting Subsystem (RS) receives reporting messages from Reporting Adapter(s) (RA(s)) and writes historical data into the database. Configuration data will be replicated from run-time Devices to Reporting Database. End users are provided with a set of report templates to generate historical reports which consist of both historical data and configuration data. This table has a sparse dependent relationship with cmmcaServiceTable and hence uses its index.')
cmmcaRsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 8, 1), ).setIndexNames((0, "CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaServiceIndex"))
if mibBuilder.loadTexts: cmmcaRsEntry.setStatus('current')
if mibBuilder.loadTexts: cmmcaRsEntry.setDescription('Each Entry represents a configured RS service. Each entry is indexed by the index of cmmcaServiceTable.')
cmmcaRsAggTotalContactDetailRecords = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 8, 1, 1), Counter64()).setUnits('records').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaRsAggTotalContactDetailRecords.setStatus('current')
if mibBuilder.loadTexts: cmmcaRsAggTotalContactDetailRecords.setDescription('Total number of Contact Detail Records written to the database since since application start time specified by cmmcaStartTime. For each ContactDetail Record written this metric will be incremented by one.')
cmmcaRsAggTotalContactDetailAttributeRecords = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 8, 1, 2), Counter64()).setUnits('records').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaRsAggTotalContactDetailAttributeRecords.setStatus('current')
if mibBuilder.loadTexts: cmmcaRsAggTotalContactDetailAttributeRecords.setDescription('Total number of ContactDetailAttribute Records written to the database since application start time specified by cmmcaStartTime. For each ContactDetailAttribute record written this metric will be incremented by one.')
cmmcaRsAggTotalContactSegmentDetailRecords = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 8, 1, 3), Counter64()).setUnits('records').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaRsAggTotalContactSegmentDetailRecords.setStatus('current')
if mibBuilder.loadTexts: cmmcaRsAggTotalContactSegmentDetailRecords.setDescription('Total number of Contact Segment Detail Records written to the database since application start time specified by cmmcaStartTime. For each ContactSegmentDetail Record written this metric will be incremented by one.')
cmmcaRsAggTotalResourceTaskDetailRecords = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 8, 1, 4), Counter64()).setUnits('records').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaRsAggTotalResourceTaskDetailRecords.setStatus('current')
if mibBuilder.loadTexts: cmmcaRsAggTotalResourceTaskDetailRecords.setDescription('Total number of ResourceTaskDetail Records written to the database since application start time specified by cmmcaStartTime. For each ResourceTaskDetail Record written this metric will be incremented by one.')
cmmcaRsAggTotalResourceEventDetailRecords = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 8, 1, 5), Counter64()).setUnits('records').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaRsAggTotalResourceEventDetailRecords.setStatus('current')
if mibBuilder.loadTexts: cmmcaRsAggTotalResourceEventDetailRecords.setDescription('Total number of ResourceEventDetail Records written to the database since application start time specified by cmmcaStartTime. For each ResourceEventDetail Record written this metric will be incremented by one.')
cmmcaRsAggTotalAssignmentQueDetailRecords = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 8, 1, 6), Counter64()).setUnits('records').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaRsAggTotalAssignmentQueDetailRecords.setStatus('current')
if mibBuilder.loadTexts: cmmcaRsAggTotalAssignmentQueDetailRecords.setDescription('Total number of AssignmentQueueDetail Records written to the database since application start time specified by cmmcaStartTime. For each AssignmentQueueDetail Record written this metric will be incremented by one.')
cmmcaRsAggTotalAssignmentQueAttribRecords = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 8, 1, 7), Counter64()).setUnits('records').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaRsAggTotalAssignmentQueAttribRecords.setStatus('current')
if mibBuilder.loadTexts: cmmcaRsAggTotalAssignmentQueAttribRecords.setDescription('Total number of AssignmentQueueAttribute Records written to the database since application start time specified by cmmcaStartTime. For each AssignmentQueueAttribute written received, this metric will be incremented by one.')
cmmcaRsAggTotalContactSegmentMediaDetailRecords = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 8, 1, 8), Counter64()).setUnits('records').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaRsAggTotalContactSegmentMediaDetailRecords.setStatus('current')
if mibBuilder.loadTexts: cmmcaRsAggTotalContactSegmentMediaDetailRecords.setDescription('Total number of Contact Segment Media Detail Records written to the database since application start time specified by cmmcaStartTime. For each ContactSegment media Detail Record written this metric will be incremented by one.')
cmmcaRsAggTotalDBWrites = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 8, 1, 9), Counter64()).setUnits('writes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaRsAggTotalDBWrites.setStatus('current')
if mibBuilder.loadTexts: cmmcaRsAggTotalDBWrites.setDescription('Total number of writes to the database by the Reporting Server since application start time specified by cmmcaStartTime. For each write to the database by the Reporting Server, this metric will be increased by one.')
cmmcaRsIntContactDetailRecords = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 8, 1, 10), Gauge32()).setUnits('records').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaRsIntContactDetailRecords.setStatus('current')
if mibBuilder.loadTexts: cmmcaRsIntContactDetailRecords.setDescription('Total number of ContactDetailRecords written to the database by the Reporting Server during the last interval specified by the corresponding cmmcaServiceIntPeriod in cmmcaServiceTable.')
cmmcaRsIntContactDetailAttribRecords = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 8, 1, 11), Gauge32()).setUnits('records').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaRsIntContactDetailAttribRecords.setStatus('current')
if mibBuilder.loadTexts: cmmcaRsIntContactDetailAttribRecords.setDescription('Total number of ContactDetailAttribute Records written to the database by the Reporting Server during the last interval specified by the corresponding cmmcaServiceIntPeriod in cmmcaServiceTable.')
cmmcaRsIntContactSegmentDetailRecords = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 8, 1, 12), Gauge32()).setUnits('records').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaRsIntContactSegmentDetailRecords.setStatus('current')
if mibBuilder.loadTexts: cmmcaRsIntContactSegmentDetailRecords.setDescription('Total number of ContactSegmentDetail Records written to the database by the Reporting Server during the last interval specified by the corresponding cmmcaServiceIntPeriod in cmmcaServiceTable.')
cmmcaRsIntResourceTaskDetailRecords = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 8, 1, 13), Gauge32()).setUnits('records').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaRsIntResourceTaskDetailRecords.setStatus('current')
if mibBuilder.loadTexts: cmmcaRsIntResourceTaskDetailRecords.setDescription('Total number of ResourceTaskDetail Records written to the database by the Reporting Server during the last interval specified by the corresponding cmmcaServiceIntPeriod in cmmcaServiceTable.')
cmmcaRsIntResourceEventDetailRecords = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 8, 1, 14), Gauge32()).setUnits('records').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaRsIntResourceEventDetailRecords.setStatus('current')
if mibBuilder.loadTexts: cmmcaRsIntResourceEventDetailRecords.setDescription('Total number of ResourceEventDetail Records written to the database by the Reporting Server during the last interval specified by the corresponding cmmcaServiceIntPeriod in cmmcaServiceTable.')
cmmcaRsIntAssignmentQueDetailRecords = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 8, 1, 15), Gauge32()).setUnits('records').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaRsIntAssignmentQueDetailRecords.setStatus('current')
if mibBuilder.loadTexts: cmmcaRsIntAssignmentQueDetailRecords.setDescription('Total number of AssignmentQueueDetail Records written to the database by the Reporting Server during the last interval specified by the corresponding cmmcaServiceIntPeriod in cmmcaServiceTable.')
cmmcaRsIntAssignmentQueAttribRecords = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 8, 1, 16), Gauge32()).setUnits('records').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaRsIntAssignmentQueAttribRecords.setStatus('current')
if mibBuilder.loadTexts: cmmcaRsIntAssignmentQueAttribRecords.setDescription('Total number of AddignmentQueueAttribute Records written to the database by the Reporting Server during the last interval specified by the corresponding cmmcaServiceIntPeriod in cmmcaServiceTable.')
cmmcaRsIntContactSegmentMediaDetailRecords = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 8, 1, 17), Gauge32()).setUnits('records').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaRsIntContactSegmentMediaDetailRecords.setStatus('current')
if mibBuilder.loadTexts: cmmcaRsIntContactSegmentMediaDetailRecords.setDescription('Total number of Contact Segment Media Detail Records written to the database by the Reporting Server during the last interval specified by the corresponding cmmcaServiceIntPeriod in cmmcaServiceTable.')
cmmcaRsIntDBWrites = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 8, 1, 18), Gauge32()).setUnits('writes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaRsIntDBWrites.setStatus('current')
if mibBuilder.loadTexts: cmmcaRsIntDBWrites.setDescription('IntervalDBWrites is an interval metric indicating the total number of writes to the database made by the Reporting Server during the last interval specified by the corresponding cmmcaServiceIntPeriod in cmmcaServiceTable.')
cmmcaRsRtDBStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 8, 1, 19), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaRsRtDBStatus.setStatus('current')
if mibBuilder.loadTexts: cmmcaRsRtDBStatus.setDescription('A descriptive text used to indicate the current status associated with the Reporting database Server.')
cmmcaRsRtNumberActiveDBUserSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 8, 1, 20), Gauge32()).setUnits('sessions').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaRsRtNumberActiveDBUserSessions.setStatus('current')
if mibBuilder.loadTexts: cmmcaRsRtNumberActiveDBUserSessions.setDescription('Current number of active Reporting database User sessions.')
cmmcaRsDBSizeAllocated = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 8, 1, 21), CounterBasedGauge64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaRsDBSizeAllocated.setStatus('current')
if mibBuilder.loadTexts: cmmcaRsDBSizeAllocated.setDescription('The real time allocated size (bytes) of the Reporting Server database.')
cmmcaRsRtDBSpaceUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 8, 1, 22), CounterBasedGauge64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaRsRtDBSpaceUsed.setStatus('current')
if mibBuilder.loadTexts: cmmcaRsRtDBSpaceUsed.setDescription('The real time number of bytes of used database space.')
cmmcaRsRtDBSpaceFree = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 8, 1, 23), CounterBasedGauge64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaRsRtDBSpaceFree.setStatus('current')
if mibBuilder.loadTexts: cmmcaRsRtDBSpaceFree.setDescription('The real time number of bytes of free database space.')
cmmcaRsRtDBPercentUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 8, 1, 24), Gauge32()).setUnits('percentage').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaRsRtDBPercentUsed.setStatus('current')
if mibBuilder.loadTexts: cmmcaRsRtDBPercentUsed.setDescription('The real time percentage of used database space.')
cmmcaRsRtDBPercentFree = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 8, 1, 25), Gauge32()).setUnits('percentage').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaRsRtDBPercentFree.setStatus('current')
if mibBuilder.loadTexts: cmmcaRsRtDBPercentFree.setDescription('The real time percentage of free database space.')
cmmcaRsRtTransactionLogSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 8, 1, 26), CounterBasedGauge64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaRsRtTransactionLogSize.setStatus('current')
if mibBuilder.loadTexts: cmmcaRsRtTransactionLogSize.setDescription('The real time size of the transaction log in Reporting Server database.')
cmmcaIcmgwTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 9), )
if mibBuilder.loadTexts: cmmcaIcmgwTable.setStatus('current')
if mibBuilder.loadTexts: cmmcaIcmgwTable.setDescription('This table describes ICM Gateway(ICMGW) services configured on this Device. The ICM Gateway talks to the ERS PG of ICM over the GED-188 (ACMI) protocol. It sends agent state information to the ICM so that the ICM knows whether or not to route calls to Cisco Unified Expert Advisor and if so to which skill groups, i.e. assignment queues. Another critical function is to allow translation routing of calls from ICM and getting call context information from those calls into CUEA. Unlike a conventional ACD, the ICM Gateway doesnt track individual calls and generate every call event to the PIM. Instead, it relays agent status events to the ERS PG, and the PG is then able to fabricate real-time agent/skill-group reports and sends to the ICM Central Controller. The ICM Gateway also forwards call termination details to the PG and based on those the modified OPC at the PG can create half-hour reports. This table has a sparse dependent relationship with cmmcaServiceTable and hence uses its index.')
cmmcaIcmgwEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 9, 1), ).setIndexNames((0, "CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaServiceIndex"))
if mibBuilder.loadTexts: cmmcaIcmgwEntry.setStatus('current')
if mibBuilder.loadTexts: cmmcaIcmgwEntry.setDescription('Each Entry represents a configured ICMGateway (ICMGW). Each entry is indexed by the index of cmmcaServiceTable.')
cmmcaIcmgwAggSocketConnects = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 9, 1, 1), Counter64()).setUnits('sockets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaIcmgwAggSocketConnects.setStatus('current')
if mibBuilder.loadTexts: cmmcaIcmgwAggSocketConnects.setDescription('The total number of socket connections since application start time specified by cmmcaStartTime.')
cmmcaIcmgwAggSocketDisconnects = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 9, 1, 2), Counter64()).setUnits('sockets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaIcmgwAggSocketDisconnects.setStatus('current')
if mibBuilder.loadTexts: cmmcaIcmgwAggSocketDisconnects.setDescription('The total number of socket disconnections since application start time specified by cmmcaStartTime.')
cmmcaIcmgwAggACMIBytesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 9, 1, 3), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaIcmgwAggACMIBytesSent.setStatus('current')
if mibBuilder.loadTexts: cmmcaIcmgwAggACMIBytesSent.setDescription('The total number of bytes sent to the PIM since application start time specified by cmmcaStartTime.')
cmmcaIcmgwAggACMIBytesRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 9, 1, 4), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaIcmgwAggACMIBytesRcvd.setStatus('current')
if mibBuilder.loadTexts: cmmcaIcmgwAggACMIBytesRcvd.setDescription('The total number of bytes received from the PIM since application start time specified by cmmcaStartTime.')
cmmcaIcmgwAggACMIMsgsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 9, 1, 5), Counter64()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaIcmgwAggACMIMsgsSent.setStatus('current')
if mibBuilder.loadTexts: cmmcaIcmgwAggACMIMsgsSent.setDescription('The total number of messages sent to the PIM since application start time specified by cmmcaStartTime.')
cmmcaIcmgwAggACMIMsgsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 9, 1, 6), Counter64()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaIcmgwAggACMIMsgsRcvd.setStatus('current')
if mibBuilder.loadTexts: cmmcaIcmgwAggACMIMsgsRcvd.setDescription('The total number of messages received from the PIM since application start time specified by cmmcaStartTime.')
cmmcaIcmgwRtACMIOutQueueDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 9, 1, 7), Gauge32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaIcmgwRtACMIOutQueueDepth.setStatus('current')
if mibBuilder.loadTexts: cmmcaIcmgwRtACMIOutQueueDepth.setDescription('The current ACMI output queue depth.')
cmmcaIcmgwRtACMIOutQueueWait = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 9, 1, 8), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaIcmgwRtACMIOutQueueWait.setStatus('current')
if mibBuilder.loadTexts: cmmcaIcmgwRtACMIOutQueueWait.setDescription('The real time Queuing time of the message in the ACMI output queue in milliseconds.')
cmmcaIcmgwRtAgentsMonitored = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 9, 1, 9), Gauge32()).setUnits('agents').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaIcmgwRtAgentsMonitored.setStatus('current')
if mibBuilder.loadTexts: cmmcaIcmgwRtAgentsMonitored.setDescription('The real time number of agents being monitored.')
cmmcaIcmgwRtAqsMonitored = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 9, 1, 10), Gauge32()).setUnits('queues').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaIcmgwRtAqsMonitored.setStatus('current')
if mibBuilder.loadTexts: cmmcaIcmgwRtAqsMonitored.setDescription('The real time number of Assignment Queues being monitored.')
cmmcaIcmgwRtRoutesMonitored = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 9, 1, 11), Gauge32()).setUnits('routes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaIcmgwRtRoutesMonitored.setStatus('current')
if mibBuilder.loadTexts: cmmcaIcmgwRtRoutesMonitored.setDescription('The real time number of DNIS being monitored.')
cmmcaIcmgwRtPendingQueryAgentStateDlgs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 9, 1, 12), Gauge32()).setUnits('dialogues').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaIcmgwRtPendingQueryAgentStateDlgs.setStatus('current')
if mibBuilder.loadTexts: cmmcaIcmgwRtPendingQueryAgentStateDlgs.setDescription('The real time number of pending QueryAgentState dialogues.')
cmmcaIcmgwRtPendingGetContactDetailDlgs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 9, 1, 13), Gauge32()).setUnits('dialogues').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaIcmgwRtPendingGetContactDetailDlgs.setStatus('current')
if mibBuilder.loadTexts: cmmcaIcmgwRtPendingGetContactDetailDlgs.setDescription('The real time number of pending GetContactDetail dialogues.')
cmmcaIcmgwAggQueryAgentStateTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 9, 1, 14), Counter64()).setUnits('timeouts').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaIcmgwAggQueryAgentStateTimeouts.setStatus('current')
if mibBuilder.loadTexts: cmmcaIcmgwAggQueryAgentStateTimeouts.setDescription('The total number of QueryAgentState timeouts since application start time specified by cmmcaStartTime.')
cmmcaIcmgwAggGetContactDetailTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 9, 1, 15), Counter64()).setUnits('timeouts').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaIcmgwAggGetContactDetailTimeouts.setStatus('current')
if mibBuilder.loadTexts: cmmcaIcmgwAggGetContactDetailTimeouts.setDescription('The total Number of GetContactDetail timeouts since application start time specified by cmmcaStartTime.')
cmmcaIcmgwRtQueryAgentStateDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 9, 1, 16), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaIcmgwRtQueryAgentStateDelay.setStatus('current')
if mibBuilder.loadTexts: cmmcaIcmgwRtQueryAgentStateDelay.setDescription('The real time QueryAgentState response delay.')
cmmcaIcmgwRtGetContactDetailDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 9, 1, 17), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaIcmgwRtGetContactDetailDelay.setStatus('current')
if mibBuilder.loadTexts: cmmcaIcmgwRtGetContactDetailDelay.setDescription('The real time GetContactDetail response delay.')
cmmcaIcmgwRtPendingCallTermEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 6, 9, 1, 18), Gauge32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaIcmgwRtPendingCallTermEvents.setStatus('current')
if mibBuilder.loadTexts: cmmcaIcmgwRtPendingCallTermEvents.setDescription('The real time number of pending CallTerminationEvent messages.')
cmmcaServiceTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 5, 1), )
if mibBuilder.loadTexts: cmmcaServiceTable.setStatus('current')
if mibBuilder.loadTexts: cmmcaServiceTable.setDescription("This table lists all functional services that make up Cisco Unified Expert Advisor (CUEA) application. Each service performs a specific task. The various services are Contact Manager(CM), Resource Manager (RM), Work Assigner (WA), Media Platform Adapter (MPA), Business Rules Engine (BRE), ICMGateway (ICMGW), Resource Desktop Adapter (RDA), Reporting Adapter(RA) and Reporting Subsystem (RS). Note that, not all services will be found on all Devices. There could be potentially multiple instances of each service (identified by CmmcaServiceType) running on the same Cisco Unified Expert Advisor Device. Each service is given a unique service index by the SNMP agent upon startup and this same index is used in other sparsely dependent tables, specifically cmmcaServiceInfo tables (viz; cmmcaRmTable, cmmcaCmTable, cmmcaRdaTable, cmmcaBreTable, cmmcaWaTable, cmmcaMpaTable, cmmcaRaTable, cmmcaRsTable and cmmcaIcmgwTable) based on cmmcaServiceType. For eg: All service entries with cmmcaServiceType 'cm' will have entries in cmmcaCmTable, and all service entries with cmmcaServiceType 'rm' will have entries in cmmcaRmTable and so on. This table is read-only for an NMS and is populated by SNMP agent upon startup. It cannot be modified during runtime.")
cmmcaServiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 5, 1, 1), ).setIndexNames((0, "CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaServiceIndex"))
if mibBuilder.loadTexts: cmmcaServiceEntry.setStatus('current')
if mibBuilder.loadTexts: cmmcaServiceEntry.setDescription('This entry defines a row in the cmmcaServiceTable. Each Service Entry has an arbitrarily assigned index,ie; cmmcaServiceIndex, a service type,ie; cmmcaServiceType (which is an enumerated list of services present on this managed device) and a list of other entries. The cmmcaServiceIndex is used in other tables having a sparse dependent relationship with cmmcaServiceTable.')
cmmcaServiceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 5, 1, 1, 1), CmmcaIndex().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: cmmcaServiceIndex.setStatus('current')
if mibBuilder.loadTexts: cmmcaServiceIndex.setDescription('The service index is a value that uniquely identifies an entry in the service table. The value is arbitrarily assigned by the SNMP agent.')
cmmcaServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 5, 1, 1, 2), CmmcaServiceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaServiceType.setStatus('current')
if mibBuilder.loadTexts: cmmcaServiceType.setDescription('The service type object identifies the type of Cisco Unified Expert Advisor functional service, see CmmcaServiceType Textual convention for more information.')
cmmcaServiceName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 5, 1, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaServiceName.setStatus('current')
if mibBuilder.loadTexts: cmmcaServiceName.setDescription('The service name object is a user-intuitive textual name for the application service.')
cmmcaServiceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 5, 1, 1, 4), CmmcaServiceStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaServiceStatus.setStatus('current')
if mibBuilder.loadTexts: cmmcaServiceStatus.setDescription('The service status object is the last known status of the application service.')
cmmcaServiceIntPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 5, 1, 1, 5), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(1, 1440))).setUnits('minutes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaServiceIntPeriod.setStatus('current')
if mibBuilder.loadTexts: cmmcaServiceIntPeriod.setDescription('This object defines the interval window over which values of certain MIB objects of the corresponding service are calculated. Each service entry defined in cmmcaServiceTable has corresponding entries in a related table in cmmcaServiceInfo that are identified by the same index and hence have sparse dependent relationship. For eg: if cmmcaServiceIntPeriod is 30 min for a service of type Reporting Subsystem(rs), then cmmcaRsIntResourceEventDetailRecords interval object in cmmcaRsTable for this service, reports the number of ResourceEventDetailRecords written into the database in the last 30 min interval.')
cmmcaRtRoutingDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 5, 1, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaRtRoutingDomain.setStatus('current')
if mibBuilder.loadTexts: cmmcaRtRoutingDomain.setDescription('The routing domain, a descriptive text, that specifies the service is in.')
cmmcaRtLogLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 5, 1, 1, 7), CmmcaSeverityLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaRtLogLevel.setStatus('current')
if mibBuilder.loadTexts: cmmcaRtLogLevel.setDescription("The current log level of the service. A log level acts as a filter to decide which events will be logged. Hence a log level has the same values as defined in CmmcaSeverityLevel. A log level will enable the service to log events that have atleast the designated severity. For eg: a log level set to warning(5) will only log events that have a level of atleast warning(5) severity; ie; All emergency(1), alert(2), critical(3), error(4), warning(5) events will be logged. 'emergency': This log level indicates that only events of such severity will be logged. . 'alert': This log level indicates that all emergency and alert events will be logged. 'critical': This log level indicates that all emergency, alert and critical events will be logged. 'error': This log level indicates that all emergency, alert, critical and error level events will be logged. 'warning': This log level indicates that all emergency, alert, critical, error and warning events will be logged. 'notice': This log level indicates that all emergency, alert, critical, error, warning and notice level events will be logged. 'informational': This log level indicates that all emergency, alert, critical, error, warning, notice and informational events will be logged. 'debug': This log level indicates that all emergency, alert, critical, error, warning, notice and debug level events will be logged.")
cmmcaRtTraceMask = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 5, 1, 1, 8), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaRtTraceMask.setStatus('current')
if mibBuilder.loadTexts: cmmcaRtTraceMask.setDescription('The current trace mask for debugging for the service.')
cmmcaRtMessageThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 5, 1, 1, 9), Gauge32()).setUnits('messages per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaRtMessageThroughput.setStatus('current')
if mibBuilder.loadTexts: cmmcaRtMessageThroughput.setDescription('The Average message throughput in messages/sec per service.')
cmmcaRtUptime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 5, 1, 1, 10), Counter64()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaRtUptime.setStatus('current')
if mibBuilder.loadTexts: cmmcaRtUptime.setDescription('The total number of seconds the service has been up.')
cmmcaRtMsgReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 5, 1, 1, 11), Counter64()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaRtMsgReceived.setStatus('current')
if mibBuilder.loadTexts: cmmcaRtMsgReceived.setDescription('The total number of messages received by the service since application start time specified by cmmcaStartTime.')
cmmcaMaxThreadsAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 5, 1, 1, 12), Unsigned32()).setUnits('threads').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaMaxThreadsAvailable.setStatus('current')
if mibBuilder.loadTexts: cmmcaMaxThreadsAvailable.setDescription('The Maximum number of threads available for this Service.')
cmmcaRtThreadsInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 5, 1, 1, 13), Gauge32()).setUnits('threads').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaRtThreadsInUse.setStatus('current')
if mibBuilder.loadTexts: cmmcaRtThreadsInUse.setDescription('Number of threads currently running for this Service.')
cmmcaEnvRtMaxMemUsed = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 4, 1), CounterBasedGauge64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaEnvRtMaxMemUsed.setStatus('current')
if mibBuilder.loadTexts: cmmcaEnvRtMaxMemUsed.setDescription('The real-time maximum memory used object is a real-time snapshot metric indicating the peak memory usage by the application within the runtime environment since startup. The object value is expressed as a count of bytes and indicates the high water mark of memory used simultaneously within the environment.')
cmmcaEnvRtCurrMemUsed = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 4, 2), CounterBasedGauge64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaEnvRtCurrMemUsed.setStatus('current')
if mibBuilder.loadTexts: cmmcaEnvRtCurrMemUsed.setDescription('The real-time current memory used object is a real-time snapshot metric indicating the current memory usage by the runtime environment. The object value is expressed as a count of bytes and indicates the current amount of memory used by this runtime environment.')
cmmcaEnvRtMaxMemAvail = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 4, 3), CounterBasedGauge64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaEnvRtMaxMemAvail.setStatus('current')
if mibBuilder.loadTexts: cmmcaEnvRtMaxMemAvail.setDescription('The real-time maximum memory available object is a real-time snapshot metric indicating the amount of memory available to the runtime environment. The object value is expresses as a count of bytes and indicates the amount of system memory available for use by the runtime environment.')
cmmcaEnvRtCurrMemAvail = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 4, 4), CounterBasedGauge64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaEnvRtCurrMemAvail.setStatus('current')
if mibBuilder.loadTexts: cmmcaEnvRtCurrMemAvail.setDescription('The real-time current memory available object is a real-time snapshot metric indicating the amount of available memory in the runtime environment. The object value is expressed as a count of bytes and indicates the amount of current system memory claimed by the runtime environment that is not currently being used.')
cmmcaEnvRtCurrThreadsInUse = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 4, 5), Gauge32()).setUnits('threads').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaEnvRtCurrThreadsInUse.setStatus('current')
if mibBuilder.loadTexts: cmmcaEnvRtCurrThreadsInUse.setDescription('The real-time current threads in use object is a real-time snapshot metric indicating a count of threads that are in use in the runtime environment. The number of threads in use by the runtime environment include all of the Cisco MMCA standalone and thread pool threads as well as those threads created by the web application server running within the same runtime environment.')
cmmcaEnvMaxThreadsUsed = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 4, 6), Unsigned32()).setUnits('threads').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaEnvMaxThreadsUsed.setStatus('current')
if mibBuilder.loadTexts: cmmcaEnvMaxThreadsUsed.setDescription('The real-time maximum threads used object is a real-time snapshot metric indicating the peak amount of threads used simultaneously in the runtime environment since startup. The maximum number of threads used by the runtime environment includes all Cisco MMCA standalone and thread pool threads as well as threads created by the web application server running within the same runtime environment.')
cmmcaEnvRtUpTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 4, 7), Counter64()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaEnvRtUpTime.setStatus('current')
if mibBuilder.loadTexts: cmmcaEnvRtUpTime.setDescription('The real-time up time object is a real-time snapshot metric indicating how long the CUEA application has been running. The object value is expressed as a count of milliseconds that have elapsed since the application began executing.')
cmmcaRtMsgQMemPercentUsage = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 4, 8), Gauge32()).setUnits('percentage').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaRtMsgQMemPercentUsage.setStatus('current')
if mibBuilder.loadTexts: cmmcaRtMsgQMemPercentUsage.setDescription('The percentage of available message bus memory in use. All services in CUEA communicate using a message bus.')
cmmcaMaxMsgQMemAvail = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 4, 9), CounterBasedGauge64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaMaxMsgQMemAvail.setStatus('current')
if mibBuilder.loadTexts: cmmcaMaxMsgQMemAvail.setDescription('The actual amount of available message bus memory for use. All services in CUEA communicate using a message bus.')
cmmcaRtCongested = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 4, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaRtCongested.setStatus('current')
if mibBuilder.loadTexts: cmmcaRtCongested.setDescription('An object indicating whether or not the device is congested as determined by an internal heuristic.')
cmmcaTPoolRtIdleThreads = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 3, 1), Gauge32()).setUnits('threads').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaTPoolRtIdleThreads.setStatus('current')
if mibBuilder.loadTexts: cmmcaTPoolRtIdleThreads.setDescription('The real-time idle threads object is a real-time snapshot metric indicating the number of idle threads in the pool waiting for work. The thread pool is a cache of threads used (by application components only) for the processing of relatively short tasks. Using a thread pool eliminates the waste of resources encountered when rapidly creating and destroying threads for these types of tasks.')
cmmcaTPoolRtRunningThreads = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 3, 2), Gauge32()).setUnits('threads').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaTPoolRtRunningThreads.setStatus('current')
if mibBuilder.loadTexts: cmmcaTPoolRtRunningThreads.setDescription('The real-time running threads object is a real-time snapshot metric indicating the number of running threads in the pool currently processing work. The thread pool is a cache of threads used (by application components only) for the processing of relatively short tasks. Using a thread pool eliminates the waste of resources encountered when rapidly creating and destroying threads for these types of tasks.')
cmmcaTPoolRtCoreThreads = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 3, 3), Gauge32()).setUnits('threads').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaTPoolRtCoreThreads.setStatus('current')
if mibBuilder.loadTexts: cmmcaTPoolRtCoreThreads.setDescription('The real-time core threads object is a real-time snapshot metric indicating the number of threads in the pool that will never be destroyed no matter how long they remain idle. The thread pool is a cache of threads used (by application components only) for the processing of relatively short tasks. Using a thread pool eliminates the waste of resources encountered when rapidly creating and destroying threads for these types of tasks.')
cmmcaTPoolRtMaxThreadsAvail = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 3, 4), Unsigned32()).setUnits('threads').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaTPoolRtMaxThreadsAvail.setStatus('current')
if mibBuilder.loadTexts: cmmcaTPoolRtMaxThreadsAvail.setDescription('The real-time maximum threads available object is a real-time snapshot metric indicating the maximum number of threads in the pool that can exist simultaneously. The thread pool is a cache of threads used (by application services only) for the processing of relatively short tasks. Using a thread pool eliminates the waste of resources encountered when rapidly creating and destroying threads for these types of tasks.')
cmmcaTPoolRtMaxThreadsUsed = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 3, 5), Counter32()).setUnits('threads').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaTPoolRtMaxThreadsUsed.setStatus('current')
if mibBuilder.loadTexts: cmmcaTPoolRtMaxThreadsUsed.setDescription('The real-time maximum threads used object is a real-time snapshot metric indicating the peak number of threads in the pool that are simultaneously tasked with work to process. The thread pool is a cache of threads used (by application components only) for the processing of relatively short tasks. Using a thread pool eliminates the waste of resources encountered when rapidly creating and destroying threads for these types of tasks.')
cmmcaRtLicensesAvailable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 2, 1), Gauge32()).setUnits('agents').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaRtLicensesAvailable.setStatus('current')
if mibBuilder.loadTexts: cmmcaRtLicensesAvailable.setDescription('The real-time number of Expert advisor agent licenses available on this Device.')
cmmcaTotalLicensesConfigured = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 2, 2), Gauge32()).setUnits('agents').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaTotalLicensesConfigured.setStatus('current')
if mibBuilder.loadTexts: cmmcaTotalLicensesConfigured.setDescription('The total number of Expert Agent licenses configured on this Device.')
cmmcaServerName = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 1, 1), InetAddressDNS()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaServerName.setStatus('current')
if mibBuilder.loadTexts: cmmcaServerName.setDescription('The server name object is the fully-qualified domain name of the the server.')
cmmcaDescription = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaDescription.setStatus('current')
if mibBuilder.loadTexts: cmmcaDescription.setDescription('The description object holds a textual description of the software installed on this server. This is typically the full name of the application.')
cmmcaVersion = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaVersion.setStatus('current')
if mibBuilder.loadTexts: cmmcaVersion.setDescription('The version object identifies the version number of the Cisco Unified Expert Advisor software installed on this server.')
cmmcaStartTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaStartTime.setStatus('current')
if mibBuilder.loadTexts: cmmcaStartTime.setDescription('The start time object is the date and time that the CUEA application was started on this server.')
cmmcaTimeZoneName = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 1, 5), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaTimeZoneName.setStatus('current')
if mibBuilder.loadTexts: cmmcaTimeZoneName.setDescription('The time zone name object specifies the name of the time zone where the server is physically located.')
cmmcaTimeZoneOffsetHours = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-12, 12))).setUnits('hours').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaTimeZoneOffsetHours.setStatus('current')
if mibBuilder.loadTexts: cmmcaTimeZoneOffsetHours.setDescription('The time zone offset hours object represents the number of hours that the local time, in the time zone where the server is physically located, differs from Greenwich Mean Time (GMT).')
cmmcaTimeZoneOffsetMinutes = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-59, 59))).setUnits('minutes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaTimeZoneOffsetMinutes.setStatus('current')
if mibBuilder.loadTexts: cmmcaTimeZoneOffsetMinutes.setDescription("The time zone offset minutes object represents the number of minutes that the local time, in the time zone where the CUEA server is physically located, differs from Greenwich Mean Time (GMT). This object is combined with cmmcaTimeZoneOffsetHours object to represent the local time zone's total offset from GMT.")
cmmcaOpsConsoleURL = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 1, 8), CiscoURLString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaOpsConsoleURL.setStatus('current')
if mibBuilder.loadTexts: cmmcaOpsConsoleURL.setDescription('This object holds the URL for the CUEA operations Console web server. The operations console offers a web-based, centralized interface for mapping and summarizing the solution network configuration, setting and displaying configuration information on a batch or per-Device basis and storing local copies of those configurations. Other functions include troubleshooting, health monitoring and direct administration. This object offers a web navigation point from the management station (assuming a web interface) to quickly access the Operations Console web server.')
cmmcaLocalDeviceType = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("runtime", 1), ("reporting", 2), ("other", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaLocalDeviceType.setStatus('current')
if mibBuilder.loadTexts: cmmcaLocalDeviceType.setDescription('This Object defines the type of device. Expert Advisor devices are typically classified into runtime or reporting. runtime : A runtime device typically has multiple services of types such as ContactManager(cm), ResourceManager(rm), WorkAssigner(wa), ICM Gateway(icmgw), Resource Desktop Adapter(rda), Reporting Adapter(ra) to process incoming calls and communicate the information to reporting device over a message bus. reporting : A reporting device typically has Reporting Subsystem(rs) services. It communicates with runtime device over a message bus, receives call processing information and stores them in a database. other : This device is neither runtime or reporting.')
cmmcaEnableNotifications = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 1, 10), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmmcaEnableNotifications.setStatus('current')
if mibBuilder.loadTexts: cmmcaEnableNotifications.setDescription('This object allows the management station to disable and alternatively enable outbound notifications. By default, notifications are enabled.')
cmmcaSystemConditionStatus = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 1, 11), CmmcaSystemConditionStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaSystemConditionStatus.setStatus('current')
if mibBuilder.loadTexts: cmmcaSystemConditionStatus.setDescription('This object provides an overall summary of the System Conditions. It specifies if health of the application is statusNormal (green), statusWarn (yellow) or statusCritical(red). A management station can use this status along with specific conditions raised, that are in the cmmcaSystemConditionTable to learn about the health of application.')
cmmcaSystemStatus = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 1, 12), CmmcaServiceStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaSystemStatus.setStatus('current')
if mibBuilder.loadTexts: cmmcaSystemStatus.setDescription("The SystemStatus object is the last known status of the application. It summarizes the overall status of the application. It can have the following values 'inService' The service is up and running optimally, accepting connections at full QoS (if applicable). 'partialService' The service is no longer accepting new calls but finishes processing active calls (may be due to a loss of a dependency/ connectivity, or a shutdown request). 'stopped' The service has shut down and is not processing any more calls. The process itself is terminating (doing memory cleanup, saving settings, shutting down threads, etc.).")
cmmcaClusterInfoTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 1, 13), )
if mibBuilder.loadTexts: cmmcaClusterInfoTable.setStatus('current')
if mibBuilder.loadTexts: cmmcaClusterInfoTable.setDescription('CUEA can consist of multiple devices that form a cluster. This table gives the information related to the CUEA Cluster. Each entry denotes a Device within the Cluster.')
cmmcaClusterInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 1, 13, 1), ).setIndexNames((0, "CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaDeviceIndex"))
if mibBuilder.loadTexts: cmmcaClusterInfoEntry.setStatus('current')
if mibBuilder.loadTexts: cmmcaClusterInfoEntry.setDescription('This Entry represents a row in the cluster Table. Every row has information related to a Device such as hostname, IP address etc. An entry is created when a device is added to the CUEA cluster during installation and this information is subsequently picked up by the Expert Advisor SNMP Agent.')
cmmcaDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 1, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)))
if mibBuilder.loadTexts: cmmcaDeviceIndex.setStatus('current')
if mibBuilder.loadTexts: cmmcaDeviceIndex.setDescription('An arbitrary integer, selected by the local Device, which uniquely identifies a Device within the cluster.')
cmmcaDeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 1, 13, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaDeviceName.setStatus('current')
if mibBuilder.loadTexts: cmmcaDeviceName.setDescription('The Host name of the Device in the Cluster.')
cmmcaDeviceDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 1, 13, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaDeviceDescription.setStatus('current')
if mibBuilder.loadTexts: cmmcaDeviceDescription.setDescription('The description for the device which can include additional information regarding the device.')
cmmcaDeviceType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 1, 13, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("runtime", 1), ("reporting", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaDeviceType.setStatus('current')
if mibBuilder.loadTexts: cmmcaDeviceType.setDescription('The Device type. runtime(1) : The device is a runtime device. reporting(2): The device is a reporting server device. unknown(3) : The type of the remote device is not known.')
cmmcaDeviceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 1, 13, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("local", 2), ("remoteup", 3), ("remotedown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaDeviceStatus.setStatus('current')
if mibBuilder.loadTexts: cmmcaDeviceStatus.setDescription('The current status of the remote Device as viewed by this device. A remote device is up if the local device can communicate with it. unknown(1) : Current status of the remote device is Unknown, local (2) : This is the local device in the table, remote-up(3) : The local device is running and is able to communicate with the remote device. remote-down(4): The local device is running but it is unable to communicate with the remote Device.')
cmmcaDeviceInetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 1, 13, 1, 6), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaDeviceInetAddressType.setStatus('current')
if mibBuilder.loadTexts: cmmcaDeviceInetAddressType.setDescription('This object identifies the IP address type of the remote device.')
cmmcaDeviceInetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 1, 13, 1, 7), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaDeviceInetAddress.setStatus('current')
if mibBuilder.loadTexts: cmmcaDeviceInetAddress.setDescription('This object identifies ip address of the remote device. The type of address for this is identified by InetAddressType.')
cmmcaClusterId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 1, 13, 1, 8), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaClusterId.setStatus('current')
if mibBuilder.loadTexts: cmmcaClusterId.setDescription('The unique ID of the Cluster to which this device belongs. At any point in time, the Cluster Id helps in associating a device to any given Cluster.')
cmmcaNextNodeTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 1, 14), )
if mibBuilder.loadTexts: cmmcaNextNodeTable.setStatus('current')
if mibBuilder.loadTexts: cmmcaNextNodeTable.setDescription('This table gives the information related to the neighbouring nodes that are connected to the device. Each entry denotes a node connected to the device.')
cmmcaNextNodeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 1, 14, 1), ).setIndexNames((0, "CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaNextNodeIndex"))
if mibBuilder.loadTexts: cmmcaNextNodeEntry.setStatus('current')
if mibBuilder.loadTexts: cmmcaNextNodeEntry.setDescription('This Entry represents a row in the next node Table. Every row has information related to a neighbouring device such as host name, IP address, device type etc. An entry is created when neighbouring devices such as CUPS or ICMGW are configured with the CUEA devices by the Expert Advisor administrators using the Operations Console located at cmmcaOpsConsoleURL.')
cmmcaNextNodeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 1, 14, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)))
if mibBuilder.loadTexts: cmmcaNextNodeIndex.setStatus('current')
if mibBuilder.loadTexts: cmmcaNextNodeIndex.setDescription('An arbitrary integer, selected by the local device used to identify the neighbouring node.')
cmmcaNextNodeName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 1, 14, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaNextNodeName.setStatus('current')
if mibBuilder.loadTexts: cmmcaNextNodeName.setDescription('The name of the node that is connected to the device.')
cmmcaNextNodeType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 1, 14, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaNextNodeType.setStatus('current')
if mibBuilder.loadTexts: cmmcaNextNodeType.setDescription('A string describing the type of node that is connected to the device. This can be Unknown, ICM(PG), CUPS.')
cmmcaNextNodeIpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 1, 14, 1, 4), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaNextNodeIpAddrType.setStatus('current')
if mibBuilder.loadTexts: cmmcaNextNodeIpAddrType.setDescription('This object identifies the IP address type of the neighbouring node connected to the device.')
cmmcaNextNodeIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 1, 14, 1, 5), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaNextNodeIpAddr.setStatus('current')
if mibBuilder.loadTexts: cmmcaNextNodeIpAddr.setDescription('This object identifies ip address of the neighbouring node connected to the device. The type of address for this is identified by cmmcaNextNodeIpAddrType.')
cmmcaNextNodeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 1, 14, 1, 6), CmmcaNextNodeStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaNextNodeStatus.setStatus('current')
if mibBuilder.loadTexts: cmmcaNextNodeStatus.setDescription('The current status of the neighbouring node connected to the device as viewed by this Device. unknown(1) : Current status of the node is Unknown, available (2) : The connection is up and available unavailable(3) : The connection is down and not available.')
cmmcaSystemConditionTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 1, 15), )
if mibBuilder.loadTexts: cmmcaSystemConditionTable.setStatus('current')
if mibBuilder.loadTexts: cmmcaSystemConditionTable.setDescription('This table lists all the Raised System Conditions in the application. A service can be inService ,but could raise certain important System Conditions, which provide more information about the health of service.')
cmmcaSystemConditionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 1, 15, 1), ).setIndexNames((0, "CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaSystemConditionIndex"))
if mibBuilder.loadTexts: cmmcaSystemConditionEntry.setStatus('current')
if mibBuilder.loadTexts: cmmcaSystemConditionEntry.setDescription('An entry (conceptual row) in the cmmcaSystemConditionTable. Each row specifies information about a System condition, which has an Id, severity level, description of the raised condition, the timestamp of when the condition was raised and a message of the event which resulted in the raised condition.')
cmmcaSystemConditionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 1, 15, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)))
if mibBuilder.loadTexts: cmmcaSystemConditionIndex.setStatus('current')
if mibBuilder.loadTexts: cmmcaSystemConditionIndex.setDescription('An arbitrary integer, selected by the local device used to identify the System Condition.')
cmmcaSystemConditionId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 1, 15, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaSystemConditionId.setStatus('current')
if mibBuilder.loadTexts: cmmcaSystemConditionId.setDescription('An unique Id of the System Condition used to identify a specific System Condition.')
cmmcaSystemConditionSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 1, 15, 1, 3), CmmcaConditionStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaSystemConditionSeverity.setStatus('current')
if mibBuilder.loadTexts: cmmcaSystemConditionSeverity.setDescription('This object specifies the severity level of the raised condition.')
cmmcaSystemConditionDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 1, 15, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaSystemConditionDescription.setStatus('current')
if mibBuilder.loadTexts: cmmcaSystemConditionDescription.setDescription('This object provides a breif description of the raised System Condition.')
cmmcaSystemConditionTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 1, 15, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaSystemConditionTimeStamp.setStatus('current')
if mibBuilder.loadTexts: cmmcaSystemConditionTimeStamp.setDescription('The timestamp of when the Condition was raised.')
cmmcaSystemConditionMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 664, 1, 1, 15, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmcaSystemConditionMessage.setStatus('current')
if mibBuilder.loadTexts: cmmcaSystemConditionMessage.setDescription('This object provides a message about the event which resulted in the System Condition being raised.')
cmmcaMIBEvent = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 664, 0, 1)).setObjects(("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaEventMessageId"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaEventHostName"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaEventAppName"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaEventMessageName"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaEventState"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaEventSeverity"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaEventTimestamp"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaEventText"))
if mibBuilder.loadTexts: cmmcaMIBEvent.setStatus('current')
if mibBuilder.loadTexts: cmmcaMIBEvent.setDescription('An event is a notification that is sent by a functional service of the CUEA application. Notifications are sent by CUEA when unusual conditions occur that potentially, can affect the functioning of a service in CUEA. Each Notification describes the operation state information of a service when such service impacting conditions occur.')
ciscoMmodalContactAppsMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 664, 2, 1))
ciscoMmodalContactAppsMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 664, 2, 2))
ciscoMmodalContactAppsMIBComplianceRev = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 664, 2, 1, 1)).setObjects(("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaGeneralInfoGroup"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaLicenseInfoGroup"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaThreadPoolGroup"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaRuntimeInfoGroup"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaServiceGroup"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaRmGroup"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaCmGroup"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaRdaGroup"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaBreGroup"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaWaGroup"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaMpaGroup"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaRaGroup"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaRsGroup"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaNotificationInfoGroup"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaEventsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoMmodalContactAppsMIBComplianceRev = ciscoMmodalContactAppsMIBComplianceRev.setStatus('current')
if mibBuilder.loadTexts: ciscoMmodalContactAppsMIBComplianceRev.setDescription('This object is the compliance statement for entities which implement the Cisco MultiModal Contact Apps MIB.')
cmmcaGeneralInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 664, 2, 2, 1)).setObjects(("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaServerName"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaDescription"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaVersion"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaStartTime"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaTimeZoneName"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaTimeZoneOffsetHours"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaTimeZoneOffsetMinutes"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaOpsConsoleURL"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaLocalDeviceType"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaEnableNotifications"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaDeviceName"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaDeviceDescription"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaDeviceType"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaDeviceStatus"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaDeviceInetAddressType"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaDeviceInetAddress"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaClusterId"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaNextNodeName"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaNextNodeType"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaNextNodeIpAddr"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaNextNodeIpAddrType"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaNextNodeStatus"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaSystemConditionStatus"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaSystemStatus"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaSystemConditionId"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaSystemConditionSeverity"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaSystemConditionDescription"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaSystemConditionTimeStamp"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaSystemConditionMessage"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmmcaGeneralInfoGroup = cmmcaGeneralInfoGroup.setStatus('current')
if mibBuilder.loadTexts: cmmcaGeneralInfoGroup.setDescription('The general info group defines the general CUEA objects. All servers will populate these objects.')
cmmcaLicenseInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 664, 2, 2, 2)).setObjects(("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaRtLicensesAvailable"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaTotalLicensesConfigured"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmmcaLicenseInfoGroup = cmmcaLicenseInfoGroup.setStatus('current')
if mibBuilder.loadTexts: cmmcaLicenseInfoGroup.setDescription('The licensing information group defines the set of objects for the licensing system. All runtime servers will populate these objects.')
cmmcaThreadPoolGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 664, 2, 2, 3)).setObjects(("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaTPoolRtIdleThreads"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaTPoolRtRunningThreads"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaTPoolRtCoreThreads"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaTPoolRtMaxThreadsAvail"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaTPoolRtMaxThreadsUsed"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmmcaThreadPoolGroup = cmmcaThreadPoolGroup.setStatus('current')
if mibBuilder.loadTexts: cmmcaThreadPoolGroup.setDescription('The thread pool information group defines the set of objects for the thread pools. All servers will populate these objects.')
cmmcaRuntimeInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 664, 2, 2, 4)).setObjects(("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaEnvRtMaxMemUsed"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaEnvRtCurrMemUsed"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaEnvRtMaxMemAvail"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaEnvRtCurrMemAvail"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaEnvRtCurrThreadsInUse"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaEnvMaxThreadsUsed"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaEnvRtUpTime"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaRtMsgQMemPercentUsage"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaMaxMsgQMemAvail"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaRtCongested"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmmcaRuntimeInfoGroup = cmmcaRuntimeInfoGroup.setStatus('current')
if mibBuilder.loadTexts: cmmcaRuntimeInfoGroup.setDescription('The RuntimeInfo group defines the set of objects for the Runtime info. All servers will populate these objects.')
cmmcaServiceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 664, 2, 2, 5)).setObjects(("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaServiceType"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaServiceName"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaServiceStatus"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaServiceIntPeriod"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaRtRoutingDomain"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaRtLogLevel"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaRtTraceMask"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaRtMessageThroughput"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaRtUptime"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaRtMsgReceived"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaMaxThreadsAvailable"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaRtThreadsInUse"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmmcaServiceGroup = cmmcaServiceGroup.setStatus('current')
if mibBuilder.loadTexts: cmmcaServiceGroup.setDescription('The Service group defines the set of objects for the various applicationServices. All servers will populate these objects.')
cmmcaRmGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 664, 2, 2, 6)).setObjects(("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaRmRtAgentsLoggedIn"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaRmRtAgentsOnCalls"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaRmRtAgentsReserved"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaRmRtAgentsWrapUp"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaRmRtAgentsReady"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaRmRtAgentsNoQueue"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaRmAggNumOffersAccept"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaRmIntNumOffersAccept"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaRmAggNumOffersReject"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaRmIntNumOffersReject"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaRmAggNumOffersTimedOut"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaRmIntNumOffersTimedOut"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmmcaRmGroup = cmmcaRmGroup.setStatus('current')
if mibBuilder.loadTexts: cmmcaRmGroup.setDescription('The Rm group defines the set of objects for the resource manager service. All runtime servers will populate these objects.')
cmmcaCmGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 664, 2, 2, 7)).setObjects(("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaCmRtNumActiveCalls"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaCmRtNumCallTrying"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaCmRtNumCallRingBack"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaCmRtNumCallConnecting"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaCmRtNumCallConnected"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaCmAggNumCallArrivals"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaCmIntNumCallArrivals"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaCmRtNumCallRejecting"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaCmRtNumCallTransferring"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaCmRtNumCallTerminating"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaCmAggAvgCallDurationTime"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaCmIntAvgCallDurationTime"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaCmAggMaxCallDurationTime"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaCmIntMaxCallDurationTime"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaCmAggMaxCallDurationTimeDt"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaCmIntMaxCallDurationTimeDt"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaCmAggAvgCallInQueueTime"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaCmIntAvgCallInQueueTime"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaCmAggMaxCallInQueueTime"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaCmIntMaxCallInQueueTime"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaCmAggMaxCallInQueueTimeDt"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaCmIntMaxCallInQueueTimeDt"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaCmAggAvgCallArrivalRate"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaCmAggMaxCallArrivalRate"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaCmAggMaxCallArrivalRateDt"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaCmRtNumCallInitial"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaCmIntAvgCallArrivalRate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmmcaCmGroup = cmmcaCmGroup.setStatus('current')
if mibBuilder.loadTexts: cmmcaCmGroup.setDescription('The Cm group defines the set of objects for the Contact Manager service. All runtime servers will populate these objects.')
cmmcaRdaGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 664, 2, 2, 8)).setObjects(("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaRdaAggNumMsgProc"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaRdaIntNumMsgProc"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaRdaAggNumSuccessPresenceNotifications"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaRdaIntNumSuccessPresenceNotifications"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaRdaRtNumActiveClients"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaRdaRtNumOutStandingOfferTasks"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaRdaAggNumUnSuccessPresenceNotifications"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaRdaIntNumUnSuccessPresenceNotifications"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaRdaRtNumInactiveClients"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmmcaRdaGroup = cmmcaRdaGroup.setStatus('current')
if mibBuilder.loadTexts: cmmcaRdaGroup.setDescription('The Rda group defines the set of objects for the Resource desktop Adapter service. All runtime servers will populate these objects.')
cmmcaBreGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 664, 2, 2, 9)).setObjects(("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaBreAggLoadedScripts"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaBreAggDistinctScripts"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaBreRtActiveScripts"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaBreRtCurrentInstances"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaBreAggMaxConcurrentInstances"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaBreIntMaxConcurrentInstances"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaBreAggMaxConcurrentInstancesDt"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaBreIntMaxConcurrentInstancesDt"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaBreAggAvgConcurrentInstances"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaBreIntAvgConcurrentInstances"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaBreAggTotalInstanceInitiations"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaBreIntTotalInstanceInitiations"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaBreAggTotalContactInstanceInitiations"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaBreIntTotalContactInstanceInitiations"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaBreAggTotalResourceInstanceInitiations"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaBreIntTotalResourceInstanceInitiations"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaBreAggTotalInstanceTerminations"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaBreIntTotalInstanceTerminations"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaBreAggTotalContactInstanceTerminations"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaBreIntTotalContactInstanceTerminations"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaBreAggTotalResourceInstanceTerminations"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaBreIntTotalResourceInstanceTerminations"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaBreAggTotalAbnormalEndings"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaBreIntTotalAbnormalEndings"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaBreAggTotalAbnormalContactEndings"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaBreIntTotalAbnormalContactEndings"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaBreAggTotalAbnormalResourceEndings"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaBreIntTotalAbnormalResourceEndings"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmmcaBreGroup = cmmcaBreGroup.setStatus('current')
if mibBuilder.loadTexts: cmmcaBreGroup.setDescription('The Bre group defines the set of objects for the Business Rule Engine service. All runtime servers will populate these objects.')
cmmcaWaGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 664, 2, 2, 10)).setObjects(("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaWaRtAssignmentQueCount"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaWaRtAttributeDefCount"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaWaRtSelectionStrategyCount"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaWaRtSkillCount"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaWaAggTotalConfigErrors"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaWaAggCancelResourceRequestReceived"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaWaAggResourceRequestReceived"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaWaAggResourceResponseSent"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaWaAggCancelWorkRequestReceived"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaWaAggOfferTaskAcceptedSent"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaWaAggOfferTaskCancelledSent"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaWaAggOfferTaskResponseReceived"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaWaAggOfferTaskSent"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaWaAggResyncResourceResponseAckSent"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaWaAggResyncResourceResponseReceived"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaWaAggResyncResourceSent"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaWaAggWorkRequestReceived"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaWaAggQueueEventSent"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaWaAggWorkRequestCanceledSent"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaWaAggWRIFailureResponseSent"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaWaAggRRIFailureResponseSent"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaWaAggResourceResponseCanceledSent"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaWaAggCancelQueueEventSent"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaWaAggMessageSentError"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaWaRtResourceCriteriaCount"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaWaRtSelectionStrategyAttrCount"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaWaRtAttributeCriteriaCount"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaWaRtResourceCount"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaWaRtAttributeValueCount"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaWaRtSkillCompetencyCount"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaWaRtResourceMemberCount"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaWaRtTotalResourceCount"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaWaRtTotalContactCount"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaWaRtTotalResourceManagerCount"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaWaRtTotalContactManagerCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmmcaWaGroup = cmmcaWaGroup.setStatus('current')
if mibBuilder.loadTexts: cmmcaWaGroup.setDescription('The Wa group defines the set of objects for the Work Assigner service. All runtime servers will populate these objects.')
cmmcaMpaGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 664, 2, 2, 11)).setObjects(("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaMpaAggNewCalls"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaMpaAggConnectsRcv"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaMpaAggAvgLatency"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaMpaAggFailedInvites"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaMpaAggFailedReinvites"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaMpaAggTotalCalls"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaMpaRtIncomingCalls"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaMpaRtOutgoingCalls"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaMpaRtActiveClientSessions"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaMpaAggTotalClientsRegistered"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaMpaAggInstantMessagesSent"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaMpaAggInstantMessagesReceived"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaMpaAggPresenceUpdatesReceived"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaMpaAggPresenceUpdatesBytesRcv"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaMpaRtActiveRegisteredSipAddresses"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaMpaRtActiveSipControlAddresses"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaMpaRtActiveIMAddresses"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaMpaRtActiveMonitoredPresenceAddresses"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaMpaAggTotalRegisteredSipAddresses"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaMpaAggTotalSipControlAddressesRegistered"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaMpaAggTotalIMAddressesRegistered"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaMpaAggTotalMonitoredPresenceAddressesRegistered"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaMpaRtActiveInteractions"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaMpaRtActivePublishAddresses"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaMpaRtTotalPublishAddressesRegistered"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmmcaMpaGroup = cmmcaMpaGroup.setStatus('current')
if mibBuilder.loadTexts: cmmcaMpaGroup.setDescription('The Mpa group defines the set of objects for the Media Platform adapter service. All runtime servers will populate these objects.')
cmmcaRaGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 664, 2, 2, 12)).setObjects(("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaRaAggMsgReceived"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaRaAggMsgSent"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaRaAggContactDetailMesgReceived"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaRaAggContactDetailMesgDispatched"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaRaAggContactDetailAttribMsgDispatched"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaRaAggContactSegDetailMsgReceived"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaRaAggContactSegDetailMesgDispatched"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaRaAggContactSegMediaDetailMsgDispatched"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaRaAggResourceTaskDetailMsgReceived"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaRaAggResourceTaskDetailMsgDispatched"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaRaAggTaskStateChangeMsgReceived"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaRaAggResourceStateChngMesgReceived"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaRaAggResourceStateChngMsgDispatched"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaRaAggVersionResponseRecieved"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaRaAggVersionRequestDispatched"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaRaAggNodeSyncDispatched"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmmcaRaGroup = cmmcaRaGroup.setStatus('current')
if mibBuilder.loadTexts: cmmcaRaGroup.setDescription('The Ra group defines the set of objects for the Reporting Adapter service. All runtime servers will populate these objects.')
cmmcaRsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 664, 2, 2, 13)).setObjects(("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaRsAggTotalContactDetailRecords"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaRsAggTotalContactDetailAttributeRecords"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaRsAggTotalContactSegmentDetailRecords"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaRsAggTotalResourceTaskDetailRecords"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaRsAggTotalResourceEventDetailRecords"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaRsAggTotalAssignmentQueDetailRecords"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaRsAggTotalAssignmentQueAttribRecords"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaRsAggTotalContactSegmentMediaDetailRecords"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaRsAggTotalDBWrites"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaRsIntContactDetailRecords"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaRsIntContactDetailAttribRecords"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaRsIntContactSegmentDetailRecords"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaRsIntResourceTaskDetailRecords"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaRsIntResourceEventDetailRecords"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaRsIntAssignmentQueDetailRecords"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaRsIntAssignmentQueAttribRecords"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaRsIntContactSegmentMediaDetailRecords"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaRsIntDBWrites"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaRsRtDBStatus"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaRsRtNumberActiveDBUserSessions"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaRsDBSizeAllocated"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaRsRtDBSpaceUsed"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaRsRtDBSpaceFree"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaRsRtDBPercentUsed"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaRsRtDBPercentFree"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaRsRtTransactionLogSize"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmmcaRsGroup = cmmcaRsGroup.setStatus('current')
if mibBuilder.loadTexts: cmmcaRsGroup.setDescription('The Rs group defines the set of objects for the Reporting Subsystem service. All reporting servers will populate these objects.')
cmmcaIcmgwGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 664, 2, 2, 14)).setObjects(("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaIcmgwAggSocketConnects"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaIcmgwAggSocketDisconnects"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaIcmgwAggACMIBytesSent"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaIcmgwAggACMIBytesRcvd"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaIcmgwAggACMIMsgsSent"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaIcmgwAggACMIMsgsRcvd"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaIcmgwRtACMIOutQueueDepth"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaIcmgwRtACMIOutQueueWait"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaIcmgwRtAgentsMonitored"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaIcmgwRtAqsMonitored"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaIcmgwRtRoutesMonitored"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaIcmgwRtPendingQueryAgentStateDlgs"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaIcmgwRtPendingGetContactDetailDlgs"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaIcmgwAggQueryAgentStateTimeouts"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaIcmgwAggGetContactDetailTimeouts"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaIcmgwRtQueryAgentStateDelay"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaIcmgwRtGetContactDetailDelay"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaIcmgwRtPendingCallTermEvents"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmmcaIcmgwGroup = cmmcaIcmgwGroup.setStatus('current')
if mibBuilder.loadTexts: cmmcaIcmgwGroup.setDescription('The Icmgw group defines the set of objects for the ICMGW service. All runtime servers will populate these objects.')
cmmcaNotificationInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 664, 2, 2, 15)).setObjects(("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaEventMessageId"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaEventHostName"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaEventAppName"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaEventMessageName"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaEventState"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaEventSeverity"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaEventTimestamp"), ("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaEventText"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmmcaNotificationInfoGroup = cmmcaNotificationInfoGroup.setStatus('current')
if mibBuilder.loadTexts: cmmcaNotificationInfoGroup.setDescription('This group defines the set of Notification objects for CUEA.')
cmmcaEventsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 664, 2, 2, 16)).setObjects(("CISCO-MMODAL-CONTACT-APPS-MIB", "cmmcaMIBEvent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmmcaEventsGroup = cmmcaEventsGroup.setStatus('current')
if mibBuilder.loadTexts: cmmcaEventsGroup.setDescription('This group defines the notification types defined in this MIB.')
mibBuilder.exportSymbols("CISCO-MMODAL-CONTACT-APPS-MIB", cmmcaRtRoutingDomain=cmmcaRtRoutingDomain, cmmcaEventsGroup=cmmcaEventsGroup, cmmcaIcmgwAggACMIMsgsSent=cmmcaIcmgwAggACMIMsgsSent, cmmcaDeviceIndex=cmmcaDeviceIndex, cmmcaIcmgwRtRoutesMonitored=cmmcaIcmgwRtRoutesMonitored, cmmcaRmAggNumOffersAccept=cmmcaRmAggNumOffersAccept, cmmcaRdaEntry=cmmcaRdaEntry, cmmcaWaRtAssignmentQueCount=cmmcaWaRtAssignmentQueCount, cmmcaNextNodeStatus=cmmcaNextNodeStatus, cmmcaRdaAggNumUnSuccessPresenceNotifications=cmmcaRdaAggNumUnSuccessPresenceNotifications, cmmcaCmEntry=cmmcaCmEntry, cmmcaRsAggTotalContactSegmentMediaDetailRecords=cmmcaRsAggTotalContactSegmentMediaDetailRecords, cmmcaRaAggContactDetailMesgDispatched=cmmcaRaAggContactDetailMesgDispatched, cmmcaIcmgwAggACMIMsgsRcvd=cmmcaIcmgwAggACMIMsgsRcvd, cmmcaTPoolRtMaxThreadsUsed=cmmcaTPoolRtMaxThreadsUsed, cmmcaRsDBSizeAllocated=cmmcaRsDBSizeAllocated, cmmcaRdaTable=cmmcaRdaTable, cmmcaDeviceDescription=cmmcaDeviceDescription, cmmcaCmTable=cmmcaCmTable, cmmcaBreAggMaxConcurrentInstancesDt=cmmcaBreAggMaxConcurrentInstancesDt, cmmcaCmRtNumActiveCalls=cmmcaCmRtNumActiveCalls, cmmcaMIBEvent=cmmcaMIBEvent, cmmcaRdaIntNumUnSuccessPresenceNotifications=cmmcaRdaIntNumUnSuccessPresenceNotifications, cmmcaRtMessageThroughput=cmmcaRtMessageThroughput, cmmcaBreAggAvgConcurrentInstances=cmmcaBreAggAvgConcurrentInstances, cmmcaClusterId=cmmcaClusterId, cmmcaRmRtAgentsReserved=cmmcaRmRtAgentsReserved, cmmcaWaEntry=cmmcaWaEntry, cmmcaCmAggNumCallArrivals=cmmcaCmAggNumCallArrivals, CmmcaServiceStatus=CmmcaServiceStatus, cmmcaRaAggTaskStateChangeMsgReceived=cmmcaRaAggTaskStateChangeMsgReceived, cmmcaIcmgwAggQueryAgentStateTimeouts=cmmcaIcmgwAggQueryAgentStateTimeouts, cmmcaWaAggOfferTaskSent=cmmcaWaAggOfferTaskSent, cmmcaMpaAggFailedInvites=cmmcaMpaAggFailedInvites, cmmcaCmIntMaxCallInQueueTimeDt=cmmcaCmIntMaxCallInQueueTimeDt, cmmcaCmRtNumCallConnecting=cmmcaCmRtNumCallConnecting, cmmcaMaxThreadsAvailable=cmmcaMaxThreadsAvailable, cmmcaEventSeverity=cmmcaEventSeverity, cmmcaRsRtDBStatus=cmmcaRsRtDBStatus, cmmcaWaRtAttributeDefCount=cmmcaWaRtAttributeDefCount, cmmcaMpaAggTotalSipControlAddressesRegistered=cmmcaMpaAggTotalSipControlAddressesRegistered, cmmcaMpaRtActiveIMAddresses=cmmcaMpaRtActiveIMAddresses, cmmcaRmAggNumOffersReject=cmmcaRmAggNumOffersReject, cmmcaBreRtActiveScripts=cmmcaBreRtActiveScripts, cmmcaRsIntContactSegmentMediaDetailRecords=cmmcaRsIntContactSegmentMediaDetailRecords, cmmcaWaRtTotalContactManagerCount=cmmcaWaRtTotalContactManagerCount, cmmcaRtMsgReceived=cmmcaRtMsgReceived, cmmcaIcmgwRtAqsMonitored=cmmcaIcmgwRtAqsMonitored, cmmcaIcmgwAggSocketDisconnects=cmmcaIcmgwAggSocketDisconnects, CmmcaConditionStatus=CmmcaConditionStatus, cmmcaThreadPool=cmmcaThreadPool, cmmcaBreEntry=cmmcaBreEntry, cmmcaServiceStatus=cmmcaServiceStatus, cmmcaBreAggTotalAbnormalContactEndings=cmmcaBreAggTotalAbnormalContactEndings, cmmcaBreAggLoadedScripts=cmmcaBreAggLoadedScripts, cmmcaRtLogLevel=cmmcaRtLogLevel, cmmcaRmAggNumOffersTimedOut=cmmcaRmAggNumOffersTimedOut, cmmcaRdaIntNumMsgProc=cmmcaRdaIntNumMsgProc, cmmcaBreIntTotalAbnormalContactEndings=cmmcaBreIntTotalAbnormalContactEndings, cmmcaMpaAggTotalMonitoredPresenceAddressesRegistered=cmmcaMpaAggTotalMonitoredPresenceAddressesRegistered, cmmcaRsAggTotalContactSegmentDetailRecords=cmmcaRsAggTotalContactSegmentDetailRecords, cmmcaNotificationInfo=cmmcaNotificationInfo, cmmcaCmAggAvgCallInQueueTime=cmmcaCmAggAvgCallInQueueTime, cmmcaEnvRtCurrMemAvail=cmmcaEnvRtCurrMemAvail, CmmcaSystemConditionStatus=CmmcaSystemConditionStatus, cmmcaRsIntContactDetailRecords=cmmcaRsIntContactDetailRecords, cmmcaWaRtTotalResourceCount=cmmcaWaRtTotalResourceCount, ciscoMmodalContactAppsMIBComplianceRev=ciscoMmodalContactAppsMIBComplianceRev, cmmcaBreAggTotalResourceInstanceTerminations=cmmcaBreAggTotalResourceInstanceTerminations, cmmcaSystemConditionStatus=cmmcaSystemConditionStatus, cmmcaCmIntMaxCallDurationTime=cmmcaCmIntMaxCallDurationTime, cmmcaSystemConditionMessage=cmmcaSystemConditionMessage, cmmcaBreIntTotalResourceInstanceInitiations=cmmcaBreIntTotalResourceInstanceInitiations, cmmcaRmRtAgentsWrapUp=cmmcaRmRtAgentsWrapUp, cmmcaNextNodeTable=cmmcaNextNodeTable, cmmcaWaRtResourceCount=cmmcaWaRtResourceCount, cmmcaCmRtNumCallTerminating=cmmcaCmRtNumCallTerminating, cmmcaRaAggVersionRequestDispatched=cmmcaRaAggVersionRequestDispatched, cmmcaRmGroup=cmmcaRmGroup, cmmcaBreIntTotalContactInstanceTerminations=cmmcaBreIntTotalContactInstanceTerminations, cmmcaCmRtNumCallTransferring=cmmcaCmRtNumCallTransferring, cmmcaWaGroup=cmmcaWaGroup, cmmcaBreAggTotalInstanceInitiations=cmmcaBreAggTotalInstanceInitiations, cmmcaMpaRtTotalPublishAddressesRegistered=cmmcaMpaRtTotalPublishAddressesRegistered, cmmcaSystemStatus=cmmcaSystemStatus, cmmcaRmIntNumOffersReject=cmmcaRmIntNumOffersReject, cmmcaBreAggTotalResourceInstanceInitiations=cmmcaBreAggTotalResourceInstanceInitiations, cmmcaWaTable=cmmcaWaTable, cmmcaRtUptime=cmmcaRtUptime, cmmcaRsIntAssignmentQueDetailRecords=cmmcaRsIntAssignmentQueDetailRecords, cmmcaRaAggContactSegDetailMesgDispatched=cmmcaRaAggContactSegDetailMesgDispatched, CmmcaNextNodeStatus=CmmcaNextNodeStatus, cmmcaCmIntAvgCallDurationTime=cmmcaCmIntAvgCallDurationTime, ciscoMmodalContactAppsMIB=ciscoMmodalContactAppsMIB, cmmcaMpaAggAvgLatency=cmmcaMpaAggAvgLatency, cmmcaIcmgwRtACMIOutQueueDepth=cmmcaIcmgwRtACMIOutQueueDepth, cmmcaNotificationInfoGroup=cmmcaNotificationInfoGroup, cmmcaBreAggTotalContactInstanceTerminations=cmmcaBreAggTotalContactInstanceTerminations, cmmcaMpaAggInstantMessagesSent=cmmcaMpaAggInstantMessagesSent, cmmcaTimeZoneName=cmmcaTimeZoneName, cmmcaRsIntResourceTaskDetailRecords=cmmcaRsIntResourceTaskDetailRecords, cmmcaRsRtDBSpaceUsed=cmmcaRsRtDBSpaceUsed, cmmcaWaAggResyncResourceSent=cmmcaWaAggResyncResourceSent, cmmcaCmAggAvgCallDurationTime=cmmcaCmAggAvgCallDurationTime, cmmcaWaAggCancelResourceRequestReceived=cmmcaWaAggCancelResourceRequestReceived, cmmcaRdaRtNumActiveClients=cmmcaRdaRtNumActiveClients, cmmcaBreIntAvgConcurrentInstances=cmmcaBreIntAvgConcurrentInstances, cmmcaMpaAggPresenceUpdatesBytesRcv=cmmcaMpaAggPresenceUpdatesBytesRcv, cmmcaRuntimeInfoGroup=cmmcaRuntimeInfoGroup, cmmcaCmGroup=cmmcaCmGroup, cmmcaEnvRtMaxMemAvail=cmmcaEnvRtMaxMemAvail, cmmcaSystemConditionId=cmmcaSystemConditionId, cmmcaRaAggContactDetailAttribMsgDispatched=cmmcaRaAggContactDetailAttribMsgDispatched, ciscoMmodalContactAppsMIBNotifs=ciscoMmodalContactAppsMIBNotifs, cmmcaBreAggTotalAbnormalEndings=cmmcaBreAggTotalAbnormalEndings, cmmcaRsIntAssignmentQueAttribRecords=cmmcaRsIntAssignmentQueAttribRecords, cmmcaGeneralInfo=cmmcaGeneralInfo, cmmcaEventMessageId=cmmcaEventMessageId, cmmcaWaAggWorkRequestReceived=cmmcaWaAggWorkRequestReceived, cmmcaStartTime=cmmcaStartTime, cmmcaSystemConditionDescription=cmmcaSystemConditionDescription, cmmcaWaRtTotalContactCount=cmmcaWaRtTotalContactCount, CmmcaServiceType=CmmcaServiceType, cmmcaMpaAggInstantMessagesReceived=cmmcaMpaAggInstantMessagesReceived, cmmcaRaAggContactSegDetailMsgReceived=cmmcaRaAggContactSegDetailMsgReceived, cmmcaWaAggResyncResourceResponseReceived=cmmcaWaAggResyncResourceResponseReceived, cmmcaNextNodeType=cmmcaNextNodeType, cmmcaWaAggCancelWorkRequestReceived=cmmcaWaAggCancelWorkRequestReceived, cmmcaGeneralInfoGroup=cmmcaGeneralInfoGroup, cmmcaNextNodeIpAddr=cmmcaNextNodeIpAddr, cmmcaEnvRtUpTime=cmmcaEnvRtUpTime, cmmcaCmAggMaxCallDurationTimeDt=cmmcaCmAggMaxCallDurationTimeDt, cmmcaRmRtAgentsReady=cmmcaRmRtAgentsReady, cmmcaRmIntNumOffersTimedOut=cmmcaRmIntNumOffersTimedOut, cmmcaRaAggResourceStateChngMesgReceived=cmmcaRaAggResourceStateChngMesgReceived, cmmcaRsRtDBPercentUsed=cmmcaRsRtDBPercentUsed, ciscoMmodalContactAppsMIBCompliances=ciscoMmodalContactAppsMIBCompliances, cmmcaServices=cmmcaServices, cmmcaWaRtSkillCount=cmmcaWaRtSkillCount, cmmcaSystemConditionEntry=cmmcaSystemConditionEntry, cmmcaServiceIntPeriod=cmmcaServiceIntPeriod, cmmcaCmRtNumCallTrying=cmmcaCmRtNumCallTrying, cmmcaSystemConditionTimeStamp=cmmcaSystemConditionTimeStamp, cmmcaIcmgwEntry=cmmcaIcmgwEntry, cmmcaCmIntMaxCallInQueueTime=cmmcaCmIntMaxCallInQueueTime, cmmcaRtThreadsInUse=cmmcaRtThreadsInUse, cmmcaMpaGroup=cmmcaMpaGroup, cmmcaNextNodeIpAddrType=cmmcaNextNodeIpAddrType, cmmcaCmIntMaxCallDurationTimeDt=cmmcaCmIntMaxCallDurationTimeDt, cmmcaIcmgwAggACMIBytesSent=cmmcaIcmgwAggACMIBytesSent, cmmcaSystemConditionIndex=cmmcaSystemConditionIndex, cmmcaIcmgwRtACMIOutQueueWait=cmmcaIcmgwRtACMIOutQueueWait, ciscoMmodalContactAppsMIBConform=ciscoMmodalContactAppsMIBConform, cmmcaRaAggResourceTaskDetailMsgDispatched=cmmcaRaAggResourceTaskDetailMsgDispatched, cmmcaDeviceStatus=cmmcaDeviceStatus, cmmcaWaRtSelectionStrategyAttrCount=cmmcaWaRtSelectionStrategyAttrCount, cmmcaMaxMsgQMemAvail=cmmcaMaxMsgQMemAvail, cmmcaMpaAggTotalRegisteredSipAddresses=cmmcaMpaAggTotalRegisteredSipAddresses, cmmcaRsIntContactDetailAttribRecords=cmmcaRsIntContactDetailAttribRecords, cmmcaRaAggMsgReceived=cmmcaRaAggMsgReceived, cmmcaRsRtTransactionLogSize=cmmcaRsRtTransactionLogSize, cmmcaEventText=cmmcaEventText, cmmcaIcmgwTable=cmmcaIcmgwTable, cmmcaRaAggResourceStateChngMsgDispatched=cmmcaRaAggResourceStateChngMsgDispatched, cmmcaMpaAggTotalCalls=cmmcaMpaAggTotalCalls, cmmcaRsIntDBWrites=cmmcaRsIntDBWrites, cmmcaMpaRtActiveSipControlAddresses=cmmcaMpaRtActiveSipControlAddresses, cmmcaIcmgwRtPendingCallTermEvents=cmmcaIcmgwRtPendingCallTermEvents, cmmcaCmAggMaxCallArrivalRate=cmmcaCmAggMaxCallArrivalRate, cmmcaCmIntAvgCallArrivalRate=cmmcaCmIntAvgCallArrivalRate, cmmcaMpaAggFailedReinvites=cmmcaMpaAggFailedReinvites, cmmcaBreAggTotalAbnormalResourceEndings=cmmcaBreAggTotalAbnormalResourceEndings, cmmcaRsAggTotalAssignmentQueDetailRecords=cmmcaRsAggTotalAssignmentQueDetailRecords, cmmcaRaAggVersionResponseRecieved=cmmcaRaAggVersionResponseRecieved, cmmcaTotalLicensesConfigured=cmmcaTotalLicensesConfigured, cmmcaEventAppName=cmmcaEventAppName, cmmcaServiceInfo=cmmcaServiceInfo, cmmcaRsIntResourceEventDetailRecords=cmmcaRsIntResourceEventDetailRecords, cmmcaWaAggResyncResourceResponseAckSent=cmmcaWaAggResyncResourceResponseAckSent, cmmcaRsTable=cmmcaRsTable, cmmcaBreIntTotalAbnormalResourceEndings=cmmcaBreIntTotalAbnormalResourceEndings, cmmcaWaRtSkillCompetencyCount=cmmcaWaRtSkillCompetencyCount, cmmcaServiceIndex=cmmcaServiceIndex, cmmcaWaAggWRIFailureResponseSent=cmmcaWaAggWRIFailureResponseSent, cmmcaIcmgwRtPendingGetContactDetailDlgs=cmmcaIcmgwRtPendingGetContactDetailDlgs, cmmcaRtCongested=cmmcaRtCongested, cmmcaLicenseInfoGroup=cmmcaLicenseInfoGroup, cmmcaRmRtAgentsLoggedIn=cmmcaRmRtAgentsLoggedIn, cmmcaBreRtCurrentInstances=cmmcaBreRtCurrentInstances, cmmcaDeviceInetAddress=cmmcaDeviceInetAddress, cmmcaThreadPoolGroup=cmmcaThreadPoolGroup, cmmcaTPoolRtRunningThreads=cmmcaTPoolRtRunningThreads, cmmcaRtTraceMask=cmmcaRtTraceMask, cmmcaWaRtTotalResourceManagerCount=cmmcaWaRtTotalResourceManagerCount, cmmcaNextNodeName=cmmcaNextNodeName, cmmcaEventState=cmmcaEventState, cmmcaRsRtDBPercentFree=cmmcaRsRtDBPercentFree, cmmcaIcmgwAggSocketConnects=cmmcaIcmgwAggSocketConnects, cmmcaRsAggTotalContactDetailRecords=cmmcaRsAggTotalContactDetailRecords, cmmcaRtMsgQMemPercentUsage=cmmcaRtMsgQMemPercentUsage, cmmcaRaAggNodeSyncDispatched=cmmcaRaAggNodeSyncDispatched, cmmcaSystemConditionTable=cmmcaSystemConditionTable, cmmcaLocalDeviceType=cmmcaLocalDeviceType, cmmcaIcmgwRtGetContactDetailDelay=cmmcaIcmgwRtGetContactDetailDelay, cmmcaRaTable=cmmcaRaTable, cmmcaRsEntry=cmmcaRsEntry, cmmcaBreAggTotalContactInstanceInitiations=cmmcaBreAggTotalContactInstanceInitiations, cmmcaRaAggContactSegMediaDetailMsgDispatched=cmmcaRaAggContactSegMediaDetailMsgDispatched, cmmcaWaAggRRIFailureResponseSent=cmmcaWaAggRRIFailureResponseSent, cmmcaVersion=cmmcaVersion, cmmcaBreIntMaxConcurrentInstances=cmmcaBreIntMaxConcurrentInstances, cmmcaClusterInfoEntry=cmmcaClusterInfoEntry, cmmcaEnvMaxThreadsUsed=cmmcaEnvMaxThreadsUsed, cmmcaRsAggTotalDBWrites=cmmcaRsAggTotalDBWrites, cmmcaRdaIntNumSuccessPresenceNotifications=cmmcaRdaIntNumSuccessPresenceNotifications, cmmcaBreGroup=cmmcaBreGroup, cmmcaCmIntAvgCallInQueueTime=cmmcaCmIntAvgCallInQueueTime, cmmcaWaAggWorkRequestCanceledSent=cmmcaWaAggWorkRequestCanceledSent, cmmcaRsAggTotalResourceEventDetailRecords=cmmcaRsAggTotalResourceEventDetailRecords, cmmcaNextNodeIndex=cmmcaNextNodeIndex, cmmcaWaRtResourceMemberCount=cmmcaWaRtResourceMemberCount, cmmcaEventMessageName=cmmcaEventMessageName, cmmcaRdaRtNumOutStandingOfferTasks=cmmcaRdaRtNumOutStandingOfferTasks, cmmcaEnvRtCurrThreadsInUse=cmmcaEnvRtCurrThreadsInUse, cmmcaRaAggContactDetailMesgReceived=cmmcaRaAggContactDetailMesgReceived, cmmcaTimeZoneOffsetHours=cmmcaTimeZoneOffsetHours, cmmcaCmAggMaxCallInQueueTimeDt=cmmcaCmAggMaxCallInQueueTimeDt, cmmcaTPoolRtIdleThreads=cmmcaTPoolRtIdleThreads, CmmcaIndex=CmmcaIndex, cmmcaBreTable=cmmcaBreTable, cmmcaBreAggMaxConcurrentInstances=cmmcaBreAggMaxConcurrentInstances, cmmcaServiceName=cmmcaServiceName, cmmcaRaAggMsgSent=cmmcaRaAggMsgSent, cmmcaTimeZoneOffsetMinutes=cmmcaTimeZoneOffsetMinutes, cmmcaRdaAggNumMsgProc=cmmcaRdaAggNumMsgProc, cmmcaServiceTable=cmmcaServiceTable, cmmcaMpaAggTotalIMAddressesRegistered=cmmcaMpaAggTotalIMAddressesRegistered, cmmcaCmRtNumCallRingBack=cmmcaCmRtNumCallRingBack, cmmcaServiceType=cmmcaServiceType, ciscoMmodalContactAppsMIBGroups=ciscoMmodalContactAppsMIBGroups, cmmcaRaGroup=cmmcaRaGroup, cmmcaBreAggTotalInstanceTerminations=cmmcaBreAggTotalInstanceTerminations, cmmcaWaRtAttributeCriteriaCount=cmmcaWaRtAttributeCriteriaCount, cmmcaEnvRtMaxMemUsed=cmmcaEnvRtMaxMemUsed, cmmcaWaAggResourceResponseSent=cmmcaWaAggResourceResponseSent, cmmcaMpaAggTotalClientsRegistered=cmmcaMpaAggTotalClientsRegistered, cmmcaServiceGroup=cmmcaServiceGroup, cmmcaCmRtNumCallRejecting=cmmcaCmRtNumCallRejecting, cmmcaEventHostName=cmmcaEventHostName, cmmcaEnableNotifications=cmmcaEnableNotifications, cmmcaRsIntContactSegmentDetailRecords=cmmcaRsIntContactSegmentDetailRecords, cmmcaRmEntry=cmmcaRmEntry, cmmcaIcmgwAggACMIBytesRcvd=cmmcaIcmgwAggACMIBytesRcvd, cmmcaServerName=cmmcaServerName)
mibBuilder.exportSymbols("CISCO-MMODAL-CONTACT-APPS-MIB", cmmcaDeviceType=cmmcaDeviceType, cmmcaServiceEntry=cmmcaServiceEntry, cmmcaTPoolRtMaxThreadsAvail=cmmcaTPoolRtMaxThreadsAvail, cmmcaMpaAggConnectsRcv=cmmcaMpaAggConnectsRcv, cmmcaWaAggMessageSentError=cmmcaWaAggMessageSentError, cmmcaRaAggResourceTaskDetailMsgReceived=cmmcaRaAggResourceTaskDetailMsgReceived, cmmcaCmAggMaxCallDurationTime=cmmcaCmAggMaxCallDurationTime, cmmcaWaAggResourceResponseCanceledSent=cmmcaWaAggResourceResponseCanceledSent, cmmcaWaAggQueueEventSent=cmmcaWaAggQueueEventSent, cmmcaWaRtAttributeValueCount=cmmcaWaRtAttributeValueCount, cmmcaNextNodeEntry=cmmcaNextNodeEntry, cmmcaRdaGroup=cmmcaRdaGroup, cmmcaRsGroup=cmmcaRsGroup, cmmcaWaAggOfferTaskCancelledSent=cmmcaWaAggOfferTaskCancelledSent, cmmcaWaAggTotalConfigErrors=cmmcaWaAggTotalConfigErrors, cmmcaLicenseInfo=cmmcaLicenseInfo, cmmcaMpaRtActiveRegisteredSipAddresses=cmmcaMpaRtActiveRegisteredSipAddresses, cmmcaRaEntry=cmmcaRaEntry, cmmcaRsAggTotalContactDetailAttributeRecords=cmmcaRsAggTotalContactDetailAttributeRecords, cmmcaRmRtAgentsNoQueue=cmmcaRmRtAgentsNoQueue, cmmcaCmIntNumCallArrivals=cmmcaCmIntNumCallArrivals, CmmcaSeverityLevel=CmmcaSeverityLevel, cmmcaRmIntNumOffersAccept=cmmcaRmIntNumOffersAccept, cmmcaRtLicensesAvailable=cmmcaRtLicensesAvailable, cmmcaClusterInfoTable=cmmcaClusterInfoTable, cmmcaWaAggOfferTaskResponseReceived=cmmcaWaAggOfferTaskResponseReceived, cmmcaBreAggDistinctScripts=cmmcaBreAggDistinctScripts, cmmcaWaRtSelectionStrategyCount=cmmcaWaRtSelectionStrategyCount, cmmcaWaAggResourceRequestReceived=cmmcaWaAggResourceRequestReceived, cmmcaDeviceName=cmmcaDeviceName, cmmcaRsAggTotalAssignmentQueAttribRecords=cmmcaRsAggTotalAssignmentQueAttribRecords, ciscoMmodalContactAppsMIBObjects=ciscoMmodalContactAppsMIBObjects, cmmcaBreIntTotalResourceInstanceTerminations=cmmcaBreIntTotalResourceInstanceTerminations, cmmcaCmRtNumCallInitial=cmmcaCmRtNumCallInitial, cmmcaBreIntTotalContactInstanceInitiations=cmmcaBreIntTotalContactInstanceInitiations, cmmcaMpaRtActiveClientSessions=cmmcaMpaRtActiveClientSessions, cmmcaBreIntTotalAbnormalEndings=cmmcaBreIntTotalAbnormalEndings, cmmcaBreIntMaxConcurrentInstancesDt=cmmcaBreIntMaxConcurrentInstancesDt, cmmcaTPoolRtCoreThreads=cmmcaTPoolRtCoreThreads, cmmcaMpaRtOutgoingCalls=cmmcaMpaRtOutgoingCalls, cmmcaSystemConditionSeverity=cmmcaSystemConditionSeverity, cmmcaMpaTable=cmmcaMpaTable, cmmcaRsRtNumberActiveDBUserSessions=cmmcaRsRtNumberActiveDBUserSessions, cmmcaCmRtNumCallConnected=cmmcaCmRtNumCallConnected, cmmcaMpaRtActiveInteractions=cmmcaMpaRtActiveInteractions, cmmcaCmAggMaxCallArrivalRateDt=cmmcaCmAggMaxCallArrivalRateDt, cmmcaDescription=cmmcaDescription, PYSNMP_MODULE_ID=ciscoMmodalContactAppsMIB, cmmcaMpaRtIncomingCalls=cmmcaMpaRtIncomingCalls, cmmcaMpaAggNewCalls=cmmcaMpaAggNewCalls, cmmcaRdaAggNumSuccessPresenceNotifications=cmmcaRdaAggNumSuccessPresenceNotifications, cmmcaCmAggAvgCallArrivalRate=cmmcaCmAggAvgCallArrivalRate, cmmcaMpaRtActiveMonitoredPresenceAddresses=cmmcaMpaRtActiveMonitoredPresenceAddresses, cmmcaIcmgwAggGetContactDetailTimeouts=cmmcaIcmgwAggGetContactDetailTimeouts, cmmcaBreIntTotalInstanceInitiations=cmmcaBreIntTotalInstanceInitiations, cmmcaEventTimestamp=cmmcaEventTimestamp, cmmcaBreIntTotalInstanceTerminations=cmmcaBreIntTotalInstanceTerminations, cmmcaRsRtDBSpaceFree=cmmcaRsRtDBSpaceFree, cmmcaRmRtAgentsOnCalls=cmmcaRmRtAgentsOnCalls, cmmcaIcmgwRtPendingQueryAgentStateDlgs=cmmcaIcmgwRtPendingQueryAgentStateDlgs, cmmcaIcmgwGroup=cmmcaIcmgwGroup, cmmcaIcmgwRtAgentsMonitored=cmmcaIcmgwRtAgentsMonitored, cmmcaCmAggMaxCallInQueueTime=cmmcaCmAggMaxCallInQueueTime, cmmcaIcmgwRtQueryAgentStateDelay=cmmcaIcmgwRtQueryAgentStateDelay, cmmcaRsAggTotalResourceTaskDetailRecords=cmmcaRsAggTotalResourceTaskDetailRecords, cmmcaRmTable=cmmcaRmTable, cmmcaWaRtResourceCriteriaCount=cmmcaWaRtResourceCriteriaCount, cmmcaWaAggCancelQueueEventSent=cmmcaWaAggCancelQueueEventSent, cmmcaRuntimeInfo=cmmcaRuntimeInfo, cmmcaMpaRtActivePublishAddresses=cmmcaMpaRtActivePublishAddresses, cmmcaDeviceInetAddressType=cmmcaDeviceInetAddressType, cmmcaEnvRtCurrMemUsed=cmmcaEnvRtCurrMemUsed, cmmcaMpaAggPresenceUpdatesReceived=cmmcaMpaAggPresenceUpdatesReceived, cmmcaMpaEntry=cmmcaMpaEntry, cmmcaRdaRtNumInactiveClients=cmmcaRdaRtNumInactiveClients, cmmcaWaAggOfferTaskAcceptedSent=cmmcaWaAggOfferTaskAcceptedSent, cmmcaOpsConsoleURL=cmmcaOpsConsoleURL)
