#
# PySNMP MIB module Nortel-Magellan-Passport-IpCosMIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Nortel-Magellan-Passport-IpCosMIB
# Produced by pysmi-0.3.4 at Wed May  1 14:27:35 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion")
vrIpIndex, vrIp = mibBuilder.importSymbols("Nortel-Magellan-Passport-IpMIB", "vrIpIndex", "vrIp")
StorageType, Integer32, Unsigned32, RowStatus, DisplayString = mibBuilder.importSymbols("Nortel-Magellan-Passport-StandardTextualConventionsMIB", "StorageType", "Integer32", "Unsigned32", "RowStatus", "DisplayString")
AsciiStringIndex, NonReplicated, Link, Hex = mibBuilder.importSymbols("Nortel-Magellan-Passport-TextualConventionsMIB", "AsciiStringIndex", "NonReplicated", "Link", "Hex")
passportMIBs, = mibBuilder.importSymbols("Nortel-Magellan-Passport-UsefulDefinitionsMIB", "passportMIBs")
vrIndex, = mibBuilder.importSymbols("Nortel-Magellan-Passport-VirtualRouterMIB", "vrIndex")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
iso, MibIdentifier, NotificationType, Counter64, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, Counter32, Gauge32, Bits, Unsigned32, IpAddress, ModuleIdentity, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "MibIdentifier", "NotificationType", "Counter64", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "Counter32", "Gauge32", "Bits", "Unsigned32", "IpAddress", "ModuleIdentity", "TimeTicks")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
ipCosMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 162))
vrIpPg = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 6, 20))
vrIpPgRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 6, 20, 1), )
if mibBuilder.loadTexts: vrIpPgRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: vrIpPgRowStatusTable.setDescription('This entry controls the addition and deletion of vrIpPg components.')
vrIpPgRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 6, 20, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VirtualRouterMIB", "vrIndex"), (0, "Nortel-Magellan-Passport-IpMIB", "vrIpIndex"), (0, "Nortel-Magellan-Passport-IpCosMIB", "vrIpPgIndex"))
if mibBuilder.loadTexts: vrIpPgRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vrIpPgRowStatusEntry.setDescription('A single entry in the table represents a single vrIpPg component.')
vrIpPgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 6, 20, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrIpPgRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: vrIpPgRowStatus.setDescription('This variable is used as the basis for SNMP naming of vrIpPg components. These components can be added and deleted.')
vrIpPgComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 6, 20, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrIpPgComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: vrIpPgComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
vrIpPgStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 6, 20, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrIpPgStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: vrIpPgStorageType.setDescription('This variable represents the storage type value for the vrIpPg tables.')
vrIpPgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 6, 20, 1, 1, 10), AsciiStringIndex().subtype(subtypeSpec=ValueSizeConstraint(1, 20)))
if mibBuilder.loadTexts: vrIpPgIndex.setStatus('mandatory')
if mibBuilder.loadTexts: vrIpPgIndex.setDescription('This variable represents the index for the vrIpPg tables.')
vrIpPgUsersTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 6, 20, 432), )
if mibBuilder.loadTexts: vrIpPgUsersTable.setStatus('mandatory')
if mibBuilder.loadTexts: vrIpPgUsersTable.setDescription('This attribute specifies a list of components that are using this CosPolicyGroup.')
vrIpPgUsersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 6, 20, 432, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VirtualRouterMIB", "vrIndex"), (0, "Nortel-Magellan-Passport-IpMIB", "vrIpIndex"), (0, "Nortel-Magellan-Passport-IpCosMIB", "vrIpPgIndex"), (0, "Nortel-Magellan-Passport-IpCosMIB", "vrIpPgUsersValue"))
if mibBuilder.loadTexts: vrIpPgUsersEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vrIpPgUsersEntry.setDescription('An entry in the vrIpPgUsersTable.')
vrIpPgUsersValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 6, 20, 432, 1, 1), Link()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrIpPgUsersValue.setStatus('mandatory')
if mibBuilder.loadTexts: vrIpPgUsersValue.setDescription('This variable represents both the value and the index for the vrIpPgUsersTable.')
vrIpPgUsersRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 6, 20, 432, 1, 2), RowStatus()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: vrIpPgUsersRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: vrIpPgUsersRowStatus.setDescription('This variable is used to control the addition and deletion of individual values of the vrIpPgUsersTable.')
vrIpPgPolicy = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 6, 20, 2))
vrIpPgPolicyRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 6, 20, 2, 1), )
if mibBuilder.loadTexts: vrIpPgPolicyRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: vrIpPgPolicyRowStatusTable.setDescription('This entry controls the addition and deletion of vrIpPgPolicy components.')
vrIpPgPolicyRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 6, 20, 2, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VirtualRouterMIB", "vrIndex"), (0, "Nortel-Magellan-Passport-IpMIB", "vrIpIndex"), (0, "Nortel-Magellan-Passport-IpCosMIB", "vrIpPgIndex"), (0, "Nortel-Magellan-Passport-IpCosMIB", "vrIpPgPolicyIndex"))
if mibBuilder.loadTexts: vrIpPgPolicyRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vrIpPgPolicyRowStatusEntry.setDescription('A single entry in the table represents a single vrIpPgPolicy component.')
vrIpPgPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 6, 20, 2, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrIpPgPolicyRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: vrIpPgPolicyRowStatus.setDescription('This variable is used as the basis for SNMP naming of vrIpPgPolicy components. These components can be added and deleted.')
vrIpPgPolicyComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 6, 20, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrIpPgPolicyComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: vrIpPgPolicyComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
vrIpPgPolicyStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 6, 20, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrIpPgPolicyStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: vrIpPgPolicyStorageType.setDescription('This variable represents the storage type value for the vrIpPgPolicy tables.')
vrIpPgPolicyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 6, 20, 2, 1, 1, 10), AsciiStringIndex().subtype(subtypeSpec=ValueSizeConstraint(1, 20)))
if mibBuilder.loadTexts: vrIpPgPolicyIndex.setStatus('mandatory')
if mibBuilder.loadTexts: vrIpPgPolicyIndex.setDescription('This variable represents the index for the vrIpPgPolicy tables.')
vrIpPgPolicyProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 6, 20, 2, 10), )
if mibBuilder.loadTexts: vrIpPgPolicyProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: vrIpPgPolicyProvTable.setDescription('This group contains the provisionable attributes for the Policy component.')
vrIpPgPolicyProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 6, 20, 2, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VirtualRouterMIB", "vrIndex"), (0, "Nortel-Magellan-Passport-IpMIB", "vrIpIndex"), (0, "Nortel-Magellan-Passport-IpCosMIB", "vrIpPgIndex"), (0, "Nortel-Magellan-Passport-IpCosMIB", "vrIpPgPolicyIndex"))
if mibBuilder.loadTexts: vrIpPgPolicyProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vrIpPgPolicyProvEntry.setDescription('An entry in the vrIpPgPolicyProvTable.')
vrIpPgPolicyCosTreatmentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 6, 20, 2, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrIpPgPolicyCosTreatmentIndex.setStatus('mandatory')
if mibBuilder.loadTexts: vrIpPgPolicyCosTreatmentIndex.setDescription('This attribute specifies the Class Of Service (COS) treatment a packet receives if this policy applies. If the value of this attribute is set to n, then the COS treatment is defined by the CosTreatment/n component of the same CosPolicyGroup.')
vrIpPgPolicyTosMap = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 6, 20, 2, 2))
vrIpPgPolicyTosMapRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 6, 20, 2, 2, 1), )
if mibBuilder.loadTexts: vrIpPgPolicyTosMapRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: vrIpPgPolicyTosMapRowStatusTable.setDescription('This entry controls the addition and deletion of vrIpPgPolicyTosMap components.')
vrIpPgPolicyTosMapRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 6, 20, 2, 2, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VirtualRouterMIB", "vrIndex"), (0, "Nortel-Magellan-Passport-IpMIB", "vrIpIndex"), (0, "Nortel-Magellan-Passport-IpCosMIB", "vrIpPgIndex"), (0, "Nortel-Magellan-Passport-IpCosMIB", "vrIpPgPolicyIndex"), (0, "Nortel-Magellan-Passport-IpCosMIB", "vrIpPgPolicyTosMapIndex"))
if mibBuilder.loadTexts: vrIpPgPolicyTosMapRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vrIpPgPolicyTosMapRowStatusEntry.setDescription('A single entry in the table represents a single vrIpPgPolicyTosMap component.')
vrIpPgPolicyTosMapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 6, 20, 2, 2, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrIpPgPolicyTosMapRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: vrIpPgPolicyTosMapRowStatus.setDescription('This variable is used as the basis for SNMP naming of vrIpPgPolicyTosMap components. These components can be added and deleted.')
vrIpPgPolicyTosMapComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 6, 20, 2, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrIpPgPolicyTosMapComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: vrIpPgPolicyTosMapComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
vrIpPgPolicyTosMapStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 6, 20, 2, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrIpPgPolicyTosMapStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: vrIpPgPolicyTosMapStorageType.setDescription('This variable represents the storage type value for the vrIpPgPolicyTosMap tables.')
vrIpPgPolicyTosMapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 6, 20, 2, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: vrIpPgPolicyTosMapIndex.setStatus('mandatory')
if mibBuilder.loadTexts: vrIpPgPolicyTosMapIndex.setDescription('This variable represents the index for the vrIpPgPolicyTosMap tables.')
vrIpPgPolicyTosMapOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 6, 20, 2, 2, 11), )
if mibBuilder.loadTexts: vrIpPgPolicyTosMapOperTable.setStatus('mandatory')
if mibBuilder.loadTexts: vrIpPgPolicyTosMapOperTable.setDescription('This group contains the operational attributes for the TosMap and the IpAddrLayer4Flow component.')
vrIpPgPolicyTosMapOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 6, 20, 2, 2, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VirtualRouterMIB", "vrIndex"), (0, "Nortel-Magellan-Passport-IpMIB", "vrIpIndex"), (0, "Nortel-Magellan-Passport-IpCosMIB", "vrIpPgIndex"), (0, "Nortel-Magellan-Passport-IpCosMIB", "vrIpPgPolicyIndex"), (0, "Nortel-Magellan-Passport-IpCosMIB", "vrIpPgPolicyTosMapIndex"))
if mibBuilder.loadTexts: vrIpPgPolicyTosMapOperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vrIpPgPolicyTosMapOperEntry.setDescription('An entry in the vrIpPgPolicyTosMapOperTable.')
vrIpPgPolicyTosMapCos = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 6, 20, 2, 2, 11, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrIpPgPolicyTosMapCos.setStatus('mandatory')
if mibBuilder.loadTexts: vrIpPgPolicyTosMapCos.setDescription('This attribute indicates the Class Of Service (COS) with which a packet receives if this policy applies. The value of this attribute is derived from the cos attribute of the referenced CosTreatment of the Policy.')
vrIpPgPolicyTosMapTosTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 6, 20, 2, 2, 434), )
if mibBuilder.loadTexts: vrIpPgPolicyTosMapTosTable.setStatus('mandatory')
if mibBuilder.loadTexts: vrIpPgPolicyTosMapTosTable.setDescription('This attribute specifies a list of TOS byte values. An incoming packet is considered to match this policy if its masked TOS byte matches a value in the list. The TOS byte of the incoming packet is anded with the tosMask attribute of the referenced CosTreatment component before the comparison is done. This attribute must contain at least one TOS byte value, otherwise a semantic check error is generated.')
vrIpPgPolicyTosMapTosEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 6, 20, 2, 2, 434, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VirtualRouterMIB", "vrIndex"), (0, "Nortel-Magellan-Passport-IpMIB", "vrIpIndex"), (0, "Nortel-Magellan-Passport-IpCosMIB", "vrIpPgIndex"), (0, "Nortel-Magellan-Passport-IpCosMIB", "vrIpPgPolicyIndex"), (0, "Nortel-Magellan-Passport-IpCosMIB", "vrIpPgPolicyTosMapIndex"), (0, "Nortel-Magellan-Passport-IpCosMIB", "vrIpPgPolicyTosMapTosValue"))
if mibBuilder.loadTexts: vrIpPgPolicyTosMapTosEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vrIpPgPolicyTosMapTosEntry.setDescription('An entry in the vrIpPgPolicyTosMapTosTable.')
vrIpPgPolicyTosMapTosValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 6, 20, 2, 2, 434, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrIpPgPolicyTosMapTosValue.setStatus('mandatory')
if mibBuilder.loadTexts: vrIpPgPolicyTosMapTosValue.setDescription('This variable represents both the value and the index for the vrIpPgPolicyTosMapTosTable.')
vrIpPgPolicyTosMapTosRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 6, 20, 2, 2, 434, 1, 2), RowStatus()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: vrIpPgPolicyTosMapTosRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: vrIpPgPolicyTosMapTosRowStatus.setDescription('This variable is used to control the addition and deletion of individual values of the vrIpPgPolicyTosMapTosTable.')
vrIpPgPolicyIpAddrLayer4Flow = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 6, 20, 2, 3))
vrIpPgPolicyIpAddrLayer4FlowRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 6, 20, 2, 3, 1), )
if mibBuilder.loadTexts: vrIpPgPolicyIpAddrLayer4FlowRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: vrIpPgPolicyIpAddrLayer4FlowRowStatusTable.setDescription('This entry controls the addition and deletion of vrIpPgPolicyIpAddrLayer4Flow components.')
vrIpPgPolicyIpAddrLayer4FlowRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 6, 20, 2, 3, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VirtualRouterMIB", "vrIndex"), (0, "Nortel-Magellan-Passport-IpMIB", "vrIpIndex"), (0, "Nortel-Magellan-Passport-IpCosMIB", "vrIpPgIndex"), (0, "Nortel-Magellan-Passport-IpCosMIB", "vrIpPgPolicyIndex"), (0, "Nortel-Magellan-Passport-IpCosMIB", "vrIpPgPolicyIpAddrLayer4FlowIndex"))
if mibBuilder.loadTexts: vrIpPgPolicyIpAddrLayer4FlowRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vrIpPgPolicyIpAddrLayer4FlowRowStatusEntry.setDescription('A single entry in the table represents a single vrIpPgPolicyIpAddrLayer4Flow component.')
vrIpPgPolicyIpAddrLayer4FlowRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 6, 20, 2, 3, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrIpPgPolicyIpAddrLayer4FlowRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: vrIpPgPolicyIpAddrLayer4FlowRowStatus.setDescription('This variable is used as the basis for SNMP naming of vrIpPgPolicyIpAddrLayer4Flow components. These components can be added and deleted.')
vrIpPgPolicyIpAddrLayer4FlowComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 6, 20, 2, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrIpPgPolicyIpAddrLayer4FlowComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: vrIpPgPolicyIpAddrLayer4FlowComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
vrIpPgPolicyIpAddrLayer4FlowStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 6, 20, 2, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrIpPgPolicyIpAddrLayer4FlowStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: vrIpPgPolicyIpAddrLayer4FlowStorageType.setDescription('This variable represents the storage type value for the vrIpPgPolicyIpAddrLayer4Flow tables.')
vrIpPgPolicyIpAddrLayer4FlowIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 6, 20, 2, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1023)))
if mibBuilder.loadTexts: vrIpPgPolicyIpAddrLayer4FlowIndex.setStatus('mandatory')
if mibBuilder.loadTexts: vrIpPgPolicyIpAddrLayer4FlowIndex.setDescription('This variable represents the index for the vrIpPgPolicyIpAddrLayer4Flow tables.')
vrIpPgPolicyIpAddrLayer4FlowProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 6, 20, 2, 3, 10), )
if mibBuilder.loadTexts: vrIpPgPolicyIpAddrLayer4FlowProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: vrIpPgPolicyIpAddrLayer4FlowProvTable.setDescription('This group contains the provisionable attributes for any flow related component which has prefix and prefix length as its parameters.')
vrIpPgPolicyIpAddrLayer4FlowProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 6, 20, 2, 3, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VirtualRouterMIB", "vrIndex"), (0, "Nortel-Magellan-Passport-IpMIB", "vrIpIndex"), (0, "Nortel-Magellan-Passport-IpCosMIB", "vrIpPgIndex"), (0, "Nortel-Magellan-Passport-IpCosMIB", "vrIpPgPolicyIndex"), (0, "Nortel-Magellan-Passport-IpCosMIB", "vrIpPgPolicyIpAddrLayer4FlowIndex"))
if mibBuilder.loadTexts: vrIpPgPolicyIpAddrLayer4FlowProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vrIpPgPolicyIpAddrLayer4FlowProvEntry.setDescription('An entry in the vrIpPgPolicyIpAddrLayer4FlowProvTable.')
vrIpPgPolicyIpAddrLayer4FlowPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 6, 20, 2, 3, 10, 1, 1), IpAddress().clone(hexValue="00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrIpPgPolicyIpAddrLayer4FlowPrefix.setStatus('mandatory')
if mibBuilder.loadTexts: vrIpPgPolicyIpAddrLayer4FlowPrefix.setDescription('This attribute specifies the IP address prefix, source or destination IP address, of which the policy applies. The matching of actual address to the prefix is done in conjunction with the prefixLength attribute. A prefix length of 0 means any IP address.')
vrIpPgPolicyIpAddrLayer4FlowPrefixLength = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 6, 20, 2, 3, 10, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrIpPgPolicyIpAddrLayer4FlowPrefixLength.setStatus('mandatory')
if mibBuilder.loadTexts: vrIpPgPolicyIpAddrLayer4FlowPrefixLength.setDescription('This attribute specifies the number of most significant bits of the IP address that are to be matched with the prefix. A prefix length of 0 means any IP address.')
vrIpPgPolicyIpAddrLayer4FlowProtoProvisionedTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 6, 20, 2, 3, 11), )
if mibBuilder.loadTexts: vrIpPgPolicyIpAddrLayer4FlowProtoProvisionedTable.setStatus('mandatory')
if mibBuilder.loadTexts: vrIpPgPolicyIpAddrLayer4FlowProtoProvisionedTable.setDescription('This group contains the provisionable attributes for any flow related component which has layer 4 (transport) protocol and port number as its parameters.')
vrIpPgPolicyIpAddrLayer4FlowProtoProvisionedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 6, 20, 2, 3, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VirtualRouterMIB", "vrIndex"), (0, "Nortel-Magellan-Passport-IpMIB", "vrIpIndex"), (0, "Nortel-Magellan-Passport-IpCosMIB", "vrIpPgIndex"), (0, "Nortel-Magellan-Passport-IpCosMIB", "vrIpPgPolicyIndex"), (0, "Nortel-Magellan-Passport-IpCosMIB", "vrIpPgPolicyIpAddrLayer4FlowIndex"))
if mibBuilder.loadTexts: vrIpPgPolicyIpAddrLayer4FlowProtoProvisionedEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vrIpPgPolicyIpAddrLayer4FlowProtoProvisionedEntry.setDescription('An entry in the vrIpPgPolicyIpAddrLayer4FlowProtoProvisionedTable.')
vrIpPgPolicyIpAddrLayer4FlowProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 6, 20, 2, 3, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 6, 17))).clone(namedValues=NamedValues(("icmp", 1), ("tcp", 6), ("udp", 17))).clone('tcp')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrIpPgPolicyIpAddrLayer4FlowProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: vrIpPgPolicyIpAddrLayer4FlowProtocol.setDescription('This attribute specifies the layer 4 (transport) protocol to which the policy applies.')
vrIpPgPolicyIpAddrLayer4FlowOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 6, 20, 2, 3, 12), )
if mibBuilder.loadTexts: vrIpPgPolicyIpAddrLayer4FlowOperTable.setStatus('mandatory')
if mibBuilder.loadTexts: vrIpPgPolicyIpAddrLayer4FlowOperTable.setDescription('This group contains the operational attributes for the TosMap and the IpAddrLayer4Flow component.')
vrIpPgPolicyIpAddrLayer4FlowOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 6, 20, 2, 3, 12, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VirtualRouterMIB", "vrIndex"), (0, "Nortel-Magellan-Passport-IpMIB", "vrIpIndex"), (0, "Nortel-Magellan-Passport-IpCosMIB", "vrIpPgIndex"), (0, "Nortel-Magellan-Passport-IpCosMIB", "vrIpPgPolicyIndex"), (0, "Nortel-Magellan-Passport-IpCosMIB", "vrIpPgPolicyIpAddrLayer4FlowIndex"))
if mibBuilder.loadTexts: vrIpPgPolicyIpAddrLayer4FlowOperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vrIpPgPolicyIpAddrLayer4FlowOperEntry.setDescription('An entry in the vrIpPgPolicyIpAddrLayer4FlowOperTable.')
vrIpPgPolicyIpAddrLayer4FlowCos = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 6, 20, 2, 3, 12, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrIpPgPolicyIpAddrLayer4FlowCos.setStatus('mandatory')
if mibBuilder.loadTexts: vrIpPgPolicyIpAddrLayer4FlowCos.setDescription('This attribute indicates the Class Of Service (COS) with which a packet receives if this policy applies. The value of this attribute is derived from the cos attribute of the referenced CosTreatment of the Policy.')
vrIpPgPolicyIpAddrLayer4FlowPortNumberRangeTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 6, 20, 2, 3, 435), )
if mibBuilder.loadTexts: vrIpPgPolicyIpAddrLayer4FlowPortNumberRangeTable.setStatus('mandatory')
if mibBuilder.loadTexts: vrIpPgPolicyIpAddrLayer4FlowPortNumberRangeTable.setDescription('This attribute specifies the TCP or UDP port number or range of port numbers of which the policy applies. The port numbers specified here are used to match the source or destination port number of any incoming packet. The exact matching algorithm is defined by the flow component that uses this attribute group. To specify a port number to match, just enter the value. To specify a range of port numbers to match, enter the lower and upper bound of the range. The order in which the lower and upper bound are entered does not matter. Not setting this attribute or setting the port number to 0 means any port number.')
vrIpPgPolicyIpAddrLayer4FlowPortNumberRangeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 6, 20, 2, 3, 435, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VirtualRouterMIB", "vrIndex"), (0, "Nortel-Magellan-Passport-IpMIB", "vrIpIndex"), (0, "Nortel-Magellan-Passport-IpCosMIB", "vrIpPgIndex"), (0, "Nortel-Magellan-Passport-IpCosMIB", "vrIpPgPolicyIndex"), (0, "Nortel-Magellan-Passport-IpCosMIB", "vrIpPgPolicyIpAddrLayer4FlowIndex"), (0, "Nortel-Magellan-Passport-IpCosMIB", "vrIpPgPolicyIpAddrLayer4FlowPortNumberRangeValue"))
if mibBuilder.loadTexts: vrIpPgPolicyIpAddrLayer4FlowPortNumberRangeEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vrIpPgPolicyIpAddrLayer4FlowPortNumberRangeEntry.setDescription('An entry in the vrIpPgPolicyIpAddrLayer4FlowPortNumberRangeTable.')
vrIpPgPolicyIpAddrLayer4FlowPortNumberRangeValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 6, 20, 2, 3, 435, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrIpPgPolicyIpAddrLayer4FlowPortNumberRangeValue.setStatus('mandatory')
if mibBuilder.loadTexts: vrIpPgPolicyIpAddrLayer4FlowPortNumberRangeValue.setDescription('This variable represents both the value and the index for the vrIpPgPolicyIpAddrLayer4FlowPortNumberRangeTable.')
vrIpPgPolicyIpAddrLayer4FlowPortNumberRangeRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 6, 20, 2, 3, 435, 1, 2), RowStatus()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: vrIpPgPolicyIpAddrLayer4FlowPortNumberRangeRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: vrIpPgPolicyIpAddrLayer4FlowPortNumberRangeRowStatus.setDescription('This variable is used to control the addition and deletion of individual values of the vrIpPgPolicyIpAddrLayer4FlowPortNumberRangeTable.')
vrIpPgCosTreatment = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 6, 20, 3))
vrIpPgCosTreatmentRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 6, 20, 3, 1), )
if mibBuilder.loadTexts: vrIpPgCosTreatmentRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: vrIpPgCosTreatmentRowStatusTable.setDescription('This entry controls the addition and deletion of vrIpPgCosTreatment components.')
vrIpPgCosTreatmentRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 6, 20, 3, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VirtualRouterMIB", "vrIndex"), (0, "Nortel-Magellan-Passport-IpMIB", "vrIpIndex"), (0, "Nortel-Magellan-Passport-IpCosMIB", "vrIpPgIndex"), (0, "Nortel-Magellan-Passport-IpCosMIB", "vrIpPgCosTreatmentIndex"))
if mibBuilder.loadTexts: vrIpPgCosTreatmentRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vrIpPgCosTreatmentRowStatusEntry.setDescription('A single entry in the table represents a single vrIpPgCosTreatment component.')
vrIpPgCosTreatmentRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 6, 20, 3, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrIpPgCosTreatmentRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: vrIpPgCosTreatmentRowStatus.setDescription('This variable is used as the basis for SNMP naming of vrIpPgCosTreatment components. These components can be added.')
vrIpPgCosTreatmentComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 6, 20, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrIpPgCosTreatmentComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: vrIpPgCosTreatmentComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
vrIpPgCosTreatmentStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 6, 20, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrIpPgCosTreatmentStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: vrIpPgCosTreatmentStorageType.setDescription('This variable represents the storage type value for the vrIpPgCosTreatment tables.')
vrIpPgCosTreatmentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 6, 20, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3)))
if mibBuilder.loadTexts: vrIpPgCosTreatmentIndex.setStatus('mandatory')
if mibBuilder.loadTexts: vrIpPgCosTreatmentIndex.setDescription('This variable represents the index for the vrIpPgCosTreatment tables.')
vrIpPgCosTreatmentProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 6, 20, 3, 10), )
if mibBuilder.loadTexts: vrIpPgCosTreatmentProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: vrIpPgCosTreatmentProvTable.setDescription('This group contains the provisionable attributes for the CosTreatment component.')
vrIpPgCosTreatmentProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 6, 20, 3, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VirtualRouterMIB", "vrIndex"), (0, "Nortel-Magellan-Passport-IpMIB", "vrIpIndex"), (0, "Nortel-Magellan-Passport-IpCosMIB", "vrIpPgIndex"), (0, "Nortel-Magellan-Passport-IpCosMIB", "vrIpPgCosTreatmentIndex"))
if mibBuilder.loadTexts: vrIpPgCosTreatmentProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vrIpPgCosTreatmentProvEntry.setDescription('An entry in the vrIpPgCosTreatmentProvTable.')
vrIpPgCosTreatmentCos = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 6, 20, 3, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrIpPgCosTreatmentCos.setStatus('mandatory')
if mibBuilder.loadTexts: vrIpPgCosTreatmentCos.setDescription('This attribute specifies the Class Of Service (COS) with which a packet would be forwarded when this COS treatment is selected.')
vrIpPgCosTreatmentSetTosByte = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 6, 20, 3, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrIpPgCosTreatmentSetTosByte.setStatus('mandatory')
if mibBuilder.loadTexts: vrIpPgCosTreatmentSetTosByte.setDescription('This attribute specifies whether the router would change the Type Of Service (TOS) byte of packets when this COS treatment is selected. If set to yes, the TOS byte is changed based on the value of tos and tosMask.')
vrIpPgCosTreatmentTos = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 6, 20, 3, 10, 1, 4), Hex().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrIpPgCosTreatmentTos.setStatus('mandatory')
if mibBuilder.loadTexts: vrIpPgCosTreatmentTos.setDescription('This attribute specifies the value of the Type Of Service (TOS) byte with which packets are updated when this COS treatment is selected. This attribute is ignored if setTosByte is set to no. The actual TOS byte of the packet is updated based on the tos and tosMask attribute using the following formula: New TOS = ( Original TOS & ~tosMask ) | ( tos & tosMask ) For example: Original TOS byte: hex 8A (10001010 in binary) tos attribute: hex 12 (00010010 in binary) tosMask attribute: hex 3F (00111111 in binary) The changed TOS byte would be: hex 92 (10010010 in binary).')
vrIpPgCosTreatmentTosMask = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 6, 20, 3, 10, 1, 5), Hex().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(252)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrIpPgCosTreatmentTosMask.setStatus('mandatory')
if mibBuilder.loadTexts: vrIpPgCosTreatmentTosMask.setDescription('This attribute specifies the Type Of Service (TOS) bit mask with which the packets are examined and updated when this COS treatment is selected. The mask specifies which bits within the original TOS byte are to be examined or updated by the router. When the setTosByte is set to yes, this attribute is used in conjunction with the tos attribute to determine how the TOS byte is updated using the following formula: New TOS = ( Original TOS & ~tosMask ) | ( tos & tosMask ) For example: Original TOS byte: hex 8A (10001010 in binary) tos attribute: hex 12 (00010010 in binary) tosMask attribute: hex 3F (00111111 in binary) The changed TOS byte would be: hex 92 (10010010 in binary). When the TosMap component is provisioned under this Policy, this attribute is used in conjunction with the tos attribute of the TosMap component when packets are examined for matching TOS bits. By default, this attribute is set to the value of hex FC, i.e. bits 0-5 of the TOS byte ( differentiated services codepoint bits) are eligible to be examined and updated. When either the setTosByte is set to yes, or when the TosMap component is provisioned, a zero tosMask is considered invalid,')
vrIpPgCosTreatmentEmissionPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 6, 20, 3, 10, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrIpPgCosTreatmentEmissionPriority.setStatus('mandatory')
if mibBuilder.loadTexts: vrIpPgCosTreatmentEmissionPriority.setDescription('This attribute specifies the emission priority to be assigned to packets when this CoS Treatment is selected. The use of the emission priority is egress media specific. This attribute can take a value from 1 to 8. 1 is treated as the highest priority and 8 the lowest. Some egress media support fewer then 8 emission prioritie. For these media the values which correspond to emission priorities lower then the lowest supported priority are treated as the lowest priority. For instance, if a media supports two priorities, high and normal, a vlaue of 1 corresponds to high priority and values of 2 to 8 correspond to normal priority.')
vrIpPgCosTreatmentDiscardPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 6, 20, 3, 10, 1, 7), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrIpPgCosTreatmentDiscardPriority.setStatus('mandatory')
if mibBuilder.loadTexts: vrIpPgCosTreatmentDiscardPriority.setDescription('This attribute specifies the discard priority to be assigned to packets when this CoS Treatment is selected. VALUES ( 0 = unChanged )')
ipCosGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 162, 1))
ipCosGroupBG = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 162, 1, 7))
ipCosGroupBG00 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 162, 1, 7, 1))
ipCosGroupBG00A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 162, 1, 7, 1, 2))
ipCosCapabilities = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 162, 3))
ipCosCapabilitiesBG = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 162, 3, 7))
ipCosCapabilitiesBG00 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 162, 3, 7, 1))
ipCosCapabilitiesBG00A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 162, 3, 7, 1, 2))
mibBuilder.exportSymbols("Nortel-Magellan-Passport-IpCosMIB", vrIpPgPolicyIpAddrLayer4FlowProvTable=vrIpPgPolicyIpAddrLayer4FlowProvTable, vrIpPgCosTreatmentIndex=vrIpPgCosTreatmentIndex, vrIpPgPolicyCosTreatmentIndex=vrIpPgPolicyCosTreatmentIndex, vrIpPgPolicyTosMapComponentName=vrIpPgPolicyTosMapComponentName, vrIpPgPolicyIpAddrLayer4FlowOperTable=vrIpPgPolicyIpAddrLayer4FlowOperTable, vrIpPgCosTreatmentRowStatusTable=vrIpPgCosTreatmentRowStatusTable, vrIpPgCosTreatmentRowStatus=vrIpPgCosTreatmentRowStatus, vrIpPgUsersRowStatus=vrIpPgUsersRowStatus, vrIpPgCosTreatment=vrIpPgCosTreatment, vrIpPgPolicyTosMapTosRowStatus=vrIpPgPolicyTosMapTosRowStatus, vrIpPgPolicyTosMapRowStatusEntry=vrIpPgPolicyTosMapRowStatusEntry, vrIpPgPolicyTosMapIndex=vrIpPgPolicyTosMapIndex, vrIpPgPolicyTosMapTosTable=vrIpPgPolicyTosMapTosTable, vrIpPgCosTreatmentStorageType=vrIpPgCosTreatmentStorageType, ipCosGroupBG00=ipCosGroupBG00, vrIpPgUsersValue=vrIpPgUsersValue, vrIpPgPolicyIpAddrLayer4FlowRowStatusEntry=vrIpPgPolicyIpAddrLayer4FlowRowStatusEntry, vrIpPg=vrIpPg, vrIpPgPolicyIpAddrLayer4FlowCos=vrIpPgPolicyIpAddrLayer4FlowCos, vrIpPgCosTreatmentProvTable=vrIpPgCosTreatmentProvTable, vrIpPgPolicyTosMapRowStatusTable=vrIpPgPolicyTosMapRowStatusTable, vrIpPgCosTreatmentDiscardPriority=vrIpPgCosTreatmentDiscardPriority, vrIpPgPolicyProvTable=vrIpPgPolicyProvTable, vrIpPgStorageType=vrIpPgStorageType, vrIpPgPolicyIpAddrLayer4FlowComponentName=vrIpPgPolicyIpAddrLayer4FlowComponentName, vrIpPgPolicyProvEntry=vrIpPgPolicyProvEntry, vrIpPgPolicyTosMapTosValue=vrIpPgPolicyTosMapTosValue, vrIpPgCosTreatmentTosMask=vrIpPgCosTreatmentTosMask, vrIpPgPolicyRowStatusTable=vrIpPgPolicyRowStatusTable, vrIpPgPolicyIpAddrLayer4FlowIndex=vrIpPgPolicyIpAddrLayer4FlowIndex, vrIpPgPolicyIpAddrLayer4FlowRowStatus=vrIpPgPolicyIpAddrLayer4FlowRowStatus, vrIpPgPolicyTosMapOperEntry=vrIpPgPolicyTosMapOperEntry, vrIpPgPolicyIpAddrLayer4FlowPortNumberRangeTable=vrIpPgPolicyIpAddrLayer4FlowPortNumberRangeTable, ipCosGroupBG=ipCosGroupBG, vrIpPgPolicyIpAddrLayer4FlowRowStatusTable=vrIpPgPolicyIpAddrLayer4FlowRowStatusTable, ipCosGroup=ipCosGroup, vrIpPgCosTreatmentSetTosByte=vrIpPgCosTreatmentSetTosByte, vrIpPgPolicyTosMap=vrIpPgPolicyTosMap, vrIpPgPolicyTosMapOperTable=vrIpPgPolicyTosMapOperTable, vrIpPgRowStatusEntry=vrIpPgRowStatusEntry, vrIpPgPolicyStorageType=vrIpPgPolicyStorageType, vrIpPgPolicyIpAddrLayer4Flow=vrIpPgPolicyIpAddrLayer4Flow, vrIpPgCosTreatmentEmissionPriority=vrIpPgCosTreatmentEmissionPriority, vrIpPgRowStatusTable=vrIpPgRowStatusTable, vrIpPgPolicy=vrIpPgPolicy, vrIpPgPolicyIpAddrLayer4FlowOperEntry=vrIpPgPolicyIpAddrLayer4FlowOperEntry, vrIpPgIndex=vrIpPgIndex, ipCosCapabilities=ipCosCapabilities, vrIpPgCosTreatmentComponentName=vrIpPgCosTreatmentComponentName, vrIpPgPolicyIpAddrLayer4FlowPrefixLength=vrIpPgPolicyIpAddrLayer4FlowPrefixLength, vrIpPgPolicyTosMapRowStatus=vrIpPgPolicyTosMapRowStatus, ipCosCapabilitiesBG00=ipCosCapabilitiesBG00, vrIpPgComponentName=vrIpPgComponentName, vrIpPgPolicyIpAddrLayer4FlowPrefix=vrIpPgPolicyIpAddrLayer4FlowPrefix, vrIpPgCosTreatmentCos=vrIpPgCosTreatmentCos, ipCosCapabilitiesBG=ipCosCapabilitiesBG, vrIpPgPolicyIpAddrLayer4FlowPortNumberRangeEntry=vrIpPgPolicyIpAddrLayer4FlowPortNumberRangeEntry, vrIpPgPolicyIpAddrLayer4FlowStorageType=vrIpPgPolicyIpAddrLayer4FlowStorageType, vrIpPgUsersEntry=vrIpPgUsersEntry, vrIpPgPolicyTosMapStorageType=vrIpPgPolicyTosMapStorageType, vrIpPgPolicyTosMapCos=vrIpPgPolicyTosMapCos, vrIpPgPolicyTosMapTosEntry=vrIpPgPolicyTosMapTosEntry, vrIpPgCosTreatmentRowStatusEntry=vrIpPgCosTreatmentRowStatusEntry, vrIpPgCosTreatmentTos=vrIpPgCosTreatmentTos, ipCosGroupBG00A=ipCosGroupBG00A, vrIpPgCosTreatmentProvEntry=vrIpPgCosTreatmentProvEntry, vrIpPgPolicyIndex=vrIpPgPolicyIndex, ipCosMIB=ipCosMIB, vrIpPgPolicyIpAddrLayer4FlowProvEntry=vrIpPgPolicyIpAddrLayer4FlowProvEntry, vrIpPgPolicyIpAddrLayer4FlowProtoProvisionedEntry=vrIpPgPolicyIpAddrLayer4FlowProtoProvisionedEntry, vrIpPgPolicyIpAddrLayer4FlowPortNumberRangeRowStatus=vrIpPgPolicyIpAddrLayer4FlowPortNumberRangeRowStatus, vrIpPgPolicyIpAddrLayer4FlowPortNumberRangeValue=vrIpPgPolicyIpAddrLayer4FlowPortNumberRangeValue, vrIpPgPolicyIpAddrLayer4FlowProtoProvisionedTable=vrIpPgPolicyIpAddrLayer4FlowProtoProvisionedTable, vrIpPgPolicyRowStatusEntry=vrIpPgPolicyRowStatusEntry, vrIpPgPolicyComponentName=vrIpPgPolicyComponentName, vrIpPgPolicyIpAddrLayer4FlowProtocol=vrIpPgPolicyIpAddrLayer4FlowProtocol, vrIpPgUsersTable=vrIpPgUsersTable, vrIpPgRowStatus=vrIpPgRowStatus, vrIpPgPolicyRowStatus=vrIpPgPolicyRowStatus, ipCosCapabilitiesBG00A=ipCosCapabilitiesBG00A)
