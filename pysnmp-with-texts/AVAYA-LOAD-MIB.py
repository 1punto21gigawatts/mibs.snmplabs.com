#
# PySNMP MIB module AVAYA-LOAD-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/AVAYA-LOAD-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:32:11 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint")
avGatewayMibs, = mibBuilder.importSymbols("AVAYAGEN-MIB", "avGatewayMibs")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, ObjectIdentity, NotificationType, TimeTicks, Gauge32, Counter32, Integer32, Unsigned32, ModuleIdentity, iso, MibIdentifier, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "ObjectIdentity", "NotificationType", "TimeTicks", "Gauge32", "Counter32", "Integer32", "Unsigned32", "ModuleIdentity", "iso", "MibIdentifier", "Bits")
DisplayString, RowStatus, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "RowStatus", "TextualConvention")
avLoad = ModuleIdentity((1, 3, 6, 1, 4, 1, 6889, 2, 6, 5))
if mibBuilder.loadTexts: avLoad.setLastUpdated('200910251350Z')
if mibBuilder.loadTexts: avLoad.setOrganization('Avaya, Inc.')
if mibBuilder.loadTexts: avLoad.setContactInfo(' Avaya Customer Services Postal: Avaya, Inc. 211 Mt Airy Rd. Basking Ridge, NJ 07920 USA Tel: +1 908 953 6000 E-mail: executiveoffic@avaya.com WWW: http://www.avaya.com ')
if mibBuilder.loadTexts: avLoad.setDescription('The avLoad MIB defines upload, download and copy of application software and configuration information. Copyright(c) 2004-2005 by Avaya Inc. All rights reserved.')
class AvLoadItuPerceivedSeverity(TextualConvention, Integer32):
    reference = "ITU Recommendation M.3100, 'Generic Network Information Model', 1995 ITU Recommendation X.733, 'Information Technology - Open Systems Interconnection - System Management: Alarm Reporting Function', 1992"
    description = 'ITU perceived severity values'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("cleared", 1), ("indeterminate", 2), ("critical", 3), ("major", 4), ("minor", 5), ("warning", 6))

avLoadNotification = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 6, 5, 0))
avDownloadBegun = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 6, 5, 0, 1)).setObjects(("AVAYA-LOAD-MIB", "avLoadSysDescription"), ("AVAYA-LOAD-MIB", "avGenOpModuleId"), ("AVAYA-LOAD-MIB", "avGenAppFileId"), ("AVAYA-LOAD-MIB", "avGenAppFileName"), ("AVAYA-LOAD-MIB", "avGenAppFileDescription"), ("AVAYA-LOAD-MIB", "avGenAppFileVersionNumber"), ("AVAYA-LOAD-MIB", "avLoadSeverity"))
if mibBuilder.loadTexts: avDownloadBegun.setStatus('current')
if mibBuilder.loadTexts: avDownloadBegun.setDescription('The device has begun download operation.')
avDownloadSuccess = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 6, 5, 0, 2)).setObjects(("AVAYA-LOAD-MIB", "avLoadSysDescription"), ("AVAYA-LOAD-MIB", "avGenOpModuleId"), ("AVAYA-LOAD-MIB", "avGenAppFileId"), ("AVAYA-LOAD-MIB", "avGenAppFileName"), ("AVAYA-LOAD-MIB", "avGenAppFileDescription"), ("AVAYA-LOAD-MIB", "avGenAppFileVersionNumber"), ("AVAYA-LOAD-MIB", "avLoadSeverity"))
if mibBuilder.loadTexts: avDownloadSuccess.setStatus('current')
if mibBuilder.loadTexts: avDownloadSuccess.setDescription('The device has completed successful download operation.')
avDownloadFault = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 6, 5, 0, 3)).setObjects(("AVAYA-LOAD-MIB", "avLoadSysDescription"), ("AVAYA-LOAD-MIB", "avGenOpModuleId"), ("AVAYA-LOAD-MIB", "avGenAppFileId"), ("AVAYA-LOAD-MIB", "avGenAppFileName"), ("AVAYA-LOAD-MIB", "avGenAppFileDescription"), ("AVAYA-LOAD-MIB", "avGenAppFileVersionNumber"), ("AVAYA-LOAD-MIB", "avGenOpLastFailureIndex"), ("AVAYA-LOAD-MIB", "avGenOpLastFailureDisplay"), ("AVAYA-LOAD-MIB", "avLoadSeverity"))
if mibBuilder.loadTexts: avDownloadFault.setStatus('current')
if mibBuilder.loadTexts: avDownloadFault.setDescription('The download operation was failed.')
avUploadBegun = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 6, 5, 0, 4)).setObjects(("AVAYA-LOAD-MIB", "avLoadSysDescription"), ("AVAYA-LOAD-MIB", "avGenOpModuleId"), ("AVAYA-LOAD-MIB", "avGenAppFileId"), ("AVAYA-LOAD-MIB", "avGenAppFileName"), ("AVAYA-LOAD-MIB", "avGenAppFileDescription"), ("AVAYA-LOAD-MIB", "avGenAppFileVersionNumber"), ("AVAYA-LOAD-MIB", "avLoadSeverity"))
if mibBuilder.loadTexts: avUploadBegun.setStatus('current')
if mibBuilder.loadTexts: avUploadBegun.setDescription('The device has begun download operation.')
avUploadSuccess = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 6, 5, 0, 5)).setObjects(("AVAYA-LOAD-MIB", "avLoadSysDescription"), ("AVAYA-LOAD-MIB", "avGenOpModuleId"), ("AVAYA-LOAD-MIB", "avGenAppFileId"), ("AVAYA-LOAD-MIB", "avGenAppFileName"), ("AVAYA-LOAD-MIB", "avGenAppFileDescription"), ("AVAYA-LOAD-MIB", "avGenAppFileVersionNumber"), ("AVAYA-LOAD-MIB", "avLoadSeverity"))
if mibBuilder.loadTexts: avUploadSuccess.setStatus('current')
if mibBuilder.loadTexts: avUploadSuccess.setDescription('The device has completed successful download operation.')
avUploadFault = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 6, 5, 0, 6)).setObjects(("AVAYA-LOAD-MIB", "avLoadSysDescription"), ("AVAYA-LOAD-MIB", "avGenOpModuleId"), ("AVAYA-LOAD-MIB", "avGenAppFileId"), ("AVAYA-LOAD-MIB", "avGenAppFileName"), ("AVAYA-LOAD-MIB", "avGenAppFileDescription"), ("AVAYA-LOAD-MIB", "avGenAppFileVersionNumber"), ("AVAYA-LOAD-MIB", "avGenOpLastFailureIndex"), ("AVAYA-LOAD-MIB", "avGenOpLastFailureDisplay"), ("AVAYA-LOAD-MIB", "avLoadSeverity"))
if mibBuilder.loadTexts: avUploadFault.setStatus('current')
if mibBuilder.loadTexts: avUploadFault.setDescription('The download operation was failed.')
avGenOperations = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 6, 5, 1))
avGenLoadNumberOfSession = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 6, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avGenLoadNumberOfSession.setStatus('current')
if mibBuilder.loadTexts: avGenLoadNumberOfSession.setDescription('The number of operational sessions in progress in this system')
avGenOpTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 6, 5, 1, 2), )
if mibBuilder.loadTexts: avGenOpTable.setStatus('current')
if mibBuilder.loadTexts: avGenOpTable.setDescription('Table of configuration attributes which define the operational functions and the results on a per module basis. This group provides the mechanism by which available operations are initiated, monitored and reported.')
avGenOpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 6, 5, 1, 2, 1), ).setIndexNames((0, "AVAYA-LOAD-MIB", "avGenOpModuleId"), (0, "AVAYA-LOAD-MIB", "avGenOpIndex"))
if mibBuilder.loadTexts: avGenOpEntry.setStatus('current')
if mibBuilder.loadTexts: avGenOpEntry.setDescription('An entry in the table, containing data about a single modules operations.')
avGenOpModuleId = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 5, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: avGenOpModuleId.setStatus('current')
if mibBuilder.loadTexts: avGenOpModuleId.setDescription('Index which identifies the module inside the chassis for which this entry contains information. Equals the number of the slot by which the group is accessed or the stackable index. Announcements file will be presented in Module ID == 9. ')
avGenOpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 5, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48))).clone(namedValues=NamedValues(("uploadConfig", 1), ("downloadConfig", 2), ("report", 3), ("uploadSoftware", 4), ("downloadSoftware", 5), ("localConfigFileCopy", 6), ("localSWFileCopy", 7), ("uploadLogfile", 8), ("eraseFile", 9), ("show", 10), ("syncStandbyAgent", 11), ("downloadAuthFile", 12), ("downloadLicFile", 13), ("downloadPhoneScriptFile", 14), ("uploadPhoneScriptFile", 15), ("downloadPhoneImageFile", 16), ("uploadDhcpBindingFile", 17), ("uploadAnnouncements", 18), ("downloadAnnouncements", 19), ("renameAnnouncement", 20), ("eraseAnnouncement", 21), ("uploadAuthFile", 22), ("uploadLicFile", 23), ("uploadSyslogFile", 24), ("uploadCDRFile", 25), ("backupConfig", 28), ("restore", 29), ("commit", 30), ("uploadServicePack", 31), ("downloadServicePack", 32), ("localServicePackFileCopy", 33), ("backup", 34), ("generateFile", 35), ("downloadCertificate", 36), ("uploadCertificate", 37), ("switchPartitions", 38), ("uploadPhoneImageFile", 39), ("downloadVoiceMailFile", 40), ("uploadVoiceMailFile", 41), ("downloadPhoneMessageFile", 42), ("uploadPhoneMessageFile", 43), ("downloadConfigurationWizardTaskFile", 44), ("uploadConfigurationWizardTaskFile", 45), ("localSWFileMove", 46), ("localVoiceMailFileMove", 47), ("reset", 48)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: avGenOpIndex.setStatus('current')
if mibBuilder.loadTexts: avGenOpIndex.setDescription("Index to identify the operation supported by this row entry. Each operation type that is supported by this module should be represented by a unique row in this MIB Table. A walk of this MIB table should reveal all the operations that are supported by the device. Note: avGenOpServerIP is used for IPv4 addresses only. avGenOpServerInetAddressType/avGenOpServerInetAddress are used for IPv4/IPv6 addresses. The operations supported are: uploadConfig -- The 'avGenOpDestIndex' should be set to 0 (to indicate destination of server). The 'avGenOpServerIP' should be set to the server to which the config will be saved. The 'avGenOpProtocolType' should be set to the IP protocol used to transport the file. The 'avGenOpSourceIndex' should be set to the 'avGenAppFileId' of the config file you are uploading. The 'avGenOpFileName' should be set to the name and path of the config file on the TFTP server. downloadConfig -- The 'avGenOpDestIndex' should be set to the 'avGenAppFileId' of the config file you are downloading to (if one does not exist, you'll need to RowCreate it in the 'avGenAppFileTable'). The 'avGenOpServerIP' should be set to the server from which the config will be copied. The 'avGenOpProtocolType' should be set to the IP protocol used to transport the file. The 'avGenOpSourceIndex' should be set to 0 (to indicate source of server). The 'avGenOpFileName' should be set to the name and path of the config file on the TFTP server. report -- uploadSoftware -- The 'avGenOpDestIndex' should be set to 0 (to indicate destination of server). The 'avGenOpServerIP' should be set to the server to which the config file will be saved. The 'avGenOpProtocolType' should be set to the IP protocol used to transport the file. The 'avGenOpSourceIndex' should be set to the 'avGenAppFileId' of the software file you are uploading. The 'avGenOpFileName' should be set to the name and path of the image file on the TFTP server. downloadSoftware -- The 'avGenOpDestIndex' should be set to the 'avGenAppFileId' of the software file you are downloading to (if one does not exist, you'll need to RowCreate it in the 'avGenAppFileTable'). The 'avGenOpServerIP' should be set to the server from which the config file will be copied. The 'avGenOpProtocolType' should be set to the IP protocol used to transport the file. The 'avGenOpSourceIndex' should be set to 0 (to indicate source of server). The 'avGenOpFileName' should be set to the name and path of the image file on the TFTP server. localConfigFileCopy -- (using a 'avGenOpType' of 'localPeerTransport') The 'avGenOpDestIndex' should be set to the 'avGenAppFileId' of the config file you are copying to (if one does not exist you'll need to RowCreate it in the 'avGenAppFileTable'). The 'avGenOpSourceIndex' should be set to the 'avGenAppFileId' of the config file you are copying from. The 'avGenOpServerIP' should be set to NULL. The 'avGenOpProtocolType' should be set to 'localPeerTransport'. The 'avGenOpFileName' should be set to NULL. localSWFileCopy -- (using a 'avGenOpType' of 'localPeerTransport') The 'avGenOpDestIndex' should be set to the 'avGenAppFileId' of the software file you are copying to (if one does not exist you'll need to RowCreate it in the 'avGenAppFileTable'). The 'avGenOpSourceIndex' should be set to the 'avGenAppFileId' of the software file you are copying from. The 'avGenOpServerIP' should be set to NULL. The 'avGenOpProtocolType' should be set to 'localPeerTransport'. The 'avGenOpFileName' should be set to NULL. localConfigFileCopy -- (using a 'avGenOpType' of 'localServerTransport') The 'avGenOpDestIndex' should be set to the 'avGenAppFileId' of the config file you are copying to (if one does not exist you'll need to RowCreate it in the 'avGenAppFileTable') or ZERO (0) if copying to a localServer. The 'avGenOpSourceIndex' should be set to the 'avGenAppFileId' of the config file you are copying from or ZERO (0) if copying from a localServer. The 'avGenOpServerIP' should be set to the address of the local server. The 'avGenOpProtocolType' should be set to 'localServerTransport'. localSWFileCopy -- (using a 'avGenOpType' of 'localServerTransport') The 'avGenOpDestIndex' should be set to the 'avGenAppFileId' of the software file you are copying to (if one does not exist you'll need to RowCreate it in the 'avGenAppFileTable'). The 'avGenOpSourceIndex' should be set to the 'avGenAppFileId' of the software file you are copying from. The 'avGenOpServerIP' should be set to the address of the local server. The 'avGenOpProtocolType' should be set to 'localServerTransport'. uploadLogfile -- The 'avGenOpDestIndex' should be set to 0 (to indicate destination of server). The 'avGenOpSourceIndex' should be set to the 'avGenAppFileId' of the log file you are copying from. The 'avGenOpServerIP' should be set to the server to which the config will be saved. The 'avGenOpProtocolType' should be set to the IP protocol used to transport the file. The 'avGenOpFileName' should be set to the name and path of the log file on the TFTP server. eraseFile -- The 'avGenOpDestIndex' Is not applicable for this command. The 'avGenOpSourceIndex' should be set to the 'avGenAppFileId' of the file you wish to erase. The 'avGenOpServerIP' should be set to 0. The 'avGenOpProtocolType' should be set to 0. The 'avGenOpFileName' should be set to NULL. show -- Reporting information to the CLI. syncStandbyAgent(11) -- copy configuration AND software image files to the (non-active) standby agent in a P550/P880. The 'avGenOpDestIndex' should be set to 1 The 'avGenOpSourceIndex' should be set to 1 The 'avGenOpServerIP' should be set to NULL. The 'avGenOpProtocolType' should be set to 'localPeerTransport'. The 'avGenOpFileName' should be set to NULL. downloadAuthFile (12) -- copy Services Logins authentication file to the device. The 'avGenOpDestIndex' should be set to the 'avGenAppFileId' of the auth file you are downloading to (if one does not exist, you'll need to RowCreate it in the 'avGenAppFileTable'). The 'avGenOpServerIP' should be set to the server from which the config will be copied. The 'avGenOpProtocolType' should be set to the IP protocol used to transport the file. The 'avGenOpSourceIndex' should be set to 0 (to indicate source of server). The 'avGenOpFileName' should be set to the name and path of the config file on the TFTP/ftp/scp server. downloadLicFile (13) - -- copy SLicense file to the device. The 'avGenOpDestIndex' should be set to the 'avGenAppFileId' of the auth file you are downloading to (if one does not exist, you'll need to RowCreate it in the 'avGenAppFileTable'). The 'avGenOpServerIP' should be set to the server from which the config will be copied. The 'avGenOpProtocolType' should be set to the IP protocol used to transport the file. The 'avGenOpSourceIndex' should be set to 0 (to indicate source of server). The 'avGenOpFileName' should be set to the name and path of the config file on the TFTP/ftp/scp server. downloadPhoneScriptFile (14) - copy IP phone configuration file (or other endpoints configuration files) to the device TFTP Server directory. IP Phone configuration file includes Setting File and Upgrade Script. Non Volatile Storage. The 'avGenOpDestIndex' should be set to the 'avGenAppFileId' of the phone configuration file you are downloading to (if one does not exist, you'll need to RowCreate it in the 'avGenAppFileTable'). The 'avGenOpServerIP' should be set to the server from which the config will be copied. The 'avGenOpProtocolType' should be set to the IP protocol used to transport the file. The 'avGenOpSourceIndex' should be set to 0 (to indicate source of server). The 'avGenOpFileName' should be set to the name and path of the config file on the TFTP/ftp/scp server. uploadPhoneScriptFile(15) - copy IP phone configuration file (or other endpoints configuration files) from the device TFTP Server directory to remote server. IP Phone configuration file includes Setting File and Upgrade Script. The 'avGenOpDestIndex' should be set to 0 (to indicate destination of server). The 'avGenOpServerIP' should be set to the server to which the config will be saved. The 'avGenOpProtocolType' should be set to the IP protocol used to transport the file. The 'avGenOpSourceIndex' should be set to the 'avGenAppFileId' of the config file you are uploading. The 'avGenOpFileName' should be set to the name and path of the config file on the TFTP/ftp/scp server. downloadPhoneImageFile(16) - copy IP phone images file (or other endpoints images files) to the device TFTP Server Directory. Volatile Storage. The 'avGenOpDestIndex' should be set to the 'avGenAppFileId' of the software file you are downloading to (if one does not exist, you'll need to RowCreate it in the 'avGenAppFileTable'). The 'avGenOpServerIP' should be set to the server from which the config file will be copied. The 'avGenOpProtocolType' should be set to the IP protocol used to transport the file. The 'avGenOpSourceIndex' should be set to 0 (to indicate source of server). The 'avGenOpFileName' should be set to the name and path of the image file on the TFTP/ftp server. uploadDhcpBindingFile(17) - copy DHCP Binding File from the device to remote server. The binding file includes information of IP , MAC couples and leased time. Non Volatile Storage. The 'avGenOpDestIndex' should be set to 0 (to indicate destination of server). The 'avGenOpServerIP' should be set to the server to which the config will be saved. The 'avGenOpProtocolType' should be set to the IP protocol used to transport the file. The 'avGenOpSourceIndex' should be set to the 'avGenAppFileId' of the config file you are uploading. The 'avGenOpFileName' should be set to the name and path of the config file on the TFTP/ftp/scp server. uploadAnnouncements(18) - copy announcements files from the device to remote server. The announcements files are stored in Non Volatile Storage. The 'avGenOpDestIndex' should be set to 0 (to indicate destination of server). The 'avGenOpServerIP' should be set to the server to which the announcement file will be saved. The 'avGenOpProtocolType' should be set to the IP protocol used to transport the file. The 'avGenOpSourceIndex' should be set to the 'avGenAppFileId' of the announcement file you are uploading. The 'avGenOpFileName' should be set to the name and path of the announcement file on the remote server. downloadAnnouncements(19)- copy announcement file to the device from remote server. The 'avGenOpDestIndex' should be set to the 'avGenAppFileId' of the software file you are downloading to (if one does not exist, you'll need to RowCreate it in the 'avGenAppFileTable'). The 'avGenOpServerIP' should be set to the server from which the announcement file will be copied. The 'avGenOpProtocolType' should be set to the IP protocol used to transport the file. The 'avGenOpSourceIndex' should be set to 0 (to indicate source of server). The 'avGenOpFileName' should be set to the name and path of the announcement file on the remote server. renameFile(20) - Rename announcement file name on the local device. The 'avGenOpDestIndex' is not applicable for this command. The 'avGenOpSourceIndex' should be set to the 'avGenAppFileId' of the software file you are renaming. The 'avGenOpServerIP' should be set to 0. The 'avGenOpProtocolType' should be set to 'localPeerTransport'. The 'avGenOpFileName' should be set to the new name. Commit -- The 'avGenOpDestIndex' Is not applicable for this command. The 'avGenOpSourceIndex' should be set to the 'avGenAppFileId' of the file you wish to commit. The 'avGenOpServerIP' should be set to 0. The 'avGenOpProtocolType' should be set to 0. The 'avGenOpFileName' should be set to NULL. reset(48) -- The 'avGenOpDestIndex' Is not applicable for this command. The 'avGenOpSourceIndex' Is not applicable for this command. The 'avGenOpServerIP' should be set to 0. The 'avGenOpProtocolType' should be set to 0. The 'avGenOpFileName' should be set to NULL. ")
avGenOpRunningState = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 5, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("idle", 1), ("beginOperation", 2), ("waitingIp", 3), ("runningIp", 4), ("copyingLocal", 5), ("readingConfiguration", 6), ("executing", 7), ("blocked", 8), ("reset", 9))).clone('idle')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: avGenOpRunningState.setStatus('current')
if mibBuilder.loadTexts: avGenOpRunningState.setDescription('Identifies the operation to perform and the state of that operation. This field acts as both the trigger to initiate the operation (via the beginOperation) and the status field of the operation itself (i.e. waiting-ip, running-ip, etc.). It is expected that all dependent MIB objects will be set before the trigger is set to beginOperation. The operations completion is triggered by the return to the idle state. idle(1), - Operation not in progress beginOperation(2), - Trigger by NMS to start the operation waitingIp(3), - Communication phase; waiting for response runningIp(4), - Communication phase; transferring data copyingLocal(5), - Local operation readingConfiguration(6), - Parsing / Executing configuration file executing(7) - Executing Command (such as erasing a file or reporting) blocked(8) - to be used when the Load MIB agent is unable to perform a requested operation, this could happen in CM if a firmware download job was submitted directly from the SAT. Since CM only accepts one job at a time, the Load MIB agent will be blocked until that job completes. reset(9) - to be used to request a reset only of a TN board, this capability is a existing capability in Software Update Manager that we want to support directly in the Load MIB. ')
avGenOpSourceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 5, 1, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: avGenOpSourceIndex.setStatus('current')
if mibBuilder.loadTexts: avGenOpSourceIndex.setDescription('The index value (taken from the avGenAppFileTable) of the source of the operation. NOTE: A value of zero (0) here indicates that the Server (specified below) is the source.')
avGenOpDestIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 5, 1, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: avGenOpDestIndex.setStatus('current')
if mibBuilder.loadTexts: avGenOpDestIndex.setDescription('The index value (taken from the avGenAppFileTable) of the destination of the operation. NOTE: A value of zero (0) here indicates that the Server (specified below) is the Destination.')
avGenOpServerIP = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 5, 1, 2, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: avGenOpServerIP.setStatus('current')
if mibBuilder.loadTexts: avGenOpServerIP.setDescription('The IP Address of the server from/to which the file has to be Download/Upload. NOTE: In the case of localPeerTransport this value should be NULL. Please note that avGenOpServerIP is used for IPv4 addresses only. avGenOpServerInetAddressType/avGenOpServerInetAddress are used for IPv4/IPv6 addresses. ')
avGenOpUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 5, 1, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128)).clone(hexValue="00")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: avGenOpUserName.setStatus('current')
if mibBuilder.loadTexts: avGenOpUserName.setDescription('Contains the username to be used if the protocol specified in avGenOpProtocolType requires one. The default value will be the empty string')
avGenOpPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 5, 1, 2, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128)).clone(hexValue="00")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: avGenOpPassword.setStatus('current')
if mibBuilder.loadTexts: avGenOpPassword.setDescription('Contains the password to be used if the protocol specified in avGenOpProtocolType requires one. The default value will be the empty string')
avGenOpProtocolType = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 5, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("tftp", 1), ("ftp", 2), ("localPeerTransport", 3), ("localServerTransport", 4), ("scp", 5), ("sftp", 6), ("usb", 7), ("http", 8), ("https", 9), ("ftpResume", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: avGenOpProtocolType.setStatus('current')
if mibBuilder.loadTexts: avGenOpProtocolType.setDescription('Identifies the protocol between the management station and the device for Download/Upload of the file.')
avGenOpFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 5, 1, 2, 1, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: avGenOpFileName.setStatus('current')
if mibBuilder.loadTexts: avGenOpFileName.setDescription('The location (including the FULL path) of the file in the server. NOTE: In the case of localPeerTransport this value should be NULL. In case of genOpProtocolType==usb(7) the file name shall include the prefix of the usbdevice/file system as follows: /usbdevice0-127/backupdirectory/backupsubdirectory/filename. An example can be: /usbdevice0/backupg350/IPPHONE/46xx_settings.txt. If there is only one usb mass storage device connected to the gateway then use /usbdevice0/ to copy from/to this device files. ')
avGenOpRunningStateDisplay = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 5, 1, 2, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: avGenOpRunningStateDisplay.setStatus('current')
if mibBuilder.loadTexts: avGenOpRunningStateDisplay.setDescription('The state of the operation for Display on the terminal during operation process.')
avGenOpLastFailureIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 5, 1, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 201, 202, 203, 204, 205, 206, 207, 208, 210, 220, 221, 222))).clone(namedValues=NamedValues(("noError", 1), ("genError", 2), ("configError", 3), ("busy", 4), ("timeout", 5), ("cancelled", 6), ("incompatibleFile", 7), ("fileTooBig", 8), ("protocolError", 9), ("flashWriteError", 10), ("nvramWriteError", 11), ("confFileGenErr", 12), ("confFileParseError", 13), ("confFileExecError", 14), ("readOnlyFile", 15), ("emptyFile", 16), ("noEnoughFreeMemoryLeft", 17), ("undefinedError", 100), ("fileNotFound", 101), ("accessViolation", 102), ("outOfMemory", 103), ("illegalOperation", 104), ("unknownTransferId", 105), ("fileAlreadyExists", 106), ("noSuchUser", 107), ("sshServerAuth", 108), ("sshDeviceAuth", 109), ("badChainOfTrust", 201), ("badChainOfTrustFormat", 202), ("notCodeSigningAuthority", 203), ("illegalDSA", 204), ("badPublicKeyFormat", 205), ("illegalDSKeySize", 206), ("badDSFormat", 207), ("authDSFailure", 208), ("configFileSecretIntegrityFault", 210), ("ftpResumeBadFilename", 220), ("ftpResumeEmptyFile", 221), ("ftpResumeNotSupported", 222)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: avGenOpLastFailureIndex.setStatus('current')
if mibBuilder.loadTexts: avGenOpLastFailureIndex.setDescription("While a download is in progress this will always be 'no-error'. After a download is complete this indicates the success or failure of the download. If it is anything other than 'no-error' then 'avGenOpLastFailureDisplay' will contain a textual description of the error. Error codes from 100 upwards are errors returned from a TFTP server. errors below this are locally generated. Configuration files may return errors after download as a result of reading a config file into the system. confFileGenErr - General (unknown error) confFileParseError - Reading of config file resulted in parsing errors. confFileExecError - Reading of config file resulted in execution errors. sshServerAuth - SCP server failed to authenticated himself to a device. sshDeviceAuth(109)- device failed to authenticate to the SCP server (unknown user/bad password) badChainOfTrust(201) - Failed to authenticate the download with Trusted Certificate Root Authority badChainOfTrustFormat (202) - Not supported chain of trust format notCodeSigningAuthority (203) Software image was signed by non-authorized Certificate Authority illegalDSA (204) - Software image is signed with non FIPS 140-2 certified algorithm badPublicKeyFormat(205) - Not supported public key format. illegalDSKeySize(206) - Software image is signed with non FIPS 140-2 certified key size badDSFormat(207) - Not supported digital signature format authDSFailure(208) - Failed to authenticate digital image signature New Errors use for with announcement files: readOnlyFile(15) - For cases where management system tries to erase/delete file which is read-only. emptyFile(16) - When trying to erase/upload file that does not exists or size with size 0. noEnoughFreeMemoryLeft(17) - When trying to download a file to the device and there is no place left to it. fileAlreadyExistsInDirectory(18) - when trying to download file which already exists in the directory (in one of the other AvGenAppFileTable rows, if we want to update it we need to use the same row in the table). ")
avGenOpLastFailureDisplay = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 5, 1, 2, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: avGenOpLastFailureDisplay.setStatus('current')
if mibBuilder.loadTexts: avGenOpLastFailureDisplay.setDescription('Contains the last error, Null if there is no error.')
avGenOpLastWarningDisplay = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 5, 1, 2, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: avGenOpLastWarningDisplay.setStatus('current')
if mibBuilder.loadTexts: avGenOpLastWarningDisplay.setDescription("Last warning which didn't stop the operation (not fatal error).")
avGenOpErrorLogIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 5, 1, 2, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: avGenOpErrorLogIndex.setStatus('current')
if mibBuilder.loadTexts: avGenOpErrorLogIndex.setDescription("The Index in the 'avGenAppFileTable' under which an error log has been created. In the case of file that produce errors this file should contain a log of errors that occurred. (This item should be zero if it does not exist)")
avGenOpResetSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 5, 1, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("supported", 1), ("notSupported", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: avGenOpResetSupported.setStatus('current')
if mibBuilder.loadTexts: avGenOpResetSupported.setDescription('Indicates if a reset (after operation completion) is supported by this Module.')
avGenOpEnableReset = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 5, 1, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: avGenOpEnableReset.setStatus('current')
if mibBuilder.loadTexts: avGenOpEnableReset.setDescription('Whether to do a reset after the operation completed successfully.')
avGenOpNextBootImageIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 5, 1, 2, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: avGenOpNextBootImageIndex.setStatus('current')
if mibBuilder.loadTexts: avGenOpNextBootImageIndex.setDescription("The row in the 'avGenAppFileTable' of the default Application that the device will boot from when a standard reboot is performed.")
avGenOpLastBootImageIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 5, 1, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avGenOpLastBootImageIndex.setStatus('current')
if mibBuilder.loadTexts: avGenOpLastBootImageIndex.setDescription("The Index in the 'avGenAppFileTable' of the default Application that the device was last booted from.")
avGenOpFileSystemType = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 5, 1, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: avGenOpFileSystemType.setStatus('current')
if mibBuilder.loadTexts: avGenOpFileSystemType.setDescription("Indicates what type of file system is supported by this module. A value of 'static' indicates that rows in the 'avGenAppFileTable' are not removable nor can new entries be created. A value of 'dynamic' indicates that entries in the 'avGenAppFileTable' are both removable and can be created.")
avGenOpReportSpecificFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 5, 1, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("fullReport", 1), ("partialReport", 2), ("notSupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: avGenOpReportSpecificFlags.setStatus('current')
if mibBuilder.loadTexts: avGenOpReportSpecificFlags.setDescription('Contain modifiers to the Report operation. fullReport - Full configuration report partialReport - A report without the information stored in the OSPF database notSupported - For operations other than report, this MIB has no meaning and can return not Supported or not be supported.')
avGenOpOctetsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 5, 1, 2, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avGenOpOctetsReceived.setStatus('current')
if mibBuilder.loadTexts: avGenOpOctetsReceived.setDescription('While a download is in progress this indicates the number of bytes transferred so far. ')
avGenOpDownloadProxy = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 5, 1, 2, 1, 23), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: avGenOpDownloadProxy.setStatus('current')
if mibBuilder.loadTexts: avGenOpDownloadProxy.setDescription('The avGenOpDownloadProxy is the location of a CLAN board that will serve as the proxy for the firmware download of a TDM-based board, since these boards are unable to perform the download operation themselves. The CLAN will be responsible for obtaining the image. 1 - any 2 - self 6657-413216 - Board location. Default value is 1.')
avGenOpServerInetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 5, 1, 2, 1, 24), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: avGenOpServerInetAddressType.setStatus('current')
if mibBuilder.loadTexts: avGenOpServerInetAddressType.setDescription('The address type of avGenOpServerInetAddress. ')
avGenOpServerInetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 5, 1, 2, 1, 25), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: avGenOpServerInetAddress.setStatus('current')
if mibBuilder.loadTexts: avGenOpServerInetAddress.setDescription('The Inet Address of the remote file server. 1. The address type of this object is specified in avGenOpServerInetAddress. 2. Management applications can use avGenOpServerIP or avGenOpServerInetAddressType/avGenOpServerInetAddress to set IPv4 server address and only avGenOpServerInetAddressType/avGenOpServerInetAddress to set IPv6 server address. 3. The avGenOpServerInetAddressType must always been set before the avGenOpServerInetAddress is set (the avGenOpServerInetAddress must conform to the avGenOpServerInetAddressType). 4. Setting avGenOpServerIP address mib item will change avGenOpServerInetAddressType to IPv4(1) and avGenOpServerInetAddress to IPv4 address configured. 5. Setting avGenOpServerInetAddress as IPv4 address will also set avGenOpServerIP. 6. Setting avGenOpServerInetAddress as IPv6 address will also set avGenOpServerIP to 0.0.0.0. 7. Default of avGenOpServerInetAddressType is unknown(0) and avGenOpServerInetAddress is zero length. 8. Setting avGenOpServerInetAddressType to IPv4 will return avGenOpServerIP and avGenOpServerInetAddress to default value of 0.0.0.0. Setting avGenOpServerInetAddressType to value other than IPv4 return avGenOpServerIP to default value of 0.0.0.0 and avGenOpServerInetAddress to default value of null string. ')
avGenApplications = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 6, 5, 2))
avGenAppFileTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 6, 5, 2, 1), )
if mibBuilder.loadTexts: avGenAppFileTable.setStatus('current')
if mibBuilder.loadTexts: avGenAppFileTable.setDescription('Table of Application (FILE) entries. Each row uniquely defines an application in the system. Applications can be defined as any entity that can be read or written from or to the system. This includes software images, boot code, configuration files, prom code, etc.')
avGenAppFileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 6, 5, 2, 1, 1), ).setIndexNames((0, "AVAYA-LOAD-MIB", "avGenOpModuleId"), (0, "AVAYA-LOAD-MIB", "avGenAppFileId"))
if mibBuilder.loadTexts: avGenAppFileEntry.setStatus('current')
if mibBuilder.loadTexts: avGenAppFileEntry.setDescription('An entry in the table, containing data about a single application / config file.')
avGenAppFileId = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 5, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: avGenAppFileId.setStatus('current')
if mibBuilder.loadTexts: avGenAppFileId.setDescription('Index which uniquely identifies the application. NOTE: This index CANNOT BE ZERO (0) since the index of zero is reserved as an indication of network server location in the avGenOpSourceIndex and avGenOpDestIndex above. ')
avGenAppFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 5, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: avGenAppFileName.setStatus('current')
if mibBuilder.loadTexts: avGenAppFileName.setDescription('The name of the application.')
avGenAppFileType = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 5, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34))).clone(namedValues=NamedValues(("runningConfiguration", 1), ("startupConfiguration", 2), ("defaultConfiguration", 3), ("report", 4), ("genConfigFile", 5), ("logFile", 6), ("nvramFile", 7), ("swRuntimeImage", 8), ("swBootImage", 9), ("swComponent", 10), ("other", 11), ("swWebImage", 12), ("swAPImage", 13), ("swNonDownLoadRunTimeImage", 14), ("asgAuthFile", 15), ("licenseFile", 16), ("phoneScriptFile", 17), ("phoneImageFile", 18), ("dhcpBindingFile", 19), ("announcementFile", 20), ("backupDatabase", 21), ("syslogFile", 22), ("cdrFile", 23), ("swRuntimeServicePack", 24), ("swComponentServicePack", 25), ("trustedCertificate", 26), ("certificateRequest", 27), ("serverCertificate", 28), ("privateKey", 29), ("staticLanguagePack", 30), ("phoneAvayaUnicodeMessageFile", 31), ("phoneCustomUnicodeMessageFile", 32), ("startupConfigurationWizardTaskFile", 33), ("genConfigurationWizardTaskFile", 34)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: avGenAppFileType.setStatus('current')
if mibBuilder.loadTexts: avGenAppFileType.setDescription("The type (class) of the application. This class serves to catagorize the many application files in the system into some fixed types: runningConfiguration -- This entry represents a virtual file in the system. Use of this entry in the avGenOpTable should serve to cause the system to generate it's configuration or to force the system to read a new config into it's configuration. startupConfiguration -- This entry represents a real file that is used at start-up to configure the device. defaultConfiguration -- This entry represents a file which contains the default configuration of the device. report -- ?? genConfigFile -- This entry represents a file which contains configuration information (similar to the 'startupConfiguration' above but is not automatically read by the device. This entry is used to represent 'alternate', 'backup' or 'experimental' configurations that the user may which to store on the device. nvramFile -- This entry represents a file that is contain in the nvram files system that does not fit any of the other pre-defined types. swRuntimeImage -- This entry represents a software images that contains operational code that is currently being used to run the device. swBootImage -- This entry represents a software image that contain operational code that is used to initally boot the device. swComponent -- This entry represents a file that is stored as an 'alternate', 'backup' or 'experimental' version of operational code. other -- other swWebImage -- The Image file of the embedded Web application (java application, etc). swAPImage -- the firmware of the Light AP. Device stores the image to support Light AP firmwareless operation. image boot service swNonDownLoadRunTimeImage - image of a non-downloadable code e.g. a bootstrap code asgAuthFile - encrypted Services Logins file licenseFile - file controlling licensed features activation phoneScriptFile(17) - Avaya IP Phone Configuration files (or other endpoints configuration files) as Setting file and Upgrade Script, Stored in device TFTP Server directory, Non Volatile Storage. phoneImageFile(18) - Avaya IP Phone Images files (or other endpoints images files), stored in device TFTP Server directory, Volatile Storage. dhcpBindingFile(19) - Device DHCP server IP binding file. Includes information about bindings of IP to MAC and leased time. announcementFile(20) - Announcement files. ")
avGenAppFileDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 5, 2, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: avGenAppFileDescription.setStatus('current')
if mibBuilder.loadTexts: avGenAppFileDescription.setDescription('A description of the application.')
avGenAppFileSize = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 5, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avGenAppFileSize.setStatus('current')
if mibBuilder.loadTexts: avGenAppFileSize.setDescription('The size (expressed as the number of bytes) of the application.')
avGenAppFileVersionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 5, 2, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avGenAppFileVersionNumber.setStatus('current')
if mibBuilder.loadTexts: avGenAppFileVersionNumber.setDescription("The current version of the application. If this file does not carry a version this field should be NULL. An example is a string of '24.6.0' for G350 software version.")
avGenAppFileLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 5, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("ram", 1), ("flashBankA", 2), ("flashBankB", 3), ("nvram", 4), ("bootProm", 5), ("compactFlash", 6), ("flash", 7)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: avGenAppFileLocation.setStatus('current')
if mibBuilder.loadTexts: avGenAppFileLocation.setDescription('The physical location of the application.')
avGenAppFileDateStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 5, 2, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: avGenAppFileDateStamp.setStatus('current')
if mibBuilder.loadTexts: avGenAppFileDateStamp.setDescription("The time stamp is the Real Time if supported otherwise sysUpTime. The convention for this field is as follows: Real Time: Entry is prefixed with an 'R' character and time is formatted using the convention for date-and-time (rfc1903) DISPLAY-HINT 'R-2d-1d-1d,1d:1d:1d.1d,1a1d:1d' field octets contents range ----- ------ -------- ----- 1 1-2 year 0..65536 2 3 month 1..12 3 4 day 1..31 4 5 hour 0..23 5 6 minutes 0..59 6 7 seconds 0..60 (use 60 for leap-second) 7 8 deci-seconds 0..9 8 9 direction from UTC '+' / '-' 9 10 hours from UTC 0..11 10 11 minutes from UTC 0..59 For example, Tuesday May 26, 1992 at 1:30:15 PM EDT would be displayed as: R-1992-5-26,13:30:15.0,-4:0 Note that if only local time is known, then timezone information (fields 8-10) is not present. SysUpTime: Entry is prefixed with an 'S' character and time is formatted using a portion of that date-and-time convention DISPLAY-HINT 'S-1d-1d,1d:1d:1d.1d' field octets contents range ----- ------ -------- ----- 1 3 month 1..12 2 4 day 1..31 3 5 hour 0..23 4 6 minutes 0..59 5 7 seconds 0..60 6 8 deci-seconds 0..9 For example, S-5-26,13:30:15.0 Represents a file that has existed in the system for 5 months, 26 days, 13 hours, 30 minutes, 15 seconds exactly. This value will be reset after a reboot of the system.")
avGenAppFileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 5, 2, 1, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: avGenAppFileRowStatus.setStatus('current')
if mibBuilder.loadTexts: avGenAppFileRowStatus.setDescription('The status of this entry in the table. Note the available states: active(1), -- Fully configured and active. notInService(2) -- NOT SUPPORTED. notReady(3), -- Entry NOT FULLY configured. createAndGo(4), -- Used to add new Applications in the system. createAndWait(5) -- Used to add new Applications in the system. destroy(6) -- Used to delete Applications in the system. Used only for destroying rows will file size 0. i.e. erase shall be done in operation mib and then destroy the row. ')
avGenAppFilePortNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 5, 2, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avGenAppFilePortNetwork.setStatus('current')
if mibBuilder.loadTexts: avGenAppFilePortNetwork.setDescription('The avGenAppFilePortNetwork is the Port Network that a downloadable TN board is location in. This is useful to the customer in determining the Download Proxy, since location is a factor in determining whether a download is possible. This will represent the possible Port Networks of 1 through 64. Default is 1.')
avGenAppFileDuplStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 5, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("active", 1), ("standby", 2), ("not-administered", 3))).clone('standby')).setMaxAccess("readonly")
if mibBuilder.loadTexts: avGenAppFileDuplStatus.setStatus('current')
if mibBuilder.loadTexts: avGenAppFileDuplStatus.setDescription('The avGenAppFileDuplStatus is the duplication state of the various TN boards that can be duplicated. These include the IPSI and Crossfire boards. This is also useful to the customer in order for them to determine whether a board is active or not. Typical operation is to update the firmware on the standbys first, then have the standbys become active, followed by updating the firmware on the standbys that were originally active. This will help the customer see if they are selecting an active board for upgrading. Default is standby(2).')
avGenAppFileCompatibleVersionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 5, 2, 1, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avGenAppFileCompatibleVersionNumber.setStatus('current')
if mibBuilder.loadTexts: avGenAppFileCompatibleVersionNumber.setDescription("The compatability version relevant to other files on the system. If the value is not needed then this field should be NULL. An example is a string of '18.1'. ")
avLoadNotificationDefinitions = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 6, 5, 3))
avLoadSysDescription = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 6, 5, 3, 1), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: avLoadSysDescription.setStatus('current')
if mibBuilder.loadTexts: avLoadSysDescription.setDescription('The system description.')
avLoadSeverity = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 6, 5, 3, 2), AvLoadItuPerceivedSeverity()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: avLoadSeverity.setStatus('current')
if mibBuilder.loadTexts: avLoadSeverity.setDescription('The severity of the notification.')
avLoadGeneralInformation = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 6, 5, 4))
avGenLoadConnectionState = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 6, 5, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("off", 2), ("down", 3), ("init", 4), ("up", 5), ("idle", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: avGenLoadConnectionState.setStatus('current')
if mibBuilder.loadTexts: avGenLoadConnectionState.setDescription("The SAT Connection status. For cases where the agent must log into the CM server via a SAT connection to collect the data. The agent retrieves the data via the SAT and converts it into SNMP MIB data which is accessible via standard SNMP get commands. The current state of the switch connection; this object can be set to 'off' to disable the connection and can be set to 'init' to re-initialize the connection. It can also be set to 'idle'. ")
avGenRestoreOperationState = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 6, 5, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("idle", 1), ("executing", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: avGenRestoreOperationState.setStatus('current')
if mibBuilder.loadTexts: avGenRestoreOperationState.setDescription('The state of the restore operation. The state will be: idle(1) when no restore operation is activated. executing(2) when restore operation is activated, after restore reset until restore operation is finished and then the status changed to idle(1).')
avLoadApplMemTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 6, 5, 5), )
if mibBuilder.loadTexts: avLoadApplMemTable.setStatus('current')
if mibBuilder.loadTexts: avLoadApplMemTable.setDescription('Table of different application types and their memory allocation in the RAM and NvRAM.')
avLoadApplMemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 6, 5, 5, 1), ).setIndexNames((0, "AVAYA-LOAD-MIB", "avLoadApplMemModuleId"), (0, "AVAYA-LOAD-MIB", "avLoadApplMemLocation"), (0, "AVAYA-LOAD-MIB", "avLoadApplMemType"))
if mibBuilder.loadTexts: avLoadApplMemEntry.setStatus('current')
if mibBuilder.loadTexts: avLoadApplMemEntry.setDescription('An entry in the table, containing data about application and its memory type.')
avLoadApplMemModuleId = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 5, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avLoadApplMemModuleId.setStatus('current')
if mibBuilder.loadTexts: avLoadApplMemModuleId.setDescription('The module ID.')
avLoadApplMemLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 5, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ram", 1), ("flashBankA", 2), ("flashBankB", 3), ("nvram", 4), ("bootProm", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: avLoadApplMemLocation.setStatus('current')
if mibBuilder.loadTexts: avLoadApplMemLocation.setDescription('The Type of the memory that the the file is stored.')
avLoadApplMemType = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 5, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(20))).clone(namedValues=NamedValues(("announcementFile", 20)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: avLoadApplMemType.setStatus('current')
if mibBuilder.loadTexts: avLoadApplMemType.setDescription('The type of the application file.')
avLoadApplMemSize = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 5, 5, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: avLoadApplMemSize.setStatus('current')
if mibBuilder.loadTexts: avLoadApplMemSize.setDescription('The size of the Memory in Bytes for specific application and memory type.')
avLoadApplMemTotalBytesUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 5, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avLoadApplMemTotalBytesUsed.setStatus('current')
if mibBuilder.loadTexts: avLoadApplMemTotalBytesUsed.setDescription('Total Bytes used for the specific module/memory type and file type.')
avLoadApplMemTotalBytesFree = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 5, 5, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avLoadApplMemTotalBytesFree.setStatus('current')
if mibBuilder.loadTexts: avLoadApplMemTotalBytesFree.setDescription('Total Bytes free for the specific module/memory type and file type.')
avLoadAppDynamicFileTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 6, 5, 6), )
if mibBuilder.loadTexts: avLoadAppDynamicFileTable.setStatus('current')
if mibBuilder.loadTexts: avLoadAppDynamicFileTable.setDescription('Table of dynamic applications. This MIB table can be used to show files on external USB mass storage device.')
avLoadAppDynamicFileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 6, 5, 6, 1), ).setIndexNames((0, "AVAYA-LOAD-MIB", "avLoadAppDynamicFileName"))
if mibBuilder.loadTexts: avLoadAppDynamicFileEntry.setStatus('current')
if mibBuilder.loadTexts: avLoadAppDynamicFileEntry.setDescription('An entry in the table, containing data about the application.')
avLoadAppDynamicFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 5, 6, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: avLoadAppDynamicFileName.setStatus('current')
if mibBuilder.loadTexts: avLoadAppDynamicFileName.setDescription('The filename including file system, path and filename. An example: /usbdevice0/backup1/imageA.bin where /usbdevice0/ is the file system of external usb mass storage device. /backup1/ is directory and imageA.bin is the file. ')
avLoadAppDynamicFileType = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 5, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("file", 1), ("directory", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: avLoadAppDynamicFileType.setStatus('current')
if mibBuilder.loadTexts: avLoadAppDynamicFileType.setDescription('Type of the entry (file or directory).')
avLoadAppDynamicFileSize = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 5, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avLoadAppDynamicFileSize.setStatus('current')
if mibBuilder.loadTexts: avLoadAppDynamicFileSize.setDescription('The size (expressed as the number of bytes) of the file.')
avLoadAppDynamicFileDateStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 5, 6, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: avLoadAppDynamicFileDateStamp.setStatus('current')
if mibBuilder.loadTexts: avLoadAppDynamicFileDateStamp.setDescription('Time stamp of the file. Refer to avGenAppFileDateStamp syntax description.')
avLoadAppDynamicFileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 5, 6, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: avLoadAppDynamicFileRowStatus.setStatus('current')
if mibBuilder.loadTexts: avLoadAppDynamicFileRowStatus.setDescription('The status of this entry in the table. Note the available states: active(1), -- Fully configured and active. notInService(2) -- NOT SUPPORTED. notReady(3), -- Entry NOT FULLY configured. NOT SUPPORTED. createAndGo(4), -- Used to add new Applications in the system. NOT SUPPORTED. createAndWait(5) -- Used to add new Applications in the system. NOT SUPPORTED. destroy(6) -- Used to delete Applications in the system. If destroy(6) is used on directory then all the files/directories inside this directory are also deleted. ')
mibBuilder.exportSymbols("AVAYA-LOAD-MIB", avGenOpNextBootImageIndex=avGenOpNextBootImageIndex, AvLoadItuPerceivedSeverity=AvLoadItuPerceivedSeverity, avGenAppFileLocation=avGenAppFileLocation, avGenAppFilePortNetwork=avGenAppFilePortNetwork, avDownloadSuccess=avDownloadSuccess, avGenOpDownloadProxy=avGenOpDownloadProxy, avGenOpServerInetAddress=avGenOpServerInetAddress, avGenLoadConnectionState=avGenLoadConnectionState, avLoadApplMemModuleId=avLoadApplMemModuleId, avGenOpModuleId=avGenOpModuleId, avGenOpUserName=avGenOpUserName, avGenOpPassword=avGenOpPassword, avGenOpServerInetAddressType=avGenOpServerInetAddressType, avUploadSuccess=avUploadSuccess, avUploadFault=avUploadFault, avGenOpSourceIndex=avGenOpSourceIndex, avDownloadFault=avDownloadFault, avLoadApplMemTotalBytesUsed=avLoadApplMemTotalBytesUsed, avGenOpProtocolType=avGenOpProtocolType, avGenLoadNumberOfSession=avGenLoadNumberOfSession, avGenOpLastWarningDisplay=avGenOpLastWarningDisplay, avGenAppFileEntry=avGenAppFileEntry, avLoadAppDynamicFileName=avLoadAppDynamicFileName, avLoadAppDynamicFileRowStatus=avLoadAppDynamicFileRowStatus, avGenAppFileDateStamp=avGenAppFileDateStamp, avGenAppFileCompatibleVersionNumber=avGenAppFileCompatibleVersionNumber, avLoadAppDynamicFileDateStamp=avLoadAppDynamicFileDateStamp, avLoadNotification=avLoadNotification, avGenOpLastFailureIndex=avGenOpLastFailureIndex, avGenOpEnableReset=avGenOpEnableReset, avGenOpFileSystemType=avGenOpFileSystemType, avLoadSysDescription=avLoadSysDescription, avGenRestoreOperationState=avGenRestoreOperationState, avLoadApplMemEntry=avLoadApplMemEntry, avGenOpDestIndex=avGenOpDestIndex, avGenAppFileDuplStatus=avGenAppFileDuplStatus, avGenAppFileSize=avGenAppFileSize, avLoadSeverity=avLoadSeverity, avGenOpLastBootImageIndex=avGenOpLastBootImageIndex, avLoadGeneralInformation=avLoadGeneralInformation, avLoadApplMemLocation=avLoadApplMemLocation, avLoadAppDynamicFileType=avLoadAppDynamicFileType, avGenOpRunningStateDisplay=avGenOpRunningStateDisplay, avDownloadBegun=avDownloadBegun, avLoadAppDynamicFileTable=avLoadAppDynamicFileTable, avGenOperations=avGenOperations, avGenOpReportSpecificFlags=avGenOpReportSpecificFlags, avGenOpErrorLogIndex=avGenOpErrorLogIndex, avLoadApplMemType=avLoadApplMemType, avGenAppFileId=avGenAppFileId, avGenAppFileVersionNumber=avGenAppFileVersionNumber, avLoadApplMemTable=avLoadApplMemTable, avGenOpTable=avGenOpTable, avGenApplications=avGenApplications, avLoadAppDynamicFileSize=avLoadAppDynamicFileSize, avGenOpRunningState=avGenOpRunningState, avUploadBegun=avUploadBegun, avGenAppFileTable=avGenAppFileTable, avGenOpIndex=avGenOpIndex, avGenAppFileName=avGenAppFileName, avGenOpFileName=avGenOpFileName, avLoadNotificationDefinitions=avLoadNotificationDefinitions, avLoadApplMemTotalBytesFree=avLoadApplMemTotalBytesFree, avGenOpServerIP=avGenOpServerIP, avGenOpOctetsReceived=avGenOpOctetsReceived, avGenAppFileRowStatus=avGenAppFileRowStatus, avGenAppFileDescription=avGenAppFileDescription, avLoadApplMemSize=avLoadApplMemSize, avGenAppFileType=avGenAppFileType, avGenOpLastFailureDisplay=avGenOpLastFailureDisplay, avGenOpEntry=avGenOpEntry, avLoad=avLoad, PYSNMP_MODULE_ID=avLoad, avLoadAppDynamicFileEntry=avLoadAppDynamicFileEntry, avGenOpResetSupported=avGenOpResetSupported)
