#
# PySNMP MIB module JUNIPER-IF-ACCOUNTING-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/JUNIPER-IF-ACCOUNTING-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:59:16 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint")
CounterBasedGauge64, = mibBuilder.importSymbols("HCNUM-TC", "CounterBasedGauge64")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
JnxCosFcIdentifier, = mibBuilder.importSymbols("JUNIPER-COS-MIB", "JnxCosFcIdentifier")
ifJnx, = mibBuilder.importSymbols("JUNIPER-IF-MIB", "ifJnx")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
TimeTicks, IpAddress, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, iso, Unsigned32, MibIdentifier, ObjectIdentity, Bits, Gauge32, Counter64, Counter32, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "IpAddress", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "iso", "Unsigned32", "MibIdentifier", "ObjectIdentity", "Bits", "Gauge32", "Counter64", "Counter32", "ModuleIdentity")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
jnxIfAccountingStats = ModuleIdentity((1, 3, 6, 1, 4, 1, 2636, 3, 3, 10))
jnxIfAccountingStats.setRevisions(('2013-05-15 12:23', '2013-12-25 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: jnxIfAccountingStats.setRevisionsDescriptions(('MIB module to define QoS based Interface accounting.', 'MIB module extended to support inline accounting for Per Forwarding-class stats table for Aggregate (all types of traffic) pkt/byte counters & rate',))
if mibBuilder.loadTexts: jnxIfAccountingStats.setLastUpdated('201312250000Z')
if mibBuilder.loadTexts: jnxIfAccountingStats.setOrganization('Juniper Networks, Inc.')
if mibBuilder.loadTexts: jnxIfAccountingStats.setContactInfo('Juniper Technical Assistance Center Juniper Networks, Inc. 1194 N. Mathilda Avenue Sunnyvale, CA 94089 E-mail: support@juniper.net')
if mibBuilder.loadTexts: jnxIfAccountingStats.setDescription('MIB module to define Forwarding Class based Interface statistics. The statistics will provide protocol specific statistics value which includes L2 overhead bytes. The mib is currently supported only on MX platforms.')
jnxIfFcAccountStatTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 3, 10, 1), )
if mibBuilder.loadTexts: jnxIfFcAccountStatTable.setStatus('current')
if mibBuilder.loadTexts: jnxIfFcAccountStatTable.setDescription('This table presents the per forwarding-class and per protocol type statistics.')
jnxIfFcAccountStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 3, 10, 1, 1), ).setIndexNames((0, "JUNIPER-IF-ACCOUNTING-MIB", "jnxIfFcIfIndex"), (0, "JUNIPER-IF-ACCOUNTING-MIB", "jnxIfFcFcIndex"), (0, "JUNIPER-IF-ACCOUNTING-MIB", "jnxIfFcProtocol"))
if mibBuilder.loadTexts: jnxIfFcAccountStatEntry.setStatus('current')
if mibBuilder.loadTexts: jnxIfFcAccountStatEntry.setDescription('This table presents the per forwarding-class and per protocol type statistics. The indices of the table are Interface Index, Forwarding class Index and Protocol type')
jnxIfFcIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 3, 10, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: jnxIfFcIfIndex.setStatus('current')
if mibBuilder.loadTexts: jnxIfFcIfIndex.setDescription('The ifIndex of the interface.')
jnxIfFcFcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 3, 10, 1, 1, 2), JnxCosFcIdentifier())
if mibBuilder.loadTexts: jnxIfFcFcIndex.setStatus('current')
if mibBuilder.loadTexts: jnxIfFcFcIndex.setDescription('The Forwarding Class Index of the interface.')
jnxIfFcProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 3, 10, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("all", 1), ("ipv4", 2), ("ipv6", 3), ("mpls", 4), ("layer2", 5), ("other", 6))))
if mibBuilder.loadTexts: jnxIfFcProtocol.setStatus('current')
if mibBuilder.loadTexts: jnxIfFcProtocol.setDescription("The protocol type of the entry's traffic.")
jnxIfFcHCInUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 3, 10, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIfFcHCInUcastPkts.setStatus('current')
if mibBuilder.loadTexts: jnxIfFcHCInUcastPkts.setDescription('The total number of unicast packets ingressed.')
jnxIfFcHCInUcastOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 3, 10, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIfFcHCInUcastOctets.setStatus('current')
if mibBuilder.loadTexts: jnxIfFcHCInUcastOctets.setDescription('The total number of unicast bytes ingressed.')
jnxIfFcHCOutUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 3, 10, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIfFcHCOutUcastPkts.setStatus('current')
if mibBuilder.loadTexts: jnxIfFcHCOutUcastPkts.setDescription('The total number of unicast packets egressed.')
jnxIfFcHCOutUcastOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 3, 10, 1, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIfFcHCOutUcastOctets.setStatus('current')
if mibBuilder.loadTexts: jnxIfFcHCOutUcastOctets.setDescription('The total number of unicast bytes egressed.')
jnxIfFcHCInMcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 3, 10, 1, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIfFcHCInMcastPkts.setStatus('current')
if mibBuilder.loadTexts: jnxIfFcHCInMcastPkts.setDescription('The total number of multicast packets ingressed.')
jnxIfFcHCInMcastOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 3, 10, 1, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIfFcHCInMcastOctets.setStatus('current')
if mibBuilder.loadTexts: jnxIfFcHCInMcastOctets.setDescription('The total number of multicast bytes ingressed.')
jnxIfFcHCOutMcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 3, 10, 1, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIfFcHCOutMcastPkts.setStatus('current')
if mibBuilder.loadTexts: jnxIfFcHCOutMcastPkts.setDescription('The total number of multicast packets egressed.')
jnxIfFcHCOutMcastOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 3, 10, 1, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIfFcHCOutMcastOctets.setStatus('current')
if mibBuilder.loadTexts: jnxIfFcHCOutMcastOctets.setDescription('The total number of multicast bytes egressed.')
jnxIfFcInlineAccountingStatTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 3, 10, 2), )
if mibBuilder.loadTexts: jnxIfFcInlineAccountingStatTable.setStatus('current')
if mibBuilder.loadTexts: jnxIfFcInlineAccountingStatTable.setDescription('This table presents the per forwarding-class and per family statistics without considering the traffic types.')
jnxIfFcInlineAccountingStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 3, 10, 2, 1), ).setIndexNames((0, "JUNIPER-IF-ACCOUNTING-MIB", "jnxIfFcIfIndex"), (0, "JUNIPER-IF-ACCOUNTING-MIB", "jnxIfFcFcIndex"), (0, "JUNIPER-IF-ACCOUNTING-MIB", "jnxIfFcProtocol"))
if mibBuilder.loadTexts: jnxIfFcInlineAccountingStatEntry.setStatus('current')
if mibBuilder.loadTexts: jnxIfFcInlineAccountingStatEntry.setDescription('This table presents the per forwarding-class and per protocol type statistics. The indices of the table are Interface Index, Forwarding class Index and protocol(family) type as defined below.')
jnxIfFcInlineHCInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 3, 10, 2, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIfFcInlineHCInPkts.setStatus('current')
if mibBuilder.loadTexts: jnxIfFcInlineHCInPkts.setDescription('The total number of packets ingressed.')
jnxIfFcInlineHCInPktsSecRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 3, 10, 2, 1, 2), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIfFcInlineHCInPktsSecRate.setStatus('current')
if mibBuilder.loadTexts: jnxIfFcInlineHCInPktsSecRate.setDescription('The packets rate ingressed per second.')
jnxIfFcInlineHCInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 3, 10, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIfFcInlineHCInOctets.setStatus('current')
if mibBuilder.loadTexts: jnxIfFcInlineHCInOctets.setDescription('The total number of bytes ingressed.')
jnxIfFcInlineHCInOctetsSecRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 3, 10, 2, 1, 4), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIfFcInlineHCInOctetsSecRate.setStatus('current')
if mibBuilder.loadTexts: jnxIfFcInlineHCInOctetsSecRate.setDescription('The bytes rate ingressed per second.')
jnxIfFcInlineHCOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 3, 10, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIfFcInlineHCOutPkts.setStatus('current')
if mibBuilder.loadTexts: jnxIfFcInlineHCOutPkts.setDescription('The total number of packets egressed.')
jnxIfFcInlineHCOutPktsSecRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 3, 10, 2, 1, 6), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIfFcInlineHCOutPktsSecRate.setStatus('current')
if mibBuilder.loadTexts: jnxIfFcInlineHCOutPktsSecRate.setDescription('The packets rate egressed per second.')
jnxIfFcInlineHCOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 3, 10, 2, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIfFcInlineHCOutOctets.setStatus('current')
if mibBuilder.loadTexts: jnxIfFcInlineHCOutOctets.setDescription('The total number of bytes egressed.')
jnxIfFcInlineHCOutOctetsSecRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 3, 10, 2, 1, 8), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIfFcInlineHCOutOctetsSecRate.setStatus('current')
if mibBuilder.loadTexts: jnxIfFcInlineHCOutOctetsSecRate.setDescription('The bytes rate egressed per second.')
mibBuilder.exportSymbols("JUNIPER-IF-ACCOUNTING-MIB", jnxIfFcInlineHCInOctets=jnxIfFcInlineHCInOctets, jnxIfFcHCOutMcastPkts=jnxIfFcHCOutMcastPkts, jnxIfFcHCOutUcastPkts=jnxIfFcHCOutUcastPkts, jnxIfAccountingStats=jnxIfAccountingStats, jnxIfFcInlineAccountingStatEntry=jnxIfFcInlineAccountingStatEntry, jnxIfFcHCInMcastPkts=jnxIfFcHCInMcastPkts, jnxIfFcFcIndex=jnxIfFcFcIndex, jnxIfFcInlineAccountingStatTable=jnxIfFcInlineAccountingStatTable, jnxIfFcProtocol=jnxIfFcProtocol, jnxIfFcInlineHCInPktsSecRate=jnxIfFcInlineHCInPktsSecRate, jnxIfFcInlineHCInOctetsSecRate=jnxIfFcInlineHCInOctetsSecRate, jnxIfFcInlineHCOutPkts=jnxIfFcInlineHCOutPkts, jnxIfFcHCOutMcastOctets=jnxIfFcHCOutMcastOctets, jnxIfFcAccountStatEntry=jnxIfFcAccountStatEntry, jnxIfFcAccountStatTable=jnxIfFcAccountStatTable, jnxIfFcIfIndex=jnxIfFcIfIndex, jnxIfFcInlineHCOutPktsSecRate=jnxIfFcInlineHCOutPktsSecRate, PYSNMP_MODULE_ID=jnxIfAccountingStats, jnxIfFcHCInUcastPkts=jnxIfFcHCInUcastPkts, jnxIfFcHCOutUcastOctets=jnxIfFcHCOutUcastOctets, jnxIfFcHCInUcastOctets=jnxIfFcHCInUcastOctets, jnxIfFcInlineHCOutOctetsSecRate=jnxIfFcInlineHCOutOctetsSecRate, jnxIfFcHCInMcastOctets=jnxIfFcHCInMcastOctets, jnxIfFcInlineHCInPkts=jnxIfFcInlineHCInPkts, jnxIfFcInlineHCOutOctets=jnxIfFcInlineHCOutOctets)
