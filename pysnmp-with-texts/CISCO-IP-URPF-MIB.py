#
# PySNMP MIB module CISCO-IP-URPF-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-IP-URPF-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:56:29 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
iso, Unsigned32, Counter64, ModuleIdentity, Bits, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, TimeTicks, MibIdentifier, Counter32, ObjectIdentity, IpAddress, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "Unsigned32", "Counter64", "ModuleIdentity", "Bits", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "TimeTicks", "MibIdentifier", "Counter32", "ObjectIdentity", "IpAddress", "Gauge32")
TruthValue, TextualConvention, TimeStamp, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "TextualConvention", "TimeStamp", "DisplayString")
ciscoIpUrpfMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 451))
ciscoIpUrpfMIB.setRevisions(('2011-12-29 00:00', '2004-11-12 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoIpUrpfMIB.setRevisionsDescriptions(('2 New TC are defined to support Dynamic template MIB', 'Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoIpUrpfMIB.setLastUpdated('201112290000Z')
if mibBuilder.loadTexts: ciscoIpUrpfMIB.setOrganization('Cisco System, Inc.')
if mibBuilder.loadTexts: ciscoIpUrpfMIB.setContactInfo('Postal: Cisco Systems, Inc. 170 West Tasman Drive San Jose, CA 95134-1706 USA Tel: +1 800 553-NETS E-mail: cs-cef@cisco.com')
if mibBuilder.loadTexts: ciscoIpUrpfMIB.setDescription('Unicast Reverse Path Forwarding (URPF) is a function that checks the validity of the source address of IP packets received on an interface. This in an attempt to prevent Denial of Service attacks based on IP address spoofing. URPF checks validity of a source address by determining whether the packet would be successfully routed as a destination address. Based on configuration, the check made can be for existence of any route for the address, or more strictly for a route out the interface on which the packet was received by the device. When a violating packet is detected, it can be dropped. This MIB allows detection of spoofingevents.')
class UnicastRpfType(TextualConvention, Integer32):
    reference = 'RFC3704 (http://tools.ietf.org/html/rfc3704)'
    description = "An enumerated integer-value describing the type of unicast Reverse Path Forwarding (RPF) a system applies to traffic received on an interface. UnicastRpfTypes 'strict' and 'loose' RPF methods are defined in RFC3704. 'disabled' The system does not perform unicast RPF on packets received by the interface. 'strict' The system performs strict unicast RPF on packets received by the interface. 'loose' The system performs loose unicast RPF on packets received by the interface."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("strict", 1), ("loose", 2), ("disabled", 3))

class UnicastRpfOptions(TextualConvention, Bits):
    description = "A bit string describing unicast Reverse Path Forwarding (RPF) options: 'allowDefault' Allows the use of the default route for RPF verification. 'allowSelfPing' Allows a router to ping its own interface or interfaces."
    status = 'current'
    namedValues = NamedValues(("allowDefault", 0), ("allowSelfPing", 1))

ciscoIpUrpfMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 451, 0))
ciscoIpUrpfMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 451, 1))
ciscoIpUrpfMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 451, 2))
cipUrpfScalar = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 451, 1, 1))
cipUrpfStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 451, 1, 2))
cipUrpfInterfaceConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 451, 1, 3))
cipUrpfVrf = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 451, 1, 4))
cipUrpfDropRateWindow = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 451, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 600)).clone(300)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cipUrpfDropRateWindow.setStatus('current')
if mibBuilder.loadTexts: cipUrpfDropRateWindow.setDescription('The window of time in the recent past over which the drop count used in the drop rate computation is collected. This global value applies for the computation of all URPF rates, global and per-interface. Once the period over which computations have been performed exceeds cipUrpfDropRateWindow, every time a computation is performed, the window slides up to end at the current time and start at cipUrpfDropRateWindow seconds before. The cipUrpfDropRateWindow must be greater than or equal to the interval between computations (cipUrpfComputeInterval). Since the agent must save the drop count values for each compute interval in order to slide the window, the number of counts saved is the quotient of cipUrpfDropRateWindow divided by cipUrpfComputeInterval.')
cipUrpfComputeInterval = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 451, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 120)).clone(30)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cipUrpfComputeInterval.setStatus('current')
if mibBuilder.loadTexts: cipUrpfComputeInterval.setDescription('The time between rate computations. This global value applies for the computation of all URPF rates, global and per-interface. When the value of cipUrpfComputeInterval is changed, the interval in-progress proceeds as though the value had not changed. The change will apply to the length of subsequent intervals. The cipUrpfComputeInterval must be less than or equal to the cipUrpfDropRateWindow.')
cipUrpfDropNotifyHoldDownTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 451, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)).clone(300)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cipUrpfDropNotifyHoldDownTime.setStatus('current')
if mibBuilder.loadTexts: cipUrpfDropNotifyHoldDownTime.setDescription('The minimum time between issuance of cipUrpfIfDropRateNotify notifications for a particular interface and packet forwarding type. Notifications are generated for each interface and packet forwarding type that exceeds the drop-rate. When a Notify is sent because the drop-rate is exceeded for a particular interface and forwarding type, the time specified by this object is used to specify the minimum time that must elapse before another Notify can be sent for that interface and forwarding type. The time is specified globally but used individually.')
cipUrpfTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 451, 1, 2, 1), )
if mibBuilder.loadTexts: cipUrpfTable.setStatus('current')
if mibBuilder.loadTexts: cipUrpfTable.setDescription('This table contains summary information for the managed device on URPF dropping.')
cipUrpfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 451, 1, 2, 1, 1), ).setIndexNames((0, "CISCO-IP-URPF-MIB", "cipUrpfIpVersion"))
if mibBuilder.loadTexts: cipUrpfEntry.setStatus('current')
if mibBuilder.loadTexts: cipUrpfEntry.setDescription('If the managed device supports URPF dropping, a row exists for each IP version type (v4 and v6). A row contains summary information on URPF dropping over the entire managed device.')
cipUrpfIpVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 451, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipv4", 1), ("ipv6", 2))))
if mibBuilder.loadTexts: cipUrpfIpVersion.setStatus('current')
if mibBuilder.loadTexts: cipUrpfIpVersion.setDescription('Specifies the version of IP forwarding on an interface to which the table row URPF counts, rates, and configuration apply.')
cipUrpfDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 451, 1, 2, 1, 1, 2), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipUrpfDrops.setStatus('current')
if mibBuilder.loadTexts: cipUrpfDrops.setDescription('Sum of dropped IP version cipUrpfIpVersion packets failing a URPF check. This value is the sum of drops of packets received on all interfaces of the managed device.')
cipUrpfDropRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 451, 1, 2, 1, 1, 3), Gauge32()).setUnits('packets per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipUrpfDropRate.setStatus('current')
if mibBuilder.loadTexts: cipUrpfDropRate.setDescription('The rate of packet drops of IP version cipUrpfIpVersion packets due to URPF for the managed device. The per-interface drop rate notification is issued on rates exceeding a limit (rising rate). This dropping may indicate an security attack on the network. To determine whether the attack/event is over, the NMS must consult the managed device. This object can be polled to determine the recent drop rate for the managed device as a whole, in addition to querying particular interface objects. This object is the average rate of dropping over the most recent window of time. The rate is computed by dividing the number of packets dropped over a window by the window time in seconds. The window time is specified by cipUrpfDropRateWindow. Each time the drop rate is computed, and at system startup, a snapshot is taken of the latest value of cipUrpfDrops. Subtracting from this the snapshot of cipUrpfDrops at the start of the current window of time gives the number of packets dropped. The drop rate is computed every cipUrpfComputeInterval seconds. As an example, let cipUrpfDropRateWindow be 300 seconds, and cipUrpfComputeInterval 30 seconds. Every 30 seconds, the drop count five minutes previous is subtracted from the current drop count, and the result is divided by 300 to arrive at the drop rate. At device start-up, until the device has been up more than cipUrpfDropRateWindow, when drop rate is computed, the value of cipUrpfDrops is divided by the time the device has been up. After the device has been up for cipUrpfDropRateWindow, when drop rate is computed, the number of packet drops counted from interval start time to the computation time is divided by cipUrpfDropRateWindow. Changes to cipUrpfDropRateWindow are not reflected in this object until the next computation time. The rate from the most recent computation is the value fetched until the subsequent computation is performed.')
cipUrpfIfMonTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 451, 1, 2, 2), )
if mibBuilder.loadTexts: cipUrpfIfMonTable.setStatus('current')
if mibBuilder.loadTexts: cipUrpfIfMonTable.setDescription('This table contains information on URPF dropping on an interface.')
cipUrpfIfMonEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 451, 1, 2, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-IP-URPF-MIB", "cipUrpfIfIpVersion"))
if mibBuilder.loadTexts: cipUrpfIfMonEntry.setStatus('current')
if mibBuilder.loadTexts: cipUrpfIfMonEntry.setDescription('If IPv4 packet forwarding is configured on an interface, and is configured to perform URPF checking, a row appears in this table with indices [ifIndex][ipv4]. If IPv4 packet forwarding is deconfigured, or URPF checking is deconfigured, the row disappears. If IPv6 packet forwarding is configured on an interface, and is configured to perform URPF checking, a row appears in the table with indices [ifIndex][ipv6]. If IPv6 packet forwarding is deconfigured, or URPF checking is deconfigured, the row disappears.')
cipUrpfIfIpVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 451, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipv4", 1), ("ipv6", 2))))
if mibBuilder.loadTexts: cipUrpfIfIpVersion.setStatus('current')
if mibBuilder.loadTexts: cipUrpfIfIpVersion.setDescription('Specifies the version of IP forwarding on an interface to which the table row URPF counts, rates, and configuration apply.')
cipUrpfIfDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 451, 1, 2, 2, 1, 2), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipUrpfIfDrops.setStatus('current')
if mibBuilder.loadTexts: cipUrpfIfDrops.setDescription('The number of IP packets of version cipUrpfIfIpVersion failing the URPF check and dropped by the managed device on a particular interface. Discontinuities in the value of this variable can occur at re-initialization of the management system, and at other times as indicated by the values of cipUrpfIfDiscontinuityTime.')
cipUrpfIfSuppressedDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 451, 1, 2, 2, 1, 3), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipUrpfIfSuppressedDrops.setStatus('current')
if mibBuilder.loadTexts: cipUrpfIfSuppressedDrops.setDescription("The number of IP packets of version cipUrpfIfIpVersion failing the URPF check but given a reprieve and not dropped by the managed device. Depending on the device configuration and capabilities, the following cases may cause incrementing of the counter: - if the managed device is configured to allow self-pings and the managed device pings itself. - if the managed device is configured for loose URPF (if any interface has a route to the source), and the strict case fails while the loose case passes. - DHCP Request packets (src 0.0.0.0 dst 255.255.255.255) will pass after initially being marked for drop. - RIP routing on unnumbered interfaces will pass after initially being marked for drop. - multicast packets will pass after initially being marked for drop - ACL's can be applied to permit packets after initially being marked for drop. Discontinuities in the value of this variable can occur at re-initialization of the management system, and at other times as indicated by the values of cipUrpfIfDiscontinuityTime.")
cipUrpfIfDropRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 451, 1, 2, 2, 1, 4), Gauge32()).setUnits('packets/second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipUrpfIfDropRate.setStatus('current')
if mibBuilder.loadTexts: cipUrpfIfDropRate.setDescription('The rate of packet drops of IP version cipUrpfIfIpVersion packets due to URPF on the interface. This object is the average rate of dropping over the most recent interval of time. The rate is computed by dividing the number of packets dropped over an interval by the interval time in seconds. Each time the drop rate is computed, and at system startup, a snapshot is taken of the latest value of cipUrpfIfDrops. Subtracting from this the snapshot of cipUrpfIfDrops at the start of the current interval of time gives the number of packets dropped. The drop rate is computed every cipUrpfComputeInterval seconds. When drop rate is computed, if time since the creation of a row in cipUrpfIfMonTable is less than cipUrpfDropRateWindow, the value of cipUrpfIfDrops is divided by the time since row was created. After the row has been in existence for cipUrpfDropRateWindow, when drop rate is computed, the number of packet drops counted on the interface from interval start time to the computation time is divided by cipUrpfDropRateWindow. Changes to cipUrpfDropRateWindow are not reflected in this object until the next computation time. The rate from the most recent computation is the value fetched until the subsequent computation is performed.')
cipUrpfIfDiscontinuityTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 451, 1, 2, 2, 1, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipUrpfIfDiscontinuityTime.setStatus('current')
if mibBuilder.loadTexts: cipUrpfIfDiscontinuityTime.setDescription("The value of sysUpTime on the most recent occasion at which this interface's counters suffered a discontinuity. If no such discontinuities have occurred since the last re-initialization of the local management subsystem, then this object contains a value of zero.")
cipUrpfIfConfTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 451, 1, 3, 1), )
if mibBuilder.loadTexts: cipUrpfIfConfTable.setStatus('current')
if mibBuilder.loadTexts: cipUrpfIfConfTable.setDescription('This table contains statistics information on URPF on an interface.')
cipUrpfIfConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 451, 1, 3, 1, 1), )
cipUrpfIfMonEntry.registerAugmentions(("CISCO-IP-URPF-MIB", "cipUrpfIfConfEntry"))
cipUrpfIfConfEntry.setIndexNames(*cipUrpfIfMonEntry.getIndexNames())
if mibBuilder.loadTexts: cipUrpfIfConfEntry.setStatus('current')
if mibBuilder.loadTexts: cipUrpfIfConfEntry.setDescription('A row exists in this table if a row exists in cipUrpfIfMonTable.')
cipUrpfIfDropRateNotifyEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 451, 1, 3, 1, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cipUrpfIfDropRateNotifyEnable.setStatus('current')
if mibBuilder.loadTexts: cipUrpfIfDropRateNotifyEnable.setDescription('This object specifies whether the system produces the cipUrpfIfDropRateNotify notification as a result of URPF dropping of version cipUrpfIfIpVersion IP packets on this interface. A false value prevents such notifications from being generated by this system.')
cipUrpfIfNotifyDropRateThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 451, 1, 3, 1, 1, 2), Unsigned32().clone(1000)).setUnits('packets/second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cipUrpfIfNotifyDropRateThreshold.setStatus('current')
if mibBuilder.loadTexts: cipUrpfIfNotifyDropRateThreshold.setDescription('When the calculated rate of URPF packet drops (cipUrpfIfDropRate) meets or exceeds the value specified by this object, a cipUrpfIfDropRateNotify notification is sent if cipUrpfIfDropRateNotifyEnable is set to true, and no such notification for the IP version has been sent for this interface for the hold-down period. Note that due to the calculation used for drop rate, if there are less than n drop events in an n-second period the notification will not be generated. To allow for the detection of a small number of drop events, the value 0 (zero) is used to indicate that if any drop events occur during the interval, a notification is generated.')
cipUrpfIfNotifyDrHoldDownReset = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 451, 1, 3, 1, 1, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cipUrpfIfNotifyDrHoldDownReset.setStatus('current')
if mibBuilder.loadTexts: cipUrpfIfNotifyDrHoldDownReset.setDescription("Setting this object to true causes the five-minute hold-down timer for emitting URPF drop rate notifications for IP version cipUrpfIfIpVersion on the interface to be short-circuited. If a notification is due and would be emitted for the interface if the five-minutes elapsed, setting this object will cause the notification to be sent. This is a trigger, and doesn't hold information. It is set and an action is performed. Therefore a get for this object always returns false.")
cipUrpfIfCheckStrict = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 451, 1, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("strict", 1), ("loose", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipUrpfIfCheckStrict.setStatus('current')
if mibBuilder.loadTexts: cipUrpfIfCheckStrict.setDescription('Interface configuration indicating the strictness of the reachability check performed on the interface. - strict: check that source addr is reachable via the interface it came in on. - loose : check that source addr is reachable via some interface on the device.')
cipUrpfIfWhichRouteTableID = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 451, 1, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("default", 1), ("vrf", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipUrpfIfWhichRouteTableID.setStatus('current')
if mibBuilder.loadTexts: cipUrpfIfWhichRouteTableID.setDescription('Interface configuration indicating the routing table consulted for the reachability check: - default: the non-private routing table for of the managed system. - vrf : a particular VPN routing table.')
cipUrpfIfVrfName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 451, 1, 3, 1, 1, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipUrpfIfVrfName.setStatus('current')
if mibBuilder.loadTexts: cipUrpfIfVrfName.setDescription("If the value of cipUrpfIfWhichRouteTableID is 'vrf', the name of the VRF Table. Otherwise a zero-length string.")
cipUrpfVrfTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 451, 1, 4, 1), )
if mibBuilder.loadTexts: cipUrpfVrfTable.setStatus('current')
if mibBuilder.loadTexts: cipUrpfVrfTable.setDescription('This table enables indexing URPF drop statistics by Virtual Routing and Forwarding instances.')
cipUrpfVrfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 451, 1, 4, 1, 1), ).setIndexNames((0, "CISCO-IP-URPF-MIB", "cipUrpfVrfName"))
if mibBuilder.loadTexts: cipUrpfVrfEntry.setStatus('current')
if mibBuilder.loadTexts: cipUrpfVrfEntry.setDescription('An entry exists for a VRF if and only if the VRF is associated with an interface that is configured to perform IP URPF checking using the routing table for that VRF.')
cipUrpfVrfName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 451, 1, 4, 1, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipUrpfVrfName.setStatus('current')
if mibBuilder.loadTexts: cipUrpfVrfName.setDescription('This field is used to specify the VRF Table name.')
cipUrpfVrfIfTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 451, 1, 2, 3), )
if mibBuilder.loadTexts: cipUrpfVrfIfTable.setStatus('current')
if mibBuilder.loadTexts: cipUrpfVrfIfTable.setDescription('This table contains statistics information for interfaces performing URPF using VRF table to determine reachability.')
cipUrpfVrfIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 451, 1, 2, 3, 1), ).setIndexNames((0, "CISCO-IP-URPF-MIB", "cipUrpfVrfName"), (0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cipUrpfVrfIfEntry.setStatus('current')
if mibBuilder.loadTexts: cipUrpfVrfIfEntry.setDescription('An entry exists for a VRF and interface if and only if the VRF associated with the interface is configured to perform IP URPF checking using the routing table for the VRF.')
cipUrpfVrfIfDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 451, 1, 2, 3, 1, 2), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipUrpfVrfIfDrops.setStatus('current')
if mibBuilder.loadTexts: cipUrpfVrfIfDrops.setDescription('The number of packets failing the URPF check for a VRF on the interface and dropped by the managed device. Discontinuities in the value of this variable can occur at re-initialization of the management system, and at other times as indicated by the values of cipUrpfVrfIfDiscontinuityTime.')
cipUrpfVrfIfDiscontinuityTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 451, 1, 2, 3, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipUrpfVrfIfDiscontinuityTime.setStatus('current')
if mibBuilder.loadTexts: cipUrpfVrfIfDiscontinuityTime.setDescription('The value of sysUpTime on the most recent occasion at which the URPF counters for this VRF on this interface suffered a discontinuity. If no such discontinuities have occurred since the last re-initialization of the local management subsystem, then this object contains a value of zero.')
cipUrpfIfDropRateNotify = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 451, 0, 1)).setObjects(("CISCO-IP-URPF-MIB", "cipUrpfIfDropRate"))
if mibBuilder.loadTexts: cipUrpfIfDropRateNotify.setStatus('current')
if mibBuilder.loadTexts: cipUrpfIfDropRateNotify.setDescription('This notification is generated when cipUrpfIfDropRateNotifyEnable is set to true and the calculated URPF drop rate (cipUrpfIfDropRate) exceeds the notification threshold drop rate (cipUrpfIfNotifyDropRateThreshold). Note the exceptional value of 0 for threshold allows notification generation if any drop events occur in an interval. After generating this notification, another such notification will not be sent out for a minimum of five minutes (note the exception to this provided by cipUrpfIfNotifyDrHoldDownReset). The object value present in the notification is the the drop rate that exceeded the threshold.')
ciscoIpUrpfMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 451, 2, 1))
ciscoIpUrpfMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 451, 2, 2))
ciscoIpUrpfMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 451, 2, 1, 1)).setObjects(("CISCO-IP-URPF-MIB", "ciscoIpUrpfMIBMainObjectGroup"), ("CISCO-IP-URPF-MIB", "ciscoIpUrpfMIBNotifyGroup"), ("CISCO-IP-URPF-MIB", "ciscoIpUrpfMIBVrfObjectGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoIpUrpfMIBCompliance = ciscoIpUrpfMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: ciscoIpUrpfMIBCompliance.setDescription('An SNMP entity can implement this module to provide URPF problem diagnosis information.')
ciscoIpUrpfMIBMainObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 451, 2, 2, 1)).setObjects(("CISCO-IP-URPF-MIB", "cipUrpfDropRateWindow"), ("CISCO-IP-URPF-MIB", "cipUrpfComputeInterval"), ("CISCO-IP-URPF-MIB", "cipUrpfDropNotifyHoldDownTime"), ("CISCO-IP-URPF-MIB", "cipUrpfDrops"), ("CISCO-IP-URPF-MIB", "cipUrpfDropRate"), ("CISCO-IP-URPF-MIB", "cipUrpfIfDrops"), ("CISCO-IP-URPF-MIB", "cipUrpfIfSuppressedDrops"), ("CISCO-IP-URPF-MIB", "cipUrpfIfDropRate"), ("CISCO-IP-URPF-MIB", "cipUrpfIfDropRateNotifyEnable"), ("CISCO-IP-URPF-MIB", "cipUrpfIfNotifyDropRateThreshold"), ("CISCO-IP-URPF-MIB", "cipUrpfIfNotifyDrHoldDownReset"), ("CISCO-IP-URPF-MIB", "cipUrpfIfCheckStrict"), ("CISCO-IP-URPF-MIB", "cipUrpfIfDiscontinuityTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoIpUrpfMIBMainObjectGroup = ciscoIpUrpfMIBMainObjectGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoIpUrpfMIBMainObjectGroup.setDescription('The collection of common counter objects, those needed by other objects, and the common interface table.')
ciscoIpUrpfMIBVrfObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 451, 2, 2, 2)).setObjects(("CISCO-IP-URPF-MIB", "cipUrpfVrfName"), ("CISCO-IP-URPF-MIB", "cipUrpfIfWhichRouteTableID"), ("CISCO-IP-URPF-MIB", "cipUrpfIfVrfName"), ("CISCO-IP-URPF-MIB", "cipUrpfVrfIfDrops"), ("CISCO-IP-URPF-MIB", "cipUrpfVrfIfDiscontinuityTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoIpUrpfMIBVrfObjectGroup = ciscoIpUrpfMIBVrfObjectGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoIpUrpfMIBVrfObjectGroup.setDescription('The collection of objects needed to index by VRF.')
ciscoIpUrpfMIBNotifyGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 451, 2, 2, 6)).setObjects(("CISCO-IP-URPF-MIB", "cipUrpfIfDropRateNotify"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoIpUrpfMIBNotifyGroup = ciscoIpUrpfMIBNotifyGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoIpUrpfMIBNotifyGroup.setDescription('The collection of objects which are used to specify notifications for URPF.')
mibBuilder.exportSymbols("CISCO-IP-URPF-MIB", cipUrpfIfMonTable=cipUrpfIfMonTable, cipUrpfIfVrfName=cipUrpfIfVrfName, cipUrpfIpVersion=cipUrpfIpVersion, cipUrpfIfConfEntry=cipUrpfIfConfEntry, cipUrpfIfSuppressedDrops=cipUrpfIfSuppressedDrops, cipUrpfIfConfTable=cipUrpfIfConfTable, cipUrpfTable=cipUrpfTable, cipUrpfIfNotifyDrHoldDownReset=cipUrpfIfNotifyDrHoldDownReset, cipUrpfVrfName=cipUrpfVrfName, cipUrpfInterfaceConfig=cipUrpfInterfaceConfig, cipUrpfEntry=cipUrpfEntry, UnicastRpfOptions=UnicastRpfOptions, cipUrpfIfMonEntry=cipUrpfIfMonEntry, ciscoIpUrpfMIBCompliance=ciscoIpUrpfMIBCompliance, cipUrpfStatistics=cipUrpfStatistics, cipUrpfIfDropRateNotifyEnable=cipUrpfIfDropRateNotifyEnable, cipUrpfVrfIfEntry=cipUrpfVrfIfEntry, cipUrpfVrfEntry=cipUrpfVrfEntry, cipUrpfIfIpVersion=cipUrpfIfIpVersion, ciscoIpUrpfMIBNotifs=ciscoIpUrpfMIBNotifs, ciscoIpUrpfMIBNotifyGroup=ciscoIpUrpfMIBNotifyGroup, cipUrpfIfDropRateNotify=cipUrpfIfDropRateNotify, cipUrpfIfWhichRouteTableID=cipUrpfIfWhichRouteTableID, ciscoIpUrpfMIBConformance=ciscoIpUrpfMIBConformance, PYSNMP_MODULE_ID=ciscoIpUrpfMIB, ciscoIpUrpfMIBGroups=ciscoIpUrpfMIBGroups, UnicastRpfType=UnicastRpfType, ciscoIpUrpfMIBVrfObjectGroup=ciscoIpUrpfMIBVrfObjectGroup, ciscoIpUrpfMIBCompliances=ciscoIpUrpfMIBCompliances, ciscoIpUrpfMIBMainObjectGroup=ciscoIpUrpfMIBMainObjectGroup, ciscoIpUrpfMIBObjects=ciscoIpUrpfMIBObjects, cipUrpfVrf=cipUrpfVrf, cipUrpfDropNotifyHoldDownTime=cipUrpfDropNotifyHoldDownTime, cipUrpfComputeInterval=cipUrpfComputeInterval, cipUrpfIfNotifyDropRateThreshold=cipUrpfIfNotifyDropRateThreshold, cipUrpfIfDiscontinuityTime=cipUrpfIfDiscontinuityTime, cipUrpfVrfIfDrops=cipUrpfVrfIfDrops, cipUrpfVrfIfTable=cipUrpfVrfIfTable, cipUrpfScalar=cipUrpfScalar, cipUrpfIfCheckStrict=cipUrpfIfCheckStrict, cipUrpfVrfIfDiscontinuityTime=cipUrpfVrfIfDiscontinuityTime, cipUrpfDrops=cipUrpfDrops, cipUrpfDropRate=cipUrpfDropRate, cipUrpfIfDropRate=cipUrpfIfDropRate, cipUrpfDropRateWindow=cipUrpfDropRateWindow, cipUrpfIfDrops=cipUrpfIfDrops, ciscoIpUrpfMIB=ciscoIpUrpfMIB, cipUrpfVrfTable=cipUrpfVrfTable)
