#
# PySNMP MIB module WLSX-WLAN-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/WLSX-WLAN-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:36:48 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
wlsxEnterpriseMibModules, = mibBuilder.importSymbols("ARUBA-MIB", "wlsxEnterpriseMibModules")
ArubaVlanValidRange, ArubaRogueApType, ArubaAPStatus, ArubaAccessPointMode, ArubaMonitorMode, ArubaAntennaSetting, ArubaEnet1Mode, ArubaPhyType, ArubaHTMode, ArubaVoipProtocolType, ArubaMeshRole, ArubaHTExtChannel, ArubaAuthenticationMethods, ArubaFrameType, ArubaEnableValue, ArubaEncryptionMethods, ArubaUnprovisionedStatus, ArubaActiveState = mibBuilder.importSymbols("ARUBA-TC", "ArubaVlanValidRange", "ArubaRogueApType", "ArubaAPStatus", "ArubaAccessPointMode", "ArubaMonitorMode", "ArubaAntennaSetting", "ArubaEnet1Mode", "ArubaPhyType", "ArubaHTMode", "ArubaVoipProtocolType", "ArubaMeshRole", "ArubaHTExtChannel", "ArubaAuthenticationMethods", "ArubaFrameType", "ArubaEnableValue", "ArubaEncryptionMethods", "ArubaUnprovisionedStatus", "ArubaActiveState")
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
TextualConvention, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, Counter64, IpAddress, TimeTicks, ObjectIdentity, snmpModules, iso, NotificationType, MibIdentifier, Gauge32, Counter32, Unsigned32, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "TextualConvention", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "Counter64", "IpAddress", "TimeTicks", "ObjectIdentity", "snmpModules", "iso", "NotificationType", "MibIdentifier", "Gauge32", "Counter32", "Unsigned32", "Integer32")
TextualConvention, RowStatus, TimeInterval, TruthValue, PhysAddress, TAddress, TDomain, DisplayString, TestAndIncr, MacAddress, StorageType = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "RowStatus", "TimeInterval", "TruthValue", "PhysAddress", "TAddress", "TDomain", "DisplayString", "TestAndIncr", "MacAddress", "StorageType")
wlsxWlanMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5))
wlsxWlanMIB.setRevisions(('1910-01-26 18:06',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: wlsxWlanMIB.setRevisionsDescriptions(('The initial revision.',))
if mibBuilder.loadTexts: wlsxWlanMIB.setLastUpdated('1001261806Z')
if mibBuilder.loadTexts: wlsxWlanMIB.setOrganization('Aruba Wireless Networks')
if mibBuilder.loadTexts: wlsxWlanMIB.setContactInfo('Postal: 1322 Crossman Avenue Sunnyvale, CA 94089 E-mail: dl-support@arubanetworks.com Phone: +1 408 227 4500')
if mibBuilder.loadTexts: wlsxWlanMIB.setDescription('This MIB module defines MIB objects which provide information about the Wireless Management System (WMS) in the Aruba Controller.')
wlsxWlanConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 1))
wlsxWlanStateGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2))
wlsxWlanStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3))
wlsxWlanAccessPointInfoGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1))
wlsxWlanStationInfoGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 2))
wlsxWlanAssociationInfoGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 3))
wlsxWlanAccessPointStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1))
wlsxWlanStationStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2))
wlsxWlanTotalNumAccessPoints = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsxWlanTotalNumAccessPoints.setStatus('current')
if mibBuilder.loadTexts: wlsxWlanTotalNumAccessPoints.setDescription(' Total Number of Access Points connected to the controller. ')
wlsxWlanTotalNumStationsAssociated = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsxWlanTotalNumStationsAssociated.setStatus('current')
if mibBuilder.loadTexts: wlsxWlanTotalNumStationsAssociated.setDescription(' Total Number of Stations Associated to the controller. ')
wlsxWlanAPGroupTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 3), )
if mibBuilder.loadTexts: wlsxWlanAPGroupTable.setStatus('current')
if mibBuilder.loadTexts: wlsxWlanAPGroupTable.setDescription(' This Table lists all the Access Points Groups configured in the Aruba controller. ')
wlsxWlanAPGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 3, 1), ).setIndexNames((0, "WLSX-WLAN-MIB", "wlanAPGroup"))
if mibBuilder.loadTexts: wlsxWlanAPGroupEntry.setStatus('current')
if mibBuilder.loadTexts: wlsxWlanAPGroupEntry.setDescription('AP Group Entry')
wlanAPGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 3, 1, 1), DisplayString())
if mibBuilder.loadTexts: wlanAPGroup.setStatus('current')
if mibBuilder.loadTexts: wlanAPGroup.setDescription(' The name of an AP group ')
wlanAPNumAps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPNumAps.setStatus('current')
if mibBuilder.loadTexts: wlanAPNumAps.setDescription(' The number of APs in the AP Group ')
wlsxWlanAPTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 4), )
if mibBuilder.loadTexts: wlsxWlanAPTable.setStatus('current')
if mibBuilder.loadTexts: wlsxWlanAPTable.setDescription(' This table lists all the Access Points connected to the controller. ')
wlsxWlanAPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 4, 1), ).setIndexNames((0, "WLSX-WLAN-MIB", "wlanAPMacAddress"))
if mibBuilder.loadTexts: wlsxWlanAPEntry.setStatus('current')
if mibBuilder.loadTexts: wlsxWlanAPEntry.setDescription('Access Point Entry')
wlanAPMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 4, 1, 1), MacAddress())
if mibBuilder.loadTexts: wlanAPMacAddress.setStatus('current')
if mibBuilder.loadTexts: wlanAPMacAddress.setDescription(' Ethernet MAC Address of the Access Point ')
wlanAPIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 4, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPIpAddress.setStatus('current')
if mibBuilder.loadTexts: wlanAPIpAddress.setDescription(' IP Address of the Access Point ')
wlanAPName = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 4, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanAPName.setStatus('current')
if mibBuilder.loadTexts: wlanAPName.setDescription(' Host name of the Access Point. ')
wlanAPGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 4, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanAPGroupName.setStatus('current')
if mibBuilder.loadTexts: wlanAPGroupName.setDescription(' Group Name of the Access Point. ')
wlanAPModel = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 4, 1, 5), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPModel.setStatus('current')
if mibBuilder.loadTexts: wlanAPModel.setDescription(' Sys OID of the Access Point. ')
wlanAPSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 4, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPSerialNumber.setStatus('current')
if mibBuilder.loadTexts: wlanAPSerialNumber.setDescription(' Serial Number of the Access Point. ')
wlanAPdot11aAntennaGain = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPdot11aAntennaGain.setStatus('current')
if mibBuilder.loadTexts: wlanAPdot11aAntennaGain.setDescription(" Configured antenna gain for 'A' Radio. ")
wlanAPdot11gAntennaGain = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 4, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPdot11gAntennaGain.setStatus('current')
if mibBuilder.loadTexts: wlanAPdot11gAntennaGain.setDescription(" Configured antenna gain for 'G' Radio. ")
wlanAPNumRadios = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 4, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPNumRadios.setStatus('current')
if mibBuilder.loadTexts: wlanAPNumRadios.setDescription(' Number of Radios in the Access Point. ')
wlanAPEnet1Mode = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 4, 1, 10), ArubaEnet1Mode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPEnet1Mode.setStatus('current')
if mibBuilder.loadTexts: wlanAPEnet1Mode.setDescription(' Enet1 Mode of the Access Point. ')
wlanAPIpsecMode = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 4, 1, 11), ArubaEnableValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPIpsecMode.setStatus('current')
if mibBuilder.loadTexts: wlanAPIpsecMode.setDescription(' IPSEC Mode of the Access Point. ')
wlanAPUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 4, 1, 12), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPUpTime.setStatus('current')
if mibBuilder.loadTexts: wlanAPUpTime.setDescription(' Time (in hundredths of seconds) since the last time the Access Point bootstrapped with the controller. ')
wlanAPModelName = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 4, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPModelName.setStatus('current')
if mibBuilder.loadTexts: wlanAPModelName.setDescription(' Model name of the Access Point. ')
wlanAPLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 4, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPLocation.setStatus('current')
if mibBuilder.loadTexts: wlanAPLocation.setDescription(' Location of the Access Point. ')
wlanAPBuilding = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 4, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPBuilding.setStatus('current')
if mibBuilder.loadTexts: wlanAPBuilding.setDescription(' AP Building Number. ')
wlanAPFloor = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 4, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPFloor.setStatus('current')
if mibBuilder.loadTexts: wlanAPFloor.setDescription(' AP Floor Number. ')
wlanAPLoc = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 4, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPLoc.setStatus('current')
if mibBuilder.loadTexts: wlanAPLoc.setDescription(' AP Location. ')
wlanAPExternalAntenna = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 4, 1, 18), ArubaAntennaSetting()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPExternalAntenna.setStatus('current')
if mibBuilder.loadTexts: wlanAPExternalAntenna.setDescription(' AP Antenna Status. ')
wlanAPStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 4, 1, 19), ArubaAPStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPStatus.setStatus('current')
if mibBuilder.loadTexts: wlanAPStatus.setDescription(' AP Status. ')
wlanAPNumBootstraps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 4, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPNumBootstraps.setStatus('current')
if mibBuilder.loadTexts: wlanAPNumBootstraps.setDescription(' Number of times the AP has bootstrapped with the controller. ')
wlanAPNumReboots = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 4, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPNumReboots.setStatus('current')
if mibBuilder.loadTexts: wlanAPNumReboots.setDescription(' Number of times the AP has rebooted. ')
wlanAPUnprovisioned = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 4, 1, 22), ArubaUnprovisionedStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPUnprovisioned.setStatus('current')
if mibBuilder.loadTexts: wlanAPUnprovisioned.setDescription(' Indicates whether the AP is unprovisioned due to lack of antenna gain or location code settings. ')
wlanAPMonitorMode = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 4, 1, 23), ArubaMonitorMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPMonitorMode.setStatus('current')
if mibBuilder.loadTexts: wlanAPMonitorMode.setDescription(' Indicates whether any radio on this AP is acting as an air monitor. ')
wlanAPFQLNBuilding = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 4, 1, 24), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPFQLNBuilding.setStatus('current')
if mibBuilder.loadTexts: wlanAPFQLNBuilding.setDescription(" The building component of the AP's FQLN. ")
wlanAPFQLNFloor = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 4, 1, 25), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPFQLNFloor.setStatus('current')
if mibBuilder.loadTexts: wlanAPFQLNFloor.setDescription(" The floor component of the AP's FQLN. ")
wlanAPFQLN = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 4, 1, 26), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanAPFQLN.setStatus('current')
if mibBuilder.loadTexts: wlanAPFQLN.setDescription(" The AP's Fully Qualified Location Name (FQLN). ")
wlanAPFQLNCampus = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 4, 1, 27), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPFQLNCampus.setStatus('current')
if mibBuilder.loadTexts: wlanAPFQLNCampus.setDescription(" The campus component of the AP's FQLN. ")
wlanAPLongitude = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 4, 1, 28), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanAPLongitude.setStatus('current')
if mibBuilder.loadTexts: wlanAPLongitude.setDescription(' Longitude of the AP. Signed floating-point value. ')
wlanAPLatitude = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 4, 1, 29), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanAPLatitude.setStatus('current')
if mibBuilder.loadTexts: wlanAPLatitude.setDescription(' Latitude of the AP. Signed floating-point value. ')
wlanAPAltitude = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 4, 1, 30), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanAPAltitude.setStatus('current')
if mibBuilder.loadTexts: wlanAPAltitude.setDescription(' Altitude of the AP. Signed floating-point value. ')
wlanAPMeshRole = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 4, 1, 31), ArubaMeshRole()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanAPMeshRole.setStatus('current')
if mibBuilder.loadTexts: wlanAPMeshRole.setDescription(' AP Mesh role ')
wlanAPSysLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 4, 1, 32), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPSysLocation.setStatus('current')
if mibBuilder.loadTexts: wlanAPSysLocation.setDescription(' AP sysLocation ')
wlsxWlanRadioTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 5), )
if mibBuilder.loadTexts: wlsxWlanRadioTable.setStatus('current')
if mibBuilder.loadTexts: wlsxWlanRadioTable.setDescription(' This table lists all the radios known to the controller. ')
wlsxWlanRadioEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 5, 1), ).setIndexNames((0, "WLSX-WLAN-MIB", "wlanAPMacAddress"), (0, "WLSX-WLAN-MIB", "wlanAPRadioNumber"))
if mibBuilder.loadTexts: wlsxWlanRadioEntry.setStatus('current')
if mibBuilder.loadTexts: wlsxWlanRadioEntry.setDescription('AP Radio Entry')
wlanAPRadioNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 5, 1, 1), Integer32())
if mibBuilder.loadTexts: wlanAPRadioNumber.setStatus('current')
if mibBuilder.loadTexts: wlanAPRadioNumber.setDescription(' The radio number ')
wlanAPRadioType = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 5, 1, 2), ArubaPhyType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanAPRadioType.setStatus('current')
if mibBuilder.loadTexts: wlanAPRadioType.setDescription(' Type of the Radio ')
wlanAPRadioChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPRadioChannel.setStatus('current')
if mibBuilder.loadTexts: wlanAPRadioChannel.setDescription(' The channel the radio is currently operating on. ')
wlanAPRadioTransmitPower = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPRadioTransmitPower.setStatus('current')
if mibBuilder.loadTexts: wlanAPRadioTransmitPower.setDescription(' The current power level of the radio. ')
wlanAPRadioMode = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 5, 1, 5), ArubaAccessPointMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPRadioMode.setStatus('current')
if mibBuilder.loadTexts: wlanAPRadioMode.setDescription(' The Mode in which the radio is operating. ')
wlanAPRadioUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 5, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPRadioUtilization.setStatus('current')
if mibBuilder.loadTexts: wlanAPRadioUtilization.setDescription(' The Utilization of the radio as a percentage of the total capacity. ')
wlanAPRadioNumAssociatedClients = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 5, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPRadioNumAssociatedClients.setStatus('current')
if mibBuilder.loadTexts: wlanAPRadioNumAssociatedClients.setDescription(' The number of Clients associated to this radio. ')
wlanAPRadioNumMonitoredClients = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 5, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPRadioNumMonitoredClients.setStatus('current')
if mibBuilder.loadTexts: wlanAPRadioNumMonitoredClients.setDescription(' The number of Clients this Radio is monitoring. ')
wlanAPRadioNumActiveBSSIDs = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 5, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPRadioNumActiveBSSIDs.setStatus('current')
if mibBuilder.loadTexts: wlanAPRadioNumActiveBSSIDs.setDescription(' The number of active BSSIDs on this Radio. ')
wlanAPRadioNumMonitoredBSSIDs = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 5, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPRadioNumMonitoredBSSIDs.setStatus('current')
if mibBuilder.loadTexts: wlanAPRadioNumMonitoredBSSIDs.setDescription(' The number of AP BSSIDs this radio is monitoring. ')
wlanAPRadioBearing = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 5, 1, 11), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanAPRadioBearing.setStatus('current')
if mibBuilder.loadTexts: wlanAPRadioBearing.setDescription(' Antenna Bearing in degrees from True North. Unsigned floating-point value. Range: 0-360. ')
wlanAPRadioTiltAngle = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 5, 1, 12), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanAPRadioTiltAngle.setStatus('current')
if mibBuilder.loadTexts: wlanAPRadioTiltAngle.setDescription(' Tilt angle of antenna in degrees. -ve for downtilt, +ve for uptilt. Signed floating-point value. Range: -90 to +90. ')
wlanAPRadioHTMode = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 5, 1, 13), ArubaHTMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPRadioHTMode.setStatus('current')
if mibBuilder.loadTexts: wlanAPRadioHTMode.setDescription(' The HT mode of the radio, if any. ')
wlanAPRadioHTExtChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 5, 1, 14), ArubaHTExtChannel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPRadioHTExtChannel.setStatus('current')
if mibBuilder.loadTexts: wlanAPRadioHTExtChannel.setDescription(' Indicates the offset of the 40MHz extension channel, if any. ')
wlanAPRadioHTChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 5, 1, 15), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanAPRadioHTChannel.setStatus('current')
if mibBuilder.loadTexts: wlanAPRadioHTChannel.setDescription(" A display string indicating the current channel. If wlanAPRadioHTExtChannel is set to 'above' or 'below', then the channel number will be appended with '+' or '-' respectively. ")
wlanAPRadioAPName = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 5, 1, 16), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanAPRadioAPName.setStatus('current')
if mibBuilder.loadTexts: wlanAPRadioAPName.setDescription('Name of the AP the radio belongs to')
wlsxWlanAPBssidTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 7), )
if mibBuilder.loadTexts: wlsxWlanAPBssidTable.setStatus('current')
if mibBuilder.loadTexts: wlsxWlanAPBssidTable.setDescription(' This table lists all the BSSIDs active on this controller. ')
wlsxWlanAPBssidEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 7, 1), ).setIndexNames((0, "WLSX-WLAN-MIB", "wlanAPMacAddress"), (0, "WLSX-WLAN-MIB", "wlanAPRadioNumber"), (0, "WLSX-WLAN-MIB", "wlanAPBSSID"))
if mibBuilder.loadTexts: wlsxWlanAPBssidEntry.setStatus('current')
if mibBuilder.loadTexts: wlsxWlanAPBssidEntry.setDescription('BSSID Entry')
wlanAPBSSID = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 7, 1, 1), MacAddress())
if mibBuilder.loadTexts: wlanAPBSSID.setStatus('current')
if mibBuilder.loadTexts: wlanAPBSSID.setDescription(' The MAC address of the Access Point. ')
wlanAPESSID = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 7, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPESSID.setStatus('current')
if mibBuilder.loadTexts: wlanAPESSID.setDescription(' ESSID this BSSID is advertising. ')
wlanAPBssidSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 7, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPBssidSlot.setStatus('current')
if mibBuilder.loadTexts: wlanAPBssidSlot.setDescription(' Slot to which the Access Point is connected. ')
wlanAPBssidPort = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 7, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPBssidPort.setStatus('current')
if mibBuilder.loadTexts: wlanAPBssidPort.setDescription(' Port to which the Access Point is connected. ')
wlanAPBssidPhyType = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 7, 1, 5), ArubaPhyType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPBssidPhyType.setStatus('current')
if mibBuilder.loadTexts: wlanAPBssidPhyType.setDescription(' Physical Layer Protocol support of the AP. ')
wlanAPBssidRogueType = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 7, 1, 6), ArubaRogueApType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPBssidRogueType.setStatus('current')
if mibBuilder.loadTexts: wlanAPBssidRogueType.setDescription(' The type of the Rogue. ')
wlanAPBssidMode = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 7, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ap", 1), ("am", 2), ("mpp", 3), ("mp", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPBssidMode.setStatus('current')
if mibBuilder.loadTexts: wlanAPBssidMode.setDescription(' Indicates whether the Access point is an Air Monitor or regular AP or Mesh Portal or Mesh Point. ')
wlanAPBssidChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 7, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 165))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPBssidChannel.setStatus('current')
if mibBuilder.loadTexts: wlanAPBssidChannel.setDescription(' The current operating channel. ')
wlanAPBssidUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 7, 1, 9), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPBssidUpTime.setStatus('current')
if mibBuilder.loadTexts: wlanAPBssidUpTime.setDescription(' Time (in hundredths of seconds) since the tunnel was created between the access point and controller ')
wlanAPBssidInactiveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 7, 1, 10), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPBssidInactiveTime.setStatus('current')
if mibBuilder.loadTexts: wlanAPBssidInactiveTime.setDescription(' Time (in hundredths of seconds) since any activity took place on the BSSID. ')
wlanAPBssidLoadBalancing = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 7, 1, 11), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPBssidLoadBalancing.setStatus('current')
if mibBuilder.loadTexts: wlanAPBssidLoadBalancing.setDescription(' Indicates whether load balancing is enabled or not. ')
wlanAPBssidNumAssociatedStations = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 7, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPBssidNumAssociatedStations.setStatus('current')
if mibBuilder.loadTexts: wlanAPBssidNumAssociatedStations.setDescription(' Indicates the number of stations associated to this BSSID. ')
wlanAPBssidAPMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 7, 1, 13), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPBssidAPMacAddress.setStatus('current')
if mibBuilder.loadTexts: wlanAPBssidAPMacAddress.setDescription(' Indicates the Access Point to which this BSSID belongs. ')
wlanAPBssidPhyNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 7, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPBssidPhyNumber.setStatus('current')
if mibBuilder.loadTexts: wlanAPBssidPhyNumber.setDescription(' Indicates the radio number to which this BSSID belongs. ')
wlanAPBssidHTMode = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 7, 1, 15), ArubaHTMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPBssidHTMode.setStatus('current')
if mibBuilder.loadTexts: wlanAPBssidHTMode.setDescription(' Indicates the HT mode of this BSSID, if any. ')
wlanAPBssidHTExtChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 7, 1, 16), ArubaHTExtChannel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPBssidHTExtChannel.setStatus('current')
if mibBuilder.loadTexts: wlanAPBssidHTExtChannel.setDescription(' Indicates the offset of the 40MHz extension channel, if any. ')
wlanAPBssidHTChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 7, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPBssidHTChannel.setStatus('current')
if mibBuilder.loadTexts: wlanAPBssidHTChannel.setDescription(" A display string indicating the current channel. If wlanAPBssidHTExtChannel is set to 'above' or 'below', then the channel number will be appended with '+' or '-' respectively. ")
wlanAPBssidModule = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 7, 1, 18), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPBssidModule.setStatus('current')
if mibBuilder.loadTexts: wlanAPBssidModule.setDescription(' Module to which the Access Point is connected. ')
wlsxWlanESSIDTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 8), )
if mibBuilder.loadTexts: wlsxWlanESSIDTable.setStatus('current')
if mibBuilder.loadTexts: wlsxWlanESSIDTable.setDescription(' This Table lists all the ESSIDs advertised by this controller. ')
wlsxWlanESSIDEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 8, 1), ).setIndexNames((0, "WLSX-WLAN-MIB", "wlanESSID"))
if mibBuilder.loadTexts: wlsxWlanESSIDEntry.setStatus('current')
if mibBuilder.loadTexts: wlsxWlanESSIDEntry.setDescription('ESSID Entry')
wlanESSID = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 8, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64)))
if mibBuilder.loadTexts: wlanESSID.setStatus('current')
if mibBuilder.loadTexts: wlanESSID.setDescription(' The ESSID being advertised. ')
wlanESSIDNumStations = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 8, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanESSIDNumStations.setStatus('current')
if mibBuilder.loadTexts: wlanESSIDNumStations.setDescription(' The number of stations connected to this ESSID. ')
wlanESSIDNumAccessPointsUp = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 8, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanESSIDNumAccessPointsUp.setStatus('current')
if mibBuilder.loadTexts: wlanESSIDNumAccessPointsUp.setDescription(' The number of APs currently advertising this ESSID. ')
wlanESSIDNumAccessPointsDown = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 8, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanESSIDNumAccessPointsDown.setStatus('current')
if mibBuilder.loadTexts: wlanESSIDNumAccessPointsDown.setDescription(' The number of APs configured to advertise this ESSID that are not currently operational. ')
wlanESSIDEncryptionType = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 8, 1, 5), ArubaEncryptionMethods()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanESSIDEncryptionType.setStatus('current')
if mibBuilder.loadTexts: wlanESSIDEncryptionType.setDescription(' The encryption methods supported on this ESSID. ')
wlsxWlanESSIDVlanPoolTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 9), )
if mibBuilder.loadTexts: wlsxWlanESSIDVlanPoolTable.setStatus('current')
if mibBuilder.loadTexts: wlsxWlanESSIDVlanPoolTable.setDescription(' This Table lists all the VLANs associated with this ESSID. ')
wlsxWlanESSIDVlanPoolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 9, 1), ).setIndexNames((0, "WLSX-WLAN-MIB", "wlanESSID"), (0, "WLSX-WLAN-MIB", "wlanESSIDVlanId"))
if mibBuilder.loadTexts: wlsxWlanESSIDVlanPoolEntry.setStatus('current')
if mibBuilder.loadTexts: wlsxWlanESSIDVlanPoolEntry.setDescription('ESSID Vlan Pool Entry')
wlanESSIDVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 9, 1, 1), Unsigned32())
if mibBuilder.loadTexts: wlanESSIDVlanId.setStatus('current')
if mibBuilder.loadTexts: wlanESSIDVlanId.setDescription(' VLAN which is part of the VLAN pool for this ESSID. ')
wlanESSIDVlanPoolStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 1, 9, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wlanESSIDVlanPoolStatus.setStatus('current')
if mibBuilder.loadTexts: wlanESSIDVlanPoolStatus.setDescription(' Row status object used to indicate the status of the row. ')
wlsxWlanStationTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 2, 1), )
if mibBuilder.loadTexts: wlsxWlanStationTable.setStatus('current')
if mibBuilder.loadTexts: wlsxWlanStationTable.setDescription(' This Table lists all the wireless stations associated with the Access points connected to this controller. ')
wlsxWlanStationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 2, 1, 1), ).setIndexNames((0, "WLSX-WLAN-MIB", "wlanStaPhyAddress"))
if mibBuilder.loadTexts: wlsxWlanStationEntry.setStatus('current')
if mibBuilder.loadTexts: wlsxWlanStationEntry.setDescription('Station Entry')
wlanStaPhyAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 2, 1, 1, 1), MacAddress())
if mibBuilder.loadTexts: wlanStaPhyAddress.setStatus('current')
if mibBuilder.loadTexts: wlanStaPhyAddress.setDescription(' The Physical Address of the Station. ')
wlanStaApBssid = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 2, 1, 1, 2), MacAddress())
if mibBuilder.loadTexts: wlanStaApBssid.setStatus('current')
if mibBuilder.loadTexts: wlanStaApBssid.setDescription(' The Access point to which this station last associated to. ')
wlanStaPhyType = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 2, 1, 1, 3), ArubaPhyType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaPhyType.setStatus('current')
if mibBuilder.loadTexts: wlanStaPhyType.setDescription(' Type of the Station. ')
wlanStaIsAuthenticated = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 2, 1, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaIsAuthenticated.setStatus('current')
if mibBuilder.loadTexts: wlanStaIsAuthenticated.setDescription(' Indicates whether the station is authenticated. ')
wlanStaIsAssociated = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 2, 1, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaIsAssociated.setStatus('current')
if mibBuilder.loadTexts: wlanStaIsAssociated.setDescription(' Indicates whether the station is associated. ')
wlanStaChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 165))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaChannel.setStatus('current')
if mibBuilder.loadTexts: wlanStaChannel.setDescription(' Channel on which the station is associated. ')
wlanStaVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 2, 1, 1, 7), ArubaVlanValidRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaVlanId.setStatus('current')
if mibBuilder.loadTexts: wlanStaVlanId.setDescription(' VLAN in which the station is present. ')
wlanStaVOIPState = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 2, 1, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaVOIPState.setStatus('current')
if mibBuilder.loadTexts: wlanStaVOIPState.setDescription(' The State of VoIP for this station. ')
wlanStaVOIPProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 2, 1, 1, 9), ArubaVoipProtocolType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaVOIPProtocol.setStatus('current')
if mibBuilder.loadTexts: wlanStaVOIPProtocol.setDescription(' If VoIP is enabled, the type of the protocol supported. ')
wlanStaTransmitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 2, 1, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaTransmitRate.setStatus('current')
if mibBuilder.loadTexts: wlanStaTransmitRate.setDescription(' Transmit rate with which the Station is associated with this system. ')
wlanStaAssociationID = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 2, 1, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaAssociationID.setStatus('current')
if mibBuilder.loadTexts: wlanStaAssociationID.setDescription(' AID with which the Station is associated with this system. ')
wlanStaAccessPointESSID = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 2, 1, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaAccessPointESSID.setStatus('current')
if mibBuilder.loadTexts: wlanStaAccessPointESSID.setDescription(' ESSID of the Access point ')
wlanStaPhyNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 2, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaPhyNumber.setStatus('current')
if mibBuilder.loadTexts: wlanStaPhyNumber.setDescription(' Radio PHY number to which the station is associated ')
wlanStaRSSI = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 2, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaRSSI.setStatus('current')
if mibBuilder.loadTexts: wlanStaRSSI.setDescription(' Signal to Noise ratio for the station. ')
wlanStaUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 2, 1, 1, 15), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaUpTime.setStatus('current')
if mibBuilder.loadTexts: wlanStaUpTime.setDescription(' Time since the station associated to the current BSSID. ')
wlanStaHTMode = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 2, 1, 1, 16), ArubaHTMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaHTMode.setStatus('current')
if mibBuilder.loadTexts: wlanStaHTMode.setDescription(' The HT status of the station. ')
wlsxWlanStaAssociationFailureTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 2, 2), )
if mibBuilder.loadTexts: wlsxWlanStaAssociationFailureTable.setStatus('current')
if mibBuilder.loadTexts: wlsxWlanStaAssociationFailureTable.setDescription(" This Table lists all the stations and the BSSID's to which they failed to associate. Once a station successfully associates, association failure entries are not reported for that station. ")
wlsxWlanStaAssociationFailureEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 2, 2, 1), ).setIndexNames((0, "WLSX-WLAN-MIB", "wlanStaPhyAddress"), (0, "WLSX-WLAN-MIB", "wlanAPBSSID"))
if mibBuilder.loadTexts: wlsxWlanStaAssociationFailureEntry.setStatus('current')
if mibBuilder.loadTexts: wlsxWlanStaAssociationFailureEntry.setDescription('Station Association Failure Entry')
wlanStaAssocFailureApName = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 2, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaAssocFailureApName.setStatus('current')
if mibBuilder.loadTexts: wlanStaAssocFailureApName.setDescription(' Name of the Access Point to which this station tried to associate. ')
wlanStaAssocFailureApEssid = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 2, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaAssocFailureApEssid.setStatus('current')
if mibBuilder.loadTexts: wlanStaAssocFailureApEssid.setDescription(' ESSID to which the station association failed. ')
wlanStaAssocFailurePhyNum = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 2, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaAssocFailurePhyNum.setStatus('current')
if mibBuilder.loadTexts: wlanStaAssocFailurePhyNum.setDescription(' Radio PHY number to which the station tried to associate. ')
wlanStaAssocFailurePhyType = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 2, 2, 1, 4), ArubaPhyType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaAssocFailurePhyType.setStatus('current')
if mibBuilder.loadTexts: wlanStaAssocFailurePhyType.setDescription(' Radio PHY Type of the Station. ')
wlanStaAssocFailureElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 2, 2, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaAssocFailureElapsedTime.setStatus('current')
if mibBuilder.loadTexts: wlanStaAssocFailureElapsedTime.setDescription(" Elapsed time in timeticks after the station's failure to associate. ")
wlanStaAssocFailureReason = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 2, 2, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaAssocFailureReason.setStatus('current')
if mibBuilder.loadTexts: wlanStaAssocFailureReason.setDescription(' Reason for the Station association failure ')
wlsxWlanAPStatsTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 1), )
if mibBuilder.loadTexts: wlsxWlanAPStatsTable.setStatus('current')
if mibBuilder.loadTexts: wlsxWlanAPStatsTable.setDescription(' This Table lists the statistics of all the Access Points connected to the controller. ')
wlsxWlanAPStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 1, 1), ).setIndexNames((0, "WLSX-WLAN-MIB", "wlanAPMacAddress"), (0, "WLSX-WLAN-MIB", "wlanAPRadioNumber"), (0, "WLSX-WLAN-MIB", "wlanAPBSSID"))
if mibBuilder.loadTexts: wlsxWlanAPStatsEntry.setStatus('current')
if mibBuilder.loadTexts: wlsxWlanAPStatsEntry.setDescription('Access Point Stats entry')
wlanAPCurrentChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPCurrentChannel.setStatus('current')
if mibBuilder.loadTexts: wlanAPCurrentChannel.setDescription(' The channel the AP is currently using. ')
wlanAPNumClients = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPNumClients.setStatus('current')
if mibBuilder.loadTexts: wlanAPNumClients.setDescription(' The number of clients associated to this BSSID. ')
wlanAPTxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPTxPkts.setStatus('current')
if mibBuilder.loadTexts: wlanAPTxPkts.setDescription(' The number of packets transmitted on this BSSID. ')
wlanAPTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPTxBytes.setStatus('current')
if mibBuilder.loadTexts: wlanAPTxBytes.setDescription(' The number of bytes transmitted on this BSSID. ')
wlanAPRxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPRxPkts.setStatus('current')
if mibBuilder.loadTexts: wlanAPRxPkts.setDescription(' The number of packets received on this BSSID. ')
wlanAPRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPRxBytes.setStatus('current')
if mibBuilder.loadTexts: wlanAPRxBytes.setDescription(' The number of bytes received on this BSSID. ')
wlanAPTxDeauthentications = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPTxDeauthentications.setStatus('current')
if mibBuilder.loadTexts: wlanAPTxDeauthentications.setDescription(' The number of deauthentications transmitted on this BSSID. ')
wlanAPRxDeauthentications = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPRxDeauthentications.setStatus('current')
if mibBuilder.loadTexts: wlanAPRxDeauthentications.setDescription(' The number of deauthentications received on this BSSID. ')
wlanAPChannelThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPChannelThroughput.setStatus('current')
if mibBuilder.loadTexts: wlanAPChannelThroughput.setDescription(' The throughput achieved on this channel. ')
wlanAPFrameRetryRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPFrameRetryRate.setStatus('current')
if mibBuilder.loadTexts: wlanAPFrameRetryRate.setDescription(' The number of retry packets as a percentage of the total packets transmitted and received by this BSSID. ')
wlanAPFrameLowSpeedRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPFrameLowSpeedRate.setStatus('current')
if mibBuilder.loadTexts: wlanAPFrameLowSpeedRate.setDescription(' The number of low data rate (<= 18Mbps for A/G bands and <=2Mbps for B band) packets as a percentage of the total packets transmitted and received by this BSSID ')
wlanAPFrameNonUnicastRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPFrameNonUnicastRate.setStatus('current')
if mibBuilder.loadTexts: wlanAPFrameNonUnicastRate.setDescription(' The number of broadcast and multicast packets as a percentage of the total packets transmitted on this BSSIDchannel. ')
wlanAPFrameFragmentationRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPFrameFragmentationRate.setStatus('current')
if mibBuilder.loadTexts: wlanAPFrameFragmentationRate.setDescription(' The number of fragments as a percentage of the total packets transmitted by this BSSID. ')
wlanAPFrameBandwidthRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPFrameBandwidthRate.setStatus('current')
if mibBuilder.loadTexts: wlanAPFrameBandwidthRate.setDescription(' The bandwidth of this BSSID in Kbps. ')
wlanAPFrameRetryErrorRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPFrameRetryErrorRate.setStatus('current')
if mibBuilder.loadTexts: wlanAPFrameRetryErrorRate.setDescription(' The number of error packets as a percentage of the total packets received on this BSSID. ')
wlanAPChannelErrorRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPChannelErrorRate.setStatus('current')
if mibBuilder.loadTexts: wlanAPChannelErrorRate.setDescription(' The number of error packets as a percentage of the total packets received on the current channel. ')
wlanAPFrameReceiveErrorRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPFrameReceiveErrorRate.setStatus('current')
if mibBuilder.loadTexts: wlanAPFrameReceiveErrorRate.setDescription(' The number of error packets as a percentage of the total packets received on this BSSID. ')
wlanAPRxDataPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPRxDataPkts.setStatus('deprecated')
if mibBuilder.loadTexts: wlanAPRxDataPkts.setDescription(' The number of packets received on this BSSID. ')
wlanAPRxDataBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPRxDataBytes.setStatus('deprecated')
if mibBuilder.loadTexts: wlanAPRxDataBytes.setDescription(' The number of bytes received on this BSSID. ')
wlanAPTxDataPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPTxDataPkts.setStatus('deprecated')
if mibBuilder.loadTexts: wlanAPTxDataPkts.setDescription(' The number of packets transmitted on this BSSID. ')
wlanAPTxDataBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPTxDataBytes.setStatus('deprecated')
if mibBuilder.loadTexts: wlanAPTxDataBytes.setDescription(' The number of bytes transmitted on this BSSID. ')
wlanAPRxDataPkts64 = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 1, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPRxDataPkts64.setStatus('current')
if mibBuilder.loadTexts: wlanAPRxDataPkts64.setDescription(' The number of packets received on this BSSID. ')
wlanAPRxDataBytes64 = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 1, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPRxDataBytes64.setStatus('current')
if mibBuilder.loadTexts: wlanAPRxDataBytes64.setDescription(' The number of bytes received on this BSSID. ')
wlanAPTxDataPkts64 = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 1, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPTxDataPkts64.setStatus('current')
if mibBuilder.loadTexts: wlanAPTxDataPkts64.setDescription(' The number of packets transmitted on this BSSID. ')
wlanAPTxDataBytes64 = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 1, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPTxDataBytes64.setStatus('current')
if mibBuilder.loadTexts: wlanAPTxDataBytes64.setDescription(' The number of bytes transmitted on this BSSID. ')
wlsxWlanAPRateStatsTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 2), )
if mibBuilder.loadTexts: wlsxWlanAPRateStatsTable.setStatus('current')
if mibBuilder.loadTexts: wlsxWlanAPRateStatsTable.setDescription(' This table contains all the AP Packet and Byte Counts but represented in terms of rate categories. ')
wlsxWlanAPRateStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 2, 1), ).setIndexNames((0, "WLSX-WLAN-MIB", "wlanAPMacAddress"), (0, "WLSX-WLAN-MIB", "wlanAPRadioNumber"), (0, "WLSX-WLAN-MIB", "wlanAPBSSID"))
if mibBuilder.loadTexts: wlsxWlanAPRateStatsEntry.setStatus('current')
if mibBuilder.loadTexts: wlsxWlanAPRateStatsEntry.setDescription('Data rate based packet and byte count entry for an AP')
wlanAPStatsTotPktsAt1Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPStatsTotPktsAt1Mbps.setStatus('current')
if mibBuilder.loadTexts: wlanAPStatsTotPktsAt1Mbps.setDescription(' This attribute indicates the total number of packets observed on this BSSID at 1Mbps rate. ')
wlanAPStatsTotBytesAt1Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPStatsTotBytesAt1Mbps.setStatus('current')
if mibBuilder.loadTexts: wlanAPStatsTotBytesAt1Mbps.setDescription(' This attribute indicates the total number of Bytes observed on this BSSID at 1Mbps rate. ')
wlanAPStatsTotPktsAt2Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPStatsTotPktsAt2Mbps.setStatus('current')
if mibBuilder.loadTexts: wlanAPStatsTotPktsAt2Mbps.setDescription(' This attribute indicates the total number of packets observed on this BSSID at 2Mbps rate. ')
wlanAPStatsTotBytesAt2Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPStatsTotBytesAt2Mbps.setStatus('current')
if mibBuilder.loadTexts: wlanAPStatsTotBytesAt2Mbps.setDescription(' This attribute indicates the total number of Bytes observed on this BSSID at 2Mbps rate. ')
wlanAPStatsTotPktsAt5Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPStatsTotPktsAt5Mbps.setStatus('current')
if mibBuilder.loadTexts: wlanAPStatsTotPktsAt5Mbps.setDescription(' This attribute indicates the total number of packets observed on this BSSID at 5Mbps rate. ')
wlanAPStatsTotBytesAt5Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPStatsTotBytesAt5Mbps.setStatus('current')
if mibBuilder.loadTexts: wlanAPStatsTotBytesAt5Mbps.setDescription(' This attribute indicates the total number of Bytes observed on this BSSID at 5Mbps rate. ')
wlanAPStatsTotPktsAt11Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPStatsTotPktsAt11Mbps.setStatus('current')
if mibBuilder.loadTexts: wlanAPStatsTotPktsAt11Mbps.setDescription(' This attribute indicates the total number of packets observed on this BSSID at 11Mbps rate. ')
wlanAPStatsTotBytesAt11Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPStatsTotBytesAt11Mbps.setStatus('current')
if mibBuilder.loadTexts: wlanAPStatsTotBytesAt11Mbps.setDescription(' This attribute indicates the total number of Bytes observed on this BSSID at 11Mbps rate. ')
wlanAPStatsTotPktsAt6Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPStatsTotPktsAt6Mbps.setStatus('current')
if mibBuilder.loadTexts: wlanAPStatsTotPktsAt6Mbps.setDescription(' This attribute indicates the total number of packets observed on this BSSID at 6Mbps rate. ')
wlanAPStatsTotBytesAt6Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPStatsTotBytesAt6Mbps.setStatus('current')
if mibBuilder.loadTexts: wlanAPStatsTotBytesAt6Mbps.setDescription(' This attribute indicates the total number of Bytes observed on this BSSID at 6Mbps rate. ')
wlanAPStatsTotPktsAt12Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPStatsTotPktsAt12Mbps.setStatus('current')
if mibBuilder.loadTexts: wlanAPStatsTotPktsAt12Mbps.setDescription(' This attribute indicates the total number of packets observed on this BSSID at 12Mbps rate. ')
wlanAPStatsTotBytesAt12Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPStatsTotBytesAt12Mbps.setStatus('current')
if mibBuilder.loadTexts: wlanAPStatsTotBytesAt12Mbps.setDescription(' This attribute indicates the total number of Bytes observed on this BSSID at 12Mbps rate. ')
wlanAPStatsTotPktsAt18Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPStatsTotPktsAt18Mbps.setStatus('current')
if mibBuilder.loadTexts: wlanAPStatsTotPktsAt18Mbps.setDescription(' This attribute indicates the total number of packets observed on this BSSID at 18Mbps rate. ')
wlanAPStatsTotBytesAt18Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPStatsTotBytesAt18Mbps.setStatus('current')
if mibBuilder.loadTexts: wlanAPStatsTotBytesAt18Mbps.setDescription(' This attribute indicates the total number of Bytes observed on this BSSID at 18Mbps rate. ')
wlanAPStatsTotPktsAt24Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPStatsTotPktsAt24Mbps.setStatus('current')
if mibBuilder.loadTexts: wlanAPStatsTotPktsAt24Mbps.setDescription(' This attribute indicates the total number of packets observed on this BSSID at 24Mbps rate. ')
wlanAPStatsTotBytesAt24Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPStatsTotBytesAt24Mbps.setStatus('current')
if mibBuilder.loadTexts: wlanAPStatsTotBytesAt24Mbps.setDescription(' This attribute indicates the total number of Bytes observed on this BSSID at 24Mbps rate. ')
wlanAPStatsTotPktsAt36Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPStatsTotPktsAt36Mbps.setStatus('current')
if mibBuilder.loadTexts: wlanAPStatsTotPktsAt36Mbps.setDescription(' This attribute indicates the total number of packets observed on this BSSID at 36Mbps rate. ')
wlanAPStatsTotBytesAt36Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPStatsTotBytesAt36Mbps.setStatus('current')
if mibBuilder.loadTexts: wlanAPStatsTotBytesAt36Mbps.setDescription(' This attribute indicates the total number of Bytes observed on this BSSID at 36Mbps rate. ')
wlanAPStatsTotPktsAt48Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPStatsTotPktsAt48Mbps.setStatus('current')
if mibBuilder.loadTexts: wlanAPStatsTotPktsAt48Mbps.setDescription(' This attribute indicates the total number of packets observed on this BSSID at 48Mbps rate. ')
wlanAPStatsTotBytesAt48Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPStatsTotBytesAt48Mbps.setStatus('current')
if mibBuilder.loadTexts: wlanAPStatsTotBytesAt48Mbps.setDescription(' This attribute indicates the total number of Bytes observed on this BSSID at 48Mbps rate. ')
wlanAPStatsTotPktsAt54Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPStatsTotPktsAt54Mbps.setStatus('current')
if mibBuilder.loadTexts: wlanAPStatsTotPktsAt54Mbps.setDescription(' This attribute indicates the total number of packets observed on this BSSID at 54Mbps rate. ')
wlanAPStatsTotBytesAt54Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPStatsTotBytesAt54Mbps.setStatus('current')
if mibBuilder.loadTexts: wlanAPStatsTotBytesAt54Mbps.setDescription(' This attribute indicates the total number of Bytes observed on this BSSID at 54Mbps rate. ')
wlanAPStatsTotPktsAt9Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 2, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPStatsTotPktsAt9Mbps.setStatus('current')
if mibBuilder.loadTexts: wlanAPStatsTotPktsAt9Mbps.setDescription(' This attribute indicates the total number of packets observed on this BSSID at 9Mbps rate. ')
wlanAPStatsTotBytesAt9Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 2, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPStatsTotBytesAt9Mbps.setStatus('current')
if mibBuilder.loadTexts: wlanAPStatsTotBytesAt9Mbps.setDescription(' This attribute indicates the total number of Bytes observed on this BSSID at 9Mbps rate. ')
wlsxWlanAPDATypeStatsTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 3), )
if mibBuilder.loadTexts: wlsxWlanAPDATypeStatsTable.setStatus('current')
if mibBuilder.loadTexts: wlsxWlanAPDATypeStatsTable.setDescription(' This table contains all the per BSSID Packet and Byte Counts but broken down in terms of Destination Address Type. ')
wlsxWlanAPDATypeStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 3, 1), ).setIndexNames((0, "WLSX-WLAN-MIB", "wlanAPMacAddress"), (0, "WLSX-WLAN-MIB", "wlanAPRadioNumber"), (0, "WLSX-WLAN-MIB", "wlanAPBSSID"))
if mibBuilder.loadTexts: wlsxWlanAPDATypeStatsEntry.setStatus('current')
if mibBuilder.loadTexts: wlsxWlanAPDATypeStatsEntry.setDescription('Destination Address based packet and byte count entry for an AP')
wlanAPStatsTotDABroadcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPStatsTotDABroadcastPkts.setStatus('current')
if mibBuilder.loadTexts: wlanAPStatsTotDABroadcastPkts.setDescription(' This attribute indicates the total number of Broadcast packets observed on this BSSID. ')
wlanAPStatsTotDABroadcastBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPStatsTotDABroadcastBytes.setStatus('current')
if mibBuilder.loadTexts: wlanAPStatsTotDABroadcastBytes.setDescription(' This attribute indicates the total number of Broadcast Bytes observed on this BSSID. ')
wlanAPStatsTotDAMulticastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPStatsTotDAMulticastPkts.setStatus('current')
if mibBuilder.loadTexts: wlanAPStatsTotDAMulticastPkts.setDescription(' This attribute indicates the total number of Multicast packets observed on this BSSID. ')
wlanAPStatsTotDAMulticastBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPStatsTotDAMulticastBytes.setStatus('current')
if mibBuilder.loadTexts: wlanAPStatsTotDAMulticastBytes.setDescription(' This attribute indicates the total number of Multicast Bytes observed on this BSSID. ')
wlanAPStatsTotDAUnicastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPStatsTotDAUnicastPkts.setStatus('current')
if mibBuilder.loadTexts: wlanAPStatsTotDAUnicastPkts.setDescription(' This attribute indicates the total number of Unicast packets observed on this BSSID. ')
wlanAPStatsTotDAUnicastBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPStatsTotDAUnicastBytes.setStatus('current')
if mibBuilder.loadTexts: wlanAPStatsTotDAUnicastBytes.setDescription(' This attribute indicates the total number of Unicast Bytes observed on this BSSID. ')
wlsxWlanAPFrameTypeStatsTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 4), )
if mibBuilder.loadTexts: wlsxWlanAPFrameTypeStatsTable.setStatus('current')
if mibBuilder.loadTexts: wlsxWlanAPFrameTypeStatsTable.setDescription(' This table contains all the per BSSID Packet and Byte Counts but broken down into different Frame Types. ')
wlsxWlanAPFrameTypeStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 4, 1), ).setIndexNames((0, "WLSX-WLAN-MIB", "wlanAPMacAddress"), (0, "WLSX-WLAN-MIB", "wlanAPRadioNumber"), (0, "WLSX-WLAN-MIB", "wlanAPBSSID"))
if mibBuilder.loadTexts: wlsxWlanAPFrameTypeStatsEntry.setStatus('current')
if mibBuilder.loadTexts: wlsxWlanAPFrameTypeStatsEntry.setDescription('Frame Type based packet and byte count entry for an AP')
wlanAPStatsTotMgmtPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 4, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPStatsTotMgmtPkts.setStatus('current')
if mibBuilder.loadTexts: wlanAPStatsTotMgmtPkts.setDescription(' This attribute indicates the total number of Management packets observed on this BSSID. ')
wlanAPStatsTotMgmtBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPStatsTotMgmtBytes.setStatus('current')
if mibBuilder.loadTexts: wlanAPStatsTotMgmtBytes.setDescription(' This attribute indicates the total number of Management Bytes observed on this BSSID. ')
wlanAPStatsTotCtrlPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPStatsTotCtrlPkts.setStatus('current')
if mibBuilder.loadTexts: wlanAPStatsTotCtrlPkts.setDescription(' This attribute indicates the total number of Control packets observed on this BSSID. ')
wlanAPStatsTotCtrlBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPStatsTotCtrlBytes.setStatus('current')
if mibBuilder.loadTexts: wlanAPStatsTotCtrlBytes.setDescription(' This attribute indicates the total number of Control Bytes observed on this BSSID. ')
wlanAPStatsTotDataPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPStatsTotDataPkts.setStatus('current')
if mibBuilder.loadTexts: wlanAPStatsTotDataPkts.setDescription(' This attribute indicates the total number of Data packets observed on this BSSID. ')
wlanAPStatsTotDataBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPStatsTotDataBytes.setStatus('current')
if mibBuilder.loadTexts: wlanAPStatsTotDataBytes.setDescription(' This attribute indicates the total number of Data Bytes observed on this BSSID. ')
wlsxWlanAPPktSizeStatsTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 5), )
if mibBuilder.loadTexts: wlsxWlanAPPktSizeStatsTable.setStatus('current')
if mibBuilder.loadTexts: wlsxWlanAPPktSizeStatsTable.setDescription(' This table contains all the per BSSID Packet Count but broken down into different Packet Sizes. ')
wlsxWlanAPPktSizeStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 5, 1), ).setIndexNames((0, "WLSX-WLAN-MIB", "wlanAPMacAddress"), (0, "WLSX-WLAN-MIB", "wlanAPRadioNumber"), (0, "WLSX-WLAN-MIB", "wlanAPBSSID"))
if mibBuilder.loadTexts: wlsxWlanAPPktSizeStatsEntry.setStatus('current')
if mibBuilder.loadTexts: wlsxWlanAPPktSizeStatsEntry.setDescription('Packet Size based packet count entry for a BSSID')
wlanAPStatsPkts63Bytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 5, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPStatsPkts63Bytes.setStatus('current')
if mibBuilder.loadTexts: wlanAPStatsPkts63Bytes.setDescription(' This attribute indicates the total number of packets that were less than 64 bytes long. ')
wlanAPStatsPkts64To127 = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 5, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPStatsPkts64To127.setStatus('current')
if mibBuilder.loadTexts: wlanAPStatsPkts64To127.setDescription(' This attribute indicates the total number of packets that were between 64 and 127 bytes long. ')
wlanAPStatsPkts128To255 = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPStatsPkts128To255.setStatus('current')
if mibBuilder.loadTexts: wlanAPStatsPkts128To255.setDescription(' This attribute indicates the total number of packets that were between 128 and 255 bytes long. ')
wlanAPStatsPkts256To511 = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPStatsPkts256To511.setStatus('current')
if mibBuilder.loadTexts: wlanAPStatsPkts256To511.setDescription(' This attribute indicates the total number of packets that were between 256 and 511 bytes long. ')
wlanAPStatsPkts512To1023 = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 5, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPStatsPkts512To1023.setStatus('current')
if mibBuilder.loadTexts: wlanAPStatsPkts512To1023.setDescription(' This attribute indicates the total number of packets that were between 512 and 1023 bytes long. ')
wlanAPStatsPkts1024To1518 = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 5, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPStatsPkts1024To1518.setStatus('current')
if mibBuilder.loadTexts: wlanAPStatsPkts1024To1518.setDescription(' This attribute indicates the total number of packets that were between 1024 and 1518 bytes long. ')
wlsxWlanAPChStatsTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 6), )
if mibBuilder.loadTexts: wlsxWlanAPChStatsTable.setStatus('current')
if mibBuilder.loadTexts: wlsxWlanAPChStatsTable.setDescription(' This Table lists the Channel statistics of all the Access Points connected to the controller. ')
wlsxWlanAPChStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 6, 1), ).setIndexNames((0, "WLSX-WLAN-MIB", "wlanAPMacAddress"), (0, "WLSX-WLAN-MIB", "wlanAPRadioNumber"))
if mibBuilder.loadTexts: wlsxWlanAPChStatsEntry.setStatus('current')
if mibBuilder.loadTexts: wlsxWlanAPChStatsEntry.setDescription('Access Point Channel Stats entry')
wlanAPChannelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 165))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPChannelNumber.setStatus('current')
if mibBuilder.loadTexts: wlanAPChannelNumber.setDescription(' The channel the AP is currently using. ')
wlanAPChNumStations = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPChNumStations.setStatus('current')
if mibBuilder.loadTexts: wlanAPChNumStations.setDescription(' This attribute indicates the number of stations using this channel. ')
wlanAPChTotPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 6, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPChTotPkts.setStatus('current')
if mibBuilder.loadTexts: wlanAPChTotPkts.setDescription(' This attribute indicates the total packets observed on this channel. ')
wlanAPChTotBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPChTotBytes.setStatus('current')
if mibBuilder.loadTexts: wlanAPChTotBytes.setDescription(' This attribute indicates the total Bytes observed on this channel. ')
wlanAPChTotRetryPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 6, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPChTotRetryPkts.setStatus('current')
if mibBuilder.loadTexts: wlanAPChTotRetryPkts.setDescription(' This attribute indicates the total Retry Packets observed on this channel. ')
wlanAPChTotFragmentedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 6, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPChTotFragmentedPkts.setStatus('current')
if mibBuilder.loadTexts: wlanAPChTotFragmentedPkts.setDescription(' This attribute indicates the total Fragmented Packets observed on this channel. ')
wlanAPChTotPhyErrPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 6, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPChTotPhyErrPkts.setStatus('current')
if mibBuilder.loadTexts: wlanAPChTotPhyErrPkts.setDescription(' This attribute indicates the total Physical Error Packets observed on this channel. ')
wlanAPChTotMacErrPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 6, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPChTotMacErrPkts.setStatus('current')
if mibBuilder.loadTexts: wlanAPChTotMacErrPkts.setDescription(' This attribute indicates the total Mac errors packets observed on this channel. ')
wlanAPChNoise = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 6, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPChNoise.setStatus('current')
if mibBuilder.loadTexts: wlanAPChNoise.setDescription(' This attribute indicates the noise observed on this channel. ')
wlanAPChCoverageIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 6, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPChCoverageIndex.setStatus('current')
if mibBuilder.loadTexts: wlanAPChCoverageIndex.setDescription(' This attribute indicates the coverage provided by the AP on this channel. ')
wlanAPChInterferenceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 6, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPChInterferenceIndex.setStatus('current')
if mibBuilder.loadTexts: wlanAPChInterferenceIndex.setDescription(' This attribute indicates the interference observed on this channel. ')
wlanAPChFrameRetryRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 6, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPChFrameRetryRate.setStatus('current')
if mibBuilder.loadTexts: wlanAPChFrameRetryRate.setDescription(' The number of retry packets as a percentage of the total packets transmitted and received on this channel. ')
wlanAPChFrameLowSpeedRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 6, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPChFrameLowSpeedRate.setStatus('current')
if mibBuilder.loadTexts: wlanAPChFrameLowSpeedRate.setDescription(' The number of low data rate (<= 18Mbps for A/G bands and <=2Mbps for B band) packets as a percentage of the total packets transmitted and received on this channel ')
wlanAPChFrameNonUnicastRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 6, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPChFrameNonUnicastRate.setStatus('current')
if mibBuilder.loadTexts: wlanAPChFrameNonUnicastRate.setDescription(' The number of broadcast and multicast packets as a percentage of the total packets transmitted on this channel. ')
wlanAPChFrameFragmentationRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 6, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPChFrameFragmentationRate.setStatus('current')
if mibBuilder.loadTexts: wlanAPChFrameFragmentationRate.setDescription(' The number of fragments as a percentage of the total packets transmitted on this channel ')
wlanAPChFrameBandwidthRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 6, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPChFrameBandwidthRate.setStatus('current')
if mibBuilder.loadTexts: wlanAPChFrameBandwidthRate.setDescription(' The bandwidth of this channel in Kbps. ')
wlanAPChFrameRetryErrorRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 6, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPChFrameRetryErrorRate.setStatus('deprecated')
if mibBuilder.loadTexts: wlanAPChFrameRetryErrorRate.setDescription(' The number of error packets as a percentage of the total packets received on this channel. ')
wlanAPChBusyRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 6, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPChBusyRate.setStatus('current')
if mibBuilder.loadTexts: wlanAPChBusyRate.setDescription(' This attribute indicates the busy this channel is. ')
wlanAPChNumAPs = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 6, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPChNumAPs.setStatus('current')
if mibBuilder.loadTexts: wlanAPChNumAPs.setDescription(' This attribute indicates the number of Access Points observed on this channel. ')
wlanAPChFrameReceiveErrorRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 6, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPChFrameReceiveErrorRate.setStatus('current')
if mibBuilder.loadTexts: wlanAPChFrameReceiveErrorRate.setDescription(' The number of error packets as a percentage of the total packets received on this channel. ')
wlanAPChTransmittedFragmentCount = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 6, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPChTransmittedFragmentCount.setStatus('current')
if mibBuilder.loadTexts: wlanAPChTransmittedFragmentCount.setDescription(' This counter shall be incremented for an acknowledged MPDU with an individual address in the address 1 field or an MPDU with a multicast address in the address 1 field of type Data or Management. ')
wlanAPChMulticastTransmittedFrameCount = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 6, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPChMulticastTransmittedFrameCount.setStatus('current')
if mibBuilder.loadTexts: wlanAPChMulticastTransmittedFrameCount.setDescription(' This counter shall increment only when the multicast bit is set in the destination MAC address of a successfully transmitted MSDU. When operating as a STA in an ESS, where these frames are directed to the AP, this implies having received an acknowledgment to all associated MPDUs. ')
wlanAPChFailedCount = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 6, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPChFailedCount.setStatus('current')
if mibBuilder.loadTexts: wlanAPChFailedCount.setDescription(' This counter shall increment when an MSDU is not transmitted successfully due to the number of transmit attempts exceeding either the dot11ShortRetryLimit or dot11LongRetryLimit. ')
wlanAPChRetryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 6, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPChRetryCount.setStatus('current')
if mibBuilder.loadTexts: wlanAPChRetryCount.setDescription(' This counter shall increment when an MSDU is successfully transmitted after one or more retransmissions. ')
wlanAPChMultipleRetryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 6, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPChMultipleRetryCount.setStatus('current')
if mibBuilder.loadTexts: wlanAPChMultipleRetryCount.setDescription(' This counter shall increment when an MSDU is successfully transmitted after more than one retransmission. ')
wlanAPChFrameDuplicateCount = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 6, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPChFrameDuplicateCount.setStatus('current')
if mibBuilder.loadTexts: wlanAPChFrameDuplicateCount.setDescription(' This counter shall increment when a frame is received that the Sequence Control field indicates is a duplicate. ')
wlanAPChRTSSuccessCount = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 6, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPChRTSSuccessCount.setStatus('current')
if mibBuilder.loadTexts: wlanAPChRTSSuccessCount.setDescription(' This counter shall increment when a CTS is received in response to an RTS. ')
wlanAPChRTSFailureCount = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 6, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPChRTSFailureCount.setStatus('current')
if mibBuilder.loadTexts: wlanAPChRTSFailureCount.setDescription(' This counter shall increment when a CTS is not received in response to an RTS. ')
wlanAPChACKFailureCount = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 6, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPChACKFailureCount.setStatus('current')
if mibBuilder.loadTexts: wlanAPChACKFailureCount.setDescription(' This counter shall increment when an ACK is not received when expected. ')
wlanAPChReceivedFragmentCount = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 6, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPChReceivedFragmentCount.setStatus('current')
if mibBuilder.loadTexts: wlanAPChReceivedFragmentCount.setDescription(' This counter shall be incremented for each successfully received MPDU of type Data or Management. ')
wlanAPChMulticastReceivedFrameCount = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 6, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPChMulticastReceivedFrameCount.setStatus('current')
if mibBuilder.loadTexts: wlanAPChMulticastReceivedFrameCount.setDescription(' This counter shall increment when a MSDU is received with the multicast bit set in the destination MAC address. ')
wlanAPChFCSErrorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 6, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPChFCSErrorCount.setStatus('current')
if mibBuilder.loadTexts: wlanAPChFCSErrorCount.setDescription(' This counter shall increment when an FCS error is detected in a received MPDU. ')
wlanAPChTransmittedFrameCount = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 6, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPChTransmittedFrameCount.setStatus('current')
if mibBuilder.loadTexts: wlanAPChTransmittedFrameCount.setDescription(' This counter shall increment for each successfully transmitted MSDU. ')
wlanAPChWEPUndecryptableCount = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 6, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPChWEPUndecryptableCount.setStatus('current')
if mibBuilder.loadTexts: wlanAPChWEPUndecryptableCount.setDescription(" This counter shall increment when a frame is received with the Protected Frame subfield of the Frame Control field set to one and the WEPOn value for the key mapped to the transmitter's MAC address indicates that the frame should not have been encrypted or that frame is discarded due to the receiving STA not implementing the privacy option. ")
wlanAPChRxUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 6, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPChRxUtilization.setStatus('current')
if mibBuilder.loadTexts: wlanAPChRxUtilization.setDescription(' This is the percentage of time spent by the radio in receiving packets. ')
wlanAPChTxUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 6, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPChTxUtilization.setStatus('current')
if mibBuilder.loadTexts: wlanAPChTxUtilization.setDescription(' This is the percentage of time spent by the radio in transmitting packets. ')
wlanAPChUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 1, 6, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAPChUtilization.setStatus('current')
if mibBuilder.loadTexts: wlanAPChUtilization.setDescription(' This is the percentage of time the channel is busy. ')
wlsxWlanStationStatsTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 1), )
if mibBuilder.loadTexts: wlsxWlanStationStatsTable.setStatus('current')
if mibBuilder.loadTexts: wlsxWlanStationStatsTable.setDescription(' This Table lists statistics of all the wireless stations associated with an AP connected to this controller. ')
wlsxWlanStationStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 1, 1), ).setIndexNames((0, "WLSX-WLAN-MIB", "wlanStaPhyAddress"))
if mibBuilder.loadTexts: wlsxWlanStationStatsEntry.setStatus('current')
if mibBuilder.loadTexts: wlsxWlanStationStatsEntry.setDescription('Station Stats Entry')
wlanStaChannelNum = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaChannelNum.setStatus('current')
if mibBuilder.loadTexts: wlanStaChannelNum.setDescription(' The channel the station is currently using. ')
wlanStaTxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaTxPkts.setStatus('current')
if mibBuilder.loadTexts: wlanStaTxPkts.setDescription(' The number of packets transmitted by this station. ')
wlanStaTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaTxBytes.setStatus('current')
if mibBuilder.loadTexts: wlanStaTxBytes.setDescription(' The number of bytes transmitted by this station. ')
wlanStaRxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaRxPkts.setStatus('current')
if mibBuilder.loadTexts: wlanStaRxPkts.setDescription(' The number of packets received by this station. ')
wlanStaRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaRxBytes.setStatus('current')
if mibBuilder.loadTexts: wlanStaRxBytes.setDescription(' The number of bytes received by this station. ')
wlanStaTxBCastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaTxBCastPkts.setStatus('current')
if mibBuilder.loadTexts: wlanStaTxBCastPkts.setDescription(' The number of broadcast packets transmitted by this station. ')
wlanStaRxBCastBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaRxBCastBytes.setStatus('deprecated')
if mibBuilder.loadTexts: wlanStaRxBCastBytes.setDescription(' The number of broadcast bytes transmitted by this station. ')
wlanStaTxMCastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaTxMCastPkts.setStatus('current')
if mibBuilder.loadTexts: wlanStaTxMCastPkts.setDescription(' The number of multicast packets transmitted by this station. ')
wlanStaRxMCastBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaRxMCastBytes.setStatus('deprecated')
if mibBuilder.loadTexts: wlanStaRxMCastBytes.setDescription(' The number of multicast bytes transmitted by this station. ')
wlanStaDataPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaDataPkts.setStatus('current')
if mibBuilder.loadTexts: wlanStaDataPkts.setDescription(' The total number of Data packets transmitted by this station. ')
wlanStaCtrlPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaCtrlPkts.setStatus('current')
if mibBuilder.loadTexts: wlanStaCtrlPkts.setDescription(' The total number of Control packets transmitted by this station. ')
wlanStaNumAssocRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaNumAssocRequests.setStatus('current')
if mibBuilder.loadTexts: wlanStaNumAssocRequests.setDescription(' The number of Association requests transmitted by this station. ')
wlanStaNumAuthRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaNumAuthRequests.setStatus('current')
if mibBuilder.loadTexts: wlanStaNumAuthRequests.setDescription(' The number of Authentication requests transmitted by this station. ')
wlanStaTxDeauthentications = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaTxDeauthentications.setStatus('current')
if mibBuilder.loadTexts: wlanStaTxDeauthentications.setDescription(' The number of Deauthentication frames transmitted by this station. ')
wlanStaRxDeauthentications = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaRxDeauthentications.setStatus('current')
if mibBuilder.loadTexts: wlanStaRxDeauthentications.setDescription(' The number of Deauthentication frames received by this station. ')
wlanStaFrameRetryRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaFrameRetryRate.setStatus('current')
if mibBuilder.loadTexts: wlanStaFrameRetryRate.setDescription(' The number of retry packets as a percentage of the total packets transmitted and received by this station. ')
wlanStaFrameLowSpeedRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaFrameLowSpeedRate.setStatus('current')
if mibBuilder.loadTexts: wlanStaFrameLowSpeedRate.setDescription(' The number of low data rate (<= 18Mbps for A/G bands and <=2Mbps for B band) packets as a percentage of the total packets transmitted and received by this station. ')
wlanStaFrameNonUnicastRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaFrameNonUnicastRate.setStatus('current')
if mibBuilder.loadTexts: wlanStaFrameNonUnicastRate.setDescription(' The number of broadcast and multicast packets as a percentage of the total packets transmitted by this station. ')
wlanStaFrameFragmentationRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaFrameFragmentationRate.setStatus('current')
if mibBuilder.loadTexts: wlanStaFrameFragmentationRate.setDescription(' The number of fragments as a percentage of the total packets transmitted by this station. ')
wlanStaFrameBandwidthRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 1, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaFrameBandwidthRate.setStatus('current')
if mibBuilder.loadTexts: wlanStaFrameBandwidthRate.setDescription(' The bandwidth of this station in Kbps. ')
wlanStaFrameRetryErrorRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 1, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaFrameRetryErrorRate.setStatus('deprecated')
if mibBuilder.loadTexts: wlanStaFrameRetryErrorRate.setDescription(' The number of error packets as a percentage of the total packets received by this station. ')
wlanStaFrameReceiveErrorRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 1, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaFrameReceiveErrorRate.setStatus('current')
if mibBuilder.loadTexts: wlanStaFrameReceiveErrorRate.setDescription(' The number of error packets as a percentage of the total packets received by this station. ')
wlanStaTxBCastBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaTxBCastBytes.setStatus('current')
if mibBuilder.loadTexts: wlanStaTxBCastBytes.setDescription(' The number of broadcast bytes transmitted by this station. ')
wlanStaTxMCastBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaTxMCastBytes.setStatus('current')
if mibBuilder.loadTexts: wlanStaTxMCastBytes.setDescription(' The number of multicast bytes transmitted by this station. ')
wlanStaTxBytes64 = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 1, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaTxBytes64.setStatus('current')
if mibBuilder.loadTexts: wlanStaTxBytes64.setDescription(' The number of bytes transmitted by this station, 64-bit value ')
wlanStaRxBytes64 = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 1, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaRxBytes64.setStatus('current')
if mibBuilder.loadTexts: wlanStaRxBytes64.setDescription(' The number of bytes received by this station, 64-bit value ')
wlsxWlanStaRateStatsTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 2), )
if mibBuilder.loadTexts: wlsxWlanStaRateStatsTable.setStatus('current')
if mibBuilder.loadTexts: wlsxWlanStaRateStatsTable.setDescription(' This table contains all the Packet and Byte Counts for a station represented in terms of rate categories. ')
wlsxWlanStaRateStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 2, 1), ).setIndexNames((0, "WLSX-WLAN-MIB", "wlanStaPhyAddress"))
if mibBuilder.loadTexts: wlsxWlanStaRateStatsEntry.setStatus('current')
if mibBuilder.loadTexts: wlsxWlanStaRateStatsEntry.setDescription('Data rate based packet and byte count entry for a station')
wlanStaTxPktsAt1Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaTxPktsAt1Mbps.setStatus('current')
if mibBuilder.loadTexts: wlanStaTxPktsAt1Mbps.setDescription(' This attribute indicates the number of Packets Transmitted by the station at 1Mbps rate. ')
wlanStaTxBytesAt1Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaTxBytesAt1Mbps.setStatus('current')
if mibBuilder.loadTexts: wlanStaTxBytesAt1Mbps.setDescription(' This attribute indicates the number of Octets Transmitted by the station at 1Mbps rate. ')
wlanStaTxPktsAt2Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaTxPktsAt2Mbps.setStatus('current')
if mibBuilder.loadTexts: wlanStaTxPktsAt2Mbps.setDescription(' This attribute indicates the number of Packets Transmitted by the station at 2Mbps rate. ')
wlanStaTxBytesAt2Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaTxBytesAt2Mbps.setStatus('current')
if mibBuilder.loadTexts: wlanStaTxBytesAt2Mbps.setDescription(' This attribute indicates the number of Octets Transmitted by the station at 2Mbps rate. ')
wlanStaTxPktsAt5Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaTxPktsAt5Mbps.setStatus('current')
if mibBuilder.loadTexts: wlanStaTxPktsAt5Mbps.setDescription(' This attribute indicates the number of Packets Transmitted by the station at 5Mbps rate. ')
wlanStaTxBytesAt5Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaTxBytesAt5Mbps.setStatus('current')
if mibBuilder.loadTexts: wlanStaTxBytesAt5Mbps.setDescription(' This attribute indicates the number of Octets Transmitted by the station at 5Mbps rate. ')
wlanStaTxPktsAt11Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaTxPktsAt11Mbps.setStatus('current')
if mibBuilder.loadTexts: wlanStaTxPktsAt11Mbps.setDescription(' This attribute indicates the number of Packets Transmitted by the station at 11Mbps rate. ')
wlanStaTxBytesAt11Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaTxBytesAt11Mbps.setStatus('current')
if mibBuilder.loadTexts: wlanStaTxBytesAt11Mbps.setDescription(' This attribute indicates the number of Octets Transmitted by the station at 11Mbps rate. ')
wlanStaTxPktsAt6Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaTxPktsAt6Mbps.setStatus('current')
if mibBuilder.loadTexts: wlanStaTxPktsAt6Mbps.setDescription(' This attribute indicates the number of Packets Transmitted by the station at 6Mbps rate. ')
wlanStaTxBytesAt6Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaTxBytesAt6Mbps.setStatus('current')
if mibBuilder.loadTexts: wlanStaTxBytesAt6Mbps.setDescription(' This attribute indicates the number of Octets Transmitted by the station at 6Mbps rate. ')
wlanStaTxPktsAt12Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaTxPktsAt12Mbps.setStatus('current')
if mibBuilder.loadTexts: wlanStaTxPktsAt12Mbps.setDescription(' This attribute indicates the number of Packets Transmitted by the station at 12Mbps rate. ')
wlanStaTxBytesAt12Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaTxBytesAt12Mbps.setStatus('current')
if mibBuilder.loadTexts: wlanStaTxBytesAt12Mbps.setDescription(' This attribute indicates the number of Octets Transmitted by the station at 12Mbps rate. ')
wlanStaTxPktsAt18Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaTxPktsAt18Mbps.setStatus('current')
if mibBuilder.loadTexts: wlanStaTxPktsAt18Mbps.setDescription(' This attribute indicates the number of Packets Transmitted by the station at 18Mbps rate. ')
wlanStaTxBytesAt18Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaTxBytesAt18Mbps.setStatus('current')
if mibBuilder.loadTexts: wlanStaTxBytesAt18Mbps.setDescription(' This attribute indicates the number of Octets Transmitted by the station at 18Mbps rate. ')
wlanStaTxPktsAt24Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaTxPktsAt24Mbps.setStatus('current')
if mibBuilder.loadTexts: wlanStaTxPktsAt24Mbps.setDescription(' This attribute indicates the number of Packets Transmitted by the station at 24Mbps rate. ')
wlanStaTxBytesAt24Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaTxBytesAt24Mbps.setStatus('current')
if mibBuilder.loadTexts: wlanStaTxBytesAt24Mbps.setDescription(' This attribute indicates the number of Octets Transmitted by the station at 24Mbps rate. ')
wlanStaTxPktsAt36Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaTxPktsAt36Mbps.setStatus('current')
if mibBuilder.loadTexts: wlanStaTxPktsAt36Mbps.setDescription(' This attribute indicates the number of Packets Transmitted by the station at 36Mbps rate. ')
wlanStaTxBytesAt36Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaTxBytesAt36Mbps.setStatus('current')
if mibBuilder.loadTexts: wlanStaTxBytesAt36Mbps.setDescription(' This attribute indicates the number of Octets Transmitted by the station at 36Mbps rate. ')
wlanStaTxPktsAt48Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaTxPktsAt48Mbps.setStatus('current')
if mibBuilder.loadTexts: wlanStaTxPktsAt48Mbps.setDescription(' This attribute indicates the number of Packets Transmitted by the station at 48Mbps rate. ')
wlanStaTxBytesAt48Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaTxBytesAt48Mbps.setStatus('current')
if mibBuilder.loadTexts: wlanStaTxBytesAt48Mbps.setDescription(' This attribute indicates the number of Octets Transmitted by the station at 48Mbps rate. ')
wlanStaTxPktsAt54Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaTxPktsAt54Mbps.setStatus('current')
if mibBuilder.loadTexts: wlanStaTxPktsAt54Mbps.setDescription(' This attribute indicates the number of Packets Transmitted by the station at 54Mbps rate. ')
wlanStaTxBytesAt54Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaTxBytesAt54Mbps.setStatus('current')
if mibBuilder.loadTexts: wlanStaTxBytesAt54Mbps.setDescription(' This attribute indicates the number of Octets Transmitted by the station at 54Mbps rate. ')
wlanStaRxPktsAt1Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 2, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaRxPktsAt1Mbps.setStatus('current')
if mibBuilder.loadTexts: wlanStaRxPktsAt1Mbps.setDescription(' This attribute indicates the number of Packets Received by the station at 1Mbps rate. ')
wlanStaRxBytesAt1Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 2, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaRxBytesAt1Mbps.setStatus('current')
if mibBuilder.loadTexts: wlanStaRxBytesAt1Mbps.setDescription(' This attribute indicates the number of Octets Received by the station at 1Mbps rate. ')
wlanStaRxPktsAt2Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 2, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaRxPktsAt2Mbps.setStatus('current')
if mibBuilder.loadTexts: wlanStaRxPktsAt2Mbps.setDescription(' This attribute indicates the number of Packets Received by the station at 2Mbps rate. ')
wlanStaRxBytesAt2Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 2, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaRxBytesAt2Mbps.setStatus('current')
if mibBuilder.loadTexts: wlanStaRxBytesAt2Mbps.setDescription(' This attribute indicates the number of Octets Received by the station at 2Mbps rate. ')
wlanStaRxPktsAt5Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 2, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaRxPktsAt5Mbps.setStatus('current')
if mibBuilder.loadTexts: wlanStaRxPktsAt5Mbps.setDescription(' This attribute indicates the number of Packets Received by the station at 5Mbps rate. ')
wlanStaRxBytesAt5Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 2, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaRxBytesAt5Mbps.setStatus('current')
if mibBuilder.loadTexts: wlanStaRxBytesAt5Mbps.setDescription(' This attribute indicates the number of Octets Received by the station at 5Mbps rate. ')
wlanStaRxPktsAt11Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 2, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaRxPktsAt11Mbps.setStatus('current')
if mibBuilder.loadTexts: wlanStaRxPktsAt11Mbps.setDescription(' This attribute indicates the number of Packets Received by the station at 11Mbps rate. ')
wlanStaRxBytesAt11Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 2, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaRxBytesAt11Mbps.setStatus('current')
if mibBuilder.loadTexts: wlanStaRxBytesAt11Mbps.setDescription(' This attribute indicates the number of Octets Received by the station at 11Mbps rate. ')
wlanStaRxPktsAt6Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 2, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaRxPktsAt6Mbps.setStatus('current')
if mibBuilder.loadTexts: wlanStaRxPktsAt6Mbps.setDescription(' This attribute indicates the number of Packets Received by the station at 6Mbps rate. ')
wlanStaRxBytesAt6Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 2, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaRxBytesAt6Mbps.setStatus('current')
if mibBuilder.loadTexts: wlanStaRxBytesAt6Mbps.setDescription(' This attribute indicates the number of Octets Received by the station at 6Mbps rate. ')
wlanStaRxPktsAt12Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 2, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaRxPktsAt12Mbps.setStatus('current')
if mibBuilder.loadTexts: wlanStaRxPktsAt12Mbps.setDescription(' This attribute indicates the number of Packets Received by the station at 12Mbps rate. ')
wlanStaRxBytesAt12Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 2, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaRxBytesAt12Mbps.setStatus('current')
if mibBuilder.loadTexts: wlanStaRxBytesAt12Mbps.setDescription(' This attribute indicates the number of Octets Received by the station at 12Mbps rate. ')
wlanStaRxPktsAt18Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 2, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaRxPktsAt18Mbps.setStatus('current')
if mibBuilder.loadTexts: wlanStaRxPktsAt18Mbps.setDescription(' This attribute indicates the number of Packets Received by the station at 18Mbps rate. ')
wlanStaRxBytesAt18Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 2, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaRxBytesAt18Mbps.setStatus('current')
if mibBuilder.loadTexts: wlanStaRxBytesAt18Mbps.setDescription(' This attribute indicates the number of Octets Received by the station at 18Mbps rate. ')
wlanStaRxPktsAt24Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 2, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaRxPktsAt24Mbps.setStatus('current')
if mibBuilder.loadTexts: wlanStaRxPktsAt24Mbps.setDescription(' This attribute indicates the number of Packets Received by the station at 24Mbps rate. ')
wlanStaRxBytesAt24Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 2, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaRxBytesAt24Mbps.setStatus('current')
if mibBuilder.loadTexts: wlanStaRxBytesAt24Mbps.setDescription(' This attribute indicates the number of Octets Received by the station at 24Mbps rate. ')
wlanStaRxPktsAt36Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 2, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaRxPktsAt36Mbps.setStatus('current')
if mibBuilder.loadTexts: wlanStaRxPktsAt36Mbps.setDescription(' This attribute indicates the number of Packets Received by the station at 36Mbps rate. ')
wlanStaRxBytesAt36Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 2, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaRxBytesAt36Mbps.setStatus('current')
if mibBuilder.loadTexts: wlanStaRxBytesAt36Mbps.setDescription(' This attribute indicates the number of Octets Received by the station at 36Mbps rate. ')
wlanStaRxPktsAt48Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 2, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaRxPktsAt48Mbps.setStatus('current')
if mibBuilder.loadTexts: wlanStaRxPktsAt48Mbps.setDescription(' This attribute indicates the number of Packets Received by the station at 48Mbps rate. ')
wlanStaRxBytesAt48Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 2, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaRxBytesAt48Mbps.setStatus('current')
if mibBuilder.loadTexts: wlanStaRxBytesAt48Mbps.setDescription(' This attribute indicates the number of Octets Received by the station at 48Mbps rate. ')
wlanStaRxPktsAt54Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 2, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaRxPktsAt54Mbps.setStatus('current')
if mibBuilder.loadTexts: wlanStaRxPktsAt54Mbps.setDescription(' This attribute indicates the number of Packets Received by the station at 54Mbps rate. ')
wlanStaRxBytesAt54Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 2, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaRxBytesAt54Mbps.setStatus('current')
if mibBuilder.loadTexts: wlanStaRxBytesAt54Mbps.setDescription(' This attribute indicates the number of Octets Received by the station at 54Mbps rate. ')
wlanStaTxPktsAt9Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 2, 1, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaTxPktsAt9Mbps.setStatus('current')
if mibBuilder.loadTexts: wlanStaTxPktsAt9Mbps.setDescription(' This attribute indicates the number of Packets Transmitted by the station at 9Mbps rate. ')
wlanStaTxBytesAt9Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 2, 1, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaTxBytesAt9Mbps.setStatus('current')
if mibBuilder.loadTexts: wlanStaTxBytesAt9Mbps.setDescription(' This attribute indicates the number of Octets Transmitted by the station at 9Mbps rate. ')
wlanStaRxPktsAt9Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 2, 1, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaRxPktsAt9Mbps.setStatus('current')
if mibBuilder.loadTexts: wlanStaRxPktsAt9Mbps.setDescription(' This attribute indicates the number of Packets Received by the station at 9Mbps rate. ')
wlanStaRxBytesAt9Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 2, 1, 48), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaRxBytesAt9Mbps.setStatus('current')
if mibBuilder.loadTexts: wlanStaRxBytesAt9Mbps.setDescription(' This attribute indicates the number of Octets Received by the station at 9Mbps rate. ')
wlsxWlanStaDATypeStatsTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 3), )
if mibBuilder.loadTexts: wlsxWlanStaDATypeStatsTable.setStatus('current')
if mibBuilder.loadTexts: wlsxWlanStaDATypeStatsTable.setDescription(' This table contains all the Packet and Byte Counts for a station but but broken down in terms of Destination Address Type. ')
wlsxWlanStaDATypeStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 3, 1), ).setIndexNames((0, "WLSX-WLAN-MIB", "wlanStaPhyAddress"))
if mibBuilder.loadTexts: wlsxWlanStaDATypeStatsEntry.setStatus('current')
if mibBuilder.loadTexts: wlsxWlanStaDATypeStatsEntry.setDescription(' Destination Address based packet and byte count entry for a station ')
wlanStaTxDABroadcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaTxDABroadcastPkts.setStatus('current')
if mibBuilder.loadTexts: wlanStaTxDABroadcastPkts.setDescription(' This attribute indicates the number of Broadcast packets transmitted by this Station. ')
wlanStaTxDABroadcastBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaTxDABroadcastBytes.setStatus('current')
if mibBuilder.loadTexts: wlanStaTxDABroadcastBytes.setDescription(' This attribute indicates the number of Broadcast Bytes transmitted by this Station. ')
wlanStaTxDAMulticastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaTxDAMulticastPkts.setStatus('current')
if mibBuilder.loadTexts: wlanStaTxDAMulticastPkts.setDescription(' This attribute indicates the number of Multicast packets transmitted by this station. ')
wlanStaTxDAMulticastBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaTxDAMulticastBytes.setStatus('current')
if mibBuilder.loadTexts: wlanStaTxDAMulticastBytes.setDescription(' This attribute indicates the number of Multicast Bytes transmitted by this station. ')
wlanStaTxDAUnicastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaTxDAUnicastPkts.setStatus('current')
if mibBuilder.loadTexts: wlanStaTxDAUnicastPkts.setDescription(' This attribute indicates the total of Unicast packets transmitted by this station. ')
wlanStaTxDAUnicastBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaTxDAUnicastBytes.setStatus('current')
if mibBuilder.loadTexts: wlanStaTxDAUnicastBytes.setDescription(' This attribute indicates the total of Unicast Bytes transmitted by this station. ')
wlsxWlanStaFrameTypeStatsTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 4), )
if mibBuilder.loadTexts: wlsxWlanStaFrameTypeStatsTable.setStatus('current')
if mibBuilder.loadTexts: wlsxWlanStaFrameTypeStatsTable.setDescription(' This table contains all the Packet and Byte Counts for stations but broken down into different Frame Types. ')
wlsxWlanStaFrameTypeStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 4, 1), ).setIndexNames((0, "WLSX-WLAN-MIB", "wlanStaPhyAddress"))
if mibBuilder.loadTexts: wlsxWlanStaFrameTypeStatsEntry.setStatus('current')
if mibBuilder.loadTexts: wlsxWlanStaFrameTypeStatsEntry.setDescription('Frame Type based packet and byte count entry for a station')
wlanStaTxMgmtPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 4, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaTxMgmtPkts.setStatus('current')
if mibBuilder.loadTexts: wlanStaTxMgmtPkts.setDescription(' This attribute indicates the Transmitted Management packets from a station. ')
wlanStaTxMgmtBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaTxMgmtBytes.setStatus('current')
if mibBuilder.loadTexts: wlanStaTxMgmtBytes.setDescription(' This attribute indicates the Transmitted Management Bytes from a station ')
wlanStaTxCtrlPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaTxCtrlPkts.setStatus('current')
if mibBuilder.loadTexts: wlanStaTxCtrlPkts.setDescription(' This attribute indicates the Transmitted Control packets from a station ')
wlanStaTxCtrlBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaTxCtrlBytes.setStatus('current')
if mibBuilder.loadTexts: wlanStaTxCtrlBytes.setDescription(' This attribute indicates the Transmitted Control Bytes from a station ')
wlanStaTxDataPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaTxDataPkts.setStatus('current')
if mibBuilder.loadTexts: wlanStaTxDataPkts.setDescription(' This attribute indicates the Transmitted Data packets from a station ')
wlanStaTxDataBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaTxDataBytes.setStatus('current')
if mibBuilder.loadTexts: wlanStaTxDataBytes.setDescription(' This attribute indicates the Transmitted Data Bytes observed on this channel. ')
wlanStaRxMgmtPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaRxMgmtPkts.setStatus('current')
if mibBuilder.loadTexts: wlanStaRxMgmtPkts.setDescription(' This attribute indicates the number of received Management packets at a station. ')
wlanStaRxMgmtBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaRxMgmtBytes.setStatus('current')
if mibBuilder.loadTexts: wlanStaRxMgmtBytes.setDescription(' This attribute indicates the number of received Management Bytes at a station. ')
wlanStaRxCtrlPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaRxCtrlPkts.setStatus('current')
if mibBuilder.loadTexts: wlanStaRxCtrlPkts.setDescription(' This attribute indicates the number of received Control packets at a station. ')
wlanStaRxCtrlBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 4, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaRxCtrlBytes.setStatus('current')
if mibBuilder.loadTexts: wlanStaRxCtrlBytes.setDescription(' This attribute indicates the number of received Control Bytes at a station. ')
wlanStaRxDataPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 4, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaRxDataPkts.setStatus('current')
if mibBuilder.loadTexts: wlanStaRxDataPkts.setDescription(' This attribute indicates the number of received Data packets at a station. ')
wlanStaRxDataBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 4, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaRxDataBytes.setStatus('current')
if mibBuilder.loadTexts: wlanStaRxDataBytes.setDescription(' This attribute indicates the number of received Data Bytes at a station. ')
wlsxWlanStaPktSizeStatsTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 5), )
if mibBuilder.loadTexts: wlsxWlanStaPktSizeStatsTable.setStatus('current')
if mibBuilder.loadTexts: wlsxWlanStaPktSizeStatsTable.setDescription(' This table contains all the Packet and Byte Counts for stations but broken down into different Packet Sizes. ')
wlsxWlanStaPktSizeStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 5, 1), ).setIndexNames((0, "WLSX-WLAN-MIB", "wlanStaPhyAddress"))
if mibBuilder.loadTexts: wlsxWlanStaPktSizeStatsEntry.setStatus('current')
if mibBuilder.loadTexts: wlsxWlanStaPktSizeStatsEntry.setDescription('Packet Size based packet count entry for a station')
wlanStaTxPkts63Bytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 5, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaTxPkts63Bytes.setStatus('current')
if mibBuilder.loadTexts: wlanStaTxPkts63Bytes.setDescription(' This attribute indicates the number of packets transmitted by the station that were less than 64 bytes long. ')
wlanStaTxPkts64To127 = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 5, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaTxPkts64To127.setStatus('current')
if mibBuilder.loadTexts: wlanStaTxPkts64To127.setDescription(' This attribute indicates the number of packets transmitted by the station that were between 64 and 127 bytes long. ')
wlanStaTxPkts128To255 = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaTxPkts128To255.setStatus('current')
if mibBuilder.loadTexts: wlanStaTxPkts128To255.setDescription(' This attribute indicates the number of packets transmitted by the station that were between 128 and 255 bytes long. ')
wlanStaTxPkts256To511 = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaTxPkts256To511.setStatus('current')
if mibBuilder.loadTexts: wlanStaTxPkts256To511.setDescription(' This attribute indicates the number of packets transmitted by the station that were between 256 and 511 bytes long. ')
wlanStaTxPkts512To1023 = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 5, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaTxPkts512To1023.setStatus('current')
if mibBuilder.loadTexts: wlanStaTxPkts512To1023.setDescription(' This attribute indicates the number of packets transmitted by the station that were between 512 and 1023 bytes long. ')
wlanStaTxPkts1024To1518 = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 5, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaTxPkts1024To1518.setStatus('current')
if mibBuilder.loadTexts: wlanStaTxPkts1024To1518.setDescription(' This attribute indicates the number of packets transmitted by the station that were between 1024 and 1518 bytes long. ')
wlanStaRxPkts63Bytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 5, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaRxPkts63Bytes.setStatus('current')
if mibBuilder.loadTexts: wlanStaRxPkts63Bytes.setDescription(' This attribute indicates the number of packets Received by the station that were less than 64 bytes long. ')
wlanStaRxPkts64To127 = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 5, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaRxPkts64To127.setStatus('current')
if mibBuilder.loadTexts: wlanStaRxPkts64To127.setDescription(' This attribute indicates the number of packets Received by the station that were between 64 and 127 bytes long. ')
wlanStaRxPkts128To255 = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 5, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaRxPkts128To255.setStatus('current')
if mibBuilder.loadTexts: wlanStaRxPkts128To255.setDescription(' This attribute indicates the number of packets Received by the station that were between 128 and 255 bytes long. ')
wlanStaRxPkts256To511 = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 5, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaRxPkts256To511.setStatus('current')
if mibBuilder.loadTexts: wlanStaRxPkts256To511.setDescription(' This attribute indicates the number of packets Received by the station that were between 256 and 511 bytes long. ')
wlanStaRxPkts512To1023 = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 5, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaRxPkts512To1023.setStatus('current')
if mibBuilder.loadTexts: wlanStaRxPkts512To1023.setDescription(' This attribute indicates the number of packets Received by the station that were between 512 and 1023 bytes long. ')
wlanStaRxPkts1024To1518 = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 5, 3, 2, 5, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStaRxPkts1024To1518.setStatus('current')
if mibBuilder.loadTexts: wlanStaRxPkts1024To1518.setDescription(' This attribute indicates the number of packets Received by the station that were between 1024 and 1518 bytes long. ')
mibBuilder.exportSymbols("WLSX-WLAN-MIB", wlanStaAssocFailureApEssid=wlanStaAssocFailureApEssid, wlanAPFrameBandwidthRate=wlanAPFrameBandwidthRate, wlsxWlanStaFrameTypeStatsEntry=wlsxWlanStaFrameTypeStatsEntry, wlanAPBssidModule=wlanAPBssidModule, wlanAPTxDataPkts64=wlanAPTxDataPkts64, wlanStaTxPkts128To255=wlanStaTxPkts128To255, wlsxWlanMIB=wlsxWlanMIB, wlanStaRxMgmtBytes=wlanStaRxMgmtBytes, wlanAPESSID=wlanAPESSID, wlanStaTxBytesAt9Mbps=wlanStaTxBytesAt9Mbps, wlanStaTxMCastPkts=wlanStaTxMCastPkts, wlanAPBssidInactiveTime=wlanAPBssidInactiveTime, wlanAPStatsTotBytesAt6Mbps=wlanAPStatsTotBytesAt6Mbps, wlanStaRxBCastBytes=wlanStaRxBCastBytes, wlanStaTxPktsAt24Mbps=wlanStaTxPktsAt24Mbps, wlanESSIDNumStations=wlanESSIDNumStations, wlanAPSysLocation=wlanAPSysLocation, wlsxWlanStaAssociationFailureEntry=wlsxWlanStaAssociationFailureEntry, wlanStaAssocFailurePhyType=wlanStaAssocFailurePhyType, wlsxWlanStationStatsGroup=wlsxWlanStationStatsGroup, wlanAPChFrameDuplicateCount=wlanAPChFrameDuplicateCount, wlanStaTxCtrlPkts=wlanStaTxCtrlPkts, wlsxWlanAPDATypeStatsEntry=wlsxWlanAPDATypeStatsEntry, wlanStaVlanId=wlanStaVlanId, wlanStaTxDABroadcastPkts=wlanStaTxDABroadcastPkts, wlanAPFrameNonUnicastRate=wlanAPFrameNonUnicastRate, wlanStaFrameLowSpeedRate=wlanStaFrameLowSpeedRate, wlanAPFQLNFloor=wlanAPFQLNFloor, wlanAPBssidRogueType=wlanAPBssidRogueType, wlanAPStatsTotCtrlPkts=wlanAPStatsTotCtrlPkts, wlanAPUnprovisioned=wlanAPUnprovisioned, wlanStaTxDataBytes=wlanStaTxDataBytes, wlanAPModelName=wlanAPModelName, wlanAPBssidLoadBalancing=wlanAPBssidLoadBalancing, wlanAPStatsTotBytesAt54Mbps=wlanAPStatsTotBytesAt54Mbps, wlanAPRadioAPName=wlanAPRadioAPName, wlsxWlanStationStatsTable=wlsxWlanStationStatsTable, wlanStaTxPktsAt2Mbps=wlanStaTxPktsAt2Mbps, wlanStaTxBytesAt6Mbps=wlanStaTxBytesAt6Mbps, wlanAPStatsTotDAUnicastPkts=wlanAPStatsTotDAUnicastPkts, wlanAPTxBytes=wlanAPTxBytes, wlanStaTxMgmtPkts=wlanStaTxMgmtPkts, wlanAPRadioHTMode=wlanAPRadioHTMode, wlanAPChFrameFragmentationRate=wlanAPChFrameFragmentationRate, wlanAPTxPkts=wlanAPTxPkts, wlsxWlanAPChStatsTable=wlsxWlanAPChStatsTable, wlanAPRadioNumAssociatedClients=wlanAPRadioNumAssociatedClients, wlanAPStatsTotMgmtBytes=wlanAPStatsTotMgmtBytes, wlanAPChInterferenceIndex=wlanAPChInterferenceIndex, wlanStaFrameReceiveErrorRate=wlanStaFrameReceiveErrorRate, wlanStaTxPkts256To511=wlanStaTxPkts256To511, wlanAPStatsTotPktsAt6Mbps=wlanAPStatsTotPktsAt6Mbps, wlanAPChFrameReceiveErrorRate=wlanAPChFrameReceiveErrorRate, wlanAPChTotMacErrPkts=wlanAPChTotMacErrPkts, wlanAPChTransmittedFrameCount=wlanAPChTransmittedFrameCount, wlanAPChRxUtilization=wlanAPChRxUtilization, wlanStaTxDeauthentications=wlanStaTxDeauthentications, wlanAPChNumStations=wlanAPChNumStations, wlsxWlanAPRateStatsEntry=wlsxWlanAPRateStatsEntry, wlanAPStatsTotBytesAt11Mbps=wlanAPStatsTotBytesAt11Mbps, wlsxWlanStaDATypeStatsTable=wlsxWlanStaDATypeStatsTable, wlanAPFrameRetryRate=wlanAPFrameRetryRate, wlsxWlanStaRateStatsEntry=wlsxWlanStaRateStatsEntry, wlanStaTxBytesAt12Mbps=wlanStaTxBytesAt12Mbps, wlanESSIDNumAccessPointsDown=wlanESSIDNumAccessPointsDown, wlanAPStatsTotDataPkts=wlanAPStatsTotDataPkts, wlanAPBssidPort=wlanAPBssidPort, wlanStaTxPkts512To1023=wlanStaTxPkts512To1023, wlanStaRxPkts64To127=wlanStaRxPkts64To127, wlanAPChTransmittedFragmentCount=wlanAPChTransmittedFragmentCount, wlanStaTxCtrlBytes=wlanStaTxCtrlBytes, wlanAPRadioNumber=wlanAPRadioNumber, wlanAPModel=wlanAPModel, wlanAPStatsTotBytesAt9Mbps=wlanAPStatsTotBytesAt9Mbps, wlanStaRxCtrlPkts=wlanStaRxCtrlPkts, wlanESSID=wlanESSID, wlanStaTxBytesAt5Mbps=wlanStaTxBytesAt5Mbps, wlanStaVOIPState=wlanStaVOIPState, wlanAPStatsTotPktsAt2Mbps=wlanAPStatsTotPktsAt2Mbps, wlanStaTxPktsAt36Mbps=wlanStaTxPktsAt36Mbps, wlanStaRxPkts512To1023=wlanStaRxPkts512To1023, wlanAPStatsPkts256To511=wlanAPStatsPkts256To511, wlanAPChTotPhyErrPkts=wlanAPChTotPhyErrPkts, wlanAPExternalAntenna=wlanAPExternalAntenna, wlanStaRxPkts1024To1518=wlanStaRxPkts1024To1518, wlsxWlanESSIDVlanPoolTable=wlsxWlanESSIDVlanPoolTable, wlanAPFrameRetryErrorRate=wlanAPFrameRetryErrorRate, wlsxWlanAPBssidEntry=wlsxWlanAPBssidEntry, wlanAPChWEPUndecryptableCount=wlanAPChWEPUndecryptableCount, wlanStaRxPktsAt6Mbps=wlanStaRxPktsAt6Mbps, wlanAPChMulticastReceivedFrameCount=wlanAPChMulticastReceivedFrameCount, wlanAPFQLNCampus=wlanAPFQLNCampus, wlanAPChNoise=wlanAPChNoise, wlanStaRxPktsAt24Mbps=wlanStaRxPktsAt24Mbps, wlanAPRxDeauthentications=wlanAPRxDeauthentications, wlanAPChTotRetryPkts=wlanAPChTotRetryPkts, wlanAPBSSID=wlanAPBSSID, wlanAPStatsTotPktsAt36Mbps=wlanAPStatsTotPktsAt36Mbps, wlanAPRadioChannel=wlanAPRadioChannel, wlanAPStatsTotPktsAt1Mbps=wlanAPStatsTotPktsAt1Mbps, wlanAPChFCSErrorCount=wlanAPChFCSErrorCount, wlanAPChBusyRate=wlanAPChBusyRate, wlanAPStatsPkts63Bytes=wlanAPStatsPkts63Bytes, wlanStaRxPktsAt54Mbps=wlanStaRxPktsAt54Mbps, wlanAPRadioNumActiveBSSIDs=wlanAPRadioNumActiveBSSIDs, wlanAPLongitude=wlanAPLongitude, wlsxWlanStateGroup=wlsxWlanStateGroup, wlanAPGroupName=wlanAPGroupName, wlanAPFrameLowSpeedRate=wlanAPFrameLowSpeedRate, wlanAPRadioHTExtChannel=wlanAPRadioHTExtChannel, wlanStaRxCtrlBytes=wlanStaRxCtrlBytes, wlanAPNumClients=wlanAPNumClients, wlanStaTxBytesAt2Mbps=wlanStaTxBytesAt2Mbps, wlanStaTxBCastPkts=wlanStaTxBCastPkts, wlanAPChRTSFailureCount=wlanAPChRTSFailureCount, wlanAPBssidHTMode=wlanAPBssidHTMode, wlanStaNumAuthRequests=wlanStaNumAuthRequests, wlanStaTxPkts1024To1518=wlanStaTxPkts1024To1518, wlanStaRxMgmtPkts=wlanStaRxMgmtPkts, wlanAPChMultipleRetryCount=wlanAPChMultipleRetryCount, wlanStaRxBytesAt9Mbps=wlanStaRxBytesAt9Mbps, wlanAPRadioTiltAngle=wlanAPRadioTiltAngle, wlanAPStatsTotPktsAt11Mbps=wlanAPStatsTotPktsAt11Mbps, wlanAPFrameReceiveErrorRate=wlanAPFrameReceiveErrorRate, wlsxWlanTotalNumStationsAssociated=wlsxWlanTotalNumStationsAssociated, wlsxWlanAccessPointInfoGroup=wlsxWlanAccessPointInfoGroup, wlanStaAccessPointESSID=wlanStaAccessPointESSID, wlanAPIpAddress=wlanAPIpAddress, wlanStaRxDataPkts=wlanStaRxDataPkts, wlanStaTxPktsAt54Mbps=wlanStaTxPktsAt54Mbps, wlsxWlanESSIDEntry=wlsxWlanESSIDEntry, wlsxWlanAPGroupTable=wlsxWlanAPGroupTable, wlanAPUpTime=wlanAPUpTime, wlanAPStatsPkts64To127=wlanAPStatsPkts64To127, wlanStaIsAuthenticated=wlanStaIsAuthenticated, wlsxWlanStationTable=wlsxWlanStationTable, wlanStaRxPktsAt12Mbps=wlanStaRxPktsAt12Mbps, wlanAPTxDeauthentications=wlanAPTxDeauthentications, wlanAPStatsTotPktsAt18Mbps=wlanAPStatsTotPktsAt18Mbps, wlanESSIDNumAccessPointsUp=wlanESSIDNumAccessPointsUp, wlanAPdot11gAntennaGain=wlanAPdot11gAntennaGain, wlanStaRxBytesAt18Mbps=wlanStaRxBytesAt18Mbps, wlanAPStatsTotDAMulticastBytes=wlanAPStatsTotDAMulticastBytes, wlanAPChFrameRetryRate=wlanAPChFrameRetryRate, wlanAPStatsTotBytesAt48Mbps=wlanAPStatsTotBytesAt48Mbps, wlanAPRadioType=wlanAPRadioType, wlanAPStatsTotBytesAt24Mbps=wlanAPStatsTotBytesAt24Mbps, wlanStaRxBytesAt24Mbps=wlanStaRxBytesAt24Mbps, wlsxWlanStaFrameTypeStatsTable=wlsxWlanStaFrameTypeStatsTable, wlanStaTxBytesAt36Mbps=wlanStaTxBytesAt36Mbps, wlanStaTxDAMulticastBytes=wlanStaTxDAMulticastBytes, wlanStaRSSI=wlanStaRSSI, wlanAPStatsTotBytesAt36Mbps=wlanAPStatsTotBytesAt36Mbps, wlanStaRxPktsAt1Mbps=wlanStaRxPktsAt1Mbps, wlsxWlanStaPktSizeStatsTable=wlsxWlanStaPktSizeStatsTable, wlsxWlanAPChStatsEntry=wlsxWlanAPChStatsEntry, wlanStaRxBytesAt54Mbps=wlanStaRxBytesAt54Mbps, wlanStaHTMode=wlanStaHTMode, wlanAPRadioNumMonitoredBSSIDs=wlanAPRadioNumMonitoredBSSIDs, wlanAPStatsTotBytesAt12Mbps=wlanAPStatsTotBytesAt12Mbps, wlanAPBssidMode=wlanAPBssidMode, wlanStaFrameRetryErrorRate=wlanStaFrameRetryErrorRate, wlsxWlanAPTable=wlsxWlanAPTable, wlanAPChRetryCount=wlanAPChRetryCount, wlanAPCurrentChannel=wlanAPCurrentChannel, wlanStaRxDeauthentications=wlanStaRxDeauthentications, wlanStaTxBytes64=wlanStaTxBytes64, wlanAPBssidPhyType=wlanAPBssidPhyType, wlanAPChMulticastTransmittedFrameCount=wlanAPChMulticastTransmittedFrameCount, wlanStaFrameBandwidthRate=wlanStaFrameBandwidthRate, wlanAPStatsTotPktsAt9Mbps=wlanAPStatsTotPktsAt9Mbps, wlanStaRxBytesAt2Mbps=wlanStaRxBytesAt2Mbps, wlanStaRxBytes=wlanStaRxBytes, wlanStaRxMCastBytes=wlanStaRxMCastBytes, wlanAPChFailedCount=wlanAPChFailedCount, wlanStaUpTime=wlanStaUpTime, wlanStaIsAssociated=wlanStaIsAssociated, wlsxWlanStaAssociationFailureTable=wlsxWlanStaAssociationFailureTable, wlanAPMonitorMode=wlanAPMonitorMode, wlanAPChannelErrorRate=wlanAPChannelErrorRate, wlanStaFrameNonUnicastRate=wlanStaFrameNonUnicastRate, wlsxWlanTotalNumAccessPoints=wlsxWlanTotalNumAccessPoints, wlanAPFloor=wlanAPFloor, wlanStaPhyNumber=wlanStaPhyNumber, wlanAPChannelNumber=wlanAPChannelNumber, wlanStaRxPkts63Bytes=wlanStaRxPkts63Bytes, wlanESSIDVlanPoolStatus=wlanESSIDVlanPoolStatus, wlanStaTxDAMulticastPkts=wlanStaTxDAMulticastPkts, wlanStaVOIPProtocol=wlanStaVOIPProtocol, wlanAPChACKFailureCount=wlanAPChACKFailureCount, wlanAPBssidHTExtChannel=wlanAPBssidHTExtChannel, wlanAPStatsTotPktsAt5Mbps=wlanAPStatsTotPktsAt5Mbps, wlanAPChRTSSuccessCount=wlanAPChRTSSuccessCount, wlanAPNumReboots=wlanAPNumReboots, wlanAPChTotBytes=wlanAPChTotBytes, wlanAPRadioHTChannel=wlanAPRadioHTChannel, wlanStaAssociationID=wlanStaAssociationID, wlanAPNumAps=wlanAPNumAps, wlanStaTxBytesAt54Mbps=wlanStaTxBytesAt54Mbps, wlanStaTxBytesAt24Mbps=wlanStaTxBytesAt24Mbps, wlanStaRxBytesAt1Mbps=wlanStaRxBytesAt1Mbps, wlanStaRxPktsAt18Mbps=wlanStaRxPktsAt18Mbps, wlanAPBssidSlot=wlanAPBssidSlot, wlanAPEnet1Mode=wlanAPEnet1Mode, wlanAPStatsTotPktsAt48Mbps=wlanAPStatsTotPktsAt48Mbps, wlanAPStatsPkts128To255=wlanAPStatsPkts128To255, wlanAPChCoverageIndex=wlanAPChCoverageIndex, wlanStaTxPktsAt11Mbps=wlanStaTxPktsAt11Mbps, wlanStaRxBytesAt36Mbps=wlanStaRxBytesAt36Mbps, wlsxWlanAPPktSizeStatsTable=wlsxWlanAPPktSizeStatsTable, wlanAPdot11aAntennaGain=wlanAPdot11aAntennaGain, wlanAPBuilding=wlanAPBuilding, wlsxWlanAPGroupEntry=wlsxWlanAPGroupEntry, PYSNMP_MODULE_ID=wlsxWlanMIB, wlanStaRxPkts256To511=wlanStaRxPkts256To511, wlanStaChannelNum=wlanStaChannelNum, wlanAPFQLNBuilding=wlanAPFQLNBuilding, wlanAPFrameFragmentationRate=wlanAPFrameFragmentationRate, wlanAPStatsTotBytesAt5Mbps=wlanAPStatsTotBytesAt5Mbps, wlanAPStatsPkts1024To1518=wlanAPStatsPkts1024To1518, wlanAPChFrameRetryErrorRate=wlanAPChFrameRetryErrorRate, wlanStaTxPktsAt9Mbps=wlanStaTxPktsAt9Mbps, wlanStaAssocFailureElapsedTime=wlanStaAssocFailureElapsedTime, wlanAPBssidUpTime=wlanAPBssidUpTime, wlsxWlanRadioEntry=wlsxWlanRadioEntry, wlanStaTxDABroadcastBytes=wlanStaTxDABroadcastBytes, wlanAPChFrameBandwidthRate=wlanAPChFrameBandwidthRate, wlanAPRadioTransmitPower=wlanAPRadioTransmitPower, wlsxWlanStaDATypeStatsEntry=wlsxWlanStaDATypeStatsEntry, wlanAPStatsTotPktsAt24Mbps=wlanAPStatsTotPktsAt24Mbps, wlanStaTxBCastBytes=wlanStaTxBCastBytes, wlsxWlanAPBssidTable=wlsxWlanAPBssidTable, wlsxWlanAPEntry=wlsxWlanAPEntry, wlsxWlanStatsGroup=wlsxWlanStatsGroup, wlanStaChannel=wlanStaChannel, wlanStaTxBytesAt1Mbps=wlanStaTxBytesAt1Mbps, wlanAPChReceivedFragmentCount=wlanAPChReceivedFragmentCount, wlanAPChTotFragmentedPkts=wlanAPChTotFragmentedPkts, wlanAPTxDataBytes64=wlanAPTxDataBytes64, wlanAPStatsTotDAMulticastPkts=wlanAPStatsTotDAMulticastPkts, wlanAPRadioNumMonitoredClients=wlanAPRadioNumMonitoredClients, wlanStaTxBytes=wlanStaTxBytes, wlanStaRxBytesAt48Mbps=wlanStaRxBytesAt48Mbps, wlanAPRadioMode=wlanAPRadioMode, wlanStaNumAssocRequests=wlanStaNumAssocRequests, wlanAPBssidNumAssociatedStations=wlanAPBssidNumAssociatedStations, wlanStaAssocFailurePhyNum=wlanStaAssocFailurePhyNum, wlanAPRadioUtilization=wlanAPRadioUtilization, wlanAPFQLN=wlanAPFQLN, wlanAPStatsTotBytesAt2Mbps=wlanAPStatsTotBytesAt2Mbps, wlanAPBssidPhyNumber=wlanAPBssidPhyNumber, wlanAPSerialNumber=wlanAPSerialNumber, wlanAPStatsTotCtrlBytes=wlanAPStatsTotCtrlBytes, wlsxWlanAPDATypeStatsTable=wlsxWlanAPDATypeStatsTable)
mibBuilder.exportSymbols("WLSX-WLAN-MIB", wlanStaTxPktsAt18Mbps=wlanStaTxPktsAt18Mbps, wlsxWlanAPPktSizeStatsEntry=wlsxWlanAPPktSizeStatsEntry, wlanAPStatsTotDABroadcastPkts=wlanAPStatsTotDABroadcastPkts, wlanAPRxDataPkts64=wlanAPRxDataPkts64, wlanStaTxPktsAt5Mbps=wlanStaTxPktsAt5Mbps, wlanAPLatitude=wlanAPLatitude, wlanAPName=wlanAPName, wlanStaTransmitRate=wlanStaTransmitRate, wlanAPChTotPkts=wlanAPChTotPkts, wlanAPRadioBearing=wlanAPRadioBearing, wlanAPNumRadios=wlanAPNumRadios, wlsxWlanStationInfoGroup=wlsxWlanStationInfoGroup, wlsxWlanStaRateStatsTable=wlsxWlanStaRateStatsTable, wlanStaCtrlPkts=wlanStaCtrlPkts, wlsxWlanAccessPointStatsGroup=wlsxWlanAccessPointStatsGroup, wlanAPStatsTotPktsAt54Mbps=wlanAPStatsTotPktsAt54Mbps, wlanAPMacAddress=wlanAPMacAddress, wlanAPChFrameLowSpeedRate=wlanAPChFrameLowSpeedRate, wlsxWlanStationStatsEntry=wlsxWlanStationStatsEntry, wlanStaRxBytesAt12Mbps=wlanStaRxBytesAt12Mbps, wlanStaRxPktsAt5Mbps=wlanStaRxPktsAt5Mbps, wlanAPRxDataBytes=wlanAPRxDataBytes, wlanAPBssidHTChannel=wlanAPBssidHTChannel, wlanESSIDVlanId=wlanESSIDVlanId, wlanAPNumBootstraps=wlanAPNumBootstraps, wlanStaRxPktsAt48Mbps=wlanStaRxPktsAt48Mbps, wlanAPTxDataPkts=wlanAPTxDataPkts, wlanAPStatsTotBytesAt18Mbps=wlanAPStatsTotBytesAt18Mbps, wlanStaTxPkts=wlanStaTxPkts, wlanStaPhyType=wlanStaPhyType, wlsxWlanAPFrameTypeStatsTable=wlsxWlanAPFrameTypeStatsTable, wlanAPStatsTotDABroadcastBytes=wlanAPStatsTotDABroadcastBytes, wlanAPIpsecMode=wlanAPIpsecMode, wlsxWlanAPStatsEntry=wlsxWlanAPStatsEntry, wlanStaTxPktsAt1Mbps=wlanStaTxPktsAt1Mbps, wlanAPRxBytes=wlanAPRxBytes, wlanStaTxBytesAt18Mbps=wlanStaTxBytesAt18Mbps, wlanStaRxDataBytes=wlanStaRxDataBytes, wlsxWlanRadioTable=wlsxWlanRadioTable, wlanStaFrameRetryRate=wlanStaFrameRetryRate, wlanStaRxPktsAt2Mbps=wlanStaRxPktsAt2Mbps, wlanStaRxPktsAt36Mbps=wlanStaRxPktsAt36Mbps, wlanStaTxDAUnicastBytes=wlanStaTxDAUnicastBytes, wlanAPRxPkts=wlanAPRxPkts, wlanStaTxMCastBytes=wlanStaTxMCastBytes, wlanESSIDEncryptionType=wlanESSIDEncryptionType, wlanAPRxDataPkts=wlanAPRxDataPkts, wlanStaTxPktsAt48Mbps=wlanStaTxPktsAt48Mbps, wlsxWlanAssociationInfoGroup=wlsxWlanAssociationInfoGroup, wlanAPStatsTotBytesAt1Mbps=wlanAPStatsTotBytesAt1Mbps, wlsxWlanESSIDTable=wlsxWlanESSIDTable, wlanStaTxBytesAt48Mbps=wlanStaTxBytesAt48Mbps, wlanStaTxDAUnicastPkts=wlanStaTxDAUnicastPkts, wlanAPChFrameNonUnicastRate=wlanAPChFrameNonUnicastRate, wlanAPTxDataBytes=wlanAPTxDataBytes, wlanStaRxPkts128To255=wlanStaRxPkts128To255, wlanStaTxPktsAt12Mbps=wlanStaTxPktsAt12Mbps, wlanStaRxPktsAt9Mbps=wlanStaRxPktsAt9Mbps, wlanAPBssidAPMacAddress=wlanAPBssidAPMacAddress, wlsxWlanESSIDVlanPoolEntry=wlsxWlanESSIDVlanPoolEntry, wlsxWlanAPFrameTypeStatsEntry=wlsxWlanAPFrameTypeStatsEntry, wlanStaRxPktsAt11Mbps=wlanStaRxPktsAt11Mbps, wlanAPBssidChannel=wlanAPBssidChannel, wlsxWlanStaPktSizeStatsEntry=wlsxWlanStaPktSizeStatsEntry, wlanAPMeshRole=wlanAPMeshRole, wlanStaTxBytesAt11Mbps=wlanStaTxBytesAt11Mbps, wlanStaTxPkts64To127=wlanStaTxPkts64To127, wlanStaAssocFailureReason=wlanStaAssocFailureReason, wlanAPRxDataBytes64=wlanAPRxDataBytes64, wlanAPGroup=wlanAPGroup, wlsxWlanAPRateStatsTable=wlsxWlanAPRateStatsTable, wlanStaPhyAddress=wlanStaPhyAddress, wlanAPAltitude=wlanAPAltitude, wlanAPChannelThroughput=wlanAPChannelThroughput, wlanAPStatus=wlanAPStatus, wlanStaApBssid=wlanStaApBssid, wlanAPChTxUtilization=wlanAPChTxUtilization, wlanStaTxMgmtBytes=wlanStaTxMgmtBytes, wlanStaDataPkts=wlanStaDataPkts, wlanStaRxBytesAt11Mbps=wlanStaRxBytesAt11Mbps, wlanStaAssocFailureApName=wlanStaAssocFailureApName, wlsxWlanConfigGroup=wlsxWlanConfigGroup, wlanAPStatsPkts512To1023=wlanAPStatsPkts512To1023, wlanStaRxBytesAt6Mbps=wlanStaRxBytesAt6Mbps, wlanStaTxDataPkts=wlanStaTxDataPkts, wlanStaRxBytesAt5Mbps=wlanStaRxBytesAt5Mbps, wlanStaRxBytes64=wlanStaRxBytes64, wlanAPStatsTotDataBytes=wlanAPStatsTotDataBytes, wlanAPChNumAPs=wlanAPChNumAPs, wlanAPChUtilization=wlanAPChUtilization, wlsxWlanStationEntry=wlsxWlanStationEntry, wlanStaFrameFragmentationRate=wlanStaFrameFragmentationRate, wlanAPStatsTotPktsAt12Mbps=wlanAPStatsTotPktsAt12Mbps, wlanAPStatsTotDAUnicastBytes=wlanAPStatsTotDAUnicastBytes, wlanAPLoc=wlanAPLoc, wlanStaTxPktsAt6Mbps=wlanStaTxPktsAt6Mbps, wlsxWlanAPStatsTable=wlsxWlanAPStatsTable, wlanStaRxPkts=wlanStaRxPkts, wlanAPStatsTotMgmtPkts=wlanAPStatsTotMgmtPkts, wlanStaTxPkts63Bytes=wlanStaTxPkts63Bytes, wlanAPLocation=wlanAPLocation)
