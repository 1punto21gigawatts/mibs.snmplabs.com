#
# PySNMP MIB module RAPIDCITY-VLAN-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/RAPIDCITY-VLAN-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:52:09 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, ModuleIdentity, Gauge32, Unsigned32, Bits, enterprises, iso, IpAddress, ObjectIdentity, MibIdentifier, Counter32, Integer32, Counter64, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "ModuleIdentity", "Gauge32", "Unsigned32", "Bits", "enterprises", "iso", "IpAddress", "ObjectIdentity", "MibIdentifier", "Counter32", "Integer32", "Counter64", "NotificationType")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
MacAddress, TruthValue, RowStatus, DisplayString = mibBuilder.importSymbols("SNMPv2-TC-v1", "MacAddress", "TruthValue", "RowStatus", "DisplayString")
rapidcity = MibIdentifier((1, 3, 6, 1, 4, 1, 2272))
rapidcityfoo = MibIdentifier((1, 3, 6, 1, 4, 1, 2272, 1))
rcVlan = MibIdentifier((1, 3, 6, 1, 4, 1, 2272, 1, 3))
rcVlanNumVlans = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcVlanNumVlans.setStatus('mandatory')
if mibBuilder.loadTexts: rcVlanNumVlans.setDescription('Number of VLANs currently defined')
rcVlanTable = MibTable((1, 3, 6, 1, 4, 1, 2272, 1, 3, 2), )
if mibBuilder.loadTexts: rcVlanTable.setStatus('mandatory')
if mibBuilder.loadTexts: rcVlanTable.setDescription('A list of Virtual LAN entries. VLAN 1 is the default.')
rcVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2272, 1, 3, 2, 1), ).setIndexNames((0, "RAPIDCITY-VLAN-MIB", "rcVlanId"))
if mibBuilder.loadTexts: rcVlanEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rcVlanEntry.setDescription('Entry containing information for a particular Virtual LAN.')
rcVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcVlanId.setStatus('mandatory')
if mibBuilder.loadTexts: rcVlanId.setDescription('A value that uniquely identifies the Virtual LAN associated with this entry. This value correspond to the lower 12 bits in the IEEE VLAN field.')
rcVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rcVlanName.setStatus('mandatory')
if mibBuilder.loadTexts: rcVlanName.setDescription('VLAN Name')
rcVlanColor = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rcVlanColor.setStatus('mandatory')
if mibBuilder.loadTexts: rcVlanColor.setDescription('Color assigned to this VLAN. The color is a proprietary number scheme used by the DM to associate an integer value with a particular color. The color is treated transparently in the device.')
rcVlanHighPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 2, 1, 4), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rcVlanHighPriority.setStatus('mandatory')
if mibBuilder.loadTexts: rcVlanHighPriority.setDescription('Control whether this VLAN should be given high priority.')
rcVlanRoutingEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 2, 1, 5), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rcVlanRoutingEnable.setStatus('mandatory')
if mibBuilder.loadTexts: rcVlanRoutingEnable.setDescription('Control whether routing should be enabled on this VLAN.')
rcVlanIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 2, 1, 6), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcVlanIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: rcVlanIfIndex.setDescription("If rcVlanRoutingEnable is set to TRUE, then this value will indicate the 'logical' ifIndex that is assigned to this VLAN. Otherwise, this value is meaningless and should be set to zero.")
rcVlanAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("flushMacFdb", 2), ("flushArp", 3), ("flushIp", 4), ("flushDynMemb", 5), ("all", 6))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rcVlanAction.setStatus('mandatory')
if mibBuilder.loadTexts: rcVlanAction.setDescription('Vlan related actions.')
rcVlanResult = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("inProgress", 2), ("success", 3), ("fail", 4))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcVlanResult.setStatus('mandatory')
if mibBuilder.loadTexts: rcVlanResult.setDescription('Result from the last Vlan action.')
rcVlanStgId = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rcVlanStgId.setStatus('mandatory')
if mibBuilder.loadTexts: rcVlanStgId.setDescription('Used to indicate the spanning tree group this VLAN is associated it. If this vlan is not be associated with any spanning tree group, this value should be set to zero(0).')
rcVlanType = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("byPort", 1), ("byIpSubnet", 2), ("byProtocolId", 3), ("bySrcMac", 4), ("byDstMcast", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rcVlanType.setStatus('mandatory')
if mibBuilder.loadTexts: rcVlanType.setDescription('Used to indicate the type of VLAN.')
rcVlanPortMembers = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 2, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rcVlanPortMembers.setStatus('mandatory')
if mibBuilder.loadTexts: rcVlanPortMembers.setDescription('A bitfield used to identify which ports in the system are members (static or dynamic) to this VLAN. The bitfield is 32 octets long representing ports 0 to 255 (inclusive).')
rcVlanPotentialMembers = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 2, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rcVlanPotentialMembers.setStatus('mandatory')
if mibBuilder.loadTexts: rcVlanPotentialMembers.setDescription('A bitfield used to identify which ports in the system are potential members to join this VLAN. The bitfield is 32 octets long representing ports 0 to 255 (inclusive).')
rcVlanStaticMembers = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 2, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rcVlanStaticMembers.setStatus('mandatory')
if mibBuilder.loadTexts: rcVlanStaticMembers.setDescription('A bitfield used to identify how ports are members of this VLAN. A one(1) value in a bit means the port is a static member of this VLAN. A zero(0) value in a bit means the port is a dynamic member of this VLAN. The bitfield is 32 octets long representing ports 0 to 255 (inclusive).')
rcVlanNotAllowToJoin = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 2, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rcVlanNotAllowToJoin.setStatus('mandatory')
if mibBuilder.loadTexts: rcVlanNotAllowToJoin.setDescription('A bitfield used to identify which ports are not allowed to join this VLAN. A one(1) value in a bit means the port is not allowed to join a VLAN. A zero(0) value in a bit means the port is allowed to join a VLAN. The bitfield is 32 octets long representing ports 0 to 255 (inclusive).')
rcVlanProtocolId = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("none", 0), ("ip", 1), ("ipx802dot3", 2), ("ipx802dot2", 3), ("ipxSnap", 4), ("ipxEthernet2", 5), ("appleTalk", 6), ("decLat", 7), ("decOther", 8), ("sna802dot2", 9), ("snaEthernet2", 10), ("netBios", 11), ("xns", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rcVlanProtocolId.setStatus('mandatory')
if mibBuilder.loadTexts: rcVlanProtocolId.setDescription("The protocol id of this VLAN. This value is meaningful only if 'rcVlanType' is equal to 'byProtocolId'.")
rcVlanSubnetAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 2, 1, 16), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rcVlanSubnetAddr.setStatus('mandatory')
if mibBuilder.loadTexts: rcVlanSubnetAddr.setDescription("The IP subnet address of this VLAN. This value is meaningful only if 'rcVlanType' is equal to 'byIpSubnet'.")
rcVlanSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 2, 1, 17), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rcVlanSubnetMask.setStatus('mandatory')
if mibBuilder.loadTexts: rcVlanSubnetMask.setDescription("The IP subnet mask of this VLAN. This value is meaningful only if 'rcVlanType' is equal to 'byIpSubnet'.")
rcVlanAgingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 2, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 1000000)).clone(600)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rcVlanAgingTime.setStatus('mandatory')
if mibBuilder.loadTexts: rcVlanAgingTime.setDescription('The timeout period in seconds for aging out dynamic members of policy-based VLANs.')
rcVlanMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 2, 1, 19), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcVlanMacAddress.setStatus('mandatory')
if mibBuilder.loadTexts: rcVlanMacAddress.setDescription('The MAC address assigned to this VLAN. This field is only relevant when the VLAN is configured for routing.')
rcVlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 3, 2, 1, 20), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rcVlanRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: rcVlanRowStatus.setDescription('Used to create/delete entries')
mibBuilder.exportSymbols("RAPIDCITY-VLAN-MIB", rcVlanIfIndex=rcVlanIfIndex, rcVlanAgingTime=rcVlanAgingTime, rcVlanSubnetAddr=rcVlanSubnetAddr, rcVlanName=rcVlanName, rapidcity=rapidcity, rcVlan=rcVlan, rcVlanAction=rcVlanAction, rcVlanHighPriority=rcVlanHighPriority, rcVlanEntry=rcVlanEntry, rcVlanProtocolId=rcVlanProtocolId, rcVlanNumVlans=rcVlanNumVlans, rcVlanRowStatus=rcVlanRowStatus, rcVlanNotAllowToJoin=rcVlanNotAllowToJoin, rcVlanPortMembers=rcVlanPortMembers, rcVlanPotentialMembers=rcVlanPotentialMembers, rcVlanStaticMembers=rcVlanStaticMembers, rcVlanResult=rcVlanResult, rcVlanStgId=rcVlanStgId, rcVlanId=rcVlanId, rapidcityfoo=rapidcityfoo, rcVlanRoutingEnable=rcVlanRoutingEnable, rcVlanTable=rcVlanTable, rcVlanSubnetMask=rcVlanSubnetMask, rcVlanType=rcVlanType, rcVlanMacAddress=rcVlanMacAddress, rcVlanColor=rcVlanColor)
