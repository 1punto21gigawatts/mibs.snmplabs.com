#
# PySNMP MIB module HH3C-RCR-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HH3C-RCR-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:29:21 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
hh3cCommon, = mibBuilder.importSymbols("HH3C-OID-MIB", "hh3cCommon")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter32, ModuleIdentity, Integer32, IpAddress, Bits, Unsigned32, Counter64, iso, TimeTicks, NotificationType, ObjectIdentity, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "ModuleIdentity", "Integer32", "IpAddress", "Bits", "Unsigned32", "Counter64", "iso", "TimeTicks", "NotificationType", "ObjectIdentity", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
hh3cRcr = ModuleIdentity((1, 3, 6, 1, 4, 1, 25506, 2, 48))
hh3cRcr.setRevisions(('2005-06-28 19:36',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hh3cRcr.setRevisionsDescriptions(('The modified revision of this MIB module. Rewrite the whole MIB.',))
if mibBuilder.loadTexts: hh3cRcr.setLastUpdated('200506281936Z')
if mibBuilder.loadTexts: hh3cRcr.setOrganization('Hangzhou H3C Tech. Co., Ltd.')
if mibBuilder.loadTexts: hh3cRcr.setContactInfo('Platform Team Hangzhou H3C Tech. Co., Ltd. Hai-Dian District Beijing P.R. China http://www.h3c.com Zip:100085 ')
if mibBuilder.loadTexts: hh3cRcr.setDescription("This MIB is applicable to router-devices. It's made for RCR (Resilient Controllable Routing). RCR provides an effective resolution which can dynamically auto-adjust outbound traffic to the optimal external interface by monitoring the performance and traffic load of each external interface. It provides the functions of intelligentized traffic load distribution and the optimal external interface selection. This can optimally utilize the external interfaces. Furthermore, RCR realized the function which can select the optimal external interface based on different classes of operation flow.")
hh3cRcrMR = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 48, 1))
hh3cRcrMRGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 48, 1, 1))
hh3cRcrMRAllMaxUsedBandRate = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 48, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cRcrMRAllMaxUsedBandRate.setStatus('current')
if mibBuilder.loadTexts: hh3cRcrMRAllMaxUsedBandRate.setDescription('The max used band rate of all external interfaces on member router-devices(MRs) which are controlled by RCR.')
hh3cRcrMRAllMinUsedBandRate = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 48, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cRcrMRAllMinUsedBandRate.setStatus('current')
if mibBuilder.loadTexts: hh3cRcrMRAllMinUsedBandRate.setDescription('The min used band rate of all external interfaces on MRs which are controlled by RCR.')
hh3cRcrMRListenTime = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 48, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1440))).setUnits('minute').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cRcrMRListenTime.setStatus('current')
if mibBuilder.loadTexts: hh3cRcrMRListenTime.setDescription('The persistent time of a probe on member router-device(MR) which is controlled by RCR.')
hh3cRcrMRStateTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 48, 1, 2), )
if mibBuilder.loadTexts: hh3cRcrMRStateTable.setStatus('current')
if mibBuilder.loadTexts: hh3cRcrMRStateTable.setDescription('This table contains state information of each MR which is controlled by RCR.')
hh3cRcrMRStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 48, 1, 2, 1), ).setIndexNames((0, "HH3C-RCR-MIB", "hh3cRcrMRName"))
if mibBuilder.loadTexts: hh3cRcrMRStateEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cRcrMRStateEntry.setDescription('Entry items')
hh3cRcrMRName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 48, 1, 2, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: hh3cRcrMRName.setStatus('current')
if mibBuilder.loadTexts: hh3cRcrMRName.setDescription('The name of MR which is controlled by RCR.')
hh3cRcrMRState = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 48, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("down", 1), ("up", 2), ("controlled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cRcrMRState.setStatus('current')
if mibBuilder.loadTexts: hh3cRcrMRState.setDescription('The state of MR where identified on the controller router-device(CR). down: The MR has been enabled but has not connected to the CR with TCP connection. up: The MR has already successfully connected to the CR but has not been ready for adjusting route. controlled: The MR has already passed the consultation with the CR and could be controlled by it.')
hh3cRcrMRAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 48, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("simple", 1), ("md5", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cRcrMRAuthType.setStatus('current')
if mibBuilder.loadTexts: hh3cRcrMRAuthType.setDescription('The authentication type of communication packet between CR and MR.')
hh3cRcrMRAuthPwd = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 48, 1, 2, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cRcrMRAuthPwd.setStatus('current')
if mibBuilder.loadTexts: hh3cRcrMRAuthPwd.setDescription('The authentication password of communication packet between CR and MR. Reading this object always results in an OCTET STRING of length zero; authentication may not be bypassed by reading the MIB object.')
hh3cRcrMROutIfStateTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 48, 1, 3), )
if mibBuilder.loadTexts: hh3cRcrMROutIfStateTable.setStatus('current')
if mibBuilder.loadTexts: hh3cRcrMROutIfStateTable.setDescription('This table contains the external interface states of each MR which is controlled by RCR.')
hh3cRcrMROutIfStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 48, 1, 3, 1), ).setIndexNames((0, "HH3C-RCR-MIB", "hh3cRcrMRName"), (0, "HH3C-RCR-MIB", "hh3cRcrMROutIfName"))
if mibBuilder.loadTexts: hh3cRcrMROutIfStateEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cRcrMROutIfStateEntry.setDescription('Entry items')
hh3cRcrMROutIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 48, 1, 3, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 48)))
if mibBuilder.loadTexts: hh3cRcrMROutIfName.setStatus('current')
if mibBuilder.loadTexts: hh3cRcrMROutIfName.setDescription('The name of external interface on each MR.')
hh3cRcrMROutIfState = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 48, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("down", 1), ("up", 2), ("notExist", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cRcrMROutIfState.setStatus('current')
if mibBuilder.loadTexts: hh3cRcrMROutIfState.setDescription('The state of external interface on each MR.')
hh3cRcrMROutIfMaxUsedBandRate = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 48, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cRcrMROutIfMaxUsedBandRate.setStatus('current')
if mibBuilder.loadTexts: hh3cRcrMROutIfMaxUsedBandRate.setDescription('The max spendable bandwidth rate on external interface.')
hh3cRcrMROutIfMinUsedBandRate = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 48, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cRcrMROutIfMinUsedBandRate.setStatus('current')
if mibBuilder.loadTexts: hh3cRcrMROutIfMinUsedBandRate.setDescription('The min spendable bandwidth rate on external interface.')
hh3cRcrMROutIfUsedBandRate = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 48, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cRcrMROutIfUsedBandRate.setStatus('current')
if mibBuilder.loadTexts: hh3cRcrMROutIfUsedBandRate.setDescription('The used bandwidth rate on external interface.')
hh3cRcrCR = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 48, 2))
hh3cRcrCRGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 48, 2, 1))
hh3cRcrCRState = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 48, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("down", 1), ("init", 2), ("active", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cRcrCRState.setStatus('current')
if mibBuilder.loadTexts: hh3cRcrCRState.setDescription('The state of the CR which is controlled by RCR. down: The CR has been enabled but has not started a TCP connection server. init: The CR has started a TCP connection server and has been waiting for MR connection, but has not been ready for adjusting route. active: The CR is ready for adjusting route.')
hh3cRcrCRPortNum = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 48, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cRcrCRPortNum.setStatus('current')
if mibBuilder.loadTexts: hh3cRcrCRPortNum.setDescription('The communication port number between CR and MR.')
hh3cRcrCRCtrlMode = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 48, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("control", 1), ("observe", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cRcrCRCtrlMode.setStatus('current')
if mibBuilder.loadTexts: hh3cRcrCRCtrlMode.setDescription('The observe mode or control mode is configured to operate in the CR. observe: The CR monitors prefixes and external interfaces based on default and user-defined policies and then reports the status of the network and the decisions that should be made but does not implement any changes. controlled: The CR monitors prefixes and external interfaces based on default and user-defined policies and then reports the status of the network and the decisions that should be made and implement any changes.')
hh3cRcrCRChooseMode = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 48, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("good", 1), ("best", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cRcrCRChooseMode.setStatus('current')
if mibBuilder.loadTexts: hh3cRcrCRChooseMode.setDescription('The algorithm used to choose an alternative external interface for a prefix. good: The first external interface that conforms to the policy is selected as the new external interface. best: Information is collected from all external interfaces and the best one is selected even though the best external interface may not be in-policy.')
hh3cRcrCRKeepaliveTime = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 48, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setUnits('second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cRcrCRKeepaliveTime.setStatus('current')
if mibBuilder.loadTexts: hh3cRcrCRKeepaliveTime.setDescription('The interval time of the transmission of the keepalive communication packet between CR and MR.')
hh3cRcrCRPolicyMode = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 48, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("prefix", 1), ("operation", 2), ("study", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cRcrCRPolicyMode.setStatus('current')
if mibBuilder.loadTexts: hh3cRcrCRPolicyMode.setDescription('The chosen policy mode which decides to change what prefix. prefix: An RCR policy is designed to select IP prefixes or to select RCR learn policies using a match clause and then to apply RCR policy configurations using a set clause. operation: To deside to adjusted prefixes based on operation which user configured. study: To learn and optimize prefixes based on the highest throughput or the highest delay.')
hh3cRcrCRStudyMode = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 48, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("maxThoughout", 1), ("maxDelay", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cRcrCRStudyMode.setStatus('current')
if mibBuilder.loadTexts: hh3cRcrCRStudyMode.setDescription("The mode of collecting prefix in studying configuration mode. It's to collect either the prefix of max thoughtout or the prefix of max delay time. It doesn't have a value when CR isn't in studying configuration mode.")
hh3cRcrCRStudyIpPrefixNum = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 48, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cRcrCRStudyIpPrefixNum.setStatus('current')
if mibBuilder.loadTexts: hh3cRcrCRStudyIpPrefixNum.setDescription('The max number of collecting prefix in studying configuration mode.')
hh3cRcrCRIpPrefixLen = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 48, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32)).clone(24)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cRcrCRIpPrefixLen.setStatus('current')
if mibBuilder.loadTexts: hh3cRcrCRIpPrefixLen.setDescription('The mask length of collecting prefix in configuration mode.')
hh3cRcrCRRcrPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 48, 2, 2), )
if mibBuilder.loadTexts: hh3cRcrCRRcrPolicyTable.setStatus('current')
if mibBuilder.loadTexts: hh3cRcrCRRcrPolicyTable.setDescription('This table contains objects to get statistic information of interfaces on a device.')
hh3cRcrCRRcrPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 48, 2, 2, 1), ).setIndexNames((0, "HH3C-RCR-MIB", "hh3cRcrCRRcrPlyID"))
if mibBuilder.loadTexts: hh3cRcrCRRcrPolicyEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cRcrCRRcrPolicyEntry.setDescription('Entry items')
hh3cRcrCRRcrPlyID = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 48, 2, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: hh3cRcrCRRcrPlyID.setStatus('current')
if mibBuilder.loadTexts: hh3cRcrCRRcrPlyID.setDescription('The ID of RCR policy which the user has configured.')
hh3cRcrCRRcrPlyMatchIPListName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 48, 2, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 19))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cRcrCRRcrPlyMatchIPListName.setStatus('current')
if mibBuilder.loadTexts: hh3cRcrCRRcrPlyMatchIPListName.setDescription('The matched IP prefix list name of RCR policy which the user has configured.')
hh3cRcrCRRcrPlyMatchStudyEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 48, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cRcrCRRcrPlyMatchStudyEnable.setStatus('current')
if mibBuilder.loadTexts: hh3cRcrCRRcrPlyMatchStudyEnable.setDescription('Whether the RCR policy which the user has configured is matched for studying prefix mode.')
hh3cRcrCRRcrPlyMatchOperPlyName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 48, 2, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 19))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cRcrCRRcrPlyMatchOperPlyName.setStatus('current')
if mibBuilder.loadTexts: hh3cRcrCRRcrPlyMatchOperPlyName.setDescription('The matched operation policy name of RCR policy which the user has configured.')
hh3cRcrCRRcrAclNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 48, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3000, 3999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cRcrCRRcrAclNumber.setStatus('current')
if mibBuilder.loadTexts: hh3cRcrCRRcrAclNumber.setDescription('The matched acl number of RCR operation policy which the user has configured.')
hh3cRcrCRRcrPlyDelayTime = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 48, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000))).setUnits('millisecond').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cRcrCRRcrPlyDelayTime.setStatus('current')
if mibBuilder.loadTexts: hh3cRcrCRRcrPlyDelayTime.setDescription('The absolute maximum delay time. The range of values that can be configured is from 1 to 10000.')
hh3cRcrCRRcrPlyLossRate = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 48, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cRcrCRRcrPlyLossRate.setStatus('current')
if mibBuilder.loadTexts: hh3cRcrCRRcrPlyLossRate.setDescription('The packet loss percent of prefix which the CR concerns.')
hh3cRcrCRMatPrefixPerfTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 48, 2, 3), )
if mibBuilder.loadTexts: hh3cRcrCRMatPrefixPerfTable.setStatus('current')
if mibBuilder.loadTexts: hh3cRcrCRMatPrefixPerfTable.setDescription('This table contains the matched prefix performance information.')
hh3cRcrCRMatPrefixPerfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 48, 2, 3, 1), ).setIndexNames((0, "HH3C-RCR-MIB", "hh3cRcrCRMatPrefPerfAddrType"), (0, "HH3C-RCR-MIB", "hh3cRcrCRMatPrefPerfDestIPAddr"), (0, "HH3C-RCR-MIB", "hh3cRcrCRMatPrefPerfDestMaskLen"))
if mibBuilder.loadTexts: hh3cRcrCRMatPrefixPerfEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cRcrCRMatPrefixPerfEntry.setDescription('Entry items')
hh3cRcrCRMatPrefPerfAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 48, 2, 3, 1, 1), InetAddressType())
if mibBuilder.loadTexts: hh3cRcrCRMatPrefPerfAddrType.setStatus('current')
if mibBuilder.loadTexts: hh3cRcrCRMatPrefPerfAddrType.setDescription('The destination IP addresses type of matched prefix which the CR wants (IPv4 or IPv6).')
hh3cRcrCRMatPrefPerfDestIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 48, 2, 3, 1, 2), InetAddress())
if mibBuilder.loadTexts: hh3cRcrCRMatPrefPerfDestIPAddr.setStatus('current')
if mibBuilder.loadTexts: hh3cRcrCRMatPrefPerfDestIPAddr.setDescription('The destination IP address of matched prefix which the CR wants.')
hh3cRcrCRMatPrefPerfDestMaskLen = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 48, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32)))
if mibBuilder.loadTexts: hh3cRcrCRMatPrefPerfDestMaskLen.setStatus('current')
if mibBuilder.loadTexts: hh3cRcrCRMatPrefPerfDestMaskLen.setDescription('The destination IP address mask length of matched prefix which the CR wants.')
hh3cRcrCRMatPrefPerfDelayTime = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 48, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000))).setUnits('second').setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cRcrCRMatPrefPerfDelayTime.setStatus('current')
if mibBuilder.loadTexts: hh3cRcrCRMatPrefPerfDelayTime.setDescription('The absolute maximum delay time of prefix which the CR has configured.')
hh3cRcrCRMatPrefPerfLossRate = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 48, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cRcrCRMatPrefPerfLossRate.setStatus('current')
if mibBuilder.loadTexts: hh3cRcrCRMatPrefPerfLossRate.setDescription('The packet loss percent of prefix which the CR has configured.')
hh3cRcrCRMatPrefPerfThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 48, 2, 3, 1, 6), Integer32()).setUnits('kb').setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cRcrCRMatPrefPerfThroughput.setStatus('current')
if mibBuilder.loadTexts: hh3cRcrCRMatPrefPerfThroughput.setDescription('The bandwidth of prefix which the CR has monitored.')
hh3cRcrCRAdjustPrefixTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 48, 2, 4), )
if mibBuilder.loadTexts: hh3cRcrCRAdjustPrefixTable.setStatus('current')
if mibBuilder.loadTexts: hh3cRcrCRAdjustPrefixTable.setDescription('This table contains objects to get adjusted prefix information which the CR controlled.')
hh3cRcrCRAdjustPrefixEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 48, 2, 4, 1), ).setIndexNames((0, "HH3C-RCR-MIB", "hh3cRcrCRAdjuPrefDestAddrType"), (0, "HH3C-RCR-MIB", "hh3cRcrCRAdjuPrefDestAddr"), (0, "HH3C-RCR-MIB", "hh3cRcrCRAdjuPrefMaskLen"), (0, "HH3C-RCR-MIB", "hh3cRcrCRAdjuPrefPreMRName"), (0, "HH3C-RCR-MIB", "hh3cRcrCRAdjuPrefPreOutIfName"))
if mibBuilder.loadTexts: hh3cRcrCRAdjustPrefixEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cRcrCRAdjustPrefixEntry.setDescription('Entry items')
hh3cRcrCRAdjuPrefDestAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 48, 2, 4, 1, 1), InetAddressType())
if mibBuilder.loadTexts: hh3cRcrCRAdjuPrefDestAddrType.setStatus('current')
if mibBuilder.loadTexts: hh3cRcrCRAdjuPrefDestAddrType.setDescription('The IP address type of the adjusted prefix which CR controlled (IPv4 or IPv6).')
hh3cRcrCRAdjuPrefDestAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 48, 2, 4, 1, 2), InetAddress())
if mibBuilder.loadTexts: hh3cRcrCRAdjuPrefDestAddr.setStatus('current')
if mibBuilder.loadTexts: hh3cRcrCRAdjuPrefDestAddr.setDescription('The IP address of the adjusted prefix which CR controlled.')
hh3cRcrCRAdjuPrefMaskLen = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 48, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32)))
if mibBuilder.loadTexts: hh3cRcrCRAdjuPrefMaskLen.setStatus('current')
if mibBuilder.loadTexts: hh3cRcrCRAdjuPrefMaskLen.setDescription('The IP address mask length of the adjusted prefix which CR controlled.')
hh3cRcrCRAdjuPrefPreMRName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 48, 2, 4, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: hh3cRcrCRAdjuPrefPreMRName.setStatus('current')
if mibBuilder.loadTexts: hh3cRcrCRAdjuPrefPreMRName.setDescription('The name of the MR which the previous outbound traffic flows through.')
hh3cRcrCRAdjuPrefPreOutIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 48, 2, 4, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 48)))
if mibBuilder.loadTexts: hh3cRcrCRAdjuPrefPreOutIfName.setStatus('current')
if mibBuilder.loadTexts: hh3cRcrCRAdjuPrefPreOutIfName.setDescription('The name of the external interface on the MR which the previous outbound traffic flows through.')
hh3cRcrCRAdjuPrefCurMRName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 48, 2, 4, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cRcrCRAdjuPrefCurMRName.setStatus('current')
if mibBuilder.loadTexts: hh3cRcrCRAdjuPrefCurMRName.setDescription('The name of the MR which the current outbound traffic flows through.')
hh3cRcrCRAdjuPrefCurOutIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 48, 2, 4, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cRcrCRAdjuPrefCurOutIfName.setStatus('current')
if mibBuilder.loadTexts: hh3cRcrCRAdjuPrefCurOutIfName.setDescription('The name of the external interface on the MR which the current outbound traffic flows through.')
hh3cRcrCRAdjuPrefPersistTime = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 48, 2, 4, 1, 8), Integer32()).setUnits('second').setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cRcrCRAdjuPrefPersistTime.setStatus('current')
if mibBuilder.loadTexts: hh3cRcrCRAdjuPrefPersistTime.setDescription('The persisting time from the time which the adjusted outbound traffic has been adjusted by CR to now.')
hh3cRcrCRAdjuPrefAgeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 48, 2, 4, 1, 9), Integer32()).setUnits('second').setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cRcrCRAdjuPrefAgeTime.setStatus('current')
if mibBuilder.loadTexts: hh3cRcrCRAdjuPrefAgeTime.setDescription('The time which the adjusted prefix remains.')
mibBuilder.exportSymbols("HH3C-RCR-MIB", hh3cRcrCRAdjuPrefDestAddr=hh3cRcrCRAdjuPrefDestAddr, hh3cRcrCRMatPrefPerfDestIPAddr=hh3cRcrCRMatPrefPerfDestIPAddr, hh3cRcrCRMatPrefPerfDestMaskLen=hh3cRcrCRMatPrefPerfDestMaskLen, hh3cRcrMR=hh3cRcrMR, hh3cRcrCRStudyMode=hh3cRcrCRStudyMode, hh3cRcrMRName=hh3cRcrMRName, hh3cRcrCRRcrPlyID=hh3cRcrCRRcrPlyID, hh3cRcrCRRcrPlyMatchOperPlyName=hh3cRcrCRRcrPlyMatchOperPlyName, hh3cRcrCRMatPrefixPerfEntry=hh3cRcrCRMatPrefixPerfEntry, hh3cRcrCRAdjuPrefPreOutIfName=hh3cRcrCRAdjuPrefPreOutIfName, hh3cRcrMRGroup=hh3cRcrMRGroup, hh3cRcrMRStateEntry=hh3cRcrMRStateEntry, hh3cRcrCR=hh3cRcrCR, hh3cRcrCRPortNum=hh3cRcrCRPortNum, hh3cRcrCRRcrPlyLossRate=hh3cRcrCRRcrPlyLossRate, hh3cRcrMROutIfUsedBandRate=hh3cRcrMROutIfUsedBandRate, hh3cRcr=hh3cRcr, hh3cRcrMRAuthType=hh3cRcrMRAuthType, hh3cRcrMRAuthPwd=hh3cRcrMRAuthPwd, hh3cRcrCRRcrAclNumber=hh3cRcrCRRcrAclNumber, hh3cRcrCRChooseMode=hh3cRcrCRChooseMode, hh3cRcrCRAdjustPrefixTable=hh3cRcrCRAdjustPrefixTable, hh3cRcrMROutIfStateEntry=hh3cRcrMROutIfStateEntry, hh3cRcrCRMatPrefPerfThroughput=hh3cRcrCRMatPrefPerfThroughput, hh3cRcrCRGroup=hh3cRcrCRGroup, hh3cRcrCRAdjuPrefPreMRName=hh3cRcrCRAdjuPrefPreMRName, hh3cRcrCRAdjustPrefixEntry=hh3cRcrCRAdjustPrefixEntry, hh3cRcrCRMatPrefPerfAddrType=hh3cRcrCRMatPrefPerfAddrType, hh3cRcrMRStateTable=hh3cRcrMRStateTable, hh3cRcrCRAdjuPrefCurOutIfName=hh3cRcrCRAdjuPrefCurOutIfName, hh3cRcrCRAdjuPrefAgeTime=hh3cRcrCRAdjuPrefAgeTime, hh3cRcrCRMatPrefixPerfTable=hh3cRcrCRMatPrefixPerfTable, hh3cRcrMROutIfMaxUsedBandRate=hh3cRcrMROutIfMaxUsedBandRate, hh3cRcrMROutIfStateTable=hh3cRcrMROutIfStateTable, hh3cRcrMRAllMaxUsedBandRate=hh3cRcrMRAllMaxUsedBandRate, hh3cRcrCRCtrlMode=hh3cRcrCRCtrlMode, hh3cRcrCRRcrPlyMatchStudyEnable=hh3cRcrCRRcrPlyMatchStudyEnable, hh3cRcrMRState=hh3cRcrMRState, hh3cRcrCRKeepaliveTime=hh3cRcrCRKeepaliveTime, hh3cRcrMROutIfState=hh3cRcrMROutIfState, hh3cRcrMROutIfMinUsedBandRate=hh3cRcrMROutIfMinUsedBandRate, hh3cRcrCRIpPrefixLen=hh3cRcrCRIpPrefixLen, hh3cRcrCRMatPrefPerfLossRate=hh3cRcrCRMatPrefPerfLossRate, hh3cRcrMRAllMinUsedBandRate=hh3cRcrMRAllMinUsedBandRate, hh3cRcrMRListenTime=hh3cRcrMRListenTime, hh3cRcrCRStudyIpPrefixNum=hh3cRcrCRStudyIpPrefixNum, hh3cRcrCRRcrPolicyEntry=hh3cRcrCRRcrPolicyEntry, hh3cRcrCRRcrPlyMatchIPListName=hh3cRcrCRRcrPlyMatchIPListName, hh3cRcrCRAdjuPrefDestAddrType=hh3cRcrCRAdjuPrefDestAddrType, hh3cRcrCRMatPrefPerfDelayTime=hh3cRcrCRMatPrefPerfDelayTime, hh3cRcrMROutIfName=hh3cRcrMROutIfName, hh3cRcrCRState=hh3cRcrCRState, hh3cRcrCRRcrPolicyTable=hh3cRcrCRRcrPolicyTable, hh3cRcrCRAdjuPrefMaskLen=hh3cRcrCRAdjuPrefMaskLen, hh3cRcrCRAdjuPrefCurMRName=hh3cRcrCRAdjuPrefCurMRName, hh3cRcrCRRcrPlyDelayTime=hh3cRcrCRRcrPlyDelayTime, PYSNMP_MODULE_ID=hh3cRcr, hh3cRcrCRPolicyMode=hh3cRcrCRPolicyMode, hh3cRcrCRAdjuPrefPersistTime=hh3cRcrCRAdjuPrefPersistTime)
