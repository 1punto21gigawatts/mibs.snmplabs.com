#
# PySNMP MIB module ALCATEL-IND1-PCAM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ALCATEL-IND1-PCAM-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:18:51 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
hardentIND1Pcam, = mibBuilder.importSymbols("ALCATEL-IND1-BASE", "hardentIND1Pcam")
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
Gauge32, IpAddress, ModuleIdentity, iso, NotificationType, Counter32, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, Integer32, Counter64, MibIdentifier, ObjectIdentity, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "IpAddress", "ModuleIdentity", "iso", "NotificationType", "Counter32", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "Integer32", "Counter64", "MibIdentifier", "ObjectIdentity", "TimeTicks")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
alcatelIND1PCAMMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 4, 1))
alcatelIND1PCAMMIB.setRevisions(('2007-04-03 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: alcatelIND1PCAMMIB.setRevisionsDescriptions(('The latest version of this MIB Module.',))
if mibBuilder.loadTexts: alcatelIND1PCAMMIB.setLastUpdated('200704030000Z')
if mibBuilder.loadTexts: alcatelIND1PCAMMIB.setOrganization('Alcatel-Lucent')
if mibBuilder.loadTexts: alcatelIND1PCAMMIB.setContactInfo('Please consult with Customer Service to ensure the most appropriate version of this document is used with the products in question: Alcatel-Lucent, Enterprise Solutions Division (Formerly Alcatel Internetworking, Incorporated) 26801 West Agoura Road Agoura Hills, CA 91301-5122 United States Of America Telephone: North America +1 800 995 2696 Latin America +1 877 919 9526 Europe +31 23 556 0100 Asia +65 394 7933 All Other +1 818 878 4507 Electronic Mail: support@ind.alcatel.com World Wide Web: http://alcatel-lucent.com/wps/portal/enterprise File Transfer Protocol: ftp://ftp.ind.alcatel.com/pub/products/mibs')
if mibBuilder.loadTexts: alcatelIND1PCAMMIB.setDescription('This module describes an authoritative enterprise-specific Simple Network Management Protocol (SNMP) Management Information Base (MIB): This MIB contains management information for Coronado Layer 3 Hardware Routing Engine (HRE) management. The right to make changes in specification and other information contained in this document without prior notice is reserved. No liability shall be assumed for any incidental, indirect, special, or consequential damages whatsoever arising from or related to this document or the information contained herein. Vendors, end-users, and other interested parties are granted non-exclusive license to use this specification in connection with management of the products for which it is intended to be used. Copyright (C) 1995-2007 Alcatel-Lucent ALL RIGHTS RESERVED WORLDWIDE')
alcatelIND1PCAMMIBObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 4, 1, 1))
if mibBuilder.loadTexts: alcatelIND1PCAMMIBObjects.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1PCAMMIBObjects.setDescription('Branch for Coronado Layer 3 HRE Managed Objects.')
alcatelIND1PCAMMIBConformance = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 4, 1, 2))
if mibBuilder.loadTexts: alcatelIND1PCAMMIBConformance.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1PCAMMIBConformance.setDescription('Branch for Coronado Layer 3 HRE Conformance Information.')
alcatelIND1PCAMMIBGroups = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 4, 1, 2, 1))
if mibBuilder.loadTexts: alcatelIND1PCAMMIBGroups.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1PCAMMIBGroups.setDescription('Branch for Coronado Layer 3 HRE Units of Conformance.')
alcatelIND1PCAMMIBCompliances = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 4, 1, 2, 2))
if mibBuilder.loadTexts: alcatelIND1PCAMMIBCompliances.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1PCAMMIBCompliances.setDescription('Branch for Coronado Layer 3 HRE Compliance Statements.')
class CoroL3HashFunction(TextualConvention, OctetString):
    description = 'An HRE hash function maps a value to be hashed to a hash index by selecting a sub-set of the bits in the hashed value and concatenating them together. This field describes a hash function by identifying in a bit mask those bit positions in the value to be hashed that should be selected and concatenated to form the hash index.'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(10, 10)
    fixedLength = 10

alaCoroL3HrePerModeTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 4, 1, 1, 1), )
if mibBuilder.loadTexts: alaCoroL3HrePerModeTable.setStatus('current')
if mibBuilder.loadTexts: alaCoroL3HrePerModeTable.setDescription('The statistics and configurable data for a Coronado L3 HRE mode.')
alaCoroL3HrePerModeTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 4, 1, 1, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-PCAM-MIB", "alaCoroL3HrePerModeSlotNumber"), (0, "ALCATEL-IND1-PCAM-MIB", "alaCoroL3HrePerModeSliceNumber"), (0, "ALCATEL-IND1-PCAM-MIB", "alaCoroL3HrePerModeModeNumber"))
if mibBuilder.loadTexts: alaCoroL3HrePerModeTableEntry.setStatus('current')
if mibBuilder.loadTexts: alaCoroL3HrePerModeTableEntry.setDescription('Each entry corresponds to a single mode for a single Coronado.')
alaCoroL3HrePerModeSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 4, 1, 1, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaCoroL3HrePerModeSlotNumber.setStatus('current')
if mibBuilder.loadTexts: alaCoroL3HrePerModeSlotNumber.setDescription('The slot number in which the Coronado resides. Valid range will vary depending on hardware configuration.')
alaCoroL3HrePerModeSliceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 4, 1, 1, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaCoroL3HrePerModeSliceNumber.setStatus('current')
if mibBuilder.loadTexts: alaCoroL3HrePerModeSliceNumber.setDescription('The slice number in which the Coronado resides. Valid range will vary depending on hardware configuration.')
alaCoroL3HrePerModeModeNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 4, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaCoroL3HrePerModeModeNumber.setStatus('current')
if mibBuilder.loadTexts: alaCoroL3HrePerModeModeNumber.setDescription('Identifier for L3 HRE mode. Note that mode 3 refers to data used for modes 3 through 5 since they share hash function and memory space.')
alaCoroL3HreModeHashTableSize = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 4, 1, 1, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaCoroL3HreModeHashTableSize.setStatus('current')
if mibBuilder.loadTexts: alaCoroL3HreModeHashTableSize.setDescription('Number of hash buckets to be used for this mode. This must be 0 or a power of 2.')
alaCoroL3HreModeHashEntriesInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 4, 1, 1, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaCoroL3HreModeHashEntriesInUse.setStatus('current')
if mibBuilder.loadTexts: alaCoroL3HreModeHashEntriesInUse.setDescription('Number of hash buckets currently in use for this mode.')
alaCoroL3HreModeCollEntriesInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 4, 1, 1, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaCoroL3HreModeCollEntriesInUse.setStatus('current')
if mibBuilder.loadTexts: alaCoroL3HreModeCollEntriesInUse.setDescription('Number of collision entries in use by this mode.')
alaCoroL3HreModeCurrentHashFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 4, 1, 1, 1, 1, 7), CoroL3HashFunction()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaCoroL3HreModeCurrentHashFunction.setStatus('current')
if mibBuilder.loadTexts: alaCoroL3HreModeCurrentHashFunction.setDescription('Current hash function in use by this mode.')
alaCoroL3HreMaxCollChainLen = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 4, 1, 1, 1, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaCoroL3HreMaxCollChainLen.setStatus('current')
if mibBuilder.loadTexts: alaCoroL3HreMaxCollChainLen.setDescription('Maximum length for the collision chains in this mode.')
alaCoroL3HreAvgCollChainLen = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 4, 1, 1, 1, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaCoroL3HreAvgCollChainLen.setStatus('current')
if mibBuilder.loadTexts: alaCoroL3HreAvgCollChainLen.setDescription('Average length for the collision chains in this mode.')
alaCoroL3HrePerCoronadoStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 4, 1, 1, 2), )
if mibBuilder.loadTexts: alaCoroL3HrePerCoronadoStatsTable.setStatus('current')
if mibBuilder.loadTexts: alaCoroL3HrePerCoronadoStatsTable.setDescription('The statistics for a Coronado L3 HRE.')
alaCoroL3HrePerCoronadoStatsTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 4, 1, 1, 2, 1), ).setIndexNames((0, "ALCATEL-IND1-PCAM-MIB", "alaCoroL3HreSlotNumber"), (0, "ALCATEL-IND1-PCAM-MIB", "alaCoroL3HreSliceNumber"))
if mibBuilder.loadTexts: alaCoroL3HrePerCoronadoStatsTableEntry.setStatus('current')
if mibBuilder.loadTexts: alaCoroL3HrePerCoronadoStatsTableEntry.setDescription('Each entry corresponds to a single Coronado.')
alaCoroL3HreSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 4, 1, 1, 2, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaCoroL3HreSlotNumber.setStatus('current')
if mibBuilder.loadTexts: alaCoroL3HreSlotNumber.setDescription('The slot number in which the Coronado resides. Valid range will vary depending on hardware configuration.')
alaCoroL3HreSliceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 4, 1, 1, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaCoroL3HreSliceNumber.setStatus('current')
if mibBuilder.loadTexts: alaCoroL3HreSliceNumber.setDescription('The slice number in which the Coronado resides. Valid range will vary depending on hardware configuration.')
alaCoroL3HreRouteCacheEntriesTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 4, 1, 1, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaCoroL3HreRouteCacheEntriesTotal.setStatus('current')
if mibBuilder.loadTexts: alaCoroL3HreRouteCacheEntriesTotal.setDescription('Total number of configured route cache entries.')
alaCoroL3HreRouteCacheEntriesInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 4, 1, 1, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaCoroL3HreRouteCacheEntriesInUse.setStatus('current')
if mibBuilder.loadTexts: alaCoroL3HreRouteCacheEntriesInUse.setDescription('Number of route cache entries currently in-use.')
alaCoroL3HreIpPacketsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 4, 1, 1, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaCoroL3HreIpPacketsReceived.setStatus('current')
if mibBuilder.loadTexts: alaCoroL3HreIpPacketsReceived.setDescription('Number of IP packets received.')
alaCoroL3HreIpBytesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 4, 1, 1, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaCoroL3HreIpBytesReceived.setStatus('current')
if mibBuilder.loadTexts: alaCoroL3HreIpBytesReceived.setDescription('Number of IP bytes received.')
alaCoroL3HreIpPacketsForwarded = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 4, 1, 1, 2, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaCoroL3HreIpPacketsForwarded.setStatus('current')
if mibBuilder.loadTexts: alaCoroL3HreIpPacketsForwarded.setDescription('Number of IP packets routed.')
alaCoroL3HreIpBytesForwarded = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 4, 1, 1, 2, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaCoroL3HreIpBytesForwarded.setStatus('current')
if mibBuilder.loadTexts: alaCoroL3HreIpBytesForwarded.setDescription('Number of IP bytes routed.')
alaCoroL3HreIpPacketsDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 4, 1, 1, 2, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaCoroL3HreIpPacketsDiscarded.setStatus('current')
if mibBuilder.loadTexts: alaCoroL3HreIpPacketsDiscarded.setDescription('Number of IP packets discarded.')
alaCoroL3HreIpBytesDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 4, 1, 1, 2, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaCoroL3HreIpBytesDiscarded.setStatus('current')
if mibBuilder.loadTexts: alaCoroL3HreIpBytesDiscarded.setDescription('Number of IP bytes discarded.')
alaCoroL3HreIpPacketsFragmented = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 4, 1, 1, 2, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaCoroL3HreIpPacketsFragmented.setStatus('current')
if mibBuilder.loadTexts: alaCoroL3HreIpPacketsFragmented.setDescription('Number of IP packets fragmented.')
alaCoroL3HreIpPacketsFragsGenerated = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 4, 1, 1, 2, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaCoroL3HreIpPacketsFragsGenerated.setStatus('current')
if mibBuilder.loadTexts: alaCoroL3HreIpPacketsFragsGenerated.setDescription('Number of IP packet fragments generated.')
alaCoroL3HreIpPacketsFailedToFrag = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 4, 1, 1, 2, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaCoroL3HreIpPacketsFailedToFrag.setStatus('current')
if mibBuilder.loadTexts: alaCoroL3HreIpPacketsFailedToFrag.setDescription('Number of IP packets that could not be fragmented because IP flag precluded it.')
alaCoroL3HreIpxPacketsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 4, 1, 1, 2, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaCoroL3HreIpxPacketsReceived.setStatus('current')
if mibBuilder.loadTexts: alaCoroL3HreIpxPacketsReceived.setDescription('Number of IPX packets received.')
alaCoroL3HreIpxBytesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 4, 1, 1, 2, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaCoroL3HreIpxBytesReceived.setStatus('current')
if mibBuilder.loadTexts: alaCoroL3HreIpxBytesReceived.setDescription('Number of IPX bytes received.')
alaCoroL3HreIpxPacketsForwarded = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 4, 1, 1, 2, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaCoroL3HreIpxPacketsForwarded.setStatus('current')
if mibBuilder.loadTexts: alaCoroL3HreIpxPacketsForwarded.setDescription('Number of IPX packets routed.')
alaCoroL3HreIpxBytesForwarded = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 4, 1, 1, 2, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaCoroL3HreIpxBytesForwarded.setStatus('current')
if mibBuilder.loadTexts: alaCoroL3HreIpxBytesForwarded.setDescription('Number of IPX bytes routed.')
alaCoroL3HreIpxPacketsDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 4, 1, 1, 2, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaCoroL3HreIpxPacketsDiscarded.setStatus('current')
if mibBuilder.loadTexts: alaCoroL3HreIpxPacketsDiscarded.setDescription('Number of IPX packets discarded.')
alaCoroL3HreIpxBytesDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 4, 1, 1, 2, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaCoroL3HreIpxBytesDiscarded.setStatus('current')
if mibBuilder.loadTexts: alaCoroL3HreIpxBytesDiscarded.setDescription('Number of IPX bytes discarded.')
alaCoroL3HreUpdateChanges = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("apply", 0), ("clear", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaCoroL3HreUpdateChanges.setStatus('current')
if mibBuilder.loadTexts: alaCoroL3HreUpdateChanges.setDescription('Updating this object causes the change list to either be applied cleared.')
alaCoroL3HreChangeTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 4, 1, 1, 4), )
if mibBuilder.loadTexts: alaCoroL3HreChangeTable.setStatus('current')
if mibBuilder.loadTexts: alaCoroL3HreChangeTable.setDescription('The statistics and configurable data for a Coronado L3 HRE mode.')
alaCoroL3HreChangeTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 4, 1, 1, 4, 1), ).setIndexNames((0, "ALCATEL-IND1-PCAM-MIB", "alaCoroL3HreChangeSlotNumber"), (0, "ALCATEL-IND1-PCAM-MIB", "alaCoroL3HreChangeSliceNumber"), (0, "ALCATEL-IND1-PCAM-MIB", "alaCoroL3HreChangeModeNumber"))
if mibBuilder.loadTexts: alaCoroL3HreChangeTableEntry.setStatus('current')
if mibBuilder.loadTexts: alaCoroL3HreChangeTableEntry.setDescription('Each entry corresponds to a single mode for a single Coronado.')
alaCoroL3HreChangeSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 4, 1, 1, 4, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaCoroL3HreChangeSlotNumber.setStatus('current')
if mibBuilder.loadTexts: alaCoroL3HreChangeSlotNumber.setDescription('The slot number in which the Coronado resides. Valid range will vary depending on hardware configuration.')
alaCoroL3HreChangeSliceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 4, 1, 1, 4, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaCoroL3HreChangeSliceNumber.setStatus('current')
if mibBuilder.loadTexts: alaCoroL3HreChangeSliceNumber.setDescription('The slice number in which the Coronado resides. Valid range will vary depending on hardware configuration.')
alaCoroL3HreChangeModeNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 4, 1, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaCoroL3HreChangeModeNumber.setStatus('current')
if mibBuilder.loadTexts: alaCoroL3HreChangeModeNumber.setDescription('Identifier for L3 HRE mode. Note that mode 3 refers to data used for modes 3 through 5 since they share hash function and memory space.')
alaCoroL3HreChangeHashTableSize = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 4, 1, 1, 4, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaCoroL3HreChangeHashTableSize.setStatus('current')
if mibBuilder.loadTexts: alaCoroL3HreChangeHashTableSize.setDescription('Number of hash buckets to be used for this mode. This must be 0 or a power of 2.')
alaCoroL3HreChangeHashFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 4, 1, 1, 4, 1, 5), CoroL3HashFunction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaCoroL3HreChangeHashFunction.setStatus('current')
if mibBuilder.loadTexts: alaCoroL3HreChangeHashFunction.setDescription('Hash function to be used for this mode.')
alaCoroL3HreChangeClear = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 4, 1, 1, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("clear", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaCoroL3HreChangeClear.setStatus('current')
if mibBuilder.loadTexts: alaCoroL3HreChangeClear.setDescription('Clears changes for the specified mode.')
alaCoroL3HrePerModeObjects = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 4, 1, 2, 1, 1)).setObjects(("ALCATEL-IND1-PCAM-MIB", "alaCoroL3HrePerModeSlotNumber"), ("ALCATEL-IND1-PCAM-MIB", "alaCoroL3HrePerModeSliceNumber"), ("ALCATEL-IND1-PCAM-MIB", "alaCoroL3HrePerModeModeNumber"), ("ALCATEL-IND1-PCAM-MIB", "alaCoroL3HreModeHashTableSize"), ("ALCATEL-IND1-PCAM-MIB", "alaCoroL3HreModeHashEntriesInUse"), ("ALCATEL-IND1-PCAM-MIB", "alaCoroL3HreModeCollEntriesInUse"), ("ALCATEL-IND1-PCAM-MIB", "alaCoroL3HreModeCurrentHashFunction"), ("ALCATEL-IND1-PCAM-MIB", "alaCoroL3HreMaxCollChainLen"), ("ALCATEL-IND1-PCAM-MIB", "alaCoroL3HreAvgCollChainLen"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaCoroL3HrePerModeObjects = alaCoroL3HrePerModeObjects.setStatus('current')
if mibBuilder.loadTexts: alaCoroL3HrePerModeObjects.setDescription('A collection of objects providing information for each mode.')
alaCoroL3HrePerCoronadoObjects = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 4, 1, 2, 1, 2)).setObjects(("ALCATEL-IND1-PCAM-MIB", "alaCoroL3HreSlotNumber"), ("ALCATEL-IND1-PCAM-MIB", "alaCoroL3HreSliceNumber"), ("ALCATEL-IND1-PCAM-MIB", "alaCoroL3HreRouteCacheEntriesTotal"), ("ALCATEL-IND1-PCAM-MIB", "alaCoroL3HreRouteCacheEntriesInUse"), ("ALCATEL-IND1-PCAM-MIB", "alaCoroL3HreIpPacketsReceived"), ("ALCATEL-IND1-PCAM-MIB", "alaCoroL3HreIpBytesReceived"), ("ALCATEL-IND1-PCAM-MIB", "alaCoroL3HreIpPacketsForwarded"), ("ALCATEL-IND1-PCAM-MIB", "alaCoroL3HreIpBytesForwarded"), ("ALCATEL-IND1-PCAM-MIB", "alaCoroL3HreIpPacketsDiscarded"), ("ALCATEL-IND1-PCAM-MIB", "alaCoroL3HreIpBytesDiscarded"), ("ALCATEL-IND1-PCAM-MIB", "alaCoroL3HreIpPacketsFragmented"), ("ALCATEL-IND1-PCAM-MIB", "alaCoroL3HreIpPacketsFragsGenerated"), ("ALCATEL-IND1-PCAM-MIB", "alaCoroL3HreIpPacketsFailedToFrag"), ("ALCATEL-IND1-PCAM-MIB", "alaCoroL3HreIpxPacketsReceived"), ("ALCATEL-IND1-PCAM-MIB", "alaCoroL3HreIpxBytesReceived"), ("ALCATEL-IND1-PCAM-MIB", "alaCoroL3HreIpxPacketsForwarded"), ("ALCATEL-IND1-PCAM-MIB", "alaCoroL3HreIpxBytesForwarded"), ("ALCATEL-IND1-PCAM-MIB", "alaCoroL3HreIpxPacketsDiscarded"), ("ALCATEL-IND1-PCAM-MIB", "alaCoroL3HreIpxBytesDiscarded"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaCoroL3HrePerCoronadoObjects = alaCoroL3HrePerCoronadoObjects.setStatus('current')
if mibBuilder.loadTexts: alaCoroL3HrePerCoronadoObjects.setDescription('A collection of objects providing information for each Coronado.')
alaCoroL3HreChangeObjects = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 4, 1, 2, 1, 3)).setObjects(("ALCATEL-IND1-PCAM-MIB", "alaCoroL3HreUpdateChanges"), ("ALCATEL-IND1-PCAM-MIB", "alaCoroL3HreChangeSlotNumber"), ("ALCATEL-IND1-PCAM-MIB", "alaCoroL3HreChangeSliceNumber"), ("ALCATEL-IND1-PCAM-MIB", "alaCoroL3HreChangeModeNumber"), ("ALCATEL-IND1-PCAM-MIB", "alaCoroL3HreChangeHashTableSize"), ("ALCATEL-IND1-PCAM-MIB", "alaCoroL3HreChangeHashFunction"), ("ALCATEL-IND1-PCAM-MIB", "alaCoroL3HreChangeClear"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaCoroL3HreChangeObjects = alaCoroL3HreChangeObjects.setStatus('current')
if mibBuilder.loadTexts: alaCoroL3HreChangeObjects.setDescription('A collection of objects providing information for changes to be made.')
alcatelInd1PCAMMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 4, 1, 2, 2, 1)).setObjects(("ALCATEL-IND1-PCAM-MIB", "alaCoroL3HrePerModeObjects"), ("ALCATEL-IND1-PCAM-MIB", "alaCoroL3HrePerCoronadoObjects"), ("ALCATEL-IND1-PCAM-MIB", "alaCoroL3HreChangeObjects"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alcatelInd1PCAMMIBCompliance = alcatelInd1PCAMMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: alcatelInd1PCAMMIBCompliance.setDescription('The compliance statement for the Coronado Layer 3.')
mibBuilder.exportSymbols("ALCATEL-IND1-PCAM-MIB", alcatelIND1PCAMMIB=alcatelIND1PCAMMIB, alaCoroL3HreIpPacketsReceived=alaCoroL3HreIpPacketsReceived, alaCoroL3HreChangeSlotNumber=alaCoroL3HreChangeSlotNumber, alaCoroL3HreChangeSliceNumber=alaCoroL3HreChangeSliceNumber, alaCoroL3HreChangeTable=alaCoroL3HreChangeTable, alaCoroL3HreIpxBytesDiscarded=alaCoroL3HreIpxBytesDiscarded, alaCoroL3HreIpxBytesForwarded=alaCoroL3HreIpxBytesForwarded, alaCoroL3HreChangeHashFunction=alaCoroL3HreChangeHashFunction, alaCoroL3HrePerCoronadoObjects=alaCoroL3HrePerCoronadoObjects, alaCoroL3HreRouteCacheEntriesInUse=alaCoroL3HreRouteCacheEntriesInUse, alcatelIND1PCAMMIBObjects=alcatelIND1PCAMMIBObjects, alaCoroL3HreIpBytesDiscarded=alaCoroL3HreIpBytesDiscarded, alaCoroL3HrePerCoronadoStatsTable=alaCoroL3HrePerCoronadoStatsTable, alaCoroL3HrePerModeObjects=alaCoroL3HrePerModeObjects, alaCoroL3HreIpBytesForwarded=alaCoroL3HreIpBytesForwarded, alaCoroL3HreIpxPacketsReceived=alaCoroL3HreIpxPacketsReceived, alcatelInd1PCAMMIBCompliance=alcatelInd1PCAMMIBCompliance, alaCoroL3HreSliceNumber=alaCoroL3HreSliceNumber, alaCoroL3HrePerModeTable=alaCoroL3HrePerModeTable, alaCoroL3HreIpPacketsFailedToFrag=alaCoroL3HreIpPacketsFailedToFrag, alaCoroL3HrePerModeModeNumber=alaCoroL3HrePerModeModeNumber, alaCoroL3HrePerModeSlotNumber=alaCoroL3HrePerModeSlotNumber, alaCoroL3HreAvgCollChainLen=alaCoroL3HreAvgCollChainLen, alaCoroL3HreModeCollEntriesInUse=alaCoroL3HreModeCollEntriesInUse, alaCoroL3HreSlotNumber=alaCoroL3HreSlotNumber, alaCoroL3HreChangeTableEntry=alaCoroL3HreChangeTableEntry, alaCoroL3HreChangeHashTableSize=alaCoroL3HreChangeHashTableSize, alcatelIND1PCAMMIBCompliances=alcatelIND1PCAMMIBCompliances, alaCoroL3HreIpPacketsForwarded=alaCoroL3HreIpPacketsForwarded, alaCoroL3HreChangeClear=alaCoroL3HreChangeClear, alaCoroL3HreIpPacketsDiscarded=alaCoroL3HreIpPacketsDiscarded, alaCoroL3HrePerCoronadoStatsTableEntry=alaCoroL3HrePerCoronadoStatsTableEntry, alcatelIND1PCAMMIBGroups=alcatelIND1PCAMMIBGroups, alaCoroL3HreMaxCollChainLen=alaCoroL3HreMaxCollChainLen, PYSNMP_MODULE_ID=alcatelIND1PCAMMIB, alaCoroL3HreIpPacketsFragmented=alaCoroL3HreIpPacketsFragmented, alaCoroL3HreIpxBytesReceived=alaCoroL3HreIpxBytesReceived, alaCoroL3HreChangeModeNumber=alaCoroL3HreChangeModeNumber, alaCoroL3HrePerModeTableEntry=alaCoroL3HrePerModeTableEntry, alaCoroL3HreModeHashTableSize=alaCoroL3HreModeHashTableSize, alaCoroL3HreIpxPacketsDiscarded=alaCoroL3HreIpxPacketsDiscarded, alaCoroL3HreIpBytesReceived=alaCoroL3HreIpBytesReceived, alaCoroL3HreIpPacketsFragsGenerated=alaCoroL3HreIpPacketsFragsGenerated, alaCoroL3HreChangeObjects=alaCoroL3HreChangeObjects, alcatelIND1PCAMMIBConformance=alcatelIND1PCAMMIBConformance, CoroL3HashFunction=CoroL3HashFunction, alaCoroL3HrePerModeSliceNumber=alaCoroL3HrePerModeSliceNumber, alaCoroL3HreRouteCacheEntriesTotal=alaCoroL3HreRouteCacheEntriesTotal, alaCoroL3HreModeHashEntriesInUse=alaCoroL3HreModeHashEntriesInUse, alaCoroL3HreUpdateChanges=alaCoroL3HreUpdateChanges, alaCoroL3HreIpxPacketsForwarded=alaCoroL3HreIpxPacketsForwarded, alaCoroL3HreModeCurrentHashFunction=alaCoroL3HreModeCurrentHashFunction)
