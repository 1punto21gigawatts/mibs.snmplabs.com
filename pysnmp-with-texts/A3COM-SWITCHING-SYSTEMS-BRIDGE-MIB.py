#
# PySNMP MIB module A3COM-SWITCHING-SYSTEMS-BRIDGE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/A3COM-SWITCHING-SYSTEMS-BRIDGE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:08:18 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Bits, TimeTicks, Counter64, NotificationType, NotificationType, iso, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, enterprises, Unsigned32, MibIdentifier, ModuleIdentity, Counter32, Gauge32, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "TimeTicks", "Counter64", "NotificationType", "NotificationType", "iso", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "enterprises", "Unsigned32", "MibIdentifier", "ModuleIdentity", "Counter32", "Gauge32", "Integer32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
a3Com = MibIdentifier((1, 3, 6, 1, 4, 1, 43))
switchingSystemsMibs = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 29))
a3ComSwitchingSystemsMib = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 29, 4))
a3ComSysBridge = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 29, 4, 10))
a3ComSysBridgeCount = MibScalar((1, 3, 6, 1, 4, 1, 43, 29, 4, 10, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysBridgeCount.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysBridgeCount.setDescription('The count of bridges managed by this agent.')
a3ComSysBridgeTable = MibTable((1, 3, 6, 1, 4, 1, 43, 29, 4, 10, 2), )
if mibBuilder.loadTexts: a3ComSysBridgeTable.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysBridgeTable.setDescription('A list of bridge entries. A single entry exists in this list for each bridge managed by this agent.')
a3ComSysBridgeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 29, 4, 10, 2, 1), ).setIndexNames((0, "A3COM-SWITCHING-SYSTEMS-BRIDGE-MIB", "a3ComSysBridgeIndex"))
if mibBuilder.loadTexts: a3ComSysBridgeEntry.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysBridgeEntry.setDescription('A bridge entry contains information about a particular bridge managed by this agent.')
a3ComSysBridgeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 10, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysBridgeIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysBridgeIndex.setDescription('The index of the bridge identified by this entry, relative to this agent.')
a3ComSysBridgePortCount = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 10, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysBridgePortCount.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysBridgePortCount.setDescription('The number of bridge ports that the bridge identified by this entry controls.')
a3ComSysBridgeAddressTableSize = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 10, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysBridgeAddressTableSize.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysBridgeAddressTableSize.setDescription('The size of the address table for the bridge identified by this entry.')
a3ComSysBridgeAddressTableCount = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 10, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysBridgeAddressTableCount.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysBridgeAddressTableCount.setDescription('The current count of addresses in the address table for the bridge identified by this entry.')
a3ComSysBridgeAddressTablePeakCount = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 10, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysBridgeAddressTablePeakCount.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysBridgeAddressTablePeakCount.setDescription('The peak count of addresses in the address table for the bridge identified by this entry, since the system was last initialized.')
a3ComSysBridgeAddressThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 10, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComSysBridgeAddressThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysBridgeAddressThreshold.setDescription('A reporting threshold for the total number of addresses known for the bridge identified by this entry. When this threshold is reached, the event a3ComSysBridgeAddressThresholdEvent is generated. The range of valid values for setting this object is between 1 and the corresponding value reported by a3ComSysBridgeAddressTableSize + 1 (Note that this range applies to values issued in set requests. The current value may be outside this range, for example if the corresponding value of a3ComSysBridgeMode is changed). Setting this object to one greater than the address table size disables the generation of a3ComSysBridgeAddressThresholdEvents since the limit will never be reached.')
a3ComSysBridgeMode = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 10, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("expressMode", 1), ("ieee8021dBridgeMode", 2), ("notSupported", 3), ("ieee8021dSRTBridgeMode", 4), ("ieee8021dSRBridgeMode", 5), ("ibmSRBridgeMode", 6), ("srtBBridgeMode", 7), ("srExpressBridgeMode", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComSysBridgeMode.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysBridgeMode.setDescription('The operational mode of the bridge identified by this entry. Note that bridges which report notSupported(3) will not support sets of this object, and that the value notSupported(3) is not a valid value for a set operation.')
a3ComSysBridgeBackbonePort = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 10, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComSysBridgeBackbonePort.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysBridgeBackbonePort.setDescription('The number of the port selected as the backbone segment port when the corresponding value of a3ComSysBridgeMode is is expressMode(1). The value of this object can range from 1 to the corresponding value of a3ComSysBridgePortCount, however, some bridges may support only a subset of ports as backbone ports. If the corresponding value of a3ComSysBridgeMode is not expressMode(1), the value of this object is ignored.')
a3ComSysBridgeIpFragmentationEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 10, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("true", 1), ("false", 2), ("notSupported", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComSysBridgeIpFragmentationEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysBridgeIpFragmentationEnabled.setDescription('A flag indicating whether or not IP fragmentation is enabled on this bridge. Note that bridges which report notSupported(3) will not support sets of this object, and that the value notSupported(3) is not a valid value for a set operation.')
a3ComSysBridgeTrFddiTranslationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 10, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("native", 1), ("backbone", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComSysBridgeTrFddiTranslationMode.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysBridgeTrFddiTranslationMode.setDescription('The mode used to describe whether the embedded MAC addresses are byte-conjugated in order to convert them from Token Ring format to native FDDI format (and vice versa), or whether they are left alone (used for traffic flowing across a FDDI backbone to/from Token Ring end stations).')
a3ComSysBridgeSTPGroupAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 10, 2, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComSysBridgeSTPGroupAddress.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysBridgeSTPGroupAddress.setDescription('Spanning tree bridge group address. The address cannot be changed if the spanning tree is enabled (a3ComSysBridgeStpEnabled).')
a3ComSysBridgeSTPEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 10, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComSysBridgeSTPEnable.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysBridgeSTPEnable.setDescription('This object indicates if spanning tree bridge feature is enabled or disabled. If enabled this value will equal true(1).')
a3ComSysBridgeIpxSnapTranslationEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 10, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComSysBridgeIpxSnapTranslationEnable.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysBridgeIpxSnapTranslationEnable.setDescription('This object indicates if the IPX 802.3-FDDI SNAP Translation bridge feature is enabled or disabled. If enabled this value will equal true(1). Note, this object may not be supported on all bridges.')
a3ComSysBridgeLowLatencyEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 10, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComSysBridgeLowLatencyEnable.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysBridgeLowLatencyEnable.setDescription('This object indicates if the bridge low latency feature is enabled or disabled. If enabled this value will equal true(1). Note, this object may not be supported on all bridges.')
a3ComSysBridgeVlanMode = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 10, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("open", 1), ("closed", 2), ("mixed", 3), ("notSupported", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComSysBridgeVlanMode.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysBridgeVlanMode.setDescription('This object indicates the VLAN types that this bridge will support. Open mode means that each VLAN within this bridge will be of the Open type; all VLANs within this bridge will share the same address table. Closed mode means that each VLAN within this bridge will be of the Closed type; each VLAN within this bridge will have its own address table. Mixed mode means that each VLAN within this bridge with be of either the Open or Closed type; all Open VLANs will share the same address table and each Closed VLAN will have its own address table.')
a3ComSysBridgeRateLimitReceiveMulticast = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 10, 2, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComSysBridgeRateLimitReceiveMulticast.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysBridgeRateLimitReceiveMulticast.setDescription('This object limits the number of multicast frames forwarded by this port over a 1 second interval. The value is set across all ports on the device.')
a3ComSysBridgeRateLimitReceiveBroadcast = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 10, 2, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComSysBridgeRateLimitReceiveBroadcast.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysBridgeRateLimitReceiveBroadcast.setDescription('This object limits the number of broadcast frames forwarded by this port over a 1 second interval. The value is set across all ports on the device.')
a3ComSysBridgeRateLimitReceiveFlood = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 10, 2, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComSysBridgeRateLimitReceiveFlood.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysBridgeRateLimitReceiveFlood.setDescription('This object limits the number of frames forwarded that would normally be flooded by this port over a 1 second interval. The value is set across all ports on the device.')
a3ComSysBridgeAddressLearnMode = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 10, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("secure", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComSysBridgeAddressLearnMode.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysBridgeAddressLearnMode.setDescription('This object determins the behavior of address management normal(1) - The device will learn dynamic addresses and static entries can be added. secure(2) - Static, management, and control addresses can be added to a database. If a dynamic address is seen that does not match an entry in the database, then the port will be disabled.')
a3ComSysBridgeAddressAgingInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 10, 2, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComSysBridgeAddressAgingInterval.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysBridgeAddressAgingInterval.setDescription('This object determines how long (in seconds) a dynamic entry is kept in the database.')
a3ComSysBridgeLoopDetectMode = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 10, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("immediate", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComSysBridgeLoopDetectMode.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysBridgeLoopDetectMode.setDescription('This object determines the behavior of loop detection enabled(1) - The DA will detect loops and disable the apporiate port. disabled(2) - No loop detection mechanism will be enabled. immediate(3) - If a BPDU is received on a front panel port then a front panel port will be disabled. The default value for this object disabled(2).')
a3ComSysBridgeLoopDetectSrcAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 10, 2, 1, 22), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysBridgeLoopDetectSrcAddress.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysBridgeLoopDetectSrcAddress.setDescription('This object returns the source address that is used to determine if a loop is present between client ports')
a3ComSysBridgePortTable = MibTable((1, 3, 6, 1, 4, 1, 43, 29, 4, 10, 3), )
if mibBuilder.loadTexts: a3ComSysBridgePortTable.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysBridgePortTable.setDescription('A list of bridge port entries. A single entry exists in this list for each bridge port managed by this agent.')
a3ComSysBridgePortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 29, 4, 10, 3, 1), ).setIndexNames((0, "A3COM-SWITCHING-SYSTEMS-BRIDGE-MIB", "a3ComSysBridgePortBridgeIndex"), (0, "A3COM-SWITCHING-SYSTEMS-BRIDGE-MIB", "a3ComSysBridgePortIndex"))
if mibBuilder.loadTexts: a3ComSysBridgePortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysBridgePortEntry.setDescription('A bridge port entry contains information about a particular bridge port managed by this agent.')
a3ComSysBridgePortBridgeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 10, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysBridgePortBridgeIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysBridgePortBridgeIndex.setDescription('The index of the bridge identified by this entry, relative to this agent.')
a3ComSysBridgePortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 10, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysBridgePortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysBridgePortIndex.setDescription('The index of the bridge port identified by this entry, within the bridge identified by this entry.')
a3ComSysBridgePortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 10, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysBridgePortIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysBridgePortIfIndex.setDescription('The value of the MIB-II ifIndex corresponding to the bridge port identified by this entry.')
a3ComSysBridgePortReceiveMulticastLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 10, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComSysBridgePortReceiveMulticastLimit.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysBridgePortReceiveMulticastLimit.setDescription('This variable limits the number of multicast frames forwarded by this port over a 1 second interval. The minimum threshold limit may vary between platforms, but can be determined by multiplying this value by the swSysBridgePortReceiveMulticastLimitMultiplier value. For example if this value equals 2, and the swSysBridgePortReceiveMulticastLimitMultiplier equals 1000 then no more than 2000 multicast frames per second will be forwarded by this port. The default value for this object is zero which an infinite rate.')
a3ComSysBridgePortAddressAction = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 10, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("freezeAddress", 2), ("flushAddress", 3), ("flushDynamicAddress", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComSysBridgePortAddressAction.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysBridgePortAddressAction.setDescription('This object, when read, always returns the value other(1). The behavior of setting this object to each of the acceptable values is as follows: freezeAddress: causes all the learned dynamic addresses to be converted into static addresses. flushAddress: causes all the addresses to be flushed from the address list for the bridge port identified by this entry. flushDynamicAddress: causes all dynamic addresses to be flushed from the address list for the bridge port identified by this entry.')
a3ComSysBridgePortSpanningTreeFrameReceivedCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 10, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysBridgePortSpanningTreeFrameReceivedCounts.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysBridgePortSpanningTreeFrameReceivedCounts.setDescription('The number of spanning tree frames received by the bridge port identified by this entry.')
a3ComSysBridgePortReceiveBlockedDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 10, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysBridgePortReceiveBlockedDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysBridgePortReceiveBlockedDiscards.setDescription("The number of frames discarded by the bridge port identified by this entry because the receiving bridge port was not in the 'forwarding' state.")
a3ComSysBridgePortReceiveMulticastLimitExceededs = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 10, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysBridgePortReceiveMulticastLimitExceededs.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysBridgePortReceiveMulticastLimitExceededs.setDescription('The number of times the value of a3ComSysBridgePortReceiveMulticastLimit was exceeded for the port identified by this entry.')
a3ComSysBridgePortReceiveMulticastLimitExceededDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 10, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysBridgePortReceiveMulticastLimitExceededDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysBridgePortReceiveMulticastLimitExceededDiscards.setDescription('The number of multicast/broadcast frames discarded by the bridge port identified by this entry because the corresponding value of a3ComSysBridgePortReceiveMulticastLimit was exceeded.')
a3ComSysBridgePortReceiveSecurityDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 10, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysBridgePortReceiveSecurityDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysBridgePortReceiveSecurityDiscards.setDescription('The number of frames discarded by the bridge port identified by this entry because they contained source addresses which were statically configured on another bridge port. A statically configured address (station), which is not allowed to move, appears to have moved.')
a3ComSysBridgePortReceiveUnknownDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 10, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysBridgePortReceiveUnknownDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysBridgePortReceiveUnknownDiscards.setDescription('The number of frames discarded by the bridge port identified by this entry because the destination address was unknown. Note that this counter is only valid for backbone ports, and only when the bridge is operating in express mode.')
a3ComSysBridgePortReceiveOtherDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 10, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysBridgePortReceiveOtherDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysBridgePortReceiveOtherDiscards.setDescription('The number of frames discarded by the bridge port identified by this entry because they contained either invalid (group) source addresses or source addresses belonging to this bridge (indicative of network loops).')
a3ComSysBridgePortReceiveErrorDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 10, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysBridgePortReceiveErrorDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysBridgePortReceiveErrorDiscards.setDescription('The number of frames discarded by the bridge port identified by this entry because of internal bridge system errors (e.g., hardware and software address table discrepencies).')
a3ComSysBridgePortSameSegmentDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 10, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysBridgePortSameSegmentDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysBridgePortSameSegmentDiscards.setDescription('The number of frames discarded by the bridge port identified by this entry because the destination address is known on the same network segment as the source address, i.e., the frame does not need to be bridged.')
a3ComSysBridgePortTransmitBlockedDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 10, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysBridgePortTransmitBlockedDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysBridgePortTransmitBlockedDiscards.setDescription("The number of frames discarded by the bridge port identified by this entry because the transmitting bridge port was not in the 'forwarding' state.")
a3ComSysBridgePortReceiveAllPathFilteredFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 10, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysBridgePortReceiveAllPathFilteredFrames.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysBridgePortReceiveAllPathFilteredFrames.setDescription('The number of frames discarded by the bridge port identified by this entry due to user defined receive all path filters.')
a3ComSysBridgePortReceiveMulticastPathFilteredFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 10, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysBridgePortReceiveMulticastPathFilteredFrames.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysBridgePortReceiveMulticastPathFilteredFrames.setDescription('The number of frames discarded by the bridge port identified by this entry due to user defined receive multicast path filters.')
a3ComSysBridgePortTransmitAllPathFilteredFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 10, 3, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysBridgePortTransmitAllPathFilteredFrames.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysBridgePortTransmitAllPathFilteredFrames.setDescription('The number of frames discarded by the bridge port identified by this entry due to user defined transmit all path filters.')
a3ComSysBridgePortTransmitMulticastPathFilteredFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 10, 3, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysBridgePortTransmitMulticastPathFilteredFrames.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysBridgePortTransmitMulticastPathFilteredFrames.setDescription('The number of frames discarded by the bridge port identified by this entry due to user defined transmit multicast path filters.')
a3ComSysBridgePortForwardedUnicastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 10, 3, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysBridgePortForwardedUnicastFrames.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysBridgePortForwardedUnicastFrames.setDescription('The number of unicast frames which this port forwarded to a single destination port.')
a3ComSysBridgePortForwardedUnicastOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 10, 3, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysBridgePortForwardedUnicastOctets.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysBridgePortForwardedUnicastOctets.setDescription('The number of octets contained in unicast frames which this port forwarded to a single destination port.')
a3ComSysBridgePortForwardedMulticastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 10, 3, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysBridgePortForwardedMulticastFrames.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysBridgePortForwardedMulticastFrames.setDescription('The number of multicast frames which this port forwarded.')
a3ComSysBridgePortForwardedMulticastOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 10, 3, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysBridgePortForwardedMulticastOctets.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysBridgePortForwardedMulticastOctets.setDescription('The number of octets contained in multicast frames which this port forwarded.')
a3ComSysBridgePortFloodedUnicastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 10, 3, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysBridgePortFloodedUnicastFrames.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysBridgePortFloodedUnicastFrames.setDescription('The number of unicast frames which this port flooded to all other ports in the bridge.')
a3ComSysBridgePortFloodedUnicastOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 10, 3, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysBridgePortFloodedUnicastOctets.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysBridgePortFloodedUnicastOctets.setDescription('The number of octets contained in unicast frames which this port flooded to all other ports in the bridge.')
a3ComSysBridgePortStpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 10, 3, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("remove", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComSysBridgePortStpMode.setReference('IEEE 802.1D-1990: Section 4.5.5.2 for enable and disable modes.')
if mibBuilder.loadTexts: a3ComSysBridgePortStpMode.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysBridgePortStpMode.setDescription('The mode of the bridge port.')
a3ComSysBridgePortReceiveMulticastLimitFrameType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 10, 3, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("broadcastAndMulticast", 1), ("broadcastOnly", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComSysBridgePortReceiveMulticastLimitFrameType.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysBridgePortReceiveMulticastLimitFrameType.setDescription('This object identifies the frames type(s) that are to be counted when determining if the receive multicast limit has been exceeded for this bridge port. Devices attached to networks with predominantly high multicast traffic (e.g. video) should set this value to broadcastOnly(2) to detect broadcast storms.')
a3ComSysBridgePortForwardedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 10, 3, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysBridgePortForwardedFrames.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysBridgePortForwardedFrames.setDescription('The number of frames which this port forwarded.')
a3ComSysBridgePortReceiveMulticastLimitMultiplier = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 10, 3, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysBridgePortReceiveMulticastLimitMultiplier.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysBridgePortReceiveMulticastLimitMultiplier.setDescription('This variable determines the minimum setting for the multicast limit threshold. For example if this value equals 1000, and the a3ComSysBridgePortReceiveMulticastLimit variable equals 2 then no more than 2000 multicast frames per second will be forwarded by this port.')
a3ComSysBridgePortRateLimitReceiveMulticastEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 10, 3, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComSysBridgePortRateLimitReceiveMulticastEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysBridgePortRateLimitReceiveMulticastEnabled.setDescription('This object determines whether a port participates in multicast rate limiting set by the object a3ComSysBridgeRateLimitReceiveMulticast')
a3ComSysBridgePortRateLimitReceiveBroadcastEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 10, 3, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComSysBridgePortRateLimitReceiveBroadcastEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysBridgePortRateLimitReceiveBroadcastEnabled.setDescription('This object determines whether a port participates in broadcast rate limiting set by the object a3ComSysBridgeRateLimitReceiveBroadcast')
a3ComSysBridgePortRateLimitReceiveFloodEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 10, 3, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComSysBridgePortRateLimitReceiveFloodEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysBridgePortRateLimitReceiveFloodEnabled.setDescription('This object determines whether a port participates in flood rate limiting set by the object a3ComSysBridgeRateLimitReceiveFlood')
a3ComSysBridgePortRateLimitReceiveState = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 10, 3, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("bmfrl-disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysBridgePortRateLimitReceiveState.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysBridgePortRateLimitReceiveState.setDescription('This object returns the bmfrl state of the port enabled(1) - port is up disabled(2) - port is down, but not as a result of BMFRL bmfrl-disabled(3) - port was disabled by rate limit software')
a3ComSysBridgePortLoopDetectState = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 10, 3, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("active", 1), ("loopDetected", 2), ("bpduDetected", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysBridgePortLoopDetectState.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysBridgePortLoopDetectState.setDescription('This object returns a reason code that will indicate why a given port was disable by the Loop Detection software.')
a3ComSysBridgePortAddressMaxLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 10, 3, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComSysBridgePortAddressMaxLimit.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysBridgePortAddressMaxLimit.setDescription("This object controls the maximum number of unicast addresses that can be learned or configured on a port. This value is set on a per port basis. The value can't be set lower than the current number of addresses on a port.")
a3ComSysBridgePortAddressState = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 10, 3, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("active", 1), ("limitationExceeded", 2), ("securityViolation", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysBridgePortAddressState.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysBridgePortAddressState.setDescription('This object returns a reason code that will indicate why a given port was disable, when a3ComDaAddressMode is set to secure.')
a3ComSysBridgePortReceiveInternalPathFilteredFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 10, 3, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysBridgePortReceiveInternalPathFilteredFrames.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysBridgePortReceiveInternalPathFilteredFrames.setDescription('The number of frames discarded by the bridge port identified by this entry due to receive internal path filters.')
a3ComSysBridgePortAddressTable = MibTable((1, 3, 6, 1, 4, 1, 43, 29, 4, 10, 5), )
if mibBuilder.loadTexts: a3ComSysBridgePortAddressTable.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysBridgePortAddressTable.setDescription('A list of bridge port address information. A single entry exists in this list for each learned address, accross all bridge ports and all bridges managed by this agent.')
a3ComSysBridgePortAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 29, 4, 10, 5, 1), ).setIndexNames((0, "A3COM-SWITCHING-SYSTEMS-BRIDGE-MIB", "a3ComSysBridgePortAddressBridgeIndex"), (0, "A3COM-SWITCHING-SYSTEMS-BRIDGE-MIB", "a3ComSysBridgePortAddressPortIndex"), (0, "A3COM-SWITCHING-SYSTEMS-BRIDGE-MIB", "a3ComSysBridgePortAddressIndex"))
if mibBuilder.loadTexts: a3ComSysBridgePortAddressEntry.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysBridgePortAddressEntry.setDescription('An bridge port address entry contains information about a particular bridge port address. To create a new entry, set an instance of a3ComSysBridgePortAddressRemoteAddress with the address index portion of the instance set to 0, to a valid value. To remove an entry, set the instance of the a3ComSysBridgePortAddressType for the entry to invalid(2).')
a3ComSysBridgePortAddressBridgeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 10, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysBridgePortAddressBridgeIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysBridgePortAddressBridgeIndex.setDescription('The index of the bridge identified by this entry, relative to this agent.')
a3ComSysBridgePortAddressPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 10, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysBridgePortAddressPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysBridgePortAddressPortIndex.setDescription('The index of the bridge port identified by this entry, within the bridge identified by this entry.')
a3ComSysBridgePortAddressIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 10, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysBridgePortAddressIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysBridgePortAddressIndex.setDescription('The index of this address entry within the bridge address table for the bridge identified by this entry. This index ranges from 1 to the corresponding value of a3ComSysBridgeAddressTableSize.')
a3ComSysBridgePortAddressRemoteAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 10, 5, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComSysBridgePortAddressRemoteAddress.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysBridgePortAddressRemoteAddress.setDescription('The remote MAC address detected on the bridge port identified by to this entry. Setting this object results in an attempt to create a new entry in the table. Since the value of a3ComSysBridgePortAddressIndex is determined automatically internal to the bridge, a set is only successful if the index value specified for a3ComSysBridgePortAddressIndex is zero. A get-next using the values of a3ComSysBridgePortAddressTypeIndex and a3ComSysBridgePortAddressPortIndex can be used to determine the address index assigned to the newly added address entry.')
a3ComSysBridgePortAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 10, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComSysBridgePortAddressType.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysBridgePortAddressType.setDescription('This object, when read, always returns the value valid(1). Setting this object to invalid(2) will remove the corresponding address entry from the table.')
a3ComSysBridgePortAddressIsStatic = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 10, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("isStatic", 1), ("isDynamic", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComSysBridgePortAddressIsStatic.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysBridgePortAddressIsStatic.setDescription('A value indicating whether this MAC address was statically configured or was dynamically learned. Note that isStatic(1) is only valid for set operations.')
a3ComSysBridgePortAddressStaticPort = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 10, 5, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysBridgePortAddressStaticPort.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysBridgePortAddressStaticPort.setDescription('If the corresponding value of the object a3ComSysBridgePortAddressIsStatic is isStatic(1), this object indicates the local bridge port index (as reported by a3ComSysBridgePortLocalIndex) for which this address MAC was statically configured. If the object a3ComSysBridgePortAddressIsStatic has the value isDynamic(2), the value of this object is 0.')
a3ComSysBridgePortAddressAge = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 10, 5, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysBridgePortAddressAge.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysBridgePortAddressAge.setDescription('This object indicates the time, in seconds, elapsed since a packet containing this address as a source was last seen on the bridge port identified by this entry.')
a3ComSysBridgeStpGroupAddress = MibScalar((1, 3, 6, 1, 4, 1, 43, 29, 4, 10, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComSysBridgeStpGroupAddress.setStatus('obsolete')
if mibBuilder.loadTexts: a3ComSysBridgeStpGroupAddress.setDescription('Spanning tree bridge group address. The address cannot be changed if the spanning tree is enabled (a3ComSysBridgeStpEnabled). This object can now be found under the a3ComSysBridgeTable as a3ComSysBridgeSTPGroupAddress.')
a3ComSysBridgeStpEnable = MibScalar((1, 3, 6, 1, 4, 1, 43, 29, 4, 10, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComSysBridgeStpEnable.setStatus('obsolete')
if mibBuilder.loadTexts: a3ComSysBridgeStpEnable.setDescription('This object indicates if spanning tree bridge feature is enabled or disabled. If enabled this value will equal true(1). This object can now be found under the a3ComSysBridgeTable as a3ComSysBridgeSTPEnable.')
a3ComSysBridgeVlanPortAddressTable = MibTable((1, 3, 6, 1, 4, 1, 43, 29, 4, 10, 8), )
if mibBuilder.loadTexts: a3ComSysBridgeVlanPortAddressTable.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysBridgeVlanPortAddressTable.setDescription('A list of vlan bridge port address information. A single entry exists in this list for each learned address, across all vlan bridge ports and all vlan bridges managed by this agent.')
a3ComSysBridgeVlanPortAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 29, 4, 10, 8, 1), ).setIndexNames((0, "A3COM-SWITCHING-SYSTEMS-BRIDGE-MIB", "a3ComSysBridgeVlanPortAddressBridgeIndex"), (0, "A3COM-SWITCHING-SYSTEMS-BRIDGE-MIB", "a3ComSysBridgeVlanPortAddressVlanIndex"), (0, "A3COM-SWITCHING-SYSTEMS-BRIDGE-MIB", "a3ComSysBridgeVlanPortAddressPortIndex"), (0, "A3COM-SWITCHING-SYSTEMS-BRIDGE-MIB", "a3ComSysBridgeVlanPortAddressIndex"))
if mibBuilder.loadTexts: a3ComSysBridgeVlanPortAddressEntry.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysBridgeVlanPortAddressEntry.setDescription('A bridge vlan port address entry contains information about a particular bridge vlan port address. To create a new entry, set an instance of a3ComSysBridgeVlanPortAddressRemoteAddress with the address index portion of the instance set to 0, to a valid value. To remove an entry, set the instance of the a3ComSysBridgeVlanPortAddressType for the entry to invalid(2).')
a3ComSysBridgeVlanPortAddressBridgeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 10, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysBridgeVlanPortAddressBridgeIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysBridgeVlanPortAddressBridgeIndex.setDescription('The index of the bridge vlan identified by this entry, relative to this agent.')
a3ComSysBridgeVlanPortAddressVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 10, 8, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysBridgeVlanPortAddressVlanIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysBridgeVlanPortAddressVlanIndex.setDescription('The index of the vlan identified by this entry, within the bridge identified by this entry.')
a3ComSysBridgeVlanPortAddressPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 10, 8, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysBridgeVlanPortAddressPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysBridgeVlanPortAddressPortIndex.setDescription('The index of the bridge vlan port identified by this entry, within the bridge vlan identified by this entry.')
a3ComSysBridgeVlanPortAddressIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 10, 8, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysBridgeVlanPortAddressIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysBridgeVlanPortAddressIndex.setDescription('The index of this address entry within the bridge vlan address table for the bridge identified by this entry. This index ranges from 1 to the corresponding value of a3ComSysBridgeAddressTableSize.')
a3ComSysBridgeVlanPortAddressRemoteAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 10, 8, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComSysBridgeVlanPortAddressRemoteAddress.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysBridgeVlanPortAddressRemoteAddress.setDescription('The remote MAC address detected on the bridge vlan port identified by to this entry. Setting this object results in an attempt to create a new entry in the table. Since the value of a3ComSysBridgeVlanPortAddressIndex is determined automatically internal to the bridge vlan, a set is only successful if the index value specified for a3ComSysBridgeVlanPortAddressIndex is zero. A get-next using the values of a3ComSysBridgeVlanPortAddressTypeIndex and a3ComSysBridgeVlanPortAddressPortIndex can be used to determine the address index assigned to the newly added address entry.')
a3ComSysBridgeVlanPortAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 10, 8, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComSysBridgeVlanPortAddressType.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysBridgeVlanPortAddressType.setDescription('This object, when read, always returns the value valid(1). Setting this object to invalid(2) will remove the corresponding address entry from the table.')
a3ComSysBridgeVlanPortAddressIsStatic = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 10, 8, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("isStatic", 1), ("isDynamic", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComSysBridgeVlanPortAddressIsStatic.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysBridgeVlanPortAddressIsStatic.setDescription('A value indicating whether this MAC address was statically configured or was dynamically learned. Note that isStatic(1) is only valid for set operations.')
a3ComSysBridgeVlanPortAddressStaticPort = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 10, 8, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysBridgeVlanPortAddressStaticPort.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysBridgeVlanPortAddressStaticPort.setDescription('If the corresponding value of the object a3ComSysBridgeVlanPortAddressIsStatic is isStatic(1), this object indicates the local bridge port index (as reported by a3ComSysBridgePortLocalIndex) for which this address MAC was statically configured. If the object a3ComSysBridgeVlanPortAddressIsStatic has the value isDynamic(2), the value of this object is 0.')
a3ComSysBridgeVlanPortAddressAge = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 10, 8, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysBridgeVlanPortAddressAge.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysBridgeVlanPortAddressAge.setDescription('This object indicates the time, in seconds, elapsed since a packet containing this address as a source was last seen on the bridge vlan port identified by this entry.')
a3ComSysBridgeAddressThresholdEvent = NotificationType((1, 3, 6, 1, 4, 1, 43, 29, 4) + (0,6)).setObjects(("A3COM-SWITCHING-SYSTEMS-BRIDGE-MIB", "a3ComSysBridgeIndex"))
if mibBuilder.loadTexts: a3ComSysBridgeAddressThresholdEvent.setDescription('The trap that is generated when the number of addresses stored in the bridge reaches a3ComSysBridgeAddressThreshold.')
a3ComSysBridgePortLearnEvent = NotificationType((1, 3, 6, 1, 4, 1, 43, 29, 4, 10) + (0,60)).setObjects(("A3COM-SWITCHING-SYSTEMS-BRIDGE-MIB", "a3ComSysBridgePortIndex"), ("A3COM-SWITCHING-SYSTEMS-BRIDGE-MIB", "a3ComSysBridgePortAddressState"))
if mibBuilder.loadTexts: a3ComSysBridgePortLearnEvent.setDescription('The Trap is generated to inform the network manager of the misbehaved port. The misbehavior is reported in the Address State.')
a3ComSysBridgePortRateLimitEvent = NotificationType((1, 3, 6, 1, 4, 1, 43, 29, 4, 10) + (0,61)).setObjects(("A3COM-SWITCHING-SYSTEMS-BRIDGE-MIB", "a3ComSysBridgePortIndex"), ("A3COM-SWITCHING-SYSTEMS-BRIDGE-MIB", "a3ComSysBridgePortRateLimitReceiveState"))
if mibBuilder.loadTexts: a3ComSysBridgePortRateLimitEvent.setDescription('The Trap is generated to inform the network manager of a misbehaved port. The port has exceeded one of the port based rate limiting thresholds and has been placed into the reported state.')
a3ComSysBridgePortLoopDetectEvent = NotificationType((1, 3, 6, 1, 4, 1, 43, 29, 4, 10) + (0,62)).setObjects(("A3COM-SWITCHING-SYSTEMS-BRIDGE-MIB", "a3ComSysBridgePortIndex"), ("A3COM-SWITCHING-SYSTEMS-BRIDGE-MIB", "a3ComSysBridgePortLoopDetectState"))
if mibBuilder.loadTexts: a3ComSysBridgePortLoopDetectEvent.setDescription('The Trap is generated to inform the network manager of the misbehaved port. A loop has been detected on this port and the port has been placed into the reported state.')
mibBuilder.exportSymbols("A3COM-SWITCHING-SYSTEMS-BRIDGE-MIB", a3ComSysBridgePortReceiveBlockedDiscards=a3ComSysBridgePortReceiveBlockedDiscards, a3ComSysBridgePortIfIndex=a3ComSysBridgePortIfIndex, a3ComSysBridgeRateLimitReceiveFlood=a3ComSysBridgeRateLimitReceiveFlood, a3ComSysBridgePortRateLimitReceiveBroadcastEnabled=a3ComSysBridgePortRateLimitReceiveBroadcastEnabled, a3ComSwitchingSystemsMib=a3ComSwitchingSystemsMib, a3ComSysBridgePortLearnEvent=a3ComSysBridgePortLearnEvent, a3ComSysBridgePortSameSegmentDiscards=a3ComSysBridgePortSameSegmentDiscards, a3ComSysBridgeVlanPortAddressType=a3ComSysBridgeVlanPortAddressType, a3ComSysBridgePortAddressAge=a3ComSysBridgePortAddressAge, a3ComSysBridgeTable=a3ComSysBridgeTable, a3ComSysBridgePortReceiveSecurityDiscards=a3ComSysBridgePortReceiveSecurityDiscards, a3ComSysBridgePortAddressRemoteAddress=a3ComSysBridgePortAddressRemoteAddress, a3ComSysBridgePortEntry=a3ComSysBridgePortEntry, a3ComSysBridgeSTPGroupAddress=a3ComSysBridgeSTPGroupAddress, a3ComSysBridge=a3ComSysBridge, a3ComSysBridgePortAddressType=a3ComSysBridgePortAddressType, a3ComSysBridgeLowLatencyEnable=a3ComSysBridgeLowLatencyEnable, a3ComSysBridgePortAddressPortIndex=a3ComSysBridgePortAddressPortIndex, a3ComSysBridgeLoopDetectSrcAddress=a3ComSysBridgeLoopDetectSrcAddress, a3ComSysBridgePortFloodedUnicastOctets=a3ComSysBridgePortFloodedUnicastOctets, a3ComSysBridgePortAddressEntry=a3ComSysBridgePortAddressEntry, a3ComSysBridgePortForwardedMulticastOctets=a3ComSysBridgePortForwardedMulticastOctets, a3ComSysBridgeVlanPortAddressBridgeIndex=a3ComSysBridgeVlanPortAddressBridgeIndex, a3ComSysBridgeVlanPortAddressVlanIndex=a3ComSysBridgeVlanPortAddressVlanIndex, a3ComSysBridgePortForwardedUnicastFrames=a3ComSysBridgePortForwardedUnicastFrames, a3ComSysBridgeAddressAgingInterval=a3ComSysBridgeAddressAgingInterval, a3ComSysBridgeSTPEnable=a3ComSysBridgeSTPEnable, a3ComSysBridgePortSpanningTreeFrameReceivedCounts=a3ComSysBridgePortSpanningTreeFrameReceivedCounts, a3ComSysBridgePortRateLimitReceiveFloodEnabled=a3ComSysBridgePortRateLimitReceiveFloodEnabled, a3ComSysBridgePortAddressStaticPort=a3ComSysBridgePortAddressStaticPort, a3ComSysBridgeTrFddiTranslationMode=a3ComSysBridgeTrFddiTranslationMode, a3ComSysBridgePortReceiveMulticastLimitExceededs=a3ComSysBridgePortReceiveMulticastLimitExceededs, a3ComSysBridgeVlanPortAddressAge=a3ComSysBridgeVlanPortAddressAge, a3ComSysBridgeAddressTablePeakCount=a3ComSysBridgeAddressTablePeakCount, a3ComSysBridgePortReceiveUnknownDiscards=a3ComSysBridgePortReceiveUnknownDiscards, a3ComSysBridgePortRateLimitReceiveState=a3ComSysBridgePortRateLimitReceiveState, a3ComSysBridgeVlanMode=a3ComSysBridgeVlanMode, a3ComSysBridgePortReceiveMulticastLimitFrameType=a3ComSysBridgePortReceiveMulticastLimitFrameType, a3ComSysBridgeLoopDetectMode=a3ComSysBridgeLoopDetectMode, a3ComSysBridgeMode=a3ComSysBridgeMode, a3Com=a3Com, a3ComSysBridgePortAddressBridgeIndex=a3ComSysBridgePortAddressBridgeIndex, a3ComSysBridgePortTransmitBlockedDiscards=a3ComSysBridgePortTransmitBlockedDiscards, a3ComSysBridgePortIndex=a3ComSysBridgePortIndex, a3ComSysBridgeVlanPortAddressStaticPort=a3ComSysBridgeVlanPortAddressStaticPort, a3ComSysBridgePortReceiveMulticastLimitExceededDiscards=a3ComSysBridgePortReceiveMulticastLimitExceededDiscards, a3ComSysBridgeRateLimitReceiveMulticast=a3ComSysBridgeRateLimitReceiveMulticast, a3ComSysBridgeIpxSnapTranslationEnable=a3ComSysBridgeIpxSnapTranslationEnable, a3ComSysBridgePortAddressIsStatic=a3ComSysBridgePortAddressIsStatic, a3ComSysBridgeCount=a3ComSysBridgeCount, a3ComSysBridgePortLoopDetectState=a3ComSysBridgePortLoopDetectState, a3ComSysBridgePortReceiveMulticastPathFilteredFrames=a3ComSysBridgePortReceiveMulticastPathFilteredFrames, a3ComSysBridgePortAddressIndex=a3ComSysBridgePortAddressIndex, a3ComSysBridgePortReceiveAllPathFilteredFrames=a3ComSysBridgePortReceiveAllPathFilteredFrames, a3ComSysBridgePortTable=a3ComSysBridgePortTable, a3ComSysBridgeAddressLearnMode=a3ComSysBridgeAddressLearnMode, a3ComSysBridgeVlanPortAddressPortIndex=a3ComSysBridgeVlanPortAddressPortIndex, a3ComSysBridgeAddressThreshold=a3ComSysBridgeAddressThreshold, a3ComSysBridgePortStpMode=a3ComSysBridgePortStpMode, a3ComSysBridgePortCount=a3ComSysBridgePortCount, a3ComSysBridgePortFloodedUnicastFrames=a3ComSysBridgePortFloodedUnicastFrames, a3ComSysBridgeRateLimitReceiveBroadcast=a3ComSysBridgeRateLimitReceiveBroadcast, a3ComSysBridgeVlanPortAddressIndex=a3ComSysBridgeVlanPortAddressIndex, a3ComSysBridgePortForwardedUnicastOctets=a3ComSysBridgePortForwardedUnicastOctets, a3ComSysBridgePortRateLimitReceiveMulticastEnabled=a3ComSysBridgePortRateLimitReceiveMulticastEnabled, a3ComSysBridgeVlanPortAddressRemoteAddress=a3ComSysBridgeVlanPortAddressRemoteAddress, a3ComSysBridgePortTransmitMulticastPathFilteredFrames=a3ComSysBridgePortTransmitMulticastPathFilteredFrames, a3ComSysBridgePortReceiveMulticastLimit=a3ComSysBridgePortReceiveMulticastLimit, a3ComSysBridgeEntry=a3ComSysBridgeEntry, a3ComSysBridgeStpEnable=a3ComSysBridgeStpEnable, a3ComSysBridgePortReceiveMulticastLimitMultiplier=a3ComSysBridgePortReceiveMulticastLimitMultiplier, a3ComSysBridgeBackbonePort=a3ComSysBridgeBackbonePort, switchingSystemsMibs=switchingSystemsMibs, a3ComSysBridgePortForwardedFrames=a3ComSysBridgePortForwardedFrames, a3ComSysBridgePortReceiveOtherDiscards=a3ComSysBridgePortReceiveOtherDiscards, a3ComSysBridgeVlanPortAddressIsStatic=a3ComSysBridgeVlanPortAddressIsStatic, a3ComSysBridgePortAddressMaxLimit=a3ComSysBridgePortAddressMaxLimit, a3ComSysBridgeVlanPortAddressTable=a3ComSysBridgeVlanPortAddressTable, a3ComSysBridgePortTransmitAllPathFilteredFrames=a3ComSysBridgePortTransmitAllPathFilteredFrames, a3ComSysBridgePortReceiveErrorDiscards=a3ComSysBridgePortReceiveErrorDiscards, a3ComSysBridgeVlanPortAddressEntry=a3ComSysBridgeVlanPortAddressEntry, a3ComSysBridgeIndex=a3ComSysBridgeIndex, a3ComSysBridgePortRateLimitEvent=a3ComSysBridgePortRateLimitEvent, a3ComSysBridgeAddressThresholdEvent=a3ComSysBridgeAddressThresholdEvent, a3ComSysBridgePortBridgeIndex=a3ComSysBridgePortBridgeIndex, a3ComSysBridgePortAddressState=a3ComSysBridgePortAddressState, a3ComSysBridgeStpGroupAddress=a3ComSysBridgeStpGroupAddress, a3ComSysBridgePortAddressAction=a3ComSysBridgePortAddressAction, a3ComSysBridgePortReceiveInternalPathFilteredFrames=a3ComSysBridgePortReceiveInternalPathFilteredFrames, a3ComSysBridgeIpFragmentationEnabled=a3ComSysBridgeIpFragmentationEnabled, a3ComSysBridgePortForwardedMulticastFrames=a3ComSysBridgePortForwardedMulticastFrames, a3ComSysBridgePortAddressTable=a3ComSysBridgePortAddressTable, a3ComSysBridgeAddressTableSize=a3ComSysBridgeAddressTableSize, a3ComSysBridgeAddressTableCount=a3ComSysBridgeAddressTableCount, a3ComSysBridgePortLoopDetectEvent=a3ComSysBridgePortLoopDetectEvent)
