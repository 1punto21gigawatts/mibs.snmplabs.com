#
# PySNMP MIB module OMNI-gx2CEB-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/OMNI-gx2CEB-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:33:03 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection")
gx2CEB, = mibBuilder.importSymbols("GX2HFC-MIB", "gx2CEB")
motproxies, gi = mibBuilder.importSymbols("NLS-BBNIDENT-MIB", "motproxies", "gi")
trapText, trapChangedValueInteger, trapChangedObjectId, trapNetworkElemModelNumber, trapNetworkElemAvailStatus, trapIdentifier, trapChangedValueDisplayString, trapNetworkElemOperState, trapNetworkElemSerialNum, trapPerceivedSeverity, trapNetworkElemAdminState, trapNETrapLastTrapTimeStamp, trapNetworkElemAlarmStatus = mibBuilder.importSymbols("NLSBBN-TRAPS-MIB", "trapText", "trapChangedValueInteger", "trapChangedObjectId", "trapNetworkElemModelNumber", "trapNetworkElemAvailStatus", "trapIdentifier", "trapChangedValueDisplayString", "trapNetworkElemOperState", "trapNetworkElemSerialNum", "trapPerceivedSeverity", "trapNetworkElemAdminState", "trapNETrapLastTrapTimeStamp", "trapNetworkElemAlarmStatus")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
sysUpTime, = mibBuilder.importSymbols("SNMPv2-MIB", "sysUpTime")
Unsigned32, NotificationType, Bits, ModuleIdentity, NotificationType, IpAddress, Counter32, Counter64, Integer32, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, iso, TimeTicks, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "NotificationType", "Bits", "ModuleIdentity", "NotificationType", "IpAddress", "Counter32", "Counter64", "Integer32", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "iso", "TimeTicks", "MibIdentifier")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
class Float(Counter32):
    pass

gx2CEBDescriptor = MibIdentifier((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 20, 1))
gx2CEBAnalogTable = MibTable((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 20, 2), )
if mibBuilder.loadTexts: gx2CEBAnalogTable.setStatus('mandatory')
if mibBuilder.loadTexts: gx2CEBAnalogTable.setDescription('This table contains gx2CEB specific parameters with nominal and current values.')
gx2CEBAnalogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 20, 2, 1), ).setIndexNames((0, "OMNI-gx2CEB-MIB", "gx2CEBAnalogTableIndex"))
if mibBuilder.loadTexts: gx2CEBAnalogEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gx2CEBAnalogEntry.setDescription('This list contains the analog parameters and descriptions.')
gx2CEBStatusTable = MibTable((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 20, 3), )
if mibBuilder.loadTexts: gx2CEBStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: gx2CEBStatusTable.setDescription('This table contains gx2CEB specific parameters with nominal and current values.')
gx2CEBStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 20, 3, 2), ).setIndexNames((0, "OMNI-gx2CEB-MIB", "gx2CEBStatusTableIndex"))
if mibBuilder.loadTexts: gx2CEBStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gx2CEBStatusEntry.setDescription('This list contains Status parameters and descriptions.')
gx2CEBFactoryTable = MibTable((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 20, 4), )
if mibBuilder.loadTexts: gx2CEBFactoryTable.setStatus('mandatory')
if mibBuilder.loadTexts: gx2CEBFactoryTable.setDescription('This table contains gx2CEB specific parameters with nominal and current values.')
gx2CEBFactoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 20, 4, 3), ).setIndexNames((0, "OMNI-gx2CEB-MIB", "gx2CEBFactoryTableIndex"))
if mibBuilder.loadTexts: gx2CEBFactoryEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gx2CEBFactoryEntry.setDescription('This list contains Factory parameters and descriptions.')
gx2CEBAnalogTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 20, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gx2CEBAnalogTableIndex.setStatus('mandatory')
if mibBuilder.loadTexts: gx2CEBAnalogTableIndex.setDescription('The value of this object identifies the network element. This index is equal to the hfcCommonTableIndex for the same element.')
ceblabelModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 20, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceblabelModTemp.setStatus('optional')
if mibBuilder.loadTexts: ceblabelModTemp.setDescription('The value of this object provides the label of the Module Temperature Analog parameter.')
cebuomModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 20, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cebuomModTemp.setStatus('optional')
if mibBuilder.loadTexts: cebuomModTemp.setDescription('The value of this object provides the Unit of Measure of the Module Temperature Analog parameter.')
cebmajorHighModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 20, 2, 1, 4), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cebmajorHighModTemp.setStatus('mandatory')
if mibBuilder.loadTexts: cebmajorHighModTemp.setDescription("The value of this object provides the Major High alarm value of the Module Temperature Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number. All F's indicate the parameter is unused")
cebmajorLowModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 20, 2, 1, 5), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cebmajorLowModTemp.setStatus('mandatory')
if mibBuilder.loadTexts: cebmajorLowModTemp.setDescription("The value of this object provides the Major Low alarm value of the Module Temperature Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number. All F's indicate the parameter is unused")
cebminorHighModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 20, 2, 1, 6), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cebminorHighModTemp.setStatus('mandatory')
if mibBuilder.loadTexts: cebminorHighModTemp.setDescription("The value of this object provides the Minor High alarm value of the Module Temperature Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number. All F's indicate the parameter is unused")
cebminorLowModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 20, 2, 1, 7), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cebminorLowModTemp.setStatus('mandatory')
if mibBuilder.loadTexts: cebminorLowModTemp.setDescription("The value of this object provides the Minor Low alarm value of the Module Temperature Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number. All F's indicate the parameter is unused")
cebcurrentValueModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 20, 2, 1, 8), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cebcurrentValueModTemp.setStatus('mandatory')
if mibBuilder.loadTexts: cebcurrentValueModTemp.setDescription('The value of this object provides the Current value of the Module Temperature Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
cebstateFlagModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 20, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cebstateFlagModTemp.setStatus('mandatory')
if mibBuilder.loadTexts: cebstateFlagModTemp.setDescription('The value of this object provides the state of the Module Temperature Analog parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
cebminValueModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 20, 2, 1, 10), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cebminValueModTemp.setStatus('mandatory')
if mibBuilder.loadTexts: cebminValueModTemp.setDescription('The value of this object provides the minimum value the Module Temperature Analog parameter can achive. This value is a floating point number that is represented as an IEEE 32 bit number.')
cebmaxValueModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 20, 2, 1, 11), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cebmaxValueModTemp.setStatus('mandatory')
if mibBuilder.loadTexts: cebmaxValueModTemp.setDescription('The value of this object provides the maximum value the Module Temperature Analog parameter can achive. This value is a floating point number that is represented as an IEEE 32 bit number.')
cebalarmStateModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 20, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cebalarmStateModTemp.setStatus('mandatory')
if mibBuilder.loadTexts: cebalarmStateModTemp.setDescription('The value of this object provides the curent alarm state of the Module Temperature Analog parameter.')
ceblabelFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 20, 2, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceblabelFanCurrent.setStatus('optional')
if mibBuilder.loadTexts: ceblabelFanCurrent.setDescription('The value of this object provides the label of the Fan Current Analog parameter.')
cebuomFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 20, 2, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cebuomFanCurrent.setStatus('optional')
if mibBuilder.loadTexts: cebuomFanCurrent.setDescription('The value of this object provides the Unit of Measure of the Fan Current Analog parameter.')
cebmajorHighFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 20, 2, 1, 15), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cebmajorHighFanCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: cebmajorHighFanCurrent.setDescription("The value of this object provides the Major High alarm value of the Fan Current Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number. All F's indicate the parameter is unused")
cebmajorLowFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 20, 2, 1, 16), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cebmajorLowFanCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: cebmajorLowFanCurrent.setDescription("The value of this object provides the Major Low alarm value of the Fan Current Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number. All F's indicate the parameter is unused")
cebminorHighFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 20, 2, 1, 17), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cebminorHighFanCurrent.setStatus('obsolete')
if mibBuilder.loadTexts: cebminorHighFanCurrent.setDescription("The value of this object provides the Minor High alarm value of the Fan Current Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number. All F's indicate the parameter is unused")
cebminorLowFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 20, 2, 1, 18), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cebminorLowFanCurrent.setStatus('obsolete')
if mibBuilder.loadTexts: cebminorLowFanCurrent.setDescription("The value of this object provides the Minor Low alarm value of the Fan Current Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number. All F's indicate the parameter is unused")
cebcurrentValueFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 20, 2, 1, 19), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cebcurrentValueFanCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: cebcurrentValueFanCurrent.setDescription('The value of this object provides the Current value of the Fan Current Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
cebstateFlagFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 20, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cebstateFlagFanCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: cebstateFlagFanCurrent.setDescription('The value of this object provides the state of the Fan Current Analog parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
cebminValueFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 20, 2, 1, 21), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cebminValueFanCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: cebminValueFanCurrent.setDescription('The value of this object provides the minimum value the Fan Current Analog parameter can achive. This value is a floating point number that is represented as an IEEE 32 bit number.')
cebmaxValueFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 20, 2, 1, 22), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cebmaxValueFanCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: cebmaxValueFanCurrent.setDescription('The value of this object provides the maximum value the Fan Current Analog parameter can achive. This value is a floating point number that is represented as an IEEE 32 bit number.')
cebalarmStateFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 20, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cebalarmStateFanCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: cebalarmStateFanCurrent.setDescription('The value of this object provides the curent alarm state of the Fan Current Analog parameter.')
ceblabelAnalogVoltage01 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 20, 2, 1, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceblabelAnalogVoltage01.setStatus('optional')
if mibBuilder.loadTexts: ceblabelAnalogVoltage01.setDescription('The value of this object provides the label of the Analog Voltage number 01 Analog parameter.')
cebuomAnalogVoltage01 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 20, 2, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cebuomAnalogVoltage01.setStatus('optional')
if mibBuilder.loadTexts: cebuomAnalogVoltage01.setDescription('The value of this object provides the Unit of Measure of the Analog Voltage number 01 Analog parameter.')
cebmajorHighAnalogVoltage01 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 20, 2, 1, 26), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cebmajorHighAnalogVoltage01.setStatus('mandatory')
if mibBuilder.loadTexts: cebmajorHighAnalogVoltage01.setDescription("The value of this object provides the Major High alarm value Analog Voltage number 01 Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number. All F's indicate the parameter is unused")
cebmajorLowAnalogVoltage01 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 20, 2, 1, 27), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cebmajorLowAnalogVoltage01.setStatus('mandatory')
if mibBuilder.loadTexts: cebmajorLowAnalogVoltage01.setDescription("The value of this object provides the Major Low alarm value Analog Voltage number 01 Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number. All F's indicate the parameter is unused")
cebminorHighAnalogVoltage01 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 20, 2, 1, 28), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cebminorHighAnalogVoltage01.setStatus('mandatory')
if mibBuilder.loadTexts: cebminorHighAnalogVoltage01.setDescription("The value of this object provides the Minor High alarm value Analog Voltage number 01 Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number. All F's indicate the parameter is unused")
cebminorLowAnalogVoltage01 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 20, 2, 1, 29), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cebminorLowAnalogVoltage01.setStatus('mandatory')
if mibBuilder.loadTexts: cebminorLowAnalogVoltage01.setDescription("The value of this object provides the Minor Low alarm value Analog Voltage number 01 Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number. All F's indicate the parameter is unused")
cebcurrentValueAnalogVoltage01 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 20, 2, 1, 30), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cebcurrentValueAnalogVoltage01.setStatus('mandatory')
if mibBuilder.loadTexts: cebcurrentValueAnalogVoltage01.setDescription('The value of this object provides the Current value Analog Voltage number 01 Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
cebstateFlagAnalogVoltage01 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 20, 2, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cebstateFlagAnalogVoltage01.setStatus('mandatory')
if mibBuilder.loadTexts: cebstateFlagAnalogVoltage01.setDescription('The value of this object provides the state of the Analog Voltage number 01 Analog parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
cebminValueAnalogVoltage01 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 20, 2, 1, 32), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cebminValueAnalogVoltage01.setStatus('mandatory')
if mibBuilder.loadTexts: cebminValueAnalogVoltage01.setDescription('The value of this object provides the minimum value the Analog Voltage number 01 Analog parameter can achive. This value is a floating point number that is represented as an IEEE 32 bit number.')
cebmaxValueAnalogVoltage01 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 20, 2, 1, 33), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cebmaxValueAnalogVoltage01.setStatus('mandatory')
if mibBuilder.loadTexts: cebmaxValueAnalogVoltage01.setDescription('The value of this object provides the maximum value the Analog Voltage number 01 Analog parameter can achive. This value is a floating point number that is represented as an IEEE 32 bit number.')
cebalarmStateAnalogVoltage01 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 20, 2, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cebalarmStateAnalogVoltage01.setStatus('mandatory')
if mibBuilder.loadTexts: cebalarmStateAnalogVoltage01.setDescription('The value of this object provides the curent alarm state of the Analog Voltage number 01 Analog parameter.')
ceblabelAnalogVoltage02 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 20, 2, 1, 35), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceblabelAnalogVoltage02.setStatus('optional')
if mibBuilder.loadTexts: ceblabelAnalogVoltage02.setDescription('The value of this object provides the label of the Analog Voltage number 02 Analog parameter.')
cebuomAnalogVoltage02 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 20, 2, 1, 36), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cebuomAnalogVoltage02.setStatus('optional')
if mibBuilder.loadTexts: cebuomAnalogVoltage02.setDescription('The value of this object provides the Unit of Measure of the Analog Voltage number 02 Analog parameter.')
cebmajorHighAnalogVoltage02 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 20, 2, 1, 37), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cebmajorHighAnalogVoltage02.setStatus('mandatory')
if mibBuilder.loadTexts: cebmajorHighAnalogVoltage02.setDescription("The value of this object provides the Major High alarm value Analog Voltage number 02 Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number. All F's indicate the parameter is unused")
cebmajorLowAnalogVoltage02 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 20, 2, 1, 38), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cebmajorLowAnalogVoltage02.setStatus('mandatory')
if mibBuilder.loadTexts: cebmajorLowAnalogVoltage02.setDescription("The value of this object provides the Major Low alarm value Analog Voltage number 02 Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number. All F's indicate the parameter is unused")
cebminorHighAnalogVoltage02 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 20, 2, 1, 39), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cebminorHighAnalogVoltage02.setStatus('mandatory')
if mibBuilder.loadTexts: cebminorHighAnalogVoltage02.setDescription("The value of this object provides the Minor High alarm value Analog Voltage number 02 Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number. All F's indicate the parameter is unused")
cebminorLowAnalogVoltage02 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 20, 2, 1, 40), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cebminorLowAnalogVoltage02.setStatus('mandatory')
if mibBuilder.loadTexts: cebminorLowAnalogVoltage02.setDescription("The value of this object provides the Minor Low alarm value Analog Voltage number 02 Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number. All F's indicate the parameter is unused")
cebcurrentValueAnalogVoltage02 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 20, 2, 1, 41), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cebcurrentValueAnalogVoltage02.setStatus('mandatory')
if mibBuilder.loadTexts: cebcurrentValueAnalogVoltage02.setDescription('The value of this object provides the Current value Analog Voltage number 02 Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
cebstateFlagAnalogVoltage02 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 20, 2, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cebstateFlagAnalogVoltage02.setStatus('mandatory')
if mibBuilder.loadTexts: cebstateFlagAnalogVoltage02.setDescription('The value of this object provides the state of the Analog Voltage number 02 Analog parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
cebminValueAnalogVoltage02 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 20, 2, 1, 43), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cebminValueAnalogVoltage02.setStatus('mandatory')
if mibBuilder.loadTexts: cebminValueAnalogVoltage02.setDescription('The value of this object provides the minimum value the Analog Voltage number 02 Analog parameter can achive. This value is a floating point number that is represented as an IEEE 32 bit number.')
cebmaxValueAnalogVoltage02 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 20, 2, 1, 44), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cebmaxValueAnalogVoltage02.setStatus('mandatory')
if mibBuilder.loadTexts: cebmaxValueAnalogVoltage02.setDescription('The value of this object provides the maximum value the Analog Voltage number 02 Analog parameter can achive. This value is a floating point number that is represented as an IEEE 32 bit number.')
cebalarmStateAnalogVoltage02 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 20, 2, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cebalarmStateAnalogVoltage02.setStatus('mandatory')
if mibBuilder.loadTexts: cebalarmStateAnalogVoltage02.setDescription('The value of this object provides the curent alarm state of the Analog Voltage number 02 Analog parameter.')
ceblabelAnalogVoltage03 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 20, 2, 1, 46), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceblabelAnalogVoltage03.setStatus('optional')
if mibBuilder.loadTexts: ceblabelAnalogVoltage03.setDescription('The value of this object provides the label of the Analog Voltage number 03 Analog parameter.')
cebuomAnalogVoltage03 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 20, 2, 1, 47), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cebuomAnalogVoltage03.setStatus('optional')
if mibBuilder.loadTexts: cebuomAnalogVoltage03.setDescription('The value of this object provides the Unit of Measure of the Analog Voltage number 03 Analog parameter.')
cebmajorHighAnalogVoltage03 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 20, 2, 1, 48), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cebmajorHighAnalogVoltage03.setStatus('mandatory')
if mibBuilder.loadTexts: cebmajorHighAnalogVoltage03.setDescription("The value of this object provides the Major High alarm value Analog Voltage number 03 Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number. All F's indicate the parameter is unused")
cebmajorLowAnalogVoltage03 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 20, 2, 1, 49), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cebmajorLowAnalogVoltage03.setStatus('mandatory')
if mibBuilder.loadTexts: cebmajorLowAnalogVoltage03.setDescription("The value of this object provides the Major Low alarm value Analog Voltage number 03 Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number. All F's indicate the parameter is unused")
cebminorHighAnalogVoltage03 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 20, 2, 1, 50), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cebminorHighAnalogVoltage03.setStatus('mandatory')
if mibBuilder.loadTexts: cebminorHighAnalogVoltage03.setDescription("The value of this object provides the Minor High alarm value Analog Voltage number 03 Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number. All F's indicate the parameter is unused")
cebminorLowAnalogVoltage03 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 20, 2, 1, 51), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cebminorLowAnalogVoltage03.setStatus('mandatory')
if mibBuilder.loadTexts: cebminorLowAnalogVoltage03.setDescription("The value of this object provides the Minor Low alarm value Analog Voltage number 03 Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number. All F's indicate the parameter is unused")
cebcurrentValueAnalogVoltage03 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 20, 2, 1, 52), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cebcurrentValueAnalogVoltage03.setStatus('mandatory')
if mibBuilder.loadTexts: cebcurrentValueAnalogVoltage03.setDescription('The value of this object provides the Current value Analog Voltage number 03 Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
cebstateFlagAnalogVoltage03 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 20, 2, 1, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cebstateFlagAnalogVoltage03.setStatus('mandatory')
if mibBuilder.loadTexts: cebstateFlagAnalogVoltage03.setDescription('The value of this object provides the state of the Analog Voltage number 03 Analog parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
cebminValueAnalogVoltage03 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 20, 2, 1, 54), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cebminValueAnalogVoltage03.setStatus('mandatory')
if mibBuilder.loadTexts: cebminValueAnalogVoltage03.setDescription('The value of this object provides the minimum value the Analog Voltage number 03 Analog parameter can achive. This value is a floating point number that is represented as an IEEE 32 bit number.')
cebmaxValueAnalogVoltage03 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 20, 2, 1, 55), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cebmaxValueAnalogVoltage03.setStatus('mandatory')
if mibBuilder.loadTexts: cebmaxValueAnalogVoltage03.setDescription('The value of this object provides the maximum value the Analog Voltage number 03 Analog parameter can achive. This value is a floating point number that is represented as an IEEE 32 bit number.')
cebalarmStateAnalogVoltage03 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 20, 2, 1, 56), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cebalarmStateAnalogVoltage03.setStatus('mandatory')
if mibBuilder.loadTexts: cebalarmStateAnalogVoltage03.setDescription('The value of this object provides the curent alarm state of the Analog Voltage number 03 Analog parameter.')
ceblabelAnalogVoltage04 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 20, 2, 1, 57), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceblabelAnalogVoltage04.setStatus('optional')
if mibBuilder.loadTexts: ceblabelAnalogVoltage04.setDescription('The value of this object provides the label of the Analog Voltage number 04 Analog parameter.')
cebuomAnalogVoltage04 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 20, 2, 1, 58), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cebuomAnalogVoltage04.setStatus('optional')
if mibBuilder.loadTexts: cebuomAnalogVoltage04.setDescription('The value of this object provides the Unit of Measure of the Analog Voltage number 04 Analog parameter.')
cebmajorHighAnalogVoltage04 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 20, 2, 1, 59), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cebmajorHighAnalogVoltage04.setStatus('mandatory')
if mibBuilder.loadTexts: cebmajorHighAnalogVoltage04.setDescription("The value of this object provides the Major High alarm value Analog Voltage number 04 Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number. All F's indicate the parameter is unused")
cebmajorLowAnalogVoltage04 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 20, 2, 1, 60), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cebmajorLowAnalogVoltage04.setStatus('mandatory')
if mibBuilder.loadTexts: cebmajorLowAnalogVoltage04.setDescription("The value of this object provides the Major Low alarm value Analog Voltage number 04 Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number. All F's indicate the parameter is unused")
cebminorHighAnalogVoltage04 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 20, 2, 1, 61), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cebminorHighAnalogVoltage04.setStatus('mandatory')
if mibBuilder.loadTexts: cebminorHighAnalogVoltage04.setDescription("The value of this object provides the Minor High alarm value Analog Voltage number 04 Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number. All F's indicate the parameter is unused")
cebminorLowAnalogVoltage04 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 20, 2, 1, 62), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cebminorLowAnalogVoltage04.setStatus('mandatory')
if mibBuilder.loadTexts: cebminorLowAnalogVoltage04.setDescription("The value of this object provides the Minor Low alarm value Analog Voltage number 04 Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number. All F's indicate the parameter is unused")
cebcurrentValueAnalogVoltage04 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 20, 2, 1, 63), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cebcurrentValueAnalogVoltage04.setStatus('mandatory')
if mibBuilder.loadTexts: cebcurrentValueAnalogVoltage04.setDescription('The value of this object provides the Current value Analog Voltage number 04 Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
cebstateFlagAnalogVoltage04 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 20, 2, 1, 64), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cebstateFlagAnalogVoltage04.setStatus('mandatory')
if mibBuilder.loadTexts: cebstateFlagAnalogVoltage04.setDescription('The value of this object provides the state of the Analog Voltage number 04 Analog parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
cebminValueAnalogVoltage04 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 20, 2, 1, 65), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cebminValueAnalogVoltage04.setStatus('mandatory')
if mibBuilder.loadTexts: cebminValueAnalogVoltage04.setDescription('The value of this object provides the minimum value the Analog Voltage number 04 Analog parameter can achive. This value is a floating point number that is represented as an IEEE 32 bit number.')
cebmaxValueAnalogVoltage04 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 20, 2, 1, 66), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cebmaxValueAnalogVoltage04.setStatus('mandatory')
if mibBuilder.loadTexts: cebmaxValueAnalogVoltage04.setDescription('The value of this object provides the maximum value the Analog Voltage number 04 Analog parameter can achive. This value is a floating point number that is represented as an IEEE 32 bit number.')
cebalarmStateAnalogVoltage04 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 20, 2, 1, 67), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cebalarmStateAnalogVoltage04.setStatus('mandatory')
if mibBuilder.loadTexts: cebalarmStateAnalogVoltage04.setDescription('The value of this object provides the curent alarm state of the Analog Voltage number 04 Analog parameter.')
ceblabelAnalogVoltage05 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 20, 2, 1, 68), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceblabelAnalogVoltage05.setStatus('optional')
if mibBuilder.loadTexts: ceblabelAnalogVoltage05.setDescription('The value of this object provides the label of the Analog Voltage number 05 Analog parameter.')
cebuomAnalogVoltage05 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 20, 2, 1, 69), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cebuomAnalogVoltage05.setStatus('optional')
if mibBuilder.loadTexts: cebuomAnalogVoltage05.setDescription('The value of this object provides the Unit of Measure of the Analog Voltage number 05 Analog parameter.')
cebmajorHighAnalogVoltage05 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 20, 2, 1, 70), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cebmajorHighAnalogVoltage05.setStatus('mandatory')
if mibBuilder.loadTexts: cebmajorHighAnalogVoltage05.setDescription("The value of this object provides the Major High alarm value Analog Voltage number 05 Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number. All F's indicate the parameter is unused")
cebmajorLowAnalogVoltage05 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 20, 2, 1, 71), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cebmajorLowAnalogVoltage05.setStatus('mandatory')
if mibBuilder.loadTexts: cebmajorLowAnalogVoltage05.setDescription("The value of this object provides the Major Low alarm value Analog Voltage number 05 Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number. All F's indicate the parameter is unused")
cebminorHighAnalogVoltage05 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 20, 2, 1, 72), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cebminorHighAnalogVoltage05.setStatus('mandatory')
if mibBuilder.loadTexts: cebminorHighAnalogVoltage05.setDescription("The value of this object provides the Minor High alarm value Analog Voltage number 05 Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number. All F's indicate the parameter is unused")
cebminorLowAnalogVoltage05 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 20, 2, 1, 73), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cebminorLowAnalogVoltage05.setStatus('mandatory')
if mibBuilder.loadTexts: cebminorLowAnalogVoltage05.setDescription("The value of this object provides the Minor Low alarm value Analog Voltage number 05 Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number. All F's indicate the parameter is unused")
cebcurrentValueAnalogVoltage05 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 20, 2, 1, 74), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cebcurrentValueAnalogVoltage05.setStatus('mandatory')
if mibBuilder.loadTexts: cebcurrentValueAnalogVoltage05.setDescription('The value of this object provides the Current value Analog Voltage number 05 Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
cebstateFlagAnalogVoltage05 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 20, 2, 1, 75), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cebstateFlagAnalogVoltage05.setStatus('mandatory')
if mibBuilder.loadTexts: cebstateFlagAnalogVoltage05.setDescription('The value of this object provides the state of the Analog Voltage number 05 Analog parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
cebminValueAnalogVoltage05 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 20, 2, 1, 76), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cebminValueAnalogVoltage05.setStatus('mandatory')
if mibBuilder.loadTexts: cebminValueAnalogVoltage05.setDescription('The value of this object provides the minimum value the Analog Voltage number 05 Analog parameter can achive. This value is a floating point number that is represented as an IEEE 32 bit number.')
cebmaxValueAnalogVoltage05 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 20, 2, 1, 77), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cebmaxValueAnalogVoltage05.setStatus('mandatory')
if mibBuilder.loadTexts: cebmaxValueAnalogVoltage05.setDescription('The value of this object provides the maximum value the Analog Voltage number 05 Analog parameter can achive. This value is a floating point number that is represented as an IEEE 32 bit number.')
cebalarmStateAnalogVoltage05 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 20, 2, 1, 78), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cebalarmStateAnalogVoltage05.setStatus('mandatory')
if mibBuilder.loadTexts: cebalarmStateAnalogVoltage05.setDescription('The value of this object provides the curent alarm state of the Analog Voltage number 01 Analog parameter.')
gx2CEBStatusTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 20, 3, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gx2CEBStatusTableIndex.setStatus('mandatory')
if mibBuilder.loadTexts: gx2CEBStatusTableIndex.setDescription('The value of this object identifies the network element. This index is equal to the hfcCommonTableIndex for the same element.')
ceblabelBoot = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 20, 3, 2, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceblabelBoot.setStatus('optional')
if mibBuilder.loadTexts: ceblabelBoot.setDescription('The value of this object provides the label of the Boot Status Status parameter.')
cebvalueBoot = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 20, 3, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cebvalueBoot.setStatus('mandatory')
if mibBuilder.loadTexts: cebvalueBoot.setDescription('The value of this object provides the current state of the parameter (0-Ok, 1-Undetermined 2-Warning, 3-Minor, 4-Major, 5-Critical).')
cebstateflagBoot = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 20, 3, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cebstateflagBoot.setStatus('mandatory')
if mibBuilder.loadTexts: cebstateflagBoot.setDescription('The value of this object provides the state of the the parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
ceblabelFlash = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 20, 3, 2, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceblabelFlash.setStatus('optional')
if mibBuilder.loadTexts: ceblabelFlash.setDescription('The value of this object provides the label of the Flash Status Status parameter.')
cebvalueFlash = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 20, 3, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cebvalueFlash.setStatus('mandatory')
if mibBuilder.loadTexts: cebvalueFlash.setDescription('The value of this object provides the current state of the parameter (0-Ok, 1-Undetermined 2-Warning, 3-Minor, 4-Major, 5-Critical).')
cebstateflagFlash = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 20, 3, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cebstateflagFlash.setStatus('mandatory')
if mibBuilder.loadTexts: cebstateflagFlash.setDescription('The value of this object provides the state of the the parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
ceblabelFactoryDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 20, 3, 2, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceblabelFactoryDataCRC.setStatus('optional')
if mibBuilder.loadTexts: ceblabelFactoryDataCRC.setDescription('The value of this object provides the label of the Factory Data CRC Status parameter.')
cebvalueFactoryDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 20, 3, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cebvalueFactoryDataCRC.setStatus('mandatory')
if mibBuilder.loadTexts: cebvalueFactoryDataCRC.setDescription('The value of this object provides the current state of the parameter (0-Ok, 1-Undetermined 2-Warning, 3-Minor, 4-Major, 5-Critical).')
cebstateflagFactoryDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 20, 3, 2, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cebstateflagFactoryDataCRC.setStatus('mandatory')
if mibBuilder.loadTexts: cebstateflagFactoryDataCRC.setDescription('The value of this object provides the state of the the parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
ceblabelAlarmDataCrc = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 20, 3, 2, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceblabelAlarmDataCrc.setStatus('optional')
if mibBuilder.loadTexts: ceblabelAlarmDataCrc.setDescription('The value of this object provides the label of the Alarm Data Crc parameter.')
cebvalueAlarmDataCrc = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 20, 3, 2, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cebvalueAlarmDataCrc.setStatus('mandatory')
if mibBuilder.loadTexts: cebvalueAlarmDataCrc.setDescription('The value of this object provides the current state of the parameter (0-Ok, 1-Undetermined 2-Warning, 3-Minor, 4-Major, 5-Critical).')
cebstateflagAlarmDataCrc = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 20, 3, 2, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cebstateflagAlarmDataCrc.setStatus('mandatory')
if mibBuilder.loadTexts: cebstateflagAlarmDataCrc.setDescription('The value of this object provides the state of the the parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
gx2CEBFactoryTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 20, 4, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gx2CEBFactoryTableIndex.setStatus('mandatory')
if mibBuilder.loadTexts: gx2CEBFactoryTableIndex.setDescription('The value of this object identifies the network element. This index is equal to the hfcCommonTableIndex for the same element.')
cebbootControlByte = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 20, 4, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cebbootControlByte.setStatus('mandatory')
if mibBuilder.loadTexts: cebbootControlByte.setDescription('The value of this object indicates which bank the firmware is currently being boot from.')
cebbootStatusByte = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 20, 4, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cebbootStatusByte.setStatus('mandatory')
if mibBuilder.loadTexts: cebbootStatusByte.setDescription('This object indicates the status of the last boot. Bit 2 = Bank 0/1 Active (0 = Bank 0, 1 = Bank 1), Bit 1 = Bank 1 Fail and Bit 0 = Bank 0 Fail (0 = Pass, 1 = Fail)')
cebbank1CRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 20, 4, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cebbank1CRC.setStatus('mandatory')
if mibBuilder.loadTexts: cebbank1CRC.setDescription('This object provides the CRC code of bank 0. The display formate for the data is Hex.')
cebbank2CRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 20, 4, 3, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cebbank2CRC.setStatus('mandatory')
if mibBuilder.loadTexts: cebbank2CRC.setDescription('This object provides the CRC code of bank 1.The display formate for the data is Hex.')
cebprgEEPROMByte = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 20, 4, 3, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cebprgEEPROMByte.setStatus('mandatory')
if mibBuilder.loadTexts: cebprgEEPROMByte.setDescription('This object indicates if the EEPROM has been programmed')
cebfactoryCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 20, 4, 3, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cebfactoryCRC.setStatus('mandatory')
if mibBuilder.loadTexts: cebfactoryCRC.setDescription('This object provides the CRC code for the Factory data.')
cebcalculateCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 20, 4, 3, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("factory", 1), ("na", 2), ("alarm", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cebcalculateCRC.setStatus('obsolete')
if mibBuilder.loadTexts: cebcalculateCRC.setDescription('This object indicates which of the Enums will have the CRC calculated.')
cebhourMeter = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 20, 4, 3, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cebhourMeter.setStatus('mandatory')
if mibBuilder.loadTexts: cebhourMeter.setDescription('This object provides the hour meter reading of the module.')
cebflashPrgCntA = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 20, 4, 3, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cebflashPrgCntA.setStatus('mandatory')
if mibBuilder.loadTexts: cebflashPrgCntA.setDescription('This object provides the number of times Bank 1 flash has been programmed.')
cebflashPrgCntB = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 20, 4, 3, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cebflashPrgCntB.setStatus('mandatory')
if mibBuilder.loadTexts: cebflashPrgCntB.setDescription('This object provides the number of times Bank 1 flash has been programmed.')
cebflashBankARev = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 20, 4, 3, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cebflashBankARev.setStatus('mandatory')
if mibBuilder.loadTexts: cebflashBankARev.setDescription('This object provides the revision of flash bank 0. The rev is 2 characters.')
cebflashBankBRev = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 20, 4, 3, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cebflashBankBRev.setStatus('mandatory')
if mibBuilder.loadTexts: cebflashBankBRev.setDescription('This object provides the revision of flash bank 1. The rev is 2 characters.')
trapCEBConfigChangeInteger = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 20) + (0,1)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapCEBConfigChangeInteger.setDescription("This trap is issued if configuration of a single variable with integer type was changed (via ANY interface). TrapChangedValueInteger variable may contain current reading of that variable. trapPerceivedSeverity - 'indeterminate'")
trapCEBConfigChangeDisplayString = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 20) + (0,2)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueDisplayString"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapCEBConfigChangeDisplayString.setDescription("This trap is issued if configuration of a single variable with DispalayString type was changed (via ANY interface). TrapChangedValueDisplayString variable may contain current reading of that variable. trapPerceivedSeverity - 'indeterminate'")
trapCEBfanCurrentAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 20) + (0,3)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapCEBfanCurrentAlarm.setDescription('This trap is issued when the Fan Current parameter goes out of range. trapAdditionalInfoInteger variable contains current reading of the this parameter.')
trapCEBModuleTempAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 20) + (0,4)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapCEBModuleTempAlarm.setDescription('This trap is issued when the Module Temperature parameter goes out of range. trapAdditionalInfoInteger variable contains current reading of the this parameter.')
trapCEBFlashAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 20) + (0,5)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapCEBFlashAlarm.setDescription('This trap is issued when the Laser Modules detects an error during Flash memory operations.')
trapCEBBankBootAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 20) + (0,6)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapCEBBankBootAlarm.setDescription('This trap is issued when the Laser Modules detects an error while booting from bank 0 or bank 1.')
trapCEBAlarmDataCRCAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 20) + (0,7)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapCEBAlarmDataCRCAlarm.setDescription('This trap is issued when the Alarm Data CRC is incorrect.')
trapCEBFactoryDataCRCAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 20) + (0,8)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapCEBFactoryDataCRCAlarm.setDescription('This trap is issued when the Factory Data CRC is incorrect.')
mibBuilder.exportSymbols("OMNI-gx2CEB-MIB", trapCEBFactoryDataCRCAlarm=trapCEBFactoryDataCRCAlarm, cebvalueBoot=cebvalueBoot, cebcurrentValueAnalogVoltage05=cebcurrentValueAnalogVoltage05, gx2CEBFactoryEntry=gx2CEBFactoryEntry, ceblabelFlash=ceblabelFlash, cebstateflagBoot=cebstateflagBoot, gx2CEBAnalogTable=gx2CEBAnalogTable, ceblabelModTemp=ceblabelModTemp, cebstateFlagAnalogVoltage03=cebstateFlagAnalogVoltage03, cebmajorLowAnalogVoltage02=cebmajorLowAnalogVoltage02, cebmajorLowModTemp=cebmajorLowModTemp, cebmaxValueAnalogVoltage03=cebmaxValueAnalogVoltage03, cebalarmStateModTemp=cebalarmStateModTemp, cebbootControlByte=cebbootControlByte, cebminorHighAnalogVoltage01=cebminorHighAnalogVoltage01, cebuomAnalogVoltage02=cebuomAnalogVoltage02, cebstateFlagAnalogVoltage05=cebstateFlagAnalogVoltage05, gx2CEBDescriptor=gx2CEBDescriptor, ceblabelAnalogVoltage02=ceblabelAnalogVoltage02, cebuomAnalogVoltage05=cebuomAnalogVoltage05, cebalarmStateFanCurrent=cebalarmStateFanCurrent, cebvalueAlarmDataCrc=cebvalueAlarmDataCrc, cebflashPrgCntB=cebflashPrgCntB, gx2CEBStatusTable=gx2CEBStatusTable, gx2CEBStatusEntry=gx2CEBStatusEntry, cebbootStatusByte=cebbootStatusByte, cebmajorLowAnalogVoltage03=cebmajorLowAnalogVoltage03, cebminorLowAnalogVoltage03=cebminorLowAnalogVoltage03, cebflashBankARev=cebflashBankARev, cebstateflagAlarmDataCrc=cebstateflagAlarmDataCrc, Float=Float, cebminorLowAnalogVoltage02=cebminorLowAnalogVoltage02, trapCEBAlarmDataCRCAlarm=trapCEBAlarmDataCRCAlarm, cebstateflagFactoryDataCRC=cebstateflagFactoryDataCRC, cebcurrentValueAnalogVoltage02=cebcurrentValueAnalogVoltage02, cebuomAnalogVoltage01=cebuomAnalogVoltage01, cebstateFlagModTemp=cebstateFlagModTemp, ceblabelAnalogVoltage03=ceblabelAnalogVoltage03, cebvalueFlash=cebvalueFlash, cebminValueAnalogVoltage01=cebminValueAnalogVoltage01, cebmajorLowAnalogVoltage04=cebmajorLowAnalogVoltage04, cebmajorHighAnalogVoltage03=cebmajorHighAnalogVoltage03, ceblabelFactoryDataCRC=ceblabelFactoryDataCRC, cebmaxValueModTemp=cebmaxValueModTemp, cebmaxValueAnalogVoltage02=cebmaxValueAnalogVoltage02, cebminValueAnalogVoltage04=cebminValueAnalogVoltage04, cebmajorHighAnalogVoltage01=cebmajorHighAnalogVoltage01, trapCEBModuleTempAlarm=trapCEBModuleTempAlarm, cebcurrentValueModTemp=cebcurrentValueModTemp, ceblabelBoot=ceblabelBoot, gx2CEBFactoryTableIndex=gx2CEBFactoryTableIndex, cebminorHighAnalogVoltage04=cebminorHighAnalogVoltage04, cebminorHighFanCurrent=cebminorHighFanCurrent, cebcalculateCRC=cebcalculateCRC, cebminorHighAnalogVoltage02=cebminorHighAnalogVoltage02, cebminorHighModTemp=cebminorHighModTemp, cebminorLowAnalogVoltage04=cebminorLowAnalogVoltage04, cebminValueFanCurrent=cebminValueFanCurrent, cebhourMeter=cebhourMeter, cebuomAnalogVoltage03=cebuomAnalogVoltage03, trapCEBConfigChangeInteger=trapCEBConfigChangeInteger, cebminorLowAnalogVoltage01=cebminorLowAnalogVoltage01, cebmaxValueAnalogVoltage05=cebmaxValueAnalogVoltage05, cebstateFlagAnalogVoltage01=cebstateFlagAnalogVoltage01, gx2CEBAnalogTableIndex=gx2CEBAnalogTableIndex, cebalarmStateAnalogVoltage03=cebalarmStateAnalogVoltage03, cebminorHighAnalogVoltage05=cebminorHighAnalogVoltage05, cebuomAnalogVoltage04=cebuomAnalogVoltage04, cebminorLowFanCurrent=cebminorLowFanCurrent, cebmajorHighModTemp=cebmajorHighModTemp, cebvalueFactoryDataCRC=cebvalueFactoryDataCRC, cebprgEEPROMByte=cebprgEEPROMByte, cebuomModTemp=cebuomModTemp, cebcurrentValueAnalogVoltage03=cebcurrentValueAnalogVoltage03, cebbank2CRC=cebbank2CRC, trapCEBConfigChangeDisplayString=trapCEBConfigChangeDisplayString, cebalarmStateAnalogVoltage02=cebalarmStateAnalogVoltage02, ceblabelAnalogVoltage01=ceblabelAnalogVoltage01, cebuomFanCurrent=cebuomFanCurrent, cebminorLowModTemp=cebminorLowModTemp, cebstateflagFlash=cebstateflagFlash, cebminValueAnalogVoltage02=cebminValueAnalogVoltage02, trapCEBBankBootAlarm=trapCEBBankBootAlarm, trapCEBFlashAlarm=trapCEBFlashAlarm, ceblabelAlarmDataCrc=ceblabelAlarmDataCrc, ceblabelAnalogVoltage04=ceblabelAnalogVoltage04, cebminValueModTemp=cebminValueModTemp, cebflashPrgCntA=cebflashPrgCntA, cebalarmStateAnalogVoltage01=cebalarmStateAnalogVoltage01, cebmaxValueAnalogVoltage04=cebmaxValueAnalogVoltage04, cebminorHighAnalogVoltage03=cebminorHighAnalogVoltage03, cebmajorHighAnalogVoltage05=cebmajorHighAnalogVoltage05, trapCEBfanCurrentAlarm=trapCEBfanCurrentAlarm, ceblabelAnalogVoltage05=ceblabelAnalogVoltage05, cebalarmStateAnalogVoltage05=cebalarmStateAnalogVoltage05, cebalarmStateAnalogVoltage04=cebalarmStateAnalogVoltage04, cebcurrentValueFanCurrent=cebcurrentValueFanCurrent, cebmajorLowAnalogVoltage05=cebmajorLowAnalogVoltage05, cebmajorLowFanCurrent=cebmajorLowFanCurrent, cebcurrentValueAnalogVoltage01=cebcurrentValueAnalogVoltage01, cebmaxValueAnalogVoltage01=cebmaxValueAnalogVoltage01, cebstateFlagFanCurrent=cebstateFlagFanCurrent, ceblabelFanCurrent=ceblabelFanCurrent, gx2CEBAnalogEntry=gx2CEBAnalogEntry, cebstateFlagAnalogVoltage04=cebstateFlagAnalogVoltage04, cebbank1CRC=cebbank1CRC, cebflashBankBRev=cebflashBankBRev, cebstateFlagAnalogVoltage02=cebstateFlagAnalogVoltage02, cebfactoryCRC=cebfactoryCRC, gx2CEBStatusTableIndex=gx2CEBStatusTableIndex, cebmajorHighAnalogVoltage04=cebmajorHighAnalogVoltage04, cebmajorHighFanCurrent=cebmajorHighFanCurrent, cebcurrentValueAnalogVoltage04=cebcurrentValueAnalogVoltage04, gx2CEBFactoryTable=gx2CEBFactoryTable, cebmaxValueFanCurrent=cebmaxValueFanCurrent, cebminorLowAnalogVoltage05=cebminorLowAnalogVoltage05, cebminValueAnalogVoltage03=cebminValueAnalogVoltage03, cebminValueAnalogVoltage05=cebminValueAnalogVoltage05, cebmajorLowAnalogVoltage01=cebmajorLowAnalogVoltage01, cebmajorHighAnalogVoltage02=cebmajorHighAnalogVoltage02)
