#
# PySNMP MIB module GBNPlatformOAMSntpClient-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/GBNPlatformOAMSntpClient-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:18:32 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint")
gbnPlatformOAM, = mibBuilder.importSymbols("GBNPlatformOAM-MIB", "gbnPlatformOAM")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
Gauge32, Integer32, ModuleIdentity, IpAddress, TimeTicks, Counter64, NotificationType, Bits, MibIdentifier, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, ObjectIdentity, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "Integer32", "ModuleIdentity", "IpAddress", "TimeTicks", "Counter64", "NotificationType", "Bits", "MibIdentifier", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "ObjectIdentity", "iso")
TextualConvention, DisplayString, TruthValue, RowStatus, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "TruthValue", "RowStatus", "MacAddress")
gbnPlatformOAMSntpClient = ModuleIdentity((1, 3, 6, 1, 4, 1, 13464, 1, 2, 1, 1, 8))
gbnPlatformOAMSntpClient.setRevisions(('1901-07-15 20:04',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: gbnPlatformOAMSntpClient.setRevisionsDescriptions(('Initial MIB creation.',))
if mibBuilder.loadTexts: gbnPlatformOAMSntpClient.setLastUpdated('0107152004Z')
if mibBuilder.loadTexts: gbnPlatformOAMSntpClient.setOrganization('Greentech')
if mibBuilder.loadTexts: gbnPlatformOAMSntpClient.setContactInfo('Adam Armstrong E-mail: adama@observium.org')
if mibBuilder.loadTexts: gbnPlatformOAMSntpClient.setDescription('SNTP mib definition.')
sntpClientGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 13464, 1, 2, 1, 1, 8, 1))
sntpClientMode = MibScalar((1, 3, 6, 1, 4, 1, 13464, 1, 2, 1, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8))).clone(namedValues=NamedValues(("unicast", 1), ("anycast", 2), ("broadcast", 4), ("multicast", 8))).clone('broadcast')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sntpClientMode.setStatus('current')
if mibBuilder.loadTexts: sntpClientMode.setDescription(' SNTP client work ')
sntpClientPollInterval = MibScalar((1, 3, 6, 1, 4, 1, 13464, 1, 2, 1, 1, 8, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(64, 1024)).clone(1000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sntpClientPollInterval.setStatus('current')
if mibBuilder.loadTexts: sntpClientPollInterval.setDescription(' Send the request interval, for unicast and broadcast any way ')
sntpClientRetransInterval = MibScalar((1, 3, 6, 1, 4, 1, 13464, 1, 2, 1, 1, 8, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sntpClientRetransInterval.setStatus('current')
if mibBuilder.loadTexts: sntpClientRetransInterval.setDescription(' Client request retransmission interval ')
sntpClientRetransTimes = MibScalar((1, 3, 6, 1, 4, 1, 13464, 1, 2, 1, 1, 8, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sntpClientRetransTimes.setStatus('current')
if mibBuilder.loadTexts: sntpClientRetransTimes.setDescription(' Client does not receive the response, the number of retransmission requests for unicast and broadcast any way ')
sntpClientServer = MibScalar((1, 3, 6, 1, 4, 1, 13464, 1, 2, 1, 1, 8, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sntpClientServer.setStatus('current')
if mibBuilder.loadTexts: sntpClientServer.setDescription(' Are using the server address for the unicast and broadcast any way. ')
sntpClientSynthFlag = MibScalar((1, 3, 6, 1, 4, 1, 13464, 1, 2, 1, 1, 8, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sntpClientSynthFlag.setStatus('current')
if mibBuilder.loadTexts: sntpClientSynthFlag.setDescription('Whether the time the client is synchronized. ')
sntpClientState = MibScalar((1, 3, 6, 1, 4, 1, 13464, 1, 2, 1, 1, 8, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sntpClientState.setStatus('current')
if mibBuilder.loadTexts: sntpClientState.setDescription(' The current state of the client, idle state or wait for a response message status. ')
sntpClientLastSynthTime = MibScalar((1, 3, 6, 1, 4, 1, 13464, 1, 2, 1, 1, 8, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sntpClientLastSynthTime.setStatus('current')
if mibBuilder.loadTexts: sntpClientLastSynthTime.setDescription(' The last time the client synchronized time. ')
sntpClientLastSynthErrno = MibScalar((1, 3, 6, 1, 4, 1, 13464, 1, 2, 1, 1, 8, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sntpClientLastSynthErrno.setStatus('current')
if mibBuilder.loadTexts: sntpClientLastSynthErrno.setDescription('If the client fails the last time synchronization error code.')
sntpClientAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 13464, 1, 2, 1, 1, 8, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sntpClientAdminStatus.setStatus('current')
if mibBuilder.loadTexts: sntpClientAdminStatus.setDescription(' Clients open and closed. ')
sntpClientBcastDelay = MibScalar((1, 3, 6, 1, 4, 1, 13464, 1, 2, 1, 1, 8, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sntpClientBcastDelay.setStatus('current')
if mibBuilder.loadTexts: sntpClientBcastDelay.setDescription(' Working in broadcast client mode, the estimated transmission delay (milliseconds).')
sntpClientMcastTtl = MibScalar((1, 3, 6, 1, 4, 1, 13464, 1, 2, 1, 1, 8, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sntpClientMcastTtl.setStatus('current')
if mibBuilder.loadTexts: sntpClientMcastTtl.setDescription(' Work in multicast client mode, the TTL value. ')
sntpClientAuthFlag = MibScalar((1, 3, 6, 1, 4, 1, 13464, 1, 2, 1, 1, 8, 1, 13), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sntpClientAuthFlag.setStatus('current')
if mibBuilder.loadTexts: sntpClientAuthFlag.setDescription('authentication enable flag')
sntpClientUniKeyID = MibScalar((1, 3, 6, 1, 4, 1, 13464, 1, 2, 1, 1, 8, 1, 14), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sntpClientUniKeyID.setStatus('current')
if mibBuilder.loadTexts: sntpClientUniKeyID.setDescription('in client/server mode, client send request with this keyID')
sntpClientAnyKeyID = MibScalar((1, 3, 6, 1, 4, 1, 13464, 1, 2, 1, 1, 8, 1, 15), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sntpClientAnyKeyID.setStatus('current')
if mibBuilder.loadTexts: sntpClientAnyKeyID.setDescription('in anycast mode, client send request with this keyID')
sntpClientValidServerTable = MibTable((1, 3, 6, 1, 4, 1, 13464, 1, 2, 1, 1, 8, 2), )
if mibBuilder.loadTexts: sntpClientValidServerTable.setStatus('current')
if mibBuilder.loadTexts: sntpClientValidServerTable.setDescription(' Legitimate server segment table, SNTP packets according to time table to check the source address, only the source address is located in this newspaper literary talent in this table as legitimate messages, or discarded. Equivalent to access control lists. ')
sntpClientValidServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13464, 1, 2, 1, 1, 8, 2, 1), ).setIndexNames((0, "GBNPlatformOAMSntpClient-MIB", "sntpClientValidServerNet"), (0, "GBNPlatformOAMSntpClient-MIB", "sntpClientValidServerMask"))
if mibBuilder.loadTexts: sntpClientValidServerEntry.setStatus('current')
if mibBuilder.loadTexts: sntpClientValidServerEntry.setDescription(' Definition of a legitimate server list.')
sntpClientValidServerNet = MibTableColumn((1, 3, 6, 1, 4, 1, 13464, 1, 2, 1, 1, 8, 2, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sntpClientValidServerNet.setStatus('current')
if mibBuilder.loadTexts: sntpClientValidServerNet.setDescription(' Source address of the subnet number. ')
sntpClientValidServerMask = MibTableColumn((1, 3, 6, 1, 4, 1, 13464, 1, 2, 1, 1, 8, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sntpClientValidServerMask.setStatus('current')
if mibBuilder.loadTexts: sntpClientValidServerMask.setDescription(' Source address of the subnet mask. ')
sntpClientValidServerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 13464, 1, 2, 1, 1, 8, 2, 1, 3), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sntpClientValidServerRowStatus.setStatus('current')
if mibBuilder.loadTexts: sntpClientValidServerRowStatus.setDescription(' Line state. ')
sntpAuthKeyTable = MibTable((1, 3, 6, 1, 4, 1, 13464, 1, 2, 1, 1, 8, 3), )
if mibBuilder.loadTexts: sntpAuthKeyTable.setStatus('current')
if mibBuilder.loadTexts: sntpAuthKeyTable.setDescription('keys userd for SNTP authentication')
sntpAuthKeyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13464, 1, 2, 1, 1, 8, 3, 1), ).setIndexNames((0, "GBNPlatformOAMSntpClient-MIB", "sntpAuthKeyId"))
if mibBuilder.loadTexts: sntpAuthKeyEntry.setStatus('current')
if mibBuilder.loadTexts: sntpAuthKeyEntry.setDescription('define a key item.')
sntpAuthKeyId = MibTableColumn((1, 3, 6, 1, 4, 1, 13464, 1, 2, 1, 1, 8, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sntpAuthKeyId.setStatus('current')
if mibBuilder.loadTexts: sntpAuthKeyId.setDescription('key number')
sntpAuthKeyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13464, 1, 2, 1, 1, 8, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sntpAuthKeyValue.setStatus('current')
if mibBuilder.loadTexts: sntpAuthKeyValue.setDescription('key value')
sntpAuthKeyTrustFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 13464, 1, 2, 1, 1, 8, 3, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sntpAuthKeyTrustFlag.setStatus('current')
if mibBuilder.loadTexts: sntpAuthKeyTrustFlag.setDescription('whether the key is trusted')
sntpAuthKeyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 13464, 1, 2, 1, 1, 8, 3, 1, 4), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sntpAuthKeyRowStatus.setStatus('current')
if mibBuilder.loadTexts: sntpAuthKeyRowStatus.setDescription('row status')
mibBuilder.exportSymbols("GBNPlatformOAMSntpClient-MIB", sntpClientPollInterval=sntpClientPollInterval, gbnPlatformOAMSntpClient=gbnPlatformOAMSntpClient, sntpAuthKeyId=sntpAuthKeyId, sntpAuthKeyValue=sntpAuthKeyValue, sntpAuthKeyTable=sntpAuthKeyTable, sntpClientLastSynthTime=sntpClientLastSynthTime, sntpClientValidServerMask=sntpClientValidServerMask, sntpClientValidServerTable=sntpClientValidServerTable, PYSNMP_MODULE_ID=gbnPlatformOAMSntpClient, sntpClientState=sntpClientState, sntpClientBcastDelay=sntpClientBcastDelay, sntpClientRetransInterval=sntpClientRetransInterval, sntpClientValidServerRowStatus=sntpClientValidServerRowStatus, sntpClientSynthFlag=sntpClientSynthFlag, sntpClientRetransTimes=sntpClientRetransTimes, sntpClientAuthFlag=sntpClientAuthFlag, sntpClientMcastTtl=sntpClientMcastTtl, sntpClientUniKeyID=sntpClientUniKeyID, sntpAuthKeyRowStatus=sntpAuthKeyRowStatus, sntpClientValidServerNet=sntpClientValidServerNet, sntpClientLastSynthErrno=sntpClientLastSynthErrno, sntpAuthKeyEntry=sntpAuthKeyEntry, sntpClientMode=sntpClientMode, sntpClientAnyKeyID=sntpClientAnyKeyID, sntpClientServer=sntpClientServer, sntpAuthKeyTrustFlag=sntpAuthKeyTrustFlag, sntpClientValidServerEntry=sntpClientValidServerEntry, sntpClientGeneral=sntpClientGeneral, sntpClientAdminStatus=sntpClientAdminStatus)
