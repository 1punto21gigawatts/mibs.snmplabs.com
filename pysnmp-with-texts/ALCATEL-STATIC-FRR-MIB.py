#
# PySNMP MIB module ALCATEL-STATIC-FRR-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ALCATEL-STATIC-FRR-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:20:39 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
softentIND1MplsFrr, = mibBuilder.importSymbols("ALCATEL-IND1-BASE", "softentIND1MplsFrr")
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint")
InterfaceIndexOrZero, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero")
InetAddressType, InetAddressIPv4 = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddressIPv4")
MplsObjectOwner, MplsLabel = mibBuilder.importSymbols("MPLS-LSR-MIB", "MplsObjectOwner", "MplsLabel")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibIdentifier, TimeTicks, NotificationType, Counter64, IpAddress, Unsigned32, Counter32, ModuleIdentity, Integer32, Gauge32, iso, Bits, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "TimeTicks", "NotificationType", "Counter64", "IpAddress", "Unsigned32", "Counter32", "ModuleIdentity", "Integer32", "Gauge32", "iso", "Bits", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
RowStatus, TruthValue, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TruthValue", "TextualConvention", "DisplayString")
TmnxOperState, = mibBuilder.importSymbols("TIMETRA-TC-MIB", "TmnxOperState")
alcatelStaticFrrMIBModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 53, 1))
alcatelStaticFrrMIBModule.setRevisions(('1909-02-02 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: alcatelStaticFrrMIBModule.setRevisionsDescriptions(('Rev 1.0 28 Mar 2009 00:00 1.0 release of the ALCATEL-STATIC-FRR-MIB.',))
if mibBuilder.loadTexts: alcatelStaticFrrMIBModule.setLastUpdated('0801010000Z')
if mibBuilder.loadTexts: alcatelStaticFrrMIBModule.setOrganization('Alcatel-Lucent Inc')
if mibBuilder.loadTexts: alcatelStaticFrrMIBModule.setContactInfo('Please consult with Customer Service to ensure the most appropriate version of this document is used with the products in question: Alcatel-Lucent, Enterprise Solutions Division (Formerly Alcatel Internetworking, Incorporated) 26801 West Agoura Road Agoura Hills, CA 91301-5122 United States Of America Telephone: North America +1 800 995 2696 Latin America +1 877 919 9526 Europe +31 23 556 0100 Asia +65 394 7933 All Other +1 818 878 4507 Electronic Mail: support@ind.alcatel.com World Wide Web: http://alcatel-lucent.com/wps/portal/enterprise File Transfer Protocol: ftp://ftp.ind.alcatel.com/pub/products/mibs')
if mibBuilder.loadTexts: alcatelStaticFrrMIBModule.setDescription("This document is the SNMP MIB module to manage and provision Static FRR extensions for the Alcatel 9x00 device. Copyright 2000-2009 Alcatel-Lucent. All rights reserved. Reproduction of this document is authorized on the condition that the foregoing copyright notice is included. This SNMP MIB module (Specification) embodies Alcatel's proprietary intellectual property. Alcatel retains all title and ownership in the Specification, including any revisions. Alcatel grants all interested parties a non-exclusive license to use and distribute an unmodified copy of this Specification in connection with management of Alcatel products, and without fee, provided this copyright notice and license appear on all copies. This Specification is supplied 'as is', and Alcatel makes no warranty, either express or implied, as to the use, operation, condition, or performance of the Specification.")
alcatelStaticFrrMIBModuleObjs = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 53, 1, 1))
if mibBuilder.loadTexts: alcatelStaticFrrMIBModuleObjs.setStatus('current')
if mibBuilder.loadTexts: alcatelStaticFrrMIBModuleObjs.setDescription('Branch for ALU FRR Managed Objects.')
vRtrStaticFrrMplsInSegmentTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 53, 1, 1, 1), )
if mibBuilder.loadTexts: vRtrStaticFrrMplsInSegmentTable.setStatus('current')
if mibBuilder.loadTexts: vRtrStaticFrrMplsInSegmentTable.setDescription('This table contains a collection of incoming segments to an LSR.')
vRtrStaticFrrMplsInSegmentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 53, 1, 1, 1, 1), ).setIndexNames((0, "ALCATEL-STATIC-FRR-MIB", "vRtrStaticFrrMplsInSegmentIfIndex"), (0, "ALCATEL-STATIC-FRR-MIB", "vRtrStaticFrrMplsInSegmentLabel"))
if mibBuilder.loadTexts: vRtrStaticFrrMplsInSegmentEntry.setStatus('current')
if mibBuilder.loadTexts: vRtrStaticFrrMplsInSegmentEntry.setDescription('An entry in this table represents one incoming segment. An entry can be created by a network administrator or an SNMP agent. The creator of the entry is denoted by vRtrStaticFrrMplsInSegmentOwner. An entry in this table is indexed by the ifIndex of the incoming interface and the (top) label.')
vRtrStaticFrrMplsInSegmentIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 53, 1, 1, 1, 1, 1), InterfaceIndexOrZero()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: vRtrStaticFrrMplsInSegmentIfIndex.setStatus('current')
if mibBuilder.loadTexts: vRtrStaticFrrMplsInSegmentIfIndex.setDescription('This is a unique index for an entry in the StaticFrrMplsInSegmentTable. This value represents the interface index for the incoming MPLS interface. A value of zero represents an incoming label from the per-platform label space. In this case, the vRtrStaticFrrMplsInSegmentLabel is interpreted to be an MPLS-type label.')
vRtrStaticFrrMplsInSegmentLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 53, 1, 1, 1, 1, 2), MplsLabel()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: vRtrStaticFrrMplsInSegmentLabel.setStatus('current')
if mibBuilder.loadTexts: vRtrStaticFrrMplsInSegmentLabel.setDescription('The incoming label for this protected ingress segment.')
vRtrStaticFrrMplsInSegmentNPop = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 53, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrStaticFrrMplsInSegmentNPop.setStatus('current')
if mibBuilder.loadTexts: vRtrStaticFrrMplsInSegmentNPop.setDescription('The number of labels to pop from the incoming packet. Normally only the top label is popped from the packet and used for all switching decisions for that packet. ')
vRtrStaticFrrMplsInSegmentXCIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 53, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrStaticFrrMplsInSegmentXCIndex.setStatus('current')
if mibBuilder.loadTexts: vRtrStaticFrrMplsInSegmentXCIndex.setDescription('Index into vRtrStaticFrrMplsXCTable which identifies which cross- connect entry this segment is part of. A value of zero indicates that this entry is not referred to by any cross-connect entry. When a cross-connect entry is created which this in-segment is a part of, this object is automatically updated to reflect the value of vRtrStaticFrrMplsXCIndex of that cross-connect entry.')
vRtrStaticFrrMplsInSegmentOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 53, 1, 1, 1, 1, 5), MplsObjectOwner().clone('unknown')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrStaticFrrMplsInSegmentOwner.setStatus('current')
if mibBuilder.loadTexts: vRtrStaticFrrMplsInSegmentOwner.setDescription('Denotes the entity that created and is responsible for managing this segment.')
vRtrStaticFrrMplsInSegmentRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 53, 1, 1, 1, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrStaticFrrMplsInSegmentRowStatus.setStatus('current')
if mibBuilder.loadTexts: vRtrStaticFrrMplsInSegmentRowStatus.setDescription('This variable is used to create, modify, and/or delete a row in this table.')
vRtrStaticFrrMplsOutSegmentIndexNext = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 53, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrStaticFrrMplsOutSegmentIndexNext.setStatus('current')
if mibBuilder.loadTexts: vRtrStaticFrrMplsOutSegmentIndexNext.setDescription('This object contains the next appropriate value to be used for vRtrStaticFrrMplsOutSegmentIndex when creating entries in the vRtrStaticFrrMplsOutSegmentTable. If the number of unassigned entries is exhausted, this object will take on the value of 0. To obtain the vRtrStaticFrrMplsOutSegmentIndex value for a new entry, the manager must first issue a management protocol retrieval operation to obtain the current value of this object. The agent should modify the value to reflect the next unassigned index after each retrieval operation. After a manager retrieves a value the agent will determine through its local policy when this index value will be made available for reuse.')
vRtrStaticFrrMplsOutSegmentTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 53, 1, 1, 3), )
if mibBuilder.loadTexts: vRtrStaticFrrMplsOutSegmentTable.setStatus('current')
if mibBuilder.loadTexts: vRtrStaticFrrMplsOutSegmentTable.setDescription('This table contains a representation of the outgoing segments from an LSR.')
vRtrStaticFrrMplsOutSegmentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 53, 1, 1, 3, 1), ).setIndexNames((0, "ALCATEL-STATIC-FRR-MIB", "vRtrStaticFrrMplsOutSegmentIndex"))
if mibBuilder.loadTexts: vRtrStaticFrrMplsOutSegmentEntry.setStatus('current')
if mibBuilder.loadTexts: vRtrStaticFrrMplsOutSegmentEntry.setDescription('An entry in this table represents one outgoing segment. An entry can be created by a network administrator or an SNMP agent. The object vRtrStaticFrrMplsOutSegmentOwner indicates the creator of this entry.')
vRtrStaticFrrMplsOutSegmentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 53, 1, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: vRtrStaticFrrMplsOutSegmentIndex.setStatus('current')
if mibBuilder.loadTexts: vRtrStaticFrrMplsOutSegmentIndex.setDescription('This value contains a unique index for this row. While a value of 0 is not valid as an index for this row it can be supplied as a valid value to index vRtrStaticFrrMplsXCTable to access entries for which no out-segment has been configured.')
vRtrStaticFrrMplsOutSegmentIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 53, 1, 1, 3, 1, 2), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrStaticFrrMplsOutSegmentIfIndex.setStatus('current')
if mibBuilder.loadTexts: vRtrStaticFrrMplsOutSegmentIfIndex.setDescription('This value contains the interface index of the outgoing protecting interface.')
vRtrStaticFrrMplsOutSegmentPushTopLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 53, 1, 1, 3, 1, 3), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrStaticFrrMplsOutSegmentPushTopLabel.setStatus('current')
if mibBuilder.loadTexts: vRtrStaticFrrMplsOutSegmentPushTopLabel.setDescription("This value indicates whether or not a top label should be pushed onto the outgoing packet's label stack. ")
vRtrStaticFrrMplsOutSegmentTopLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 53, 1, 1, 3, 1, 4), MplsLabel()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrStaticFrrMplsOutSegmentTopLabel.setStatus('current')
if mibBuilder.loadTexts: vRtrStaticFrrMplsOutSegmentTopLabel.setDescription("If mplsOutSegmentPushTopLabel is true then this represents the label that should be pushed onto the top of the outgoing packet's label stack.")
vRtrStaticFrrMplsOutSegmentNextHopIpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 53, 1, 1, 3, 1, 5), InetAddressType().clone('unknown')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrStaticFrrMplsOutSegmentNextHopIpAddrType.setStatus('current')
if mibBuilder.loadTexts: vRtrStaticFrrMplsOutSegmentNextHopIpAddrType.setDescription('Indicates whether the protecting next hop address is IPv4 or IPv6. Note that a value of unknown (0) is valid only when the outgoing interface is of type point-to- point.')
vRtrStaticFrrMplsOutSegmentNextHopIpv4Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 53, 1, 1, 3, 1, 6), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrStaticFrrMplsOutSegmentNextHopIpv4Addr.setStatus('current')
if mibBuilder.loadTexts: vRtrStaticFrrMplsOutSegmentNextHopIpv4Addr.setDescription('IPv4 Address of the protecting next hop. Its value is significant only when mplsOutSegmentNextHopIpAddrType is ipV4 (1), otherwise it should return a value of 0.')
vRtrStaticFrrMplsOutSegmentXCIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 53, 1, 1, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrStaticFrrMplsOutSegmentXCIndex.setStatus('current')
if mibBuilder.loadTexts: vRtrStaticFrrMplsOutSegmentXCIndex.setDescription('Index into vRtrStaticFrrMplsXCTable which identifies which cross-connect entry this segment is part of. A value of zero indicates that this entry is not referred to by any cross-connect entry. When a cross-connect entry is created which this out-segment is a part of, this object is automatically updated to reflect the value of vRtrStaticFrrMplsXCIndex of that cross-connect entry.')
vRtrStaticFrrMplsOutSegmentOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 53, 1, 1, 3, 1, 8), MplsObjectOwner().clone('unknown')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrStaticFrrMplsOutSegmentOwner.setStatus('current')
if mibBuilder.loadTexts: vRtrStaticFrrMplsOutSegmentOwner.setDescription('Denotes the entity which created and is responsible for managing this segment.')
vRtrStaticFrrMplsOutSegmentRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 53, 1, 1, 3, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrStaticFrrMplsOutSegmentRowStatus.setStatus('current')
if mibBuilder.loadTexts: vRtrStaticFrrMplsOutSegmentRowStatus.setDescription('For creating, modifying, and deleting this row.')
vRtrStaticFrrMplsXCIndexNext = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 53, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrStaticFrrMplsXCIndexNext.setStatus('current')
if mibBuilder.loadTexts: vRtrStaticFrrMplsXCIndexNext.setDescription('This object contains an appropriate value to be used for vRtrStaticFrrMplsXCIndex when creating entries in the vRtrStaticFrrMplsXCTable on a Transit LSR. The value 0 indicates that no unassigned entries are available. To obtain the value of vRtrStaticFrrMplsXCIndex for a new entry in the vRtrStaticFrrMplsXCTable, the manager issues a management protocol retrieval operation to obtain the current value of vRtrStaticFrrMplsXCIndex. After each retrieval operation, the agent should modify the value to reflect the next unassigned index. After a manager retrieves a value the agent will determine through its local policy when this index value will be made available for reuse.')
vRtrStaticFrrMplsXCTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 53, 1, 1, 5), )
if mibBuilder.loadTexts: vRtrStaticFrrMplsXCTable.setStatus('current')
if mibBuilder.loadTexts: vRtrStaticFrrMplsXCTable.setDescription('This table specifies information for switching between LSP segments. It supports point-to-point connections. mplsLabelStackTable specifies the label stack information for a cross-connect LSR and is referred to from vRtrStaticFrrMplsXCTable.')
vRtrStaticFrrMplsXCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 53, 1, 1, 5, 1), ).setIndexNames((0, "ALCATEL-STATIC-FRR-MIB", "vRtrStaticFrrMplsXCIndex"), (0, "ALCATEL-STATIC-FRR-MIB", "vRtrStaticFrrMplsInSegmentIfIndex"), (0, "ALCATEL-STATIC-FRR-MIB", "vRtrStaticFrrMplsInSegmentLabel"), (0, "ALCATEL-STATIC-FRR-MIB", "vRtrStaticFrrMplsOutSegmentIndex"))
if mibBuilder.loadTexts: vRtrStaticFrrMplsXCEntry.setStatus('current')
if mibBuilder.loadTexts: vRtrStaticFrrMplsXCEntry.setDescription('A row in this table represents one backup cross-connect entry. The following objects index it: - cross-connect index vRtrStaticFrrMplsXCIndex that uniquely identifies a backup cross-connect entry - interface index of the in-segment, vRtrStaticFrrMplsInSegmentIfIndex - incoming label(s), vRtrStaticFrrMplsInSegmentLabel - out-segment index, vRtrStaticFrrMplsOutSegmentIndex Originating LSPs and Terminating LSPs are unsupported in this Table. Special labels are not allowed in this Table. An entry can be created by a network administrator or by an SNMP agent.')
vRtrStaticFrrMplsXCIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 53, 1, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: vRtrStaticFrrMplsXCIndex.setStatus('current')
if mibBuilder.loadTexts: vRtrStaticFrrMplsXCIndex.setDescription('Primary index for the conceptual row identifying a backing cross-connect segment on a transit LSR. ')
vRtrStaticFrrMplsXCOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 53, 1, 1, 5, 1, 2), MplsObjectOwner()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrStaticFrrMplsXCOwner.setStatus('current')
if mibBuilder.loadTexts: vRtrStaticFrrMplsXCOwner.setDescription('Denotes the entity that created and is responsible for managing this cross-connect.')
vRtrStaticFrrMplsXCRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 53, 1, 1, 5, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrStaticFrrMplsXCRowStatus.setStatus('current')
if mibBuilder.loadTexts: vRtrStaticFrrMplsXCRowStatus.setDescription('For creating, modifying, and deleting this row.')
vRtrStaticFrrMplsXCAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 53, 1, 1, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrStaticFrrMplsXCAdminStatus.setStatus('current')
if mibBuilder.loadTexts: vRtrStaticFrrMplsXCAdminStatus.setDescription('The desired operational status of this backup segment.')
vRtrStaticFrrMplsXCOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 53, 1, 1, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("unknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrStaticFrrMplsXCOperStatus.setStatus('current')
if mibBuilder.loadTexts: vRtrStaticFrrMplsXCOperStatus.setDescription('The actual operational status of this backup cross-connect.')
mibBuilder.exportSymbols("ALCATEL-STATIC-FRR-MIB", vRtrStaticFrrMplsXCIndex=vRtrStaticFrrMplsXCIndex, vRtrStaticFrrMplsOutSegmentEntry=vRtrStaticFrrMplsOutSegmentEntry, vRtrStaticFrrMplsInSegmentNPop=vRtrStaticFrrMplsInSegmentNPop, vRtrStaticFrrMplsXCTable=vRtrStaticFrrMplsXCTable, vRtrStaticFrrMplsXCOperStatus=vRtrStaticFrrMplsXCOperStatus, vRtrStaticFrrMplsInSegmentIfIndex=vRtrStaticFrrMplsInSegmentIfIndex, vRtrStaticFrrMplsXCIndexNext=vRtrStaticFrrMplsXCIndexNext, vRtrStaticFrrMplsOutSegmentPushTopLabel=vRtrStaticFrrMplsOutSegmentPushTopLabel, vRtrStaticFrrMplsInSegmentXCIndex=vRtrStaticFrrMplsInSegmentXCIndex, vRtrStaticFrrMplsInSegmentOwner=vRtrStaticFrrMplsInSegmentOwner, vRtrStaticFrrMplsOutSegmentNextHopIpv4Addr=vRtrStaticFrrMplsOutSegmentNextHopIpv4Addr, vRtrStaticFrrMplsInSegmentLabel=vRtrStaticFrrMplsInSegmentLabel, vRtrStaticFrrMplsInSegmentTable=vRtrStaticFrrMplsInSegmentTable, vRtrStaticFrrMplsOutSegmentTable=vRtrStaticFrrMplsOutSegmentTable, vRtrStaticFrrMplsOutSegmentOwner=vRtrStaticFrrMplsOutSegmentOwner, alcatelStaticFrrMIBModule=alcatelStaticFrrMIBModule, vRtrStaticFrrMplsXCRowStatus=vRtrStaticFrrMplsXCRowStatus, vRtrStaticFrrMplsOutSegmentIndex=vRtrStaticFrrMplsOutSegmentIndex, vRtrStaticFrrMplsInSegmentRowStatus=vRtrStaticFrrMplsInSegmentRowStatus, PYSNMP_MODULE_ID=alcatelStaticFrrMIBModule, vRtrStaticFrrMplsOutSegmentIndexNext=vRtrStaticFrrMplsOutSegmentIndexNext, vRtrStaticFrrMplsOutSegmentXCIndex=vRtrStaticFrrMplsOutSegmentXCIndex, vRtrStaticFrrMplsOutSegmentTopLabel=vRtrStaticFrrMplsOutSegmentTopLabel, alcatelStaticFrrMIBModuleObjs=alcatelStaticFrrMIBModuleObjs, vRtrStaticFrrMplsOutSegmentIfIndex=vRtrStaticFrrMplsOutSegmentIfIndex, vRtrStaticFrrMplsXCAdminStatus=vRtrStaticFrrMplsXCAdminStatus, vRtrStaticFrrMplsXCEntry=vRtrStaticFrrMplsXCEntry, vRtrStaticFrrMplsInSegmentEntry=vRtrStaticFrrMplsInSegmentEntry, vRtrStaticFrrMplsOutSegmentNextHopIpAddrType=vRtrStaticFrrMplsOutSegmentNextHopIpAddrType, vRtrStaticFrrMplsXCOwner=vRtrStaticFrrMplsXCOwner, vRtrStaticFrrMplsOutSegmentRowStatus=vRtrStaticFrrMplsOutSegmentRowStatus)
