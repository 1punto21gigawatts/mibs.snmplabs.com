#
# PySNMP MIB module MY-INTERFACE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/MY-INTERFACE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:16:29 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
myMgmt, = mibBuilder.importSymbols("MY-SMI", "myMgmt")
MemberMap, IfIndex, ConfigStatus = mibBuilder.importSymbols("MY-TC", "MemberMap", "IfIndex", "ConfigStatus")
EnabledStatus, = mibBuilder.importSymbols("P-BRIDGE-MIB", "EnabledStatus")
VlanId, = mibBuilder.importSymbols("Q-BRIDGE-MIB", "VlanId")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
Counter32, iso, ObjectIdentity, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, ModuleIdentity, Gauge, Integer32, IpAddress, Bits, MibIdentifier, Counter64, Gauge32, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "iso", "ObjectIdentity", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "ModuleIdentity", "Gauge", "Integer32", "IpAddress", "Bits", "MibIdentifier", "Counter64", "Gauge32", "Unsigned32")
MacAddress, TruthValue, DisplayString, TextualConvention, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "TruthValue", "DisplayString", "TextualConvention", "RowStatus")
myInterfaceMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 10))
myInterfaceMIB.setRevisions(('2002-03-20 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: myInterfaceMIB.setRevisionsDescriptions(('Initial version of this MIB module.',))
if mibBuilder.loadTexts: myInterfaceMIB.setLastUpdated('200203200000Z')
if mibBuilder.loadTexts: myInterfaceMIB.setOrganization('D-Link Crop.')
if mibBuilder.loadTexts: myInterfaceMIB.setContactInfo(' http://support.dlink.com')
if mibBuilder.loadTexts: myInterfaceMIB.setDescription('This module defines my interface mibs.')
myIfConfigMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 10, 1))
myIfTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 10, 1, 1), )
if mibBuilder.loadTexts: myIfTable.setStatus('current')
if mibBuilder.loadTexts: myIfTable.setDescription('list of interface basic configuration objects.')
myIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 10, 1, 1, 1), ).setIndexNames((0, "MY-INTERFACE-MIB", "myIfIndex"))
if mibBuilder.loadTexts: myIfEntry.setStatus('current')
if mibBuilder.loadTexts: myIfEntry.setDescription('Entry contains interface basic configurations.')
myIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 10, 1, 1, 1, 1), IfIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: myIfIndex.setStatus('current')
if mibBuilder.loadTexts: myIfIndex.setDescription(' ')
myIfPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 10, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("unknown", 1), ("port10M100MBASETX", 2), ("port100MBASEFXL", 3), ("port100MBASEFXS", 4), ("port1000MBASESX", 5), ("port1000MBASELX", 6), ("port1000MBASETX", 7), ("portGBIC", 8), ("port100MBASEFX", 9), ("port1000MBASEFX", 10), ("portSFP", 11), ("port10GBASESR", 12), ("port10GBASELR", 13), ("port10GBASEER", 14), ("port10GBASELX4", 15), ("port10GBASESW", 16), ("port10GBASELW", 17), ("port10GBASEEW", 18), ("port10GBASE", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: myIfPortType.setStatus('current')
if mibBuilder.loadTexts: myIfPortType.setDescription("Port type of this port, list as above. port100MBASEFX indicates that port is port100MBASEFXL or port100MBASEFXS, and system doesn't distinguish. port1000MBASEFX indicates that port is port1000MBASEFLX or port1000MBASEFSX, and system doesn't distinguish. This attribute apply physical port")
myIfFlowControlAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 10, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("autonego", 3), ("unknown", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: myIfFlowControlAdminStatus.setStatus('current')
if mibBuilder.loadTexts: myIfFlowControlAdminStatus.setDescription('Flow control of a port management status. This attribute apply physical port and aggreate port')
myIfFlowControlOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 10, 1, 1, 1, 4), EnabledStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: myIfFlowControlOperStatus.setStatus('current')
if mibBuilder.loadTexts: myIfFlowControlOperStatus.setDescription('Oper status: after the negotiation between two ports connetted the flow contrl status. This attribute apply physical port and aggreate port')
myIfAdminSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 10, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("speed10Mb", 1), ("speed100Mb", 2), ("speed1000Mb", 3), ("autonego", 4), ("speed10Gb", 5), ("unknown", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: myIfAdminSpeed.setStatus('current')
if mibBuilder.loadTexts: myIfAdminSpeed.setDescription('port speed settings. This attribute apply physical port and aggreate port')
myIfAdminDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 10, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("full", 1), ("half", 2), ("autonego", 3), ("unknown", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: myIfAdminDuplex.setStatus('current')
if mibBuilder.loadTexts: myIfAdminDuplex.setDescription('port duplex settings. This attribute apply physical port and aggreate port')
myIfOperSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 10, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("speed10Mb", 1), ("speed100Mb", 2), ("speed1000Mb", 3), ("unknown", 4), ("speed10Gb", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: myIfOperSpeed.setStatus('current')
if mibBuilder.loadTexts: myIfOperSpeed.setDescription('After two port have negotiated the speed status,and this object is the working speed status. while the port link status is down , then the speed status is unknown(4). This attribute apply physical port and aggreate port')
myIfOperDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 10, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("full", 1), ("half", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: myIfOperDuplex.setStatus('current')
if mibBuilder.loadTexts: myIfOperDuplex.setDescription('After two port have negotiated the duplex status, and this object is the working duplex status. while the port link status is down , then the speed status is unknown(3). This attribute apply physical port and aggreate port')
myIfManageStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 10, 1, 1, 1, 9), EnabledStatus().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: myIfManageStatus.setStatus('current')
if mibBuilder.loadTexts: myIfManageStatus.setDescription('Management status of the interface.')
myIfIpBroadcast = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 10, 1, 1, 1, 10), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: myIfIpBroadcast.setStatus('current')
if mibBuilder.loadTexts: myIfIpBroadcast.setDescription('Broadcast address of the interface. if broadcast address not configured on interface, return 0.0.0.0')
myIfLayer = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 10, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("layer-2", 1), ("layer-3", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: myIfLayer.setStatus('current')
if mibBuilder.loadTexts: myIfLayer.setDescription('')
myIfMode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 10, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("access", 1), ("trunk", 2), ("dot1q-tunnel", 3), ("hybrid", 4), ("other", 5), ("uplink", 6), ("host", 7), ("promiscuous", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: myIfMode.setStatus('current')
if mibBuilder.loadTexts: myIfMode.setDescription('This value is meaning for only physical port and aggreate port')
myIfCounterClear = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 10, 1, 1, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: myIfCounterClear.setStatus('current')
if mibBuilder.loadTexts: myIfCounterClear.setDescription('Setting its to any value but 0, will clear counters of this interface. Setting its value to 0 will cause no action of the agent. and when query will always return 0. ')
myIfEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 10, 1, 1, 1, 14), ConfigStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: myIfEntryStatus.setStatus('current')
if mibBuilder.loadTexts: myIfEntryStatus.setDescription('Status of this entry, set this object to valid will create a interface, and set its value to invalid will delete the interface of this entry.')
myIfMediumType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 10, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("copper", 1), ("fiber", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: myIfMediumType.setStatus('current')
if mibBuilder.loadTexts: myIfMediumType.setDescription('Port medium type of this port,fiber or copper.')
myIfIpTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 10, 1, 2), )
if mibBuilder.loadTexts: myIfIpTable.setStatus('current')
if mibBuilder.loadTexts: myIfIpTable.setDescription('A list of interface ip configuration entries.')
myIfIpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 10, 1, 2, 1), ).setIndexNames((0, "MY-INTERFACE-MIB", "myIfIpIfIndex"), (0, "MY-INTERFACE-MIB", "myIfIpId"), (0, "MY-INTERFACE-MIB", "myIfIp"))
if mibBuilder.loadTexts: myIfIpEntry.setStatus('current')
if mibBuilder.loadTexts: myIfIpEntry.setDescription('An entry containing configuration information applicable to a Layer3 interface.')
myIfIpIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 10, 1, 2, 1, 1), IfIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: myIfIpIfIndex.setStatus('current')
if mibBuilder.loadTexts: myIfIpIfIndex.setDescription('A unique value, for each Layer3 interface.')
myIfIpId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 10, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("primary", 1), ("secondary", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: myIfIpId.setStatus('current')
if mibBuilder.loadTexts: myIfIpId.setDescription('Type of interface ip address.')
myIfIp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 10, 1, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: myIfIp.setStatus('current')
if mibBuilder.loadTexts: myIfIp.setDescription('Ip address of the interface myIfIndex refer to.')
myIfIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 10, 1, 2, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: myIfIpMask.setStatus('current')
if mibBuilder.loadTexts: myIfIpMask.setDescription('Ip mask of the interface ip address.')
myIfIpEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 10, 1, 2, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: myIfIpEntryStatus.setStatus('current')
if mibBuilder.loadTexts: myIfIpEntryStatus.setDescription('entry status of this entry. and the means in this enviraments can reffer to the text-convention definition of the RowStatus.')
myIfStatusTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 10, 1, 3), )
if mibBuilder.loadTexts: myIfStatusTable.setStatus('current')
if mibBuilder.loadTexts: myIfStatusTable.setDescription('list of interface status. Status information include some error state and result of examining to the interface,etc.')
myIfStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 10, 1, 3, 1), ).setIndexNames((0, "MY-INTERFACE-MIB", "myIfStatusIndex"))
if mibBuilder.loadTexts: myIfStatusEntry.setStatus('current')
if mibBuilder.loadTexts: myIfStatusEntry.setDescription('Entry contains interface status information.')
myIfStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 10, 1, 3, 1, 1), IfIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: myIfStatusIndex.setStatus('current')
if mibBuilder.loadTexts: myIfStatusIndex.setDescription(' ')
myIfStatusLoopBackExamine = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 10, 1, 3, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: myIfStatusLoopBackExamine.setStatus('current')
if mibBuilder.loadTexts: myIfStatusLoopBackExamine.setDescription('Setting its to any value but 0, will Checking whether this port or aggreate can receive and send packets normally, It indicates that port or aggreate is normal if opertion is success. Setting its value to 0 will cause no action of the agent. and when query will always return 0. This attribute apply physical port and aggreate port')
myIfErrorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 10, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no-error", 1), ("err-disable-bpduguard", 2), ("err-disable-ptsecurity", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: myIfErrorStatus.setStatus('current')
if mibBuilder.loadTexts: myIfErrorStatus.setDescription("Port's error status information")
myIfLineDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 10, 1, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: myIfLineDetect.setStatus('current')
if mibBuilder.loadTexts: myIfLineDetect.setDescription('When reading this object, system detects the quality of line connecting the port. Detect whether the line is broken or short circuit or not. The meaning of the obtained value: Return value=N*10000000+M N stands for the line state (0: perfect; 1: break; 2: short circuit) M stands for the location of the break or short circuit in the line(distance from the switch port, in metre) If the line is perfect, the value is zero.')
myGlobalIfDisableRecovery = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 10, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: myGlobalIfDisableRecovery.setStatus('current')
if mibBuilder.loadTexts: myGlobalIfDisableRecovery.setDescription('Setting its to any value but 0, the interfaces which is shutted down by some error happened will recovery from disabled status . Setting its value to 0 will cause no action of the agent. and when query will always return 0. This attribute apply physical port and aggreate port')
myPortTypeChooseTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 10, 1, 5), )
if mibBuilder.loadTexts: myPortTypeChooseTable.setStatus('current')
if mibBuilder.loadTexts: myPortTypeChooseTable.setDescription('Table of entrance to choose port type.')
myPortTypeChooseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 10, 1, 5, 1), ).setIndexNames((0, "MY-INTERFACE-MIB", "myPortTypeChooseIndex"))
if mibBuilder.loadTexts: myPortTypeChooseEntry.setStatus('current')
if mibBuilder.loadTexts: myPortTypeChooseEntry.setDescription('Entrance to choose port type.')
myPortTypeChooseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 10, 1, 5, 1, 1), IfIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: myPortTypeChooseIndex.setStatus('current')
if mibBuilder.loadTexts: myPortTypeChooseIndex.setDescription('The logic port number.')
myPortTypeChooseType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 10, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fiber", 1), ("copper", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: myPortTypeChooseType.setStatus('current')
if mibBuilder.loadTexts: myPortTypeChooseType.setDescription('The chosen port type. This object is used to choose one of the multiple physical ports of different types, when the same logical port is correspondent with them. Apply this attribute to the physical port only.')
myIfMTUTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 10, 1, 6), )
if mibBuilder.loadTexts: myIfMTUTable.setStatus('current')
if mibBuilder.loadTexts: myIfMTUTable.setDescription('Access table of MTU on interface.')
myIfMTUEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 10, 1, 6, 1), ).setIndexNames((0, "MY-INTERFACE-MIB", "myIfMTUIndex"))
if mibBuilder.loadTexts: myIfMTUEntry.setStatus('current')
if mibBuilder.loadTexts: myIfMTUEntry.setDescription('Interfac MTU access.')
myIfMTUIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 10, 1, 6, 1, 1), IfIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: myIfMTUIndex.setStatus('current')
if mibBuilder.loadTexts: myIfMTUIndex.setDescription('Interface number')
myIfMTU = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 10, 1, 6, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: myIfMTU.setStatus('current')
if mibBuilder.loadTexts: myIfMTU.setDescription('Interface MTU.')
myIfAvailableBWTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 10, 1, 7), )
if mibBuilder.loadTexts: myIfAvailableBWTable.setStatus('current')
if mibBuilder.loadTexts: myIfAvailableBWTable.setDescription('Access table of Available Bandwidth on interface.')
myIfAvailableBWEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 10, 1, 7, 1), ).setIndexNames((0, "MY-INTERFACE-MIB", "myIfAvailableBWIfIndex"))
if mibBuilder.loadTexts: myIfAvailableBWEntry.setStatus('current')
if mibBuilder.loadTexts: myIfAvailableBWEntry.setDescription('Interfac available bandwidth access.')
myIfAvailableBWIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 10, 1, 7, 1, 1), IfIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: myIfAvailableBWIfIndex.setStatus('current')
if mibBuilder.loadTexts: myIfAvailableBWIfIndex.setDescription('Interface number')
myIfAvailableBWIfBW = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 10, 1, 7, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: myIfAvailableBWIfBW.setStatus('current')
if mibBuilder.loadTexts: myIfAvailableBWIfBW.setDescription('Interface available bandwidth(bit).')
myInterfaceTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 10, 2))
lineDetectStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 10, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ok", 1), ("open", 2), ("short", 3)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: lineDetectStatus.setStatus('current')
if mibBuilder.loadTexts: lineDetectStatus.setDescription('The type of storm of interface')
lineDetectPosition = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 10, 2, 2), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: lineDetectPosition.setStatus('current')
if mibBuilder.loadTexts: lineDetectPosition.setDescription('Location where the break or short circuit in the line happens (Distance from the switch port, in metre.)')
lineQualityDetect = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 10, 2, 3)).setObjects(("IF-MIB", "ifIndex"), ("MY-INTERFACE-MIB", "lineDetectStatus"), ("MY-INTERFACE-MIB", "lineDetectPosition"))
if mibBuilder.loadTexts: lineQualityDetect.setStatus('current')
if mibBuilder.loadTexts: lineQualityDetect.setDescription('The notification of discovering a break or short circuit in the line, or restoring the line to the normal state.')
myInterfaceMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 10, 3))
myInterfaceMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 10, 3, 1))
myInterfaceMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 10, 3, 2))
myInterfaceMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 10, 3, 1, 1)).setObjects(("MY-INTERFACE-MIB", "myInterfaceMIBGroup"), ("MY-INTERFACE-MIB", "myPortTypeChooseMibGroup"), ("MY-INTERFACE-MIB", "myIfMTUMibGroup"), ("MY-INTERFACE-MIB", "myIfLineDetectGroup"), ("MY-INTERFACE-MIB", "myIfAvailableBWMibGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    myInterfaceMIBCompliance = myInterfaceMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: myInterfaceMIBCompliance.setDescription('The compliance statement for entities which implement the My Interface MIB')
myInterfaceMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 10, 3, 2, 1)).setObjects(("MY-INTERFACE-MIB", "myIfIndex"), ("MY-INTERFACE-MIB", "myIfPortType"), ("MY-INTERFACE-MIB", "myIfFlowControlAdminStatus"), ("MY-INTERFACE-MIB", "myIfFlowControlOperStatus"), ("MY-INTERFACE-MIB", "myIfAdminSpeed"), ("MY-INTERFACE-MIB", "myIfAdminDuplex"), ("MY-INTERFACE-MIB", "myIfOperSpeed"), ("MY-INTERFACE-MIB", "myIfOperDuplex"), ("MY-INTERFACE-MIB", "myIfManageStatus"), ("MY-INTERFACE-MIB", "myIfIpBroadcast"), ("MY-INTERFACE-MIB", "myIfLayer"), ("MY-INTERFACE-MIB", "myIfMode"), ("MY-INTERFACE-MIB", "myIfCounterClear"), ("MY-INTERFACE-MIB", "myIfEntryStatus"), ("MY-INTERFACE-MIB", "myIfMediumType"), ("MY-INTERFACE-MIB", "myIfIpIfIndex"), ("MY-INTERFACE-MIB", "myIfIpId"), ("MY-INTERFACE-MIB", "myIfIp"), ("MY-INTERFACE-MIB", "myIfIpMask"), ("MY-INTERFACE-MIB", "myIfIpEntryStatus"), ("MY-INTERFACE-MIB", "myIfStatusIndex"), ("MY-INTERFACE-MIB", "myIfStatusLoopBackExamine"), ("MY-INTERFACE-MIB", "myIfErrorStatus"), ("MY-INTERFACE-MIB", "myGlobalIfDisableRecovery"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    myInterfaceMIBGroup = myInterfaceMIBGroup.setStatus('current')
if mibBuilder.loadTexts: myInterfaceMIBGroup.setDescription('A collection of objects providing interface basic configure .')
myPortTypeChooseMibGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 10, 3, 2, 2)).setObjects(("MY-INTERFACE-MIB", "myPortTypeChooseIndex"), ("MY-INTERFACE-MIB", "myPortTypeChooseType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    myPortTypeChooseMibGroup = myPortTypeChooseMibGroup.setStatus('current')
if mibBuilder.loadTexts: myPortTypeChooseMibGroup.setDescription('Information collection of choosing port type.')
myIfMTUMibGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 10, 3, 2, 3)).setObjects(("MY-INTERFACE-MIB", "myIfMTUIndex"), ("MY-INTERFACE-MIB", "myIfMTU"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    myIfMTUMibGroup = myIfMTUMibGroup.setStatus('current')
if mibBuilder.loadTexts: myIfMTUMibGroup.setDescription('Interface MTU information collection.')
myIfLineDetectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 10, 3, 2, 4)).setObjects(("MY-INTERFACE-MIB", "myIfLineDetect"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    myIfLineDetectGroup = myIfLineDetectGroup.setStatus('current')
if mibBuilder.loadTexts: myIfLineDetectGroup.setDescription('Information collection of line quality detection.')
myIfAvailableBWMibGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 10, 3, 2, 5)).setObjects(("MY-INTERFACE-MIB", "myIfAvailableBWIfIndex"), ("MY-INTERFACE-MIB", "myIfAvailableBWIfBW"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    myIfAvailableBWMibGroup = myIfAvailableBWMibGroup.setStatus('current')
if mibBuilder.loadTexts: myIfAvailableBWMibGroup.setDescription('Interface available bandwidth information collection.')
mibBuilder.exportSymbols("MY-INTERFACE-MIB", myIfErrorStatus=myIfErrorStatus, myIfIpTable=myIfIpTable, myIfMTUTable=myIfMTUTable, myIfMTUMibGroup=myIfMTUMibGroup, myIfIpEntry=myIfIpEntry, myIfLayer=myIfLayer, myIfStatusEntry=myIfStatusEntry, myIfAvailableBWEntry=myIfAvailableBWEntry, myInterfaceMIBGroups=myInterfaceMIBGroups, myIfEntryStatus=myIfEntryStatus, myIfLineDetectGroup=myIfLineDetectGroup, myIfAvailableBWTable=myIfAvailableBWTable, myPortTypeChooseType=myPortTypeChooseType, PYSNMP_MODULE_ID=myInterfaceMIB, myGlobalIfDisableRecovery=myGlobalIfDisableRecovery, lineDetectStatus=lineDetectStatus, myIfCounterClear=myIfCounterClear, myIfIpEntryStatus=myIfIpEntryStatus, myIfMediumType=myIfMediumType, myInterfaceMIBConformance=myInterfaceMIBConformance, myIfAvailableBWMibGroup=myIfAvailableBWMibGroup, myIfMTU=myIfMTU, myInterfaceMIBCompliance=myInterfaceMIBCompliance, myIfIpIfIndex=myIfIpIfIndex, myIfTable=myIfTable, myIfOperSpeed=myIfOperSpeed, myPortTypeChooseEntry=myPortTypeChooseEntry, myIfAvailableBWIfIndex=myIfAvailableBWIfIndex, myIfIpId=myIfIpId, myIfLineDetect=myIfLineDetect, myPortTypeChooseTable=myPortTypeChooseTable, myIfIpMask=myIfIpMask, myIfAdminSpeed=myIfAdminSpeed, myPortTypeChooseIndex=myPortTypeChooseIndex, myIfMTUEntry=myIfMTUEntry, myIfMode=myIfMode, myIfConfigMIBObjects=myIfConfigMIBObjects, myIfStatusIndex=myIfStatusIndex, myIfIndex=myIfIndex, myInterfaceMIBCompliances=myInterfaceMIBCompliances, myIfIpBroadcast=myIfIpBroadcast, myIfFlowControlAdminStatus=myIfFlowControlAdminStatus, myIfStatusTable=myIfStatusTable, myIfStatusLoopBackExamine=myIfStatusLoopBackExamine, myIfEntry=myIfEntry, lineDetectPosition=lineDetectPosition, myIfFlowControlOperStatus=myIfFlowControlOperStatus, myPortTypeChooseMibGroup=myPortTypeChooseMibGroup, myIfManageStatus=myIfManageStatus, myIfOperDuplex=myIfOperDuplex, myInterfaceMIBGroup=myInterfaceMIBGroup, myIfPortType=myIfPortType, myIfAdminDuplex=myIfAdminDuplex, myIfAvailableBWIfBW=myIfAvailableBWIfBW, myInterfaceTraps=myInterfaceTraps, myIfIp=myIfIp, lineQualityDetect=lineQualityDetect, myIfMTUIndex=myIfMTUIndex, myInterfaceMIB=myInterfaceMIB)
