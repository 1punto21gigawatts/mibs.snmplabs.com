#
# PySNMP MIB module HM2-PLATFORM-MVRP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HM2-PLATFORM-MVRP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:32:02 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion")
hm2AgentDot1qMrpMxrp, = mibBuilder.importSymbols("HM2-PLATFORM-MRP-MIB", "hm2AgentDot1qMrpMxrp")
EnabledStatus, = mibBuilder.importSymbols("P-BRIDGE-MIB", "EnabledStatus")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
iso, NotificationType, ObjectIdentity, MibIdentifier, TimeTicks, Bits, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, IpAddress, Unsigned32, Integer32, ModuleIdentity, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "NotificationType", "ObjectIdentity", "MibIdentifier", "TimeTicks", "Bits", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "IpAddress", "Unsigned32", "Integer32", "ModuleIdentity", "Counter32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
hm2PlatformMVRP = ModuleIdentity((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 2))
hm2PlatformMVRP.setRevisions(('2013-04-10 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hm2PlatformMVRP.setRevisionsDescriptions(('Initial version.',))
if mibBuilder.loadTexts: hm2PlatformMVRP.setLastUpdated('201304100000Z')
if mibBuilder.loadTexts: hm2PlatformMVRP.setOrganization('Hirschmann Automation and Control GmbH')
if mibBuilder.loadTexts: hm2PlatformMVRP.setContactInfo('Postal: Stuttgarter Str. 45-51 72654 Neckartenzlingen Germany Phone: +49 7127 140 E-mail: hac.support@belden.com')
if mibBuilder.loadTexts: hm2PlatformMVRP.setDescription('The Hirschmann Private Platform2 MIB for 802.1ak MVRP Configuration. Copyright (C) 2013. All Rights Reserved.')
hm2AgentDot1qMvrp = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 2, 1))
hm2AgentDot1qMrpMvrpStats = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 2, 2))
hm2AgentDot1qPortMvrpTable = MibTable((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 2, 1, 1), )
if mibBuilder.loadTexts: hm2AgentDot1qPortMvrpTable.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDot1qPortMvrpTable.setDescription('A table of MVRP control information about every bridge port.This is indexed by hm2AgentDot1qMvrpPort.')
hm2AgentDot1qPortMvrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 2, 1, 1, 1), ).setIndexNames((0, "HM2-PLATFORM-MVRP-MIB", "hm2AgentDot1qMvrpPort"))
if mibBuilder.loadTexts: hm2AgentDot1qPortMvrpEntry.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDot1qPortMvrpEntry.setDescription('MVRP control information for a bridge port.')
hm2AgentDot1qMvrpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 2, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: hm2AgentDot1qMvrpPort.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDot1qMvrpPort.setDescription('The MVRP port number.')
hm2AgentDot1qPortMvrpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 2, 1, 1, 1, 10), EnabledStatus().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentDot1qPortMvrpMode.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDot1qPortMvrpMode.setDescription('Enables or disables MVRP admin-state on the port.')
hm2AgentDot1qBridgeMvrpMode = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 2, 1, 2), EnabledStatus().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentDot1qBridgeMvrpMode.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDot1qBridgeMvrpMode.setDescription('Enables or disables MVRP admin-state on the device globally.')
hm2AgentDot1qBridgeMrpPeriodicStateMachineForMvrp = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 2, 1, 3), EnabledStatus().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentDot1qBridgeMrpPeriodicStateMachineForMvrp.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDot1qBridgeMrpPeriodicStateMachineForMvrp.setDescription('Enables or disables MRP Periodic State Machine for MVRP.')
hm2AgentDot1qMrpMvrpPktTx = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 2, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDot1qMrpMvrpPktTx.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDot1qMrpMvrpPktTx.setDescription('The total number of MVRP PDUs that were transmitted by the device.')
hm2AgentDot1qMrpMvrpPktRx = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 2, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDot1qMrpMvrpPktRx.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDot1qMrpMvrpPktRx.setDescription('The total number of MVRP PDUs that were received by the device.')
hm2AgentDot1qMrpMvrpPktRxBadHeader = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 2, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDot1qMrpMvrpPktRxBadHeader.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDot1qMrpMvrpPktRxBadHeader.setDescription('The total number of MVRP PDUs received with bad header by the device.')
hm2AgentDot1qMrpMvrpPktRxBadFormat = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 2, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDot1qMrpMvrpPktRxBadFormat.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDot1qMrpMvrpPktRxBadFormat.setDescription('The total number of MVRP PDUs received with bad data field by the device.')
hm2AgentDot1qMrpMvrpPktTxFailure = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 2, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDot1qMrpMvrpPktTxFailure.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDot1qMrpMvrpPktTxFailure.setDescription('The total number of MVRP PDUs that were not transmitted by the device.')
hm2AgentDot1qMrpMvrpStatsTable = MibTable((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 2, 2, 6), )
if mibBuilder.loadTexts: hm2AgentDot1qMrpMvrpStatsTable.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDot1qMrpMvrpStatsTable.setDescription('A table which contains MVRP statistics per port.')
hm2AgentDot1qMrpMvrpStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 2, 2, 6, 1), ).setIndexNames((0, "HM2-PLATFORM-MVRP-MIB", "hm2AgentDot1qMrpMvrpIntf"))
if mibBuilder.loadTexts: hm2AgentDot1qMrpMvrpStatsEntry.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDot1qMrpMvrpStatsEntry.setDescription('MVRP statistics entry.')
hm2AgentDot1qMrpMvrpIntf = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 2, 2, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: hm2AgentDot1qMrpMvrpIntf.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDot1qMrpMvrpIntf.setDescription('Index of hm2AgentDot1qMrpMvrpStatistics table.')
hm2AgentDot1qMrpMvrpPortPktTx = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 2, 2, 6, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDot1qMrpMvrpPortPktTx.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDot1qMrpMvrpPortPktTx.setDescription('The number of MVRP PDUs transmitted on the port.')
hm2AgentDot1qMrpMvrpPortPktRx = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 2, 2, 6, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDot1qMrpMvrpPortPktRx.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDot1qMrpMvrpPortPktRx.setDescription('The number of MVRP PDUs received on the port.')
hm2AgentDot1qMrpMvrpPortPktRxBadHeader = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 2, 2, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDot1qMrpMvrpPortPktRxBadHeader.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDot1qMrpMvrpPortPktRxBadHeader.setDescription('The number of MVRP PDUs received with bad header on the port.')
hm2AgentDot1qMrpMvrpPortPktRxBadFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 2, 2, 6, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDot1qMrpMvrpPortPktRxBadFormat.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDot1qMrpMvrpPortPktRxBadFormat.setDescription('The number of MVRP PDUs received with bad data field on the port.')
hm2AgentDot1qMrpMvrpPortPktTxFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 2, 2, 6, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDot1qMrpMvrpPortPktTxFailure.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDot1qMrpMvrpPortPktTxFailure.setDescription('The number of MVRP PDUs that were not transmitted on the port.')
hm2AgentDot1qMrpMvrpPortPktRegFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 2, 2, 6, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDot1qMrpMvrpPortPktRegFailure.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDot1qMrpMvrpPortPktRegFailure.setDescription('The number of failed registration attempts on the port.')
hm2AgentDot1qMrpMvrpPktMessageFailure = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 2, 2, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDot1qMrpMvrpPktMessageFailure.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDot1qMrpMvrpPktMessageFailure.setDescription('The number of failures while adding message into MVRP queue.')
mibBuilder.exportSymbols("HM2-PLATFORM-MVRP-MIB", hm2AgentDot1qMrpMvrpPktTxFailure=hm2AgentDot1qMrpMvrpPktTxFailure, hm2AgentDot1qPortMvrpEntry=hm2AgentDot1qPortMvrpEntry, hm2AgentDot1qMvrpPort=hm2AgentDot1qMvrpPort, hm2AgentDot1qPortMvrpMode=hm2AgentDot1qPortMvrpMode, hm2AgentDot1qMrpMvrpPortPktRx=hm2AgentDot1qMrpMvrpPortPktRx, hm2AgentDot1qMrpMvrpPortPktRxBadHeader=hm2AgentDot1qMrpMvrpPortPktRxBadHeader, hm2AgentDot1qMvrp=hm2AgentDot1qMvrp, hm2AgentDot1qMrpMvrpStats=hm2AgentDot1qMrpMvrpStats, hm2PlatformMVRP=hm2PlatformMVRP, hm2AgentDot1qMrpMvrpStatsTable=hm2AgentDot1qMrpMvrpStatsTable, hm2AgentDot1qMrpMvrpPktRxBadFormat=hm2AgentDot1qMrpMvrpPktRxBadFormat, hm2AgentDot1qMrpMvrpPortPktTxFailure=hm2AgentDot1qMrpMvrpPortPktTxFailure, PYSNMP_MODULE_ID=hm2PlatformMVRP, hm2AgentDot1qMrpMvrpPortPktRxBadFormat=hm2AgentDot1qMrpMvrpPortPktRxBadFormat, hm2AgentDot1qMrpMvrpPortPktRegFailure=hm2AgentDot1qMrpMvrpPortPktRegFailure, hm2AgentDot1qMrpMvrpIntf=hm2AgentDot1qMrpMvrpIntf, hm2AgentDot1qMrpMvrpPortPktTx=hm2AgentDot1qMrpMvrpPortPktTx, hm2AgentDot1qBridgeMrpPeriodicStateMachineForMvrp=hm2AgentDot1qBridgeMrpPeriodicStateMachineForMvrp, hm2AgentDot1qMrpMvrpPktRxBadHeader=hm2AgentDot1qMrpMvrpPktRxBadHeader, hm2AgentDot1qMrpMvrpPktTx=hm2AgentDot1qMrpMvrpPktTx, hm2AgentDot1qPortMvrpTable=hm2AgentDot1qPortMvrpTable, hm2AgentDot1qMrpMvrpStatsEntry=hm2AgentDot1qMrpMvrpStatsEntry, hm2AgentDot1qMrpMvrpPktMessageFailure=hm2AgentDot1qMrpMvrpPktMessageFailure, hm2AgentDot1qMrpMvrpPktRx=hm2AgentDot1qMrpMvrpPktRx, hm2AgentDot1qBridgeMvrpMode=hm2AgentDot1qBridgeMvrpMode)
