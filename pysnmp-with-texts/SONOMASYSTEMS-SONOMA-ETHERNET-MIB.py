#
# PySNMP MIB module SONOMASYSTEMS-SONOMA-ETHERNET-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SONOMASYSTEMS-SONOMA-ETHERNET-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:09:24 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, NotificationType, TimeTicks, Counter64, ObjectIdentity, Unsigned32, Bits, ModuleIdentity, Gauge32, IpAddress, Integer32, iso = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "NotificationType", "TimeTicks", "Counter64", "ObjectIdentity", "Unsigned32", "Bits", "ModuleIdentity", "Gauge32", "IpAddress", "Integer32", "iso")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
sonomaLAN, = mibBuilder.importSymbols("SONOMASYSTEMS-SONOMA-MIB", "sonomaLAN")
sonomaEthernet = MibIdentifier((1, 3, 6, 1, 4, 1, 2926, 25, 5, 1))
ethernetAdapterGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2926, 25, 5, 1, 1))
enetSMCGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2926, 25, 5, 1, 1, 1))
enetSMCConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2926, 25, 5, 1, 1, 1, 1), )
if mibBuilder.loadTexts: enetSMCConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: enetSMCConfigTable.setDescription('A table of Ethernet physical port configuration parameters.')
enetSMCConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2926, 25, 5, 1, 1, 1, 1, 1), ).setIndexNames((0, "SONOMASYSTEMS-SONOMA-ETHERNET-MIB", "enetSMCConfigIndex"))
if mibBuilder.loadTexts: enetSMCConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: enetSMCConfigEntry.setDescription('An entry in the enetSMC port table.')
enetSMCConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 5, 1, 1, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enetSMCConfigIndex.setStatus('mandatory')
if mibBuilder.loadTexts: enetSMCConfigIndex.setDescription('The value of the index uniquely specifies the physical port number to which this entry is applicable.')
enetSMCConfigLineSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 5, 1, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("speed10Mbps", 1), ("speed100Mbps", 2), ("speedAuto", 3))).clone('speed10Mbps')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enetSMCConfigLineSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: enetSMCConfigLineSpeed.setDescription('The line speed configured for this adapter. Auto and 100 Mbit are only valid for the 9332 card.')
enetSMCConfigInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 5, 1, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("aui", 1), ("twistedPair", 2), ("utp", 3), ("bnc", 4), ("auto", 5))).clone('auto')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enetSMCConfigInterface.setStatus('mandatory')
if mibBuilder.loadTexts: enetSMCConfigInterface.setDescription('This type of interface which is configured on this adapter. Setting the value to aui (1) is an invalid operation for interfaces which only support twistedPair or utp. Where: aui - Attachment Unit Interface, utp - Unshielded Twisted Pair.')
enetSMCConfigMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 5, 1, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("halfDuplex", 1), ("fullDuplex", 2))).clone('halfDuplex')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enetSMCConfigMode.setStatus('mandatory')
if mibBuilder.loadTexts: enetSMCConfigMode.setDescription('Indicates which duplex mode is configured on this interface.')
enetSMCStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2926, 25, 5, 1, 1, 1, 2), )
if mibBuilder.loadTexts: enetSMCStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: enetSMCStatsTable.setDescription('A table of Ethernet physical port statistics parameters.')
enetSMCStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2926, 25, 5, 1, 1, 1, 2, 1), ).setIndexNames((0, "SONOMASYSTEMS-SONOMA-ETHERNET-MIB", "enetSMCStatsIndex"))
if mibBuilder.loadTexts: enetSMCStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: enetSMCStatsEntry.setDescription('An entry in the enetSMC port table.')
enetSMCStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 5, 1, 1, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enetSMCStatsIndex.setStatus('mandatory')
if mibBuilder.loadTexts: enetSMCStatsIndex.setDescription('The value of the index uniquely specifies the physical port number to which this entry is applicable.')
enetSMCSQEErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 5, 1, 1, 1, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enetSMCSQEErrors.setStatus('mandatory')
if mibBuilder.loadTexts: enetSMCSQEErrors.setDescription('The number of SQE/Heartbeat errors detected.')
enetSMCRxMissedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 5, 1, 1, 1, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enetSMCRxMissedFrames.setStatus('mandatory')
if mibBuilder.loadTexts: enetSMCRxMissedFrames.setDescription('The number of receive frames missed because no buffers were available to accept the incoming data.')
enetSMCRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 5, 1, 1, 1, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enetSMCRetries.setStatus('mandatory')
if mibBuilder.loadTexts: enetSMCRetries.setDescription('Total number of transmission retries by this station on the attached LAN.')
enetSMCCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 5, 1, 1, 1, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enetSMCCollisions.setStatus('mandatory')
if mibBuilder.loadTexts: enetSMCCollisions.setDescription('Total collisions detected on the attached LAN.')
enetSMCRunts = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 5, 1, 1, 1, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enetSMCRunts.setStatus('mandatory')
if mibBuilder.loadTexts: enetSMCRunts.setDescription('Total number of runts detected on the attached LAN.')
enetSMCFRAMorCRCErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 5, 1, 1, 1, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enetSMCFRAMorCRCErrors.setStatus('mandatory')
if mibBuilder.loadTexts: enetSMCFRAMorCRCErrors.setDescription('Total number of Framing or CRC errors detected on LAN.')
enetSMCTxDeferrals = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 5, 1, 1, 1, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enetSMCTxDeferrals.setStatus('mandatory')
if mibBuilder.loadTexts: enetSMCTxDeferrals.setDescription('The total number of TX deferrals encountered on the LAN segment.')
enetSMCLateCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 5, 1, 1, 1, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enetSMCLateCollisions.setStatus('mandatory')
if mibBuilder.loadTexts: enetSMCLateCollisions.setDescription('Total number of late collisions encountered during transmission by this port.')
enetSMCLossofCarrierErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 5, 1, 1, 1, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enetSMCLossofCarrierErrors.setStatus('mandatory')
if mibBuilder.loadTexts: enetSMCLossofCarrierErrors.setDescription('Total number of loss of carrier errors encountered by this port.')
enetSMCRetryErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 5, 1, 1, 1, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enetSMCRetryErrors.setStatus('mandatory')
if mibBuilder.loadTexts: enetSMCRetryErrors.setDescription('Total number of TX retry limit errors encountered during transmission by this port.')
enetSMCNoOfLinkResets = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 5, 1, 1, 1, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enetSMCNoOfLinkResets.setStatus('mandatory')
if mibBuilder.loadTexts: enetSMCNoOfLinkResets.setDescription('This is the number of link resets which have occurred since the last reinitialization of the unit.')
enetSMCLastLinkResetReason = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 5, 1, 1, 1, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noReason", 1), ("management", 2), ("deviceReset", 3), ("cableDrop", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enetSMCLastLinkResetReason.setStatus('mandatory')
if mibBuilder.loadTexts: enetSMCLastLinkResetReason.setDescription('This object gives the reason code for the last reset which occurred on this LAN physical link. A value of noReason(1) is returned if the link has not reset. A value of management(2) is returned when a link reset has been caused by a management protocol (either SNMP or by LMS). A value of deviceReset(3) is returned if the link reset was caused by a hardware failure. A value of cableDrop(4) is returned when the link reset was caused by a missing or faulty cable.')
enetSMCTimeSinceLastLinkReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 5, 1, 1, 1, 2, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enetSMCTimeSinceLastLinkReset.setStatus('mandatory')
if mibBuilder.loadTexts: enetSMCTimeSinceLastLinkReset.setDescription('This is the time, in seconds, since the last link reset.')
enetSMCRxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 5, 1, 1, 1, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enetSMCRxPackets.setStatus('mandatory')
if mibBuilder.loadTexts: enetSMCRxPackets.setDescription('This is the number of packets received on this link by the device driver.')
enetSMCStatusTable = MibTable((1, 3, 6, 1, 4, 1, 2926, 25, 5, 1, 1, 1, 3), )
if mibBuilder.loadTexts: enetSMCStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: enetSMCStatusTable.setDescription('A table of Ethernet physical port status parameters.')
enetSMCStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2926, 25, 5, 1, 1, 1, 3, 1), ).setIndexNames((0, "SONOMASYSTEMS-SONOMA-ETHERNET-MIB", "enetSMCStatsIndex"))
if mibBuilder.loadTexts: enetSMCStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: enetSMCStatusEntry.setDescription('An entry in the enetSMC port status table.')
enetSMCLineSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 5, 1, 1, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("speed10Mbps", 1), ("speed100Mbps", 2), ("speedAuto", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enetSMCLineSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: enetSMCLineSpeed.setDescription('Indicates the current line speed.')
enetSMCLineMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 5, 1, 1, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("halfDuplex", 1), ("fullDuplex", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enetSMCLineMode.setStatus('mandatory')
if mibBuilder.loadTexts: enetSMCLineMode.setDescription('Indicates the current duplex mode on this interface.')
enetSMCLineInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 5, 1, 1, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("aui", 1), ("twistedPair", 2), ("utp", 3), ("bnc", 4), ("auto", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enetSMCLineInterface.setStatus('mandatory')
if mibBuilder.loadTexts: enetSMCLineInterface.setDescription('Indicate the interface as detected.')
mibBuilder.exportSymbols("SONOMASYSTEMS-SONOMA-ETHERNET-MIB", enetSMCCollisions=enetSMCCollisions, enetSMCConfigMode=enetSMCConfigMode, enetSMCConfigTable=enetSMCConfigTable, enetSMCStatusEntry=enetSMCStatusEntry, enetSMCStatsEntry=enetSMCStatsEntry, enetSMCStatusTable=enetSMCStatusTable, enetSMCStatsTable=enetSMCStatsTable, enetSMCRxMissedFrames=enetSMCRxMissedFrames, enetSMCLineInterface=enetSMCLineInterface, enetSMCConfigLineSpeed=enetSMCConfigLineSpeed, enetSMCLineSpeed=enetSMCLineSpeed, enetSMCStatsIndex=enetSMCStatsIndex, enetSMCGroup=enetSMCGroup, enetSMCLineMode=enetSMCLineMode, enetSMCRetries=enetSMCRetries, enetSMCConfigIndex=enetSMCConfigIndex, enetSMCLateCollisions=enetSMCLateCollisions, enetSMCRxPackets=enetSMCRxPackets, enetSMCTimeSinceLastLinkReset=enetSMCTimeSinceLastLinkReset, enetSMCLastLinkResetReason=enetSMCLastLinkResetReason, sonomaEthernet=sonomaEthernet, enetSMCRetryErrors=enetSMCRetryErrors, enetSMCLossofCarrierErrors=enetSMCLossofCarrierErrors, ethernetAdapterGroup=ethernetAdapterGroup, enetSMCConfigInterface=enetSMCConfigInterface, enetSMCRunts=enetSMCRunts, enetSMCSQEErrors=enetSMCSQEErrors, enetSMCTxDeferrals=enetSMCTxDeferrals, enetSMCNoOfLinkResets=enetSMCNoOfLinkResets, enetSMCFRAMorCRCErrors=enetSMCFRAMorCRCErrors, enetSMCConfigEntry=enetSMCConfigEntry)
