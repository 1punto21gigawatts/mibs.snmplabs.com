#
# PySNMP MIB module AC-PM-PSTN-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/AC-PM-PSTN-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:09:28 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion")
acGeneric, acPerformance, acRegistrations, audioCodes, acBoardMibs, acProducts = mibBuilder.importSymbols("AUDIOCODES-TYPES-MIB", "acGeneric", "acPerformance", "acRegistrations", "audioCodes", "acBoardMibs", "acProducts")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter64, Gauge32, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, MibIdentifier, NotificationType, enterprises, Bits, Integer32, ModuleIdentity, Counter32, Unsigned32, iso, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "Gauge32", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "MibIdentifier", "NotificationType", "enterprises", "Bits", "Integer32", "ModuleIdentity", "Counter32", "Unsigned32", "iso", "IpAddress")
DateAndTime, DisplayString, TextualConvention, TAddress = mibBuilder.importSymbols("SNMPv2-TC", "DateAndTime", "DisplayString", "TextualConvention", "TAddress")
acPMPSTN = ModuleIdentity((1, 3, 6, 1, 4, 1, 5003, 10, 10))
if mibBuilder.loadTexts: acPMPSTN.setLastUpdated('200902050516Z')
if mibBuilder.loadTexts: acPMPSTN.setOrganization('AudioCodes Ltd')
if mibBuilder.loadTexts: acPMPSTN.setContactInfo('Postal: Support AudioCodes LTD 1 Hayarden Street Airport City Lod, ISRAEL 70151 Tel: 972-3-9764000 Fax: 972-3-9764040 Email: support@audiocodes.com Web: www.audiocodes.com')
if mibBuilder.loadTexts: acPMPSTN.setDescription("The AC-PM-PSTN MIB offers performance monitoring For the PSTN related elements in Audiocodes' devices. The Configuration sub-tree is for configuring the interval Period length for the entire AC-PM-PSTN MIB, and the different tables' thresholds. The Data sub-tree presents the tables of monitored elements. Note - for the entire MIB the value (-1) means the value Asked for is either not supported or currently not relevant (this is for when values asked for are for intervals not yet recorded.")
acPMPSTNConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 10, 10, 1))
acPMPSTNConfigurationPeriodLength = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 894780))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acPMPSTNConfigurationPeriodLength.setStatus('current')
if mibBuilder.loadTexts: acPMPSTNConfigurationPeriodLength.setDescription('Length of monitoring intervals for entire MIB. Time is in minutes. Access: Instant.')
acPMPSTNConfigurationResetTotalCounters = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("resetCountersDone", 1), ("resetTotalCounters", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acPMPSTNConfigurationResetTotalCounters.setStatus('current')
if mibBuilder.loadTexts: acPMPSTNConfigurationResetTotalCounters.setDescription('Total-Counters Reset. To reset the total counters, set the value of this object to resetTotalCounters(2). Access: Instant.')
acPMTrunkUtilizationAttributes = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 10, 10, 1, 31))
acPMTrunkUtilizationAttributesHighThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 10, 1, 31, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acPMTrunkUtilizationAttributesHighThreshold.setStatus('current')
if mibBuilder.loadTexts: acPMTrunkUtilizationAttributesHighThreshold.setDescription('High threshold. Access: Instant.')
acPMTrunkUtilizationAttributesLowThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 10, 1, 31, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acPMTrunkUtilizationAttributesLowThreshold.setStatus('current')
if mibBuilder.loadTexts: acPMTrunkUtilizationAttributesLowThreshold.setDescription('Low threshold. Access: Instant.')
acPMPSTNChannelsAttributes = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 10, 10, 1, 32))
acPMPSTNChannelsAttributesInServiceHighThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 10, 1, 32, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acPMPSTNChannelsAttributesInServiceHighThreshold.setStatus('current')
if mibBuilder.loadTexts: acPMPSTNChannelsAttributesInServiceHighThreshold.setDescription('High threshold. Access: Instant.')
acPMPSTNChannelsAttributesInServiceLowThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 10, 1, 32, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acPMPSTNChannelsAttributesInServiceLowThreshold.setStatus('current')
if mibBuilder.loadTexts: acPMPSTNChannelsAttributesInServiceLowThreshold.setDescription('Low threshold. Access: Instant.')
acPMPSTNChannelsAttributesOutOfServiceHighThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 10, 1, 32, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acPMPSTNChannelsAttributesOutOfServiceHighThreshold.setStatus('current')
if mibBuilder.loadTexts: acPMPSTNChannelsAttributesOutOfServiceHighThreshold.setDescription('High threshold. Access: Instant.')
acPMPSTNChannelsAttributesOutOfServiceLowThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 10, 1, 32, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acPMPSTNChannelsAttributesOutOfServiceLowThreshold.setStatus('current')
if mibBuilder.loadTexts: acPMPSTNChannelsAttributesOutOfServiceLowThreshold.setDescription('Low threshold. Access: Instant.')
acPMPSTNChannelsAttributesInMaintenanceHighThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 10, 1, 32, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acPMPSTNChannelsAttributesInMaintenanceHighThreshold.setStatus('current')
if mibBuilder.loadTexts: acPMPSTNChannelsAttributesInMaintenanceHighThreshold.setDescription('High threshold. Access: Instant.')
acPMPSTNChannelsAttributesInMaintenanceLowThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 10, 1, 32, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acPMPSTNChannelsAttributesInMaintenanceLowThreshold.setStatus('current')
if mibBuilder.loadTexts: acPMPSTNChannelsAttributesInMaintenanceLowThreshold.setDescription('Low threshold. Access: Instant.')
acPMPSTNData = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 10, 10, 2))
acPMPSTNDataAcPMPSTNTimeFromStartOfInterval = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 10, 2, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMPSTNDataAcPMPSTNTimeFromStartOfInterval.setStatus('current')
if mibBuilder.loadTexts: acPMPSTNDataAcPMPSTNTimeFromStartOfInterval.setDescription('The time in seconds since the start of the current interval. MIB specific.')
acPMTrunkUtilizationTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 10, 2, 21), )
if mibBuilder.loadTexts: acPMTrunkUtilizationTable.setStatus('current')
if mibBuilder.loadTexts: acPMTrunkUtilizationTable.setDescription('Number of active channels per trunk (index: trunk number).')
acPMTrunkUtilizationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 10, 2, 21, 1), ).setIndexNames((0, "AC-PM-PSTN-MIB", "acPMTrunkUtilizationTrunkNum"), (0, "AC-PM-PSTN-MIB", "acPMTrunkUtilizationInterval"))
if mibBuilder.loadTexts: acPMTrunkUtilizationEntry.setStatus('current')
if mibBuilder.loadTexts: acPMTrunkUtilizationEntry.setDescription('')
acPMTrunkUtilizationTrunkNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 10, 2, 21, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 83)))
if mibBuilder.loadTexts: acPMTrunkUtilizationTrunkNum.setStatus('current')
if mibBuilder.loadTexts: acPMTrunkUtilizationTrunkNum.setDescription('Trunk number. 0 is the first trunk.')
acPMTrunkUtilizationInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 10, 2, 21, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMTrunkUtilizationInterval.setStatus('current')
if mibBuilder.loadTexts: acPMTrunkUtilizationInterval.setDescription('Interval index. 0 - current period (incomplete monitoring - mid period). 1 - Last full period. 2 - One before last.')
acPMTrunkUtilizationVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 10, 2, 21, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMTrunkUtilizationVal.setStatus('current')
if mibBuilder.loadTexts: acPMTrunkUtilizationVal.setDescription('Value of gauge or counter.')
acPMTrunkUtilizationAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 10, 2, 21, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMTrunkUtilizationAverage.setStatus('current')
if mibBuilder.loadTexts: acPMTrunkUtilizationAverage.setDescription('Average value within the period time.')
acPMTrunkUtilizationMax = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 10, 2, 21, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMTrunkUtilizationMax.setStatus('current')
if mibBuilder.loadTexts: acPMTrunkUtilizationMax.setDescription('Maximum value within the period time.')
acPMTrunkUtilizationMin = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 10, 2, 21, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMTrunkUtilizationMin.setStatus('current')
if mibBuilder.loadTexts: acPMTrunkUtilizationMin.setDescription('Minimum value within the period time.')
acPMTrunkUtilizationVolume = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 10, 2, 21, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMTrunkUtilizationVolume.setStatus('current')
if mibBuilder.loadTexts: acPMTrunkUtilizationVolume.setDescription('Activity volume.')
acPMTrunkUtilizationTimeBelowLowThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 10, 2, 21, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMTrunkUtilizationTimeBelowLowThreshold.setStatus('current')
if mibBuilder.loadTexts: acPMTrunkUtilizationTimeBelowLowThreshold.setDescription('Percent of interval time for which gauge is below what was determined as the low threshold.')
acPMTrunkUtilizationTimeBetweenThresholds = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 10, 2, 21, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMTrunkUtilizationTimeBetweenThresholds.setStatus('current')
if mibBuilder.loadTexts: acPMTrunkUtilizationTimeBetweenThresholds.setDescription('Percent of interval time for which gauge is above what was determined as the high threshold.')
acPMTrunkUtilizationTimeAboveHighThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 10, 2, 21, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMTrunkUtilizationTimeAboveHighThreshold.setStatus('current')
if mibBuilder.loadTexts: acPMTrunkUtilizationTimeAboveHighThreshold.setDescription('Percent of interval time for which gauge is between what were determined as the low and high thresholds.')
acPMTrunkUtilizationFullDayAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 10, 2, 21, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMTrunkUtilizationFullDayAverage.setStatus('current')
if mibBuilder.loadTexts: acPMTrunkUtilizationFullDayAverage.setDescription('The average of full 24 hours.')
acPMTrunkUtilizationTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 10, 2, 21, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMTrunkUtilizationTotal.setStatus('current')
if mibBuilder.loadTexts: acPMTrunkUtilizationTotal.setDescription('Total since last reset.')
acPMPSTNTrunkActivitySecondsTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 10, 2, 22), )
if mibBuilder.loadTexts: acPMPSTNTrunkActivitySecondsTable.setStatus('current')
if mibBuilder.loadTexts: acPMPSTNTrunkActivitySecondsTable.setDescription('Counts activity seconds on the trunk.')
acPMPSTNTrunkActivitySecondsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 10, 2, 22, 1), ).setIndexNames((0, "AC-PM-PSTN-MIB", "acPMPSTNTrunkActivitySecondsTrunkNum"), (0, "AC-PM-PSTN-MIB", "acPMPSTNTrunkActivitySecondsInterval"))
if mibBuilder.loadTexts: acPMPSTNTrunkActivitySecondsEntry.setStatus('current')
if mibBuilder.loadTexts: acPMPSTNTrunkActivitySecondsEntry.setDescription('')
acPMPSTNTrunkActivitySecondsTrunkNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 10, 2, 22, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 83)))
if mibBuilder.loadTexts: acPMPSTNTrunkActivitySecondsTrunkNum.setStatus('current')
if mibBuilder.loadTexts: acPMPSTNTrunkActivitySecondsTrunkNum.setDescription('Trunk number. 0 is the first trunk.')
acPMPSTNTrunkActivitySecondsInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 10, 2, 22, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMPSTNTrunkActivitySecondsInterval.setStatus('current')
if mibBuilder.loadTexts: acPMPSTNTrunkActivitySecondsInterval.setDescription('Interval index. 0 - current period (incomplete monitoring - mid period). 1 - Last full period. 2 - One before last.')
acPMPSTNTrunkActivitySecondsVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 10, 2, 22, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMPSTNTrunkActivitySecondsVal.setStatus('current')
if mibBuilder.loadTexts: acPMPSTNTrunkActivitySecondsVal.setDescription('Value of gauge or counter.')
acPMPSTNTrunkActivitySecondsTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 10, 2, 22, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMPSTNTrunkActivitySecondsTotal.setStatus('current')
if mibBuilder.loadTexts: acPMPSTNTrunkActivitySecondsTotal.setDescription('Total since last reset.')
acPMPSTNTrunkActivitySecondsVolume = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 10, 2, 22, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMPSTNTrunkActivitySecondsVolume.setStatus('current')
if mibBuilder.loadTexts: acPMPSTNTrunkActivitySecondsVolume.setDescription('Activity volume.')
acPMPSTNChannels = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 10, 10, 2, 31))
acPMPSTNNumOfChannelsInServiceTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 10, 2, 31, 1), )
if mibBuilder.loadTexts: acPMPSTNNumOfChannelsInServiceTable.setStatus('current')
if mibBuilder.loadTexts: acPMPSTNNumOfChannelsInServiceTable.setDescription('Channels in service, per trunk.')
acPMPSTNNumOfChannelsInServiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 10, 2, 31, 1, 1), ).setIndexNames((0, "AC-PM-PSTN-MIB", "acPMPSTNNumOfChannelsInServiceTrunkNum"), (0, "AC-PM-PSTN-MIB", "acPMPSTNNumOfChannelsInServiceInterval"))
if mibBuilder.loadTexts: acPMPSTNNumOfChannelsInServiceEntry.setStatus('current')
if mibBuilder.loadTexts: acPMPSTNNumOfChannelsInServiceEntry.setDescription('')
acPMPSTNNumOfChannelsInServiceTrunkNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 10, 2, 31, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 83)))
if mibBuilder.loadTexts: acPMPSTNNumOfChannelsInServiceTrunkNum.setStatus('current')
if mibBuilder.loadTexts: acPMPSTNNumOfChannelsInServiceTrunkNum.setDescription('Trunk number. 0 is the first trunk.')
acPMPSTNNumOfChannelsInServiceInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 10, 2, 31, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMPSTNNumOfChannelsInServiceInterval.setStatus('current')
if mibBuilder.loadTexts: acPMPSTNNumOfChannelsInServiceInterval.setDescription('Interval index. 0 - current period (incomplete monitoring - mid period). 1 - Last full period. 2 - One before last.')
acPMPSTNNumOfChannelsInServiceVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 10, 2, 31, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMPSTNNumOfChannelsInServiceVal.setStatus('current')
if mibBuilder.loadTexts: acPMPSTNNumOfChannelsInServiceVal.setDescription('Value of gauge or counter.')
acPMPSTNNumOfChannelsInServiceAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 10, 2, 31, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMPSTNNumOfChannelsInServiceAverage.setStatus('current')
if mibBuilder.loadTexts: acPMPSTNNumOfChannelsInServiceAverage.setDescription('Average value within the period time.')
acPMPSTNNumOfChannelsInServiceMax = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 10, 2, 31, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMPSTNNumOfChannelsInServiceMax.setStatus('current')
if mibBuilder.loadTexts: acPMPSTNNumOfChannelsInServiceMax.setDescription('Maximum value within the period time.')
acPMPSTNNumOfChannelsInServiceMin = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 10, 2, 31, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMPSTNNumOfChannelsInServiceMin.setStatus('current')
if mibBuilder.loadTexts: acPMPSTNNumOfChannelsInServiceMin.setDescription('Minimum value within the period time.')
acPMPSTNNumOfChannelsInServiceVolume = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 10, 2, 31, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMPSTNNumOfChannelsInServiceVolume.setStatus('current')
if mibBuilder.loadTexts: acPMPSTNNumOfChannelsInServiceVolume.setDescription('Activity volume.')
acPMPSTNNumOfChannelsOutOfServiceTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 10, 2, 31, 2), )
if mibBuilder.loadTexts: acPMPSTNNumOfChannelsOutOfServiceTable.setStatus('current')
if mibBuilder.loadTexts: acPMPSTNNumOfChannelsOutOfServiceTable.setDescription('Channels out of service, per trunk.')
acPMPSTNNumOfChannelsOutOfServiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 10, 2, 31, 2, 1), ).setIndexNames((0, "AC-PM-PSTN-MIB", "acPMPSTNNumOfChannelsOutOfServiceTrunkNum"), (0, "AC-PM-PSTN-MIB", "acPMPSTNNumOfChannelsOutOfServiceInterval"))
if mibBuilder.loadTexts: acPMPSTNNumOfChannelsOutOfServiceEntry.setStatus('current')
if mibBuilder.loadTexts: acPMPSTNNumOfChannelsOutOfServiceEntry.setDescription('')
acPMPSTNNumOfChannelsOutOfServiceTrunkNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 10, 2, 31, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 83)))
if mibBuilder.loadTexts: acPMPSTNNumOfChannelsOutOfServiceTrunkNum.setStatus('current')
if mibBuilder.loadTexts: acPMPSTNNumOfChannelsOutOfServiceTrunkNum.setDescription('Trunk number. 0 is the first trunk.')
acPMPSTNNumOfChannelsOutOfServiceInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 10, 2, 31, 2, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMPSTNNumOfChannelsOutOfServiceInterval.setStatus('current')
if mibBuilder.loadTexts: acPMPSTNNumOfChannelsOutOfServiceInterval.setDescription('Interval index. 0 - current period (incomplete monitoring - mid period). 1 - Last full period. 2 - One before last.')
acPMPSTNNumOfChannelsOutOfServiceVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 10, 2, 31, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMPSTNNumOfChannelsOutOfServiceVal.setStatus('current')
if mibBuilder.loadTexts: acPMPSTNNumOfChannelsOutOfServiceVal.setDescription('Value of gauge or counter.')
acPMPSTNNumOfChannelsOutOfServiceAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 10, 2, 31, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMPSTNNumOfChannelsOutOfServiceAverage.setStatus('current')
if mibBuilder.loadTexts: acPMPSTNNumOfChannelsOutOfServiceAverage.setDescription('Average value within the period time.')
acPMPSTNNumOfChannelsOutOfServiceMax = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 10, 2, 31, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMPSTNNumOfChannelsOutOfServiceMax.setStatus('current')
if mibBuilder.loadTexts: acPMPSTNNumOfChannelsOutOfServiceMax.setDescription('Maximum value within the period time.')
acPMPSTNNumOfChannelsOutOfServiceMin = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 10, 2, 31, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMPSTNNumOfChannelsOutOfServiceMin.setStatus('current')
if mibBuilder.loadTexts: acPMPSTNNumOfChannelsOutOfServiceMin.setDescription('Minimum value within the period time.')
acPMPSTNNumOfChannelsOutOfServiceVolume = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 10, 2, 31, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMPSTNNumOfChannelsOutOfServiceVolume.setStatus('current')
if mibBuilder.loadTexts: acPMPSTNNumOfChannelsOutOfServiceVolume.setDescription('Activity volume.')
acPMPSTNNumOfChannelsInMaintenanceTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 10, 2, 31, 3), )
if mibBuilder.loadTexts: acPMPSTNNumOfChannelsInMaintenanceTable.setStatus('current')
if mibBuilder.loadTexts: acPMPSTNNumOfChannelsInMaintenanceTable.setDescription('Channels in maintenance status (not in-service), per trunk.')
acPMPSTNNumOfChannelsInMaintenanceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 10, 2, 31, 3, 1), ).setIndexNames((0, "AC-PM-PSTN-MIB", "acPMPSTNNumOfChannelsInMaintenanceTrunkNum"), (0, "AC-PM-PSTN-MIB", "acPMPSTNNumOfChannelsInMaintenanceInterval"))
if mibBuilder.loadTexts: acPMPSTNNumOfChannelsInMaintenanceEntry.setStatus('current')
if mibBuilder.loadTexts: acPMPSTNNumOfChannelsInMaintenanceEntry.setDescription('')
acPMPSTNNumOfChannelsInMaintenanceTrunkNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 10, 2, 31, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 83)))
if mibBuilder.loadTexts: acPMPSTNNumOfChannelsInMaintenanceTrunkNum.setStatus('current')
if mibBuilder.loadTexts: acPMPSTNNumOfChannelsInMaintenanceTrunkNum.setDescription('Trunk number. 0 is the first trunk.')
acPMPSTNNumOfChannelsInMaintenanceInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 10, 2, 31, 3, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMPSTNNumOfChannelsInMaintenanceInterval.setStatus('current')
if mibBuilder.loadTexts: acPMPSTNNumOfChannelsInMaintenanceInterval.setDescription('Interval index. 0 - current period (incomplete monitoring - mid period). 1 - Last full period. 2 - One before last.')
acPMPSTNNumOfChannelsInMaintenanceVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 10, 2, 31, 3, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMPSTNNumOfChannelsInMaintenanceVal.setStatus('current')
if mibBuilder.loadTexts: acPMPSTNNumOfChannelsInMaintenanceVal.setDescription('Value of gauge or counter.')
acPMPSTNNumOfChannelsInMaintenanceAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 10, 2, 31, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMPSTNNumOfChannelsInMaintenanceAverage.setStatus('current')
if mibBuilder.loadTexts: acPMPSTNNumOfChannelsInMaintenanceAverage.setDescription('Average value within the period time.')
acPMPSTNNumOfChannelsInMaintenanceMax = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 10, 2, 31, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMPSTNNumOfChannelsInMaintenanceMax.setStatus('current')
if mibBuilder.loadTexts: acPMPSTNNumOfChannelsInMaintenanceMax.setDescription('Maximum value within the period time.')
acPMPSTNNumOfChannelsInMaintenanceMin = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 10, 2, 31, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMPSTNNumOfChannelsInMaintenanceMin.setStatus('current')
if mibBuilder.loadTexts: acPMPSTNNumOfChannelsInMaintenanceMin.setDescription('Minimum value within the period time.')
acPMPSTNNumOfChannelsInMaintenanceVolume = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 10, 2, 31, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMPSTNNumOfChannelsInMaintenanceVolume.setStatus('current')
if mibBuilder.loadTexts: acPMPSTNNumOfChannelsInMaintenanceVolume.setDescription('Activity volume.')
mibBuilder.exportSymbols("AC-PM-PSTN-MIB", acPMPSTNNumOfChannelsInMaintenanceAverage=acPMPSTNNumOfChannelsInMaintenanceAverage, acPMTrunkUtilizationAttributesHighThreshold=acPMTrunkUtilizationAttributesHighThreshold, acPMPSTNNumOfChannelsInServiceMax=acPMPSTNNumOfChannelsInServiceMax, acPMPSTNChannelsAttributesInMaintenanceLowThreshold=acPMPSTNChannelsAttributesInMaintenanceLowThreshold, acPMPSTNNumOfChannelsInServiceTrunkNum=acPMPSTNNumOfChannelsInServiceTrunkNum, acPMPSTNTrunkActivitySecondsTable=acPMPSTNTrunkActivitySecondsTable, acPMPSTNChannelsAttributesInMaintenanceHighThreshold=acPMPSTNChannelsAttributesInMaintenanceHighThreshold, acPMTrunkUtilizationInterval=acPMTrunkUtilizationInterval, acPMPSTNNumOfChannelsOutOfServiceEntry=acPMPSTNNumOfChannelsOutOfServiceEntry, acPMPSTNNumOfChannelsInMaintenanceMax=acPMPSTNNumOfChannelsInMaintenanceMax, acPMPSTNNumOfChannelsInMaintenanceVolume=acPMPSTNNumOfChannelsInMaintenanceVolume, acPMPSTNConfigurationResetTotalCounters=acPMPSTNConfigurationResetTotalCounters, acPMTrunkUtilizationTimeBetweenThresholds=acPMTrunkUtilizationTimeBetweenThresholds, acPMTrunkUtilizationMin=acPMTrunkUtilizationMin, acPMPSTNNumOfChannelsInServiceMin=acPMPSTNNumOfChannelsInServiceMin, acPMPSTNNumOfChannelsInMaintenanceVal=acPMPSTNNumOfChannelsInMaintenanceVal, acPMPSTN=acPMPSTN, acPMTrunkUtilizationEntry=acPMTrunkUtilizationEntry, acPMPSTNTrunkActivitySecondsVolume=acPMPSTNTrunkActivitySecondsVolume, acPMPSTNChannelsAttributes=acPMPSTNChannelsAttributes, acPMPSTNNumOfChannelsOutOfServiceMin=acPMPSTNNumOfChannelsOutOfServiceMin, acPMTrunkUtilizationAverage=acPMTrunkUtilizationAverage, acPMTrunkUtilizationAttributes=acPMTrunkUtilizationAttributes, acPMPSTNChannelsAttributesInServiceLowThreshold=acPMPSTNChannelsAttributesInServiceLowThreshold, acPMTrunkUtilizationVal=acPMTrunkUtilizationVal, PYSNMP_MODULE_ID=acPMPSTN, acPMTrunkUtilizationAttributesLowThreshold=acPMTrunkUtilizationAttributesLowThreshold, acPMPSTNNumOfChannelsOutOfServiceVolume=acPMPSTNNumOfChannelsOutOfServiceVolume, acPMPSTNChannelsAttributesInServiceHighThreshold=acPMPSTNChannelsAttributesInServiceHighThreshold, acPMTrunkUtilizationTable=acPMTrunkUtilizationTable, acPMPSTNConfiguration=acPMPSTNConfiguration, acPMPSTNNumOfChannelsOutOfServiceInterval=acPMPSTNNumOfChannelsOutOfServiceInterval, acPMTrunkUtilizationTimeAboveHighThreshold=acPMTrunkUtilizationTimeAboveHighThreshold, acPMPSTNNumOfChannelsOutOfServiceTrunkNum=acPMPSTNNumOfChannelsOutOfServiceTrunkNum, acPMPSTNNumOfChannelsOutOfServiceMax=acPMPSTNNumOfChannelsOutOfServiceMax, acPMPSTNTrunkActivitySecondsVal=acPMPSTNTrunkActivitySecondsVal, acPMPSTNTrunkActivitySecondsInterval=acPMPSTNTrunkActivitySecondsInterval, acPMTrunkUtilizationFullDayAverage=acPMTrunkUtilizationFullDayAverage, acPMTrunkUtilizationTimeBelowLowThreshold=acPMTrunkUtilizationTimeBelowLowThreshold, acPMPSTNTrunkActivitySecondsTrunkNum=acPMPSTNTrunkActivitySecondsTrunkNum, acPMPSTNNumOfChannelsInServiceVolume=acPMPSTNNumOfChannelsInServiceVolume, acPMPSTNNumOfChannelsInServiceVal=acPMPSTNNumOfChannelsInServiceVal, acPMPSTNNumOfChannelsInMaintenanceInterval=acPMPSTNNumOfChannelsInMaintenanceInterval, acPMPSTNNumOfChannelsOutOfServiceVal=acPMPSTNNumOfChannelsOutOfServiceVal, acPMPSTNChannelsAttributesOutOfServiceHighThreshold=acPMPSTNChannelsAttributesOutOfServiceHighThreshold, acPMTrunkUtilizationMax=acPMTrunkUtilizationMax, acPMTrunkUtilizationVolume=acPMTrunkUtilizationVolume, acPMPSTNTrunkActivitySecondsTotal=acPMPSTNTrunkActivitySecondsTotal, acPMPSTNNumOfChannelsInServiceInterval=acPMPSTNNumOfChannelsInServiceInterval, acPMPSTNChannelsAttributesOutOfServiceLowThreshold=acPMPSTNChannelsAttributesOutOfServiceLowThreshold, acPMPSTNNumOfChannelsOutOfServiceTable=acPMPSTNNumOfChannelsOutOfServiceTable, acPMPSTNNumOfChannelsInMaintenanceMin=acPMPSTNNumOfChannelsInMaintenanceMin, acPMPSTNTrunkActivitySecondsEntry=acPMPSTNTrunkActivitySecondsEntry, acPMPSTNNumOfChannelsInMaintenanceTrunkNum=acPMPSTNNumOfChannelsInMaintenanceTrunkNum, acPMPSTNData=acPMPSTNData, acPMPSTNNumOfChannelsInServiceTable=acPMPSTNNumOfChannelsInServiceTable, acPMPSTNConfigurationPeriodLength=acPMPSTNConfigurationPeriodLength, acPMPSTNDataAcPMPSTNTimeFromStartOfInterval=acPMPSTNDataAcPMPSTNTimeFromStartOfInterval, acPMTrunkUtilizationTotal=acPMTrunkUtilizationTotal, acPMPSTNNumOfChannelsInServiceEntry=acPMPSTNNumOfChannelsInServiceEntry, acPMPSTNNumOfChannelsInServiceAverage=acPMPSTNNumOfChannelsInServiceAverage, acPMPSTNNumOfChannelsOutOfServiceAverage=acPMPSTNNumOfChannelsOutOfServiceAverage, acPMPSTNChannels=acPMPSTNChannels, acPMPSTNNumOfChannelsInMaintenanceEntry=acPMPSTNNumOfChannelsInMaintenanceEntry, acPMTrunkUtilizationTrunkNum=acPMTrunkUtilizationTrunkNum, acPMPSTNNumOfChannelsInMaintenanceTable=acPMPSTNNumOfChannelsInMaintenanceTable)
