#
# PySNMP MIB module CISCO-IKE-CONFIGURATION-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-IKE-CONFIGURATION-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:01:33 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
CIPsecIkeAuthMethod, CIPsecIkePRFAlgorithm, CIPsecPhase1PeerIdentityType, CIPsecDiffHellmanGrp, CIPsecEncryptAlgorithm, CIKELifetime, CIPsecControlProtocol, CIKELifesize, CIKEIsakmpDoi, CIPsecIkeHashAlgorithm = mibBuilder.importSymbols("CISCO-IPSEC-TC", "CIPsecIkeAuthMethod", "CIPsecIkePRFAlgorithm", "CIPsecPhase1PeerIdentityType", "CIPsecDiffHellmanGrp", "CIPsecEncryptAlgorithm", "CIKELifetime", "CIPsecControlProtocol", "CIKELifesize", "CIKEIsakmpDoi", "CIPsecIkeHashAlgorithm")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
InetAddressType, InetAddress, InetAddressPrefixLength = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress", "InetAddressPrefixLength")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
NotificationType, Unsigned32, Gauge32, Bits, TimeTicks, IpAddress, ModuleIdentity, Integer32, Counter64, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, Counter32, iso = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Unsigned32", "Gauge32", "Bits", "TimeTicks", "IpAddress", "ModuleIdentity", "Integer32", "Counter64", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "Counter32", "iso")
RowStatus, DisplayString, TextualConvention, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "DisplayString", "TextualConvention", "TruthValue")
ciscoIkeConfigMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 423))
ciscoIkeConfigMIB.setRevisions(('2004-09-16 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoIkeConfigMIB.setRevisionsDescriptions(('Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoIkeConfigMIB.setLastUpdated('200409160000Z')
if mibBuilder.loadTexts: ciscoIkeConfigMIB.setOrganization('Cisco Systems')
if mibBuilder.loadTexts: ciscoIkeConfigMIB.setContactInfo(' Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-ipsecmib@external.cisco.com')
if mibBuilder.loadTexts: ciscoIkeConfigMIB.setDescription("This is a MIB Module for configuring and viewing IKE parameters and policies. Acronyms The following acronyms are used in this document: IPsec: Secure IP Protocol VPN: Virtual Private Network ISAKMP: Internet Security Association and Key Exchange Protocol IKE: Internet Key Exchange Protocol DOI: Domain of Interpretation (of the attributes of IKE protocol in the context of a specific Phase-2 protocol). SA: Security Association (ref: rfc2408). SPI: Security Parameter Index is the pointer or identifier used in accessing SA attributes (ref: rfc2408). MM: Main Mode - the process of setting up a Phase 1 SA to secure the exchanges required to setup Phase 2 SAs Phase 1 Tunnel: An ISAKMP SA can be regarded as representing a flow of ISAKMP/IKE traffic. Hence an ISAKMP is referred to as a 'Phase 1 Tunnel' in this document. Phase 2 Tunnel: A Phase 2 Tunnel is an instance of a non-ISAKMP SA bundle in which all the SA share the same proxy identifiers (IDii,IDir) and protect the same stream of application traffic. Note that a Phase 2 tunnel may comprise one SA bundle at any given point of time, but the SA bundle changes with time due to key refresh. History of the MIB This MIB was originally written as CISCO-IPSEC-MIB which combined the configuration of IKE and IPsec protocols into a single MIB. ")
cicIkeConfigMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 423, 0))
cicIkeConfigMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 423, 1))
cicIkeConfigMIBConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 423, 2))
cicIkeCfgOperations = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 423, 1, 1))
cicIkeCfgIdentities = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 423, 1, 2))
cicIkeCfgFailureRecovery = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 423, 1, 3))
cicIkeCfgPeerAuth = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 423, 1, 4))
cicIkeCfgPskAuthConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 423, 1, 4, 1))
cicIkeCfgNonceAuthConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 423, 1, 4, 2))
cicIkeCfgPkiAuthConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 423, 1, 4, 3))
cicIkeCfgPolicies = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 423, 1, 5))
cicIkeCfgServiceControl = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 423, 1, 6))
cicIkeCfgCallAdmssionnCtrl = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 423, 1, 6, 1))
cicIkeCfgQoSControl = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 423, 1, 6, 2))
cicIkeConfigMibNotifCntl = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 423, 1, 7))
class CicIkeConfigPskIndex(TextualConvention, Unsigned32):
    description = 'An arbitrary unique value identifying the configured pre-shared keys.'
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(1, 65535)

class CicIkeConfigInitiatorIndex(TextualConvention, Unsigned32):
    description = 'An arbitrary unique value identifying the configured IKE version initiator.'
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(1, 65535)

cicIkeEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 423, 1, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cicIkeEnabled.setStatus('current')
if mibBuilder.loadTexts: cicIkeEnabled.setDescription(" This object reflects the operational status (enabled/ disabled) of the IKE entity on the managed device. 'true' - IKE is enabled. 'false' - IKE is disabled. ")
cicIkeAggressModeEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 423, 1, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cicIkeAggressModeEnabled.setStatus('current')
if mibBuilder.loadTexts: cicIkeAggressModeEnabled.setDescription(" This object reflects if the IKE entity on the managed device performs aggressive mode negotiations. 'true' - IKE entity performs aggressive mode negotiations. 'false' - IKE entity does not perform aggressive mode negotiations. ")
cicIkeCfgIdentityTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 423, 1, 2, 1), )
if mibBuilder.loadTexts: cicIkeCfgIdentityTable.setStatus('current')
if mibBuilder.loadTexts: cicIkeCfgIdentityTable.setDescription(' The table containing the list of Phase-1 identities used by the IKE protocol for the different Phase-2 DOIs it operates in. ')
cicIkeCfgIdentityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 423, 1, 2, 1, 1), ).setIndexNames((0, "CISCO-IKE-CONFIGURATION-MIB", "cicIkeCfgIdentityDoi"))
if mibBuilder.loadTexts: cicIkeCfgIdentityEntry.setStatus('current')
if mibBuilder.loadTexts: cicIkeCfgIdentityEntry.setDescription(' Each entry represents a Phase-1 identity used by IKE for a specific Phase-2 DOI. ')
cicIkeCfgIdentityDoi = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 423, 1, 2, 1, 1, 1), CIKEIsakmpDoi())
if mibBuilder.loadTexts: cicIkeCfgIdentityDoi.setStatus('current')
if mibBuilder.loadTexts: cicIkeCfgIdentityDoi.setDescription(' This is the DOI type that is supported by this IKE entity on the managed device and for which the Phase-1 identity corresponding to this conceptual row is being defined. ')
cicIkeCfgIdentityType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 423, 1, 2, 1, 1, 2), CIPsecPhase1PeerIdentityType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cicIkeCfgIdentityType.setStatus('current')
if mibBuilder.loadTexts: cicIkeCfgIdentityType.setDescription(' The Phase I identity type used by the Phase-2 DOI corresponding to this conceptual row. ')
cicIkeCfgInitiatorNextAvailTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 423, 1, 2, 2), )
if mibBuilder.loadTexts: cicIkeCfgInitiatorNextAvailTable.setStatus('current')
if mibBuilder.loadTexts: cicIkeCfgInitiatorNextAvailTable.setDescription(' The table providing the next available index for the cicIkeCfgInitiatorTable, in a domain of interpretation(DOI), identified by cicIkeCfgIdentityDoi. This value is only a recommended value, but the user can choose to use a different value to create an entry in the cicIkeCfgInitiatorTable. ')
cicIkeCfgInitiatorNextAvailEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 423, 1, 2, 2, 1), )
cicIkeCfgIdentityEntry.registerAugmentions(("CISCO-IKE-CONFIGURATION-MIB", "cicIkeCfgInitiatorNextAvailEntry"))
cicIkeCfgInitiatorNextAvailEntry.setIndexNames(*cicIkeCfgIdentityEntry.getIndexNames())
if mibBuilder.loadTexts: cicIkeCfgInitiatorNextAvailEntry.setStatus('current')
if mibBuilder.loadTexts: cicIkeCfgInitiatorNextAvailEntry.setDescription(' Each entry represents a next available index for the cicIkeCfgInitiatorTable. ')
cicIkeCfgInitiatorNextAvailIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 423, 1, 2, 2, 1, 1), CicIkeConfigInitiatorIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cicIkeCfgInitiatorNextAvailIndex.setStatus('current')
if mibBuilder.loadTexts: cicIkeCfgInitiatorNextAvailIndex.setDescription(' The object specifies the next available index for object cicIkeCfgInitiatorIndex which can be used for creating an entry in cicIkeCfgInitiatorTable. ')
cicIkeCfgInitiatorTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 423, 1, 2, 3), )
if mibBuilder.loadTexts: cicIkeCfgInitiatorTable.setStatus('current')
if mibBuilder.loadTexts: cicIkeCfgInitiatorTable.setDescription('The table containing the IKE version initiators for peers. ')
cicIkeCfgInitiatorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 423, 1, 2, 3, 1), ).setIndexNames((0, "CISCO-IKE-CONFIGURATION-MIB", "cicIkeCfgIdentityDoi"), (0, "CISCO-IKE-CONFIGURATION-MIB", "cicIkeCfgInitiatorIndex"))
if mibBuilder.loadTexts: cicIkeCfgInitiatorEntry.setStatus('current')
if mibBuilder.loadTexts: cicIkeCfgInitiatorEntry.setDescription('Each entry represents the IKE protocol version initiated when connecting to a remote peer. ')
cicIkeCfgInitiatorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 423, 1, 2, 3, 1, 1), CicIkeConfigInitiatorIndex())
if mibBuilder.loadTexts: cicIkeCfgInitiatorIndex.setStatus('current')
if mibBuilder.loadTexts: cicIkeCfgInitiatorIndex.setDescription('An arbitrary value identifying the configured IKE version initiated for a peer in this domain of interpretation, identified by cicIkeCfgIdentityDoi, on a managed device. This object could have the same value as cicIkeCfgInitiatorNextAvailIndex. ')
cicIkeCfgInitiatorPAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 423, 1, 2, 3, 1, 2), CIPsecPhase1PeerIdentityType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cicIkeCfgInitiatorPAddrType.setStatus('current')
if mibBuilder.loadTexts: cicIkeCfgInitiatorPAddrType.setDescription(" The Phase 1 ID type of the remote peer for which this IKE protocol initiator is configured. This object cannot be modified while the corresponding value of cicIkeCfgInitiatorStatus is equal to 'active'. ")
cicIkeCfgInitiatorPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 423, 1, 2, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cicIkeCfgInitiatorPAddr.setStatus('current')
if mibBuilder.loadTexts: cicIkeCfgInitiatorPAddr.setDescription("This object represents the address of the remote peer corresponding to this conceptual row. This object cannot be modified while the corresponding value of cicIkeCfgInitiatorStatus is equal to 'active'. ")
cicIkeCfgInitiatorVer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 423, 1, 2, 3, 1, 4), CIPsecControlProtocol()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cicIkeCfgInitiatorVer.setStatus('current')
if mibBuilder.loadTexts: cicIkeCfgInitiatorVer.setDescription("This object represents the IKE protocol version used when connecting to a remote peer specified in cicIkeCfgInitiatorPAddr. This object cannot be modified while the corresponding value of cicIkeCfgInitiatorStatus is equal to 'active'. ")
cicIkeCfgInitiatorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 423, 1, 2, 3, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cicIkeCfgInitiatorStatus.setStatus('current')
if mibBuilder.loadTexts: cicIkeCfgInitiatorStatus.setDescription("The status of this conceptual row. To configure an IKE version initiator entry, the NMS must do a multivarbind set containing cicIkeCfgInitiatorPAddrType, cicIkeCfgInitiatorPAddr and cicIkeCfgInitiatorVer. Creation of row can only be done via 'createAndGo'. To remove a row, set this object value to 'destroy'. ")
cicIkeCfgFailureRecovConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 423, 1, 3, 1), )
if mibBuilder.loadTexts: cicIkeCfgFailureRecovConfigTable.setStatus('current')
if mibBuilder.loadTexts: cicIkeCfgFailureRecovConfigTable.setDescription('The table containing the failure recovery configuration for IKE per supported DOI in the managed entity. ')
cicIkeCfgFailureRecovConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 423, 1, 3, 1, 1), )
cicIkeCfgIdentityEntry.registerAugmentions(("CISCO-IKE-CONFIGURATION-MIB", "cicIkeCfgFailureRecovConfigEntry"))
cicIkeCfgFailureRecovConfigEntry.setIndexNames(*cicIkeCfgIdentityEntry.getIndexNames())
if mibBuilder.loadTexts: cicIkeCfgFailureRecovConfigEntry.setStatus('current')
if mibBuilder.loadTexts: cicIkeCfgFailureRecovConfigEntry.setDescription('Each entry represents a Phase I failure recovery configuration for the Phase 2 DOI corresponding to the conceptual row.')
cicIkeKeepAliveEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 423, 1, 3, 1, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cicIkeKeepAliveEnabled.setStatus('current')
if mibBuilder.loadTexts: cicIkeKeepAliveEnabled.setDescription(" This object reflects if the IKE entity in the managed device performs keepalives with all the peers for the DOI corresponding to this conceptual row. 'true' - keepalives are performed. 'false' - no keepalives are performed. ")
cicIkeKeepAliveType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 423, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("periodic", 2), ("ondemand", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cicIkeKeepAliveType.setStatus('current')
if mibBuilder.loadTexts: cicIkeKeepAliveType.setDescription(' This object reflects the type of keepalives to be used by the IKE entity on the managed device with all the peers for the DOI corresponding to this conceptual row. ')
cicIkeKeepAliveInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 423, 1, 3, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 86400))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cicIkeKeepAliveInterval.setStatus('current')
if mibBuilder.loadTexts: cicIkeKeepAliveInterval.setDescription(' This object reflects the keepalive interval in seconds used by the IKE entity on the managed device with all the peers for the DOI corresponding to this conceptual row. ')
cicIkeKeepAliveRetryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 423, 1, 3, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 600))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cicIkeKeepAliveRetryInterval.setStatus('current')
if mibBuilder.loadTexts: cicIkeKeepAliveRetryInterval.setDescription(' This object reflects the keepalive retry interval in seconds used by the IKE entity on the managed device with all the peers for the DOI corresponding to this conceptual row. ')
cicIkeInvalidSpiNotify = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 423, 1, 3, 1, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cicIkeInvalidSpiNotify.setStatus('current')
if mibBuilder.loadTexts: cicIkeInvalidSpiNotify.setDescription(" This object reflects if the IKE entity on the managed device notifies any peer when an IPsec Phase-1 or Phase-2 packet with an invalid SPI is received from that peer for the DOI corresponding to this conceptual row. 'true' - IKE entity notifies peer. 'false' - IKE entity does not notify peer. ")
cicIkeCfgPskNextAvailTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 423, 1, 4, 1, 1), )
if mibBuilder.loadTexts: cicIkeCfgPskNextAvailTable.setStatus('current')
if mibBuilder.loadTexts: cicIkeCfgPskNextAvailTable.setDescription(' The table providing the next available index for the cicIkeCfgPskTable, in a domain of interpretation(DOI), identified by cicIkeCfgIdentityDoi. This value is only a recommended value, but the user can choose to use a different value to create an entry in the cicIkeCfgPskTable. ')
cicIkeCfgPskNextAvailEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 423, 1, 4, 1, 1, 1), )
cicIkeCfgIdentityEntry.registerAugmentions(("CISCO-IKE-CONFIGURATION-MIB", "cicIkeCfgPskNextAvailEntry"))
cicIkeCfgPskNextAvailEntry.setIndexNames(*cicIkeCfgIdentityEntry.getIndexNames())
if mibBuilder.loadTexts: cicIkeCfgPskNextAvailEntry.setStatus('current')
if mibBuilder.loadTexts: cicIkeCfgPskNextAvailEntry.setDescription(' Each entry represents a next available index for the cicIkeCfgPskTable. ')
cicIkeCfgPskNextAvailIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 423, 1, 4, 1, 1, 1, 1), CicIkeConfigPskIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cicIkeCfgPskNextAvailIndex.setStatus('current')
if mibBuilder.loadTexts: cicIkeCfgPskNextAvailIndex.setDescription(' The object specifies the next available index for object cicIkeCfgPskIndex which can be used for creating an entry in cicIkeCfgPskTable. ')
cicIkeCfgPskTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 423, 1, 4, 1, 2), )
if mibBuilder.loadTexts: cicIkeCfgPskTable.setStatus('current')
if mibBuilder.loadTexts: cicIkeCfgPskTable.setDescription(' The table containing the list of pre shared authentication keys configured to be used by IKE protocol catalogued by the DOI and the peer identity. It is possible to have multiple peers per DOI. ')
cicIkeCfgPskEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 423, 1, 4, 1, 2, 1), ).setIndexNames((0, "CISCO-IKE-CONFIGURATION-MIB", "cicIkeCfgIdentityDoi"), (0, "CISCO-IKE-CONFIGURATION-MIB", "cicIkeCfgPskIndex"))
if mibBuilder.loadTexts: cicIkeCfgPskEntry.setStatus('current')
if mibBuilder.loadTexts: cicIkeCfgPskEntry.setDescription(' Each entry represents a configured pre-shared authentication key for a specific peer. ')
cicIkeCfgPskIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 423, 1, 4, 1, 2, 1, 1), CicIkeConfigPskIndex())
if mibBuilder.loadTexts: cicIkeCfgPskIndex.setStatus('current')
if mibBuilder.loadTexts: cicIkeCfgPskIndex.setDescription(' An arbitrary value identifying the configured pre-shared keys for IKE entity in this domain of interpretation, identified by cicIkeCfgIdentityDoi, on a managed device. This object could have the same value as cicIkeCfgPskNextAvailIndex. ')
cicIkeCfgPskKey = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 423, 1, 4, 1, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cicIkeCfgPskKey.setStatus('current')
if mibBuilder.loadTexts: cicIkeCfgPskKey.setDescription(" The pre-shared authorization key used in authenticating the peer corresponding to this conceptual row. This object cannot be modified while the corresponding value of cicIkeCfgPskStatus is equal to 'active'. ")
cicIkeCfgPskRemIdentType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 423, 1, 4, 1, 2, 1, 3), CIPsecPhase1PeerIdentityType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cicIkeCfgPskRemIdentType.setStatus('current')
if mibBuilder.loadTexts: cicIkeCfgPskRemIdentType.setDescription(" The Phase 1 ID type of the remote peer identity for which this preshared key is configured. This object cannot be modified while the corresponding value of cicIkeCfgPskStatus is equal to 'active'. ")
cicIkeCfgPskRemIdentTypeStand = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 423, 1, 4, 1, 2, 1, 4), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cicIkeCfgPskRemIdentTypeStand.setStatus('current')
if mibBuilder.loadTexts: cicIkeCfgPskRemIdentTypeStand.setDescription("If the object 'cicIkeCfgPskRemIdentType' is one of idIpv4Addr idIpv6Addr idIpv4AddrRange idIpv6AddrRange idIpv4AddrSubnet idIpv6AddrSubnet then this object contains the type of InetAddress for the corresponding value(s) of cicIkeCfgPskRemIdAddrOrRg1OrSn, cicIkeCfgPskRemIdAddrRange2 and/or cicIkeCfgPskRemIdSubnetMask. This object would have a value 'unknown', for other values of cicIkeCfgPskRemIdentType. ")
cicIkeCfgPskRemIdentity = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 423, 1, 4, 1, 2, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cicIkeCfgPskRemIdentity.setStatus('current')
if mibBuilder.loadTexts: cicIkeCfgPskRemIdentity.setDescription(" The Phase 1 ID identity of the peer for which this preshared key is configured on the local entity. This object cannot be modified while the corresponding value of cicIkeCfgPskStatus is equal to 'active'. ")
cicIkeCfgPskRemIdAddrOrRg1OrSn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 423, 1, 4, 1, 2, 1, 6), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cicIkeCfgPskRemIdAddrOrRg1OrSn.setStatus('current')
if mibBuilder.loadTexts: cicIkeCfgPskRemIdAddrOrRg1OrSn.setDescription(' If the object cicIkeCfgPskRemIdentType is one of idIpv4Addr idIpv6Addr idIpv4AddrRange idIpv6AddrRange idIpv4AddrSubnet idIpv6AddrSubnet then this object contains the first or only component of the Phase 1 identity. Otherwise, the value contained in this object will be a zero length string which should be disregarded. ')
cicIkeCfgPskRemIdAddrRange2 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 423, 1, 4, 1, 2, 1, 7), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cicIkeCfgPskRemIdAddrRange2.setStatus('current')
if mibBuilder.loadTexts: cicIkeCfgPskRemIdAddrRange2.setDescription(' If the object cicIkeCfgPskRemIdentType is one of idIpv4AddrRange idIpv6AddrRange then this object contains the second component of the Phase 1 identity. Otherwise, the value contained in this object will be a zero length string which should be disregarded. ')
cicIkeCfgPskRemIdSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 423, 1, 4, 1, 2, 1, 8), InetAddressPrefixLength()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cicIkeCfgPskRemIdSubnetMask.setStatus('current')
if mibBuilder.loadTexts: cicIkeCfgPskRemIdSubnetMask.setDescription(" If the object 'cicIkeCfgPskRemIdentType' is one of idIpv4AddrSubnet idIpv6AddrSubnet then this object contains the second component of the Phase 1 identity. Otherwise, the value contained in this object will be zero which should be disregarded. ")
cicIkeCfgPskStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 423, 1, 4, 1, 2, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cicIkeCfgPskStatus.setStatus('current')
if mibBuilder.loadTexts: cicIkeCfgPskStatus.setDescription("The status of this conceptual row. To configure an pre shared authentication key entry, the NMS must do a multivarbind set containing cicIkeCfgPskKey, cicIkeCfgPskRemIdentType,cicIkeCfgPskRemIdentity. Creation of row can only be done via 'createAndGo'. To remove a row, set this object value to 'destroy'. ")
cicIkeCfgPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 423, 1, 5, 1), )
if mibBuilder.loadTexts: cicIkeCfgPolicyTable.setStatus('current')
if mibBuilder.loadTexts: cicIkeCfgPolicyTable.setDescription(' The table containing the list of all ISAKMP policy entries configured by the operator. ')
cicIkeCfgPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 423, 1, 5, 1, 1), ).setIndexNames((0, "CISCO-IKE-CONFIGURATION-MIB", "cicIkeCfgIdentityDoi"), (0, "CISCO-IKE-CONFIGURATION-MIB", "cicIkeCfgPolicyPriority"))
if mibBuilder.loadTexts: cicIkeCfgPolicyEntry.setStatus('current')
if mibBuilder.loadTexts: cicIkeCfgPolicyEntry.setDescription(' Each entry contains the attributes associated with a single ISAKMP Policy entry. ')
cicIkeCfgPolicyPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 423, 1, 5, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65534)))
if mibBuilder.loadTexts: cicIkeCfgPolicyPriority.setStatus('current')
if mibBuilder.loadTexts: cicIkeCfgPolicyPriority.setDescription(' The priority of this ISAKMP Policy entry. The policy with lower value would take precedence over the policy with higher value in the same DOI. ')
cicIkeCfgPolicyEncr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 423, 1, 5, 1, 1, 2), CIPsecEncryptAlgorithm().clone('esp3des')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cicIkeCfgPolicyEncr.setStatus('current')
if mibBuilder.loadTexts: cicIkeCfgPolicyEncr.setDescription(' The encryption transform specified by this ISAKMP policy specification. The Internet Key Exchange (IKE) tunnels setup using this policy item would use the specified encryption transform to protect the ISAKMP PDUs. ')
cicIkeCfgPolicyHash = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 423, 1, 5, 1, 1, 3), CIPsecIkeHashAlgorithm().clone('sha')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cicIkeCfgPolicyHash.setStatus('current')
if mibBuilder.loadTexts: cicIkeCfgPolicyHash.setDescription(' The hash transform specified by this ISAKMP policy specification. The IKE tunnels setup using this policy item would use the specified hash transform to protect the ISAKMP PDUs. ')
cicIkeCfgPolicyPRF = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 423, 1, 5, 1, 1, 4), CIPsecIkePRFAlgorithm().clone('prfHmacSha1')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cicIkeCfgPolicyPRF.setStatus('current')
if mibBuilder.loadTexts: cicIkeCfgPolicyPRF.setDescription(' The Pseudo Random Function algorithm specified by this ISAKMP policy specification. The value of this object would only be used for IKEv2. ')
cicIkeCfgPolicyAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 423, 1, 5, 1, 1, 5), CIPsecIkeAuthMethod().clone('preSharedKey')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cicIkeCfgPolicyAuth.setStatus('current')
if mibBuilder.loadTexts: cicIkeCfgPolicyAuth.setDescription(' The peer authentication method specified by this ISAKMP policy specification. If this policy entity is selected for negotiation with a peer, the local entity would authenticate the peer using the method specified by this object. ')
cicIkeCfgPolicyDHGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 423, 1, 5, 1, 1, 6), CIPsecDiffHellmanGrp().clone('modp1024')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cicIkeCfgPolicyDHGroup.setStatus('current')
if mibBuilder.loadTexts: cicIkeCfgPolicyDHGroup.setDescription(' This object specifies the Oakley group used for Diffie Hellman exchange in the Main Mode. If this policy item is selected to negotiate Main Mode with an IKE peer, the local entity chooses the group specified by this object to perform Diffie Hellman exchange with the peer. ')
cicIkeCfgPolicyLifetime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 423, 1, 5, 1, 1, 7), CIKELifetime().clone(86400)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cicIkeCfgPolicyLifetime.setStatus('current')
if mibBuilder.loadTexts: cicIkeCfgPolicyLifetime.setDescription(' This object specifies the lifetime in seconds of the IKE tunnels generated using this policy specification. ')
cicIkeCfgPolicyLifesize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 423, 1, 5, 1, 1, 8), CIKELifesize().clone(2560)).setUnits('kbytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cicIkeCfgPolicyLifesize.setStatus('current')
if mibBuilder.loadTexts: cicIkeCfgPolicyLifesize.setDescription(' This object specifies the life size in Kbytes of the IKE tunnels generated using this policy specification. ')
cicIkeCfgPolicyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 423, 1, 5, 1, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cicIkeCfgPolicyStatus.setStatus('current')
if mibBuilder.loadTexts: cicIkeCfgPolicyStatus.setDescription(" This object specifies the status of the ISAKMP policy corresponding to this conceptual row. Creation of row can only be done via 'createAndGo'. To remove a row, set this object value to 'destroy'. ")
cicNotifCntlIkeAllNotifs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 423, 1, 7, 1), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cicNotifCntlIkeAllNotifs.setStatus('current')
if mibBuilder.loadTexts: cicNotifCntlIkeAllNotifs.setDescription(" This value of this object must be 'true' to enable any notification in addition to the notification-specific control variables defined below. A notification <foo> defined in this module is enabled if and only if the expression (cicNotifCntlIkeAllNotifs && cicNotifCntlIke<foo>) evaluates to 'true'. ")
cicNotifCntlIkeOperStateChanged = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 423, 1, 7, 2), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cicNotifCntlIkeOperStateChanged.setStatus('current')
if mibBuilder.loadTexts: cicNotifCntlIkeOperStateChanged.setDescription("When cicNotifCntlIkeAllNotifs has the value 'true', this variable controls the generation of the ciscoIkeConfigOperStateChanged notification. When this variable is set to 'true', generation of the notification is enabled. When this variable is set to 'false', generation of the notification is disabled. ")
cicNotifCntlIkePskAdded = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 423, 1, 7, 3), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cicNotifCntlIkePskAdded.setStatus('current')
if mibBuilder.loadTexts: cicNotifCntlIkePskAdded.setDescription("When cicNotifCntlIkeAllNotifs has the value 'true', this variable controls the generation of cicNotifCntlIkePskAdded notification. When this variable is set to 'true', generation of the notification is enabled. When this variable is set to 'false', generation of the notification is disabled. ")
cicNotifCntlIkePskDeleted = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 423, 1, 7, 4), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cicNotifCntlIkePskDeleted.setStatus('current')
if mibBuilder.loadTexts: cicNotifCntlIkePskDeleted.setDescription("When cicNotifCntlIkeAllNotifs has the value 'true', this variable controls the generation of cicNotifCntlIkePskDeleted notification. When this variable is set to 'true', generation of the notification is enabled. When this variable is set to 'false', generation of the notification is disabled. ")
cicNotifCntlIkePolicyAdded = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 423, 1, 7, 5), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cicNotifCntlIkePolicyAdded.setStatus('current')
if mibBuilder.loadTexts: cicNotifCntlIkePolicyAdded.setDescription("When cicNotifCntlIkeAllNotifs has the value 'true', this variable controls the generation of cicNotifCntlIkePolicyAdded notification. When this variable is set to 'true', generation of the notification is enabled. When this variable is set to 'false', generation of the notification is disabled. ")
cicNotifCntlIkePolicyDeleted = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 423, 1, 7, 6), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cicNotifCntlIkePolicyDeleted.setStatus('current')
if mibBuilder.loadTexts: cicNotifCntlIkePolicyDeleted.setDescription("When cicNotifCntlIkeAllNotifs has the value 'true', this variable controls the generation of cicNotifCntlIkePolicyDeleted notification. When this variable is set to 'true', generation of the notification is enabled. When this variable is set to 'false', generation of the notification is disabled. ")
ciscoIkeConfigOperStateChanged = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 423, 0, 1)).setObjects(("CISCO-IKE-CONFIGURATION-MIB", "cicIkeEnabled"))
if mibBuilder.loadTexts: ciscoIkeConfigOperStateChanged.setStatus('current')
if mibBuilder.loadTexts: ciscoIkeConfigOperStateChanged.setDescription(' The notification is generated when the operational state of IKE entity on the managed device has been changed. ')
ciscoIkeConfigPskAdded = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 423, 0, 2)).setObjects(("CISCO-IKE-CONFIGURATION-MIB", "cicIkeCfgPskRemIdentType"), ("CISCO-IKE-CONFIGURATION-MIB", "cicIkeCfgPskRemIdentity"))
if mibBuilder.loadTexts: ciscoIkeConfigPskAdded.setStatus('current')
if mibBuilder.loadTexts: ciscoIkeConfigPskAdded.setDescription(' This notification is generated when a new preshared key is configured on the managed device. ')
ciscoIkeConfigPskDeleted = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 423, 0, 3)).setObjects(("CISCO-IKE-CONFIGURATION-MIB", "cicIkeCfgPskRemIdentType"), ("CISCO-IKE-CONFIGURATION-MIB", "cicIkeCfgPskRemIdentity"))
if mibBuilder.loadTexts: ciscoIkeConfigPskDeleted.setStatus('current')
if mibBuilder.loadTexts: ciscoIkeConfigPskDeleted.setDescription(' This notification is generated when an existing preshared key is configured on the managed device is about to be deleted. ')
ciscoIkeConfigPolicyAdded = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 423, 0, 4)).setObjects(("CISCO-IKE-CONFIGURATION-MIB", "cicIkeCfgPolicyEncr"), ("CISCO-IKE-CONFIGURATION-MIB", "cicIkeCfgPolicyHash"), ("CISCO-IKE-CONFIGURATION-MIB", "cicIkeCfgPolicyAuth"), ("CISCO-IKE-CONFIGURATION-MIB", "cicIkeCfgPolicyDHGroup"))
if mibBuilder.loadTexts: ciscoIkeConfigPolicyAdded.setStatus('current')
if mibBuilder.loadTexts: ciscoIkeConfigPolicyAdded.setDescription(' This notification is generated when a new ISAKMP policy is configured on the managed device. ')
ciscoIkeConfigPolicyDeleted = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 423, 0, 5)).setObjects(("CISCO-IKE-CONFIGURATION-MIB", "cicIkeCfgPolicyEncr"), ("CISCO-IKE-CONFIGURATION-MIB", "cicIkeCfgPolicyHash"), ("CISCO-IKE-CONFIGURATION-MIB", "cicIkeCfgPolicyAuth"), ("CISCO-IKE-CONFIGURATION-MIB", "cicIkeCfgPolicyDHGroup"))
if mibBuilder.loadTexts: ciscoIkeConfigPolicyDeleted.setStatus('current')
if mibBuilder.loadTexts: ciscoIkeConfigPolicyDeleted.setDescription(' This notification is issued when an existing ISAKMP policy configured on the managed device is about to be deleted. ')
cicIkeCfgMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 423, 2, 1))
cicIkeCfgMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 423, 2, 2))
cicIkeCfgMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 423, 2, 2, 1)).setObjects(("CISCO-IKE-CONFIGURATION-MIB", "cicIkeCfgOperGroup"), ("CISCO-IKE-CONFIGURATION-MIB", "cicIkeCfgIdentitiesGroup"), ("CISCO-IKE-CONFIGURATION-MIB", "cicIkeCfgPskAuthGroup"), ("CISCO-IKE-CONFIGURATION-MIB", "cicIkeCfgPolicyGroup"), ("CISCO-IKE-CONFIGURATION-MIB", "cicIkeCfgOptionalPolicyGroup"), ("CISCO-IKE-CONFIGURATION-MIB", "cicIkeCfgFailureRecoveryGroup"), ("CISCO-IKE-CONFIGURATION-MIB", "cicIkeCfgNotificationGroup"), ("CISCO-IKE-CONFIGURATION-MIB", "cicIkeCfgNotifCntlGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cicIkeCfgMIBCompliance = cicIkeCfgMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: cicIkeCfgMIBCompliance.setDescription('The compliance statement for SNMP entities the Internet Key Exchange Protocol configuration MIB.')
cicIkeCfgOperGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 423, 2, 1, 1)).setObjects(("CISCO-IKE-CONFIGURATION-MIB", "cicIkeEnabled"), ("CISCO-IKE-CONFIGURATION-MIB", "cicIkeAggressModeEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cicIkeCfgOperGroup = cicIkeCfgOperGroup.setStatus('current')
if mibBuilder.loadTexts: cicIkeCfgOperGroup.setDescription(' This group consists of objects that reflect the operational state of the IKE entity on the managed device. ')
cicIkeCfgIdentitiesGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 423, 2, 1, 2)).setObjects(("CISCO-IKE-CONFIGURATION-MIB", "cicIkeCfgIdentityType"), ("CISCO-IKE-CONFIGURATION-MIB", "cicIkeCfgInitiatorNextAvailIndex"), ("CISCO-IKE-CONFIGURATION-MIB", "cicIkeCfgInitiatorPAddrType"), ("CISCO-IKE-CONFIGURATION-MIB", "cicIkeCfgInitiatorPAddr"), ("CISCO-IKE-CONFIGURATION-MIB", "cicIkeCfgInitiatorVer"), ("CISCO-IKE-CONFIGURATION-MIB", "cicIkeCfgInitiatorStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cicIkeCfgIdentitiesGroup = cicIkeCfgIdentitiesGroup.setStatus('current')
if mibBuilder.loadTexts: cicIkeCfgIdentitiesGroup.setDescription(' This group consists of objects that reflect the Phase 1 ID used by the IKE entity on the managed device. ')
cicIkeCfgFailureRecoveryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 423, 2, 1, 3)).setObjects(("CISCO-IKE-CONFIGURATION-MIB", "cicIkeKeepAliveEnabled"), ("CISCO-IKE-CONFIGURATION-MIB", "cicIkeKeepAliveType"), ("CISCO-IKE-CONFIGURATION-MIB", "cicIkeKeepAliveInterval"), ("CISCO-IKE-CONFIGURATION-MIB", "cicIkeKeepAliveRetryInterval"), ("CISCO-IKE-CONFIGURATION-MIB", "cicIkeInvalidSpiNotify"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cicIkeCfgFailureRecoveryGroup = cicIkeCfgFailureRecoveryGroup.setStatus('current')
if mibBuilder.loadTexts: cicIkeCfgFailureRecoveryGroup.setDescription(' This group consists of objects that define how the local IKE entity is configured to respond to common failures. ')
cicIkeCfgPskAuthGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 423, 2, 1, 4)).setObjects(("CISCO-IKE-CONFIGURATION-MIB", "cicIkeCfgPskNextAvailIndex"), ("CISCO-IKE-CONFIGURATION-MIB", "cicIkeCfgPskKey"), ("CISCO-IKE-CONFIGURATION-MIB", "cicIkeCfgPskRemIdentType"), ("CISCO-IKE-CONFIGURATION-MIB", "cicIkeCfgPskRemIdentTypeStand"), ("CISCO-IKE-CONFIGURATION-MIB", "cicIkeCfgPskRemIdentity"), ("CISCO-IKE-CONFIGURATION-MIB", "cicIkeCfgPskRemIdAddrOrRg1OrSn"), ("CISCO-IKE-CONFIGURATION-MIB", "cicIkeCfgPskRemIdAddrRange2"), ("CISCO-IKE-CONFIGURATION-MIB", "cicIkeCfgPskRemIdSubnetMask"), ("CISCO-IKE-CONFIGURATION-MIB", "cicIkeCfgPskStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cicIkeCfgPskAuthGroup = cicIkeCfgPskAuthGroup.setStatus('current')
if mibBuilder.loadTexts: cicIkeCfgPskAuthGroup.setDescription(' This group consists of objects that are used to view and configure the preshared keys configured on the managed entity. ')
cicIkeCfgPolicyGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 423, 2, 1, 5)).setObjects(("CISCO-IKE-CONFIGURATION-MIB", "cicIkeCfgPolicyEncr"), ("CISCO-IKE-CONFIGURATION-MIB", "cicIkeCfgPolicyHash"), ("CISCO-IKE-CONFIGURATION-MIB", "cicIkeCfgPolicyPRF"), ("CISCO-IKE-CONFIGURATION-MIB", "cicIkeCfgPolicyAuth"), ("CISCO-IKE-CONFIGURATION-MIB", "cicIkeCfgPolicyDHGroup"), ("CISCO-IKE-CONFIGURATION-MIB", "cicIkeCfgPolicyLifetime"), ("CISCO-IKE-CONFIGURATION-MIB", "cicIkeCfgPolicyStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cicIkeCfgPolicyGroup = cicIkeCfgPolicyGroup.setStatus('current')
if mibBuilder.loadTexts: cicIkeCfgPolicyGroup.setDescription(' This group consists of objects that are used to view and configure the ISAKMP policies configured on the managed device. ')
cicIkeCfgOptionalPolicyGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 423, 2, 1, 6)).setObjects(("CISCO-IKE-CONFIGURATION-MIB", "cicIkeCfgPolicyLifesize"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cicIkeCfgOptionalPolicyGroup = cicIkeCfgOptionalPolicyGroup.setStatus('current')
if mibBuilder.loadTexts: cicIkeCfgOptionalPolicyGroup.setDescription(' This group consists of objects pertaining to ISAKMP policy management which are optional and may not be supported by every implementation of IKE. ')
cicIkeCfgNotifCntlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 423, 2, 1, 7)).setObjects(("CISCO-IKE-CONFIGURATION-MIB", "cicNotifCntlIkeAllNotifs"), ("CISCO-IKE-CONFIGURATION-MIB", "cicNotifCntlIkeOperStateChanged"), ("CISCO-IKE-CONFIGURATION-MIB", "cicNotifCntlIkePskAdded"), ("CISCO-IKE-CONFIGURATION-MIB", "cicNotifCntlIkePskDeleted"), ("CISCO-IKE-CONFIGURATION-MIB", "cicNotifCntlIkePolicyAdded"), ("CISCO-IKE-CONFIGURATION-MIB", "cicNotifCntlIkePolicyDeleted"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cicIkeCfgNotifCntlGroup = cicIkeCfgNotifCntlGroup.setStatus('current')
if mibBuilder.loadTexts: cicIkeCfgNotifCntlGroup.setDescription(' This group of objects controls the sending of notifications to signal the state of Phase-1 IKE configuration on the managed device. ')
cicIkeCfgNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 423, 2, 1, 8)).setObjects(("CISCO-IKE-CONFIGURATION-MIB", "ciscoIkeConfigOperStateChanged"), ("CISCO-IKE-CONFIGURATION-MIB", "ciscoIkeConfigPskAdded"), ("CISCO-IKE-CONFIGURATION-MIB", "ciscoIkeConfigPskDeleted"), ("CISCO-IKE-CONFIGURATION-MIB", "ciscoIkeConfigPolicyAdded"), ("CISCO-IKE-CONFIGURATION-MIB", "ciscoIkeConfigPolicyDeleted"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cicIkeCfgNotificationGroup = cicIkeCfgNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: cicIkeCfgNotificationGroup.setDescription(' This group contains the notifications to signal the changes to IKE on the managed device. ')
mibBuilder.exportSymbols("CISCO-IKE-CONFIGURATION-MIB", cicIkeCfgQoSControl=cicIkeCfgQoSControl, cicNotifCntlIkePolicyAdded=cicNotifCntlIkePolicyAdded, cicIkeKeepAliveInterval=cicIkeKeepAliveInterval, cicIkeCfgFailureRecovery=cicIkeCfgFailureRecovery, cicIkeKeepAliveType=cicIkeKeepAliveType, cicIkeCfgPolicyGroup=cicIkeCfgPolicyGroup, cicIkeCfgMIBCompliance=cicIkeCfgMIBCompliance, cicIkeCfgPolicyHash=cicIkeCfgPolicyHash, cicIkeCfgMIBGroups=cicIkeCfgMIBGroups, cicNotifCntlIkeOperStateChanged=cicNotifCntlIkeOperStateChanged, cicIkeCfgPskRemIdentType=cicIkeCfgPskRemIdentType, cicIkeCfgPolicies=cicIkeCfgPolicies, cicIkeCfgInitiatorTable=cicIkeCfgInitiatorTable, cicIkeCfgIdentities=cicIkeCfgIdentities, CicIkeConfigInitiatorIndex=CicIkeConfigInitiatorIndex, cicIkeCfgPskRemIdAddrRange2=cicIkeCfgPskRemIdAddrRange2, cicIkeConfigMibNotifCntl=cicIkeConfigMibNotifCntl, cicIkeCfgPskIndex=cicIkeCfgPskIndex, cicIkeCfgPskRemIdSubnetMask=cicIkeCfgPskRemIdSubnetMask, cicIkeCfgPskStatus=cicIkeCfgPskStatus, PYSNMP_MODULE_ID=ciscoIkeConfigMIB, cicIkeCfgFailureRecovConfigTable=cicIkeCfgFailureRecovConfigTable, cicIkeInvalidSpiNotify=cicIkeInvalidSpiNotify, cicIkeCfgOperations=cicIkeCfgOperations, cicIkeCfgPskTable=cicIkeCfgPskTable, cicIkeCfgPolicyPRF=cicIkeCfgPolicyPRF, cicIkeCfgInitiatorNextAvailIndex=cicIkeCfgInitiatorNextAvailIndex, cicIkeAggressModeEnabled=cicIkeAggressModeEnabled, cicIkeCfgNotifCntlGroup=cicIkeCfgNotifCntlGroup, cicIkeCfgIdentityEntry=cicIkeCfgIdentityEntry, cicIkeCfgInitiatorPAddr=cicIkeCfgInitiatorPAddr, cicIkeKeepAliveRetryInterval=cicIkeKeepAliveRetryInterval, cicIkeCfgServiceControl=cicIkeCfgServiceControl, cicIkeCfgNonceAuthConfig=cicIkeCfgNonceAuthConfig, cicIkeCfgPskKey=cicIkeCfgPskKey, cicIkeCfgPolicyAuth=cicIkeCfgPolicyAuth, cicNotifCntlIkePolicyDeleted=cicNotifCntlIkePolicyDeleted, cicIkeCfgPskRemIdentity=cicIkeCfgPskRemIdentity, ciscoIkeConfigOperStateChanged=ciscoIkeConfigOperStateChanged, cicIkeCfgInitiatorVer=cicIkeCfgInitiatorVer, ciscoIkeConfigPolicyDeleted=ciscoIkeConfigPolicyDeleted, cicIkeCfgPolicyEntry=cicIkeCfgPolicyEntry, cicIkeCfgPskEntry=cicIkeCfgPskEntry, cicIkeKeepAliveEnabled=cicIkeKeepAliveEnabled, cicIkeConfigMIBNotifs=cicIkeConfigMIBNotifs, cicIkeConfigMIBConform=cicIkeConfigMIBConform, cicIkeCfgIdentityType=cicIkeCfgIdentityType, cicIkeCfgIdentityDoi=cicIkeCfgIdentityDoi, cicIkeCfgPskRemIdAddrOrRg1OrSn=cicIkeCfgPskRemIdAddrOrRg1OrSn, cicIkeCfgPkiAuthConfig=cicIkeCfgPkiAuthConfig, cicIkeCfgInitiatorEntry=cicIkeCfgInitiatorEntry, ciscoIkeConfigPskDeleted=ciscoIkeConfigPskDeleted, cicIkeCfgPolicyLifesize=cicIkeCfgPolicyLifesize, cicIkeCfgInitiatorNextAvailTable=cicIkeCfgInitiatorNextAvailTable, cicIkeConfigMIBObjects=cicIkeConfigMIBObjects, cicIkeCfgInitiatorIndex=cicIkeCfgInitiatorIndex, cicIkeCfgPskRemIdentTypeStand=cicIkeCfgPskRemIdentTypeStand, cicIkeCfgNotificationGroup=cicIkeCfgNotificationGroup, cicIkeCfgPolicyLifetime=cicIkeCfgPolicyLifetime, cicIkeCfgPskNextAvailTable=cicIkeCfgPskNextAvailTable, cicIkeCfgPolicyStatus=cicIkeCfgPolicyStatus, cicIkeCfgPolicyTable=cicIkeCfgPolicyTable, cicIkeCfgFailureRecoveryGroup=cicIkeCfgFailureRecoveryGroup, cicIkeCfgFailureRecovConfigEntry=cicIkeCfgFailureRecovConfigEntry, cicIkeEnabled=cicIkeEnabled, ciscoIkeConfigPskAdded=ciscoIkeConfigPskAdded, ciscoIkeConfigPolicyAdded=ciscoIkeConfigPolicyAdded, CicIkeConfigPskIndex=CicIkeConfigPskIndex, cicIkeCfgInitiatorStatus=cicIkeCfgInitiatorStatus, cicIkeCfgPolicyEncr=cicIkeCfgPolicyEncr, cicIkeCfgPeerAuth=cicIkeCfgPeerAuth, cicIkeCfgPskAuthGroup=cicIkeCfgPskAuthGroup, cicIkeCfgIdentityTable=cicIkeCfgIdentityTable, cicIkeCfgInitiatorPAddrType=cicIkeCfgInitiatorPAddrType, cicIkeCfgPolicyPriority=cicIkeCfgPolicyPriority, cicIkeCfgPolicyDHGroup=cicIkeCfgPolicyDHGroup, cicIkeCfgOperGroup=cicIkeCfgOperGroup, cicIkeCfgPskNextAvailIndex=cicIkeCfgPskNextAvailIndex, cicNotifCntlIkeAllNotifs=cicNotifCntlIkeAllNotifs, cicIkeCfgMIBCompliances=cicIkeCfgMIBCompliances, cicNotifCntlIkePskAdded=cicNotifCntlIkePskAdded, cicIkeCfgPskNextAvailEntry=cicIkeCfgPskNextAvailEntry, cicIkeCfgCallAdmssionnCtrl=cicIkeCfgCallAdmssionnCtrl, ciscoIkeConfigMIB=ciscoIkeConfigMIB, cicIkeCfgIdentitiesGroup=cicIkeCfgIdentitiesGroup, cicIkeCfgPskAuthConfig=cicIkeCfgPskAuthConfig, cicIkeCfgInitiatorNextAvailEntry=cicIkeCfgInitiatorNextAvailEntry, cicIkeCfgOptionalPolicyGroup=cicIkeCfgOptionalPolicyGroup, cicNotifCntlIkePskDeleted=cicNotifCntlIkePskDeleted)
