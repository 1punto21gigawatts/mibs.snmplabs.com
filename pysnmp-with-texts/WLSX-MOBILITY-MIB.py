#
# PySNMP MIB module WLSX-MOBILITY-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/WLSX-MOBILITY-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:36:49 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
wlsxEnterpriseMibModules, = mibBuilder.importSymbols("ARUBA-MIB", "wlsxEnterpriseMibModules")
ArubaRogueApType, ArubaActiveState, ArubaEnableValue, ArubaEncryptionMethods, ArubaPhyType, ArubaAuthenticationMethods, ArubaFrameType = mibBuilder.importSymbols("ARUBA-TC", "ArubaRogueApType", "ArubaActiveState", "ArubaEnableValue", "ArubaEncryptionMethods", "ArubaPhyType", "ArubaAuthenticationMethods", "ArubaFrameType")
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
Gauge32, Unsigned32, MibIdentifier, IpAddress, snmpModules, iso, TimeTicks, Integer32, Counter32, ObjectIdentity, Bits, Counter64, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "Unsigned32", "MibIdentifier", "IpAddress", "snmpModules", "iso", "TimeTicks", "Integer32", "Counter32", "ObjectIdentity", "Bits", "Counter64", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity")
MacAddress, TimeInterval, TAddress, TruthValue, TextualConvention, DisplayString, TestAndIncr, TDomain, StorageType, PhysAddress, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "TimeInterval", "TAddress", "TruthValue", "TextualConvention", "DisplayString", "TestAndIncr", "TDomain", "StorageType", "PhysAddress", "RowStatus")
wlsxMobilityMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 9))
wlsxMobilityMIB.setRevisions(('1908-04-16 02:06',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: wlsxMobilityMIB.setRevisionsDescriptions(('The initial revision.',))
if mibBuilder.loadTexts: wlsxMobilityMIB.setLastUpdated('0804160206Z')
if mibBuilder.loadTexts: wlsxMobilityMIB.setOrganization('Aruba Wireless Networks')
if mibBuilder.loadTexts: wlsxMobilityMIB.setContactInfo('Postal: 1322 Crossman Avenue Sunnyvale, CA 94089 E-mail: dl-support@arubanetworks.com Phone: +1 408 227 4500')
if mibBuilder.loadTexts: wlsxMobilityMIB.setDescription('This MIB module defines MIB objects which provide information about the mobility subsystem in the Aruba controller.')
wlsxMobilityConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 9, 1))
wlsxMobilityProxyStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 9, 2))
wlsxMobilityProxyDHCPStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 9, 3))
wlsxMobilityHAStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 9, 4))
wlsxMobilityFAStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 9, 5))
wlsxMobilityHAFARevocationStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 9, 6))
wlsxMobilityDomainTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 9, 1, 1), )
if mibBuilder.loadTexts: wlsxMobilityDomainTable.setStatus('current')
if mibBuilder.loadTexts: wlsxMobilityDomainTable.setDescription(' This table lists all mobility domains configured on the controller. ')
wlsxMobilityDomainEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 9, 1, 1, 1), ).setIndexNames((0, "WLSX-MOBILITY-MIB", "mobilityDomainName"))
if mibBuilder.loadTexts: wlsxMobilityDomainEntry.setStatus('current')
if mibBuilder.loadTexts: wlsxMobilityDomainEntry.setDescription('Mobility Domain Entry')
mobilityDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 9, 1, 1, 1, 1), DisplayString())
if mibBuilder.loadTexts: mobilityDomainName.setStatus('current')
if mibBuilder.loadTexts: mobilityDomainName.setDescription('The name of the active mobility domain(s) this controller belongs to')
mobilityDomainIsExclusive = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 9, 1, 1, 1, 2), ArubaEnableValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mobilityDomainIsExclusive.setStatus('deprecated')
if mibBuilder.loadTexts: mobilityDomainIsExclusive.setDescription('Indicates whether this mobility domain is exclusive or not.')
mobilityDomainStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 9, 1, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mobilityDomainStatus.setStatus('current')
if mibBuilder.loadTexts: mobilityDomainStatus.setDescription('Row status object used to indicate the status of the row')
wlsxMobilityHomeAgentTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 9, 1, 3), )
if mibBuilder.loadTexts: wlsxMobilityHomeAgentTable.setStatus('current')
if mibBuilder.loadTexts: wlsxMobilityHomeAgentTable.setDescription(' This table lists all Home Agents visible to the controller. ')
wlsxMobilityHomeAgentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 9, 1, 3, 1), ).setIndexNames((0, "WLSX-MOBILITY-MIB", "mobilityHomeAgentSubnet"), (0, "WLSX-MOBILITY-MIB", "mobilityHomeAgentMask"), (0, "WLSX-MOBILITY-MIB", "mobilityHomeAgentIp"))
if mibBuilder.loadTexts: wlsxMobilityHomeAgentEntry.setStatus('current')
if mibBuilder.loadTexts: wlsxMobilityHomeAgentEntry.setDescription('Mobility Home Agent Entry')
mobilityHomeAgentSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 9, 1, 3, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mobilityHomeAgentSubnet.setStatus('current')
if mibBuilder.loadTexts: mobilityHomeAgentSubnet.setDescription('Subnet of the home agent')
mobilityHomeAgentMask = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 9, 1, 3, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mobilityHomeAgentMask.setStatus('current')
if mibBuilder.loadTexts: mobilityHomeAgentMask.setDescription('Subnet mask of the home agent')
mobilityHomeAgentIp = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 9, 1, 3, 1, 3), IpAddress())
if mibBuilder.loadTexts: mobilityHomeAgentIp.setStatus('current')
if mibBuilder.loadTexts: mobilityHomeAgentIp.setDescription('IP address of the home agent')
mobilityHomeAgentVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 9, 1, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mobilityHomeAgentVlan.setStatus('current')
if mibBuilder.loadTexts: mobilityHomeAgentVlan.setDescription('Vlan of the home agent')
wlsxMobilityHostTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 9, 1, 4), )
if mibBuilder.loadTexts: wlsxMobilityHostTable.setStatus('current')
if mibBuilder.loadTexts: wlsxMobilityHostTable.setDescription(' This table lists all mobile hosts on the controller. ')
wlsxMobilityHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 9, 1, 4, 1), ).setIndexNames((0, "WLSX-MOBILITY-MIB", "mobilityHostMac"))
if mibBuilder.loadTexts: wlsxMobilityHostEntry.setStatus('current')
if mibBuilder.loadTexts: wlsxMobilityHostEntry.setDescription('Mobility Host Home Agent Entry')
mobilityHostMac = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 9, 1, 4, 1, 1), MacAddress())
if mibBuilder.loadTexts: mobilityHostMac.setStatus('current')
if mibBuilder.loadTexts: mobilityHostMac.setDescription('MAC address of the mobile host')
mobilityHostIp = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 9, 1, 4, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mobilityHostIp.setStatus('current')
if mibBuilder.loadTexts: mobilityHostIp.setDescription('IP address of the mobile host')
mobilityHostStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 9, 1, 4, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mobilityHostStatus.setStatus('current')
if mibBuilder.loadTexts: mobilityHostStatus.setDescription('Roaming status of the mobile host')
mobilityHostServiceTime = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 9, 1, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mobilityHostServiceTime.setStatus('current')
if mibBuilder.loadTexts: mobilityHostServiceTime.setDescription('Time in seconds mobility service is provided to the mobile host')
mobilityHostHomeVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 9, 1, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mobilityHostHomeVlan.setStatus('current')
if mibBuilder.loadTexts: mobilityHostHomeVlan.setDescription('Home VLAN of the mobile host')
mobilityHostHomeNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 9, 1, 4, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mobilityHostHomeNetwork.setStatus('current')
if mibBuilder.loadTexts: mobilityHostHomeNetwork.setDescription('Home network of the mobile host')
mobilityHostHomeMask = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 9, 1, 4, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mobilityHostHomeMask.setStatus('current')
if mibBuilder.loadTexts: mobilityHostHomeMask.setDescription('Home network mask of the mobile host')
mobilityHostDhcpInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 9, 1, 4, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mobilityHostDhcpInfo.setStatus('current')
if mibBuilder.loadTexts: mobilityHostDhcpInfo.setDescription('DHCP details of the mobile host')
mobilityProxyPktRx = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 9, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mobilityProxyPktRx.setStatus('current')
if mibBuilder.loadTexts: mobilityProxyPktRx.setDescription(' This describes the number of packet Proxy State machine Received ')
mobilityProxyPktHandled = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 9, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mobilityProxyPktHandled.setStatus('current')
if mibBuilder.loadTexts: mobilityProxyPktHandled.setDescription(' This describes the number of packet Proxy State machine Processed ')
mobilityProxyPktFwd = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 9, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mobilityProxyPktFwd.setStatus('current')
if mibBuilder.loadTexts: mobilityProxyPktFwd.setDescription(' This describes the number of packet Proxy State machine Forwarded back to Datapath ')
mobilityProxyPktDrop = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 9, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mobilityProxyPktDrop.setStatus('current')
if mibBuilder.loadTexts: mobilityProxyPktDrop.setDescription(' This describes the number of packet Proxy State machine Dropped ')
mobilityProxyBusy = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 9, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mobilityProxyBusy.setStatus('current')
if mibBuilder.loadTexts: mobilityProxyBusy.setDescription(' This describes the number of mobility events Proxy State machine ignored as it is busy. ')
mobilityProxyNoMobility = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 9, 2, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mobilityProxyNoMobility.setStatus('current')
if mibBuilder.loadTexts: mobilityProxyNoMobility.setDescription(' This describes the number of mobility clients with <No Mobility Service> ')
mobilityProxyClientIPChg = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 9, 2, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mobilityProxyClientIPChg.setStatus('current')
if mibBuilder.loadTexts: mobilityProxyClientIPChg.setDescription(' This describes the number of times mobility detected client IP change ')
mobilityProxyClientEssidChg = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 9, 2, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mobilityProxyClientEssidChg.setStatus('current')
if mibBuilder.loadTexts: mobilityProxyClientEssidChg.setDescription(' This describes the number of times mobility detected client ESSID change ')
mobilityProxyDhcpBootpRx = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 9, 3, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mobilityProxyDhcpBootpRx.setStatus('current')
if mibBuilder.loadTexts: mobilityProxyDhcpBootpRx.setDescription(' This describes the number of DHCP Bootp messages received ')
mobilityProxyDhcpPktProc = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 9, 3, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mobilityProxyDhcpPktProc.setStatus('current')
if mibBuilder.loadTexts: mobilityProxyDhcpPktProc.setDescription(' This describes the number of DHCP messages Processed ')
mobilityProxyDhcpPktFwd = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 9, 3, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mobilityProxyDhcpPktFwd.setStatus('current')
if mibBuilder.loadTexts: mobilityProxyDhcpPktFwd.setDescription(' This describes the number of DHCP messages forwarded ')
mobilityProxyDhcpPktDrop = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 9, 3, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mobilityProxyDhcpPktDrop.setStatus('current')
if mibBuilder.loadTexts: mobilityProxyDhcpPktDrop.setDescription(' This describes the number of DHCP messages Dropped ')
mobilityProxyDHCPNak = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 9, 3, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mobilityProxyDHCPNak.setStatus('current')
if mibBuilder.loadTexts: mobilityProxyDHCPNak.setDescription(' This describes the number of DHCP NAK received from the server. ')
mobilityProxyBadDHCPPkt = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 9, 3, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mobilityProxyBadDHCPPkt.setStatus('current')
if mibBuilder.loadTexts: mobilityProxyBadDHCPPkt.setDescription(' This describes the number of DHCP packets marked invalid by mobility ')
mobilityProxyNotDHCP = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 9, 3, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mobilityProxyNotDHCP.setStatus('current')
if mibBuilder.loadTexts: mobilityProxyNotDHCP.setDescription(' This describes the number of Non-DHCP frames received by DHCP state machine ')
mobilityProxyDHCPNoHomeVlan = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 9, 3, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mobilityProxyDHCPNoHomeVlan.setStatus('current')
if mibBuilder.loadTexts: mobilityProxyDHCPNoHomeVlan.setDescription(' This describes the number of DHCP requested IP for which home vlan does not exist. ')
mobilityProxyDHCPUnexpFrame = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 9, 3, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mobilityProxyDHCPUnexpFrame.setStatus('current')
if mibBuilder.loadTexts: mobilityProxyDHCPUnexpFrame.setDescription(' This describes the number of unexpected DHCP frames received from client ')
mobilityProxyDHCPUnexpRemote = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 9, 3, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mobilityProxyDHCPUnexpRemote.setStatus('current')
if mibBuilder.loadTexts: mobilityProxyDHCPUnexpRemote.setDescription(' This describes the number of unexpected DHCP frames received from remote HA/FA. ')
mobilityHARxRRQ = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 9, 4, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mobilityHARxRRQ.setStatus('current')
if mibBuilder.loadTexts: mobilityHARxRRQ.setDescription(' This describes the number of Registration request received by HA ')
mobilityHASentRRP = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 9, 4, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mobilityHASentRRP.setStatus('current')
if mibBuilder.loadTexts: mobilityHASentRRP.setDescription(' This describes the number of Registration request reply sent by HA ')
mobilityHARRQAccept = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 9, 4, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mobilityHARRQAccept.setStatus('current')
if mibBuilder.loadTexts: mobilityHARRQAccept.setDescription(' This describes the number of Registration request accepted by HA ')
mobilityHARRQDenied = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 9, 4, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mobilityHARRQDenied.setStatus('current')
if mibBuilder.loadTexts: mobilityHARRQDenied.setDescription(' This describes the number of Registration request denied by HA ')
mobilityHARRQIgnore = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 9, 4, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mobilityHARRQIgnore.setStatus('current')
if mibBuilder.loadTexts: mobilityHARRQIgnore.setDescription(' This describes the number of Registration request Ignored by HA ')
mobilityHARRQAdminDeny = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 9, 4, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mobilityHARRQAdminDeny.setStatus('current')
if mibBuilder.loadTexts: mobilityHARRQAdminDeny.setDescription(' This describes the number of Registration request denied for Administrative reasons by HA ')
mobilityHARRQNoResource = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 9, 4, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mobilityHARRQNoResource.setStatus('current')
if mibBuilder.loadTexts: mobilityHARRQNoResource.setDescription(' This describes the number of Registration request denied due to lack of resources by HA ')
mobilityHAMNauthFail = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 9, 4, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mobilityHAMNauthFail.setStatus('current')
if mibBuilder.loadTexts: mobilityHAMNauthFail.setDescription(' This describes the number of times MN-HA authentication failed ')
mobilityHAFAauthFail = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 9, 4, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mobilityHAFAauthFail.setStatus('current')
if mibBuilder.loadTexts: mobilityHAFAauthFail.setDescription(' This describes the number of HA-FA authentication failed ')
mobilityHABadID = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 9, 4, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mobilityHABadID.setStatus('current')
if mibBuilder.loadTexts: mobilityHABadID.setDescription(' This describes the number of mobileIP messages rejected by HA due to bad identification ')
mobilityHAMalform = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 9, 4, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mobilityHAMalform.setStatus('current')
if mibBuilder.loadTexts: mobilityHAMalform.setDescription(' This describes the number of mobileIP messages rejected by HA as they are poorly formed ')
mobilityHATooManyBnd = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 9, 4, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mobilityHATooManyBnd.setStatus('current')
if mibBuilder.loadTexts: mobilityHATooManyBnd.setDescription(' This describes the number of Registration Request rejected due to too many bindings at HA ')
mobilityHABndExpire = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 9, 4, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mobilityHABndExpire.setStatus('current')
if mibBuilder.loadTexts: mobilityHABndExpire.setDescription(' This describes the number of times binding expired ')
mobilityFASentRRQ = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 9, 5, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mobilityFASentRRQ.setStatus('current')
if mibBuilder.loadTexts: mobilityFASentRRQ.setDescription(' This describes the number of Registration request sent by FA ')
mobilityFARcvRRP = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 9, 5, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mobilityFARcvRRP.setStatus('current')
if mibBuilder.loadTexts: mobilityFARcvRRP.setDescription(' This describes the number of Registration request reply received by FA ')
mobilityFARRQAccept = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 9, 5, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mobilityFARRQAccept.setStatus('current')
if mibBuilder.loadTexts: mobilityFARRQAccept.setDescription(' This describes the number of Registration request accepted by HA ')
mobilityFARRQReject = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 9, 5, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mobilityFARRQReject.setStatus('current')
if mibBuilder.loadTexts: mobilityFARRQReject.setDescription(' This describes the number of Registration request rejected by HA ')
mobilityMNHAauthFAIL = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 9, 5, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mobilityMNHAauthFAIL.setStatus('current')
if mibBuilder.loadTexts: mobilityMNHAauthFAIL.setDescription(' This describes the number of times MN-HA authentication failed ')
mobilityFAHAauthFAIL = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 9, 5, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mobilityFAHAauthFAIL.setStatus('current')
if mibBuilder.loadTexts: mobilityFAHAauthFAIL.setDescription(' This describes the number of FA-HA authentication failed ')
mobilityFABadID = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 9, 5, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mobilityFABadID.setStatus('current')
if mibBuilder.loadTexts: mobilityFABadID.setDescription(' This describes the number of mobileIP messages rejected by FA due to bad identification ')
mobilityFAMalform = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 9, 5, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mobilityFAMalform.setStatus('current')
if mibBuilder.loadTexts: mobilityFAMalform.setDescription(' This describes the number of mobileIP messages rejected by FA as they are poorly formed ')
mobilitySentRRVRQ = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 9, 6, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mobilitySentRRVRQ.setStatus('current')
if mibBuilder.loadTexts: mobilitySentRRVRQ.setDescription(' This describes the number of Registration revocation request sent ')
mobilityRcvRRVAck = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 9, 6, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mobilityRcvRRVAck.setStatus('current')
if mibBuilder.loadTexts: mobilityRcvRRVAck.setDescription(' This describes the number of Registration revocation ack received ')
mobilityRcvRRV = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 9, 6, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mobilityRcvRRV.setStatus('current')
if mibBuilder.loadTexts: mobilityRcvRRV.setDescription(' This describes the number of Registration revocation request received ')
mobilitySentRRVAck = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 9, 6, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mobilitySentRRVAck.setStatus('current')
if mibBuilder.loadTexts: mobilitySentRRVAck.setDescription(' This describes the number of received Registration revocation request ack sent ')
mobilityRRVRQIgnore = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 9, 6, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mobilityRRVRQIgnore.setStatus('current')
if mibBuilder.loadTexts: mobilityRRVRQIgnore.setDescription(' This describes the number of Registration revocation request ignored ')
mobilityRRVAckIgnore = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 9, 6, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mobilityRRVAckIgnore.setStatus('current')
if mibBuilder.loadTexts: mobilityRRVAckIgnore.setDescription(' This describes the number of Registration revocation ack Ignored ')
mibBuilder.exportSymbols("WLSX-MOBILITY-MIB", mobilityHARRQIgnore=mobilityHARRQIgnore, wlsxMobilityHAStatsGroup=wlsxMobilityHAStatsGroup, mobilityFAHAauthFAIL=mobilityFAHAauthFAIL, wlsxMobilityMIB=wlsxMobilityMIB, mobilityHARRQDenied=mobilityHARRQDenied, mobilityHATooManyBnd=mobilityHATooManyBnd, mobilityFABadID=mobilityFABadID, wlsxMobilityConfigGroup=wlsxMobilityConfigGroup, mobilitySentRRVAck=mobilitySentRRVAck, mobilityHARRQNoResource=mobilityHARRQNoResource, mobilityFARRQAccept=mobilityFARRQAccept, mobilityHostDhcpInfo=mobilityHostDhcpInfo, mobilityProxyDHCPNoHomeVlan=mobilityProxyDHCPNoHomeVlan, mobilityHAMalform=mobilityHAMalform, mobilityProxyDhcpPktProc=mobilityProxyDhcpPktProc, mobilityProxyBadDHCPPkt=mobilityProxyBadDHCPPkt, mobilityProxyNoMobility=mobilityProxyNoMobility, mobilityRRVAckIgnore=mobilityRRVAckIgnore, mobilitySentRRVRQ=mobilitySentRRVRQ, mobilityRRVRQIgnore=mobilityRRVRQIgnore, mobilityMNHAauthFAIL=mobilityMNHAauthFAIL, wlsxMobilityHAFARevocationStatsGroup=wlsxMobilityHAFARevocationStatsGroup, mobilityFASentRRQ=mobilityFASentRRQ, mobilityHARxRRQ=mobilityHARxRRQ, wlsxMobilityProxyStatsGroup=wlsxMobilityProxyStatsGroup, mobilityDomainName=mobilityDomainName, mobilityProxyDHCPNak=mobilityProxyDHCPNak, mobilityProxyDHCPUnexpRemote=mobilityProxyDHCPUnexpRemote, mobilityHASentRRP=mobilityHASentRRP, mobilityRcvRRVAck=mobilityRcvRRVAck, wlsxMobilityHomeAgentTable=wlsxMobilityHomeAgentTable, mobilityHostIp=mobilityHostIp, wlsxMobilityFAStatsGroup=wlsxMobilityFAStatsGroup, mobilityDomainStatus=mobilityDomainStatus, mobilityProxyPktFwd=mobilityProxyPktFwd, mobilityHostStatus=mobilityHostStatus, mobilityFARRQReject=mobilityFARRQReject, mobilityFARcvRRP=mobilityFARcvRRP, mobilityHostHomeVlan=mobilityHostHomeVlan, mobilityProxyDHCPUnexpFrame=mobilityProxyDHCPUnexpFrame, wlsxMobilityProxyDHCPStatsGroup=wlsxMobilityProxyDHCPStatsGroup, PYSNMP_MODULE_ID=wlsxMobilityMIB, mobilityHostServiceTime=mobilityHostServiceTime, mobilityHARRQAccept=mobilityHARRQAccept, mobilityProxyDhcpPktDrop=mobilityProxyDhcpPktDrop, mobilityProxyPktRx=mobilityProxyPktRx, mobilityProxyClientEssidChg=mobilityProxyClientEssidChg, mobilityProxyDhcpBootpRx=mobilityProxyDhcpBootpRx, mobilityHABndExpire=mobilityHABndExpire, wlsxMobilityHostEntry=wlsxMobilityHostEntry, mobilityDomainIsExclusive=mobilityDomainIsExclusive, wlsxMobilityHostTable=wlsxMobilityHostTable, mobilityHAMNauthFail=mobilityHAMNauthFail, mobilityProxyPktHandled=mobilityProxyPktHandled, wlsxMobilityDomainTable=wlsxMobilityDomainTable, mobilityProxyDhcpPktFwd=mobilityProxyDhcpPktFwd, mobilityHAFAauthFail=mobilityHAFAauthFail, wlsxMobilityDomainEntry=wlsxMobilityDomainEntry, mobilityFAMalform=mobilityFAMalform, mobilityRcvRRV=mobilityRcvRRV, mobilityHomeAgentSubnet=mobilityHomeAgentSubnet, mobilityHomeAgentIp=mobilityHomeAgentIp, mobilityHostHomeNetwork=mobilityHostHomeNetwork, mobilityProxyNotDHCP=mobilityProxyNotDHCP, mobilityProxyBusy=mobilityProxyBusy, wlsxMobilityHomeAgentEntry=wlsxMobilityHomeAgentEntry, mobilityHostHomeMask=mobilityHostHomeMask, mobilityProxyPktDrop=mobilityProxyPktDrop, mobilityHostMac=mobilityHostMac, mobilityHABadID=mobilityHABadID, mobilityHomeAgentMask=mobilityHomeAgentMask, mobilityHomeAgentVlan=mobilityHomeAgentVlan, mobilityProxyClientIPChg=mobilityProxyClientIPChg, mobilityHARRQAdminDeny=mobilityHARRQAdminDeny)
