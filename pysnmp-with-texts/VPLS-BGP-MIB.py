#
# PySNMP MIB module VPLS-BGP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/VPLS-BGP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:35:20 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
pwIndex, = mibBuilder.importSymbols("PW-STD-MIB", "pwIndex")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
Bits, TimeTicks, Counter32, Counter64, transmission, Gauge32, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, Unsigned32, NotificationType, iso, ModuleIdentity, Integer32, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "TimeTicks", "Counter32", "Counter64", "transmission", "Gauge32", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "Unsigned32", "NotificationType", "iso", "ModuleIdentity", "Integer32", "MibIdentifier")
DisplayString, RowStatus, TextualConvention, StorageType = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "RowStatus", "TextualConvention", "StorageType")
vplsConfigIndex, = mibBuilder.importSymbols("VPLS-GENERIC-MIB", "vplsConfigIndex")
vplsBgpMIB = ModuleIdentity((1, 3, 6, 1, 2, 1, 10, 276))
vplsBgpMIB.setRevisions(('2014-05-19 12:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: vplsBgpMIB.setRevisionsDescriptions(('Initial version published as part of RFC 7257.',))
if mibBuilder.loadTexts: vplsBgpMIB.setLastUpdated('201405191200Z')
if mibBuilder.loadTexts: vplsBgpMIB.setOrganization('Layer 2 Virtual Private Networks (L2VPN) Working Group')
if mibBuilder.loadTexts: vplsBgpMIB.setContactInfo(' V. J. Shah Email: vshah@juniper.net The L2VPN Working Group (email distribution l2vpn@ietf.org, http://www.ietf.org/wg/l2vpn/charter/) ')
if mibBuilder.loadTexts: vplsBgpMIB.setDescription("Copyright (c) 2014 IETF Trust and the persons identified as authors of the code. All rights reserved. Redistribution and use in source and binary forms, with or without modification, is permitted pursuant to, and subject to the license terms contained in, the Simplified BSD License set forth in Section 4.c of the IETF Trust's Legal Provisions Relating to IETF Documents (http://trustee.ietf.org/license-info). The initial version of this MIB module was published in RFC 7257; for full legal notices see the RFC itself. This MIB module contains managed object definitions for BGP signaled Virtual Private LAN Service as in RFC 4761. This MIB module enables the use of any underlying pseudowire network.")
vplsBgpObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 276, 1))
vplsBgpConformance = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 276, 2))
vplsBgpConfigTable = MibTable((1, 3, 6, 1, 2, 1, 10, 276, 1, 1), )
if mibBuilder.loadTexts: vplsBgpConfigTable.setStatus('current')
if mibBuilder.loadTexts: vplsBgpConfigTable.setDescription('This table specifies information for configuring and monitoring BGP-specific parameters for Virtual Private LAN Service (VPLS).')
vplsBgpConfigEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 276, 1, 1, 1), ).setIndexNames((0, "VPLS-GENERIC-MIB", "vplsConfigIndex"))
if mibBuilder.loadTexts: vplsBgpConfigEntry.setStatus('current')
if mibBuilder.loadTexts: vplsBgpConfigEntry.setDescription('A row in this table represents BGP-specific information for Virtual Private LAN Service (VPLS) in a packet network. It is indexed by vplsConfigIndex, which uniquely identifies a single instance of a VPLS service. A row is automatically created when a VPLS service is created that is configured to use BGP signaling. All of the writable object values can be changed when vplsConfigRowStatus is in the active(1) state. ')
vplsBgpConfigVERangeSize = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 276, 1, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vplsBgpConfigVERangeSize.setStatus('current')
if mibBuilder.loadTexts: vplsBgpConfigVERangeSize.setDescription('Specifies the size of the range of VPLS Edge Identifier (VE ID) in this VPLS service. This number controls the size of the label block advertised for this VE by the PE. A value of 0 indicates that the range is not configured and the PE derives the range value from received advertisements from other PEs. The VE ID takes 2 octets in VPLS BGP NLRI according to RFC 4761. Hence we have limited the range of this object to 65535.')
vplsBgpVETable = MibTable((1, 3, 6, 1, 2, 1, 10, 276, 1, 2), )
if mibBuilder.loadTexts: vplsBgpVETable.setStatus('current')
if mibBuilder.loadTexts: vplsBgpVETable.setDescription('This table associates VPLS Edge devices to a VPLS service')
vplsBgpVEEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 276, 1, 2, 1), ).setIndexNames((0, "VPLS-GENERIC-MIB", "vplsConfigIndex"), (0, "VPLS-BGP-MIB", "vplsBgpVEId"))
if mibBuilder.loadTexts: vplsBgpVEEntry.setStatus('current')
if mibBuilder.loadTexts: vplsBgpVEEntry.setDescription('An entry in this table is created for each VE ID configured on a PE for a particular VPLS service instance. Entries in this table may be created or deleted through SNMP, as side effects of console or other non-SNMP management commands, or upon learning via autodiscovery. It is optional for the agent to allow entries to be created that point to nonexistent entries in vplsConfigTable.')
vplsBgpVEId = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 276, 1, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: vplsBgpVEId.setStatus('current')
if mibBuilder.loadTexts: vplsBgpVEId.setDescription('A secondary index identifying a VE within an instance of a VPLS service. The VE ID takes 2 octets in VPLS BGP NLRI according to RFC 4761. Hence, we have limited the range of this object to 65535.')
vplsBgpVEName = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 276, 1, 2, 1, 2), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vplsBgpVEName.setStatus('current')
if mibBuilder.loadTexts: vplsBgpVEName.setDescription('Descriptive name for the site or user-facing PE (U-PE) associated with this VE ID.')
vplsBgpVEPreference = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 276, 1, 2, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vplsBgpVEPreference.setStatus('current')
if mibBuilder.loadTexts: vplsBgpVEPreference.setDescription('Specifies the preference of the VE ID on this Provider Edge (PE) if the site is multihomed and VE ID is reused.')
vplsBgpVERowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 276, 1, 2, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vplsBgpVERowStatus.setStatus('current')
if mibBuilder.loadTexts: vplsBgpVERowStatus.setDescription('This variable is used to create, modify, and/or delete a row in this table. All other objects in this row must be set to valid values before this object can be set to active(1). When a row in this table is in active(1) state, no objects in that row can be modified except vplsBgpSiteRowStatus.')
vplsBgpVEStorageType = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 276, 1, 2, 1, 6), StorageType().clone('volatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vplsBgpVEStorageType.setStatus('current')
if mibBuilder.loadTexts: vplsBgpVEStorageType.setDescription('This variable indicates the storage type for this row.')
vplsBgpPwBindTable = MibTable((1, 3, 6, 1, 2, 1, 10, 276, 1, 3), )
if mibBuilder.loadTexts: vplsBgpPwBindTable.setStatus('current')
if mibBuilder.loadTexts: vplsBgpPwBindTable.setDescription('This table provides BGP-specific information for an association between a VPLS service and the corresponding pseudowires. A service can have more than one pseudowire association. Pseudowires are defined in the pwTable.')
vplsBgpPwBindEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 276, 1, 3, 1), ).setIndexNames((0, "VPLS-GENERIC-MIB", "vplsConfigIndex"), (0, "PW-STD-MIB", "pwIndex"))
if mibBuilder.loadTexts: vplsBgpPwBindEntry.setStatus('current')
if mibBuilder.loadTexts: vplsBgpPwBindEntry.setDescription('Each row represents an association between a VPLS instance and one or more pseudowires defined in the pwTable. Each index is unique in describing an entry in this table. However, both indexes are required to define the one to many association of service to pseudowire. An entry in this table in instantiated only when BGP signaling is used to configure VPLS service. Each entry in this table provides BGP-specific information for the VPLS represented by vplsConfigIndex.')
vplsBgpPwBindLocalVEId = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 276, 1, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vplsBgpPwBindLocalVEId.setStatus('current')
if mibBuilder.loadTexts: vplsBgpPwBindLocalVEId.setDescription('Identifies the local VE with which this pseudowire is associated. The VE ID takes 2 octets in VPLS BGP NLRI according to RFC 4761. Hence, we have limited the range of this object to 65535.')
vplsBgpPwBindRemoteVEId = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 276, 1, 3, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vplsBgpPwBindRemoteVEId.setStatus('current')
if mibBuilder.loadTexts: vplsBgpPwBindRemoteVEId.setDescription('Identifies the remote VE with which this pseudowire is associated. The VE ID takes 2 octets in VPLS BGP NLRI according to RFC 4761. Hence, we have limited the range of this object to 65535.')
vplsBgpCompliances = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 276, 2, 1))
vplsBgpModuleFullCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 10, 276, 2, 1, 1)).setObjects(("VPLS-BGP-MIB", "vplsBgpConfigGroup"), ("VPLS-BGP-MIB", "vplsBgpVEGroup"), ("VPLS-BGP-MIB", "vplsBgpPwBindGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vplsBgpModuleFullCompliance = vplsBgpModuleFullCompliance.setStatus('current')
if mibBuilder.loadTexts: vplsBgpModuleFullCompliance.setDescription('Compliance requirement for implementations that provide full support for VPLS-BGP-MIB. Such devices can then be monitored and configured using this MIB module.')
vplsBgpModuleReadOnlyCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 10, 276, 2, 1, 2)).setObjects(("VPLS-BGP-MIB", "vplsBgpConfigGroup"), ("VPLS-BGP-MIB", "vplsBgpVEGroup"), ("VPLS-BGP-MIB", "vplsBgpPwBindGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vplsBgpModuleReadOnlyCompliance = vplsBgpModuleReadOnlyCompliance.setStatus('current')
if mibBuilder.loadTexts: vplsBgpModuleReadOnlyCompliance.setDescription('Compliance requirement for implementations that only provide read-only support for VPLS-BGP-MIB. Such devices can then be monitored but cannot be configured using this MIB modules.')
vplsBgpGroups = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 276, 2, 2))
vplsBgpConfigGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 276, 2, 2, 1)).setObjects(("VPLS-BGP-MIB", "vplsBgpConfigVERangeSize"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vplsBgpConfigGroup = vplsBgpConfigGroup.setStatus('current')
if mibBuilder.loadTexts: vplsBgpConfigGroup.setDescription('The group of objects supporting configuration of L2VPN VPLS services using BGP.')
vplsBgpVEGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 276, 2, 2, 2)).setObjects(("VPLS-BGP-MIB", "vplsBgpVEName"), ("VPLS-BGP-MIB", "vplsBgpVEPreference"), ("VPLS-BGP-MIB", "vplsBgpVERowStatus"), ("VPLS-BGP-MIB", "vplsBgpVEStorageType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vplsBgpVEGroup = vplsBgpVEGroup.setStatus('current')
if mibBuilder.loadTexts: vplsBgpVEGroup.setDescription('The group of objects supporting management of VPLS Edge devices for L2VPN VPLS services using BGP.')
vplsBgpPwBindGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 276, 2, 2, 3)).setObjects(("VPLS-BGP-MIB", "vplsBgpPwBindLocalVEId"), ("VPLS-BGP-MIB", "vplsBgpPwBindRemoteVEId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vplsBgpPwBindGroup = vplsBgpPwBindGroup.setStatus('current')
if mibBuilder.loadTexts: vplsBgpPwBindGroup.setDescription('The group of objects supporting management of pseudowires for L2VPN VPLS services using BGP.')
mibBuilder.exportSymbols("VPLS-BGP-MIB", vplsBgpModuleFullCompliance=vplsBgpModuleFullCompliance, vplsBgpPwBindRemoteVEId=vplsBgpPwBindRemoteVEId, vplsBgpVEGroup=vplsBgpVEGroup, vplsBgpVERowStatus=vplsBgpVERowStatus, vplsBgpVEId=vplsBgpVEId, PYSNMP_MODULE_ID=vplsBgpMIB, vplsBgpObjects=vplsBgpObjects, vplsBgpConfigEntry=vplsBgpConfigEntry, vplsBgpVEName=vplsBgpVEName, vplsBgpVEPreference=vplsBgpVEPreference, vplsBgpConfigVERangeSize=vplsBgpConfigVERangeSize, vplsBgpVEStorageType=vplsBgpVEStorageType, vplsBgpModuleReadOnlyCompliance=vplsBgpModuleReadOnlyCompliance, vplsBgpVETable=vplsBgpVETable, vplsBgpConfigGroup=vplsBgpConfigGroup, vplsBgpGroups=vplsBgpGroups, vplsBgpConfigTable=vplsBgpConfigTable, vplsBgpVEEntry=vplsBgpVEEntry, vplsBgpPwBindGroup=vplsBgpPwBindGroup, vplsBgpPwBindLocalVEId=vplsBgpPwBindLocalVEId, vplsBgpMIB=vplsBgpMIB, vplsBgpCompliances=vplsBgpCompliances, vplsBgpPwBindTable=vplsBgpPwBindTable, vplsBgpPwBindEntry=vplsBgpPwBindEntry, vplsBgpConformance=vplsBgpConformance)
