#
# PySNMP MIB module HUAWEI-IPFPM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HUAWEI-IPFPM-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:45:10 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint")
hwDatacomm, = mibBuilder.importSymbols("HUAWEI-MIB", "hwDatacomm")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
ObjectIdentity, Unsigned32, MibIdentifier, Integer32, NotificationType, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, TimeTicks, iso, ModuleIdentity, IpAddress, Gauge32, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "Unsigned32", "MibIdentifier", "Integer32", "NotificationType", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "TimeTicks", "iso", "ModuleIdentity", "IpAddress", "Gauge32", "Counter32")
TimeStamp, DisplayString, TruthValue, TextualConvention, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TimeStamp", "DisplayString", "TruthValue", "TextualConvention", "RowStatus")
hwIpfpmMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316))
hwIpfpmMib.setRevisions(('2015-10-13 17:00', '2015-08-14 20:59', '2015-05-07 15:55', '2015-07-09 16:58', '2015-05-06 12:55', '2015-05-05 15:55', '2015-04-16 15:27', '2015-02-06 11:43', '2014-12-29 16:26', '2014-06-26 10:00', '2014-02-12 10:00', '2013-12-17 10:00', '2013-10-25 20:00', '2013-09-25 20:00', '2013-09-23 20:00', '2013-08-18 20:38', '2013-08-14 20:38', '2013-08-05 15:04', '2013-07-04 16:12', '2013-06-22 14:50', '2013-06-04 14:03', '2013-04-27 17:30', '2013-03-27 10:11', '2013-03-26 10:11', '2013-03-13 11:50', '2013-02-18 11:50',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hwIpfpmMib.setRevisionsDescriptions(('revision 1.26, modify the spelling mistake of the word label', 'revision 1.25, modify the DEFVAL of hwIpfpmMcpId ,hwIpfpmDcpFlowDstAddr, hwIpfpmDcpFlowSrcAddr,hwIpfpmDcpId,hwIpfpmDcpId node', 'revision 1.24, modify the type of hwIpfpmDcpTlpExtIfIndex node', 'revision 1.23, modify the value of hwIpfpmDcpInstGroupId node range', 'revision 1.22, add hwIpfpmDcpTlpQueryExtTable and hwIpfpmDcpTlpExtTable ', 'revision 1.21, add hwIpfpmDcpInstGroupId ', 'revision 1.20, add enum bidirectional (3) value for hwIpfpmMcpFlowType mib node', 'revision 1.19, modify table index', 'revision 1.18, modify hwIpfpmDcpInstTlpTable for atom', 'revision 1.17, add new VB in hwIpfpmDcpInstTlpTable for SFP', 'revision 1.16, modify size list of hwIpfpmDcpSourceInstId, hwIpfpmDcpInstTlpVpnLabel, hwIpfpmDcpInstTlpLspLabel', 'revision 1.15, add hwIpfpmTlpExceed, hwIpfpmTlpRecovery, hwIpfpmTlpExceedBoardId, hwIpfpmTlpNumber, hwIpfpmTlpThreshold', 'revision 1.14, add description in the threshold trap', 'revision 1.13, support flow-label', 'revision 1.12, add hwIpfpmDcpMcpVpnName, hwIpfpmDcpMcpVpnType, hwIpfpmDcpInstMcpVpnName, hwIpfpmDcpInstMcpVpnType', 'revision 1.11, add hwIpfpmDcpFlowConflict', 'revision 1.10', 'revision 1.09', 'revision 1.08', 'revision 1.07', 'revision 1.06', 'revision 1.05', 'revision 1.04', 'revision 1.03', 'revision', 'init',))
if mibBuilder.loadTexts: hwIpfpmMib.setLastUpdated('201510131700Z')
if mibBuilder.loadTexts: hwIpfpmMib.setOrganization('Huawei Technologies Co.,Ltd.')
if mibBuilder.loadTexts: hwIpfpmMib.setContactInfo("Huawei Industrial Base Bantian, Longgang Shenzhen 518129 People's Republic of China Website: http://www.huawei.com Email: support@huawei.com ")
if mibBuilder.loadTexts: hwIpfpmMib.setDescription('This MIB describes objects to manage IPFPM (IP Flow Performance Measurement). IPFPM provides a method for IP flow performance measurement, in which MCP (Measurement Control Point),DCP (Data Collecting Point) and TLP (Target Logic Point) are three kinds of roles working together. TLP is responsible for implementing measurement and generating the measurement data. DCP manages TLPs and get measurement data from them to report to MCP. MCP works as the control role to collect and calculate the measurement data that DCP reported.')
class HWEnabledStatus(TextualConvention, Integer32):
    description = 'This TC describes that the status of some function is enabled or disabled.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("enabled", 1), ("disabled", 2))

class HWIpfpmStatErrInfo(TextualConvention, Integer32):
    description = 'This TC describes whether the statistics data is invalid or not and the reason of invalidation.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21))
    namedValues = NamedValues(("noErr", 0), ("initialIntervalForward", 1), ("initialIntervalBackward", 2), ("initialIntervalBidirection", 3), ("inconsistInterval", 4), ("asynClock", 5), ("incompleteDataForward", 6), ("incompleteDataBackward", 7), ("incompleteDataBidirection", 8), ("noFlowDataForward", 9), ("noFlowDataBackward", 10), ("noFlowDataBidirection", 11), ("errFlowDataForward", 12), ("errFlowDataBackward", 13), ("errFlowDataBidirection", 14), ("multiDataOneDelay", 15), ("multiDataTwoDelay", 16), ("errDelayVariationForward", 17), ("errDelayVariationBackward", 18), ("errDelayVariationBidirection", 19), ("errMultiSourceSwitch", 20), ("unknownErr", 21))

class HWIpfpmMeasureFlag(TextualConvention, Integer32):
    description = 'This TC describes the optional bit of an IP packet for IPFPM measurement.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("flagsBit0", 1), ("tosBit3", 2), ("tosBit4", 3), ("tosBit5", 4), ("tosBit6", 5), ("tosBit7", 6))

class HWIpfpmFlowType(TextualConvention, Integer32):
    description = 'This TC describes the type of flow in an test instance.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("null", 0), ("forward", 1), ("backward", 2), ("bidirectional", 3), ("forwardandbackward", 4))

class HWIpfpmMcpFlowType(TextualConvention, Integer32):
    description = 'This TC describes the type of flow in an test instance.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("none", 0), ("forward", 1), ("backward", 2), ("bidirectional", 3))

class HWIpfpmFlowTlpDirec(TextualConvention, Integer32):
    description = 'This TC describes the role of flow TLP in the measurement network.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("ingress", 1), ("egress", 2))

class HWIpfpmTlpRole(TextualConvention, Integer32):
    description = 'This TC describes the TLP point.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("in-point", 1), ("out-point", 2), ("mid-point", 3))

class HWIpfpmDelayTlpRole(TextualConvention, Integer32):
    description = 'This TC describes the TLP point in delay measure.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("e2e", 1), ("section", 2))

class HWIpfpmLossTlpRole(TextualConvention, Integer32):
    description = 'This TC describes the TLP point in loss measure.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("e2e", 1), ("section", 2))

class HWIpfpmMcpTlpRole(TextualConvention, Integer32):
    description = 'This TC describes the role of TLP in the ACH.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("in-group", 1), ("out-group", 2))

class HWIpfpmAuthType(TextualConvention, Integer32):
    description = 'This TC describes the type of IPFPM authentication.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1))
    namedValues = NamedValues(("hmac-sha256", 1))

class HWIpfpmDelayMeasType(TextualConvention, Integer32):
    description = 'This TC describes the type of delay measure of an test instance.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("null", 0), ("oneway", 1), ("twoway", 2))

class HWIpfpmMeasTimeRangeType(TextualConvention, Integer32):
    description = 'This TC describes the type of on-demand loss or delay measure of an test instance.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 5, 10, 15, 30))
    namedValues = NamedValues(("null", 0), ("timerange5m", 5), ("timerange10m", 10), ("timerange15m", 15), ("timerange30m", 30))

class HWIpfpmInstIntervalType(TextualConvention, Integer32):
    description = 'This TC describes the interval type of an test instance.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 10, 60, 600))
    namedValues = NamedValues(("interval1s", 1), ("interval10s", 10), ("interval60s", 60), ("interval600s", 600))

class HWIpfpmInstType(TextualConvention, Integer32):
    description = 'This TC describes the type of an test instance.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("unicast", 0), ("multicastsrc", 1), ("multicastrecv", 2))

class HWIpfpmMMSType(TextualConvention, Integer32):
    description = 'This TC describes the type of multicastsrc.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("master", 0), ("slave", 1))

class HWIpfpmVpnType(TextualConvention, Integer32):
    description = "This TC describes the type of VPN. The value 'none' represents the public network, the value 'manage-vpn' represents the net-mange VPN. and the value 'vpn-instance' represents the normal VPN instance."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("none", 0), ("manage-vpn", 1), ("vpn-instance", 2))

hwIpfpmMcpObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 1))
hwIpfpmDcpObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 2))
hwIpfpmTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 3))
hwIpfpmConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 4))
hwIpfpmMcpConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 1, 1))
hwIpfpmMcpStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 1, 2))
hwIpfpmDcpConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 2, 1))
hwIpfpmDcpTrapObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 2, 2))
hwIpfpmMcpGlobalTable = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 1, 1, 1))
hwIpfpmMcpEnable = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 1, 1, 1, 1), HWEnabledStatus().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwIpfpmMcpEnable.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmMcpEnable.setDescription("This object indicates that the MCP (Measurement Control Point) function is 'enabled(1)' or 'disabled(2)'.")
hwIpfpmMcpId = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 1, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwIpfpmMcpId.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmMcpId.setDescription('The value of this object indicates the identification of MCP. The value 0.0.0.0 represents that it is not configured.')
hwIpfpmMcpUdpPort = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1024, 65535)).clone(65030)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwIpfpmMcpUdpPort.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmMcpUdpPort.setDescription('The value of this object indicates the port that MCP listens on as the server.')
hwIpfpmMcpAuthTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 1, 1, 4), )
if mibBuilder.loadTexts: hwIpfpmMcpAuthTable.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmMcpAuthTable.setDescription('The table contains attribute of MCP authenticaiton.')
hwIpfpmMcpAuthEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 1, 1, 4, 1), ).setIndexNames((0, "HUAWEI-IPFPM-MIB", "hwIpfpmMcpAuthKeyId"))
if mibBuilder.loadTexts: hwIpfpmMcpAuthEntry.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmMcpAuthEntry.setDescription('IPFPM authenticaiton configuration information.')
hwIpfpmMcpAuthKeyId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 1, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64)))
if mibBuilder.loadTexts: hwIpfpmMcpAuthKeyId.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmMcpAuthKeyId.setDescription('Identification of the authentication key.')
hwIpfpmMcpAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 1, 1, 4, 1, 2), HWIpfpmAuthType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIpfpmMcpAuthType.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmMcpAuthType.setDescription("Authentication type of the key. The enumeration 'hmac-sha256(1)' represents the password is sent after being encrypted through hmac-sha256. By default, authentication is not configured.")
hwIpfpmMcpAuthKey = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 1, 1, 4, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 392))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIpfpmMcpAuthKey.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmMcpAuthKey.setDescription('The password used as an IPFPM authentication key.')
hwIpfpmMcpAuthRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 1, 1, 4, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIpfpmMcpAuthRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmMcpAuthRowStatus.setDescription('Used for controlling the creation and deletion of this row.')
hwIpfpmMcpInstTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 1, 1, 5), )
if mibBuilder.loadTexts: hwIpfpmMcpInstTable.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmMcpInstTable.setDescription('The table contains attribute of MCP test instances.')
hwIpfpmMcpInstEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 1, 1, 5, 1), ).setIndexNames((0, "HUAWEI-IPFPM-MIB", "hwIpfpmMcpInstId"))
if mibBuilder.loadTexts: hwIpfpmMcpInstEntry.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmMcpInstEntry.setDescription('IPFPM configuration information for a particular MCP test instance.')
hwIpfpmMcpInstId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 1, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 8355838), ValueRangeConstraint(16711681, 16777214), )))
if mibBuilder.loadTexts: hwIpfpmMcpInstId.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmMcpInstId.setDescription('Identification of the test instance.')
hwIpfpmMcpInstDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 1, 1, 5, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIpfpmMcpInstDesc.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmMcpInstDesc.setDescription('Description of the test instance. if the string length is 0, it represents that it is not configured.')
hwIpfpmMcpLossRatioUpThres = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 1, 1, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIpfpmMcpLossRatioUpThres.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmMcpLossRatioUpThres.setDescription('This value divided by 1000000 is the upper threshold of loss ratio(%) for alarm. The value 0 represents that it is not configured, and the alarm is not enabled.')
hwIpfpmMcpLossRatioLowThres = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 1, 1, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIpfpmMcpLossRatioLowThres.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmMcpLossRatioLowThres.setDescription('This value divided by 1000000 is the lower threshold of loss ratio(%) for alarm recovery. The value 0 represents that it is not configured, and the alarm is not enabled.')
hwIpfpmMcpOneDelayUpThres = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 1, 1, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIpfpmMcpOneDelayUpThres.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmMcpOneDelayUpThres.setDescription('Upper threshold of one-way delay(us) for alarm. The value 0 represents that it is not configured, and the alarm is not enabled.')
hwIpfpmMcpOneDelayLowThres = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 1, 1, 5, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIpfpmMcpOneDelayLowThres.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmMcpOneDelayLowThres.setDescription('Lower threshold of one-way delay(us) for alarm recovery. The value 0 represents that it is not configured, and the alarm is not enabled.')
hwIpfpmMcpTwoDelayUpThres = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 1, 1, 5, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIpfpmMcpTwoDelayUpThres.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmMcpTwoDelayUpThres.setDescription('Upper threshold of two-way delay(us) for alarm. The value 0 represents that it is not configured, and the alarm is not enabled.')
hwIpfpmMcpTwoDelayLowThres = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 1, 1, 5, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIpfpmMcpTwoDelayLowThres.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmMcpTwoDelayLowThres.setDescription('Lower threshold of two-way delay(us) for alarm recovery. The value 0 represents that it is not configured, and the alarm is not enabled.')
hwIpfpmMcpMeasureEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 1, 1, 5, 1, 9), HWEnabledStatus().clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIpfpmMcpMeasureEnable.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmMcpMeasureEnable.setDescription("This object indicates that the MCP instance measure function is 'enabled(1)' or 'disabled(2)'.")
hwIpfpmMcpInstRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 1, 1, 5, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIpfpmMcpInstRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmMcpInstRowStatus.setDescription('Used for controlling the creation and deletion of this row.')
hwIpfpmMcpInstType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 1, 1, 5, 1, 11), HWIpfpmInstType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIpfpmMcpInstType.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmMcpInstType.setDescription("This object indicates that the MCP instance type. 'unicast(0)' means unicast measurement instance. 'multicastsrc(1)' means multicast measurement source instance. 'multicastrecv(2)' means multicast measurement receiver instance.")
hwIpfpmMcpSourceInstId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 1, 1, 5, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(16711681, 16777214), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIpfpmMcpSourceInstId.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmMcpSourceInstId.setDescription("This object indicates the source instance of multicastrecv. This object is only valid when hwIpfpmMcpInstType is 'multicastrecv(2)'. We can ingore this object value when hwIpfpmMcpInstType is not 'multicastrecv(2)'.")
hwIpfpmMcpDcpTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 1, 1, 6), )
if mibBuilder.loadTexts: hwIpfpmMcpDcpTable.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmMcpDcpTable.setDescription('The table describe the DCPs belonging to MCP test instances.')
hwIpfpmMcpDcpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 1, 1, 6, 1), ).setIndexNames((0, "HUAWEI-IPFPM-MIB", "hwIpfpmMcpInstId"), (0, "HUAWEI-IPFPM-MIB", "hwIpfpmMcpDcpId"))
if mibBuilder.loadTexts: hwIpfpmMcpDcpEntry.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmMcpDcpEntry.setDescription('IPFPM DCPs information for a particular MCP test instance.')
hwIpfpmMcpDcpId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 1, 1, 6, 1, 1), IpAddress())
if mibBuilder.loadTexts: hwIpfpmMcpDcpId.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmMcpDcpId.setDescription('Identification of DCP which belongs to the test instance.')
hwIpfpmMcpDcpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 1, 1, 6, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIpfpmMcpDcpRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmMcpDcpRowStatus.setDescription('Used for controlling the creation and deletion of this row.')
hwIpfpmMcpAchTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 1, 1, 7), )
if mibBuilder.loadTexts: hwIpfpmMcpAchTable.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmMcpAchTable.setDescription('The table describe the ACHs(Atomic Closed Hop) belonging to MCP test instances.')
hwIpfpmMcpAchEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 1, 1, 7, 1), ).setIndexNames((0, "HUAWEI-IPFPM-MIB", "hwIpfpmMcpInstId"), (0, "HUAWEI-IPFPM-MIB", "hwIpfpmMcpAchId"))
if mibBuilder.loadTexts: hwIpfpmMcpAchEntry.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmMcpAchEntry.setDescription('IPFPM ACHs(Atomic Closed Hop) information for a particular MCP test instance.')
hwIpfpmMcpAchId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 1, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: hwIpfpmMcpAchId.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmMcpAchId.setDescription('The object indicates the identification of the ACH.')
hwIpfpmMcpFlowType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 1, 1, 7, 1, 2), HWIpfpmMcpFlowType().clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIpfpmMcpFlowType.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmMcpFlowType.setDescription("The object indicates the flow that the ACH monitors is 'forward(1)' or 'backward(2)', 'bidirectional(3)'. The value none(0) represents that it is not configured.")
hwIpfpmMcpAchRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 1, 1, 7, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIpfpmMcpAchRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmMcpAchRowStatus.setDescription('Used for controlling the creation and deletion of this row.')
hwIpfpmMcpTlpTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 1, 1, 8), )
if mibBuilder.loadTexts: hwIpfpmMcpTlpTable.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmMcpTlpTable.setDescription('The table describe the TLPs(Target Logical Port) belonging to MCP ACHs.')
hwIpfpmMcpTlpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 1, 1, 8, 1), ).setIndexNames((0, "HUAWEI-IPFPM-MIB", "hwIpfpmMcpInstId"), (0, "HUAWEI-IPFPM-MIB", "hwIpfpmMcpAchId"), (0, "HUAWEI-IPFPM-MIB", "hwIpfpmMcpTlpRole"), (0, "HUAWEI-IPFPM-MIB", "hwIpfpmMcpTlpDcpId"), (0, "HUAWEI-IPFPM-MIB", "hwIpfpmMcpTlpId"))
if mibBuilder.loadTexts: hwIpfpmMcpTlpEntry.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmMcpTlpEntry.setDescription('IPFPM TLPs(Target Logical Port) information for a particular MCP ACH.')
hwIpfpmMcpTlpRole = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 1, 1, 8, 1, 1), HWIpfpmMcpTlpRole())
if mibBuilder.loadTexts: hwIpfpmMcpTlpRole.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmMcpTlpRole.setDescription("The object indicates the TLP belongs to 'in-group(1)' or 'out-group(2)' of the ACH.")
hwIpfpmMcpTlpDcpId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 1, 1, 8, 1, 2), IpAddress())
if mibBuilder.loadTexts: hwIpfpmMcpTlpDcpId.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmMcpTlpDcpId.setDescription('The object indicates the dcp which the tlp belongs to.')
hwIpfpmMcpTlpId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 1, 1, 8, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16777215)))
if mibBuilder.loadTexts: hwIpfpmMcpTlpId.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmMcpTlpId.setDescription('The object indicates the identification of the TLP.')
hwIpfpmMcpTlpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 1, 1, 8, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIpfpmMcpTlpRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmMcpTlpRowStatus.setDescription('Used for controlling the creation and deletion of this row.')
hwIpfpmMcpSrcInstReferQueryTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 1, 1, 9), )
if mibBuilder.loadTexts: hwIpfpmMcpSrcInstReferQueryTable.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmMcpSrcInstReferQueryTable.setDescription('The table describes the information of multicast source instance referred by some multicast receiver instances.')
hwIpfpmMcpSrcInstReferQueryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 1, 1, 9, 1), ).setIndexNames((0, "HUAWEI-IPFPM-MIB", "hwIpfpmMcpInstId"))
if mibBuilder.loadTexts: hwIpfpmMcpSrcInstReferQueryEntry.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmMcpSrcInstReferQueryEntry.setDescription('The information is that the multicast source instance referred by some multicast receiver instances.')
hwIpfpmMcpSrcInstReferCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 1, 1, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIpfpmMcpSrcInstReferCnt.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmMcpSrcInstReferCnt.setDescription('The object indicates the counter that the multicast source instance referred by some multicast receiver instances.')
hwIpfpmMcpStatisticsTable = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 1, 2, 1))
hwIpfpmMcpInstSpec = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIpfpmMcpInstSpec.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmMcpInstSpec.setDescription('This object indicates the global instance specification of MCP.')
hwIpfpmMcpInstCurNum = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 1, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIpfpmMcpInstCurNum.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmMcpInstCurNum.setDescription('This object indicates the current instance number of MCP.')
hwIpfpmMcpInstAchIndexTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 1, 2, 3), )
if mibBuilder.loadTexts: hwIpfpmMcpInstAchIndexTable.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmMcpInstAchIndexTable.setDescription('The tables contains the index of MCP test instances and ACH.')
hwIpfpmMcpInstAchIndexEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 1, 2, 3, 1), ).setIndexNames((0, "HUAWEI-IPFPM-MIB", "hwIpfpmMcpInstId"), (0, "HUAWEI-IPFPM-MIB", "hwIpfpmMcpAchId"))
if mibBuilder.loadTexts: hwIpfpmMcpInstAchIndexEntry.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmMcpInstAchIndexEntry.setDescription('Index of a particular test instance and ACH.')
hwIpfpmMcpSeqNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 1, 2, 3, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIpfpmMcpSeqNo.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmMcpSeqNo.setDescription('Sequence of a particular test instance and ACH.')
hwIpfpmMcpLossStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 1, 2, 4), )
if mibBuilder.loadTexts: hwIpfpmMcpLossStatsTable.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmMcpLossStatsTable.setDescription('The tables contains loss measure statistics of MCP test instances.')
hwIpfpmMcpLossStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 1, 2, 4, 1), ).setIndexNames((0, "HUAWEI-IPFPM-MIB", "hwIpfpmMcpInstId"), (0, "HUAWEI-IPFPM-MIB", "hwIpfpmMcpAchId"), (0, "HUAWEI-IPFPM-MIB", "hwIpfpmMcpSeqNoHigh"), (0, "HUAWEI-IPFPM-MIB", "hwIpfpmMcpSeqNoLow"))
if mibBuilder.loadTexts: hwIpfpmMcpLossStatsEntry.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmMcpLossStatsEntry.setDescription('Loss measure statistics of an interval for a particular test instance.')
hwIpfpmMcpSeqNoHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 1, 2, 4, 1, 1), Unsigned32())
if mibBuilder.loadTexts: hwIpfpmMcpSeqNoHigh.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmMcpSeqNoHigh.setDescription('High 32-bit of the hwIpfpmMcpSeqNo.')
hwIpfpmMcpSeqNoLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 1, 2, 4, 1, 2), Unsigned32())
if mibBuilder.loadTexts: hwIpfpmMcpSeqNoLow.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmMcpSeqNoLow.setDescription('Low 32-bit of the hwIpfpmMcpSeqNo.')
hwIpfpmMcpLossErrInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 1, 2, 4, 1, 3), HWIpfpmStatErrInfo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIpfpmMcpLossErrInfo.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmMcpLossErrInfo.setDescription("The error code to indicate the validity and the invalidation reason of an interval's loss measure statistics.")
hwIpfpmMcpForwardLossPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 1, 2, 4, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIpfpmMcpForwardLossPkts.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmMcpForwardLossPkts.setDescription('The absolute value of loss packets of forward flow measurement.')
hwIpfpmMcpForwardLossPktsSign = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 1, 2, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIpfpmMcpForwardLossPktsSign.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmMcpForwardLossPktsSign.setDescription('The sign of loss packets of forward flow measurement. 1 means positive number, -1 means negative number.')
hwIpfpmMcpForwardLossBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 1, 2, 4, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIpfpmMcpForwardLossBytes.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmMcpForwardLossBytes.setDescription('The absolute value of loss bytes of forward flow measurement.')
hwIpfpmMcpForwardLossBytesSign = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 1, 2, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIpfpmMcpForwardLossBytesSign.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmMcpForwardLossBytesSign.setDescription('The sign of loss bytes of forward flow measurement. 1 means positive number, -1 means negative number.')
hwIpfpmMcpForwardPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 1, 2, 4, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIpfpmMcpForwardPkts.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmMcpForwardPkts.setDescription('The packets of forward flow measurement.')
hwIpfpmMcpForwardBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 1, 2, 4, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIpfpmMcpForwardBytes.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmMcpForwardBytes.setDescription('The bytes of forward flow measurement.')
hwIpfpmMcpForwardLossRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 1, 2, 4, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIpfpmMcpForwardLossRatio.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmMcpForwardLossRatio.setDescription('This value divided by 1000000 is the loss ratio(%) of forward flow measurement.')
hwIpfpmMcpBackwardLossPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 1, 2, 4, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIpfpmMcpBackwardLossPkts.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmMcpBackwardLossPkts.setDescription('The absolute value of loss packets of backward flow measurement.')
hwIpfpmMcpBackwardLossPktsSign = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 1, 2, 4, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIpfpmMcpBackwardLossPktsSign.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmMcpBackwardLossPktsSign.setDescription('The sign of loss loss packets of backward flow measurement. 1 means positive number, -1 means negative number.')
hwIpfpmMcpBackwardLossBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 1, 2, 4, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIpfpmMcpBackwardLossBytes.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmMcpBackwardLossBytes.setDescription('The absolute value of loss bytes of backward flow measurement.')
hwIpfpmMcpBackwardLossBytesSign = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 1, 2, 4, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIpfpmMcpBackwardLossBytesSign.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmMcpBackwardLossBytesSign.setDescription('The sign of loss bytes of backward flow measurement. 1 means positive number, -1 means negative number.')
hwIpfpmMcpBackwardPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 1, 2, 4, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIpfpmMcpBackwardPkts.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmMcpBackwardPkts.setDescription('The packets of backward flow measurement.')
hwIpfpmMcpBackwardBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 1, 2, 4, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIpfpmMcpBackwardBytes.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmMcpBackwardBytes.setDescription('The bytes of backward flow measurement.')
hwIpfpmMcpBackwardLossRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 1, 2, 4, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIpfpmMcpBackwardLossRatio.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmMcpBackwardLossRatio.setDescription('This value divided by 1000000 is the loss ratio(%) of backward flow measurement.')
hwIpfpmMcpForwardLossMMSType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 1, 2, 4, 1, 18), HWIpfpmMMSType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIpfpmMcpForwardLossMMSType.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmMcpForwardLossMMSType.setDescription("This value indicate multicastsrc type is 'master(0)' or 'slave(1)'.")
hwIpfpmMcpForwardLossMMSSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 1, 2, 4, 1, 19), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIpfpmMcpForwardLossMMSSwitch.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmMcpForwardLossMMSSwitch.setDescription('This value indicate whether multicastsrc switched in this period.')
hwIpfpmMcpOneDelayStatTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 1, 2, 5), )
if mibBuilder.loadTexts: hwIpfpmMcpOneDelayStatTable.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmMcpOneDelayStatTable.setDescription('The tables contains one-way delay measure statistics of MCP test instances.')
hwIpfpmMcpOneDelayStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 1, 2, 5, 1), ).setIndexNames((0, "HUAWEI-IPFPM-MIB", "hwIpfpmMcpInstId"), (0, "HUAWEI-IPFPM-MIB", "hwIpfpmMcpAchId"), (0, "HUAWEI-IPFPM-MIB", "hwIpfpmMcpSeqNoHigh"), (0, "HUAWEI-IPFPM-MIB", "hwIpfpmMcpSeqNoLow"))
if mibBuilder.loadTexts: hwIpfpmMcpOneDelayStatEntry.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmMcpOneDelayStatEntry.setDescription('One-way delay measure statistics of an interval for a particular test instance.')
hwIpfpmMcpOneDelayErrInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 1, 2, 5, 1, 1), HWIpfpmStatErrInfo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIpfpmMcpOneDelayErrInfo.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmMcpOneDelayErrInfo.setDescription("The error code to indicate the validity and the invalidation reason of an interval's one-way delay measure statistics.")
hwIpfpmMcpForwardOneDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 1, 2, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIpfpmMcpForwardOneDelay.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmMcpForwardOneDelay.setDescription('The one-way delay(us) of forward flow.')
hwIpfpmMcpForwardOneDelayVariation = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 1, 2, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIpfpmMcpForwardOneDelayVariation.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmMcpForwardOneDelayVariation.setDescription('The one-way delay variation(us) of forward flow.')
hwIpfpmMcpBackwardOneDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 1, 2, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIpfpmMcpBackwardOneDelay.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmMcpBackwardOneDelay.setDescription('The one-way delay(us) of backward flow.')
hwIpfpmMcpBackwardOneDelayVariation = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 1, 2, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIpfpmMcpBackwardOneDelayVariation.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmMcpBackwardOneDelayVariation.setDescription('The one-way delay variation(us) of backward flow.')
hwIpfpmMcpForwardOneDelayMMSType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 1, 2, 5, 1, 6), HWIpfpmMMSType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIpfpmMcpForwardOneDelayMMSType.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmMcpForwardOneDelayMMSType.setDescription("This value indicate multicastsrc type is 'master(0)' or 'slave(1)'.")
hwIpfpmMcpTwoDelayStatTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 1, 2, 6), )
if mibBuilder.loadTexts: hwIpfpmMcpTwoDelayStatTable.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmMcpTwoDelayStatTable.setDescription('The tables contains two-way delay measure statistics of MCP test instances.')
hwIpfpmMcpTwoDelayStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 1, 2, 6, 1), ).setIndexNames((0, "HUAWEI-IPFPM-MIB", "hwIpfpmMcpInstId"), (0, "HUAWEI-IPFPM-MIB", "hwIpfpmMcpAchId"), (0, "HUAWEI-IPFPM-MIB", "hwIpfpmMcpSeqNoHigh"), (0, "HUAWEI-IPFPM-MIB", "hwIpfpmMcpSeqNoLow"))
if mibBuilder.loadTexts: hwIpfpmMcpTwoDelayStatEntry.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmMcpTwoDelayStatEntry.setDescription('Two-way delay measure statistics of an interval for a particular test instance.')
hwIpfpmMcpTwoDelayErrInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 1, 2, 6, 1, 1), HWIpfpmStatErrInfo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIpfpmMcpTwoDelayErrInfo.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmMcpTwoDelayErrInfo.setDescription("The error code to indicate the validity and the invalidation reason of an interval's two-way delay measure statistics.")
hwIpfpmMcpTwoDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 1, 2, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIpfpmMcpTwoDelay.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmMcpTwoDelay.setDescription('The two-way delay(us) of monitored flow.')
hwIpfpmMcpTwoDelayVariation = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 1, 2, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIpfpmMcpTwoDelayVariation.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmMcpTwoDelayVariation.setDescription('The two-way delay variation(us) of monitored flow.')
hwIpfpmMcpForwardDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 1, 2, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIpfpmMcpForwardDelay.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmMcpForwardDelay.setDescription('The forward flow delay(us) in two-way delay measurement.')
hwIpfpmMcpForwardDelayVariation = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 1, 2, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIpfpmMcpForwardDelayVariation.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmMcpForwardDelayVariation.setDescription('The forward flow variation(us) in two-way delay measurement.')
hwIpfpmMcpBackwardDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 1, 2, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIpfpmMcpBackwardDelay.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmMcpBackwardDelay.setDescription('The backward flow delay(us) in two-way delay measurement.')
hwIpfpmMcpBackwardDelayVariation = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 1, 2, 6, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIpfpmMcpBackwardDelayVariation.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmMcpBackwardDelayVariation.setDescription('The backward flow variation(us) in two-way delay measurement.')
hwIpfpmDcpGlobalTable = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 2, 1, 1))
hwIpfpmDcpEnable = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 2, 1, 1, 1), HWEnabledStatus().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwIpfpmDcpEnable.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmDcpEnable.setDescription("This object indicates that the DCP (Data Collecting Point) function is 'enabled(1)' or 'disabled(2)'.")
hwIpfpmDcpId = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 2, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwIpfpmDcpId.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmDcpId.setDescription('The value of this object indicates the identification of DCP. The value 0.0.0.0 represents that it is not configured.')
hwIpfpmDcpMeasureColorFlag = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 2, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwIpfpmDcpMeasureColorFlag.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmDcpMeasureColorFlag.setDescription("This string object indicates the bits of an IP packet used for color measurement. the length of string is 3,first and second character range is <1-6>, third character range is <0-6>. the three characters can not same. The character '0' represents none flag bit. The character '1' represents the bit0 of the FLAGS byte. The character '2' represents the bit3 of the TOS byte. The character '3' represents the bit4 of the TOS byte. The character '4' represents the bit5 of the TOS byte. The character '5' represents the bit6 of the TOS byte. The character '6' represents the bit7 of the TOS byte. the first character represents loss measurement color-bit, the second character represents delay measurement color-bit, the third character represents multicast measurement color-bit.")
hwIpfpmDcpMcpId = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 2, 1, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwIpfpmDcpMcpId.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmDcpMcpId.setDescription("Identification of the MCP that DCP reports measure data of the test instances not specified the object 'hwIpfpmDcpInstMcpId' to. The value 0.0.0.0 represents that it is not configured.")
hwIpfpmDcpMcpPort = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1024, 65535)).clone(65030)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwIpfpmDcpMcpPort.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmDcpMcpPort.setDescription("The listening port of the MCP that DCP reports measure data of the test instances not specified the object 'hwIpfpmDcpInstMcpPort' to. It need setting 'hwIpfpmDcpMcpId' first before setting this object.")
hwIpfpmDcpMcpVpnName = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 2, 1, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwIpfpmDcpMcpVpnName.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmDcpMcpVpnName.setDescription("The name of the VPN instance through which the DCP and the MCP communicates. 'hwIpfpmDcpInstMcpId' should be setted first before setting this object.")
hwIpfpmDcpMcpVpnType = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 2, 1, 1, 9), HWIpfpmVpnType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwIpfpmDcpMcpVpnType.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmDcpMcpVpnType.setDescription("The type of the VPN instance. 'hwIpfpmDcpInstMcpId' should be setted first before setting this object.")
hwIpfpmDcpAuthTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 2, 1, 7), )
if mibBuilder.loadTexts: hwIpfpmDcpAuthTable.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmDcpAuthTable.setDescription('The table contains authentication of DCP.')
hwIpfpmDcpAuthEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 2, 1, 7, 1), ).setIndexNames((0, "HUAWEI-IPFPM-MIB", "hwIpfpmDcpAuthKeyId"))
if mibBuilder.loadTexts: hwIpfpmDcpAuthEntry.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmDcpAuthEntry.setDescription('IPFPM authentication information for DCP')
hwIpfpmDcpAuthKeyId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 2, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64)))
if mibBuilder.loadTexts: hwIpfpmDcpAuthKeyId.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmDcpAuthKeyId.setDescription('Identification of the DCP authentication.')
hwIpfpmDcpAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 2, 1, 7, 1, 2), HWIpfpmAuthType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwIpfpmDcpAuthType.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmDcpAuthType.setDescription("Authentication type of the DCP. The enumeration 'hmac-sha256(1)' represents the password is sent after being encrypted through hmac-sha256. By default, authentication is not configured.")
hwIpfpmDcpAuthKey = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 2, 1, 7, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 392))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwIpfpmDcpAuthKey.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmDcpAuthKey.setDescription('The password used as an IPFPM authentication key.')
hwIpfpmDcpAuthRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 2, 1, 7, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIpfpmDcpAuthRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmDcpAuthRowStatus.setDescription('Used for controlling the creation and deletion of this row.')
hwIpfpmDcpInstTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 2, 1, 8), )
if mibBuilder.loadTexts: hwIpfpmDcpInstTable.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmDcpInstTable.setDescription('The table contains attribute of DCP test instances.')
hwIpfpmDcpInstEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 2, 1, 8, 1), ).setIndexNames((0, "HUAWEI-IPFPM-MIB", "hwIpfpmDcpInstId"))
if mibBuilder.loadTexts: hwIpfpmDcpInstEntry.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmDcpInstEntry.setDescription('IPFPM configuration information for a particular DCP test instance.')
hwIpfpmDcpInstId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 2, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 8355838), ValueRangeConstraint(16711681, 16777214), ))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwIpfpmDcpInstId.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmDcpInstId.setDescription('Identification of the test instance.')
hwIpfpmDcpInstDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 2, 1, 8, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIpfpmDcpInstDesc.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmDcpInstDesc.setDescription('Description of the test instance. if the string length is 0, it represents that it is not configured.')
hwIpfpmDcpInstMcpId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 2, 1, 8, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIpfpmDcpInstMcpId.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmDcpInstMcpId.setDescription('Identification of the MCP that DCP reports measure data of this test instance to. The value 0.0.0.0 represents that it is not configured')
hwIpfpmDcpInstMcpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 2, 1, 8, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1024, 65535)).clone(65030)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIpfpmDcpInstMcpPort.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmDcpInstMcpPort.setDescription("The listening port of the MCP that DCP reports measure data of this test instance to. It need setting 'hwIpfpmDcpInstMcpId' first before setting this object.")
hwIpfpmDcpInstInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 2, 1, 8, 1, 5), HWIpfpmInstIntervalType().clone('interval10s')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIpfpmDcpInstInterval.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmDcpInstInterval.setDescription("This object indicates that interval of an test instance is 'interval1s(1)' or 'interval10s(10)' or 'interval60s(60)' or 'interval600s(600)'.")
hwIpfpmDcpInstRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 2, 1, 8, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIpfpmDcpInstRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmDcpInstRowStatus.setDescription('Used for controlling the creation and deletion of this row.')
hwIpfpmDcpInstType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 2, 1, 8, 1, 7), HWIpfpmInstType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIpfpmDcpInstType.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmDcpInstType.setDescription('type of the test instance.')
hwIpfpmDcpSourceInstId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 2, 1, 8, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(16711681, 16777214), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIpfpmDcpSourceInstId.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmDcpSourceInstId.setDescription('Identification of the source instance.')
hwIpfpmDcpInstMcpVpnName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 2, 1, 8, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIpfpmDcpInstMcpVpnName.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmDcpInstMcpVpnName.setDescription("The name of the VPN instance through which the DCP and the MCP communicates. 'hwIpfpmDcpInstMcpId' should be setted first before setting this object.")
hwIpfpmDcpInstMcpVpnType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 2, 1, 8, 1, 10), HWIpfpmVpnType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIpfpmDcpInstMcpVpnType.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmDcpInstMcpVpnType.setDescription("The type of the VPN instance. 'hwIpfpmDcpInstMcpId' should be setted first before setting this object.")
hwIpfpmDcpInstGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 2, 1, 8, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8355838))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIpfpmDcpInstGroupId.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmDcpInstGroupId.setDescription('The group identification of the test instance.')
hwIpfpmDcpInstAuthTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 2, 1, 9), )
if mibBuilder.loadTexts: hwIpfpmDcpInstAuthTable.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmDcpInstAuthTable.setDescription('The table contains authentication of DCP test instances.')
hwIpfpmDcpInstAuthEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 2, 1, 9, 1), ).setIndexNames((0, "HUAWEI-IPFPM-MIB", "hwIpfpmDcpInstId"), (0, "HUAWEI-IPFPM-MIB", "hwIpfpmDcpInstAuthKeyId"))
if mibBuilder.loadTexts: hwIpfpmDcpInstAuthEntry.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmDcpInstAuthEntry.setDescription('IPFPM authentication information for a particular DCP test instance.')
hwIpfpmDcpInstAuthKeyId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 2, 1, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64)))
if mibBuilder.loadTexts: hwIpfpmDcpInstAuthKeyId.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmDcpInstAuthKeyId.setDescription('Identification of the DCP authentication.')
hwIpfpmDcpInstAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 2, 1, 9, 1, 2), HWIpfpmAuthType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwIpfpmDcpInstAuthType.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmDcpInstAuthType.setDescription("Authentication type of DCP instance authentication. The enumeration 'hmac-sha256(1)' represents the password is sent after being encrypted through hmac-sha256. By default, authentication is not configured. If this object is not configured and object 'hwIpfpmDcpAuthType' is configured, then this instance uses 'hwIpfpmDcpInstAuthType' and 'hwIpfpmDcpInstAuthKey' as its authentication.")
hwIpfpmDcpInstAuthKey = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 2, 1, 9, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 392))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwIpfpmDcpInstAuthKey.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmDcpInstAuthKey.setDescription('The password used as an DCP test instance authentication key.')
hwIpfpmDcpInstAuthRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 2, 1, 9, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIpfpmDcpInstAuthRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmDcpInstAuthRowStatus.setDescription('Used for controlling the creation and deletion of this row.')
hwIpfpmDcpFlowTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 2, 1, 10), )
if mibBuilder.loadTexts: hwIpfpmDcpFlowTable.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmDcpFlowTable.setDescription('The table contains flow attribute of DCP test instances.')
hwIpfpmDcpFlowEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 2, 1, 10, 1), ).setIndexNames((0, "HUAWEI-IPFPM-MIB", "hwIpfpmDcpInstId"), (0, "HUAWEI-IPFPM-MIB", "hwIpfpmDcpFlowType"))
if mibBuilder.loadTexts: hwIpfpmDcpFlowEntry.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmDcpFlowEntry.setDescription('IPFPM configuration information for a particular DCP test instance flow.')
hwIpfpmDcpFlowType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 2, 1, 10, 1, 1), HWIpfpmFlowType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwIpfpmDcpFlowType.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmDcpFlowType.setDescription("This object indicates that the flow is 'forward(1)' or 'backward(2)' or 'bidirectional(3)'.")
hwIpfpmDcpFlowProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 2, 1, 10, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIpfpmDcpFlowProtocol.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmDcpFlowProtocol.setDescription("This object indicates the protocol specified as the flow feature. 'hwIpfpmDcpFlowSrcPortBgn', 'hwIpfpmDcpFlowSrcPortEnd', 'hwIpfpmDcpFlowDstPortBgn', and 'hwIpfpmDcpFlowDstPortEnd' can be configured only when the value is 6(tcp) or 17(udp). The value 0 represents that this object is not configured.")
hwIpfpmDcpFlowDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 2, 1, 10, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 63)).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIpfpmDcpFlowDscp.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmDcpFlowDscp.setDescription('This object indicates the DSCP specified as the flow feature. The value -1 represents that this object is not configured.')
hwIpfpmDcpFlowSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 2, 1, 10, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIpfpmDcpFlowSrcAddr.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmDcpFlowSrcAddr.setDescription('This object indicates the source ip address specified as the flow feature. The value 0.0.0.0 represents that this object is not configured.')
hwIpfpmDcpFlowSrcMaskLen = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 2, 1, 10, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32)).clone(32)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIpfpmDcpFlowSrcMaskLen.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmDcpFlowSrcMaskLen.setDescription('This object indicates the source ip mask length specified as the flow feature.')
hwIpfpmDcpFlowDstAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 2, 1, 10, 1, 6), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIpfpmDcpFlowDstAddr.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmDcpFlowDstAddr.setDescription('This object indicates the destination ip address specified as the flow feature. The value 0.0.0.0 represents that this object is not configured.')
hwIpfpmDcpFlowDstMaskLen = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 2, 1, 10, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32)).clone(32)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIpfpmDcpFlowDstMaskLen.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmDcpFlowDstMaskLen.setDescription('This object indicates the destination ip mask length specified as the flow feature.')
hwIpfpmDcpFlowSrcPortBgn = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 2, 1, 10, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIpfpmDcpFlowSrcPortBgn.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmDcpFlowSrcPortBgn.setDescription("This object indicates the begin value of source port specified as the flow feature. It need configure 'hwIpfpmDcpFlowProtocol' first before configure this object. The value 0 represents that this object is not configured.")
hwIpfpmDcpFlowSrcPortEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 2, 1, 10, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIpfpmDcpFlowSrcPortEnd.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmDcpFlowSrcPortEnd.setDescription("This object indicates the end value of source port specified as the flow feature. It need configure 'hwIpfpmDcpFlowProtocol' first before configure this object. The value 0 represents that this object is not configured.")
hwIpfpmDcpFlowDstPortBgn = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 2, 1, 10, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIpfpmDcpFlowDstPortBgn.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmDcpFlowDstPortBgn.setDescription("This object indicates the begin value of destination port specified as the flow feature. It need configure 'hwIpfpmDcpFlowProtocol' first before configure this object. The value 0 represents that this object is not configured.")
hwIpfpmDcpFlowDstPortEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 2, 1, 10, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIpfpmDcpFlowDstPortEnd.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmDcpFlowDstPortEnd.setDescription("This object indicates the end value of destination port specified as the flow feature. It need configure 'hwIpfpmDcpFlowProtocol' first before configure this object. The value 0 represents that this object is not configured.")
hwIpfpmDcpFlowRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 2, 1, 10, 1, 12), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIpfpmDcpFlowRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmDcpFlowRowStatus.setDescription('Used for controlling the creation and deletion of this row.')
hwIpfpmDcpFlowOuterSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 2, 1, 10, 1, 13), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIpfpmDcpFlowOuterSrcAddr.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmDcpFlowOuterSrcAddr.setDescription('This object indicates the outer source ip address specified as the flow feature. The value 0 represents that this object is not configured.')
hwIpfpmDcpFlowOuterDstAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 2, 1, 10, 1, 14), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIpfpmDcpFlowOuterDstAddr.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmDcpFlowOuterDstAddr.setDescription('This object indicates the outer destination ip address specified as the flow feature. The value 0 represents that this object is not configured.')
hwIpfpmDcpFlowForwardGtpTeid = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 2, 1, 10, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967294))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIpfpmDcpFlowForwardGtpTeid.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmDcpFlowForwardGtpTeid.setDescription('This object indicates the value of forward gtp teid specified as the flow feature. The value 0 represents that this object is not configured.')
hwIpfpmDcpFlowBackwardGtpTeid = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 2, 1, 10, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967294))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIpfpmDcpFlowBackwardGtpTeid.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmDcpFlowBackwardGtpTeid.setDescription('This object indicates the value of backward gtp teid specified as the flow feature. The value 0 represents that this object is not configured.')
hwIpfpmDcpInstTlpTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 2, 1, 11), )
if mibBuilder.loadTexts: hwIpfpmDcpInstTlpTable.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmDcpInstTlpTable.setDescription('The table contains attribute of TLPs.')
hwIpfpmDcpInstTlpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 2, 1, 11, 1), ).setIndexNames((0, "HUAWEI-IPFPM-MIB", "hwIpfpmDcpInstId"), (0, "HUAWEI-IPFPM-MIB", "hwIpfpmDcpTlpId"))
if mibBuilder.loadTexts: hwIpfpmDcpInstTlpEntry.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmDcpInstTlpEntry.setDescription('IPFPM configuration information for a particular TLP.')
hwIpfpmDcpInstTlpRole = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 2, 1, 11, 1, 1), HWIpfpmTlpRole()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIpfpmDcpInstTlpRole.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmDcpInstTlpRole.setDescription("The object indicates the TLP position 'in-point(1)' or 'out-point(2) or 'mid-point(3)'.")
hwIpfpmDcpInstTlpFlowType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 2, 1, 11, 1, 2), HWIpfpmFlowType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIpfpmDcpInstTlpFlowType.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmDcpInstTlpFlowType.setDescription("The object indicates the flow type of the instance TLP is 'forward(1)' or 'backward(2)' or 'bidirectional(3)' or 'forwardandbackward(4)'. Only 'forward(1)' and 'backward(2)' can be configured when 'hwIpfpmDcpInstTlpRole' is 'mid-point(3)'. The value 'null(0)' represents that this flow is not configured under the instance.")
hwIpfpmDcpInstTlpDirec = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 2, 1, 11, 1, 3), HWIpfpmFlowTlpDirec()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIpfpmDcpInstTlpDirec.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmDcpInstTlpDirec.setDescription("The object indicates the TLP is 'ingress(1)' or 'egress(2)' of the flow of DCP test instance.")
hwIpfpmDcpInstTlpVpnLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 2, 1, 11, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 1048575)).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIpfpmDcpInstTlpVpnLabel.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmDcpInstTlpVpnLabel.setDescription('The VPN label of of the flow that the TLP measured. The value -1 represents that this object is not configured.')
hwIpfpmDcpInstTlpCtrlWordFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 2, 1, 11, 1, 5), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIpfpmDcpInstTlpCtrlWordFlag.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmDcpInstTlpCtrlWordFlag.setDescription('The control word flag of the flow that the TLP measured. The value false(2) represents that this object is not configured.')
hwIpfpmDcpInstTlpLspLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 2, 1, 11, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 1048575)).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIpfpmDcpInstTlpLspLabel.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmDcpInstTlpLspLabel.setDescription('The LSP label of the flow that the TLP measured. The value -1 represents that this object is not configured.')
hwIpfpmDcpInstTlpL2VpnFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 2, 1, 11, 1, 7), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIpfpmDcpInstTlpL2VpnFlag.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmDcpInstTlpL2VpnFlag.setDescription('The L2VPN flag of the flow that the TLP measured. The value false(2) represents that this object is not configured.')
hwIpfpmDcpInstTlpTpId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 2, 1, 11, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 4)).clone(8100)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIpfpmDcpInstTlpTpId.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmDcpInstTlpTpId.setDescription("The tpid for vlan. The value range is from '600' to 'FFFF'.")
hwIpfpmDcpInstTlpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 2, 1, 11, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIpfpmDcpInstTlpRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmDcpInstTlpRowStatus.setDescription('Used for controlling the creation and deletion of this row.')
hwIpfpmDcpInstTlpMultiSrcType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 2, 1, 11, 1, 10), HWIpfpmMMSType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIpfpmDcpInstTlpMultiSrcType.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmDcpInstTlpMultiSrcType.setDescription("The object indicates the type of multicastsrc 'master(0)'or 'slave(1)'.")
hwIpfpmDcpInstTlpFlowLabelFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 2, 1, 11, 1, 11), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIpfpmDcpInstTlpFlowLabelFlag.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmDcpInstTlpFlowLabelFlag.setDescription('This value indicate whether the flow-label is configured.')
hwIpfpmDcpInstTlpLspLabel2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 2, 1, 11, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 1048575)).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIpfpmDcpInstTlpLspLabel2.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmDcpInstTlpLspLabel2.setDescription('The LSP label of the flow that the TLP measured. The value -1 represents that this object is not configured.')
hwIpfpmDcpInstTlpLspLabel3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 2, 1, 11, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 1048575)).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIpfpmDcpInstTlpLspLabel3.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmDcpInstTlpLspLabel3.setDescription('The LSP label of the flow that the TLP measured. The value -1 represents that this object is not configured.')
hwIpfpmDcpInstTlpOuterVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 2, 1, 11, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIpfpmDcpInstTlpOuterVlan.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmDcpInstTlpOuterVlan.setDescription('The outer-vlan id of the flow that the TLP measured. The value 0 represents that this object is not configured.')
hwIpfpmDcpInstTlpInnerVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 2, 1, 11, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIpfpmDcpInstTlpInnerVlan.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmDcpInstTlpInnerVlan.setDescription('The inner-vlan id of the flow that the TLP measured. The value 0 represents that this object is not configured.')
hwIpfpmDcpInstTlpBackwardVpnLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 2, 1, 11, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 1048575)).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIpfpmDcpInstTlpBackwardVpnLabel.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmDcpInstTlpBackwardVpnLabel.setDescription('The VPN label of of the flow that the TLP measured. The value -1 represents that this object is not configured.')
hwIpfpmDcpInstTlpBackwardCtrlWordFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 2, 1, 11, 1, 17), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIpfpmDcpInstTlpBackwardCtrlWordFlag.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmDcpInstTlpBackwardCtrlWordFlag.setDescription('The control word flag of the flow that the TLP measured. The value false(2) represents that this object is not configured.')
hwIpfpmDcpInstTlpBackwardLspLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 2, 1, 11, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 1048575)).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIpfpmDcpInstTlpBackwardLspLabel.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmDcpInstTlpBackwardLspLabel.setDescription('The LSP label of the flow that the TLP measured. The value -1 represents that this object is not configured.')
hwIpfpmDcpInstTlpBackwardLspLabel2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 2, 1, 11, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 1048575)).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIpfpmDcpInstTlpBackwardLspLabel2.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmDcpInstTlpBackwardLspLabel2.setDescription('The LSP label of the flow that the TLP measured. The value -1 represents that this object is not configured.')
hwIpfpmDcpInstTlpBackwardLspLabel3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 2, 1, 11, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 1048575)).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIpfpmDcpInstTlpBackwardLspLabel3.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmDcpInstTlpBackwardLspLabel3.setDescription('The LSP label of the flow that the TLP measured. The value -1 represents that this object is not configured.')
hwIpfpmDcpInstTlpBackwardL2VpnFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 2, 1, 11, 1, 21), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIpfpmDcpInstTlpBackwardL2VpnFlag.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmDcpInstTlpBackwardL2VpnFlag.setDescription('The L2VPN flag of the flow that the TLP measured. The value false(2) represents that this object is not configured.')
hwIpfpmDcpInstTlpBackwardFlowLabelFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 2, 1, 11, 1, 22), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIpfpmDcpInstTlpBackwardFlowLabelFlag.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmDcpInstTlpBackwardFlowLabelFlag.setDescription('This value indicate whether the flow-label is configured.')
hwIpfpmDcpInstTlpBackwardOuterVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 2, 1, 11, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIpfpmDcpInstTlpBackwardOuterVlan.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmDcpInstTlpBackwardOuterVlan.setDescription('The outer-vlan id of the flow that the TLP measured. The value 0 represents that this object is not configured.')
hwIpfpmDcpInstTlpBackwardInnerVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 2, 1, 11, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIpfpmDcpInstTlpBackwardInnerVlan.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmDcpInstTlpBackwardInnerVlan.setDescription('The inner-vlan id of the flow that the TLP measured. The value 0 represents that this object is not configured.')
hwIpfpmDcpInstTlpBackwardTpId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 2, 1, 11, 1, 25), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 4)).clone(8100)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIpfpmDcpInstTlpBackwardTpId.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmDcpInstTlpBackwardTpId.setDescription("The tpid for vlan. The value range is from '600' to 'FFFF'.")
hwIpfpmDcpLossMeasTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 2, 1, 12), )
if mibBuilder.loadTexts: hwIpfpmDcpLossMeasTable.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmDcpLossMeasTable.setDescription('The table contains loss measure information of DCP test instances.')
hwIpfpmDcpLossMeasEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 2, 1, 12, 1), ).setIndexNames((0, "HUAWEI-IPFPM-MIB", "hwIpfpmDcpInstId"), (0, "HUAWEI-IPFPM-MIB", "hwIpfpmDcpLossTlpRole"))
if mibBuilder.loadTexts: hwIpfpmDcpLossMeasEntry.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmDcpLossMeasEntry.setDescription('IPFPM loss measure configuration information for a particular DCP test instance.')
hwIpfpmDcpLossEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 2, 1, 12, 1, 1), HWEnabledStatus().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwIpfpmDcpLossEnable.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmDcpLossEnable.setDescription("This object indicates that the on-demand loss measure function is 'enabled(1)' or 'disabled(2)'.")
hwIpfpmDcpLossContEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 2, 1, 12, 1, 2), HWEnabledStatus().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwIpfpmDcpLossContEnable.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmDcpLossContEnable.setDescription("This object indicates that the continual loss measure function is 'enabled(1)' or 'disabled(2)'.")
hwIpfpmDcpLossTimeRange = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 2, 1, 12, 1, 3), HWIpfpmMeasTimeRangeType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwIpfpmDcpLossTimeRange.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmDcpLossTimeRange.setDescription("The time range in which the on-demand loss measure function is enabled. The enumeration values include 'timerange5m(5)', 'timerange10m(10)', 'timerange15m(15)', and 'timerange30m(30)'. The value 'null(0)' represents that this object is not configured.")
hwIpfpmDcpLossTlpRole = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 2, 1, 12, 1, 4), HWIpfpmLossTlpRole().clone('e2e'))
if mibBuilder.loadTexts: hwIpfpmDcpLossTlpRole.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmDcpLossTlpRole.setDescription("The type of TLP that loss measure enabled on. The enumeration values include 'e2e(1)','section(2)' . The value 'e2e(1)' represents that this object is end-end. The value 'section(2)' represents that this object is mid-point.")
hwIpfpmDcpDelayMeasTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 2, 1, 13), )
if mibBuilder.loadTexts: hwIpfpmDcpDelayMeasTable.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmDcpDelayMeasTable.setDescription('The table contains delay measure information of DCP test instances.')
hwIpfpmDcpDelayMeasEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 2, 1, 13, 1), ).setIndexNames((0, "HUAWEI-IPFPM-MIB", "hwIpfpmDcpInstId"), (0, "HUAWEI-IPFPM-MIB", "hwIpfpmDcpDelayTlpRole"))
if mibBuilder.loadTexts: hwIpfpmDcpDelayMeasEntry.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmDcpDelayMeasEntry.setDescription('IPFPM delay measure configuration information for a particular DCP test instance.')
hwIpfpmDcpDelayEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 2, 1, 13, 1, 1), HWEnabledStatus().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwIpfpmDcpDelayEnable.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmDcpDelayEnable.setDescription("This object indicates that the on-demand delay measure function is 'enabled(1)' or 'disabled(2)'.")
hwIpfpmDcpDelayContEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 2, 1, 13, 1, 2), HWEnabledStatus().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwIpfpmDcpDelayContEnable.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmDcpDelayContEnable.setDescription("This object indicates that the continual delay measure function is 'enabled(1)' or 'disabled(2)'.")
hwIpfpmDcpDelayMeasType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 2, 1, 13, 1, 3), HWIpfpmDelayMeasType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwIpfpmDcpDelayMeasType.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmDcpDelayMeasType.setDescription("The type of delay measure. The enumeration values include 'oneway(1)' and 'twoway(2)'. The value 'null(0)' represents that this object is not configured.")
hwIpfpmDcpDelayTimeRange = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 2, 1, 13, 1, 4), HWIpfpmMeasTimeRangeType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwIpfpmDcpDelayTimeRange.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmDcpDelayTimeRange.setDescription("The time range in which the on-demand delay measure function is enabled. The enumeration values include 'timerange5m(5)', 'timerange10m(10)', 'timerange15m(15)', and 'timerange30m(30)'. The value 'null(0)' represents that this object is not configured.")
hwIpfpmDcpDelayTlpRole = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 2, 1, 13, 1, 5), HWIpfpmDelayTlpRole().clone('e2e'))
if mibBuilder.loadTexts: hwIpfpmDcpDelayTlpRole.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmDcpDelayTlpRole.setDescription("The type of TLP that delay measure enabled on. The enumeration values include 'e2e(1)','section(2)' . The value 'e2e(1)' represents that this object is end-end. The value 'section(2)' represents that this object is mid-point.")
hwIpfpmDcpDelayForwardTlpId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 2, 1, 13, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwIpfpmDcpDelayForwardTlpId.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmDcpDelayForwardTlpId.setDescription('The ingress TLP of the flow for one-way delay measure or the ingress TLP of the forward flow for two-way delay measure. The value 0 represents that this object is not configured.')
hwIpfpmDcpDelayBackwardTlpId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 2, 1, 13, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwIpfpmDcpDelayBackwardTlpId.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmDcpDelayBackwardTlpId.setDescription('The ingress TLP of the backward flow for two-way delay measure. The value 0 represents that this object is not configured.')
hwIpfpmDcpTlpTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 2, 1, 14), )
if mibBuilder.loadTexts: hwIpfpmDcpTlpTable.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmDcpTlpTable.setDescription('The table contains attribute of TLPs.')
hwIpfpmDcpTlpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 2, 1, 14, 1), ).setIndexNames((0, "HUAWEI-IPFPM-MIB", "hwIpfpmDcpTlpId"))
if mibBuilder.loadTexts: hwIpfpmDcpTlpEntry.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmDcpTlpEntry.setDescription('IPFPM configuration information for a particular TLP on interface.')
hwIpfpmDcpTlpId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 2, 1, 14, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16777215)))
if mibBuilder.loadTexts: hwIpfpmDcpTlpId.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmDcpTlpId.setDescription('Identification of TLP.')
hwIpfpmDcpTlpIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 2, 1, 14, 1, 2), InterfaceIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIpfpmDcpTlpIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmDcpTlpIfIndex.setDescription('The index of the port that the TLP configured on.')
hwIpfpmDcpTlpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 2, 1, 14, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIpfpmDcpTlpRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmDcpTlpRowStatus.setDescription('Used for controlling the creation and deletion of this row.')
hwIpfpmDcpTlpVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 2, 1, 14, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 4094), ValueRangeConstraint(65535, 65535), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIpfpmDcpTlpVlanId.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmDcpTlpVlanId.setDescription('The VLAN ID of the TLP measured. The value 0 represents ce-default-vlan. The value 65535 represents that this object is not configured.')
hwIpfpmDcpTlpQueryTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 2, 1, 15), )
if mibBuilder.loadTexts: hwIpfpmDcpTlpQueryTable.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmDcpTlpQueryTable.setDescription('The table contains the query interface ifindex and TLP ID with the interface.')
hwIpfpmDcpTlpQueryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 2, 1, 15, 1), ).setIndexNames((0, "HUAWEI-IPFPM-MIB", "hwIpfpmDcpTlpQueryIfIndex"), (0, "HUAWEI-IPFPM-MIB", "hwIpfpmDcpTlpQueryVlanId"))
if mibBuilder.loadTexts: hwIpfpmDcpTlpQueryEntry.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmDcpTlpQueryEntry.setDescription('The TLP information which is configured with the interface.')
hwIpfpmDcpTlpQueryIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 2, 1, 15, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hwIpfpmDcpTlpQueryIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmDcpTlpQueryIfIndex.setDescription('The interface index which is configured with TLP.')
hwIpfpmDcpTlpQueryTlpId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 2, 1, 15, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIpfpmDcpTlpQueryTlpId.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmDcpTlpQueryTlpId.setDescription('The TLP ID which is configured on the interface.')
hwIpfpmDcpTlpQueryVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 2, 1, 15, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 4094), ValueRangeConstraint(65535, 65535), )))
if mibBuilder.loadTexts: hwIpfpmDcpTlpQueryVlanId.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmDcpTlpQueryVlanId.setDescription('The VLAN ID of the TLP measured. The value 0 represents ce-default-vlan. The value 65535 represents that this object is not configured.')
hwIpfpmDcpSrcInstReferQueryTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 2, 1, 16), )
if mibBuilder.loadTexts: hwIpfpmDcpSrcInstReferQueryTable.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmDcpSrcInstReferQueryTable.setDescription('The table describes the information of multicast source instance referred by some multicast receiver instances.')
hwIpfpmDcpSrcInstReferQueryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 2, 1, 16, 1), ).setIndexNames((0, "HUAWEI-IPFPM-MIB", "hwIpfpmDcpInstId"))
if mibBuilder.loadTexts: hwIpfpmDcpSrcInstReferQueryEntry.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmDcpSrcInstReferQueryEntry.setDescription('The information is that the multicast source instance referred by some multicast receiver instances.')
hwIpfpmDcpSrcInstReferCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 2, 1, 16, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIpfpmDcpSrcInstReferCnt.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmDcpSrcInstReferCnt.setDescription('The object indicates the counter that the multicast source instance referred by some multicast receiver instances.')
hwIpfpmTlpExceedBoardId = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 2, 2, 1), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwIpfpmTlpExceedBoardId.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmTlpExceedBoardId.setDescription(' The board ID that the tlp exceed the threshold.')
hwIpfpmTlpNumber = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 2, 2, 2), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwIpfpmTlpNumber.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmTlpNumber.setDescription(' The number of tlp.')
hwIpfpmTlpThreshold = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 2, 2, 3), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwIpfpmTlpThreshold.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmTlpThreshold.setDescription(' The threshold of tlp.')
hwIpfpmDcpTlpQueryExtTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 2, 1, 17), )
if mibBuilder.loadTexts: hwIpfpmDcpTlpQueryExtTable.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmDcpTlpQueryExtTable.setDescription('The table contains the query interface ifindex and TLP ID with the interface.')
hwIpfpmDcpTlpQueryExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 2, 1, 17, 1), ).setIndexNames((0, "HUAWEI-IPFPM-MIB", "hwIpfpmDcpTlpQueryExtIfIndex"), (0, "HUAWEI-IPFPM-MIB", "hwIpfpmDcpTlpQueryExtVlanId"), (0, "HUAWEI-IPFPM-MIB", "hwIpfpmDcpTlpQueryExtOntId"), (0, "HUAWEI-IPFPM-MIB", "hwIpfpmDcpTlpQueryExtOntPortType"), (0, "HUAWEI-IPFPM-MIB", "hwIpfpmDcpTlpQueryExtOntPortId"))
if mibBuilder.loadTexts: hwIpfpmDcpTlpQueryExtEntry.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmDcpTlpQueryExtEntry.setDescription('The TLP information which is configured with the interface.')
hwIpfpmDcpTlpQueryExtIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 2, 1, 17, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hwIpfpmDcpTlpQueryExtIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmDcpTlpQueryExtIfIndex.setDescription('The interface index which is configured with TLP.')
hwIpfpmDcpTlpQueryExtTlpId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 2, 1, 17, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIpfpmDcpTlpQueryExtTlpId.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmDcpTlpQueryExtTlpId.setDescription('The TLP ID which is configured on the interface.')
hwIpfpmDcpTlpQueryExtVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 2, 1, 17, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 4094), ValueRangeConstraint(65535, 65535), )))
if mibBuilder.loadTexts: hwIpfpmDcpTlpQueryExtVlanId.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmDcpTlpQueryExtVlanId.setDescription('The VLAN ID of the TLP measured. The value 0 represents ce-default-vlan. The value 65535 represents that this object is not configured.')
hwIpfpmDcpTlpQueryExtOntId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 2, 1, 17, 1, 4), Integer32())
if mibBuilder.loadTexts: hwIpfpmDcpTlpQueryExtOntId.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmDcpTlpQueryExtOntId.setDescription('This object indicates the ONT ID.')
hwIpfpmDcpTlpQueryExtOntPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 2, 1, 17, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(47, -1))).clone(namedValues=NamedValues(("eth", 47), ("invalid", -1))))
if mibBuilder.loadTexts: hwIpfpmDcpTlpQueryExtOntPortType.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmDcpTlpQueryExtOntPortType.setDescription("This object indicates the ONT port's type. Options: 1. eth (47)) -indicates ONT port's type is the eth type. 2. invalid(-1) -indicates ONT port's type is not matched. ")
hwIpfpmDcpTlpQueryExtOntPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 2, 1, 17, 1, 6), Integer32())
if mibBuilder.loadTexts: hwIpfpmDcpTlpQueryExtOntPortId.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmDcpTlpQueryExtOntPortId.setDescription('This object indicates the ONT port ID.')
hwIpfpmDcpTlpExtTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 2, 1, 18), )
if mibBuilder.loadTexts: hwIpfpmDcpTlpExtTable.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmDcpTlpExtTable.setDescription('The table contains attribute of TLPs.')
hwIpfpmDcpTlpExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 2, 1, 18, 1), ).setIndexNames((0, "HUAWEI-IPFPM-MIB", "hwIpfpmDcpExtTlpId"))
if mibBuilder.loadTexts: hwIpfpmDcpTlpExtEntry.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmDcpTlpExtEntry.setDescription('IPFPM configuration information for a particular TLP on interface.')
hwIpfpmDcpExtTlpId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 2, 1, 18, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16777215)))
if mibBuilder.loadTexts: hwIpfpmDcpExtTlpId.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmDcpExtTlpId.setDescription('Identification of TLP.')
hwIpfpmDcpTlpExtIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 2, 1, 18, 1, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIpfpmDcpTlpExtIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmDcpTlpExtIfIndex.setDescription('The index of the port that the TLP configured on.')
hwIpfpmDcpTlpExtRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 2, 1, 18, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIpfpmDcpTlpExtRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmDcpTlpExtRowStatus.setDescription('Used for controlling the creation and deletion of this row.')
hwIpfpmDcpTlpExtVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 2, 1, 18, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 4094), ValueRangeConstraint(65535, 65535), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIpfpmDcpTlpExtVlanId.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmDcpTlpExtVlanId.setDescription('The VLAN ID of the TLP measured. The value 0 represents ce-default-vlan. The value 65535 represents that this object is not configured.')
hwIpfpmDcpTlpExtOntId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 2, 1, 18, 1, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIpfpmDcpTlpExtOntId.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmDcpTlpExtOntId.setDescription('This object indicates the ONT ID. The value -1 represents that this object is not configured.')
hwIpfpmDcpTlpExtOntPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 2, 1, 18, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(47, -1))).clone(namedValues=NamedValues(("eth", 47), ("invalid", -1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIpfpmDcpTlpExtOntPortType.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmDcpTlpExtOntPortType.setDescription("This object indicates the ONT port's type. Options: 1. eth (47)) -indicates ONT port's type is the eth type. 2. invalid(-1) -indicates ONT port's type is not matched. DEFVAL { -1 } . ")
hwIpfpmDcpTlpExtOntPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 2, 1, 18, 1, 7), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIpfpmDcpTlpExtOntPortId.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmDcpTlpExtOntPortId.setDescription('This object indicates the ONT port ID. The value -1 represents that this object is not configured.')
hwIpfpmLossRatioExceed = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 3, 1)).setObjects(("HUAWEI-IPFPM-MIB", "hwIpfpmMcpFlowType"), ("HUAWEI-IPFPM-MIB", "hwIpfpmMcpForwardLossRatio"), ("HUAWEI-IPFPM-MIB", "hwIpfpmMcpBackwardLossRatio"), ("HUAWEI-IPFPM-MIB", "hwIpfpmMcpInstDesc"))
if mibBuilder.loadTexts: hwIpfpmLossRatioExceed.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmLossRatioExceed.setDescription('A hwIpfpmLossRatioExceed trap is sent when the loss ratio of IPFPM test instance exceeds the uppper threshold in continuous five test intervals.')
hwIpfpmLossRatioRecovery = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 3, 2)).setObjects(("HUAWEI-IPFPM-MIB", "hwIpfpmMcpFlowType"), ("HUAWEI-IPFPM-MIB", "hwIpfpmMcpForwardLossRatio"), ("HUAWEI-IPFPM-MIB", "hwIpfpmMcpBackwardLossRatio"), ("HUAWEI-IPFPM-MIB", "hwIpfpmMcpInstDesc"))
if mibBuilder.loadTexts: hwIpfpmLossRatioRecovery.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmLossRatioRecovery.setDescription('A hwIpfpmLossRatioRecovery trap is sent when the loss ratio of IPFPM test instance is under the lower threshold in continuous five test intervals.')
hwIpfpmOneDelayExceed = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 3, 3)).setObjects(("HUAWEI-IPFPM-MIB", "hwIpfpmMcpFlowType"), ("HUAWEI-IPFPM-MIB", "hwIpfpmMcpForwardOneDelay"), ("HUAWEI-IPFPM-MIB", "hwIpfpmMcpBackwardOneDelay"), ("HUAWEI-IPFPM-MIB", "hwIpfpmMcpInstDesc"))
if mibBuilder.loadTexts: hwIpfpmOneDelayExceed.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmOneDelayExceed.setDescription('A hwIpfpmOneDelayExceed trap is sent when the one-way delay of IPFPM test instance exceeds the uppper threshold in continuous five test intervals.')
hwIpfpmOneDelayRecovery = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 3, 4)).setObjects(("HUAWEI-IPFPM-MIB", "hwIpfpmMcpFlowType"), ("HUAWEI-IPFPM-MIB", "hwIpfpmMcpForwardOneDelay"), ("HUAWEI-IPFPM-MIB", "hwIpfpmMcpBackwardOneDelay"), ("HUAWEI-IPFPM-MIB", "hwIpfpmMcpInstDesc"))
if mibBuilder.loadTexts: hwIpfpmOneDelayRecovery.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmOneDelayRecovery.setDescription('A hwIpfpmOneDelayRecovery trap is sent when the one-way delay of IPFPM test instance is under the lower threshold in continuous five test intervals.')
hwIpfpmTwoDelayExceed = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 3, 5)).setObjects(("HUAWEI-IPFPM-MIB", "hwIpfpmMcpTwoDelay"), ("HUAWEI-IPFPM-MIB", "hwIpfpmMcpInstDesc"))
if mibBuilder.loadTexts: hwIpfpmTwoDelayExceed.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmTwoDelayExceed.setDescription('A hwIpfpmTwoDelayExceed trap is sent when the two-way delay of IPFPM test instance exceeds the uppper threshold in continuous five test intervals.')
hwIpfpmTwoDelayRecovery = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 3, 6)).setObjects(("HUAWEI-IPFPM-MIB", "hwIpfpmMcpTwoDelay"), ("HUAWEI-IPFPM-MIB", "hwIpfpmMcpInstDesc"))
if mibBuilder.loadTexts: hwIpfpmTwoDelayRecovery.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmTwoDelayRecovery.setDescription('A hwIpfpmTwoDelayRecovery trap is sent when the two-way delay of IPFPM test instance is under the lower threshold in continuous five test intervals.')
hwIpfpmDcpFlowConflict = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 3, 7)).setObjects(("HUAWEI-IPFPM-MIB", "hwIpfpmDcpInstId"), ("HUAWEI-IPFPM-MIB", "hwIpfpmDcpFlowType"), ("HUAWEI-IPFPM-MIB", "hwIpfpmDcpInstId"), ("HUAWEI-IPFPM-MIB", "hwIpfpmDcpFlowType"))
if mibBuilder.loadTexts: hwIpfpmDcpFlowConflict.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmDcpFlowConflict.setDescription('A hwIpfpmDcpFlowConflict trap is sent when the flow configuration conflicts with another existing flow configuration. The first hwIpfpmDcpInstId and hwIpfpmDcpFlowType indicates the specified flow. The second hwIpfpmDcpInstId and hwIpfpmDcpFlowType indicates the existing flow.')
hwIpfpmTlpExceed = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 3, 8)).setObjects(("HUAWEI-IPFPM-MIB", "hwIpfpmTlpExceedBoardId"), ("HUAWEI-IPFPM-MIB", "hwIpfpmTlpNumber"), ("HUAWEI-IPFPM-MIB", "hwIpfpmTlpThreshold"))
if mibBuilder.loadTexts: hwIpfpmTlpExceed.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmTlpExceed.setDescription('A hwIpfpmTlpExceed trap is sent when the number of board tlp exceeds the threshold.')
hwIpfpmTlpRecovery = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 3, 9)).setObjects(("HUAWEI-IPFPM-MIB", "hwIpfpmTlpExceedBoardId"), ("HUAWEI-IPFPM-MIB", "hwIpfpmTlpNumber"), ("HUAWEI-IPFPM-MIB", "hwIpfpmTlpThreshold"))
if mibBuilder.loadTexts: hwIpfpmTlpRecovery.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmTlpRecovery.setDescription('A hwIpfpmTlpRecovery trap is sent when the number of board tlp is under the threshold.')
hwIpfpmCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 4, 1))
hwIpfpmGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 4, 2))
hwIpfpmCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 4, 1, 1)).setObjects(("HUAWEI-IPFPM-MIB", "hwIpfpmMcpConfigGroup"), ("HUAWEI-IPFPM-MIB", "hwIpfpmMcpInstConfigGroup"), ("HUAWEI-IPFPM-MIB", "hwIpfpmMcpStatsGroup"), ("HUAWEI-IPFPM-MIB", "hwIpfpmDcpConfigGroup"), ("HUAWEI-IPFPM-MIB", "hwIpfpmDcpInstConfigGroup"), ("HUAWEI-IPFPM-MIB", "hwIpfpmDcpTlpConfigGroup"), ("HUAWEI-IPFPM-MIB", "hwIpfpmTrapsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwIpfpmCompliance = hwIpfpmCompliance.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmCompliance.setDescription('The compliance statement for entities which implement the IPFPM MIB.')
hwIpfpmMcpConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 4, 2, 1)).setObjects(("HUAWEI-IPFPM-MIB", "hwIpfpmMcpEnable"), ("HUAWEI-IPFPM-MIB", "hwIpfpmMcpId"), ("HUAWEI-IPFPM-MIB", "hwIpfpmMcpUdpPort"), ("HUAWEI-IPFPM-MIB", "hwIpfpmMcpAuthType"), ("HUAWEI-IPFPM-MIB", "hwIpfpmMcpAuthKey"), ("HUAWEI-IPFPM-MIB", "hwIpfpmMcpAuthRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwIpfpmMcpConfigGroup = hwIpfpmMcpConfigGroup.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmMcpConfigGroup.setDescription('The collection of objects which are used to configure the IPFPM MCP behavior.')
hwIpfpmMcpInstConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 4, 2, 2)).setObjects(("HUAWEI-IPFPM-MIB", "hwIpfpmMcpInstDesc"), ("HUAWEI-IPFPM-MIB", "hwIpfpmMcpLossRatioUpThres"), ("HUAWEI-IPFPM-MIB", "hwIpfpmMcpLossRatioLowThres"), ("HUAWEI-IPFPM-MIB", "hwIpfpmMcpOneDelayUpThres"), ("HUAWEI-IPFPM-MIB", "hwIpfpmMcpOneDelayLowThres"), ("HUAWEI-IPFPM-MIB", "hwIpfpmMcpTwoDelayUpThres"), ("HUAWEI-IPFPM-MIB", "hwIpfpmMcpTwoDelayLowThres"), ("HUAWEI-IPFPM-MIB", "hwIpfpmMcpMeasureEnable"), ("HUAWEI-IPFPM-MIB", "hwIpfpmMcpInstRowStatus"), ("HUAWEI-IPFPM-MIB", "hwIpfpmMcpInstType"), ("HUAWEI-IPFPM-MIB", "hwIpfpmMcpSourceInstId"), ("HUAWEI-IPFPM-MIB", "hwIpfpmMcpDcpRowStatus"), ("HUAWEI-IPFPM-MIB", "hwIpfpmMcpFlowType"), ("HUAWEI-IPFPM-MIB", "hwIpfpmMcpAchRowStatus"), ("HUAWEI-IPFPM-MIB", "hwIpfpmMcpTlpRowStatus"), ("HUAWEI-IPFPM-MIB", "hwIpfpmMcpSrcInstReferCnt"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwIpfpmMcpInstConfigGroup = hwIpfpmMcpInstConfigGroup.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmMcpInstConfigGroup.setDescription('The collection of objects which are used to configure the IPFPM MCP test instance behavior.')
hwIpfpmMcpStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 4, 2, 3)).setObjects(("HUAWEI-IPFPM-MIB", "hwIpfpmMcpInstSpec"), ("HUAWEI-IPFPM-MIB", "hwIpfpmMcpInstCurNum"), ("HUAWEI-IPFPM-MIB", "hwIpfpmMcpSeqNo"), ("HUAWEI-IPFPM-MIB", "hwIpfpmMcpLossErrInfo"), ("HUAWEI-IPFPM-MIB", "hwIpfpmMcpForwardLossPkts"), ("HUAWEI-IPFPM-MIB", "hwIpfpmMcpForwardLossPktsSign"), ("HUAWEI-IPFPM-MIB", "hwIpfpmMcpForwardLossBytes"), ("HUAWEI-IPFPM-MIB", "hwIpfpmMcpForwardLossBytesSign"), ("HUAWEI-IPFPM-MIB", "hwIpfpmMcpForwardPkts"), ("HUAWEI-IPFPM-MIB", "hwIpfpmMcpForwardBytes"), ("HUAWEI-IPFPM-MIB", "hwIpfpmMcpForwardLossRatio"), ("HUAWEI-IPFPM-MIB", "hwIpfpmMcpBackwardLossPkts"), ("HUAWEI-IPFPM-MIB", "hwIpfpmMcpBackwardLossPktsSign"), ("HUAWEI-IPFPM-MIB", "hwIpfpmMcpBackwardLossBytes"), ("HUAWEI-IPFPM-MIB", "hwIpfpmMcpBackwardLossBytesSign"), ("HUAWEI-IPFPM-MIB", "hwIpfpmMcpBackwardPkts"), ("HUAWEI-IPFPM-MIB", "hwIpfpmMcpBackwardBytes"), ("HUAWEI-IPFPM-MIB", "hwIpfpmMcpBackwardLossRatio"), ("HUAWEI-IPFPM-MIB", "hwIpfpmMcpForwardLossMMSType"), ("HUAWEI-IPFPM-MIB", "hwIpfpmMcpForwardLossMMSSwitch"), ("HUAWEI-IPFPM-MIB", "hwIpfpmMcpOneDelayErrInfo"), ("HUAWEI-IPFPM-MIB", "hwIpfpmMcpForwardOneDelay"), ("HUAWEI-IPFPM-MIB", "hwIpfpmMcpForwardOneDelayVariation"), ("HUAWEI-IPFPM-MIB", "hwIpfpmMcpBackwardOneDelay"), ("HUAWEI-IPFPM-MIB", "hwIpfpmMcpBackwardOneDelayVariation"), ("HUAWEI-IPFPM-MIB", "hwIpfpmMcpForwardOneDelayMMSType"), ("HUAWEI-IPFPM-MIB", "hwIpfpmMcpTwoDelayErrInfo"), ("HUAWEI-IPFPM-MIB", "hwIpfpmMcpTwoDelay"), ("HUAWEI-IPFPM-MIB", "hwIpfpmMcpTwoDelayVariation"), ("HUAWEI-IPFPM-MIB", "hwIpfpmMcpForwardDelay"), ("HUAWEI-IPFPM-MIB", "hwIpfpmMcpForwardDelayVariation"), ("HUAWEI-IPFPM-MIB", "hwIpfpmMcpBackwardDelay"), ("HUAWEI-IPFPM-MIB", "hwIpfpmMcpBackwardDelayVariation"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwIpfpmMcpStatsGroup = hwIpfpmMcpStatsGroup.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmMcpStatsGroup.setDescription('The collection of objects which are used to represent the IPFPM test instance statistics.')
hwIpfpmDcpConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 4, 2, 4)).setObjects(("HUAWEI-IPFPM-MIB", "hwIpfpmDcpEnable"), ("HUAWEI-IPFPM-MIB", "hwIpfpmDcpId"), ("HUAWEI-IPFPM-MIB", "hwIpfpmDcpMeasureColorFlag"), ("HUAWEI-IPFPM-MIB", "hwIpfpmDcpMcpId"), ("HUAWEI-IPFPM-MIB", "hwIpfpmDcpMcpPort"), ("HUAWEI-IPFPM-MIB", "hwIpfpmDcpMcpVpnName"), ("HUAWEI-IPFPM-MIB", "hwIpfpmDcpMcpVpnType"), ("HUAWEI-IPFPM-MIB", "hwIpfpmDcpAuthType"), ("HUAWEI-IPFPM-MIB", "hwIpfpmDcpAuthKey"), ("HUAWEI-IPFPM-MIB", "hwIpfpmDcpAuthRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwIpfpmDcpConfigGroup = hwIpfpmDcpConfigGroup.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmDcpConfigGroup.setDescription('The collection of objects which are used to configure the IPFPM DCP behavior.')
hwIpfpmDcpInstConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 4, 2, 5)).setObjects(("HUAWEI-IPFPM-MIB", "hwIpfpmDcpInstId"), ("HUAWEI-IPFPM-MIB", "hwIpfpmDcpInstDesc"), ("HUAWEI-IPFPM-MIB", "hwIpfpmDcpInstMcpId"), ("HUAWEI-IPFPM-MIB", "hwIpfpmDcpInstMcpPort"), ("HUAWEI-IPFPM-MIB", "hwIpfpmDcpInstInterval"), ("HUAWEI-IPFPM-MIB", "hwIpfpmDcpInstAuthType"), ("HUAWEI-IPFPM-MIB", "hwIpfpmDcpInstAuthKey"), ("HUAWEI-IPFPM-MIB", "hwIpfpmDcpInstAuthRowStatus"), ("HUAWEI-IPFPM-MIB", "hwIpfpmDcpInstRowStatus"), ("HUAWEI-IPFPM-MIB", "hwIpfpmDcpInstType"), ("HUAWEI-IPFPM-MIB", "hwIpfpmDcpSourceInstId"), ("HUAWEI-IPFPM-MIB", "hwIpfpmDcpInstMcpVpnName"), ("HUAWEI-IPFPM-MIB", "hwIpfpmDcpInstMcpVpnType"), ("HUAWEI-IPFPM-MIB", "hwIpfpmDcpInstGroupId"), ("HUAWEI-IPFPM-MIB", "hwIpfpmDcpFlowType"), ("HUAWEI-IPFPM-MIB", "hwIpfpmDcpFlowProtocol"), ("HUAWEI-IPFPM-MIB", "hwIpfpmDcpFlowDscp"), ("HUAWEI-IPFPM-MIB", "hwIpfpmDcpFlowSrcAddr"), ("HUAWEI-IPFPM-MIB", "hwIpfpmDcpFlowSrcMaskLen"), ("HUAWEI-IPFPM-MIB", "hwIpfpmDcpFlowDstAddr"), ("HUAWEI-IPFPM-MIB", "hwIpfpmDcpFlowDstMaskLen"), ("HUAWEI-IPFPM-MIB", "hwIpfpmDcpFlowSrcPortBgn"), ("HUAWEI-IPFPM-MIB", "hwIpfpmDcpFlowSrcPortEnd"), ("HUAWEI-IPFPM-MIB", "hwIpfpmDcpFlowDstPortBgn"), ("HUAWEI-IPFPM-MIB", "hwIpfpmDcpFlowDstPortEnd"), ("HUAWEI-IPFPM-MIB", "hwIpfpmDcpFlowRowStatus"), ("HUAWEI-IPFPM-MIB", "hwIpfpmDcpFlowOuterSrcAddr"), ("HUAWEI-IPFPM-MIB", "hwIpfpmDcpFlowOuterDstAddr"), ("HUAWEI-IPFPM-MIB", "hwIpfpmDcpFlowForwardGtpTeid"), ("HUAWEI-IPFPM-MIB", "hwIpfpmDcpFlowBackwardGtpTeid"), ("HUAWEI-IPFPM-MIB", "hwIpfpmDcpInstTlpRole"), ("HUAWEI-IPFPM-MIB", "hwIpfpmDcpInstTlpFlowType"), ("HUAWEI-IPFPM-MIB", "hwIpfpmDcpInstTlpDirec"), ("HUAWEI-IPFPM-MIB", "hwIpfpmDcpInstTlpVpnLabel"), ("HUAWEI-IPFPM-MIB", "hwIpfpmDcpInstTlpCtrlWordFlag"), ("HUAWEI-IPFPM-MIB", "hwIpfpmDcpInstTlpLspLabel"), ("HUAWEI-IPFPM-MIB", "hwIpfpmDcpInstTlpL2VpnFlag"), ("HUAWEI-IPFPM-MIB", "hwIpfpmDcpInstTlpTpId"), ("HUAWEI-IPFPM-MIB", "hwIpfpmDcpInstTlpRowStatus"), ("HUAWEI-IPFPM-MIB", "hwIpfpmDcpInstTlpMultiSrcType"), ("HUAWEI-IPFPM-MIB", "hwIpfpmDcpInstTlpFlowLabelFlag"), ("HUAWEI-IPFPM-MIB", "hwIpfpmDcpInstTlpLspLabel2"), ("HUAWEI-IPFPM-MIB", "hwIpfpmDcpInstTlpLspLabel3"), ("HUAWEI-IPFPM-MIB", "hwIpfpmDcpInstTlpOuterVlan"), ("HUAWEI-IPFPM-MIB", "hwIpfpmDcpInstTlpInnerVlan"), ("HUAWEI-IPFPM-MIB", "hwIpfpmDcpInstTlpBackwardVpnLabel"), ("HUAWEI-IPFPM-MIB", "hwIpfpmDcpInstTlpBackwardCtrlWordFlag"), ("HUAWEI-IPFPM-MIB", "hwIpfpmDcpInstTlpBackwardLspLabel"), ("HUAWEI-IPFPM-MIB", "hwIpfpmDcpInstTlpBackwardLspLabel2"), ("HUAWEI-IPFPM-MIB", "hwIpfpmDcpInstTlpBackwardLspLabel3"), ("HUAWEI-IPFPM-MIB", "hwIpfpmDcpInstTlpBackwardL2VpnFlag"), ("HUAWEI-IPFPM-MIB", "hwIpfpmDcpInstTlpBackwardFlowLabelFlag"), ("HUAWEI-IPFPM-MIB", "hwIpfpmDcpInstTlpBackwardOuterVlan"), ("HUAWEI-IPFPM-MIB", "hwIpfpmDcpInstTlpBackwardInnerVlan"), ("HUAWEI-IPFPM-MIB", "hwIpfpmDcpInstTlpBackwardTpId"), ("HUAWEI-IPFPM-MIB", "hwIpfpmDcpLossEnable"), ("HUAWEI-IPFPM-MIB", "hwIpfpmDcpLossContEnable"), ("HUAWEI-IPFPM-MIB", "hwIpfpmDcpLossTimeRange"), ("HUAWEI-IPFPM-MIB", "hwIpfpmDcpDelayEnable"), ("HUAWEI-IPFPM-MIB", "hwIpfpmDcpDelayContEnable"), ("HUAWEI-IPFPM-MIB", "hwIpfpmDcpDelayMeasType"), ("HUAWEI-IPFPM-MIB", "hwIpfpmDcpDelayTimeRange"), ("HUAWEI-IPFPM-MIB", "hwIpfpmDcpDelayForwardTlpId"), ("HUAWEI-IPFPM-MIB", "hwIpfpmDcpDelayBackwardTlpId"), ("HUAWEI-IPFPM-MIB", "hwIpfpmDcpSrcInstReferCnt"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwIpfpmDcpInstConfigGroup = hwIpfpmDcpInstConfigGroup.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmDcpInstConfigGroup.setDescription('The collection of objects which are used to configure the IPFPM DCP test instance behavior.')
hwIpfpmDcpTlpConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 4, 2, 6)).setObjects(("HUAWEI-IPFPM-MIB", "hwIpfpmDcpTlpIfIndex"), ("HUAWEI-IPFPM-MIB", "hwIpfpmDcpTlpRowStatus"), ("HUAWEI-IPFPM-MIB", "hwIpfpmDcpTlpVlanId"), ("HUAWEI-IPFPM-MIB", "hwIpfpmDcpTlpQueryTlpId"), ("HUAWEI-IPFPM-MIB", "hwIpfpmTlpExceedBoardId"), ("HUAWEI-IPFPM-MIB", "hwIpfpmTlpNumber"), ("HUAWEI-IPFPM-MIB", "hwIpfpmTlpThreshold"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwIpfpmDcpTlpConfigGroup = hwIpfpmDcpTlpConfigGroup.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmDcpTlpConfigGroup.setDescription('The collection of objects which are used to configure the IPFPM TLP behavior.')
hwIpfpmTrapsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 316, 4, 2, 7)).setObjects(("HUAWEI-IPFPM-MIB", "hwIpfpmLossRatioExceed"), ("HUAWEI-IPFPM-MIB", "hwIpfpmLossRatioRecovery"), ("HUAWEI-IPFPM-MIB", "hwIpfpmOneDelayExceed"), ("HUAWEI-IPFPM-MIB", "hwIpfpmOneDelayRecovery"), ("HUAWEI-IPFPM-MIB", "hwIpfpmTwoDelayExceed"), ("HUAWEI-IPFPM-MIB", "hwIpfpmTwoDelayRecovery"), ("HUAWEI-IPFPM-MIB", "hwIpfpmDcpFlowConflict"), ("HUAWEI-IPFPM-MIB", "hwIpfpmTlpExceed"), ("HUAWEI-IPFPM-MIB", "hwIpfpmTlpRecovery"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwIpfpmTrapsGroup = hwIpfpmTrapsGroup.setStatus('current')
if mibBuilder.loadTexts: hwIpfpmTrapsGroup.setDescription('The collection of traps used to indicate that the measured network performance is in fault or not.')
mibBuilder.exportSymbols("HUAWEI-IPFPM-MIB", hwIpfpmDcpObjects=hwIpfpmDcpObjects, hwIpfpmMcpInstRowStatus=hwIpfpmMcpInstRowStatus, HWIpfpmMcpFlowType=HWIpfpmMcpFlowType, hwIpfpmMcpOneDelayStatTable=hwIpfpmMcpOneDelayStatTable, hwIpfpmMcpInstId=hwIpfpmMcpInstId, hwIpfpmDcpInstMcpVpnName=hwIpfpmDcpInstMcpVpnName, hwIpfpmDcpInstTlpBackwardLspLabel3=hwIpfpmDcpInstTlpBackwardLspLabel3, hwIpfpmDcpDelayTimeRange=hwIpfpmDcpDelayTimeRange, hwIpfpmDcpMcpId=hwIpfpmDcpMcpId, hwIpfpmDcpInstTlpVpnLabel=hwIpfpmDcpInstTlpVpnLabel, hwIpfpmMcpSrcInstReferQueryEntry=hwIpfpmMcpSrcInstReferQueryEntry, hwIpfpmDcpInstTlpL2VpnFlag=hwIpfpmDcpInstTlpL2VpnFlag, hwIpfpmDcpTlpExtRowStatus=hwIpfpmDcpTlpExtRowStatus, HWIpfpmFlowTlpDirec=HWIpfpmFlowTlpDirec, hwIpfpmMcpConfiguration=hwIpfpmMcpConfiguration, hwIpfpmDcpFlowDscp=hwIpfpmDcpFlowDscp, hwIpfpmDcpInstTlpLspLabel2=hwIpfpmDcpInstTlpLspLabel2, hwIpfpmDcpInstTlpFlowLabelFlag=hwIpfpmDcpInstTlpFlowLabelFlag, hwIpfpmOneDelayRecovery=hwIpfpmOneDelayRecovery, hwIpfpmMcpAuthTable=hwIpfpmMcpAuthTable, hwIpfpmLossRatioExceed=hwIpfpmLossRatioExceed, hwIpfpmMcpGlobalTable=hwIpfpmMcpGlobalTable, hwIpfpmDcpTlpVlanId=hwIpfpmDcpTlpVlanId, hwIpfpmMcpInstDesc=hwIpfpmMcpInstDesc, hwIpfpmMcpLossRatioUpThres=hwIpfpmMcpLossRatioUpThres, hwIpfpmMcpUdpPort=hwIpfpmMcpUdpPort, hwIpfpmDcpInstAuthTable=hwIpfpmDcpInstAuthTable, hwIpfpmMcpSrcInstReferCnt=hwIpfpmMcpSrcInstReferCnt, PYSNMP_MODULE_ID=hwIpfpmMib, hwIpfpmMcpSrcInstReferQueryTable=hwIpfpmMcpSrcInstReferQueryTable, hwIpfpmDcpInstTlpTable=hwIpfpmDcpInstTlpTable, hwIpfpmMcpSeqNo=hwIpfpmMcpSeqNo, hwIpfpmMcpOneDelayStatEntry=hwIpfpmMcpOneDelayStatEntry, hwIpfpmDcpAuthKey=hwIpfpmDcpAuthKey, hwIpfpmMcpConfigGroup=hwIpfpmMcpConfigGroup, hwIpfpmMcpForwardOneDelayVariation=hwIpfpmMcpForwardOneDelayVariation, hwIpfpmDcpTlpQueryExtVlanId=hwIpfpmDcpTlpQueryExtVlanId, hwIpfpmMcpAuthRowStatus=hwIpfpmMcpAuthRowStatus, hwIpfpmDcpFlowRowStatus=hwIpfpmDcpFlowRowStatus, hwIpfpmDcpLossEnable=hwIpfpmDcpLossEnable, HWIpfpmInstType=HWIpfpmInstType, hwIpfpmDcpAuthTable=hwIpfpmDcpAuthTable, hwIpfpmMcpTlpRowStatus=hwIpfpmMcpTlpRowStatus, hwIpfpmDcpTlpExtOntPortId=hwIpfpmDcpTlpExtOntPortId, hwIpfpmMcpDcpRowStatus=hwIpfpmMcpDcpRowStatus, hwIpfpmMcpTlpEntry=hwIpfpmMcpTlpEntry, hwIpfpmDcpDelayForwardTlpId=hwIpfpmDcpDelayForwardTlpId, hwIpfpmMcpLossStatsTable=hwIpfpmMcpLossStatsTable, hwIpfpmMcpForwardLossMMSSwitch=hwIpfpmMcpForwardLossMMSSwitch, hwIpfpmDcpTlpQueryExtTlpId=hwIpfpmDcpTlpQueryExtTlpId, hwIpfpmDcpLossTlpRole=hwIpfpmDcpLossTlpRole, hwIpfpmTwoDelayExceed=hwIpfpmTwoDelayExceed, hwIpfpmDcpInstTlpOuterVlan=hwIpfpmDcpInstTlpOuterVlan, hwIpfpmDcpMcpVpnName=hwIpfpmDcpMcpVpnName, hwIpfpmDcpDelayTlpRole=hwIpfpmDcpDelayTlpRole, hwIpfpmDcpTlpTable=hwIpfpmDcpTlpTable, hwIpfpmDcpTlpExtTable=hwIpfpmDcpTlpExtTable, hwIpfpmDcpFlowForwardGtpTeid=hwIpfpmDcpFlowForwardGtpTeid, hwIpfpmDcpInstAuthKeyId=hwIpfpmDcpInstAuthKeyId, hwIpfpmDcpLossContEnable=hwIpfpmDcpLossContEnable, hwIpfpmDcpInstTlpBackwardCtrlWordFlag=hwIpfpmDcpInstTlpBackwardCtrlWordFlag, hwIpfpmDcpTlpExtOntPortType=hwIpfpmDcpTlpExtOntPortType, hwIpfpmDcpDelayMeasTable=hwIpfpmDcpDelayMeasTable, hwIpfpmMcpOneDelayErrInfo=hwIpfpmMcpOneDelayErrInfo, hwIpfpmDcpInstTlpRowStatus=hwIpfpmDcpInstTlpRowStatus, hwIpfpmMcpSourceInstId=hwIpfpmMcpSourceInstId, hwIpfpmDcpInstType=hwIpfpmDcpInstType, hwIpfpmConformance=hwIpfpmConformance, hwIpfpmDcpFlowSrcPortBgn=hwIpfpmDcpFlowSrcPortBgn, hwIpfpmMcpSeqNoHigh=hwIpfpmMcpSeqNoHigh, hwIpfpmDcpFlowTable=hwIpfpmDcpFlowTable, hwIpfpmDcpTlpQueryIfIndex=hwIpfpmDcpTlpQueryIfIndex, hwIpfpmDcpInstTlpBackwardLspLabel2=hwIpfpmDcpInstTlpBackwardLspLabel2, hwIpfpmMcpForwardLossBytesSign=hwIpfpmMcpForwardLossBytesSign, hwIpfpmDcpMcpVpnType=hwIpfpmDcpMcpVpnType, hwIpfpmDcpInstTlpLspLabel=hwIpfpmDcpInstTlpLspLabel, hwIpfpmDcpMcpPort=hwIpfpmDcpMcpPort, hwIpfpmMcpTlpTable=hwIpfpmMcpTlpTable, HWIpfpmDelayMeasType=HWIpfpmDelayMeasType, hwIpfpmDcpInstMcpVpnType=hwIpfpmDcpInstMcpVpnType, hwIpfpmDcpInstGroupId=hwIpfpmDcpInstGroupId, hwIpfpmDcpTlpQueryExtTable=hwIpfpmDcpTlpQueryExtTable, hwIpfpmMcpLossStatsEntry=hwIpfpmMcpLossStatsEntry, hwIpfpmMcpId=hwIpfpmMcpId, hwIpfpmDcpAuthEntry=hwIpfpmDcpAuthEntry, hwIpfpmDcpInstId=hwIpfpmDcpInstId, hwIpfpmDcpFlowType=hwIpfpmDcpFlowType, hwIpfpmDcpTlpQueryExtOntPortType=hwIpfpmDcpTlpQueryExtOntPortType, hwIpfpmGroups=hwIpfpmGroups, hwIpfpmMcpLossRatioLowThres=hwIpfpmMcpLossRatioLowThres, hwIpfpmMcpBackwardLossPkts=hwIpfpmMcpBackwardLossPkts, hwIpfpmDcpInstDesc=hwIpfpmDcpInstDesc, hwIpfpmDcpInstConfigGroup=hwIpfpmDcpInstConfigGroup, hwIpfpmMcpDcpTable=hwIpfpmMcpDcpTable, HWIpfpmStatErrInfo=HWIpfpmStatErrInfo, hwIpfpmDcpFlowDstMaskLen=hwIpfpmDcpFlowDstMaskLen, hwIpfpmMib=hwIpfpmMib, hwIpfpmDcpInstTlpBackwardTpId=hwIpfpmDcpInstTlpBackwardTpId, hwIpfpmMcpAuthKeyId=hwIpfpmMcpAuthKeyId, hwIpfpmMcpDcpEntry=hwIpfpmMcpDcpEntry, hwIpfpmDcpTlpEntry=hwIpfpmDcpTlpEntry, hwIpfpmDcpInstAuthRowStatus=hwIpfpmDcpInstAuthRowStatus, hwIpfpmMcpStatsGroup=hwIpfpmMcpStatsGroup, hwIpfpmMcpInstAchIndexTable=hwIpfpmMcpInstAchIndexTable, hwIpfpmMcpForwardDelay=hwIpfpmMcpForwardDelay, hwIpfpmDcpInstAuthType=hwIpfpmDcpInstAuthType, hwIpfpmDcpTlpQueryTlpId=hwIpfpmDcpTlpQueryTlpId, hwIpfpmDcpTrapObjects=hwIpfpmDcpTrapObjects, hwIpfpmMcpEnable=hwIpfpmMcpEnable, HWIpfpmMMSType=HWIpfpmMMSType, hwIpfpmMcpDcpId=hwIpfpmMcpDcpId, hwIpfpmMcpAchRowStatus=hwIpfpmMcpAchRowStatus, hwIpfpmDcpTlpQueryVlanId=hwIpfpmDcpTlpQueryVlanId, hwIpfpmDcpInstTlpBackwardVpnLabel=hwIpfpmDcpInstTlpBackwardVpnLabel, hwIpfpmMcpTlpRole=hwIpfpmMcpTlpRole, hwIpfpmDcpMeasureColorFlag=hwIpfpmDcpMeasureColorFlag, hwIpfpmDcpTlpQueryExtIfIndex=hwIpfpmDcpTlpQueryExtIfIndex, hwIpfpmDcpInstMcpPort=hwIpfpmDcpInstMcpPort, hwIpfpmTwoDelayRecovery=hwIpfpmTwoDelayRecovery, hwIpfpmDcpInstRowStatus=hwIpfpmDcpInstRowStatus, hwIpfpmMcpBackwardOneDelay=hwIpfpmMcpBackwardOneDelay, hwIpfpmMcpTwoDelayVariation=hwIpfpmMcpTwoDelayVariation, hwIpfpmDcpInstTable=hwIpfpmDcpInstTable, hwIpfpmDcpTlpQueryExtOntId=hwIpfpmDcpTlpQueryExtOntId, hwIpfpmDcpInstTlpTpId=hwIpfpmDcpInstTlpTpId, hwIpfpmDcpTlpQueryExtOntPortId=hwIpfpmDcpTlpQueryExtOntPortId, hwIpfpmDcpTlpRowStatus=hwIpfpmDcpTlpRowStatus, hwIpfpmMcpStatistics=hwIpfpmMcpStatistics, hwIpfpmDcpTlpQueryEntry=hwIpfpmDcpTlpQueryEntry, hwIpfpmDcpLossMeasEntry=hwIpfpmDcpLossMeasEntry, hwIpfpmDcpAuthType=hwIpfpmDcpAuthType, hwIpfpmDcpAuthRowStatus=hwIpfpmDcpAuthRowStatus, hwIpfpmDcpInstEntry=hwIpfpmDcpInstEntry, hwIpfpmMcpStatisticsTable=hwIpfpmMcpStatisticsTable, hwIpfpmMcpInstAchIndexEntry=hwIpfpmMcpInstAchIndexEntry, hwIpfpmDcpFlowOuterDstAddr=hwIpfpmDcpFlowOuterDstAddr, HWIpfpmDelayTlpRole=HWIpfpmDelayTlpRole, hwIpfpmMcpTwoDelayLowThres=hwIpfpmMcpTwoDelayLowThres, hwIpfpmDcpFlowSrcAddr=hwIpfpmDcpFlowSrcAddr, hwIpfpmDcpLossMeasTable=hwIpfpmDcpLossMeasTable, HWIpfpmInstIntervalType=HWIpfpmInstIntervalType, hwIpfpmMcpAuthKey=hwIpfpmMcpAuthKey, hwIpfpmDcpConfigGroup=hwIpfpmDcpConfigGroup, hwIpfpmCompliances=hwIpfpmCompliances, hwIpfpmDcpFlowSrcPortEnd=hwIpfpmDcpFlowSrcPortEnd, hwIpfpmMcpLossErrInfo=hwIpfpmMcpLossErrInfo, hwIpfpmDcpDelayContEnable=hwIpfpmDcpDelayContEnable, hwIpfpmTlpThreshold=hwIpfpmTlpThreshold, hwIpfpmDcpLossTimeRange=hwIpfpmDcpLossTimeRange, hwIpfpmDcpInstTlpLspLabel3=hwIpfpmDcpInstTlpLspLabel3, hwIpfpmDcpDelayMeasType=hwIpfpmDcpDelayMeasType, HWIpfpmTlpRole=HWIpfpmTlpRole, hwIpfpmMcpBackwardLossBytesSign=hwIpfpmMcpBackwardLossBytesSign, HWIpfpmVpnType=HWIpfpmVpnType, hwIpfpmTlpNumber=hwIpfpmTlpNumber, hwIpfpmDcpExtTlpId=hwIpfpmDcpExtTlpId, hwIpfpmMcpTlpId=hwIpfpmMcpTlpId, hwIpfpmDcpInstInterval=hwIpfpmDcpInstInterval, hwIpfpmDcpDelayBackwardTlpId=hwIpfpmDcpDelayBackwardTlpId, hwIpfpmCompliance=hwIpfpmCompliance, hwIpfpmMcpAuthEntry=hwIpfpmMcpAuthEntry, hwIpfpmDcpTlpIfIndex=hwIpfpmDcpTlpIfIndex, hwIpfpmDcpInstAuthKey=hwIpfpmDcpInstAuthKey, hwIpfpmMcpForwardLossRatio=hwIpfpmMcpForwardLossRatio, hwIpfpmMcpForwardOneDelay=hwIpfpmMcpForwardOneDelay, hwIpfpmDcpTlpExtEntry=hwIpfpmDcpTlpExtEntry, hwIpfpmMcpInstConfigGroup=hwIpfpmMcpInstConfigGroup, hwIpfpmDcpInstTlpBackwardFlowLabelFlag=hwIpfpmDcpInstTlpBackwardFlowLabelFlag, HWIpfpmMeasureFlag=HWIpfpmMeasureFlag, hwIpfpmMcpMeasureEnable=hwIpfpmMcpMeasureEnable, hwIpfpmMcpAchEntry=hwIpfpmMcpAchEntry, hwIpfpmMcpTwoDelay=hwIpfpmMcpTwoDelay, hwIpfpmMcpInstTable=hwIpfpmMcpInstTable, hwIpfpmTlpRecovery=hwIpfpmTlpRecovery, hwIpfpmDcpInstTlpFlowType=hwIpfpmDcpInstTlpFlowType, hwIpfpmMcpTwoDelayUpThres=hwIpfpmMcpTwoDelayUpThres, hwIpfpmMcpBackwardDelayVariation=hwIpfpmMcpBackwardDelayVariation, hwIpfpmDcpInstTlpRole=hwIpfpmDcpInstTlpRole, hwIpfpmDcpDelayEnable=hwIpfpmDcpDelayEnable, hwIpfpmDcpInstTlpDirec=hwIpfpmDcpInstTlpDirec, hwIpfpmDcpTlpId=hwIpfpmDcpTlpId, hwIpfpmMcpFlowType=hwIpfpmMcpFlowType, hwIpfpmDcpSrcInstReferCnt=hwIpfpmDcpSrcInstReferCnt, hwIpfpmTlpExceedBoardId=hwIpfpmTlpExceedBoardId, hwIpfpmDcpFlowEntry=hwIpfpmDcpFlowEntry, hwIpfpmMcpSeqNoLow=hwIpfpmMcpSeqNoLow, hwIpfpmDcpFlowConflict=hwIpfpmDcpFlowConflict, hwIpfpmMcpInstEntry=hwIpfpmMcpInstEntry, hwIpfpmDcpTlpQueryTable=hwIpfpmDcpTlpQueryTable, hwIpfpmMcpBackwardPkts=hwIpfpmMcpBackwardPkts, HWIpfpmMcpTlpRole=HWIpfpmMcpTlpRole, hwIpfpmMcpInstSpec=hwIpfpmMcpInstSpec, hwIpfpmMcpInstCurNum=hwIpfpmMcpInstCurNum, hwIpfpmDcpInstAuthEntry=hwIpfpmDcpInstAuthEntry, hwIpfpmDcpInstTlpMultiSrcType=hwIpfpmDcpInstTlpMultiSrcType, hwIpfpmDcpInstTlpBackwardL2VpnFlag=hwIpfpmDcpInstTlpBackwardL2VpnFlag, hwIpfpmMcpForwardDelayVariation=hwIpfpmMcpForwardDelayVariation, hwIpfpmMcpTwoDelayStatEntry=hwIpfpmMcpTwoDelayStatEntry, hwIpfpmDcpFlowBackwardGtpTeid=hwIpfpmDcpFlowBackwardGtpTeid, hwIpfpmDcpFlowOuterSrcAddr=hwIpfpmDcpFlowOuterSrcAddr, hwIpfpmDcpTlpConfigGroup=hwIpfpmDcpTlpConfigGroup, hwIpfpmMcpAchTable=hwIpfpmMcpAchTable, hwIpfpmDcpInstTlpInnerVlan=hwIpfpmDcpInstTlpInnerVlan, hwIpfpmMcpBackwardLossBytes=hwIpfpmMcpBackwardLossBytes, hwIpfpmMcpBackwardLossPktsSign=hwIpfpmMcpBackwardLossPktsSign, hwIpfpmDcpFlowProtocol=hwIpfpmDcpFlowProtocol, hwIpfpmDcpSrcInstReferQueryEntry=hwIpfpmDcpSrcInstReferQueryEntry, hwIpfpmDcpSrcInstReferQueryTable=hwIpfpmDcpSrcInstReferQueryTable, hwIpfpmLossRatioRecovery=hwIpfpmLossRatioRecovery, HWIpfpmMeasTimeRangeType=HWIpfpmMeasTimeRangeType, hwIpfpmDcpFlowSrcMaskLen=hwIpfpmDcpFlowSrcMaskLen, hwIpfpmMcpForwardOneDelayMMSType=hwIpfpmMcpForwardOneDelayMMSType, hwIpfpmDcpInstTlpCtrlWordFlag=hwIpfpmDcpInstTlpCtrlWordFlag, hwIpfpmDcpConfiguration=hwIpfpmDcpConfiguration, hwIpfpmMcpForwardLossBytes=hwIpfpmMcpForwardLossBytes, hwIpfpmDcpInstTlpBackwardLspLabel=hwIpfpmDcpInstTlpBackwardLspLabel, hwIpfpmTrapsGroup=hwIpfpmTrapsGroup, hwIpfpmDcpFlowDstPortBgn=hwIpfpmDcpFlowDstPortBgn, hwIpfpmMcpBackwardLossRatio=hwIpfpmMcpBackwardLossRatio, hwIpfpmMcpForwardLossMMSType=hwIpfpmMcpForwardLossMMSType, hwIpfpmDcpInstTlpBackwardOuterVlan=hwIpfpmDcpInstTlpBackwardOuterVlan, hwIpfpmOneDelayExceed=hwIpfpmOneDelayExceed, hwIpfpmDcpInstTlpBackwardInnerVlan=hwIpfpmDcpInstTlpBackwardInnerVlan, hwIpfpmDcpId=hwIpfpmDcpId, hwIpfpmDcpTlpExtIfIndex=hwIpfpmDcpTlpExtIfIndex, hwIpfpmDcpTlpExtVlanId=hwIpfpmDcpTlpExtVlanId, hwIpfpmMcpAchId=hwIpfpmMcpAchId, hwIpfpmMcpAuthType=hwIpfpmMcpAuthType, hwIpfpmTlpExceed=hwIpfpmTlpExceed, hwIpfpmDcpEnable=hwIpfpmDcpEnable, hwIpfpmDcpInstMcpId=hwIpfpmDcpInstMcpId, hwIpfpmDcpTlpExtOntId=hwIpfpmDcpTlpExtOntId, hwIpfpmDcpInstTlpEntry=hwIpfpmDcpInstTlpEntry, hwIpfpmMcpOneDelayLowThres=hwIpfpmMcpOneDelayLowThres, hwIpfpmDcpFlowDstAddr=hwIpfpmDcpFlowDstAddr, HWIpfpmAuthType=HWIpfpmAuthType, hwIpfpmDcpDelayMeasEntry=hwIpfpmDcpDelayMeasEntry, hwIpfpmMcpForwardBytes=hwIpfpmMcpForwardBytes, hwIpfpmMcpBackwardDelay=hwIpfpmMcpBackwardDelay, hwIpfpmMcpObjects=hwIpfpmMcpObjects, hwIpfpmMcpForwardPkts=hwIpfpmMcpForwardPkts, hwIpfpmMcpTwoDelayErrInfo=hwIpfpmMcpTwoDelayErrInfo, hwIpfpmDcpFlowDstPortEnd=hwIpfpmDcpFlowDstPortEnd, HWIpfpmLossTlpRole=HWIpfpmLossTlpRole, hwIpfpmDcpGlobalTable=hwIpfpmDcpGlobalTable, hwIpfpmMcpInstType=hwIpfpmMcpInstType, hwIpfpmMcpForwardLossPktsSign=hwIpfpmMcpForwardLossPktsSign, hwIpfpmMcpOneDelayUpThres=hwIpfpmMcpOneDelayUpThres, HWEnabledStatus=HWEnabledStatus, hwIpfpmTraps=hwIpfpmTraps, hwIpfpmMcpTwoDelayStatTable=hwIpfpmMcpTwoDelayStatTable, hwIpfpmMcpBackwardOneDelayVariation=hwIpfpmMcpBackwardOneDelayVariation, hwIpfpmDcpSourceInstId=hwIpfpmDcpSourceInstId, hwIpfpmMcpBackwardBytes=hwIpfpmMcpBackwardBytes)
mibBuilder.exportSymbols("HUAWEI-IPFPM-MIB", hwIpfpmDcpAuthKeyId=hwIpfpmDcpAuthKeyId, hwIpfpmMcpTlpDcpId=hwIpfpmMcpTlpDcpId, HWIpfpmFlowType=HWIpfpmFlowType, hwIpfpmMcpForwardLossPkts=hwIpfpmMcpForwardLossPkts, hwIpfpmDcpTlpQueryExtEntry=hwIpfpmDcpTlpQueryExtEntry)
