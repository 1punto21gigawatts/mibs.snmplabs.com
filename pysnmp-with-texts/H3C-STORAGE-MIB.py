#
# PySNMP MIB module H3C-STORAGE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/H3C-STORAGE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:23:53 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint")
entPhysicalIndex, entPhysicalName, PhysicalIndex, entPhysicalDescr = mibBuilder.importSymbols("ENTITY-MIB", "entPhysicalIndex", "entPhysicalName", "PhysicalIndex", "entPhysicalDescr")
h3cDiskPowerOffReason, = mibBuilder.importSymbols("H3C-DISK-MIB", "h3cDiskPowerOffReason")
h3cEntityExtCriticalLowerTemperatureThreshold, h3cEntityExtPhysicalIndex, h3cEntityExtShutdownLowerTemperatureThreshold, h3cEntityExtTemperature, h3cEntityExtOperStatus = mibBuilder.importSymbols("H3C-ENTITY-EXT-MIB", "h3cEntityExtCriticalLowerTemperatureThreshold", "h3cEntityExtPhysicalIndex", "h3cEntityExtShutdownLowerTemperatureThreshold", "h3cEntityExtTemperature", "h3cEntityExtOperStatus")
h3cRaidUuid, h3cRaidRunState, h3cRaidHideState, h3cRaidName = mibBuilder.importSymbols("H3C-RAID-MIB", "h3cRaidUuid", "h3cRaidRunState", "h3cRaidHideState", "h3cRaidName")
H3cStorageActionType, H3cStorageEnableState, H3cStorageCapableState, H3cStorageLedStateType, H3cSoftwareInfoString, h3cStorageRef, H3cWwpnListType = mibBuilder.importSymbols("H3C-STORAGE-REF-MIB", "H3cStorageActionType", "H3cStorageEnableState", "H3cStorageCapableState", "H3cStorageLedStateType", "H3cSoftwareInfoString", "h3cStorageRef", "H3cWwpnListType")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, ModuleIdentity, NotificationType, TimeTicks, Counter64, Gauge32, MibIdentifier, ObjectIdentity, Bits, IpAddress, iso, Integer32, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "ModuleIdentity", "NotificationType", "TimeTicks", "Counter64", "Gauge32", "MibIdentifier", "ObjectIdentity", "Bits", "IpAddress", "iso", "Integer32", "Counter32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
h3cStorageMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2011, 10, 10, 1))
if mibBuilder.loadTexts: h3cStorageMIB.setLastUpdated('200709041452Z')
if mibBuilder.loadTexts: h3cStorageMIB.setOrganization('H3C Technologies Co., Ltd.')
if mibBuilder.loadTexts: h3cStorageMIB.setContactInfo('Platform Team H3C Technologies Co., Ltd. Hai-Dian District Beijing P.R. China Http://www.h3c.com Zip:100085')
if mibBuilder.loadTexts: h3cStorageMIB.setDescription('This MIB describes the general information of storage device, such as the property, configuration and management.')
h3cStorageMibObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 10, 10, 1, 1))
h3cStorageServerInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 10, 10, 1, 1, 1))
h3cStoragePhysicalInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 10, 10, 1, 1, 2))
h3cStorageServerCapability = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 10, 10, 1, 1, 1, 1))
h3cRaidCapability = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 10, 1, 1, 1, 1, 1), H3cStorageCapableState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cRaidCapability.setStatus('current')
if mibBuilder.loadTexts: h3cRaidCapability.setDescription('This object identifies if the agent support raid management.')
h3cFcCapability = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 10, 1, 1, 1, 1, 2), H3cStorageCapableState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cFcCapability.setStatus('current')
if mibBuilder.loadTexts: h3cFcCapability.setDescription('This object identifies if the agent support FC(fiber channel) management.')
h3cNasCapability = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 10, 1, 1, 1, 1, 3), H3cStorageCapableState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cNasCapability.setStatus('current')
if mibBuilder.loadTexts: h3cNasCapability.setDescription('This object identifies if the agent support NAS(Network Attached Storage).')
h3cAdaptiveRepCapability = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 10, 1, 1, 1, 1, 4), H3cStorageCapableState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cAdaptiveRepCapability.setStatus('current')
if mibBuilder.loadTexts: h3cAdaptiveRepCapability.setDescription('This object identifies if the agent support adaptive replication. With adaptive replication option, data from the primary resource is continuously replicated to a replication resource unless the system determines it is not practical or possible, such as when there is insufficient bandwidth. For continuous replication to occur, a continuous replication resource is used to stage the data being replicated from the primary resource. Similar to a cache, as soon as data comes into the continuous replication resource, it is written to the replication resource.')
h3cRemoteRepCapability = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 10, 1, 1, 1, 1, 5), H3cStorageCapableState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cRemoteRepCapability.setStatus('current')
if mibBuilder.loadTexts: h3cRemoteRepCapability.setDescription('This object identifies if the agent support remote replication.')
h3cSafeCacheCapability = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 10, 1, 1, 1, 1, 6), H3cStorageCapableState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cSafeCacheCapability.setStatus('current')
if mibBuilder.loadTexts: h3cSafeCacheCapability.setDescription('This object identifies if the agent support safe cache.')
h3cSyncMirrorCapability = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 10, 1, 1, 1, 1, 7), H3cStorageCapableState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cSyncMirrorCapability.setStatus('current')
if mibBuilder.loadTexts: h3cSyncMirrorCapability.setDescription('This object identifies if the agent support synchronized mirror.')
h3cAsyncMirrorCapability = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 10, 1, 1, 1, 1, 8), H3cStorageCapableState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cAsyncMirrorCapability.setStatus('current')
if mibBuilder.loadTexts: h3cAsyncMirrorCapability.setDescription('This object identifies if the agent support asynchronous mirror.')
h3cTimeMarkCapability = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 10, 1, 1, 1, 1, 9), H3cStorageCapableState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cTimeMarkCapability.setStatus('current')
if mibBuilder.loadTexts: h3cTimeMarkCapability.setDescription('This object identifies if the agent support time mark.')
h3cSseCapability = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 10, 1, 1, 1, 1, 10), H3cStorageCapableState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cSseCapability.setStatus('current')
if mibBuilder.loadTexts: h3cSseCapability.setDescription('This object identifies if the agent support SSE(Storage Service Enable).')
h3cStorageTargetConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 10, 10, 1, 1, 1, 2))
h3ciSCSITargetEnable = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 10, 1, 1, 1, 2, 1), H3cStorageEnableState().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3ciSCSITargetEnable.setStatus('current')
if mibBuilder.loadTexts: h3ciSCSITargetEnable.setDescription('This object identifies if the agent support iSCSI target.')
h3cFcTargetEnable = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 10, 1, 1, 1, 2, 2), H3cStorageEnableState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cFcTargetEnable.setStatus('current')
if mibBuilder.loadTexts: h3cFcTargetEnable.setDescription('This object identifies if the agent support FC target.')
h3cStorageServerPhysInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 10, 10, 1, 1, 1, 3))
h3cServerLocationLedState = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 10, 1, 1, 1, 3, 1), H3cStorageLedStateType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cServerLocationLedState.setStatus('current')
if mibBuilder.loadTexts: h3cServerLocationLedState.setDescription("This object identifies the state of storage device's location led.")
h3cServerResetButtonState = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 10, 1, 1, 1, 3, 2), H3cStorageEnableState().clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cServerResetButtonState.setStatus('current')
if mibBuilder.loadTexts: h3cServerResetButtonState.setDescription('This object identifies if the reset button is enable.')
h3cServerPowerButtonState = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 10, 1, 1, 1, 3, 3), H3cStorageEnableState().clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cServerPowerButtonState.setStatus('current')
if mibBuilder.loadTexts: h3cServerPowerButtonState.setDescription('This object identifies if the power button is enable.')
h3cServerPowerState = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 10, 1, 1, 1, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("online", 1), ("onlinebypass", 2), ("onbattery", 3), ("unknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cServerPowerState.setStatus('current')
if mibBuilder.loadTexts: h3cServerPowerState.setDescription("This object identifies the state of power supply in the server, and is valid when UPS has been configured successful. The value 'online' means power supply is well-balanced. The value 'onlinebypass' means supply power without ups. The value 'onbattery' means supply power with battery. The value 'unknown' means the power supply state is unknown.")
h3cDeuTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 10, 1, 1, 2, 1), )
if mibBuilder.loadTexts: h3cDeuTable.setStatus('current')
if mibBuilder.loadTexts: h3cDeuTable.setDescription('This table contains some information of a particular DEU(Disk Enclosure Unit).')
h3cDeuEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 10, 1, 1, 2, 1, 1), ).setIndexNames((0, "H3C-STORAGE-MIB", "h3cDeuIndex"))
if mibBuilder.loadTexts: h3cDeuEntry.setStatus('current')
if mibBuilder.loadTexts: h3cDeuEntry.setDescription('An entry containing management information applicable to a particular DEU.')
h3cDeuIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 10, 1, 1, 2, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: h3cDeuIndex.setStatus('current')
if mibBuilder.loadTexts: h3cDeuIndex.setDescription('This object identifies the index of h3cDeuTable. The DEU identified by a particular value of this index is the same object as identified by the same value of entPhysicalIndex.')
h3cDeuIDLed = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 10, 1, 1, 2, 1, 1, 2), H3cStorageLedStateType().clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cDeuIDLed.setStatus('current')
if mibBuilder.loadTexts: h3cDeuIDLed.setDescription("This object identifies the state of storage DEU's led.")
h3cDeuDiskScan = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 10, 1, 1, 2, 1, 1, 3), H3cStorageActionType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cDeuDiskScan.setStatus('current')
if mibBuilder.loadTexts: h3cDeuDiskScan.setDescription("The operation of scanning the table. When the value of this object is set to 'action', the operation of disk scanning is touched off.")
h3cStorageInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 10, 1, 1, 2, 2), )
if mibBuilder.loadTexts: h3cStorageInterfaceTable.setStatus('current')
if mibBuilder.loadTexts: h3cStorageInterfaceTable.setDescription('This table describes the interface information of the network.')
h3cStorageInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 10, 1, 1, 2, 2, 1), ).setIndexNames((0, "H3C-STORAGE-MIB", "h3cStorageInterfaceIndex"))
if mibBuilder.loadTexts: h3cStorageInterfaceEntry.setStatus('current')
if mibBuilder.loadTexts: h3cStorageInterfaceEntry.setDescription('An entry containing management information applicable to a particular interface.')
h3cStorageInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 10, 1, 1, 2, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: h3cStorageInterfaceIndex.setStatus('current')
if mibBuilder.loadTexts: h3cStorageInterfaceIndex.setDescription('This object identifies the index of H3cStorageInterfaceEntry. The interface identified by this index is the same interface as identified by the same value of ifIndex.')
h3cStorageInterfaceGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 10, 1, 1, 2, 2, 1, 2), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cStorageInterfaceGateway.setStatus('current')
if mibBuilder.loadTexts: h3cStorageInterfaceGateway.setDescription('This object identifies the gateway address of interface.')
h3cStorageInterfaceGatewayType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 10, 1, 1, 2, 2, 1, 3), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cStorageInterfaceGatewayType.setStatus('current')
if mibBuilder.loadTexts: h3cStorageInterfaceGatewayType.setDescription('This object identifies the gateway address type of interface.')
h3cStorageInterfaceMTU = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 10, 1, 1, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1500, 9000))).clone(namedValues=NamedValues(("mtu1", 1500), ("mtu2", 9000)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cStorageInterfaceMTU.setStatus('current')
if mibBuilder.loadTexts: h3cStorageInterfaceMTU.setDescription('This object identifies the MTU of interface.')
h3cBondingTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 10, 1, 1, 2, 3), )
if mibBuilder.loadTexts: h3cBondingTable.setStatus('current')
if mibBuilder.loadTexts: h3cBondingTable.setDescription('This table describes the information of the Bonding interface.')
h3cBondingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 10, 1, 1, 2, 3, 1), ).setIndexNames((0, "H3C-STORAGE-MIB", "h3cBondingIndex"))
if mibBuilder.loadTexts: h3cBondingEntry.setStatus('current')
if mibBuilder.loadTexts: h3cBondingEntry.setDescription('An entry containing management information applicable to a particular Bonding interface.')
h3cBondingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 10, 1, 1, 2, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: h3cBondingIndex.setStatus('current')
if mibBuilder.loadTexts: h3cBondingIndex.setDescription('This object identifies the index of h3cBondingEntry. The interface identified by this index is the same interface as identified by the same value of ifIndex.')
h3cBondingPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 10, 1, 1, 2, 3, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cBondingPortList.setStatus('current')
if mibBuilder.loadTexts: h3cBondingPortList.setDescription('An entry contains management information applicable to a particular bonding interface. Every two bytes describe the ifIndex of an interface, and an interface belongs to one bonding group only. An interface should be deleted from the portlist of the bonding group it belongs to before it is added to another bonding group.')
h3cScsiAdapterTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 10, 1, 1, 2, 4), )
if mibBuilder.loadTexts: h3cScsiAdapterTable.setStatus('current')
if mibBuilder.loadTexts: h3cScsiAdapterTable.setDescription('This table containing some information of the SCSI(Small Computer System interface) adapter.')
h3cScsiAdapterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 10, 1, 1, 2, 4, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "H3C-STORAGE-MIB", "h3cAdapterNumber"))
if mibBuilder.loadTexts: h3cScsiAdapterEntry.setStatus('current')
if mibBuilder.loadTexts: h3cScsiAdapterEntry.setDescription('An entry containing management information applicable to a particular SCSI adapter.')
h3cAdapterNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 10, 1, 1, 2, 4, 1, 1), Integer32())
if mibBuilder.loadTexts: h3cAdapterNumber.setStatus('current')
if mibBuilder.loadTexts: h3cAdapterNumber.setDescription('This object identifies the index of the adapter .')
h3cAdapterDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 10, 1, 1, 2, 4, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cAdapterDesc.setStatus('current')
if mibBuilder.loadTexts: h3cAdapterDesc.setDescription('This object describes some information of the adapter.')
h3cAdapterType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 10, 1, 1, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("scsi", 1), ("fc", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cAdapterType.setStatus('current')
if mibBuilder.loadTexts: h3cAdapterType.setDescription("This object identifies the type of adapter. If the value of this object is not equal to 'fc', the associated object(such as h3cFcAdapterMode, h3cFcAdapterIWWPNs,h3cFcAdapterTWWPNs,h3cFcAdapterPortState,h3cFcAdapterModeSwitch) will be invalid.")
h3cFcAdapterMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 10, 1, 1, 2, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("initiator", 1), ("target", 2), ("dual", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cFcAdapterMode.setStatus('current')
if mibBuilder.loadTexts: h3cFcAdapterMode.setDescription('This object identifies the mode type of adapter.')
h3cFcAdapterInitiatorWwpnName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 10, 1, 1, 2, 4, 1, 5), H3cWwpnListType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cFcAdapterInitiatorWwpnName.setStatus('current')
if mibBuilder.loadTexts: h3cFcAdapterInitiatorWwpnName.setDescription("This object describes the FC's adapter WWPN(World Wide Port Name) numbers.")
h3cFcAdapterTargetWwpnName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 10, 1, 1, 2, 4, 1, 6), H3cWwpnListType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cFcAdapterTargetWwpnName.setStatus('current')
if mibBuilder.loadTexts: h3cFcAdapterTargetWwpnName.setDescription("This object describes the FC's target WWPN numbers.")
h3cFcAdapterPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 10, 1, 1, 2, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("linkup", 1), ("linkdown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cFcAdapterPortState.setStatus('current')
if mibBuilder.loadTexts: h3cFcAdapterPortState.setDescription("This object identifies the state of adapter's interface.")
h3cFcAdapterModeSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 10, 1, 1, 2, 4, 1, 8), H3cStorageEnableState().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cFcAdapterModeSwitch.setStatus('current')
if mibBuilder.loadTexts: h3cFcAdapterModeSwitch.setDescription('This object identifies if the adapter work on a target mode.')
h3cExtVoltageTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 10, 1, 1, 2, 5), )
if mibBuilder.loadTexts: h3cExtVoltageTable.setStatus('current')
if mibBuilder.loadTexts: h3cExtVoltageTable.setDescription('This table contains some entity extend information of the voltage.')
h3cExtVoltageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 10, 1, 1, 2, 5, 1), ).setIndexNames((0, "H3C-STORAGE-MIB", "h3cExtVoltagePhysicalIndex"))
if mibBuilder.loadTexts: h3cExtVoltageEntry.setStatus('current')
if mibBuilder.loadTexts: h3cExtVoltageEntry.setDescription('An entry containing management information applicable to the voltage.')
h3cExtVoltagePhysicalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 10, 1, 1, 2, 5, 1, 1), PhysicalIndex()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: h3cExtVoltagePhysicalIndex.setStatus('current')
if mibBuilder.loadTexts: h3cExtVoltagePhysicalIndex.setDescription('This object identifies the entity index of voltage.')
h3cExtVoltagePhysicalName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 10, 1, 1, 2, 5, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cExtVoltagePhysicalName.setStatus('current')
if mibBuilder.loadTexts: h3cExtVoltagePhysicalName.setDescription('This object identifies the entity name of voltage.')
h3cExtVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 10, 1, 1, 2, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cExtVoltage.setStatus('current')
if mibBuilder.loadTexts: h3cExtVoltage.setDescription('The voltage for the entity.')
h3cExtVoltageLowThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 10, 1, 1, 2, 5, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cExtVoltageLowThreshold.setStatus('current')
if mibBuilder.loadTexts: h3cExtVoltageLowThreshold.setDescription('The low-threshold for the voltage. When voltage is lower than low-threshold, a notification will be sent.')
h3cExtVoltageHighThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 10, 1, 1, 2, 5, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cExtVoltageHighThreshold.setStatus('current')
if mibBuilder.loadTexts: h3cExtVoltageHighThreshold.setDescription('The high-threshold for the voltage. When voltage is higher than high-threshold, a notification will be sent.')
h3cExtCriticalVoltageLowThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 10, 1, 1, 2, 5, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cExtCriticalVoltageLowThreshold.setStatus('current')
if mibBuilder.loadTexts: h3cExtCriticalVoltageLowThreshold.setDescription('The critical low threshold for voltage. If the voltage is lower too much than the entity needs, the entity will halt.')
h3cExtCriticalVoltageHighThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 10, 1, 1, 2, 5, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cExtCriticalVoltageHighThreshold.setStatus('current')
if mibBuilder.loadTexts: h3cExtCriticalVoltageHighThreshold.setDescription('The critical high threshold for voltage. If the voltage is higher too much than the entity needs, the entity will halt.')
h3cExtShutdownVoltageLowThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 10, 1, 1, 2, 5, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cExtShutdownVoltageLowThreshold.setStatus('current')
if mibBuilder.loadTexts: h3cExtShutdownVoltageLowThreshold.setDescription('The voltage is lower than the critical low threshold. If the voltage is lower too much than the entity needs, the entity halts now.')
h3cExtShutdownVoltageHighThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 10, 1, 1, 2, 5, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cExtShutdownVoltageHighThreshold.setStatus('current')
if mibBuilder.loadTexts: h3cExtShutdownVoltageHighThreshold.setDescription('The voltage is higher than the critical high threshold. If the voltage is higher too much than the entity needs, the entity halts now.')
h3cStorageTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 10, 10, 1, 1, 3))
h3cStorageTrapsPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 10, 10, 1, 1, 3, 0))
h3cStorageTrapsObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 10, 10, 1, 1, 3, 1))
h3cSoftwareInfoString = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 10, 1, 1, 3, 1, 1), H3cSoftwareInfoString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cSoftwareInfoString.setStatus('current')
if mibBuilder.loadTexts: h3cSoftwareInfoString.setDescription("This object identifies if the software's information.")
h3cStorCriticalLowerTemperatureThresholdNotification = NotificationType((1, 3, 6, 1, 4, 1, 2011, 10, 10, 1, 1, 3, 0, 1)).setObjects(("H3C-ENTITY-EXT-MIB", "h3cEntityExtPhysicalIndex"), ("ENTITY-MIB", "entPhysicalName"), ("H3C-ENTITY-EXT-MIB", "h3cEntityExtTemperature"), ("H3C-ENTITY-EXT-MIB", "h3cEntityExtCriticalLowerTemperatureThreshold"))
if mibBuilder.loadTexts: h3cStorCriticalLowerTemperatureThresholdNotification.setStatus('current')
if mibBuilder.loadTexts: h3cStorCriticalLowerTemperatureThresholdNotification.setDescription('The h3cStorCriticalLowerTemperatureThresholdNotification indicates the temperature is lower than the threshold. If the temperature is lower too much than the entity needs, the entity will halt.')
h3cStorTemperatureTooLow = NotificationType((1, 3, 6, 1, 4, 1, 2011, 10, 10, 1, 1, 3, 0, 2)).setObjects(("H3C-ENTITY-EXT-MIB", "h3cEntityExtPhysicalIndex"), ("ENTITY-MIB", "entPhysicalName"), ("H3C-ENTITY-EXT-MIB", "h3cEntityExtTemperature"), ("H3C-ENTITY-EXT-MIB", "h3cEntityExtShutdownLowerTemperatureThreshold"))
if mibBuilder.loadTexts: h3cStorTemperatureTooLow.setStatus('current')
if mibBuilder.loadTexts: h3cStorTemperatureTooLow.setDescription('The h3cStorTemperatureTooLow indicates the temperature is lower than the threshold. If the temperature is lower too much than the entity needs, the entity halts now.')
h3cExtVoltageLowThresholdNotification = NotificationType((1, 3, 6, 1, 4, 1, 2011, 10, 10, 1, 1, 3, 0, 3)).setObjects(("H3C-STORAGE-MIB", "h3cExtVoltagePhysicalIndex"), ("H3C-STORAGE-MIB", "h3cExtVoltagePhysicalName"), ("H3C-STORAGE-MIB", "h3cExtVoltage"), ("H3C-STORAGE-MIB", "h3cExtVoltageLowThreshold"))
if mibBuilder.loadTexts: h3cExtVoltageLowThresholdNotification.setStatus('current')
if mibBuilder.loadTexts: h3cExtVoltageLowThresholdNotification.setDescription('The h3cExtVoltageLowThresholdNotification indicates the Voltage is lower than the low-threshold.')
h3cExtVoltageHighThresholdNotification = NotificationType((1, 3, 6, 1, 4, 1, 2011, 10, 10, 1, 1, 3, 0, 4)).setObjects(("H3C-STORAGE-MIB", "h3cExtVoltagePhysicalIndex"), ("H3C-STORAGE-MIB", "h3cExtVoltagePhysicalName"), ("H3C-STORAGE-MIB", "h3cExtVoltage"), ("H3C-STORAGE-MIB", "h3cExtVoltageHighThreshold"))
if mibBuilder.loadTexts: h3cExtVoltageHighThresholdNotification.setStatus('current')
if mibBuilder.loadTexts: h3cExtVoltageHighThresholdNotification.setDescription('The h3cExtVoltageHighThresholdNotification indicates the Voltage is lower than the high-threshold.')
h3cExtCriticalVoltageLowThresholdNotification = NotificationType((1, 3, 6, 1, 4, 1, 2011, 10, 10, 1, 1, 3, 0, 5)).setObjects(("H3C-STORAGE-MIB", "h3cExtVoltagePhysicalIndex"), ("H3C-STORAGE-MIB", "h3cExtVoltagePhysicalName"), ("H3C-STORAGE-MIB", "h3cExtVoltage"), ("H3C-STORAGE-MIB", "h3cExtCriticalVoltageLowThreshold"))
if mibBuilder.loadTexts: h3cExtCriticalVoltageLowThresholdNotification.setStatus('current')
if mibBuilder.loadTexts: h3cExtCriticalVoltageLowThresholdNotification.setDescription('The h3cExtCriticalVoltageLowThresholdNotification indicates the Voltage is lower than the critical low threshold.')
h3cExtCriticalVoltageHighThresholdNotification = NotificationType((1, 3, 6, 1, 4, 1, 2011, 10, 10, 1, 1, 3, 0, 6)).setObjects(("H3C-STORAGE-MIB", "h3cExtVoltagePhysicalIndex"), ("H3C-STORAGE-MIB", "h3cExtVoltagePhysicalName"), ("H3C-STORAGE-MIB", "h3cExtVoltage"), ("H3C-STORAGE-MIB", "h3cExtCriticalVoltageHighThreshold"))
if mibBuilder.loadTexts: h3cExtCriticalVoltageHighThresholdNotification.setStatus('current')
if mibBuilder.loadTexts: h3cExtCriticalVoltageHighThresholdNotification.setDescription('The h3cExtCriticalVoltageHighThresholdNotification indicates the Voltage is higher than the critical high threshold.')
h3cExtVoltageTooLow = NotificationType((1, 3, 6, 1, 4, 1, 2011, 10, 10, 1, 1, 3, 0, 7)).setObjects(("H3C-STORAGE-MIB", "h3cExtVoltagePhysicalIndex"), ("H3C-STORAGE-MIB", "h3cExtVoltagePhysicalName"), ("H3C-STORAGE-MIB", "h3cExtVoltage"), ("H3C-STORAGE-MIB", "h3cExtShutdownVoltageLowThreshold"))
if mibBuilder.loadTexts: h3cExtVoltageTooLow.setStatus('current')
if mibBuilder.loadTexts: h3cExtVoltageTooLow.setDescription('The h3cExtVoltageTooLowNotification indicates the Voltage is lower than the critical low threshold, and the entity halt now!')
h3cExtVoltageTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 2011, 10, 10, 1, 1, 3, 0, 8)).setObjects(("H3C-STORAGE-MIB", "h3cExtVoltagePhysicalIndex"), ("H3C-STORAGE-MIB", "h3cExtVoltagePhysicalName"), ("H3C-STORAGE-MIB", "h3cExtVoltage"), ("H3C-STORAGE-MIB", "h3cExtShutdownVoltageHighThreshold"))
if mibBuilder.loadTexts: h3cExtVoltageTooHigh.setStatus('current')
if mibBuilder.loadTexts: h3cExtVoltageTooHigh.setDescription('The h3cExtVoltageTooHighNotification indicates the Voltage is higher than the critical high threshold, and the entity halt now!')
h3cExtBatteryStateNotification = NotificationType((1, 3, 6, 1, 4, 1, 2011, 10, 10, 1, 1, 3, 0, 9)).setObjects(("H3C-ENTITY-EXT-MIB", "h3cEntityExtPhysicalIndex"), ("ENTITY-MIB", "entPhysicalName"), ("H3C-ENTITY-EXT-MIB", "h3cEntityExtOperStatus"))
if mibBuilder.loadTexts: h3cExtBatteryStateNotification.setStatus('current')
if mibBuilder.loadTexts: h3cExtBatteryStateNotification.setDescription("The h3cExtBatteryStateNotification indicates the raid battery entity's state changes.")
h3cDiskIOErrorNotification = NotificationType((1, 3, 6, 1, 4, 1, 2011, 10, 10, 1, 1, 3, 0, 10)).setObjects(("ENTITY-MIB", "entPhysicalDescr"))
if mibBuilder.loadTexts: h3cDiskIOErrorNotification.setStatus('current')
if mibBuilder.loadTexts: h3cDiskIOErrorNotification.setDescription('The h3cDiskIOErrorNotification indicates that a disk occurred I/O error.')
h3cRaidCreateNotification = NotificationType((1, 3, 6, 1, 4, 1, 2011, 10, 10, 1, 1, 3, 0, 11)).setObjects(("H3C-RAID-MIB", "h3cRaidUuid"), ("H3C-RAID-MIB", "h3cRaidName"))
if mibBuilder.loadTexts: h3cRaidCreateNotification.setStatus('current')
if mibBuilder.loadTexts: h3cRaidCreateNotification.setDescription('The h3cRaidCreateNotification indicates that a array is created.')
h3cRaidDeleteNotification = NotificationType((1, 3, 6, 1, 4, 1, 2011, 10, 10, 1, 1, 3, 0, 12)).setObjects(("H3C-RAID-MIB", "h3cRaidUuid"), ("H3C-RAID-MIB", "h3cRaidName"))
if mibBuilder.loadTexts: h3cRaidDeleteNotification.setStatus('current')
if mibBuilder.loadTexts: h3cRaidDeleteNotification.setDescription('The h3cRaidDeleteStateNotification indicates that a array is deleted.')
h3cRaidHideStateNotification = NotificationType((1, 3, 6, 1, 4, 1, 2011, 10, 10, 1, 1, 3, 0, 13)).setObjects(("H3C-RAID-MIB", "h3cRaidUuid"), ("H3C-RAID-MIB", "h3cRaidName"), ("H3C-RAID-MIB", "h3cRaidHideState"))
if mibBuilder.loadTexts: h3cRaidHideStateNotification.setStatus('current')
if mibBuilder.loadTexts: h3cRaidHideStateNotification.setDescription('The h3cRaidFailedNotification indicates that a array hide or unhide.')
h3cRaidRunStateNotification = NotificationType((1, 3, 6, 1, 4, 1, 2011, 10, 10, 1, 1, 3, 0, 14)).setObjects(("H3C-RAID-MIB", "h3cRaidUuid"), ("H3C-RAID-MIB", "h3cRaidName"), ("H3C-RAID-MIB", "h3cRaidRunState"))
if mibBuilder.loadTexts: h3cRaidRunStateNotification.setStatus('current')
if mibBuilder.loadTexts: h3cRaidRunStateNotification.setDescription('The h3cRaidDegradeNotification indicates that a array state change.')
h3cRaidImportNotification = NotificationType((1, 3, 6, 1, 4, 1, 2011, 10, 10, 1, 1, 3, 0, 15)).setObjects(("H3C-RAID-MIB", "h3cRaidUuid"), ("H3C-RAID-MIB", "h3cRaidName"))
if mibBuilder.loadTexts: h3cRaidImportNotification.setStatus('current')
if mibBuilder.loadTexts: h3cRaidImportNotification.setDescription('The h3cRaidFailedNotification indicates that a thrid array is imported.')
h3cRaidRebuildStartNotification = NotificationType((1, 3, 6, 1, 4, 1, 2011, 10, 10, 1, 1, 3, 0, 16)).setObjects(("H3C-RAID-MIB", "h3cRaidUuid"), ("H3C-RAID-MIB", "h3cRaidName"))
if mibBuilder.loadTexts: h3cRaidRebuildStartNotification.setStatus('current')
if mibBuilder.loadTexts: h3cRaidRebuildStartNotification.setDescription('The h3cRaidRebuildStartNotification indicates that a array start to rebuild.')
h3cRaidRebuildFinishNotification = NotificationType((1, 3, 6, 1, 4, 1, 2011, 10, 10, 1, 1, 3, 0, 17)).setObjects(("H3C-RAID-MIB", "h3cRaidUuid"), ("H3C-RAID-MIB", "h3cRaidName"))
if mibBuilder.loadTexts: h3cRaidRebuildFinishNotification.setStatus('current')
if mibBuilder.loadTexts: h3cRaidRebuildFinishNotification.setDescription('The h3cRaidRebuildStartNotification indicates that a array fininsh rebuild.')
h3cRaidRebuildPauseNotification = NotificationType((1, 3, 6, 1, 4, 1, 2011, 10, 10, 1, 1, 3, 0, 18)).setObjects(("H3C-RAID-MIB", "h3cRaidUuid"), ("H3C-RAID-MIB", "h3cRaidName"))
if mibBuilder.loadTexts: h3cRaidRebuildPauseNotification.setStatus('current')
if mibBuilder.loadTexts: h3cRaidRebuildPauseNotification.setDescription('The h3cRaidRebuildPauseNotification indicates that pause a array rebuilding.')
h3cRaidRebuildInterruptNotification = NotificationType((1, 3, 6, 1, 4, 1, 2011, 10, 10, 1, 1, 3, 0, 19)).setObjects(("H3C-RAID-MIB", "h3cRaidUuid"), ("H3C-RAID-MIB", "h3cRaidName"))
if mibBuilder.loadTexts: h3cRaidRebuildInterruptNotification.setStatus('current')
if mibBuilder.loadTexts: h3cRaidRebuildInterruptNotification.setDescription('The h3cRaidRebuildInterruptNotification indicates that interrupt a array rebuilding.')
h3cSoftwareModuleFailNotification = NotificationType((1, 3, 6, 1, 4, 1, 2011, 10, 10, 1, 1, 3, 0, 20)).setObjects(("H3C-STORAGE-MIB", "h3cSoftwareInfoString"))
if mibBuilder.loadTexts: h3cSoftwareModuleFailNotification.setStatus('current')
if mibBuilder.loadTexts: h3cSoftwareModuleFailNotification.setDescription('The h3cSoftwareModuleFailNotification indicates that software module(s) fail.')
h3cRaidBatteryExpiredNotification = NotificationType((1, 3, 6, 1, 4, 1, 2011, 10, 10, 1, 1, 3, 0, 21))
if mibBuilder.loadTexts: h3cRaidBatteryExpiredNotification.setStatus('current')
if mibBuilder.loadTexts: h3cRaidBatteryExpiredNotification.setDescription('The h3cRaidBatteryExpiredNotification indicates RAID Battery lifetime had expired.')
h3cRaidBatteryWillExpireNotification = NotificationType((1, 3, 6, 1, 4, 1, 2011, 10, 10, 1, 1, 3, 0, 22))
if mibBuilder.loadTexts: h3cRaidBatteryWillExpireNotification.setStatus('current')
if mibBuilder.loadTexts: h3cRaidBatteryWillExpireNotification.setDescription('The h3cRaidBatteryWillExpireNotification indicates RAID Battery lifetime will expire.')
h3cLvOnlineFailNotification = NotificationType((1, 3, 6, 1, 4, 1, 2011, 10, 10, 1, 1, 3, 0, 23)).setObjects(("H3C-RAID-MIB", "h3cRaidUuid"), ("H3C-RAID-MIB", "h3cRaidName"))
if mibBuilder.loadTexts: h3cLvOnlineFailNotification.setStatus('current')
if mibBuilder.loadTexts: h3cLvOnlineFailNotification.setDescription('The h3cLvOnlineFailNotification indicates lv(s) on vd fail to online.')
h3cLvOfflineFailNotification = NotificationType((1, 3, 6, 1, 4, 1, 2011, 10, 10, 1, 1, 3, 0, 24)).setObjects(("H3C-RAID-MIB", "h3cRaidUuid"), ("H3C-RAID-MIB", "h3cRaidName"))
if mibBuilder.loadTexts: h3cLvOfflineFailNotification.setStatus('current')
if mibBuilder.loadTexts: h3cLvOfflineFailNotification.setDescription('The h3cLvOfflineFailNotification indicates lv(s) on vd fail to offline.')
h3cRaidRunNotification = NotificationType((1, 3, 6, 1, 4, 1, 2011, 10, 10, 1, 1, 3, 0, 25)).setObjects(("H3C-RAID-MIB", "h3cRaidUuid"), ("H3C-RAID-MIB", "h3cRaidName"))
if mibBuilder.loadTexts: h3cRaidRunNotification.setStatus('current')
if mibBuilder.loadTexts: h3cRaidRunNotification.setDescription('The h3cRaidRunNotification indicates that a array is running.')
h3cExtVoltageNormal = NotificationType((1, 3, 6, 1, 4, 1, 2011, 10, 10, 1, 1, 3, 0, 26)).setObjects(("H3C-STORAGE-MIB", "h3cExtVoltagePhysicalIndex"), ("H3C-STORAGE-MIB", "h3cExtVoltagePhysicalName"), ("H3C-STORAGE-MIB", "h3cExtVoltage"), ("H3C-STORAGE-MIB", "h3cExtVoltageLowThreshold"), ("H3C-STORAGE-MIB", "h3cExtVoltageHighThreshold"))
if mibBuilder.loadTexts: h3cExtVoltageNormal.setStatus('current')
if mibBuilder.loadTexts: h3cExtVoltageNormal.setDescription('The h3cStorVoltageRecoveryNotification indicates the Voltage has recovered in reference.')
h3cDiskPowerOnNotification = NotificationType((1, 3, 6, 1, 4, 1, 2011, 10, 10, 1, 1, 3, 0, 27)).setObjects(("ENTITY-MIB", "entPhysicalDescr"))
if mibBuilder.loadTexts: h3cDiskPowerOnNotification.setStatus('current')
if mibBuilder.loadTexts: h3cDiskPowerOnNotification.setDescription('The h3cDiskPowerOnNotification indicates that a disk is power on.')
h3cDiskPowerOffNotification = NotificationType((1, 3, 6, 1, 4, 1, 2011, 10, 10, 1, 1, 3, 0, 28)).setObjects(("ENTITY-MIB", "entPhysicalDescr"), ("H3C-DISK-MIB", "h3cDiskPowerOffReason"))
if mibBuilder.loadTexts: h3cDiskPowerOffNotification.setStatus('current')
if mibBuilder.loadTexts: h3cDiskPowerOffNotification.setDescription('The h3cDiskPowerOffNotification indicates that a disk is power off.')
mibBuilder.exportSymbols("H3C-STORAGE-MIB", h3cFcTargetEnable=h3cFcTargetEnable, h3cFcAdapterInitiatorWwpnName=h3cFcAdapterInitiatorWwpnName, h3cExtVoltageLowThresholdNotification=h3cExtVoltageLowThresholdNotification, h3cStorageInterfaceMTU=h3cStorageInterfaceMTU, h3cBondingTable=h3cBondingTable, h3cStoragePhysicalInfo=h3cStoragePhysicalInfo, h3cExtCriticalVoltageHighThresholdNotification=h3cExtCriticalVoltageHighThresholdNotification, h3cRaidDeleteNotification=h3cRaidDeleteNotification, h3cDeuTable=h3cDeuTable, h3cAdaptiveRepCapability=h3cAdaptiveRepCapability, h3cBondingPortList=h3cBondingPortList, h3cExtVoltageTable=h3cExtVoltageTable, h3cDeuDiskScan=h3cDeuDiskScan, h3cExtVoltageNormal=h3cExtVoltageNormal, h3cDeuIndex=h3cDeuIndex, h3cExtVoltageLowThreshold=h3cExtVoltageLowThreshold, h3cStorageInterfaceTable=h3cStorageInterfaceTable, h3cScsiAdapterEntry=h3cScsiAdapterEntry, h3cRemoteRepCapability=h3cRemoteRepCapability, h3cAdapterNumber=h3cAdapterNumber, h3cExtShutdownVoltageHighThreshold=h3cExtShutdownVoltageHighThreshold, h3cExtVoltageTooLow=h3cExtVoltageTooLow, h3cStorageServerInfo=h3cStorageServerInfo, h3cStorageTrapsObjects=h3cStorageTrapsObjects, h3cFcAdapterPortState=h3cFcAdapterPortState, h3cLvOnlineFailNotification=h3cLvOnlineFailNotification, h3cRaidHideStateNotification=h3cRaidHideStateNotification, h3cTimeMarkCapability=h3cTimeMarkCapability, h3cSafeCacheCapability=h3cSafeCacheCapability, h3cAdapterDesc=h3cAdapterDesc, h3cDeuEntry=h3cDeuEntry, h3cServerPowerState=h3cServerPowerState, h3cStorageInterfaceGateway=h3cStorageInterfaceGateway, h3cExtCriticalVoltageHighThreshold=h3cExtCriticalVoltageHighThreshold, h3cRaidRebuildFinishNotification=h3cRaidRebuildFinishNotification, h3cRaidRebuildInterruptNotification=h3cRaidRebuildInterruptNotification, h3cStorTemperatureTooLow=h3cStorTemperatureTooLow, h3cBondingIndex=h3cBondingIndex, h3cRaidRunStateNotification=h3cRaidRunStateNotification, h3cExtVoltagePhysicalName=h3cExtVoltagePhysicalName, h3cDiskPowerOnNotification=h3cDiskPowerOnNotification, h3cServerLocationLedState=h3cServerLocationLedState, h3cExtVoltagePhysicalIndex=h3cExtVoltagePhysicalIndex, h3cSoftwareInfoString=h3cSoftwareInfoString, h3cExtVoltageHighThresholdNotification=h3cExtVoltageHighThresholdNotification, h3cDiskPowerOffNotification=h3cDiskPowerOffNotification, h3cStorageTrapsPrefix=h3cStorageTrapsPrefix, h3cAdapterType=h3cAdapterType, h3cDeuIDLed=h3cDeuIDLed, PYSNMP_MODULE_ID=h3cStorageMIB, h3cFcAdapterMode=h3cFcAdapterMode, h3cStorageInterfaceGatewayType=h3cStorageInterfaceGatewayType, h3cExtVoltageTooHigh=h3cExtVoltageTooHigh, h3cStorageMIB=h3cStorageMIB, h3cExtBatteryStateNotification=h3cExtBatteryStateNotification, h3cRaidCreateNotification=h3cRaidCreateNotification, h3cFcAdapterTargetWwpnName=h3cFcAdapterTargetWwpnName, h3cExtVoltageHighThreshold=h3cExtVoltageHighThreshold, h3cBondingEntry=h3cBondingEntry, h3cFcCapability=h3cFcCapability, h3cFcAdapterModeSwitch=h3cFcAdapterModeSwitch, h3cExtVoltage=h3cExtVoltage, h3cRaidImportNotification=h3cRaidImportNotification, h3cRaidRebuildStartNotification=h3cRaidRebuildStartNotification, h3cStorCriticalLowerTemperatureThresholdNotification=h3cStorCriticalLowerTemperatureThresholdNotification, h3cServerResetButtonState=h3cServerResetButtonState, h3cAsyncMirrorCapability=h3cAsyncMirrorCapability, h3cStorageTargetConfig=h3cStorageTargetConfig, h3cLvOfflineFailNotification=h3cLvOfflineFailNotification, h3ciSCSITargetEnable=h3ciSCSITargetEnable, h3cExtCriticalVoltageLowThreshold=h3cExtCriticalVoltageLowThreshold, h3cStorageTraps=h3cStorageTraps, h3cRaidBatteryExpiredNotification=h3cRaidBatteryExpiredNotification, h3cExtShutdownVoltageLowThreshold=h3cExtShutdownVoltageLowThreshold, h3cStorageServerCapability=h3cStorageServerCapability, h3cRaidRebuildPauseNotification=h3cRaidRebuildPauseNotification, h3cStorageServerPhysInfo=h3cStorageServerPhysInfo, h3cExtVoltageEntry=h3cExtVoltageEntry, h3cRaidCapability=h3cRaidCapability, h3cServerPowerButtonState=h3cServerPowerButtonState, h3cSyncMirrorCapability=h3cSyncMirrorCapability, h3cStorageInterfaceEntry=h3cStorageInterfaceEntry, h3cDiskIOErrorNotification=h3cDiskIOErrorNotification, h3cNasCapability=h3cNasCapability, h3cScsiAdapterTable=h3cScsiAdapterTable, h3cExtCriticalVoltageLowThresholdNotification=h3cExtCriticalVoltageLowThresholdNotification, h3cSoftwareModuleFailNotification=h3cSoftwareModuleFailNotification, h3cStorageMibObjects=h3cStorageMibObjects, h3cStorageInterfaceIndex=h3cStorageInterfaceIndex, h3cRaidBatteryWillExpireNotification=h3cRaidBatteryWillExpireNotification, h3cRaidRunNotification=h3cRaidRunNotification, h3cSseCapability=h3cSseCapability)
