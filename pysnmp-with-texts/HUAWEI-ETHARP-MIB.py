#
# PySNMP MIB module HUAWEI-ETHARP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HUAWEI-ETHARP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:44:36 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion")
PhysicalIndex, entPhysicalName, entPhysicalIndex = mibBuilder.importSymbols("ENTITY-MIB", "PhysicalIndex", "entPhysicalName", "entPhysicalIndex")
hwDatacomm, = mibBuilder.importSymbols("HUAWEI-MIB", "hwDatacomm")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
InetAddressIPv4, = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressIPv4")
EnabledStatus, = mibBuilder.importSymbols("P-BRIDGE-MIB", "EnabledStatus")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
MibIdentifier, Gauge32, Unsigned32, iso, ModuleIdentity, Bits, Integer32, Counter32, TimeTicks, ObjectIdentity, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "Gauge32", "Unsigned32", "iso", "ModuleIdentity", "Bits", "Integer32", "Counter32", "TimeTicks", "ObjectIdentity", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "NotificationType")
PhysAddress, TextualConvention, DisplayString, RowStatus, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "PhysAddress", "TextualConvention", "DisplayString", "RowStatus", "MacAddress")
hwEthernetARPMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123))
hwEthernetARPMIB.setRevisions(('2014-04-23 10:44', '2013-09-07 00:00', '2006-06-10 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hwEthernetARPMIB.setRevisionsDescriptions(('Add ARP remote backup fail trap at 2014-04-23.', 'Fix the errors checked by a tool.', 'The initial revision of this MIB module.',))
if mibBuilder.loadTexts: hwEthernetARPMIB.setLastUpdated('201404231044Z')
if mibBuilder.loadTexts: hwEthernetARPMIB.setOrganization('Huawei Technologies Co.,Ltd.')
if mibBuilder.loadTexts: hwEthernetARPMIB.setContactInfo("Huawei Industrial Base Bantian, Longgang Shenzhen 518129 People's Republic of China Website: http://www.huawei.com Email: support@huawei.com ")
if mibBuilder.loadTexts: hwEthernetARPMIB.setDescription('This MIB describes objects used for managing Ethernet ARP, including ARP Speed-limit,ARP Limit etc. ')
hwEthernetARPObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 1))
hwEthernetARPAntiAttackLog = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwEthernetARPAntiAttackLog.setStatus('current')
if mibBuilder.loadTexts: hwEthernetARPAntiAttackLog.setDescription('To prevent log and trap from being attacked, the function is not enabled by default.')
hwEthernetARPLearningStrict = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwEthernetARPLearningStrict.setStatus('current')
if mibBuilder.loadTexts: hwEthernetARPLearningStrict.setDescription('Indicates the ARP strict learning. In this way, routers can learn ARP entries only from the arp reply in response to the arp requrest send by the router.')
hwEthernetARPSpeedLimitTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 1, 3), )
if mibBuilder.loadTexts: hwEthernetARPSpeedLimitTable.setStatus('current')
if mibBuilder.loadTexts: hwEthernetARPSpeedLimitTable.setDescription('The table contains the configuration information of Ethernet ARP Speed limit slot. The information includes type, speedvalue, sourceip and destip.')
hwEthernetARPSpeedLimitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 1, 3, 1), ).setIndexNames((0, "HUAWEI-ETHARP-MIB", "hwEthernetARPLimitSlot"), (0, "HUAWEI-ETHARP-MIB", "hwEthernetARPLimitType"), (0, "HUAWEI-ETHARP-MIB", "hwEthernetARPLimitIPType"))
if mibBuilder.loadTexts: hwEthernetARPSpeedLimitEntry.setStatus('current')
if mibBuilder.loadTexts: hwEthernetARPSpeedLimitEntry.setDescription('The table contains the configuration information of Ethernet ARP Speed limit slot. The information includes type, speedvalue, sourceip and destip.')
hwEthernetARPLimitSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128)))
if mibBuilder.loadTexts: hwEthernetARPLimitSlot.setStatus('current')
if mibBuilder.loadTexts: hwEthernetARPLimitSlot.setDescription('The slot of ARP Speed Limit.')
hwEthernetARPLimitType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("arp", 1), ("arpmiss", 2))))
if mibBuilder.loadTexts: hwEthernetARPLimitType.setStatus('current')
if mibBuilder.loadTexts: hwEthernetARPLimitType.setDescription('The Type of ARP Speed Limit.')
hwEthernetARPLimitIPType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 8))).clone(namedValues=NamedValues(("sourceip", 4), ("destinationip", 8))))
if mibBuilder.loadTexts: hwEthernetARPLimitIPType.setStatus('current')
if mibBuilder.loadTexts: hwEthernetARPLimitIPType.setDescription('ARP speed limit is performed on a source or a destination IP address.')
hwEthernetARPLimitSpeedValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 1, 3, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwEthernetARPLimitSpeedValue.setStatus('current')
if mibBuilder.loadTexts: hwEthernetARPLimitSpeedValue.setDescription('The Speed Value of ARP Speed Limit.')
hwEthernetARPSpeedLimitIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 1, 4), InterfaceIndex()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwEthernetARPSpeedLimitIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwEthernetARPSpeedLimitIfIndex.setDescription('Indicates an interface enabled with ARP-MISS or an interface receiving the ARP packets.')
hwEthernetARPSpeedLimitConfigured = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 1, 5), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwEthernetARPSpeedLimitConfigured.setStatus('current')
if mibBuilder.loadTexts: hwEthernetARPSpeedLimitConfigured.setDescription('The Configured Speed Limit Value of ARP Speed Limit.')
hwEthernetARPSpeedLimitCurrent = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 1, 6), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwEthernetARPSpeedLimitCurrent.setStatus('current')
if mibBuilder.loadTexts: hwEthernetARPSpeedLimitCurrent.setDescription('The Current Speed Limit Value of ARP Speed Limit.')
hwEthernetARPSpeedLimitType = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 1, 7), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwEthernetARPSpeedLimitType.setStatus('current')
if mibBuilder.loadTexts: hwEthernetARPSpeedLimitType.setDescription('The Type of ARP Speed Limit.')
hwEthernetARPSpeedLimitSrcIPAddr = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 1, 8), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwEthernetARPSpeedLimitSrcIPAddr.setStatus('current')
if mibBuilder.loadTexts: hwEthernetARPSpeedLimitSrcIPAddr.setDescription('The Source IP address of ARP Speed Limit.')
hwEthernetARPSpeedLimitDstIPAddr = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 1, 9), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwEthernetARPSpeedLimitDstIPAddr.setStatus('current')
if mibBuilder.loadTexts: hwEthernetARPSpeedLimitDstIPAddr.setDescription('The Destination IP address of ARP Speed Limit.')
hwEthernetARPSpeedLimitVPNinstance = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 1, 10), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwEthernetARPSpeedLimitVPNinstance.setStatus('current')
if mibBuilder.loadTexts: hwEthernetARPSpeedLimitVPNinstance.setDescription('The VPN-instance name of ARP Speed Limit.')
hwEthernetARPStaticsTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 1, 11), )
if mibBuilder.loadTexts: hwEthernetARPStaticsTable.setStatus('current')
if mibBuilder.loadTexts: hwEthernetARPStaticsTable.setDescription('A table contains the statistics about Ethernet ARP. The statistics include number of received ARP packets, number of received ARP-MISS packets, number of learned ARP packets, number of discarded ARP packets caused by the ARP limit, the number of discarded ARP-MISS packets caused by the limit and the number of discarded ARP and ARP-MISS packets caused by other reasons.')
hwEthernetARPStaticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 1, 11, 1), ).setIndexNames((0, "HUAWEI-ETHARP-MIB", "hwEthernetARPStaticsSlot"))
if mibBuilder.loadTexts: hwEthernetARPStaticsEntry.setStatus('current')
if mibBuilder.loadTexts: hwEthernetARPStaticsEntry.setDescription('A table contains the statistics about Ethernet ARP. The statistics include number of received ARP packets, number of received ARP-MISS packets, number of learned ARP packets, number of discarded ARP packets caused by the ARP limit, the number of discarded ARP-MISS packets caused by the limit and the number of discarded ARP and ARP-MISS packets caused by other reasons.')
hwEthernetARPStaticsSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 1, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 128), ValueRangeConstraint(65535, 65535), )))
if mibBuilder.loadTexts: hwEthernetARPStaticsSlot.setStatus('current')
if mibBuilder.loadTexts: hwEthernetARPStaticsSlot.setDescription('The slot about which the ARP statistics are displayed.')
hwEthernetARPStaticsLearnTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 1, 11, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwEthernetARPStaticsLearnTotal.setStatus('current')
if mibBuilder.loadTexts: hwEthernetARPStaticsLearnTotal.setDescription('The total number of the learned ARP packets.')
hwEthernetARPDropForLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 1, 11, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwEthernetARPDropForLimit.setStatus('current')
if mibBuilder.loadTexts: hwEthernetARPDropForLimit.setDescription('The number of discarded packets caused by limit.')
hwEthernetARPDropForARPSuppress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 1, 11, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwEthernetARPDropForARPSuppress.setStatus('current')
if mibBuilder.loadTexts: hwEthernetARPDropForARPSuppress.setDescription('The number of discarded packets caused by the ARP suppress.')
hwEthernetARPDropForARPMissSuppress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 1, 11, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwEthernetARPDropForARPMissSuppress.setStatus('current')
if mibBuilder.loadTexts: hwEthernetARPDropForARPMissSuppress.setDescription('The number of discarded packets caused by the ARP-MISS suppress.')
hwEthernetARPDropForOther = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 1, 11, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwEthernetARPDropForOther.setStatus('current')
if mibBuilder.loadTexts: hwEthernetARPDropForOther.setDescription('The number of discarded ARP packets caused by other reasons.')
hwEthernetARPMissDropForOther = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 1, 11, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwEthernetARPMissDropForOther.setStatus('current')
if mibBuilder.loadTexts: hwEthernetARPMissDropForOther.setDescription('The number of discarded ARP-MISS caused by other reasons.')
hwEthernetARPRcvNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 1, 11, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwEthernetARPRcvNum.setStatus('current')
if mibBuilder.loadTexts: hwEthernetARPRcvNum.setDescription('The number of received ARP packets.')
hwEthernetARPMissRcvNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 1, 11, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwEthernetARPMissRcvNum.setStatus('current')
if mibBuilder.loadTexts: hwEthernetARPMissRcvNum.setDescription('The number of received ARP-MISS.')
hwEthernetARPStaticsOperation = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 1, 11, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reset", 1), ("unused", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwEthernetARPStaticsOperation.setStatus('current')
if mibBuilder.loadTexts: hwEthernetARPStaticsOperation.setDescription('resets the statistics about Ethernet ARP.')
hwEthernetARPDropForARPProxySuppress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 1, 11, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwEthernetARPDropForARPProxySuppress.setStatus('current')
if mibBuilder.loadTexts: hwEthernetARPDropForARPProxySuppress.setDescription('The number of discarded packets caused by the ARP-PROXY suppress.')
hwEthARPShowWithInterAndVidTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 1, 12), )
if mibBuilder.loadTexts: hwEthARPShowWithInterAndVidTable.setStatus('current')
if mibBuilder.loadTexts: hwEthARPShowWithInterAndVidTable.setDescription('Display the ARP table based on interface number or interface number and VLAN ID.')
hwEthARPShowWithInterAndVidEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 1, 12, 1), ).setIndexNames((0, "HUAWEI-ETHARP-MIB", "hwEthARPShowIfindex"), (0, "HUAWEI-ETHARP-MIB", "hwEthARPShowVid"), (0, "HUAWEI-ETHARP-MIB", "hwEthARPIpAddr"))
if mibBuilder.loadTexts: hwEthARPShowWithInterAndVidEntry.setStatus('current')
if mibBuilder.loadTexts: hwEthARPShowWithInterAndVidEntry.setDescription('Display the ARP table based on interface number or interface number and VLAN ID.')
hwEthARPShowIfindex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 1, 12, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hwEthARPShowIfindex.setStatus('current')
if mibBuilder.loadTexts: hwEthARPShowIfindex.setDescription('The interface learns ARP packets.')
hwEthARPShowVid = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 1, 12, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094)))
if mibBuilder.loadTexts: hwEthARPShowVid.setStatus('current')
if mibBuilder.loadTexts: hwEthARPShowVid.setDescription('The VLAN receives the APR packets.')
hwEthARPIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 1, 12, 1, 3), IpAddress())
if mibBuilder.loadTexts: hwEthARPIpAddr.setStatus('current')
if mibBuilder.loadTexts: hwEthARPIpAddr.setDescription('The ip of ARP .')
hwEthARPMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 1, 12, 1, 4), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwEthARPMacAddr.setStatus('current')
if mibBuilder.loadTexts: hwEthARPMacAddr.setDescription('The MAC of ARP .')
hwEthARPLimitTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 1, 13), )
if mibBuilder.loadTexts: hwEthARPLimitTable.setStatus('current')
if mibBuilder.loadTexts: hwEthARPLimitTable.setDescription('Configure the ARP limit based on interfaces or VLANs.')
hwEthARPLimitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 1, 13, 1), ).setIndexNames((0, "HUAWEI-ETHARP-MIB", "hwEthARPLimitCfgIfindex"), (0, "HUAWEI-ETHARP-MIB", "hwEthARPVLANFirst"), (0, "HUAWEI-ETHARP-MIB", "hwEthARPVLANLast"))
if mibBuilder.loadTexts: hwEthARPLimitEntry.setStatus('current')
if mibBuilder.loadTexts: hwEthARPLimitEntry.setDescription('Configure the ARP limit based on interfaces or VLANs.')
hwEthARPLimitCfgIfindex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 1, 13, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hwEthARPLimitCfgIfindex.setStatus('current')
if mibBuilder.loadTexts: hwEthARPLimitCfgIfindex.setDescription('The interface on which the limit is configured.')
hwEthARPVLANFirst = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 1, 13, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094)))
if mibBuilder.loadTexts: hwEthARPVLANFirst.setStatus('current')
if mibBuilder.loadTexts: hwEthARPVLANFirst.setDescription('The VLAN to which Layer 2 interfaces belong.')
hwEthARPVLANLast = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 1, 13, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094)))
if mibBuilder.loadTexts: hwEthARPVLANLast.setStatus('current')
if mibBuilder.loadTexts: hwEthARPVLANLast.setDescription('The VLAN to which Layer 2 interfaces belong.')
hwEthARPLimitNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 1, 13, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwEthARPLimitNum.setStatus('current')
if mibBuilder.loadTexts: hwEthARPLimitNum.setDescription('The value of the ARP limit.')
hwEthARPLimitRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 1, 13, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwEthARPLimitRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwEthARPLimitRowStatus.setDescription('The running status of the ARP limit table.')
hwEthernetARPLearningStrictInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 1, 14), )
if mibBuilder.loadTexts: hwEthernetARPLearningStrictInterfaceTable.setStatus('current')
if mibBuilder.loadTexts: hwEthernetARPLearningStrictInterfaceTable.setDescription('Configure the ARP Learning Strict based on interfaces.')
hwEthernetARPLearningStrictInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 1, 14, 1), ).setIndexNames((0, "HUAWEI-ETHARP-MIB", "hwEthernetARPLearningStrictIfindex"))
if mibBuilder.loadTexts: hwEthernetARPLearningStrictInterfaceEntry.setStatus('current')
if mibBuilder.loadTexts: hwEthernetARPLearningStrictInterfaceEntry.setDescription('Configure the ARP Learning Strict based on interfaces.')
hwEthernetARPLearningStrictIfindex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 1, 14, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hwEthernetARPLearningStrictIfindex.setStatus('current')
if mibBuilder.loadTexts: hwEthernetARPLearningStrictIfindex.setDescription('The interface on which the ARP Learning Strict be configured.')
hwEthernetARPLearningStrictState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 1, 14, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("forceEnable", 1), ("forceDisable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwEthernetARPLearningStrictState.setStatus('current')
if mibBuilder.loadTexts: hwEthernetARPLearningStrictState.setDescription('The ARP Learning Strict State be configured.')
hwEthernetARPLearningStrictRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 1, 14, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwEthernetARPLearningStrictRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwEthernetARPLearningStrictRowStatus.setDescription('The running status of the ARP Learning Strict table.')
hwArpLinkInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 1, 15), )
if mibBuilder.loadTexts: hwArpLinkInterfaceTable.setStatus('current')
if mibBuilder.loadTexts: hwArpLinkInterfaceTable.setDescription('Config ARP link interface: hwArpLinkIfIndex: interface index hwArpLinkPeerIp: peer ip hwArpLinkDetectTime: detection time between two ARP packects hwArpLinkDetectTimes: detection times of ARP packects hwArpLinkDetectMode: detection mode hwArpLinkStatus: interface status hwArpLinkRowStatus: the row status of this row.')
hwArpLinkInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 1, 15, 1), ).setIndexNames((0, "HUAWEI-ETHARP-MIB", "hwArpLinkIfIndex"))
if mibBuilder.loadTexts: hwArpLinkInterfaceEntry.setStatus('current')
if mibBuilder.loadTexts: hwArpLinkInterfaceEntry.setDescription('Config ARP link interface: hwArpLinkIfIndex: interface index hwArpLinkPeerIp: peer ip hwArpLinkDetectTime: detection time between two ARP packects hwArpLinkDetectTimes: detection times of ARP packects hwArpLinkDetectMode: detection mode hwArpLinkStatus: interface status hwArpLinkRowStatus: the row status of this row.')
hwArpLinkIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 1, 15, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: hwArpLinkIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwArpLinkIfIndex.setDescription('The index of interface which is configed to be linked by ARP, the zero value is invalid.')
hwArpLinkPeerIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 1, 15, 1, 11), InetAddressIPv4()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwArpLinkPeerIp.setStatus('current')
if mibBuilder.loadTexts: hwArpLinkPeerIp.setDescription('The IP address which ARP detecting packet will send to. When creating a new record or modifying the peer ip address, a check for this ip will be generated. If it is invalid, that operation will be not applicable.')
hwArpLinkDetectTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 1, 15, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(200, 10000)).clone(1000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwArpLinkDetectTime.setStatus('current')
if mibBuilder.loadTexts: hwArpLinkDetectTime.setDescription("The interval time for two ARP packets are sent to detect the peer's interface status, this time unit is millisecond. The valid range is from 200 to 10000, and the default value is 1000.")
hwArpLinkDetectTimes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 1, 15, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(3)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwArpLinkDetectTimes.setStatus('current')
if mibBuilder.loadTexts: hwArpLinkDetectTimes.setDescription('After the max detecting times for ARP packet is sent to, and there is not any response, the sender can judge the peer interface is down. Then, setting the status of current interface down. The valid range is from 1 to 10, and the default value is 3.')
hwArpLinkDetectMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 1, 15, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("loose", 1), ("strict", 2))).clone('strict')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwArpLinkDetectMode.setStatus('current')
if mibBuilder.loadTexts: hwArpLinkDetectMode.setDescription("The detecting mode for ARP linking interface. If the mode is loose and its status is down, current interface just wait to receive the ARP packet, when received peer's arp packet, current interface status is up. If mode is strict, current interface sends ARP detecting packet to peer actively, and shutdown itself, if these is no response from peer after the retry times. If status of current interface is up, it will send ARP packet to detect the status of peer actively, whenever the mode is loose or strict.")
hwArpLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 1, 15, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwArpLinkStatus.setStatus('current')
if mibBuilder.loadTexts: hwArpLinkStatus.setDescription('The status of interface linked by ARP. This value can not be set anytime.')
hwArpLinkRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 1, 15, 1, 51), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwArpLinkRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwArpLinkRowStatus.setDescription('The row status of ARP link table. The detail can be found from the rowstatus definition.')
hwArpEntryExpireControlTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 1, 16), )
if mibBuilder.loadTexts: hwArpEntryExpireControlTable.setStatus('current')
if mibBuilder.loadTexts: hwArpEntryExpireControlTable.setDescription('The value of the object identifies the parameters of ARP aging detection, such as ARP detection mode, start time, detection times. At present, only the ARP detection mode and ARP fake-entry expire time can be configured. hwArpEntryExpireIfIndex: indicates the interface index. hwArpEntryExpireDetectMode: indicates the unicast or broadcast ARP aging detection mode. hwArpEntryExpireFakeTime: indicates the expire time of ARP fake entry.')
hwArpEntryExpireControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 1, 16, 1), ).setIndexNames((0, "HUAWEI-ETHARP-MIB", "hwArpEntryExpireIfIndex"))
if mibBuilder.loadTexts: hwArpEntryExpireControlEntry.setStatus('current')
if mibBuilder.loadTexts: hwArpEntryExpireControlEntry.setDescription('The value of the object identifies the parameters of ARP aging detection, such as ARP detection mode, start time, detection times. At present, only the ARP detection mode and ARP fake-entry expire time can be configured. hwArpEntryExpireIfIndex: indicates the interface index. hwArpEntryExpireDetectMode: indicates the unicast or broadcast ARP aging detection mode. hwArpEntryExpireFakeTime: indicates the expire time of ARP fake entry.')
hwArpEntryExpireIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 1, 16, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hwArpEntryExpireIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwArpEntryExpireIfIndex.setDescription('This object indicates the index of an interface on which ARP aging detection parameters are set. The value 0 is invalid.')
hwArpEntryExpireDetectMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 1, 16, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("broadcast", 1), ("unicast", 2))).clone('broadcast')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwArpEntryExpireDetectMode.setStatus('current')
if mibBuilder.loadTexts: hwArpEntryExpireDetectMode.setDescription('This object indicates the ARP aging detection mode. In unicast ARP detection mode, unicast ARP detection packets are sent before ARP ages. In broadcast ARP detection mode, broadcast ARP detection packets are sent before ARP ages. By default, the system adopts the broadcast ARP detection mode.')
hwArpEntryExpireFakeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 1, 16, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 36000)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwArpEntryExpireFakeTime.setStatus('current')
if mibBuilder.loadTexts: hwArpEntryExpireFakeTime.setDescription('This object indicates the expire time of ARP fake entry. The valid range is from 1 to 36000, and the default value is 1.')
hwArpDynTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 1, 17), )
if mibBuilder.loadTexts: hwArpDynTable.setStatus('current')
if mibBuilder.loadTexts: hwArpDynTable.setDescription('The value of the object identifies the items of ARP table, such as IP address of ARP items, VPN instance name of ARP items, MAC address of ARP items, VLAN information of ARP items, expire time of ARP items. hwArpDynEntryIfIndex: indicates the interface index. hwArpDynEntryIpAdd: indicates the IP address. hwArpDynEntryVrf: indicates the VPN instance name. hwArpDynEntryMacAdd: indicates the MAC address. hwArpDynEntryVlanId: indicates the VLAN of ARP item. hwArpDynEntryCeVlanId: indicates the CE VLAN of ARP item. hwArpDynEntryOutIfIndex: indicates the forwarding interface. hwArpDynEntryExpireTime: indicates the expire time of ARP item.')
hwArpDynEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 1, 17, 1), ).setIndexNames((0, "HUAWEI-ETHARP-MIB", "hwArpDynIfIndex"), (0, "HUAWEI-ETHARP-MIB", "hwArpDynIpAdd"), (0, "HUAWEI-ETHARP-MIB", "hwArpDynVrf"))
if mibBuilder.loadTexts: hwArpDynEntry.setStatus('current')
if mibBuilder.loadTexts: hwArpDynEntry.setDescription('The value of the object identifies the items of dynamic ARP table, such as IP address of ARP items, VPN instance name of ARP items, MAC address of ARP items, VLAN information of ARP items, expire time of ARP items. hwArpDynEntryIfIndex: indicates the interface index. hwArpDynEntryIpAdd: indicates the IP address. hwArpDynEntryVrf: indicates the VPN instance name. hwArpDynEntryMacAdd: indicates the MAC address. hwArpDynEntryVlanId: indicates the VLAN of ARP item. hwArpDynEntryCeVlanId: indicates the CE VLAN of ARP item. hwArpDynEntryOutIfIndex: indicates the forwarding interface. hwArpDynEntryExpireTime: indicates the expire time of ARP item.')
hwArpDynIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 1, 17, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: hwArpDynIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwArpDynIfIndex.setDescription('The logic forwarding interface. The value 0 is invalid.')
hwArpDynIpAdd = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 1, 17, 1, 2), InetAddressIPv4())
if mibBuilder.loadTexts: hwArpDynIpAdd.setStatus('current')
if mibBuilder.loadTexts: hwArpDynIpAdd.setDescription('This object indicates the IP address of an ARP items. The value 0 is invalid.')
hwArpDynVrf = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 1, 17, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)))
if mibBuilder.loadTexts: hwArpDynVrf.setStatus('current')
if mibBuilder.loadTexts: hwArpDynVrf.setDescription('This object indicates the VPN name of an ARP items.')
hwArpDynMacAdd = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 1, 17, 1, 11), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwArpDynMacAdd.setStatus('current')
if mibBuilder.loadTexts: hwArpDynMacAdd.setDescription('This object indicates the MAC address of an ARP items.')
hwArpDynVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 1, 17, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwArpDynVlanId.setStatus('current')
if mibBuilder.loadTexts: hwArpDynVlanId.setDescription('This object indicates the VLAN of an ARP items.')
hwArpDynCeVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 1, 17, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwArpDynCeVlanId.setStatus('current')
if mibBuilder.loadTexts: hwArpDynCeVlanId.setDescription('This object indicates the CE VLAN of an ARP items.')
hwArpDynOutIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 1, 17, 1, 14), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwArpDynOutIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwArpDynOutIfIndex.setDescription('The physical forwarding interface.')
hwArpDynExpireTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 1, 17, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwArpDynExpireTime.setStatus('current')
if mibBuilder.loadTexts: hwArpDynExpireTime.setDescription('This object indicates the expire time of an ARP items.')
hwArpCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 1, 18), )
if mibBuilder.loadTexts: hwArpCfgTable.setStatus('current')
if mibBuilder.loadTexts: hwArpCfgTable.setDescription('The value of the object identifies the items of static ARP table, such as IP address of ARP items, VPN instance name of ARP items, MAC address of ARP items, VLAN information of ARP items. hwArpDynEntryIpAdd: indicates the IP address. hwArpDynEntryVrf: indicates the VPN instance name. hwArpDynEntryMacAdd: indicates the MAC address. hwArpDynEntryVlanId: indicates the VLAN of ARP item. hwArpDynEntryCeVlanId: indicates the CE VLAN of ARP item. hwArpDynEntryOutIfIndex: indicates the forwarding interface.')
hwArpCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 1, 18, 1), ).setIndexNames((0, "HUAWEI-ETHARP-MIB", "hwArpCfgIpAdd"), (0, "HUAWEI-ETHARP-MIB", "hwArpCfgVrf"))
if mibBuilder.loadTexts: hwArpCfgEntry.setStatus('current')
if mibBuilder.loadTexts: hwArpCfgEntry.setDescription('The value of the object identifies the items of static ARP table, such as IP address of ARP items, VPN instance name of ARP items, MAC address of ARP items, VLAN information of ARP items. hwArpDynEntryIpAdd: indicates the IP address. hwArpDynEntryVrf: indicates the VPN instance name. hwArpDynEntryMacAdd: indicates the MAC address. hwArpDynEntryVlanId: indicates the VLAN of ARP item. hwArpDynEntryCeVlanId: indicates the CE VLAN of ARP item. hwArpDynEntryOutIfIndex: indicates the forwarding interface.')
hwArpCfgIpAdd = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 1, 18, 1, 1), InetAddressIPv4())
if mibBuilder.loadTexts: hwArpCfgIpAdd.setStatus('current')
if mibBuilder.loadTexts: hwArpCfgIpAdd.setDescription('This object indicates the IP address of an ARP items. The value 0 is invalid.')
hwArpCfgMacAdd = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 1, 18, 1, 2), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwArpCfgMacAdd.setStatus('current')
if mibBuilder.loadTexts: hwArpCfgMacAdd.setDescription('This object indicates the MAC address of an ARP items.')
hwArpCfgVrf = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 1, 18, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)))
if mibBuilder.loadTexts: hwArpCfgVrf.setStatus('current')
if mibBuilder.loadTexts: hwArpCfgVrf.setDescription('This object indicates the VPN name of an ARP items.')
hwArpCfgVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 1, 18, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwArpCfgVlanId.setStatus('current')
if mibBuilder.loadTexts: hwArpCfgVlanId.setDescription('This object indicates the VLAN of an ARP items.')
hwArpCfgCeVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 1, 18, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwArpCfgCeVlanId.setStatus('current')
if mibBuilder.loadTexts: hwArpCfgCeVlanId.setDescription('This object indicates the CE VLAN of an ARP items.')
hwArpCfgOutIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 1, 18, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwArpCfgOutIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwArpCfgOutIfIndex.setDescription('The physical forwarding interface.')
hwArpCfgRowstatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 1, 18, 1, 51), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwArpCfgRowstatus.setStatus('current')
if mibBuilder.loadTexts: hwArpCfgRowstatus.setDescription('This object indicates the row status of an static ARP item.')
hwEthernetARPAntiAttackStatus = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("disable", 0), ("fixMac", 1), ("fixAll", 2), ("sendAck", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwEthernetARPAntiAttackStatus.setStatus('current')
if mibBuilder.loadTexts: hwEthernetARPAntiAttackStatus.setDescription('This object indicates the status of the ARP anti-attack.')
hwEthernetARPAntiGateWayConflict = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 1, 20), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwEthernetARPAntiGateWayConflict.setStatus('current')
if mibBuilder.loadTexts: hwEthernetARPAntiGateWayConflict.setDescription('This object indicates the status of the ARP anti-gateway-conflict.')
hwEthernetARPLogAndTrapTimer = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwEthernetARPLogAndTrapTimer.setStatus('current')
if mibBuilder.loadTexts: hwEthernetARPLogAndTrapTimer.setDescription('This object indicates the interval of log and trap. The default value is 0, which means no log and trap.')
hwEthernetARPAntiAttackObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 1, 22))
hwEthernetARPAntiAttackIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 1, 22, 1), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwEthernetARPAntiAttackIpAddress.setStatus('current')
if mibBuilder.loadTexts: hwEthernetARPAntiAttackIpAddress.setDescription('This object indicates the IP address which is attacked.')
hwEthernetARPAntiAttackMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 1, 22, 2), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwEthernetARPAntiAttackMacAddress.setStatus('current')
if mibBuilder.loadTexts: hwEthernetARPAntiAttackMacAddress.setDescription('This object indicates the MAC address which is attacked.')
hwEthernetARPAntiAttackVlanId = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 1, 22, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwEthernetARPAntiAttackVlanId.setStatus('current')
if mibBuilder.loadTexts: hwEthernetARPAntiAttackVlanId.setDescription('This object indicates the VLAN ID which is attacked.')
hwEthernetARPAntiAttackIfName = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 1, 22, 4), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwEthernetARPAntiAttackIfName.setStatus('current')
if mibBuilder.loadTexts: hwEthernetARPAntiAttackIfName.setDescription('This object indicates the interface name which is attacked.')
hwArpEntryGatewayConflictTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 1, 23), )
if mibBuilder.loadTexts: hwArpEntryGatewayConflictTable.setStatus('current')
if mibBuilder.loadTexts: hwArpEntryGatewayConflictTable.setDescription('The value of the object identifies the information about the source of the attack. It contains IP address, MAC, VLAN ID and interface.')
hwArpEntryGatewayConflictEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 1, 23, 1), ).setIndexNames((0, "HUAWEI-ETHARP-MIB", "hwEthernetARPAntiGatewayConflictIndex"))
if mibBuilder.loadTexts: hwArpEntryGatewayConflictEntry.setStatus('current')
if mibBuilder.loadTexts: hwArpEntryGatewayConflictEntry.setDescription('The value of the object identifies the information about the source of the attack. It contains IP address, MAC, VLAN ID and interface.')
hwEthernetARPAntiGatewayConflictIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 1, 23, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: hwEthernetARPAntiGatewayConflictIndex.setStatus('current')
if mibBuilder.loadTexts: hwEthernetARPAntiGatewayConflictIndex.setDescription('The index of the gateway conflict entries.')
hwEthernetARPAntiGatewayConflictIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 1, 23, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwEthernetARPAntiGatewayConflictIpAddress.setStatus('current')
if mibBuilder.loadTexts: hwEthernetARPAntiGatewayConflictIpAddress.setDescription('This object indicates the IP address is attacked.')
hwEthernetARPAntiGatewayConflictMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 1, 23, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwEthernetARPAntiGatewayConflictMacAddress.setStatus('current')
if mibBuilder.loadTexts: hwEthernetARPAntiGatewayConflictMacAddress.setDescription('This object indicates the MAC of the attack-source.')
hwEthernetARPAntiGatewayConflictVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 1, 23, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwEthernetARPAntiGatewayConflictVlanId.setStatus('current')
if mibBuilder.loadTexts: hwEthernetARPAntiGatewayConflictVlanId.setDescription('This object indicates the VLAN ID of the attack-source.')
hwEthernetARPAntiGatewayConflictIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 1, 23, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwEthernetARPAntiGatewayConflictIfName.setStatus('current')
if mibBuilder.loadTexts: hwEthernetARPAntiGatewayConflictIfName.setDescription('This object indicates the interface of the attack-source.')
hwArpSecValidateTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 1, 24), )
if mibBuilder.loadTexts: hwArpSecValidateTable.setStatus('current')
if mibBuilder.loadTexts: hwArpSecValidateTable.setDescription('The table contains the arp validation information on the interface.')
hwArpSecValidateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 1, 24, 1), ).setIndexNames((0, "HUAWEI-ETHARP-MIB", "hwArpSecValidateIfIndex"))
if mibBuilder.loadTexts: hwArpSecValidateEntry.setStatus('current')
if mibBuilder.loadTexts: hwArpSecValidateEntry.setDescription('The entry contains the arp validation information on the interface.')
hwArpSecValidateIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 1, 24, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hwArpSecValidateIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwArpSecValidateIfIndex.setDescription('The index of the arp validation entries.')
hwArpSecValidateSmac = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 1, 24, 1, 2), EnabledStatus().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwArpSecValidateSmac.setStatus('current')
if mibBuilder.loadTexts: hwArpSecValidateSmac.setDescription('indicates check the source-mac of arp packet head and the ethernet packet head.')
hwArpSecValidateDmac = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 1, 24, 1, 3), EnabledStatus().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwArpSecValidateDmac.setStatus('current')
if mibBuilder.loadTexts: hwArpSecValidateDmac.setDescription('indicates check the destination-mac of arp packet head and the ethernet packet head.')
hwArpSecValidateRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 1, 24, 1, 51), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwArpSecValidateRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwArpSecValidateRowStatus.setDescription('This object specifies the status of the arp validation table.')
hwARPGratuitousSendTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 1, 25), )
if mibBuilder.loadTexts: hwARPGratuitousSendTable.setStatus('current')
if mibBuilder.loadTexts: hwARPGratuitousSendTable.setDescription('The table contains the arp validation information on the interface.')
hwARPGratuitousSendEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 1, 25, 1), ).setIndexNames((0, "HUAWEI-ETHARP-MIB", "hwARPGratuitousSendIfIndex"))
if mibBuilder.loadTexts: hwARPGratuitousSendEntry.setStatus('current')
if mibBuilder.loadTexts: hwARPGratuitousSendEntry.setDescription('The entry contains the gratuitous arp send information on the vlanif interface.')
hwARPGratuitousSendIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 1, 25, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hwARPGratuitousSendIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwARPGratuitousSendIfIndex.setDescription('The ifindex of the ARP gratuitous send configed.')
hwARPGratuitousSendEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 1, 25, 1, 2), EnabledStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwARPGratuitousSendEnable.setStatus('current')
if mibBuilder.loadTexts: hwARPGratuitousSendEnable.setDescription('This object indicates the status of the gratuitous-arp send.')
hwARPArpGratuitousSendInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 1, 25, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 86400))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwARPArpGratuitousSendInterval.setStatus('current')
if mibBuilder.loadTexts: hwARPArpGratuitousSendInterval.setDescription('This object indicates the interval of the gratuitous-arp send. The value ranges from 1 to 86400, in second, with default value 90.')
hwEthernetARPThresholdObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 1, 26))
hwEthernetARPThresholdValue = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 1, 26, 1), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwEthernetARPThresholdValue.setStatus('current')
if mibBuilder.loadTexts: hwEthernetARPThresholdValue.setDescription('This object indicates the threshold of the alarm generated.')
hwEthernetARPThresholdDynamicNumber = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 1, 26, 2), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwEthernetARPThresholdDynamicNumber.setStatus('current')
if mibBuilder.loadTexts: hwEthernetARPThresholdDynamicNumber.setDescription('This object indicates the number of dynamic ARP entries.')
hwEthernetARPThresholdStaticNumber = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 1, 26, 3), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwEthernetARPThresholdStaticNumber.setStatus('current')
if mibBuilder.loadTexts: hwEthernetARPThresholdStaticNumber.setDescription('This object indicates the number of static ARP entries.')
hwEthernetARPConflictDetect = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwEthernetARPConflictDetect.setStatus('current')
if mibBuilder.loadTexts: hwEthernetARPConflictDetect.setDescription('Indicates the ARP conflict detect. In this way, router can detect ARP entries conflict.')
hwETHARPIPConflictObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 1, 28))
hwEthernetARPIPConflictIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 1, 28, 1), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwEthernetARPIPConflictIPAddress.setStatus('current')
if mibBuilder.loadTexts: hwEthernetARPIPConflictIPAddress.setDescription('This object indicates the conflict IP address.')
hwEthernetARPIPConflictLocalInterfaceName = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 1, 28, 2), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwEthernetARPIPConflictLocalInterfaceName.setStatus('current')
if mibBuilder.loadTexts: hwEthernetARPIPConflictLocalInterfaceName.setDescription('This object indicates the interface before conflict.')
hwEthernetARPIPConflictLocalMAC = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 1, 28, 3), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwEthernetARPIPConflictLocalMAC.setStatus('current')
if mibBuilder.loadTexts: hwEthernetARPIPConflictLocalMAC.setDescription('This object indicates the MAC before conflict.')
hwEthernetARPIPConflictLocalVLAN = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 1, 28, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwEthernetARPIPConflictLocalVLAN.setStatus('current')
if mibBuilder.loadTexts: hwEthernetARPIPConflictLocalVLAN.setDescription('This object indicates the VLAN before conflict.')
hwEthernetARPIPConflictLocalCEVLAN = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 1, 28, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwEthernetARPIPConflictLocalCEVLAN.setStatus('current')
if mibBuilder.loadTexts: hwEthernetARPIPConflictLocalCEVLAN.setDescription('This object indicates the CE VLAN before conflict.')
hwEthernetARPIPConflictReceiveInterfaceName = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 1, 28, 6), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwEthernetARPIPConflictReceiveInterfaceName.setStatus('current')
if mibBuilder.loadTexts: hwEthernetARPIPConflictReceiveInterfaceName.setDescription('This object indicates the conflict interface.')
hwEthernetARPIPConflictReceiveMAC = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 1, 28, 7), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwEthernetARPIPConflictReceiveMAC.setStatus('current')
if mibBuilder.loadTexts: hwEthernetARPIPConflictReceiveMAC.setDescription('This object indicates the conflict MAC of the received packet.')
hwEthernetARPIPConflictReceiveVLAN = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 1, 28, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwEthernetARPIPConflictReceiveVLAN.setStatus('current')
if mibBuilder.loadTexts: hwEthernetARPIPConflictReceiveVLAN.setDescription('This object indicates the VLAN of the received packet.')
hwEthernetARPIPConflictReceiveCEVLAN = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 1, 28, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwEthernetARPIPConflictReceiveCEVLAN.setStatus('current')
if mibBuilder.loadTexts: hwEthernetARPIPConflictReceiveCEVLAN.setDescription('This object indicates the CE VLAN of the received packet.')
hwEthernetARPIPConflictType = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 1, 28, 10), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwEthernetARPIPConflictType.setStatus('current')
if mibBuilder.loadTexts: hwEthernetARPIPConflictType.setDescription('This object indicates the conflict type.')
hwEthernetARPReceiveDstIPAddr = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 1, 28, 11), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwEthernetARPReceiveDstIPAddr.setStatus('current')
if mibBuilder.loadTexts: hwEthernetARPReceiveDstIPAddr.setDescription('This object indicates the destination IP address of the received packet.')
hwEthernetARPReceiveDstMAC = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 1, 28, 12), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwEthernetARPReceiveDstMAC.setStatus('current')
if mibBuilder.loadTexts: hwEthernetARPReceiveDstMAC.setDescription('This object indicates the destination MAC of the received packet.')
hwEthernetARPLearnStopTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 1, 29), )
if mibBuilder.loadTexts: hwEthernetARPLearnStopTable.setStatus('current')
if mibBuilder.loadTexts: hwEthernetARPLearnStopTable.setDescription('The value of the object identifies the parameters of ARP learning disable threshold. hwEthernetARPLearnStopSlot: indicates the slot. hwEthernetARPLearnStopThreshold: indicates the threshold usage of memory for learning ARP.')
hwEthernetARPLearnStopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 1, 29, 1), ).setIndexNames((0, "HUAWEI-ETHARP-MIB", "hwEthernetARPLearnStopSlot"))
if mibBuilder.loadTexts: hwEthernetARPLearnStopEntry.setStatus('current')
if mibBuilder.loadTexts: hwEthernetARPLearnStopEntry.setDescription('The value of the object identifies the parameters of of ARP learning disable threshold. hwEthernetARPLearnStopSlot: indicates the slot of the alarm generated. hwEthernetARPLearnStopThreshold: indicates the threshold usage of memory for learning ARP.')
hwEthernetARPLearnStopSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 1, 29, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwEthernetARPLearnStopSlot.setStatus('current')
if mibBuilder.loadTexts: hwEthernetARPLearnStopSlot.setDescription('This object indicates the the slot of the alarm generated.')
hwEthernetARPLearnStopThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 1, 29, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwEthernetARPLearnStopThreshold.setStatus('current')
if mibBuilder.loadTexts: hwEthernetARPLearnStopThreshold.setDescription('This object indicates the threshold usage of memory for learning ARP.')
hwArpStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 1, 30), )
if mibBuilder.loadTexts: hwArpStatisticsTable.setStatus('current')
if mibBuilder.loadTexts: hwArpStatisticsTable.setDescription('The table contains the arp information of the interfaces.')
hwArpStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 1, 30, 1), ).setIndexNames((0, "HUAWEI-ETHARP-MIB", "hwArpStatisticsSlot"), (0, "HUAWEI-ETHARP-MIB", "hwArpStatisticsType"))
if mibBuilder.loadTexts: hwArpStatisticsEntry.setStatus('current')
if mibBuilder.loadTexts: hwArpStatisticsEntry.setDescription('The entry contains the arp information of the interfaces.')
hwArpStatisticsSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 1, 30, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128)))
if mibBuilder.loadTexts: hwArpStatisticsSlot.setStatus('current')
if mibBuilder.loadTexts: hwArpStatisticsSlot.setDescription('The slot of ARP Statics Verbose.')
hwArpStatisticsType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 1, 30, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("phy", 1), ("ve", 2), ("ethTrunk", 3), ("vlanif", 4), ("phyQinq", 5), ("ethTrunkQinq", 6), ("veQinq", 7))))
if mibBuilder.loadTexts: hwArpStatisticsType.setStatus('current')
if mibBuilder.loadTexts: hwArpStatisticsType.setDescription('The Type of Interface Learn ARP.')
hwArpStatisticsLearnedCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 1, 30, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwArpStatisticsLearnedCount.setStatus('current')
if mibBuilder.loadTexts: hwArpStatisticsLearnedCount.setDescription('Number of ARP entries learned by this type of interfaces.')
hwArpStatisticsAvailableCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 1, 30, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwArpStatisticsAvailableCount.setStatus('current')
if mibBuilder.loadTexts: hwArpStatisticsAvailableCount.setDescription('The avaiable number of ARP entries of this type of interfaces.')
hwEthernetARPRemoteBackupFailObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 1, 31))
hwEthernetARPRemoteBackupFailMainIfName = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 1, 31, 1), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwEthernetARPRemoteBackupFailMainIfName.setStatus('current')
if mibBuilder.loadTexts: hwEthernetARPRemoteBackupFailMainIfName.setDescription('This object indicates that the interface name with the remote ARP entry backup failure.')
hwEthernetARPNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 2))
hwEthernetARPSpeedLimitAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 2, 1)).setObjects(("HUAWEI-ETHARP-MIB", "hwEthernetARPSpeedLimitIfIndex"), ("HUAWEI-ETHARP-MIB", "hwEthernetARPSpeedLimitConfigured"), ("HUAWEI-ETHARP-MIB", "hwEthernetARPSpeedLimitCurrent"), ("HUAWEI-ETHARP-MIB", "hwEthernetARPSpeedLimitType"), ("HUAWEI-ETHARP-MIB", "hwEthernetARPSpeedLimitSrcIPAddr"), ("HUAWEI-ETHARP-MIB", "hwEthernetARPSpeedLimitDstIPAddr"), ("HUAWEI-ETHARP-MIB", "hwEthernetARPSpeedLimitVPNinstance"))
if mibBuilder.loadTexts: hwEthernetARPSpeedLimitAlarm.setStatus('current')
if mibBuilder.loadTexts: hwEthernetARPSpeedLimitAlarm.setDescription('Trap information about ARP speed limit: interface index, current configured limit number, current received number, limit type (ARP, ARP-MISS), source IP address, destination IP address, VPN instance.')
hwEthernetARPAntiAttackAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 2, 2)).setObjects(("HUAWEI-ETHARP-MIB", "hwEthernetARPAntiAttackIpAddress"), ("HUAWEI-ETHARP-MIB", "hwEthernetARPAntiAttackMacAddress"), ("HUAWEI-ETHARP-MIB", "hwEthernetARPAntiAttackVlanId"), ("HUAWEI-ETHARP-MIB", "hwEthernetARPAntiAttackIfName"))
if mibBuilder.loadTexts: hwEthernetARPAntiAttackAlarm.setStatus('current')
if mibBuilder.loadTexts: hwEthernetARPAntiAttackAlarm.setDescription('Trap information about ARP anti-attack: IP address, MAC, VLAN id, interface index.')
hwEthernetARPAntiGatewayConflictAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 2, 3)).setObjects(("HUAWEI-ETHARP-MIB", "hwEthernetARPAntiGatewayConflictIpAddress"), ("HUAWEI-ETHARP-MIB", "hwEthernetARPAntiGatewayConflictMacAddress"), ("HUAWEI-ETHARP-MIB", "hwEthernetARPAntiGatewayConflictVlanId"), ("HUAWEI-ETHARP-MIB", "hwEthernetARPAntiGatewayConflictIfName"))
if mibBuilder.loadTexts: hwEthernetARPAntiGatewayConflictAlarm.setStatus('current')
if mibBuilder.loadTexts: hwEthernetARPAntiGatewayConflictAlarm.setDescription('Trap information about ARP anti-attack: IP address, MAC, VLAN ID, interface index.')
hwEthernetARPThresholdExceedAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 2, 4)).setObjects(("ENTITY-MIB", "entPhysicalName"), ("HUAWEI-ETHARP-MIB", "hwEthernetARPThresholdValue"), ("HUAWEI-ETHARP-MIB", "hwEthernetARPThresholdDynamicNumber"), ("HUAWEI-ETHARP-MIB", "hwEthernetARPThresholdStaticNumber"))
if mibBuilder.loadTexts: hwEthernetARPThresholdExceedAlarm.setStatus('current')
if mibBuilder.loadTexts: hwEthernetARPThresholdExceedAlarm.setDescription('Trap information about ARP exceed threshold: slot, threshold, number of dynamic ARP, number of static ARP.')
hwEthernetARPThresholdResumeAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 2, 5)).setObjects(("ENTITY-MIB", "entPhysicalName"), ("HUAWEI-ETHARP-MIB", "hwEthernetARPThresholdValue"), ("HUAWEI-ETHARP-MIB", "hwEthernetARPThresholdDynamicNumber"), ("HUAWEI-ETHARP-MIB", "hwEthernetARPThresholdStaticNumber"))
if mibBuilder.loadTexts: hwEthernetARPThresholdResumeAlarm.setStatus('current')
if mibBuilder.loadTexts: hwEthernetARPThresholdResumeAlarm.setDescription('Trap information about ARP resume threshold: slot, threshold, number of dynamic ARP, number of static ARP.')
hwEthernetARPIPConflictEvent = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 2, 6)).setObjects(("HUAWEI-ETHARP-MIB", "hwEthernetARPIPConflictIPAddress"), ("HUAWEI-ETHARP-MIB", "hwEthernetARPIPConflictLocalInterfaceName"), ("HUAWEI-ETHARP-MIB", "hwEthernetARPIPConflictLocalMAC"), ("HUAWEI-ETHARP-MIB", "hwEthernetARPIPConflictLocalVLAN"), ("HUAWEI-ETHARP-MIB", "hwEthernetARPIPConflictLocalCEVLAN"), ("HUAWEI-ETHARP-MIB", "hwEthernetARPIPConflictReceiveInterfaceName"), ("HUAWEI-ETHARP-MIB", "hwEthernetARPIPConflictReceiveMAC"), ("HUAWEI-ETHARP-MIB", "hwEthernetARPIPConflictReceiveVLAN"), ("HUAWEI-ETHARP-MIB", "hwEthernetARPIPConflictReceiveCEVLAN"), ("HUAWEI-ETHARP-MIB", "hwEthernetARPIPConflictType"))
if mibBuilder.loadTexts: hwEthernetARPIPConflictEvent.setStatus('current')
if mibBuilder.loadTexts: hwEthernetARPIPConflictEvent.setDescription('Trap information about ARP IP conflict.')
hwEthernetARPMACIPConflict = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 2, 7)).setObjects(("HUAWEI-ETHARP-MIB", "hwEthernetARPIPConflictLocalInterfaceName"), ("HUAWEI-ETHARP-MIB", "hwEthernetARPIPConflictReceiveMAC"), ("HUAWEI-ETHARP-MIB", "hwEthernetARPIPConflictIPAddress"), ("HUAWEI-ETHARP-MIB", "hwEthernetARPReceiveDstMAC"), ("HUAWEI-ETHARP-MIB", "hwEthernetARPReceiveDstIPAddr"), ("HUAWEI-ETHARP-MIB", "hwEthernetARPIPConflictReceiveVLAN"), ("HUAWEI-ETHARP-MIB", "hwEthernetARPIPConflictReceiveCEVLAN"), ("HUAWEI-ETHARP-MIB", "hwEthernetARPIPConflictReceiveInterfaceName"))
if mibBuilder.loadTexts: hwEthernetARPMACIPConflict.setStatus('current')
if mibBuilder.loadTexts: hwEthernetARPMACIPConflict.setDescription("Trap information about MAC and IP address conflict: conflict interface name, conflict MAC address, conflict IP address, and the received packet's destination MAC address, destination IP address, vlan, ce-vlan, receive interface.")
hwEthernetARPMACIPConflictResolved = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 2, 8)).setObjects(("HUAWEI-ETHARP-MIB", "hwEthernetARPIPConflictLocalInterfaceName"), ("HUAWEI-ETHARP-MIB", "hwEthernetARPIPConflictReceiveMAC"), ("HUAWEI-ETHARP-MIB", "hwEthernetARPIPConflictIPAddress"))
if mibBuilder.loadTexts: hwEthernetARPMACIPConflictResolved.setStatus('current')
if mibBuilder.loadTexts: hwEthernetARPMACIPConflictResolved.setDescription('Trap information about MAC and IP address conflict resolved: conflict interface name, conflict MAC address, conflict IP address.')
hwEthernetARPLearnStopAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 2, 9)).setObjects(("HUAWEI-ETHARP-MIB", "hwEthernetARPLearnStopSlot"), ("HUAWEI-ETHARP-MIB", "hwEthernetARPLearnStopThreshold"))
if mibBuilder.loadTexts: hwEthernetARPLearnStopAlarm.setStatus('current')
if mibBuilder.loadTexts: hwEthernetARPLearnStopAlarm.setDescription('Trap information about ARP learning disable: memory usage threshold.')
hwEthernetARPLearnResumeAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 2, 10)).setObjects(("HUAWEI-ETHARP-MIB", "hwEthernetARPLearnStopSlot"), ("HUAWEI-ETHARP-MIB", "hwEthernetARPLearnStopThreshold"))
if mibBuilder.loadTexts: hwEthernetARPLearnResumeAlarm.setStatus('current')
if mibBuilder.loadTexts: hwEthernetARPLearnResumeAlarm.setDescription('Trap information about ARP learning enable: memory usage threshold.')
hwEthernetARPRemoteBackupFailAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 2, 11)).setObjects(("HUAWEI-ETHARP-MIB", "hwEthernetARPRemoteBackupFailMainIfName"))
if mibBuilder.loadTexts: hwEthernetARPRemoteBackupFailAlarm.setStatus('current')
if mibBuilder.loadTexts: hwEthernetARPRemoteBackupFailAlarm.setDescription('Trap information about the remote ARP entry backup failure.')
hwEthernetARPRemoteBackupFailResumeAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 2, 12)).setObjects(("HUAWEI-ETHARP-MIB", "hwEthernetARPRemoteBackupFailMainIfName"))
if mibBuilder.loadTexts: hwEthernetARPRemoteBackupFailResumeAlarm.setStatus('current')
if mibBuilder.loadTexts: hwEthernetARPRemoteBackupFailResumeAlarm.setDescription('Trap clearing information when the backup device detects that ARP entries are successfully backed up within a period.')
hwEthernetARPConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 3))
hwEthernetARPGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 3, 1))
hwEthernetARPCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 3, 2))
hwEthernetARPStaticsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 3, 1, 1)).setObjects(("HUAWEI-ETHARP-MIB", "hwEthernetARPStaticsLearnTotal"), ("HUAWEI-ETHARP-MIB", "hwEthernetARPDropForLimit"), ("HUAWEI-ETHARP-MIB", "hwEthernetARPDropForARPSuppress"), ("HUAWEI-ETHARP-MIB", "hwEthernetARPDropForARPMissSuppress"), ("HUAWEI-ETHARP-MIB", "hwEthernetARPDropForOther"), ("HUAWEI-ETHARP-MIB", "hwEthernetARPMissDropForOther"), ("HUAWEI-ETHARP-MIB", "hwEthernetARPRcvNum"), ("HUAWEI-ETHARP-MIB", "hwEthernetARPMissRcvNum"), ("HUAWEI-ETHARP-MIB", "hwEthernetARPStaticsOperation"), ("HUAWEI-ETHARP-MIB", "hwEthernetARPDropForARPProxySuppress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwEthernetARPStaticsGroup = hwEthernetARPStaticsGroup.setStatus('current')
if mibBuilder.loadTexts: hwEthernetARPStaticsGroup.setDescription('A table contains the statistics about Ethernet ARP. The statistics include number of received ARP packets, number of received ARP-MISS packets, number of learned ARP packets, number of discarded ARP packets caused by the ARP limit, the number of discarded ARP-MISS packets caused by the limit and the number of discarded ARP and ARP-MISS packets caused by other reasons.')
hwEthernetARPSpeedLimitGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 3, 1, 2)).setObjects(("HUAWEI-ETHARP-MIB", "hwEthernetARPLimitSpeedValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwEthernetARPSpeedLimitGroup = hwEthernetARPSpeedLimitGroup.setStatus('current')
if mibBuilder.loadTexts: hwEthernetARPSpeedLimitGroup.setDescription('A Group table ,which contains the configuration information of Ethernet ARP Speed limit slot. The information includes type, speedvalue, sourceip and destip.')
hwEthARPShowWithInterAndVidGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 3, 1, 3)).setObjects(("HUAWEI-ETHARP-MIB", "hwEthARPMacAddr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwEthARPShowWithInterAndVidGroup = hwEthARPShowWithInterAndVidGroup.setStatus('current')
if mibBuilder.loadTexts: hwEthARPShowWithInterAndVidGroup.setDescription('Display the ARP table based on interface number or interface number and VLAN ID.')
hwEthARPLimitGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 3, 1, 4)).setObjects(("HUAWEI-ETHARP-MIB", "hwEthARPLimitNum"), ("HUAWEI-ETHARP-MIB", "hwEthARPLimitRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwEthARPLimitGroup = hwEthARPLimitGroup.setStatus('current')
if mibBuilder.loadTexts: hwEthARPLimitGroup.setDescription('config the arp limit on the interface with vlanid,limit num.')
hwEthernetARPBaseGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 3, 1, 5)).setObjects(("HUAWEI-ETHARP-MIB", "hwEthernetARPAntiAttackLog"), ("HUAWEI-ETHARP-MIB", "hwEthernetARPLearningStrict"), ("HUAWEI-ETHARP-MIB", "hwEthernetARPSpeedLimitIfIndex"), ("HUAWEI-ETHARP-MIB", "hwEthernetARPSpeedLimitConfigured"), ("HUAWEI-ETHARP-MIB", "hwEthernetARPSpeedLimitCurrent"), ("HUAWEI-ETHARP-MIB", "hwEthernetARPSpeedLimitType"), ("HUAWEI-ETHARP-MIB", "hwEthernetARPSpeedLimitSrcIPAddr"), ("HUAWEI-ETHARP-MIB", "hwEthernetARPSpeedLimitDstIPAddr"), ("HUAWEI-ETHARP-MIB", "hwEthernetARPSpeedLimitVPNinstance"), ("HUAWEI-ETHARP-MIB", "hwArpSecValidateSmac"), ("HUAWEI-ETHARP-MIB", "hwArpSecValidateDmac"), ("HUAWEI-ETHARP-MIB", "hwArpSecValidateRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwEthernetARPBaseGroup = hwEthernetARPBaseGroup.setStatus('current')
if mibBuilder.loadTexts: hwEthernetARPBaseGroup.setDescription('A collection of objects providing configuration or display.')
hwEthernetARPNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 3, 1, 6)).setObjects(("HUAWEI-ETHARP-MIB", "hwEthernetARPSpeedLimitAlarm"), ("HUAWEI-ETHARP-MIB", "hwEthernetARPAntiAttackAlarm"), ("HUAWEI-ETHARP-MIB", "hwEthernetARPAntiGatewayConflictAlarm"), ("HUAWEI-ETHARP-MIB", "hwEthernetARPThresholdExceedAlarm"), ("HUAWEI-ETHARP-MIB", "hwEthernetARPThresholdResumeAlarm"), ("HUAWEI-ETHARP-MIB", "hwEthernetARPIPConflictEvent"), ("HUAWEI-ETHARP-MIB", "hwEthernetARPMACIPConflict"), ("HUAWEI-ETHARP-MIB", "hwEthernetARPMACIPConflictResolved"), ("HUAWEI-ETHARP-MIB", "hwEthernetARPLearnStopAlarm"), ("HUAWEI-ETHARP-MIB", "hwEthernetARPLearnResumeAlarm"), ("HUAWEI-ETHARP-MIB", "hwEthernetARPRemoteBackupFailAlarm"), ("HUAWEI-ETHARP-MIB", "hwEthernetARPRemoteBackupFailResumeAlarm"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwEthernetARPNotificationsGroup = hwEthernetARPNotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: hwEthernetARPNotificationsGroup.setDescription('notification Group.')
hwEthernetARPLearningStrictInterfaceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 3, 1, 7)).setObjects(("HUAWEI-ETHARP-MIB", "hwEthernetARPLearningStrictState"), ("HUAWEI-ETHARP-MIB", "hwEthernetARPLearningStrictRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwEthernetARPLearningStrictInterfaceGroup = hwEthernetARPLearningStrictInterfaceGroup.setStatus('current')
if mibBuilder.loadTexts: hwEthernetARPLearningStrictInterfaceGroup.setDescription('ARP Learning Strict Interface Group.')
hwArpLinkInferaceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 3, 1, 8)).setObjects(("HUAWEI-ETHARP-MIB", "hwArpLinkPeerIp"), ("HUAWEI-ETHARP-MIB", "hwArpLinkDetectTime"), ("HUAWEI-ETHARP-MIB", "hwArpLinkDetectTimes"), ("HUAWEI-ETHARP-MIB", "hwArpLinkDetectMode"), ("HUAWEI-ETHARP-MIB", "hwArpLinkStatus"), ("HUAWEI-ETHARP-MIB", "hwArpLinkRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwArpLinkInferaceGroup = hwArpLinkInferaceGroup.setStatus('current')
if mibBuilder.loadTexts: hwArpLinkInferaceGroup.setDescription('A collection of objects providing configuration of ARP linking interface.')
hwArpEntryExpireControlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 3, 1, 9)).setObjects(("HUAWEI-ETHARP-MIB", "hwArpEntryExpireDetectMode"), ("HUAWEI-ETHARP-MIB", "hwArpEntryExpireFakeTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwArpEntryExpireControlGroup = hwArpEntryExpireControlGroup.setStatus('current')
if mibBuilder.loadTexts: hwArpEntryExpireControlGroup.setDescription('A collection of objects providing configuration of ARP Expire Parameter.')
hwArpAntiAttackGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 3, 1, 10)).setObjects(("HUAWEI-ETHARP-MIB", "hwEthernetARPAntiAttackStatus"), ("HUAWEI-ETHARP-MIB", "hwEthernetARPAntiGateWayConflict"), ("HUAWEI-ETHARP-MIB", "hwEthernetARPLogAndTrapTimer"), ("HUAWEI-ETHARP-MIB", "hwEthernetARPAntiAttackIpAddress"), ("HUAWEI-ETHARP-MIB", "hwEthernetARPAntiAttackMacAddress"), ("HUAWEI-ETHARP-MIB", "hwEthernetARPAntiAttackVlanId"), ("HUAWEI-ETHARP-MIB", "hwEthernetARPAntiAttackIfName"), ("HUAWEI-ETHARP-MIB", "hwEthernetARPAntiGatewayConflictIpAddress"), ("HUAWEI-ETHARP-MIB", "hwEthernetARPAntiGatewayConflictMacAddress"), ("HUAWEI-ETHARP-MIB", "hwEthernetARPAntiGatewayConflictVlanId"), ("HUAWEI-ETHARP-MIB", "hwEthernetARPAntiGatewayConflictIfName"), ("HUAWEI-ETHARP-MIB", "hwArpDynMacAdd"), ("HUAWEI-ETHARP-MIB", "hwArpDynVlanId"), ("HUAWEI-ETHARP-MIB", "hwArpDynCeVlanId"), ("HUAWEI-ETHARP-MIB", "hwArpDynOutIfIndex"), ("HUAWEI-ETHARP-MIB", "hwArpDynExpireTime"), ("HUAWEI-ETHARP-MIB", "hwArpCfgVlanId"), ("HUAWEI-ETHARP-MIB", "hwArpCfgCeVlanId"), ("HUAWEI-ETHARP-MIB", "hwArpCfgOutIfIndex"), ("HUAWEI-ETHARP-MIB", "hwArpCfgRowstatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwArpAntiAttackGroup = hwArpAntiAttackGroup.setStatus('current')
if mibBuilder.loadTexts: hwArpAntiAttackGroup.setDescription('A collection of objects providing lockuping ARP anti attack.')
hwEthernetARPThresholdGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 3, 1, 11)).setObjects(("HUAWEI-ETHARP-MIB", "hwEthernetARPThresholdValue"), ("HUAWEI-ETHARP-MIB", "hwEthernetARPThresholdDynamicNumber"), ("HUAWEI-ETHARP-MIB", "hwEthernetARPThresholdStaticNumber"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwEthernetARPThresholdGroup = hwEthernetARPThresholdGroup.setStatus('current')
if mibBuilder.loadTexts: hwEthernetARPThresholdGroup.setDescription('A collection of objects for ARP threshold alarm.')
hwETHARPIPConflictGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 3, 1, 12)).setObjects(("HUAWEI-ETHARP-MIB", "hwEthernetARPIPConflictIPAddress"), ("HUAWEI-ETHARP-MIB", "hwEthernetARPIPConflictLocalInterfaceName"), ("HUAWEI-ETHARP-MIB", "hwEthernetARPIPConflictLocalMAC"), ("HUAWEI-ETHARP-MIB", "hwEthernetARPIPConflictLocalVLAN"), ("HUAWEI-ETHARP-MIB", "hwEthernetARPIPConflictLocalCEVLAN"), ("HUAWEI-ETHARP-MIB", "hwEthernetARPIPConflictReceiveInterfaceName"), ("HUAWEI-ETHARP-MIB", "hwEthernetARPIPConflictReceiveMAC"), ("HUAWEI-ETHARP-MIB", "hwEthernetARPIPConflictReceiveVLAN"), ("HUAWEI-ETHARP-MIB", "hwEthernetARPIPConflictReceiveCEVLAN"), ("HUAWEI-ETHARP-MIB", "hwEthernetARPIPConflictType"), ("HUAWEI-ETHARP-MIB", "hwEthernetARPReceiveDstIPAddr"), ("HUAWEI-ETHARP-MIB", "hwEthernetARPReceiveDstMAC"), ("HUAWEI-ETHARP-MIB", "hwEthernetARPConflictDetect"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwETHARPIPConflictGroup = hwETHARPIPConflictGroup.setStatus('current')
if mibBuilder.loadTexts: hwETHARPIPConflictGroup.setDescription('A collection of objects for ARP conflict trap.')
hwEthernetARPLearnStopGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 3, 1, 13)).setObjects(("HUAWEI-ETHARP-MIB", "hwEthernetARPLearnStopSlot"), ("HUAWEI-ETHARP-MIB", "hwEthernetARPLearnStopThreshold"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwEthernetARPLearnStopGroup = hwEthernetARPLearnStopGroup.setStatus('current')
if mibBuilder.loadTexts: hwEthernetARPLearnStopGroup.setDescription('A collection of objects for ARP learning alarm.')
hwArpStatisticsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 3, 1, 14)).setObjects(("HUAWEI-ETHARP-MIB", "hwArpStatisticsSlot"), ("HUAWEI-ETHARP-MIB", "hwArpStatisticsType"), ("HUAWEI-ETHARP-MIB", "hwArpStatisticsLearnedCount"), ("HUAWEI-ETHARP-MIB", "hwArpStatisticsAvailableCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwArpStatisticsGroup = hwArpStatisticsGroup.setStatus('current')
if mibBuilder.loadTexts: hwArpStatisticsGroup.setDescription('A collection of objects for ARP statistics table.')
hwEthernetARPRemoteBackupFaidGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 3, 1, 15)).setObjects(("HUAWEI-ETHARP-MIB", "hwEthernetARPRemoteBackupFailMainIfName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwEthernetARPRemoteBackupFaidGroup = hwEthernetARPRemoteBackupFaidGroup.setStatus('current')
if mibBuilder.loadTexts: hwEthernetARPRemoteBackupFaidGroup.setDescription('A collection of objects for the remote ARP entry backup failure alarm.')
hwEthernetARPCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2011, 5, 25, 123, 3, 2, 1)).setObjects(("HUAWEI-ETHARP-MIB", "hwEthernetARPBaseGroup"), ("HUAWEI-ETHARP-MIB", "hwEthernetARPLearningStrictInterfaceGroup"), ("HUAWEI-ETHARP-MIB", "hwArpEntryExpireControlGroup"), ("HUAWEI-ETHARP-MIB", "hwArpAntiAttackGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwEthernetARPCompliance = hwEthernetARPCompliance.setStatus('current')
if mibBuilder.loadTexts: hwEthernetARPCompliance.setDescription('The compliance statement for arp Speedlimit and arp limit.')
mibBuilder.exportSymbols("HUAWEI-ETHARP-MIB", hwEthernetARPSpeedLimitEntry=hwEthernetARPSpeedLimitEntry, hwEthernetARPLogAndTrapTimer=hwEthernetARPLogAndTrapTimer, hwEthernetARPIPConflictReceiveVLAN=hwEthernetARPIPConflictReceiveVLAN, hwEthernetARPStaticsLearnTotal=hwEthernetARPStaticsLearnTotal, hwArpStatisticsSlot=hwArpStatisticsSlot, hwEthernetARPConflictDetect=hwEthernetARPConflictDetect, hwEthernetARPLearnResumeAlarm=hwEthernetARPLearnResumeAlarm, hwEthernetARPMissDropForOther=hwEthernetARPMissDropForOther, hwEthARPShowWithInterAndVidGroup=hwEthARPShowWithInterAndVidGroup, hwEthernetARPRemoteBackupFailObjects=hwEthernetARPRemoteBackupFailObjects, hwEthernetARPIPConflictLocalInterfaceName=hwEthernetARPIPConflictLocalInterfaceName, hwARPArpGratuitousSendInterval=hwARPArpGratuitousSendInterval, hwEthARPLimitTable=hwEthARPLimitTable, hwEthernetARPAntiAttackAlarm=hwEthernetARPAntiAttackAlarm, hwArpSecValidateDmac=hwArpSecValidateDmac, hwEthernetARPMACIPConflict=hwEthernetARPMACIPConflict, hwEthernetARPIPConflictReceiveMAC=hwEthernetARPIPConflictReceiveMAC, hwEthernetARPThresholdResumeAlarm=hwEthernetARPThresholdResumeAlarm, hwEthernetARPStaticsGroup=hwEthernetARPStaticsGroup, hwEthernetARPSpeedLimitVPNinstance=hwEthernetARPSpeedLimitVPNinstance, hwArpCfgVlanId=hwArpCfgVlanId, hwArpEntryExpireControlGroup=hwArpEntryExpireControlGroup, hwArpEntryExpireIfIndex=hwArpEntryExpireIfIndex, hwArpAntiAttackGroup=hwArpAntiAttackGroup, hwEthARPShowWithInterAndVidTable=hwEthARPShowWithInterAndVidTable, hwEthernetARPAntiAttackVlanId=hwEthernetARPAntiAttackVlanId, hwEthernetARPAntiGatewayConflictVlanId=hwEthernetARPAntiGatewayConflictVlanId, hwEthernetARPAntiAttackMacAddress=hwEthernetARPAntiAttackMacAddress, hwArpSecValidateEntry=hwArpSecValidateEntry, hwArpCfgMacAdd=hwArpCfgMacAdd, hwARPGratuitousSendTable=hwARPGratuitousSendTable, hwEthernetARPLimitType=hwEthernetARPLimitType, hwEthernetARPStaticsOperation=hwEthernetARPStaticsOperation, hwArpDynEntry=hwArpDynEntry, hwEthernetARPRcvNum=hwEthernetARPRcvNum, hwArpCfgOutIfIndex=hwArpCfgOutIfIndex, hwEthernetARPThresholdExceedAlarm=hwEthernetARPThresholdExceedAlarm, hwEthernetARPNotificationsGroup=hwEthernetARPNotificationsGroup, hwEthernetARPLimitSpeedValue=hwEthernetARPLimitSpeedValue, hwEthernetARPDropForLimit=hwEthernetARPDropForLimit, hwEthARPLimitEntry=hwEthARPLimitEntry, hwEthernetARPIPConflictType=hwEthernetARPIPConflictType, hwArpLinkInferaceGroup=hwArpLinkInferaceGroup, hwETHARPIPConflictGroup=hwETHARPIPConflictGroup, hwArpDynOutIfIndex=hwArpDynOutIfIndex, hwEthARPShowIfindex=hwEthARPShowIfindex, hwArpEntryExpireDetectMode=hwArpEntryExpireDetectMode, hwEthernetARPMIB=hwEthernetARPMIB, hwArpDynMacAdd=hwArpDynMacAdd, hwEthernetARPThresholdDynamicNumber=hwEthernetARPThresholdDynamicNumber, hwArpDynExpireTime=hwArpDynExpireTime, hwEthernetARPThresholdStaticNumber=hwEthernetARPThresholdStaticNumber, hwEthernetARPIPConflictLocalMAC=hwEthernetARPIPConflictLocalMAC, hwARPGratuitousSendIfIndex=hwARPGratuitousSendIfIndex, hwEthernetARPThresholdObjects=hwEthernetARPThresholdObjects, hwEthernetARPAntiGatewayConflictIndex=hwEthernetARPAntiGatewayConflictIndex, hwArpLinkPeerIp=hwArpLinkPeerIp, hwETHARPIPConflictObjects=hwETHARPIPConflictObjects, hwEthernetARPRemoteBackupFailMainIfName=hwEthernetARPRemoteBackupFailMainIfName, hwEthARPVLANFirst=hwEthARPVLANFirst, hwEthernetARPGroups=hwEthernetARPGroups, hwEthernetARPSpeedLimitType=hwEthernetARPSpeedLimitType, hwEthernetARPIPConflictReceiveInterfaceName=hwEthernetARPIPConflictReceiveInterfaceName, hwEthernetARPDropForARPProxySuppress=hwEthernetARPDropForARPProxySuppress, hwArpStatisticsLearnedCount=hwArpStatisticsLearnedCount, hwArpDynIpAdd=hwArpDynIpAdd, hwArpSecValidateTable=hwArpSecValidateTable, hwEthernetARPReceiveDstIPAddr=hwEthernetARPReceiveDstIPAddr, hwEthernetARPLearningStrictRowStatus=hwEthernetARPLearningStrictRowStatus, hwArpLinkRowStatus=hwArpLinkRowStatus, hwEthernetARPMACIPConflictResolved=hwEthernetARPMACIPConflictResolved, hwEthARPShowWithInterAndVidEntry=hwEthARPShowWithInterAndVidEntry, hwEthernetARPReceiveDstMAC=hwEthernetARPReceiveDstMAC, hwArpCfgEntry=hwArpCfgEntry, hwEthernetARPAntiGatewayConflictMacAddress=hwEthernetARPAntiGatewayConflictMacAddress, hwArpSecValidateSmac=hwArpSecValidateSmac, hwEthernetARPDropForARPMissSuppress=hwEthernetARPDropForARPMissSuppress, hwEthernetARPNotifications=hwEthernetARPNotifications, hwEthernetARPAntiAttackLog=hwEthernetARPAntiAttackLog, hwEthernetARPLearnStopGroup=hwEthernetARPLearnStopGroup, hwEthernetARPLearnStopEntry=hwEthernetARPLearnStopEntry, hwEthernetARPLearningStrictInterfaceTable=hwEthernetARPLearningStrictInterfaceTable, hwEthernetARPConformance=hwEthernetARPConformance, hwEthernetARPLearnStopThreshold=hwEthernetARPLearnStopThreshold, hwEthernetARPIPConflictLocalCEVLAN=hwEthernetARPIPConflictLocalCEVLAN, hwArpEntryExpireControlTable=hwArpEntryExpireControlTable, hwEthernetARPSpeedLimitCurrent=hwEthernetARPSpeedLimitCurrent, hwArpCfgIpAdd=hwArpCfgIpAdd, hwEthernetARPAntiAttackIpAddress=hwEthernetARPAntiAttackIpAddress, hwArpLinkIfIndex=hwArpLinkIfIndex, hwEthARPLimitCfgIfindex=hwEthARPLimitCfgIfindex, hwEthernetARPObjects=hwEthernetARPObjects, hwEthernetARPIPConflictLocalVLAN=hwEthernetARPIPConflictLocalVLAN, hwEthARPMacAddr=hwEthARPMacAddr, hwEthernetARPIPConflictIPAddress=hwEthernetARPIPConflictIPAddress, hwArpLinkDetectMode=hwArpLinkDetectMode, hwEthernetARPLearnStopAlarm=hwEthernetARPLearnStopAlarm, hwEthernetARPCompliances=hwEthernetARPCompliances, hwEthernetARPThresholdValue=hwEthernetARPThresholdValue, hwEthernetARPLearnStopSlot=hwEthernetARPLearnStopSlot, hwEthernetARPAntiAttackObjects=hwEthernetARPAntiAttackObjects, hwArpDynVrf=hwArpDynVrf, hwEthARPLimitNum=hwEthARPLimitNum, hwArpLinkDetectTimes=hwArpLinkDetectTimes, hwEthernetARPStaticsTable=hwEthernetARPStaticsTable, hwEthernetARPSpeedLimitGroup=hwEthernetARPSpeedLimitGroup, hwArpDynTable=hwArpDynTable, hwEthernetARPThresholdGroup=hwEthernetARPThresholdGroup, hwArpStatisticsTable=hwArpStatisticsTable, hwArpLinkDetectTime=hwArpLinkDetectTime, hwArpCfgVrf=hwArpCfgVrf, hwEthernetARPLimitSlot=hwEthernetARPLimitSlot, hwARPGratuitousSendEnable=hwARPGratuitousSendEnable, hwEthernetARPSpeedLimitIfIndex=hwEthernetARPSpeedLimitIfIndex, hwArpLinkInterfaceEntry=hwArpLinkInterfaceEntry, hwEthernetARPAntiGatewayConflictAlarm=hwEthernetARPAntiGatewayConflictAlarm, hwEthernetARPLimitIPType=hwEthernetARPLimitIPType, hwEthernetARPSpeedLimitConfigured=hwEthernetARPSpeedLimitConfigured, hwArpStatisticsGroup=hwArpStatisticsGroup, PYSNMP_MODULE_ID=hwEthernetARPMIB, hwArpStatisticsEntry=hwArpStatisticsEntry, hwArpStatisticsAvailableCount=hwArpStatisticsAvailableCount, hwEthernetARPAntiAttackStatus=hwEthernetARPAntiAttackStatus, hwArpStatisticsType=hwArpStatisticsType, hwEthARPIpAddr=hwEthARPIpAddr, hwEthernetARPCompliance=hwEthernetARPCompliance, hwEthernetARPLearnStopTable=hwEthernetARPLearnStopTable, hwArpEntryExpireControlEntry=hwArpEntryExpireControlEntry, hwArpEntryGatewayConflictEntry=hwArpEntryGatewayConflictEntry, hwEthernetARPAntiGatewayConflictIfName=hwEthernetARPAntiGatewayConflictIfName, hwArpCfgTable=hwArpCfgTable, hwEthernetARPDropForOther=hwEthernetARPDropForOther, hwEthARPVLANLast=hwEthARPVLANLast, hwEthernetARPStaticsSlot=hwEthernetARPStaticsSlot, hwArpLinkStatus=hwArpLinkStatus, hwArpDynVlanId=hwArpDynVlanId, hwEthernetARPLearningStrictIfindex=hwEthernetARPLearningStrictIfindex, hwArpCfgCeVlanId=hwArpCfgCeVlanId, hwEthARPLimitGroup=hwEthARPLimitGroup, hwEthernetARPSpeedLimitAlarm=hwEthernetARPSpeedLimitAlarm, hwEthernetARPSpeedLimitDstIPAddr=hwEthernetARPSpeedLimitDstIPAddr, hwEthernetARPLearningStrictInterfaceGroup=hwEthernetARPLearningStrictInterfaceGroup, hwEthernetARPSpeedLimitSrcIPAddr=hwEthernetARPSpeedLimitSrcIPAddr, hwArpEntryGatewayConflictTable=hwArpEntryGatewayConflictTable, hwEthernetARPIPConflictReceiveCEVLAN=hwEthernetARPIPConflictReceiveCEVLAN, hwEthernetARPLearningStrictState=hwEthernetARPLearningStrictState, hwArpLinkInterfaceTable=hwArpLinkInterfaceTable, hwEthernetARPSpeedLimitTable=hwEthernetARPSpeedLimitTable, hwEthARPLimitRowStatus=hwEthARPLimitRowStatus, hwArpCfgRowstatus=hwArpCfgRowstatus, hwEthernetARPStaticsEntry=hwEthernetARPStaticsEntry, hwEthernetARPRemoteBackupFailResumeAlarm=hwEthernetARPRemoteBackupFailResumeAlarm, hwEthernetARPBaseGroup=hwEthernetARPBaseGroup, hwArpDynIfIndex=hwArpDynIfIndex, hwARPGratuitousSendEntry=hwARPGratuitousSendEntry, hwEthernetARPMissRcvNum=hwEthernetARPMissRcvNum, hwEthernetARPAntiAttackIfName=hwEthernetARPAntiAttackIfName, hwEthernetARPLearningStrict=hwEthernetARPLearningStrict, hwEthernetARPAntiGatewayConflictIpAddress=hwEthernetARPAntiGatewayConflictIpAddress, hwEthernetARPAntiGateWayConflict=hwEthernetARPAntiGateWayConflict, hwEthernetARPRemoteBackupFailAlarm=hwEthernetARPRemoteBackupFailAlarm, hwArpSecValidateIfIndex=hwArpSecValidateIfIndex, hwEthernetARPRemoteBackupFaidGroup=hwEthernetARPRemoteBackupFaidGroup, hwEthernetARPDropForARPSuppress=hwEthernetARPDropForARPSuppress, hwEthernetARPIPConflictEvent=hwEthernetARPIPConflictEvent, hwArpEntryExpireFakeTime=hwArpEntryExpireFakeTime, hwArpSecValidateRowStatus=hwArpSecValidateRowStatus, hwEthARPShowVid=hwEthARPShowVid, hwEthernetARPLearningStrictInterfaceEntry=hwEthernetARPLearningStrictInterfaceEntry, hwArpDynCeVlanId=hwArpDynCeVlanId)
