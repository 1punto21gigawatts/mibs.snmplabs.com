#
# PySNMP MIB module ECPPP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ECPPP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:59:15 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, ObjectIdentity, NotificationType, MibIdentifier, ModuleIdentity, IpAddress, Integer32, TimeTicks, enterprises, Unsigned32, Counter64, Gauge32, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "ObjectIdentity", "NotificationType", "MibIdentifier", "ModuleIdentity", "IpAddress", "Integer32", "TimeTicks", "enterprises", "Unsigned32", "Counter64", "Gauge32", "iso")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
eicon = MibIdentifier((1, 3, 6, 1, 4, 1, 434))
management = MibIdentifier((1, 3, 6, 1, 4, 1, 434, 2))
mibv2 = MibIdentifier((1, 3, 6, 1, 4, 1, 434, 2, 2))
module = MibIdentifier((1, 3, 6, 1, 4, 1, 434, 2, 2, 4))
class PortRef(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 48)

class PppState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("closed", 1), ("opening", 2), ("negotiating", 3), ("opened", 4), ("closing", 5), ("other", 6))

class NcpState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))
    namedValues = NamedValues(("initial", 1), ("starting", 2), ("closed", 3), ("stopped", 4), ("closing", 5), ("stopping", 6), ("req-sent", 7), ("ack-rcvd", 8), ("ack-sent", 9), ("opened", 10), ("other", 11))

ecppp = MibIdentifier((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23))
ecpppStatusTable = MibTable((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 1), )
if mibBuilder.loadTexts: ecpppStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: ecpppStatusTable.setDescription('A table containing PPP-link global info')
ecpppStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 1, 1), ).setIndexNames((0, "ECPPP-MIB", "ecpppStatusPortRef"))
if mibBuilder.loadTexts: ecpppStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ecpppStatusEntry.setDescription('Global information about a particular PPP Link.')
ecpppStatusPortRef = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 1, 1, 1), PortRef()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppStatusPortRef.setStatus('mandatory')
if mibBuilder.loadTexts: ecpppStatusPortRef.setDescription('The id of the port on which the parameters in the table are configured')
ecpppStatusState = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 1, 1, 2), PppState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppStatusState.setStatus('mandatory')
if mibBuilder.loadTexts: ecpppStatusState.setDescription('The state of the ppp connection')
ecpppStatusAuthentProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("pap", 1), ("chap", 2), ("other", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppStatusAuthentProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: ecpppStatusAuthentProtocol.setDescription('Authentication protocol used')
ecpppStatusQualityProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("lqr", 1), ("other", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppStatusQualityProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: ecpppStatusQualityProtocol.setDescription('Link quality protocol used ')
ecpppStatusNegotiatedPktSize = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppStatusNegotiatedPktSize.setStatus('mandatory')
if mibBuilder.loadTexts: ecpppStatusNegotiatedPktSize.setDescription('Packet size negotiated.')
ecpppStatusWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppStatusWindowSize.setStatus('mandatory')
if mibBuilder.loadTexts: ecpppStatusWindowSize.setDescription(' ')
ecpppStatusProtocolCompr = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppStatusProtocolCompr.setStatus('mandatory')
if mibBuilder.loadTexts: ecpppStatusProtocolCompr.setDescription('Protocol Compression')
ecpppStatusAddrCtrlCompr = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppStatusAddrCtrlCompr.setStatus('mandatory')
if mibBuilder.loadTexts: ecpppStatusAddrCtrlCompr.setDescription('Address and Control field Compression.')
ecpppStatusRestartTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppStatusRestartTimer.setStatus('mandatory')
if mibBuilder.loadTexts: ecpppStatusRestartTimer.setDescription('Timeout retransmission')
ecpppStatusMaxPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppStatusMaxPacketSize.setStatus('mandatory')
if mibBuilder.loadTexts: ecpppStatusMaxPacketSize.setDescription('Maximum configured')
ecpppStatusMaxTerminate = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppStatusMaxTerminate.setStatus('mandatory')
if mibBuilder.loadTexts: ecpppStatusMaxTerminate.setDescription('Maximum Terminate Retransmission')
ecpppStatusMaxConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppStatusMaxConfig.setStatus('mandatory')
if mibBuilder.loadTexts: ecpppStatusMaxConfig.setDescription('Maximum Configure Retransmission')
ecpppStatusMaxFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppStatusMaxFailure.setStatus('mandatory')
if mibBuilder.loadTexts: ecpppStatusMaxFailure.setDescription(' ')
ecpppStatusNcpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppStatusNcpMask.setStatus('mandatory')
if mibBuilder.loadTexts: ecpppStatusNcpMask.setDescription('The bitmask value, 1 = IP, 2 = IPX, 4 = AT.')
ecpppStatsTable = MibTable((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 2), )
if mibBuilder.loadTexts: ecpppStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: ecpppStatsTable.setDescription('A table containing PPP-link specific variables for this PPP implementation.')
ecpppStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 2, 1), ).setIndexNames((0, "ECPPP-MIB", "ecpppStatsPortRef"))
if mibBuilder.loadTexts: ecpppStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ecpppStatsEntry.setDescription('Management information about a particular PPP Link.')
ecpppStatsPortRef = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 2, 1, 1), PortRef()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppStatsPortRef.setStatus('mandatory')
if mibBuilder.loadTexts: ecpppStatsPortRef.setDescription('The id of the port on which the parameters in the table are configured')
ecpppStatsLcpReqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppStatsLcpReqTx.setStatus('mandatory')
if mibBuilder.loadTexts: ecpppStatsLcpReqTx.setDescription('Number of LCP Configure-Request sent')
ecpppStatsLcpReqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppStatsLcpReqRx.setStatus('mandatory')
if mibBuilder.loadTexts: ecpppStatsLcpReqRx.setDescription('Number of LCP Configure-Request received')
ecpppStatsLcpAckTx = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppStatsLcpAckTx.setStatus('mandatory')
if mibBuilder.loadTexts: ecpppStatsLcpAckTx.setDescription('Number of LCP Configure-Ack sent ')
ecpppStatsLcpAckRx = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppStatsLcpAckRx.setStatus('mandatory')
if mibBuilder.loadTexts: ecpppStatsLcpAckRx.setDescription('Number of LCP Configure-Ack received')
ecpppStatsLcpNakTx = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppStatsLcpNakTx.setStatus('mandatory')
if mibBuilder.loadTexts: ecpppStatsLcpNakTx.setDescription('Number of LCP Configure-Nak sent ')
ecpppStatsLcpNakRx = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppStatsLcpNakRx.setStatus('mandatory')
if mibBuilder.loadTexts: ecpppStatsLcpNakRx.setDescription('Number of LCP Configure-Nak received ')
ecpppStatsLcpRejTx = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppStatsLcpRejTx.setStatus('mandatory')
if mibBuilder.loadTexts: ecpppStatsLcpRejTx.setDescription('Number of LCP Configure-Reject sent')
ecpppStatsLcpRejRx = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppStatsLcpRejRx.setStatus('mandatory')
if mibBuilder.loadTexts: ecpppStatsLcpRejRx.setDescription('Number of LCP Configure-Reject received')
ecpppStatsLcpCodeRejTx = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppStatsLcpCodeRejTx.setStatus('mandatory')
if mibBuilder.loadTexts: ecpppStatsLcpCodeRejTx.setDescription('Number of LCP Code-Reject sent')
ecpppStatsLcpCodeRejRx = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppStatsLcpCodeRejRx.setStatus('mandatory')
if mibBuilder.loadTexts: ecpppStatsLcpCodeRejRx.setDescription('Number of LCP Code-Reject received')
ecpppStatsLcpProRejTx = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppStatsLcpProRejTx.setStatus('mandatory')
if mibBuilder.loadTexts: ecpppStatsLcpProRejTx.setDescription('Number of Protocol-Reject sent ')
ecpppStatsLcpProRejRx = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppStatsLcpProRejRx.setStatus('mandatory')
if mibBuilder.loadTexts: ecpppStatsLcpProRejRx.setDescription('Number of Protocol-Reject received')
ecpppStatsLcpEchoReqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppStatsLcpEchoReqTx.setStatus('mandatory')
if mibBuilder.loadTexts: ecpppStatsLcpEchoReqTx.setDescription('Number of Echo-Request sent ')
ecpppStatsLcpEchoReqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppStatsLcpEchoReqRx.setStatus('mandatory')
if mibBuilder.loadTexts: ecpppStatsLcpEchoReqRx.setDescription('Number of Echo-Request received')
ecpppStatsLcpEchoReplyTx = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppStatsLcpEchoReplyTx.setStatus('mandatory')
if mibBuilder.loadTexts: ecpppStatsLcpEchoReplyTx.setDescription('Number of Echo-Reply sent ')
ecpppStatsLcpEchoReplyRx = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppStatsLcpEchoReplyRx.setStatus('mandatory')
if mibBuilder.loadTexts: ecpppStatsLcpEchoReplyRx.setDescription('Number of Echo-Reply received')
ecpppStatsLcpRestartTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppStatsLcpRestartTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: ecpppStatsLcpRestartTimeout.setDescription('Number of restart timer time-out')
ecpppStatsLcpTermRetrans = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppStatsLcpTermRetrans.setStatus('mandatory')
if mibBuilder.loadTexts: ecpppStatsLcpTermRetrans.setDescription('Number of LCP terminate request retransmissions.')
ecpppStatsLcpConfRetrans = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppStatsLcpConfRetrans.setStatus('mandatory')
if mibBuilder.loadTexts: ecpppStatsLcpConfRetrans.setDescription('Number of LCP configure request retransmissions.')
ecpppStatsFrameTx = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppStatsFrameTx.setStatus('mandatory')
if mibBuilder.loadTexts: ecpppStatsFrameTx.setDescription(' Number of information frames sent')
ecpppStatsFrameRx = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppStatsFrameRx.setStatus('mandatory')
if mibBuilder.loadTexts: ecpppStatsFrameRx.setDescription(' Number of information frames received')
ecpppStatsCharTx = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 2, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppStatsCharTx.setStatus('mandatory')
if mibBuilder.loadTexts: ecpppStatsCharTx.setDescription('Number of information characters sent')
ecpppStatsCharRx = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 2, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppStatsCharRx.setStatus('mandatory')
if mibBuilder.loadTexts: ecpppStatsCharRx.setDescription('Number of information characters received ')
ecpppIPInfoTable = MibTable((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 3), )
if mibBuilder.loadTexts: ecpppIPInfoTable.setStatus('mandatory')
if mibBuilder.loadTexts: ecpppIPInfoTable.setDescription('A table for PPP IP Protocol Info')
ecpppIPInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 3, 1), ).setIndexNames((0, "ECPPP-MIB", "ecpppIPInfoPortRef"))
if mibBuilder.loadTexts: ecpppIPInfoEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ecpppIPInfoEntry.setDescription('Management information about a particular PPP Link.')
ecpppIPInfoPortRef = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 3, 1, 1), PortRef()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppIPInfoPortRef.setStatus('mandatory')
if mibBuilder.loadTexts: ecpppIPInfoPortRef.setDescription('The id of the port on which the parameters in the table are configured')
ecpppIPInfoNcpState = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 3, 1, 2), NcpState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppIPInfoNcpState.setStatus('mandatory')
if mibBuilder.loadTexts: ecpppIPInfoNcpState.setDescription('State during NCP phase')
ecpppIPInfoIPComprProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("vj-tcp", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppIPInfoIPComprProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: ecpppIPInfoIPComprProtocol.setDescription('Compression protocol ')
ecpppIPInfoIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 3, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppIPInfoIPAddr.setStatus('mandatory')
if mibBuilder.loadTexts: ecpppIPInfoIPAddr.setDescription('IP Address ')
ecpppIPInfoIPcpMaxTerm = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppIPInfoIPcpMaxTerm.setStatus('mandatory')
if mibBuilder.loadTexts: ecpppIPInfoIPcpMaxTerm.setDescription('Max. terminate retransmission ')
ecpppIPInfoIPcpMaxConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppIPInfoIPcpMaxConfig.setStatus('mandatory')
if mibBuilder.loadTexts: ecpppIPInfoIPcpMaxConfig.setDescription('Max. configure retransmission')
ecpppIPInfoIPcpMaxFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppIPInfoIPcpMaxFailure.setStatus('mandatory')
if mibBuilder.loadTexts: ecpppIPInfoIPcpMaxFailure.setDescription('max config_nak retransmission ')
ecpppIPStatsTable = MibTable((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 4), )
if mibBuilder.loadTexts: ecpppIPStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: ecpppIPStatsTable.setDescription('A table for PPP IP Protocol Stats')
ecpppIPStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 4, 1), ).setIndexNames((0, "ECPPP-MIB", "ecpppIPStatsPortRef"))
if mibBuilder.loadTexts: ecpppIPStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ecpppIPStatsEntry.setDescription('Management information about a particular PPP Link.')
ecpppIPStatsPortRef = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 4, 1, 1), PortRef()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppIPStatsPortRef.setStatus('mandatory')
if mibBuilder.loadTexts: ecpppIPStatsPortRef.setDescription('The id of the port on which the parameters in the table are configured')
ecpppIPStatsDatagramsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppIPStatsDatagramsTx.setStatus('mandatory')
if mibBuilder.loadTexts: ecpppIPStatsDatagramsTx.setDescription('Number of datagrams sent ')
ecpppIPStatsDatagramsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppIPStatsDatagramsRx.setStatus('mandatory')
if mibBuilder.loadTexts: ecpppIPStatsDatagramsRx.setDescription('Number of datagrams received')
ecpppIPStatsCharTx = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppIPStatsCharTx.setStatus('mandatory')
if mibBuilder.loadTexts: ecpppIPStatsCharTx.setDescription(' Number of characters sent ')
ecpppIPStatsCharRx = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppIPStatsCharRx.setStatus('mandatory')
if mibBuilder.loadTexts: ecpppIPStatsCharRx.setDescription('Number of characters received ')
ecpppIPStatsNcpRestartTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppIPStatsNcpRestartTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: ecpppIPStatsNcpRestartTimeout.setDescription('Number of NCP restart timer time-out')
ecpppIPStatsNcpTermRetrans = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppIPStatsNcpTermRetrans.setStatus('mandatory')
if mibBuilder.loadTexts: ecpppIPStatsNcpTermRetrans.setDescription('Number of NCP terminate request retransmissions.')
ecpppIPStatsNcpReqRetrans = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppIPStatsNcpReqRetrans.setStatus('mandatory')
if mibBuilder.loadTexts: ecpppIPStatsNcpReqRetrans.setDescription('Number of NCP configure request retransmissions.')
ecpppIPXInfoTable = MibTable((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 5), )
if mibBuilder.loadTexts: ecpppIPXInfoTable.setStatus('mandatory')
if mibBuilder.loadTexts: ecpppIPXInfoTable.setDescription('A table for PPP IPX Protocol Info.')
ecpppIPXInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 5, 1), ).setIndexNames((0, "ECPPP-MIB", "ecpppIPXInfoPortRef"))
if mibBuilder.loadTexts: ecpppIPXInfoEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ecpppIPXInfoEntry.setDescription('Management information about a particular PPP Link.')
ecpppIPXInfoPortRef = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 5, 1, 1), PortRef()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppIPXInfoPortRef.setStatus('mandatory')
if mibBuilder.loadTexts: ecpppIPXInfoPortRef.setDescription('The id of the port on which the parameters in the table are configured')
ecpppIPXInfoNcpState = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 5, 1, 2), NcpState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppIPXInfoNcpState.setStatus('mandatory')
if mibBuilder.loadTexts: ecpppIPXInfoNcpState.setDescription('State during NCP phase ')
ecpppIPXInfoIPXcpMaxTerm = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppIPXInfoIPXcpMaxTerm.setStatus('mandatory')
if mibBuilder.loadTexts: ecpppIPXInfoIPXcpMaxTerm.setDescription('Max. terminate retransmission ')
ecpppIPXInfoIPXcpMaxConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppIPXInfoIPXcpMaxConfig.setStatus('mandatory')
if mibBuilder.loadTexts: ecpppIPXInfoIPXcpMaxConfig.setDescription('Max. configure retransmission ')
ecpppIPXInfoIPXcpMaxFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppIPXInfoIPXcpMaxFailure.setStatus('mandatory')
if mibBuilder.loadTexts: ecpppIPXInfoIPXcpMaxFailure.setDescription('Max config_nak retransmission ')
ecpppIPXStatsTable = MibTable((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 6), )
if mibBuilder.loadTexts: ecpppIPXStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: ecpppIPXStatsTable.setDescription('A table for PPP IP Protocol Stats.')
ecpppIPXStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 6, 1), ).setIndexNames((0, "ECPPP-MIB", "ecpppIPXStatsPortRef"))
if mibBuilder.loadTexts: ecpppIPXStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ecpppIPXStatsEntry.setDescription('Management information about a particular PPP Link.')
ecpppIPXStatsPortRef = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 6, 1, 1), PortRef()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppIPXStatsPortRef.setStatus('mandatory')
if mibBuilder.loadTexts: ecpppIPXStatsPortRef.setDescription('The id of the port on which the parameters in the table are configured.')
ecpppIPXStatsDatagramsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 6, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppIPXStatsDatagramsTx.setStatus('mandatory')
if mibBuilder.loadTexts: ecpppIPXStatsDatagramsTx.setDescription(' Number of datagrams sent')
ecpppIPXStatsDatagramsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 6, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppIPXStatsDatagramsRx.setStatus('mandatory')
if mibBuilder.loadTexts: ecpppIPXStatsDatagramsRx.setDescription(' Number of datagrams received ')
ecpppIPXStatsCharTx = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppIPXStatsCharTx.setStatus('mandatory')
if mibBuilder.loadTexts: ecpppIPXStatsCharTx.setDescription(' Number of characters sent ')
ecpppIPXStatsCharRx = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 6, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppIPXStatsCharRx.setStatus('mandatory')
if mibBuilder.loadTexts: ecpppIPXStatsCharRx.setDescription('Number of characters received')
ecpppIPXStatsNcpRestartTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 6, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppIPXStatsNcpRestartTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: ecpppIPXStatsNcpRestartTimeout.setDescription('Number of NCP restart timer time-out')
ecpppIPXStatsNcpTermRetrans = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 6, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppIPXStatsNcpTermRetrans.setStatus('mandatory')
if mibBuilder.loadTexts: ecpppIPXStatsNcpTermRetrans.setDescription('Number of NCP terminate request retransmissions.')
ecpppIPXStatsNcpReqRetrans = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 6, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppIPXStatsNcpReqRetrans.setStatus('mandatory')
if mibBuilder.loadTexts: ecpppIPXStatsNcpReqRetrans.setDescription('Number of NCP configure request retransmissions.')
ecpppATInfoTable = MibTable((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 7), )
if mibBuilder.loadTexts: ecpppATInfoTable.setStatus('mandatory')
if mibBuilder.loadTexts: ecpppATInfoTable.setDescription('A table for PPP AT Protocol Info')
ecpppATInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 7, 1), ).setIndexNames((0, "ECPPP-MIB", "ecpppATInfoPortRef"))
if mibBuilder.loadTexts: ecpppATInfoEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ecpppATInfoEntry.setDescription('Management information about a particular PPP Link.')
ecpppATInfoPortRef = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 7, 1, 1), PortRef()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppATInfoPortRef.setStatus('mandatory')
if mibBuilder.loadTexts: ecpppATInfoPortRef.setDescription('The id of the port on which the parameters in the table are configured.')
ecpppATInfoNcpState = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 7, 1, 2), NcpState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppATInfoNcpState.setStatus('mandatory')
if mibBuilder.loadTexts: ecpppATInfoNcpState.setDescription('State during NCP phase')
ecpppATInfoRoutingProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("rtmp", 2), ("aurp", 3), ("abgp", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppATInfoRoutingProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: ecpppATInfoRoutingProtocol.setDescription('Type of routing protocol')
ecpppATInfoComprConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no-compression", 1), ("standard", 2), ("prorietary", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppATInfoComprConfig.setStatus('mandatory')
if mibBuilder.loadTexts: ecpppATInfoComprConfig.setDescription('Compression configuration ')
ecpppATInfoServerClass = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 7, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppATInfoServerClass.setStatus('mandatory')
if mibBuilder.loadTexts: ecpppATInfoServerClass.setDescription('Class of the remote server ')
ecpppATInfoATAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 7, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppATInfoATAddr.setStatus('mandatory')
if mibBuilder.loadTexts: ecpppATInfoATAddr.setDescription('Local address')
ecpppATInfoATNode = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 7, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppATInfoATNode.setStatus('mandatory')
if mibBuilder.loadTexts: ecpppATInfoATNode.setDescription('Local node id')
ecpppATInfoATcpMaxTerm = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 7, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppATInfoATcpMaxTerm.setStatus('mandatory')
if mibBuilder.loadTexts: ecpppATInfoATcpMaxTerm.setDescription('Max. terminate retransmission')
ecpppATInfoATcpMaxConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 7, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppATInfoATcpMaxConfig.setStatus('mandatory')
if mibBuilder.loadTexts: ecpppATInfoATcpMaxConfig.setDescription('Max. configure retransmission')
ecpppATInfoATcpMaxFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 7, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppATInfoATcpMaxFailure.setStatus('mandatory')
if mibBuilder.loadTexts: ecpppATInfoATcpMaxFailure.setDescription('Max config_nak retransmission')
ecpppATInfoSrvName = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 7, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppATInfoSrvName.setStatus('mandatory')
if mibBuilder.loadTexts: ecpppATInfoSrvName.setDescription('Length of the server name ')
ecpppATInfoZoneName = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 7, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppATInfoZoneName.setStatus('mandatory')
if mibBuilder.loadTexts: ecpppATInfoZoneName.setDescription('AT ASCII name of the zone ')
ecpppATStatsTable = MibTable((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 8), )
if mibBuilder.loadTexts: ecpppATStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: ecpppATStatsTable.setDescription('A table for PPP IP Protocol Stats')
ecpppATStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 8, 1), ).setIndexNames((0, "ECPPP-MIB", "ecpppATStatsPortRef"))
if mibBuilder.loadTexts: ecpppATStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ecpppATStatsEntry.setDescription('Management information about a particular PPP Link.')
ecpppATStatsPortRef = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 8, 1, 1), PortRef()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppATStatsPortRef.setStatus('mandatory')
if mibBuilder.loadTexts: ecpppATStatsPortRef.setDescription('The id of the port on which the parameters in the table are configured')
ecpppATStatsDatagramsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 8, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppATStatsDatagramsTx.setStatus('mandatory')
if mibBuilder.loadTexts: ecpppATStatsDatagramsTx.setDescription('Number of datagrams sent ')
ecpppATStatsDatagramsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 8, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppATStatsDatagramsRx.setStatus('mandatory')
if mibBuilder.loadTexts: ecpppATStatsDatagramsRx.setDescription('Number of datagrams received ')
ecpppATStatsCharTx = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 8, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppATStatsCharTx.setStatus('mandatory')
if mibBuilder.loadTexts: ecpppATStatsCharTx.setDescription('Number of characters sent')
ecpppATStatsCharRx = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 8, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppATStatsCharRx.setStatus('mandatory')
if mibBuilder.loadTexts: ecpppATStatsCharRx.setDescription('Number of characters sent')
ecpppATStatsNcpRestartTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 8, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppATStatsNcpRestartTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: ecpppATStatsNcpRestartTimeout.setDescription('Number of NCP restart timer time-out')
ecpppATStatsNcpTermRetrans = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 8, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppATStatsNcpTermRetrans.setStatus('mandatory')
if mibBuilder.loadTexts: ecpppATStatsNcpTermRetrans.setDescription('Number of NCP terminate request retransmissions.')
ecpppATStatsNcpReqRetrans = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 8, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppATStatsNcpReqRetrans.setStatus('mandatory')
if mibBuilder.loadTexts: ecpppATStatsNcpReqRetrans.setDescription('Number of NCP configure request retransmissions.')
mibBuilder.exportSymbols("ECPPP-MIB", ecpppIPXStatsNcpRestartTimeout=ecpppIPXStatsNcpRestartTimeout, ecpppIPStatsDatagramsTx=ecpppIPStatsDatagramsTx, ecpppATInfoATAddr=ecpppATInfoATAddr, ecpppATInfoRoutingProtocol=ecpppATInfoRoutingProtocol, ecpppIPXInfoEntry=ecpppIPXInfoEntry, ecpppIPStatsCharTx=ecpppIPStatsCharTx, ecpppIPStatsPortRef=ecpppIPStatsPortRef, ecpppStatsLcpReqTx=ecpppStatsLcpReqTx, ecpppIPXStatsTable=ecpppIPXStatsTable, ecpppATInfoATcpMaxTerm=ecpppATInfoATcpMaxTerm, ecpppStatsLcpCodeRejRx=ecpppStatsLcpCodeRejRx, ecpppStatsFrameRx=ecpppStatsFrameRx, ecpppIPStatsCharRx=ecpppIPStatsCharRx, PppState=PppState, ecpppIPXStatsCharTx=ecpppIPXStatsCharTx, ecpppStatusMaxConfig=ecpppStatusMaxConfig, ecpppStatsTable=ecpppStatsTable, mibv2=mibv2, ecpppIPXStatsPortRef=ecpppIPXStatsPortRef, ecpppIPXStatsCharRx=ecpppIPXStatsCharRx, ecpppIPStatsDatagramsRx=ecpppIPStatsDatagramsRx, ecpppStatusTable=ecpppStatusTable, ecpppIPInfoIPcpMaxFailure=ecpppIPInfoIPcpMaxFailure, ecpppATInfoATcpMaxConfig=ecpppATInfoATcpMaxConfig, ecpppIPInfoIPComprProtocol=ecpppIPInfoIPComprProtocol, ecpppIPXStatsNcpTermRetrans=ecpppIPXStatsNcpTermRetrans, ecpppIPXInfoNcpState=ecpppIPXInfoNcpState, ecpppIPStatsEntry=ecpppIPStatsEntry, ecpppATInfoComprConfig=ecpppATInfoComprConfig, ecpppIPXInfoIPXcpMaxConfig=ecpppIPXInfoIPXcpMaxConfig, ecpppStatsLcpAckTx=ecpppStatsLcpAckTx, ecpppIPInfoPortRef=ecpppIPInfoPortRef, ecpppStatusAuthentProtocol=ecpppStatusAuthentProtocol, ecpppATInfoNcpState=ecpppATInfoNcpState, ecpppStatsLcpCodeRejTx=ecpppStatsLcpCodeRejTx, ecpppStatsLcpRejRx=ecpppStatsLcpRejRx, ecpppIPXStatsDatagramsRx=ecpppIPXStatsDatagramsRx, ecpppATStatsCharTx=ecpppATStatsCharTx, ecpppStatusAddrCtrlCompr=ecpppStatusAddrCtrlCompr, ecpppStatusRestartTimer=ecpppStatusRestartTimer, ecpppStatsLcpAckRx=ecpppStatsLcpAckRx, ecpppStatsLcpTermRetrans=ecpppStatsLcpTermRetrans, ecpppIPXInfoTable=ecpppIPXInfoTable, ecpppStatusQualityProtocol=ecpppStatusQualityProtocol, ecpppStatsLcpRestartTimeout=ecpppStatsLcpRestartTimeout, ecpppIPXInfoIPXcpMaxTerm=ecpppIPXInfoIPXcpMaxTerm, ecppp=ecppp, ecpppStatsCharRx=ecpppStatsCharRx, ecpppATInfoEntry=ecpppATInfoEntry, ecpppIPXInfoIPXcpMaxFailure=ecpppIPXInfoIPXcpMaxFailure, ecpppStatsLcpReqRx=ecpppStatsLcpReqRx, ecpppStatsLcpProRejTx=ecpppStatsLcpProRejTx, ecpppATInfoServerClass=ecpppATInfoServerClass, ecpppATInfoTable=ecpppATInfoTable, ecpppATStatsNcpRestartTimeout=ecpppATStatsNcpRestartTimeout, ecpppATInfoZoneName=ecpppATInfoZoneName, ecpppATStatsCharRx=ecpppATStatsCharRx, NcpState=NcpState, ecpppIPInfoEntry=ecpppIPInfoEntry, ecpppStatsCharTx=ecpppStatsCharTx, ecpppIPInfoIPcpMaxConfig=ecpppIPInfoIPcpMaxConfig, ecpppStatusProtocolCompr=ecpppStatusProtocolCompr, ecpppIPInfoNcpState=ecpppIPInfoNcpState, ecpppStatusNegotiatedPktSize=ecpppStatusNegotiatedPktSize, ecpppATInfoATcpMaxFailure=ecpppATInfoATcpMaxFailure, ecpppATInfoSrvName=ecpppATInfoSrvName, ecpppIPXStatsNcpReqRetrans=ecpppIPXStatsNcpReqRetrans, ecpppStatsLcpEchoReqTx=ecpppStatsLcpEchoReqTx, eicon=eicon, ecpppStatsLcpEchoReqRx=ecpppStatsLcpEchoReqRx, ecpppStatsLcpNakRx=ecpppStatsLcpNakRx, ecpppIPXStatsEntry=ecpppIPXStatsEntry, ecpppStatusMaxPacketSize=ecpppStatusMaxPacketSize, ecpppStatsEntry=ecpppStatsEntry, ecpppStatusMaxTerminate=ecpppStatusMaxTerminate, ecpppATStatsTable=ecpppATStatsTable, ecpppIPXInfoPortRef=ecpppIPXInfoPortRef, ecpppATStatsDatagramsRx=ecpppATStatsDatagramsRx, ecpppStatusNcpMask=ecpppStatusNcpMask, ecpppATStatsNcpReqRetrans=ecpppATStatsNcpReqRetrans, ecpppIPStatsTable=ecpppIPStatsTable, management=management, ecpppIPInfoTable=ecpppIPInfoTable, ecpppStatusMaxFailure=ecpppStatusMaxFailure, ecpppStatsLcpEchoReplyRx=ecpppStatsLcpEchoReplyRx, ecpppATStatsEntry=ecpppATStatsEntry, ecpppATInfoPortRef=ecpppATInfoPortRef, ecpppIPStatsNcpTermRetrans=ecpppIPStatsNcpTermRetrans, ecpppStatsFrameTx=ecpppStatsFrameTx, module=module, ecpppStatusState=ecpppStatusState, ecpppIPInfoIPcpMaxTerm=ecpppIPInfoIPcpMaxTerm, ecpppStatusEntry=ecpppStatusEntry, ecpppStatsLcpProRejRx=ecpppStatsLcpProRejRx, ecpppIPXStatsDatagramsTx=ecpppIPXStatsDatagramsTx, ecpppStatsLcpEchoReplyTx=ecpppStatsLcpEchoReplyTx, ecpppIPInfoIPAddr=ecpppIPInfoIPAddr, PortRef=PortRef, ecpppStatsLcpRejTx=ecpppStatsLcpRejTx, ecpppATStatsDatagramsTx=ecpppATStatsDatagramsTx, ecpppIPStatsNcpRestartTimeout=ecpppIPStatsNcpRestartTimeout, ecpppATInfoATNode=ecpppATInfoATNode, ecpppIPStatsNcpReqRetrans=ecpppIPStatsNcpReqRetrans, ecpppStatusWindowSize=ecpppStatusWindowSize, ecpppATStatsNcpTermRetrans=ecpppATStatsNcpTermRetrans, ecpppStatusPortRef=ecpppStatusPortRef, ecpppATStatsPortRef=ecpppATStatsPortRef, ecpppStatsLcpNakTx=ecpppStatsLcpNakTx, ecpppStatsPortRef=ecpppStatsPortRef, ecpppStatsLcpConfRetrans=ecpppStatsLcpConfRetrans)
