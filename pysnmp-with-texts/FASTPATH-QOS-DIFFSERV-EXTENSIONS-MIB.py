#
# PySNMP MIB module FASTPATH-QOS-DIFFSERV-EXTENSIONS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/FASTPATH-QOS-DIFFSERV-EXTENSIONS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:12:31 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint")
IfDirection, diffServMeterEntry, IndexIntegerNextFree, IndexInteger = mibBuilder.importSymbols("DIFFSERV-MIB", "IfDirection", "diffServMeterEntry", "IndexIntegerNextFree", "IndexInteger")
fastPathQOS, = mibBuilder.importSymbols("FASTPATH-QOS-MIB", "fastPathQOS")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
InetPortNumber, = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetPortNumber")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Gauge32, IpAddress, Integer32, ModuleIdentity, Counter64, iso, Counter32, Bits, NotificationType, ObjectIdentity, TimeTicks, MibIdentifier, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "IpAddress", "Integer32", "ModuleIdentity", "Counter64", "iso", "Counter32", "Bits", "NotificationType", "ObjectIdentity", "TimeTicks", "MibIdentifier", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
MacAddress, StorageType, DisplayString, TextualConvention, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "StorageType", "DisplayString", "TextualConvention", "RowStatus")
fastPathQOSDiffServExtensions = ModuleIdentity((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 6))
fastPathQOSDiffServExtensions.setRevisions(('2007-05-23 00:00', '2004-06-30 00:00', '2003-11-21 00:00', '2001-11-01 09:33',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: fastPathQOSDiffServExtensions.setRevisionsDescriptions(('Netgear branding related changes.', 'DiffServ enhancements for Netgear Release 8.0', 'Revisions made for new release.', 'Initial version.',))
if mibBuilder.loadTexts: fastPathQOSDiffServExtensions.setLastUpdated('200705230000Z')
if mibBuilder.loadTexts: fastPathQOSDiffServExtensions.setOrganization('Netgear')
if mibBuilder.loadTexts: fastPathQOSDiffServExtensions.setContactInfo('')
if mibBuilder.loadTexts: fastPathQOSDiffServExtensions.setDescription('')
class IpPrecedence(TextualConvention, Integer32):
    description = 'An IP Precedence value that may be used for marking a traffic stream.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 7)

class Cos(TextualConvention, Integer32):
    description = 'The 802.1p header Class of Service field that may be used for marking a traffic streams. Also known as the Ethernet frame priority.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 7)

class CosOrAny(TextualConvention, Integer32):
    description = 'The 802.1p header Class of Service field that may be used for discriminating among traffic streams. Also known as the Ethernet frame priority. The value -1 is used to indicate a wild card i.e. any value.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 7), )
class VlanIdOrAny(TextualConvention, Integer32):
    description = 'The virtual LAN identifier (VLAN ID) that may be used to differentiate among traffic streams. The value -1 is used to indicate a wild card i.e. any value.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(1, 4094), )
class EtypeOrAny(TextualConvention, Unsigned32):
    description = 'Ethertype value field that may be used to differentiate among traffic streams. The allowed value is 0x0600 to 0xFFFF, with a value of 0 used to indicate this object is not involved in the classifier entry.'
    status = 'current'
    displayHint = 'x'
    subtypeSpec = Unsigned32.subtypeSpec + ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1536, 65535), )
agentDiffServMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 6, 1))
agentDiffServMIBAdmin = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 6, 2))
agentDiffServClassifier = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 6, 1, 1))
agentDiffServAuxMfClfrNextFree = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 6, 1, 1, 1), IndexIntegerNextFree()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServAuxMfClfrNextFree.setStatus('current')
if mibBuilder.loadTexts: agentDiffServAuxMfClfrNextFree.setDescription('This object contains an unused value for agentDiffServAuxMfClfrId , or a zero to indicate that none exist.')
agentDiffServAuxMfClfrTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 6, 1, 1, 2), )
if mibBuilder.loadTexts: agentDiffServAuxMfClfrTable.setStatus('current')
if mibBuilder.loadTexts: agentDiffServAuxMfClfrTable.setDescription('A table of Auxiliary Multi-field Classifier filter entries that a system may use to identify IP traffic.')
agentDiffServAuxMfClfrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 6, 1, 1, 2, 1), ).setIndexNames((0, "FASTPATH-QOS-DIFFSERV-EXTENSIONS-MIB", "agentDiffServAuxMfClfrId"))
if mibBuilder.loadTexts: agentDiffServAuxMfClfrEntry.setStatus('current')
if mibBuilder.loadTexts: agentDiffServAuxMfClfrEntry.setDescription('An IP Multi-field Classifier entry describes a single filter.')
agentDiffServAuxMfClfrId = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 6, 1, 1, 2, 1, 1), IndexInteger())
if mibBuilder.loadTexts: agentDiffServAuxMfClfrId.setStatus('current')
if mibBuilder.loadTexts: agentDiffServAuxMfClfrId.setDescription('An index that enumerates the Auxiliary MultiField Classifier filter entries. Managers obtain new values for row creation in this table by reading agentDiffServAuxMfClfrNextFree.')
agentDiffServAuxMfClfrDstAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 6, 1, 1, 2, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServAuxMfClfrDstAddr.setStatus('current')
if mibBuilder.loadTexts: agentDiffServAuxMfClfrDstAddr.setDescription("The IP address to match against the packet's destination IP address.")
agentDiffServAuxMfClfrDstMask = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 6, 1, 1, 2, 1, 3), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServAuxMfClfrDstMask.setStatus('current')
if mibBuilder.loadTexts: agentDiffServAuxMfClfrDstMask.setDescription('This mask value identifies the portion of agentDiffServAuxMfClfrDstAddr that is compared against a packet. A non-contiguous mask value is permitted. A mask of 0 indicates a match of any address.')
agentDiffServAuxMfClfrSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 6, 1, 1, 2, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServAuxMfClfrSrcAddr.setStatus('current')
if mibBuilder.loadTexts: agentDiffServAuxMfClfrSrcAddr.setDescription("The IP address to match against the packet's source IP address.")
agentDiffServAuxMfClfrSrcMask = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 6, 1, 1, 2, 1, 5), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServAuxMfClfrSrcMask.setStatus('current')
if mibBuilder.loadTexts: agentDiffServAuxMfClfrSrcMask.setDescription('This mask value identifies the portion of agentDiffServAuxMfClfrSrcAddr that is compared against a packet. A non-contiguous mask value is permitted. A mask of 0 indicates a match of any address.')
agentDiffServAuxMfClfrProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 6, 1, 1, 2, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(255)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServAuxMfClfrProtocol.setStatus('current')
if mibBuilder.loadTexts: agentDiffServAuxMfClfrProtocol.setDescription('The IP protocol to match against the IPv4 protocol number. A value of 255 means match all. ')
agentDiffServAuxMfClfrDstL4PortMin = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 6, 1, 1, 2, 1, 7), InetPortNumber()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServAuxMfClfrDstL4PortMin.setStatus('current')
if mibBuilder.loadTexts: agentDiffServAuxMfClfrDstL4PortMin.setDescription('The minimum value that the layer-4 destination port number in the packet must have in order to match this classifier entry. ')
agentDiffServAuxMfClfrDstL4PortMax = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 6, 1, 1, 2, 1, 8), InetPortNumber().clone(65535)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServAuxMfClfrDstL4PortMax.setStatus('current')
if mibBuilder.loadTexts: agentDiffServAuxMfClfrDstL4PortMax.setDescription('The maximum value that the layer-4 destination port number in the packet must have in order to match this classifier entry. This value must be equal to or greater than the value specified for this entry in agentDiffServAuxMfClfrDstL4PortMin. ')
agentDiffServAuxMfClfrSrcL4PortMin = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 6, 1, 1, 2, 1, 9), InetPortNumber()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServAuxMfClfrSrcL4PortMin.setStatus('current')
if mibBuilder.loadTexts: agentDiffServAuxMfClfrSrcL4PortMin.setDescription('The minimum value that the layer-4 source port number in the packet must have in order to match this classifier entry. ')
agentDiffServAuxMfClfrSrcL4PortMax = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 6, 1, 1, 2, 1, 10), InetPortNumber().clone(65535)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServAuxMfClfrSrcL4PortMax.setStatus('current')
if mibBuilder.loadTexts: agentDiffServAuxMfClfrSrcL4PortMax.setDescription('The maximum value that the layer-4 source port number in the packet must have in order to match this classifier entry. This value must be equal to or greater than the value specified for this entry in diffServMultiFieldClfrSrcL4PortMin. ')
agentDiffServAuxMfClfrCos = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 6, 1, 1, 2, 1, 11), CosOrAny().clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServAuxMfClfrCos.setStatus('current')
if mibBuilder.loadTexts: agentDiffServAuxMfClfrCos.setDescription('Three-bit user priority field in the 802.1Q tag header of a tagged Ethernet frame used as a class-match parameter. For frames containing a double VLAN tag, this field is located in the first/outer tag. A value of -1 indicates that a specific COS value has not been defined and thus all COS values are considered a match.')
agentDiffServAuxMfClfrTos = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 6, 1, 1, 2, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServAuxMfClfrTos.setStatus('current')
if mibBuilder.loadTexts: agentDiffServAuxMfClfrTos.setDescription('IP TOS bits value, defined as all eight bits of the Service Type octet in the IPv4 header. There are multiple, overlapping, meanings of the TOS octet in use today: Precedence (bits 7-5): IP Precedence, values 0-7 DSCP (bits 7-2): IP DiffServ Code Point, values 0-63 TOS (bits 7-0): IP Type of Service, by bits, values 0-255 Each of these definitions can be produced using the appropriate agentDiffServAuxMfClfrTosMask mask value. These definitions are mutually-exclusive, so only one is allowed for any given classifier element.')
agentDiffServAuxMfClfrTosMask = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 6, 1, 1, 2, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServAuxMfClfrTosMask.setStatus('current')
if mibBuilder.loadTexts: agentDiffServAuxMfClfrTosMask.setDescription("IP TOS bits mask value. It identifies the portion of agentDiffServAuxMfClfrTos that is compared against a packet. A non-contiguous mask value is permitted. A mask of 0 indicates a match of any TOS value. There are multiple, overlapping meanings of the TOS octet in use today. These are represented by the following specific mask values: Precedence (bits 7-5): 224 (bit mask '11100000') DSCP (bits 7-2): 252 (bit mask '11111100') TOS (bits 7-0): 255 (bit mask '11111111') Other mask values are also permitted.")
agentDiffServAuxMfClfrDstMac = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 6, 1, 1, 2, 1, 14), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServAuxMfClfrDstMac.setStatus('current')
if mibBuilder.loadTexts: agentDiffServAuxMfClfrDstMac.setDescription('Destination MAC address. ')
agentDiffServAuxMfClfrDstMacMask = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 6, 1, 1, 2, 1, 15), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServAuxMfClfrDstMacMask.setStatus('current')
if mibBuilder.loadTexts: agentDiffServAuxMfClfrDstMacMask.setDescription('Destination MAC address mask value. This mask value identifies the portion of agentDiffServAuxMfClfrDstMac that is compared against a packet. A non-contiguous mask value is permitted. A mask of 0 indicates a match of any MAC address.')
agentDiffServAuxMfClfrSrcMac = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 6, 1, 1, 2, 1, 16), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServAuxMfClfrSrcMac.setStatus('current')
if mibBuilder.loadTexts: agentDiffServAuxMfClfrSrcMac.setDescription('Source MAC address. ')
agentDiffServAuxMfClfrSrcMacMask = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 6, 1, 1, 2, 1, 17), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServAuxMfClfrSrcMacMask.setStatus('current')
if mibBuilder.loadTexts: agentDiffServAuxMfClfrSrcMacMask.setDescription('Source MAC address mask value. This mask value identifies the portion of agentDiffServAuxMfClfrSrcMac that is compared against a packet. A non-contiguous mask value is permitted. A mask of 0 indicates a match of any MAC address.')
agentDiffServAuxMfClfrVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 6, 1, 1, 2, 1, 18), VlanIdOrAny().clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServAuxMfClfrVlanId.setStatus('obsolete')
if mibBuilder.loadTexts: agentDiffServAuxMfClfrVlanId.setDescription('VLAN ID value for the classifier. A value of -1 indicates that a specific VLAN ID value has not been defined and thus all VLAN ID values are considered a match.')
agentDiffServAuxMfClfrStorage = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 6, 1, 1, 2, 1, 19), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServAuxMfClfrStorage.setStatus('current')
if mibBuilder.loadTexts: agentDiffServAuxMfClfrStorage.setDescription('The storage type for this conceptual row. ')
agentDiffServAuxMfClfrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 6, 1, 1, 2, 1, 20), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServAuxMfClfrStatus.setStatus('current')
if mibBuilder.loadTexts: agentDiffServAuxMfClfrStatus.setDescription('The status of this conceptual row.')
agentDiffServAuxMfClfrCos2 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 6, 1, 1, 2, 1, 21), CosOrAny().clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServAuxMfClfrCos2.setStatus('current')
if mibBuilder.loadTexts: agentDiffServAuxMfClfrCos2.setDescription('Three-bit user priority field in the second/inner 802.1Q tag header of a double VLAN tagged Ethernet frame used as a class-match parameter A value of -1 indicates that a specific Secondary COS value has not been defined and thus all Secondary COS values are considered a match.')
agentDiffServAuxMfClfrEtypeVal1 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 6, 1, 1, 2, 1, 22), EtypeOrAny()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServAuxMfClfrEtypeVal1.setStatus('current')
if mibBuilder.loadTexts: agentDiffServAuxMfClfrEtypeVal1.setDescription('Ethertype value to be compared in order to match this classifier entry. The allowed value for this object is 0x0600 to 0xFFFF, with a value of 0 used to indicate this object is not involved in the classifier entry.')
agentDiffServAuxMfClfrEtypeVal2 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 6, 1, 1, 2, 1, 23), EtypeOrAny()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServAuxMfClfrEtypeVal2.setStatus('current')
if mibBuilder.loadTexts: agentDiffServAuxMfClfrEtypeVal2.setDescription('A second Ethertype value to be compared in order to match this classifier entry. This value is considered in addition to the value specified by agentDiffServAuxMfClfrEtypeVal1 and serves as a second possible match value (i.e. a packet can match either EtypeVal1 or EtypeVal2). The allowed value for this object is 0x0600 to 0xFFFF, with a value of 0 used to indicate this object is not involved in the classifier entry.')
agentDiffServAuxMfClfrVlanIdMin = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 6, 1, 1, 2, 1, 24), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServAuxMfClfrVlanIdMin.setStatus('current')
if mibBuilder.loadTexts: agentDiffServAuxMfClfrVlanIdMin.setDescription('The minimum value that the VLAN ID in the packet must have in order to match this classifier entry. This field is defined as the 12-bit VLAN identifier in the 802.1Q tag header of a tagged Ethernet frame. For a double VLAN tagged frame, this field is contained in the first/outer tag.')
agentDiffServAuxMfClfrVlanIdMax = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 6, 1, 1, 2, 1, 25), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)).clone(4094)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServAuxMfClfrVlanIdMax.setStatus('current')
if mibBuilder.loadTexts: agentDiffServAuxMfClfrVlanIdMax.setDescription('The maximum value that the VLAN ID in the packet must have in order to match this classifier entry. This field is defined as the 12-bit VLAN identifier in the 802.1Q tag header of a tagged Ethernet frame. For a double VLAN tagged frame, this field is contained in the first/outer tag. This value must be equal to or greater than the value specified for the entry in agentDiffServAuxMfClfrVlanIdMin.')
agentDiffServAuxMfClfrVlanId2Min = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 6, 1, 1, 2, 1, 26), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServAuxMfClfrVlanId2Min.setStatus('current')
if mibBuilder.loadTexts: agentDiffServAuxMfClfrVlanId2Min.setDescription('The minimum value that the Secondary VLAN ID in the packet must have in order to match this classifier entry. This field is defined as the 12-bit VLAN identifier in the second/inner 802.1Q tag header of a double VLAN tagged Ethernet frame.')
agentDiffServAuxMfClfrVlanId2Max = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 6, 1, 1, 2, 1, 27), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)).clone(4094)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServAuxMfClfrVlanId2Max.setStatus('current')
if mibBuilder.loadTexts: agentDiffServAuxMfClfrVlanId2Max.setDescription('The maximum value that the Secondary VLAN ID in the packet must have in order to match this classifier entry. This field is defined as the 12-bit VLAN identifier in the second/inner 802.1Q tag header of a double VLAN tagged Ethernet frame. This value must be equal to or greater than the value specified for the entry in agentDiffServAuxMfClfrVlanId2Min.')
agentDiffServAction = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 6, 1, 2))
agentDiffServIpPrecMarkActTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 6, 1, 2, 4), )
if mibBuilder.loadTexts: agentDiffServIpPrecMarkActTable.setStatus('current')
if mibBuilder.loadTexts: agentDiffServIpPrecMarkActTable.setDescription('This table enumerates specific IP Precedence values used for marking or remarking the Precedence field of IP packets. The entries of this table may be referenced by a diffServActionSpecific attribute.')
agentDiffServIpPrecMarkActEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 6, 1, 2, 4, 1), ).setIndexNames((0, "FASTPATH-QOS-DIFFSERV-EXTENSIONS-MIB", "agentDiffServIpPrecMarkActPrecedence"))
if mibBuilder.loadTexts: agentDiffServIpPrecMarkActEntry.setStatus('current')
if mibBuilder.loadTexts: agentDiffServIpPrecMarkActEntry.setDescription('An entry in the IP Precedence mark action table that describes a single IP Precedence value used for marking.')
agentDiffServIpPrecMarkActPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 6, 1, 2, 4, 1, 1), IpPrecedence()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServIpPrecMarkActPrecedence.setStatus('current')
if mibBuilder.loadTexts: agentDiffServIpPrecMarkActPrecedence.setDescription('The IP Precedence that this Action will store into the Precedence field of the IP packet. It is quite possible that the only packets subject to this Action are already marked with this IP Precedence. Note also that Differentiated Services processing may result in a packet being marked on both ingress to a network and on egress from it, and that ingress and egress can occur in the same router.')
agentDiffServCosMarkActTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 6, 1, 2, 2), )
if mibBuilder.loadTexts: agentDiffServCosMarkActTable.setStatus('current')
if mibBuilder.loadTexts: agentDiffServCosMarkActTable.setDescription('This table enumerates specific Class of Service values used for marking or remarking the priority bits in the 802.1p header. The entries of this table may be referenced by a diffServActionSpecific attribute.')
agentDiffServCosMarkActEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 6, 1, 2, 2, 1), ).setIndexNames((0, "FASTPATH-QOS-DIFFSERV-EXTENSIONS-MIB", "agentDiffServCosMarkActCos"))
if mibBuilder.loadTexts: agentDiffServCosMarkActEntry.setStatus('current')
if mibBuilder.loadTexts: agentDiffServCosMarkActEntry.setDescription('An entry in the COS mark action table that describes a single Class of Service value used for marking.')
agentDiffServCosMarkActCos = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 6, 1, 2, 2, 1, 1), Cos()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServCosMarkActCos.setStatus('current')
if mibBuilder.loadTexts: agentDiffServCosMarkActCos.setDescription('The Class of Service value that this Action will store into the priority bits of the 802.1p header. It is quite possible that the only packets subject to this Action are already marked with this COS value.')
agentDiffServCos2MarkActTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 6, 1, 2, 5), )
if mibBuilder.loadTexts: agentDiffServCos2MarkActTable.setStatus('current')
if mibBuilder.loadTexts: agentDiffServCos2MarkActTable.setDescription('This table enumerates specific Secondary Class of Service values used for marking or remarking the priority bits in the second/inner 802.1Q tag header of a double VLAN tagged Ethernet packet. The entries of this table may be referenced by a diffServActionSpecific attribute.')
agentDiffServCos2MarkActEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 6, 1, 2, 5, 1), ).setIndexNames((0, "FASTPATH-QOS-DIFFSERV-EXTENSIONS-MIB", "agentDiffServCos2MarkActCos"))
if mibBuilder.loadTexts: agentDiffServCos2MarkActEntry.setStatus('current')
if mibBuilder.loadTexts: agentDiffServCos2MarkActEntry.setDescription('An entry in the Secondary COS mark action table that describes a single Class of Service value used for marking.')
agentDiffServCos2MarkActCos = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 6, 1, 2, 5, 1, 1), Cos()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServCos2MarkActCos.setStatus('current')
if mibBuilder.loadTexts: agentDiffServCos2MarkActCos.setDescription('The Secondary Class of Service value that this Action will store into the priority bits of the second/inner 802.1p tag header. It is quite possible that the only packets subject to this Action are already marked with this COS value.')
agentDiffServAssignQueueNextFree = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 6, 1, 2, 6), IndexIntegerNextFree()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServAssignQueueNextFree.setStatus('current')
if mibBuilder.loadTexts: agentDiffServAssignQueueNextFree.setDescription('This object contains an unused value for agentDiffServAssignIndex, or a zero to indicate that none exist.')
agentDiffServAssignQueueTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 6, 1, 2, 7), )
if mibBuilder.loadTexts: agentDiffServAssignQueueTable.setStatus('current')
if mibBuilder.loadTexts: agentDiffServAssignQueueTable.setDescription('A table used for assigning a stream of Differentiated Services traffic to a specific quality of service (QoS) queue. The traffic stream is identified by the upstream Functional Data Path Element(s), i.e. by the object(s) that point to each entry in this table. This may include all traffic on an interface or just a portion thereof.')
agentDiffServAssignQueueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 6, 1, 2, 7, 1), ).setIndexNames((0, "FASTPATH-QOS-DIFFSERV-EXTENSIONS-MIB", "agentDiffServAssignQueueIndex"))
if mibBuilder.loadTexts: agentDiffServAssignQueueEntry.setStatus('current')
if mibBuilder.loadTexts: agentDiffServAssignQueueEntry.setDescription('An entry in the assign queue table describes a specific (egress) QoS queue identifier for a traffic stream.')
agentDiffServAssignQueueIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 6, 1, 2, 7, 1, 1), IndexInteger())
if mibBuilder.loadTexts: agentDiffServAssignQueueIndex.setStatus('current')
if mibBuilder.loadTexts: agentDiffServAssignQueueIndex.setDescription('An index that enumerates the Assign Queue entries. Managers obtain new values for row creation in this table by reading agentDiffServAssignQueueNextFree.')
agentDiffServAssignQueueQnum = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 6, 1, 2, 7, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServAssignQueueQnum.setStatus('current')
if mibBuilder.loadTexts: agentDiffServAssignQueueQnum.setDescription('The queue identifier value. This value indicates the QoS queue number to which the traffic stream for this data path is directed for egress from the device.')
agentDiffServAssignQueueStorage = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 6, 1, 2, 7, 1, 3), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServAssignQueueStorage.setStatus('current')
if mibBuilder.loadTexts: agentDiffServAssignQueueStorage.setDescription("The storage type for this conceptual row. Conceptual rows having the value 'permanent' need not allow write-access to any columnar objects in the row.")
agentDiffServAssignQueueStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 6, 1, 2, 7, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServAssignQueueStatus.setStatus('current')
if mibBuilder.loadTexts: agentDiffServAssignQueueStatus.setDescription("The status of this conceptual row. All writable objects in this row may be modified at any time. Setting this variable to 'destroy' when the MIB contains one or more RowPointers pointing to it results in destruction being delayed until the row is no longer used.")
agentDiffServRedirectNextFree = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 6, 1, 2, 8), IndexIntegerNextFree()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServRedirectNextFree.setStatus('current')
if mibBuilder.loadTexts: agentDiffServRedirectNextFree.setDescription('This object contains an unused value for agentDiffServRedirectId, or a zero to indicate that none exist.')
agentDiffServRedirectTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 6, 1, 2, 9), )
if mibBuilder.loadTexts: agentDiffServRedirectTable.setStatus('current')
if mibBuilder.loadTexts: agentDiffServRedirectTable.setDescription('A table used for redirecting a stream of Differentiated Services traffic to a specific egress interface, bypassing any normal device forwarding decision. The traffic stream is identified by the upstream Functional Data Path Element(s), i.e. by the object(s) that point to each entry in this table. This may include all traffic on an interface or just a portion thereof.')
agentDiffServRedirectEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 6, 1, 2, 9, 1), ).setIndexNames((0, "FASTPATH-QOS-DIFFSERV-EXTENSIONS-MIB", "agentDiffServRedirectId"))
if mibBuilder.loadTexts: agentDiffServRedirectEntry.setStatus('current')
if mibBuilder.loadTexts: agentDiffServRedirectEntry.setDescription('An entry in the redirect table describes a specific external interface number used as the egress point of a traffic stream.')
agentDiffServRedirectId = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 6, 1, 2, 9, 1, 1), IndexInteger())
if mibBuilder.loadTexts: agentDiffServRedirectId.setStatus('current')
if mibBuilder.loadTexts: agentDiffServRedirectId.setDescription('An index that enumerates the Redirect entries. Managers obtain new values for row creation in this table by reading agentDiffServRedirectNextFree.')
agentDiffServRedirectIntf = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 6, 1, 2, 9, 1, 2), InterfaceIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServRedirectIntf.setStatus('current')
if mibBuilder.loadTexts: agentDiffServRedirectIntf.setDescription('The external interface number identifier value. This value indicates the egress interface to which the traffic stream for this data path is directed. Normal traffic forwarding decisions are bypassed.')
agentDiffServRedirectStorage = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 6, 1, 2, 9, 1, 3), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServRedirectStorage.setStatus('current')
if mibBuilder.loadTexts: agentDiffServRedirectStorage.setDescription("The storage type for this conceptual row. Conceptual rows having the value 'permanent' need not allow write-access to any columnar objects in the row.")
agentDiffServRedirectStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 6, 1, 2, 9, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServRedirectStatus.setStatus('current')
if mibBuilder.loadTexts: agentDiffServRedirectStatus.setDescription("The status of this conceptual row. All writable objects in this row may be modified at any time. Setting this variable to 'destroy' when the MIB contains one or more RowPointers pointing to it results in destruction being delayed until the row is no longer used.")
agentDiffServMirrorNextFree = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 6, 1, 2, 10), IndexIntegerNextFree()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServMirrorNextFree.setStatus('current')
if mibBuilder.loadTexts: agentDiffServMirrorNextFree.setDescription('This object contains an unused value for agentDiffServMirrorId, or a zero to indicate that none exist.')
agentDiffServMirrorTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 6, 1, 2, 11), )
if mibBuilder.loadTexts: agentDiffServMirrorTable.setStatus('current')
if mibBuilder.loadTexts: agentDiffServMirrorTable.setDescription('A table used for mirroring a stream of Differentiated Services traffic to a specific egress interface, in addition to any normal device forwarding decision. The traffic stream is identified by the upstream Functional Data Path Element(s), i.e. by the object(s) that point to each entry in this table. This may include all traffic on an interface or just a portion thereof.')
agentDiffServMirrorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 6, 1, 2, 11, 1), ).setIndexNames((0, "FASTPATH-QOS-DIFFSERV-EXTENSIONS-MIB", "agentDiffServMirrorId"))
if mibBuilder.loadTexts: agentDiffServMirrorEntry.setStatus('current')
if mibBuilder.loadTexts: agentDiffServMirrorEntry.setDescription('An entry in the mirror table describes a specific external interface number used as the egress point of a copied traffic stream.')
agentDiffServMirrorId = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 6, 1, 2, 11, 1, 1), IndexInteger())
if mibBuilder.loadTexts: agentDiffServMirrorId.setStatus('current')
if mibBuilder.loadTexts: agentDiffServMirrorId.setDescription('An index that enumerates the Mirror entries. Managers obtain new values for row creation in this table by reading agentDiffServMirrorNextFree.')
agentDiffServMirrorIntf = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 6, 1, 2, 11, 1, 2), InterfaceIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServMirrorIntf.setStatus('current')
if mibBuilder.loadTexts: agentDiffServMirrorIntf.setDescription('The external interface number identifier value. This value indicates the egress interface to which the traffic stream for this data path is copied. Normal traffic forwarding decisions are still performed on the traffic stream.')
agentDiffServMirrorStorage = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 6, 1, 2, 11, 1, 3), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServMirrorStorage.setStatus('current')
if mibBuilder.loadTexts: agentDiffServMirrorStorage.setDescription("The storage type for this conceptual row. Conceptual rows having the value 'permanent' need not allow write-access to any columnar objects in the row.")
agentDiffServMirrorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 6, 1, 2, 11, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServMirrorStatus.setStatus('current')
if mibBuilder.loadTexts: agentDiffServMirrorStatus.setDescription("The status of this conceptual row. All writable objects in this row may be modified at any time. Setting this variable to 'destroy' when the MIB contains one or more RowPointers pointing to it results in destruction being delayed until the row is no longer used.")
agentDiffServMeter = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 6, 1, 3))
agentDiffServColorAwareTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 6, 1, 3, 1), )
if mibBuilder.loadTexts: agentDiffServColorAwareTable.setStatus('current')
if mibBuilder.loadTexts: agentDiffServColorAwareTable.setDescription('A table used for augmenting the Differentiated Services meter information with information describing the packet coloration characteristics for a color-aware mode of policing. The diffServMeterId is used as the index to this table, which logically extends the Meter table row with the columnar objects defined in this Color Aware table row.')
agentDiffServColorAwareEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 6, 1, 3, 1, 1), )
diffServMeterEntry.registerAugmentions(("FASTPATH-QOS-DIFFSERV-EXTENSIONS-MIB", "agentDiffServColorAwareEntry"))
agentDiffServColorAwareEntry.setIndexNames(*diffServMeterEntry.getIndexNames())
if mibBuilder.loadTexts: agentDiffServColorAwareEntry.setStatus('current')
if mibBuilder.loadTexts: agentDiffServColorAwareEntry.setDescription('An entry in the color aware table describes a single color conformance level of a meter.')
agentDiffServColorAwareLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 6, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("conform", 1), ("exceed", 2), ("unused", 3))).clone('unused')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServColorAwareLevel.setStatus('current')
if mibBuilder.loadTexts: agentDiffServColorAwareLevel.setDescription('The metering conformance level of this table entry. A policing meter represents either a conforming or an exceeding level of traffic in the traffic stream for this data path. The color characteristics used by the meter are relevant to this conformance level. This object is set to unused(3) when the meter is not being used for policing.')
agentDiffServColorAwareMode = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 6, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("blind", 1), ("awarecos", 2), ("awarecos2", 3), ("awareipdscp", 4), ("awareipprec", 5), ("awareunused", 6))).clone('blind')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServColorAwareMode.setStatus('current')
if mibBuilder.loadTexts: agentDiffServColorAwareMode.setDescription('The color mode indicator for the meter. When set to blind(1), metering is performed in a color-blind manner such that any packet markings are ignored by the meter. The other values listed for this object indicate the packet field used for determining its pre-existing color marking. In color-aware mode, the current color of a packet (e.g. green, yellow, red) influences the metering outcome. The object value awareunused(6) is special in that it denotes that the specific field attributes are not specified for the meter even though a color aware scheme is in use for policing. This object always returns blind(1) when the agentDiffServColorAwareLevel is set to unused(3).')
agentDiffServColorAwareValue = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 6, 1, 3, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServColorAwareValue.setStatus('current')
if mibBuilder.loadTexts: agentDiffServColorAwareValue.setDescription('The value of the color aware table entry. This value is used to compare the field indicated in agentDiffServColorAwareMode against packets in a traffic stream along the data path supplying the meter for a given conformance level. This object always returns 0 when the agentDiffServColorAwareMode is set to blind(1) or awareunused(6).')
agentDiffServTBMeters = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 6, 2, 1))
agentDiffServTBParamSimpleTokenBucketAware = ObjectIdentity((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 6, 2, 1, 1))
if mibBuilder.loadTexts: agentDiffServTBParamSimpleTokenBucketAware.setStatus('current')
if mibBuilder.loadTexts: agentDiffServTBParamSimpleTokenBucketAware.setDescription('Two Parameter Token Bucket Meter as described in the Informal Differentiated Services Model section 5.2.3, but using a color-aware mode of operation.')
mibBuilder.exportSymbols("FASTPATH-QOS-DIFFSERV-EXTENSIONS-MIB", IpPrecedence=IpPrecedence, agentDiffServAction=agentDiffServAction, agentDiffServRedirectId=agentDiffServRedirectId, agentDiffServAuxMfClfrTable=agentDiffServAuxMfClfrTable, agentDiffServAuxMfClfrSrcMac=agentDiffServAuxMfClfrSrcMac, agentDiffServMIBObjects=agentDiffServMIBObjects, agentDiffServAuxMfClfrDstMac=agentDiffServAuxMfClfrDstMac, agentDiffServAuxMfClfrCos2=agentDiffServAuxMfClfrCos2, agentDiffServIpPrecMarkActPrecedence=agentDiffServIpPrecMarkActPrecedence, agentDiffServColorAwareTable=agentDiffServColorAwareTable, agentDiffServAuxMfClfrId=agentDiffServAuxMfClfrId, agentDiffServIpPrecMarkActTable=agentDiffServIpPrecMarkActTable, agentDiffServColorAwareValue=agentDiffServColorAwareValue, agentDiffServAuxMfClfrVlanId2Max=agentDiffServAuxMfClfrVlanId2Max, agentDiffServMirrorIntf=agentDiffServMirrorIntf, agentDiffServClassifier=agentDiffServClassifier, agentDiffServAuxMfClfrEtypeVal1=agentDiffServAuxMfClfrEtypeVal1, agentDiffServAssignQueueEntry=agentDiffServAssignQueueEntry, agentDiffServAssignQueueQnum=agentDiffServAssignQueueQnum, agentDiffServColorAwareEntry=agentDiffServColorAwareEntry, agentDiffServColorAwareMode=agentDiffServColorAwareMode, agentDiffServAuxMfClfrSrcL4PortMax=agentDiffServAuxMfClfrSrcL4PortMax, agentDiffServCosMarkActTable=agentDiffServCosMarkActTable, agentDiffServAssignQueueNextFree=agentDiffServAssignQueueNextFree, agentDiffServAuxMfClfrEntry=agentDiffServAuxMfClfrEntry, agentDiffServMirrorTable=agentDiffServMirrorTable, agentDiffServTBParamSimpleTokenBucketAware=agentDiffServTBParamSimpleTokenBucketAware, agentDiffServAssignQueueTable=agentDiffServAssignQueueTable, agentDiffServCos2MarkActTable=agentDiffServCos2MarkActTable, agentDiffServAuxMfClfrNextFree=agentDiffServAuxMfClfrNextFree, agentDiffServRedirectIntf=agentDiffServRedirectIntf, agentDiffServAssignQueueStatus=agentDiffServAssignQueueStatus, agentDiffServMirrorEntry=agentDiffServMirrorEntry, agentDiffServAuxMfClfrTosMask=agentDiffServAuxMfClfrTosMask, agentDiffServAuxMfClfrCos=agentDiffServAuxMfClfrCos, agentDiffServIpPrecMarkActEntry=agentDiffServIpPrecMarkActEntry, agentDiffServAuxMfClfrStorage=agentDiffServAuxMfClfrStorage, agentDiffServAuxMfClfrSrcMacMask=agentDiffServAuxMfClfrSrcMacMask, agentDiffServAuxMfClfrSrcMask=agentDiffServAuxMfClfrSrcMask, agentDiffServAssignQueueIndex=agentDiffServAssignQueueIndex, agentDiffServMirrorId=agentDiffServMirrorId, fastPathQOSDiffServExtensions=fastPathQOSDiffServExtensions, agentDiffServAssignQueueStorage=agentDiffServAssignQueueStorage, agentDiffServCos2MarkActCos=agentDiffServCos2MarkActCos, agentDiffServAuxMfClfrTos=agentDiffServAuxMfClfrTos, agentDiffServMirrorNextFree=agentDiffServMirrorNextFree, agentDiffServTBMeters=agentDiffServTBMeters, agentDiffServAuxMfClfrStatus=agentDiffServAuxMfClfrStatus, agentDiffServAuxMfClfrVlanIdMin=agentDiffServAuxMfClfrVlanIdMin, agentDiffServMeter=agentDiffServMeter, CosOrAny=CosOrAny, agentDiffServColorAwareLevel=agentDiffServColorAwareLevel, agentDiffServAuxMfClfrDstMask=agentDiffServAuxMfClfrDstMask, agentDiffServMirrorStatus=agentDiffServMirrorStatus, agentDiffServAuxMfClfrDstMacMask=agentDiffServAuxMfClfrDstMacMask, agentDiffServMirrorStorage=agentDiffServMirrorStorage, agentDiffServAuxMfClfrSrcL4PortMin=agentDiffServAuxMfClfrSrcL4PortMin, agentDiffServAuxMfClfrProtocol=agentDiffServAuxMfClfrProtocol, agentDiffServAuxMfClfrEtypeVal2=agentDiffServAuxMfClfrEtypeVal2, agentDiffServAuxMfClfrVlanIdMax=agentDiffServAuxMfClfrVlanIdMax, VlanIdOrAny=VlanIdOrAny, EtypeOrAny=EtypeOrAny, agentDiffServMIBAdmin=agentDiffServMIBAdmin, agentDiffServCosMarkActEntry=agentDiffServCosMarkActEntry, agentDiffServCos2MarkActEntry=agentDiffServCos2MarkActEntry, agentDiffServAuxMfClfrVlanId2Min=agentDiffServAuxMfClfrVlanId2Min, agentDiffServAuxMfClfrDstAddr=agentDiffServAuxMfClfrDstAddr, agentDiffServCosMarkActCos=agentDiffServCosMarkActCos, Cos=Cos, agentDiffServAuxMfClfrDstL4PortMax=agentDiffServAuxMfClfrDstL4PortMax, agentDiffServRedirectEntry=agentDiffServRedirectEntry, agentDiffServRedirectStorage=agentDiffServRedirectStorage, PYSNMP_MODULE_ID=fastPathQOSDiffServExtensions, agentDiffServAuxMfClfrSrcAddr=agentDiffServAuxMfClfrSrcAddr, agentDiffServRedirectNextFree=agentDiffServRedirectNextFree, agentDiffServAuxMfClfrVlanId=agentDiffServAuxMfClfrVlanId, agentDiffServRedirectTable=agentDiffServRedirectTable, agentDiffServAuxMfClfrDstL4PortMin=agentDiffServAuxMfClfrDstL4PortMin, agentDiffServRedirectStatus=agentDiffServRedirectStatus)
