#
# PySNMP MIB module AC-SYSTEM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/AC-SYSTEM-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:09:35 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint")
acBoardMibs, acGeneric, audioCodes, acProducts, acRegistrations = mibBuilder.importSymbols("AUDIOCODES-TYPES-MIB", "acBoardMibs", "acGeneric", "audioCodes", "acProducts", "acRegistrations")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ObjectIdentity, Counter64, Counter32, NotificationType, Gauge32, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, enterprises, Integer32, IpAddress, iso, TimeTicks, Unsigned32, ModuleIdentity, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "Counter64", "Counter32", "NotificationType", "Gauge32", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "enterprises", "Integer32", "IpAddress", "iso", "TimeTicks", "Unsigned32", "ModuleIdentity", "MibIdentifier")
RowStatus, TAddress, TextualConvention, DisplayString, DateAndTime = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TAddress", "TextualConvention", "DisplayString", "DateAndTime")
acSystem = ModuleIdentity((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10))
if mibBuilder.loadTexts: acSystem.setLastUpdated('201001241133Z')
if mibBuilder.loadTexts: acSystem.setOrganization('AudioCodes Ltd')
if mibBuilder.loadTexts: acSystem.setContactInfo('Postal: Support AudioCodes LTD 1 Hayarden Street Airport City Lod, ISRAEL 70151 Tel: 972-3-9764000 Fax: 972-3-9764040 Email: support@audiocodes.com Web: www.audiocodes.com')
if mibBuilder.loadTexts: acSystem.setDescription('')
acSystemConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1))
acSysControl = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 1))
acSysControlProtocolType = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 4, 8))).clone(namedValues=NamedValues(("controlProtocol-None", 0), ("controlProtocol-MGCP", 1), ("controlProtocol-MEGACO", 2), ("controlProtocol-H323", 4), ("controlProtocol-SIP", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysControlProtocolType.setStatus('current')
if mibBuilder.loadTexts: acSysControlProtocolType.setDescription('Defines the control protocol type. Choose either: 0 = None 1 = MGCP 2 = MEGACO 4 = H.323 8 = SIP. Access: Offline. AC INI-Param: MGCONTROLPROTOCOLTYPE')
acSysControlTrunkingToAnalogFunctionalityProfile = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("cASAnalog", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysControlTrunkingToAnalogFunctionalityProfile.setStatus('current')
if mibBuilder.loadTexts: acSysControlTrunkingToAnalogFunctionalityProfile.setDescription('This parameter defines the Trunking to Analog Functionality Profile. 0 = Disable 1 = Enable MelCAS/LoopStart/GroundStart to Analog Functionality Refer to the enumerator acTrunkingToAnalogFunctionalityProfile enum for the possible values. Access: Offline. AC INI-Param: TrunkingToAnalogFunctionalityProfile')
acSysTDM = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 2))
acSysTDMClock = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 2, 1))
acSysTDMClockSource = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22))).clone(namedValues=NamedValues(("internal", 1), ("mVIP", 3), ("network", 4), ("h110-A", 8), ("h110-B", 9), ("netReference1", 10), ("netReference2", 11), ("sC-2M", 12), ("sC-4M", 13), ("sC-8M", 14), ("bITS", 15), ("network-b", 16), ("aTM-OC3", 17), ("aTM-OC3-B", 18), ("aTM-OC12", 19), ("network-DS3-1", 20), ("network-DS3-2", 21), ("network-DS3-3", 22)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysTDMClockSource.setStatus('current')
if mibBuilder.loadTexts: acSysTDMClockSource.setDescription('Selects the clock source on which the board synchronizes. 1 = Local oscillator 3 = MVIP 4 = PSTN Network 8 = H.110A 9 = H.110B 10 = NetRef1 11 = NetRef2 12 = SC2M 13 = SC4M 14 = SC8M 15 = BITS 16 = Network-B 17 = ATM-OC3 18 = ATM-OC3-B 19 = ATM-OC12 20 = Network-DS3-1 21 = Network-DS3-2 22 = Network-DS3-3 Default = 1 TP-1610 = 3. Access: Online. AC INI-Param: TDMBUSCLOCKSOURCE')
acSysTDMClockEnableFallBack = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("manual", 0), ("autoNon-Revertive", 1), ("auto-Revertive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysTDMClockEnableFallBack.setStatus('current')
if mibBuilder.loadTexts: acSysTDMClockEnableFallBack.setDescription('Defines the auto fallback of the clock. Range: 0 = Manual 1 = Auto Non-Revertive 2 = Auto Revertive. Access: Online. AC INI-Param: TDMBUSENABLEFALLBACK')
acSysTDMClockLocalReference = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 2, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysTDMClockLocalReference.setStatus('current')
if mibBuilder.loadTexts: acSysTDMClockLocalReference.setDescription('When the clock source is set to Network, this parameter selects the Trunk ID to be used as the clock synchronization source of the board. When using H.110/H.100 bus, this parameter also selects the trunk used as the clock source for the NetRef clock generation (in this case, the clock source must not be set to Network. Range = 0 to (MAX_TRUNK _NUM-1). Access: Online. AC INI-Param: TDMBusLocalReference')
acSysTDMClockMasterSlaveSelection = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("acTDMBusSlaveMode", 0), ("acTDMBusMasterMode", 1), ("acH110BusSecondaryMasterMode", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysTDMClockMasterSlaveSelection.setStatus('current')
if mibBuilder.loadTexts: acSysTDMClockMasterSlaveSelection.setDescription('Sets SC/MVIP/H.100/H.110 to either: 0 = Slave mode (another board in the system must supply the clock to the TDM bus) or Master mode (the board is the clock source for the TDM bus) or Secondary Master mode (for H100/H110 Bus only). 1 = H110A Master in Master mode 2 = H.110B Master. Access: Online. AC INI-Param: TDMBUSMASTERSLAVESELECTION')
acSysTDMClockNetRefSpeed = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("acTH110BusNetRefSpeed-8khz", 0), ("acTH110BusNetRefSpeed-1544khz", 1), ("acTH110BusNetRefSpeed-20488khz", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysTDMClockNetRefSpeed.setStatus('current')
if mibBuilder.loadTexts: acSysTDMClockNetRefSpeed.setDescription('Determines the NetRef frequency (for both generation and synchronization). 0 = 8 kHz 1 = 1.544 MHz 2 = 2.048 MHz. Access: Online. AC INI-Param: TDMBUSNETREFSPEED')
acSysTDMClockAutoFallBackEnable = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysTDMClockAutoFallBackEnable.setStatus('current')
if mibBuilder.loadTexts: acSysTDMClockAutoFallBackEnable.setDescription('Enables or disables the PSTN trunk auto-fallback feature. Access: Offline. AC INI-Param: TDMBusPSTNAutoClockEnable')
acSysTDMClockAutoFallBackRevertingEnable = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysTDMClockAutoFallBackRevertingEnable.setStatus('current')
if mibBuilder.loadTexts: acSysTDMClockAutoFallBackRevertingEnable.setDescription('Enables/disables the PSTN trunk auto-fallback reverting feature. Access: Offline. AC INI-Param: TDMBusPSTNAutoClockRevertingEnable')
acSysTDMClockBitsReference = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 2, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysTDMClockBitsReference.setStatus('current')
if mibBuilder.loadTexts: acSysTDMClockBitsReference.setDescription('Configures the BITS clock reference when the board source clock is set to BITS and Fallback is set to manual or non-revertive. 1 = REF_1 2 = REF_2. Access: Online. AC INI-Param: TDMBITSClockReference')
acSysTDMClockPLLOutOfRange = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("oor-9-2to12ppm", 0), ("oor-40to52ppm", 1), ("oor-100to130ppm", 2), ("oor-64to83ppm", 3), ("oor-13-8to18ppm", 4), ("oor-24-6to32ppm", 5), ("oor-36-6to47-5ppm", 6), ("oor-52to67-5ppm", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysTDMClockPLLOutOfRange.setStatus('current')
if mibBuilder.loadTexts: acSysTDMClockPLLOutOfRange.setDescription('Determines the valid PPM range outside the Stratum 3 standard. This parameter is only relevant for the TP8410 on the Mediant 3000. This parameter is enabled when bspTimingModuleCfgTimingMode is set to TM_External_MODE(1). One of the following possible values: OOR_9_2to12ppm(0),OOR_40to52ppm(1),OOR_100to130ppm(2),OOR_64to83ppm(3),OOR_13_8to18ppm(4),OOR_24_6to32ppm(5),OOR_36_6to47_5ppm(6),OOR_52to67_5ppm(7). Access: Online. AC INI-Param: PLLOutOfRange')
acSysTDMClockFallbackClock = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 8, 9, 10, 11))).clone(namedValues=NamedValues(("network", 4), ("h110-A", 8), ("h110-B", 9), ("netReference1", 10), ("netReference2", 11)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysTDMClockFallbackClock.setStatus('current')
if mibBuilder.loadTexts: acSysTDMClockFallbackClock.setDescription('Selects the fallback clock source on which board synchronizes in the event of clock failure. 4 = PSTN Network 8 = H.110A 9 = H.110B 10 = NetRef1 11 = NetRef2. Access: Online. AC INI-Param: TDMBusFallbackClock')
acSysTDMBus = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 2, 2))
acSysTDMBusType = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 2, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 8))).clone(namedValues=NamedValues(("mVIP-BUS", 0), ("sC-BUS", 1), ("uSE-FRAMERS", 2), ("qSLAC-BUS", 3), ("uSE-H110-BUS", 4), ("uSE-EXT-BUS", 5), ("aNALOG-BUS", 6), ("uSE-PSTN-SW-ONLY", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysTDMBusType.setStatus('current')
if mibBuilder.loadTexts: acSysTDMBusType.setDescription('Selects the TDM bus interface to be used (only one TDM bus interface can be enabled at one time although more than one can physically exist on the board). Range: 0 = acMVIP_BUS 1 = acSC_BUS 2 = acFRAMERS 4 = acH100_BUS 5 = EXT TDM 6 = Analog 8 = SW Pstn Default: TP-1610 and TP-2810 = 2 TPM-1100 = 5 TP-260 = 1. Access: Offline. AC INI-Param: TDMBUSTYPE')
acSysTDMBusSpeed = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 2, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 3, 4))).clone(namedValues=NamedValues(("acTDMBusSpeed-2Mbps", 0), ("acTDMBusSpeed-4Mbps", 2), ("acTDMBusSpeed-8Mbps", 3), ("acTDMBusSpeed-16Mbps", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysTDMBusSpeed.setStatus('current')
if mibBuilder.loadTexts: acSysTDMBusSpeed.setDescription('Selects the TDM bus speed according to the Bus Type as follows: SC = 0/2/3 H.110/H.100 = 3 MVIP = 0 Where: 0 = 2048 kbps 2 = 4096 kbps 3 = 8192 kbps 4 = 16384 kbps Default: TP-260 = 2 All other boards = 3. Access: Offline. AC INI-Param: TDMBUSSPEED')
acSysTDMBusOutputPort = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 2, 2, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysTDMBusOutputPort.setStatus('current')
if mibBuilder.loadTexts: acSysTDMBusOutputPort.setDescription("Defines the SC/MVIP/H.100/H.110 output port to be used for the board's channel #0. All other channels then occupy the next timeslots sequentially. Range: 0 to 15 for SC/MVIP 0 to 31 for H.110. Access: Offline. AC INI-Param: TDMBUSOUTPUTPORT")
acSysTDMBusOutputStartingChannel = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 2, 2, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysTDMBusOutputStartingChannel.setStatus('current')
if mibBuilder.loadTexts: acSysTDMBusOutputStartingChannel.setDescription("Defines the outgoing TDM Timeslot for board's channel #0. The remaining channels are organized sequentially. Access: Offline. AC INI-Param: TDMBUSOUTPUTSTARTINGCHANNEL")
acSysPCM = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 2, 3))
acSysPCMLawSelect = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 2, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 1, 0))).clone(namedValues=NamedValues(("muLaw", 3), ("aLaw", 1), ("automatic", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysPCMLawSelect.setStatus('current')
if mibBuilder.loadTexts: acSysPCMLawSelect.setDescription('Selects the type of PCM companding law in input/output TDM bus (TDM bus is defined using the TDMBusType parameter). 1 = A-law 3 = Mu-Law. Access: Offline. AC INI-Param: PCMLAWSELECT')
acSysPCMIdlePattern = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 2, 3, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysPCMIdlePattern.setStatus('current')
if mibBuilder.loadTexts: acSysPCMIdlePattern.setDescription('Defines the PCM pattern applied to the E1/T1 timeslot (B-channel) when the channel is idle. Default: 0xFF if PCMLawSelect is Mu-Law 0xD5 if PCMLawSelect is A-Law Range = 0x00 to 0xFF. Access: Offline. AC INI-Param: IDLEPCMPATTERN')
acSysPCMIdleABCDPattern = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 2, 3, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysPCMIdleABCDPattern.setStatus('current')
if mibBuilder.loadTexts: acSysPCMIdleABCDPattern.setDescription('Defines the ABCD (CAS) pattern to be applied on the signaling bus before it is changed by the user or the PSTN protocol. This is only relevant when using PSTN interface with CAS protocols. Range = 0x0 to 0xF. Access: Offline. AC INI-Param: IDLEABCDPATTERN')
acSysPCMSerialPortAuditIntervalMin = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 2, 3, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysPCMSerialPortAuditIntervalMin.setStatus('current')
if mibBuilder.loadTexts: acSysPCMSerialPortAuditIntervalMin.setDescription("Interval timeout in minutes, of the Serial Port audit. In case of 0 value, the audit isn't running. Access: Offline. AC INI-Param: SerialPortAuditIntervalMin")
acSysNetworkConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 3))
acSysIP = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 3, 1))
acSysIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 3, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysIPAddress.setStatus('current')
if mibBuilder.loadTexts: acSysIPAddress.setDescription('Board IP Address. In human readable form. in host byte order e.g. 192.10.1.2 = 0xc00a0102). Users should set the subnet mask to a valid value per the IP address. Access: Online. AC INI-Param: N/A')
acSysIPSubNetAddress = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 3, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysIPSubNetAddress.setStatus('current')
if mibBuilder.loadTexts: acSysIPSubNetAddress.setDescription('Board SubNet Address. In human readable form. (in host byte order e.g. 255.255.255.0 = 0xffffff00). default =255.255.255.0. Access: Online. AC INI-Param: N/A')
acSysIPDefaultGatewayAddress = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 3, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysIPDefaultGatewayAddress.setStatus('current')
if mibBuilder.loadTexts: acSysIPDefaultGatewayAddress.setDescription("Default Gateway Address. Board's Default Gateway IP address. In human readable form. (in host byte order e.g. 192.10.1.255 = 0xc00a01ff). Access: Online. AC INI-Param: N/A")
acSysIPDHCPEnable = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysIPDHCPEnable.setStatus('current')
if mibBuilder.loadTexts: acSysIPDHCPEnable.setDescription("Enables/disables DHCP support. 0 = Disable 1 = Enable After the gateway is powered up, it attempts to communicate with a BootP server. If a BootP server does not respond and if DHCP is enabled, the gateway attempts to obtain its IP address and other network parameters from the DHCP server. Note that throughout the DHCP procedure, the BootP/TFTP application must be deactivated. If it isnt deactivated, the gateway receives a response from the BootP server instead of the DHCP server. For additional information on DHCP, refer to the product documentation. Note: DHCPEnable is a special Hidden parameter. Once defined and saved in flash memory, its assigned value doesnt revert to its default even if the parameter doesn't appear in the INI file. Access: Online. AC INI-Param: DHCPEnable")
acSysIPDHCPSpeedFactor = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 3, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysIPDHCPSpeedFactor.setStatus('current')
if mibBuilder.loadTexts: acSysIPDHCPSpeedFactor.setDescription('Controls the DHCP renewal speed. When set to 0, the DHCP lease renewal is disabled. Otherwise, the renewal time is divided by this factor. Some DHCP-enabled routers perform better when set to 4. 0 = Disable DHCP 1 = Normal 2 to 10 = Fast. Access: Offline. AC INI-Param: DHCPSpeedFactor')
acSysIPDnsPrimaryServerType = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("ipv4", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysIPDnsPrimaryServerType.setStatus('current')
if mibBuilder.loadTexts: acSysIPDnsPrimaryServerType.setDescription("This parameter defines the DNS primary server's IP address type. Access: Offline. AC INI-Param: N/A")
acSysIPDnsPrimaryServer = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 3, 1, 7), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysIPDnsPrimaryServer.setStatus('current')
if mibBuilder.loadTexts: acSysIPDnsPrimaryServer.setDescription("This parameter defines the DNS primary server's IP address. Range = Legal IP address. Access: Offline. AC INI-Param: DNSPriServerIP")
acSysIPDnsSecondaryServerType = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("ipv4", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysIPDnsSecondaryServerType.setStatus('current')
if mibBuilder.loadTexts: acSysIPDnsSecondaryServerType.setDescription("This parameter defines the DNS secondary server's IP address type. Access: Offline. AC INI-Param: N/A")
acSysIPDnsSecondaryServer = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 3, 1, 9), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysIPDnsSecondaryServer.setStatus('current')
if mibBuilder.loadTexts: acSysIPDnsSecondaryServer.setDescription("This parameter defines the DNS secondary server's IP address. Range = Legal IP address. Access: Offline. AC INI-Param: DNSSecServerIP")
acSysIPDHCPLeaseRenewalEnable = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysIPDHCPLeaseRenewalEnable.setStatus('current')
if mibBuilder.loadTexts: acSysIPDHCPLeaseRenewalEnable.setDescription('Enables/disables DHCP renewal support. This paramater will only take effect if DHCPEnable = 0. After the gateway is powered up, it attempts to communicate with a BootP server. If a BootP server does not respond and if DHCP is disabled, the gateway will boot from flash. It will then attempt to communicate with the DHCP server to renew the lease. Note that throughout the DHCP procedure, the BootP/TFTP application must be deactivated. If it isnt deactivated, the gateway receives a response from the BootP server instead of the DHCP server. For additional information on DHCP, refer to the product documentation. For cases where the booting the board via DHCP is not desirable, but renewing DHCP leasing is. if DHCPEnable = 1, this paramater will not have any effect. Access: Online. AC INI-Param: EnableDHCPLeaseRenewal')
acMultipleIP = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 3, 1, 30))
acMultipleIPEnable = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 3, 1, 30, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acMultipleIPEnable.setStatus('obsolete')
if mibBuilder.loadTexts: acMultipleIPEnable.setDescription('Enables the multiple IPs feature. 0 = Disable 1 = Enable. Access: Offline. AC INI-Param: EnableMultipleIPs')
acMultipleIPEnableTPNCPasOAM = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 3, 1, 30, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acMultipleIPEnableTPNCPasOAM.setStatus('current')
if mibBuilder.loadTexts: acMultipleIPEnableTPNCPasOAM.setDescription('Sets the TPNCP location on the Operation, Administration and Management (OAM) network, when operating in multiple IPs mode. If this parameter is set and the machine is working in multiple IPs mode, TPNCP is located on the OAM network. 0 = TPNCP on Control network 1 = TPNCP on OAM network. Access: Offline. AC INI-Param: EnableTPNCPasOAM')
acMultipleIPEnableDNSasOAM = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 3, 1, 30, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acMultipleIPEnableDNSasOAM.setStatus('current')
if mibBuilder.loadTexts: acMultipleIPEnableDNSasOAM.setDescription('Sets the location of the DNS. If this parameter is set and the machine is functioning in multiple IPs mode, the DNS is located on the OAM network. If not, the DNS is on the control network. 0 = Disable 1 = Enable. Access: Offline. AC INI-Param: EnableDNSasOAM')
acMultipleIPEnableNTPasOAM = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 3, 1, 30, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acMultipleIPEnableNTPasOAM.setStatus('current')
if mibBuilder.loadTexts: acMultipleIPEnableNTPasOAM.setDescription('Sets the location of the Network Time Protocol (NTP). If this parameter is set and the machine is functioning in multiple IPs mode, the NTP is located on the OAM network. If not, the NTP is located on the control network. 0 = Disable 1 = Enable. Access: Offline. AC INI-Param: EnableNTPasOAM')
acMultipleIPEnableSCTPasControl = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 3, 1, 30, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acMultipleIPEnableSCTPasControl.setStatus('current')
if mibBuilder.loadTexts: acMultipleIPEnableSCTPasControl.setDescription('Sets the location of the Stream Control Transmission Protocol (SCTP). If this parameter is set and the machine is functioning in multiple IPs mode, the SCTP is located on the control network. If not, the SCTP is located on the OAM network. 0 = Default 1 = Enable. Access: Offline. AC INI-Param: EnableSCTPasControl')
acMultipleIPEnableNetwotkSeparation = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 3, 1, 30, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acMultipleIPEnableNetwotkSeparation.setStatus('current')
if mibBuilder.loadTexts: acMultipleIPEnableNetwotkSeparation.setDescription('Enables Network Physical Separation. Allows the user to have separate port for each Network. Requires suitable hardware. 0 = Disabled 1 = Enabled. Access: Offline. AC INI-Param: ENABLENETWORKPHYSICALSEPARATION')
acMultipleIPInterfaceTableAction = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 3, 1, 30, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("done", 1), ("validateConfiguration", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acMultipleIPInterfaceTableAction.setStatus('current')
if mibBuilder.loadTexts: acMultipleIPInterfaceTableAction.setDescription('This is an action object. Set this to validateConfiguration(2) when you want the configuration in the acSysInterfaceTable to be validated immediately (as opposed to at reset). done(1) is the default value for any GET on this object. The results of the action should be followed in the syslog. Access: Instant. AC INI-Param: N/A')
acNetworkIPTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 3, 1, 30, 21), )
if mibBuilder.loadTexts: acNetworkIPTable.setStatus('obsolete')
if mibBuilder.loadTexts: acNetworkIPTable.setDescription("IP control table. Enables to add, remove or configure the device's networks.")
acNetworkIPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 3, 1, 30, 21, 1), ).setIndexNames((0, "AC-SYSTEM-MIB", "acNetworkIPIndex"))
if mibBuilder.loadTexts: acNetworkIPEntry.setStatus('obsolete')
if mibBuilder.loadTexts: acNetworkIPEntry.setDescription('')
acNetworkIPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 3, 1, 30, 21, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("oam", 1), ("media", 2), ("control", 3))))
if mibBuilder.loadTexts: acNetworkIPIndex.setStatus('obsolete')
if mibBuilder.loadTexts: acNetworkIPIndex.setDescription("The row's index. AC INI-Param: N/A")
acNetworkIPIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 3, 1, 30, 21, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acNetworkIPIfIndex.setStatus('obsolete')
if mibBuilder.loadTexts: acNetworkIPIfIndex.setDescription("The row's index in the IF MIB. The IF MIB is not yet supported and so for now this is the same as the ipCidrRouteIfIndex object. 0 = OAM 1 = Media 2 = Control. AC INI-Param: N/A")
acNetworkIPLocalIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 3, 1, 30, 21, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acNetworkIPLocalIPAddress.setStatus('obsolete')
if mibBuilder.loadTexts: acNetworkIPLocalIPAddress.setDescription('Sets the IP address of the OAM (Operation, Administration & Management) when operating in multiple IPs mode. Range: Legal IP address Default = 0.0.0.0. Access: Online. AC INI-Param: N/A')
acNetworkIPLocalSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 3, 1, 30, 21, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acNetworkIPLocalSubnetMask.setStatus('obsolete')
if mibBuilder.loadTexts: acNetworkIPLocalSubnetMask.setDescription('Sets the Subnet Mask for the OAM interface, when operating in multiple IPs mode. Range: Legal Subnet Default = 0.0.0.0. Access: Online. AC INI-Param: N/A')
acNetworkIPLocalDefGW = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 3, 1, 30, 21, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acNetworkIPLocalDefGW.setStatus('obsolete')
if mibBuilder.loadTexts: acNetworkIPLocalDefGW.setDescription('Sets the Default gateway for the OAM interface when operating in multiple IPs mode. Range: Legal IP address in subnet Default = 0.0.0.0. Access: Online. AC INI-Param: N/A')
acNetworkIPAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 3, 1, 30, 21, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("lock", 1), ("unLock", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acNetworkIPAdminState.setStatus('obsolete')
if mibBuilder.loadTexts: acNetworkIPAdminState.setDescription('Determines if a row is currentely active or not. Lock(1) - the row is in configuration (non active) state. UnLock(2) - row is in active state. Access: Online. AC INI-Param: N/A')
acSysInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 3, 1, 30, 22), )
if mibBuilder.loadTexts: acSysInterfaceTable.setStatus('current')
if mibBuilder.loadTexts: acSysInterfaceTable.setDescription("Multiple Interfaces' Interface Table")
acSysInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 3, 1, 30, 22, 1), ).setIndexNames((0, "AC-SYSTEM-MIB", "acSysInterfaceIndex"))
if mibBuilder.loadTexts: acSysInterfaceEntry.setStatus('current')
if mibBuilder.loadTexts: acSysInterfaceEntry.setDescription('')
acSysInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 3, 1, 30, 22, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)))
if mibBuilder.loadTexts: acSysInterfaceIndex.setStatus('current')
if mibBuilder.loadTexts: acSysInterfaceIndex.setDescription('Index Field for line. AC INI-Param: InterfaceTable_Index')
acSysInterfaceRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 3, 1, 30, 22, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acSysInterfaceRowStatus.setStatus('current')
if mibBuilder.loadTexts: acSysInterfaceRowStatus.setDescription('ROWSTATUS Field for line. AC INI-Param: InterfaceTable_RowStatus')
acSysInterfaceAction = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 3, 1, 30, 22, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("none", 0)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acSysInterfaceAction.setStatus('current')
if mibBuilder.loadTexts: acSysInterfaceAction.setDescription('Mangement Field for ACTIONS. AC INI-Param: InterfaceTable_Action')
acSysInterfaceActionRes = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 3, 1, 30, 22, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("succeeded", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSysInterfaceActionRes.setStatus('current')
if mibBuilder.loadTexts: acSysInterfaceActionRes.setDescription('Mangement Field for ACTIONS RESULT. AC INI-Param: InterfaceTable_ActionRes')
acSysInterfaceApplicationTypes = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 3, 1, 30, 22, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("oam", 0), ("media", 1), ("control", 2), ("oamAndMedia", 3), ("oamAndControl", 4), ("mediaAndControl", 5), ("oamAndMediaAndControl", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acSysInterfaceApplicationTypes.setStatus('current')
if mibBuilder.loadTexts: acSysInterfaceApplicationTypes.setDescription('The type assigned to the interface. Access: Offline. AC INI-Param: InterfaceTable_ApplicationTypes')
acSysInterfaceMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 3, 1, 30, 22, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 10))).clone(namedValues=NamedValues(("iPv6PrefixManual", 3), ("iPv6Manual", 4), ("iPv4Manual", 10)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acSysInterfaceMode.setStatus('current')
if mibBuilder.loadTexts: acSysInterfaceMode.setDescription('Interface configuration mode. Access: Offline. AC INI-Param: InterfaceTable_InterfaceMode')
acSysInterfaceIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 3, 1, 30, 22, 1, 7), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 45))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acSysInterfaceIPAddress.setStatus('current')
if mibBuilder.loadTexts: acSysInterfaceIPAddress.setDescription('IP Address (can be either IPv4 or IPv6) for this interface. Access: Online. AC INI-Param: InterfaceTable_IPAddress')
acSysInterfacePrefixLength = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 3, 1, 30, 22, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acSysInterfacePrefixLength.setStatus('current')
if mibBuilder.loadTexts: acSysInterfacePrefixLength.setDescription('The number of 1 bits in this interfaces netmask. Access: Offline. AC INI-Param: InterfaceTable_PrefixLength')
acSysInterfaceGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 3, 1, 30, 22, 1, 9), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 45))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acSysInterfaceGateway.setStatus('current')
if mibBuilder.loadTexts: acSysInterfaceGateway.setDescription('Default Gateway. Filled in one row only. 0 in others. Access: Offline. AC INI-Param: InterfaceTable_Gateway')
acSysInterfaceVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 3, 1, 30, 22, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acSysInterfaceVlanID.setStatus('current')
if mibBuilder.loadTexts: acSysInterfaceVlanID.setDescription('VLAN ID of this interface. Access: Offline. AC INI-Param: InterfaceTable_VlanID')
acSysInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 3, 1, 30, 22, 1, 11), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acSysInterfaceName.setStatus('current')
if mibBuilder.loadTexts: acSysInterfaceName.setDescription('a 16 character string of this interfaces name. Access: Offline. AC INI-Param: InterfaceTable_InterfaceName')
acSyslog = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 3, 2))
acSyslogServerIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 3, 2, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSyslogServerIPAddress.setStatus('current')
if mibBuilder.loadTexts: acSyslogServerIPAddress.setDescription('This parameter defines the IP address in dotted format notation. e.g., 192.10.1.255 Range = Legal IP address. Access: Instant. AC INI-Param: SYSLOGSERVERIP')
acSyslogEnable = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 3, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSyslogEnable.setStatus('current')
if mibBuilder.loadTexts: acSyslogEnable.setDescription('Enable SysLog protocol log. Access: Online. AC INI-Param: ENABLESYSLOG')
acSyslogAcSyslogServerPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 3, 2, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSyslogAcSyslogServerPortNumber.setStatus('current')
if mibBuilder.loadTexts: acSyslogAcSyslogServerPortNumber.setDescription('Defines the Port number of the Syslog Server. Range = Legal Port Number. Access: Instant. AC INI-Param: SyslogServerPort')
acSysNTP = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 3, 3))
acSysNTPServerIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 3, 3, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysNTPServerIPAddress.setStatus('current')
if mibBuilder.loadTexts: acSysNTPServerIPAddress.setDescription("This parameter is used to define the NTP server's IP address. Range = Legal IP address. Access: Instant. AC INI-Param: NTPServerIP")
acSysNTPUtcOffset = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 3, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-43200, 43200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysNTPUtcOffset.setStatus('current')
if mibBuilder.loadTexts: acSysNTPUtcOffset.setDescription('This parameter is used to define the NTP time to offset, in seconds. Default = 0 Range = -43200 to +43200 seconds. Access: Instant. AC INI-Param: NTPServerUTCOffset')
acSysNTPUpdateInterval = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 3, 3, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysNTPUpdateInterval.setStatus('current')
if mibBuilder.loadTexts: acSysNTPUpdateInterval.setDescription("This parameter defines the NTP update interval, in seconds. It's inadvisable to set it exceeding 1 month (2592000 seconds). Range = 0 to 2592000 seconds Default = 86400 seconds. Access: Instant. AC INI-Param: NTPUpdateInterval")
acSysDayLightSavingTime = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 3, 3, 21))
acSysDayLightSavingTimeMode = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 3, 3, 21, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysDayLightSavingTimeMode.setStatus('current')
if mibBuilder.loadTexts: acSysDayLightSavingTimeMode.setDescription('Determines whether to enable the time ajustment to day light saving time while update time from NTP server. Access: Instant. AC INI-Param: DayLightSavingTimeEnable')
acSysDayLightSavingTimeOffset = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 3, 3, 21, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysDayLightSavingTimeOffset.setStatus('current')
if mibBuilder.loadTexts: acSysDayLightSavingTimeOffset.setDescription('when DayLightSavingTimeEnable is Enable, this parametes determine the fix size in minutes: 0-120. Access: Instant. AC INI-Param: DayLightSavingTimeOffset')
acSysDayLightSavingTimeStart = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 3, 3, 21, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysDayLightSavingTimeStart.setStatus('current')
if mibBuilder.loadTexts: acSysDayLightSavingTimeStart.setDescription('This parameter defines the date and time of starting day light time in current year. Format mo:dd:hh:mm. Access: Instant. AC INI-Param: DayLightSavingTimeStart')
acSysDayLightSavingTimeEnd = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 3, 3, 21, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysDayLightSavingTimeEnd.setStatus('current')
if mibBuilder.loadTexts: acSysDayLightSavingTimeEnd.setDescription('This parameter defines the date and time of ending day light time in current year. Format mo:dd:hh:mm. Access: Instant. AC INI-Param: DayLightSavingTimeEnd')
acSysWEB = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 3, 4))
acSysWEBConfigDisable = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 3, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enable", 0), ("disable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysWEBConfigDisable.setStatus('current')
if mibBuilder.loadTexts: acSysWEBConfigDisable.setDescription('Enables or disables Web Configuration. 0 = Read & Write mode (default) 1 = Read Only mode. Access: Offline. AC INI-Param: DISABLEWEBCONFIG')
acSysWEBHTTPSOnly = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 3, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysWEBHTTPSOnly.setStatus('current')
if mibBuilder.loadTexts: acSysWEBHTTPSOnly.setDescription('Use this parameter to allow only HTTPS connections (force security). When set to 1, unencrypted HTTP (normally, port 80) is blocked. Access: Offline. AC INI-Param: HTTPSOnly')
acSysWEBHTTPSPort = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 3, 4, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysWEBHTTPSPort.setStatus('current')
if mibBuilder.loadTexts: acSysWEBHTTPSPort.setDescription('Determine the local Secure HTTPS port of the device. The default port is 443. Range = 1-65535 (other restrictions may apply in this range). Access: Offline. AC INI-Param: HTTPSPORT')
acSysWEBWebUseRadiusLogin = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 3, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysWEBWebUseRadiusLogin.setStatus('current')
if mibBuilder.loadTexts: acSysWEBWebUseRadiusLogin.setDescription('Uses the RADIUS (Remote Authentication Dial-In User Server/Service) for Web interface authentication. Make sure that ENABLERADIUS is on. Use of this parameter without HTTPSONLY = 1 is not recommended. Access: Instant. AC INI-Param: WEBRADIUSLOGIN')
acSysWEBHTTPSCipherString = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 3, 4, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysWEBHTTPSCipherString.setStatus('current')
if mibBuilder.loadTexts: acSysWEBHTTPSCipherString.setDescription('Requires client certificates for HTTPS connection. The client certificate must be preloaded on the gateway, and its matching private key must be installed on the managing computer. Time and date must be correctly set on the gateway, for the client certificate to be verified. Access: Offline. AC INI-Param: HTTPSCipherString')
acSysWEBDenyAuthenticationTimer = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 3, 4, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 86400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysWEBDenyAuthenticationTimer.setStatus('current')
if mibBuilder.loadTexts: acSysWEBDenyAuthenticationTimer.setDescription('Defines the time the next authentication attempt from the last authentication faild IP should be denied. The range can be any value from 0 - 86400 in seconds. Access: Online. AC INI-Param: DenyAuthenticationTimer ')
acSysWEBWanHttpPort = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 3, 4, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysWEBWanHttpPort.setStatus('current')
if mibBuilder.loadTexts: acSysWEBWanHttpPort.setDescription('Determines the WAN HTTP port of the device. If set to 0, WAN HTTP access will not be possible. Range = 0 to 65535 (other restrictions may apply in this range). Access: Offline. AC INI-Param: WanMgmtHttpPort')
acSysWEBWanHttpsPort = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 3, 4, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysWEBWanHttpsPort.setStatus('current')
if mibBuilder.loadTexts: acSysWEBWanHttpsPort.setDescription('Determines the WAN HTTPS port of the device. If set to 0, WAN HTTPS access will not be possible. Range = 0 to 65535 (other restrictions may apply in this range). Access: Offline. AC INI-Param: WanMgmtHttpsPort')
acSysWEBACLTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 3, 4, 21), )
if mibBuilder.loadTexts: acSysWEBACLTable.setStatus('current')
if mibBuilder.loadTexts: acSysWEBACLTable.setDescription('Access control list for the WEB.')
acSysWEBACLEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 3, 4, 21, 1), ).setIndexNames((0, "AC-SYSTEM-MIB", "acSysWEBACLIndex"))
if mibBuilder.loadTexts: acSysWEBACLEntry.setStatus('current')
if mibBuilder.loadTexts: acSysWEBACLEntry.setDescription('')
acSysWEBACLIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 3, 4, 21, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSysWEBACLIndex.setStatus('current')
if mibBuilder.loadTexts: acSysWEBACLIndex.setDescription('WEB ACL (Access Control List) index. AC INI-Param: N/A')
acSysWEBACLIP = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 3, 4, 21, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysWEBACLIP.setStatus('current')
if mibBuilder.loadTexts: acSysWEBACLIP.setDescription('Allows IP addresses to connect to the Web interface. Set to zeroes to allow all IP addresses. Range: Valid IP address . Access: Instant. AC INI-Param: WEBACCESSLIST')
acSysWEBAccess = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 3, 5))
acSysWEBAccessTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 3, 5, 1), )
if mibBuilder.loadTexts: acSysWEBAccessTable.setStatus('current')
if mibBuilder.loadTexts: acSysWEBAccessTable.setDescription('')
acSysWEBAccessEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 3, 5, 1, 1), ).setIndexNames((0, "AC-SYSTEM-MIB", "acSysWEBAccessIndex"))
if mibBuilder.loadTexts: acSysWEBAccessEntry.setStatus('current')
if mibBuilder.loadTexts: acSysWEBAccessEntry.setDescription('')
acSysWEBAccessRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 3, 5, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysWEBAccessRowStatus.setStatus('current')
if mibBuilder.loadTexts: acSysWEBAccessRowStatus.setDescription('WEB Basic row-status. AC INI-Param: WEBAccessRowStatus')
acSysWEBAccessAction = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 3, 5, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 0))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acSysWEBAccessAction.setStatus('current')
if mibBuilder.loadTexts: acSysWEBAccessAction.setDescription('WEB Access action. AC INI-Param: WEBAccessAction')
acSysWEBAccessActionResult = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 3, 5, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 0))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSysWEBAccessActionResult.setStatus('current')
if mibBuilder.loadTexts: acSysWEBAccessActionResult.setDescription('WEB Access action result. AC INI-Param: N/A')
acSysWEBAccessIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 3, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("administrator", 0), ("monitoringLevel", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSysWEBAccessIndex.setStatus('current')
if mibBuilder.loadTexts: acSysWEBAccessIndex.setDescription('WEB Access index. AC INI-Param: N/A')
acSysWEBAccessUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 3, 5, 1, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 60))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acSysWEBAccessUserName.setStatus('current')
if mibBuilder.loadTexts: acSysWEBAccessUserName.setDescription('WEB Basic user name. Range = String[26]. Access: Instant. AC INI-Param: WEBAccessUserName ')
acSysWEBAccessUserCode = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 3, 5, 1, 1, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 60))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acSysWEBAccessUserCode.setStatus('current')
if mibBuilder.loadTexts: acSysWEBAccessUserCode.setDescription('WEB Basic userAccess. Access: Instant. AC INI-Param: WEBAccessUserCode ')
acSysWEBAccessWebAuthMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 3, 5, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("basicMode", 0), ("digestModeWhenPossible", 1), ("digestModeHTTPOnly", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acSysWEBAccessWebAuthMode.setStatus('current')
if mibBuilder.loadTexts: acSysWEBAccessWebAuthMode.setDescription('Selects HTTP basic (clear text) or digest (MD5) authentication for the web interface. When set to 0, basic authentication (clear text) will be used. When set to 1, digest authentication (MD5) will be used. When set to 2, digest authentication (MD5) will be used for HTTP, while basic authentication will be used for HTTPS. Note that turning on RADIUS login forces basic authentication. Access: Instant. AC INI-Param: WebAuthMode')
acSysNATTraversal = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 3, 6))
acSysTelnet = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 3, 7))
acSysTelnetServerEnable = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 3, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1), ("ssl", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysTelnetServerEnable.setStatus('current')
if mibBuilder.loadTexts: acSysTelnetServerEnable.setDescription('Enables or disables the embedded Telnet server. Telnet is disabled by default for security reasons. 0 = Disable 1= Enable 2 = SSL mode (if available - requires an SSL-aware Telnet client software) SSL mode is not available on the MP-108 / MP-124 media gateways. Access: Instant. AC INI-Param: TelnetServerEnable')
acSysTelnetServerPort = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 3, 7, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysTelnetServerPort.setStatus('current')
if mibBuilder.loadTexts: acSysTelnetServerPort.setDescription('Defines the port number for the embedded Telnet server. Range = Valid port number. Access: Online. AC INI-Param: TELNETSERVERPORT')
acSysTelnetServerIdleDisconnect = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 3, 7, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysTelnetServerIdleDisconnect.setStatus('current')
if mibBuilder.loadTexts: acSysTelnetServerIdleDisconnect.setDescription('This parameter is used to set the timeout for disconnection of an idle Telnet session (minutes). When set to zero, idle sessions are not disconnected. Range: Any number. Access: Offline. AC INI-Param: TelnetServerIdleDisconnect')
acSysTelnetSSHServerPort = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 3, 7, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysTelnetSSHServerPort.setStatus('current')
if mibBuilder.loadTexts: acSysTelnetSSHServerPort.setDescription('Defines the port number for the embedded SSH server. Range = Valid port number. Access: Online. AC INI-Param: SSHServerPort')
acSysTelnetSSHServerEnable = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 3, 7, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysTelnetSSHServerEnable.setStatus('current')
if mibBuilder.loadTexts: acSysTelnetSSHServerEnable.setDescription('Enables or disables the embedded SSH server. 0 = Disable 1= Enable . Access: Online. AC INI-Param: SSHServerEnable')
acSysTelnetSSHAdminKey = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 3, 7, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 510))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysTelnetSSHAdminKey.setStatus('current')
if mibBuilder.loadTexts: acSysTelnetSSHAdminKey.setDescription('This parameter holds an RSA public key for strong authentication to the SSH interface (if enabled). The value should be a base64-encoded string see the Security appendix for additional information. Access: Instant. AC INI-Param: SSHAdminKey')
acSysTelnetSSHRequirePublicKey = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 3, 7, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysTelnetSSHRequirePublicKey.setStatus('current')
if mibBuilder.loadTexts: acSysTelnetSSHRequirePublicKey.setDescription('Enables or disables RSA public keys in SSH. When set to 0, RSA public keys are optional (if SSHAdminKey is set). When set to 1, RSA public keys are mandatory. Access: Instant. AC INI-Param: SSHRequirePublicKey')
acSysTelnetServerWanPort = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 3, 7, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysTelnetServerWanPort.setStatus('current')
if mibBuilder.loadTexts: acSysTelnetServerWanPort.setDescription('Determines the WAN Telnet port of the device. If set to 0, WAN Telnet access will not be possible. Range = 0 to 65535 (other restrictions may apply in this range). Access: Offline. AC INI-Param: WanMgmtTelnetPort')
acSysTelnetWanSSHServerPort = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 3, 7, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysTelnetWanSSHServerPort.setStatus('current')
if mibBuilder.loadTexts: acSysTelnetWanSSHServerPort.setDescription('Determines the WAN Telnet port of the device. If set to 0, WAN Telnet access will not be possible. Range = 0 to 65535 (other restrictions may apply in this range). Access: Offline. AC INI-Param: WanMgmtSSHPort')
acSysHTTPClient = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 3, 8))
acSysHTTPClientAutoUpdatePredefinedTime = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 3, 8, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysHTTPClientAutoUpdatePredefinedTime.setStatus('current')
if mibBuilder.loadTexts: acSysHTTPClientAutoUpdatePredefinedTime.setDescription("Schedules an automatic update to a predefined time of the day. The range is 'HH:MM' (24-hour format). For example: 20:18 . Access: Offline. AC INI-Param: AutoUpdatePredefinedTime")
acSysHTTPClientAutoUpdateFrequency = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 3, 8, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysHTTPClientAutoUpdateFrequency.setStatus('current')
if mibBuilder.loadTexts: acSysHTTPClientAutoUpdateFrequency.setDescription('Determines the number of minutes the gateway waits between automatic updates. The default value is 0 (the update at fixed intervals mechanism is disabled). Range: Any number . Access: Offline. AC INI-Param: AutoUpdateFrequency')
acSysHTTPClientAutoUpdateCmpFile = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 3, 8, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysHTTPClientAutoUpdateCmpFile.setStatus('current')
if mibBuilder.loadTexts: acSysHTTPClientAutoUpdateCmpFile.setDescription("Enables / disables the automatic update mechanism for the cmp file. 0 = The automatic update mechanism doesn't apply to the cmp file (default). 1 = The automatic update mechanism includes the cmp file. Access: Offline. AC INI-Param: AutoUpdateCmpFile")
acSysHTTPClientCmpFileURL = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 3, 8, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysHTTPClientCmpFileURL.setStatus('current')
if mibBuilder.loadTexts: acSysHTTPClientCmpFileURL.setDescription('This parameter provides a link to a software image (CMP file) to be downloaded from a remote server. . Access: Offline. AC INI-Param: CmpFileURL')
acSysHTTPClientIniFileURL = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 3, 8, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysHTTPClientIniFileURL.setStatus('current')
if mibBuilder.loadTexts: acSysHTTPClientIniFileURL.setDescription('This parameter provides a link to an ini file to be downloaded from a remote server. . Access: Offline. AC INI-Param: IniFileURL')
acSysHTTPClientIniFileTemplateURL = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 3, 8, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysHTTPClientIniFileTemplateURL.setStatus('current')
if mibBuilder.loadTexts: acSysHTTPClientIniFileTemplateURL.setDescription('Provides a link to an ini file to be downloaded from a remote server, in addition to IniFileUrl. Range = http://server_name/file, https://server_name/file. Access: Offline. AC INI-Param: IniFileTemplateUrl')
acSysHTTPClientCPTFileURL = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 3, 8, 7), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysHTTPClientCPTFileURL.setStatus('current')
if mibBuilder.loadTexts: acSysHTTPClientCPTFileURL.setDescription('Provides a link to a Call Progress Tones (CPT) file to be downloaded from a remote server. Range = http://server_name/file, https://server_name/file. Access: Instant. AC INI-Param: CptFileUrl')
acSysHTTPClientVPFileURL = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 3, 8, 8), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysHTTPClientVPFileURL.setStatus('current')
if mibBuilder.loadTexts: acSysHTTPClientVPFileURL.setDescription('Provides a link to a Voice Prompts file to be downloaded from a remote server. Range = http://server_name/file, https://server_name/file. Access: Instant. AC INI-Param: VpFileUrl')
acSysHTTPClientPRTFileURL = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 3, 8, 9), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysHTTPClientPRTFileURL.setStatus('current')
if mibBuilder.loadTexts: acSysHTTPClientPRTFileURL.setDescription('Provides a link to a prerecorded tones dat file, to be downloaded from a remote server. Range = http://server_name/file, https://server_name/file. Access: Instant. AC INI-Param: PrtFileUrl')
acSysHTTPClientFXSCoeffFileURL = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 3, 8, 10), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysHTTPClientFXSCoeffFileURL.setStatus('deprecated')
if mibBuilder.loadTexts: acSysHTTPClientFXSCoeffFileURL.setDescription('Provides a link to an FXS coefficients file, to be downloaded from a remote server. Range = http://server_name/file, https://server_name/file. Access: Instant. AC INI-Param: FXSCoeffFileUrl')
acSysHTTPClientFXOCoeffFileURL = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 3, 8, 11), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysHTTPClientFXOCoeffFileURL.setStatus('deprecated')
if mibBuilder.loadTexts: acSysHTTPClientFXOCoeffFileURL.setDescription('Provides a link to an FXO coefficients file, to be downloaded from a remote server. Range = http://server_name/file, https://server_name/file. Access: Instant. AC INI-Param: FXOCoeffFileUrl')
acSysHTTPClientCASFileURL = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 3, 8, 12), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysHTTPClientCASFileURL.setStatus('current')
if mibBuilder.loadTexts: acSysHTTPClientCASFileURL.setDescription('Provides a link to a Channel Associated Signaling (CAS) file to be downloaded from a remote server. Range = http://server_name/file, https://server_name/file. Access: Instant. AC INI-Param: CasFileUrl')
acSysHTTPClientXMLFileUrl = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 3, 8, 13), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysHTTPClientXMLFileUrl.setStatus('current')
if mibBuilder.loadTexts: acSysHTTPClientXMLFileUrl.setDescription("Provides a link to an XML segments file, to be downloaded from a remote server. See the chapter 'Automatic Update Facility' for supported URL options. Access: Instant. AC INI-Param: APSSegmentsFileUrl ")
acSysHTTPClientCoderTableFileUrl = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 3, 8, 14), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysHTTPClientCoderTableFileUrl.setStatus('current')
if mibBuilder.loadTexts: acSysHTTPClientCoderTableFileUrl.setDescription('Provides a link to a coder table (CTBL) file that is to be downloaded from a remote server. . Access: Instant. AC INI-Param: CoderTableFileUrl')
acSysHTTPClientUserInfoFileURL = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 3, 8, 15), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysHTTPClientUserInfoFileURL.setStatus('current')
if mibBuilder.loadTexts: acSysHTTPClientUserInfoFileURL.setDescription('Provides a link to the user information file, to be downloaded using Automatic Update. Relevant only for H323 or SIP controlled devices. Access: Offline. AC INI-Param: UserInfoFileUrl')
acSysHTTPClientDialPlanFileURL = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 3, 8, 16), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysHTTPClientDialPlanFileURL.setStatus('current')
if mibBuilder.loadTexts: acSysHTTPClientDialPlanFileURL.setDescription('URL for downloading a Dial Plan file using the Automatic Update facility. Access: Instant. AC INI-Param: DialPlanFileUrl')
acSysHTTPClientTLSPkeyFileUrl = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 3, 8, 17), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysHTTPClientTLSPkeyFileUrl.setStatus('current')
if mibBuilder.loadTexts: acSysHTTPClientTLSPkeyFileUrl.setDescription('URL for downloading a TLS private key file using the Automatic Update facility. Access: Offline. AC INI-Param: TLSPkeyFileUrl')
acSysHTTPClientTLSCertFileUrl = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 3, 8, 18), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysHTTPClientTLSCertFileUrl.setStatus('current')
if mibBuilder.loadTexts: acSysHTTPClientTLSCertFileUrl.setDescription('URL for downloading a TLS certificate file using the Automatic Update facility. Access: Offline. AC INI-Param: TLSCertFileUrl')
acSysHTTPClientTLSRootFileUrl = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 3, 8, 19), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysHTTPClientTLSRootFileUrl.setStatus('current')
if mibBuilder.loadTexts: acSysHTTPClientTLSRootFileUrl.setDescription('URL for downloading a TLS trusted root certificate file using the Automatic Update facility. Access: Offline. AC INI-Param: TLSRootFileUrl')
acSysHTTPClientWebLogoFileUrl = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 3, 8, 20), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysHTTPClientWebLogoFileUrl.setStatus('current')
if mibBuilder.loadTexts: acSysHTTPClientWebLogoFileUrl.setDescription('URL for downloading a logo file for the web interface using the Automatic Update facility. Access: Offline. AC INI-Param: WebLogoFileUrl')
acSysHTTPClientVideoFontFileURL = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 3, 8, 21), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysHTTPClientVideoFontFileURL.setStatus('current')
if mibBuilder.loadTexts: acSysHTTPClientVideoFontFileURL.setDescription('Indicates the URL for downloading a logo file for the web interface using the Automatic Update facility. Access: Offline. AC INI-Param: VideoFontFileUrl')
acSysHTTPClientV5PortConfFileURL = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 3, 8, 22), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysHTTPClientV5PortConfFileURL.setStatus('current')
if mibBuilder.loadTexts: acSysHTTPClientV5PortConfFileURL.setDescription('Provides a link to a software (V5PortConfiguration file) to be downloaded from a remote server. Access: Instant. AC INI-Param: V5PortConfigurationFileURL')
acSysHTTPClientDataConfigurationFileUrl = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 3, 8, 23), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysHTTPClientDataConfigurationFileUrl.setStatus('current')
if mibBuilder.loadTexts: acSysHTTPClientDataConfigurationFileUrl.setDescription('Provides a link to a data configuration file to be downloaded from a remote server using the Automatic Update facility. Access: Instant. AC INI-Param: RGCONFFILEURL')
acSysSNMP = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 3, 9))
acSysSNMPKeepAliveTrapPort = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 3, 9, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65334))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysSNMPKeepAliveTrapPort.setStatus('current')
if mibBuilder.loadTexts: acSysSNMPKeepAliveTrapPort.setDescription('The port to which the keep alive traps are sent to. Access: Instant. AC INI-Param: KeepAliveTrapPort')
acSysSNMPEmsColdStrartIndication = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 3, 9, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysSNMPEmsColdStrartIndication.setStatus('current')
if mibBuilder.loadTexts: acSysSNMPEmsColdStrartIndication.setDescription("EMS object to be used as indication to the device's state in the 'eyes' of the EMS. Default - 0. Access: Instant. AC INI-Param: N/A")
acSysSNMPWanPort = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 3, 9, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysSNMPWanPort.setStatus('current')
if mibBuilder.loadTexts: acSysSNMPWanPort.setDescription('This parameter specifies the WAN port number for SNMP requests and responses. If set to 0, WAN access to SNMP is disabled. Range = 0 to 65535. Access: Offline. AC INI-Param: WanMgmtSnmpPort')
acSysVLAN = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 3, 10))
acSysVLANOamVlanId = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 3, 10, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysVLANOamVlanId.setStatus('obsolete')
if mibBuilder.loadTexts: acSysVLANOamVlanId.setDescription('Sets the OAMP (Operation, Administration, Management and Provisioning) VLAN identifier. Range: 1 to 4094. Access: Online. AC INI-Param: VLANOAMVLANID')
acSysVLANControlVlanId = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 3, 10, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysVLANControlVlanId.setStatus('obsolete')
if mibBuilder.loadTexts: acSysVLANControlVlanId.setDescription('Sets the control VLAN identifier. Range: 1 to 4094. Access: Online. AC INI-Param: VLANCONTROLVLANID')
acSysVLANMediaVlanId = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 3, 10, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysVLANMediaVlanId.setStatus('obsolete')
if mibBuilder.loadTexts: acSysVLANMediaVlanId.setDescription('Sets the media VLAN identifier. Range: 1 to 4094. Access: Online. AC INI-Param: VLANMEDIAVLANID')
acSysVLANNetworkServiceClassPriority = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 3, 10, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysVLANNetworkServiceClassPriority.setStatus('deprecated')
if mibBuilder.loadTexts: acSysVLANNetworkServiceClassPriority.setDescription('This parameter is used to set the priority for Network service class content. Range = 0 to 7 Default = 7. Access: Online. AC INI-Param: VLANNETWORKSERVICECLASSPRIORITY')
acSysVLANPremiumServiceClassMediaPriority = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 3, 10, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysVLANPremiumServiceClassMediaPriority.setStatus('deprecated')
if mibBuilder.loadTexts: acSysVLANPremiumServiceClassMediaPriority.setDescription('Sets the priority for the Premium service class content and media traffic. Range = 0 to 7 Default = 6. Access: Online. AC INI-Param: VLANPREMIUMSERVICECLASSMEDIAPRIORITY')
acSysVLANGoldServiceClassPriority = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 3, 10, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysVLANGoldServiceClassPriority.setStatus('deprecated')
if mibBuilder.loadTexts: acSysVLANGoldServiceClassPriority.setDescription('Sets the priority for the Gold service class content. Range = 0 to 7 Default = 4. Access: Online. AC INI-Param: VLANGOLDSERVICECLASSPRIORITY')
acSysVLANBronzeServiceClassPriority = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 3, 10, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysVLANBronzeServiceClassPriority.setStatus('deprecated')
if mibBuilder.loadTexts: acSysVLANBronzeServiceClassPriority.setDescription('Sets the priority for the Bronze service class content. Range = 0 to 7 Default = 2. Access: Online. AC INI-Param: VLANBRONZESERVICECLASSPRIORITY')
acSysVLANPremiumServiceClassControlPriority = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 3, 10, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysVLANPremiumServiceClassControlPriority.setStatus('deprecated')
if mibBuilder.loadTexts: acSysVLANPremiumServiceClassControlPriority.setDescription('Sets the priority for the Premium service class content and control traffic. Range = 0 to 7 Default = 6. Access: Online. AC INI-Param: VLANPREMIUMSERVICECLASSCONTROLPRIORITY')
acSysVLANNetworkServiceClassDiffServ = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 3, 10, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysVLANNetworkServiceClassDiffServ.setStatus('current')
if mibBuilder.loadTexts: acSysVLANNetworkServiceClassDiffServ.setDescription('This parameter is used to set the DiffServ for Network service class content. Range = 0 to 63 Default = 48. Access: Online. AC INI-Param: NETWORKSERVICECLASSDIFFSERV')
acSysVLANPremiumServiceClassMediaDiffServ = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 3, 10, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysVLANPremiumServiceClassMediaDiffServ.setStatus('current')
if mibBuilder.loadTexts: acSysVLANPremiumServiceClassMediaDiffServ.setDescription('This parameter is used to set the DiffServ for Premium service class content and media traffic. Range = 0 to 63. Access: Online. AC INI-Param: PREMIUMSERVICECLASSMEDIADIFFSERV')
acSysVLANPremiumServiceClassControlDiffServ = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 3, 10, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysVLANPremiumServiceClassControlDiffServ.setStatus('current')
if mibBuilder.loadTexts: acSysVLANPremiumServiceClassControlDiffServ.setDescription('Sets the DiffServ for the Premium service class content and control traffic. Range: 0 to 63. Access: Online. AC INI-Param: PREMIUMSERVICECLASSCONTROLDIFFSERV')
acSysVLANGoldServiceClassDiffServ = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 3, 10, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysVLANGoldServiceClassDiffServ.setStatus('current')
if mibBuilder.loadTexts: acSysVLANGoldServiceClassDiffServ.setDescription('Sets the DiffServ for the Gold service class content. Range = 0 to 63 Default = 26. Access: Online. AC INI-Param: GOLDSERVICECLASSDIFFSERV')
acSysVLANBronzeServiceClassDiffServ = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 3, 10, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysVLANBronzeServiceClassDiffServ.setStatus('current')
if mibBuilder.loadTexts: acSysVLANBronzeServiceClassDiffServ.setDescription('Sets the DiffServ for the Bronze service class content. Range = 0 to 63 Default = 10. Access: Online. AC INI-Param: BRONZESERVICECLASSDIFFSERV')
acSysVLANVlanNativeVlanId = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 3, 10, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysVLANVlanNativeVlanId.setStatus('current')
if mibBuilder.loadTexts: acSysVLANVlanNativeVlanId.setDescription('Sets the native VLAN identifier. Access: Online. AC INI-Param: VLANNATIVEVLANID')
acSysVLANMode = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 3, 10, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysVLANMode.setStatus('current')
if mibBuilder.loadTexts: acSysVLANMode.setDescription('Sets the VLAN functionality. 0 = Disable 1 = Enable. Access: Offline. AC INI-Param: VLANMODE')
acSysVlanMapTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 3, 10, 21), )
if mibBuilder.loadTexts: acSysVlanMapTable.setStatus('current')
if mibBuilder.loadTexts: acSysVlanMapTable.setDescription('')
acSysVlanMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 3, 10, 21, 1), ).setIndexNames((0, "AC-SYSTEM-MIB", "acSysVlanMapIndex"))
if mibBuilder.loadTexts: acSysVlanMapEntry.setStatus('current')
if mibBuilder.loadTexts: acSysVlanMapEntry.setDescription('')
acSysVlanMapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 3, 10, 21, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 63)))
if mibBuilder.loadTexts: acSysVlanMapIndex.setStatus('current')
if mibBuilder.loadTexts: acSysVlanMapIndex.setDescription('Index Field for line. Internal parameter. AC INI-Param: DiffServToVlanPriority_Index')
acSysVlanMapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 3, 10, 21, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acSysVlanMapRowStatus.setStatus('current')
if mibBuilder.loadTexts: acSysVlanMapRowStatus.setDescription('ROWSTATUS field for line. Internal parameter. AC INI-Param: N/A')
acSysVlanMapAction = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 3, 10, 21, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("none", 0)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acSysVlanMapAction.setStatus('current')
if mibBuilder.loadTexts: acSysVlanMapAction.setDescription('Mangement Field for ACTIONS. Internal parameter. AC INI-Param: N/A')
acSysVlanMapActionRes = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 3, 10, 21, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("succeeded", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSysVlanMapActionRes.setStatus('current')
if mibBuilder.loadTexts: acSysVlanMapActionRes.setDescription('Mangement Field for ACTIONS RESULT. Internal parameter. AC INI-Param: N/A')
acSysVlanMapDiffServ = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 3, 10, 21, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acSysVlanMapDiffServ.setStatus('current')
if mibBuilder.loadTexts: acSysVlanMapDiffServ.setDescription('Mapping of DiffServ (DSCP) to Vlan Priorities (IEEE 802.1p). Access: Online. AC INI-Param: DiffServToVlanPriority_DiffServ')
acSysVlanMapVlanPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 3, 10, 21, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acSysVlanMapVlanPriority.setStatus('current')
if mibBuilder.loadTexts: acSysVlanMapVlanPriority.setDescription('Mapping of DiffServ (DSCP) to Vlan Priorities (IEEE 802.1p). Access: Online. AC INI-Param: DiffServToVlanPriority_VlanPriority')
acSysSCTP = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 3, 11))
acSysSCTPHeartBeatInterval = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 3, 11, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysSCTPHeartBeatInterval.setStatus('current')
if mibBuilder.loadTexts: acSysSCTPHeartBeatInterval.setDescription('Defines the SCTP heartbeat interval. Range: 1 to 3600. Access: Offline. AC INI-Param: SCTPHBInterval')
acSysSCTPT4SACKTimer = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 3, 11, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysSCTPT4SACKTimer.setStatus('current')
if mibBuilder.loadTexts: acSysSCTPT4SACKTimer.setDescription('Defines the SCTP T4 SACK timer interval. Range: 1 to 5. Access: Offline. AC INI-Param: SCTPT4SAckTimer')
acSysSCTPCheckSumMethod = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 3, 11, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("adler", 0), ("crc", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysSCTPCheckSumMethod.setStatus('current')
if mibBuilder.loadTexts: acSysSCTPCheckSumMethod.setDescription('Stream Control Transmission Protocol (SCTP) uses a checksum mechanism in order to authenticate packets on both sides (the receiving side and the transmitting side). Presently, two checksum mechanisms are available: 0 = adler32 checksum mechanism 1 = crc32c checksum mechanism (improved mechanism). Access: Offline. AC INI-Param: SCTPChecksumMethod')
acSysSCTPHostName = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 3, 11, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysSCTPHostName.setStatus('current')
if mibBuilder.loadTexts: acSysSCTPHostName.setDescription('When this parameter is set to any value other than an empty string, SCTP (Stream Control Transmission Protocol) uses the value as the value of the FQDN (Fully Qualified Domain Name) parameter attached to the INIT chunk. In this case, the FQDN parameter replaces any IP address parameters in the INIT chunk. This feature enables overcoming NAT problems where the original IP addresses belonging to the endpoint supports are converted into pseudo addresses. When this parameter is not set (default), the INIT chunk is sent without any FQDN parameter. Range = String[42]. Access: Offline. AC INI-Param: SCTPHOSTNAME')
acSysSCTPAssociationsNum = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 3, 11, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysSCTPAssociationsNum.setStatus('current')
if mibBuilder.loadTexts: acSysSCTPAssociationsNum.setDescription('Defines the maximum number of Stream Control Transmission Protocol (SCTP) associations that can be opened. Range: 1 to 8. Access: Offline. AC INI-Param: SCTPAssociationsNum')
acSysEthernetPort = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 3, 12))
acSysEthernetPortPhyConfiguration = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 3, 12, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 7))).clone(namedValues=NamedValues(("halfDuplex10BaseT", 0), ("fullDuplex10BaseT", 1), ("halfDuplex100BaseT", 2), ("fullDuplex100BaseT", 3), ("autoNegotiate", 4), ("fullDuplex1000BaseT", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysEthernetPortPhyConfiguration.setStatus('current')
if mibBuilder.loadTexts: acSysEthernetPortPhyConfiguration.setDescription('Controls the Ethernet connection mode type. Auto-negotiate falls back to Half-Duplex mode (HD) when the opposite port is not in Auto-negotiate mode. The speed (10 Base-T or 100 Base-TX) in this mode is always configured correctly. 0 = 10 Base-T half-duplex 1 = 10 Base-T full-duplex 2 = 100 Base-TX half-duplex 3 = 100 Base-TX full-duplex 4 = Auto-negotiate. Access: Offline. AC INI-Param: EthernetPhyConfiguration')
acSysSTUN = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 3, 6, 21))
acSysSTUNEnable = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 3, 6, 21, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysSTUNEnable.setStatus('current')
if mibBuilder.loadTexts: acSysSTUNEnable.setDescription('This parameter is used to enable the STUN module, used for NAT traversal of UDP packets. Access: Offline. AC INI-Param: ENABLESTUN')
acSysSTUNPrimaryServerIP = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 3, 6, 21, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysSTUNPrimaryServerIP.setStatus('current')
if mibBuilder.loadTexts: acSysSTUNPrimaryServerIP.setDescription('Defines the primary STUN Server IP address. Range = Legal IP address. Access: Offline. AC INI-Param: STUNSERVERPRIMARYIP')
acSysSTUNSecondaryServerIP = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 3, 6, 21, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysSTUNSecondaryServerIP.setStatus('current')
if mibBuilder.loadTexts: acSysSTUNSecondaryServerIP.setDescription('Defines the secondary STUN server IP address. Range = Legal IP address. Access: Offline. AC INI-Param: STUNSERVERSECONDARYIP')
acSysSTUNBindingLifeTime = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 3, 6, 21, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysSTUNBindingLifeTime.setStatus('current')
if mibBuilder.loadTexts: acSysSTUNBindingLifeTime.setDescription('This parameter is used to define the NAT binding lifetime, in seconds. STUN refreshes the binding information after this time expires. Range = 0 - 2592000. Access: Offline. AC INI-Param: NATBINDINGDEFAULTTIMEOUT')
acSysMiscConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 4))
acSysDiagnostics = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 4, 1))
acSysDiagnosticsEnable = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 99))).clone(namedValues=NamedValues(("disabled", 0), ("builtInTest", 1), ("builtInTestwithPartialFlash", 2), ("builtInTestWithSDRAM", 3), ("builtInTestOnUtopiaVxb", 4), ("internalUse", 99)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysDiagnosticsEnable.setStatus('current')
if mibBuilder.loadTexts: acSysDiagnosticsEnable.setDescription('Checks the correct functionality of the different hardware components on the board. On completion of the check, the board sends an EV_END_BIT value, which contains information on the test results of each hardware component. 0 = No diagnostics (default) 1 = Perform diagnostics (full test of DSPs, PCM, Switch, LAN, PHY and Flash) 2 = Perform diagnostics (full test of DSPs, PCM, Switch, LAN, PHY, but partial, test of Flash, a quicker mode). Access: Offline. AC INI-Param: ENABLEDIAGNOSTICS')
acSysDiagnosticsEnablePerformanceThresholdAlarms = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysDiagnosticsEnablePerformanceThresholdAlarms.setStatus('current')
if mibBuilder.loadTexts: acSysDiagnosticsEnablePerformanceThresholdAlarms.setDescription('This parameter enables sending SNMP traps and Syslog messages when performance of the device is degraded (according to the configured thresholds). Access: Instant. AC INI-Param: PM_EnableThresholdAlarms')
acSysDiagnosticsListOfActivitiesToLog = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 4, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysDiagnosticsListOfActivitiesToLog.setStatus('current')
if mibBuilder.loadTexts: acSysDiagnosticsListOfActivitiesToLog.setDescription('This parameter defines what activities are to be reported by the device in the form of a log message. Parameter format is x,y,z-... where x,y,z are activity codes to be reported by the device. Supported activity codes: PVC - Parameter Value Changes. AFL - Auxiliary Files Loading. DR - Device Reset. FB - Flash Burning. SWU - SoftWareUpdate. ARD - Access to Restricted Domains. NAA - Non Authorized Access. SPC - Sensitive Parameters Changes. Access: Online. AC INI-Param: ActivityListToLog')
acSysGenericINI = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 4, 2))
acSysGenericINILine = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 4, 2, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysGenericINILine.setStatus('current')
if mibBuilder.loadTexts: acSysGenericINILine.setDescription('Flexible INI file line. Access: Offline. AC INI-Param: N/A')
acSysGenericINISecureStartup = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 4, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysGenericINISecureStartup.setStatus('current')
if mibBuilder.loadTexts: acSysGenericINISecureStartup.setDescription('Enables or disables secure startup mode. In this mode, downloading of the INI file is restricted to a URL provided in prior configuration (see parameter IniFileURL) or via DHCP. Access: Offline. AC INI-Param: EnableSecureStartup')
acSysLicenseKey = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 5))
acSysLicenseKeyString = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 5, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysLicenseKeyString.setStatus('current')
if mibBuilder.loadTexts: acSysLicenseKeyString.setDescription('Coded Key specific for board and required features. Access: Offline. AC INI-Param: N/A')
acSysLicenseKeyActiveList = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 5, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 484))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSysLicenseKeyActiveList.setStatus('current')
if mibBuilder.loadTexts: acSysLicenseKeyActiveList.setDescription('List of all avtivated features. AC INI-Param: N/A')
acSysFile = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 6))
acSysFileCpt = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 6, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 47))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSysFileCpt.setStatus('current')
if mibBuilder.loadTexts: acSysFileCpt.setDescription('Defines Call Progress Tone filenames (downloaded by TFTP). AC INI-Param: CALLPROGRESSTONESFILENAME')
acSysFileVp = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 6, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 47))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSysFileVp.setStatus('current')
if mibBuilder.loadTexts: acSysFileVp.setDescription('Defines the name (and path) of the file containing the Voice Prompts. Range = String of ASCII characters. AC INI-Param: VOICEPROMPTSFILENAME')
acSysFilePrerecordedTones = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 6, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 47))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSysFilePrerecordedTones.setStatus('current')
if mibBuilder.loadTexts: acSysFilePrerecordedTones.setDescription('Defines the name (and path) of the file containing the Prerecorded Tones. Range = String of ASCII characters. AC INI-Param: PrerecordedTonesFileName')
acSysFileXml = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 6, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 47))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSysFileXml.setStatus('current')
if mibBuilder.loadTexts: acSysFileXml.setDescription('This parameter is used to indicate the name of the file containing the XML file. AC INI-Param: XMLFileName')
acSysFileExternalCoder = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 6, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 47))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSysFileExternalCoder.setStatus('current')
if mibBuilder.loadTexts: acSysFileExternalCoder.setDescription('Coders table file name. AC INI-Param: CODERTBLFILENAME')
acSysFileUserInfo = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 6, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 47))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSysFileUserInfo.setStatus('current')
if mibBuilder.loadTexts: acSysFileUserInfo.setDescription('The file name to be loaded. AC INI-Param: N/A')
acSysFileDialPlanFileName = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 6, 7), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 47))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSysFileDialPlanFileName.setStatus('current')
if mibBuilder.loadTexts: acSysFileDialPlanFileName.setDescription('This parameter is used to indicate the name of the file containing the Dial Plan. AC INI-Param: gDialPlanFileName')
acSysFileTLSPkeyFileName = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 6, 8), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 47))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSysFileTLSPkeyFileName.setStatus('current')
if mibBuilder.loadTexts: acSysFileTLSPkeyFileName.setDescription('This parameter defines the name of a private key file (internal). Set to blank to regenerate the key and certificate. AC INI-Param: HTTPSPkeyFileName')
acSysFileTLSCertFileName = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 6, 9), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 47))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSysFileTLSCertFileName.setStatus('current')
if mibBuilder.loadTexts: acSysFileTLSCertFileName.setDescription('Defines the name of the HTTPS server certificate file to be downloaded via TFTP. The file must be in base64-encoded PEM format. Range = String[47]. AC INI-Param: HTTPSCertFileName')
acSysFileTLSRootFileName = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 6, 10), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 47))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSysFileTLSRootFileName.setStatus('current')
if mibBuilder.loadTexts: acSysFileTLSRootFileName.setDescription('Defines the name of the HTTPS trusted root certificate file to be downloaded via TFTP. The file must be in base64-encoded PEM format. Range = String[47]. AC INI-Param: HTTPSRootFileName')
acSysFileFirstVideoFontFileName = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 6, 11), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 47))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSysFileFirstVideoFontFileName.setStatus('current')
if mibBuilder.loadTexts: acSysFileFirstVideoFontFileName.setDescription('Indicates the name of the first file containing the Video Font file index. AC INI-Param: VideoFontFIleName')
acSysFileSecondVideoFontFileName = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 6, 12), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 47))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSysFileSecondVideoFontFileName.setStatus('current')
if mibBuilder.loadTexts: acSysFileSecondVideoFontFileName.setDescription('Indicates the name of the second file containing the Video Font file index. AC INI-Param: VideoFontFIleName')
acSysFileThirdVideoFontFileName = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 6, 13), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 47))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSysFileThirdVideoFontFileName.setStatus('current')
if mibBuilder.loadTexts: acSysFileThirdVideoFontFileName.setDescription('Indicates the name of the first file containing the Video Font file index. AC INI-Param: VideoFontFIleName')
acSysFileV5PortConfFileName = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 6, 14), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 47))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSysFileV5PortConfFileName.setStatus('current')
if mibBuilder.loadTexts: acSysFileV5PortConfFileName.setDescription('Indicates the name and location of the V5 Port Configuration file. AC INI-Param: V5PortConfigurationFileName')
acSysSecurity = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 7))
acSysSecurityTLSVersion = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 7, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysSecurityTLSVersion.setStatus('current')
if mibBuilder.loadTexts: acSysSecurityTLSVersion.setDescription('This parameter defines the supported versions of SSL/TLS. When set to 0, SSL/TLS handshakes always start with SSL 2.0 and switch to TLS 1.0 if both peers support it. When set to 1, TLS 1.0 is the only version supported clients attempting to contact the device using SSL 2.0 will be rejected. Possible values: 0 = SSL 2.0, SSL 3.0, and TLS 1.0 are supported (default) 1 = TLS 1.0 will always be used. Access: Offline. AC INI-Param: TLSVersion')
acSysSecurityOcspEnable = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 7, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysSecurityOcspEnable.setStatus('current')
if mibBuilder.loadTexts: acSysSecurityOcspEnable.setDescription('Enables or disables certificate checking via OCSP. Access: Instant. AC INI-Param: OcspEnable')
acSysSecurityOcspServerIPType = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 7, 3), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysSecurityOcspServerIPType.setStatus('current')
if mibBuilder.loadTexts: acSysSecurityOcspServerIPType.setDescription("This parameter defines the OCSP server's IP address Type. Currently - IPv4 only. Access: Instant. AC INI-Param: N/A")
acSysSecurityOcspServerIP = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 7, 4), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysSecurityOcspServerIP.setStatus('current')
if mibBuilder.loadTexts: acSysSecurityOcspServerIP.setDescription("This parameter defines the OCSP server's IP address. Range = Legal IP address. Access: Instant. AC INI-Param: OcspServerIP")
acSysSecurityOcspServerPort = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 7, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysSecurityOcspServerPort.setStatus('current')
if mibBuilder.loadTexts: acSysSecurityOcspServerPort.setDescription("This parameter defines the OCSP server's TCP port number. Range = 1 to 32767 . Access: Instant. AC INI-Param: OcspServerPort")
acSysSecurityOcspDefaultResponse = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 7, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("rejectPeerCertificate", 0), ("allowPeerCertificate", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysSecurityOcspDefaultResponse.setStatus('current')
if mibBuilder.loadTexts: acSysSecurityOcspDefaultResponse.setDescription('Determines default OCSP behavior when the server cannot be contacted. 0 = reject peer certificate. 1 = allow peer certificate. . Access: Instant. AC INI-Param: OcspDefaultResponse')
acSysSecurityTLSFIPS140Mode = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 7, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysSecurityTLSFIPS140Mode.setStatus('current')
if mibBuilder.loadTexts: acSysSecurityTLSFIPS140Mode.setDescription('Determines whether to enable the FIPS140 mode for TLS. Access: Offline. AC INI-Param: TLS_Fips140_Mode')
acSysSecurityGenCsrSubjectName = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 7, 8), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysSecurityGenCsrSubjectName.setStatus('current')
if mibBuilder.loadTexts: acSysSecurityGenCsrSubjectName.setDescription('generate CSR Subject Name. Access: Instant. AC INI-Param: N/A')
acSysSecuritySelfSignedCertificateSubjectName = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 7, 9), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysSecuritySelfSignedCertificateSubjectName.setStatus('current')
if mibBuilder.loadTexts: acSysSecuritySelfSignedCertificateSubjectName.setDescription(' Access: Instant. AC INI-Param: N/A')
acSysSecurityOcspSecondaryServerIPType = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 7, 10), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysSecurityOcspSecondaryServerIPType.setStatus('current')
if mibBuilder.loadTexts: acSysSecurityOcspSecondaryServerIPType.setDescription("This parameter defines the OCSP secondary server's IP address Type. Currently - IPv4 only. Access: Instant. AC INI-Param: N/A")
acSysSecurityOcspSecondaryServerIP = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 7, 11), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysSecurityOcspSecondaryServerIP.setStatus('current')
if mibBuilder.loadTexts: acSysSecurityOcspSecondaryServerIP.setDescription('This parameter defines the OCSP secondary server IP address. Range = Legal IP address. Access: Instant. AC INI-Param: OcspSecondaryServerIP')
acSysSecurityHTTPSRequireClientCertificate = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 7, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysSecurityHTTPSRequireClientCertificate.setStatus('current')
if mibBuilder.loadTexts: acSysSecurityHTTPSRequireClientCertificate.setDescription('Requires client certificates for HTTPS connection. The client certificate must be preloaded on the gateway, and its matching private key must be installed on the managing computer. Time and date must be correctly set on the gateway, for the client certificate to be verified. Access: Offline. AC INI-Param: HTTPSRequireClientCertificate')
acSysSecurityAUPDVerifyCertificates = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 7, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysSecurityAUPDVerifyCertificates.setStatus('current')
if mibBuilder.loadTexts: acSysSecurityAUPDVerifyCertificates.setDescription('This parameter configures the AutoUpdate facility to verify server certificates when using HTTPS. Access: Offline. AC INI-Param: AUPDVerifyCertificates')
acSysIKE = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 7, 21))
acSysIKEPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 7, 21, 1), )
if mibBuilder.loadTexts: acSysIKEPolicyTable.setStatus('deprecated')
if mibBuilder.loadTexts: acSysIKEPolicyTable.setDescription('')
acSysIKEPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 7, 21, 1, 1), ).setIndexNames((0, "AC-SYSTEM-MIB", "acSysIKEPolicyIndex"))
if mibBuilder.loadTexts: acSysIKEPolicyEntry.setStatus('deprecated')
if mibBuilder.loadTexts: acSysIKEPolicyEntry.setDescription('')
acSysIKEPolicyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 7, 21, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 19)))
if mibBuilder.loadTexts: acSysIKEPolicyIndex.setStatus('deprecated')
if mibBuilder.loadTexts: acSysIKEPolicyIndex.setDescription('This parameter is used for the Internet Key Encryption (IKE) Index Field for line. Internal parameter. AC INI-Param: IKE_DB_INDEX')
acSysIKEPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 7, 21, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acSysIKEPolicyRowStatus.setStatus('deprecated')
if mibBuilder.loadTexts: acSysIKEPolicyRowStatus.setDescription('This parameter is used for the Internet Key Encryption (IKE) ROWSTATUS Field for line. Internal parameter. AC INI-Param: IKE_DB_ROWSTATUS')
acSysIKEPolicyAction = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 7, 21, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("none", 0)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acSysIKEPolicyAction.setStatus('deprecated')
if mibBuilder.loadTexts: acSysIKEPolicyAction.setDescription('This parameter is used for the Internet Key Encryption (IKE) Mangement Field for ACTIONS. Internal parameter. AC INI-Param: IKE_DB_ACTION')
acSysIKEPolicyActionRes = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 7, 21, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("succeeded", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSysIKEPolicyActionRes.setStatus('deprecated')
if mibBuilder.loadTexts: acSysIKEPolicyActionRes.setDescription('This parameter is used for the Internet Key Encryption (IKE) Mangement Field for ACTIONS RESULT. Internal parameter. AC INI-Param: IKE_DB_ACTION_RESULT')
acSysIKEPolicyShardKey = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 7, 21, 1, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acSysIKEPolicyShardKey.setStatus('deprecated')
if mibBuilder.loadTexts: acSysIKEPolicyShardKey.setDescription('IKE Policy - Shared Key. Access: Instant. AC INI-Param: IKEPOLICYSHAREDKEY')
acSysIKEPolicyLifeInSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 7, 21, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acSysIKEPolicyLifeInSeconds.setStatus('deprecated')
if mibBuilder.loadTexts: acSysIKEPolicyLifeInSeconds.setDescription('IKE Policy - IKE SA LifeTime in seconds. Access: Instant. AC INI-Param: IKEPOLICYLIFEINSEC')
acSysIKEPolicyLifeInKB = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 7, 21, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acSysIKEPolicyLifeInKB.setStatus('deprecated')
if mibBuilder.loadTexts: acSysIKEPolicyLifeInKB.setDescription('IKE Policy - IKE SA LifeTime in KB. Access: Instant. AC INI-Param: IKEPOLICYLIFEINKB')
acSysIKEPolicyProposal0Encryption = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 7, 21, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 10))).clone(namedValues=NamedValues(("dES-CBC", 1), ("triple-DES-CBC", 2), ("aES", 3), ("not-set", 10)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acSysIKEPolicyProposal0Encryption.setStatus('deprecated')
if mibBuilder.loadTexts: acSysIKEPolicyProposal0Encryption.setDescription('IKE Policy - Proposal 0 encryption type. Access: Instant. AC INI-Param: IKEPOLICYPROPOSALENCRYPTION_0')
acSysIKEPolicyProposal1Encryption = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 7, 21, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 10))).clone(namedValues=NamedValues(("dES-CBC", 1), ("triple-DES-CBC", 2), ("aES", 3), ("not-set", 10)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acSysIKEPolicyProposal1Encryption.setStatus('deprecated')
if mibBuilder.loadTexts: acSysIKEPolicyProposal1Encryption.setDescription('IKE Policy - Proposal 1 encryption type. Access: Instant. AC INI-Param: IKEPOLICYPROPOSALENCRYPTION_1')
acSysIKEPolicyProposal2Encryption = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 7, 21, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 10))).clone(namedValues=NamedValues(("dES-CBC", 1), ("triple-DES-CBC", 2), ("aES", 3), ("not-set", 10)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acSysIKEPolicyProposal2Encryption.setStatus('deprecated')
if mibBuilder.loadTexts: acSysIKEPolicyProposal2Encryption.setDescription('IKE Policy - Proposal 2 encryption type. Access: Instant. AC INI-Param: IKEPOLICYPROPOSALENCRYPTION_2')
acSysIKEPolicyProposal3Encryption = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 7, 21, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 10))).clone(namedValues=NamedValues(("dES-CBC", 1), ("triple-DES-CBC", 2), ("aES", 3), ("not-set", 10)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acSysIKEPolicyProposal3Encryption.setStatus('deprecated')
if mibBuilder.loadTexts: acSysIKEPolicyProposal3Encryption.setDescription('IKE Policy - Proposal 3 encryption type. Access: Instant. AC INI-Param: IKEPOLICYPROPOSALENCRYPTION_3')
acSysIKEPolicyProposal0Authentication = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 7, 21, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 4, 10))).clone(namedValues=NamedValues(("hMAC-SHA-1-96", 2), ("hMAC-MD5-96", 4), ("not-set", 10)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acSysIKEPolicyProposal0Authentication.setStatus('deprecated')
if mibBuilder.loadTexts: acSysIKEPolicyProposal0Authentication.setDescription('IKE Policy - Proposal 0 authentication type. Access: Instant. AC INI-Param: IKEPOLICYPROPOSALAUTHENTICATION_0')
acSysIKEPolicyProposal1Authentication = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 7, 21, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 4, 10))).clone(namedValues=NamedValues(("hMAC-SHA-1-96", 2), ("hMAC-MD5-96", 4), ("not-set", 10)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acSysIKEPolicyProposal1Authentication.setStatus('deprecated')
if mibBuilder.loadTexts: acSysIKEPolicyProposal1Authentication.setDescription('IKE Policy - Proposal 1 authentication type. Access: Instant. AC INI-Param: IKEPOLICYPROPOSALAUTHENTICATION_1')
acSysIKEPolicyProposal2Authentication = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 7, 21, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 4, 10))).clone(namedValues=NamedValues(("hMAC-SHA-1-96", 2), ("hMAC-MD5-96", 4), ("not-set", 10)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acSysIKEPolicyProposal2Authentication.setStatus('deprecated')
if mibBuilder.loadTexts: acSysIKEPolicyProposal2Authentication.setDescription('IKE Policy - Proposal 2 authentication type. Access: Instant. AC INI-Param: IKEPOLICYPROPOSALAUTHENTICATION_2')
acSysIKEPolicyProposal3Authentication = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 7, 21, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 4, 10))).clone(namedValues=NamedValues(("hMAC-SHA-1-96", 2), ("hMAC-MD5-96", 4), ("not-set", 10)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acSysIKEPolicyProposal3Authentication.setStatus('deprecated')
if mibBuilder.loadTexts: acSysIKEPolicyProposal3Authentication.setDescription('IKE Policy - Proposal 3 authentication type. Access: Instant. AC INI-Param: IKEPOLICYPROPOSALAUTHENTICATION_3')
acSysIKEPolicyProposal0DHGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 7, 21, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 10))).clone(namedValues=NamedValues(("dH-786-BIT", 0), ("dH-1024-BIT", 1), ("not-set", 10)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acSysIKEPolicyProposal0DHGroup.setStatus('deprecated')
if mibBuilder.loadTexts: acSysIKEPolicyProposal0DHGroup.setDescription('IKE Policy - Proposal 0 Diffie Hellman Group. Access: Instant. AC INI-Param: IKEPOLICYPROPOSALDHGROUP_0')
acSysIKEPolicyProposal1DHGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 7, 21, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 10))).clone(namedValues=NamedValues(("dH-786-BIT", 0), ("dH-1024-BIT", 1), ("not-set", 10)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acSysIKEPolicyProposal1DHGroup.setStatus('deprecated')
if mibBuilder.loadTexts: acSysIKEPolicyProposal1DHGroup.setDescription('IKE Policy - Proposal 1 Diffie Hellman Group. Access: Instant. AC INI-Param: IKEPOLICYPROPOSALDHGROUP_1')
acSysIKEPolicyProposal2DHGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 7, 21, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 10))).clone(namedValues=NamedValues(("dH-786-BIT", 0), ("dH-1024-BIT", 1), ("not-set", 10)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acSysIKEPolicyProposal2DHGroup.setStatus('deprecated')
if mibBuilder.loadTexts: acSysIKEPolicyProposal2DHGroup.setDescription('IKE Policy - Proposal 2 Diffie Hellman Group. Access: Instant. AC INI-Param: IKEPOLICYPROPOSALDHGROUP_2')
acSysIKEPolicyProposal3DHGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 7, 21, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 10))).clone(namedValues=NamedValues(("dH-786-BIT", 0), ("dH-1024-BIT", 1), ("not-set", 10)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acSysIKEPolicyProposal3DHGroup.setStatus('deprecated')
if mibBuilder.loadTexts: acSysIKEPolicyProposal3DHGroup.setDescription('IKE Policy - Proposal 3 Diffie Hellman Group. Access: Instant. AC INI-Param: IKEPOLICYPROPOSALDHGROUP_3')
acSysIKEPolicyAuthenticationMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 7, 21, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("presharedKey", 0), ("rsaSignature", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acSysIKEPolicyAuthenticationMethod.setStatus('deprecated')
if mibBuilder.loadTexts: acSysIKEPolicyAuthenticationMethod.setDescription('This parameter is used for Internet Key Encryption (IKE) Policy - IKE Authentication Method (Preshared key/ RSA). Access: Offline. AC INI-Param: IKEPOLICYAUTHENTICATIONMETHOD')
acSysIPSec = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 7, 22))
acSysIPSecEnable = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 7, 22, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysIPSecEnable.setStatus('current')
if mibBuilder.loadTexts: acSysIPSecEnable.setDescription('IPsec Enable flag. Access: Offline. AC INI-Param: ENABLEIPSEC')
acSysIPSecDpdMode = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 7, 22, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("periodic", 1), ("ondemand", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysIPSecDpdMode.setStatus('current')
if mibBuilder.loadTexts: acSysIPSecDpdMode.setDescription("IPsec Dead Peer Detection (RFC 3706) - Mode of Operation. One of the following values: '0' - Disabled (Default) '1' - Periodic '2' - On demand. Access: Instant. AC INI-Param: IPSECDPDMODE")
acSysIPSecIKECertificateExtValidate = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 7, 22, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysIPSecIKECertificateExtValidate.setStatus('current')
if mibBuilder.loadTexts: acSysIPSecIKECertificateExtValidate.setDescription('Enables or disables certificate extension checking for IKE. Access: Instant. AC INI-Param: IKEcertificateExtValidate')
acSysIPSecSPDTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 7, 22, 21), )
if mibBuilder.loadTexts: acSysIPSecSPDTable.setStatus('deprecated')
if mibBuilder.loadTexts: acSysIPSecSPDTable.setDescription('')
acSysIPSecSPDEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 7, 22, 21, 1), ).setIndexNames((0, "AC-SYSTEM-MIB", "acSysIPSecSPDIndex"))
if mibBuilder.loadTexts: acSysIPSecSPDEntry.setStatus('deprecated')
if mibBuilder.loadTexts: acSysIPSecSPDEntry.setDescription('')
acSysIPSecSPDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 7, 22, 21, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 19)))
if mibBuilder.loadTexts: acSysIPSecSPDIndex.setStatus('deprecated')
if mibBuilder.loadTexts: acSysIPSecSPDIndex.setDescription('Security Policy Database (SPD) Index Field for line. Internal parameter. AC INI-Param: SPD_INDEX')
acSysIPSecSPDRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 7, 22, 21, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acSysIPSecSPDRowStatus.setStatus('deprecated')
if mibBuilder.loadTexts: acSysIPSecSPDRowStatus.setDescription('Security Policy Database (SPD) ROWSTATUS field for line. Internal parameter. AC INI-Param: SPD_ROWSTATUS')
acSysIPSecSPDAction = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 7, 22, 21, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("none", 0)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acSysIPSecSPDAction.setStatus('deprecated')
if mibBuilder.loadTexts: acSysIPSecSPDAction.setDescription('Security Policy Database (SPD) Mangement Field for ACTIONS. Internal parameter. AC INI-Param: SPD_ACTION')
acSysIPSecSPDActionRes = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 7, 22, 21, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("succeeded", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSysIPSecSPDActionRes.setStatus('deprecated')
if mibBuilder.loadTexts: acSysIPSecSPDActionRes.setDescription('Security Policy Database (SPD) Mangement Field for ACTIONS RESULT. Internal parameter. AC INI-Param: SPD_ACTION_RESULT')
acSysIPSecSPDPolicyRemoteIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 7, 22, 21, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 99))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acSysIPSecSPDPolicyRemoteIPAddr.setStatus('deprecated')
if mibBuilder.loadTexts: acSysIPSecSPDPolicyRemoteIPAddr.setDescription('This parameter is used for Secure Internet Protocol (IPsec) Policy Policy - Remote IP address as IP or Host Name. Access: Instant. AC INI-Param: IPSECPOLICYREMOTEIPADDRESS')
acSysIPSecSPDPolicySrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 7, 22, 21, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acSysIPSecSPDPolicySrcPort.setStatus('deprecated')
if mibBuilder.loadTexts: acSysIPSecSPDPolicySrcPort.setDescription('This parameter is used for Secure Internet Protocol (IPsec) Policy Policy - Source Port. Access: Instant. AC INI-Param: IPSECPOLICYSRCPORT')
acSysIPSecSPDPolicyDestPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 7, 22, 21, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acSysIPSecSPDPolicyDestPort.setStatus('deprecated')
if mibBuilder.loadTexts: acSysIPSecSPDPolicyDestPort.setDescription('This parameter is used for Secure Internet Protocol (IPsec) Policy Policy - Destination Port. Access: Instant. AC INI-Param: IPSECPOLICYDSTPORT')
acSysIPSecSPDPolicyProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 7, 22, 21, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acSysIPSecSPDPolicyProtocol.setStatus('deprecated')
if mibBuilder.loadTexts: acSysIPSecSPDPolicyProtocol.setDescription('This parameter is used for Secure Internet Protocol (IPsec) Policy Policy - Protocol. Access: Instant. AC INI-Param: IPSECPOLICYPROTOCOL')
acSysIPSecSPDKeyExchangeMethodIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 7, 22, 21, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acSysIPSecSPDKeyExchangeMethodIndex.setStatus('deprecated')
if mibBuilder.loadTexts: acSysIPSecSPDKeyExchangeMethodIndex.setDescription('This parameter is used for the Secure Internet Protocol (IPsec) Policy - Index into the Key Exchange Method Table (IKE Table). Access: Offline. AC INI-Param: IPSECPOLICYKEYEXCHANGEMETHODINDEX')
acSysIPSecSPDLifeInSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 7, 22, 21, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acSysIPSecSPDLifeInSeconds.setStatus('deprecated')
if mibBuilder.loadTexts: acSysIPSecSPDLifeInSeconds.setDescription('IPsec Policy - IPSec SA LifeTime in seconds. Access: Instant. AC INI-Param: IPSECPOLICYLIFEINSEC')
acSysIPSecSPDLifeInKB = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 7, 22, 21, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acSysIPSecSPDLifeInKB.setStatus('deprecated')
if mibBuilder.loadTexts: acSysIPSecSPDLifeInKB.setDescription('IPsec Policy - IPSec SA LifeTime in KB. Access: Instant. AC INI-Param: IPSECPOLICYLIFEINKB')
acSysIPSecSPDProposal0Encryption = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 7, 22, 21, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 10))).clone(namedValues=NamedValues(("none", 0), ("dES-CBC", 1), ("triple-DES-CBC", 2), ("aES", 3), ("not-set", 10)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acSysIPSecSPDProposal0Encryption.setStatus('deprecated')
if mibBuilder.loadTexts: acSysIPSecSPDProposal0Encryption.setDescription('IPsec Policy - Proposal 0 encryption type. Access: Instant. AC INI-Param: IPSECPOLICYPROPOSALENCRYPTION_0')
acSysIPSecSPDProposal1Encryption = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 7, 22, 21, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 10))).clone(namedValues=NamedValues(("none", 0), ("dES-CBC", 1), ("triple-DES-CBC", 2), ("aES", 3), ("not-set", 10)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acSysIPSecSPDProposal1Encryption.setStatus('deprecated')
if mibBuilder.loadTexts: acSysIPSecSPDProposal1Encryption.setDescription('IPsec Policy - Proposal 1 encryption type. Access: Instant. AC INI-Param: IPSECPOLICYPROPOSALENCRYPTION_1')
acSysIPSecSPDProposal2Encryption = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 7, 22, 21, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 10))).clone(namedValues=NamedValues(("none", 0), ("dES-CBC", 1), ("triple-DES-CBC", 2), ("aES", 3), ("not-set", 10)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acSysIPSecSPDProposal2Encryption.setStatus('deprecated')
if mibBuilder.loadTexts: acSysIPSecSPDProposal2Encryption.setDescription('IPsec Policy - Proposal 2 encryption type. Access: Instant. AC INI-Param: IPSECPOLICYPROPOSALENCRYPTION_2')
acSysIPSecSPDProposal3Encryption = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 7, 22, 21, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 10))).clone(namedValues=NamedValues(("none", 0), ("dES-CBC", 1), ("triple-DES-CBC", 2), ("aES", 3), ("not-set", 10)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acSysIPSecSPDProposal3Encryption.setStatus('deprecated')
if mibBuilder.loadTexts: acSysIPSecSPDProposal3Encryption.setDescription('IPsec Policy - Proposal 3 encryption type. Access: Instant. AC INI-Param: IPSECPOLICYPROPOSALENCRYPTION_3')
acSysIPSecSPDProposal0Authentication = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 7, 22, 21, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 4, 10))).clone(namedValues=NamedValues(("hMAC-SHA-1-96", 2), ("hMAC-MD5-96", 4), ("not-set", 10)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acSysIPSecSPDProposal0Authentication.setStatus('deprecated')
if mibBuilder.loadTexts: acSysIPSecSPDProposal0Authentication.setDescription('IPsec Policy - Proposal 0 authentication type. Access: Instant. AC INI-Param: IPSECPOLICYPROPOSALAUTHENTICATION_0')
acSysIPSecSPDProposal1Authentication = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 7, 22, 21, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 4, 10))).clone(namedValues=NamedValues(("hMAC-SHA-1-96", 2), ("hMAC-MD5-96", 4), ("not-set", 10)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acSysIPSecSPDProposal1Authentication.setStatus('deprecated')
if mibBuilder.loadTexts: acSysIPSecSPDProposal1Authentication.setDescription('IPsec Policy - Proposal 0 authentication type. Access: Instant. AC INI-Param: IPSECPOLICYPROPOSALAUTHENTICATION_1')
acSysIPSecSPDProposal2Authentication = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 7, 22, 21, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 4, 10))).clone(namedValues=NamedValues(("hMAC-SHA-1-96", 2), ("hMAC-MD5-96", 4), ("not-set", 10)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acSysIPSecSPDProposal2Authentication.setStatus('deprecated')
if mibBuilder.loadTexts: acSysIPSecSPDProposal2Authentication.setDescription('IPsec Policy - Proposal 0 authentication type. Access: Instant. AC INI-Param: IPSECPOLICYPROPOSALAUTHENTICATION_2')
acSysIPSecSPDProposal3Authentication = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 7, 22, 21, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 4, 10))).clone(namedValues=NamedValues(("hMAC-SHA-1-96", 2), ("hMAC-MD5-96", 4), ("not-set", 10)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acSysIPSecSPDProposal3Authentication.setStatus('deprecated')
if mibBuilder.loadTexts: acSysIPSecSPDProposal3Authentication.setDescription('IPsec Policy - Proposal 0 authentication type. Access: Instant. AC INI-Param: IPSECPOLICYPROPOSALAUTHENTICATION_3')
acSysIPSecSPDPolicyLocalIPAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 7, 22, 21, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2))).clone(namedValues=NamedValues(("oam", 0), ("control", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acSysIPSecSPDPolicyLocalIPAddrType.setStatus('deprecated')
if mibBuilder.loadTexts: acSysIPSecSPDPolicyLocalIPAddrType.setDescription('This parameter is used for Secure Internet Protocol (IPsec) Policy - Local IP address type (OAM/Control). Access: Offline. AC INI-Param: IPSECPOLICYLOCALIPADDRESSTYPE')
acSysIPSecSPDMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 7, 22, 21, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("transport", 0), ("tunneling", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acSysIPSecSPDMode.setStatus('deprecated')
if mibBuilder.loadTexts: acSysIPSecSPDMode.setDescription("This parameter is used for Secure Internet Protocol (IPsec) Policy - Mode of Operation (Transport/Tunneling). '0' - Transport '1' - Tunneling. Access: Instant. AC INI-Param: IPSECMODE")
acSysIPSecSPDPolicyRemoteTunnelIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 7, 22, 21, 1, 22), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acSysIPSecSPDPolicyRemoteTunnelIPAddress.setStatus('deprecated')
if mibBuilder.loadTexts: acSysIPSecSPDPolicyRemoteTunnelIPAddress.setDescription('This parameter is used for Secure Internet Protocol (IPsec) Policy - IP Address of the Remote IPSec Tunnel Endpoint. Access: Instant. AC INI-Param: IPSECPOLICYREMOTETUNNELIPADDRESS')
acSysIPSecSPDPolicyLocalTunnelIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 7, 22, 21, 1, 23), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acSysIPSecSPDPolicyLocalTunnelIPAddress.setStatus('deprecated')
if mibBuilder.loadTexts: acSysIPSecSPDPolicyLocalTunnelIPAddress.setDescription('This parameter is used for Secure Internet Protocol (IPsec) Policy - IP Address of the Remote IPSec Tunnel Endpoint. Access: Instant. AC INI-Param: IPSECPOLICYLOCALTUNNELIPADDRESS')
acSysIPSecSPDPolicyRemoteTunnelSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 7, 22, 21, 1, 24), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acSysIPSecSPDPolicyRemoteTunnelSubnetMask.setStatus('deprecated')
if mibBuilder.loadTexts: acSysIPSecSPDPolicyRemoteTunnelSubnetMask.setDescription('This parameter is used for Secure Internet Protocol (IPsec) Policy - Subnet Mask of the Remote IPSec Address. Access: Instant. AC INI-Param: IPSECPOLICYREMOTESUBNETMASK')
acSysIPsecProposalTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 7, 22, 22), )
if mibBuilder.loadTexts: acSysIPsecProposalTable.setStatus('current')
if mibBuilder.loadTexts: acSysIPsecProposalTable.setDescription('IPsec Proposal table')
acSysIPsecProposalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 7, 22, 22, 1), ).setIndexNames((0, "AC-SYSTEM-MIB", "acSysIPsecProposalIndex"))
if mibBuilder.loadTexts: acSysIPsecProposalEntry.setStatus('current')
if mibBuilder.loadTexts: acSysIPsecProposalEntry.setDescription('')
acSysIPsecProposalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 7, 22, 22, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4)))
if mibBuilder.loadTexts: acSysIPsecProposalIndex.setStatus('current')
if mibBuilder.loadTexts: acSysIPsecProposalIndex.setDescription('Index Field for line. AC INI-Param: IPsecProposalTable_Index')
acSysIPsecProposalRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 7, 22, 22, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acSysIPsecProposalRowStatus.setStatus('current')
if mibBuilder.loadTexts: acSysIPsecProposalRowStatus.setDescription('ROWSTATUS Field for line. AC INI-Param: IPsecProposalTable_RowStatus')
acSysIPsecProposalAction = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 7, 22, 22, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("none", 0)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acSysIPsecProposalAction.setStatus('current')
if mibBuilder.loadTexts: acSysIPsecProposalAction.setDescription('Mangement Field for ACTIONS. AC INI-Param: IPsecProposalTable_Action')
acSysIPsecProposalActionRes = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 7, 22, 22, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("succeeded", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSysIPsecProposalActionRes.setStatus('current')
if mibBuilder.loadTexts: acSysIPsecProposalActionRes.setDescription('Mangement Field for ACTIONS RESULT. AC INI-Param: IPsecProposalTable_ActionRes')
acSysIPsecProposalEncryptionAlgorithm = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 7, 22, 22, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("desCbc", 1), ("tripleDesCbc", 2), ("aes", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acSysIPsecProposalEncryptionAlgorithm.setStatus('current')
if mibBuilder.loadTexts: acSysIPsecProposalEncryptionAlgorithm.setDescription('Selects the encryption (privacy) algorithm to use. Access: Online. AC INI-Param: IPsecProposalTable_EncryptionAlgorithm')
acSysIPsecProposalAuthenticationAlgorithm = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 7, 22, 22, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 4))).clone(namedValues=NamedValues(("none", 0), ("hmacSha1-96", 2), ("hmacMd5-96", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acSysIPsecProposalAuthenticationAlgorithm.setStatus('current')
if mibBuilder.loadTexts: acSysIPsecProposalAuthenticationAlgorithm.setDescription('Selects the message authentication (integrity) algorithm to use. Access: Online. AC INI-Param: IPsecProposalTable_AuthenticationAlgorithm')
acSysIPsecProposalDiffieHellmanGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 7, 22, 22, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("group1-768Bits", 0), ("group2-1024Bits", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acSysIPsecProposalDiffieHellmanGroup.setStatus('current')
if mibBuilder.loadTexts: acSysIPsecProposalDiffieHellmanGroup.setDescription('Selects the Diffie-Hellman group to use. Access: Online. AC INI-Param: IPsecProposalTable_DHGroup')
acSysIPsecSATable = MibTable((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 7, 22, 23), )
if mibBuilder.loadTexts: acSysIPsecSATable.setStatus('current')
if mibBuilder.loadTexts: acSysIPsecSATable.setDescription('IPsec SA table')
acSysIPsecSAEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 7, 22, 23, 1), ).setIndexNames((0, "AC-SYSTEM-MIB", "acSysIPsecSAIndex"))
if mibBuilder.loadTexts: acSysIPsecSAEntry.setStatus('current')
if mibBuilder.loadTexts: acSysIPsecSAEntry.setDescription('')
acSysIPsecSAIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 7, 22, 23, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 20)))
if mibBuilder.loadTexts: acSysIPsecSAIndex.setStatus('current')
if mibBuilder.loadTexts: acSysIPsecSAIndex.setDescription('Index Field for line. AC INI-Param: IPsecSATable_Index')
acSysIPsecSARowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 7, 22, 23, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acSysIPsecSARowStatus.setStatus('current')
if mibBuilder.loadTexts: acSysIPsecSARowStatus.setDescription('ROWSTATUS Field for line. AC INI-Param: IPsecSATable_RowStatus')
acSysIPsecSAAction = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 7, 22, 23, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 0))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acSysIPsecSAAction.setStatus('current')
if mibBuilder.loadTexts: acSysIPsecSAAction.setDescription('Mangement Field for ACTIONS. AC INI-Param: IPsecSATable_Action')
acSysIPsecSAActionRes = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 7, 22, 23, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 0))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSysIPsecSAActionRes.setStatus('current')
if mibBuilder.loadTexts: acSysIPsecSAActionRes.setDescription('Mangement Field for ACTIONS RESULT. AC INI-Param: IPsecSATable_ActionRes')
acSysIPsecSARemoteEndpointAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 7, 22, 23, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 98))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acSysIPsecSARemoteEndpointAddress.setStatus('current')
if mibBuilder.loadTexts: acSysIPsecSARemoteEndpointAddress.setDescription('IP address or DNS host name of the peer. Access: Online. AC INI-Param: IPsecSATable_RemoteEndpointAddressOrName')
acSysIPsecSAAuthenticationMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 7, 22, 23, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("presharedKey", 0), ("rSASignature", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acSysIPsecSAAuthenticationMethod.setStatus('current')
if mibBuilder.loadTexts: acSysIPsecSAAuthenticationMethod.setDescription('Selects the method used for peer authentication during IKE main mode. Access: Online. AC INI-Param: IPsecSATable_AuthenticationMethod')
acSysIPsecSASharedKey = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 7, 22, 23, 1, 7), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 79))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acSysIPsecSASharedKey.setStatus('current')
if mibBuilder.loadTexts: acSysIPsecSASharedKey.setDescription('Defines the pre-shared key (in textual format). Access: Online. AC INI-Param: IPsecSATable_SharedKey')
acSysIPsecSASourcePort = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 7, 22, 23, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acSysIPsecSASourcePort.setStatus('current')
if mibBuilder.loadTexts: acSysIPsecSASourcePort.setDescription('Defines the source port to which this configuration applies. Access: Online. AC INI-Param: IPsecSATable_SourcePort')
acSysIPsecSADestPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 7, 22, 23, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acSysIPsecSADestPort.setStatus('current')
if mibBuilder.loadTexts: acSysIPsecSADestPort.setDescription('Defines the destination port to which this configuration applies. Access: Online. AC INI-Param: IPsecSATable_DestPort')
acSysIPsecSAProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 7, 22, 23, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acSysIPsecSAProtocol.setStatus('current')
if mibBuilder.loadTexts: acSysIPsecSAProtocol.setDescription('Defines the protocol type to which this configuration applies. Standard IP protocol numbers should be used, e.g.: 0 = Any protocol (default) 17 = UDP 6 = TCP . Access: Online. AC INI-Param: IPsecSATable_Protocol')
acSysIPsecSAPhase1SaLifetimeInSec = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 7, 22, 23, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acSysIPsecSAPhase1SaLifetimeInSec.setStatus('current')
if mibBuilder.loadTexts: acSysIPsecSAPhase1SaLifetimeInSec.setDescription('Determines the duration (in seconds) for which the negotiated IKE SA (main mode) is valid. After the time expires, the SA is re-negotiated. Access: Online. AC INI-Param: IPsecSATable_Phase1SaLifetimeInSec')
acSysIPsecSAPhase2SaLifetimeInSec = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 7, 22, 23, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acSysIPsecSAPhase2SaLifetimeInSec.setStatus('current')
if mibBuilder.loadTexts: acSysIPsecSAPhase2SaLifetimeInSec.setDescription('Determines the duration (in seconds) for which the negotiated IPSec SA (quick mode) is valid. After the time expires, the SA is re-negotiated. Access: Online. AC INI-Param: IPsecSATable_Phase2SaLifetimeInSec')
acSysIPsecSAPhase2SaLifetimeInKB = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 7, 22, 23, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acSysIPsecSAPhase2SaLifetimeInKB.setStatus('current')
if mibBuilder.loadTexts: acSysIPsecSAPhase2SaLifetimeInKB.setDescription('Determines the maximum volume of traffic (in kilobytes) for which the negotiated IPSec SA (quick mode) is valid. Access: Online. AC INI-Param: IPsecSATable_Phase2SaLifetimeInKB')
acSysIPsecSADPDmode = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 7, 22, 23, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("dPDDisabled", 0), ("dPDPeriodic", 1), ("dPDOnDemand", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acSysIPsecSADPDmode.setStatus('current')
if mibBuilder.loadTexts: acSysIPsecSADPDmode.setDescription('Controls dead peer detection (DPD) as per RFC 3706. Access: Online. AC INI-Param: IPsecSATable_DPDmode')
acSysIPsecSAIPsecMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 7, 22, 23, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("transport", 0), ("tunnel", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acSysIPsecSAIPsecMode.setStatus('current')
if mibBuilder.loadTexts: acSysIPsecSAIPsecMode.setDescription('Selects the IPSec mode of operation. 0 = Transport mode (default) 1 = Tunnel mode . Access: Online. AC INI-Param: IPsecSATable_IPsecMode')
acSysIPsecSARemoteTunnelAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 7, 22, 23, 1, 16), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 45))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acSysIPsecSARemoteTunnelAddress.setStatus('current')
if mibBuilder.loadTexts: acSysIPsecSARemoteTunnelAddress.setDescription('IP address of the peer router. Access: Online. AC INI-Param: IPsecSATable_RemoteTunnelAddress')
acSysIPsecSARemoteSubnetIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 7, 22, 23, 1, 17), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 45))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acSysIPsecSARemoteSubnetIPAddress.setStatus('current')
if mibBuilder.loadTexts: acSysIPsecSARemoteSubnetIPAddress.setDescription('IP address of the remote subnetwork. Access: Online. AC INI-Param: IPsecSATable_RemoteSubnetIPAddress')
acSysIPsecSARemoteSubnetPrefixLength = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 7, 22, 23, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acSysIPsecSARemoteSubnetPrefixLength.setStatus('current')
if mibBuilder.loadTexts: acSysIPsecSARemoteSubnetPrefixLength.setDescription('Prefix length of the Remote Subnet IP Address parameter (in bits). Access: Online. AC INI-Param: IPsecSATable_RemoteSubnetPrefixLength')
acFirewall = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 7, 23))
acSysAccessListTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 7, 23, 1), )
if mibBuilder.loadTexts: acSysAccessListTable.setStatus('current')
if mibBuilder.loadTexts: acSysAccessListTable.setDescription('')
acSysAccessListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 7, 23, 1, 1), ).setIndexNames((0, "AC-SYSTEM-MIB", "acSysAccessListIndex"))
if mibBuilder.loadTexts: acSysAccessListEntry.setStatus('current')
if mibBuilder.loadTexts: acSysAccessListEntry.setDescription('')
acSysAccessListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 7, 23, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 50)))
if mibBuilder.loadTexts: acSysAccessListIndex.setStatus('current')
if mibBuilder.loadTexts: acSysAccessListIndex.setDescription('Index Field for line. Internal parameter. AC INI-Param: ACCESSLIST_Index')
acSysAccessListRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 7, 23, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acSysAccessListRowStatus.setStatus('current')
if mibBuilder.loadTexts: acSysAccessListRowStatus.setDescription('ROWSTATUS field for line. Internal parameter. AC INI-Param: N/A')
acSysAccessListAction = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 7, 23, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("none", 0)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acSysAccessListAction.setStatus('current')
if mibBuilder.loadTexts: acSysAccessListAction.setDescription('Mangement Field for ACTIONS. Internal parameter. AC INI-Param: N/A')
acSysAccessListActionRes = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 7, 23, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("succeeded", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSysAccessListActionRes.setStatus('current')
if mibBuilder.loadTexts: acSysAccessListActionRes.setDescription('Mangement Field for ACTIONS RESULT. Internal parameter. AC INI-Param: N/A')
acSysAccessListSourceIP = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 7, 23, 1, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 60))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acSysAccessListSourceIP.setStatus('current')
if mibBuilder.loadTexts: acSysAccessListSourceIP.setDescription('Source IP for access rule. Access: Online. AC INI-Param: ACCESSLIST_Source_IP')
acSysAccessListNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 7, 23, 1, 1, 6), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acSysAccessListNetMask.setStatus('current')
if mibBuilder.loadTexts: acSysAccessListNetMask.setDescription('Mask for this access rule (bitwise ANDed with the source IP of the packet). Access: Online. AC INI-Param: ACCESSLIST_Net_Mask')
acSysAccessListStartPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 7, 23, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acSysAccessListStartPort.setStatus('current')
if mibBuilder.loadTexts: acSysAccessListStartPort.setDescription('Port range - start. Access: Online. AC INI-Param: ACCESSLIST_Start_Port')
acSysAccessListEndPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 7, 23, 1, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acSysAccessListEndPort.setStatus('current')
if mibBuilder.loadTexts: acSysAccessListEndPort.setDescription('Port range - end. Access: Online. AC INI-Param: ACCESSLIST_End_Port')
acSysAccessListProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 7, 23, 1, 1, 9), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acSysAccessListProtocol.setStatus('current')
if mibBuilder.loadTexts: acSysAccessListProtocol.setDescription('IP user-level protocol (TCP, UDP, ICMP, ESP, SIP, MGCP, TPNCP, ANY or numeric value). Access: Online. AC INI-Param: ACCESSLIST_Protocol')
acSysAccessListPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 7, 23, 1, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acSysAccessListPacketSize.setStatus('current')
if mibBuilder.loadTexts: acSysAccessListPacketSize.setDescription('Maximum packet size (0 = unused). Access: Online. AC INI-Param: ACCESSLIST_Packet_Size')
acSysAccessListByteRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 7, 23, 1, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acSysAccessListByteRate.setStatus('current')
if mibBuilder.loadTexts: acSysAccessListByteRate.setDescription('Allowed traffic in bytes per second (0 = unused). Access: Online. AC INI-Param: ACCESSLIST_Byte_Rate')
acSysAccessListByteBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 7, 23, 1, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acSysAccessListByteBurst.setStatus('current')
if mibBuilder.loadTexts: acSysAccessListByteBurst.setDescription('Allowed traffic burst in bytes (0 = unused). Access: Online. AC INI-Param: ACCESSLIST_Byte_Burst')
acSysAccessListAllowType = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 7, 23, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notSet", 0), ("allow", 1), ("block", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acSysAccessListAllowType.setStatus('current')
if mibBuilder.loadTexts: acSysAccessListAllowType.setDescription('Allow or block traffic matching this rule. Access: Online. AC INI-Param: ACCESSLIST_Allow_Type')
acSysAccessListMatchCount = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 7, 23, 1, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSysAccessListMatchCount.setStatus('current')
if mibBuilder.loadTexts: acSysAccessListMatchCount.setDescription('Statistics: number of matched packets. AC INI-Param: ACCESSLIST_MatchCount')
acSysMediaEncription = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 7, 24))
acSysMediaEncriptionRTPAuthenticationDisableTx = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 7, 24, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("inactive", 0), ("active", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysMediaEncriptionRTPAuthenticationDisableTx.setStatus('current')
if mibBuilder.loadTexts: acSysMediaEncriptionRTPAuthenticationDisableTx.setDescription('On a secured RTP session, determines whether to enable Authentication on transmitted RTP packets. One of the following values: 0 = Enable 1 = Disable. Access: Online. AC INI-Param: RTPAuthenticationDisableTx')
acSysMediaEncriptionRTPAuthenticationDisableRx = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 7, 24, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("inactive", 0), ("active", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysMediaEncriptionRTPAuthenticationDisableRx.setStatus('current')
if mibBuilder.loadTexts: acSysMediaEncriptionRTPAuthenticationDisableRx.setDescription('On a secured RTP session, determines whether to enable Authentication on received RTP packets 0 = Enable 1 = Disable. Access: Online. AC INI-Param: RTPAuthenticationDisableRx')
acSysMediaEncriptionRTPEncryptionDisableTx = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 7, 24, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("inactive", 0), ("active", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysMediaEncriptionRTPEncryptionDisableTx.setStatus('current')
if mibBuilder.loadTexts: acSysMediaEncriptionRTPEncryptionDisableTx.setDescription('On a secured RTP session, determines whether to enable Encryption on transmitted RTP packets. One of the following values: 0 = Enable 1 = Disable. Access: Online. AC INI-Param: RTPEncryptionDisableTx')
acSysMediaEncriptionRTPEncryptionDisableRx = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 7, 24, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("inactive", 0), ("active", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysMediaEncriptionRTPEncryptionDisableRx.setStatus('current')
if mibBuilder.loadTexts: acSysMediaEncriptionRTPEncryptionDisableRx.setDescription('On a secured RTP session, determines whether to enable Encryption on transmitted RTP packets. One of the following values: 0 = Enable 1 = Disable. Access: Online. AC INI-Param: RTPEncryptionDisableRx')
acSysMediaEncriptionRTCPEncryptionDisableTx = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 7, 24, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("inactive", 0), ("active", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysMediaEncriptionRTCPEncryptionDisableTx.setStatus('current')
if mibBuilder.loadTexts: acSysMediaEncriptionRTCPEncryptionDisableTx.setDescription('On a secured RTP session, determines whether to enable Encryption on transmitted RTCP packets. One of the following values: 0 = Enable 1 = Disable. Access: Online. AC INI-Param: RTCPEncryptionDisableTx')
acSysMediaEncriptionRTCPEncryptionDisableRx = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 7, 24, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("inactive", 0), ("active", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysMediaEncriptionRTCPEncryptionDisableRx.setStatus('current')
if mibBuilder.loadTexts: acSysMediaEncriptionRTCPEncryptionDisableRx.setDescription('On a secured RTP session, determines whether to enable Encryption on received RTCP packets. One of the following values: 0 = Enable 1 = Disable. Access: Online. AC INI-Param: RTCPEncryptionDisableRx')
acSys802dot1x = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 7, 25))
acSys802dot1xMode = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 7, 25, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("disabled", 0), ("eapMd5", 1), ("protectedEap", 2), ("eapTls", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSys802dot1xMode.setStatus('current')
if mibBuilder.loadTexts: acSys802dot1xMode.setDescription('Enables support for IEEE 802.1x physical port security. 0 = Disabled 1 = EAP-MD5 2 = Protected EAP (PEAP) 3 = EAP-TLS . Access: Instant. AC INI-Param: 802.1xMode')
acSys802dot1xUsername = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 7, 25, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSys802dot1xUsername.setStatus('current')
if mibBuilder.loadTexts: acSys802dot1xUsername.setDescription('Username for IEEE 802.1x support. Access: Instant. AC INI-Param: 802.1xUsername')
acSys802dot1xPassword = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 7, 25, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSys802dot1xPassword.setStatus('current')
if mibBuilder.loadTexts: acSys802dot1xPassword.setDescription('Password for IEEE 802.1x support. Access: Instant. AC INI-Param: 802.1xPassword')
acSys802dot1xVerifyPeerCertificate = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 7, 25, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSys802dot1xVerifyPeerCertificate.setStatus('current')
if mibBuilder.loadTexts: acSys802dot1xVerifyPeerCertificate.setDescription('Verify Peer Certificate for IEEE 802.1x support. Access: Instant. AC INI-Param: 802.1xVerifyPeerCertificate')
acSysSRTP = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 7, 24, 21))
acSysSRTPPacketMKISize = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 7, 24, 21, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysSRTPPacketMKISize.setStatus('current')
if mibBuilder.loadTexts: acSysSRTPPacketMKISize.setDescription('Determines the size of the parameter Master Key Identifier (MKI) in SRTP Tx packets. One of the following values: 0 = MKI Disabled 1 - 4 = size (bytes of MKI). Access: Online. AC INI-Param: SRTPTxPacketMKISize')
acSysSerialIF = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 8))
acSysSerialIFBaudRate = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 8, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 115200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysSerialIFBaudRate.setStatus('current')
if mibBuilder.loadTexts: acSysSerialIFBaudRate.setDescription('Enables changes to the Serial Baud Rate for Simplified Message Desk Interface (SMDI). Range = Any value accepted. Recommended standard values: 1200, 2400, 9600, 14400, 19200, 38400, 57600, 115200. Access: Offline. AC INI-Param: SerialBaudRate')
acSysSerialIFData = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 8, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(7, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysSerialIFData.setStatus('current')
if mibBuilder.loadTexts: acSysSerialIFData.setDescription('Changes the serial data bit for the Simplified Message Desk Interface (SMDI). 7 = 7 Bit 8 = 8 Bit. Access: Offline. AC INI-Param: SerialData')
acSysSerialIFParity = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 8, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("odd", 1), ("even", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysSerialIFParity.setStatus('current')
if mibBuilder.loadTexts: acSysSerialIFParity.setDescription('Changes the serial parity for the Simplified Message Desk Interface (SMDI). 0 = None 1 = Odd 2 = Even. Access: Offline. AC INI-Param: SerialParity')
acSysSerialIFStop = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 8, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysSerialIFStop.setStatus('current')
if mibBuilder.loadTexts: acSysSerialIFStop.setDescription('Changes the serial stop for the Simplified Message Desk Interface (SMDI). 1 = 1 Bit 2 = 2 Bit. Access: Offline. AC INI-Param: SerialStop')
acSysSerialIFFlowControl = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 8, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("none", 0), ("hardware", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysSerialIFFlowControl.setStatus('current')
if mibBuilder.loadTexts: acSysSerialIFFlowControl.setDescription('Changes the serial flow control for the Simplified Message Desk Interface (SMDI). 0 = None 1 = Hardware. Access: Offline. AC INI-Param: SerialFlowControl')
acVoiceStream = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 9))
acVoiceStreamStatus = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acVoiceStreamStatus.setStatus('current')
if mibBuilder.loadTexts: acVoiceStreamStatus.setDescription('Enables/disables the voice streaming for all voice source types (HTTP, NFS, Local Storage). When enabled, the module requires some system resources, such as tasks and memory allocation. 0 = Disable 1 = Enable. Access: Offline. AC INI-Param: N/A')
acVoiceStreamUploadMethod = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 9, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("httpPostMethod", 0), ("httpPutMethod", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acVoiceStreamUploadMethod.setStatus('current')
if mibBuilder.loadTexts: acVoiceStreamUploadMethod.setDescription('Defines the HTTP request type for uploading the voice stream to the file server. 0 = POST 1 = PUT. Access: Offline. AC INI-Param: N/A')
acVoiceStreamUploadPostUri = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 9, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acVoiceStreamUploadPostUri.setStatus('current')
if mibBuilder.loadTexts: acVoiceStreamUploadPostUri.setDescription('Defines the URI used on the POST request, to upload voice data from the media server to a web server. This parameter is used only when using the HTTP POST for recording and the command is not issued by the Lib (tpncp protocol). The path needs to be set to the upload script on the web server. . Access: Offline. AC INI-Param: N/A')
acSysAMS = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 10))
acSysAMSProfile = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 10, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysAMSProfile.setStatus('current')
if mibBuilder.loadTexts: acSysAMSProfile.setDescription('Enable/Disable AMS Advanced IVR play functionality. 0 = Disable 1 = Enable. Access: Offline. AC INI-Param: AMSProfile')
acSysAMSApsIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 10, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysAMSApsIpAddress.setStatus('current')
if mibBuilder.loadTexts: acSysAMSApsIpAddress.setDescription('Sets the destination UDP port to which the Heartbeat Packets are sent. Range = IP address in dotted notation xxx.xxx.xxx.xxx Default = 0.0.0.0. Access: Offline. AC INI-Param: HeartbeatDestIP')
acSysAMSApsPort = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 10, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 64000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysAMSApsPort.setStatus('current')
if mibBuilder.loadTexts: acSysAMSApsPort.setDescription('Sets the destination UDP port to which the heartbeat packets are sent. Access: Offline. AC INI-Param: HeartbeatDestPort')
acSysAMSPrimaryLanguage = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 10, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysAMSPrimaryLanguage.setStatus('current')
if mibBuilder.loadTexts: acSysAMSPrimaryLanguage.setDescription('Defines the Primary Language for the AMS. Range = String[3] - language ISO string. Access: Instant. AC INI-Param: AMSPrimaryLanguage')
acSysAMSSecondaryLanguage = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 10, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysAMSSecondaryLanguage.setStatus('current')
if mibBuilder.loadTexts: acSysAMSSecondaryLanguage.setDescription('Defines the Secondary Language for the AMS. Range = String[3] - language ISO string. Access: Instant. AC INI-Param: AMSSecondaryLanguage')
acSysAMSAPSProfile = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 10, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vpDatProvidedAudio", 0), ("apsProvidedAudio", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysAMSAPSProfile.setStatus('current')
if mibBuilder.loadTexts: acSysAMSAPSProfile.setDescription('Indicates if the system should expect to use APS bundle (vp.dat and segments.xml files), or if the system should expect the vp.dat file only. A 1 means that an APS bundle should be used. A 0 means that the system should use vp.dat only. The default setting is 1, meaning expect APS bundle. Access: Offline. AC INI-Param: APSEnabled')
acSysAMSForceRepositoryEnable = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 10, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysAMSForceRepositoryEnable.setStatus('current')
if mibBuilder.loadTexts: acSysAMSForceRepositoryEnable.setDescription('Indicates that a new audio repository (consisting of VP and XML files) should always be uploaded to the board regardless of whether signals are still being played on the old repository. Access: Instant. AC INI-Param: AMSForceRepositoryUpdateEnabled')
acSysNetworkFileSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 11))
acSysNFSTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 11, 21), )
if mibBuilder.loadTexts: acSysNFSTable.setStatus('current')
if mibBuilder.loadTexts: acSysNFSTable.setDescription('')
acSysNFSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 11, 21, 1), ).setIndexNames((0, "AC-SYSTEM-MIB", "acSysNFSIndex"))
if mibBuilder.loadTexts: acSysNFSEntry.setStatus('current')
if mibBuilder.loadTexts: acSysNFSEntry.setDescription('')
acSysNFSIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 11, 21, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)))
if mibBuilder.loadTexts: acSysNFSIndex.setStatus('current')
if mibBuilder.loadTexts: acSysNFSIndex.setDescription('Index Field for line. Internal parameter. AC INI-Param: NFSServers_Index')
acSysNFSRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 11, 21, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acSysNFSRowStatus.setStatus('current')
if mibBuilder.loadTexts: acSysNFSRowStatus.setDescription('ROWSTATUS field for line. Internal parameter. AC INI-Param: N/A')
acSysNFSAction = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 11, 21, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("none", 0)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acSysNFSAction.setStatus('current')
if mibBuilder.loadTexts: acSysNFSAction.setDescription('Mangement Field for ACTIONS. Internal parameter. AC INI-Param: N/A')
acSysNFSActionRes = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 11, 21, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("succeeded", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSysNFSActionRes.setStatus('current')
if mibBuilder.loadTexts: acSysNFSActionRes.setDescription('Mangement Field for ACTIONS RESULT. Internal parameter. AC INI-Param: N/A')
acSysNFSHostOrIP = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 11, 21, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acSysNFSHostOrIP.setStatus('current')
if mibBuilder.loadTexts: acSysNFSHostOrIP.setDescription('The domain name or IP address of the NFS server. If a domain name is provided, then a DNS server must be configured. Access: Online. AC INI-Param: NFSServers_HostOrIP')
acSysNFSRootPath = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 11, 21, 1, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acSysNFSRootPath.setStatus('current')
if mibBuilder.loadTexts: acSysNFSRootPath.setDescription('Path to the root of the exported file system. Access: Online. AC INI-Param: NFSServers_RootPath')
acSysNFSNfsVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 11, 21, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("v2", 2), ("v3", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acSysNFSNfsVersion.setStatus('current')
if mibBuilder.loadTexts: acSysNFSNfsVersion.setDescription('NFS version to use with this remote file system, 2 or 3 (default). Access: Online. AC INI-Param: NFSServers_NfsVersion')
acSysNFSAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 11, 21, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("null", 0), ("unix", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acSysNFSAuthType.setStatus('current')
if mibBuilder.loadTexts: acSysNFSAuthType.setDescription('Identifies the authentication method used with this remote file system, 0 for AUTH_NULL, 1 for AUTH_UNIX (default). Access: Online. AC INI-Param: NFSServers_AuthType')
acSysNFSUID = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 11, 21, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acSysNFSUID.setStatus('current')
if mibBuilder.loadTexts: acSysNFSUID.setDescription('User ID used in authentication if using AUTH_UNIX. The default is 0. Access: Online. AC INI-Param: NFSServers_UID')
acSysNFSGID = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 11, 21, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acSysNFSGID.setStatus('current')
if mibBuilder.loadTexts: acSysNFSGID.setDescription('Group ID used in authentication if using AUTH_UNIX. The default is 1. Access: Online. AC INI-Param: NFSServers_GID')
acSysNFSVlanType = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 11, 21, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("oam", 0), ("media", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acSysNFSVlanType.setStatus('current')
if mibBuilder.loadTexts: acSysNFSVlanType.setDescription('The VLAN, OAM(0) or Media(1), to use when accessing this remote file system. The default is to use the media VLAN. This parameters applies only if multiple IP addresses are configured on this board. Access: Online. AC INI-Param: NFSServers_VlanType')
acSysHA = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 12))
acSysHAGlobalIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 12, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysHAGlobalIPAddress.setStatus('obsolete')
if mibBuilder.loadTexts: acSysHAGlobalIPAddress.setDescription('Defines the M3K global IP address to be used by the active module in HA system. (Dotted format notation. e.g., 192.10.1.255). Range = Legal IP address. Access: Offline. AC INI-Param: M3KGlobalIpAddr')
acSysTransmission = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 13))
acSysTransmissionType = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 13, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("opticalSonetSdh", 1), ("copperDs3", 2), ("copperE1Ds1", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysTransmissionType.setStatus('current')
if mibBuilder.loadTexts: acSysTransmissionType.setDescription('Sets the PSTN Transmission type for the board: optical SONET / SDH or copper DS3. Access: Offline. AC INI-Param: PSTNTransmissionType')
acSysTiming = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 14))
acSysTimingMode = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 14, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("standAlone", 0), ("external", 1), ("lineSync", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysTimingMode.setStatus('current')
if mibBuilder.loadTexts: acSysTimingMode.setDescription('Determines the PSTN Timing synchonization mode of the Gateway. One of the following values: TM_External_MODE(1) -External Timing mode - use the SAT trunks Centralized Line Timing to synchronize the Gateway with one of the PSTN interfaces. TM_LineSync_MODE(2) -Distributed Line Timing mode (for the 1610 boards)- without using the SAT timing module. TM_Standalone_MODE(0) -Non-synchronized mode - each board or TPM is synchronized internally from one of the PSTN interfaces without using the SAT timing module. Access: Online. AC INI-Param: TMMode')
acSysTimingValidationTime = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 14, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysTimingValidationTime.setStatus('current')
if mibBuilder.loadTexts: acSysTimingValidationTime.setDescription('Reference validation time. Applicable for External timing and Line timing timing references. Range: 0 - 15 minutes. Resolution: 1 minute. Access: Online. AC INI-Param: TMReferenceValidationTime')
acSysTimingClockToDeriveA = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 14, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 7))).clone(namedValues=NamedValues(("deriveREFFromLineClock1", 0), ("deriveInternalClock", 4), ("clockFromReceiveSide", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysTimingClockToDeriveA.setStatus('obsolete')
if mibBuilder.loadTexts: acSysTimingClockToDeriveA.setDescription('Which Clock to use in sync mode. Access: Online. AC INI-Param: TMClockToDerive_A')
acSysTimingClockToDeriveB = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 14, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 7))).clone(namedValues=NamedValues(("deriveREFFromLineClock1", 0), ("deriveInternalClock", 4), ("clockFromReceiveSide", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysTimingClockToDeriveB.setStatus('obsolete')
if mibBuilder.loadTexts: acSysTimingClockToDeriveB.setDescription('Which Clock to use in sync mode. Access: Online. AC INI-Param: TMClockToDerive_B')
acSysTimingExternalIFType = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 14, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("e1CRC4", 0), ("e1CAS", 1), ("e1FAS", 2), ("t1D4", 3), ("t1ESF", 4), ("t12", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysTimingExternalIFType.setStatus('current')
if mibBuilder.loadTexts: acSysTimingExternalIFType.setDescription('Defines the external line reference (BITS) transmission format. Access: Online. AC INI-Param: TMExternalIFType')
acSysTimingLoopBackRef1 = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 14, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("loopDisable", 0), ("loopEnable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysTimingLoopBackRef1.setStatus('current')
if mibBuilder.loadTexts: acSysTimingLoopBackRef1.setDescription('Enables loopback state, by connecting Rx path towards Tx path. Access: Online. AC INI-Param: TMLoopBackExternalRef1')
acSysTimingLoopBackRef2 = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 14, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("loopDisable", 0), ("loopEnable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysTimingLoopBackRef2.setStatus('current')
if mibBuilder.loadTexts: acSysTimingLoopBackRef2.setDescription('Enables loopback state, by connecting Rx path towards Tx path. Access: Online. AC INI-Param: TMLoopBackExternalRef2')
acSysTimingTransmitControl = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 14, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("systemClock", 0), ("aIS", 1), ("disableTransmit", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysTimingTransmitControl.setStatus('obsolete')
if mibBuilder.loadTexts: acSysTimingTransmitControl.setDescription('Enables loopback state, by connecting Rx path towards Tx path. Access: Online. AC INI-Param: TMTransmitControl')
acSysTimingE1LineBuildOut = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 14, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 4, 5, 6, 7))).clone(namedValues=NamedValues(("tm75OhmNormal", 0), ("tm120OhmNormal", 1), ("tm75OhmHighReturnLoss", 4), ("tm120OhmHighReturnLoss", 5), ("tm75OhmNormalGappedClock", 6), ("tm120OhmNormalGappedClock", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysTimingE1LineBuildOut.setStatus('obsolete')
if mibBuilder.loadTexts: acSysTimingE1LineBuildOut.setDescription('Sets the transmission power between the timing module on the SAT and the E1 external reference clock (ohms). This parameter is only relevant for the Mediant 3000.This parameter is enabled when bspTimingModuleCfgTimingMode is set to TM_External_MODE(1). One of the following values: E_75_OHM_with_high_return_loss(4),E_120_OHM_with_high_return_loss(5),E_75_OHM_normal_PLUS_enable_transmit_and_receive_gapped_clock(6),E_120_OHM_normal_PLUS_enable_transmit_and_receive_gapped_clock(7),E_75_OHM_normal(0),E_120_OHM_normal(1). Access: Online. AC INI-Param: TME1LineBuildOut ')
acSysTimingT1LineBuildOut = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 14, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 7))).clone(namedValues=NamedValues(("dSX10to133feet0dBCSU", 0), ("dSX1133to266feet", 1), ("dSX1266to399feet", 2), ("dSX1399to533feet", 3), ("dSX1533to655feet", 4), ("dSX10to133ft0dBgappedclock", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysTimingT1LineBuildOut.setStatus('obsolete')
if mibBuilder.loadTexts: acSysTimingT1LineBuildOut.setDescription('External Reference Transmit Line Build Out. Access: Online. AC INI-Param: TMT1LineBuildOut')
acSysLDAP = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 15))
acSysLDAPServerIp = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 15, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysLDAPServerIp.setStatus('current')
if mibBuilder.loadTexts: acSysLDAPServerIp.setDescription('This parameter defines the IP address in dotted format notation. e.g., 192.10.1.255 Range = Legal IP address. Access: Online. AC INI-Param: LDAPSERVERIP')
acSysLDAPServerPort = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 15, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysLDAPServerPort.setStatus('current')
if mibBuilder.loadTexts: acSysLDAPServerPort.setDescription('Defines the port number for the LDAP server. Range = Valid port number. Access: Online. AC INI-Param: LDAPSERVERPORT')
acSysLDAPServerMaxRespondTime = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 15, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 86400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysLDAPServerMaxRespondTime.setStatus('current')
if mibBuilder.loadTexts: acSysLDAPServerMaxRespondTime.setDescription('Defines the period of time the module will wait for LDAP server response (seconds). Access: Online. AC INI-Param: LDAPSERVERMAXRESPONDTIME')
acSysLDAPServerDomainName = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 15, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysLDAPServerDomainName.setStatus('current')
if mibBuilder.loadTexts: acSysLDAPServerDomainName.setDescription('This parameter is used to indicate the name of LDAP server. Access: Online. AC INI-Param: LDAPSERVERDOMAINNAME')
acSysLDAPSearchDN = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 15, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysLDAPSearchDN.setStatus('current')
if mibBuilder.loadTexts: acSysLDAPSearchDN.setDescription('This parameter is used to indicate the search DN for LDAP search request. Access: Online. AC INI-Param: LDAPSEARCHDN')
acSysLDAPPassword = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 15, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysLDAPPassword.setStatus('current')
if mibBuilder.loadTexts: acSysLDAPPassword.setDescription('This parameter is used to indicate the user password of LDAP server. Access: Online. AC INI-Param: LDAPPASSWORD')
acSysLDAPBindDN = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 15, 7), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysLDAPBindDN.setStatus('current')
if mibBuilder.loadTexts: acSysLDAPBindDN.setDescription('This parameter is used to indicate the of LDAP server bind DN. Access: Online. AC INI-Param: LDAPBINDDN')
acSysLDAPServiceEnable = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 1, 15, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysLDAPServiceEnable.setStatus('current')
if mibBuilder.loadTexts: acSysLDAPServiceEnable.setDescription('Used to either enable or disable LDAP service. 0- disable (default) 1 - enable. Access: Offline. AC INI-Param: LDAPSERVICEENABLE')
acSystemStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 2))
acSysType = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 2, 1))
acSysTypeProduct = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 20, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69))).clone(namedValues=NamedValues(("acUnknown", 0), ("acTrunkPack-08", 1), ("acMediaPack-108", 2), ("acMediaPack-124", 3), ("acTrunkPack-1600", 20), ("acTPM1100", 22), ("acTrunkPack-260-IpMedia", 23), ("acTrunkPack-1610", 24), ("acMediaPack-104", 25), ("acMediaPack-102", 26), ("acTrunkPack-1610-SB", 29), ("acTrunkPack-1610-IpMedia", 30), ("acTrunkPack-MEDIANT2000", 31), ("acTrunkPack-STRETTO2000", 32), ("acTrunkPack-IPMServer2000", 33), ("acTrunkPack-2810", 34), ("acTrunkPack-260-UN-IpMedia", 35), ("acTrunkPack-260-IpMedia-30Ch", 36), ("acTrunkPack-260-IpMedia-60Ch", 37), ("acTrunkPack-260-IpMedia-120Ch", 38), ("acTrunkPack-260RT-IpMedia-30Ch", 39), ("acTrunkPack-260RT-IpMedia-60Ch", 40), ("acTrunkPack-260RT-IpMedia-120Ch", 41), ("acTrunkPack-260", 42), ("acTrunkPack-260-UN", 43), ("acTPM1100-PCM", 44), ("acTrunkPack-6310", 45), ("acTPM6300", 46), ("acMediant1000", 47), ("acIPMedia3000", 48), ("acMediant3000", 49), ("acStretto3000", 50), ("acTrunkPack-6310-IpMedia", 51), ("acTrunkPack-6310-SB", 52), ("acATP-1610", 53), ("acATP-260", 54), ("acATP-260-UN", 55), ("acMediaPack-118", 56), ("acMediaPack114", 57), ("acMediaPack112", 58), ("acTrunkPack-6310-T3", 59), ("acMediant3000-T3", 60), ("acIPmedia3000-T3", 61), ("acTrunkPack-6310-T3-IpMedia", 62), ("acTrunkPack-8410", 63), ("acTrunkPack-8410-IpMedia", 64), ("acMediant-600", 65), ("acTrunkPack-12610", 66), ("acMediant1000-MSBG", 67), ("acMediant-600-MSBG", 68), ("acMediaPack-500-MSBG", 69)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSysTypeProduct.setStatus('current')
if mibBuilder.loadTexts: acSysTypeProduct.setDescription('The type of the Board. AC INI-Param: N/A')
acSysTypeDSP = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 2, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSysTypeDSP.setStatus('current')
if mibBuilder.loadTexts: acSysTypeDSP.setDescription('Dsp Type. AC INI-Param: N/A')
acSysTypeModule = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("soloist", 0), ("second", 1), ("first", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSysTypeModule.setStatus('current')
if mibBuilder.loadTexts: acSysTypeModule.setDescription(' AC INI-Param: N/A')
acSysTypeCPUSpeed = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 2, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSysTypeCPUSpeed.setStatus('current')
if mibBuilder.loadTexts: acSysTypeCPUSpeed.setDescription('CPU Speed. AC INI-Param: N/A')
acSysVersion = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 2, 2))
acSysVersionSoftware = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 2, 2, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSysVersionSoftware.setStatus('current')
if mibBuilder.loadTexts: acSysVersionSoftware.setDescription('TrunkPack Software Version. AC INI-Param: N/A')
acSysVersionFlash = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 2, 2, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSysVersionFlash.setStatus('current')
if mibBuilder.loadTexts: acSysVersionFlash.setDescription('Flash [BootLoader] Version. AC INI-Param: N/A')
acSysVersionIniFile = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 2, 2, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSysVersionIniFile.setStatus('current')
if mibBuilder.loadTexts: acSysVersionIniFile.setDescription('Ini file version. AC INI-Param: INIFileVersion')
acSysVersionSoftwareDate = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 2, 2, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSysVersionSoftwareDate.setStatus('current')
if mibBuilder.loadTexts: acSysVersionSoftwareDate.setDescription('TrunkPack Software Date. AC INI-Param: N/A')
acSysId = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 2, 3))
acSysIdName = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 2, 3, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSysIdName.setStatus('current')
if mibBuilder.loadTexts: acSysIdName.setDescription('The name fo the board. AC INI-Param: N/A')
acSysIdSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 2, 3, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSysIdSerialNumber.setStatus('current')
if mibBuilder.loadTexts: acSysIdSerialNumber.setDescription('serial number of board. AC INI-Param: N/A')
acSysIdSlotNumber = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 2, 3, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSysIdSlotNumber.setStatus('current')
if mibBuilder.loadTexts: acSysIdSlotNumber.setDescription('Slot number. AC INI-Param: N/A')
acSysIdFirstSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 2, 3, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSysIdFirstSerialNumber.setStatus('current')
if mibBuilder.loadTexts: acSysIdFirstSerialNumber.setDescription("The device's first serial number. When the device is part of a dual module board this is the first module's serial number. When the device is the first module in a dual module or the device is not in a dual module board, the values for asSysIdSerialNumber and acSysIdFirstSerialNumber are the same. AC INI-Param: N/A")
acSysCount = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 2, 4))
acSysCountDSPs = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 2, 4, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSysCountDSPs.setStatus('current')
if mibBuilder.loadTexts: acSysCountDSPs.setDescription('DSP Count. AC INI-Param: N/A')
acSysCountChannels = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 2, 4, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSysCountChannels.setStatus('current')
if mibBuilder.loadTexts: acSysCountChannels.setDescription('Channel Count. AC INI-Param: N/A')
acSysCountTrunks = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 2, 4, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSysCountTrunks.setStatus('current')
if mibBuilder.loadTexts: acSysCountTrunks.setDescription('Trunks Count. AC INI-Param: N/A')
acSysState = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 2, 5))
acSysStateTemperature = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 2, 5, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSysStateTemperature.setStatus('current')
if mibBuilder.loadTexts: acSysStateTemperature.setDescription('Temperature of the board in degrees Celsius, should not go higher then 60!. AC INI-Param: N/A')
acSysStateOperational = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 2, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSysStateOperational.setStatus('current')
if mibBuilder.loadTexts: acSysStateOperational.setDescription('The operational state of the gateway. AC INI-Param: N/A')
acSysStateHAupdateInProgress = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 2, 5, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("updateDone", 1), ("updateInProgress", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSysStateHAupdateInProgress.setStatus('current')
if mibBuilder.loadTexts: acSysStateHAupdateInProgress.setDescription('Indicates during update process, which done between active and redundant boards. AC INI-Param: N/A')
acSysStateGWSeverity = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 2, 5, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("noAlarm", 0), ("indeterminate", 1), ("warning", 2), ("minor", 3), ("major", 4), ("critical", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSysStateGWSeverity.setStatus('current')
if mibBuilder.loadTexts: acSysStateGWSeverity.setDescription('The highest alarm severity on the device. AC INI-Param: N/A')
acSysStateIsPstnManagementEnable = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 2, 5, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSysStateIsPstnManagementEnable.setStatus('current')
if mibBuilder.loadTexts: acSysStateIsPstnManagementEnable.setDescription('Is Pstn Management Enable 0 - Disable 1 - Enable. AC INI-Param: N/A')
acSysNetwork = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 2, 6))
acSysEthernet = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 2, 6, 1))
acSysEthernetFirstPortDuplexMode = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 2, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("halfDuplex", 0), ("fullDuplex", 1), ("forceModeValue", 2), ("notAvailable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSysEthernetFirstPortDuplexMode.setStatus('current')
if mibBuilder.loadTexts: acSysEthernetFirstPortDuplexMode.setDescription('full-duplex or half-duplex connection. AC INI-Param: N/A')
acSysEthernetFirstPortSpeed = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 2, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 10, 100, 1000))).clone(namedValues=NamedValues(("forceModeValue", 2), ("notAvailable", 3), ("ac10Mbps", 10), ("ac100Mbps", 100), ("ac1000Mbps", 1000)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSysEthernetFirstPortSpeed.setStatus('current')
if mibBuilder.loadTexts: acSysEthernetFirstPortSpeed.setDescription(' AC INI-Param: N/A')
acSysEthernetSecondPortDuplexMode = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 2, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("halfDuplex", 0), ("fullDuplex", 1), ("forceModeValue", 2), ("notAvailable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSysEthernetSecondPortDuplexMode.setStatus('current')
if mibBuilder.loadTexts: acSysEthernetSecondPortDuplexMode.setDescription('full-duplex or half-duplex connection. AC INI-Param: N/A')
acSysEthernetSecondPortSpeed = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 2, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 10, 100, 1000))).clone(namedValues=NamedValues(("forceModeValue", 2), ("notAvailable", 3), ("ac10Mbps", 10), ("ac100Mbps", 100), ("ac1000Mbps", 1000)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSysEthernetSecondPortSpeed.setStatus('current')
if mibBuilder.loadTexts: acSysEthernetSecondPortSpeed.setDescription(' AC INI-Param: N/A')
acSysEthernetActivePortNumber = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 2, 6, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSysEthernetActivePortNumber.setStatus('current')
if mibBuilder.loadTexts: acSysEthernetActivePortNumber.setDescription('Display the current active ethernet port number. 0 - not relevant. AC INI-Param: N/A')
acSysEthernetStatusTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 2, 6, 1, 21), )
if mibBuilder.loadTexts: acSysEthernetStatusTable.setStatus('current')
if mibBuilder.loadTexts: acSysEthernetStatusTable.setDescription('Ethernet relevant information')
acSysEthernetStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 2, 6, 1, 21, 1), ).setIndexNames((0, "AC-SYSTEM-MIB", "acSysEthernetStatusIndex"))
if mibBuilder.loadTexts: acSysEthernetStatusEntry.setStatus('current')
if mibBuilder.loadTexts: acSysEthernetStatusEntry.setDescription('')
acSysEthernetStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 2, 6, 1, 21, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 12)))
if mibBuilder.loadTexts: acSysEthernetStatusIndex.setStatus('current')
if mibBuilder.loadTexts: acSysEthernetStatusIndex.setDescription("The row's index. On 8410 Systems: Index 1 related to GBE port no.1 in the TER (Media). Index 2 related to GBE port no.2 in the TER (Media). Index 3 related to port 1A in PEM #1 (Control). Index 4 related to port 1B in PEM #2 (Control). Index 5 related to port 2A in PEM #1 (OAM). Index 6 related to port 2B in PEM #2 (OAM). On MSBG only: 0 - WAN interface. 1-12 LAN interfaces. AC INI-Param: N/A")
acSysEthernetStatusPortDuplexMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 2, 6, 1, 21, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("halfDuplex", 0), ("fullDuplex", 1), ("forceModeValue", 2), ("notAvailable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSysEthernetStatusPortDuplexMode.setStatus('current')
if mibBuilder.loadTexts: acSysEthernetStatusPortDuplexMode.setDescription('full-duplex or half-duplex connection. AC INI-Param: N/A')
acSysEthernetStatusPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 2, 6, 1, 21, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 10, 100, 1000))).clone(namedValues=NamedValues(("forceModeValue", 2), ("notAvailable", 3), ("ac10Mbps", 10), ("ac100Mbps", 100), ("ac1000Mbps", 1000)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSysEthernetStatusPortSpeed.setStatus('current')
if mibBuilder.loadTexts: acSysEthernetStatusPortSpeed.setDescription('port speed. AC INI-Param: N/A')
acSysEthernetStatusActivePortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 2, 6, 1, 21, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notActive", 0), ("active", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSysEthernetStatusActivePortNumber.setStatus('current')
if mibBuilder.loadTexts: acSysEthernetStatusActivePortNumber.setDescription('Status of ethernet port - active or not active. AC INI-Param: N/A')
acSysEthernetStatusPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 2, 6, 1, 21, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 10))).clone(namedValues=NamedValues(("disabled", 0), ("blocking", 1), ("learning", 2), ("forwarding", 3), ("notApplicable", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSysEthernetStatusPortState.setStatus('current')
if mibBuilder.loadTexts: acSysEthernetStatusPortState.setDescription('Port State. AC INI-Param: N/A')
acSysEthernetStatusPowerOverEthernet = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 2, 6, 1, 21, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notApplicable", 0), ("active", 1), ("notActive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSysEthernetStatusPowerOverEthernet.setStatus('current')
if mibBuilder.loadTexts: acSysEthernetStatusPowerOverEthernet.setDescription('Power over Ethernet interface status. AC INI-Param: N/A')
acSysNAT = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 2, 6, 2))
acSysNATType = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 2, 6, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2, 3, 4, 5, 6, 7, 10))).clone(namedValues=NamedValues(("stunDisabled", -1), ("none", 0), ("fullCone", 1), ("restricted", 2), ("portRestricted", 3), ("symmetric", 4), ("symmetricFireWall", 5), ("blocked", 6), ("unknown", 7), ("natIdentificationInProgress", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSysNATType.setStatus('current')
if mibBuilder.loadTexts: acSysNATType.setDescription('Identified NAT type. -1 - STUN client is disabled 0 - None 1 - FullCone 2 - Restricted 3 - PortRestricted 4 - Symmetric 5 - SymmetricFireWall 6 - Blocked 7 - Unknown 10 - NAT identification in progress. AC INI-Param: N/A')
acSysWebStat = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 2, 6, 3))
acSysWebStatPasswordControlViaSNMP = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 2, 6, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSysWebStatPasswordControlViaSNMP.setStatus('current')
if mibBuilder.loadTexts: acSysWebStatPasswordControlViaSNMP.setDescription('If set to 1 it will allow changing the web interface username and password via SNMP. AC INI-Param: WEBPasswordControlViaSNMP ')
acSysIPStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 2, 6, 4))
acSysInterfaceStatusTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 2, 6, 4, 21), )
if mibBuilder.loadTexts: acSysInterfaceStatusTable.setStatus('current')
if mibBuilder.loadTexts: acSysInterfaceStatusTable.setDescription('')
acSysInterfaceStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 2, 6, 4, 21, 1), ).setIndexNames((0, "AC-SYSTEM-MIB", "acSysInterfaceStatusEntryIndex"), (0, "AC-SYSTEM-MIB", "acSysInterfaceStatusTypeIndex"))
if mibBuilder.loadTexts: acSysInterfaceStatusEntry.setStatus('current')
if mibBuilder.loadTexts: acSysInterfaceStatusEntry.setDescription('')
acSysInterfaceStatusEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 2, 6, 4, 21, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)))
if mibBuilder.loadTexts: acSysInterfaceStatusEntryIndex.setStatus('current')
if mibBuilder.loadTexts: acSysInterfaceStatusEntryIndex.setDescription('Related Interface index in the interface configuration table (in case the table is empty - meaning there is only single IP the index will appear with 0). AC INI-Param: N/A')
acSysInterfaceStatusTypeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 2, 6, 4, 21, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)))
if mibBuilder.loadTexts: acSysInterfaceStatusTypeIndex.setStatus('current')
if mibBuilder.loadTexts: acSysInterfaceStatusTypeIndex.setDescription(' 1 - IP Address. 2 - IPv6 Link-Local Address. AC INI-Param: N/A')
acSysInterfaceStatusApplicationTypes = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 2, 6, 4, 21, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 11))).clone(namedValues=NamedValues(("oam", 0), ("media", 1), ("control", 2), ("oamAndMedia", 3), ("oamAndControl", 4), ("mediaAndControl", 5), ("oamAndMediaAndControl", 6), ("data", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSysInterfaceStatusApplicationTypes.setStatus('current')
if mibBuilder.loadTexts: acSysInterfaceStatusApplicationTypes.setDescription('The type assigned to the interface. AC INI-Param: N/A')
acSysInterfaceStatusMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 2, 6, 4, 21, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 10))).clone(namedValues=NamedValues(("iPv6PrefixManual", 3), ("iPv6Manual", 4), ("iPv4Manual", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSysInterfaceStatusMode.setStatus('current')
if mibBuilder.loadTexts: acSysInterfaceStatusMode.setDescription('Interface configuration mode. AC INI-Param: N/A')
acSysInterfaceStatusIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 2, 6, 4, 21, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 45))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSysInterfaceStatusIPAddress.setStatus('current')
if mibBuilder.loadTexts: acSysInterfaceStatusIPAddress.setDescription('IP Address (can be either IPv4 or IPv6) for this interface. AC INI-Param: N/A')
acSysInterfaceStatusPrefixLength = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 2, 6, 4, 21, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSysInterfaceStatusPrefixLength.setStatus('current')
if mibBuilder.loadTexts: acSysInterfaceStatusPrefixLength.setDescription('The number of 1 bits in this interfaces netmask. AC INI-Param: N/A')
acSysInterfaceStatusGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 2, 6, 4, 21, 1, 7), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 45))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSysInterfaceStatusGateway.setStatus('current')
if mibBuilder.loadTexts: acSysInterfaceStatusGateway.setDescription('Default Gateway. AC INI-Param: N/A')
acSysInterfaceStatusVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 2, 6, 4, 21, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSysInterfaceStatusVlanID.setStatus('current')
if mibBuilder.loadTexts: acSysInterfaceStatusVlanID.setDescription('VLAN ID of this interface. AC INI-Param: N/A')
acSysInterfaceStatusName = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 2, 6, 4, 21, 1, 9), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSysInterfaceStatusName.setStatus('current')
if mibBuilder.loadTexts: acSysInterfaceStatusName.setDescription('16 character string of this interfaces name. AC INI-Param: N/A')
acSysTime = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 2, 7))
acSysTimeUp = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 2, 7, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSysTimeUp.setStatus('current')
if mibBuilder.loadTexts: acSysTimeUp.setDescription('Time (in Seconds) that the board is alive. AC INI-Param: N/A')
acSysVoicePrompt = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 2, 8))
acSysVoicePromptTotalMemorySize = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 2, 8, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSysVoicePromptTotalMemorySize.setStatus('current')
if mibBuilder.loadTexts: acSysVoicePromptTotalMemorySize.setDescription('Get the total voice prompt memory size. AC INI-Param: N/A')
acSysVoicePromptMaxFreeMemorySize = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 2, 8, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSysVoicePromptMaxFreeMemorySize.setStatus('current')
if mibBuilder.loadTexts: acSysVoicePromptMaxFreeMemorySize.setDescription('Get the maximu voice prompt memory free size. AC INI-Param: N/A')
acSysRepositoryAMS = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 2, 9))
acSysRepositoryAMSIsReadyForUpdate = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 2, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSysRepositoryAMSIsReadyForUpdate.setStatus('current')
if mibBuilder.loadTexts: acSysRepositoryAMSIsReadyForUpdate.setDescription('Verify if the old repository is free or there are signals still using it. AC INI-Param: N/A')
acSysHAStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 2, 10))
acSysHAStatusReady = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 2, 10, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("yes", 2), ("no", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSysHAStatusReady.setStatus('current')
if mibBuilder.loadTexts: acSysHAStatusReady.setDescription('Defines whether the M3K system supports HA or not. AC INI-Param: N/A')
acSysLDAPStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 2, 11))
acSysLDAPStatusServerMode = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 2, 11, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 0), ("connectionBroken", 1), ("connecting", 2), ("connected", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSysLDAPStatusServerMode.setStatus('current')
if mibBuilder.loadTexts: acSysLDAPStatusServerMode.setDescription('LDAP server status. AC INI-Param: N/A')
acSystemAction = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 3))
acSysAction = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 3, 1))
acSysActionSet = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 3, 1, 1))
acSysActionSetReset = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 3, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysActionSetReset.setStatus('current')
if mibBuilder.loadTexts: acSysActionSetReset.setDescription('remote Reset. To remote reset the board, set the value of this object to 1. Note: Before Reset, The current boardConfiguration parameters will be burned to the board. Access: Instant. AC INI-Param: N/A')
acSysActionSetResetControl = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("resetFromFlashAfterBurn", 1), ("resetFromFlashNoBurn", 2), ("resetFromBootP", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysActionSetResetControl.setStatus('current')
if mibBuilder.loadTexts: acSysActionSetResetControl.setDescription('Determines the remote reset action. 1 - burn staged load image, if any, and config to flash, perform a reset, and load from flash 2 - perform a reset, and load from flash (staged load image, if any, and config is not burned to flash) 3 - perform a reset, and load from bootp/tftp (staged load image, if any, and config burn is not needed) * - an error is returned for any other value Note: The staged load image is an image of a cmp file that was previously loaded to a area in RAM via an HTTP upload. Access: Instant. AC INI-Param: RemoteResetControl')
acSysActionSetDefaults = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 3, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysActionSetDefaults.setStatus('current')
if mibBuilder.loadTexts: acSysActionSetDefaults.setDescription('To set the board to default values, set the value of this object to 1. Access: Instant. AC INI-Param: N/A')
acSysActionSetSaveConfig = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 3, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysActionSetSaveConfig.setStatus('current')
if mibBuilder.loadTexts: acSysActionSetSaveConfig.setDescription('To save all current configuration in the board onto the flash, set the value of this object to 1. NOTE: Do NOT save the configuration while voice is running - this will cause a delay. Access: Instant. AC INI-Param: N/A')
acSysActionSetAutoUpdate = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 3, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysActionSetAutoUpdate.setStatus('current')
if mibBuilder.loadTexts: acSysActionSetAutoUpdate.setDescription('To update the system configuration according to the provisioned IniFileUrl, set the value of this object to 1. Access: Instant. AC INI-Param: N/A')
acSysActionSetGetTimeFromNTPServer = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 3, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysActionSetGetTimeFromNTPServer.setStatus('current')
if mibBuilder.loadTexts: acSysActionSetGetTimeFromNTPServer.setDescription('Initiates an immediate NTP time fetch. Access: Instant. AC INI-Param: N/A')
acSysActionSetSwUpgrade = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("hitLessUpGrade", 1), ("systemResetUpGrade", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysActionSetSwUpgrade.setStatus('current')
if mibBuilder.loadTexts: acSysActionSetSwUpgrade.setDescription('Defines the type of SW upgrade in M3K HA system (Hitless or system reset). Access: Instant. AC INI-Param: M3KHASwUpgradeMode')
acSysActionSetOnLineChangesApply = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("defaultValue", 0), ("applyChanges", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysActionSetOnLineChangesApply.setStatus('current')
if mibBuilder.loadTexts: acSysActionSetOnLineChangesApply.setDescription('Applies the board on line changed params. Access: Instant. AC INI-Param: N/A')
acSysActionSetIPSecTLSUpgrade = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("defaultValue", 0), ("upDateChanges", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysActionSetIPSecTLSUpgrade.setStatus('current')
if mibBuilder.loadTexts: acSysActionSetIPSecTLSUpgrade.setDescription('To update the IPSec TLS configuration according to the provisioned TLS fils URL set the value of this object to 1. Access: Instant. AC INI-Param: N/A')
acSysActionSetGWAppTLSUpgrade = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("defaultValue", 0), ("upDateChanges", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysActionSetGWAppTLSUpgrade.setStatus('current')
if mibBuilder.loadTexts: acSysActionSetGWAppTLSUpgrade.setDescription('To update the GWApp TLS configuration according to the provisioned TLS fils URL set the value of this object to 1. Access: Instant. AC INI-Param: N/A')
acSysActionSetConvertNetworkIFsConfiguration = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 3, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("defaultValue", 0), ("convertAction", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysActionSetConvertNetworkIFsConfiguration.setStatus('current')
if mibBuilder.loadTexts: acSysActionSetConvertNetworkIFsConfiguration.setDescription('SET to 1 will convert network configuration to advance multiple network Interfaces mode. Access: Instant. AC INI-Param: N/A')
acSysActionSetActionId = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 3, 1, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysActionSetActionId.setStatus('current')
if mibBuilder.loadTexts: acSysActionSetActionId.setDescription('This field is for management use and is aimed to distinguish different managers managing a single device. Access: Instant. AC INI-Param: N/A')
acSysActionSetAutoUpdateActionResult = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 3, 1, 1, 13), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSysActionSetAutoUpdateActionResult.setStatus('current')
if mibBuilder.loadTexts: acSysActionSetAutoUpdateActionResult.setDescription("Indicates the autoupdates operation status in the form of a string: 'acSysActionId ; <status> ; <reson>'. The status field can be: 'success'\\'failure'\\'inProgress'. The infromation is valid only when downloading one file at a time. Note - a second way of following the success of the file downloading is to see the files name being updated in the acSysFile subtree. AC INI-Param: N/A")
acSysActionAdmin = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 3, 1, 2))
acSysActionAdminState = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 3, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("shuttingDown", 1), ("unlocked", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysActionAdminState.setStatus('current')
if mibBuilder.loadTexts: acSysActionAdminState.setDescription("Determines the gateway's operational state. 0 - locked: Shutdown the GW In the time frame set by acgwAdminStateLockControl. 1 - shuttingDown: (read only) Graceful Shutdown is being carried out. 2 - unlocked: GW is in service. Access: Online. AC INI-Param: N/A")
acSysActionAdminStateLockTimeout = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 3, 1, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 32768))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysActionAdminStateLockTimeout.setStatus('current')
if mibBuilder.loadTexts: acSysActionAdminStateLockTimeout.setDescription('Defines the time remaining (in seconds) for the shutdown to complete. 0 = immediate shutdown -1 = waits until all calls drop (infinite) >0 = the number of seconds to wait. Access: Offline. AC INI-Param: N/A')
acSysUpload = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 3, 1, 3))
acSysUploadActionType = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 3, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 10))).clone(namedValues=NamedValues(("none", 0), ("upload", 1), ("remove", 2), ("actionDone", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysUploadActionType.setStatus('current')
if mibBuilder.loadTexts: acSysUploadActionType.setDescription('Action to be carried out. Setting this field triggers the action. File upload supported for iniFile(1), v5PortFile(16) and DataConfigurationFile(17) only access is instant. File removal supported for all other then iniFile(1), v5PortFile(16) and DataConfigurationFile(17), (v5PortFile removal is done via acV5PortActionType) access is offline. Access: Instant. AC INI-Param: N/A')
acSysUploadFileType = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 3, 1, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17))).clone(namedValues=NamedValues(("iniFile", 1), ("cptFile", 2), ("vpFile", 3), ("prerecordedTonesFile", 4), ("fxsCoeffFile", 5), ("fxoCoeffFile", 6), ("casFile", 7), ("xmlFile", 8), ("externalCoderFile", 9), ("userInfoFile", 10), ("dialPlanFile", 11), ("tlsPKeyFile", 12), ("tlsCertFile", 13), ("tlsRootFile", 14), ("videoFontFile", 15), ("v5PortFile", 16), ("dataConfigurationFile", 17)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysUploadFileType.setStatus('current')
if mibBuilder.loadTexts: acSysUploadFileType.setDescription('The file type to be uploaded. Note - for file types with more then one instance (like CAS files) use the acSysActionFileInstance to specify which instance you want to upload. Access: Instant. AC INI-Param: N/A')
acSysUploadFileNumber = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 3, 1, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysUploadFileNumber.setStatus('current')
if mibBuilder.loadTexts: acSysUploadFileNumber.setDescription("File number for file types that have more then one file instance, such as CAS, VideoFont etc'. Access: Instant. AC INI-Param: N/A")
acSysUploadFileURI = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 3, 1, 3, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysUploadFileURI.setStatus('current')
if mibBuilder.loadTexts: acSysUploadFileURI.setDescription('URI indicating file location to be downloaded to. Access: Instant. AC INI-Param: N/A')
acSysUploadActionID = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 3, 1, 3, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysUploadActionID.setStatus('current')
if mibBuilder.loadTexts: acSysUploadActionID.setDescription('This field is for management use and is aimed to distinguish different managers managing a single device. Access: Instant. AC INI-Param: N/A')
acSysUploadActionResult = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 3, 1, 3, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSysUploadActionResult.setStatus('current')
if mibBuilder.loadTexts: acSysUploadActionResult.setDescription('Action result. Includes action status (success, failure or inProgress), action ID. AC INI-Param: N/A')
acSystemChassis = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 4))
acSystemChassisDryContactsOutStatus = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 4, 1), Bits().clone(namedValues=NamedValues(("noAlarm", 0), ("criticalAlarm", 1), ("majorAlarm", 2), ("minorAlarm", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSystemChassisDryContactsOutStatus.setStatus('current')
if mibBuilder.loadTexts: acSystemChassisDryContactsOutStatus.setDescription('Indicates current state of the alarm dry contacts out signals (3 signals). This is a bit-map of possible conditions. AC INI-Param: N/A')
acSystemChassisDryContactsInStatus = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 4, 2), Bits().clone(namedValues=NamedValues(("noAlarm", 0), ("alarm1", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSystemChassisDryContactsInStatus.setStatus('current')
if mibBuilder.loadTexts: acSystemChassisDryContactsInStatus.setDescription("Indicates current state of the alarm dry contacts - in signals (1 signals). The role of each input signal should be according to the customer's requirements. This is a bit-map of possible conditions. AC INI-Param: N/A")
acSystemChassisLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 4, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSystemChassisLastChanged.setStatus('current')
if mibBuilder.loadTexts: acSystemChassisLastChanged.setDescription("The value of sysUpTime at the time a row is modified in any of the acSystemChassis subtree's objects. AC INI-Param: N/A")
acSysModuleTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 4, 21), )
if mibBuilder.loadTexts: acSysModuleTable.setStatus('current')
if mibBuilder.loadTexts: acSysModuleTable.setDescription(' ')
acSysModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 4, 21, 1), ).setIndexNames((0, "AC-SYSTEM-MIB", "acSysModuleIndex"))
if mibBuilder.loadTexts: acSysModuleEntry.setStatus('current')
if mibBuilder.loadTexts: acSysModuleEntry.setDescription('')
acSysModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 4, 21, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: acSysModuleIndex.setStatus('current')
if mibBuilder.loadTexts: acSysModuleIndex.setDescription('The Module number in the system. AC INI-Param: N/A')
acSysModuleGeographicalPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 4, 21, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSysModuleGeographicalPosition.setStatus('current')
if mibBuilder.loadTexts: acSysModuleGeographicalPosition.setDescription('The slot number in the chassis. 1 being the bottom slot and so on. AC INI-Param: N/A')
acSysModuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 4, 21, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 20, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 69, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279))).clone(namedValues=NamedValues(("acUnknown", 0), ("acTrunkPack-08", 1), ("acMediaPack-108", 2), ("acMediaPack-124", 3), ("acTrunkPack-1600", 20), ("acTPM1100", 22), ("acTrunkPack-260-IpMedia", 23), ("acTrunkPack-1610", 24), ("acMediaPack-104", 25), ("acMediaPack-102", 26), ("acTrunkPack-1610-SB", 29), ("acTrunkPack-1610-IpMedia", 30), ("acTrunkPack-MEDIANT2000", 31), ("acTrunkPack-STRETTO2000", 32), ("acTrunkPack-IPMServer2000", 33), ("acTrunkPack-2810", 34), ("acTrunkPack-260-UN-IpMedia", 35), ("acTrunkPack-260-IpMedia-30Ch", 36), ("acTrunkPack-260-IpMedia-60Ch", 37), ("acTrunkPack-260-IpMedia-120Ch", 38), ("acTrunkPack-260RT-IpMedia-30Ch", 39), ("acTrunkPack-260RT-IpMedia-60Ch", 40), ("acTrunkPack-260RT-IpMedia-120Ch", 41), ("acTrunkPack-260", 42), ("acTrunkPack-260-UN", 43), ("acTPM1100-PCM", 44), ("acTrunkPack-6310", 45), ("acTPM6300", 46), ("acMediant1000", 47), ("acIPMedia3000", 48), ("acMediant3000", 49), ("acStretto3000", 50), ("acTrunkPack-6310-IpMedia", 51), ("acTrunkPack-6310-SB", 52), ("acATP-1610", 53), ("acATP-260", 54), ("acATP-260-UN", 55), ("acMediaPack-118", 56), ("acMediaPack114", 57), ("acMediaPack112", 58), ("acTrunkPack-6310-T3", 59), ("acMediant3000-T3", 60), ("acIPmedia3000-T3", 61), ("acTrunkPack-6310-T3-IpMedia", 62), ("acTrunkPack-8410", 63), ("acTrunkPack-8410-IpMedia", 64), ("acMediaPack-500-MSBG", 69), ("sA1", 250), ("sA2", 251), ("sA3", 252), ("acMediant1000CPUmodule", 253), ("acMediant1000IFDigitalModule", 254), ("acMediant1000IFAnalogModule", 255), ("acMediant1000IFBRIModule", 256), ("acMediant1000IPMediaModule", 257), ("acMediant600CPUmodule", 258), ("acMediant600IFDigitalModule", 259), ("acMediant600IFAnalogModule", 260), ("acMediant600IFBRIModule", 261), ("acMediant600IPMediaModule", 262), ("acMediaPack500CPUmodule", 265), ("acMediaPack500IFDigitalModule", 266), ("acMediaPack500IFAnalogModule", 267), ("acMediaPack500IFBRIModule", 268), ("acMediaPack500IFWANModule", 269), ("acMediaPack500IFWiFiModule", 270), ("acMediaPack500IPMediaModule", 271), ("acMediaPack500EthernetModule", 272), ("acMediaPack500IFT1WANModule", 273), ("acMediaPack500IFSHDSLModule", 274), ("acMediaPack500IFADSLModule", 275), ("acMediant1000IFWANModule", 276), ("acMediant1000IFT1WANModule", 277), ("acMediant1000IFSHDSLModule", 278), ("acMediant1000IFADSLModule", 279)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSysModuleType.setStatus('current')
if mibBuilder.loadTexts: acSysModuleType.setDescription("The module's type. AC INI-Param: N/A")
acSysModulePresence = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 4, 21, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("present", 1), ("missing", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSysModulePresence.setStatus('current')
if mibBuilder.loadTexts: acSysModulePresence.setDescription('Is the module present or missing. AC INI-Param: N/A')
acSysModuleLicenseKeyList = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 4, 21, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 1400))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSysModuleLicenseKeyList.setStatus('current')
if mibBuilder.loadTexts: acSysModuleLicenseKeyList.setDescription('List of active features as enabled by the license key. SA modules return NULL. AC INI-Param: N/A')
acSysModuleSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 4, 21, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSysModuleSerialNumber.setStatus('current')
if mibBuilder.loadTexts: acSysModuleSerialNumber.setDescription("The module's serial number. For 6310 the serial number is the decimal form of the last 5 characters in the MAC Address. SA modules return 0. When the modules in the table are unavailable for audit (no HA) (-1) is returned. AC INI-Param: N/A")
acSysModuleSWVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 4, 21, 1, 7), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSysModuleSWVersion.setStatus('current')
if mibBuilder.loadTexts: acSysModuleSWVersion.setDescription('The version of the SW being run in the module placed . SA Modules return NULL. AC INI-Param: N/A')
acSysModuleOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 4, 21, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSysModuleOperationalState.setStatus('current')
if mibBuilder.loadTexts: acSysModuleOperationalState.setDescription('The operational state of the module. Determined internally by the system. AC INI-Param: N/A')
acSysModuleHAStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 4, 21, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("acitveNonHA", 1), ("active", 2), ("redundant", 3), ("standAlone", 4), ("redundantNonHA", 5), ("notApplicable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSysModuleHAStatus.setStatus('current')
if mibBuilder.loadTexts: acSysModuleHAStatus.setDescription('Modules status with in the system. Designed to define the HA state. AC INI-Param: N/A')
acSysModuleLEDs = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 4, 21, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSysModuleLEDs.setStatus('current')
if mibBuilder.loadTexts: acSysModuleLEDs.setDescription('Bit Field for the LEDs on the front of the module. LSB in each nibble (half Byte) is 0 - constant, 1 - blinking. 3 MSB are the color - 0 - none 1- Green 2 - Red 3 - Yellow 4 - Orange 5 - Blue 7 - Gray (unknown). AC INI-Param: N/A')
acSysModuleTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 4, 21, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSysModuleTemperature.setStatus('current')
if mibBuilder.loadTexts: acSysModuleTemperature.setDescription('Temperature of the board in degrees Celsius. SA Modules return 0. AC INI-Param: N/A')
acSysModuleActions = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 4, 21, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("reset", 1), ("switchOver", 2), ("actionDone", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysModuleActions.setStatus('current')
if mibBuilder.loadTexts: acSysModuleActions.setDescription('Actions to be performed by the module. Access: Instant. AC INI-Param: N/A')
acSysModuleFRUaction = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 4, 21, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("fruActionDone", 1), ("fruOutOfServiceAction", 2), ("fruBackToServiceAction", 3), ("fruNotApplicable", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSysModuleFRUaction.setStatus('current')
if mibBuilder.loadTexts: acSysModuleFRUaction.setDescription('Field Replace Unit actions Relevant to IF-Module only. Access: Instant. AC INI-Param: N/A')
acSysModuleFRUstatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 4, 21, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("moduleNotExist", 1), ("moduleExistOk", 2), ("moduleOutOfService", 3), ("moduleBackToServiceStart", 4), ("moduleMismatch", 5), ("moduleFaulty", 6), ("notApplicable", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSysModuleFRUstatus.setStatus('current')
if mibBuilder.loadTexts: acSysModuleFRUstatus.setDescription("Field Replace Unit module's status. AC INI-Param: N/A")
acSysModuleNumOfPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 4, 21, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSysModuleNumOfPorts.setStatus('current')
if mibBuilder.loadTexts: acSysModuleNumOfPorts.setDescription('The number of physical interfaces in a module, analog or digital. AC INI-Param: N/A')
acSysModuleFirstPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 4, 21, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 19))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSysModuleFirstPortNum.setStatus('current')
if mibBuilder.loadTexts: acSysModuleFirstPortNum.setDescription('The logical number as seen in the general trunk/analog-channel table of the first port in the module in question. Since analog and digital ports can be operational at once, analog and digital ports may have same logical number. AC INI-Param: N/A')
acSysFanTrayTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 4, 22), )
if mibBuilder.loadTexts: acSysFanTrayTable.setStatus('current')
if mibBuilder.loadTexts: acSysFanTrayTable.setDescription('')
acSysFanTrayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 4, 22, 1), ).setIndexNames((0, "AC-SYSTEM-MIB", "acSysFanTrayIndex"))
if mibBuilder.loadTexts: acSysFanTrayEntry.setStatus('current')
if mibBuilder.loadTexts: acSysFanTrayEntry.setDescription('')
acSysFanTrayIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 4, 22, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: acSysFanTrayIndex.setStatus('current')
if mibBuilder.loadTexts: acSysFanTrayIndex.setDescription("Fan-Tray's index in the system. AC INI-Param: N/A")
acSysFanTrayGeographicalPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 4, 22, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSysFanTrayGeographicalPosition.setStatus('current')
if mibBuilder.loadTexts: acSysFanTrayGeographicalPosition.setDescription('The slot number in the chassis. AC INI-Param: N/A')
acSysFanTrayExistence = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 4, 22, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("present", 1), ("missing", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSysFanTrayExistence.setStatus('current')
if mibBuilder.loadTexts: acSysFanTrayExistence.setDescription('Is the Fan-Tray present or missing. AC INI-Param: N/A')
acSysFanTrayType = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 4, 22, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSysFanTrayType.setStatus('current')
if mibBuilder.loadTexts: acSysFanTrayType.setDescription('The type of the Fan-Tray . AC INI-Param: N/A')
acSysFanTrayLEDs = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 4, 22, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSysFanTrayLEDs.setStatus('current')
if mibBuilder.loadTexts: acSysFanTrayLEDs.setDescription("This object built as a bit-field which represents the Fan-Tray's LEDs status. The first four bites represent the System's LED status and the last four bites represent the Shelf-LEDs status. AC INI-Param: N/A")
acSysFanTraySeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 4, 22, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("cleared", 0), ("indeterminate", 1), ("warning", 2), ("minor", 3), ("major", 4), ("critical", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSysFanTraySeverity.setStatus('current')
if mibBuilder.loadTexts: acSysFanTraySeverity.setDescription('The Severity of the whole fan tray according to the current active alarm in the alarm table: Critical, Major or cleared. AC INI-Param: N/A')
acSysFanTrayFansConfiguredSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 4, 22, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSysFanTrayFansConfiguredSpeed.setStatus('current')
if mibBuilder.loadTexts: acSysFanTrayFansConfiguredSpeed.setDescription("The fan's configured speed in Tach units (RPM/120). Each Byte represents a fan. AC INI-Param: N/A")
acSysFanTrayFansCurrentSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 4, 22, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSysFanTrayFansCurrentSpeed.setStatus('current')
if mibBuilder.loadTexts: acSysFanTrayFansCurrentSpeed.setDescription("The fan's mesured speed in Tach units (RPM/120). Each Byte represents a fan. AC INI-Param: N/A")
acSysFanTrayFansStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 4, 22, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSysFanTrayFansStatus.setStatus('current')
if mibBuilder.loadTexts: acSysFanTrayFansStatus.setDescription('A bit field which display the working status of each fan in the Fan-Tray. 0 - Working 1 - Faulty. AC INI-Param: N/A')
acSysPowerSupplyTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 4, 23), )
if mibBuilder.loadTexts: acSysPowerSupplyTable.setStatus('current')
if mibBuilder.loadTexts: acSysPowerSupplyTable.setDescription('')
acSysPowerSupplyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 4, 23, 1), ).setIndexNames((0, "AC-SYSTEM-MIB", "acSysPowerSupplyIndex"))
if mibBuilder.loadTexts: acSysPowerSupplyEntry.setStatus('current')
if mibBuilder.loadTexts: acSysPowerSupplyEntry.setDescription('')
acSysPowerSupplyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 4, 23, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: acSysPowerSupplyIndex.setStatus('current')
if mibBuilder.loadTexts: acSysPowerSupplyIndex.setDescription("Power-Supply's index in the system. AC INI-Param: N/A")
acSysPowerSupplyGeographicalPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 4, 23, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSysPowerSupplyGeographicalPosition.setStatus('current')
if mibBuilder.loadTexts: acSysPowerSupplyGeographicalPosition.setDescription('The slot number in the chassis. AC INI-Param: N/A')
acSysPowerSupplyExistence = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 4, 23, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("present", 1), ("missing", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSysPowerSupplyExistence.setStatus('current')
if mibBuilder.loadTexts: acSysPowerSupplyExistence.setDescription('Is the Power-Supply present or missing. AC INI-Param: N/A')
acSysPowerSupplyHwversion = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 4, 23, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSysPowerSupplyHwversion.setStatus('current')
if mibBuilder.loadTexts: acSysPowerSupplyHwversion.setDescription('PSs HW version. AC INI-Param: N/A')
acSysPowerSupplyLEDs = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 4, 23, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSysPowerSupplyLEDs.setStatus('current')
if mibBuilder.loadTexts: acSysPowerSupplyLEDs.setDescription("A bit-field representation of the Power-Supply LEDs' status. The first four bites represent the Power-Supply LED's status and the last four bites represent the Fault LED's status. AC INI-Param: N/A")
acSysPowerSupplySeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 4, 23, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("cleared", 1), ("indeterminate", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSysPowerSupplySeverity.setStatus('current')
if mibBuilder.loadTexts: acSysPowerSupplySeverity.setDescription('The Severity of the power-supply according to the current active alarm in the alarm table. AC INI-Param: N/A')
acSysPEMTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 4, 24), )
if mibBuilder.loadTexts: acSysPEMTable.setStatus('current')
if mibBuilder.loadTexts: acSysPEMTable.setDescription('')
acSysPEMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 4, 24, 1), ).setIndexNames((0, "AC-SYSTEM-MIB", "acSysPEMIndex"))
if mibBuilder.loadTexts: acSysPEMEntry.setStatus('current')
if mibBuilder.loadTexts: acSysPEMEntry.setDescription('')
acSysPEMIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 4, 24, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: acSysPEMIndex.setStatus('current')
if mibBuilder.loadTexts: acSysPEMIndex.setDescription("PEM-Module's index in the system. AC INI-Param: N/A")
acSysPEMGeographicalPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 4, 24, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSysPEMGeographicalPosition.setStatus('current')
if mibBuilder.loadTexts: acSysPEMGeographicalPosition.setDescription('The slot number in the chassis. AC INI-Param: N/A')
acSysPEMExistence = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 4, 24, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("present", 1), ("missing", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSysPEMExistence.setStatus('current')
if mibBuilder.loadTexts: acSysPEMExistence.setDescription('Is the PEM-Module present or missing. AC INI-Param: N/A')
acSysPEMType = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 4, 24, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSysPEMType.setStatus('current')
if mibBuilder.loadTexts: acSysPEMType.setDescription('PEMs Type. AC INI-Param: N/A')
acSysPEMElectricWireConnection = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 4, 24, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("connected", 1), ("disconnected", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSysPEMElectricWireConnection.setStatus('current')
if mibBuilder.loadTexts: acSysPEMElectricWireConnection.setDescription('Present the status of the electricity connector located on the PEM card. AC INI-Param: N/A')
acSysSATModule = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 4, 25))
acSysSATTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 4, 25, 21), )
if mibBuilder.loadTexts: acSysSATTable.setStatus('current')
if mibBuilder.loadTexts: acSysSATTable.setDescription('')
acSysSATEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 4, 25, 21, 1), ).setIndexNames((0, "AC-SYSTEM-MIB", "acSysSATSatIndex"))
if mibBuilder.loadTexts: acSysSATEntry.setStatus('current')
if mibBuilder.loadTexts: acSysSATEntry.setDescription('')
acSysSATSatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 4, 25, 21, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)))
if mibBuilder.loadTexts: acSysSATSatIndex.setStatus('current')
if mibBuilder.loadTexts: acSysSATSatIndex.setDescription("SAT-Module's index in the system. AC INI-Param: N/A")
acSysSATGeographicalPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 4, 25, 21, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSysSATGeographicalPosition.setStatus('current')
if mibBuilder.loadTexts: acSysSATGeographicalPosition.setDescription('The slot number in the chassis. AC INI-Param: N/A')
acSysSATType = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 4, 25, 21, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSysSATType.setStatus('current')
if mibBuilder.loadTexts: acSysSATType.setDescription('SATs Type. AC INI-Param: N/A')
acSysSATInitInformation = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 4, 25, 21, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("detected", 0), ("reConfig", 1), ("reConfigTry2", 2), ("reConfigTry3", 3), ("notInitialized", 4), ("initIsMissing", 5), ("initWasReset", 6), ("initFail", 7), ("initInProgress", 8), ("initUpdateREFTable", 9), ("remoteKeepAlive", 10), ("initComplete", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSysSATInitInformation.setStatus('current')
if mibBuilder.loadTexts: acSysSATInitInformation.setDescription("Sat's Init Information. AC INI-Param: N/A")
acSysSATTimingUnitExistence = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 4, 25, 21, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("exist", 1), ("notExist", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSysSATTimingUnitExistence.setStatus('current')
if mibBuilder.loadTexts: acSysSATTimingUnitExistence.setDescription('Is the Timig Unit present or missing. AC INI-Param: N/A')
acSysSATTimingRefSelection = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 4, 25, 21, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("bITSNOREF", 0), ("rEFFromBITSA", 1), ("rEFFromBITSB", 2), ("bITSNOREF1", 3), ("rEFFromLineClock1", 4), ("rEFFromLineClock2", 5), ("rEFFromLineClock3", 6), ("rEFFromLineClock7", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSysSATTimingRefSelection.setStatus('current')
if mibBuilder.loadTexts: acSysSATTimingRefSelection.setDescription("SAT's Timing Reference Selection. AC INI-Param: N/A")
acSysSATFramersTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 4, 25, 22), )
if mibBuilder.loadTexts: acSysSATFramersTable.setStatus('current')
if mibBuilder.loadTexts: acSysSATFramersTable.setDescription('')
acSysSATFramersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 4, 25, 22, 1), ).setIndexNames((0, "AC-SYSTEM-MIB", "acSysSATFramersSatIndex"), (0, "AC-SYSTEM-MIB", "acSysSATFramersFramerIndex"))
if mibBuilder.loadTexts: acSysSATFramersEntry.setStatus('current')
if mibBuilder.loadTexts: acSysSATFramersEntry.setDescription('')
acSysSATFramersSatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 4, 25, 22, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)))
if mibBuilder.loadTexts: acSysSATFramersSatIndex.setStatus('current')
if mibBuilder.loadTexts: acSysSATFramersSatIndex.setDescription("SAT-Module's index in the system. AC INI-Param: N/A")
acSysSATFramersFramerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 4, 25, 22, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)))
if mibBuilder.loadTexts: acSysSATFramersFramerIndex.setStatus('current')
if mibBuilder.loadTexts: acSysSATFramersFramerIndex.setDescription("Framer's Index. AC INI-Param: N/A")
acSysSATFramersFramerInterfaceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 4, 25, 22, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("framerInitialized", 0), ("framerNotInitialized", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSysSATFramersFramerInterfaceStatus.setStatus('current')
if mibBuilder.loadTexts: acSysSATFramersFramerInterfaceStatus.setDescription('Framer Interface Status. AC INI-Param: N/A')
acSysSATFramersFramerLoopBackRef = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 4, 25, 22, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("loopdisable", 0), ("loopenable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSysSATFramersFramerLoopBackRef.setStatus('current')
if mibBuilder.loadTexts: acSysSATFramersFramerLoopBackRef.setDescription('Frame rLoop Back Reference. AC INI-Param: N/A')
acSysSATFramersFramerInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 4, 25, 22, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("e1CRC4", 0), ("e1CAS", 1), ("e1FAS", 2), ("t1D4", 3), ("t1ESF", 4), ("t12", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSysSATFramersFramerInterfaceType.setStatus('current')
if mibBuilder.loadTexts: acSysSATFramersFramerInterfaceType.setDescription('Framer Interface Type. AC INI-Param: N/A')
acSysSATFramersFramerTransmitControl = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 4, 25, 22, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("systemClock", 0), ("aIS", 1), ("disableTransmit", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSysSATFramersFramerTransmitControl.setStatus('current')
if mibBuilder.loadTexts: acSysSATFramersFramerTransmitControl.setDescription('Framer Transmit Control. AC INI-Param: N/A')
acSysSATFramersRxStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 4, 25, 22, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("alarmClear", 0), ("lOFAlarm", 1), ("lOSAlarm", 2), ("aISAlarm", 3), ("aISInit", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSysSATFramersRxStatus.setStatus('current')
if mibBuilder.loadTexts: acSysSATFramersRxStatus.setDescription('Provides the alarm status of the clock interface. AC INI-Param: N/A')
acSysSATFramersIsUsedAsPLLClock = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 4, 25, 22, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notUsed", 0), ("used", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSysSATFramersIsUsedAsPLLClock.setStatus('current')
if mibBuilder.loadTexts: acSysSATFramersIsUsedAsPLLClock.setDescription('Is Used As PLL Clock indication. AC INI-Param: N/A')
acSysTimingModule = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 4, 26))
acSysPLLStatusTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 4, 26, 21), )
if mibBuilder.loadTexts: acSysPLLStatusTable.setStatus('current')
if mibBuilder.loadTexts: acSysPLLStatusTable.setDescription('')
acSysPLLStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 4, 26, 21, 1), ).setIndexNames((0, "AC-SYSTEM-MIB", "acSysPLLStatusIndex"))
if mibBuilder.loadTexts: acSysPLLStatusEntry.setStatus('current')
if mibBuilder.loadTexts: acSysPLLStatusEntry.setDescription('')
acSysPLLStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 4, 26, 21, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1)))
if mibBuilder.loadTexts: acSysPLLStatusIndex.setStatus('current')
if mibBuilder.loadTexts: acSysPLLStatusIndex.setDescription("Table's Index. AC INI-Param: N/A")
acSysPLLStatusOperatingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 10, 4, 26, 21, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("freeRun", 0), ("lockToRef1", 1), ("lockToRef2", 2), ("lockToLocal", 3), ("holdOver", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSysPLLStatusOperatingMode.setStatus('current')
if mibBuilder.loadTexts: acSysPLLStatusOperatingMode.setDescription("PLL's Current Operating Mode. AC INI-Param: N/A")
mibBuilder.exportSymbols("AC-SYSTEM-MIB", acMultipleIPEnableNetwotkSeparation=acMultipleIPEnableNetwotkSeparation, acNetworkIPIndex=acNetworkIPIndex, acSysEthernetStatusIndex=acSysEthernetStatusIndex, acSysNATTraversal=acSysNATTraversal, acSysTimingE1LineBuildOut=acSysTimingE1LineBuildOut, acSysAccessListStartPort=acSysAccessListStartPort, acNetworkIPLocalIPAddress=acNetworkIPLocalIPAddress, acSysActionSet=acSysActionSet, acSysWEBACLTable=acSysWEBACLTable, acSysPEMExistence=acSysPEMExistence, acSysIPSecSPDPolicyDestPort=acSysIPSecSPDPolicyDestPort, acSysInterfaceActionRes=acSysInterfaceActionRes, acSysIPsecSADestPort=acSysIPsecSADestPort, acSysTypeProduct=acSysTypeProduct, acSysModuleTable=acSysModuleTable, acSysIPsecSAProtocol=acSysIPsecSAProtocol, acSysAccessListProtocol=acSysAccessListProtocol, acSysSCTPAssociationsNum=acSysSCTPAssociationsNum, acSysDiagnostics=acSysDiagnostics, acSysMediaEncription=acSysMediaEncription, acSysAMSPrimaryLanguage=acSysAMSPrimaryLanguage, acSysNFSHostOrIP=acSysNFSHostOrIP, acSysStateOperational=acSysStateOperational, acSysActionSetSaveConfig=acSysActionSetSaveConfig, PYSNMP_MODULE_ID=acSystem, acMultipleIPEnableNTPasOAM=acMultipleIPEnableNTPasOAM, acSysTransmissionType=acSysTransmissionType, acSysNTP=acSysNTP, acSysWEBAccessUserCode=acSysWEBAccessUserCode, acSysSCTPHeartBeatInterval=acSysSCTPHeartBeatInterval, acSysDiagnosticsListOfActivitiesToLog=acSysDiagnosticsListOfActivitiesToLog, acSysSecurityOcspServerIPType=acSysSecurityOcspServerIPType, acSysIdSerialNumber=acSysIdSerialNumber, acSysIKEPolicyProposal1Authentication=acSysIKEPolicyProposal1Authentication, acSystemChassis=acSystemChassis, acSystemChassisLastChanged=acSystemChassisLastChanged, acFirewall=acFirewall, acSysIKEPolicyProposal1DHGroup=acSysIKEPolicyProposal1DHGroup, acSysIPSecDpdMode=acSysIPSecDpdMode, acSys802dot1x=acSys802dot1x, acSysWEBACLIndex=acSysWEBACLIndex, acSysEthernetStatusPortDuplexMode=acSysEthernetStatusPortDuplexMode, acSysInterfacePrefixLength=acSysInterfacePrefixLength, acSysWEBAccessTable=acSysWEBAccessTable, acSysSATFramersRxStatus=acSysSATFramersRxStatus, acSysRepositoryAMS=acSysRepositoryAMS, acSysLDAPServerPort=acSysLDAPServerPort, acSysPowerSupplyTable=acSysPowerSupplyTable, acSysInterfaceIndex=acSysInterfaceIndex, acSysIPsecSAPhase1SaLifetimeInSec=acSysIPsecSAPhase1SaLifetimeInSec, acSysSATSatIndex=acSysSATSatIndex, acSysIPSecSPDProposal2Authentication=acSysIPSecSPDProposal2Authentication, acSysIPsecProposalIndex=acSysIPsecProposalIndex, acSysAccessListActionRes=acSysAccessListActionRes, acSysIPSecSPDTable=acSysIPSecSPDTable, acSyslogAcSyslogServerPortNumber=acSyslogAcSyslogServerPortNumber, acSysDayLightSavingTimeStart=acSysDayLightSavingTimeStart, acSysHTTPClientWebLogoFileUrl=acSysHTTPClientWebLogoFileUrl, acSysIKEPolicyProposal2Authentication=acSysIKEPolicyProposal2Authentication, acNetworkIPEntry=acNetworkIPEntry, acSysVoicePromptTotalMemorySize=acSysVoicePromptTotalMemorySize, acSysAccessListIndex=acSysAccessListIndex, acSysVLANNetworkServiceClassPriority=acSysVLANNetworkServiceClassPriority, acSysHTTPClientV5PortConfFileURL=acSysHTTPClientV5PortConfFileURL, acSyslogServerIPAddress=acSyslogServerIPAddress, acSystemConfiguration=acSystemConfiguration, acSysSecurityAUPDVerifyCertificates=acSysSecurityAUPDVerifyCertificates, acSysNetworkConfig=acSysNetworkConfig, acSysTelnet=acSysTelnet, acSysActionSetGetTimeFromNTPServer=acSysActionSetGetTimeFromNTPServer, acSysSATGeographicalPosition=acSysSATGeographicalPosition, acSysSecurityOcspServerPort=acSysSecurityOcspServerPort, acSysActionSetConvertNetworkIFsConfiguration=acSysActionSetConvertNetworkIFsConfiguration, acSysState=acSysState, acSysNFSIndex=acSysNFSIndex, acSysLDAPServerIp=acSysLDAPServerIp, acSysWEBHTTPSPort=acSysWEBHTTPSPort, acSysEthernetStatusEntry=acSysEthernetStatusEntry, acSysAccessListPacketSize=acSysAccessListPacketSize, acSysTDMBusSpeed=acSysTDMBusSpeed, acSysVLANMode=acSysVLANMode, acSysSecurityGenCsrSubjectName=acSysSecurityGenCsrSubjectName, acSysIPsecSAActionRes=acSysIPsecSAActionRes, acSysSecurityTLSVersion=acSysSecurityTLSVersion, acSysPCMSerialPortAuditIntervalMin=acSysPCMSerialPortAuditIntervalMin, acSys802dot1xUsername=acSys802dot1xUsername, acSysTelnetServerWanPort=acSysTelnetServerWanPort, acSysIPSecSPDProposal0Encryption=acSysIPSecSPDProposal0Encryption, acSysPEMIndex=acSysPEMIndex, acSysWEBAccessAction=acSysWEBAccessAction, acSysUploadActionResult=acSysUploadActionResult, acSysPLLStatusOperatingMode=acSysPLLStatusOperatingMode, acSysVlanMapEntry=acSysVlanMapEntry, acSysTelnetServerPort=acSysTelnetServerPort, acSysHTTPClientCoderTableFileUrl=acSysHTTPClientCoderTableFileUrl, acSysInterfaceVlanID=acSysInterfaceVlanID, acSysSATFramersSatIndex=acSysSATFramersSatIndex, acSysUploadFileType=acSysUploadFileType, acSysIPSecSPDPolicyRemoteIPAddr=acSysIPSecSPDPolicyRemoteIPAddr, acSysTDMClockNetRefSpeed=acSysTDMClockNetRefSpeed, acMultipleIPInterfaceTableAction=acMultipleIPInterfaceTableAction, acSysActionSetResetControl=acSysActionSetResetControl, acSysAccessListEntry=acSysAccessListEntry, acSysAccessListTable=acSysAccessListTable, acSysModuleGeographicalPosition=acSysModuleGeographicalPosition, acSysHTTPClientVideoFontFileURL=acSysHTTPClientVideoFontFileURL, acSysIPSecEnable=acSysIPSecEnable, acNetworkIPAdminState=acNetworkIPAdminState, acSysIdFirstSerialNumber=acSysIdFirstSerialNumber, acSysIPSecSPDProposal1Encryption=acSysIPSecSPDProposal1Encryption, acSysPowerSupplyLEDs=acSysPowerSupplyLEDs, acSysIPsecSARemoteTunnelAddress=acSysIPsecSARemoteTunnelAddress, acSys802dot1xMode=acSys802dot1xMode, acSysPCMLawSelect=acSysPCMLawSelect, acSysInterfaceStatusPrefixLength=acSysInterfaceStatusPrefixLength, acSysPEMElectricWireConnection=acSysPEMElectricWireConnection, acSysEthernetStatusPortState=acSysEthernetStatusPortState, acSysIPsecSAAction=acSysIPsecSAAction, acSysIKEPolicyProposal0DHGroup=acSysIKEPolicyProposal0DHGroup, acSysActionSetIPSecTLSUpgrade=acSysActionSetIPSecTLSUpgrade, acSysId=acSysId, acSysDayLightSavingTimeOffset=acSysDayLightSavingTimeOffset, acSysWEBHTTPSCipherString=acSysWEBHTTPSCipherString, acNetworkIPLocalDefGW=acNetworkIPLocalDefGW, acSysIPsecProposalAuthenticationAlgorithm=acSysIPsecProposalAuthenticationAlgorithm, acSysTDMClockAutoFallBackEnable=acSysTDMClockAutoFallBackEnable, acSysNFSUID=acSysNFSUID, acSysIPSecSPDPolicyRemoteTunnelIPAddress=acSysIPSecSPDPolicyRemoteTunnelIPAddress, acSysVersion=acSysVersion, acSysNAT=acSysNAT, acSystemChassisDryContactsOutStatus=acSystemChassisDryContactsOutStatus, acSysIPDHCPEnable=acSysIPDHCPEnable, acSysPowerSupplySeverity=acSysPowerSupplySeverity, acSysModuleType=acSysModuleType, acSysTimingExternalIFType=acSysTimingExternalIFType, acSysFileDialPlanFileName=acSysFileDialPlanFileName, acSysIPSecSPDProposal1Authentication=acSysIPSecSPDProposal1Authentication, acSysVlanMapVlanPriority=acSysVlanMapVlanPriority, acSysHTTPClientIniFileTemplateURL=acSysHTTPClientIniFileTemplateURL, acSysIKEPolicyProposal2DHGroup=acSysIKEPolicyProposal2DHGroup, acSysSCTPHostName=acSysSCTPHostName, acSysDiagnosticsEnable=acSysDiagnosticsEnable, acSysAccessListByteRate=acSysAccessListByteRate, acSysHTTPClientUserInfoFileURL=acSysHTTPClientUserInfoFileURL, acSysStateTemperature=acSysStateTemperature, acSysSNMP=acSysSNMP, acSysTDMClockFallbackClock=acSysTDMClockFallbackClock, acSystemChassisDryContactsInStatus=acSystemChassisDryContactsInStatus, acSysIPsecProposalRowStatus=acSysIPsecProposalRowStatus, acSysPLLStatusIndex=acSysPLLStatusIndex, acSysHTTPClientCmpFileURL=acSysHTTPClientCmpFileURL, acSysControlTrunkingToAnalogFunctionalityProfile=acSysControlTrunkingToAnalogFunctionalityProfile, acSysHTTPClientCASFileURL=acSysHTTPClientCASFileURL, acSysNTPServerIPAddress=acSysNTPServerIPAddress, acSysWEBAccessEntry=acSysWEBAccessEntry, acSysFileV5PortConfFileName=acSysFileV5PortConfFileName, acSysLDAPStatus=acSysLDAPStatus, acSysNFSNfsVersion=acSysNFSNfsVersion, acSysNFSRowStatus=acSysNFSRowStatus, acSysEthernetPortPhyConfiguration=acSysEthernetPortPhyConfiguration, acSysTDMClockSource=acSysTDMClockSource, acSysFanTrayFansStatus=acSysFanTrayFansStatus, acSysHTTPClient=acSysHTTPClient, acSysAccessListEndPort=acSysAccessListEndPort, acSysModuleFRUstatus=acSysModuleFRUstatus, acSysFanTrayType=acSysFanTrayType, acSysMediaEncriptionRTPAuthenticationDisableTx=acSysMediaEncriptionRTPAuthenticationDisableTx, acSysSerialIFStop=acSysSerialIFStop, acSysTimingModule=acSysTimingModule, acSysWEBAccessUserName=acSysWEBAccessUserName, acSysSTUNEnable=acSysSTUNEnable, acSysIPsecSADPDmode=acSysIPsecSADPDmode, acSysAccessListMatchCount=acSysAccessListMatchCount, acSysPCMIdlePattern=acSysPCMIdlePattern, acSysIPDHCPSpeedFactor=acSysIPDHCPSpeedFactor, acSysLicenseKeyActiveList=acSysLicenseKeyActiveList, acSysEthernetSecondPortSpeed=acSysEthernetSecondPortSpeed, acSysSecurityTLSFIPS140Mode=acSysSecurityTLSFIPS140Mode, acSysHTTPClientDialPlanFileURL=acSysHTTPClientDialPlanFileURL, acSysHTTPClientTLSCertFileUrl=acSysHTTPClientTLSCertFileUrl, acSystem=acSystem, acSysVoicePrompt=acSysVoicePrompt, acSysIPsecProposalEntry=acSysIPsecProposalEntry, acSysPCM=acSysPCM, acSysHTTPClientCPTFileURL=acSysHTTPClientCPTFileURL, acSysVlanMapDiffServ=acSysVlanMapDiffServ, acSysSNMPEmsColdStrartIndication=acSysSNMPEmsColdStrartIndication, acSysLDAPPassword=acSysLDAPPassword, acSysTDMBus=acSysTDMBus, acSysVlanMapActionRes=acSysVlanMapActionRes, acSysVlanMapRowStatus=acSysVlanMapRowStatus, acSysSecurity=acSysSecurity, acSysFileExternalCoder=acSysFileExternalCoder, acSysModuleLEDs=acSysModuleLEDs, acSysSATTimingUnitExistence=acSysSATTimingUnitExistence, acSysSNMPKeepAliveTrapPort=acSysSNMPKeepAliveTrapPort, acSysIPsecSARemoteEndpointAddress=acSysIPsecSARemoteEndpointAddress, acSysEthernetFirstPortDuplexMode=acSysEthernetFirstPortDuplexMode, acSysHTTPClientXMLFileUrl=acSysHTTPClientXMLFileUrl, acSysModuleIndex=acSysModuleIndex, acSysEthernetActivePortNumber=acSysEthernetActivePortNumber, acSysHTTPClientVPFileURL=acSysHTTPClientVPFileURL, acSysVlanMapTable=acSysVlanMapTable, acSysMediaEncriptionRTPEncryptionDisableRx=acSysMediaEncriptionRTPEncryptionDisableRx, acSysPEMEntry=acSysPEMEntry, acSysPowerSupplyExistence=acSysPowerSupplyExistence, acSysIPSecSPDEntry=acSysIPSecSPDEntry, acSysIPSecSPDPolicySrcPort=acSysIPSecSPDPolicySrcPort, acSysDayLightSavingTime=acSysDayLightSavingTime, acSysIPsecSAPhase2SaLifetimeInSec=acSysIPsecSAPhase2SaLifetimeInSec, acSysIPsecProposalEncryptionAlgorithm=acSysIPsecProposalEncryptionAlgorithm, acSysActionSetDefaults=acSysActionSetDefaults, acSysTelnetSSHServerPort=acSysTelnetSSHServerPort, acSysSerialIFBaudRate=acSysSerialIFBaudRate, acSysNATType=acSysNATType, acSysSATFramersTable=acSysSATFramersTable, acSysVersionSoftware=acSysVersionSoftware, acSysTelnetSSHServerEnable=acSysTelnetSSHServerEnable, acSysIPSecSPDKeyExchangeMethodIndex=acSysIPSecSPDKeyExchangeMethodIndex, acSysInterfaceName=acSysInterfaceName, acSysCountTrunks=acSysCountTrunks, acSysIPSec=acSysIPSec, acSysSTUNBindingLifeTime=acSysSTUNBindingLifeTime, acSysUploadActionID=acSysUploadActionID, acSysIP=acSysIP, acSysLDAPServiceEnable=acSysLDAPServiceEnable, acSysModuleTemperature=acSysModuleTemperature, acSysHA=acSysHA, acSysFanTrayEntry=acSysFanTrayEntry, acSysSerialIFFlowControl=acSysSerialIFFlowControl, acSysActionSetAutoUpdate=acSysActionSetAutoUpdate, acSysType=acSysType, acSysTDMClockLocalReference=acSysTDMClockLocalReference, acSysTimingLoopBackRef1=acSysTimingLoopBackRef1, acSysNFSActionRes=acSysNFSActionRes, acSysModulePresence=acSysModulePresence, acSysUploadActionType=acSysUploadActionType, acSyslog=acSyslog, acSysHAStatus=acSysHAStatus, acVoiceStreamUploadMethod=acVoiceStreamUploadMethod, acMultipleIP=acMultipleIP, acSysEthernetStatusActivePortNumber=acSysEthernetStatusActivePortNumber, acSysSecurityOcspServerIP=acSysSecurityOcspServerIP, acSysHTTPClientAutoUpdatePredefinedTime=acSysHTTPClientAutoUpdatePredefinedTime, acSysIKEPolicyProposal0Encryption=acSysIKEPolicyProposal0Encryption, acSysActionSetActionId=acSysActionSetActionId, acSysNFSRootPath=acSysNFSRootPath, acSysLDAPSearchDN=acSysLDAPSearchDN, acSysSATFramersFramerInterfaceStatus=acSysSATFramersFramerInterfaceStatus, acSysIPsecSAEntry=acSysIPsecSAEntry, acSysLDAPServerMaxRespondTime=acSysLDAPServerMaxRespondTime, acSysFileXml=acSysFileXml, acSysIPsecSARemoteSubnetIPAddress=acSysIPsecSARemoteSubnetIPAddress, acSysSATFramersEntry=acSysSATFramersEntry)
mibBuilder.exportSymbols("AC-SYSTEM-MIB", acSysSecurityOcspSecondaryServerIP=acSysSecurityOcspSecondaryServerIP, acSysSATEntry=acSysSATEntry, acSysSerialIFParity=acSysSerialIFParity, acSysIPSubNetAddress=acSysIPSubNetAddress, acSysPEMGeographicalPosition=acSysPEMGeographicalPosition, acSysAccessListSourceIP=acSysAccessListSourceIP, acSysNTPUtcOffset=acSysNTPUtcOffset, acSysIKEPolicyAction=acSysIKEPolicyAction, acMultipleIPEnable=acMultipleIPEnable, acSysIPsecSATable=acSysIPsecSATable, acSysTypeModule=acSysTypeModule, acSystemAction=acSystemAction, acSysEthernet=acSysEthernet, acSysIPsecProposalTable=acSysIPsecProposalTable, acSysVLANGoldServiceClassPriority=acSysVLANGoldServiceClassPriority, acSysSATModule=acSysSATModule, acSysIKE=acSysIKE, acSysInterfaceStatusApplicationTypes=acSysInterfaceStatusApplicationTypes, acSysMediaEncriptionRTCPEncryptionDisableRx=acSysMediaEncriptionRTCPEncryptionDisableRx, acSysInterfaceGateway=acSysInterfaceGateway, acSysInterfaceStatusGateway=acSysInterfaceStatusGateway, acSysTimingValidationTime=acSysTimingValidationTime, acSysFileSecondVideoFontFileName=acSysFileSecondVideoFontFileName, acSysActionSetSwUpgrade=acSysActionSetSwUpgrade, acSysIPDefaultGatewayAddress=acSysIPDefaultGatewayAddress, acSysIKEPolicyTable=acSysIKEPolicyTable, acSysPowerSupplyEntry=acSysPowerSupplyEntry, acSysNetwork=acSysNetwork, acSysSecurityOcspDefaultResponse=acSysSecurityOcspDefaultResponse, acSysEthernetPort=acSysEthernetPort, acSysIPDnsPrimaryServerType=acSysIPDnsPrimaryServerType, acSysSTUN=acSysSTUN, acSysLicenseKey=acSysLicenseKey, acSysModuleEntry=acSysModuleEntry, acSysIPsecSAPhase2SaLifetimeInKB=acSysIPsecSAPhase2SaLifetimeInKB, acSysModuleHAStatus=acSysModuleHAStatus, acSysIKEPolicyProposal0Authentication=acSysIKEPolicyProposal0Authentication, acSysTelnetWanSSHServerPort=acSysTelnetWanSSHServerPort, acSysDayLightSavingTimeEnd=acSysDayLightSavingTimeEnd, acSysIPDnsSecondaryServerType=acSysIPDnsSecondaryServerType, acSysGenericINILine=acSysGenericINILine, acSysIKEPolicyActionRes=acSysIKEPolicyActionRes, acSysTDMClockMasterSlaveSelection=acSysTDMClockMasterSlaveSelection, acSysTDM=acSysTDM, acSysModuleFRUaction=acSysModuleFRUaction, acSysNetworkFileSystem=acSysNetworkFileSystem, acSysVLANPremiumServiceClassControlPriority=acSysVLANPremiumServiceClassControlPriority, acSysInterfaceIPAddress=acSysInterfaceIPAddress, acSysInterfaceApplicationTypes=acSysInterfaceApplicationTypes, acSysInterfaceStatusIPAddress=acSysInterfaceStatusIPAddress, acSysIdSlotNumber=acSysIdSlotNumber, acSysSATInitInformation=acSysSATInitInformation, acSysLDAPBindDN=acSysLDAPBindDN, acSysFileThirdVideoFontFileName=acSysFileThirdVideoFontFileName, acSysIKEPolicyAuthenticationMethod=acSysIKEPolicyAuthenticationMethod, acSysWebStat=acSysWebStat, acSysFileTLSPkeyFileName=acSysFileTLSPkeyFileName, acSysIPDnsSecondaryServer=acSysIPDnsSecondaryServer, acSysIPsecProposalDiffieHellmanGroup=acSysIPsecProposalDiffieHellmanGroup, acSysNFSTable=acSysNFSTable, acSysSTUNPrimaryServerIP=acSysSTUNPrimaryServerIP, acSysVLANControlVlanId=acSysVLANControlVlanId, acSysCount=acSysCount, acSysAMSAPSProfile=acSysAMSAPSProfile, acSysNFSEntry=acSysNFSEntry, acSysInterfaceStatusEntry=acSysInterfaceStatusEntry, acSysWEBWanHttpsPort=acSysWEBWanHttpsPort, acSysLicenseKeyString=acSysLicenseKeyString, acSysModuleNumOfPorts=acSysModuleNumOfPorts, acSysModuleFirstPortNum=acSysModuleFirstPortNum, acSysHTTPClientTLSPkeyFileUrl=acSysHTTPClientTLSPkeyFileUrl, acSysIKEPolicyLifeInSeconds=acSysIKEPolicyLifeInSeconds, acSysIPSecSPDPolicyLocalIPAddrType=acSysIPSecSPDPolicyLocalIPAddrType, acSysUploadFileURI=acSysUploadFileURI, acSysIKEPolicyRowStatus=acSysIKEPolicyRowStatus, acSysIPSecSPDProposal2Encryption=acSysIPSecSPDProposal2Encryption, acSysTDMBusOutputStartingChannel=acSysTDMBusOutputStartingChannel, acSysIPSecSPDRowStatus=acSysIPSecSPDRowStatus, acSysNFSAction=acSysNFSAction, acSysInterfaceStatusEntryIndex=acSysInterfaceStatusEntryIndex, acSysFanTrayGeographicalPosition=acSysFanTrayGeographicalPosition, acSysVLANPremiumServiceClassMediaPriority=acSysVLANPremiumServiceClassMediaPriority, acSysPowerSupplyIndex=acSysPowerSupplyIndex, acSysStateGWSeverity=acSysStateGWSeverity, acSysSATFramersFramerInterfaceType=acSysSATFramersFramerInterfaceType, acSysNFSGID=acSysNFSGID, acSysPLLStatusEntry=acSysPLLStatusEntry, acSysInterfaceStatusTable=acSysInterfaceStatusTable, acSysVLANVlanNativeVlanId=acSysVLANVlanNativeVlanId, acSysHTTPClientFXOCoeffFileURL=acSysHTTPClientFXOCoeffFileURL, acSysIPSecSPDMode=acSysIPSecSPDMode, acSysVLANPremiumServiceClassControlDiffServ=acSysVLANPremiumServiceClassControlDiffServ, acSysIPsecSASharedKey=acSysIPsecSASharedKey, acNetworkIPTable=acNetworkIPTable, acSysTDMClock=acSysTDMClock, acSysInterfaceTable=acSysInterfaceTable, acSysSecurityOcspEnable=acSysSecurityOcspEnable, acSysStateIsPstnManagementEnable=acSysStateIsPstnManagementEnable, acSysWEBACLIP=acSysWEBACLIP, acSysCountChannels=acSysCountChannels, acSysSerialIFData=acSysSerialIFData, acSysTypeCPUSpeed=acSysTypeCPUSpeed, acSysWEBDenyAuthenticationTimer=acSysWEBDenyAuthenticationTimer, acSysInterfaceStatusTypeIndex=acSysInterfaceStatusTypeIndex, acSysSATFramersFramerLoopBackRef=acSysSATFramersFramerLoopBackRef, acSysVersionIniFile=acSysVersionIniFile, acSysSCTPCheckSumMethod=acSysSCTPCheckSumMethod, acSysFileFirstVideoFontFileName=acSysFileFirstVideoFontFileName, acSysIPSecSPDPolicyRemoteTunnelSubnetMask=acSysIPSecSPDPolicyRemoteTunnelSubnetMask, acSysIKEPolicyProposal1Encryption=acSysIKEPolicyProposal1Encryption, acSysHTTPClientAutoUpdateCmpFile=acSysHTTPClientAutoUpdateCmpFile, acSys802dot1xVerifyPeerCertificate=acSys802dot1xVerifyPeerCertificate, acSysEthernetStatusPortSpeed=acSysEthernetStatusPortSpeed, acSysIKEPolicyLifeInKB=acSysIKEPolicyLifeInKB, acSysIPAddress=acSysIPAddress, acSysSerialIF=acSysSerialIF, acSysHAGlobalIPAddress=acSysHAGlobalIPAddress, acSysDayLightSavingTimeMode=acSysDayLightSavingTimeMode, acSysFileUserInfo=acSysFileUserInfo, acSysIPSecSPDProposal0Authentication=acSysIPSecSPDProposal0Authentication, acSysHTTPClientDataConfigurationFileUrl=acSysHTTPClientDataConfigurationFileUrl, acSysUploadFileNumber=acSysUploadFileNumber, acSysWEBACLEntry=acSysWEBACLEntry, acSysTDMClockAutoFallBackRevertingEnable=acSysTDMClockAutoFallBackRevertingEnable, acSysFileVp=acSysFileVp, acSystemStatus=acSystemStatus, acSysFanTrayIndex=acSysFanTrayIndex, acSysFanTrayFansConfiguredSpeed=acSysFanTrayFansConfiguredSpeed, acSysSATFramersIsUsedAsPLLClock=acSysSATFramersIsUsedAsPLLClock, acSysIKEPolicyProposal3DHGroup=acSysIKEPolicyProposal3DHGroup, acSysAMSApsIpAddress=acSysAMSApsIpAddress, acSysPEMType=acSysPEMType, acSysIdName=acSysIdName, acSysModuleSWVersion=acSysModuleSWVersion, acSysControl=acSysControl, acSysWEBAccessIndex=acSysWEBAccessIndex, acSysVLANNetworkServiceClassDiffServ=acSysVLANNetworkServiceClassDiffServ, acSysVersionFlash=acSysVersionFlash, acSys802dot1xPassword=acSys802dot1xPassword, acSysIPSecSPDIndex=acSysIPSecSPDIndex, acSysInterfaceRowStatus=acSysInterfaceRowStatus, acSysIPsecSARemoteSubnetPrefixLength=acSysIPsecSARemoteSubnetPrefixLength, acSysMediaEncriptionRTPEncryptionDisableTx=acSysMediaEncriptionRTPEncryptionDisableTx, acMultipleIPEnableDNSasOAM=acMultipleIPEnableDNSasOAM, acSysActionAdminState=acSysActionAdminState, acSysIPsecSAAuthenticationMethod=acSysIPsecSAAuthenticationMethod, acSysSRTPPacketMKISize=acSysSRTPPacketMKISize, acSysIPSecSPDProposal3Authentication=acSysIPSecSPDProposal3Authentication, acSysIKEPolicyProposal2Encryption=acSysIKEPolicyProposal2Encryption, acSysEthernetStatusTable=acSysEthernetStatusTable, acSysIPsecSARowStatus=acSysIPsecSARowStatus, acSysActionAdmin=acSysActionAdmin, acNetworkIPIfIndex=acNetworkIPIfIndex, acSysVlanMapIndex=acSysVlanMapIndex, acSysHAStatusReady=acSysHAStatusReady, acSysFanTraySeverity=acSysFanTraySeverity, acSysEthernetFirstPortSpeed=acSysEthernetFirstPortSpeed, acVoiceStreamStatus=acVoiceStreamStatus, acSysIPSecSPDActionRes=acSysIPSecSPDActionRes, acSysSNMPWanPort=acSysSNMPWanPort, acSysVLANGoldServiceClassDiffServ=acSysVLANGoldServiceClassDiffServ, acSysWEBAccess=acSysWEBAccess, acSysHTTPClientIniFileURL=acSysHTTPClientIniFileURL, acSysHTTPClientPRTFileURL=acSysHTTPClientPRTFileURL, acSysVLANBronzeServiceClassPriority=acSysVLANBronzeServiceClassPriority, acSysActionSetGWAppTLSUpgrade=acSysActionSetGWAppTLSUpgrade, acSysSATTimingRefSelection=acSysSATTimingRefSelection, acSysSATFramersFramerTransmitControl=acSysSATFramersFramerTransmitControl, acSysMediaEncriptionRTPAuthenticationDisableRx=acSysMediaEncriptionRTPAuthenticationDisableRx, acNetworkIPLocalSubnetMask=acNetworkIPLocalSubnetMask, acSysWEBWanHttpPort=acSysWEBWanHttpPort, acSysSCTPT4SACKTimer=acSysSCTPT4SACKTimer, acSysEthernetSecondPortDuplexMode=acSysEthernetSecondPortDuplexMode, acSysIPSecSPDPolicyProtocol=acSysIPSecSPDPolicyProtocol, acSysTelnetServerEnable=acSysTelnetServerEnable, acSysModuleSerialNumber=acSysModuleSerialNumber, acSysTypeDSP=acSysTypeDSP, acSysAMSSecondaryLanguage=acSysAMSSecondaryLanguage, acSysFanTrayExistence=acSysFanTrayExistence, acSysWEBAccessWebAuthMode=acSysWEBAccessWebAuthMode, acSysSTUNSecondaryServerIP=acSysSTUNSecondaryServerIP, acSysTime=acSysTime, acSysFilePrerecordedTones=acSysFilePrerecordedTones, acSysHTTPClientAutoUpdateFrequency=acSysHTTPClientAutoUpdateFrequency, acSysActionSetReset=acSysActionSetReset, acSysIPStatus=acSysIPStatus, acSysTiming=acSysTiming, acSysAMS=acSysAMS, acSysSecurityHTTPSRequireClientCertificate=acSysSecurityHTTPSRequireClientCertificate, acSysFileTLSCertFileName=acSysFileTLSCertFileName, acSysNFSAuthType=acSysNFSAuthType, acSysWEBAccessRowStatus=acSysWEBAccessRowStatus, acSysRepositoryAMSIsReadyForUpdate=acSysRepositoryAMSIsReadyForUpdate, acSysMiscConfig=acSysMiscConfig, acSysTimingT1LineBuildOut=acSysTimingT1LineBuildOut, acSysIPsecSAIndex=acSysIPsecSAIndex, acSysUpload=acSysUpload, acSysIPsecProposalActionRes=acSysIPsecProposalActionRes, acSysLDAP=acSysLDAP, acSysStateHAupdateInProgress=acSysStateHAupdateInProgress, acSysAMSApsPort=acSysAMSApsPort, acSysInterfaceEntry=acSysInterfaceEntry, acSysSCTP=acSysSCTP, acSysPowerSupplyGeographicalPosition=acSysPowerSupplyGeographicalPosition, acSysFileTLSRootFileName=acSysFileTLSRootFileName, acSysAccessListAllowType=acSysAccessListAllowType, acVoiceStream=acVoiceStream, acSysAccessListByteBurst=acSysAccessListByteBurst, acSysWEB=acSysWEB, acSysTimingClockToDeriveA=acSysTimingClockToDeriveA, acSysVlanMapAction=acSysVlanMapAction, acSysHTTPClientTLSRootFileUrl=acSysHTTPClientTLSRootFileUrl, acSysVLANPremiumServiceClassMediaDiffServ=acSysVLANPremiumServiceClassMediaDiffServ, acSysIPSecSPDPolicyLocalTunnelIPAddress=acSysIPSecSPDPolicyLocalTunnelIPAddress, acSysFanTrayFansCurrentSpeed=acSysFanTrayFansCurrentSpeed, acSysAccessListRowStatus=acSysAccessListRowStatus, acSysInterfaceStatusMode=acSysInterfaceStatusMode, acSysActionAdminStateLockTimeout=acSysActionAdminStateLockTimeout, acSysTimingTransmitControl=acSysTimingTransmitControl, acSysAccessListAction=acSysAccessListAction, acSysWebStatPasswordControlViaSNMP=acSysWebStatPasswordControlViaSNMP, acSysVLANBronzeServiceClassDiffServ=acSysVLANBronzeServiceClassDiffServ, acSyslogEnable=acSyslogEnable, acSysIPSecSPDLifeInSeconds=acSysIPSecSPDLifeInSeconds, acSysSecuritySelfSignedCertificateSubjectName=acSysSecuritySelfSignedCertificateSubjectName, acSysWEBAccessActionResult=acSysWEBAccessActionResult, acMultipleIPEnableSCTPasControl=acMultipleIPEnableSCTPasControl, acSysTimingLoopBackRef2=acSysTimingLoopBackRef2, acSysModuleOperationalState=acSysModuleOperationalState, acSysAccessListNetMask=acSysAccessListNetMask, acSysNTPUpdateInterval=acSysNTPUpdateInterval, acSysIPsecSAIPsecMode=acSysIPsecSAIPsecMode, acSysIKEPolicyProposal3Authentication=acSysIKEPolicyProposal3Authentication, acSysIKEPolicyProposal3Encryption=acSysIKEPolicyProposal3Encryption, acSysAMSForceRepositoryEnable=acSysAMSForceRepositoryEnable, acSysInterfaceStatusVlanID=acSysInterfaceStatusVlanID, acSysMediaEncriptionRTCPEncryptionDisableTx=acSysMediaEncriptionRTCPEncryptionDisableTx, acSysTimingClockToDeriveB=acSysTimingClockToDeriveB, acSysPEMTable=acSysPEMTable, acSysActionSetOnLineChangesApply=acSysActionSetOnLineChangesApply, acSysVLAN=acSysVLAN, acSysVoicePromptMaxFreeMemorySize=acSysVoicePromptMaxFreeMemorySize, acSysInterfaceMode=acSysInterfaceMode, acSysIPsecProposalAction=acSysIPsecProposalAction, acSysWEBConfigDisable=acSysWEBConfigDisable, acSysCountDSPs=acSysCountDSPs, acSysModuleLicenseKeyList=acSysModuleLicenseKeyList, acSysFanTrayLEDs=acSysFanTrayLEDs, acSysWEBHTTPSOnly=acSysWEBHTTPSOnly, acVoiceStreamUploadPostUri=acVoiceStreamUploadPostUri, acSysIPSecIKECertificateExtValidate=acSysIPSecIKECertificateExtValidate, acSysNFSVlanType=acSysNFSVlanType, acSysTelnetSSHRequirePublicKey=acSysTelnetSSHRequirePublicKey, acSysPCMIdleABCDPattern=acSysPCMIdleABCDPattern)
mibBuilder.exportSymbols("AC-SYSTEM-MIB", acSysSecurityOcspSecondaryServerIPType=acSysSecurityOcspSecondaryServerIPType, acSysVLANOamVlanId=acSysVLANOamVlanId, acSysIKEPolicyEntry=acSysIKEPolicyEntry, acSysIPSecSPDProposal3Encryption=acSysIPSecSPDProposal3Encryption, acSysInterfaceStatusName=acSysInterfaceStatusName, acSysIPSecSPDLifeInKB=acSysIPSecSPDLifeInKB, acSysTransmission=acSysTransmission, acSysEthernetStatusPowerOverEthernet=acSysEthernetStatusPowerOverEthernet, acSysAMSProfile=acSysAMSProfile, acSysControlProtocolType=acSysControlProtocolType, acSysTDMClockEnableFallBack=acSysTDMClockEnableFallBack, acSysTelnetSSHAdminKey=acSysTelnetSSHAdminKey, acSysSRTP=acSysSRTP, acSysHTTPClientFXSCoeffFileURL=acSysHTTPClientFXSCoeffFileURL, acSysFanTrayTable=acSysFanTrayTable, acSysGenericINISecureStartup=acSysGenericINISecureStartup, acSysSATFramersFramerIndex=acSysSATFramersFramerIndex, acSysIKEPolicyShardKey=acSysIKEPolicyShardKey, acSysSATTable=acSysSATTable, acSysTDMClockPLLOutOfRange=acSysTDMClockPLLOutOfRange, acSysAction=acSysAction, acSysActionSetAutoUpdateActionResult=acSysActionSetAutoUpdateActionResult, acSysTelnetServerIdleDisconnect=acSysTelnetServerIdleDisconnect, acSysTDMBusOutputPort=acSysTDMBusOutputPort, acSysLDAPStatusServerMode=acSysLDAPStatusServerMode, acSysTimeUp=acSysTimeUp, acSysIKEPolicyIndex=acSysIKEPolicyIndex, acSysDiagnosticsEnablePerformanceThresholdAlarms=acSysDiagnosticsEnablePerformanceThresholdAlarms, acSysIPDHCPLeaseRenewalEnable=acSysIPDHCPLeaseRenewalEnable, acSysVLANMediaVlanId=acSysVLANMediaVlanId, acSysTimingMode=acSysTimingMode, acSysPowerSupplyHwversion=acSysPowerSupplyHwversion, acSysTDMBusType=acSysTDMBusType, acSysPLLStatusTable=acSysPLLStatusTable, acSysFile=acSysFile, acSysFileCpt=acSysFileCpt, acSysIPsecSASourcePort=acSysIPsecSASourcePort, acSysIPSecSPDAction=acSysIPSecSPDAction, acSysIPDnsPrimaryServer=acSysIPDnsPrimaryServer, acSysInterfaceAction=acSysInterfaceAction, acSysGenericINI=acSysGenericINI, acSysVersionSoftwareDate=acSysVersionSoftwareDate, acSysModuleActions=acSysModuleActions, acSysSATType=acSysSATType, acSysTDMClockBitsReference=acSysTDMClockBitsReference, acSysWEBWebUseRadiusLogin=acSysWEBWebUseRadiusLogin, acMultipleIPEnableTPNCPasOAM=acMultipleIPEnableTPNCPasOAM, acSysLDAPServerDomainName=acSysLDAPServerDomainName)
