#
# PySNMP MIB module STN-NAT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/STN-NAT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:11:28 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
TimeTicks, Integer32, Gauge32, Counter32, iso, ObjectIdentity, ModuleIdentity, Counter64, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, IpAddress, NotificationType, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Integer32", "Gauge32", "Counter32", "iso", "ObjectIdentity", "ModuleIdentity", "Counter64", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "IpAddress", "NotificationType", "MibIdentifier")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
stnNotification, = mibBuilder.importSymbols("SPRING-TIDE-NETWORKS-SMI", "stnNotification")
stnRouterNAT, = mibBuilder.importSymbols("STN-ROUTER-MIB", "stnRouterNAT")
stnNat = ModuleIdentity((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 5, 1))
if mibBuilder.loadTexts: stnNat.setLastUpdated('0002160000Z')
if mibBuilder.loadTexts: stnNat.setOrganization('Spring Tide Networks, Inc.')
if mibBuilder.loadTexts: stnNat.setContactInfo(' Spring Tide Networks, Inc. Customer Service Postal: 3 Clock Tower Place Maynard, MA 01754 Tel: 1 888-786-4357 Email: stncs@springtidenet.com ')
if mibBuilder.loadTexts: stnNat.setDescription('This MIB module describes managed objects of Spring Tide Networks Network Address Translation.')
stnNatObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 5, 1, 1))
stnNatMibConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 5, 1, 2))
stnNatMibTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 5, 1, 3))
class NatTransMode(TextualConvention, Integer32):
    description = 'NAT translation mode.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("pooled", 1), ("static", 2), ("pat", 3))

stnNatL2Table = MibTable((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 5, 1, 1, 1), )
if mibBuilder.loadTexts: stnNatL2Table.setStatus('current')
if mibBuilder.loadTexts: stnNatL2Table.setDescription('A list of NAT L2 entries.')
stnNatL2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 5, 1, 1, 1, 1), ).setIndexNames((0, "STN-NAT-MIB", "stnNatL2IfIndex"))
if mibBuilder.loadTexts: stnNatL2Entry.setStatus('current')
if mibBuilder.loadTexts: stnNatL2Entry.setDescription('Entry contains information about a particular NAT L2.')
stnNatL2IfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 5, 1, 1, 1, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnNatL2IfIndex.setStatus('current')
if mibBuilder.loadTexts: stnNatL2IfIndex.setDescription('This ifIndex is that of the VcLink/L2 that was NAT Enabled.')
stnNatL2InsidePktMisses = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 5, 1, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnNatL2InsidePktMisses.setStatus('current')
if mibBuilder.loadTexts: stnNatL2InsidePktMisses.setDescription("The number of packets received from the 'inside' whose translation was unknown and needed to be learned")
stnNatL2InsidePktHits = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 5, 1, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnNatL2InsidePktHits.setStatus('current')
if mibBuilder.loadTexts: stnNatL2InsidePktHits.setDescription("The number of packets received from the 'inside' whose translation was known.")
stnNatL2OutsidePktMisses = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 5, 1, 1, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnNatL2OutsidePktMisses.setStatus('current')
if mibBuilder.loadTexts: stnNatL2OutsidePktMisses.setDescription("The number of packets received from the 'outside' whose translation was unknown.")
stnNatL2OutsidePktHits = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 5, 1, 1, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnNatL2OutsidePktHits.setStatus('current')
if mibBuilder.loadTexts: stnNatL2OutsidePktHits.setDescription("The number of packets received from the 'outside' whose translation was known.")
stnNatL2UntransInsidePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 5, 1, 1, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnNatL2UntransInsidePkts.setStatus('current')
if mibBuilder.loadTexts: stnNatL2UntransInsidePkts.setDescription("The number of packets received from the 'inside' that could not be translated because their source addresses were not among the valid inside addresses.")
stnNatL2UntransOutsidePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 5, 1, 1, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnNatL2UntransOutsidePkts.setStatus('current')
if mibBuilder.loadTexts: stnNatL2UntransOutsidePkts.setDescription("The number of packets received from the 'outside' that could not be translated because the was no existing translation availible.")
stnNatL2InsideAlgPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 5, 1, 1, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnNatL2InsideAlgPkts.setStatus('current')
if mibBuilder.loadTexts: stnNatL2InsideAlgPkts.setDescription("The number of packets received from the 'inside' that required Application Level Gateway (ALG) processing specific to protocol or application.")
stnNatL2OutsideAlgPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 5, 1, 1, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnNatL2OutsideAlgPkts.setStatus('current')
if mibBuilder.loadTexts: stnNatL2OutsideAlgPkts.setDescription("The number of packets received from the 'outside' that required Application Level Gateway (ALG) processing specific to protocol or application.")
stnNatL2FlowId = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 5, 1, 1, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnNatL2FlowId.setStatus('current')
if mibBuilder.loadTexts: stnNatL2FlowId.setDescription('This is the internal flow identifier associated with this VcLink/L2 Interface.(STN use only)')
stnNatGroupTable = MibTable((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 5, 1, 1, 2), )
if mibBuilder.loadTexts: stnNatGroupTable.setStatus('current')
if mibBuilder.loadTexts: stnNatGroupTable.setDescription('A list of group based NAT entries.')
stnNatGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 5, 1, 1, 2, 1), ).setIndexNames((0, "STN-NAT-MIB", "stnNatGroupSubnetIfInstance"), (0, "STN-NAT-MIB", "stnNatGroupOutsideBaseAddress"))
if mibBuilder.loadTexts: stnNatGroupEntry.setStatus('current')
if mibBuilder.loadTexts: stnNatGroupEntry.setDescription('Entry contains information about a particular group based NAT.')
stnNatGroupSubnetIfInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 5, 1, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnNatGroupSubnetIfInstance.setStatus('current')
if mibBuilder.loadTexts: stnNatGroupSubnetIfInstance.setDescription('A sequence number that identifies a sub-network interface entry in the table.')
stnNatGroupOutsideBaseAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 5, 1, 1, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnNatGroupOutsideBaseAddress.setStatus('current')
if mibBuilder.loadTexts: stnNatGroupOutsideBaseAddress.setDescription('This is the first outside IP address in the range of outside addresses that packets from the inside have their source address translated to.')
stnNatGroupOutsideEndAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 5, 1, 1, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnNatGroupOutsideEndAddress.setStatus('current')
if mibBuilder.loadTexts: stnNatGroupOutsideEndAddress.setDescription('This is the last outside IP address in the range of outside addresses that packets from the inside have their source address translated to.')
stnNatGroupInsideBaseAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 5, 1, 1, 2, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnNatGroupInsideBaseAddress.setStatus('current')
if mibBuilder.loadTexts: stnNatGroupInsideBaseAddress.setDescription('This is the first inside IP address in the range of inside addresses that packets from the outside have their destination address.')
stnNatGroupInsideEndAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 5, 1, 1, 2, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnNatGroupInsideEndAddress.setStatus('current')
if mibBuilder.loadTexts: stnNatGroupInsideEndAddress.setDescription('This is the last inside IP address in the range of inside addresses that packets from the outside have their destination address translated to.')
stnNatGroupTransMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 5, 1, 1, 2, 1, 6), NatTransMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnNatGroupTransMode.setStatus('current')
if mibBuilder.loadTexts: stnNatGroupTransMode.setDescription('Indicates if translations for this NAT group are handled with a static address to address mapping, a pooled address mapping, or a port based mapping (PAT). The translation is relinquished due to inactivity for the pooled and port based cases.')
stnNatGroupAddrIdleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 5, 1, 1, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnNatGroupAddrIdleTime.setStatus('current')
if mibBuilder.loadTexts: stnNatGroupAddrIdleTime.setDescription('The number of seconds that a translation can be idle This value is ignored for static NAT.')
stnNatGroupAddrTransAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 5, 1, 1, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnNatGroupAddrTransAvailable.setStatus('current')
if mibBuilder.loadTexts: stnNatGroupAddrTransAvailable.setDescription('The number of outside Addresses available in the pool for translation. This value is ignored for static NAT.')
stnNatGroupMaxFtpSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 5, 1, 1, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnNatGroupMaxFtpSessions.setStatus('current')
if mibBuilder.loadTexts: stnNatGroupMaxFtpSessions.setDescription("The number of FTP Client sessions that can be translated from the 'inside' at one time. This value is only for client sessions initiated from the inside.")
stnNatGroupMaxFtpSessionsPerInsideAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 5, 1, 1, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnNatGroupMaxFtpSessionsPerInsideAddr.setStatus('current')
if mibBuilder.loadTexts: stnNatGroupMaxFtpSessionsPerInsideAddr.setDescription("The number of FTP Client sessions that can be translated from one 'inside' address at one time. This value is only for client sessions initiated from the inside. (0 means field is ignored.)")
stnNatGroupFtpControlSessionIdleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 5, 1, 1, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnNatGroupFtpControlSessionIdleTime.setStatus('current')
if mibBuilder.loadTexts: stnNatGroupFtpControlSessionIdleTime.setDescription("The number of FTP Client sessions that can be translated from the 'inside' at one time. This value is only for client sessions initiated from the inside.")
stnNatGroupCurrentFtpSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 5, 1, 1, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnNatGroupCurrentFtpSessions.setStatus('current')
if mibBuilder.loadTexts: stnNatGroupCurrentFtpSessions.setDescription("The number of FTP Client sessions that are currently being translated from the 'inside'.")
stnNatGroupTotalFtpSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 5, 1, 1, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnNatGroupTotalFtpSessions.setStatus('current')
if mibBuilder.loadTexts: stnNatGroupTotalFtpSessions.setDescription("The number of FTP Client sessions that have been translated from the 'inside'.")
stnNatGroupMissedFtpSessionLookups = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 5, 1, 1, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnNatGroupMissedFtpSessionLookups.setStatus('current')
if mibBuilder.loadTexts: stnNatGroupMissedFtpSessionLookups.setDescription('The number of times an expired or unknown FTP client session was referenced.')
stnNatGroupNoIdleFtpSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 5, 1, 1, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnNatGroupNoIdleFtpSessions.setStatus('current')
if mibBuilder.loadTexts: stnNatGroupNoIdleFtpSessions.setDescription('The number of times an FTP Client session was denied translation because there were no availible idle FTP sessions.')
stnNatGroupNoIdleOutsideAddrs = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 5, 1, 1, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnNatGroupNoIdleOutsideAddrs.setStatus('current')
if mibBuilder.loadTexts: stnNatGroupNoIdleOutsideAddrs.setDescription('The number of times a packet has arrived from a valid inside address, but a translation was not established because no outside address was availible. This value is ignored for static NAT.')
stnNatGroupFoundIdleOutsideAddrs = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 5, 1, 1, 2, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnNatGroupFoundIdleOutsideAddrs.setStatus('current')
if mibBuilder.loadTexts: stnNatGroupFoundIdleOutsideAddrs.setDescription('The number of times a packet has arrived from a valid inside address and a translation was established due to the presence of an idle outside address. This value is ignored for static NAT.')
stnNatGroupInsidePktMisses = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 5, 1, 1, 2, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnNatGroupInsidePktMisses.setStatus('current')
if mibBuilder.loadTexts: stnNatGroupInsidePktMisses.setDescription('The number of times a packet arrived from an inside address that did not have a translation programed. This value is ignored for static NAT.')
stnNatGroupInsidePktHits = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 5, 1, 1, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnNatGroupInsidePktHits.setStatus('current')
if mibBuilder.loadTexts: stnNatGroupInsidePktHits.setDescription('The number of times a packet arrived for an inside address that was among any the known inside addresses configured for the interface.')
stnNatGroupOutsidePktMisses = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 5, 1, 1, 2, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnNatGroupOutsidePktMisses.setStatus('current')
if mibBuilder.loadTexts: stnNatGroupOutsidePktMisses.setDescription('The number of times a packet arrived for an outside address that did not have a translation programed. This value is ignored for static NAT.')
stnNatGroupOutsidePktHits = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 5, 1, 1, 2, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnNatGroupOutsidePktHits.setStatus('current')
if mibBuilder.loadTexts: stnNatGroupOutsidePktHits.setDescription('The number of times a packet arrived for an outside address that was among any the known outside addresses configured for the interface.')
stnNatGroupInvalidOutsidePktMisses = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 5, 1, 1, 2, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnNatGroupInvalidOutsidePktMisses.setStatus('current')
if mibBuilder.loadTexts: stnNatGroupInvalidOutsidePktMisses.setDescription('The number of times a packet arrived for an outside address that was not among any of the known outside addresses configured for the interface.')
stnNatGroupInsideFlowOrigin = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 5, 1, 1, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ingress", 1), ("egress", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnNatGroupInsideFlowOrigin.setStatus('current')
if mibBuilder.loadTexts: stnNatGroupInsideFlowOrigin.setDescription("Indicates whether traffic entering (ingress) or leaving (egress) the router is considered to be originating from the 'inside' for this interface")
stnNatGroupPortBaseNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 5, 1, 1, 2, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnNatGroupPortBaseNumber.setStatus('current')
if mibBuilder.loadTexts: stnNatGroupPortBaseNumber.setDescription('This is the first port number in the range of port numbers that packets from the inside have their source port translated to. This value is valid only for NAT type PAT.')
stnNatGroupPortEndNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 5, 1, 1, 2, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnNatGroupPortEndNumber.setStatus('current')
if mibBuilder.loadTexts: stnNatGroupPortEndNumber.setDescription('This is the first port number in the range of port numbers that packets from the inside have their source port translated to. This value is valid only for NAT type PAT.')
stnNatGroupMaxInsideAddrs = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 5, 1, 1, 2, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnNatGroupMaxInsideAddrs.setStatus('current')
if mibBuilder.loadTexts: stnNatGroupMaxInsideAddrs.setDescription("The number of inside addresses that can be translated from the 'inside' at one time. This value is valid only for NAT type PAT.")
stnNatGroupMaxPortsPerInsideAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 5, 1, 1, 2, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnNatGroupMaxPortsPerInsideAddr.setStatus('current')
if mibBuilder.loadTexts: stnNatGroupMaxPortsPerInsideAddr.setDescription("The number of port translations allowed any single 'inside' address at one time. This value is valid only for NAT type PAT.")
stnNatGroupPortLimitReached = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 5, 1, 1, 2, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnNatGroupPortLimitReached.setStatus('current')
if mibBuilder.loadTexts: stnNatGroupPortLimitReached.setDescription('The number of times a packet has arrived from a valid inside address, but a translation was not established because the limit on the number of ports was reached. This value is valid only for NAT type PAT.')
stnNatGroupInsideAddrLimitReached = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 5, 1, 1, 2, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnNatGroupInsideAddrLimitReached.setStatus('current')
if mibBuilder.loadTexts: stnNatGroupInsideAddrLimitReached.setDescription('The number of times a packet has arrived from a valid inside address, but a translation was not established because the limit on the number of inside addresses was reached. This value is valid only for NAT type PAT.')
stnNatOutTransTable = MibTable((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 5, 1, 1, 3), )
if mibBuilder.loadTexts: stnNatOutTransTable.setStatus('current')
if mibBuilder.loadTexts: stnNatOutTransTable.setDescription('A list of NAT translation entries indexed by outside address.')
stnNatOutTransEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 5, 1, 1, 3, 1), ).setIndexNames((0, "STN-NAT-MIB", "stnNatOutTransSubnetIfInstance"), (0, "STN-NAT-MIB", "stnNatOutTransOutsideBaseAddress"), (0, "STN-NAT-MIB", "stnNatOutTransOutsideAddress"), (0, "STN-NAT-MIB", "stnNatOutTransOutsidePortNumber"))
if mibBuilder.loadTexts: stnNatOutTransEntry.setStatus('current')
if mibBuilder.loadTexts: stnNatOutTransEntry.setDescription('Entry contains information about a particular NAT translation.')
stnNatOutTransSubnetIfInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 5, 1, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnNatOutTransSubnetIfInstance.setStatus('current')
if mibBuilder.loadTexts: stnNatOutTransSubnetIfInstance.setDescription('A sequence number that identifies a sub-network interface entry in the table.')
stnNatOutTransOutsideBaseAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 5, 1, 1, 3, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnNatOutTransOutsideBaseAddress.setStatus('current')
if mibBuilder.loadTexts: stnNatOutTransOutsideBaseAddress.setDescription('This is the first outside IP address in the range of outside addresses that packets from the inside have their source address translated to.')
stnNatOutTransOutsideAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 5, 1, 1, 3, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnNatOutTransOutsideAddress.setStatus('current')
if mibBuilder.loadTexts: stnNatOutTransOutsideAddress.setDescription('This is the outside IP address for the translation.')
stnNatOutTransInsideAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 5, 1, 1, 3, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnNatOutTransInsideAddress.setStatus('current')
if mibBuilder.loadTexts: stnNatOutTransInsideAddress.setDescription('This is the inside IP address for the translation.')
stnNatOutTransMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 5, 1, 1, 3, 1, 5), NatTransMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnNatOutTransMode.setStatus('current')
if mibBuilder.loadTexts: stnNatOutTransMode.setDescription('Indicates whether this translation is pooled, static or PAT')
stnNatOutTransState = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 5, 1, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("leased", 1), ("expired", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnNatOutTransState.setStatus('current')
if mibBuilder.loadTexts: stnNatOutTransState.setDescription('Indicates the translation state.')
stnNatOutTransUpTimeSec = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 5, 1, 1, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnNatOutTransUpTimeSec.setStatus('current')
if mibBuilder.loadTexts: stnNatOutTransUpTimeSec.setDescription('The number of seconds since this translation was started.')
stnNatOutTransSecsSinceLastHit = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 5, 1, 1, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnNatOutTransSecsSinceLastHit.setStatus('current')
if mibBuilder.loadTexts: stnNatOutTransSecsSinceLastHit.setDescription('The number of seconds since this translation was last used.')
stnNatOutTransCurrentFtpSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 5, 1, 1, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnNatOutTransCurrentFtpSessions.setStatus('current')
if mibBuilder.loadTexts: stnNatOutTransCurrentFtpSessions.setDescription("The number of FTP Client sessions that are currently being translated from the 'inside' for this translation.")
stnNatOutTransTotalFtpSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 5, 1, 1, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnNatOutTransTotalFtpSessions.setStatus('current')
if mibBuilder.loadTexts: stnNatOutTransTotalFtpSessions.setDescription("The number of FTP Client sessions that have been translated from the 'inside' for this translation.")
stnNatOutTransInsidePktHits = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 5, 1, 1, 3, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnNatOutTransInsidePktHits.setStatus('current')
if mibBuilder.loadTexts: stnNatOutTransInsidePktHits.setDescription('The number of times a packet arrived for this inside address.')
stnNatOutTransOutsidePktHits = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 5, 1, 1, 3, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnNatOutTransOutsidePktHits.setStatus('current')
if mibBuilder.loadTexts: stnNatOutTransOutsidePktHits.setDescription('The number of times a packet arrived for this outside address.')
stnNatOutTransOutsidePortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 5, 1, 1, 3, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnNatOutTransOutsidePortNumber.setStatus('current')
if mibBuilder.loadTexts: stnNatOutTransOutsidePortNumber.setDescription('This is the outside port number for the translation.')
stnNatOutTransInsidePortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 5, 1, 1, 3, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnNatOutTransInsidePortNumber.setStatus('current')
if mibBuilder.loadTexts: stnNatOutTransInsidePortNumber.setDescription('This is the inside port number for the translation.')
stnNatOutTransOutsidePortsInuse = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 5, 1, 1, 3, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnNatOutTransOutsidePortsInuse.setStatus('current')
if mibBuilder.loadTexts: stnNatOutTransOutsidePortsInuse.setDescription('This is the number of ports currently being used by the outside address.')
stnNatOutTransInsidePortsInuse = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 5, 1, 1, 3, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnNatOutTransInsidePortsInuse.setStatus('current')
if mibBuilder.loadTexts: stnNatOutTransInsidePortsInuse.setDescription('This is the number of ports currently being used by the inside address.')
stnNatOutTransInsidePortLimitReached = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 5, 1, 1, 3, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnNatOutTransInsidePortLimitReached.setStatus('current')
if mibBuilder.loadTexts: stnNatOutTransInsidePortLimitReached.setDescription('This is the number of times the inside address reached its port limit.')
stnNatInTransTable = MibTable((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 5, 1, 1, 4), )
if mibBuilder.loadTexts: stnNatInTransTable.setStatus('current')
if mibBuilder.loadTexts: stnNatInTransTable.setDescription('A list of NAT translation entries indexed by inside address.')
stnNatInTransEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 5, 1, 1, 4, 1), ).setIndexNames((0, "STN-NAT-MIB", "stnNatInTransSubnetIfInstance"), (0, "STN-NAT-MIB", "stnNatInTransOutsideBaseAddress"), (0, "STN-NAT-MIB", "stnNatInTransInsideAddress"), (0, "STN-NAT-MIB", "stnNatInTransInsidePortNumber"))
if mibBuilder.loadTexts: stnNatInTransEntry.setStatus('current')
if mibBuilder.loadTexts: stnNatInTransEntry.setDescription('Entry contains information about a particular NAT translation.')
stnNatInTransSubnetIfInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 5, 1, 1, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnNatInTransSubnetIfInstance.setStatus('current')
if mibBuilder.loadTexts: stnNatInTransSubnetIfInstance.setDescription('A sequence number that identifies a sub-network interface entry in the table.')
stnNatInTransOutsideBaseAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 5, 1, 1, 4, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnNatInTransOutsideBaseAddress.setStatus('current')
if mibBuilder.loadTexts: stnNatInTransOutsideBaseAddress.setDescription('This is the first outside IP address in the range of outside addresses that packets from the inside have their source address translated to.')
stnNatInTransOutsideAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 5, 1, 1, 4, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnNatInTransOutsideAddress.setStatus('current')
if mibBuilder.loadTexts: stnNatInTransOutsideAddress.setDescription('This is the last outside IP address in the range of outside addresses that packets from the inside have their source address translated to.')
stnNatInTransInsideAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 5, 1, 1, 4, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnNatInTransInsideAddress.setStatus('current')
if mibBuilder.loadTexts: stnNatInTransInsideAddress.setDescription('This is inside IP address for the translation.')
stnNatInTransMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 5, 1, 1, 4, 1, 5), NatTransMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnNatInTransMode.setStatus('current')
if mibBuilder.loadTexts: stnNatInTransMode.setDescription('Indicates whether this translation is pooled, static or port based.')
stnNatInTransState = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 5, 1, 1, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("leased", 1), ("expired", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnNatInTransState.setStatus('current')
if mibBuilder.loadTexts: stnNatInTransState.setDescription('Indicates the translation state.')
stnNatInTransUpTimeSec = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 5, 1, 1, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnNatInTransUpTimeSec.setStatus('current')
if mibBuilder.loadTexts: stnNatInTransUpTimeSec.setDescription('The number of seconds since this translation was started.')
stnNatInTransSecsSinceLastHit = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 5, 1, 1, 4, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnNatInTransSecsSinceLastHit.setStatus('current')
if mibBuilder.loadTexts: stnNatInTransSecsSinceLastHit.setDescription('The number of seconds since this translation was last used.')
stnNatInTransCurrentFtpSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 5, 1, 1, 4, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnNatInTransCurrentFtpSessions.setStatus('current')
if mibBuilder.loadTexts: stnNatInTransCurrentFtpSessions.setDescription("The number of FTP Client sessions that are currently being translated from the 'inside' for this translation.")
stnNatInTransTotalFtpSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 5, 1, 1, 4, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnNatInTransTotalFtpSessions.setStatus('current')
if mibBuilder.loadTexts: stnNatInTransTotalFtpSessions.setDescription("The number of FTP Client sessions that have been translated from the 'inside' for this translation.")
stnNatInTransInsidePktHits = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 5, 1, 1, 4, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnNatInTransInsidePktHits.setStatus('current')
if mibBuilder.loadTexts: stnNatInTransInsidePktHits.setDescription('The number of times a packet arrived for this inside address.')
stnNatInTransOutsidePktHits = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 5, 1, 1, 4, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnNatInTransOutsidePktHits.setStatus('current')
if mibBuilder.loadTexts: stnNatInTransOutsidePktHits.setDescription('The number of times a packet arrived for this outside address.')
stnNatInTransOutsidePortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 5, 1, 1, 4, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnNatInTransOutsidePortNumber.setStatus('current')
if mibBuilder.loadTexts: stnNatInTransOutsidePortNumber.setDescription('This is the outside port number for the translation.')
stnNatInTransInsidePortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 5, 1, 1, 4, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnNatInTransInsidePortNumber.setStatus('current')
if mibBuilder.loadTexts: stnNatInTransInsidePortNumber.setDescription('This is the inside port number for the translation.')
stnNatInTransOutsidePortsInuse = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 5, 1, 1, 4, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnNatInTransOutsidePortsInuse.setStatus('current')
if mibBuilder.loadTexts: stnNatInTransOutsidePortsInuse.setDescription('This is the number of ports currently being used by the outside address.')
stnNatInTransInsidePortsInuse = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 5, 1, 1, 4, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnNatInTransInsidePortsInuse.setStatus('current')
if mibBuilder.loadTexts: stnNatInTransInsidePortsInuse.setDescription('This is the number of ports currently being used by the inside address.')
stnNatInTransInsidePortLimitReached = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 7, 1, 5, 1, 1, 4, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnNatInTransInsidePortLimitReached.setStatus('current')
if mibBuilder.loadTexts: stnNatInTransInsidePortLimitReached.setDescription('This is the number of times the inside address reached its port limit.')
mibBuilder.exportSymbols("STN-NAT-MIB", stnNatOutTransEntry=stnNatOutTransEntry, stnNatMibTraps=stnNatMibTraps, stnNatGroupNoIdleFtpSessions=stnNatGroupNoIdleFtpSessions, stnNatL2Table=stnNatL2Table, stnNatGroupInsideEndAddress=stnNatGroupInsideEndAddress, stnNatInTransUpTimeSec=stnNatInTransUpTimeSec, stnNatOutTransOutsidePortNumber=stnNatOutTransOutsidePortNumber, stnNatL2InsidePktHits=stnNatL2InsidePktHits, stnNatInTransEntry=stnNatInTransEntry, stnNatGroupTransMode=stnNatGroupTransMode, stnNatInTransSecsSinceLastHit=stnNatInTransSecsSinceLastHit, stnNatOutTransSecsSinceLastHit=stnNatOutTransSecsSinceLastHit, stnNatGroupFoundIdleOutsideAddrs=stnNatGroupFoundIdleOutsideAddrs, stnNatGroupSubnetIfInstance=stnNatGroupSubnetIfInstance, stnNatInTransOutsideAddress=stnNatInTransOutsideAddress, stnNatInTransTable=stnNatInTransTable, stnNatGroupPortEndNumber=stnNatGroupPortEndNumber, stnNatInTransCurrentFtpSessions=stnNatInTransCurrentFtpSessions, stnNatGroupAddrIdleTime=stnNatGroupAddrIdleTime, stnNatGroupFtpControlSessionIdleTime=stnNatGroupFtpControlSessionIdleTime, stnNatL2InsideAlgPkts=stnNatL2InsideAlgPkts, stnNatInTransOutsidePortNumber=stnNatInTransOutsidePortNumber, stnNatGroupMaxInsideAddrs=stnNatGroupMaxInsideAddrs, stnNatInTransState=stnNatInTransState, stnNatL2Entry=stnNatL2Entry, stnNatInTransOutsidePktHits=stnNatInTransOutsidePktHits, stnNatOutTransOutsidePktHits=stnNatOutTransOutsidePktHits, stnNatL2UntransInsidePkts=stnNatL2UntransInsidePkts, stnNatGroupTable=stnNatGroupTable, stnNatOutTransUpTimeSec=stnNatOutTransUpTimeSec, PYSNMP_MODULE_ID=stnNat, stnNatInTransOutsideBaseAddress=stnNatInTransOutsideBaseAddress, stnNatGroupOutsideBaseAddress=stnNatGroupOutsideBaseAddress, stnNatGroupInsideFlowOrigin=stnNatGroupInsideFlowOrigin, stnNatL2OutsideAlgPkts=stnNatL2OutsideAlgPkts, stnNatOutTransOutsidePortsInuse=stnNatOutTransOutsidePortsInuse, stnNatOutTransTotalFtpSessions=stnNatOutTransTotalFtpSessions, stnNatOutTransSubnetIfInstance=stnNatOutTransSubnetIfInstance, stnNatOutTransInsideAddress=stnNatOutTransInsideAddress, stnNatMibConformance=stnNatMibConformance, stnNatOutTransOutsideAddress=stnNatOutTransOutsideAddress, stnNatGroupTotalFtpSessions=stnNatGroupTotalFtpSessions, stnNatGroupPortLimitReached=stnNatGroupPortLimitReached, stnNatGroupNoIdleOutsideAddrs=stnNatGroupNoIdleOutsideAddrs, stnNatOutTransTable=stnNatOutTransTable, stnNatInTransTotalFtpSessions=stnNatInTransTotalFtpSessions, stnNatInTransSubnetIfInstance=stnNatInTransSubnetIfInstance, stnNatL2OutsidePktHits=stnNatL2OutsidePktHits, stnNatGroupMaxFtpSessions=stnNatGroupMaxFtpSessions, stnNatInTransInsidePortsInuse=stnNatInTransInsidePortsInuse, NatTransMode=NatTransMode, stnNatGroupOutsidePktMisses=stnNatGroupOutsidePktMisses, stnNatL2InsidePktMisses=stnNatL2InsidePktMisses, stnNatGroupMaxFtpSessionsPerInsideAddr=stnNatGroupMaxFtpSessionsPerInsideAddr, stnNatOutTransInsidePortsInuse=stnNatOutTransInsidePortsInuse, stnNatGroupInsidePktMisses=stnNatGroupInsidePktMisses, stnNatOutTransOutsideBaseAddress=stnNatOutTransOutsideBaseAddress, stnNatGroupMaxPortsPerInsideAddr=stnNatGroupMaxPortsPerInsideAddr, stnNatOutTransMode=stnNatOutTransMode, stnNatOutTransInsidePktHits=stnNatOutTransInsidePktHits, stnNatInTransInsidePortLimitReached=stnNatInTransInsidePortLimitReached, stnNatGroupMissedFtpSessionLookups=stnNatGroupMissedFtpSessionLookups, stnNatOutTransState=stnNatOutTransState, stnNatL2UntransOutsidePkts=stnNatL2UntransOutsidePkts, stnNatObjects=stnNatObjects, stnNatL2IfIndex=stnNatL2IfIndex, stnNatInTransInsideAddress=stnNatInTransInsideAddress, stnNatL2FlowId=stnNatL2FlowId, stnNatOutTransInsidePortNumber=stnNatOutTransInsidePortNumber, stnNatGroupOutsideEndAddress=stnNatGroupOutsideEndAddress, stnNatGroupOutsidePktHits=stnNatGroupOutsidePktHits, stnNatGroupPortBaseNumber=stnNatGroupPortBaseNumber, stnNatGroupAddrTransAvailable=stnNatGroupAddrTransAvailable, stnNat=stnNat, stnNatGroupInsideBaseAddress=stnNatGroupInsideBaseAddress, stnNatInTransOutsidePortsInuse=stnNatInTransOutsidePortsInuse, stnNatL2OutsidePktMisses=stnNatL2OutsidePktMisses, stnNatGroupInsidePktHits=stnNatGroupInsidePktHits, stnNatInTransInsidePktHits=stnNatInTransInsidePktHits, stnNatOutTransCurrentFtpSessions=stnNatOutTransCurrentFtpSessions, stnNatInTransMode=stnNatInTransMode, stnNatGroupEntry=stnNatGroupEntry, stnNatOutTransInsidePortLimitReached=stnNatOutTransInsidePortLimitReached, stnNatGroupInvalidOutsidePktMisses=stnNatGroupInvalidOutsidePktMisses, stnNatInTransInsidePortNumber=stnNatInTransInsidePortNumber, stnNatGroupInsideAddrLimitReached=stnNatGroupInsideAddrLimitReached, stnNatGroupCurrentFtpSessions=stnNatGroupCurrentFtpSessions)
