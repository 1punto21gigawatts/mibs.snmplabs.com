#
# PySNMP MIB module CISCO-LWAPP-MESH-LINKTEST-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-LWAPP-MESH-LINKTEST-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:05:48 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
TimeTicks, Gauge32, IpAddress, ModuleIdentity, Integer32, Counter64, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Unsigned32, Counter32, MibIdentifier, iso, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Gauge32", "IpAddress", "ModuleIdentity", "Integer32", "Counter64", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Unsigned32", "Counter32", "MibIdentifier", "iso", "Bits")
TextualConvention, RowStatus, MacAddress, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "RowStatus", "MacAddress", "DisplayString")
ciscoLwappMeshLinkTestMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 606))
ciscoLwappMeshLinkTestMIB.setRevisions(('2010-09-30 00:00', '2007-02-05 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoLwappMeshLinkTestMIB.setRevisionsDescriptions(('Deprecated clMeshLtDataRate and replaced it with clMeshLtDataRateValue. Deprecated ciscoLwappMeshLinkTestRunGroup and ciscoLwappMeshLinkTestMIBCompliance. Added ciscoLwappMeshLinkTestRunGroupRev1 and ciscoLwappMeshLinkTestMIBComplianceRev1.', 'Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoLwappMeshLinkTestMIB.setLastUpdated('201009300000Z')
if mibBuilder.loadTexts: ciscoLwappMeshLinkTestMIB.setOrganization('Cisco Systems Inc.')
if mibBuilder.loadTexts: ciscoLwappMeshLinkTestMIB.setContactInfo('Cisco Systems, Customer Service Postal: 170 West Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS Email: cs-wnbu-snmp@cisco.com')
if mibBuilder.loadTexts: ciscoLwappMeshLinkTestMIB.setDescription("This MIB is intended to be implemented on all those devices operating as Central Controllers (CC) that terminate the Light Weight Access Point Protocol (LWAPP) tunnel from Light-weight Access Points. Link Test is performed to learn the backhaul link quality between two neighboring mesh nodes. The deployment of the controller (referred to as CC in the diagram), mesh nodes (RAP and MAP) LWAPP APs, client(MS) and NMS appear as followshe LWAPP tunnel exists between the controller and the APs. The MNs communicate with the APs through the protocol defined by the 802.11 standard. LWAPP APs, upon bootup, discover and join one of the controllers and the controller pushes the configuration, that includes the WLAN parameters to the LWAPP APs. The APs encapsulate all the 802.11 frames from wireless clients inside LWAPP frames and forward the LWAPP frames to the controller. GLOSSARY Access Point ( AP ) An entity that contains an 802.11 medium access control ( MAC ) and physical layer ( PHY ) interface and provides access to the distribution services via the wireless medium for associated clients. LWAPP APs encapsulate all the 802.11 frames in LWAPP frames and sends them to the controller to which it is logically connected. Central Controller ( CC ) The central entity that terminates the LWAPP protocol tunnel from the LWAPP APs. Throughout this MIB, this entity is also referred to as 'controller'. Mobile Station ( MS ) A roaming 802.11 wireless device in a wireless network associated with an access point. Mobile Station and client are used interchangeably. Network Management System ( NMS ) The station from which the administrator manages the wired and wireless networks. Mesh Node A mesh node is defined as a physical or logical entity in the mesh network participating in forming the mesh backhaul. There are two types of mesh nodes supported in Cisco mesh network:RAP and MAP. Root AP (RAP) The AP forming the bridge between a wired and a mesh network with an Ethernet interface to the wired network and a 802.11 radio interface to the mesh network Mesh AP (MAP). The AP extending wireless coverage similar to a repeater in a mesh network and consists of a 802.11 uplink and a 802.11 downlink. On a single-radio backhaul, both uplink and downlink exist on the same radio and are logical links only. On a multi-radio backhaul, they may exist on different radios. Mesh Network Network starting with the wireless backhaul downlink of the RAP and all the entities below except any attached network to the Ethernet link of MAPs. A mesh network below a single RAP is also referred to as a 'Mesh Sector'.A mesh network consists of mesh nodes. A single mesh network is always augmented to a single wired network. Mesh Link A logical 802.11 link between two mesh nodes. A single link is point-to-point. All point-to-multipoint links are considered as multiple mesh links. Often referred to as mesh backhaul link. Mesh Backhaul A Mesh backhaul consists of mesh nodes and mesh links terminating at a RAP. This necessarily creates a one- to-one relationship between a 'mesh network', 'mesh sector' and a 'mesh backhaul' where these terms can be used interchangeably. SNR Signal to Noise ratio on the 802.11 radio. RSSI Received Signal Strength Indication (RSSI), the IEEE 802.11 standard defines a mechanism by which RF energy is to be measured by the circuitry on a wireless NIC. Its value is measured in dBm and ranges from -128 to 0. Bridged network The bridged network is defined as the network(s) attached to the Ethernet port of any MAP. There can be multiple such networks attached to a single mesh network. Mesh Node Roaming A mesh node may change its parent mesh node naturally when the RF/network condition changes.Child Mesh node will re-associate and re-authenticate to new parent mesh node. Mesh Security supports two types of mesh node roaming: Intra-controller roaming: LWAPP session remains and no LWAPP session roam is necessary Inter-controller roaming: LWAPP session is lost and LWAPP session roam may be necessary REFERENCE [1] Wireless LAN Medium Access Control ( MAC ) and Physical Layer ( PHY ) Specifications. [2] Draft-obara-capwap-lwapp-00.txt, IETF Light Weight Access Point Protocol")
ciscoLwappMeshLinkTestMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 606, 0))
ciscoLwappMeshLinkTestMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 606, 1))
ciscoLwappMeshLinkTestMIBConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 606, 2))
ciscoLwappMeshLinkTestConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 606, 1, 1))
ciscoLwappMeshLinkTestRun = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 606, 1, 2))
ciscoLwappMeshLinkTestStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 606, 1, 3))
clMeshLtPurgeTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 606, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(15, 1800)).clone(60)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: clMeshLtPurgeTime.setStatus('current')
if mibBuilder.loadTexts: clMeshLtPurgeTime.setDescription('This object indicates the duration for which the results of a particular run of linktest is available in clMeshLtResultsTable from the time of completion of that run of linktest. At the expiry of this time, after the completion of the linktest, the entries corresponding to the linktest and the corresponding results are removed from clMeshLtTable and clMeshLtResultsTable respectively.')
clMeshLtTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 606, 1, 2, 1), )
if mibBuilder.loadTexts: clMeshLtTable.setStatus('current')
if mibBuilder.loadTexts: clMeshLtTable.setDescription("This table is used to initiate linktests between two neighbor mesh node AP. With LinkTest support, the controller can test the backhaul link. User initiates one run of linktest by adding a row to this table through explicit management action from the network manager. A row is created by specifying clMeshLtIndex, clMeshLtSrcMacAddress and clMeshLtDestMacAddress setting the RowStatus object to 'createAndGo'. This indicates the the request made to start the linktest between two mesh nodes. The added row is deleted by setting the corresponding instance of the RowStatus object to 'destroy'. In case if the agent finds that the time duration represented by clMeshLtPurgeTime has elapsed since the completion of the linktest, it proceeds to delete the row automatically, if the row exists at that point of time. The results of the linktest identified by clMeshLtIndex can be obtained from the queries to clMeshLtResultsTable.")
clMeshLtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 606, 1, 2, 1, 1), ).setIndexNames((0, "CISCO-LWAPP-MESH-LINKTEST-MIB", "clMeshLtIndex"))
if mibBuilder.loadTexts: clMeshLtEntry.setStatus('current')
if mibBuilder.loadTexts: clMeshLtEntry.setDescription('Each entry in this table represents one instance of the linktest initiated by the user through a network manager.')
clMeshLtIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 606, 1, 2, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)))
if mibBuilder.loadTexts: clMeshLtIndex.setStatus('current')
if mibBuilder.loadTexts: clMeshLtIndex.setDescription('This object uniquely identifies one particular run of the linktest initiated between the two mesh node neighbors identified by clMeshLtSrcMacAddress and clMeshLtDestMacAddress.')
clMeshLtSrcMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 606, 1, 2, 1, 1, 2), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clMeshLtSrcMacAddress.setStatus('current')
if mibBuilder.loadTexts: clMeshLtSrcMacAddress.setDescription("This object represents the source mac address of AP which initiates the link test to 'clMeshLtDestMacAddress' involved in the particular run of linktest. This object must be set to a valid value when setting clMeshLtRowStatus to 'createAndGo' to initiate a run of linktest.")
clMeshLtDestMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 606, 1, 2, 1, 1, 3), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clMeshLtDestMacAddress.setStatus('current')
if mibBuilder.loadTexts: clMeshLtDestMacAddress.setDescription("This object represents the destination mac address of AP involved in the particular run of linktest. This object must be set to a valid value when setting clMeshLtRowStatus to 'createAndGo' to initiate a run of linktest.")
clMeshLtDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 606, 1, 2, 1, 1, 4), Unsigned32()).setUnits('Mbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: clMeshLtDataRate.setStatus('deprecated')
if mibBuilder.loadTexts: clMeshLtDataRate.setDescription("This object represents the data rate on backhaul link at which link test will be performed. Depending on the backhaul radio type, data rate will vary. if the backhaul radio is 802.11a, data rates can be one of the following possible values. Rates - 6,9,11,12,18,24,36,48,54,108 Mbps. If backhaul link is 802.11b then data rate can be 1,2,5.5,6,9,11 If backhaul link is 802.11g 1,2,5.5,6,9,11,12,18,24,36,48,54,108. This object must be set to a valid value when setting clMeshLtRowStatus to 'createAndGo' to initiate a run of linktest. This object is deprecated and superceded by clMeshLtDataRateValue object.")
clMeshLtPktsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 606, 1, 2, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 3000)).clone(1000)).setUnits('packets').setMaxAccess("readcreate")
if mibBuilder.loadTexts: clMeshLtPktsPerSec.setStatus('current')
if mibBuilder.loadTexts: clMeshLtPktsPerSec.setDescription('This object represents the number of packets to be sent per sec during link test.')
clMeshLtPktSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 606, 1, 2, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1500)).clone(1500)).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: clMeshLtPktSize.setStatus('current')
if mibBuilder.loadTexts: clMeshLtPktSize.setDescription('This object represents the size of packets to be sent during link test.')
clMeshLtDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 606, 1, 2, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(15, 60)).clone(30)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: clMeshLtDuration.setStatus('current')
if mibBuilder.loadTexts: clMeshLtDuration.setDescription('This object represents the duration, in seconds, of link test to be performed.')
clMeshLtRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 606, 1, 2, 1, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clMeshLtRowStatus.setStatus('current')
if mibBuilder.loadTexts: clMeshLtRowStatus.setDescription('This object is the status column used for creating and deleting instances of the columnar objects in this table.')
clMeshLtDataRateValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 606, 1, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29))).clone(namedValues=NamedValues(("mbps1", 1), ("mbps2", 2), ("mbps5point5", 3), ("mbps6", 4), ("mbps9", 5), ("mbps11", 6), ("mbps12", 7), ("mbps18", 8), ("mbps24", 9), ("mbps36", 10), ("mbps48", 11), ("mbps54", 12), ("mbps108", 13), ("htMcs0", 14), ("htMcs1", 15), ("htMcs2", 16), ("htMcs3", 17), ("htMcs4", 18), ("htMcs5", 19), ("htMcs6", 20), ("htMcs7", 21), ("htMcs8", 22), ("htMcs9", 23), ("htMcs10", 24), ("htMcs11", 25), ("htMcs12", 26), ("htMcs13", 27), ("htMcs14", 28), ("htMcs15", 29)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clMeshLtDataRateValue.setStatus('current')
if mibBuilder.loadTexts: clMeshLtDataRateValue.setDescription("This object represents the data rate on backhaul link at which link test will be performed. Depending on the backhaul radio type, data rate will vary. If the value of clMeshNodeBackhaul object is 'dot11a', data rates can be one of the following possible values. mbps6(4) mbps9(5) mbps12(7) mbps18(8) mbps24(9) mbps36(10) mbps48(11) mbps54(12) mbps108(13) Additionally following data rates are supported if 802.11a supports 11n. htMcs0(14) htMcs1(15) htMcs2(16) htMcs3(17) htMcs4(18) htMcs5(19) htMcs6(20) htMcs7(21) htMcs8(22) htMcs9(23) htMcs10(24) htMcs11(25) htMcs12(26) htMcs13(27) htMcs14(28) htMcs15(29) If the value of clMeshNodeBackhaul object is 'dot11b', then data rate can be one of the following possible values. mbps1(1) mbps2(2) mbps5point5(3) mbps6(4) mbps9(5) mbps11(6) If the value of clMeshNodeBackhaul object is 'dot11g', then data rate can be one of the following possible values. mbps1(1) mbps2(2) mbps5point5(3) mbps6(4) mbps9(5) mbps11(6) mbps12(7) mbps18(8) mbps24(9) mbps36(10) mbps48(11) mbps54(12) mbps108(13) This object cannot be modified when the value of clMeshLtRowStatus object in the same row is 'active'.")
clMeshLtResultsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 606, 1, 3, 1), )
if mibBuilder.loadTexts: clMeshLtResultsTable.setStatus('current')
if mibBuilder.loadTexts: clMeshLtResultsTable.setDescription('This table populates the results of the mesh linktests initiated by the user through the clMeshLtTable. This table has a sparse dependent relationship with clMeshLtEntry. There exists a row in this table corresponding to each row in clMeshLtEntry identified by clMeshLtIndex. A row is added to this table when user, through the network manager, adds a row to clMeshLtEntry and initiates one run of linktest. A row can be deleted by the agent when the corresponding row of clMeshLtEntry is deleted or it will get deleted when the clMeshLtPurgeTime expires. The manager is expected to poll clMeshLtStatus to check the status of the linktest.')
clMeshLtResultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 606, 1, 3, 1, 1), ).setIndexNames((0, "CISCO-LWAPP-MESH-LINKTEST-MIB", "clMeshLtIndex"))
if mibBuilder.loadTexts: clMeshLtResultsEntry.setStatus('current')
if mibBuilder.loadTexts: clMeshLtResultsEntry.setDescription('Each entry in this table represents the results of the linktest identified by clMeshLtIndex.')
clMeshLtTxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 606, 1, 3, 1, 1, 1), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: clMeshLtTxPkts.setStatus('current')
if mibBuilder.loadTexts: clMeshLtTxPkts.setDescription('The total number of packets sent to the destination mesh node specified by clMeshLtDestMacAddress from AP specified by clMeshLtSrcMacAddress.')
clMeshLtRxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 606, 1, 3, 1, 1, 2), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: clMeshLtRxPkts.setStatus('current')
if mibBuilder.loadTexts: clMeshLtRxPkts.setDescription('The total number of packets received by mesh node specified by clMeshLtDestMacAddress from mesh node specified by clMeshLtSrcMacAddress.')
clMeshLtRxGoodPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 606, 1, 3, 1, 1, 3), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: clMeshLtRxGoodPkts.setStatus('current')
if mibBuilder.loadTexts: clMeshLtRxGoodPkts.setDescription('The total number of packets received without any errors by mesh node specified by clMeshLtDestMacAddress from mesh node AP specified by clMeshLtSrcMacAddress .')
clMeshLtRxDupPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 606, 1, 3, 1, 1, 4), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: clMeshLtRxDupPkts.setStatus('current')
if mibBuilder.loadTexts: clMeshLtRxDupPkts.setDescription('The total number of packets received with same sequence number by mesh node specified by clMeshLtDestMacAddress from mesh node specified by clMeshLtSrcMacAddress.')
clMeshLtRxShortPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 606, 1, 3, 1, 1, 5), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: clMeshLtRxShortPkts.setStatus('current')
if mibBuilder.loadTexts: clMeshLtRxShortPkts.setDescription('The total number of packets received that were shorter than the 802.11 frame size by mesh node specified by clMeshLtDestMacAddress from mesh node specified by clMeshLtSrcMacAddress.')
clMeshLtRxBigPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 606, 1, 3, 1, 1, 6), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: clMeshLtRxBigPkts.setStatus('current')
if mibBuilder.loadTexts: clMeshLtRxBigPkts.setDescription('The total number of packets received that were larger than the 802.11 frame size by mesh node specified by clMeshLtDestMacAddress from mesh node specified by clMeshLtSrcMacAddress.')
clMeshLtRxPhyErrPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 606, 1, 3, 1, 1, 7), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: clMeshLtRxPhyErrPkts.setStatus('current')
if mibBuilder.loadTexts: clMeshLtRxPhyErrPkts.setDescription('The total number of packets with error detected at physical layer received by mesh node specified by clMeshLtDestMacAddress from mesh node specified by clMeshLtSrcMacAddress.')
clMeshLtRxCRCErrPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 606, 1, 3, 1, 1, 8), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: clMeshLtRxCRCErrPkts.setStatus('current')
if mibBuilder.loadTexts: clMeshLtRxCRCErrPkts.setDescription('The total number of packets with CRC error received by mesh node specified by clMeshLtDestMacAddress from mesh node specified by clMeshLtSrcMacAddress.')
clMeshLtRxSeqErrPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 606, 1, 3, 1, 1, 9), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: clMeshLtRxSeqErrPkts.setStatus('current')
if mibBuilder.loadTexts: clMeshLtRxSeqErrPkts.setDescription('The total number of packets that were received with sequence number out of order by mesh node specified by clMeshLtDestMacAddress from mesh node specified by clMeshLtSrcMacAddress.')
clMeshLtRxAvgSNR = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 606, 1, 3, 1, 1, 10), Integer32()).setUnits('dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: clMeshLtRxAvgSNR.setStatus('current')
if mibBuilder.loadTexts: clMeshLtRxAvgSNR.setDescription('The average SNR value observed at the mesh node specified by clMeshLtDestMacAddress.')
clMeshLtRxHighestSNR = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 606, 1, 3, 1, 1, 11), Integer32()).setUnits('dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: clMeshLtRxHighestSNR.setStatus('current')
if mibBuilder.loadTexts: clMeshLtRxHighestSNR.setDescription('The highest SNR value observed at the mesh node specified by clMeshLtDestMacAddress.')
clMeshLtRxLowestSNR = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 606, 1, 3, 1, 1, 12), Integer32()).setUnits('dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: clMeshLtRxLowestSNR.setStatus('current')
if mibBuilder.loadTexts: clMeshLtRxLowestSNR.setDescription('The lowest SNR value observed at the mesh node specified by clMeshLtDestMacAddress.')
clMeshLtRxAvgNoiseFloor = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 606, 1, 3, 1, 1, 13), Integer32()).setUnits('dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: clMeshLtRxAvgNoiseFloor.setStatus('current')
if mibBuilder.loadTexts: clMeshLtRxAvgNoiseFloor.setDescription('The average noise floor value observed at the mesh node specified by clMeshLtDestMacAddress. The noise floor is the measure of the signal created from the sum of all the noise sources and unwanted signals within a measurement system.')
clMeshLtRxHighestNoiseFloor = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 606, 1, 3, 1, 1, 14), Integer32()).setUnits('dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: clMeshLtRxHighestNoiseFloor.setStatus('current')
if mibBuilder.loadTexts: clMeshLtRxHighestNoiseFloor.setDescription('The highest Noise Floor value observed at the mesh node specified by clMeshLtDestMacAddress. The noise floor is the measure of the signal created from the sum of all the noise sources and unwanted signals within a measurement system.')
clMeshLtRxLowestNoiseFloor = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 606, 1, 3, 1, 1, 15), Integer32()).setUnits('dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: clMeshLtRxLowestNoiseFloor.setStatus('current')
if mibBuilder.loadTexts: clMeshLtRxLowestNoiseFloor.setDescription('The lowest Noise Floor value observed at the mesh node specified by clMeshLtDestMacAddress. The noise floor is the measure of the signal created from the sum of all the noise sources and unwanted signals within a measurement system.')
clMeshLtRxAvgRSSI = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 606, 1, 3, 1, 1, 16), Integer32()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: clMeshLtRxAvgRSSI.setStatus('current')
if mibBuilder.loadTexts: clMeshLtRxAvgRSSI.setDescription('The average RSSI value observed at the mesh node specified by clMeshLtDestMacAddress.')
clMeshLtRxHighestRSSI = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 606, 1, 3, 1, 1, 17), Integer32()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: clMeshLtRxHighestRSSI.setStatus('current')
if mibBuilder.loadTexts: clMeshLtRxHighestRSSI.setDescription('The highest RSSI value observed at the mesh node specified by clMeshLtDestMacAddress.')
clMeshLtRxLowestRSSI = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 606, 1, 3, 1, 1, 18), Integer32()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: clMeshLtRxLowestRSSI.setStatus('current')
if mibBuilder.loadTexts: clMeshLtRxLowestRSSI.setDescription('The lowest RSSI value as observed at the mesh node specified by clMeshLtDestMacAddress.')
clMeshLtStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 606, 1, 3, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("clMeshLtStatusFailed", 1), ("clMeshLtStatusInProgress", 2), ("clMeshLtStatusSuccess", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clMeshLtStatus.setStatus('current')
if mibBuilder.loadTexts: clMeshLtStatus.setDescription("This object indicates the status of the linktest this particular entry corresponds to. The semantics as follows. 'clMeshLtStatusFailed' - This value indicates that this particular linktest has failed. 'clMeshLtStatusInProgress' - This value indicates that the linktest is in progress. 'clMeshLtStatusSuccess' - This value indicates that linktest has succeeded.")
ciscoLwappMeshLinkTestMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 606, 2, 1))
ciscoLwappMeshLinkTestMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 606, 2, 2))
ciscoLwappMeshLinkTestMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 606, 2, 1, 1)).setObjects(("CISCO-LWAPP-MESH-LINKTEST-MIB", "ciscoLwappMeshLinkTestConfigGroup"), ("CISCO-LWAPP-MESH-LINKTEST-MIB", "ciscoLwappMeshLinkTestRunGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappMeshLinkTestMIBCompliance = ciscoLwappMeshLinkTestMIBCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoLwappMeshLinkTestMIBCompliance.setDescription('The compliance statement for the SNMP entities that implement the ciscoLwappMeshLinkTestMIB module.')
ciscoLwappMeshLinkTestMIBComplianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 606, 2, 1, 2)).setObjects(("CISCO-LWAPP-MESH-LINKTEST-MIB", "ciscoLwappMeshLinkTestConfigGroup"), ("CISCO-LWAPP-MESH-LINKTEST-MIB", "ciscoLwappMeshLinkTestRunGroupRev1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappMeshLinkTestMIBComplianceRev1 = ciscoLwappMeshLinkTestMIBComplianceRev1.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappMeshLinkTestMIBComplianceRev1.setDescription('The compliance statement for the SNMP entities that implement the ciscoLwappMeshLinkTestMIB module.')
ciscoLwappMeshLinkTestConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 606, 2, 2, 1)).setObjects(("CISCO-LWAPP-MESH-LINKTEST-MIB", "clMeshLtPurgeTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappMeshLinkTestConfigGroup = ciscoLwappMeshLinkTestConfigGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappMeshLinkTestConfigGroup.setDescription('This collection of objects represent the linktest parameters for configuration and result.')
ciscoLwappMeshLinkTestRunGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 606, 2, 2, 2)).setObjects(("CISCO-LWAPP-MESH-LINKTEST-MIB", "clMeshLtSrcMacAddress"), ("CISCO-LWAPP-MESH-LINKTEST-MIB", "clMeshLtDestMacAddress"), ("CISCO-LWAPP-MESH-LINKTEST-MIB", "clMeshLtDataRate"), ("CISCO-LWAPP-MESH-LINKTEST-MIB", "clMeshLtPktsPerSec"), ("CISCO-LWAPP-MESH-LINKTEST-MIB", "clMeshLtPktSize"), ("CISCO-LWAPP-MESH-LINKTEST-MIB", "clMeshLtDuration"), ("CISCO-LWAPP-MESH-LINKTEST-MIB", "clMeshLtRowStatus"), ("CISCO-LWAPP-MESH-LINKTEST-MIB", "clMeshLtTxPkts"), ("CISCO-LWAPP-MESH-LINKTEST-MIB", "clMeshLtRxPkts"), ("CISCO-LWAPP-MESH-LINKTEST-MIB", "clMeshLtRxGoodPkts"), ("CISCO-LWAPP-MESH-LINKTEST-MIB", "clMeshLtRxDupPkts"), ("CISCO-LWAPP-MESH-LINKTEST-MIB", "clMeshLtRxShortPkts"), ("CISCO-LWAPP-MESH-LINKTEST-MIB", "clMeshLtRxBigPkts"), ("CISCO-LWAPP-MESH-LINKTEST-MIB", "clMeshLtRxPhyErrPkts"), ("CISCO-LWAPP-MESH-LINKTEST-MIB", "clMeshLtRxCRCErrPkts"), ("CISCO-LWAPP-MESH-LINKTEST-MIB", "clMeshLtRxSeqErrPkts"), ("CISCO-LWAPP-MESH-LINKTEST-MIB", "clMeshLtRxAvgSNR"), ("CISCO-LWAPP-MESH-LINKTEST-MIB", "clMeshLtRxHighestSNR"), ("CISCO-LWAPP-MESH-LINKTEST-MIB", "clMeshLtRxLowestSNR"), ("CISCO-LWAPP-MESH-LINKTEST-MIB", "clMeshLtRxAvgNoiseFloor"), ("CISCO-LWAPP-MESH-LINKTEST-MIB", "clMeshLtRxHighestNoiseFloor"), ("CISCO-LWAPP-MESH-LINKTEST-MIB", "clMeshLtRxLowestNoiseFloor"), ("CISCO-LWAPP-MESH-LINKTEST-MIB", "clMeshLtRxAvgRSSI"), ("CISCO-LWAPP-MESH-LINKTEST-MIB", "clMeshLtRxHighestRSSI"), ("CISCO-LWAPP-MESH-LINKTEST-MIB", "clMeshLtRxLowestRSSI"), ("CISCO-LWAPP-MESH-LINKTEST-MIB", "clMeshLtStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappMeshLinkTestRunGroup = ciscoLwappMeshLinkTestRunGroup.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoLwappMeshLinkTestRunGroup.setDescription('This collection of objects is used to initiate linktests and retrieve the results of the respective runs of the link test.')
ciscoLwappMeshLinkTestRunGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 606, 2, 2, 3)).setObjects(("CISCO-LWAPP-MESH-LINKTEST-MIB", "clMeshLtSrcMacAddress"), ("CISCO-LWAPP-MESH-LINKTEST-MIB", "clMeshLtDestMacAddress"), ("CISCO-LWAPP-MESH-LINKTEST-MIB", "clMeshLtDataRateValue"), ("CISCO-LWAPP-MESH-LINKTEST-MIB", "clMeshLtPktsPerSec"), ("CISCO-LWAPP-MESH-LINKTEST-MIB", "clMeshLtPktSize"), ("CISCO-LWAPP-MESH-LINKTEST-MIB", "clMeshLtDuration"), ("CISCO-LWAPP-MESH-LINKTEST-MIB", "clMeshLtRowStatus"), ("CISCO-LWAPP-MESH-LINKTEST-MIB", "clMeshLtTxPkts"), ("CISCO-LWAPP-MESH-LINKTEST-MIB", "clMeshLtRxPkts"), ("CISCO-LWAPP-MESH-LINKTEST-MIB", "clMeshLtRxGoodPkts"), ("CISCO-LWAPP-MESH-LINKTEST-MIB", "clMeshLtRxDupPkts"), ("CISCO-LWAPP-MESH-LINKTEST-MIB", "clMeshLtRxShortPkts"), ("CISCO-LWAPP-MESH-LINKTEST-MIB", "clMeshLtRxBigPkts"), ("CISCO-LWAPP-MESH-LINKTEST-MIB", "clMeshLtRxPhyErrPkts"), ("CISCO-LWAPP-MESH-LINKTEST-MIB", "clMeshLtRxCRCErrPkts"), ("CISCO-LWAPP-MESH-LINKTEST-MIB", "clMeshLtRxSeqErrPkts"), ("CISCO-LWAPP-MESH-LINKTEST-MIB", "clMeshLtRxAvgSNR"), ("CISCO-LWAPP-MESH-LINKTEST-MIB", "clMeshLtRxHighestSNR"), ("CISCO-LWAPP-MESH-LINKTEST-MIB", "clMeshLtRxLowestSNR"), ("CISCO-LWAPP-MESH-LINKTEST-MIB", "clMeshLtRxAvgNoiseFloor"), ("CISCO-LWAPP-MESH-LINKTEST-MIB", "clMeshLtRxHighestNoiseFloor"), ("CISCO-LWAPP-MESH-LINKTEST-MIB", "clMeshLtRxLowestNoiseFloor"), ("CISCO-LWAPP-MESH-LINKTEST-MIB", "clMeshLtRxAvgRSSI"), ("CISCO-LWAPP-MESH-LINKTEST-MIB", "clMeshLtRxHighestRSSI"), ("CISCO-LWAPP-MESH-LINKTEST-MIB", "clMeshLtRxLowestRSSI"), ("CISCO-LWAPP-MESH-LINKTEST-MIB", "clMeshLtStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappMeshLinkTestRunGroupRev1 = ciscoLwappMeshLinkTestRunGroupRev1.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappMeshLinkTestRunGroupRev1.setDescription('This collection of objects is used to initiate linktests and retrieve the results of the respective runs of the link test.')
mibBuilder.exportSymbols("CISCO-LWAPP-MESH-LINKTEST-MIB", clMeshLtResultsEntry=clMeshLtResultsEntry, ciscoLwappMeshLinkTestStatus=ciscoLwappMeshLinkTestStatus, clMeshLtRxLowestSNR=clMeshLtRxLowestSNR, clMeshLtRxHighestNoiseFloor=clMeshLtRxHighestNoiseFloor, ciscoLwappMeshLinkTestMIBCompliance=ciscoLwappMeshLinkTestMIBCompliance, clMeshLtRxAvgSNR=clMeshLtRxAvgSNR, clMeshLtRxDupPkts=clMeshLtRxDupPkts, clMeshLtEntry=clMeshLtEntry, clMeshLtDestMacAddress=clMeshLtDestMacAddress, clMeshLtPurgeTime=clMeshLtPurgeTime, clMeshLtRxHighestSNR=clMeshLtRxHighestSNR, ciscoLwappMeshLinkTestMIBGroups=ciscoLwappMeshLinkTestMIBGroups, clMeshLtRxAvgRSSI=clMeshLtRxAvgRSSI, clMeshLtDataRate=clMeshLtDataRate, ciscoLwappMeshLinkTestMIBNotifs=ciscoLwappMeshLinkTestMIBNotifs, ciscoLwappMeshLinkTestMIB=ciscoLwappMeshLinkTestMIB, clMeshLtRxPhyErrPkts=clMeshLtRxPhyErrPkts, clMeshLtRxCRCErrPkts=clMeshLtRxCRCErrPkts, clMeshLtStatus=clMeshLtStatus, ciscoLwappMeshLinkTestMIBCompliances=ciscoLwappMeshLinkTestMIBCompliances, clMeshLtRxPkts=clMeshLtRxPkts, clMeshLtDuration=clMeshLtDuration, clMeshLtPktSize=clMeshLtPktSize, clMeshLtRxBigPkts=clMeshLtRxBigPkts, ciscoLwappMeshLinkTestConfig=ciscoLwappMeshLinkTestConfig, clMeshLtRxLowestNoiseFloor=clMeshLtRxLowestNoiseFloor, ciscoLwappMeshLinkTestRunGroupRev1=ciscoLwappMeshLinkTestRunGroupRev1, clMeshLtRxHighestRSSI=clMeshLtRxHighestRSSI, ciscoLwappMeshLinkTestMIBComplianceRev1=ciscoLwappMeshLinkTestMIBComplianceRev1, PYSNMP_MODULE_ID=ciscoLwappMeshLinkTestMIB, clMeshLtRxAvgNoiseFloor=clMeshLtRxAvgNoiseFloor, clMeshLtSrcMacAddress=clMeshLtSrcMacAddress, ciscoLwappMeshLinkTestRun=ciscoLwappMeshLinkTestRun, clMeshLtRxShortPkts=clMeshLtRxShortPkts, ciscoLwappMeshLinkTestMIBObjects=ciscoLwappMeshLinkTestMIBObjects, clMeshLtIndex=clMeshLtIndex, clMeshLtRxGoodPkts=clMeshLtRxGoodPkts, clMeshLtRxLowestRSSI=clMeshLtRxLowestRSSI, ciscoLwappMeshLinkTestMIBConform=ciscoLwappMeshLinkTestMIBConform, clMeshLtRxSeqErrPkts=clMeshLtRxSeqErrPkts, clMeshLtRowStatus=clMeshLtRowStatus, ciscoLwappMeshLinkTestRunGroup=ciscoLwappMeshLinkTestRunGroup, ciscoLwappMeshLinkTestConfigGroup=ciscoLwappMeshLinkTestConfigGroup, clMeshLtResultsTable=clMeshLtResultsTable, clMeshLtTable=clMeshLtTable, clMeshLtTxPkts=clMeshLtTxPkts, clMeshLtPktsPerSec=clMeshLtPktsPerSec, clMeshLtDataRateValue=clMeshLtDataRateValue)
