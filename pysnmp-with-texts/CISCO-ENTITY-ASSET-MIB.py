#
# PySNMP MIB module CISCO-ENTITY-ASSET-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-ENTITY-ASSET-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:56:50 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
entPhysicalIndex, = mibBuilder.importSymbols("ENTITY-MIB", "entPhysicalIndex")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
ModuleIdentity, IpAddress, iso, MibIdentifier, NotificationType, Counter64, Gauge32, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, ObjectIdentity, TimeTicks, Counter32, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "IpAddress", "iso", "MibIdentifier", "NotificationType", "Counter64", "Gauge32", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "ObjectIdentity", "TimeTicks", "Counter32", "Integer32")
TextualConvention, TruthValue, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TruthValue", "DisplayString")
ciscoEntityAssetMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 92))
ciscoEntityAssetMIB.setRevisions(('2003-09-18 00:00', '2002-07-23 16:00', '1999-06-02 16:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoEntityAssetMIB.setRevisionsDescriptions(('Some of the Objects have been deprecated since these are available in ENTITY-MIB(RFC 2737). 1. Following Objects have been deprecated. ceAssetOEMString : superceded by entPhysicalMfgName ceAssetSerialNumber : superceded by entPhysicalSerialNum ceAssetOrderablePartNumber: superceded by entPhysicalModelName ceAssetHardwareRevision : superceded by entPhysicalHardwareRev ceAssetFirmwareID : superceded by entPhysicalFirmwareRev ceAssetFirmwareRevision : superceded by entPhysicalFirmwareRev ceAssetSoftwareID : superceded by entPhysicalSoftwareRev ceAssetSoftwareRevision : superceded by entPhysicalSoftwareRev ceAssetAlias : superceded by entPhysicalAlias ceAssetTag : superceded by entPhysicalAssetID ceAssetIsFRU : superceded by entPhysicalIsFRU. 2. ceAssetEntityGroup has been deprecated.', 'Split the MIB objects of this MIB into two object groups.', 'Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoEntityAssetMIB.setLastUpdated('200309180000Z')
if mibBuilder.loadTexts: ciscoEntityAssetMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoEntityAssetMIB.setContactInfo('Cisco Systems Customer Service Postal: Cisco Systems, Inc. 170 West Tasman Drive San Jose, CA 95134-1706 USA Tel: +1 408 526 4000 E-mail: cs-snmp@cisco.com')
if mibBuilder.loadTexts: ciscoEntityAssetMIB.setDescription('Monitor the asset information of items in the ENTITY-MIB (RFC 2037) entPhysical table.')
ciscoEntityAssetMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 92, 1))
ceAssetTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 92, 1, 1), )
if mibBuilder.loadTexts: ceAssetTable.setStatus('current')
if mibBuilder.loadTexts: ceAssetTable.setDescription('This table lists the orderable part number, serial number, hardware revision, manufacturing assembly number and revision, firmwareID and revision if any, and softwareID and revision if any, of relevant entities listed in the ENTITY-MIB entPhysicalTable. Entities for which none of this data is available are not listed in this table. This is a sparse table so some of these variables may not exist for a particular entity at a particular time. For example, a powered-off module does not have softwareID and revision; a power-supply would probably never have firmware or software information. Although the data may have other items encoded in it (for example manufacturing-date in the serial number) please treat all data items as monolithic. Do not decompose them or parse them. Use only string equals and unequals operations on them.')
ceAssetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 92, 1, 1, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: ceAssetEntry.setStatus('current')
if mibBuilder.loadTexts: ceAssetEntry.setDescription('An entAssetEntry entry describes the asset-tracking related data for an entity.')
ceAssetOEMString = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 92, 1, 1, 1, 1), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceAssetOEMString.setStatus('deprecated')
if mibBuilder.loadTexts: ceAssetOEMString.setDescription('This variable indicates the Original Equipment Manufacturer of the entity.')
ceAssetSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 92, 1, 1, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceAssetSerialNumber.setStatus('deprecated')
if mibBuilder.loadTexts: ceAssetSerialNumber.setDescription('This variable indicates the serial number of the entity.')
ceAssetOrderablePartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 92, 1, 1, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceAssetOrderablePartNumber.setStatus('deprecated')
if mibBuilder.loadTexts: ceAssetOrderablePartNumber.setDescription('This variable indicates the part number you can use to order the entity.')
ceAssetHardwareRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 92, 1, 1, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceAssetHardwareRevision.setStatus('deprecated')
if mibBuilder.loadTexts: ceAssetHardwareRevision.setDescription('This variable indicates the engineering design revision of the hardware of the entity.')
ceAssetMfgAssyNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 92, 1, 1, 1, 5), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceAssetMfgAssyNumber.setStatus('current')
if mibBuilder.loadTexts: ceAssetMfgAssyNumber.setDescription("This variable indicates the manufacturing assembly number, which is the 'hardware' identification.")
ceAssetMfgAssyRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 92, 1, 1, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceAssetMfgAssyRevision.setStatus('current')
if mibBuilder.loadTexts: ceAssetMfgAssyRevision.setDescription('This variable indicates the revision of the entity, within the ceAssetMfgAssyNumber.')
ceAssetFirmwareID = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 92, 1, 1, 1, 7), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceAssetFirmwareID.setStatus('deprecated')
if mibBuilder.loadTexts: ceAssetFirmwareID.setDescription("This variable indicates the firmware installed on this entity. For IOS devices, this variable's value is in the IOS Image Naming Convention format. IOS Image Naming Convention Software images are named according to a scheme that identifies what's in the image and what platform it runs on. The names have three parts, separated by dashes: e.g. xxxx-yyyy-ww. xxxx = Platform yyyy = Features ww = Where it executes from and if compressed ")
ceAssetFirmwareRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 92, 1, 1, 1, 8), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceAssetFirmwareRevision.setStatus('deprecated')
if mibBuilder.loadTexts: ceAssetFirmwareRevision.setDescription("This variable indicates the revision of firmware installed on this entity. For IOS devices, this variable's value is in the NGRP external customer-visible format. NGRP external customer-visible revision strings have this format: 'x.y (z [p] ) [A] [ [ u ( v [ p ] ) ] ] [ q ]', where: - x.y Combination of two 1-2 digit numerics separated by a '.' that identify the Software major release - z 1-3 digit numeric that identifies the maintenance release of x.y - A 1-3 alpha letters, designator of the release train. - u 1-2 digit numeric that identifies the version of the ED-specific code - v 1-2 digit numeric that identifies the maintenance release of the ED-specific code - v 1-2 digit numeric that identifies the maintenance release of the ED-specific code - p 1 alpha letter that identifies the unusual special case SW Line Stop Fast Re-build by the Release Ops team to replace the posted/shipping release in CCO and Mfg with a version containing a critical catastrophic defect fix that cannot wait until the next maintenance release - q 3 alphanumeric optional suffix used as an indicator in the image banner by the SW Line Stop Re-build process used unusual special case situation when the renumber build has occurred but the images have not been released (value always blank unless these special circumstances require its use). ")
ceAssetSoftwareID = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 92, 1, 1, 1, 9), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceAssetSoftwareID.setStatus('deprecated')
if mibBuilder.loadTexts: ceAssetSoftwareID.setDescription("This variable indicates the software installed on this entity. For IOS devices, this variable's value is in the IOS Image Naming Convention format. IOS Image Naming Convention --------------------------- Software images are named according to a scheme that identifies what's in the image and what platform it runs on. The names have three parts, separated by dashes: e.g. xxxx-yyyy-ww. xxxx = Platform yyyy = Features ww = Where it executes from and if compressed ")
ceAssetSoftwareRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 92, 1, 1, 1, 10), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceAssetSoftwareRevision.setStatus('deprecated')
if mibBuilder.loadTexts: ceAssetSoftwareRevision.setDescription("This variable indicates the revision of software installed on this entity. For IOS devices, this variable's value is in the NGRP external customer-visible format. NGRP external customer-visible revision strings have this format: 'x.y (z [p] ) [A] [ [ u ( v [ p ] ) ] ] [ q ]', where: - x.y Combination of two 1-2 digit numerics separated by a '.' that identify the Software major release - z 1-3 digit numeric that identifies the maintenance release of x.y - A 1-3 alpha letters, designator of the release train. - u 1-2 digit numeric that identifies the version of the ED-specific code - v 1-2 digit numeric that identifies the maintenance release of the ED-specific code - p 1 alpha letter that identifies the unusual special case SW Line Stop Fast Re-build by the Release Ops team to replace the posted/shipping release in CCO and Mfg with a version containing a critical catastrophic defect fix that cannot wait until the next maintenance release - q 3 alphanumeric optional suffix used as an indicator in the image banner by the SW Line Stop Re-build process used unusual special case situation when the renumber build has occurred but the images have not been released (value always blank unless these special circumstances require its use). ")
ceAssetCLEI = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 92, 1, 1, 1, 11), SnmpAdminString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(10, 10), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceAssetCLEI.setReference('Bellcore Technical reference GR-485-CORE, COMMON LANGUAGE Equipment Processes and Guidelines, Issue 2, October, 1995.')
if mibBuilder.loadTexts: ceAssetCLEI.setStatus('current')
if mibBuilder.loadTexts: ceAssetCLEI.setDescription('This object represents the CLEI (Common Language Equipment Identifier) code for the physical entity. If the physical entity is not present in the system, or does not have an associated CLEI code, then the value of this object will be a zero-length string.')
ceAssetAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 92, 1, 1, 1, 12), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ceAssetAlias.setStatus('deprecated')
if mibBuilder.loadTexts: ceAssetAlias.setDescription("This object is an 'alias' name for the physical entity as specified by a network manager, and provides a non-volatile 'handle' for the physical entity. On the first instantiation of an physical entity, the value of entPhysicalAlias associated with that entity is set to the zero-length string. However, agent may set the value to a locally unique default value, instead of a zero-length string. If write access is implemented for an instance of entPhysicalAlias, and a value is written into the instance, the agent must retain the supplied value in the entPhysicalAlias instance associated with the same physical entity for as long as that entity remains instantiated. This includes instantiations across all re-initializations/reboots of the network management system, including those which result in a change of the physical entity's entPhysicalIndex value.")
ceAssetTag = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 92, 1, 1, 1, 13), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ceAssetTag.setStatus('deprecated')
if mibBuilder.loadTexts: ceAssetTag.setDescription("This object is a user-assigned asset tracking identifier for the physical entity as specified by a network manager, and provides non-volatile storage of this information. On the first instantiation of an physical entity, the value of ceasAssetID associated with that entity is set to the zero-length string. Not every physical component will have a asset tracking identifier, or even need one. Physical entities for which the associated value of the ceAssetIsFRU object is equal to 'false' (e.g., the repeater ports within a repeater module), do not need their own unique asset tracking identifier. An agent does not have to provide write access for such entities, and may instead return a zero-length string. If write access is implemented for an instance of ceasAssetID, and a value is written into the instance, the agent must retain the supplied value in the ceasAssetID instance associated with the same physical entity for as long as that entity remains instantiated. This includes instantiations across all re-initializations/reboots of the network management system, including those which result in a change of the physical entity's entPhysicalIndex value. If no asset tracking information is associated with the physical component, then this object will contain a zero- length string.")
ceAssetIsFRU = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 92, 1, 1, 1, 14), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceAssetIsFRU.setStatus('deprecated')
if mibBuilder.loadTexts: ceAssetIsFRU.setDescription("This object indicates whether or not this physical entity is considered a 'field replaceable unit' by the vendor. If this object contains the value 'true' then the corresponding entPhysicalEntry identifies a field replaceable unit. For all entPhysicalEntries which represent components that are permanently contained within a field replaceable unit, the value 'false' should be returned for this object.")
ciscoEntityAssetMIBNotificationsPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 92, 2))
ciscoEntityAssetMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 92, 2, 0))
ciscoEntityAssetMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 92, 3))
ciscoEntityAssetMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 92, 3, 1))
ciscoEntityAssetMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 92, 3, 2))
ciscoEntityAssetMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 92, 3, 1, 1)).setObjects(("CISCO-ENTITY-ASSET-MIB", "ceAssetGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoEntityAssetMIBCompliance = ciscoEntityAssetMIBCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoEntityAssetMIBCompliance.setDescription('An ENTITY-MIB implementation that lists entities with asset information in its entPhysicalTable must implement this group.')
ciscoEntityAssetMIBComplianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 92, 3, 1, 2)).setObjects(("CISCO-ENTITY-ASSET-MIB", "ceAssetGroupRev1"), ("CISCO-ENTITY-ASSET-MIB", "ceAssetEntityGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoEntityAssetMIBComplianceRev1 = ciscoEntityAssetMIBComplianceRev1.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoEntityAssetMIBComplianceRev1.setDescription('An ENTITY-MIB implementation that lists entities with asset information in its entPhysicalTable must implement this group.')
ciscoEntityAssetMIBComplianceRev2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 92, 3, 1, 3)).setObjects(("CISCO-ENTITY-ASSET-MIB", "ceAssetGroupRev2"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoEntityAssetMIBComplianceRev2 = ciscoEntityAssetMIBComplianceRev2.setStatus('current')
if mibBuilder.loadTexts: ciscoEntityAssetMIBComplianceRev2.setDescription('An ENTITY-MIB implementation that lists entities with asset information in its entPhysicalTable must implement this group.')
ceAssetGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 92, 3, 2, 1)).setObjects(("CISCO-ENTITY-ASSET-MIB", "ceAssetOEMString"), ("CISCO-ENTITY-ASSET-MIB", "ceAssetSerialNumber"), ("CISCO-ENTITY-ASSET-MIB", "ceAssetOrderablePartNumber"), ("CISCO-ENTITY-ASSET-MIB", "ceAssetHardwareRevision"), ("CISCO-ENTITY-ASSET-MIB", "ceAssetMfgAssyNumber"), ("CISCO-ENTITY-ASSET-MIB", "ceAssetMfgAssyRevision"), ("CISCO-ENTITY-ASSET-MIB", "ceAssetFirmwareID"), ("CISCO-ENTITY-ASSET-MIB", "ceAssetFirmwareRevision"), ("CISCO-ENTITY-ASSET-MIB", "ceAssetSoftwareID"), ("CISCO-ENTITY-ASSET-MIB", "ceAssetSoftwareRevision"), ("CISCO-ENTITY-ASSET-MIB", "ceAssetCLEI"), ("CISCO-ENTITY-ASSET-MIB", "ceAssetAlias"), ("CISCO-ENTITY-ASSET-MIB", "ceAssetTag"), ("CISCO-ENTITY-ASSET-MIB", "ceAssetIsFRU"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ceAssetGroup = ceAssetGroup.setStatus('deprecated')
if mibBuilder.loadTexts: ceAssetGroup.setDescription('The collection of objects which are used to describe and monitor asset-related data of ENTITY-MIB entPhysicalTable items.')
ceAssetGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 92, 3, 2, 2)).setObjects(("CISCO-ENTITY-ASSET-MIB", "ceAssetOEMString"), ("CISCO-ENTITY-ASSET-MIB", "ceAssetMfgAssyNumber"), ("CISCO-ENTITY-ASSET-MIB", "ceAssetMfgAssyRevision"), ("CISCO-ENTITY-ASSET-MIB", "ceAssetFirmwareID"), ("CISCO-ENTITY-ASSET-MIB", "ceAssetSoftwareID"), ("CISCO-ENTITY-ASSET-MIB", "ceAssetCLEI"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ceAssetGroupRev1 = ceAssetGroupRev1.setStatus('deprecated')
if mibBuilder.loadTexts: ceAssetGroupRev1.setDescription('The collection of objects which are used to describe and monitor asset-related extension data of ENTITY-MIB (RFC 2737) entPhysicalTable items.')
ceAssetEntityGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 92, 3, 2, 3)).setObjects(("CISCO-ENTITY-ASSET-MIB", "ceAssetOrderablePartNumber"), ("CISCO-ENTITY-ASSET-MIB", "ceAssetSerialNumber"), ("CISCO-ENTITY-ASSET-MIB", "ceAssetHardwareRevision"), ("CISCO-ENTITY-ASSET-MIB", "ceAssetFirmwareRevision"), ("CISCO-ENTITY-ASSET-MIB", "ceAssetSoftwareRevision"), ("CISCO-ENTITY-ASSET-MIB", "ceAssetAlias"), ("CISCO-ENTITY-ASSET-MIB", "ceAssetTag"), ("CISCO-ENTITY-ASSET-MIB", "ceAssetIsFRU"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ceAssetEntityGroup = ceAssetEntityGroup.setStatus('deprecated')
if mibBuilder.loadTexts: ceAssetEntityGroup.setDescription('The collection of objects which are duplicated from the objects in the entPhysicalTable of ENTITY-MIB (RFC 2737).')
ceAssetGroupRev2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 92, 3, 2, 4)).setObjects(("CISCO-ENTITY-ASSET-MIB", "ceAssetMfgAssyNumber"), ("CISCO-ENTITY-ASSET-MIB", "ceAssetMfgAssyRevision"), ("CISCO-ENTITY-ASSET-MIB", "ceAssetCLEI"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ceAssetGroupRev2 = ceAssetGroupRev2.setStatus('current')
if mibBuilder.loadTexts: ceAssetGroupRev2.setDescription('The collection of objects which are used to describe and monitor asset-related extension data of ENTITY-MIB (RFC 2737) entPhysicalTable items.')
mibBuilder.exportSymbols("CISCO-ENTITY-ASSET-MIB", ciscoEntityAssetMIBComplianceRev1=ciscoEntityAssetMIBComplianceRev1, ciscoEntityAssetMIB=ciscoEntityAssetMIB, ceAssetTag=ceAssetTag, ciscoEntityAssetMIBGroups=ciscoEntityAssetMIBGroups, ceAssetFirmwareRevision=ceAssetFirmwareRevision, ceAssetAlias=ceAssetAlias, ciscoEntityAssetMIBNotifications=ciscoEntityAssetMIBNotifications, ceAssetGroup=ceAssetGroup, PYSNMP_MODULE_ID=ciscoEntityAssetMIB, ceAssetCLEI=ceAssetCLEI, ceAssetMfgAssyNumber=ceAssetMfgAssyNumber, ceAssetSerialNumber=ceAssetSerialNumber, ceAssetHardwareRevision=ceAssetHardwareRevision, ceAssetGroupRev2=ceAssetGroupRev2, ciscoEntityAssetMIBComplianceRev2=ciscoEntityAssetMIBComplianceRev2, ciscoEntityAssetMIBObjects=ciscoEntityAssetMIBObjects, ceAssetEntry=ceAssetEntry, ciscoEntityAssetMIBCompliances=ciscoEntityAssetMIBCompliances, ciscoEntityAssetMIBCompliance=ciscoEntityAssetMIBCompliance, ceAssetSoftwareRevision=ceAssetSoftwareRevision, ceAssetIsFRU=ceAssetIsFRU, ciscoEntityAssetMIBConformance=ciscoEntityAssetMIBConformance, ceAssetOEMString=ceAssetOEMString, ceAssetFirmwareID=ceAssetFirmwareID, ceAssetTable=ceAssetTable, ceAssetEntityGroup=ceAssetEntityGroup, ciscoEntityAssetMIBNotificationsPrefix=ciscoEntityAssetMIBNotificationsPrefix, ceAssetSoftwareID=ceAssetSoftwareID, ceAssetGroupRev1=ceAssetGroupRev1, ceAssetOrderablePartNumber=ceAssetOrderablePartNumber, ceAssetMfgAssyRevision=ceAssetMfgAssyRevision)
