#
# PySNMP MIB module FORTINET-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/FORTINET-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:14:44 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
iso, Counter64, IpAddress, MibIdentifier, Integer32, NotificationType, ModuleIdentity, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, ObjectIdentity, Bits, enterprises, TimeTicks, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "Counter64", "IpAddress", "MibIdentifier", "Integer32", "NotificationType", "ModuleIdentity", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "ObjectIdentity", "Bits", "enterprises", "TimeTicks", "Gauge32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
class AuthAlgorithm(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("null", 1), ("md5", 2), ("sha1", 3), ("aes128", 4), ("aes192", 5), ("aes256", 6))

class EncrytionAlgorithm(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("null", 1), ("des", 2), ("tripleDes", 3), ("aes128", 4), ("aes192", 5), ("aes256", 6))

class LanguageCode(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("western", 1), ("simplifiedChinese", 2), ("traditionalChinese", 3), ("japanese", 4), ("kerean", 5), ("default", 6))

class ItemState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("enable", 1), ("disable", 2))

fortinet = MibIdentifier((1, 3, 6, 1, 4, 1, 12356))
fnSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 1))
fnFirewall = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 2))
fnUser = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 3))
fnVpn = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 4))
fnNIDS = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 5))
fnAntiVirus = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 6))
fnWebFilter = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 7))
fnAntiSpam = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 8))
fnLogAndRpt = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 9))
fortinetTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 10))
fortinetProducts = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 15))
fortigateGeneric = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 15, 1))
fortigate50 = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 15, 50))
fortigate60 = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 15, 60))
fortigate100 = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 15, 100))
fortigate200 = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 15, 200))
fortigate300 = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 15, 300))
fortigate400 = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 15, 400))
fortigate420 = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 15, 420))
fortigate500 = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 15, 500))
fortigate1000 = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 15, 1000))
fortigate2000 = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 15, 2000))
fortigate3000 = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 15, 3000))
fortigate3600 = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 15, 3600))
fnSysStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 1, 1))
fnSysUpdate = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 1, 2))
fnSysNetwork = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 1, 3))
fnSysConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 1, 4))
fnSysSnmp = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 1, 5))
fnFirewallPolicy = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 2, 1))
fnFirewallAddress = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 2, 2))
fnFirewallService = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 2, 3))
fnFirewallSchedule = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 2, 4))
fnFirewallVirtualIP = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 2, 5))
fnFirewallIpPool = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 2, 6))
fnFirewallIPMACBinding = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 2, 7))
fnFirewallContProfiles = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 2, 8))
fnUserLocalTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 3, 1), )
if mibBuilder.loadTexts: fnUserLocalTable.setStatus('mandatory')
if mibBuilder.loadTexts: fnUserLocalTable.setDescription('Admin user account table.')
fnUserLocalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 3, 1, 1), ).setIndexNames((0, "FORTINET-MIB", "fnUserLocalIndex"))
if mibBuilder.loadTexts: fnUserLocalEntry.setStatus('mandatory')
if mibBuilder.loadTexts: fnUserLocalEntry.setDescription('Admin user information')
fnUserLocalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnUserLocalIndex.setStatus('mandatory')
if mibBuilder.loadTexts: fnUserLocalIndex.setDescription('Local firewall user index')
fnUserLocalName = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 3, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnUserLocalName.setStatus('mandatory')
if mibBuilder.loadTexts: fnUserLocalName.setDescription('Local firewall user name')
fnUserLocalPasswd = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 3, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnUserLocalPasswd.setStatus('mandatory')
if mibBuilder.loadTexts: fnUserLocalPasswd.setDescription('Local user password')
fnUserLocalState = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 3, 1, 1, 4), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnUserLocalState.setStatus('mandatory')
if mibBuilder.loadTexts: fnUserLocalState.setDescription('User state: enable/disable')
fnUserLocalType = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("local", 1), ("radius", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnUserLocalType.setStatus('mandatory')
if mibBuilder.loadTexts: fnUserLocalType.setDescription('The user type: local user or a user on radius server')
fnUserLocalRadiusSrv = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 3, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnUserLocalRadiusSrv.setStatus('mandatory')
if mibBuilder.loadTexts: fnUserLocalRadiusSrv.setDescription('If the local user is a user on Radius server, this entry is the name of the Radius server that has been created in the radius server table')
fnUserLocalRadiusOther = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 3, 1, 1, 7), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnUserLocalRadiusOther.setStatus('mandatory')
if mibBuilder.loadTexts: fnUserLocalRadiusOther.setDescription('If the specified radius user fails to connect to the specified radius user, enalbing of this flag will allow the system to try other radius servers.')
fnUserRadiusSrvTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 3, 2), )
if mibBuilder.loadTexts: fnUserRadiusSrvTable.setStatus('mandatory')
if mibBuilder.loadTexts: fnUserRadiusSrvTable.setDescription('Radius servers table')
fnUserRadiusSrvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 3, 2, 1), ).setIndexNames((0, "FORTINET-MIB", "fnUserRadIndex"))
if mibBuilder.loadTexts: fnUserRadiusSrvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: fnUserRadiusSrvEntry.setDescription('Row Description')
fnUserRadIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: fnUserRadIndex.setStatus('mandatory')
if mibBuilder.loadTexts: fnUserRadIndex.setDescription('Column Description')
fnUserRadName = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 3, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnUserRadName.setStatus('mandatory')
if mibBuilder.loadTexts: fnUserRadName.setDescription('Radius server name')
fnUserRadAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 3, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnUserRadAddr.setStatus('mandatory')
if mibBuilder.loadTexts: fnUserRadAddr.setDescription('Host name or IP addr of the radius server')
fnUserRadSecret = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 3, 2, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnUserRadSecret.setStatus('mandatory')
if mibBuilder.loadTexts: fnUserRadSecret.setDescription('The secret of the radius server')
fnUserGrpTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 3, 3), )
if mibBuilder.loadTexts: fnUserGrpTable.setStatus('mandatory')
if mibBuilder.loadTexts: fnUserGrpTable.setDescription('User group table')
fnUserGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 3, 3, 1), ).setIndexNames((0, "FORTINET-MIB", "fnUserGrpIndex"))
if mibBuilder.loadTexts: fnUserGrpEntry.setStatus('mandatory')
if mibBuilder.loadTexts: fnUserGrpEntry.setDescription('Row Description')
fnUserGrpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: fnUserGrpIndex.setStatus('mandatory')
if mibBuilder.loadTexts: fnUserGrpIndex.setDescription('Column Description')
fnUserGrpName = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 3, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnUserGrpName.setStatus('mandatory')
if mibBuilder.loadTexts: fnUserGrpName.setDescription('User group name')
fnUserGrpMembers = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 3, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnUserGrpMembers.setStatus('mandatory')
if mibBuilder.loadTexts: fnUserGrpMembers.setDescription('Names of users in the group. The user names need to be separated by a separator, such as a ,.')
fnVpnIPSEC = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 4, 1))
fnVpnPPTP = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 4, 2))
fnVpnL2TP = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 4, 3))
fnVpnCert = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 4, 4))
fnNidsDetection = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 5, 1))
fnNidsPrevention = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 5, 2))
fnNidsResponse = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 5, 3))
fnAvFileBlock = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 6, 1))
fnAvQuatantine = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 6, 2))
fnAVConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 6, 3))
fnWebFilterBWords = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 7, 1))
fnWebFilterUrlBlk = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 7, 2))
fnWebFilterScripts = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 7, 3))
fnWebFilterExemptUrl = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 7, 4))
fnWebFilterCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 7, 5))
fnWfCfgMsgTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 7, 5, 1), )
if mibBuilder.loadTexts: fnWfCfgMsgTable.setStatus('mandatory')
if mibBuilder.loadTexts: fnWfCfgMsgTable.setDescription('Description')
fnWfCfgMsgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 7, 5, 1, 1), ).setIndexNames((0, "FORTINET-MIB", "fnWfCfgMsgIndex"))
if mibBuilder.loadTexts: fnWfCfgMsgEntry.setStatus('mandatory')
if mibBuilder.loadTexts: fnWfCfgMsgEntry.setDescription('Row Description')
fnWfCfgMsgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 7, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: fnWfCfgMsgIndex.setStatus('mandatory')
if mibBuilder.loadTexts: fnWfCfgMsgIndex.setDescription('Column Description')
fnWfCfgMsgName = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 7, 5, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnWfCfgMsgName.setStatus('mandatory')
if mibBuilder.loadTexts: fnWfCfgMsgName.setDescription('Column Description')
fnWfCfgMsgService = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 7, 5, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnWfCfgMsgService.setStatus('mandatory')
if mibBuilder.loadTexts: fnWfCfgMsgService.setDescription('Description')
fnWfCfgMsgDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 7, 5, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnWfCfgMsgDescription.setStatus('mandatory')
if mibBuilder.loadTexts: fnWfCfgMsgDescription.setDescription('Description')
fnAntiSpamBlkTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 8, 1), )
if mibBuilder.loadTexts: fnAntiSpamBlkTable.setStatus('mandatory')
if mibBuilder.loadTexts: fnAntiSpamBlkTable.setDescription('Blocked url/pattern list for anti spam')
fnAntiSpamBlkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 8, 1, 1), ).setIndexNames((0, "FORTINET-MIB", "fnAntiSpamBlkIndex"))
if mibBuilder.loadTexts: fnAntiSpamBlkEntry.setStatus('mandatory')
if mibBuilder.loadTexts: fnAntiSpamBlkEntry.setDescription('Row Description')
fnAntiSpamBlkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 8, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: fnAntiSpamBlkIndex.setStatus('mandatory')
if mibBuilder.loadTexts: fnAntiSpamBlkIndex.setDescription('Column Description')
fnAntiSpamBlkPat = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 8, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnAntiSpamBlkPat.setStatus('mandatory')
if mibBuilder.loadTexts: fnAntiSpamBlkPat.setDescription('Url/Pattern')
fnAntiSpamBlkImapState = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 8, 1, 1, 3), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnAntiSpamBlkImapState.setStatus('mandatory')
if mibBuilder.loadTexts: fnAntiSpamBlkImapState.setDescription('Turn on/off anti spam IMAP block for the entry')
fnAntiSpamBlkPop3State = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 8, 1, 1, 4), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnAntiSpamBlkPop3State.setStatus('mandatory')
if mibBuilder.loadTexts: fnAntiSpamBlkPop3State.setDescription('Turn on/off anti spam POP3 block for the entry')
fnAntiSpamExemptTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 8, 2), )
if mibBuilder.loadTexts: fnAntiSpamExemptTable.setStatus('mandatory')
if mibBuilder.loadTexts: fnAntiSpamExemptTable.setDescription('Exempt url/pattern list for anti spam')
fnAntiSpamExemptEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 8, 2, 1), ).setIndexNames((0, "FORTINET-MIB", "fnAntiSpamExemptIndex"))
if mibBuilder.loadTexts: fnAntiSpamExemptEntry.setStatus('mandatory')
if mibBuilder.loadTexts: fnAntiSpamExemptEntry.setDescription('Row Description')
fnAntiSpamExemptIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 8, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: fnAntiSpamExemptIndex.setStatus('mandatory')
if mibBuilder.loadTexts: fnAntiSpamExemptIndex.setDescription('Column Description')
fnAntiSpamBanWordPat = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 8, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnAntiSpamBanWordPat.setStatus('mandatory')
if mibBuilder.loadTexts: fnAntiSpamBanWordPat.setDescription('Banned word')
fnAntiSpamExemptImapState = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 8, 2, 1, 3), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnAntiSpamExemptImapState.setStatus('mandatory')
if mibBuilder.loadTexts: fnAntiSpamExemptImapState.setDescription('Turn on/off anti spam IMAP block for the entry')
fnAntiSpamExemptPop3State = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 8, 2, 1, 4), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnAntiSpamExemptPop3State.setStatus('mandatory')
if mibBuilder.loadTexts: fnAntiSpamExemptPop3State.setDescription('Turn on/off anti spam POP3 block for the entry')
fnAntiSpamBanWordTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 8, 3), )
if mibBuilder.loadTexts: fnAntiSpamBanWordTable.setStatus('mandatory')
if mibBuilder.loadTexts: fnAntiSpamBanWordTable.setDescription('Banned words list for anti spam')
fnAntiSpamBanWordEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 8, 3, 1), ).setIndexNames((0, "FORTINET-MIB", "fnAntiSpamBanWordIndex"))
if mibBuilder.loadTexts: fnAntiSpamBanWordEntry.setStatus('mandatory')
if mibBuilder.loadTexts: fnAntiSpamBanWordEntry.setDescription('Row Description')
fnAntiSpamBanWordIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 8, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: fnAntiSpamBanWordIndex.setStatus('mandatory')
if mibBuilder.loadTexts: fnAntiSpamBanWordIndex.setDescription('Column Description')
fnAntiSpamBanWordImapState = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 8, 3, 1, 3), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnAntiSpamBanWordImapState.setStatus('mandatory')
if mibBuilder.loadTexts: fnAntiSpamBanWordImapState.setDescription('Turn on/off anti spam IMAP block for the entry')
fnAntiSpamBanWordPop3State = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 8, 3, 1, 4), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnAntiSpamBanWordPop3State.setStatus('mandatory')
if mibBuilder.loadTexts: fnAntiSpamBanWordPop3State.setDescription('Turn on/off anti spam POP3 block for the entry')
fnAntiSpamCfgSubTag = MibScalar((1, 3, 6, 1, 4, 1, 12356, 8, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnAntiSpamCfgSubTag.setStatus('mandatory')
if mibBuilder.loadTexts: fnAntiSpamCfgSubTag.setDescription('Anti spam subject tag')
fnLogSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 9, 1))
fnLog = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 9, 2))
fnAlertEmai = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 9, 3))
fnSysStatusOpMode = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nat", 1), ("transparent", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysStatusOpMode.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysStatusOpMode.setDescription('FortiNet product can have two operation modes: NAT and transparent')
fnSysStatusVersion = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysStatusVersion.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysStatusVersion.setDescription('FortiNet Software version.')
fnSysStatusAVDBVersion = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysStatusAVDBVersion.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysStatusAVDBVersion.setDescription('FortiNet Antivirus DB version.')
fnSysStatusNIDSDBVersion = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysStatusNIDSDBVersion.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysStatusNIDSDBVersion.setDescription('FortiNet NIDS DB version.')
fnSysStatusSN = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysStatusSN.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysStatusSN.setDescription('FortiNet product serial number.')
fnSysMonitor = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 1, 1, 6))
fnSysUpdateConnStatus1 = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 2, 1), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysUpdateConnStatus1.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysUpdateConnStatus1.setDescription('The availability of FortiResponse distribution network.')
fnSysUpdateConnStatus2 = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 2, 2), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysUpdateConnStatus2.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysUpdateConnStatus2.setDescription('The availability of push update center')
fnSysUpdatePushUpState = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allow", 1), ("disallow", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysUpdatePushUpState.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysUpdatePushUpState.setDescription('Allow or disallow push update')
fnSysUpdatePeriodicUpState = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysUpdatePeriodicUpState.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysUpdatePeriodicUpState.setDescription('Periodic update: enalbe/disable')
fnSysUpdatePeriodicUpFreq = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("daily", 1), ("weekly", 2), ("other", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysUpdatePeriodicUpFreq.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysUpdatePeriodicUpFreq.setDescription('The frequency of periodic update')
fnSysUpdatePeriodicUpDay = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("sunday", 1), ("monday", 2), ("tuesday", 3), ("wednesday", 4), ("thursday", 5), ("friday", 6), ("saturday", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysUpdatePeriodicUpDay.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysUpdatePeriodicUpDay.setDescription('The weekday of the weekly update scheme')
fnSysUpdatePeriodicUpTime = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 2, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysUpdatePeriodicUpTime.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysUpdatePeriodicUpTime.setDescription('The time of day to update: hhmm')
fnSysUpdateVirusDefUpStatus = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 2, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysUpdateVirusDefUpStatus.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysUpdateVirusDefUpStatus.setDescription('Virus Definitions Update status, such as upToDate')
fnSysUpdateVirusDefUpLast = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 2, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysUpdateVirusDefUpLast.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysUpdateVirusDefUpLast.setDescription('Last update date')
fnSysUpdateIdsUpStatus = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 2, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysUpdateIdsUpStatus.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysUpdateIdsUpStatus.setDescription('IDS update status')
fnSysUpdateIdsUpLast = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 2, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysUpdateIdsUpLast.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysUpdateIdsUpLast.setDescription('Last IDS update date')
fnSysUpdateSpamDefUpStatus = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 2, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysUpdateSpamDefUpStatus.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysUpdateSpamDefUpStatus.setDescription('Spam Definitions Update status, such as upToDate')
fnSysUpdateSpamDefUpLast = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 2, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysUpdateSpamDefUpLast.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysUpdateSpamDefUpLast.setDescription('Last update date')
fnSysNetworkIfTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 1, 3, 1), )
if mibBuilder.loadTexts: fnSysNetworkIfTable.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysNetworkIfTable.setDescription('All FortiNet devices have a trusted interface and an untrusted interface. FortiGate-300 and -500 also have a DMZ interface.%%%')
fnSysNetworkIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 1, 3, 1, 1), ).setIndexNames((0, "FORTINET-MIB", "fnSysNetworkIfIndex"))
if mibBuilder.loadTexts: fnSysNetworkIfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysNetworkIfEntry.setDescription('fnSysNetworkIfEntry collects attributes about FortiNet interface.')
fnSysNetworkIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysNetworkIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysNetworkIfIndex.setDescription('Interface number which uniquely identifies an interface.')
fnSysNetworkIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 3, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysNetworkIfName.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysNetworkIfName.setDescription('Each interface has a readable name such as %%%.')
fnSysNetworkIfIp = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 3, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysNetworkIfIp.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysNetworkIfIp.setDescription('Each interface must be assigned an IP address.')
fnSysNetworkIfNetmask = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 3, 1, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysNetworkIfNetmask.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysNetworkIfNetmask.setDescription('Each interface must belong to a subnet represented by netmask.')
fnSysNetworkIfMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 3, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysNetworkIfMAC.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysNetworkIfMAC.setDescription('Each interface must have a MAC address.')
fnSysNetworkIfSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 3, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysNetworkIfSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysNetworkIfSpeed.setDescription('Each interface must have speed .')
fnSysNetworkIfOutFrag = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 3, 1, 1, 7), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysNetworkIfOutFrag.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysNetworkIfOutFrag.setDescription('Turn on/off fragment outgoing packets greater than MTU')
fnSysNetworkIfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysNetworkIfStatus.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysNetworkIfStatus.setDescription('Description')
fnSysNetworkIfAddrMode = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("manual", 1), ("dhcp", 2), ("pppoe", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysNetworkIfAddrMode.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysNetworkIfAddrMode.setDescription('The means that how the interface get the IP address')
fnSysNetworkIfAccHttps = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 3, 1, 1, 10), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysNetworkIfAccHttps.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysNetworkIfAccHttps.setDescription('Description')
fnSysNetworkIfAccPing = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 3, 1, 1, 11), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysNetworkIfAccPing.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysNetworkIfAccPing.setDescription('Description')
fnSysNetworkIfAccSsh = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 3, 1, 1, 12), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysNetworkIfAccSsh.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysNetworkIfAccSsh.setDescription('Description')
fnSysNetworkIfAccSnmp = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 3, 1, 1, 13), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysNetworkIfAccSnmp.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysNetworkIfAccSnmp.setDescription('Description')
fnSysNetworkIfAccHttp = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 3, 1, 1, 14), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysNetworkIfAccHttp.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysNetworkIfAccHttp.setDescription('Description')
fnSysNetworkIfAccTelnet = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 3, 1, 1, 15), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysNetworkIfAccTelnet.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysNetworkIfAccTelnet.setDescription('Description')
fnSysNetworkIfPingSrvState = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 3, 1, 1, 16), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysNetworkIfPingSrvState.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysNetworkIfPingSrvState.setDescription('Description')
fnSysNetworkIfPingSrvAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 3, 1, 1, 17), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysNetworkIfPingSrvAddr.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysNetworkIfPingSrvAddr.setDescription('Ping server address')
fnSysNetworkIfIp2 = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 3, 1, 1, 18), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysNetworkIfIp2.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysNetworkIfIp2.setDescription('Each interface must be assigned an IP address.')
fnSysNetworkIfNetmask2 = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 3, 1, 1, 19), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysNetworkIfNetmask2.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysNetworkIfNetmask2.setDescription('Each interface must belong to a subnet represented by netmask.')
fnSysNetworkIfPingSrvState2 = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 3, 1, 1, 20), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysNetworkIfPingSrvState2.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysNetworkIfPingSrvState2.setDescription('Description')
fnSysNetworkIfPingSrvAddr2 = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 3, 1, 1, 21), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysNetworkIfPingSrvAddr2.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysNetworkIfPingSrvAddr2.setDescription('Ping server address')
fnSysNetworkVlanTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 1, 3, 2), )
if mibBuilder.loadTexts: fnSysNetworkVlanTable.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysNetworkVlanTable.setDescription('Vlan table')
fnSysNetworkVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 1, 3, 2, 1), ).setIndexNames((0, "FORTINET-MIB", "fnSysNetworkVlanIndex"), (0, "FORTINET-MIB", "fnSysNetworkVlanName"))
if mibBuilder.loadTexts: fnSysNetworkVlanEntry.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysNetworkVlanEntry.setDescription('Row Description')
fnSysNetworkVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: fnSysNetworkVlanIndex.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysNetworkVlanIndex.setDescription('Column Description')
fnSysNetworkVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 3, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255)))
if mibBuilder.loadTexts: fnSysNetworkVlanName.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysNetworkVlanName.setDescription('Vlan name')
fnSysNetworkVlanIf = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 3, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysNetworkVlanIf.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysNetworkVlanIf.setDescription('The interface that receives the VLAN packets intended for this VLAN subinterface.')
fnSysNetworkVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysNetworkVlanId.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysNetworkVlanId.setDescription('the VLAN ID that matches the VLAN ID of the packets to be received by this VLAN subinterface')
fnSysNetworkVlanIp = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 3, 2, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysNetworkVlanIp.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysNetworkVlanIp.setDescription('IP address for the subinterface')
fnSysNetworkVlanNetmask = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 3, 2, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysNetworkVlanNetmask.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysNetworkVlanNetmask.setDescription('Netmask of the subinterface')
fnSysNetworkVlanAccHttps = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 3, 2, 1, 7), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysNetworkVlanAccHttps.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysNetworkVlanAccHttps.setDescription('Description')
fnSysNetworkVlanAccPing = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 3, 2, 1, 8), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysNetworkVlanAccPing.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysNetworkVlanAccPing.setDescription('Description')
fnSysNetworkVlanAccSsh = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 3, 2, 1, 9), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysNetworkVlanAccSsh.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysNetworkVlanAccSsh.setDescription('Description')
fnSysNetworkVlanAccSnmp = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 3, 2, 1, 10), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysNetworkVlanAccSnmp.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysNetworkVlanAccSnmp.setDescription('Description')
fnSysNetworkVlanAccHttp = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 3, 2, 1, 11), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysNetworkVlanAccHttp.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysNetworkVlanAccHttp.setDescription('Description')
fnSysNetworkVlanAccTelnet = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 3, 2, 1, 12), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysNetworkVlanAccTelnet.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysNetworkVlanAccTelnet.setDescription('Description')
fnSysNetworkAccessTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 1, 3, 3), )
if mibBuilder.loadTexts: fnSysNetworkAccessTable.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysNetworkAccessTable.setDescription('FortiNet admin access entries.')
fnSysNetworkAccessEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 1, 3, 3, 1), ).setIndexNames((0, "FORTINET-MIB", "fnSysNetworkAccessIfName"))
if mibBuilder.loadTexts: fnSysNetworkAccessEntry.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysNetworkAccessEntry.setDescription('fnSysNetworkAccessEntry includes information about admin access.')
fnSysNetworkAccessIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysNetworkAccessIfName.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysNetworkAccessIfName.setDescription('Interface name')
fnSysNetworkAccessHttps = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 3, 3, 1, 2), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysNetworkAccessHttps.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysNetworkAccessHttps.setDescription('%%%')
fnSysNetworkAccessPing = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 3, 3, 1, 3), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysNetworkAccessPing.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysNetworkAccessPing.setDescription('%%%')
fnSysNetworkAccessSsh = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 3, 3, 1, 4), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysNetworkAccessSsh.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysNetworkAccessSsh.setDescription('%%%')
fnSysNetworkAccessSnmp = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 3, 3, 1, 5), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysNetworkAccessSnmp.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysNetworkAccessSnmp.setDescription('%%%')
fnSysNetworkAccessHttp = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 3, 3, 1, 6), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysNetworkAccessHttp.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysNetworkAccessHttp.setDescription('Description')
fnSysNetworkAccessTelnet = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 3, 3, 1, 7), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysNetworkAccessTelnet.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysNetworkAccessTelnet.setDescription('Description')
fnSysNetworkRouting = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 1, 3, 4))
fnSysNetworkDhcp = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 1, 3, 5))
fnSysZoneTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 1, 3, 6), )
if mibBuilder.loadTexts: fnSysZoneTable.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysZoneTable.setDescription('Zone table')
fnSysZoneEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 1, 3, 6, 1), ).setIndexNames((0, "FORTINET-MIB", "fnSysZoneId"))
if mibBuilder.loadTexts: fnSysZoneEntry.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysZoneEntry.setDescription('Zone')
fnSysZoneId = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 3, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: fnSysZoneId.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysZoneId.setDescription('Column Description')
fnSysZoneName = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 3, 6, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysZoneName.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysZoneName.setDescription('Column Description')
fnSysZoneSecLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 3, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysZoneSecLevel.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysZoneSecLevel.setDescription('The security level of the zone')
fnSysZoneBlkTraffic = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 3, 6, 1, 4), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysZoneBlkTraffic.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysZoneBlkTraffic.setDescription('Block intro-zone traffic')
fnSysZoneLogTraffic = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 3, 6, 1, 5), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysZoneLogTraffic.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysZoneLogTraffic.setDescription('Log traffic to firewall')
fnSysNetworkDNS = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 1, 3, 7))
fnSysConfigTime = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 1, 4, 1))
fnSysConfigOpts = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 1, 4, 2))
fnSysConfigAdmin = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 1, 4, 3))
fnSysConfigHA = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 1, 4, 4))
fnSysSnmpGen = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 1, 5, 1))
fnSysSnmpv3AccCtrl = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 1, 5, 2))
fnSysSnmpSecurity = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 1, 5, 3))
fnSysSnmpViewTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 1, 5, 4), )
if mibBuilder.loadTexts: fnSysSnmpViewTable.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysSnmpViewTable.setDescription('Description')
fnSysSnmpViewEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 1, 5, 4, 1), ).setIndexNames((0, "FORTINET-MIB", "fnSysSnmpViewName"))
if mibBuilder.loadTexts: fnSysSnmpViewEntry.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysSnmpViewEntry.setDescription('Row Description')
fnSysSnmpViewName = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 5, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: fnSysSnmpViewName.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysSnmpViewName.setDescription('Column Description')
fnSysSnmpViewSubtreeOid = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 5, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysSnmpViewSubtreeOid.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysSnmpViewSubtreeOid.setDescription('Column Description')
fnSysSnmpViewMask = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 5, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysSnmpViewMask.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysSnmpViewMask.setDescription('Column Description')
fnSysSnmpViewType = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 5, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("included", 1), ("excluded", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysSnmpViewType.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysSnmpViewType.setDescription('Column Description')
fnFirewallPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 2, 1, 1), )
if mibBuilder.loadTexts: fnFirewallPolicyTable.setStatus('mandatory')
if mibBuilder.loadTexts: fnFirewallPolicyTable.setDescription('A firewall provides a network boundary with a single point of entry and exit.Firewall policies allow user to permit, deny, encrypt, authenticate, prioritize, schedule, and monitor the traffic attemption to cross your firewall. This table collects all the policy configuration information.')
fnFirewallPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 2, 1, 1, 1), ).setIndexNames((0, "FORTINET-MIB", "fnFirewallPolicyIndex"))
if mibBuilder.loadTexts: fnFirewallPolicyEntry.setStatus('mandatory')
if mibBuilder.loadTexts: fnFirewallPolicyEntry.setDescription('Each entry in the fnFirewallPolicyTable holds a set of configuration parameters associatied with an instance of policy.')
fnFirewallPolicyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFirewallPolicyIndex.setStatus('mandatory')
if mibBuilder.loadTexts: fnFirewallPolicyIndex.setDescription('Index for policy.')
fnFirewallPolicySrcZone = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFirewallPolicySrcZone.setStatus('mandatory')
if mibBuilder.loadTexts: fnFirewallPolicySrcZone.setDescription('Source zone name this policy applied to.')
fnFirewallPolicyDestZone = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFirewallPolicyDestZone.setStatus('mandatory')
if mibBuilder.loadTexts: fnFirewallPolicyDestZone.setDescription('Destination zone name address this policy applied to.')
fnFirewallPolicySrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 1, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFirewallPolicySrcAddr.setStatus('mandatory')
if mibBuilder.loadTexts: fnFirewallPolicySrcAddr.setDescription('Source address name this policy applied to.')
fnFirewallPolicyDestAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 1, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFirewallPolicyDestAddr.setStatus('mandatory')
if mibBuilder.loadTexts: fnFirewallPolicyDestAddr.setDescription('Destination address name address this policy applied to.')
fnFirewallPolicySchedule = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 1, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFirewallPolicySchedule.setStatus('mandatory')
if mibBuilder.loadTexts: fnFirewallPolicySchedule.setDescription('Schedule name for a pllicy.')
fnFirewallPolicyService = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 1, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFirewallPolicyService.setStatus('mandatory')
if mibBuilder.loadTexts: fnFirewallPolicyService.setDescription('Service name this policy applied to.')
fnFirewallPolicyAction = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 1, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFirewallPolicyAction.setStatus('mandatory')
if mibBuilder.loadTexts: fnFirewallPolicyAction.setDescription('Action for a policy.')
fnFirewallPolicyNAT = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFirewallPolicyNAT.setStatus('mandatory')
if mibBuilder.loadTexts: fnFirewallPolicyNAT.setDescription('Enable NAT')
fnFirewallPolicyDipPool = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFirewallPolicyDipPool.setStatus('mandatory')
if mibBuilder.loadTexts: fnFirewallPolicyDipPool.setDescription('Enable DIP pool')
fnFirewallPolicyFixPort = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFirewallPolicyFixPort.setStatus('mandatory')
if mibBuilder.loadTexts: fnFirewallPolicyFixPort.setDescription('Enable Fixed port')
fnFirewallPolicyAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFirewallPolicyAuth.setStatus('mandatory')
if mibBuilder.loadTexts: fnFirewallPolicyAuth.setDescription('Authorization')
fnFirewallPolicyVpnTunName = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 1, 1, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFirewallPolicyVpnTunName.setStatus('mandatory')
if mibBuilder.loadTexts: fnFirewallPolicyVpnTunName.setDescription('Tunnel name for a policy.')
fnFirewallPolicyVpnAllowIn = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFirewallPolicyVpnAllowIn.setStatus('mandatory')
if mibBuilder.loadTexts: fnFirewallPolicyVpnAllowIn.setDescription('Allow inbound traffic')
fnFirewallPolicyVpnAllowOut = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFirewallPolicyVpnAllowOut.setStatus('mandatory')
if mibBuilder.loadTexts: fnFirewallPolicyVpnAllowOut.setDescription('Allow outbound traffic')
fnFirewallPolicyVpnInNat = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFirewallPolicyVpnInNat.setStatus('mandatory')
if mibBuilder.loadTexts: fnFirewallPolicyVpnInNat.setDescription('In bound NAT')
fnFirewallPolicyVpnOutNat = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFirewallPolicyVpnOutNat.setStatus('mandatory')
if mibBuilder.loadTexts: fnFirewallPolicyVpnOutNat.setDescription('Outbound NAT')
fnFirewallPolicyLog = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 1, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFirewallPolicyLog.setStatus('mandatory')
if mibBuilder.loadTexts: fnFirewallPolicyLog.setDescription('enable log')
fnFirewallPolicyAV = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 1, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFirewallPolicyAV.setStatus('mandatory')
if mibBuilder.loadTexts: fnFirewallPolicyAV.setDescription('Anti virus and web filter')
fnFirewallPolicyGBand = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 1, 1, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFirewallPolicyGBand.setStatus('mandatory')
if mibBuilder.loadTexts: fnFirewallPolicyGBand.setDescription('Guaranteed bandwidth for traffic shaping')
fnFirewallPolicyMBand = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 1, 1, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFirewallPolicyMBand.setStatus('mandatory')
if mibBuilder.loadTexts: fnFirewallPolicyMBand.setDescription('Maximum bandwidth for traffic shaping')
fnFirewallPolicyTrafficPri = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 1, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("high", 1), ("medium", 2), ("low", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFirewallPolicyTrafficPri.setStatus('mandatory')
if mibBuilder.loadTexts: fnFirewallPolicyTrafficPri.setDescription('Traffic priority for traffic shaping')
fnFirewallPolicyProf = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 1, 1, 1, 23), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFirewallPolicyProf.setStatus('mandatory')
if mibBuilder.loadTexts: fnFirewallPolicyProf.setDescription('Content profile name')
fnFirewallAddrTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 2, 2, 1), )
if mibBuilder.loadTexts: fnFirewallAddrTable.setStatus('mandatory')
if mibBuilder.loadTexts: fnFirewallAddrTable.setDescription('This table contains the firewall addresses that have been created by system and users')
fnFirewallAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 2, 2, 1, 1), ).setIndexNames((0, "FORTINET-MIB", "fnFirewallAddrName"))
if mibBuilder.loadTexts: fnFirewallAddrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: fnFirewallAddrEntry.setDescription('%%%')
fnFirewallAddrName = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 2, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFirewallAddrName.setStatus('mandatory')
if mibBuilder.loadTexts: fnFirewallAddrName.setDescription('Address name')
fnFirewallAddrIp = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 2, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFirewallAddrIp.setStatus('mandatory')
if mibBuilder.loadTexts: fnFirewallAddrIp.setDescription('Ip address of the address')
fnFirewallAddressNetmask = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 2, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFirewallAddressNetmask.setStatus('mandatory')
if mibBuilder.loadTexts: fnFirewallAddressNetmask.setDescription('Netmask of the address')
fnFirewallAddrZone = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 2, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFirewallAddrZone.setStatus('mandatory')
if mibBuilder.loadTexts: fnFirewallAddrZone.setDescription('Zone or interface that the address belongs to')
fnFirewallAddrVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFirewallAddrVlanId.setStatus('mandatory')
if mibBuilder.loadTexts: fnFirewallAddrVlanId.setDescription('The VLAN ID that the address belongs to')
fnFirewallAddrGrpTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 2, 2, 2), )
if mibBuilder.loadTexts: fnFirewallAddrGrpTable.setStatus('mandatory')
if mibBuilder.loadTexts: fnFirewallAddrGrpTable.setDescription('Description')
fnFirewallAddrGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 2, 2, 2, 1), ).setIndexNames((0, "FORTINET-MIB", "fnFirewallAddrGrpIndex"), (0, "FORTINET-MIB", "fnFirewallAddrGrpZone"), (0, "FORTINET-MIB", "fnFirewallAddrGrpName"))
if mibBuilder.loadTexts: fnFirewallAddrGrpEntry.setStatus('mandatory')
if mibBuilder.loadTexts: fnFirewallAddrGrpEntry.setDescription('Row Description')
fnFirewallAddrGrpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: fnFirewallAddrGrpIndex.setStatus('mandatory')
if mibBuilder.loadTexts: fnFirewallAddrGrpIndex.setDescription('Column Description')
fnFirewallAddrGrpZone = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 2, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFirewallAddrGrpZone.setStatus('mandatory')
if mibBuilder.loadTexts: fnFirewallAddrGrpZone.setDescription('Zone or interface name that the address group belongs to')
fnFirewallAddrGrpName = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 2, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)))
if mibBuilder.loadTexts: fnFirewallAddrGrpName.setStatus('mandatory')
if mibBuilder.loadTexts: fnFirewallAddrGrpName.setDescription('Firewall address group name')
fnFirewallAddrGrpMems = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 2, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 25555))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFirewallAddrGrpMems.setStatus('mandatory')
if mibBuilder.loadTexts: fnFirewallAddrGrpMems.setDescription('The addresse names that belong to the address group. The names need to be separated with a separator, such as ,')
fnFirewallServiceTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 2, 3, 1), )
if mibBuilder.loadTexts: fnFirewallServiceTable.setStatus('mandatory')
if mibBuilder.loadTexts: fnFirewallServiceTable.setDescription('%%%')
fnFirewallServiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 2, 3, 1, 1), ).setIndexNames((0, "FORTINET-MIB", "fnFirewallServiceIndex"))
if mibBuilder.loadTexts: fnFirewallServiceEntry.setStatus('mandatory')
if mibBuilder.loadTexts: fnFirewallServiceEntry.setDescription('%%%')
fnFirewallServiceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFirewallServiceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: fnFirewallServiceIndex.setDescription('%%%')
fnFirewallServiceName = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 3, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFirewallServiceName.setStatus('mandatory')
if mibBuilder.loadTexts: fnFirewallServiceName.setDescription('%%%')
fnFirewallServiceProto = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tcp", 1), ("udp", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFirewallServiceProto.setStatus('mandatory')
if mibBuilder.loadTexts: fnFirewallServiceProto.setDescription('The protocol the the service uses')
fnFirewallServiceUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("used", 1), ("unused", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFirewallServiceUsed.setStatus('mandatory')
if mibBuilder.loadTexts: fnFirewallServiceUsed.setDescription('%%%')
fnFirewallServiceSrcPortLow = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFirewallServiceSrcPortLow.setStatus('mandatory')
if mibBuilder.loadTexts: fnFirewallServiceSrcPortLow.setDescription('%%%')
fnFirewallServiceSrcPortHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFirewallServiceSrcPortHigh.setStatus('mandatory')
if mibBuilder.loadTexts: fnFirewallServiceSrcPortHigh.setDescription('%%%')
fnFirewallServiceDstPortLow = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFirewallServiceDstPortLow.setStatus('mandatory')
if mibBuilder.loadTexts: fnFirewallServiceDstPortLow.setDescription('%%%')
fnFirewallServiceDstPortHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFirewallServiceDstPortHigh.setStatus('mandatory')
if mibBuilder.loadTexts: fnFirewallServiceDstPortHigh.setDescription('%%%')
fnFirewallServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("predefined", 1), ("custom", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFirewallServiceType.setStatus('mandatory')
if mibBuilder.loadTexts: fnFirewallServiceType.setDescription('%%%')
fnFirewallServiceGroupTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 2, 3, 2), )
if mibBuilder.loadTexts: fnFirewallServiceGroupTable.setStatus('mandatory')
if mibBuilder.loadTexts: fnFirewallServiceGroupTable.setDescription('%%%')
fnFirewallServiceGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 2, 3, 2, 1), ).setIndexNames((0, "FORTINET-MIB", "fnFirewallServiceGroupIndex"))
if mibBuilder.loadTexts: fnFirewallServiceGroupEntry.setStatus('mandatory')
if mibBuilder.loadTexts: fnFirewallServiceGroupEntry.setDescription('%%%')
fnFirewallServiceGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFirewallServiceGroupIndex.setStatus('mandatory')
if mibBuilder.loadTexts: fnFirewallServiceGroupIndex.setDescription('%%%')
fnFirewallServiceGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 3, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFirewallServiceGroupName.setStatus('mandatory')
if mibBuilder.loadTexts: fnFirewallServiceGroupName.setDescription('%%%')
fnFirewallServiceGroupValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 3, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFirewallServiceGroupValue.setStatus('mandatory')
if mibBuilder.loadTexts: fnFirewallServiceGroupValue.setDescription('%%%')
fnFirewallServiceGroupUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("used", 1), ("unused", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFirewallServiceGroupUsed.setStatus('mandatory')
if mibBuilder.loadTexts: fnFirewallServiceGroupUsed.setDescription('%%%')
fnFirewallSchOneTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 2, 4, 1), )
if mibBuilder.loadTexts: fnFirewallSchOneTable.setStatus('mandatory')
if mibBuilder.loadTexts: fnFirewallSchOneTable.setDescription('%%%')
fnFirewallSchOneEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 2, 4, 1, 1), ).setIndexNames((0, "FORTINET-MIB", "fnFirewallSchOneIndex"))
if mibBuilder.loadTexts: fnFirewallSchOneEntry.setStatus('mandatory')
if mibBuilder.loadTexts: fnFirewallSchOneEntry.setDescription('%%%')
fnFirewallSchOneIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFirewallSchOneIndex.setStatus('mandatory')
if mibBuilder.loadTexts: fnFirewallSchOneIndex.setDescription('%%%')
fnFirewallSchOneName = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 4, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFirewallSchOneName.setStatus('mandatory')
if mibBuilder.loadTexts: fnFirewallSchOneName.setDescription('%%%')
fnFirewallSchOneStartDay = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 4, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFirewallSchOneStartDay.setStatus('mandatory')
if mibBuilder.loadTexts: fnFirewallSchOneStartDay.setDescription('%%%')
fnFirewallSchOneStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 4, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFirewallSchOneStartTime.setStatus('mandatory')
if mibBuilder.loadTexts: fnFirewallSchOneStartTime.setDescription('%%%')
fnFirewallSchOneEndDay = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 4, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFirewallSchOneEndDay.setStatus('mandatory')
if mibBuilder.loadTexts: fnFirewallSchOneEndDay.setDescription('%%%')
fnFirewallSchOneEndTime = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 4, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFirewallSchOneEndTime.setStatus('mandatory')
if mibBuilder.loadTexts: fnFirewallSchOneEndTime.setDescription('%%%')
fnFirewallSchOneUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("used", 1), ("unused", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFirewallSchOneUsed.setStatus('mandatory')
fnFirewallSchRecurTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 2, 4, 2), )
if mibBuilder.loadTexts: fnFirewallSchRecurTable.setStatus('mandatory')
if mibBuilder.loadTexts: fnFirewallSchRecurTable.setDescription('%%%')
fnFirewallSchRecurEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 2, 4, 2, 1), ).setIndexNames((0, "FORTINET-MIB", "fnFirewallSchRecurIndex"))
if mibBuilder.loadTexts: fnFirewallSchRecurEntry.setStatus('mandatory')
if mibBuilder.loadTexts: fnFirewallSchRecurEntry.setDescription('%%%')
fnFirewallSchRecurIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFirewallSchRecurIndex.setStatus('mandatory')
if mibBuilder.loadTexts: fnFirewallSchRecurIndex.setDescription('%%%')
fnFirewallSchRecurName = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 4, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFirewallSchRecurName.setStatus('mandatory')
if mibBuilder.loadTexts: fnFirewallSchRecurName.setDescription('%%%')
fnFirewallSchRecurWeekdays = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 4, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFirewallSchRecurWeekdays.setStatus('mandatory')
if mibBuilder.loadTexts: fnFirewallSchRecurWeekdays.setDescription('%%%')
fnFirewallSchRecurStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 4, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFirewallSchRecurStartTime.setStatus('mandatory')
if mibBuilder.loadTexts: fnFirewallSchRecurStartTime.setDescription('%%%')
fnFirewallSchRecurEndTime = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 4, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFirewallSchRecurEndTime.setStatus('mandatory')
if mibBuilder.loadTexts: fnFirewallSchRecurEndTime.setDescription('%%%')
fnFirewallSchRecurUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 4, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("used", 1), ("unused", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFirewallSchRecurUsed.setStatus('mandatory')
fnFirewallVIPTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 2, 5, 1), )
if mibBuilder.loadTexts: fnFirewallVIPTable.setStatus('mandatory')
if mibBuilder.loadTexts: fnFirewallVIPTable.setDescription('%%%')
fnFirewallVIPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 2, 5, 1, 1), ).setIndexNames((0, "FORTINET-MIB", "fnFirewallVIPIndex"))
if mibBuilder.loadTexts: fnFirewallVIPEntry.setStatus('mandatory')
if mibBuilder.loadTexts: fnFirewallVIPEntry.setDescription('%%%')
fnFirewallVIPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFirewallVIPIndex.setStatus('mandatory')
if mibBuilder.loadTexts: fnFirewallVIPIndex.setDescription('%%%')
fnFirewallVIPName = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 5, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFirewallVIPName.setStatus('mandatory')
if mibBuilder.loadTexts: fnFirewallVIPName.setDescription('%%%')
fnFirewallVIPExtIf = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 5, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFirewallVIPExtIf.setStatus('mandatory')
if mibBuilder.loadTexts: fnFirewallVIPExtIf.setDescription('External inerface of the VIP')
fnFirewallVIPType = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("staticNat", 1), ("portForwarding", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFirewallVIPType.setStatus('mandatory')
if mibBuilder.loadTexts: fnFirewallVIPType.setDescription('%%%')
fnFirewallVIPExtIP = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 5, 1, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFirewallVIPExtIP.setStatus('mandatory')
if mibBuilder.loadTexts: fnFirewallVIPExtIP.setDescription('%%%')
fnFirewallVIPExtPort = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFirewallVIPExtPort.setStatus('mandatory')
if mibBuilder.loadTexts: fnFirewallVIPExtPort.setDescription('Description')
fnFirewallVIPMapIP = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 5, 1, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFirewallVIPMapIP.setStatus('mandatory')
if mibBuilder.loadTexts: fnFirewallVIPMapIP.setDescription('Description')
fnFirewallVIPMapPort = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 5, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFirewallVIPMapPort.setStatus('mandatory')
if mibBuilder.loadTexts: fnFirewallVIPMapPort.setDescription('Description')
fnFirewallVIPProto = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 5, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tcp", 1), ("udp", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFirewallVIPProto.setStatus('mandatory')
if mibBuilder.loadTexts: fnFirewallVIPProto.setDescription('Description')
fnFirewallIpPoolTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 2, 6, 1), )
if mibBuilder.loadTexts: fnFirewallIpPoolTable.setStatus('mandatory')
if mibBuilder.loadTexts: fnFirewallIpPoolTable.setDescription('Description')
fnFirewallIpPoolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 2, 6, 1, 1), ).setIndexNames((0, "FORTINET-MIB", "fnFirewallIpPoolIndex"))
if mibBuilder.loadTexts: fnFirewallIpPoolEntry.setStatus('mandatory')
if mibBuilder.loadTexts: fnFirewallIpPoolEntry.setDescription('Row Description')
fnFirewallIpPoolIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: fnFirewallIpPoolIndex.setStatus('mandatory')
if mibBuilder.loadTexts: fnFirewallIpPoolIndex.setDescription('Column Description')
fnFirewallIpPoolIf = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 6, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFirewallIpPoolIf.setStatus('mandatory')
if mibBuilder.loadTexts: fnFirewallIpPoolIf.setDescription('The interface to which the pool belongs')
fnFirewallIpPoolStartIp = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 6, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFirewallIpPoolStartIp.setStatus('mandatory')
if mibBuilder.loadTexts: fnFirewallIpPoolStartIp.setDescription('Start IP address of the pool')
fnFirewallIpPoolEndIp = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 6, 1, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFirewallIpPoolEndIp.setStatus('mandatory')
if mibBuilder.loadTexts: fnFirewallIpPoolEndIp.setDescription('End IP address of the pool')
fnFirewallIPMACBindingTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 2, 7, 1), )
if mibBuilder.loadTexts: fnFirewallIPMACBindingTable.setStatus('mandatory')
if mibBuilder.loadTexts: fnFirewallIPMACBindingTable.setDescription('%%%')
fnFirewallIPMACBindingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 2, 7, 1, 1), ).setIndexNames((0, "FORTINET-MIB", "fnFirewallIPMACIndex"))
if mibBuilder.loadTexts: fnFirewallIPMACBindingEntry.setStatus('mandatory')
if mibBuilder.loadTexts: fnFirewallIPMACBindingEntry.setDescription('%%%')
fnFirewallIPMACIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 7, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFirewallIPMACIndex.setStatus('mandatory')
if mibBuilder.loadTexts: fnFirewallIPMACIndex.setDescription('%%%')
fnFirewallIPMACName = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 7, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFirewallIPMACName.setStatus('mandatory')
if mibBuilder.loadTexts: fnFirewallIPMACName.setDescription('Description')
fnFirewallIPMACIp = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 7, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFirewallIPMACIp.setStatus('mandatory')
if mibBuilder.loadTexts: fnFirewallIPMACIp.setDescription('%%%')
fnFirewallIPMACMac = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 7, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFirewallIPMACMac.setStatus('mandatory')
if mibBuilder.loadTexts: fnFirewallIPMACMac.setDescription('%%%')
fnFirewallIPMACState = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 7, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFirewallIPMACState.setStatus('mandatory')
if mibBuilder.loadTexts: fnFirewallIPMACState.setDescription('The state of the the IPMAC binding entry')
fnFirewallIPMACStatus = MibScalar((1, 3, 6, 1, 4, 1, 12356, 2, 7, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFirewallIPMACStatus.setStatus('mandatory')
if mibBuilder.loadTexts: fnFirewallIPMACStatus.setDescription('%%%')
fnFirewallIPMACAction = MibScalar((1, 3, 6, 1, 4, 1, 12356, 2, 7, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("block", 0), ("pass", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFirewallIPMACAction.setStatus('mandatory')
if mibBuilder.loadTexts: fnFirewallIPMACAction.setDescription('%%%')
fnFirewallIPMACToFw = MibScalar((1, 3, 6, 1, 4, 1, 12356, 2, 7, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFirewallIPMACToFw.setStatus('mandatory')
if mibBuilder.loadTexts: fnFirewallIPMACToFw.setDescription('Enable or disable IP/MAC binding going to the firewall')
fnFirewallIPMACThruFw = MibScalar((1, 3, 6, 1, 4, 1, 12356, 2, 7, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("enable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFirewallIPMACThruFw.setStatus('mandatory')
if mibBuilder.loadTexts: fnFirewallIPMACThruFw.setDescription('Enable or disable IP/MAC binding going through the firewall')
fnFirewallIPMACTraffic = MibScalar((1, 3, 6, 1, 4, 1, 12356, 2, 7, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allow", 1), ("block", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFirewallIPMACTraffic.setStatus('mandatory')
if mibBuilder.loadTexts: fnFirewallIPMACTraffic.setDescription('For hosts not defined in IPMAC binding table, allow or block the traffic')
fnFwContProfTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 2, 8, 1), )
if mibBuilder.loadTexts: fnFwContProfTable.setStatus('mandatory')
if mibBuilder.loadTexts: fnFwContProfTable.setDescription('Content profile table')
fnFwContProfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 2, 8, 1, 1), ).setIndexNames((0, "FORTINET-MIB", "fnFwContProfName"))
if mibBuilder.loadTexts: fnFwContProfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: fnFwContProfEntry.setDescription('Row Description')
fnFwContProfName = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 8, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255)))
if mibBuilder.loadTexts: fnFwContProfName.setStatus('mandatory')
if mibBuilder.loadTexts: fnFwContProfName.setDescription('Column Description')
fnFwContProfAvScan = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 8, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFwContProfAvScan.setStatus('mandatory')
if mibBuilder.loadTexts: fnFwContProfAvScan.setDescription('Column Description')
fnFwContProfFileBlk = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 8, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFwContProfFileBlk.setStatus('mandatory')
if mibBuilder.loadTexts: fnFwContProfFileBlk.setDescription('Column Description')
fnFwContProfQuarantine = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 8, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFwContProfQuarantine.setStatus('mandatory')
if mibBuilder.loadTexts: fnFwContProfQuarantine.setDescription('Description')
fnFwContProfUrlBlkState = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 8, 1, 1, 5), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFwContProfUrlBlkState.setStatus('mandatory')
if mibBuilder.loadTexts: fnFwContProfUrlBlkState.setDescription('Description')
fnFwContProfBannedWordState = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 8, 1, 1, 6), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFwContProfBannedWordState.setStatus('mandatory')
if mibBuilder.loadTexts: fnFwContProfBannedWordState.setDescription('Description')
fnFwContProfRemvScriptState = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 8, 1, 1, 7), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFwContProfRemvScriptState.setStatus('mandatory')
if mibBuilder.loadTexts: fnFwContProfRemvScriptState.setDescription('Remove script')
fnFwContProfExptListState = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 8, 1, 1, 8), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFwContProfExptListState.setStatus('mandatory')
if mibBuilder.loadTexts: fnFwContProfExptListState.setDescription('Exempt list')
fnFwContProfSpamFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 8, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFwContProfSpamFilter.setStatus('mandatory')
if mibBuilder.loadTexts: fnFwContProfSpamFilter.setDescription('Description')
fnFwContProfSpamBlkList = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 8, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFwContProfSpamBlkList.setStatus('mandatory')
if mibBuilder.loadTexts: fnFwContProfSpamBlkList.setDescription('Description')
fnFwContProfSpamExptList = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 8, 1, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFwContProfSpamExptList.setStatus('mandatory')
if mibBuilder.loadTexts: fnFwContProfSpamExptList.setDescription('Description')
fnFwContProfSpamBanWord = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 8, 1, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFwContProfSpamBanWord.setStatus('mandatory')
if mibBuilder.loadTexts: fnFwContProfSpamBanWord.setDescription('Description')
fnFwContProfBigFileBlk = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 8, 1, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFwContProfBigFileBlk.setStatus('mandatory')
if mibBuilder.loadTexts: fnFwContProfBigFileBlk.setDescription('Description')
fnFwContProfPassFragEmail = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 8, 1, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFwContProfPassFragEmail.setStatus('mandatory')
if mibBuilder.loadTexts: fnFwContProfPassFragEmail.setDescription('Description')
fnVpnIKETable = MibTable((1, 3, 6, 1, 4, 1, 12356, 4, 1, 2), )
if mibBuilder.loadTexts: fnVpnIKETable.setStatus('mandatory')
if mibBuilder.loadTexts: fnVpnIKETable.setDescription('%%%')
fnVpnIKEEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 4, 1, 2, 1), ).setIndexNames((0, "FORTINET-MIB", "fnVpnIKEIndex"))
if mibBuilder.loadTexts: fnVpnIKEEntry.setStatus('mandatory')
if mibBuilder.loadTexts: fnVpnIKEEntry.setDescription('%%%')
fnVpnIKEIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnIKEIndex.setStatus('mandatory')
if mibBuilder.loadTexts: fnVpnIKEIndex.setDescription('%%%')
fnVpnIKEName = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnIKEName.setStatus('mandatory')
if mibBuilder.loadTexts: fnVpnIKEName.setDescription('%%%')
fnVpnIKEGW1 = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 1, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnIKEGW1.setStatus('mandatory')
if mibBuilder.loadTexts: fnVpnIKEGW1.setDescription('Remote gateway 1')
fnVpnIKEPh2Encrp1 = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 1, 2, 1, 5), EncrytionAlgorithm()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnIKEPh2Encrp1.setStatus('mandatory')
if mibBuilder.loadTexts: fnVpnIKEPh2Encrp1.setDescription('Phase 2 encryption 1')
fnVpnIKEPh2Auth1 = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 1, 2, 1, 6), AuthAlgorithm()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnIKEPh2Auth1.setStatus('mandatory')
if mibBuilder.loadTexts: fnVpnIKEPh2Auth1.setDescription('Phase 2 authentication 1')
fnVpnIKEPh2Encrp2 = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 1, 2, 1, 7), EncrytionAlgorithm()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnIKEPh2Encrp2.setStatus('mandatory')
if mibBuilder.loadTexts: fnVpnIKEPh2Encrp2.setDescription('Phase 2 encryption 2')
fnVpnIKEPh2Auth2 = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 1, 2, 1, 8), AuthAlgorithm()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnIKEPh2Auth2.setStatus('mandatory')
if mibBuilder.loadTexts: fnVpnIKEPh2Auth2.setDescription('Phase 2 authentication 2')
fnVpnIKEPh2Encrp3 = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 1, 2, 1, 9), EncrytionAlgorithm()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnIKEPh2Encrp3.setStatus('mandatory')
if mibBuilder.loadTexts: fnVpnIKEPh2Encrp3.setDescription('Phase 2 encryption 3')
fnVpnIKEPh2Auth3 = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 1, 2, 1, 10), AuthAlgorithm()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnIKEPh2Auth3.setStatus('mandatory')
if mibBuilder.loadTexts: fnVpnIKEPh2Auth3.setDescription('Phase 2 authentication 3')
fnVpnIKEReplayDet = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 1, 2, 1, 11), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnIKEReplayDet.setStatus('mandatory')
if mibBuilder.loadTexts: fnVpnIKEReplayDet.setDescription('Replay detection')
fnVpnIKEPFSState = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 1, 2, 1, 12), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnIKEPFSState.setStatus('mandatory')
if mibBuilder.loadTexts: fnVpnIKEPFSState.setDescription('PFS state')
fnVpnIKEDHGrp = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 1, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 5))).clone(namedValues=NamedValues(("group1", 1), ("group2", 2), ("group5", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnIKEDHGrp.setStatus('mandatory')
if mibBuilder.loadTexts: fnVpnIKEDHGrp.setDescription('DH group')
fnVpnIKEKeylifeType = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 1, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("seconds", 1), ("kbs", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnIKEKeylifeType.setStatus('mandatory')
if mibBuilder.loadTexts: fnVpnIKEKeylifeType.setDescription('Keylife type')
fnVpnIKEKLifeSec = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 1, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(180, 700000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnIKEKLifeSec.setStatus('mandatory')
if mibBuilder.loadTexts: fnVpnIKEKLifeSec.setDescription('%%%')
fnVpnIKEKeylifeKb = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 1, 2, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(300, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnIKEKeylifeKb.setStatus('mandatory')
if mibBuilder.loadTexts: fnVpnIKEKeylifeKb.setDescription('%%%')
fnVpnIKEKeepAlive = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 1, 2, 1, 17), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnIKEKeepAlive.setStatus('mandatory')
if mibBuilder.loadTexts: fnVpnIKEKeepAlive.setDescription('Auto key keep alive')
fnVpnIKEGW2 = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 1, 2, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnIKEGW2.setStatus('mandatory')
if mibBuilder.loadTexts: fnVpnIKEGW2.setDescription('Remote gateway 2')
fnVpnIKEGW3 = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 1, 2, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnIKEGW3.setStatus('mandatory')
if mibBuilder.loadTexts: fnVpnIKEGW3.setDescription('Remote gateway 3')
fnVpnIKEConcentrator = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 1, 2, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnIKEConcentrator.setStatus('mandatory')
if mibBuilder.loadTexts: fnVpnIKEConcentrator.setDescription('Description')
fnVpnIKEStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 1, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnIKEStatus.setStatus('mandatory')
if mibBuilder.loadTexts: fnVpnIKEStatus.setDescription('The status of the tunnel')
fnVpnIKETimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 1, 2, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnIKETimeout.setStatus('mandatory')
if mibBuilder.loadTexts: fnVpnIKETimeout.setDescription('the time before the next key exchange in seconds')
fnVpnManualKeyTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 4, 1, 3), )
if mibBuilder.loadTexts: fnVpnManualKeyTable.setStatus('mandatory')
if mibBuilder.loadTexts: fnVpnManualKeyTable.setDescription('%%%')
fnVpnManualKeyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 4, 1, 3, 1), ).setIndexNames((0, "FORTINET-MIB", "fnVpnManualKeyIndex"))
if mibBuilder.loadTexts: fnVpnManualKeyEntry.setStatus('mandatory')
if mibBuilder.loadTexts: fnVpnManualKeyEntry.setDescription('%%%')
fnVpnManualKeyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnManualKeyIndex.setStatus('mandatory')
if mibBuilder.loadTexts: fnVpnManualKeyIndex.setDescription('%%%')
fnVpnManualKeyName = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 1, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnManualKeyName.setStatus('mandatory')
if mibBuilder.loadTexts: fnVpnManualKeyName.setDescription('%%%')
fnVpnManualKeyEngage = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnManualKeyEngage.setStatus('mandatory')
if mibBuilder.loadTexts: fnVpnManualKeyEngage.setDescription('%%%')
fnVpnManualKeyLocalSPI = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 1, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnManualKeyLocalSPI.setStatus('mandatory')
if mibBuilder.loadTexts: fnVpnManualKeyLocalSPI.setDescription('%%%')
fnVpnManualKeyRemoteSPI = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 1, 3, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnManualKeyRemoteSPI.setStatus('mandatory')
if mibBuilder.loadTexts: fnVpnManualKeyRemoteSPI.setDescription('%%%')
fnVpnManualKeyRgw = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 1, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnManualKeyRgw.setStatus('mandatory')
if mibBuilder.loadTexts: fnVpnManualKeyRgw.setDescription('%%%')
fnVpnManualKeyReplayDet = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 1, 3, 1, 7), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnManualKeyReplayDet.setStatus('mandatory')
if mibBuilder.loadTexts: fnVpnManualKeyReplayDet.setDescription('Replay detection')
fnVpnManualKeyEncrpAlgorithm = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 1, 3, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnManualKeyEncrpAlgorithm.setStatus('mandatory')
if mibBuilder.loadTexts: fnVpnManualKeyEncrpAlgorithm.setDescription('Encryption Algorithm')
fnVpnManualKeyConcentrator = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 1, 3, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnManualKeyConcentrator.setStatus('mandatory')
if mibBuilder.loadTexts: fnVpnManualKeyConcentrator.setDescription('%%%')
fnVpnRemoteGWTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 4, 1, 4), )
if mibBuilder.loadTexts: fnVpnRemoteGWTable.setStatus('mandatory')
if mibBuilder.loadTexts: fnVpnRemoteGWTable.setDescription('Description')
fnVpnRemoteGWEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 4, 1, 4, 1), ).setIndexNames((0, "FORTINET-MIB", "fnVpnRemoteGWIndex"))
if mibBuilder.loadTexts: fnVpnRemoteGWEntry.setStatus('mandatory')
if mibBuilder.loadTexts: fnVpnRemoteGWEntry.setDescription('Row Description')
fnVpnRemoteGWIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: fnVpnRemoteGWIndex.setStatus('mandatory')
if mibBuilder.loadTexts: fnVpnRemoteGWIndex.setDescription('Column Description')
fnVpnRemoteGWName = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 1, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnRemoteGWName.setStatus('mandatory')
if mibBuilder.loadTexts: fnVpnRemoteGWName.setDescription('Column Description')
fnVpnRemoteGWIp = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 1, 4, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnRemoteGWIp.setStatus('mandatory')
if mibBuilder.loadTexts: fnVpnRemoteGWIp.setDescription('This entry is valid only when remote gateway type is set to staticIP')
fnVpnRemoteGWMode = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("main", 1), ("aggressive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnRemoteGWMode.setStatus('mandatory')
if mibBuilder.loadTexts: fnVpnRemoteGWMode.setDescription('Description')
fnVpnRemoteGWPh1Encrp1 = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 1, 4, 1, 5), EncrytionAlgorithm()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnRemoteGWPh1Encrp1.setStatus('mandatory')
if mibBuilder.loadTexts: fnVpnRemoteGWPh1Encrp1.setDescription('Description')
fnVpnRemoteGWPh1Auth1 = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 1, 4, 1, 6), AuthAlgorithm()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnRemoteGWPh1Auth1.setStatus('mandatory')
if mibBuilder.loadTexts: fnVpnRemoteGWPh1Auth1.setDescription('Description')
fnVpnRemoteGWPh1Encrp2 = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 1, 4, 1, 7), EncrytionAlgorithm()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnRemoteGWPh1Encrp2.setStatus('mandatory')
if mibBuilder.loadTexts: fnVpnRemoteGWPh1Encrp2.setDescription('Description')
fnVpnRemoteGWPh1Auth2 = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 1, 4, 1, 8), AuthAlgorithm()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnRemoteGWPh1Auth2.setStatus('mandatory')
if mibBuilder.loadTexts: fnVpnRemoteGWPh1Auth2.setDescription('Description')
fnVpnRemoteGWPh1Encrp3 = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 1, 4, 1, 9), EncrytionAlgorithm()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnRemoteGWPh1Encrp3.setStatus('mandatory')
if mibBuilder.loadTexts: fnVpnRemoteGWPh1Encrp3.setDescription('Description')
fnVpnRemoteGWPh1Auth3 = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 1, 4, 1, 10), AuthAlgorithm()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnRemoteGWPh1Auth3.setStatus('mandatory')
if mibBuilder.loadTexts: fnVpnRemoteGWPh1Auth3.setDescription('Description')
fnVpnRemoteGWDhGrp = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 1, 4, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 5))).clone(namedValues=NamedValues(("group1", 1), ("group2", 2), ("group5", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnRemoteGWDhGrp.setStatus('mandatory')
if mibBuilder.loadTexts: fnVpnRemoteGWDhGrp.setDescription('Description')
fnVpnRemoteGWKeylife = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 1, 4, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(180, 180000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnRemoteGWKeylife.setStatus('mandatory')
if mibBuilder.loadTexts: fnVpnRemoteGWKeylife.setDescription('Keylife in seconds')
fnVpnRemoteGWPreKey = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 1, 4, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnRemoteGWPreKey.setStatus('mandatory')
if mibBuilder.loadTexts: fnVpnRemoteGWPreKey.setDescription('Pre-shared key value. The entry is valid when the authentication method is selected as Preshared-Key')
fnVpnRemoteGWLocalID = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 1, 4, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnRemoteGWLocalID.setStatus('optional')
if mibBuilder.loadTexts: fnVpnRemoteGWLocalID.setDescription('Description')
fnVpnRemoteGWNatT = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 1, 4, 1, 15), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnRemoteGWNatT.setStatus('mandatory')
if mibBuilder.loadTexts: fnVpnRemoteGWNatT.setDescription('Turn on/off Nat traversal')
fnVpnRemoteGWKAFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 1, 4, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnRemoteGWKAFreq.setStatus('mandatory')
if mibBuilder.loadTexts: fnVpnRemoteGWKAFreq.setDescription('Keep alive frequency in seconds')
fnVpnRemoteGWType = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 1, 4, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("staticIP", 1), ("dialupUser", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnRemoteGWType.setStatus('mandatory')
if mibBuilder.loadTexts: fnVpnRemoteGWType.setDescription('The remote gateway type.')
fnVpnRemoteGWUserGrp = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 1, 4, 1, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnRemoteGWUserGrp.setStatus('mandatory')
if mibBuilder.loadTexts: fnVpnRemoteGWUserGrp.setDescription('This entry is valid only when remote gateway type is dialUpUser')
fnVpnRemoteGWAuthMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 1, 4, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("preshared-key", 1), ("rsa", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnRemoteGWAuthMethod.setStatus('mandatory')
if mibBuilder.loadTexts: fnVpnRemoteGWAuthMethod.setDescription('Authentication method')
fnVpnRemoteGWCertName = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 1, 4, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("preshared-key", 1), ("rsa", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnRemoteGWCertName.setStatus('mandatory')
if mibBuilder.loadTexts: fnVpnRemoteGWCertName.setDescription('Certificate name. This entry is valid when authentication method is selected as RSA-Signature')
fnVpnRemoteGWPeerOpt = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 1, 4, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("acceptAnyPeerId", 1), ("acceptThisPeerId", 2), ("acceptPeerIdInGrp", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnRemoteGWPeerOpt.setStatus('mandatory')
if mibBuilder.loadTexts: fnVpnRemoteGWPeerOpt.setDescription('Peer option')
fnVpnRemoteGWPeerGrpName = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 1, 4, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("acceptAnyPeerId", 1), ("acceptThisPeerId", 2), ("acceptPeerIdInGrp", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnRemoteGWPeerGrpName.setStatus('mandatory')
if mibBuilder.loadTexts: fnVpnRemoteGWPeerGrpName.setDescription('When peer option is chosen as acceptPeerIdInDialupGroup, this entry is the dialup group name.')
fnVpnRemoteGWPeerId = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 1, 4, 1, 23), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnRemoteGWPeerId.setStatus('mandatory')
if mibBuilder.loadTexts: fnVpnRemoteGWPeerId.setDescription('When peer option is chosen as acceptThisPeerID, this is the peer ID that is to be accepted.')
fnVpnRemoteGWXAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 1, 4, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enableAsClient", 1), ("enableAsServer", 2), ("diable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnRemoteGWXAuth.setStatus('mandatory')
if mibBuilder.loadTexts: fnVpnRemoteGWXAuth.setDescription('When Remote Gateway is static IP, user can select either Disable, Enable as Client or Enable as Server in XAuth. In Enable as Client, user will have to enter the username and the passwords. In Enable as Server, user will have to select from PAP or CHAP. When Remote Gateway is Dialup user, user can select either Disable or Enable as Server (Enable as Client will be disabled). In Enable as Server, user will have to enter the username and the passwords.')
fnVpnRemoteGWXAuthUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 1, 4, 1, 25), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnRemoteGWXAuthUserName.setStatus('mandatory')
if mibBuilder.loadTexts: fnVpnRemoteGWXAuthUserName.setDescription('Description')
fnVpnRemoteGWXAuthPasswd = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 1, 4, 1, 26), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnRemoteGWXAuthPasswd.setStatus('mandatory')
if mibBuilder.loadTexts: fnVpnRemoteGWXAuthPasswd.setDescription('Description')
fnVpnRemoteGWXAuthPap = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 1, 4, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("pap", 1), ("chap", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnRemoteGWXAuthPap.setStatus('mandatory')
if mibBuilder.loadTexts: fnVpnRemoteGWXAuthPap.setDescription('Description')
fnVpnRemoteGWDeadPeerDet = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 1, 4, 1, 28), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnRemoteGWDeadPeerDet.setStatus('mandatory')
if mibBuilder.loadTexts: fnVpnRemoteGWDeadPeerDet.setDescription('Turn on/off dead peer detection')
fnVpnRemoteGWDpdIdleWorry = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 1, 4, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnRemoteGWDpdIdleWorry.setStatus('mandatory')
if mibBuilder.loadTexts: fnVpnRemoteGWDpdIdleWorry.setDescription('There are four options in Dead Peer Detection: Idle Worry, Retry Count, Retry Interval and Idle Cleanup')
fnVpnRemoteGWDpdRetryCound = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 1, 4, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnRemoteGWDpdRetryCound.setStatus('mandatory')
if mibBuilder.loadTexts: fnVpnRemoteGWDpdRetryCound.setDescription('There are four options in Dead Peer Detection: Idle Worry, Retry Count, Retry Interval and Idle Cleanup')
fnVpnRemoteGWDpdRetryInt = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 1, 4, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnRemoteGWDpdRetryInt.setStatus('mandatory')
if mibBuilder.loadTexts: fnVpnRemoteGWDpdRetryInt.setDescription('There are four options in Dead Peer Detection: Idle Worry, Retry Count, Retry Interval and Idle Cleanup')
fnVpnRemoteGWDpdIdleCleanup = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 1, 4, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnRemoteGWDpdIdleCleanup.setStatus('mandatory')
if mibBuilder.loadTexts: fnVpnRemoteGWDpdIdleCleanup.setDescription('There are four options in Dead Peer Detection: Idle Worry, Retry Count, Retry Interval and Idle Cleanup')
fnVpnConTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 4, 1, 5), )
if mibBuilder.loadTexts: fnVpnConTable.setStatus('mandatory')
if mibBuilder.loadTexts: fnVpnConTable.setDescription('VPN Concentrator table')
fnVpnConEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 4, 1, 5, 1), ).setIndexNames((0, "FORTINET-MIB", "fnVpnConIndex"))
if mibBuilder.loadTexts: fnVpnConEntry.setStatus('mandatory')
if mibBuilder.loadTexts: fnVpnConEntry.setDescription('VPN concentrator entry')
fnVpnConIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: fnVpnConIndex.setStatus('mandatory')
if mibBuilder.loadTexts: fnVpnConIndex.setDescription('Column Description')
fnVpnConName = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 1, 5, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnConName.setStatus('mandatory')
if mibBuilder.loadTexts: fnVpnConName.setDescription('Concentrator name')
fnVpnConMembers = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 1, 5, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnConMembers.setStatus('mandatory')
if mibBuilder.loadTexts: fnVpnConMembers.setDescription('VPN concentrator members. The names need to be separated by a separator, such as a ,.')
fnVpnDialupMonTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 4, 1, 6), )
if mibBuilder.loadTexts: fnVpnDialupMonTable.setStatus('mandatory')
if mibBuilder.loadTexts: fnVpnDialupMonTable.setDescription('Dialup monitor table')
fnVpnDialupMonEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 4, 1, 6, 1), ).setIndexNames((0, "FORTINET-MIB", "fnVpnDialupMonIndex"))
if mibBuilder.loadTexts: fnVpnDialupMonEntry.setStatus('mandatory')
if mibBuilder.loadTexts: fnVpnDialupMonEntry.setDescription('Row Description')
fnVpnDialupMonIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: fnVpnDialupMonIndex.setStatus('mandatory')
if mibBuilder.loadTexts: fnVpnDialupMonIndex.setDescription('Column Description')
fnVpnDialupMonRGwName = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 1, 6, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnDialupMonRGwName.setStatus('mandatory')
if mibBuilder.loadTexts: fnVpnDialupMonRGwName.setDescription('Remote gateway name')
fnVpnDialupMonLifetime = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 1, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnDialupMonLifetime.setStatus('mandatory')
if mibBuilder.loadTexts: fnVpnDialupMonLifetime.setDescription('Dialup VPN life time in seconds')
fnVpnDialupMonTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 1, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnDialupMonTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: fnVpnDialupMonTimeout.setDescription('time before the next key exchange in seconds')
fnVpnDialupMonProxyIdSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 1, 6, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnDialupMonProxyIdSrc.setStatus('mandatory')
if mibBuilder.loadTexts: fnVpnDialupMonProxyIdSrc.setDescription('actual IP address or subnet address of the remote peer')
fnVpnDialupMonProxyIdDst = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 1, 6, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnDialupMonProxyIdDst.setStatus('mandatory')
if mibBuilder.loadTexts: fnVpnDialupMonProxyIdDst.setDescription('the actual IP address or subnet address of the local peer.')
fnVpnPPTPStatus = MibScalar((1, 3, 6, 1, 4, 1, 12356, 4, 2, 1), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnPPTPStatus.setStatus('mandatory')
if mibBuilder.loadTexts: fnVpnPPTPStatus.setDescription('%%%')
fnVpnPPTPUserGrp = MibScalar((1, 3, 6, 1, 4, 1, 12356, 4, 2, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnPPTPUserGrp.setStatus('mandatory')
if mibBuilder.loadTexts: fnVpnPPTPUserGrp.setDescription('PPTP user group')
fnVpnPPTPStartIp = MibScalar((1, 3, 6, 1, 4, 1, 12356, 4, 2, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnPPTPStartIp.setStatus('mandatory')
if mibBuilder.loadTexts: fnVpnPPTPStartIp.setDescription('Starting IP of the PPTP range')
fnVpnPPTPEndIp = MibScalar((1, 3, 6, 1, 4, 1, 12356, 4, 2, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnPPTPEndIp.setStatus('mandatory')
if mibBuilder.loadTexts: fnVpnPPTPEndIp.setDescription('Ending IP of the PPTP range')
fnVpnL2TPStatus = MibScalar((1, 3, 6, 1, 4, 1, 12356, 4, 3, 1), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnL2TPStatus.setStatus('mandatory')
if mibBuilder.loadTexts: fnVpnL2TPStatus.setDescription('L2TP status')
fnVpnL2TPUserGrp = MibScalar((1, 3, 6, 1, 4, 1, 12356, 4, 3, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnL2TPUserGrp.setStatus('mandatory')
if mibBuilder.loadTexts: fnVpnL2TPUserGrp.setDescription('L2TP user group')
fnVpnL2TPStartIp = MibScalar((1, 3, 6, 1, 4, 1, 12356, 4, 3, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnL2TPStartIp.setStatus('mandatory')
if mibBuilder.loadTexts: fnVpnL2TPStartIp.setDescription('Starting IP of L2TP range')
fnVpnL2TPEndIp = MibScalar((1, 3, 6, 1, 4, 1, 12356, 4, 3, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnL2TPEndIp.setStatus('mandatory')
if mibBuilder.loadTexts: fnVpnL2TPEndIp.setDescription('Ending IP of L2TP range')
fnVpnCertTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 4, 4, 1), )
if mibBuilder.loadTexts: fnVpnCertTable.setStatus('mandatory')
if mibBuilder.loadTexts: fnVpnCertTable.setDescription('Local certificates table')
fnVpnCertEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 4, 4, 1, 1), ).setIndexNames((0, "FORTINET-MIB", "fnVpnCertName"))
if mibBuilder.loadTexts: fnVpnCertEntry.setStatus('mandatory')
if mibBuilder.loadTexts: fnVpnCertEntry.setDescription('Row Description')
fnVpnCertName = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647)))
if mibBuilder.loadTexts: fnVpnCertName.setStatus('mandatory')
if mibBuilder.loadTexts: fnVpnCertName.setDescription('Local certificate name')
fnVpnCertIssuer = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 4, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnCertIssuer.setStatus('mandatory')
if mibBuilder.loadTexts: fnVpnCertIssuer.setDescription('Column Description')
fnVpnCertCommonName = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 4, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnCertCommonName.setStatus('mandatory')
if mibBuilder.loadTexts: fnVpnCertCommonName.setDescription('Column Description')
fnVpnCertType = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 4, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnCertType.setStatus('mandatory')
if mibBuilder.loadTexts: fnVpnCertType.setDescription('Description')
fnVpnCertSerialNo = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnCertSerialNo.setStatus('mandatory')
if mibBuilder.loadTexts: fnVpnCertSerialNo.setDescription('Description')
fnVpnCertExpDate = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 4, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnCertExpDate.setStatus('mandatory')
if mibBuilder.loadTexts: fnVpnCertExpDate.setDescription('Expiry date')
fnVpnCertStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("pending", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnCertStatus.setStatus('mandatory')
if mibBuilder.loadTexts: fnVpnCertStatus.setDescription('Description')
fnNidsGen = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 5, 1, 1))
fnNidsSigTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 5, 1, 2), )
if mibBuilder.loadTexts: fnNidsSigTable.setStatus('mandatory')
if mibBuilder.loadTexts: fnNidsSigTable.setDescription('Attack signature table')
fnNidsSigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 5, 1, 2, 1), ).setIndexNames((0, "FORTINET-MIB", "fnNidsSigGrpName"), (0, "FORTINET-MIB", "fnNidsSigAttackId"))
if mibBuilder.loadTexts: fnNidsSigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: fnNidsSigEntry.setDescription('Row Description')
fnNidsSigGrpName = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 5, 1, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255)))
if mibBuilder.loadTexts: fnNidsSigGrpName.setStatus('mandatory')
if mibBuilder.loadTexts: fnNidsSigGrpName.setDescription('Sinature group name')
fnNidsSigAttackId = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 5, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: fnNidsSigAttackId.setStatus('mandatory')
if mibBuilder.loadTexts: fnNidsSigAttackId.setDescription('Attack ID')
fnNidsSigAttackName = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 5, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnNidsSigAttackName.setStatus('mandatory')
if mibBuilder.loadTexts: fnNidsSigAttackName.setDescription('Attack name')
fnNidsSigAttackRuleState = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 5, 1, 2, 1, 4), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnNidsSigAttackRuleState.setStatus('mandatory')
if mibBuilder.loadTexts: fnNidsSigAttackRuleState.setDescription('Turn on/off this type of attack checking')
fnNidsSigUserDefTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 5, 1, 3), )
if mibBuilder.loadTexts: fnNidsSigUserDefTable.setStatus('mandatory')
if mibBuilder.loadTexts: fnNidsSigUserDefTable.setDescription('User defined signature table')
fnNidsSigUserDefEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 5, 1, 3, 1), ).setIndexNames((0, "FORTINET-MIB", "fnNidsSigUserDefName"))
if mibBuilder.loadTexts: fnNidsSigUserDefEntry.setStatus('mandatory')
if mibBuilder.loadTexts: fnNidsSigUserDefEntry.setDescription('Row Description')
fnNidsSigUserDefName = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 5, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: fnNidsSigUserDefName.setStatus('mandatory')
if mibBuilder.loadTexts: fnNidsSigUserDefName.setDescription('User defined signature name or abbreviation')
fnNidsSigUserDefSum = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 5, 1, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnNidsSigUserDefSum.setStatus('mandatory')
if mibBuilder.loadTexts: fnNidsSigUserDefSum.setDescription('User defined signature summary')
fnNidsSigUserDefProto = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 5, 1, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnNidsSigUserDefProto.setStatus('mandatory')
if mibBuilder.loadTexts: fnNidsSigUserDefProto.setDescription('User defined signature protocol: tcp/udp')
fnNidsIdpState = MibScalar((1, 3, 6, 1, 4, 1, 12356, 5, 2, 1), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnNidsIdpState.setStatus('mandatory')
if mibBuilder.loadTexts: fnNidsIdpState.setDescription('Turn on/off IDP')
fnNidsIdpTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 5, 2, 2), )
if mibBuilder.loadTexts: fnNidsIdpTable.setStatus('mandatory')
if mibBuilder.loadTexts: fnNidsIdpTable.setDescription('Description')
fnNidsIdpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 5, 2, 2, 1), ).setIndexNames((0, "FORTINET-MIB", "fnNidsIdpSigName"))
if mibBuilder.loadTexts: fnNidsIdpEntry.setStatus('mandatory')
if mibBuilder.loadTexts: fnNidsIdpEntry.setDescription('Row Description')
fnNidsIdpSigName = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 5, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647)))
if mibBuilder.loadTexts: fnNidsIdpSigName.setStatus('mandatory')
if mibBuilder.loadTexts: fnNidsIdpSigName.setDescription('IDP signature name')
fnNidsIdpSigSum = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 5, 2, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnNidsIdpSigSum.setStatus('mandatory')
if mibBuilder.loadTexts: fnNidsIdpSigSum.setDescription('IDP signature summary')
fnNidsIdpSigProto = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 5, 2, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnNidsIdpSigProto.setStatus('mandatory')
if mibBuilder.loadTexts: fnNidsIdpSigProto.setDescription('IDP signature protocol')
fnNidsIdpSigState = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 5, 2, 2, 1, 4), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnNidsIdpSigState.setStatus('mandatory')
if mibBuilder.loadTexts: fnNidsIdpSigState.setDescription('Description')
fnNidsIdpSigThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 5, 2, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnNidsIdpSigThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: fnNidsIdpSigThreshold.setDescription('Description')
fnNidsIdpSigQSize = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 5, 2, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnNidsIdpSigQSize.setStatus('mandatory')
if mibBuilder.loadTexts: fnNidsIdpSigQSize.setDescription('Description')
fnNidsIdpSigKeepAlive = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 5, 2, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnNidsIdpSigKeepAlive.setStatus('mandatory')
if mibBuilder.loadTexts: fnNidsIdpSigKeepAlive.setDescription('Keepalive seconds')
fnNidsRespCfg = MibScalar((1, 3, 6, 1, 4, 1, 12356, 5, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("all", 1), ("tcp", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnNidsRespCfg.setStatus('mandatory')
if mibBuilder.loadTexts: fnNidsRespCfg.setDescription('Configure Packets Assurance to control whether the NIDS monitors all network traffic received by the monitored interface or just the TCP traffic received by the monitored interface and accepted by firewall policies.')
fnNidsRespAlertMsg = MibScalar((1, 3, 6, 1, 4, 1, 12356, 5, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("summary", 1), ("full", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnNidsRespAlertMsg.setStatus('mandatory')
if mibBuilder.loadTexts: fnNidsRespAlertMsg.setDescription('Set to Summary or Full to control the amount of information recorded in NIDS messages.')
fnNidsRespAlertSrcAddrState = MibScalar((1, 3, 6, 1, 4, 1, 12356, 5, 3, 3), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnNidsRespAlertSrcAddrState.setStatus('mandatory')
if mibBuilder.loadTexts: fnNidsRespAlertSrcAddrState.setDescription('For Address Obfuscation, select source IP to hide source addresses in NIDS messages.')
fnNidsRespAlertDstAddrState = MibScalar((1, 3, 6, 1, 4, 1, 12356, 5, 3, 4), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnNidsRespAlertDstAddrState.setStatus('mandatory')
if mibBuilder.loadTexts: fnNidsRespAlertDstAddrState.setDescription('For Address Obfuscation, select destination IP to hide destination addresses in NIDS messages.')
fnNidsRespLogMsg = MibScalar((1, 3, 6, 1, 4, 1, 12356, 5, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("summary", 1), ("full", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnNidsRespLogMsg.setStatus('mandatory')
if mibBuilder.loadTexts: fnNidsRespLogMsg.setDescription('Set to Summary or Full to control the amount of information recorded in NIDS messages.')
fnNidsRespLogSrcAddrState = MibScalar((1, 3, 6, 1, 4, 1, 12356, 5, 3, 6), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnNidsRespLogSrcAddrState.setStatus('mandatory')
if mibBuilder.loadTexts: fnNidsRespLogSrcAddrState.setDescription('For Address Obfuscation, select source IP to hide source addresses in NIDS messages.')
fnNidsRespLogDstAddrState = MibScalar((1, 3, 6, 1, 4, 1, 12356, 5, 3, 7), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnNidsRespLogDstAddrState.setStatus('mandatory')
if mibBuilder.loadTexts: fnNidsRespLogDstAddrState.setDescription('For Address Obfuscation, select source IP to hide destination addresses in NIDS messages.')
fnAvFileBlkRuleTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 6, 1, 1), )
if mibBuilder.loadTexts: fnAvFileBlkRuleTable.setStatus('mandatory')
if mibBuilder.loadTexts: fnAvFileBlkRuleTable.setDescription('The antivirus rule table. The antivirus rule should correspond to the firewall policies that have antivirus protection enabled.')
fnAvFileBlkRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 6, 1, 1, 1), ).setIndexNames((0, "FORTINET-MIB", "fnAvFbRuleIndex"))
if mibBuilder.loadTexts: fnAvFileBlkRuleEntry.setStatus('mandatory')
if mibBuilder.loadTexts: fnAvFileBlkRuleEntry.setDescription('Row Description')
fnAvFbRuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 6, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647)))
if mibBuilder.loadTexts: fnAvFbRuleIndex.setStatus('mandatory')
if mibBuilder.loadTexts: fnAvFbRuleIndex.setDescription('Protection rule index')
fnAvFbRuleFilePat = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 6, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnAvFbRuleFilePat.setStatus('mandatory')
if mibBuilder.loadTexts: fnAvFbRuleFilePat.setDescription('File pattern')
fnAvFbRuleHttpBlk = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 6, 1, 1, 1, 4), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnAvFbRuleHttpBlk.setStatus('mandatory')
if mibBuilder.loadTexts: fnAvFbRuleHttpBlk.setDescription('Description')
fnAvFbRuleFtpBlk = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 6, 1, 1, 1, 5), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnAvFbRuleFtpBlk.setStatus('mandatory')
if mibBuilder.loadTexts: fnAvFbRuleFtpBlk.setDescription('Description')
fnAvFbRuleSmtpBlk = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 6, 1, 1, 1, 6), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnAvFbRuleSmtpBlk.setStatus('mandatory')
if mibBuilder.loadTexts: fnAvFbRuleSmtpBlk.setDescription('Description')
fnAvFbRulePop3Blk = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 6, 1, 1, 1, 9), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnAvFbRulePop3Blk.setStatus('mandatory')
if mibBuilder.loadTexts: fnAvFbRulePop3Blk.setDescription('Description')
fnAvFbRuleImapBlk = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 6, 1, 1, 1, 12), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnAvFbRuleImapBlk.setStatus('mandatory')
if mibBuilder.loadTexts: fnAvFbRuleImapBlk.setDescription('Description')
fnAvQuarantineTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 6, 2, 1), )
if mibBuilder.loadTexts: fnAvQuarantineTable.setStatus('mandatory')
if mibBuilder.loadTexts: fnAvQuarantineTable.setDescription('Description')
fnAvQuarantineEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 6, 2, 1, 1), ).setIndexNames((0, "FORTINET-MIB", "fnAvQuarIndex"))
if mibBuilder.loadTexts: fnAvQuarantineEntry.setStatus('mandatory')
if mibBuilder.loadTexts: fnAvQuarantineEntry.setDescription('Row Description')
fnAvQuarIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 6, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: fnAvQuarIndex.setStatus('mandatory')
if mibBuilder.loadTexts: fnAvQuarIndex.setDescription('Column Description')
fnAvQuarFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 6, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnAvQuarFileName.setStatus('mandatory')
if mibBuilder.loadTexts: fnAvQuarFileName.setDescription('quarantined file name')
fnAvQuarTime = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 6, 2, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnAvQuarTime.setStatus('mandatory')
if mibBuilder.loadTexts: fnAvQuarTime.setDescription('The date and time the file got quarantined')
fnAvQuarService = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 6, 2, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnAvQuarService.setStatus('mandatory')
if mibBuilder.loadTexts: fnAvQuarService.setDescription('Description')
fnAvQuarStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 6, 2, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnAvQuarStatus.setStatus('mandatory')
if mibBuilder.loadTexts: fnAvQuarStatus.setDescription('Description')
fnAvQuarStatusDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 6, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnAvQuarStatusDetail.setStatus('mandatory')
if mibBuilder.loadTexts: fnAvQuarStatusDetail.setDescription('Description')
fnAvQuarDc = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 6, 2, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnAvQuarDc.setStatus('mandatory')
if mibBuilder.loadTexts: fnAvQuarDc.setDescription('Description')
fnAvQuarTtl = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 6, 2, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnAvQuarTtl.setStatus('mandatory')
if mibBuilder.loadTexts: fnAvQuarTtl.setDescription('Description')
fnAvQuarantineCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 6, 2, 2))
fnAVVirusListTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 6, 3, 1), )
if mibBuilder.loadTexts: fnAVVirusListTable.setStatus('mandatory')
if mibBuilder.loadTexts: fnAVVirusListTable.setDescription('Virus list')
fnAVVirusListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 6, 3, 1, 1), ).setIndexNames((0, "FORTINET-MIB", "fnAvVirusIndex"))
if mibBuilder.loadTexts: fnAVVirusListEntry.setStatus('mandatory')
if mibBuilder.loadTexts: fnAVVirusListEntry.setDescription('Row Description')
fnAvVirusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 6, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: fnAvVirusIndex.setStatus('mandatory')
if mibBuilder.loadTexts: fnAvVirusIndex.setDescription('Column Description')
fnAvVirusName = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 6, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnAvVirusName.setStatus('mandatory')
if mibBuilder.loadTexts: fnAvVirusName.setDescription('Virus name')
fnAvCfgMsgTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 6, 3, 2), )
if mibBuilder.loadTexts: fnAvCfgMsgTable.setStatus('mandatory')
if mibBuilder.loadTexts: fnAvCfgMsgTable.setDescription('Description')
fnAvCfgMsgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 6, 3, 2, 1), ).setIndexNames((0, "FORTINET-MIB", "fnAvCfgMsgIndex"))
if mibBuilder.loadTexts: fnAvCfgMsgEntry.setStatus('mandatory')
if mibBuilder.loadTexts: fnAvCfgMsgEntry.setDescription('Row Description')
fnAvCfgMsgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 6, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: fnAvCfgMsgIndex.setStatus('mandatory')
if mibBuilder.loadTexts: fnAvCfgMsgIndex.setDescription('Column Description')
fnAvCfgMsgName = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 6, 3, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnAvCfgMsgName.setStatus('mandatory')
if mibBuilder.loadTexts: fnAvCfgMsgName.setDescription('Column Description')
fnAvCfgMsgService = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 6, 3, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnAvCfgMsgService.setStatus('mandatory')
if mibBuilder.loadTexts: fnAvCfgMsgService.setDescription('Description')
fnAvCfgMsgDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 6, 3, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnAvCfgMsgDescription.setStatus('mandatory')
if mibBuilder.loadTexts: fnAvCfgMsgDescription.setDescription('Description')
fnAvCfgBlkFileHttp = MibScalar((1, 3, 6, 1, 4, 1, 12356, 6, 3, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnAvCfgBlkFileHttp.setStatus('mandatory')
if mibBuilder.loadTexts: fnAvCfgBlkFileHttp.setDescription('The file will be blocked if the file size over the limit, which is in terms of the percentage of the memory size (10M).')
fnAvCfgBlkFileFtp = MibScalar((1, 3, 6, 1, 4, 1, 12356, 6, 3, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnAvCfgBlkFileFtp.setStatus('mandatory')
if mibBuilder.loadTexts: fnAvCfgBlkFileFtp.setDescription('The file will be blocked if the file size over the limit, which is in terms of the percentage of the memory size (10M).')
fnAvCfgBlkEmailImap = MibScalar((1, 3, 6, 1, 4, 1, 12356, 6, 3, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnAvCfgBlkEmailImap.setStatus('mandatory')
if mibBuilder.loadTexts: fnAvCfgBlkEmailImap.setDescription('The email will be blocked if the email size over the limit, which is in terms of the percentage of the memory size (2M).')
fnAvCfgBlkEmailPop3 = MibScalar((1, 3, 6, 1, 4, 1, 12356, 6, 3, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnAvCfgBlkEmailPop3.setStatus('mandatory')
if mibBuilder.loadTexts: fnAvCfgBlkEmailPop3.setDescription('The email will be blocked if the email size over the limit, which is in terms of the percentage of the memory size (2M).')
fnAvCfgBlkEmailSmtp = MibScalar((1, 3, 6, 1, 4, 1, 12356, 6, 3, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnAvCfgBlkEmailSmtp.setStatus('mandatory')
if mibBuilder.loadTexts: fnAvCfgBlkEmailSmtp.setDescription('The email will be blocked if the email size over the limit, which is in terms of the percentage of the memory size (2M).')
fnWebFilterBannedWordsTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 7, 1, 1), )
if mibBuilder.loadTexts: fnWebFilterBannedWordsTable.setStatus('mandatory')
if mibBuilder.loadTexts: fnWebFilterBannedWordsTable.setDescription('Banned words list for content block')
fnWebfilterBannedWordsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 7, 1, 1, 1), ).setIndexNames((0, "FORTINET-MIB", "fnWebFilterBannedWordIndex"))
if mibBuilder.loadTexts: fnWebfilterBannedWordsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: fnWebfilterBannedWordsEntry.setDescription('Row Description')
fnWebFilterBannedWordIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 7, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: fnWebFilterBannedWordIndex.setStatus('mandatory')
if mibBuilder.loadTexts: fnWebFilterBannedWordIndex.setDescription('Column Description')
fnWebFilterBannedWords = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 7, 1, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnWebFilterBannedWords.setStatus('mandatory')
if mibBuilder.loadTexts: fnWebFilterBannedWords.setDescription('Banned words')
fnWebFilterBannedWordLan = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 7, 1, 1, 1, 3), LanguageCode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnWebFilterBannedWordLan.setStatus('mandatory')
if mibBuilder.loadTexts: fnWebFilterBannedWordLan.setDescription('Language of the banned words')
fnWebFilterBannedWordState = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 7, 1, 1, 1, 4), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnWebFilterBannedWordState.setStatus('mandatory')
if mibBuilder.loadTexts: fnWebFilterBannedWordState.setDescription('Turn on/off the banned word')
fnWebFilterUrlBlkState = MibScalar((1, 3, 6, 1, 4, 1, 12356, 7, 2, 1), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnWebFilterUrlBlkState.setStatus('mandatory')
if mibBuilder.loadTexts: fnWebFilterUrlBlkState.setDescription('turn on/off URL blocking.')
fnWebFilterUrlBlkTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 7, 2, 2), )
if mibBuilder.loadTexts: fnWebFilterUrlBlkTable.setStatus('mandatory')
if mibBuilder.loadTexts: fnWebFilterUrlBlkTable.setDescription('Banned url list for content block')
fnWebFilterUrlBlkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 7, 2, 2, 1), ).setIndexNames((0, "FORTINET-MIB", "fnWebFilterUrlBlkIndex"))
if mibBuilder.loadTexts: fnWebFilterUrlBlkEntry.setStatus('mandatory')
if mibBuilder.loadTexts: fnWebFilterUrlBlkEntry.setDescription('Row Description')
fnWebFilterUrlBlkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 7, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: fnWebFilterUrlBlkIndex.setStatus('mandatory')
if mibBuilder.loadTexts: fnWebFilterUrlBlkIndex.setDescription('Column Description')
fnWebFilterUrlPat = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 7, 2, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnWebFilterUrlPat.setStatus('mandatory')
if mibBuilder.loadTexts: fnWebFilterUrlPat.setDescription('Url/Pattern')
fnWebFilterUrlState = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 7, 2, 2, 1, 3), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnWebFilterUrlState.setStatus('mandatory')
if mibBuilder.loadTexts: fnWebFilterUrlState.setDescription('Turn on/off url block for the entry')
fnWebFilterApplet = MibScalar((1, 3, 6, 1, 4, 1, 12356, 7, 3, 1), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnWebFilterApplet.setStatus('mandatory')
if mibBuilder.loadTexts: fnWebFilterApplet.setDescription('Turn on/off java applet filtering')
fnWebFilterCookie = MibScalar((1, 3, 6, 1, 4, 1, 12356, 7, 3, 2), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnWebFilterCookie.setStatus('mandatory')
if mibBuilder.loadTexts: fnWebFilterCookie.setDescription('Turn on/off cookie filtering')
fnWebFilterActiveX = MibScalar((1, 3, 6, 1, 4, 1, 12356, 7, 3, 3), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnWebFilterActiveX.setStatus('mandatory')
if mibBuilder.loadTexts: fnWebFilterActiveX.setDescription('Turn on/off activeX filtering')
fnWebFilterExemptUrlTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 7, 4, 1), )
if mibBuilder.loadTexts: fnWebFilterExemptUrlTable.setStatus('mandatory')
if mibBuilder.loadTexts: fnWebFilterExemptUrlTable.setDescription('Exempt url list for url block')
fnWebFilterExemptUrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 7, 4, 1, 1), ).setIndexNames((0, "FORTINET-MIB", "fnWebFilterExemptUrlIndex"))
if mibBuilder.loadTexts: fnWebFilterExemptUrlEntry.setStatus('mandatory')
if mibBuilder.loadTexts: fnWebFilterExemptUrlEntry.setDescription('Row Description')
fnWebFilterExemptUrlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 7, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: fnWebFilterExemptUrlIndex.setStatus('mandatory')
if mibBuilder.loadTexts: fnWebFilterExemptUrlIndex.setDescription('Column Description')
fnWebFilterExemptUrlPat = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 7, 4, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnWebFilterExemptUrlPat.setStatus('mandatory')
if mibBuilder.loadTexts: fnWebFilterExemptUrlPat.setDescription('Url/Pattern')
fnWebFilterExemptUrlState = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 7, 4, 1, 1, 3), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnWebFilterExemptUrlState.setStatus('mandatory')
if mibBuilder.loadTexts: fnWebFilterExemptUrlState.setDescription('Turn on/off url block for the entry')
fnLogToRemHostState = MibScalar((1, 3, 6, 1, 4, 1, 12356, 9, 1, 1), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnLogToRemHostState.setStatus('mandatory')
if mibBuilder.loadTexts: fnLogToRemHostState.setDescription('Turn on/off sending the logs to a remote syslog server')
fnLogToRemHostAddr = MibScalar((1, 3, 6, 1, 4, 1, 12356, 9, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnLogToRemHostAddr.setStatus('mandatory')
if mibBuilder.loadTexts: fnLogToRemHostAddr.setDescription('The ip address of the remote syslog server')
fnLogToWebtrendsSrvState = MibScalar((1, 3, 6, 1, 4, 1, 12356, 9, 1, 3), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnLogToWebtrendsSrvState.setStatus('mandatory')
if mibBuilder.loadTexts: fnLogToWebtrendsSrvState.setDescription('Turn on/off sending log to remote Webtrends log server')
fnLogToWebtrendsSrvAddr = MibScalar((1, 3, 6, 1, 4, 1, 12356, 9, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnLogToWebtrendsSrvAddr.setStatus('mandatory')
if mibBuilder.loadTexts: fnLogToWebtrendsSrvAddr.setDescription('The ip address of the remote Webtrends server')
fnLogToLocalState = MibScalar((1, 3, 6, 1, 4, 1, 12356, 9, 1, 5), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnLogToLocalState.setStatus('mandatory')
if mibBuilder.loadTexts: fnLogToLocalState.setDescription('Turn on/off sending log to local memory or hard disk')
fnLogTrafficIntToFw = MibScalar((1, 3, 6, 1, 4, 1, 12356, 9, 1, 6), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnLogTrafficIntToFw.setStatus('mandatory')
if mibBuilder.loadTexts: fnLogTrafficIntToFw.setDescription('Turn on/off logging All Internal Traffic To Firewall')
fnLogTrafficExtToFw = MibScalar((1, 3, 6, 1, 4, 1, 12356, 9, 1, 7), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnLogTrafficExtToFw.setStatus('mandatory')
if mibBuilder.loadTexts: fnLogTrafficExtToFw.setDescription('Turn on/off logging external traffic to firewall')
fnLogAllEvents = MibScalar((1, 3, 6, 1, 4, 1, 12356, 9, 1, 8), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnLogAllEvents.setStatus('mandatory')
if mibBuilder.loadTexts: fnLogAllEvents.setDescription('Turn on/off logging all events')
fnLogVirusEvents = MibScalar((1, 3, 6, 1, 4, 1, 12356, 9, 1, 9), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnLogVirusEvents.setStatus('mandatory')
if mibBuilder.loadTexts: fnLogVirusEvents.setDescription('Turn on/off logging virus incidents')
fnLogIntrusions = MibScalar((1, 3, 6, 1, 4, 1, 12356, 9, 1, 10), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnLogIntrusions.setStatus('mandatory')
if mibBuilder.loadTexts: fnLogIntrusions.setDescription('Turn on/off logging intrusion events')
fnLogToLocalFileSize = MibScalar((1, 3, 6, 1, 4, 1, 12356, 9, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2000)).clone(10)).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnLogToLocalFileSize.setStatus('mandatory')
if mibBuilder.loadTexts: fnLogToLocalFileSize.setDescription('The maximum size of the log file in terms of MBytes. Default value is 10 Mbytes This entry applies only to FGTs with hard disk.')
fnLogToLocalTime = MibScalar((1, 3, 6, 1, 4, 1, 12356, 9, 1, 12), Integer32().clone(10)).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnLogToLocalTime.setStatus('mandatory')
if mibBuilder.loadTexts: fnLogToLocalTime.setDescription('Log time interval. After the specified time interval, the current log file is closed and saved and a new one is started. The default log time interval is 10 days. This entry applies only to FGTs with hard disk.')
fnLogToLocalOpt = MibScalar((1, 3, 6, 1, 4, 1, 12356, 9, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("overWrite", 1), ("blockTraffic", 2), ("doNotLog", 3))).clone('overWrite')).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnLogToLocalOpt.setStatus('mandatory')
if mibBuilder.loadTexts: fnLogToLocalOpt.setDescription('Log options when disk is full. Default option is Overwrite')
fnLogSettingFilter = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 9, 1, 14))
fnLSTrafficAddrTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 9, 1, 15), )
if mibBuilder.loadTexts: fnLSTrafficAddrTable.setStatus('mandatory')
if mibBuilder.loadTexts: fnLSTrafficAddrTable.setDescription('Description')
fnLSTrafficAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 9, 1, 15, 1), ).setIndexNames((0, "FORTINET-MIB", "fnLSTrafficEntryIndex"))
if mibBuilder.loadTexts: fnLSTrafficAddrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: fnLSTrafficAddrEntry.setDescription('Row Description')
fnLSTrafficEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 9, 1, 15, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: fnLSTrafficEntryIndex.setStatus('mandatory')
if mibBuilder.loadTexts: fnLSTrafficEntryIndex.setDescription('Column Description')
fnLSTrafficSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 9, 1, 15, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnLSTrafficSrcAddr.setStatus('mandatory')
if mibBuilder.loadTexts: fnLSTrafficSrcAddr.setDescription('Column Description')
fnLSTrafficSrcNetmask = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 9, 1, 15, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnLSTrafficSrcNetmask.setStatus('mandatory')
if mibBuilder.loadTexts: fnLSTrafficSrcNetmask.setDescription('Column Description')
fnLSTrafficSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 9, 1, 15, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnLSTrafficSrcPort.setStatus('mandatory')
if mibBuilder.loadTexts: fnLSTrafficSrcPort.setDescription('Column Description')
fnLSTrafficDstAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 9, 1, 15, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnLSTrafficDstAddr.setStatus('mandatory')
if mibBuilder.loadTexts: fnLSTrafficDstAddr.setDescription('Column Description')
fnLSTrafficDstNetmask = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 9, 1, 15, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnLSTrafficDstNetmask.setStatus('mandatory')
if mibBuilder.loadTexts: fnLSTrafficDstNetmask.setDescription('Column Description')
fnLSTrafficDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 9, 1, 15, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnLSTrafficDstPort.setStatus('mandatory')
if mibBuilder.loadTexts: fnLSTrafficDstPort.setDescription('Column Description')
fnLSTrafficProto = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 9, 1, 15, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tcp", 1), ("udp", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnLSTrafficProto.setStatus('mandatory')
if mibBuilder.loadTexts: fnLSTrafficProto.setDescription('Description')
fnLogHDTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 9, 2, 1), )
if mibBuilder.loadTexts: fnLogHDTable.setStatus('mandatory')
if mibBuilder.loadTexts: fnLogHDTable.setDescription('This table is valid for those FortiGates that contain a hard disk for recording logs, such FGT-200')
fnLogHDEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 9, 2, 1, 1), ).setIndexNames((0, "FORTINET-MIB", "fnLogHDEntryIndex"))
if mibBuilder.loadTexts: fnLogHDEntry.setStatus('mandatory')
if mibBuilder.loadTexts: fnLogHDEntry.setDescription('This row contains the log file information on hard disk')
fnLogHDEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 9, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: fnLogHDEntryIndex.setStatus('mandatory')
if mibBuilder.loadTexts: fnLogHDEntryIndex.setDescription('Column Description')
fnLogHDLastAccTime = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 9, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnLogHDLastAccTime.setStatus('mandatory')
if mibBuilder.loadTexts: fnLogHDLastAccTime.setDescription('The last access time of the log file on the hard disk')
fnLogHDFileSize = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 9, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnLogHDFileSize.setStatus('mandatory')
if mibBuilder.loadTexts: fnLogHDFileSize.setDescription('The size of the log file on hard disk')
fnLogHDFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 9, 2, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnLogHDFileName.setStatus('mandatory')
if mibBuilder.loadTexts: fnLogHDFileName.setDescription('The log file name on hard disk')
fnLogMemTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 9, 2, 2), )
if mibBuilder.loadTexts: fnLogMemTable.setStatus('mandatory')
if mibBuilder.loadTexts: fnLogMemTable.setDescription('This table is valid for those FortiGates that support log to memory, such as FGT-300')
fnLogMemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 9, 2, 2, 1), ).setIndexNames((0, "FORTINET-MIB", "fnLogMemEntryIndex"))
if mibBuilder.loadTexts: fnLogMemEntry.setStatus('mandatory')
if mibBuilder.loadTexts: fnLogMemEntry.setDescription('This row contains log event that is stored in memory')
fnLogMemEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 9, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: fnLogMemEntryIndex.setStatus('mandatory')
if mibBuilder.loadTexts: fnLogMemEntryIndex.setDescription('Column Description')
fnLogMemDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 9, 2, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnLogMemDetail.setStatus('mandatory')
if mibBuilder.loadTexts: fnLogMemDetail.setDescription('The detailed log info of the entry')
fnAlertEmaiCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 9, 3, 1))
fnAlertEmailCat = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 9, 3, 2))
fnSysMonCPUUsage = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 1, 6, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysMonCPUUsage.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysMonCPUUsage.setDescription('The current CPU usage statistics in percentage')
fnSysMonCPUIdle = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 1, 6, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysMonCPUIdle.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysMonCPUIdle.setDescription('The current CPU idle statistics in percentage')
fnSysMonCPUInt = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 1, 6, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysMonCPUInt.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysMonCPUInt.setDescription('The current CPU interupt statistics in percentage')
fnSysMonMemUsage = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 1, 6, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysMonMemUsage.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysMonMemUsage.setDescription('The current memory usage statistics')
fnSysMonUpTime = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 1, 6, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysMonUpTime.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysMonUpTime.setDescription('System up time since last start')
fnSysMonSessionNum = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 1, 6, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysMonSessionNum.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysMonSessionNum.setDescription('The total number of sessions')
fnSysMonConnTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 1, 1, 6, 7), )
if mibBuilder.loadTexts: fnSysMonConnTable.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysMonConnTable.setDescription('Connection table')
fnSysMonConnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 1, 1, 6, 7, 1), ).setIndexNames((0, "FORTINET-MIB", "fnSysMonConnIndex"))
if mibBuilder.loadTexts: fnSysMonConnEntry.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysMonConnEntry.setDescription('Row Description')
fnSysMonConnIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 1, 6, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: fnSysMonConnIndex.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysMonConnIndex.setDescription('Column Description')
fnSysMonConnProto = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 1, 6, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tcp", 1), ("udp", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysMonConnProto.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysMonConnProto.setDescription('The protocol of the connection')
fnSysMonConnFromAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 1, 6, 7, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysMonConnFromAddr.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysMonConnFromAddr.setDescription('From IP address')
fnSysMonConnFromPort = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 1, 6, 7, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysMonConnFromPort.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysMonConnFromPort.setDescription('From Port')
fnSysMonConnToAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 1, 6, 7, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysMonConnToAddr.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysMonConnToAddr.setDescription('To IP address')
fnSysMonConnToPort = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 1, 6, 7, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysMonConnToPort.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysMonConnToPort.setDescription('To port')
fnSysMonConnExp = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 1, 6, 7, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysMonConnExp.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysMonConnExp.setDescription('The time, seconds, before the connection expires.')
fnSysNetworkRoutingTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 1, 3, 4, 1), )
if mibBuilder.loadTexts: fnSysNetworkRoutingTable.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysNetworkRoutingTable.setDescription('Routing table.')
fnSysNetworkRoutingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 1, 3, 4, 1, 1), ).setIndexNames((0, "FORTINET-MIB", "fnSysNetworkRoutingIndex"))
if mibBuilder.loadTexts: fnSysNetworkRoutingEntry.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysNetworkRoutingEntry.setDescription('Routing information')
fnSysNetworkRoutingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 3, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysNetworkRoutingIndex.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysNetworkRoutingIndex.setDescription('Interface number which uniquely identifies an routing entry.')
fnSysNetworkRoutingSrcIP = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 3, 4, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysNetworkRoutingSrcIP.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysNetworkRoutingSrcIP.setDescription('%%%')
fnSysNetworkRoutingSrcNetmask = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 3, 4, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysNetworkRoutingSrcNetmask.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysNetworkRoutingSrcNetmask.setDescription('%%%')
fnSysNetworkRoutingDstIP = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 3, 4, 1, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysNetworkRoutingDstIP.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysNetworkRoutingDstIP.setDescription('Description')
fnSysNetworkRoutingDstNetmask = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 3, 4, 1, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysNetworkRoutingDstNetmask.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysNetworkRoutingDstNetmask.setDescription('Description')
fnSysNetworkRoutingGW1 = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 3, 4, 1, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysNetworkRoutingGW1.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysNetworkRoutingGW1.setDescription('Description')
fnSysNetworkRoutingGW2 = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 3, 4, 1, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysNetworkRoutingGW2.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysNetworkRoutingGW2.setDescription('Description')
fnSysNetworkRoutingDev1 = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 3, 4, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysNetworkRoutingDev1.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysNetworkRoutingDev1.setDescription('Description')
fnSysNetworkRoutingDev2 = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 3, 4, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysNetworkRoutingDev2.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysNetworkRoutingDev2.setDescription('Description')
fnSysNetworkRoutingRIPSrv = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 3, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("disable", 2), ("enable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysNetworkRoutingRIPSrv.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysNetworkRoutingRIPSrv.setDescription('Rip server: enable/disable')
fnSysNetworkRoutingGWTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 1, 3, 4, 4), )
if mibBuilder.loadTexts: fnSysNetworkRoutingGWTable.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysNetworkRoutingGWTable.setDescription('Routing gateway table')
fnSysNetworkRoutingGWEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 1, 3, 4, 4, 1), ).setIndexNames((0, "FORTINET-MIB", "fnSysNetworkRoutingGWIndex"))
if mibBuilder.loadTexts: fnSysNetworkRoutingGWEntry.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysNetworkRoutingGWEntry.setDescription('Row Description')
fnSysNetworkRoutingGWIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 3, 4, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: fnSysNetworkRoutingGWIndex.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysNetworkRoutingGWIndex.setDescription('Column Description')
fnSysNetworkRoutingGWIP = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 3, 4, 4, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysNetworkRoutingGWIP.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysNetworkRoutingGWIP.setDescription('Column Description')
fnSysNetworkRoutingGWDeadDet = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 3, 4, 4, 1, 3), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysNetworkRoutingGWDeadDet.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysNetworkRoutingGWDeadDet.setDescription('Dead gateway detection')
fnSysNetworkDhcpStatus = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 3, 5, 1), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysNetworkDhcpStatus.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysNetworkDhcpStatus.setDescription('%%%')
fnSysNetworkDhcpSip = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 3, 5, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysNetworkDhcpSip.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysNetworkDhcpSip.setDescription('%%%')
fnSysNetworkDhcpEip = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 3, 5, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysNetworkDhcpEip.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysNetworkDhcpEip.setDescription('%%%')
fnSysNetworkDhcpLeaseDur = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 3, 5, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysNetworkDhcpLeaseDur.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysNetworkDhcpLeaseDur.setDescription('Lease duration')
fnSysNetworkDhcpDomain = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 3, 5, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysNetworkDhcpDomain.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysNetworkDhcpDomain.setDescription('Domain name')
fnSysNetworkDhcpDNS1 = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 3, 5, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysNetworkDhcpDNS1.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysNetworkDhcpDNS1.setDescription('Description')
fnSysNetworkDhcpDNS2 = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 3, 5, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysNetworkDhcpDNS2.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysNetworkDhcpDNS2.setDescription('Description')
fnSysNetworkDhcpDNS3 = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 3, 5, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysNetworkDhcpDNS3.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysNetworkDhcpDNS3.setDescription('Description')
fnSysNetworkDhcpDefRoute = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 3, 5, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysNetworkDhcpDefRoute.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysNetworkDhcpDefRoute.setDescription('Default route')
fnSysNetworkDhcpExclRange1S = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 3, 5, 10), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysNetworkDhcpExclRange1S.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysNetworkDhcpExclRange1S.setDescription('Exclusion range1 starting IP')
fnSysNetworkDhcpExclRange1E = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 3, 5, 11), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysNetworkDhcpExclRange1E.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysNetworkDhcpExclRange1E.setDescription('Exclusion range1 ending IP')
fnSysNetworkDhcpExclRange2S = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 3, 5, 12), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysNetworkDhcpExclRange2S.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysNetworkDhcpExclRange2S.setDescription('Exclusion range 2 starting IP')
fnSysNetworkDhcpExclRange2E = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 3, 5, 13), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysNetworkDhcpExclRange2E.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysNetworkDhcpExclRange2E.setDescription('Exclusion range 2 ending IP')
fnSysNetworkDhcpExclRange3S = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 3, 5, 14), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysNetworkDhcpExclRange3S.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysNetworkDhcpExclRange3S.setDescription('Exclusion range 3 starting IP')
fnSysNetworkDhcpExclRange3E = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 3, 5, 15), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysNetworkDhcpExclRange3E.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysNetworkDhcpExclRange3E.setDescription('Exclusion range 3 ending IP')
fnSysNetworkDNSPri = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 3, 7, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysNetworkDNSPri.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysNetworkDNSPri.setDescription('primary DNS server IP address.')
fnSysNetworkDNSSecPri = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 3, 7, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysNetworkDNSSecPri.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysNetworkDNSSecPri.setDescription('Secondary DNS server IP address.')
fnSysConfigTimeVal = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 4, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysConfigTimeVal.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysConfigTimeVal.setDescription('System time')
fnSysConfigTimezone = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysConfigTimezone.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysConfigTimezone.setDescription('System time zone')
fnSysConfigTimeDST = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 4, 1, 3), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysConfigTimeDST.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysConfigTimeDST.setDescription('Daylight saving time')
fnSysConfigTimeNTPSrv = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 4, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysConfigTimeNTPSrv.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysConfigTimeNTPSrv.setDescription('NTP server IP addr')
fnSysConfigTimeNTPInt = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysConfigTimeNTPInt.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysConfigTimeNTPInt.setDescription('NTP update interval')
fnSysConfigNTPState = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 4, 1, 6), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysConfigNTPState.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysConfigNTPState.setDescription('Synchronize with NTP Server')
fnSysConfigOptsIdleTimeout = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 4, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysConfigOptsIdleTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysConfigOptsIdleTimeout.setDescription('Admin idle timeout value')
fnSysConfigOptsAuthTimeout = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 4, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysConfigOptsAuthTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysConfigOptsAuthTimeout.setDescription('Authentication idle timeout value')
fnSysConfigOptsLan = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 4, 2, 3), LanguageCode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysConfigOptsLan.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysConfigOptsLan.setDescription('Web administration language')
fnSysConfigOptsLcdProt = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 4, 2, 4), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysConfigOptsLcdProt.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysConfigOptsLcdProt.setDescription('Enable or disable LCD control buttons protection')
fnSysConfigOptsLcdProtPin = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 4, 2, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysConfigOptsLcdProtPin.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysConfigOptsLcdProtPin.setDescription('LCD control buttons protection PIN')
fnSysConfigAdminUserTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 1, 4, 3, 1), )
if mibBuilder.loadTexts: fnSysConfigAdminUserTable.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysConfigAdminUserTable.setDescription('Admin user account table.')
fnSysConfigAdminUserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 1, 4, 3, 1, 1), ).setIndexNames((0, "FORTINET-MIB", "fnSysConfigAdminUserIndex"))
if mibBuilder.loadTexts: fnSysConfigAdminUserEntry.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysConfigAdminUserEntry.setDescription('Admin user information')
fnSysConfigAdminUserIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 4, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysConfigAdminUserIndex.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysConfigAdminUserIndex.setDescription('Admin user index')
fnSysConfigAdminUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 4, 3, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysConfigAdminUserName.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysConfigAdminUserName.setDescription('Admin user name')
fnSysConfigAdminUserIp = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 4, 3, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysConfigAdminUserIp.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysConfigAdminUserIp.setDescription('Trusted Host IP addr')
fnSysConfigAdminUserNetmask = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 4, 3, 1, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysConfigAdminUserNetmask.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysConfigAdminUserNetmask.setDescription('Admin user netmask')
fnSysConfigAdminUserPermission = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 4, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 2))).clone(namedValues=NamedValues(("read", 1), ("all", 3), ("readWrite", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysConfigAdminUserPermission.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysConfigAdminUserPermission.setDescription('Admin user permission')
fnSysConfigHAMode = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 4, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 3))).clone(namedValues=NamedValues(("standalone", 0), ("activeActive", 2), ("activePassive", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysConfigHAMode.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysConfigHAMode.setDescription('HA(High availability) type')
fnSysConfigHAGrpId = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 4, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysConfigHAGrpId.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysConfigHAGrpId.setDescription('HA group ID')
fnSysConfigHAPasswd = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 4, 4, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysConfigHAPasswd.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysConfigHAPasswd.setDescription('password for HA')
fnSysConfigHAMonIf = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 4, 4, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysConfigHAMonIf.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysConfigHAMonIf.setDescription('The interface name that HA is monitoring')
fnSysConfigHASchedule = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 4, 4, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("none", 1), ("hub", 2), ("leastConn", 3), ("roundRobin", 4), ("weightRoundRobin", 5), ("random", 6), ("ip", 7), ("ipPort", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysConfigHASchedule.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysConfigHASchedule.setDescription('HA schedule')
fnSysSnmpState = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 5, 1, 1), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysSnmpState.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysSnmpState.setDescription('Description')
fnSysSnmpSysName = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 5, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysSnmpSysName.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysSnmpSysName.setDescription('System name')
fnSysSnmpSysLoc = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 5, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysSnmpSysLoc.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysSnmpSysLoc.setDescription('System location')
fnSysSnmpInfo = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 5, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysSnmpInfo.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysSnmpInfo.setDescription('Contact info')
fnSysSnmpGetCom = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 5, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysSnmpGetCom.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysSnmpGetCom.setDescription('Get community')
fnSysSnmpTrapCom = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 5, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysSnmpTrapCom.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysSnmpTrapCom.setDescription('Trap community')
fnSysSnmp1stTrapIp = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 5, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysSnmp1stTrapIp.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysSnmp1stTrapIp.setDescription('First Trap Receiver IP Address')
fnSysSnmp2ndTrapIp = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 5, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysSnmp2ndTrapIp.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysSnmp2ndTrapIp.setDescription('Second Trap Receiver IP Address')
fnSysSnmp3rdTrapIp = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 5, 1, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysSnmp3rdTrapIp.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysSnmp3rdTrapIp.setDescription('Third Trap Receiver IP Address')
fnSysSnmpv3ACState = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 5, 2, 1), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysSnmpv3ACState.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysSnmpv3ACState.setDescription('Turn on/off the SNMP v3 feature')
fnSysSnmpv3ACTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 1, 5, 2, 2), )
if mibBuilder.loadTexts: fnSysSnmpv3ACTable.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysSnmpv3ACTable.setDescription('SNMPv3 access control table')
fnSysSnmpv3ACEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 1, 5, 2, 2, 1), ).setIndexNames((0, "FORTINET-MIB", "fnSysSnmpACIndex"))
if mibBuilder.loadTexts: fnSysSnmpv3ACEntry.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysSnmpv3ACEntry.setDescription('Row Description')
fnSysSnmpACIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 5, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: fnSysSnmpACIndex.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysSnmpACIndex.setDescription('Column Description')
fnSysSnmpACGrpName = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 5, 2, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysSnmpACGrpName.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysSnmpACGrpName.setDescription('Access control group name')
fnSysSnmpACSecLevelAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 5, 2, 2, 1, 3), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysSnmpACSecLevelAuth.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysSnmpACSecLevelAuth.setDescription('Security level: auth')
fnSysSnmpACSecLevelPriv = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 5, 2, 2, 1, 4), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysSnmpACSecLevelPriv.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysSnmpACSecLevelPriv.setDescription('Security level: privacy')
fnSysSnmpACContexPre = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 5, 2, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysSnmpACContexPre.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysSnmpACContexPre.setDescription('Context prefix')
fnSysSnmpACContextMatch = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 5, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("exact", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysSnmpACContextMatch.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysSnmpACContextMatch.setDescription('Context match mode')
fnSysSnmpACRv = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 5, 2, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysSnmpACRv.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysSnmpACRv.setDescription('Read view')
fnSysSnmpACWv = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 5, 2, 2, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysSnmpACWv.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysSnmpACWv.setDescription('Write view')
fnSysSnmpACNv = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 5, 2, 2, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysSnmpACNv.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysSnmpACNv.setDescription('Notification view')
fnSysSnmpSecUserTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 1, 5, 3, 1), )
if mibBuilder.loadTexts: fnSysSnmpSecUserTable.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysSnmpSecUserTable.setDescription('SNMP security user table')
fnSysSnmpSecUserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 1, 5, 3, 1, 1), ).setIndexNames((0, "FORTINET-MIB", "fnSysSnmpSecUserName"))
if mibBuilder.loadTexts: fnSysSnmpSecUserEntry.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysSnmpSecUserEntry.setDescription('Row Description')
fnSysSnmpSecUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 5, 3, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255)))
if mibBuilder.loadTexts: fnSysSnmpSecUserName.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysSnmpSecUserName.setDescription('Security user name. This attribute is the index of the table')
fnSysSnmpSecUserSecLevelAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 5, 3, 1, 1, 2), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysSnmpSecUserSecLevelAuth.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysSnmpSecUserSecLevelAuth.setDescription('User security level: auth')
fnSysSnmpSecUserSecLevelPriv = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 5, 3, 1, 1, 3), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysSnmpSecUserSecLevelPriv.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysSnmpSecUserSecLevelPriv.setDescription('User security level: privacy')
fnSysSnmpSecUserAuthPasswd = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 5, 3, 1, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysSnmpSecUserAuthPasswd.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysSnmpSecUserAuthPasswd.setDescription('User authentication password')
fnSysSnmpSecUserAuthProto = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 5, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("hmac-md5-96", 1), ("hmac-sha-96", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysSnmpSecUserAuthProto.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysSnmpSecUserAuthProto.setDescription('User authentication protocol')
fnSysSnmpSecUserPrivPasswd = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 5, 3, 1, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysSnmpSecUserPrivPasswd.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysSnmpSecUserPrivPasswd.setDescription('User privacy password')
fnSysSnmpSecGrpTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 1, 5, 3, 2), )
if mibBuilder.loadTexts: fnSysSnmpSecGrpTable.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysSnmpSecGrpTable.setDescription('Security group table')
fnSysSnmpSecGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 1, 5, 3, 2, 1), ).setIndexNames((0, "FORTINET-MIB", "fnSysSnmpSecGrpName"))
if mibBuilder.loadTexts: fnSysSnmpSecGrpEntry.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysSnmpSecGrpEntry.setDescription('Row Description')
fnSysSnmpSecGrpName = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 5, 3, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255)))
if mibBuilder.loadTexts: fnSysSnmpSecGrpName.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysSnmpSecGrpName.setDescription("Security group name. It's the index of the table")
fnSysSnmpSecGrpMembers = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 5, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysSnmpSecGrpMembers.setStatus('mandatory')
if mibBuilder.loadTexts: fnSysSnmpSecGrpMembers.setDescription('Security users that belong to the security group. The member names should be separated by a separator, such as a , or a space.')
fnNidsMonIfs = MibScalar((1, 3, 6, 1, 4, 1, 12356, 5, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnNidsMonIfs.setStatus('mandatory')
if mibBuilder.loadTexts: fnNidsMonIfs.setDescription('The monitored interface names. The namesof the interfaces are separated by ,')
fnNidsTypeIP = MibScalar((1, 3, 6, 1, 4, 1, 12356, 5, 1, 1, 2), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnNidsTypeIP.setStatus('mandatory')
if mibBuilder.loadTexts: fnNidsTypeIP.setDescription('The IP type of traffic on which to run Checksum Verifications')
fnNidsTypeTcp = MibScalar((1, 3, 6, 1, 4, 1, 12356, 5, 1, 1, 3), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnNidsTypeTcp.setStatus('mandatory')
if mibBuilder.loadTexts: fnNidsTypeTcp.setDescription('The TCP type of traffic on which to run Checksum Verifications')
fnNidsTypeUdp = MibScalar((1, 3, 6, 1, 4, 1, 12356, 5, 1, 1, 4), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnNidsTypeUdp.setStatus('mandatory')
if mibBuilder.loadTexts: fnNidsTypeUdp.setDescription('The UDP type of traffic on which to run Checksum Verifications')
fnNidsTypeIcmp = MibScalar((1, 3, 6, 1, 4, 1, 12356, 5, 1, 1, 5), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnNidsTypeIcmp.setStatus('mandatory')
if mibBuilder.loadTexts: fnNidsTypeIcmp.setDescription('The Icmp type of traffic on which to run Checksum Verifications')
fnAvQuarCfgInfecFileHttp = MibScalar((1, 3, 6, 1, 4, 1, 12356, 6, 2, 2, 1), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnAvQuarCfgInfecFileHttp.setStatus('mandatory')
if mibBuilder.loadTexts: fnAvQuarCfgInfecFileHttp.setDescription('Description')
fnAvQuarCfgInfecFileFtp = MibScalar((1, 3, 6, 1, 4, 1, 12356, 6, 2, 2, 2), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnAvQuarCfgInfecFileFtp.setStatus('mandatory')
if mibBuilder.loadTexts: fnAvQuarCfgInfecFileFtp.setDescription('Description')
fnAvQuarCfgInfecFileImap = MibScalar((1, 3, 6, 1, 4, 1, 12356, 6, 2, 2, 3), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnAvQuarCfgInfecFileImap.setStatus('mandatory')
if mibBuilder.loadTexts: fnAvQuarCfgInfecFileImap.setDescription('Description')
fnAvQuarCfgInfecFilePop3 = MibScalar((1, 3, 6, 1, 4, 1, 12356, 6, 2, 2, 4), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnAvQuarCfgInfecFilePop3.setStatus('mandatory')
if mibBuilder.loadTexts: fnAvQuarCfgInfecFilePop3.setDescription('Description')
fnAvQuarCfgInfecFileSmtp = MibScalar((1, 3, 6, 1, 4, 1, 12356, 6, 2, 2, 5), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnAvQuarCfgInfecFileSmtp.setStatus('mandatory')
if mibBuilder.loadTexts: fnAvQuarCfgInfecFileSmtp.setDescription('Description')
fnAvQuarCfgBlkFileHttp = MibScalar((1, 3, 6, 1, 4, 1, 12356, 6, 2, 2, 6), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnAvQuarCfgBlkFileHttp.setStatus('mandatory')
if mibBuilder.loadTexts: fnAvQuarCfgBlkFileHttp.setDescription('Description')
fnAvQuarCfgBlkFileFtp = MibScalar((1, 3, 6, 1, 4, 1, 12356, 6, 2, 2, 7), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnAvQuarCfgBlkFileFtp.setStatus('mandatory')
if mibBuilder.loadTexts: fnAvQuarCfgBlkFileFtp.setDescription('Description')
fnAvQuarCfgBlkFileImap = MibScalar((1, 3, 6, 1, 4, 1, 12356, 6, 2, 2, 8), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnAvQuarCfgBlkFileImap.setStatus('mandatory')
if mibBuilder.loadTexts: fnAvQuarCfgBlkFileImap.setDescription('Description')
fnAvQuarCfgBlkFilePop3 = MibScalar((1, 3, 6, 1, 4, 1, 12356, 6, 2, 2, 9), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnAvQuarCfgBlkFilePop3.setStatus('mandatory')
if mibBuilder.loadTexts: fnAvQuarCfgBlkFilePop3.setDescription('Description')
fnAvQuarCfgBlkFileSmtp = MibScalar((1, 3, 6, 1, 4, 1, 12356, 6, 2, 2, 10), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnAvQuarCfgBlkFileSmtp.setStatus('mandatory')
if mibBuilder.loadTexts: fnAvQuarCfgBlkFileSmtp.setDescription('Description')
fnAvQuarCfgAgeLimit = MibScalar((1, 3, 6, 1, 4, 1, 12356, 6, 2, 2, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnAvQuarCfgAgeLimit.setStatus('mandatory')
if mibBuilder.loadTexts: fnAvQuarCfgAgeLimit.setDescription('In terms of hours')
fnAvQuarCfgMaxFileSize = MibScalar((1, 3, 6, 1, 4, 1, 12356, 6, 2, 2, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnAvQuarCfgMaxFileSize.setStatus('mandatory')
if mibBuilder.loadTexts: fnAvQuarCfgMaxFileSize.setDescription('Max file size in terms of MBytes to be quarantined')
fnAvQuarCfgLowDiskOpt = MibScalar((1, 3, 6, 1, 4, 1, 12356, 6, 2, 2, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("overwriteOldestFile", 1), ("dropNewFile", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnAvQuarCfgLowDiskOpt.setStatus('mandatory')
if mibBuilder.loadTexts: fnAvQuarCfgLowDiskOpt.setDescription('The action to take when disk space is low.')
fnLogSettingTrafficFilter = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 9, 1, 14, 1))
fnLogSettingEventFilter = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 9, 1, 14, 2))
fnLogSettingVirusFilter = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 9, 1, 14, 3))
fnLogSettingWebFilter = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 9, 1, 14, 4))
fnLSIdsFilterState = MibScalar((1, 3, 6, 1, 4, 1, 12356, 9, 1, 14, 5), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnLSIdsFilterState.setStatus('mandatory')
if mibBuilder.loadTexts: fnLSIdsFilterState.setDescription('Description')
fnLSFilterSeverity = MibScalar((1, 3, 6, 1, 4, 1, 12356, 9, 1, 14, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("none", 1), ("emergency", 2), ("alert", 3), ("critical", 4), ("error", 5), ("warning", 6), ("notification", 7), ("infomation", 8), ("debugging", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnLSFilterSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: fnLSFilterSeverity.setDescription('Description')
fnAlertEmaiCfgSmtpSrv = MibScalar((1, 3, 6, 1, 4, 1, 12356, 9, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnAlertEmaiCfgSmtpSrv.setStatus('mandatory')
if mibBuilder.loadTexts: fnAlertEmaiCfgSmtpSrv.setDescription('SMTP server ip address for alert.')
fnAlertEmaiCfgSmtpUser = MibScalar((1, 3, 6, 1, 4, 1, 12356, 9, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnAlertEmaiCfgSmtpUser.setStatus('mandatory')
if mibBuilder.loadTexts: fnAlertEmaiCfgSmtpUser.setDescription('SMTP server user name.')
fnAlertEmaiCfgSmtpPasswd = MibScalar((1, 3, 6, 1, 4, 1, 12356, 9, 3, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnAlertEmaiCfgSmtpPasswd.setStatus('mandatory')
if mibBuilder.loadTexts: fnAlertEmaiCfgSmtpPasswd.setDescription('SMTP server user password')
fnAlertEmaiCfgEmai1 = MibScalar((1, 3, 6, 1, 4, 1, 12356, 9, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnAlertEmaiCfgEmai1.setStatus('mandatory')
if mibBuilder.loadTexts: fnAlertEmaiCfgEmai1.setDescription('Alert email address no. 1')
fnAlertEmaiCfgEmail2 = MibScalar((1, 3, 6, 1, 4, 1, 12356, 9, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnAlertEmaiCfgEmail2.setStatus('mandatory')
if mibBuilder.loadTexts: fnAlertEmaiCfgEmail2.setDescription('Alert email address no. 2')
fnAlertEmaiCfgEmail3 = MibScalar((1, 3, 6, 1, 4, 1, 12356, 9, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnAlertEmaiCfgEmail3.setStatus('mandatory')
if mibBuilder.loadTexts: fnAlertEmaiCfgEmail3.setDescription('Alert email address no. 3')
fnAlearEmaiCatVirus = MibScalar((1, 3, 6, 1, 4, 1, 12356, 9, 3, 2, 1), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnAlearEmaiCatVirus.setStatus('mandatory')
if mibBuilder.loadTexts: fnAlearEmaiCatVirus.setDescription('Turn on/off FortiGate sending an alert email when antivirus scanning detects a virus.')
fnAlertEmailCatNids = MibScalar((1, 3, 6, 1, 4, 1, 12356, 9, 3, 2, 2), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnAlertEmailCatNids.setStatus('mandatory')
if mibBuilder.loadTexts: fnAlertEmailCatNids.setDescription('Turn on/off FortiGate sending an alert email to notify the system administrator of attacks detected by the NIDS.')
fnAlearEmailCatCrit = MibScalar((1, 3, 6, 1, 4, 1, 12356, 9, 3, 2, 3), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnAlearEmailCatCrit.setStatus('mandatory')
if mibBuilder.loadTexts: fnAlearEmailCatCrit.setDescription('Turn on/off FortiGate sending an alert email when a critical firewall or VPN event occurs.')
fnLSTrafficFilterState = MibScalar((1, 3, 6, 1, 4, 1, 12356, 9, 1, 14, 1, 1), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnLSTrafficFilterState.setStatus('mandatory')
if mibBuilder.loadTexts: fnLSTrafficFilterState.setDescription('Description')
fnLSTrafficFilterType = MibScalar((1, 3, 6, 1, 4, 1, 12356, 9, 1, 14, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnLSTrafficFilterType.setStatus('mandatory')
if mibBuilder.loadTexts: fnLSTrafficFilterType.setDescription('Description')
fnLSTrafficFilterDisplay = MibScalar((1, 3, 6, 1, 4, 1, 12356, 9, 1, 14, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("portNumber", 1), ("serviceName", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnLSTrafficFilterDisplay.setStatus('mandatory')
if mibBuilder.loadTexts: fnLSTrafficFilterDisplay.setDescription('Description')
fnLSTrafficFilterResolveIp = MibScalar((1, 3, 6, 1, 4, 1, 12356, 9, 1, 14, 1, 4), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnLSTrafficFilterResolveIp.setStatus('mandatory')
if mibBuilder.loadTexts: fnLSTrafficFilterResolveIp.setDescription('Description')
fnLSEventFilterCfgChg = MibScalar((1, 3, 6, 1, 4, 1, 12356, 9, 1, 14, 2, 1), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnLSEventFilterCfgChg.setStatus('mandatory')
if mibBuilder.loadTexts: fnLSEventFilterCfgChg.setDescription('When configuration has been changed')
fnLSEventFilterIpsecNeg = MibScalar((1, 3, 6, 1, 4, 1, 12356, 9, 1, 14, 2, 2), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnLSEventFilterIpsecNeg.setStatus('mandatory')
if mibBuilder.loadTexts: fnLSEventFilterIpsecNeg.setDescription('Ipsec negotiation event')
fnLSEventFilterDhcpService = MibScalar((1, 3, 6, 1, 4, 1, 12356, 9, 1, 14, 2, 3), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnLSEventFilterDhcpService.setStatus('mandatory')
if mibBuilder.loadTexts: fnLSEventFilterDhcpService.setDescription('DHCP service event')
fnLSEventFilterPppoeService = MibScalar((1, 3, 6, 1, 4, 1, 12356, 9, 1, 14, 2, 4), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnLSEventFilterPppoeService.setStatus('mandatory')
if mibBuilder.loadTexts: fnLSEventFilterPppoeService.setDescription('PPPOE service event')
fnLSEventFilterAdminLogin = MibScalar((1, 3, 6, 1, 4, 1, 12356, 9, 1, 14, 2, 5), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnLSEventFilterAdminLogin.setStatus('mandatory')
if mibBuilder.loadTexts: fnLSEventFilterAdminLogin.setDescription('Admin login/out status event')
fnLSEventFilterIpmacStatus = MibScalar((1, 3, 6, 1, 4, 1, 12356, 9, 1, 14, 2, 6), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnLSEventFilterIpmacStatus.setStatus('mandatory')
if mibBuilder.loadTexts: fnLSEventFilterIpmacStatus.setDescription('IPMAC binding violation status event')
fnLSEventFilterSysAct = MibScalar((1, 3, 6, 1, 4, 1, 12356, 9, 1, 14, 2, 7), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnLSEventFilterSysAct.setStatus('mandatory')
if mibBuilder.loadTexts: fnLSEventFilterSysAct.setDescription('System activity event')
fnLSEventFilterHaAct = MibScalar((1, 3, 6, 1, 4, 1, 12356, 9, 1, 14, 2, 8), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnLSEventFilterHaAct.setStatus('mandatory')
if mibBuilder.loadTexts: fnLSEventFilterHaAct.setDescription('HA activity event')
fnLSEventFilterFwAuth = MibScalar((1, 3, 6, 1, 4, 1, 12356, 9, 1, 14, 2, 9), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnLSEventFilterFwAuth.setStatus('mandatory')
if mibBuilder.loadTexts: fnLSEventFilterFwAuth.setDescription('Firewall auth log event')
fnLSEventFilterGwConn = MibScalar((1, 3, 6, 1, 4, 1, 12356, 9, 1, 14, 2, 10), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnLSEventFilterGwConn.setStatus('mandatory')
if mibBuilder.loadTexts: fnLSEventFilterGwConn.setDescription('Routing gateway connection event')
fnLSVirusFilterDet = MibScalar((1, 3, 6, 1, 4, 1, 12356, 9, 1, 14, 3, 1), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnLSVirusFilterDet.setStatus('mandatory')
if mibBuilder.loadTexts: fnLSVirusFilterDet.setDescription('When virus is detected')
fnLSVirusFilterSigUpdate = MibScalar((1, 3, 6, 1, 4, 1, 12356, 9, 1, 14, 3, 2), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnLSVirusFilterSigUpdate.setStatus('mandatory')
if mibBuilder.loadTexts: fnLSVirusFilterSigUpdate.setDescription('When virus signature is updated')
fnLSWebFilterBanDet = MibScalar((1, 3, 6, 1, 4, 1, 12356, 9, 1, 14, 4, 1), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnLSWebFilterBanDet.setStatus('mandatory')
if mibBuilder.loadTexts: fnLSWebFilterBanDet.setDescription('When banned word is detected')
fnLSWebFilterScriptDet = MibScalar((1, 3, 6, 1, 4, 1, 12356, 9, 1, 14, 4, 2), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnLSWebFilterScriptDet.setStatus('mandatory')
if mibBuilder.loadTexts: fnLSWebFilterScriptDet.setDescription('When script is detected')
fnLSWebFilterPageBlk = MibScalar((1, 3, 6, 1, 4, 1, 12356, 9, 1, 14, 4, 3), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnLSWebFilterPageBlk.setStatus('mandatory')
if mibBuilder.loadTexts: fnLSWebFilterPageBlk.setDescription('When page is blocked')
mibBuilder.exportSymbols("FORTINET-MIB", fnWebFilterBannedWordLan=fnWebFilterBannedWordLan, fortigate400=fortigate400, fnFirewallIPMACToFw=fnFirewallIPMACToFw, fnVpnConEntry=fnVpnConEntry, fnFirewallSchRecurStartTime=fnFirewallSchRecurStartTime, fnFirewallSchRecurEndTime=fnFirewallSchRecurEndTime, fnLSEventFilterAdminLogin=fnLSEventFilterAdminLogin, fnSysSnmpSecUserAuthProto=fnSysSnmpSecUserAuthProto, fnVpnManualKeyConcentrator=fnVpnManualKeyConcentrator, fnSysConfigOpts=fnSysConfigOpts, fnFirewallContProfiles=fnFirewallContProfiles, fnVpnIKEPh2Auth3=fnVpnIKEPh2Auth3, fnAlertEmaiCfgEmail2=fnAlertEmaiCfgEmail2, fnLSTrafficSrcNetmask=fnLSTrafficSrcNetmask, fnAvQuarCfgInfecFileSmtp=fnAvQuarCfgInfecFileSmtp, fnFwContProfQuarantine=fnFwContProfQuarantine, fnSysZoneSecLevel=fnSysZoneSecLevel, fnUserLocalState=fnUserLocalState, fnFirewallPolicySrcAddr=fnFirewallPolicySrcAddr, fnVpnPPTPStartIp=fnVpnPPTPStartIp, fnAvCfgMsgName=fnAvCfgMsgName, fnWebfilterBannedWordsEntry=fnWebfilterBannedWordsEntry, fnAvFbRulePop3Blk=fnAvFbRulePop3Blk, fnSysNetworkAccessEntry=fnSysNetworkAccessEntry, fortinet=fortinet, fnAvCfgMsgDescription=fnAvCfgMsgDescription, fnFirewallIPMACAction=fnFirewallIPMACAction, fnVpnIKETimeout=fnVpnIKETimeout, fnSysNetworkIfStatus=fnSysNetworkIfStatus, fnSysZoneId=fnSysZoneId, fnSysSnmpViewType=fnSysSnmpViewType, fnFwContProfSpamFilter=fnFwContProfSpamFilter, fnSysNetworkDhcpExclRange2E=fnSysNetworkDhcpExclRange2E, fnAVVirusListEntry=fnAVVirusListEntry, fnVpnConTable=fnVpnConTable, fnSysNetworkIfEntry=fnSysNetworkIfEntry, fnAvFbRuleImapBlk=fnAvFbRuleImapBlk, fnLogHDFileName=fnLogHDFileName, fnAlertEmailCat=fnAlertEmailCat, fnSysNetworkDhcpExclRange1S=fnSysNetworkDhcpExclRange1S, fnFirewallIpPoolStartIp=fnFirewallIpPoolStartIp, fnNidsIdpState=fnNidsIdpState, fnVpnDialupMonLifetime=fnVpnDialupMonLifetime, fnSysUpdateIdsUpStatus=fnSysUpdateIdsUpStatus, fnSysNetworkIfMAC=fnSysNetworkIfMAC, fnLSEventFilterFwAuth=fnLSEventFilterFwAuth, fortigate60=fortigate60, fnFirewallAddrGrpIndex=fnFirewallAddrGrpIndex, fnAvFbRuleFilePat=fnAvFbRuleFilePat, fnFirewallPolicyAuth=fnFirewallPolicyAuth, fnFirewallServiceSrcPortLow=fnFirewallServiceSrcPortLow, fnVpnRemoteGWAuthMethod=fnVpnRemoteGWAuthMethod, fnSysSnmpACNv=fnSysSnmpACNv, fnFirewallSchOneName=fnFirewallSchOneName, fnVpnRemoteGWEntry=fnVpnRemoteGWEntry, fnFirewallPolicyVpnInNat=fnFirewallPolicyVpnInNat, fnLogHDEntryIndex=fnLogHDEntryIndex, fnSysSnmpViewSubtreeOid=fnSysSnmpViewSubtreeOid, fnVpnL2TPStartIp=fnVpnL2TPStartIp, fnFirewallSchOneIndex=fnFirewallSchOneIndex, fnWebFilterApplet=fnWebFilterApplet, fnFirewallIpPool=fnFirewallIpPool, fnSysNetworkIfSpeed=fnSysNetworkIfSpeed, fnNidsSigAttackName=fnNidsSigAttackName, fnVpnRemoteGWIp=fnVpnRemoteGWIp, fnLSEventFilterIpsecNeg=fnLSEventFilterIpsecNeg, fnSystem=fnSystem, fnVpnCert=fnVpnCert, fnSysNetworkAccessPing=fnSysNetworkAccessPing, fnVpnRemoteGWType=fnVpnRemoteGWType, fnAvQuarIndex=fnAvQuarIndex, fnWebFilterUrlState=fnWebFilterUrlState, fnFirewallServiceType=fnFirewallServiceType, fnSysSnmpACSecLevelPriv=fnSysSnmpACSecLevelPriv, fnWebFilterExemptUrl=fnWebFilterExemptUrl, fnFirewallAddrGrpEntry=fnFirewallAddrGrpEntry, fnAvFileBlkRuleEntry=fnAvFileBlkRuleEntry, fnNidsIdpSigSum=fnNidsIdpSigSum, fnVpnRemoteGWDeadPeerDet=fnVpnRemoteGWDeadPeerDet, fnSysNetworkIfIp2=fnSysNetworkIfIp2, fnSysSnmpACContexPre=fnSysSnmpACContexPre, fnSysNetworkRoutingTable=fnSysNetworkRoutingTable, fnSysSnmpSecGrpTable=fnSysSnmpSecGrpTable, fnSysSnmpInfo=fnSysSnmpInfo, fnVpnIKEKLifeSec=fnVpnIKEKLifeSec, fnSysNetworkIfAccPing=fnSysNetworkIfAccPing, fnFirewallIPMACBindingEntry=fnFirewallIPMACBindingEntry, fnNidsRespCfg=fnNidsRespCfg, fnVpnConMembers=fnVpnConMembers, fnSysUpdateConnStatus2=fnSysUpdateConnStatus2, fnFirewallSchOneTable=fnFirewallSchOneTable, fnNidsRespAlertDstAddrState=fnNidsRespAlertDstAddrState, fnUserRadiusSrvTable=fnUserRadiusSrvTable, fnLSEventFilterSysAct=fnLSEventFilterSysAct, fnVpnIKEPh2Encrp1=fnVpnIKEPh2Encrp1, fnVpnManualKeyEncrpAlgorithm=fnVpnManualKeyEncrpAlgorithm, fnVpnDialupMonTable=fnVpnDialupMonTable, fnSysNetworkIfOutFrag=fnSysNetworkIfOutFrag, fnFirewallSchOneEndTime=fnFirewallSchOneEndTime, fnFirewallIpPoolEntry=fnFirewallIpPoolEntry, fnLSTrafficDstNetmask=fnLSTrafficDstNetmask, fnSysMonSessionNum=fnSysMonSessionNum, fnAvQuarStatusDetail=fnAvQuarStatusDetail, fnSysNetworkDhcpDNS2=fnSysNetworkDhcpDNS2, fnSysUpdatePeriodicUpState=fnSysUpdatePeriodicUpState, fnFirewallIPMACStatus=fnFirewallIPMACStatus, fnFirewallVIPName=fnFirewallVIPName, fnAvQuarCfgBlkFilePop3=fnAvQuarCfgBlkFilePop3, fnWebFilterUrlBlkTable=fnWebFilterUrlBlkTable, fnFirewallPolicyNAT=fnFirewallPolicyNAT, fnWebFilterExemptUrlState=fnWebFilterExemptUrlState, fnAvQuarCfgBlkFileFtp=fnAvQuarCfgBlkFileFtp, fnFirewallSchOneStartDay=fnFirewallSchOneStartDay, fnLSTrafficFilterDisplay=fnLSTrafficFilterDisplay, fnVpnRemoteGWXAuthPap=fnVpnRemoteGWXAuthPap, fnNidsSigUserDefSum=fnNidsSigUserDefSum, fnFirewallServiceEntry=fnFirewallServiceEntry, fnSysNetworkDhcpLeaseDur=fnSysNetworkDhcpLeaseDur, fnVpnConIndex=fnVpnConIndex, fnSysSnmpSysLoc=fnSysSnmpSysLoc, fnNidsTypeIcmp=fnNidsTypeIcmp, fnLSTrafficAddrEntry=fnLSTrafficAddrEntry, fnSysNetworkIfPingSrvState=fnSysNetworkIfPingSrvState, fnVpnRemoteGWDpdRetryInt=fnVpnRemoteGWDpdRetryInt, fnSysSnmpViewName=fnSysSnmpViewName, fnVpnIKEReplayDet=fnVpnIKEReplayDet, fnFirewallServiceName=fnFirewallServiceName, fnSysConfigTimeDST=fnSysConfigTimeDST, fnWfCfgMsgName=fnWfCfgMsgName, fnFirewallIPMACTraffic=fnFirewallIPMACTraffic, fnVpnIKEDHGrp=fnVpnIKEDHGrp, fnSysConfigHAMonIf=fnSysConfigHAMonIf, fnSysConfigAdmin=fnSysConfigAdmin, fnSysNetworkDhcpExclRange2S=fnSysNetworkDhcpExclRange2S, fnSysNetworkRoutingGWIndex=fnSysNetworkRoutingGWIndex, fnSysSnmpACIndex=fnSysSnmpACIndex, fnWebFilterCookie=fnWebFilterCookie, fnLSEventFilterPppoeService=fnLSEventFilterPppoeService, fnSysNetworkIfAccTelnet=fnSysNetworkIfAccTelnet, fnSysNetworkVlanAccPing=fnSysNetworkVlanAccPing, fnSysSnmpTrapCom=fnSysSnmpTrapCom, fnSysSnmpSecUserPrivPasswd=fnSysSnmpSecUserPrivPasswd, fnAvCfgBlkEmailSmtp=fnAvCfgBlkEmailSmtp, fnFirewallIpPoolTable=fnFirewallIpPoolTable, fnUserRadiusSrvEntry=fnUserRadiusSrvEntry, fnVpnManualKeyRgw=fnVpnManualKeyRgw, fnSysNetworkRoutingIndex=fnSysNetworkRoutingIndex, fnFirewallIPMACName=fnFirewallIPMACName, fnUserLocalPasswd=fnUserLocalPasswd, fnVpnRemoteGWNatT=fnVpnRemoteGWNatT, fnNidsRespAlertSrcAddrState=fnNidsRespAlertSrcAddrState, fnFirewallAddrGrpTable=fnFirewallAddrGrpTable, fnVpnIKEIndex=fnVpnIKEIndex, fnSysNetworkRouting=fnSysNetworkRouting, fnLogSettingVirusFilter=fnLogSettingVirusFilter, fnLogSetting=fnLogSetting, fnFirewallPolicyMBand=fnFirewallPolicyMBand, fnAvVirusName=fnAvVirusName, fnSysNetworkDhcpSip=fnSysNetworkDhcpSip, fnNidsIdpTable=fnNidsIdpTable, fnSysSnmpSecUserEntry=fnSysSnmpSecUserEntry, fnSysNetworkRoutingEntry=fnSysNetworkRoutingEntry, fnSysStatus=fnSysStatus, fnFirewallAddrTable=fnFirewallAddrTable, fnSysNetwork=fnSysNetwork, fnNIDS=fnNIDS, fnSysStatusVersion=fnSysStatusVersion, fnSysSnmpGetCom=fnSysSnmpGetCom, fnFirewallPolicyVpnTunName=fnFirewallPolicyVpnTunName, fnNidsSigAttackId=fnNidsSigAttackId, fnVpnIKEGW1=fnVpnIKEGW1, fnAntiSpamBanWordEntry=fnAntiSpamBanWordEntry, fnSysConfigNTPState=fnSysConfigNTPState, fnSysNetworkAccessSnmp=fnSysNetworkAccessSnmp, fnFirewallAddrIp=fnFirewallAddrIp, fnFirewallServiceDstPortLow=fnFirewallServiceDstPortLow, fnFirewallAddrGrpMems=fnFirewallAddrGrpMems, fnSysZoneName=fnSysZoneName, fnFirewallAddrName=fnFirewallAddrName, fnSysNetworkVlanAccSsh=fnSysNetworkVlanAccSsh, fnSysConfigTimezone=fnSysConfigTimezone, fortigateGeneric=fortigateGeneric, fnSysSnmpACWv=fnSysSnmpACWv, fnLogToWebtrendsSrvAddr=fnLogToWebtrendsSrvAddr, fnAvQuarCfgInfecFileFtp=fnAvQuarCfgInfecFileFtp, fnAvQuarantineEntry=fnAvQuarantineEntry, fnNidsResponse=fnNidsResponse, fnFirewallServiceDstPortHigh=fnFirewallServiceDstPortHigh, fnVpnPPTPEndIp=fnVpnPPTPEndIp, fnFirewallPolicyFixPort=fnFirewallPolicyFixPort, fnAvQuarTtl=fnAvQuarTtl, fnLogSettingTrafficFilter=fnLogSettingTrafficFilter, fnLogTrafficExtToFw=fnLogTrafficExtToFw, fnFirewallServiceGroupTable=fnFirewallServiceGroupTable, fnFirewallPolicyDipPool=fnFirewallPolicyDipPool, fnVpnRemoteGWTable=fnVpnRemoteGWTable, fnFirewallPolicyTable=fnFirewallPolicyTable, fnVpnDialupMonTimeout=fnVpnDialupMonTimeout, fnSysNetworkAccessHttp=fnSysNetworkAccessHttp, fnSysSnmpACSecLevelAuth=fnSysSnmpACSecLevelAuth, fnSysNetworkAccessIfName=fnSysNetworkAccessIfName, fnFirewallIPMACIp=fnFirewallIPMACIp, fnVpnIKEKeepAlive=fnVpnIKEKeepAlive, fnVpnIKEKeylifeType=fnVpnIKEKeylifeType, fnSysMonitor=fnSysMonitor, fnWebFilterUrlBlkIndex=fnWebFilterUrlBlkIndex, fnVpnIKEPh2Encrp3=fnVpnIKEPh2Encrp3, fnSysSnmpv3AccCtrl=fnSysSnmpv3AccCtrl, fnSysNetworkDNSPri=fnSysNetworkDNSPri, fnLSWebFilterScriptDet=fnLSWebFilterScriptDet, fnSysUpdateVirusDefUpLast=fnSysUpdateVirusDefUpLast, fnSysSnmpv3ACState=fnSysSnmpv3ACState, fnAvQuarService=fnAvQuarService, fnLogVirusEvents=fnLogVirusEvents, fnFirewallPolicyVpnAllowOut=fnFirewallPolicyVpnAllowOut, fnLogIntrusions=fnLogIntrusions, fnVpnRemoteGWPh1Auth3=fnVpnRemoteGWPh1Auth3, fnAvFileBlkRuleTable=fnAvFileBlkRuleTable, fnSysNetworkRoutingDstIP=fnSysNetworkRoutingDstIP, fnVpnManualKeyTable=fnVpnManualKeyTable, fnVpnManualKeyName=fnVpnManualKeyName, fnNidsSigAttackRuleState=fnNidsSigAttackRuleState, fnSysMonCPUUsage=fnSysMonCPUUsage, fnSysSnmpViewTable=fnSysSnmpViewTable, fnVpnL2TPUserGrp=fnVpnL2TPUserGrp, fnNidsIdpSigProto=fnNidsIdpSigProto, fnSysNetworkDhcp=fnSysNetworkDhcp, fnLSVirusFilterSigUpdate=fnLSVirusFilterSigUpdate, fnWebFilterExemptUrlEntry=fnWebFilterExemptUrlEntry, fnLogToLocalFileSize=fnLogToLocalFileSize, fnLogAndRpt=fnLogAndRpt, fnFirewallIPMACState=fnFirewallIPMACState, fnVpnManualKeyIndex=fnVpnManualKeyIndex, fnLSWebFilterPageBlk=fnLSWebFilterPageBlk, fnSysNetworkDhcpDNS3=fnSysNetworkDhcpDNS3, fnLogSettingWebFilter=fnLogSettingWebFilter, fnVpnIKEName=fnVpnIKEName, fnLSTrafficFilterResolveIp=fnLSTrafficFilterResolveIp, fnFirewallAddrVlanId=fnFirewallAddrVlanId, fnFirewallSchOneUsed=fnFirewallSchOneUsed, fnAlertEmailCatNids=fnAlertEmailCatNids, fnSysNetworkDhcpExclRange3E=fnSysNetworkDhcpExclRange3E, fnFirewallAddress=fnFirewallAddress, fnFirewallSchRecurWeekdays=fnFirewallSchRecurWeekdays, fnLogHDLastAccTime=fnLogHDLastAccTime, fnSysStatusAVDBVersion=fnSysStatusAVDBVersion, fnFirewallServiceGroupUsed=fnFirewallServiceGroupUsed, fnFwContProfTable=fnFwContProfTable, fnVpnRemoteGWPreKey=fnVpnRemoteGWPreKey, fnSysSnmpACRv=fnSysSnmpACRv, fnVpnCertIssuer=fnVpnCertIssuer, fnFirewallVIPIndex=fnFirewallVIPIndex, fnFirewallPolicyVpnAllowIn=fnFirewallPolicyVpnAllowIn, fortigate50=fortigate50)
mibBuilder.exportSymbols("FORTINET-MIB", fnVpnManualKeyEngage=fnVpnManualKeyEngage, fnSysConfigHAGrpId=fnSysConfigHAGrpId, fnSysMonConnExp=fnSysMonConnExp, fnAvCfgMsgTable=fnAvCfgMsgTable, fnSysSnmpSecGrpName=fnSysSnmpSecGrpName, fnAlertEmaiCfgSmtpSrv=fnAlertEmaiCfgSmtpSrv, fnSysNetworkIfAddrMode=fnSysNetworkIfAddrMode, fnUserLocalType=fnUserLocalType, fnWebFilterScripts=fnWebFilterScripts, fnWebFilter=fnWebFilter, fnSysSnmp=fnSysSnmp, fnNidsIdpSigKeepAlive=fnNidsIdpSigKeepAlive, fnSysConfigAdminUserIp=fnSysConfigAdminUserIp, LanguageCode=LanguageCode, fnSysNetworkRoutingSrcIP=fnSysNetworkRoutingSrcIP, fnUserRadIndex=fnUserRadIndex, fnFirewallVIPMapPort=fnFirewallVIPMapPort, fnSysMonCPUInt=fnSysMonCPUInt, fnLSTrafficSrcPort=fnLSTrafficSrcPort, fnWebFilterUrlBlk=fnWebFilterUrlBlk, fnFirewallAddressNetmask=fnFirewallAddressNetmask, fnSysSnmpViewEntry=fnSysSnmpViewEntry, fnLogHDFileSize=fnLogHDFileSize, fnNidsTypeTcp=fnNidsTypeTcp, fnLSEventFilterDhcpService=fnLSEventFilterDhcpService, fnFirewallServiceIndex=fnFirewallServiceIndex, fnLSTrafficProto=fnLSTrafficProto, fnFirewallSchRecurTable=fnFirewallSchRecurTable, fortigate3600=fortigate3600, fnAvVirusIndex=fnAvVirusIndex, fnWebFilterBannedWords=fnWebFilterBannedWords, fnSysNetworkRoutingGW2=fnSysNetworkRoutingGW2, fnFwContProfUrlBlkState=fnFwContProfUrlBlkState, fnLSEventFilterGwConn=fnLSEventFilterGwConn, fnAntiSpamExemptEntry=fnAntiSpamExemptEntry, fnSysMonMemUsage=fnSysMonMemUsage, fnSysNetworkVlanName=fnSysNetworkVlanName, fnNidsMonIfs=fnNidsMonIfs, fnAvQuarFileName=fnAvQuarFileName, fnAvCfgMsgService=fnAvCfgMsgService, fnFirewallIpPoolIf=fnFirewallIpPoolIf, fnSysSnmpState=fnSysSnmpState, fnVpnRemoteGWMode=fnVpnRemoteGWMode, fnSysNetworkVlanAccHttp=fnSysNetworkVlanAccHttp, fnFwContProfEntry=fnFwContProfEntry, fnWfCfgMsgTable=fnWfCfgMsgTable, fnAlertEmai=fnAlertEmai, fnAntiSpamBanWordImapState=fnAntiSpamBanWordImapState, fnVpnPPTPStatus=fnVpnPPTPStatus, fnNidsGen=fnNidsGen, fnWebFilterUrlBlkEntry=fnWebFilterUrlBlkEntry, fnVpnIPSEC=fnVpnIPSEC, fnSysNetworkIfName=fnSysNetworkIfName, fnSysSnmpSecUserSecLevelAuth=fnSysSnmpSecUserSecLevelAuth, fnFwContProfBannedWordState=fnFwContProfBannedWordState, fnAvFbRuleSmtpBlk=fnAvFbRuleSmtpBlk, fnFwContProfName=fnFwContProfName, fnSysZoneEntry=fnSysZoneEntry, fnNidsRespLogDstAddrState=fnNidsRespLogDstAddrState, fnSysConfigHA=fnSysConfigHA, fnLogMemEntryIndex=fnLogMemEntryIndex, fnVpnIKEStatus=fnVpnIKEStatus, fnSysNetworkRoutingGWEntry=fnSysNetworkRoutingGWEntry, fnAvQuarCfgInfecFilePop3=fnAvQuarCfgInfecFilePop3, fnFirewallSchRecurIndex=fnFirewallSchRecurIndex, fnSysSnmp1stTrapIp=fnSysSnmp1stTrapIp, fnLSIdsFilterState=fnLSIdsFilterState, fnUserLocalRadiusSrv=fnUserLocalRadiusSrv, fnAvCfgBlkFileFtp=fnAvCfgBlkFileFtp, fnSysConfigOptsLan=fnSysConfigOptsLan, fnSysNetworkRoutingGWIP=fnSysNetworkRoutingGWIP, fortigate500=fortigate500, fnSysZoneBlkTraffic=fnSysZoneBlkTraffic, fnSysConfigAdminUserName=fnSysConfigAdminUserName, fnVpnManualKeyEntry=fnVpnManualKeyEntry, fnUserGrpMembers=fnUserGrpMembers, fnFirewallPolicyEntry=fnFirewallPolicyEntry, fnUserLocalIndex=fnUserLocalIndex, fnLogMemTable=fnLogMemTable, fnVpnIKEKeylifeKb=fnVpnIKEKeylifeKb, fnVpnRemoteGWPh1Encrp3=fnVpnRemoteGWPh1Encrp3, fnLogAllEvents=fnLogAllEvents, fnSysSnmpv3ACTable=fnSysSnmpv3ACTable, fnFwContProfPassFragEmail=fnFwContProfPassFragEmail, fnAlertEmaiCfgSmtpUser=fnAlertEmaiCfgSmtpUser, fnSysMonConnIndex=fnSysMonConnIndex, fnLSTrafficFilterType=fnLSTrafficFilterType, fnAntiSpamBlkIndex=fnAntiSpamBlkIndex, fnAvQuarCfgAgeLimit=fnAvQuarCfgAgeLimit, fnAntiSpamBlkPop3State=fnAntiSpamBlkPop3State, fnLSEventFilterCfgChg=fnLSEventFilterCfgChg, fnFirewallIpPoolIndex=fnFirewallIpPoolIndex, fnSysNetworkIfPingSrvAddr2=fnSysNetworkIfPingSrvAddr2, fnSysConfigTime=fnSysConfigTime, fnAvQuarantineTable=fnAvQuarantineTable, fnSysMonCPUIdle=fnSysMonCPUIdle, fnVpnRemoteGWDhGrp=fnVpnRemoteGWDhGrp, fortigate1000=fortigate1000, fnSysNetworkIfAccSsh=fnSysNetworkIfAccSsh, fnVpnIKEPh2Auth1=fnVpnIKEPh2Auth1, fnVpnRemoteGWPh1Encrp2=fnVpnRemoteGWPh1Encrp2, fnWfCfgMsgDescription=fnWfCfgMsgDescription, fnWfCfgMsgIndex=fnWfCfgMsgIndex, fnAVConfig=fnAVConfig, fnFirewallVIPMapIP=fnFirewallVIPMapIP, fnSysNetworkVlanId=fnSysNetworkVlanId, fnSysSnmpViewMask=fnSysSnmpViewMask, fnVpnDialupMonEntry=fnVpnDialupMonEntry, fnFirewallSchedule=fnFirewallSchedule, fnFirewallServiceSrcPortHigh=fnFirewallServiceSrcPortHigh, fnSysNetworkVlanIf=fnSysNetworkVlanIf, fnVpnRemoteGWLocalID=fnVpnRemoteGWLocalID, fnVpnConName=fnVpnConName, fnVpnPPTP=fnVpnPPTP, fnSysUpdatePeriodicUpTime=fnSysUpdatePeriodicUpTime, fnSysConfigTimeNTPInt=fnSysConfigTimeNTPInt, fnNidsSigEntry=fnNidsSigEntry, fnVpnRemoteGWPh1Auth1=fnVpnRemoteGWPh1Auth1, fnFirewallAddrZone=fnFirewallAddrZone, fnSysNetworkDhcpExclRange3S=fnSysNetworkDhcpExclRange3S, fnLSFilterSeverity=fnLSFilterSeverity, fortigate300=fortigate300, fnVpnManualKeyLocalSPI=fnVpnManualKeyLocalSPI, fnAlearEmaiCatVirus=fnAlearEmaiCatVirus, fortigate200=fortigate200, fnVpn=fnVpn, fnFirewallAddrEntry=fnFirewallAddrEntry, fnSysMonConnEntry=fnSysMonConnEntry, fnSysNetworkRoutingRIPSrv=fnSysNetworkRoutingRIPSrv, fnSysNetworkDNS=fnSysNetworkDNS, fnSysConfigTimeNTPSrv=fnSysConfigTimeNTPSrv, fnFirewallIPMACBinding=fnFirewallIPMACBinding, fnLogToRemHostAddr=fnLogToRemHostAddr, fnSysNetworkDhcpDNS1=fnSysNetworkDhcpDNS1, fnUserGrpName=fnUserGrpName, fnSysNetworkRoutingGWDeadDet=fnSysNetworkRoutingGWDeadDet, fnNidsRespLogMsg=fnNidsRespLogMsg, fnVpnRemoteGWDpdIdleCleanup=fnVpnRemoteGWDpdIdleCleanup, fnAvFbRuleFtpBlk=fnAvFbRuleFtpBlk, fnFirewallVIPProto=fnFirewallVIPProto, fnVpnIKEPh2Encrp2=fnVpnIKEPh2Encrp2, fnVpnRemoteGWPh1Auth2=fnVpnRemoteGWPh1Auth2, fnSysConfigAdminUserTable=fnSysConfigAdminUserTable, fnSysConfigHASchedule=fnSysConfigHASchedule, fnVpnL2TP=fnVpnL2TP, fnVpnIKEPh2Auth2=fnVpnIKEPh2Auth2, fnSysStatusSN=fnSysStatusSN, fnNidsTypeUdp=fnNidsTypeUdp, fnSysNetworkVlanIp=fnSysNetworkVlanIp, fnVpnRemoteGWKAFreq=fnVpnRemoteGWKAFreq, fnFirewallService=fnFirewallService, fnAvCfgMsgEntry=fnAvCfgMsgEntry, fnAntiVirus=fnAntiVirus, fnSysNetworkIfAccSnmp=fnSysNetworkIfAccSnmp, fnFirewallIpPoolEndIp=fnFirewallIpPoolEndIp, fnVpnRemoteGWName=fnVpnRemoteGWName, fnAvQuarCfgInfecFileImap=fnAvQuarCfgInfecFileImap, fnAntiSpamBlkEntry=fnAntiSpamBlkEntry, fnSysUpdatePushUpState=fnSysUpdatePushUpState, fnFwContProfAvScan=fnFwContProfAvScan, fnVpnIKEEntry=fnVpnIKEEntry, fnAvQuarCfgBlkFileSmtp=fnAvQuarCfgBlkFileSmtp, fnFirewallSchRecurName=fnFirewallSchRecurName, fnVpnRemoteGWPh1Encrp1=fnVpnRemoteGWPh1Encrp1, fnUserGrpIndex=fnUserGrpIndex, fnLSTrafficEntryIndex=fnLSTrafficEntryIndex, fnVpnRemoteGWDpdRetryCound=fnVpnRemoteGWDpdRetryCound, fnVpnCertCommonName=fnVpnCertCommonName, fnAntiSpamCfgSubTag=fnAntiSpamCfgSubTag, fnAvFileBlock=fnAvFileBlock, fnAvQuarCfgBlkFileImap=fnAvQuarCfgBlkFileImap, fnFirewallPolicyDestZone=fnFirewallPolicyDestZone, fnFirewallPolicyService=fnFirewallPolicyService, fnFirewall=fnFirewall, fnSysNetworkAccessTable=fnSysNetworkAccessTable, fnFirewallPolicyIndex=fnFirewallPolicyIndex, fnFwContProfSpamBlkList=fnFwContProfSpamBlkList, fnVpnDialupMonProxyIdDst=fnVpnDialupMonProxyIdDst, fnLogMemDetail=fnLogMemDetail, fnNidsSigUserDefTable=fnNidsSigUserDefTable, fnFirewallPolicyDestAddr=fnFirewallPolicyDestAddr, fnSysSnmp2ndTrapIp=fnSysSnmp2ndTrapIp, fnLSEventFilterHaAct=fnLSEventFilterHaAct, fnSysMonConnToPort=fnSysMonConnToPort, fnAvQuarStatus=fnAvQuarStatus, fnAlertEmaiCfgEmail3=fnAlertEmaiCfgEmail3, fnVpnIKEGW2=fnVpnIKEGW2, fnFirewallSchRecurUsed=fnFirewallSchRecurUsed, fnAntiSpamBlkImapState=fnAntiSpamBlkImapState, fnAntiSpamBanWordTable=fnAntiSpamBanWordTable, fnSysMonConnProto=fnSysMonConnProto, fnSysNetworkAccessHttps=fnSysNetworkAccessHttps, fnSysSnmpv3ACEntry=fnSysSnmpv3ACEntry, fnSysStatusOpMode=fnSysStatusOpMode, fnAlertEmaiCfg=fnAlertEmaiCfg, fnUserLocalRadiusOther=fnUserLocalRadiusOther, fnWebFilterBannedWordsTable=fnWebFilterBannedWordsTable, fnVpnRemoteGWXAuthUserName=fnVpnRemoteGWXAuthUserName, fnSysNetworkRoutingSrcNetmask=fnSysNetworkRoutingSrcNetmask, fnVpnIKEConcentrator=fnVpnIKEConcentrator, fnFirewallPolicySrcZone=fnFirewallPolicySrcZone, fnLSTrafficSrcAddr=fnLSTrafficSrcAddr, fnFirewallServiceProto=fnFirewallServiceProto, fnSysNetworkIfIndex=fnSysNetworkIfIndex, fnVpnCertType=fnVpnCertType, fnNidsSigUserDefEntry=fnNidsSigUserDefEntry, fnSysUpdateSpamDefUpLast=fnSysUpdateSpamDefUpLast, fnSysUpdate=fnSysUpdate, fnVpnRemoteGWXAuthPasswd=fnVpnRemoteGWXAuthPasswd, fnLSTrafficAddrTable=fnLSTrafficAddrTable, fnNidsIdpSigQSize=fnNidsIdpSigQSize, fnVpnRemoteGWPeerId=fnVpnRemoteGWPeerId, fnSysMonConnTable=fnSysMonConnTable, fortigate420=fortigate420, fnSysConfigHAPasswd=fnSysConfigHAPasswd, fnSysSnmpSecUserSecLevelPriv=fnSysSnmpSecUserSecLevelPriv, fnAvCfgBlkEmailPop3=fnAvCfgBlkEmailPop3, fnVpnManualKeyRemoteSPI=fnVpnManualKeyRemoteSPI, fnSysStatusNIDSDBVersion=fnSysStatusNIDSDBVersion, fnSysUpdateVirusDefUpStatus=fnSysUpdateVirusDefUpStatus, fnFirewallIPMACIndex=fnFirewallIPMACIndex, fnFwContProfFileBlk=fnFwContProfFileBlk, fnAvCfgBlkFileHttp=fnAvCfgBlkFileHttp, fnSysConfigAdminUserNetmask=fnSysConfigAdminUserNetmask, fnNidsTypeIP=fnNidsTypeIP, fnSysSnmpACGrpName=fnSysSnmpACGrpName, fnSysSnmpSecGrpEntry=fnSysSnmpSecGrpEntry, fnAlertEmaiCfgEmai1=fnAlertEmaiCfgEmai1, fnLogToLocalState=fnLogToLocalState, fnFirewallPolicyLog=fnFirewallPolicyLog, fnLogTrafficIntToFw=fnLogTrafficIntToFw, fnSysConfig=fnSysConfig, fnAvQuarCfgLowDiskOpt=fnAvQuarCfgLowDiskOpt, fnUserLocalTable=fnUserLocalTable, fnVpnCertTable=fnVpnCertTable, fnLSVirusFilterDet=fnLSVirusFilterDet, fortigate100=fortigate100, fnFirewallVirtualIP=fnFirewallVirtualIP, EncrytionAlgorithm=EncrytionAlgorithm, fnWebFilterCfg=fnWebFilterCfg, fnFirewallAddrGrpZone=fnFirewallAddrGrpZone, fnAvQuatantine=fnAvQuatantine, fnAvQuarCfgMaxFileSize=fnAvQuarCfgMaxFileSize, fnSysNetworkRoutingGWTable=fnSysNetworkRoutingGWTable, fnLog=fnLog, fnWebFilterActiveX=fnWebFilterActiveX, fnAntiSpamBanWordPat=fnAntiSpamBanWordPat, fnSysConfigHAMode=fnSysConfigHAMode, fortinetProducts=fortinetProducts, fnAlertEmaiCfgSmtpPasswd=fnAlertEmaiCfgSmtpPasswd, fnSysMonConnFromAddr=fnSysMonConnFromAddr, fnVpnDialupMonRGwName=fnVpnDialupMonRGwName, fnWfCfgMsgEntry=fnWfCfgMsgEntry, fnFirewallPolicyAction=fnFirewallPolicyAction)
mibBuilder.exportSymbols("FORTINET-MIB", fnSysNetworkRoutingGW1=fnSysNetworkRoutingGW1, fnNidsIdpSigThreshold=fnNidsIdpSigThreshold, fnWebFilterExemptUrlTable=fnWebFilterExemptUrlTable, fnSysUpdatePeriodicUpFreq=fnSysUpdatePeriodicUpFreq, fnSysUpdatePeriodicUpDay=fnSysUpdatePeriodicUpDay, fnSysNetworkDhcpEip=fnSysNetworkDhcpEip, fnFirewallIPMACMac=fnFirewallIPMACMac, fnFirewallServiceGroupEntry=fnFirewallServiceGroupEntry, fnSysSnmpSecUserName=fnSysSnmpSecUserName, fnNidsIdpEntry=fnNidsIdpEntry, fnLSTrafficDstAddr=fnLSTrafficDstAddr, fnLogToLocalTime=fnLogToLocalTime, fnFirewallPolicy=fnFirewallPolicy, fnSysMonConnToAddr=fnSysMonConnToAddr, fnFirewallSchRecurEntry=fnFirewallSchRecurEntry, fnNidsRespLogSrcAddrState=fnNidsRespLogSrcAddrState, fnSysNetworkIfIp=fnSysNetworkIfIp, fnVpnManualKeyReplayDet=fnVpnManualKeyReplayDet, fnSysNetworkVlanAccTelnet=fnSysNetworkVlanAccTelnet, fnSysNetworkIfTable=fnSysNetworkIfTable, fnAvQuarCfgInfecFileHttp=fnAvQuarCfgInfecFileHttp, fortigate2000=fortigate2000, fnVpnCertSerialNo=fnVpnCertSerialNo, fnVpnRemoteGWCertName=fnVpnRemoteGWCertName, fnFirewallSchOneStartTime=fnFirewallSchOneStartTime, fnNidsDetection=fnNidsDetection, fnSysNetworkRoutingDstNetmask=fnSysNetworkRoutingDstNetmask, fnUser=fnUser, fnSysConfigAdminUserEntry=fnSysConfigAdminUserEntry, fnWebFilterBWords=fnWebFilterBWords, fnFirewallVIPTable=fnFirewallVIPTable, fnFirewallVIPType=fnFirewallVIPType, fnSysSnmpSecurity=fnSysSnmpSecurity, fnSysMonConnFromPort=fnSysMonConnFromPort, fnSysNetworkVlanEntry=fnSysNetworkVlanEntry, fnFirewallVIPExtIP=fnFirewallVIPExtIP, fnFirewallPolicySchedule=fnFirewallPolicySchedule, fnVpnPPTPUserGrp=fnVpnPPTPUserGrp, fnLogHDEntry=fnLogHDEntry, fnNidsSigUserDefProto=fnNidsSigUserDefProto, fnFirewallSchOneEntry=fnFirewallSchOneEntry, fnFirewallSchOneEndDay=fnFirewallSchOneEndDay, fnFirewallPolicyTrafficPri=fnFirewallPolicyTrafficPri, fnLSTrafficFilterState=fnLSTrafficFilterState, fortigate3000=fortigate3000, fnNidsIdpSigName=fnNidsIdpSigName, fnVpnIKEPFSState=fnVpnIKEPFSState, fnLogMemEntry=fnLogMemEntry, fnFirewallPolicyAV=fnFirewallPolicyAV, fnLSEventFilterIpmacStatus=fnLSEventFilterIpmacStatus, fnUserGrpEntry=fnUserGrpEntry, fnSysNetworkDhcpStatus=fnSysNetworkDhcpStatus, fnWebFilterExemptUrlPat=fnWebFilterExemptUrlPat, fnVpnRemoteGWUserGrp=fnVpnRemoteGWUserGrp, fnVpnL2TPStatus=fnVpnL2TPStatus, fnSysNetworkDhcpDomain=fnSysNetworkDhcpDomain, fnSysConfigOptsLcdProtPin=fnSysConfigOptsLcdProtPin, fnSysMonUpTime=fnSysMonUpTime, fnSysConfigAdminUserIndex=fnSysConfigAdminUserIndex, fnFirewallVIPExtPort=fnFirewallVIPExtPort, fnAvFbRuleHttpBlk=fnAvFbRuleHttpBlk, fnFirewallVIPEntry=fnFirewallVIPEntry, fnUserLocalEntry=fnUserLocalEntry, fnAvQuarDc=fnAvQuarDc, fnSysNetworkIfAccHttps=fnSysNetworkIfAccHttps, fnAvCfgBlkEmailImap=fnAvCfgBlkEmailImap, fnNidsSigGrpName=fnNidsSigGrpName, fnVpnCertExpDate=fnVpnCertExpDate, fnLSTrafficDstPort=fnLSTrafficDstPort, fnUserLocalName=fnUserLocalName, fnSysConfigTimeVal=fnSysConfigTimeVal, fnSysNetworkIfNetmask=fnSysNetworkIfNetmask, fnSysNetworkIfAccHttp=fnSysNetworkIfAccHttp, fnSysNetworkAccessTelnet=fnSysNetworkAccessTelnet, fnFirewallServiceGroupIndex=fnFirewallServiceGroupIndex, fnAlearEmailCatCrit=fnAlearEmailCatCrit, fnSysNetworkAccessSsh=fnSysNetworkAccessSsh, fnVpnL2TPEndIp=fnVpnL2TPEndIp, fnVpnRemoteGWPeerGrpName=fnVpnRemoteGWPeerGrpName, fnUserGrpTable=fnUserGrpTable, fnSysNetworkVlanAccHttps=fnSysNetworkVlanAccHttps, fnSysNetworkRoutingDev2=fnSysNetworkRoutingDev2, fnNidsSigTable=fnNidsSigTable, fnSysNetworkDNSSecPri=fnSysNetworkDNSSecPri, fnVpnCertEntry=fnVpnCertEntry, fnNidsSigUserDefName=fnNidsSigUserDefName, fnFwContProfSpamExptList=fnFwContProfSpamExptList, fnSysNetworkDhcpExclRange1E=fnSysNetworkDhcpExclRange1E, fnAVVirusListTable=fnAVVirusListTable, fnAntiSpamExemptPop3State=fnAntiSpamExemptPop3State, ItemState=ItemState, fnSysSnmpSecGrpMembers=fnSysSnmpSecGrpMembers, fnAntiSpamBlkTable=fnAntiSpamBlkTable, fnAvQuarCfgBlkFileHttp=fnAvQuarCfgBlkFileHttp, fnLogSettingEventFilter=fnLogSettingEventFilter, fnVpnCertName=fnVpnCertName, fnSysConfigOptsLcdProt=fnSysConfigOptsLcdProt, fnSysNetworkIfNetmask2=fnSysNetworkIfNetmask2, fnSysConfigAdminUserPermission=fnSysConfigAdminUserPermission, fnAvQuarTime=fnAvQuarTime, fnFirewallPolicyProf=fnFirewallPolicyProf, fnUserRadAddr=fnUserRadAddr, AuthAlgorithm=AuthAlgorithm, fnSysZoneLogTraffic=fnSysZoneLogTraffic, fnSysConfigOptsIdleTimeout=fnSysConfigOptsIdleTimeout, fnFwContProfExptListState=fnFwContProfExptListState, fnSysZoneTable=fnSysZoneTable, fnSysNetworkDhcpDefRoute=fnSysNetworkDhcpDefRoute, fnSysUpdateIdsUpLast=fnSysUpdateIdsUpLast, fnSysUpdateConnStatus1=fnSysUpdateConnStatus1, fnSysSnmpSysName=fnSysSnmpSysName, fnFirewallServiceTable=fnFirewallServiceTable, fnSysNetworkVlanNetmask=fnSysNetworkVlanNetmask, fnWebFilterUrlBlkState=fnWebFilterUrlBlkState, fnAntiSpamBanWordIndex=fnAntiSpamBanWordIndex, fnVpnIKEGW3=fnVpnIKEGW3, fnAntiSpam=fnAntiSpam, fnFirewallAddrGrpName=fnFirewallAddrGrpName, fnNidsRespAlertMsg=fnNidsRespAlertMsg, fnVpnIKETable=fnVpnIKETable, fnFirewallVIPExtIf=fnFirewallVIPExtIf, fnVpnRemoteGWPeerOpt=fnVpnRemoteGWPeerOpt, fnLogToWebtrendsSrvState=fnLogToWebtrendsSrvState, fnLSWebFilterBanDet=fnLSWebFilterBanDet, fnWebFilterExemptUrlIndex=fnWebFilterExemptUrlIndex, fnAvQuarantineCfg=fnAvQuarantineCfg, fnSysNetworkIfPingSrvState2=fnSysNetworkIfPingSrvState2, fnAvCfgMsgIndex=fnAvCfgMsgIndex, fnNidsPrevention=fnNidsPrevention, fnLogToRemHostState=fnLogToRemHostState, fnNidsIdpSigState=fnNidsIdpSigState, fnAntiSpamBlkPat=fnAntiSpamBlkPat, fnSysConfigOptsAuthTimeout=fnSysConfigOptsAuthTimeout, fnSysUpdateSpamDefUpStatus=fnSysUpdateSpamDefUpStatus, fnFirewallIPMACThruFw=fnFirewallIPMACThruFw, fnFwContProfSpamBanWord=fnFwContProfSpamBanWord, fnAntiSpamExemptIndex=fnAntiSpamExemptIndex, fnSysNetworkIfPingSrvAddr=fnSysNetworkIfPingSrvAddr, fnVpnDialupMonIndex=fnVpnDialupMonIndex, fnLogHDTable=fnLogHDTable, fnVpnDialupMonProxyIdSrc=fnVpnDialupMonProxyIdSrc, fnFirewallPolicyGBand=fnFirewallPolicyGBand, fnWebFilterBannedWordState=fnWebFilterBannedWordState, fnWebFilterBannedWordIndex=fnWebFilterBannedWordIndex, fnVpnRemoteGWDpdIdleWorry=fnVpnRemoteGWDpdIdleWorry, fnFirewallServiceGroupName=fnFirewallServiceGroupName, fnAntiSpamExemptTable=fnAntiSpamExemptTable, fnFwContProfRemvScriptState=fnFwContProfRemvScriptState, fnWebFilterUrlPat=fnWebFilterUrlPat, fnSysSnmpSecUserTable=fnSysSnmpSecUserTable, fnFirewallIPMACBindingTable=fnFirewallIPMACBindingTable, fnVpnCertStatus=fnVpnCertStatus, fnLogToLocalOpt=fnLogToLocalOpt, fnWfCfgMsgService=fnWfCfgMsgService, fnFirewallServiceUsed=fnFirewallServiceUsed, fnAvFbRuleIndex=fnAvFbRuleIndex, fnSysSnmpSecUserAuthPasswd=fnSysSnmpSecUserAuthPasswd, fnUserRadName=fnUserRadName, fnSysNetworkVlanAccSnmp=fnSysNetworkVlanAccSnmp, fnSysSnmpGen=fnSysSnmpGen, fnVpnRemoteGWIndex=fnVpnRemoteGWIndex, fnAntiSpamBanWordPop3State=fnAntiSpamBanWordPop3State, fnSysNetworkRoutingDev1=fnSysNetworkRoutingDev1, fortinetTrap=fortinetTrap, fnLogSettingFilter=fnLogSettingFilter, fnSysSnmp3rdTrapIp=fnSysSnmp3rdTrapIp, fnVpnRemoteGWXAuth=fnVpnRemoteGWXAuth, fnAntiSpamExemptImapState=fnAntiSpamExemptImapState, fnFirewallServiceGroupValue=fnFirewallServiceGroupValue, fnFwContProfBigFileBlk=fnFwContProfBigFileBlk, fnSysSnmpACContextMatch=fnSysSnmpACContextMatch, fnVpnRemoteGWKeylife=fnVpnRemoteGWKeylife, fnUserRadSecret=fnUserRadSecret, fnSysNetworkVlanTable=fnSysNetworkVlanTable, fnSysNetworkVlanIndex=fnSysNetworkVlanIndex, fnFirewallPolicyVpnOutNat=fnFirewallPolicyVpnOutNat)
