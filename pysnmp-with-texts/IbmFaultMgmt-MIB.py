#
# PySNMP MIB module IbmFaultMgmt-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/IbmFaultMgmt-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:58:21 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibIdentifier, Counter64, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Gauge32, ObjectIdentity, ModuleIdentity, Counter32, enterprises, IpAddress, iso, Bits, Integer32, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "Counter64", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Gauge32", "ObjectIdentity", "ModuleIdentity", "Counter32", "enterprises", "IpAddress", "iso", "Bits", "Integer32", "TimeTicks")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
ibm = MibIdentifier((1, 3, 6, 1, 4, 1, 2))
ibmArchitecture = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 5))
alert = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 5, 1))
product_Set_ID = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 5, 1, 3)).setLabel("product-Set-ID")
supporting_Data_Correl = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 5, 1, 7)).setLabel("supporting-Data-Correl")
generic_Alert_Data = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 5, 1, 11)).setLabel("generic-Alert-Data")
probable_Causes = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 5, 1, 12)).setLabel("probable-Causes")
user_Causes = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 5, 1, 13)).setLabel("user-Causes")
install_Causes = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 5, 1, 14)).setLabel("install-Causes")
failure_Causes = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 5, 1, 15)).setLabel("failure-Causes")
detailed_Data_SV = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 5, 1, 17)).setLabel("detailed-Data-SV")
hwProductInstallSpecificInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2, 5, 1, 3, 1), )
if mibBuilder.loadTexts: hwProductInstallSpecificInfoTable.setStatus('optional')
if mibBuilder.loadTexts: hwProductInstallSpecificInfoTable.setDescription('A table containing information to identify hardware or microcode products. One or more entries in this table will be present in a trap.')
hwProductEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 5, 1, 3, 1, 1), )
if mibBuilder.loadTexts: hwProductEntry.setStatus('optional')
if mibBuilder.loadTexts: hwProductEntry.setDescription('The information required to identify a single hardware product. The index is the product being reported. The first entry identifies the product sending the trap. A second entry will be present in those traps reporting a condition in a product other than the trap sender.')
productClassificationHW = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 9))).clone(namedValues=NamedValues(("hwIBM", 1), ("hwIBM-NonIBM", 3), ("hwNonIBM", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: productClassificationHW.setStatus('optional')
if mibBuilder.loadTexts: productClassificationHW.setDescription('A code identifying the general classification of a product.')
formatType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(17))).clone(namedValues=NamedValues(("form11", 17)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: formatType.setStatus('optional')
if mibBuilder.loadTexts: formatType.setDescription('A code identifying the format type of a product instance.')
machineType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 1, 3, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: machineType.setStatus('optional')
if mibBuilder.loadTexts: machineType.setDescription('The machine type.')
modelNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 1, 3, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: modelNum.setStatus('optional')
if mibBuilder.loadTexts: modelNum.setDescription('Machine model number.')
plantOfManufacture = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 1, 3, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: plantOfManufacture.setStatus('optional')
if mibBuilder.loadTexts: plantOfManufacture.setDescription('Plant of manufacture.')
seqNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 1, 3, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(7, 7)).setFixedLength(7)).setMaxAccess("readonly")
if mibBuilder.loadTexts: seqNum.setStatus('optional')
if mibBuilder.loadTexts: seqNum.setDescription("Sequence number: right justified, with ASCII 0's fill on left.")
microcodeECLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 1, 3, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: microcodeECLevel.setStatus('optional')
if mibBuilder.loadTexts: microcodeECLevel.setDescription('The Engineering Change (EC) level of the failing microcode component. This object is included in a trap only when the reported problem is most probably caused by a microcode failure. This object continues to exist in the MIB even at times when it is not included in a trap, but a get will result in the object being returned with a length of 0.')
hardwareProdCommonName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 1, 3, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hardwareProdCommonName.setStatus('optional')
if mibBuilder.loadTexts: hardwareProdCommonName.setDescription('The name commonly used to identify the product.')
vendorIDhw = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 1, 3, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vendorIDhw.setStatus('optional')
if mibBuilder.loadTexts: vendorIDhw.setDescription("The name of the product vendor. This object is included in a trap only when the productClassificationHW object is set to 'hwNonIBM' or 'hwIBM-NonIBM'. This object continues to exist in the MIB even at times when it is not included in a trap, but a get will result in the object being returned with a length of 0.")
swProductInstallSpecificInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2, 5, 1, 3, 2), )
if mibBuilder.loadTexts: swProductInstallSpecificInfoTable.setStatus('optional')
if mibBuilder.loadTexts: swProductInstallSpecificInfoTable.setDescription('A table containing information to identify software products. This table is present in a trap when the condition being reported is in a software product or set of software products.')
swProductEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 5, 1, 3, 2, 1), )
if mibBuilder.loadTexts: swProductEntry.setStatus('optional')
if mibBuilder.loadTexts: swProductEntry.setDescription('The information required to identify a single software product. The index is the instnce of product being identified.')
productClassificationSW = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 1, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 12, 14))).clone(namedValues=NamedValues(("swIBM", 4), ("swNonIBM", 12), ("swIBM-NonIBM", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: productClassificationSW.setStatus('optional')
if mibBuilder.loadTexts: productClassificationSW.setDescription('A code identifying the general classification of a product.')
commonVerID = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 1, 3, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonVerID.setStatus('optional')
if mibBuilder.loadTexts: commonVerID.setDescription('Common version ID: right justified, with ASCII 0 fill on left.')
commonRelID = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 1, 3, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonRelID.setStatus('optional')
if mibBuilder.loadTexts: commonRelID.setDescription('Common release ID: right justified, with ASCII 0 fill on left.')
commonModID = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 1, 3, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonModID.setStatus('optional')
if mibBuilder.loadTexts: commonModID.setDescription('Common modification ID: right justified, with ASCII 0 fill on left.')
softwareProdCommonName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 1, 3, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: softwareProdCommonName.setStatus('optional')
if mibBuilder.loadTexts: softwareProdCommonName.setDescription('The name commonly used to identify the product.')
softwareProdProgNmbr = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 1, 3, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: softwareProdProgNmbr.setStatus('optional')
if mibBuilder.loadTexts: softwareProdProgNmbr.setDescription('The program product number as assigned by distribution personnel, or a substitute value supplied by a user-written software program.')
vendorIDsw = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 1, 3, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vendorIDsw.setStatus('optional')
if mibBuilder.loadTexts: vendorIDsw.setDescription("The name of the product vendor. This object is included in a trap only when the productClassificationSW object is set to 'swNonIBM' or 'swIBM-NonIBM'. This object continues to exist in the MIB even at times when it is not included in a trap, but a get will result in the object being returned with a length of 0.")
detailedDataSDTable = MibTable((1, 3, 6, 1, 4, 1, 2, 5, 1, 7, 2), )
if mibBuilder.loadTexts: detailedDataSDTable.setStatus('optional')
if mibBuilder.loadTexts: detailedDataSDTable.setDescription('A table of information correlation data.')
detailedDataSDEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 5, 1, 7, 2, 1), )
if mibBuilder.loadTexts: detailedDataSDEntry.setStatus('optional')
if mibBuilder.loadTexts: detailedDataSDEntry.setDescription('The information required by the trap receiver to correlate/retrieve additional data. All objects in this entry will be provided. The index is the instance/number of the correlator. Multiple entries will be provided when multiple sets of data are available.')
productIDCodeSD = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 1, 7, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 41, 42, 153, 154))).clone(namedValues=NamedValues(("displayNone", 0), ("displayFirstHW", 41), ("displaySecondHW", 42), ("displayFirstSW", 153), ("displaySecondSW", 154)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: productIDCodeSD.setStatus('optional')
if mibBuilder.loadTexts: productIDCodeSD.setDescription('A code indicating what product identification, if any is to displayed in conjunction with the data-type and data. displayNone - Do not display any product identification data in conjunction with the data-type and data. displayFirstHW - display machine type or product common name from the first entry of the machineType or hardwareProdCommonName objects in the hwProductInstallSpecificInfoTable. displaySecondHW - display machine type or product common name from the second entry of the machineType or hardwareProdCommonName objects in the hwProductInstallSpecificInfoTable. displayFirstSW - display software product common name from the first entry of the softwareProdCommonName object in the swProductInstallSpecificInfoTable. displaySecondSW - display software product common name from the second entry of the softwareProdCommonName object in the swProductInstallSpecificInfoTable.')
dataIDCodeSD = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 1, 7, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataIDCodeSD.setStatus('optional')
if mibBuilder.loadTexts: dataIDCodeSD.setDescription('A Detailed Data Code Point (Data ID code point) (described in IBM document GA27-3136) indicating the type of data provided. The English text associated with each code point or its national language equivalent is displayed with the correlation data.')
dataEncodingSD = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 1, 7, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 17))).clone(namedValues=NamedValues(("hex", 0), ("binary", 1), ("ascii", 17)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataEncodingSD.setStatus('optional')
if mibBuilder.loadTexts: dataEncodingSD.setDescription('A code indicating how the accompanying correlation data is encoded, and thus how it is to be decoded and displayed.')
dataSD = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 1, 7, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 44))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataSD.setStatus('optional')
if mibBuilder.loadTexts: dataSD.setDescription('Correlation data encoded as specified by the dataEncodingSD object.')
flags = MibScalar((1, 3, 6, 1, 4, 1, 2, 5, 1, 11, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: flags.setStatus('mandatory')
if mibBuilder.loadTexts: flags.setDescription('This object is always set to the value 0. It may be used in the future to further indicate why/when the trap was sent.')
alertType = MibScalar((1, 3, 6, 1, 4, 1, 2, 5, 1, 11, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 17, 18))).clone(namedValues=NamedValues(("perm", 1), ("temp", 2), ("perf", 3), ("pend", 17), ("unkn", 18)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alertType.setStatus('mandatory')
if mibBuilder.loadTexts: alertType.setDescription('A code indicating the severity of the condition being reported.')
alertDescriptionCode = MibScalar((1, 3, 6, 1, 4, 1, 2, 5, 1, 11, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alertDescriptionCode.setStatus('mandatory')
if mibBuilder.loadTexts: alertDescriptionCode.setDescription('An Alert Description Code Point (described in IBM document GA27-3136) denoting the problem being reported.')
probableCausesTable = MibTable((1, 3, 6, 1, 4, 1, 2, 5, 1, 12, 1), )
if mibBuilder.loadTexts: probableCausesTable.setStatus('mandatory')
if mibBuilder.loadTexts: probableCausesTable.setDescription('A table of probable cause data.')
probableCausesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 5, 1, 12, 1, 1), )
if mibBuilder.loadTexts: probableCausesEntry.setStatus('mandatory')
if mibBuilder.loadTexts: probableCausesEntry.setDescription('An entry of probable cause data. The index is the number/instance of the probable cause.')
probableCause = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 1, 12, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: probableCause.setStatus('mandatory')
if mibBuilder.loadTexts: probableCause.setDescription('A Probable Cause Code Point (described in IBM document GA27-3136) denoting the probable cause of the reported problem. From one to four instances of this object (in order of decreasing probability) are provided in a trap.')
userCausesTable = MibTable((1, 3, 6, 1, 4, 1, 2, 5, 1, 13, 1), )
if mibBuilder.loadTexts: userCausesTable.setStatus('optional')
if mibBuilder.loadTexts: userCausesTable.setDescription('A table of user cause data.')
userCausesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 5, 1, 13, 1, 1), )
if mibBuilder.loadTexts: userCausesEntry.setStatus('optional')
if mibBuilder.loadTexts: userCausesEntry.setDescription('An entry of user cause data. The index is the number/instance of the user cause.')
userCause = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 1, 13, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: userCause.setStatus('optional')
if mibBuilder.loadTexts: userCause.setDescription('A User Cause Code Point (described in IBM document GA27-3136) denoting the probable user cause of the reported problem. From From 0 to 4 instances of this object (in order of decreasing probability) are provided in a trap.')
recommendedActionsUCTable = MibTable((1, 3, 6, 1, 4, 1, 2, 5, 1, 13, 2), )
if mibBuilder.loadTexts: recommendedActionsUCTable.setStatus('optional')
if mibBuilder.loadTexts: recommendedActionsUCTable.setDescription('A table of recommended action data.')
recommendedActionsUCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 5, 1, 13, 2, 1), )
if mibBuilder.loadTexts: recommendedActionsUCEntry.setStatus('optional')
if mibBuilder.loadTexts: recommendedActionsUCEntry.setDescription('An entry of recommended action data. The index is the number/instance of the recommended action.')
recommendedActionUC = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 1, 13, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: recommendedActionUC.setStatus('optional')
if mibBuilder.loadTexts: recommendedActionUC.setDescription('A Recommended Action Code Point (described in IBM document GA27-3136) denoting the recommended action to take to resolve the problem. From 0 to 4 instances of this object (in order of decreasing probability) are provided in a trap. If an instance of the userCause object is present, at least one instance of this object will be present.')
detailedDataUCTable = MibTable((1, 3, 6, 1, 4, 1, 2, 5, 1, 13, 3), )
if mibBuilder.loadTexts: detailedDataUCTable.setStatus('optional')
if mibBuilder.loadTexts: detailedDataUCTable.setDescription('A table of data to be inserted into the text indexed by the user cause and/or recommended action code points.')
detailedDataUCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 5, 1, 13, 3, 1), )
if mibBuilder.loadTexts: detailedDataUCEntry.setStatus('optional')
if mibBuilder.loadTexts: detailedDataUCEntry.setDescription("The information required to display product identification, data type, and detailed data. The index is the instance/number of the detailed data. The following rules are used for providing entries: * An entry is provided for each instance of the userCause object and/or recommendedActionUC object containing a codepoint whose third character is 'A' or 'B'. * Two entries are provided for each instance of the userCause object and/or recommendedActionUC object containing a codepoint whose third character is 'C'. * Three entries are provided for each instance of the userCause object and/or recommendedActionUC object containing a codepoint whose third character is 'D'. Entries are provided in the order of the occurrance of the code points requiring them.")
productIDCodeUC = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 1, 13, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 41, 42, 153, 154))).clone(namedValues=NamedValues(("displayNone", 0), ("displayFirstHW", 41), ("displaySecondHW", 42), ("displayFirstSW", 153), ("displaySecondSW", 154)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: productIDCodeUC.setStatus('optional')
if mibBuilder.loadTexts: productIDCodeUC.setDescription('A code indicating what product identification, if any is to displayed in conjunction with the data-type and data. displayNone - Do not display any product identification data in conjunction with the data-type and data. displayFirstHW - display machine type or product common name from the first entry of the machineType or hardwareProdCommonName objects in the hwProductInstallSpecificInfoTable. displaySecondHW - display machine type or product common name from the second entry of the machineType or hardwareProdCommonName objects in the hwProductInstallSpecificInfoTable. displayFirstSW - display software product common name from the first entry of the softwareProdCommonName object in the swProductInstallSpecificInfoTable. displaySecondSW - display software product common name from the second entry of the softwareProdCommonName object in the swProductInstallSpecificInfoTable.')
dataIDCodeUC = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 1, 13, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataIDCodeUC.setStatus('optional')
if mibBuilder.loadTexts: dataIDCodeUC.setDescription('A Detailed Data Code Point (Data ID code point) (described in IBM document GA27-3136) indicating the type of data provided. The English text associated with each code point or its national language equivalent is displayed with the detailed data.')
dataEncodingUC = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 1, 13, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 17))).clone(namedValues=NamedValues(("hex", 0), ("binary", 1), ("ascii", 17)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataEncodingUC.setStatus('optional')
if mibBuilder.loadTexts: dataEncodingUC.setDescription('A code indicating how the accompanying detailed data is encoded, and thus how it is to be decoded and displayed.')
dataUC = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 1, 13, 3, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 44))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataUC.setStatus('optional')
if mibBuilder.loadTexts: dataUC.setDescription('Detailed data encoded as specified by the dataEncodingUC object.')
productSetIDIndexUCTable = MibTable((1, 3, 6, 1, 4, 1, 2, 5, 1, 13, 4), )
if mibBuilder.loadTexts: productSetIDIndexUCTable.setStatus('optional')
if mibBuilder.loadTexts: productSetIDIndexUCTable.setDescription('A table a describing how product identification data will be inserted into the text indexed by the user cause or recommended action code points.')
productSetIDIndexUCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 5, 1, 13, 4, 1), )
if mibBuilder.loadTexts: productSetIDIndexUCEntry.setStatus('optional')
if mibBuilder.loadTexts: productSetIDIndexUCEntry.setDescription("An instance of information required to display product identification data. The index is the instance of the Product Set ID Index. An entry is provided for each instance of the userCause object and/or recommendedActionUC object containing a codepoint whose third character is 'E'. Entries are provided in the order of the occurrance of the code points requiring them.")
productSetIDIndexUC = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 1, 13, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(41, 42, 153, 154))).clone(namedValues=NamedValues(("displayFirstHW", 41), ("displaySecondHW", 42), ("displayFirstSW", 153), ("displaySecondSW", 154)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: productSetIDIndexUC.setStatus('optional')
if mibBuilder.loadTexts: productSetIDIndexUC.setDescription('This object provides a code indicating how product identification data is to be inserted into the text indexed by the user cause and/or recommended action code points. displayFirstHW - display machine type or product common name from the first instance of the machineType or hardwareProdCommonName objects. displaySecondHW - display machine type or product common name from the second instance of the machineType or hardwareProdCommonName objects. displayFirstSW - display software product common name from the first entry of the softwareProdCommonName object in the swProductInstallSpecificInfoTable. displaySecondSW - display software product common name from the second entry of the softwareProdCommonName object in the swProductInstallSpecificInfoTable.')
installCausesTable = MibTable((1, 3, 6, 1, 4, 1, 2, 5, 1, 14, 1), )
if mibBuilder.loadTexts: installCausesTable.setStatus('optional')
if mibBuilder.loadTexts: installCausesTable.setDescription('A table of install cause data.')
installCausesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 5, 1, 14, 1, 1), )
if mibBuilder.loadTexts: installCausesEntry.setStatus('optional')
if mibBuilder.loadTexts: installCausesEntry.setDescription('An entry of install cause data. The index is the number/instance of the install cause.')
installCause = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 1, 14, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: installCause.setStatus('optional')
if mibBuilder.loadTexts: installCause.setDescription('An Install Cause Code Point (described in IBM document GA27-3136) denoting the probable install cause of the reported problem. From From 0 to 4 instances of this object (in order of decreasing probability) are provided in a trap.')
recommendedActionsICTable = MibTable((1, 3, 6, 1, 4, 1, 2, 5, 1, 14, 2), )
if mibBuilder.loadTexts: recommendedActionsICTable.setStatus('optional')
if mibBuilder.loadTexts: recommendedActionsICTable.setDescription('A table of recommended action data.')
recommendedActionsICEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 5, 1, 14, 2, 1), )
if mibBuilder.loadTexts: recommendedActionsICEntry.setStatus('optional')
if mibBuilder.loadTexts: recommendedActionsICEntry.setDescription('An entry of recommended action data. The index is the number/instance of the recommended action.')
recommendedActionIC = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 1, 14, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: recommendedActionIC.setStatus('optional')
if mibBuilder.loadTexts: recommendedActionIC.setDescription('A Recommended Action Code Point (described in IBM document GA27-3136) denoting the recommended action to take to resolve the problem. From 0 to 4 instances of this object (in order of decreasing probability) are provided in a trap. If an instance of the installCause object is present, at least one instance of this object will be present.')
detailedDataICTable = MibTable((1, 3, 6, 1, 4, 1, 2, 5, 1, 14, 3), )
if mibBuilder.loadTexts: detailedDataICTable.setStatus('optional')
if mibBuilder.loadTexts: detailedDataICTable.setDescription('A table of data to be inserted into the text indexed by the install cause and/or recommended action code points.')
detailedDataICEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 5, 1, 14, 3, 1), )
if mibBuilder.loadTexts: detailedDataICEntry.setStatus('optional')
if mibBuilder.loadTexts: detailedDataICEntry.setDescription("The information required to display product identification, data type, and detailed data. The index is the instance/number of the detailed data. The following rules are used for providing entries: * An entry is provided for each instance of the installCause object and/or recommendedActionIC object containing a codepoint whose third character is 'A' or 'B'. * Two entries are provided for each instance of the installCause object and/or recommendedActionIC object containing a codepoint whose third character is 'C'. * Three entries are provided for each instance of the installCause object and/or recommendedActionIC object containing a codepoint whose third character is 'D'. Entries are provided in the order of the occurrance of the code points requiring them.")
productIDCodeIC = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 1, 14, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 41, 42, 153, 154))).clone(namedValues=NamedValues(("displayNone", 0), ("displayFirstHW", 41), ("displaySecondHW", 42), ("displayFirstSW", 153), ("displaySecondSW", 154)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: productIDCodeIC.setStatus('optional')
if mibBuilder.loadTexts: productIDCodeIC.setDescription('A code indicating what product identification, if any is to displayed in conjunction with the data-type and data. displayNone - Do not display any product identification data in conjunction with the data-type and data. displayFirstHW - display machine type or product common name from the first entry of the machineType or hardwareProdCommonName objects in the hwProductInstallSpecificInfoTable. displaySecondHW - display machine type or product common name from the second entry of the machineType or hardwareProdCommonName objects in the hwProductInstallSpecificInfoTable. displayFirstSW - display software product common name from the first entry of the softwareProdCommonName object in the swProductInstallSpecificInfoTable. displaySecondSW - display software product common name from the second entry of the softwareProdCommonName object in the swProductInstallSpecificInfoTable.')
dataIDCodeIC = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 1, 14, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataIDCodeIC.setStatus('optional')
if mibBuilder.loadTexts: dataIDCodeIC.setDescription('A Detailed Data Code Point (Data ID code point) (described in IBM document GA27-3136) indicating the type of data provided. The English text associated with each code point or its national language equivalent is displayed with the detailed data.')
dataEncodingIC = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 1, 14, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 17))).clone(namedValues=NamedValues(("hex", 0), ("binary", 1), ("ascii", 17)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataEncodingIC.setStatus('optional')
if mibBuilder.loadTexts: dataEncodingIC.setDescription('A code indicating how the accompanying detailed data is encoded, and thus how it is to be decoded and displayed.')
dataIC = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 1, 14, 3, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 44))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataIC.setStatus('optional')
if mibBuilder.loadTexts: dataIC.setDescription('Detailed data encoded as specified by the dataEncodingIC object.')
productSetIDIndexICTable = MibTable((1, 3, 6, 1, 4, 1, 2, 5, 1, 14, 4), )
if mibBuilder.loadTexts: productSetIDIndexICTable.setStatus('optional')
if mibBuilder.loadTexts: productSetIDIndexICTable.setDescription('A table a describing how product identification data will be inserted into the text indexed by the install cause or recommended action code points.')
productSetIDIndexICEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 5, 1, 14, 4, 1), )
if mibBuilder.loadTexts: productSetIDIndexICEntry.setStatus('optional')
if mibBuilder.loadTexts: productSetIDIndexICEntry.setDescription("An instance of information required to display product identification data. The index is the instance of the Product Set ID Index. An entry is provided for each instance of the installCause object and/or recommendedActionIC object containing a codepoint whose third character is 'E'. Entries are provided in the order of the occurrance of the code points requiring them.")
productSetIDIndexIC = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 1, 14, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(41, 42, 153, 154))).clone(namedValues=NamedValues(("displayFirstHW", 41), ("displaySecondHW", 42), ("displayFirstSW", 153), ("displaySecondSW", 154)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: productSetIDIndexIC.setStatus('optional')
if mibBuilder.loadTexts: productSetIDIndexIC.setDescription('This object provides a code indicating how product identification data is to be inserted into the text indexed by the install cause and/or recommended action code points. displayFirstHW - display machine type or product common name from the first instance of the machineType or hardwareProdCommonName objects. displaySecondHW - display machine type or product common name from the second instance of the machineType or hardwareProdCommonName objects. displayFirstSW - display software product common name from the first entry of the softwareProdCommonName object in the swProductInstallSpecificInfoTable. displaySecondSW - display software product common name from the second entry of the softwareProdCommonName object in the swProductInstallSpecificInfoTable.')
failureCausesTable = MibTable((1, 3, 6, 1, 4, 1, 2, 5, 1, 15, 1), )
if mibBuilder.loadTexts: failureCausesTable.setStatus('optional')
if mibBuilder.loadTexts: failureCausesTable.setDescription('A table of failure cause data.')
failureCausesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 5, 1, 15, 1, 1), )
if mibBuilder.loadTexts: failureCausesEntry.setStatus('optional')
if mibBuilder.loadTexts: failureCausesEntry.setDescription('An entry of failure cause data. The index is the number/instance of the failure cause.')
failureCause = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 1, 15, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: failureCause.setStatus('optional')
if mibBuilder.loadTexts: failureCause.setDescription('A Failure Cause Code Point (described in IBM document GA27-3136) denoting the probable failure cause of the reported problem. From 0 to 4 instances of this object (in order of decreasing probability) are provided in a trap.')
recommendedActionsFCTable = MibTable((1, 3, 6, 1, 4, 1, 2, 5, 1, 15, 2), )
if mibBuilder.loadTexts: recommendedActionsFCTable.setStatus('optional')
if mibBuilder.loadTexts: recommendedActionsFCTable.setDescription('A table of recommended action data.')
recommendedActionsFCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 5, 1, 15, 2, 1), )
if mibBuilder.loadTexts: recommendedActionsFCEntry.setStatus('optional')
if mibBuilder.loadTexts: recommendedActionsFCEntry.setDescription('An entry of recommended action data. The index is the number/instance of the recommended action.')
recommendedActionFC = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 1, 15, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: recommendedActionFC.setStatus('optional')
if mibBuilder.loadTexts: recommendedActionFC.setDescription('A Recommended Action Code Point (described in IBM document GA27-3136) denoting the recommended action to take to resolve the problem. From 0 to 4 instances of this object (in order of decreasing probability) are provided in a trap. If an instance of the failureCause object is present, at least one instance of this object will be present.')
detailedDataFCTable = MibTable((1, 3, 6, 1, 4, 1, 2, 5, 1, 15, 3), )
if mibBuilder.loadTexts: detailedDataFCTable.setStatus('optional')
if mibBuilder.loadTexts: detailedDataFCTable.setDescription('A table of data to be inserted into the text indexed by the failure cause and/or recommended action code points.')
detailedDataFCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 5, 1, 15, 3, 1), )
if mibBuilder.loadTexts: detailedDataFCEntry.setStatus('optional')
if mibBuilder.loadTexts: detailedDataFCEntry.setDescription("The information required to display product identification, data type, and detailed data. The index is the instance/number of the detailed data. The following rules are used for providing entries: * An entry is provided for each instance of the failureCause object and/or recommendedActionFC object containing a codepoint whose third character is 'A' or 'B'. * Two entries are provided for each instance of the failureCause object and/or recommendedActionFC object containing a codepoint whose third character is 'C'. * Three entries are provided for each instance of the failureCause object and/or recommendedActionFC object containing a codepoint whose third character is 'D'. Entries are provided in the order of the occurrance of the code points requiring them.")
productIDCodeFC = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 1, 15, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 41, 42, 153, 154))).clone(namedValues=NamedValues(("displayNone", 0), ("displayFirstHW", 41), ("displaySecondHW", 42), ("displayFirstSW", 153), ("displaySecondSW", 154)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: productIDCodeFC.setStatus('optional')
if mibBuilder.loadTexts: productIDCodeFC.setDescription('A code indicating what product identification, if any is to displayed in conjunction with the data-type and data. displayNone - Do not display any product identification data in conjunction with the data-type and data. displayFirstHW - display machine type or product common name from the first entry of the machineType or hardwareProdCommonName objects in the hwProductInstallSpecificInfoTable. displaySecondHW - display machine type or product common name from the second entry of the machineType or hardwareProdCommonName objects in the hwProductInstallSpecificInfoTable. displayFirstSW - display software product common name from the first entry of the softwareProdCommonName object in the swProductInstallSpecificInfoTable. displaySecondSW - display software product common name from the second entry of the softwareProdCommonName object in the swProductInstallSpecificInfoTable.')
dataIDCodeFC = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 1, 15, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataIDCodeFC.setStatus('optional')
if mibBuilder.loadTexts: dataIDCodeFC.setDescription('A Detailed Data Code Point (Data ID code point) (described in IBM document GA27-3136) indicating the type of data provided. The English text associated with each code point or its national language equivalent is displayed with the detailed data.')
dataEncodingFC = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 1, 15, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 17))).clone(namedValues=NamedValues(("hex", 0), ("binary", 1), ("ascii", 17)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataEncodingFC.setStatus('optional')
if mibBuilder.loadTexts: dataEncodingFC.setDescription('A code indicating how the accompanying detailed data is encoded, and thus how it is to be decoded and displayed.')
dataFC = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 1, 15, 3, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 44))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataFC.setStatus('optional')
if mibBuilder.loadTexts: dataFC.setDescription('Detailed data encoded as specified by the dataEncodingFC object.')
productSetIDIndexFCTable = MibTable((1, 3, 6, 1, 4, 1, 2, 5, 1, 15, 4), )
if mibBuilder.loadTexts: productSetIDIndexFCTable.setStatus('optional')
if mibBuilder.loadTexts: productSetIDIndexFCTable.setDescription('A table a describing how product identification data will be inserted into the text indexed by the failure cause or recommended action code points.')
productSetIDIndexFCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 5, 1, 15, 4, 1), )
if mibBuilder.loadTexts: productSetIDIndexFCEntry.setStatus('optional')
if mibBuilder.loadTexts: productSetIDIndexFCEntry.setDescription("An instance of information required to display product identification data. The index is the instance of the Product Set ID Index. An entry is provided for each instance of the failureCause object and/or recommendedActionFC object containing a codepoint whose third character is 'E'. Entries are provided in the order of the occurrance of the code points requiring them.")
productSetIDIndexFC = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 1, 15, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(41, 42, 153, 154))).clone(namedValues=NamedValues(("displayFirstHW", 41), ("displaySecondHW", 42), ("displayFirstSW", 153), ("displaySecondSW", 154)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: productSetIDIndexFC.setStatus('optional')
if mibBuilder.loadTexts: productSetIDIndexFC.setDescription('This object provides a code indicating how product identification data is to be inserted into the text indexed by the failure cause and/or recommended action code points. displayFirstHW - display machine type or product common name from the first instance of the machineType or hardwareProdCommonName objects. displaySecondHW - display machine type or product common name from the second instance of the machineType or hardwareProdCommonName objects. displayFirstSW - display software product common name from the first entry of the softwareProdCommonName object in the swProductInstallSpecificInfoTable. displaySecondSW - display software product common name from the second entry of the softwareProdCommonName object in the swProductInstallSpecificInfoTable.')
detailedDataDDTable = MibTable((1, 3, 6, 1, 4, 1, 2, 5, 1, 17, 1), )
if mibBuilder.loadTexts: detailedDataDDTable.setStatus('optional')
if mibBuilder.loadTexts: detailedDataDDTable.setDescription('A table of product-specific detailed data.')
detailedDataDDEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 5, 1, 17, 1, 1), )
if mibBuilder.loadTexts: detailedDataDDEntry.setStatus('optional')
if mibBuilder.loadTexts: detailedDataDDEntry.setDescription('The information required to display product identification, data type, and detailed data. The index is the instance/number of the detailed data.')
productIDCodeDD = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 1, 17, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 41, 42, 153, 154))).clone(namedValues=NamedValues(("displayNone", 0), ("displayFirstHW", 41), ("displaySecondHW", 42), ("displayFirstSW", 153), ("displaySecondSW", 154)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: productIDCodeDD.setStatus('optional')
if mibBuilder.loadTexts: productIDCodeDD.setDescription('A code indicating what product identification, if any is to displayed in conjunction with the data-type and data. displayNone - Do not display any product identification data in conjunction with the data-type and data. displayFirstHW - display machine type or product common name from the first entry of the machineType or hardwareProdCommonName objects in the hwProductInstallSpecificInfoTable. displaySecondHW - display machine type or product common name from the second entry of the machineType or hardwareProdCommonName objects in the hwProductInstallSpecificInfoTable. displayFirstSW - display software product common name from the first entry of the softwareProdCommonName object in the swProductInstallSpecificInfoTable. displaySecondSW - display software product common name from the second entry of the softwareProdCommonName object in the swProductInstallSpecificInfoTable.')
dataIDCodeDD = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 1, 17, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataIDCodeDD.setStatus('optional')
if mibBuilder.loadTexts: dataIDCodeDD.setDescription('A Detailed Data Code Point (Data ID code point) (described in IBM document GA27-3136) indicating the type of data provided. The English text associated with each code point or its national language equivalent is displayed with the detailed data.')
dataEncodingDD = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 1, 17, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 17))).clone(namedValues=NamedValues(("hex", 0), ("binary", 1), ("ascii", 17)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataEncodingDD.setStatus('optional')
if mibBuilder.loadTexts: dataEncodingDD.setDescription('A code indicating how the accompanying detailed data is encoded, and thus how it is to be decoded and displayed.')
dataDD = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 1, 17, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 44))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataDD.setStatus('optional')
if mibBuilder.loadTexts: dataDD.setDescription('Detailed data encoded as specified by the dataEncodingUC object.')
mibBuilder.exportSymbols("IbmFaultMgmt-MIB", detailedDataDDEntry=detailedDataDDEntry, alertType=alertType, commonModID=commonModID, commonRelID=commonRelID, dataIDCodeFC=dataIDCodeFC, dataEncodingFC=dataEncodingFC, recommendedActionsUCTable=recommendedActionsUCTable, plantOfManufacture=plantOfManufacture, alertDescriptionCode=alertDescriptionCode, productClassificationHW=productClassificationHW, productSetIDIndexICEntry=productSetIDIndexICEntry, user_Causes=user_Causes, dataEncodingUC=dataEncodingUC, probable_Causes=probable_Causes, dataIC=dataIC, dataIDCodeDD=dataIDCodeDD, seqNum=seqNum, productIDCodeDD=productIDCodeDD, productClassificationSW=productClassificationSW, hwProductEntry=hwProductEntry, installCausesTable=installCausesTable, detailedDataDDTable=detailedDataDDTable, recommendedActionsUCEntry=recommendedActionsUCEntry, productIDCodeUC=productIDCodeUC, detailedDataFCEntry=detailedDataFCEntry, detailedDataSDEntry=detailedDataSDEntry, swProductInstallSpecificInfoTable=swProductInstallSpecificInfoTable, dataIDCodeUC=dataIDCodeUC, detailedDataSDTable=detailedDataSDTable, productSetIDIndexFCTable=productSetIDIndexFCTable, productSetIDIndexFCEntry=productSetIDIndexFCEntry, installCause=installCause, ibmArchitecture=ibmArchitecture, recommendedActionsFCTable=recommendedActionsFCTable, recommendedActionsICTable=recommendedActionsICTable, microcodeECLevel=microcodeECLevel, productSetIDIndexUC=productSetIDIndexUC, productIDCodeIC=productIDCodeIC, failureCausesEntry=failureCausesEntry, dataEncodingIC=dataEncodingIC, productSetIDIndexFC=productSetIDIndexFC, hardwareProdCommonName=hardwareProdCommonName, install_Causes=install_Causes, probableCausesEntry=probableCausesEntry, dataEncodingDD=dataEncodingDD, productSetIDIndexUCTable=productSetIDIndexUCTable, userCause=userCause, generic_Alert_Data=generic_Alert_Data, productSetIDIndexIC=productSetIDIndexIC, recommendedActionsICEntry=recommendedActionsICEntry, detailedDataUCEntry=detailedDataUCEntry, commonVerID=commonVerID, recommendedActionIC=recommendedActionIC, probableCause=probableCause, softwareProdProgNmbr=softwareProdProgNmbr, hwProductInstallSpecificInfoTable=hwProductInstallSpecificInfoTable, dataEncodingSD=dataEncodingSD, failureCausesTable=failureCausesTable, detailedDataFCTable=detailedDataFCTable, recommendedActionsFCEntry=recommendedActionsFCEntry, dataDD=dataDD, vendorIDsw=vendorIDsw, machineType=machineType, dataIDCodeIC=dataIDCodeIC, userCausesEntry=userCausesEntry, vendorIDhw=vendorIDhw, modelNum=modelNum, userCausesTable=userCausesTable, dataFC=dataFC, productIDCodeSD=productIDCodeSD, detailed_Data_SV=detailed_Data_SV, ibm=ibm, detailedDataICTable=detailedDataICTable, product_Set_ID=product_Set_ID, recommendedActionFC=recommendedActionFC, swProductEntry=swProductEntry, probableCausesTable=probableCausesTable, flags=flags, detailedDataUCTable=detailedDataUCTable, dataUC=dataUC, failureCause=failureCause, supporting_Data_Correl=supporting_Data_Correl, alert=alert, softwareProdCommonName=softwareProdCommonName, productSetIDIndexICTable=productSetIDIndexICTable, dataSD=dataSD, recommendedActionUC=recommendedActionUC, productSetIDIndexUCEntry=productSetIDIndexUCEntry, formatType=formatType, dataIDCodeSD=dataIDCodeSD, failure_Causes=failure_Causes, detailedDataICEntry=detailedDataICEntry, installCausesEntry=installCausesEntry, productIDCodeFC=productIDCodeFC)
