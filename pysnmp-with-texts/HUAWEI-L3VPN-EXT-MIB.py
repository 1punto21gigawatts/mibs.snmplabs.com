#
# PySNMP MIB module HUAWEI-L3VPN-EXT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HUAWEI-L3VPN-EXT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:45:58 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion")
hwDatacomm, = mibBuilder.importSymbols("HUAWEI-MIB", "hwDatacomm")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
EnabledStatus, = mibBuilder.importSymbols("P-BRIDGE-MIB", "EnabledStatus")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
Gauge32, NotificationType, iso, Bits, MibIdentifier, ModuleIdentity, Unsigned32, Counter64, IpAddress, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, ObjectIdentity, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "NotificationType", "iso", "Bits", "MibIdentifier", "ModuleIdentity", "Unsigned32", "Counter64", "IpAddress", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "ObjectIdentity", "Integer32")
TextualConvention, RowStatus, DisplayString, TimeStamp, DateAndTime = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "RowStatus", "DisplayString", "TimeStamp", "DateAndTime")
hwL3vpn = ModuleIdentity((1, 3, 6, 1, 4, 1, 2011, 5, 25, 150))
if mibBuilder.loadTexts: hwL3vpn.setLastUpdated('200902171659Z')
if mibBuilder.loadTexts: hwL3vpn.setOrganization('Huawei Technologies Co., Ltd.')
if mibBuilder.loadTexts: hwL3vpn.setContactInfo('R&D BeiJing, Huawei Technologies co.,Ltd. Huawei Bld.,NO.3 Xinxi Rd., Shang-Di Information Industry Base, Hai-Dian District Beijing P.R. China http://www.huawei.com Zip:100085 ')
if mibBuilder.loadTexts: hwL3vpn.setDescription("The HUAWEI-L3VPN-EXT-MIB contains objects to statistic L3VPN's traffic.")
hwL3vpnStatMibObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 150, 1))
hwL3vpnStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 150, 1, 1), )
if mibBuilder.loadTexts: hwL3vpnStatisticsTable.setStatus('current')
if mibBuilder.loadTexts: hwL3vpnStatisticsTable.setDescription("This table contains the L3VPN's Traffic Statistic.")
hwL3vpnStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 150, 1, 1, 1), ).setIndexNames((0, "HUAWEI-L3VPN-EXT-MIB", "hwL3vpnVrfIndex"))
if mibBuilder.loadTexts: hwL3vpnStatisticsEntry.setStatus('current')
if mibBuilder.loadTexts: hwL3vpnStatisticsEntry.setDescription("Provides the information of the L3VPN's Traffic Statistic.")
hwL3vpnVrfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 150, 1, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: hwL3vpnVrfIndex.setStatus('current')
if mibBuilder.loadTexts: hwL3vpnVrfIndex.setDescription('The index of L3vpn instance.')
hwL3vpnStatEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 150, 1, 1, 1, 2), EnabledStatus().clone()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwL3vpnStatEnable.setStatus('current')
if mibBuilder.loadTexts: hwL3vpnStatEnable.setDescription("This object indicates the enable sign of L3VPN's traffic statistics.")
hwL3vpnVrfName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 150, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwL3vpnVrfName.setStatus('current')
if mibBuilder.loadTexts: hwL3vpnVrfName.setDescription("This object indicates the VRF's name.")
hwL3vpnStatInTrafficRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 150, 1, 1, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwL3vpnStatInTrafficRate.setStatus('current')
if mibBuilder.loadTexts: hwL3vpnStatInTrafficRate.setDescription('Average bytes of the traffic received per second.')
hwL3vpnStatOutTrafficRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 150, 1, 1, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwL3vpnStatOutTrafficRate.setStatus('current')
if mibBuilder.loadTexts: hwL3vpnStatOutTrafficRate.setDescription('Average bytes of the traffic transmitted out per second .')
hwL3vpnStatInPacketsRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 150, 1, 1, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwL3vpnStatInPacketsRate.setStatus('current')
if mibBuilder.loadTexts: hwL3vpnStatInPacketsRate.setDescription('Average packets of the traffic received per second.')
hwL3vpnStatOutPacketsRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 150, 1, 1, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwL3vpnStatOutPacketsRate.setStatus('current')
if mibBuilder.loadTexts: hwL3vpnStatOutPacketsRate.setDescription('Average packets of the traffic transmitted out per second.')
hwL3vpnStatInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 150, 1, 1, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwL3vpnStatInBytes.setStatus('current')
if mibBuilder.loadTexts: hwL3vpnStatInBytes.setDescription('The total number of bytes received.')
hwL3vpnStatOutBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 150, 1, 1, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwL3vpnStatOutBytes.setStatus('current')
if mibBuilder.loadTexts: hwL3vpnStatOutBytes.setDescription('The total number of bytes transmitted out.')
hwL3vpnStatInPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 150, 1, 1, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwL3vpnStatInPackets.setStatus('current')
if mibBuilder.loadTexts: hwL3vpnStatInPackets.setDescription('The total number of Packets received.')
hwL3vpnStatOutPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 150, 1, 1, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwL3vpnStatOutPackets.setStatus('current')
if mibBuilder.loadTexts: hwL3vpnStatOutPackets.setDescription('The total number of Packets transmitted out.')
hwL3vpnStatInUnicastPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 150, 1, 1, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwL3vpnStatInUnicastPackets.setStatus('current')
if mibBuilder.loadTexts: hwL3vpnStatInUnicastPackets.setDescription('The total number of unicast Packets received.')
hwL3vpnStatOutUnicastPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 150, 1, 1, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwL3vpnStatOutUnicastPackets.setStatus('current')
if mibBuilder.loadTexts: hwL3vpnStatOutUnicastPackets.setDescription('The total number of unicast Packets transmitted out.')
hwL3vpnStatInMulticastPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 150, 1, 1, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwL3vpnStatInMulticastPackets.setStatus('current')
if mibBuilder.loadTexts: hwL3vpnStatInMulticastPackets.setDescription('The total number of multicast Packets received.')
hwL3vpnStatOutMulticastPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 150, 1, 1, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwL3vpnStatOutMulticastPackets.setStatus('current')
if mibBuilder.loadTexts: hwL3vpnStatOutMulticastPackets.setDescription('The total number of multicast Packets transmitted out.')
hwL3vpnStatInBroadcastPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 150, 1, 1, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwL3vpnStatInBroadcastPackets.setStatus('current')
if mibBuilder.loadTexts: hwL3vpnStatInBroadcastPackets.setDescription('The total number of broadcast Packets received.')
hwL3vpnStatOutBroadcastPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 150, 1, 1, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwL3vpnStatOutBroadcastPackets.setStatus('current')
if mibBuilder.loadTexts: hwL3vpnStatOutBroadcastPackets.setDescription('The total number of broadcast Packets transmitted out.')
hwL3vpnStatResetTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 150, 1, 1, 1, 18), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwL3vpnStatResetTime.setStatus('current')
if mibBuilder.loadTexts: hwL3vpnStatResetTime.setDescription('Last time of clean out.')
hwL3vpnStatResetStatistic = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 150, 1, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("resetStatistic", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwL3vpnStatResetStatistic.setStatus('current')
if mibBuilder.loadTexts: hwL3vpnStatResetStatistic.setDescription('Reset traffic statistics of the vpn instance.')
hwL3vpnQosStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 150, 1, 2), )
if mibBuilder.loadTexts: hwL3vpnQosStatisticsTable.setStatus('current')
if mibBuilder.loadTexts: hwL3vpnQosStatisticsTable.setDescription("This table contains the L3VPN's Qos traffic statistics.")
hwL3vpnQosStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 150, 1, 2, 1), ).setIndexNames((0, "HUAWEI-L3VPN-EXT-MIB", "hwL3vpnQosStatVrfIndex"), (0, "HUAWEI-L3VPN-EXT-MIB", "hwL3vpnQosStatQueueID"))
if mibBuilder.loadTexts: hwL3vpnQosStatisticsEntry.setStatus('current')
if mibBuilder.loadTexts: hwL3vpnQosStatisticsEntry.setDescription("Provides the information of the L3VPN's Qos traffic statistics.")
hwL3vpnQosStatVrfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 150, 1, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: hwL3vpnQosStatVrfIndex.setStatus('current')
if mibBuilder.loadTexts: hwL3vpnQosStatVrfIndex.setDescription('Index of the vpn instance.')
hwL3vpnQosStatQueueID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 150, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("be", 1), ("af1", 2), ("af2", 3), ("af3", 4), ("af4", 5), ("ef", 6), ("cs6", 7), ("cs7", 8))))
if mibBuilder.loadTexts: hwL3vpnQosStatQueueID.setStatus('current')
if mibBuilder.loadTexts: hwL3vpnQosStatQueueID.setDescription("This object indicates the queue's ID. The value must be be,af1,af2,af3,af4,ef,cs6,cs7.")
hwL3vpnQosStatPassPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 150, 1, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwL3vpnQosStatPassPackets.setStatus('current')
if mibBuilder.loadTexts: hwL3vpnQosStatPassPackets.setDescription('Number of total passed packets, based on the vpn instance.')
hwL3vpnQosStatPassBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 150, 1, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwL3vpnQosStatPassBytes.setStatus('current')
if mibBuilder.loadTexts: hwL3vpnQosStatPassBytes.setDescription('Number of total passed bytes, based on the vpn instance.')
hwL3vpnQosStatDiscardPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 150, 1, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwL3vpnQosStatDiscardPackets.setStatus('current')
if mibBuilder.loadTexts: hwL3vpnQosStatDiscardPackets.setDescription('Number of total discarded packets, based on the vpn instance.')
hwL3vpnQosStatDiscardBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 150, 1, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwL3vpnQosStatDiscardBytes.setStatus('current')
if mibBuilder.loadTexts: hwL3vpnQosStatDiscardBytes.setDescription('Number of total discarded bytes, based on the vpn instance.')
hwL3vpnQosStatPassPacketsRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 150, 1, 2, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwL3vpnQosStatPassPacketsRate.setStatus('current')
if mibBuilder.loadTexts: hwL3vpnQosStatPassPacketsRate.setDescription('Rate of passed packets for the past 30 seconds, based on the vpn instance. Unit: pps')
hwL3vpnQosStatPassBytesRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 150, 1, 2, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwL3vpnQosStatPassBytesRate.setStatus('current')
if mibBuilder.loadTexts: hwL3vpnQosStatPassBytesRate.setDescription('Rate of passed bytes for the past 30 seconds, based on the vpn instance. Unit: bps')
hwL3vpnQosStatDiscardPacketsRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 150, 1, 2, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwL3vpnQosStatDiscardPacketsRate.setStatus('current')
if mibBuilder.loadTexts: hwL3vpnQosStatDiscardPacketsRate.setDescription('Rate of discarded packets for the past 30 seconds, based on the vpn instance. Unit: pps')
hwL3vpnQosStatDiscardBytesRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 150, 1, 2, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwL3vpnQosStatDiscardBytesRate.setStatus('current')
if mibBuilder.loadTexts: hwL3vpnQosStatDiscardBytesRate.setDescription('Rate of discarded bytes for the past 30 seconds, based on the vpn instance. Unit: bps')
hwL3vpnPeerStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 150, 1, 3), )
if mibBuilder.loadTexts: hwL3vpnPeerStatisticsTable.setStatus('current')
if mibBuilder.loadTexts: hwL3vpnPeerStatisticsTable.setDescription("This table contains the L3VPN's Traffic Statistic.")
hwL3vpnPeerStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 150, 1, 3, 1), ).setIndexNames((0, "HUAWEI-L3VPN-EXT-MIB", "hwL3vpnPeerVrfIndex"), (0, "HUAWEI-L3VPN-EXT-MIB", "hwL3vpnPeerStatPeerAddress"))
if mibBuilder.loadTexts: hwL3vpnPeerStatisticsEntry.setStatus('current')
if mibBuilder.loadTexts: hwL3vpnPeerStatisticsEntry.setDescription("Provides the information of the L3VPN Peer's Traffic Statistic.")
hwL3vpnPeerVrfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 150, 1, 3, 1, 1), Unsigned32())
if mibBuilder.loadTexts: hwL3vpnPeerVrfIndex.setStatus('current')
if mibBuilder.loadTexts: hwL3vpnPeerVrfIndex.setDescription('The index of L3vpn instance.')
hwL3vpnPeerStatPeerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 150, 1, 3, 1, 2), IpAddress())
if mibBuilder.loadTexts: hwL3vpnPeerStatPeerAddress.setStatus('current')
if mibBuilder.loadTexts: hwL3vpnPeerStatPeerAddress.setDescription('The peer IP address of L3vpn instance.')
hwL3vpnPeerStatEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 150, 1, 3, 1, 3), EnabledStatus().clone()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwL3vpnPeerStatEnable.setStatus('current')
if mibBuilder.loadTexts: hwL3vpnPeerStatEnable.setDescription("This object indicates the enable sign of L3VPN peer's traffic statistics.")
hwL3vpnPeerStatResetStatistic = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 150, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("resetStatistic", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwL3vpnPeerStatResetStatistic.setStatus('current')
if mibBuilder.loadTexts: hwL3vpnPeerStatResetStatistic.setDescription('Reset traffic statistics for peer of the L3vpn instance.')
hwL3vpnPeerVrfName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 150, 1, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwL3vpnPeerVrfName.setStatus('current')
if mibBuilder.loadTexts: hwL3vpnPeerVrfName.setDescription("This object indicates the VRF's name.")
hwL3vpnPeerStatResetTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 150, 1, 3, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwL3vpnPeerStatResetTime.setStatus('current')
if mibBuilder.loadTexts: hwL3vpnPeerStatResetTime.setDescription('Last time of clean out.')
hwL3vpnPeerStatQosPacketsRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 150, 1, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwL3vpnPeerStatQosPacketsRate.setStatus('current')
if mibBuilder.loadTexts: hwL3vpnPeerStatQosPacketsRate.setDescription('Average packets of the traffic transmitted out per second.')
hwL3vpnPeerStatQosBytesRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 150, 1, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwL3vpnPeerStatQosBytesRate.setStatus('current')
if mibBuilder.loadTexts: hwL3vpnPeerStatQosBytesRate.setDescription('Average bytes of the traffic transmitted out per second .')
hwL3vpnPeerStatQosPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 150, 1, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwL3vpnPeerStatQosPackets.setStatus('current')
if mibBuilder.loadTexts: hwL3vpnPeerStatQosPackets.setDescription('The total number of Packets transmitted out.')
hwL3vpnPeerStatQosBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 150, 1, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwL3vpnPeerStatQosBytes.setStatus('current')
if mibBuilder.loadTexts: hwL3vpnPeerStatQosBytes.setDescription('The total number of bytes transmitted out.')
hwL3vpnPeerQosStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 150, 1, 4), )
if mibBuilder.loadTexts: hwL3vpnPeerQosStatisticsTable.setStatus('current')
if mibBuilder.loadTexts: hwL3vpnPeerQosStatisticsTable.setDescription("This table contains the L3vpn Peer's Qos traffic statistics.")
hwL3vpnPeerQosStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 150, 1, 4, 1), ).setIndexNames((0, "HUAWEI-L3VPN-EXT-MIB", "hwL3vpnPeerQosStatVrfIndex"), (0, "HUAWEI-L3VPN-EXT-MIB", "hwL3vpnPeerQosStatPeerAddress"), (0, "HUAWEI-L3VPN-EXT-MIB", "hwL3vpnPeerQosStatQueueID"))
if mibBuilder.loadTexts: hwL3vpnPeerQosStatisticsEntry.setStatus('current')
if mibBuilder.loadTexts: hwL3vpnPeerQosStatisticsEntry.setDescription("Provides the information of the L3VPN Peer's Qos traffic statistics.")
hwL3vpnPeerQosStatVrfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 150, 1, 4, 1, 1), Unsigned32())
if mibBuilder.loadTexts: hwL3vpnPeerQosStatVrfIndex.setStatus('current')
if mibBuilder.loadTexts: hwL3vpnPeerQosStatVrfIndex.setDescription('Index of the vpn instance.')
hwL3vpnPeerQosStatPeerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 150, 1, 4, 1, 2), IpAddress())
if mibBuilder.loadTexts: hwL3vpnPeerQosStatPeerAddress.setStatus('current')
if mibBuilder.loadTexts: hwL3vpnPeerQosStatPeerAddress.setDescription('The peer IP address of L3vpn instance.')
hwL3vpnPeerQosStatQueueID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 150, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("be", 1), ("af1", 2), ("af2", 3), ("af3", 4), ("af4", 5), ("ef", 6), ("cs6", 7), ("cs7", 8))))
if mibBuilder.loadTexts: hwL3vpnPeerQosStatQueueID.setStatus('current')
if mibBuilder.loadTexts: hwL3vpnPeerQosStatQueueID.setDescription("This object indicates the queue's ID. The value must be be,af1,af2,af3,af4,ef,cs6,cs7.")
hwL3vpnPeerQosStatPassPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 150, 1, 4, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwL3vpnPeerQosStatPassPackets.setStatus('current')
if mibBuilder.loadTexts: hwL3vpnPeerQosStatPassPackets.setDescription('Number of total passed packets, based on peer of the vpn instance.')
hwL3vpnPeerQosStatPassBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 150, 1, 4, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwL3vpnPeerQosStatPassBytes.setStatus('current')
if mibBuilder.loadTexts: hwL3vpnPeerQosStatPassBytes.setDescription('Number of total passed bytes, based on peer of the vpn instance.')
hwL3vpnPeerQosStatDiscardPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 150, 1, 4, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwL3vpnPeerQosStatDiscardPackets.setStatus('current')
if mibBuilder.loadTexts: hwL3vpnPeerQosStatDiscardPackets.setDescription('Number of total discarded packets, based on peer of the vpn instance.')
hwL3vpnPeerQosStatDiscardBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 150, 1, 4, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwL3vpnPeerQosStatDiscardBytes.setStatus('current')
if mibBuilder.loadTexts: hwL3vpnPeerQosStatDiscardBytes.setDescription('Number of total discarded bytes, based on peer of the vpn instance.')
hwL3vpnPeerQosStatPassPacketsRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 150, 1, 4, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwL3vpnPeerQosStatPassPacketsRate.setStatus('current')
if mibBuilder.loadTexts: hwL3vpnPeerQosStatPassPacketsRate.setDescription('Rate of passed packets for the past 30 seconds, based on peer of the vpn instance. Unit: pps')
hwL3vpnPeerQosStatPassBytesRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 150, 1, 4, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwL3vpnPeerQosStatPassBytesRate.setStatus('current')
if mibBuilder.loadTexts: hwL3vpnPeerQosStatPassBytesRate.setDescription('Rate of passed bytes for the past 30 seconds, based on peer of the vpn instance. Unit: bps')
hwL3vpnPeerQosStatDiscardPacketsRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 150, 1, 4, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwL3vpnPeerQosStatDiscardPacketsRate.setStatus('current')
if mibBuilder.loadTexts: hwL3vpnPeerQosStatDiscardPacketsRate.setDescription('Rate of discarded packets for the past 30 seconds, based on peer of the vpn instance. Unit: pps')
hwL3vpnPeerQosStatDiscardBytesRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 150, 1, 4, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwL3vpnPeerQosStatDiscardBytesRate.setStatus('current')
if mibBuilder.loadTexts: hwL3vpnPeerQosStatDiscardBytesRate.setDescription('Rate of discarded bytes for the past 30 seconds, based on peer of the vpn instance. Unit: bps')
hwL3vpnStatMapTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 150, 1, 5), )
if mibBuilder.loadTexts: hwL3vpnStatMapTable.setStatus('current')
if mibBuilder.loadTexts: hwL3vpnStatMapTable.setDescription('This table contains the map of L3vpn name and index.')
hwL3vpnStatMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 150, 1, 5, 1), ).setIndexNames((0, "HUAWEI-L3VPN-EXT-MIB", "hwL3vpnStatMapVrfName"))
if mibBuilder.loadTexts: hwL3vpnStatMapEntry.setStatus('current')
if mibBuilder.loadTexts: hwL3vpnStatMapEntry.setDescription('Provides the mapping information of the L3vpn name and L3vpn index.')
hwL3vpnStatMapVrfName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 150, 1, 5, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31)))
if mibBuilder.loadTexts: hwL3vpnStatMapVrfName.setStatus('current')
if mibBuilder.loadTexts: hwL3vpnStatMapVrfName.setDescription("This object indicates the vpn instance's name.")
hwL3vpnStatMapVrfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 150, 1, 5, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwL3vpnStatMapVrfIndex.setStatus('current')
if mibBuilder.loadTexts: hwL3vpnStatMapVrfIndex.setDescription('Index of the vpn instance.')
hwL3vpnConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 150, 2))
hwL3vpnGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 150, 2, 1))
hwL3vpnStatisticsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 150, 2, 1, 1)).setObjects(("HUAWEI-L3VPN-EXT-MIB", "hwL3vpnStatEnable"), ("HUAWEI-L3VPN-EXT-MIB", "hwL3vpnVrfName"), ("HUAWEI-L3VPN-EXT-MIB", "hwL3vpnStatInTrafficRate"), ("HUAWEI-L3VPN-EXT-MIB", "hwL3vpnStatOutTrafficRate"), ("HUAWEI-L3VPN-EXT-MIB", "hwL3vpnStatInPacketsRate"), ("HUAWEI-L3VPN-EXT-MIB", "hwL3vpnStatOutPacketsRate"), ("HUAWEI-L3VPN-EXT-MIB", "hwL3vpnStatInBytes"), ("HUAWEI-L3VPN-EXT-MIB", "hwL3vpnStatOutBytes"), ("HUAWEI-L3VPN-EXT-MIB", "hwL3vpnStatInPackets"), ("HUAWEI-L3VPN-EXT-MIB", "hwL3vpnStatOutPackets"), ("HUAWEI-L3VPN-EXT-MIB", "hwL3vpnStatInUnicastPackets"), ("HUAWEI-L3VPN-EXT-MIB", "hwL3vpnStatOutUnicastPackets"), ("HUAWEI-L3VPN-EXT-MIB", "hwL3vpnStatInMulticastPackets"), ("HUAWEI-L3VPN-EXT-MIB", "hwL3vpnStatOutMulticastPackets"), ("HUAWEI-L3VPN-EXT-MIB", "hwL3vpnStatInBroadcastPackets"), ("HUAWEI-L3VPN-EXT-MIB", "hwL3vpnStatOutBroadcastPackets"), ("HUAWEI-L3VPN-EXT-MIB", "hwL3vpnStatResetTime"), ("HUAWEI-L3VPN-EXT-MIB", "hwL3vpnStatResetStatistic"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwL3vpnStatisticsGroup = hwL3vpnStatisticsGroup.setStatus('current')
if mibBuilder.loadTexts: hwL3vpnStatisticsGroup.setDescription('The L3vpn Statistics Group.')
hwL3vpnQosStatisticsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 150, 2, 1, 2)).setObjects(("HUAWEI-L3VPN-EXT-MIB", "hwL3vpnQosStatPassPackets"), ("HUAWEI-L3VPN-EXT-MIB", "hwL3vpnQosStatPassBytes"), ("HUAWEI-L3VPN-EXT-MIB", "hwL3vpnQosStatDiscardPackets"), ("HUAWEI-L3VPN-EXT-MIB", "hwL3vpnQosStatDiscardBytes"), ("HUAWEI-L3VPN-EXT-MIB", "hwL3vpnQosStatPassPacketsRate"), ("HUAWEI-L3VPN-EXT-MIB", "hwL3vpnQosStatPassBytesRate"), ("HUAWEI-L3VPN-EXT-MIB", "hwL3vpnQosStatDiscardPacketsRate"), ("HUAWEI-L3VPN-EXT-MIB", "hwL3vpnQosStatDiscardBytesRate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwL3vpnQosStatisticsGroup = hwL3vpnQosStatisticsGroup.setStatus('current')
if mibBuilder.loadTexts: hwL3vpnQosStatisticsGroup.setDescription('The L3vpn Qos Statistics Group.')
hwL3vpnPeerStatisticsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 150, 2, 1, 3)).setObjects(("HUAWEI-L3VPN-EXT-MIB", "hwL3vpnPeerStatEnable"), ("HUAWEI-L3VPN-EXT-MIB", "hwL3vpnPeerStatResetStatistic"), ("HUAWEI-L3VPN-EXT-MIB", "hwL3vpnPeerVrfName"), ("HUAWEI-L3VPN-EXT-MIB", "hwL3vpnPeerStatResetTime"), ("HUAWEI-L3VPN-EXT-MIB", "hwL3vpnPeerStatQosPacketsRate"), ("HUAWEI-L3VPN-EXT-MIB", "hwL3vpnPeerStatQosBytesRate"), ("HUAWEI-L3VPN-EXT-MIB", "hwL3vpnPeerStatQosPackets"), ("HUAWEI-L3VPN-EXT-MIB", "hwL3vpnPeerStatQosBytes"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwL3vpnPeerStatisticsGroup = hwL3vpnPeerStatisticsGroup.setStatus('current')
if mibBuilder.loadTexts: hwL3vpnPeerStatisticsGroup.setDescription('The L3vpn Statistics Group.')
hwL3vpnPeerQosStatisticsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 150, 2, 1, 4)).setObjects(("HUAWEI-L3VPN-EXT-MIB", "hwL3vpnPeerQosStatPassPackets"), ("HUAWEI-L3VPN-EXT-MIB", "hwL3vpnPeerQosStatPassBytes"), ("HUAWEI-L3VPN-EXT-MIB", "hwL3vpnPeerQosStatDiscardPackets"), ("HUAWEI-L3VPN-EXT-MIB", "hwL3vpnPeerQosStatDiscardBytes"), ("HUAWEI-L3VPN-EXT-MIB", "hwL3vpnPeerQosStatPassPacketsRate"), ("HUAWEI-L3VPN-EXT-MIB", "hwL3vpnPeerQosStatPassBytesRate"), ("HUAWEI-L3VPN-EXT-MIB", "hwL3vpnPeerQosStatDiscardPacketsRate"), ("HUAWEI-L3VPN-EXT-MIB", "hwL3vpnPeerQosStatDiscardBytesRate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwL3vpnPeerQosStatisticsGroup = hwL3vpnPeerQosStatisticsGroup.setStatus('current')
if mibBuilder.loadTexts: hwL3vpnPeerQosStatisticsGroup.setDescription('The L3vpn Qos Statistics Group.')
hwL3vpnStatMapGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 150, 2, 1, 5)).setObjects(("HUAWEI-L3VPN-EXT-MIB", "hwL3vpnStatMapVrfIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwL3vpnStatMapGroup = hwL3vpnStatMapGroup.setStatus('current')
if mibBuilder.loadTexts: hwL3vpnStatMapGroup.setDescription('The L3vpn Stat Map Group.')
hwL3vpnCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 150, 2, 2))
hwL3vpnCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2011, 5, 25, 150, 2, 2, 1)).setObjects(("HUAWEI-L3VPN-EXT-MIB", "hwL3vpnStatisticsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwL3vpnCompliance = hwL3vpnCompliance.setStatus('current')
if mibBuilder.loadTexts: hwL3vpnCompliance.setDescription('The compliance statement for HUAWEI-L3VPN-EXT-MIB.')
mibBuilder.exportSymbols("HUAWEI-L3VPN-EXT-MIB", hwL3vpnStatInPackets=hwL3vpnStatInPackets, hwL3vpnStatInUnicastPackets=hwL3vpnStatInUnicastPackets, hwL3vpnStatMibObjects=hwL3vpnStatMibObjects, hwL3vpnStatEnable=hwL3vpnStatEnable, hwL3vpnPeerStatResetStatistic=hwL3vpnPeerStatResetStatistic, hwL3vpnPeerQosStatisticsTable=hwL3vpnPeerQosStatisticsTable, hwL3vpnPeerQosStatPassPacketsRate=hwL3vpnPeerQosStatPassPacketsRate, hwL3vpnQosStatisticsEntry=hwL3vpnQosStatisticsEntry, hwL3vpnStatisticsTable=hwL3vpnStatisticsTable, hwL3vpnPeerStatQosBytes=hwL3vpnPeerStatQosBytes, hwL3vpnConformance=hwL3vpnConformance, hwL3vpnQosStatQueueID=hwL3vpnQosStatQueueID, hwL3vpnQosStatDiscardPackets=hwL3vpnQosStatDiscardPackets, hwL3vpnPeerStatEnable=hwL3vpnPeerStatEnable, hwL3vpnPeerQosStatDiscardBytesRate=hwL3vpnPeerQosStatDiscardBytesRate, hwL3vpnStatMapEntry=hwL3vpnStatMapEntry, hwL3vpnStatOutPacketsRate=hwL3vpnStatOutPacketsRate, hwL3vpnQosStatPassPacketsRate=hwL3vpnQosStatPassPacketsRate, hwL3vpnQosStatVrfIndex=hwL3vpnQosStatVrfIndex, hwL3vpnQosStatPassBytesRate=hwL3vpnQosStatPassBytesRate, hwL3vpnPeerStatQosPacketsRate=hwL3vpnPeerStatQosPacketsRate, hwL3vpnPeerVrfName=hwL3vpnPeerVrfName, hwL3vpnQosStatDiscardBytesRate=hwL3vpnQosStatDiscardBytesRate, hwL3vpnPeerQosStatDiscardBytes=hwL3vpnPeerQosStatDiscardBytes, hwL3vpnStatMapTable=hwL3vpnStatMapTable, hwL3vpnStatMapVrfName=hwL3vpnStatMapVrfName, hwL3vpnStatInMulticastPackets=hwL3vpnStatInMulticastPackets, hwL3vpnPeerStatResetTime=hwL3vpnPeerStatResetTime, hwL3vpnPeerQosStatDiscardPackets=hwL3vpnPeerQosStatDiscardPackets, hwL3vpnPeerQosStatDiscardPacketsRate=hwL3vpnPeerQosStatDiscardPacketsRate, hwL3vpnStatMapVrfIndex=hwL3vpnStatMapVrfIndex, hwL3vpnStatOutTrafficRate=hwL3vpnStatOutTrafficRate, hwL3vpnPeerStatisticsEntry=hwL3vpnPeerStatisticsEntry, hwL3vpnStatInTrafficRate=hwL3vpnStatInTrafficRate, hwL3vpnPeerVrfIndex=hwL3vpnPeerVrfIndex, hwL3vpnQosStatDiscardPacketsRate=hwL3vpnQosStatDiscardPacketsRate, hwL3vpnPeerQosStatPassBytesRate=hwL3vpnPeerQosStatPassBytesRate, hwL3vpnStatResetTime=hwL3vpnStatResetTime, hwL3vpnQosStatisticsGroup=hwL3vpnQosStatisticsGroup, hwL3vpnPeerQosStatQueueID=hwL3vpnPeerQosStatQueueID, hwL3vpn=hwL3vpn, hwL3vpnQosStatPassBytes=hwL3vpnQosStatPassBytes, hwL3vpnPeerQosStatPeerAddress=hwL3vpnPeerQosStatPeerAddress, hwL3vpnStatMapGroup=hwL3vpnStatMapGroup, hwL3vpnStatResetStatistic=hwL3vpnStatResetStatistic, hwL3vpnPeerQosStatPassPackets=hwL3vpnPeerQosStatPassPackets, hwL3vpnStatInBytes=hwL3vpnStatInBytes, hwL3vpnStatOutPackets=hwL3vpnStatOutPackets, hwL3vpnStatOutUnicastPackets=hwL3vpnStatOutUnicastPackets, hwL3vpnStatOutMulticastPackets=hwL3vpnStatOutMulticastPackets, hwL3vpnStatOutBroadcastPackets=hwL3vpnStatOutBroadcastPackets, hwL3vpnPeerStatisticsTable=hwL3vpnPeerStatisticsTable, hwL3vpnGroups=hwL3vpnGroups, hwL3vpnVrfIndex=hwL3vpnVrfIndex, hwL3vpnPeerStatQosBytesRate=hwL3vpnPeerStatQosBytesRate, PYSNMP_MODULE_ID=hwL3vpn, hwL3vpnStatInPacketsRate=hwL3vpnStatInPacketsRate, hwL3vpnStatInBroadcastPackets=hwL3vpnStatInBroadcastPackets, hwL3vpnStatisticsGroup=hwL3vpnStatisticsGroup, hwL3vpnPeerStatPeerAddress=hwL3vpnPeerStatPeerAddress, hwL3vpnPeerQosStatisticsEntry=hwL3vpnPeerQosStatisticsEntry, hwL3vpnCompliance=hwL3vpnCompliance, hwL3vpnPeerQosStatPassBytes=hwL3vpnPeerQosStatPassBytes, hwL3vpnPeerStatisticsGroup=hwL3vpnPeerStatisticsGroup, hwL3vpnVrfName=hwL3vpnVrfName, hwL3vpnPeerQosStatisticsGroup=hwL3vpnPeerQosStatisticsGroup, hwL3vpnPeerQosStatVrfIndex=hwL3vpnPeerQosStatVrfIndex, hwL3vpnStatOutBytes=hwL3vpnStatOutBytes, hwL3vpnQosStatPassPackets=hwL3vpnQosStatPassPackets, hwL3vpnCompliances=hwL3vpnCompliances, hwL3vpnQosStatisticsTable=hwL3vpnQosStatisticsTable, hwL3vpnPeerStatQosPackets=hwL3vpnPeerStatQosPackets, hwL3vpnStatisticsEntry=hwL3vpnStatisticsEntry, hwL3vpnQosStatDiscardBytes=hwL3vpnQosStatDiscardBytes)
