#
# PySNMP MIB module ASCEND-MIBINET-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ASCEND-MIBINET-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:27:29 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
configuration, = mibBuilder.importSymbols("ASCEND-MIB", "configuration")
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
TimeTicks, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Counter32, Unsigned32, Gauge32, iso, IpAddress, Integer32, Bits, MibIdentifier, ModuleIdentity, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Counter32", "Unsigned32", "Gauge32", "iso", "IpAddress", "Integer32", "Bits", "MibIdentifier", "ModuleIdentity", "Counter64")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class DisplayString(OctetString):
    pass

mibinternetProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 23, 1))
mibinternetProfileTable = MibTable((1, 3, 6, 1, 4, 1, 529, 23, 1, 1), )
if mibBuilder.loadTexts: mibinternetProfileTable.setStatus('mandatory')
if mibBuilder.loadTexts: mibinternetProfileTable.setDescription('A list of mibinternetProfile profile entries.')
mibinternetProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1), ).setIndexNames((0, "ASCEND-MIBINET-MIB", "internetProfile-Station"))
if mibBuilder.loadTexts: mibinternetProfileEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mibinternetProfileEntry.setDescription('A mibinternetProfile entry containing objects that maps to the parameters of mibinternetProfile profile.')
internetProfile_Station = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 1), DisplayString()).setLabel("internetProfile-Station").setMaxAccess("readonly")
if mibBuilder.loadTexts: internetProfile_Station.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_Station.setDescription('The name of the host we will be communicating with. This name is used as part of the authentication process when authentication is being used.')
internetProfile_Active = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("internetProfile-Active").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_Active.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_Active.setDescription('A profile can be disabled by setting this field to no. There is no difference between an inactive profile and no profile at all to the remainder of the code.')
internetProfile_EncapsulationProtocol = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 9, 4, 5, 6, 10, 11, 12, 13, 7, 14, 15, 17, 8, 18, 21, 22, 23, 24, 26, 27, 28))).clone(namedValues=NamedValues(("mpp", 1), ("mp", 2), ("ppp", 3), ("combinet", 9), ("slip", 4), ("cslip", 5), ("frameRelay", 6), ("frameRelayCircuit", 10), ("x25pad", 11), ("euraw", 12), ("euui", 13), ("tcpRaw", 7), ("rfc1356X25", 14), ("ara", 15), ("t3pos", 17), ("dtpt", 8), ("x32", 18), ("atm", 21), ("atmFrameRelayCircuit", 22), ("hdlcNrm", 23), ("atmCircuit", 24), ("visa2", 26), ("atmSvcSig", 27), ("atmIma", 28)))).setLabel("internetProfile-EncapsulationProtocol").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_EncapsulationProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_EncapsulationProtocol.setDescription('The encapsulation protocol to be used when communicating with the named station.')
internetProfile_CalledNumberType = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 7))).clone(namedValues=NamedValues(("unknown", 1), ("international", 2), ("national", 3), ("networkSpecific", 4), ("local", 5), ("abbrev", 7)))).setLabel("internetProfile-CalledNumberType").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_CalledNumberType.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_CalledNumberType.setDescription('Indication of whether national number, international number, etc. is specified.')
internetProfile_DialNumber = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 5), DisplayString()).setLabel("internetProfile-DialNumber").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_DialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_DialNumber.setDescription('The phone number of the named station.')
internetProfile_SubAddress = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 292), DisplayString()).setLabel("internetProfile-SubAddress").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_SubAddress.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_SubAddress.setDescription('The sub-address extension to the dialed number of the station.')
internetProfile_Clid = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 6), DisplayString()).setLabel("internetProfile-Clid").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_Clid.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_Clid.setDescription('The calling line number for authentication.')
internetProfile_AutoProfiles = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 420), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("internetProfile-AutoProfiles").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_AutoProfiles.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_AutoProfiles.setDescription('This parameter enables or disables automatic profile creation. Currently only the Stinger IDSL provides this capability for PPP Circuits and Frame Relay Circuits.')
internetProfile_IpOptions_IpRoutingEnabled = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("internetProfile-IpOptions-IpRoutingEnabled").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_IpOptions_IpRoutingEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_IpOptions_IpRoutingEnabled.setDescription('Enable/disable IP routing for this connection.')
internetProfile_IpOptions_VjHeaderPrediction = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("internetProfile-IpOptions-VjHeaderPrediction").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_IpOptions_VjHeaderPrediction.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_IpOptions_VjHeaderPrediction.setDescription('Enable/disable Van Jacabson TCP Header prediction processing on this connection if supported by the selected encapsulation protocol.')
internetProfile_IpOptions_RemoteAddress = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 9), IpAddress()).setLabel("internetProfile-IpOptions-RemoteAddress").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_IpOptions_RemoteAddress.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_IpOptions_RemoteAddress.setDescription('The remote address with netmask of the named host.')
internetProfile_IpOptions_NetmaskRemote = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 10), IpAddress()).setLabel("internetProfile-IpOptions-NetmaskRemote").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_IpOptions_NetmaskRemote.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_IpOptions_NetmaskRemote.setDescription('The netmask of the remote address.')
internetProfile_IpOptions_LocalAddress = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 11), IpAddress()).setLabel("internetProfile-IpOptions-LocalAddress").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_IpOptions_LocalAddress.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_IpOptions_LocalAddress.setDescription('The interface address with netmask, if required, of the local end. If left zero the interface is assumed to be an unnumbered interface.')
internetProfile_IpOptions_NetmaskLocal = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 12), IpAddress()).setLabel("internetProfile-IpOptions-NetmaskLocal").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_IpOptions_NetmaskLocal.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_IpOptions_NetmaskLocal.setDescription('The netmask of the local interface address.')
internetProfile_IpOptions_RoutingMetric = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 13), Integer32()).setLabel("internetProfile-IpOptions-RoutingMetric").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_IpOptions_RoutingMetric.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_IpOptions_RoutingMetric.setDescription('The routing metric, typically measured in number of hops, to be used in the routing table entry created for this connection when the connection is active.')
internetProfile_IpOptions_Preference = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 14), Integer32()).setLabel("internetProfile-IpOptions-Preference").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_IpOptions_Preference.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_IpOptions_Preference.setDescription('The preference used for comparing this route to other routes. Preference has a higher priority than metric. As with the metric field, the lower the number, the higher the preference.')
internetProfile_IpOptions_DownPreference = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 15), Integer32()).setLabel("internetProfile-IpOptions-DownPreference").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_IpOptions_DownPreference.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_IpOptions_DownPreference.setDescription('The preference used for comparing the down-metric route to other routes. Preference has a higher priority than metric. As with the metric field, the lower the number, the higher the preference.')
internetProfile_IpOptions_PrivateRoute = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("internetProfile-IpOptions-PrivateRoute").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_IpOptions_PrivateRoute.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_IpOptions_PrivateRoute.setDescription('Enable/disable distribution of the route created for this connection via routing protocols. Private routes are used internally, but never advertized to the outside world.')
internetProfile_IpOptions_MulticastAllowed = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("internetProfile-IpOptions-MulticastAllowed").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_IpOptions_MulticastAllowed.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_IpOptions_MulticastAllowed.setDescription('Enable this connection as a multicast traffic client.')
internetProfile_IpOptions_AddressPool = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 18), Integer32()).setLabel("internetProfile-IpOptions-AddressPool").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_IpOptions_AddressPool.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_IpOptions_AddressPool.setDescription('The number of the address pool from which an address for this host should be obtained when using assigned addresses.')
internetProfile_IpOptions_IpDirect = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 19), IpAddress()).setLabel("internetProfile-IpOptions-IpDirect").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_IpOptions_IpDirect.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_IpOptions_IpDirect.setDescription('The address of the next-hop when IP direct routing is used.')
internetProfile_IpOptions_Rip = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("routingOff", 1), ("routingSendOnly", 2), ("routingRecvOnly", 3), ("routingSendAndRecv", 4), ("routingSendOnlyV2", 5), ("routingRecvOnlyV2", 6), ("routingSendAndRecvV2", 7)))).setLabel("internetProfile-IpOptions-Rip").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_IpOptions_Rip.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_IpOptions_Rip.setDescription('Specify if RIP or RIP-2 should be used over this connection and if used in both directions or not.')
internetProfile_IpOptions_RouteFilter = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 21), DisplayString()).setLabel("internetProfile-IpOptions-RouteFilter").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_IpOptions_RouteFilter.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_IpOptions_RouteFilter.setDescription('The name of this filter. All filters are referenced by name so a name must be assigned to active filters.')
internetProfile_IpOptions_SourceIpCheck = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("internetProfile-IpOptions-SourceIpCheck").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_IpOptions_SourceIpCheck.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_IpOptions_SourceIpCheck.setDescription("Enable/disable source ip checking. Packets with source ip address which doesn't match with negotiated remote ip address will be dropped.")
internetProfile_IpOptions_OspfOptions_Active = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("internetProfile-IpOptions-OspfOptions-Active").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_IpOptions_OspfOptions_Active.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_IpOptions_OspfOptions_Active.setDescription('Is OSPF active on this interface.')
internetProfile_IpOptions_OspfOptions_Area = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 24), IpAddress()).setLabel("internetProfile-IpOptions-OspfOptions-Area").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_IpOptions_OspfOptions_Area.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_IpOptions_OspfOptions_Area.setDescription('The area that this interface belongs to.')
internetProfile_IpOptions_OspfOptions_AreaType = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("stub", 2), ("nSSA", 3)))).setLabel("internetProfile-IpOptions-OspfOptions-AreaType").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_IpOptions_OspfOptions_AreaType.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_IpOptions_OspfOptions_AreaType.setDescription('The type of Area. Normal, Stub, NSSA')
internetProfile_IpOptions_OspfOptions_HelloInterval = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 26), Integer32()).setLabel("internetProfile-IpOptions-OspfOptions-HelloInterval").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_IpOptions_OspfOptions_HelloInterval.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_IpOptions_OspfOptions_HelloInterval.setDescription('The hello interval (seconds).')
internetProfile_IpOptions_OspfOptions_DeadInterval = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 27), Integer32()).setLabel("internetProfile-IpOptions-OspfOptions-DeadInterval").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_IpOptions_OspfOptions_DeadInterval.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_IpOptions_OspfOptions_DeadInterval.setDescription('The dead interval (seconds).')
internetProfile_IpOptions_OspfOptions_Priority = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 28), Integer32()).setLabel("internetProfile-IpOptions-OspfOptions-Priority").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_IpOptions_OspfOptions_Priority.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_IpOptions_OspfOptions_Priority.setDescription('The priority of this router in DR elections.')
internetProfile_IpOptions_OspfOptions_AuthenType = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("simple", 2), ("md5", 3)))).setLabel("internetProfile-IpOptions-OspfOptions-AuthenType").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_IpOptions_OspfOptions_AuthenType.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_IpOptions_OspfOptions_AuthenType.setDescription('The type of OSPF authentication in effect.')
internetProfile_IpOptions_OspfOptions_AuthKey = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 30), DisplayString()).setLabel("internetProfile-IpOptions-OspfOptions-AuthKey").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_IpOptions_OspfOptions_AuthKey.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_IpOptions_OspfOptions_AuthKey.setDescription('The authentication key.')
internetProfile_IpOptions_OspfOptions_KeyId = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 31), Integer32()).setLabel("internetProfile-IpOptions-OspfOptions-KeyId").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_IpOptions_OspfOptions_KeyId.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_IpOptions_OspfOptions_KeyId.setDescription('The key identifier for MD5 authentication.')
internetProfile_IpOptions_OspfOptions_Cost = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 32), Integer32()).setLabel("internetProfile-IpOptions-OspfOptions-Cost").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_IpOptions_OspfOptions_Cost.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_IpOptions_OspfOptions_Cost.setDescription('The output cost.')
internetProfile_IpOptions_OspfOptions_DownCost = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 33), Integer32()).setLabel("internetProfile-IpOptions-OspfOptions-DownCost").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_IpOptions_OspfOptions_DownCost.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_IpOptions_OspfOptions_DownCost.setDescription('The output cost when the link is physically down but virtually up.')
internetProfile_IpOptions_OspfOptions_AseType = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("type1", 1), ("type2", 2)))).setLabel("internetProfile-IpOptions-OspfOptions-AseType").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_IpOptions_OspfOptions_AseType.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_IpOptions_OspfOptions_AseType.setDescription('The OSPF ASE type of this LSA.')
internetProfile_IpOptions_OspfOptions_AseTag = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 35), DisplayString()).setLabel("internetProfile-IpOptions-OspfOptions-AseTag").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_IpOptions_OspfOptions_AseTag.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_IpOptions_OspfOptions_AseTag.setDescription('The OSPF ASE tag of this link.')
internetProfile_IpOptions_OspfOptions_TransitDelay = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 36), Integer32()).setLabel("internetProfile-IpOptions-OspfOptions-TransitDelay").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_IpOptions_OspfOptions_TransitDelay.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_IpOptions_OspfOptions_TransitDelay.setDescription('The estimated transit delay (seconds).')
internetProfile_IpOptions_OspfOptions_RetransmitInterval = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 37), Integer32()).setLabel("internetProfile-IpOptions-OspfOptions-RetransmitInterval").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_IpOptions_OspfOptions_RetransmitInterval.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_IpOptions_OspfOptions_RetransmitInterval.setDescription('The retransmit time (seconds).')
internetProfile_IpOptions_OspfOptions_NonMulticast = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("internetProfile-IpOptions-OspfOptions-NonMulticast").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_IpOptions_OspfOptions_NonMulticast.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_IpOptions_OspfOptions_NonMulticast.setDescription('Use direct addresses instead of multicast addresses.')
internetProfile_IpOptions_OspfOptions_NetworkType = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 250), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("broadcast", 2), ("nonBroadcast", 3), ("pointToPoint", 4)))).setLabel("internetProfile-IpOptions-OspfOptions-NetworkType").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_IpOptions_OspfOptions_NetworkType.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_IpOptions_OspfOptions_NetworkType.setDescription('The type of network attachment.')
internetProfile_IpOptions_OspfOptions_PollInterval = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 251), Integer32()).setLabel("internetProfile-IpOptions-OspfOptions-PollInterval").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_IpOptions_OspfOptions_PollInterval.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_IpOptions_OspfOptions_PollInterval.setDescription('The poll interval for non-broadcast multi-access network (seconds).')
internetProfile_IpOptions_OspfOptions_Md5AuthKey = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 252), DisplayString()).setLabel("internetProfile-IpOptions-OspfOptions-Md5AuthKey").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_IpOptions_OspfOptions_Md5AuthKey.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_IpOptions_OspfOptions_Md5AuthKey.setDescription('The MD5 authentication key.')
internetProfile_IpOptions_MulticastRateLimit = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 39), Integer32()).setLabel("internetProfile-IpOptions-MulticastRateLimit").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_IpOptions_MulticastRateLimit.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_IpOptions_MulticastRateLimit.setDescription('The multicast rate limit in seconds.')
internetProfile_IpOptions_MulticastGroupLeaveDelay = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 40), Integer32()).setLabel("internetProfile-IpOptions-MulticastGroupLeaveDelay").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_IpOptions_MulticastGroupLeaveDelay.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_IpOptions_MulticastGroupLeaveDelay.setDescription('The multicast group leave in seconds. This is only for IGMP Version 2')
internetProfile_IpOptions_ClientDnsPrimaryAddr = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 41), IpAddress()).setLabel("internetProfile-IpOptions-ClientDnsPrimaryAddr").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_IpOptions_ClientDnsPrimaryAddr.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_IpOptions_ClientDnsPrimaryAddr.setDescription('User specific DNS Primary Address.')
internetProfile_IpOptions_ClientDnsSecondaryAddr = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 42), IpAddress()).setLabel("internetProfile-IpOptions-ClientDnsSecondaryAddr").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_IpOptions_ClientDnsSecondaryAddr.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_IpOptions_ClientDnsSecondaryAddr.setDescription('User specific DNS Secondary Address.')
internetProfile_IpOptions_ClientDnsAddrAssign = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("internetProfile-IpOptions-ClientDnsAddrAssign").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_IpOptions_ClientDnsAddrAssign.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_IpOptions_ClientDnsAddrAssign.setDescription('A flag to control assigning user specific DNS Addresses.')
internetProfile_IpOptions_ClientDefaultGateway = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 44), IpAddress()).setLabel("internetProfile-IpOptions-ClientDefaultGateway").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_IpOptions_ClientDefaultGateway.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_IpOptions_ClientDefaultGateway.setDescription("The default gateway to be used for traffic from this connection, if no specific route is found in the routing table. If left zero, the system's default route will be used.")
internetProfile_IpOptions_TosOptions_Active = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("internetProfile-IpOptions-TosOptions-Active").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_IpOptions_TosOptions_Active.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_IpOptions_TosOptions_Active.setDescription('Activate type of service for this connection.')
internetProfile_IpOptions_TosOptions_Precedence = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 33, 65, 97, 129, 161, 193, 225))).clone(namedValues=NamedValues(("n-000", 1), ("n-001", 33), ("n-010", 65), ("n-011", 97), ("n-100", 129), ("n-101", 161), ("n-110", 193), ("n-111", 225)))).setLabel("internetProfile-IpOptions-TosOptions-Precedence").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_IpOptions_TosOptions_Precedence.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_IpOptions_TosOptions_Precedence.setDescription('Tag the precedence bits (priority bits) in the TOS octet of IP datagram header with this value when match occurs.')
internetProfile_IpOptions_TosOptions_TypeOfService = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 5, 9, 17))).clone(namedValues=NamedValues(("normal", 1), ("cost", 3), ("reliability", 5), ("throughput", 9), ("latency", 17)))).setLabel("internetProfile-IpOptions-TosOptions-TypeOfService").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_IpOptions_TosOptions_TypeOfService.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_IpOptions_TosOptions_TypeOfService.setDescription('Tag the type of service field in the TOS octet of IP datagram header with this value when match occurs.')
internetProfile_IpOptions_TosOptions_ApplyTo = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1025, 2049, 3073))).clone(namedValues=NamedValues(("incoming", 1025), ("outgoing", 2049), ("both", 3073)))).setLabel("internetProfile-IpOptions-TosOptions-ApplyTo").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_IpOptions_TosOptions_ApplyTo.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_IpOptions_TosOptions_ApplyTo.setDescription('Define how the type-of-service applies to data flow for this connection.')
internetProfile_IpOptions_TosOptions_MarkingType = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 459), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("precedenceTos", 1), ("dscp", 2)))).setLabel("internetProfile-IpOptions-TosOptions-MarkingType").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_IpOptions_TosOptions_MarkingType.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_IpOptions_TosOptions_MarkingType.setDescription('Select type of packet marking.')
internetProfile_IpOptions_TosOptions_Dscp = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 460), DisplayString()).setLabel("internetProfile-IpOptions-TosOptions-Dscp").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_IpOptions_TosOptions_Dscp.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_IpOptions_TosOptions_Dscp.setDescription('DSCP tag to be used in marking of the packets (if marking-type = dscp).')
internetProfile_IpOptions_TosFilter = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 49), DisplayString()).setLabel("internetProfile-IpOptions-TosFilter").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_IpOptions_TosFilter.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_IpOptions_TosFilter.setDescription('The name of type-of-service filter. All filters are referenced by name so a name must be assigned to active filters.')
internetProfile_IpOptions_ClientWinsPrimaryAddr = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 293), IpAddress()).setLabel("internetProfile-IpOptions-ClientWinsPrimaryAddr").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_IpOptions_ClientWinsPrimaryAddr.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_IpOptions_ClientWinsPrimaryAddr.setDescription('User specific WINS Primary Address.')
internetProfile_IpOptions_ClientWinsSecondaryAddr = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 294), IpAddress()).setLabel("internetProfile-IpOptions-ClientWinsSecondaryAddr").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_IpOptions_ClientWinsSecondaryAddr.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_IpOptions_ClientWinsSecondaryAddr.setDescription('User specific WINS Secondary Address.')
internetProfile_IpOptions_ClientWinsAddrAssign = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 295), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("internetProfile-IpOptions-ClientWinsAddrAssign").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_IpOptions_ClientWinsAddrAssign.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_IpOptions_ClientWinsAddrAssign.setDescription('A flag to control assigning user specific WINS Addresses.')
internetProfile_IpOptions_PrivateRouteTable = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 296), DisplayString()).setLabel("internetProfile-IpOptions-PrivateRouteTable").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_IpOptions_PrivateRouteTable.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_IpOptions_PrivateRouteTable.setDescription('Private route table ID for this connection')
internetProfile_IpOptions_PrivateRouteProfileRequired = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 297), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("internetProfile-IpOptions-PrivateRouteProfileRequired").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_IpOptions_PrivateRouteProfileRequired.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_IpOptions_PrivateRouteProfileRequired.setDescription('Parameter to decide default action,if private route table not found. If set to yes, the call will be cleared if the private route profile cannot be found. If set to no, the call will be allowed to complete, even if the private route profile cannot be found.')
internetProfile_IpOptions_NatProfileName = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 419), DisplayString()).setLabel("internetProfile-IpOptions-NatProfileName").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_IpOptions_NatProfileName.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_IpOptions_NatProfileName.setDescription('The profile to use for NAT translations on this connection.')
internetProfile_IpOptions_AddressRealm = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 421), Integer32()).setLabel("internetProfile-IpOptions-AddressRealm").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_IpOptions_AddressRealm.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_IpOptions_AddressRealm.setDescription('Used to determine which interfaces and WANs are connected to the same address space--they will have the identical values in this field.')
internetProfile_IpxOptions_IpxRoutingEnabled = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("internetProfile-IpxOptions-IpxRoutingEnabled").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_IpxOptions_IpxRoutingEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_IpxOptions_IpxRoutingEnabled.setDescription('Enable/disable IPX routing for this connection.')
internetProfile_IpxOptions_PeerMode = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("routerPeer", 1), ("dialinPeer", 2)))).setLabel("internetProfile-IpxOptions-PeerMode").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_IpxOptions_PeerMode.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_IpxOptions_PeerMode.setDescription('Enable/disable full routing between peer or use the pool to assign a network number.')
internetProfile_IpxOptions_Rip = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("both", 1), ("send", 2), ("recv", 3), ("off", 4)))).setLabel("internetProfile-IpxOptions-Rip").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_IpxOptions_Rip.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_IpxOptions_Rip.setDescription('This field specifies RIP traffic when peer is a Router.')
internetProfile_IpxOptions_Sap = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("both", 1), ("send", 2), ("recv", 3), ("off", 4)))).setLabel("internetProfile-IpxOptions-Sap").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_IpxOptions_Sap.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_IpxOptions_Sap.setDescription('This field specifies SAP traffic when peer is a Router.')
internetProfile_IpxOptions_DialQuery = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 54), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("internetProfile-IpxOptions-DialQuery").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_IpxOptions_DialQuery.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_IpxOptions_DialQuery.setDescription('Indicate if we should dial to this connection if our SAP table contains no NetWare file servers, and a workstation makes a get-nearest-server query.')
internetProfile_IpxOptions_NetNumber = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 55), DisplayString()).setLabel("internetProfile-IpxOptions-NetNumber").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_IpxOptions_NetNumber.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_IpxOptions_NetNumber.setDescription("The network number of the other router. May be zero, if we don't know what it is.")
internetProfile_IpxOptions_NetAlias = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 56), DisplayString()).setLabel("internetProfile-IpxOptions-NetAlias").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_IpxOptions_NetAlias.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_IpxOptions_NetAlias.setDescription('The network number of the point to point link.')
internetProfile_IpxOptions_SapFilter = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 57), DisplayString()).setLabel("internetProfile-IpxOptions-SapFilter").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_IpxOptions_SapFilter.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_IpxOptions_SapFilter.setDescription('The name of the IPX SAP filter, if any, to use with this connection.')
internetProfile_IpxOptions_IpxSpoofing = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 58), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("clientSpoofing", 2), ("serverSpoofing", 3)))).setLabel("internetProfile-IpxOptions-IpxSpoofing").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_IpxOptions_IpxSpoofing.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_IpxOptions_IpxSpoofing.setDescription('Selects the IPX spoofing mode when bridging.')
internetProfile_IpxOptions_SpoofingTimeout = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 59), Integer32()).setLabel("internetProfile-IpxOptions-SpoofingTimeout").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_IpxOptions_SpoofingTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_IpxOptions_SpoofingTimeout.setDescription('IPX NetWare connection timeout value.')
internetProfile_IpxOptions_IpxSapHsProxy = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 60), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("internetProfile-IpxOptions-IpxSapHsProxy").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_IpxOptions_IpxSapHsProxy.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_IpxOptions_IpxSapHsProxy.setDescription('Use IPX SAP Home Server Proxy.')
internetProfile_IpxOptions_IpxHeaderCompression = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 61), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("internetProfile-IpxOptions-IpxHeaderCompression").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_IpxOptions_IpxHeaderCompression.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_IpxOptions_IpxHeaderCompression.setDescription('Use IPX header compression if encapsulation supports it.')
internetProfile_BridgingOptions_BridgingGroup = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 62), Integer32()).setLabel("internetProfile-BridgingOptions-BridgingGroup").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_BridgingOptions_BridgingGroup.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_BridgingOptions_BridgingGroup.setDescription('Select the bridging group for this connection. Group 0 disables bridging. All packets not routed will be bridged to interfaces belonging to the same group.')
internetProfile_BridgingOptions_DialOnBroadcast = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 63), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("internetProfile-BridgingOptions-DialOnBroadcast").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_BridgingOptions_DialOnBroadcast.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_BridgingOptions_DialOnBroadcast.setDescription('Enable/disable outdial when broadcast frames are received.')
internetProfile_BridgingOptions_IpxSpoofing = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 64), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("clientSpoofing", 2), ("serverSpoofing", 3)))).setLabel("internetProfile-BridgingOptions-IpxSpoofing").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_BridgingOptions_IpxSpoofing.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_BridgingOptions_IpxSpoofing.setDescription('Selects the IPX spoofing mode when bridging.')
internetProfile_BridgingOptions_SpoofingTimeout = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 65), Integer32()).setLabel("internetProfile-BridgingOptions-SpoofingTimeout").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_BridgingOptions_SpoofingTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_BridgingOptions_SpoofingTimeout.setDescription('IPX NetWare connection timeout value.')
internetProfile_BridgingOptions_Fill2 = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 253), Integer32()).setLabel("internetProfile-BridgingOptions-Fill2").setMaxAccess("readonly")
if mibBuilder.loadTexts: internetProfile_BridgingOptions_Fill2.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_BridgingOptions_Fill2.setDescription('filler to get to 32 bit boundary')
internetProfile_BridgingOptions_BridgeType = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 66), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("transparentBridging", 1), ("ipxClientBridging", 2), ("noBridging", 3)))).setLabel("internetProfile-BridgingOptions-BridgeType").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_BridgingOptions_BridgeType.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_BridgingOptions_BridgeType.setDescription('For the P25 user interface.')
internetProfile_BridgingOptions_Egress = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 285), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("internetProfile-BridgingOptions-Egress").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_BridgingOptions_Egress.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_BridgingOptions_Egress.setDescription('Enable/disable Egress on this interface. This interface will become the exit path for all packets destined to the network.')
internetProfile_SessionOptions_CallFilter = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 67), DisplayString()).setLabel("internetProfile-SessionOptions-CallFilter").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_SessionOptions_CallFilter.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_SessionOptions_CallFilter.setDescription('The name of the filter used to determine if a packet should cause the idle timer to be reset or, when the answer profile is used for connection profile defaults, if a call should be placed.')
internetProfile_SessionOptions_DataFilter = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 68), DisplayString()).setLabel("internetProfile-SessionOptions-DataFilter").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_SessionOptions_DataFilter.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_SessionOptions_DataFilter.setDescription('The name of the filter used to determine if packets should be forwarded or dropped.')
internetProfile_SessionOptions_FilterPersistence = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 69), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("internetProfile-SessionOptions-FilterPersistence").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_SessionOptions_FilterPersistence.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_SessionOptions_FilterPersistence.setDescription('Determines if filters should persist between calls.')
internetProfile_SessionOptions_FilterRequired = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 298), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("internetProfile-SessionOptions-FilterRequired").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_SessionOptions_FilterRequired.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_SessionOptions_FilterRequired.setDescription('If No, the call will be allowed to come up even if the specified filter was not found either locally, in the cache or in RADIUS. If Yes, then the call will be cleared if the specified filter was not found either locally, in the cache or in RADIUS.')
internetProfile_SessionOptions_IdleTimer = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 70), Integer32()).setLabel("internetProfile-SessionOptions-IdleTimer").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_SessionOptions_IdleTimer.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_SessionOptions_IdleTimer.setDescription('The number of seconds of no activity before a call will be dropped. The value 0 disables the idle timer.')
internetProfile_SessionOptions_TsIdleMode = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 71), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noIdle", 1), ("inputOnlyIdle", 2), ("inputOutputIdle", 3)))).setLabel("internetProfile-SessionOptions-TsIdleMode").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_SessionOptions_TsIdleMode.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_SessionOptions_TsIdleMode.setDescription('The method used to determine when the terminal server idle session timer is reset.')
internetProfile_SessionOptions_TsIdleTimer = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 72), Integer32()).setLabel("internetProfile-SessionOptions-TsIdleTimer").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_SessionOptions_TsIdleTimer.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_SessionOptions_TsIdleTimer.setDescription('The number of seconds of no activity as defined by the idle mode before a session will be terminated.')
internetProfile_SessionOptions_Backup = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 73), DisplayString()).setLabel("internetProfile-SessionOptions-Backup").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_SessionOptions_Backup.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_SessionOptions_Backup.setDescription('Name of the backup connection profile.')
internetProfile_SessionOptions_Secondary = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 74), DisplayString()).setLabel("internetProfile-SessionOptions-Secondary").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_SessionOptions_Secondary.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_SessionOptions_Secondary.setDescription('A secondary internet profile used for dial back-up support.')
internetProfile_SessionOptions_MaxCallDuration = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 76), Integer32()).setLabel("internetProfile-SessionOptions-MaxCallDuration").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_SessionOptions_MaxCallDuration.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_SessionOptions_MaxCallDuration.setDescription('The number of minutes of connect time before a call will be dropped. The value 0 disables the connection timer.')
internetProfile_SessionOptions_VtpGateway = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 77), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("internetProfile-SessionOptions-VtpGateway").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_SessionOptions_VtpGateway.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_SessionOptions_VtpGateway.setDescription("This profile is an VTP gateway connection to an mobile client's home network.")
internetProfile_SessionOptions_Blockcountlimit = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 78), Integer32()).setLabel("internetProfile-SessionOptions-Blockcountlimit").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_SessionOptions_Blockcountlimit.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_SessionOptions_Blockcountlimit.setDescription('Maximum number of failed attempts allowed for connection before blocking the call.')
internetProfile_SessionOptions_Blockduration = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 79), Integer32()).setLabel("internetProfile-SessionOptions-Blockduration").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_SessionOptions_Blockduration.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_SessionOptions_Blockduration.setDescription('Number of seconds that connection attempts to non responding network will be blocked before allowing retries.')
internetProfile_SessionOptions_MaxVtpTunnels = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 81), Integer32()).setLabel("internetProfile-SessionOptions-MaxVtpTunnels").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_SessionOptions_MaxVtpTunnels.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_SessionOptions_MaxVtpTunnels.setDescription('If this profile is a VTP gateway, then this parameter specifies the maximum number of VTP tunnels allowed to the VTP home network specified by the name of this profile.')
internetProfile_SessionOptions_RedialDelayLimit = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 82), Integer32()).setLabel("internetProfile-SessionOptions-RedialDelayLimit").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_SessionOptions_RedialDelayLimit.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_SessionOptions_RedialDelayLimit.setDescription('Number of seconds delay before allowing a redial')
internetProfile_SessionOptions_SesRateType = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 83), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("disabled", 1), ("sdsl", 2), ("adslCap", 3), ("adslCell", 4), ("adslDmt", 5)))).setLabel("internetProfile-SessionOptions-SesRateType").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_SessionOptions_SesRateType.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_SessionOptions_SesRateType.setDescription('The per ses rate type.')
internetProfile_SessionOptions_SesRateMode = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 84), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("autobaud", 2), ("singlebaud", 3)))).setLabel("internetProfile-SessionOptions-SesRateMode").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_SessionOptions_SesRateMode.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_SessionOptions_SesRateMode.setDescription('The per ses rate mode.')
internetProfile_SessionOptions_SesAdslCapUpRate = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 85), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(51, 52, 53, 54, 55, 56, 57))).clone(namedValues=NamedValues(("n-1088000", 51), ("n-952000", 52), ("n-816000", 53), ("n-680000", 54), ("n-544000", 55), ("n-408000", 56), ("n-272000", 57)))).setLabel("internetProfile-SessionOptions-SesAdslCapUpRate").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_SessionOptions_SesAdslCapUpRate.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_SessionOptions_SesAdslCapUpRate.setDescription('The per session adsl-cap up stream data rate')
internetProfile_SessionOptions_SesAdslCapDownRate = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 86), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("n-7168000", 1), ("n-6272000", 2), ("n-5120000", 3), ("n-4480000", 4), ("n-3200000", 5), ("n-2688000", 6), ("n-2560000", 7), ("n-2240000", 8), ("n-1920000", 9), ("n-1600000", 10), ("n-1280000", 11), ("n-960000", 12), ("n-640000", 13)))).setLabel("internetProfile-SessionOptions-SesAdslCapDownRate").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_SessionOptions_SesAdslCapDownRate.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_SessionOptions_SesAdslCapDownRate.setDescription('The per session adsl-cap down stream data rate')
internetProfile_SessionOptions_SesSdslRate = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 87), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21))).clone(namedValues=NamedValues(("n-144000", 1), ("n-272000", 2), ("n-400000", 3), ("n-528000", 4), ("n-784000", 5), ("n-1168000", 6), ("n-1552000", 7), ("n-2320000", 8), ("n-160000", 9), ("n-192000", 10), ("n-208000", 11), ("n-384000", 12), ("n-416000", 13), ("n-768000", 14), ("n-1040000", 15), ("n-1152000", 16), ("n-1536000", 17), ("n-1568000", 18), ("n-1680000", 19), ("n-1920000", 20), ("n-2160000", 21)))).setLabel("internetProfile-SessionOptions-SesSdslRate").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_SessionOptions_SesSdslRate.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_SessionOptions_SesSdslRate.setDescription('The per session symetrical data rate. This parameter does not pertain to the old 16 port sdsl card.')
internetProfile_SessionOptions_SesAdslDmtUpRate = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 88), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161))).clone(namedValues=NamedValues(("upstrmMegMax", 151), ("n-1088000", 152), ("n-928000", 153), ("n-896000", 154), ("n-800000", 155), ("n-768000", 156), ("n-640000", 157), ("n-512000", 158), ("n-384000", 159), ("n-256000", 160), ("n-128000", 161)))).setLabel("internetProfile-SessionOptions-SesAdslDmtUpRate").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_SessionOptions_SesAdslDmtUpRate.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_SessionOptions_SesAdslDmtUpRate.setDescription('The per session adsl-dmt up stream data rate')
internetProfile_SessionOptions_SesAdslDmtDownRate = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 89), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122))).clone(namedValues=NamedValues(("dwnstrmMegMax", 101), ("n-9504000", 102), ("n-8960000", 103), ("n-8000000", 104), ("n-7168000", 105), ("n-6272000", 106), ("n-5120000", 107), ("n-4480000", 108), ("n-3200000", 109), ("n-2688000", 110), ("n-2560000", 111), ("n-2240000", 112), ("n-1920000", 113), ("n-1600000", 114), ("n-1280000", 115), ("n-960000", 116), ("n-768000", 117), ("n-640000", 118), ("n-512000", 119), ("n-384000", 120), ("n-256000", 121), ("n-128000", 122)))).setLabel("internetProfile-SessionOptions-SesAdslDmtDownRate").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_SessionOptions_SesAdslDmtDownRate.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_SessionOptions_SesAdslDmtDownRate.setDescription('The per session adsl-dmt down stream data rate')
internetProfile_SessionOptions_RxDataRateLimit = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 90), Integer32()).setLabel("internetProfile-SessionOptions-RxDataRateLimit").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_SessionOptions_RxDataRateLimit.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_SessionOptions_RxDataRateLimit.setDescription('The maximum information rate to be received from the named station (kbps).')
internetProfile_SessionOptions_TxDataRateLimit = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 91), Integer32()).setLabel("internetProfile-SessionOptions-TxDataRateLimit").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_SessionOptions_TxDataRateLimit.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_SessionOptions_TxDataRateLimit.setDescription('The maximum information rate to be transmitted to the named station (kbps).')
internetProfile_SessionOptions_CirTimer = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 414), Integer32()).setLabel("internetProfile-SessionOptions-CirTimer").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_SessionOptions_CirTimer.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_SessionOptions_CirTimer.setDescription('The CIR timer in (milli-sec).')
internetProfile_SessionOptions_TrafficShaper = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 286), Integer32()).setLabel("internetProfile-SessionOptions-TrafficShaper").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_SessionOptions_TrafficShaper.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_SessionOptions_TrafficShaper.setDescription('The traffic shaper assigned to this profile.')
internetProfile_SessionOptions_MaxtapLogServer = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 299), DisplayString()).setLabel("internetProfile-SessionOptions-MaxtapLogServer").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_SessionOptions_MaxtapLogServer.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_SessionOptions_MaxtapLogServer.setDescription('The name or the IP Address of the host to which the MaxTap start/stop notifications has to be sent.')
internetProfile_SessionOptions_MaxtapDataServer = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 300), DisplayString()).setLabel("internetProfile-SessionOptions-MaxtapDataServer").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_SessionOptions_MaxtapDataServer.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_SessionOptions_MaxtapDataServer.setDescription('The name or the IP Address of the host to which the tapped data has to be sent.')
internetProfile_SessionOptions_Priority = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 415), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("high", 2)))).setLabel("internetProfile-SessionOptions-Priority").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_SessionOptions_Priority.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_SessionOptions_Priority.setDescription('Priority of the link')
internetProfile_TelcoOptions_AnswerOriginate = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 92), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ansAndOrig", 1), ("answerOnly", 2), ("originateOnly", 3)))).setLabel("internetProfile-TelcoOptions-AnswerOriginate").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_TelcoOptions_AnswerOriginate.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_TelcoOptions_AnswerOriginate.setDescription('Specifies if this profile can be used for incoming calls, outgoing calls, or both.')
internetProfile_TelcoOptions_Callback = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 93), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("internetProfile-TelcoOptions-Callback").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_TelcoOptions_Callback.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_TelcoOptions_Callback.setDescription('When true a call received from the named host requires callback security. The number dialed is the phoneNumber from this connection profile.')
internetProfile_TelcoOptions_CallType = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 94), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("off", 1), ("ft1", 2), ("ft1Mpp", 3), ("bri", 4), ("ft1Bo", 5), ("dChan", 6), ("aodi", 7), ("megamax", 8)))).setLabel("internetProfile-TelcoOptions-CallType").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_TelcoOptions_CallType.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_TelcoOptions_CallType.setDescription('Nailed channel usage for this connection.')
internetProfile_TelcoOptions_NailedGroups = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 95), DisplayString()).setLabel("internetProfile-TelcoOptions-NailedGroups").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_TelcoOptions_NailedGroups.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_TelcoOptions_NailedGroups.setDescription('All the nailed groups belonging to a session. MPP supports multiple groups.')
internetProfile_TelcoOptions_Ft1Caller = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 96), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("internetProfile-TelcoOptions-Ft1Caller").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_TelcoOptions_Ft1Caller.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_TelcoOptions_Ft1Caller.setDescription('Specifies if this side should initiate calls when a mix of nailed and switched calls are being used.')
internetProfile_TelcoOptions_Force56kbps = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 97), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("internetProfile-TelcoOptions-Force56kbps").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_TelcoOptions_Force56kbps.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_TelcoOptions_Force56kbps.setDescription('If yes then inbound 64 kbps calls are connected at 56 kbps.')
internetProfile_TelcoOptions_DataService = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 98), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 255, 263))).clone(namedValues=NamedValues(("voice", 1), ("n-56kRestricted", 2), ("n-64kClear", 3), ("n-64kRestricted", 4), ("n-56kClear", 5), ("n-384kRestricted", 6), ("n-384kClear", 7), ("n-1536kClear", 8), ("n-1536kRestricted", 9), ("n-128kClear", 10), ("n-192kClear", 11), ("n-256kClear", 12), ("n-320kClear", 13), ("dws384Clear", 14), ("n-448Clear", 15), ("n-512Clear", 16), ("n-576Clear", 17), ("n-640Clear", 18), ("n-704Clear", 19), ("n-768Clear", 20), ("n-832Clear", 21), ("n-896Clear", 22), ("n-960Clear", 23), ("n-1024Clear", 24), ("n-1088Clear", 25), ("n-1152Clear", 26), ("n-1216Clear", 27), ("n-1280Clear", 28), ("n-1344Clear", 29), ("n-1408Clear", 30), ("n-1472Clear", 31), ("n-1600Clear", 32), ("n-1664Clear", 33), ("n-1728Clear", 34), ("n-1792Clear", 35), ("n-1856Clear", 36), ("n-1920Clear", 37), ("x30RestrictedBearer", 39), ("v110ClearBearer", 40), ("n-64kX30Restricted", 41), ("n-56kV110Clear", 42), ("modem", 43), ("atmodem", 44), ("n-2456kV110", 46), ("n-4856kV110", 47), ("n-9656kV110", 48), ("n-19256kV110", 49), ("n-38456kV110", 50), ("n-2456krV110", 51), ("n-4856krV110", 52), ("n-9656krV110", 53), ("n-19256krV110", 54), ("n-38456krV110", 55), ("n-2464kV110", 56), ("n-4864kV110", 57), ("n-9664kV110", 58), ("n-19264kV110", 59), ("n-38464kV110", 60), ("n-2464krV110", 61), ("n-4864krV110", 62), ("n-9664krV110", 63), ("n-19264krV110", 64), ("n-38464krV110", 65), ("v32", 66), ("phs64k", 67), ("voiceOverIp", 68), ("atmSvc", 70), ("frameRelaySvc", 71), ("vpnTunnel", 72), ("wormarq", 73), ("n-14456kV110", 74), ("n-28856kV110", 75), ("n-14456krV110", 76), ("n-28856krV110", 77), ("n-14464kV110", 78), ("n-28864kV110", 79), ("n-14464krV110", 80), ("n-28864krV110", 81), ("modem31khzAudio", 82), ("x25Svc", 83), ("n-144kClear", 255), ("iptoip", 263)))).setLabel("internetProfile-TelcoOptions-DataService").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_TelcoOptions_DataService.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_TelcoOptions_DataService.setDescription('The type of bearer channel capability to set up for each switched call in the session.')
internetProfile_TelcoOptions_CallByCall = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 99), Integer32()).setLabel("internetProfile-TelcoOptions-CallByCall").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_TelcoOptions_CallByCall.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_TelcoOptions_CallByCall.setDescription('The call-by-call signaling value for PRI lines.')
internetProfile_TelcoOptions_BillingNumber = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 100), DisplayString()).setLabel("internetProfile-TelcoOptions-BillingNumber").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_TelcoOptions_BillingNumber.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_TelcoOptions_BillingNumber.setDescription("A number used for billing purposes. This number, if present, is used as either a 'billing suffix' or the 'calling party number'.")
internetProfile_TelcoOptions_TransitNumber = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 101), DisplayString()).setLabel("internetProfile-TelcoOptions-TransitNumber").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_TelcoOptions_TransitNumber.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_TelcoOptions_TransitNumber.setDescription("The string for use in the 'transit network IE' for PRI calling when going through a LEC.")
internetProfile_TelcoOptions_ExpectCallback = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 102), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("internetProfile-TelcoOptions-ExpectCallback").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_TelcoOptions_ExpectCallback.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_TelcoOptions_ExpectCallback.setDescription('When true we expect calls to the named host will result in a callback from that host. This would occur if the remote host were authenticating us based on Caller ID.')
internetProfile_TelcoOptions_DialoutAllowed = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 103), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("internetProfile-TelcoOptions-DialoutAllowed").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_TelcoOptions_DialoutAllowed.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_TelcoOptions_DialoutAllowed.setDescription('When true, this connection is allowed to use the LAN modems to place outgoing calls.')
internetProfile_TelcoOptions_DelayCallback = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 104), Integer32()).setLabel("internetProfile-TelcoOptions-DelayCallback").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_TelcoOptions_DelayCallback.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_TelcoOptions_DelayCallback.setDescription('Number of seconds to delay before dialing back. Values of 0-3 seconds are treated as 3 seconds.')
internetProfile_TelcoOptions_NasPortType = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 254), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3))).clone(namedValues=NamedValues(("async", 4), ("sync", 5), ("isdnSync", 6), ("v120IsdnAsync", 7), ("v110IsdnAsync", 8), ("virtual", 9), ("v32IsdnAsync", 10), ("vdspAsyncIsdn", 11), ("arqPdcIsdn", 12), ("any", 1), ("digital", 2), ("analog", 3)))).setLabel("internetProfile-TelcoOptions-NasPortType").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_TelcoOptions_NasPortType.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_TelcoOptions_NasPortType.setDescription('Indicates the type of physical port being used.')
internetProfile_PppOptions_SendAuthMode = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 105), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("noPppAuth", 1), ("papPppAuth", 2), ("chapPppAuth", 3), ("anyPppAuth", 4), ("desPapPppAuth", 5), ("tokenPapPppAuth", 6), ("tokenChapPppAuth", 7), ("cacheTokenPppAuth", 8), ("msChapPppAuth", 9), ("papPreferred", 10)))).setLabel("internetProfile-PppOptions-SendAuthMode").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_PppOptions_SendAuthMode.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_PppOptions_SendAuthMode.setDescription('The type of PPP authentication to use for this call.')
internetProfile_PppOptions_PppCircuit = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 422), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("transparent", 2)))).setLabel("internetProfile-PppOptions-PppCircuit").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_PppOptions_PppCircuit.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_PppOptions_PppCircuit.setDescription('PPP Circuit. Set to type to enable the PPP Circuit Mode.')
internetProfile_PppOptions_PppCircuitName = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 423), DisplayString()).setLabel("internetProfile-PppOptions-PppCircuitName").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_PppOptions_PppCircuitName.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_PppOptions_PppCircuitName.setDescription('The peer datalink identifier for a PPP circuit.')
internetProfile_PppOptions_BiDirectionalAuth = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 354), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("allowed", 2), ("required", 3)))).setLabel("internetProfile-PppOptions-BiDirectionalAuth").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_PppOptions_BiDirectionalAuth.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_PppOptions_BiDirectionalAuth.setDescription('This parameter enables the authentication to be done in both directions. It can be used only with CHAP or MS-CHAP authentication.')
internetProfile_PppOptions_SendPassword = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 106), DisplayString()).setLabel("internetProfile-PppOptions-SendPassword").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_PppOptions_SendPassword.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_PppOptions_SendPassword.setDescription('This is the password sent to the far end; used for MPP and PPP PAP and CHAP security.')
internetProfile_PppOptions_SubstituteSendName = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 107), DisplayString()).setLabel("internetProfile-PppOptions-SubstituteSendName").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_PppOptions_SubstituteSendName.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_PppOptions_SubstituteSendName.setDescription('Name send to the far end, if different from the global system name.')
internetProfile_PppOptions_RecvPassword = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 108), DisplayString()).setLabel("internetProfile-PppOptions-RecvPassword").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_PppOptions_RecvPassword.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_PppOptions_RecvPassword.setDescription('This is the password received from the far end; used for MPP and PPP PAP and CHAP security.')
internetProfile_PppOptions_SubstituteRecvName = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 355), DisplayString()).setLabel("internetProfile-PppOptions-SubstituteRecvName").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_PppOptions_SubstituteRecvName.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_PppOptions_SubstituteRecvName.setDescription('Name expected from the far end used during a bi-directional authentication. If it is null the profile name will be used in place. This parameter is used only for outgoing calls.')
internetProfile_PppOptions_LinkCompression = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 109), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("stac", 2), ("stac9", 3), ("msStac", 4), ("mppc", 5)))).setLabel("internetProfile-PppOptions-LinkCompression").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_PppOptions_LinkCompression.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_PppOptions_LinkCompression.setDescription('The type of link compression to use for PPP, MP, and MPP calls.')
internetProfile_PppOptions_Mru = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 110), Integer32()).setLabel("internetProfile-PppOptions-Mru").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_PppOptions_Mru.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_PppOptions_Mru.setDescription('The Maximum Receive Unit, i.e. the largest frame we will accept.')
internetProfile_PppOptions_Lqm = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 111), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("internetProfile-PppOptions-Lqm").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_PppOptions_Lqm.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_PppOptions_Lqm.setDescription('Link Quality Monitoring. Set to Yes to enable the PPP LQM protocol.')
internetProfile_PppOptions_LqmMinimumPeriod = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 112), Integer32()).setLabel("internetProfile-PppOptions-LqmMinimumPeriod").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_PppOptions_LqmMinimumPeriod.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_PppOptions_LqmMinimumPeriod.setDescription('The minimum period, in 1/100 of a second, that we will accept/send link quality monitoring packets.')
internetProfile_PppOptions_LqmMaximumPeriod = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 113), Integer32()).setLabel("internetProfile-PppOptions-LqmMaximumPeriod").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_PppOptions_LqmMaximumPeriod.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_PppOptions_LqmMaximumPeriod.setDescription('The maximum period, in 1/100 of a second, that we will accept/send link quality monitoring packets.')
internetProfile_PppOptions_CbcpEnabled = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 114), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("internetProfile-PppOptions-CbcpEnabled").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_PppOptions_CbcpEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_PppOptions_CbcpEnabled.setDescription('Enable Microsoft Callback Control Protocol Negotiation.')
internetProfile_PppOptions_ModeCallbackControl = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 115), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 8))).clone(namedValues=NamedValues(("cbcpNoCallback", 2), ("cbcpUserNumber", 3), ("cbcpProfileNum", 4), ("cbcpAll", 8)))).setLabel("internetProfile-PppOptions-ModeCallbackControl").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_PppOptions_ModeCallbackControl.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_PppOptions_ModeCallbackControl.setDescription('CBCP operation allowed on to use for this call.')
internetProfile_PppOptions_DelayCallbackControl = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 116), Integer32()).setLabel("internetProfile-PppOptions-DelayCallbackControl").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_PppOptions_DelayCallbackControl.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_PppOptions_DelayCallbackControl.setDescription('Delay to request before callback to us is initiated')
internetProfile_PppOptions_TrunkGroupCallbackControl = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 117), Integer32()).setLabel("internetProfile-PppOptions-TrunkGroupCallbackControl").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_PppOptions_TrunkGroupCallbackControl.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_PppOptions_TrunkGroupCallbackControl.setDescription('Trunk group to use for the callback.')
internetProfile_PppOptions_SplitCodeDotUserEnabled = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 118), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("internetProfile-PppOptions-SplitCodeDotUserEnabled").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_PppOptions_SplitCodeDotUserEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_PppOptions_SplitCodeDotUserEnabled.setDescription('TRUE if local splitting of passwords is desired in CACHE-TOKEN. This feature permits the use of usernames longer than five chars, when using a typical 4 digit pin and 6 digit ACE token code.')
internetProfile_PppOptions_PppInterfaceType = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 119), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("hdlcLike", 1), ("frameRelay", 2), ("aal5", 3), ("x25", 4)))).setLabel("internetProfile-PppOptions-PppInterfaceType").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_PppOptions_PppInterfaceType.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_PppOptions_PppInterfaceType.setDescription('PPP network interface for this profile.')
internetProfile_PppOptions_Mtu = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 301), Integer32()).setLabel("internetProfile-PppOptions-Mtu").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_PppOptions_Mtu.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_PppOptions_Mtu.setDescription('The Maximum Transmit Unit, i.e. the largest frame we will transmit.')
internetProfile_MpOptions_BaseChannelCount = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 120), Integer32()).setLabel("internetProfile-MpOptions-BaseChannelCount").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_MpOptions_BaseChannelCount.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_MpOptions_BaseChannelCount.setDescription('When the session is initially set up, and if it is a fixed session, the number of channels to be used for the call.')
internetProfile_MpOptions_MinimumChannels = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 121), Integer32()).setLabel("internetProfile-MpOptions-MinimumChannels").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_MpOptions_MinimumChannels.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_MpOptions_MinimumChannels.setDescription('The default value for the minimum number of channels in a multi-channel call.')
internetProfile_MpOptions_MaximumChannels = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 122), Integer32()).setLabel("internetProfile-MpOptions-MaximumChannels").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_MpOptions_MaximumChannels.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_MpOptions_MaximumChannels.setDescription('The default value for the maximum number of channels in a multi-channel call.')
internetProfile_MpOptions_BacpEnable = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 123), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("internetProfile-MpOptions-BacpEnable").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_MpOptions_BacpEnable.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_MpOptions_BacpEnable.setDescription('Enable Bandwidth Allocation Control Protocol (BACP).')
internetProfile_MpOptions_BodEnable = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 255), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("internetProfile-MpOptions-BodEnable").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_MpOptions_BodEnable.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_MpOptions_BodEnable.setDescription('Enable Bandwidth On Demand.')
internetProfile_MpOptions_CallbackrequestEnable = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 284), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("internetProfile-MpOptions-CallbackrequestEnable").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_MpOptions_CallbackrequestEnable.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_MpOptions_CallbackrequestEnable.setDescription('Allow BAP CallBackRequest.')
internetProfile_MppOptions_AuxSendPassword = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 124), DisplayString()).setLabel("internetProfile-MppOptions-AuxSendPassword").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_MppOptions_AuxSendPassword.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_MppOptions_AuxSendPassword.setDescription('This is the password sent to the far end; used for MPP PAP-TOKEN-CHAP security.')
internetProfile_MppOptions_DynamicAlgorithm = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 125), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("constant", 1), ("linear", 2), ("quadratic", 3)))).setLabel("internetProfile-MppOptions-DynamicAlgorithm").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_MppOptions_DynamicAlgorithm.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_MppOptions_DynamicAlgorithm.setDescription('The algorithm to use to calculate the average link utilization. Bandwidth changes are performed on the average utilization, not current utilization.')
internetProfile_MppOptions_BandwidthMonitorDirection = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 126), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("transmit", 1), ("transmitRecv", 2), ("none", 3)))).setLabel("internetProfile-MppOptions-BandwidthMonitorDirection").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_MppOptions_BandwidthMonitorDirection.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_MppOptions_BandwidthMonitorDirection.setDescription('The direction to monitor link utilization. A unit can monitor transmit, transmit and receive, or turn off monitoring entirely.')
internetProfile_MppOptions_IncrementChannelCount = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 127), Integer32()).setLabel("internetProfile-MppOptions-IncrementChannelCount").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_MppOptions_IncrementChannelCount.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_MppOptions_IncrementChannelCount.setDescription('Number of channels to increment as a block.')
internetProfile_MppOptions_DecrementChannelCount = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 128), Integer32()).setLabel("internetProfile-MppOptions-DecrementChannelCount").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_MppOptions_DecrementChannelCount.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_MppOptions_DecrementChannelCount.setDescription('Number of channels to decrement as a block.')
internetProfile_MppOptions_SecondsHistory = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 129), Integer32()).setLabel("internetProfile-MppOptions-SecondsHistory").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_MppOptions_SecondsHistory.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_MppOptions_SecondsHistory.setDescription('The number of seconds of history that link utilization is averaged over to make bandwidth changes.')
internetProfile_MppOptions_AddPersistence = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 130), Integer32()).setLabel("internetProfile-MppOptions-AddPersistence").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_MppOptions_AddPersistence.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_MppOptions_AddPersistence.setDescription('The number of seconds of that the average line utilization must exceed the target utilization before bandwidth will be added.')
internetProfile_MppOptions_SubPersistence = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 131), Integer32()).setLabel("internetProfile-MppOptions-SubPersistence").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_MppOptions_SubPersistence.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_MppOptions_SubPersistence.setDescription('The number of seconds of that the average line utilization must fall below the target utilization before bandwidth will be reduced. Bandwidth will not be reduced if the reduced bandwidth would exceed the target utilization.')
internetProfile_MppOptions_TargetUtilization = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 132), Integer32()).setLabel("internetProfile-MppOptions-TargetUtilization").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_MppOptions_TargetUtilization.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_MppOptions_TargetUtilization.setDescription('The default value for the target utilization. Bandwidth changes occur when the average utilization exceeds or falls below this value.')
internetProfile_MppOptions_X25chanTargetUtilization = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 380), Integer32()).setLabel("internetProfile-MppOptions-X25chanTargetUtilization").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_MppOptions_X25chanTargetUtilization.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_MppOptions_X25chanTargetUtilization.setDescription('The default value for the X25 channel target utilization. Bandwidth changes occur when the average utilization exceeds or falls below this value.')
internetProfile_FrOptions_FrameRelayProfile = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 133), DisplayString()).setLabel("internetProfile-FrOptions-FrameRelayProfile").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_FrOptions_FrameRelayProfile.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_FrOptions_FrameRelayProfile.setDescription('Frame Relay profile name, specifies link over which this circuit is established.')
internetProfile_FrOptions_CircuitType = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 302), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("pvc", 1), ("svc", 2)))).setLabel("internetProfile-FrOptions-CircuitType").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_FrOptions_CircuitType.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_FrOptions_CircuitType.setDescription('The type of circuit, permanent (PVC) or switched (SVC).')
internetProfile_FrOptions_Dlci = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 134), Integer32()).setLabel("internetProfile-FrOptions-Dlci").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_FrOptions_Dlci.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_FrOptions_Dlci.setDescription('The assigned DLCI value for this connection, for PVC.')
internetProfile_FrOptions_CircuitName = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 135), DisplayString()).setLabel("internetProfile-FrOptions-CircuitName").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_FrOptions_CircuitName.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_FrOptions_CircuitName.setDescription('The peer frame relay datalink for a FR circuit.')
internetProfile_FrOptions_FrLinkType = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 303), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("transparentLink", 1), ("hostLink", 2), ("trunkLink", 3)))).setLabel("internetProfile-FrOptions-FrLinkType").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_FrOptions_FrLinkType.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_FrOptions_FrLinkType.setDescription('The frame relay link type.')
internetProfile_FrOptions_FrDirectEnabled = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 136), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("internetProfile-FrOptions-FrDirectEnabled").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_FrOptions_FrDirectEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_FrOptions_FrDirectEnabled.setDescription('Enable the frame relay direct option for this connection.')
internetProfile_FrOptions_FrDirectProfile = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 137), DisplayString()).setLabel("internetProfile-FrOptions-FrDirectProfile").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_FrOptions_FrDirectProfile.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_FrOptions_FrDirectProfile.setDescription('Name of the frame relay profile that will be used for frame-relay-direct routing.')
internetProfile_FrOptions_FrDirectDlci = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 138), Integer32()).setLabel("internetProfile-FrOptions-FrDirectDlci").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_FrOptions_FrDirectDlci.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_FrOptions_FrDirectDlci.setDescription('The DLCI of the frame relay direct connection.')
internetProfile_FrOptions_MfrBundleName = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 287), DisplayString()).setLabel("internetProfile-FrOptions-MfrBundleName").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_FrOptions_MfrBundleName.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_FrOptions_MfrBundleName.setDescription('Name of the multi-link frame-relay profile.')
internetProfile_TcpClearOptions_Host = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 139), DisplayString()).setLabel("internetProfile-TcpClearOptions-Host").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_TcpClearOptions_Host.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_TcpClearOptions_Host.setDescription('The first TCP CLEAR login host.')
internetProfile_TcpClearOptions_Port = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 140), Integer32()).setLabel("internetProfile-TcpClearOptions-Port").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_TcpClearOptions_Port.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_TcpClearOptions_Port.setDescription('The TCP port of the first login-host.')
internetProfile_TcpClearOptions_Host2 = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 141), DisplayString()).setLabel("internetProfile-TcpClearOptions-Host2").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_TcpClearOptions_Host2.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_TcpClearOptions_Host2.setDescription('The second TCP CLEAR login host.')
internetProfile_TcpClearOptions_Port2 = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 142), Integer32()).setLabel("internetProfile-TcpClearOptions-Port2").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_TcpClearOptions_Port2.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_TcpClearOptions_Port2.setDescription('The TCP port of the second login-host.')
internetProfile_TcpClearOptions_Host3 = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 143), DisplayString()).setLabel("internetProfile-TcpClearOptions-Host3").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_TcpClearOptions_Host3.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_TcpClearOptions_Host3.setDescription('The third TCP CLEAR login host.')
internetProfile_TcpClearOptions_Port3 = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 144), Integer32()).setLabel("internetProfile-TcpClearOptions-Port3").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_TcpClearOptions_Port3.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_TcpClearOptions_Port3.setDescription('The TCP port of the third login-host.')
internetProfile_TcpClearOptions_Host4 = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 145), DisplayString()).setLabel("internetProfile-TcpClearOptions-Host4").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_TcpClearOptions_Host4.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_TcpClearOptions_Host4.setDescription('The fourth TCP CLEAR login host.')
internetProfile_TcpClearOptions_Port4 = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 146), Integer32()).setLabel("internetProfile-TcpClearOptions-Port4").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_TcpClearOptions_Port4.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_TcpClearOptions_Port4.setDescription('The TCP port of the fourth login-host.')
internetProfile_TcpClearOptions_DetectEndOfPacket = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 147), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("internetProfile-TcpClearOptions-DetectEndOfPacket").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_TcpClearOptions_DetectEndOfPacket.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_TcpClearOptions_DetectEndOfPacket.setDescription('Set to yes to attempt packet detection')
internetProfile_TcpClearOptions_EndOfPacketPattern = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 148), DisplayString()).setLabel("internetProfile-TcpClearOptions-EndOfPacketPattern").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_TcpClearOptions_EndOfPacketPattern.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_TcpClearOptions_EndOfPacketPattern.setDescription('End of packet pattern to match')
internetProfile_TcpClearOptions_FlushLength = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 149), Integer32()).setLabel("internetProfile-TcpClearOptions-FlushLength").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_TcpClearOptions_FlushLength.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_TcpClearOptions_FlushLength.setDescription('Set the maximum packet length before flush')
internetProfile_TcpClearOptions_FlushTime = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 150), Integer32()).setLabel("internetProfile-TcpClearOptions-FlushTime").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_TcpClearOptions_FlushTime.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_TcpClearOptions_FlushTime.setDescription('Set the maximum packet hold time before flush')
internetProfile_AraOptions_RecvPassword = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 151), DisplayString()).setLabel("internetProfile-AraOptions-RecvPassword").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_AraOptions_RecvPassword.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_AraOptions_RecvPassword.setDescription('The password received from the far end.')
internetProfile_AraOptions_MaximumConnectTime = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 152), Integer32()).setLabel("internetProfile-AraOptions-MaximumConnectTime").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_AraOptions_MaximumConnectTime.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_AraOptions_MaximumConnectTime.setDescription('Maximum time in minutes that an ARA session can stay connected.')
internetProfile_X25Options_X25Profile = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 157), DisplayString()).setLabel("internetProfile-X25Options-X25Profile").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_X25Options_X25Profile.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_X25Options_X25Profile.setDescription('Name of the x25 profile that this profile is associated with.')
internetProfile_X25Options_Lcn = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 158), Integer32()).setLabel("internetProfile-X25Options-Lcn").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_X25Options_Lcn.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_X25Options_Lcn.setDescription('The LCN (if any) for this profile (for PVCs).')
internetProfile_X25Options_X3Profile = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 159), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 10, 11))).clone(namedValues=NamedValues(("crtProfile", 1), ("infonetProfile", 2), ("defaultProfile", 3), ("scenProfile", 4), ("ccSspProfile", 5), ("ccTspProfile", 6), ("hardcopyProfile", 7), ("hdxProfile", 8), ("sharkProfile", 9), ("posProfile", 12), ("nullProfile", 10), ("customProfile", 11)))).setLabel("internetProfile-X25Options-X3Profile").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_X25Options_X3Profile.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_X25Options_X3Profile.setDescription('X.3 profile parameter index')
internetProfile_X25Options_MaxCalls = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 160), Integer32()).setLabel("internetProfile-X25Options-MaxCalls").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_X25Options_MaxCalls.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_X25Options_MaxCalls.setDescription('Max number of unsuccessful calls')
internetProfile_X25Options_VcTimerEnable = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 161), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("internetProfile-X25Options-VcTimerEnable").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_X25Options_VcTimerEnable.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_X25Options_VcTimerEnable.setDescription('PAD VCE enable flag')
internetProfile_X25Options_X25EncapsType = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 162), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("rfc877", 1), ("snap", 2), ("null", 3), ("ppp", 4), ("aodi", 5)))).setLabel("internetProfile-X25Options-X25EncapsType").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_X25Options_X25EncapsType.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_X25Options_X25EncapsType.setDescription('RFC1356 encaps Type: RFC877/SNAP/NULL')
internetProfile_X25Options_RemoteX25Address = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 461), DisplayString()).setLabel("internetProfile-X25Options-RemoteX25Address").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_X25Options_RemoteX25Address.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_X25Options_RemoteX25Address.setDescription('X.25 address of remote station.')
internetProfile_X25Options_ReverseCharge = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 164), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("internetProfile-X25Options-ReverseCharge").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_X25Options_ReverseCharge.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_X25Options_ReverseCharge.setDescription('Reverse charge request')
internetProfile_X25Options_CallMode = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 165), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("both", 1), ("outgoing", 2), ("incoming", 3)))).setLabel("internetProfile-X25Options-CallMode").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_X25Options_CallMode.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_X25Options_CallMode.setDescription('Call mode for this interface: Both/Outgoing/Incoming')
internetProfile_X25Options_AnswerX25Address = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 462), DisplayString()).setLabel("internetProfile-X25Options-AnswerX25Address").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_X25Options_AnswerX25Address.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_X25Options_AnswerX25Address.setDescription('Answer number: mandatory if call mode is incoming or both.')
internetProfile_X25Options_InactivityTimer = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 167), Integer32()).setLabel("internetProfile-X25Options-InactivityTimer").setMaxAccess("readonly")
if mibBuilder.loadTexts: internetProfile_X25Options_InactivityTimer.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_X25Options_InactivityTimer.setDescription('X.25 Inactivity Timer.')
internetProfile_X25Options_Windowsize = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 463), Integer32()).setLabel("internetProfile-X25Options-Windowsize").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_X25Options_Windowsize.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_X25Options_Windowsize.setDescription('Window size requested on outgoing X.25 calls.')
internetProfile_X25Options_Packetsize = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 464), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("n-6", 7), ("n-7", 8), ("n-8", 9), ("n-9", 10), ("n-10", 11), ("n-11", 12), ("n-12", 13)))).setLabel("internetProfile-X25Options-Packetsize").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_X25Options_Packetsize.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_X25Options_Packetsize.setDescription('Packet size requested on outgoing X.25 calls.')
internetProfile_X25Options_X25Rpoa = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 169), DisplayString()).setLabel("internetProfile-X25Options-X25Rpoa").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_X25Options_X25Rpoa.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_X25Options_X25Rpoa.setDescription('X.25 RPOA facility.')
internetProfile_X25Options_X25CugIndex = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 170), DisplayString()).setLabel("internetProfile-X25Options-X25CugIndex").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_X25Options_X25CugIndex.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_X25Options_X25CugIndex.setDescription('X.25 CUG index. Supplied as a right-justified field e.g. 1 should be 0001')
internetProfile_X25Options_X25Nui = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 171), DisplayString()).setLabel("internetProfile-X25Options-X25Nui").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_X25Options_X25Nui.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_X25Options_X25Nui.setDescription('X.25 NUI facility.')
internetProfile_X25Options_PadBanner = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 172), DisplayString()).setLabel("internetProfile-X25Options-PadBanner").setMaxAccess("readonly")
if mibBuilder.loadTexts: internetProfile_X25Options_PadBanner.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_X25Options_PadBanner.setDescription('PAD banner message.')
internetProfile_X25Options_PadPrompt = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 173), DisplayString()).setLabel("internetProfile-X25Options-PadPrompt").setMaxAccess("readonly")
if mibBuilder.loadTexts: internetProfile_X25Options_PadPrompt.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_X25Options_PadPrompt.setDescription('PAD prompt.')
internetProfile_X25Options_PadNuiPrompt = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 174), DisplayString()).setLabel("internetProfile-X25Options-PadNuiPrompt").setMaxAccess("readonly")
if mibBuilder.loadTexts: internetProfile_X25Options_PadNuiPrompt.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_X25Options_PadNuiPrompt.setDescription('NUI prompt.')
internetProfile_X25Options_PadNuiPwPrompt = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 175), DisplayString()).setLabel("internetProfile-X25Options-PadNuiPwPrompt").setMaxAccess("readonly")
if mibBuilder.loadTexts: internetProfile_X25Options_PadNuiPwPrompt.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_X25Options_PadNuiPwPrompt.setDescription('NUI password prompt.')
internetProfile_X25Options_PadAlias1 = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 176), DisplayString()).setLabel("internetProfile-X25Options-PadAlias1").setMaxAccess("readonly")
if mibBuilder.loadTexts: internetProfile_X25Options_PadAlias1.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_X25Options_PadAlias1.setDescription('PAD Alias number 1.')
internetProfile_X25Options_PadAlias2 = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 177), DisplayString()).setLabel("internetProfile-X25Options-PadAlias2").setMaxAccess("readonly")
if mibBuilder.loadTexts: internetProfile_X25Options_PadAlias2.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_X25Options_PadAlias2.setDescription('PAD Alias number 2.')
internetProfile_X25Options_PadAlias3 = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 178), DisplayString()).setLabel("internetProfile-X25Options-PadAlias3").setMaxAccess("readonly")
if mibBuilder.loadTexts: internetProfile_X25Options_PadAlias3.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_X25Options_PadAlias3.setDescription('PAD Alias number 3.')
internetProfile_X25Options_PadDiagDisp = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 179), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("internetProfile-X25Options-PadDiagDisp").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_X25Options_PadDiagDisp.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_X25Options_PadDiagDisp.setDescription('PAD D/B channel Diagnostic display.')
internetProfile_X25Options_PadDefaultListen = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 180), DisplayString()).setLabel("internetProfile-X25Options-PadDefaultListen").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_X25Options_PadDefaultListen.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_X25Options_PadDefaultListen.setDescription('PAD diag listen address.')
internetProfile_X25Options_PadDefaultPw = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 181), DisplayString()).setLabel("internetProfile-X25Options-PadDefaultPw").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_X25Options_PadDefaultPw.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_X25Options_PadDefaultPw.setDescription('PAD diag password.')
internetProfile_X25Options_X121SourceAddress = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 471), DisplayString()).setLabel("internetProfile-X25Options-X121SourceAddress").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_X25Options_X121SourceAddress.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_X25Options_X121SourceAddress.setDescription('X.121 address to use to identify this call')
internetProfile_X25Options_PosAuth = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 472), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setLabel("internetProfile-X25Options-PosAuth").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_X25Options_PosAuth.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_X25Options_PosAuth.setDescription('Use POS Authentication')
internetProfile_EuOptions_DceAddr = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 182), Integer32()).setLabel("internetProfile-EuOptions-DceAddr").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_EuOptions_DceAddr.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_EuOptions_DceAddr.setDescription('The address of the DCE side of the link when the EUNET UI protocol is used.')
internetProfile_EuOptions_DteAddr = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 183), Integer32()).setLabel("internetProfile-EuOptions-DteAddr").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_EuOptions_DteAddr.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_EuOptions_DteAddr.setDescription('The address of the DTE side of the link when the EUNET UI protocol is used.')
internetProfile_EuOptions_Mru = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 184), Integer32()).setLabel("internetProfile-EuOptions-Mru").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_EuOptions_Mru.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_EuOptions_Mru.setDescription('The MRU used for EUNET protocol connections.')
internetProfile_X75Options_KFramesOutstanding = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 185), Integer32()).setLabel("internetProfile-X75Options-KFramesOutstanding").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_X75Options_KFramesOutstanding.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_X75Options_KFramesOutstanding.setDescription('Number of frames outstanding before we require an ack. Defaults to 7.')
internetProfile_X75Options_N2Retransmissions = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 186), Integer32()).setLabel("internetProfile-X75Options-N2Retransmissions").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_X75Options_N2Retransmissions.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_X75Options_N2Retransmissions.setDescription('Number of retransmissions allowed. Defaults to 10.')
internetProfile_X75Options_T1RetranTimer = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 187), Integer32()).setLabel("internetProfile-X75Options-T1RetranTimer").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_X75Options_T1RetranTimer.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_X75Options_T1RetranTimer.setDescription('Number of milliseconds between retransmissions. Defaults to 1000.')
internetProfile_X75Options_FrameLength = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 188), Integer32()).setLabel("internetProfile-X75Options-FrameLength").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_X75Options_FrameLength.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_X75Options_FrameLength.setDescription('Frame length to use for incoming X.75 connections. Defaults to 1024.')
internetProfile_AppletalkOptions_AtalkRoutingEnabled = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 189), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("internetProfile-AppletalkOptions-AtalkRoutingEnabled").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_AppletalkOptions_AtalkRoutingEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_AppletalkOptions_AtalkRoutingEnabled.setDescription('Enable/disable AppleTalk routine for this connection.')
internetProfile_AppletalkOptions_AtalkStaticZoneName = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 190), DisplayString()).setLabel("internetProfile-AppletalkOptions-AtalkStaticZoneName").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_AppletalkOptions_AtalkStaticZoneName.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_AppletalkOptions_AtalkStaticZoneName.setDescription('The static Zone Name to show for this route.')
internetProfile_AppletalkOptions_AtalkStaticNetStart = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 191), Integer32()).setLabel("internetProfile-AppletalkOptions-AtalkStaticNetStart").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_AppletalkOptions_AtalkStaticNetStart.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_AppletalkOptions_AtalkStaticNetStart.setDescription('The Net Number start value for this route.')
internetProfile_AppletalkOptions_AtalkStaticNetEnd = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 192), Integer32()).setLabel("internetProfile-AppletalkOptions-AtalkStaticNetEnd").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_AppletalkOptions_AtalkStaticNetEnd.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_AppletalkOptions_AtalkStaticNetEnd.setDescription('The Net Number end value for this route.')
internetProfile_AppletalkOptions_AtalkPeerMode = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 193), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("routerPeer", 1), ("dialinPeer", 2)))).setLabel("internetProfile-AppletalkOptions-AtalkPeerMode").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_AppletalkOptions_AtalkPeerMode.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_AppletalkOptions_AtalkPeerMode.setDescription('Enable/disable full routing between peer or using proxy AARP to assign a network address.')
internetProfile_UsrRadOptions_AcctType = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 194), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("global", 1), ("local", 2), ("both", 3)))).setLabel("internetProfile-UsrRadOptions-AcctType").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_UsrRadOptions_AcctType.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_UsrRadOptions_AcctType.setDescription('Specify where accounting information for this connection will be sent, either the global server list, a per-user override, or both.')
internetProfile_UsrRadOptions_AcctHost = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 195), IpAddress()).setLabel("internetProfile-UsrRadOptions-AcctHost").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_UsrRadOptions_AcctHost.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_UsrRadOptions_AcctHost.setDescription('The IP address of the RADIUS accounting host.')
internetProfile_UsrRadOptions_AcctPort = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 196), Integer32()).setLabel("internetProfile-UsrRadOptions-AcctPort").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_UsrRadOptions_AcctPort.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_UsrRadOptions_AcctPort.setDescription('The UDP port of the RADIUS Accounting server.')
internetProfile_UsrRadOptions_AcctKey = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 197), DisplayString()).setLabel("internetProfile-UsrRadOptions-AcctKey").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_UsrRadOptions_AcctKey.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_UsrRadOptions_AcctKey.setDescription('The RADIUS accounting key.')
internetProfile_UsrRadOptions_AcctTimeout = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 198), Integer32()).setLabel("internetProfile-UsrRadOptions-AcctTimeout").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_UsrRadOptions_AcctTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_UsrRadOptions_AcctTimeout.setDescription('Number of seconds to wait for a response to accounting request.')
internetProfile_UsrRadOptions_AcctIdBase = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 199), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("acctBase10", 1), ("acctBase16", 2)))).setLabel("internetProfile-UsrRadOptions-AcctIdBase").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_UsrRadOptions_AcctIdBase.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_UsrRadOptions_AcctIdBase.setDescription('The Base to use in reporting the Account ID')
internetProfile_CalledNumber = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 200), DisplayString()).setLabel("internetProfile-CalledNumber").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_CalledNumber.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_CalledNumber.setDescription('The called line number for authentication.')
internetProfile_DhcpOptions_ReplyEnabled = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 201), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("internetProfile-DhcpOptions-ReplyEnabled").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_DhcpOptions_ReplyEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_DhcpOptions_ReplyEnabled.setDescription('Set to yes to enable replies to DHCP clients.')
internetProfile_DhcpOptions_PoolNumber = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 202), Integer32()).setLabel("internetProfile-DhcpOptions-PoolNumber").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_DhcpOptions_PoolNumber.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_DhcpOptions_PoolNumber.setDescription('Allocate addresses from this pool.')
internetProfile_DhcpOptions_MaximumLeases = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 203), Integer32()).setLabel("internetProfile-DhcpOptions-MaximumLeases").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_DhcpOptions_MaximumLeases.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_DhcpOptions_MaximumLeases.setDescription('Maximum number of leases allowed on this connection.')
internetProfile_SharedProf = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 283), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("internetProfile-SharedProf").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_SharedProf.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_SharedProf.setDescription('When TRUE multiple users may share a connection profile, as long as IP addresses are not duplicated.')
internetProfile_MaxSharedUsers = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 465), Integer32()).setLabel("internetProfile-MaxSharedUsers").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_MaxSharedUsers.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_MaxSharedUsers.setDescription('Limits the maximum number of end users allowed to connect using a shared connection profile. The default value is 0 which means there is no limit.')
internetProfile_T3posOptions_X25Profile = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 205), DisplayString()).setLabel("internetProfile-T3posOptions-X25Profile").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_T3posOptions_X25Profile.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_T3posOptions_X25Profile.setDescription('Name of the x25 profile that this profile is associated with.')
internetProfile_T3posOptions_MaxCalls = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 206), Integer32()).setLabel("internetProfile-T3posOptions-MaxCalls").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_T3posOptions_MaxCalls.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_T3posOptions_MaxCalls.setDescription('Max number of unsuccessful calls')
internetProfile_T3posOptions_AutoCallX121Address = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 207), DisplayString()).setLabel("internetProfile-T3posOptions-AutoCallX121Address").setMaxAccess("readonly")
if mibBuilder.loadTexts: internetProfile_T3posOptions_AutoCallX121Address.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_T3posOptions_AutoCallX121Address.setDescription('X.121 address to auto-call upon session startup.')
internetProfile_T3posOptions_ReverseCharge = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 208), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("internetProfile-T3posOptions-ReverseCharge").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_T3posOptions_ReverseCharge.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_T3posOptions_ReverseCharge.setDescription('Reverse charge request')
internetProfile_T3posOptions_Answer = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 209), DisplayString()).setLabel("internetProfile-T3posOptions-Answer").setMaxAccess("readonly")
if mibBuilder.loadTexts: internetProfile_T3posOptions_Answer.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_T3posOptions_Answer.setDescription('Answer number: mandatory if call mode is incoming or both.')
internetProfile_T3posOptions_T3PosHostInitMode = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 210), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("local", 1), ("binLocal", 2), ("transparent", 3), ("blind", 4), ("unknown", 5)))).setLabel("internetProfile-T3posOptions-T3PosHostInitMode").setMaxAccess("readonly")
if mibBuilder.loadTexts: internetProfile_T3posOptions_T3PosHostInitMode.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_T3posOptions_T3PosHostInitMode.setDescription('T3POS Host Initialization mode: LOCAL/BIN-LOCAL/TRANSPARENT/BLIND')
internetProfile_T3posOptions_T3PosDteInitMode = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 211), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("local", 1), ("binLocal", 2), ("transparent", 3), ("blind", 4), ("unknown", 5)))).setLabel("internetProfile-T3posOptions-T3PosDteInitMode").setMaxAccess("readonly")
if mibBuilder.loadTexts: internetProfile_T3posOptions_T3PosDteInitMode.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_T3posOptions_T3PosDteInitMode.setDescription('T3POS DTE Initialization mode: LOCAL/BIN-LOCAL/TRANSPARENT/BLIND')
internetProfile_T3posOptions_T3PosEnqHandling = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 212), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setLabel("internetProfile-T3posOptions-T3PosEnqHandling").setMaxAccess("readonly")
if mibBuilder.loadTexts: internetProfile_T3posOptions_T3PosEnqHandling.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_T3posOptions_T3PosEnqHandling.setDescription('T3POS ENQ handling param')
internetProfile_T3posOptions_T3PosMaxBlockSize = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 213), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("n-512", 1), ("n-1024", 2)))).setLabel("internetProfile-T3posOptions-T3PosMaxBlockSize").setMaxAccess("readonly")
if mibBuilder.loadTexts: internetProfile_T3posOptions_T3PosMaxBlockSize.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_T3posOptions_T3PosMaxBlockSize.setDescription('T3POS Max block size: 512/1024')
internetProfile_T3posOptions_T3PosT1 = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 214), Integer32()).setLabel("internetProfile-T3posOptions-T3PosT1").setMaxAccess("readonly")
if mibBuilder.loadTexts: internetProfile_T3posOptions_T3PosT1.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_T3posOptions_T3PosT1.setDescription('T3POS T1 timer.')
internetProfile_T3posOptions_T3PosT2 = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 215), Integer32()).setLabel("internetProfile-T3posOptions-T3PosT2").setMaxAccess("readonly")
if mibBuilder.loadTexts: internetProfile_T3posOptions_T3PosT2.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_T3posOptions_T3PosT2.setDescription('T3POS T2 timer.')
internetProfile_T3posOptions_T3PosT3 = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 216), Integer32()).setLabel("internetProfile-T3posOptions-T3PosT3").setMaxAccess("readonly")
if mibBuilder.loadTexts: internetProfile_T3posOptions_T3PosT3.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_T3posOptions_T3PosT3.setDescription('T3POS T3 timer.')
internetProfile_T3posOptions_T3PosT4 = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 217), Integer32()).setLabel("internetProfile-T3posOptions-T3PosT4").setMaxAccess("readonly")
if mibBuilder.loadTexts: internetProfile_T3posOptions_T3PosT4.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_T3posOptions_T3PosT4.setDescription('T3POS T4 timer.')
internetProfile_T3posOptions_T3PosT5 = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 218), Integer32()).setLabel("internetProfile-T3posOptions-T3PosT5").setMaxAccess("readonly")
if mibBuilder.loadTexts: internetProfile_T3posOptions_T3PosT5.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_T3posOptions_T3PosT5.setDescription('T3POS T5 timer.')
internetProfile_T3posOptions_T3PosT6 = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 219), Integer32()).setLabel("internetProfile-T3posOptions-T3PosT6").setMaxAccess("readonly")
if mibBuilder.loadTexts: internetProfile_T3posOptions_T3PosT6.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_T3posOptions_T3PosT6.setDescription('T3POS T6 timer.')
internetProfile_T3posOptions_T3PosMethodOfHostNotif = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 220), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("callRequestPacket", 2), ("modeSwitchFrame", 3)))).setLabel("internetProfile-T3posOptions-T3PosMethodOfHostNotif").setMaxAccess("readonly")
if mibBuilder.loadTexts: internetProfile_T3posOptions_T3PosMethodOfHostNotif.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_T3posOptions_T3PosMethodOfHostNotif.setDescription('T3POS Method of Host Notification.')
internetProfile_T3posOptions_T3PosPidSelection = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 221), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("x29", 1), ("t3pos", 2)))).setLabel("internetProfile-T3posOptions-T3PosPidSelection").setMaxAccess("readonly")
if mibBuilder.loadTexts: internetProfile_T3posOptions_T3PosPidSelection.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_T3posOptions_T3PosPidSelection.setDescription('T3POS PID selection: X.29, T3POS.')
internetProfile_T3posOptions_T3PosAckSuppression = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 222), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setLabel("internetProfile-T3posOptions-T3PosAckSuppression").setMaxAccess("readonly")
if mibBuilder.loadTexts: internetProfile_T3posOptions_T3PosAckSuppression.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_T3posOptions_T3PosAckSuppression.setDescription('T3POS ACK suppression.')
internetProfile_T3posOptions_X25Rpoa = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 223), DisplayString()).setLabel("internetProfile-T3posOptions-X25Rpoa").setMaxAccess("readonly")
if mibBuilder.loadTexts: internetProfile_T3posOptions_X25Rpoa.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_T3posOptions_X25Rpoa.setDescription('X.25 RPOA facility.')
internetProfile_T3posOptions_X25CugIndex = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 224), DisplayString()).setLabel("internetProfile-T3posOptions-X25CugIndex").setMaxAccess("readonly")
if mibBuilder.loadTexts: internetProfile_T3posOptions_X25CugIndex.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_T3posOptions_X25CugIndex.setDescription('X.25 CUG index.')
internetProfile_T3posOptions_X25Nui = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 225), DisplayString()).setLabel("internetProfile-T3posOptions-X25Nui").setMaxAccess("readonly")
if mibBuilder.loadTexts: internetProfile_T3posOptions_X25Nui.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_T3posOptions_X25Nui.setDescription('X.25 NUI facility.')
internetProfile_T3posOptions_DataFormat = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 226), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("dataFormat7e1", 1), ("dataFormat7o1", 2), ("dataFormat7m1", 3), ("dataFormat7s1", 4), ("dataFormat8n1", 5)))).setLabel("internetProfile-T3posOptions-DataFormat").setMaxAccess("readonly")
if mibBuilder.loadTexts: internetProfile_T3posOptions_DataFormat.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_T3posOptions_DataFormat.setDescription('T3POS Open/Local Data Format.')
internetProfile_T3posOptions_LinkAccessType = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 227), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("axtypeDedicated", 1), ("axtypeDialIn", 2)))).setLabel("internetProfile-T3posOptions-LinkAccessType").setMaxAccess("readonly")
if mibBuilder.loadTexts: internetProfile_T3posOptions_LinkAccessType.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_T3posOptions_LinkAccessType.setDescription('T3POS Link access type.')
internetProfile_FramedOnly = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 228), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("internetProfile-FramedOnly").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_FramedOnly.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_FramedOnly.setDescription('A profile can be restricted to only doing the framed commands (ppp, mpp, slip, and quit) by setting this to YES')
internetProfile_AltdialNumber1 = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 229), DisplayString()).setLabel("internetProfile-AltdialNumber1").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_AltdialNumber1.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_AltdialNumber1.setDescription('The first alternate phone number of the named station.')
internetProfile_AltdialNumber2 = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 230), DisplayString()).setLabel("internetProfile-AltdialNumber2").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_AltdialNumber2.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_AltdialNumber2.setDescription('The second alternate phone number of the named station.')
internetProfile_AltdialNumber3 = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 231), DisplayString()).setLabel("internetProfile-AltdialNumber3").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_AltdialNumber3.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_AltdialNumber3.setDescription('The third alternate phone number of the named station.')
internetProfile_X32Options_X32Profile = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 232), DisplayString()).setLabel("internetProfile-X32Options-X32Profile").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_X32Options_X32Profile.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_X32Options_X32Profile.setDescription('Name of the x25 profile that this profile is associated with.')
internetProfile_X32Options_CallMode = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 233), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("both", 1), ("outgoing", 2), ("incoming", 3)))).setLabel("internetProfile-X32Options-CallMode").setMaxAccess("readonly")
if mibBuilder.loadTexts: internetProfile_X32Options_CallMode.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_X32Options_CallMode.setDescription('Call mode for this interface: Incoming')
internetProfile_X32Options_X32ApplMode = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 424), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("netToNet", 1), ("isdnCircuitMode", 2), ("isdnPacketMode", 3), ("last", 4)))).setLabel("internetProfile-X32Options-X32ApplMode").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_X32Options_X32ApplMode.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_X32Options_X32ApplMode.setDescription('Appl mode for this interface')
internetProfile_TunnelOptions_ProfileType = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 234), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("mobileClient", 2), ("gatewayProfile", 3), ("dialoutProfile", 4)))).setLabel("internetProfile-TunnelOptions-ProfileType").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_TunnelOptions_ProfileType.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_TunnelOptions_ProfileType.setDescription('The type of connection this profile describes')
internetProfile_TunnelOptions_TunnelingProtocol = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 235), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 8))).clone(namedValues=NamedValues(("disabled", 1), ("pptpProtocol", 2), ("l2fProtocol", 3), ("l2tpProtocol", 4), ("atmpProtocol", 5), ("vtpProtocol", 6), ("ipinipProtocol", 8)))).setLabel("internetProfile-TunnelOptions-TunnelingProtocol").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_TunnelOptions_TunnelingProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_TunnelOptions_TunnelingProtocol.setDescription('The protocol used for tunneling, if enabled')
internetProfile_TunnelOptions_MaxTunnels = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 236), Integer32()).setLabel("internetProfile-TunnelOptions-MaxTunnels").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_TunnelOptions_MaxTunnels.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_TunnelOptions_MaxTunnels.setDescription('If this profile is a tunnel gateway, then this parameter specifies the maximum number of tunnels allowed to the home network specified by the name of this profile.')
internetProfile_TunnelOptions_AtmpHaRip = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 237), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ripOff", 1), ("ripSendV2", 2)))).setLabel("internetProfile-TunnelOptions-AtmpHaRip").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_TunnelOptions_AtmpHaRip.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_TunnelOptions_AtmpHaRip.setDescription("Allows an ATMP home agent to send routing updates to the home network consisting of the mobile nodes' addresses.")
internetProfile_TunnelOptions_PrimaryTunnelServer = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 238), DisplayString()).setLabel("internetProfile-TunnelOptions-PrimaryTunnelServer").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_TunnelOptions_PrimaryTunnelServer.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_TunnelOptions_PrimaryTunnelServer.setDescription("The IP address or hostname of the primary tunnel server if this is a mobile client's profile.")
internetProfile_TunnelOptions_SecondaryTunnelServer = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 239), DisplayString()).setLabel("internetProfile-TunnelOptions-SecondaryTunnelServer").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_TunnelOptions_SecondaryTunnelServer.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_TunnelOptions_SecondaryTunnelServer.setDescription("The IP address or hostname of the secondary tunnel server if this is a mobile client's profile.")
internetProfile_TunnelOptions_UdpPort = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 240), Integer32()).setLabel("internetProfile-TunnelOptions-UdpPort").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_TunnelOptions_UdpPort.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_TunnelOptions_UdpPort.setDescription("The default UDP port to use when communicating with the ATMP home agent, if this is a mobile client's profile.")
internetProfile_TunnelOptions_Password = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 241), DisplayString()).setLabel("internetProfile-TunnelOptions-Password").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_TunnelOptions_Password.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_TunnelOptions_Password.setDescription('The password required by the tunnel server, if this is a mobile client profile.')
internetProfile_TunnelOptions_HomeNetworkName = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 242), DisplayString()).setLabel("internetProfile-TunnelOptions-HomeNetworkName").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_TunnelOptions_HomeNetworkName.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_TunnelOptions_HomeNetworkName.setDescription("The name of the home network if the ATMP home agent is operating in gateway mode. It should be empty if the ATMP home agent is operating in router mode. For L2TP, it indicates the Private Group ID value for a client. Used for ATMP and L2TP mobile client's profiles.")
internetProfile_TunnelOptions_ClientAuthId = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 413), DisplayString()).setLabel("internetProfile-TunnelOptions-ClientAuthId").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_TunnelOptions_ClientAuthId.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_TunnelOptions_ClientAuthId.setDescription('The system name used by the Tunnel Initiator during Tunnel establishment for the purposes of tunnel authentication. This is different and independent from user authentication. Used on L2TP and L2F.')
internetProfile_TunnelOptions_ServerAuthId = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 417), DisplayString()).setLabel("internetProfile-TunnelOptions-ServerAuthId").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_TunnelOptions_ServerAuthId.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_TunnelOptions_ServerAuthId.setDescription('The system name used by the Tunnel Terminator during Tunnel establishment for the purposes of tunnel authentication. This is different and independent from user authentication. Used on L2TP and L2F.')
internetProfile_TunnelOptions_Vrouter = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 356), DisplayString()).setLabel("internetProfile-TunnelOptions-Vrouter").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_TunnelOptions_Vrouter.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_TunnelOptions_Vrouter.setDescription('The name of the virtual router used for the tunnel.')
internetProfile_TunnelOptions_AssignmentId = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 418), DisplayString()).setLabel("internetProfile-TunnelOptions-AssignmentId").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_TunnelOptions_AssignmentId.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_TunnelOptions_AssignmentId.setDescription('The identification assigned to tunnels so that sessions could be grouped into different tunnels based on this Id. This Id only has local significance and is not transmited to the remote tunnel-endpoint.')
internetProfile_TunnelOptions_TosCopying = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 473), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("internetProfile-TunnelOptions-TosCopying").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_TunnelOptions_TosCopying.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_TunnelOptions_TosCopying.setDescription('Control the TOS byte of the outer IP header')
internetProfile_IpsecOptions_Enabled = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 474), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("internetProfile-IpsecOptions-Enabled").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_IpsecOptions_Enabled.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_IpsecOptions_Enabled.setDescription('IPSec can be disabled on a profile by setting this field to no.')
internetProfile_IpsecOptions_SecurityPolicyDatabase = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 475), DisplayString()).setLabel("internetProfile-IpsecOptions-SecurityPolicyDatabase").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_IpsecOptions_SecurityPolicyDatabase.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_IpsecOptions_SecurityPolicyDatabase.setDescription('The name of the IPSec SPD profile to be used.')
internetProfile_PriNumberingPlanId = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 244), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 10))).clone(namedValues=NamedValues(("unknown", 1), ("iSDN", 2), ("private", 10)))).setLabel("internetProfile-PriNumberingPlanId").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_PriNumberingPlanId.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_PriNumberingPlanId.setDescription("PRI Called Party element's Numbering-Plan-ID value for outgoing PRI calls.")
internetProfile_Vrouter = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 245), DisplayString()).setLabel("internetProfile-Vrouter").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_Vrouter.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_Vrouter.setDescription('Specifies the VRouter in which this profile belongs.')
internetProfile_CrossConnectIndex = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 425), Integer32()).setLabel("internetProfile-CrossConnectIndex").setMaxAccess("readonly")
if mibBuilder.loadTexts: internetProfile_CrossConnectIndex.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_CrossConnectIndex.setDescription('AToM Mib cross connect index.')
internetProfile_AtmOptions_Atm1483type = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 246), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("aal5Llc", 1), ("aal5Vc", 2)))).setLabel("internetProfile-AtmOptions-Atm1483type").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_AtmOptions_Atm1483type.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_AtmOptions_Atm1483type.setDescription('The type of AAL5 multiplexing.')
internetProfile_AtmOptions_Vpi = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 247), Integer32()).setLabel("internetProfile-AtmOptions-Vpi").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_AtmOptions_Vpi.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_AtmOptions_Vpi.setDescription('The VPI of this connection.')
internetProfile_AtmOptions_Vci = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 248), Integer32()).setLabel("internetProfile-AtmOptions-Vci").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_AtmOptions_Vci.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_AtmOptions_Vci.setDescription('The VCI of this connection.')
internetProfile_AtmOptions_NailedGroup = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 256), Integer32()).setLabel("internetProfile-AtmOptions-NailedGroup").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_AtmOptions_NailedGroup.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_AtmOptions_NailedGroup.setDescription('A number that identifies the set of lines that makes up a nailed-group.')
internetProfile_AtmOptions_CastType = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 426), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("p2p", 2), ("p2mproot", 3), ("p2mpleaf", 4)))).setLabel("internetProfile-AtmOptions-CastType").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_AtmOptions_CastType.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_AtmOptions_CastType.setDescription('The connection topology type.')
internetProfile_AtmOptions_ConnKind = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 427), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("pvc", 2), ("svcIncoming", 3), ("svcOutgoing", 4), ("spvcInitiator", 5), ("spvcTarget", 6)))).setLabel("internetProfile-AtmOptions-ConnKind").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_AtmOptions_ConnKind.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_AtmOptions_ConnKind.setDescription('The use of call control.')
internetProfile_AtmOptions_AtmServiceType = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 257), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("atmUbrService", 1), ("atmCbrService", 2), ("atmAbrService", 3), ("atmVbrService", 4)))).setLabel("internetProfile-AtmOptions-AtmServiceType").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_AtmOptions_AtmServiceType.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_AtmOptions_AtmServiceType.setDescription('ATM service type.')
internetProfile_AtmOptions_AtmServiceRate = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 258), Integer32()).setLabel("internetProfile-AtmOptions-AtmServiceRate").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_AtmOptions_AtmServiceRate.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_AtmOptions_AtmServiceRate.setDescription('ATM service rate is the minimum bits per second that is required.')
internetProfile_AtmOptions_VpSwitching = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 304), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("internetProfile-AtmOptions-VpSwitching").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_AtmOptions_VpSwitching.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_AtmOptions_VpSwitching.setDescription('Is this VP switching? VP = 0 is used for VC switching and VP > 0 is used for VP switching.')
internetProfile_AtmOptions_TargetAtmAddress = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 428), DisplayString()).setLabel("internetProfile-AtmOptions-TargetAtmAddress").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_AtmOptions_TargetAtmAddress.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_AtmOptions_TargetAtmAddress.setDescription('The target ATM Address of this Soft PVcc or PVpc.')
internetProfile_AtmOptions_TargetSelect = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 429), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("required", 2), ("any", 3)))).setLabel("internetProfile-AtmOptions-TargetSelect").setMaxAccess("readonly")
if mibBuilder.loadTexts: internetProfile_AtmOptions_TargetSelect.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_AtmOptions_TargetSelect.setDescription('Indicates whether the target VPI/VCI values are to be used at the destination.')
internetProfile_AtmOptions_TargetVpi = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 430), Integer32()).setLabel("internetProfile-AtmOptions-TargetVpi").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_AtmOptions_TargetVpi.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_AtmOptions_TargetVpi.setDescription('Target VPI.')
internetProfile_AtmOptions_TargetVci = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 431), Integer32()).setLabel("internetProfile-AtmOptions-TargetVci").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_AtmOptions_TargetVci.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_AtmOptions_TargetVci.setDescription('Target VCI.')
internetProfile_AtmOptions_SpvcRetryInterval = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 448), Integer32()).setLabel("internetProfile-AtmOptions-SpvcRetryInterval").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_AtmOptions_SpvcRetryInterval.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_AtmOptions_SpvcRetryInterval.setDescription('Period to wait before attempting to establish SPVC after the first SPVC setup failure. 0 indicates no retry')
internetProfile_AtmOptions_SpvcRetryThreshold = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 449), Integer32()).setLabel("internetProfile-AtmOptions-SpvcRetryThreshold").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_AtmOptions_SpvcRetryThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_AtmOptions_SpvcRetryThreshold.setDescription('The number of consecutive call setup attempts for the SPVC to fail before the call failure is declared. 0 indicates infinite number of call attempts that means failure is not declared.')
internetProfile_AtmOptions_SpvcRetryLimit = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 450), Integer32()).setLabel("internetProfile-AtmOptions-SpvcRetryLimit").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_AtmOptions_SpvcRetryLimit.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_AtmOptions_SpvcRetryLimit.setDescription('Maximum limit on how many consecutive unsuccessful call setup attempts can be made before stopping the attempt to set up the connection.')
internetProfile_AtmOptions_AtmDirectEnabled = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 306), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("internetProfile-AtmOptions-AtmDirectEnabled").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_AtmOptions_AtmDirectEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_AtmOptions_AtmDirectEnabled.setDescription('Enable ATM Direct.')
internetProfile_AtmOptions_AtmDirectProfile = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 307), DisplayString()).setLabel("internetProfile-AtmOptions-AtmDirectProfile").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_AtmOptions_AtmDirectProfile.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_AtmOptions_AtmDirectProfile.setDescription('The atm connection profile name to be used for the ATM Direct connection.')
internetProfile_AtmOptions_VcFaultManagement = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 357), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("segmentLoopback", 2), ("endToEndLoopback", 3)))).setLabel("internetProfile-AtmOptions-VcFaultManagement").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_AtmOptions_VcFaultManagement.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_AtmOptions_VcFaultManagement.setDescription('The VC fault management function to be used for this VC.')
internetProfile_AtmOptions_VcMaxLoopbackCellLoss = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 358), Integer32()).setLabel("internetProfile-AtmOptions-VcMaxLoopbackCellLoss").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_AtmOptions_VcMaxLoopbackCellLoss.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_AtmOptions_VcMaxLoopbackCellLoss.setDescription('The maximum number of consecutive cell loopback failures before the call is disconnected.')
internetProfile_AtmOptions_SvcOptions_Enabled = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 308), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("internetProfile-AtmOptions-SvcOptions-Enabled").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_AtmOptions_SvcOptions_Enabled.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_AtmOptions_SvcOptions_Enabled.setDescription('Enable ATM SVC.')
internetProfile_AtmOptions_SvcOptions_IncomingCallerAddr_NumberingPlan = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 381), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 5, 9))).clone(namedValues=NamedValues(("undefined", 1), ("isdn", 2), ("aesa", 3), ("unknown", 5), ("x121", 9)))).setLabel("internetProfile-AtmOptions-SvcOptions-IncomingCallerAddr-NumberingPlan").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_AtmOptions_SvcOptions_IncomingCallerAddr_NumberingPlan.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_AtmOptions_SvcOptions_IncomingCallerAddr_NumberingPlan.setDescription('Numbering plan for an SVC address')
internetProfile_AtmOptions_SvcOptions_IncomingCallerAddr_E164NativeAddress = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 382), DisplayString()).setLabel("internetProfile-AtmOptions-SvcOptions-IncomingCallerAddr-E164NativeAddress").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_AtmOptions_SvcOptions_IncomingCallerAddr_E164NativeAddress.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_AtmOptions_SvcOptions_IncomingCallerAddr_E164NativeAddress.setDescription('An SVC address in a native E.164 format.')
internetProfile_AtmOptions_SvcOptions_IncomingCallerAddr_AesaAddress_Format = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 383), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 6, 4, 5))).clone(namedValues=NamedValues(("undefined", 1), ("dccAesa", 2), ("icdAesa", 6), ("e164Aesa", 4), ("customAesa", 5)))).setLabel("internetProfile-AtmOptions-SvcOptions-IncomingCallerAddr-AesaAddress-Format").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_AtmOptions_SvcOptions_IncomingCallerAddr_AesaAddress_Format.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_AtmOptions_SvcOptions_IncomingCallerAddr_AesaAddress_Format.setDescription('An AESA address format used to define this SVC address.')
internetProfile_AtmOptions_SvcOptions_IncomingCallerAddr_AesaAddress_IdpPortion_Afi = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 384), DisplayString()).setLabel("internetProfile-AtmOptions-SvcOptions-IncomingCallerAddr-AesaAddress-IdpPortion-Afi").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_AtmOptions_SvcOptions_IncomingCallerAddr_AesaAddress_IdpPortion_Afi.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_AtmOptions_SvcOptions_IncomingCallerAddr_AesaAddress_IdpPortion_Afi.setDescription('An Authority and Format Identifier(AFI) for AESA address. Must be defined for every AESA address.')
internetProfile_AtmOptions_SvcOptions_IncomingCallerAddr_AesaAddress_IdpPortion_Idi = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 385), DisplayString()).setLabel("internetProfile-AtmOptions-SvcOptions-IncomingCallerAddr-AesaAddress-IdpPortion-Idi").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_AtmOptions_SvcOptions_IncomingCallerAddr_AesaAddress_IdpPortion_Idi.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_AtmOptions_SvcOptions_IncomingCallerAddr_AesaAddress_IdpPortion_Idi.setDescription('An Initial Domain Identifier (IDI) portion of the AESA address.')
internetProfile_AtmOptions_SvcOptions_IncomingCallerAddr_AesaAddress_DspPortion_HoDsp = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 386), DisplayString()).setLabel("internetProfile-AtmOptions-SvcOptions-IncomingCallerAddr-AesaAddress-DspPortion-HoDsp").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_AtmOptions_SvcOptions_IncomingCallerAddr_AesaAddress_DspPortion_HoDsp.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_AtmOptions_SvcOptions_IncomingCallerAddr_AesaAddress_DspPortion_HoDsp.setDescription('A High-Order Domain-Specific Part of AESA address. The IDP portion determine the format of the HO-DSP.')
internetProfile_AtmOptions_SvcOptions_IncomingCallerAddr_AesaAddress_DspPortion_Esi = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 387), DisplayString()).setLabel("internetProfile-AtmOptions-SvcOptions-IncomingCallerAddr-AesaAddress-DspPortion-Esi").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_AtmOptions_SvcOptions_IncomingCallerAddr_AesaAddress_DspPortion_Esi.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_AtmOptions_SvcOptions_IncomingCallerAddr_AesaAddress_DspPortion_Esi.setDescription('An End System Identifier (ESI) which uniquely identifies the end system within the specified subnetwork.')
internetProfile_AtmOptions_SvcOptions_IncomingCallerAddr_AesaAddress_DspPortion_Sel = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 388), DisplayString()).setLabel("internetProfile-AtmOptions-SvcOptions-IncomingCallerAddr-AesaAddress-DspPortion-Sel").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_AtmOptions_SvcOptions_IncomingCallerAddr_AesaAddress_DspPortion_Sel.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_AtmOptions_SvcOptions_IncomingCallerAddr_AesaAddress_DspPortion_Sel.setDescription('A selector (SEL) field that may be used by the end system.')
internetProfile_AtmOptions_SvcOptions_OutgoingCalledAddr_NumberingPlan = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 389), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 5, 9))).clone(namedValues=NamedValues(("undefined", 1), ("isdn", 2), ("aesa", 3), ("unknown", 5), ("x121", 9)))).setLabel("internetProfile-AtmOptions-SvcOptions-OutgoingCalledAddr-NumberingPlan").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_AtmOptions_SvcOptions_OutgoingCalledAddr_NumberingPlan.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_AtmOptions_SvcOptions_OutgoingCalledAddr_NumberingPlan.setDescription('Numbering plan for an SVC address')
internetProfile_AtmOptions_SvcOptions_OutgoingCalledAddr_E164NativeAddress = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 390), DisplayString()).setLabel("internetProfile-AtmOptions-SvcOptions-OutgoingCalledAddr-E164NativeAddress").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_AtmOptions_SvcOptions_OutgoingCalledAddr_E164NativeAddress.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_AtmOptions_SvcOptions_OutgoingCalledAddr_E164NativeAddress.setDescription('An SVC address in a native E.164 format.')
internetProfile_AtmOptions_SvcOptions_OutgoingCalledAddr_AesaAddress_Format = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 391), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 6, 4, 5))).clone(namedValues=NamedValues(("undefined", 1), ("dccAesa", 2), ("icdAesa", 6), ("e164Aesa", 4), ("customAesa", 5)))).setLabel("internetProfile-AtmOptions-SvcOptions-OutgoingCalledAddr-AesaAddress-Format").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_AtmOptions_SvcOptions_OutgoingCalledAddr_AesaAddress_Format.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_AtmOptions_SvcOptions_OutgoingCalledAddr_AesaAddress_Format.setDescription('An AESA address format used to define this SVC address.')
internetProfile_AtmOptions_SvcOptions_OutgoingCalledAddr_AesaAddress_IdpPortion_Afi = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 392), DisplayString()).setLabel("internetProfile-AtmOptions-SvcOptions-OutgoingCalledAddr-AesaAddress-IdpPortion-Afi").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_AtmOptions_SvcOptions_OutgoingCalledAddr_AesaAddress_IdpPortion_Afi.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_AtmOptions_SvcOptions_OutgoingCalledAddr_AesaAddress_IdpPortion_Afi.setDescription('An Authority and Format Identifier(AFI) for AESA address. Must be defined for every AESA address.')
internetProfile_AtmOptions_SvcOptions_OutgoingCalledAddr_AesaAddress_IdpPortion_Idi = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 393), DisplayString()).setLabel("internetProfile-AtmOptions-SvcOptions-OutgoingCalledAddr-AesaAddress-IdpPortion-Idi").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_AtmOptions_SvcOptions_OutgoingCalledAddr_AesaAddress_IdpPortion_Idi.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_AtmOptions_SvcOptions_OutgoingCalledAddr_AesaAddress_IdpPortion_Idi.setDescription('An Initial Domain Identifier (IDI) portion of the AESA address.')
internetProfile_AtmOptions_SvcOptions_OutgoingCalledAddr_AesaAddress_DspPortion_HoDsp = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 394), DisplayString()).setLabel("internetProfile-AtmOptions-SvcOptions-OutgoingCalledAddr-AesaAddress-DspPortion-HoDsp").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_AtmOptions_SvcOptions_OutgoingCalledAddr_AesaAddress_DspPortion_HoDsp.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_AtmOptions_SvcOptions_OutgoingCalledAddr_AesaAddress_DspPortion_HoDsp.setDescription('A High-Order Domain-Specific Part of AESA address. The IDP portion determine the format of the HO-DSP.')
internetProfile_AtmOptions_SvcOptions_OutgoingCalledAddr_AesaAddress_DspPortion_Esi = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 395), DisplayString()).setLabel("internetProfile-AtmOptions-SvcOptions-OutgoingCalledAddr-AesaAddress-DspPortion-Esi").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_AtmOptions_SvcOptions_OutgoingCalledAddr_AesaAddress_DspPortion_Esi.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_AtmOptions_SvcOptions_OutgoingCalledAddr_AesaAddress_DspPortion_Esi.setDescription('An End System Identifier (ESI) which uniquely identifies the end system within the specified subnetwork.')
internetProfile_AtmOptions_SvcOptions_OutgoingCalledAddr_AesaAddress_DspPortion_Sel = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 396), DisplayString()).setLabel("internetProfile-AtmOptions-SvcOptions-OutgoingCalledAddr-AesaAddress-DspPortion-Sel").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_AtmOptions_SvcOptions_OutgoingCalledAddr_AesaAddress_DspPortion_Sel.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_AtmOptions_SvcOptions_OutgoingCalledAddr_AesaAddress_DspPortion_Sel.setDescription('A selector (SEL) field that may be used by the end system.')
internetProfile_AtmOptions_AtmInverseArp = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 327), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("internetProfile-AtmOptions-AtmInverseArp").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_AtmOptions_AtmInverseArp.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_AtmOptions_AtmInverseArp.setDescription('Send Atm Inverse Arp request for this connection.')
internetProfile_AtmOptions_Fr08Mode = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 367), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("translation", 1), ("transparent", 2)))).setLabel("internetProfile-AtmOptions-Fr08Mode").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_AtmOptions_Fr08Mode.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_AtmOptions_Fr08Mode.setDescription('The FR-08 transparent mode')
internetProfile_AtmOptions_AtmCircuitProfile = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 432), DisplayString()).setLabel("internetProfile-AtmOptions-AtmCircuitProfile").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_AtmOptions_AtmCircuitProfile.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_AtmOptions_AtmCircuitProfile.setDescription('The atm circuit profile name to be used for this connection.')
internetProfile_AtmOptions_OamAisF5 = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 451), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disable", 1), ("segment", 2), ("endToEnd", 3)))).setLabel("internetProfile-AtmOptions-OamAisF5").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_AtmOptions_OamAisF5.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_AtmOptions_OamAisF5.setDescription('Disable/Enable sending OAM AIS F5 cells when pvc is down.')
internetProfile_AtmOptions_OamSupport = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 452), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("internetProfile-AtmOptions-OamSupport").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_AtmOptions_OamSupport.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_AtmOptions_OamSupport.setDescription('Is F4 OAM supported? It is used only when vp-switching is yes. The Stinger system can only support F4 OAM for 50 VPC segments in total.')
internetProfile_AtmOptions_Mtu = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 468), Integer32()).setLabel("internetProfile-AtmOptions-Mtu").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_AtmOptions_Mtu.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_AtmOptions_Mtu.setDescription('The maximum packet size (excluding LLC encapsulation if used) that can be transmitted to a remote peer without performing fragmentation.')
internetProfile_HdlcNrmOptions_SnrmResponseTimeout = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 259), Integer32()).setLabel("internetProfile-HdlcNrmOptions-SnrmResponseTimeout").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_HdlcNrmOptions_SnrmResponseTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_HdlcNrmOptions_SnrmResponseTimeout.setDescription('SNRM Response Timeout in milliseconds.')
internetProfile_HdlcNrmOptions_SnrmRetryCounter = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 260), Integer32()).setLabel("internetProfile-HdlcNrmOptions-SnrmRetryCounter").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_HdlcNrmOptions_SnrmRetryCounter.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_HdlcNrmOptions_SnrmRetryCounter.setDescription('SNRM Retry Counter in units.')
internetProfile_HdlcNrmOptions_PollTimeout = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 261), Integer32()).setLabel("internetProfile-HdlcNrmOptions-PollTimeout").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_HdlcNrmOptions_PollTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_HdlcNrmOptions_PollTimeout.setDescription('HDLC-NRM Poll Reponse Timeout in milliseconds')
internetProfile_HdlcNrmOptions_PollRate = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 262), Integer32()).setLabel("internetProfile-HdlcNrmOptions-PollRate").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_HdlcNrmOptions_PollRate.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_HdlcNrmOptions_PollRate.setDescription('HDLC-NRM Poll Rate in milliseconds')
internetProfile_HdlcNrmOptions_PollRetryCount = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 263), Integer32()).setLabel("internetProfile-HdlcNrmOptions-PollRetryCount").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_HdlcNrmOptions_PollRetryCount.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_HdlcNrmOptions_PollRetryCount.setDescription('Poll Response Retry Counter in units')
internetProfile_HdlcNrmOptions_Primary = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 264), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("internetProfile-HdlcNrmOptions-Primary").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_HdlcNrmOptions_Primary.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_HdlcNrmOptions_Primary.setDescription('Primary station (Yes) or Secondary station (No).')
internetProfile_HdlcNrmOptions_AsyncDrop = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 368), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("internetProfile-HdlcNrmOptions-AsyncDrop").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_HdlcNrmOptions_AsyncDrop.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_HdlcNrmOptions_AsyncDrop.setDescription('Drop Async I-frames (Yes) or process (No).')
internetProfile_HdlcNrmOptions_StationPollAddress = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 416), Integer32()).setLabel("internetProfile-HdlcNrmOptions-StationPollAddress").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_HdlcNrmOptions_StationPollAddress.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_HdlcNrmOptions_StationPollAddress.setDescription('Secondary station address to use for SNRM polling')
internetProfile_AtmConnectOptions_Atm1483type = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 265), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("aal5Llc", 1), ("aal5Vc", 2)))).setLabel("internetProfile-AtmConnectOptions-Atm1483type").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_AtmConnectOptions_Atm1483type.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_AtmConnectOptions_Atm1483type.setDescription('The type of AAL5 multiplexing.')
internetProfile_AtmConnectOptions_Vpi = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 266), Integer32()).setLabel("internetProfile-AtmConnectOptions-Vpi").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_AtmConnectOptions_Vpi.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_AtmConnectOptions_Vpi.setDescription('The VPI of this connection.')
internetProfile_AtmConnectOptions_Vci = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 267), Integer32()).setLabel("internetProfile-AtmConnectOptions-Vci").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_AtmConnectOptions_Vci.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_AtmConnectOptions_Vci.setDescription('The VCI of this connection.')
internetProfile_AtmConnectOptions_NailedGroup = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 268), Integer32()).setLabel("internetProfile-AtmConnectOptions-NailedGroup").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_AtmConnectOptions_NailedGroup.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_AtmConnectOptions_NailedGroup.setDescription('A number that identifies the set of lines that makes up a nailed-group.')
internetProfile_AtmConnectOptions_CastType = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 433), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("p2p", 2), ("p2mproot", 3), ("p2mpleaf", 4)))).setLabel("internetProfile-AtmConnectOptions-CastType").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_AtmConnectOptions_CastType.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_AtmConnectOptions_CastType.setDescription('The connection topology type.')
internetProfile_AtmConnectOptions_ConnKind = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 434), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("pvc", 2), ("svcIncoming", 3), ("svcOutgoing", 4), ("spvcInitiator", 5), ("spvcTarget", 6)))).setLabel("internetProfile-AtmConnectOptions-ConnKind").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_AtmConnectOptions_ConnKind.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_AtmConnectOptions_ConnKind.setDescription('The use of call control.')
internetProfile_AtmConnectOptions_AtmServiceType = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 269), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("atmUbrService", 1), ("atmCbrService", 2), ("atmAbrService", 3), ("atmVbrService", 4)))).setLabel("internetProfile-AtmConnectOptions-AtmServiceType").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_AtmConnectOptions_AtmServiceType.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_AtmConnectOptions_AtmServiceType.setDescription('ATM service type.')
internetProfile_AtmConnectOptions_AtmServiceRate = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 270), Integer32()).setLabel("internetProfile-AtmConnectOptions-AtmServiceRate").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_AtmConnectOptions_AtmServiceRate.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_AtmConnectOptions_AtmServiceRate.setDescription('ATM service rate is the minimum bits per second that is required.')
internetProfile_AtmConnectOptions_VpSwitching = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 328), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("internetProfile-AtmConnectOptions-VpSwitching").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_AtmConnectOptions_VpSwitching.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_AtmConnectOptions_VpSwitching.setDescription('Is this VP switching? VP = 0 is used for VC switching and VP > 0 is used for VP switching.')
internetProfile_AtmConnectOptions_TargetAtmAddress = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 435), DisplayString()).setLabel("internetProfile-AtmConnectOptions-TargetAtmAddress").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_AtmConnectOptions_TargetAtmAddress.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_AtmConnectOptions_TargetAtmAddress.setDescription('The target ATM Address of this Soft PVcc or PVpc.')
internetProfile_AtmConnectOptions_TargetSelect = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 436), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("required", 2), ("any", 3)))).setLabel("internetProfile-AtmConnectOptions-TargetSelect").setMaxAccess("readonly")
if mibBuilder.loadTexts: internetProfile_AtmConnectOptions_TargetSelect.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_AtmConnectOptions_TargetSelect.setDescription('Indicates whether the target VPI/VCI values are to be used at the destination.')
internetProfile_AtmConnectOptions_TargetVpi = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 437), Integer32()).setLabel("internetProfile-AtmConnectOptions-TargetVpi").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_AtmConnectOptions_TargetVpi.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_AtmConnectOptions_TargetVpi.setDescription('Target VPI.')
internetProfile_AtmConnectOptions_TargetVci = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 438), Integer32()).setLabel("internetProfile-AtmConnectOptions-TargetVci").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_AtmConnectOptions_TargetVci.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_AtmConnectOptions_TargetVci.setDescription('Target VCI.')
internetProfile_AtmConnectOptions_SpvcRetryInterval = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 453), Integer32()).setLabel("internetProfile-AtmConnectOptions-SpvcRetryInterval").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_AtmConnectOptions_SpvcRetryInterval.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_AtmConnectOptions_SpvcRetryInterval.setDescription('Period to wait before attempting to establish SPVC after the first SPVC setup failure. 0 indicates no retry')
internetProfile_AtmConnectOptions_SpvcRetryThreshold = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 454), Integer32()).setLabel("internetProfile-AtmConnectOptions-SpvcRetryThreshold").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_AtmConnectOptions_SpvcRetryThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_AtmConnectOptions_SpvcRetryThreshold.setDescription('The number of consecutive call setup attempts for the SPVC to fail before the call failure is declared. 0 indicates infinite number of call attempts that means failure is not declared.')
internetProfile_AtmConnectOptions_SpvcRetryLimit = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 455), Integer32()).setLabel("internetProfile-AtmConnectOptions-SpvcRetryLimit").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_AtmConnectOptions_SpvcRetryLimit.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_AtmConnectOptions_SpvcRetryLimit.setDescription('Maximum limit on how many consecutive unsuccessful call setup attempts can be made before stopping the attempt to set up the connection.')
internetProfile_AtmConnectOptions_AtmDirectEnabled = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 330), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("internetProfile-AtmConnectOptions-AtmDirectEnabled").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_AtmConnectOptions_AtmDirectEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_AtmConnectOptions_AtmDirectEnabled.setDescription('Enable ATM Direct.')
internetProfile_AtmConnectOptions_AtmDirectProfile = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 331), DisplayString()).setLabel("internetProfile-AtmConnectOptions-AtmDirectProfile").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_AtmConnectOptions_AtmDirectProfile.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_AtmConnectOptions_AtmDirectProfile.setDescription('The atm connection profile name to be used for the ATM Direct connection.')
internetProfile_AtmConnectOptions_VcFaultManagement = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 369), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("segmentLoopback", 2), ("endToEndLoopback", 3)))).setLabel("internetProfile-AtmConnectOptions-VcFaultManagement").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_AtmConnectOptions_VcFaultManagement.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_AtmConnectOptions_VcFaultManagement.setDescription('The VC fault management function to be used for this VC.')
internetProfile_AtmConnectOptions_VcMaxLoopbackCellLoss = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 370), Integer32()).setLabel("internetProfile-AtmConnectOptions-VcMaxLoopbackCellLoss").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_AtmConnectOptions_VcMaxLoopbackCellLoss.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_AtmConnectOptions_VcMaxLoopbackCellLoss.setDescription('The maximum number of consecutive cell loopback failures before the call is disconnected.')
internetProfile_AtmConnectOptions_SvcOptions_Enabled = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 332), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("internetProfile-AtmConnectOptions-SvcOptions-Enabled").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_AtmConnectOptions_SvcOptions_Enabled.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_AtmConnectOptions_SvcOptions_Enabled.setDescription('Enable ATM SVC.')
internetProfile_AtmConnectOptions_SvcOptions_IncomingCallerAddr_NumberingPlan = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 397), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 5, 9))).clone(namedValues=NamedValues(("undefined", 1), ("isdn", 2), ("aesa", 3), ("unknown", 5), ("x121", 9)))).setLabel("internetProfile-AtmConnectOptions-SvcOptions-IncomingCallerAddr-NumberingPlan").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_AtmConnectOptions_SvcOptions_IncomingCallerAddr_NumberingPlan.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_AtmConnectOptions_SvcOptions_IncomingCallerAddr_NumberingPlan.setDescription('Numbering plan for an SVC address')
internetProfile_AtmConnectOptions_SvcOptions_IncomingCallerAddr_E164NativeAddress = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 398), DisplayString()).setLabel("internetProfile-AtmConnectOptions-SvcOptions-IncomingCallerAddr-E164NativeAddress").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_AtmConnectOptions_SvcOptions_IncomingCallerAddr_E164NativeAddress.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_AtmConnectOptions_SvcOptions_IncomingCallerAddr_E164NativeAddress.setDescription('An SVC address in a native E.164 format.')
internetProfile_AtmConnectOptions_SvcOptions_IncomingCallerAddr_AesaAddress_Format = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 399), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 6, 4, 5))).clone(namedValues=NamedValues(("undefined", 1), ("dccAesa", 2), ("icdAesa", 6), ("e164Aesa", 4), ("customAesa", 5)))).setLabel("internetProfile-AtmConnectOptions-SvcOptions-IncomingCallerAddr-AesaAddress-Format").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_AtmConnectOptions_SvcOptions_IncomingCallerAddr_AesaAddress_Format.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_AtmConnectOptions_SvcOptions_IncomingCallerAddr_AesaAddress_Format.setDescription('An AESA address format used to define this SVC address.')
internetProfile_AtmConnectOptions_SvcOptions_IncomingCallerAddr_AesaAddress_IdpPortion_Afi = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 400), DisplayString()).setLabel("internetProfile-AtmConnectOptions-SvcOptions-IncomingCallerAddr-AesaAddress-IdpPortion-Afi").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_AtmConnectOptions_SvcOptions_IncomingCallerAddr_AesaAddress_IdpPortion_Afi.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_AtmConnectOptions_SvcOptions_IncomingCallerAddr_AesaAddress_IdpPortion_Afi.setDescription('An Authority and Format Identifier(AFI) for AESA address. Must be defined for every AESA address.')
internetProfile_AtmConnectOptions_SvcOptions_IncomingCallerAddr_AesaAddress_IdpPortion_Idi = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 401), DisplayString()).setLabel("internetProfile-AtmConnectOptions-SvcOptions-IncomingCallerAddr-AesaAddress-IdpPortion-Idi").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_AtmConnectOptions_SvcOptions_IncomingCallerAddr_AesaAddress_IdpPortion_Idi.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_AtmConnectOptions_SvcOptions_IncomingCallerAddr_AesaAddress_IdpPortion_Idi.setDescription('An Initial Domain Identifier (IDI) portion of the AESA address.')
internetProfile_AtmConnectOptions_SvcOptions_IncomingCallerAddr_AesaAddress_DspPortion_HoDsp = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 402), DisplayString()).setLabel("internetProfile-AtmConnectOptions-SvcOptions-IncomingCallerAddr-AesaAddress-DspPortion-HoDsp").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_AtmConnectOptions_SvcOptions_IncomingCallerAddr_AesaAddress_DspPortion_HoDsp.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_AtmConnectOptions_SvcOptions_IncomingCallerAddr_AesaAddress_DspPortion_HoDsp.setDescription('A High-Order Domain-Specific Part of AESA address. The IDP portion determine the format of the HO-DSP.')
internetProfile_AtmConnectOptions_SvcOptions_IncomingCallerAddr_AesaAddress_DspPortion_Esi = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 403), DisplayString()).setLabel("internetProfile-AtmConnectOptions-SvcOptions-IncomingCallerAddr-AesaAddress-DspPortion-Esi").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_AtmConnectOptions_SvcOptions_IncomingCallerAddr_AesaAddress_DspPortion_Esi.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_AtmConnectOptions_SvcOptions_IncomingCallerAddr_AesaAddress_DspPortion_Esi.setDescription('An End System Identifier (ESI) which uniquely identifies the end system within the specified subnetwork.')
internetProfile_AtmConnectOptions_SvcOptions_IncomingCallerAddr_AesaAddress_DspPortion_Sel = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 404), DisplayString()).setLabel("internetProfile-AtmConnectOptions-SvcOptions-IncomingCallerAddr-AesaAddress-DspPortion-Sel").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_AtmConnectOptions_SvcOptions_IncomingCallerAddr_AesaAddress_DspPortion_Sel.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_AtmConnectOptions_SvcOptions_IncomingCallerAddr_AesaAddress_DspPortion_Sel.setDescription('A selector (SEL) field that may be used by the end system.')
internetProfile_AtmConnectOptions_SvcOptions_OutgoingCalledAddr_NumberingPlan = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 405), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 5, 9))).clone(namedValues=NamedValues(("undefined", 1), ("isdn", 2), ("aesa", 3), ("unknown", 5), ("x121", 9)))).setLabel("internetProfile-AtmConnectOptions-SvcOptions-OutgoingCalledAddr-NumberingPlan").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_AtmConnectOptions_SvcOptions_OutgoingCalledAddr_NumberingPlan.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_AtmConnectOptions_SvcOptions_OutgoingCalledAddr_NumberingPlan.setDescription('Numbering plan for an SVC address')
internetProfile_AtmConnectOptions_SvcOptions_OutgoingCalledAddr_E164NativeAddress = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 406), DisplayString()).setLabel("internetProfile-AtmConnectOptions-SvcOptions-OutgoingCalledAddr-E164NativeAddress").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_AtmConnectOptions_SvcOptions_OutgoingCalledAddr_E164NativeAddress.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_AtmConnectOptions_SvcOptions_OutgoingCalledAddr_E164NativeAddress.setDescription('An SVC address in a native E.164 format.')
internetProfile_AtmConnectOptions_SvcOptions_OutgoingCalledAddr_AesaAddress_Format = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 407), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 6, 4, 5))).clone(namedValues=NamedValues(("undefined", 1), ("dccAesa", 2), ("icdAesa", 6), ("e164Aesa", 4), ("customAesa", 5)))).setLabel("internetProfile-AtmConnectOptions-SvcOptions-OutgoingCalledAddr-AesaAddress-Format").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_AtmConnectOptions_SvcOptions_OutgoingCalledAddr_AesaAddress_Format.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_AtmConnectOptions_SvcOptions_OutgoingCalledAddr_AesaAddress_Format.setDescription('An AESA address format used to define this SVC address.')
internetProfile_AtmConnectOptions_SvcOptions_OutgoingCalledAddr_AesaAddress_IdpPortion_Afi = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 408), DisplayString()).setLabel("internetProfile-AtmConnectOptions-SvcOptions-OutgoingCalledAddr-AesaAddress-IdpPortion-Afi").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_AtmConnectOptions_SvcOptions_OutgoingCalledAddr_AesaAddress_IdpPortion_Afi.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_AtmConnectOptions_SvcOptions_OutgoingCalledAddr_AesaAddress_IdpPortion_Afi.setDescription('An Authority and Format Identifier(AFI) for AESA address. Must be defined for every AESA address.')
internetProfile_AtmConnectOptions_SvcOptions_OutgoingCalledAddr_AesaAddress_IdpPortion_Idi = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 409), DisplayString()).setLabel("internetProfile-AtmConnectOptions-SvcOptions-OutgoingCalledAddr-AesaAddress-IdpPortion-Idi").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_AtmConnectOptions_SvcOptions_OutgoingCalledAddr_AesaAddress_IdpPortion_Idi.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_AtmConnectOptions_SvcOptions_OutgoingCalledAddr_AesaAddress_IdpPortion_Idi.setDescription('An Initial Domain Identifier (IDI) portion of the AESA address.')
internetProfile_AtmConnectOptions_SvcOptions_OutgoingCalledAddr_AesaAddress_DspPortion_HoDsp = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 410), DisplayString()).setLabel("internetProfile-AtmConnectOptions-SvcOptions-OutgoingCalledAddr-AesaAddress-DspPortion-HoDsp").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_AtmConnectOptions_SvcOptions_OutgoingCalledAddr_AesaAddress_DspPortion_HoDsp.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_AtmConnectOptions_SvcOptions_OutgoingCalledAddr_AesaAddress_DspPortion_HoDsp.setDescription('A High-Order Domain-Specific Part of AESA address. The IDP portion determine the format of the HO-DSP.')
internetProfile_AtmConnectOptions_SvcOptions_OutgoingCalledAddr_AesaAddress_DspPortion_Esi = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 411), DisplayString()).setLabel("internetProfile-AtmConnectOptions-SvcOptions-OutgoingCalledAddr-AesaAddress-DspPortion-Esi").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_AtmConnectOptions_SvcOptions_OutgoingCalledAddr_AesaAddress_DspPortion_Esi.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_AtmConnectOptions_SvcOptions_OutgoingCalledAddr_AesaAddress_DspPortion_Esi.setDescription('An End System Identifier (ESI) which uniquely identifies the end system within the specified subnetwork.')
internetProfile_AtmConnectOptions_SvcOptions_OutgoingCalledAddr_AesaAddress_DspPortion_Sel = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 412), DisplayString()).setLabel("internetProfile-AtmConnectOptions-SvcOptions-OutgoingCalledAddr-AesaAddress-DspPortion-Sel").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_AtmConnectOptions_SvcOptions_OutgoingCalledAddr_AesaAddress_DspPortion_Sel.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_AtmConnectOptions_SvcOptions_OutgoingCalledAddr_AesaAddress_DspPortion_Sel.setDescription('A selector (SEL) field that may be used by the end system.')
internetProfile_AtmConnectOptions_AtmInverseArp = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 351), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("internetProfile-AtmConnectOptions-AtmInverseArp").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_AtmConnectOptions_AtmInverseArp.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_AtmConnectOptions_AtmInverseArp.setDescription('Send Atm Inverse Arp request for this connection.')
internetProfile_AtmConnectOptions_Fr08Mode = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 379), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("translation", 1), ("transparent", 2)))).setLabel("internetProfile-AtmConnectOptions-Fr08Mode").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_AtmConnectOptions_Fr08Mode.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_AtmConnectOptions_Fr08Mode.setDescription('The FR-08 transparent mode')
internetProfile_AtmConnectOptions_AtmCircuitProfile = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 439), DisplayString()).setLabel("internetProfile-AtmConnectOptions-AtmCircuitProfile").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_AtmConnectOptions_AtmCircuitProfile.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_AtmConnectOptions_AtmCircuitProfile.setDescription('The atm circuit profile name to be used for this connection.')
internetProfile_AtmConnectOptions_OamAisF5 = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 456), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disable", 1), ("segment", 2), ("endToEnd", 3)))).setLabel("internetProfile-AtmConnectOptions-OamAisF5").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_AtmConnectOptions_OamAisF5.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_AtmConnectOptions_OamAisF5.setDescription('Disable/Enable sending OAM AIS F5 cells when pvc is down.')
internetProfile_AtmConnectOptions_OamSupport = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 457), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("internetProfile-AtmConnectOptions-OamSupport").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_AtmConnectOptions_OamSupport.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_AtmConnectOptions_OamSupport.setDescription('Is F4 OAM supported? It is used only when vp-switching is yes. The Stinger system can only support F4 OAM for 50 VPC segments in total.')
internetProfile_AtmConnectOptions_Mtu = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 469), Integer32()).setLabel("internetProfile-AtmConnectOptions-Mtu").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_AtmConnectOptions_Mtu.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_AtmConnectOptions_Mtu.setDescription('The maximum packet size (excluding LLC encapsulation if used) that can be transmitted to a remote peer without performing fragmentation.')
internetProfile_Visa2Options_IdleCharacterDelay = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 271), Integer32()).setLabel("internetProfile-Visa2Options-IdleCharacterDelay").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_Visa2Options_IdleCharacterDelay.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_Visa2Options_IdleCharacterDelay.setDescription('Idle Character Delay in milliseconds.')
internetProfile_Visa2Options_FirstDataForwardCharacter = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 272), DisplayString()).setLabel("internetProfile-Visa2Options-FirstDataForwardCharacter").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_Visa2Options_FirstDataForwardCharacter.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_Visa2Options_FirstDataForwardCharacter.setDescription('First Data Forwarding Character. Default is 0x04')
internetProfile_Visa2Options_SecondDataForwardCharacter = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 273), DisplayString()).setLabel("internetProfile-Visa2Options-SecondDataForwardCharacter").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_Visa2Options_SecondDataForwardCharacter.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_Visa2Options_SecondDataForwardCharacter.setDescription('Second Data Forwarding Character. Default is 0x06')
internetProfile_Visa2Options_ThirdDataForwardCharacter = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 274), DisplayString()).setLabel("internetProfile-Visa2Options-ThirdDataForwardCharacter").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_Visa2Options_ThirdDataForwardCharacter.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_Visa2Options_ThirdDataForwardCharacter.setDescription('Third Data Forwarding Character. Default is 0x15')
internetProfile_Visa2Options_FourthDataForwardCharacter = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 275), DisplayString()).setLabel("internetProfile-Visa2Options-FourthDataForwardCharacter").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_Visa2Options_FourthDataForwardCharacter.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_Visa2Options_FourthDataForwardCharacter.setDescription('Fourth Data Forwarding Character. Default is 0x05')
internetProfile_Visa2Options_o1CharSequence = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 276), DisplayString()).setLabel("internetProfile-Visa2Options-o1CharSequence").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_Visa2Options_o1CharSequence.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_Visa2Options_o1CharSequence.setDescription('1 character data forwarding sequence. Default is 0x03')
internetProfile_Visa2Options_o2CharSequence = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 277), DisplayString()).setLabel("internetProfile-Visa2Options-o2CharSequence").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_Visa2Options_o2CharSequence.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_Visa2Options_o2CharSequence.setDescription('2 character data forwarding sequence. Default is 0x00:0x03')
internetProfile_SdtnPacketsServer = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 278), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("internetProfile-SdtnPacketsServer").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_SdtnPacketsServer.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_SdtnPacketsServer.setDescription('Decides if this profile Handles sdtn-packets. Note, the Sdtn data packets may still be encapsulated')
internetProfile_oATString = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 279), DisplayString()).setLabel("internetProfile-oATString").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_oATString.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_oATString.setDescription('Allows the user to enter customized AT commands in the modem dial or answer string.')
internetProfile_PortRedirectOptions_Protocol = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 280), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 7, 18))).clone(namedValues=NamedValues(("none", 1), ("tcp", 7), ("udp", 18)))).setLabel("internetProfile-PortRedirectOptions-Protocol").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_PortRedirectOptions_Protocol.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_PortRedirectOptions_Protocol.setDescription('The protocol to be redirected.')
internetProfile_PortRedirectOptions_PortNumber = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 281), Integer32()).setLabel("internetProfile-PortRedirectOptions-PortNumber").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_PortRedirectOptions_PortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_PortRedirectOptions_PortNumber.setDescription('Port number to be redirected.')
internetProfile_PortRedirectOptions_RedirectAddress = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 282), IpAddress()).setLabel("internetProfile-PortRedirectOptions-RedirectAddress").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_PortRedirectOptions_RedirectAddress.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_PortRedirectOptions_RedirectAddress.setDescription('IP Address of server to which packet is to be redirected.')
internetProfile_PppoeOptions_Pppoe = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 288), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("internetProfile-PppoeOptions-Pppoe").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_PppoeOptions_Pppoe.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_PppoeOptions_Pppoe.setDescription('Enable or disable the ability to establish PPP over Ethernet session over this interface.')
internetProfile_PppoeOptions_BridgeNonPppoe = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 289), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("internetProfile-PppoeOptions-BridgeNonPppoe").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_PppoeOptions_BridgeNonPppoe.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_PppoeOptions_BridgeNonPppoe.setDescription('States wheather to bridge all other protocols except PPPoE on this interface or not.')
internetProfile_AtmQosOptions_UsrUpStreamContract = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 352), DisplayString()).setLabel("internetProfile-AtmQosOptions-UsrUpStreamContract").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_AtmQosOptions_UsrUpStreamContract.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_AtmQosOptions_UsrUpStreamContract.setDescription('Quality of Service (QOS) contract for user up stream traffic')
internetProfile_AtmQosOptions_UsrDnStreamContract = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 353), DisplayString()).setLabel("internetProfile-AtmQosOptions-UsrDnStreamContract").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_AtmQosOptions_UsrDnStreamContract.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_AtmQosOptions_UsrDnStreamContract.setDescription('Quality of Service (QOS) contract for user down stream traffic')
internetProfile_AtmQosOptions_SubtendingHops = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 470), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("n-0Level", 1), ("n-1Level", 2), ("n-2Level", 3), ("n-3Level", 4)))).setLabel("internetProfile-AtmQosOptions-SubtendingHops").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_AtmQosOptions_SubtendingHops.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_AtmQosOptions_SubtendingHops.setDescription('Number of hops from which the end-point of this connection originates')
internetProfile_BirOptions_Enable = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 290), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("internetProfile-BirOptions-Enable").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_BirOptions_Enable.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_BirOptions_Enable.setDescription('Enable or disable the BIR on this interface.')
internetProfile_BirOptions_ProxyArp = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 291), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("internetProfile-BirOptions-ProxyArp").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_BirOptions_ProxyArp.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_BirOptions_ProxyArp.setDescription('Specify how proxy arp is to be used on an interface.')
internetProfile_AtmAalOptions_AalEnabled = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 440), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("internetProfile-AtmAalOptions-AalEnabled").setMaxAccess("readonly")
if mibBuilder.loadTexts: internetProfile_AtmAalOptions_AalEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_AtmAalOptions_AalEnabled.setDescription('Enable the AAl options')
internetProfile_AtmAalOptions_AalType = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 441), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("aal0", 1), ("aal5", 2), ("unspecified", 3)))).setLabel("internetProfile-AtmAalOptions-AalType").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_AtmAalOptions_AalType.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_AtmAalOptions_AalType.setDescription('ATM Adaptation Layer type')
internetProfile_AtmAalOptions_TransmitSduSize = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 442), Integer32()).setLabel("internetProfile-AtmAalOptions-TransmitSduSize").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_AtmAalOptions_TransmitSduSize.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_AtmAalOptions_TransmitSduSize.setDescription('Size of the trasmitt Service Data Unit in octets.')
internetProfile_AtmAalOptions_ReceiveSduSize = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 443), Integer32()).setLabel("internetProfile-AtmAalOptions-ReceiveSduSize").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_AtmAalOptions_ReceiveSduSize.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_AtmAalOptions_ReceiveSduSize.setDescription('Size of the receive Service Data Unit in octets.')
internetProfile_ConnUser = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 444), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("default", 1), ("cpcs", 2)))).setLabel("internetProfile-ConnUser").setMaxAccess("readonly")
if mibBuilder.loadTexts: internetProfile_ConnUser.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_ConnUser.setDescription('Connetion User type .')
internetProfile_ModemOnHoldTimeout = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 458), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("mohDisabled", 1), ("n-10SecMohTimeout", 2), ("n-20SecMohTimeout", 3), ("n-30SecMohTimeout", 4), ("n-40SecMohTimeout", 5), ("n-1MinMohTimeout", 6), ("n-2MinMohTimeout", 7), ("n-3MinMohTimeout", 8), ("n-4MinMohTimeout", 9), ("n-6MinMohTimeout", 10), ("n-8MinMohTimeout", 11), ("n-12MinMohTimeout", 12), ("n-16MinMohTimeout", 13), ("noLimitMohTimeout", 14), ("connProfileUseGlobal", 15)))).setLabel("internetProfile-ModemOnHoldTimeout").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_ModemOnHoldTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_ModemOnHoldTimeout.setDescription('The allowable Modem-on-Hold timeout values.')
internetProfile_PriorityOptions_Enabled = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 482), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("internetProfile-PriorityOptions-Enabled").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_PriorityOptions_Enabled.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_PriorityOptions_Enabled.setDescription('Enable priority classification.')
internetProfile_PriorityOptions_PacketClassification = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 477), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("qosTag", 2), ("udpPortRange", 3)))).setLabel("internetProfile-PriorityOptions-PacketClassification").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_PriorityOptions_PacketClassification.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_PriorityOptions_PacketClassification.setDescription('Method used to classify PPP packets.')
internetProfile_PriorityOptions_MaxRtpPacketDelay = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 478), Integer32()).setLabel("internetProfile-PriorityOptions-MaxRtpPacketDelay").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_PriorityOptions_MaxRtpPacketDelay.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_PriorityOptions_MaxRtpPacketDelay.setDescription('Maximum delay for RTP packets in milli-seconds. Used for calculating the fragment size for the non-rtp traffic using the same link.')
internetProfile_PriorityOptions_MinimumRtpPort = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 479), Integer32()).setLabel("internetProfile-PriorityOptions-MinimumRtpPort").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_PriorityOptions_MinimumRtpPort.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_PriorityOptions_MinimumRtpPort.setDescription('Minimum UDP port for prioritization')
internetProfile_PriorityOptions_MaximumRtpPort = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 480), Integer32()).setLabel("internetProfile-PriorityOptions-MaximumRtpPort").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_PriorityOptions_MaximumRtpPort.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_PriorityOptions_MaximumRtpPort.setDescription('Maximum UDP port for prioritization')
internetProfile_PriorityOptions_NoHighPrioPktDuration = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 481), Integer32()).setLabel("internetProfile-PriorityOptions-NoHighPrioPktDuration").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_PriorityOptions_NoHighPrioPktDuration.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_PriorityOptions_NoHighPrioPktDuration.setDescription('The number of seconds of no high priority packets before disabling IP fragmentation of low priority packets. The value 0 disables checking duration of no high priority packet.')
internetProfile_Action_o = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 1, 1, 249), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAction", 1), ("createProfile", 2), ("deleteProfile", 3)))).setLabel("internetProfile-Action-o").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_Action_o.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_Action_o.setDescription('')
mibinternetProfile_IpxOptions_IpxSapHsProxyNetTable = MibTable((1, 3, 6, 1, 4, 1, 529, 23, 1, 2), ).setLabel("mibinternetProfile-IpxOptions-IpxSapHsProxyNetTable")
if mibBuilder.loadTexts: mibinternetProfile_IpxOptions_IpxSapHsProxyNetTable.setStatus('mandatory')
if mibBuilder.loadTexts: mibinternetProfile_IpxOptions_IpxSapHsProxyNetTable.setDescription('A list of mibinternetProfile__ipx_options__ipx_sap_hs_proxy_net profile entries.')
mibinternetProfile_IpxOptions_IpxSapHsProxyNetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 529, 23, 1, 2, 1), ).setLabel("mibinternetProfile-IpxOptions-IpxSapHsProxyNetEntry").setIndexNames((0, "ASCEND-MIBINET-MIB", "internetProfile-IpxOptions-IpxSapHsProxyNet-Station"), (0, "ASCEND-MIBINET-MIB", "internetProfile-IpxOptions-IpxSapHsProxyNet-Index-o"))
if mibBuilder.loadTexts: mibinternetProfile_IpxOptions_IpxSapHsProxyNetEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mibinternetProfile_IpxOptions_IpxSapHsProxyNetEntry.setDescription('A mibinternetProfile__ipx_options__ipx_sap_hs_proxy_net entry containing objects that maps to the parameters of mibinternetProfile__ipx_options__ipx_sap_hs_proxy_net profile.')
internetProfile_IpxOptions_IpxSapHsProxyNet_Station = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 2, 1, 1), DisplayString()).setLabel("internetProfile-IpxOptions-IpxSapHsProxyNet-Station").setMaxAccess("readonly")
if mibBuilder.loadTexts: internetProfile_IpxOptions_IpxSapHsProxyNet_Station.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_IpxOptions_IpxSapHsProxyNet_Station.setDescription('')
internetProfile_IpxOptions_IpxSapHsProxyNet_Index_o = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 2, 1, 2), Integer32()).setLabel("internetProfile-IpxOptions-IpxSapHsProxyNet-Index-o").setMaxAccess("readonly")
if mibBuilder.loadTexts: internetProfile_IpxOptions_IpxSapHsProxyNet_Index_o.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_IpxOptions_IpxSapHsProxyNet_Index_o.setDescription('')
internetProfile_IpxOptions_IpxSapHsProxyNet = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 1, 2, 1, 3), Integer32()).setLabel("internetProfile-IpxOptions-IpxSapHsProxyNet").setMaxAccess("readwrite")
if mibBuilder.loadTexts: internetProfile_IpxOptions_IpxSapHsProxyNet.setStatus('mandatory')
if mibBuilder.loadTexts: internetProfile_IpxOptions_IpxSapHsProxyNet.setDescription('The Network# for IPX SAP Proxy Home Server.')
mibBuilder.exportSymbols("ASCEND-MIBINET-MIB", internetProfile_IpxOptions_NetAlias=internetProfile_IpxOptions_NetAlias, internetProfile_IpxOptions_Rip=internetProfile_IpxOptions_Rip, internetProfile_X25Options_PadAlias2=internetProfile_X25Options_PadAlias2, internetProfile_Clid=internetProfile_Clid, internetProfile_AtmConnectOptions_Atm1483type=internetProfile_AtmConnectOptions_Atm1483type, internetProfile_IpOptions_NetmaskLocal=internetProfile_IpOptions_NetmaskLocal, internetProfile_TelcoOptions_Callback=internetProfile_TelcoOptions_Callback, internetProfile_T3posOptions_T3PosEnqHandling=internetProfile_T3posOptions_T3PosEnqHandling, internetProfile_T3posOptions_X25CugIndex=internetProfile_T3posOptions_X25CugIndex, internetProfile_X25Options_PadAlias3=internetProfile_X25Options_PadAlias3, internetProfile_IpOptions_TosOptions_Dscp=internetProfile_IpOptions_TosOptions_Dscp, internetProfile_T3posOptions_X25Rpoa=internetProfile_T3posOptions_X25Rpoa, internetProfile_Visa2Options_FourthDataForwardCharacter=internetProfile_Visa2Options_FourthDataForwardCharacter, internetProfile_TelcoOptions_AnswerOriginate=internetProfile_TelcoOptions_AnswerOriginate, internetProfile_TelcoOptions_TransitNumber=internetProfile_TelcoOptions_TransitNumber, internetProfile_IpxOptions_IpxSapHsProxy=internetProfile_IpxOptions_IpxSapHsProxy, internetProfile_IpOptions_OspfOptions_AreaType=internetProfile_IpOptions_OspfOptions_AreaType, internetProfile_AtmQosOptions_UsrUpStreamContract=internetProfile_AtmQosOptions_UsrUpStreamContract, internetProfile_IpOptions_VjHeaderPrediction=internetProfile_IpOptions_VjHeaderPrediction, internetProfile_T3posOptions_DataFormat=internetProfile_T3posOptions_DataFormat, internetProfile_AtmConnectOptions_SpvcRetryLimit=internetProfile_AtmConnectOptions_SpvcRetryLimit, internetProfile_AtmOptions_Mtu=internetProfile_AtmOptions_Mtu, internetProfile_AtmConnectOptions_SvcOptions_IncomingCallerAddr_AesaAddress_IdpPortion_Idi=internetProfile_AtmConnectOptions_SvcOptions_IncomingCallerAddr_AesaAddress_IdpPortion_Idi, internetProfile_AtmConnectOptions_OamSupport=internetProfile_AtmConnectOptions_OamSupport, internetProfile_DhcpOptions_PoolNumber=internetProfile_DhcpOptions_PoolNumber, internetProfile_HdlcNrmOptions_Primary=internetProfile_HdlcNrmOptions_Primary, internetProfile_IpOptions_OspfOptions_DownCost=internetProfile_IpOptions_OspfOptions_DownCost, internetProfile_PppOptions_PppInterfaceType=internetProfile_PppOptions_PppInterfaceType, internetProfile_UsrRadOptions_AcctPort=internetProfile_UsrRadOptions_AcctPort, internetProfile_T3posOptions_T3PosT4=internetProfile_T3posOptions_T3PosT4, internetProfile_PriorityOptions_Enabled=internetProfile_PriorityOptions_Enabled, internetProfile_TcpClearOptions_Port2=internetProfile_TcpClearOptions_Port2, internetProfile_PppOptions_PppCircuit=internetProfile_PppOptions_PppCircuit, internetProfile_DhcpOptions_MaximumLeases=internetProfile_DhcpOptions_MaximumLeases, internetProfile_PriorityOptions_MaxRtpPacketDelay=internetProfile_PriorityOptions_MaxRtpPacketDelay, internetProfile_TunnelOptions_Password=internetProfile_TunnelOptions_Password, internetProfile_IpOptions_AddressRealm=internetProfile_IpOptions_AddressRealm, internetProfile_SessionOptions_MaxtapLogServer=internetProfile_SessionOptions_MaxtapLogServer, internetProfile_AtmConnectOptions_OamAisF5=internetProfile_AtmConnectOptions_OamAisF5, internetProfile_X25Options_PosAuth=internetProfile_X25Options_PosAuth, internetProfile_PppOptions_LinkCompression=internetProfile_PppOptions_LinkCompression, internetProfile_BridgingOptions_SpoofingTimeout=internetProfile_BridgingOptions_SpoofingTimeout, internetProfile_AppletalkOptions_AtalkRoutingEnabled=internetProfile_AppletalkOptions_AtalkRoutingEnabled, internetProfile_IpOptions_IpDirect=internetProfile_IpOptions_IpDirect, internetProfile_SharedProf=internetProfile_SharedProf, internetProfile_SessionOptions_Blockduration=internetProfile_SessionOptions_Blockduration, internetProfile_TcpClearOptions_FlushLength=internetProfile_TcpClearOptions_FlushLength, internetProfile_SessionOptions_VtpGateway=internetProfile_SessionOptions_VtpGateway, internetProfile_AtmOptions_AtmServiceType=internetProfile_AtmOptions_AtmServiceType, internetProfile_TunnelOptions_TunnelingProtocol=internetProfile_TunnelOptions_TunnelingProtocol, internetProfile_AtmOptions_SvcOptions_IncomingCallerAddr_AesaAddress_DspPortion_Sel=internetProfile_AtmOptions_SvcOptions_IncomingCallerAddr_AesaAddress_DspPortion_Sel, internetProfile_HdlcNrmOptions_PollRetryCount=internetProfile_HdlcNrmOptions_PollRetryCount, internetProfile_X25Options_X3Profile=internetProfile_X25Options_X3Profile, internetProfile_PriorityOptions_MinimumRtpPort=internetProfile_PriorityOptions_MinimumRtpPort, internetProfile_SessionOptions_CallFilter=internetProfile_SessionOptions_CallFilter, internetProfile_AtmConnectOptions_AtmInverseArp=internetProfile_AtmConnectOptions_AtmInverseArp, internetProfile_IpOptions_Rip=internetProfile_IpOptions_Rip, internetProfile_IpxOptions_IpxSapHsProxyNet_Index_o=internetProfile_IpxOptions_IpxSapHsProxyNet_Index_o, internetProfile_TelcoOptions_Force56kbps=internetProfile_TelcoOptions_Force56kbps, internetProfile_AtmConnectOptions_SvcOptions_IncomingCallerAddr_AesaAddress_DspPortion_Sel=internetProfile_AtmConnectOptions_SvcOptions_IncomingCallerAddr_AesaAddress_DspPortion_Sel, internetProfile_IpOptions_OspfOptions_Active=internetProfile_IpOptions_OspfOptions_Active, internetProfile_IpxOptions_IpxHeaderCompression=internetProfile_IpxOptions_IpxHeaderCompression, internetProfile_AppletalkOptions_AtalkStaticNetStart=internetProfile_AppletalkOptions_AtalkStaticNetStart, internetProfile_Visa2Options_o1CharSequence=internetProfile_Visa2Options_o1CharSequence, internetProfile_PriorityOptions_MaximumRtpPort=internetProfile_PriorityOptions_MaximumRtpPort, internetProfile_IpOptions_Preference=internetProfile_IpOptions_Preference, internetProfile_AtmQosOptions_UsrDnStreamContract=internetProfile_AtmQosOptions_UsrDnStreamContract, internetProfile_TelcoOptions_Ft1Caller=internetProfile_TelcoOptions_Ft1Caller, internetProfile_AtmOptions_Fr08Mode=internetProfile_AtmOptions_Fr08Mode, internetProfile_IpOptions_OspfOptions_PollInterval=internetProfile_IpOptions_OspfOptions_PollInterval, internetProfile_PppOptions_BiDirectionalAuth=internetProfile_PppOptions_BiDirectionalAuth, internetProfile_EuOptions_DceAddr=internetProfile_EuOptions_DceAddr, internetProfile_AtmConnectOptions_SvcOptions_Enabled=internetProfile_AtmConnectOptions_SvcOptions_Enabled, internetProfile_IpOptions_OspfOptions_AseTag=internetProfile_IpOptions_OspfOptions_AseTag, internetProfile_BridgingOptions_BridgingGroup=internetProfile_BridgingOptions_BridgingGroup, internetProfile_TunnelOptions_HomeNetworkName=internetProfile_TunnelOptions_HomeNetworkName, internetProfile_HdlcNrmOptions_AsyncDrop=internetProfile_HdlcNrmOptions_AsyncDrop, internetProfile_SessionOptions_SesAdslCapUpRate=internetProfile_SessionOptions_SesAdslCapUpRate, internetProfile_BridgingOptions_IpxSpoofing=internetProfile_BridgingOptions_IpxSpoofing, internetProfile_AtmConnectOptions_SvcOptions_OutgoingCalledAddr_AesaAddress_DspPortion_HoDsp=internetProfile_AtmConnectOptions_SvcOptions_OutgoingCalledAddr_AesaAddress_DspPortion_HoDsp, internetProfile_PppOptions_CbcpEnabled=internetProfile_PppOptions_CbcpEnabled, internetProfile_X25Options_PadDefaultListen=internetProfile_X25Options_PadDefaultListen, internetProfile_IpOptions_RemoteAddress=internetProfile_IpOptions_RemoteAddress, internetProfile_SessionOptions_RedialDelayLimit=internetProfile_SessionOptions_RedialDelayLimit, internetProfile_AtmOptions_OamSupport=internetProfile_AtmOptions_OamSupport, internetProfile_AtmOptions_SvcOptions_IncomingCallerAddr_AesaAddress_Format=internetProfile_AtmOptions_SvcOptions_IncomingCallerAddr_AesaAddress_Format, internetProfile_BridgingOptions_DialOnBroadcast=internetProfile_BridgingOptions_DialOnBroadcast, internetProfile_IpOptions_PrivateRoute=internetProfile_IpOptions_PrivateRoute, internetProfile_MppOptions_X25chanTargetUtilization=internetProfile_MppOptions_X25chanTargetUtilization, internetProfile_AtmConnectOptions_SvcOptions_IncomingCallerAddr_AesaAddress_Format=internetProfile_AtmConnectOptions_SvcOptions_IncomingCallerAddr_AesaAddress_Format, mibinternetProfile_IpxOptions_IpxSapHsProxyNetEntry=mibinternetProfile_IpxOptions_IpxSapHsProxyNetEntry, internetProfile_BridgingOptions_BridgeType=internetProfile_BridgingOptions_BridgeType, internetProfile_AtmConnectOptions_CastType=internetProfile_AtmConnectOptions_CastType, internetProfile_PriorityOptions_NoHighPrioPktDuration=internetProfile_PriorityOptions_NoHighPrioPktDuration, DisplayString=DisplayString, internetProfile_AtmAalOptions_AalType=internetProfile_AtmAalOptions_AalType, internetProfile_AtmAalOptions_ReceiveSduSize=internetProfile_AtmAalOptions_ReceiveSduSize, internetProfile_AtmConnectOptions_SpvcRetryThreshold=internetProfile_AtmConnectOptions_SpvcRetryThreshold, internetProfile_SessionOptions_IdleTimer=internetProfile_SessionOptions_IdleTimer, internetProfile_T3posOptions_T3PosDteInitMode=internetProfile_T3posOptions_T3PosDteInitMode, internetProfile_AtmConnectOptions_TargetVpi=internetProfile_AtmConnectOptions_TargetVpi, internetProfile_AtmConnectOptions_VcMaxLoopbackCellLoss=internetProfile_AtmConnectOptions_VcMaxLoopbackCellLoss, internetProfile_BirOptions_ProxyArp=internetProfile_BirOptions_ProxyArp, internetProfile_X25Options_PadPrompt=internetProfile_X25Options_PadPrompt, internetProfile_AtmOptions_SpvcRetryLimit=internetProfile_AtmOptions_SpvcRetryLimit, internetProfile_AtmConnectOptions_TargetSelect=internetProfile_AtmConnectOptions_TargetSelect, internetProfile_T3posOptions_T3PosT3=internetProfile_T3posOptions_T3PosT3, internetProfile_X25Options_MaxCalls=internetProfile_X25Options_MaxCalls, internetProfile_Vrouter=internetProfile_Vrouter, internetProfile_UsrRadOptions_AcctKey=internetProfile_UsrRadOptions_AcctKey, internetProfile_AtmOptions_SvcOptions_OutgoingCalledAddr_E164NativeAddress=internetProfile_AtmOptions_SvcOptions_OutgoingCalledAddr_E164NativeAddress, internetProfile_TunnelOptions_Vrouter=internetProfile_TunnelOptions_Vrouter, internetProfile_SessionOptions_TsIdleMode=internetProfile_SessionOptions_TsIdleMode, internetProfile_AtmOptions_SpvcRetryThreshold=internetProfile_AtmOptions_SpvcRetryThreshold, internetProfile_IpOptions_ClientWinsAddrAssign=internetProfile_IpOptions_ClientWinsAddrAssign, internetProfile_TcpClearOptions_DetectEndOfPacket=internetProfile_TcpClearOptions_DetectEndOfPacket, internetProfile_TcpClearOptions_Host3=internetProfile_TcpClearOptions_Host3, internetProfile_X25Options_X121SourceAddress=internetProfile_X25Options_X121SourceAddress, internetProfile_HdlcNrmOptions_PollRate=internetProfile_HdlcNrmOptions_PollRate, internetProfile_AtmOptions_AtmDirectProfile=internetProfile_AtmOptions_AtmDirectProfile, internetProfile_IpOptions_TosFilter=internetProfile_IpOptions_TosFilter, internetProfile_SessionOptions_MaxCallDuration=internetProfile_SessionOptions_MaxCallDuration, internetProfile_IpxOptions_DialQuery=internetProfile_IpxOptions_DialQuery, internetProfile_MppOptions_TargetUtilization=internetProfile_MppOptions_TargetUtilization, internetProfile_T3posOptions_AutoCallX121Address=internetProfile_T3posOptions_AutoCallX121Address, internetProfile_AtmConnectOptions_SvcOptions_IncomingCallerAddr_E164NativeAddress=internetProfile_AtmConnectOptions_SvcOptions_IncomingCallerAddr_E164NativeAddress, internetProfile_X75Options_T1RetranTimer=internetProfile_X75Options_T1RetranTimer, internetProfile_T3posOptions_T3PosPidSelection=internetProfile_T3posOptions_T3PosPidSelection, internetProfile_X32Options_X32ApplMode=internetProfile_X32Options_X32ApplMode, internetProfile_AtmOptions_SvcOptions_IncomingCallerAddr_NumberingPlan=internetProfile_AtmOptions_SvcOptions_IncomingCallerAddr_NumberingPlan, internetProfile_AtmConnectOptions_SpvcRetryInterval=internetProfile_AtmConnectOptions_SpvcRetryInterval, internetProfile_AtmOptions_AtmInverseArp=internetProfile_AtmOptions_AtmInverseArp, internetProfile_X25Options_X25EncapsType=internetProfile_X25Options_X25EncapsType, internetProfile_AtmOptions_SvcOptions_OutgoingCalledAddr_AesaAddress_IdpPortion_Idi=internetProfile_AtmOptions_SvcOptions_OutgoingCalledAddr_AesaAddress_IdpPortion_Idi, internetProfile_PriNumberingPlanId=internetProfile_PriNumberingPlanId, internetProfile_Visa2Options_ThirdDataForwardCharacter=internetProfile_Visa2Options_ThirdDataForwardCharacter, internetProfile_X25Options_CallMode=internetProfile_X25Options_CallMode, internetProfile_X25Options_PadNuiPrompt=internetProfile_X25Options_PadNuiPrompt, internetProfile_X25Options_RemoteX25Address=internetProfile_X25Options_RemoteX25Address, internetProfile_SessionOptions_TsIdleTimer=internetProfile_SessionOptions_TsIdleTimer, internetProfile_MppOptions_AddPersistence=internetProfile_MppOptions_AddPersistence, internetProfile_BridgingOptions_Egress=internetProfile_BridgingOptions_Egress, internetProfile_FrOptions_FrDirectProfile=internetProfile_FrOptions_FrDirectProfile, internetProfile_AtmConnectOptions_VcFaultManagement=internetProfile_AtmConnectOptions_VcFaultManagement, internetProfile_IpOptions_ClientWinsSecondaryAddr=internetProfile_IpOptions_ClientWinsSecondaryAddr, internetProfile_SessionOptions_DataFilter=internetProfile_SessionOptions_DataFilter, internetProfile_EuOptions_DteAddr=internetProfile_EuOptions_DteAddr, internetProfile_UsrRadOptions_AcctIdBase=internetProfile_UsrRadOptions_AcctIdBase, internetProfile_X25Options_X25Profile=internetProfile_X25Options_X25Profile, internetProfile_AltdialNumber1=internetProfile_AltdialNumber1, internetProfile_IpOptions_OspfOptions_NetworkType=internetProfile_IpOptions_OspfOptions_NetworkType, internetProfile_AtmOptions_TargetAtmAddress=internetProfile_AtmOptions_TargetAtmAddress, internetProfile_MppOptions_DynamicAlgorithm=internetProfile_MppOptions_DynamicAlgorithm, internetProfile_EuOptions_Mru=internetProfile_EuOptions_Mru, internetProfile_SessionOptions_FilterRequired=internetProfile_SessionOptions_FilterRequired, internetProfile_PortRedirectOptions_PortNumber=internetProfile_PortRedirectOptions_PortNumber, internetProfile_IpOptions_TosOptions_Active=internetProfile_IpOptions_TosOptions_Active, internetProfile_SessionOptions_SesAdslDmtDownRate=internetProfile_SessionOptions_SesAdslDmtDownRate, internetProfile_AtmConnectOptions_TargetVci=internetProfile_AtmConnectOptions_TargetVci, internetProfile_MppOptions_BandwidthMonitorDirection=internetProfile_MppOptions_BandwidthMonitorDirection, internetProfile_X25Options_X25CugIndex=internetProfile_X25Options_X25CugIndex, internetProfile_AtmConnectOptions_TargetAtmAddress=internetProfile_AtmConnectOptions_TargetAtmAddress, internetProfile_IpOptions_RouteFilter=internetProfile_IpOptions_RouteFilter, internetProfile_TelcoOptions_DelayCallback=internetProfile_TelcoOptions_DelayCallback, internetProfile_AtmConnectOptions_VpSwitching=internetProfile_AtmConnectOptions_VpSwitching, internetProfile_AtmOptions_AtmDirectEnabled=internetProfile_AtmOptions_AtmDirectEnabled, internetProfile_SessionOptions_TrafficShaper=internetProfile_SessionOptions_TrafficShaper, internetProfile_BridgingOptions_Fill2=internetProfile_BridgingOptions_Fill2, internetProfile_X25Options_X25Nui=internetProfile_X25Options_X25Nui, internetProfile_IpOptions_OspfOptions_Cost=internetProfile_IpOptions_OspfOptions_Cost, internetProfile_IpOptions_OspfOptions_KeyId=internetProfile_IpOptions_OspfOptions_KeyId, internetProfile_SessionOptions_SesRateType=internetProfile_SessionOptions_SesRateType, internetProfile_IpxOptions_IpxRoutingEnabled=internetProfile_IpxOptions_IpxRoutingEnabled, internetProfile_FrOptions_Dlci=internetProfile_FrOptions_Dlci, internetProfile_IpOptions_NetmaskRemote=internetProfile_IpOptions_NetmaskRemote, internetProfile_MaxSharedUsers=internetProfile_MaxSharedUsers, internetProfile_CalledNumber=internetProfile_CalledNumber, internetProfile_T3posOptions_MaxCalls=internetProfile_T3posOptions_MaxCalls, internetProfile_TunnelOptions_SecondaryTunnelServer=internetProfile_TunnelOptions_SecondaryTunnelServer, internetProfile_IpOptions_MulticastRateLimit=internetProfile_IpOptions_MulticastRateLimit, internetProfile_T3posOptions_LinkAccessType=internetProfile_T3posOptions_LinkAccessType, internetProfile_oATString=internetProfile_oATString, internetProfile_AraOptions_RecvPassword=internetProfile_AraOptions_RecvPassword, internetProfile_PppOptions_SubstituteSendName=internetProfile_PppOptions_SubstituteSendName, internetProfile_TelcoOptions_CallByCall=internetProfile_TelcoOptions_CallByCall, internetProfile_AtmOptions_ConnKind=internetProfile_AtmOptions_ConnKind, internetProfile_ConnUser=internetProfile_ConnUser, internetProfile_TunnelOptions_TosCopying=internetProfile_TunnelOptions_TosCopying, internetProfile_UsrRadOptions_AcctType=internetProfile_UsrRadOptions_AcctType, internetProfile_MppOptions_AuxSendPassword=internetProfile_MppOptions_AuxSendPassword, internetProfile_X75Options_FrameLength=internetProfile_X75Options_FrameLength, internetProfile_IpOptions_TosOptions_ApplyTo=internetProfile_IpOptions_TosOptions_ApplyTo, internetProfile_AppletalkOptions_AtalkStaticZoneName=internetProfile_AppletalkOptions_AtalkStaticZoneName, internetProfile_AtmConnectOptions_SvcOptions_OutgoingCalledAddr_AesaAddress_Format=internetProfile_AtmConnectOptions_SvcOptions_OutgoingCalledAddr_AesaAddress_Format, internetProfile_IpOptions_RoutingMetric=internetProfile_IpOptions_RoutingMetric, internetProfile_X25Options_VcTimerEnable=internetProfile_X25Options_VcTimerEnable, mibinternetProfileEntry=mibinternetProfileEntry, internetProfile_SessionOptions_SesAdslCapDownRate=internetProfile_SessionOptions_SesAdslCapDownRate, internetProfile_IpxOptions_NetNumber=internetProfile_IpxOptions_NetNumber, internetProfile_CrossConnectIndex=internetProfile_CrossConnectIndex, internetProfile_TelcoOptions_NailedGroups=internetProfile_TelcoOptions_NailedGroups, internetProfile_Visa2Options_o2CharSequence=internetProfile_Visa2Options_o2CharSequence, internetProfile_T3posOptions_Answer=internetProfile_T3posOptions_Answer, internetProfile_X25Options_Windowsize=internetProfile_X25Options_Windowsize, internetProfile_X25Options_X25Rpoa=internetProfile_X25Options_X25Rpoa, internetProfile_AtmAalOptions_TransmitSduSize=internetProfile_AtmAalOptions_TransmitSduSize, internetProfile_AtmOptions_SvcOptions_OutgoingCalledAddr_AesaAddress_IdpPortion_Afi=internetProfile_AtmOptions_SvcOptions_OutgoingCalledAddr_AesaAddress_IdpPortion_Afi, internetProfile_X25Options_InactivityTimer=internetProfile_X25Options_InactivityTimer, internetProfile_SessionOptions_SesSdslRate=internetProfile_SessionOptions_SesSdslRate, internetProfile_MpOptions_CallbackrequestEnable=internetProfile_MpOptions_CallbackrequestEnable, internetProfile_PppOptions_Mru=internetProfile_PppOptions_Mru, internetProfile_AtmConnectOptions_SvcOptions_IncomingCallerAddr_AesaAddress_DspPortion_HoDsp=internetProfile_AtmConnectOptions_SvcOptions_IncomingCallerAddr_AesaAddress_DspPortion_HoDsp, internetProfile_X25Options_PadDiagDisp=internetProfile_X25Options_PadDiagDisp, internetProfile_TcpClearOptions_EndOfPacketPattern=internetProfile_TcpClearOptions_EndOfPacketPattern, internetProfile_TelcoOptions_BillingNumber=internetProfile_TelcoOptions_BillingNumber, internetProfile_IpOptions_AddressPool=internetProfile_IpOptions_AddressPool, internetProfile_AtmOptions_TargetVci=internetProfile_AtmOptions_TargetVci, internetProfile_AtmConnectOptions_NailedGroup=internetProfile_AtmConnectOptions_NailedGroup, internetProfile_IpOptions_ClientDnsAddrAssign=internetProfile_IpOptions_ClientDnsAddrAssign, internetProfile_TcpClearOptions_Port=internetProfile_TcpClearOptions_Port, internetProfile_T3posOptions_T3PosMaxBlockSize=internetProfile_T3posOptions_T3PosMaxBlockSize, internetProfile_UsrRadOptions_AcctHost=internetProfile_UsrRadOptions_AcctHost, internetProfile_AtmOptions_NailedGroup=internetProfile_AtmOptions_NailedGroup, internetProfile_FrOptions_MfrBundleName=internetProfile_FrOptions_MfrBundleName, internetProfile_AppletalkOptions_AtalkStaticNetEnd=internetProfile_AppletalkOptions_AtalkStaticNetEnd, internetProfile_SubAddress=internetProfile_SubAddress, internetProfile_PppOptions_DelayCallbackControl=internetProfile_PppOptions_DelayCallbackControl, internetProfile_AtmConnectOptions_AtmServiceRate=internetProfile_AtmConnectOptions_AtmServiceRate, internetProfile_IpOptions_OspfOptions_Md5AuthKey=internetProfile_IpOptions_OspfOptions_Md5AuthKey, internetProfile_T3posOptions_T3PosAckSuppression=internetProfile_T3posOptions_T3PosAckSuppression, internetProfile_T3posOptions_X25Nui=internetProfile_T3posOptions_X25Nui, internetProfile_TunnelOptions_PrimaryTunnelServer=internetProfile_TunnelOptions_PrimaryTunnelServer, internetProfile_IpOptions_TosOptions_Precedence=internetProfile_IpOptions_TosOptions_Precedence, internetProfile_AltdialNumber3=internetProfile_AltdialNumber3, internetProfile_MpOptions_BodEnable=internetProfile_MpOptions_BodEnable, internetProfile_AtmConnectOptions_AtmDirectProfile=internetProfile_AtmConnectOptions_AtmDirectProfile, internetProfile_TelcoOptions_DialoutAllowed=internetProfile_TelcoOptions_DialoutAllowed, internetProfile_SessionOptions_Backup=internetProfile_SessionOptions_Backup, internetProfile_SdtnPacketsServer=internetProfile_SdtnPacketsServer, internetProfile_IpOptions_MulticastAllowed=internetProfile_IpOptions_MulticastAllowed, internetProfile_IpOptions_ClientWinsPrimaryAddr=internetProfile_IpOptions_ClientWinsPrimaryAddr, internetProfile_AtmConnectOptions_AtmServiceType=internetProfile_AtmConnectOptions_AtmServiceType, internetProfile_IpOptions_LocalAddress=internetProfile_IpOptions_LocalAddress, internetProfile_MpOptions_BacpEnable=internetProfile_MpOptions_BacpEnable, internetProfile_SessionOptions_Blockcountlimit=internetProfile_SessionOptions_Blockcountlimit, internetProfile_TelcoOptions_DataService=internetProfile_TelcoOptions_DataService, internetProfile_AtmConnectOptions_ConnKind=internetProfile_AtmConnectOptions_ConnKind, internetProfile_IpOptions_OspfOptions_AuthKey=internetProfile_IpOptions_OspfOptions_AuthKey, internetProfile_FrOptions_FrDirectEnabled=internetProfile_FrOptions_FrDirectEnabled, internetProfile_PppOptions_LqmMaximumPeriod=internetProfile_PppOptions_LqmMaximumPeriod, internetProfile_AtmConnectOptions_SvcOptions_OutgoingCalledAddr_AesaAddress_DspPortion_Sel=internetProfile_AtmConnectOptions_SvcOptions_OutgoingCalledAddr_AesaAddress_DspPortion_Sel, internetProfile_AtmConnectOptions_SvcOptions_OutgoingCalledAddr_AesaAddress_IdpPortion_Idi=internetProfile_AtmConnectOptions_SvcOptions_OutgoingCalledAddr_AesaAddress_IdpPortion_Idi, internetProfile_PortRedirectOptions_Protocol=internetProfile_PortRedirectOptions_Protocol, internetProfile_SessionOptions_SesAdslDmtUpRate=internetProfile_SessionOptions_SesAdslDmtUpRate)
mibBuilder.exportSymbols("ASCEND-MIBINET-MIB", internetProfile_T3posOptions_T3PosT6=internetProfile_T3posOptions_T3PosT6, internetProfile_PortRedirectOptions_RedirectAddress=internetProfile_PortRedirectOptions_RedirectAddress, internetProfile_X32Options_CallMode=internetProfile_X32Options_CallMode, internetProfile_AtmConnectOptions_Vci=internetProfile_AtmConnectOptions_Vci, internetProfile_IpOptions_ClientDefaultGateway=internetProfile_IpOptions_ClientDefaultGateway, internetProfile_AtmConnectOptions_SvcOptions_OutgoingCalledAddr_NumberingPlan=internetProfile_AtmConnectOptions_SvcOptions_OutgoingCalledAddr_NumberingPlan, internetProfile_AtmOptions_SvcOptions_Enabled=internetProfile_AtmOptions_SvcOptions_Enabled, internetProfile_DialNumber=internetProfile_DialNumber, internetProfile_IpOptions_TosOptions_MarkingType=internetProfile_IpOptions_TosOptions_MarkingType, internetProfile_TcpClearOptions_Host=internetProfile_TcpClearOptions_Host, internetProfile_IpsecOptions_Enabled=internetProfile_IpsecOptions_Enabled, internetProfile_HdlcNrmOptions_PollTimeout=internetProfile_HdlcNrmOptions_PollTimeout, internetProfile_IpOptions_OspfOptions_TransitDelay=internetProfile_IpOptions_OspfOptions_TransitDelay, internetProfile_IpxOptions_SapFilter=internetProfile_IpxOptions_SapFilter, internetProfile_X25Options_ReverseCharge=internetProfile_X25Options_ReverseCharge, internetProfile_EncapsulationProtocol=internetProfile_EncapsulationProtocol, internetProfile_TcpClearOptions_Host2=internetProfile_TcpClearOptions_Host2, internetProfile_T3posOptions_T3PosT2=internetProfile_T3posOptions_T3PosT2, internetProfile_MpOptions_BaseChannelCount=internetProfile_MpOptions_BaseChannelCount, internetProfile_PriorityOptions_PacketClassification=internetProfile_PriorityOptions_PacketClassification, internetProfile_AtmOptions_SvcOptions_OutgoingCalledAddr_AesaAddress_Format=internetProfile_AtmOptions_SvcOptions_OutgoingCalledAddr_AesaAddress_Format, internetProfile_IpOptions_OspfOptions_DeadInterval=internetProfile_IpOptions_OspfOptions_DeadInterval, internetProfile_IpOptions_DownPreference=internetProfile_IpOptions_DownPreference, internetProfile_AtmOptions_Vpi=internetProfile_AtmOptions_Vpi, internetProfile_X25Options_PadBanner=internetProfile_X25Options_PadBanner, internetProfile_HdlcNrmOptions_StationPollAddress=internetProfile_HdlcNrmOptions_StationPollAddress, internetProfile_T3posOptions_T3PosT5=internetProfile_T3posOptions_T3PosT5, internetProfile_UsrRadOptions_AcctTimeout=internetProfile_UsrRadOptions_AcctTimeout, internetProfile_TunnelOptions_UdpPort=internetProfile_TunnelOptions_UdpPort, internetProfile_MppOptions_SubPersistence=internetProfile_MppOptions_SubPersistence, internetProfile_PppOptions_LqmMinimumPeriod=internetProfile_PppOptions_LqmMinimumPeriod, internetProfile_IpxOptions_IpxSapHsProxyNet=internetProfile_IpxOptions_IpxSapHsProxyNet, internetProfile_SessionOptions_CirTimer=internetProfile_SessionOptions_CirTimer, internetProfile_AtmConnectOptions_Vpi=internetProfile_AtmConnectOptions_Vpi, internetProfile_Visa2Options_FirstDataForwardCharacter=internetProfile_Visa2Options_FirstDataForwardCharacter, internetProfile_TcpClearOptions_FlushTime=internetProfile_TcpClearOptions_FlushTime, internetProfile_FrOptions_CircuitType=internetProfile_FrOptions_CircuitType, internetProfile_IpOptions_OspfOptions_Area=internetProfile_IpOptions_OspfOptions_Area, internetProfile_IpOptions_IpRoutingEnabled=internetProfile_IpOptions_IpRoutingEnabled, internetProfile_AtmOptions_AtmCircuitProfile=internetProfile_AtmOptions_AtmCircuitProfile, internetProfile_PppOptions_RecvPassword=internetProfile_PppOptions_RecvPassword, internetProfile_IpOptions_ClientDnsPrimaryAddr=internetProfile_IpOptions_ClientDnsPrimaryAddr, internetProfile_Visa2Options_SecondDataForwardCharacter=internetProfile_Visa2Options_SecondDataForwardCharacter, internetProfile_AtmConnectOptions_SvcOptions_IncomingCallerAddr_NumberingPlan=internetProfile_AtmConnectOptions_SvcOptions_IncomingCallerAddr_NumberingPlan, internetProfile_IpxOptions_PeerMode=internetProfile_IpxOptions_PeerMode, internetProfile_Active=internetProfile_Active, internetProfile_T3posOptions_T3PosMethodOfHostNotif=internetProfile_T3posOptions_T3PosMethodOfHostNotif, internetProfile_IpOptions_NatProfileName=internetProfile_IpOptions_NatProfileName, internetProfile_FrOptions_FrDirectDlci=internetProfile_FrOptions_FrDirectDlci, internetProfile_X32Options_X32Profile=internetProfile_X32Options_X32Profile, internetProfile_PppOptions_Lqm=internetProfile_PppOptions_Lqm, internetProfile_T3posOptions_X25Profile=internetProfile_T3posOptions_X25Profile, internetProfile_FrOptions_FrameRelayProfile=internetProfile_FrOptions_FrameRelayProfile, internetProfile_SessionOptions_FilterPersistence=internetProfile_SessionOptions_FilterPersistence, internetProfile_PppOptions_SendPassword=internetProfile_PppOptions_SendPassword, internetProfile_AtmConnectOptions_SvcOptions_OutgoingCalledAddr_AesaAddress_IdpPortion_Afi=internetProfile_AtmConnectOptions_SvcOptions_OutgoingCalledAddr_AesaAddress_IdpPortion_Afi, internetProfile_PppOptions_TrunkGroupCallbackControl=internetProfile_PppOptions_TrunkGroupCallbackControl, internetProfile_T3posOptions_T3PosHostInitMode=internetProfile_T3posOptions_T3PosHostInitMode, mibinternetProfile_IpxOptions_IpxSapHsProxyNetTable=mibinternetProfile_IpxOptions_IpxSapHsProxyNetTable, internetProfile_AtmQosOptions_SubtendingHops=internetProfile_AtmQosOptions_SubtendingHops, internetProfile_AtmOptions_Vci=internetProfile_AtmOptions_Vci, internetProfile_IpxOptions_IpxSpoofing=internetProfile_IpxOptions_IpxSpoofing, internetProfile_HdlcNrmOptions_SnrmRetryCounter=internetProfile_HdlcNrmOptions_SnrmRetryCounter, internetProfile_PppOptions_SplitCodeDotUserEnabled=internetProfile_PppOptions_SplitCodeDotUserEnabled, internetProfile_AtmOptions_SvcOptions_OutgoingCalledAddr_AesaAddress_DspPortion_Sel=internetProfile_AtmOptions_SvcOptions_OutgoingCalledAddr_AesaAddress_DspPortion_Sel, internetProfile_SessionOptions_MaxtapDataServer=internetProfile_SessionOptions_MaxtapDataServer, internetProfile_AraOptions_MaximumConnectTime=internetProfile_AraOptions_MaximumConnectTime, internetProfile_DhcpOptions_ReplyEnabled=internetProfile_DhcpOptions_ReplyEnabled, internetProfile_Action_o=internetProfile_Action_o, internetProfile_SessionOptions_Priority=internetProfile_SessionOptions_Priority, internetProfile_SessionOptions_MaxVtpTunnels=internetProfile_SessionOptions_MaxVtpTunnels, internetProfile_AtmOptions_SvcOptions_OutgoingCalledAddr_AesaAddress_DspPortion_Esi=internetProfile_AtmOptions_SvcOptions_OutgoingCalledAddr_AesaAddress_DspPortion_Esi, internetProfile_FrOptions_CircuitName=internetProfile_FrOptions_CircuitName, internetProfile_IpOptions_OspfOptions_AuthenType=internetProfile_IpOptions_OspfOptions_AuthenType, internetProfile_BirOptions_Enable=internetProfile_BirOptions_Enable, internetProfile_AppletalkOptions_AtalkPeerMode=internetProfile_AppletalkOptions_AtalkPeerMode, internetProfile_AtmOptions_Atm1483type=internetProfile_AtmOptions_Atm1483type, internetProfile_IpxOptions_Sap=internetProfile_IpxOptions_Sap, internetProfile_AtmOptions_SvcOptions_IncomingCallerAddr_E164NativeAddress=internetProfile_AtmOptions_SvcOptions_IncomingCallerAddr_E164NativeAddress, internetProfile_IpsecOptions_SecurityPolicyDatabase=internetProfile_IpsecOptions_SecurityPolicyDatabase, internetProfile_TunnelOptions_ServerAuthId=internetProfile_TunnelOptions_ServerAuthId, internetProfile_TcpClearOptions_Host4=internetProfile_TcpClearOptions_Host4, internetProfile_IpOptions_OspfOptions_AseType=internetProfile_IpOptions_OspfOptions_AseType, internetProfile_TunnelOptions_ProfileType=internetProfile_TunnelOptions_ProfileType, internetProfile_IpOptions_MulticastGroupLeaveDelay=internetProfile_IpOptions_MulticastGroupLeaveDelay, internetProfile_AltdialNumber2=internetProfile_AltdialNumber2, internetProfile_FramedOnly=internetProfile_FramedOnly, internetProfile_TcpClearOptions_Port3=internetProfile_TcpClearOptions_Port3, internetProfile_AtmOptions_CastType=internetProfile_AtmOptions_CastType, internetProfile_TunnelOptions_AssignmentId=internetProfile_TunnelOptions_AssignmentId, internetProfile_IpxOptions_IpxSapHsProxyNet_Station=internetProfile_IpxOptions_IpxSapHsProxyNet_Station, internetProfile_PppoeOptions_Pppoe=internetProfile_PppoeOptions_Pppoe, internetProfile_AtmOptions_AtmServiceRate=internetProfile_AtmOptions_AtmServiceRate, internetProfile_IpOptions_OspfOptions_HelloInterval=internetProfile_IpOptions_OspfOptions_HelloInterval, internetProfile_CalledNumberType=internetProfile_CalledNumberType, internetProfile_PppOptions_SubstituteRecvName=internetProfile_PppOptions_SubstituteRecvName, internetProfile_AtmOptions_VpSwitching=internetProfile_AtmOptions_VpSwitching, internetProfile_HdlcNrmOptions_SnrmResponseTimeout=internetProfile_HdlcNrmOptions_SnrmResponseTimeout, internetProfile_X75Options_N2Retransmissions=internetProfile_X75Options_N2Retransmissions, internetProfile_X25Options_PadNuiPwPrompt=internetProfile_X25Options_PadNuiPwPrompt, internetProfile_SessionOptions_RxDataRateLimit=internetProfile_SessionOptions_RxDataRateLimit, internetProfile_T3posOptions_T3PosT1=internetProfile_T3posOptions_T3PosT1, internetProfile_T3posOptions_ReverseCharge=internetProfile_T3posOptions_ReverseCharge, internetProfile_AtmOptions_VcMaxLoopbackCellLoss=internetProfile_AtmOptions_VcMaxLoopbackCellLoss, internetProfile_TelcoOptions_CallType=internetProfile_TelcoOptions_CallType, internetProfile_Visa2Options_IdleCharacterDelay=internetProfile_Visa2Options_IdleCharacterDelay, internetProfile_IpxOptions_SpoofingTimeout=internetProfile_IpxOptions_SpoofingTimeout, internetProfile_PppOptions_Mtu=internetProfile_PppOptions_Mtu, internetProfile_IpOptions_PrivateRouteProfileRequired=internetProfile_IpOptions_PrivateRouteProfileRequired, internetProfile_PppOptions_ModeCallbackControl=internetProfile_PppOptions_ModeCallbackControl, internetProfile_AutoProfiles=internetProfile_AutoProfiles, internetProfile_TcpClearOptions_Port4=internetProfile_TcpClearOptions_Port4, internetProfile_TunnelOptions_AtmpHaRip=internetProfile_TunnelOptions_AtmpHaRip, internetProfile_AtmConnectOptions_SvcOptions_IncomingCallerAddr_AesaAddress_DspPortion_Esi=internetProfile_AtmConnectOptions_SvcOptions_IncomingCallerAddr_AesaAddress_DspPortion_Esi, internetProfile_X75Options_KFramesOutstanding=internetProfile_X75Options_KFramesOutstanding, internetProfile_MppOptions_DecrementChannelCount=internetProfile_MppOptions_DecrementChannelCount, mibinternetProfileTable=mibinternetProfileTable, internetProfile_TunnelOptions_ClientAuthId=internetProfile_TunnelOptions_ClientAuthId, internetProfile_AtmConnectOptions_SvcOptions_IncomingCallerAddr_AesaAddress_IdpPortion_Afi=internetProfile_AtmConnectOptions_SvcOptions_IncomingCallerAddr_AesaAddress_IdpPortion_Afi, internetProfile_X25Options_Lcn=internetProfile_X25Options_Lcn, internetProfile_IpOptions_SourceIpCheck=internetProfile_IpOptions_SourceIpCheck, internetProfile_AtmOptions_TargetVpi=internetProfile_AtmOptions_TargetVpi, internetProfile_AtmConnectOptions_Fr08Mode=internetProfile_AtmConnectOptions_Fr08Mode, internetProfile_IpOptions_OspfOptions_NonMulticast=internetProfile_IpOptions_OspfOptions_NonMulticast, internetProfile_FrOptions_FrLinkType=internetProfile_FrOptions_FrLinkType, internetProfile_SessionOptions_TxDataRateLimit=internetProfile_SessionOptions_TxDataRateLimit, internetProfile_X25Options_PadDefaultPw=internetProfile_X25Options_PadDefaultPw, internetProfile_AtmConnectOptions_Mtu=internetProfile_AtmConnectOptions_Mtu, internetProfile_SessionOptions_Secondary=internetProfile_SessionOptions_Secondary, internetProfile_PppOptions_SendAuthMode=internetProfile_PppOptions_SendAuthMode, internetProfile_Station=internetProfile_Station, internetProfile_MpOptions_MaximumChannels=internetProfile_MpOptions_MaximumChannels, internetProfile_AtmAalOptions_AalEnabled=internetProfile_AtmAalOptions_AalEnabled, internetProfile_AtmOptions_SvcOptions_OutgoingCalledAddr_NumberingPlan=internetProfile_AtmOptions_SvcOptions_OutgoingCalledAddr_NumberingPlan, internetProfile_AtmOptions_OamAisF5=internetProfile_AtmOptions_OamAisF5, internetProfile_MppOptions_SecondsHistory=internetProfile_MppOptions_SecondsHistory, internetProfile_IpOptions_ClientDnsSecondaryAddr=internetProfile_IpOptions_ClientDnsSecondaryAddr, internetProfile_X25Options_Packetsize=internetProfile_X25Options_Packetsize, internetProfile_AtmOptions_SvcOptions_IncomingCallerAddr_AesaAddress_IdpPortion_Afi=internetProfile_AtmOptions_SvcOptions_IncomingCallerAddr_AesaAddress_IdpPortion_Afi, internetProfile_IpOptions_OspfOptions_RetransmitInterval=internetProfile_IpOptions_OspfOptions_RetransmitInterval, internetProfile_AtmConnectOptions_AtmCircuitProfile=internetProfile_AtmConnectOptions_AtmCircuitProfile, internetProfile_TelcoOptions_ExpectCallback=internetProfile_TelcoOptions_ExpectCallback, internetProfile_AtmOptions_TargetSelect=internetProfile_AtmOptions_TargetSelect, internetProfile_TelcoOptions_NasPortType=internetProfile_TelcoOptions_NasPortType, internetProfile_MpOptions_MinimumChannels=internetProfile_MpOptions_MinimumChannels, internetProfile_X25Options_PadAlias1=internetProfile_X25Options_PadAlias1, internetProfile_PppOptions_PppCircuitName=internetProfile_PppOptions_PppCircuitName, internetProfile_IpOptions_OspfOptions_Priority=internetProfile_IpOptions_OspfOptions_Priority, internetProfile_PppoeOptions_BridgeNonPppoe=internetProfile_PppoeOptions_BridgeNonPppoe, internetProfile_SessionOptions_SesRateMode=internetProfile_SessionOptions_SesRateMode, internetProfile_AtmOptions_SvcOptions_IncomingCallerAddr_AesaAddress_DspPortion_Esi=internetProfile_AtmOptions_SvcOptions_IncomingCallerAddr_AesaAddress_DspPortion_Esi, internetProfile_AtmOptions_SpvcRetryInterval=internetProfile_AtmOptions_SpvcRetryInterval, internetProfile_AtmOptions_SvcOptions_IncomingCallerAddr_AesaAddress_IdpPortion_Idi=internetProfile_AtmOptions_SvcOptions_IncomingCallerAddr_AesaAddress_IdpPortion_Idi, internetProfile_IpOptions_TosOptions_TypeOfService=internetProfile_IpOptions_TosOptions_TypeOfService, internetProfile_TunnelOptions_MaxTunnels=internetProfile_TunnelOptions_MaxTunnels, internetProfile_AtmConnectOptions_SvcOptions_OutgoingCalledAddr_AesaAddress_DspPortion_Esi=internetProfile_AtmConnectOptions_SvcOptions_OutgoingCalledAddr_AesaAddress_DspPortion_Esi, internetProfile_X25Options_AnswerX25Address=internetProfile_X25Options_AnswerX25Address, internetProfile_ModemOnHoldTimeout=internetProfile_ModemOnHoldTimeout, mibinternetProfile=mibinternetProfile, internetProfile_AtmOptions_VcFaultManagement=internetProfile_AtmOptions_VcFaultManagement, internetProfile_AtmConnectOptions_SvcOptions_OutgoingCalledAddr_E164NativeAddress=internetProfile_AtmConnectOptions_SvcOptions_OutgoingCalledAddr_E164NativeAddress, internetProfile_AtmOptions_SvcOptions_IncomingCallerAddr_AesaAddress_DspPortion_HoDsp=internetProfile_AtmOptions_SvcOptions_IncomingCallerAddr_AesaAddress_DspPortion_HoDsp, internetProfile_IpOptions_PrivateRouteTable=internetProfile_IpOptions_PrivateRouteTable, internetProfile_AtmOptions_SvcOptions_OutgoingCalledAddr_AesaAddress_DspPortion_HoDsp=internetProfile_AtmOptions_SvcOptions_OutgoingCalledAddr_AesaAddress_DspPortion_HoDsp, internetProfile_MppOptions_IncrementChannelCount=internetProfile_MppOptions_IncrementChannelCount, internetProfile_AtmConnectOptions_AtmDirectEnabled=internetProfile_AtmConnectOptions_AtmDirectEnabled)
