#
# PySNMP MIB module Wellfleet-ASR-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Wellfleet-ASR-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:39:24 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, iso, Unsigned32, NotificationType, ObjectIdentity, Gauge32, Counter32, Integer32, TimeTicks, MibIdentifier, ModuleIdentity, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "iso", "Unsigned32", "NotificationType", "ObjectIdentity", "Gauge32", "Counter32", "Integer32", "TimeTicks", "MibIdentifier", "ModuleIdentity", "IpAddress")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
wfAsrGroup, = mibBuilder.importSymbols("Wellfleet-COMMON-MIB", "wfAsrGroup")
wfAsrBase = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 1))
wfAsrBaseCreate = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAsrBaseCreate.setStatus('mandatory')
if mibBuilder.loadTexts: wfAsrBaseCreate.setDescription('Create/Delete parameter. Default is created. Users perform a set operation on this object in order to create/delete ASR.')
wfAsrBaseEnable = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAsrBaseEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wfAsrBaseEnable.setDescription('Enable/Disable parameter. Default is enabled. Users perform a set operation on this object in order to enable/disable ASR.')
wfAsrBaseState = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("init", 3), ("notpres", 4))).clone('notpres')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAsrBaseState.setStatus('mandatory')
if mibBuilder.loadTexts: wfAsrBaseState.setDescription('The current state of the entire ASR.')
wfAsrNextHopRetryLimit = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAsrNextHopRetryLimit.setStatus('mandatory')
if mibBuilder.loadTexts: wfAsrNextHopRetryLimit.setDescription('Set the number of next hop entries to try to establish the SVC should the first next hop entry fail.')
wfAsrSecureInFilter = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAsrSecureInFilter.setStatus('mandatory')
if mibBuilder.loadTexts: wfAsrSecureInFilter.setDescription('Enable or disable inbound packet filtering. This object will be implemented as part of the follow on project.')
wfAsrSecureInValid = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAsrSecureInValid.setStatus('mandatory')
if mibBuilder.loadTexts: wfAsrSecureInValid.setDescription('Enable or disable inbound call validation. This object will be implemented as part of a follow on project.')
wfAsrHoldDownTimer = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 1, 7), Integer32().clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAsrHoldDownTimer.setStatus('mandatory')
if mibBuilder.loadTexts: wfAsrHoldDownTimer.setDescription('The hold down timer is used to prevent retries to a destination that the SVC setup process has failed on. This value would be used if filter/flow spec information is not returned from NHS.')
wfAsrActiveSvcs = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAsrActiveSvcs.setStatus('mandatory')
if mibBuilder.loadTexts: wfAsrActiveSvcs.setDescription('A count of the SVCs currently active on this router slot.')
wfAsrFwdTblEntries = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAsrFwdTblEntries.setStatus('mandatory')
if mibBuilder.loadTexts: wfAsrFwdTblEntries.setDescription('A count of entries in the ASR forward table.')
wfAsrFwdTblSeq = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAsrFwdTblSeq.setStatus('mandatory')
if mibBuilder.loadTexts: wfAsrFwdTblSeq.setDescription('Sequence number used to determine changes to the ASR forward table.')
wfAsrDnsProxyPort = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 500, 32550))).clone(namedValues=NamedValues(("min", 1), ("default", 500), ("max", 32550))).clone('default')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAsrDnsProxyPort.setStatus('mandatory')
if mibBuilder.loadTexts: wfAsrDnsProxyPort.setDescription('DNS proxy port for QOS translation queries')
wfAsrMaxSessions = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(500))).clone(namedValues=NamedValues(("default", 500))).clone('default')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAsrMaxSessions.setStatus('mandatory')
if mibBuilder.loadTexts: wfAsrMaxSessions.setDescription('Maximum number of TCP/IP sessions which are to be managed by ASR.')
wfAsrDebugLevel = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAsrDebugLevel.setStatus('mandatory')
if mibBuilder.loadTexts: wfAsrDebugLevel.setDescription('Debug level in which to enable log messages. The greater the value, the more detailed the log messages.')
wfAsrUseDynRdiscPref = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAsrUseDynRdiscPref.setStatus('mandatory')
if mibBuilder.loadTexts: wfAsrUseDynRdiscPref.setDescription('Enable/Disable parameter for ASR to update the Dynamic Router Discovery Preference value. If enabled, wfRdiscInterfacePref must be 0 in order to advertise the ASR Dynamic Preference.')
wfAsrX213PriTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 2), )
if mibBuilder.loadTexts: wfAsrX213PriTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfAsrX213PriTable.setDescription('A table used by ASR to convert the X.213 priority value returned by NHS to a switch specific Value.')
wfAsrX213PriEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 2, 1), ).setIndexNames((0, "Wellfleet-ASR-MIB", "wfAsrX213PriLowVal"), (0, "Wellfleet-ASR-MIB", "wfAsrX213PriHiVal"))
if mibBuilder.loadTexts: wfAsrX213PriEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfAsrX213PriEntry.setDescription('X.213 conversion table.')
wfAsrX213PriDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAsrX213PriDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfAsrX213PriDelete.setDescription('Create/delete indicator for X.213 priority table entry.')
wfAsrX213PriLowVal = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAsrX213PriLowVal.setStatus('mandatory')
if mibBuilder.loadTexts: wfAsrX213PriLowVal.setDescription('Low value of X.213 priority range.')
wfAsrX213PriHiVal = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAsrX213PriHiVal.setStatus('mandatory')
if mibBuilder.loadTexts: wfAsrX213PriHiVal.setDescription('High value of X.213 priority range.')
wfAsrX213PriSwVal = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAsrX213PriSwVal.setStatus('mandatory')
if mibBuilder.loadTexts: wfAsrX213PriSwVal.setDescription('Switch specific X.213 priority value.')
wfAsrRtrPriTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 3), )
if mibBuilder.loadTexts: wfAsrRtrPriTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfAsrRtrPriTable.setDescription('A table used by ASR to convert the router priority value returned by NHS to a router priority queue.')
wfAsrRtrPriEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 3, 1), ).setIndexNames((0, "Wellfleet-ASR-MIB", "wfAsrRtrPriLowVal"), (0, "Wellfleet-ASR-MIB", "wfAsrRtrPriHiVal"))
if mibBuilder.loadTexts: wfAsrRtrPriEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfAsrRtrPriEntry.setDescription('Router priority conversion table.')
wfAsrRtrPriDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAsrRtrPriDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfAsrRtrPriDelete.setDescription('Create/delete indicator for Router priority table entry.')
wfAsrRtrPriLowVal = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAsrRtrPriLowVal.setStatus('mandatory')
if mibBuilder.loadTexts: wfAsrRtrPriLowVal.setDescription('Low value of router priority range.')
wfAsrRtrPriHiVal = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAsrRtrPriHiVal.setStatus('mandatory')
if mibBuilder.loadTexts: wfAsrRtrPriHiVal.setDescription('High value of router priority range.')
wfAsrRtrPriCvtVal = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 3, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAsrRtrPriCvtVal.setStatus('mandatory')
if mibBuilder.loadTexts: wfAsrRtrPriCvtVal.setDescription('Router priority Queue value.')
wfAsrMultiHopTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 4), )
if mibBuilder.loadTexts: wfAsrMultiHopTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfAsrMultiHopTable.setDescription('A table used by ASR to identify those PVCs that can be used as a multi hop path or overlay network.')
wfAsrMultiHopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 4, 1), ).setIndexNames((0, "Wellfleet-ASR-MIB", "wfAsrMhCircuitNumber"), (0, "Wellfleet-ASR-MIB", "wfAsrMhVcid1"), (0, "Wellfleet-ASR-MIB", "wfAsrMhVcid2"))
if mibBuilder.loadTexts: wfAsrMultiHopEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfAsrMultiHopEntry.setDescription('Multi Hop PVC identification.')
wfAsrMultiHopDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAsrMultiHopDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfAsrMultiHopDelete.setDescription('Create/delete indicator for multi hop table entry.')
wfAsrMhCircuitNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAsrMhCircuitNumber.setStatus('mandatory')
if mibBuilder.loadTexts: wfAsrMhCircuitNumber.setDescription('Instance identifier. The circuit number of this interface.')
wfAsrMhVcid1 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAsrMhVcid1.setStatus('mandatory')
if mibBuilder.loadTexts: wfAsrMhVcid1.setDescription('VCID 1 value. The Dlci number for Frame Relay, the VPI for ATM.')
wfAsrMhVcid2 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAsrMhVcid2.setStatus('mandatory')
if mibBuilder.loadTexts: wfAsrMhVcid2.setDescription('VCID 2 value. The VCI for ATM, NULL for Frame Relay.')
wfAsrDirectExceptTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 5), )
if mibBuilder.loadTexts: wfAsrDirectExceptTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfAsrDirectExceptTable.setDescription('The directional exception asymmetric route avoidance table. This tables index is made up of the protocol and service field.')
wfAsrDirectExceptEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 5, 1), ).setIndexNames((0, "Wellfleet-ASR-MIB", "wfAsrServiceProtocol"), (0, "Wellfleet-ASR-MIB", "wfAsrServicePort"))
if mibBuilder.loadTexts: wfAsrDirectExceptEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfAsrDirectExceptEntry.setDescription('The ASR directional exception table.')
wfAsrServiceProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(6, 17))).clone(namedValues=NamedValues(("tcp", 6), ("udp", 17)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAsrServiceProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: wfAsrServiceProtocol.setDescription('Service protocol indicates what protocol this entry is for. Coices are UDP or TCP.')
wfAsrServicePort = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 5, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAsrServicePort.setStatus('mandatory')
if mibBuilder.loadTexts: wfAsrServicePort.setDescription('Application port number of service connecting to.')
wfAsrSrcPortLow = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 5, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAsrSrcPortLow.setStatus('mandatory')
if mibBuilder.loadTexts: wfAsrSrcPortLow.setDescription('Low port number of application serving as source used at host site.')
wfAsrSrcPortHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 5, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAsrSrcPortHigh.setStatus('mandatory')
if mibBuilder.loadTexts: wfAsrSrcPortHigh.setDescription('High port number of application serving as source used at host site.')
wfAsrDestPortLow = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 5, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAsrDestPortLow.setStatus('mandatory')
if mibBuilder.loadTexts: wfAsrDestPortLow.setDescription('Low port number of application serving as destination used at client site.')
wfAsrDestPortHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 5, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAsrDestPortHigh.setStatus('mandatory')
if mibBuilder.loadTexts: wfAsrDestPortHigh.setDescription('High port number of application serving as destination used at client site.')
wfAsrCircuitTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 6), )
if mibBuilder.loadTexts: wfAsrCircuitTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfAsrCircuitTable.setDescription('A table which contains configuration information for each circuit defined to ASR but not specific to a specific circuit. The table is indexed by circuit number.')
wfAsrCircuitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 6, 1), ).setIndexNames((0, "Wellfleet-ASR-MIB", "wfAsrCircuitNumber"))
if mibBuilder.loadTexts: wfAsrCircuitEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfAsrCircuitEntry.setDescription('An ASR circuit description')
wfAsrCircuitCreate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("create", 1), ("delete", 2))).clone('create')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAsrCircuitCreate.setStatus('mandatory')
if mibBuilder.loadTexts: wfAsrCircuitCreate.setDescription('Create/Delete parameter. Default is created. Users perform a set operation on this object in order to create/delete an ASR circuit.')
wfAsrCircuitEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAsrCircuitEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wfAsrCircuitEnable.setDescription('Enable/Disable parameter. Default is enabled. Users perform a set operation on this object in order to enable/disable an ASR circuit.')
wfAsrCircuitState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("init", 3), ("invalid", 4), ("notpres", 5))).clone('notpres')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAsrCircuitState.setStatus('mandatory')
if mibBuilder.loadTexts: wfAsrCircuitState.setDescription('Invalid indicates an error in processing the cfg record')
wfAsrCircuitNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAsrCircuitNumber.setStatus('mandatory')
if mibBuilder.loadTexts: wfAsrCircuitNumber.setDescription('Instance identifier. The circuit number of this interface.')
wfAsrCircuitCallCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("inboundonly", 1), ("outboundonly", 2), ("inboundandoutbound", 3), ("none", 4))).clone('outboundonly')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAsrCircuitCallCtrl.setStatus('mandatory')
if mibBuilder.loadTexts: wfAsrCircuitCallCtrl.setDescription('Define call policy for this SVC circuit. 1) allow inbound calls only 2) allow outbound calls only 3)allow inbound and outbound calls 4) allow neither inbound or outbound calls.')
wfAsrCircuitInReceives = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 6, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAsrCircuitInReceives.setStatus('mandatory')
if mibBuilder.loadTexts: wfAsrCircuitInReceives.setDescription('The total number of input datagrams received at the circuit, including those received in error.')
wfAsrCircuitInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 6, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAsrCircuitInDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: wfAsrCircuitInDiscards.setDescription('The total number of input datagrams discarded due to failed setup attempts, unreachable destinations, etc.')
wfAsrCircuitSetupRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 6, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAsrCircuitSetupRequests.setStatus('mandatory')
if mibBuilder.loadTexts: wfAsrCircuitSetupRequests.setDescription('The total number of SVC setup requests attempted on the circuit , including those which failed.')
wfAsrCircuitSetupSucc = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 6, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAsrCircuitSetupSucc.setStatus('mandatory')
if mibBuilder.loadTexts: wfAsrCircuitSetupSucc.setDescription('The total number of SVC setup requests attempted on the circuit which resulted in an SVC being established.')
wfAsrCircuitSetupFail = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 6, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAsrCircuitSetupFail.setStatus('mandatory')
if mibBuilder.loadTexts: wfAsrCircuitSetupFail.setDescription('The total number of SVC setup requests attempted on the circuit which resulted in an SVC not being established.')
wfAsrCircuitSVCsEstablished = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 6, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAsrCircuitSVCsEstablished.setStatus('mandatory')
if mibBuilder.loadTexts: wfAsrCircuitSVCsEstablished.setDescription('The total number of SVCs currently established on the circuit.')
wfAsrNegativeNHR = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 6, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAsrNegativeNHR.setStatus('mandatory')
if mibBuilder.loadTexts: wfAsrNegativeNHR.setDescription('Count of negative NHR responses received from NHRP.')
wfAsrSvcOutboundReqFail = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 6, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAsrSvcOutboundReqFail.setStatus('mandatory')
if mibBuilder.loadTexts: wfAsrSvcOutboundReqFail.setDescription('Count of outbound requests for SVCs that failed.')
wfAsrSvcInboundFilterFail = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 6, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAsrSvcInboundFilterFail.setStatus('mandatory')
if mibBuilder.loadTexts: wfAsrSvcInboundFilterFail.setDescription('Count of inbound packets failing inbound packet filtering.')
wfAsrSvcInboundCallValFail = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 6, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAsrSvcInboundCallValFail.setStatus('mandatory')
if mibBuilder.loadTexts: wfAsrSvcInboundCallValFail.setDescription('Count of inbound SVC call validation failures.')
wfAsrFiltTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 7), )
if mibBuilder.loadTexts: wfAsrFiltTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfAsrFiltTable.setDescription('A table containing setup information related to an SVC. The table is indexed by slot,dest ip addr and mask, source ip addr and mask, source and dest port ranges and protocol.')
wfAsrFiltEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 7, 1), ).setIndexNames((0, "Wellfleet-ASR-MIB", "wfAsrFilterSlot"), (0, "Wellfleet-ASR-MIB", "wfAsrDestIpAddr"), (0, "Wellfleet-ASR-MIB", "wfAsrDestIpMask"), (0, "Wellfleet-ASR-MIB", "wfAsrSourceIpAddr"), (0, "Wellfleet-ASR-MIB", "wfAsrSourceIpMask"), (0, "Wellfleet-ASR-MIB", "wfAsrDestPortRangeLow"), (0, "Wellfleet-ASR-MIB", "wfAsrDestPortRangeHigh"), (0, "Wellfleet-ASR-MIB", "wfAsrSourcePortRangeLow"), (0, "Wellfleet-ASR-MIB", "wfAsrSourcePortRangeHigh"), (0, "Wellfleet-ASR-MIB", "wfAsrIPProtocol"))
if mibBuilder.loadTexts: wfAsrFiltEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfAsrFiltEntry.setDescription('ASR SVC setup information.')
wfAsrFilterCreate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAsrFilterCreate.setStatus('mandatory')
if mibBuilder.loadTexts: wfAsrFilterCreate.setDescription('Create/delete this filter entry.')
wfAsrFilterSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAsrFilterSlot.setStatus('mandatory')
if mibBuilder.loadTexts: wfAsrFilterSlot.setDescription('The router slot on which this filter exists.')
wfAsrDestIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 7, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAsrDestIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wfAsrDestIpAddr.setDescription('Filter destination IP address reference value.')
wfAsrDestIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 7, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAsrDestIpMask.setStatus('mandatory')
if mibBuilder.loadTexts: wfAsrDestIpMask.setDescription('Filter destination IP address mask.')
wfAsrSourceIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 7, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAsrSourceIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wfAsrSourceIpAddr.setDescription('Filter source IP address reference value.')
wfAsrSourceIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 7, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAsrSourceIpMask.setStatus('mandatory')
if mibBuilder.loadTexts: wfAsrSourceIpMask.setDescription('Filter source IP address mask.')
wfAsrDestPortRangeLow = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 7, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAsrDestPortRangeLow.setStatus('mandatory')
if mibBuilder.loadTexts: wfAsrDestPortRangeLow.setDescription('The low value for the range of TCP/UDP destination ports.')
wfAsrDestPortRangeHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 7, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAsrDestPortRangeHigh.setStatus('mandatory')
if mibBuilder.loadTexts: wfAsrDestPortRangeHigh.setDescription('The high value for the range of TCP/UDP destination ports.')
wfAsrSourcePortRangeLow = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 7, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAsrSourcePortRangeLow.setStatus('mandatory')
if mibBuilder.loadTexts: wfAsrSourcePortRangeLow.setDescription('The low value for the range of TCP/UDP source ports.')
wfAsrSourcePortRangeHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 7, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAsrSourcePortRangeHigh.setStatus('mandatory')
if mibBuilder.loadTexts: wfAsrSourcePortRangeHigh.setDescription('The high value for the range of TCP/UDP source ports.')
wfAsrIPProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 7, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAsrIPProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: wfAsrIPProtocol.setDescription('IP protocol for this filter (TCP or UDP).')
wfAsrFilterTtl = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 7, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAsrFilterTtl.setStatus('mandatory')
if mibBuilder.loadTexts: wfAsrFilterTtl.setDescription('For SVC filters, this is the SVC idle time (seconds). For all other filter types, this is the filter expiration time (seconds).')
wfAsrFilterType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 7, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAsrFilterType.setStatus('mandatory')
if mibBuilder.loadTexts: wfAsrFilterType.setDescription('Type of filter (SVC, NOSVC, in-progress, dest unreachable).')
wfAsrSvcCircuitNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 7, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAsrSvcCircuitNumber.setStatus('mandatory')
if mibBuilder.loadTexts: wfAsrSvcCircuitNumber.setDescription('Circuit number on which the SVC is created.')
wfAsrSvcVcid1 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 7, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAsrSvcVcid1.setStatus('mandatory')
if mibBuilder.loadTexts: wfAsrSvcVcid1.setDescription('For Frame Relay SVCs, this is the DLCI value. For ATM SVCs, this is the VPI value.')
wfAsrSvcVcid2 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 7, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAsrSvcVcid2.setStatus('mandatory')
if mibBuilder.loadTexts: wfAsrSvcVcid2.setDescription('For ATM SVCs, this is the VCI value.')
wfAsrSvcCalledAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 7, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAsrSvcCalledAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wfAsrSvcCalledAddr.setDescription('SVC Called Party Address')
wfAsrSvcSetupTime = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 7, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAsrSvcSetupTime.setStatus('mandatory')
if mibBuilder.loadTexts: wfAsrSvcSetupTime.setDescription('Time stamp of when the SVC was created.')
wfAsrSvcType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 7, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fr", 1), ("atm", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAsrSvcType.setStatus('mandatory')
if mibBuilder.loadTexts: wfAsrSvcType.setDescription('Type of SVC created (Frame Relay or ATM).')
wfAsrSvcMTU = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 7, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAsrSvcMTU.setStatus('mandatory')
if mibBuilder.loadTexts: wfAsrSvcMTU.setDescription('The maximum transmission unit for this SVC.')
wfAsrSvcRouterPriOut = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 7, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAsrSvcRouterPriOut.setStatus('mandatory')
if mibBuilder.loadTexts: wfAsrSvcRouterPriOut.setDescription('The router priority queue to be used for the packets sent on this SVC.')
wfAsrFrSvcCIRIn = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 7, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAsrFrSvcCIRIn.setStatus('mandatory')
if mibBuilder.loadTexts: wfAsrFrSvcCIRIn.setDescription('Frame Relay SVC commited information rate - inbound (bps).')
wfAsrFrSvcCIROut = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 7, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAsrFrSvcCIROut.setStatus('mandatory')
if mibBuilder.loadTexts: wfAsrFrSvcCIROut.setDescription('Frame Relay SVC commited information rate - outbound (bps).')
wfAsrFrSvcBCIn = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 7, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAsrFrSvcBCIn.setStatus('mandatory')
if mibBuilder.loadTexts: wfAsrFrSvcBCIn.setDescription('Frame Relay commited burst rate for SVC - inbound (bps).')
wfAsrFrSvcBCOut = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 7, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAsrFrSvcBCOut.setStatus('mandatory')
if mibBuilder.loadTexts: wfAsrFrSvcBCOut.setDescription('Frame Relay commited burst rate for the SVC - outbound (bps).')
wfAsrFrSvcBEIn = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 7, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAsrFrSvcBEIn.setStatus('mandatory')
if mibBuilder.loadTexts: wfAsrFrSvcBEIn.setDescription('Frame Relay excess burst rate for the SVC - inbound (bps).')
wfAsrFrSvcBEOut = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 7, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAsrFrSvcBEOut.setStatus('mandatory')
if mibBuilder.loadTexts: wfAsrFrSvcBEOut.setDescription('Frame Relay excess burst rate for the SVC - outbound (bps).')
wfAsrFrSvcX213Pri = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 7, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAsrFrSvcX213Pri.setStatus('mandatory')
if mibBuilder.loadTexts: wfAsrFrSvcX213Pri.setDescription('Frame Relay SVC X.213 data priority value passed to the switch during call setup.')
wfAsrAtmSvcPCRIn = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 7, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAsrAtmSvcPCRIn.setStatus('mandatory')
if mibBuilder.loadTexts: wfAsrAtmSvcPCRIn.setDescription('ATM SVC Peak Cell Rate - inbound.')
wfAsrAtmSvcPCROut = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 7, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAsrAtmSvcPCROut.setStatus('mandatory')
if mibBuilder.loadTexts: wfAsrAtmSvcPCROut.setDescription('ATM SVC Peak Cell Rate - outbound.')
wfAsrAtmSvcSCRIn = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 7, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAsrAtmSvcSCRIn.setStatus('mandatory')
if mibBuilder.loadTexts: wfAsrAtmSvcSCRIn.setDescription('ATM SVC Sustainable Cell Rate - inbound.')
wfAsrAtmSvcSCROut = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 7, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAsrAtmSvcSCROut.setStatus('mandatory')
if mibBuilder.loadTexts: wfAsrAtmSvcSCROut.setDescription('ATM SVC Sustainable Cell Rate - outbound.')
wfAsrAtmSvcMBSIn = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 7, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAsrAtmSvcMBSIn.setStatus('mandatory')
if mibBuilder.loadTexts: wfAsrAtmSvcMBSIn.setDescription('ATM SVC Maximum Burst Size - inbound.')
wfAsrAtmSvcMBSOut = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 7, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAsrAtmSvcMBSOut.setStatus('mandatory')
if mibBuilder.loadTexts: wfAsrAtmSvcMBSOut.setDescription('ATM SVC Maximum Burst Size - outbound.')
wfAsrAtmSvcQOSClassIn = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 7, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAsrAtmSvcQOSClassIn.setStatus('mandatory')
if mibBuilder.loadTexts: wfAsrAtmSvcQOSClassIn.setDescription('ATM SVC Quality of Service - inbound. Class 0 through 4.')
wfAsrAtmSvcQOSClassOut = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 7, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAsrAtmSvcQOSClassOut.setStatus('mandatory')
if mibBuilder.loadTexts: wfAsrAtmSvcQOSClassOut.setDescription('ATM SVC Quality of Service - outbound. Class 0 through 4.')
wfAsrAtmSvcCDVTIn = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 7, 1, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAsrAtmSvcCDVTIn.setStatus('mandatory')
if mibBuilder.loadTexts: wfAsrAtmSvcCDVTIn.setDescription('ATM SVC Cell Delay Variation Tolerance - inbound.')
wfAsrAtmSvcCDVTOut = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 7, 1, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAsrAtmSvcCDVTOut.setStatus('mandatory')
if mibBuilder.loadTexts: wfAsrAtmSvcCDVTOut.setDescription('ATM SVC Cell Delay Variation Tolerance - outbound.')
wfAsrAtmSvcCLRIn = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 7, 1, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAsrAtmSvcCLRIn.setStatus('mandatory')
if mibBuilder.loadTexts: wfAsrAtmSvcCLRIn.setDescription('ATM SVC Cell Loss Ratio - inbound.')
wfAsrAtmSvcCLROut = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 7, 1, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAsrAtmSvcCLROut.setStatus('mandatory')
if mibBuilder.loadTexts: wfAsrAtmSvcCLROut.setDescription('ATM SVC Cell Loss Ratio - outbound.')
wfAsrTest = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 8))
wfAsrTestCreate = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAsrTestCreate.setStatus('mandatory')
if mibBuilder.loadTexts: wfAsrTestCreate.setDescription('Create/Delete parameter. Default is created. Users perform a set operation on this object in order to create/delete ASR Test Object.')
wfAsrTestChangeVal = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 8, 2), Integer32().clone(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAsrTestChangeVal.setStatus('mandatory')
if mibBuilder.loadTexts: wfAsrTestChangeVal.setDescription('Value to set the protocol field in the ASR Fwd Table. This will take the SVC entry matching the Dlci and Cct number and change the filter. This is used only for Inbound Pkt Filtering tests')
wfAsrTestDlci = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 8, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAsrTestDlci.setStatus('mandatory')
if mibBuilder.loadTexts: wfAsrTestDlci.setDescription('Dlci of SVC Filter entry to change')
wfAsrTestCct = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 11, 8, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAsrTestCct.setStatus('mandatory')
if mibBuilder.loadTexts: wfAsrTestCct.setDescription('Circuit number of SVC Filter to change')
mibBuilder.exportSymbols("Wellfleet-ASR-MIB", wfAsrX213PriDelete=wfAsrX213PriDelete, wfAsrNextHopRetryLimit=wfAsrNextHopRetryLimit, wfAsrDestIpMask=wfAsrDestIpMask, wfAsrX213PriEntry=wfAsrX213PriEntry, wfAsrMaxSessions=wfAsrMaxSessions, wfAsrNegativeNHR=wfAsrNegativeNHR, wfAsrAtmSvcPCRIn=wfAsrAtmSvcPCRIn, wfAsrCircuitTable=wfAsrCircuitTable, wfAsrSecureInValid=wfAsrSecureInValid, wfAsrCircuitSetupSucc=wfAsrCircuitSetupSucc, wfAsrX213PriHiVal=wfAsrX213PriHiVal, wfAsrCircuitSetupRequests=wfAsrCircuitSetupRequests, wfAsrSvcMTU=wfAsrSvcMTU, wfAsrHoldDownTimer=wfAsrHoldDownTimer, wfAsrFwdTblEntries=wfAsrFwdTblEntries, wfAsrTestCreate=wfAsrTestCreate, wfAsrUseDynRdiscPref=wfAsrUseDynRdiscPref, wfAsrFilterCreate=wfAsrFilterCreate, wfAsrRtrPriLowVal=wfAsrRtrPriLowVal, wfAsrSvcInboundFilterFail=wfAsrSvcInboundFilterFail, wfAsrDestPortRangeLow=wfAsrDestPortRangeLow, wfAsrCircuitCallCtrl=wfAsrCircuitCallCtrl, wfAsrSvcInboundCallValFail=wfAsrSvcInboundCallValFail, wfAsrFwdTblSeq=wfAsrFwdTblSeq, wfAsrSourceIpAddr=wfAsrSourceIpAddr, wfAsrDestPortRangeHigh=wfAsrDestPortRangeHigh, wfAsrFrSvcBEIn=wfAsrFrSvcBEIn, wfAsrTestCct=wfAsrTestCct, wfAsrAtmSvcPCROut=wfAsrAtmSvcPCROut, wfAsrSvcVcid2=wfAsrSvcVcid2, wfAsrActiveSvcs=wfAsrActiveSvcs, wfAsrRtrPriCvtVal=wfAsrRtrPriCvtVal, wfAsrCircuitInDiscards=wfAsrCircuitInDiscards, wfAsrSvcRouterPriOut=wfAsrSvcRouterPriOut, wfAsrDirectExceptEntry=wfAsrDirectExceptEntry, wfAsrMultiHopEntry=wfAsrMultiHopEntry, wfAsrDestIpAddr=wfAsrDestIpAddr, wfAsrIPProtocol=wfAsrIPProtocol, wfAsrAtmSvcMBSIn=wfAsrAtmSvcMBSIn, wfAsrAtmSvcCDVTOut=wfAsrAtmSvcCDVTOut, wfAsrRtrPriEntry=wfAsrRtrPriEntry, wfAsrAtmSvcCLRIn=wfAsrAtmSvcCLRIn, wfAsrBaseEnable=wfAsrBaseEnable, wfAsrSvcSetupTime=wfAsrSvcSetupTime, wfAsrRtrPriTable=wfAsrRtrPriTable, wfAsrCircuitNumber=wfAsrCircuitNumber, wfAsrAtmSvcSCROut=wfAsrAtmSvcSCROut, wfAsrFrSvcX213Pri=wfAsrFrSvcX213Pri, wfAsrAtmSvcQOSClassOut=wfAsrAtmSvcQOSClassOut, wfAsrSvcOutboundReqFail=wfAsrSvcOutboundReqFail, wfAsrDirectExceptTable=wfAsrDirectExceptTable, wfAsrX213PriTable=wfAsrX213PriTable, wfAsrCircuitState=wfAsrCircuitState, wfAsrFrSvcCIRIn=wfAsrFrSvcCIRIn, wfAsrMhCircuitNumber=wfAsrMhCircuitNumber, wfAsrCircuitInReceives=wfAsrCircuitInReceives, wfAsrFrSvcCIROut=wfAsrFrSvcCIROut, wfAsrSrcPortHigh=wfAsrSrcPortHigh, wfAsrTest=wfAsrTest, wfAsrBase=wfAsrBase, wfAsrSvcCircuitNumber=wfAsrSvcCircuitNumber, wfAsrFilterTtl=wfAsrFilterTtl, wfAsrFrSvcBCOut=wfAsrFrSvcBCOut, wfAsrX213PriSwVal=wfAsrX213PriSwVal, wfAsrSourceIpMask=wfAsrSourceIpMask, wfAsrFrSvcBEOut=wfAsrFrSvcBEOut, wfAsrDestPortHigh=wfAsrDestPortHigh, wfAsrSvcType=wfAsrSvcType, wfAsrTestChangeVal=wfAsrTestChangeVal, wfAsrAtmSvcCLROut=wfAsrAtmSvcCLROut, wfAsrAtmSvcMBSOut=wfAsrAtmSvcMBSOut, wfAsrSourcePortRangeHigh=wfAsrSourcePortRangeHigh, wfAsrBaseCreate=wfAsrBaseCreate, wfAsrFilterSlot=wfAsrFilterSlot, wfAsrBaseState=wfAsrBaseState, wfAsrMhVcid1=wfAsrMhVcid1, wfAsrCircuitSetupFail=wfAsrCircuitSetupFail, wfAsrRtrPriHiVal=wfAsrRtrPriHiVal, wfAsrCircuitEntry=wfAsrCircuitEntry, wfAsrServicePort=wfAsrServicePort, wfAsrCircuitSVCsEstablished=wfAsrCircuitSVCsEstablished, wfAsrSourcePortRangeLow=wfAsrSourcePortRangeLow, wfAsrAtmSvcSCRIn=wfAsrAtmSvcSCRIn, wfAsrFiltTable=wfAsrFiltTable, wfAsrMultiHopDelete=wfAsrMultiHopDelete, wfAsrFilterType=wfAsrFilterType, wfAsrAtmSvcQOSClassIn=wfAsrAtmSvcQOSClassIn, wfAsrTestDlci=wfAsrTestDlci, wfAsrRtrPriDelete=wfAsrRtrPriDelete, wfAsrX213PriLowVal=wfAsrX213PriLowVal, wfAsrSvcVcid1=wfAsrSvcVcid1, wfAsrSrcPortLow=wfAsrSrcPortLow, wfAsrDnsProxyPort=wfAsrDnsProxyPort, wfAsrFiltEntry=wfAsrFiltEntry, wfAsrDebugLevel=wfAsrDebugLevel, wfAsrSecureInFilter=wfAsrSecureInFilter, wfAsrSvcCalledAddr=wfAsrSvcCalledAddr, wfAsrAtmSvcCDVTIn=wfAsrAtmSvcCDVTIn, wfAsrServiceProtocol=wfAsrServiceProtocol, wfAsrCircuitEnable=wfAsrCircuitEnable, wfAsrFrSvcBCIn=wfAsrFrSvcBCIn, wfAsrDestPortLow=wfAsrDestPortLow, wfAsrCircuitCreate=wfAsrCircuitCreate, wfAsrMhVcid2=wfAsrMhVcid2, wfAsrMultiHopTable=wfAsrMultiHopTable)
