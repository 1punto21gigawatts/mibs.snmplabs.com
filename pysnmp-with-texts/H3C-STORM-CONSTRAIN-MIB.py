#
# PySNMP MIB module H3C-STORM-CONSTRAIN-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/H3C-STORM-CONSTRAIN-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:23:58 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection")
h3cCommon, = mibBuilder.importSymbols("HUAWEI-3COM-OID-MIB", "h3cCommon")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, iso, Integer32, Counter32, Bits, Counter64, Gauge32, Unsigned32, MibIdentifier, NotificationType, TimeTicks, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "iso", "Integer32", "Counter32", "Bits", "Counter64", "Gauge32", "Unsigned32", "MibIdentifier", "NotificationType", "TimeTicks", "ObjectIdentity")
TextualConvention, DisplayString, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "RowStatus")
h3cStormConstrain = ModuleIdentity((1, 3, 6, 1, 4, 1, 2011, 10, 2, 66))
if mibBuilder.loadTexts: h3cStormConstrain.setLastUpdated('200806060000Z')
if mibBuilder.loadTexts: h3cStormConstrain.setOrganization('Huawei 3Com Technologies Co., Ltd.')
if mibBuilder.loadTexts: h3cStormConstrain.setContactInfo('Platform Team Huawei 3Com Technologies Co., Ltd. Hai-Dian District Beijing P.R. China http://www.huawei-3com.com Zip:100085')
if mibBuilder.loadTexts: h3cStormConstrain.setDescription('The Storm-Constrain function is used to avoid the packet-storm on a port. Three types of flux can be set observed respectively: broadcast, multicast and unicast. If an observed flux exceeds its upper limit, this kind of flux will be recognized as over-upper-flux. This kind of flux will be considered as normal-flux until it falls below its lower limit. If any type of observed flux is over-upper-flux, the port will change its status to controlled-status, that is to stop packet forwarding to avoid storm. Only when all the observed fluxes are not over-upper-flux, will the port return to normal(forwarding) status.')
class H3cStormConstrainUnit(TextualConvention, Integer32):
    description = 'The unit of the flux. none: not define. packetsPerSecond: packets per second. ratio: unit is 1%. For example, if the value is 40, it means 40%. bytesPerSecond: bytes per second. kbitsPerSecond: kilobits per second.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("none", 1), ("packetsPerSecond", 2), ("ratio", 3), ("bytesPerSecond", 4), ("kbitsPerSecond", 5))

h3cStormScalarGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 10, 2, 66, 1))
h3cStormTrapType = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 66, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("broadcast", 1), ("multicast", 2), ("unicast", 3)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: h3cStormTrapType.setStatus('current')
if mibBuilder.loadTexts: h3cStormTrapType.setDescription('This value is used to identify the type of trap. broadcast: trap message is generated for broadcast flux exceeds upper limit or falls under lower limit on a port. multicast: trap message is generated for multicast flux exceeds upper limit or falls under lower limit on a port. unicast : trap message is generated for unicast flux exceeds upper limit or falls under lower limit on a port.')
h3cStormTrapThreshold = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 66, 1, 2), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: h3cStormTrapThreshold.setStatus('current')
if mibBuilder.loadTexts: h3cStormTrapThreshold.setDescription('This value is used to figure the threshold of flux in trap message. For example, when the trap is generated for broadcast flux exceeds upper limit on a port, this value is equal to upper limit value configured. And when the trap is generated for broadcast flux fell under lower limit, this value is equal to lower limit value configured.')
h3cStormTableGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 10, 2, 66, 2))
h3cStormCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 66, 2, 1), )
if mibBuilder.loadTexts: h3cStormCtrlTable.setStatus('current')
if mibBuilder.loadTexts: h3cStormCtrlTable.setDescription('A table containing configurations of storm-constrain.')
h3cStormCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 66, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: h3cStormCtrlEntry.setStatus('current')
if mibBuilder.loadTexts: h3cStormCtrlEntry.setDescription('Detailed information of storm-constrain configurations.')
h3cStormCtrlPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 66, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("controlled", 1), ("normal", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cStormCtrlPortStatus.setStatus('current')
if mibBuilder.loadTexts: h3cStormCtrlPortStatus.setDescription('Status of the port: controlled: indicate that the port is in controlled status. Port which is in this status will not forward some type of packet. normal : indicate that the port is in normal status.')
h3cStormCtrlBroadcastUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 66, 2, 1, 1, 2), H3cStormConstrainUnit()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cStormCtrlBroadcastUnit.setStatus('current')
if mibBuilder.loadTexts: h3cStormCtrlBroadcastUnit.setDescription('The unit of the broadcast flux. This value must be set together with h3cStormCtrlBroadcastUpper and h3cStormCtrlBroadcastLower.')
h3cStormCtrlBroadcastUpper = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 66, 2, 1, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cStormCtrlBroadcastUpper.setStatus('current')
if mibBuilder.loadTexts: h3cStormCtrlBroadcastUpper.setDescription('The upper-limit of incoming broadcast taffic at a port within 1 second interval. Its unit depends on h3cStormCtrlBroadcastUnit value.')
h3cStormCtrlBroadcastLower = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 66, 2, 1, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cStormCtrlBroadcastLower.setStatus('current')
if mibBuilder.loadTexts: h3cStormCtrlBroadcastLower.setDescription('The lower-limit of incoming broadcast taffic at a port within 1 second interval. This value must be lower than h3cStormCtrlBroadcastUpper value. Its unit depends on h3cStormCtrlBroadcastUnit value.')
h3cStormCtrlMulticastUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 66, 2, 1, 1, 5), H3cStormConstrainUnit()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cStormCtrlMulticastUnit.setStatus('current')
if mibBuilder.loadTexts: h3cStormCtrlMulticastUnit.setDescription('The unit of the multicast flux. This value must be set together with h3cStormCtrlMulticastUpper and h3cStormCtrlMulticastLower.')
h3cStormCtrlMulticastUpper = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 66, 2, 1, 1, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cStormCtrlMulticastUpper.setStatus('current')
if mibBuilder.loadTexts: h3cStormCtrlMulticastUpper.setDescription('The upper-limit of incoming multicast taffic at a port within 1 second interval. Its unit depends on h3cStormCtrlMulticastUnit value.')
h3cStormCtrlMulticastLower = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 66, 2, 1, 1, 7), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cStormCtrlMulticastLower.setStatus('current')
if mibBuilder.loadTexts: h3cStormCtrlMulticastLower.setDescription('The lower-limit of incoming multicast taffic at a port within 1 second interval. This value must be lower than h3cStormCtrlMulticastUpper value. Its unit depends on h3cStormCtrlMulticastUnit value.')
h3cStormCtrlUnicastUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 66, 2, 1, 1, 8), H3cStormConstrainUnit()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cStormCtrlUnicastUnit.setStatus('current')
if mibBuilder.loadTexts: h3cStormCtrlUnicastUnit.setDescription('The unit of the unicast flux. This value must be set together with h3cStormCtrlUnicastUpper and h3cStormCtrlUnicastLower.')
h3cStormCtrlUnicastUpper = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 66, 2, 1, 1, 9), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cStormCtrlUnicastUpper.setStatus('current')
if mibBuilder.loadTexts: h3cStormCtrlUnicastUpper.setDescription('The upper-limit of incoming unicast taffic at a port within 1 second interval. Its unit depends on h3cStormCtrlUnicastUnit value.')
h3cStormCtrlUnicastLower = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 66, 2, 1, 1, 10), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cStormCtrlUnicastLower.setStatus('current')
if mibBuilder.loadTexts: h3cStormCtrlUnicastLower.setDescription('The lower-limit of incoming unicast taffic at a port within 1 second interval. This value must be lower than h3cStormCtrlUnicastUpper value. Its unit depends on h3cStormCtrlUnicastUnit value.')
h3cStormCtrlRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 66, 2, 1, 1, 11), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cStormCtrlRowStatus.setStatus('current')
if mibBuilder.loadTexts: h3cStormCtrlRowStatus.setDescription('This object is responsible for managing the creation, deletion and modification of rows, which supports active status and CreatAndGo, destroy operation.')
h3cStormCtrlPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 66, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("block", 2), ("shutdown", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cStormCtrlPortMode.setStatus('current')
if mibBuilder.loadTexts: h3cStormCtrlPortMode.setDescription('The storm control mode of the port.')
h3cStormNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 10, 2, 66, 3))
h3cStormRising = NotificationType((1, 3, 6, 1, 4, 1, 2011, 10, 2, 66, 3, 1)).setObjects(("IF-MIB", "ifIndex"), ("H3C-STORM-CONSTRAIN-MIB", "h3cStormTrapType"), ("H3C-STORM-CONSTRAIN-MIB", "h3cStormTrapThreshold"), ("H3C-STORM-CONSTRAIN-MIB", "h3cStormCtrlPortStatus"))
if mibBuilder.loadTexts: h3cStormRising.setStatus('current')
if mibBuilder.loadTexts: h3cStormRising.setDescription('This trap message is generated when any type of the flux exceeds its upper limit on a port.')
h3cStormFalling = NotificationType((1, 3, 6, 1, 4, 1, 2011, 10, 2, 66, 3, 2)).setObjects(("IF-MIB", "ifIndex"), ("H3C-STORM-CONSTRAIN-MIB", "h3cStormTrapType"), ("H3C-STORM-CONSTRAIN-MIB", "h3cStormTrapThreshold"), ("H3C-STORM-CONSTRAIN-MIB", "h3cStormCtrlPortStatus"))
if mibBuilder.loadTexts: h3cStormFalling.setStatus('current')
if mibBuilder.loadTexts: h3cStormFalling.setDescription('This trap message is generated when a flux which used to overflow its upper limit, falls below its lower limit on a port.')
mibBuilder.exportSymbols("H3C-STORM-CONSTRAIN-MIB", h3cStormCtrlMulticastUpper=h3cStormCtrlMulticastUpper, h3cStormCtrlPortMode=h3cStormCtrlPortMode, h3cStormCtrlBroadcastUpper=h3cStormCtrlBroadcastUpper, h3cStormCtrlBroadcastLower=h3cStormCtrlBroadcastLower, h3cStormCtrlMulticastLower=h3cStormCtrlMulticastLower, h3cStormTrapThreshold=h3cStormTrapThreshold, h3cStormTrapType=h3cStormTrapType, h3cStormCtrlUnicastLower=h3cStormCtrlUnicastLower, h3cStormCtrlEntry=h3cStormCtrlEntry, h3cStormCtrlRowStatus=h3cStormCtrlRowStatus, H3cStormConstrainUnit=H3cStormConstrainUnit, h3cStormCtrlMulticastUnit=h3cStormCtrlMulticastUnit, h3cStormCtrlUnicastUnit=h3cStormCtrlUnicastUnit, h3cStormTableGroup=h3cStormTableGroup, h3cStormCtrlBroadcastUnit=h3cStormCtrlBroadcastUnit, h3cStormScalarGroup=h3cStormScalarGroup, h3cStormCtrlUnicastUpper=h3cStormCtrlUnicastUpper, h3cStormConstrain=h3cStormConstrain, PYSNMP_MODULE_ID=h3cStormConstrain, h3cStormNotifications=h3cStormNotifications, h3cStormCtrlTable=h3cStormCtrlTable, h3cStormCtrlPortStatus=h3cStormCtrlPortStatus, h3cStormRising=h3cStormRising, h3cStormFalling=h3cStormFalling)
