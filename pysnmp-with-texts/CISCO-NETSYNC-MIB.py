#
# PySNMP MIB module CISCO-NETSYNC-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-NETSYNC-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:08:29 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
ModuleIdentity, Unsigned32, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, MibIdentifier, ObjectIdentity, TimeTicks, Gauge32, Bits, Counter32, IpAddress, Counter64, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Unsigned32", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "MibIdentifier", "ObjectIdentity", "TimeTicks", "Gauge32", "Bits", "Counter32", "IpAddress", "Counter64", "Integer32")
DisplayString, TruthValue, TextualConvention, TimeStamp = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TruthValue", "TextualConvention", "TimeStamp")
ciscoNetsyncMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 761))
ciscoNetsyncMIB.setRevisions(('2010-10-15 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoNetsyncMIB.setRevisionsDescriptions(('Initial version of the SyncE MIB module.',))
if mibBuilder.loadTexts: ciscoNetsyncMIB.setLastUpdated('201010150000Z')
if mibBuilder.loadTexts: ciscoNetsyncMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoNetsyncMIB.setContactInfo('Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-sync-e@cisco.com')
if mibBuilder.loadTexts: ciscoNetsyncMIB.setDescription('The Synchronous Ethernet (SyncE) MIB is defined for monitoring network synchronization based on ITU-T G.781 clock selection. Synchronous Ethernet (SyncE) is a standard defined for delivering timing to the remote NEs through a Packet Network. SyncE is well defined by ITU-T which included G.8261, G.8262, G.8264 and G.781. It leverages the PHY layer of Ethernet to transmit frequency to the remote sites. Its functionality and accuracy mimics that of the SONET/SDH network because of its physical layer characteristic. In order to allow best clock source traceabiliy, correctly define the timing source and helps preventing timing loop, Synchronization Status Message is required for SyncE. This is similar to SONET/SDH. However, since SONET/SDH use 4 bits from the two S bytes in the SONET/SDH overhead frame for such message, Ethernet relies on a different channel called ESMC (Ethernet Synchronization Messaging Channel) which is based on IEEE 802.3 Organization Specific Slow Protocol. Glossary: AIS: Alarm Indication Signal ATM: Asynchronous Transfer Mode EEC: Ethernet Equipment Clock ESMC: Ethernet Synchronization Messaging Channel QL: Quality Level SASE: Stand Alone Synchronization Equipment SSM: Synchronization Status Messaging')
class CiscoNetsyncIfType(TextualConvention, Integer32):
    description = 'Network synchronization clock source Interface type. Netsync interface Interface type ======================== ============== netsyncIfTypeUnknown Unknown netsyncIfTypeInternal Internal netsyncIfTypeEthernet Ethernet netsyncIfTypeSonet SONET netsyncIfTypeTop Timing Over Packet netsyncIfTypeExt External interface netsyncIfTypeController T1/E1 Controller netsyncIfTypeGps GPS netsyncIfTypeAtm ATM For external and GPS interface types, the following syntax is used for specifying an interface: <slot>/<card>/<port> <signal type> where slot : slot number of the device where card is present. card : bay number in which card is inserted. port : port number on the card. signal type: hardware signal of the specified <slot>/<card>/<port>. Examples of signal type are T1 SF and T1 ESF. '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))
    namedValues = NamedValues(("netsyncIfTypeUnknown", 1), ("netsyncIfTypeInternal", 2), ("netsyncIfTypeEthernet", 3), ("netsyncIfTypeSonet", 4), ("netsyncIfTypeTop", 5), ("netsyncIfTypeExt", 6), ("netsyncIfTypeController", 7), ("netsyncIfTypeGps", 8), ("netsyncIfTypeAtm", 9))

class CiscoNetsyncNetworkOption(TextualConvention, Integer32):
    reference = 'ITU-T standard G.781'
    description = 'Network synchronization networking options. Network option Network option type =========================== =================== netsyncNetworkOptionUnknown Unknown network option netsyncNetworkOption1 Option I netsyncNetworkOption2Gen1 Option II Generation 1 netsyncNetworkOption2Gen2 Option II Generation 2 netsyncNetworkOption3 Option III netsyncNetworkOptionInvalid Invalid network option Option I refers to ITU-T Option I synchronization networks. Option II refers to ITU-T Option II synchronization networks designed for North America. Option III refers to ITU-T Option III synchronization networks designed for Japan. '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("netsyncNetworkOptionUnknown", 1), ("netsyncNetworkOption1", 2), ("netsyncNetworkOption2Gen1", 3), ("netsyncNetworkOption2Gen2", 4), ("netsyncNetworkOption3", 5), ("netsyncNetworkOptionInvalid", 6))

class CiscoNetsyncEECOption(TextualConvention, Integer32):
    reference = 'ITU-T standard G.781'
    description = 'Network synchronization EEC (Ethernet Equipment Clock) options. The EEC options are for Synchronous Ethernet devices and define the requirements for clocks, e.g. bandwidth, frequency accuracy, holdover and noise generation. Two options are defined: EEC-Option 1: Designed to interwork with network optimized for the 2048 kbit/s hierarchy. EEC-Option 2: Designed to interwork with network optimized for the 1544 kbit/s hierarchy. netsyncEECOptionUnknown Unknown netsyncEECOption1 EEC option 1 netsyncEECOption2 EEC option 2 netsyncEECOptionInvalid Invalid EEC option '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("netsyncEECOptionUnknown", 1), ("netsyncEECOption1", 2), ("netsyncEECOption2", 3), ("netsyncEECOptionInvalid", 4))

class CiscoNetsyncQLMode(TextualConvention, Integer32):
    reference = 'ITU-T standard G.781 section 5.12'
    description = "The clock mode of the network synchronization clock selection process as described in ITU-T standard G.781 section 5.12. G.781 clock selection runs in one of two clock modes: QL (Quality Level) enabled mode and QL disabled mode. netsyncQLModeUnknown - QL mode unknown netsyncQLModeQlDisabled - QL-disabled mode; clock selection is running in QL disabled mode, which primarily considers the source's priority as the clock selection criteria. netsyncQLModeQlEnabled - QL-enabled mode clock selection is running in QL enabled mode, which primarily considers the source's clock quality level and priority as the clock selection criteria. "
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("netsyncQLModeUnknown", 1), ("netsyncQLModeQlDisabled", 2), ("netsyncQLModeQlEnabled", 3))

class CiscoNetsyncClockMode(TextualConvention, Integer32):
    description = 'Clock operating mode: netsyncClockModeUnknown - system is unable to determine the operating mode. netsyncClockModeFreerun - free-running mode. netsyncClockModeHoldover - holdover mode. netsyncClockModeLocked - a valid clock source is locked. '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("netsyncClockModeUnknown", 1), ("netsyncClockModeFreerun", 2), ("netsyncClockModeHoldover", 3), ("netsyncClockModeLocked", 4))

class CiscoNetsyncQualityLevel(TextualConvention, Integer32):
    reference = 'ITU-T standard G.781 section 5.4'
    description = 'Clock source QL (quality level) is defined in ITU-T G.781 section 5.4 to reflect the synchronization quality within a network Option, i.e. I, II, and III. The following clock source quality levels are defined for the synchronization process of Option I: QL-PRC Primary reference clock QL-SSU-A Type I or V slave clock defined in ITU-T G.811 QL-SSU-B Type VI slave clock defined in ITU-T G.812 QL-SEC Synchronous equipment clock QL-DNU Do not use for synchronization QL-INVx Unallocated SSM value, where x represent the value of SSM received QL-FAILED Signal failure state QL-UNC Unconnected to an input QL-NSUPP Not supporting the SSM processing The following clock source quality levels are defined for the synchronization process of Option II: QL-PRS PRS traceable QL-STU Synchronized; traceability unknown QL-ST2 Stratum 2 QL-TNC Transit node clock QL-ST3E Stratum 3E QL-ST3 Stratum 3 QL-SMC SONET clock self timed QL-ST4 Stratum 4 freerun QL-PROV Provisionable by the network operator QL-DUS Do not use for synchronization QL-INVx Unallocated SSM value, where x represent the value of SSM received QL-FAILED Signal failure state QL-UNC Unconnected to an input QL-NSUPP Not supporting the SSM processing The following clock source quality levels are defined for the synchronization process of Option III: QL-UNK Unknown clock source QL-SEC Synchronous equipment clock QL-INVx Unallocated SSM value, where x represent the value of SSM received QL-FAILED Signal failure state QL-UNC Unconnected to an input QL-NSUPP Not supporting the SSM processing '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36))
    namedValues = NamedValues(("netsyncQualityLevelNULL", 1), ("netsyncQualityLevelDNU", 2), ("netsyncQualityLevelDUS", 3), ("netsyncQualityLevelFAILED", 4), ("netsyncQualityLevelINV0", 5), ("netsyncQualityLevelINV1", 6), ("netsyncQualityLevelINV2", 7), ("netsyncQualityLevelINV3", 8), ("netsyncQualityLevelINV4", 9), ("netsyncQualityLevelINV5", 10), ("netsyncQualityLevelINV6", 11), ("netsyncQualityLevelINV7", 12), ("netsyncQualityLevelINV8", 13), ("netsyncQualityLevelINV9", 14), ("netsyncQualityLevelINV10", 15), ("netsyncQualityLevelINV11", 16), ("netsyncQualityLevelINV12", 17), ("netsyncQualityLevelINV13", 18), ("netsyncQualityLevelINV14", 19), ("netsyncQualityLevelINV15", 20), ("netsyncQualityLevelNSUPP", 21), ("netsyncQualityLevelPRC", 22), ("netsyncQualityLevelPROV", 23), ("netsyncQualityLevelPRS", 24), ("netsyncQualityLevelSEC", 25), ("netsyncQualityLevelSMC", 26), ("netsyncQualityLevelSSUA", 27), ("netsyncQualityLevelSSUB", 28), ("netsyncQualityLevelST2", 29), ("netsyncQualityLevelST3", 30), ("netsyncQualityLevelST3E", 31), ("netsyncQualityLevelST4", 32), ("netsyncQualityLevelSTU", 33), ("netsyncQualityLevelTNC", 34), ("netsyncQualityLevelUNC", 35), ("netsyncQualityLevelUNK", 36))

class CiscoNetsyncSSMCap(TextualConvention, Integer32):
    description = 'Network synchronization clock source interface SSM (Synchronization Status Message) capability. SSM Capability Capability information ===================== ====================== netsyncSSMCapNone No SSM capability netsyncSSMCapTxRx To transmit and receive SSM netsyncSSMCapTx To transmit SSM only netsyncSSMCapRx To receive SSM only netsyncSSMCapInvalid Capability invalid or unsupported '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("netsyncSSMCapNone", 1), ("netsyncSSMCapTxRx", 2), ("netsyncSSMCapTx", 3), ("netsyncSSMCapRx", 4), ("netsyncSSMCapInvalid", 5))

class CiscoNetsyncESMCCap(TextualConvention, Integer32):
    description = 'Network synchronization clock source interface ESMC (Ethernet Synchronization Messaging Channel) capability. ESMC Capability Capability information ====================== ====================== netsyncESMCCapNone No ESMC capability netsyncESMCCapTxRx To transmit and receive ESMC netsyncESMCCapTx To transmit SSM only netsyncESMCCapRx To receive SSM only netsyncESMCCapInvalid Capability invalid or unsupported '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("netsyncESMCCapNone", 1), ("netsyncESMCCapTxRx", 2), ("netsyncESMCCapTx", 3), ("netsyncESMCCapRx", 4), ("netsyncESMCCapInvalid", 5))

class CiscoNetsyncAlarmInfo(TextualConvention, Bits):
    description = "Input clock source's alarm reasons: netsyncSrcAlarmReasonAIS - Alarm Indication Signal netsyncSrcAlarmReasonOOR - Out of range netsyncSrcAlarmReasonOIR - Online Insertion Removal netsyncSrcAlarmReasonInternal - Internal"
    status = 'current'
    namedValues = NamedValues(("netsyncSrcAlarmReasonAIS", 0), ("netsyncSrcAlarmReasonOOR", 1), ("netsyncSrcAlarmReasonOIR", 2), ("netsyncSrcAlarmReasonInternal", 3))

ciscoNetsyncMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 761, 0))
ciscoNetsyncMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 761, 1))
ciscoNetsyncMIBConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 761, 2))
ciscoNetsyncMIBTables = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 761, 1, 1))
cnsClkSelGlobalTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 761, 1, 1, 1), )
if mibBuilder.loadTexts: cnsClkSelGlobalTable.setStatus('current')
if mibBuilder.loadTexts: cnsClkSelGlobalTable.setDescription('G.781 clock selection process table. This table contains the global parameters for the G.781 clock selection process.')
cnsClkSelGlobalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 761, 1, 1, 1, 1), ).setIndexNames((0, "CISCO-NETSYNC-MIB", "cnsClkSelGloProcIndex"))
if mibBuilder.loadTexts: cnsClkSelGlobalEntry.setStatus('current')
if mibBuilder.loadTexts: cnsClkSelGlobalEntry.setDescription('An entry is added to cnsClkSelGlobalTable when G.781 clock selection is enabled in the device configuration. The entry is removed when G.781 clock selection is removed from the configuration.')
cnsClkSelGloProcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 761, 1, 1, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)))
if mibBuilder.loadTexts: cnsClkSelGloProcIndex.setStatus('current')
if mibBuilder.loadTexts: cnsClkSelGloProcIndex.setDescription('An index that uniquely represents a clock selection process. This index is assigned arbitrarily by the system and may not be persistent across reboots.')
cnsClkSelGlobProcessMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 761, 1, 1, 1, 1, 2), CiscoNetsyncQLMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnsClkSelGlobProcessMode.setStatus('current')
if mibBuilder.loadTexts: cnsClkSelGlobProcessMode.setDescription('This object indicates the QL mode of the network synchronization clock selection process as described in ITU-T standard G.781 section 5.12. ')
cnsClkSelGlobClockMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 761, 1, 1, 1, 1, 3), CiscoNetsyncClockMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnsClkSelGlobClockMode.setStatus('current')
if mibBuilder.loadTexts: cnsClkSelGlobClockMode.setDescription('This object indicates the operating mode of the system clock.')
cnsClkSelGlobNetsyncEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 761, 1, 1, 1, 1, 4), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnsClkSelGlobNetsyncEnable.setStatus('current')
if mibBuilder.loadTexts: cnsClkSelGlobNetsyncEnable.setDescription("This object indicates whether the G.781 clock selection is enabled or not. 'true' - G.781 clock selection is enabled 'false' - G.781 clock selection is disabled")
cnsClkSelGlobRevertiveMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 761, 1, 1, 1, 1, 5), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnsClkSelGlobRevertiveMode.setStatus('current')
if mibBuilder.loadTexts: cnsClkSelGlobRevertiveMode.setDescription('This object indicates the revertive mode setting in the G.781 clock selection process. The switching of clock sources can be made revertive or non-revertive. In non-revertive mode, an alternate clock source is maintained even after the original clock source has recovered from the failure that caused the switch. In revertive mode, the clock selection process switches back to the original clock source after recovering from the failure.')
cnsClkSelGlobESMCMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 761, 1, 1, 1, 1, 6), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnsClkSelGlobESMCMode.setStatus('current')
if mibBuilder.loadTexts: cnsClkSelGlobESMCMode.setDescription('This object indicates if global ESMC is enabled. With ESMC enabled globally, the system is capable of handling ESMC messages.')
cnsClkSelGlobEECOption = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 761, 1, 1, 1, 1, 7), CiscoNetsyncEECOption().clone('netsyncEECOptionUnknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnsClkSelGlobEECOption.setReference('ITU-T standard G.781')
if mibBuilder.loadTexts: cnsClkSelGlobEECOption.setStatus('current')
if mibBuilder.loadTexts: cnsClkSelGlobEECOption.setDescription('This object indicates the network synchronization EEC (Ethernet Equipment Clock) option.')
cnsClkSelGlobNetworkOption = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 761, 1, 1, 1, 1, 8), CiscoNetsyncNetworkOption().clone('netsyncNetworkOptionUnknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnsClkSelGlobNetworkOption.setReference('ITU-T standard G.781')
if mibBuilder.loadTexts: cnsClkSelGlobNetworkOption.setStatus('current')
if mibBuilder.loadTexts: cnsClkSelGlobNetworkOption.setDescription('This object indicates the synchronization network option.')
cnsClkSelGlobHoldoffTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 761, 1, 1, 1, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)).clone(300)).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cnsClkSelGlobHoldoffTime.setReference('ITU-T standard G.781 section 5.8')
if mibBuilder.loadTexts: cnsClkSelGlobHoldoffTime.setStatus('current')
if mibBuilder.loadTexts: cnsClkSelGlobHoldoffTime.setDescription('This object indicates the global holdoff time in the G.781 clock selection process.')
cnsClkSelGlobWtrTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 761, 1, 1, 1, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)).clone(300)).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cnsClkSelGlobWtrTime.setReference('ITU-T standard G.781 section 5.9')
if mibBuilder.loadTexts: cnsClkSelGlobWtrTime.setStatus('current')
if mibBuilder.loadTexts: cnsClkSelGlobWtrTime.setDescription('This object indicates the global wait-to-restore time in the G.781 clock selection process.')
cnsClkSelGlobNofSources = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 761, 1, 1, 1, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setUnits('clock sources').setMaxAccess("readonly")
if mibBuilder.loadTexts: cnsClkSelGlobNofSources.setStatus('current')
if mibBuilder.loadTexts: cnsClkSelGlobNofSources.setDescription('This object indicates the number of synchronization sources currently configured for the G.781 clock selection process.')
cnsClkSelGlobLastHoldoverSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 761, 1, 1, 1, 1, 12), Gauge32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cnsClkSelGlobLastHoldoverSeconds.setStatus('current')
if mibBuilder.loadTexts: cnsClkSelGlobLastHoldoverSeconds.setDescription('This object indicates the duration of the last holdover period in seconds. If the holdover duration is less than a second, the object will carry the value zero.')
cnsClkSelGlobCurrHoldoverSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 761, 1, 1, 1, 1, 13), Gauge32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cnsClkSelGlobCurrHoldoverSeconds.setStatus('current')
if mibBuilder.loadTexts: cnsClkSelGlobCurrHoldoverSeconds.setDescription('This object indicates the duration of the current holdover period. If a system clock is in holdover mode, the object carries the current holdover duration in seconds. If the system clock is not in holdover, the object carries the value 0.')
cnsSelectedInputSourceTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 761, 1, 1, 2), )
if mibBuilder.loadTexts: cnsSelectedInputSourceTable.setStatus('current')
if mibBuilder.loadTexts: cnsSelectedInputSourceTable.setDescription('T0 selected clock source table. This table contains the selected clock source for the input T0 clock.')
cnsSelectedInputSourceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 761, 1, 1, 2, 1), ).setIndexNames((0, "CISCO-NETSYNC-MIB", "cnsSelInpSrcNetsyncIndex"))
if mibBuilder.loadTexts: cnsSelectedInputSourceEntry.setStatus('current')
if mibBuilder.loadTexts: cnsSelectedInputSourceEntry.setDescription('An entry is created in the table when the G.781 clock selection process has successfully selected a T0 clock source. The entry shall remain during the time the G.781 clock selection process remains enabled.')
cnsSelInpSrcNetsyncIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 761, 1, 1, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: cnsSelInpSrcNetsyncIndex.setStatus('current')
if mibBuilder.loadTexts: cnsSelInpSrcNetsyncIndex.setDescription('An index that uniquely represents an entry in this table. This index is assigned arbitrarily by the clock selection process and may not be persistent across reboots.')
cnsSelInpSrcName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 761, 1, 1, 2, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnsSelInpSrcName.setStatus('current')
if mibBuilder.loadTexts: cnsSelInpSrcName.setDescription('This object indicates the name of the selected T0 clock.')
cnsSelInpSrcIntfType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 761, 1, 1, 2, 1, 3), CiscoNetsyncIfType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnsSelInpSrcIntfType.setStatus('current')
if mibBuilder.loadTexts: cnsSelInpSrcIntfType.setDescription('This object indicates the type of the selected T0 clock.')
cnsSelInpSrcQualityLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 761, 1, 1, 2, 1, 4), CiscoNetsyncQualityLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnsSelInpSrcQualityLevel.setStatus('current')
if mibBuilder.loadTexts: cnsSelInpSrcQualityLevel.setDescription("This object indicates the selected T0 clock source's effective quality level, which is the derived clock quality based on the three factors: (a) Received quality level. (b) Configured Rx quality level. This factor supersedes (a). (c) System overridden quality level as a result of exceptional events such as signal failure or ESMC failure. This factor supersedes (a) and (b).")
cnsSelInpSrcPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 761, 1, 1, 2, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnsSelInpSrcPriority.setReference('ITU-T standard G.781 section 5.10')
if mibBuilder.loadTexts: cnsSelInpSrcPriority.setStatus('current')
if mibBuilder.loadTexts: cnsSelInpSrcPriority.setDescription('This object indicates the configured priority of the selected T0 clock. A smaller value represents a higher priority.')
cnsSelInpSrcTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 761, 1, 1, 2, 1, 6), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnsSelInpSrcTimestamp.setStatus('current')
if mibBuilder.loadTexts: cnsSelInpSrcTimestamp.setDescription('This object indicates the timestamp of the T0 clock source being selected by the G.781 clock selection process.')
cnsSelInpSrcFSW = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 761, 1, 1, 2, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnsSelInpSrcFSW.setReference('ITU-T standard G.781 section 5.11.2.2')
if mibBuilder.loadTexts: cnsSelInpSrcFSW.setStatus('current')
if mibBuilder.loadTexts: cnsSelInpSrcFSW.setDescription("This object indicates the forced switching flag. Forced switching, as described in G.781, is used to override the currently selected synchronization source. The 'true' value indicates the currently selected clock source is a result of the forced switching. The 'false' value indicates the currently selected clock source is not a result of forced switching.")
cnsSelInpSrcMSW = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 761, 1, 1, 2, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnsSelInpSrcMSW.setReference('ITU-T standard G.781 section 5.11.2.3')
if mibBuilder.loadTexts: cnsSelInpSrcMSW.setStatus('current')
if mibBuilder.loadTexts: cnsSelInpSrcMSW.setDescription("This object indicates the manual switching flag. The 'true' value indicates the currently selected clock source is a result of the manual switch command. The command allows a user to select a synchronization source assuming it is enabled, not locked out, not in signal fail condition, and has a QL better than DNU in QL-enabled mode. Furthermore, in QL-enabled mode, a manual switch can be performed only to a source which has the highest available QL.")
cnsInputSourceTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 761, 1, 1, 3), )
if mibBuilder.loadTexts: cnsInputSourceTable.setStatus('current')
if mibBuilder.loadTexts: cnsInputSourceTable.setDescription('T0 clock source table. This table contains a list of input sources for input T0 clock selection.')
cnsInputSourceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 761, 1, 1, 3, 1), ).setIndexNames((0, "CISCO-NETSYNC-MIB", "cnsInpSrcNetsyncIndex"))
if mibBuilder.loadTexts: cnsInputSourceEntry.setStatus('current')
if mibBuilder.loadTexts: cnsInputSourceEntry.setDescription('An entry is created in the table when a user adds a T0 clock source in the configuration. An entry is removed in the table when a user removes a T0 clock source from the configuration.')
cnsInpSrcNetsyncIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 761, 1, 1, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: cnsInpSrcNetsyncIndex.setStatus('current')
if mibBuilder.loadTexts: cnsInpSrcNetsyncIndex.setDescription('An index that uniquely represents an entry in this table. This index is assigned arbitrarily by the clock selection process and may not be persistent across reboots.')
cnsInpSrcName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 761, 1, 1, 3, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnsInpSrcName.setStatus('current')
if mibBuilder.loadTexts: cnsInpSrcName.setDescription('This object indicates the name of an input clock source configured for the T0 clock selection.')
cnsInpSrcIntfType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 761, 1, 1, 3, 1, 3), CiscoNetsyncIfType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnsInpSrcIntfType.setStatus('current')
if mibBuilder.loadTexts: cnsInpSrcIntfType.setDescription('This object indicates the type of an input clock source configured for the T0 clock selection.')
cnsInpSrcPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 761, 1, 1, 3, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnsInpSrcPriority.setReference('ITU-T standard G.781 section 5.10')
if mibBuilder.loadTexts: cnsInpSrcPriority.setStatus('current')
if mibBuilder.loadTexts: cnsInpSrcPriority.setDescription('This object indicates the priority of an input clock source configured for the T0 clock selection. A smaller value represents a higher priority.')
cnsInpSrcESMCCap = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 761, 1, 1, 3, 1, 5), CiscoNetsyncESMCCap()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnsInpSrcESMCCap.setStatus('current')
if mibBuilder.loadTexts: cnsInpSrcESMCCap.setDescription("This object indicates the ESMC capability of an input clock source configured for the T0 clock selection. This is applicable only to Synchronous Ethernet input clock source identified by cnsInpSrcIntfType 'netsyncIfTypeEthernet'.")
cnsInpSrcSSMCap = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 761, 1, 1, 3, 1, 6), CiscoNetsyncSSMCap()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnsInpSrcSSMCap.setStatus('current')
if mibBuilder.loadTexts: cnsInpSrcSSMCap.setDescription("This object indicates the SSM capability of an input clock source configured for the T0 clock selection. This is applicable only to any synchronous interface clock source except SyncE interface, which is identified by cnsInpSrcIntfType 'netsyncIfTypeEthernet'.")
cnsInpSrcQualityLevelTxCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 761, 1, 1, 3, 1, 7), CiscoNetsyncQualityLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnsInpSrcQualityLevelTxCfg.setStatus('current')
if mibBuilder.loadTexts: cnsInpSrcQualityLevelTxCfg.setDescription('This object indicates the configured transmit clock quality level of an input clock source.')
cnsInpSrcQualityLevelRxCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 761, 1, 1, 3, 1, 8), CiscoNetsyncQualityLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnsInpSrcQualityLevelRxCfg.setStatus('current')
if mibBuilder.loadTexts: cnsInpSrcQualityLevelRxCfg.setDescription('This object indicates the configured receive clock quality level of an input clock source.')
cnsInpSrcQualityLevelTx = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 761, 1, 1, 3, 1, 9), CiscoNetsyncQualityLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnsInpSrcQualityLevelTx.setStatus('current')
if mibBuilder.loadTexts: cnsInpSrcQualityLevelTx.setDescription('This object indicates the most recent clock quality level transmitted on the input clock source.')
cnsInpSrcQualityLevelRx = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 761, 1, 1, 3, 1, 10), CiscoNetsyncQualityLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnsInpSrcQualityLevelRx.setStatus('current')
if mibBuilder.loadTexts: cnsInpSrcQualityLevelRx.setDescription('This object indicates the last clock quality level received on the input clock source.')
cnsInpSrcQualityLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 761, 1, 1, 3, 1, 11), CiscoNetsyncQualityLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnsInpSrcQualityLevel.setStatus('current')
if mibBuilder.loadTexts: cnsInpSrcQualityLevel.setDescription('This object indicates the current clock quality level of the input clock source. This is the effective quality which is derived from three values: 1) most recent clock quality level received, 2) forced clock quality level (entered via configuration) 3) overridden clock quality level as a result of line protocol down, signal failure, or alarms.')
cnsInpSrcHoldoffTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 761, 1, 1, 3, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cnsInpSrcHoldoffTime.setReference('ITU-T standard G.781 section 5.8')
if mibBuilder.loadTexts: cnsInpSrcHoldoffTime.setStatus('current')
if mibBuilder.loadTexts: cnsInpSrcHoldoffTime.setDescription('This object indicates the hold-off time value of an input clock source. The hold-off time prevents short activation of signal failure is passed to the selection process. When a signal failure event is reported on a clock source, it waits the duration of the hold-off time before declaring signal failure on the clock source.')
cnsInpSrcWtrTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 761, 1, 1, 3, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setUnits('Seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cnsInpSrcWtrTime.setReference('ITU-T standard G.781 section 5.9')
if mibBuilder.loadTexts: cnsInpSrcWtrTime.setStatus('current')
if mibBuilder.loadTexts: cnsInpSrcWtrTime.setDescription('This object indicates the wait-to-restore time value of an input clock source. The wait-to-restore time ensures that a previous failed synchronization source is only again considered as available by the selection process if it is fault-free for a certain time. When a signal failure condition is cleared on a clock source, it waits the duration of the wait-to-restore time before clearing the signal failure status on the clock source.')
cnsInpSrcLockout = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 761, 1, 1, 3, 1, 14), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnsInpSrcLockout.setReference('ITU-T standard G.781 section 5.11.1')
if mibBuilder.loadTexts: cnsInpSrcLockout.setStatus('current')
if mibBuilder.loadTexts: cnsInpSrcLockout.setDescription("This object indicates whether or not the lockout command has been applied to a clock source. The 'true' value means the clock source is not considered by the selection process.")
cnsInpSrcSignalFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 761, 1, 1, 3, 1, 15), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnsInpSrcSignalFailure.setReference('ITU-T standard G.781 section 5.7')
if mibBuilder.loadTexts: cnsInpSrcSignalFailure.setStatus('current')
if mibBuilder.loadTexts: cnsInpSrcSignalFailure.setDescription('This object indicates whether or not a signal failure event is currently being reported on the input clock source.')
cnsInpSrcAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 761, 1, 1, 3, 1, 16), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnsInpSrcAlarm.setStatus('current')
if mibBuilder.loadTexts: cnsInpSrcAlarm.setDescription('This object indicates whether or not an alarm event is currently being reported on the input clock source.')
cnsInpSrcAlarmInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 761, 1, 1, 3, 1, 17), CiscoNetsyncAlarmInfo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnsInpSrcAlarmInfo.setStatus('current')
if mibBuilder.loadTexts: cnsInpSrcAlarmInfo.setDescription('This object indicates the alarm reasons of an input clock source if an alarm event is being reported on it.')
cnsInpSrcFSW = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 761, 1, 1, 3, 1, 18), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnsInpSrcFSW.setReference('ITU-T standard G.781 section 5.11.2.2')
if mibBuilder.loadTexts: cnsInpSrcFSW.setStatus('current')
if mibBuilder.loadTexts: cnsInpSrcFSW.setDescription("This object indicates the forced switching flag. Forced switching, as described in G.781, is used to override the currently selected synchronization source. The 'true' value indicates the currently selected clock source is a result of the forced switching. The 'false' value indicates the currently selected clock source is not a result of forced switching.")
cnsInpSrcMSW = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 761, 1, 1, 3, 1, 19), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnsInpSrcMSW.setReference('ITU-T standard G.781 section 5.11.2.3')
if mibBuilder.loadTexts: cnsInpSrcMSW.setStatus('current')
if mibBuilder.loadTexts: cnsInpSrcMSW.setDescription("This object indicates the manual switching flag. The 'true' value indicates the currently selected clock source is a result of the manual switching. The switch allows a user to select a synchronization source assuming it is enabled, not locked out, not in signal fail condition, and has a QL better than DNU in QL-enabled mode. A clock source is enabled when it occupies a row in cnsInputSourceTable. A clock source is not locked out when cnsInpSrcLockout contains the value 'false'. A clock source is not in signal failure condition when cnsInpSrcSignalFailure contains the value 'false'. The QL is identified in cnsInpSrcQualityLevel. In QL-enabled mode, a manual switch can be performed only to a source which has the highest available QL.")
cnsExtOutputTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 761, 1, 1, 4), )
if mibBuilder.loadTexts: cnsExtOutputTable.setStatus('current')
if mibBuilder.loadTexts: cnsExtOutputTable.setDescription('T4 external output table. This table contains a list of T4 external outputs. Each T4 external output is associated with clock source(s) to be found in cnsT4ClockSourceTable. The clock selection process considers all the available clock sources and select the T4 clock source based on the G.781 clock selection algorithm.')
cnsExtOutputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 761, 1, 1, 4, 1), ).setIndexNames((0, "CISCO-NETSYNC-MIB", "cnsExtOutListIndex"))
if mibBuilder.loadTexts: cnsExtOutputEntry.setStatus('current')
if mibBuilder.loadTexts: cnsExtOutputEntry.setDescription('An entry is created in the table when a user adds a T4 external output in the configuration. A T4 external output configured input clock sources are defined in cnsT4ClockSourceTable. An entry is removed from the table when a user removes a T4 external output from the configuration.')
cnsExtOutListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 761, 1, 1, 4, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: cnsExtOutListIndex.setStatus('current')
if mibBuilder.loadTexts: cnsExtOutListIndex.setDescription('An index that uniquely represents an entry in this table. This index is assigned arbitrarily by the clock selection process and may not be persistent across reboots.')
cnsExtOutSelNetsyncIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 761, 1, 1, 4, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnsExtOutSelNetsyncIndex.setStatus('current')
if mibBuilder.loadTexts: cnsExtOutSelNetsyncIndex.setDescription('An index that uniquely represents the selected input clock source whose information is reported by a row in cnsT4ClockSourceTable. The index lists the value of cnsT4ClkSrcNetsyncIndex, which is the input clock source of the T4 external output selected by the G.781 clock selection process.')
cnsExtOutName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 761, 1, 1, 4, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnsExtOutName.setStatus('current')
if mibBuilder.loadTexts: cnsExtOutName.setDescription('This object indicates the name of a T4 external output.')
cnsExtOutIntfType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 761, 1, 1, 4, 1, 4), CiscoNetsyncIfType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnsExtOutIntfType.setStatus('current')
if mibBuilder.loadTexts: cnsExtOutIntfType.setDescription('This object indicates the interface type of the T4 external output.')
cnsExtOutQualityLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 761, 1, 1, 4, 1, 5), CiscoNetsyncQualityLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnsExtOutQualityLevel.setStatus('current')
if mibBuilder.loadTexts: cnsExtOutQualityLevel.setDescription('This object indicates the clock quality of the T4 external output.')
cnsExtOutPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 761, 1, 1, 4, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnsExtOutPriority.setReference('ITU-T standard G.781 section 5.10')
if mibBuilder.loadTexts: cnsExtOutPriority.setStatus('current')
if mibBuilder.loadTexts: cnsExtOutPriority.setDescription('This object indicates the priority of the selected clock source for a T4 external output. A smaller value represents a higher priority.')
cnsExtOutFSW = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 761, 1, 1, 4, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnsExtOutFSW.setReference('ITU-T standard G.781 section 5.11.2.2')
if mibBuilder.loadTexts: cnsExtOutFSW.setStatus('current')
if mibBuilder.loadTexts: cnsExtOutFSW.setDescription("This object indicates the forced switching flag. Forced switching, as described in G.781, is used to override the currently selected synchronization source, The T4 selected synchronization source is identified by cnsExtOutSelNetsyncIndex, which contains the index to the clock source in cnsT4ClockSourceTable. The 'true' value indicates the currently selected T4 clock source is a result of the forced switching. The 'false' value indicates the currently selected T4 clock source is not a result of forced switching.")
cnsExtOutMSW = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 761, 1, 1, 4, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnsExtOutMSW.setReference('ITU-T standard G.781 section 5.11.2.3')
if mibBuilder.loadTexts: cnsExtOutMSW.setStatus('current')
if mibBuilder.loadTexts: cnsExtOutMSW.setDescription("This object indicates the manual switching flag. The 'true' value indicates the currently selected T4 clock source is a result of the manual switch command. The command allows a user to select a synchronization source assuming it is enabled, not locked out, not in signal fail condition, and has a QL better than DNU in QL-enabled mode. A clock source is enabled when it occupies in row in cnsT4ClockSourceTable. A clock source is not locked out when cnsT4ClkSrcLockout contains the value 'false'. A clock source is not in signal failure condition when cnsT4ClkSrcSignalFailure contains the value 'false'. The QL is identified in cnsT4ClkSrcQualityLevel. In QL-enabled mode, a manual switch can be performed only to a source which has the highest available QL.")
cnsExtOutSquelch = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 761, 1, 1, 4, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnsExtOutSquelch.setReference('ITU-T standard G.781 section 5.4.1.4')
if mibBuilder.loadTexts: cnsExtOutSquelch.setStatus('current')
if mibBuilder.loadTexts: cnsExtOutSquelch.setDescription('This object indicates whether or not a T4 external output is squelched. Squelching is a sychronization function defined to prevent transmission of a timing signal with a quality that is lower than the quality of the clock in the receiving networks element or SASE. It is also used for the prevention of timing loops.')
cnsT4ClockSourceTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 761, 1, 1, 5), )
if mibBuilder.loadTexts: cnsT4ClockSourceTable.setStatus('current')
if mibBuilder.loadTexts: cnsT4ClockSourceTable.setDescription('T4 clock source table. This table contains a list of input sources for a specific T4 external output. An entry shall be added to cnsExtOutputTable first. Then clock sources shall be added in this table for the selection process to select the appropriate T4 clock source.')
cnsT4ClockSourceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 761, 1, 1, 5, 1), ).setIndexNames((0, "CISCO-NETSYNC-MIB", "cnsExtOutListIndex"), (0, "CISCO-NETSYNC-MIB", "cnsT4ClkSrcNetsyncIndex"))
if mibBuilder.loadTexts: cnsT4ClockSourceEntry.setStatus('current')
if mibBuilder.loadTexts: cnsT4ClockSourceEntry.setDescription('An entry is created in the table when a user adds a clock source to a T4 external output in the configuration. The T4 external output is defined in the T4 external output table. An entry is removed in the table when a user removes a T4 clock source from the configuration.')
cnsT4ClkSrcNetsyncIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 761, 1, 1, 5, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: cnsT4ClkSrcNetsyncIndex.setStatus('current')
if mibBuilder.loadTexts: cnsT4ClkSrcNetsyncIndex.setDescription('An index that uniquely represents an entry in this table. This index is assigned arbitrarily by the clock selection process and may not be persistent across reboots.')
cnsT4ClkSrcName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 761, 1, 1, 5, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnsT4ClkSrcName.setStatus('current')
if mibBuilder.loadTexts: cnsT4ClkSrcName.setDescription('This object indicates the name of a input clock source configured for the T4 clock selection.')
cnsT4ClkSrcIntfType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 761, 1, 1, 5, 1, 3), CiscoNetsyncIfType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnsT4ClkSrcIntfType.setStatus('current')
if mibBuilder.loadTexts: cnsT4ClkSrcIntfType.setDescription('This object indicates the type of an input clock source configured for the T4 clock selection.')
cnsT4ClkSrcPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 761, 1, 1, 5, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnsT4ClkSrcPriority.setReference('ITU-T standard G.781 section 5.10')
if mibBuilder.loadTexts: cnsT4ClkSrcPriority.setStatus('current')
if mibBuilder.loadTexts: cnsT4ClkSrcPriority.setDescription('This object indicates the priority of an input clock source configured for the T4 clock selection. A smaller value represents a higher priority.')
cnsT4ClkSrcESMCCap = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 761, 1, 1, 5, 1, 5), CiscoNetsyncESMCCap()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnsT4ClkSrcESMCCap.setStatus('current')
if mibBuilder.loadTexts: cnsT4ClkSrcESMCCap.setDescription("This object indicates the ESMC capability of an input clock source configured for the T4 clock selection. This is applicable only to Synchronous Ethernet input clock source identified by cnsT4ClkSrcIntfType 'netsyncIfTypeEthernet'.")
cnsT4ClkSrcSSMCap = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 761, 1, 1, 5, 1, 6), CiscoNetsyncSSMCap()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnsT4ClkSrcSSMCap.setStatus('current')
if mibBuilder.loadTexts: cnsT4ClkSrcSSMCap.setDescription("This object indicates the SSM capability of an input clock source configured for the T4 clock selection. This is applicable only to any synchronous interface clock source except SyncE interface, which is identified by cnsT4ClkSrcIntfType 'netsyncIfTypeEthernet'.")
cnsT4ClkSrcQualityLevelTxCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 761, 1, 1, 5, 1, 7), CiscoNetsyncQualityLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnsT4ClkSrcQualityLevelTxCfg.setStatus('current')
if mibBuilder.loadTexts: cnsT4ClkSrcQualityLevelTxCfg.setDescription('This object indicates the configured transmit clock quality level of a T4 input clock source.')
cnsT4ClkSrcQualityLevelRxCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 761, 1, 1, 5, 1, 8), CiscoNetsyncQualityLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnsT4ClkSrcQualityLevelRxCfg.setStatus('current')
if mibBuilder.loadTexts: cnsT4ClkSrcQualityLevelRxCfg.setDescription('This object indicates the configured receive clock quality level of a T4 input clock source.')
cnsT4ClkSrcQualityLevelTx = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 761, 1, 1, 5, 1, 9), CiscoNetsyncQualityLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnsT4ClkSrcQualityLevelTx.setStatus('current')
if mibBuilder.loadTexts: cnsT4ClkSrcQualityLevelTx.setDescription('This object indicates the most recent clock quality level transmitted on the T4 input clock source.')
cnsT4ClkSrcQualityLevelRx = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 761, 1, 1, 5, 1, 10), CiscoNetsyncQualityLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnsT4ClkSrcQualityLevelRx.setStatus('current')
if mibBuilder.loadTexts: cnsT4ClkSrcQualityLevelRx.setDescription('This object indicates the last clock quality level received on the T4 input clock source.')
cnsT4ClkSrcQualityLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 761, 1, 1, 5, 1, 11), CiscoNetsyncQualityLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnsT4ClkSrcQualityLevel.setStatus('current')
if mibBuilder.loadTexts: cnsT4ClkSrcQualityLevel.setDescription('This object indicates the current clock quality level of the T4 input clock source. This is the effective quality which is derived from three values: 1) most recent clock quality level received, 2) forced clock quality level (entered via configuration) 3) overridden clock quality level as a result of line protocol down, signal failure, or alarms.')
cnsT4ClkSrcHoldoffTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 761, 1, 1, 5, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cnsT4ClkSrcHoldoffTime.setReference('ITU-T standard G.781 section 5.8')
if mibBuilder.loadTexts: cnsT4ClkSrcHoldoffTime.setStatus('current')
if mibBuilder.loadTexts: cnsT4ClkSrcHoldoffTime.setDescription('This object indicates the hold-off time value of a T4 input clock source. The hold-off time prevents short activation of signal failure is passed to the selection process. When a signal failure event is reported on a clock source, it waits the duration of the hold-off time before declaring signal failure on the clock source.')
cnsT4ClkSrcWtrTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 761, 1, 1, 5, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cnsT4ClkSrcWtrTime.setReference('ITU-T standard G.781 section 5.9')
if mibBuilder.loadTexts: cnsT4ClkSrcWtrTime.setStatus('current')
if mibBuilder.loadTexts: cnsT4ClkSrcWtrTime.setDescription('This object indicates the wait-to-restore time value of a T4 input clock source. The wait-to-restore time ensures that a previous failed synchronization source is only again considered as available by the selection process if it is fault-free for a certain time. When a signal failure condition is cleared on a clock source, it waits the duration of the wait-to-restore time before clearing the signal failure status on the clock source.')
cnsT4ClkSrcLockout = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 761, 1, 1, 5, 1, 14), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnsT4ClkSrcLockout.setReference('ITU-T standard G.781 section 5.11.1')
if mibBuilder.loadTexts: cnsT4ClkSrcLockout.setStatus('current')
if mibBuilder.loadTexts: cnsT4ClkSrcLockout.setDescription("This object indicates whether or not the lockout command has been applied on a T4 clock source. The 'true' value means the clock source is not considered by the selection process.")
cnsT4ClkSrcSignalFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 761, 1, 1, 5, 1, 15), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnsT4ClkSrcSignalFailure.setReference('ITU-T standard G.781 section 5.7')
if mibBuilder.loadTexts: cnsT4ClkSrcSignalFailure.setStatus('current')
if mibBuilder.loadTexts: cnsT4ClkSrcSignalFailure.setDescription('This object indicates whether or not a signal failure event is currently being reported on the T4 input clock source.')
cnsT4ClkSrcAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 761, 1, 1, 5, 1, 16), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnsT4ClkSrcAlarm.setStatus('current')
if mibBuilder.loadTexts: cnsT4ClkSrcAlarm.setDescription('This object indicates whether or not an alarm event is currently being reported on the T4 input clock source.')
cnsT4ClkSrcAlarmInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 761, 1, 1, 5, 1, 17), CiscoNetsyncAlarmInfo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnsT4ClkSrcAlarmInfo.setStatus('current')
if mibBuilder.loadTexts: cnsT4ClkSrcAlarmInfo.setDescription('This object indicates the alarm reasons of a T4 input clock source if an alarm event is being reported on the clock source.')
cnsT4ClkSrcFSW = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 761, 1, 1, 5, 1, 18), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnsT4ClkSrcFSW.setReference('ITU-T standard G.781 section 5.11.2.2')
if mibBuilder.loadTexts: cnsT4ClkSrcFSW.setStatus('current')
if mibBuilder.loadTexts: cnsT4ClkSrcFSW.setDescription("This object indicates the forced switching flag. Forced switching, as described in G.781, is used to override the currently selected synchronization source. The 'true' value indicates the currently selected T4 clock source is a result of the forced switching. The 'false' value indicates the currently selected T4 clock source is not a result of forced switching.")
cnsT4ClkSrcMSW = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 761, 1, 1, 5, 1, 19), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnsT4ClkSrcMSW.setReference('ITU-T standard G.781 section 5.11.2.3')
if mibBuilder.loadTexts: cnsT4ClkSrcMSW.setStatus('current')
if mibBuilder.loadTexts: cnsT4ClkSrcMSW.setDescription("This object indicates the manual switching flag. The 'true' value indicates the currently selected T4 clock source is a result of the manual switching. The switch allows a user to select a synchronization source assuming it is enabled, not locked out, not in signal fail condition, and has a QL better than DNU in QL-enabled mode. A clock source is enabled when it occupies a row in cnsT4ClockSourceTable. A clock source is not locked out when cnsT4ClkSrcLockout contains the value 'false'. A clock source is not in signal failure condition when cnsT4ClkSrcSignalFailure contains the value 'false'. The QL is identified in cnsT4ClkSrcQualityLevel. In QL-enabled mode, a manual switch can be performed only to a source which has the highest available QL.")
cnsNotifObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 761, 1, 2))
cnsInpSrcFailClear = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 761, 1, 2, 1), TruthValue()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cnsInpSrcFailClear.setStatus('current')
if mibBuilder.loadTexts: cnsInpSrcFailClear.setDescription("This object indicates the clear status of a signal failure event. A value of 'true' means a signal failure event reported on a clock source has been cleared. A value of 'false' means a signal event has been reported on a clock source.")
cnsInpSrcAlarmClear = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 761, 1, 2, 2), TruthValue()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cnsInpSrcAlarmClear.setStatus('current')
if mibBuilder.loadTexts: cnsInpSrcAlarmClear.setDescription("This object indicates the clear status of an alarm event. A value of 'true' means an alarm event reported on a clock source has been cleared. A value of 'false' means an alarm event has been reported on a clock source.")
ciscoNetsyncMIBNotifControl = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 761, 1, 3))
cnsMIBEnableStatusNotification = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 761, 1, 3, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cnsMIBEnableStatusNotification.setStatus('current')
if mibBuilder.loadTexts: cnsMIBEnableStatusNotification.setDescription('A control object to enable/disable ciscoNetsyncSelectedT0Clock, ciscoNetsyncSelectedT4Clock, ciscoNetsyncInputSignalFailureStatus, ciscoNetsyncInputAlarmStatus notifications at the system level. This object should hold any of the below values. true - The notif is enabled globally for the system false- The notif is disabled globally for the system')
ciscoNetsyncSelectedT0Clock = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 761, 0, 1)).setObjects(("CISCO-NETSYNC-MIB", "cnsSelInpSrcName"), ("CISCO-NETSYNC-MIB", "cnsSelInpSrcIntfType"), ("CISCO-NETSYNC-MIB", "cnsSelInpSrcQualityLevel"), ("CISCO-NETSYNC-MIB", "cnsSelInpSrcPriority"))
if mibBuilder.loadTexts: ciscoNetsyncSelectedT0Clock.setStatus('current')
if mibBuilder.loadTexts: ciscoNetsyncSelectedT0Clock.setDescription('T0 clock selection notification. This notification is generated when one of the following conditions is met: - A new clock source is selected by the T0 clock selection. - The clock quality of a T0 selected clock source is changed. - The configured priority of a T0 selected clock source is changed. ')
ciscoNetsyncSelectedT4Clock = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 761, 0, 2)).setObjects(("CISCO-NETSYNC-MIB", "cnsExtOutName"), ("CISCO-NETSYNC-MIB", "cnsT4ClkSrcName"), ("CISCO-NETSYNC-MIB", "cnsT4ClkSrcIntfType"), ("CISCO-NETSYNC-MIB", "cnsT4ClkSrcQualityLevel"), ("CISCO-NETSYNC-MIB", "cnsT4ClkSrcPriority"))
if mibBuilder.loadTexts: ciscoNetsyncSelectedT4Clock.setStatus('current')
if mibBuilder.loadTexts: ciscoNetsyncSelectedT4Clock.setDescription('T4 clock selection notification. This notification is generated when one of the following conditions is met: - A new clock source is selected by the T4 clock selection. - The clock quality of a T4 selected clock source is changed. - The configured priority of a T4 selected clock source is changed. ')
ciscoNetsyncInputSignalFailureStatus = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 761, 0, 3)).setObjects(("CISCO-NETSYNC-MIB", "cnsInpSrcName"), ("CISCO-NETSYNC-MIB", "cnsInpSrcIntfType"), ("CISCO-NETSYNC-MIB", "cnsInpSrcFailClear"))
if mibBuilder.loadTexts: ciscoNetsyncInputSignalFailureStatus.setStatus('current')
if mibBuilder.loadTexts: ciscoNetsyncInputSignalFailureStatus.setDescription('Input clock source signal failure notification. This notification is generated when a signal failure event is reported on an input clock source. One of the conditions a signal failure event could be due to interface shutdown.')
ciscoNetsyncInputAlarmStatus = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 761, 0, 4)).setObjects(("CISCO-NETSYNC-MIB", "cnsInpSrcName"), ("CISCO-NETSYNC-MIB", "cnsInpSrcIntfType"), ("CISCO-NETSYNC-MIB", "cnsInpSrcAlarmInfo"), ("CISCO-NETSYNC-MIB", "cnsInpSrcAlarmClear"))
if mibBuilder.loadTexts: ciscoNetsyncInputAlarmStatus.setStatus('current')
if mibBuilder.loadTexts: ciscoNetsyncInputAlarmStatus.setDescription('Input clock source alarm notification. This notification is generated when an alarm event is reported on an input clock source.')
ciscoNetsyncMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 761, 2, 1))
ciscoNetsyncMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 761, 2, 2))
ciscoNetsyncMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 761, 2, 1, 1)).setObjects(("CISCO-NETSYNC-MIB", "cnsClkSelGlobalObjectGroup"), ("CISCO-NETSYNC-MIB", "cnsSelectedInputSourceObjectGroup"), ("CISCO-NETSYNC-MIB", "cnsInputSourceObjectGroup"), ("CISCO-NETSYNC-MIB", "cnsExtOutputObjectGroup"), ("CISCO-NETSYNC-MIB", "cnsT4ClkSrcObjectGroup"), ("CISCO-NETSYNC-MIB", "ciscoNetsyncMIBNotificationGroup"), ("CISCO-NETSYNC-MIB", "cnsMIBNotifEnablesGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoNetsyncMIBCompliance = ciscoNetsyncMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: ciscoNetsyncMIBCompliance.setDescription('This is a default module-compliance containing default object groups.')
cnsClkSelGlobalObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 761, 2, 2, 1)).setObjects(("CISCO-NETSYNC-MIB", "cnsClkSelGlobProcessMode"), ("CISCO-NETSYNC-MIB", "cnsClkSelGlobClockMode"), ("CISCO-NETSYNC-MIB", "cnsClkSelGlobNetsyncEnable"), ("CISCO-NETSYNC-MIB", "cnsClkSelGlobRevertiveMode"), ("CISCO-NETSYNC-MIB", "cnsClkSelGlobESMCMode"), ("CISCO-NETSYNC-MIB", "cnsClkSelGlobEECOption"), ("CISCO-NETSYNC-MIB", "cnsClkSelGlobNetworkOption"), ("CISCO-NETSYNC-MIB", "cnsClkSelGlobHoldoffTime"), ("CISCO-NETSYNC-MIB", "cnsClkSelGlobWtrTime"), ("CISCO-NETSYNC-MIB", "cnsClkSelGlobNofSources"), ("CISCO-NETSYNC-MIB", "cnsClkSelGlobLastHoldoverSeconds"), ("CISCO-NETSYNC-MIB", "cnsClkSelGlobCurrHoldoverSeconds"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cnsClkSelGlobalObjectGroup = cnsClkSelGlobalObjectGroup.setStatus('current')
if mibBuilder.loadTexts: cnsClkSelGlobalObjectGroup.setDescription('This group contains all objects referenced by the G.781 clock selection process table.')
cnsSelectedInputSourceObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 761, 2, 2, 2)).setObjects(("CISCO-NETSYNC-MIB", "cnsSelInpSrcName"), ("CISCO-NETSYNC-MIB", "cnsSelInpSrcQualityLevel"), ("CISCO-NETSYNC-MIB", "cnsSelInpSrcTimestamp"), ("CISCO-NETSYNC-MIB", "cnsSelInpSrcFSW"), ("CISCO-NETSYNC-MIB", "cnsSelInpSrcMSW"), ("CISCO-NETSYNC-MIB", "cnsSelInpSrcIntfType"), ("CISCO-NETSYNC-MIB", "cnsSelInpSrcPriority"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cnsSelectedInputSourceObjectGroup = cnsSelectedInputSourceObjectGroup.setStatus('current')
if mibBuilder.loadTexts: cnsSelectedInputSourceObjectGroup.setDescription('This group contains all objects referenced by cnsSelectedInputSourceTable.')
cnsInputSourceObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 761, 2, 2, 3)).setObjects(("CISCO-NETSYNC-MIB", "cnsInpSrcName"), ("CISCO-NETSYNC-MIB", "cnsInpSrcIntfType"), ("CISCO-NETSYNC-MIB", "cnsInpSrcPriority"), ("CISCO-NETSYNC-MIB", "cnsInpSrcESMCCap"), ("CISCO-NETSYNC-MIB", "cnsInpSrcSSMCap"), ("CISCO-NETSYNC-MIB", "cnsInpSrcQualityLevelTxCfg"), ("CISCO-NETSYNC-MIB", "cnsInpSrcQualityLevelRxCfg"), ("CISCO-NETSYNC-MIB", "cnsInpSrcQualityLevelTx"), ("CISCO-NETSYNC-MIB", "cnsInpSrcQualityLevelRx"), ("CISCO-NETSYNC-MIB", "cnsInpSrcQualityLevel"), ("CISCO-NETSYNC-MIB", "cnsInpSrcHoldoffTime"), ("CISCO-NETSYNC-MIB", "cnsInpSrcWtrTime"), ("CISCO-NETSYNC-MIB", "cnsInpSrcLockout"), ("CISCO-NETSYNC-MIB", "cnsInpSrcSignalFailure"), ("CISCO-NETSYNC-MIB", "cnsInpSrcAlarm"), ("CISCO-NETSYNC-MIB", "cnsInpSrcAlarmInfo"), ("CISCO-NETSYNC-MIB", "cnsInpSrcFSW"), ("CISCO-NETSYNC-MIB", "cnsInpSrcMSW"), ("CISCO-NETSYNC-MIB", "cnsInpSrcAlarmClear"), ("CISCO-NETSYNC-MIB", "cnsInpSrcFailClear"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cnsInputSourceObjectGroup = cnsInputSourceObjectGroup.setStatus('current')
if mibBuilder.loadTexts: cnsInputSourceObjectGroup.setDescription('This group contains all objects referenced by cnsInputSourceTable.')
cnsExtOutputObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 761, 2, 2, 4)).setObjects(("CISCO-NETSYNC-MIB", "cnsExtOutName"), ("CISCO-NETSYNC-MIB", "cnsExtOutSelNetsyncIndex"), ("CISCO-NETSYNC-MIB", "cnsExtOutIntfType"), ("CISCO-NETSYNC-MIB", "cnsExtOutQualityLevel"), ("CISCO-NETSYNC-MIB", "cnsExtOutPriority"), ("CISCO-NETSYNC-MIB", "cnsExtOutFSW"), ("CISCO-NETSYNC-MIB", "cnsExtOutMSW"), ("CISCO-NETSYNC-MIB", "cnsExtOutSquelch"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cnsExtOutputObjectGroup = cnsExtOutputObjectGroup.setStatus('current')
if mibBuilder.loadTexts: cnsExtOutputObjectGroup.setDescription('This group contains all objects referenced by cnsExtOutputTable.')
cnsT4ClkSrcObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 761, 2, 2, 5)).setObjects(("CISCO-NETSYNC-MIB", "cnsT4ClkSrcName"), ("CISCO-NETSYNC-MIB", "cnsT4ClkSrcIntfType"), ("CISCO-NETSYNC-MIB", "cnsT4ClkSrcPriority"), ("CISCO-NETSYNC-MIB", "cnsT4ClkSrcESMCCap"), ("CISCO-NETSYNC-MIB", "cnsT4ClkSrcSSMCap"), ("CISCO-NETSYNC-MIB", "cnsT4ClkSrcQualityLevelTxCfg"), ("CISCO-NETSYNC-MIB", "cnsT4ClkSrcQualityLevelRxCfg"), ("CISCO-NETSYNC-MIB", "cnsT4ClkSrcQualityLevelTx"), ("CISCO-NETSYNC-MIB", "cnsT4ClkSrcQualityLevelRx"), ("CISCO-NETSYNC-MIB", "cnsT4ClkSrcQualityLevel"), ("CISCO-NETSYNC-MIB", "cnsT4ClkSrcHoldoffTime"), ("CISCO-NETSYNC-MIB", "cnsT4ClkSrcWtrTime"), ("CISCO-NETSYNC-MIB", "cnsT4ClkSrcLockout"), ("CISCO-NETSYNC-MIB", "cnsT4ClkSrcSignalFailure"), ("CISCO-NETSYNC-MIB", "cnsT4ClkSrcAlarm"), ("CISCO-NETSYNC-MIB", "cnsT4ClkSrcAlarmInfo"), ("CISCO-NETSYNC-MIB", "cnsT4ClkSrcFSW"), ("CISCO-NETSYNC-MIB", "cnsT4ClkSrcMSW"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cnsT4ClkSrcObjectGroup = cnsT4ClkSrcObjectGroup.setStatus('current')
if mibBuilder.loadTexts: cnsT4ClkSrcObjectGroup.setDescription('This group contains all objects referenced by cnsT4ClockSourceTable.')
cnsMIBNotifEnablesGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 761, 2, 2, 6)).setObjects(("CISCO-NETSYNC-MIB", "cnsMIBEnableStatusNotification"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cnsMIBNotifEnablesGroup = cnsMIBNotifEnablesGroup.setStatus('current')
if mibBuilder.loadTexts: cnsMIBNotifEnablesGroup.setDescription('The collection of objects which are used to enable notification. ')
ciscoNetsyncMIBNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 761, 2, 2, 7)).setObjects(("CISCO-NETSYNC-MIB", "ciscoNetsyncSelectedT0Clock"), ("CISCO-NETSYNC-MIB", "ciscoNetsyncSelectedT4Clock"), ("CISCO-NETSYNC-MIB", "ciscoNetsyncInputSignalFailureStatus"), ("CISCO-NETSYNC-MIB", "ciscoNetsyncInputAlarmStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoNetsyncMIBNotificationGroup = ciscoNetsyncMIBNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoNetsyncMIBNotificationGroup.setDescription('The is the netsync notification group.')
mibBuilder.exportSymbols("CISCO-NETSYNC-MIB", cnsClkSelGlobCurrHoldoverSeconds=cnsClkSelGlobCurrHoldoverSeconds, cnsT4ClkSrcWtrTime=cnsT4ClkSrcWtrTime, cnsInpSrcMSW=cnsInpSrcMSW, cnsClkSelGloProcIndex=cnsClkSelGloProcIndex, cnsT4ClkSrcQualityLevelTxCfg=cnsT4ClkSrcQualityLevelTxCfg, cnsInpSrcQualityLevelTx=cnsInpSrcQualityLevelTx, cnsT4ClkSrcMSW=cnsT4ClkSrcMSW, cnsInpSrcHoldoffTime=cnsInpSrcHoldoffTime, ciscoNetsyncMIBObjects=ciscoNetsyncMIBObjects, cnsExtOutSelNetsyncIndex=cnsExtOutSelNetsyncIndex, ciscoNetsyncInputSignalFailureStatus=ciscoNetsyncInputSignalFailureStatus, ciscoNetsyncMIBNotificationGroup=ciscoNetsyncMIBNotificationGroup, cnsT4ClkSrcIntfType=cnsT4ClkSrcIntfType, CiscoNetsyncESMCCap=CiscoNetsyncESMCCap, CiscoNetsyncSSMCap=CiscoNetsyncSSMCap, PYSNMP_MODULE_ID=ciscoNetsyncMIB, cnsT4ClkSrcAlarm=cnsT4ClkSrcAlarm, cnsT4ClkSrcAlarmInfo=cnsT4ClkSrcAlarmInfo, cnsT4ClkSrcESMCCap=cnsT4ClkSrcESMCCap, cnsClkSelGlobNofSources=cnsClkSelGlobNofSources, cnsT4ClkSrcQualityLevelRxCfg=cnsT4ClkSrcQualityLevelRxCfg, CiscoNetsyncNetworkOption=CiscoNetsyncNetworkOption, cnsInpSrcPriority=cnsInpSrcPriority, ciscoNetsyncMIBConform=ciscoNetsyncMIBConform, cnsClkSelGlobESMCMode=cnsClkSelGlobESMCMode, cnsSelInpSrcQualityLevel=cnsSelInpSrcQualityLevel, cnsClkSelGlobNetworkOption=cnsClkSelGlobNetworkOption, cnsT4ClkSrcPriority=cnsT4ClkSrcPriority, cnsT4ClkSrcObjectGroup=cnsT4ClkSrcObjectGroup, cnsInpSrcSSMCap=cnsInpSrcSSMCap, CiscoNetsyncQualityLevel=CiscoNetsyncQualityLevel, cnsT4ClockSourceTable=cnsT4ClockSourceTable, cnsT4ClkSrcQualityLevel=cnsT4ClkSrcQualityLevel, cnsClkSelGlobalEntry=cnsClkSelGlobalEntry, CiscoNetsyncEECOption=CiscoNetsyncEECOption, cnsSelInpSrcIntfType=cnsSelInpSrcIntfType, cnsT4ClkSrcHoldoffTime=cnsT4ClkSrcHoldoffTime, cnsT4ClkSrcSignalFailure=cnsT4ClkSrcSignalFailure, CiscoNetsyncIfType=CiscoNetsyncIfType, cnsInpSrcNetsyncIndex=cnsInpSrcNetsyncIndex, CiscoNetsyncClockMode=CiscoNetsyncClockMode, ciscoNetsyncMIBTables=ciscoNetsyncMIBTables, cnsMIBEnableStatusNotification=cnsMIBEnableStatusNotification, cnsExtOutPriority=cnsExtOutPriority, cnsInpSrcESMCCap=cnsInpSrcESMCCap, cnsInpSrcFailClear=cnsInpSrcFailClear, cnsClkSelGlobClockMode=cnsClkSelGlobClockMode, cnsT4ClkSrcQualityLevelTx=cnsT4ClkSrcQualityLevelTx, cnsInpSrcWtrTime=cnsInpSrcWtrTime, cnsSelectedInputSourceEntry=cnsSelectedInputSourceEntry, cnsInpSrcAlarm=cnsInpSrcAlarm, cnsSelectedInputSourceTable=cnsSelectedInputSourceTable, cnsSelInpSrcPriority=cnsSelInpSrcPriority, cnsInpSrcQualityLevelRx=cnsInpSrcQualityLevelRx, cnsClkSelGlobEECOption=cnsClkSelGlobEECOption, cnsInpSrcLockout=cnsInpSrcLockout, cnsT4ClkSrcNetsyncIndex=cnsT4ClkSrcNetsyncIndex, cnsT4ClockSourceEntry=cnsT4ClockSourceEntry, cnsClkSelGlobalObjectGroup=cnsClkSelGlobalObjectGroup, cnsNotifObjects=cnsNotifObjects, ciscoNetsyncMIBNotifs=ciscoNetsyncMIBNotifs, ciscoNetsyncInputAlarmStatus=ciscoNetsyncInputAlarmStatus, cnsT4ClkSrcFSW=cnsT4ClkSrcFSW, cnsInpSrcAlarmInfo=cnsInpSrcAlarmInfo, cnsExtOutFSW=cnsExtOutFSW, cnsInpSrcQualityLevelTxCfg=cnsInpSrcQualityLevelTxCfg, ciscoNetsyncSelectedT0Clock=ciscoNetsyncSelectedT0Clock, ciscoNetsyncMIBCompliances=ciscoNetsyncMIBCompliances, cnsT4ClkSrcName=cnsT4ClkSrcName, ciscoNetsyncMIB=ciscoNetsyncMIB, cnsExtOutIntfType=cnsExtOutIntfType, cnsInputSourceTable=cnsInputSourceTable, ciscoNetsyncSelectedT4Clock=ciscoNetsyncSelectedT4Clock, cnsT4ClkSrcLockout=cnsT4ClkSrcLockout, cnsInpSrcQualityLevelRxCfg=cnsInpSrcQualityLevelRxCfg, cnsExtOutListIndex=cnsExtOutListIndex, cnsClkSelGlobRevertiveMode=cnsClkSelGlobRevertiveMode, cnsClkSelGlobHoldoffTime=cnsClkSelGlobHoldoffTime, cnsClkSelGlobNetsyncEnable=cnsClkSelGlobNetsyncEnable, ciscoNetsyncMIBNotifControl=ciscoNetsyncMIBNotifControl, cnsSelInpSrcNetsyncIndex=cnsSelInpSrcNetsyncIndex, cnsSelInpSrcName=cnsSelInpSrcName, CiscoNetsyncAlarmInfo=CiscoNetsyncAlarmInfo, cnsInpSrcName=cnsInpSrcName, cnsClkSelGlobalTable=cnsClkSelGlobalTable, cnsExtOutMSW=cnsExtOutMSW, cnsSelectedInputSourceObjectGroup=cnsSelectedInputSourceObjectGroup, ciscoNetsyncMIBCompliance=ciscoNetsyncMIBCompliance, CiscoNetsyncQLMode=CiscoNetsyncQLMode, cnsSelInpSrcFSW=cnsSelInpSrcFSW, cnsInpSrcAlarmClear=cnsInpSrcAlarmClear, cnsExtOutName=cnsExtOutName, cnsMIBNotifEnablesGroup=cnsMIBNotifEnablesGroup, cnsExtOutQualityLevel=cnsExtOutQualityLevel, cnsExtOutSquelch=cnsExtOutSquelch, ciscoNetsyncMIBGroups=ciscoNetsyncMIBGroups, cnsInpSrcQualityLevel=cnsInpSrcQualityLevel, cnsInpSrcSignalFailure=cnsInpSrcSignalFailure, cnsSelInpSrcMSW=cnsSelInpSrcMSW, cnsExtOutputEntry=cnsExtOutputEntry, cnsT4ClkSrcQualityLevelRx=cnsT4ClkSrcQualityLevelRx, cnsInpSrcIntfType=cnsInpSrcIntfType, cnsT4ClkSrcSSMCap=cnsT4ClkSrcSSMCap, cnsInputSourceObjectGroup=cnsInputSourceObjectGroup, cnsInputSourceEntry=cnsInputSourceEntry, cnsSelInpSrcTimestamp=cnsSelInpSrcTimestamp, cnsClkSelGlobLastHoldoverSeconds=cnsClkSelGlobLastHoldoverSeconds, cnsClkSelGlobWtrTime=cnsClkSelGlobWtrTime, cnsInpSrcFSW=cnsInpSrcFSW, cnsExtOutputObjectGroup=cnsExtOutputObjectGroup, cnsExtOutputTable=cnsExtOutputTable, cnsClkSelGlobProcessMode=cnsClkSelGlobProcessMode)
