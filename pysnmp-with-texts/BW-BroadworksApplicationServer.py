#
# PySNMP MIB module BW-BroadworksApplicationServer (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BW-BroadworksApplicationServer
# Produced by pysmi-0.3.4 at Wed May  1 11:42:03 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
iso, NotificationType, Counter64, Gauge32, Bits, TimeTicks, IpAddress, Integer32, MibIdentifier, Unsigned32, ObjectIdentity, enterprises, Counter32, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "NotificationType", "Counter64", "Gauge32", "Bits", "TimeTicks", "IpAddress", "Integer32", "MibIdentifier", "Unsigned32", "ObjectIdentity", "enterprises", "Counter32", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DateAndTime, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "DateAndTime", "TextualConvention", "DisplayString")
broadsoft = ModuleIdentity((1, 3, 6, 1, 4, 1, 6431))
broadsoft.setRevisions(('2005-08-16 10:00', '2004-12-20 00:00', '2004-06-22 00:00', '2003-09-20 00:00', '2002-06-12 00:00', '2002-01-24 00:00', '2001-07-12 11:59', '2001-07-26 10:48', '2001-07-12 12:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: broadsoft.setRevisionsDescriptions(('Added MIB conformance section.', 'Adding release 12.0 counters.', 'Adding release 11.1 counters.', 'Adding release 10 counters.', 'Added new counters for Release 8. The BroadWorks counters were also changed from read-only to read-write. Group based service counter tables were introduced.', '', 'Added POP3 and SMTP performance measurement . Added instantConferencing module and the following performance measurements: bwICGroupPortLimitExceeded bwICNumAttempts bwICInvalidPasscode', 'Reintroduce instant conferencing statistics as service performance measurements.', 'Added POP3 and SMTP performance measurement .',))
if mibBuilder.loadTexts: broadsoft.setLastUpdated('200508161000Z')
if mibBuilder.loadTexts: broadsoft.setOrganization('Broadsoft, Inc')
if mibBuilder.loadTexts: broadsoft.setContactInfo('Broadsoft, Inc 220 Perry Parkway Gaithersburg, MD 20877 301-977-9440')
if mibBuilder.loadTexts: broadsoft.setDescription('This is the System Management Information structure for the Broadsoft enterprise.')
broadworks = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1))
executionServer = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 2))
provisioningServer = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 6))
mgcpModule = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1))
mcpModule = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 2, 3))
imsModule = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 2, 4))
databaseModule = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 2, 5))
callpModule = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 2, 7))
smtpModule = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 2, 8))
sipModule = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 2, 9))
services = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11))
mssModule = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 2, 12))
nrsModule = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 2, 13))
pmtModule = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 2, 15))
systemModule = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 2, 16))
management = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 2, 17))
redundancyModule = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 2, 18))
capModule = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 2, 19))
smdiModule = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 2, 20))
mediaModule = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 2, 21))
wspModule = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 2, 22))
realtimeAccountingModule = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 2, 23))
externalCallLogsModule = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 2, 24))
commonCommModule = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 2, 25))
tcpModule = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 2, 26))
concurrentModule = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 2, 27))
soapModule = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 2, 28))
smppModule = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 2, 29))
dnsModule = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 2, 30))
bwAsMibConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1000))
mgcpStats = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1, 1))
mcpStats = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 2, 3, 1))
imsStats = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 2, 4, 1))
callpStats = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 2, 7, 1))
smtpStats = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 2, 8, 1))
sipStats = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 2, 9, 1))
congestionManagement = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 2, 9, 2))
capStats = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 2, 19, 1))
smdiStats = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 2, 20, 1))
mediaStats = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 2, 21, 1))
wspStats = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 2, 22, 1))
realtimeAccountingStats = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 2, 23, 1))
externalCallLogsStats = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 2, 24, 1))
commonCommStats = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 2, 25, 1))
tcpStats = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 2, 26, 1))
concurrentStats = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 2, 27, 1))
soapStats = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 2, 28, 1))
smppStats = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 2, 29, 1))
dnsStats = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 2, 30, 1))
accountCodes = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 1))
anonymousCallRejection = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 2))
authentication = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 3))
autoAttendant = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 4))
callCapacity = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 5))
callForwardingAlways = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 6))
callForwardingBusy = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 7))
callForwardingNoAnswer = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 8))
callNotify = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 9))
callPark = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 10))
callPickup = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 11))
callReturn = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 12))
commPilotCallManager = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 13))
doNotDisturb = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 14))
flashCallTransfer = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 15))
flashCallWaiting = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 16))
flashConsultation = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 17))
flashThreeWayCall = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 18))
huntGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 19))
incomingCallingPlan = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 20))
ipPhone = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 21))
lastNumberRedial = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 22))
outgoingCallingPlan = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 23))
priorityAlert = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 24))
selectiveCallAcceptance = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 25))
selectiveCallForward = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 26))
selectiveCallRejection = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 27))
simRingPersonal = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 28))
voiceMessaging = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 29))
seriesCompletion = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 30))
intercept = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 31))
instantConferencing = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 32))
callingLineIDDeliveryBlock = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 33))
sessionAudit = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 34))
windowsMessaging = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 35))
callWaiting = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 36))
alternateNumbers = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 37))
cot = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 38))
sd8 = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 39))
musicOnHold = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 40))
callingNameRetrieval = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 41))
thirdPartyMWIControl = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 42))
callCenter = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 43))
callForwardGroupNoAnswer = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 44))
sd100 = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 45))
thirdPartyVMail = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 46))
directedCallPickup = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 47))
flashCallHold = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 48))
emergencyZones = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 49))
dpubi = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 50))
acb = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 51))
sequentialRing = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 52))
ringTimeout = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 53))
videoAddOn = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 54))
mct = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 55))
pushToTalk = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 56))
hoteling = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 57))
preferredCarrier = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 58))
familySimRing = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 59))
diversionInhibitor = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 60))
instantGroupCall = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 61))
automaticHoldRetrieve = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 62))
trunkGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 63))
customRingback = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 64))
physicalLocation = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 65))
faxMessaging = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 66))
externalemergencyrouting = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 67))
twoStageDialing = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 68))
callForwardingNotReachable = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 69))
mwiDeliveryToMobile = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 70))
sharedCallAppearance = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 71))
externalCustomRingback = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 72))
inCallServiceActivation = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 73))
expensiveCallNotification = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 74))
locationControl = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 75))
callRetrieve = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 76))
broadworksAnywhere = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 77))
mssStats = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 2, 12, 1))
nrsStats = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 2, 13, 1))
databaseStats = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 2, 5, 1))
pmtStats = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 2, 15, 1))
redundancyStats = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 2, 18, 1))
psDatabaseModule = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 6, 1))
psOssModule = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 6, 2))
psNSSyncModule = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 6, 3))
psOAMModule = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 6, 4))
ldapModule = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 6, 5))
cpeDevicesModule = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 6, 6))
psExternalCallLogsModule = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 6, 7))
psOciModule = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 6, 8))
psSystemModule = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 6, 9))
psCommonCommModule = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 6, 10))
psTcpModule = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 6, 11))
psConcurrentModule = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 6, 12))
psActivatableFeatureModule = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 6, 13))
psShInterfaceModule = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 6, 14))
psServices = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 6, 15))
psReservedModule = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 6, 999))
psVoiceMessaging = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 6, 15, 1))
polycomPhoneServices = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 6, 15, 2))
psDatabaseStats = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 6, 1, 1))
psOssStats = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 6, 2, 1))
psNSSyncStats = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 6, 3, 1))
psOAMStats = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 6, 4, 1))
cpeDevicesStats = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 6, 6, 1))
psExternalCallLogsStats = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 6, 7, 1))
psOciStats = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 6, 8, 1))
psInternalStats = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 6, 9, 1))
psCommonCommStats = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 6, 10, 1))
psTcpStats = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 6, 11, 1))
psConcurrentStats = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 6, 12, 1))
psActivatableFeatureStats = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 6, 13, 1))
psShInterfaceStats = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 6, 14, 1))
bwDnsQueryTimeMax = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 30, 1, 1), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwDnsQueryTimeMax.setStatus('current')
if mibBuilder.loadTexts: bwDnsQueryTimeMax.setDescription('This gauge reports the maximum query time in milliseconds.')
bwDnsQueryTimeMaxTimestampMSB = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 30, 1, 2), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwDnsQueryTimeMaxTimestampMSB.setStatus('current')
if mibBuilder.loadTexts: bwDnsQueryTimeMaxTimestampMSB.setDescription('The gauge reports the most significant part of the timestamp (4 most significant bytes) of when bwDnsQueryTimeMax was obtained.')
bwDnsQueryTimeMaxTimestampLSB = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 30, 1, 3), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwDnsQueryTimeMaxTimestampLSB.setStatus('current')
if mibBuilder.loadTexts: bwDnsQueryTimeMaxTimestampLSB.setDescription('The gauge reports the least significant part of the timestamp (4 least significant bytes) of when bwDnsQueryTimeMax was obtained.')
bwDnsQueryTimeAvg = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 30, 1, 4), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwDnsQueryTimeAvg.setStatus('current')
if mibBuilder.loadTexts: bwDnsQueryTimeAvg.setDescription('This gauge reports the average query time in milliseconds.')
bwDnsStatsQueriesTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 30, 1, 5), )
if mibBuilder.loadTexts: bwDnsStatsQueriesTable.setStatus('current')
if mibBuilder.loadTexts: bwDnsStatsQueriesTable.setDescription('This table contains DNS statistics.')
bwDnsStatsQueriesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 30, 1, 5, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwDnsStatsQueryIndex"))
if mibBuilder.loadTexts: bwDnsStatsQueriesEntry.setStatus('current')
if mibBuilder.loadTexts: bwDnsStatsQueriesEntry.setDescription('This row contains information on a particular DNS query type.')
bwDnsStatsQueryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 30, 1, 5, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwDnsStatsQueryIndex.setStatus('current')
if mibBuilder.loadTexts: bwDnsStatsQueryIndex.setDescription('This column is the index for the table.')
bwDnsStatsQueryType = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 30, 1, 5, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwDnsStatsQueryType.setStatus('current')
if mibBuilder.loadTexts: bwDnsStatsQueryType.setDescription('This column represents the DNS query type.')
bwDnsStatsQueries = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 30, 1, 5, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwDnsStatsQueries.setStatus('current')
if mibBuilder.loadTexts: bwDnsStatsQueries.setDescription('This counter reflects the number of DNS queries for a given type.')
bwDnsStatsQueryTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 30, 1, 5, 1, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwDnsStatsQueryTimeouts.setStatus('current')
if mibBuilder.loadTexts: bwDnsStatsQueryTimeouts.setDescription('This counter reflects the number of DNS queries timeouts for a given type.')
bwMGCPStatsMGCPCommandOuts = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1, 1, 1), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwMGCPStatsMGCPCommandOuts.setStatus('current')
if mibBuilder.loadTexts: bwMGCPStatsMGCPCommandOuts.setDescription('This counter reflects the number of MGCP commands sent out by BroadWorks')
bwMGCPStatsMGCPCommandIns = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1, 1, 2), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwMGCPStatsMGCPCommandIns.setStatus('current')
if mibBuilder.loadTexts: bwMGCPStatsMGCPCommandIns.setDescription('This counter reflects the total number of MGCP commands received by BroadWorks')
bwMGCPStatsMGCPResponseOuts = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwMGCPStatsMGCPResponseOuts.setStatus('current')
if mibBuilder.loadTexts: bwMGCPStatsMGCPResponseOuts.setDescription('This counter reflects the total number of MGCP responses sent by BroadWorks')
bwMGCPStatsMGCPResponseIns = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1, 1, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwMGCPStatsMGCPResponseIns.setStatus('current')
if mibBuilder.loadTexts: bwMGCPStatsMGCPResponseIns.setDescription('This counter reflects the total number of MGCP responses recevied by BroadWorks')
bwMGCPStatsAuditConnectionOuts = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1, 1, 5), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwMGCPStatsAuditConnectionOuts.setStatus('current')
if mibBuilder.loadTexts: bwMGCPStatsAuditConnectionOuts.setDescription('This counter reflects the number of Audit Connection commands sent by Broadworks')
bwMGCPStatsAuditEndpointOuts = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1, 1, 6), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwMGCPStatsAuditEndpointOuts.setStatus('current')
if mibBuilder.loadTexts: bwMGCPStatsAuditEndpointOuts.setDescription('This counter reflects the number of Audit Endpoint commands sent by BroadWorks')
bwMGCPStatsCreateConnectionOuts = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1, 1, 7), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwMGCPStatsCreateConnectionOuts.setStatus('current')
if mibBuilder.loadTexts: bwMGCPStatsCreateConnectionOuts.setDescription('This counter reflects the number of Create Connection commands sent by BroadWorks')
bwMGCPStatsDeleteAgentConnectionOuts = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1, 1, 8), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwMGCPStatsDeleteAgentConnectionOuts.setStatus('current')
if mibBuilder.loadTexts: bwMGCPStatsDeleteAgentConnectionOuts.setDescription('This counter reflects the number of Delete Agent Connections sent by BroadWorks')
bwMGCPStatsDeleteConnectionOuts = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1, 1, 9), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwMGCPStatsDeleteConnectionOuts.setStatus('current')
if mibBuilder.loadTexts: bwMGCPStatsDeleteConnectionOuts.setDescription('This counter reflects the number of Delete Connection commands sent by BroadWorks')
bwMGCPStatsDeleteGatewayConnectionIns = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1, 1, 10), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwMGCPStatsDeleteGatewayConnectionIns.setStatus('current')
if mibBuilder.loadTexts: bwMGCPStatsDeleteGatewayConnectionIns.setDescription('This counter reflects the number of Delete Gateway Connection commands received by BroadWorks')
bwMGCPStatsEndpointConfigurationOuts = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1, 1, 11), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwMGCPStatsEndpointConfigurationOuts.setStatus('current')
if mibBuilder.loadTexts: bwMGCPStatsEndpointConfigurationOuts.setDescription('This counter reflects the number of Endpoint Configuration commands sent by Broadworks')
bwMGCPStatsExtraCommandOuts = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1, 1, 12), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwMGCPStatsExtraCommandOuts.setStatus('current')
if mibBuilder.loadTexts: bwMGCPStatsExtraCommandOuts.setDescription('This counter reflects the number of Extra Commands sent by BroadWorks')
bwMGCPStatsModifyConnectionOuts = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1, 1, 13), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwMGCPStatsModifyConnectionOuts.setStatus('current')
if mibBuilder.loadTexts: bwMGCPStatsModifyConnectionOuts.setDescription('This counter reflects the number of Modify Connection commands sent by BroadWorks')
bwMGCPStatsNotificationRequestOuts = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1, 1, 14), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwMGCPStatsNotificationRequestOuts.setStatus('current')
if mibBuilder.loadTexts: bwMGCPStatsNotificationRequestOuts.setDescription('This counter reflects the number of Notification Request commands sent by BroadWorks')
bwMGCPStatsNotifyIns = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1, 1, 15), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwMGCPStatsNotifyIns.setStatus('current')
if mibBuilder.loadTexts: bwMGCPStatsNotifyIns.setDescription('This counter reflects the number of Notify commands received by BroadWorks')
bwMGCPStatsRestartInProgressIns = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1, 1, 16), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwMGCPStatsRestartInProgressIns.setStatus('current')
if mibBuilder.loadTexts: bwMGCPStatsRestartInProgressIns.setDescription('This counter reflects the number of Restarts In Progress received by BroadWorks')
bwMGCPStatsMGCPCommandResponseTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1, 1, 17), )
if mibBuilder.loadTexts: bwMGCPStatsMGCPCommandResponseTable.setStatus('current')
if mibBuilder.loadTexts: bwMGCPStatsMGCPCommandResponseTable.setDescription('This table contains the counters for all MGCP responses sent or received by BroadWorks. Each counter is a 32-Bit counter. The response code is used to index into the table. Here are all the response codes: 100, 200, 250, 400, 401, 402, 403, 404, 500, 501, 502, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531')
bwMGCPStatsMGCPCommandResponseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1, 1, 17, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwMGCPStatsMGCPCommandResponseCodeValue"))
if mibBuilder.loadTexts: bwMGCPStatsMGCPCommandResponseEntry.setStatus('current')
if mibBuilder.loadTexts: bwMGCPStatsMGCPCommandResponseEntry.setDescription('This row contains information on a particular MGCP status code received or sent in response to a MGCP command.')
bwMGCPStatsMGCPCommandResponseCodeValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1, 1, 17, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 999)))
if mibBuilder.loadTexts: bwMGCPStatsMGCPCommandResponseCodeValue.setStatus('current')
if mibBuilder.loadTexts: bwMGCPStatsMGCPCommandResponseCodeValue.setDescription('This integer represents an MGCP status code. The rest of the information in this row is related to this value.')
bwMGCPStatsMGCPCommandResponseOuts = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1, 1, 17, 1, 2), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwMGCPStatsMGCPCommandResponseOuts.setStatus('current')
if mibBuilder.loadTexts: bwMGCPStatsMGCPCommandResponseOuts.setDescription('This counter represents the number of MGCP responses sent by BroadWorks in response to an MGCP command received.')
bwMGCPStatsMGCPCommandResponseIns = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1, 1, 17, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwMGCPStatsMGCPCommandResponseIns.setStatus('current')
if mibBuilder.loadTexts: bwMGCPStatsMGCPCommandResponseIns.setDescription('This counter represents the number of MGCP responses received by BroadWorks in response to an MGCP command')
bwMGCPStatsAuditConnectionResponseTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1, 1, 18), )
if mibBuilder.loadTexts: bwMGCPStatsAuditConnectionResponseTable.setStatus('current')
if mibBuilder.loadTexts: bwMGCPStatsAuditConnectionResponseTable.setDescription('This table contains the counters for MGCP responses received by BroadWorks to an Audit Connection command sent by BroadWorks.. Each counter is a 32-Bit counter. The response code is used to index into the table. Here are all the response codes: 100, 200, 250, 400, 401, 402, 403, 404, 500, 501, 502, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531')
bwMGCPStatsAuditConnectionResponseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1, 1, 18, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwMGCPStatsAuditConnectionResponseCodeValue"))
if mibBuilder.loadTexts: bwMGCPStatsAuditConnectionResponseEntry.setStatus('current')
if mibBuilder.loadTexts: bwMGCPStatsAuditConnectionResponseEntry.setDescription('This row contains information on a particular MGCP status code received or sent in response to a MGCP command.')
bwMGCPStatsAuditConnectionResponseCodeValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1, 1, 18, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 999)))
if mibBuilder.loadTexts: bwMGCPStatsAuditConnectionResponseCodeValue.setStatus('current')
if mibBuilder.loadTexts: bwMGCPStatsAuditConnectionResponseCodeValue.setDescription('This integer represents an MGCP status code. The rest of the information in this row is related to this value.')
bwMGCPStatsAuditConnectionResponseIns = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1, 1, 18, 1, 2), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwMGCPStatsAuditConnectionResponseIns.setStatus('current')
if mibBuilder.loadTexts: bwMGCPStatsAuditConnectionResponseIns.setDescription('This counter represents the number of MGCP responses received by BroadWorks in response to an Audit Connection command sent.')
bwMGCPStatsAuditEndpointResponseTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1, 1, 19), )
if mibBuilder.loadTexts: bwMGCPStatsAuditEndpointResponseTable.setStatus('current')
if mibBuilder.loadTexts: bwMGCPStatsAuditEndpointResponseTable.setDescription('This table contains the counters for MGCP responses received by BroadWorks to an Audit Endpoint command sent by BroadWorks.. Each counter is a 32-Bit counter. The response code is used to index into the table. Here are all the response codes: 100, 200, 250, 400, 401, 402, 403, 404, 500, 501, 502, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531')
bwMGCPStatsAuditEndpointResponseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1, 1, 19, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwMGCPStatsAuditEndpointResponseCodeValue"))
if mibBuilder.loadTexts: bwMGCPStatsAuditEndpointResponseEntry.setStatus('current')
if mibBuilder.loadTexts: bwMGCPStatsAuditEndpointResponseEntry.setDescription('This row contains information on a particular MGCP status code received or sent in response to an Audit Endpoint command.')
bwMGCPStatsAuditEndpointResponseCodeValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1, 1, 19, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 999)))
if mibBuilder.loadTexts: bwMGCPStatsAuditEndpointResponseCodeValue.setStatus('current')
if mibBuilder.loadTexts: bwMGCPStatsAuditEndpointResponseCodeValue.setDescription('This integer represents an MGCP status code. The rest of the information in this row is related to this value.')
bwMGCPStatsAuditEndpointResponseIns = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1, 1, 19, 1, 2), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwMGCPStatsAuditEndpointResponseIns.setStatus('current')
if mibBuilder.loadTexts: bwMGCPStatsAuditEndpointResponseIns.setDescription('This counter represents the number of MGCP responses received by BroadWorks in response to an Audit Endpoint command sent.')
bwMGCPStatsCreateConnectionResponseTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1, 1, 20), )
if mibBuilder.loadTexts: bwMGCPStatsCreateConnectionResponseTable.setStatus('current')
if mibBuilder.loadTexts: bwMGCPStatsCreateConnectionResponseTable.setDescription('This table contains the counters for MGCP responses received by BroadWorks to an Create Connection command sent by BroadWorks.. Each counter is a 32-Bit counter. The response code is used to index into the table. Here are all the response codes: 100, 200, 250, 400, 401, 402, 403, 404, 500, 501, 502, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531')
bwMGCPStatsCreateConnectionResponseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1, 1, 20, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwMGCPStatsCreateConnectionResponseCodeValue"))
if mibBuilder.loadTexts: bwMGCPStatsCreateConnectionResponseEntry.setStatus('current')
if mibBuilder.loadTexts: bwMGCPStatsCreateConnectionResponseEntry.setDescription('This row contains information on a particular MGCP status code received or sent in response to an Create Connection command.')
bwMGCPStatsCreateConnectionResponseCodeValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1, 1, 20, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 999)))
if mibBuilder.loadTexts: bwMGCPStatsCreateConnectionResponseCodeValue.setStatus('current')
if mibBuilder.loadTexts: bwMGCPStatsCreateConnectionResponseCodeValue.setDescription('This integer represents an MGCP status code. The rest of the information in this row is related to this value.')
bwMGCPStatsCreateConnectionResponseIns = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1, 1, 20, 1, 2), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwMGCPStatsCreateConnectionResponseIns.setStatus('current')
if mibBuilder.loadTexts: bwMGCPStatsCreateConnectionResponseIns.setDescription('This counter represents the number of MGCP responses received by BroadWorks in response to an Create Connection command sent.')
bwMGCPStatsDeleteConnectionResponseTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1, 1, 21), )
if mibBuilder.loadTexts: bwMGCPStatsDeleteConnectionResponseTable.setStatus('current')
if mibBuilder.loadTexts: bwMGCPStatsDeleteConnectionResponseTable.setDescription('This table contains the counters for MGCP responses received by BroadWorks to an Create Connection command sent by BroadWorks.. Each counter is a 32-Bit counter. The response code is used to index into the table. Here are all the response codes: 100, 200, 250, 400, 401, 402, 403, 404, 500, 501, 502, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531')
bwMGCPStatsDeleteConnectionResponseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1, 1, 21, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwMGCPStatsDeleteConnectionResponseCodeValue"))
if mibBuilder.loadTexts: bwMGCPStatsDeleteConnectionResponseEntry.setStatus('current')
if mibBuilder.loadTexts: bwMGCPStatsDeleteConnectionResponseEntry.setDescription('This row contains information on a particular MGCP status code received or sent in response to an Create Connection command.')
bwMGCPStatsDeleteConnectionResponseCodeValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1, 1, 21, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 999)))
if mibBuilder.loadTexts: bwMGCPStatsDeleteConnectionResponseCodeValue.setStatus('current')
if mibBuilder.loadTexts: bwMGCPStatsDeleteConnectionResponseCodeValue.setDescription('This integer represents an MGCP status code. The rest of the information in this row is related to this value.')
bwMGCPStatsDeleteAgentConnectionResponseIns = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1, 1, 21, 1, 2), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwMGCPStatsDeleteAgentConnectionResponseIns.setStatus('current')
if mibBuilder.loadTexts: bwMGCPStatsDeleteAgentConnectionResponseIns.setDescription('This counter represents the number of MGCP responses received by BroadWorks in response to a Delete Agent Connection command sent.')
bwMGCPStatsDeleteConnectionResponseIns = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1, 1, 21, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwMGCPStatsDeleteConnectionResponseIns.setStatus('current')
if mibBuilder.loadTexts: bwMGCPStatsDeleteConnectionResponseIns.setDescription('This counter represents the number of MGCP responses received by BroadWorks in response to a Delete Connection command sent.')
bwMGCPStatsDeleteGatewayConnectionResponseOuts = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1, 1, 21, 1, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwMGCPStatsDeleteGatewayConnectionResponseOuts.setStatus('current')
if mibBuilder.loadTexts: bwMGCPStatsDeleteGatewayConnectionResponseOuts.setDescription('This counter represents the number of MGCP responses received by BroadWorks in response to a Delete Gateway Connection command sent.')
bwMGCPStatsEndpointConfigurationResponseTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1, 1, 22), )
if mibBuilder.loadTexts: bwMGCPStatsEndpointConfigurationResponseTable.setStatus('current')
if mibBuilder.loadTexts: bwMGCPStatsEndpointConfigurationResponseTable.setDescription('This table contains the counters for MGCP responses received by BroadWorks to an Endpoint Configuration command sent by BroadWorks.. Each counter is a 32-Bit counter. The response code is used to index into the table. Here are all the response codes: 100, 200, 250, 400, 401, 402, 403, 404, 500, 501, 502, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531')
bwMGCPStatsEndpointConfigurationResponseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1, 1, 22, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwMGCPStatsEndpointConfigurationResponseCodeValue"))
if mibBuilder.loadTexts: bwMGCPStatsEndpointConfigurationResponseEntry.setStatus('current')
if mibBuilder.loadTexts: bwMGCPStatsEndpointConfigurationResponseEntry.setDescription('This row contains information on a particular MGCP status code received or sent in response to an Endpoint Configuration command.')
bwMGCPStatsEndpointConfigurationResponseCodeValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1, 1, 22, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 999)))
if mibBuilder.loadTexts: bwMGCPStatsEndpointConfigurationResponseCodeValue.setStatus('current')
if mibBuilder.loadTexts: bwMGCPStatsEndpointConfigurationResponseCodeValue.setDescription('This integer represents an MGCP status code. The rest of the information in this row is related to this value.')
bwMGCPStatsEndpointConfigurationResponseIns = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1, 1, 22, 1, 2), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwMGCPStatsEndpointConfigurationResponseIns.setStatus('current')
if mibBuilder.loadTexts: bwMGCPStatsEndpointConfigurationResponseIns.setDescription('This counter represents the number of MGCP responses received by BroadWorks in response to an Endpoint Configuration command sent.')
bwMGCPStatsExtraCommandResponseTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1, 1, 23), )
if mibBuilder.loadTexts: bwMGCPStatsExtraCommandResponseTable.setStatus('current')
if mibBuilder.loadTexts: bwMGCPStatsExtraCommandResponseTable.setDescription('This table contains the counters for MGCP responses received by BroadWorks to an Extra Command command sent by BroadWorks.. Each counter is a 32-Bit counter. The response code is used to index into the table. Here are all the response codes: 100, 200, 250, 400, 401, 402, 403, 404, 500, 501, 502, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531')
bwMGCPStatsExtraCommandResponseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1, 1, 23, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwMGCPStatsExtraCommandResponseCodeValue"))
if mibBuilder.loadTexts: bwMGCPStatsExtraCommandResponseEntry.setStatus('current')
if mibBuilder.loadTexts: bwMGCPStatsExtraCommandResponseEntry.setDescription('This row contains information on a particular MGCP status code received or sent in response to an Extra Command command.')
bwMGCPStatsExtraCommandResponseCodeValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1, 1, 23, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 999)))
if mibBuilder.loadTexts: bwMGCPStatsExtraCommandResponseCodeValue.setStatus('current')
if mibBuilder.loadTexts: bwMGCPStatsExtraCommandResponseCodeValue.setDescription('This integer represents an MGCP status code. The rest of the information in this row is related to this value.')
bwMGCPStatsExtraCommandResponseIns = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1, 1, 23, 1, 2), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwMGCPStatsExtraCommandResponseIns.setStatus('current')
if mibBuilder.loadTexts: bwMGCPStatsExtraCommandResponseIns.setDescription('This counter represents the number of MGCP responses received by BroadWorks in response to an Extra Command command sent.')
bwMGCPStatsModifyConnectionResponseTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1, 1, 24), )
if mibBuilder.loadTexts: bwMGCPStatsModifyConnectionResponseTable.setStatus('current')
if mibBuilder.loadTexts: bwMGCPStatsModifyConnectionResponseTable.setDescription('This table contains the counters for MGCP responses received by BroadWorks to a Modify Connection command sent by BroadWorks.. Each counter is a 32-Bit counter. The response code is used to index into the table. Here are all the response codes: 100, 200, 250, 400, 401, 402, 403, 404, 500, 501, 502, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531')
bwMGCPStatsModifyConnectionResponseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1, 1, 24, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwMGCPStatsModifyConnectionResponseCodeValue"))
if mibBuilder.loadTexts: bwMGCPStatsModifyConnectionResponseEntry.setStatus('current')
if mibBuilder.loadTexts: bwMGCPStatsModifyConnectionResponseEntry.setDescription('This row contains information on a particular MGCP status code received or sent in response to a Modify Connection command.')
bwMGCPStatsModifyConnectionResponseCodeValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1, 1, 24, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 999)))
if mibBuilder.loadTexts: bwMGCPStatsModifyConnectionResponseCodeValue.setStatus('current')
if mibBuilder.loadTexts: bwMGCPStatsModifyConnectionResponseCodeValue.setDescription('This integer represents an MGCP status code. The rest of the information in this row is related to this value.')
bwMGCPStatsModifyConnectionResponseIns = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1, 1, 24, 1, 2), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwMGCPStatsModifyConnectionResponseIns.setStatus('current')
if mibBuilder.loadTexts: bwMGCPStatsModifyConnectionResponseIns.setDescription('This counter represents the number of MGCP responses received by BroadWorks in response to a Modify Connection command sent.')
bwMGCPStatsNotificationRequestResponseTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1, 1, 25), )
if mibBuilder.loadTexts: bwMGCPStatsNotificationRequestResponseTable.setStatus('current')
if mibBuilder.loadTexts: bwMGCPStatsNotificationRequestResponseTable.setDescription('This table contains the counters for MGCP responses received by BroadWorks to a Notification Request command sent by BroadWorks.. Each counter is a 32-Bit counter. The response code is used to index into the table. Here are all the response codes: 100, 200, 250, 400, 401, 402, 403, 404, 500, 501, 502, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531')
bwMGCPStatsNotificationRequestResponseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1, 1, 25, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwMGCPStatsNotificationRequestResponseCodeValue"))
if mibBuilder.loadTexts: bwMGCPStatsNotificationRequestResponseEntry.setStatus('current')
if mibBuilder.loadTexts: bwMGCPStatsNotificationRequestResponseEntry.setDescription('This row contains information on a particular MGCP status code received or sent in response to a Notification Request command.')
bwMGCPStatsNotificationRequestResponseCodeValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1, 1, 25, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 999)))
if mibBuilder.loadTexts: bwMGCPStatsNotificationRequestResponseCodeValue.setStatus('current')
if mibBuilder.loadTexts: bwMGCPStatsNotificationRequestResponseCodeValue.setDescription('This integer represents an MGCP status code. The rest of the information in this row is related to this value.')
bwMGCPStatsNotificationRequestResponseIns = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1, 1, 25, 1, 2), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwMGCPStatsNotificationRequestResponseIns.setStatus('current')
if mibBuilder.loadTexts: bwMGCPStatsNotificationRequestResponseIns.setDescription('This counter represents the number of MGCP responses received by BroadWorks in response to a Notification Request command sent.')
bwMGCPStatsNotifyResponseTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1, 1, 26), )
if mibBuilder.loadTexts: bwMGCPStatsNotifyResponseTable.setStatus('current')
if mibBuilder.loadTexts: bwMGCPStatsNotifyResponseTable.setDescription('This table contains the counters for MGCP responses sent by BroadWorks to a Notify command received by BroadWorks.. Each counter is a 32-Bit counter. The response code is used to index into the table. Here are all the response codes: 100, 200, 250, 400, 401, 402, 403, 404, 500, 501, 502, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531')
bwMGCPStatsNotifyResponseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1, 1, 26, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwMGCPStatsNotifyResponseCodeValue"))
if mibBuilder.loadTexts: bwMGCPStatsNotifyResponseEntry.setStatus('current')
if mibBuilder.loadTexts: bwMGCPStatsNotifyResponseEntry.setDescription('This row contains information on a particular MGCP status code sent in response to a Notify command.')
bwMGCPStatsNotifyResponseCodeValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1, 1, 26, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 999)))
if mibBuilder.loadTexts: bwMGCPStatsNotifyResponseCodeValue.setStatus('current')
if mibBuilder.loadTexts: bwMGCPStatsNotifyResponseCodeValue.setDescription('This integer represents an MGCP status code. The rest of the information in this row is related to this value.')
bwMGCPStatsNotifyResponseOuts = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1, 1, 26, 1, 2), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwMGCPStatsNotifyResponseOuts.setStatus('current')
if mibBuilder.loadTexts: bwMGCPStatsNotifyResponseOuts.setDescription('This counter represents the number of MGCP responses sent by BroadWorks in response to a Notify command received.')
bwMGCPStatsRestartInProgressResponseTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1, 1, 27), )
if mibBuilder.loadTexts: bwMGCPStatsRestartInProgressResponseTable.setStatus('current')
if mibBuilder.loadTexts: bwMGCPStatsRestartInProgressResponseTable.setDescription('This table contains the counters for MGCP responses sent by BroadWorks to a Restart In Progress command received by BroadWorks.. Each counter is a 32-Bit counter. The response code is used to index into the table. Here are all the response codes: 100, 200, 250, 400, 401, 402, 403, 404, 500, 501, 502, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531')
bwMGCPStatsRestartInProgressResponseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1, 1, 27, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwMGCPStatsRestartInProgressResponseCodeValue"))
if mibBuilder.loadTexts: bwMGCPStatsRestartInProgressResponseEntry.setStatus('current')
if mibBuilder.loadTexts: bwMGCPStatsRestartInProgressResponseEntry.setDescription('This row contains information on a particular MGCP status code sent in response to a Restart In Progress command.')
bwMGCPStatsRestartInProgressResponseCodeValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1, 1, 27, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 999)))
if mibBuilder.loadTexts: bwMGCPStatsRestartInProgressResponseCodeValue.setStatus('current')
if mibBuilder.loadTexts: bwMGCPStatsRestartInProgressResponseCodeValue.setDescription('This integer represents an MGCP status code. The rest of the information in this row is related to this value.')
bwMGCPStatsRestartInProgressResponseOuts = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1, 1, 27, 1, 2), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwMGCPStatsRestartInProgressResponseOuts.setStatus('current')
if mibBuilder.loadTexts: bwMGCPStatsRestartInProgressResponseOuts.setDescription('This counter represents the number of MGCP responses sent by BroadWorks in response to a Restart In Progress command received.')
bwMGCPStatsDialToneDelay = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1, 1, 28), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwMGCPStatsDialToneDelay.setStatus('current')
if mibBuilder.loadTexts: bwMGCPStatsDialToneDelay.setDescription('This gauge measures the average time (in milliseconds) between receipt of NTFY indicating off-hook and transmission of RQNT indicating dial-tone and request for digits')
bwMGCPStatsMinDialToneDelay = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1, 1, 29), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwMGCPStatsMinDialToneDelay.setStatus('current')
if mibBuilder.loadTexts: bwMGCPStatsMinDialToneDelay.setDescription('This measures the shortest MGCP dial-tone delay sampled since the system was started or since this measurement was cleared')
bwMGCPStatsMaxDialToneDelay = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1, 1, 30), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwMGCPStatsMaxDialToneDelay.setStatus('current')
if mibBuilder.loadTexts: bwMGCPStatsMaxDialToneDelay.setDescription('This measures the longest MGCP dial-tone delay sampled since the system was started or since this measurement was cleared')
bwMGCPStatsSetupSignalDelay = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1, 1, 31), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwMGCPStatsSetupSignalDelay.setStatus('current')
if mibBuilder.loadTexts: bwMGCPStatsSetupSignalDelay.setDescription('This gauge is applicable to MGCP originated calls. It measures the average time (in milliseconds) it takes between the receipt of a NTFY message with digits dialed for the origination of a new call and the transmission of an INVITE (Sip terminator), RQNT (MGCP terminator with in-band ringback), or CRCX (MGCP terminator without in-band ringback) to the primary device of the original called party (in the case of intra-group call) or to the network element of the original called party (in the case of a call to the PSTN). Delays incurred by a dip to the Network Server are removed from the measurement. This measurement is intended to reflect internal queuing, scheduling, and processing delays. The same clarifications as for bwSipStatsSetupSignalDelay apply to bwMGCPStatsSetupSignalDelay')
bwMGCPStatsMinSetupSignalDelay = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1, 1, 32), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwMGCPStatsMinSetupSignalDelay.setStatus('current')
if mibBuilder.loadTexts: bwMGCPStatsMinSetupSignalDelay.setDescription('This measures the shortest MGCP setup-signal delay sampled since the system was started or since this measurement was cleared')
bwMGCPStatsMaxSetupSignalDelay = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1, 1, 33), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwMGCPStatsMaxSetupSignalDelay.setStatus('current')
if mibBuilder.loadTexts: bwMGCPStatsMaxSetupSignalDelay.setDescription('This measures the shortest MGCP setup-signal delay sampled since the system was started or since this measurement was cleared')
bwMGCPStatsAnswerSignalDelay = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1, 1, 34), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwMGCPStatsAnswerSignalDelay.setStatus('current')
if mibBuilder.loadTexts: bwMGCPStatsAnswerSignalDelay.setDescription('This gauge measures the average time (in milliseconds) between the receipt of a 200 OK message indicating answer or a NTFY off-hook indicating answer and the transmission of a MDCX indicating answer to the originator. This measurement is intended to reflect internal queuing, scheduling, and processing delays. This gauge is applicable to only the MGCP originated calls for which the setup-signal delay is measured. Answer signal delay is not measured when the call has been forwarded, redirected, or when the call has encountered route advancing.')
bwMGCPStatsMinAnswerSignalDelay = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1, 1, 35), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwMGCPStatsMinAnswerSignalDelay.setStatus('current')
if mibBuilder.loadTexts: bwMGCPStatsMinAnswerSignalDelay.setDescription('This measures the shortest MGCP answer-signal delay sampled since the system was started or since this measurement was cleared.')
bwMGCPStatsMaxAnswerSignalDelay = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1, 1, 36), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwMGCPStatsMaxAnswerSignalDelay.setStatus('current')
if mibBuilder.loadTexts: bwMGCPStatsMaxAnswerSignalDelay.setDescription('This measures the longest MGCP answer-signal delay sampled since the system was started or since this measurement was cleared.')
bwMGCPStatsMessageRetryPercentage = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1, 1, 37), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwMGCPStatsMessageRetryPercentage.setStatus('current')
if mibBuilder.loadTexts: bwMGCPStatsMessageRetryPercentage.setDescription('This gauge measures the percentage of MGCP requests sent due to retry. Of up to the last 100 requests sent, this gauge calculates the percentage sent due to retransmission (i.e. - gauge = MGCP request retransmissions / (MGCP request initial transmissions + MGCP request retransmissions).')
bwMCPCommandsTransmitted = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 3, 1, 1), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwMCPCommandsTransmitted.setStatus('obsolete')
if mibBuilder.loadTexts: bwMCPCommandsTransmitted.setDescription('Incremented each time an MCP command is transmitted. This object is obsolete. The MCP interface is no longer used by the Application Server.')
bwMCPCommandsRetransmitted = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 3, 1, 2), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwMCPCommandsRetransmitted.setStatus('obsolete')
if mibBuilder.loadTexts: bwMCPCommandsRetransmitted.setDescription('Incremented each time an MCP command is re-transmitted. This object is obsolete. The MCP interface is no longer used by the Application Server.')
bwMCPNotificationsReceived = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 3, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwMCPNotificationsReceived.setStatus('obsolete')
if mibBuilder.loadTexts: bwMCPNotificationsReceived.setDescription('Incremented each time an MCP notification is received This object is obsolete. The MCP interface is no longer used by the Application Server.')
bwMCPResourceAllocAttempts = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 3, 1, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwMCPResourceAllocAttempts.setStatus('obsolete')
if mibBuilder.loadTexts: bwMCPResourceAllocAttempts.setDescription('A resource allocation request is defined as an application layer request for a Media Server resource request (i.e. IVR connection, bridge). This counter is incremented by the MCP protocol layer upon receipt of the resource allocation request from the application layer (i.e. prior transmission of any MCP resource allocation Command) This object is obsolete. The MCP interface is no longer used by the Application Server.')
bwMCPResourceAllocFailures = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 3, 1, 5), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwMCPResourceAllocFailures.setStatus('obsolete')
if mibBuilder.loadTexts: bwMCPResourceAllocFailures.setDescription('A resource allocation request is defined as an application layer request for a Media Server resource request (i.e. \x13 IVR connection, bridge). This counter is incremented by the MCP protocol layer when resource allocation Commands have been transmitted toward all available Media Servers and no resource on any Media Server was allocated. This object is obsolete. The MCP interface is no longer used by the Application Server.')
bwIMSSuccessfulConnectionAttempts = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 4, 1, 1), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwIMSSuccessfulConnectionAttempts.setStatus('current')
if mibBuilder.loadTexts: bwIMSSuccessfulConnectionAttempts.setDescription('This counter reflects the number of successful connection to incoming mail server.')
bwIMSUnsuccessfulConnectionAttempts = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 4, 1, 2), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwIMSUnsuccessfulConnectionAttempts.setStatus('current')
if mibBuilder.loadTexts: bwIMSUnsuccessfulConnectionAttempts.setDescription('This counter reflects the total number of unsuccessful connection to incoming mail server.')
bwIMSSuccessfulDownLoadAttempts = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 4, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwIMSSuccessfulDownLoadAttempts.setStatus('current')
if mibBuilder.loadTexts: bwIMSSuccessfulDownLoadAttempts.setDescription('This counter reflects the number of messages downloaded from incoming mail server.')
bwIMSUnsuccessfulDownLoadAttempts = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 4, 1, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwIMSUnsuccessfulDownLoadAttempts.setStatus('current')
if mibBuilder.loadTexts: bwIMSUnsuccessfulDownLoadAttempts.setDescription('This counter reflects the number of unsuccessful message download attempted on incoming mail server.')
bwIMSMaxSessions = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 4, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwIMSMaxSessions.setStatus('current')
if mibBuilder.loadTexts: bwIMSMaxSessions.setDescription('Maximum number of incoming mail server sessions simultaneously active since the system was started. A session is defined as a complete dialog between the execution server and the incoming mail server, and includes elements such as mailbox information requests, message download requests, and idle time.')
bwIMSAvgSessions = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 4, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwIMSAvgSessions.setStatus('current')
if mibBuilder.loadTexts: bwIMSAvgSessions.setDescription('Average number of incoming mail server sessions simultaneously active, based on a rolling average over the last 100 sessions. Each data point is computed right after the creation of a session. A session is defined as a complete dialog between the execution server and the incoming mail server, and includes elements such as mailbox information requests, message download requests, and idle time.')
bwIMSMaxThreads = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 4, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwIMSMaxThreads.setStatus('current')
if mibBuilder.loadTexts: bwIMSMaxThreads.setDescription('Maximum number of incoming mail server threads simultaneously active since the system was started. IMS threads are used when a session actively communicates with an IMS, and waits for a response. A session does not use an IMS thread while it is idle, e.g. prompting or waiting for user input.')
bwIMSAvgThreads = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 4, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwIMSAvgThreads.setStatus('current')
if mibBuilder.loadTexts: bwIMSAvgThreads.setDescription('Average number of incoming mail server threads simultaneously active, based on a rolling average over the last 100 sessions. Each data point is computed right after the creation of a session. IMS threads are used when a session actively communicates with an IMS, and waits for a response. A session does not use an IMS thread while it is idle, e.g. prompting or waiting for user input.')
bwIMSMaxServiceTime = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 4, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwIMSMaxServiceTime.setStatus('current')
if mibBuilder.loadTexts: bwIMSMaxServiceTime.setDescription('Maximum time in milliseconds required to process an incoming mail server request, since the system was started. This service time includes any queuing time if applicable. This time also includes the time required by the IMS to respond to a request such as a mailbox information request, or a message download request.')
bwIMSAvgServiceTime = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 4, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwIMSAvgServiceTime.setStatus('current')
if mibBuilder.loadTexts: bwIMSAvgServiceTime.setDescription('Average time in milliseconds required to process an incoming mail server request, based on a rolling average over the last 100 requests. This service time includes any queuing time if applicable. This time also includes the time required by the IMS to respond to a request such as a mailbox information request, or a message download request.')
bwIMSNumKeepAlive = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 4, 1, 11), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwIMSNumKeepAlive.setStatus('current')
if mibBuilder.loadTexts: bwIMSNumKeepAlive.setDescription('Number of times a keep-alive message was sent to an incoming mail server. Such a keep-alive message is sent when an IMS session lasts several minutes.')
bwIMSNumDroppedRequests = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 4, 1, 12), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwIMSNumDroppedRequests.setStatus('current')
if mibBuilder.loadTexts: bwIMSNumDroppedRequests.setDescription('Number of incoming mail server requests dropped because the number of IMS threads was too low, and the queue was full. Note that a single session can make several requests to the IMS.')
bwCAPStatsRegisterRequests = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 19, 1, 1), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCAPStatsRegisterRequests.setStatus('current')
if mibBuilder.loadTexts: bwCAPStatsRegisterRequests.setDescription('This counter reflects the number of CAP registerRequest messages that have been received by the system.')
bwCAPStatsUnRegistersIn = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 19, 1, 2), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCAPStatsUnRegistersIn.setStatus('current')
if mibBuilder.loadTexts: bwCAPStatsUnRegistersIn.setDescription('This counter reflects the number of CAP unRegister messages that have been received by the system.')
bwCAPStatsUnRegistersOut = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 19, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCAPStatsUnRegistersOut.setStatus('current')
if mibBuilder.loadTexts: bwCAPStatsUnRegistersOut.setDescription('This counter reflects the number of CAP unRegister messages that have been sent out by the system.')
bwCAPStatsSessionUpdatesOut = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 19, 1, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCAPStatsSessionUpdatesOut.setStatus('current')
if mibBuilder.loadTexts: bwCAPStatsSessionUpdatesOut.setDescription('This counter reflects the number of CAP sessionUpdate messages that have been sent out by the system.')
bwCAPStatsProfileUpdatesOut = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 19, 1, 5), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCAPStatsProfileUpdatesOut.setStatus('current')
if mibBuilder.loadTexts: bwCAPStatsProfileUpdatesOut.setDescription('This counter reflects the number of CAP profileUpdate messages that have been sent out by the system.')
bwCAPStatsCallUpdatesOut = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 19, 1, 6), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCAPStatsCallUpdatesOut.setStatus('current')
if mibBuilder.loadTexts: bwCAPStatsCallUpdatesOut.setDescription('ThisThis counter reflects the number of CAP callUpdate messages that have been sent out by the system.')
bwCAPStatsCallActionsIn = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 19, 1, 7), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCAPStatsCallActionsIn.setStatus('current')
if mibBuilder.loadTexts: bwCAPStatsCallActionsIn.setDescription('This counter reflects the number of CAP callAction messages that have been received by the system.')
bwCAPStatsAcknowledgementsIn = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 19, 1, 8), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCAPStatsAcknowledgementsIn.setStatus('current')
if mibBuilder.loadTexts: bwCAPStatsAcknowledgementsIn.setDescription('This counter reflects the number of CAP acknowledgement messages that have been received by the system.')
bwCAPStatsAcknowledgementsOut = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 19, 1, 9), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCAPStatsAcknowledgementsOut.setStatus('obsolete')
if mibBuilder.loadTexts: bwCAPStatsAcknowledgementsOut.setDescription('This counter could not be incremented anymore. It is now obsolete.')
bwCAPStatsAclViolations = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 19, 1, 10), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCAPStatsAclViolations.setStatus('current')
if mibBuilder.loadTexts: bwCAPStatsAclViolations.setDescription('This counter reflects the number of incoming CAP connections that have been rejected because the connecting machine is not in the CAP access control list. This counter causes an alarm to be generated when its threshold value is reached.')
bwCAPStatsUnsuccessfulRegisterResponses = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 19, 1, 11), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCAPStatsUnsuccessfulRegisterResponses.setStatus('current')
if mibBuilder.loadTexts: bwCAPStatsUnsuccessfulRegisterResponses.setDescription('This counter reflects the number of unsuccessful CAP registerResponse messages that the system sends out. This counter causes an alarm to be generated when its threshold value is reached.')
bwCAPStatsRegisterResponsesTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 19, 1, 12), )
if mibBuilder.loadTexts: bwCAPStatsRegisterResponsesTable.setStatus('current')
if mibBuilder.loadTexts: bwCAPStatsRegisterResponsesTable.setDescription('This table contains counters for the different types of CAP registerResponse messages sent by the system in response to a received CAP registerRequest message. The following are the various types of registerResponse messages and an index value identifying each type: 1 - successful registerResponse, 2 - unsuccessful registerResponse (unknown user id), 3 - unsuccessful registerResponse (incorrect user credentials), 4 - unsuccessful registerResponse (feature unauthorized).')
bwCAPStatsCallControlInfosOut = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 19, 1, 13), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCAPStatsCallControlInfosOut.setStatus('current')
if mibBuilder.loadTexts: bwCAPStatsCallControlInfosOut.setDescription('This counter is incremented whenever a CAP callControlInfo message is sent out by the system')
bwCAPStatsRegisterAuthentications = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 19, 1, 14), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCAPStatsRegisterAuthentications.setStatus('current')
if mibBuilder.loadTexts: bwCAPStatsRegisterAuthentications.setDescription('This counter is incremented whenever the Execution Server receives a registerAuthentication CAP message')
bwCAPStatsResponseAuthentications = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 19, 1, 15), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCAPStatsResponseAuthentications.setStatus('current')
if mibBuilder.loadTexts: bwCAPStatsResponseAuthentications.setDescription('This counter is incremented whenever the Execution Server receives a responseAuthentication CAP message')
bwCAPStatsInfoRequests = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 19, 1, 16), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCAPStatsInfoRequests.setStatus('current')
if mibBuilder.loadTexts: bwCAPStatsInfoRequests.setDescription('This counter is incremented whenever the Execution Server receives a infoRequest CAP message')
bwCAPStatsInfoResponses = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 19, 1, 17), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCAPStatsInfoResponses.setStatus('current')
if mibBuilder.loadTexts: bwCAPStatsInfoResponses.setDescription('This counter is incremented whenever the Execution Server receives a infoResponse CAP message')
bwCAPStatsExternalNotifies = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 19, 1, 18), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCAPStatsExternalNotifies.setStatus('current')
if mibBuilder.loadTexts: bwCAPStatsExternalNotifies.setDescription('This counter is incremented whenever the Execution Server receives a externalNotify CAP message')
bwCAPMonitoringUsersRequests = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 19, 1, 19), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCAPMonitoringUsersRequests.setStatus('current')
if mibBuilder.loadTexts: bwCAPMonitoringUsersRequests.setDescription('The number of monitoringUsersRequest CAP messages received.')
bwCAPMonitoringUsersResponses = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 19, 1, 20), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCAPMonitoringUsersResponses.setStatus('current')
if mibBuilder.loadTexts: bwCAPMonitoringUsersResponses.setDescription('The number of monitoringUsersResponse CAP messages sent.')
bwCAPStatsQueueUpdatesOut = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 19, 1, 21), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCAPStatsQueueUpdatesOut.setStatus('current')
if mibBuilder.loadTexts: bwCAPStatsQueueUpdatesOut.setDescription('This counter reflects the number of CAP queueUpdate messages that have been sent out by the system.')
bwCAPStatsQueueActionsIn = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 19, 1, 22), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCAPStatsQueueActionsIn.setStatus('current')
if mibBuilder.loadTexts: bwCAPStatsQueueActionsIn.setDescription('This counter reflects the number of CAP queueAction messages that have been received by the system.')
bwCAPStatsDatagramsIn = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 19, 1, 23), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCAPStatsDatagramsIn.setStatus('current')
if mibBuilder.loadTexts: bwCAPStatsDatagramsIn.setDescription('This counter reflects the number of CAP datagram commands that have been received by the system.')
bwCAPStatsDatagramsOut = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 19, 1, 24), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCAPStatsDatagramsOut.setStatus('current')
if mibBuilder.loadTexts: bwCAPStatsDatagramsOut.setDescription('This counter reflects the number of CAP datagram commands that have been sent by the system.')
bwCAPStatsTotalMsgs = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 19, 1, 25), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCAPStatsTotalMsgs.setStatus('current')
if mibBuilder.loadTexts: bwCAPStatsTotalMsgs.setDescription('This counter cumulates the total number of CAP messages that have been handled by the system.')
bwCAPStatsRegisterResponsesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 19, 1, 12, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwCAPStatsRegisterResponsesType"))
if mibBuilder.loadTexts: bwCAPStatsRegisterResponsesEntry.setStatus('current')
if mibBuilder.loadTexts: bwCAPStatsRegisterResponsesEntry.setDescription('This row contains information on a particular CAP registerResponse type sent out by the system.')
bwCAPStatsRegisterResponsesType = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 19, 1, 12, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwCAPStatsRegisterResponsesType.setStatus('current')
if mibBuilder.loadTexts: bwCAPStatsRegisterResponsesType.setDescription('This integer represents a registerResponse type. This is also the index into the table.')
bwCAPStatsRegisterResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 19, 1, 12, 1, 2), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCAPStatsRegisterResponses.setStatus('current')
if mibBuilder.loadTexts: bwCAPStatsRegisterResponses.setDescription('This counter reflects the number of CAP registerResponse messages that have been sent out by the system.')
bwSmdiNbOfActiveConnection = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 20, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwSmdiNbOfActiveConnection.setStatus('current')
if mibBuilder.loadTexts: bwSmdiNbOfActiveConnection.setDescription('Counts the total number of currently active Terminal Server SMDI connections.')
bwSmdiNbOfOpenedConnection = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 20, 1, 2), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSmdiNbOfOpenedConnection.setStatus('current')
if mibBuilder.loadTexts: bwSmdiNbOfOpenedConnection.setDescription('This counter gives the total number of SMDI connections that were opened since the last reboot of the system or reset of the PMs.')
bwSmdiIncomingMWIActivationRequests = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 20, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSmdiIncomingMWIActivationRequests.setStatus('current')
if mibBuilder.loadTexts: bwSmdiIncomingMWIActivationRequests.setDescription('This counter reflects the number of SMDI MWI activation requests that were received and processed by the server.')
bwSmdiIncomingMWIDesactivationRequests = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 20, 1, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSmdiIncomingMWIDesactivationRequests.setStatus('current')
if mibBuilder.loadTexts: bwSmdiIncomingMWIDesactivationRequests.setDescription('This counter reflects the number of SMDI MWI desactivation requests that were received and processed by the server.')
bwSmdiInvalidRequestsReceived = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 20, 1, 5), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSmdiInvalidRequestsReceived.setStatus('current')
if mibBuilder.loadTexts: bwSmdiInvalidRequestsReceived.setDescription('This counter reflects the number of invalid SMDI requests.')
bwSmdiBlockResponsesSent = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 20, 1, 6), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSmdiBlockResponsesSent.setStatus('current')
if mibBuilder.loadTexts: bwSmdiBlockResponsesSent.setDescription('This counter reflects the number of SMDI MWI negative acknowledgement with a cause set to BLK.')
bwSmdiInvalidResponsesSent = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 20, 1, 7), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSmdiInvalidResponsesSent.setStatus('current')
if mibBuilder.loadTexts: bwSmdiInvalidResponsesSent.setDescription('This counter reflects the number of SMDI MWI negative acknowledgement with a cause set to INV.')
bwSmdiOutgoingMWIActivationRequests = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 20, 1, 8), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSmdiOutgoingMWIActivationRequests.setStatus('current')
if mibBuilder.loadTexts: bwSmdiOutgoingMWIActivationRequests.setDescription('This counter reflects the number of Number of outgoing SMDI MWI OP message.')
bwSmdiOutgoingMWIDeactivationRequests = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 20, 1, 9), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSmdiOutgoingMWIDeactivationRequests.setStatus('current')
if mibBuilder.loadTexts: bwSmdiOutgoingMWIDeactivationRequests.setDescription('This counter reflects the number of Number of outgoing SMDI MWI RMV message.')
bwSmdiBlockResponsesReceived = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 20, 1, 10), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSmdiBlockResponsesReceived.setStatus('current')
if mibBuilder.loadTexts: bwSmdiBlockResponsesReceived.setDescription('This counter reflects the number of SMDI MWI negative acknowledgement with a cause set to BLK received from a station host, i.e. a Class 5 End Office.')
bwSmdiInvalidResponsesReceived = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 20, 1, 11), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSmdiInvalidResponsesReceived.setStatus('current')
if mibBuilder.loadTexts: bwSmdiInvalidResponsesReceived.setDescription('This counter reflects the number of SMDI MWI negative acknowledgement with a cause set to INV.')
bwSMDIMessageDeskMessageSent = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 20, 1, 12), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSMDIMessageDeskMessageSent.setStatus('current')
if mibBuilder.loadTexts: bwSMDIMessageDeskMessageSent.setDescription('This counter reflects the number of outgoing SMDI MD messages sent by BroadWorks.')
bwMediaCommandsTransmitted = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 21, 1, 1), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwMediaCommandsTransmitted.setStatus('current')
if mibBuilder.loadTexts: bwMediaCommandsTransmitted.setDescription('Contains the number of times a media command was transmitted, for the entire Application Server.')
bwMediaNotificationsReceived = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 21, 1, 2), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwMediaNotificationsReceived.setStatus('current')
if mibBuilder.loadTexts: bwMediaNotificationsReceived.setDescription('Contains the number of times a media notification was received, for the entire Application Server.')
bwMediaResourceAllocAttempts = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 21, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwMediaResourceAllocAttempts.setStatus('current')
if mibBuilder.loadTexts: bwMediaResourceAllocAttempts.setDescription('Contains the number of media resource allocation attempts, for the entire Application Server.')
bwMediaResourceAllocFailures = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 21, 1, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwMediaResourceAllocFailures.setStatus('current')
if mibBuilder.loadTexts: bwMediaResourceAllocFailures.setDescription('Contains the number of times a media command was transmitted, for the entire Application Server.')
bwWSPStatsServiceRequestsIn = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 22, 1, 1), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwWSPStatsServiceRequestsIn.setStatus('current')
if mibBuilder.loadTexts: bwWSPStatsServiceRequestsIn.setDescription('This counter is incremented whenever a WSP ServiceRequest message is received.')
bwWSPStatsServiceActionsOut = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 22, 1, 2), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwWSPStatsServiceActionsOut.setStatus('current')
if mibBuilder.loadTexts: bwWSPStatsServiceActionsOut.setDescription('This counter is incremented whenever a WSP ServiceAction message is transmitted.')
bwWSPStatsServiceUpdatesIn = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 22, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwWSPStatsServiceUpdatesIn.setStatus('current')
if mibBuilder.loadTexts: bwWSPStatsServiceUpdatesIn.setDescription('This counter is incremented whenever a WSP ServiceUpdate message is received.')
bwWSPStatsServiceAcknowledgementsOut = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 22, 1, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwWSPStatsServiceAcknowledgementsOut.setStatus('current')
if mibBuilder.loadTexts: bwWSPStatsServiceAcknowledgementsOut.setDescription('This counter is incremented whenever a WSP ServiceAcknowledgement message is transmitted.')
bwRealtimeAccountingRequestsTransmitted = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 23, 1, 1), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwRealtimeAccountingRequestsTransmitted.setStatus('current')
if mibBuilder.loadTexts: bwRealtimeAccountingRequestsTransmitted.setDescription('Number of new Accounting Requests sent to a Radius Server. Incremented each time a new Accounting Request transmission is first attempted toward a Radius Server.')
bwRealtimeAccountingRequestsRetransmitted = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 23, 1, 2), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwRealtimeAccountingRequestsRetransmitted.setStatus('current')
if mibBuilder.loadTexts: bwRealtimeAccountingRequestsRetransmitted.setDescription('Number of Accounting Requests sent to Radius Server(s) due to retransmissions to the same server. Incremented each time an Accounting Request transmission is retransmitted toward an Accounting Radius Server (be it to the same server as the one where the original request was sent, or to the alternate server).')
bwRealtimeAccountingRequestsDropped = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 23, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwRealtimeAccountingRequestsDropped.setStatus('current')
if mibBuilder.loadTexts: bwRealtimeAccountingRequestsDropped.setDescription('Number of Accounting Requests that were discarded due to the lack of a responsive Accounting Radius Server. Incremented each time an Accounting Request is dropped, after all transmissions attempts have failed.')
bwExternalCallLogsTransmitted = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 24, 1, 1), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwExternalCallLogsTransmitted.setStatus('current')
if mibBuilder.loadTexts: bwExternalCallLogsTransmitted.setDescription('Incremented each time a new external call log transmission is first attempted toward a Call detail server.')
bwExternalCallLogsRetransmitted = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 24, 1, 2), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwExternalCallLogsRetransmitted.setStatus('current')
if mibBuilder.loadTexts: bwExternalCallLogsRetransmitted.setDescription('Incremented each time a new external call log transmission is retransmitted towards a Call Detail Radius Server (be it to the same server as the one where the original call log was sent, or to the alternate server).')
bwExternalCallLogsDropped = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 24, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwExternalCallLogsDropped.setStatus('current')
if mibBuilder.loadTexts: bwExternalCallLogsDropped.setDescription('Incremented each time a call log is dropped, after all transmissions attempts have failed.')
bwExternalCallLogsQueued = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 24, 1, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwExternalCallLogsQueued.setStatus('current')
if mibBuilder.loadTexts: bwExternalCallLogsQueued.setDescription('Incremented each time a call log is written to the AS file-based queue, after all transmissions attempts have failed.')
bwExternalCallLogsTransmittedFromQueue = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 24, 1, 5), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwExternalCallLogsTransmittedFromQueue.setStatus('current')
if mibBuilder.loadTexts: bwExternalCallLogsTransmittedFromQueue.setDescription('Incremented on the first attempt to send to the call detail server a call log read from the file based queue.')
bwExternalCallLogsRetransmittedFromQueue = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 24, 1, 6), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwExternalCallLogsRetransmittedFromQueue.setStatus('current')
if mibBuilder.loadTexts: bwExternalCallLogsRetransmittedFromQueue.setDescription('Incremented on all attempts but the first one to send to the Call Detail Server a call log read from the file based queue.')
bwCommonCommXSStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 25, 1, 1), )
if mibBuilder.loadTexts: bwCommonCommXSStatsTable.setStatus('current')
if mibBuilder.loadTexts: bwCommonCommXSStatsTable.setDescription('This table contains counters for BCCT for the XS process.')
bwCommonCommXSStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 25, 1, 1, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwCommonCommXSStatsIndex"))
if mibBuilder.loadTexts: bwCommonCommXSStatsEntry.setStatus('current')
if mibBuilder.loadTexts: bwCommonCommXSStatsEntry.setDescription('Definition of the entries for bwCommonCommXSStatsTable.')
bwCommonCommXSStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 25, 1, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwCommonCommXSStatsIndex.setStatus('current')
if mibBuilder.loadTexts: bwCommonCommXSStatsIndex.setDescription('This integer represents an index in table bwCommonCommXSStatsTable. The index represents a connection for a specific Host-Interfacece-Protocol combination.')
bwCommonCommXSHost = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 25, 1, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwCommonCommXSHost.setStatus('current')
if mibBuilder.loadTexts: bwCommonCommXSHost.setDescription('The address of a host connected to the BroadWorks Common Communication Protocol.')
bwCommonCommXSInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 25, 1, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwCommonCommXSInterface.setStatus('current')
if mibBuilder.loadTexts: bwCommonCommXSInterface.setDescription('The IP address of a local interface that a protocol is bound to.')
bwCommonCommXSProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 25, 1, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwCommonCommXSProtocol.setStatus('current')
if mibBuilder.loadTexts: bwCommonCommXSProtocol.setDescription('The name of a BroadWorks Common Communication Protocol client protocol, e.g. OCI or SyncApi.')
bwCommonCommXSAcceptedOutboundConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 25, 1, 1, 1, 5), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCommonCommXSAcceptedOutboundConnections.setStatus('current')
if mibBuilder.loadTexts: bwCommonCommXSAcceptedOutboundConnections.setDescription('This counter is incremented whenever a client in this process connects to the framework to a remote host, using the interface and protocol.')
bwCommonCommXSAcceptedInboundConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 25, 1, 1, 1, 6), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCommonCommXSAcceptedInboundConnections.setStatus('current')
if mibBuilder.loadTexts: bwCommonCommXSAcceptedInboundConnections.setDescription('This counter is incremented whenever a client in this process connects to the framework from a remote host, using the interface and protocol.')
bwCommonCommXSRejectedOutboundConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 25, 1, 1, 1, 7), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCommonCommXSRejectedOutboundConnections.setStatus('current')
if mibBuilder.loadTexts: bwCommonCommXSRejectedOutboundConnections.setDescription('This counter is incremented whenever a client connection request going from this process to a remote host and going through this interface has been rejected for a particular protocol.')
bwCommonCommXSRejectedInboundConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 25, 1, 1, 1, 8), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCommonCommXSRejectedInboundConnections.setStatus('current')
if mibBuilder.loadTexts: bwCommonCommXSRejectedInboundConnections.setDescription('This counter is incremented whenever a client connection request coming to this host and going through this interface has been rejected by the framework for a particular protocol.')
bwCommonCommXSOutputMessagesProcessed = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 25, 1, 1, 1, 9), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCommonCommXSOutputMessagesProcessed.setStatus('current')
if mibBuilder.loadTexts: bwCommonCommXSOutputMessagesProcessed.setDescription('This counter is incremented whenever a message has been sent and processed for this host, interface and protocol.')
bwCommonCommXSInputMessagesProcessed = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 25, 1, 1, 1, 10), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCommonCommXSInputMessagesProcessed.setStatus('current')
if mibBuilder.loadTexts: bwCommonCommXSInputMessagesProcessed.setDescription('This counter is incremented whenever a message has been received and processed for this host, interface and protocol.')
bwCommonCommXSOutputCommunicationErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 25, 1, 1, 1, 11), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCommonCommXSOutputCommunicationErrors.setStatus('current')
if mibBuilder.loadTexts: bwCommonCommXSOutputCommunicationErrors.setDescription('This counter is incremented whenever a message could not be read because the TCP stack returned an error.')
bwCommonCommXSInputCommunicationErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 25, 1, 1, 1, 12), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCommonCommXSInputCommunicationErrors.setStatus('current')
if mibBuilder.loadTexts: bwCommonCommXSInputCommunicationErrors.setDescription('This counter is incremented whenever a message has been sent and processed for this host, interface and protocol.')
bwXSMonitoringExecutorTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 27, 1, 1), )
if mibBuilder.loadTexts: bwXSMonitoringExecutorTable.setStatus('current')
if mibBuilder.loadTexts: bwXSMonitoringExecutorTable.setDescription('This table contains counters for the concurrent framework.')
bwXSMonitoringExecutorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 27, 1, 1, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwXSMonitoringExecutorIndex"))
if mibBuilder.loadTexts: bwXSMonitoringExecutorEntry.setStatus('current')
if mibBuilder.loadTexts: bwXSMonitoringExecutorEntry.setDescription('Definition of the entries for bwXSMonitoringExecutorTable.')
bwXSMonitoringExecutorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 27, 1, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwXSMonitoringExecutorIndex.setStatus('current')
if mibBuilder.loadTexts: bwXSMonitoringExecutorIndex.setDescription('This integer represents an index in table bwXSMonitoringExecutorTable. This is the index to a specific Monitoring Executor name.')
bwXSMonitoringExecutorName = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 27, 1, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwXSMonitoringExecutorName.setStatus('current')
if mibBuilder.loadTexts: bwXSMonitoringExecutorName.setDescription('The name of the Monitoring Executor - Names are internally defined at the application level.')
bwXSMonitoringExecutorCurrentPoolSize = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 27, 1, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwXSMonitoringExecutorCurrentPoolSize.setStatus('current')
if mibBuilder.loadTexts: bwXSMonitoringExecutorCurrentPoolSize.setDescription('The current thread pool size')
bwXSMonitoringExecutorMaxPoolSize = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 27, 1, 1, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwXSMonitoringExecutorMaxPoolSize.setStatus('current')
if mibBuilder.loadTexts: bwXSMonitoringExecutorMaxPoolSize.setDescription('The maximum thread pool size')
bwXSMonitoringExecutorAvgActiveThreads = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 27, 1, 1, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwXSMonitoringExecutorAvgActiveThreads.setStatus('current')
if mibBuilder.loadTexts: bwXSMonitoringExecutorAvgActiveThreads.setDescription('The average number of active threads, rounded up')
bwXSMonitoringExecutorTaskQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 27, 1, 1, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwXSMonitoringExecutorTaskQueueSize.setStatus('current')
if mibBuilder.loadTexts: bwXSMonitoringExecutorTaskQueueSize.setDescription('Number of tasks in the queue (includes scheduled and recurring tasks)')
bwXSMonitoringExecutorNbTasksRun = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 27, 1, 1, 1, 7), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwXSMonitoringExecutorNbTasksRun.setStatus('current')
if mibBuilder.loadTexts: bwXSMonitoringExecutorNbTasksRun.setDescription('Number of tasks run')
bwXSMonitoringExecutorNbWarnings = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 27, 1, 1, 1, 8), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwXSMonitoringExecutorNbWarnings.setStatus('current')
if mibBuilder.loadTexts: bwXSMonitoringExecutorNbWarnings.setDescription('Number of warnings that occured')
bwXSMonitoringExecutorNbErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 27, 1, 1, 1, 9), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwXSMonitoringExecutorNbErrors.setStatus('current')
if mibBuilder.loadTexts: bwXSMonitoringExecutorNbErrors.setDescription('Number of errors that occured')
bwXSMonitoringExecutorLongestTaskMs = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 27, 1, 1, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwXSMonitoringExecutorLongestTaskMs.setStatus('current')
if mibBuilder.loadTexts: bwXSMonitoringExecutorLongestTaskMs.setDescription('Longest completed task execution time in milliseconds')
bwXSMonitoringExecutorLongestTaskName = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 27, 1, 1, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwXSMonitoringExecutorLongestTaskName.setStatus('current')
if mibBuilder.loadTexts: bwXSMonitoringExecutorLongestTaskName.setDescription('Longest completed task name')
bwXSTcpServersStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 26, 1, 1), )
if mibBuilder.loadTexts: bwXSTcpServersStatsTable.setStatus('current')
if mibBuilder.loadTexts: bwXSTcpServersStatsTable.setDescription('This table contains counters for TCP underlying framework for the XS process.')
bwXSTcpServersStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 26, 1, 1, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwXSTcpServersStatsIndex"))
if mibBuilder.loadTexts: bwXSTcpServersStatsEntry.setStatus('current')
if mibBuilder.loadTexts: bwXSTcpServersStatsEntry.setDescription('Definition of the entries for bwXSTcpServersStatsTable.')
bwXSTcpServersStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 26, 1, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwXSTcpServersStatsIndex.setStatus('current')
if mibBuilder.loadTexts: bwXSTcpServersStatsIndex.setDescription('This integer represents an index in table bwXSTcpServersStatsTable. This is the index to a specific TCP server name.')
bwXSTcpServersName = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 26, 1, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwXSTcpServersName.setStatus('current')
if mibBuilder.loadTexts: bwXSTcpServersName.setDescription('The name of TCP server - Names are internally defined at at the application level.')
bwXSTcpServersNbConnectionsAccepted = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 26, 1, 1, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwXSTcpServersNbConnectionsAccepted.setStatus('current')
if mibBuilder.loadTexts: bwXSTcpServersNbConnectionsAccepted.setDescription('This counter represents the number of connections accepted by the TCP server.')
bwXSTcpServersNbConnectionsRefused = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 26, 1, 1, 1, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwXSTcpServersNbConnectionsRefused.setStatus('current')
if mibBuilder.loadTexts: bwXSTcpServersNbConnectionsRefused.setDescription('This counter represents the number of connections refused by the TCP server.')
bwXSTcpServersNbConnectionsInitiated = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 26, 1, 1, 1, 5), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwXSTcpServersNbConnectionsInitiated.setStatus('current')
if mibBuilder.loadTexts: bwXSTcpServersNbConnectionsInitiated.setDescription('This counter represents the number of connections initiated by the TCP server.')
bwXSTcpServersNbConnectionsClosed = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 26, 1, 1, 1, 6), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwXSTcpServersNbConnectionsClosed.setStatus('current')
if mibBuilder.loadTexts: bwXSTcpServersNbConnectionsClosed.setDescription('This counter represents the number of connections closed by the TCP server or remote hosts.')
bwXSTcpServersNbBytesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 26, 1, 1, 1, 7), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwXSTcpServersNbBytesSent.setStatus('current')
if mibBuilder.loadTexts: bwXSTcpServersNbBytesSent.setDescription('This counter represents the number of bytes sent by the TCP server.')
bwXSTcpServersNbBytesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 26, 1, 1, 1, 8), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwXSTcpServersNbBytesReceived.setStatus('current')
if mibBuilder.loadTexts: bwXSTcpServersNbBytesReceived.setDescription('This counter represents the number of bytes received by the TCP server.')
bwXSTcpServersOutgoingQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 26, 1, 1, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwXSTcpServersOutgoingQueueSize.setStatus('current')
if mibBuilder.loadTexts: bwXSTcpServersOutgoingQueueSize.setDescription('This counter represents the number of bytes in the outgoing queue.')
bwXSTcpServersIncomingQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 26, 1, 1, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwXSTcpServersIncomingQueueSize.setStatus('current')
if mibBuilder.loadTexts: bwXSTcpServersIncomingQueueSize.setDescription('This counter represents the number of bytes in the incoming queue.')
bwXSTcpServersNbBytesSentSecure = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 26, 1, 1, 1, 11), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwXSTcpServersNbBytesSentSecure.setStatus('current')
if mibBuilder.loadTexts: bwXSTcpServersNbBytesSentSecure.setDescription('This counter represents the number of bytes sent by the TCP server over secure connections.')
bwXSTcpServersNbBytesReceivedSecure = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 26, 1, 1, 1, 12), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwXSTcpServersNbBytesReceivedSecure.setStatus('current')
if mibBuilder.loadTexts: bwXSTcpServersNbBytesReceivedSecure.setDescription('This counter represents the number of bytes received by the TCP server over secure connections.')
bwSOAPMaxSessions = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 28, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwSOAPMaxSessions.setStatus('current')
if mibBuilder.loadTexts: bwSOAPMaxSessions.setDescription('Maximum number of incoming SOAP sessions simultaneously active since the system was started.')
bwSOAPAvgSessions = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 28, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwSOAPAvgSessions.setStatus('current')
if mibBuilder.loadTexts: bwSOAPAvgSessions.setDescription('Average number of incoming SOAP sessions simultaneously active, based on a rolling average over the last 100 sessions.')
bwSOAPMaxThreads = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 28, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwSOAPMaxThreads.setStatus('current')
if mibBuilder.loadTexts: bwSOAPMaxThreads.setDescription('This gauge measures the maximum percentage of SOAP processing threads simultaneously active since the system was started.')
bwSOAPAvgThreads = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 28, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwSOAPAvgThreads.setStatus('current')
if mibBuilder.loadTexts: bwSOAPAvgThreads.setDescription('Average percentage of SOAP threads simultaneously active, based on a rolling average over the last 100 sessions.')
bwSOAPMaxServiceTime = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 28, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwSOAPMaxServiceTime.setStatus('current')
if mibBuilder.loadTexts: bwSOAPMaxServiceTime.setDescription('Maximum time in milliseconds required to process an incoming SOAP request, since the system was started.')
bwSOAPAvgServiceTime = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 28, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwSOAPAvgServiceTime.setStatus('current')
if mibBuilder.loadTexts: bwSOAPAvgServiceTime.setDescription('Average time in milliseconds required to process an incoming SOAP request, based on a rolling average over the last 100 requests.')
bwSOAPNumDroppedRequests = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 28, 1, 7), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSOAPNumDroppedRequests.setStatus('current')
if mibBuilder.loadTexts: bwSOAPNumDroppedRequests.setDescription('Number of SOAP server requests dropped because the number of SOAP threads was too low.')
bwSmppSubmitSMRequestsSent = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 29, 1, 1), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSmppSubmitSMRequestsSent.setStatus('current')
if mibBuilder.loadTexts: bwSmppSubmitSMRequestsSent.setDescription('Number of outgoing SMPP submit_sm requests sent.')
bwSmppInvalidSubmitSMResponsesReceived = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 29, 1, 2), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSmppInvalidSubmitSMResponsesReceived.setStatus('current')
if mibBuilder.loadTexts: bwSmppInvalidSubmitSMResponsesReceived.setDescription('Count of invalid received submit_sm_resp')
bwSmppSubmitSMResponseTimeout = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 29, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSmppSubmitSMResponseTimeout.setStatus('current')
if mibBuilder.loadTexts: bwSmppSubmitSMResponseTimeout.setDescription('Number of submit_sm requests timeouts detected.')
bwCPEDeviceStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 6, 6, 1, 1), )
if mibBuilder.loadTexts: bwCPEDeviceStatsTable.setStatus('current')
if mibBuilder.loadTexts: bwCPEDeviceStatsTable.setDescription('This table contains counters for the managed CPE devices management.')
bwCPEDeviceStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 6, 6, 1, 1, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwCPEDeviceStatsIndex"))
if mibBuilder.loadTexts: bwCPEDeviceStatsEntry.setStatus('current')
if mibBuilder.loadTexts: bwCPEDeviceStatsEntry.setDescription('Definition of the entries for bwCPEDeviceStatsTable.')
bwCPEDeviceStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 6, 6, 1, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwCPEDeviceStatsIndex.setStatus('current')
if mibBuilder.loadTexts: bwCPEDeviceStatsIndex.setDescription('This integer represents a CPE device index in the table')
bwCPEDeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 6, 6, 1, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwCPEDeviceName.setStatus('current')
if mibBuilder.loadTexts: bwCPEDeviceName.setDescription('This string represents CPE device name')
bwCPEDeviceReset = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 6, 6, 1, 1, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCPEDeviceReset.setStatus('current')
if mibBuilder.loadTexts: bwCPEDeviceReset.setDescription('Number of time the Customer Premise Equipment has been reset. The CPE device is a subscriber IP Phone that can be reset/reloaded via the web portal or CLI. You must have administrative privileges to reset the phone.')
bwCPEDeviceFileRebuilt = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 6, 6, 1, 1, 1, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCPEDeviceFileRebuilt.setStatus('current')
if mibBuilder.loadTexts: bwCPEDeviceFileRebuilt.setDescription('Number of time the Customer Premise Equipment has had its configuration file regenerated, the file can be regenerated in a number of ways, for example but not limited to - subscriber specific attribute has changed, a new line has been added to the device.')
bwCPEDeviceFileGet = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 6, 6, 1, 2), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCPEDeviceFileGet.setStatus('current')
if mibBuilder.loadTexts: bwCPEDeviceFileGet.setDescription('Number of time the Application Server retrieves a device file from the file repository, one counter per device.')
bwCPEDeviceFileDelete = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 6, 6, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCPEDeviceFileDelete.setStatus('current')
if mibBuilder.loadTexts: bwCPEDeviceFileDelete.setDescription('Number of time the Application Server deletes a device file from the file repository, one counter per device.')
bwCPEDeviceFilePut = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 6, 6, 1, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCPEDeviceFilePut.setStatus('current')
if mibBuilder.loadTexts: bwCPEDeviceFilePut.setDescription('Number of time the Application Server saves a device file in the file repository, one counter per device.')
bwCallpNetworkOriginationAttempts = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 7, 1, 1), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCallpNetworkOriginationAttempts.setStatus('current')
if mibBuilder.loadTexts: bwCallpNetworkOriginationAttempts.setDescription('This count indicates the total number of originations from the network.')
bwCallpNetworkTerminationAttempts = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 7, 1, 2), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCallpNetworkTerminationAttempts.setStatus('current')
if mibBuilder.loadTexts: bwCallpNetworkTerminationAttempts.setDescription('This count indicates the total number of termination attempts to the network.')
bwCallpNetworkTerminationsAnswered = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 7, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCallpNetworkTerminationsAnswered.setStatus('current')
if mibBuilder.loadTexts: bwCallpNetworkTerminationsAnswered.setDescription('This count indicates the total number of termination attempts to the network answered.')
bwCallpUserOriginationAttempts = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 7, 1, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCallpUserOriginationAttempts.setStatus('current')
if mibBuilder.loadTexts: bwCallpUserOriginationAttempts.setDescription('This counts indicates the total number of origination attempts from the access network(BroadWorks user/virtual user).')
bwCallpUserTerminationAttempts = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 7, 1, 5), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCallpUserTerminationAttempts.setStatus('current')
if mibBuilder.loadTexts: bwCallpUserTerminationAttempts.setDescription('This counts indicates the total number of termination attempts to the access network(BroadWorks user/virtual user).')
bwCallpUserTerminationsAnswered = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 7, 1, 6), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCallpUserTerminationsAnswered.setStatus('current')
if mibBuilder.loadTexts: bwCallpUserTerminationsAnswered.setDescription('This counts indicates the total number of termination attempts to the access network answered.')
bwCallpEmergencyCallAttempts = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 7, 1, 7), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCallpEmergencyCallAttempts.setStatus('current')
if mibBuilder.loadTexts: bwCallpEmergencyCallAttempts.setDescription("This counter represents the number of Emergency call originations made by user's of the system")
bwCallpEmergencyCallAlarms = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 7, 1, 8), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCallpEmergencyCallAlarms.setStatus('current')
if mibBuilder.loadTexts: bwCallpEmergencyCallAlarms.setDescription('The counter represents the number of times an alarm is generated for an emergency call routing failure')
bwCallpSPTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 7, 1, 9), )
if mibBuilder.loadTexts: bwCallpSPTable.setStatus('current')
if mibBuilder.loadTexts: bwCallpSPTable.setDescription('This table contains the counters for CallP measurements for service providers')
bwCallpActiveCalls = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 7, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwCallpActiveCalls.setStatus('current')
if mibBuilder.loadTexts: bwCallpActiveCalls.setDescription('This counts indicates the total number of active session. An active session is define as an active originating session. Any call that needs to perform a lookup in a NetworkServer/LocationServer will be counted as 2 calls, once for each call leg.')
bwCallpGroupTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 7, 1, 11), )
if mibBuilder.loadTexts: bwCallpGroupTable.setStatus('current')
if mibBuilder.loadTexts: bwCallpGroupTable.setDescription('This table contains the counters for CallP measurements for groups')
bwCallpCallsPerSecond = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 7, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwCallpCallsPerSecond.setStatus('current')
if mibBuilder.loadTexts: bwCallpCallsPerSecond.setDescription("This gauge measures the rate at which network origination attempts and user origination attempts occur. It uses the timestamps of up to the last 100 network origination attempts and user origination attempts in calculating the rate. The criteria for capturing such attempts is the same as that for pegging the bwCallPNetworkOriginationAttempts and bwCallPUserOriginationAttempts PM's.")
bwCallpMaximumNumberofSimCallsExceeded = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 7, 1, 13), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCallpMaximumNumberofSimCallsExceeded.setStatus('current')
if mibBuilder.loadTexts: bwCallpMaximumNumberofSimCallsExceeded.setDescription('This counter reflects the number of times that the maximum number of simultaneous calls for a user is exceeded.')
bwCallpMaximumCallTimeforAnsweredCallsExceeded = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 7, 1, 14), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCallpMaximumCallTimeforAnsweredCallsExceeded.setStatus('current')
if mibBuilder.loadTexts: bwCallpMaximumCallTimeforAnsweredCallsExceeded.setDescription('This counter reflects the number of times that the maximum call time for answered calls is exceeded.')
bwCallpMaximumCallTimeforUnansweredCallsExceeded = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 7, 1, 15), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCallpMaximumCallTimeforUnansweredCallsExceeded.setStatus('current')
if mibBuilder.loadTexts: bwCallpMaximumCallTimeforUnansweredCallsExceeded.setDescription('This counter reflects the number of times that the maximum call time for unanswered calls is exceeded.')
bwCallpActiveCallsAsPercentOfLicense = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 7, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwCallpActiveCallsAsPercentOfLicense.setStatus('current')
if mibBuilder.loadTexts: bwCallpActiveCallsAsPercentOfLicense.setDescription('This gauge reports the number of active calls as a percentage of the maximum concurrent calls licensed value. If the concurrent calls licensed value is unlimited, the gauge is zero.')
bwCallpMaximumNumberofSimVideoCallsExceeded = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 7, 1, 17), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCallpMaximumNumberofSimVideoCallsExceeded.setStatus('current')
if mibBuilder.loadTexts: bwCallpMaximumNumberofSimVideoCallsExceeded.setDescription('This counter reflects the number of times that the maximum number of simultaneous video calls for a user is exceeded.')
bwCallpMediaTypeNotSupported = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 7, 1, 18), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCallpMediaTypeNotSupported.setStatus('current')
if mibBuilder.loadTexts: bwCallpMediaTypeNotSupported.setDescription('This counter reflects the number of times that the media type (codec) has not been supported for a user.')
bwCallpRemoteOfficeEmergencyCallsBlocked = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 7, 1, 19), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCallpRemoteOfficeEmergencyCallsBlocked.setStatus('current')
if mibBuilder.loadTexts: bwCallpRemoteOfficeEmergencyCallsBlocked.setDescription('This is the number of times an emergency call origination attempt from a network location (i.e. remote office or BroadWorks anywhere) has been blocked.')
bwCallpSPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 7, 1, 9, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwCallpSPIndex"))
if mibBuilder.loadTexts: bwCallpSPEntry.setStatus('current')
if mibBuilder.loadTexts: bwCallpSPEntry.setDescription('This row contains the counters for CallP measurements for a service provider')
bwCallpSPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 7, 1, 9, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwCallpSPIndex.setStatus('current')
if mibBuilder.loadTexts: bwCallpSPIndex.setDescription('This integer represents the a service provider index in the system')
bwCallpSPID = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 7, 1, 9, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwCallpSPID.setStatus('current')
if mibBuilder.loadTexts: bwCallpSPID.setDescription('This string represents a service provider ID')
bwCallpSPUserOriginationAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 7, 1, 9, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCallpSPUserOriginationAttempts.setStatus('current')
if mibBuilder.loadTexts: bwCallpSPUserOriginationAttempts.setDescription('This counts indicates the total number of origination attempts from the access network(BroadWorks user/virtual user) for a service provider')
bwCallpSPUserTerminationAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 7, 1, 9, 1, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCallpSPUserTerminationAttempts.setStatus('current')
if mibBuilder.loadTexts: bwCallpSPUserTerminationAttempts.setDescription('This counts indicates the total number of termination attempts to the access network(BroadWorks user/virtual user) for a service provider')
bwCallpSPUserTerminationsAnswered = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 7, 1, 9, 1, 5), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCallpSPUserTerminationsAnswered.setStatus('current')
if mibBuilder.loadTexts: bwCallpSPUserTerminationsAnswered.setDescription('This counts indicates the total number of termination attempts to the access network answered for a service provider')
bwCallpSPEmergencyCallAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 7, 1, 9, 1, 6), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCallpSPEmergencyCallAttempts.setStatus('current')
if mibBuilder.loadTexts: bwCallpSPEmergencyCallAttempts.setDescription('This counter represents the number of Emergency call originations made by Broadworks users for a service provider')
bwCallpSPMaximumNumberofSimCallsExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 7, 1, 9, 1, 7), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCallpSPMaximumNumberofSimCallsExceeded.setStatus('current')
if mibBuilder.loadTexts: bwCallpSPMaximumNumberofSimCallsExceeded.setDescription('This counter reflects the number of times that the maximum number of simultaneous calls for a user is exceeded for a service provider.')
bwCallpSPMaximumCallTimeforAnsweredCallsExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 7, 1, 9, 1, 8), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCallpSPMaximumCallTimeforAnsweredCallsExceeded.setStatus('current')
if mibBuilder.loadTexts: bwCallpSPMaximumCallTimeforAnsweredCallsExceeded.setDescription('This counter reflects the number of times that the maximum call time for answered calls is exceeded for a service provider.')
bwCallpSPMaximumCallTimeforUnansweredCallsExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 7, 1, 9, 1, 9), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCallpSPMaximumCallTimeforUnansweredCallsExceeded.setStatus('current')
if mibBuilder.loadTexts: bwCallpSPMaximumCallTimeforUnansweredCallsExceeded.setDescription('This counter reflects the number of times that the maximum call time for unanswered calls is exceeded for a service provider.')
bwCallpSPMaximumNumberofSimVideoCallsExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 7, 1, 9, 1, 10), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCallpSPMaximumNumberofSimVideoCallsExceeded.setStatus('current')
if mibBuilder.loadTexts: bwCallpSPMaximumNumberofSimVideoCallsExceeded.setDescription('The counter reflects the number of times that the maximum number of simultaneous video calls for a user is exceeded.')
bwCallpSPMediaTypeNotSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 7, 1, 9, 1, 11), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCallpSPMediaTypeNotSupported.setStatus('current')
if mibBuilder.loadTexts: bwCallpSPMediaTypeNotSupported.setDescription('The counter reflects the number of times that the media type (codec) within a service provider has not been supported for a user.')
bwCallpGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 7, 1, 11, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwCallpGroupIndex"))
if mibBuilder.loadTexts: bwCallpGroupEntry.setStatus('current')
if mibBuilder.loadTexts: bwCallpGroupEntry.setDescription('This row contains the counters for CallP measurements for a group')
bwCallpGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 7, 1, 11, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwCallpGroupIndex.setStatus('current')
if mibBuilder.loadTexts: bwCallpGroupIndex.setDescription('This integer represents the a group index in the system')
bwCallpGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 7, 1, 11, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwCallpGroupID.setStatus('current')
if mibBuilder.loadTexts: bwCallpGroupID.setDescription('This string represents a group ID')
bwCallpGroupUserOriginationAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 7, 1, 11, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCallpGroupUserOriginationAttempts.setStatus('current')
if mibBuilder.loadTexts: bwCallpGroupUserOriginationAttempts.setDescription('This counts indicates the total number of origination attempts from the access network(BroadWorks user/virtual user) for a group')
bwCallpGroupUserTerminationAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 7, 1, 11, 1, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCallpGroupUserTerminationAttempts.setStatus('current')
if mibBuilder.loadTexts: bwCallpGroupUserTerminationAttempts.setDescription('This counts indicates the total number of termination attempts to the access network(BroadWorks user/virtual user) for a group')
bwCallpGroupUserTerminationsAnswered = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 7, 1, 11, 1, 5), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCallpGroupUserTerminationsAnswered.setStatus('current')
if mibBuilder.loadTexts: bwCallpGroupUserTerminationsAnswered.setDescription('This counts indicates the total number of termination attempts to the access network answered for a group')
bwCallpGroupEmergencyCallAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 7, 1, 11, 1, 6), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCallpGroupEmergencyCallAttempts.setStatus('current')
if mibBuilder.loadTexts: bwCallpGroupEmergencyCallAttempts.setDescription('This counter represents the number of Emergency call originations made by Broadworks users for a group')
bwCallpGroupMaximumNumberofSimCallsExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 7, 1, 11, 1, 7), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCallpGroupMaximumNumberofSimCallsExceeded.setStatus('current')
if mibBuilder.loadTexts: bwCallpGroupMaximumNumberofSimCallsExceeded.setDescription('This counter reflects the number of times that the maximum number of simultaneous calls for a user is exceeded for a group.')
bwCallpGroupMaximumCallTimeforAnsweredCallsExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 7, 1, 11, 1, 8), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCallpGroupMaximumCallTimeforAnsweredCallsExceeded.setStatus('current')
if mibBuilder.loadTexts: bwCallpGroupMaximumCallTimeforAnsweredCallsExceeded.setDescription('This counter reflects the number of times that the maximum call time for answered calls is exceeded for a group.')
bwCallpGroupMaximumCallTimeforUnansweredCallsExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 7, 1, 11, 1, 9), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCallpGroupMaximumCallTimeforUnansweredCallsExceeded.setStatus('current')
if mibBuilder.loadTexts: bwCallpGroupMaximumCallTimeforUnansweredCallsExceeded.setDescription('This counter reflects the number of times that the maximum call time for unanswered calls is exceeded for a group.')
bwCallpGroupMaximumNumberofSimVideoCallsExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 7, 1, 11, 1, 10), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCallpGroupMaximumNumberofSimVideoCallsExceeded.setStatus('current')
if mibBuilder.loadTexts: bwCallpGroupMaximumNumberofSimVideoCallsExceeded.setDescription('This counter reflects the number of times that the maximum number of simultaneous video calls for a user is exceeded.')
bwCallpGroupMediaTypeNotSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 7, 1, 11, 1, 11), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCallpGroupMediaTypeNotSupported.setStatus('current')
if mibBuilder.loadTexts: bwCallpGroupMediaTypeNotSupported.setDescription('This counter reflects the number of times that a call is rejected because the media type was not valid for a user.')
bwSMTPTotalPrimaryEmailSendAttempts = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 8, 1, 1), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSMTPTotalPrimaryEmailSendAttempts.setStatus('current')
if mibBuilder.loadTexts: bwSMTPTotalPrimaryEmailSendAttempts.setDescription('This counter reflects the total number of message send attempted on the primary SMTP server.')
bwSMTPTotalSecondaryEmailSendAttempts = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 8, 1, 2), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSMTPTotalSecondaryEmailSendAttempts.setStatus('current')
if mibBuilder.loadTexts: bwSMTPTotalSecondaryEmailSendAttempts.setDescription('This counter reflects the total number of message send attempted on the secondary SMTP server.')
bwSMTPPrimaryUnSuccessfulEmailSendAttempts = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 8, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSMTPPrimaryUnSuccessfulEmailSendAttempts.setStatus('current')
if mibBuilder.loadTexts: bwSMTPPrimaryUnSuccessfulEmailSendAttempts.setDescription('This counter reflects the total number of message deliveries that failed on the primary SMTP server.')
bwSMTPSecondaryUnSuccessfulEmailSendAttempts = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 8, 1, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSMTPSecondaryUnSuccessfulEmailSendAttempts.setStatus('current')
if mibBuilder.loadTexts: bwSMTPSecondaryUnSuccessfulEmailSendAttempts.setDescription('This counter reflects the total number of message deliveries that failed on the secondary SMTP server.')
bwSipSummaryTotalTransactions = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 9, 1, 1), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSipSummaryTotalTransactions.setStatus('current')
if mibBuilder.loadTexts: bwSipSummaryTotalTransactions.setDescription('This counter contains a count of the number of transactions completed or in progress.')
bwSipStatsInviteIns = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 9, 1, 2), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSipStatsInviteIns.setStatus('current')
if mibBuilder.loadTexts: bwSipStatsInviteIns.setDescription('This counter reflects the total number of INVITE requests received by BroadWorks.')
bwSipStatsInviteOuts = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 9, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSipStatsInviteOuts.setStatus('current')
if mibBuilder.loadTexts: bwSipStatsInviteOuts.setDescription('This counter reflects the total number of INVITE requests sent by BroadWorks.')
bwSipStatsAckIns = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 9, 1, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSipStatsAckIns.setStatus('current')
if mibBuilder.loadTexts: bwSipStatsAckIns.setDescription('This counter reflects the total number of ACK requests received by BroadWorks.')
bwSipStatsAckOuts = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 9, 1, 5), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSipStatsAckOuts.setStatus('current')
if mibBuilder.loadTexts: bwSipStatsAckOuts.setDescription('This counter reflects the total number of ACK requests sent by BroadWorks.')
bwSipStatsByeIns = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 9, 1, 6), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSipStatsByeIns.setStatus('current')
if mibBuilder.loadTexts: bwSipStatsByeIns.setDescription('This counter reflects the total number of BYE requests received by BroadWorks.')
bwSipStatsByeOuts = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 9, 1, 7), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSipStatsByeOuts.setStatus('current')
if mibBuilder.loadTexts: bwSipStatsByeOuts.setDescription('This counter reflects the total number of BYE requests sent by BroadWorks.')
bwSipStatsCancelIns = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 9, 1, 8), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSipStatsCancelIns.setStatus('current')
if mibBuilder.loadTexts: bwSipStatsCancelIns.setDescription('This counter reflects the total number of CANCEL requests received by BroadWorks.')
bwSipStatsCancelOuts = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 9, 1, 9), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSipStatsCancelOuts.setStatus('current')
if mibBuilder.loadTexts: bwSipStatsCancelOuts.setDescription('This counter reflects the total number of CANCEL requests sent by BroadWorks.')
bwSipStatsOptionsIns = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 9, 1, 10), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSipStatsOptionsIns.setStatus('current')
if mibBuilder.loadTexts: bwSipStatsOptionsIns.setDescription('This counter reflects the total number of OPTIONS requests received by BroadWorks.')
bwSipStatsOptionsOuts = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 9, 1, 11), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSipStatsOptionsOuts.setStatus('current')
if mibBuilder.loadTexts: bwSipStatsOptionsOuts.setDescription('This counter reflects the total number of OPTIONS requests sent by BroadWorks.')
bwSipStatsRegisterIns = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 9, 1, 12), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSipStatsRegisterIns.setStatus('current')
if mibBuilder.loadTexts: bwSipStatsRegisterIns.setDescription('This counter reflects the total number of REGISTER requests received by BroadWorks.')
bwSipStatsRegisterOuts = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 9, 1, 13), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSipStatsRegisterOuts.setStatus('current')
if mibBuilder.loadTexts: bwSipStatsRegisterOuts.setDescription('This counter reflects the total number of REGISTER requests sent by BroadWorks.')
bwSipStatsInfoIns = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 9, 1, 14), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSipStatsInfoIns.setStatus('current')
if mibBuilder.loadTexts: bwSipStatsInfoIns.setDescription('This counter reflects the total number of INFO requests received by BroadWorks')
bwSipStatsInfoOuts = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 9, 1, 15), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSipStatsInfoOuts.setStatus('current')
if mibBuilder.loadTexts: bwSipStatsInfoOuts.setDescription('This counter reflects the total number of INFO requests sent by BroadWorks')
bwSipStatsNotifyIns = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 9, 1, 16), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSipStatsNotifyIns.setStatus('current')
if mibBuilder.loadTexts: bwSipStatsNotifyIns.setDescription('This counter reflects the total number of NOTIFY requests received by BroadWorks')
bwSipStatsNotifyOuts = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 9, 1, 17), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSipStatsNotifyOuts.setStatus('current')
if mibBuilder.loadTexts: bwSipStatsNotifyOuts.setDescription('This counter reflects the total number of NOTIFY requests sent by BroadWorks')
bwSipStatsPrackIns = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 9, 1, 18), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSipStatsPrackIns.setStatus('current')
if mibBuilder.loadTexts: bwSipStatsPrackIns.setDescription('This counter reflects the total number of PRACK requests received by BroadWorks')
bwSipStatsPrackOuts = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 9, 1, 19), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSipStatsPrackOuts.setStatus('current')
if mibBuilder.loadTexts: bwSipStatsPrackOuts.setDescription('This counter reflects the total number of PRACK requests sent by BroadWorks')
bwSipStatsOtherIns = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 9, 1, 20), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSipStatsOtherIns.setStatus('current')
if mibBuilder.loadTexts: bwSipStatsOtherIns.setDescription('This counter reflects the total number of unsupported requests (other than INFO and NOTIFY) received by BroadWorks')
bwSipStatsOtherOuts = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 9, 1, 21), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSipStatsOtherOuts.setStatus('current')
if mibBuilder.loadTexts: bwSipStatsOtherOuts.setDescription('This counter reflects the total number of UNKNOWN requests sent by BroadWorks')
bwSipStatsInviteResponsesTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 9, 1, 22), )
if mibBuilder.loadTexts: bwSipStatsInviteResponsesTable.setStatus('current')
if mibBuilder.loadTexts: bwSipStatsInviteResponsesTable.setDescription('This table contains the counters for all SIP responses to the Invite requests received or sent by BroadWorks. Each counter is a 32-Bit counter. The response code is used to index into the table. Here are all the response codes: 100, 180, 181, 182, 183, 200, 300, 301, 302, 305, 380, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 420, 480, 481, 482, 483, 484, 485, 486, 487, 500, 501, 502, 503, 504, 505, 600, 603, 604, 606')
bwSipStatsInviteResponsesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 9, 1, 22, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwSipStatsInviteResponseCodeValue"))
if mibBuilder.loadTexts: bwSipStatsInviteResponsesEntry.setStatus('current')
if mibBuilder.loadTexts: bwSipStatsInviteResponsesEntry.setDescription('This row contains information on a particular SIP status code received or sent in response to an Invite')
bwSipStatsInviteResponseCodeValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 9, 1, 22, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 999)))
if mibBuilder.loadTexts: bwSipStatsInviteResponseCodeValue.setStatus('current')
if mibBuilder.loadTexts: bwSipStatsInviteResponseCodeValue.setDescription('This integer represents a SIP status code. The rest of the information in this row is related to this value.')
bwSipStatsInviteResponseIns = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 9, 1, 22, 1, 2), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSipStatsInviteResponseIns.setStatus('current')
if mibBuilder.loadTexts: bwSipStatsInviteResponseIns.setDescription('This counter represents the number of SIP responses received in response to an Invite')
bwSipStatsInviteResponseOuts = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 9, 1, 22, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSipStatsInviteResponseOuts.setStatus('current')
if mibBuilder.loadTexts: bwSipStatsInviteResponseOuts.setDescription('This counter represents the number of SIP responses sent in response to an Invite')
bwSipStatsByeResponsesTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 9, 1, 23), )
if mibBuilder.loadTexts: bwSipStatsByeResponsesTable.setStatus('current')
if mibBuilder.loadTexts: bwSipStatsByeResponsesTable.setDescription('This table contains the counters for all SIP responses to the BYE requests received or sent by BroadWorks. Each counter is a 32-Bit counter. The response code is used to index into the table. Here are all the response codes: 100, 180, 181, 182, 183, 200, 300, 301, 302, 305, 380, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 420, 480, 481, 482, 483, 484, 485, 486, 487, 500, 501, 502, 503, 504, 505, 600, 603, 604, 606')
bwSipStatsByeResponsesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 9, 1, 23, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwSipStatsByeResponseCodeValue"))
if mibBuilder.loadTexts: bwSipStatsByeResponsesEntry.setStatus('current')
if mibBuilder.loadTexts: bwSipStatsByeResponsesEntry.setDescription('This row contains information on a particular SIP status code received or sent in response to a Bye')
bwSipStatsByeResponseCodeValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 9, 1, 23, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 999)))
if mibBuilder.loadTexts: bwSipStatsByeResponseCodeValue.setStatus('current')
if mibBuilder.loadTexts: bwSipStatsByeResponseCodeValue.setDescription('This integer represents a SIP status code. The rest of the information in this row is related to this value.')
bwSipStatsByeResponseIns = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 9, 1, 23, 1, 2), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSipStatsByeResponseIns.setStatus('current')
if mibBuilder.loadTexts: bwSipStatsByeResponseIns.setDescription('This counter represents the number of SIP responses received in response to a Bye')
bwSipStatsByeResponseOuts = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 9, 1, 23, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSipStatsByeResponseOuts.setStatus('current')
if mibBuilder.loadTexts: bwSipStatsByeResponseOuts.setDescription('This counter represents the number of SIP responses sent in response to a Bye')
bwSipStatsCancelResponsesTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 9, 1, 24), )
if mibBuilder.loadTexts: bwSipStatsCancelResponsesTable.setStatus('current')
if mibBuilder.loadTexts: bwSipStatsCancelResponsesTable.setDescription('This table contains the counters for all SIP responses to the Cancel requests received or sent by BroadWorks. Each counter is a 32-Bit counter. The response code is used to index into the table. Here are all the response codes: 100, 180, 181, 182, 183, 200, 300, 301, 302, 305, 380, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 420, 480, 481, 482, 483, 484, 485, 486, 487, 500, 501, 502, 503, 504, 505, 600, 603, 604, 606')
bwSipStatsCancelResponsesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 9, 1, 24, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwSipStatsCancelResponseCodeValue"))
if mibBuilder.loadTexts: bwSipStatsCancelResponsesEntry.setStatus('current')
if mibBuilder.loadTexts: bwSipStatsCancelResponsesEntry.setDescription('This row contains information on a particular SIP status code received or sent in response to a Cancel')
bwSipStatsCancelResponseCodeValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 9, 1, 24, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 999)))
if mibBuilder.loadTexts: bwSipStatsCancelResponseCodeValue.setStatus('current')
if mibBuilder.loadTexts: bwSipStatsCancelResponseCodeValue.setDescription('This integer represents a SIP status code. The rest of the information in this row is related to this value.')
bwSipStatsCancelResponseIns = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 9, 1, 24, 1, 2), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSipStatsCancelResponseIns.setStatus('current')
if mibBuilder.loadTexts: bwSipStatsCancelResponseIns.setDescription('This counter represents the number of SIP responses received in response to a Cancel')
bwSipStatsCancelResponseOuts = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 9, 1, 24, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSipStatsCancelResponseOuts.setStatus('current')
if mibBuilder.loadTexts: bwSipStatsCancelResponseOuts.setDescription('This counter represents the number of SIP responses sent in response to a Cancel')
bwSipStatsOptionsResponsesTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 9, 1, 25), )
if mibBuilder.loadTexts: bwSipStatsOptionsResponsesTable.setStatus('current')
if mibBuilder.loadTexts: bwSipStatsOptionsResponsesTable.setDescription('This table contains the counters for all SIP responses to the Options requests received or sent by BroadWorks. Each counter is a 32-Bit counter. The response code is used to index into the table. Here are all the response codes: 100, 180, 181, 182, 183, 200, 300, 301, 302, 305, 380, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 420, 480, 481, 482, 483, 484, 485, 486, 487, 500, 501, 502, 503, 504, 505, 600, 603, 604, 606')
bwSipStatsOptionsResponsesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 9, 1, 25, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwSipStatsOptionsResponseCodeValue"))
if mibBuilder.loadTexts: bwSipStatsOptionsResponsesEntry.setStatus('current')
if mibBuilder.loadTexts: bwSipStatsOptionsResponsesEntry.setDescription('This row contains information on a particular SIP status code received or sent in response to a Options')
bwSipStatsOptionsResponseCodeValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 9, 1, 25, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 999)))
if mibBuilder.loadTexts: bwSipStatsOptionsResponseCodeValue.setStatus('current')
if mibBuilder.loadTexts: bwSipStatsOptionsResponseCodeValue.setDescription('This integer represents a SIP status code. The rest of the information in this row is related to this value.')
bwSipStatsOptionsResponseIns = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 9, 1, 25, 1, 2), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSipStatsOptionsResponseIns.setStatus('current')
if mibBuilder.loadTexts: bwSipStatsOptionsResponseIns.setDescription('This counter represents the number of SIP responses received in response to an Options')
bwSipStatsOptionsResponseOuts = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 9, 1, 25, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSipStatsOptionsResponseOuts.setStatus('current')
if mibBuilder.loadTexts: bwSipStatsOptionsResponseOuts.setDescription('This counter represents the number of SIP responses sent in response to an Options')
bwSipStatsRegisterResponsesTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 9, 1, 26), )
if mibBuilder.loadTexts: bwSipStatsRegisterResponsesTable.setStatus('current')
if mibBuilder.loadTexts: bwSipStatsRegisterResponsesTable.setDescription('This table contains the counters for all SIP responses to the Register requests received or sent by BroadWorks. Each counter is a 32-Bit counter. The response code is used to index into the table. Here are all the response codes: 100, 180, 181, 182, 183, 200, 300, 301, 302, 305, 380, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 420, 480, 481, 482, 483, 484, 485, 486, 487, 500, 501, 502, 503, 504, 505, 600, 603, 604, 606')
bwSipStatsRegisterResponsesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 9, 1, 26, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwSipStatsRegisterResponseCodeValue"))
if mibBuilder.loadTexts: bwSipStatsRegisterResponsesEntry.setStatus('current')
if mibBuilder.loadTexts: bwSipStatsRegisterResponsesEntry.setDescription('This row contains information on a particular SIP status code received or sent in response to a Register')
bwSipStatsRegisterResponseCodeValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 9, 1, 26, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 999)))
if mibBuilder.loadTexts: bwSipStatsRegisterResponseCodeValue.setStatus('current')
if mibBuilder.loadTexts: bwSipStatsRegisterResponseCodeValue.setDescription('This integer represents a SIP status code. The rest of the information in this row is related to this value.')
bwSipStatsRegisterResponseIns = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 9, 1, 26, 1, 2), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSipStatsRegisterResponseIns.setStatus('current')
if mibBuilder.loadTexts: bwSipStatsRegisterResponseIns.setDescription('This counter represents the number of SIP responses received in response to a Register')
bwSipStatsRegisterResponseOuts = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 9, 1, 26, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSipStatsRegisterResponseOuts.setStatus('current')
if mibBuilder.loadTexts: bwSipStatsRegisterResponseOuts.setDescription('This counter represents the number of SIP responses sent in response to a Register')
bwSipStatsPrackResponsesTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 9, 1, 27), )
if mibBuilder.loadTexts: bwSipStatsPrackResponsesTable.setStatus('current')
if mibBuilder.loadTexts: bwSipStatsPrackResponsesTable.setDescription('This table contains the counters for all SIP responses to the Prack requests received or sent by BroadWorks. Each counter is a 32-Bit counter. The response code is used to index into the table. Here are all the response codes: 100, 180, 181, 182, 183, 200, 300, 301, 302, 305, 380, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 420, 480, 481, 482, 483, 484, 485, 486, 487, 500, 501, 502, 503, 504, 505, 600, 603, 604, 606')
bwSipStatsPrackResponsesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 9, 1, 27, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwSipStatsPrackResponseCodeValue"))
if mibBuilder.loadTexts: bwSipStatsPrackResponsesEntry.setStatus('current')
if mibBuilder.loadTexts: bwSipStatsPrackResponsesEntry.setDescription('This row contains information on a particular SIP status code received or sent in response to a Prack')
bwSipStatsPrackResponseCodeValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 9, 1, 27, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 999)))
if mibBuilder.loadTexts: bwSipStatsPrackResponseCodeValue.setStatus('current')
if mibBuilder.loadTexts: bwSipStatsPrackResponseCodeValue.setDescription('This integer represents a SIP status code. The rest of the information in this row is related to this value.')
bwSipStatsPrackResponseIns = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 9, 1, 27, 1, 2), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSipStatsPrackResponseIns.setStatus('current')
if mibBuilder.loadTexts: bwSipStatsPrackResponseIns.setDescription('This counter represents the number of SIP responses received in response to a Prack')
bwSipStatsPrackResponseOuts = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 9, 1, 27, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSipStatsPrackResponseOuts.setStatus('current')
if mibBuilder.loadTexts: bwSipStatsPrackResponseOuts.setDescription('This counter represents the number of SIP responses sent in response to a Prack')
bwSipStatsInfoResponsesTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 9, 1, 28), )
if mibBuilder.loadTexts: bwSipStatsInfoResponsesTable.setStatus('current')
if mibBuilder.loadTexts: bwSipStatsInfoResponsesTable.setDescription('This table contains the counters for all SIP responses to the Info requests received or sent by BroadWorks. Each counter is a 32-Bit counter. The response code is used to index into the table. Here are all the response codes: 100, 180, 181, 182, 183, 200, 300, 301, 302, 305, 380, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 420, 480, 481, 482, 483, 484, 485, 486, 487, 500, 501, 502, 503, 504, 505, 600, 603, 604, 606')
bwSipStatsInfoResponsesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 9, 1, 28, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwSipStatsInfoResponseCodeValue"))
if mibBuilder.loadTexts: bwSipStatsInfoResponsesEntry.setStatus('current')
if mibBuilder.loadTexts: bwSipStatsInfoResponsesEntry.setDescription('This row contains information on a particular SIP status code received or sent in response to an Info')
bwSipStatsInfoResponseCodeValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 9, 1, 28, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 999)))
if mibBuilder.loadTexts: bwSipStatsInfoResponseCodeValue.setStatus('current')
if mibBuilder.loadTexts: bwSipStatsInfoResponseCodeValue.setDescription('This integer represents a SIP status code. The rest of the information in this row is related to this value.')
bwSipStatsInfoResponseIns = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 9, 1, 28, 1, 2), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSipStatsInfoResponseIns.setStatus('current')
if mibBuilder.loadTexts: bwSipStatsInfoResponseIns.setDescription('This counter represents the number of SIP responses received in response to an Info')
bwSipStatsInfoResponseOuts = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 9, 1, 28, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSipStatsInfoResponseOuts.setStatus('current')
if mibBuilder.loadTexts: bwSipStatsInfoResponseOuts.setDescription('This counter represents the number of SIP responses sent in response to an Info')
bwSipStatsNotifyResponsesTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 9, 1, 29), )
if mibBuilder.loadTexts: bwSipStatsNotifyResponsesTable.setStatus('current')
if mibBuilder.loadTexts: bwSipStatsNotifyResponsesTable.setDescription('This table contains the counters for all SIP responses to the Notify requests received or sent by BroadWorks. Each counter is a 32-Bit counter. The response code is used to index into the table. Here are all the response codes: 100, 180, 181, 182, 183, 200, 300, 301, 302, 305, 380, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 420, 480, 481, 482, 483, 484, 485, 486, 487, 500, 501, 502, 503, 504, 505, 600, 603, 604, 606')
bwSipStatsNotifyResponsesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 9, 1, 29, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwSipStatsNotifyResponseCodeValue"))
if mibBuilder.loadTexts: bwSipStatsNotifyResponsesEntry.setStatus('current')
if mibBuilder.loadTexts: bwSipStatsNotifyResponsesEntry.setDescription('This row contains information on a particular SIP status code received or sent in response to an Notify')
bwSipStatsNotifyResponseCodeValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 9, 1, 29, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 999)))
if mibBuilder.loadTexts: bwSipStatsNotifyResponseCodeValue.setStatus('current')
if mibBuilder.loadTexts: bwSipStatsNotifyResponseCodeValue.setDescription('This integer represents a SIP status code. The rest of the information in this row is related to this value.')
bwSipStatsNotifyResponseIns = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 9, 1, 29, 1, 2), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSipStatsNotifyResponseIns.setStatus('current')
if mibBuilder.loadTexts: bwSipStatsNotifyResponseIns.setDescription('This counter represents the number of SIP responses received in response to a Notify')
bwSipStatsNotifyResponseOuts = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 9, 1, 29, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSipStatsNotifyResponseOuts.setStatus('current')
if mibBuilder.loadTexts: bwSipStatsNotifyResponseOuts.setDescription('This counter represents the number of SIP responses sent in response to a Notify')
bwSipStatsOtherResponsesTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 9, 1, 30), )
if mibBuilder.loadTexts: bwSipStatsOtherResponsesTable.setStatus('current')
if mibBuilder.loadTexts: bwSipStatsOtherResponsesTable.setDescription('This table contains the counters for all SIP responses to the Other requests received or sent by BroadWorks. Each counter is a 32-Bit counter. The response code is used to index into the table. Here are all the response codes: 100, 180, 181, 182, 183, 200, 300, 301, 302, 305, 380, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 420, 480, 481, 482, 483, 484, 485, 486, 487, 500, 501, 502, 503, 504, 505, 600, 603, 604, 606')
bwSipStatsOtherResponsesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 9, 1, 30, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwSipStatsOtherResponseCodeValue"))
if mibBuilder.loadTexts: bwSipStatsOtherResponsesEntry.setStatus('current')
if mibBuilder.loadTexts: bwSipStatsOtherResponsesEntry.setDescription('This row contains information on a particular SIP status code received or sent in response to an Other')
bwSipStatsOtherResponseCodeValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 9, 1, 30, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 999)))
if mibBuilder.loadTexts: bwSipStatsOtherResponseCodeValue.setStatus('current')
if mibBuilder.loadTexts: bwSipStatsOtherResponseCodeValue.setDescription('This integer represents a SIP status code. The rest of the information in this row is related to this value.')
bwSipStatsOtherResponseIns = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 9, 1, 30, 1, 2), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSipStatsOtherResponseIns.setStatus('current')
if mibBuilder.loadTexts: bwSipStatsOtherResponseIns.setDescription('This counter represents the number of SIP responses received in response to an Other')
bwSipStatsOtherResponseOuts = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 9, 1, 30, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSipStatsOtherResponseOuts.setStatus('current')
if mibBuilder.loadTexts: bwSipStatsOtherResponseOuts.setDescription('This counter represents the number of SIP responses sent in response to an Other')
bwSipStatsRetryInvites = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 9, 1, 31), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSipStatsRetryInvites.setStatus('current')
if mibBuilder.loadTexts: bwSipStatsRetryInvites.setDescription('This counter reflects the total number of INVITE retries that have been sent by the user agent.')
bwSipStatsRetryByes = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 9, 1, 32), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSipStatsRetryByes.setStatus('current')
if mibBuilder.loadTexts: bwSipStatsRetryByes.setDescription('This counter reflects the total number of BYE retries that have been sent by the user agent.')
bwSipStatsRetryCancels = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 9, 1, 33), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSipStatsRetryCancels.setStatus('current')
if mibBuilder.loadTexts: bwSipStatsRetryCancels.setDescription('This counter reflects the total number of CANCEL retries that have been sent by the user agent.')
bwSipStatsRetryResponses = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 9, 1, 34), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSipStatsRetryResponses.setStatus('current')
if mibBuilder.loadTexts: bwSipStatsRetryResponses.setDescription('This counter reflects the total number of RESPONSES retries that have been sent by the user agent.')
bwSipStatsSubscribeIns = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 9, 1, 35), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSipStatsSubscribeIns.setStatus('current')
if mibBuilder.loadTexts: bwSipStatsSubscribeIns.setDescription('This counter reflects the total number of SUBSCRIBE message that have been received at the AS.')
bwSipStatsSubscribeOuts = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 9, 1, 36), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSipStatsSubscribeOuts.setStatus('current')
if mibBuilder.loadTexts: bwSipStatsSubscribeOuts.setDescription('This counter reflects the total number of SUBSCRIBE message that have been sent by the AS.')
bwSipStatsMessageIns = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 9, 1, 37), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSipStatsMessageIns.setStatus('current')
if mibBuilder.loadTexts: bwSipStatsMessageIns.setDescription('This counter reflects the total number of MESSAGE message that have been received at the AS.')
bwSipStatsMessageOuts = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 9, 1, 38), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSipStatsMessageOuts.setStatus('current')
if mibBuilder.loadTexts: bwSipStatsMessageOuts.setDescription('This counter reflects the total number of MESSAGE message that have been sent by the AS.')
bwSipStatsSubscribeResponsesTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 9, 1, 39), )
if mibBuilder.loadTexts: bwSipStatsSubscribeResponsesTable.setStatus('current')
if mibBuilder.loadTexts: bwSipStatsSubscribeResponsesTable.setDescription('This table contains the counters for all SIP responses to the Subscribe requests received or sent by BroadWorks. Each counter is a 32-Bit counter. The response code is used to index into the table. Here are all the response codes: 100, 180, 181, 182, 183, 200, 300, 301, 302, 305, 380, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 420, 480, 481, 482, 483, 484, 485, 486, 487, 500, 501, 502, 503, 504, 505, 600, 603, 604, 606')
bwSipStatsSubscribeResponsesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 9, 1, 39, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwSipStatsSubscribeResponseCodeValue"))
if mibBuilder.loadTexts: bwSipStatsSubscribeResponsesEntry.setStatus('current')
if mibBuilder.loadTexts: bwSipStatsSubscribeResponsesEntry.setDescription('This row contains information on a particular SIP status code received or sent in response to a Subscribe')
bwSipStatsSubscribeResponseCodeValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 9, 1, 39, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 999)))
if mibBuilder.loadTexts: bwSipStatsSubscribeResponseCodeValue.setStatus('current')
if mibBuilder.loadTexts: bwSipStatsSubscribeResponseCodeValue.setDescription('This integer represents a SIP status code. The rest of the information in this row is related to this value.')
bwSipStatsSubscribeResponseIns = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 9, 1, 39, 1, 2), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSipStatsSubscribeResponseIns.setStatus('current')
if mibBuilder.loadTexts: bwSipStatsSubscribeResponseIns.setDescription('This counter represents the number of SIP responses received in response to a Subscribe')
bwSipStatsSubscribeResponseOuts = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 9, 1, 39, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSipStatsSubscribeResponseOuts.setStatus('current')
if mibBuilder.loadTexts: bwSipStatsSubscribeResponseOuts.setDescription('This counter represents the number of SIP responses sent in response to a Subscribe')
bwSipStatsMessageResponsesTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 9, 1, 40), )
if mibBuilder.loadTexts: bwSipStatsMessageResponsesTable.setStatus('current')
if mibBuilder.loadTexts: bwSipStatsMessageResponsesTable.setDescription('This table contains the counters for all SIP responses to the Message requests received or sent by BroadWorks. Each counter is a 32-Bit counter. The response code is used to index into the table. Here are all the response codes: 100, 180, 181, 182, 183, 200, 300, 301, 302, 305, 380, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 420, 480, 481, 482, 483, 484, 485, 486, 487, 500, 501, 502, 503, 504, 505, 600, 603, 604, 606')
bwSipStatsMessageResponsesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 9, 1, 40, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwSipStatsMessageResponseCodeValue"))
if mibBuilder.loadTexts: bwSipStatsMessageResponsesEntry.setStatus('current')
if mibBuilder.loadTexts: bwSipStatsMessageResponsesEntry.setDescription('This row contains information on a particular SIP status code received or sent in response to a Message')
bwSipStatsMessageResponseCodeValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 9, 1, 40, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 999)))
if mibBuilder.loadTexts: bwSipStatsMessageResponseCodeValue.setStatus('current')
if mibBuilder.loadTexts: bwSipStatsMessageResponseCodeValue.setDescription('This integer represents a SIP status code. The rest of the information in this row is related to this value.')
bwSipStatsMessageResponseIns = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 9, 1, 40, 1, 2), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSipStatsMessageResponseIns.setStatus('current')
if mibBuilder.loadTexts: bwSipStatsMessageResponseIns.setDescription('This counter represents the number of SIP responses received in response to a Message')
bwSipStatsMessageResponseOuts = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 9, 1, 40, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSipStatsMessageResponseOuts.setStatus('current')
if mibBuilder.loadTexts: bwSipStatsMessageResponseOuts.setDescription('This counter represents the number of SIP responses sent in response to a Message')
bwSipStatsUpdateIns = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 9, 1, 41), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSipStatsUpdateIns.setStatus('current')
if mibBuilder.loadTexts: bwSipStatsUpdateIns.setDescription('This counter reflects the total number of UPDATE requests received by BroadWorks.')
bwSipStatsUpdateOuts = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 9, 1, 42), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSipStatsUpdateOuts.setStatus('current')
if mibBuilder.loadTexts: bwSipStatsUpdateOuts.setDescription('This counter reflects the total number of UPDATE requests sent by BroadWorks.')
bwSipStatsUpdateResponseTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 9, 1, 43), )
if mibBuilder.loadTexts: bwSipStatsUpdateResponseTable.setStatus('current')
if mibBuilder.loadTexts: bwSipStatsUpdateResponseTable.setDescription('This table contains the counters for all SIP responses to the Message requests received or sent by BroadWorks. Each counter is a 32-Bit counter. The response code is used to index into the table. Here are all the response codes: 100, 180, 181, 182, 183, 200, 300, 301, 302, 305, 380, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 420, 480, 481, 482, 483, 484, 485, 486, 487, 500, 501, 502, 503, 504, 505, 600, 603, 604, 606')
bwSipStatsUpdateResponseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 9, 1, 43, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwSipStatsUpdateResponseCodeValue"))
if mibBuilder.loadTexts: bwSipStatsUpdateResponseEntry.setStatus('current')
if mibBuilder.loadTexts: bwSipStatsUpdateResponseEntry.setDescription('This row contains information on a particular SIP status code received or sent in response to an Update message')
bwSipStatsUpdateResponseCodeValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 9, 1, 43, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 999)))
if mibBuilder.loadTexts: bwSipStatsUpdateResponseCodeValue.setStatus('current')
if mibBuilder.loadTexts: bwSipStatsUpdateResponseCodeValue.setDescription('This integer represents a SIP status code. The rest of the information in this row is related to this value.')
bwSipStatsUpdateResponseIns = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 9, 1, 43, 1, 2), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSipStatsUpdateResponseIns.setStatus('current')
if mibBuilder.loadTexts: bwSipStatsUpdateResponseIns.setDescription('This counter represents the number of SIP responses received in response to an Update message')
bwSipStatsUpdateResponseOuts = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 9, 1, 43, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSipStatsUpdateResponseOuts.setStatus('current')
if mibBuilder.loadTexts: bwSipStatsUpdateResponseOuts.setDescription('This counter represents the number of SIP responses sent in response to an Update message')
bwSipStatsSetupSignalDelay = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 9, 1, 44), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSipStatsSetupSignalDelay.setStatus('current')
if mibBuilder.loadTexts: bwSipStatsSetupSignalDelay.setDescription('This gauge is applicable to SIP originated calls. It measures the average time (in milliseconds) it takes between the receipt of an INVITE message for the origination of a new call and the transmission of an INVITE (Sip terminator), RQNT (MGCP terminator with in-band ringback), or CRCX (MGCP terminator without in-band ringback) to the primary device of the original called party (in the case of intra-group call) or to the network element of the original called party (in the case of a call to the PSTN). Delays incurred by a query to an external element (e.g. - dip to the Network Server, CNAME query, any external database interaction incurred by CPL scripting) are part of the measurement. This measurement is intended to reflect the elapsed delay between receipt of the call setup signal from the caller and transmission of the call setup signal to the called party')
bwSipStatsMinSetupSignalDelay = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 9, 1, 45), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSipStatsMinSetupSignalDelay.setStatus('current')
if mibBuilder.loadTexts: bwSipStatsMinSetupSignalDelay.setDescription('This measures the shortest SIP setup-signal delay sampled since the system was started or since this measurement was cleared')
bwSipStatsMaxSetupSignalDelay = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 9, 1, 46), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSipStatsMaxSetupSignalDelay.setStatus('current')
if mibBuilder.loadTexts: bwSipStatsMaxSetupSignalDelay.setDescription('This measures the longest SIP setup-signal delay sampled since the system was started or since this measurement was cleared')
bwSipStatsAnswerSignalDelay = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 9, 1, 47), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSipStatsAnswerSignalDelay.setStatus('current')
if mibBuilder.loadTexts: bwSipStatsAnswerSignalDelay.setDescription('This gauge measures the average time (in milliseconds) between the receipt of a 200 OK message indicating answer or a NTFY off-hook indicating answer and the transmission of a 200 OK indicating answer to the originator. This measurement is intended to reflect internal queuing, scheduling, and processing delays. This gauge is applicable to only the SIP originated calls for which the setup-signal delay is measured. Answer signal delay is not measured when the call has been forwarded, redirected, or when the call has encountered route advancing')
bwSipStatsMinAnswerSignalDelay = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 9, 1, 49), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSipStatsMinAnswerSignalDelay.setStatus('current')
if mibBuilder.loadTexts: bwSipStatsMinAnswerSignalDelay.setDescription('This measures the shortest SIP answer-signal delay sampled since the system was started or since this measurement was cleared')
bwSipStatsMaxAnswerSignalDelay = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 9, 1, 50), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSipStatsMaxAnswerSignalDelay.setStatus('current')
if mibBuilder.loadTexts: bwSipStatsMaxAnswerSignalDelay.setDescription('This measures the longest SIP answer-signal delay sampled since the system was started or since this measurement was cleared')
bwSipStatsRegistrationsPerMinute = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 9, 1, 51), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwSipStatsRegistrationsPerMinute.setStatus('current')
if mibBuilder.loadTexts: bwSipStatsRegistrationsPerMinute.setDescription('This gauge measures the rate at which the Application Server receives SIP REGISTER messages. It uses the timestamps of up to the last 100 registrations received in calculating the rate')
bwSipStatsMsgRetryPercentageToOther = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 9, 1, 52), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwSipStatsMsgRetryPercentageToOther.setStatus('current')
if mibBuilder.loadTexts: bwSipStatsMsgRetryPercentageToOther.setDescription('This gauge measures the percentage of SIP requests and reliable responses sent (to nodes other than those covered by bwSipStatsMsgRetryToNeTable) due to retry. Of up to the last 100 requests and reliable responses sent, this gauge calculates the percentage sent due to retransmission (i.e. - gauge = (SIP request retransmissions + SIP reliable response retransmissions) / (SIP request initial transmissions + SIP request retransmissions + SIP reliable response initial transmissions + SIP reliable response retransmissions)')
bwSipStatsMsgRetryToNeTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 9, 1, 53), )
if mibBuilder.loadTexts: bwSipStatsMsgRetryToNeTable.setStatus('current')
if mibBuilder.loadTexts: bwSipStatsMsgRetryToNeTable.setDescription('This gauge table consists of a bwSipStatsMsgRetryToNEEntry per Network Element address. A Network Element can be a Network Server, Media Server, a Network Gateway, etc - anything but an access device.')
bwSipStatsMsgRetryToNeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 9, 1, 53, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwSipStatsMsgRetryToNeID"))
if mibBuilder.loadTexts: bwSipStatsMsgRetryToNeEntry.setStatus('current')
if mibBuilder.loadTexts: bwSipStatsMsgRetryToNeEntry.setDescription('This row contains information on a particular Network Element')
bwSipStatsMsgRetryToNeID = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 9, 1, 53, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwSipStatsMsgRetryToNeID.setStatus('current')
if mibBuilder.loadTexts: bwSipStatsMsgRetryToNeID.setDescription('This integer represents the unique index of a Network Element')
bwSipStatsMsgRetryToNeAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 9, 1, 53, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwSipStatsMsgRetryToNeAddr.setStatus('current')
if mibBuilder.loadTexts: bwSipStatsMsgRetryToNeAddr.setDescription('This string represents a Network Element address')
bwSipStatsMsgRetryToNePercentage = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 9, 1, 53, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwSipStatsMsgRetryToNePercentage.setStatus('current')
if mibBuilder.loadTexts: bwSipStatsMsgRetryToNePercentage.setDescription('The gauge measures for that particular Network Element the percentage of SIP requests and reliable responses sent due to retry. Of up to the last 100 requests and reliable responses sent to a particular NetworkElement address, this gauge calculates the percentage sent due to retransmission (i.e. - gauge = (SIP request retransmissions + SIP reliable response retransmissions) / (SIP request initial transmissions + SIP request retransmissions + SIP reliable response initial transmissions + SIP reliable response retransmissions).')
bwSipStatsActiveTcpConnections = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 9, 1, 54), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwSipStatsActiveTcpConnections.setStatus('current')
if mibBuilder.loadTexts: bwSipStatsActiveTcpConnections.setDescription('This gauge is incremented whenever a SIP TCP connection is established. It decremented whenever a connection is closed.')
bwSipStatsTcpIns = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 9, 1, 55), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSipStatsTcpIns.setStatus('current')
if mibBuilder.loadTexts: bwSipStatsTcpIns.setDescription('This counter is incremented whenever a SIP message is received via TCP.')
bwSipStatsTcpOuts = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 9, 1, 56), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSipStatsTcpOuts.setStatus('current')
if mibBuilder.loadTexts: bwSipStatsTcpOuts.setDescription('This counter is incremented whenever a SIP message is sent via TCP.')
bwSipStatsTcpFailures = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 9, 1, 57), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSipStatsTcpFailures.setStatus('current')
if mibBuilder.loadTexts: bwSipStatsTcpFailures.setDescription('This counter is incremented whenever a SIP message was attempted to be sent via TCP but failed.')
bwSipStatsUdpIns = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 9, 1, 58), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSipStatsUdpIns.setStatus('current')
if mibBuilder.loadTexts: bwSipStatsUdpIns.setDescription('This counter is incremented whenever a SIP message is received via UDP.')
bwSipStatsUdpOuts = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 9, 1, 59), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSipStatsUdpOuts.setStatus('current')
if mibBuilder.loadTexts: bwSipStatsUdpOuts.setDescription('This counter is incremented whenever a SIP message is sent via UDP.')
bwSIPReclaimedStaleTcpConnections = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 9, 1, 60), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSIPReclaimedStaleTcpConnections.setStatus('current')
if mibBuilder.loadTexts: bwSIPReclaimedStaleTcpConnections.setDescription('This counter is incremented every time a SIP TCP connection is reclaimed because it is stale.')
bwSIPTcpTotalConnections = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 9, 1, 61), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwSIPTcpTotalConnections.setStatus('obsolete')
if mibBuilder.loadTexts: bwSIPTcpTotalConnections.setDescription('This counter is set with the current number of SIP TCP connections.')
bwCongestionManagementNeighborTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 9, 2, 1), )
if mibBuilder.loadTexts: bwCongestionManagementNeighborTable.setStatus('current')
if mibBuilder.loadTexts: bwCongestionManagementNeighborTable.setDescription('This table consists of bwCongestionManagementNeighborEntry. ')
bwCongestionManagementNeighborEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 9, 2, 1, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwCongestionManagementNeighborIndex"))
if mibBuilder.loadTexts: bwCongestionManagementNeighborEntry.setStatus('current')
if mibBuilder.loadTexts: bwCongestionManagementNeighborEntry.setDescription('This row contains information on a particular neighbor.')
bwCongestionManagementNeighborIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 9, 2, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwCongestionManagementNeighborIndex.setStatus('current')
if mibBuilder.loadTexts: bwCongestionManagementNeighborIndex.setDescription('This integer represents the neighbor index in the system')
bwCongestionManagementNeighborIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 9, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwCongestionManagementNeighborIpAddress.setStatus('current')
if mibBuilder.loadTexts: bwCongestionManagementNeighborIpAddress.setDescription('The IP address of the neighbor.')
bwCongestionManagementNeighborInviteIn = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 9, 2, 1, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCongestionManagementNeighborInviteIn.setStatus('current')
if mibBuilder.loadTexts: bwCongestionManagementNeighborInviteIn.setDescription('This is the number of Invite requests that the neighbor sends to the AS.')
bwCongestionManagementNeighborInviteOut = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 9, 2, 1, 1, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCongestionManagementNeighborInviteOut.setStatus('current')
if mibBuilder.loadTexts: bwCongestionManagementNeighborInviteOut.setDescription('This is the number of Invite requests that the AS sends to the neighbor.')
bwCongestionManagementNeighborRegisterIn = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 9, 2, 1, 1, 5), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCongestionManagementNeighborRegisterIn.setStatus('current')
if mibBuilder.loadTexts: bwCongestionManagementNeighborRegisterIn.setDescription('This is the number of Register requests that the neighbor sends to the AS.')
bwCongestionManagementNeighborOptionsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 9, 2, 1, 1, 6), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCongestionManagementNeighborOptionsIn.setStatus('current')
if mibBuilder.loadTexts: bwCongestionManagementNeighborOptionsIn.setDescription('This is the number of Options requests that the neighbor sends to the AS.')
bwCongestionManagementNeighborOptionsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 9, 2, 1, 1, 7), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCongestionManagementNeighborOptionsOut.setStatus('current')
if mibBuilder.loadTexts: bwCongestionManagementNeighborOptionsOut.setDescription('This is the number of Options requests that the AS sends to the neighbor.')
bwCongestionManagementNeighborSubscribeNotifyIn = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 9, 2, 1, 1, 8), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCongestionManagementNeighborSubscribeNotifyIn.setStatus('current')
if mibBuilder.loadTexts: bwCongestionManagementNeighborSubscribeNotifyIn.setDescription('This is the number of Subscribe and Notify requests that the neighbor sends to the AS.')
bwCongestionManagementNeighborSubscribeNotifyOut = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 9, 2, 1, 1, 9), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCongestionManagementNeighborSubscribeNotifyOut.setStatus('current')
if mibBuilder.loadTexts: bwCongestionManagementNeighborSubscribeNotifyOut.setDescription('This is the number of Subscribe and Notify requests that the AS sends to the neighbor.')
bwCongestionManagementNeighbor5xxIn = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 9, 2, 1, 1, 10), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCongestionManagementNeighbor5xxIn.setStatus('current')
if mibBuilder.loadTexts: bwCongestionManagementNeighbor5xxIn.setDescription('This is the number of 5xx responses that the neighbor sends to the AS.')
bwCongestionManagementNeighborCallpMessageInRate = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 9, 2, 1, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwCongestionManagementNeighborCallpMessageInRate.setStatus('current')
if mibBuilder.loadTexts: bwCongestionManagementNeighborCallpMessageInRate.setDescription('This is the incoming callp messages (requests and responses) rate.')
bwCongestionManagementNeighborCallpMessageOutRate = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 9, 2, 1, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwCongestionManagementNeighborCallpMessageOutRate.setStatus('current')
if mibBuilder.loadTexts: bwCongestionManagementNeighborCallpMessageOutRate.setDescription('This is the outgoing callp messages (requests and responses) rate.')
bwCongestionManagementNeighborCallpRequestInRate = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 9, 2, 1, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwCongestionManagementNeighborCallpRequestInRate.setStatus('current')
if mibBuilder.loadTexts: bwCongestionManagementNeighborCallpRequestInRate.setDescription('This is the incoming callp requests rate.')
bwCongestionManagementNeighborNonCallpMessageInRate = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 9, 2, 1, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwCongestionManagementNeighborNonCallpMessageInRate.setStatus('current')
if mibBuilder.loadTexts: bwCongestionManagementNeighborNonCallpMessageInRate.setDescription('This is the incoming non-callp messages (requests and responses) rate.')
bwCongestionManagementNeighborNonCallpMessageOutRate = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 9, 2, 1, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwCongestionManagementNeighborNonCallpMessageOutRate.setStatus('current')
if mibBuilder.loadTexts: bwCongestionManagementNeighborNonCallpMessageOutRate.setDescription('This is the outgoing non-callp messages (requests and responses) rate.')
bwCongestionManagementNeighborNonCallpRequestInRate = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 9, 2, 1, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwCongestionManagementNeighborNonCallpRequestInRate.setStatus('current')
if mibBuilder.loadTexts: bwCongestionManagementNeighborNonCallpRequestInRate.setDescription('This is the incoming non-callp requests rate.')
bwCongestionManagementNeighborState = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 9, 2, 1, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwCongestionManagementNeighborState.setStatus('current')
if mibBuilder.loadTexts: bwCongestionManagementNeighborState.setDescription('The current congestion management state of the neighbor.')
bwCongestionManagementNeighborCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 9, 2, 1, 1, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwCongestionManagementNeighborCapability.setStatus('current')
if mibBuilder.loadTexts: bwCongestionManagementNeighborCapability.setDescription('The congestion management capability of the neighbor.')
bwAuthCodeNumAttempts = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 1, 1), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwAuthCodeNumAttempts.setStatus('current')
if mibBuilder.loadTexts: bwAuthCodeNumAttempts.setDescription('This counter reflects the number of authorization attempts')
bwAuthCodeNumValidations = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 1, 2), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwAuthCodeNumValidations.setStatus('current')
if mibBuilder.loadTexts: bwAuthCodeNumValidations.setDescription('This counter reflects the number of successful validations')
bwAccountCodeNumAttempts = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwAccountCodeNumAttempts.setStatus('current')
if mibBuilder.loadTexts: bwAccountCodeNumAttempts.setDescription('This counter is incremented whenever the user is prompted for an account code in Automatic mode')
bwAccountCodesSPTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 1, 4), )
if mibBuilder.loadTexts: bwAccountCodesSPTable.setStatus('current')
if mibBuilder.loadTexts: bwAccountCodesSPTable.setDescription('This table contains the counters for Account/Authorization Codes service measurements for service providers')
bwAccountCodesGroupTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 1, 5), )
if mibBuilder.loadTexts: bwAccountCodesGroupTable.setStatus('current')
if mibBuilder.loadTexts: bwAccountCodesGroupTable.setDescription('This table contains the counters for Account/Authorization Codes service measurements for groups')
bwAccountCodeNumPerCallAttempts = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 1, 6), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwAccountCodeNumPerCallAttempts.setStatus('current')
if mibBuilder.loadTexts: bwAccountCodeNumPerCallAttempts.setDescription('This counter is incremented whenever the user is prompted for an account code in FAC-based mode')
bwAccountCodesSPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 1, 4, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwAccountCodesSPIndex"))
if mibBuilder.loadTexts: bwAccountCodesSPEntry.setStatus('current')
if mibBuilder.loadTexts: bwAccountCodesSPEntry.setDescription('This row contains the counters for Account/Authorization Codes service measurements for a service provider')
bwAccountCodesSPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 1, 4, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwAccountCodesSPIndex.setStatus('current')
if mibBuilder.loadTexts: bwAccountCodesSPIndex.setDescription('This integer represents the a service provider index in the system')
bwAccountCodesSPID = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 1, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwAccountCodesSPID.setStatus('current')
if mibBuilder.loadTexts: bwAccountCodesSPID.setDescription('This string represents a service provider ID')
bwAuthCodeSPNumAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 1, 4, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwAuthCodeSPNumAttempts.setStatus('current')
if mibBuilder.loadTexts: bwAuthCodeSPNumAttempts.setDescription('This counter reflects the number of authorization attempts for a service provider')
bwAuthCodeSPNumValidations = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 1, 4, 1, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwAuthCodeSPNumValidations.setStatus('current')
if mibBuilder.loadTexts: bwAuthCodeSPNumValidations.setDescription('This counter reflects the number of successful validations for a service provider')
bwAccountCodeSPNumAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 1, 4, 1, 5), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwAccountCodeSPNumAttempts.setStatus('current')
if mibBuilder.loadTexts: bwAccountCodeSPNumAttempts.setDescription('Number of attempts to validate an Account Code (for a given service provider).')
bwAccountCodeSPNumPerCallAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 1, 4, 1, 6), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwAccountCodeSPNumPerCallAttempts.setStatus('current')
if mibBuilder.loadTexts: bwAccountCodeSPNumPerCallAttempts.setDescription('Number of attempts to validate an Account Code (for a given service provider).')
bwAccountCodesGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 1, 5, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwAccountCodesGroupIndex"))
if mibBuilder.loadTexts: bwAccountCodesGroupEntry.setStatus('current')
if mibBuilder.loadTexts: bwAccountCodesGroupEntry.setDescription('This row contains the counters for Account/Authorization Codes service measurements for a group')
bwAccountCodesGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 1, 5, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwAccountCodesGroupIndex.setStatus('current')
if mibBuilder.loadTexts: bwAccountCodesGroupIndex.setDescription('This integer represents the a group index in the system')
bwAccountCodesGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 1, 5, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwAccountCodesGroupID.setStatus('current')
if mibBuilder.loadTexts: bwAccountCodesGroupID.setDescription('This string represents a Group ID')
bwAuthCodeGroupNumAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 1, 5, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwAuthCodeGroupNumAttempts.setStatus('current')
if mibBuilder.loadTexts: bwAuthCodeGroupNumAttempts.setDescription('This counter reflects the number of authorization attempts for a group')
bwAuthCodeGroupNumValidations = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 1, 5, 1, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwAuthCodeGroupNumValidations.setStatus('current')
if mibBuilder.loadTexts: bwAuthCodeGroupNumValidations.setDescription('This counter reflects the number of successful validations for a group')
bwAccountCodeGroupNumAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 1, 5, 1, 5), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwAccountCodeGroupNumAttempts.setStatus('current')
if mibBuilder.loadTexts: bwAccountCodeGroupNumAttempts.setDescription('This counter reflects the number of Account code attempts for a group')
bwAccountCodeGroupNumPerCallAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 1, 5, 1, 6), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwAccountCodeGroupNumPerCallAttempts.setStatus('current')
if mibBuilder.loadTexts: bwAccountCodeGroupNumPerCallAttempts.setDescription('Number of attempts to validate an Account Code (for a given group).')
bwAnonymousCallsNumRejected = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 2, 1), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwAnonymousCallsNumRejected.setStatus('current')
if mibBuilder.loadTexts: bwAnonymousCallsNumRejected.setDescription('This counter reflects the number of incoming anonymous calls rejected')
bwAnonymousCallRejectionSPTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 2, 2), )
if mibBuilder.loadTexts: bwAnonymousCallRejectionSPTable.setStatus('current')
if mibBuilder.loadTexts: bwAnonymousCallRejectionSPTable.setDescription('This table contains the counters for Anonymous Call Rejection service measurements for service providers')
bwAnonymousCallRejectionGroupTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 2, 3), )
if mibBuilder.loadTexts: bwAnonymousCallRejectionGroupTable.setStatus('current')
if mibBuilder.loadTexts: bwAnonymousCallRejectionGroupTable.setDescription('This table contains the counters for Anonymous Call Rejection service measurements for group')
bwAnonymousCallRejectionSPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 2, 2, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwAnonymousCallRejectionSPIndex"))
if mibBuilder.loadTexts: bwAnonymousCallRejectionSPEntry.setStatus('current')
if mibBuilder.loadTexts: bwAnonymousCallRejectionSPEntry.setDescription('This row contains the counters for Anonymous Call Rejection service measurements for a service provider')
bwAnonymousCallRejectionSPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 2, 2, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwAnonymousCallRejectionSPIndex.setStatus('current')
if mibBuilder.loadTexts: bwAnonymousCallRejectionSPIndex.setDescription('This integer represents the a service provider index in the system')
bwAnonymousCallRejectionSPID = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 2, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwAnonymousCallRejectionSPID.setStatus('current')
if mibBuilder.loadTexts: bwAnonymousCallRejectionSPID.setDescription('This string represents a service provider ID')
bwAnonymousCallsSPNumRejected = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 2, 2, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwAnonymousCallsSPNumRejected.setStatus('current')
if mibBuilder.loadTexts: bwAnonymousCallsSPNumRejected.setDescription('This counter reflects the number of incoming anonymous calls rejected by a service provider')
bwAnonymousCallRejectionGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 2, 3, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwAnonymousCallRejectionGroupIndex"))
if mibBuilder.loadTexts: bwAnonymousCallRejectionGroupEntry.setStatus('current')
if mibBuilder.loadTexts: bwAnonymousCallRejectionGroupEntry.setDescription('This row contains the counters for Anonymous Call Rejection service measurements for a group')
bwAnonymousCallRejectionGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 2, 3, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwAnonymousCallRejectionGroupIndex.setStatus('current')
if mibBuilder.loadTexts: bwAnonymousCallRejectionGroupIndex.setDescription('This integer represents the a group index in the system')
bwAnonymousCallRejectionGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 2, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwAnonymousCallRejectionGroupID.setStatus('current')
if mibBuilder.loadTexts: bwAnonymousCallRejectionGroupID.setDescription('This string represents a group ID')
bwAnonymousCallsGroupNumRejected = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 2, 3, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwAnonymousCallsGroupNumRejected.setStatus('current')
if mibBuilder.loadTexts: bwAnonymousCallsGroupNumRejected.setDescription('This counter reflects the number of incoming anonymous calls rejected by a group')
bwAuthenticationNumChallenges = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 3, 1), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwAuthenticationNumChallenges.setStatus('current')
if mibBuilder.loadTexts: bwAuthenticationNumChallenges.setDescription('This counter reflects the number of authentication challenges')
bwAuthenticationNumValidResponses = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 3, 2), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwAuthenticationNumValidResponses.setStatus('current')
if mibBuilder.loadTexts: bwAuthenticationNumValidResponses.setDescription('This counter reflects the number of valid client authentication responses')
bwAuthenticationSPTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 3, 3), )
if mibBuilder.loadTexts: bwAuthenticationSPTable.setStatus('current')
if mibBuilder.loadTexts: bwAuthenticationSPTable.setDescription('This table contains the counters for Authentication service measurements for service providers')
bwAuthenticationGroupTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 3, 4), )
if mibBuilder.loadTexts: bwAuthenticationGroupTable.setStatus('current')
if mibBuilder.loadTexts: bwAuthenticationGroupTable.setDescription('This table contains the counters for Authentication service measurements for groups')
bwAuthenticationSPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 3, 3, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwAuthenticationSPIndex"))
if mibBuilder.loadTexts: bwAuthenticationSPEntry.setStatus('current')
if mibBuilder.loadTexts: bwAuthenticationSPEntry.setDescription('This row contains the counters for Authentication service measurements for a service provider')
bwAuthenticationSPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 3, 3, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwAuthenticationSPIndex.setStatus('current')
if mibBuilder.loadTexts: bwAuthenticationSPIndex.setDescription('This integer represents the a service provider index in the system')
bwAuthenticationSPID = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 3, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwAuthenticationSPID.setStatus('current')
if mibBuilder.loadTexts: bwAuthenticationSPID.setDescription('This string represents a service provider ID')
bwAuthenticationSPNumChallenges = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 3, 3, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwAuthenticationSPNumChallenges.setStatus('current')
if mibBuilder.loadTexts: bwAuthenticationSPNumChallenges.setDescription('This counter reflects the number of authentication challenges by a service provider')
bwAuthenticationSPNumValidResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 3, 3, 1, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwAuthenticationSPNumValidResponses.setStatus('current')
if mibBuilder.loadTexts: bwAuthenticationSPNumValidResponses.setDescription('This counter reflects the number of valid client authentication responses by a service provider')
bwAuthenticationGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 3, 4, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwAuthenticationGroupIndex"))
if mibBuilder.loadTexts: bwAuthenticationGroupEntry.setStatus('current')
if mibBuilder.loadTexts: bwAuthenticationGroupEntry.setDescription('This row contains the counters for Authentication service measurements for a group')
bwAuthenticationGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 3, 4, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwAuthenticationGroupIndex.setStatus('current')
if mibBuilder.loadTexts: bwAuthenticationGroupIndex.setDescription('This integer represents the a group index in the system')
bwAuthenticationGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 3, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwAuthenticationGroupID.setStatus('current')
if mibBuilder.loadTexts: bwAuthenticationGroupID.setDescription('This string represents a group ID')
bwAuthenticationGroupNumChallenges = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 3, 4, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwAuthenticationGroupNumChallenges.setStatus('current')
if mibBuilder.loadTexts: bwAuthenticationGroupNumChallenges.setDescription('This counter reflects the number of authentication challenges by a group')
bwAuthenticationGroupNumValidResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 3, 4, 1, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwAuthenticationGroupNumValidResponses.setStatus('current')
if mibBuilder.loadTexts: bwAuthenticationGroupNumValidResponses.setDescription('This counter reflects the number of valid client authentication responses by a group')
bwAutoAttendantNumAnswers = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 4, 1), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwAutoAttendantNumAnswers.setStatus('current')
if mibBuilder.loadTexts: bwAutoAttendantNumAnswers.setDescription('This counter reflects the number of times the Auto Attendant answers an incoming call')
bwAutoAttendantNumTransfers = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 4, 2), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwAutoAttendantNumTransfers.setStatus('current')
if mibBuilder.loadTexts: bwAutoAttendantNumTransfers.setDescription('This counter reflects the number times a call is transferred to another party (name dialing, ext. dialing, etc.) by the Auto Attendant')
bwAutoAttendantSPTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 4, 3), )
if mibBuilder.loadTexts: bwAutoAttendantSPTable.setStatus('current')
if mibBuilder.loadTexts: bwAutoAttendantSPTable.setDescription('This table contains the counters for Auto Attendant service measurements for service providers')
bwAutoAttendantGroupTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 4, 4), )
if mibBuilder.loadTexts: bwAutoAttendantGroupTable.setStatus('current')
if mibBuilder.loadTexts: bwAutoAttendantGroupTable.setDescription('This table contains the counters for Auto Attendant service measurements for Groups')
bwAutoAttendantSPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 4, 3, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwAutoAttendantSPIndex"))
if mibBuilder.loadTexts: bwAutoAttendantSPEntry.setStatus('current')
if mibBuilder.loadTexts: bwAutoAttendantSPEntry.setDescription('This row contains the counters for Auto Attendant Rejection service measurements for a service provider')
bwAutoAttendantSPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 4, 3, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwAutoAttendantSPIndex.setStatus('current')
if mibBuilder.loadTexts: bwAutoAttendantSPIndex.setDescription('This integer represents the a service provider index in the system')
bwAutoAttendantSPID = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 4, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwAutoAttendantSPID.setStatus('current')
if mibBuilder.loadTexts: bwAutoAttendantSPID.setDescription('This string represents a service provider ID')
bwAutoAttendantSPNumAnswers = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 4, 3, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwAutoAttendantSPNumAnswers.setStatus('current')
if mibBuilder.loadTexts: bwAutoAttendantSPNumAnswers.setDescription('This counter reflects the number of times the Auto Attendant answers an incoming call by a service provider')
bwAutoAttendantSPNumTransfers = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 4, 3, 1, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwAutoAttendantSPNumTransfers.setStatus('current')
if mibBuilder.loadTexts: bwAutoAttendantSPNumTransfers.setDescription('This counter reflects the number times a call is transferred to another party (name dialing, ext. dialing, etc.) by the Auto Attendant by a service provider')
bwAutoAttendantGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 4, 4, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwAutoAttendantGroupIndex"))
if mibBuilder.loadTexts: bwAutoAttendantGroupEntry.setStatus('current')
if mibBuilder.loadTexts: bwAutoAttendantGroupEntry.setDescription('This row contains the counters for Auto Attendant Rejection service measurements for a group')
bwAutoAttendantGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 4, 4, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwAutoAttendantGroupIndex.setStatus('current')
if mibBuilder.loadTexts: bwAutoAttendantGroupIndex.setDescription('This integer represents the a group index in the system')
bwAutoAttendantGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 4, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwAutoAttendantGroupID.setStatus('current')
if mibBuilder.loadTexts: bwAutoAttendantGroupID.setDescription('This string represents a group ID')
bwAutoAttendantGroupNumAnswers = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 4, 4, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwAutoAttendantGroupNumAnswers.setStatus('current')
if mibBuilder.loadTexts: bwAutoAttendantGroupNumAnswers.setDescription('This counter reflects the number of times the Auto Attendant answers an incoming call by a group')
bwAutoAttendantGroupNumTransfers = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 4, 4, 1, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwAutoAttendantGroupNumTransfers.setStatus('current')
if mibBuilder.loadTexts: bwAutoAttendantGroupNumTransfers.setDescription('This counter reflects the number times a call is transferred to another party (name dialing, ext. dialing, etc.) by the Auto Attendant by a group')
bwCallCapacityNumCallsAttempted = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 5, 1), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCallCapacityNumCallsAttempted.setStatus('current')
if mibBuilder.loadTexts: bwCallCapacityNumCallsAttempted.setDescription('This counter reflects the number of calls attempted')
bwCallCapacityNumCallsBlocked = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 5, 2), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCallCapacityNumCallsBlocked.setStatus('current')
if mibBuilder.loadTexts: bwCallCapacityNumCallsBlocked.setDescription('This counter reflects the number of calls blocked by this service')
bwCallCapacitySPTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 5, 3), )
if mibBuilder.loadTexts: bwCallCapacitySPTable.setStatus('current')
if mibBuilder.loadTexts: bwCallCapacitySPTable.setDescription('This table contains the counters for Call Capacity Management service measurements for service providers')
bwCallCapacityGroupTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 5, 4), )
if mibBuilder.loadTexts: bwCallCapacityGroupTable.setStatus('current')
if mibBuilder.loadTexts: bwCallCapacityGroupTable.setDescription('This table contains the counters for Call Capacity Management service measurements for groups')
bwCallCapacitySPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 5, 3, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwCallCapacitySPIndex"))
if mibBuilder.loadTexts: bwCallCapacitySPEntry.setStatus('current')
if mibBuilder.loadTexts: bwCallCapacitySPEntry.setDescription('This row contains the counters for Call Capacity Management service measurements for a service provider')
bwCallCapacitySPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 5, 3, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwCallCapacitySPIndex.setStatus('current')
if mibBuilder.loadTexts: bwCallCapacitySPIndex.setDescription('This integer represents the a service provider index in the system')
bwCallCapacitySPID = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 5, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwCallCapacitySPID.setStatus('current')
if mibBuilder.loadTexts: bwCallCapacitySPID.setDescription('This string represents a service provider ID')
bwCallCapacitySPNumCallsAttempted = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 5, 3, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCallCapacitySPNumCallsAttempted.setStatus('current')
if mibBuilder.loadTexts: bwCallCapacitySPNumCallsAttempted.setDescription('This counter reflects the number of calls attempted by a service provider')
bwCallCapacitySPNumCallsBlocked = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 5, 3, 1, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCallCapacitySPNumCallsBlocked.setStatus('current')
if mibBuilder.loadTexts: bwCallCapacitySPNumCallsBlocked.setDescription('This counter reflects the number of calls blocked by this service by a service provider')
bwCallCapacityGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 5, 4, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwCallCapacityGroupIndex"))
if mibBuilder.loadTexts: bwCallCapacityGroupEntry.setStatus('current')
if mibBuilder.loadTexts: bwCallCapacityGroupEntry.setDescription('This row contains the counters for Call Capacity Management service measurements for a group')
bwCallCapacityGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 5, 4, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwCallCapacityGroupIndex.setStatus('current')
if mibBuilder.loadTexts: bwCallCapacityGroupIndex.setDescription('This integer represents the a group index in the system')
bwCallCapacityGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 5, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwCallCapacityGroupID.setStatus('current')
if mibBuilder.loadTexts: bwCallCapacityGroupID.setDescription('This string represents a group ID')
bwCallCapacityGroupNumCallsAttempted = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 5, 4, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCallCapacityGroupNumCallsAttempted.setStatus('current')
if mibBuilder.loadTexts: bwCallCapacityGroupNumCallsAttempted.setDescription('This counter reflects the number of calls attempted by a group')
bwCallCapacityGroupNumCallsBlocked = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 5, 4, 1, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCallCapacityGroupNumCallsBlocked.setStatus('current')
if mibBuilder.loadTexts: bwCallCapacityGroupNumCallsBlocked.setDescription('This counter reflects the number of calls blocked by this service by a group')
bwCFANumForwarded = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 6, 1), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCFANumForwarded.setStatus('current')
if mibBuilder.loadTexts: bwCFANumForwarded.setDescription('This counter reflects the number of calls forwarded')
bwCFANumPhoneActivations = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 6, 2), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCFANumPhoneActivations.setStatus('current')
if mibBuilder.loadTexts: bwCFANumPhoneActivations.setDescription('Incremented whenever a user activates CFA via FAC')
bwCFANumPhoneDeactivations = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 6, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCFANumPhoneDeactivations.setStatus('current')
if mibBuilder.loadTexts: bwCFANumPhoneDeactivations.setDescription('Incremented whenever a user deactivates CFN via FAC')
bwCallForwardingAlwaysSPTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 6, 4), )
if mibBuilder.loadTexts: bwCallForwardingAlwaysSPTable.setStatus('current')
if mibBuilder.loadTexts: bwCallForwardingAlwaysSPTable.setDescription('This table contains the counters for Call Forwarding Always service measurements for service providers')
bwCFADestinationChanged = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 6, 5), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCFADestinationChanged.setStatus('current')
if mibBuilder.loadTexts: bwCFADestinationChanged.setDescription('Incremented whenever a user changes the CFA destination via FAC')
bwCallForwardingAlwaysGroupTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 6, 6), )
if mibBuilder.loadTexts: bwCallForwardingAlwaysGroupTable.setStatus('current')
if mibBuilder.loadTexts: bwCallForwardingAlwaysGroupTable.setDescription('This table contains the counters for Call Forwarding Always service measurements for groups')
bwCallForwardingAlwaysSPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 6, 4, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwCallForwardingAlwaysSPIndex"))
if mibBuilder.loadTexts: bwCallForwardingAlwaysSPEntry.setStatus('current')
if mibBuilder.loadTexts: bwCallForwardingAlwaysSPEntry.setDescription('This row contains the counters for Call Forwarding Always service measurements for a service provider')
bwCallForwardingAlwaysSPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 6, 4, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwCallForwardingAlwaysSPIndex.setStatus('current')
if mibBuilder.loadTexts: bwCallForwardingAlwaysSPIndex.setDescription('This integer represents the a service provider index in the system')
bwCallForwardingAlwaysSPID = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 6, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwCallForwardingAlwaysSPID.setStatus('current')
if mibBuilder.loadTexts: bwCallForwardingAlwaysSPID.setDescription('This string represents a service provider ID')
bwCFASPNumForwarded = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 6, 4, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCFASPNumForwarded.setStatus('current')
if mibBuilder.loadTexts: bwCFASPNumForwarded.setDescription('This counter reflects the number of calls forwarded for a given service provider')
bwCFASPNumPhoneActivations = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 6, 4, 1, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCFASPNumPhoneActivations.setStatus('current')
if mibBuilder.loadTexts: bwCFASPNumPhoneActivations.setDescription('Number of times CFA has been activated via FAC for users in a given service provider')
bwCFASPNumPhoneDeactivations = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 6, 4, 1, 5), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCFASPNumPhoneDeactivations.setStatus('current')
if mibBuilder.loadTexts: bwCFASPNumPhoneDeactivations.setDescription('Number of times CFA has been deactivated via FAC for users in a given service provider')
bwCFASPDestinationChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 6, 4, 1, 6), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCFASPDestinationChanged.setStatus('current')
if mibBuilder.loadTexts: bwCFASPDestinationChanged.setDescription('Number of times CFA destination has been changed, by FAC only for a given service provider')
bwCallForwardingAlwaysGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 6, 6, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwCallForwardingAlwaysGroupIndex"))
if mibBuilder.loadTexts: bwCallForwardingAlwaysGroupEntry.setStatus('current')
if mibBuilder.loadTexts: bwCallForwardingAlwaysGroupEntry.setDescription('This row contains the counters for Call Forwarding Always service measurements for a group')
bwCallForwardingAlwaysGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 6, 6, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwCallForwardingAlwaysGroupIndex.setStatus('current')
if mibBuilder.loadTexts: bwCallForwardingAlwaysGroupIndex.setDescription('This integer represents the a group index in the system')
bwCallForwardingAlwaysGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 6, 6, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwCallForwardingAlwaysGroupID.setStatus('current')
if mibBuilder.loadTexts: bwCallForwardingAlwaysGroupID.setDescription('This string represents a group ID')
bwCFAGroupNumForwarded = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 6, 6, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCFAGroupNumForwarded.setStatus('current')
if mibBuilder.loadTexts: bwCFAGroupNumForwarded.setDescription('This counter reflects the number of calls forwarded for a given group')
bwCFAGroupNumPhoneActivations = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 6, 6, 1, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCFAGroupNumPhoneActivations.setStatus('current')
if mibBuilder.loadTexts: bwCFAGroupNumPhoneActivations.setDescription('Number of times CFA has been activated via FAC for users in a given group')
bwCFAGroupNumPhoneDeactivations = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 6, 6, 1, 5), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCFAGroupNumPhoneDeactivations.setStatus('current')
if mibBuilder.loadTexts: bwCFAGroupNumPhoneDeactivations.setDescription('Number of times CFA has been deactivated via FAC for users in a given group')
bwCFAGroupDestinationChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 6, 6, 1, 6), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCFAGroupDestinationChanged.setStatus('current')
if mibBuilder.loadTexts: bwCFAGroupDestinationChanged.setDescription('Number of times CFA destination has been changed, by FAC only for a given group')
bwCFBNumForwarded = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 7, 1), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCFBNumForwarded.setStatus('current')
if mibBuilder.loadTexts: bwCFBNumForwarded.setDescription('This counter reflects the number of times a call is forwarded by this service')
bwCallForwardingBusySPTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 7, 2), )
if mibBuilder.loadTexts: bwCallForwardingBusySPTable.setStatus('current')
if mibBuilder.loadTexts: bwCallForwardingBusySPTable.setDescription('This table contains the counters for Call Forwarding Busy service measurements for service providers')
bwCFBNumPhoneActivations = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 7, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCFBNumPhoneActivations.setStatus('current')
if mibBuilder.loadTexts: bwCFBNumPhoneActivations.setDescription('Total number of times CFB has been activated via FAC')
bwCFBNumPhoneDeactivations = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 7, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCFBNumPhoneDeactivations.setStatus('current')
if mibBuilder.loadTexts: bwCFBNumPhoneDeactivations.setDescription('Total number of times CFB has been deactivated via FAC')
bwCFBDestinationChanged = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 7, 5), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCFBDestinationChanged.setStatus('current')
if mibBuilder.loadTexts: bwCFBDestinationChanged.setDescription('Incremented whenever a user changes the CFB destination via FAC')
bwCallForwardingBusyGroupTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 7, 6), )
if mibBuilder.loadTexts: bwCallForwardingBusyGroupTable.setStatus('current')
if mibBuilder.loadTexts: bwCallForwardingBusyGroupTable.setDescription('This table contains the counters for Call Forwarding Busy service measurements for groups')
bwCallForwardingBusySPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 7, 2, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwCallForwardingBusySPIndex"))
if mibBuilder.loadTexts: bwCallForwardingBusySPEntry.setStatus('current')
if mibBuilder.loadTexts: bwCallForwardingBusySPEntry.setDescription('This row contains the counters for Call Forwarding Busy service measurements for a service provider')
bwCallForwardingBusySPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 7, 2, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwCallForwardingBusySPIndex.setStatus('current')
if mibBuilder.loadTexts: bwCallForwardingBusySPIndex.setDescription('This integer represents the a service provider index in the system')
bwCallForwardingBusySPID = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 7, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwCallForwardingBusySPID.setStatus('current')
if mibBuilder.loadTexts: bwCallForwardingBusySPID.setDescription('This string represents a service provider ID')
bwCFBSPNumForwarded = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 7, 2, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCFBSPNumForwarded.setStatus('current')
if mibBuilder.loadTexts: bwCFBSPNumForwarded.setDescription('This counter reflects the number of times a call is forwarded by this service by a service provider')
bwCFBSPNumPhoneActivations = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 7, 2, 1, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCFBSPNumPhoneActivations.setStatus('current')
if mibBuilder.loadTexts: bwCFBSPNumPhoneActivations.setDescription('Number of times CFB has been activated via FAC for users in a given service provider')
bwCFBSPNumPhoneDeactivations = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 7, 2, 1, 5), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCFBSPNumPhoneDeactivations.setStatus('current')
if mibBuilder.loadTexts: bwCFBSPNumPhoneDeactivations.setDescription('Number of times CFB has been deactivated via FAC for users in a given service provider')
bwCFBSPDestinationChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 7, 2, 1, 6), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCFBSPDestinationChanged.setStatus('current')
if mibBuilder.loadTexts: bwCFBSPDestinationChanged.setDescription('Number of times CFB destination has been changed, by FAC only for a given service provider')
bwCallForwardingBusyGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 7, 6, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwCallForwardingBusyGroupIndex"))
if mibBuilder.loadTexts: bwCallForwardingBusyGroupEntry.setStatus('current')
if mibBuilder.loadTexts: bwCallForwardingBusyGroupEntry.setDescription('This row contains the counters for Call Forwarding Busy service measurements for a group')
bwCallForwardingBusyGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 7, 6, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwCallForwardingBusyGroupIndex.setStatus('current')
if mibBuilder.loadTexts: bwCallForwardingBusyGroupIndex.setDescription('This integer represents the a group index in the system')
bwCallForwardingBusyGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 7, 6, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwCallForwardingBusyGroupID.setStatus('current')
if mibBuilder.loadTexts: bwCallForwardingBusyGroupID.setDescription('This string represents a group ID')
bwCFBGroupNumForwarded = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 7, 6, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCFBGroupNumForwarded.setStatus('current')
if mibBuilder.loadTexts: bwCFBGroupNumForwarded.setDescription('This counter reflects the number of times a call is forwarded by this service by a group')
bwCFBGroupNumPhoneActivations = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 7, 6, 1, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCFBGroupNumPhoneActivations.setStatus('current')
if mibBuilder.loadTexts: bwCFBGroupNumPhoneActivations.setDescription('Number of times CFB has been activated via FAC for users in a given group')
bwCFBGroupNumPhoneDeactivations = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 7, 6, 1, 5), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCFBGroupNumPhoneDeactivations.setStatus('current')
if mibBuilder.loadTexts: bwCFBGroupNumPhoneDeactivations.setDescription('Number of times CFB has been deactivated via FAC for users in a given group')
bwCFBGroupDestinationChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 7, 6, 1, 6), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCFBGroupDestinationChanged.setStatus('current')
if mibBuilder.loadTexts: bwCFBGroupDestinationChanged.setDescription('Number of times CFB destination has been changed, by FAC only for a given group')
bwCFNANumForwarded = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 8, 1), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCFNANumForwarded.setStatus('current')
if mibBuilder.loadTexts: bwCFNANumForwarded.setDescription('This counter reflects the number of times a call is forwarded by this service')
bwCallForwardingNoAnswerSPTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 8, 2), )
if mibBuilder.loadTexts: bwCallForwardingNoAnswerSPTable.setStatus('current')
if mibBuilder.loadTexts: bwCallForwardingNoAnswerSPTable.setDescription('This table contains the counters for Call Forwarding No Answer service measurements for service providers')
bwCFNADestinationChanged = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 8, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCFNADestinationChanged.setStatus('current')
if mibBuilder.loadTexts: bwCFNADestinationChanged.setDescription('Incremented whenever a user changes the CFNA destination via FAC')
bwCFNANumPhoneActivations = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 8, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCFNANumPhoneActivations.setStatus('current')
if mibBuilder.loadTexts: bwCFNANumPhoneActivations.setDescription('Total number of times CFNA has been activated via FAC')
bwCFNANumPhoneDeactivations = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 8, 5), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCFNANumPhoneDeactivations.setStatus('current')
if mibBuilder.loadTexts: bwCFNANumPhoneDeactivations.setDescription('Total number of times CFNA has been deactivated via FAC')
bwCallForwardingNoAnswerGroupTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 8, 6), )
if mibBuilder.loadTexts: bwCallForwardingNoAnswerGroupTable.setStatus('current')
if mibBuilder.loadTexts: bwCallForwardingNoAnswerGroupTable.setDescription('This table contains the counters for Call Forwarding No Answer service measurements for groups')
bwCallForwardingNoAnswerSPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 8, 2, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwCallForwardingNoAnswerSPIndex"))
if mibBuilder.loadTexts: bwCallForwardingNoAnswerSPEntry.setStatus('current')
if mibBuilder.loadTexts: bwCallForwardingNoAnswerSPEntry.setDescription('This row contains the counters for Call Forwarding No Answer service measurements for a service provider')
bwCallForwardingNoAnswerSPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 8, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwCallForwardingNoAnswerSPIndex.setStatus('current')
if mibBuilder.loadTexts: bwCallForwardingNoAnswerSPIndex.setDescription('This integer represents the a service provider index in the system')
bwCallForwardingNoAnswerSPID = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 8, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwCallForwardingNoAnswerSPID.setStatus('current')
if mibBuilder.loadTexts: bwCallForwardingNoAnswerSPID.setDescription('This string represents a service provider ID')
bwCFNASPNumForwarded = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 8, 2, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCFNASPNumForwarded.setStatus('current')
if mibBuilder.loadTexts: bwCFNASPNumForwarded.setDescription('This counter reflects the number of times a call is forwarded by this service by a service provider')
bwCFNASPDestinationChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 8, 2, 1, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCFNASPDestinationChanged.setStatus('current')
if mibBuilder.loadTexts: bwCFNASPDestinationChanged.setDescription('Number of times CFNA destination has been changed, by FAC only for a given service provider')
bwCFNASPNumPhoneActivations = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 8, 2, 1, 5), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCFNASPNumPhoneActivations.setStatus('current')
if mibBuilder.loadTexts: bwCFNASPNumPhoneActivations.setDescription('Number of times CFNA has been activated via FAC for users in a given service provider')
bwCFNASPNumPhoneDeactivations = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 8, 2, 1, 6), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCFNASPNumPhoneDeactivations.setStatus('current')
if mibBuilder.loadTexts: bwCFNASPNumPhoneDeactivations.setDescription('Number of times CFNA has been deactivated via FAC for users in a given service provider')
bwCallForwardingNoAnswerGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 8, 6, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwCallForwardingNoAnswerGroupIndex"))
if mibBuilder.loadTexts: bwCallForwardingNoAnswerGroupEntry.setStatus('current')
if mibBuilder.loadTexts: bwCallForwardingNoAnswerGroupEntry.setDescription('This row contains the counters for Call Forwarding No Answer service measurements for a group')
bwCallForwardingNoAnswerGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 8, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwCallForwardingNoAnswerGroupIndex.setStatus('current')
if mibBuilder.loadTexts: bwCallForwardingNoAnswerGroupIndex.setDescription('This integer represents the a group index in the system')
bwCallForwardingNoAnswerGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 8, 6, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwCallForwardingNoAnswerGroupID.setStatus('current')
if mibBuilder.loadTexts: bwCallForwardingNoAnswerGroupID.setDescription('This string represents a group ID')
bwCFNAGroupNumForwarded = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 8, 6, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCFNAGroupNumForwarded.setStatus('current')
if mibBuilder.loadTexts: bwCFNAGroupNumForwarded.setDescription('This counter reflects the number of times a call is forwarded by this service by a group')
bwCFNAGroupDestinationChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 8, 6, 1, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCFNAGroupDestinationChanged.setStatus('current')
if mibBuilder.loadTexts: bwCFNAGroupDestinationChanged.setDescription('Number of times CFNA destination has been changed, by FAC only for a given group')
bwCFNAGroupNumPhoneActivations = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 8, 6, 1, 5), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCFNAGroupNumPhoneActivations.setStatus('current')
if mibBuilder.loadTexts: bwCFNAGroupNumPhoneActivations.setDescription('Number of times CFNA has been activated via FAC for users in a given group')
bwCFNAGroupNumPhoneDeactivations = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 8, 6, 1, 6), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCFNAGroupNumPhoneDeactivations.setStatus('current')
if mibBuilder.loadTexts: bwCFNAGroupNumPhoneDeactivations.setDescription('Number of times CFNA has been deactivated via FAC for users in a given group')
bwCallNotifyNumNotifications = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 9, 1), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCallNotifyNumNotifications.setStatus('current')
if mibBuilder.loadTexts: bwCallNotifyNumNotifications.setDescription('This counter reflects the number of times a criteria evaluates successfully and the service executes')
bwCallNotifySPTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 9, 2), )
if mibBuilder.loadTexts: bwCallNotifySPTable.setStatus('current')
if mibBuilder.loadTexts: bwCallNotifySPTable.setDescription('This table contains the counters for Call Notify service measurements for service providers')
bwCallNotifyGroupTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 9, 3), )
if mibBuilder.loadTexts: bwCallNotifyGroupTable.setStatus('current')
if mibBuilder.loadTexts: bwCallNotifyGroupTable.setDescription('This table contains the counters for Call Notify service measurements for groups')
bwCallNotifySPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 9, 2, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwCallNotifySPIndex"))
if mibBuilder.loadTexts: bwCallNotifySPEntry.setStatus('current')
if mibBuilder.loadTexts: bwCallNotifySPEntry.setDescription('This row contains the counters for Call Notify service measurements for a service provider')
bwCallNotifySPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 9, 2, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwCallNotifySPIndex.setStatus('current')
if mibBuilder.loadTexts: bwCallNotifySPIndex.setDescription('This integer represents the a service provider index in the system')
bwCallNotifySPID = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 9, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwCallNotifySPID.setStatus('current')
if mibBuilder.loadTexts: bwCallNotifySPID.setDescription('This string represents a service provider ID')
bwCallNotifySPNumNotifications = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 9, 2, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCallNotifySPNumNotifications.setStatus('current')
if mibBuilder.loadTexts: bwCallNotifySPNumNotifications.setDescription('This counter reflects the number of times a criteria evaluates successfully and the service executes by a service provider')
bwCallNotifyGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 9, 3, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwCallNotifyGroupIndex"))
if mibBuilder.loadTexts: bwCallNotifyGroupEntry.setStatus('current')
if mibBuilder.loadTexts: bwCallNotifyGroupEntry.setDescription('This row contains the counters for Call Notify service measurements for a group')
bwCallNotifyGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 9, 3, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwCallNotifyGroupIndex.setStatus('current')
if mibBuilder.loadTexts: bwCallNotifyGroupIndex.setDescription('This integer represents the a group index in the system')
bwCallNotifyGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 9, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwCallNotifyGroupID.setStatus('current')
if mibBuilder.loadTexts: bwCallNotifyGroupID.setDescription('This string represents a group ID')
bwCallNotifyGroupNumNotifications = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 9, 3, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCallNotifyGroupNumNotifications.setStatus('current')
if mibBuilder.loadTexts: bwCallNotifyGroupNumNotifications.setDescription('This counter reflects the number of times a criteria evaluates successfully and the service executes by a group')
bwCallParkNumAttempts = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 10, 1), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCallParkNumAttempts.setStatus('current')
if mibBuilder.loadTexts: bwCallParkNumAttempts.setDescription('This counter reflects the number of times a user attempts to park a call')
bwCallParkNumFailures = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 10, 2), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCallParkNumFailures.setStatus('current')
if mibBuilder.loadTexts: bwCallParkNumFailures.setDescription('This counter reflects the number of failed attempts to park a call')
bwCallParkNumRetrieveAttempts = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 10, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCallParkNumRetrieveAttempts.setStatus('current')
if mibBuilder.loadTexts: bwCallParkNumRetrieveAttempts.setDescription('This counter reflects the number of times a user attempts to retrieve a parked call')
bwCallParkNumRetrieveFailures = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 10, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCallParkNumRetrieveFailures.setStatus('current')
if mibBuilder.loadTexts: bwCallParkNumRetrieveFailures.setDescription('This counter reflects the number of times an attempt to retrieve a parked call fails')
bwCallParkSPTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 10, 5), )
if mibBuilder.loadTexts: bwCallParkSPTable.setStatus('current')
if mibBuilder.loadTexts: bwCallParkSPTable.setDescription('This table contains the counters for Call Park service measurements for service providers')
bwCallParkGroupTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 10, 6), )
if mibBuilder.loadTexts: bwCallParkGroupTable.setStatus('current')
if mibBuilder.loadTexts: bwCallParkGroupTable.setDescription('This table contains the counters for Call Park service measurements for groups')
bwCallParkSPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 10, 5, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwCallParkSPIndex"))
if mibBuilder.loadTexts: bwCallParkSPEntry.setStatus('current')
if mibBuilder.loadTexts: bwCallParkSPEntry.setDescription('This row contains the counters for Call Park service measurements for a service provider')
bwCallParkSPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 10, 5, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwCallParkSPIndex.setStatus('current')
if mibBuilder.loadTexts: bwCallParkSPIndex.setDescription('This integer represents the a service provider index in the system')
bwCallParkSPID = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 10, 5, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwCallParkSPID.setStatus('current')
if mibBuilder.loadTexts: bwCallParkSPID.setDescription('This string represents a service provider ID')
bwCallParkSPNumAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 10, 5, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCallParkSPNumAttempts.setStatus('current')
if mibBuilder.loadTexts: bwCallParkSPNumAttempts.setDescription('This counter reflects the number of times a user attempts to park a call by a service provider')
bwCallParkSPNumFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 10, 5, 1, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCallParkSPNumFailures.setStatus('current')
if mibBuilder.loadTexts: bwCallParkSPNumFailures.setDescription('This counter reflects the number of failed attempts to park a call by a service provider')
bwCallParkSPNumRetrieveAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 10, 5, 1, 5), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCallParkSPNumRetrieveAttempts.setStatus('current')
if mibBuilder.loadTexts: bwCallParkSPNumRetrieveAttempts.setDescription('This counter reflects the number of times a user attempts to retrieve a parked call by a service provider')
bwCallParkSPNumRetrieveFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 10, 5, 1, 6), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCallParkSPNumRetrieveFailures.setStatus('current')
if mibBuilder.loadTexts: bwCallParkSPNumRetrieveFailures.setDescription('This counter reflects the number of times an attempt to retrieve a parked call fails by a service provider')
bwCallParkGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 10, 6, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwCallParkGroupIndex"))
if mibBuilder.loadTexts: bwCallParkGroupEntry.setStatus('current')
if mibBuilder.loadTexts: bwCallParkGroupEntry.setDescription('This row contains the counters for Call Park service measurements for a group')
bwCallParkGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 10, 6, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwCallParkGroupIndex.setStatus('current')
if mibBuilder.loadTexts: bwCallParkGroupIndex.setDescription('This integer represents the a group index in the system')
bwCallParkGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 10, 6, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwCallParkGroupID.setStatus('current')
if mibBuilder.loadTexts: bwCallParkGroupID.setDescription('This string represents a group ID')
bwCallParkGroupNumAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 10, 6, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCallParkGroupNumAttempts.setStatus('current')
if mibBuilder.loadTexts: bwCallParkGroupNumAttempts.setDescription('This counter reflects the number of times a user attempts to park a call by a group')
bwCallParkGroupNumFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 10, 6, 1, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCallParkGroupNumFailures.setStatus('current')
if mibBuilder.loadTexts: bwCallParkGroupNumFailures.setDescription('This counter reflects the number of failed attempts to park a call by a group')
bwCallParkGroupNumRetrieveAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 10, 6, 1, 5), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCallParkGroupNumRetrieveAttempts.setStatus('current')
if mibBuilder.loadTexts: bwCallParkGroupNumRetrieveAttempts.setDescription('This counter reflects the number of times a user attempts to retrieve a parked call by a group')
bwCallParkGroupNumRetrieveFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 10, 6, 1, 6), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCallParkGroupNumRetrieveFailures.setStatus('current')
if mibBuilder.loadTexts: bwCallParkGroupNumRetrieveFailures.setDescription('This counter reflects the number of times an attempt to retrieve a parked call fails by a group')
bwCallPickupNumAttempts = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 11, 1), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCallPickupNumAttempts.setStatus('current')
if mibBuilder.loadTexts: bwCallPickupNumAttempts.setDescription('This counter reflects the number of user attempts to pick up an incoming call')
bwCallPickupNumFailures = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 11, 2), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCallPickupNumFailures.setStatus('current')
if mibBuilder.loadTexts: bwCallPickupNumFailures.setDescription('This counter reflects the number of failed attempts to pick up an incoming call')
bwCallPickupSPTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 11, 3), )
if mibBuilder.loadTexts: bwCallPickupSPTable.setStatus('current')
if mibBuilder.loadTexts: bwCallPickupSPTable.setDescription('This table contains the counters for Call Pickup service measurements for service providers')
bwCallPickupGroupTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 11, 4), )
if mibBuilder.loadTexts: bwCallPickupGroupTable.setStatus('current')
if mibBuilder.loadTexts: bwCallPickupGroupTable.setDescription('This table contains the counters for Call Pickup service measurements for groups')
bwCallPickupSPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 11, 3, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwCallPickupSPIndex"))
if mibBuilder.loadTexts: bwCallPickupSPEntry.setStatus('current')
if mibBuilder.loadTexts: bwCallPickupSPEntry.setDescription('This row contains the counters for Call Pickup service measurements for a service provider')
bwCallPickupSPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 11, 3, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwCallPickupSPIndex.setStatus('current')
if mibBuilder.loadTexts: bwCallPickupSPIndex.setDescription('This integer represents the a service provider index in the system')
bwCallPickupSPID = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 11, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwCallPickupSPID.setStatus('current')
if mibBuilder.loadTexts: bwCallPickupSPID.setDescription('This string represents a service provider ID')
bwCallPickupSPNumAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 11, 3, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCallPickupSPNumAttempts.setStatus('current')
if mibBuilder.loadTexts: bwCallPickupSPNumAttempts.setDescription('This counter reflects the number of user attempts to pick up an incoming call by a service provider')
bwCallPickupSPNumFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 11, 3, 1, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCallPickupSPNumFailures.setStatus('current')
if mibBuilder.loadTexts: bwCallPickupSPNumFailures.setDescription('This counter reflects the number of failed attempts to pick up an incoming call by a service provider')
bwCallPickupGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 11, 4, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwCallPickupGroupIndex"))
if mibBuilder.loadTexts: bwCallPickupGroupEntry.setStatus('current')
if mibBuilder.loadTexts: bwCallPickupGroupEntry.setDescription('This row contains the counters for Call Pickup service measurements for a group')
bwCallPickupGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 11, 4, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwCallPickupGroupIndex.setStatus('current')
if mibBuilder.loadTexts: bwCallPickupGroupIndex.setDescription('This integer represents the a Group index in the system')
bwCallPickupGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 11, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwCallPickupGroupID.setStatus('current')
if mibBuilder.loadTexts: bwCallPickupGroupID.setDescription('This string represents a Group ID')
bwCallPickupGroupNumAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 11, 4, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCallPickupGroupNumAttempts.setStatus('current')
if mibBuilder.loadTexts: bwCallPickupGroupNumAttempts.setDescription('This counter reflects the number of user attempts to pick up an incoming call by a Group')
bwCallPickupGroupNumFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 11, 4, 1, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCallPickupGroupNumFailures.setStatus('current')
if mibBuilder.loadTexts: bwCallPickupGroupNumFailures.setDescription('This counter reflects the number of failed attempts to pick up an incoming call by a Group')
bwCallReturnNumReturns = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 12, 1), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCallReturnNumReturns.setStatus('current')
if mibBuilder.loadTexts: bwCallReturnNumReturns.setDescription('This counter reflects the number of times this service is executed')
bwCallReturnSPTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 12, 2), )
if mibBuilder.loadTexts: bwCallReturnSPTable.setStatus('current')
if mibBuilder.loadTexts: bwCallReturnSPTable.setDescription('This table contains the counters for Call Return service measurements for service providers')
bwCallReturnGroupTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 12, 3), )
if mibBuilder.loadTexts: bwCallReturnGroupTable.setStatus('current')
if mibBuilder.loadTexts: bwCallReturnGroupTable.setDescription('This table contains the counters for Call Return service measurements for groups')
bwCallReturnSPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 12, 2, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwCallReturnSPIndex"))
if mibBuilder.loadTexts: bwCallReturnSPEntry.setStatus('current')
if mibBuilder.loadTexts: bwCallReturnSPEntry.setDescription('This row contains the counters for Call Return service measurements for a service provider')
bwCallReturnSPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 12, 2, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwCallReturnSPIndex.setStatus('current')
if mibBuilder.loadTexts: bwCallReturnSPIndex.setDescription('This integer represents the a service provider index in the system')
bwCallReturnSPID = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 12, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwCallReturnSPID.setStatus('current')
if mibBuilder.loadTexts: bwCallReturnSPID.setDescription('This string represents a service provider ID')
bwCallReturnSPNumReturns = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 12, 2, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCallReturnSPNumReturns.setStatus('current')
if mibBuilder.loadTexts: bwCallReturnSPNumReturns.setDescription('This counter reflects the number of times this service is executed by a service provider')
bwCallReturnGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 12, 3, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwCallReturnGroupIndex"))
if mibBuilder.loadTexts: bwCallReturnGroupEntry.setStatus('current')
if mibBuilder.loadTexts: bwCallReturnGroupEntry.setDescription('This row contains the counters for Call Return service measurements for a group')
bwCallReturnGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 12, 3, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwCallReturnGroupIndex.setStatus('current')
if mibBuilder.loadTexts: bwCallReturnGroupIndex.setDescription('This integer represents the a group index in the system')
bwCallReturnGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 12, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwCallReturnGroupID.setStatus('current')
if mibBuilder.loadTexts: bwCallReturnGroupID.setDescription('This string represents a group ID')
bwCallReturnGroupNumReturns = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 12, 3, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCallReturnGroupNumReturns.setStatus('current')
if mibBuilder.loadTexts: bwCallReturnGroupNumReturns.setDescription('This counter reflects the number of times this service is executed by a group')
bwCommPilotCallMgrNumDial = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 13, 1), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCommPilotCallMgrNumDial.setStatus('current')
if mibBuilder.loadTexts: bwCommPilotCallMgrNumDial.setDescription('This counter reflects the number of dial requests from a CommPilot Call Mgr that results in an outgoing call')
bwCommPilotCallMgrNumAnswer = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 13, 2), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCommPilotCallMgrNumAnswer.setStatus('current')
if mibBuilder.loadTexts: bwCommPilotCallMgrNumAnswer.setDescription('This counter reflects the number of times an incoming call being answered from the CommPilot Call Mgr results in that call being answered')
bwCommPilotCallMgrNumRelease = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 13, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCommPilotCallMgrNumRelease.setStatus('current')
if mibBuilder.loadTexts: bwCommPilotCallMgrNumRelease.setDescription('This counter reflects the number of times a Release request from the CommPilot Call Mgr results in the call being released')
bwCommPilotCallMgrNumHold = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 13, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCommPilotCallMgrNumHold.setStatus('current')
if mibBuilder.loadTexts: bwCommPilotCallMgrNumHold.setDescription('This counter reflects the number of times a Hold request from the CommPilot Call Mgr results in the call being held')
bwCommPilotCallMgrNumTransfer = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 13, 5), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCommPilotCallMgrNumTransfer.setStatus('current')
if mibBuilder.loadTexts: bwCommPilotCallMgrNumTransfer.setDescription('This counter reflects the number of times a Transfer request from the CommPilot Call Mgr results in the call being transferred')
bwCommPilotCallMgrNumConference = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 13, 6), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCommPilotCallMgrNumConference.setStatus('current')
if mibBuilder.loadTexts: bwCommPilotCallMgrNumConference.setDescription('This counter reflects the number of times a Conference request from the CommPilot Call Mgr results in two calls being conferenced')
bwCommPilotCallMgrNumTransferVM = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 13, 7), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCommPilotCallMgrNumTransferVM.setStatus('current')
if mibBuilder.loadTexts: bwCommPilotCallMgrNumTransferVM.setDescription('This counter reflects the number of times a user attempts to send a call to voicemail')
bwCommPilotCallManagerSPTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 13, 8), )
if mibBuilder.loadTexts: bwCommPilotCallManagerSPTable.setStatus('current')
if mibBuilder.loadTexts: bwCommPilotCallManagerSPTable.setDescription('This table contains the counters for CommPilot Call Manager service measurements for service providers')
bwCommPilotCallMgrNumConferenceAnswer = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 13, 9), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCommPilotCallMgrNumConferenceAnswer.setStatus('current')
if mibBuilder.loadTexts: bwCommPilotCallMgrNumConferenceAnswer.setDescription('This counter reflects the number of times a held Conference has been answered/retrieved from the CommPilot Call Mgr')
bwCommPilotCallMgrNumConferenceHold = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 13, 10), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCommPilotCallMgrNumConferenceHold.setStatus('current')
if mibBuilder.loadTexts: bwCommPilotCallMgrNumConferenceHold.setDescription('This counter reflects the number of times a Conference has been held from the CommPilot Call Mgr')
bwCommPilotCallMgrNumConferenceRelease = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 13, 11), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCommPilotCallMgrNumConferenceRelease.setStatus('current')
if mibBuilder.loadTexts: bwCommPilotCallMgrNumConferenceRelease.setDescription('This counter reflects the number of times a Conference has been released from the CommPilot Call Mgr')
bwCommPilotCallManagerGroupTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 13, 12), )
if mibBuilder.loadTexts: bwCommPilotCallManagerGroupTable.setStatus('current')
if mibBuilder.loadTexts: bwCommPilotCallManagerGroupTable.setDescription('This table contains the counters for CommPilot Call Manager service measurements for service providers')
bwCommPilotCallMgrNumTransferCC = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 13, 13), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCommPilotCallMgrNumTransferCC.setStatus('current')
if mibBuilder.loadTexts: bwCommPilotCallMgrNumTransferCC.setDescription('This counter reflects the number of CAP callActions with actionType of xferCC which are received by the system')
bwCommPilotCallMgrNumConferenceAdd = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 13, 14), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCommPilotCallMgrNumConferenceAdd.setStatus('current')
if mibBuilder.loadTexts: bwCommPilotCallMgrNumConferenceAdd.setDescription('This counter reflects the number of CAP callActions with actionType of ConfAdd which are received by the system')
bwCommPilotCallMgrNumCallPark = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 13, 15), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCommPilotCallMgrNumCallPark.setStatus('current')
if mibBuilder.loadTexts: bwCommPilotCallMgrNumCallPark.setDescription('Number of CallPark call actions that have been received.')
bwCommPilotCallMgrNumGroupCallPark = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 13, 16), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCommPilotCallMgrNumGroupCallPark.setStatus('current')
if mibBuilder.loadTexts: bwCommPilotCallMgrNumGroupCallPark.setDescription('Number of GroupCallPark call actions that have been received.')
bwCommPilotCallMgrNumCallParkRetrieve = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 13, 17), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCommPilotCallMgrNumCallParkRetrieve.setStatus('current')
if mibBuilder.loadTexts: bwCommPilotCallMgrNumCallParkRetrieve.setDescription('Number of CallParkRetrieve call actions that have been received.')
bwCommPilotCallManagerSPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 13, 8, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwCommPilotCallManagerSPIndex"))
if mibBuilder.loadTexts: bwCommPilotCallManagerSPEntry.setStatus('current')
if mibBuilder.loadTexts: bwCommPilotCallManagerSPEntry.setDescription('This row contains the counters for CommPilot Call Manager service measurements for a service provider')
bwCommPilotCallManagerSPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 13, 8, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwCommPilotCallManagerSPIndex.setStatus('current')
if mibBuilder.loadTexts: bwCommPilotCallManagerSPIndex.setDescription('This integer represents the a service provider index in the system')
bwCommPilotCallManagerSPID = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 13, 8, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwCommPilotCallManagerSPID.setStatus('current')
if mibBuilder.loadTexts: bwCommPilotCallManagerSPID.setDescription('This string represents a service provider ID')
bwCommPilotCallMgrSPNumDial = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 13, 8, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCommPilotCallMgrSPNumDial.setStatus('current')
if mibBuilder.loadTexts: bwCommPilotCallMgrSPNumDial.setDescription('This counter reflects the number of dial requests from a CommPilot Call Mgr that results in an outgoing call by a service provider')
bwCommPilotCallMgrSPNumAnswer = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 13, 8, 1, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCommPilotCallMgrSPNumAnswer.setStatus('current')
if mibBuilder.loadTexts: bwCommPilotCallMgrSPNumAnswer.setDescription('This counter reflects the number of times an incoming call being answered from the CommPilot Call Mgr results in that call being answered by a service provider')
bwCommPilotCallMgrSPNumRelease = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 13, 8, 1, 5), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCommPilotCallMgrSPNumRelease.setStatus('current')
if mibBuilder.loadTexts: bwCommPilotCallMgrSPNumRelease.setDescription('This counter reflects the number of times a Release request from the CommPilot Call Mgr results in the call being released by a service provider')
bwCommPilotCallMgrSPNumHold = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 13, 8, 1, 6), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCommPilotCallMgrSPNumHold.setStatus('current')
if mibBuilder.loadTexts: bwCommPilotCallMgrSPNumHold.setDescription('This counter reflects the number of times a Hold request from the CommPilot Call Mgr results in the call being held by a service provider')
bwCommPilotCallMgrSPNumTransfer = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 13, 8, 1, 7), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCommPilotCallMgrSPNumTransfer.setStatus('current')
if mibBuilder.loadTexts: bwCommPilotCallMgrSPNumTransfer.setDescription('This counter reflects the number of times a Transfer request from the CommPilot Call Mgr results in the call being transferred by a service provider')
bwCommPilotCallMgrSPNumConference = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 13, 8, 1, 8), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCommPilotCallMgrSPNumConference.setStatus('current')
if mibBuilder.loadTexts: bwCommPilotCallMgrSPNumConference.setDescription('This counter reflects the number of times a Conference request from the CommPilot Call Mgr results in two calls being conferenced by a service provider')
bwCommPilotCallMgrSPNumTransferVM = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 13, 8, 1, 9), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCommPilotCallMgrSPNumTransferVM.setStatus('current')
if mibBuilder.loadTexts: bwCommPilotCallMgrSPNumTransferVM.setDescription('This counter reflects the number of times a user attempts to send a call to voicemail by a service provider')
bwCommPilotCallMgrSPNumConferenceAnswer = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 13, 8, 1, 10), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCommPilotCallMgrSPNumConferenceAnswer.setStatus('current')
if mibBuilder.loadTexts: bwCommPilotCallMgrSPNumConferenceAnswer.setDescription('This counter reflects the number of times a held conference has been answered/retrieved from the CommPilot Call Mgr by a service provider')
bwCommPilotCallMgrSPNumConferenceHold = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 13, 8, 1, 11), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCommPilotCallMgrSPNumConferenceHold.setStatus('current')
if mibBuilder.loadTexts: bwCommPilotCallMgrSPNumConferenceHold.setDescription('This counter reflects the number of times a Conference has been held from the CommPilot Call Mgr by a service provider by the service provider')
bwCommPilotCallMgrSPNumConferenceRelease = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 13, 8, 1, 12), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCommPilotCallMgrSPNumConferenceRelease.setStatus('current')
if mibBuilder.loadTexts: bwCommPilotCallMgrSPNumConferenceRelease.setDescription('This counter reflects the number of times a Conference has been released from the CommPilot Call Mgr by a service provider by the service provider')
bwCommPilotCallMgrSPNumTransferCC = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 13, 8, 1, 13), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCommPilotCallMgrSPNumTransferCC.setStatus('current')
if mibBuilder.loadTexts: bwCommPilotCallMgrSPNumTransferCC.setDescription('This counter reflects the number of CAP callActions with actionType of xferCC which are received by the system per service provider')
bwCommPilotCallMgrSPNumConferenceAdd = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 13, 8, 1, 14), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCommPilotCallMgrSPNumConferenceAdd.setStatus('current')
if mibBuilder.loadTexts: bwCommPilotCallMgrSPNumConferenceAdd.setDescription('This counter reflects the number of CAP callActions with actionType of ConfAdd which are received by the system per service provider')
bwCommPilotCallMgrSPNumCallPark = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 13, 8, 1, 15), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCommPilotCallMgrSPNumCallPark.setStatus('current')
if mibBuilder.loadTexts: bwCommPilotCallMgrSPNumCallPark.setDescription('Number of CallPark call actions that have been received for a user under the service provider.')
bwCommPilotCallMgrSPNumGroupCallPark = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 13, 8, 1, 16), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCommPilotCallMgrSPNumGroupCallPark.setStatus('current')
if mibBuilder.loadTexts: bwCommPilotCallMgrSPNumGroupCallPark.setDescription('Number of GroupCallPark call actions that have been received for a user under the service provider.')
bwCommPilotCallMgrSPNumCallParkRetrieve = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 13, 8, 1, 17), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCommPilotCallMgrSPNumCallParkRetrieve.setStatus('current')
if mibBuilder.loadTexts: bwCommPilotCallMgrSPNumCallParkRetrieve.setDescription('Number of CallParkRetrieve call actions that have been received for a user under the service provider.')
bwCommPilotCallManagerGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 13, 12, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwCommPilotCallManagerGroupIndex"))
if mibBuilder.loadTexts: bwCommPilotCallManagerGroupEntry.setStatus('current')
if mibBuilder.loadTexts: bwCommPilotCallManagerGroupEntry.setDescription('This row contains the counters for CommPilot Call Manager service measurements for a group')
bwCommPilotCallManagerGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 13, 12, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwCommPilotCallManagerGroupIndex.setStatus('current')
if mibBuilder.loadTexts: bwCommPilotCallManagerGroupIndex.setDescription('This integer represents the a group index in the system')
bwCommPilotCallManagerGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 13, 12, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwCommPilotCallManagerGroupID.setStatus('current')
if mibBuilder.loadTexts: bwCommPilotCallManagerGroupID.setDescription('This string represents a group ID')
bwCommPilotCallMgrGroupNumDial = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 13, 12, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCommPilotCallMgrGroupNumDial.setStatus('current')
if mibBuilder.loadTexts: bwCommPilotCallMgrGroupNumDial.setDescription('This counter reflects the number of dial requests from a CommPilot Call Mgr that results in an outgoing call by a group')
bwCommPilotCallMgrGroupNumAnswer = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 13, 12, 1, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCommPilotCallMgrGroupNumAnswer.setStatus('current')
if mibBuilder.loadTexts: bwCommPilotCallMgrGroupNumAnswer.setDescription('This counter reflects the number of times an incoming call being answered from the CommPilot Call Mgr results in that call being answered by a group')
bwCommPilotCallMgrGroupNumRelease = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 13, 12, 1, 5), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCommPilotCallMgrGroupNumRelease.setStatus('current')
if mibBuilder.loadTexts: bwCommPilotCallMgrGroupNumRelease.setDescription('This counter reflects the number of times a Release request from the CommPilot Call Mgr results in the call being released by a group')
bwCommPilotCallMgrGroupNumHold = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 13, 12, 1, 6), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCommPilotCallMgrGroupNumHold.setStatus('current')
if mibBuilder.loadTexts: bwCommPilotCallMgrGroupNumHold.setDescription('This counter reflects the number of times a Hold request from the CommPilot Call Mgr results in the call being held by a group')
bwCommPilotCallMgrGroupNumTransfer = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 13, 12, 1, 7), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCommPilotCallMgrGroupNumTransfer.setStatus('current')
if mibBuilder.loadTexts: bwCommPilotCallMgrGroupNumTransfer.setDescription('This counter reflects the number of times a Transfer request from the CommPilot Call Mgr results in the call being transferred by a group')
bwCommPilotCallMgrGroupNumConference = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 13, 12, 1, 8), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCommPilotCallMgrGroupNumConference.setStatus('current')
if mibBuilder.loadTexts: bwCommPilotCallMgrGroupNumConference.setDescription('This counter reflects the number of times a Conference request from the CommPilot Call Mgr results in two calls being conferenced by a group')
bwCommPilotCallMgrGroupNumTransferVM = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 13, 12, 1, 9), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCommPilotCallMgrGroupNumTransferVM.setStatus('current')
if mibBuilder.loadTexts: bwCommPilotCallMgrGroupNumTransferVM.setDescription('This counter reflects the number of times a user attempts to send a call to voicemail by a group')
bwCommPilotCallMgrGroupNumConferenceAnswer = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 13, 12, 1, 10), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCommPilotCallMgrGroupNumConferenceAnswer.setStatus('current')
if mibBuilder.loadTexts: bwCommPilotCallMgrGroupNumConferenceAnswer.setDescription('This counter reflects the number of times a held conference has been answered/retrieved from the CommPilot Call Mgr by a group')
bwCommPilotCallMgrGroupNumConferenceHold = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 13, 12, 1, 11), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCommPilotCallMgrGroupNumConferenceHold.setStatus('current')
if mibBuilder.loadTexts: bwCommPilotCallMgrGroupNumConferenceHold.setDescription('This counter reflects the number of times a Conference has been held from the CommPilot Call Mgr by a group')
bwCommPilotCallMgrGroupNumConferenceRelease = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 13, 12, 1, 12), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCommPilotCallMgrGroupNumConferenceRelease.setStatus('current')
if mibBuilder.loadTexts: bwCommPilotCallMgrGroupNumConferenceRelease.setDescription('This counter reflects the number of times a Conference has been released from the CommPilot Call Mgr by a group')
bwCommPilotCallMgrGroupNumTransferCC = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 13, 12, 1, 13), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCommPilotCallMgrGroupNumTransferCC.setStatus('current')
if mibBuilder.loadTexts: bwCommPilotCallMgrGroupNumTransferCC.setDescription('This counter reflects the number of CAP callActions with actionType of xferCC which are received by the system per group')
bwCommPilotCallMgrGroupNumConferenceAdd = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 13, 12, 1, 14), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCommPilotCallMgrGroupNumConferenceAdd.setStatus('current')
if mibBuilder.loadTexts: bwCommPilotCallMgrGroupNumConferenceAdd.setDescription('This counter reflects the number of CAP callActions with actionType of ConfAdd which are received by the system per group')
bwCommPilotCallMgrGroupNumCallPark = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 13, 12, 1, 15), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCommPilotCallMgrGroupNumCallPark.setStatus('current')
if mibBuilder.loadTexts: bwCommPilotCallMgrGroupNumCallPark.setDescription('Number of CallPark call actions that have been received for a user in the group.')
bwCommPilotCallMgrGroupNumGroupCallPark = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 13, 12, 1, 16), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCommPilotCallMgrGroupNumGroupCallPark.setStatus('current')
if mibBuilder.loadTexts: bwCommPilotCallMgrGroupNumGroupCallPark.setDescription('Number of GroupCallPark call actions that have been received for a user in the group.')
bwCommPilotCallMgrGroupNumCallParkRetrieve = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 13, 12, 1, 17), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCommPilotCallMgrGroupNumCallParkRetrieve.setStatus('current')
if mibBuilder.loadTexts: bwCommPilotCallMgrGroupNumCallParkRetrieve.setDescription('Number of CallParkRetrieve call actions that have been received for a user in the group.')
bwDoNotDisturbNumInvoked = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 14, 1), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwDoNotDisturbNumInvoked.setStatus('current')
if mibBuilder.loadTexts: bwDoNotDisturbNumInvoked.setDescription('This counter reflects the number of times this service is triggered')
bwDoNotDisturbSPTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 14, 2), )
if mibBuilder.loadTexts: bwDoNotDisturbSPTable.setStatus('current')
if mibBuilder.loadTexts: bwDoNotDisturbSPTable.setDescription('This table contains the counters for Do Not Disturb service measurements for service providers')
bwDndPhoneActivations = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 14, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwDndPhoneActivations.setStatus('current')
if mibBuilder.loadTexts: bwDndPhoneActivations.setDescription('Total number of times DND has been activated via FAC')
bwDndPhoneDeactivations = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 14, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwDndPhoneDeactivations.setStatus('current')
if mibBuilder.loadTexts: bwDndPhoneDeactivations.setDescription('Total number of times DND has been deactivated via FAC')
bwDoNotDisturbGroupTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 14, 5), )
if mibBuilder.loadTexts: bwDoNotDisturbGroupTable.setStatus('current')
if mibBuilder.loadTexts: bwDoNotDisturbGroupTable.setDescription('This table contains the counters for Do Not Disturb service measurements for groups')
bwDoNotDisturbSPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 14, 2, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwDoNotDisturbSPIndex"))
if mibBuilder.loadTexts: bwDoNotDisturbSPEntry.setStatus('current')
if mibBuilder.loadTexts: bwDoNotDisturbSPEntry.setDescription('This row contains the counters for Do Not Disturb service measurements for a service provider')
bwDoNotDisturbSPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 14, 2, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwDoNotDisturbSPIndex.setStatus('current')
if mibBuilder.loadTexts: bwDoNotDisturbSPIndex.setDescription('This integer represents the a service provider index in the system')
bwDoNotDisturbSPID = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 14, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwDoNotDisturbSPID.setStatus('current')
if mibBuilder.loadTexts: bwDoNotDisturbSPID.setDescription('This string represents a service provider ID')
bwDoNotDisturbSPNumInvoked = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 14, 2, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwDoNotDisturbSPNumInvoked.setStatus('current')
if mibBuilder.loadTexts: bwDoNotDisturbSPNumInvoked.setDescription('This counter reflects the number of times this service is triggered by a service provider')
bwDNDSPNumPhoneActivations = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 14, 2, 1, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwDNDSPNumPhoneActivations.setStatus('current')
if mibBuilder.loadTexts: bwDNDSPNumPhoneActivations.setDescription('Number of times DND has been activated via FAC for users in a given service provider')
bwDNDSPNumPhoneDeactivations = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 14, 2, 1, 5), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwDNDSPNumPhoneDeactivations.setStatus('current')
if mibBuilder.loadTexts: bwDNDSPNumPhoneDeactivations.setDescription('Number of times DND has been deactivated via FAC for users in a given service provider')
bwDoNotDisturbGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 14, 5, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwDoNotDisturbGroupIndex"))
if mibBuilder.loadTexts: bwDoNotDisturbGroupEntry.setStatus('current')
if mibBuilder.loadTexts: bwDoNotDisturbGroupEntry.setDescription('This row contains the counters for Do Not Disturb service measurements for a group')
bwDoNotDisturbGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 14, 5, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwDoNotDisturbGroupIndex.setStatus('current')
if mibBuilder.loadTexts: bwDoNotDisturbGroupIndex.setDescription('This integer represents the a group index in the system')
bwDoNotDisturbGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 14, 5, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwDoNotDisturbGroupID.setStatus('current')
if mibBuilder.loadTexts: bwDoNotDisturbGroupID.setDescription('This string represents a group ID')
bwDoNotDisturbGroupNumInvoked = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 14, 5, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwDoNotDisturbGroupNumInvoked.setStatus('current')
if mibBuilder.loadTexts: bwDoNotDisturbGroupNumInvoked.setDescription('This counter reflects the number of times this service is triggered by a group')
bwDNDGroupNumPhoneActivations = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 14, 5, 1, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwDNDGroupNumPhoneActivations.setStatus('current')
if mibBuilder.loadTexts: bwDNDGroupNumPhoneActivations.setDescription('Number of times DND has been activated via FAC for users in a given group')
bwDNDGroupNumPhoneDeactivations = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 14, 5, 1, 5), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwDNDGroupNumPhoneDeactivations.setStatus('current')
if mibBuilder.loadTexts: bwDNDGroupNumPhoneDeactivations.setDescription('Number of times DND has been deactivated via FAC for users in a given group')
bwECNWarningAnnouncementAttempts = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 74, 1), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwECNWarningAnnouncementAttempts.setStatus('current')
if mibBuilder.loadTexts: bwECNWarningAnnouncementAttempts.setDescription('This is the number of times the Expensive Call Notification service attempted to play a warning announcement for a call identified as expensive.')
bwECNExpensiveCallReleased = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 74, 2), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwECNExpensiveCallReleased.setStatus('current')
if mibBuilder.loadTexts: bwECNExpensiveCallReleased.setDescription('This is the number of times a user released an expensive call (identified as such by the Expensive Call Notification service) before it was answered.')
bwFlashCallTransferNumTransfers = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 15, 1), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwFlashCallTransferNumTransfers.setStatus('current')
if mibBuilder.loadTexts: bwFlashCallTransferNumTransfers.setDescription('This counter reflects the number of times the flash code and destination number are used to effect a transfer')
bwFlashCallTransferSPTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 15, 2), )
if mibBuilder.loadTexts: bwFlashCallTransferSPTable.setStatus('current')
if mibBuilder.loadTexts: bwFlashCallTransferSPTable.setDescription('This table contains the counters for Flash Call Transfer service measurements for service providers')
bwFlashCallTransferGroupTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 15, 3), )
if mibBuilder.loadTexts: bwFlashCallTransferGroupTable.setStatus('current')
if mibBuilder.loadTexts: bwFlashCallTransferGroupTable.setDescription('This table contains the counters for Flash Call Transfer service measurements for groups')
bwFlashCallTransferSPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 15, 2, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwFlashCallTransferSPIndex"))
if mibBuilder.loadTexts: bwFlashCallTransferSPEntry.setStatus('current')
if mibBuilder.loadTexts: bwFlashCallTransferSPEntry.setDescription('This row contains the counters for Flash Call Transfer service measurements for a service provider')
bwFlashCallTransferSPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 15, 2, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwFlashCallTransferSPIndex.setStatus('current')
if mibBuilder.loadTexts: bwFlashCallTransferSPIndex.setDescription('This integer represents the a service provider index in the system')
bwFlashCallTransferSPID = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 15, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwFlashCallTransferSPID.setStatus('current')
if mibBuilder.loadTexts: bwFlashCallTransferSPID.setDescription('This string represents a service provider ID')
bwFlashCallTransferSPNumTransfers = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 15, 2, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwFlashCallTransferSPNumTransfers.setStatus('current')
if mibBuilder.loadTexts: bwFlashCallTransferSPNumTransfers.setDescription('This counter reflects the number of times the flash code and destination number are used to effect a transfer by a service provider')
bwFlashCallTransferGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 15, 3, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwFlashCallTransferGroupIndex"))
if mibBuilder.loadTexts: bwFlashCallTransferGroupEntry.setStatus('current')
if mibBuilder.loadTexts: bwFlashCallTransferGroupEntry.setDescription('This row contains the counters for Flash Call Transfer service measurements for a group')
bwFlashCallTransferGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 15, 3, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwFlashCallTransferGroupIndex.setStatus('current')
if mibBuilder.loadTexts: bwFlashCallTransferGroupIndex.setDescription('This integer represents the a group index in the system')
bwFlashCallTransferGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 15, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwFlashCallTransferGroupID.setStatus('current')
if mibBuilder.loadTexts: bwFlashCallTransferGroupID.setDescription('This string represents a group ID')
bwFlashCallTransferGroupNumTransfers = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 15, 3, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwFlashCallTransferGroupNumTransfers.setStatus('current')
if mibBuilder.loadTexts: bwFlashCallTransferGroupNumTransfers.setDescription('This counter reflects the number of times the flash code and destination number are used to effect a transfer by a group')
bwFlashCallWaitingNumAnswers = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 16, 1), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwFlashCallWaitingNumAnswers.setStatus('current')
if mibBuilder.loadTexts: bwFlashCallWaitingNumAnswers.setDescription('This counter reflects the number of times the flash code results in the waiting call getting answered')
bwFlashCallWaitingSPTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 16, 2), )
if mibBuilder.loadTexts: bwFlashCallWaitingSPTable.setStatus('current')
if mibBuilder.loadTexts: bwFlashCallWaitingSPTable.setDescription('This table contains the counters for Flash Call Waiting service measurements for service providers')
bwFlashCallWaitingGroupTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 16, 3), )
if mibBuilder.loadTexts: bwFlashCallWaitingGroupTable.setStatus('current')
if mibBuilder.loadTexts: bwFlashCallWaitingGroupTable.setDescription('This table contains the counters for Flash Call Waiting service measurements for groups')
bwFlashCallWaitingSPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 16, 2, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwFlashCallWaitingSPIndex"))
if mibBuilder.loadTexts: bwFlashCallWaitingSPEntry.setStatus('current')
if mibBuilder.loadTexts: bwFlashCallWaitingSPEntry.setDescription('This row contains the counters for Flash Call Waiting service measurements for a service provider')
bwFlashCallWaitingSPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 16, 2, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwFlashCallWaitingSPIndex.setStatus('current')
if mibBuilder.loadTexts: bwFlashCallWaitingSPIndex.setDescription('This integer represents the a service provider index in the system')
bwFlashCallWaitingSPID = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 16, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwFlashCallWaitingSPID.setStatus('current')
if mibBuilder.loadTexts: bwFlashCallWaitingSPID.setDescription('This string represents a service provider ID')
bwFlashCallWaitingSPNumAnswers = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 16, 2, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwFlashCallWaitingSPNumAnswers.setStatus('current')
if mibBuilder.loadTexts: bwFlashCallWaitingSPNumAnswers.setDescription('This counter reflects the number of times the flash code results in the waiting call getting answered by a service provider')
bwFlashCallWaitingGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 16, 3, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwFlashCallWaitingGroupIndex"))
if mibBuilder.loadTexts: bwFlashCallWaitingGroupEntry.setStatus('current')
if mibBuilder.loadTexts: bwFlashCallWaitingGroupEntry.setDescription('This row contains the counters for Flash Call Waiting service measurements for a group')
bwFlashCallWaitingGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 16, 3, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwFlashCallWaitingGroupIndex.setStatus('current')
if mibBuilder.loadTexts: bwFlashCallWaitingGroupIndex.setDescription('This integer represents the a group index in the system')
bwFlashCallWaitingGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 16, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwFlashCallWaitingGroupID.setStatus('current')
if mibBuilder.loadTexts: bwFlashCallWaitingGroupID.setDescription('This string represents a group ID')
bwFlashCallWaitingGroupNumAnswers = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 16, 3, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwFlashCallWaitingGroupNumAnswers.setStatus('current')
if mibBuilder.loadTexts: bwFlashCallWaitingGroupNumAnswers.setDescription('This counter reflects the number of times the flash code results in the waiting call getting answered by a group')
bwFlashConsultationNumCalls = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 17, 1), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwFlashConsultationNumCalls.setStatus('current')
if mibBuilder.loadTexts: bwFlashConsultationNumCalls.setDescription('This counter reflects the number of times a counsultation is attempted using the flash code and destination number')
bwFlashConsultationSPTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 17, 2), )
if mibBuilder.loadTexts: bwFlashConsultationSPTable.setStatus('current')
if mibBuilder.loadTexts: bwFlashConsultationSPTable.setDescription('This table contains the counters for Flash Consultation service measurements for service providers')
bwFlashConsultationGroupTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 17, 3), )
if mibBuilder.loadTexts: bwFlashConsultationGroupTable.setStatus('current')
if mibBuilder.loadTexts: bwFlashConsultationGroupTable.setDescription('This table contains the counters for Flash Consultation service measurements for groups')
bwFlashConsultationSPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 17, 2, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwFlashConsultationSPIndex"))
if mibBuilder.loadTexts: bwFlashConsultationSPEntry.setStatus('current')
if mibBuilder.loadTexts: bwFlashConsultationSPEntry.setDescription('This row contains the counters for Flash Consultation service measurements for a service provider')
bwFlashConsultationSPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 17, 2, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwFlashConsultationSPIndex.setStatus('current')
if mibBuilder.loadTexts: bwFlashConsultationSPIndex.setDescription('This integer represents the a service provider index in the system')
bwFlashConsultationSPID = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 17, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwFlashConsultationSPID.setStatus('current')
if mibBuilder.loadTexts: bwFlashConsultationSPID.setDescription('This string represents a service provider ID')
bwFlashConsultationSPNumCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 17, 2, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwFlashConsultationSPNumCalls.setStatus('current')
if mibBuilder.loadTexts: bwFlashConsultationSPNumCalls.setDescription('This counter reflects the number of times a counsultation is attempted using the flash code and destination number by a service provider')
bwFlashConsultationGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 17, 3, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwFlashConsultationGroupIndex"))
if mibBuilder.loadTexts: bwFlashConsultationGroupEntry.setStatus('current')
if mibBuilder.loadTexts: bwFlashConsultationGroupEntry.setDescription('This row contains the counters for Flash Consultation service measurements for a group')
bwFlashConsultationGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 17, 3, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwFlashConsultationGroupIndex.setStatus('current')
if mibBuilder.loadTexts: bwFlashConsultationGroupIndex.setDescription('This integer represents the a group index in the system')
bwFlashConsultationGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 17, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwFlashConsultationGroupID.setStatus('current')
if mibBuilder.loadTexts: bwFlashConsultationGroupID.setDescription('This string represents a group ID')
bwFlashConsultationGroupNumCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 17, 3, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwFlashConsultationGroupNumCalls.setStatus('current')
if mibBuilder.loadTexts: bwFlashConsultationGroupNumCalls.setDescription('This counter reflects the number of times a counsultation is attempted using the flash code and destination number by a group')
bwFlashThreeWayCallNum3WC = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 18, 1), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwFlashThreeWayCallNum3WC.setStatus('current')
if mibBuilder.loadTexts: bwFlashThreeWayCallNum3WC.setDescription('This counter reflects the number of times the flash results in two calls being joined into a conference')
bwFlashThreeWayCallSPTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 18, 2), )
if mibBuilder.loadTexts: bwFlashThreeWayCallSPTable.setStatus('current')
if mibBuilder.loadTexts: bwFlashThreeWayCallSPTable.setDescription('This table contains the counters for Flash Three-Way Call service measurements for service providers')
bwFlashThreeWayCallGroupTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 18, 3), )
if mibBuilder.loadTexts: bwFlashThreeWayCallGroupTable.setStatus('current')
if mibBuilder.loadTexts: bwFlashThreeWayCallGroupTable.setDescription('This table contains the counters for Flash Three-Way Call service measurements for groups')
bwFlashThreeWayCallSPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 18, 2, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwFlashThreeWayCallSPIndex"))
if mibBuilder.loadTexts: bwFlashThreeWayCallSPEntry.setStatus('current')
if mibBuilder.loadTexts: bwFlashThreeWayCallSPEntry.setDescription('This row contains the counters for Flash Three-Way Call service measurements for a service provider')
bwFlashThreeWayCallSPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 18, 2, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwFlashThreeWayCallSPIndex.setStatus('current')
if mibBuilder.loadTexts: bwFlashThreeWayCallSPIndex.setDescription('This integer represents the a service provider index in the system')
bwFlashThreeWayCallSPID = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 18, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwFlashThreeWayCallSPID.setStatus('current')
if mibBuilder.loadTexts: bwFlashThreeWayCallSPID.setDescription('This string represents a service provider ID')
bwFlashThreeWayCallSPNum3WC = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 18, 2, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwFlashThreeWayCallSPNum3WC.setStatus('current')
if mibBuilder.loadTexts: bwFlashThreeWayCallSPNum3WC.setDescription('This counter reflects the number of times the flash results in two calls being joined into a conference by a service provider')
bwFlashThreeWayCallGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 18, 3, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwFlashThreeWayCallGroupIndex"))
if mibBuilder.loadTexts: bwFlashThreeWayCallGroupEntry.setStatus('current')
if mibBuilder.loadTexts: bwFlashThreeWayCallGroupEntry.setDescription('This row contains the counters for Flash Three-Way Call service measurements for a group')
bwFlashThreeWayCallGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 18, 3, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwFlashThreeWayCallGroupIndex.setStatus('current')
if mibBuilder.loadTexts: bwFlashThreeWayCallGroupIndex.setDescription('This integer represents the a group index in the system')
bwFlashThreeWayCallGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 18, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwFlashThreeWayCallGroupID.setStatus('current')
if mibBuilder.loadTexts: bwFlashThreeWayCallGroupID.setDescription('This string represents a group ID')
bwFlashThreeWayCallGroupNum3WC = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 18, 3, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwFlashThreeWayCallGroupNum3WC.setStatus('current')
if mibBuilder.loadTexts: bwFlashThreeWayCallGroupNum3WC.setDescription('This counter reflects the number of times the flash results in two calls being joined into a conference by a group')
bwHuntGroupNumAttempts = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 19, 1), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwHuntGroupNumAttempts.setStatus('current')
if mibBuilder.loadTexts: bwHuntGroupNumAttempts.setDescription('This counter reflects the number of times a Hunt Group virtual number receives an incoming call attempt')
bwHuntGroupNumBusy = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 19, 2), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwHuntGroupNumBusy.setStatus('current')
if mibBuilder.loadTexts: bwHuntGroupNumBusy.setDescription('This counter reflects the number of times that all parties in a Hunt Group are busy')
bwHuntGroupsSPTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 19, 3), )
if mibBuilder.loadTexts: bwHuntGroupsSPTable.setStatus('current')
if mibBuilder.loadTexts: bwHuntGroupsSPTable.setDescription('This table contains the counters for Hunt Group service measurements for service providers')
bwHuntGroupsGroupTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 19, 4), )
if mibBuilder.loadTexts: bwHuntGroupsGroupTable.setStatus('current')
if mibBuilder.loadTexts: bwHuntGroupsGroupTable.setDescription('This table contains the counters for Hunt Group service measurements for groups')
bwHuntGroupsDNHIncomingCalls = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 19, 5), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwHuntGroupsDNHIncomingCalls.setStatus('current')
if mibBuilder.loadTexts: bwHuntGroupsDNHIncomingCalls.setDescription('This counter reflects the number of incoming calls to agents belonging to Directory Number Hunting groups')
bwHuntGroupsSPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 19, 3, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwHuntGroupsSPIndex"))
if mibBuilder.loadTexts: bwHuntGroupsSPEntry.setStatus('current')
if mibBuilder.loadTexts: bwHuntGroupsSPEntry.setDescription('This row contains the counters for Hunt Group service measurements for a service provider')
bwHuntGroupsSPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 19, 3, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwHuntGroupsSPIndex.setStatus('current')
if mibBuilder.loadTexts: bwHuntGroupsSPIndex.setDescription('This integer represents the a service provider index in the system')
bwHuntGroupsSPID = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 19, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwHuntGroupsSPID.setStatus('current')
if mibBuilder.loadTexts: bwHuntGroupsSPID.setDescription('This string represents a service provider ID')
bwHuntGroupSPNumAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 19, 3, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwHuntGroupSPNumAttempts.setStatus('current')
if mibBuilder.loadTexts: bwHuntGroupSPNumAttempts.setDescription('This counter reflects the number of times a Hunt Group virtual number receives an incoming call attempt by a service provider')
bwHuntGroupSPNumBusy = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 19, 3, 1, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwHuntGroupSPNumBusy.setStatus('current')
if mibBuilder.loadTexts: bwHuntGroupSPNumBusy.setDescription('This counter reflects the number of times that all parties in a Hunt Group are busy by a service provider')
bwHuntGroupsSPDNHIncomingCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 19, 3, 1, 5), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwHuntGroupsSPDNHIncomingCalls.setStatus('current')
if mibBuilder.loadTexts: bwHuntGroupsSPDNHIncomingCalls.setDescription('This counter reflects the number of incoming calls to agents belonging to Directory Number Hunting groups, per service provider')
bwHuntGroupsGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 19, 4, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwHuntGroupsGroupIndex"))
if mibBuilder.loadTexts: bwHuntGroupsGroupEntry.setStatus('current')
if mibBuilder.loadTexts: bwHuntGroupsGroupEntry.setDescription('This row contains the counters for Hunt Group service measurements for a group')
bwHuntGroupsGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 19, 4, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwHuntGroupsGroupIndex.setStatus('current')
if mibBuilder.loadTexts: bwHuntGroupsGroupIndex.setDescription('This integer represents the a Group index in the system')
bwHuntGroupsGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 19, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwHuntGroupsGroupID.setStatus('current')
if mibBuilder.loadTexts: bwHuntGroupsGroupID.setDescription('This string represents a Group ID')
bwHuntGroupsGroupNumAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 19, 4, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwHuntGroupsGroupNumAttempts.setStatus('current')
if mibBuilder.loadTexts: bwHuntGroupsGroupNumAttempts.setDescription('This counter reflects the number of times a Hunt Group virtual number receives an incoming call attempt by a Group')
bwHuntGroupsGroupNumBusy = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 19, 4, 1, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwHuntGroupsGroupNumBusy.setStatus('current')
if mibBuilder.loadTexts: bwHuntGroupsGroupNumBusy.setDescription('This counter reflects the number of times that all parties in a Hunt Group are busy by a Group')
bwHuntGroupsGroupDNHIncomingCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 19, 4, 1, 5), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwHuntGroupsGroupDNHIncomingCalls.setStatus('current')
if mibBuilder.loadTexts: bwHuntGroupsGroupDNHIncomingCalls.setDescription('This counter reflects the number of incoming calls to agents belonging to Directory Number Hunting groups, per group')
bwICPNumInterGroupBlocks = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 20, 1), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwICPNumInterGroupBlocks.setStatus('current')
if mibBuilder.loadTexts: bwICPNumInterGroupBlocks.setDescription('This counter reflects the number of times this service denies a direct call from outside the group')
bwIncomingCallingPlanSPTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 20, 2), )
if mibBuilder.loadTexts: bwIncomingCallingPlanSPTable.setStatus('current')
if mibBuilder.loadTexts: bwIncomingCallingPlanSPTable.setDescription('This table contains the counters for Incoming Calling Plan service measurements for service providers')
bwIncomingCallingPlanGroupTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 20, 3), )
if mibBuilder.loadTexts: bwIncomingCallingPlanGroupTable.setStatus('current')
if mibBuilder.loadTexts: bwIncomingCallingPlanGroupTable.setDescription('This table contains the counters for Incoming Calling Plan service measurements for groups')
bwICPNumCollectCallBlocks = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 20, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwICPNumCollectCallBlocks.setStatus('current')
if mibBuilder.loadTexts: bwICPNumCollectCallBlocks.setDescription('This counter is incremented whenever the service denies a collect call')
bwICPNumIntraGroupBlocks = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 20, 5), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwICPNumIntraGroupBlocks.setStatus('current')
if mibBuilder.loadTexts: bwICPNumIntraGroupBlocks.setDescription('This counter is incremented whenever the service denies an intra-group call')
bwICPNumOutsideCallerBlocks = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 20, 6), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwICPNumOutsideCallerBlocks.setStatus('current')
if mibBuilder.loadTexts: bwICPNumOutsideCallerBlocks.setDescription('This counter reflects the number of times this service denies a call forwarded/transferred by a group member where the other party is outside the group')
bwIncomingCallingPlanSPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 20, 2, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwIncomingCallingPlanSPIndex"))
if mibBuilder.loadTexts: bwIncomingCallingPlanSPEntry.setStatus('current')
if mibBuilder.loadTexts: bwIncomingCallingPlanSPEntry.setDescription('This row contains the counters for Incoming Calling Plan service measurements for a service provider')
bwIncomingCallingPlanSPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 20, 2, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwIncomingCallingPlanSPIndex.setStatus('current')
if mibBuilder.loadTexts: bwIncomingCallingPlanSPIndex.setDescription('This integer represents the a service provider index in the system')
bwIncomingCallingPlanSPID = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 20, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwIncomingCallingPlanSPID.setStatus('current')
if mibBuilder.loadTexts: bwIncomingCallingPlanSPID.setDescription('Column Description This string represents a service provider ID')
bwICPSPNumInterGroupBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 20, 2, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwICPSPNumInterGroupBlocks.setStatus('current')
if mibBuilder.loadTexts: bwICPSPNumInterGroupBlocks.setDescription('This counter reflects the number of times this service denies a direct call from outside the group for a service provider')
bwICPSPNumCollectCallBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 20, 2, 1, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwICPSPNumCollectCallBlocks.setStatus('current')
if mibBuilder.loadTexts: bwICPSPNumCollectCallBlocks.setDescription('This counter is incremented whenever the service denies a collect call for a service provider')
bwICPSPNumIntraGroupBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 20, 2, 1, 5), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwICPSPNumIntraGroupBlocks.setStatus('current')
if mibBuilder.loadTexts: bwICPSPNumIntraGroupBlocks.setDescription('This counter is incremented whenever the service denies an intra-group call for a service provider')
bwICPSPNumOutsideCallerBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 20, 2, 1, 6), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwICPSPNumOutsideCallerBlocks.setStatus('current')
if mibBuilder.loadTexts: bwICPSPNumOutsideCallerBlocks.setDescription('This counter reflects the number of times this service denies a call forwarded/transferred by a group member where the other party is outside the group for a service provider')
bwIncomingCallingPlanGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 20, 3, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwIncomingCallingPlanGroupIndex"))
if mibBuilder.loadTexts: bwIncomingCallingPlanGroupEntry.setStatus('current')
if mibBuilder.loadTexts: bwIncomingCallingPlanGroupEntry.setDescription('This row contains the counters for Incoming Calling Plan service measurements for a group')
bwIncomingCallingPlanGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 20, 3, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwIncomingCallingPlanGroupIndex.setStatus('current')
if mibBuilder.loadTexts: bwIncomingCallingPlanGroupIndex.setDescription('This integer represents the a group index in the system')
bwIncomingCallingPlanGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 20, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwIncomingCallingPlanGroupID.setStatus('current')
if mibBuilder.loadTexts: bwIncomingCallingPlanGroupID.setDescription('Column Description This string represents a group ID')
bwICPGroupNumInterGroupBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 20, 3, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwICPGroupNumInterGroupBlocks.setStatus('current')
if mibBuilder.loadTexts: bwICPGroupNumInterGroupBlocks.setDescription('This counter reflects the number of times this service denies a direct call from outside the group for a group')
bwICPGroupNumCollectCallBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 20, 3, 1, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwICPGroupNumCollectCallBlocks.setStatus('current')
if mibBuilder.loadTexts: bwICPGroupNumCollectCallBlocks.setDescription('This counter is incremented whenever the service denies a collect call for a group')
bwICPGroupNumIntraGroupBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 20, 3, 1, 5), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwICPGroupNumIntraGroupBlocks.setStatus('current')
if mibBuilder.loadTexts: bwICPGroupNumIntraGroupBlocks.setDescription('This counter is incremented whenever the service denies an intra-group call for a group')
bwICPGroupNumOutsideCallerBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 20, 3, 1, 6), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwICPGroupNumOutsideCallerBlocks.setStatus('current')
if mibBuilder.loadTexts: bwICPGroupNumOutsideCallerBlocks.setDescription('This counter reflects the number of times this service denies a call forwarded/transferred by a group member where the other party is outside the group for a group')
bwIPPhoneNumForwards = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 21, 1), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwIPPhoneNumForwards.setStatus('current')
if mibBuilder.loadTexts: bwIPPhoneNumForwards.setDescription('This counter reflects the number of times this service redirects a call on a request from an IP Phone')
bwIPPhoneSPTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 21, 2), )
if mibBuilder.loadTexts: bwIPPhoneSPTable.setStatus('current')
if mibBuilder.loadTexts: bwIPPhoneSPTable.setDescription('This table contains the counters for IP Phone service measurements for service providers')
bwIPPhoneGroupTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 21, 3), )
if mibBuilder.loadTexts: bwIPPhoneGroupTable.setStatus('current')
if mibBuilder.loadTexts: bwIPPhoneGroupTable.setDescription('This table contains the counters for IP Phone service measurements for groups')
bwIPPhoneSPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 21, 2, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwIPPhoneSPIndex"))
if mibBuilder.loadTexts: bwIPPhoneSPEntry.setStatus('current')
if mibBuilder.loadTexts: bwIPPhoneSPEntry.setDescription('This row contains the counters for IP Phone service measurements for a service provider')
bwIPPhoneSPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 21, 2, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwIPPhoneSPIndex.setStatus('current')
if mibBuilder.loadTexts: bwIPPhoneSPIndex.setDescription('This integer represents the a service provider index in the system')
bwIPPhoneSPID = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 21, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwIPPhoneSPID.setStatus('current')
if mibBuilder.loadTexts: bwIPPhoneSPID.setDescription('This string represents a service provider ID')
bwIPPhoneSPNumForwards = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 21, 2, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwIPPhoneSPNumForwards.setStatus('current')
if mibBuilder.loadTexts: bwIPPhoneSPNumForwards.setDescription('This counter reflects the number of times this service redirects a call on a request from an IP Phone by a service provider')
bwIPPhoneGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 21, 3, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwIPPhoneGroupIndex"))
if mibBuilder.loadTexts: bwIPPhoneGroupEntry.setStatus('current')
if mibBuilder.loadTexts: bwIPPhoneGroupEntry.setDescription('This row contains the counters for IP Phone service measurements for a group')
bwIPPhoneGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 21, 3, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwIPPhoneGroupIndex.setStatus('current')
if mibBuilder.loadTexts: bwIPPhoneGroupIndex.setDescription('This integer represents the a group index in the system')
bwIPPhoneGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 21, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwIPPhoneGroupID.setStatus('current')
if mibBuilder.loadTexts: bwIPPhoneGroupID.setDescription('This string represents a group ID')
bwIPPhoneGroupNumForwards = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 21, 3, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwIPPhoneGroupNumForwards.setStatus('current')
if mibBuilder.loadTexts: bwIPPhoneGroupNumForwards.setDescription('This counter reflects the number of times this service redirects a call on a request from an IP Phone by a group')
bwLNRNumRedials = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 22, 1), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwLNRNumRedials.setStatus('current')
if mibBuilder.loadTexts: bwLNRNumRedials.setDescription('This counter reflects the number of times the flash code results in this service attempting to dial the last number called')
bwLastNumberRedialSPTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 22, 2), )
if mibBuilder.loadTexts: bwLastNumberRedialSPTable.setStatus('current')
if mibBuilder.loadTexts: bwLastNumberRedialSPTable.setDescription('This table contains the counters for Last Number Redial service measurements for service providers')
bwLastNumberRedialGroupTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 22, 3), )
if mibBuilder.loadTexts: bwLastNumberRedialGroupTable.setStatus('current')
if mibBuilder.loadTexts: bwLastNumberRedialGroupTable.setDescription('This table contains the counters for Last Number Redial service measurements for groups')
bwLastNumberRedialSPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 22, 2, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwLastNumberRedialSPIndex"))
if mibBuilder.loadTexts: bwLastNumberRedialSPEntry.setStatus('current')
if mibBuilder.loadTexts: bwLastNumberRedialSPEntry.setDescription('This row contains the counters for Last Number Redial service measurements for a service provider')
bwLastNumberRedialSPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 22, 2, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwLastNumberRedialSPIndex.setStatus('current')
if mibBuilder.loadTexts: bwLastNumberRedialSPIndex.setDescription('This integer represents the a service provider index in the system')
bwLastNumberRedialSPID = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 22, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwLastNumberRedialSPID.setStatus('current')
if mibBuilder.loadTexts: bwLastNumberRedialSPID.setDescription('This string represents a service provider ID')
bwLNRSPNumRedials = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 22, 2, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwLNRSPNumRedials.setStatus('current')
if mibBuilder.loadTexts: bwLNRSPNumRedials.setDescription('This counter reflects the number of times the flash code results in this service attempting to dial the last number called by a service provider')
bwLastNumberRedialGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 22, 3, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwLastNumberRedialGroupIndex"))
if mibBuilder.loadTexts: bwLastNumberRedialGroupEntry.setStatus('current')
if mibBuilder.loadTexts: bwLastNumberRedialGroupEntry.setDescription('This row contains the counters for Last Number Redial service measurements for a group')
bwLastNumberRedialGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 22, 3, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwLastNumberRedialGroupIndex.setStatus('current')
if mibBuilder.loadTexts: bwLastNumberRedialGroupIndex.setDescription('This integer represents the a group index in the system')
bwLastNumberRedialGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 22, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwLastNumberRedialGroupID.setStatus('current')
if mibBuilder.loadTexts: bwLastNumberRedialGroupID.setDescription('This string represents a group ID')
bwLNRGroupNumRedials = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 22, 3, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwLNRGroupNumRedials.setStatus('current')
if mibBuilder.loadTexts: bwLNRGroupNumRedials.setDescription('This counter reflects the number of times the flash code results in this service attempting to dial the last number called by a group')
bwOCPNumGroupCallsBlocked = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 23, 1), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwOCPNumGroupCallsBlocked.setStatus('current')
if mibBuilder.loadTexts: bwOCPNumGroupCallsBlocked.setDescription('This counter reflects the number of times an intra-group call is blocked')
bwOCPNumLocalCallsBlocked = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 23, 2), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwOCPNumLocalCallsBlocked.setStatus('current')
if mibBuilder.loadTexts: bwOCPNumLocalCallsBlocked.setDescription('This counter reflects the number of times a local call is blocked')
bwOCPNumTollFreeCallsBlocked = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 23, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwOCPNumTollFreeCallsBlocked.setStatus('current')
if mibBuilder.loadTexts: bwOCPNumTollFreeCallsBlocked.setDescription('This counter reflects the number of times a toll free call is blocked')
bwOCPNumTollCallsBlocked = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 23, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwOCPNumTollCallsBlocked.setStatus('current')
if mibBuilder.loadTexts: bwOCPNumTollCallsBlocked.setDescription('This counter reflects the number of times a toll call is blocked')
bwOCPNumIntlCallsBlocked = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 23, 5), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwOCPNumIntlCallsBlocked.setStatus('current')
if mibBuilder.loadTexts: bwOCPNumIntlCallsBlocked.setDescription('This counter reflects the number of times an international call is blocked')
bwOCPNumOperatorAssistedCallsBlocked = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 23, 6), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwOCPNumOperatorAssistedCallsBlocked.setStatus('current')
if mibBuilder.loadTexts: bwOCPNumOperatorAssistedCallsBlocked.setDescription('This counter reflects the number of times an operator assisted call is blocked')
bwOCPNumChargeableDirAssistCallsBlocked = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 23, 7), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwOCPNumChargeableDirAssistCallsBlocked.setStatus('current')
if mibBuilder.loadTexts: bwOCPNumChargeableDirAssistCallsBlocked.setDescription('This counter reflects the number of times a chargeable directory assistance call is blocked')
bwOCPNumSpecialServices1CallsBlocked = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 23, 8), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwOCPNumSpecialServices1CallsBlocked.setStatus('current')
if mibBuilder.loadTexts: bwOCPNumSpecialServices1CallsBlocked.setDescription('This counter reflects the number of times a special services call is blocked')
bwOCPNumSpecialServices2CallsBlocked = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 23, 9), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwOCPNumSpecialServices2CallsBlocked.setStatus('current')
if mibBuilder.loadTexts: bwOCPNumSpecialServices2CallsBlocked.setDescription('This counter reflects the number of times a special services call is blocked')
bwOCPNumPremiumServices1CallsBlocked = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 23, 10), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwOCPNumPremiumServices1CallsBlocked.setStatus('current')
if mibBuilder.loadTexts: bwOCPNumPremiumServices1CallsBlocked.setDescription('This counter reflects the number of times a premium services call is blocked')
bwOCPNumPremiumServices2CallsBlocked = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 23, 11), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwOCPNumPremiumServices2CallsBlocked.setStatus('current')
if mibBuilder.loadTexts: bwOCPNumPremiumServices2CallsBlocked.setDescription('This counter reflects the number of times a premium services call is blocked')
bwOCPNumCasualCallsBlocked = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 23, 12), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwOCPNumCasualCallsBlocked.setStatus('current')
if mibBuilder.loadTexts: bwOCPNumCasualCallsBlocked.setDescription('This counter reflects the number of times a casual equal access call is blocked')
bwOCPNumURLDialingCallsBlocked = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 23, 13), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwOCPNumURLDialingCallsBlocked.setStatus('current')
if mibBuilder.loadTexts: bwOCPNumURLDialingCallsBlocked.setDescription('This counter reflects the number of times a URL dialed call is blocked')
bwOCPNumUnknownCallsBlocked = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 23, 14), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwOCPNumUnknownCallsBlocked.setStatus('current')
if mibBuilder.loadTexts: bwOCPNumUnknownCallsBlocked.setDescription('This counter reflects the number of times an unknown call type is blocked')
bwOutgoingCallingPlanSPTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 23, 15), )
if mibBuilder.loadTexts: bwOutgoingCallingPlanSPTable.setStatus('current')
if mibBuilder.loadTexts: bwOutgoingCallingPlanSPTable.setDescription('This table contains the counters for Outgoing Calling Plan service measurements for service providers')
bwOutgoingCallingPlanGroupTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 23, 16), )
if mibBuilder.loadTexts: bwOutgoingCallingPlanGroupTable.setStatus('current')
if mibBuilder.loadTexts: bwOutgoingCallingPlanGroupTable.setDescription('This table contains the counters for Outgoing Calling Plan service measurements for groups')
bwOCPNumSuccessfulAuthorizations = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 23, 17), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwOCPNumSuccessfulAuthorizations.setStatus('current')
if mibBuilder.loadTexts: bwOCPNumSuccessfulAuthorizations.setDescription('This counter reflects the number of times a caller enters a valid authorization code in order to establish a call.')
bwOCPNumUnsuccessfulAuthorizations = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 23, 18), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwOCPNumUnsuccessfulAuthorizations.setStatus('current')
if mibBuilder.loadTexts: bwOCPNumUnsuccessfulAuthorizations.setDescription('This counter reflects the number of times a caller enters an invalid authorization code in order to establish a call.')
bwOCPNumTransfers = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 23, 19), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwOCPNumTransfers.setStatus('current')
if mibBuilder.loadTexts: bwOCPNumTransfers.setDescription("This counter reflects the number of times OCP transfers the caller to a number where the caller's request will be handled.")
bwOCPSACNumSuccessfulLock = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 23, 20), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwOCPSACNumSuccessfulLock.setStatus('current')
if mibBuilder.loadTexts: bwOCPSACNumSuccessfulLock.setDescription('This counter reflects the number of times the SAC lock feature access code is used successfully in order to lock calls')
bwOCPSACNumSuccessfulUnlock = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 23, 21), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwOCPSACNumSuccessfulUnlock.setStatus('current')
if mibBuilder.loadTexts: bwOCPSACNumSuccessfulUnlock.setDescription('This counter reflects the number of times the SAC unlock feature access code is used successfully in order to unlock calls')
bwOCPSACNumUnsuccessfulLock = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 23, 22), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwOCPSACNumUnsuccessfulLock.setStatus('current')
if mibBuilder.loadTexts: bwOCPSACNumUnsuccessfulLock.setDescription('This counter reflects the number of times the SAC lock feature access code is used unsuccessfully')
bwOCPSACNumUnsuccessfulUnlock = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 23, 23), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwOCPSACNumUnsuccessfulUnlock.setStatus('current')
if mibBuilder.loadTexts: bwOCPSACNumUnsuccessfulUnlock.setDescription('This counter reflects the number of times the SAC unlock feature access code is used unsuccessfully')
bwOCPSACNumUnsuccessfulCodeUsage = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 23, 24), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwOCPSACNumUnsuccessfulCodeUsage.setStatus('current')
if mibBuilder.loadTexts: bwOCPSACNumUnsuccessfulCodeUsage.setDescription('This counter reflects the number of times a stored SAC code is erased from the database because it fails to pass EOCP screening following a change in the EOCP plan that makes the stored SAC code obsolete')
bwOCPNumOutsideGroupTransferBlocks = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 23, 25), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwOCPNumOutsideGroupTransferBlocks.setStatus('current')
if mibBuilder.loadTexts: bwOCPNumOutsideGroupTransferBlocks.setDescription('This counter reflects the number of times this service denies call forwarding or transfer to a party outside of the group.')
bwOutgoingCallingPlanSPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 23, 15, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwOutgoingCallingPlanSPIndex"))
if mibBuilder.loadTexts: bwOutgoingCallingPlanSPEntry.setStatus('current')
if mibBuilder.loadTexts: bwOutgoingCallingPlanSPEntry.setDescription('This row contains the counters for Outgoing Calling Plan service measurements for a service provider')
bwOutgoingCallingPlanSPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 23, 15, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwOutgoingCallingPlanSPIndex.setStatus('current')
if mibBuilder.loadTexts: bwOutgoingCallingPlanSPIndex.setDescription('This integer represents the a service provider index in the system')
bwOutgoingCallingPlanSPID = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 23, 15, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwOutgoingCallingPlanSPID.setStatus('current')
if mibBuilder.loadTexts: bwOutgoingCallingPlanSPID.setDescription('This string represents a service provider ID')
bwOCPSPNumGroupCallsBlocked = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 23, 15, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwOCPSPNumGroupCallsBlocked.setStatus('current')
if mibBuilder.loadTexts: bwOCPSPNumGroupCallsBlocked.setDescription('This counter reflects the number of times an intra-group call is blocked by a service provider')
bwOCPSPNumLocalCallsBlocked = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 23, 15, 1, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwOCPSPNumLocalCallsBlocked.setStatus('current')
if mibBuilder.loadTexts: bwOCPSPNumLocalCallsBlocked.setDescription('This counter reflects the number of times a local call is blocked by a service provider')
bwOCPSPNumTollFreeCallsBlocked = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 23, 15, 1, 5), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwOCPSPNumTollFreeCallsBlocked.setStatus('current')
if mibBuilder.loadTexts: bwOCPSPNumTollFreeCallsBlocked.setDescription('This counter reflects the number of times a toll free call is blocked by a service provider')
bwOCPSPNumTollCallsBlocked = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 23, 15, 1, 6), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwOCPSPNumTollCallsBlocked.setStatus('current')
if mibBuilder.loadTexts: bwOCPSPNumTollCallsBlocked.setDescription('This counter reflects the number of times a toll call is blocked by a service provider')
bwOCPSPNumIntlCallsBlocked = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 23, 15, 1, 7), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwOCPSPNumIntlCallsBlocked.setStatus('current')
if mibBuilder.loadTexts: bwOCPSPNumIntlCallsBlocked.setDescription('This counter reflects the number of times an international call is blocked by a service provider')
bwOCPSPNumOperatorAssistedCallsBlocked = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 23, 15, 1, 8), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwOCPSPNumOperatorAssistedCallsBlocked.setStatus('current')
if mibBuilder.loadTexts: bwOCPSPNumOperatorAssistedCallsBlocked.setDescription('This counter reflects the number of times an operator assisted call is blocked by a service provider')
bwOCPSPNumChargeableDirAssistCallsBlocked = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 23, 15, 1, 9), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwOCPSPNumChargeableDirAssistCallsBlocked.setStatus('current')
if mibBuilder.loadTexts: bwOCPSPNumChargeableDirAssistCallsBlocked.setDescription('This counter reflects the number of times a chargeable directory assistance call is blocked by a service provider')
bwOCPSPNumSpecialServices1CallsBlocked = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 23, 15, 1, 10), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwOCPSPNumSpecialServices1CallsBlocked.setStatus('current')
if mibBuilder.loadTexts: bwOCPSPNumSpecialServices1CallsBlocked.setDescription('This counter reflects the number of times a special services call is blocked by a service provider')
bwOCPSPNumSpecialServices2CallsBlocked = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 23, 15, 1, 11), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwOCPSPNumSpecialServices2CallsBlocked.setStatus('current')
if mibBuilder.loadTexts: bwOCPSPNumSpecialServices2CallsBlocked.setDescription('This counter reflects the number of times a special services call is blocked by a service provider')
bwOCPSPNumPremiumServices1CallsBlocked = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 23, 15, 1, 12), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwOCPSPNumPremiumServices1CallsBlocked.setStatus('current')
if mibBuilder.loadTexts: bwOCPSPNumPremiumServices1CallsBlocked.setDescription('This counter reflects the number of times a premium services call is blocked by a service provider')
bwOCPSPNumPremiumServices2CallsBlocked = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 23, 15, 1, 13), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwOCPSPNumPremiumServices2CallsBlocked.setStatus('current')
if mibBuilder.loadTexts: bwOCPSPNumPremiumServices2CallsBlocked.setDescription('This counter reflects the number of times a premium services call is blocked by a service provider')
bwOCPSPNumCasualCallsBlocked = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 23, 15, 1, 14), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwOCPSPNumCasualCallsBlocked.setStatus('current')
if mibBuilder.loadTexts: bwOCPSPNumCasualCallsBlocked.setDescription('This counter reflects the number of times a casual equal access call is blocked by a service provider')
bwOCPSPNumURLDialingCallsBlocked = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 23, 15, 1, 15), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwOCPSPNumURLDialingCallsBlocked.setStatus('current')
if mibBuilder.loadTexts: bwOCPSPNumURLDialingCallsBlocked.setDescription('This counter reflects the number of times a URL dialed call is blocked by a service provider')
bwOCPSPNumUnknownCallsBlocked = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 23, 15, 1, 16), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwOCPSPNumUnknownCallsBlocked.setStatus('current')
if mibBuilder.loadTexts: bwOCPSPNumUnknownCallsBlocked.setDescription('This counter reflects the number of times an unknown call type is blocked by a service provider')
bwOCPSPNumSuccessfulAuthorizations = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 23, 15, 1, 17), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwOCPSPNumSuccessfulAuthorizations.setStatus('current')
if mibBuilder.loadTexts: bwOCPSPNumSuccessfulAuthorizations.setDescription('This counter reflects the number of times a caller enters a valid authorization code in order to establish a call for a given service provider.')
bwOCPSPNumUnsuccessfulAuthorizations = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 23, 15, 1, 18), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwOCPSPNumUnsuccessfulAuthorizations.setStatus('current')
if mibBuilder.loadTexts: bwOCPSPNumUnsuccessfulAuthorizations.setDescription('This counter reflects the number of times a caller enters an invalid authorization code in order to establish a call for a given service provider.')
bwOCPSPNumTransfers = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 23, 15, 1, 19), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwOCPSPNumTransfers.setStatus('current')
if mibBuilder.loadTexts: bwOCPSPNumTransfers.setDescription("This counter reflects the number of times OCP transfers the caller to a number where the caller's request will be handled for a given service provider.")
bwOCPSACSPNumSuccessfulLock = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 23, 15, 1, 20), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwOCPSACSPNumSuccessfulLock.setStatus('current')
if mibBuilder.loadTexts: bwOCPSACSPNumSuccessfulLock.setDescription('This counter reflects the number of times the SAC lock feature access code is used successfully in order to lock calls for a given service provider')
bwOCPSACSPNumSuccessfulUnlock = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 23, 15, 1, 21), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwOCPSACSPNumSuccessfulUnlock.setStatus('current')
if mibBuilder.loadTexts: bwOCPSACSPNumSuccessfulUnlock.setDescription('This counter reflects the number of times the SAC unlock feature access code is used successfully in order to unlock calls for a given service provider')
bwOCPSACSPNumUnsuccessfulLock = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 23, 15, 1, 22), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwOCPSACSPNumUnsuccessfulLock.setStatus('current')
if mibBuilder.loadTexts: bwOCPSACSPNumUnsuccessfulLock.setDescription('This counter reflects the number of times the SAC lock feature access code is used unsuccessfully for a given service provider')
bwOCPSACSPNumUnsuccessfulUnlock = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 23, 15, 1, 23), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwOCPSACSPNumUnsuccessfulUnlock.setStatus('current')
if mibBuilder.loadTexts: bwOCPSACSPNumUnsuccessfulUnlock.setDescription('This counter reflects the number of times the SAC unlock feature access code is used unsuccessfully for a given service provider')
bwOCPSACSPNumUnsuccessfulCodeUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 23, 15, 1, 24), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwOCPSACSPNumUnsuccessfulCodeUsage.setStatus('current')
if mibBuilder.loadTexts: bwOCPSACSPNumUnsuccessfulCodeUsage.setDescription('This counter reflects the number of times a stored SAC code is erased from the database because it fails to pass EOCP screening following a change in the EOCP plan that makes the stored SAC code obsolete for a given service provider')
bwOCPSPNumOutsideGroupTransferBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 23, 15, 1, 25), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwOCPSPNumOutsideGroupTransferBlocks.setStatus('current')
if mibBuilder.loadTexts: bwOCPSPNumOutsideGroupTransferBlocks.setDescription('This counter reflects the number of times this service denies call forwarding or transfer to a party outside of the group for a given service provider.')
bwOutgoingCallingPlanGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 23, 16, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwOutgoingCallingPlanGroupIndex"))
if mibBuilder.loadTexts: bwOutgoingCallingPlanGroupEntry.setStatus('current')
if mibBuilder.loadTexts: bwOutgoingCallingPlanGroupEntry.setDescription('This row contains the counters for Outgoing Calling Plan service measurements for a group')
bwOutgoingCallingPlanGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 23, 16, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwOutgoingCallingPlanGroupIndex.setStatus('current')
if mibBuilder.loadTexts: bwOutgoingCallingPlanGroupIndex.setDescription('This integer represents the a group index in the system')
bwOutgoingCallingPlanGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 23, 16, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwOutgoingCallingPlanGroupID.setStatus('current')
if mibBuilder.loadTexts: bwOutgoingCallingPlanGroupID.setDescription('This string represents a group ID')
bwOCPGroupNumGroupCallsBlocked = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 23, 16, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwOCPGroupNumGroupCallsBlocked.setStatus('current')
if mibBuilder.loadTexts: bwOCPGroupNumGroupCallsBlocked.setDescription('This counter reflects the number of times an intra-group call is blocked by a group')
bwOCPGroupNumLocalCallsBlocked = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 23, 16, 1, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwOCPGroupNumLocalCallsBlocked.setStatus('current')
if mibBuilder.loadTexts: bwOCPGroupNumLocalCallsBlocked.setDescription('This counter reflects the number of times a local call is blocked by a group')
bwOCPGroupNumTollFreeCallsBlocked = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 23, 16, 1, 5), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwOCPGroupNumTollFreeCallsBlocked.setStatus('current')
if mibBuilder.loadTexts: bwOCPGroupNumTollFreeCallsBlocked.setDescription('This counter reflects the number of times a toll free call is blocked by a group')
bwOCPGroupNumTollCallsBlocked = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 23, 16, 1, 6), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwOCPGroupNumTollCallsBlocked.setStatus('current')
if mibBuilder.loadTexts: bwOCPGroupNumTollCallsBlocked.setDescription('This counter reflects the number of times a toll call is blocked by a group')
bwOCPGroupNumIntlCallsBlocked = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 23, 16, 1, 7), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwOCPGroupNumIntlCallsBlocked.setStatus('current')
if mibBuilder.loadTexts: bwOCPGroupNumIntlCallsBlocked.setDescription('This counter reflects the number of times an international call is blocked by a group')
bwOCPGroupNumOperatorAssistedCallsBlocked = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 23, 16, 1, 8), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwOCPGroupNumOperatorAssistedCallsBlocked.setStatus('current')
if mibBuilder.loadTexts: bwOCPGroupNumOperatorAssistedCallsBlocked.setDescription('This counter reflects the number of times an operator assisted call is blocked by a group')
bwOCPGroupNumChargeableDirAssistCallsBlocked = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 23, 16, 1, 9), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwOCPGroupNumChargeableDirAssistCallsBlocked.setStatus('current')
if mibBuilder.loadTexts: bwOCPGroupNumChargeableDirAssistCallsBlocked.setDescription('This counter reflects the number of times a chargeable directory assistance call is blocked by a group')
bwOCPGroupNumSpecialServices1CallsBlocked = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 23, 16, 1, 10), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwOCPGroupNumSpecialServices1CallsBlocked.setStatus('current')
if mibBuilder.loadTexts: bwOCPGroupNumSpecialServices1CallsBlocked.setDescription('This counter reflects the number of times a special services call is blocked by a group')
bwOCPGroupNumSpecialServices2CallsBlocked = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 23, 16, 1, 11), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwOCPGroupNumSpecialServices2CallsBlocked.setStatus('current')
if mibBuilder.loadTexts: bwOCPGroupNumSpecialServices2CallsBlocked.setDescription('This counter reflects the number of times a special services call is blocked by a group')
bwOCPGroupNumPremiumServices1CallsBlocked = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 23, 16, 1, 12), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwOCPGroupNumPremiumServices1CallsBlocked.setStatus('current')
if mibBuilder.loadTexts: bwOCPGroupNumPremiumServices1CallsBlocked.setDescription('This counter reflects the number of times a premium services call is blocked by a group')
bwOCPGroupNumPremiumServices2CallsBlocked = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 23, 16, 1, 13), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwOCPGroupNumPremiumServices2CallsBlocked.setStatus('current')
if mibBuilder.loadTexts: bwOCPGroupNumPremiumServices2CallsBlocked.setDescription('This counter reflects the number of times a premium services call is blocked by a group')
bwOCPGroupNumCasualCallsBlocked = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 23, 16, 1, 14), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwOCPGroupNumCasualCallsBlocked.setStatus('current')
if mibBuilder.loadTexts: bwOCPGroupNumCasualCallsBlocked.setDescription('This counter reflects the number of times a casual equal access call is blocked by a group')
bwOCPGroupNumURLDialingCallsBlocked = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 23, 16, 1, 15), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwOCPGroupNumURLDialingCallsBlocked.setStatus('current')
if mibBuilder.loadTexts: bwOCPGroupNumURLDialingCallsBlocked.setDescription('This counter reflects the number of times a URL dialed call is blocked by a group')
bwOCPGroupNumUnknownCallsBlocked = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 23, 16, 1, 16), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwOCPGroupNumUnknownCallsBlocked.setStatus('current')
if mibBuilder.loadTexts: bwOCPGroupNumUnknownCallsBlocked.setDescription('This counter reflects the number of times an unknown call type is blocked by a group')
bwOCPGroupNumSuccessfulAuthorizations = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 23, 16, 1, 17), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwOCPGroupNumSuccessfulAuthorizations.setStatus('current')
if mibBuilder.loadTexts: bwOCPGroupNumSuccessfulAuthorizations.setDescription('This counter reflects the number of times a caller enters a valid authorization code in order to establish a call for a given group.')
bwOCPGroupNumUnsuccessfulAuthorizations = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 23, 16, 1, 18), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwOCPGroupNumUnsuccessfulAuthorizations.setStatus('current')
if mibBuilder.loadTexts: bwOCPGroupNumUnsuccessfulAuthorizations.setDescription('This counter reflects the number of times a caller enters an invalid authorization code in order to establish a call for a given group.')
bwOCPGroupNumTransfers = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 23, 16, 1, 19), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwOCPGroupNumTransfers.setStatus('current')
if mibBuilder.loadTexts: bwOCPGroupNumTransfers.setDescription("This counter reflects the number of times OCP transfers the caller to a number where the caller's request will be handled for a given group.")
bwOCPSACGroupNumSuccessfulLock = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 23, 16, 1, 20), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwOCPSACGroupNumSuccessfulLock.setStatus('current')
if mibBuilder.loadTexts: bwOCPSACGroupNumSuccessfulLock.setDescription('This counter reflects the number of times the SAC lock feature access code is used successfully in order to lock calls for a given group')
bwOCPSACGroupNumSuccessfulUnlock = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 23, 16, 1, 21), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwOCPSACGroupNumSuccessfulUnlock.setStatus('current')
if mibBuilder.loadTexts: bwOCPSACGroupNumSuccessfulUnlock.setDescription('This counter reflects the number of times the SAC unlock feature access code is used successfully in order to unlock calls for a given group')
bwOCPSACGroupNumUnsuccessfulLock = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 23, 16, 1, 22), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwOCPSACGroupNumUnsuccessfulLock.setStatus('current')
if mibBuilder.loadTexts: bwOCPSACGroupNumUnsuccessfulLock.setDescription('This counter reflects the number of times the SAC lock feature access code is used unsuccessfully for a given group')
bwOCPSACGroupNumUnsuccessfulUnlock = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 23, 16, 1, 23), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwOCPSACGroupNumUnsuccessfulUnlock.setStatus('current')
if mibBuilder.loadTexts: bwOCPSACGroupNumUnsuccessfulUnlock.setDescription('This counter reflects the number of times the SAC unlock feature access code is used unsuccessfully for a given group')
bwOCPSACGroupNumUnsuccessfulCodeUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 23, 16, 1, 24), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwOCPSACGroupNumUnsuccessfulCodeUsage.setStatus('current')
if mibBuilder.loadTexts: bwOCPSACGroupNumUnsuccessfulCodeUsage.setDescription('This counter reflects the number of times a stored SAC code is erased from the database because it fails to pass EOCP screening following a change in the EOCP plan that makes the stored SAC code obsolete for a given group')
bwOCPGroupNumOutsideGroupTransferBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 23, 16, 1, 25), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwOCPGroupNumOutsideGroupTransferBlocks.setStatus('current')
if mibBuilder.loadTexts: bwOCPGroupNumOutsideGroupTransferBlocks.setDescription('This counter reflects the number of times this service denies call forwarding or transfer to a party outside of the group for a given group.')
bwPriorityAlertNumDistinctive = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 24, 1), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwPriorityAlertNumDistinctive.setStatus('current')
if mibBuilder.loadTexts: bwPriorityAlertNumDistinctive.setDescription('This counter reflects the number of times an incoming or waiting call has a priority tone applied')
bwPriorityAlertSPTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 24, 2), )
if mibBuilder.loadTexts: bwPriorityAlertSPTable.setStatus('current')
if mibBuilder.loadTexts: bwPriorityAlertSPTable.setDescription('This table contains the counters for Priority Alert service measurements for service providers')
bwPriorityAlertGroupTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 24, 3), )
if mibBuilder.loadTexts: bwPriorityAlertGroupTable.setStatus('current')
if mibBuilder.loadTexts: bwPriorityAlertGroupTable.setDescription('This table contains the counters for Priority Alert service measurements for groups')
bwPriorityAlertSPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 24, 2, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwPriorityAlertSPIndex"))
if mibBuilder.loadTexts: bwPriorityAlertSPEntry.setStatus('current')
if mibBuilder.loadTexts: bwPriorityAlertSPEntry.setDescription('This row contains the counters for Priority Alert service measurements for a service provider')
bwPriorityAlertSPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 24, 2, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwPriorityAlertSPIndex.setStatus('current')
if mibBuilder.loadTexts: bwPriorityAlertSPIndex.setDescription('This integer represents the a service provider index in the system')
bwPriorityAlertSPID = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 24, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwPriorityAlertSPID.setStatus('current')
if mibBuilder.loadTexts: bwPriorityAlertSPID.setDescription('This string represents a service provider ID')
bwPriorityAlertSPNumDistinctive = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 24, 2, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwPriorityAlertSPNumDistinctive.setStatus('current')
if mibBuilder.loadTexts: bwPriorityAlertSPNumDistinctive.setDescription('This counter reflects the number of times an incoming or waiting call has a priority tone applied by a service provider')
bwPriorityAlertGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 24, 3, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwPriorityAlertGroupIndex"))
if mibBuilder.loadTexts: bwPriorityAlertGroupEntry.setStatus('current')
if mibBuilder.loadTexts: bwPriorityAlertGroupEntry.setDescription('This row contains the counters for Priority Alert service measurements for a group')
bwPriorityAlertGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 24, 3, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwPriorityAlertGroupIndex.setStatus('current')
if mibBuilder.loadTexts: bwPriorityAlertGroupIndex.setDescription('This integer represents the a group index in the system')
bwPriorityAlertGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 24, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwPriorityAlertGroupID.setStatus('current')
if mibBuilder.loadTexts: bwPriorityAlertGroupID.setDescription('This string represents a group ID')
bwPriorityAlertGroupNumDistinctive = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 24, 3, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwPriorityAlertGroupNumDistinctive.setStatus('current')
if mibBuilder.loadTexts: bwPriorityAlertGroupNumDistinctive.setDescription('This counter reflects the number of times an incoming or waiting call has a priority tone applied by a group')
bwSCANumAcceptances = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 25, 1), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSCANumAcceptances.setStatus('current')
if mibBuilder.loadTexts: bwSCANumAcceptances.setDescription('This counter reflects the number of times an incoming call meets a criteria for this service')
bwSelectiveCallAcceptanceSPTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 25, 2), )
if mibBuilder.loadTexts: bwSelectiveCallAcceptanceSPTable.setStatus('current')
if mibBuilder.loadTexts: bwSelectiveCallAcceptanceSPTable.setDescription('This table contains the counters for Selective Call Acceptance service measurements for service providers')
bwSelectiveCallAcceptanceGroupTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 25, 3), )
if mibBuilder.loadTexts: bwSelectiveCallAcceptanceGroupTable.setStatus('current')
if mibBuilder.loadTexts: bwSelectiveCallAcceptanceGroupTable.setDescription('This table contains the counters for Selective Call Acceptance service measurements for groups')
bwSelectiveCallAcceptanceSPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 25, 2, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwSelectiveCallAcceptanceSPIndex"))
if mibBuilder.loadTexts: bwSelectiveCallAcceptanceSPEntry.setStatus('current')
if mibBuilder.loadTexts: bwSelectiveCallAcceptanceSPEntry.setDescription('This row contains the counters for Selective Call Acceptance service measurements for a service provider')
bwSelectiveCallAcceptanceSPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 25, 2, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwSelectiveCallAcceptanceSPIndex.setStatus('current')
if mibBuilder.loadTexts: bwSelectiveCallAcceptanceSPIndex.setDescription('This integer represents the a service provider index in the system')
bwSelectiveCallAcceptanceSPID = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 25, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwSelectiveCallAcceptanceSPID.setStatus('current')
if mibBuilder.loadTexts: bwSelectiveCallAcceptanceSPID.setDescription('This string represents a service provider ID')
bwSCASPNumAcceptances = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 25, 2, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSCASPNumAcceptances.setStatus('current')
if mibBuilder.loadTexts: bwSCASPNumAcceptances.setDescription('This counter reflects the number of times an incoming call meets a criteria for this service by a service provider')
bwSelectiveCallAcceptanceGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 25, 3, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwSelectiveCallAcceptanceGroupIndex"))
if mibBuilder.loadTexts: bwSelectiveCallAcceptanceGroupEntry.setStatus('current')
if mibBuilder.loadTexts: bwSelectiveCallAcceptanceGroupEntry.setDescription('This row contains the counters for Selective Call Acceptance service measurements for a group')
bwSelectiveCallAcceptanceGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 25, 3, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwSelectiveCallAcceptanceGroupIndex.setStatus('current')
if mibBuilder.loadTexts: bwSelectiveCallAcceptanceGroupIndex.setDescription('This integer represents the a group index in the system')
bwSelectiveCallAcceptanceGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 25, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwSelectiveCallAcceptanceGroupID.setStatus('current')
if mibBuilder.loadTexts: bwSelectiveCallAcceptanceGroupID.setDescription('This string represents a group ID')
bwSCAGroupNumAcceptances = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 25, 3, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSCAGroupNumAcceptances.setStatus('current')
if mibBuilder.loadTexts: bwSCAGroupNumAcceptances.setDescription('This counter reflects the number of times an incoming call meets a criteria for this service by a group')
bwSCFNumForwards = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 26, 1), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSCFNumForwards.setStatus('current')
if mibBuilder.loadTexts: bwSCFNumForwards.setDescription('This counter reflects the number of times a criteria is met for this service')
bwSelectiveCallForwardSPTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 26, 2), )
if mibBuilder.loadTexts: bwSelectiveCallForwardSPTable.setStatus('current')
if mibBuilder.loadTexts: bwSelectiveCallForwardSPTable.setDescription('This table contains the counters for Call Forwarding Selective service measurements for service providers')
bwSelectiveCallForwardGroupTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 26, 3), )
if mibBuilder.loadTexts: bwSelectiveCallForwardGroupTable.setStatus('current')
if mibBuilder.loadTexts: bwSelectiveCallForwardGroupTable.setDescription('This table contains the counters for Call Forwarding Selective service measurements for groups')
bwSelectiveCallForwardSPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 26, 2, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwSelectiveCallForwardSPIndex"))
if mibBuilder.loadTexts: bwSelectiveCallForwardSPEntry.setStatus('current')
if mibBuilder.loadTexts: bwSelectiveCallForwardSPEntry.setDescription('This row contains the counters for Call Forwarding Selective service measurements for a service provider')
bwSelectiveCallForwardSPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 26, 2, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwSelectiveCallForwardSPIndex.setStatus('current')
if mibBuilder.loadTexts: bwSelectiveCallForwardSPIndex.setDescription('This integer represents the a service provider index in the system')
bwSelectiveCallForwardSPID = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 26, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwSelectiveCallForwardSPID.setStatus('current')
if mibBuilder.loadTexts: bwSelectiveCallForwardSPID.setDescription('This string represents a service provider ID')
bwSCFSPNumForwards = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 26, 2, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSCFSPNumForwards.setStatus('current')
if mibBuilder.loadTexts: bwSCFSPNumForwards.setDescription('This counter reflects the number of times a criteria is met for this service by a service provider')
bwSelectiveCallForwardGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 26, 3, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwSelectiveCallForwardGroupIndex"))
if mibBuilder.loadTexts: bwSelectiveCallForwardGroupEntry.setStatus('current')
if mibBuilder.loadTexts: bwSelectiveCallForwardGroupEntry.setDescription('This row contains the counters for Call Forwarding Selective service measurements for a group')
bwSelectiveCallForwardGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 26, 3, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwSelectiveCallForwardGroupIndex.setStatus('current')
if mibBuilder.loadTexts: bwSelectiveCallForwardGroupIndex.setDescription('This integer represents the a group index in the system')
bwSelectiveCallForwardGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 26, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwSelectiveCallForwardGroupID.setStatus('current')
if mibBuilder.loadTexts: bwSelectiveCallForwardGroupID.setDescription('This string represents a group ID')
bwSCFGroupNumForwards = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 26, 3, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSCFGroupNumForwards.setStatus('current')
if mibBuilder.loadTexts: bwSCFGroupNumForwards.setDescription('This counter reflects the number of times a criteria is met for this service by a group')
bwSCRNumRejects = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 27, 1), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSCRNumRejects.setStatus('current')
if mibBuilder.loadTexts: bwSCRNumRejects.setDescription('This counter reflects the number of times an incoming call meets a criteria for this service')
bwSelectiveCallRejectionSPTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 27, 2), )
if mibBuilder.loadTexts: bwSelectiveCallRejectionSPTable.setStatus('current')
if mibBuilder.loadTexts: bwSelectiveCallRejectionSPTable.setDescription('This table contains the counters for Selective Call Rejection service measurements for service providers')
bwSelectiveCallRejectionGroupTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 27, 3), )
if mibBuilder.loadTexts: bwSelectiveCallRejectionGroupTable.setStatus('current')
if mibBuilder.loadTexts: bwSelectiveCallRejectionGroupTable.setDescription('This table contains the counters for Selective Call Rejection service measurements for groups')
bwSelectiveCallRejectionSPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 27, 2, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwSelectiveCallRejectionSPIndex"))
if mibBuilder.loadTexts: bwSelectiveCallRejectionSPEntry.setStatus('current')
if mibBuilder.loadTexts: bwSelectiveCallRejectionSPEntry.setDescription('This row contains the counters for Selective Call Rejection service measurements for a service provider')
bwSelectiveCallRejectionSPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 27, 2, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwSelectiveCallRejectionSPIndex.setStatus('current')
if mibBuilder.loadTexts: bwSelectiveCallRejectionSPIndex.setDescription('This integer represents the a service provider index in the system')
bwSelectiveCallRejectionSPID = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 27, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwSelectiveCallRejectionSPID.setStatus('current')
if mibBuilder.loadTexts: bwSelectiveCallRejectionSPID.setDescription('This string represents a service provider ID')
bwSCRSPNumRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 27, 2, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSCRSPNumRejects.setStatus('current')
if mibBuilder.loadTexts: bwSCRSPNumRejects.setDescription('This counter reflects the number of times an incoming call meets a criteria for this service by a service provider')
bwSelectiveCallRejectionGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 27, 3, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwSelectiveCallRejectionGroupIndex"))
if mibBuilder.loadTexts: bwSelectiveCallRejectionGroupEntry.setStatus('current')
if mibBuilder.loadTexts: bwSelectiveCallRejectionGroupEntry.setDescription('This row contains the counters for Selective Call Rejection service measurements for a group')
bwSelectiveCallRejectionGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 27, 3, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwSelectiveCallRejectionGroupIndex.setStatus('current')
if mibBuilder.loadTexts: bwSelectiveCallRejectionGroupIndex.setDescription('This integer represents the a group index in the system')
bwSelectiveCallRejectionGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 27, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwSelectiveCallRejectionGroupID.setStatus('current')
if mibBuilder.loadTexts: bwSelectiveCallRejectionGroupID.setDescription('This string represents a group ID')
bwSCRGroupNumRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 27, 3, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSCRGroupNumRejects.setStatus('current')
if mibBuilder.loadTexts: bwSCRGroupNumRejects.setDescription('This counter reflects the number of times an incoming call meets a criteria for this service by a group')
bwSimRingPersonalNumAttempts = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 28, 1), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSimRingPersonalNumAttempts.setStatus('current')
if mibBuilder.loadTexts: bwSimRingPersonalNumAttempts.setDescription('This counter reflects the number of times an incoming call attempt is received')
bwSimRingPersonalNumBusy = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 28, 2), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSimRingPersonalNumBusy.setStatus('current')
if mibBuilder.loadTexts: bwSimRingPersonalNumBusy.setDescription('This counter reflects the number of times that all parties to whom call delivery attempts are made, are busy')
bwSimRingPersonalSPTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 28, 3), )
if mibBuilder.loadTexts: bwSimRingPersonalSPTable.setStatus('current')
if mibBuilder.loadTexts: bwSimRingPersonalSPTable.setDescription('This table contains the counters for Simultaneous Ring Personal service measurements for service providers')
bwSimRingPersonalGroupTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 28, 4), )
if mibBuilder.loadTexts: bwSimRingPersonalGroupTable.setStatus('current')
if mibBuilder.loadTexts: bwSimRingPersonalGroupTable.setDescription('This table contains the counters for Simultaneous Ring Personal service measurements for groups')
bwSimRingPersonalSPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 28, 3, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwSimRingPersonalSPIndex"))
if mibBuilder.loadTexts: bwSimRingPersonalSPEntry.setStatus('current')
if mibBuilder.loadTexts: bwSimRingPersonalSPEntry.setDescription('This row contains the counters for Simultaneous Ring Personal service measurements for a service provider')
bwSimRingPersonalSPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 28, 3, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwSimRingPersonalSPIndex.setStatus('current')
if mibBuilder.loadTexts: bwSimRingPersonalSPIndex.setDescription('This integer represents the a service provider index in the system')
bwSimRingPersonalSPID = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 28, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwSimRingPersonalSPID.setStatus('current')
if mibBuilder.loadTexts: bwSimRingPersonalSPID.setDescription('This string represents a service provider ID')
bwSimRingPersonalSPNumAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 28, 3, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSimRingPersonalSPNumAttempts.setStatus('current')
if mibBuilder.loadTexts: bwSimRingPersonalSPNumAttempts.setDescription('This counter reflects the number of times an incoming call attempt is received by a service provider')
bwSimRingPersonalSPNumBusy = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 28, 3, 1, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSimRingPersonalSPNumBusy.setStatus('current')
if mibBuilder.loadTexts: bwSimRingPersonalSPNumBusy.setDescription('This counter reflects the number of times that all parties to whom call delivery attempts are made by a service provider, are busy')
bwSimRingPersonalGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 28, 4, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwSimRingPersonalGroupIndex"))
if mibBuilder.loadTexts: bwSimRingPersonalGroupEntry.setStatus('current')
if mibBuilder.loadTexts: bwSimRingPersonalGroupEntry.setDescription('This row contains the counters for Simultaneous Ring Personal service measurements for a group')
bwSimRingPersonalGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 28, 4, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwSimRingPersonalGroupIndex.setStatus('current')
if mibBuilder.loadTexts: bwSimRingPersonalGroupIndex.setDescription('This integer represents the a group index in the system')
bwSimRingPersonalGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 28, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwSimRingPersonalGroupID.setStatus('current')
if mibBuilder.loadTexts: bwSimRingPersonalGroupID.setDescription('This string represents a group ID')
bwSimRingPersonalGroupNumAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 28, 4, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSimRingPersonalGroupNumAttempts.setStatus('current')
if mibBuilder.loadTexts: bwSimRingPersonalGroupNumAttempts.setDescription('This counter reflects the number of times an incoming call attempt is received by a group')
bwSimRingPersonalGroupNumBusy = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 28, 4, 1, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSimRingPersonalGroupNumBusy.setStatus('current')
if mibBuilder.loadTexts: bwSimRingPersonalGroupNumBusy.setDescription('This counter reflects the number of times that all parties to whom call delivery attempts are made by a group, are busy')
bwVMNumBusyGreetingsPlayed = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 29, 1), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwVMNumBusyGreetingsPlayed.setStatus('current')
if mibBuilder.loadTexts: bwVMNumBusyGreetingsPlayed.setDescription('This counter reflects the number of times a busy greeting is played to a caller')
bwVMNumNoAnswerGreetingsPlayed = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 29, 2), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwVMNumNoAnswerGreetingsPlayed.setStatus('current')
if mibBuilder.loadTexts: bwVMNumNoAnswerGreetingsPlayed.setDescription('This counter reflects the number of times a no answer greeting is played')
bwVMNumMessagesLeft = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 29, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwVMNumMessagesLeft.setStatus('current')
if mibBuilder.loadTexts: bwVMNumMessagesLeft.setDescription('This counter reflects the number of times a voice message is recorded')
bwVMRNumBusyGreetingsRecorded = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 29, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwVMRNumBusyGreetingsRecorded.setStatus('current')
if mibBuilder.loadTexts: bwVMRNumBusyGreetingsRecorded.setDescription('This counter reflects the number of times a busy greeting is recorded over the phone')
bwVMRNumNoAnswerGreetingsRecorded = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 29, 5), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwVMRNumNoAnswerGreetingsRecorded.setStatus('current')
if mibBuilder.loadTexts: bwVMRNumNoAnswerGreetingsRecorded.setDescription('This counter reflects the number of times a no answer greeting is recorded over the phone')
bwVMRNumPersonalizedNamesRecorded = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 29, 6), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwVMRNumPersonalizedNamesRecorded.setStatus('current')
if mibBuilder.loadTexts: bwVMRNumPersonalizedNamesRecorded.setDescription('This counter reflects the number of times a personalized name greeting is recorded over the phone')
bwVMRNumLoginAttempts = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 29, 7), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwVMRNumLoginAttempts.setStatus('current')
if mibBuilder.loadTexts: bwVMRNumLoginAttempts.setDescription('This counter reflects the number of times a user attempts a login over the phone')
bwVMRNumLoginFailures = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 29, 8), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwVMRNumLoginFailures.setStatus('current')
if mibBuilder.loadTexts: bwVMRNumLoginFailures.setDescription('This counter reflects the number of times a user login attempt fails')
bwVMRNumComposeSendAttempts = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 29, 9), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwVMRNumComposeSendAttempts.setStatus('current')
if mibBuilder.loadTexts: bwVMRNumComposeSendAttempts.setDescription('This counter reflects the number of times a composed message is sent to a user')
bwVMRNumComposeSendGroupAttempts = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 29, 10), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwVMRNumComposeSendGroupAttempts.setStatus('current')
if mibBuilder.loadTexts: bwVMRNumComposeSendGroupAttempts.setDescription('This counter reflects the number of times a composed message is sent to a group')
bwVMRNumForwardSendAttempts = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 29, 11), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwVMRNumForwardSendAttempts.setStatus('current')
if mibBuilder.loadTexts: bwVMRNumForwardSendAttempts.setDescription('This counter reflects the number of times a forwarded message is sent to a user')
bwVMRNumForwardSendGroupAttempts = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 29, 12), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwVMRNumForwardSendGroupAttempts.setStatus('current')
if mibBuilder.loadTexts: bwVMRNumForwardSendGroupAttempts.setDescription('This counter reflects the number of times a forwarded message is sent to a group')
bwVMRNumReplySendAttempts = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 29, 13), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwVMRNumReplySendAttempts.setStatus('current')
if mibBuilder.loadTexts: bwVMRNumReplySendAttempts.setDescription('This counter reflects the number of times a message reply is sent')
bwVMRNumSendFailed = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 29, 14), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwVMRNumSendFailed.setStatus('current')
if mibBuilder.loadTexts: bwVMRNumSendFailed.setDescription('This counter reflects the number of times an attempt to send a message to a user failed')
bwVMRNumSendGroupFailed = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 29, 15), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwVMRNumSendGroupFailed.setStatus('current')
if mibBuilder.loadTexts: bwVMRNumSendGroupFailed.setDescription('This counter reflects the number of times an attempt to send a message to a group failed')
bwVMRDeleteAllMsgsAttempts = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 29, 16), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwVMRDeleteAllMsgsAttempts.setStatus('current')
if mibBuilder.loadTexts: bwVMRDeleteAllMsgsAttempts.setDescription('This counter reflects the number of times a user attempts to delete all messages')
bwVMRCallBackAttempts = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 29, 17), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwVMRCallBackAttempts.setStatus('current')
if mibBuilder.loadTexts: bwVMRCallBackAttempts.setDescription('This counter reflects the number of times a user attempts to callback the caller')
bwVMRCallBackFailures = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 29, 18), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwVMRCallBackFailures.setStatus('obsolete')
if mibBuilder.loadTexts: bwVMRCallBackFailures.setDescription('This counter reflects the number of times an attempt to callback failed. This object is obsolete. It could not be measure anymore.')
bwVPNumAABusHoursGreetingRecorded = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 29, 19), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwVPNumAABusHoursGreetingRecorded.setStatus('current')
if mibBuilder.loadTexts: bwVPNumAABusHoursGreetingRecorded.setDescription('This counter reflects the number of times an AA business hours greeting is recorded over the phone')
bwVPNumAAAfterHoursGreetingRecorded = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 29, 20), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwVPNumAAAfterHoursGreetingRecorded.setStatus('current')
if mibBuilder.loadTexts: bwVPNumAAAfterHoursGreetingRecorded.setDescription('This counter reflects the number of times an AA after hours greeting is recorded over the phone')
bwVPNumCFADestinationChanged = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 29, 21), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwVPNumCFADestinationChanged.setStatus('current')
if mibBuilder.loadTexts: bwVPNumCFADestinationChanged.setDescription('This counter reflects the number of times a CFA destination is changed over the phone')
bwVPNumPasscodeChanged = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 29, 22), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwVPNumPasscodeChanged.setStatus('current')
if mibBuilder.loadTexts: bwVPNumPasscodeChanged.setDescription('This counter reflects the number of times a Voice Portal passcode is changed over the phone')
bwVoiceMessagingSPTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 29, 23), )
if mibBuilder.loadTexts: bwVoiceMessagingSPTable.setStatus('current')
if mibBuilder.loadTexts: bwVoiceMessagingSPTable.setDescription('This table contains the counters for Voice Messaging service measurements for service providers')
bwVMRNumComposeSendListAttempts = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 29, 24), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwVMRNumComposeSendListAttempts.setStatus('current')
if mibBuilder.loadTexts: bwVMRNumComposeSendListAttempts.setDescription('This counter reflects the number of times a composed message is sent to a distribution list')
bwVMRNumForwardSendListAttempts = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 29, 25), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwVMRNumForwardSendListAttempts.setStatus('current')
if mibBuilder.loadTexts: bwVMRNumForwardSendListAttempts.setDescription('This counter reflects the number of times a forwarded message is sent to a distribution list')
bwVMRNumSendListFailed = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 29, 26), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwVMRNumSendListFailed.setStatus('current')
if mibBuilder.loadTexts: bwVMRNumSendListFailed.setDescription('This counter reflects the number of times an attempt to send a message to a distribution list has failed (NOT incremented in case of partial failures)')
bwVPGreetingRecorded = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 29, 27), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwVPGreetingRecorded.setStatus('current')
if mibBuilder.loadTexts: bwVPGreetingRecorded.setDescription('Number of times a user recorded a branded Voice Portal greeting')
bwVMGreetingRecorded = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 29, 28), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwVMGreetingRecorded.setStatus('current')
if mibBuilder.loadTexts: bwVMGreetingRecorded.setDescription('Number of times a user recorded a branded Voice Messaging greeting')
bwVoiceMessagingGroupTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 29, 29), )
if mibBuilder.loadTexts: bwVoiceMessagingGroupTable.setStatus('current')
if mibBuilder.loadTexts: bwVoiceMessagingGroupTable.setDescription('This table contains the counters for Voice Messaging service measurements for groups')
bwVPCCall = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 29, 30), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwVPCCall.setStatus('current')
if mibBuilder.loadTexts: bwVPCCall.setDescription('Number of times a user initiated a call with Voice Portal Calling')
bwMultiMediaMsgDeposit = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 29, 31), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwMultiMediaMsgDeposit.setStatus('current')
if mibBuilder.loadTexts: bwMultiMediaMsgDeposit.setDescription('Number of times a user has received a multimedia message')
bwVMMultiMediaGreetingRecorded = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 29, 32), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwVMMultiMediaGreetingRecorded.setStatus('current')
if mibBuilder.loadTexts: bwVMMultiMediaGreetingRecorded.setDescription('Number of time a user has recorded a multimedia message via the Voice Portal')
bwAutoAttendantMultiMediaPromptRecorded = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 29, 33), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwAutoAttendantMultiMediaPromptRecorded.setStatus('current')
if mibBuilder.loadTexts: bwAutoAttendantMultiMediaPromptRecorded.setDescription('Number of times an administrator has recorded an AA prompt via the Voice Portal')
bwMessagingQuery = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 29, 34), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwMessagingQuery.setStatus('current')
if mibBuilder.loadTexts: bwMessagingQuery.setDescription('This counter is incremented whenever a request for remote user mailbox information is sent out.')
bwMessagingQueryNoUser = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 29, 35), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwMessagingQueryNoUser.setStatus('current')
if mibBuilder.loadTexts: bwMessagingQueryNoUser.setDescription('This counter is incremented whenever a request for remote user mailbox information results in a user not found error.')
bwMessagingQueryNoMailbox = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 29, 36), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwMessagingQueryNoMailbox.setStatus('current')
if mibBuilder.loadTexts: bwMessagingQueryNoMailbox.setDescription('This counter is incremented whenever a request for remote user mailbox information results in an error because the remote mailbox is disabled, full, or not configured.')
bwVoiceMessagingSPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 29, 23, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwVoiceMessagingSPIndex"))
if mibBuilder.loadTexts: bwVoiceMessagingSPEntry.setStatus('current')
if mibBuilder.loadTexts: bwVoiceMessagingSPEntry.setDescription('This row contains the counters for Voice Messaging service measurements for a service provider')
bwVoiceMessagingSPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 29, 23, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwVoiceMessagingSPIndex.setStatus('current')
if mibBuilder.loadTexts: bwVoiceMessagingSPIndex.setDescription('This integer represents the a service provider index in the system')
bwVoiceMessagingSPID = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 29, 23, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwVoiceMessagingSPID.setStatus('current')
if mibBuilder.loadTexts: bwVoiceMessagingSPID.setDescription('This string represents a service provider ID')
bwVMSPNumBusyGreetingsPlayed = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 29, 23, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwVMSPNumBusyGreetingsPlayed.setStatus('current')
if mibBuilder.loadTexts: bwVMSPNumBusyGreetingsPlayed.setDescription('This counter reflects the number of times a busy greeting is played to a caller by a service provider')
bwVMSPNumNoAnswerGreetingsPlayed = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 29, 23, 1, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwVMSPNumNoAnswerGreetingsPlayed.setStatus('current')
if mibBuilder.loadTexts: bwVMSPNumNoAnswerGreetingsPlayed.setDescription('This counter reflects the number of times a no answer greeting is played by a service provider')
bwVMSPNumMessagesLeft = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 29, 23, 1, 5), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwVMSPNumMessagesLeft.setStatus('current')
if mibBuilder.loadTexts: bwVMSPNumMessagesLeft.setDescription('This counter reflects the number of times a voice message is recorded by a service provider')
bwVMRSPNumBusyGreetingsRecorded = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 29, 23, 1, 6), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwVMRSPNumBusyGreetingsRecorded.setStatus('current')
if mibBuilder.loadTexts: bwVMRSPNumBusyGreetingsRecorded.setDescription('This counter reflects the number of times a busy greeting is recorded over the phone by a service provider')
bwVMRSPNumNoAnswerGreetingsRecorded = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 29, 23, 1, 7), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwVMRSPNumNoAnswerGreetingsRecorded.setStatus('current')
if mibBuilder.loadTexts: bwVMRSPNumNoAnswerGreetingsRecorded.setDescription('This counter reflects the number of times a no answer greeting is recorded over the phone by a service provider')
bwVMRSPNumPersonalizedNamesRecorded = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 29, 23, 1, 8), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwVMRSPNumPersonalizedNamesRecorded.setStatus('current')
if mibBuilder.loadTexts: bwVMRSPNumPersonalizedNamesRecorded.setDescription('This counter reflects the number of times a personalized name greeting is recorded over the phone by a service provider')
bwVMRSPNumLoginAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 29, 23, 1, 9), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwVMRSPNumLoginAttempts.setStatus('current')
if mibBuilder.loadTexts: bwVMRSPNumLoginAttempts.setDescription('This counter reflects the number of times a user attempts a login over the phone by a service provider')
bwVMRSPNumLoginFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 29, 23, 1, 10), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwVMRSPNumLoginFailures.setStatus('current')
if mibBuilder.loadTexts: bwVMRSPNumLoginFailures.setDescription('This counter reflects the number of times a user login attempt fails by a service provider')
bwVMRSPNumComposeSendAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 29, 23, 1, 11), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwVMRSPNumComposeSendAttempts.setStatus('current')
if mibBuilder.loadTexts: bwVMRSPNumComposeSendAttempts.setDescription('This counter reflects the number of times a composed message is sent to a user by a service provider')
bwVMRSPNumComposeSendGroupAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 29, 23, 1, 12), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwVMRSPNumComposeSendGroupAttempts.setStatus('current')
if mibBuilder.loadTexts: bwVMRSPNumComposeSendGroupAttempts.setDescription('This counter reflects the number of times a composed message is sent to a group by a service provider')
bwVMRSPNumForwardSendAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 29, 23, 1, 13), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwVMRSPNumForwardSendAttempts.setStatus('current')
if mibBuilder.loadTexts: bwVMRSPNumForwardSendAttempts.setDescription('This counter reflects the number of times a forwarded message is sent to a user by a service provider')
bwVMRSPNumForwardSendGroupAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 29, 23, 1, 14), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwVMRSPNumForwardSendGroupAttempts.setStatus('current')
if mibBuilder.loadTexts: bwVMRSPNumForwardSendGroupAttempts.setDescription('This counter reflects the number of times a forwarded message is sent to a group by a service provider')
bwVMRSPNumReplySendAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 29, 23, 1, 15), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwVMRSPNumReplySendAttempts.setStatus('current')
if mibBuilder.loadTexts: bwVMRSPNumReplySendAttempts.setDescription('This counter reflects the number of times a message reply is sent by a service provider')
bwVMRSPNumSendFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 29, 23, 1, 16), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwVMRSPNumSendFailed.setStatus('current')
if mibBuilder.loadTexts: bwVMRSPNumSendFailed.setDescription('This counter reflects the number of times an attempt to send a message to a user failed by a service provider')
bwVMRSPNumSendGroupFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 29, 23, 1, 17), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwVMRSPNumSendGroupFailed.setStatus('current')
if mibBuilder.loadTexts: bwVMRSPNumSendGroupFailed.setDescription('This counter reflects the number of times an attempt to send a message to a group failed by a service provider')
bwVMRSPDeleteAllMsgsAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 29, 23, 1, 18), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwVMRSPDeleteAllMsgsAttempts.setStatus('current')
if mibBuilder.loadTexts: bwVMRSPDeleteAllMsgsAttempts.setDescription('This counter reflects the number of times a user attempts to delete all messages by a service provider')
bwVMRSPCallBackAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 29, 23, 1, 19), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwVMRSPCallBackAttempts.setStatus('current')
if mibBuilder.loadTexts: bwVMRSPCallBackAttempts.setDescription('This counter reflects the number of times a user attempts to callback the caller by a service provider')
bwVMRSPCallBackFailures = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 29, 23, 1, 20), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwVMRSPCallBackFailures.setStatus('obsolete')
if mibBuilder.loadTexts: bwVMRSPCallBackFailures.setDescription('This counter reflects the number of times an attempt to callback failed by a service provider. This object is obsolete. It could not be measure anymore.')
bwVPSPNumAABusHoursGreetingRecorded = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 29, 23, 1, 21), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwVPSPNumAABusHoursGreetingRecorded.setStatus('current')
if mibBuilder.loadTexts: bwVPSPNumAABusHoursGreetingRecorded.setDescription('This counter reflects the number of times an AA business hours greeting is recorded over the phone by a service provider')
bwVPSPNumAAAfterHoursGreetingRecorded = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 29, 23, 1, 22), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwVPSPNumAAAfterHoursGreetingRecorded.setStatus('current')
if mibBuilder.loadTexts: bwVPSPNumAAAfterHoursGreetingRecorded.setDescription('This counter reflects the number of times an AA after hours greeting is recorded over the phone by a service provider')
bwVPSPNumCFADestinationChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 29, 23, 1, 23), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwVPSPNumCFADestinationChanged.setStatus('current')
if mibBuilder.loadTexts: bwVPSPNumCFADestinationChanged.setDescription('This counter reflects the number of times a CFA destination is changed over the phone by a service provider')
bwVPSPNumPasscodeChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 29, 23, 1, 24), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwVPSPNumPasscodeChanged.setStatus('current')
if mibBuilder.loadTexts: bwVPSPNumPasscodeChanged.setDescription('This counter reflects the number of times a Voice Portal is changed over the phone by a service provider')
bwVMRSPNumComposeSendListAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 29, 23, 1, 25), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwVMRSPNumComposeSendListAttempts.setStatus('current')
if mibBuilder.loadTexts: bwVMRSPNumComposeSendListAttempts.setDescription('This counter reflects the number of times a composed message is sent to a distribution list by a service provider')
bwVMRSPNumForwardSendListAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 29, 23, 1, 26), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwVMRSPNumForwardSendListAttempts.setStatus('current')
if mibBuilder.loadTexts: bwVMRSPNumForwardSendListAttempts.setDescription('This counter reflects the number of times a forwarded message is sent to a distribution list by a service provider')
bwVMRSPNumSendListFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 29, 23, 1, 27), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwVMRSPNumSendListFailed.setStatus('current')
if mibBuilder.loadTexts: bwVMRSPNumSendListFailed.setDescription('This counter reflects the number of times an attempt to send a message to a distribution list failed for a service provider (NOT incremented in case of partial failures)')
bwVPSPGreetingRecorded = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 29, 23, 1, 28), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwVPSPGreetingRecorded.setStatus('current')
if mibBuilder.loadTexts: bwVPSPGreetingRecorded.setDescription('Number of times a user recorded a branded Voice Messaging greeting for a given service provider')
bwVMSPGreetingRecorded = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 29, 23, 1, 29), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwVMSPGreetingRecorded.setStatus('current')
if mibBuilder.loadTexts: bwVMSPGreetingRecorded.setDescription('Number of times a user recorded a branded Voice Portal greeting for a given service provider')
bwVPCSPCall = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 29, 23, 1, 30), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwVPCSPCall.setStatus('current')
if mibBuilder.loadTexts: bwVPCSPCall.setDescription('Number of times a user from a specific service provider initiated a call with Voice Portal Calling')
bwSPMultiMediaMsgDeposit = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 29, 23, 1, 31), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSPMultiMediaMsgDeposit.setStatus('current')
if mibBuilder.loadTexts: bwSPMultiMediaMsgDeposit.setDescription('Number of times a user has received a multimedia message for a given service provider')
bwVMSPMultiMediaGreetingRecorded = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 29, 23, 1, 32), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwVMSPMultiMediaGreetingRecorded.setStatus('current')
if mibBuilder.loadTexts: bwVMSPMultiMediaGreetingRecorded.setDescription('Number of time a user has recorded a multimedia message via the Voice Portal for a given service provider')
bwAutoAttendantSPMultiMediaPromptRecorded = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 29, 23, 1, 33), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwAutoAttendantSPMultiMediaPromptRecorded.setStatus('current')
if mibBuilder.loadTexts: bwAutoAttendantSPMultiMediaPromptRecorded.setDescription('Number of times an administrator has recorded an AA prompt via the Voice Portal for a given service provider')
bwMessagingSPQuery = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 29, 23, 1, 34), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwMessagingSPQuery.setStatus('current')
if mibBuilder.loadTexts: bwMessagingSPQuery.setDescription('This counter is incremented whenever a request for remote user mailbox information is sent out for a given service provider.')
bwMessagingSPQueryNoUser = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 29, 23, 1, 35), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwMessagingSPQueryNoUser.setStatus('current')
if mibBuilder.loadTexts: bwMessagingSPQueryNoUser.setDescription('This counter is incremented whenever a request for remote user mailbox information results in a user not found error for a given service provider.')
bwMessagingSPQueryNoMailbox = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 29, 23, 1, 36), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwMessagingSPQueryNoMailbox.setStatus('current')
if mibBuilder.loadTexts: bwMessagingSPQueryNoMailbox.setDescription('This counter is incremented whenever a request for remote user mailbox information results in an error because the remote mailbox is disabled, full, or not configured for a given service provider.')
bwVoiceMessagingGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 29, 29, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwVoiceMessagingGroupIndex"))
if mibBuilder.loadTexts: bwVoiceMessagingGroupEntry.setStatus('current')
if mibBuilder.loadTexts: bwVoiceMessagingGroupEntry.setDescription('This row contains the counters for Voice Messaging service measurements for a group')
bwVoiceMessagingGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 29, 29, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwVoiceMessagingGroupIndex.setStatus('current')
if mibBuilder.loadTexts: bwVoiceMessagingGroupIndex.setDescription('This integer represents the a group index in the system')
bwVoiceMessagingGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 29, 29, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwVoiceMessagingGroupID.setStatus('current')
if mibBuilder.loadTexts: bwVoiceMessagingGroupID.setDescription('This string represents a group ID')
bwVMGroupNumBusyGreetingsPlayed = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 29, 29, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwVMGroupNumBusyGreetingsPlayed.setStatus('current')
if mibBuilder.loadTexts: bwVMGroupNumBusyGreetingsPlayed.setDescription('This counter reflects the number of times a busy greeting is played to a caller by a group')
bwVMGroupNumNoAnswerGreetingsPlayed = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 29, 29, 1, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwVMGroupNumNoAnswerGreetingsPlayed.setStatus('current')
if mibBuilder.loadTexts: bwVMGroupNumNoAnswerGreetingsPlayed.setDescription('This counter reflects the number of times a no answer greeting is played by a group')
bwVMGroupNumMessagesLeft = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 29, 29, 1, 5), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwVMGroupNumMessagesLeft.setStatus('current')
if mibBuilder.loadTexts: bwVMGroupNumMessagesLeft.setDescription('This counter reflects the number of times a voice message is recorded by a group')
bwVMRGroupNumBusyGreetingsRecorded = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 29, 29, 1, 6), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwVMRGroupNumBusyGreetingsRecorded.setStatus('current')
if mibBuilder.loadTexts: bwVMRGroupNumBusyGreetingsRecorded.setDescription('This counter reflects the number of times a busy greeting is recorded over the phone by a group')
bwVMRGroupNumNoAnswerGreetingsRecorded = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 29, 29, 1, 7), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwVMRGroupNumNoAnswerGreetingsRecorded.setStatus('current')
if mibBuilder.loadTexts: bwVMRGroupNumNoAnswerGreetingsRecorded.setDescription('This counter reflects the number of times a no answer greeting is recorded over the phone by a group')
bwVMRGroupNumPersonalizedNamesRecorded = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 29, 29, 1, 8), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwVMRGroupNumPersonalizedNamesRecorded.setStatus('current')
if mibBuilder.loadTexts: bwVMRGroupNumPersonalizedNamesRecorded.setDescription('This counter reflects the number of times a personalized name greeting is recorded over the phone by a group')
bwVMRGroupNumLoginAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 29, 29, 1, 9), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwVMRGroupNumLoginAttempts.setStatus('current')
if mibBuilder.loadTexts: bwVMRGroupNumLoginAttempts.setDescription('This counter reflects the number of times a user attempts a login over the phone by a group')
bwVMRGroupNumLoginFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 29, 29, 1, 10), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwVMRGroupNumLoginFailures.setStatus('current')
if mibBuilder.loadTexts: bwVMRGroupNumLoginFailures.setDescription('This counter reflects the number of times a user login attempt fails by a group')
bwVMRGroupNumComposeSendAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 29, 29, 1, 11), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwVMRGroupNumComposeSendAttempts.setStatus('current')
if mibBuilder.loadTexts: bwVMRGroupNumComposeSendAttempts.setDescription('This counter reflects the number of times a composed message is sent to a user by a group')
bwVMRGroupNumComposeSendGroupAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 29, 29, 1, 12), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwVMRGroupNumComposeSendGroupAttempts.setStatus('current')
if mibBuilder.loadTexts: bwVMRGroupNumComposeSendGroupAttempts.setDescription('This counter reflects the number of times a composed message is sent to a group by a group')
bwVMRGroupNumForwardSendAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 29, 29, 1, 13), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwVMRGroupNumForwardSendAttempts.setStatus('current')
if mibBuilder.loadTexts: bwVMRGroupNumForwardSendAttempts.setDescription('This counter reflects the number of times a forwarded message is sent to a user by a group')
bwVMRGroupNumForwardSendGroupAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 29, 29, 1, 14), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwVMRGroupNumForwardSendGroupAttempts.setStatus('current')
if mibBuilder.loadTexts: bwVMRGroupNumForwardSendGroupAttempts.setDescription('This counter reflects the number of times a forwarded message is sent to a group by a group')
bwVMRGroupNumReplySendAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 29, 29, 1, 15), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwVMRGroupNumReplySendAttempts.setStatus('current')
if mibBuilder.loadTexts: bwVMRGroupNumReplySendAttempts.setDescription('This counter reflects the number of times a message reply is sent by a group')
bwVMRGroupNumSendFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 29, 29, 1, 16), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwVMRGroupNumSendFailed.setStatus('current')
if mibBuilder.loadTexts: bwVMRGroupNumSendFailed.setDescription('This counter reflects the number of times an attempt to send a message to a user failed by a group')
bwVMRGroupNumSendGroupFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 29, 29, 1, 17), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwVMRGroupNumSendGroupFailed.setStatus('current')
if mibBuilder.loadTexts: bwVMRGroupNumSendGroupFailed.setDescription('This counter reflects the number of times an attempt to send a message to a group failed by a group')
bwVMRGroupDeleteAllMsgsAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 29, 29, 1, 18), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwVMRGroupDeleteAllMsgsAttempts.setStatus('current')
if mibBuilder.loadTexts: bwVMRGroupDeleteAllMsgsAttempts.setDescription('This counter reflects the number of times a user attempts to delete all messages by a group')
bwVMRGroupCallBackAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 29, 29, 1, 19), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwVMRGroupCallBackAttempts.setStatus('current')
if mibBuilder.loadTexts: bwVMRGroupCallBackAttempts.setDescription('This counter reflects the number of times a user attempts to callback the caller by a group')
bwVMRGroupCallBackFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 29, 29, 1, 20), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwVMRGroupCallBackFailures.setStatus('obsolete')
if mibBuilder.loadTexts: bwVMRGroupCallBackFailures.setDescription('This counter reflects the number of times an attempt to callback failed by a group. This object is obsolete. It could not be measure anymore.')
bwVPGroupNumAABusHoursGreetingRecorded = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 29, 29, 1, 21), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwVPGroupNumAABusHoursGreetingRecorded.setStatus('current')
if mibBuilder.loadTexts: bwVPGroupNumAABusHoursGreetingRecorded.setDescription('This counter reflects the number of times an AA business hours greeting is recorded over the phone by a group')
bwVPGroupNumAAAfterHoursGreetingRecorded = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 29, 29, 1, 22), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwVPGroupNumAAAfterHoursGreetingRecorded.setStatus('current')
if mibBuilder.loadTexts: bwVPGroupNumAAAfterHoursGreetingRecorded.setDescription('This counter reflects the number of times an AA after hours greeting is recorded over the phone by a group')
bwVPGroupNumCFADestinationChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 29, 29, 1, 23), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwVPGroupNumCFADestinationChanged.setStatus('current')
if mibBuilder.loadTexts: bwVPGroupNumCFADestinationChanged.setDescription('This counter reflects the number of times a CFA destination is changed over the phone by a group')
bwVPGroupNumPasscodeChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 29, 29, 1, 24), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwVPGroupNumPasscodeChanged.setStatus('current')
if mibBuilder.loadTexts: bwVPGroupNumPasscodeChanged.setDescription('This counter reflects the number of times a Voice Portal is changed over the phone by a group')
bwVMRGroupNumComposeSendListAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 29, 29, 1, 25), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwVMRGroupNumComposeSendListAttempts.setStatus('current')
if mibBuilder.loadTexts: bwVMRGroupNumComposeSendListAttempts.setDescription('This counter reflects the number of times a composed message is sent to a distribution list by a group')
bwVMRGroupNumForwardSendListAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 29, 29, 1, 26), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwVMRGroupNumForwardSendListAttempts.setStatus('current')
if mibBuilder.loadTexts: bwVMRGroupNumForwardSendListAttempts.setDescription('This counter reflects the number of times a forwarded message is sent to a distribution list by a group')
bwVMRGroupNumSendListFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 29, 29, 1, 27), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwVMRGroupNumSendListFailed.setStatus('current')
if mibBuilder.loadTexts: bwVMRGroupNumSendListFailed.setDescription('This counter reflects the number of times an attempt to send a message to a distribution list failed for a group (NOT incremented in case of partial failures)')
bwVPGroupGreetingRecorded = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 29, 29, 1, 28), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwVPGroupGreetingRecorded.setStatus('current')
if mibBuilder.loadTexts: bwVPGroupGreetingRecorded.setDescription('Number of times a user recorded a branded Voice Messaging greeting for a given group')
bwVMGroupGreetingRecorded = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 29, 29, 1, 29), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwVMGroupGreetingRecorded.setStatus('current')
if mibBuilder.loadTexts: bwVMGroupGreetingRecorded.setDescription('Number of times a user recorded a branded Voice Portal greeting for a given group')
bwVPCGroupCall = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 29, 29, 1, 30), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwVPCGroupCall.setStatus('current')
if mibBuilder.loadTexts: bwVPCGroupCall.setDescription('Number of times a user from a specific group initiated a call with Voice Portal Calling')
bwGroupMultiMediaMsgDeposit = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 29, 29, 1, 31), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwGroupMultiMediaMsgDeposit.setStatus('current')
if mibBuilder.loadTexts: bwGroupMultiMediaMsgDeposit.setDescription('Number of times a user has received a multimedia message for a given group')
bwVMGroupMultiMediaGreetingRecorded = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 29, 29, 1, 32), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwVMGroupMultiMediaGreetingRecorded.setStatus('current')
if mibBuilder.loadTexts: bwVMGroupMultiMediaGreetingRecorded.setDescription('Number of time a user has recorded a multimedia message via the Voice Portal for a given group')
bwAutoAttendantGroupMultiMediaPromptRecorded = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 29, 29, 1, 33), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwAutoAttendantGroupMultiMediaPromptRecorded.setStatus('current')
if mibBuilder.loadTexts: bwAutoAttendantGroupMultiMediaPromptRecorded.setDescription('Number of times an administrator has recorded an AA prompt via the Voice Portal for a given group')
bwMessagingGroupQuery = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 29, 29, 1, 34), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwMessagingGroupQuery.setStatus('current')
if mibBuilder.loadTexts: bwMessagingGroupQuery.setDescription('This counter is incremented whenever a request for remote user mailbox information is sent out for a given service provider.')
bwMessagingGroupQueryNoUser = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 29, 29, 1, 35), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwMessagingGroupQueryNoUser.setStatus('current')
if mibBuilder.loadTexts: bwMessagingGroupQueryNoUser.setDescription('This counter is incremented whenever a request for remote user mailbox information results in a user not found error for a given service provider.')
bwMessagingGroupQueryNoMailbox = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 29, 29, 1, 36), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwMessagingGroupQueryNoMailbox.setStatus('current')
if mibBuilder.loadTexts: bwMessagingGroupQueryNoMailbox.setDescription('This counter is incremented whenever a request for remote user mailbox information results in an error because the remote mailbox is disabled, full, or not configured for a given service provider.')
bwSeriesCompletionNumAttempts = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 30, 1), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSeriesCompletionNumAttempts.setStatus('current')
if mibBuilder.loadTexts: bwSeriesCompletionNumAttempts.setDescription('incremented whenever the series completion service forwards a call to the next user in the list')
bwSeriesCompletionNumBusy = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 30, 2), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSeriesCompletionNumBusy.setStatus('current')
if mibBuilder.loadTexts: bwSeriesCompletionNumBusy.setDescription('incremented whenever the series completion service reaches the end of the forwarding list, and no users are available')
bwSeriesCompletionSPTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 30, 3), )
if mibBuilder.loadTexts: bwSeriesCompletionSPTable.setStatus('current')
if mibBuilder.loadTexts: bwSeriesCompletionSPTable.setDescription('This table contains the counters for Series Completion service measurements for service providers')
bwSeriesCompletionGroupTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 30, 4), )
if mibBuilder.loadTexts: bwSeriesCompletionGroupTable.setStatus('current')
if mibBuilder.loadTexts: bwSeriesCompletionGroupTable.setDescription('This table contains the counters for Series Completion service measurements for groups')
bwSeriesCompletionSPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 30, 3, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwSeriesCompletionSPIndex"))
if mibBuilder.loadTexts: bwSeriesCompletionSPEntry.setStatus('current')
if mibBuilder.loadTexts: bwSeriesCompletionSPEntry.setDescription('This row contains the counters for Series Completion service measurements for a service provider')
bwSeriesCompletionSPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 30, 3, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwSeriesCompletionSPIndex.setStatus('current')
if mibBuilder.loadTexts: bwSeriesCompletionSPIndex.setDescription('This integer represents the a service provider index in the system')
bwSeriesCompletionSPID = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 30, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwSeriesCompletionSPID.setStatus('current')
if mibBuilder.loadTexts: bwSeriesCompletionSPID.setDescription('This string represents a service provider ID')
bwSeriesCompletionSPNumAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 30, 3, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSeriesCompletionSPNumAttempts.setStatus('current')
if mibBuilder.loadTexts: bwSeriesCompletionSPNumAttempts.setDescription('This counter reflects the number of times the series completion service forwards a call to the next user in the list by a service provider')
bwSeriesCompletionSPNumBusy = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 30, 3, 1, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSeriesCompletionSPNumBusy.setStatus('current')
if mibBuilder.loadTexts: bwSeriesCompletionSPNumBusy.setDescription('This counter reflects the number of times the series completion service reaches the end of the forwarding list, and no users are available by a service provider')
bwSeriesCompletionGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 30, 4, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwSeriesCompletionGroupIndex"))
if mibBuilder.loadTexts: bwSeriesCompletionGroupEntry.setStatus('current')
if mibBuilder.loadTexts: bwSeriesCompletionGroupEntry.setDescription('This row contains the counters for Series Completion service measurements for a group')
bwSeriesCompletionGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 30, 4, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwSeriesCompletionGroupIndex.setStatus('current')
if mibBuilder.loadTexts: bwSeriesCompletionGroupIndex.setDescription('This integer represents the a group index in the system')
bwSeriesCompletionGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 30, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwSeriesCompletionGroupID.setStatus('current')
if mibBuilder.loadTexts: bwSeriesCompletionGroupID.setDescription('This string represents a group ID')
bwSeriesCompletionGroupNumAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 30, 4, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSeriesCompletionGroupNumAttempts.setStatus('current')
if mibBuilder.loadTexts: bwSeriesCompletionGroupNumAttempts.setDescription('This counter reflects the number of times the series completion service forwards a call to the next user in the list by a group')
bwSeriesCompletionGroupNumBusy = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 30, 4, 1, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSeriesCompletionGroupNumBusy.setStatus('current')
if mibBuilder.loadTexts: bwSeriesCompletionGroupNumBusy.setDescription('This counter reflects the number of times the series completion service reaches the end of the forwarding list, and no users are available by a group')
bwInterceptUserOriginationInvocations = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 31, 1), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwInterceptUserOriginationInvocations.setStatus('current')
if mibBuilder.loadTexts: bwInterceptUserOriginationInvocations.setDescription('incremented whenever the intercept user service blocks an originating call')
bwInterceptGroupOriginationInvocations = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 31, 2), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwInterceptGroupOriginationInvocations.setStatus('current')
if mibBuilder.loadTexts: bwInterceptGroupOriginationInvocations.setDescription('incremented whenever the intercept group service blocks an originating call')
bwInterceptUserTerminationInvocations = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 31, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwInterceptUserTerminationInvocations.setStatus('current')
if mibBuilder.loadTexts: bwInterceptUserTerminationInvocations.setDescription('incremented whenever the intercept user service blocks a terminating call')
bwInterceptGroupTerminationInvocations = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 31, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwInterceptGroupTerminationInvocations.setStatus('current')
if mibBuilder.loadTexts: bwInterceptGroupTerminationInvocations.setDescription('incremented whenever the intercept group service blocks a terminating call')
bwInterceptTransfers = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 31, 5), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwInterceptTransfers.setStatus('current')
if mibBuilder.loadTexts: bwInterceptTransfers.setDescription('incremented whenever the intercept service transfers a call')
bwInterceptSPTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 31, 6), )
if mibBuilder.loadTexts: bwInterceptSPTable.setStatus('current')
if mibBuilder.loadTexts: bwInterceptSPTable.setDescription('This table contains the counters for Intercept service measurements for service providers')
bwInterceptGroupTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 31, 7), )
if mibBuilder.loadTexts: bwInterceptGroupTable.setStatus('current')
if mibBuilder.loadTexts: bwInterceptGroupTable.setDescription('This table contains the counters for Intercept service measurements for groups')
bwInterceptSPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 31, 6, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwInterceptSPIndex"))
if mibBuilder.loadTexts: bwInterceptSPEntry.setStatus('current')
if mibBuilder.loadTexts: bwInterceptSPEntry.setDescription('This row contains the counters for Intercept service measurements for a service provider')
bwInterceptSPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 31, 6, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwInterceptSPIndex.setStatus('current')
if mibBuilder.loadTexts: bwInterceptSPIndex.setDescription('This integer represents the a service provider index in the system')
bwInterceptSPID = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 31, 6, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwInterceptSPID.setStatus('current')
if mibBuilder.loadTexts: bwInterceptSPID.setDescription('This string represents a service provider ID')
bwInterceptSPUserOriginationInvocations = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 31, 6, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwInterceptSPUserOriginationInvocations.setStatus('current')
if mibBuilder.loadTexts: bwInterceptSPUserOriginationInvocations.setDescription('This counter reflects the number of times the intercept user service blocks an originating call by a service provider')
bwInterceptSPGroupOriginationInvocations = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 31, 6, 1, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwInterceptSPGroupOriginationInvocations.setStatus('current')
if mibBuilder.loadTexts: bwInterceptSPGroupOriginationInvocations.setDescription('This counter reflects the number of times the intercept group service blocks an originating call by a service provider')
bwInterceptSPUserTerminationInvocations = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 31, 6, 1, 5), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwInterceptSPUserTerminationInvocations.setStatus('current')
if mibBuilder.loadTexts: bwInterceptSPUserTerminationInvocations.setDescription('This counter reflects the number of times the intercept user service blocks a terminating call by a service provider')
bwInterceptSPGroupTerminationInvocations = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 31, 6, 1, 6), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwInterceptSPGroupTerminationInvocations.setStatus('current')
if mibBuilder.loadTexts: bwInterceptSPGroupTerminationInvocations.setDescription('This counter reflects the number of times the intercept group service blocks a terminating call by a service provider')
bwInterceptSPTransfers = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 31, 6, 1, 7), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwInterceptSPTransfers.setStatus('current')
if mibBuilder.loadTexts: bwInterceptSPTransfers.setDescription('This counter reflects the number of times the intercept service transfers a call by a service provider')
bwInterceptGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 31, 7, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwInterceptGroupIndex"))
if mibBuilder.loadTexts: bwInterceptGroupEntry.setStatus('current')
if mibBuilder.loadTexts: bwInterceptGroupEntry.setDescription('This row contains the counters for Intercept service measurements for a service provider')
bwInterceptGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 31, 7, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwInterceptGroupIndex.setStatus('current')
if mibBuilder.loadTexts: bwInterceptGroupIndex.setDescription('This integer represents the a service provider index in the system')
bwInterceptGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 31, 7, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwInterceptGroupID.setStatus('current')
if mibBuilder.loadTexts: bwInterceptGroupID.setDescription('This string represents a service provider ID')
bwInterceptGroupUserOriginationInvocations = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 31, 7, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwInterceptGroupUserOriginationInvocations.setStatus('current')
if mibBuilder.loadTexts: bwInterceptGroupUserOriginationInvocations.setDescription('This counter reflects the number of times the intercept user service blocks an originating call by a service provider')
bwInterceptGroupGroupOriginationInvocations = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 31, 7, 1, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwInterceptGroupGroupOriginationInvocations.setStatus('current')
if mibBuilder.loadTexts: bwInterceptGroupGroupOriginationInvocations.setDescription('This counter reflects the number of times the intercept group service blocks an originating call by a service provider')
bwInterceptGroupUserTerminationInvocations = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 31, 7, 1, 5), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwInterceptGroupUserTerminationInvocations.setStatus('current')
if mibBuilder.loadTexts: bwInterceptGroupUserTerminationInvocations.setDescription('This counter reflects the number of times the intercept user service blocks a terminating call by a service provider')
bwInterceptGroupGroupTerminationInvocations = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 31, 7, 1, 6), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwInterceptGroupGroupTerminationInvocations.setStatus('current')
if mibBuilder.loadTexts: bwInterceptGroupGroupTerminationInvocations.setDescription('This counter reflects the number of times the intercept group service blocks a terminating call by a service provider')
bwInterceptGroupTransfers = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 31, 7, 1, 7), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwInterceptGroupTransfers.setStatus('current')
if mibBuilder.loadTexts: bwInterceptGroupTransfers.setDescription('This counter reflects the number of times the intercept service transfers a call by a service provider')
bwICGroupPortLimitExceeded = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 32, 1), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwICGroupPortLimitExceeded.setStatus('current')
if mibBuilder.loadTexts: bwICGroupPortLimitExceeded.setDescription('This statistics indicates that all instant conferencing ports allocated to a group are in use.')
bwICNumAttempts = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 32, 2), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwICNumAttempts.setStatus('current')
if mibBuilder.loadTexts: bwICNumAttempts.setDescription('This statistics indicates the number of instant conferencing attempted')
bwInstantConferencingSPTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 32, 3), )
if mibBuilder.loadTexts: bwInstantConferencingSPTable.setStatus('current')
if mibBuilder.loadTexts: bwInstantConferencingSPTable.setDescription('This table contains the counters for Instant Conferencing service measurements for service providers')
bwInstantConferencingGroupTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 32, 4), )
if mibBuilder.loadTexts: bwInstantConferencingGroupTable.setStatus('current')
if mibBuilder.loadTexts: bwInstantConferencingGroupTable.setDescription('This table contains the counters for Instant Conferencing service measurements for groups')
bwInstantConferencingBridgeTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 32, 5), )
if mibBuilder.loadTexts: bwInstantConferencingBridgeTable.setStatus('current')
if mibBuilder.loadTexts: bwInstantConferencingBridgeTable.setDescription('This table is used to track the usage against all bridges defined in the system')
bwICOutdialNumAttempts = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 32, 6), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwICOutdialNumAttempts.setStatus('current')
if mibBuilder.loadTexts: bwICOutdialNumAttempts.setDescription('This counter is incremented each time an outcall attempt is processed by a conference bridge')
bwInstantConferencingSPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 32, 3, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwInstantConferencingSPIndex"))
if mibBuilder.loadTexts: bwInstantConferencingSPEntry.setStatus('current')
if mibBuilder.loadTexts: bwInstantConferencingSPEntry.setDescription('This row contains the counters for Instant Conferencing service measurements for a service provider')
bwInstantConferencingSPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 32, 3, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwInstantConferencingSPIndex.setStatus('current')
if mibBuilder.loadTexts: bwInstantConferencingSPIndex.setDescription('This integer represents the a service provider index in the system')
bwInstantConferencingSPID = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 32, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwInstantConferencingSPID.setStatus('current')
if mibBuilder.loadTexts: bwInstantConferencingSPID.setDescription('This string represents a service provider ID')
bwICSPGroupPortLimitExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 32, 3, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwICSPGroupPortLimitExceeded.setStatus('current')
if mibBuilder.loadTexts: bwICSPGroupPortLimitExceeded.setDescription('This statistics indicates that all instant conferencing ports allocated to a group are in use by a service provider')
bwICSPNumAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 32, 3, 1, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwICSPNumAttempts.setStatus('current')
if mibBuilder.loadTexts: bwICSPNumAttempts.setDescription('This statistics indicates the number of instant conferencing attempted by a service provider')
bwICSPOutdialNumAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 32, 3, 1, 5), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwICSPOutdialNumAttempts.setStatus('current')
if mibBuilder.loadTexts: bwICSPOutdialNumAttempts.setDescription('This counter is incremented each time an outcall attempt is processed by a conference bridge for a given service provider')
bwInstantConferencingGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 32, 4, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwInstantConferencingGroupIndex"))
if mibBuilder.loadTexts: bwInstantConferencingGroupEntry.setStatus('current')
if mibBuilder.loadTexts: bwInstantConferencingGroupEntry.setDescription('This row contains the counters for Instant Conferencing service measurements for a group')
bwInstantConferencingGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 32, 4, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwInstantConferencingGroupIndex.setStatus('current')
if mibBuilder.loadTexts: bwInstantConferencingGroupIndex.setDescription('This integer represents the a group index in the system')
bwInstantConferencingGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 32, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwInstantConferencingGroupID.setStatus('current')
if mibBuilder.loadTexts: bwInstantConferencingGroupID.setDescription('This string represents a group ID')
bwICGroupGroupPortLimitExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 32, 4, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwICGroupGroupPortLimitExceeded.setStatus('current')
if mibBuilder.loadTexts: bwICGroupGroupPortLimitExceeded.setDescription('This statistics indicates that all instant conferencing ports allocated to a group are in use by a group')
bwICGroupNumAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 32, 4, 1, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwICGroupNumAttempts.setStatus('current')
if mibBuilder.loadTexts: bwICGroupNumAttempts.setDescription('This statistics indicates the number of instant conferencing attempted by a group')
bwICGroupOutdialNumAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 32, 4, 1, 5), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwICGroupOutdialNumAttempts.setStatus('current')
if mibBuilder.loadTexts: bwICGroupOutdialNumAttempts.setDescription('This counter is incremented each time an outcall attempt is processed by a conference bridge for a given group')
bwInstantConferencingBridgeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 32, 5, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwInstantConferencingBridgeIndex"))
if mibBuilder.loadTexts: bwInstantConferencingBridgeEntry.setStatus('current')
if mibBuilder.loadTexts: bwInstantConferencingBridgeEntry.setDescription('This row contains the counters for Instant Conferencing service measurements for a bridge')
bwInstantConferencingBridgeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 32, 5, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwInstantConferencingBridgeIndex.setStatus('current')
if mibBuilder.loadTexts: bwInstantConferencingBridgeIndex.setDescription('This integer represents the a bridge index in the system')
bwInstantConferencingBridgeName = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 32, 5, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwInstantConferencingBridgeName.setStatus('current')
if mibBuilder.loadTexts: bwInstantConferencingBridgeName.setDescription('The name of the conference bridge referenced by this index')
bwInstantConferencingBridgeGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 32, 5, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwInstantConferencingBridgeGroupName.setStatus('current')
if mibBuilder.loadTexts: bwInstantConferencingBridgeGroupName.setDescription('The name of the group that owns the conference bridge referenced by this index')
bwInstantConferencingCurrentUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 32, 5, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwInstantConferencingCurrentUsage.setStatus('current')
if mibBuilder.loadTexts: bwInstantConferencingCurrentUsage.setDescription('The number of ports currently in use in this bridge')
bwInstantConferencingTodaysPeakUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 32, 5, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwInstantConferencingTodaysPeakUsage.setStatus('current')
if mibBuilder.loadTexts: bwInstantConferencingTodaysPeakUsage.setDescription('The maximum number of ports that were simultaneously in use for this bridge today')
bwInstantConferencingYesterdaysPeakUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 32, 5, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwInstantConferencingYesterdaysPeakUsage.setStatus('current')
if mibBuilder.loadTexts: bwInstantConferencingYesterdaysPeakUsage.setDescription('The maximum number of ports that were simultaneously in use for this bridge yesterday')
bwCallingLineIDDeliveryBlockPerCallBlocks = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 33, 1), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCallingLineIDDeliveryBlockPerCallBlocks.setStatus('current')
if mibBuilder.loadTexts: bwCallingLineIDDeliveryBlockPerCallBlocks.setDescription('This counter reflects the number of times the per call calling line ID delivery block service is invoked.')
bwCallingLineIDDeliveryBlockSPTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 33, 2), )
if mibBuilder.loadTexts: bwCallingLineIDDeliveryBlockSPTable.setStatus('current')
if mibBuilder.loadTexts: bwCallingLineIDDeliveryBlockSPTable.setDescription('Table used to report the calling line id blocking statistics per service providers')
bwCallingLineIDDeliveryBlockGroupTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 33, 3), )
if mibBuilder.loadTexts: bwCallingLineIDDeliveryBlockGroupTable.setStatus('current')
if mibBuilder.loadTexts: bwCallingLineIDDeliveryBlockGroupTable.setDescription('Table used to report the calling line id blocking statistics per groups')
bwCallingLineIDDeliveryPerCall = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 33, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCallingLineIDDeliveryPerCall.setStatus('current')
if mibBuilder.loadTexts: bwCallingLineIDDeliveryPerCall.setDescription('This counter reflects the number of times the per call calling line ID delivery service is invoked.')
bwCallingLineIDDeliveryBlockSPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 33, 2, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwCallingLineIDDeliveryBlockSPIndex"))
if mibBuilder.loadTexts: bwCallingLineIDDeliveryBlockSPEntry.setStatus('current')
if mibBuilder.loadTexts: bwCallingLineIDDeliveryBlockSPEntry.setDescription('This row contains the counters for the per call calling line ID delivery block service measurements for a service provider.')
bwCallingLineIDDeliveryBlockSPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 33, 2, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwCallingLineIDDeliveryBlockSPIndex.setStatus('current')
if mibBuilder.loadTexts: bwCallingLineIDDeliveryBlockSPIndex.setDescription('This integer represents the service provider index in the system.')
bwCallingLineIDDeliveryBlockSPID = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 33, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwCallingLineIDDeliveryBlockSPID.setStatus('current')
if mibBuilder.loadTexts: bwCallingLineIDDeliveryBlockSPID.setDescription('This string represents a service provider ID')
bwCallingLineIDDeliveryBlockSPPerCallBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 33, 2, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCallingLineIDDeliveryBlockSPPerCallBlocks.setStatus('current')
if mibBuilder.loadTexts: bwCallingLineIDDeliveryBlockSPPerCallBlocks.setDescription('This counter reflects the number of times the per call calling line ID delivery block service is invoked for this service provider.')
bwCallingLineIDDeliveryPerCallSP = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 33, 2, 1, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCallingLineIDDeliveryPerCallSP.setStatus('current')
if mibBuilder.loadTexts: bwCallingLineIDDeliveryPerCallSP.setDescription('This counter reflects the number of times the calling line ID delivery per call service is invoked for this service provider.')
bwCallingLineIDDeliveryBlockGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 33, 3, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwCallingLineIDDeliveryBlockGroupIndex"))
if mibBuilder.loadTexts: bwCallingLineIDDeliveryBlockGroupEntry.setStatus('current')
if mibBuilder.loadTexts: bwCallingLineIDDeliveryBlockGroupEntry.setDescription('This row contains the counters for the per call calling line ID delivery block service measurements for a group.')
bwCallingLineIDDeliveryBlockGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 33, 3, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwCallingLineIDDeliveryBlockGroupIndex.setStatus('current')
if mibBuilder.loadTexts: bwCallingLineIDDeliveryBlockGroupIndex.setDescription('This integer represents the group index in the system.')
bwCallingLineIDDeliveryBlockGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 33, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwCallingLineIDDeliveryBlockGroupID.setStatus('current')
if mibBuilder.loadTexts: bwCallingLineIDDeliveryBlockGroupID.setDescription('This string represents a group ID')
bwCallingLineIDDeliveryBlockGroupPerCallBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 33, 3, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCallingLineIDDeliveryBlockGroupPerCallBlocks.setStatus('current')
if mibBuilder.loadTexts: bwCallingLineIDDeliveryBlockGroupPerCallBlocks.setDescription('This counter reflects the number of times the per call calling line ID delivery block service is invoked for this group.')
bwCallingLineIDDeliveryPerCallGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 33, 3, 1, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCallingLineIDDeliveryPerCallGroup.setStatus('current')
if mibBuilder.loadTexts: bwCallingLineIDDeliveryPerCallGroup.setDescription('This counter reflects the number of times the calling line ID delivery per call service is invoked for this group.')
bwSessionAuditNumCallsAudited = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 34, 1), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSessionAuditNumCallsAudited.setStatus('current')
if mibBuilder.loadTexts: bwSessionAuditNumCallsAudited.setDescription('Number of calls that are audited when a Session Audit is invoked.')
bwSessionAuditNumEndpointsAudited = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 34, 2), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSessionAuditNumEndpointsAudited.setStatus('current')
if mibBuilder.loadTexts: bwSessionAuditNumEndpointsAudited.setDescription('Number of endpoints that are audited when a Session Audit is invoked.')
bwSessionAuditNumCallsFailedAudit = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 34, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSessionAuditNumCallsFailedAudit.setStatus('current')
if mibBuilder.loadTexts: bwSessionAuditNumCallsFailedAudit.setDescription('Number of times the SessionAudit service received a failure on a call being audited.')
bwSessionAuditNumEndpointsFailedAudit = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 34, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSessionAuditNumEndpointsFailedAudit.setStatus('current')
if mibBuilder.loadTexts: bwSessionAuditNumEndpointsFailedAudit.setDescription('Number of times the SessionAudit service received a failure on an endpoint being audited.')
bwSessionAuditSPTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 34, 5), )
if mibBuilder.loadTexts: bwSessionAuditSPTable.setStatus('current')
if mibBuilder.loadTexts: bwSessionAuditSPTable.setDescription('This table contains Session Audit service measurements at a service provider level.')
bwSessionAuditGroupTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 34, 6), )
if mibBuilder.loadTexts: bwSessionAuditGroupTable.setStatus('current')
if mibBuilder.loadTexts: bwSessionAuditGroupTable.setDescription('This table contains Session Audit service measurements at a group level.')
bwSessionAuditSPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 34, 5, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwSessionAuditSPIndex"))
if mibBuilder.loadTexts: bwSessionAuditSPEntry.setStatus('current')
if mibBuilder.loadTexts: bwSessionAuditSPEntry.setDescription('Each row contains the service counters for the SessionAudit service for each service provider in the system.')
bwSessionAuditSPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 34, 5, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwSessionAuditSPIndex.setStatus('current')
if mibBuilder.loadTexts: bwSessionAuditSPIndex.setDescription('This column represents the index of the service provider in the system.')
bwSessionAuditSPID = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 34, 5, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwSessionAuditSPID.setStatus('current')
if mibBuilder.loadTexts: bwSessionAuditSPID.setDescription('This column represents a service provider ID.')
bwSessionAuditSPNumCallsAudited = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 34, 5, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSessionAuditSPNumCallsAudited.setStatus('current')
if mibBuilder.loadTexts: bwSessionAuditSPNumCallsAudited.setDescription('Number of calls that are audited when a Session Audit is invoked, per service provider.')
bwSessionAuditSPNumEndpointsAudited = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 34, 5, 1, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSessionAuditSPNumEndpointsAudited.setStatus('current')
if mibBuilder.loadTexts: bwSessionAuditSPNumEndpointsAudited.setDescription('Number of endpoints that are audited when a Session Audit is invoked, per service provider.')
bwSessionAuditSPNumCallsFailedAudit = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 34, 5, 1, 5), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSessionAuditSPNumCallsFailedAudit.setStatus('current')
if mibBuilder.loadTexts: bwSessionAuditSPNumCallsFailedAudit.setDescription('Number of times the SessionAudit service received a failure on a call being audited, per service provider.')
bwSessionAuditSPNumEndpointsFailedAudit = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 34, 5, 1, 6), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSessionAuditSPNumEndpointsFailedAudit.setStatus('current')
if mibBuilder.loadTexts: bwSessionAuditSPNumEndpointsFailedAudit.setDescription('Number of times the SessionAudit service received a failure on an endpoint being audited, per service provider.')
bwSessionAuditGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 34, 6, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwSessionAuditGroupIndex"))
if mibBuilder.loadTexts: bwSessionAuditGroupEntry.setStatus('current')
if mibBuilder.loadTexts: bwSessionAuditGroupEntry.setDescription('Each row contains the service counters for the SessionAudit service for each group in the system.')
bwSessionAuditGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 34, 6, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwSessionAuditGroupIndex.setStatus('current')
if mibBuilder.loadTexts: bwSessionAuditGroupIndex.setDescription('This column represents the index of the group in the system.')
bwSessionAuditGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 34, 6, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwSessionAuditGroupID.setStatus('current')
if mibBuilder.loadTexts: bwSessionAuditGroupID.setDescription('This column represents a group ID.')
bwSessionAuditGroupNumCallsAudited = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 34, 6, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSessionAuditGroupNumCallsAudited.setStatus('current')
if mibBuilder.loadTexts: bwSessionAuditGroupNumCallsAudited.setDescription('Number of calls that are audited when a Session Audit is invoked, per group.')
bwSessionAuditGroupNumEndpointsAudited = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 34, 6, 1, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSessionAuditGroupNumEndpointsAudited.setStatus('current')
if mibBuilder.loadTexts: bwSessionAuditGroupNumEndpointsAudited.setDescription('Number of endpoints that are audited when a Session Audit is invoked, per group.')
bwSessionAuditGroupNumCallsFailedAudit = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 34, 6, 1, 5), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSessionAuditGroupNumCallsFailedAudit.setStatus('current')
if mibBuilder.loadTexts: bwSessionAuditGroupNumCallsFailedAudit.setDescription('Number of times the SessionAudit service received a failure on a call being audited, per group.')
bwSessionAuditGroupNumEndpointsFailedAudit = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 34, 6, 1, 6), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSessionAuditGroupNumEndpointsFailedAudit.setStatus('current')
if mibBuilder.loadTexts: bwSessionAuditGroupNumEndpointsFailedAudit.setDescription('Number of times the SessionAudit service received a failure on an endpoint being audited, per group.')
bwWindowsMessagingIMSessionSuccessCounter = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 35, 1), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwWindowsMessagingIMSessionSuccessCounter.setStatus('current')
if mibBuilder.loadTexts: bwWindowsMessagingIMSessionSuccessCounter.setDescription('The number of times we successfully initiate a windows messaging session of type IM')
bwCallWaitingSPTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 36, 1), )
if mibBuilder.loadTexts: bwCallWaitingSPTable.setStatus('current')
if mibBuilder.loadTexts: bwCallWaitingSPTable.setDescription('This counter table will be indexed per service provider.')
bwCWNumPhoneCancellations = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 36, 2), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCWNumPhoneCancellations.setStatus('current')
if mibBuilder.loadTexts: bwCWNumPhoneCancellations.setDescription('Total number of times CW has been cancelled via FAC.')
bwCallWaitingGroupTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 36, 3), )
if mibBuilder.loadTexts: bwCallWaitingGroupTable.setStatus('current')
if mibBuilder.loadTexts: bwCallWaitingGroupTable.setDescription('This counter table will be indexed per group.')
bwCallWaitingSPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 36, 1, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwCallWaitingSPIndex"))
if mibBuilder.loadTexts: bwCallWaitingSPEntry.setStatus('current')
if mibBuilder.loadTexts: bwCallWaitingSPEntry.setDescription('Each row contains the service counters for the CallWaiting service for each service provider in the system.')
bwCallWaitingSPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 36, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwCallWaitingSPIndex.setStatus('current')
if mibBuilder.loadTexts: bwCallWaitingSPIndex.setDescription('This column represents the index of the service provider in the system.')
bwCallWaitingSPID = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 36, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwCallWaitingSPID.setStatus('current')
if mibBuilder.loadTexts: bwCallWaitingSPID.setDescription('This string represents a service provider ID')
bwCWSPNumPhoneCancellations = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 36, 1, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCWSPNumPhoneCancellations.setStatus('current')
if mibBuilder.loadTexts: bwCWSPNumPhoneCancellations.setDescription('Number of times CW has been cancelled via FAC for users in a given service provider.')
bwCallWaitingGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 36, 3, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwCallWaitingGroupIndex"))
if mibBuilder.loadTexts: bwCallWaitingGroupEntry.setStatus('current')
if mibBuilder.loadTexts: bwCallWaitingGroupEntry.setDescription('Each row contains the service counters for the CallWaiting service for each group in the system.')
bwCallWaitingGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 36, 3, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwCallWaitingGroupIndex.setStatus('current')
if mibBuilder.loadTexts: bwCallWaitingGroupIndex.setDescription('This column represents the index of the group in the system.')
bwCallWaitingGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 36, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwCallWaitingGroupID.setStatus('current')
if mibBuilder.loadTexts: bwCallWaitingGroupID.setDescription('This string represents a group ID')
bwCWGroupNumPhoneCancellations = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 36, 3, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCWGroupNumPhoneCancellations.setStatus('current')
if mibBuilder.loadTexts: bwCWGroupNumPhoneCancellations.setDescription('Number of times CW has been cancelled via FAC for users in a given group.')
bwAlternateNumbersSPTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 37, 1), )
if mibBuilder.loadTexts: bwAlternateNumbersSPTable.setStatus('current')
if mibBuilder.loadTexts: bwAlternateNumbersSPTable.setDescription('This counter table will be indexed per service provider')
bwAlternateNumbersUsage = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 37, 2), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwAlternateNumbersUsage.setStatus('current')
if mibBuilder.loadTexts: bwAlternateNumbersUsage.setDescription("Counts all call made to a user's alternate number system")
bwAlternateNumbersGroupTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 37, 3), )
if mibBuilder.loadTexts: bwAlternateNumbersGroupTable.setStatus('current')
if mibBuilder.loadTexts: bwAlternateNumbersGroupTable.setDescription('This counter table will be indexed per group')
bwAlternateNumbersSPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 37, 1, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwAlternateNumbersSPIndex"))
if mibBuilder.loadTexts: bwAlternateNumbersSPEntry.setStatus('current')
if mibBuilder.loadTexts: bwAlternateNumbersSPEntry.setDescription('Each row contains the service counters for the Alternate Numbers service for each service provider in the system.')
bwAlternateNumbersSPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 37, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwAlternateNumbersSPIndex.setStatus('current')
if mibBuilder.loadTexts: bwAlternateNumbersSPIndex.setDescription('This column represents the index of the service provider in the system')
bwAlternateNumbersSPID = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 37, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwAlternateNumbersSPID.setStatus('current')
if mibBuilder.loadTexts: bwAlternateNumbersSPID.setDescription('This string represents a service provider ID')
bwAlternateNumbersSPUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 37, 1, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwAlternateNumbersSPUsage.setStatus('current')
if mibBuilder.loadTexts: bwAlternateNumbersSPUsage.setDescription("Counts all call made to a user's alternate number system per service provider")
bwAlternateNumbersGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 37, 3, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwAlternateNumbersGroupIndex"))
if mibBuilder.loadTexts: bwAlternateNumbersGroupEntry.setStatus('current')
if mibBuilder.loadTexts: bwAlternateNumbersGroupEntry.setDescription('Each row contains the service counters for the Alternate Numbers service for each group in the system.')
bwAlternateNumbersGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 37, 3, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwAlternateNumbersGroupIndex.setStatus('current')
if mibBuilder.loadTexts: bwAlternateNumbersGroupIndex.setDescription('This column represents the index of the group in the system')
bwAlternateNumbersGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 37, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwAlternateNumbersGroupID.setStatus('current')
if mibBuilder.loadTexts: bwAlternateNumbersGroupID.setDescription('This string represents a group ID')
bwAlternateNumbersGroupUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 37, 3, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwAlternateNumbersGroupUsage.setStatus('current')
if mibBuilder.loadTexts: bwAlternateNumbersGroupUsage.setDescription("Counts all call made to a user's alternate number system per group")
bwCotActivation = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 38, 1), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCotActivation.setStatus('current')
if mibBuilder.loadTexts: bwCotActivation.setDescription('Total number of times that a user initiates a customer originated trace')
bwCotFailureNoId = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 38, 2), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCotFailureNoId.setStatus('current')
if mibBuilder.loadTexts: bwCotFailureNoId.setDescription('Total number of times a user encounters a failure when initiating a customer originated trace due to the lack of information from the caller')
bwCotSPTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 38, 3), )
if mibBuilder.loadTexts: bwCotSPTable.setStatus('current')
if mibBuilder.loadTexts: bwCotSPTable.setDescription('Counters for customer originated trace service measurements for service providers')
bwCotGroupTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 38, 4), )
if mibBuilder.loadTexts: bwCotGroupTable.setStatus('current')
if mibBuilder.loadTexts: bwCotGroupTable.setDescription('Counters for customer originated trace service measurements for groups')
bwCotSPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 38, 3, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwCotSPIndex"))
if mibBuilder.loadTexts: bwCotSPEntry.setStatus('current')
if mibBuilder.loadTexts: bwCotSPEntry.setDescription('Each row contains the service counters for the COT service for each service provider in the system.')
bwCotSPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 38, 3, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwCotSPIndex.setStatus('current')
if mibBuilder.loadTexts: bwCotSPIndex.setDescription('This column represents the index of the service provider in the system')
bwCotSPID = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 38, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwCotSPID.setStatus('current')
if mibBuilder.loadTexts: bwCotSPID.setDescription('This string represents a service provider ID')
bwCotSPActivation = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 38, 3, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCotSPActivation.setStatus('current')
if mibBuilder.loadTexts: bwCotSPActivation.setDescription('Total number of times that a user in a given service provider initiates a customer originated trace')
bwCotSPFailureNoId = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 38, 3, 1, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCotSPFailureNoId.setStatus('current')
if mibBuilder.loadTexts: bwCotSPFailureNoId.setDescription('Total number of times a user in a given service provider encounters a failure when initiating a customer originated trace due to the lack of information from the caller')
bwCotGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 38, 4, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwCotGroupIndex"))
if mibBuilder.loadTexts: bwCotGroupEntry.setStatus('current')
if mibBuilder.loadTexts: bwCotGroupEntry.setDescription('Each row contains the service counters for the COT service for each group in the system.')
bwCotGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 38, 4, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwCotGroupIndex.setStatus('current')
if mibBuilder.loadTexts: bwCotGroupIndex.setDescription('This column represents the index of the group in the system')
bwCotGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 38, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwCotGroupID.setStatus('current')
if mibBuilder.loadTexts: bwCotGroupID.setDescription('This string represents a group ID')
bwCotGroupActivation = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 38, 4, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCotGroupActivation.setStatus('current')
if mibBuilder.loadTexts: bwCotGroupActivation.setDescription('Total number of times that a user in a given group initiates a customer originated trace')
bwCotGroupFailureNoId = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 38, 4, 1, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCotGroupFailureNoId.setStatus('current')
if mibBuilder.loadTexts: bwCotGroupFailureNoId.setDescription('Total number of times a user in a given group encounters a failure when initiating a customer originated trace due to the lack of information from the caller')
bwSD8NumTimesDialed = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 39, 1), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSD8NumTimesDialed.setStatus('current')
if mibBuilder.loadTexts: bwSD8NumTimesDialed.setDescription('Total number of times a speed code has been dialed')
bwSD8NumTimesProgrammed = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 39, 2), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSD8NumTimesProgrammed.setStatus('current')
if mibBuilder.loadTexts: bwSD8NumTimesProgrammed.setDescription('Total number of times a speed code has been defined by a user via FAC')
bwSD8SPTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 39, 3), )
if mibBuilder.loadTexts: bwSD8SPTable.setStatus('current')
if mibBuilder.loadTexts: bwSD8SPTable.setDescription('Counters for SD8 service measurements for service providers')
bwSD8GroupTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 39, 4), )
if mibBuilder.loadTexts: bwSD8GroupTable.setStatus('current')
if mibBuilder.loadTexts: bwSD8GroupTable.setDescription('Counters for SD8 service measurements for groups')
bwSD8SPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 39, 3, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwSD8SPIndex"))
if mibBuilder.loadTexts: bwSD8SPEntry.setStatus('current')
if mibBuilder.loadTexts: bwSD8SPEntry.setDescription('Each row contains the service counters for the SD8 service for each service provider in the system.')
bwSD8SPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 39, 3, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwSD8SPIndex.setStatus('current')
if mibBuilder.loadTexts: bwSD8SPIndex.setDescription('This column represents the index of the service provider in the system')
bwSD8SPID = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 39, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwSD8SPID.setStatus('current')
if mibBuilder.loadTexts: bwSD8SPID.setDescription('This string represents a service provider ID')
bwSD8SPNumTimesDialed = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 39, 3, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSD8SPNumTimesDialed.setStatus('current')
if mibBuilder.loadTexts: bwSD8SPNumTimesDialed.setDescription('Total Number of times a speed code has been dialed by users in a given service provider')
bwSD8SPNumTimesProgrammed = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 39, 3, 1, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSD8SPNumTimesProgrammed.setStatus('current')
if mibBuilder.loadTexts: bwSD8SPNumTimesProgrammed.setDescription('Total numberNumber of times a speed code has been defined via FAC by users in a given service provider')
bwSD8GroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 39, 4, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwSD8GroupIndex"))
if mibBuilder.loadTexts: bwSD8GroupEntry.setStatus('current')
if mibBuilder.loadTexts: bwSD8GroupEntry.setDescription('Each row contains the service counters for the SD8 service for each group in the system.')
bwSD8GroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 39, 4, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwSD8GroupIndex.setStatus('current')
if mibBuilder.loadTexts: bwSD8GroupIndex.setDescription('This column represents the index of the group in the system')
bwSD8GroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 39, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwSD8GroupID.setStatus('current')
if mibBuilder.loadTexts: bwSD8GroupID.setDescription('This string represents a group ID')
bwSD8GroupNumTimesDialed = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 39, 4, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSD8GroupNumTimesDialed.setStatus('current')
if mibBuilder.loadTexts: bwSD8GroupNumTimesDialed.setDescription('Total Number of times a speed code has been dialed by users in a given group')
bwSD8GroupNumTimesProgrammed = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 39, 4, 1, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSD8GroupNumTimesProgrammed.setStatus('current')
if mibBuilder.loadTexts: bwSD8GroupNumTimesProgrammed.setDescription('Total numberNumber of times a speed code has been defined via FAC by users in a given group')
bwMusicOnHoldNumUses = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 40, 1), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwMusicOnHoldNumUses.setStatus('current')
if mibBuilder.loadTexts: bwMusicOnHoldNumUses.setDescription('Total number of times Music On Hold has been used')
bwMusicOnHoldSPTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 40, 2), )
if mibBuilder.loadTexts: bwMusicOnHoldSPTable.setStatus('current')
if mibBuilder.loadTexts: bwMusicOnHoldSPTable.setDescription('Counters for Music On Hold service measurements for service providers')
bwMusicOnHoldGroupTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 40, 3), )
if mibBuilder.loadTexts: bwMusicOnHoldGroupTable.setStatus('current')
if mibBuilder.loadTexts: bwMusicOnHoldGroupTable.setDescription('Counters for Music On Hold service measurements for groups')
bwMusicOnHoldExternalSourceNumFailures = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 40, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwMusicOnHoldExternalSourceNumFailures.setStatus('current')
if mibBuilder.loadTexts: bwMusicOnHoldExternalSourceNumFailures.setDescription('This counter is incremented whenever a caller is put on hold and that the music-on-hold source could not be connected to the caller')
bwMusicOnHoldSPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 40, 2, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwMusicOnHoldSPIndex"))
if mibBuilder.loadTexts: bwMusicOnHoldSPEntry.setStatus('current')
if mibBuilder.loadTexts: bwMusicOnHoldSPEntry.setDescription('Each row contains the service counters for the Music On Hold service for each service provider in the system.')
bwMusicOnHoldSPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 40, 2, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwMusicOnHoldSPIndex.setStatus('current')
if mibBuilder.loadTexts: bwMusicOnHoldSPIndex.setDescription('This column represents the index of the service provider in the system')
bwMusicOnHoldSPID = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 40, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwMusicOnHoldSPID.setStatus('current')
if mibBuilder.loadTexts: bwMusicOnHoldSPID.setDescription('This string represents a service provider ID')
bwMusicOnHoldSPNumUses = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 40, 2, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwMusicOnHoldSPNumUses.setStatus('current')
if mibBuilder.loadTexts: bwMusicOnHoldSPNumUses.setDescription('The service provider counter is incremented every a user hears music on hold')
bwMusicOnHoldSPExternalSourceNumFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 40, 2, 1, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwMusicOnHoldSPExternalSourceNumFailures.setStatus('current')
if mibBuilder.loadTexts: bwMusicOnHoldSPExternalSourceNumFailures.setDescription('This counter is incremented whenever a caller, belonging to the indexed service provider, is put on hold and that the music-on-hold source could not be connected to the caller')
bwMusicOnHoldGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 40, 3, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwMusicOnHoldGroupIndex"))
if mibBuilder.loadTexts: bwMusicOnHoldGroupEntry.setStatus('current')
if mibBuilder.loadTexts: bwMusicOnHoldGroupEntry.setDescription('Each row contains the service counters for the Music On Hold service for each group in the system.')
bwMusicOnHoldGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 40, 3, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwMusicOnHoldGroupIndex.setStatus('current')
if mibBuilder.loadTexts: bwMusicOnHoldGroupIndex.setDescription('This column represents the index of the group in the system')
bwMusicOnHoldGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 40, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwMusicOnHoldGroupID.setStatus('current')
if mibBuilder.loadTexts: bwMusicOnHoldGroupID.setDescription('This string represents a group ID')
bwMusicOnHoldGroupNumUses = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 40, 3, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwMusicOnHoldGroupNumUses.setStatus('current')
if mibBuilder.loadTexts: bwMusicOnHoldGroupNumUses.setDescription('The group counter is incremented every a user hears music on hold')
bwMusicOnHoldGroupExternalSourceNumFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 40, 3, 1, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwMusicOnHoldGroupExternalSourceNumFailures.setStatus('current')
if mibBuilder.loadTexts: bwMusicOnHoldGroupExternalSourceNumFailures.setDescription('This counter is incremented whenever a caller, belonging to the indexed group, is put on hold and that the music-on-hold source could not be connected to the caller')
bwCNAMQueriesSent = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 41, 1), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCNAMQueriesSent.setStatus('current')
if mibBuilder.loadTexts: bwCNAMQueriesSent.setDescription('Number of queries that have been sent to the external database inquiring the calling name information.')
bwCNAMQueriesFailed = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 41, 2), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCNAMQueriesFailed.setStatus('current')
if mibBuilder.loadTexts: bwCNAMQueriesFailed.setDescription('Number of queries that have failed to the external database inquiring the calling name information.')
bwCNAMQueriesTimeout = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 41, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCNAMQueriesTimeout.setStatus('current')
if mibBuilder.loadTexts: bwCNAMQueriesTimeout.setDescription('NumberNumber of queries that have timed out to the external database inquiring the calling name information.')
bwThirdPartyMWIControlNotifyIns = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 42, 1), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwThirdPartyMWIControlNotifyIns.setStatus('current')
if mibBuilder.loadTexts: bwThirdPartyMWIControlNotifyIns.setDescription('Number of times a MWI NOTIFY is received.')
bwThirdPartyMWIControlNotifyFailures = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 42, 2), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwThirdPartyMWIControlNotifyFailures.setStatus('current')
if mibBuilder.loadTexts: bwThirdPartyMWIControlNotifyFailures.setDescription('Number of times a MWI NOTIFY is received for an unknown user, or for a user who is not assigned the service.')
bwCallCenterReportEmailed = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 43, 1), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCallCenterReportEmailed.setStatus('current')
if mibBuilder.loadTexts: bwCallCenterReportEmailed.setDescription('Number of call center statistics reports emailed.')
bwCallCenterSPTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 43, 2), )
if mibBuilder.loadTexts: bwCallCenterSPTable.setStatus('current')
if mibBuilder.loadTexts: bwCallCenterSPTable.setDescription('Counters for Call Center service measurements for service providers')
bwCallCenterGroupTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 43, 3), )
if mibBuilder.loadTexts: bwCallCenterGroupTable.setStatus('current')
if mibBuilder.loadTexts: bwCallCenterGroupTable.setDescription('Counters for Call Center service measurements for groups')
bwCallCenterSPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 43, 2, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwCallCenterSPIndex"))
if mibBuilder.loadTexts: bwCallCenterSPEntry.setStatus('current')
if mibBuilder.loadTexts: bwCallCenterSPEntry.setDescription('Each row contains the service counters for the Call Center service for each service provider in the system')
bwCallCenterSPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 43, 2, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwCallCenterSPIndex.setStatus('current')
if mibBuilder.loadTexts: bwCallCenterSPIndex.setDescription('This column represents the index of the service provider in the system')
bwCallCenterSPID = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 43, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwCallCenterSPID.setStatus('current')
if mibBuilder.loadTexts: bwCallCenterSPID.setDescription('This string represents a service provider ID')
bwCallCenterSPReportEmailed = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 43, 2, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCallCenterSPReportEmailed.setStatus('current')
if mibBuilder.loadTexts: bwCallCenterSPReportEmailed.setDescription('Number of call center statistics reports emailed for a given service provider')
bwCallCenterGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 43, 3, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwCallCenterGroupIndex"))
if mibBuilder.loadTexts: bwCallCenterGroupEntry.setStatus('current')
if mibBuilder.loadTexts: bwCallCenterGroupEntry.setDescription('Each row contains the service counters for the Call Center service for each group in the system')
bwCallCenterGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 43, 3, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwCallCenterGroupIndex.setStatus('current')
if mibBuilder.loadTexts: bwCallCenterGroupIndex.setDescription('This column represents the index of the group in the system')
bwCallCenterGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 43, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwCallCenterGroupID.setStatus('current')
if mibBuilder.loadTexts: bwCallCenterGroupID.setDescription('This string represents a group ID')
bwCallCenterGroupReportEmailed = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 43, 3, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCallCenterGroupReportEmailed.setStatus('current')
if mibBuilder.loadTexts: bwCallCenterGroupReportEmailed.setDescription('Number of call center statistics reports emailed for a given Group')
bwCFGNAForward = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 44, 1), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCFGNAForward.setStatus('current')
if mibBuilder.loadTexts: bwCFGNAForward.setDescription('The number of times CFGNA has forwarded from one agent to another')
bwCFGNAOverflowForward = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 44, 2), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCFGNAOverflowForward.setStatus('current')
if mibBuilder.loadTexts: bwCFGNAOverflowForward.setDescription('The number of times CGFNA rolls over to the first visited agent and the call forwards to the external destination')
bwCFGNAOverflowNoForward = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 44, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCFGNAOverflowNoForward.setStatus('current')
if mibBuilder.loadTexts: bwCFGNAOverflowNoForward.setDescription('The number of times CGFNA rolls over to the first visited agent and the call is either queued for call centers or given temporarily unavailable treatment for hunt groups')
bwCFGNASPTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 44, 4), )
if mibBuilder.loadTexts: bwCFGNASPTable.setStatus('current')
if mibBuilder.loadTexts: bwCFGNASPTable.setDescription('Counters for Call Center service measurements for service providers')
bwCFGNAGroupTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 44, 5), )
if mibBuilder.loadTexts: bwCFGNAGroupTable.setStatus('current')
if mibBuilder.loadTexts: bwCFGNAGroupTable.setDescription('Counters for Call Center service measurements for groups')
bwCFGNAExternalForward = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 44, 6), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCFGNAExternalForward.setStatus('current')
if mibBuilder.loadTexts: bwCFGNAExternalForward.setDescription('Number of times CFGNA External has forwarded a Hunt Group/Call Center call.')
bwCFGNAExternalNoForward = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 44, 7), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCFGNAExternalNoForward.setStatus('current')
if mibBuilder.loadTexts: bwCFGNAExternalNoForward.setDescription('Number of times CFGNA External has given Temporarily Unavailable treatment to a Hunt Group/Call Center call.')
bwCFGNASPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 44, 4, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwCFGNASPIndex"))
if mibBuilder.loadTexts: bwCFGNASPEntry.setStatus('current')
if mibBuilder.loadTexts: bwCFGNASPEntry.setDescription('Each row contains the service counters for the Call Forward Group No Answer service for each service provider in the system')
bwCFGNASPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 44, 4, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwCFGNASPIndex.setStatus('current')
if mibBuilder.loadTexts: bwCFGNASPIndex.setDescription('This column represents the index of the service provider in the system')
bwCFGNASPID = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 44, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwCFGNASPID.setStatus('current')
if mibBuilder.loadTexts: bwCFGNASPID.setDescription('This string represents a service provider ID')
bwCFGNASPForward = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 44, 4, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCFGNASPForward.setStatus('current')
if mibBuilder.loadTexts: bwCFGNASPForward.setDescription('The number of times CGFNA rolls over to the first visited agent and the call forwards to the external destination for a given service provider')
bwCFGNASPOverflowForward = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 44, 4, 1, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCFGNASPOverflowForward.setStatus('current')
if mibBuilder.loadTexts: bwCFGNASPOverflowForward.setDescription('The number of times CGFNA rolls over to the first visited agent and the call forwards to the external destination for a given service provider')
bwCFGNASPOverflowNoForward = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 44, 4, 1, 5), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCFGNASPOverflowNoForward.setStatus('current')
if mibBuilder.loadTexts: bwCFGNASPOverflowNoForward.setDescription('The number of times CGFNA rolls over to the first visited agent and the call is either queued for call centers or given temporarily unavailable treatment for hunt groups for a given service provider')
bwCFGNASPExternalForward = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 44, 4, 1, 6), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCFGNASPExternalForward.setStatus('current')
if mibBuilder.loadTexts: bwCFGNASPExternalForward.setDescription('Number of times CFGNA External has forwarded a Hunt Group/Call Center call for a given service provider.')
bwCFGNASPExternalNoForward = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 44, 4, 1, 7), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCFGNASPExternalNoForward.setStatus('current')
if mibBuilder.loadTexts: bwCFGNASPExternalNoForward.setDescription('Number of times CFGNA External has given Temporarily Unavailable treatment to a Hunt Group/Call Center call for a given service provider.')
bwCFGNAGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 44, 5, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwCFGNAGroupIndex"))
if mibBuilder.loadTexts: bwCFGNAGroupEntry.setStatus('current')
if mibBuilder.loadTexts: bwCFGNAGroupEntry.setDescription('Each row contains the service counters for the Call Forward Group No Answer service for each group in the system')
bwCFGNAGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 44, 5, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwCFGNAGroupIndex.setStatus('current')
if mibBuilder.loadTexts: bwCFGNAGroupIndex.setDescription('This column represents the index of the group in the system')
bwCFGNAGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 44, 5, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwCFGNAGroupID.setStatus('current')
if mibBuilder.loadTexts: bwCFGNAGroupID.setDescription('This string represents a group ID')
bwCFGNAGroupForward = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 44, 5, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCFGNAGroupForward.setStatus('current')
if mibBuilder.loadTexts: bwCFGNAGroupForward.setDescription('The number of times CGFNA rolls over to the first visited agent and the call forwards to the external destination for a given group')
bwCFGNAGroupOverflowForward = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 44, 5, 1, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCFGNAGroupOverflowForward.setStatus('current')
if mibBuilder.loadTexts: bwCFGNAGroupOverflowForward.setDescription('The number of times CGFNA rolls over to the first visited agent and the call forwards to the external destination for a given group')
bwCFGNAGroupOverflowNoForward = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 44, 5, 1, 5), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCFGNAGroupOverflowNoForward.setStatus('current')
if mibBuilder.loadTexts: bwCFGNAGroupOverflowNoForward.setDescription('The number of times CGFNA rolls over to the first visited agent and the call is either queued for call centers or given temporarily unavailable treatment for hunt groups for a given group')
bwCFGNAGroupExternalForward = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 44, 5, 1, 6), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCFGNAGroupExternalForward.setStatus('current')
if mibBuilder.loadTexts: bwCFGNAGroupExternalForward.setDescription('Number of times CFGNA External has forwarded a Hunt Group/Call Center call for a given group.')
bwCFGNAGroupExternalNoForward = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 44, 5, 1, 7), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCFGNAGroupExternalNoForward.setStatus('current')
if mibBuilder.loadTexts: bwCFGNAGroupExternalNoForward.setDescription('Number of times CFGNA External has given Temporarily Unavailable treatment to a Hunt Group/Call Center call for a given group.')
bwSD100Program = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 45, 1), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSD100Program.setStatus('current')
if mibBuilder.loadTexts: bwSD100Program.setDescription('This counter is incremented each time a new SD100 call is programmed via FAC method on BroadWorks')
bwSD100Call = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 45, 2), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSD100Call.setStatus('current')
if mibBuilder.loadTexts: bwSD100Call.setDescription('This counter is incremented each time SD100 code is used to originate a call on BroadWorks')
bwSD100SPTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 45, 3), )
if mibBuilder.loadTexts: bwSD100SPTable.setStatus('current')
if mibBuilder.loadTexts: bwSD100SPTable.setDescription('Counters for sd100 service measurements for service providers')
bwSD100GroupTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 45, 4), )
if mibBuilder.loadTexts: bwSD100GroupTable.setStatus('current')
if mibBuilder.loadTexts: bwSD100GroupTable.setDescription('Counters for sd100 service measurements for groups')
bwSD100SPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 45, 3, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwSD100SPIndex"))
if mibBuilder.loadTexts: bwSD100SPEntry.setStatus('current')
if mibBuilder.loadTexts: bwSD100SPEntry.setDescription('Each row contains the service counters for the sd100 service for each service provider in the system')
bwSD100SPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 45, 3, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwSD100SPIndex.setStatus('current')
if mibBuilder.loadTexts: bwSD100SPIndex.setDescription('This column represents the index of the service provider in the system')
bwSD100SPID = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 45, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwSD100SPID.setStatus('current')
if mibBuilder.loadTexts: bwSD100SPID.setDescription('This string represents a service provider ID')
bwSD100SPProgram = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 45, 3, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSD100SPProgram.setStatus('current')
if mibBuilder.loadTexts: bwSD100SPProgram.setDescription('This counter is incremented each time a new SD100 call is programmed via the FAC method for a particular service provider')
bwSD100SPCall = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 45, 3, 1, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSD100SPCall.setStatus('current')
if mibBuilder.loadTexts: bwSD100SPCall.setDescription('This counter is incremented each time SD100 code is used to originate a call for a particular service provider')
bwSD100GroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 45, 4, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwSD100GroupIndex"))
if mibBuilder.loadTexts: bwSD100GroupEntry.setStatus('current')
if mibBuilder.loadTexts: bwSD100GroupEntry.setDescription('Each row contains the service counters for the sd100 service for each group in the system')
bwSD100GroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 45, 4, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwSD100GroupIndex.setStatus('current')
if mibBuilder.loadTexts: bwSD100GroupIndex.setDescription('This column represents the index of the group in the system')
bwSD100GroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 45, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwSD100GroupID.setStatus('current')
if mibBuilder.loadTexts: bwSD100GroupID.setDescription('This string represents a group ID')
bwSD100GroupProgram = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 45, 4, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSD100GroupProgram.setStatus('current')
if mibBuilder.loadTexts: bwSD100GroupProgram.setDescription('This counter is incremented each time a new SD100 call is programmed via the FAC method for a particular group')
bwSD100GroupCall = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 45, 4, 1, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSD100GroupCall.setStatus('current')
if mibBuilder.loadTexts: bwSD100GroupCall.setDescription('This counter is incremented each time SD100 code is used to originate a call for a particular group')
bwThirdPartyVoiceMailNbOfCFWBusy = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 46, 1), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwThirdPartyVoiceMailNbOfCFWBusy.setStatus('current')
if mibBuilder.loadTexts: bwThirdPartyVoiceMailNbOfCFWBusy.setDescription('Incremented each time a call is forwarded to an external VM (by the Third-Party Voice Mail Support User service) on busy condition')
bwThirdPartyVoiceMailNbOfCFWNoAnswer = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 46, 2), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwThirdPartyVoiceMailNbOfCFWNoAnswer.setStatus('current')
if mibBuilder.loadTexts: bwThirdPartyVoiceMailNbOfCFWNoAnswer.setDescription('Incremented each time a call is forwarded to an external VM (by the Third-Party Voice Mail Support User service) on no-answer condition, at the group level')
bwThirdPartyVMailSPTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 46, 3), )
if mibBuilder.loadTexts: bwThirdPartyVMailSPTable.setStatus('current')
if mibBuilder.loadTexts: bwThirdPartyVMailSPTable.setDescription('Counters for the Third Party Voice Mail service measurements for service providers')
bwThirdPartyVMailGroupTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 46, 4), )
if mibBuilder.loadTexts: bwThirdPartyVMailGroupTable.setStatus('current')
if mibBuilder.loadTexts: bwThirdPartyVMailGroupTable.setDescription('Counters for the Third Party Voice Mail service measurements for groups')
bwThirdPartyVMailSPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 46, 3, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwThirdPartyVMailSPIndex"))
if mibBuilder.loadTexts: bwThirdPartyVMailSPEntry.setStatus('current')
if mibBuilder.loadTexts: bwThirdPartyVMailSPEntry.setDescription('Each row contains the service counters for the sd100 service for each service provider in the system')
bwThirdPartyVMailSPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 46, 3, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwThirdPartyVMailSPIndex.setStatus('current')
if mibBuilder.loadTexts: bwThirdPartyVMailSPIndex.setDescription('This column represents the index of the service provider in the system')
bwThirdPartyVMailSPID = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 46, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwThirdPartyVMailSPID.setStatus('current')
if mibBuilder.loadTexts: bwThirdPartyVMailSPID.setDescription('This string represents a service provider ID')
bwThirdPartyVoiceMailSPNbOfCFWBusy = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 46, 3, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwThirdPartyVoiceMailSPNbOfCFWBusy.setStatus('current')
if mibBuilder.loadTexts: bwThirdPartyVoiceMailSPNbOfCFWBusy.setDescription('Incremented each time a call is forwarded to an external VM (by the Third-Party Voice Mail Support User service) on busy condition for a particular service provider')
bwThirdPartyVoiceMailSPNbOfCFWNoAnswer = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 46, 3, 1, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwThirdPartyVoiceMailSPNbOfCFWNoAnswer.setStatus('current')
if mibBuilder.loadTexts: bwThirdPartyVoiceMailSPNbOfCFWNoAnswer.setDescription('Incremented each time a call is forwarded to an external VM (by the Third-Party Voice Mail Support User service) on no-answer condition, at the group level')
bwThirdPartyVMailGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 46, 4, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwThirdPartyVMailGroupIndex"))
if mibBuilder.loadTexts: bwThirdPartyVMailGroupEntry.setStatus('current')
if mibBuilder.loadTexts: bwThirdPartyVMailGroupEntry.setDescription('Each row contains the service counters for the sd100 service for each group in the system')
bwThirdPartyVMailGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 46, 4, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwThirdPartyVMailGroupIndex.setStatus('current')
if mibBuilder.loadTexts: bwThirdPartyVMailGroupIndex.setDescription('This column represents the index of the group in the system')
bwThirdPartyVMailGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 46, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwThirdPartyVMailGroupID.setStatus('current')
if mibBuilder.loadTexts: bwThirdPartyVMailGroupID.setDescription('This string represents a group ID')
bwThirdPartyVoiceMailGroupNbOfCFWBusy = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 46, 4, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwThirdPartyVoiceMailGroupNbOfCFWBusy.setStatus('current')
if mibBuilder.loadTexts: bwThirdPartyVoiceMailGroupNbOfCFWBusy.setDescription('Incremented each time a call is forwarded to an external VM (by the Third-Party Voice Mail Support User service) on busy condition for a particular group')
bwThirdPartyVoiceMailGroupNbOfCFWNoAnswer = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 46, 4, 1, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwThirdPartyVoiceMailGroupNbOfCFWNoAnswer.setStatus('current')
if mibBuilder.loadTexts: bwThirdPartyVoiceMailGroupNbOfCFWNoAnswer.setDescription('Incremented each time a call is forwarded to an external VM (by the Third-Party Voice Mail Support User service) on no-answer condition, at the group level for a particular group')
bwDirectedCallPickupNumAttempts = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 47, 1), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwDirectedCallPickupNumAttempts.setStatus('current')
if mibBuilder.loadTexts: bwDirectedCallPickupNumAttempts.setDescription('This counter shall be incremented each time a user attempts to pick up a call using the Directed Call Pickup FAC')
bwDirectedCallPickupNumFailures = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 47, 2), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwDirectedCallPickupNumFailures.setStatus('current')
if mibBuilder.loadTexts: bwDirectedCallPickupNumFailures.setDescription('This counter shall be incremented each time a user is unsuccessful at picking up a call using the Directed Call Pickup FAC')
bwDirectedCallPickupSPTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 47, 3), )
if mibBuilder.loadTexts: bwDirectedCallPickupSPTable.setStatus('current')
if mibBuilder.loadTexts: bwDirectedCallPickupSPTable.setDescription('Counters for the Directed Call Pick Up service measurements for service providers')
bwDirectedCallPickupGroupTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 47, 4), )
if mibBuilder.loadTexts: bwDirectedCallPickupGroupTable.setStatus('current')
if mibBuilder.loadTexts: bwDirectedCallPickupGroupTable.setDescription('Counters for the Directed Call Pick Up service measurements for groups')
bwDirectedCallPickupSPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 47, 3, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwDirectedCallPickupSPIndex"))
if mibBuilder.loadTexts: bwDirectedCallPickupSPEntry.setStatus('current')
if mibBuilder.loadTexts: bwDirectedCallPickupSPEntry.setDescription('Each row contains the service counters for the directed call pick-up service for each service provider in the system')
bwDirectedCallPickupSPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 47, 3, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwDirectedCallPickupSPIndex.setStatus('current')
if mibBuilder.loadTexts: bwDirectedCallPickupSPIndex.setDescription('This column represents the index of the service provider in the system')
bwDirectedCallPickupSPID = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 47, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwDirectedCallPickupSPID.setStatus('current')
if mibBuilder.loadTexts: bwDirectedCallPickupSPID.setDescription('This string represents a service provider ID')
bwDirectedCallPickupSPNumAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 47, 3, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwDirectedCallPickupSPNumAttempts.setStatus('current')
if mibBuilder.loadTexts: bwDirectedCallPickupSPNumAttempts.setDescription('This counter shall be incremented each time a user attempts to pick up a call using the Directed Call Pickup FAC for a particular service provider')
bwDirectedCallPickupSPNumFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 47, 3, 1, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwDirectedCallPickupSPNumFailures.setStatus('current')
if mibBuilder.loadTexts: bwDirectedCallPickupSPNumFailures.setDescription('This counter shall be incremented each time a user is unsuccessful at picking up a call using the Directed Call Pickup FAC for a particular service provider')
bwDirectedCallPickupGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 47, 4, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwDirectedCallPickupGroupIndex"))
if mibBuilder.loadTexts: bwDirectedCallPickupGroupEntry.setStatus('current')
if mibBuilder.loadTexts: bwDirectedCallPickupGroupEntry.setDescription('Each row contains the service counters for the directed call pick-up service for each service provider in the system')
bwDirectedCallPickupGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 47, 4, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwDirectedCallPickupGroupIndex.setStatus('current')
if mibBuilder.loadTexts: bwDirectedCallPickupGroupIndex.setDescription('This column represents the index of the service provider in the system')
bwDirectedCallPickupGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 47, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwDirectedCallPickupGroupID.setStatus('current')
if mibBuilder.loadTexts: bwDirectedCallPickupGroupID.setDescription('This string represents a service provider ID')
bwDirectedCallPickupGroupNumAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 47, 4, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwDirectedCallPickupGroupNumAttempts.setStatus('current')
if mibBuilder.loadTexts: bwDirectedCallPickupGroupNumAttempts.setDescription('This counter shall be incremented each time a user attempts to pick up a call using the Directed Call Pickup FAC for a particular group')
bwDirectedCallPickupGroupNumFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 47, 4, 1, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwDirectedCallPickupGroupNumFailures.setStatus('current')
if mibBuilder.loadTexts: bwDirectedCallPickupGroupNumFailures.setDescription('This counter shall be incremented each time a user is unsuccessful at picking up a call using the Directed Call Pickup FAC for a particular group')
bwFlashCallHoldNumActivations = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 48, 1), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwFlashCallHoldNumActivations.setStatus('current')
if mibBuilder.loadTexts: bwFlashCallHoldNumActivations.setDescription('This counter shall be incremented each time a user successfully holds a call via the Flash Call Hold FAC')
bwFlashCallHoldSPTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 48, 2), )
if mibBuilder.loadTexts: bwFlashCallHoldSPTable.setStatus('current')
if mibBuilder.loadTexts: bwFlashCallHoldSPTable.setDescription('Counters for the Flash Call Hold service measurements for service providers')
bwFlashCallHoldGroupTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 48, 3), )
if mibBuilder.loadTexts: bwFlashCallHoldGroupTable.setStatus('current')
if mibBuilder.loadTexts: bwFlashCallHoldGroupTable.setDescription('Counters for the Flash Call Hold service measurements for groups')
bwFlashCallHoldSPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 48, 2, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwFlashCallHoldSPIndex"))
if mibBuilder.loadTexts: bwFlashCallHoldSPEntry.setStatus('current')
if mibBuilder.loadTexts: bwFlashCallHoldSPEntry.setDescription('Each row contains the service counters for the directed call pick-up service for each service provider in the system')
bwFlashCallHoldSPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 48, 2, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwFlashCallHoldSPIndex.setStatus('current')
if mibBuilder.loadTexts: bwFlashCallHoldSPIndex.setDescription('This column represents the index of the service provider in the system')
bwFlashCallHoldSPID = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 48, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwFlashCallHoldSPID.setStatus('current')
if mibBuilder.loadTexts: bwFlashCallHoldSPID.setDescription('This string represents a service provider ID')
bwFlashCallHoldSPNumActivations = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 48, 2, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwFlashCallHoldSPNumActivations.setStatus('current')
if mibBuilder.loadTexts: bwFlashCallHoldSPNumActivations.setDescription('This counter shall be incremented each time a user successfully holds a call via the Flash Call Hold FAC for a specigic service provider')
bwFlashCallHoldGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 48, 3, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwFlashCallHoldGroupIndex"))
if mibBuilder.loadTexts: bwFlashCallHoldGroupEntry.setStatus('current')
if mibBuilder.loadTexts: bwFlashCallHoldGroupEntry.setDescription('Each row contains the service counters for the directed call pick-up service for each group in the system')
bwFlashCallHoldGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 48, 3, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwFlashCallHoldGroupIndex.setStatus('current')
if mibBuilder.loadTexts: bwFlashCallHoldGroupIndex.setDescription('This column represents the index of the service provider in the system')
bwFlashCallHoldGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 48, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwFlashCallHoldGroupID.setStatus('current')
if mibBuilder.loadTexts: bwFlashCallHoldGroupID.setDescription('This string represents a service provider ID')
bwFlashCallHoldGroupNumActivations = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 48, 3, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwFlashCallHoldGroupNumActivations.setStatus('current')
if mibBuilder.loadTexts: bwFlashCallHoldGroupNumActivations.setDescription('This counter shall be incremented each time a user successfully holds a call via the Flash Call Hold FAC for a specigic group')
bwEZRegistrationsRejected = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 49, 1), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwEZRegistrationsRejected.setStatus('current')
if mibBuilder.loadTexts: bwEZRegistrationsRejected.setDescription('This counter is incremented whenever a SIP device registration is rejected because of the Emergency Zone service setting for a group')
bwEZEmergencyCallsRejected = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 49, 2), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwEZEmergencyCallsRejected.setStatus('current')
if mibBuilder.loadTexts: bwEZEmergencyCallsRejected.setDescription('This counter is incremented whenever an emergency call is rejected because of the emergency zone service setting for a group')
bwEZNormalCallsRejected = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 49, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwEZNormalCallsRejected.setStatus('current')
if mibBuilder.loadTexts: bwEZNormalCallsRejected.setDescription('This counter is incremented whenever a non-emergency call is rejected because of the Emergency Zone serivce setting for a group')
bwEZSPTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 49, 4), )
if mibBuilder.loadTexts: bwEZSPTable.setStatus('current')
if mibBuilder.loadTexts: bwEZSPTable.setDescription('Counters for the Emergency Zones service measurements for service providers')
bwEZGroupTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 49, 5), )
if mibBuilder.loadTexts: bwEZGroupTable.setStatus('current')
if mibBuilder.loadTexts: bwEZGroupTable.setDescription('Counters for the Emergency Zones service measurements for groups')
bwEZSPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 49, 4, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwEZSPIndex"))
if mibBuilder.loadTexts: bwEZSPEntry.setStatus('current')
if mibBuilder.loadTexts: bwEZSPEntry.setDescription('Each row contains the service counters for the emergency zone service for each service provider in the system')
bwEZSPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 49, 4, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwEZSPIndex.setStatus('current')
if mibBuilder.loadTexts: bwEZSPIndex.setDescription('This column represents the index of the service provider in the system')
bwEZSPID = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 49, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwEZSPID.setStatus('current')
if mibBuilder.loadTexts: bwEZSPID.setDescription('This string represents a service provider ID')
bwEZSPRegistrationsRejected = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 49, 4, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwEZSPRegistrationsRejected.setStatus('current')
if mibBuilder.loadTexts: bwEZSPRegistrationsRejected.setDescription('This counter is incremented whenever a SIP device registration is rejected because of the Emergency Zone service setting for a group for a specific service provider')
bwEZSPEmergencyCallsRejected = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 49, 4, 1, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwEZSPEmergencyCallsRejected.setStatus('current')
if mibBuilder.loadTexts: bwEZSPEmergencyCallsRejected.setDescription('This counter is incremented whenever an emergency call is rejected because of the emergency zone service setting for a group for a specific service provider')
bwEZSPNormalCallsRejected = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 49, 4, 1, 5), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwEZSPNormalCallsRejected.setStatus('current')
if mibBuilder.loadTexts: bwEZSPNormalCallsRejected.setDescription('This counter is incremented whenever a non-emergency call is rejected because of the Emergency Zone serivce setting for a group for a specific service provider')
bwEZGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 49, 5, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwEZGroupIndex"))
if mibBuilder.loadTexts: bwEZGroupEntry.setStatus('current')
if mibBuilder.loadTexts: bwEZGroupEntry.setDescription('Each row contains the service counters for the emergency zone service for each group in the system')
bwEZGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 49, 5, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwEZGroupIndex.setStatus('current')
if mibBuilder.loadTexts: bwEZGroupIndex.setDescription('This column represents the index of the service provider in the system')
bwEZGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 49, 5, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwEZGroupID.setStatus('current')
if mibBuilder.loadTexts: bwEZGroupID.setDescription('This string represents a service provider ID')
bwEZGroupRegistrationsRejected = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 49, 5, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwEZGroupRegistrationsRejected.setStatus('current')
if mibBuilder.loadTexts: bwEZGroupRegistrationsRejected.setDescription('This counter is incremented whenever a SIP device registration is rejected because of the Emergency Zone service setting for a group for a specific group')
bwEZGroupEmergencyCallsRejected = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 49, 5, 1, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwEZGroupEmergencyCallsRejected.setStatus('current')
if mibBuilder.loadTexts: bwEZGroupEmergencyCallsRejected.setDescription('This counter is incremented whenever an emergency call is rejected because of the emergency zone service setting for a group for a specific group')
bwEZGroupNormalCallsRejected = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 49, 5, 1, 5), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwEZGroupNormalCallsRejected.setStatus('current')
if mibBuilder.loadTexts: bwEZGroupNormalCallsRejected.setDescription('This counter is incremented whenever a non-emergency call is rejected because of the Emergency Zone serivce setting for a group for a specific group')
bwDPUBIAttempt = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 50, 1), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwDPUBIAttempt.setStatus('current')
if mibBuilder.loadTexts: bwDPUBIAttempt.setDescription('This counter is incremented each time a user attempts Directed Call Pickup with Barge-in')
bwDPUBIFailure = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 50, 2), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwDPUBIFailure.setStatus('current')
if mibBuilder.loadTexts: bwDPUBIFailure.setDescription('This counter is incremented each time a user fails to pickup a call with Directed Call Pickup with Barge-in')
bwDPUBIBargeIn = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 50, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwDPUBIBargeIn.setStatus('current')
if mibBuilder.loadTexts: bwDPUBIBargeIn.setDescription('This counter is incremented each time a user successfully barges into a call with Directed Call Pickup with Barge-in')
bwDPUBIBargeInFailure = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 50, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwDPUBIBargeInFailure.setStatus('current')
if mibBuilder.loadTexts: bwDPUBIBargeInFailure.setDescription('This counter is incremented each time a user fails to barge into a call with Directed Call Pickup with Barge-in')
bwDPUBISPTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 50, 5), )
if mibBuilder.loadTexts: bwDPUBISPTable.setStatus('current')
if mibBuilder.loadTexts: bwDPUBISPTable.setDescription('Counters for the Directed Call Pickup with Barge In service measurements for service providers')
bwDPUBIGroupTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 50, 6), )
if mibBuilder.loadTexts: bwDPUBIGroupTable.setStatus('current')
if mibBuilder.loadTexts: bwDPUBIGroupTable.setDescription('Counters for the Directed Call Pickup with Barge In service measurements for groups')
bwDPUBIExempt = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 50, 7), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwDPUBIExempt.setStatus('current')
if mibBuilder.loadTexts: bwDPUBIExempt.setDescription("This counter is incremented each time a DPUBI attempt is blocked by the picked up user's Barge-in Exempt service.")
bwDPUBISPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 50, 5, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwDPUBISPIndex"))
if mibBuilder.loadTexts: bwDPUBISPEntry.setStatus('current')
if mibBuilder.loadTexts: bwDPUBISPEntry.setDescription('Each row contains the service counters for the Directed Call Pickup with Barge In service for each service provider in the system')
bwDPUBISPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 50, 5, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwDPUBISPIndex.setStatus('current')
if mibBuilder.loadTexts: bwDPUBISPIndex.setDescription('This column represents the index of the service provider in the system')
bwDPUBISPID = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 50, 5, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwDPUBISPID.setStatus('current')
if mibBuilder.loadTexts: bwDPUBISPID.setDescription('This string represents a service provider ID')
bwDPUBISPAttempt = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 50, 5, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwDPUBISPAttempt.setStatus('current')
if mibBuilder.loadTexts: bwDPUBISPAttempt.setDescription('This counter is incremented each time a user under the Service Provider attempts Directed Call Pickup with Barge-in')
bwDPUBISPFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 50, 5, 1, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwDPUBISPFailure.setStatus('current')
if mibBuilder.loadTexts: bwDPUBISPFailure.setDescription('This counter is incremented each time a user under the Service Provider fails to pickup a call with Directed Call Pickup with Barge-in')
bwDPUBISPBargeIn = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 50, 5, 1, 5), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwDPUBISPBargeIn.setStatus('current')
if mibBuilder.loadTexts: bwDPUBISPBargeIn.setDescription('This counter is incremented each time a user under the Service Provider successfully barges into a call with Directed Call Pickup with Barge-in')
bwDPUBISPBargeInFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 50, 5, 1, 6), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwDPUBISPBargeInFailure.setStatus('current')
if mibBuilder.loadTexts: bwDPUBISPBargeInFailure.setDescription('This counter is incremented each time a user under the Service Provider fails to barge into a call with Directed Call Pickup with Barge-in')
bwDPUBISPExempt = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 50, 5, 1, 7), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwDPUBISPExempt.setStatus('current')
if mibBuilder.loadTexts: bwDPUBISPExempt.setDescription("This counter is incremented each time a DPUBI attempt is blocked by the picked up user's Barge-in Exempt service for a given service provider.")
bwDPUBIGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 50, 6, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwDPUBIGroupIndex"))
if mibBuilder.loadTexts: bwDPUBIGroupEntry.setStatus('current')
if mibBuilder.loadTexts: bwDPUBIGroupEntry.setDescription('Each row contains the service counters for the Directed Call Pickup with Barge In service for each group in the system')
bwDPUBIGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 50, 6, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwDPUBIGroupIndex.setStatus('current')
if mibBuilder.loadTexts: bwDPUBIGroupIndex.setDescription('This column represents the index of the group in the system')
bwDPUBIGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 50, 6, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwDPUBIGroupID.setStatus('current')
if mibBuilder.loadTexts: bwDPUBIGroupID.setDescription('This string represents a group ID')
bwDPUBIGroupAttempt = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 50, 6, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwDPUBIGroupAttempt.setStatus('current')
if mibBuilder.loadTexts: bwDPUBIGroupAttempt.setDescription('This counter is incremented each time a user under the group attempts Directed Call Pickup with Barge-in')
bwDPUBIGroupFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 50, 6, 1, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwDPUBIGroupFailure.setStatus('current')
if mibBuilder.loadTexts: bwDPUBIGroupFailure.setDescription('This counter is incremented each time a user under the group fails to pickup a call with Directed Call Pickup with Barge-in')
bwDPUBIGroupBargeIn = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 50, 6, 1, 5), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwDPUBIGroupBargeIn.setStatus('current')
if mibBuilder.loadTexts: bwDPUBIGroupBargeIn.setDescription('This counter is incremented each time a user under the group successfully barges into a call with Directed Call Pickup with Barge-in')
bwDPUBIGroupBargeInFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 50, 6, 1, 6), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwDPUBIGroupBargeInFailure.setStatus('current')
if mibBuilder.loadTexts: bwDPUBIGroupBargeInFailure.setDescription('This counter is incremented each time a user under the group fails to barge into a call with Directed Call Pickup with Barge-in')
bwDPUBIGroupExempt = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 50, 6, 1, 7), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwDPUBIGroupExempt.setStatus('current')
if mibBuilder.loadTexts: bwDPUBIGroupExempt.setDescription("This counter is incremented each time a DPUBI attempt is blocked by the picked up user's Barge-in Exempt service for a given group.")
bwACBStarted = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 51, 1), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwACBStarted.setStatus('current')
if mibBuilder.loadTexts: bwACBStarted.setDescription('System wide, number of times Automatic Callback has been activated')
bwACBExpired = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 51, 2), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwACBExpired.setStatus('current')
if mibBuilder.loadTexts: bwACBExpired.setDescription("System wide, number of times Automatic Callback's time to wait for an idle line has expired. The default time to wait is 30 minutes")
bwACBMaxSession = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 51, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwACBMaxSession.setStatus('current')
if mibBuilder.loadTexts: bwACBMaxSession.setDescription('System wide, number of time the max number of outstanding Automatic Callback sessions has been reached')
bwACBSPTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 51, 4), )
if mibBuilder.loadTexts: bwACBSPTable.setStatus('current')
if mibBuilder.loadTexts: bwACBSPTable.setDescription('Counters for the Automatic Call Back service measurements for service providers')
bwACBGroupTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 51, 5), )
if mibBuilder.loadTexts: bwACBGroupTable.setStatus('current')
if mibBuilder.loadTexts: bwACBGroupTable.setDescription('Counters for the Automatic Call Back service measurements for groups')
bwACBSPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 51, 4, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwACBSPIndex"))
if mibBuilder.loadTexts: bwACBSPEntry.setStatus('current')
if mibBuilder.loadTexts: bwACBSPEntry.setDescription('Each row contains the service counters for the Automatic Call Back service for each service provider in the system')
bwACBSPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 51, 4, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwACBSPIndex.setStatus('current')
if mibBuilder.loadTexts: bwACBSPIndex.setDescription('This column represents the index of the service provider in the system')
bwACBSPID = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 51, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwACBSPID.setStatus('current')
if mibBuilder.loadTexts: bwACBSPID.setDescription('This string represents a service provider ID')
bwACBSPStarted = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 51, 4, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwACBSPStarted.setStatus('current')
if mibBuilder.loadTexts: bwACBSPStarted.setDescription('Number of times Automatic Callback has been activated for a given service provider')
bwACBSPExpired = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 51, 4, 1, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwACBSPExpired.setStatus('current')
if mibBuilder.loadTexts: bwACBSPExpired.setDescription("Number of times Automatic Callback's time to wait for an idle line has expired for a given service provider. The default time to wait is 30 minutes.")
bwACBSPMaxSession = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 51, 4, 1, 5), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwACBSPMaxSession.setStatus('current')
if mibBuilder.loadTexts: bwACBSPMaxSession.setDescription('Number of time the max number of outstanding Automatic Callback sessions has been reached for a given service provider')
bwACBGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 51, 5, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwACBGroupIndex"))
if mibBuilder.loadTexts: bwACBGroupEntry.setStatus('current')
if mibBuilder.loadTexts: bwACBGroupEntry.setDescription('Each row contains the service counters for the Automatic Call Back service for each group in the system')
bwACBGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 51, 5, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwACBGroupIndex.setStatus('current')
if mibBuilder.loadTexts: bwACBGroupIndex.setDescription('This column represents the index of the group in the system')
bwACBGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 51, 5, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwACBGroupID.setStatus('current')
if mibBuilder.loadTexts: bwACBGroupID.setDescription('This string represents a group ID')
bwACBGroupStarted = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 51, 5, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwACBGroupStarted.setStatus('current')
if mibBuilder.loadTexts: bwACBGroupStarted.setDescription('Number of times Automatic Callback has been activated for a given group')
bwACBGroupExpired = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 51, 5, 1, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwACBGroupExpired.setStatus('current')
if mibBuilder.loadTexts: bwACBGroupExpired.setDescription("Number of times Automatic Callback's time to wait for an idle line has expired for a given group. The default time to wait is 30 minutes.")
bwACBGroupMaxSession = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 51, 5, 1, 5), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwACBGroupMaxSession.setStatus('current')
if mibBuilder.loadTexts: bwACBGroupMaxSession.setDescription('Number of time the max number of outstanding Automatic Callback sessions has been reached for a given group')
bwRingTimeoutNumExpires = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 53, 1), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwRingTimeoutNumExpires.setStatus('current')
if mibBuilder.loadTexts: bwRingTimeoutNumExpires.setDescription('Number of times the ring timeout timer expires for the entire system.')
bwRingTimeoutSPTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 53, 2), )
if mibBuilder.loadTexts: bwRingTimeoutSPTable.setStatus('current')
if mibBuilder.loadTexts: bwRingTimeoutSPTable.setDescription('Counters for the Ring Timeout service measurements for service providers')
bwRingTimeoutGroupTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 53, 3), )
if mibBuilder.loadTexts: bwRingTimeoutGroupTable.setStatus('current')
if mibBuilder.loadTexts: bwRingTimeoutGroupTable.setDescription('Counters for the Ring Timeout service measurements for groups')
bwRingTimeoutSPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 53, 2, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwRingTimeoutSPIndex"))
if mibBuilder.loadTexts: bwRingTimeoutSPEntry.setStatus('current')
if mibBuilder.loadTexts: bwRingTimeoutSPEntry.setDescription('Each row contains the service counters for the Ring Timeout service for each service provider in the system')
bwRingTimeoutSPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 53, 2, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwRingTimeoutSPIndex.setStatus('current')
if mibBuilder.loadTexts: bwRingTimeoutSPIndex.setDescription('This column represents the index of the service provider in the system')
bwRingTimeoutSPID = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 53, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwRingTimeoutSPID.setStatus('current')
if mibBuilder.loadTexts: bwRingTimeoutSPID.setDescription('This string represents a service provider ID')
bwRingTimeoutSPNumExpires = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 53, 2, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwRingTimeoutSPNumExpires.setStatus('current')
if mibBuilder.loadTexts: bwRingTimeoutSPNumExpires.setDescription('Number of times the ring timeout timer expires for a given service provider')
bwRingTimeoutGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 53, 3, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwRingTimeoutGroupIndex"))
if mibBuilder.loadTexts: bwRingTimeoutGroupEntry.setStatus('current')
if mibBuilder.loadTexts: bwRingTimeoutGroupEntry.setDescription('Each row contains the service counters for the Ring Timeout service for each group in the system')
bwRingTimeoutGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 53, 3, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwRingTimeoutGroupIndex.setStatus('current')
if mibBuilder.loadTexts: bwRingTimeoutGroupIndex.setDescription('This column represents the index of the group in the system')
bwRingTimeoutGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 53, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwRingTimeoutGroupID.setStatus('current')
if mibBuilder.loadTexts: bwRingTimeoutGroupID.setDescription('This string represents a group ID')
bwRingTimeoutGroupNumExpires = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 53, 3, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwRingTimeoutGroupNumExpires.setStatus('current')
if mibBuilder.loadTexts: bwRingTimeoutGroupNumExpires.setDescription('Number of times the ring timeout timer expires for a given group')
bwSequentialRingNumAttempts = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 52, 1), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSequentialRingNumAttempts.setStatus('current')
if mibBuilder.loadTexts: bwSequentialRingNumAttempts.setDescription('This counter is incremented whenever the sequential ring service forwards a call to the next in the list. The counter is not incremented for an attempt to alert the base location, unless it appears in the sequential ring list.')
bwSequentialRingNumNoAnswer = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 52, 2), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSequentialRingNumNoAnswer.setStatus('current')
if mibBuilder.loadTexts: bwSequentialRingNumNoAnswer.setDescription('This counter is incremented whenever the sequential ring service reaches the end of the list, and no users are available')
bwSequentialRingSPTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 52, 3), )
if mibBuilder.loadTexts: bwSequentialRingSPTable.setStatus('current')
if mibBuilder.loadTexts: bwSequentialRingSPTable.setDescription('This table tracks sequential ring measurements per service provider')
bwSequentialRingGroupTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 52, 4), )
if mibBuilder.loadTexts: bwSequentialRingGroupTable.setStatus('current')
if mibBuilder.loadTexts: bwSequentialRingGroupTable.setDescription('This table tracks sequential ring measurements per groups')
bwSequentialRingActivations = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 52, 5), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSequentialRingActivations.setStatus('current')
if mibBuilder.loadTexts: bwSequentialRingActivations.setDescription('This counter is incremented every time the Sequential Ring service is activated by an incoming call (service is active and screening is successful).')
bwSequentialRingAnswered = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 52, 6), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSequentialRingAnswered.setStatus('current')
if mibBuilder.loadTexts: bwSequentialRingAnswered.setDescription('This counter is incremented every time a caller gets connected to a location as a result of Sequential Ring')
bwSequentialRingAbandoned = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 52, 7), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSequentialRingAbandoned.setStatus('current')
if mibBuilder.loadTexts: bwSequentialRingAbandoned.setDescription('This counter is incremented every time a caller hangs up before Sequential Ring completes')
bwSequentialRingSPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 52, 3, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwSequentialRingSPIndex"))
if mibBuilder.loadTexts: bwSequentialRingSPEntry.setStatus('current')
if mibBuilder.loadTexts: bwSequentialRingSPEntry.setDescription('Each row contains the service counters for the sequentialRing service for each service provider in the system')
bwSequentialRingSPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 52, 3, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwSequentialRingSPIndex.setStatus('current')
if mibBuilder.loadTexts: bwSequentialRingSPIndex.setDescription('This column represents the index of the service provider in the system')
bwSequentialRingSPID = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 52, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwSequentialRingSPID.setStatus('current')
if mibBuilder.loadTexts: bwSequentialRingSPID.setDescription('This string represents a service provider ID')
bwSequentialRingSPNumAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 52, 3, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSequentialRingSPNumAttempts.setStatus('current')
if mibBuilder.loadTexts: bwSequentialRingSPNumAttempts.setDescription('This counter is incremented whenever the sequential ring service forwards a call to the next user in the list for a given service provider. The counter is not incremented for an attempt to alert the base location, unless it appears in the sequential ring list.')
bwSequentialRingSPNumNoAnswer = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 52, 3, 1, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSequentialRingSPNumNoAnswer.setStatus('current')
if mibBuilder.loadTexts: bwSequentialRingSPNumNoAnswer.setDescription('This counter is incremented whenever the sequential ring service reaches the end of the list, and no users are available for a given service provider')
bwSequentialRingSPActivations = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 52, 3, 1, 5), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSequentialRingSPActivations.setStatus('current')
if mibBuilder.loadTexts: bwSequentialRingSPActivations.setDescription('This counter is incremented every time the Sequential Ring service is activated by an incoming call (service is active and screening is successful) for a given Service Provider.')
bwSequentialRingSPAnswered = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 52, 3, 1, 6), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSequentialRingSPAnswered.setStatus('current')
if mibBuilder.loadTexts: bwSequentialRingSPAnswered.setDescription('This counter is incremented every time a caller gets connected to a location as a result of Sequential Ring for a given Service Provider')
bwSequentialRingSPAbandoned = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 52, 3, 1, 7), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSequentialRingSPAbandoned.setStatus('current')
if mibBuilder.loadTexts: bwSequentialRingSPAbandoned.setDescription('This counter is incremented every time a caller hangs up before Sequential Ring completes for a given Service Provider')
bwSequentialRingGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 52, 4, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwSequentialRingGroupIndex"))
if mibBuilder.loadTexts: bwSequentialRingGroupEntry.setStatus('current')
if mibBuilder.loadTexts: bwSequentialRingGroupEntry.setDescription('Each row contains the service counters for the sequentialRing service for each group in the system')
bwSequentialRingGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 52, 4, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwSequentialRingGroupIndex.setStatus('current')
if mibBuilder.loadTexts: bwSequentialRingGroupIndex.setDescription('This column represents the index of the group in the system')
bwSequentialRingGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 52, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwSequentialRingGroupID.setStatus('current')
if mibBuilder.loadTexts: bwSequentialRingGroupID.setDescription('This string represents a group ID')
bwSequentialRingGroupNumAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 52, 4, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSequentialRingGroupNumAttempts.setStatus('current')
if mibBuilder.loadTexts: bwSequentialRingGroupNumAttempts.setDescription('This counter is incremented whenever the sequential ring service forwards a call to the next user in the list for a given group. The counter is not incremented for an attempt to alert the base location, unless it appears in the sequential ring list.')
bwSequentialRingGroupNumNoAnswer = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 52, 4, 1, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSequentialRingGroupNumNoAnswer.setStatus('current')
if mibBuilder.loadTexts: bwSequentialRingGroupNumNoAnswer.setDescription('This counter is incremented whenever the sequential ring service reaches the end of the list, and no users are available for a given group')
bwSequentialRingGroupActivations = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 52, 4, 1, 5), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSequentialRingGroupActivations.setStatus('current')
if mibBuilder.loadTexts: bwSequentialRingGroupActivations.setDescription('This counter is incremented every time the Sequential Ring service is activated by an incoming call (service is active and screening is successful) for a given Group')
bwSequentialRingGroupAnswered = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 52, 4, 1, 6), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSequentialRingGroupAnswered.setStatus('current')
if mibBuilder.loadTexts: bwSequentialRingGroupAnswered.setDescription('This counter is incremented every time a caller gets connected to a location as a result of Sequential Ring for a given Group')
bwSequentialRingGroupAbandoned = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 52, 4, 1, 7), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSequentialRingGroupAbandoned.setStatus('current')
if mibBuilder.loadTexts: bwSequentialRingGroupAbandoned.setDescription('This counter is incremented every time a caller hangs up before Sequential Ring completes for a given Group')
bwVAOOutgoingAttempts = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 54, 1), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwVAOOutgoingAttempts.setStatus('current')
if mibBuilder.loadTexts: bwVAOOutgoingAttempts.setDescription('This counter is incremented each time a video add on call is attempted for an outgoing call.')
bwVAOOutgoingSuccess = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 54, 2), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwVAOOutgoingSuccess.setStatus('current')
if mibBuilder.loadTexts: bwVAOOutgoingSuccess.setDescription('This counter is incremented each time a video add on call attempt is successful for an outgoing call.')
bwVAOIncomingAttempts = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 54, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwVAOIncomingAttempts.setStatus('current')
if mibBuilder.loadTexts: bwVAOIncomingAttempts.setDescription('This counter is incremented each time a video add on call is attempted for an incoming call.')
bwVAOIncomingSuccess = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 54, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwVAOIncomingSuccess.setStatus('current')
if mibBuilder.loadTexts: bwVAOIncomingSuccess.setDescription('This counter is incremented each time a video add on call attempt is successful for an incoming call.')
bwVAOSPTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 54, 5), )
if mibBuilder.loadTexts: bwVAOSPTable.setStatus('current')
if mibBuilder.loadTexts: bwVAOSPTable.setDescription('Counters for the Ring Timeout service measurements for service providers')
bwVAOGroupTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 54, 6), )
if mibBuilder.loadTexts: bwVAOGroupTable.setStatus('current')
if mibBuilder.loadTexts: bwVAOGroupTable.setDescription('Counters for the Ring Timeout service measurements for groups')
bwVAOSPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 54, 5, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwVAOSPIndex"))
if mibBuilder.loadTexts: bwVAOSPEntry.setStatus('current')
if mibBuilder.loadTexts: bwVAOSPEntry.setDescription('Each row contains the service counters for the Video Add-On service for each service provider in the system')
bwVAOSPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 54, 5, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwVAOSPIndex.setStatus('current')
if mibBuilder.loadTexts: bwVAOSPIndex.setDescription('This column represents the index of the service provider in the system')
bwVAOSPID = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 54, 5, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwVAOSPID.setStatus('current')
if mibBuilder.loadTexts: bwVAOSPID.setDescription('This string represents a service provider ID')
bwVAOSPOutgoingAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 54, 5, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwVAOSPOutgoingAttempts.setStatus('current')
if mibBuilder.loadTexts: bwVAOSPOutgoingAttempts.setDescription('This counter is incremented each time a video add on call is attempted for an outgoing call for the given service provider.')
bwVAOSPOutgoingSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 54, 5, 1, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwVAOSPOutgoingSuccess.setStatus('current')
if mibBuilder.loadTexts: bwVAOSPOutgoingSuccess.setDescription('This counter is incremented each time a video add on call attempt is successful for an outgoing call for the given service provider.')
bwVAOSPIncomingAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 54, 5, 1, 5), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwVAOSPIncomingAttempts.setStatus('current')
if mibBuilder.loadTexts: bwVAOSPIncomingAttempts.setDescription('This counter is incremented each time a video add on call is attempted for an incoming call for the given service provider.')
bwVAOSPIncomingSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 54, 5, 1, 6), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwVAOSPIncomingSuccess.setStatus('current')
if mibBuilder.loadTexts: bwVAOSPIncomingSuccess.setDescription('This counter is incremented each time a video add on call attempt is successful for an incoming call for the given service provider.')
bwVAOGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 54, 6, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwVAOGroupIndex"))
if mibBuilder.loadTexts: bwVAOGroupEntry.setStatus('current')
if mibBuilder.loadTexts: bwVAOGroupEntry.setDescription('Each row contains the service counters for the Video Add-On service for each group in the system')
bwVAOGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 54, 6, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwVAOGroupIndex.setStatus('current')
if mibBuilder.loadTexts: bwVAOGroupIndex.setDescription('This column represents the index of the group in the system')
bwVAOGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 54, 6, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwVAOGroupID.setStatus('current')
if mibBuilder.loadTexts: bwVAOGroupID.setDescription('This string represents a group ID')
bwVAOGroupOutgoingAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 54, 6, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwVAOGroupOutgoingAttempts.setStatus('current')
if mibBuilder.loadTexts: bwVAOGroupOutgoingAttempts.setDescription('This counter is incremented each time a video add on call is attempted for an outgoing call for the given group.')
bwVAOGroupOutgoingSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 54, 6, 1, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwVAOGroupOutgoingSuccess.setStatus('current')
if mibBuilder.loadTexts: bwVAOGroupOutgoingSuccess.setDescription('This counter is incremented each time a video add on call attempt is successful for an outgoing call for the given group.')
bwVAOGroupIncomingAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 54, 6, 1, 5), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwVAOGroupIncomingAttempts.setStatus('current')
if mibBuilder.loadTexts: bwVAOGroupIncomingAttempts.setDescription('This counter is incremented each time a video add on call is attempted for an incoming call for the given group.')
bwVAOGroupIncomingSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 54, 6, 1, 6), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwVAOGroupIncomingSuccess.setStatus('current')
if mibBuilder.loadTexts: bwVAOGroupIncomingSuccess.setDescription('This counter is incremented each time a video add on call attempt is successful for an incoming call for the given group.')
bwMaliciousCallTraceApplied = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 55, 1), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwMaliciousCallTraceApplied.setStatus('current')
if mibBuilder.loadTexts: bwMaliciousCallTraceApplied.setDescription('This counter is incremented each time a the Malicious Call Trace serevice is activated.')
bwMaliciousCallTraceSPTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 55, 2), )
if mibBuilder.loadTexts: bwMaliciousCallTraceSPTable.setStatus('current')
if mibBuilder.loadTexts: bwMaliciousCallTraceSPTable.setDescription('Counters for the Malicious Call Trace service measurements for service providers')
bwMaliciousCallTraceGroupTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 55, 3), )
if mibBuilder.loadTexts: bwMaliciousCallTraceGroupTable.setStatus('current')
if mibBuilder.loadTexts: bwMaliciousCallTraceGroupTable.setDescription('Counters for the Malicious Call Trace service measurements for groups')
bwMaliciousCallTraceSPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 55, 2, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwMaliciousCallTraceSPIndex"))
if mibBuilder.loadTexts: bwMaliciousCallTraceSPEntry.setStatus('current')
if mibBuilder.loadTexts: bwMaliciousCallTraceSPEntry.setDescription('Each row contains the service counters for the Malicious Call Trace service for each service provider in the system')
bwMaliciousCallTraceSPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 55, 2, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwMaliciousCallTraceSPIndex.setStatus('current')
if mibBuilder.loadTexts: bwMaliciousCallTraceSPIndex.setDescription('This column represents the index of the service provider in the system')
bwMaliciousCallTraceSPID = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 55, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwMaliciousCallTraceSPID.setStatus('current')
if mibBuilder.loadTexts: bwMaliciousCallTraceSPID.setDescription('This string represents a service provider ID')
bwMaliciousCallTraceSPApplied = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 55, 2, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwMaliciousCallTraceSPApplied.setStatus('current')
if mibBuilder.loadTexts: bwMaliciousCallTraceSPApplied.setDescription('This counter is incremented each time a the Malicious Call Trace serevice is activated for the given service provider.')
bwMaliciousCallTraceGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 55, 3, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwMaliciousCallTraceGroupIndex"))
if mibBuilder.loadTexts: bwMaliciousCallTraceGroupEntry.setStatus('current')
if mibBuilder.loadTexts: bwMaliciousCallTraceGroupEntry.setDescription('Each row contains the service counters for the Malicious Call Trace service for each group in the system')
bwMaliciousCallTraceGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 55, 3, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwMaliciousCallTraceGroupIndex.setStatus('current')
if mibBuilder.loadTexts: bwMaliciousCallTraceGroupIndex.setDescription('This column represents the index of the service provider in the system')
bwMaliciousCallTraceGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 55, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwMaliciousCallTraceGroupID.setStatus('current')
if mibBuilder.loadTexts: bwMaliciousCallTraceGroupID.setDescription('This string represents a service provider ID')
bwMaliciousCallTraceGroupApplied = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 55, 3, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwMaliciousCallTraceGroupApplied.setStatus('current')
if mibBuilder.loadTexts: bwMaliciousCallTraceGroupApplied.setDescription('This counter is incremented each time a the Malicious Call Trace serevice is activated for the given group.')
bwPTTInvoke = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 56, 1), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwPTTInvoke.setStatus('current')
if mibBuilder.loadTexts: bwPTTInvoke.setDescription('Counts the number of times a user has originated a Push to Talk call.')
bwPTTReject = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 56, 2), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwPTTReject.setStatus('current')
if mibBuilder.loadTexts: bwPTTReject.setDescription('Counts the number of times a user has rejected a Push to Talk call because of their access list.')
bwPTTSPTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 56, 3), )
if mibBuilder.loadTexts: bwPTTSPTable.setStatus('current')
if mibBuilder.loadTexts: bwPTTSPTable.setDescription('Counters for the Push To Talk service measurements for service providers')
bwPTTGroupTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 56, 4), )
if mibBuilder.loadTexts: bwPTTGroupTable.setStatus('current')
if mibBuilder.loadTexts: bwPTTGroupTable.setDescription('Counters for the Push To Talk service measurements for groups')
bwPTTSPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 56, 3, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwPTTSPIndex"))
if mibBuilder.loadTexts: bwPTTSPEntry.setStatus('current')
if mibBuilder.loadTexts: bwPTTSPEntry.setDescription('Each row contains the service counters for the Push To Talk service for each service provider in the system')
bwPTTSPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 56, 3, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwPTTSPIndex.setStatus('current')
if mibBuilder.loadTexts: bwPTTSPIndex.setDescription('This column represents the index of the service provider in the system')
bwPTTSPID = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 56, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwPTTSPID.setStatus('current')
if mibBuilder.loadTexts: bwPTTSPID.setDescription('This string represents a service provider ID')
bwPTTSPInvoke = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 56, 3, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwPTTSPInvoke.setStatus('current')
if mibBuilder.loadTexts: bwPTTSPInvoke.setDescription('Counts the number of times a user has originated a Push to Talk call for a given service provider.')
bwPTTSPReject = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 56, 3, 1, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwPTTSPReject.setStatus('current')
if mibBuilder.loadTexts: bwPTTSPReject.setDescription('Counts the number of times a user has rejected a Push to Talk call because of their access list for a given service provider.')
bwPTTGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 56, 4, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwPTTGroupIndex"))
if mibBuilder.loadTexts: bwPTTGroupEntry.setStatus('current')
if mibBuilder.loadTexts: bwPTTGroupEntry.setDescription('Each row contains the service counters for the Push To Talk service for each group in the system')
bwPTTGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 56, 4, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwPTTGroupIndex.setStatus('current')
if mibBuilder.loadTexts: bwPTTGroupIndex.setDescription('This column represents the index of the group in the system')
bwPTTGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 56, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwPTTGroupID.setStatus('current')
if mibBuilder.loadTexts: bwPTTGroupID.setDescription('This string represents a group ID')
bwPTTGroupInvoke = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 56, 4, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwPTTGroupInvoke.setStatus('current')
if mibBuilder.loadTexts: bwPTTGroupInvoke.setDescription('Counts the number of times a user has originated a Push to Talk call for a given group.')
bwPTTGroupReject = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 56, 4, 1, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwPTTGroupReject.setStatus('current')
if mibBuilder.loadTexts: bwPTTGroupReject.setDescription('Counts the number of times a user has rejected a Push to Talk call because of their access list for agiven group.')
bwHotelingAssociate = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 57, 1), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwHotelingAssociate.setStatus('current')
if mibBuilder.loadTexts: bwHotelingAssociate.setDescription('This counter is incremented each time a guest - host association is created.')
bwHotelingDisassociate = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 57, 2), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwHotelingDisassociate.setStatus('current')
if mibBuilder.loadTexts: bwHotelingDisassociate.setDescription('This counter is incremented each time a guest - host association is removed.')
bwHotelingTimeout = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 57, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwHotelingTimeout.setStatus('current')
if mibBuilder.loadTexts: bwHotelingTimeout.setDescription('This counter is incremented each time a guest - host association is removed due to a timeout.')
bwHotelingSPTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 57, 4), )
if mibBuilder.loadTexts: bwHotelingSPTable.setStatus('current')
if mibBuilder.loadTexts: bwHotelingSPTable.setDescription('Counters for the Hoteling service measurements for service providers')
bwHotelingGroupTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 57, 5), )
if mibBuilder.loadTexts: bwHotelingGroupTable.setStatus('current')
if mibBuilder.loadTexts: bwHotelingGroupTable.setDescription('Counters for the Hoteling service measurements for groups')
bwHotelingSPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 57, 4, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwHotelingSPIndex"))
if mibBuilder.loadTexts: bwHotelingSPEntry.setStatus('current')
if mibBuilder.loadTexts: bwHotelingSPEntry.setDescription('Each row contains the service counters for the Hoteling service for each service provider in the system')
bwHotelingSPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 57, 4, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwHotelingSPIndex.setStatus('current')
if mibBuilder.loadTexts: bwHotelingSPIndex.setDescription('This column represents the index of the service provider in the system')
bwHotelingSPID = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 57, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwHotelingSPID.setStatus('current')
if mibBuilder.loadTexts: bwHotelingSPID.setDescription('This string represents a service provider ID')
bwHotelingSPAssociate = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 57, 4, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwHotelingSPAssociate.setStatus('current')
if mibBuilder.loadTexts: bwHotelingSPAssociate.setDescription('This counter is incremented each time a guest - host association is created for a given service provider.')
bwHotelingSPDisassociate = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 57, 4, 1, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwHotelingSPDisassociate.setStatus('current')
if mibBuilder.loadTexts: bwHotelingSPDisassociate.setDescription('This counter is incremented each time a guest - host association is removed for a given service provider.')
bwHotelingSPTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 57, 4, 1, 5), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwHotelingSPTimeout.setStatus('current')
if mibBuilder.loadTexts: bwHotelingSPTimeout.setDescription('This counter is incremented each time a guest - host association is removed due to a timeout for a given service provider.')
bwHotelingGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 57, 5, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwHotelingGroupIndex"))
if mibBuilder.loadTexts: bwHotelingGroupEntry.setStatus('current')
if mibBuilder.loadTexts: bwHotelingGroupEntry.setDescription('Each row contains the service counters for the Hoteling service for each group in the system')
bwHotelingGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 57, 5, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwHotelingGroupIndex.setStatus('current')
if mibBuilder.loadTexts: bwHotelingGroupIndex.setDescription('This column represents the index of the group in the system')
bwHotelingGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 57, 5, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwHotelingGroupID.setStatus('current')
if mibBuilder.loadTexts: bwHotelingGroupID.setDescription('This string represents a group ID')
bwHotelingGroupAssociate = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 57, 5, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwHotelingGroupAssociate.setStatus('current')
if mibBuilder.loadTexts: bwHotelingGroupAssociate.setDescription('This counter is incremented each time a guest - host association is created for a given group.')
bwHotelingGroupDisassociate = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 57, 5, 1, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwHotelingGroupDisassociate.setStatus('current')
if mibBuilder.loadTexts: bwHotelingGroupDisassociate.setDescription('This counter is incremented each time a guest - host association is removed for a given group.')
bwHotelingGroupTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 57, 5, 1, 5), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwHotelingGroupTimeout.setStatus('current')
if mibBuilder.loadTexts: bwHotelingGroupTimeout.setDescription('This counter is incremented each time a guest - host association is removed due to a timeout for a given group.')
bwSubscriptionUserPIC = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 58, 1), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSubscriptionUserPIC.setStatus('current')
if mibBuilder.loadTexts: bwSubscriptionUserPIC.setDescription('This counter shall be incremented each time the user PICs are used, but not explicitly dialed.')
bwSubscriptionGroupPIC = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 58, 2), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSubscriptionGroupPIC.setStatus('current')
if mibBuilder.loadTexts: bwSubscriptionGroupPIC.setDescription('This counter shall be incremented each time the group PICs are used, but not explicitly dialed.')
bwSubscriptionServiceProviderPIC = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 58, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSubscriptionServiceProviderPIC.setStatus('current')
if mibBuilder.loadTexts: bwSubscriptionServiceProviderPIC.setDescription('This counter shall be incremented each time the service provider PICs are used, but not explicitly dialed.')
bwSubscriptionDialedUserPIC = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 58, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSubscriptionDialedUserPIC.setStatus('current')
if mibBuilder.loadTexts: bwSubscriptionDialedUserPIC.setDescription('This counter shall be incremented each time the user PICs are used and explicitly dialed.')
bwSubscriptionDialedGroupPIC = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 58, 5), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSubscriptionDialedGroupPIC.setStatus('current')
if mibBuilder.loadTexts: bwSubscriptionDialedGroupPIC.setDescription('This counter shall be incremented each time the group PICs are used and explicitly dialed.')
bwSubscriptionDialedServiceProviderPIC = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 58, 6), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSubscriptionDialedServiceProviderPIC.setStatus('current')
if mibBuilder.loadTexts: bwSubscriptionDialedServiceProviderPIC.setDescription('This counter shall be incremented each time the service provider PICs are used and explicitly dialed.')
bwNonSubscriptionDialedUserPIC = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 58, 7), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwNonSubscriptionDialedUserPIC.setStatus('current')
if mibBuilder.loadTexts: bwNonSubscriptionDialedUserPIC.setDescription('This counter shall be incremented each time a casual dialed carrier is used instead of the user subscribed PIC.')
bwNonSubscriptionDialedGroupPIC = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 58, 8), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwNonSubscriptionDialedGroupPIC.setStatus('current')
if mibBuilder.loadTexts: bwNonSubscriptionDialedGroupPIC.setDescription('This counter shall be incremented each time a casual dialed carrier is used instead of the group subscribed PIC.')
bwNonSubscriptionDialedServiceProviderPIC = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 58, 9), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwNonSubscriptionDialedServiceProviderPIC.setStatus('current')
if mibBuilder.loadTexts: bwNonSubscriptionDialedServiceProviderPIC.setDescription('This counter shall be incremented each time a casual dialed carrier is used instead of the service provider subscribed PIC.')
bwNoIndicationUserPIC = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 58, 10), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwNoIndicationUserPIC.setStatus('current')
if mibBuilder.loadTexts: bwNoIndicationUserPIC.setDescription('This counter shall be incremented each time the user subscribed PIC is used, but with no indication on how this PIC was specified.')
bwNoIndicationGroupPIC = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 58, 11), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwNoIndicationGroupPIC.setStatus('current')
if mibBuilder.loadTexts: bwNoIndicationGroupPIC.setDescription('This counter shall be incremented each time the group subscribed PIC is used, but with no indication on how this PIC was specified.')
bwNoIndicationServiceProviderPIC = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 58, 12), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwNoIndicationServiceProviderPIC.setStatus('current')
if mibBuilder.loadTexts: bwNoIndicationServiceProviderPIC.setDescription('This counter shall be incremented each time the service provider subscribed PIC is used, but with no indication on how this PIC was specified.')
bwPreferredCarrierSPTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 58, 13), )
if mibBuilder.loadTexts: bwPreferredCarrierSPTable.setStatus('current')
if mibBuilder.loadTexts: bwPreferredCarrierSPTable.setDescription('Counters for the Preferred Carrier service measurements for service providers')
bwPreferredCarrierGroupTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 58, 14), )
if mibBuilder.loadTexts: bwPreferredCarrierGroupTable.setStatus('current')
if mibBuilder.loadTexts: bwPreferredCarrierGroupTable.setDescription('Counters for the Preferred Carrier service measurements for groups')
bwPreferredCarrierSPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 58, 13, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwPreferredCarrierSPIndex"))
if mibBuilder.loadTexts: bwPreferredCarrierSPEntry.setStatus('current')
if mibBuilder.loadTexts: bwPreferredCarrierSPEntry.setDescription('Each row contains the service counters for the Preferred Carrier service for each service provider in the system')
bwPreferredCarrierSPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 58, 13, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwPreferredCarrierSPIndex.setStatus('current')
if mibBuilder.loadTexts: bwPreferredCarrierSPIndex.setDescription('This column represents the index of the service provider in the system')
bwPreferredCarrierSPID = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 58, 13, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwPreferredCarrierSPID.setStatus('current')
if mibBuilder.loadTexts: bwPreferredCarrierSPID.setDescription('This string represents a service provider ID')
bwSPSubscriptionUserPIC = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 58, 13, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSPSubscriptionUserPIC.setStatus('current')
if mibBuilder.loadTexts: bwSPSubscriptionUserPIC.setDescription('This counter shall be incremented each time the user PICs are used, but not explicitly dialed, on a per-service provider basis..')
bwSPSubscriptionGroupPIC = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 58, 13, 1, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSPSubscriptionGroupPIC.setStatus('current')
if mibBuilder.loadTexts: bwSPSubscriptionGroupPIC.setDescription('This counter shall be incremented each time the group PICs are used, but not explicitly dialed, on a per-service provider basis..')
bwSPSubscriptionServiceProviderPIC = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 58, 13, 1, 5), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSPSubscriptionServiceProviderPIC.setStatus('current')
if mibBuilder.loadTexts: bwSPSubscriptionServiceProviderPIC.setDescription('This counter shall be incremented each time the service provider PICs are used, but not explicitly dialed, on a per-service provider basis..')
bwSPSubscriptionDialedUserPIC = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 58, 13, 1, 6), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSPSubscriptionDialedUserPIC.setStatus('current')
if mibBuilder.loadTexts: bwSPSubscriptionDialedUserPIC.setDescription('This counter shall be incremented each time the user PICs are used and explicitly dialed, on a per-service provider basis..')
bwSPSubscriptionDialedGroupPIC = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 58, 13, 1, 7), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSPSubscriptionDialedGroupPIC.setStatus('current')
if mibBuilder.loadTexts: bwSPSubscriptionDialedGroupPIC.setDescription('This counter shall be incremented each time the group PICs are used and explicitly dialed, on a per-service provider basis..')
bwSPSubscriptionDialedServiceProviderPIC = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 58, 13, 1, 8), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSPSubscriptionDialedServiceProviderPIC.setStatus('current')
if mibBuilder.loadTexts: bwSPSubscriptionDialedServiceProviderPIC.setDescription('This counter shall be incremented each time the service provider PICs are used and explicitly dialed, on a per-service provider basis..')
bwSPNonSubscriptionDialedUserPIC = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 58, 13, 1, 9), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSPNonSubscriptionDialedUserPIC.setStatus('current')
if mibBuilder.loadTexts: bwSPNonSubscriptionDialedUserPIC.setDescription('This counter shall be incremented each time a casual dialed carrier is used instead of the user subscribed PIC, on a per-service provider basis..')
bwSPNonSubscriptionDialedGroupPIC = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 58, 13, 1, 10), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSPNonSubscriptionDialedGroupPIC.setStatus('current')
if mibBuilder.loadTexts: bwSPNonSubscriptionDialedGroupPIC.setDescription('This counter shall be incremented each time a casual dialed carrier is used instead of the group subscribed PIC, on a per-service provider basis..')
bwSPNonSubscriptionDialedServiceProviderPIC = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 58, 13, 1, 11), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSPNonSubscriptionDialedServiceProviderPIC.setStatus('current')
if mibBuilder.loadTexts: bwSPNonSubscriptionDialedServiceProviderPIC.setDescription('This counter shall be incremented each time a casual dialed carrier is used instead of the service provider subscribed PIC, on a per-service provider basis..')
bwSPNoIndicationUserPIC = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 58, 13, 1, 12), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSPNoIndicationUserPIC.setStatus('current')
if mibBuilder.loadTexts: bwSPNoIndicationUserPIC.setDescription('This counter shall be incremented each time the user subscribed PIC is used, but with no indication on how this PIC was specified, on a per-service provider basis..')
bwSPNoIndicationGroupPIC = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 58, 13, 1, 13), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSPNoIndicationGroupPIC.setStatus('current')
if mibBuilder.loadTexts: bwSPNoIndicationGroupPIC.setDescription('This counter shall be incremented each time the group subscribed PIC is used, but with no indication on how this PIC was specified, on a per-service provider basis..')
bwSPNoIndicationServiceProviderPIC = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 58, 13, 1, 14), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSPNoIndicationServiceProviderPIC.setStatus('current')
if mibBuilder.loadTexts: bwSPNoIndicationServiceProviderPIC.setDescription('This counter shall be incremented each time the service provider subscribed PIC is used, but with no indication on how this PIC was specified, on a per-service provider basis..')
bwPreferredCarrierGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 58, 14, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwPreferredCarrierGroupIndex"))
if mibBuilder.loadTexts: bwPreferredCarrierGroupEntry.setStatus('current')
if mibBuilder.loadTexts: bwPreferredCarrierGroupEntry.setDescription('Each row contains the service counters for the Preferred Carrier service for each group in the system')
bwPreferredCarrierGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 58, 14, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwPreferredCarrierGroupIndex.setStatus('current')
if mibBuilder.loadTexts: bwPreferredCarrierGroupIndex.setDescription('This column represents the index of the group in the system')
bwPreferredCarrierGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 58, 14, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwPreferredCarrierGroupID.setStatus('current')
if mibBuilder.loadTexts: bwPreferredCarrierGroupID.setDescription('This string represents a group ID')
bwGroupSubscriptionUserPIC = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 58, 14, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwGroupSubscriptionUserPIC.setStatus('current')
if mibBuilder.loadTexts: bwGroupSubscriptionUserPIC.setDescription('This counter shall be incremented each time the user PICs are used, but not explicitly dialed, on a per-group basis..')
bwGroupSubscriptionGroupPIC = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 58, 14, 1, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwGroupSubscriptionGroupPIC.setStatus('current')
if mibBuilder.loadTexts: bwGroupSubscriptionGroupPIC.setDescription('This counter shall be incremented each time the group PICs are used, but not explicitly dialed, on a per-group basis..')
bwGroupSubscriptionServiceProviderPIC = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 58, 14, 1, 5), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwGroupSubscriptionServiceProviderPIC.setStatus('current')
if mibBuilder.loadTexts: bwGroupSubscriptionServiceProviderPIC.setDescription('This counter shall be incremented each time the service provider PICs are used, but not explicitly dialed, on a per-group basis..')
bwGroupSubscriptionDialedUserPIC = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 58, 14, 1, 6), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwGroupSubscriptionDialedUserPIC.setStatus('current')
if mibBuilder.loadTexts: bwGroupSubscriptionDialedUserPIC.setDescription('This counter shall be incremented each time the user PICs are used and explicitly dialed, on a per-group basis..')
bwGroupSubscriptionDialedGroupPIC = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 58, 14, 1, 7), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwGroupSubscriptionDialedGroupPIC.setStatus('current')
if mibBuilder.loadTexts: bwGroupSubscriptionDialedGroupPIC.setDescription('This counter shall be incremented each time the group PICs are used and explicitly dialed, on a per-group basis..')
bwGroupSubscriptionDialedServiceProviderPIC = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 58, 14, 1, 8), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwGroupSubscriptionDialedServiceProviderPIC.setStatus('current')
if mibBuilder.loadTexts: bwGroupSubscriptionDialedServiceProviderPIC.setDescription('This counter shall be incremented each time the service provider PICs are used and explicitly dialed, on a per-group basis..')
bwGroupNonSubscriptionDialedUserPIC = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 58, 14, 1, 9), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwGroupNonSubscriptionDialedUserPIC.setStatus('current')
if mibBuilder.loadTexts: bwGroupNonSubscriptionDialedUserPIC.setDescription('This counter shall be incremented each time a casual dialed carrier is used instead of the user subscribed PIC, on a per-group basis..')
bwGroupNonSubscriptionDialedGroupPIC = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 58, 14, 1, 10), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwGroupNonSubscriptionDialedGroupPIC.setStatus('current')
if mibBuilder.loadTexts: bwGroupNonSubscriptionDialedGroupPIC.setDescription('This counter shall be incremented each time a casual dialed carrier is used instead of the group subscribed PIC, on a per-group basis..')
bwGroupNonSubscriptionDialedServiceProviderPIC = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 58, 14, 1, 11), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwGroupNonSubscriptionDialedServiceProviderPIC.setStatus('current')
if mibBuilder.loadTexts: bwGroupNonSubscriptionDialedServiceProviderPIC.setDescription('This counter shall be incremented each time a casual dialed carrier is used instead of the service provider subscribed PIC, on a per-group basis..')
bwGroupNoIndicationUserPIC = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 58, 14, 1, 12), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwGroupNoIndicationUserPIC.setStatus('current')
if mibBuilder.loadTexts: bwGroupNoIndicationUserPIC.setDescription('This counter shall be incremented each time the user subscribed PIC is used, but with no indication on how this PIC was specified, on a per-group basis..')
bwGroupNoIndicationGroupPIC = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 58, 14, 1, 13), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwGroupNoIndicationGroupPIC.setStatus('current')
if mibBuilder.loadTexts: bwGroupNoIndicationGroupPIC.setDescription('This counter shall be incremented each time the group subscribed PIC is used, but with no indication on how this PIC was specified, on a per-group basis..')
bwGroupNoIndicationServiceProviderPIC = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 58, 14, 1, 14), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwGroupNoIndicationServiceProviderPIC.setStatus('current')
if mibBuilder.loadTexts: bwGroupNoIndicationServiceProviderPIC.setDescription('This counter shall be incremented each time the service provider subscribed PIC is used, but with no indication on how this PIC was specified, on a per-group basis..')
bwFamilySimRingNumAttempts = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 59, 1), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwFamilySimRingNumAttempts.setStatus('current')
if mibBuilder.loadTexts: bwFamilySimRingNumAttempts.setDescription('System wide counter for number of times family sim ring has been executed.')
bwFamilySimRingNumBusy = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 59, 2), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwFamilySimRingNumBusy.setStatus('current')
if mibBuilder.loadTexts: bwFamilySimRingNumBusy.setDescription('System wide counter for number of times all sim ring numbers have failed.')
bwFamilySimRingSPTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 59, 3), )
if mibBuilder.loadTexts: bwFamilySimRingSPTable.setStatus('current')
if mibBuilder.loadTexts: bwFamilySimRingSPTable.setDescription('Counters for the Family Simring service measurements for service providers')
bwFamilySimRingGroupTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 59, 4), )
if mibBuilder.loadTexts: bwFamilySimRingGroupTable.setStatus('current')
if mibBuilder.loadTexts: bwFamilySimRingGroupTable.setDescription('Counters for the Family Simring service measurements for groups')
bwFamilySimRingSPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 59, 3, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwFamilySimRingSPIndex"))
if mibBuilder.loadTexts: bwFamilySimRingSPEntry.setStatus('current')
if mibBuilder.loadTexts: bwFamilySimRingSPEntry.setDescription('Each row contains the service counters for the Family Simring service for each service provider in the system')
bwFamilySimRingSPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 59, 3, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwFamilySimRingSPIndex.setStatus('current')
if mibBuilder.loadTexts: bwFamilySimRingSPIndex.setDescription('This column represents the index of the service provider in the system')
bwFamilySimRingSPID = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 59, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwFamilySimRingSPID.setStatus('current')
if mibBuilder.loadTexts: bwFamilySimRingSPID.setDescription('This string represents a service provider ID')
bwFamilySimRingSPNumAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 59, 3, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwFamilySimRingSPNumAttempts.setStatus('current')
if mibBuilder.loadTexts: bwFamilySimRingSPNumAttempts.setDescription('System wide counter for number of times family sim ring has been executed for a given service provider.')
bwFamilySimRingSPNumBusy = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 59, 3, 1, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwFamilySimRingSPNumBusy.setStatus('current')
if mibBuilder.loadTexts: bwFamilySimRingSPNumBusy.setDescription('System wide counter for number of times all sim ring numbers have failed for a given service provider.')
bwFamilySimRingGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 59, 4, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwFamilySimRingGroupIndex"))
if mibBuilder.loadTexts: bwFamilySimRingGroupEntry.setStatus('current')
if mibBuilder.loadTexts: bwFamilySimRingGroupEntry.setDescription('Each row contains the service counters for the Family Simring service for each group in the system')
bwFamilySimRingGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 59, 4, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwFamilySimRingGroupIndex.setStatus('current')
if mibBuilder.loadTexts: bwFamilySimRingGroupIndex.setDescription('This column represents the index of the group in the system')
bwFamilySimRingGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 59, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwFamilySimRingGroupID.setStatus('current')
if mibBuilder.loadTexts: bwFamilySimRingGroupID.setDescription('This string represents a group ID')
bwFamilySimRingGroupNumAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 59, 4, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwFamilySimRingGroupNumAttempts.setStatus('current')
if mibBuilder.loadTexts: bwFamilySimRingGroupNumAttempts.setDescription('System wide counter for number of times family sim ring has been executed for a given group.')
bwFamilySimRingGroupNumBusy = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 59, 4, 1, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwFamilySimRingGroupNumBusy.setStatus('current')
if mibBuilder.loadTexts: bwFamilySimRingGroupNumBusy.setDescription('System wide counter for number of times all sim ring numbers have failed for a given group.')
bwDiversionInhibited = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 60, 1), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwDiversionInhibited.setStatus('current')
if mibBuilder.loadTexts: bwDiversionInhibited.setDescription('This counter is incremented each time Diversion Inhibitor FAC is invoked for a call, directly or via service configuration.')
bwDiversionInhibitorSPTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 60, 2), )
if mibBuilder.loadTexts: bwDiversionInhibitorSPTable.setStatus('current')
if mibBuilder.loadTexts: bwDiversionInhibitorSPTable.setDescription('Counters for the Diversion Inhibitor service measurements for service providers')
bwDiversionInhibitorGroupTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 60, 3), )
if mibBuilder.loadTexts: bwDiversionInhibitorGroupTable.setStatus('current')
if mibBuilder.loadTexts: bwDiversionInhibitorGroupTable.setDescription('Counters for the Diversion Inhibitor service measurements for groups')
bwDiversionInhibitorSPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 60, 2, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwDiversionInhibitorSPIndex"))
if mibBuilder.loadTexts: bwDiversionInhibitorSPEntry.setStatus('current')
if mibBuilder.loadTexts: bwDiversionInhibitorSPEntry.setDescription('Each row contains the service counters for the Diversion Inhibitor service for each service provider in the system')
bwDiversionInhibitorSPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 60, 2, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwDiversionInhibitorSPIndex.setStatus('current')
if mibBuilder.loadTexts: bwDiversionInhibitorSPIndex.setDescription('This column represents the index of the service provider in the system')
bwDiversionInhibitorSPID = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 60, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwDiversionInhibitorSPID.setStatus('current')
if mibBuilder.loadTexts: bwDiversionInhibitorSPID.setDescription('This string represents a service provider ID')
bwSPDiversionInhibited = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 60, 2, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSPDiversionInhibited.setStatus('current')
if mibBuilder.loadTexts: bwSPDiversionInhibited.setDescription('This counter is incremented each time Diversion Inhibitor FAC is invoked for a call, directly or via service configuration for a service provider.')
bwDiversionInhibitorGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 60, 3, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwDiversionInhibitorGroupIndex"))
if mibBuilder.loadTexts: bwDiversionInhibitorGroupEntry.setStatus('current')
if mibBuilder.loadTexts: bwDiversionInhibitorGroupEntry.setDescription('Each row contains the service counters for the Diversion Inhibitor service for each group in the system')
bwDiversionInhibitorGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 60, 3, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwDiversionInhibitorGroupIndex.setStatus('current')
if mibBuilder.loadTexts: bwDiversionInhibitorGroupIndex.setDescription('This column represents the index of the group in the system')
bwDiversionInhibitorGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 60, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwDiversionInhibitorGroupID.setStatus('current')
if mibBuilder.loadTexts: bwDiversionInhibitorGroupID.setDescription('This string represents a group ID')
bwGroupDiversionInhibited = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 60, 3, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwGroupDiversionInhibited.setStatus('current')
if mibBuilder.loadTexts: bwGroupDiversionInhibited.setDescription('This counter is incremented each time Diversion Inhibitor FAC is invoked for a call, directly or via service configuration for a group.')
bwIGCPushToTalkInvoke = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 61, 1), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwIGCPushToTalkInvoke.setStatus('current')
if mibBuilder.loadTexts: bwIGCPushToTalkInvoke.setDescription('This counter is incremented each time a Instant Group Call virtual user is called and the Push-To-Talk feature access code was dialed.')
bwIGCNormalInvoke = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 61, 2), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwIGCNormalInvoke.setStatus('current')
if mibBuilder.loadTexts: bwIGCNormalInvoke.setDescription('This counter is incremented each time a Instant Group Call virtual user is called and the Push-To-Talk feature access code was not dialed.')
bwIGCSPTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 61, 3), )
if mibBuilder.loadTexts: bwIGCSPTable.setStatus('current')
if mibBuilder.loadTexts: bwIGCSPTable.setDescription('Counters for the Instant Group Call service measurements for service providers')
bwIGCGroupTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 61, 4), )
if mibBuilder.loadTexts: bwIGCGroupTable.setStatus('current')
if mibBuilder.loadTexts: bwIGCGroupTable.setDescription('Counters for the Instant Group Call service measurements for groups')
bwIGCSPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 61, 3, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwIGCSPIndex"))
if mibBuilder.loadTexts: bwIGCSPEntry.setStatus('current')
if mibBuilder.loadTexts: bwIGCSPEntry.setDescription('Each row contains the service counters for the Instant Group Call service for each service provider in the system')
bwIGCSPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 61, 3, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwIGCSPIndex.setStatus('current')
if mibBuilder.loadTexts: bwIGCSPIndex.setDescription('This column represents the index of the service provider in the system')
bwIGCSPID = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 61, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwIGCSPID.setStatus('current')
if mibBuilder.loadTexts: bwIGCSPID.setDescription('This string represents a service provider ID')
bwIGCSPPushToTalkInvoke = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 61, 3, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwIGCSPPushToTalkInvoke.setStatus('current')
if mibBuilder.loadTexts: bwIGCSPPushToTalkInvoke.setDescription('This counter is incremented, per service provider ID, each time a Instant Group Call virtual user is called and the Push-To-Talk feature access code was dialed.')
bwIGCSPNormalInvoke = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 61, 3, 1, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwIGCSPNormalInvoke.setStatus('current')
if mibBuilder.loadTexts: bwIGCSPNormalInvoke.setDescription('This counter is incremented, per service provider ID, each time a Instant Group Call virtual user is called and the Push-To-Talk feature access code was not dialed.')
bwIGCGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 61, 4, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwIGCGroupIndex"))
if mibBuilder.loadTexts: bwIGCGroupEntry.setStatus('current')
if mibBuilder.loadTexts: bwIGCGroupEntry.setDescription('Each row contains the service counters for the Instant Group Call service for each group in the system')
bwIGCGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 61, 4, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwIGCGroupIndex.setStatus('current')
if mibBuilder.loadTexts: bwIGCGroupIndex.setDescription('This column represents the index of the group in the system')
bwIGCGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 61, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwIGCGroupID.setStatus('current')
if mibBuilder.loadTexts: bwIGCGroupID.setDescription('This string represents a group ID')
bwIGCGroupPushToTalkInvoke = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 61, 4, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwIGCGroupPushToTalkInvoke.setStatus('current')
if mibBuilder.loadTexts: bwIGCGroupPushToTalkInvoke.setDescription('This counter is incremented, per group ID, each time a Instant Group Call virtual user is called and the Push-To-Talk feature access code was dialed.')
bwIGCGroupNormalInvoke = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 61, 4, 1, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwIGCGroupNormalInvoke.setStatus('current')
if mibBuilder.loadTexts: bwIGCGroupNormalInvoke.setDescription('This counter is incremented, per group ID, each time a Instant Group Call virtual user is called and the Push-To-Talk feature access code was not dialed.')
bwAHRHold = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 62, 1), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwAHRHold.setStatus('current')
if mibBuilder.loadTexts: bwAHRHold.setDescription('Number of times a call is put on hold via the AHR service.')
bwAHRRetrieve = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 62, 2), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwAHRRetrieve.setStatus('current')
if mibBuilder.loadTexts: bwAHRRetrieve.setDescription('Number of times a call is retrieved via the AHR service.')
bwAHRSPTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 62, 3), )
if mibBuilder.loadTexts: bwAHRSPTable.setStatus('current')
if mibBuilder.loadTexts: bwAHRSPTable.setDescription('Counters for the Automatic Hold Retrieve service measurements for service providers.')
bwAHRGroupTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 62, 4), )
if mibBuilder.loadTexts: bwAHRGroupTable.setStatus('current')
if mibBuilder.loadTexts: bwAHRGroupTable.setDescription('Counters for the Automatic Hold Retrieve service measurements for groups.')
bwAHRSPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 62, 3, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwAHRSPIndex"))
if mibBuilder.loadTexts: bwAHRSPEntry.setStatus('current')
if mibBuilder.loadTexts: bwAHRSPEntry.setDescription('Each row contains the service counters for the Automatic Hold Retrieve service for each service provider in the system')
bwAHRSPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 62, 3, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwAHRSPIndex.setStatus('current')
if mibBuilder.loadTexts: bwAHRSPIndex.setDescription('This column represents the index of the service provider in the system.')
bwAHRSPID = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 62, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwAHRSPID.setStatus('current')
if mibBuilder.loadTexts: bwAHRSPID.setDescription('This string represents a service provider ID.')
bwAHRSPHold = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 62, 3, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwAHRSPHold.setStatus('current')
if mibBuilder.loadTexts: bwAHRSPHold.setDescription('Number of calls within a service provider that are put on hold via the AHR service.')
bwAHRSPRetrieve = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 62, 3, 1, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwAHRSPRetrieve.setStatus('current')
if mibBuilder.loadTexts: bwAHRSPRetrieve.setDescription('Number of calls within a service provider that are retrieved via the AHR service.')
bwAHRGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 62, 4, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwAHRGroupIndex"))
if mibBuilder.loadTexts: bwAHRGroupEntry.setStatus('current')
if mibBuilder.loadTexts: bwAHRGroupEntry.setDescription('Each row contains the service counters for the Automatic Hold Retrieve service for each group in the system')
bwAHRGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 62, 4, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwAHRGroupIndex.setStatus('current')
if mibBuilder.loadTexts: bwAHRGroupIndex.setDescription('This column represents the index of the group in the system.')
bwAHRGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 62, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwAHRGroupID.setStatus('current')
if mibBuilder.loadTexts: bwAHRGroupID.setDescription('This string represents a group ID.')
bwAHRGroupHold = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 62, 4, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwAHRGroupHold.setStatus('current')
if mibBuilder.loadTexts: bwAHRGroupHold.setDescription('Number of calls within a group that are put on hold via the AHR service.')
bwAHRGroupRetrieve = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 62, 4, 1, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwAHRGroupRetrieve.setStatus('current')
if mibBuilder.loadTexts: bwAHRGroupRetrieve.setDescription('Number of calls within a group that are retrieved via the AHR service.')
bwTrunkOriginationAttempt = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 63, 1), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwTrunkOriginationAttempt.setStatus('current')
if mibBuilder.loadTexts: bwTrunkOriginationAttempt.setDescription('This counter is incremented when a call is originated by a trunk user, whether it goes through or not.')
bwTrunkOriginationBlocked = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 63, 2), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwTrunkOriginationBlocked.setStatus('current')
if mibBuilder.loadTexts: bwTrunkOriginationBlocked.setDescription('This counter is incremented when a call originated by a trunk user is blocked because the trunk call capacity is reached.')
bwTrunkTerminationAttempt = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 63, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwTrunkTerminationAttempt.setStatus('current')
if mibBuilder.loadTexts: bwTrunkTerminationAttempt.setDescription('This counter is incremented when a call from an outside party attempts to terminate on a trunk user, whether it goes through or not.')
bwTrunkTerminationBlocked = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 63, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwTrunkTerminationBlocked.setStatus('current')
if mibBuilder.loadTexts: bwTrunkTerminationBlocked.setDescription('This counter is incremented when a call destined to a trunk user is blocked because the trunk call capacity is reached.')
bwTrunkSPTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 63, 5), )
if mibBuilder.loadTexts: bwTrunkSPTable.setStatus('current')
if mibBuilder.loadTexts: bwTrunkSPTable.setDescription('Counters for the Business Trunk Group service measurements for service providers.')
bwTrunkGroupTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 63, 6), )
if mibBuilder.loadTexts: bwTrunkGroupTable.setStatus('current')
if mibBuilder.loadTexts: bwTrunkGroupTable.setDescription('Counters for the Business Trunk Group service measurements for groups.')
bwTrunkGroupPerTGTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 63, 7), )
if mibBuilder.loadTexts: bwTrunkGroupPerTGTable.setStatus('current')
if mibBuilder.loadTexts: bwTrunkGroupPerTGTable.setDescription('Counters for the Business Trunk Group service measurements on a per trunk group basis.')
bwTrunkSPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 63, 5, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwTrunkSPIndex"))
if mibBuilder.loadTexts: bwTrunkSPEntry.setStatus('current')
if mibBuilder.loadTexts: bwTrunkSPEntry.setDescription('Each row contains the service counters for the Business Trunk Group service for each service provider in the system')
bwTrunkSPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 63, 5, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwTrunkSPIndex.setStatus('current')
if mibBuilder.loadTexts: bwTrunkSPIndex.setDescription('This column represents the index of the service provider in the system.')
bwTrunkSPID = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 63, 5, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwTrunkSPID.setStatus('current')
if mibBuilder.loadTexts: bwTrunkSPID.setDescription('This string represents a service provider ID.')
bwTrunkSPOriginationAttempt = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 63, 5, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwTrunkSPOriginationAttempt.setStatus('current')
if mibBuilder.loadTexts: bwTrunkSPOriginationAttempt.setDescription('This counter is incremented when a call is originated by a trunk user in the service provider, whether it goes through or not.')
bwTrunkSPOriginationBlocked = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 63, 5, 1, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwTrunkSPOriginationBlocked.setStatus('current')
if mibBuilder.loadTexts: bwTrunkSPOriginationBlocked.setDescription('This counter is incremented when a call originated by a trunk user within the service provider is blocked because the trunk call capacity is reached.')
bwTrunkSPTerminationAttempt = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 63, 5, 1, 5), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwTrunkSPTerminationAttempt.setStatus('current')
if mibBuilder.loadTexts: bwTrunkSPTerminationAttempt.setDescription('This counter is incremented when a call from an outside party attempts to terminate on a trunk user within the service provider, whether it goes through or not.')
bwTrunkSPTerminationBlocked = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 63, 5, 1, 6), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwTrunkSPTerminationBlocked.setStatus('current')
if mibBuilder.loadTexts: bwTrunkSPTerminationBlocked.setDescription('This counter is incremented when a call destined to a trunk user within the service provider is blocked because the trunk call capacity is reached.')
bwTrunkGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 63, 6, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwTrunkGroupIndex"))
if mibBuilder.loadTexts: bwTrunkGroupEntry.setStatus('current')
if mibBuilder.loadTexts: bwTrunkGroupEntry.setDescription('Each row contains the service counters for the Business Trunk Group service for each group in the system')
bwTrunkGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 63, 6, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwTrunkGroupIndex.setStatus('current')
if mibBuilder.loadTexts: bwTrunkGroupIndex.setDescription('This column represents the index of the group in the system.')
bwTrunkGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 63, 6, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwTrunkGroupID.setStatus('current')
if mibBuilder.loadTexts: bwTrunkGroupID.setDescription('This string represents a group ID.')
bwTrunkGroupOriginationAttempt = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 63, 6, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwTrunkGroupOriginationAttempt.setStatus('current')
if mibBuilder.loadTexts: bwTrunkGroupOriginationAttempt.setDescription('This counter is incremented when a call is originated by a trunk user in the group, whether it goes through or not.')
bwTrunkGroupOriginationBlocked = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 63, 6, 1, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwTrunkGroupOriginationBlocked.setStatus('current')
if mibBuilder.loadTexts: bwTrunkGroupOriginationBlocked.setDescription('This counter is incremented when a call originated by a trunk user within the group is blocked because the trunk call capacity is reached.')
bwTrunkGroupTerminationAttempt = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 63, 6, 1, 5), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwTrunkGroupTerminationAttempt.setStatus('current')
if mibBuilder.loadTexts: bwTrunkGroupTerminationAttempt.setDescription('This counter is incremented when a call from an outside party attempts to terminate on a trunk user within the group, whether it goes through or not.')
bwTrunkGroupTerminationBlocked = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 63, 6, 1, 6), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwTrunkGroupTerminationBlocked.setStatus('current')
if mibBuilder.loadTexts: bwTrunkGroupTerminationBlocked.setDescription('This counter is incremented when a call destined to a trunk user within the group is blocked because the trunk call capacity is reached.')
bwTrunkGroupPerTGEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 63, 7, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwTrunkGroupPerTGIndex"))
if mibBuilder.loadTexts: bwTrunkGroupPerTGEntry.setStatus('current')
if mibBuilder.loadTexts: bwTrunkGroupPerTGEntry.setDescription('Each row contains the service counters for the Business Trunk Group service for each service provider in the system')
bwTrunkGroupPerTGIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 63, 7, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwTrunkGroupPerTGIndex.setStatus('current')
if mibBuilder.loadTexts: bwTrunkGroupPerTGIndex.setDescription('This column represents the index of the trunk group in the system.')
bwTrunkGroupPerTGName = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 63, 7, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwTrunkGroupPerTGName.setStatus('current')
if mibBuilder.loadTexts: bwTrunkGroupPerTGName.setDescription('This string represents the name of a trunk group.')
bwTrunkGroupPerTGCapacityExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 63, 7, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwTrunkGroupPerTGCapacityExceeded.setStatus('current')
if mibBuilder.loadTexts: bwTrunkGroupPerTGCapacityExceeded.setDescription('The counter is incremented each time a trunk group call capacity is exceeded.')
bwTrunkGroupPerTGUnreachableDestination = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 63, 7, 1, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwTrunkGroupPerTGUnreachableDestination.setStatus('current')
if mibBuilder.loadTexts: bwTrunkGroupPerTGUnreachableDestination.setDescription('The counter is incremented each time a trunk group is deemed unreachable.')
bwTrunkGroupPerTGMaxActiveCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 63, 7, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwTrunkGroupPerTGMaxActiveCalls.setStatus('current')
if mibBuilder.loadTexts: bwTrunkGroupPerTGMaxActiveCalls.setDescription('Indicates the value of the Maximum Active Calls Allowed parameter for a trunk group.')
bwTrunkGroupPerTGMaxOutgoingActiveCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 63, 7, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwTrunkGroupPerTGMaxOutgoingActiveCalls.setStatus('current')
if mibBuilder.loadTexts: bwTrunkGroupPerTGMaxOutgoingActiveCalls.setDescription('Indicates the value of the Maximum Outgoing Active Calls Allowed parameter a the trunk group.')
bwTrunkGroupPerTGMaxIncomingActiveCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 63, 7, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwTrunkGroupPerTGMaxIncomingActiveCalls.setStatus('current')
if mibBuilder.loadTexts: bwTrunkGroupPerTGMaxIncomingActiveCalls.setDescription('Indicates the value of the Maximum Incoming Active Calls Allowed parameter a the trunk group.')
bwTrunkGroupPerTGCapacityExceededInitialValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 63, 7, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwTrunkGroupPerTGCapacityExceededInitialValue.setStatus('current')
if mibBuilder.loadTexts: bwTrunkGroupPerTGCapacityExceededInitialValue.setDescription('Indicates the value of the Capacity Exceeded Initial Value parameter for a trunk group.')
bwTrunkGroupPerTGCapacityExceededOffsetValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 63, 7, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwTrunkGroupPerTGCapacityExceededOffsetValue.setStatus('current')
if mibBuilder.loadTexts: bwTrunkGroupPerTGCapacityExceededOffsetValue.setDescription('Indicates the value of the Capacity Exceeded Offset Value parameter for a trunk group.')
bwTrunkGroupPerTGUnreachableDestinationExceededInitialValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 63, 7, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwTrunkGroupPerTGUnreachableDestinationExceededInitialValue.setStatus('current')
if mibBuilder.loadTexts: bwTrunkGroupPerTGUnreachableDestinationExceededInitialValue.setDescription('Indicates the value of the Unreachable Destination Exceeded Initial Value parameter for a trunk group.')
bwTrunkGroupPerTGUnreachableDestinationExceededOffsetValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 63, 7, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwTrunkGroupPerTGUnreachableDestinationExceededOffsetValue.setStatus('current')
if mibBuilder.loadTexts: bwTrunkGroupPerTGUnreachableDestinationExceededOffsetValue.setDescription('Indicates the value of the Unreachable Destination Exceeded Offset Value parameter for a trunk group.')
bwTrunkGroupPerTGBursting = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 63, 7, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwTrunkGroupPerTGBursting.setStatus('current')
if mibBuilder.loadTexts: bwTrunkGroupPerTGBursting.setDescription('Indicates the value bursting parameter for the trunk group.')
bwTrunkGroupPerTGBurstingMaxActiveCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 63, 7, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwTrunkGroupPerTGBurstingMaxActiveCalls.setStatus('current')
if mibBuilder.loadTexts: bwTrunkGroupPerTGBurstingMaxActiveCalls.setDescription('Indicates the value of the Bursting Maximum Active Calls Allowed parameter for the trunk group.')
bwTrunkGroupPerTGBurstingMaxOutgoingActiveCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 63, 7, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwTrunkGroupPerTGBurstingMaxOutgoingActiveCalls.setStatus('current')
if mibBuilder.loadTexts: bwTrunkGroupPerTGBurstingMaxOutgoingActiveCalls.setDescription('Indicates the value of the Bursting Maximum Outgoing Active Calls Allowed parameter for the trunk group.')
bwTrunkGroupPerTGBurstingMaxIncomingActiveCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 63, 7, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwTrunkGroupPerTGBurstingMaxIncomingActiveCalls.setStatus('current')
if mibBuilder.loadTexts: bwTrunkGroupPerTGBurstingMaxIncomingActiveCalls.setDescription('Indicates the value of the Bursting Maximum Incoming Active Calls Allowed parameter for the trunk group.')
bwTrunkGroupPerTGGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 63, 7, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwTrunkGroupPerTGGroupID.setStatus('current')
if mibBuilder.loadTexts: bwTrunkGroupPerTGGroupID.setDescription('This string represents a group ID.')
bwCustomRingbackUserAudioAttempts = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 64, 1), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCustomRingbackUserAudioAttempts.setStatus('current')
if mibBuilder.loadTexts: bwCustomRingbackUserAudioAttempts.setDescription('This counter is incremented each time a command is sent to the Media Server in an attempt to play a user custom audio ringback.')
bwCustomRingbackUserVideoAttempts = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 64, 2), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCustomRingbackUserVideoAttempts.setStatus('current')
if mibBuilder.loadTexts: bwCustomRingbackUserVideoAttempts.setDescription('This counter is incremented each time a command is sent to the Media Server in an attempt to play a user custom video ringback.')
bwCustomRingbackUserAudioFailures = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 64, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCustomRingbackUserAudioFailures.setStatus('current')
if mibBuilder.loadTexts: bwCustomRingbackUserAudioFailures.setDescription('This counter is incremented each time where an attempt is made to play a user custom audio ringback, and that the Media Server reports any failure to play it.')
bwCustomRingbackUserVideoFailures = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 64, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCustomRingbackUserVideoFailures.setStatus('current')
if mibBuilder.loadTexts: bwCustomRingbackUserVideoFailures.setDescription('This counter is incremented each time where an attempt is made to play a user custom video ringback, and that the Media Server reports any failure to play it.')
bwCustomRingbackGroupAudioAttempts = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 64, 5), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCustomRingbackGroupAudioAttempts.setStatus('current')
if mibBuilder.loadTexts: bwCustomRingbackGroupAudioAttempts.setDescription('This counter is incremented each time a command is sent to the Media Server in an attempt to play a group custom audio ringback.')
bwCustomRingbackGroupVideoAttempts = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 64, 6), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCustomRingbackGroupVideoAttempts.setStatus('current')
if mibBuilder.loadTexts: bwCustomRingbackGroupVideoAttempts.setDescription('This counter is incremented each time a command is sent to the Media Server in an attempt to play a group custom video ringback.')
bwCustomRingbackGroupAudioFailures = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 64, 7), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCustomRingbackGroupAudioFailures.setStatus('current')
if mibBuilder.loadTexts: bwCustomRingbackGroupAudioFailures.setDescription('This counter is incremented each time where an attempt is made to play a group custom audio ringback, and that the Media Server reports any failure to play it.')
bwCustomRingbackGroupVideoFailures = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 64, 8), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCustomRingbackGroupVideoFailures.setStatus('current')
if mibBuilder.loadTexts: bwCustomRingbackGroupVideoFailures.setDescription('This counter is incremented each time where an attempt is made to play a group custom video ringback, and that the Media Server reports any failure to play it.')
bwCustomRingbackSPTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 64, 9), )
if mibBuilder.loadTexts: bwCustomRingbackSPTable.setStatus('current')
if mibBuilder.loadTexts: bwCustomRingbackSPTable.setDescription('Counters for the Custom Ringback service measurements for service providers.')
bwCustomRingbackGroupTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 64, 10), )
if mibBuilder.loadTexts: bwCustomRingbackGroupTable.setStatus('current')
if mibBuilder.loadTexts: bwCustomRingbackGroupTable.setDescription('Counters for the Custom Ringback service measurements for groups.')
bwCustomRingbackSPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 64, 9, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwCustomRingbackSPIndex"))
if mibBuilder.loadTexts: bwCustomRingbackSPEntry.setStatus('current')
if mibBuilder.loadTexts: bwCustomRingbackSPEntry.setDescription('Each row contains the service counters for the Custom Ringback service for each service provider in the system.')
bwCustomRingbackSPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 64, 9, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwCustomRingbackSPIndex.setStatus('current')
if mibBuilder.loadTexts: bwCustomRingbackSPIndex.setDescription('This column represents the index of the service provider in the system.')
bwCustomRingbackSPID = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 64, 9, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwCustomRingbackSPID.setStatus('current')
if mibBuilder.loadTexts: bwCustomRingbackSPID.setDescription('This string represents a service provider ID.')
bwCustomRingbackUserAudioSPAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 64, 9, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCustomRingbackUserAudioSPAttempts.setStatus('current')
if mibBuilder.loadTexts: bwCustomRingbackUserAudioSPAttempts.setDescription('This counter is incremented each time a command is sent to the Media Server in an attempt to play a user custom audio ringback for a given service provider.')
bwCustomRingbackUserVideoSPAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 64, 9, 1, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCustomRingbackUserVideoSPAttempts.setStatus('current')
if mibBuilder.loadTexts: bwCustomRingbackUserVideoSPAttempts.setDescription('This counter is incremented each time a command is sent to the Media Server in an attempt to play a user custom video ringback for a given service provider.')
bwCustomRingbackUserAudioSPFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 64, 9, 1, 5), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCustomRingbackUserAudioSPFailures.setStatus('current')
if mibBuilder.loadTexts: bwCustomRingbackUserAudioSPFailures.setDescription('This counter is incremented each time where an attempt is made to play a user custom audio ringback, and that the Media Server reports any failure to play it for a given service provider.')
bwCustomRingbackUserVideoSPFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 64, 9, 1, 6), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCustomRingbackUserVideoSPFailures.setStatus('current')
if mibBuilder.loadTexts: bwCustomRingbackUserVideoSPFailures.setDescription('This counter is incremented each time where an attempt is made to play a user custom video ringback, and that the Media Server reports any failure to play it for a given service provider.')
bwCustomRingbackGroupAudioSPAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 64, 9, 1, 7), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCustomRingbackGroupAudioSPAttempts.setStatus('current')
if mibBuilder.loadTexts: bwCustomRingbackGroupAudioSPAttempts.setDescription('This counter is incremented each time a command is sent to the Media Server in an attempt to play a group custom audio ringback for a given service provider.')
bwCustomRingbackGroupVideoSPAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 64, 9, 1, 8), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCustomRingbackGroupVideoSPAttempts.setStatus('current')
if mibBuilder.loadTexts: bwCustomRingbackGroupVideoSPAttempts.setDescription('This counter is incremented each time a command is sent to the Media Server in an attempt to play a group custom video ringback for a given service provider.')
bwCustomRingbackGroupAudioSPFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 64, 9, 1, 9), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCustomRingbackGroupAudioSPFailures.setStatus('current')
if mibBuilder.loadTexts: bwCustomRingbackGroupAudioSPFailures.setDescription('This counter is incremented each time where an attempt is made to play a group custom audio ringback, and that the Media Server reports any failure to play it for a given service provider.')
bwCustomRingbackGroupVideoSPFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 64, 9, 1, 10), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCustomRingbackGroupVideoSPFailures.setStatus('current')
if mibBuilder.loadTexts: bwCustomRingbackGroupVideoSPFailures.setDescription('This counter is incremented each time where an attempt is made to play a group custom video ringback, and that the Media Server reports any failure to play it for a given service provider.')
bwCustomRingbackGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 64, 10, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwCustomRingbackGroupIndex"))
if mibBuilder.loadTexts: bwCustomRingbackGroupEntry.setStatus('current')
if mibBuilder.loadTexts: bwCustomRingbackGroupEntry.setDescription('Each row contains the service counters for the Custom Ringback service for each group in the system.')
bwCustomRingbackGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 64, 10, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwCustomRingbackGroupIndex.setStatus('current')
if mibBuilder.loadTexts: bwCustomRingbackGroupIndex.setDescription('This column represents the index of the group in the system.')
bwCustomRingbackGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 64, 10, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwCustomRingbackGroupID.setStatus('current')
if mibBuilder.loadTexts: bwCustomRingbackGroupID.setDescription('This string represents a group ID.')
bwCustomRingbackUserAudioGroupAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 64, 10, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCustomRingbackUserAudioGroupAttempts.setStatus('current')
if mibBuilder.loadTexts: bwCustomRingbackUserAudioGroupAttempts.setDescription('This counter is incremented each time a command is sent to the Media Server in an attempt to play a user custom audio ringback for a given group.')
bwCustomRingbackUserVideoGroupAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 64, 10, 1, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCustomRingbackUserVideoGroupAttempts.setStatus('current')
if mibBuilder.loadTexts: bwCustomRingbackUserVideoGroupAttempts.setDescription('This counter is incremented each time a command is sent to the Media Server in an attempt to play a user custom video ringback for a given group.')
bwCustomRingbackUserAudioGroupFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 64, 10, 1, 5), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCustomRingbackUserAudioGroupFailures.setStatus('current')
if mibBuilder.loadTexts: bwCustomRingbackUserAudioGroupFailures.setDescription('This counter is incremented each time where an attempt is made to play a user custom audio ringback, and that the Media Server reports any failure to play it for a given group.')
bwCustomRingbackUserVideoGroupFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 64, 10, 1, 6), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCustomRingbackUserVideoGroupFailures.setStatus('current')
if mibBuilder.loadTexts: bwCustomRingbackUserVideoGroupFailures.setDescription('This counter is incremented each time where an attempt is made to play a user custom video ringback, and that the Media Server reports any failure to play it for a given group.')
bwCustomRingbackGroupAudioGroupAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 64, 10, 1, 7), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCustomRingbackGroupAudioGroupAttempts.setStatus('current')
if mibBuilder.loadTexts: bwCustomRingbackGroupAudioGroupAttempts.setDescription('This counter is incremented each time a command is sent to the Media Server in an attempt to play a group custom audio ringback for a given group.')
bwCustomRingbackGroupVideoGroupAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 64, 10, 1, 8), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCustomRingbackGroupVideoGroupAttempts.setStatus('current')
if mibBuilder.loadTexts: bwCustomRingbackGroupVideoGroupAttempts.setDescription('This counter is incremented each time a command is sent to the Media Server in an attempt to play a group custom video ringback for a given group.')
bwCustomRingbackGroupAudioGroupFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 64, 10, 1, 9), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCustomRingbackGroupAudioGroupFailures.setStatus('current')
if mibBuilder.loadTexts: bwCustomRingbackGroupAudioGroupFailures.setDescription('This counter is incremented each time where an attempt is made to play a group custom audio ringback, and that the Media Server reports any failure to play it for a given group.')
bwCustomRingbackGroupVideoGroupFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 64, 10, 1, 10), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCustomRingbackGroupVideoGroupFailures.setStatus('current')
if mibBuilder.loadTexts: bwCustomRingbackGroupVideoGroupFailures.setDescription('This counter is incremented each time where an attempt is made to play a group custom video ringback, and that the Media Server reports any failure to play it for a given group.')
bwPhysicalLocationOriginationBlocked = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 65, 1), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwPhysicalLocationOriginationBlocked.setStatus('current')
if mibBuilder.loadTexts: bwPhysicalLocationOriginationBlocked.setDescription('Number of times a user has an origination blocked by the Physical Location service.')
bwPhysicalLocationSPTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 65, 2), )
if mibBuilder.loadTexts: bwPhysicalLocationSPTable.setStatus('current')
if mibBuilder.loadTexts: bwPhysicalLocationSPTable.setDescription('Counters for the Physical Location service measurements for service providers')
bwPhysicalLocationGroupTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 65, 3), )
if mibBuilder.loadTexts: bwPhysicalLocationGroupTable.setStatus('current')
if mibBuilder.loadTexts: bwPhysicalLocationGroupTable.setDescription('Counters for the Physical Location service measurements for groups')
bwPhysicalLocationSPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 65, 2, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwPhysicalLocationSPIndex"))
if mibBuilder.loadTexts: bwPhysicalLocationSPEntry.setStatus('current')
if mibBuilder.loadTexts: bwPhysicalLocationSPEntry.setDescription('Each row contains the service counters for the Physical Location service for each service provider in the system')
bwPhysicalLocationSPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 65, 2, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwPhysicalLocationSPIndex.setStatus('current')
if mibBuilder.loadTexts: bwPhysicalLocationSPIndex.setDescription('This column represents the index of the service provider in the system')
bwPhysicalLocationSPID = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 65, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwPhysicalLocationSPID.setStatus('current')
if mibBuilder.loadTexts: bwPhysicalLocationSPID.setDescription('This string represents a service provider ID')
bwPhysicalLocationSPOriginationBlocked = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 65, 2, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwPhysicalLocationSPOriginationBlocked.setStatus('current')
if mibBuilder.loadTexts: bwPhysicalLocationSPOriginationBlocked.setDescription('Number of times a user under the Service Provider has an origination blocked by the Physical Location service.')
bwPhysicalLocationGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 65, 3, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwPhysicalLocationGroupIndex"))
if mibBuilder.loadTexts: bwPhysicalLocationGroupEntry.setStatus('current')
if mibBuilder.loadTexts: bwPhysicalLocationGroupEntry.setDescription('Each row contains the service counters for the Physical Location service for each group in the system')
bwPhysicalLocationGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 65, 3, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwPhysicalLocationGroupIndex.setStatus('current')
if mibBuilder.loadTexts: bwPhysicalLocationGroupIndex.setDescription('This column represents the index of the group in the system')
bwPhysicalLocationGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 65, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwPhysicalLocationGroupID.setStatus('current')
if mibBuilder.loadTexts: bwPhysicalLocationGroupID.setDescription('This string represents a service provider ID')
bwPhysicalLocationGroupOriginationBlocked = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 65, 3, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwPhysicalLocationGroupOriginationBlocked.setStatus('current')
if mibBuilder.loadTexts: bwPhysicalLocationGroupOriginationBlocked.setDescription('Number of times a user under the group has an origination blocked by the Physical Location service.')
bwFaxMessagingReceived = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 66, 1), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwFaxMessagingReceived.setStatus('current')
if mibBuilder.loadTexts: bwFaxMessagingReceived.setDescription('This counter is incremented each time a user receives a fax.')
bwFaxMessagingReceptionFailure = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 66, 2), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwFaxMessagingReceptionFailure.setStatus('current')
if mibBuilder.loadTexts: bwFaxMessagingReceptionFailure.setDescription('This counter is incremented whenever the reception of a fax fails.')
bwFaxMessagingPrinted = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 66, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwFaxMessagingPrinted.setStatus('current')
if mibBuilder.loadTexts: bwFaxMessagingPrinted.setDescription('This counter is incremented each time a user sends a fax.')
bwFaxMessagingPrintingFailure = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 66, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwFaxMessagingPrintingFailure.setStatus('current')
if mibBuilder.loadTexts: bwFaxMessagingPrintingFailure.setDescription('This counter is incremented each time the printing of a fax over a fax number fails.')
bwFaxMessagingSPTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 66, 5), )
if mibBuilder.loadTexts: bwFaxMessagingSPTable.setStatus('current')
if mibBuilder.loadTexts: bwFaxMessagingSPTable.setDescription('Counters for the Fax Messaging service measurements for service providers')
bwFaxMessagingGroupTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 66, 6), )
if mibBuilder.loadTexts: bwFaxMessagingGroupTable.setStatus('current')
if mibBuilder.loadTexts: bwFaxMessagingGroupTable.setDescription('Counters for the Fax Messaging service measurements for groups')
bwFaxMessagingSPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 66, 5, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwFaxMessagingSPIndex"))
if mibBuilder.loadTexts: bwFaxMessagingSPEntry.setStatus('current')
if mibBuilder.loadTexts: bwFaxMessagingSPEntry.setDescription('Each row contains the service counters for the Fax Messaging service for each service provider in the system')
bwFaxMessagingSPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 66, 5, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwFaxMessagingSPIndex.setStatus('current')
if mibBuilder.loadTexts: bwFaxMessagingSPIndex.setDescription('This column represents the index of the service provider in the system')
bwFaxMessagingSPID = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 66, 5, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwFaxMessagingSPID.setStatus('current')
if mibBuilder.loadTexts: bwFaxMessagingSPID.setDescription('This string represents a service provider ID')
bwFaxMessagingSPReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 66, 5, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwFaxMessagingSPReceived.setStatus('current')
if mibBuilder.loadTexts: bwFaxMessagingSPReceived.setDescription('This counter is incremented each time a user for a given service provider receives a fax.')
bwFaxMessagingSPReceptionFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 66, 5, 1, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwFaxMessagingSPReceptionFailure.setStatus('current')
if mibBuilder.loadTexts: bwFaxMessagingSPReceptionFailure.setDescription('This counter is incremented whenever the reception of a fax fails for a user for a given service provider.')
bwFaxMessagingSPPrinted = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 66, 5, 1, 5), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwFaxMessagingSPPrinted.setStatus('current')
if mibBuilder.loadTexts: bwFaxMessagingSPPrinted.setDescription('This counter is incremented each time a user for a given service provider sends a fax.')
bwFaxMessagingSPPrintingFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 66, 5, 1, 6), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwFaxMessagingSPPrintingFailure.setStatus('current')
if mibBuilder.loadTexts: bwFaxMessagingSPPrintingFailure.setDescription('This counter is incremented each time the printing of a fax over a fax number fails for a user for a given service provider.')
bwFaxMessagingGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 66, 6, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwFaxMessagingGroupIndex"))
if mibBuilder.loadTexts: bwFaxMessagingGroupEntry.setStatus('current')
if mibBuilder.loadTexts: bwFaxMessagingGroupEntry.setDescription('Each row contains the service counters for the Fax Messaging service for each group in the system')
bwFaxMessagingGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 66, 6, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwFaxMessagingGroupIndex.setStatus('current')
if mibBuilder.loadTexts: bwFaxMessagingGroupIndex.setDescription('This column represents the index of the group in the system')
bwFaxMessagingGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 66, 6, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwFaxMessagingGroupID.setStatus('current')
if mibBuilder.loadTexts: bwFaxMessagingGroupID.setDescription('This string represents a group ID')
bwFaxMessagingGroupReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 66, 6, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwFaxMessagingGroupReceived.setStatus('current')
if mibBuilder.loadTexts: bwFaxMessagingGroupReceived.setDescription('This counter is incremented each time a user for a given group receives a fax.')
bwFaxMessagingGroupReceptionFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 66, 6, 1, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwFaxMessagingGroupReceptionFailure.setStatus('current')
if mibBuilder.loadTexts: bwFaxMessagingGroupReceptionFailure.setDescription('This counter is incremented whenever the reception of a fax fails for a user for a given group.')
bwFaxMessagingGroupPrinted = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 66, 6, 1, 5), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwFaxMessagingGroupPrinted.setStatus('current')
if mibBuilder.loadTexts: bwFaxMessagingGroupPrinted.setDescription('This counter is incremented each time a user for a given group sends a fax.')
bwFaxMessagingGroupPrintingFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 66, 6, 1, 6), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwFaxMessagingGroupPrintingFailure.setStatus('current')
if mibBuilder.loadTexts: bwFaxMessagingGroupPrintingFailure.setDescription('This counter is incremented each time the printing of a fax over a fax number fails for a user for a given group.')
bwExtEmergencyRtgQuerySent = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 67, 1), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwExtEmergencyRtgQuerySent.setStatus('current')
if mibBuilder.loadTexts: bwExtEmergencyRtgQuerySent.setDescription('The counter shall be incremented each time the service results in a query being sent to the EN Server.')
bwExtEmergencyRtgQueryFailure = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 67, 2), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwExtEmergencyRtgQueryFailure.setStatus('current')
if mibBuilder.loadTexts: bwExtEmergencyRtgQueryFailure.setDescription('The counter shall be incremented each time the query is not successful, either because the EN Server is unreachable, or because the routing number is invalid.')
bwExtEmergencyRtgENServerTimeout = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 67, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwExtEmergencyRtgENServerTimeout.setStatus('current')
if mibBuilder.loadTexts: bwExtEmergencyRtgENServerTimeout.setDescription('The counter shall be incremented each time an active connection to an EN Server times out.')
bwTwoStageDialingInvocation = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 68, 1), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwTwoStageDialingInvocation.setStatus('current')
if mibBuilder.loadTexts: bwTwoStageDialingInvocation.setDescription('Number of times a user invokes the Two-Stage Dialing service.')
bwTwoStageDialingSPTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 68, 2), )
if mibBuilder.loadTexts: bwTwoStageDialingSPTable.setStatus('current')
if mibBuilder.loadTexts: bwTwoStageDialingSPTable.setDescription('Counters for the Two Stage Dialing service measurements for service providers')
bwTwoStageDialingGroupTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 68, 3), )
if mibBuilder.loadTexts: bwTwoStageDialingGroupTable.setStatus('current')
if mibBuilder.loadTexts: bwTwoStageDialingGroupTable.setDescription('Counters for the Two Stage Dialing service measurements for groups')
bwTwoStageDialingSPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 68, 2, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwTwoStageDialingSPIndex"))
if mibBuilder.loadTexts: bwTwoStageDialingSPEntry.setStatus('current')
if mibBuilder.loadTexts: bwTwoStageDialingSPEntry.setDescription('Each row contains the service counters for the Fax Messaging service for each service provider in the system')
bwTwoStageDialingSPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 68, 2, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwTwoStageDialingSPIndex.setStatus('current')
if mibBuilder.loadTexts: bwTwoStageDialingSPIndex.setDescription('This column represents the index of the Service Provider in the system')
bwTwoStageDialingSPID = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 68, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwTwoStageDialingSPID.setStatus('current')
if mibBuilder.loadTexts: bwTwoStageDialingSPID.setDescription('This string represents a Service Provider ID')
bwTwoStageDialingSPInvocation = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 68, 2, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwTwoStageDialingSPInvocation.setStatus('current')
if mibBuilder.loadTexts: bwTwoStageDialingSPInvocation.setDescription('Number of times a user invokes the Two-Stage Dialing service. There is one instance of this counter for each service provider defined in the system.')
bwTwoStageDialingGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 68, 3, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwTwoStageDialingGroupIndex"))
if mibBuilder.loadTexts: bwTwoStageDialingGroupEntry.setStatus('current')
if mibBuilder.loadTexts: bwTwoStageDialingGroupEntry.setDescription('Each row contains the service counters for the Fax Messaging service for each service provider in the system')
bwTwoStageDialingGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 68, 3, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwTwoStageDialingGroupIndex.setStatus('current')
if mibBuilder.loadTexts: bwTwoStageDialingGroupIndex.setDescription('This column represents the index of the Group in the system')
bwTwoStageDialingGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 68, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwTwoStageDialingGroupID.setStatus('current')
if mibBuilder.loadTexts: bwTwoStageDialingGroupID.setDescription('This string represents a Group ID')
bwTwoStageDialingGroupInvocation = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 68, 3, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwTwoStageDialingGroupInvocation.setStatus('current')
if mibBuilder.loadTexts: bwTwoStageDialingGroupInvocation.setDescription('Number of times a user invokes the Two-Stage Dialing service. There is one instance of this counter for each group defined in the system.')
bwCFNRcNumForwarded = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 69, 1), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCFNRcNumForwarded.setStatus('current')
if mibBuilder.loadTexts: bwCFNRcNumForwarded.setDescription('This is the number of times a call is redirected by the Call Forwarding Not Reachable service.')
bwCFNRcNumPhoneActivations = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 69, 2), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCFNRcNumPhoneActivations.setStatus('current')
if mibBuilder.loadTexts: bwCFNRcNumPhoneActivations.setDescription('This is the number of times the Call Forwarding Not Reachable service is activated with a FAC.')
bwCFNRcNumPhoneDeactivations = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 69, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCFNRcNumPhoneDeactivations.setStatus('current')
if mibBuilder.loadTexts: bwCFNRcNumPhoneDeactivations.setDescription('This is the number of times the Call Forwarding Not Reachable service is deactivated with a FAC.')
bwCFNRcDestinationChanged = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 69, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCFNRcDestinationChanged.setStatus('current')
if mibBuilder.loadTexts: bwCFNRcDestinationChanged.setDescription('This is the number of times the Call Forwarding Not Reachable service destination is modified with the activation FAC.')
bwCallForwardingNotReachableSPTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 69, 5), )
if mibBuilder.loadTexts: bwCallForwardingNotReachableSPTable.setStatus('current')
if mibBuilder.loadTexts: bwCallForwardingNotReachableSPTable.setDescription('This is the number of times a call is redirected by the Call Forwarding Not Reachable service. There is one instance of this counter for each service provider or enterprise defined in the system.')
bwCallForwardingNotReachableGroupTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 69, 6), )
if mibBuilder.loadTexts: bwCallForwardingNotReachableGroupTable.setStatus('current')
if mibBuilder.loadTexts: bwCallForwardingNotReachableGroupTable.setDescription('This is the number of times a call is redirected by the Call Forwarding Not Reachable service. There is one instance of this counter for each group defined in the system.')
bwCallForwardingNotReachableSPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 69, 5, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwCFNRcSPIndex"))
if mibBuilder.loadTexts: bwCallForwardingNotReachableSPEntry.setStatus('current')
if mibBuilder.loadTexts: bwCallForwardingNotReachableSPEntry.setDescription('Each row contains the service counters for the Call Forwarding Not Reachable service for each service provider in the system')
bwCFNRcSPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 69, 5, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwCFNRcSPIndex.setStatus('current')
if mibBuilder.loadTexts: bwCFNRcSPIndex.setDescription('This column represents the index of the Service Provider in the system.')
bwCFNRcSPID = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 69, 5, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwCFNRcSPID.setStatus('current')
if mibBuilder.loadTexts: bwCFNRcSPID.setDescription('This string represents a Service Provider ID.')
bwCFNRcSPNumForwarded = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 69, 5, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCFNRcSPNumForwarded.setStatus('current')
if mibBuilder.loadTexts: bwCFNRcSPNumForwarded.setDescription('This is the number of times a call is redirected by the Call Forwarding Not Reachable service. There is one instance of this counter for each service provider or enterprise defined in the system.')
bwCFNRcSPNumPhoneActivations = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 69, 5, 1, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCFNRcSPNumPhoneActivations.setStatus('current')
if mibBuilder.loadTexts: bwCFNRcSPNumPhoneActivations.setDescription('This is the number of times the Call Forwarding Not Reachable service is activated with a FAC. There is one instance of this counter for each service provider or enterprise defined in the system.')
bwCFNRcSPNumPhoneDeactivations = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 69, 5, 1, 5), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCFNRcSPNumPhoneDeactivations.setStatus('current')
if mibBuilder.loadTexts: bwCFNRcSPNumPhoneDeactivations.setDescription('This is the number of times the Call Forwarding Not Reachable service is deactivated with a FAC. There is one instance of this counter for each service provider or enterprise defined in the system.')
bwCFNRcSPDestinationChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 69, 5, 1, 6), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCFNRcSPDestinationChanged.setStatus('current')
if mibBuilder.loadTexts: bwCFNRcSPDestinationChanged.setDescription('This is the number of times the Call Forwarding Not Reachable service destination is modified with the activation FAC. There is one instance of this counter for each service provider or enterprise defined in the system.')
bwCallForwardingNotReachableGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 69, 6, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwCFNRcGroupIndex"))
if mibBuilder.loadTexts: bwCallForwardingNotReachableGroupEntry.setStatus('current')
if mibBuilder.loadTexts: bwCallForwardingNotReachableGroupEntry.setDescription('Each row contains the service counters for the Call Forwarding Not Reachable service for each group in the system')
bwCFNRcGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 69, 6, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwCFNRcGroupIndex.setStatus('current')
if mibBuilder.loadTexts: bwCFNRcGroupIndex.setDescription('This column represents the index of the Group in the system.')
bwCFNRcGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 69, 6, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwCFNRcGroupID.setStatus('current')
if mibBuilder.loadTexts: bwCFNRcGroupID.setDescription('This string represents a Group ID.')
bwCFNRcGroupNumForwarded = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 69, 6, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCFNRcGroupNumForwarded.setStatus('current')
if mibBuilder.loadTexts: bwCFNRcGroupNumForwarded.setDescription('This is the number of times a call is redirected by the Call Forwarding Not Reachable service. There is one instance of this counter for each group defined in the system.')
bwCFNRcGroupNumPhoneActivations = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 69, 6, 1, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCFNRcGroupNumPhoneActivations.setStatus('current')
if mibBuilder.loadTexts: bwCFNRcGroupNumPhoneActivations.setDescription('This is the number of times the Call Forwarding Not Reachable service is activated with a FAC. There is one instance of this counter for each group defined in the system.')
bwCFNRcGroupNumPhoneDeactivations = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 69, 6, 1, 5), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCFNRcGroupNumPhoneDeactivations.setStatus('current')
if mibBuilder.loadTexts: bwCFNRcGroupNumPhoneDeactivations.setDescription('This is the number of times the Call Forwarding Not Reachable service is deactivated with a FAC. There is one instance of this counter for each group defined in the system.')
bwCFNRcGroupDestinationChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 69, 6, 1, 6), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCFNRcGroupDestinationChanged.setStatus('current')
if mibBuilder.loadTexts: bwCFNRcGroupDestinationChanged.setDescription('This is the number of times the Call Forwarding Not Reachable service destination is modified with the activation FAC. There is one instance of this counter for each group defined in the system.')
bwMWISMSSent = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 70, 1), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwMWISMSSent.setStatus('current')
if mibBuilder.loadTexts: bwMWISMSSent.setDescription('Number of SMS notifications sent for all users.')
bwMWIDeliveryToMobileSPTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 70, 2), )
if mibBuilder.loadTexts: bwMWIDeliveryToMobileSPTable.setStatus('current')
if mibBuilder.loadTexts: bwMWIDeliveryToMobileSPTable.setDescription('This is the number of times a SMS is sent by the Message Waiting Indicator Delivery to Mobile service. There is one instance of this counter for each service provider or enterprise defined in the system.')
bwMWIDeliveryToMobileGroupTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 70, 3), )
if mibBuilder.loadTexts: bwMWIDeliveryToMobileGroupTable.setStatus('current')
if mibBuilder.loadTexts: bwMWIDeliveryToMobileGroupTable.setDescription('This is the number of times a SMS is sent by the Message Waiting Indicator Delivery to Mobile service. There is one instance of this counter for each group defined in the system.')
bwMWIDeliveryToMobileSPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 70, 2, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwMWISPIndex"))
if mibBuilder.loadTexts: bwMWIDeliveryToMobileSPEntry.setStatus('current')
if mibBuilder.loadTexts: bwMWIDeliveryToMobileSPEntry.setDescription('Each row contains the service counters for the Message Waiting Indicator Delivery to Mobile service for each service provider in the system')
bwMWISPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 70, 2, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwMWISPIndex.setStatus('current')
if mibBuilder.loadTexts: bwMWISPIndex.setDescription('This column represents the index of the Service Provider in the system.')
bwMWISPID = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 70, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwMWISPID.setStatus('current')
if mibBuilder.loadTexts: bwMWISPID.setDescription('This string represents a Service Provider ID.')
bwSPMWISMSSent = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 70, 2, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSPMWISMSSent.setStatus('current')
if mibBuilder.loadTexts: bwSPMWISMSSent.setDescription('Same as bwMWISMSSent, per service provider.')
bwMWIDeliveryToMobileGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 70, 3, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwMWIGroupIndex"))
if mibBuilder.loadTexts: bwMWIDeliveryToMobileGroupEntry.setStatus('current')
if mibBuilder.loadTexts: bwMWIDeliveryToMobileGroupEntry.setDescription('Each row contains the service counters for the Message Waiting Indicator Delivery to Mobile service for each service provider in the system')
bwMWIGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 70, 3, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwMWIGroupIndex.setStatus('current')
if mibBuilder.loadTexts: bwMWIGroupIndex.setDescription('This column represents the index of the Group in the system.')
bwMWIGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 70, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwMWIGroupID.setStatus('current')
if mibBuilder.loadTexts: bwMWIGroupID.setDescription('This string represents a Group ID.')
bwGroupMWISMSSent = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 70, 3, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwGroupMWISMSSent.setStatus('current')
if mibBuilder.loadTexts: bwGroupMWISMSSent.setDescription('Same as bwMWISMSSent, per service provider.')
bwSCASPTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 71, 1), )
if mibBuilder.loadTexts: bwSCASPTable.setStatus('current')
if mibBuilder.loadTexts: bwSCASPTable.setDescription('This is the number of times a SMS is sent by the Message Waiting Indicator Delivery to Mobile service. There is one instance of this counter for each service provider or enterprise defined in the system.')
bwSCAGroupTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 71, 2), )
if mibBuilder.loadTexts: bwSCAGroupTable.setStatus('current')
if mibBuilder.loadTexts: bwSCAGroupTable.setDescription('This is the number of times a SMS is sent by the Message Waiting Indicator Delivery to Mobile service. There is one instance of this counter for each group defined in the system.')
bwSCACallRetrieveSuccess = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 71, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSCACallRetrieveSuccess.setStatus('current')
if mibBuilder.loadTexts: bwSCACallRetrieveSuccess.setDescription('This is the number of times a user successfully retrieves a call using the SCA Call Retrieve feature.')
bwSCALocationControlActivationSuccess = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 71, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSCALocationControlActivationSuccess.setStatus('current')
if mibBuilder.loadTexts: bwSCALocationControlActivationSuccess.setDescription('This is the number of times a user activates an alternate location using the SCA Location Control feature.')
bwSCALocationControlDeactivationSuccess = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 71, 5), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSCALocationControlDeactivationSuccess.setStatus('current')
if mibBuilder.loadTexts: bwSCALocationControlDeactivationSuccess.setDescription('This is the number of times a user deactivates an alternate location using the SCA Location Control feature.')
bwSCASPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 71, 1, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwSCASPIndex"))
if mibBuilder.loadTexts: bwSCASPEntry.setStatus('current')
if mibBuilder.loadTexts: bwSCASPEntry.setDescription('Each row contains the service counters for the Shared Call Appearance service for each service provider in the system')
bwSCASPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 71, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwSCASPIndex.setStatus('current')
if mibBuilder.loadTexts: bwSCASPIndex.setDescription('This column represents the index of the Service Provider in the system.')
bwSCASPID = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 71, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwSCASPID.setStatus('current')
if mibBuilder.loadTexts: bwSCASPID.setDescription('This string represents a Service Provider ID.')
bwSCASPCallRetrieveSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 71, 1, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSCASPCallRetrieveSuccess.setStatus('current')
if mibBuilder.loadTexts: bwSCASPCallRetrieveSuccess.setDescription('The number of times a user successfully retrieves a call using the SCA Call Retrieve feature. There is one instance of this counter for each service provider defined in the system.')
bwSCASPLocationControlActivationSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 71, 1, 1, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSCASPLocationControlActivationSuccess.setStatus('current')
if mibBuilder.loadTexts: bwSCASPLocationControlActivationSuccess.setDescription('The number of times a user activates an alternate location using the SCA Location Control feature. There is one instance of this counter for each service provider defined in the system.')
bwSCASPLocationControlDeactivationSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 71, 1, 1, 5), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSCASPLocationControlDeactivationSuccess.setStatus('current')
if mibBuilder.loadTexts: bwSCASPLocationControlDeactivationSuccess.setDescription('The number of times a user deactivates an alternate location using the SCA Location Control feature. There is one instance of this counter for each service provider defined in the system.')
bwSCAGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 71, 2, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwSCAGroupIndex"))
if mibBuilder.loadTexts: bwSCAGroupEntry.setStatus('current')
if mibBuilder.loadTexts: bwSCAGroupEntry.setDescription('Each row contains the service counters for the Shared Call Appearance service for each group in the system')
bwSCAGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 71, 2, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwSCAGroupIndex.setStatus('current')
if mibBuilder.loadTexts: bwSCAGroupIndex.setDescription('This column represents the index of the Group in the system.')
bwSCAGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 71, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwSCAGroupID.setStatus('current')
if mibBuilder.loadTexts: bwSCAGroupID.setDescription('This string represents a Group ID.')
bwSCAGroupCallRetrieveSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 71, 2, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSCAGroupCallRetrieveSuccess.setStatus('current')
if mibBuilder.loadTexts: bwSCAGroupCallRetrieveSuccess.setDescription('The number of times a user successfully retrieves a call using the SCA Call Retrieve feature. There is one instance of this counter for each group defined in the system.')
bwSCAGroupLocationControlActivationSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 71, 2, 1, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSCAGroupLocationControlActivationSuccess.setStatus('current')
if mibBuilder.loadTexts: bwSCAGroupLocationControlActivationSuccess.setDescription('The number of times a user activates an alternate location using the SCA Location Control feature. There is one instance of this counter for each group defined in the system.')
bwSCAGroupLocationControlDeactivationSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 71, 2, 1, 5), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSCAGroupLocationControlDeactivationSuccess.setStatus('current')
if mibBuilder.loadTexts: bwSCAGroupLocationControlDeactivationSuccess.setDescription('The number of times a user deactivates an alternate location using the SCA Location Control feature. There is one instance of this counter for each group defined in the system.')
bwExternalCustomRingbackAttempts = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 72, 1), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwExternalCustomRingbackAttempts.setStatus('current')
if mibBuilder.loadTexts: bwExternalCustomRingbackAttempts.setDescription('This is the number of attempts made to play ringback from an external custom ringback source.')
bwExternalCustomRingbackFailures = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 72, 2), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwExternalCustomRingbackFailures.setStatus('current')
if mibBuilder.loadTexts: bwExternalCustomRingbackFailures.setDescription('This is the number of times an attempt to play ringback from an external custom ringback source failed, due to timeout or error.')
bwExternalCustomRingbackSPTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 72, 3), )
if mibBuilder.loadTexts: bwExternalCustomRingbackSPTable.setStatus('current')
if mibBuilder.loadTexts: bwExternalCustomRingbackSPTable.setDescription('This table contains the counters for External Custom Ringback service measurements for service providers.')
bwExternalCustomRingbackGroupTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 72, 4), )
if mibBuilder.loadTexts: bwExternalCustomRingbackGroupTable.setStatus('current')
if mibBuilder.loadTexts: bwExternalCustomRingbackGroupTable.setDescription('This table contains the counters for External Custom Ringback service measurements for groups.')
bwExternalCustomRingbackSPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 72, 3, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwExternalCustomRingbackSPIndex"))
if mibBuilder.loadTexts: bwExternalCustomRingbackSPEntry.setStatus('current')
if mibBuilder.loadTexts: bwExternalCustomRingbackSPEntry.setDescription('Each row contains the service counters for the External Custom Ringback service for each service provider in the system')
bwExternalCustomRingbackSPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 72, 3, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwExternalCustomRingbackSPIndex.setStatus('current')
if mibBuilder.loadTexts: bwExternalCustomRingbackSPIndex.setDescription('This column represents the index of the Service Provider in the system.')
bwExternalCustomRingbackSPID = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 72, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwExternalCustomRingbackSPID.setStatus('current')
if mibBuilder.loadTexts: bwExternalCustomRingbackSPID.setDescription('This string represents a Service Provider ID.')
bwExternalCustomRingbackSPAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 72, 3, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwExternalCustomRingbackSPAttempts.setStatus('current')
if mibBuilder.loadTexts: bwExternalCustomRingbackSPAttempts.setDescription('This is the number of attempts made to play ringback from an external custom ringback source for a given service provider. There is one instance of this counter for each service provider or enterprise defined in the system.')
bwExternalCustomRingbackSPFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 72, 3, 1, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwExternalCustomRingbackSPFailures.setStatus('current')
if mibBuilder.loadTexts: bwExternalCustomRingbackSPFailures.setDescription('This is the number of times an attempt to play ringback from an external custom ringback source failed, due to timeout or error, for a given service provider. There is one instance of this counter for each service provider or enterprise defined in the system.')
bwExternalCustomRingbackGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 72, 4, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwExternalCustomRingbackGroupIndex"))
if mibBuilder.loadTexts: bwExternalCustomRingbackGroupEntry.setStatus('current')
if mibBuilder.loadTexts: bwExternalCustomRingbackGroupEntry.setDescription('Each row contains the service counters for the External Custom Ringback service for each group in the system')
bwExternalCustomRingbackGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 72, 4, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwExternalCustomRingbackGroupIndex.setStatus('current')
if mibBuilder.loadTexts: bwExternalCustomRingbackGroupIndex.setDescription('This column represents the index of the Group in the system.')
bwExternalCustomRingbackGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 72, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwExternalCustomRingbackGroupID.setStatus('current')
if mibBuilder.loadTexts: bwExternalCustomRingbackGroupID.setDescription('This string represents a Group ID.')
bwExternalCustomRingbackGroupAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 72, 4, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwExternalCustomRingbackGroupAttempts.setStatus('current')
if mibBuilder.loadTexts: bwExternalCustomRingbackGroupAttempts.setDescription('This is the number of attempts made to play ringback from an external custom ringback source for a given group. There is one instance of this counter for each group defined in the system.')
bwExternalCustomRingbackGroupFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 72, 4, 1, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwExternalCustomRingbackGroupFailures.setStatus('current')
if mibBuilder.loadTexts: bwExternalCustomRingbackGroupFailures.setDescription('This is the number of times an attempt to play ringback from an external custom ringback source failed, due to timeout or error, for a given group. There is one instance of this counter for each group defined in the system.')
bwInCallServiceActivationSPTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 73, 1), )
if mibBuilder.loadTexts: bwInCallServiceActivationSPTable.setStatus('current')
if mibBuilder.loadTexts: bwInCallServiceActivationSPTable.setDescription('Each row contains the service counters for the In Call Service Activation service for each service provider in the system')
bwInCallServiceActivationGroupTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 73, 2), )
if mibBuilder.loadTexts: bwInCallServiceActivationGroupTable.setStatus('current')
if mibBuilder.loadTexts: bwInCallServiceActivationGroupTable.setDescription('Each row contains the service counters for the In Call Service Activation service for each group in the system')
bwICSAMonitoringStarted = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 73, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwICSAMonitoringStarted.setStatus('current')
if mibBuilder.loadTexts: bwICSAMonitoringStarted.setDescription('This is the number of times a media path is monitored for Flash Tone digits by the In Call Service Activation service.')
bwICSAMonitoringFailure = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 73, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwICSAMonitoringFailure.setStatus('current')
if mibBuilder.loadTexts: bwICSAMonitoringFailure.setDescription('This is the number of times media path monitoring fails to be started by the In Call Service Activation service.')
bwICSAFlashDigitsDetected = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 73, 5), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwICSAFlashDigitsDetected.setStatus('current')
if mibBuilder.loadTexts: bwICSAFlashDigitsDetected.setDescription('This is the number of times the In Call Service Activation service detects the Flash digit string.')
bwInCallServiceActivationSPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 73, 1, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwICSASPIndex"))
if mibBuilder.loadTexts: bwInCallServiceActivationSPEntry.setStatus('current')
if mibBuilder.loadTexts: bwInCallServiceActivationSPEntry.setDescription('Each row contains the service counters for the In Call Service Activation service for each service provider in the system')
bwICSASPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 73, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwICSASPIndex.setStatus('current')
if mibBuilder.loadTexts: bwICSASPIndex.setDescription('This column represents the index of the Service Provider in the system.')
bwICSASPID = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 73, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwICSASPID.setStatus('current')
if mibBuilder.loadTexts: bwICSASPID.setDescription('This string represents a Service Provider ID.')
bwICSASPMonitoringStarted = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 73, 1, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwICSASPMonitoringStarted.setStatus('current')
if mibBuilder.loadTexts: bwICSASPMonitoringStarted.setDescription('This is the number of times a media path is monitored for Flash Tone digits by the In Call Service Activation service. There is one instance of this counter for each service provider or enterprise defined in the system.')
bwICSASPMonitoringFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 73, 1, 1, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwICSASPMonitoringFailure.setStatus('current')
if mibBuilder.loadTexts: bwICSASPMonitoringFailure.setDescription('This is the number of times media path monitoring fails to be started by the In Call Service Activation service. There is one instance of this counter for each service provider or enterprise defined in the system.')
bwICSASPFlashDigitsDetected = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 73, 1, 1, 5), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwICSASPFlashDigitsDetected.setStatus('current')
if mibBuilder.loadTexts: bwICSASPFlashDigitsDetected.setDescription('This is the number of times the In Call Service Activation service detects the Flash digit string. There is one instance of this counter for each service provider or enterprise defined in the system.')
bwInCallServiceActivationGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 73, 2, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwICSAGroupIndex"))
if mibBuilder.loadTexts: bwInCallServiceActivationGroupEntry.setStatus('current')
if mibBuilder.loadTexts: bwInCallServiceActivationGroupEntry.setDescription('Each row contains the service counters for the In Call Service Activation service for each group in the system')
bwICSAGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 73, 2, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwICSAGroupIndex.setStatus('current')
if mibBuilder.loadTexts: bwICSAGroupIndex.setDescription('This column represents the index of the Group in the system.')
bwICSAGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 73, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwICSAGroupID.setStatus('current')
if mibBuilder.loadTexts: bwICSAGroupID.setDescription('This string represents a Group ID.')
bwICSAGroupMonitoringStarted = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 73, 2, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwICSAGroupMonitoringStarted.setStatus('current')
if mibBuilder.loadTexts: bwICSAGroupMonitoringStarted.setDescription('This is the number of times a media path is monitored for Flash Tone digits by the In Call Service Activation service. There is one instance of this counter for each service provider or enterprise defined in the system.')
bwICSAGroupMonitoringFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 73, 2, 1, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwICSAGroupMonitoringFailure.setStatus('current')
if mibBuilder.loadTexts: bwICSAGroupMonitoringFailure.setDescription('This is the number of times media path monitoring fails to be started by the In Call Service Activation service. There is one instance of this counter for each group defined in the system.')
bwICSAGroupFlashDigitsDetected = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 73, 2, 1, 5), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwICSAGroupFlashDigitsDetected.setStatus('current')
if mibBuilder.loadTexts: bwICSAGroupFlashDigitsDetected.setDescription('This is the number of times the In Call Service Activation service detects the Flash digit string. There is one instance of this counter for each group defined in the system.')
bwLocationControlSPTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 75, 1), )
if mibBuilder.loadTexts: bwLocationControlSPTable.setStatus('current')
if mibBuilder.loadTexts: bwLocationControlSPTable.setDescription('Each row contains the service counters for the Location Control service for each service provider in the system')
bwLocationControlGroupTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 75, 2), )
if mibBuilder.loadTexts: bwLocationControlGroupTable.setStatus('current')
if mibBuilder.loadTexts: bwLocationControlGroupTable.setDescription('Each row contains the service counters for the Location Control service for each group in the system')
bwLocationControlActivationSuccess = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 75, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwLocationControlActivationSuccess.setStatus('current')
if mibBuilder.loadTexts: bwLocationControlActivationSuccess.setDescription('This is the number of times a user activates an alternate or BroadWorks Anywhere location using the Location Control feature.')
bwLocationControlDeactivationSuccess = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 75, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwLocationControlDeactivationSuccess.setStatus('current')
if mibBuilder.loadTexts: bwLocationControlDeactivationSuccess.setDescription('This is the number of times a user deactivates an alternate or BroadWorks Anywhere location using the Location Control feature.')
bwLocationControlSPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 75, 1, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwLocationControlSPIndex"))
if mibBuilder.loadTexts: bwLocationControlSPEntry.setStatus('current')
if mibBuilder.loadTexts: bwLocationControlSPEntry.setDescription('Each row contains the service counters for the Location Control service for each service provider in the system')
bwLocationControlSPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 75, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwLocationControlSPIndex.setStatus('current')
if mibBuilder.loadTexts: bwLocationControlSPIndex.setDescription('This column represents the index of the Service Provider in the system.')
bwLocationControlSPID = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 75, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwLocationControlSPID.setStatus('current')
if mibBuilder.loadTexts: bwLocationControlSPID.setDescription('This string represents a Service Provider ID.')
bwLocationControlSPActivationSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 75, 1, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwLocationControlSPActivationSuccess.setStatus('current')
if mibBuilder.loadTexts: bwLocationControlSPActivationSuccess.setDescription('This is the number of times a user activates an alternate or BroadWorks Anywhere location using the Location Control feature. There is one instance of this counter for each service provider defined in the system.')
bwLocationControlSPDeactivationSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 75, 1, 1, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwLocationControlSPDeactivationSuccess.setStatus('current')
if mibBuilder.loadTexts: bwLocationControlSPDeactivationSuccess.setDescription('This is the number of times a user deactivates an alternate or BroadWorks Anywhere location using the Location Control feature. There is one instance of this counter for each service provider defined in the system.')
bwLocationControlGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 75, 2, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwLocationControlGroupIndex"))
if mibBuilder.loadTexts: bwLocationControlGroupEntry.setStatus('current')
if mibBuilder.loadTexts: bwLocationControlGroupEntry.setDescription('Each row contains the service counters for the Location Control service for each group in the system')
bwLocationControlGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 75, 2, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwLocationControlGroupIndex.setStatus('current')
if mibBuilder.loadTexts: bwLocationControlGroupIndex.setDescription('This column represents the index of the Group in the system.')
bwLocationControlGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 75, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwLocationControlGroupID.setStatus('current')
if mibBuilder.loadTexts: bwLocationControlGroupID.setDescription('This string represents a Group ID.')
bwLocationControlGroupActivationSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 75, 2, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwLocationControlGroupActivationSuccess.setStatus('current')
if mibBuilder.loadTexts: bwLocationControlGroupActivationSuccess.setDescription('This is the number of times a user activates an alternate or BroadWorks Anywhere location using the Location Control feature. There is one instance of this counter for each group defined in the system.')
bwLocationControlGroupDeactivationSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 75, 2, 1, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwLocationControlGroupDeactivationSuccess.setStatus('current')
if mibBuilder.loadTexts: bwLocationControlGroupDeactivationSuccess.setDescription('This is the number of times a user deactivates an alternate or BroadWorks Anywhere location using the Location Control feature. There is one instance of this counter for each group defined in the system.')
bwCallRetrieveSPTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 76, 1), )
if mibBuilder.loadTexts: bwCallRetrieveSPTable.setStatus('current')
if mibBuilder.loadTexts: bwCallRetrieveSPTable.setDescription('Each row contains the service counters for the Call Retrieve service for each service provider in the system')
bwCallRetrieveGroupTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 76, 2), )
if mibBuilder.loadTexts: bwCallRetrieveGroupTable.setStatus('current')
if mibBuilder.loadTexts: bwCallRetrieveGroupTable.setDescription('Each row contains the service counters for the Call Retrieve service for each group in the system')
bwCallRetrieveSuccess = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 76, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCallRetrieveSuccess.setStatus('current')
if mibBuilder.loadTexts: bwCallRetrieveSuccess.setDescription('This is the number of times a user successfully retrieves a call using the Call Retrieve feature.')
bwCallRetrieveSPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 76, 1, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwCallRetrieveSPIndex"))
if mibBuilder.loadTexts: bwCallRetrieveSPEntry.setStatus('current')
if mibBuilder.loadTexts: bwCallRetrieveSPEntry.setDescription('Each row contains the service counters for the Call Retrieve service for each service provider in the system')
bwCallRetrieveSPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 76, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwCallRetrieveSPIndex.setStatus('current')
if mibBuilder.loadTexts: bwCallRetrieveSPIndex.setDescription('This column represents the index of the Service Provider in the system.')
bwCallRetrieveSPID = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 76, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwCallRetrieveSPID.setStatus('current')
if mibBuilder.loadTexts: bwCallRetrieveSPID.setDescription('This string represents a Service Provider ID.')
bwCallRetrieveSPSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 76, 1, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCallRetrieveSPSuccess.setStatus('current')
if mibBuilder.loadTexts: bwCallRetrieveSPSuccess.setDescription('The number of times a user successfully retrieves a call using the Call Retrieve feature. There is one instance of this counter for each service provider defined in the system.')
bwCallRetrieveGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 76, 2, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwCallRetrieveGroupIndex"))
if mibBuilder.loadTexts: bwCallRetrieveGroupEntry.setStatus('current')
if mibBuilder.loadTexts: bwCallRetrieveGroupEntry.setDescription('Each row contains the service counters for the Call Retrieve service for each service provider in the system')
bwCallRetrieveGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 76, 2, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwCallRetrieveGroupIndex.setStatus('current')
if mibBuilder.loadTexts: bwCallRetrieveGroupIndex.setDescription('This column represents the index of the Group in the system.')
bwCallRetrieveGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 76, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwCallRetrieveGroupID.setStatus('current')
if mibBuilder.loadTexts: bwCallRetrieveGroupID.setDescription('This string represents a Group ID.')
bwCallRetrieveGroupSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 76, 2, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCallRetrieveGroupSuccess.setStatus('current')
if mibBuilder.loadTexts: bwCallRetrieveGroupSuccess.setDescription('The number of times a user successfully retrieves a call using the Call Retrieve feature. There is one instance of this counter for each group defined in the system.')
bwBroadWorksAnywhereSPTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 77, 1), )
if mibBuilder.loadTexts: bwBroadWorksAnywhereSPTable.setStatus('current')
if mibBuilder.loadTexts: bwBroadWorksAnywhereSPTable.setDescription('Each row contains the service counters for the BroadWorks Anywhere service for each service provider in the system')
bwBroadWorksAnywhereGroupTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 77, 2), )
if mibBuilder.loadTexts: bwBroadWorksAnywhereGroupTable.setStatus('current')
if mibBuilder.loadTexts: bwBroadWorksAnywhereGroupTable.setDescription('Each row contains the service counters for the BroadWorks Anywhere service for each group in the system')
bwBACallOriginations = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 77, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwBACallOriginations.setStatus('current')
if mibBuilder.loadTexts: bwBACallOriginations.setDescription('This is the number of times a user originates a call through the BroadWorks Anywhere Portal.')
bwBACallTerminations = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 77, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwBACallTerminations.setStatus('current')
if mibBuilder.loadTexts: bwBACallTerminations.setDescription('This is the number of times a call leg is extended to a BroadWorks Anywhere location. ')
bwBroadWorksAnywhereSPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 77, 1, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwBroadWorksAnywhereSPIndex"))
if mibBuilder.loadTexts: bwBroadWorksAnywhereSPEntry.setStatus('current')
if mibBuilder.loadTexts: bwBroadWorksAnywhereSPEntry.setDescription('Each row contains the service counters for the BroadWorks Anywhere service for each service provider in the system')
bwBroadWorksAnywhereSPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 77, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwBroadWorksAnywhereSPIndex.setStatus('current')
if mibBuilder.loadTexts: bwBroadWorksAnywhereSPIndex.setDescription('This column represents the index of the Service Provider in the system.')
bwBroadWorksAnywhereSPID = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 77, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwBroadWorksAnywhereSPID.setStatus('current')
if mibBuilder.loadTexts: bwBroadWorksAnywhereSPID.setDescription('This string represents a Service Provider ID.')
bwBASPCallOriginations = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 77, 1, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwBASPCallOriginations.setStatus('current')
if mibBuilder.loadTexts: bwBASPCallOriginations.setDescription('This is the number of times a user originates a call through the BroadWorks Anywhere Portal. There is one instance of this counter for each service provider or enterprise defined in the system.')
bwBASPCallTerminations = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 77, 1, 1, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwBASPCallTerminations.setStatus('current')
if mibBuilder.loadTexts: bwBASPCallTerminations.setDescription('This is the number of times a call leg is extended to a BroadWorks Anywhere location. There is one instance of this counter for each service provider or enterprise defined in the system.')
bwBroadWorksAnywhereGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 77, 2, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwBroadWorksAnywhereGroupIndex"))
if mibBuilder.loadTexts: bwBroadWorksAnywhereGroupEntry.setStatus('current')
if mibBuilder.loadTexts: bwBroadWorksAnywhereGroupEntry.setDescription('Each row contains the service counters for the BroadWorks Anywhere service for each service provider in the system')
bwBroadWorksAnywhereGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 77, 2, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwBroadWorksAnywhereGroupIndex.setStatus('current')
if mibBuilder.loadTexts: bwBroadWorksAnywhereGroupIndex.setDescription('This column represents the index of the Group in the system.')
bwBroadWorksAnywhereGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 77, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwBroadWorksAnywhereGroupID.setStatus('current')
if mibBuilder.loadTexts: bwBroadWorksAnywhereGroupID.setDescription('This string represents a Group ID.')
bwBAGroupCallOriginations = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 77, 2, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwBAGroupCallOriginations.setStatus('current')
if mibBuilder.loadTexts: bwBAGroupCallOriginations.setDescription('This is the number of times a user originates a call through the BroadWorks Anywhere Portal. There is one instance of this counter for each group defined in the system.')
bwBAGroupCallTerminations = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 11, 77, 2, 1, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwBAGroupCallTerminations.setStatus('current')
if mibBuilder.loadTexts: bwBAGroupCallTerminations.setDescription('This is the number of times a call leg is extended to a BroadWorks Anywhere location. There is one instance of this counter for each group defined in the system.')
bwNSqueryRequestsTransmitted = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 12, 1, 1), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwNSqueryRequestsTransmitted.setStatus('current')
if mibBuilder.loadTexts: bwNSqueryRequestsTransmitted.setDescription('incremented each time a Media Server selection query transmission is attempted toward a Network Server')
bwNSqueryRequestsRetransmitted = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 12, 1, 2), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwNSqueryRequestsRetransmitted.setStatus('obsolete')
if mibBuilder.loadTexts: bwNSqueryRequestsRetransmitted.setDescription('incremented each time a Media Server selection query transmission is retransmitted toward a Network Server This object is obsolete. Retransmission control through SIP, used to be controlled over MSS protocol.')
bwNSqueryCommFailures = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 12, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwNSqueryCommFailures.setStatus('current')
if mibBuilder.loadTexts: bwNSqueryCommFailures.setDescription('This counter is incremented when Media Server selection query has been transmitted toward all available Network Servers and no response has been received from any Network Server.')
bwNbInvalidMessagesReceived = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 13, 1, 6), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwNbInvalidMessagesReceived.setStatus('current')
if mibBuilder.loadTexts: bwNbInvalidMessagesReceived.setDescription('This counter is incremented when an invalid NRS message is received (either the header was valid but the body was not, or the message was pure junk)')
bwNbRequestsReceived = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 13, 1, 7), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwNbRequestsReceived.setStatus('current')
if mibBuilder.loadTexts: bwNbRequestsReceived.setDescription('This counter is incremented when a NRS request is received')
bwNbResponsesReceived = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 13, 1, 8), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwNbResponsesReceived.setStatus('current')
if mibBuilder.loadTexts: bwNbResponsesReceived.setDescription('This counter is incremented when a NRS response is received')
bwNbErrorsReceived = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 13, 1, 9), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwNbErrorsReceived.setStatus('current')
if mibBuilder.loadTexts: bwNbErrorsReceived.setDescription('This counter is incremented when a NRS error is received')
bwNbRequestsSent = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 13, 1, 10), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwNbRequestsSent.setStatus('current')
if mibBuilder.loadTexts: bwNbRequestsSent.setDescription('This counter is incremented when a NRS request is sent')
bwNbResponsesSent = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 13, 1, 11), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwNbResponsesSent.setStatus('current')
if mibBuilder.loadTexts: bwNbResponsesSent.setDescription('This counter is incremented when a NRS response is sent')
bwNbErrorsSent = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 13, 1, 12), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwNbErrorsSent.setStatus('current')
if mibBuilder.loadTexts: bwNbErrorsSent.setDescription('This counter is incremented when a NRS error is sent')
bwNbRequestsResent = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 13, 1, 13), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwNbRequestsResent.setStatus('current')
if mibBuilder.loadTexts: bwNbRequestsResent.setDescription('This counter is incremented when a NRS request is re-sent')
bwNbResponsesResent = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 13, 1, 14), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwNbResponsesResent.setStatus('current')
if mibBuilder.loadTexts: bwNbResponsesResent.setDescription('This counter is incremented when a NRS response is re-sent')
bwNbRequestsUnanswered = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 13, 1, 15), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwNbRequestsUnanswered.setStatus('current')
if mibBuilder.loadTexts: bwNbRequestsUnanswered.setDescription('This counter is incremented when a NRS request remains unanswered after a series of retries')
bwNRSStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 13, 1, 16), )
if mibBuilder.loadTexts: bwNRSStatsTable.setStatus('current')
if mibBuilder.loadTexts: bwNRSStatsTable.setDescription('This table contains the counters for all NRS protocols')
bwNRSStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 13, 1, 16, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwNRSStatsTableIndex"))
if mibBuilder.loadTexts: bwNRSStatsEntry.setStatus('current')
if mibBuilder.loadTexts: bwNRSStatsEntry.setDescription('This row contains information on a particular NRS protocol')
bwNRSStatsTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 13, 1, 16, 1, 1), Unsigned32())
if mibBuilder.loadTexts: bwNRSStatsTableIndex.setStatus('current')
if mibBuilder.loadTexts: bwNRSStatsTableIndex.setDescription('This integer represents a NRS protocol status code. The rest of the information in this row is related to this value.')
bwNRSStatsTableProtocolName = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 13, 1, 16, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwNRSStatsTableProtocolName.setStatus('current')
if mibBuilder.loadTexts: bwNRSStatsTableProtocolName.setDescription('This string represents the NRS protocol name')
bwNRSStatsTableNbRequestsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 13, 1, 16, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwNRSStatsTableNbRequestsReceived.setStatus('current')
if mibBuilder.loadTexts: bwNRSStatsTableNbRequestsReceived.setDescription('This counter is incremented when a request is received')
bwNRSStatsTableNbResponsesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 13, 1, 16, 1, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwNRSStatsTableNbResponsesReceived.setStatus('current')
if mibBuilder.loadTexts: bwNRSStatsTableNbResponsesReceived.setDescription('This counter is incremented when a response is received')
bwNRSStatsTableNbErrorsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 13, 1, 16, 1, 5), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwNRSStatsTableNbErrorsReceived.setStatus('current')
if mibBuilder.loadTexts: bwNRSStatsTableNbErrorsReceived.setDescription('This counter is incremented when an error is received')
bwNRSStatsTableNbRequestsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 13, 1, 16, 1, 6), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwNRSStatsTableNbRequestsSent.setStatus('current')
if mibBuilder.loadTexts: bwNRSStatsTableNbRequestsSent.setDescription('This counter is incremented when a request is sent')
bwNRSStatsTableNbResponsesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 13, 1, 16, 1, 7), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwNRSStatsTableNbResponsesSent.setStatus('current')
if mibBuilder.loadTexts: bwNRSStatsTableNbResponsesSent.setDescription('This counter is incremented when a response is sent')
bwNRSStatsTableNbErrorsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 13, 1, 16, 1, 8), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwNRSStatsTableNbErrorsSent.setStatus('current')
if mibBuilder.loadTexts: bwNRSStatsTableNbErrorsSent.setDescription('This counter is incremented when an error is sent')
bwNRSStatsTableNbRequestsResent = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 13, 1, 16, 1, 9), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwNRSStatsTableNbRequestsResent.setStatus('current')
if mibBuilder.loadTexts: bwNRSStatsTableNbRequestsResent.setDescription('This counter is incremented when a request is re-sent')
bwNRSStatsTableNbResponsesResent = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 13, 1, 16, 1, 10), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwNRSStatsTableNbResponsesResent.setStatus('current')
if mibBuilder.loadTexts: bwNRSStatsTableNbResponsesResent.setDescription('This counter is incremented when a response is re-sent')
bwNRSStatsTableNbRequestsUnanswered = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 13, 1, 16, 1, 11), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwNRSStatsTableNbRequestsUnanswered.setStatus('current')
if mibBuilder.loadTexts: bwNRSStatsTableNbRequestsUnanswered.setDescription('This counter is incremented when a request remains unanswered after a series of retries')
timesTen = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 2, 5, 1, 1))
perNbOpenedTransactions = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 5, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perNbOpenedTransactions.setStatus('current')
if mibBuilder.loadTexts: perNbOpenedTransactions.setDescription('Number of opened transaction with the database')
perNbCommittedTransactions = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 5, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: perNbCommittedTransactions.setStatus('current')
if mibBuilder.loadTexts: perNbCommittedTransactions.setDescription('Total number of committed transactions to the database since the last restart')
perNbFailedTransactions = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 5, 1, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: perNbFailedTransactions.setStatus('current')
if mibBuilder.loadTexts: perNbFailedTransactions.setDescription('Number of failed transactions with the database')
perNbCriticalErrors = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 5, 1, 5), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: perNbCriticalErrors.setStatus('current')
if mibBuilder.loadTexts: perNbCriticalErrors.setDescription('Total number of critical errors encountered during processing with the database')
ttNbConnectionsCreated = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 5, 1, 1, 1), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ttNbConnectionsCreated.setStatus('current')
if mibBuilder.loadTexts: ttNbConnectionsCreated.setDescription('Number of total transaction created to the database')
ttConnectionPoolSize = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 5, 1, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ttConnectionPoolSize.setStatus('current')
if mibBuilder.loadTexts: ttConnectionPoolSize.setDescription('Current size of the database connection pool')
ttNbBackdoorUpdates = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 5, 1, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ttNbBackdoorUpdates.setStatus('obsolete')
if mibBuilder.loadTexts: ttNbBackdoorUpdates.setDescription('Total number of backdoor notification')
ttNbFailedCheckpoints = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 5, 1, 1, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ttNbFailedCheckpoints.setStatus('obsolete')
if mibBuilder.loadTexts: ttNbFailedCheckpoints.setDescription('Total number of fail check pointing to the dabatase')
bwXSAvgUpdateTime = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 5, 1, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwXSAvgUpdateTime.setStatus('current')
if mibBuilder.loadTexts: bwXSAvgUpdateTime.setDescription('Average DB update time in milliseconds')
bwXSAvgRowsUpdated = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 5, 1, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwXSAvgRowsUpdated.setStatus('current')
if mibBuilder.loadTexts: bwXSAvgRowsUpdated.setDescription('Average number of rows affected in DB updates')
bwXSAvgQueryTime = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 5, 1, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwXSAvgQueryTime.setStatus('current')
if mibBuilder.loadTexts: bwXSAvgQueryTime.setDescription('Average DB query time in milliseconds')
bwXSAvgRowsQueried = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 5, 1, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwXSAvgRowsQueried.setStatus('current')
if mibBuilder.loadTexts: bwXSAvgRowsQueried.setDescription('Average number of rows processed in DB queries')
bwXSUpdateCount = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 5, 1, 1, 10), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwXSUpdateCount.setStatus('current')
if mibBuilder.loadTexts: bwXSUpdateCount.setDescription('Number of DB updates performed since the application started')
bwXSQueryCount = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 5, 1, 1, 11), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwXSQueryCount.setStatus('current')
if mibBuilder.loadTexts: bwXSQueryCount.setDescription('Number of DB queries performed since the application started')
bwXSTTHWMTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 5, 1, 1, 12), )
if mibBuilder.loadTexts: bwXSTTHWMTable.setStatus('current')
if mibBuilder.loadTexts: bwXSTTHWMTable.setDescription('This table contains counters for the XS TimesTen high water marks.')
bwXSTTHWMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 5, 1, 1, 12, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwXSTTHWMIndex"))
if mibBuilder.loadTexts: bwXSTTHWMEntry.setStatus('current')
if mibBuilder.loadTexts: bwXSTTHWMEntry.setDescription('Definition of the entries for bwXSTTHWMTable.')
bwXSTTHWMIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 5, 1, 1, 12, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwXSTTHWMIndex.setStatus('current')
if mibBuilder.loadTexts: bwXSTTHWMIndex.setDescription('This integer represents an index in table bwXSTTHWMTable. This is the index to a specific high water mark.')
bwXSTTHWMName = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 5, 1, 1, 12, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwXSTTHWMName.setStatus('current')
if mibBuilder.loadTexts: bwXSTTHWMName.setDescription('The name of an XS TimesTen high water mark.')
bwXSTTHWMValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 5, 1, 1, 12, 1, 3), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwXSTTHWMValue.setStatus('current')
if mibBuilder.loadTexts: bwXSTTHWMValue.setDescription('The value of an XS TimesTen high water mark.')
bwXSTTHWMTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 5, 1, 1, 12, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwXSTTHWMTimestamp.setStatus('current')
if mibBuilder.loadTexts: bwXSTTHWMTimestamp.setDescription('The timestamp of an XS TimesTen high water mark.')
bwXSTTHWMStackTrace = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 5, 1, 1, 12, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwXSTTHWMStackTrace.setStatus('current')
if mibBuilder.loadTexts: bwXSTTHWMStackTrace.setDescription('The stack trace of an XS TimesTen high water mark.')
xsRemoteXla = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 2, 5, 1, 1, 5))
xsRemoteXlaNbTimesConnected = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 5, 1, 1, 5, 1), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xsRemoteXlaNbTimesConnected.setStatus('current')
if mibBuilder.loadTexts: xsRemoteXlaNbTimesConnected.setDescription('Number of times a connection was made to the RemoteXla server')
xsRemoteXlaNbTimesDisconnected = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 5, 1, 1, 5, 2), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xsRemoteXlaNbTimesDisconnected.setStatus('current')
if mibBuilder.loadTexts: xsRemoteXlaNbTimesDisconnected.setDescription('Number of times the process was disconnected from the RemoteXla server')
xsRemoteXlaUpdatesProcessed = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 5, 1, 1, 5, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xsRemoteXlaUpdatesProcessed.setStatus('current')
if mibBuilder.loadTexts: xsRemoteXlaUpdatesProcessed.setDescription('Number of XLA updates processed')
xsRemoteXlaUpdatesPending = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 5, 1, 1, 5, 4), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xsRemoteXlaUpdatesPending.setStatus('current')
if mibBuilder.loadTexts: xsRemoteXlaUpdatesPending.setDescription('Number of XLA updates pending to be processed')
bwPMTNumMonitorsCreated = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 15, 1, 1), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwPMTNumMonitorsCreated.setStatus('current')
if mibBuilder.loadTexts: bwPMTNumMonitorsCreated.setDescription('This counter is incremented when a monitor is created')
bwPMTNumMonitorsOpen = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 15, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwPMTNumMonitorsOpen.setStatus('current')
if mibBuilder.loadTexts: bwPMTNumMonitorsOpen.setDescription('Number of open monitors in the system')
bwPMTNumLoggerCreated = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 15, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwPMTNumLoggerCreated.setStatus('current')
if mibBuilder.loadTexts: bwPMTNumLoggerCreated.setDescription('This counter is incremented when a logger registers')
bwPMTNumLoggerOpen = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 15, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwPMTNumLoggerOpen.setStatus('current')
if mibBuilder.loadTexts: bwPMTNumLoggerOpen.setDescription('The number of loggers registered in the system')
systemStats = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 2, 16, 1))
bwSystemName = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 16, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwSystemName.setStatus('current')
if mibBuilder.loadTexts: bwSystemName.setDescription('Gives the BroadWorks system name')
bwNumberOfUsers = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 16, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwNumberOfUsers.setStatus('current')
if mibBuilder.loadTexts: bwNumberOfUsers.setDescription('Gives the total of users configured on the BroadWorks system')
bwNumberOfGroups = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 16, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwNumberOfGroups.setStatus('current')
if mibBuilder.loadTexts: bwNumberOfGroups.setDescription('Gives the total of groups configured on the BroadWorks system')
bwNumberOfServProv = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 16, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwNumberOfServProv.setStatus('current')
if mibBuilder.loadTexts: bwNumberOfServProv.setDescription('Gives the total of groups configured on the BroadWorks system')
bwNumberOfDNDefined = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 16, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwNumberOfDNDefined.setStatus('current')
if mibBuilder.loadTexts: bwNumberOfDNDefined.setDescription('Gives the total of phone numbers configured on the BroadWorks system')
bwNumberOfDNAssigned = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 16, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwNumberOfDNAssigned.setStatus('current')
if mibBuilder.loadTexts: bwNumberOfDNAssigned.setDescription('Gives the total of phone numbers assigned to service provivers on the BroadWorks system')
bwNumberOfDeviceType = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 16, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwNumberOfDeviceType.setStatus('current')
if mibBuilder.loadTexts: bwNumberOfDeviceType.setDescription('Gives the total of device types defined on the BroadWorks system')
bwNumberOfServiceType = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 16, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwNumberOfServiceType.setStatus('current')
if mibBuilder.loadTexts: bwNumberOfServiceType.setDescription('Gives the total of service types on the BroadWorks system')
bwDeviceTypeSystemTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 16, 1, 9), )
if mibBuilder.loadTexts: bwDeviceTypeSystemTable.setStatus('current')
if mibBuilder.loadTexts: bwDeviceTypeSystemTable.setDescription('This table contains statistics for each device types supported on the BroadWorks system')
bwServiceTypeSystemTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 16, 1, 10), )
if mibBuilder.loadTexts: bwServiceTypeSystemTable.setStatus('current')
if mibBuilder.loadTexts: bwServiceTypeSystemTable.setDescription('This table contains statistics for each service types supported on the BroadWorks system')
bwSystemSPTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 16, 1, 11), )
if mibBuilder.loadTexts: bwSystemSPTable.setStatus('current')
if mibBuilder.loadTexts: bwSystemSPTable.setDescription('This table contains system level statistics for each groups on the BroadWorks system')
bwSystemGroupTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 16, 1, 12), )
if mibBuilder.loadTexts: bwSystemGroupTable.setStatus('current')
if mibBuilder.loadTexts: bwSystemGroupTable.setDescription('This table contains system level statistics for each groups on the BroadWorks system')
bwDeviceTypeSystemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 16, 1, 9, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwDeviceTypeSystemIndex"))
if mibBuilder.loadTexts: bwDeviceTypeSystemEntry.setStatus('current')
if mibBuilder.loadTexts: bwDeviceTypeSystemEntry.setDescription('This row contains the statistics for a given device type in the system')
bwDeviceTypeSystemIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 16, 1, 9, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwDeviceTypeSystemIndex.setStatus('current')
if mibBuilder.loadTexts: bwDeviceTypeSystemIndex.setDescription('This integer represents a device type index in the system')
bwDeviceTypeSystemID = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 16, 1, 9, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwDeviceTypeSystemID.setStatus('current')
if mibBuilder.loadTexts: bwDeviceTypeSystemID.setDescription('This string represents a device type ID')
bwNumberOfDeviceTypeSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 16, 1, 9, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwNumberOfDeviceTypeSystem.setStatus('current')
if mibBuilder.loadTexts: bwNumberOfDeviceTypeSystem.setDescription('Gives the total of number of a device type defined in the system')
bwServiceTypeSystemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 16, 1, 10, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwServiceTypeSystemIndex"))
if mibBuilder.loadTexts: bwServiceTypeSystemEntry.setStatus('current')
if mibBuilder.loadTexts: bwServiceTypeSystemEntry.setDescription('This row contains the statistics for a given service type in the system')
bwServiceTypeSystemIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 16, 1, 10, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwServiceTypeSystemIndex.setStatus('current')
if mibBuilder.loadTexts: bwServiceTypeSystemIndex.setDescription('This integer represents a service type index in the system')
bwServiceTypeSystemID = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 16, 1, 10, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwServiceTypeSystemID.setStatus('current')
if mibBuilder.loadTexts: bwServiceTypeSystemID.setDescription('This string represents a service type ID')
bwNumberOfServiceTypeAssignedSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 16, 1, 10, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwNumberOfServiceTypeAssignedSystem.setStatus('current')
if mibBuilder.loadTexts: bwNumberOfServiceTypeAssignedSystem.setDescription('Gives the total of number of a service type assigned in the system')
bwSystemSPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 16, 1, 11, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwSystemSPIndex"))
if mibBuilder.loadTexts: bwSystemSPEntry.setStatus('current')
if mibBuilder.loadTexts: bwSystemSPEntry.setDescription('This row contains the system statistics for a given service provider in the system')
bwSystemSPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 16, 1, 11, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwSystemSPIndex.setStatus('current')
if mibBuilder.loadTexts: bwSystemSPIndex.setDescription('This integer represents a service provider index in the system')
bwSystemSPID = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 16, 1, 11, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwSystemSPID.setStatus('current')
if mibBuilder.loadTexts: bwSystemSPID.setDescription('This string represents a service provider ID')
bwSystemSPName = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 16, 1, 11, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwSystemSPName.setStatus('current')
if mibBuilder.loadTexts: bwSystemSPName.setDescription('Gives the BroadWorks system name')
bwNumberOfSPUsers = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 16, 1, 11, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwNumberOfSPUsers.setStatus('current')
if mibBuilder.loadTexts: bwNumberOfSPUsers.setDescription('Gives the total of users configured for a service provider')
bwNumberOfSPGroups = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 16, 1, 11, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwNumberOfSPGroups.setStatus('current')
if mibBuilder.loadTexts: bwNumberOfSPGroups.setDescription('Gives the total of groups configured for a service provider')
bwNumberOfSPDNDefined = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 16, 1, 11, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwNumberOfSPDNDefined.setStatus('current')
if mibBuilder.loadTexts: bwNumberOfSPDNDefined.setDescription('Gives the total of phone numbers configured for a service provider')
bwNumberOfSPDNAssigned = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 16, 1, 11, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwNumberOfSPDNAssigned.setStatus('current')
if mibBuilder.loadTexts: bwNumberOfSPDNAssigned.setDescription('Gives the total of phone numbers assigned to groups by a service provider')
bwNumberOfSPDeviceType = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 16, 1, 11, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwNumberOfSPDeviceType.setStatus('current')
if mibBuilder.loadTexts: bwNumberOfSPDeviceType.setDescription('Gives the total of device types defined for a service provider')
bwSystemGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 16, 1, 12, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwSystemGroupIndex"))
if mibBuilder.loadTexts: bwSystemGroupEntry.setStatus('current')
if mibBuilder.loadTexts: bwSystemGroupEntry.setDescription('This row contains the system statistics for a given group in the system')
bwSystemGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 16, 1, 12, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwSystemGroupIndex.setStatus('current')
if mibBuilder.loadTexts: bwSystemGroupIndex.setDescription('This integer represents a group index in the system')
bwSystemGroupSPID = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 16, 1, 12, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwSystemGroupSPID.setStatus('current')
if mibBuilder.loadTexts: bwSystemGroupSPID.setDescription('This string represents a service provider ID')
bwSystemGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 16, 1, 12, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwSystemGroupID.setStatus('current')
if mibBuilder.loadTexts: bwSystemGroupID.setDescription('This string represents a group ID')
bwSystemGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 16, 1, 12, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwSystemGroupName.setStatus('current')
if mibBuilder.loadTexts: bwSystemGroupName.setDescription('Gives the BroadWorks system name')
bwNumberOfGroupUsers = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 16, 1, 12, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwNumberOfGroupUsers.setStatus('current')
if mibBuilder.loadTexts: bwNumberOfGroupUsers.setDescription('Gives the total of users configured in a group')
bwNumberOfGroupDNDefined = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 16, 1, 12, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwNumberOfGroupDNDefined.setStatus('current')
if mibBuilder.loadTexts: bwNumberOfGroupDNDefined.setDescription('Gives the total of phone numbers configured for a group')
bwNumberOfGroupDNAssigned = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 16, 1, 12, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwNumberOfGroupDNAssigned.setStatus('current')
if mibBuilder.loadTexts: bwNumberOfGroupDNAssigned.setDescription('Gives the total of phone numbers assigned to a group')
bwNumberOfGroupDeviceType = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 16, 1, 12, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwNumberOfGroupDeviceType.setStatus('current')
if mibBuilder.loadTexts: bwNumberOfGroupDeviceType.setDescription('Gives the total of device types for a group')
internalStats = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 2, 16, 2))
bySystemInternalQueueResets = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 16, 2, 1), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bySystemInternalQueueResets.setStatus('current')
if mibBuilder.loadTexts: bySystemInternalQueueResets.setDescription('When set to a value other then 0, all the internal queue statistic stored under bwSystemInternalQueueTable are reset to 0.')
bwSystemInternalQueueTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 2, 16, 2, 2), )
if mibBuilder.loadTexts: bwSystemInternalQueueTable.setStatus('current')
if mibBuilder.loadTexts: bwSystemInternalQueueTable.setDescription('This table contains statistics about the BroadWorks internal queues')
bwSystemInternalQueueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 2, 16, 2, 2, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwSystemInternalQueueIndex"))
if mibBuilder.loadTexts: bwSystemInternalQueueEntry.setStatus('current')
if mibBuilder.loadTexts: bwSystemInternalQueueEntry.setDescription('This row contains the statistics for a given internal queue in the system')
bwSystemInternalQueueIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 16, 2, 2, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwSystemInternalQueueIndex.setStatus('current')
if mibBuilder.loadTexts: bwSystemInternalQueueIndex.setDescription('This integer represents an index to an internal queue in the system.')
bwSystemInternalQueueName = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 16, 2, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwSystemInternalQueueName.setStatus('current')
if mibBuilder.loadTexts: bwSystemInternalQueueName.setDescription('This string represents the name of an internal queue.')
bwSystemInternalQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 16, 2, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwSystemInternalQueueSize.setStatus('current')
if mibBuilder.loadTexts: bwSystemInternalQueueSize.setDescription('The number of sample elements that the average, minimum and maximum holding time were calculated from.')
bwSystemInternalQueueTimeAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 16, 2, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwSystemInternalQueueTimeAvg.setStatus('current')
if mibBuilder.loadTexts: bwSystemInternalQueueTimeAvg.setDescription('The average queue holding time. Note that this value is in 1/1000 of millisec, i.e. divide by 1000 to get the value in milliseconds.')
bwSystemInternalQueueTimeMin = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 16, 2, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwSystemInternalQueueTimeMin.setStatus('current')
if mibBuilder.loadTexts: bwSystemInternalQueueTimeMin.setDescription('The smallest queue sample holding time.')
bwSystemInternalQueueTimeMax = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 16, 2, 2, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwSystemInternalQueueTimeMax.setStatus('current')
if mibBuilder.loadTexts: bwSystemInternalQueueTimeMax.setDescription('The biggest queue sample holding time.')
bwSystemInternalQueueTimeMaxTimestamp = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 16, 2, 2, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwSystemInternalQueueTimeMaxTimestamp.setStatus('obsolete')
if mibBuilder.loadTexts: bwSystemInternalQueueTimeMaxTimestamp.setDescription('This counter was replaced by bwSystemInternalQueueTimeMaxTimestampMSB and bwSystemInternalQueueTimeMaxTimestampLSB.')
bwSystemInternalQueueLengthCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 16, 2, 2, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwSystemInternalQueueLengthCurrent.setStatus('current')
if mibBuilder.loadTexts: bwSystemInternalQueueLengthCurrent.setDescription('The number of elements currently hold in the queue.')
bwSystemInternalQueueLengthAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 16, 2, 2, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwSystemInternalQueueLengthAvg.setStatus('current')
if mibBuilder.loadTexts: bwSystemInternalQueueLengthAvg.setDescription('The average number of elements simultaneously held in the queue multiple by 1000. Divide by 1000 to get the value in units.')
bwSystemInternalQueueLengthMax = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 16, 2, 2, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwSystemInternalQueueLengthMax.setStatus('current')
if mibBuilder.loadTexts: bwSystemInternalQueueLengthMax.setDescription('The maximum number of elements simultaneously held in the queue multiple by 1000. Divide by 1000 to get the value in units.')
bwSystemInternalQueueLengthMaxTimestamp = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 16, 2, 2, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwSystemInternalQueueLengthMaxTimestamp.setStatus('obsolete')
if mibBuilder.loadTexts: bwSystemInternalQueueLengthMaxTimestamp.setDescription('This counter was replaced by bwSystemInternalQueueLengthMaxTimestampMSB and bwSystemInternalQueueLengthMaxTimestampLSB.')
bwSystemInternalQueueTimeMaxTimestampMSB = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 16, 2, 2, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwSystemInternalQueueTimeMaxTimestampMSB.setStatus('current')
if mibBuilder.loadTexts: bwSystemInternalQueueTimeMaxTimestampMSB.setDescription('The most significant part of the timestamp (4 most significant bytes) of when bwSystemInternalQueueTimeMax was obtained.')
bwSystemInternalQueueLengthMaxTimestampMSB = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 16, 2, 2, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwSystemInternalQueueLengthMaxTimestampMSB.setStatus('current')
if mibBuilder.loadTexts: bwSystemInternalQueueLengthMaxTimestampMSB.setDescription('The most significant part of the timestamp (4 most significant bytes) of when bwSystemInternalQueueLengthMax was obtained.')
bwSystemInternalQueueLengthMaxTimestampLSB = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 16, 2, 2, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwSystemInternalQueueLengthMaxTimestampLSB.setStatus('current')
if mibBuilder.loadTexts: bwSystemInternalQueueLengthMaxTimestampLSB.setDescription('The least significant part of the timestamp (4 least significant bytes) of when bwSystemInternalQueueLengthMax was obtained.')
bwSystemInternalQueueTimeMaxTimestampLSB = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 2, 16, 2, 2, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwSystemInternalQueueTimeMaxTimestampLSB.setStatus('current')
if mibBuilder.loadTexts: bwSystemInternalQueueTimeMaxTimestampLSB.setDescription('The least significant part of the timestamp (4 least significant bytes) of when bwSystemInternalQueueTimeMax was obtained.')
overloadStats = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 2, 16, 3))
bwCurrentOverloadZone = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 16, 3, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwCurrentOverloadZone.setStatus('obsolete')
if mibBuilder.loadTexts: bwCurrentOverloadZone.setDescription('The current overload zone. Value is a string indicating Green, Yellow, or Red. This object is obsolete. Call and non-call objects shall be used.')
bwNumYellowZoneOverloadTrans = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 16, 3, 2), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwNumYellowZoneOverloadTrans.setStatus('obsolete')
if mibBuilder.loadTexts: bwNumYellowZoneOverloadTrans.setDescription('The number of times that the server has transitioned to the yellow overload zone. This object is obsolete. Call and non-call objects shall be used.')
bwNumRedZoneOverloadTrans = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 16, 3, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwNumRedZoneOverloadTrans.setStatus('obsolete')
if mibBuilder.loadTexts: bwNumRedZoneOverloadTrans.setDescription('The number of times that the server has transitioned to the red overload zone. This object is obsolete. Call and non-call objects shall be used.')
bwCurrentCallOverloadZone = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 16, 3, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwCurrentCallOverloadZone.setStatus('current')
if mibBuilder.loadTexts: bwCurrentCallOverloadZone.setDescription('The current call related overload zone. Value is a string indicating Green, Yellow, or Red.')
bwNumCallYellowZoneOverloadTrans = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 16, 3, 5), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwNumCallYellowZoneOverloadTrans.setStatus('current')
if mibBuilder.loadTexts: bwNumCallYellowZoneOverloadTrans.setDescription('The number of times that the server has transitioned to the call related yellow overload zone.')
bwNumCallRedZoneOverloadTrans = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 16, 3, 6), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwNumCallRedZoneOverloadTrans.setStatus('current')
if mibBuilder.loadTexts: bwNumCallRedZoneOverloadTrans.setDescription('The number of times that the server has transitioned to the call related red overload zone.')
bwCurrentNonCallOverloadZone = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 16, 3, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwCurrentNonCallOverloadZone.setStatus('current')
if mibBuilder.loadTexts: bwCurrentNonCallOverloadZone.setDescription('The current non-call related overload zone. Value is a string indicating Green, Yellow, or Red.')
bwNumNonCallYellowZoneOverloadTrans = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 16, 3, 8), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwNumNonCallYellowZoneOverloadTrans.setStatus('current')
if mibBuilder.loadTexts: bwNumNonCallYellowZoneOverloadTrans.setDescription('The number of times that the server has transitioned to the non-call related yellow overload zone.')
bwNumNonCallRedZoneOverloadTrans = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 16, 3, 9), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwNumNonCallRedZoneOverloadTrans.setStatus('current')
if mibBuilder.loadTexts: bwNumNonCallRedZoneOverloadTrans.setDescription('The number of times that the server has transitioned to the non-call related red overload zone.')
bwNumDiscardedMessage = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 16, 3, 10), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwNumDiscardedMessage.setStatus('current')
if mibBuilder.loadTexts: bwNumDiscardedMessage.setDescription('The number of messages that were dropped from the SIP or MGCP decoder queues.')
bwTimeLastDiscardedMessage = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 16, 3, 11), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwTimeLastDiscardedMessage.setStatus('current')
if mibBuilder.loadTexts: bwTimeLastDiscardedMessage.setDescription('The last time a message was dropped from the SIP or MGCP decoded queues.')
nbOfMigratedUsers = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 18, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbOfMigratedUsers.setStatus('current')
if mibBuilder.loadTexts: nbOfMigratedUsers.setDescription('This value represents the actual number of users migrated to the secondary application server')
psTimesTen = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 6, 1, 1, 1))
psPerNbOpenedTransactions = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 6, 1, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psPerNbOpenedTransactions.setStatus('current')
if mibBuilder.loadTexts: psPerNbOpenedTransactions.setDescription('Number of opened transaction with the database')
psPerNbCommittedTransactions = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 6, 1, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psPerNbCommittedTransactions.setStatus('current')
if mibBuilder.loadTexts: psPerNbCommittedTransactions.setDescription('Total number of committed transactions to the database since the last restart')
psPerNbFailedTransactions = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 6, 1, 1, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psPerNbFailedTransactions.setStatus('current')
if mibBuilder.loadTexts: psPerNbFailedTransactions.setDescription('Number of failed transactions with the database')
psPerNbCriticalErrors = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 6, 1, 1, 5), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psPerNbCriticalErrors.setStatus('current')
if mibBuilder.loadTexts: psPerNbCriticalErrors.setDescription('Total number of critical errors encountered during processing with the database')
psTtNbConnectionsCreated = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 6, 1, 1, 1, 1), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psTtNbConnectionsCreated.setStatus('current')
if mibBuilder.loadTexts: psTtNbConnectionsCreated.setDescription('Number of total transaction created to the database')
psTtConnectionPoolSize = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 6, 1, 1, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psTtConnectionPoolSize.setStatus('current')
if mibBuilder.loadTexts: psTtConnectionPoolSize.setDescription('Current size of the database connection pool')
psTtNbBackdoorUpdates = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 6, 1, 1, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psTtNbBackdoorUpdates.setStatus('obsolete')
if mibBuilder.loadTexts: psTtNbBackdoorUpdates.setDescription('Total number of backdoor notification')
psTtNbFailedCheckpoints = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 6, 1, 1, 1, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psTtNbFailedCheckpoints.setStatus('obsolete')
if mibBuilder.loadTexts: psTtNbFailedCheckpoints.setDescription('Total number of fail check pointing to the dabatase')
bwPSAvgUpdateTime = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 6, 1, 1, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwPSAvgUpdateTime.setStatus('current')
if mibBuilder.loadTexts: bwPSAvgUpdateTime.setDescription('Average DB update time in milliseconds')
bwPSAvgRowsUpdated = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 6, 1, 1, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwPSAvgRowsUpdated.setStatus('current')
if mibBuilder.loadTexts: bwPSAvgRowsUpdated.setDescription('Average number of rows affected in DB updates')
bwPSAvgQueryTime = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 6, 1, 1, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwPSAvgQueryTime.setStatus('current')
if mibBuilder.loadTexts: bwPSAvgQueryTime.setDescription('Average DB query time in milliseconds')
bwPSAvgRowsQueried = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 6, 1, 1, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwPSAvgRowsQueried.setStatus('current')
if mibBuilder.loadTexts: bwPSAvgRowsQueried.setDescription('Average number of rows processed in DB queries')
bwPSUpdateCount = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 6, 1, 1, 1, 10), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwPSUpdateCount.setStatus('current')
if mibBuilder.loadTexts: bwPSUpdateCount.setDescription('Number of DB updates performed since the application started')
bwPSQueryCount = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 6, 1, 1, 1, 11), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwPSQueryCount.setStatus('current')
if mibBuilder.loadTexts: bwPSQueryCount.setDescription('Number of DB queries performed since the application started')
bwPSTTHWMTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 6, 1, 1, 1, 12), )
if mibBuilder.loadTexts: bwPSTTHWMTable.setStatus('current')
if mibBuilder.loadTexts: bwPSTTHWMTable.setDescription('This table contains counters for the PS TimesTen high water marks.')
bwPSTTHWMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 6, 1, 1, 1, 12, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwPSTTHWMIndex"))
if mibBuilder.loadTexts: bwPSTTHWMEntry.setStatus('current')
if mibBuilder.loadTexts: bwPSTTHWMEntry.setDescription('Definition of the entries for bwPSTTHWMTable.')
bwPSTTHWMIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 6, 1, 1, 1, 12, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwPSTTHWMIndex.setStatus('current')
if mibBuilder.loadTexts: bwPSTTHWMIndex.setDescription('This integer represents an index in table bwPSTTHWMTable. This is the index to a specific high water mark.')
bwPSTTHWMName = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 6, 1, 1, 1, 12, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwPSTTHWMName.setStatus('current')
if mibBuilder.loadTexts: bwPSTTHWMName.setDescription('The name of an PS TimesTen high water mark.')
bwPSTTHWMValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 6, 1, 1, 1, 12, 1, 3), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwPSTTHWMValue.setStatus('current')
if mibBuilder.loadTexts: bwPSTTHWMValue.setDescription('The value of an PS TimesTen high water mark.')
bwPSTTHWMTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 6, 1, 1, 1, 12, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwPSTTHWMTimestamp.setStatus('current')
if mibBuilder.loadTexts: bwPSTTHWMTimestamp.setDescription('The timestamp of an PS TimesTen high water mark.')
bwPSTTHWMStackTrace = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 6, 1, 1, 1, 12, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwPSTTHWMStackTrace.setStatus('current')
if mibBuilder.loadTexts: bwPSTTHWMStackTrace.setDescription('The stack trace of an PS TimesTen high water mark.')
psRemoteXla = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 6, 1, 1, 1, 5))
psRemoteXlaNbTimesConnected = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 6, 1, 1, 1, 5, 1), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psRemoteXlaNbTimesConnected.setStatus('current')
if mibBuilder.loadTexts: psRemoteXlaNbTimesConnected.setDescription('Number of times a connection was made to the RemoteXla server')
psRemoteXlaNbTimesDisconnected = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 6, 1, 1, 1, 5, 2), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psRemoteXlaNbTimesDisconnected.setStatus('current')
if mibBuilder.loadTexts: psRemoteXlaNbTimesDisconnected.setDescription('Number of times the process was disconnected from the RemoteXla server')
psRemoteXlaUpdatesProcessed = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 6, 1, 1, 1, 5, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psRemoteXlaUpdatesProcessed.setStatus('current')
if mibBuilder.loadTexts: psRemoteXlaUpdatesProcessed.setDescription('Number of XLA updates processed')
psRemoteXlaUpdatesPending = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 6, 1, 1, 1, 5, 4), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psRemoteXlaUpdatesPending.setStatus('current')
if mibBuilder.loadTexts: psRemoteXlaUpdatesPending.setDescription('Number of XLA updates pending to be processed')
bwExternalCallLogsRetrievalAttempts = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 6, 7, 1, 1), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwExternalCallLogsRetrievalAttempts.setStatus('current')
if mibBuilder.loadTexts: bwExternalCallLogsRetrievalAttempts.setDescription('Incremented each time a request to retrieve call logs from the external call detail server is attempted.')
bwExternalCallLogsRetrievalFailures = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 6, 7, 1, 2), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwExternalCallLogsRetrievalFailures.setStatus('current')
if mibBuilder.loadTexts: bwExternalCallLogsRetrievalFailures.setDescription('Incremented each time a request to retrieve call logs from the external call detail server has failed.')
psOciStatsNbUpdateRequests = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 6, 8, 1, 1), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psOciStatsNbUpdateRequests.setStatus('current')
if mibBuilder.loadTexts: psOciStatsNbUpdateRequests.setDescription('This counter is incremented upon receipt of an OCI modification request.')
psOciStatsNbUpdateRequestFailures = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 6, 8, 1, 2), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psOciStatsNbUpdateRequestFailures.setStatus('current')
if mibBuilder.loadTexts: psOciStatsNbUpdateRequestFailures.setDescription('This counter is incremented whenever processing of an OCI modification request results in an error response.')
psOciStatsNbQueryRequests = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 6, 8, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psOciStatsNbQueryRequests.setStatus('current')
if mibBuilder.loadTexts: psOciStatsNbQueryRequests.setDescription('This counter is incremented upon receipt of an OCI get request.')
psOciStatsNbQueryRequestFailures = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 6, 8, 1, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psOciStatsNbQueryRequestFailures.setStatus('current')
if mibBuilder.loadTexts: psOciStatsNbQueryRequestFailures.setDescription('This counter is incremented whenever processing of an OCI get request results in an error response.')
psOciStatsNbAuthorizationRequests = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 6, 8, 1, 5), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psOciStatsNbAuthorizationRequests.setStatus('current')
if mibBuilder.loadTexts: psOciStatsNbAuthorizationRequests.setDescription('This counter is incremented upon receipt of an OCI login request.')
psOciStatsNbAuthorizationRequestFailures = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 6, 8, 1, 6), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psOciStatsNbAuthorizationRequestFailures.setStatus('current')
if mibBuilder.loadTexts: psOciStatsNbAuthorizationRequestFailures.setDescription('This counter is incremented whenever processing of an OCI login request results in an error response.')
psOciStatsNbReportingAclViolations = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 6, 8, 1, 7), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psOciStatsNbReportingAclViolations.setStatus('current')
if mibBuilder.loadTexts: psOciStatsNbReportingAclViolations.setDescription("This counter is incremented whenever an incoming OCI reporting connection is rejected because the external system isn't in access control list.")
psOciStatsNbReportNotificationsOut = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 6, 8, 1, 8), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psOciStatsNbReportNotificationsOut.setStatus('current')
if mibBuilder.loadTexts: psOciStatsNbReportNotificationsOut.setDescription('This counter is incremented whenever the system transmits an OCIReportingReportNotification.')
psOciStatsActiveSessions = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 6, 8, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psOciStatsActiveSessions.setStatus('current')
if mibBuilder.loadTexts: psOciStatsActiveSessions.setDescription('Indicates the number of OCI sessions currently open.')
psOciStatsSystemRequestsPerHour = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 6, 8, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psOciStatsSystemRequestsPerHour.setStatus('current')
if mibBuilder.loadTexts: psOciStatsSystemRequestsPerHour.setDescription('Indicates the rate at which the Application Server receives OCI system requests. It uses the timestamps of the last 100 OCI system requests received to calculate the rate.')
psOciStatsSystemRequestResponseTime = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 6, 8, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psOciStatsSystemRequestResponseTime.setStatus('current')
if mibBuilder.loadTexts: psOciStatsSystemRequestResponseTime.setDescription('Indicates the average time (in milliseconds based on a rolling average of the last 100 samples) it takes to process a system level OCI request.')
psOciStatsMinSystemRequestResponseTime = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 6, 8, 1, 12), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psOciStatsMinSystemRequestResponseTime.setStatus('current')
if mibBuilder.loadTexts: psOciStatsMinSystemRequestResponseTime.setDescription('Indicates the shortest OCI system request response time sampled since the system was started or since this measurement was cleared.')
psOciStatsMaxSystemRequestResponseTime = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 6, 8, 1, 13), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psOciStatsMaxSystemRequestResponseTime.setStatus('current')
if mibBuilder.loadTexts: psOciStatsMaxSystemRequestResponseTime.setDescription('Indicates the longest OCI system request response time sampled since the system was started or since this measurement was cleared.')
psOciStatsMaxSystemRequestName = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 6, 8, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psOciStatsMaxSystemRequestName.setStatus('current')
if mibBuilder.loadTexts: psOciStatsMaxSystemRequestName.setDescription('Indicates the name of the system level OCI request corresponding to the ociMaxSystemRequestResponseTime gauge.')
psOciStatsServiceProviderRequestsPerHour = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 6, 8, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psOciStatsServiceProviderRequestsPerHour.setStatus('current')
if mibBuilder.loadTexts: psOciStatsServiceProviderRequestsPerHour.setDescription('Indicates the rate at which the Application Server receives OCI service provider requests. It uses the timestamps of the last 100 OCI service provider requests received to calculate the rate.')
psOciStatsServiceProviderRequestResponseTime = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 6, 8, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psOciStatsServiceProviderRequestResponseTime.setStatus('current')
if mibBuilder.loadTexts: psOciStatsServiceProviderRequestResponseTime.setDescription('Indicates the average time (in milliseconds based on a rolling average of the last 100 samples) it takes to process a service provider level OCI request.')
psOciStatsMinServiceProviderRequestResponseTime = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 6, 8, 1, 17), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psOciStatsMinServiceProviderRequestResponseTime.setStatus('current')
if mibBuilder.loadTexts: psOciStatsMinServiceProviderRequestResponseTime.setDescription('Indicates the shortest OCI service provider request response time sampled since the system was started or since this measurement was cleared.')
psOciStatsMaxServiceProviderRequestResponseTime = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 6, 8, 1, 18), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psOciStatsMaxServiceProviderRequestResponseTime.setStatus('current')
if mibBuilder.loadTexts: psOciStatsMaxServiceProviderRequestResponseTime.setDescription('Indicates the longest OCI service provider request response time sampled since the system was started or since this measurement was cleared.')
psOciStatsMaxServiceProviderRequestName = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 6, 8, 1, 19), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psOciStatsMaxServiceProviderRequestName.setStatus('current')
if mibBuilder.loadTexts: psOciStatsMaxServiceProviderRequestName.setDescription('Indicates the name of the service provider level OCI request corresponding to the ociMaxServiceProviderRequestResponseTime gauge.')
psOciStatsGroupRequestsPerHour = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 6, 8, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psOciStatsGroupRequestsPerHour.setStatus('current')
if mibBuilder.loadTexts: psOciStatsGroupRequestsPerHour.setDescription('Indicates the rate at which the Application Server receives OCI group requests. It uses the timestamps of the last 100 OCI group requests received to calculate the rate.')
psOciStatsGroupRequestResponseTime = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 6, 8, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psOciStatsGroupRequestResponseTime.setStatus('current')
if mibBuilder.loadTexts: psOciStatsGroupRequestResponseTime.setDescription('Indicates the average time (in milliseconds based on a rolling average of the last 100 samples) it takes to process a group level OCI request.')
psOciStatsMinGroupRequestResponseTime = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 6, 8, 1, 22), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psOciStatsMinGroupRequestResponseTime.setStatus('current')
if mibBuilder.loadTexts: psOciStatsMinGroupRequestResponseTime.setDescription('Indicates the shortest OCI group request response time sampled since the system was started or since this measurement was cleared.')
psOciStatsMaxGroupRequestResponseTime = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 6, 8, 1, 23), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psOciStatsMaxGroupRequestResponseTime.setStatus('current')
if mibBuilder.loadTexts: psOciStatsMaxGroupRequestResponseTime.setDescription('Indicates the longest OCI group request response time sampled since the system was started or since this measurement was cleared.')
psOciStatsMaxGroupRequestName = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 6, 8, 1, 24), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psOciStatsMaxGroupRequestName.setStatus('current')
if mibBuilder.loadTexts: psOciStatsMaxGroupRequestName.setDescription('Indicates the name of the group level OCI request corresponding to the ociMaxGroupRequestResponseTime gauge.')
psOciStatsUserRequestsPerHour = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 6, 8, 1, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psOciStatsUserRequestsPerHour.setStatus('current')
if mibBuilder.loadTexts: psOciStatsUserRequestsPerHour.setDescription('Indicates the rate at which the Application Server receives OCI user requests. It uses the timestamps of the last 100 OCI user requests received to calculate the rate.')
psOciStatsUserRequestResponseTime = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 6, 8, 1, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psOciStatsUserRequestResponseTime.setStatus('current')
if mibBuilder.loadTexts: psOciStatsUserRequestResponseTime.setDescription('Indicates the average time (in milliseconds based on a rolling average of the last 100 samples) it takes to process a user level OCI request.')
psOciStatsMinUserRequestResponseTime = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 6, 8, 1, 27), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psOciStatsMinUserRequestResponseTime.setStatus('current')
if mibBuilder.loadTexts: psOciStatsMinUserRequestResponseTime.setDescription('Indicates the shortest OCI user request response time sampled since the system was started or since this measurement was cleared.')
psOciStatsMaxUserRequestResponseTime = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 6, 8, 1, 28), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psOciStatsMaxUserRequestResponseTime.setStatus('current')
if mibBuilder.loadTexts: psOciStatsMaxUserRequestResponseTime.setDescription('Indicates the longest OCI user request response time sampled since the system was started or since this measurement was cleared.')
psOciStatsMaxUserRequestName = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 6, 8, 1, 29), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psOciStatsMaxUserRequestName.setStatus('current')
if mibBuilder.loadTexts: psOciStatsMaxUserRequestName.setDescription('Indicates the name of the user level OCI request corresponding to the ociMaxUserRequestResponseTime gauge.')
psOciStatsRequestsPerHour = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 6, 8, 1, 30), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psOciStatsRequestsPerHour.setStatus('current')
if mibBuilder.loadTexts: psOciStatsRequestsPerHour.setDescription('Indicates the rate at which the Application Server receives OCI requests. It uses the timestamps of the last 100 OCI requests received to calculate the rate.')
psOciStatsRequestResponseTime = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 6, 8, 1, 31), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psOciStatsRequestResponseTime.setStatus('current')
if mibBuilder.loadTexts: psOciStatsRequestResponseTime.setDescription('Indicates the average time (in milliseconds based on a rolling average of the last 100 samples) it takes to process an OCI request.')
psOciStatsMinRequestResponseTime = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 6, 8, 1, 32), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psOciStatsMinRequestResponseTime.setStatus('current')
if mibBuilder.loadTexts: psOciStatsMinRequestResponseTime.setDescription('Indicates the shortest OCI request response time sampled since the system was started or since this measurement was cleared.')
psOciStatsMaxRequestResponseTime = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 6, 8, 1, 33), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psOciStatsMaxRequestResponseTime.setStatus('current')
if mibBuilder.loadTexts: psOciStatsMaxRequestResponseTime.setDescription('Indicates the longest OCI request response time sampled since the system was started or since this measurement was cleared.')
psOciStatsMaxRequestName = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 6, 8, 1, 34), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psOciStatsMaxRequestName.setStatus('current')
if mibBuilder.loadTexts: psOciStatsMaxRequestName.setDescription('Indicates the name of the OCI request corresponding to the ociMaxRequestResponseTime gauge.')
psOCIReportingBackLogMessageTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 6, 8, 1, 35), )
if mibBuilder.loadTexts: psOCIReportingBackLogMessageTable.setStatus('current')
if mibBuilder.loadTexts: psOCIReportingBackLogMessageTable.setDescription('This table contains statistics about the OCI Reporting backlog messages.')
psOCIReportingBackLogMessageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 6, 8, 1, 35, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "psOCIReportingBackLogMessageIndex"))
if mibBuilder.loadTexts: psOCIReportingBackLogMessageEntry.setStatus('current')
if mibBuilder.loadTexts: psOCIReportingBackLogMessageEntry.setDescription('This row contains statistics about the OCI Reporting backlog messages.')
psOCIReportingBackLogMessageIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 6, 8, 1, 35, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psOCIReportingBackLogMessageIndex.setStatus('current')
if mibBuilder.loadTexts: psOCIReportingBackLogMessageIndex.setDescription('This integer represents an index to an OCI Reporting host in the Provisioning Server.')
psOCIReportingBackLogMessageHost = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 6, 8, 1, 35, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psOCIReportingBackLogMessageHost.setStatus('current')
if mibBuilder.loadTexts: psOCIReportingBackLogMessageHost.setDescription('This represents the host name/IP address of a reporting host.')
psOCIReportingBackLogMessageSaved = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 6, 8, 1, 35, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psOCIReportingBackLogMessageSaved.setStatus('current')
if mibBuilder.loadTexts: psOCIReportingBackLogMessageSaved.setDescription('The number of OCI reporting message written to the backlog files.')
psOCIReportingBackLogMessageSent = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 6, 8, 1, 35, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psOCIReportingBackLogMessageSent.setStatus('current')
if mibBuilder.loadTexts: psOCIReportingBackLogMessageSent.setDescription('The number of OCI reporting message sent from the backlog files.')
psSystemInternalQueueResets = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 6, 9, 1, 1), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psSystemInternalQueueResets.setStatus('current')
if mibBuilder.loadTexts: psSystemInternalQueueResets.setDescription('When set to a value other then 0, all the internal queue statistic stored under psSystemInternalQueueTable are reset to 0.')
psSystemInternalQueueTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 6, 9, 1, 2), )
if mibBuilder.loadTexts: psSystemInternalQueueTable.setStatus('current')
if mibBuilder.loadTexts: psSystemInternalQueueTable.setDescription('This table contains statistics about the BroadWorks internal queues')
psSystemInternalQueueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 6, 9, 1, 2, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "psSystemInternalQueueIndex"))
if mibBuilder.loadTexts: psSystemInternalQueueEntry.setStatus('current')
if mibBuilder.loadTexts: psSystemInternalQueueEntry.setDescription('This row contains the statistics for a given internal queue in the system')
psSystemInternalQueueIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 6, 9, 1, 2, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psSystemInternalQueueIndex.setStatus('current')
if mibBuilder.loadTexts: psSystemInternalQueueIndex.setDescription('This integer represents an index to an internal queue in the system.')
psSystemInternalQueueName = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 6, 9, 1, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psSystemInternalQueueName.setStatus('current')
if mibBuilder.loadTexts: psSystemInternalQueueName.setDescription('This string represents the name of an internal queue.')
psSystemInternalQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 6, 9, 1, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psSystemInternalQueueSize.setStatus('current')
if mibBuilder.loadTexts: psSystemInternalQueueSize.setDescription('The number of sample elements that the average, minimum and maximum holding time were calculated from.')
psSystemInternalQueueTimeAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 6, 9, 1, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psSystemInternalQueueTimeAvg.setStatus('current')
if mibBuilder.loadTexts: psSystemInternalQueueTimeAvg.setDescription('The average queue holding time. Note that this value is in 1/1000 of millisec, i.e. divide by 1000 to get the value in milliseconds.')
psSystemInternalQueueTimeMin = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 6, 9, 1, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psSystemInternalQueueTimeMin.setStatus('current')
if mibBuilder.loadTexts: psSystemInternalQueueTimeMin.setDescription('The smallest queue sample holding time.')
psSystemInternalQueueTimeMax = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 6, 9, 1, 2, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psSystemInternalQueueTimeMax.setStatus('current')
if mibBuilder.loadTexts: psSystemInternalQueueTimeMax.setDescription('The biggest queue sample holding time.')
psSystemInternalQueueTimeMaxTimestamp = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 6, 9, 1, 2, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psSystemInternalQueueTimeMaxTimestamp.setStatus('obsolete')
if mibBuilder.loadTexts: psSystemInternalQueueTimeMaxTimestamp.setDescription('This counter was replaced by psSystemInternalQueueTimeMaxTimestampMSB and psSystemInternalQueueTimeMaxTimestampLSB.')
psSystemInternalQueueLengthCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 6, 9, 1, 2, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psSystemInternalQueueLengthCurrent.setStatus('current')
if mibBuilder.loadTexts: psSystemInternalQueueLengthCurrent.setDescription('The number of elements currently hold in the queue.')
psSystemInternalQueueLengthAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 6, 9, 1, 2, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psSystemInternalQueueLengthAvg.setStatus('current')
if mibBuilder.loadTexts: psSystemInternalQueueLengthAvg.setDescription('The average number of elements simultaneously held in the queue multiple by 1000. Divide by 1000 to get the value in units.')
psSystemInternalQueueLengthMax = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 6, 9, 1, 2, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psSystemInternalQueueLengthMax.setStatus('current')
if mibBuilder.loadTexts: psSystemInternalQueueLengthMax.setDescription('The maximum number of elements simultaneously held in the queue multiple by 1000. Divide by 1000 to get the value in units.')
psSystemInternalQueueLengthMaxTimestamp = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 6, 9, 1, 2, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psSystemInternalQueueLengthMaxTimestamp.setStatus('obsolete')
if mibBuilder.loadTexts: psSystemInternalQueueLengthMaxTimestamp.setDescription('This counter was replaced with psSystemInternalQueueLengthMaxTimestampMSB and psSystemInternalQueueLengthMaxTimestampLSB.')
psSystemInternalQueueTimeMaxTimestampMSB = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 6, 9, 1, 2, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psSystemInternalQueueTimeMaxTimestampMSB.setStatus('current')
if mibBuilder.loadTexts: psSystemInternalQueueTimeMaxTimestampMSB.setDescription('The most significant part of the timestamp (4 most significant bytes) of when psSystemInternalQueueTimeMax was obtained.')
psSystemInternalQueueLengthMaxTimestampMSB = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 6, 9, 1, 2, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psSystemInternalQueueLengthMaxTimestampMSB.setStatus('current')
if mibBuilder.loadTexts: psSystemInternalQueueLengthMaxTimestampMSB.setDescription('The most significant part of the timestamp (4 most significant bytes) of when psSystemInternalQueueLengthMax was obtained.')
psSystemInternalQueueLengthMaxTimestampLSB = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 6, 9, 1, 2, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psSystemInternalQueueLengthMaxTimestampLSB.setStatus('current')
if mibBuilder.loadTexts: psSystemInternalQueueLengthMaxTimestampLSB.setDescription('The least significant part of the timestamp (4 least significant bytes) of when psSystemInternalQueueLengthMax was obtained.')
psSystemInternalQueueTimeMaxTimestampLSB = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 6, 9, 1, 2, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psSystemInternalQueueTimeMaxTimestampLSB.setStatus('current')
if mibBuilder.loadTexts: psSystemInternalQueueTimeMaxTimestampLSB.setDescription('The least significant part of the timestamp (4 least significant bytes) of when psSystemInternalQueueTimeMax was obtained.')
bwLDAPIntegrationNumQueryAttempts = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 6, 5, 1), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwLDAPIntegrationNumQueryAttempts.setStatus('current')
if mibBuilder.loadTexts: bwLDAPIntegrationNumQueryAttempts.setDescription('Total number of query attempts to an LDAP server by LDAP Integration feature system-wide.')
bwLDAPIntegrationNumConnectionFailures = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 6, 5, 2), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwLDAPIntegrationNumConnectionFailures.setStatus('current')
if mibBuilder.loadTexts: bwLDAPIntegrationNumConnectionFailures.setDescription('Total number of connection failures to a LDAP server system-wide made by LDAP Integration feature.')
bwCommonCommPSStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 6, 10, 1, 1), )
if mibBuilder.loadTexts: bwCommonCommPSStatsTable.setStatus('current')
if mibBuilder.loadTexts: bwCommonCommPSStatsTable.setDescription('This table contains counters for BCCT for the PS process.')
bwCommonCommPSStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 6, 10, 1, 1, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwCommonCommPSStatsIndex"))
if mibBuilder.loadTexts: bwCommonCommPSStatsEntry.setStatus('current')
if mibBuilder.loadTexts: bwCommonCommPSStatsEntry.setDescription('Definition of the entries for bwCommonCommPSStatsTable.')
bwCommonCommPSStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 6, 10, 1, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwCommonCommPSStatsIndex.setStatus('current')
if mibBuilder.loadTexts: bwCommonCommPSStatsIndex.setDescription('This integer represents an index in table bwCommonCommPSStatsTable. The index represents a connection for a specific Host-Interfacece-Protocol combination.')
bwCommonCommPSHost = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 6, 10, 1, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwCommonCommPSHost.setStatus('current')
if mibBuilder.loadTexts: bwCommonCommPSHost.setDescription('The address of a host connected to the BroadWorks Common Communication Protocol.')
bwCommonCommPSInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 6, 10, 1, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwCommonCommPSInterface.setStatus('current')
if mibBuilder.loadTexts: bwCommonCommPSInterface.setDescription('The IP address of a local interface that a protocol is bound to.')
bwCommonCommPSProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 6, 10, 1, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwCommonCommPSProtocol.setStatus('current')
if mibBuilder.loadTexts: bwCommonCommPSProtocol.setDescription('The name of a BroadWorks Common Communication Protocol client protocol, e.g. OCI or SyncApi.')
bwCommonCommPSAcceptedOutboundConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 6, 10, 1, 1, 1, 5), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCommonCommPSAcceptedOutboundConnections.setStatus('current')
if mibBuilder.loadTexts: bwCommonCommPSAcceptedOutboundConnections.setDescription('This counter is incremented whenever a client in this process connects to the framework to a remote host, using the interface and protocol.')
bwCommonCommPSAcceptedInboundConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 6, 10, 1, 1, 1, 6), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCommonCommPSAcceptedInboundConnections.setStatus('current')
if mibBuilder.loadTexts: bwCommonCommPSAcceptedInboundConnections.setDescription('This counter is incremented whenever a client in this process connects to the framework from a remote host, using the interface and protocol.')
bwCommonCommPSRejectedOutboundConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 6, 10, 1, 1, 1, 7), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCommonCommPSRejectedOutboundConnections.setStatus('current')
if mibBuilder.loadTexts: bwCommonCommPSRejectedOutboundConnections.setDescription('This counter is incremented whenever a client connection request going from this process to a remote host and going through this interface has been rejected for a particular protocol.')
bwCommonCommPSRejectedInboundConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 6, 10, 1, 1, 1, 8), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCommonCommPSRejectedInboundConnections.setStatus('current')
if mibBuilder.loadTexts: bwCommonCommPSRejectedInboundConnections.setDescription('This counter is incremented whenever a client connection request coming to this host and going through this interface has been rejected by the framework for a particular protocol.')
bwCommonCommPSOutputMessagesProcessed = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 6, 10, 1, 1, 1, 9), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCommonCommPSOutputMessagesProcessed.setStatus('current')
if mibBuilder.loadTexts: bwCommonCommPSOutputMessagesProcessed.setDescription('This counter is incremented whenever a message has been sent and processed for this host, interface and protocol.')
bwCommonCommPSInputMessagesProcessed = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 6, 10, 1, 1, 1, 10), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCommonCommPSInputMessagesProcessed.setStatus('current')
if mibBuilder.loadTexts: bwCommonCommPSInputMessagesProcessed.setDescription('This counter is incremented whenever a message has been received and processed for this host, interface and protocol.')
bwCommonCommPSOutputCommunicationErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 6, 10, 1, 1, 1, 11), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCommonCommPSOutputCommunicationErrors.setStatus('current')
if mibBuilder.loadTexts: bwCommonCommPSOutputCommunicationErrors.setDescription('This counter is incremented whenever a message could not be read because the TCP stack returned an error.')
bwCommonCommPSInputCommunicationErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 6, 10, 1, 1, 1, 12), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCommonCommPSInputCommunicationErrors.setStatus('current')
if mibBuilder.loadTexts: bwCommonCommPSInputCommunicationErrors.setDescription('This counter is incremented whenever a message has been sent and processed for this host, interface and protocol.')
bwPSMonitoringExecutorTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 6, 12, 1, 1), )
if mibBuilder.loadTexts: bwPSMonitoringExecutorTable.setStatus('current')
if mibBuilder.loadTexts: bwPSMonitoringExecutorTable.setDescription('This table contains counters for the concurrent framework.')
bwPSMonitoringExecutorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 6, 12, 1, 1, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwPSMonitoringExecutorIndex"))
if mibBuilder.loadTexts: bwPSMonitoringExecutorEntry.setStatus('current')
if mibBuilder.loadTexts: bwPSMonitoringExecutorEntry.setDescription('Definition of the entries for bwPSMonitoringExecutorTable.')
bwPSMonitoringExecutorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 6, 12, 1, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwPSMonitoringExecutorIndex.setStatus('current')
if mibBuilder.loadTexts: bwPSMonitoringExecutorIndex.setDescription('This integer represents an index in table bwPSMonitoringExecutorTable. This is the index to a specific Monitoring Executor name.')
bwPSMonitoringExecutorName = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 6, 12, 1, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwPSMonitoringExecutorName.setStatus('current')
if mibBuilder.loadTexts: bwPSMonitoringExecutorName.setDescription('The name of the Monitoring Executor - Names are internally defined at the application level.')
bwPSMonitoringExecutorCurrentPoolSize = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 6, 12, 1, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwPSMonitoringExecutorCurrentPoolSize.setStatus('current')
if mibBuilder.loadTexts: bwPSMonitoringExecutorCurrentPoolSize.setDescription('The current thread pool size')
bwPSMonitoringExecutorMaxPoolSize = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 6, 12, 1, 1, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwPSMonitoringExecutorMaxPoolSize.setStatus('current')
if mibBuilder.loadTexts: bwPSMonitoringExecutorMaxPoolSize.setDescription('The maximum thread pool size')
bwPSMonitoringExecutorAvgActiveThreads = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 6, 12, 1, 1, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwPSMonitoringExecutorAvgActiveThreads.setStatus('current')
if mibBuilder.loadTexts: bwPSMonitoringExecutorAvgActiveThreads.setDescription('The average number of active threads, rounded up')
bwPSMonitoringExecutorTaskQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 6, 12, 1, 1, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwPSMonitoringExecutorTaskQueueSize.setStatus('current')
if mibBuilder.loadTexts: bwPSMonitoringExecutorTaskQueueSize.setDescription('Number of tasks in the queue (includes scheduled and recurring tasks)')
bwPSMonitoringExecutorNbTasksRun = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 6, 12, 1, 1, 1, 7), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwPSMonitoringExecutorNbTasksRun.setStatus('current')
if mibBuilder.loadTexts: bwPSMonitoringExecutorNbTasksRun.setDescription('Number of tasks run')
bwPSMonitoringExecutorNbWarnings = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 6, 12, 1, 1, 1, 8), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwPSMonitoringExecutorNbWarnings.setStatus('current')
if mibBuilder.loadTexts: bwPSMonitoringExecutorNbWarnings.setDescription('Number of warnings that occured')
bwPSMonitoringExecutorNbErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 6, 12, 1, 1, 1, 9), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwPSMonitoringExecutorNbErrors.setStatus('current')
if mibBuilder.loadTexts: bwPSMonitoringExecutorNbErrors.setDescription('Number of errors that occured')
bwPSMonitoringExecutorLongestTaskMs = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 6, 12, 1, 1, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwPSMonitoringExecutorLongestTaskMs.setStatus('current')
if mibBuilder.loadTexts: bwPSMonitoringExecutorLongestTaskMs.setDescription('Longest completed task execution time in milliseconds')
bwPSMonitoringExecutorLongestTaskName = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 6, 12, 1, 1, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwPSMonitoringExecutorLongestTaskName.setStatus('current')
if mibBuilder.loadTexts: bwPSMonitoringExecutorLongestTaskName.setDescription('Longest completed task name')
bwPSTcpServersStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 6, 11, 1, 1), )
if mibBuilder.loadTexts: bwPSTcpServersStatsTable.setStatus('current')
if mibBuilder.loadTexts: bwPSTcpServersStatsTable.setDescription('This table contains counters for TCP underlying framework for the PS process.')
bwPSTcpServersStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 6, 11, 1, 1, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwPSTcpServersStatsIndex"))
if mibBuilder.loadTexts: bwPSTcpServersStatsEntry.setStatus('current')
if mibBuilder.loadTexts: bwPSTcpServersStatsEntry.setDescription('Definition of the entries for bwPSTcpServersStatsTable.')
bwPSTcpServersStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 6, 11, 1, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwPSTcpServersStatsIndex.setStatus('current')
if mibBuilder.loadTexts: bwPSTcpServersStatsIndex.setDescription('This integer represents an index in table bwPSTcpServersStatsTable. This is the index to a specific TCP server name.')
bwPSTcpServersName = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 6, 11, 1, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwPSTcpServersName.setStatus('current')
if mibBuilder.loadTexts: bwPSTcpServersName.setDescription('The name of TCP server - Names are internally defined at at the application level.')
bwPSTcpServersNbConnectionsAccepted = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 6, 11, 1, 1, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwPSTcpServersNbConnectionsAccepted.setStatus('current')
if mibBuilder.loadTexts: bwPSTcpServersNbConnectionsAccepted.setDescription('This counter represents the number of connections accepted by the TCP server.')
bwPSTcpServersNbConnectionsRefused = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 6, 11, 1, 1, 1, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwPSTcpServersNbConnectionsRefused.setStatus('current')
if mibBuilder.loadTexts: bwPSTcpServersNbConnectionsRefused.setDescription('This counter represents the number of connections refused by the TCP server.')
bwPSTcpServersNbConnectionsInitiated = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 6, 11, 1, 1, 1, 5), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwPSTcpServersNbConnectionsInitiated.setStatus('current')
if mibBuilder.loadTexts: bwPSTcpServersNbConnectionsInitiated.setDescription('This counter represents the number of connections initiated by the TCP server.')
bwPSTcpServersNbConnectionsClosed = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 6, 11, 1, 1, 1, 6), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwPSTcpServersNbConnectionsClosed.setStatus('current')
if mibBuilder.loadTexts: bwPSTcpServersNbConnectionsClosed.setDescription('This counter represents the number of connections closed by the TCP server or remote hosts.')
bwPSTcpServersNbBytesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 6, 11, 1, 1, 1, 7), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwPSTcpServersNbBytesSent.setStatus('current')
if mibBuilder.loadTexts: bwPSTcpServersNbBytesSent.setDescription('This counter represents the number of bytes sent by the TCP server.')
bwPSTcpServersNbBytesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 6, 11, 1, 1, 1, 8), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwPSTcpServersNbBytesReceived.setStatus('current')
if mibBuilder.loadTexts: bwPSTcpServersNbBytesReceived.setDescription('This counter represents the number of bytes received by the TCP server.')
bwPSTcpServersOutgoingQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 6, 11, 1, 1, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwPSTcpServersOutgoingQueueSize.setStatus('current')
if mibBuilder.loadTexts: bwPSTcpServersOutgoingQueueSize.setDescription('This counter represents the number of bytes in the outgoing queue.')
bwPSTcpServersIncomingQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 6, 11, 1, 1, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwPSTcpServersIncomingQueueSize.setStatus('current')
if mibBuilder.loadTexts: bwPSTcpServersIncomingQueueSize.setDescription('This counter represents the number of bytes in the incoming queue.')
bwPSTcpServersNbBytesSentSecure = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 6, 11, 1, 1, 1, 11), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwPSTcpServersNbBytesSentSecure.setStatus('current')
if mibBuilder.loadTexts: bwPSTcpServersNbBytesSentSecure.setDescription('This counter represents the number of bytes sent by the TCP server over secure connections.')
bwPSTcpServersNbBytesReceivedSecure = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 6, 11, 1, 1, 1, 12), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwPSTcpServersNbBytesReceivedSecure.setStatus('current')
if mibBuilder.loadTexts: bwPSTcpServersNbBytesReceivedSecure.setDescription('This counter represents the number of bytes received by the TCP server over secure connections.')
bwActivatableFeatureTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 6, 13, 1, 1), )
if mibBuilder.loadTexts: bwActivatableFeatureTable.setStatus('current')
if mibBuilder.loadTexts: bwActivatableFeatureTable.setDescription('This table contains the activatable feature status.')
bwActivatableFeatureEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 6, 13, 1, 1, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "bwActivatableFeatureIndex"))
if mibBuilder.loadTexts: bwActivatableFeatureEntry.setStatus('current')
if mibBuilder.loadTexts: bwActivatableFeatureEntry.setDescription('This row contains the activatable feature status.')
bwActivatableFeatureIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 6, 13, 1, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwActivatableFeatureIndex.setStatus('current')
if mibBuilder.loadTexts: bwActivatableFeatureIndex.setDescription('This integer is an index of the activatable feature installed on the system.')
bwActivatableFeatureId = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 6, 13, 1, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwActivatableFeatureId.setStatus('current')
if mibBuilder.loadTexts: bwActivatableFeatureId.setDescription('This string represents the activatable feature identifier.')
bwActivatableFeatureDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 6, 13, 1, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwActivatableFeatureDescription.setStatus('current')
if mibBuilder.loadTexts: bwActivatableFeatureDescription.setDescription("This string holds the activatable feature's description.")
bwActivatableFeatureActivated = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 6, 13, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notActive", 0), ("active", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwActivatableFeatureActivated.setStatus('current')
if mibBuilder.loadTexts: bwActivatableFeatureActivated.setDescription('This integer holds the state of the activatable feature.')
bwShInterfaceRequestsIn = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 6, 14, 1, 1), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwShInterfaceRequestsIn.setStatus('current')
if mibBuilder.loadTexts: bwShInterfaceRequestsIn.setDescription('This counter holds the number of times an Sh Interface request is received.')
bwShInterfaceRequestsOut = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 6, 14, 1, 2), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwShInterfaceRequestsOut.setStatus('current')
if mibBuilder.loadTexts: bwShInterfaceRequestsOut.setDescription('This counter holds the number of times an Sh Interface request is transmitted.')
bwShInterfaceResponsesIn = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 6, 14, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwShInterfaceResponsesIn.setStatus('current')
if mibBuilder.loadTexts: bwShInterfaceResponsesIn.setDescription('This counter holds the number of times an Sh Interface answer is received.')
bwShInterfaceResponsesOut = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 6, 14, 1, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwShInterfaceResponsesOut.setStatus('current')
if mibBuilder.loadTexts: bwShInterfaceResponsesOut.setDescription('This counter holds the number of times an Sh Interface answer is transmitted.')
bwShInterfaceRequestTimeout = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 6, 14, 1, 5), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwShInterfaceRequestTimeout.setStatus('current')
if mibBuilder.loadTexts: bwShInterfaceRequestTimeout.setDescription('This counter holds the number of times an Sh Interface request timer expired prior to receipt of corresponding answer.')
bwShInterfaceRequestResourceLimitation = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 6, 14, 1, 6), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwShInterfaceRequestResourceLimitation.setStatus('current')
if mibBuilder.loadTexts: bwShInterfaceRequestResourceLimitation.setDescription('This counter holds the number of times an Sh Interface request could not be sent due to local resource limitation.')
bwShInterfaceUserDataRequest = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 6, 14, 1, 7), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwShInterfaceUserDataRequest.setStatus('current')
if mibBuilder.loadTexts: bwShInterfaceUserDataRequest.setDescription('This counter holds the number of times a User-Data-Request is transmitted.')
bwShInterfaceUserDataRequestFailure = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 6, 14, 1, 8), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwShInterfaceUserDataRequestFailure.setStatus('current')
if mibBuilder.loadTexts: bwShInterfaceUserDataRequestFailure.setDescription('This counter holds the number of times the User-Data-Request resulted in a failure.')
bwShInterfaceSubscribeNotificationsRequest = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 6, 14, 1, 9), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwShInterfaceSubscribeNotificationsRequest.setStatus('current')
if mibBuilder.loadTexts: bwShInterfaceSubscribeNotificationsRequest.setDescription('This counter holds the number of times a Subscribe-Notifications-Request is transmitted.')
bwShInterfaceSubscribeNotificationsRequestFailure = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 6, 14, 1, 10), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwShInterfaceSubscribeNotificationsRequestFailure.setStatus('current')
if mibBuilder.loadTexts: bwShInterfaceSubscribeNotificationsRequestFailure.setDescription('This counter holds the number of times the Subscribe-Notifications-Request resulted in a failure.')
bwShInterfacePushNotificationRequest = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 6, 14, 1, 11), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwShInterfacePushNotificationRequest.setStatus('current')
if mibBuilder.loadTexts: bwShInterfacePushNotificationRequest.setDescription('This counter holds the number of times a Push-Notification-Request is received.')
bwShInterfacePushNotificationRequestFailure = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 6, 14, 1, 12), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwShInterfacePushNotificationRequestFailure.setStatus('current')
if mibBuilder.loadTexts: bwShInterfacePushNotificationRequestFailure.setDescription('This counter holds the number of times the Push-Notifications-Request resulted in a failure.')
bwShInterfacePublicIdentityRefreshInitiated = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 6, 14, 1, 13), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwShInterfacePublicIdentityRefreshInitiated.setStatus('current')
if mibBuilder.loadTexts: bwShInterfacePublicIdentityRefreshInitiated.setDescription('This counter holds the number of times the Public Identity refresh procedure is dispatched.')
bwShInterfacePublicIdentityRefreshFailure = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 6, 14, 1, 14), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwShInterfacePublicIdentityRefreshFailure.setStatus('current')
if mibBuilder.loadTexts: bwShInterfacePublicIdentityRefreshFailure.setDescription('This counter holds the number of times the Public Identity refresh procedure ended in failure.')
bwShInterfaceSystemRefreshInitiated = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 6, 14, 1, 15), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwShInterfaceSystemRefreshInitiated.setStatus('current')
if mibBuilder.loadTexts: bwShInterfaceSystemRefreshInitiated.setDescription('This counter holds the number of times the system refresh procedure is dispatched.')
psBwVMRNumLoginAttempts = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 6, 15, 1, 1), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psBwVMRNumLoginAttempts.setStatus('current')
if mibBuilder.loadTexts: psBwVMRNumLoginAttempts.setDescription('This counter is incremented when the PS receives a request to verify authentication of user by DN and passcode.')
psBwVMRNumLoginFailures = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 6, 15, 1, 2), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psBwVMRNumLoginFailures.setStatus('current')
if mibBuilder.loadTexts: psBwVMRNumLoginFailures.setDescription('This counter is incremented when the request to verify authentication of user by DN and passcode fails.')
psBwVMRSPTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 6, 15, 1, 3), )
if mibBuilder.loadTexts: psBwVMRSPTable.setStatus('current')
if mibBuilder.loadTexts: psBwVMRSPTable.setDescription('This table contains the counters for PS Voice Messaging measurements for service providers')
psBwVMRSPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 6, 15, 1, 3, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "psBwVMRSPIndex"))
if mibBuilder.loadTexts: psBwVMRSPEntry.setStatus('current')
if mibBuilder.loadTexts: psBwVMRSPEntry.setDescription('This row contains the voice messaging statistics for a given service provider in the system')
psBwVMRSPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 6, 15, 1, 3, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psBwVMRSPIndex.setStatus('current')
if mibBuilder.loadTexts: psBwVMRSPIndex.setDescription('This integer represents a service provider index in the system')
psBwVMRSPID = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 6, 15, 1, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psBwVMRSPID.setStatus('current')
if mibBuilder.loadTexts: psBwVMRSPID.setDescription('This string represents a Service Provider ID.')
psBwVMRSPNumLoginAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 6, 15, 1, 3, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psBwVMRSPNumLoginAttempts.setStatus('current')
if mibBuilder.loadTexts: psBwVMRSPNumLoginAttempts.setDescription('This counter is incremented when the PS receives a request to verify authentication of user by DN and passcode under the service provider.')
psBwVMRSPNumLoginFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 6, 15, 1, 3, 1, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psBwVMRSPNumLoginFailures.setStatus('current')
if mibBuilder.loadTexts: psBwVMRSPNumLoginFailures.setDescription('This counter is incremented when the request to verify authentication of user by DN and passcode fails under the service provider.')
psBwVMRGroupTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 6, 15, 1, 4), )
if mibBuilder.loadTexts: psBwVMRGroupTable.setStatus('current')
if mibBuilder.loadTexts: psBwVMRGroupTable.setDescription('This table contains the counters for PS Voice Messaging measurements for groups')
psBwVMRGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 6, 15, 1, 4, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "psBwVMRGroupIndex"))
if mibBuilder.loadTexts: psBwVMRGroupEntry.setStatus('current')
if mibBuilder.loadTexts: psBwVMRGroupEntry.setDescription('This row contains the voice messaging statistics for a given service provider in the system')
psBwVMRGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 6, 15, 1, 4, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psBwVMRGroupIndex.setStatus('current')
if mibBuilder.loadTexts: psBwVMRGroupIndex.setDescription('This integer represents a service provider index in the system')
psBwVMRGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 6, 15, 1, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psBwVMRGroupID.setStatus('current')
if mibBuilder.loadTexts: psBwVMRGroupID.setDescription('This string represents a Group ID.')
psBwVMRGroupNumLoginAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 6, 15, 1, 4, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psBwVMRGroupNumLoginAttempts.setStatus('current')
if mibBuilder.loadTexts: psBwVMRGroupNumLoginAttempts.setDescription('This counter is incremented when the PS receives a request to verify authentication of user by DN and passcode under the group.')
psBwVMRGroupNumLoginFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 6, 15, 1, 4, 1, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psBwVMRGroupNumLoginFailures.setStatus('current')
if mibBuilder.loadTexts: psBwVMRGroupNumLoginFailures.setDescription('This counter is incremented when the request to verify authentication of user by DN and passcode fails under the group.')
bwPolycomPhoneDirectoryNumDownloads = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 6, 15, 2, 1), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwPolycomPhoneDirectoryNumDownloads.setStatus('current')
if mibBuilder.loadTexts: bwPolycomPhoneDirectoryNumDownloads.setDescription('This counter reflects the number of times devices download a Polycom phone directory from the system.')
polycomSPTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 6, 15, 2, 2), )
if mibBuilder.loadTexts: polycomSPTable.setStatus('current')
if mibBuilder.loadTexts: polycomSPTable.setDescription('Each row contains the service counters for the Polycom Phone service for each service provider in the system')
polycomSPTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 6, 15, 2, 2, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "polycomSPIndex"))
if mibBuilder.loadTexts: polycomSPTableEntry.setStatus('current')
if mibBuilder.loadTexts: polycomSPTableEntry.setDescription('Each row contains the service counters for the Polycom Phone service for each service provider in the system')
polycomSPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 6, 15, 2, 2, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: polycomSPIndex.setStatus('current')
if mibBuilder.loadTexts: polycomSPIndex.setDescription('This column represents the index of the Service Provider in the system.')
polycomSPID = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 6, 15, 2, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: polycomSPID.setStatus('current')
if mibBuilder.loadTexts: polycomSPID.setDescription('This string represents a Service Provider ID.')
bwPolycomPhoneDirectorySPNumDownloads = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 6, 15, 2, 2, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwPolycomPhoneDirectorySPNumDownloads.setStatus('current')
if mibBuilder.loadTexts: bwPolycomPhoneDirectorySPNumDownloads.setDescription('This counter reflects the number of times devices download a Polycom phone directory from the system, one counter per service provider/enterprise.')
polycomGroupTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 6, 15, 2, 3), )
if mibBuilder.loadTexts: polycomGroupTable.setStatus('current')
if mibBuilder.loadTexts: polycomGroupTable.setDescription('Each row contains the service counters for the Polycom Phone service for each group in the system')
polycomGroupTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 6, 15, 2, 3, 1), ).setIndexNames((0, "BW-BroadworksApplicationServer", "polycomGroupIndex"))
if mibBuilder.loadTexts: polycomGroupTableEntry.setStatus('current')
if mibBuilder.loadTexts: polycomGroupTableEntry.setDescription('Each row contains the service counters for the Polycom Phone service for each group in the system')
polycomGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 6, 15, 2, 3, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: polycomGroupIndex.setStatus('current')
if mibBuilder.loadTexts: polycomGroupIndex.setDescription('This column represents the index of the Group in the system.')
polycomGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 6, 15, 2, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: polycomGroupID.setStatus('current')
if mibBuilder.loadTexts: polycomGroupID.setDescription('This string represents a Group ID.')
bwPolycomPhoneDirectoryGroupNumDownloads = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 6, 15, 2, 3, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwPolycomPhoneDirectoryGroupNumDownloads.setStatus('current')
if mibBuilder.loadTexts: bwPolycomPhoneDirectoryGroupNumDownloads.setDescription('This counter reflects the number of times devices download a Polycom phone directory from the system, one counter per group.')
resetAllCounters = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 2, 17, 1), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: resetAllCounters.setStatus('current')
if mibBuilder.loadTexts: resetAllCounters.setDescription('When set to a value other then 0, all the counters in the system are reset to 0.')
psReservedCounter = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 6, 999, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psReservedCounter.setStatus('obsolete')
if mibBuilder.loadTexts: psReservedCounter.setDescription('Temporary place holder. Unused counter.')
bwAsMibGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1000, 1))
bwAsMibCompliancy = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1000, 2))
bwAsMgcpGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1000, 1, 1)).setObjects(("BW-BroadworksApplicationServer", "bwMGCPStatsMGCPCommandOuts"), ("BW-BroadworksApplicationServer", "bwMGCPStatsMGCPCommandIns"), ("BW-BroadworksApplicationServer", "bwMGCPStatsMGCPResponseOuts"), ("BW-BroadworksApplicationServer", "bwMGCPStatsMGCPResponseIns"), ("BW-BroadworksApplicationServer", "bwMGCPStatsAuditConnectionOuts"), ("BW-BroadworksApplicationServer", "bwMGCPStatsAuditEndpointOuts"), ("BW-BroadworksApplicationServer", "bwMGCPStatsCreateConnectionOuts"), ("BW-BroadworksApplicationServer", "bwMGCPStatsDeleteAgentConnectionOuts"), ("BW-BroadworksApplicationServer", "bwMGCPStatsDeleteConnectionOuts"), ("BW-BroadworksApplicationServer", "bwMGCPStatsDeleteGatewayConnectionIns"), ("BW-BroadworksApplicationServer", "bwMGCPStatsEndpointConfigurationOuts"), ("BW-BroadworksApplicationServer", "bwMGCPStatsExtraCommandOuts"), ("BW-BroadworksApplicationServer", "bwMGCPStatsModifyConnectionOuts"), ("BW-BroadworksApplicationServer", "bwMGCPStatsNotificationRequestOuts"), ("BW-BroadworksApplicationServer", "bwMGCPStatsNotifyIns"), ("BW-BroadworksApplicationServer", "bwMGCPStatsRestartInProgressIns"), ("BW-BroadworksApplicationServer", "bwMGCPStatsMGCPCommandResponseTable"), ("BW-BroadworksApplicationServer", "bwMGCPStatsMGCPCommandResponseCodeValue"), ("BW-BroadworksApplicationServer", "bwMGCPStatsMGCPCommandResponseOuts"), ("BW-BroadworksApplicationServer", "bwMGCPStatsMGCPCommandResponseIns"), ("BW-BroadworksApplicationServer", "bwMGCPStatsAuditConnectionResponseTable"), ("BW-BroadworksApplicationServer", "bwMGCPStatsAuditConnectionResponseCodeValue"), ("BW-BroadworksApplicationServer", "bwMGCPStatsAuditConnectionResponseIns"), ("BW-BroadworksApplicationServer", "bwMGCPStatsAuditEndpointResponseTable"), ("BW-BroadworksApplicationServer", "bwMGCPStatsAuditEndpointResponseCodeValue"), ("BW-BroadworksApplicationServer", "bwMGCPStatsAuditEndpointResponseIns"), ("BW-BroadworksApplicationServer", "bwMGCPStatsCreateConnectionResponseTable"), ("BW-BroadworksApplicationServer", "bwMGCPStatsCreateConnectionResponseCodeValue"), ("BW-BroadworksApplicationServer", "bwMGCPStatsCreateConnectionResponseIns"), ("BW-BroadworksApplicationServer", "bwMGCPStatsDeleteConnectionResponseTable"), ("BW-BroadworksApplicationServer", "bwMGCPStatsDeleteConnectionResponseCodeValue"), ("BW-BroadworksApplicationServer", "bwMGCPStatsDeleteAgentConnectionResponseIns"), ("BW-BroadworksApplicationServer", "bwMGCPStatsDeleteConnectionResponseIns"), ("BW-BroadworksApplicationServer", "bwMGCPStatsDeleteGatewayConnectionResponseOuts"), ("BW-BroadworksApplicationServer", "bwMGCPStatsEndpointConfigurationResponseTable"), ("BW-BroadworksApplicationServer", "bwMGCPStatsEndpointConfigurationResponseCodeValue"), ("BW-BroadworksApplicationServer", "bwMGCPStatsEndpointConfigurationResponseIns"), ("BW-BroadworksApplicationServer", "bwMGCPStatsExtraCommandResponseTable"), ("BW-BroadworksApplicationServer", "bwMGCPStatsExtraCommandResponseCodeValue"), ("BW-BroadworksApplicationServer", "bwMGCPStatsExtraCommandResponseIns"), ("BW-BroadworksApplicationServer", "bwMGCPStatsModifyConnectionResponseTable"), ("BW-BroadworksApplicationServer", "bwMGCPStatsModifyConnectionResponseCodeValue"), ("BW-BroadworksApplicationServer", "bwMGCPStatsModifyConnectionResponseIns"), ("BW-BroadworksApplicationServer", "bwMGCPStatsNotificationRequestResponseTable"), ("BW-BroadworksApplicationServer", "bwMGCPStatsNotificationRequestResponseCodeValue"), ("BW-BroadworksApplicationServer", "bwMGCPStatsNotificationRequestResponseIns"), ("BW-BroadworksApplicationServer", "bwMGCPStatsNotifyResponseTable"), ("BW-BroadworksApplicationServer", "bwMGCPStatsNotifyResponseCodeValue"), ("BW-BroadworksApplicationServer", "bwMGCPStatsNotifyResponseOuts"), ("BW-BroadworksApplicationServer", "bwMGCPStatsRestartInProgressResponseTable"), ("BW-BroadworksApplicationServer", "bwMGCPStatsRestartInProgressResponseCodeValue"), ("BW-BroadworksApplicationServer", "bwMGCPStatsRestartInProgressResponseOuts"), ("BW-BroadworksApplicationServer", "bwMGCPStatsDialToneDelay"), ("BW-BroadworksApplicationServer", "bwMGCPStatsMinDialToneDelay"), ("BW-BroadworksApplicationServer", "bwMGCPStatsMaxDialToneDelay"), ("BW-BroadworksApplicationServer", "bwMGCPStatsSetupSignalDelay"), ("BW-BroadworksApplicationServer", "bwMGCPStatsMinSetupSignalDelay"), ("BW-BroadworksApplicationServer", "bwMGCPStatsMaxSetupSignalDelay"), ("BW-BroadworksApplicationServer", "bwMGCPStatsAnswerSignalDelay"), ("BW-BroadworksApplicationServer", "bwMGCPStatsMinAnswerSignalDelay"), ("BW-BroadworksApplicationServer", "bwMGCPStatsMaxAnswerSignalDelay"), ("BW-BroadworksApplicationServer", "bwMGCPStatsMessageRetryPercentage"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwAsMgcpGroup = bwAsMgcpGroup.setStatus('current')
if mibBuilder.loadTexts: bwAsMgcpGroup.setDescription('This group defines the statistics for the MGCP protocol.')
bwAsMcpGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1000, 1, 2)).setObjects(("BW-BroadworksApplicationServer", "bwMCPCommandsTransmitted"), ("BW-BroadworksApplicationServer", "bwMCPCommandsRetransmitted"), ("BW-BroadworksApplicationServer", "bwMCPNotificationsReceived"), ("BW-BroadworksApplicationServer", "bwMCPResourceAllocAttempts"), ("BW-BroadworksApplicationServer", "bwMCPResourceAllocFailures"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwAsMcpGroup = bwAsMcpGroup.setStatus('current')
if mibBuilder.loadTexts: bwAsMcpGroup.setDescription('This group defines the statistics for the MCP protocol.')
bwAsImsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1000, 1, 3)).setObjects(("BW-BroadworksApplicationServer", "bwIMSSuccessfulConnectionAttempts"), ("BW-BroadworksApplicationServer", "bwIMSUnsuccessfulConnectionAttempts"), ("BW-BroadworksApplicationServer", "bwIMSSuccessfulDownLoadAttempts"), ("BW-BroadworksApplicationServer", "bwIMSUnsuccessfulDownLoadAttempts"), ("BW-BroadworksApplicationServer", "bwIMSMaxSessions"), ("BW-BroadworksApplicationServer", "bwIMSAvgSessions"), ("BW-BroadworksApplicationServer", "bwIMSMaxThreads"), ("BW-BroadworksApplicationServer", "bwIMSAvgThreads"), ("BW-BroadworksApplicationServer", "bwIMSMaxServiceTime"), ("BW-BroadworksApplicationServer", "bwIMSAvgServiceTime"), ("BW-BroadworksApplicationServer", "bwIMSNumKeepAlive"), ("BW-BroadworksApplicationServer", "bwIMSNumDroppedRequests"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwAsImsGroup = bwAsImsGroup.setStatus('current')
if mibBuilder.loadTexts: bwAsImsGroup.setDescription('This group defines the statistics for the IMS protocol.')
bwAsCapGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1000, 1, 4)).setObjects(("BW-BroadworksApplicationServer", "bwCAPStatsRegisterRequests"), ("BW-BroadworksApplicationServer", "bwCAPStatsUnRegistersIn"), ("BW-BroadworksApplicationServer", "bwCAPStatsUnRegistersOut"), ("BW-BroadworksApplicationServer", "bwCAPStatsSessionUpdatesOut"), ("BW-BroadworksApplicationServer", "bwCAPStatsProfileUpdatesOut"), ("BW-BroadworksApplicationServer", "bwCAPStatsCallUpdatesOut"), ("BW-BroadworksApplicationServer", "bwCAPStatsCallActionsIn"), ("BW-BroadworksApplicationServer", "bwCAPStatsAcknowledgementsIn"), ("BW-BroadworksApplicationServer", "bwCAPStatsAcknowledgementsOut"), ("BW-BroadworksApplicationServer", "bwCAPStatsAclViolations"), ("BW-BroadworksApplicationServer", "bwCAPStatsUnsuccessfulRegisterResponses"), ("BW-BroadworksApplicationServer", "bwCAPStatsRegisterResponsesTable"), ("BW-BroadworksApplicationServer", "bwCAPStatsCallControlInfosOut"), ("BW-BroadworksApplicationServer", "bwCAPStatsRegisterAuthentications"), ("BW-BroadworksApplicationServer", "bwCAPStatsResponseAuthentications"), ("BW-BroadworksApplicationServer", "bwCAPStatsInfoRequests"), ("BW-BroadworksApplicationServer", "bwCAPStatsInfoResponses"), ("BW-BroadworksApplicationServer", "bwCAPStatsExternalNotifies"), ("BW-BroadworksApplicationServer", "bwCAPMonitoringUsersRequests"), ("BW-BroadworksApplicationServer", "bwCAPMonitoringUsersResponses"), ("BW-BroadworksApplicationServer", "bwCAPStatsQueueUpdatesOut"), ("BW-BroadworksApplicationServer", "bwCAPStatsQueueActionsIn"), ("BW-BroadworksApplicationServer", "bwCAPStatsDatagramsIn"), ("BW-BroadworksApplicationServer", "bwCAPStatsDatagramsOut"), ("BW-BroadworksApplicationServer", "bwCAPStatsTotalMsgs"), ("BW-BroadworksApplicationServer", "bwCAPStatsRegisterResponsesType"), ("BW-BroadworksApplicationServer", "bwCAPStatsRegisterResponses"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwAsCapGroup = bwAsCapGroup.setStatus('current')
if mibBuilder.loadTexts: bwAsCapGroup.setDescription('This group defines the statistics for the CAP protocol.')
bwAsSmdiGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1000, 1, 5)).setObjects(("BW-BroadworksApplicationServer", "bwSmdiNbOfActiveConnection"), ("BW-BroadworksApplicationServer", "bwSmdiNbOfOpenedConnection"), ("BW-BroadworksApplicationServer", "bwSmdiIncomingMWIActivationRequests"), ("BW-BroadworksApplicationServer", "bwSmdiIncomingMWIDesactivationRequests"), ("BW-BroadworksApplicationServer", "bwSmdiInvalidRequestsReceived"), ("BW-BroadworksApplicationServer", "bwSmdiBlockResponsesSent"), ("BW-BroadworksApplicationServer", "bwSmdiInvalidResponsesSent"), ("BW-BroadworksApplicationServer", "bwSmdiOutgoingMWIActivationRequests"), ("BW-BroadworksApplicationServer", "bwSmdiOutgoingMWIDeactivationRequests"), ("BW-BroadworksApplicationServer", "bwSmdiBlockResponsesReceived"), ("BW-BroadworksApplicationServer", "bwSmdiInvalidResponsesReceived"), ("BW-BroadworksApplicationServer", "bwSMDIMessageDeskMessageSent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwAsSmdiGroup = bwAsSmdiGroup.setStatus('current')
if mibBuilder.loadTexts: bwAsSmdiGroup.setDescription('This group defines the statistics for the SMDI protocol.')
bwAsMediaResourceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1000, 1, 6)).setObjects(("BW-BroadworksApplicationServer", "bwMediaCommandsTransmitted"), ("BW-BroadworksApplicationServer", "bwMediaNotificationsReceived"), ("BW-BroadworksApplicationServer", "bwMediaResourceAllocAttempts"), ("BW-BroadworksApplicationServer", "bwMediaResourceAllocFailures"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwAsMediaResourceGroup = bwAsMediaResourceGroup.setStatus('current')
if mibBuilder.loadTexts: bwAsMediaResourceGroup.setDescription('This group defines the statistics for the Media Resource protocol.')
bwAsWholeSalesGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1000, 1, 7)).setObjects(("BW-BroadworksApplicationServer", "bwWSPStatsServiceRequestsIn"), ("BW-BroadworksApplicationServer", "bwWSPStatsServiceActionsOut"), ("BW-BroadworksApplicationServer", "bwWSPStatsServiceUpdatesIn"), ("BW-BroadworksApplicationServer", "bwWSPStatsServiceAcknowledgementsOut"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwAsWholeSalesGroup = bwAsWholeSalesGroup.setStatus('current')
if mibBuilder.loadTexts: bwAsWholeSalesGroup.setDescription('This group defines the statistics for the Whole Sales protocol.')
bwAsRealTimeAccntGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1000, 1, 8)).setObjects(("BW-BroadworksApplicationServer", "bwRealtimeAccountingRequestsTransmitted"), ("BW-BroadworksApplicationServer", "bwRealtimeAccountingRequestsRetransmitted"), ("BW-BroadworksApplicationServer", "bwRealtimeAccountingRequestsDropped"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwAsRealTimeAccntGroup = bwAsRealTimeAccntGroup.setStatus('current')
if mibBuilder.loadTexts: bwAsRealTimeAccntGroup.setDescription('This group defines the statistics for the Real Time Accounting protocol.')
bwAsExtCallLogsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1000, 1, 9)).setObjects(("BW-BroadworksApplicationServer", "bwExternalCallLogsTransmitted"), ("BW-BroadworksApplicationServer", "bwExternalCallLogsRetransmitted"), ("BW-BroadworksApplicationServer", "bwExternalCallLogsDropped"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwAsExtCallLogsGroup = bwAsExtCallLogsGroup.setStatus('current')
if mibBuilder.loadTexts: bwAsExtCallLogsGroup.setDescription('This group defines the statistics for the External Call Logs protocol.')
bwAsXsBcctGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1000, 1, 10)).setObjects(("BW-BroadworksApplicationServer", "bwCommonCommXSStatsTable"), ("BW-BroadworksApplicationServer", "bwCommonCommXSStatsIndex"), ("BW-BroadworksApplicationServer", "bwCommonCommXSHost"), ("BW-BroadworksApplicationServer", "bwCommonCommXSInterface"), ("BW-BroadworksApplicationServer", "bwCommonCommXSProtocol"), ("BW-BroadworksApplicationServer", "bwCommonCommXSAcceptedOutboundConnections"), ("BW-BroadworksApplicationServer", "bwCommonCommXSAcceptedInboundConnections"), ("BW-BroadworksApplicationServer", "bwCommonCommXSRejectedOutboundConnections"), ("BW-BroadworksApplicationServer", "bwCommonCommXSRejectedInboundConnections"), ("BW-BroadworksApplicationServer", "bwCommonCommXSOutputMessagesProcessed"), ("BW-BroadworksApplicationServer", "bwCommonCommXSInputMessagesProcessed"), ("BW-BroadworksApplicationServer", "bwCommonCommXSOutputCommunicationErrors"), ("BW-BroadworksApplicationServer", "bwCommonCommXSInputCommunicationErrors"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwAsXsBcctGroup = bwAsXsBcctGroup.setStatus('current')
if mibBuilder.loadTexts: bwAsXsBcctGroup.setDescription('This group defines the statistics for the BCCT protocol for the Application Server Execution Server process.')
bwAsCpeDeviceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1000, 1, 11)).setObjects(("BW-BroadworksApplicationServer", "bwCPEDeviceStatsTable"), ("BW-BroadworksApplicationServer", "bwCPEDeviceStatsIndex"), ("BW-BroadworksApplicationServer", "bwCPEDeviceName"), ("BW-BroadworksApplicationServer", "bwCPEDeviceReset"), ("BW-BroadworksApplicationServer", "bwCPEDeviceFileRebuilt"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwAsCpeDeviceGroup = bwAsCpeDeviceGroup.setStatus('current')
if mibBuilder.loadTexts: bwAsCpeDeviceGroup.setDescription('This group defines the statistics for CPE Device Management.')
bwAsCallpGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1000, 1, 12)).setObjects(("BW-BroadworksApplicationServer", "bwCallpNetworkOriginationAttempts"), ("BW-BroadworksApplicationServer", "bwCallpNetworkTerminationAttempts"), ("BW-BroadworksApplicationServer", "bwCallpNetworkTerminationsAnswered"), ("BW-BroadworksApplicationServer", "bwCallpUserOriginationAttempts"), ("BW-BroadworksApplicationServer", "bwCallpUserTerminationAttempts"), ("BW-BroadworksApplicationServer", "bwCallpUserTerminationsAnswered"), ("BW-BroadworksApplicationServer", "bwCallpEmergencyCallAttempts"), ("BW-BroadworksApplicationServer", "bwCallpEmergencyCallAlarms"), ("BW-BroadworksApplicationServer", "bwCallpSPTable"), ("BW-BroadworksApplicationServer", "bwCallpActiveCalls"), ("BW-BroadworksApplicationServer", "bwCallpGroupTable"), ("BW-BroadworksApplicationServer", "bwCallpCallsPerSecond"), ("BW-BroadworksApplicationServer", "bwCallpMaximumNumberofSimCallsExceeded"), ("BW-BroadworksApplicationServer", "bwCallpMaximumCallTimeforAnsweredCallsExceeded"), ("BW-BroadworksApplicationServer", "bwCallpMaximumCallTimeforUnansweredCallsExceeded"), ("BW-BroadworksApplicationServer", "bwCallpActiveCallsAsPercentOfLicense"), ("BW-BroadworksApplicationServer", "bwCallpMaximumNumberofSimVideoCallsExceeded"), ("BW-BroadworksApplicationServer", "bwCallpMediaTypeNotSupported"), ("BW-BroadworksApplicationServer", "bwCallpSPIndex"), ("BW-BroadworksApplicationServer", "bwCallpSPID"), ("BW-BroadworksApplicationServer", "bwCallpSPUserOriginationAttempts"), ("BW-BroadworksApplicationServer", "bwCallpSPUserTerminationAttempts"), ("BW-BroadworksApplicationServer", "bwCallpSPUserTerminationsAnswered"), ("BW-BroadworksApplicationServer", "bwCallpSPEmergencyCallAttempts"), ("BW-BroadworksApplicationServer", "bwCallpSPMaximumNumberofSimCallsExceeded"), ("BW-BroadworksApplicationServer", "bwCallpSPMaximumCallTimeforAnsweredCallsExceeded"), ("BW-BroadworksApplicationServer", "bwCallpSPMaximumCallTimeforUnansweredCallsExceeded"), ("BW-BroadworksApplicationServer", "bwCallpSPMaximumNumberofSimVideoCallsExceeded"), ("BW-BroadworksApplicationServer", "bwCallpSPMediaTypeNotSupported"), ("BW-BroadworksApplicationServer", "bwCallpGroupIndex"), ("BW-BroadworksApplicationServer", "bwCallpGroupID"), ("BW-BroadworksApplicationServer", "bwCallpGroupUserOriginationAttempts"), ("BW-BroadworksApplicationServer", "bwCallpGroupUserTerminationAttempts"), ("BW-BroadworksApplicationServer", "bwCallpGroupUserTerminationsAnswered"), ("BW-BroadworksApplicationServer", "bwCallpGroupEmergencyCallAttempts"), ("BW-BroadworksApplicationServer", "bwCallpGroupMaximumNumberofSimCallsExceeded"), ("BW-BroadworksApplicationServer", "bwCallpGroupMaximumCallTimeforAnsweredCallsExceeded"), ("BW-BroadworksApplicationServer", "bwCallpGroupMaximumCallTimeforUnansweredCallsExceeded"), ("BW-BroadworksApplicationServer", "bwCallpGroupMaximumNumberofSimVideoCallsExceeded"), ("BW-BroadworksApplicationServer", "bwCallpGroupMediaTypeNotSupported"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwAsCallpGroup = bwAsCallpGroup.setStatus('current')
if mibBuilder.loadTexts: bwAsCallpGroup.setDescription('This group defines the statistics for call processing.')
bwAsSmtpGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1000, 1, 13)).setObjects(("BW-BroadworksApplicationServer", "bwSMTPTotalPrimaryEmailSendAttempts"), ("BW-BroadworksApplicationServer", "bwSMTPTotalSecondaryEmailSendAttempts"), ("BW-BroadworksApplicationServer", "bwSMTPPrimaryUnSuccessfulEmailSendAttempts"), ("BW-BroadworksApplicationServer", "bwSMTPSecondaryUnSuccessfulEmailSendAttempts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwAsSmtpGroup = bwAsSmtpGroup.setStatus('current')
if mibBuilder.loadTexts: bwAsSmtpGroup.setDescription('This group defines the statistics for the SMTP protocol.')
bwAsSipGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1000, 1, 14)).setObjects(("BW-BroadworksApplicationServer", "bwSipSummaryTotalTransactions"), ("BW-BroadworksApplicationServer", "bwSipStatsInviteIns"), ("BW-BroadworksApplicationServer", "bwSipStatsInviteOuts"), ("BW-BroadworksApplicationServer", "bwSipStatsAckIns"), ("BW-BroadworksApplicationServer", "bwSipStatsAckOuts"), ("BW-BroadworksApplicationServer", "bwSipStatsByeIns"), ("BW-BroadworksApplicationServer", "bwSipStatsByeOuts"), ("BW-BroadworksApplicationServer", "bwSipStatsCancelIns"), ("BW-BroadworksApplicationServer", "bwSipStatsCancelOuts"), ("BW-BroadworksApplicationServer", "bwSipStatsOptionsIns"), ("BW-BroadworksApplicationServer", "bwSipStatsOptionsOuts"), ("BW-BroadworksApplicationServer", "bwSipStatsRegisterIns"), ("BW-BroadworksApplicationServer", "bwSipStatsRegisterOuts"), ("BW-BroadworksApplicationServer", "bwSipStatsInfoIns"), ("BW-BroadworksApplicationServer", "bwSipStatsInfoOuts"), ("BW-BroadworksApplicationServer", "bwSipStatsNotifyIns"), ("BW-BroadworksApplicationServer", "bwSipStatsNotifyOuts"), ("BW-BroadworksApplicationServer", "bwSipStatsPrackIns"), ("BW-BroadworksApplicationServer", "bwSipStatsPrackOuts"), ("BW-BroadworksApplicationServer", "bwSipStatsOtherIns"), ("BW-BroadworksApplicationServer", "bwSipStatsOtherOuts"), ("BW-BroadworksApplicationServer", "bwSipStatsInviteResponsesTable"), ("BW-BroadworksApplicationServer", "bwSipStatsInviteResponseCodeValue"), ("BW-BroadworksApplicationServer", "bwSipStatsInviteResponseIns"), ("BW-BroadworksApplicationServer", "bwSipStatsInviteResponseOuts"), ("BW-BroadworksApplicationServer", "bwSipStatsByeResponsesTable"), ("BW-BroadworksApplicationServer", "bwSipStatsByeResponseCodeValue"), ("BW-BroadworksApplicationServer", "bwSipStatsByeResponseIns"), ("BW-BroadworksApplicationServer", "bwSipStatsByeResponseOuts"), ("BW-BroadworksApplicationServer", "bwSipStatsCancelResponsesTable"), ("BW-BroadworksApplicationServer", "bwSipStatsCancelResponseCodeValue"), ("BW-BroadworksApplicationServer", "bwSipStatsCancelResponseIns"), ("BW-BroadworksApplicationServer", "bwSipStatsCancelResponseOuts"), ("BW-BroadworksApplicationServer", "bwSipStatsOptionsResponsesTable"), ("BW-BroadworksApplicationServer", "bwSipStatsOptionsResponseCodeValue"), ("BW-BroadworksApplicationServer", "bwSipStatsOptionsResponseIns"), ("BW-BroadworksApplicationServer", "bwSipStatsOptionsResponseOuts"), ("BW-BroadworksApplicationServer", "bwSipStatsRegisterResponsesTable"), ("BW-BroadworksApplicationServer", "bwSipStatsRegisterResponseCodeValue"), ("BW-BroadworksApplicationServer", "bwSipStatsRegisterResponseIns"), ("BW-BroadworksApplicationServer", "bwSipStatsRegisterResponseOuts"), ("BW-BroadworksApplicationServer", "bwSipStatsPrackResponsesTable"), ("BW-BroadworksApplicationServer", "bwSipStatsPrackResponseCodeValue"), ("BW-BroadworksApplicationServer", "bwSipStatsPrackResponseIns"), ("BW-BroadworksApplicationServer", "bwSipStatsPrackResponseOuts"), ("BW-BroadworksApplicationServer", "bwSipStatsInfoResponsesTable"), ("BW-BroadworksApplicationServer", "bwSipStatsInfoResponseCodeValue"), ("BW-BroadworksApplicationServer", "bwSipStatsInfoResponseIns"), ("BW-BroadworksApplicationServer", "bwSipStatsInfoResponseOuts"), ("BW-BroadworksApplicationServer", "bwSipStatsNotifyResponsesTable"), ("BW-BroadworksApplicationServer", "bwSipStatsNotifyResponseCodeValue"), ("BW-BroadworksApplicationServer", "bwSipStatsNotifyResponseIns"), ("BW-BroadworksApplicationServer", "bwSipStatsNotifyResponseOuts"), ("BW-BroadworksApplicationServer", "bwSipStatsOtherResponsesTable"), ("BW-BroadworksApplicationServer", "bwSipStatsOtherResponseCodeValue"), ("BW-BroadworksApplicationServer", "bwSipStatsOtherResponseIns"), ("BW-BroadworksApplicationServer", "bwSipStatsOtherResponseOuts"), ("BW-BroadworksApplicationServer", "bwSipStatsRetryInvites"), ("BW-BroadworksApplicationServer", "bwSipStatsRetryByes"), ("BW-BroadworksApplicationServer", "bwSipStatsRetryCancels"), ("BW-BroadworksApplicationServer", "bwSipStatsRetryResponses"), ("BW-BroadworksApplicationServer", "bwSipStatsSubscribeIns"), ("BW-BroadworksApplicationServer", "bwSipStatsSubscribeOuts"), ("BW-BroadworksApplicationServer", "bwSipStatsMessageIns"), ("BW-BroadworksApplicationServer", "bwSipStatsMessageOuts"), ("BW-BroadworksApplicationServer", "bwSipStatsSubscribeResponsesTable"), ("BW-BroadworksApplicationServer", "bwSipStatsSubscribeResponseCodeValue"), ("BW-BroadworksApplicationServer", "bwSipStatsSubscribeResponseIns"), ("BW-BroadworksApplicationServer", "bwSipStatsSubscribeResponseOuts"), ("BW-BroadworksApplicationServer", "bwSipStatsMessageResponsesTable"), ("BW-BroadworksApplicationServer", "bwSipStatsMessageResponseCodeValue"), ("BW-BroadworksApplicationServer", "bwSipStatsMessageResponseIns"), ("BW-BroadworksApplicationServer", "bwSipStatsMessageResponseOuts"), ("BW-BroadworksApplicationServer", "bwSipStatsUpdateIns"), ("BW-BroadworksApplicationServer", "bwSipStatsUpdateOuts"), ("BW-BroadworksApplicationServer", "bwSipStatsUpdateResponseTable"), ("BW-BroadworksApplicationServer", "bwSipStatsUpdateResponseCodeValue"), ("BW-BroadworksApplicationServer", "bwSipStatsUpdateResponseIns"), ("BW-BroadworksApplicationServer", "bwSipStatsUpdateResponseOuts"), ("BW-BroadworksApplicationServer", "bwSipStatsSetupSignalDelay"), ("BW-BroadworksApplicationServer", "bwSipStatsMinSetupSignalDelay"), ("BW-BroadworksApplicationServer", "bwSipStatsMaxSetupSignalDelay"), ("BW-BroadworksApplicationServer", "bwSipStatsAnswerSignalDelay"), ("BW-BroadworksApplicationServer", "bwSipStatsMinAnswerSignalDelay"), ("BW-BroadworksApplicationServer", "bwSipStatsMaxAnswerSignalDelay"), ("BW-BroadworksApplicationServer", "bwSipStatsRegistrationsPerMinute"), ("BW-BroadworksApplicationServer", "bwSipStatsMsgRetryPercentageToOther"), ("BW-BroadworksApplicationServer", "bwSipStatsMsgRetryToNeTable"), ("BW-BroadworksApplicationServer", "bwSipStatsMsgRetryToNeID"), ("BW-BroadworksApplicationServer", "bwSipStatsMsgRetryToNeAddr"), ("BW-BroadworksApplicationServer", "bwSipStatsMsgRetryToNePercentage"), ("BW-BroadworksApplicationServer", "bwSipStatsActiveTcpConnections"), ("BW-BroadworksApplicationServer", "bwSipStatsTcpIns"), ("BW-BroadworksApplicationServer", "bwSipStatsTcpOuts"), ("BW-BroadworksApplicationServer", "bwSipStatsTcpFailures"), ("BW-BroadworksApplicationServer", "bwSipStatsUdpIns"), ("BW-BroadworksApplicationServer", "bwSipStatsUdpOuts"), ("BW-BroadworksApplicationServer", "bwSIPReclaimedStaleTcpConnections"), ("BW-BroadworksApplicationServer", "bwSIPTcpTotalConnections"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwAsSipGroup = bwAsSipGroup.setStatus('current')
if mibBuilder.loadTexts: bwAsSipGroup.setDescription('This group defines the statistics for the SIP protocol.')
bwAsAccntCodeServiceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1000, 1, 15)).setObjects(("BW-BroadworksApplicationServer", "bwAuthCodeNumAttempts"), ("BW-BroadworksApplicationServer", "bwAuthCodeNumValidations"), ("BW-BroadworksApplicationServer", "bwAccountCodeNumAttempts"), ("BW-BroadworksApplicationServer", "bwAccountCodesSPTable"), ("BW-BroadworksApplicationServer", "bwAccountCodesGroupTable"), ("BW-BroadworksApplicationServer", "bwAccountCodeNumPerCallAttempts"), ("BW-BroadworksApplicationServer", "bwAccountCodesSPIndex"), ("BW-BroadworksApplicationServer", "bwAccountCodesSPID"), ("BW-BroadworksApplicationServer", "bwAuthCodeSPNumAttempts"), ("BW-BroadworksApplicationServer", "bwAuthCodeSPNumValidations"), ("BW-BroadworksApplicationServer", "bwAccountCodeSPNumAttempts"), ("BW-BroadworksApplicationServer", "bwAccountCodeSPNumPerCallAttempts"), ("BW-BroadworksApplicationServer", "bwAccountCodesGroupIndex"), ("BW-BroadworksApplicationServer", "bwAccountCodesGroupID"), ("BW-BroadworksApplicationServer", "bwAuthCodeGroupNumAttempts"), ("BW-BroadworksApplicationServer", "bwAuthCodeGroupNumValidations"), ("BW-BroadworksApplicationServer", "bwAccountCodeGroupNumAttempts"), ("BW-BroadworksApplicationServer", "bwAccountCodeGroupNumPerCallAttempts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwAsAccntCodeServiceGroup = bwAsAccntCodeServiceGroup.setStatus('current')
if mibBuilder.loadTexts: bwAsAccntCodeServiceGroup.setDescription('This group defines the statistics for the Account Code Service.')
bwAsAnonymousCallRejectionServiceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1000, 1, 16)).setObjects(("BW-BroadworksApplicationServer", "bwAnonymousCallsNumRejected"), ("BW-BroadworksApplicationServer", "bwAnonymousCallRejectionSPTable"), ("BW-BroadworksApplicationServer", "bwAnonymousCallRejectionGroupTable"), ("BW-BroadworksApplicationServer", "bwAnonymousCallRejectionSPIndex"), ("BW-BroadworksApplicationServer", "bwAnonymousCallRejectionSPID"), ("BW-BroadworksApplicationServer", "bwAnonymousCallsSPNumRejected"), ("BW-BroadworksApplicationServer", "bwAnonymousCallRejectionGroupIndex"), ("BW-BroadworksApplicationServer", "bwAnonymousCallRejectionGroupID"), ("BW-BroadworksApplicationServer", "bwAnonymousCallsGroupNumRejected"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwAsAnonymousCallRejectionServiceGroup = bwAsAnonymousCallRejectionServiceGroup.setStatus('current')
if mibBuilder.loadTexts: bwAsAnonymousCallRejectionServiceGroup.setDescription('This group defines the statistics for the Anonymous Call Rejection Service.')
bwAsAuthenticationServiceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1000, 1, 17)).setObjects(("BW-BroadworksApplicationServer", "bwAuthenticationNumChallenges"), ("BW-BroadworksApplicationServer", "bwAuthenticationNumValidResponses"), ("BW-BroadworksApplicationServer", "bwAuthenticationSPTable"), ("BW-BroadworksApplicationServer", "bwAuthenticationGroupTable"), ("BW-BroadworksApplicationServer", "bwAuthenticationSPIndex"), ("BW-BroadworksApplicationServer", "bwAuthenticationSPID"), ("BW-BroadworksApplicationServer", "bwAuthenticationSPNumChallenges"), ("BW-BroadworksApplicationServer", "bwAuthenticationSPNumValidResponses"), ("BW-BroadworksApplicationServer", "bwAuthenticationGroupIndex"), ("BW-BroadworksApplicationServer", "bwAuthenticationGroupID"), ("BW-BroadworksApplicationServer", "bwAuthenticationGroupNumChallenges"), ("BW-BroadworksApplicationServer", "bwAuthenticationGroupNumValidResponses"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwAsAuthenticationServiceGroup = bwAsAuthenticationServiceGroup.setStatus('current')
if mibBuilder.loadTexts: bwAsAuthenticationServiceGroup.setDescription('This group defines the statistics for the Authentication Service.')
bwAsAutoAttendantServiceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1000, 1, 18)).setObjects(("BW-BroadworksApplicationServer", "bwAutoAttendantNumAnswers"), ("BW-BroadworksApplicationServer", "bwAutoAttendantNumTransfers"), ("BW-BroadworksApplicationServer", "bwAutoAttendantSPTable"), ("BW-BroadworksApplicationServer", "bwAutoAttendantGroupTable"), ("BW-BroadworksApplicationServer", "bwAutoAttendantSPIndex"), ("BW-BroadworksApplicationServer", "bwAutoAttendantSPID"), ("BW-BroadworksApplicationServer", "bwAutoAttendantSPNumAnswers"), ("BW-BroadworksApplicationServer", "bwAutoAttendantSPNumTransfers"), ("BW-BroadworksApplicationServer", "bwAutoAttendantGroupIndex"), ("BW-BroadworksApplicationServer", "bwAutoAttendantGroupID"), ("BW-BroadworksApplicationServer", "bwAutoAttendantGroupNumAnswers"), ("BW-BroadworksApplicationServer", "bwAutoAttendantGroupNumTransfers"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwAsAutoAttendantServiceGroup = bwAsAutoAttendantServiceGroup.setStatus('current')
if mibBuilder.loadTexts: bwAsAutoAttendantServiceGroup.setDescription('This group defines the statistics for the Auto Attendant Service.')
bwAsCallCapacityServiceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1000, 1, 19)).setObjects(("BW-BroadworksApplicationServer", "bwCallCapacityNumCallsAttempted"), ("BW-BroadworksApplicationServer", "bwCallCapacityNumCallsBlocked"), ("BW-BroadworksApplicationServer", "bwCallCapacitySPTable"), ("BW-BroadworksApplicationServer", "bwCallCapacityGroupTable"), ("BW-BroadworksApplicationServer", "bwCallCapacitySPIndex"), ("BW-BroadworksApplicationServer", "bwCallCapacitySPID"), ("BW-BroadworksApplicationServer", "bwCallCapacitySPNumCallsAttempted"), ("BW-BroadworksApplicationServer", "bwCallCapacitySPNumCallsBlocked"), ("BW-BroadworksApplicationServer", "bwCallCapacityGroupIndex"), ("BW-BroadworksApplicationServer", "bwCallCapacityGroupID"), ("BW-BroadworksApplicationServer", "bwCallCapacityGroupNumCallsAttempted"), ("BW-BroadworksApplicationServer", "bwCallCapacityGroupNumCallsBlocked"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwAsCallCapacityServiceGroup = bwAsCallCapacityServiceGroup.setStatus('current')
if mibBuilder.loadTexts: bwAsCallCapacityServiceGroup.setDescription('This group defines the statistics for the Call Capacity Service.')
bwAsCFAlwaysServiceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1000, 1, 20)).setObjects(("BW-BroadworksApplicationServer", "bwCFANumForwarded"), ("BW-BroadworksApplicationServer", "bwCFANumPhoneActivations"), ("BW-BroadworksApplicationServer", "bwCFANumPhoneDeactivations"), ("BW-BroadworksApplicationServer", "bwCallForwardingAlwaysSPTable"), ("BW-BroadworksApplicationServer", "bwCFADestinationChanged"), ("BW-BroadworksApplicationServer", "bwCallForwardingAlwaysGroupTable"), ("BW-BroadworksApplicationServer", "bwCallForwardingAlwaysSPIndex"), ("BW-BroadworksApplicationServer", "bwCallForwardingAlwaysSPID"), ("BW-BroadworksApplicationServer", "bwCFASPNumForwarded"), ("BW-BroadworksApplicationServer", "bwCFASPNumPhoneActivations"), ("BW-BroadworksApplicationServer", "bwCFASPNumPhoneDeactivations"), ("BW-BroadworksApplicationServer", "bwCFASPDestinationChanged"), ("BW-BroadworksApplicationServer", "bwCallForwardingAlwaysGroupIndex"), ("BW-BroadworksApplicationServer", "bwCallForwardingAlwaysGroupID"), ("BW-BroadworksApplicationServer", "bwCFAGroupNumForwarded"), ("BW-BroadworksApplicationServer", "bwCFAGroupNumPhoneActivations"), ("BW-BroadworksApplicationServer", "bwCFAGroupNumPhoneDeactivations"), ("BW-BroadworksApplicationServer", "bwCFAGroupDestinationChanged"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwAsCFAlwaysServiceGroup = bwAsCFAlwaysServiceGroup.setStatus('current')
if mibBuilder.loadTexts: bwAsCFAlwaysServiceGroup.setDescription('This group defines the statistics for the Call Forward Always Service.')
bwAsCFBusyServiceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1000, 1, 21)).setObjects(("BW-BroadworksApplicationServer", "bwCFBNumForwarded"), ("BW-BroadworksApplicationServer", "bwCallForwardingBusySPTable"), ("BW-BroadworksApplicationServer", "bwCFBNumPhoneActivations"), ("BW-BroadworksApplicationServer", "bwCFBNumPhoneDeactivations"), ("BW-BroadworksApplicationServer", "bwCFBDestinationChanged"), ("BW-BroadworksApplicationServer", "bwCallForwardingBusyGroupTable"), ("BW-BroadworksApplicationServer", "bwCallForwardingBusySPIndex"), ("BW-BroadworksApplicationServer", "bwCallForwardingBusySPID"), ("BW-BroadworksApplicationServer", "bwCFBSPNumForwarded"), ("BW-BroadworksApplicationServer", "bwCFBSPNumPhoneActivations"), ("BW-BroadworksApplicationServer", "bwCFBSPNumPhoneDeactivations"), ("BW-BroadworksApplicationServer", "bwCFBSPDestinationChanged"), ("BW-BroadworksApplicationServer", "bwCallForwardingBusyGroupIndex"), ("BW-BroadworksApplicationServer", "bwCallForwardingBusyGroupID"), ("BW-BroadworksApplicationServer", "bwCFBGroupNumForwarded"), ("BW-BroadworksApplicationServer", "bwCFBGroupNumPhoneActivations"), ("BW-BroadworksApplicationServer", "bwCFBGroupNumPhoneDeactivations"), ("BW-BroadworksApplicationServer", "bwCFBGroupDestinationChanged"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwAsCFBusyServiceGroup = bwAsCFBusyServiceGroup.setStatus('current')
if mibBuilder.loadTexts: bwAsCFBusyServiceGroup.setDescription('This group defines the statistics for the Call Forward Busy Service.')
bwAsCFNoAnswerServiceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1000, 1, 22)).setObjects(("BW-BroadworksApplicationServer", "bwCFNANumForwarded"), ("BW-BroadworksApplicationServer", "bwCallForwardingNoAnswerSPTable"), ("BW-BroadworksApplicationServer", "bwCFNADestinationChanged"), ("BW-BroadworksApplicationServer", "bwCFNANumPhoneActivations"), ("BW-BroadworksApplicationServer", "bwCFNANumPhoneDeactivations"), ("BW-BroadworksApplicationServer", "bwCallForwardingNoAnswerGroupTable"), ("BW-BroadworksApplicationServer", "bwCallForwardingNoAnswerSPIndex"), ("BW-BroadworksApplicationServer", "bwCallForwardingNoAnswerSPID"), ("BW-BroadworksApplicationServer", "bwCFNASPNumForwarded"), ("BW-BroadworksApplicationServer", "bwCFNASPDestinationChanged"), ("BW-BroadworksApplicationServer", "bwCFNASPNumPhoneActivations"), ("BW-BroadworksApplicationServer", "bwCFNASPNumPhoneDeactivations"), ("BW-BroadworksApplicationServer", "bwCallForwardingNoAnswerGroupIndex"), ("BW-BroadworksApplicationServer", "bwCallForwardingNoAnswerGroupID"), ("BW-BroadworksApplicationServer", "bwCFNAGroupNumForwarded"), ("BW-BroadworksApplicationServer", "bwCFNAGroupDestinationChanged"), ("BW-BroadworksApplicationServer", "bwCFNAGroupNumPhoneActivations"), ("BW-BroadworksApplicationServer", "bwCFNAGroupNumPhoneDeactivations"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwAsCFNoAnswerServiceGroup = bwAsCFNoAnswerServiceGroup.setStatus('current')
if mibBuilder.loadTexts: bwAsCFNoAnswerServiceGroup.setDescription('This group defines the statistics for the Call Forward No-Answer Service.')
bwAsCallNotifyServiceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1000, 1, 23)).setObjects(("BW-BroadworksApplicationServer", "bwCallNotifyNumNotifications"), ("BW-BroadworksApplicationServer", "bwCallNotifySPTable"), ("BW-BroadworksApplicationServer", "bwCallNotifyGroupTable"), ("BW-BroadworksApplicationServer", "bwCallNotifySPIndex"), ("BW-BroadworksApplicationServer", "bwCallNotifySPID"), ("BW-BroadworksApplicationServer", "bwCallNotifySPNumNotifications"), ("BW-BroadworksApplicationServer", "bwCallNotifyGroupIndex"), ("BW-BroadworksApplicationServer", "bwCallNotifyGroupID"), ("BW-BroadworksApplicationServer", "bwCallNotifyGroupNumNotifications"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwAsCallNotifyServiceGroup = bwAsCallNotifyServiceGroup.setStatus('current')
if mibBuilder.loadTexts: bwAsCallNotifyServiceGroup.setDescription('This group defines the statistics for the Call Notify Service.')
bwAsCallParkServiceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1000, 1, 24)).setObjects(("BW-BroadworksApplicationServer", "bwCallParkNumAttempts"), ("BW-BroadworksApplicationServer", "bwCallParkNumFailures"), ("BW-BroadworksApplicationServer", "bwCallParkNumRetrieveAttempts"), ("BW-BroadworksApplicationServer", "bwCallParkNumRetrieveFailures"), ("BW-BroadworksApplicationServer", "bwCallParkSPTable"), ("BW-BroadworksApplicationServer", "bwCallParkGroupTable"), ("BW-BroadworksApplicationServer", "bwCallParkSPIndex"), ("BW-BroadworksApplicationServer", "bwCallParkSPID"), ("BW-BroadworksApplicationServer", "bwCallParkSPNumAttempts"), ("BW-BroadworksApplicationServer", "bwCallParkSPNumFailures"), ("BW-BroadworksApplicationServer", "bwCallParkSPNumRetrieveAttempts"), ("BW-BroadworksApplicationServer", "bwCallParkSPNumRetrieveFailures"), ("BW-BroadworksApplicationServer", "bwCallParkGroupIndex"), ("BW-BroadworksApplicationServer", "bwCallParkGroupID"), ("BW-BroadworksApplicationServer", "bwCallParkGroupNumAttempts"), ("BW-BroadworksApplicationServer", "bwCallParkGroupNumFailures"), ("BW-BroadworksApplicationServer", "bwCallParkGroupNumRetrieveAttempts"), ("BW-BroadworksApplicationServer", "bwCallParkGroupNumRetrieveFailures"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwAsCallParkServiceGroup = bwAsCallParkServiceGroup.setStatus('current')
if mibBuilder.loadTexts: bwAsCallParkServiceGroup.setDescription('This group defines the statistics for the Call Park Service.')
bwAsCallPickupServiceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1000, 1, 25)).setObjects(("BW-BroadworksApplicationServer", "bwCallPickupNumAttempts"), ("BW-BroadworksApplicationServer", "bwCallPickupNumFailures"), ("BW-BroadworksApplicationServer", "bwCallPickupSPTable"), ("BW-BroadworksApplicationServer", "bwCallPickupGroupTable"), ("BW-BroadworksApplicationServer", "bwCallPickupSPIndex"), ("BW-BroadworksApplicationServer", "bwCallPickupSPID"), ("BW-BroadworksApplicationServer", "bwCallPickupSPNumAttempts"), ("BW-BroadworksApplicationServer", "bwCallPickupSPNumFailures"), ("BW-BroadworksApplicationServer", "bwCallPickupGroupIndex"), ("BW-BroadworksApplicationServer", "bwCallPickupGroupID"), ("BW-BroadworksApplicationServer", "bwCallPickupGroupNumAttempts"), ("BW-BroadworksApplicationServer", "bwCallPickupGroupNumFailures"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwAsCallPickupServiceGroup = bwAsCallPickupServiceGroup.setStatus('current')
if mibBuilder.loadTexts: bwAsCallPickupServiceGroup.setDescription('This group defines the statistics for the Call Pickup Service.')
bwAsCallReturnServiceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1000, 1, 26)).setObjects(("BW-BroadworksApplicationServer", "bwCallReturnNumReturns"), ("BW-BroadworksApplicationServer", "bwCallReturnSPTable"), ("BW-BroadworksApplicationServer", "bwCallReturnGroupTable"), ("BW-BroadworksApplicationServer", "bwCallReturnSPIndex"), ("BW-BroadworksApplicationServer", "bwCallReturnSPID"), ("BW-BroadworksApplicationServer", "bwCallReturnSPNumReturns"), ("BW-BroadworksApplicationServer", "bwCallReturnGroupIndex"), ("BW-BroadworksApplicationServer", "bwCallReturnGroupID"), ("BW-BroadworksApplicationServer", "bwCallReturnGroupNumReturns"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwAsCallReturnServiceGroup = bwAsCallReturnServiceGroup.setStatus('current')
if mibBuilder.loadTexts: bwAsCallReturnServiceGroup.setDescription('This group defines the statistics for the Call Return Service.')
bwAsCompilotCallMgrServiceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1000, 1, 27)).setObjects(("BW-BroadworksApplicationServer", "bwCommPilotCallMgrNumDial"), ("BW-BroadworksApplicationServer", "bwCommPilotCallMgrNumAnswer"), ("BW-BroadworksApplicationServer", "bwCommPilotCallMgrNumRelease"), ("BW-BroadworksApplicationServer", "bwCommPilotCallMgrNumHold"), ("BW-BroadworksApplicationServer", "bwCommPilotCallMgrNumTransfer"), ("BW-BroadworksApplicationServer", "bwCommPilotCallMgrNumConference"), ("BW-BroadworksApplicationServer", "bwCommPilotCallMgrNumTransferVM"), ("BW-BroadworksApplicationServer", "bwCommPilotCallManagerSPTable"), ("BW-BroadworksApplicationServer", "bwCommPilotCallMgrNumConferenceAnswer"), ("BW-BroadworksApplicationServer", "bwCommPilotCallMgrNumConferenceHold"), ("BW-BroadworksApplicationServer", "bwCommPilotCallMgrNumConferenceRelease"), ("BW-BroadworksApplicationServer", "bwCommPilotCallManagerGroupTable"), ("BW-BroadworksApplicationServer", "bwCommPilotCallMgrNumTransferCC"), ("BW-BroadworksApplicationServer", "bwCommPilotCallMgrNumConferenceAdd"), ("BW-BroadworksApplicationServer", "bwCommPilotCallManagerSPIndex"), ("BW-BroadworksApplicationServer", "bwCommPilotCallManagerSPID"), ("BW-BroadworksApplicationServer", "bwCommPilotCallMgrSPNumDial"), ("BW-BroadworksApplicationServer", "bwCommPilotCallMgrSPNumAnswer"), ("BW-BroadworksApplicationServer", "bwCommPilotCallMgrSPNumRelease"), ("BW-BroadworksApplicationServer", "bwCommPilotCallMgrSPNumHold"), ("BW-BroadworksApplicationServer", "bwCommPilotCallMgrSPNumTransfer"), ("BW-BroadworksApplicationServer", "bwCommPilotCallMgrSPNumConference"), ("BW-BroadworksApplicationServer", "bwCommPilotCallMgrSPNumTransferVM"), ("BW-BroadworksApplicationServer", "bwCommPilotCallMgrSPNumConferenceAnswer"), ("BW-BroadworksApplicationServer", "bwCommPilotCallMgrSPNumConferenceHold"), ("BW-BroadworksApplicationServer", "bwCommPilotCallMgrSPNumConferenceRelease"), ("BW-BroadworksApplicationServer", "bwCommPilotCallMgrSPNumTransferCC"), ("BW-BroadworksApplicationServer", "bwCommPilotCallMgrSPNumConferenceAdd"), ("BW-BroadworksApplicationServer", "bwCommPilotCallManagerGroupIndex"), ("BW-BroadworksApplicationServer", "bwCommPilotCallManagerGroupID"), ("BW-BroadworksApplicationServer", "bwCommPilotCallMgrGroupNumDial"), ("BW-BroadworksApplicationServer", "bwCommPilotCallMgrGroupNumAnswer"), ("BW-BroadworksApplicationServer", "bwCommPilotCallMgrGroupNumRelease"), ("BW-BroadworksApplicationServer", "bwCommPilotCallMgrGroupNumHold"), ("BW-BroadworksApplicationServer", "bwCommPilotCallMgrGroupNumTransfer"), ("BW-BroadworksApplicationServer", "bwCommPilotCallMgrGroupNumConference"), ("BW-BroadworksApplicationServer", "bwCommPilotCallMgrGroupNumTransferVM"), ("BW-BroadworksApplicationServer", "bwCommPilotCallMgrGroupNumConferenceAnswer"), ("BW-BroadworksApplicationServer", "bwCommPilotCallMgrGroupNumConferenceHold"), ("BW-BroadworksApplicationServer", "bwCommPilotCallMgrGroupNumConferenceRelease"), ("BW-BroadworksApplicationServer", "bwCommPilotCallMgrGroupNumTransferCC"), ("BW-BroadworksApplicationServer", "bwCommPilotCallMgrGroupNumConferenceAdd"), ("BW-BroadworksApplicationServer", "bwCommPilotCallMgrNumCallPark"), ("BW-BroadworksApplicationServer", "bwCommPilotCallMgrNumGroupCallPark"), ("BW-BroadworksApplicationServer", "bwCommPilotCallMgrNumCallParkRetrieve"), ("BW-BroadworksApplicationServer", "bwCommPilotCallMgrSPNumCallPark"), ("BW-BroadworksApplicationServer", "bwCommPilotCallMgrSPNumGroupCallPark"), ("BW-BroadworksApplicationServer", "bwCommPilotCallMgrSPNumCallParkRetrieve"), ("BW-BroadworksApplicationServer", "bwCommPilotCallMgrGroupNumCallPark"), ("BW-BroadworksApplicationServer", "bwCommPilotCallMgrGroupNumGroupCallPark"), ("BW-BroadworksApplicationServer", "bwCommPilotCallMgrGroupNumCallParkRetrieve"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwAsCompilotCallMgrServiceGroup = bwAsCompilotCallMgrServiceGroup.setStatus('current')
if mibBuilder.loadTexts: bwAsCompilotCallMgrServiceGroup.setDescription('This group defines the statistics for the CommPilot Call Manager Service.')
bwAsDoNotDisturbServiceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1000, 1, 28)).setObjects(("BW-BroadworksApplicationServer", "bwDoNotDisturbNumInvoked"), ("BW-BroadworksApplicationServer", "bwDoNotDisturbSPTable"), ("BW-BroadworksApplicationServer", "bwDndPhoneActivations"), ("BW-BroadworksApplicationServer", "bwDndPhoneDeactivations"), ("BW-BroadworksApplicationServer", "bwDoNotDisturbGroupTable"), ("BW-BroadworksApplicationServer", "bwDoNotDisturbSPIndex"), ("BW-BroadworksApplicationServer", "bwDoNotDisturbSPID"), ("BW-BroadworksApplicationServer", "bwDoNotDisturbSPNumInvoked"), ("BW-BroadworksApplicationServer", "bwDNDSPNumPhoneActivations"), ("BW-BroadworksApplicationServer", "bwDNDSPNumPhoneDeactivations"), ("BW-BroadworksApplicationServer", "bwDoNotDisturbGroupIndex"), ("BW-BroadworksApplicationServer", "bwDoNotDisturbGroupID"), ("BW-BroadworksApplicationServer", "bwDoNotDisturbGroupNumInvoked"), ("BW-BroadworksApplicationServer", "bwDNDGroupNumPhoneActivations"), ("BW-BroadworksApplicationServer", "bwDNDGroupNumPhoneDeactivations"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwAsDoNotDisturbServiceGroup = bwAsDoNotDisturbServiceGroup.setStatus('current')
if mibBuilder.loadTexts: bwAsDoNotDisturbServiceGroup.setDescription('This group defines the statistics for the Do Not Disturb Service.')
bwAsFlashCallXferServiceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1000, 1, 29)).setObjects(("BW-BroadworksApplicationServer", "bwFlashCallTransferNumTransfers"), ("BW-BroadworksApplicationServer", "bwFlashCallTransferSPTable"), ("BW-BroadworksApplicationServer", "bwFlashCallTransferGroupTable"), ("BW-BroadworksApplicationServer", "bwFlashCallTransferSPIndex"), ("BW-BroadworksApplicationServer", "bwFlashCallTransferSPID"), ("BW-BroadworksApplicationServer", "bwFlashCallTransferSPNumTransfers"), ("BW-BroadworksApplicationServer", "bwFlashCallTransferGroupIndex"), ("BW-BroadworksApplicationServer", "bwFlashCallTransferGroupID"), ("BW-BroadworksApplicationServer", "bwFlashCallTransferGroupNumTransfers"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwAsFlashCallXferServiceGroup = bwAsFlashCallXferServiceGroup.setStatus('current')
if mibBuilder.loadTexts: bwAsFlashCallXferServiceGroup.setDescription('This group defines the statistics for Flash Call Xfer Service.')
bwAsFlashCallWaitingServiceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1000, 1, 30)).setObjects(("BW-BroadworksApplicationServer", "bwFlashCallWaitingNumAnswers"), ("BW-BroadworksApplicationServer", "bwFlashCallWaitingSPTable"), ("BW-BroadworksApplicationServer", "bwFlashCallWaitingGroupTable"), ("BW-BroadworksApplicationServer", "bwFlashCallWaitingSPIndex"), ("BW-BroadworksApplicationServer", "bwFlashCallWaitingSPID"), ("BW-BroadworksApplicationServer", "bwFlashCallWaitingSPNumAnswers"), ("BW-BroadworksApplicationServer", "bwFlashCallWaitingGroupIndex"), ("BW-BroadworksApplicationServer", "bwFlashCallWaitingGroupID"), ("BW-BroadworksApplicationServer", "bwFlashCallWaitingGroupNumAnswers"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwAsFlashCallWaitingServiceGroup = bwAsFlashCallWaitingServiceGroup.setStatus('current')
if mibBuilder.loadTexts: bwAsFlashCallWaitingServiceGroup.setDescription('This group defines the statistics for Flash Call Waiting Service.')
bwAsFlashConsultationServiceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1000, 1, 31)).setObjects(("BW-BroadworksApplicationServer", "bwFlashConsultationNumCalls"), ("BW-BroadworksApplicationServer", "bwFlashConsultationSPTable"), ("BW-BroadworksApplicationServer", "bwFlashConsultationGroupTable"), ("BW-BroadworksApplicationServer", "bwFlashConsultationSPIndex"), ("BW-BroadworksApplicationServer", "bwFlashConsultationSPID"), ("BW-BroadworksApplicationServer", "bwFlashConsultationSPNumCalls"), ("BW-BroadworksApplicationServer", "bwFlashConsultationGroupIndex"), ("BW-BroadworksApplicationServer", "bwFlashConsultationGroupID"), ("BW-BroadworksApplicationServer", "bwFlashConsultationGroupNumCalls"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwAsFlashConsultationServiceGroup = bwAsFlashConsultationServiceGroup.setStatus('current')
if mibBuilder.loadTexts: bwAsFlashConsultationServiceGroup.setDescription('This group defines the statistics for Flash Consultation Service.')
bwAsFlash3wcServiceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1000, 1, 32)).setObjects(("BW-BroadworksApplicationServer", "bwFlashThreeWayCallNum3WC"), ("BW-BroadworksApplicationServer", "bwFlashThreeWayCallSPTable"), ("BW-BroadworksApplicationServer", "bwFlashThreeWayCallGroupTable"), ("BW-BroadworksApplicationServer", "bwFlashThreeWayCallSPIndex"), ("BW-BroadworksApplicationServer", "bwFlashThreeWayCallSPID"), ("BW-BroadworksApplicationServer", "bwFlashThreeWayCallSPNum3WC"), ("BW-BroadworksApplicationServer", "bwFlashThreeWayCallGroupIndex"), ("BW-BroadworksApplicationServer", "bwFlashThreeWayCallGroupID"), ("BW-BroadworksApplicationServer", "bwFlashThreeWayCallGroupNum3WC"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwAsFlash3wcServiceGroup = bwAsFlash3wcServiceGroup.setStatus('current')
if mibBuilder.loadTexts: bwAsFlash3wcServiceGroup.setDescription('This group defines the statistics for Flash Three Way Calling Service.')
bwAsHuntGroupServiceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1000, 1, 33)).setObjects(("BW-BroadworksApplicationServer", "bwHuntGroupNumAttempts"), ("BW-BroadworksApplicationServer", "bwHuntGroupNumBusy"), ("BW-BroadworksApplicationServer", "bwHuntGroupsDNHIncomingCalls"), ("BW-BroadworksApplicationServer", "bwHuntGroupsSPTable"), ("BW-BroadworksApplicationServer", "bwHuntGroupsGroupTable"), ("BW-BroadworksApplicationServer", "bwHuntGroupsSPIndex"), ("BW-BroadworksApplicationServer", "bwHuntGroupsSPID"), ("BW-BroadworksApplicationServer", "bwHuntGroupSPNumAttempts"), ("BW-BroadworksApplicationServer", "bwHuntGroupSPNumBusy"), ("BW-BroadworksApplicationServer", "bwHuntGroupsSPDNHIncomingCalls"), ("BW-BroadworksApplicationServer", "bwHuntGroupsGroupIndex"), ("BW-BroadworksApplicationServer", "bwHuntGroupsGroupID"), ("BW-BroadworksApplicationServer", "bwHuntGroupsGroupNumAttempts"), ("BW-BroadworksApplicationServer", "bwHuntGroupsGroupNumBusy"), ("BW-BroadworksApplicationServer", "bwHuntGroupsGroupDNHIncomingCalls"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwAsHuntGroupServiceGroup = bwAsHuntGroupServiceGroup.setStatus('current')
if mibBuilder.loadTexts: bwAsHuntGroupServiceGroup.setDescription('This group defines the statistics for the Hunt Group Service.')
bwAsIcpServiceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1000, 1, 34)).setObjects(("BW-BroadworksApplicationServer", "bwICPNumInterGroupBlocks"), ("BW-BroadworksApplicationServer", "bwIncomingCallingPlanSPTable"), ("BW-BroadworksApplicationServer", "bwIncomingCallingPlanGroupTable"), ("BW-BroadworksApplicationServer", "bwICPNumCollectCallBlocks"), ("BW-BroadworksApplicationServer", "bwICPNumIntraGroupBlocks"), ("BW-BroadworksApplicationServer", "bwICPNumOutsideCallerBlocks"), ("BW-BroadworksApplicationServer", "bwIncomingCallingPlanSPIndex"), ("BW-BroadworksApplicationServer", "bwIncomingCallingPlanSPID"), ("BW-BroadworksApplicationServer", "bwICPSPNumInterGroupBlocks"), ("BW-BroadworksApplicationServer", "bwICPSPNumCollectCallBlocks"), ("BW-BroadworksApplicationServer", "bwICPSPNumIntraGroupBlocks"), ("BW-BroadworksApplicationServer", "bwICPSPNumOutsideCallerBlocks"), ("BW-BroadworksApplicationServer", "bwIncomingCallingPlanGroupIndex"), ("BW-BroadworksApplicationServer", "bwIncomingCallingPlanGroupID"), ("BW-BroadworksApplicationServer", "bwICPGroupNumInterGroupBlocks"), ("BW-BroadworksApplicationServer", "bwICPGroupNumCollectCallBlocks"), ("BW-BroadworksApplicationServer", "bwICPGroupNumIntraGroupBlocks"), ("BW-BroadworksApplicationServer", "bwICPGroupNumOutsideCallerBlocks"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwAsIcpServiceGroup = bwAsIcpServiceGroup.setStatus('current')
if mibBuilder.loadTexts: bwAsIcpServiceGroup.setDescription('This group defines the statistics for the Incoming Calling Plan Service.')
bwAsIpPhoneServiceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1000, 1, 35)).setObjects(("BW-BroadworksApplicationServer", "bwIPPhoneNumForwards"), ("BW-BroadworksApplicationServer", "bwIPPhoneSPTable"), ("BW-BroadworksApplicationServer", "bwIPPhoneGroupTable"), ("BW-BroadworksApplicationServer", "bwIPPhoneSPIndex"), ("BW-BroadworksApplicationServer", "bwIPPhoneSPID"), ("BW-BroadworksApplicationServer", "bwIPPhoneSPNumForwards"), ("BW-BroadworksApplicationServer", "bwIPPhoneGroupIndex"), ("BW-BroadworksApplicationServer", "bwIPPhoneGroupID"), ("BW-BroadworksApplicationServer", "bwIPPhoneGroupNumForwards"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwAsIpPhoneServiceGroup = bwAsIpPhoneServiceGroup.setStatus('current')
if mibBuilder.loadTexts: bwAsIpPhoneServiceGroup.setDescription('This group defines the statistics for the IP Phone Service.')
bwAsLastNumberRedialServiceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1000, 1, 36)).setObjects(("BW-BroadworksApplicationServer", "bwLNRNumRedials"), ("BW-BroadworksApplicationServer", "bwLastNumberRedialSPTable"), ("BW-BroadworksApplicationServer", "bwLastNumberRedialGroupTable"), ("BW-BroadworksApplicationServer", "bwLastNumberRedialSPIndex"), ("BW-BroadworksApplicationServer", "bwLastNumberRedialSPID"), ("BW-BroadworksApplicationServer", "bwLNRSPNumRedials"), ("BW-BroadworksApplicationServer", "bwLastNumberRedialGroupIndex"), ("BW-BroadworksApplicationServer", "bwLastNumberRedialGroupID"), ("BW-BroadworksApplicationServer", "bwLNRGroupNumRedials"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwAsLastNumberRedialServiceGroup = bwAsLastNumberRedialServiceGroup.setStatus('current')
if mibBuilder.loadTexts: bwAsLastNumberRedialServiceGroup.setDescription('This group defines the statistics for the Last Number Redial Service.')
bwAsOcpServiceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1000, 1, 37)).setObjects(("BW-BroadworksApplicationServer", "bwOCPNumGroupCallsBlocked"), ("BW-BroadworksApplicationServer", "bwOCPNumLocalCallsBlocked"), ("BW-BroadworksApplicationServer", "bwOCPNumTollFreeCallsBlocked"), ("BW-BroadworksApplicationServer", "bwOCPNumTollCallsBlocked"), ("BW-BroadworksApplicationServer", "bwOCPNumIntlCallsBlocked"), ("BW-BroadworksApplicationServer", "bwOCPNumOperatorAssistedCallsBlocked"), ("BW-BroadworksApplicationServer", "bwOCPNumChargeableDirAssistCallsBlocked"), ("BW-BroadworksApplicationServer", "bwOCPNumSpecialServices1CallsBlocked"), ("BW-BroadworksApplicationServer", "bwOCPNumSpecialServices2CallsBlocked"), ("BW-BroadworksApplicationServer", "bwOCPNumPremiumServices1CallsBlocked"), ("BW-BroadworksApplicationServer", "bwOCPNumPremiumServices2CallsBlocked"), ("BW-BroadworksApplicationServer", "bwOCPNumCasualCallsBlocked"), ("BW-BroadworksApplicationServer", "bwOCPNumURLDialingCallsBlocked"), ("BW-BroadworksApplicationServer", "bwOCPNumUnknownCallsBlocked"), ("BW-BroadworksApplicationServer", "bwOutgoingCallingPlanSPTable"), ("BW-BroadworksApplicationServer", "bwOutgoingCallingPlanGroupTable"), ("BW-BroadworksApplicationServer", "bwOCPNumSuccessfulAuthorizations"), ("BW-BroadworksApplicationServer", "bwOCPNumUnsuccessfulAuthorizations"), ("BW-BroadworksApplicationServer", "bwOCPNumTransfers"), ("BW-BroadworksApplicationServer", "bwOCPSACNumSuccessfulLock"), ("BW-BroadworksApplicationServer", "bwOCPSACNumSuccessfulUnlock"), ("BW-BroadworksApplicationServer", "bwOCPSACNumUnsuccessfulLock"), ("BW-BroadworksApplicationServer", "bwOCPSACNumUnsuccessfulUnlock"), ("BW-BroadworksApplicationServer", "bwOCPSACNumUnsuccessfulCodeUsage"), ("BW-BroadworksApplicationServer", "bwOCPNumOutsideGroupTransferBlocks"), ("BW-BroadworksApplicationServer", "bwOutgoingCallingPlanSPIndex"), ("BW-BroadworksApplicationServer", "bwOutgoingCallingPlanSPID"), ("BW-BroadworksApplicationServer", "bwOCPSPNumGroupCallsBlocked"), ("BW-BroadworksApplicationServer", "bwOCPSPNumLocalCallsBlocked"), ("BW-BroadworksApplicationServer", "bwOCPSPNumTollFreeCallsBlocked"), ("BW-BroadworksApplicationServer", "bwOCPSPNumTollCallsBlocked"), ("BW-BroadworksApplicationServer", "bwOCPSPNumIntlCallsBlocked"), ("BW-BroadworksApplicationServer", "bwOCPSPNumOperatorAssistedCallsBlocked"), ("BW-BroadworksApplicationServer", "bwOCPSPNumChargeableDirAssistCallsBlocked"), ("BW-BroadworksApplicationServer", "bwOCPSPNumSpecialServices1CallsBlocked"), ("BW-BroadworksApplicationServer", "bwOCPSPNumSpecialServices2CallsBlocked"), ("BW-BroadworksApplicationServer", "bwOCPSPNumPremiumServices1CallsBlocked"), ("BW-BroadworksApplicationServer", "bwOCPSPNumPremiumServices2CallsBlocked"), ("BW-BroadworksApplicationServer", "bwOCPSPNumCasualCallsBlocked"), ("BW-BroadworksApplicationServer", "bwOCPSPNumURLDialingCallsBlocked"), ("BW-BroadworksApplicationServer", "bwOCPSPNumUnknownCallsBlocked"), ("BW-BroadworksApplicationServer", "bwOCPSPNumSuccessfulAuthorizations"), ("BW-BroadworksApplicationServer", "bwOCPSPNumUnsuccessfulAuthorizations"), ("BW-BroadworksApplicationServer", "bwOCPSPNumTransfers"), ("BW-BroadworksApplicationServer", "bwOCPSACSPNumSuccessfulLock"), ("BW-BroadworksApplicationServer", "bwOCPSACSPNumSuccessfulUnlock"), ("BW-BroadworksApplicationServer", "bwOCPSACSPNumUnsuccessfulLock"), ("BW-BroadworksApplicationServer", "bwOCPSACSPNumUnsuccessfulUnlock"), ("BW-BroadworksApplicationServer", "bwOCPSACSPNumUnsuccessfulCodeUsage"), ("BW-BroadworksApplicationServer", "bwOCPSPNumOutsideGroupTransferBlocks"), ("BW-BroadworksApplicationServer", "bwOutgoingCallingPlanGroupIndex"), ("BW-BroadworksApplicationServer", "bwOutgoingCallingPlanGroupID"), ("BW-BroadworksApplicationServer", "bwOCPGroupNumGroupCallsBlocked"), ("BW-BroadworksApplicationServer", "bwOCPGroupNumLocalCallsBlocked"), ("BW-BroadworksApplicationServer", "bwOCPGroupNumTollFreeCallsBlocked"), ("BW-BroadworksApplicationServer", "bwOCPGroupNumTollCallsBlocked"), ("BW-BroadworksApplicationServer", "bwOCPGroupNumIntlCallsBlocked"), ("BW-BroadworksApplicationServer", "bwOCPGroupNumOperatorAssistedCallsBlocked"), ("BW-BroadworksApplicationServer", "bwOCPGroupNumChargeableDirAssistCallsBlocked"), ("BW-BroadworksApplicationServer", "bwOCPGroupNumSpecialServices1CallsBlocked"), ("BW-BroadworksApplicationServer", "bwOCPGroupNumSpecialServices2CallsBlocked"), ("BW-BroadworksApplicationServer", "bwOCPGroupNumPremiumServices1CallsBlocked"), ("BW-BroadworksApplicationServer", "bwOCPGroupNumPremiumServices2CallsBlocked"), ("BW-BroadworksApplicationServer", "bwOCPGroupNumCasualCallsBlocked"), ("BW-BroadworksApplicationServer", "bwOCPGroupNumURLDialingCallsBlocked"), ("BW-BroadworksApplicationServer", "bwOCPGroupNumUnknownCallsBlocked"), ("BW-BroadworksApplicationServer", "bwOCPGroupNumSuccessfulAuthorizations"), ("BW-BroadworksApplicationServer", "bwOCPGroupNumUnsuccessfulAuthorizations"), ("BW-BroadworksApplicationServer", "bwOCPGroupNumTransfers"), ("BW-BroadworksApplicationServer", "bwOCPSACGroupNumSuccessfulLock"), ("BW-BroadworksApplicationServer", "bwOCPSACGroupNumSuccessfulUnlock"), ("BW-BroadworksApplicationServer", "bwOCPSACGroupNumUnsuccessfulLock"), ("BW-BroadworksApplicationServer", "bwOCPSACGroupNumUnsuccessfulUnlock"), ("BW-BroadworksApplicationServer", "bwOCPSACGroupNumUnsuccessfulCodeUsage"), ("BW-BroadworksApplicationServer", "bwOCPGroupNumOutsideGroupTransferBlocks"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwAsOcpServiceGroup = bwAsOcpServiceGroup.setStatus('current')
if mibBuilder.loadTexts: bwAsOcpServiceGroup.setDescription('This group defines the statistics for the Outgoing Calling Plan Service.')
bwAsPriorityAlertServiceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1000, 1, 38)).setObjects(("BW-BroadworksApplicationServer", "bwPriorityAlertNumDistinctive"), ("BW-BroadworksApplicationServer", "bwPriorityAlertSPTable"), ("BW-BroadworksApplicationServer", "bwPriorityAlertGroupTable"), ("BW-BroadworksApplicationServer", "bwPriorityAlertSPIndex"), ("BW-BroadworksApplicationServer", "bwPriorityAlertSPID"), ("BW-BroadworksApplicationServer", "bwPriorityAlertSPNumDistinctive"), ("BW-BroadworksApplicationServer", "bwPriorityAlertGroupIndex"), ("BW-BroadworksApplicationServer", "bwPriorityAlertGroupID"), ("BW-BroadworksApplicationServer", "bwPriorityAlertGroupNumDistinctive"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwAsPriorityAlertServiceGroup = bwAsPriorityAlertServiceGroup.setStatus('current')
if mibBuilder.loadTexts: bwAsPriorityAlertServiceGroup.setDescription('This group defines the statistics for the Priority Alert Service.')
bwAsSelectiveCallAcceptanceServiceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1000, 1, 39)).setObjects(("BW-BroadworksApplicationServer", "bwSCANumAcceptances"), ("BW-BroadworksApplicationServer", "bwSelectiveCallAcceptanceSPTable"), ("BW-BroadworksApplicationServer", "bwSelectiveCallAcceptanceGroupTable"), ("BW-BroadworksApplicationServer", "bwSelectiveCallAcceptanceSPIndex"), ("BW-BroadworksApplicationServer", "bwSelectiveCallAcceptanceSPID"), ("BW-BroadworksApplicationServer", "bwSCASPNumAcceptances"), ("BW-BroadworksApplicationServer", "bwSelectiveCallAcceptanceGroupIndex"), ("BW-BroadworksApplicationServer", "bwSelectiveCallAcceptanceGroupID"), ("BW-BroadworksApplicationServer", "bwSCAGroupNumAcceptances"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwAsSelectiveCallAcceptanceServiceGroup = bwAsSelectiveCallAcceptanceServiceGroup.setStatus('current')
if mibBuilder.loadTexts: bwAsSelectiveCallAcceptanceServiceGroup.setDescription('This group defines the statistics for the Selective Call Acceptance Service.')
bwAsSelectiveCallForwardServiceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1000, 1, 40)).setObjects(("BW-BroadworksApplicationServer", "bwSCFNumForwards"), ("BW-BroadworksApplicationServer", "bwSelectiveCallForwardSPTable"), ("BW-BroadworksApplicationServer", "bwSelectiveCallForwardGroupTable"), ("BW-BroadworksApplicationServer", "bwSelectiveCallForwardSPIndex"), ("BW-BroadworksApplicationServer", "bwSelectiveCallForwardSPID"), ("BW-BroadworksApplicationServer", "bwSCFSPNumForwards"), ("BW-BroadworksApplicationServer", "bwSelectiveCallForwardGroupIndex"), ("BW-BroadworksApplicationServer", "bwSelectiveCallForwardGroupID"), ("BW-BroadworksApplicationServer", "bwSCFGroupNumForwards"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwAsSelectiveCallForwardServiceGroup = bwAsSelectiveCallForwardServiceGroup.setStatus('current')
if mibBuilder.loadTexts: bwAsSelectiveCallForwardServiceGroup.setDescription('This group defines the statistics for the Selective Call Forward Service.')
bwAsSelectiveCallRejectionServiceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1000, 1, 41)).setObjects(("BW-BroadworksApplicationServer", "bwSCRNumRejects"), ("BW-BroadworksApplicationServer", "bwSelectiveCallRejectionSPTable"), ("BW-BroadworksApplicationServer", "bwSelectiveCallRejectionGroupTable"), ("BW-BroadworksApplicationServer", "bwSelectiveCallRejectionSPIndex"), ("BW-BroadworksApplicationServer", "bwSelectiveCallRejectionSPID"), ("BW-BroadworksApplicationServer", "bwSCRSPNumRejects"), ("BW-BroadworksApplicationServer", "bwSelectiveCallRejectionGroupIndex"), ("BW-BroadworksApplicationServer", "bwSelectiveCallRejectionGroupID"), ("BW-BroadworksApplicationServer", "bwSCRGroupNumRejects"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwAsSelectiveCallRejectionServiceGroup = bwAsSelectiveCallRejectionServiceGroup.setStatus('current')
if mibBuilder.loadTexts: bwAsSelectiveCallRejectionServiceGroup.setDescription('This group defines the statistics for the Selective Call Rejection Service.')
bwAsSimRingServiceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1000, 1, 42)).setObjects(("BW-BroadworksApplicationServer", "bwSimRingPersonalNumAttempts"), ("BW-BroadworksApplicationServer", "bwSimRingPersonalNumBusy"), ("BW-BroadworksApplicationServer", "bwSimRingPersonalSPTable"), ("BW-BroadworksApplicationServer", "bwSimRingPersonalGroupTable"), ("BW-BroadworksApplicationServer", "bwSimRingPersonalSPIndex"), ("BW-BroadworksApplicationServer", "bwSimRingPersonalSPID"), ("BW-BroadworksApplicationServer", "bwSimRingPersonalSPNumAttempts"), ("BW-BroadworksApplicationServer", "bwSimRingPersonalSPNumBusy"), ("BW-BroadworksApplicationServer", "bwSimRingPersonalGroupIndex"), ("BW-BroadworksApplicationServer", "bwSimRingPersonalGroupID"), ("BW-BroadworksApplicationServer", "bwSimRingPersonalGroupNumAttempts"), ("BW-BroadworksApplicationServer", "bwSimRingPersonalGroupNumBusy"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwAsSimRingServiceGroup = bwAsSimRingServiceGroup.setStatus('current')
if mibBuilder.loadTexts: bwAsSimRingServiceGroup.setDescription('This group defines the statistics for the Simultaneous Ringing Service.')
bwAsVoiceMessagingServiceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1000, 1, 43)).setObjects(("BW-BroadworksApplicationServer", "bwVMNumBusyGreetingsPlayed"), ("BW-BroadworksApplicationServer", "bwVMNumNoAnswerGreetingsPlayed"), ("BW-BroadworksApplicationServer", "bwVMNumMessagesLeft"), ("BW-BroadworksApplicationServer", "bwVMRNumBusyGreetingsRecorded"), ("BW-BroadworksApplicationServer", "bwVMRNumNoAnswerGreetingsRecorded"), ("BW-BroadworksApplicationServer", "bwVMRNumPersonalizedNamesRecorded"), ("BW-BroadworksApplicationServer", "bwVMRNumLoginAttempts"), ("BW-BroadworksApplicationServer", "bwVMRNumLoginFailures"), ("BW-BroadworksApplicationServer", "bwVMRNumComposeSendAttempts"), ("BW-BroadworksApplicationServer", "bwVMRNumComposeSendGroupAttempts"), ("BW-BroadworksApplicationServer", "bwVMRNumForwardSendAttempts"), ("BW-BroadworksApplicationServer", "bwVMRNumForwardSendGroupAttempts"), ("BW-BroadworksApplicationServer", "bwVMRNumReplySendAttempts"), ("BW-BroadworksApplicationServer", "bwVMRNumSendFailed"), ("BW-BroadworksApplicationServer", "bwVMRNumSendGroupFailed"), ("BW-BroadworksApplicationServer", "bwVMRDeleteAllMsgsAttempts"), ("BW-BroadworksApplicationServer", "bwVMRCallBackAttempts"), ("BW-BroadworksApplicationServer", "bwVMRCallBackFailures"), ("BW-BroadworksApplicationServer", "bwVPNumAABusHoursGreetingRecorded"), ("BW-BroadworksApplicationServer", "bwVPNumAAAfterHoursGreetingRecorded"), ("BW-BroadworksApplicationServer", "bwVPNumCFADestinationChanged"), ("BW-BroadworksApplicationServer", "bwVPNumPasscodeChanged"), ("BW-BroadworksApplicationServer", "bwVoiceMessagingSPTable"), ("BW-BroadworksApplicationServer", "bwVMRNumComposeSendListAttempts"), ("BW-BroadworksApplicationServer", "bwVMRNumForwardSendListAttempts"), ("BW-BroadworksApplicationServer", "bwVMRNumSendListFailed"), ("BW-BroadworksApplicationServer", "bwVPGreetingRecorded"), ("BW-BroadworksApplicationServer", "bwVMGreetingRecorded"), ("BW-BroadworksApplicationServer", "bwVoiceMessagingGroupTable"), ("BW-BroadworksApplicationServer", "bwVPCCall"), ("BW-BroadworksApplicationServer", "bwMultiMediaMsgDeposit"), ("BW-BroadworksApplicationServer", "bwVMMultiMediaGreetingRecorded"), ("BW-BroadworksApplicationServer", "bwAutoAttendantMultiMediaPromptRecorded"), ("BW-BroadworksApplicationServer", "bwVoiceMessagingSPIndex"), ("BW-BroadworksApplicationServer", "bwVoiceMessagingSPID"), ("BW-BroadworksApplicationServer", "bwVMSPNumBusyGreetingsPlayed"), ("BW-BroadworksApplicationServer", "bwVMSPNumNoAnswerGreetingsPlayed"), ("BW-BroadworksApplicationServer", "bwVMSPNumMessagesLeft"), ("BW-BroadworksApplicationServer", "bwVMRSPNumBusyGreetingsRecorded"), ("BW-BroadworksApplicationServer", "bwVMRSPNumNoAnswerGreetingsRecorded"), ("BW-BroadworksApplicationServer", "bwVMRSPNumPersonalizedNamesRecorded"), ("BW-BroadworksApplicationServer", "bwVMRSPNumLoginAttempts"), ("BW-BroadworksApplicationServer", "bwVMRSPNumLoginFailures"), ("BW-BroadworksApplicationServer", "bwVMRSPNumComposeSendAttempts"), ("BW-BroadworksApplicationServer", "bwVMRSPNumComposeSendGroupAttempts"), ("BW-BroadworksApplicationServer", "bwVMRSPNumForwardSendAttempts"), ("BW-BroadworksApplicationServer", "bwVMRSPNumForwardSendGroupAttempts"), ("BW-BroadworksApplicationServer", "bwVMRSPNumReplySendAttempts"), ("BW-BroadworksApplicationServer", "bwVMRSPNumSendFailed"), ("BW-BroadworksApplicationServer", "bwVMRSPNumSendGroupFailed"), ("BW-BroadworksApplicationServer", "bwVMRSPDeleteAllMsgsAttempts"), ("BW-BroadworksApplicationServer", "bwVMRSPCallBackAttempts"), ("BW-BroadworksApplicationServer", "bwVPSPNumAABusHoursGreetingRecorded"), ("BW-BroadworksApplicationServer", "bwVPSPNumAAAfterHoursGreetingRecorded"), ("BW-BroadworksApplicationServer", "bwVPSPNumCFADestinationChanged"), ("BW-BroadworksApplicationServer", "bwVPSPNumPasscodeChanged"), ("BW-BroadworksApplicationServer", "bwVMRSPNumComposeSendListAttempts"), ("BW-BroadworksApplicationServer", "bwVMRSPNumForwardSendListAttempts"), ("BW-BroadworksApplicationServer", "bwVMRSPNumSendListFailed"), ("BW-BroadworksApplicationServer", "bwVPSPGreetingRecorded"), ("BW-BroadworksApplicationServer", "bwVMSPGreetingRecorded"), ("BW-BroadworksApplicationServer", "bwVPCSPCall"), ("BW-BroadworksApplicationServer", "bwSPMultiMediaMsgDeposit"), ("BW-BroadworksApplicationServer", "bwVMSPMultiMediaGreetingRecorded"), ("BW-BroadworksApplicationServer", "bwAutoAttendantSPMultiMediaPromptRecorded"), ("BW-BroadworksApplicationServer", "bwVoiceMessagingGroupIndex"), ("BW-BroadworksApplicationServer", "bwVoiceMessagingGroupID"), ("BW-BroadworksApplicationServer", "bwVMGroupNumBusyGreetingsPlayed"), ("BW-BroadworksApplicationServer", "bwVMGroupNumNoAnswerGreetingsPlayed"), ("BW-BroadworksApplicationServer", "bwVMGroupNumMessagesLeft"), ("BW-BroadworksApplicationServer", "bwVMRGroupNumBusyGreetingsRecorded"), ("BW-BroadworksApplicationServer", "bwVMRGroupNumNoAnswerGreetingsRecorded"), ("BW-BroadworksApplicationServer", "bwVMRGroupNumPersonalizedNamesRecorded"), ("BW-BroadworksApplicationServer", "bwVMRGroupNumLoginAttempts"), ("BW-BroadworksApplicationServer", "bwVMRGroupNumLoginFailures"), ("BW-BroadworksApplicationServer", "bwVMRGroupNumComposeSendAttempts"), ("BW-BroadworksApplicationServer", "bwVMRGroupNumComposeSendGroupAttempts"), ("BW-BroadworksApplicationServer", "bwVMRGroupNumForwardSendAttempts"), ("BW-BroadworksApplicationServer", "bwVMRGroupNumForwardSendGroupAttempts"), ("BW-BroadworksApplicationServer", "bwVMRGroupNumReplySendAttempts"), ("BW-BroadworksApplicationServer", "bwVMRGroupNumSendFailed"), ("BW-BroadworksApplicationServer", "bwVMRGroupNumSendGroupFailed"), ("BW-BroadworksApplicationServer", "bwVMRGroupDeleteAllMsgsAttempts"), ("BW-BroadworksApplicationServer", "bwVMRGroupCallBackAttempts"), ("BW-BroadworksApplicationServer", "bwVMRGroupCallBackFailures"), ("BW-BroadworksApplicationServer", "bwVPGroupNumAABusHoursGreetingRecorded"), ("BW-BroadworksApplicationServer", "bwVPGroupNumAAAfterHoursGreetingRecorded"), ("BW-BroadworksApplicationServer", "bwVPGroupNumCFADestinationChanged"), ("BW-BroadworksApplicationServer", "bwVPGroupNumPasscodeChanged"), ("BW-BroadworksApplicationServer", "bwVMRGroupNumComposeSendListAttempts"), ("BW-BroadworksApplicationServer", "bwVMRGroupNumForwardSendListAttempts"), ("BW-BroadworksApplicationServer", "bwVMRGroupNumSendListFailed"), ("BW-BroadworksApplicationServer", "bwVPGroupGreetingRecorded"), ("BW-BroadworksApplicationServer", "bwVMGroupGreetingRecorded"), ("BW-BroadworksApplicationServer", "bwVPCGroupCall"), ("BW-BroadworksApplicationServer", "bwGroupMultiMediaMsgDeposit"), ("BW-BroadworksApplicationServer", "bwVMGroupMultiMediaGreetingRecorded"), ("BW-BroadworksApplicationServer", "bwAutoAttendantGroupMultiMediaPromptRecorded"), ("BW-BroadworksApplicationServer", "bwMessagingQuery"), ("BW-BroadworksApplicationServer", "bwMessagingQueryNoUser"), ("BW-BroadworksApplicationServer", "bwMessagingQueryNoMailbox"), ("BW-BroadworksApplicationServer", "bwMessagingSPQuery"), ("BW-BroadworksApplicationServer", "bwMessagingSPQueryNoUser"), ("BW-BroadworksApplicationServer", "bwMessagingSPQueryNoMailbox"), ("BW-BroadworksApplicationServer", "bwMessagingGroupQuery"), ("BW-BroadworksApplicationServer", "bwMessagingGroupQueryNoUser"), ("BW-BroadworksApplicationServer", "bwMessagingGroupQueryNoMailbox"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwAsVoiceMessagingServiceGroup = bwAsVoiceMessagingServiceGroup.setStatus('current')
if mibBuilder.loadTexts: bwAsVoiceMessagingServiceGroup.setDescription('This group defines the statistics for the Voice Messaging Service.')
bwAsSeriesCompletionServiceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1000, 1, 44)).setObjects(("BW-BroadworksApplicationServer", "bwSeriesCompletionNumAttempts"), ("BW-BroadworksApplicationServer", "bwSeriesCompletionNumBusy"), ("BW-BroadworksApplicationServer", "bwSeriesCompletionSPTable"), ("BW-BroadworksApplicationServer", "bwSeriesCompletionGroupTable"), ("BW-BroadworksApplicationServer", "bwSeriesCompletionSPIndex"), ("BW-BroadworksApplicationServer", "bwSeriesCompletionSPID"), ("BW-BroadworksApplicationServer", "bwSeriesCompletionSPNumAttempts"), ("BW-BroadworksApplicationServer", "bwSeriesCompletionSPNumBusy"), ("BW-BroadworksApplicationServer", "bwSeriesCompletionGroupIndex"), ("BW-BroadworksApplicationServer", "bwSeriesCompletionGroupID"), ("BW-BroadworksApplicationServer", "bwSeriesCompletionGroupNumAttempts"), ("BW-BroadworksApplicationServer", "bwSeriesCompletionGroupNumBusy"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwAsSeriesCompletionServiceGroup = bwAsSeriesCompletionServiceGroup.setStatus('current')
if mibBuilder.loadTexts: bwAsSeriesCompletionServiceGroup.setDescription('This group defines the statistics for the Series Completion Service.')
bwAsInterceptServiceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1000, 1, 45)).setObjects(("BW-BroadworksApplicationServer", "bwInterceptUserOriginationInvocations"), ("BW-BroadworksApplicationServer", "bwInterceptGroupOriginationInvocations"), ("BW-BroadworksApplicationServer", "bwInterceptUserTerminationInvocations"), ("BW-BroadworksApplicationServer", "bwInterceptGroupTerminationInvocations"), ("BW-BroadworksApplicationServer", "bwInterceptTransfers"), ("BW-BroadworksApplicationServer", "bwInterceptSPTable"), ("BW-BroadworksApplicationServer", "bwInterceptGroupTable"), ("BW-BroadworksApplicationServer", "bwInterceptSPIndex"), ("BW-BroadworksApplicationServer", "bwInterceptSPID"), ("BW-BroadworksApplicationServer", "bwInterceptSPUserOriginationInvocations"), ("BW-BroadworksApplicationServer", "bwInterceptSPGroupOriginationInvocations"), ("BW-BroadworksApplicationServer", "bwInterceptSPUserTerminationInvocations"), ("BW-BroadworksApplicationServer", "bwInterceptSPGroupTerminationInvocations"), ("BW-BroadworksApplicationServer", "bwInterceptSPTransfers"), ("BW-BroadworksApplicationServer", "bwInterceptGroupIndex"), ("BW-BroadworksApplicationServer", "bwInterceptGroupID"), ("BW-BroadworksApplicationServer", "bwInterceptGroupUserOriginationInvocations"), ("BW-BroadworksApplicationServer", "bwInterceptGroupGroupOriginationInvocations"), ("BW-BroadworksApplicationServer", "bwInterceptGroupUserTerminationInvocations"), ("BW-BroadworksApplicationServer", "bwInterceptGroupGroupTerminationInvocations"), ("BW-BroadworksApplicationServer", "bwInterceptGroupTransfers"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwAsInterceptServiceGroup = bwAsInterceptServiceGroup.setStatus('current')
if mibBuilder.loadTexts: bwAsInterceptServiceGroup.setDescription('This group defines the statistics for the Intercept Service.')
bwAsInstantConferencingServiceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1000, 1, 46)).setObjects(("BW-BroadworksApplicationServer", "bwICGroupPortLimitExceeded"), ("BW-BroadworksApplicationServer", "bwICNumAttempts"), ("BW-BroadworksApplicationServer", "bwInstantConferencingSPTable"), ("BW-BroadworksApplicationServer", "bwInstantConferencingGroupTable"), ("BW-BroadworksApplicationServer", "bwInstantConferencingBridgeTable"), ("BW-BroadworksApplicationServer", "bwICOutdialNumAttempts"), ("BW-BroadworksApplicationServer", "bwInstantConferencingSPIndex"), ("BW-BroadworksApplicationServer", "bwInstantConferencingSPID"), ("BW-BroadworksApplicationServer", "bwICSPGroupPortLimitExceeded"), ("BW-BroadworksApplicationServer", "bwICSPNumAttempts"), ("BW-BroadworksApplicationServer", "bwICSPOutdialNumAttempts"), ("BW-BroadworksApplicationServer", "bwInstantConferencingGroupIndex"), ("BW-BroadworksApplicationServer", "bwInstantConferencingGroupID"), ("BW-BroadworksApplicationServer", "bwICGroupGroupPortLimitExceeded"), ("BW-BroadworksApplicationServer", "bwICGroupNumAttempts"), ("BW-BroadworksApplicationServer", "bwICGroupOutdialNumAttempts"), ("BW-BroadworksApplicationServer", "bwInstantConferencingBridgeIndex"), ("BW-BroadworksApplicationServer", "bwInstantConferencingBridgeName"), ("BW-BroadworksApplicationServer", "bwInstantConferencingBridgeGroupName"), ("BW-BroadworksApplicationServer", "bwInstantConferencingCurrentUsage"), ("BW-BroadworksApplicationServer", "bwInstantConferencingTodaysPeakUsage"), ("BW-BroadworksApplicationServer", "bwInstantConferencingYesterdaysPeakUsage"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwAsInstantConferencingServiceGroup = bwAsInstantConferencingServiceGroup.setStatus('current')
if mibBuilder.loadTexts: bwAsInstantConferencingServiceGroup.setDescription('This group defines the statistics for the Instant Conferencing Service.')
bwAsCallingLineIdBlockingServiceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1000, 1, 47)).setObjects(("BW-BroadworksApplicationServer", "bwCallingLineIDDeliveryBlockPerCallBlocks"), ("BW-BroadworksApplicationServer", "bwCallingLineIDDeliveryBlockSPTable"), ("BW-BroadworksApplicationServer", "bwCallingLineIDDeliveryBlockGroupTable"), ("BW-BroadworksApplicationServer", "bwCallingLineIDDeliveryPerCall"), ("BW-BroadworksApplicationServer", "bwCallingLineIDDeliveryBlockSPIndex"), ("BW-BroadworksApplicationServer", "bwCallingLineIDDeliveryBlockSPID"), ("BW-BroadworksApplicationServer", "bwCallingLineIDDeliveryBlockSPPerCallBlocks"), ("BW-BroadworksApplicationServer", "bwCallingLineIDDeliveryPerCallSP"), ("BW-BroadworksApplicationServer", "bwCallingLineIDDeliveryBlockGroupIndex"), ("BW-BroadworksApplicationServer", "bwCallingLineIDDeliveryBlockGroupID"), ("BW-BroadworksApplicationServer", "bwCallingLineIDDeliveryBlockGroupPerCallBlocks"), ("BW-BroadworksApplicationServer", "bwCallingLineIDDeliveryPerCallGroup"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwAsCallingLineIdBlockingServiceGroup = bwAsCallingLineIdBlockingServiceGroup.setStatus('current')
if mibBuilder.loadTexts: bwAsCallingLineIdBlockingServiceGroup.setDescription('This group defines the statistics for the Calling Line ID Blocking Service.')
bwAsSessionAuditServiceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1000, 1, 48)).setObjects(("BW-BroadworksApplicationServer", "bwSessionAuditNumCallsAudited"), ("BW-BroadworksApplicationServer", "bwSessionAuditNumEndpointsAudited"), ("BW-BroadworksApplicationServer", "bwSessionAuditNumCallsFailedAudit"), ("BW-BroadworksApplicationServer", "bwSessionAuditNumEndpointsFailedAudit"), ("BW-BroadworksApplicationServer", "bwSessionAuditSPTable"), ("BW-BroadworksApplicationServer", "bwSessionAuditGroupTable"), ("BW-BroadworksApplicationServer", "bwSessionAuditSPIndex"), ("BW-BroadworksApplicationServer", "bwSessionAuditSPID"), ("BW-BroadworksApplicationServer", "bwSessionAuditSPNumCallsAudited"), ("BW-BroadworksApplicationServer", "bwSessionAuditSPNumEndpointsAudited"), ("BW-BroadworksApplicationServer", "bwSessionAuditSPNumCallsFailedAudit"), ("BW-BroadworksApplicationServer", "bwSessionAuditSPNumEndpointsFailedAudit"), ("BW-BroadworksApplicationServer", "bwSessionAuditGroupIndex"), ("BW-BroadworksApplicationServer", "bwSessionAuditGroupID"), ("BW-BroadworksApplicationServer", "bwSessionAuditGroupNumCallsAudited"), ("BW-BroadworksApplicationServer", "bwSessionAuditGroupNumEndpointsAudited"), ("BW-BroadworksApplicationServer", "bwSessionAuditGroupNumCallsFailedAudit"), ("BW-BroadworksApplicationServer", "bwSessionAuditGroupNumEndpointsFailedAudit"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwAsSessionAuditServiceGroup = bwAsSessionAuditServiceGroup.setStatus('current')
if mibBuilder.loadTexts: bwAsSessionAuditServiceGroup.setDescription('This group defines the statistics for the Session Audit Service.')
bwAsWindowsMessagingServiceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1000, 1, 49)).setObjects(("BW-BroadworksApplicationServer", "bwWindowsMessagingIMSessionSuccessCounter"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwAsWindowsMessagingServiceGroup = bwAsWindowsMessagingServiceGroup.setStatus('current')
if mibBuilder.loadTexts: bwAsWindowsMessagingServiceGroup.setDescription('This group defines the statistics for the Windows Messaging Service.')
bwAsCalWaitingServiceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1000, 1, 50)).setObjects(("BW-BroadworksApplicationServer", "bwCallWaitingSPTable"), ("BW-BroadworksApplicationServer", "bwCWNumPhoneCancellations"), ("BW-BroadworksApplicationServer", "bwCallWaitingGroupTable"), ("BW-BroadworksApplicationServer", "bwCallWaitingSPIndex"), ("BW-BroadworksApplicationServer", "bwCallWaitingSPID"), ("BW-BroadworksApplicationServer", "bwCWSPNumPhoneCancellations"), ("BW-BroadworksApplicationServer", "bwCallWaitingGroupIndex"), ("BW-BroadworksApplicationServer", "bwCallWaitingGroupID"), ("BW-BroadworksApplicationServer", "bwCWGroupNumPhoneCancellations"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwAsCalWaitingServiceGroup = bwAsCalWaitingServiceGroup.setStatus('current')
if mibBuilder.loadTexts: bwAsCalWaitingServiceGroup.setDescription('This group defines the statistics for the Call Waiting Service.')
bwAsAlternateNumberServiceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1000, 1, 51)).setObjects(("BW-BroadworksApplicationServer", "bwAlternateNumbersSPTable"), ("BW-BroadworksApplicationServer", "bwAlternateNumbersUsage"), ("BW-BroadworksApplicationServer", "bwAlternateNumbersGroupTable"), ("BW-BroadworksApplicationServer", "bwAlternateNumbersSPIndex"), ("BW-BroadworksApplicationServer", "bwAlternateNumbersSPID"), ("BW-BroadworksApplicationServer", "bwAlternateNumbersSPUsage"), ("BW-BroadworksApplicationServer", "bwAlternateNumbersGroupIndex"), ("BW-BroadworksApplicationServer", "bwAlternateNumbersGroupID"), ("BW-BroadworksApplicationServer", "bwAlternateNumbersGroupUsage"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwAsAlternateNumberServiceGroup = bwAsAlternateNumberServiceGroup.setStatus('current')
if mibBuilder.loadTexts: bwAsAlternateNumberServiceGroup.setDescription('This group defines the statistics for the Alternate Number Service.')
bwAsCustomerOriginatedTraceServiceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1000, 1, 52)).setObjects(("BW-BroadworksApplicationServer", "bwCotActivation"), ("BW-BroadworksApplicationServer", "bwCotFailureNoId"), ("BW-BroadworksApplicationServer", "bwCotSPTable"), ("BW-BroadworksApplicationServer", "bwCotGroupTable"), ("BW-BroadworksApplicationServer", "bwCotSPIndex"), ("BW-BroadworksApplicationServer", "bwCotSPID"), ("BW-BroadworksApplicationServer", "bwCotSPActivation"), ("BW-BroadworksApplicationServer", "bwCotSPFailureNoId"), ("BW-BroadworksApplicationServer", "bwCotGroupIndex"), ("BW-BroadworksApplicationServer", "bwCotGroupID"), ("BW-BroadworksApplicationServer", "bwCotGroupActivation"), ("BW-BroadworksApplicationServer", "bwCotGroupFailureNoId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwAsCustomerOriginatedTraceServiceGroup = bwAsCustomerOriginatedTraceServiceGroup.setStatus('current')
if mibBuilder.loadTexts: bwAsCustomerOriginatedTraceServiceGroup.setDescription('This group defines the statistics for the Customer Originated Trace Service.')
bwAsSpeedDialing8ServiceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1000, 1, 53)).setObjects(("BW-BroadworksApplicationServer", "bwSD8NumTimesDialed"), ("BW-BroadworksApplicationServer", "bwSD8NumTimesProgrammed"), ("BW-BroadworksApplicationServer", "bwSD8SPTable"), ("BW-BroadworksApplicationServer", "bwSD8GroupTable"), ("BW-BroadworksApplicationServer", "bwSD8SPIndex"), ("BW-BroadworksApplicationServer", "bwSD8SPID"), ("BW-BroadworksApplicationServer", "bwSD8SPNumTimesDialed"), ("BW-BroadworksApplicationServer", "bwSD8SPNumTimesProgrammed"), ("BW-BroadworksApplicationServer", "bwSD8GroupIndex"), ("BW-BroadworksApplicationServer", "bwSD8GroupID"), ("BW-BroadworksApplicationServer", "bwSD8GroupNumTimesDialed"), ("BW-BroadworksApplicationServer", "bwSD8GroupNumTimesProgrammed"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwAsSpeedDialing8ServiceGroup = bwAsSpeedDialing8ServiceGroup.setStatus('current')
if mibBuilder.loadTexts: bwAsSpeedDialing8ServiceGroup.setDescription('This group defines the statistics for the Speed Dialing 8 Service.')
bwAsMusicOnHoldServiceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1000, 1, 54)).setObjects(("BW-BroadworksApplicationServer", "bwMusicOnHoldNumUses"), ("BW-BroadworksApplicationServer", "bwMusicOnHoldSPTable"), ("BW-BroadworksApplicationServer", "bwMusicOnHoldGroupTable"), ("BW-BroadworksApplicationServer", "bwMusicOnHoldExternalSourceNumFailures"), ("BW-BroadworksApplicationServer", "bwMusicOnHoldSPIndex"), ("BW-BroadworksApplicationServer", "bwMusicOnHoldSPID"), ("BW-BroadworksApplicationServer", "bwMusicOnHoldSPNumUses"), ("BW-BroadworksApplicationServer", "bwMusicOnHoldSPExternalSourceNumFailures"), ("BW-BroadworksApplicationServer", "bwMusicOnHoldGroupIndex"), ("BW-BroadworksApplicationServer", "bwMusicOnHoldGroupID"), ("BW-BroadworksApplicationServer", "bwMusicOnHoldGroupNumUses"), ("BW-BroadworksApplicationServer", "bwMusicOnHoldGroupExternalSourceNumFailures"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwAsMusicOnHoldServiceGroup = bwAsMusicOnHoldServiceGroup.setStatus('current')
if mibBuilder.loadTexts: bwAsMusicOnHoldServiceGroup.setDescription('This group defines the statistics for the Music On Hold Service.')
bwAsCallingNameQueriesServiceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1000, 1, 55)).setObjects(("BW-BroadworksApplicationServer", "bwCNAMQueriesSent"), ("BW-BroadworksApplicationServer", "bwCNAMQueriesFailed"), ("BW-BroadworksApplicationServer", "bwCNAMQueriesTimeout"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwAsCallingNameQueriesServiceGroup = bwAsCallingNameQueriesServiceGroup.setStatus('current')
if mibBuilder.loadTexts: bwAsCallingNameQueriesServiceGroup.setDescription('This group defines the statistics for the Calling Name Queries Service.')
bwAsThirdPartyMWIControlServiceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1000, 1, 56)).setObjects(("BW-BroadworksApplicationServer", "bwThirdPartyMWIControlNotifyIns"), ("BW-BroadworksApplicationServer", "bwThirdPartyMWIControlNotifyFailures"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwAsThirdPartyMWIControlServiceGroup = bwAsThirdPartyMWIControlServiceGroup.setStatus('current')
if mibBuilder.loadTexts: bwAsThirdPartyMWIControlServiceGroup.setDescription('This group defines the statistics for the Third Party Message Waiting Indicator Control Service.')
bwAsCallCenterServiceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1000, 1, 57)).setObjects(("BW-BroadworksApplicationServer", "bwCallCenterReportEmailed"), ("BW-BroadworksApplicationServer", "bwCallCenterSPTable"), ("BW-BroadworksApplicationServer", "bwCallCenterGroupTable"), ("BW-BroadworksApplicationServer", "bwCallCenterSPIndex"), ("BW-BroadworksApplicationServer", "bwCallCenterSPID"), ("BW-BroadworksApplicationServer", "bwCallCenterSPReportEmailed"), ("BW-BroadworksApplicationServer", "bwCallCenterGroupIndex"), ("BW-BroadworksApplicationServer", "bwCallCenterGroupID"), ("BW-BroadworksApplicationServer", "bwCallCenterGroupReportEmailed"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwAsCallCenterServiceGroup = bwAsCallCenterServiceGroup.setStatus('current')
if mibBuilder.loadTexts: bwAsCallCenterServiceGroup.setDescription('This group defines the statistics for the Call Center Service.')
bwAsCallForwardGroupNoAnswerServiceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1000, 1, 58)).setObjects(("BW-BroadworksApplicationServer", "bwCFGNAForward"), ("BW-BroadworksApplicationServer", "bwCFGNAOverflowForward"), ("BW-BroadworksApplicationServer", "bwCFGNAOverflowNoForward"), ("BW-BroadworksApplicationServer", "bwCFGNASPTable"), ("BW-BroadworksApplicationServer", "bwCFGNAGroupTable"), ("BW-BroadworksApplicationServer", "bwCFGNAExternalForward"), ("BW-BroadworksApplicationServer", "bwCFGNAExternalNoForward"), ("BW-BroadworksApplicationServer", "bwCFGNASPIndex"), ("BW-BroadworksApplicationServer", "bwCFGNASPID"), ("BW-BroadworksApplicationServer", "bwCFGNASPForward"), ("BW-BroadworksApplicationServer", "bwCFGNASPOverflowForward"), ("BW-BroadworksApplicationServer", "bwCFGNASPOverflowNoForward"), ("BW-BroadworksApplicationServer", "bwCFGNASPExternalForward"), ("BW-BroadworksApplicationServer", "bwCFGNASPExternalNoForward"), ("BW-BroadworksApplicationServer", "bwCFGNAGroupIndex"), ("BW-BroadworksApplicationServer", "bwCFGNAGroupID"), ("BW-BroadworksApplicationServer", "bwCFGNAGroupForward"), ("BW-BroadworksApplicationServer", "bwCFGNAGroupOverflowForward"), ("BW-BroadworksApplicationServer", "bwCFGNAGroupOverflowNoForward"), ("BW-BroadworksApplicationServer", "bwCFGNAGroupExternalForward"), ("BW-BroadworksApplicationServer", "bwCFGNAGroupExternalNoForward"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwAsCallForwardGroupNoAnswerServiceGroup = bwAsCallForwardGroupNoAnswerServiceGroup.setStatus('current')
if mibBuilder.loadTexts: bwAsCallForwardGroupNoAnswerServiceGroup.setDescription('This group defines the statistics for the Call Forward Group No Answer Service.')
bwAsSpeedDialing100ServiceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1000, 1, 59)).setObjects(("BW-BroadworksApplicationServer", "bwSD100Program"), ("BW-BroadworksApplicationServer", "bwSD100Call"), ("BW-BroadworksApplicationServer", "bwSD100SPTable"), ("BW-BroadworksApplicationServer", "bwSD100GroupTable"), ("BW-BroadworksApplicationServer", "bwSD100SPIndex"), ("BW-BroadworksApplicationServer", "bwSD100SPID"), ("BW-BroadworksApplicationServer", "bwSD100SPProgram"), ("BW-BroadworksApplicationServer", "bwSD100SPCall"), ("BW-BroadworksApplicationServer", "bwSD100GroupIndex"), ("BW-BroadworksApplicationServer", "bwSD100GroupID"), ("BW-BroadworksApplicationServer", "bwSD100GroupProgram"), ("BW-BroadworksApplicationServer", "bwSD100GroupCall"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwAsSpeedDialing100ServiceGroup = bwAsSpeedDialing100ServiceGroup.setStatus('current')
if mibBuilder.loadTexts: bwAsSpeedDialing100ServiceGroup.setDescription('This group defines the statistics for the Speed Dialing 100 Service.')
bwAsThirdPartyVoiceMailServiceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1000, 1, 60)).setObjects(("BW-BroadworksApplicationServer", "bwThirdPartyVoiceMailNbOfCFWBusy"), ("BW-BroadworksApplicationServer", "bwThirdPartyVoiceMailNbOfCFWNoAnswer"), ("BW-BroadworksApplicationServer", "bwThirdPartyVMailSPTable"), ("BW-BroadworksApplicationServer", "bwThirdPartyVMailGroupTable"), ("BW-BroadworksApplicationServer", "bwThirdPartyVMailSPIndex"), ("BW-BroadworksApplicationServer", "bwThirdPartyVMailSPID"), ("BW-BroadworksApplicationServer", "bwThirdPartyVoiceMailSPNbOfCFWBusy"), ("BW-BroadworksApplicationServer", "bwThirdPartyVoiceMailSPNbOfCFWNoAnswer"), ("BW-BroadworksApplicationServer", "bwThirdPartyVMailGroupIndex"), ("BW-BroadworksApplicationServer", "bwThirdPartyVMailGroupID"), ("BW-BroadworksApplicationServer", "bwThirdPartyVoiceMailGroupNbOfCFWBusy"), ("BW-BroadworksApplicationServer", "bwThirdPartyVoiceMailGroupNbOfCFWNoAnswer"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwAsThirdPartyVoiceMailServiceGroup = bwAsThirdPartyVoiceMailServiceGroup.setStatus('current')
if mibBuilder.loadTexts: bwAsThirdPartyVoiceMailServiceGroup.setDescription('This group defines the statistics for the Third Party Voice Mail Service.')
bwAsDirectedCallPickupServiceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1000, 1, 61)).setObjects(("BW-BroadworksApplicationServer", "bwDirectedCallPickupNumAttempts"), ("BW-BroadworksApplicationServer", "bwDirectedCallPickupNumFailures"), ("BW-BroadworksApplicationServer", "bwDirectedCallPickupSPTable"), ("BW-BroadworksApplicationServer", "bwDirectedCallPickupGroupTable"), ("BW-BroadworksApplicationServer", "bwDirectedCallPickupSPIndex"), ("BW-BroadworksApplicationServer", "bwDirectedCallPickupSPID"), ("BW-BroadworksApplicationServer", "bwDirectedCallPickupSPNumAttempts"), ("BW-BroadworksApplicationServer", "bwDirectedCallPickupSPNumFailures"), ("BW-BroadworksApplicationServer", "bwDirectedCallPickupGroupIndex"), ("BW-BroadworksApplicationServer", "bwDirectedCallPickupGroupID"), ("BW-BroadworksApplicationServer", "bwDirectedCallPickupGroupNumAttempts"), ("BW-BroadworksApplicationServer", "bwDirectedCallPickupGroupNumFailures"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwAsDirectedCallPickupServiceGroup = bwAsDirectedCallPickupServiceGroup.setStatus('current')
if mibBuilder.loadTexts: bwAsDirectedCallPickupServiceGroup.setDescription('This group defines the statistics for the Directed Call Pickup Service.')
bwAsFlashCallHoldServiceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1000, 1, 62)).setObjects(("BW-BroadworksApplicationServer", "bwFlashCallHoldNumActivations"), ("BW-BroadworksApplicationServer", "bwFlashCallHoldSPTable"), ("BW-BroadworksApplicationServer", "bwFlashCallHoldGroupTable"), ("BW-BroadworksApplicationServer", "bwFlashCallHoldSPIndex"), ("BW-BroadworksApplicationServer", "bwFlashCallHoldSPID"), ("BW-BroadworksApplicationServer", "bwFlashCallHoldSPNumActivations"), ("BW-BroadworksApplicationServer", "bwFlashCallHoldGroupIndex"), ("BW-BroadworksApplicationServer", "bwFlashCallHoldGroupID"), ("BW-BroadworksApplicationServer", "bwFlashCallHoldGroupNumActivations"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwAsFlashCallHoldServiceGroup = bwAsFlashCallHoldServiceGroup.setStatus('current')
if mibBuilder.loadTexts: bwAsFlashCallHoldServiceGroup.setDescription('This group defines the statistics for the Flash Call Hold Service.')
bwAsEmergencyZoneServiceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1000, 1, 63)).setObjects(("BW-BroadworksApplicationServer", "bwEZRegistrationsRejected"), ("BW-BroadworksApplicationServer", "bwEZEmergencyCallsRejected"), ("BW-BroadworksApplicationServer", "bwEZNormalCallsRejected"), ("BW-BroadworksApplicationServer", "bwEZSPTable"), ("BW-BroadworksApplicationServer", "bwEZGroupTable"), ("BW-BroadworksApplicationServer", "bwEZSPIndex"), ("BW-BroadworksApplicationServer", "bwEZSPID"), ("BW-BroadworksApplicationServer", "bwEZSPRegistrationsRejected"), ("BW-BroadworksApplicationServer", "bwEZSPEmergencyCallsRejected"), ("BW-BroadworksApplicationServer", "bwEZSPNormalCallsRejected"), ("BW-BroadworksApplicationServer", "bwEZGroupIndex"), ("BW-BroadworksApplicationServer", "bwEZGroupID"), ("BW-BroadworksApplicationServer", "bwEZGroupRegistrationsRejected"), ("BW-BroadworksApplicationServer", "bwEZGroupEmergencyCallsRejected"), ("BW-BroadworksApplicationServer", "bwEZGroupNormalCallsRejected"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwAsEmergencyZoneServiceGroup = bwAsEmergencyZoneServiceGroup.setStatus('current')
if mibBuilder.loadTexts: bwAsEmergencyZoneServiceGroup.setDescription('This group defines the statistics for the Emergency Zone Service.')
bwAsDirectedCallPickupWithBargeInServiceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1000, 1, 64)).setObjects(("BW-BroadworksApplicationServer", "bwDPUBIAttempt"), ("BW-BroadworksApplicationServer", "bwDPUBIFailure"), ("BW-BroadworksApplicationServer", "bwDPUBIBargeIn"), ("BW-BroadworksApplicationServer", "bwDPUBIBargeInFailure"), ("BW-BroadworksApplicationServer", "bwDPUBISPTable"), ("BW-BroadworksApplicationServer", "bwDPUBIGroupTable"), ("BW-BroadworksApplicationServer", "bwDPUBIExempt"), ("BW-BroadworksApplicationServer", "bwDPUBISPIndex"), ("BW-BroadworksApplicationServer", "bwDPUBISPID"), ("BW-BroadworksApplicationServer", "bwDPUBISPAttempt"), ("BW-BroadworksApplicationServer", "bwDPUBISPFailure"), ("BW-BroadworksApplicationServer", "bwDPUBISPBargeIn"), ("BW-BroadworksApplicationServer", "bwDPUBISPBargeInFailure"), ("BW-BroadworksApplicationServer", "bwDPUBISPExempt"), ("BW-BroadworksApplicationServer", "bwDPUBIGroupIndex"), ("BW-BroadworksApplicationServer", "bwDPUBIGroupID"), ("BW-BroadworksApplicationServer", "bwDPUBIGroupAttempt"), ("BW-BroadworksApplicationServer", "bwDPUBIGroupFailure"), ("BW-BroadworksApplicationServer", "bwDPUBIGroupBargeIn"), ("BW-BroadworksApplicationServer", "bwDPUBIGroupBargeInFailure"), ("BW-BroadworksApplicationServer", "bwDPUBIGroupExempt"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwAsDirectedCallPickupWithBargeInServiceGroup = bwAsDirectedCallPickupWithBargeInServiceGroup.setStatus('current')
if mibBuilder.loadTexts: bwAsDirectedCallPickupWithBargeInServiceGroup.setDescription('This group defines the statistics for the Directed Call Pickup With Barge In Service.')
bwAsAutomaticCallBackServiceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1000, 1, 65)).setObjects(("BW-BroadworksApplicationServer", "bwACBStarted"), ("BW-BroadworksApplicationServer", "bwACBExpired"), ("BW-BroadworksApplicationServer", "bwACBMaxSession"), ("BW-BroadworksApplicationServer", "bwACBSPTable"), ("BW-BroadworksApplicationServer", "bwACBGroupTable"), ("BW-BroadworksApplicationServer", "bwACBSPIndex"), ("BW-BroadworksApplicationServer", "bwACBSPID"), ("BW-BroadworksApplicationServer", "bwACBSPStarted"), ("BW-BroadworksApplicationServer", "bwACBSPExpired"), ("BW-BroadworksApplicationServer", "bwACBSPMaxSession"), ("BW-BroadworksApplicationServer", "bwACBGroupIndex"), ("BW-BroadworksApplicationServer", "bwACBGroupID"), ("BW-BroadworksApplicationServer", "bwACBGroupStarted"), ("BW-BroadworksApplicationServer", "bwACBGroupExpired"), ("BW-BroadworksApplicationServer", "bwACBGroupMaxSession"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwAsAutomaticCallBackServiceGroup = bwAsAutomaticCallBackServiceGroup.setStatus('current')
if mibBuilder.loadTexts: bwAsAutomaticCallBackServiceGroup.setDescription('This group defines the statistics for the Automatic Call Back Service.')
bwAsRingTimeoutServiceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1000, 1, 66)).setObjects(("BW-BroadworksApplicationServer", "bwRingTimeoutNumExpires"), ("BW-BroadworksApplicationServer", "bwRingTimeoutSPTable"), ("BW-BroadworksApplicationServer", "bwRingTimeoutGroupTable"), ("BW-BroadworksApplicationServer", "bwRingTimeoutSPIndex"), ("BW-BroadworksApplicationServer", "bwRingTimeoutSPID"), ("BW-BroadworksApplicationServer", "bwRingTimeoutSPNumExpires"), ("BW-BroadworksApplicationServer", "bwRingTimeoutGroupIndex"), ("BW-BroadworksApplicationServer", "bwRingTimeoutGroupID"), ("BW-BroadworksApplicationServer", "bwRingTimeoutGroupNumExpires"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwAsRingTimeoutServiceGroup = bwAsRingTimeoutServiceGroup.setStatus('current')
if mibBuilder.loadTexts: bwAsRingTimeoutServiceGroup.setDescription('This group defines the statistics for the Ring Timeout Service.')
bwAsSequentialRingServiceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1000, 1, 67)).setObjects(("BW-BroadworksApplicationServer", "bwSequentialRingNumAttempts"), ("BW-BroadworksApplicationServer", "bwSequentialRingNumNoAnswer"), ("BW-BroadworksApplicationServer", "bwSequentialRingSPTable"), ("BW-BroadworksApplicationServer", "bwSequentialRingGroupTable"), ("BW-BroadworksApplicationServer", "bwSequentialRingActivations"), ("BW-BroadworksApplicationServer", "bwSequentialRingAnswered"), ("BW-BroadworksApplicationServer", "bwSequentialRingAbandoned"), ("BW-BroadworksApplicationServer", "bwSequentialRingSPIndex"), ("BW-BroadworksApplicationServer", "bwSequentialRingSPID"), ("BW-BroadworksApplicationServer", "bwSequentialRingSPNumAttempts"), ("BW-BroadworksApplicationServer", "bwSequentialRingSPNumNoAnswer"), ("BW-BroadworksApplicationServer", "bwSequentialRingSPActivations"), ("BW-BroadworksApplicationServer", "bwSequentialRingSPAnswered"), ("BW-BroadworksApplicationServer", "bwSequentialRingSPAbandoned"), ("BW-BroadworksApplicationServer", "bwSequentialRingGroupIndex"), ("BW-BroadworksApplicationServer", "bwSequentialRingGroupID"), ("BW-BroadworksApplicationServer", "bwSequentialRingGroupNumAttempts"), ("BW-BroadworksApplicationServer", "bwSequentialRingGroupNumNoAnswer"), ("BW-BroadworksApplicationServer", "bwSequentialRingGroupActivations"), ("BW-BroadworksApplicationServer", "bwSequentialRingGroupAnswered"), ("BW-BroadworksApplicationServer", "bwSequentialRingGroupAbandoned"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwAsSequentialRingServiceGroup = bwAsSequentialRingServiceGroup.setStatus('current')
if mibBuilder.loadTexts: bwAsSequentialRingServiceGroup.setDescription('This group defines the statistics for the Sequential Ring Service.')
bwAsVideoAddOnServiceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1000, 1, 68)).setObjects(("BW-BroadworksApplicationServer", "bwVAOOutgoingAttempts"), ("BW-BroadworksApplicationServer", "bwVAOOutgoingSuccess"), ("BW-BroadworksApplicationServer", "bwVAOIncomingAttempts"), ("BW-BroadworksApplicationServer", "bwVAOIncomingSuccess"), ("BW-BroadworksApplicationServer", "bwVAOSPTable"), ("BW-BroadworksApplicationServer", "bwVAOGroupTable"), ("BW-BroadworksApplicationServer", "bwVAOSPIndex"), ("BW-BroadworksApplicationServer", "bwVAOSPID"), ("BW-BroadworksApplicationServer", "bwVAOSPOutgoingAttempts"), ("BW-BroadworksApplicationServer", "bwVAOSPOutgoingSuccess"), ("BW-BroadworksApplicationServer", "bwVAOSPIncomingAttempts"), ("BW-BroadworksApplicationServer", "bwVAOSPIncomingSuccess"), ("BW-BroadworksApplicationServer", "bwVAOGroupIndex"), ("BW-BroadworksApplicationServer", "bwVAOGroupID"), ("BW-BroadworksApplicationServer", "bwVAOGroupOutgoingAttempts"), ("BW-BroadworksApplicationServer", "bwVAOGroupOutgoingSuccess"), ("BW-BroadworksApplicationServer", "bwVAOGroupIncomingAttempts"), ("BW-BroadworksApplicationServer", "bwVAOGroupIncomingSuccess"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwAsVideoAddOnServiceGroup = bwAsVideoAddOnServiceGroup.setStatus('current')
if mibBuilder.loadTexts: bwAsVideoAddOnServiceGroup.setDescription('This group defines the statistics for the Video Add-On Service.')
bwAsMaliciousCallTraceServiceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1000, 1, 69)).setObjects(("BW-BroadworksApplicationServer", "bwMaliciousCallTraceApplied"), ("BW-BroadworksApplicationServer", "bwMaliciousCallTraceSPTable"), ("BW-BroadworksApplicationServer", "bwMaliciousCallTraceGroupTable"), ("BW-BroadworksApplicationServer", "bwMaliciousCallTraceSPIndex"), ("BW-BroadworksApplicationServer", "bwMaliciousCallTraceSPID"), ("BW-BroadworksApplicationServer", "bwMaliciousCallTraceSPApplied"), ("BW-BroadworksApplicationServer", "bwMaliciousCallTraceGroupIndex"), ("BW-BroadworksApplicationServer", "bwMaliciousCallTraceGroupID"), ("BW-BroadworksApplicationServer", "bwMaliciousCallTraceGroupApplied"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwAsMaliciousCallTraceServiceGroup = bwAsMaliciousCallTraceServiceGroup.setStatus('current')
if mibBuilder.loadTexts: bwAsMaliciousCallTraceServiceGroup.setDescription('This group defines the statistics for the Malicious Call Trace Service.')
bwAsPushToTalkServiceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1000, 1, 70)).setObjects(("BW-BroadworksApplicationServer", "bwPTTInvoke"), ("BW-BroadworksApplicationServer", "bwPTTReject"), ("BW-BroadworksApplicationServer", "bwPTTSPTable"), ("BW-BroadworksApplicationServer", "bwPTTGroupTable"), ("BW-BroadworksApplicationServer", "bwPTTSPIndex"), ("BW-BroadworksApplicationServer", "bwPTTSPID"), ("BW-BroadworksApplicationServer", "bwPTTSPInvoke"), ("BW-BroadworksApplicationServer", "bwPTTSPReject"), ("BW-BroadworksApplicationServer", "bwPTTGroupIndex"), ("BW-BroadworksApplicationServer", "bwPTTGroupID"), ("BW-BroadworksApplicationServer", "bwPTTGroupInvoke"), ("BW-BroadworksApplicationServer", "bwPTTGroupReject"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwAsPushToTalkServiceGroup = bwAsPushToTalkServiceGroup.setStatus('current')
if mibBuilder.loadTexts: bwAsPushToTalkServiceGroup.setDescription('This group defines the statistics for the Push To Talk Service.')
bwAsHotelingServiceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1000, 1, 71)).setObjects(("BW-BroadworksApplicationServer", "bwHotelingAssociate"), ("BW-BroadworksApplicationServer", "bwHotelingDisassociate"), ("BW-BroadworksApplicationServer", "bwHotelingTimeout"), ("BW-BroadworksApplicationServer", "bwHotelingSPTable"), ("BW-BroadworksApplicationServer", "bwHotelingGroupTable"), ("BW-BroadworksApplicationServer", "bwHotelingSPIndex"), ("BW-BroadworksApplicationServer", "bwHotelingSPID"), ("BW-BroadworksApplicationServer", "bwHotelingSPAssociate"), ("BW-BroadworksApplicationServer", "bwHotelingSPDisassociate"), ("BW-BroadworksApplicationServer", "bwHotelingSPTimeout"), ("BW-BroadworksApplicationServer", "bwHotelingGroupIndex"), ("BW-BroadworksApplicationServer", "bwHotelingGroupID"), ("BW-BroadworksApplicationServer", "bwHotelingGroupAssociate"), ("BW-BroadworksApplicationServer", "bwHotelingGroupDisassociate"), ("BW-BroadworksApplicationServer", "bwHotelingGroupTimeout"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwAsHotelingServiceGroup = bwAsHotelingServiceGroup.setStatus('current')
if mibBuilder.loadTexts: bwAsHotelingServiceGroup.setDescription('This group defines the statistics for the Hoteling Service.')
bwAsPreferredCarrierServiceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1000, 1, 72)).setObjects(("BW-BroadworksApplicationServer", "bwSubscriptionUserPIC"), ("BW-BroadworksApplicationServer", "bwSubscriptionGroupPIC"), ("BW-BroadworksApplicationServer", "bwSubscriptionServiceProviderPIC"), ("BW-BroadworksApplicationServer", "bwSubscriptionDialedUserPIC"), ("BW-BroadworksApplicationServer", "bwSubscriptionDialedGroupPIC"), ("BW-BroadworksApplicationServer", "bwSubscriptionDialedServiceProviderPIC"), ("BW-BroadworksApplicationServer", "bwNonSubscriptionDialedUserPIC"), ("BW-BroadworksApplicationServer", "bwNonSubscriptionDialedGroupPIC"), ("BW-BroadworksApplicationServer", "bwNonSubscriptionDialedServiceProviderPIC"), ("BW-BroadworksApplicationServer", "bwNoIndicationUserPIC"), ("BW-BroadworksApplicationServer", "bwNoIndicationGroupPIC"), ("BW-BroadworksApplicationServer", "bwNoIndicationServiceProviderPIC"), ("BW-BroadworksApplicationServer", "bwPreferredCarrierSPTable"), ("BW-BroadworksApplicationServer", "bwPreferredCarrierGroupTable"), ("BW-BroadworksApplicationServer", "bwPreferredCarrierSPIndex"), ("BW-BroadworksApplicationServer", "bwPreferredCarrierSPID"), ("BW-BroadworksApplicationServer", "bwSPSubscriptionUserPIC"), ("BW-BroadworksApplicationServer", "bwSPSubscriptionGroupPIC"), ("BW-BroadworksApplicationServer", "bwSPSubscriptionServiceProviderPIC"), ("BW-BroadworksApplicationServer", "bwSPSubscriptionDialedUserPIC"), ("BW-BroadworksApplicationServer", "bwSPSubscriptionDialedGroupPIC"), ("BW-BroadworksApplicationServer", "bwSPSubscriptionDialedServiceProviderPIC"), ("BW-BroadworksApplicationServer", "bwSPNonSubscriptionDialedUserPIC"), ("BW-BroadworksApplicationServer", "bwSPNonSubscriptionDialedGroupPIC"), ("BW-BroadworksApplicationServer", "bwSPNonSubscriptionDialedServiceProviderPIC"), ("BW-BroadworksApplicationServer", "bwSPNoIndicationUserPIC"), ("BW-BroadworksApplicationServer", "bwSPNoIndicationGroupPIC"), ("BW-BroadworksApplicationServer", "bwSPNoIndicationServiceProviderPIC"), ("BW-BroadworksApplicationServer", "bwPreferredCarrierGroupIndex"), ("BW-BroadworksApplicationServer", "bwPreferredCarrierGroupID"), ("BW-BroadworksApplicationServer", "bwGroupSubscriptionUserPIC"), ("BW-BroadworksApplicationServer", "bwGroupSubscriptionGroupPIC"), ("BW-BroadworksApplicationServer", "bwGroupSubscriptionServiceProviderPIC"), ("BW-BroadworksApplicationServer", "bwGroupSubscriptionDialedUserPIC"), ("BW-BroadworksApplicationServer", "bwGroupSubscriptionDialedGroupPIC"), ("BW-BroadworksApplicationServer", "bwGroupSubscriptionDialedServiceProviderPIC"), ("BW-BroadworksApplicationServer", "bwGroupNonSubscriptionDialedUserPIC"), ("BW-BroadworksApplicationServer", "bwGroupNonSubscriptionDialedGroupPIC"), ("BW-BroadworksApplicationServer", "bwGroupNonSubscriptionDialedServiceProviderPIC"), ("BW-BroadworksApplicationServer", "bwGroupNoIndicationUserPIC"), ("BW-BroadworksApplicationServer", "bwGroupNoIndicationGroupPIC"), ("BW-BroadworksApplicationServer", "bwGroupNoIndicationServiceProviderPIC"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwAsPreferredCarrierServiceGroup = bwAsPreferredCarrierServiceGroup.setStatus('current')
if mibBuilder.loadTexts: bwAsPreferredCarrierServiceGroup.setDescription('This group defines the statistics for the Preferred Carrier Service.')
bwAsFamilySimRingServiceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1000, 1, 73)).setObjects(("BW-BroadworksApplicationServer", "bwFamilySimRingNumAttempts"), ("BW-BroadworksApplicationServer", "bwFamilySimRingNumBusy"), ("BW-BroadworksApplicationServer", "bwFamilySimRingSPTable"), ("BW-BroadworksApplicationServer", "bwFamilySimRingGroupTable"), ("BW-BroadworksApplicationServer", "bwFamilySimRingSPIndex"), ("BW-BroadworksApplicationServer", "bwFamilySimRingSPID"), ("BW-BroadworksApplicationServer", "bwFamilySimRingSPNumAttempts"), ("BW-BroadworksApplicationServer", "bwFamilySimRingSPNumBusy"), ("BW-BroadworksApplicationServer", "bwFamilySimRingGroupIndex"), ("BW-BroadworksApplicationServer", "bwFamilySimRingGroupID"), ("BW-BroadworksApplicationServer", "bwFamilySimRingGroupNumAttempts"), ("BW-BroadworksApplicationServer", "bwFamilySimRingGroupNumBusy"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwAsFamilySimRingServiceGroup = bwAsFamilySimRingServiceGroup.setStatus('current')
if mibBuilder.loadTexts: bwAsFamilySimRingServiceGroup.setDescription('This group defines the statistics for the Family SimRing Service.')
bwAsDiversionInhibitorServiceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1000, 1, 74)).setObjects(("BW-BroadworksApplicationServer", "bwDiversionInhibited"), ("BW-BroadworksApplicationServer", "bwDiversionInhibitorSPTable"), ("BW-BroadworksApplicationServer", "bwDiversionInhibitorGroupTable"), ("BW-BroadworksApplicationServer", "bwDiversionInhibitorSPIndex"), ("BW-BroadworksApplicationServer", "bwDiversionInhibitorSPID"), ("BW-BroadworksApplicationServer", "bwSPDiversionInhibited"), ("BW-BroadworksApplicationServer", "bwDiversionInhibitorGroupIndex"), ("BW-BroadworksApplicationServer", "bwDiversionInhibitorGroupID"), ("BW-BroadworksApplicationServer", "bwGroupDiversionInhibited"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwAsDiversionInhibitorServiceGroup = bwAsDiversionInhibitorServiceGroup.setStatus('current')
if mibBuilder.loadTexts: bwAsDiversionInhibitorServiceGroup.setDescription('This group defines the statistics for the Diversion Inhibitor Service.')
bwAsInstantGroupCallServiceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1000, 1, 75)).setObjects(("BW-BroadworksApplicationServer", "bwIGCPushToTalkInvoke"), ("BW-BroadworksApplicationServer", "bwIGCNormalInvoke"), ("BW-BroadworksApplicationServer", "bwIGCSPTable"), ("BW-BroadworksApplicationServer", "bwIGCGroupTable"), ("BW-BroadworksApplicationServer", "bwIGCSPIndex"), ("BW-BroadworksApplicationServer", "bwIGCSPID"), ("BW-BroadworksApplicationServer", "bwIGCSPPushToTalkInvoke"), ("BW-BroadworksApplicationServer", "bwIGCSPNormalInvoke"), ("BW-BroadworksApplicationServer", "bwIGCGroupIndex"), ("BW-BroadworksApplicationServer", "bwIGCGroupID"), ("BW-BroadworksApplicationServer", "bwIGCGroupPushToTalkInvoke"), ("BW-BroadworksApplicationServer", "bwIGCGroupNormalInvoke"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwAsInstantGroupCallServiceGroup = bwAsInstantGroupCallServiceGroup.setStatus('current')
if mibBuilder.loadTexts: bwAsInstantGroupCallServiceGroup.setDescription('This group defines the statistics for the Instant Group Call Service.')
bwAsAutomaticHoldAndRetrieveServiceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1000, 1, 76)).setObjects(("BW-BroadworksApplicationServer", "bwAHRHold"), ("BW-BroadworksApplicationServer", "bwAHRRetrieve"), ("BW-BroadworksApplicationServer", "bwAHRSPTable"), ("BW-BroadworksApplicationServer", "bwAHRGroupTable"), ("BW-BroadworksApplicationServer", "bwAHRSPIndex"), ("BW-BroadworksApplicationServer", "bwAHRSPID"), ("BW-BroadworksApplicationServer", "bwAHRSPHold"), ("BW-BroadworksApplicationServer", "bwAHRSPRetrieve"), ("BW-BroadworksApplicationServer", "bwAHRGroupIndex"), ("BW-BroadworksApplicationServer", "bwAHRGroupID"), ("BW-BroadworksApplicationServer", "bwAHRGroupHold"), ("BW-BroadworksApplicationServer", "bwAHRGroupRetrieve"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwAsAutomaticHoldAndRetrieveServiceGroup = bwAsAutomaticHoldAndRetrieveServiceGroup.setStatus('current')
if mibBuilder.loadTexts: bwAsAutomaticHoldAndRetrieveServiceGroup.setDescription('This group defines the statistics for the Automatic Hold And Retrieve Service.')
bwAsBusinessTrunkGroupServiceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1000, 1, 77)).setObjects(("BW-BroadworksApplicationServer", "bwTrunkOriginationAttempt"), ("BW-BroadworksApplicationServer", "bwTrunkOriginationBlocked"), ("BW-BroadworksApplicationServer", "bwTrunkTerminationAttempt"), ("BW-BroadworksApplicationServer", "bwTrunkTerminationBlocked"), ("BW-BroadworksApplicationServer", "bwTrunkSPTable"), ("BW-BroadworksApplicationServer", "bwTrunkGroupTable"), ("BW-BroadworksApplicationServer", "bwTrunkSPIndex"), ("BW-BroadworksApplicationServer", "bwTrunkSPID"), ("BW-BroadworksApplicationServer", "bwTrunkSPOriginationAttempt"), ("BW-BroadworksApplicationServer", "bwTrunkSPOriginationBlocked"), ("BW-BroadworksApplicationServer", "bwTrunkSPTerminationAttempt"), ("BW-BroadworksApplicationServer", "bwTrunkSPTerminationBlocked"), ("BW-BroadworksApplicationServer", "bwTrunkGroupIndex"), ("BW-BroadworksApplicationServer", "bwTrunkGroupID"), ("BW-BroadworksApplicationServer", "bwTrunkGroupOriginationAttempt"), ("BW-BroadworksApplicationServer", "bwTrunkGroupOriginationBlocked"), ("BW-BroadworksApplicationServer", "bwTrunkGroupTerminationAttempt"), ("BW-BroadworksApplicationServer", "bwTrunkGroupTerminationBlocked"), ("BW-BroadworksApplicationServer", "bwTrunkGroupPerTGTable"), ("BW-BroadworksApplicationServer", "bwTrunkGroupPerTGIndex"), ("BW-BroadworksApplicationServer", "bwTrunkGroupPerTGName"), ("BW-BroadworksApplicationServer", "bwTrunkGroupPerTGCapacityExceeded"), ("BW-BroadworksApplicationServer", "bwTrunkGroupPerTGUnreachableDestination"), ("BW-BroadworksApplicationServer", "bwTrunkGroupPerTGMaxActiveCalls"), ("BW-BroadworksApplicationServer", "bwTrunkGroupPerTGMaxOutgoingActiveCalls"), ("BW-BroadworksApplicationServer", "bwTrunkGroupPerTGMaxIncomingActiveCalls"), ("BW-BroadworksApplicationServer", "bwTrunkGroupPerTGCapacityExceededInitialValue"), ("BW-BroadworksApplicationServer", "bwTrunkGroupPerTGCapacityExceededOffsetValue"), ("BW-BroadworksApplicationServer", "bwTrunkGroupPerTGUnreachableDestinationExceededInitialValue"), ("BW-BroadworksApplicationServer", "bwTrunkGroupPerTGUnreachableDestinationExceededOffsetValue"), ("BW-BroadworksApplicationServer", "bwTrunkGroupPerTGGroupID"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwAsBusinessTrunkGroupServiceGroup = bwAsBusinessTrunkGroupServiceGroup.setStatus('current')
if mibBuilder.loadTexts: bwAsBusinessTrunkGroupServiceGroup.setDescription('This group defines the statistics for the Business Trunk Group Service.')
bwAsCustomRingbackServiceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1000, 1, 78)).setObjects(("BW-BroadworksApplicationServer", "bwCustomRingbackUserAudioAttempts"), ("BW-BroadworksApplicationServer", "bwCustomRingbackUserVideoAttempts"), ("BW-BroadworksApplicationServer", "bwCustomRingbackUserAudioFailures"), ("BW-BroadworksApplicationServer", "bwCustomRingbackUserVideoFailures"), ("BW-BroadworksApplicationServer", "bwCustomRingbackGroupAudioAttempts"), ("BW-BroadworksApplicationServer", "bwCustomRingbackGroupVideoAttempts"), ("BW-BroadworksApplicationServer", "bwCustomRingbackGroupAudioFailures"), ("BW-BroadworksApplicationServer", "bwCustomRingbackGroupVideoFailures"), ("BW-BroadworksApplicationServer", "bwCustomRingbackSPTable"), ("BW-BroadworksApplicationServer", "bwCustomRingbackGroupTable"), ("BW-BroadworksApplicationServer", "bwCustomRingbackSPIndex"), ("BW-BroadworksApplicationServer", "bwCustomRingbackSPID"), ("BW-BroadworksApplicationServer", "bwCustomRingbackUserAudioSPAttempts"), ("BW-BroadworksApplicationServer", "bwCustomRingbackUserVideoSPAttempts"), ("BW-BroadworksApplicationServer", "bwCustomRingbackUserAudioSPFailures"), ("BW-BroadworksApplicationServer", "bwCustomRingbackUserVideoSPFailures"), ("BW-BroadworksApplicationServer", "bwCustomRingbackGroupAudioSPAttempts"), ("BW-BroadworksApplicationServer", "bwCustomRingbackGroupVideoSPAttempts"), ("BW-BroadworksApplicationServer", "bwCustomRingbackGroupAudioSPFailures"), ("BW-BroadworksApplicationServer", "bwCustomRingbackGroupVideoSPFailures"), ("BW-BroadworksApplicationServer", "bwCustomRingbackGroupIndex"), ("BW-BroadworksApplicationServer", "bwCustomRingbackGroupID"), ("BW-BroadworksApplicationServer", "bwCustomRingbackUserAudioGroupAttempts"), ("BW-BroadworksApplicationServer", "bwCustomRingbackUserVideoGroupAttempts"), ("BW-BroadworksApplicationServer", "bwCustomRingbackUserAudioGroupFailures"), ("BW-BroadworksApplicationServer", "bwCustomRingbackUserVideoGroupFailures"), ("BW-BroadworksApplicationServer", "bwCustomRingbackGroupAudioGroupAttempts"), ("BW-BroadworksApplicationServer", "bwCustomRingbackGroupVideoGroupAttempts"), ("BW-BroadworksApplicationServer", "bwCustomRingbackGroupAudioGroupFailures"), ("BW-BroadworksApplicationServer", "bwCustomRingbackGroupVideoGroupFailures"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwAsCustomRingbackServiceGroup = bwAsCustomRingbackServiceGroup.setStatus('current')
if mibBuilder.loadTexts: bwAsCustomRingbackServiceGroup.setDescription('This group defines the statistics for the Custom Ringback Service.')
bwAsMssGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1000, 1, 79)).setObjects(("BW-BroadworksApplicationServer", "bwNSqueryRequestsTransmitted"), ("BW-BroadworksApplicationServer", "bwNSqueryRequestsRetransmitted"), ("BW-BroadworksApplicationServer", "bwNSqueryCommFailures"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwAsMssGroup = bwAsMssGroup.setStatus('current')
if mibBuilder.loadTexts: bwAsMssGroup.setDescription('This group defines the statistics for the Media Server Selection.')
bwAsNrsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1000, 1, 80)).setObjects(("BW-BroadworksApplicationServer", "bwNbInvalidMessagesReceived"), ("BW-BroadworksApplicationServer", "bwNbRequestsReceived"), ("BW-BroadworksApplicationServer", "bwNbResponsesReceived"), ("BW-BroadworksApplicationServer", "bwNbErrorsReceived"), ("BW-BroadworksApplicationServer", "bwNbRequestsSent"), ("BW-BroadworksApplicationServer", "bwNbResponsesSent"), ("BW-BroadworksApplicationServer", "bwNbErrorsSent"), ("BW-BroadworksApplicationServer", "bwNbRequestsResent"), ("BW-BroadworksApplicationServer", "bwNbResponsesResent"), ("BW-BroadworksApplicationServer", "bwNbRequestsUnanswered"), ("BW-BroadworksApplicationServer", "bwNRSStatsTable"), ("BW-BroadworksApplicationServer", "bwNRSStatsTableIndex"), ("BW-BroadworksApplicationServer", "bwNRSStatsTableProtocolName"), ("BW-BroadworksApplicationServer", "bwNRSStatsTableNbRequestsReceived"), ("BW-BroadworksApplicationServer", "bwNRSStatsTableNbResponsesReceived"), ("BW-BroadworksApplicationServer", "bwNRSStatsTableNbErrorsReceived"), ("BW-BroadworksApplicationServer", "bwNRSStatsTableNbRequestsSent"), ("BW-BroadworksApplicationServer", "bwNRSStatsTableNbResponsesSent"), ("BW-BroadworksApplicationServer", "bwNRSStatsTableNbErrorsSent"), ("BW-BroadworksApplicationServer", "bwNRSStatsTableNbRequestsResent"), ("BW-BroadworksApplicationServer", "bwNRSStatsTableNbResponsesResent"), ("BW-BroadworksApplicationServer", "bwNRSStatsTableNbRequestsUnanswered"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwAsNrsGroup = bwAsNrsGroup.setStatus('current')
if mibBuilder.loadTexts: bwAsNrsGroup.setDescription('This group defines the statistics for the NRS based protocols.')
bwAsXsPersistencyGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1000, 1, 81)).setObjects(("BW-BroadworksApplicationServer", "perNbOpenedTransactions"), ("BW-BroadworksApplicationServer", "perNbCommittedTransactions"), ("BW-BroadworksApplicationServer", "perNbFailedTransactions"), ("BW-BroadworksApplicationServer", "perNbCriticalErrors"), ("BW-BroadworksApplicationServer", "ttNbConnectionsCreated"), ("BW-BroadworksApplicationServer", "ttConnectionPoolSize"), ("BW-BroadworksApplicationServer", "ttNbBackdoorUpdates"), ("BW-BroadworksApplicationServer", "ttNbFailedCheckpoints"), ("BW-BroadworksApplicationServer", "xsRemoteXlaNbTimesConnected"), ("BW-BroadworksApplicationServer", "xsRemoteXlaNbTimesDisconnected"), ("BW-BroadworksApplicationServer", "xsRemoteXlaUpdatesProcessed"), ("BW-BroadworksApplicationServer", "xsRemoteXlaUpdatesPending"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwAsXsPersistencyGroup = bwAsXsPersistencyGroup.setStatus('current')
if mibBuilder.loadTexts: bwAsXsPersistencyGroup.setDescription('This group defines the statistics for the Application Server Execution Server process persistency.')
bwAsProtocolMonitorGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1000, 1, 82)).setObjects(("BW-BroadworksApplicationServer", "bwPMTNumMonitorsCreated"), ("BW-BroadworksApplicationServer", "bwPMTNumMonitorsOpen"), ("BW-BroadworksApplicationServer", "bwPMTNumLoggerCreated"), ("BW-BroadworksApplicationServer", "bwPMTNumLoggerOpen"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwAsProtocolMonitorGroup = bwAsProtocolMonitorGroup.setStatus('current')
if mibBuilder.loadTexts: bwAsProtocolMonitorGroup.setDescription('This group defines the statistics for the Protocol Monitor.')
bwAsSystemStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1000, 1, 83)).setObjects(("BW-BroadworksApplicationServer", "bwSystemName"), ("BW-BroadworksApplicationServer", "bwNumberOfUsers"), ("BW-BroadworksApplicationServer", "bwNumberOfGroups"), ("BW-BroadworksApplicationServer", "bwNumberOfServProv"), ("BW-BroadworksApplicationServer", "bwNumberOfDNDefined"), ("BW-BroadworksApplicationServer", "bwNumberOfDNAssigned"), ("BW-BroadworksApplicationServer", "bwNumberOfDeviceType"), ("BW-BroadworksApplicationServer", "bwNumberOfServiceType"), ("BW-BroadworksApplicationServer", "bwDeviceTypeSystemTable"), ("BW-BroadworksApplicationServer", "bwServiceTypeSystemTable"), ("BW-BroadworksApplicationServer", "bwSystemSPTable"), ("BW-BroadworksApplicationServer", "bwSystemGroupTable"), ("BW-BroadworksApplicationServer", "bwDeviceTypeSystemIndex"), ("BW-BroadworksApplicationServer", "bwDeviceTypeSystemID"), ("BW-BroadworksApplicationServer", "bwNumberOfDeviceTypeSystem"), ("BW-BroadworksApplicationServer", "bwServiceTypeSystemIndex"), ("BW-BroadworksApplicationServer", "bwServiceTypeSystemID"), ("BW-BroadworksApplicationServer", "bwNumberOfServiceTypeAssignedSystem"), ("BW-BroadworksApplicationServer", "bwSystemSPIndex"), ("BW-BroadworksApplicationServer", "bwSystemSPID"), ("BW-BroadworksApplicationServer", "bwSystemSPName"), ("BW-BroadworksApplicationServer", "bwNumberOfSPUsers"), ("BW-BroadworksApplicationServer", "bwNumberOfSPGroups"), ("BW-BroadworksApplicationServer", "bwNumberOfSPDNDefined"), ("BW-BroadworksApplicationServer", "bwNumberOfSPDNAssigned"), ("BW-BroadworksApplicationServer", "bwNumberOfSPDeviceType"), ("BW-BroadworksApplicationServer", "bwSystemGroupIndex"), ("BW-BroadworksApplicationServer", "bwSystemGroupSPID"), ("BW-BroadworksApplicationServer", "bwSystemGroupID"), ("BW-BroadworksApplicationServer", "bwSystemGroupName"), ("BW-BroadworksApplicationServer", "bwNumberOfGroupUsers"), ("BW-BroadworksApplicationServer", "bwNumberOfGroupDNDefined"), ("BW-BroadworksApplicationServer", "bwNumberOfGroupDNAssigned"), ("BW-BroadworksApplicationServer", "bwNumberOfGroupDeviceType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwAsSystemStatsGroup = bwAsSystemStatsGroup.setStatus('current')
if mibBuilder.loadTexts: bwAsSystemStatsGroup.setDescription('This group defines the system level statistics for the Application Server.')
bwAsQueueStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1000, 1, 84)).setObjects(("BW-BroadworksApplicationServer", "bySystemInternalQueueResets"), ("BW-BroadworksApplicationServer", "bwSystemInternalQueueTable"), ("BW-BroadworksApplicationServer", "bwSystemInternalQueueIndex"), ("BW-BroadworksApplicationServer", "bwSystemInternalQueueName"), ("BW-BroadworksApplicationServer", "bwSystemInternalQueueSize"), ("BW-BroadworksApplicationServer", "bwSystemInternalQueueTimeAvg"), ("BW-BroadworksApplicationServer", "bwSystemInternalQueueTimeMin"), ("BW-BroadworksApplicationServer", "bwSystemInternalQueueTimeMax"), ("BW-BroadworksApplicationServer", "bwSystemInternalQueueTimeMaxTimestampMSB"), ("BW-BroadworksApplicationServer", "bwSystemInternalQueueLengthCurrent"), ("BW-BroadworksApplicationServer", "bwSystemInternalQueueLengthAvg"), ("BW-BroadworksApplicationServer", "bwSystemInternalQueueLengthMax"), ("BW-BroadworksApplicationServer", "bwSystemInternalQueueLengthMaxTimestampMSB"), ("BW-BroadworksApplicationServer", "bwSystemInternalQueueLengthMaxTimestampLSB"), ("BW-BroadworksApplicationServer", "bwSystemInternalQueueTimeMaxTimestampLSB"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwAsQueueStatsGroup = bwAsQueueStatsGroup.setStatus('current')
if mibBuilder.loadTexts: bwAsQueueStatsGroup.setDescription('This group defines the statistics for the Application Server processing internal queues.')
bwAsOverloadControlStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1000, 1, 85)).setObjects(("BW-BroadworksApplicationServer", "bwCurrentOverloadZone"), ("BW-BroadworksApplicationServer", "bwNumYellowZoneOverloadTrans"), ("BW-BroadworksApplicationServer", "bwNumRedZoneOverloadTrans"), ("BW-BroadworksApplicationServer", "bwCurrentCallOverloadZone"), ("BW-BroadworksApplicationServer", "bwNumCallYellowZoneOverloadTrans"), ("BW-BroadworksApplicationServer", "bwNumCallRedZoneOverloadTrans"), ("BW-BroadworksApplicationServer", "bwCurrentNonCallOverloadZone"), ("BW-BroadworksApplicationServer", "bwNumNonCallYellowZoneOverloadTrans"), ("BW-BroadworksApplicationServer", "bwNumNonCallRedZoneOverloadTrans"), ("BW-BroadworksApplicationServer", "bwNumDiscardedMessage"), ("BW-BroadworksApplicationServer", "bwTimeLastDiscardedMessage"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwAsOverloadControlStatsGroup = bwAsOverloadControlStatsGroup.setStatus('current')
if mibBuilder.loadTexts: bwAsOverloadControlStatsGroup.setDescription('This group defines the statistics for the Overload Control feature on the Application Server.')
bwAsRedundancyStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1000, 1, 86)).setObjects(("BW-BroadworksApplicationServer", "nbOfMigratedUsers"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwAsRedundancyStatsGroup = bwAsRedundancyStatsGroup.setStatus('current')
if mibBuilder.loadTexts: bwAsRedundancyStatsGroup.setDescription('This group defines the statistics for the Application Server Redundancy feature.')
bwAsPsPersistencyGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1000, 1, 87)).setObjects(("BW-BroadworksApplicationServer", "psPerNbOpenedTransactions"), ("BW-BroadworksApplicationServer", "psPerNbCommittedTransactions"), ("BW-BroadworksApplicationServer", "psPerNbFailedTransactions"), ("BW-BroadworksApplicationServer", "psPerNbCriticalErrors"), ("BW-BroadworksApplicationServer", "psTtNbConnectionsCreated"), ("BW-BroadworksApplicationServer", "psTtConnectionPoolSize"), ("BW-BroadworksApplicationServer", "psTtNbBackdoorUpdates"), ("BW-BroadworksApplicationServer", "psTtNbFailedCheckpoints"), ("BW-BroadworksApplicationServer", "psRemoteXlaNbTimesConnected"), ("BW-BroadworksApplicationServer", "psRemoteXlaNbTimesDisconnected"), ("BW-BroadworksApplicationServer", "psRemoteXlaUpdatesProcessed"), ("BW-BroadworksApplicationServer", "psRemoteXlaUpdatesPending"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwAsPsPersistencyGroup = bwAsPsPersistencyGroup.setStatus('current')
if mibBuilder.loadTexts: bwAsPsPersistencyGroup.setDescription('This group defines the statistics for the Application Server Provisioning Server process persistency.')
bwAsPsExtCallLogsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1000, 1, 88)).setObjects(("BW-BroadworksApplicationServer", "bwExternalCallLogsRetrievalAttempts"), ("BW-BroadworksApplicationServer", "bwExternalCallLogsRetrievalFailures"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwAsPsExtCallLogsGroup = bwAsPsExtCallLogsGroup.setStatus('current')
if mibBuilder.loadTexts: bwAsPsExtCallLogsGroup.setDescription('This group defines the statistics for the External Call Logs service on the Provisioning Server process.')
bwAsPsOciGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1000, 1, 89)).setObjects(("BW-BroadworksApplicationServer", "psOciStatsNbUpdateRequests"), ("BW-BroadworksApplicationServer", "psOciStatsNbUpdateRequestFailures"), ("BW-BroadworksApplicationServer", "psOciStatsNbQueryRequests"), ("BW-BroadworksApplicationServer", "psOciStatsNbQueryRequestFailures"), ("BW-BroadworksApplicationServer", "psOciStatsNbAuthorizationRequests"), ("BW-BroadworksApplicationServer", "psOciStatsNbAuthorizationRequestFailures"), ("BW-BroadworksApplicationServer", "psOciStatsNbReportingAclViolations"), ("BW-BroadworksApplicationServer", "psOciStatsNbReportNotificationsOut"), ("BW-BroadworksApplicationServer", "psOciStatsActiveSessions"), ("BW-BroadworksApplicationServer", "psOciStatsSystemRequestsPerHour"), ("BW-BroadworksApplicationServer", "psOciStatsSystemRequestResponseTime"), ("BW-BroadworksApplicationServer", "psOciStatsMinSystemRequestResponseTime"), ("BW-BroadworksApplicationServer", "psOciStatsMaxSystemRequestResponseTime"), ("BW-BroadworksApplicationServer", "psOciStatsMaxSystemRequestName"), ("BW-BroadworksApplicationServer", "psOciStatsServiceProviderRequestsPerHour"), ("BW-BroadworksApplicationServer", "psOciStatsServiceProviderRequestResponseTime"), ("BW-BroadworksApplicationServer", "psOciStatsMinServiceProviderRequestResponseTime"), ("BW-BroadworksApplicationServer", "psOciStatsMaxServiceProviderRequestResponseTime"), ("BW-BroadworksApplicationServer", "psOciStatsMaxServiceProviderRequestName"), ("BW-BroadworksApplicationServer", "psOciStatsGroupRequestsPerHour"), ("BW-BroadworksApplicationServer", "psOciStatsGroupRequestResponseTime"), ("BW-BroadworksApplicationServer", "psOciStatsMinGroupRequestResponseTime"), ("BW-BroadworksApplicationServer", "psOciStatsMaxGroupRequestResponseTime"), ("BW-BroadworksApplicationServer", "psOciStatsMaxGroupRequestName"), ("BW-BroadworksApplicationServer", "psOciStatsUserRequestsPerHour"), ("BW-BroadworksApplicationServer", "psOciStatsUserRequestResponseTime"), ("BW-BroadworksApplicationServer", "psOciStatsMinUserRequestResponseTime"), ("BW-BroadworksApplicationServer", "psOciStatsMaxUserRequestResponseTime"), ("BW-BroadworksApplicationServer", "psOciStatsMaxUserRequestName"), ("BW-BroadworksApplicationServer", "psOciStatsRequestsPerHour"), ("BW-BroadworksApplicationServer", "psOciStatsRequestResponseTime"), ("BW-BroadworksApplicationServer", "psOciStatsMinRequestResponseTime"), ("BW-BroadworksApplicationServer", "psOciStatsMaxRequestResponseTime"), ("BW-BroadworksApplicationServer", "psOciStatsMaxRequestName"), ("BW-BroadworksApplicationServer", "psOCIReportingBackLogMessageTable"), ("BW-BroadworksApplicationServer", "psOCIReportingBackLogMessageIndex"), ("BW-BroadworksApplicationServer", "psOCIReportingBackLogMessageHost"), ("BW-BroadworksApplicationServer", "psOCIReportingBackLogMessageSaved"), ("BW-BroadworksApplicationServer", "psOCIReportingBackLogMessageSent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwAsPsOciGroup = bwAsPsOciGroup.setStatus('current')
if mibBuilder.loadTexts: bwAsPsOciGroup.setDescription('This group defines the statistics for the OCI protocol running on Provisioning Server process.')
bwAsPsQueueStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1000, 1, 90)).setObjects(("BW-BroadworksApplicationServer", "psSystemInternalQueueResets"), ("BW-BroadworksApplicationServer", "psSystemInternalQueueTable"), ("BW-BroadworksApplicationServer", "psSystemInternalQueueIndex"), ("BW-BroadworksApplicationServer", "psSystemInternalQueueName"), ("BW-BroadworksApplicationServer", "psSystemInternalQueueSize"), ("BW-BroadworksApplicationServer", "psSystemInternalQueueTimeAvg"), ("BW-BroadworksApplicationServer", "psSystemInternalQueueTimeMin"), ("BW-BroadworksApplicationServer", "psSystemInternalQueueTimeMax"), ("BW-BroadworksApplicationServer", "psSystemInternalQueueTimeMaxTimestampMSB"), ("BW-BroadworksApplicationServer", "psSystemInternalQueueLengthCurrent"), ("BW-BroadworksApplicationServer", "psSystemInternalQueueLengthAvg"), ("BW-BroadworksApplicationServer", "psSystemInternalQueueLengthMax"), ("BW-BroadworksApplicationServer", "psSystemInternalQueueLengthMaxTimestampMSB"), ("BW-BroadworksApplicationServer", "psSystemInternalQueueLengthMaxTimestampLSB"), ("BW-BroadworksApplicationServer", "psSystemInternalQueueTimeMaxTimestampLSB"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwAsPsQueueStatsGroup = bwAsPsQueueStatsGroup.setStatus('current')
if mibBuilder.loadTexts: bwAsPsQueueStatsGroup.setDescription('This group defines the statistics for the Application Server processing internal queues for the Provisioning Server process.')
bwAsPsLdapGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1000, 1, 91)).setObjects(("BW-BroadworksApplicationServer", "bwLDAPIntegrationNumQueryAttempts"), ("BW-BroadworksApplicationServer", "bwLDAPIntegrationNumConnectionFailures"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwAsPsLdapGroup = bwAsPsLdapGroup.setStatus('current')
if mibBuilder.loadTexts: bwAsPsLdapGroup.setDescription('This group defines the statistics for the LDAP protocol.')
bwAsPsBcctGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1000, 1, 92)).setObjects(("BW-BroadworksApplicationServer", "bwCommonCommPSStatsTable"), ("BW-BroadworksApplicationServer", "bwCommonCommPSStatsIndex"), ("BW-BroadworksApplicationServer", "bwCommonCommPSHost"), ("BW-BroadworksApplicationServer", "bwCommonCommPSInterface"), ("BW-BroadworksApplicationServer", "bwCommonCommPSProtocol"), ("BW-BroadworksApplicationServer", "bwCommonCommPSAcceptedOutboundConnections"), ("BW-BroadworksApplicationServer", "bwCommonCommPSAcceptedInboundConnections"), ("BW-BroadworksApplicationServer", "bwCommonCommPSRejectedOutboundConnections"), ("BW-BroadworksApplicationServer", "bwCommonCommPSRejectedInboundConnections"), ("BW-BroadworksApplicationServer", "bwCommonCommPSOutputMessagesProcessed"), ("BW-BroadworksApplicationServer", "bwCommonCommPSInputMessagesProcessed"), ("BW-BroadworksApplicationServer", "bwCommonCommPSOutputCommunicationErrors"), ("BW-BroadworksApplicationServer", "bwCommonCommPSInputCommunicationErrors"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwAsPsBcctGroup = bwAsPsBcctGroup.setStatus('current')
if mibBuilder.loadTexts: bwAsPsBcctGroup.setDescription('This group defines the statistics for the BCCT protocol from the Provisioning Server process.')
bwAsMoCountersGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1000, 1, 93)).setObjects(("BW-BroadworksApplicationServer", "resetAllCounters"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwAsMoCountersGroup = bwAsMoCountersGroup.setStatus('current')
if mibBuilder.loadTexts: bwAsMoCountersGroup.setDescription('This group defines statistics to perform managed object work for the Application Server.')
bwAsReservedGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1000, 1, 94)).setObjects(("BW-BroadworksApplicationServer", "psReservedCounter"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwAsReservedGroup = bwAsReservedGroup.setStatus('current')
if mibBuilder.loadTexts: bwAsReservedGroup.setDescription('MIB reserved section.')
bwAsPhysicalLocationServiceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1000, 1, 95)).setObjects(("BW-BroadworksApplicationServer", "bwPhysicalLocationOriginationBlocked"), ("BW-BroadworksApplicationServer", "bwPhysicalLocationSPTable"), ("BW-BroadworksApplicationServer", "bwPhysicalLocationGroupTable"), ("BW-BroadworksApplicationServer", "bwPhysicalLocationSPIndex"), ("BW-BroadworksApplicationServer", "bwPhysicalLocationSPID"), ("BW-BroadworksApplicationServer", "bwPhysicalLocationSPOriginationBlocked"), ("BW-BroadworksApplicationServer", "bwPhysicalLocationGroupIndex"), ("BW-BroadworksApplicationServer", "bwPhysicalLocationGroupID"), ("BW-BroadworksApplicationServer", "bwPhysicalLocationGroupOriginationBlocked"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwAsPhysicalLocationServiceGroup = bwAsPhysicalLocationServiceGroup.setStatus('current')
if mibBuilder.loadTexts: bwAsPhysicalLocationServiceGroup.setDescription('This group defines the statistics for the Automatic Hold And Retrieve Service.')
bwAsFaxMessagingServiceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1000, 1, 96)).setObjects(("BW-BroadworksApplicationServer", "bwFaxMessagingReceived"), ("BW-BroadworksApplicationServer", "bwFaxMessagingReceptionFailure"), ("BW-BroadworksApplicationServer", "bwFaxMessagingPrinted"), ("BW-BroadworksApplicationServer", "bwFaxMessagingPrintingFailure"), ("BW-BroadworksApplicationServer", "bwFaxMessagingSPTable"), ("BW-BroadworksApplicationServer", "bwFaxMessagingGroupTable"), ("BW-BroadworksApplicationServer", "bwFaxMessagingSPIndex"), ("BW-BroadworksApplicationServer", "bwFaxMessagingSPID"), ("BW-BroadworksApplicationServer", "bwFaxMessagingSPReceived"), ("BW-BroadworksApplicationServer", "bwFaxMessagingSPReceptionFailure"), ("BW-BroadworksApplicationServer", "bwFaxMessagingSPPrinted"), ("BW-BroadworksApplicationServer", "bwFaxMessagingSPPrintingFailure"), ("BW-BroadworksApplicationServer", "bwFaxMessagingGroupIndex"), ("BW-BroadworksApplicationServer", "bwFaxMessagingGroupID"), ("BW-BroadworksApplicationServer", "bwFaxMessagingGroupReceived"), ("BW-BroadworksApplicationServer", "bwFaxMessagingGroupReceptionFailure"), ("BW-BroadworksApplicationServer", "bwFaxMessagingGroupPrinted"), ("BW-BroadworksApplicationServer", "bwFaxMessagingGroupPrintingFailure"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwAsFaxMessagingServiceGroup = bwAsFaxMessagingServiceGroup.setStatus('current')
if mibBuilder.loadTexts: bwAsFaxMessagingServiceGroup.setDescription('This group defines the statistics for the Automatic Hold And Retrieve Service.')
bwPSTcpStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1000, 1, 97)).setObjects(("BW-BroadworksApplicationServer", "bwPSTcpServersStatsTable"), ("BW-BroadworksApplicationServer", "bwPSTcpServersStatsIndex"), ("BW-BroadworksApplicationServer", "bwPSTcpServersName"), ("BW-BroadworksApplicationServer", "bwPSTcpServersNbConnectionsAccepted"), ("BW-BroadworksApplicationServer", "bwPSTcpServersNbConnectionsClosed"), ("BW-BroadworksApplicationServer", "bwPSTcpServersOutgoingQueueSize"), ("BW-BroadworksApplicationServer", "bwPSTcpServersIncomingQueueSize"), ("BW-BroadworksApplicationServer", "bwPSTcpServersNbBytesSentSecure"), ("BW-BroadworksApplicationServer", "bwPSTcpServersNbBytesReceivedSecure"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwPSTcpStatsGroup = bwPSTcpStatsGroup.setStatus('current')
if mibBuilder.loadTexts: bwPSTcpStatsGroup.setDescription('This group defines the statistics for the Automatic Hold And Retrieve Service.')
bwXSTcpStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1000, 1, 98)).setObjects(("BW-BroadworksApplicationServer", "bwXSTcpServersStatsTable"), ("BW-BroadworksApplicationServer", "bwXSTcpServersStatsIndex"), ("BW-BroadworksApplicationServer", "bwXSTcpServersName"), ("BW-BroadworksApplicationServer", "bwXSTcpServersNbConnectionsAccepted"), ("BW-BroadworksApplicationServer", "bwXSTcpServersNbConnectionsClosed"), ("BW-BroadworksApplicationServer", "bwXSTcpServersOutgoingQueueSize"), ("BW-BroadworksApplicationServer", "bwXSTcpServersIncomingQueueSize"), ("BW-BroadworksApplicationServer", "bwXSTcpServersNbBytesSentSecure"), ("BW-BroadworksApplicationServer", "bwXSTcpServersNbBytesReceivedSecure"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwXSTcpStatsGroup = bwXSTcpStatsGroup.setStatus('current')
if mibBuilder.loadTexts: bwXSTcpStatsGroup.setDescription('This group defines the statistics for the Automatic Hold And Retrieve Service.')
bwPSConcurrentFrameworkStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1000, 1, 99)).setObjects(("BW-BroadworksApplicationServer", "bwPSMonitoringExecutorTable"), ("BW-BroadworksApplicationServer", "bwPSMonitoringExecutorIndex"), ("BW-BroadworksApplicationServer", "bwPSMonitoringExecutorName"), ("BW-BroadworksApplicationServer", "bwPSMonitoringExecutorCurrentPoolSize"), ("BW-BroadworksApplicationServer", "bwPSMonitoringExecutorMaxPoolSize"), ("BW-BroadworksApplicationServer", "bwPSMonitoringExecutorAvgActiveThreads"), ("BW-BroadworksApplicationServer", "bwPSMonitoringExecutorTaskQueueSize"), ("BW-BroadworksApplicationServer", "bwPSMonitoringExecutorNbTasksRun"), ("BW-BroadworksApplicationServer", "bwPSMonitoringExecutorNbWarnings"), ("BW-BroadworksApplicationServer", "bwPSMonitoringExecutorNbErrors"), ("BW-BroadworksApplicationServer", "bwPSMonitoringExecutorLongestTaskMs"), ("BW-BroadworksApplicationServer", "bwPSMonitoringExecutorLongestTaskName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwPSConcurrentFrameworkStatsGroup = bwPSConcurrentFrameworkStatsGroup.setStatus('current')
if mibBuilder.loadTexts: bwPSConcurrentFrameworkStatsGroup.setDescription('This group defines the statistics for the Automatic Hold And Retrieve Service.')
bwXSConcurrentFrameworkStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1000, 1, 100)).setObjects(("BW-BroadworksApplicationServer", "bwXSMonitoringExecutorTable"), ("BW-BroadworksApplicationServer", "bwXSMonitoringExecutorIndex"), ("BW-BroadworksApplicationServer", "bwXSMonitoringExecutorName"), ("BW-BroadworksApplicationServer", "bwXSMonitoringExecutorCurrentPoolSize"), ("BW-BroadworksApplicationServer", "bwXSMonitoringExecutorMaxPoolSize"), ("BW-BroadworksApplicationServer", "bwXSMonitoringExecutorAvgActiveThreads"), ("BW-BroadworksApplicationServer", "bwXSMonitoringExecutorTaskQueueSize"), ("BW-BroadworksApplicationServer", "bwXSMonitoringExecutorNbTasksRun"), ("BW-BroadworksApplicationServer", "bwXSMonitoringExecutorNbWarnings"), ("BW-BroadworksApplicationServer", "bwXSMonitoringExecutorNbErrors"), ("BW-BroadworksApplicationServer", "bwXSMonitoringExecutorLongestTaskMs"), ("BW-BroadworksApplicationServer", "bwXSMonitoringExecutorLongestTaskName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwXSConcurrentFrameworkStatsGroup = bwXSConcurrentFrameworkStatsGroup.setStatus('current')
if mibBuilder.loadTexts: bwXSConcurrentFrameworkStatsGroup.setDescription('This group defines the statistics for the Automatic Hold And Retrieve Service.')
bwAsExtEmergencyRtgStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1000, 1, 101)).setObjects(("BW-BroadworksApplicationServer", "bwExtEmergencyRtgQuerySent"), ("BW-BroadworksApplicationServer", "bwExtEmergencyRtgQueryFailure"), ("BW-BroadworksApplicationServer", "bwExtEmergencyRtgENServerTimeout"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwAsExtEmergencyRtgStatsGroup = bwAsExtEmergencyRtgStatsGroup.setStatus('current')
if mibBuilder.loadTexts: bwAsExtEmergencyRtgStatsGroup.setDescription('This group defines the statistics for the Automatic Hold And Retrieve Service.')
bwAsSoapGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1000, 1, 103)).setObjects(("BW-BroadworksApplicationServer", "bwSOAPMaxSessions"), ("BW-BroadworksApplicationServer", "bwSOAPAvgSessions"), ("BW-BroadworksApplicationServer", "bwSOAPMaxThreads"), ("BW-BroadworksApplicationServer", "bwSOAPAvgThreads"), ("BW-BroadworksApplicationServer", "bwSOAPMaxServiceTime"), ("BW-BroadworksApplicationServer", "bwSOAPAvgServiceTime"), ("BW-BroadworksApplicationServer", "bwSOAPNumDroppedRequests"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwAsSoapGroup = bwAsSoapGroup.setStatus('current')
if mibBuilder.loadTexts: bwAsSoapGroup.setDescription('This group defines the statistics for SOAP.')
bwAsTwoStageDialingServiceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1000, 1, 102)).setObjects(("BW-BroadworksApplicationServer", "bwTwoStageDialingInvocation"), ("BW-BroadworksApplicationServer", "bwTwoStageDialingSPTable"), ("BW-BroadworksApplicationServer", "bwTwoStageDialingSPIndex"), ("BW-BroadworksApplicationServer", "bwTwoStageDialingSPID"), ("BW-BroadworksApplicationServer", "bwTwoStageDialingSPInvocation"), ("BW-BroadworksApplicationServer", "bwTwoStageDialingGroupTable"), ("BW-BroadworksApplicationServer", "bwTwoStageDialingGroupIndex"), ("BW-BroadworksApplicationServer", "bwTwoStageDialingGroupID"), ("BW-BroadworksApplicationServer", "bwTwoStageDialingGroupInvocation"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwAsTwoStageDialingServiceGroup = bwAsTwoStageDialingServiceGroup.setStatus('current')
if mibBuilder.loadTexts: bwAsTwoStageDialingServiceGroup.setDescription('This group defines the statistics for the Two Stage Dialing Service.')
bwAsActivatableFeatureGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1000, 1, 104)).setObjects(("BW-BroadworksApplicationServer", "bwActivatableFeatureTable"), ("BW-BroadworksApplicationServer", "bwActivatableFeatureEntry"), ("BW-BroadworksApplicationServer", "bwActivatableFeatureIndex"), ("BW-BroadworksApplicationServer", "bwActivatableFeatureId"), ("BW-BroadworksApplicationServer", "bwActivatableFeatureDescription"), ("BW-BroadworksApplicationServer", "bwActivatableFeatureActivated"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwAsActivatableFeatureGroup = bwAsActivatableFeatureGroup.setStatus('current')
if mibBuilder.loadTexts: bwAsActivatableFeatureGroup.setDescription('This group defines the statistics for Activatable feature.')
bwAsCallForwardingNotReachableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1000, 1, 105)).setObjects(("BW-BroadworksApplicationServer", "bwCFNRcNumForwarded"), ("BW-BroadworksApplicationServer", "bwCFNRcNumPhoneActivations"), ("BW-BroadworksApplicationServer", "bwCFNRcNumPhoneDeactivations"), ("BW-BroadworksApplicationServer", "bwCFNRcDestinationChanged"), ("BW-BroadworksApplicationServer", "bwCallForwardingNotReachableSPTable"), ("BW-BroadworksApplicationServer", "bwCallForwardingNotReachableGroupTable"), ("BW-BroadworksApplicationServer", "bwCFNRcSPIndex"), ("BW-BroadworksApplicationServer", "bwCFNRcSPID"), ("BW-BroadworksApplicationServer", "bwCFNRcSPNumForwarded"), ("BW-BroadworksApplicationServer", "bwCFNRcSPNumPhoneActivations"), ("BW-BroadworksApplicationServer", "bwCFNRcSPNumPhoneDeactivations"), ("BW-BroadworksApplicationServer", "bwCFNRcSPDestinationChanged"), ("BW-BroadworksApplicationServer", "bwCFNRcGroupIndex"), ("BW-BroadworksApplicationServer", "bwCFNRcGroupID"), ("BW-BroadworksApplicationServer", "bwCFNRcGroupNumForwarded"), ("BW-BroadworksApplicationServer", "bwCFNRcGroupNumPhoneActivations"), ("BW-BroadworksApplicationServer", "bwCFNRcGroupNumPhoneDeactivations"), ("BW-BroadworksApplicationServer", "bwCFNRcGroupDestinationChanged"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwAsCallForwardingNotReachableGroup = bwAsCallForwardingNotReachableGroup.setStatus('current')
if mibBuilder.loadTexts: bwAsCallForwardingNotReachableGroup.setDescription('This group defines the statistics for Call Forwarding Not Reachable.')
bwMWIDeliveryToMobileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1000, 1, 106)).setObjects(("BW-BroadworksApplicationServer", "bwMWISMSSent"), ("BW-BroadworksApplicationServer", "bwMWIDeliveryToMobileSPTable"), ("BW-BroadworksApplicationServer", "bwMWISPIndex"), ("BW-BroadworksApplicationServer", "bwMWISPID"), ("BW-BroadworksApplicationServer", "bwSPMWISMSSent"), ("BW-BroadworksApplicationServer", "bwMWIDeliveryToMobileGroupTable"), ("BW-BroadworksApplicationServer", "bwMWIGroupIndex"), ("BW-BroadworksApplicationServer", "bwMWIGroupID"), ("BW-BroadworksApplicationServer", "bwGroupMWISMSSent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwMWIDeliveryToMobileGroup = bwMWIDeliveryToMobileGroup.setStatus('current')
if mibBuilder.loadTexts: bwMWIDeliveryToMobileGroup.setDescription('This group defines the statistics for MWI Delivery to Mobile.')
bwSharedCallAppearanceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1000, 1, 107)).setObjects(("BW-BroadworksApplicationServer", "bwSCASPTable"), ("BW-BroadworksApplicationServer", "bwSCAGroupTable"), ("BW-BroadworksApplicationServer", "bwSCACallRetrieveSuccess"), ("BW-BroadworksApplicationServer", "bwSCALocationControlActivationSuccess"), ("BW-BroadworksApplicationServer", "bwSCALocationControlDeactivationSuccess"), ("BW-BroadworksApplicationServer", "bwSCASPIndex"), ("BW-BroadworksApplicationServer", "bwSCASPIndex"), ("BW-BroadworksApplicationServer", "bwSCASPCallRetrieveSuccess"), ("BW-BroadworksApplicationServer", "bwSCASPLocationControlActivationSuccess"), ("BW-BroadworksApplicationServer", "bwSCASPLocationControlDeactivationSuccess"), ("BW-BroadworksApplicationServer", "bwSCAGroupIndex"), ("BW-BroadworksApplicationServer", "bwSCAGroupID"), ("BW-BroadworksApplicationServer", "bwSCAGroupCallRetrieveSuccess"), ("BW-BroadworksApplicationServer", "bwSCAGroupLocationControlActivationSuccess"), ("BW-BroadworksApplicationServer", "bwSCAGroupLocationControlDeactivationSuccess"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwSharedCallAppearanceGroup = bwSharedCallAppearanceGroup.setStatus('current')
if mibBuilder.loadTexts: bwSharedCallAppearanceGroup.setDescription('This group defines the statistics for Shared Call Appearance.')
bwExternalCustomRingbackGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1000, 1, 109)).setObjects(("BW-BroadworksApplicationServer", "bwExternalCustomRingbackAttempts"), ("BW-BroadworksApplicationServer", "bwExternalCustomRingbackFailures"), ("BW-BroadworksApplicationServer", "bwExternalCustomRingbackSPTable"), ("BW-BroadworksApplicationServer", "bwExternalCustomRingbackGroupTable"), ("BW-BroadworksApplicationServer", "bwExternalCustomRingbackSPEntry"), ("BW-BroadworksApplicationServer", "bwExternalCustomRingbackSPIndex"), ("BW-BroadworksApplicationServer", "bwExternalCustomRingbackSPID"), ("BW-BroadworksApplicationServer", "bwExternalCustomRingbackSPAttempts"), ("BW-BroadworksApplicationServer", "bwExternalCustomRingbackSPFailures"), ("BW-BroadworksApplicationServer", "bwExternalCustomRingbackGroupEntry"), ("BW-BroadworksApplicationServer", "bwExternalCustomRingbackGroupIndex"), ("BW-BroadworksApplicationServer", "bwExternalCustomRingbackGroupID"), ("BW-BroadworksApplicationServer", "bwExternalCustomRingbackGroupAttempts"), ("BW-BroadworksApplicationServer", "bwExternalCustomRingbackGroupFailures"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwExternalCustomRingbackGroup = bwExternalCustomRingbackGroup.setStatus('current')
if mibBuilder.loadTexts: bwExternalCustomRingbackGroup.setDescription('This group defines the statistics for External Custom Ringback.')
bwAsInCallServiceActivationGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1000, 1, 110)).setObjects(("BW-BroadworksApplicationServer", "bwICSAMonitoringStarted"), ("BW-BroadworksApplicationServer", "bwICSAMonitoringFailure"), ("BW-BroadworksApplicationServer", "bwICSAFlashDigitsDetected"), ("BW-BroadworksApplicationServer", "bwInCallServiceActivationSPTable"), ("BW-BroadworksApplicationServer", "bwInCallServiceActivationGroupTable"), ("BW-BroadworksApplicationServer", "bwICSASPIndex"), ("BW-BroadworksApplicationServer", "bwICSASPID"), ("BW-BroadworksApplicationServer", "bwICSASPMonitoringStarted"), ("BW-BroadworksApplicationServer", "bwICSASPMonitoringFailure"), ("BW-BroadworksApplicationServer", "bwICSASPFlashDigitsDetected"), ("BW-BroadworksApplicationServer", "bwICSAGroupIndex"), ("BW-BroadworksApplicationServer", "bwICSAGroupID"), ("BW-BroadworksApplicationServer", "bwICSAGroupMonitoringStarted"), ("BW-BroadworksApplicationServer", "bwICSAGroupMonitoringFailure"), ("BW-BroadworksApplicationServer", "bwICSAGroupFlashDigitsDetected"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwAsInCallServiceActivationGroup = bwAsInCallServiceActivationGroup.setStatus('current')
if mibBuilder.loadTexts: bwAsInCallServiceActivationGroup.setDescription('This group defines the statistics for In Call Service Activation.')
bwCongestionManagementGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1000, 1, 111)).setObjects(("BW-BroadworksApplicationServer", "bwCongestionManagementNeighborTable"), ("BW-BroadworksApplicationServer", "bwCongestionManagementNeighborIndex"), ("BW-BroadworksApplicationServer", "bwCongestionManagementNeighborIpAddress"), ("BW-BroadworksApplicationServer", "bwCongestionManagementNeighborInviteIn"), ("BW-BroadworksApplicationServer", "bwCongestionManagementNeighborInviteOut"), ("BW-BroadworksApplicationServer", "bwCongestionManagementNeighborRegisterIn"), ("BW-BroadworksApplicationServer", "bwCongestionManagementNeighborOptionsIn"), ("BW-BroadworksApplicationServer", "bwCongestionManagementNeighborOptionsOut"), ("BW-BroadworksApplicationServer", "bwCongestionManagementNeighborSubscribeNotifyIn"), ("BW-BroadworksApplicationServer", "bwCongestionManagementNeighborSubscribeNotifyOut"), ("BW-BroadworksApplicationServer", "bwCongestionManagementNeighbor5xxIn"), ("BW-BroadworksApplicationServer", "bwCongestionManagementNeighborCallpMessageInRate"), ("BW-BroadworksApplicationServer", "bwCongestionManagementNeighborCallpMessageOutRate"), ("BW-BroadworksApplicationServer", "bwCongestionManagementNeighborCallpRequestInRate"), ("BW-BroadworksApplicationServer", "bwCongestionManagementNeighborNonCallpMessageInRate"), ("BW-BroadworksApplicationServer", "bwCongestionManagementNeighborNonCallpMessageOutRate"), ("BW-BroadworksApplicationServer", "bwCongestionManagementNeighborNonCallpRequestInRate"), ("BW-BroadworksApplicationServer", "bwCongestionManagementNeighborState"), ("BW-BroadworksApplicationServer", "bwCongestionManagementNeighborCapability"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwCongestionManagementGroup = bwCongestionManagementGroup.setStatus('current')
if mibBuilder.loadTexts: bwCongestionManagementGroup.setDescription('This group defines the statistics for Congestion Management.')
bwShInterfaceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1000, 1, 112)).setObjects(("BW-BroadworksApplicationServer", "bwShInterfaceRequestsIn"), ("BW-BroadworksApplicationServer", "bwShInterfaceRequestsOut"), ("BW-BroadworksApplicationServer", "bwShInterfaceResponsesIn"), ("BW-BroadworksApplicationServer", "bwShInterfaceResponsesOut"), ("BW-BroadworksApplicationServer", "bwShInterfaceRequestTimeout"), ("BW-BroadworksApplicationServer", "bwShInterfaceRequestResourceLimitation"), ("BW-BroadworksApplicationServer", "bwShInterfaceUserDataRequest"), ("BW-BroadworksApplicationServer", "bwShInterfaceUserDataRequestFailure"), ("BW-BroadworksApplicationServer", "bwShInterfaceSubscribeNotificationsRequest"), ("BW-BroadworksApplicationServer", "bwShInterfaceSubscribeNotificationsRequestFailure"), ("BW-BroadworksApplicationServer", "bwShInterfacePushNotificationRequest"), ("BW-BroadworksApplicationServer", "bwShInterfacePushNotificationRequestFailure"), ("BW-BroadworksApplicationServer", "bwShInterfacePublicIdentityRefreshInitiated"), ("BW-BroadworksApplicationServer", "bwShInterfacePublicIdentityRefreshFailure"), ("BW-BroadworksApplicationServer", "bwShInterfaceSystemRefreshInitiated"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwShInterfaceGroup = bwShInterfaceGroup.setStatus('current')
if mibBuilder.loadTexts: bwShInterfaceGroup.setDescription('This group defines the statistics for the SH Interface.')
bwDnsQueryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1000, 1, 113)).setObjects(("BW-BroadworksApplicationServer", "bwDnsQueryTimeMax"), ("BW-BroadworksApplicationServer", "bwDnsQueryTimeMaxTimestampMSB"), ("BW-BroadworksApplicationServer", "bwDnsQueryTimeMaxTimestampLSB"), ("BW-BroadworksApplicationServer", "bwDnsQueryTimeAvg"), ("BW-BroadworksApplicationServer", "bwDnsStatsQueriesTable"), ("BW-BroadworksApplicationServer", "bwDnsStatsQueriesEntry"), ("BW-BroadworksApplicationServer", "bwDnsStatsQueryIndex"), ("BW-BroadworksApplicationServer", "bwDnsStatsQueryType"), ("BW-BroadworksApplicationServer", "bwDnsStatsQueries"), ("BW-BroadworksApplicationServer", "bwDnsStatsQueryTimeouts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwDnsQueryGroup = bwDnsQueryGroup.setStatus('current')
if mibBuilder.loadTexts: bwDnsQueryGroup.setDescription('This group defines the statistics for DNS query.')
bwAsExpensiveCallNotificationGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1000, 1, 114)).setObjects(("BW-BroadworksApplicationServer", "bwECNWarningAnnouncementAttempts"), ("BW-BroadworksApplicationServer", "bwECNExpensiveCallReleased"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwAsExpensiveCallNotificationGroup = bwAsExpensiveCallNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: bwAsExpensiveCallNotificationGroup.setDescription('This group defines the statistics for expensive call notification.')
bwLocationControlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1000, 1, 115)).setObjects(("BW-BroadworksApplicationServer", "bwLocationControlSPTable"), ("BW-BroadworksApplicationServer", "bwLocationControlGroupTable"), ("BW-BroadworksApplicationServer", "bwLocationControlActivationSuccess"), ("BW-BroadworksApplicationServer", "bwLocationControlDeactivationSuccess"), ("BW-BroadworksApplicationServer", "bwLocationControlSPEntry"), ("BW-BroadworksApplicationServer", "bwLocationControlSPIndex"), ("BW-BroadworksApplicationServer", "bwLocationControlSPID"), ("BW-BroadworksApplicationServer", "bwLocationControlSPActivationSuccess"), ("BW-BroadworksApplicationServer", "bwLocationControlSPDeactivationSuccess"), ("BW-BroadworksApplicationServer", "bwLocationControlGroupEntry"), ("BW-BroadworksApplicationServer", "bwLocationControlGroupIndex"), ("BW-BroadworksApplicationServer", "bwLocationControlGroupID"), ("BW-BroadworksApplicationServer", "bwLocationControlGroupActivationSuccess"), ("BW-BroadworksApplicationServer", "bwLocationControlGroupDeactivationSuccess"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwLocationControlGroup = bwLocationControlGroup.setStatus('current')
if mibBuilder.loadTexts: bwLocationControlGroup.setDescription('This group defines the location control service.')
bwCallRetrieveGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1000, 1, 116)).setObjects(("BW-BroadworksApplicationServer", "bwCallRetrieveSPTable"), ("BW-BroadworksApplicationServer", "bwCallRetrieveGroupTable"), ("BW-BroadworksApplicationServer", "bwCallRetrieveSuccess"), ("BW-BroadworksApplicationServer", "bwCallRetrieveSPEntry"), ("BW-BroadworksApplicationServer", "bwCallRetrieveSPIndex"), ("BW-BroadworksApplicationServer", "bwCallRetrieveSPID"), ("BW-BroadworksApplicationServer", "bwCallRetrieveSPSuccess"), ("BW-BroadworksApplicationServer", "bwCallRetrieveGroupEntry"), ("BW-BroadworksApplicationServer", "bwCallRetrieveGroupIndex"), ("BW-BroadworksApplicationServer", "bwCallRetrieveGroupID"), ("BW-BroadworksApplicationServer", "bwCallRetrieveGroupSuccess"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwCallRetrieveGroup = bwCallRetrieveGroup.setStatus('current')
if mibBuilder.loadTexts: bwCallRetrieveGroup.setDescription('This group defines the call retrieve service.')
bwBroadworksAnywhereGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1000, 1, 117)).setObjects(("BW-BroadworksApplicationServer", "bwBroadWorksAnywhereSPTable"), ("BW-BroadworksApplicationServer", "bwBroadWorksAnywhereGroupTable"), ("BW-BroadworksApplicationServer", "bwBACallOriginations"), ("BW-BroadworksApplicationServer", "bwBACallTerminations"), ("BW-BroadworksApplicationServer", "bwBroadWorksAnywhereSPEntry"), ("BW-BroadworksApplicationServer", "bwBroadWorksAnywhereSPIndex"), ("BW-BroadworksApplicationServer", "bwBroadWorksAnywhereSPID"), ("BW-BroadworksApplicationServer", "bwBASPCallOriginations"), ("BW-BroadworksApplicationServer", "bwBASPCallTerminations"), ("BW-BroadworksApplicationServer", "bwBroadWorksAnywhereGroupEntry"), ("BW-BroadworksApplicationServer", "bwBroadWorksAnywhereGroupIndex"), ("BW-BroadworksApplicationServer", "bwBroadWorksAnywhereGroupID"), ("BW-BroadworksApplicationServer", "bwBAGroupCallOriginations"), ("BW-BroadworksApplicationServer", "bwBAGroupCallTerminations"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwBroadworksAnywhereGroup = bwBroadworksAnywhereGroup.setStatus('current')
if mibBuilder.loadTexts: bwBroadworksAnywhereGroup.setDescription('This group defines the BroadWorks Anywhere service.')
psVoiceMessagingGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1000, 1, 121)).setObjects(("BW-BroadworksApplicationServer", "psBwVMRNumLoginAttempts"), ("BW-BroadworksApplicationServer", "psBwVMRNumLoginFailures"), ("BW-BroadworksApplicationServer", "psBwVMRSPIndex"), ("BW-BroadworksApplicationServer", "psBwVMRSPID"), ("BW-BroadworksApplicationServer", "psBwVMRSPNumLoginAttempts"), ("BW-BroadworksApplicationServer", "psBwVMRSPNumLoginFailures"), ("BW-BroadworksApplicationServer", "psBwVMRGroupIndex"), ("BW-BroadworksApplicationServer", "psBwVMRGroupID"), ("BW-BroadworksApplicationServer", "psBwVMRGroupNumLoginAttempts"), ("BW-BroadworksApplicationServer", "psBwVMRGroupNumLoginFailures"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    psVoiceMessagingGroup = psVoiceMessagingGroup.setStatus('current')
if mibBuilder.loadTexts: psVoiceMessagingGroup.setDescription('This group defines the Voice Messaging service.')
psPolycomPhoneServiceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1000, 1, 122)).setObjects(("BW-BroadworksApplicationServer", "bwPolycomPhoneDirectoryNumDownloads"), ("BW-BroadworksApplicationServer", "polycomSPIndex"), ("BW-BroadworksApplicationServer", "polycomSPID"), ("BW-BroadworksApplicationServer", "bwPolycomPhoneDirectorySPNumDownloads"), ("BW-BroadworksApplicationServer", "polycomGroupIndex"), ("BW-BroadworksApplicationServer", "polycomGroupID"), ("BW-BroadworksApplicationServer", "bwPolycomPhoneDirectoryGroupNumDownloads"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    psPolycomPhoneServiceGroup = psPolycomPhoneServiceGroup.setStatus('current')
if mibBuilder.loadTexts: psPolycomPhoneServiceGroup.setDescription('This group defines the Polycom Phone service.')
bwAsBasicCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6431, 1, 2, 1000, 2, 1)).setObjects(("BW-BroadworksApplicationServer", "bwAsMgcpGroup"), ("BW-BroadworksApplicationServer", "bwAsMcpGroup"), ("BW-BroadworksApplicationServer", "bwAsImsGroup"), ("BW-BroadworksApplicationServer", "bwAsCapGroup"), ("BW-BroadworksApplicationServer", "bwAsSmdiGroup"), ("BW-BroadworksApplicationServer", "bwAsMediaResourceGroup"), ("BW-BroadworksApplicationServer", "bwAsWholeSalesGroup"), ("BW-BroadworksApplicationServer", "bwAsRealTimeAccntGroup"), ("BW-BroadworksApplicationServer", "bwAsExtCallLogsGroup"), ("BW-BroadworksApplicationServer", "bwAsXsBcctGroup"), ("BW-BroadworksApplicationServer", "bwAsCpeDeviceGroup"), ("BW-BroadworksApplicationServer", "bwAsCallpGroup"), ("BW-BroadworksApplicationServer", "bwAsSmtpGroup"), ("BW-BroadworksApplicationServer", "bwAsSipGroup"), ("BW-BroadworksApplicationServer", "bwAsAccntCodeServiceGroup"), ("BW-BroadworksApplicationServer", "bwAsAnonymousCallRejectionServiceGroup"), ("BW-BroadworksApplicationServer", "bwAsAuthenticationServiceGroup"), ("BW-BroadworksApplicationServer", "bwAsAutoAttendantServiceGroup"), ("BW-BroadworksApplicationServer", "bwAsCallCapacityServiceGroup"), ("BW-BroadworksApplicationServer", "bwAsCFAlwaysServiceGroup"), ("BW-BroadworksApplicationServer", "bwAsCFBusyServiceGroup"), ("BW-BroadworksApplicationServer", "bwAsCFNoAnswerServiceGroup"), ("BW-BroadworksApplicationServer", "bwAsCallNotifyServiceGroup"), ("BW-BroadworksApplicationServer", "bwAsCallParkServiceGroup"), ("BW-BroadworksApplicationServer", "bwAsCallPickupServiceGroup"), ("BW-BroadworksApplicationServer", "bwAsCallReturnServiceGroup"), ("BW-BroadworksApplicationServer", "bwAsCompilotCallMgrServiceGroup"), ("BW-BroadworksApplicationServer", "bwAsDoNotDisturbServiceGroup"), ("BW-BroadworksApplicationServer", "bwAsFlashCallXferServiceGroup"), ("BW-BroadworksApplicationServer", "bwAsFlashCallWaitingServiceGroup"), ("BW-BroadworksApplicationServer", "bwAsFlashConsultationServiceGroup"), ("BW-BroadworksApplicationServer", "bwAsFlash3wcServiceGroup"), ("BW-BroadworksApplicationServer", "bwAsHuntGroupServiceGroup"), ("BW-BroadworksApplicationServer", "bwAsIcpServiceGroup"), ("BW-BroadworksApplicationServer", "bwAsIpPhoneServiceGroup"), ("BW-BroadworksApplicationServer", "bwAsLastNumberRedialServiceGroup"), ("BW-BroadworksApplicationServer", "bwAsOcpServiceGroup"), ("BW-BroadworksApplicationServer", "bwAsPriorityAlertServiceGroup"), ("BW-BroadworksApplicationServer", "bwAsSelectiveCallAcceptanceServiceGroup"), ("BW-BroadworksApplicationServer", "bwAsSelectiveCallForwardServiceGroup"), ("BW-BroadworksApplicationServer", "bwAsSelectiveCallRejectionServiceGroup"), ("BW-BroadworksApplicationServer", "bwAsSimRingServiceGroup"), ("BW-BroadworksApplicationServer", "bwAsVoiceMessagingServiceGroup"), ("BW-BroadworksApplicationServer", "bwAsSeriesCompletionServiceGroup"), ("BW-BroadworksApplicationServer", "bwAsInterceptServiceGroup"), ("BW-BroadworksApplicationServer", "bwAsInstantConferencingServiceGroup"), ("BW-BroadworksApplicationServer", "bwAsCallingLineIdBlockingServiceGroup"), ("BW-BroadworksApplicationServer", "bwAsSessionAuditServiceGroup"), ("BW-BroadworksApplicationServer", "bwAsWindowsMessagingServiceGroup"), ("BW-BroadworksApplicationServer", "bwAsCalWaitingServiceGroup"), ("BW-BroadworksApplicationServer", "bwAsAlternateNumberServiceGroup"), ("BW-BroadworksApplicationServer", "bwAsCustomerOriginatedTraceServiceGroup"), ("BW-BroadworksApplicationServer", "bwAsSpeedDialing8ServiceGroup"), ("BW-BroadworksApplicationServer", "bwAsMusicOnHoldServiceGroup"), ("BW-BroadworksApplicationServer", "bwAsCallingNameQueriesServiceGroup"), ("BW-BroadworksApplicationServer", "bwAsThirdPartyMWIControlServiceGroup"), ("BW-BroadworksApplicationServer", "bwAsCallCenterServiceGroup"), ("BW-BroadworksApplicationServer", "bwAsCallForwardGroupNoAnswerServiceGroup"), ("BW-BroadworksApplicationServer", "bwAsSpeedDialing100ServiceGroup"), ("BW-BroadworksApplicationServer", "bwAsThirdPartyVoiceMailServiceGroup"), ("BW-BroadworksApplicationServer", "bwAsDirectedCallPickupServiceGroup"), ("BW-BroadworksApplicationServer", "bwAsFlashCallHoldServiceGroup"), ("BW-BroadworksApplicationServer", "bwAsEmergencyZoneServiceGroup"), ("BW-BroadworksApplicationServer", "bwAsDirectedCallPickupWithBargeInServiceGroup"), ("BW-BroadworksApplicationServer", "bwAsAutomaticCallBackServiceGroup"), ("BW-BroadworksApplicationServer", "bwAsRingTimeoutServiceGroup"), ("BW-BroadworksApplicationServer", "bwAsSequentialRingServiceGroup"), ("BW-BroadworksApplicationServer", "bwAsVideoAddOnServiceGroup"), ("BW-BroadworksApplicationServer", "bwAsMaliciousCallTraceServiceGroup"), ("BW-BroadworksApplicationServer", "bwAsPushToTalkServiceGroup"), ("BW-BroadworksApplicationServer", "bwAsHotelingServiceGroup"), ("BW-BroadworksApplicationServer", "bwAsPreferredCarrierServiceGroup"), ("BW-BroadworksApplicationServer", "bwAsFamilySimRingServiceGroup"), ("BW-BroadworksApplicationServer", "bwAsDiversionInhibitorServiceGroup"), ("BW-BroadworksApplicationServer", "bwAsInstantGroupCallServiceGroup"), ("BW-BroadworksApplicationServer", "bwAsAutomaticHoldAndRetrieveServiceGroup"), ("BW-BroadworksApplicationServer", "bwAsBusinessTrunkGroupServiceGroup"), ("BW-BroadworksApplicationServer", "bwAsCustomRingbackServiceGroup"), ("BW-BroadworksApplicationServer", "bwAsMssGroup"), ("BW-BroadworksApplicationServer", "bwAsNrsGroup"), ("BW-BroadworksApplicationServer", "bwAsXsPersistencyGroup"), ("BW-BroadworksApplicationServer", "bwAsProtocolMonitorGroup"), ("BW-BroadworksApplicationServer", "bwAsSystemStatsGroup"), ("BW-BroadworksApplicationServer", "bwAsQueueStatsGroup"), ("BW-BroadworksApplicationServer", "bwAsOverloadControlStatsGroup"), ("BW-BroadworksApplicationServer", "bwAsRedundancyStatsGroup"), ("BW-BroadworksApplicationServer", "bwAsPsPersistencyGroup"), ("BW-BroadworksApplicationServer", "bwAsPsExtCallLogsGroup"), ("BW-BroadworksApplicationServer", "bwAsPsOciGroup"), ("BW-BroadworksApplicationServer", "bwAsPsQueueStatsGroup"), ("BW-BroadworksApplicationServer", "bwAsPsLdapGroup"), ("BW-BroadworksApplicationServer", "bwAsPsBcctGroup"), ("BW-BroadworksApplicationServer", "bwAsMoCountersGroup"), ("BW-BroadworksApplicationServer", "bwAsReservedGroup"), ("BW-BroadworksApplicationServer", "bwAsPhysicalLocationServiceGroup"), ("BW-BroadworksApplicationServer", "bwAsFaxMessagingServiceGroup"), ("BW-BroadworksApplicationServer", "bwPSTcpStatsGroup"), ("BW-BroadworksApplicationServer", "bwXSTcpStatsGroup"), ("BW-BroadworksApplicationServer", "bwPSConcurrentFrameworkStatsGroup"), ("BW-BroadworksApplicationServer", "bwXSConcurrentFrameworkStatsGroup"), ("BW-BroadworksApplicationServer", "bwAsExtEmergencyRtgStatsGroup"), ("BW-BroadworksApplicationServer", "bwAsTwoStageDialingServiceGroup"), ("BW-BroadworksApplicationServer", "bwAsSoapGroup"), ("BW-BroadworksApplicationServer", "bwAsActivatableFeatureGroup"), ("BW-BroadworksApplicationServer", "bwAsCallForwardingNotReachableGroup"), ("BW-BroadworksApplicationServer", "bwMWIDeliveryToMobileGroup"), ("BW-BroadworksApplicationServer", "bwSharedCallAppearanceGroup"), ("BW-BroadworksApplicationServer", "bwExternalCustomRingbackGroup"), ("BW-BroadworksApplicationServer", "bwAsInCallServiceActivationGroup"), ("BW-BroadworksApplicationServer", "bwCongestionManagementGroup"), ("BW-BroadworksApplicationServer", "bwShInterfaceGroup"), ("BW-BroadworksApplicationServer", "bwDnsQueryGroup"), ("BW-BroadworksApplicationServer", "bwAsExpensiveCallNotificationGroup"), ("BW-BroadworksApplicationServer", "bwLocationControlGroup"), ("BW-BroadworksApplicationServer", "bwCallRetrieveGroup"), ("BW-BroadworksApplicationServer", "bwBroadworksAnywhereGroup"), ("BW-BroadworksApplicationServer", "psVoiceMessagingGroup"), ("BW-BroadworksApplicationServer", "psPolycomPhoneServiceGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwAsBasicCompliance = bwAsBasicCompliance.setStatus('current')
if mibBuilder.loadTexts: bwAsBasicCompliance.setDescription('BroadWorks Application Server MIB compliance')
mibBuilder.exportSymbols("BW-BroadworksApplicationServer", bwCongestionManagementNeighborCallpMessageInRate=bwCongestionManagementNeighborCallpMessageInRate, bwExternalCallLogsDropped=bwExternalCallLogsDropped, bwCallingLineIDDeliveryBlockPerCallBlocks=bwCallingLineIDDeliveryBlockPerCallBlocks, bwXSTcpServersNbBytesReceived=bwXSTcpServersNbBytesReceived, bwCallpMaximumCallTimeforUnansweredCallsExceeded=bwCallpMaximumCallTimeforUnansweredCallsExceeded, bwAsSystemStatsGroup=bwAsSystemStatsGroup, bwSipStatsUpdateIns=bwSipStatsUpdateIns, bwPSTcpServersStatsEntry=bwPSTcpServersStatsEntry, bwCPEDeviceFileRebuilt=bwCPEDeviceFileRebuilt, bwRingTimeoutSPID=bwRingTimeoutSPID, bwCallpSPUserTerminationAttempts=bwCallpSPUserTerminationAttempts, bwCallingLineIDDeliveryBlockSPEntry=bwCallingLineIDDeliveryBlockSPEntry, bwVMRSPNumBusyGreetingsRecorded=bwVMRSPNumBusyGreetingsRecorded, bwDPUBIGroupTable=bwDPUBIGroupTable, overloadStats=overloadStats, bwVAOGroupTable=bwVAOGroupTable, bwCustomRingbackUserVideoGroupFailures=bwCustomRingbackUserVideoGroupFailures, bwIPPhoneSPID=bwIPPhoneSPID, bwCommonCommPSInputCommunicationErrors=bwCommonCommPSInputCommunicationErrors, bwSessionAuditNumCallsFailedAudit=bwSessionAuditNumCallsFailedAudit, bwTrunkGroupEntry=bwTrunkGroupEntry, bwPSMonitoringExecutorNbWarnings=bwPSMonitoringExecutorNbWarnings, bwDnsStatsQueryIndex=bwDnsStatsQueryIndex, bwCotGroupActivation=bwCotGroupActivation, bwPriorityAlertGroupEntry=bwPriorityAlertGroupEntry, bwFlashCallHoldGroupIndex=bwFlashCallHoldGroupIndex, psPerNbCriticalErrors=psPerNbCriticalErrors, bwSIPTcpTotalConnections=bwSIPTcpTotalConnections, bwSMTPSecondaryUnSuccessfulEmailSendAttempts=bwSMTPSecondaryUnSuccessfulEmailSendAttempts, bwSipStatsOtherIns=bwSipStatsOtherIns, bwSipStatsUpdateResponseTable=bwSipStatsUpdateResponseTable, bwGroupNoIndicationUserPIC=bwGroupNoIndicationUserPIC, bwInstantConferencingBridgeEntry=bwInstantConferencingBridgeEntry, bwSessionAuditSPID=bwSessionAuditSPID, bwHuntGroupsSPEntry=bwHuntGroupsSPEntry, bwMGCPStatsEndpointConfigurationResponseTable=bwMGCPStatsEndpointConfigurationResponseTable, polycomPhoneServices=polycomPhoneServices, bwCFASPDestinationChanged=bwCFASPDestinationChanged, instantConferencing=instantConferencing, seriesCompletion=seriesCompletion, bwHuntGroupsGroupEntry=bwHuntGroupsGroupEntry, psOciStatsActiveSessions=psOciStatsActiveSessions, psSystemInternalQueueLengthMax=psSystemInternalQueueLengthMax, bwFlashCallHoldGroupID=bwFlashCallHoldGroupID, broadworks=broadworks, bwDPUBIGroupAttempt=bwDPUBIGroupAttempt, bwCongestionManagementNeighbor5xxIn=bwCongestionManagementNeighbor5xxIn, bwAsXsPersistencyGroup=bwAsXsPersistencyGroup, commonCommModule=commonCommModule, bwAsMssGroup=bwAsMssGroup, bwMWISMSSent=bwMWISMSSent, bwDirectedCallPickupSPEntry=bwDirectedCallPickupSPEntry, bwTrunkGroupPerTGMaxActiveCalls=bwTrunkGroupPerTGMaxActiveCalls, callpModule=callpModule, bwPSTcpServersOutgoingQueueSize=bwPSTcpServersOutgoingQueueSize, bwAsMgcpGroup=bwAsMgcpGroup, bwVMSPNumBusyGreetingsPlayed=bwVMSPNumBusyGreetingsPlayed, psOciStatsNbQueryRequests=psOciStatsNbQueryRequests, psBwVMRNumLoginAttempts=psBwVMRNumLoginAttempts, bwMGCPStatsAuditConnectionResponseCodeValue=bwMGCPStatsAuditConnectionResponseCodeValue, bwCallParkGroupNumFailures=bwCallParkGroupNumFailures, bwAnonymousCallRejectionSPIndex=bwAnonymousCallRejectionSPIndex, bwMGCPStatsRestartInProgressResponseOuts=bwMGCPStatsRestartInProgressResponseOuts, psActivatableFeatureStats=psActivatableFeatureStats, bwCallWaitingGroupTable=bwCallWaitingGroupTable, bwCommonCommXSInputCommunicationErrors=bwCommonCommXSInputCommunicationErrors, bwMGCPStatsAnswerSignalDelay=bwMGCPStatsAnswerSignalDelay, bwCongestionManagementNeighborEntry=bwCongestionManagementNeighborEntry, bwCFGNASPForward=bwCFGNASPForward, bwCommPilotCallMgrSPNumConferenceAdd=bwCommPilotCallMgrSPNumConferenceAdd, bwCallWaitingGroupEntry=bwCallWaitingGroupEntry, bwCallpSPIndex=bwCallpSPIndex, bwPSTTHWMTable=bwPSTTHWMTable, bwSMTPTotalSecondaryEmailSendAttempts=bwSMTPTotalSecondaryEmailSendAttempts, bwSequentialRingGroupNumNoAnswer=bwSequentialRingGroupNumNoAnswer, bwOCPGroupNumUnknownCallsBlocked=bwOCPGroupNumUnknownCallsBlocked, bwFlashCallTransferSPIndex=bwFlashCallTransferSPIndex, bwMGCPStatsAuditEndpointOuts=bwMGCPStatsAuditEndpointOuts, psBwVMRGroupNumLoginFailures=psBwVMRGroupNumLoginFailures, bwAccountCodesSPEntry=bwAccountCodesSPEntry, bwAsPsPersistencyGroup=bwAsPsPersistencyGroup, capModule=capModule, bwCallpActiveCalls=bwCallpActiveCalls, bwVMRGroupCallBackAttempts=bwVMRGroupCallBackAttempts, faxMessaging=faxMessaging, bwSessionAuditNumEndpointsFailedAudit=bwSessionAuditNumEndpointsFailedAudit, bwCallParkSPEntry=bwCallParkSPEntry, bwNonSubscriptionDialedGroupPIC=bwNonSubscriptionDialedGroupPIC, bwExternalCustomRingbackGroupTable=bwExternalCustomRingbackGroupTable, bwXSTcpStatsGroup=bwXSTcpStatsGroup, bwFamilySimRingSPEntry=bwFamilySimRingSPEntry, bwAutoAttendantSPNumTransfers=bwAutoAttendantSPNumTransfers, bwLastNumberRedialSPTable=bwLastNumberRedialSPTable, bwCPEDeviceFilePut=bwCPEDeviceFilePut, bwPhysicalLocationSPTable=bwPhysicalLocationSPTable, psExternalCallLogsStats=psExternalCallLogsStats, bwOCPNumSuccessfulAuthorizations=bwOCPNumSuccessfulAuthorizations, bwSmppSubmitSMResponseTimeout=bwSmppSubmitSMResponseTimeout, bwTrunkGroupPerTGUnreachableDestinationExceededOffsetValue=bwTrunkGroupPerTGUnreachableDestinationExceededOffsetValue, bwACBSPTable=bwACBSPTable, bwMusicOnHoldSPNumUses=bwMusicOnHoldSPNumUses, emergencyZones=emergencyZones, bwCallpMaximumCallTimeforAnsweredCallsExceeded=bwCallpMaximumCallTimeforAnsweredCallsExceeded, bwAHRGroupRetrieve=bwAHRGroupRetrieve, bwAsFlashConsultationServiceGroup=bwAsFlashConsultationServiceGroup, wspStats=wspStats, bwFamilySimRingGroupNumAttempts=bwFamilySimRingGroupNumAttempts, bwAccountCodesSPIndex=bwAccountCodesSPIndex, bwAsWindowsMessagingServiceGroup=bwAsWindowsMessagingServiceGroup, bwCallForwardingAlwaysGroupTable=bwCallForwardingAlwaysGroupTable, ringTimeout=ringTimeout, bwSipStatsActiveTcpConnections=bwSipStatsActiveTcpConnections, bwSimRingPersonalSPNumBusy=bwSimRingPersonalSPNumBusy, bwCFBGroupNumPhoneActivations=bwCFBGroupNumPhoneActivations, bwSystemInternalQueueSize=bwSystemInternalQueueSize, bwSelectiveCallAcceptanceGroupIndex=bwSelectiveCallAcceptanceGroupIndex, bwNoIndicationServiceProviderPIC=bwNoIndicationServiceProviderPIC, bwAsInstantGroupCallServiceGroup=bwAsInstantGroupCallServiceGroup, bwSessionAuditSPIndex=bwSessionAuditSPIndex, smdiModule=smdiModule, bwACBGroupTable=bwACBGroupTable, bwICSASPFlashDigitsDetected=bwICSASPFlashDigitsDetected, bwEZSPID=bwEZSPID, bwRingTimeoutSPNumExpires=bwRingTimeoutSPNumExpires, bwDPUBISPFailure=bwDPUBISPFailure, bwTrunkGroupPerTGTable=bwTrunkGroupPerTGTable, bwInstantConferencingBridgeName=bwInstantConferencingBridgeName, psOCIReportingBackLogMessageIndex=psOCIReportingBackLogMessageIndex, bwAuthenticationGroupNumValidResponses=bwAuthenticationGroupNumValidResponses, bwAsSequentialRingServiceGroup=bwAsSequentialRingServiceGroup, bwTrunkGroupPerTGName=bwTrunkGroupPerTGName, bwSystemInternalQueueLengthAvg=bwSystemInternalQueueLengthAvg, bwVMRNumComposeSendAttempts=bwVMRNumComposeSendAttempts, bwVMRGroupNumBusyGreetingsRecorded=bwVMRGroupNumBusyGreetingsRecorded, bwSCRNumRejects=bwSCRNumRejects, bwCallRetrieveGroupID=bwCallRetrieveGroupID, sequentialRing=sequentialRing, bwTrunkGroupPerTGIndex=bwTrunkGroupPerTGIndex, bwThirdPartyMWIControlNotifyFailures=bwThirdPartyMWIControlNotifyFailures, bwSequentialRingGroupID=bwSequentialRingGroupID, bwCommPilotCallManagerSPEntry=bwCommPilotCallManagerSPEntry, bwSipStatsUpdateResponseEntry=bwSipStatsUpdateResponseEntry, smppModule=smppModule, bwCFBGroupNumPhoneDeactivations=bwCFBGroupNumPhoneDeactivations, bwOCPSPNumPremiumServices2CallsBlocked=bwOCPSPNumPremiumServices2CallsBlocked, bwSeriesCompletionGroupEntry=bwSeriesCompletionGroupEntry, bwAnonymousCallRejectionGroupTable=bwAnonymousCallRejectionGroupTable, nbOfMigratedUsers=nbOfMigratedUsers, bwMusicOnHoldGroupTable=bwMusicOnHoldGroupTable, bwMGCPStatsMGCPCommandResponseEntry=bwMGCPStatsMGCPCommandResponseEntry, bwAccountCodesGroupIndex=bwAccountCodesGroupIndex, bwCallNotifySPNumNotifications=bwCallNotifySPNumNotifications, bwCallpGroupMediaTypeNotSupported=bwCallpGroupMediaTypeNotSupported, bwLocationControlSPID=bwLocationControlSPID, bwSCASPIndex=bwSCASPIndex, bwSipStatsRegisterResponseIns=bwSipStatsRegisterResponseIns, bwDnsQueryTimeMaxTimestampLSB=bwDnsQueryTimeMaxTimestampLSB, bwSipStatsUpdateResponseIns=bwSipStatsUpdateResponseIns, bwICPGroupNumCollectCallBlocks=bwICPGroupNumCollectCallBlocks, bwCFGNAGroupForward=bwCFGNAGroupForward, bwServiceTypeSystemID=bwServiceTypeSystemID, bwCallWaitingSPID=bwCallWaitingSPID, bwCongestionManagementNeighborNonCallpMessageInRate=bwCongestionManagementNeighborNonCallpMessageInRate, bwHuntGroupNumAttempts=bwHuntGroupNumAttempts, perNbCriticalErrors=perNbCriticalErrors, bwVMSPMultiMediaGreetingRecorded=bwVMSPMultiMediaGreetingRecorded, bwAsDirectedCallPickupWithBargeInServiceGroup=bwAsDirectedCallPickupWithBargeInServiceGroup, bwCallWaitingGroupID=bwCallWaitingGroupID, bwVPGroupNumAAAfterHoursGreetingRecorded=bwVPGroupNumAAAfterHoursGreetingRecorded, bwAsXsBcctGroup=bwAsXsBcctGroup, bwFlashCallWaitingSPID=bwFlashCallWaitingSPID, bwCallForwardingBusySPIndex=bwCallForwardingBusySPIndex, bwSipStatsRegisterResponsesEntry=bwSipStatsRegisterResponsesEntry, psOciStatsMaxUserRequestName=psOciStatsMaxUserRequestName, bwPhysicalLocationSPEntry=bwPhysicalLocationSPEntry, bwThirdPartyVMailGroupEntry=bwThirdPartyVMailGroupEntry, bwThirdPartyVoiceMailSPNbOfCFWBusy=bwThirdPartyVoiceMailSPNbOfCFWBusy, bwNbRequestsUnanswered=bwNbRequestsUnanswered, callForwardingNotReachable=callForwardingNotReachable, bwSipStatsNotifyIns=bwSipStatsNotifyIns, timesTen=timesTen, bwSipSummaryTotalTransactions=bwSipSummaryTotalTransactions, bwAsMibGroups=bwAsMibGroups, bwPSTcpServersIncomingQueueSize=bwPSTcpServersIncomingQueueSize, bwSimRingPersonalGroupEntry=bwSimRingPersonalGroupEntry, bwAsOverloadControlStatsGroup=bwAsOverloadControlStatsGroup, bwDirectedCallPickupGroupEntry=bwDirectedCallPickupGroupEntry, bwAsFaxMessagingServiceGroup=bwAsFaxMessagingServiceGroup, bwVAOOutgoingAttempts=bwVAOOutgoingAttempts, bwPhysicalLocationOriginationBlocked=bwPhysicalLocationOriginationBlocked, perNbOpenedTransactions=perNbOpenedTransactions, bwShInterfaceRequestResourceLimitation=bwShInterfaceRequestResourceLimitation, bwCFNRcNumPhoneDeactivations=bwCFNRcNumPhoneDeactivations, bwSimRingPersonalNumAttempts=bwSimRingPersonalNumAttempts, bwSipStatsInviteResponseOuts=bwSipStatsInviteResponseOuts, bwAsDoNotDisturbServiceGroup=bwAsDoNotDisturbServiceGroup, bwCallCenterGroupIndex=bwCallCenterGroupIndex, bwInstantConferencingCurrentUsage=bwInstantConferencingCurrentUsage, bwCallForwardingBusySPEntry=bwCallForwardingBusySPEntry, bwICSAMonitoringFailure=bwICSAMonitoringFailure, bwVMRNumBusyGreetingsRecorded=bwVMRNumBusyGreetingsRecorded, polycomGroupTable=polycomGroupTable, bwNumberOfServiceType=bwNumberOfServiceType, bwInterceptSPID=bwInterceptSPID, bwInstantConferencingBridgeTable=bwInstantConferencingBridgeTable, bwICSASPID=bwICSASPID, bwMusicOnHoldSPID=bwMusicOnHoldSPID, bwACBGroupMaxSession=bwACBGroupMaxSession, bwSequentialRingGroupTable=bwSequentialRingGroupTable, bwLocationControlGroupIndex=bwLocationControlGroupIndex, bwCFNAGroupDestinationChanged=bwCFNAGroupDestinationChanged, bwNumNonCallYellowZoneOverloadTrans=bwNumNonCallYellowZoneOverloadTrans, bwThirdPartyVMailGroupIndex=bwThirdPartyVMailGroupIndex, bwCallParkGroupTable=bwCallParkGroupTable, bwCPEDeviceFileDelete=bwCPEDeviceFileDelete, bwInterceptGroupUserOriginationInvocations=bwInterceptGroupUserOriginationInvocations, selectiveCallForward=selectiveCallForward, bwAHRSPTable=bwAHRSPTable, bwMaliciousCallTraceGroupTable=bwMaliciousCallTraceGroupTable, bwDirectedCallPickupSPID=bwDirectedCallPickupSPID, bwCallPickupSPEntry=bwCallPickupSPEntry, bwCAPStatsDatagramsIn=bwCAPStatsDatagramsIn, bwThirdPartyVMailGroupID=bwThirdPartyVMailGroupID, bwCFBGroupNumForwarded=bwCFBGroupNumForwarded, bwSCAGroupLocationControlDeactivationSuccess=bwSCAGroupLocationControlDeactivationSuccess, bwSipStatsOtherResponseOuts=bwSipStatsOtherResponseOuts, bwNRSStatsTable=bwNRSStatsTable, bwExternalCustomRingbackGroupEntry=bwExternalCustomRingbackGroupEntry, bwLNRGroupNumRedials=bwLNRGroupNumRedials, bwThirdPartyVoiceMailNbOfCFWBusy=bwThirdPartyVoiceMailNbOfCFWBusy, bwOCPNumPremiumServices2CallsBlocked=bwOCPNumPremiumServices2CallsBlocked, bwPSMonitoringExecutorCurrentPoolSize=bwPSMonitoringExecutorCurrentPoolSize, bwSessionAuditSPNumEndpointsAudited=bwSessionAuditSPNumEndpointsAudited, callPickup=callPickup, bwCallCenterSPReportEmailed=bwCallCenterSPReportEmailed, bwDnsStatsQueryType=bwDnsStatsQueryType, bwCFNASPNumPhoneActivations=bwCFNASPNumPhoneActivations, psConcurrentModule=psConcurrentModule, bwHotelingGroupTable=bwHotelingGroupTable, bwPSMonitoringExecutorLongestTaskMs=bwPSMonitoringExecutorLongestTaskMs, bwSelectiveCallForwardSPID=bwSelectiveCallForwardSPID, bwCFGNAExternalNoForward=bwCFGNAExternalNoForward, bwAHRHold=bwAHRHold, bwSubscriptionDialedServiceProviderPIC=bwSubscriptionDialedServiceProviderPIC, bwFaxMessagingSPReceived=bwFaxMessagingSPReceived, bwBACallTerminations=bwBACallTerminations, bwActivatableFeatureId=bwActivatableFeatureId, bwCongestionManagementGroup=bwCongestionManagementGroup, bwSipStatsMessageResponsesTable=bwSipStatsMessageResponsesTable, psSystemInternalQueueTimeMaxTimestampLSB=psSystemInternalQueueTimeMaxTimestampLSB, bwCommPilotCallManagerSPID=bwCommPilotCallManagerSPID, bwInterceptGroupUserTerminationInvocations=bwInterceptGroupUserTerminationInvocations, bwOCPSACNumUnsuccessfulCodeUsage=bwOCPSACNumUnsuccessfulCodeUsage, bwCallForwardingNoAnswerSPID=bwCallForwardingNoAnswerSPID)
mibBuilder.exportSymbols("BW-BroadworksApplicationServer", bwMGCPStatsMaxSetupSignalDelay=bwMGCPStatsMaxSetupSignalDelay, bwSessionAuditGroupIndex=bwSessionAuditGroupIndex, bwVMRSPDeleteAllMsgsAttempts=bwVMRSPDeleteAllMsgsAttempts, bwVMRGroupNumNoAnswerGreetingsRecorded=bwVMRGroupNumNoAnswerGreetingsRecorded, bwCallReturnGroupNumReturns=bwCallReturnGroupNumReturns, bwBroadWorksAnywhereSPID=bwBroadWorksAnywhereSPID, bwGroupSubscriptionDialedUserPIC=bwGroupSubscriptionDialedUserPIC, bwCallingLineIDDeliveryBlockGroupPerCallBlocks=bwCallingLineIDDeliveryBlockGroupPerCallBlocks, bwGroupSubscriptionServiceProviderPIC=bwGroupSubscriptionServiceProviderPIC, bwIGCSPNormalInvoke=bwIGCSPNormalInvoke, bwOCPNumLocalCallsBlocked=bwOCPNumLocalCallsBlocked, bwSD8GroupID=bwSD8GroupID, bwTrunkGroupIndex=bwTrunkGroupIndex, bwNumCallYellowZoneOverloadTrans=bwNumCallYellowZoneOverloadTrans, bwAnonymousCallRejectionGroupID=bwAnonymousCallRejectionGroupID, bwIGCSPTable=bwIGCSPTable, bwVMRNumSendGroupFailed=bwVMRNumSendGroupFailed, bwTrunkGroupPerTGUnreachableDestinationExceededInitialValue=bwTrunkGroupPerTGUnreachableDestinationExceededInitialValue, bwPreferredCarrierSPTable=bwPreferredCarrierSPTable, bwPTTGroupEntry=bwPTTGroupEntry, bwDPUBIGroupEntry=bwDPUBIGroupEntry, bwSCASPCallRetrieveSuccess=bwSCASPCallRetrieveSuccess, bwSessionAuditGroupEntry=bwSessionAuditGroupEntry, bwHotelingTimeout=bwHotelingTimeout, bwAlternateNumbersGroupIndex=bwAlternateNumbersGroupIndex, bwEZSPEmergencyCallsRejected=bwEZSPEmergencyCallsRejected, bwAsCallPickupServiceGroup=bwAsCallPickupServiceGroup, bwCAPStatsCallControlInfosOut=bwCAPStatsCallControlInfosOut, bwXSMonitoringExecutorCurrentPoolSize=bwXSMonitoringExecutorCurrentPoolSize, bwCAPStatsAcknowledgementsIn=bwCAPStatsAcknowledgementsIn, bwFlashCallHoldSPID=bwFlashCallHoldSPID, bwHotelingGroupAssociate=bwHotelingGroupAssociate, bwHuntGroupsSPDNHIncomingCalls=bwHuntGroupsSPDNHIncomingCalls, bwMGCPStatsMaxAnswerSignalDelay=bwMGCPStatsMaxAnswerSignalDelay, bwPTTGroupIndex=bwPTTGroupIndex, bwShInterfaceUserDataRequest=bwShInterfaceUserDataRequest, bwSipStatsSubscribeResponsesEntry=bwSipStatsSubscribeResponsesEntry, bwSessionAuditGroupNumCallsAudited=bwSessionAuditGroupNumCallsAudited, bwMusicOnHoldSPIndex=bwMusicOnHoldSPIndex, bwSipStatsOptionsResponseOuts=bwSipStatsOptionsResponseOuts, bwAsAccntCodeServiceGroup=bwAsAccntCodeServiceGroup, bwAccountCodesGroupID=bwAccountCodesGroupID, bwTrunkTerminationAttempt=bwTrunkTerminationAttempt, bwMediaCommandsTransmitted=bwMediaCommandsTransmitted, psOAMModule=psOAMModule, bwFlashCallWaitingSPNumAnswers=bwFlashCallWaitingSPNumAnswers, bwCommonCommPSStatsIndex=bwCommonCommPSStatsIndex, psBwVMRSPNumLoginFailures=psBwVMRSPNumLoginFailures, bwVMRNumForwardSendListAttempts=bwVMRNumForwardSendListAttempts, bwCommonCommXSOutputMessagesProcessed=bwCommonCommXSOutputMessagesProcessed, bwSipStatsRetryInvites=bwSipStatsRetryInvites, bwSystemGroupSPID=bwSystemGroupSPID, bwCurrentOverloadZone=bwCurrentOverloadZone, bwHuntGroupSPNumAttempts=bwHuntGroupSPNumAttempts, bwCFNASPNumPhoneDeactivations=bwCFNASPNumPhoneDeactivations, bwCallParkNumAttempts=bwCallParkNumAttempts, bwNumberOfSPUsers=bwNumberOfSPUsers, bwSipStatsRetryCancels=bwSipStatsRetryCancels, bwSipStatsMaxSetupSignalDelay=bwSipStatsMaxSetupSignalDelay, imsStats=imsStats, bwHotelingSPTable=bwHotelingSPTable, bwSequentialRingAnswered=bwSequentialRingAnswered, bwCallForwardingNoAnswerGroupID=bwCallForwardingNoAnswerGroupID, bwCommPilotCallMgrSPNumTransfer=bwCommPilotCallMgrSPNumTransfer, bwEZSPRegistrationsRejected=bwEZSPRegistrationsRejected, authentication=authentication, bwCallCenterSPIndex=bwCallCenterSPIndex, bwSystemGroupTable=bwSystemGroupTable, psOciStatsMaxGroupRequestResponseTime=psOciStatsMaxGroupRequestResponseTime, bwPSTTHWMStackTrace=bwPSTTHWMStackTrace, bwCommonCommPSProtocol=bwCommonCommPSProtocol, psOciStatsMinGroupRequestResponseTime=psOciStatsMinGroupRequestResponseTime, bwCommPilotCallMgrSPNumCallPark=bwCommPilotCallMgrSPNumCallPark, bwCotGroupID=bwCotGroupID, polycomSPTableEntry=polycomSPTableEntry, bwCallWaitingSPEntry=bwCallWaitingSPEntry, bwPolycomPhoneDirectoryNumDownloads=bwPolycomPhoneDirectoryNumDownloads, bwFlashThreeWayCallGroupNum3WC=bwFlashThreeWayCallGroupNum3WC, bwDPUBIBargeInFailure=bwDPUBIBargeInFailure, bwFamilySimRingSPID=bwFamilySimRingSPID, bwAsPsExtCallLogsGroup=bwAsPsExtCallLogsGroup, bwICPNumInterGroupBlocks=bwICPNumInterGroupBlocks, bwWSPStatsServiceUpdatesIn=bwWSPStatsServiceUpdatesIn, bwCFGNASPOverflowNoForward=bwCFGNASPOverflowNoForward, bwSubscriptionDialedGroupPIC=bwSubscriptionDialedGroupPIC, bwCallpSPMaximumNumberofSimCallsExceeded=bwCallpSPMaximumNumberofSimCallsExceeded, bwIncomingCallingPlanGroupTable=bwIncomingCallingPlanGroupTable, bwExternalCallLogsRetrievalAttempts=bwExternalCallLogsRetrievalAttempts, bwAsLastNumberRedialServiceGroup=bwAsLastNumberRedialServiceGroup, bwFlashCallHoldGroupTable=bwFlashCallHoldGroupTable, psCommonCommModule=psCommonCommModule, commonCommStats=commonCommStats, bwNbResponsesResent=bwNbResponsesResent, psShInterfaceStats=psShInterfaceStats, bwMGCPStatsCreateConnectionResponseCodeValue=bwMGCPStatsCreateConnectionResponseCodeValue, bwCommPilotCallMgrSPNumRelease=bwCommPilotCallMgrSPNumRelease, bwVAOSPEntry=bwVAOSPEntry, bwVoiceMessagingGroupID=bwVoiceMessagingGroupID, bwAutoAttendantGroupMultiMediaPromptRecorded=bwAutoAttendantGroupMultiMediaPromptRecorded, psOciStats=psOciStats, bwVMRSPNumSendGroupFailed=bwVMRSPNumSendGroupFailed, bwIPPhoneGroupNumForwards=bwIPPhoneGroupNumForwards, bwDirectedCallPickupGroupNumAttempts=bwDirectedCallPickupGroupNumAttempts, bwPTTSPEntry=bwPTTSPEntry, bwAutoAttendantGroupNumAnswers=bwAutoAttendantGroupNumAnswers, bwOCPGroupNumSpecialServices1CallsBlocked=bwOCPGroupNumSpecialServices1CallsBlocked, bwDPUBISPEntry=bwDPUBISPEntry, bwPTTGroupReject=bwPTTGroupReject, bwSequentialRingNumNoAnswer=bwSequentialRingNumNoAnswer, bwXSQueryCount=bwXSQueryCount, bwSipStatsPrackResponseOuts=bwSipStatsPrackResponseOuts, bwOutgoingCallingPlanSPID=bwOutgoingCallingPlanSPID, bwInstantConferencingGroupIndex=bwInstantConferencingGroupIndex, bwNumberOfSPGroups=bwNumberOfSPGroups, mssStats=mssStats, bwCustomRingbackUserAudioGroupAttempts=bwCustomRingbackUserAudioGroupAttempts, bwICPNumOutsideCallerBlocks=bwICPNumOutsideCallerBlocks, bwMGCPStatsCreateConnectionResponseEntry=bwMGCPStatsCreateConnectionResponseEntry, bwVPGreetingRecorded=bwVPGreetingRecorded, bwMGCPStatsNotificationRequestResponseIns=bwMGCPStatsNotificationRequestResponseIns, bwCallCapacitySPTable=bwCallCapacitySPTable, intercept=intercept, bwFaxMessagingSPTable=bwFaxMessagingSPTable, bwOCPNumPremiumServices1CallsBlocked=bwOCPNumPremiumServices1CallsBlocked, bwSystemSPTable=bwSystemSPTable, bwFamilySimRingSPTable=bwFamilySimRingSPTable, bwCallParkGroupEntry=bwCallParkGroupEntry, bwBroadWorksAnywhereSPEntry=bwBroadWorksAnywhereSPEntry, bwCallpSPEmergencyCallAttempts=bwCallpSPEmergencyCallAttempts, bwSPSubscriptionDialedServiceProviderPIC=bwSPSubscriptionDialedServiceProviderPIC, bwCustomRingbackUserAudioSPAttempts=bwCustomRingbackUserAudioSPAttempts, bwFlashCallWaitingGroupEntry=bwFlashCallWaitingGroupEntry, bwDPUBISPAttempt=bwDPUBISPAttempt, bwSelectiveCallForwardSPTable=bwSelectiveCallForwardSPTable, pmtStats=pmtStats, bwSystemInternalQueueTimeMaxTimestampLSB=bwSystemInternalQueueTimeMaxTimestampLSB, bwAHRSPIndex=bwAHRSPIndex, bwCallNotifyNumNotifications=bwCallNotifyNumNotifications, bwOCPGroupNumTransfers=bwOCPGroupNumTransfers, bwInterceptSPTransfers=bwInterceptSPTransfers, bwCallParkSPTable=bwCallParkSPTable, bwOCPSACNumSuccessfulUnlock=bwOCPSACNumSuccessfulUnlock, bwXSTTHWMValue=bwXSTTHWMValue, physicalLocation=physicalLocation, bwSipStatsMinAnswerSignalDelay=bwSipStatsMinAnswerSignalDelay, bwSeriesCompletionSPEntry=bwSeriesCompletionSPEntry, bwCustomRingbackSPTable=bwCustomRingbackSPTable, bwSCASPLocationControlActivationSuccess=bwSCASPLocationControlActivationSuccess, bwAsQueueStatsGroup=bwAsQueueStatsGroup, psOciStatsMaxSystemRequestResponseTime=psOciStatsMaxSystemRequestResponseTime, bwMessagingSPQuery=bwMessagingSPQuery, bwInstantConferencingSPEntry=bwInstantConferencingSPEntry, bwCustomRingbackUserAudioFailures=bwCustomRingbackUserAudioFailures, bwSubscriptionServiceProviderPIC=bwSubscriptionServiceProviderPIC, bwPreferredCarrierGroupEntry=bwPreferredCarrierGroupEntry, bwAutoAttendantSPIndex=bwAutoAttendantSPIndex, polycomSPIndex=polycomSPIndex, bwCommPilotCallMgrGroupNumCallPark=bwCommPilotCallMgrGroupNumCallPark, bwLocationControlSPDeactivationSuccess=bwLocationControlSPDeactivationSuccess, bwOCPNumIntlCallsBlocked=bwOCPNumIntlCallsBlocked, bwAsSelectiveCallAcceptanceServiceGroup=bwAsSelectiveCallAcceptanceServiceGroup, PYSNMP_MODULE_ID=broadsoft, bwDPUBISPIndex=bwDPUBISPIndex, bwPSMonitoringExecutorMaxPoolSize=bwPSMonitoringExecutorMaxPoolSize, bwMGCPStatsMGCPCommandResponseOuts=bwMGCPStatsMGCPCommandResponseOuts, bwSmdiInvalidResponsesReceived=bwSmdiInvalidResponsesReceived, bwSipStatsInfoIns=bwSipStatsInfoIns, flashThreeWayCall=flashThreeWayCall, bwTrunkGroupTerminationAttempt=bwTrunkGroupTerminationAttempt, bwVPGroupNumPasscodeChanged=bwVPGroupNumPasscodeChanged, bwAsAlternateNumberServiceGroup=bwAsAlternateNumberServiceGroup, bwVAOSPID=bwVAOSPID, bwTwoStageDialingGroupIndex=bwTwoStageDialingGroupIndex, bwLastNumberRedialSPID=bwLastNumberRedialSPID, bwAuthCodeNumValidations=bwAuthCodeNumValidations, bwCWSPNumPhoneCancellations=bwCWSPNumPhoneCancellations, bwCallpNetworkTerminationAttempts=bwCallpNetworkTerminationAttempts, bwSipStatsSubscribeResponsesTable=bwSipStatsSubscribeResponsesTable, bwSCAGroupID=bwSCAGroupID, bwShInterfaceRequestTimeout=bwShInterfaceRequestTimeout, bwAsAnonymousCallRejectionServiceGroup=bwAsAnonymousCallRejectionServiceGroup, bwXSTcpServersStatsIndex=bwXSTcpServersStatsIndex, bwCFGNAGroupEntry=bwCFGNAGroupEntry, bwCallRetrieveSPEntry=bwCallRetrieveSPEntry, bwCallReturnGroupEntry=bwCallReturnGroupEntry, bwCallNotifyGroupNumNotifications=bwCallNotifyGroupNumNotifications, bwTwoStageDialingSPID=bwTwoStageDialingSPID, bwCustomRingbackUserVideoGroupAttempts=bwCustomRingbackUserVideoGroupAttempts, congestionManagement=congestionManagement, bwVPGroupNumCFADestinationChanged=bwVPGroupNumCFADestinationChanged, bwCallForwardingNotReachableSPTable=bwCallForwardingNotReachableSPTable, bwCustomRingbackGroupVideoSPAttempts=bwCustomRingbackGroupVideoSPAttempts, bwSequentialRingSPAnswered=bwSequentialRingSPAnswered, bwICPSPNumOutsideCallerBlocks=bwICPSPNumOutsideCallerBlocks, bwHotelingSPAssociate=bwHotelingSPAssociate, bwMGCPStatsCreateConnectionOuts=bwMGCPStatsCreateConnectionOuts, bwCallingLineIDDeliveryBlockSPIndex=bwCallingLineIDDeliveryBlockSPIndex, bwCallParkGroupNumAttempts=bwCallParkGroupNumAttempts, bwSelectiveCallRejectionSPTable=bwSelectiveCallRejectionSPTable, bwCustomRingbackGroupAudioSPFailures=bwCustomRingbackGroupAudioSPFailures, bwAsCustomRingbackServiceGroup=bwAsCustomRingbackServiceGroup, bwSCRGroupNumRejects=bwSCRGroupNumRejects, bwSCFSPNumForwards=bwSCFSPNumForwards, bwSipStatsAckIns=bwSipStatsAckIns, bwAccountCodeSPNumAttempts=bwAccountCodeSPNumAttempts, bwCFBSPNumPhoneActivations=bwCFBSPNumPhoneActivations, bwCommPilotCallMgrGroupNumDial=bwCommPilotCallMgrGroupNumDial, bwAsAutoAttendantServiceGroup=bwAsAutoAttendantServiceGroup, flashCallHold=flashCallHold, bwFlashCallTransferNumTransfers=bwFlashCallTransferNumTransfers, bwMGCPStatsMessageRetryPercentage=bwMGCPStatsMessageRetryPercentage, bwAuthCodeSPNumValidations=bwAuthCodeSPNumValidations, bwLocationControlSPActivationSuccess=bwLocationControlSPActivationSuccess, bwCommPilotCallMgrGroupNumRelease=bwCommPilotCallMgrGroupNumRelease, bwAsCpeDeviceGroup=bwAsCpeDeviceGroup, customRingback=customRingback, bwAsVideoAddOnServiceGroup=bwAsVideoAddOnServiceGroup, bwSequentialRingGroupAnswered=bwSequentialRingGroupAnswered, bwPTTSPInvoke=bwPTTSPInvoke, bwMGCPStatsModifyConnectionResponseEntry=bwMGCPStatsModifyConnectionResponseEntry, bwNumNonCallRedZoneOverloadTrans=bwNumNonCallRedZoneOverloadTrans, bwInstantConferencingBridgeGroupName=bwInstantConferencingBridgeGroupName, bwTrunkGroupTable=bwTrunkGroupTable, voiceMessaging=voiceMessaging, smdiStats=smdiStats, bwCommPilotCallMgrSPNumConferenceHold=bwCommPilotCallMgrSPNumConferenceHold, bwPSMonitoringExecutorEntry=bwPSMonitoringExecutorEntry, bwDnsQueryTimeMax=bwDnsQueryTimeMax, bwAlternateNumbersSPID=bwAlternateNumbersSPID, bwMGCPStatsDeleteAgentConnectionOuts=bwMGCPStatsDeleteAgentConnectionOuts, bwFlashCallWaitingGroupTable=bwFlashCallWaitingGroupTable, bwVMRNumSendFailed=bwVMRNumSendFailed, bwNSqueryRequestsRetransmitted=bwNSqueryRequestsRetransmitted, bwMGCPStatsAuditConnectionResponseEntry=bwMGCPStatsAuditConnectionResponseEntry, bwMGCPStatsModifyConnectionOuts=bwMGCPStatsModifyConnectionOuts, bwXSMonitoringExecutorNbTasksRun=bwXSMonitoringExecutorNbTasksRun, bwSipStatsSubscribeResponseIns=bwSipStatsSubscribeResponseIns, bwCommonCommXSInterface=bwCommonCommXSInterface, bwEZGroupEntry=bwEZGroupEntry, bwSD8GroupEntry=bwSD8GroupEntry, bwCallCenterGroupID=bwCallCenterGroupID, bwCNAMQueriesTimeout=bwCNAMQueriesTimeout, bwSystemSPID=bwSystemSPID, bwTrunkGroupPerTGBurstingMaxOutgoingActiveCalls=bwTrunkGroupPerTGBurstingMaxOutgoingActiveCalls, sharedCallAppearance=sharedCallAppearance, bwPSMonitoringExecutorTable=bwPSMonitoringExecutorTable, bwSD100GroupEntry=bwSD100GroupEntry, bwSipStatsOtherResponsesEntry=bwSipStatsOtherResponsesEntry, bwPMTNumLoggerOpen=bwPMTNumLoggerOpen, bwCommPilotCallManagerGroupID=bwCommPilotCallManagerGroupID, bwSystemGroupEntry=bwSystemGroupEntry, smtpModule=smtpModule, bwSD100SPCall=bwSD100SPCall, bwCallCapacityGroupNumCallsBlocked=bwCallCapacityGroupNumCallsBlocked)
mibBuilder.exportSymbols("BW-BroadworksApplicationServer", bwIMSUnsuccessfulDownLoadAttempts=bwIMSUnsuccessfulDownLoadAttempts, bwVMRCallBackAttempts=bwVMRCallBackAttempts, bwCommonCommPSInterface=bwCommonCommPSInterface, bwDnsQueryTimeMaxTimestampMSB=bwDnsQueryTimeMaxTimestampMSB, bwMGCPStatsRestartInProgressResponseCodeValue=bwMGCPStatsRestartInProgressResponseCodeValue, bwFaxMessagingSPReceptionFailure=bwFaxMessagingSPReceptionFailure, bwSessionAuditNumEndpointsAudited=bwSessionAuditNumEndpointsAudited, psBwVMRSPIndex=psBwVMRSPIndex, thirdPartyVMail=thirdPartyVMail, psOCIReportingBackLogMessageSent=psOCIReportingBackLogMessageSent, bwHuntGroupsSPIndex=bwHuntGroupsSPIndex, bwOCPGroupNumTollFreeCallsBlocked=bwOCPGroupNumTollFreeCallsBlocked, bwCommPilotCallMgrSPNumConferenceAnswer=bwCommPilotCallMgrSPNumConferenceAnswer, bwCallReturnSPIndex=bwCallReturnSPIndex, bwInterceptSPIndex=bwInterceptSPIndex, bwXSMonitoringExecutorTable=bwXSMonitoringExecutorTable, bwCustomRingbackGroupVideoSPFailures=bwCustomRingbackGroupVideoSPFailures, bwOCPSACSPNumUnsuccessfulLock=bwOCPSACSPNumUnsuccessfulLock, bwOCPSPNumPremiumServices1CallsBlocked=bwOCPSPNumPremiumServices1CallsBlocked, bwPSTcpServersName=bwPSTcpServersName, bwBroadWorksAnywhereGroupTable=bwBroadWorksAnywhereGroupTable, bwCallForwardingBusyGroupIndex=bwCallForwardingBusyGroupIndex, dpubi=dpubi, bwSequentialRingGroupAbandoned=bwSequentialRingGroupAbandoned, bwAsHuntGroupServiceGroup=bwAsHuntGroupServiceGroup, bwCallParkSPNumRetrieveFailures=bwCallParkSPNumRetrieveFailures, bwIPPhoneNumForwards=bwIPPhoneNumForwards, bwCallRetrieveSPIndex=bwCallRetrieveSPIndex, nrsModule=nrsModule, bwCFGNASPIndex=bwCFGNASPIndex, bwVPNumPasscodeChanged=bwVPNumPasscodeChanged, bwGroupNoIndicationServiceProviderPIC=bwGroupNoIndicationServiceProviderPIC, bwICSPNumAttempts=bwICSPNumAttempts, bwLastNumberRedialSPIndex=bwLastNumberRedialSPIndex, bwShInterfaceRequestsIn=bwShInterfaceRequestsIn, bwAsExtCallLogsGroup=bwAsExtCallLogsGroup, psBwVMRGroupTable=psBwVMRGroupTable, bwCongestionManagementNeighborSubscribeNotifyOut=bwCongestionManagementNeighborSubscribeNotifyOut, bwPSTcpServersNbBytesReceivedSecure=bwPSTcpServersNbBytesReceivedSecure, bwCNAMQueriesFailed=bwCNAMQueriesFailed, services=services, bwRealtimeAccountingRequestsTransmitted=bwRealtimeAccountingRequestsTransmitted, bwExternalCallLogsTransmitted=bwExternalCallLogsTransmitted, flashConsultation=flashConsultation, bwDPUBIGroupFailure=bwDPUBIGroupFailure, bwCallRetrieveSPSuccess=bwCallRetrieveSPSuccess, bwMGCPStatsDeleteAgentConnectionResponseIns=bwMGCPStatsDeleteAgentConnectionResponseIns, bwAlternateNumbersUsage=bwAlternateNumbersUsage, bwAsFlash3wcServiceGroup=bwAsFlash3wcServiceGroup, bwNumberOfSPDNAssigned=bwNumberOfSPDNAssigned, bwTimeLastDiscardedMessage=bwTimeLastDiscardedMessage, bwAsInterceptServiceGroup=bwAsInterceptServiceGroup, bwFaxMessagingSPPrintingFailure=bwFaxMessagingSPPrintingFailure, bwSeriesCompletionGroupID=bwSeriesCompletionGroupID, bwXSTcpServersNbBytesSentSecure=bwXSTcpServersNbBytesSentSecure, bwMediaNotificationsReceived=bwMediaNotificationsReceived, bwFaxMessagingPrintingFailure=bwFaxMessagingPrintingFailure, bwOCPGroupNumOperatorAssistedCallsBlocked=bwOCPGroupNumOperatorAssistedCallsBlocked, bwCommonCommXSStatsTable=bwCommonCommXSStatsTable, bwCAPStatsRegisterAuthentications=bwCAPStatsRegisterAuthentications, bwSPSubscriptionDialedGroupPIC=bwSPSubscriptionDialedGroupPIC, bwSessionAuditGroupNumEndpointsFailedAudit=bwSessionAuditGroupNumEndpointsFailedAudit, bwCFASPNumForwarded=bwCFASPNumForwarded, bwSelectiveCallAcceptanceGroupEntry=bwSelectiveCallAcceptanceGroupEntry, bwBACallOriginations=bwBACallOriginations, bwXSMonitoringExecutorTaskQueueSize=bwXSMonitoringExecutorTaskQueueSize, bwCFBNumPhoneActivations=bwCFBNumPhoneActivations, bwOutgoingCallingPlanGroupTable=bwOutgoingCallingPlanGroupTable, bwPSAvgQueryTime=bwPSAvgQueryTime, bwCommonCommPSAcceptedInboundConnections=bwCommonCommPSAcceptedInboundConnections, psOciStatsNbUpdateRequestFailures=psOciStatsNbUpdateRequestFailures, bwOCPSACSPNumSuccessfulUnlock=bwOCPSACSPNumSuccessfulUnlock, pushToTalk=pushToTalk, bwSimRingPersonalGroupID=bwSimRingPersonalGroupID, bwInterceptSPGroupOriginationInvocations=bwInterceptSPGroupOriginationInvocations, bwOCPGroupNumOutsideGroupTransferBlocks=bwOCPGroupNumOutsideGroupTransferBlocks, bwNumYellowZoneOverloadTrans=bwNumYellowZoneOverloadTrans, bwVMRGroupCallBackFailures=bwVMRGroupCallBackFailures, bwTrunkSPID=bwTrunkSPID, bwMGCPStatsRestartInProgressResponseTable=bwMGCPStatsRestartInProgressResponseTable, bwFlashThreeWayCallSPNum3WC=bwFlashThreeWayCallSPNum3WC, bwVMRGroupNumLoginAttempts=bwVMRGroupNumLoginAttempts, psSystemInternalQueueTimeMin=psSystemInternalQueueTimeMin, bwVPCGroupCall=bwVPCGroupCall, bwCallParkSPNumFailures=bwCallParkSPNumFailures, bwHotelingSPID=bwHotelingSPID, psBwVMRSPID=psBwVMRSPID, psOciStatsNbReportingAclViolations=psOciStatsNbReportingAclViolations, bwCFBSPNumForwarded=bwCFBSPNumForwarded, bwFamilySimRingGroupIndex=bwFamilySimRingGroupIndex, automaticHoldRetrieve=automaticHoldRetrieve, bwIncomingCallingPlanSPTable=bwIncomingCallingPlanSPTable, bwSMTPPrimaryUnSuccessfulEmailSendAttempts=bwSMTPPrimaryUnSuccessfulEmailSendAttempts, bwDPUBISPBargeIn=bwDPUBISPBargeIn, bwPhysicalLocationSPIndex=bwPhysicalLocationSPIndex, bwCommonCommPSOutputCommunicationErrors=bwCommonCommPSOutputCommunicationErrors, bwSD100SPID=bwSD100SPID, bwSipStatsCancelResponseOuts=bwSipStatsCancelResponseOuts, bwVMRGroupNumReplySendAttempts=bwVMRGroupNumReplySendAttempts, bwLocationControlGroupID=bwLocationControlGroupID, bwGroupNonSubscriptionDialedUserPIC=bwGroupNonSubscriptionDialedUserPIC, bwCommPilotCallMgrNumGroupCallPark=bwCommPilotCallMgrNumGroupCallPark, bwSipStatsMaxAnswerSignalDelay=bwSipStatsMaxAnswerSignalDelay, bwCustomRingbackGroupVideoAttempts=bwCustomRingbackGroupVideoAttempts, bwCallNotifyGroupEntry=bwCallNotifyGroupEntry, bwLocationControlGroupDeactivationSuccess=bwLocationControlGroupDeactivationSuccess, bwNumRedZoneOverloadTrans=bwNumRedZoneOverloadTrans, bwAsAutomaticHoldAndRetrieveServiceGroup=bwAsAutomaticHoldAndRetrieveServiceGroup, bwMaliciousCallTraceSPEntry=bwMaliciousCallTraceSPEntry, bwShInterfacePublicIdentityRefreshFailure=bwShInterfacePublicIdentityRefreshFailure, bwAsThirdPartyMWIControlServiceGroup=bwAsThirdPartyMWIControlServiceGroup, bwDiversionInhibitorGroupIndex=bwDiversionInhibitorGroupIndex, bwAnonymousCallRejectionSPTable=bwAnonymousCallRejectionSPTable, bwCallPickupGroupID=bwCallPickupGroupID, bwFlashConsultationSPEntry=bwFlashConsultationSPEntry, bwAsDirectedCallPickupServiceGroup=bwAsDirectedCallPickupServiceGroup, bwRingTimeoutGroupNumExpires=bwRingTimeoutGroupNumExpires, bwNumberOfUsers=bwNumberOfUsers, bwAsPushToTalkServiceGroup=bwAsPushToTalkServiceGroup, bwSMTPTotalPrimaryEmailSendAttempts=bwSMTPTotalPrimaryEmailSendAttempts, bwMGCPStatsNotificationRequestResponseCodeValue=bwMGCPStatsNotificationRequestResponseCodeValue, psRemoteXlaNbTimesConnected=psRemoteXlaNbTimesConnected, bwOCPGroupNumURLDialingCallsBlocked=bwOCPGroupNumURLDialingCallsBlocked, bwFlashCallWaitingGroupID=bwFlashCallWaitingGroupID, bwVMGroupNumBusyGreetingsPlayed=bwVMGroupNumBusyGreetingsPlayed, psOciModule=psOciModule, bwVPGroupNumAABusHoursGreetingRecorded=bwVPGroupNumAABusHoursGreetingRecorded, bwSPSubscriptionGroupPIC=bwSPSubscriptionGroupPIC, bwActivatableFeatureEntry=bwActivatableFeatureEntry, bwNbErrorsSent=bwNbErrorsSent, bwSequentialRingSPAbandoned=bwSequentialRingSPAbandoned, bwCallCapacityNumCallsBlocked=bwCallCapacityNumCallsBlocked, bwICSAGroupIndex=bwICSAGroupIndex, bwAccountCodeGroupNumPerCallAttempts=bwAccountCodeGroupNumPerCallAttempts, psTcpStats=psTcpStats, bwHuntGroupNumBusy=bwHuntGroupNumBusy, bwAsBusinessTrunkGroupServiceGroup=bwAsBusinessTrunkGroupServiceGroup, bwAsCallReturnServiceGroup=bwAsCallReturnServiceGroup, bwSipStatsPrackResponseCodeValue=bwSipStatsPrackResponseCodeValue, bwAuthCodeGroupNumAttempts=bwAuthCodeGroupNumAttempts, bwMessagingGroupQueryNoUser=bwMessagingGroupQueryNoUser, bwIMSNumDroppedRequests=bwIMSNumDroppedRequests, bwSipStatsRegisterIns=bwSipStatsRegisterIns, bwAccountCodeSPNumPerCallAttempts=bwAccountCodeSPNumPerCallAttempts, bwDndPhoneActivations=bwDndPhoneActivations, bwFlashCallTransferGroupEntry=bwFlashCallTransferGroupEntry, bwVPCCall=bwVPCCall, bwFamilySimRingGroupTable=bwFamilySimRingGroupTable, bwCFNRcGroupDestinationChanged=bwCFNRcGroupDestinationChanged, bwVMGroupMultiMediaGreetingRecorded=bwVMGroupMultiMediaGreetingRecorded, bwTrunkSPTable=bwTrunkSPTable, bwICSAGroupFlashDigitsDetected=bwICSAGroupFlashDigitsDetected, bwSipStatsInfoOuts=bwSipStatsInfoOuts, bwCommPilotCallMgrNumTransfer=bwCommPilotCallMgrNumTransfer, bwCFANumForwarded=bwCFANumForwarded, bwAsSmdiGroup=bwAsSmdiGroup, bwXSTTHWMStackTrace=bwXSTTHWMStackTrace, bwVMRNumForwardSendAttempts=bwVMRNumForwardSendAttempts, bwCFNADestinationChanged=bwCFNADestinationChanged, bwRealtimeAccountingRequestsDropped=bwRealtimeAccountingRequestsDropped, psPerNbFailedTransactions=psPerNbFailedTransactions, psSystemModule=psSystemModule, bwSPNonSubscriptionDialedServiceProviderPIC=bwSPNonSubscriptionDialedServiceProviderPIC, bwXSMonitoringExecutorEntry=bwXSMonitoringExecutorEntry, simRingPersonal=simRingPersonal, smppStats=smppStats, bwCommonCommXSAcceptedOutboundConnections=bwCommonCommXSAcceptedOutboundConnections, bwCallpActiveCallsAsPercentOfLicense=bwCallpActiveCallsAsPercentOfLicense, bwVMRNumLoginAttempts=bwVMRNumLoginAttempts, bwSimRingPersonalSPID=bwSimRingPersonalSPID, psOssModule=psOssModule, bwSipStatsNotifyResponsesEntry=bwSipStatsNotifyResponsesEntry, bwVMRSPNumNoAnswerGreetingsRecorded=bwVMRSPNumNoAnswerGreetingsRecorded, bwPSAvgRowsUpdated=bwPSAvgRowsUpdated, bwInstantConferencingGroupTable=bwInstantConferencingGroupTable, bwVMRSPCallBackFailures=bwVMRSPCallBackFailures, bwCallParkNumFailures=bwCallParkNumFailures, bwCallPickupGroupNumAttempts=bwCallPickupGroupNumAttempts, bwSystemInternalQueueTimeMax=bwSystemInternalQueueTimeMax, bwSessionAuditSPNumEndpointsFailedAudit=bwSessionAuditSPNumEndpointsFailedAudit, bwCallForwardingAlwaysGroupID=bwCallForwardingAlwaysGroupID, wspModule=wspModule, bwOCPGroupNumUnsuccessfulAuthorizations=bwOCPGroupNumUnsuccessfulAuthorizations, bwMusicOnHoldGroupEntry=bwMusicOnHoldGroupEntry, bwCFNRcNumPhoneActivations=bwCFNRcNumPhoneActivations, bwSequentialRingAbandoned=bwSequentialRingAbandoned, bwAHRSPEntry=bwAHRSPEntry, bwSipStatsInfoResponseIns=bwSipStatsInfoResponseIns, bwCAPMonitoringUsersResponses=bwCAPMonitoringUsersResponses, bwCFNANumPhoneActivations=bwCFNANumPhoneActivations, bwNonSubscriptionDialedUserPIC=bwNonSubscriptionDialedUserPIC, bwCommPilotCallMgrGroupNumConferenceAdd=bwCommPilotCallMgrGroupNumConferenceAdd, psReservedCounter=psReservedCounter, bwTwoStageDialingGroupID=bwTwoStageDialingGroupID, bwCallPickupSPIndex=bwCallPickupSPIndex, bwSeriesCompletionGroupIndex=bwSeriesCompletionGroupIndex, bwCallCenterReportEmailed=bwCallCenterReportEmailed, bwCFBSPDestinationChanged=bwCFBSPDestinationChanged, directedCallPickup=directedCallPickup, psReservedModule=psReservedModule, bwMGCPStatsMinAnswerSignalDelay=bwMGCPStatsMinAnswerSignalDelay, bwAHRSPID=bwAHRSPID, bwAuthenticationSPEntry=bwAuthenticationSPEntry, bwHotelingGroupDisassociate=bwHotelingGroupDisassociate, bwIMSAvgThreads=bwIMSAvgThreads, bwCommPilotCallMgrNumHold=bwCommPilotCallMgrNumHold, bwMaliciousCallTraceSPTable=bwMaliciousCallTraceSPTable, bwFlashCallHoldGroupNumActivations=bwFlashCallHoldGroupNumActivations, broadsoft=broadsoft, bwTrunkGroupOriginationBlocked=bwTrunkGroupOriginationBlocked, bwSipStatsInfoResponseOuts=bwSipStatsInfoResponseOuts, bwHuntGroupsGroupNumBusy=bwHuntGroupsGroupNumBusy, bwSPSubscriptionDialedUserPIC=bwSPSubscriptionDialedUserPIC, bwCommPilotCallManagerGroupEntry=bwCommPilotCallManagerGroupEntry, internalStats=internalStats, bwCFBNumForwarded=bwCFBNumForwarded, bwMaliciousCallTraceApplied=bwMaliciousCallTraceApplied, bwSipStatsCancelResponseIns=bwSipStatsCancelResponseIns, bwCallParkNumRetrieveAttempts=bwCallParkNumRetrieveAttempts, bwCallReturnGroupID=bwCallReturnGroupID, bwCongestionManagementNeighborIndex=bwCongestionManagementNeighborIndex, xsRemoteXlaNbTimesConnected=xsRemoteXlaNbTimesConnected, bwPTTSPID=bwPTTSPID, bwCommPilotCallMgrGroupNumCallParkRetrieve=bwCommPilotCallMgrGroupNumCallParkRetrieve, bwSPMultiMediaMsgDeposit=bwSPMultiMediaMsgDeposit, bwPhysicalLocationGroupEntry=bwPhysicalLocationGroupEntry, bwVMRSPNumForwardSendGroupAttempts=bwVMRSPNumForwardSendGroupAttempts, bwCAPStatsInfoRequests=bwCAPStatsInfoRequests, bwPriorityAlertGroupIndex=bwPriorityAlertGroupIndex, bwOCPSPNumSuccessfulAuthorizations=bwOCPSPNumSuccessfulAuthorizations, bwAuthenticationGroupTable=bwAuthenticationGroupTable, bwCallingLineIDDeliveryBlockGroupIndex=bwCallingLineIDDeliveryBlockGroupIndex, bwLastNumberRedialGroupEntry=bwLastNumberRedialGroupEntry, psDatabaseStats=psDatabaseStats, bwVMRGroupNumComposeSendGroupAttempts=bwVMRGroupNumComposeSendGroupAttempts, bwSD8SPNumTimesDialed=bwSD8SPNumTimesDialed, bwPriorityAlertSPID=bwPriorityAlertSPID, bwMGCPStatsAuditEndpointResponseEntry=bwMGCPStatsAuditEndpointResponseEntry, bwIGCGroupTable=bwIGCGroupTable, bwFaxMessagingGroupEntry=bwFaxMessagingGroupEntry, bwSCAGroupLocationControlActivationSuccess=bwSCAGroupLocationControlActivationSuccess, bwIncomingCallingPlanSPIndex=bwIncomingCallingPlanSPIndex, bwCallpMaximumNumberofSimVideoCallsExceeded=bwCallpMaximumNumberofSimVideoCallsExceeded, bwACBSPExpired=bwACBSPExpired, bwNbRequestsResent=bwNbRequestsResent, bwCallCapacityNumCallsAttempted=bwCallCapacityNumCallsAttempted, bwVMRSPNumReplySendAttempts=bwVMRSPNumReplySendAttempts, bwOCPSPNumOutsideGroupTransferBlocks=bwOCPSPNumOutsideGroupTransferBlocks, bwAsFlashCallXferServiceGroup=bwAsFlashCallXferServiceGroup, sipStats=sipStats, bwFlashThreeWayCallGroupID=bwFlashThreeWayCallGroupID, bwLocationControlGroup=bwLocationControlGroup, bwAccountCodesSPTable=bwAccountCodesSPTable, redundancyModule=redundancyModule)
mibBuilder.exportSymbols("BW-BroadworksApplicationServer", bwVMRGroupNumForwardSendAttempts=bwVMRGroupNumForwardSendAttempts, bwSeriesCompletionSPNumBusy=bwSeriesCompletionSPNumBusy, bwVMRGroupNumPersonalizedNamesRecorded=bwVMRGroupNumPersonalizedNamesRecorded, bwLocationControlSPIndex=bwLocationControlSPIndex, bwCommonCommPSOutputMessagesProcessed=bwCommonCommPSOutputMessagesProcessed, bwICOutdialNumAttempts=bwICOutdialNumAttempts, bwOCPSPNumChargeableDirAssistCallsBlocked=bwOCPSPNumChargeableDirAssistCallsBlocked, bwAutoAttendantGroupTable=bwAutoAttendantGroupTable, bwInterceptTransfers=bwInterceptTransfers, bwCFGNAGroupOverflowNoForward=bwCFGNAGroupOverflowNoForward, bwSessionAuditSPTable=bwSessionAuditSPTable, bwSipStatsCancelResponsesEntry=bwSipStatsCancelResponsesEntry, bwSipStatsNotifyOuts=bwSipStatsNotifyOuts, bwFlashConsultationSPTable=bwFlashConsultationSPTable, bwCallForwardingAlwaysSPIndex=bwCallForwardingAlwaysSPIndex, bwAsHotelingServiceGroup=bwAsHotelingServiceGroup, bwPSTcpServersNbConnectionsClosed=bwPSTcpServersNbConnectionsClosed, bwAsSeriesCompletionServiceGroup=bwAsSeriesCompletionServiceGroup, bwCommPilotCallMgrSPNumGroupCallPark=bwCommPilotCallMgrSPNumGroupCallPark, bwCallCenterSPID=bwCallCenterSPID, bwMGCPStatsMGCPCommandResponseIns=bwMGCPStatsMGCPCommandResponseIns, bwMGCPStatsMaxDialToneDelay=bwMGCPStatsMaxDialToneDelay, bwFamilySimRingGroupNumBusy=bwFamilySimRingGroupNumBusy, executionServer=executionServer, autoAttendant=autoAttendant, bwXSTcpServersNbConnectionsInitiated=bwXSTcpServersNbConnectionsInitiated, bwFlashCallHoldSPIndex=bwFlashCallHoldSPIndex, bwThirdPartyVoiceMailSPNbOfCFWNoAnswer=bwThirdPartyVoiceMailSPNbOfCFWNoAnswer, bwAutoAttendantNumTransfers=bwAutoAttendantNumTransfers, bwPriorityAlertGroupID=bwPriorityAlertGroupID, psConcurrentStats=psConcurrentStats, bwPhysicalLocationGroupID=bwPhysicalLocationGroupID, bwRingTimeoutNumExpires=bwRingTimeoutNumExpires, bwVAOOutgoingSuccess=bwVAOOutgoingSuccess, bwSequentialRingSPTable=bwSequentialRingSPTable, bwMGCPStatsNotificationRequestResponseEntry=bwMGCPStatsNotificationRequestResponseEntry, bwCallParkGroupID=bwCallParkGroupID, bwCotActivation=bwCotActivation, familySimRing=familySimRing, bwSipStatsByeResponsesTable=bwSipStatsByeResponsesTable, bwSimRingPersonalSPNumAttempts=bwSimRingPersonalSPNumAttempts, bwECNWarningAnnouncementAttempts=bwECNWarningAnnouncementAttempts, bwCallPickupSPID=bwCallPickupSPID, bwVMGroupNumNoAnswerGreetingsPlayed=bwVMGroupNumNoAnswerGreetingsPlayed, bwIPPhoneGroupIndex=bwIPPhoneGroupIndex, xsRemoteXla=xsRemoteXla, bwSipStatsInfoResponsesTable=bwSipStatsInfoResponsesTable, bwMGCPStatsNotifyResponseOuts=bwMGCPStatsNotifyResponseOuts, bwMCPCommandsRetransmitted=bwMCPCommandsRetransmitted, bwCommPilotCallMgrNumCallPark=bwCommPilotCallMgrNumCallPark, bwSequentialRingGroupNumAttempts=bwSequentialRingGroupNumAttempts, bwCallNotifySPEntry=bwCallNotifySPEntry, bwMGCPStatsDialToneDelay=bwMGCPStatsDialToneDelay, bwVMGroupNumMessagesLeft=bwVMGroupNumMessagesLeft, bwFlashCallTransferSPID=bwFlashCallTransferSPID, bwSystemGroupName=bwSystemGroupName, bwMessagingSPQueryNoMailbox=bwMessagingSPQueryNoMailbox, bwSCALocationControlActivationSuccess=bwSCALocationControlActivationSuccess, bwOCPSPNumUnknownCallsBlocked=bwOCPSPNumUnknownCallsBlocked, bwCommPilotCallMgrSPNumTransferCC=bwCommPilotCallMgrSPNumTransferCC, bwOCPSACSPNumSuccessfulLock=bwOCPSACSPNumSuccessfulLock, psTtNbBackdoorUpdates=psTtNbBackdoorUpdates, bwSelectiveCallAcceptanceSPTable=bwSelectiveCallAcceptanceSPTable, bwCFGNASPExternalForward=bwCFGNASPExternalForward, bwExtEmergencyRtgQueryFailure=bwExtEmergencyRtgQueryFailure, bwXSMonitoringExecutorLongestTaskMs=bwXSMonitoringExecutorLongestTaskMs, bwXSTTHWMName=bwXSTTHWMName, bwECNExpensiveCallReleased=bwECNExpensiveCallReleased, bwCongestionManagementNeighborOptionsIn=bwCongestionManagementNeighborOptionsIn, bwCallpUserOriginationAttempts=bwCallpUserOriginationAttempts, psOciStatsGroupRequestResponseTime=psOciStatsGroupRequestResponseTime, bwCFGNAGroupExternalForward=bwCFGNAGroupExternalForward, bwSipStatsNotifyResponseCodeValue=bwSipStatsNotifyResponseCodeValue, bwVPSPNumAAAfterHoursGreetingRecorded=bwVPSPNumAAAfterHoursGreetingRecorded, psOciStatsRequestResponseTime=psOciStatsRequestResponseTime, mcpStats=mcpStats, bwAsSoapGroup=bwAsSoapGroup, bwDiversionInhibitorSPEntry=bwDiversionInhibitorSPEntry, bwCallForwardingNotReachableSPEntry=bwCallForwardingNotReachableSPEntry, bwCallPickupNumFailures=bwCallPickupNumFailures, bwMGCPStatsAuditEndpointResponseTable=bwMGCPStatsAuditEndpointResponseTable, bwACBSPID=bwACBSPID, bwMGCPStatsMGCPResponseOuts=bwMGCPStatsMGCPResponseOuts, bwSelectiveCallRejectionGroupEntry=bwSelectiveCallRejectionGroupEntry, bwSD8SPTable=bwSD8SPTable, bwSPNoIndicationGroupPIC=bwSPNoIndicationGroupPIC, bwSCASPTable=bwSCASPTable, bwInterceptGroupGroupTerminationInvocations=bwInterceptGroupGroupTerminationInvocations, bwDiversionInhibitorSPID=bwDiversionInhibitorSPID, bwCAPStatsInfoResponses=bwCAPStatsInfoResponses, bwOutgoingCallingPlanGroupEntry=bwOutgoingCallingPlanGroupEntry, psSystemInternalQueueLengthAvg=psSystemInternalQueueLengthAvg, bwSystemInternalQueueEntry=bwSystemInternalQueueEntry, bwSD100Call=bwSD100Call, bwAsCompilotCallMgrServiceGroup=bwAsCompilotCallMgrServiceGroup, bwCallForwardingAlwaysGroupIndex=bwCallForwardingAlwaysGroupIndex, bwCAPStatsRegisterRequests=bwCAPStatsRegisterRequests, bwIGCGroupEntry=bwIGCGroupEntry, psSystemInternalQueueTimeAvg=psSystemInternalQueueTimeAvg, bwDPUBISPBargeInFailure=bwDPUBISPBargeInFailure, bwSOAPMaxServiceTime=bwSOAPMaxServiceTime, bwVAOGroupIncomingSuccess=bwVAOGroupIncomingSuccess, bwMusicOnHoldGroupID=bwMusicOnHoldGroupID, bwCommPilotCallMgrNumDial=bwCommPilotCallMgrNumDial, bwCallForwardingAlwaysSPEntry=bwCallForwardingAlwaysSPEntry, bwCFGNAGroupID=bwCFGNAGroupID, bwCallCapacitySPNumCallsBlocked=bwCallCapacitySPNumCallsBlocked, bwCustomRingbackGroupAudioGroupAttempts=bwCustomRingbackGroupAudioGroupAttempts, bwCallReturnSPID=bwCallReturnSPID, bwVMRGroupNumComposeSendListAttempts=bwVMRGroupNumComposeSendListAttempts, bwSimRingPersonalNumBusy=bwSimRingPersonalNumBusy, bwSD100SPEntry=bwSD100SPEntry, bwFlashThreeWayCallNum3WC=bwFlashThreeWayCallNum3WC, bwOCPSACNumUnsuccessfulLock=bwOCPSACNumUnsuccessfulLock, bwCFNASPNumForwarded=bwCFNASPNumForwarded, bwFlashThreeWayCallGroupEntry=bwFlashThreeWayCallGroupEntry, bwInstantConferencingYesterdaysPeakUsage=bwInstantConferencingYesterdaysPeakUsage, bwIGCSPEntry=bwIGCSPEntry, bwMGCPStatsNotificationRequestOuts=bwMGCPStatsNotificationRequestOuts, bwHotelingGroupTimeout=bwHotelingGroupTimeout, bwAsCallNotifyServiceGroup=bwAsCallNotifyServiceGroup, bwSPMWISMSSent=bwSPMWISMSSent, bwVAOSPIncomingSuccess=bwVAOSPIncomingSuccess, bwSelectiveCallForwardGroupIndex=bwSelectiveCallForwardGroupIndex, bwThirdPartyVMailSPID=bwThirdPartyVMailSPID, psOciStatsSystemRequestResponseTime=psOciStatsSystemRequestResponseTime, cpeDevicesModule=cpeDevicesModule, bwSimRingPersonalGroupIndex=bwSimRingPersonalGroupIndex, bwCFAGroupNumPhoneDeactivations=bwCFAGroupNumPhoneDeactivations, bwHuntGroupsSPID=bwHuntGroupsSPID, bwOCPSPNumTollCallsBlocked=bwOCPSPNumTollCallsBlocked, psOciStatsMaxSystemRequestName=psOciStatsMaxSystemRequestName, bwRingTimeoutSPEntry=bwRingTimeoutSPEntry, bwExternalCustomRingbackGroupFailures=bwExternalCustomRingbackGroupFailures, bwDPUBIFailure=bwDPUBIFailure, bwCFNRcGroupNumPhoneActivations=bwCFNRcGroupNumPhoneActivations, bwFaxMessagingPrinted=bwFaxMessagingPrinted, bwShInterfaceResponsesOut=bwShInterfaceResponsesOut, bwMGCPStatsNotificationRequestResponseTable=bwMGCPStatsNotificationRequestResponseTable, bwXSTcpServersNbConnectionsClosed=bwXSTcpServersNbConnectionsClosed, bwSD8SPIndex=bwSD8SPIndex, bwSystemName=bwSystemName, bwSipStatsSubscribeResponseOuts=bwSipStatsSubscribeResponseOuts, bwSequentialRingActivations=bwSequentialRingActivations, huntGroups=huntGroups, bwVoiceMessagingGroupTable=bwVoiceMessagingGroupTable, bwMGCPStatsDeleteGatewayConnectionResponseOuts=bwMGCPStatsDeleteGatewayConnectionResponseOuts, bwCommPilotCallMgrGroupNumTransferCC=bwCommPilotCallMgrGroupNumTransferCC, bwTrunkGroupPerTGMaxIncomingActiveCalls=bwTrunkGroupPerTGMaxIncomingActiveCalls, bwSystemInternalQueueTimeMaxTimestamp=bwSystemInternalQueueTimeMaxTimestamp, bwNumberOfGroupUsers=bwNumberOfGroupUsers, bwPSTTHWMEntry=bwPSTTHWMEntry, bwFamilySimRingGroupEntry=bwFamilySimRingGroupEntry, bwXSUpdateCount=bwXSUpdateCount, bwRingTimeoutSPIndex=bwRingTimeoutSPIndex, bwSequentialRingSPIndex=bwSequentialRingSPIndex, bwCommPilotCallMgrNumConferenceRelease=bwCommPilotCallMgrNumConferenceRelease, bwCommPilotCallMgrNumConferenceAdd=bwCommPilotCallMgrNumConferenceAdd, bwCFGNASPTable=bwCFGNASPTable, bwACBSPStarted=bwACBSPStarted, bwVMSPGreetingRecorded=bwVMSPGreetingRecorded, bwMGCPStatsMGCPCommandResponseTable=bwMGCPStatsMGCPCommandResponseTable, bwIMSMaxThreads=bwIMSMaxThreads, psOciStatsSystemRequestsPerHour=psOciStatsSystemRequestsPerHour, bwSPSubscriptionServiceProviderPIC=bwSPSubscriptionServiceProviderPIC, bwDnsStatsQueryTimeouts=bwDnsStatsQueryTimeouts, bwAsOcpServiceGroup=bwAsOcpServiceGroup, bwCustomRingbackGroupAudioFailures=bwCustomRingbackGroupAudioFailures, bwIGCGroupPushToTalkInvoke=bwIGCGroupPushToTalkInvoke, bwDoNotDisturbSPEntry=bwDoNotDisturbSPEntry, bwAnonymousCallRejectionSPEntry=bwAnonymousCallRejectionSPEntry, bwMGCPStatsDeleteConnectionResponseIns=bwMGCPStatsDeleteConnectionResponseIns, bwSelectiveCallAcceptanceGroupID=bwSelectiveCallAcceptanceGroupID, bwPSTcpServersNbBytesSentSecure=bwPSTcpServersNbBytesSentSecure, bwCFGNAGroupTable=bwCFGNAGroupTable, bwLocationControlGroupActivationSuccess=bwLocationControlGroupActivationSuccess, bwFlashThreeWayCallSPTable=bwFlashThreeWayCallSPTable, bwInstantConferencingSPTable=bwInstantConferencingSPTable, bwOCPNumOperatorAssistedCallsBlocked=bwOCPNumOperatorAssistedCallsBlocked, bwOCPNumURLDialingCallsBlocked=bwOCPNumURLDialingCallsBlocked, mediaModule=mediaModule, bwMusicOnHoldSPTable=bwMusicOnHoldSPTable, bwTwoStageDialingInvocation=bwTwoStageDialingInvocation, bwCFGNAOverflowNoForward=bwCFGNAOverflowNoForward, bwFlashConsultationGroupNumCalls=bwFlashConsultationGroupNumCalls, bwDoNotDisturbGroupNumInvoked=bwDoNotDisturbGroupNumInvoked, bwCongestionManagementNeighborCallpRequestInRate=bwCongestionManagementNeighborCallpRequestInRate, bwMusicOnHoldNumUses=bwMusicOnHoldNumUses, bwCallPickupSPNumAttempts=bwCallPickupSPNumAttempts, bwCallForwardingBusyGroupEntry=bwCallForwardingBusyGroupEntry, bwAuthenticationSPTable=bwAuthenticationSPTable, psBwVMRNumLoginFailures=psBwVMRNumLoginFailures, bwCallCenterGroupReportEmailed=bwCallCenterGroupReportEmailed, bwCFNAGroupNumPhoneActivations=bwCFNAGroupNumPhoneActivations, bwTrunkGroupPerTGCapacityExceeded=bwTrunkGroupPerTGCapacityExceeded, mcpModule=mcpModule, bwTwoStageDialingGroupTable=bwTwoStageDialingGroupTable, callingLineIDDeliveryBlock=callingLineIDDeliveryBlock, bwSCANumAcceptances=bwSCANumAcceptances, bwCommPilotCallManagerGroupIndex=bwCommPilotCallManagerGroupIndex, bwCotSPIndex=bwCotSPIndex, psSystemInternalQueueLengthMaxTimestampMSB=psSystemInternalQueueLengthMaxTimestampMSB, bwFlashCallHoldGroupEntry=bwFlashCallHoldGroupEntry, bwSCASPLocationControlDeactivationSuccess=bwSCASPLocationControlDeactivationSuccess, bwVPGroupGreetingRecorded=bwVPGroupGreetingRecorded, bwSD100GroupTable=bwSD100GroupTable, bwCallpSPEntry=bwCallpSPEntry, ipPhone=ipPhone, bwSipStatsCancelResponsesTable=bwSipStatsCancelResponsesTable, bwSipStatsOtherOuts=bwSipStatsOtherOuts, bwACBSPMaxSession=bwACBSPMaxSession, bwFlashConsultationSPNumCalls=bwFlashConsultationSPNumCalls, bwMGCPStatsAuditEndpointResponseCodeValue=bwMGCPStatsAuditEndpointResponseCodeValue, bwPriorityAlertSPNumDistinctive=bwPriorityAlertSPNumDistinctive, bwCallForwardingBusyGroupID=bwCallForwardingBusyGroupID, bwAsTwoStageDialingServiceGroup=bwAsTwoStageDialingServiceGroup, callForwardingNoAnswer=callForwardingNoAnswer, bwSD8NumTimesProgrammed=bwSD8NumTimesProgrammed, mediaStats=mediaStats, bwSipStatsInviteIns=bwSipStatsInviteIns, bwSystemInternalQueueIndex=bwSystemInternalQueueIndex, bwBAGroupCallOriginations=bwBAGroupCallOriginations, bwSelectiveCallForwardSPIndex=bwSelectiveCallForwardSPIndex, hoteling=hoteling, bwDPUBISPExempt=bwDPUBISPExempt, bwCallParkGroupIndex=bwCallParkGroupIndex, bwCallCapacityGroupID=bwCallCapacityGroupID, bwSharedCallAppearanceGroup=bwSharedCallAppearanceGroup, bwCallRetrieveSPTable=bwCallRetrieveSPTable, bwSipStatsAckOuts=bwSipStatsAckOuts, bwCallReturnNumReturns=bwCallReturnNumReturns, instantGroupCall=instantGroupCall, bwTrunkSPEntry=bwTrunkSPEntry, bwIMSMaxSessions=bwIMSMaxSessions, bwMusicOnHoldGroupNumUses=bwMusicOnHoldGroupNumUses, bwSessionAuditGroupNumEndpointsAudited=bwSessionAuditGroupNumEndpointsAudited, bwCallForwardingAlwaysSPID=bwCallForwardingAlwaysSPID, bwCotFailureNoId=bwCotFailureNoId, bwVMRSPNumForwardSendListAttempts=bwVMRSPNumForwardSendListAttempts, bwCustomRingbackSPID=bwCustomRingbackSPID, bwInCallServiceActivationGroupEntry=bwInCallServiceActivationGroupEntry, bwDiversionInhibitorGroupID=bwDiversionInhibitorGroupID, bwAsActivatableFeatureGroup=bwAsActivatableFeatureGroup, bwCommPilotCallMgrGroupNumConferenceHold=bwCommPilotCallMgrGroupNumConferenceHold, bwPSTcpServersNbBytesSent=bwPSTcpServersNbBytesSent, bwIncomingCallingPlanSPID=bwIncomingCallingPlanSPID, bwDPUBISPTable=bwDPUBISPTable, bwVMSPNumNoAnswerGreetingsPlayed=bwVMSPNumNoAnswerGreetingsPlayed, bwNumberOfServProv=bwNumberOfServProv, trunkGroup=trunkGroup, bwOCPSPNumGroupCallsBlocked=bwOCPSPNumGroupCallsBlocked, bwSipStatsInfoResponsesEntry=bwSipStatsInfoResponsesEntry, bwCongestionManagementNeighborCapability=bwCongestionManagementNeighborCapability, bwOCPSACSPNumUnsuccessfulCodeUsage=bwOCPSACSPNumUnsuccessfulCodeUsage)
mibBuilder.exportSymbols("BW-BroadworksApplicationServer", bwCallpGroupID=bwCallpGroupID, bwPreferredCarrierSPIndex=bwPreferredCarrierSPIndex, bwCallingLineIDDeliveryBlockSPPerCallBlocks=bwCallingLineIDDeliveryBlockSPPerCallBlocks, bwCommPilotCallMgrNumTransferCC=bwCommPilotCallMgrNumTransferCC, bwVAOGroupEntry=bwVAOGroupEntry, bwVMGreetingRecorded=bwVMGreetingRecorded, bwFaxMessagingGroupIndex=bwFaxMessagingGroupIndex, bwCommPilotCallMgrGroupNumTransferVM=bwCommPilotCallMgrGroupNumTransferVM, bwTrunkGroupOriginationAttempt=bwTrunkGroupOriginationAttempt, bwDiversionInhibited=bwDiversionInhibited, bwCommonCommXSRejectedInboundConnections=bwCommonCommXSRejectedInboundConnections, bwPhysicalLocationSPID=bwPhysicalLocationSPID, bwSmdiInvalidResponsesSent=bwSmdiInvalidResponsesSent, bwMCPResourceAllocFailures=bwMCPResourceAllocFailures, soapModule=soapModule, bwIMSMaxServiceTime=bwIMSMaxServiceTime, bwCFAGroupDestinationChanged=bwCFAGroupDestinationChanged, bwCustomRingbackGroupVideoFailures=bwCustomRingbackGroupVideoFailures, bwCallCapacityGroupIndex=bwCallCapacityGroupIndex, bwAsCallpGroup=bwAsCallpGroup, bwAsMusicOnHoldServiceGroup=bwAsMusicOnHoldServiceGroup, bwSipStatsTcpFailures=bwSipStatsTcpFailures, bwSD100GroupCall=bwSD100GroupCall, bwMusicOnHoldGroupIndex=bwMusicOnHoldGroupIndex, bwCongestionManagementNeighborOptionsOut=bwCongestionManagementNeighborOptionsOut, bwPreferredCarrierGroupIndex=bwPreferredCarrierGroupIndex, psExternalCallLogsModule=psExternalCallLogsModule, bwHuntGroupsDNHIncomingCalls=bwHuntGroupsDNHIncomingCalls, bwCotSPTable=bwCotSPTable, bwSmdiBlockResponsesReceived=bwSmdiBlockResponsesReceived, bwSmdiBlockResponsesSent=bwSmdiBlockResponsesSent, bwVMRDeleteAllMsgsAttempts=bwVMRDeleteAllMsgsAttempts, bwOCPGroupNumLocalCallsBlocked=bwOCPGroupNumLocalCallsBlocked, bwCustomRingbackGroupAudioGroupFailures=bwCustomRingbackGroupAudioGroupFailures, bwExternalCallLogsQueued=bwExternalCallLogsQueued, bwSelectiveCallForwardGroupTable=bwSelectiveCallForwardGroupTable, bwCAPStatsQueueActionsIn=bwCAPStatsQueueActionsIn, bwSipStatsPrackIns=bwSipStatsPrackIns, bwSCALocationControlDeactivationSuccess=bwSCALocationControlDeactivationSuccess, bwSCAGroupNumAcceptances=bwSCAGroupNumAcceptances, bwWSPStatsServiceActionsOut=bwWSPStatsServiceActionsOut, bwICGroupOutdialNumAttempts=bwICGroupOutdialNumAttempts, bwSubscriptionGroupPIC=bwSubscriptionGroupPIC, bwMaliciousCallTraceGroupApplied=bwMaliciousCallTraceGroupApplied, bwCFANumPhoneActivations=bwCFANumPhoneActivations, bwCallpGroupMaximumCallTimeforAnsweredCallsExceeded=bwCallpGroupMaximumCallTimeforAnsweredCallsExceeded, bwHuntGroupSPNumBusy=bwHuntGroupSPNumBusy, bwLocationControlActivationSuccess=bwLocationControlActivationSuccess, bwCFGNAGroupExternalNoForward=bwCFGNAGroupExternalNoForward, bwDoNotDisturbSPID=bwDoNotDisturbSPID, bwAutoAttendantMultiMediaPromptRecorded=bwAutoAttendantMultiMediaPromptRecorded, capStats=capStats, bwHuntGroupsSPTable=bwHuntGroupsSPTable, bwIMSSuccessfulConnectionAttempts=bwIMSSuccessfulConnectionAttempts, bwICPSPNumInterGroupBlocks=bwICPSPNumInterGroupBlocks, bwAlternateNumbersGroupID=bwAlternateNumbersGroupID, bwMediaResourceAllocFailures=bwMediaResourceAllocFailures, bwSCFNumForwards=bwSCFNumForwards, bwNumberOfGroups=bwNumberOfGroups, psOCIReportingBackLogMessageSaved=psOCIReportingBackLogMessageSaved, bwAnonymousCallsNumRejected=bwAnonymousCallsNumRejected, bwOCPSPNumURLDialingCallsBlocked=bwOCPSPNumURLDialingCallsBlocked, bwVPSPGreetingRecorded=bwVPSPGreetingRecorded, bwNSqueryRequestsTransmitted=bwNSqueryRequestsTransmitted, bwCAPStatsRegisterResponsesType=bwCAPStatsRegisterResponsesType, bwAsFlashCallWaitingServiceGroup=bwAsFlashCallWaitingServiceGroup, bwFaxMessagingGroupTable=bwFaxMessagingGroupTable, bwCustomRingbackGroupAudioSPAttempts=bwCustomRingbackGroupAudioSPAttempts, bwSmdiOutgoingMWIDeactivationRequests=bwSmdiOutgoingMWIDeactivationRequests, bwDeviceTypeSystemEntry=bwDeviceTypeSystemEntry, bwSubscriptionDialedUserPIC=bwSubscriptionDialedUserPIC, bwSipStatsRegisterResponseCodeValue=bwSipStatsRegisterResponseCodeValue, bwXSMonitoringExecutorLongestTaskName=bwXSMonitoringExecutorLongestTaskName, dnsStats=dnsStats, bwDirectedCallPickupNumAttempts=bwDirectedCallPickupNumAttempts, bwSipStatsMsgRetryToNeID=bwSipStatsMsgRetryToNeID, bwDoNotDisturbGroupID=bwDoNotDisturbGroupID, bwInstantConferencingSPID=bwInstantConferencingSPID, bwCommonCommPSAcceptedOutboundConnections=bwCommonCommPSAcceptedOutboundConnections, bwIGCSPID=bwIGCSPID, bwOCPNumUnsuccessfulAuthorizations=bwOCPNumUnsuccessfulAuthorizations, bwIMSAvgSessions=bwIMSAvgSessions, bwSipStatsInviteOuts=bwSipStatsInviteOuts, bwVMRSPNumComposeSendListAttempts=bwVMRSPNumComposeSendListAttempts, xsRemoteXlaUpdatesPending=xsRemoteXlaUpdatesPending, bwGroupSubscriptionDialedServiceProviderPIC=bwGroupSubscriptionDialedServiceProviderPIC, psOciStatsServiceProviderRequestsPerHour=psOciStatsServiceProviderRequestsPerHour, bwMessagingQueryNoMailbox=bwMessagingQueryNoMailbox, bwCPEDeviceFileGet=bwCPEDeviceFileGet, psOciStatsNbQueryRequestFailures=psOciStatsNbQueryRequestFailures, bwSipStatsPrackResponsesEntry=bwSipStatsPrackResponsesEntry, bwOCPSPNumLocalCallsBlocked=bwOCPSPNumLocalCallsBlocked, bwGroupNonSubscriptionDialedGroupPIC=bwGroupNonSubscriptionDialedGroupPIC, bwCallNotifySPIndex=bwCallNotifySPIndex, bwLocationControlDeactivationSuccess=bwLocationControlDeactivationSuccess, bwInterceptUserTerminationInvocations=bwInterceptUserTerminationInvocations, bwDPUBIGroupIndex=bwDPUBIGroupIndex, bwOutgoingCallingPlanGroupIndex=bwOutgoingCallingPlanGroupIndex, bwCustomRingbackGroupAudioAttempts=bwCustomRingbackGroupAudioAttempts, bwHuntGroupsGroupIndex=bwHuntGroupsGroupIndex, bwDPUBISPID=bwDPUBISPID, bwShInterfaceUserDataRequestFailure=bwShInterfaceUserDataRequestFailure, bwNbResponsesReceived=bwNbResponsesReceived, bwSD100SPIndex=bwSD100SPIndex, bwSipStatsTcpIns=bwSipStatsTcpIns, bwNbErrorsReceived=bwNbErrorsReceived, bwCallPickupNumAttempts=bwCallPickupNumAttempts, bwHuntGroupsGroupTable=bwHuntGroupsGroupTable, bwSystemSPName=bwSystemSPName, bwCAPStatsProfileUpdatesOut=bwCAPStatsProfileUpdatesOut, bwSipStatsMessageOuts=bwSipStatsMessageOuts, bwCFGNASPID=bwCFGNASPID, psOciStatsMaxRequestResponseTime=psOciStatsMaxRequestResponseTime, bwOCPGroupNumSpecialServices2CallsBlocked=bwOCPGroupNumSpecialServices2CallsBlocked, bwCustomRingbackGroupID=bwCustomRingbackGroupID, bwCommonCommXSProtocol=bwCommonCommXSProtocol, bwNRSStatsEntry=bwNRSStatsEntry, bwCallpCallsPerSecond=bwCallpCallsPerSecond, bwInterceptUserOriginationInvocations=bwInterceptUserOriginationInvocations, psInternalStats=psInternalStats, bwAlternateNumbersGroupUsage=bwAlternateNumbersGroupUsage, bwMaliciousCallTraceGroupID=bwMaliciousCallTraceGroupID, bwFaxMessagingReceived=bwFaxMessagingReceived, bwVMRSPNumComposeSendAttempts=bwVMRSPNumComposeSendAttempts, callCenter=callCenter, bwMessagingQuery=bwMessagingQuery, bwMusicOnHoldGroupExternalSourceNumFailures=bwMusicOnHoldGroupExternalSourceNumFailures, bwSOAPAvgThreads=bwSOAPAvgThreads, bwVoiceMessagingGroupIndex=bwVoiceMessagingGroupIndex, bwPSMonitoringExecutorLongestTaskName=bwPSMonitoringExecutorLongestTaskName, bwCongestionManagementNeighborSubscribeNotifyIn=bwCongestionManagementNeighborSubscribeNotifyIn, bwTrunkGroupPerTGMaxOutgoingActiveCalls=bwTrunkGroupPerTGMaxOutgoingActiveCalls, bwCFBNumPhoneDeactivations=bwCFBNumPhoneDeactivations, bwCFGNAForward=bwCFGNAForward, bwAsPriorityAlertServiceGroup=bwAsPriorityAlertServiceGroup, bwSequentialRingNumAttempts=bwSequentialRingNumAttempts, bwCallRetrieveGroupIndex=bwCallRetrieveGroupIndex, bwCallRetrieveGroupSuccess=bwCallRetrieveGroupSuccess, bwAutoAttendantGroupIndex=bwAutoAttendantGroupIndex, bwCFNANumForwarded=bwCFNANumForwarded, bwNRSStatsTableNbRequestsReceived=bwNRSStatsTableNbRequestsReceived, bwSystemSPEntry=bwSystemSPEntry, bwCallWaitingGroupIndex=bwCallWaitingGroupIndex, concurrentModule=concurrentModule, selectiveCallAcceptance=selectiveCallAcceptance, bwCAPStatsUnRegistersOut=bwCAPStatsUnRegistersOut, bwCallpSPUserTerminationsAnswered=bwCallpSPUserTerminationsAnswered, bwCFASPNumPhoneDeactivations=bwCFASPNumPhoneDeactivations, bwCFGNAGroupOverflowForward=bwCFGNAGroupOverflowForward, bwTrunkSPIndex=bwTrunkSPIndex, bwAsMoCountersGroup=bwAsMoCountersGroup, bwCommPilotCallManagerSPTable=bwCommPilotCallManagerSPTable, bwEZGroupID=bwEZGroupID, bwLastNumberRedialGroupID=bwLastNumberRedialGroupID, psBwVMRGroupEntry=psBwVMRGroupEntry, bwPSTcpStatsGroup=bwPSTcpStatsGroup, bwPriorityAlertGroupNumDistinctive=bwPriorityAlertGroupNumDistinctive, bwVMRSPNumSendFailed=bwVMRSPNumSendFailed, bwSipStatsMinSetupSignalDelay=bwSipStatsMinSetupSignalDelay, bwAsSpeedDialing100ServiceGroup=bwAsSpeedDialing100ServiceGroup, bwSmdiNbOfActiveConnection=bwSmdiNbOfActiveConnection, bwTrunkSPOriginationBlocked=bwTrunkSPOriginationBlocked, bwDnsQueryGroup=bwDnsQueryGroup, bwCallForwardingAlwaysGroupEntry=bwCallForwardingAlwaysGroupEntry, bwFlashCallHoldSPEntry=bwFlashCallHoldSPEntry, psOciStatsMaxServiceProviderRequestResponseTime=psOciStatsMaxServiceProviderRequestResponseTime, bwSCAGroupCallRetrieveSuccess=bwSCAGroupCallRetrieveSuccess, bwCallpGroupMaximumNumberofSimCallsExceeded=bwCallpGroupMaximumNumberofSimCallsExceeded, bwSD8SPID=bwSD8SPID, bwAccountCodeNumAttempts=bwAccountCodeNumAttempts, bwVMRSPCallBackAttempts=bwVMRSPCallBackAttempts, psTtNbConnectionsCreated=psTtNbConnectionsCreated, alternateNumbers=alternateNumbers, bwAsRingTimeoutServiceGroup=bwAsRingTimeoutServiceGroup, bwSelectiveCallRejectionGroupIndex=bwSelectiveCallRejectionGroupIndex, bwMGCPStatsMinSetupSignalDelay=bwMGCPStatsMinSetupSignalDelay, bwOCPSPNumOperatorAssistedCallsBlocked=bwOCPSPNumOperatorAssistedCallsBlocked, bwCommPilotCallMgrNumTransferVM=bwCommPilotCallMgrNumTransferVM, bwDnsStatsQueriesEntry=bwDnsStatsQueriesEntry, bwCallpGroupIndex=bwCallpGroupIndex, bwNumberOfGroupDNAssigned=bwNumberOfGroupDNAssigned, bwSPNoIndicationUserPIC=bwSPNoIndicationUserPIC, bwXSConcurrentFrameworkStatsGroup=bwXSConcurrentFrameworkStatsGroup, bwXSMonitoringExecutorNbErrors=bwXSMonitoringExecutorNbErrors, bwSPNonSubscriptionDialedUserPIC=bwSPNonSubscriptionDialedUserPIC, bwCallpSPID=bwCallpSPID, imsModule=imsModule, bwICPGroupNumOutsideCallerBlocks=bwICPGroupNumOutsideCallerBlocks, bwNonSubscriptionDialedServiceProviderPIC=bwNonSubscriptionDialedServiceProviderPIC, bwCallpEmergencyCallAttempts=bwCallpEmergencyCallAttempts, bwCAPStatsAcknowledgementsOut=bwCAPStatsAcknowledgementsOut, bwOutgoingCallingPlanGroupID=bwOutgoingCallingPlanGroupID, flashCallTransfer=flashCallTransfer, bwVAOSPIndex=bwVAOSPIndex, bwCallParkSPID=bwCallParkSPID, bwCongestionManagementNeighborCallpMessageOutRate=bwCongestionManagementNeighborCallpMessageOutRate, bwSystemInternalQueueLengthCurrent=bwSystemInternalQueueLengthCurrent, bwMGCPStatsDeleteConnectionOuts=bwMGCPStatsDeleteConnectionOuts, bwHotelingGroupIndex=bwHotelingGroupIndex, bwPSAvgRowsQueried=bwPSAvgRowsQueried, bwCallCapacitySPNumCallsAttempted=bwCallCapacitySPNumCallsAttempted, bwSipStatsMsgRetryToNeAddr=bwSipStatsMsgRetryToNeAddr, bwCFNAGroupNumForwarded=bwCFNAGroupNumForwarded, bwCustomRingbackUserAudioGroupFailures=bwCustomRingbackUserAudioGroupFailures, bwXSTcpServersNbConnectionsAccepted=bwXSTcpServersNbConnectionsAccepted, bwFamilySimRingNumAttempts=bwFamilySimRingNumAttempts, bwCommPilotCallMgrNumConferenceHold=bwCommPilotCallMgrNumConferenceHold, psVoiceMessaging=psVoiceMessaging, bwDirectedCallPickupNumFailures=bwDirectedCallPickupNumFailures, bwVMRNumNoAnswerGreetingsRecorded=bwVMRNumNoAnswerGreetingsRecorded, bwAsThirdPartyVoiceMailServiceGroup=bwAsThirdPartyVoiceMailServiceGroup, bwAsAutomaticCallBackServiceGroup=bwAsAutomaticCallBackServiceGroup, bwSD100GroupProgram=bwSD100GroupProgram, bwPriorityAlertSPIndex=bwPriorityAlertSPIndex, bwAsImsGroup=bwAsImsGroup, bwMGCPStatsExtraCommandResponseCodeValue=bwMGCPStatsExtraCommandResponseCodeValue, bwNRSStatsTableNbResponsesResent=bwNRSStatsTableNbResponsesResent, bwPTTSPIndex=bwPTTSPIndex, bwCFGNAOverflowForward=bwCFGNAOverflowForward, bwExternalCustomRingbackAttempts=bwExternalCustomRingbackAttempts, psBwVMRGroupID=psBwVMRGroupID, bwCommPilotCallManagerGroupTable=bwCommPilotCallManagerGroupTable, bwInterceptGroupIndex=bwInterceptGroupIndex, bwCallpGroupUserTerminationAttempts=bwCallpGroupUserTerminationAttempts, bwNoIndicationGroupPIC=bwNoIndicationGroupPIC, windowsMessaging=windowsMessaging, bwVMSPNumMessagesLeft=bwVMSPNumMessagesLeft, bwSipStatsRegistrationsPerMinute=bwSipStatsRegistrationsPerMinute, bwACBGroupID=bwACBGroupID, bwActivatableFeatureDescription=bwActivatableFeatureDescription, bwCFNRcSPDestinationChanged=bwCFNRcSPDestinationChanged, mssModule=mssModule, bwAsSimRingServiceGroup=bwAsSimRingServiceGroup, bwCallNotifyGroupIndex=bwCallNotifyGroupIndex, bwCallForwardingNoAnswerGroupIndex=bwCallForwardingNoAnswerGroupIndex, bwOCPSPNumTransfers=bwOCPSPNumTransfers, bwCustomRingbackSPEntry=bwCustomRingbackSPEntry, bwACBSPIndex=bwACBSPIndex, bwPTTSPTable=bwPTTSPTable, psBwVMRSPNumLoginAttempts=psBwVMRSPNumLoginAttempts, bwGroupNonSubscriptionDialedServiceProviderPIC=bwGroupNonSubscriptionDialedServiceProviderPIC, bwMGCPStatsMGCPCommandOuts=bwMGCPStatsMGCPCommandOuts, psOciStatsMinRequestResponseTime=psOciStatsMinRequestResponseTime, bwSipStatsUdpIns=bwSipStatsUdpIns, bwCallParkGroupNumRetrieveFailures=bwCallParkGroupNumRetrieveFailures, bwCAPStatsTotalMsgs=bwCAPStatsTotalMsgs, bwAsSelectiveCallRejectionServiceGroup=bwAsSelectiveCallRejectionServiceGroup, bwAsMaliciousCallTraceServiceGroup=bwAsMaliciousCallTraceServiceGroup, bwAsDiversionInhibitorServiceGroup=bwAsDiversionInhibitorServiceGroup, bwCallParkSPNumRetrieveAttempts=bwCallParkSPNumRetrieveAttempts, psOciStatsUserRequestResponseTime=psOciStatsUserRequestResponseTime, bwXSAvgRowsQueried=bwXSAvgRowsQueried, bwICSAGroupMonitoringFailure=bwICSAGroupMonitoringFailure, bwCommonCommPSHost=bwCommonCommPSHost)
mibBuilder.exportSymbols("BW-BroadworksApplicationServer", bwCommonCommXSRejectedOutboundConnections=bwCommonCommXSRejectedOutboundConnections, bwInterceptSPUserOriginationInvocations=bwInterceptSPUserOriginationInvocations, bwVAOGroupIncomingAttempts=bwVAOGroupIncomingAttempts, bwCFGNAGroupIndex=bwCFGNAGroupIndex, bwHuntGroupsGroupNumAttempts=bwHuntGroupsGroupNumAttempts, psOciStatsMinUserRequestResponseTime=psOciStatsMinUserRequestResponseTime, bwOCPSACGroupNumSuccessfulLock=bwOCPSACGroupNumSuccessfulLock, bwMaliciousCallTraceSPID=bwMaliciousCallTraceSPID, bwEZNormalCallsRejected=bwEZNormalCallsRejected, bwCNAMQueriesSent=bwCNAMQueriesSent, bwCPEDeviceName=bwCPEDeviceName, bwVMGroupGreetingRecorded=bwVMGroupGreetingRecorded, bwFaxMessagingSPPrinted=bwFaxMessagingSPPrinted, bwVAOGroupOutgoingSuccess=bwVAOGroupOutgoingSuccess, bwSipStatsMsgRetryToNePercentage=bwSipStatsMsgRetryToNePercentage, bySystemInternalQueueResets=bySystemInternalQueueResets, bwSipStatsInfoResponseCodeValue=bwSipStatsInfoResponseCodeValue, bwSipStatsCancelOuts=bwSipStatsCancelOuts, bwRealtimeAccountingRequestsRetransmitted=bwRealtimeAccountingRequestsRetransmitted, bwFaxMessagingGroupReceived=bwFaxMessagingGroupReceived, bwOCPNumOutsideGroupTransferBlocks=bwOCPNumOutsideGroupTransferBlocks, bwCommPilotCallMgrGroupNumAnswer=bwCommPilotCallMgrGroupNumAnswer, bwMWIDeliveryToMobileSPEntry=bwMWIDeliveryToMobileSPEntry, bwIncomingCallingPlanSPEntry=bwIncomingCallingPlanSPEntry, bwPSTTHWMIndex=bwPSTTHWMIndex, bwNSqueryCommFailures=bwNSqueryCommFailures, bwMGCPStatsExtraCommandResponseTable=bwMGCPStatsExtraCommandResponseTable, bwMGCPStatsMinDialToneDelay=bwMGCPStatsMinDialToneDelay, bwPSAvgUpdateTime=bwPSAvgUpdateTime, bwTrunkSPTerminationBlocked=bwTrunkSPTerminationBlocked, bwCallpGroupEntry=bwCallpGroupEntry, bwICSASPMonitoringFailure=bwICSASPMonitoringFailure, bwSystemGroupIndex=bwSystemGroupIndex, bwSystemInternalQueueLengthMaxTimestampMSB=bwSystemInternalQueueLengthMaxTimestampMSB, bwMaliciousCallTraceSPIndex=bwMaliciousCallTraceSPIndex, bwCommonCommXSAcceptedInboundConnections=bwCommonCommXSAcceptedInboundConnections, psOCIReportingBackLogMessageHost=psOCIReportingBackLogMessageHost, bwCAPStatsCallActionsIn=bwCAPStatsCallActionsIn, bwFlashCallHoldSPTable=bwFlashCallHoldSPTable, bwCongestionManagementNeighborInviteOut=bwCongestionManagementNeighborInviteOut, bwAuthenticationGroupNumChallenges=bwAuthenticationGroupNumChallenges, bwPolycomPhoneDirectoryGroupNumDownloads=bwPolycomPhoneDirectoryGroupNumDownloads, psSystemInternalQueueLengthMaxTimestamp=psSystemInternalQueueLengthMaxTimestamp, bwAsCapGroup=bwAsCapGroup, polycomSPID=polycomSPID, bwExternalCustomRingbackSPIndex=bwExternalCustomRingbackSPIndex, bwAnonymousCallsGroupNumRejected=bwAnonymousCallsGroupNumRejected, bwCommPilotCallMgrNumRelease=bwCommPilotCallMgrNumRelease, bwSipStatsPrackOuts=bwSipStatsPrackOuts, bwSipStatsCancelIns=bwSipStatsCancelIns, bwCommPilotCallMgrGroupNumGroupCallPark=bwCommPilotCallMgrGroupNumGroupCallPark, bwSipStatsByeResponsesEntry=bwSipStatsByeResponsesEntry, bwCWGroupNumPhoneCancellations=bwCWGroupNumPhoneCancellations, bwACBGroupStarted=bwACBGroupStarted, bwCallingLineIDDeliveryPerCall=bwCallingLineIDDeliveryPerCall, bwServiceTypeSystemEntry=bwServiceTypeSystemEntry, bwShInterfaceSubscribeNotificationsRequestFailure=bwShInterfaceSubscribeNotificationsRequestFailure, bwAsNrsGroup=bwAsNrsGroup, bwFlashThreeWayCallSPIndex=bwFlashThreeWayCallSPIndex, bwSystemInternalQueueTimeMin=bwSystemInternalQueueTimeMin, bwAsAuthenticationServiceGroup=bwAsAuthenticationServiceGroup, psOciStatsMaxRequestName=psOciStatsMaxRequestName, bwAsMibCompliancy=bwAsMibCompliancy, bwInterceptSPGroupTerminationInvocations=bwInterceptSPGroupTerminationInvocations, bwCallReturnSPTable=bwCallReturnSPTable, bwCustomRingbackUserVideoSPFailures=bwCustomRingbackUserVideoSPFailures, bwDiversionInhibitorGroupTable=bwDiversionInhibitorGroupTable, psTimesTen=psTimesTen, bwCallForwardingNoAnswerGroupEntry=bwCallForwardingNoAnswerGroupEntry, bwInterceptGroupTerminationInvocations=bwInterceptGroupTerminationInvocations, bwXSTcpServersIncomingQueueSize=bwXSTcpServersIncomingQueueSize, bwSOAPNumDroppedRequests=bwSOAPNumDroppedRequests, selectiveCallRejection=selectiveCallRejection, bwSmdiNbOfOpenedConnection=bwSmdiNbOfOpenedConnection, polycomGroupID=polycomGroupID, bwTrunkSPOriginationAttempt=bwTrunkSPOriginationAttempt, bwDirectedCallPickupGroupIndex=bwDirectedCallPickupGroupIndex, bwCallCapacityGroupNumCallsAttempted=bwCallCapacityGroupNumCallsAttempted, bwSipStatsByeOuts=bwSipStatsByeOuts, bwXSTcpServersStatsTable=bwXSTcpServersStatsTable, bwSelectiveCallRejectionSPIndex=bwSelectiveCallRejectionSPIndex, bwSPSubscriptionUserPIC=bwSPSubscriptionUserPIC, bwCFGNASPExternalNoForward=bwCFGNASPExternalNoForward, bwFaxMessagingReceptionFailure=bwFaxMessagingReceptionFailure, bwMWIGroupID=bwMWIGroupID, bwBroadWorksAnywhereSPIndex=bwBroadWorksAnywhereSPIndex, bwVMRSPNumPersonalizedNamesRecorded=bwVMRSPNumPersonalizedNamesRecorded, bwTwoStageDialingSPIndex=bwTwoStageDialingSPIndex, bwVMRGroupNumSendFailed=bwVMRGroupNumSendFailed, bwPreferredCarrierGroupID=bwPreferredCarrierGroupID, bwVAOSPOutgoingSuccess=bwVAOSPOutgoingSuccess, bwCustomRingbackGroupIndex=bwCustomRingbackGroupIndex, bwXSMonitoringExecutorIndex=bwXSMonitoringExecutorIndex, bwSimRingPersonalSPEntry=bwSimRingPersonalSPEntry, bwAutoAttendantSPNumAnswers=bwAutoAttendantSPNumAnswers, bwIPPhoneGroupTable=bwIPPhoneGroupTable, bwVAOIncomingAttempts=bwVAOIncomingAttempts, bwCFNRcGroupNumForwarded=bwCFNRcGroupNumForwarded, bwOutgoingCallingPlanSPTable=bwOutgoingCallingPlanSPTable, bwEZGroupTable=bwEZGroupTable, bwSessionAuditSPNumCallsFailedAudit=bwSessionAuditSPNumCallsFailedAudit, bwAsEmergencyZoneServiceGroup=bwAsEmergencyZoneServiceGroup, bwNRSStatsTableNbRequestsUnanswered=bwNRSStatsTableNbRequestsUnanswered, bwAnonymousCallsSPNumRejected=bwAnonymousCallsSPNumRejected, bwShInterfaceGroup=bwShInterfaceGroup, bwServiceTypeSystemTable=bwServiceTypeSystemTable, bwXSMonitoringExecutorName=bwXSMonitoringExecutorName, bwMusicOnHoldExternalSourceNumFailures=bwMusicOnHoldExternalSourceNumFailures, bwGroupSubscriptionDialedGroupPIC=bwGroupSubscriptionDialedGroupPIC, bwAsSpeedDialing8ServiceGroup=bwAsSpeedDialing8ServiceGroup, bwCallCapacitySPID=bwCallCapacitySPID, bwVMRGroupNumForwardSendListAttempts=bwVMRGroupNumForwardSendListAttempts, psCommonCommStats=psCommonCommStats, bwVPNumCFADestinationChanged=bwVPNumCFADestinationChanged, bwSipStatsInviteResponseIns=bwSipStatsInviteResponseIns, bwCongestionManagementNeighborNonCallpMessageOutRate=bwCongestionManagementNeighborNonCallpMessageOutRate, bwVMRNumReplySendAttempts=bwVMRNumReplySendAttempts, flashCallWaiting=flashCallWaiting, bwVMRSPNumComposeSendGroupAttempts=bwVMRSPNumComposeSendGroupAttempts, bwRingTimeoutSPTable=bwRingTimeoutSPTable, bwWSPStatsServiceRequestsIn=bwWSPStatsServiceRequestsIn, bwFlashCallWaitingSPIndex=bwFlashCallWaitingSPIndex, ttNbConnectionsCreated=ttNbConnectionsCreated, bwIncomingCallingPlanGroupEntry=bwIncomingCallingPlanGroupEntry, bwAsRedundancyStatsGroup=bwAsRedundancyStatsGroup, bwFaxMessagingSPID=bwFaxMessagingSPID, bwVMRGroupNumSendListFailed=bwVMRGroupNumSendListFailed, realtimeAccountingModule=realtimeAccountingModule, bwSCAGroupTable=bwSCAGroupTable, psSystemInternalQueueTable=psSystemInternalQueueTable, bwTwoStageDialingSPEntry=bwTwoStageDialingSPEntry, bwSCAGroupIndex=bwSCAGroupIndex, bwMGCPStatsAuditConnectionResponseTable=bwMGCPStatsAuditConnectionResponseTable, bwExtEmergencyRtgQuerySent=bwExtEmergencyRtgQuerySent, bwVPNumAABusHoursGreetingRecorded=bwVPNumAABusHoursGreetingRecorded, bwFamilySimRingSPNumAttempts=bwFamilySimRingSPNumAttempts, bwGroupMWISMSSent=bwGroupMWISMSSent, bwSipStatsOptionsResponseIns=bwSipStatsOptionsResponseIns, bwFlashCallWaitingSPEntry=bwFlashCallWaitingSPEntry, bwCustomRingbackUserAudioSPFailures=bwCustomRingbackUserAudioSPFailures, bwCallpSPMediaTypeNotSupported=bwCallpSPMediaTypeNotSupported, bwThirdPartyVoiceMailNbOfCFWNoAnswer=bwThirdPartyVoiceMailNbOfCFWNoAnswer, bwCallingLineIDDeliveryBlockSPTable=bwCallingLineIDDeliveryBlockSPTable, bwMaliciousCallTraceSPApplied=bwMaliciousCallTraceSPApplied, bwNbResponsesSent=bwNbResponsesSent, bwDirectedCallPickupSPNumAttempts=bwDirectedCallPickupSPNumAttempts, bwTrunkTerminationBlocked=bwTrunkTerminationBlocked, bwAsCFBusyServiceGroup=bwAsCFBusyServiceGroup, bwSystemInternalQueueLengthMaxTimestampLSB=bwSystemInternalQueueLengthMaxTimestampLSB, bwPhysicalLocationSPOriginationBlocked=bwPhysicalLocationSPOriginationBlocked, bwAsCFNoAnswerServiceGroup=bwAsCFNoAnswerServiceGroup, bwAuthenticationSPID=bwAuthenticationSPID, bwTrunkGroupID=bwTrunkGroupID, bwCFBDestinationChanged=bwCFBDestinationChanged, bwPSTcpServersNbBytesReceived=bwPSTcpServersNbBytesReceived, bwFlashCallTransferGroupNumTransfers=bwFlashCallTransferGroupNumTransfers, bwCFNRcSPIndex=bwCFNRcSPIndex, bwGroupMultiMediaMsgDeposit=bwGroupMultiMediaMsgDeposit, psOciStatsNbUpdateRequests=psOciStatsNbUpdateRequests, bwLDAPIntegrationNumQueryAttempts=bwLDAPIntegrationNumQueryAttempts, bwCustomRingbackGroupVideoGroupFailures=bwCustomRingbackGroupVideoGroupFailures, psOciStatsNbReportNotificationsOut=psOciStatsNbReportNotificationsOut, bwOCPGroupNumPremiumServices1CallsBlocked=bwOCPGroupNumPremiumServices1CallsBlocked, bwSipStatsSubscribeResponseCodeValue=bwSipStatsSubscribeResponseCodeValue, bwThirdPartyVMailGroupTable=bwThirdPartyVMailGroupTable, bwCommonCommPSStatsTable=bwCommonCommPSStatsTable, bwSeriesCompletionSPTable=bwSeriesCompletionSPTable, bwCallpMediaTypeNotSupported=bwCallpMediaTypeNotSupported, bwCFBGroupDestinationChanged=bwCFBGroupDestinationChanged, bwOCPSPNumSpecialServices1CallsBlocked=bwOCPSPNumSpecialServices1CallsBlocked, bwAsCallParkServiceGroup=bwAsCallParkServiceGroup, bwSipStatsSubscribeIns=bwSipStatsSubscribeIns, bwCommonCommPSStatsEntry=bwCommonCommPSStatsEntry, bwThirdPartyVoiceMailGroupNbOfCFWNoAnswer=bwThirdPartyVoiceMailGroupNbOfCFWNoAnswer, bwCallForwardingNoAnswerGroupTable=bwCallForwardingNoAnswerGroupTable, bwVAOSPIncomingAttempts=bwVAOSPIncomingAttempts, bwVAOGroupOutgoingAttempts=bwVAOGroupOutgoingAttempts, bwRingTimeoutGroupTable=bwRingTimeoutGroupTable, bwICNumAttempts=bwICNumAttempts, psVoiceMessagingGroup=psVoiceMessagingGroup, bwAsFamilySimRingServiceGroup=bwAsFamilySimRingServiceGroup, thirdPartyMWIControl=thirdPartyMWIControl, bwAutoAttendantNumAnswers=bwAutoAttendantNumAnswers, bwVoiceMessagingSPTable=bwVoiceMessagingSPTable, bwBroadWorksAnywhereGroupIndex=bwBroadWorksAnywhereGroupIndex, bwPSQueryCount=bwPSQueryCount, bwAuthenticationNumValidResponses=bwAuthenticationNumValidResponses, bwMessagingGroupQuery=bwMessagingGroupQuery, psTtNbFailedCheckpoints=psTtNbFailedCheckpoints, bwDirectedCallPickupSPNumFailures=bwDirectedCallPickupSPNumFailures, bwCommonCommPSInputMessagesProcessed=bwCommonCommPSInputMessagesProcessed, bwMGCPStatsDeleteGatewayConnectionIns=bwMGCPStatsDeleteGatewayConnectionIns, bwFaxMessagingSPEntry=bwFaxMessagingSPEntry, bwDoNotDisturbSPNumInvoked=bwDoNotDisturbSPNumInvoked, bwExternalCustomRingbackGroup=bwExternalCustomRingbackGroup, bwSD100GroupIndex=bwSD100GroupIndex, bwNbInvalidMessagesReceived=bwNbInvalidMessagesReceived, bwSipStatsInviteResponseCodeValue=bwSipStatsInviteResponseCodeValue, bwPreferredCarrierGroupTable=bwPreferredCarrierGroupTable, bwICSPOutdialNumAttempts=bwICSPOutdialNumAttempts, bwCallRetrieveSuccess=bwCallRetrieveSuccess, bwAlternateNumbersGroupTable=bwAlternateNumbersGroupTable, bwICSPGroupPortLimitExceeded=bwICSPGroupPortLimitExceeded, bwVMRGroupNumSendGroupFailed=bwVMRGroupNumSendGroupFailed, bwPTTSPReject=bwPTTSPReject, psOciStatsMaxUserRequestResponseTime=psOciStatsMaxUserRequestResponseTime, bwCallpSPTable=bwCallpSPTable, bwCallCenterSPTable=bwCallCenterSPTable, bwFamilySimRingSPNumBusy=bwFamilySimRingSPNumBusy, bwAlternateNumbersSPTable=bwAlternateNumbersSPTable, psSystemInternalQueueSize=psSystemInternalQueueSize, bwCFANumPhoneDeactivations=bwCFANumPhoneDeactivations, externalCallLogsStats=externalCallLogsStats, bwSMDIMessageDeskMessageSent=bwSMDIMessageDeskMessageSent, bwFamilySimRingSPIndex=bwFamilySimRingSPIndex, bwGroupNoIndicationGroupPIC=bwGroupNoIndicationGroupPIC, bwCFNRcSPNumPhoneActivations=bwCFNRcSPNumPhoneActivations, bwIncomingCallingPlanGroupIndex=bwIncomingCallingPlanGroupIndex, psOciStatsRequestsPerHour=psOciStatsRequestsPerHour, bwEZGroupEmergencyCallsRejected=bwEZGroupEmergencyCallsRejected, bwCallRetrieveGroup=bwCallRetrieveGroup, bwFlashThreeWayCallGroupIndex=bwFlashThreeWayCallGroupIndex, bwSipStatsInviteResponsesEntry=bwSipStatsInviteResponsesEntry, bwAHRGroupHold=bwAHRGroupHold, bwShInterfaceSubscribeNotificationsRequest=bwShInterfaceSubscribeNotificationsRequest, bwLocationControlSPTable=bwLocationControlSPTable, bwAsPsBcctGroup=bwAsPsBcctGroup, bwVMRCallBackFailures=bwVMRCallBackFailures, bwIGCGroupNormalInvoke=bwIGCGroupNormalInvoke, bwSIPReclaimedStaleTcpConnections=bwSIPReclaimedStaleTcpConnections, bwCPEDeviceStatsEntry=bwCPEDeviceStatsEntry, bwSystemInternalQueueTimeAvg=bwSystemInternalQueueTimeAvg, bwCallingLineIDDeliveryPerCallSP=bwCallingLineIDDeliveryPerCallSP, bwOCPSACNumSuccessfulLock=bwOCPSACNumSuccessfulLock, bwCFAGroupNumPhoneActivations=bwCFAGroupNumPhoneActivations, bwGroupSubscriptionGroupPIC=bwGroupSubscriptionGroupPIC, psOAMStats=psOAMStats, bwVoiceMessagingGroupEntry=bwVoiceMessagingGroupEntry, bwInCallServiceActivationSPTable=bwInCallServiceActivationSPTable, bwMGCPStatsAuditEndpointResponseIns=bwMGCPStatsAuditEndpointResponseIns, bwSelectiveCallRejectionSPID=bwSelectiveCallRejectionSPID, bwNbRequestsSent=bwNbRequestsSent, bwCommPilotCallMgrNumAnswer=bwCommPilotCallMgrNumAnswer, bwICPGroupNumIntraGroupBlocks=bwICPGroupNumIntraGroupBlocks, bwSipStatsMessageResponsesEntry=bwSipStatsMessageResponsesEntry, doNotDisturb=doNotDisturb, bwCallForwardingNotReachableGroupEntry=bwCallForwardingNotReachableGroupEntry, bwDoNotDisturbNumInvoked=bwDoNotDisturbNumInvoked, bwPriorityAlertSPEntry=bwPriorityAlertSPEntry, bwFlashCallTransferGroupTable=bwFlashCallTransferGroupTable, bwPSTTHWMTimestamp=bwPSTTHWMTimestamp, psNSSyncModule=psNSSyncModule, bwBroadworksAnywhereGroup=bwBroadworksAnywhereGroup, bwMGCPStatsEndpointConfigurationResponseIns=bwMGCPStatsEndpointConfigurationResponseIns)
mibBuilder.exportSymbols("BW-BroadworksApplicationServer", bwAlternateNumbersGroupEntry=bwAlternateNumbersGroupEntry, bwSD8GroupNumTimesProgrammed=bwSD8GroupNumTimesProgrammed, bwSCASPID=bwSCASPID, bwSCAGroupEntry=bwSCAGroupEntry, bwCallCenterGroupTable=bwCallCenterGroupTable, bwCommPilotCallManagerSPIndex=bwCommPilotCallManagerSPIndex, bwAuthCodeSPNumAttempts=bwAuthCodeSPNumAttempts, bwOutgoingCallingPlanSPEntry=bwOutgoingCallingPlanSPEntry, bwNumberOfDNAssigned=bwNumberOfDNAssigned, bwAsIcpServiceGroup=bwAsIcpServiceGroup, bwCallParkGroupNumRetrieveAttempts=bwCallParkGroupNumRetrieveAttempts, bwSequentialRingGroupIndex=bwSequentialRingGroupIndex, bwDoNotDisturbSPIndex=bwDoNotDisturbSPIndex, bwMGCPStatsMGCPCommandIns=bwMGCPStatsMGCPCommandIns, bwPSTcpServersStatsTable=bwPSTcpServersStatsTable, bwOCPSPNumSpecialServices2CallsBlocked=bwOCPSPNumSpecialServices2CallsBlocked, bwOCPSPNumCasualCallsBlocked=bwOCPSPNumCasualCallsBlocked, bwPSTcpServersNbConnectionsRefused=bwPSTcpServersNbConnectionsRefused, bwICSAGroupID=bwICSAGroupID, bwCustomRingbackGroupVideoGroupAttempts=bwCustomRingbackGroupVideoGroupAttempts, bwLNRNumRedials=bwLNRNumRedials, bwCallpRemoteOfficeEmergencyCallsBlocked=bwCallpRemoteOfficeEmergencyCallsBlocked, bwAsPsLdapGroup=bwAsPsLdapGroup, bwCommonCommXSOutputCommunicationErrors=bwCommonCommXSOutputCommunicationErrors, bwAsExpensiveCallNotificationGroup=bwAsExpensiveCallNotificationGroup, bwSipStatsOptionsIns=bwSipStatsOptionsIns, bwNumberOfSPDNDefined=bwNumberOfSPDNDefined, expensiveCallNotification=expensiveCallNotification, bwCAPStatsUnRegistersIn=bwCAPStatsUnRegistersIn, bwCallpNetworkTerminationsAnswered=bwCallpNetworkTerminationsAnswered, bwHotelingSPDisassociate=bwHotelingSPDisassociate, bwICSASPIndex=bwICSASPIndex, bwFlashThreeWayCallGroupTable=bwFlashThreeWayCallGroupTable, bwDnsQueryTimeAvg=bwDnsQueryTimeAvg, bwWindowsMessagingIMSessionSuccessCounter=bwWindowsMessagingIMSessionSuccessCounter, bwVMRSPNumLoginFailures=bwVMRSPNumLoginFailures, bwCallCapacityGroupTable=bwCallCapacityGroupTable, bwAuthCodeGroupNumValidations=bwAuthCodeGroupNumValidations, bwSimRingPersonalGroupNumBusy=bwSimRingPersonalGroupNumBusy, psBwVMRGroupNumLoginAttempts=psBwVMRGroupNumLoginAttempts, bwCFNASPDestinationChanged=bwCFNASPDestinationChanged, bwFlashConsultationGroupID=bwFlashConsultationGroupID, bwPSUpdateCount=bwPSUpdateCount, bwVPSPNumAABusHoursGreetingRecorded=bwVPSPNumAABusHoursGreetingRecorded, bwAsIpPhoneServiceGroup=bwAsIpPhoneServiceGroup, bwXSMonitoringExecutorAvgActiveThreads=bwXSMonitoringExecutorAvgActiveThreads, bwIGCNormalInvoke=bwIGCNormalInvoke, ttNbFailedCheckpoints=ttNbFailedCheckpoints, psBwVMRSPTable=psBwVMRSPTable, externalCallLogsModule=externalCallLogsModule, bwOCPNumSpecialServices1CallsBlocked=bwOCPNumSpecialServices1CallsBlocked, smtpStats=smtpStats, bwSOAPAvgServiceTime=bwSOAPAvgServiceTime, bwSipStatsOptionsResponsesTable=bwSipStatsOptionsResponsesTable, psPerNbCommittedTransactions=psPerNbCommittedTransactions, bwActivatableFeatureTable=bwActivatableFeatureTable, bwSystemInternalQueueName=bwSystemInternalQueueName, bwMusicOnHoldSPExternalSourceNumFailures=bwMusicOnHoldSPExternalSourceNumFailures, polycomSPTable=polycomSPTable, bwAsVoiceMessagingServiceGroup=bwAsVoiceMessagingServiceGroup, psTcpModule=psTcpModule, bwICGroupGroupPortLimitExceeded=bwICGroupGroupPortLimitExceeded, perNbFailedTransactions=perNbFailedTransactions, cot=cot, tcpStats=tcpStats, bwIGCGroupID=bwIGCGroupID, bwMWISPID=bwMWISPID, psPolycomPhoneServiceGroup=psPolycomPhoneServiceGroup, bwCallReturnGroupTable=bwCallReturnGroupTable, bwSD8GroupIndex=bwSD8GroupIndex, bwLocationControlGroupTable=bwLocationControlGroupTable, bwCallPickupGroupEntry=bwCallPickupGroupEntry, bwVMRNumComposeSendGroupAttempts=bwVMRNumComposeSendGroupAttempts, bwCotGroupEntry=bwCotGroupEntry, bwCallForwardingNoAnswerSPIndex=bwCallForwardingNoAnswerSPIndex, bwDPUBIAttempt=bwDPUBIAttempt, bwVoiceMessagingSPID=bwVoiceMessagingSPID, bwICSAGroupMonitoringStarted=bwICSAGroupMonitoringStarted, bwOCPNumTollFreeCallsBlocked=bwOCPNumTollFreeCallsBlocked, bwIMSUnsuccessfulConnectionAttempts=bwIMSUnsuccessfulConnectionAttempts, bwSipStatsSetupSignalDelay=bwSipStatsSetupSignalDelay, bwHotelingAssociate=bwHotelingAssociate, bwSipStatsOptionsOuts=bwSipStatsOptionsOuts, bwAutoAttendantGroupNumTransfers=bwAutoAttendantGroupNumTransfers, bwCustomRingbackUserAudioAttempts=bwCustomRingbackUserAudioAttempts, bwIGCSPPushToTalkInvoke=bwIGCSPPushToTalkInvoke, bwCommPilotCallMgrNumConference=bwCommPilotCallMgrNumConference, systemModule=systemModule, bwAsFlashCallHoldServiceGroup=bwAsFlashCallHoldServiceGroup, bwPTTGroupTable=bwPTTGroupTable, bwTrunkGroupPerTGGroupID=bwTrunkGroupPerTGGroupID, bwVMRGroupNumComposeSendAttempts=bwVMRGroupNumComposeSendAttempts, bwMGCPStatsDeleteConnectionResponseCodeValue=bwMGCPStatsDeleteConnectionResponseCodeValue, bwPSMonitoringExecutorAvgActiveThreads=bwPSMonitoringExecutorAvgActiveThreads, bwSeriesCompletionGroupTable=bwSeriesCompletionGroupTable, bwMessagingGroupQueryNoMailbox=bwMessagingGroupQueryNoMailbox, bwAuthenticationSPNumValidResponses=bwAuthenticationSPNumValidResponses, sipModule=sipModule, bwCongestionManagementNeighborState=bwCongestionManagementNeighborState, bwSelectiveCallRejectionSPEntry=bwSelectiveCallRejectionSPEntry, bwICPSPNumCollectCallBlocks=bwICPSPNumCollectCallBlocks, bwVMRGroupNumLoginFailures=bwVMRGroupNumLoginFailures, bwAHRSPHold=bwAHRSPHold, bwTwoStageDialingSPInvocation=bwTwoStageDialingSPInvocation, bwCongestionManagementNeighborNonCallpRequestInRate=bwCongestionManagementNeighborNonCallpRequestInRate, bwShInterfaceResponsesIn=bwShInterfaceResponsesIn, bwFaxMessagingGroupPrintingFailure=bwFaxMessagingGroupPrintingFailure, callForwardGroupNoAnswer=callForwardGroupNoAnswer, bwCommPilotCallMgrNumConferenceAnswer=bwCommPilotCallMgrNumConferenceAnswer, bwAuthenticationNumChallenges=bwAuthenticationNumChallenges, psPerNbOpenedTransactions=psPerNbOpenedTransactions, bwSipStatsByeIns=bwSipStatsByeIns, bwCommonCommPSRejectedOutboundConnections=bwCommonCommPSRejectedOutboundConnections, bwCotGroupTable=bwCotGroupTable, callRetrieve=callRetrieve, bwInterceptGroupEntry=bwInterceptGroupEntry, bwCotSPID=bwCotSPID, bwFamilySimRingGroupID=bwFamilySimRingGroupID, bwMWIDeliveryToMobileGroupEntry=bwMWIDeliveryToMobileGroupEntry, mgcpStats=mgcpStats, bwCFAGroupNumForwarded=bwCFAGroupNumForwarded, bwThirdPartyVMailSPEntry=bwThirdPartyVMailSPEntry, psOciStatsMaxServiceProviderRequestName=psOciStatsMaxServiceProviderRequestName, bwExtEmergencyRtgENServerTimeout=bwExtEmergencyRtgENServerTimeout, bwDNDGroupNumPhoneActivations=bwDNDGroupNumPhoneActivations, bwDNDSPNumPhoneDeactivations=bwDNDSPNumPhoneDeactivations, bwEZSPIndex=bwEZSPIndex, bwOCPNumUnknownCallsBlocked=bwOCPNumUnknownCallsBlocked, bwSipStatsRetryByes=bwSipStatsRetryByes, bwNumberOfGroupDNDefined=bwNumberOfGroupDNDefined, polycomGroupTableEntry=polycomGroupTableEntry, bwSequentialRingSPID=bwSequentialRingSPID, bwCommonCommXSStatsEntry=bwCommonCommXSStatsEntry, bwCallpNetworkOriginationAttempts=bwCallpNetworkOriginationAttempts, bwOCPSACGroupNumUnsuccessfulUnlock=bwOCPSACGroupNumUnsuccessfulUnlock, bwSelectiveCallForwardSPEntry=bwSelectiveCallForwardSPEntry, bwAutoAttendantSPMultiMediaPromptRecorded=bwAutoAttendantSPMultiMediaPromptRecorded, bwICGroupNumAttempts=bwICGroupNumAttempts, bwEZSPTable=bwEZSPTable, bwActivatableFeatureActivated=bwActivatableFeatureActivated, psRemoteXlaNbTimesDisconnected=psRemoteXlaNbTimesDisconnected, bwVoiceMessagingSPEntry=bwVoiceMessagingSPEntry, bwAsPsOciGroup=bwAsPsOciGroup, bwInterceptGroupGroupOriginationInvocations=bwInterceptGroupGroupOriginationInvocations, bwPSMonitoringExecutorIndex=bwPSMonitoringExecutorIndex, bwAlternateNumbersSPUsage=bwAlternateNumbersSPUsage, bwMGCPStatsModifyConnectionResponseCodeValue=bwMGCPStatsModifyConnectionResponseCodeValue, bwHotelingGroupID=bwHotelingGroupID, bwCallReturnGroupIndex=bwCallReturnGroupIndex, bwDirectedCallPickupGroupTable=bwDirectedCallPickupGroupTable, bwPMTNumMonitorsOpen=bwPMTNumMonitorsOpen, bwACBGroupIndex=bwACBGroupIndex, bwExternalCustomRingbackSPFailures=bwExternalCustomRingbackSPFailures, bwCallPickupSPNumFailures=bwCallPickupSPNumFailures, bwNRSStatsTableIndex=bwNRSStatsTableIndex, bwTrunkGroupPerTGUnreachableDestination=bwTrunkGroupPerTGUnreachableDestination, externalemergencyrouting=externalemergencyrouting, bwMGCPStatsEndpointConfigurationResponseEntry=bwMGCPStatsEndpointConfigurationResponseEntry, bwIPPhoneGroupEntry=bwIPPhoneGroupEntry, bwCurrentNonCallOverloadZone=bwCurrentNonCallOverloadZone, bwDoNotDisturbGroupEntry=bwDoNotDisturbGroupEntry, bwCFBSPNumPhoneDeactivations=bwCFBSPNumPhoneDeactivations, bwCAPStatsDatagramsOut=bwCAPStatsDatagramsOut, bwVAOSPTable=bwVAOSPTable, bwPriorityAlertSPTable=bwPriorityAlertSPTable, bwCallpMaximumNumberofSimCallsExceeded=bwCallpMaximumNumberofSimCallsExceeded, bwSystemInternalQueueLengthMaxTimestamp=bwSystemInternalQueueLengthMaxTimestamp, bwPolycomPhoneDirectorySPNumDownloads=bwPolycomPhoneDirectorySPNumDownloads, psOCIReportingBackLogMessageTable=psOCIReportingBackLogMessageTable, bwVPSPNumCFADestinationChanged=bwVPSPNumCFADestinationChanged, bwTwoStageDialingGroupInvocation=bwTwoStageDialingGroupInvocation, bwAuthCodeNumAttempts=bwAuthCodeNumAttempts, bwAsReservedGroup=bwAsReservedGroup, bwSeriesCompletionSPID=bwSeriesCompletionSPID, psOciStatsNbAuthorizationRequestFailures=psOciStatsNbAuthorizationRequestFailures, bwMCPNotificationsReceived=bwMCPNotificationsReceived, bwOCPSPNumTollFreeCallsBlocked=bwOCPSPNumTollFreeCallsBlocked, bwShInterfaceSystemRefreshInitiated=bwShInterfaceSystemRefreshInitiated, bwSmdiIncomingMWIDesactivationRequests=bwSmdiIncomingMWIDesactivationRequests, redundancyStats=redundancyStats, bwSelectiveCallAcceptanceSPIndex=bwSelectiveCallAcceptanceSPIndex, bwInstantConferencingBridgeIndex=bwInstantConferencingBridgeIndex, bwVAOGroupID=bwVAOGroupID, bwDiversionInhibitorSPIndex=bwDiversionInhibitorSPIndex, bwSipStatsMessageResponseCodeValue=bwSipStatsMessageResponseCodeValue, bwCallRetrieveGroupEntry=bwCallRetrieveGroupEntry, bwOCPSPNumUnsuccessfulAuthorizations=bwOCPSPNumUnsuccessfulAuthorizations, bwCallpGroupMaximumNumberofSimVideoCallsExceeded=bwCallpGroupMaximumNumberofSimVideoCallsExceeded, bwAsInCallServiceActivationGroup=bwAsInCallServiceActivationGroup, psSystemInternalQueueTimeMaxTimestamp=psSystemInternalQueueTimeMaxTimestamp, psBwVMRSPEntry=psBwVMRSPEntry, bwMGCPStatsAuditConnectionResponseIns=bwMGCPStatsAuditConnectionResponseIns, bwVMRNumComposeSendListAttempts=bwVMRNumComposeSendListAttempts, bwAHRGroupIndex=bwAHRGroupIndex, bwCFNRcSPNumPhoneDeactivations=bwCFNRcSPNumPhoneDeactivations, bwPSConcurrentFrameworkStatsGroup=bwPSConcurrentFrameworkStatsGroup, bwNRSStatsTableNbErrorsSent=bwNRSStatsTableNbErrorsSent, bwHotelingGroupEntry=bwHotelingGroupEntry, bwAuthenticationSPIndex=bwAuthenticationSPIndex, bwAsCallForwardingNotReachableGroup=bwAsCallForwardingNotReachableGroup, bwPMTNumLoggerCreated=bwPMTNumLoggerCreated, bwSessionAuditGroupNumCallsFailedAudit=bwSessionAuditGroupNumCallsFailedAudit, psSystemInternalQueueResets=psSystemInternalQueueResets, bwFaxMessagingGroupPrinted=bwFaxMessagingGroupPrinted, bwCustomRingbackUserVideoSPAttempts=bwCustomRingbackUserVideoSPAttempts, xsRemoteXlaUpdatesProcessed=xsRemoteXlaUpdatesProcessed, bwSD100GroupID=bwSD100GroupID, psOciStatsServiceProviderRequestResponseTime=psOciStatsServiceProviderRequestResponseTime, bwSipStatsSubscribeOuts=bwSipStatsSubscribeOuts, bwSipStatsAnswerSignalDelay=bwSipStatsAnswerSignalDelay, bwPSMonitoringExecutorName=bwPSMonitoringExecutorName, bwSequentialRingSPNumNoAnswer=bwSequentialRingSPNumNoAnswer, psDatabaseModule=psDatabaseModule, bwFlashCallWaitingSPTable=bwFlashCallWaitingSPTable, bwOCPNumSpecialServices2CallsBlocked=bwOCPNumSpecialServices2CallsBlocked, bwCustomRingbackSPIndex=bwCustomRingbackSPIndex, bwMWIDeliveryToMobileSPTable=bwMWIDeliveryToMobileSPTable, bwNRSStatsTableNbRequestsResent=bwNRSStatsTableNbRequestsResent, bwCongestionManagementNeighborInviteIn=bwCongestionManagementNeighborInviteIn, bwAccountCodeGroupNumAttempts=bwAccountCodeGroupNumAttempts, bwSystemInternalQueueTable=bwSystemInternalQueueTable, bwNRSStatsTableProtocolName=bwNRSStatsTableProtocolName, bwCommPilotCallMgrSPNumHold=bwCommPilotCallMgrSPNumHold, bwCommonCommPSRejectedInboundConnections=bwCommonCommPSRejectedInboundConnections, bwICSASPMonitoringStarted=bwICSASPMonitoringStarted, ttConnectionPoolSize=ttConnectionPoolSize, bwExternalCustomRingbackSPID=bwExternalCustomRingbackSPID, mgcpModule=mgcpModule, bwMGCPStatsModifyConnectionResponseTable=bwMGCPStatsModifyConnectionResponseTable, psOciStatsMinServiceProviderRequestResponseTime=psOciStatsMinServiceProviderRequestResponseTime, bwSmdiIncomingMWIActivationRequests=bwSmdiIncomingMWIActivationRequests, bwSPNoIndicationServiceProviderPIC=bwSPNoIndicationServiceProviderPIC, inCallServiceActivation=inCallServiceActivation, bwSipStatsUpdateOuts=bwSipStatsUpdateOuts, bwCustomRingbackUserVideoFailures=bwCustomRingbackUserVideoFailures, psOciStatsMaxGroupRequestName=psOciStatsMaxGroupRequestName, bwSOAPMaxThreads=bwSOAPMaxThreads, bwCurrentCallOverloadZone=bwCurrentCallOverloadZone, bwIGCGroupIndex=bwIGCGroupIndex, bwCAPStatsAclViolations=bwCAPStatsAclViolations, bwTrunkGroupPerTGCapacityExceededOffsetValue=bwTrunkGroupPerTGCapacityExceededOffsetValue, bwIGCPushToTalkInvoke=bwIGCPushToTalkInvoke, psActivatableFeatureModule=psActivatableFeatureModule, bwInstantConferencingGroupEntry=bwInstantConferencingGroupEntry, bwVoiceMessagingSPIndex=bwVoiceMessagingSPIndex, bwXSTTHWMEntry=bwXSTTHWMEntry, bwAsPsQueueStatsGroup=bwAsPsQueueStatsGroup, bwICPNumIntraGroupBlocks=bwICPNumIntraGroupBlocks, bwFlashThreeWayCallSPEntry=bwFlashThreeWayCallSPEntry, bwAsMibConformance=bwAsMibConformance, bwSipStatsPrackResponseIns=bwSipStatsPrackResponseIns, bwCallNotifyGroupTable=bwCallNotifyGroupTable, bwSmdiInvalidRequestsReceived=bwSmdiInvalidRequestsReceived, bwDeviceTypeSystemIndex=bwDeviceTypeSystemIndex)
mibBuilder.exportSymbols("BW-BroadworksApplicationServer", bwInterceptGroupTable=bwInterceptGroupTable, bwExternalCustomRingbackFailures=bwExternalCustomRingbackFailures, bwAsCallingLineIdBlockingServiceGroup=bwAsCallingLineIdBlockingServiceGroup, bwCallpGroupEmergencyCallAttempts=bwCallpGroupEmergencyCallAttempts, bwSeriesCompletionGroupNumBusy=bwSeriesCompletionGroupNumBusy, psSystemInternalQueueLengthMaxTimestampLSB=psSystemInternalQueueLengthMaxTimestampLSB, perNbCommittedTransactions=perNbCommittedTransactions, bwOCPNumChargeableDirAssistCallsBlocked=bwOCPNumChargeableDirAssistCallsBlocked, bwCAPStatsRegisterResponses=bwCAPStatsRegisterResponses, bwCallPickupGroupTable=bwCallPickupGroupTable, bwHotelingSPTimeout=bwHotelingSPTimeout, bwMGCPStatsEndpointConfigurationResponseCodeValue=bwMGCPStatsEndpointConfigurationResponseCodeValue, bwOCPSACSPNumUnsuccessfulUnlock=bwOCPSACSPNumUnsuccessfulUnlock, bwSessionAuditGroupID=bwSessionAuditGroupID, bwAnonymousCallRejectionGroupIndex=bwAnonymousCallRejectionGroupIndex, bwSessionAuditSPNumCallsAudited=bwSessionAuditSPNumCallsAudited, bwCallpEmergencyCallAlarms=bwCallpEmergencyCallAlarms, bwSCASPEntry=bwSCASPEntry, bwSipStatsUpdateResponseCodeValue=bwSipStatsUpdateResponseCodeValue, bwCommPilotCallMgrSPNumTransferVM=bwCommPilotCallMgrSPNumTransferVM, bwShInterfaceRequestsOut=bwShInterfaceRequestsOut, bwSeriesCompletionSPNumAttempts=bwSeriesCompletionSPNumAttempts, bwCommPilotCallMgrSPNumConference=bwCommPilotCallMgrSPNumConference, bwCAPStatsExternalNotifies=bwCAPStatsExternalNotifies, bwMWIDeliveryToMobileGroupTable=bwMWIDeliveryToMobileGroupTable, soapStats=soapStats, bwHotelingSPEntry=bwHotelingSPEntry, bwSmdiOutgoingMWIActivationRequests=bwSmdiOutgoingMWIActivationRequests, bwXSTcpServersNbBytesReceivedSecure=bwXSTcpServersNbBytesReceivedSecure, bwLocationControlGroupEntry=bwLocationControlGroupEntry, sd8=sd8, bwPhysicalLocationGroupTable=bwPhysicalLocationGroupTable, bwCAPStatsRegisterResponsesEntry=bwCAPStatsRegisterResponsesEntry, bwNumberOfServiceTypeAssignedSystem=bwNumberOfServiceTypeAssignedSystem, bwSOAPMaxSessions=bwSOAPMaxSessions, bwRingTimeoutGroupIndex=bwRingTimeoutGroupIndex, bwAsRealTimeAccntGroup=bwAsRealTimeAccntGroup, psOciStatsGroupRequestsPerHour=psOciStatsGroupRequestsPerHour, bwPSTcpServersNbConnectionsInitiated=bwPSTcpServersNbConnectionsInitiated, bwSipStatsOtherResponsesTable=bwSipStatsOtherResponsesTable, bwCallingLineIDDeliveryBlockGroupID=bwCallingLineIDDeliveryBlockGroupID, bwMGCPStatsDeleteConnectionResponseTable=bwMGCPStatsDeleteConnectionResponseTable, sessionAudit=sessionAudit, bwTwoStageDialingSPTable=bwTwoStageDialingSPTable, outgoingCallingPlan=outgoingCallingPlan, bwXSMonitoringExecutorNbWarnings=bwXSMonitoringExecutorNbWarnings, bwAsPreferredCarrierServiceGroup=bwAsPreferredCarrierServiceGroup, bwShInterfacePushNotificationRequest=bwShInterfacePushNotificationRequest, bwSipStatsNotifyResponseIns=bwSipStatsNotifyResponseIns, bwFlashThreeWayCallSPID=bwFlashThreeWayCallSPID, bwIMSNumKeepAlive=bwIMSNumKeepAlive, bwACBExpired=bwACBExpired, bwFlashCallTransferSPTable=bwFlashCallTransferSPTable, bwAutoAttendantSPTable=bwAutoAttendantSPTable, bwSipStatsRetryResponses=bwSipStatsRetryResponses, bwSimRingPersonalSPIndex=bwSimRingPersonalSPIndex, bwTrunkSPTerminationAttempt=bwTrunkSPTerminationAttempt, bwSipStatsOptionsResponsesEntry=bwSipStatsOptionsResponsesEntry, bwAccountCodesSPID=bwAccountCodesSPID, bwMGCPStatsExtraCommandOuts=bwMGCPStatsExtraCommandOuts, bwSelectiveCallAcceptanceSPID=bwSelectiveCallAcceptanceSPID, bwAsCallCapacityServiceGroup=bwAsCallCapacityServiceGroup, bwSequentialRingSPActivations=bwSequentialRingSPActivations, bwVMRGroupDeleteAllMsgsAttempts=bwVMRGroupDeleteAllMsgsAttempts, bwCFNRcGroupID=bwCFNRcGroupID, bwInstantConferencingSPIndex=bwInstantConferencingSPIndex, psSystemInternalQueueName=psSystemInternalQueueName, bwAsWholeSalesGroup=bwAsWholeSalesGroup, psOCIReportingBackLogMessageEntry=psOCIReportingBackLogMessageEntry, bwACBStarted=bwACBStarted, bwXSTcpServersNbBytesSent=bwXSTcpServersNbBytesSent, bwAccountCodesGroupTable=bwAccountCodesGroupTable, bwIPPhoneSPIndex=bwIPPhoneSPIndex, bwWSPStatsServiceAcknowledgementsOut=bwWSPStatsServiceAcknowledgementsOut, incomingCallingPlan=incomingCallingPlan, psShInterfaceModule=psShInterfaceModule, bwOCPGroupNumIntlCallsBlocked=bwOCPGroupNumIntlCallsBlocked, bwAutoAttendantSPID=bwAutoAttendantSPID, bwAuthenticationGroupIndex=bwAuthenticationGroupIndex, bwAsCallCenterServiceGroup=bwAsCallCenterServiceGroup, psBwVMRGroupIndex=psBwVMRGroupIndex, bwNRSStatsTableNbResponsesReceived=bwNRSStatsTableNbResponsesReceived, bwFamilySimRingNumBusy=bwFamilySimRingNumBusy, bwSipStatsByeResponseOuts=bwSipStatsByeResponseOuts, bwXSAvgQueryTime=bwXSAvgQueryTime, bwSipStatsTcpOuts=bwSipStatsTcpOuts, bwMWIDeliveryToMobileGroup=bwMWIDeliveryToMobileGroup, bwSOAPAvgSessions=bwSOAPAvgSessions, bwCommPilotCallMgrGroupNumConferenceRelease=bwCommPilotCallMgrGroupNumConferenceRelease, bwLocationControlSPEntry=bwLocationControlSPEntry, bwBroadWorksAnywhereSPTable=bwBroadWorksAnywhereSPTable, bwXSTcpServersStatsEntry=bwXSTcpServersStatsEntry, bwCallPickupGroupIndex=bwCallPickupGroupIndex, databaseModule=databaseModule, bwCallForwardingAlwaysSPTable=bwCallForwardingAlwaysSPTable, bwMessagingQueryNoUser=bwMessagingQueryNoUser, bwCAPMonitoringUsersRequests=bwCAPMonitoringUsersRequests, bwExternalCallLogsRetransmittedFromQueue=bwExternalCallLogsRetransmittedFromQueue, bwSipStatsNotifyResponseOuts=bwSipStatsNotifyResponseOuts, bwNumberOfDNDefined=bwNumberOfDNDefined, bwFlashConsultationGroupEntry=bwFlashConsultationGroupEntry, bwMGCPStatsNotifyIns=bwMGCPStatsNotifyIns, bwCFNRcNumForwarded=bwCFNRcNumForwarded, bwICPGroupNumInterGroupBlocks=bwICPGroupNumInterGroupBlocks, bwExternalCustomRingbackSPEntry=bwExternalCustomRingbackSPEntry, bwExternalCustomRingbackGroupIndex=bwExternalCustomRingbackGroupIndex, bwDirectedCallPickupGroupNumFailures=bwDirectedCallPickupGroupNumFailures, bwPSTcpServersNbConnectionsAccepted=bwPSTcpServersNbConnectionsAccepted, externalCustomRingback=externalCustomRingback, bwSipStatsRegisterOuts=bwSipStatsRegisterOuts, bwAHRGroupEntry=bwAHRGroupEntry, bwACBMaxSession=bwACBMaxSession, psRemoteXla=psRemoteXla, bwFlashConsultationNumCalls=bwFlashConsultationNumCalls, bwVMRGroupNumForwardSendGroupAttempts=bwVMRGroupNumForwardSendGroupAttempts, bwMaliciousCallTraceGroupEntry=bwMaliciousCallTraceGroupEntry, bwFaxMessagingSPIndex=bwFaxMessagingSPIndex, bwFlashCallTransferGroupIndex=bwFlashCallTransferGroupIndex, broadworksAnywhere=broadworksAnywhere, bwDiversionInhibitorSPTable=bwDiversionInhibitorSPTable, bwCFNRcSPID=bwCFNRcSPID, bwCallpSPMaximumNumberofSimVideoCallsExceeded=bwCallpSPMaximumNumberofSimVideoCallsExceeded, bwBASPCallOriginations=bwBASPCallOriginations, bwAsCallingNameQueriesServiceGroup=bwAsCallingNameQueriesServiceGroup, bwSipStatsMsgRetryPercentageToOther=bwSipStatsMsgRetryPercentageToOther, bwSmppInvalidSubmitSMResponsesReceived=bwSmppInvalidSubmitSMResponsesReceived, bwPSMonitoringExecutorTaskQueueSize=bwPSMonitoringExecutorTaskQueueSize, bwAsCFAlwaysServiceGroup=bwAsCFAlwaysServiceGroup, callingNameRetrieval=callingNameRetrieval, bwSystemSPIndex=bwSystemSPIndex, bwCallNotifyGroupID=bwCallNotifyGroupID, bwSD8SPEntry=bwSD8SPEntry, bwAHRGroupTable=bwAHRGroupTable, bwCallpSPMaximumCallTimeforUnansweredCallsExceeded=bwCallpSPMaximumCallTimeforUnansweredCallsExceeded, bwInterceptSPTable=bwInterceptSPTable, bwMGCPStatsRestartInProgressResponseEntry=bwMGCPStatsRestartInProgressResponseEntry, psOciStatsNbAuthorizationRequests=psOciStatsNbAuthorizationRequests, bwGroupDiversionInhibited=bwGroupDiversionInhibited, bwVMRSPNumForwardSendAttempts=bwVMRSPNumForwardSendAttempts, bwSD8GroupNumTimesDialed=bwSD8GroupNumTimesDialed, bwFlashCallTransferSPNumTransfers=bwFlashCallTransferSPNumTransfers, bwThirdPartyVMailSPTable=bwThirdPartyVMailSPTable, bwAccountCodesGroupEntry=bwAccountCodesGroupEntry, bwOCPGroupNumChargeableDirAssistCallsBlocked=bwOCPGroupNumChargeableDirAssistCallsBlocked, psTtConnectionPoolSize=psTtConnectionPoolSize, tcpModule=tcpModule, bwThirdPartyVMailSPIndex=bwThirdPartyVMailSPIndex, bwFaxMessagingGroupReceptionFailure=bwFaxMessagingGroupReceptionFailure, concurrentStats=concurrentStats, bwSD100SPProgram=bwSD100SPProgram, psSystemInternalQueueTimeMaxTimestampMSB=psSystemInternalQueueTimeMaxTimestampMSB, bwInterceptGroupID=bwInterceptGroupID, musicOnHold=musicOnHold, bwOCPNumGroupCallsBlocked=bwOCPNumGroupCallsBlocked, ttNbBackdoorUpdates=ttNbBackdoorUpdates, bwCFNANumPhoneDeactivations=bwCFNANumPhoneDeactivations, bwAnonymousCallRejectionSPID=bwAnonymousCallRejectionSPID, bwDnsStatsQueries=bwDnsStatsQueries, bwFlashCallTransferGroupID=bwFlashCallTransferGroupID, bwCallForwardingNoAnswerSPTable=bwCallForwardingNoAnswerSPTable, bwCongestionManagementNeighborRegisterIn=bwCongestionManagementNeighborRegisterIn, bwOCPGroupNumSuccessfulAuthorizations=bwOCPGroupNumSuccessfulAuthorizations, bwSipStatsUpdateResponseOuts=bwSipStatsUpdateResponseOuts, bwMGCPStatsModifyConnectionResponseIns=bwMGCPStatsModifyConnectionResponseIns, psSystemInternalQueueEntry=psSystemInternalQueueEntry, bwACBGroupExpired=bwACBGroupExpired, bwCallForwardingBusySPTable=bwCallForwardingBusySPTable, bwACBSPEntry=bwACBSPEntry, twoStageDialing=twoStageDialing, bwCallWaitingSPIndex=bwCallWaitingSPIndex, bwVMMultiMediaGreetingRecorded=bwVMMultiMediaGreetingRecorded, bwSD8SPNumTimesProgrammed=bwSD8SPNumTimesProgrammed, bwOCPNumCasualCallsBlocked=bwOCPNumCasualCallsBlocked, bwDirectedCallPickupSPIndex=bwDirectedCallPickupSPIndex, bwPTTGroupID=bwPTTGroupID, mct=mct, bwCustomRingbackUserVideoAttempts=bwCustomRingbackUserVideoAttempts, bwHuntGroupsGroupID=bwHuntGroupsGroupID, bwMGCPStatsSetupSignalDelay=bwMGCPStatsSetupSignalDelay, bwCotSPEntry=bwCotSPEntry, bwSequentialRingSPEntry=bwSequentialRingSPEntry, bwCommPilotCallMgrNumCallParkRetrieve=bwCommPilotCallMgrNumCallParkRetrieve, bwOCPGroupNumCasualCallsBlocked=bwOCPGroupNumCasualCallsBlocked, bwFlashCallWaitingNumAnswers=bwFlashCallWaitingNumAnswers, bwDirectedCallPickupSPTable=bwDirectedCallPickupSPTable, bwVAOIncomingSuccess=bwVAOIncomingSuccess, psRemoteXlaUpdatesPending=psRemoteXlaUpdatesPending, bwCallingLineIDDeliveryPerCallGroup=bwCallingLineIDDeliveryPerCallGroup, bwMCPResourceAllocAttempts=bwMCPResourceAllocAttempts, bwIPPhoneSPTable=bwIPPhoneSPTable, bwDNDSPNumPhoneActivations=bwDNDSPNumPhoneActivations, bwAsSelectiveCallForwardServiceGroup=bwAsSelectiveCallForwardServiceGroup, bwFlashConsultationGroupTable=bwFlashConsultationGroupTable, bwServiceTypeSystemIndex=bwServiceTypeSystemIndex, bwActivatableFeatureIndex=bwActivatableFeatureIndex, bwCotGroupFailureNoId=bwCotGroupFailureNoId, bwBASPCallTerminations=bwBASPCallTerminations, bwVPSPNumPasscodeChanged=bwVPSPNumPasscodeChanged, bwTrunkGroupPerTGBursting=bwTrunkGroupPerTGBursting, bwSD100SPTable=bwSD100SPTable, bwPTTReject=bwPTTReject, bwSeriesCompletionSPIndex=bwSeriesCompletionSPIndex, bwCommPilotCallMgrSPNumConferenceRelease=bwCommPilotCallMgrSPNumConferenceRelease, bwCFADestinationChanged=bwCFADestinationChanged, callWaiting=callWaiting, bwSeriesCompletionNumBusy=bwSeriesCompletionNumBusy, bwCallCapacityGroupEntry=bwCallCapacityGroupEntry, bwSeriesCompletionNumAttempts=bwSeriesCompletionNumAttempts, bwSipStatsRegisterResponsesTable=bwSipStatsRegisterResponsesTable, bwCallpSPUserOriginationAttempts=bwCallpSPUserOriginationAttempts, bwThirdPartyVoiceMailGroupNbOfCFWBusy=bwThirdPartyVoiceMailGroupNbOfCFWBusy, bwVMNumMessagesLeft=bwVMNumMessagesLeft, bwSipStatsByeResponseIns=bwSipStatsByeResponseIns, bwCommPilotCallMgrSPNumAnswer=bwCommPilotCallMgrSPNumAnswer, bwFlashConsultationSPIndex=bwFlashConsultationSPIndex, pmtModule=pmtModule, bwSelectiveCallRejectionGroupTable=bwSelectiveCallRejectionGroupTable, bwCallForwardingBusyGroupTable=bwCallForwardingBusyGroupTable, bwExternalCustomRingbackSPTable=bwExternalCustomRingbackSPTable, bwCAPStatsSessionUpdatesOut=bwCAPStatsSessionUpdatesOut, bwDPUBIGroupID=bwDPUBIGroupID, bwIGCSPIndex=bwIGCSPIndex, bwCallRetrieveGroupTable=bwCallRetrieveGroupTable, bwExternalCallLogsRetransmitted=bwExternalCallLogsRetransmitted, bwAutoAttendantSPEntry=bwAutoAttendantSPEntry, ldapModule=ldapModule, bwMGCPStatsMGCPResponseIns=bwMGCPStatsMGCPResponseIns, bwPSMonitoringExecutorNbErrors=bwPSMonitoringExecutorNbErrors, bwCallParkSPNumAttempts=bwCallParkSPNumAttempts, bwSD8NumTimesDialed=bwSD8NumTimesDialed, bwSipStatsMessageResponseOuts=bwSipStatsMessageResponseOuts, bwCFGNASPOverflowForward=bwCFGNASPOverflowForward, provisioningServer=provisioningServer, diversionInhibitor=diversionInhibitor, bwSD100Program=bwSD100Program, bwCallpGroupTable=bwCallpGroupTable, bwMGCPStatsCreateConnectionResponseTable=bwMGCPStatsCreateConnectionResponseTable, psOciStatsMinSystemRequestResponseTime=psOciStatsMinSystemRequestResponseTime, realtimeAccountingStats=realtimeAccountingStats, bwOCPGroupNumPremiumServices2CallsBlocked=bwOCPGroupNumPremiumServices2CallsBlocked, bwFlashCallWaitingGroupNumAnswers=bwFlashCallWaitingGroupNumAnswers, callReturn=callReturn, bwInterceptSPEntry=bwInterceptSPEntry, commPilotCallManager=commPilotCallManager, bwOCPNumTransfers=bwOCPNumTransfers, bwDoNotDisturbGroupTable=bwDoNotDisturbGroupTable, bwAsInstantConferencingServiceGroup=bwAsInstantConferencingServiceGroup, bwNumberOfDeviceType=bwNumberOfDeviceType, bwShInterfacePushNotificationRequestFailure=bwShInterfacePushNotificationRequestFailure, bwOCPSACGroupNumSuccessfulUnlock=bwOCPSACGroupNumSuccessfulUnlock, bwCFNRcGroupIndex=bwCFNRcGroupIndex, bwNoIndicationUserPIC=bwNoIndicationUserPIC, bwSelectiveCallRejectionGroupID=bwSelectiveCallRejectionGroupID, bwCallParkSPIndex=bwCallParkSPIndex)
mibBuilder.exportSymbols("BW-BroadworksApplicationServer", bwCFGNASPEntry=bwCFGNASPEntry, bwAHRGroupID=bwAHRGroupID, bwTrunkGroupPerTGEntry=bwTrunkGroupPerTGEntry, bwHotelingDisassociate=bwHotelingDisassociate, bwTrunkGroupTerminationBlocked=bwTrunkGroupTerminationBlocked, bwCFNRcSPNumForwarded=bwCFNRcSPNumForwarded, bwSimRingPersonalGroupNumAttempts=bwSimRingPersonalGroupNumAttempts, bwCallingLineIDDeliveryBlockGroupTable=bwCallingLineIDDeliveryBlockGroupTable, bwCallWaitingSPTable=bwCallWaitingSPTable, bwMGCPStatsExtraCommandResponseEntry=bwMGCPStatsExtraCommandResponseEntry, bwXSTcpServersOutgoingQueueSize=bwXSTcpServersOutgoingQueueSize, bwCommPilotCallMgrSPNumDial=bwCommPilotCallMgrSPNumDial, bwOCPSACGroupNumUnsuccessfulCodeUsage=bwOCPSACGroupNumUnsuccessfulCodeUsage, bwNumberOfDeviceTypeSystem=bwNumberOfDeviceTypeSystem, bwInterceptGroupTransfers=bwInterceptGroupTransfers, bwCallNotifySPID=bwCallNotifySPID, bwDoNotDisturbSPTable=bwDoNotDisturbSPTable, bwAsSipGroup=bwAsSipGroup, bwTrunkGroupPerTGCapacityExceededInitialValue=bwTrunkGroupPerTGCapacityExceededInitialValue, bwDPUBIGroupExempt=bwDPUBIGroupExempt, bwInstantConferencingGroupID=bwInstantConferencingGroupID, bwMGCPStatsMGCPCommandResponseCodeValue=bwMGCPStatsMGCPCommandResponseCodeValue, bwEZSPNormalCallsRejected=bwEZSPNormalCallsRejected, bwPSTTHWMName=bwPSTTHWMName, psOciStatsUserRequestsPerHour=psOciStatsUserRequestsPerHour, bwDndPhoneDeactivations=bwDndPhoneDeactivations, bwAHRRetrieve=bwAHRRetrieve, bwCommPilotCallMgrSPNumCallParkRetrieve=bwCommPilotCallMgrSPNumCallParkRetrieve, bwSCACallRetrieveSuccess=bwSCACallRetrieveSuccess, bwCallPickupSPTable=bwCallPickupSPTable, bwIncomingCallingPlanGroupID=bwIncomingCallingPlanGroupID, bwCallForwardingNotReachableGroupTable=bwCallForwardingNotReachableGroupTable, bwCommonCommXSHost=bwCommonCommXSHost, bwICSAMonitoringStarted=bwICSAMonitoringStarted, bwTrunkOriginationAttempt=bwTrunkOriginationAttempt, bwCAPStatsResponseAuthentications=bwCAPStatsResponseAuthentications, bwCPEDeviceReset=bwCPEDeviceReset, bwOutgoingCallingPlanSPIndex=bwOutgoingCallingPlanSPIndex, bwSPNonSubscriptionDialedGroupPIC=bwSPNonSubscriptionDialedGroupPIC, bwSessionAuditSPEntry=bwSessionAuditSPEntry, bwMGCPStatsNotifyResponseEntry=bwMGCPStatsNotifyResponseEntry, bwNbRequestsReceived=bwNbRequestsReceived, bwSCFGroupNumForwards=bwSCFGroupNumForwards, bwCWNumPhoneCancellations=bwCWNumPhoneCancellations, bwExternalCustomRingbackGroupID=bwExternalCustomRingbackGroupID, callForwardingAlways=callForwardingAlways, bwAsSmtpGroup=bwAsSmtpGroup, bwDPUBIExempt=bwDPUBIExempt, bwOCPNumTollCallsBlocked=bwOCPNumTollCallsBlocked, bwAsMcpGroup=bwAsMcpGroup, bwDNDGroupNumPhoneDeactivations=bwDNDGroupNumPhoneDeactivations, bwAutoAttendantGroupID=bwAutoAttendantGroupID, bwPriorityAlertNumDistinctive=bwPriorityAlertNumDistinctive, bwFlashConsultationSPID=bwFlashConsultationSPID, bwSipStatsRegisterResponseOuts=bwSipStatsRegisterResponseOuts, bwPSTcpServersStatsIndex=bwPSTcpServersStatsIndex, bwNRSStatsTableNbRequestsSent=bwNRSStatsTableNbRequestsSent, bwInCallServiceActivationGroupTable=bwInCallServiceActivationGroupTable, bwAuthenticationSPNumChallenges=bwAuthenticationSPNumChallenges, bwPhysicalLocationGroupOriginationBlocked=bwPhysicalLocationGroupOriginationBlocked, videoAddOn=videoAddOn, bwCallingLineIDDeliveryBlockSPID=bwCallingLineIDDeliveryBlockSPID, bwSipStatsMessageIns=bwSipStatsMessageIns, bwIPPhoneGroupID=bwIPPhoneGroupID, sd100=sd100, bwNumCallRedZoneOverloadTrans=bwNumCallRedZoneOverloadTrans, bwCotSPActivation=bwCotSPActivation, bwOCPSPNumIntlCallsBlocked=bwOCPSPNumIntlCallsBlocked, bwPTTGroupInvoke=bwPTTGroupInvoke, bwExternalCustomRingbackSPAttempts=bwExternalCustomRingbackSPAttempts, bwLastNumberRedialGroupIndex=bwLastNumberRedialGroupIndex, bwAsSessionAuditServiceGroup=bwAsSessionAuditServiceGroup, accountCodes=accountCodes, bwCallCapacitySPEntry=bwCallCapacitySPEntry, bwSipStatsMsgRetryToNeTable=bwSipStatsMsgRetryToNeTable, bwMGCPStatsRestartInProgressIns=bwMGCPStatsRestartInProgressIns, bwSD8GroupTable=bwSD8GroupTable, bwSequentialRingGroupActivations=bwSequentialRingGroupActivations, bwLastNumberRedialGroupTable=bwLastNumberRedialGroupTable, dnsModule=dnsModule, bwSipStatsByeResponseCodeValue=bwSipStatsByeResponseCodeValue, bwCallRetrieveSPID=bwCallRetrieveSPID, bwCotGroupIndex=bwCotGroupIndex, bwCPEDeviceStatsIndex=bwCPEDeviceStatsIndex, bwFlashCallTransferSPEntry=bwFlashCallTransferSPEntry, psSystemInternalQueueLengthCurrent=psSystemInternalQueueLengthCurrent, bwEZEmergencyCallsRejected=bwEZEmergencyCallsRejected, mwiDeliveryToMobile=mwiDeliveryToMobile, bwAsMediaResourceGroup=bwAsMediaResourceGroup, locationControl=locationControl, bwMGCPStatsNotifyResponseCodeValue=bwMGCPStatsNotifyResponseCodeValue, bwFlashCallHoldSPNumActivations=bwFlashCallHoldSPNumActivations, systemStats=systemStats, psOssStats=psOssStats, bwXSTTHWMTimestamp=bwXSTTHWMTimestamp, bwCallingLineIDDeliveryBlockGroupEntry=bwCallingLineIDDeliveryBlockGroupEntry, bwDoNotDisturbGroupIndex=bwDoNotDisturbGroupIndex, bwDPUBIGroupBargeInFailure=bwDPUBIGroupBargeInFailure, bwPTTInvoke=bwPTTInvoke, bwCallReturnSPNumReturns=bwCallReturnSPNumReturns, bwMWIGroupIndex=bwMWIGroupIndex, bwCommonCommXSInputMessagesProcessed=bwCommonCommXSInputMessagesProcessed, bwSipStatsCancelResponseCodeValue=bwSipStatsCancelResponseCodeValue, bwDeviceTypeSystemTable=bwDeviceTypeSystemTable, cpeDevicesStats=cpeDevicesStats, bwShInterfacePublicIdentityRefreshInitiated=bwShInterfacePublicIdentityRefreshInitiated, bwXSMonitoringExecutorMaxPoolSize=bwXSMonitoringExecutorMaxPoolSize, bwVMRNumForwardSendGroupAttempts=bwVMRNumForwardSendGroupAttempts, management=management, bwExternalCustomRingbackGroupAttempts=bwExternalCustomRingbackGroupAttempts, bwLDAPIntegrationNumConnectionFailures=bwLDAPIntegrationNumConnectionFailures, bwMGCPStatsEndpointConfigurationOuts=bwMGCPStatsEndpointConfigurationOuts, bwIPPhoneSPEntry=bwIPPhoneSPEntry, bwTrunkGroupPerTGBurstingMaxActiveCalls=bwTrunkGroupPerTGBurstingMaxActiveCalls, bwXSTTHWMTable=bwXSTTHWMTable, bwBAGroupCallTerminations=bwBAGroupCallTerminations, bwRingTimeoutGroupEntry=bwRingTimeoutGroupEntry, bwCallNotifySPTable=bwCallNotifySPTable, bwMusicOnHoldSPEntry=bwMusicOnHoldSPEntry, bwCFNRcGroupNumPhoneDeactivations=bwCFNRcGroupNumPhoneDeactivations, bwCommPilotCallMgrGroupNumConference=bwCommPilotCallMgrGroupNumConference, psNSSyncStats=psNSSyncStats, bwPSMonitoringExecutorNbTasksRun=bwPSMonitoringExecutorNbTasksRun, bwAutoAttendantGroupEntry=bwAutoAttendantGroupEntry, bwAsCalWaitingServiceGroup=bwAsCalWaitingServiceGroup, bwFlashCallWaitingGroupIndex=bwFlashCallWaitingGroupIndex, bwAsPhysicalLocationServiceGroup=bwAsPhysicalLocationServiceGroup, bwCAPStatsCallUpdatesOut=bwCAPStatsCallUpdatesOut, bwExternalCallLogsTransmittedFromQueue=bwExternalCallLogsTransmittedFromQueue, bwCallReturnSPEntry=bwCallReturnSPEntry, bwVMRSPNumSendListFailed=bwVMRSPNumSendListFailed, bwBroadWorksAnywhereGroupEntry=bwBroadWorksAnywhereGroupEntry, bwCommonCommXSStatsIndex=bwCommonCommXSStatsIndex, bwSelectiveCallAcceptanceGroupTable=bwSelectiveCallAcceptanceGroupTable, callCapacity=callCapacity, bwRingTimeoutGroupID=bwRingTimeoutGroupID, bwAsProtocolMonitorGroup=bwAsProtocolMonitorGroup, bwTwoStageDialingGroupEntry=bwTwoStageDialingGroupEntry, bwPSTTHWMValue=bwPSTTHWMValue, bwIPPhoneSPNumForwards=bwIPPhoneSPNumForwards, bwCustomRingbackGroupTable=bwCustomRingbackGroupTable, bwAHRSPRetrieve=bwAHRSPRetrieve, bwSCRSPNumRejects=bwSCRSPNumRejects, bwSystemInternalQueueTimeMaxTimestampMSB=bwSystemInternalQueueTimeMaxTimestampMSB, bwSelectiveCallForwardGroupID=bwSelectiveCallForwardGroupID, bwSipStatsOtherResponseIns=bwSipStatsOtherResponseIns, bwEZRegistrationsRejected=bwEZRegistrationsRejected, bwGroupSubscriptionUserPIC=bwGroupSubscriptionUserPIC, bwEZSPEntry=bwEZSPEntry, bwMGCPStatsAuditConnectionOuts=bwMGCPStatsAuditConnectionOuts, bwMGCPStatsCreateConnectionResponseIns=bwMGCPStatsCreateConnectionResponseIns, bwDPUBIGroupBargeIn=bwDPUBIGroupBargeIn, bwSipStatsPrackResponsesTable=bwSipStatsPrackResponsesTable, bwSipStatsOtherResponseCodeValue=bwSipStatsOtherResponseCodeValue, bwSessionAuditGroupTable=bwSessionAuditGroupTable, bwCFNAGroupNumPhoneDeactivations=bwCFNAGroupNumPhoneDeactivations, bwInstantConferencingTodaysPeakUsage=bwInstantConferencingTodaysPeakUsage, bwEZGroupRegistrationsRejected=bwEZGroupRegistrationsRejected, bwXSTTHWMIndex=bwXSTTHWMIndex, bwAnonymousCallRejectionGroupEntry=bwAnonymousCallRejectionGroupEntry, bwICSAFlashDigitsDetected=bwICSAFlashDigitsDetected, bwFaxMessagingGroupID=bwFaxMessagingGroupID, bwDiversionInhibitorGroupEntry=bwDiversionInhibitorGroupEntry, bwInterceptGroupOriginationInvocations=bwInterceptGroupOriginationInvocations, bwOCPSACGroupNumUnsuccessfulLock=bwOCPSACGroupNumUnsuccessfulLock, bwVPCSPCall=bwVPCSPCall, bwCallCenterGroupEntry=bwCallCenterGroupEntry, bwSipStatsMsgRetryToNeEntry=bwSipStatsMsgRetryToNeEntry, bwAlternateNumbersSPEntry=bwAlternateNumbersSPEntry, bwCFASPNumPhoneActivations=bwCFASPNumPhoneActivations, bwMessagingSPQueryNoUser=bwMessagingSPQueryNoUser, bwMCPCommandsTransmitted=bwMCPCommandsTransmitted, priorityAlert=priorityAlert, lastNumberRedial=lastNumberRedial, bwInCallServiceActivationSPEntry=bwInCallServiceActivationSPEntry, bwCAPStatsRegisterResponsesTable=bwCAPStatsRegisterResponsesTable, bwMediaResourceAllocAttempts=bwMediaResourceAllocAttempts, bwThirdPartyMWIControlNotifyIns=bwThirdPartyMWIControlNotifyIns, bwVMNumBusyGreetingsPlayed=bwVMNumBusyGreetingsPlayed, bwCallForwardingBusySPID=bwCallForwardingBusySPID, bwAccountCodeNumPerCallAttempts=bwAccountCodeNumPerCallAttempts, bwIMSSuccessfulDownLoadAttempts=bwIMSSuccessfulDownLoadAttempts, psSystemInternalQueueTimeMax=psSystemInternalQueueTimeMax, bwSubscriptionUserPIC=bwSubscriptionUserPIC, bwSipStatsInviteResponsesTable=bwSipStatsInviteResponsesTable, bwMultiMediaMsgDeposit=bwMultiMediaMsgDeposit, bwOCPSACNumUnsuccessfulUnlock=bwOCPSACNumUnsuccessfulUnlock, callPark=callPark, callForwardingBusy=callForwardingBusy, bwCommPilotCallMgrGroupNumHold=bwCommPilotCallMgrGroupNumHold, bwCallpSPMaximumCallTimeforAnsweredCallsExceeded=bwCallpSPMaximumCallTimeforAnsweredCallsExceeded, bwTrunkOriginationBlocked=bwTrunkOriginationBlocked, bwCongestionManagementNeighborIpAddress=bwCongestionManagementNeighborIpAddress, bwTrunkGroupPerTGBurstingMaxIncomingActiveCalls=bwTrunkGroupPerTGBurstingMaxIncomingActiveCalls, bwDirectedCallPickupGroupID=bwDirectedCallPickupGroupID, bwVMRNumSendListFailed=bwVMRNumSendListFailed, bwNRSStatsTableNbResponsesSent=bwNRSStatsTableNbResponsesSent, bwSequentialRingSPNumAttempts=bwSequentialRingSPNumAttempts, bwSystemInternalQueueLengthMax=bwSystemInternalQueueLengthMax, bwCommPilotCallMgrGroupNumConferenceAnswer=bwCommPilotCallMgrGroupNumConferenceAnswer, bwCallCenterSPEntry=bwCallCenterSPEntry, bwSCASPNumAcceptances=bwSCASPNumAcceptances, bwMGCPStatsDeleteConnectionResponseEntry=bwMGCPStatsDeleteConnectionResponseEntry, bwAlternateNumbersSPIndex=bwAlternateNumbersSPIndex, bwNumberOfSPDeviceType=bwNumberOfSPDeviceType, bwSessionAuditNumCallsAudited=bwSessionAuditNumCallsAudited, bwSipStatsOptionsResponseCodeValue=bwSipStatsOptionsResponseCodeValue, bwAsCallForwardGroupNoAnswerServiceGroup=bwAsCallForwardGroupNoAnswerServiceGroup, psSystemInternalQueueIndex=psSystemInternalQueueIndex, bwDeviceTypeSystemID=bwDeviceTypeSystemID, bwXSAvgRowsUpdated=bwXSAvgRowsUpdated, bwAuthenticationGroupID=bwAuthenticationGroupID, bwMGCPStatsExtraCommandResponseIns=bwMGCPStatsExtraCommandResponseIns, bwMaliciousCallTraceGroupIndex=bwMaliciousCallTraceGroupIndex, bwExternalCallLogsRetrievalFailures=bwExternalCallLogsRetrievalFailures, databaseStats=databaseStats, bwAuthenticationGroupEntry=bwAuthenticationGroupEntry, bwLNRSPNumRedials=bwLNRSPNumRedials, bwSmppSubmitSMRequestsSent=bwSmppSubmitSMRequestsSent, bwNumberOfGroupDeviceType=bwNumberOfGroupDeviceType, bwSPDiversionInhibited=bwSPDiversionInhibited, bwVAOGroupIndex=bwVAOGroupIndex, bwHotelingSPIndex=bwHotelingSPIndex, bwOCPGroupNumGroupCallsBlocked=bwOCPGroupNumGroupCallsBlocked, xsRemoteXlaNbTimesDisconnected=xsRemoteXlaNbTimesDisconnected, bwFlashConsultationGroupIndex=bwFlashConsultationGroupIndex, acb=acb, bwSipStatsNotifyResponsesTable=bwSipStatsNotifyResponsesTable, bwBroadWorksAnywhereGroupID=bwBroadWorksAnywhereGroupID, bwPreferredCarrierSPEntry=bwPreferredCarrierSPEntry, bwXSAvgUpdateTime=bwXSAvgUpdateTime, bwCAPStatsUnsuccessfulRegisterResponses=bwCAPStatsUnsuccessfulRegisterResponses, bwDnsStatsQueriesTable=bwDnsStatsQueriesTable, resetAllCounters=resetAllCounters, bwSystemGroupID=bwSystemGroupID, bwCallpGroupUserTerminationsAnswered=bwCallpGroupUserTerminationsAnswered, bwCPEDeviceStatsTable=bwCPEDeviceStatsTable, bwVAOSPOutgoingAttempts=bwVAOSPOutgoingAttempts, bwEZGroupIndex=bwEZGroupIndex, callNotify=callNotify, bwCFNRcDestinationChanged=bwCFNRcDestinationChanged, bwNumDiscardedMessage=bwNumDiscardedMessage, bwCAPStatsQueueUpdatesOut=bwCAPStatsQueueUpdatesOut, bwPreferredCarrierSPID=bwPreferredCarrierSPID, bwIMSAvgServiceTime=bwIMSAvgServiceTime, bwSimRingPersonalGroupTable=bwSimRingPersonalGroupTable, bwSipStatsUdpOuts=bwSipStatsUdpOuts, bwHuntGroupsGroupDNHIncomingCalls=bwHuntGroupsGroupDNHIncomingCalls, bwCallPickupGroupNumFailures=bwCallPickupGroupNumFailures, bwSelectiveCallForwardGroupEntry=bwSelectiveCallForwardGroupEntry, bwCallpGroupUserOriginationAttempts=bwCallpGroupUserOriginationAttempts, bwVMRNumPersonalizedNamesRecorded=bwVMRNumPersonalizedNamesRecorded, bwICPNumCollectCallBlocks=bwICPNumCollectCallBlocks, bwCotSPFailureNoId=bwCotSPFailureNoId)
mibBuilder.exportSymbols("BW-BroadworksApplicationServer", preferredCarrier=preferredCarrier, bwXSTcpServersName=bwXSTcpServersName, bwCallpGroupMaximumCallTimeforUnansweredCallsExceeded=bwCallpGroupMaximumCallTimeforUnansweredCallsExceeded, bwVMRSPNumLoginAttempts=bwVMRSPNumLoginAttempts, bwAsExtEmergencyRtgStatsGroup=bwAsExtEmergencyRtgStatsGroup, bwPMTNumMonitorsCreated=bwPMTNumMonitorsCreated, bwPriorityAlertGroupTable=bwPriorityAlertGroupTable, callpStats=callpStats, bwCallpUserTerminationAttempts=bwCallpUserTerminationAttempts, bwCommPilotCallMgrGroupNumTransfer=bwCommPilotCallMgrGroupNumTransfer, bwEZGroupNormalCallsRejected=bwEZGroupNormalCallsRejected, polycomGroupIndex=polycomGroupIndex, bwInterceptSPUserTerminationInvocations=bwInterceptSPUserTerminationInvocations, bwSequentialRingGroupEntry=bwSequentialRingGroupEntry, bwCongestionManagementNeighborTable=bwCongestionManagementNeighborTable, bwNRSStatsTableNbErrorsReceived=bwNRSStatsTableNbErrorsReceived, bwSipStatsMessageResponseIns=bwSipStatsMessageResponseIns, bwICPSPNumIntraGroupBlocks=bwICPSPNumIntraGroupBlocks, nrsStats=nrsStats, bwMGCPStatsNotifyResponseTable=bwMGCPStatsNotifyResponseTable, bwCallpUserTerminationsAnswered=bwCallpUserTerminationsAnswered, psRemoteXlaUpdatesProcessed=psRemoteXlaUpdatesProcessed, bwSimRingPersonalSPTable=bwSimRingPersonalSPTable, bwACBGroupEntry=bwACBGroupEntry, bwAsCustomerOriginatedTraceServiceGroup=bwAsCustomerOriginatedTraceServiceGroup, bwCallParkNumRetrieveFailures=bwCallParkNumRetrieveFailures, bwCallCapacitySPIndex=bwCallCapacitySPIndex, bwPhysicalLocationGroupIndex=bwPhysicalLocationGroupIndex, bwCallForwardingNoAnswerSPEntry=bwCallForwardingNoAnswerSPEntry, bwMWISPIndex=bwMWISPIndex, psServices=psServices, bwDPUBIBargeIn=bwDPUBIBargeIn, bwOCPGroupNumTollCallsBlocked=bwOCPGroupNumTollCallsBlocked, bwICGroupPortLimitExceeded=bwICGroupPortLimitExceeded, bwFlashCallHoldNumActivations=bwFlashCallHoldNumActivations, bwLastNumberRedialSPEntry=bwLastNumberRedialSPEntry, bwAsBasicCompliance=bwAsBasicCompliance, anonymousCallRejection=anonymousCallRejection, bwVMNumNoAnswerGreetingsPlayed=bwVMNumNoAnswerGreetingsPlayed, bwCFGNAExternalForward=bwCFGNAExternalForward, bwXSTcpServersNbConnectionsRefused=bwXSTcpServersNbConnectionsRefused, bwSelectiveCallAcceptanceSPEntry=bwSelectiveCallAcceptanceSPEntry, bwVPNumAAAfterHoursGreetingRecorded=bwVPNumAAAfterHoursGreetingRecorded, bwSeriesCompletionGroupNumAttempts=bwSeriesCompletionGroupNumAttempts, bwCustomRingbackGroupEntry=bwCustomRingbackGroupEntry, bwVMRNumLoginFailures=bwVMRNumLoginFailures)
