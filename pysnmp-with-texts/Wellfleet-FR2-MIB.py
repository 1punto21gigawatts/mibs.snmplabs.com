#
# PySNMP MIB module Wellfleet-FR2-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Wellfleet-FR2-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:40:13 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ObjectIdentity, Bits, Unsigned32, Gauge32, Integer32, IpAddress, Counter32, NotificationType, ModuleIdentity, TimeTicks, Counter64, MibIdentifier, iso, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "Bits", "Unsigned32", "Gauge32", "Integer32", "IpAddress", "Counter32", "NotificationType", "ModuleIdentity", "TimeTicks", "Counter64", "MibIdentifier", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
wfFrameRelay2Group, = mibBuilder.importSymbols("Wellfleet-COMMON-MIB", "wfFrameRelay2Group")
wfFrIfDlcmiTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 1), )
if mibBuilder.loadTexts: wfFrIfDlcmiTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrIfDlcmiTable.setDescription('The Parameters for the Data Link Connection Management Interface')
wfFrIfDlcmiEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 1, 1), ).setIndexNames((0, "Wellfleet-FR2-MIB", "wfFrDlcmiLineNumber"), (0, "Wellfleet-FR2-MIB", "wfFrDlcmiLLIndex"))
if mibBuilder.loadTexts: wfFrIfDlcmiEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrIfDlcmiEntry.setDescription('The parameters for a particular Data Link Connection Management Interface')
wfFrDlcmiDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrDlcmiDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrDlcmiDelete.setDescription('Indication to delete this frame relay interface')
wfFrDlcmiDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrDlcmiDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrDlcmiDisable.setDescription('Indicates when a dlcmi entry is to be enabled or disabled.')
wfFrDlcmiLineNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrDlcmiLineNumber.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrDlcmiLineNumber.setDescription('The line number on which this frame relay interface resides. This is the first of two instance identifiers.')
wfFrDlcmiLLIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrDlcmiLLIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrDlcmiLLIndex.setDescription('The Lower layer index uniquely identifies the lower layer in cases where the lower layer may be something other than the physical layer. For example if Frame Relay is running over an ATM VC, the LLIndex identifies the ATM VC.')
wfFrDlcmiCircuit = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrDlcmiCircuit.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrDlcmiCircuit.setDescription('The circuit number of this entry')
wfFrDlcmiManagementType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("none", 1), ("lmi", 2), ("t1617d", 3), ("t1617b", 4), ("annexa", 5), ("lmiswitch", 6), ("annexdswitch", 7), ("annexaswitch", 8))).clone('t1617d')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrDlcmiManagementType.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrDlcmiManagementType.setDescription('This variable indicates which Data Link Connection Management scheme is active (and by implication, what DLCI it uses).')
wfFrDlcmiStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("running", 1), ("fault", 2), ("init", 3), ("notpresent", 4))).clone('notpresent')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrDlcmiStatus.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrDlcmiStatus.setDescription('Indicates the state of the interface. It is called status because this is what it was called in the rfc. FR_STATUS_RUNNING is the sate after the circuit is up (either LMI successful or there is no DLCMI and the system just comes up). FR_STATUS_FAULT is a transient state indicating that errors have caused the circuit to be disabled until DLCMI recovery. FR_STATUS_INITIALIZING is a transient state indicating that the interface is trying to come up. FR_STATUS_NOTPRESENT indicates that the interface is not present. Likely this will never be seen except upon initial configuration.')
wfFrDlcmiAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("q921", 1), ("q922march90", 2), ("q922november90", 3), ("q922", 4))).clone('q922')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrDlcmiAddress.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrDlcmiAddress.setDescription('This states which address format is in use on the FR interface. The default is Q922')
wfFrDlcmiAddressLen = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("twobyte", 2), ("threebyte", 3), ("fourbyte", 4))).clone('twobyte')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrDlcmiAddressLen.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrDlcmiAddressLen.setDescription('This variable states the address length in octets. In the case of Q922 format, the length indicates the entire length of the address includeding the control portion.')
wfFrDlcmiPollingInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 30)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrDlcmiPollingInterval.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrDlcmiPollingInterval.setDescription('The number of seconds between successive status enquiry messages')
wfFrDlcmiFullEnquiryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrDlcmiFullEnquiryInterval.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrDlcmiFullEnquiryInterval.setDescription('The number of status enquiry intervals that pass before issuance of a full status enquiry message.')
wfFrDlcmiErrorThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5000)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrDlcmiErrorThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrDlcmiErrorThreshold.setDescription('This is the maximum number of unanswered Status Enquiries the equipment shall accept before declaring the interface down.')
wfFrDlcmiMonitoredEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5000)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrDlcmiMonitoredEvents.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrDlcmiMonitoredEvents.setDescription("This is the number of status polling intervals over which the error threshold is counted. For example, if within 'MonitoredEvents' number of events the station receives 'ErrorThreshold' number of errors, the interface is marked as down.")
wfFrDlcmiMaxSupportedVCs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrDlcmiMaxSupportedVCs.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrDlcmiMaxSupportedVCs.setDescription('The maximum number of Virtual Circuits allowed for this interface. Usually dictated by the Frame Relay network. The system sets this initially.')
wfFrDlcmiVCsConfigured = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrDlcmiVCsConfigured.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrDlcmiVCsConfigured.setDescription('The number of VCs that are presently configured on the interface.')
wfFrDlcmiMulticast = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrDlcmiMulticast.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrDlcmiMulticast.setDescription('This indicates whether the frame relay provider offers a multicast')
wfFrDlcmiSeqCount = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrDlcmiSeqCount.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrDlcmiSeqCount.setDescription("This station's sequence counter. It represents the next value to send.")
wfFrDlcmiLastReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrDlcmiLastReceived.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrDlcmiLastReceived.setDescription('The sequence number just received from the switch.')
wfFrDlcmiPassiveSeqCount = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrDlcmiPassiveSeqCount.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrDlcmiPassiveSeqCount.setDescription("This station's sequence counter for answering status enquiry.")
wfFrDlcmiPassiveReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrDlcmiPassiveReceived.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrDlcmiPassiveReceived.setDescription('The sequence number just received from the enquring station.')
wfFrDlcmiPolls = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 1, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrDlcmiPolls.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrDlcmiPolls.setDescription('This is the counter of where we are in the polling cycle.')
wfFrDlcmiCongestionDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrDlcmiCongestionDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrDlcmiCongestionDisable.setDescription('This indicates whether the VCs should use the congestion algorithm or not. Each VC may be configured to run the algorithm to override this setting. Those VCs which are configured via the DLCMI interface, will use this setting as their default.')
wfFrDlcmiCongestionTmr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("half", 1), ("one", 2), ("oneandhalf", 3), ("two", 4), ("twoandhalf", 5), ("three", 6), ("threeandhalf", 7), ("four", 8), ("fourandhalf", 9), ("five", 10))).clone('one')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrDlcmiCongestionTmr.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrDlcmiCongestionTmr.setDescription('This is the time period over which congestion notifications are counted. It is also the period during which the VC will cease sending information before resuming transmission if no congestion notifications are received. The timer is kept in 1/2 second intervals.')
wfFrDlcmiCongestionCtr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 1, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 500)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrDlcmiCongestionCtr.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrDlcmiCongestionCtr.setDescription('This represents the number of congestion notifications, when received within wfFrDlcmiCongestionTmr time, will result in the VC ceasing transmissions.')
wfFrErrType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("unknown", 1), ("short", 2), ("long", 3), ("illegaldlci", 4), ("unknowndlci", 5), ("protoerr", 6), ("unknownie", 7), ("sequenceerr", 8), ("unknownrpt", 9), ("reset", 10), ("cntrl", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrErrType.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrErrType.setDescription('Indicate the type of the last specific monitored error.')
wfFrErrData = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 1, 1, 26), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrErrData.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrErrData.setDescription('Contains as much of the error packet as possible.')
wfFrErrTime = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 1, 1, 27), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrErrTime.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrErrTime.setDescription('The time the last error occurred.')
wfFrErrDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 1, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrErrDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrErrDiscards.setDescription('The number of inbound frames dropped because of format or other errors or because the VC was not known.')
wfFrErrDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 1, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrErrDrops.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrErrDrops.setDescription('The number of outbound frames dropped. Usually this is due the specified DLCI being unknown or a broadcast packet is too long')
wfFrErrFaults = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 1, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrErrFaults.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrErrFaults.setDescription('The number of times that the Interface has come down due to errors since the system started. The value is reset when a restart parameter is modified.')
wfFrErrFaultTime = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 1, 1, 31), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrErrFaultTime.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrErrFaultTime.setDescription('The time at which the interface last went down.')
wfFrDlcmiDialFailureDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 1, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrDlcmiDialFailureDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrDlcmiDialFailureDisable.setDescription('On a dial interface, this indicates whether to time-out if a full status message is not received. A timeout will cause the connection to terminate.')
wfFrDlcmiInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 1, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("normal", 1), ("primary", 2), ("backup", 3), ("backupDup", 4), ("demand", 5))).clone('normal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrDlcmiInterfaceType.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrDlcmiInterfaceType.setDescription('Indicates the type of interface this is. A normal interface is not backed up, a primary interface is backed up, and a backup interface is used for backup. backupDup is a cue for SiteManager.')
wfFrDlcmiBackupFilterCct = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 1, 1, 34), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrDlcmiBackupFilterCct.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrDlcmiBackupFilterCct.setDescription('The circuit number which defines the ppq filters that the backup interface will use. If 0, the filters defined for the default/main circuit will be used.')
wfFrDlcmiDebugLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 1, 1, 35), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrDlcmiDebugLevel.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrDlcmiDebugLevel.setDescription('For Bay Networks internal use only.')
wfFrDlcmiTraceLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 1, 1, 36), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrDlcmiTraceLevel.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrDlcmiTraceLevel.setDescription('For Bay Networks internal use only.')
wfFrDlcmiCongestionMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 1, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("shutdown", 1), ("throttle", 2), ("throttleThenShutdown", 3))).clone('shutdown')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrDlcmiCongestionMethod.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrDlcmiCongestionMethod.setDescription('Default congestion control method to use for all VCs on this interface.')
wfFrDlcmiShapingTmr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 1, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8196)).clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrDlcmiShapingTmr.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrDlcmiShapingTmr.setDescription('The interval, in ticks (1/1024th of a second), that VCs are processed for traffic shaping.')
wfFrDlcmiShapingHiQueueLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 1, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrDlcmiShapingHiQueueLimit.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrDlcmiShapingHiQueueLimit.setDescription('The total number of buffers that the interface will allow VCs to queue into the Hi queue. Divided by the number of traffic shaped VCs to get the number of buffers allowed per-VC.')
wfFrDlcmiShapingNormalQueueLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 1, 1, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000)).clone(200)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrDlcmiShapingNormalQueueLimit.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrDlcmiShapingNormalQueueLimit.setDescription('The total number of buffers that the interface will allow VCs to queue into the Normal queue. Divided by the number of traffic shaped VCs to get the number of buffers allowed per-VC.')
wfFrDlcmiShapingLoQueueLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 1, 1, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrDlcmiShapingLoQueueLimit.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrDlcmiShapingLoQueueLimit.setDescription('The total number of buffers that the interface will allow VCs to queue into the Lo queue. Divided by the number of traffic shaped VCs to get the number of buffers allowed per-VC.')
wfFrDlcmiXoffDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 1, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrDlcmiXoffDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrDlcmiXoffDisable.setDescription('Indicates whether to listen(enabled) or ignore(disabled) XOFF (R-bit) notification')
wfFrDlcmiMissingPolls = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 1, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrDlcmiMissingPolls.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrDlcmiMissingPolls.setDescription('Number of times there was no status enquiry response to a status enquiry')
wfFrDlcmiName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 1, 1, 44), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrDlcmiName.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrDlcmiName.setDescription('User name for this interface, used by BCC')
wfFrDlcmiEnableSinglePVCUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 1, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrDlcmiEnableSinglePVCUpdate.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrDlcmiEnableSinglePVCUpdate.setDescription('Enables or disables the processing of Single Async PVC status messages that some switches use. If disabled, Single Async PVC status messages are ignored. All status changes in the FR circuit are based on the processing of full status enquiry response messages. ')
wfFrDlcmiAnnexSwEnq = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 1, 1, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrDlcmiAnnexSwEnq.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrDlcmiAnnexSwEnq.setDescription('Enables or disables the processing of status enquiry on annexdswitch(7) and annexaswitch(8). If it is enabled and the status enquiry is not received from the DTE within wfFrDlcmiAnnexSwEnqTmr, the internal counter will be incremented. If internal counter exceeds wfFrDlcmiErrorThreshold, the circuit will be brought down.')
wfFrDlcmiAnnexSwEnqTmr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 1, 1, 47), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 500)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrDlcmiAnnexSwEnqTmr.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrDlcmiAnnexSwEnqTmr.setDescription('Specify the timeout value in seconds for the status inquiry on annexdswitch(7) and annexaswitch(8). It is defaulted to 10 seconds.')
wfFrDlcmiExtraStatusInfoEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 1, 1, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrDlcmiExtraStatusInfoEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrDlcmiExtraStatusInfoEnable.setDescription('Indicates whether or not to process extra lmi ies that may received from the switch')
wfFrVCircuitTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 2), )
if mibBuilder.loadTexts: wfFrVCircuitTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrVCircuitTable.setDescription('Frame Relay Circuit table gives information about a virtual circuits.')
wfFrVCircuitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 2, 1), ).setIndexNames((0, "Wellfleet-FR2-MIB", "wfFrCircuitLineNumber"), (0, "Wellfleet-FR2-MIB", "wfFrCircuitLLIndex"), (0, "Wellfleet-FR2-MIB", "wfFrCircuitDlci"))
if mibBuilder.loadTexts: wfFrVCircuitEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrVCircuitEntry.setDescription('An entry in the Frame Relay Circuit table.')
wfFrCircuitDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrCircuitDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrCircuitDelete.setDescription('Indication to delete this frame relay interface.')
wfFrCircuitLineNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrCircuitLineNumber.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrCircuitLineNumber.setDescription('Instance identifier. This is the line number on which the associated Frame Relay interface resides.')
wfFrCircuitLLIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrCircuitLLIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrCircuitLLIndex.setDescription('The Lower layer index uniquely identifies the lower layer in cases where the lower layer may be something other than the physical layer. For example if Frame Relay is running over an ATM VC, the LLIndex identifies the ATM VC.')
wfFrCircuitNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrCircuitNumber.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrCircuitNumber.setDescription('The circuit number of this interface.')
wfFrCircuitDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(16, 1007, 1024, 64511, 131072, 8257535))).clone(namedValues=NamedValues(("twobyteminimum", 16), ("twobytemaximum", 1007), ("threebyteminimum", 1024), ("threebytemaximum", 64511), ("fourbyteminimum", 131072), ("fourbytemaximum", 8257535)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrCircuitDlci.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrCircuitDlci.setDescription("One of three instance identifier. This is the Frame Relay 'address' of the virtual circuit.")
wfFrCircuitState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("invalid", 1), ("active", 2), ("inactive", 3), ("xoff", 4), ("control", 5), ("starting", 6), ("disabled", 7))).clone('invalid')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrCircuitState.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrCircuitState.setDescription('Indicates the state of the particular virtual circuit.')
wfFrCircuitStateSet = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 7))).clone(namedValues=NamedValues(("invalid", 1), ("active", 2), ("inactive", 3), ("disabled", 7))).clone('invalid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrCircuitStateSet.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrCircuitStateSet.setDescription('User access for setting the state of a virtual circuit')
wfFrCircuitReceivedFECNs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrCircuitReceivedFECNs.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrCircuitReceivedFECNs.setDescription('Number of frames received indicating forward congestion.')
wfFrCircuitReceivedBECNs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrCircuitReceivedBECNs.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrCircuitReceivedBECNs.setDescription('Number of frames received indicating backward congestion.')
wfFrCircuitSentFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrCircuitSentFrames.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrCircuitSentFrames.setDescription('The number of frames sent from this virtual circuit.')
wfFrCircuitSentOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrCircuitSentOctets.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrCircuitSentOctets.setDescription('The number of octets sent from this virtual circuit.')
wfFrCircuitReceivedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrCircuitReceivedFrames.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrCircuitReceivedFrames.setDescription('The number of frames received from this virtual circuit.')
wfFrCircuitReceivedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrCircuitReceivedOctets.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrCircuitReceivedOctets.setDescription('The number of octets received from this virtual circuit.')
wfFrCircuitCreationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 2, 1, 14), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrCircuitCreationTime.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrCircuitCreationTime.setDescription('The value of sysUpTime when the vc was created.')
wfFrCircuitLastTimeChange = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 2, 1, 15), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrCircuitLastTimeChange.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrCircuitLastTimeChange.setDescription('The value of sysUpTime when last there was a change in vc state.')
wfFrCircuitCommittedBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 2, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrCircuitCommittedBurst.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrCircuitCommittedBurst.setDescription('Indicates the maximum amount of data, in bits, that the network agrees to transfer under normal conditions, during the measurement interval.')
wfFrCircuitExcessBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 2, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrCircuitExcessBurst.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrCircuitExcessBurst.setDescription('Indicates teh maximum amount of uncommitted data bits that the network will attempt to deliver over the measurement interval.')
wfFrCircuitThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 2, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrCircuitThroughput.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrCircuitThroughput.setDescription("This is the average number of 'Frame Relay Information Field' bits transferred per second across a user network interface in one direction, measured over the measurement interval.")
wfFrCircuitMulticast = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unicast", 1), ("multicast", 2))).clone('unicast')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrCircuitMulticast.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrCircuitMulticast.setDescription('Indicates whether this DLCI is used for multicast or single destination.')
wfFrCircuitType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2), ("dynamicsvc", 3))).clone('static')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrCircuitType.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrCircuitType.setDescription('Indication of whether the VC was manually created (static), or dynamically created (dynamic) via the data link control management interface.')
wfFrCircuitDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrCircuitDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrCircuitDiscards.setDescription('The number of inbound frames discarded because of format errors, because the VC is inactive or because the protocol was not registered for this circuit.')
wfFrCircuitDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrCircuitDrops.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrCircuitDrops.setDescription('Indicates how many outbound frames were dropped. Usually these are dropped because the VC is not active.')
wfFrCircuitSubCct = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 2, 1, 23), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrCircuitSubCct.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrCircuitSubCct.setDescription('Circuit number to use for this VC when configured in hybrid (for bridging) or direct access (VC as a circuit) mode.')
wfFrCircuitMode = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 2, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("group", 1), ("hybrid", 2), ("direct", 3))).clone('group')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrCircuitMode.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrCircuitMode.setDescription("The mode of the given VC. GROUP - treats the VC as one of many vc's on a circuit. HYBRID - treats the VC as one of many vc's on a circuit for protocol traffic, but as a separate circuit for bridging. DIRECT - treats the VC as a separate circuit for all applications.")
wfFrCircuitCongestionDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("inherit", 3))).clone('inherit')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrCircuitCongestionDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrCircuitCongestionDisable.setDescription('This indicates whether the congestion algorithm should be used for this VC. If this is not set, the value is inherited from the DLCMI record.')
wfFrCircuitCongestionState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 2, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("forwarding", 1), ("congested", 2), ("throttling", 3))).clone('forwarding')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrCircuitCongestionState.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrCircuitCongestionState.setDescription('This is used to indicate whether or not the VC is in a congested state. If it is, no traffic will be sent on this VC.')
wfFrCircuitCongestionTmr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 2, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("half", 1), ("one", 2), ("oneandhalf", 3), ("two", 4), ("twoandhalf", 5), ("three", 6), ("threeandhalf", 7), ("four", 8), ("fourandhalf", 9), ("five", 10))).clone('one')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrCircuitCongestionTmr.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrCircuitCongestionTmr.setDescription('This is the time period over which congestion notifications are counted. It is also the period during which the VC will cease sending information before resuming transmission if no congestion notifications are received.')
wfFrCircuitCongestionCtr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 2, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 500)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrCircuitCongestionCtr.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrCircuitCongestionCtr.setDescription('This represents the number of congestion notifications, when received within wfFrCircuitCongestionTmr time, that will result in the VC ceasing transmissions.')
wfFrCircuitWcpEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 2, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrCircuitWcpEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrCircuitWcpEnable.setDescription('Enable Compression')
wfFrCircuitPrimaryHoldTmr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 2, 1, 30), Integer32().clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrCircuitPrimaryHoldTmr.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrCircuitPrimaryHoldTmr.setDescription('The maximum number of seconds that a Frame Relay PVC Primary will be kept inactive, ignoring status messages, when it is terminated because the backup has started.')
wfFrCircuitInactivityTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 2, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrCircuitInactivityTimer.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrCircuitInactivityTimer.setDescription('Inactivity Timer for SVCs. Zero disables timer.')
wfFrCircuitInactivityMode = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 2, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("bothdirections", 1), ("transmitonly", 2), ("receiveonly", 3), ("eitherdirection", 4))).clone('bothdirections')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrCircuitInactivityMode.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrCircuitInactivityMode.setDescription('Specifies which packets will reset the SVC inactivity timer.')
wfFrCircuitCongestionMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 2, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("shutdown", 1), ("throttle", 2), ("throttleThenShutdown", 3), ("inherit", 4))).clone('inherit')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrCircuitCongestionMethod.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrCircuitCongestionMethod.setDescription('The congestion method to use on this VC.')
wfFrCircuitShapedHiXmits = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 2, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrCircuitShapedHiXmits.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrCircuitShapedHiXmits.setDescription('Same as wfCctOptsEntry.wfCctOptsHiXmits for this VC')
wfFrCircuitShapedNormalXmits = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 2, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrCircuitShapedNormalXmits.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrCircuitShapedNormalXmits.setDescription('Same as wfCctOptsEntry.wfCctOptsNormalXmits for this VC')
wfFrCircuitShapedLoXmits = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 2, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrCircuitShapedLoXmits.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrCircuitShapedLoXmits.setDescription('Same as wfCctOptsEntry.wfCctOptsLoXmits for this VC')
wfFrCircuitShapedHiClippedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 2, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrCircuitShapedHiClippedPkts.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrCircuitShapedHiClippedPkts.setDescription('Same as wfCctOptsEntry.wfCctOptsHiClippedPkts for this VC')
wfFrCircuitShapedNormalClippedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 2, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrCircuitShapedNormalClippedPkts.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrCircuitShapedNormalClippedPkts.setDescription('Same as wfCctOptsEntry.wfCctOptsNormalClippedPkts for this VC')
wfFrCircuitShapedLoClippedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 2, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrCircuitShapedLoClippedPkts.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrCircuitShapedLoClippedPkts.setDescription('Same as wfCctOptsEntry.wfCctOptsLoClippedPkts for this VC')
wfFrCircuitShapedHiQHighWaterPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 2, 1, 40), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrCircuitShapedHiQHighWaterPkts.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrCircuitShapedHiQHighWaterPkts.setDescription('Same as wfCctOptsEntry.wfCctOptsHiQHighWaterPkts for this VC')
wfFrCircuitShapedNormalQHighWaterPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 2, 1, 41), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrCircuitShapedNormalQHighWaterPkts.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrCircuitShapedNormalQHighWaterPkts.setDescription('Same as wfCctOptsEntry.wfCctOptsNormalQHighWaterPkts for this VC')
wfFrCircuitShapedLoQHighWaterPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 2, 1, 42), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrCircuitShapedLoQHighWaterPkts.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrCircuitShapedLoQHighWaterPkts.setDescription('Same as wfCctOptsEntry.wfCctOptsLoQHighWaterPkts for this VC')
wfFrCircuitShapedDroppedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 2, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrCircuitShapedDroppedPkts.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrCircuitShapedDroppedPkts.setDescription('Same as wfCctOptsEntry.wfCctOptsDroppedPkts for this VC')
wfFrCircuitShapedLargePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 2, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrCircuitShapedLargePkts.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrCircuitShapedLargePkts.setDescription('Same as wfCctOptsEntry.wfCctOptsLargePkts for this VC')
wfFrCircuitShapedHiTotalOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 2, 1, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrCircuitShapedHiTotalOctets.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrCircuitShapedHiTotalOctets.setDescription('Same as wfCctOptsEntry.wfCctOptsHiTotalOctets for this VC')
wfFrCircuitShapedNormalTotalOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 2, 1, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrCircuitShapedNormalTotalOctets.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrCircuitShapedNormalTotalOctets.setDescription('Same as wfCctOptsEntry.wfCctOptsNormalTotalOctets for this VC')
wfFrCircuitShapedLoTotalOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 2, 1, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrCircuitShapedLoTotalOctets.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrCircuitShapedLoTotalOctets.setDescription('Same as wfCctOptsEntry.wfCctOptsLoTotalOctets for this VC')
wfFrCircuitShapedPktsNotQueued = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 2, 1, 48), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrCircuitShapedPktsNotQueued.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrCircuitShapedPktsNotQueued.setDescription('Same as wfCctOptsEntry.wfCctOptsPktsNotQueued for this VC')
wfFrCircuitShapedHighWaterPktsClear = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 2, 1, 49), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrCircuitShapedHighWaterPktsClear.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrCircuitShapedHighWaterPktsClear.setDescription('Same as wfCctOptsEntry.wfCctOptsHighWaterPktsClear for this VC')
wfFrCircuitShapedHiQueueLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 2, 1, 50), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrCircuitShapedHiQueueLimit.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrCircuitShapedHiQueueLimit.setDescription('Same as wfCctOptsEntry.wfCctOptsHighPriorityQueueLimit for this VC. If set to inherit (0), then the VC uses part of the global allocation of buffers in the DLCMI entry.')
wfFrCircuitShapedNormalQueueLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 2, 1, 51), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrCircuitShapedNormalQueueLimit.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrCircuitShapedNormalQueueLimit.setDescription('Same as wfCctOptsEntry.wfCctOptsNormalPriorityQueueLimit for this VC. If set to inherit (0), then the VC uses part of the global allocation of buffers in the DLCMI entry.')
wfFrCircuitShapedLoQueueLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 2, 1, 52), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrCircuitShapedLoQueueLimit.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrCircuitShapedLoQueueLimit.setDescription('Same as wfCctOptsEntry.wfCctOptsLowPriorityQueueLimit for this VC. If set to inherit (0), then the VC uses part of the global allocation of buffers in the DLCMI entry.')
wfFrCircuitStartupDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 2, 1, 53), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrCircuitStartupDelay.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrCircuitStartupDelay.setDescription('Number of seconds the VC should wait before creating the circuit or doing a dp_vc_line.')
wfFrCircuitCurHiQueueLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 2, 1, 54), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrCircuitCurHiQueueLimit.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrCircuitCurHiQueueLimit.setDescription('This is the current high queue limit, based on the VC and DLCMI configuration.')
wfFrCircuitCurNormalQueueLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 2, 1, 55), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrCircuitCurNormalQueueLimit.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrCircuitCurNormalQueueLimit.setDescription('This is the current normal queue limit, based on the VC and DLCMI configuration.')
wfFrCircuitCurLoQueueLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 2, 1, 56), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrCircuitCurLoQueueLimit.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrCircuitCurLoQueueLimit.setDescription('This is the current low queue limit, based on the VC and DLCMI configuration.')
wfFrCircuitShapingState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 2, 1, 57), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("disabled", 1), ("invalid", 2), ("committed-shaping", 3), ("excess-shaping", 4), ("zero-cir", 5))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrCircuitShapingState.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrCircuitShapingState.setDescription('Indicates current state of a VCs traffic shaping configuration')
wfFrCircuitBwThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 2, 1, 58), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrCircuitBwThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrCircuitBwThreshold.setDescription('Set 3 to 10 times of the CIR configured with this PVC. The threshold value for starting to send Normal and Low Priority traffic is calculated based on physical line speed. Setting this object to 3 to 10 times of CIR value will provide more chance to the Normal and Low Priority traffic so that it will help the Normal and Low Priority traffic of low speed links over high speed physical line from starvation such as 56Kbps and 65Kbps lines over HSSI.')
wfFrCircuitReceivedDEs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 2, 1, 59), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrCircuitReceivedDEs.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrCircuitReceivedDEs.setDescription("Number of frames received from the network indicating that they were eligible for discard since the virtual circuit was created. This occurs when the remote DTE sets the DE flag, or when in remote DTE's switch detects that the frame was received as Excess Burst data.")
wfFrCircuitSentDEs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 2, 1, 60), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrCircuitSentDEs.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrCircuitSentDEs.setDescription('Number of frames sent from the network indicating that they were eligible for discard since the virtual circuit was created. This occurs when the local DTE sets the DE flag, indicating that during Network congestion situations those frames should be discarded in preference of ther frames sent without the DE bit set.')
wfFrCctErrorTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 4), )
if mibBuilder.loadTexts: wfFrCctErrorTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrCctErrorTable.setDescription('The Frame Relay Circuit Error Table.')
wfFrCctErrorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 4, 1), ).setIndexNames((0, "Wellfleet-FR2-MIB", "wfFrCctErrorCct"))
if mibBuilder.loadTexts: wfFrCctErrorEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrCctErrorEntry.setDescription('An entry in the Frame Relay Circuit Error table.')
wfFrCctErrorCct = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrCctErrorCct.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrCctErrorCct.setDescription('Instance Identifier - indicates the frame relay circuit number')
wfFrCctErrorDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrCctErrorDrops.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrCctErrorDrops.setDescription('Indicates the number of frames that were dropped at the circuit level. Generally this is because the particular protocol (within the inbound frame) was not registered for this circuit.')
wfFrCctErrorDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrCctErrorDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrCctErrorDiscards.setDescription('Indicates the number of frames that were discarded at the circuit level. Generally this is because the outbound frame was too long, or too short.')
wfFrServiceRecordTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 5), )
if mibBuilder.loadTexts: wfFrServiceRecordTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrServiceRecordTable.setDescription('Frame Relay service records group virtual circuits together.')
wfFrServiceRecordEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 5, 1), ).setIndexNames((0, "Wellfleet-FR2-MIB", "wfFrServiceRecordLineNumber"), (0, "Wellfleet-FR2-MIB", "wfFrServiceRecordLLIndex"), (0, "Wellfleet-FR2-MIB", "wfFrServiceRecordCircuitNumber"))
if mibBuilder.loadTexts: wfFrServiceRecordEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrServiceRecordEntry.setDescription('An entry in the Frame Relay Service Record table.')
wfFrServiceRecordDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrServiceRecordDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrServiceRecordDelete.setDescription('Indication to delete this frame relay service record.')
wfFrServiceRecordLineNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrServiceRecordLineNumber.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrServiceRecordLineNumber.setDescription('Instance identifier. This is the line number on which the associated Frame Relay interface resides.')
wfFrServiceRecordLLIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrServiceRecordLLIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrServiceRecordLLIndex.setDescription('The Lower layer index uniquely identifies the lower layer in cases where the lower layer may be something other than the physical layer. For example if Frame Relay is running over an ATM VC, the LLIndex identifies the ATM VC.')
wfFrServiceRecordCircuitNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrServiceRecordCircuitNumber.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrServiceRecordCircuitNumber.setDescription('The circuit number of this interface.')
wfFrServiceRecordDefaultFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2))).clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrServiceRecordDefaultFlag.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrServiceRecordDefaultFlag.setDescription('Identifies default service record for VCs added via the frame relay switch.')
wfFrServiceRecordNumberVCs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 5, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrServiceRecordNumberVCs.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrServiceRecordNumberVCs.setDescription('Number of virtual circuit associated with a service record.')
wfFrServiceRecordName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 5, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrServiceRecordName.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrServiceRecordName.setDescription('User name for circuit')
wfFrServiceRecordState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 5, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("inactive", 1), ("active", 2), ("invalid", 3))).clone('inactive')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrServiceRecordState.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrServiceRecordState.setDescription('Used to identify new service record instances')
wfFrServiceRecordPreMultiCircuit = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 5, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrServiceRecordPreMultiCircuit.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrServiceRecordPreMultiCircuit.setDescription('circuit number prior to enabling multiline, allows restoration of pre-multiline circuit')
wfFrServiceRecordBackupFilterCct = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 5, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrServiceRecordBackupFilterCct.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrServiceRecordBackupFilterCct.setDescription('The circuit number used by the backup interface to store/define the ppq filter configuration.')
wfFrServiceRecordBackupLineNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 5, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrServiceRecordBackupLineNumber.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrServiceRecordBackupLineNumber.setDescription('Indicates one of the backup interfaces for this primary interface. The circuit on this service record should be shared onto that backup interface.')
wfFrServiceRecordBackupLLIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 5, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrServiceRecordBackupLLIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrServiceRecordBackupLLIndex.setDescription('Indicates one of the backup interfaces for this primary interface. The circuit on this service record should be shared onto that backup interface.')
wfFrServiceRecordBackupMainCct = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 5, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrServiceRecordBackupMainCct.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrServiceRecordBackupMainCct.setDescription('Indicates the main circuit of one of the backup interfaces for this primary interface. The circuit on this service record should be shared onto that backup interface.')
wfFrServiceRecordPrimaryLineNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 5, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrServiceRecordPrimaryLineNumber.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrServiceRecordPrimaryLineNumber.setDescription('Indicates the primary interface for this backup interface This should be set only in the Default Service Record.')
wfFrServiceRecordPrimaryLLIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 5, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrServiceRecordPrimaryLLIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrServiceRecordPrimaryLLIndex.setDescription('Indicates the primary interface for this backup interface. This should be set only in the Default Service Record.')
wfFrServiceRecordPrimaryMainCct = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 5, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrServiceRecordPrimaryMainCct.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrServiceRecordPrimaryMainCct.setDescription('Indicates the main circuit on the primary interface for this backup interface. This should be set only in the Default Service Record.')
wfFrServiceRecordSVCDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 5, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrServiceRecordSVCDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrServiceRecordSVCDisable.setDescription(' Allow SVCs on this service record. ')
wfFrServiceRecordSVCLocNum = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 5, 1, 18), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrServiceRecordSVCLocNum.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrServiceRecordSVCLocNum.setDescription(' Number associated with this service record. ')
wfFrServiceRecordSVCLocSubAdr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 5, 1, 19), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrServiceRecordSVCLocSubAdr.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrServiceRecordSVCLocSubAdr.setDescription(' Subaddress of type NSAP (Q.931) further qualifies number ')
wfFrServiceRecordSVCLocPlan = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 5, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("e164", 1), ("x121", 3))).clone('x121')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrServiceRecordSVCLocPlan.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrServiceRecordSVCLocPlan.setDescription(' Supported Q.931 4.3.8/4.3.10 numbering plans. Each plan is represented by the 4 least significant bits to align with the values stated in Q.931. ')
wfFrServiceRecordSVCLocTypeNum = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 5, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unknown", 1), ("international", 2))).clone('international')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrServiceRecordSVCLocTypeNum.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrServiceRecordSVCLocTypeNum.setDescription(' Supported Q.931 4.3.8/4.3.10 types of number. Each type is represented by a value one greater than the values stated in Q.931. ')
wfFrServiceRecordSVCCallBlock = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 5, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("inbound", 2), ("outbound", 3), ("all", 4))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrServiceRecordSVCCallBlock.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrServiceRecordSVCCallBlock.setDescription('Allow all calls, block inbound, block outbound, block all calls. ')
wfFrServiceRecordSVCInScrnDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 5, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrServiceRecordSVCInScrnDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrServiceRecordSVCInScrnDisable.setDescription(' Enable SVC call screening. ')
wfFrServiceRecordSVCInScrnUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 5, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("include", 1), ("exclude", 2))).clone('include')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrServiceRecordSVCInScrnUsage.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrServiceRecordSVCInScrnUsage.setDescription(' Type of SVC call screening. ')
wfFrServiceRecordSVCInactTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 5, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrServiceRecordSVCInactTimer.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrServiceRecordSVCInactTimer.setDescription('Inactivity Timer for SVCs. Zero disables timer.')
wfFrServiceRecordSVCInactMode = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 5, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("bothdirections", 1), ("transmitonly", 2), ("receiveonly", 3), ("eitherdirection", 4))).clone('bothdirections')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrServiceRecordSVCInactMode.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrServiceRecordSVCInactMode.setDescription('Inactivity check mode')
wfFrServiceRecordNumberStaticVCs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 5, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrServiceRecordNumberStaticVCs.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrServiceRecordNumberStaticVCs.setDescription('Number of static vcs associated with a service record.')
wfFrServiceRecordNumberDynamicVCs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 5, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrServiceRecordNumberDynamicVCs.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrServiceRecordNumberDynamicVCs.setDescription('Number of dynamic vcs associated with a service record.')
wfFrServiceRecordNumberSVCs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 5, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrServiceRecordNumberSVCs.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrServiceRecordNumberSVCs.setDescription('Number of svcs associated with a service record.')
wfFrServiceRecordNumberActiveVCs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 5, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrServiceRecordNumberActiveVCs.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrServiceRecordNumberActiveVCs.setDescription('Number of active vcs associated with a service record.')
wfFrServiceRecordifLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 5, 1, 31), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrServiceRecordifLastChange.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrServiceRecordifLastChange.setDescription('The value of sysUpTime when last there was a change in a vc state.')
wfFrServiceRecordifInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 5, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrServiceRecordifInOctets.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrServiceRecordifInOctets.setDescription('The number of octets received from virtual circuits.')
wfFrServiceRecordifInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 5, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrServiceRecordifInDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrServiceRecordifInDiscards.setDescription('The number of inbound frames discarded because of format errors, because a VC is inactive or because the protocol was not registered for this circuit.')
wfFrServiceRecordifOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 5, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrServiceRecordifOutOctets.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrServiceRecordifOutOctets.setDescription('The number of octets sent from virtual circuits.')
wfFrServiceRecordifOutDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 5, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrServiceRecordifOutDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrServiceRecordifOutDiscards.setDescription('Indicates how many outbound frames were dropped. Usually these are dropped because a VC is not active.')
wfFrServiceRecordifOutCtrlPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 5, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrServiceRecordifOutCtrlPkts.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrServiceRecordifOutCtrlPkts.setDescription('The number of dlcmi frames sent.')
wfFrServiceRecordifInCtrlPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 5, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrServiceRecordifInCtrlPkts.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrServiceRecordifInCtrlPkts.setDescription('The number of dlcmi frames received.')
wfFrSigTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 6), )
if mibBuilder.loadTexts: wfFrSigTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSigTable.setDescription(' The MIB Table for Frame Relay Signalling ')
wfFrSigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 6, 1), ).setIndexNames((0, "Wellfleet-FR2-MIB", "wfFrSigLineNumber"), (0, "Wellfleet-FR2-MIB", "wfFrSigLLIndex"))
if mibBuilder.loadTexts: wfFrSigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSigEntry.setDescription(' The entry of FR Signalling MIB table ')
wfFrSigDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSigDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSigDelete.setDescription(' Delete FR Signalling on this interface ')
wfFrSigDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSigDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSigDisable.setDescription(' Disable FR Sig on this interface ')
wfFrSigLineNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSigLineNumber.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSigLineNumber.setDescription(' Logical Line number. This attribute is Instance Id 1 ')
wfFrSigLLIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSigLLIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSigLLIndex.setDescription(' Lower Layer Index. This attribute is Instance Id 2 ')
wfFrSigStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("running", 1), ("fault", 2), ("init", 3), ("notpresent", 4))).clone('notpresent')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSigStatus.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSigStatus.setDescription(' Frame Relay Signalling Status This is also Q.933 Layer Status. STATUS_RUNNING FR Signalling state machine is ready. STATUS_FAULT FR Signalling is in a non-operative state. STATUS_INIT FR Signalling is initializing. STATUS_NOTPRESENT FR Signalling is not started yet. This value is not likely except upon initial configuration. ')
wfFrSigCircuit = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 6, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSigCircuit.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSigCircuit.setDescription(' Circuit number of the FR Signaling Stack (needed?) ')
wfFrSigConformance = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("frf4", 1), ("priority", 2), ("q933", 3), ("t1617", 4))).clone('frf4')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSigConformance.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSigConformance.setDescription(' Q.933 Standard Conformance Selection FRF4 Frame Relay Forum Implementation Agreement FRF.4 FRF4_PRIORITY FRF.4 plus support of X.213 Priority Q933 ITU Q.933, 03/1993 - currently not implemented ANSI_T1617 ANSI T1.617 - currently not implemented ')
wfFrSigSvcIdleTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 6, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(10, 360, 14400))).clone(namedValues=NamedValues(("min", 10), ("default", 360), ("max", 14400))).clone('default')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSigSvcIdleTimer.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSigSvcIdleTimer.setDescription(" SVC Idle timeout value Number of seconds in which SVCs are not passing data before considered 'idle'. ")
wfFrSigMaxSvcs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 6, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 16, 1024))).clone(namedValues=NamedValues(("min", 1), ("default", 16), ("max", 1024))).clone('default')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSigMaxSvcs.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSigMaxSvcs.setDescription(' Max number of SVC allowed on this interface ')
wfFrSigSvcDeletePolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 6, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("always", 1), ("use", 2), ("never", 3))).clone('always')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSigSvcDeletePolicy.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSigSvcDeletePolicy.setDescription(' SVC Deletion Policy ALWAYS always delete idle SVCs HEAVY_USE delete idle SVCs when 85% of Max SVCs are open NEVER never delete idle SVCs ')
wfFrSigSvcReplacePolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 6, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("always", 1), ("idle", 2), ("never", 3))).clone('always')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSigSvcReplacePolicy.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSigSvcReplacePolicy.setDescription(' SVC Replacement Policy ALWAYS replace an SVC of an equal or lower priority IDLE replace an SVC of an equal or lower priority only if it is idle NEVER never replace an SVC ')
wfFrSigT303 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 6, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4, 120))).clone(namedValues=NamedValues(("min", 1), ("default", 4), ("max", 120))).clone('default')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSigT303.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSigT303.setDescription(' T303 - SETUP msg timer value in seconds ')
wfFrSigT305 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 6, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 30, 120))).clone(namedValues=NamedValues(("min", 1), ("default", 30), ("max", 120))).clone('default')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSigT305.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSigT305.setDescription(' T305 - DISCONNECT timer value ')
wfFrSigT308 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 6, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4, 120))).clone(namedValues=NamedValues(("min", 1), ("default", 4), ("max", 120))).clone('default')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSigT308.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSigT308.setDescription(' T308 - RELEASE timer value ')
wfFrSigT310 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 6, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 30, 120))).clone(namedValues=NamedValues(("min", 1), ("default", 30), ("max", 120))).clone('default')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSigT310.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSigT310.setDescription(' T310 - CALL PROCEEDING timer value Q.931 specifies a default of 30-120 seconds for this timer. ')
wfFrSigT322 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 6, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4, 120))).clone(namedValues=NamedValues(("min", 1), ("default", 4), ("max", 120))).clone('default')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSigT322.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSigT322.setDescription(' T322 - STATUS ENQUIRY timer value ')
wfFrSigN322 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 6, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 100))).clone(namedValues=NamedValues(("min", 1), ("max", 100))).clone('min')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSigN322.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSigN322.setDescription(' Number of times STATUS ENQUIRY is retransmitted ')
wfFrSigNumMaxSVCs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 6, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSigNumMaxSVCs.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSigNumMaxSVCs.setDescription(' Maximum number of SVCs currently in active state ')
wfFrSigNumConnRej = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 6, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSigNumConnRej.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSigNumConnRej.setDescription(' Number of SVC creation attempts which were rejected by Switch ')
wfFrSigNumSvcRej = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 6, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSigNumSvcRej.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSigNumSvcRej.setDescription(' Number of SVC setup attempts which were rejected by this router ')
wfFrSigNumSvcFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 6, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSigNumSvcFailed.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSigNumSvcFailed.setDescription(' Number of SVC setup attempts which failed due to errors ')
wfFrLapfTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 7), )
if mibBuilder.loadTexts: wfFrLapfTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrLapfTable.setDescription(' The MIB Table for Frame Relay LAPF ')
wfFrLapfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 7, 1), ).setIndexNames((0, "Wellfleet-FR2-MIB", "wfLapfLineNumber"), (0, "Wellfleet-FR2-MIB", "wfLapfLLIndex"))
if mibBuilder.loadTexts: wfFrLapfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrLapfEntry.setDescription(' The entry of FR LAPF MIB table ')
wfLapfDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLapfDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfLapfDelete.setDescription(' Delete LAPF on this interface ')
wfLapfDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLapfDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfLapfDisable.setDescription(' Disable Lapf on this interface ')
wfLapfLineNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 7, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLapfLineNumber.setStatus('mandatory')
if mibBuilder.loadTexts: wfLapfLineNumber.setDescription(' Logical Line number. This attribute is Instance Id 1 ')
wfLapfLLIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 7, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLapfLLIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wfLapfLLIndex.setDescription(' Lower Layer Index. This attribute is Instance Id 2 ')
wfLapfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("running", 1), ("fault", 2), ("init", 3), ("notpresent", 4))).clone('notpresent')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLapfStatus.setStatus('mandatory')
if mibBuilder.loadTexts: wfLapfStatus.setDescription(' Status of LAPF Data Link Control STATUS_RUNNING LAPF layer is ready and responsive. STATUS_FAULT LAPF layer is in a non-operative state. STATUS_INIT LAPF layer is initializing. STATUS_NOTPRESENT LAPF layer is not started yet. This value is not likely except upon initial configuration. ')
wfLapfStationType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 7, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("networkside", 1), ("userside", 2))).clone('networkside')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLapfStationType.setStatus('mandatory')
if mibBuilder.loadTexts: wfLapfStationType.setDescription(' Identifies the desired station type of this interface. LAPF_USERSIDE LAPF acts as the User-side (DTE) LAPF_NETWORKSIDE LAPF acts as the Network-side (DCE) ')
wfLapfActionInitiate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 7, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("passive", 2))).clone('active')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLapfActionInitiate.setStatus('mandatory')
if mibBuilder.loadTexts: wfLapfActionInitiate.setDescription(' This identifies the action LAPF will take to initiate link set-up. ')
wfLapfT200 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 7, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1200)).clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLapfT200.setStatus('mandatory')
if mibBuilder.loadTexts: wfLapfT200.setDescription(' T200 - LAPF Base timer value, in tenths of a second ')
wfLapfT203 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 7, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 120)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLapfT203.setStatus('mandatory')
if mibBuilder.loadTexts: wfLapfT203.setDescription(' T203 - LAPF idle timer value, in seconds ')
wfLapfN200 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 7, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLapfN200.setStatus('mandatory')
if mibBuilder.loadTexts: wfLapfN200.setDescription(' N200 - Max number of LAPF retransmissions ')
wfLapfN201 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 7, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(260, 2052)).clone(260)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLapfN201.setStatus('mandatory')
if mibBuilder.loadTexts: wfLapfN201.setDescription(' N201 - Max number of octets in LAPF Information field ')
wfLapfK = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 7, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127)).clone(7)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLapfK.setStatus('mandatory')
if mibBuilder.loadTexts: wfLapfK.setDescription(' k - Max number of outstanding I-frames ')
wfLapfRxWin = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 7, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLapfRxWin.setStatus('mandatory')
if mibBuilder.loadTexts: wfLapfRxWin.setDescription(' Current receive window size ')
wfLapfTxWin = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 7, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLapfTxWin.setStatus('mandatory')
if mibBuilder.loadTexts: wfLapfTxWin.setDescription(' Current transmit window size ')
wfLapfSABMESent = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 7, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLapfSABMESent.setStatus('mandatory')
if mibBuilder.loadTexts: wfLapfSABMESent.setDescription(' number of SABME sent ')
wfLapfSABMERcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 7, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLapfSABMERcvd.setStatus('mandatory')
if mibBuilder.loadTexts: wfLapfSABMERcvd.setDescription(' number of SABME received ')
wfLapfUASent = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 7, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLapfUASent.setStatus('mandatory')
if mibBuilder.loadTexts: wfLapfUASent.setDescription(' number of UA sent ')
wfLapfUARcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 7, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLapfUARcvd.setStatus('mandatory')
if mibBuilder.loadTexts: wfLapfUARcvd.setDescription(' number of UA received ')
wfLapfDISCSent = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 7, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLapfDISCSent.setStatus('mandatory')
if mibBuilder.loadTexts: wfLapfDISCSent.setDescription(' number of DISC sent ')
wfLapfDISCRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 7, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLapfDISCRcvd.setStatus('mandatory')
if mibBuilder.loadTexts: wfLapfDISCRcvd.setDescription(' number of DISC received ')
wfLapfDMSent = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 7, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLapfDMSent.setStatus('mandatory')
if mibBuilder.loadTexts: wfLapfDMSent.setDescription(' number of DM sent ')
wfLapfDMRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 7, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLapfDMRcvd.setStatus('mandatory')
if mibBuilder.loadTexts: wfLapfDMRcvd.setDescription(' number of DM received ')
wfLapfFRMRSent = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 7, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLapfFRMRSent.setStatus('mandatory')
if mibBuilder.loadTexts: wfLapfFRMRSent.setDescription(' number of FRMR sent ')
wfLapfFRMRRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 7, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLapfFRMRRcvd.setStatus('mandatory')
if mibBuilder.loadTexts: wfLapfFRMRRcvd.setDescription(' number of FRMR received ')
wfLapfRNRsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 7, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLapfRNRsSent.setStatus('mandatory')
if mibBuilder.loadTexts: wfLapfRNRsSent.setDescription(' number of RNR frames received since link is up ')
wfLapfRNRsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 7, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLapfRNRsRcvd.setStatus('mandatory')
if mibBuilder.loadTexts: wfLapfRNRsRcvd.setDescription(' number of RNR frames sent since link is up ')
wfLapfREJsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 7, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLapfREJsSent.setStatus('mandatory')
if mibBuilder.loadTexts: wfLapfREJsSent.setDescription(' number of REJ frames received since link is up ')
wfLapfREJsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 7, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLapfREJsRcvd.setStatus('mandatory')
if mibBuilder.loadTexts: wfLapfREJsRcvd.setDescription(' number of REJ frames sent since link is up ')
wfLapfIFramesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 7, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLapfIFramesSent.setStatus('mandatory')
if mibBuilder.loadTexts: wfLapfIFramesSent.setDescription(' number of I-frames received since last link establishment ')
wfLapfIFramesRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 7, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLapfIFramesRcvd.setStatus('mandatory')
if mibBuilder.loadTexts: wfLapfIFramesRcvd.setDescription(' number of I-frames sent since last link establishment ')
wfLapfUISent = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 7, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLapfUISent.setStatus('mandatory')
if mibBuilder.loadTexts: wfLapfUISent.setDescription(' number of un-numbered I-frames received since last link establishment ')
wfLapfUIRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 7, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLapfUIRcvd.setStatus('mandatory')
if mibBuilder.loadTexts: wfLapfUIRcvd.setDescription(' number of un-numbered I-frames sent since last link establishment ')
wfLapfRRsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 7, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLapfRRsSent.setStatus('mandatory')
if mibBuilder.loadTexts: wfLapfRRsSent.setDescription(' number of RR frames sent since link is up ')
wfLapfRRsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 7, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLapfRRsRcvd.setStatus('mandatory')
if mibBuilder.loadTexts: wfLapfRRsRcvd.setDescription(' number of RR frames received since link is up ')
wfLapfXIDSent = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 7, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLapfXIDSent.setStatus('mandatory')
if mibBuilder.loadTexts: wfLapfXIDSent.setDescription(' number of XID sent ')
wfLapfXIDRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 7, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLapfXIDRcvd.setStatus('mandatory')
if mibBuilder.loadTexts: wfLapfXIDRcvd.setDescription(' number of XID received ')
wfLapfT200Timeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 7, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLapfT200Timeouts.setStatus('mandatory')
if mibBuilder.loadTexts: wfLapfT200Timeouts.setDescription(' number of T200 Time-out that occured. ')
wfLapfT203Timeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 7, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLapfT203Timeouts.setStatus('mandatory')
if mibBuilder.loadTexts: wfLapfT203Timeouts.setDescription(' number of T203 time-out that occured. ')
wfLapfN200Exceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 7, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLapfN200Exceeded.setStatus('mandatory')
if mibBuilder.loadTexts: wfLapfN200Exceeded.setDescription(' number of N200 being exceeded. ')
wfLapfN201Error = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 7, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLapfN201Error.setStatus('mandatory')
if mibBuilder.loadTexts: wfLapfN201Error.setDescription(' number of N201 error occured. ')
wfFrFRF4SigTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 9), )
if mibBuilder.loadTexts: wfFrFRF4SigTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrFRF4SigTable.setDescription(' The MIB Table for FRF4 SVC Signalling ')
wfFrFRF4SigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 9, 1), ).setIndexNames((0, "Wellfleet-FR2-MIB", "wfFrFRF4SigLineNumber"), (0, "Wellfleet-FR2-MIB", "wfFrFRF4SigLLIndex"))
if mibBuilder.loadTexts: wfFrFRF4SigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrFRF4SigEntry.setDescription(' The entry of FRF4 SVC Signalling MIB table ')
wfFrFRF4SigDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 9, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrFRF4SigDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrFRF4SigDelete.setDescription(' Delete FRF4 SVC Signalling on this interface ')
wfFrFRF4SigDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 9, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrFRF4SigDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrFRF4SigDisable.setDescription(' Disable FRF4 SVC Signalling on this interface ')
wfFrFRF4SigLineNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 9, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrFRF4SigLineNumber.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrFRF4SigLineNumber.setDescription(' Logical Line number. This attribute is Instance Id 1 ')
wfFrFRF4SigLLIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 9, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrFRF4SigLLIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrFRF4SigLLIndex.setDescription(' Lower Layer Index. This attribute is Instance Id 2 ')
wfFrFRF4SigMaxSvcs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 9, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrFRF4SigMaxSvcs.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrFRF4SigMaxSvcs.setDescription(' Maximum number of SVCs for this interface ')
wfFrFRF4SigT303 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 9, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 90)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrFRF4SigT303.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrFRF4SigT303.setDescription(' Timer number: T303 default time-out: 4 s state of call: call present cause for start: outgoing setup normal stop: incoming connect/call-proceeding/ release-complete at the first expiry: retransmit setup, restart T303 at the second expiry: clear call ')
wfFrFRF4SigT305 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 9, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(20, 90)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrFRF4SigT305.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrFRF4SigT305.setDescription(' Timer number: T305 default time-out: 30 s state of call: disconnect ind cause for start: outgoing disconnect normal stop: incoming release/disconnect at the first expiry: outgoing release at the second expiry: timer not restarted ')
wfFrFRF4SigT308 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 9, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 90)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrFRF4SigT308.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrFRF4SigT308.setDescription(' Timer number: T308 default time-out: 4 s state of call: release req cause for start: outgoing release normal stop: incoming release/release-complete at the first expiry: retransmit release, restart T308 at the second expiry: place access channel in maintenance ')
wfFrFRF4SigT310 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 9, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 90)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrFRF4SigT310.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrFRF4SigT310.setDescription(' Timer number: T310 default time-out: 10 s state of call: incoming call proceeding cause for start: incoming call proceeding normal stop: incoming connect/disconnect at the first expiry: clear call at the second expiry: timer not restarted ')
wfFrFRF4SigT322 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 9, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 90)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrFRF4SigT322.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrFRF4SigT322.setDescription(' Timer number: T322 default time-out: 4 s state of call: any call state cause for start: outgoing status enquiry normal stop: incoming status/disconnect/ release/release-complete at the first expiry: resend status-enq, restart T322 at the next expiry: if (--N322 > 0), resend status enq and restart T322 ')
wfFrFRF4SigN322 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 9, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrFRF4SigN322.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrFRF4SigN322.setDescription(' Number of times STATUS ENQUIRY is retransmitted ')
wfFrFRF4SigFramesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 9, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrFRF4SigFramesSent.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrFRF4SigFramesSent.setDescription(' Number of frames transmitted. ')
wfFrFRF4SigOctetsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 9, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrFRF4SigOctetsSent.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrFRF4SigOctetsSent.setDescription(' Number of octets transmitted. ')
wfFrFRF4SigFramesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 9, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrFRF4SigFramesReceived.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrFRF4SigFramesReceived.setDescription(' Number of frames received. ')
wfFrFRF4SigOctetsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 9, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrFRF4SigOctetsReceived.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrFRF4SigOctetsReceived.setDescription(' Number of octets received. ')
wfFrFRF4SigFramesDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 9, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrFRF4SigFramesDropped.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrFRF4SigFramesDropped.setDescription(' Number of frames dropped. ')
wfFrFRF4SigFramesDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 9, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrFRF4SigFramesDiscarded.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrFRF4SigFramesDiscarded.setDescription(' Number of frames discarded. ')
wfFrFRF4SigSetupRx = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 9, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrFRF4SigSetupRx.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrFRF4SigSetupRx.setDescription('Number of SETUP frames received.')
wfFrFRF4SigCallProcRx = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 9, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrFRF4SigCallProcRx.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrFRF4SigCallProcRx.setDescription('Number of CALL PROCEEDING frames received.')
wfFrFRF4SigConnectRx = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 9, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrFRF4SigConnectRx.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrFRF4SigConnectRx.setDescription('Number of CONNECT frames received.')
wfFrFRF4SigDisconnectRx = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 9, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrFRF4SigDisconnectRx.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrFRF4SigDisconnectRx.setDescription('Number of DISCONNECT frames received.')
wfFrFRF4SigReleaseRx = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 9, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrFRF4SigReleaseRx.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrFRF4SigReleaseRx.setDescription('Number of RELEASE frames received.')
wfFrFRF4SigReleaseCompleteRx = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 9, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrFRF4SigReleaseCompleteRx.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrFRF4SigReleaseCompleteRx.setDescription('Number of RELEASE COMPLETE frames received.')
wfFrFRF4SigStatusRx = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 9, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrFRF4SigStatusRx.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrFRF4SigStatusRx.setDescription('Number of STATUS frames received.')
wfFrFRF4SigStatusEnquiryRx = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 9, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrFRF4SigStatusEnquiryRx.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrFRF4SigStatusEnquiryRx.setDescription('Number of STATUS ENQUIRY frames received.')
wfFrFRF4SigSetupTx = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 9, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrFRF4SigSetupTx.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrFRF4SigSetupTx.setDescription('Number of SETUP frames transmitted.')
wfFrFRF4SigCallProcTx = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 9, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrFRF4SigCallProcTx.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrFRF4SigCallProcTx.setDescription('Number of CALL PROCEEDING frames transmitted.')
wfFrFRF4SigConnectTx = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 9, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrFRF4SigConnectTx.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrFRF4SigConnectTx.setDescription('Number of CONNECT frames transmitted.')
wfFrFRF4SigDisconnectTx = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 9, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrFRF4SigDisconnectTx.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrFRF4SigDisconnectTx.setDescription('Number of DISCONNECT frames transmitted.')
wfFrFRF4SigReleaseTx = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 9, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrFRF4SigReleaseTx.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrFRF4SigReleaseTx.setDescription('Number of RELEASE frames transmitted.')
wfFrFRF4SigReleaseCompleteTx = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 9, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrFRF4SigReleaseCompleteTx.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrFRF4SigReleaseCompleteTx.setDescription('Number of RELEASE COMPLETE frames transmitted.')
wfFrFRF4SigStatusTx = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 9, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrFRF4SigStatusTx.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrFRF4SigStatusTx.setDescription('Number of STATUS frames transmitted.')
wfFrFRF4SigStatusEnquiryTx = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 9, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrFRF4SigStatusEnquiryTx.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrFRF4SigStatusEnquiryTx.setDescription('Number of STATUS ENQUIRY frames transmitted.')
wfFrSVCOptionsTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 10), )
if mibBuilder.loadTexts: wfFrSVCOptionsTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSVCOptionsTable.setDescription(' The MIB Table for FRF4 SVC Signalling options ')
wfFrSVCOptionsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 10, 1), ).setIndexNames((0, "Wellfleet-FR2-MIB", "wfFrSVCOptionsLineNumber"), (0, "Wellfleet-FR2-MIB", "wfFrSVCOptionsLLIndex"), (0, "Wellfleet-FR2-MIB", "wfFrSVCOptionsCircuitNumber"), (0, "Wellfleet-FR2-MIB", "wfFrSVCOptionsInstanceIndex"))
if mibBuilder.loadTexts: wfFrSVCOptionsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSVCOptionsEntry.setDescription(' The entry of FRF4 SVC Signalling options MIB table ')
wfFrSVCOptionsDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSVCOptionsDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSVCOptionsDelete.setDescription(' Delete SVC options record ')
wfFrSVCOptionsDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSVCOptionsDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSVCOptionsDisable.setDescription(' Disable use of SVC options record ')
wfFrSVCOptionsLineNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 10, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSVCOptionsLineNumber.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSVCOptionsLineNumber.setDescription(' Logical Line number. This attribute is Instance Id 1 ')
wfFrSVCOptionsLLIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 10, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSVCOptionsLLIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSVCOptionsLLIndex.setDescription(' Lower Layer Index. This attribute is Instance Id 2 ')
wfFrSVCOptionsCircuitNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 10, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSVCOptionsCircuitNumber.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSVCOptionsCircuitNumber.setDescription(' Circuit number. This attribute is Instance Id 3 ')
wfFrSVCOptionsInstanceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 10, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSVCOptionsInstanceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSVCOptionsInstanceIndex.setDescription(' Instance index assigned by Site Manager. This attribute is Instance Id 4 ')
wfFrSVCOptionsRemNum = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 10, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSVCOptionsRemNum.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSVCOptionsRemNum.setDescription(' Configured options apply to this number ')
wfFrSVCOptionsRemSubAdr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 10, 1, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSVCOptionsRemSubAdr.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSVCOptionsRemSubAdr.setDescription(' Subaddress of type NSAP (Q.931) further qualifies number ')
wfFrSVCOptionsRemPlan = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 10, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("e164", 1), ("x121", 3))).clone('x121')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSVCOptionsRemPlan.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSVCOptionsRemPlan.setDescription(' Supported Q.931 4.3.8/4.3.10 numbering plans. Each plan is represented by the 4 least significant bits to align with the values stated in Q.931. ')
wfFrSVCOptionsRemTypeNum = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 10, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unknown", 1), ("international", 2))).clone('international')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSVCOptionsRemTypeNum.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSVCOptionsRemTypeNum.setDescription(' Supported Q.931 4.3.8/4.3.10 types of number. Each type is represented by a value one greater than the values stated in Q.931. ')
wfFrSVCOptionsBroadcastDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 10, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSVCOptionsBroadcastDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSVCOptionsBroadcastDisable.setDescription(' Add this number to the SVC broadcast domain ')
wfFrSVCOptionsInactTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 10, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSVCOptionsInactTimer.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSVCOptionsInactTimer.setDescription(' Amount of time (in seconds) to wait for packets before disconnecting the SVC ')
wfFrSVCOptionsInactMode = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 10, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("bothdirections", 1), ("transmitonly", 2), ("receiveonly", 3), ("eitherdirection", 4))).clone('bothdirections')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSVCOptionsInactMode.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSVCOptionsInactMode.setDescription('Inactivity check mode')
wfFrSVCOptionsX213DataPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 10, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)).clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSVCOptionsX213DataPriority.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSVCOptionsX213DataPriority.setDescription(' The priority of data on the network connection as defined in Q.933 and X.213. Each priority is the numerical value associated with said priority in Q.933 ')
wfFrSVCOptionsX213DataLQAPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 10, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)).clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSVCOptionsX213DataLQAPriority.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSVCOptionsX213DataLQAPriority.setDescription(' The lowest quality acceptable (LQA) priority of data on the network connection as defined in Q.933 and X.213. Each priority is the numerical value associated with said priority in Q.933 ')
wfFrSVCOptionsX213GainPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 10, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)).clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSVCOptionsX213GainPriority.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSVCOptionsX213GainPriority.setDescription(' The priority to gain a network connection as defined in Q.933 and X.213. Each priority is the numerical value associated with said priority in Q.933 ')
wfFrSVCOptionsX213GainLQAPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 10, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)).clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSVCOptionsX213GainLQAPriority.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSVCOptionsX213GainLQAPriority.setDescription(' The lowest quality acceptable (LQA) priority to gain a network connection as defined in Q.933 and X.213. Each priority is the numerical value associated with said priority in Q.933 ')
wfFrSVCOptionsX213KeepPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 10, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)).clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSVCOptionsX213KeepPriority.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSVCOptionsX213KeepPriority.setDescription(' The priority to keep a network connection as defined in Q.933 and X.213. Each priority is the numerical value associated with said priority in Q.933 ')
wfFrSVCOptionsX213KeepLQAPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 10, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)).clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSVCOptionsX213KeepLQAPriority.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSVCOptionsX213KeepLQAPriority.setDescription(' The lowest quality acceptable (LQA) priority to keep a network connection as defined in Q.933 and X.213. Each priority is the numerical value associated with said priority in Q.933 ')
wfFrSVCOptionsLLCoreOutThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 10, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSVCOptionsLLCoreOutThroughput.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSVCOptionsLLCoreOutThroughput.setDescription(' Requested outgoing throughput. Q.933:Throughput is the average number of frame mode information field bits transferred per second across a user-network interface in one direction, measured over an interval of duration T.')
wfFrSVCOptionsLLCoreInThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 10, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSVCOptionsLLCoreInThroughput.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSVCOptionsLLCoreInThroughput.setDescription(' Requested incoming throughput. Q.933:Throughput is the average number of frame mode information field bits transferred per second across a user-network interface in one direction, measured over an interval of duration T.')
wfFrSVCOptionsLLCoreMinOutThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 10, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSVCOptionsLLCoreMinOutThroughput.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSVCOptionsLLCoreMinOutThroughput.setDescription(' Minimum acceptable outgoing throughput. Q.933:Throughput is the average number of frame mode information field bits transferred per second across a user-network interface in one direction, measured over an interval of duration T.')
wfFrSVCOptionsLLCoreMinInThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 10, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSVCOptionsLLCoreMinInThroughput.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSVCOptionsLLCoreMinInThroughput.setDescription(' Minimum acceptable incoming throughput. Q.933:Throughput is the average number of frame mode information field bits transferred per second across a user-network interface in one direction, measured over an interval of duration T.')
wfFrSVCOptionsLLCoreOutBc = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 10, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSVCOptionsLLCoreOutBc.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSVCOptionsLLCoreOutBc.setDescription(' Outgoing committed burst size in bytes. Q.933:Committed burst is the maximum amount of data (in bits) that the network agrees to transfer, under normal conditions, over a measurement interval T. information field bits transferred per second across a user-network interface in one direction, measured over an interval of duration T.')
wfFrSVCOptionsLLCoreInBc = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 10, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSVCOptionsLLCoreInBc.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSVCOptionsLLCoreInBc.setDescription(' Incoming committed burst size in bytes. Q.933:Committed burst is the maximum amount of data (in bits) that the network agrees to transfer, under normal conditions, over a measurement interval T. information field bits transferred per second across a user-network interface in one direction, measured over an interval of duration T.')
wfFrSVCOptionsLLCoreOutBe = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 10, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSVCOptionsLLCoreOutBe.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSVCOptionsLLCoreOutBe.setDescription(' Outgoing excess burst size in bytes. Q.933:Excess burst is the maximum amount of uncommitted data (in bits) that the network will attempt to deliver over a measurement interval T. ')
wfFrSVCOptionsLLCoreInBe = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 10, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSVCOptionsLLCoreInBe.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSVCOptionsLLCoreInBe.setDescription(' Incoming excess burst size in bytes. Q.933:Excess burst is the maximum amount of uncommitted data (in bits) that the network will attempt to deliver over a measurement interval T. ')
wfFrSVCOptionsCongestionDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 10, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("inherit", 3))).clone('inherit')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSVCOptionsCongestionDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSVCOptionsCongestionDisable.setDescription('This indicates whether the congestion algorithm should be used for this VC. If this is not set, the value is inherited from the DLCMI record.')
wfFrSVCOptionsCongestionTmr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 10, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("half", 1), ("one", 2), ("oneandhalf", 3), ("two", 4), ("twoandhalf", 5), ("three", 6), ("threeandhalf", 7), ("four", 8), ("fourandhalf", 9), ("five", 10))).clone('one')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSVCOptionsCongestionTmr.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSVCOptionsCongestionTmr.setDescription('This is the time period over which congestion notifications are counted. It is also the period during which the VC will cease sending information before resuming transmission if no congestion notifications are received.')
wfFrSVCOptionsCongestionCtr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 10, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 500)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSVCOptionsCongestionCtr.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSVCOptionsCongestionCtr.setDescription('This represents the number of congestion notifications, when received within wfFrSVCOptionsCongestionTmr time, that will result in the VC ceasing transmissions.')
wfFrSVCOptionsCongestionMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 10, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("shutdown", 1), ("throttle", 2), ("throttlethenshutdown", 3), ("inherit", 4))).clone('inherit')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSVCOptionsCongestionMethod.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSVCOptionsCongestionMethod.setDescription('Action when VC congestion occurs')
wfFrSVCOptionsTrafficShapingDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 10, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSVCOptionsTrafficShapingDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSVCOptionsTrafficShapingDisable.setDescription('Enable VC traffic shaping')
wfFrSVCOptionsWcpEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 10, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSVCOptionsWcpEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSVCOptionsWcpEnable.setDescription('Enable Compression')
wfFrSVCOptionsName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 10, 1, 34), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSVCOptionsName.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSVCOptionsName.setDescription('User name for SVC options')
wfFrSVCActiveCallTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 11), )
if mibBuilder.loadTexts: wfFrSVCActiveCallTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSVCActiveCallTable.setDescription(' The MIB Table for the FRF.4 signalling parameters in use for a sucessfully signalled SVC ')
wfFrSVCActiveCallEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 11, 1), ).setIndexNames((0, "Wellfleet-FR2-MIB", "wfFrSVCActiveCallLineNumber"), (0, "Wellfleet-FR2-MIB", "wfFrSVCActiveCallLLIndex"), (0, "Wellfleet-FR2-MIB", "wfFrSVCActiveCallDLCI"))
if mibBuilder.loadTexts: wfFrSVCActiveCallEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSVCActiveCallEntry.setDescription(' The entry of FRF4 SVC active call MIB table ')
wfFrSVCActiveCallDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrSVCActiveCallDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSVCActiveCallDelete.setDescription(' Delete SVC active call record ')
wfFrSVCActiveCallLineNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 11, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSVCActiveCallLineNumber.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSVCActiveCallLineNumber.setDescription(' Logical Line number. This attribute is Instance Id 1 ')
wfFrSVCActiveCallLLIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 11, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSVCActiveCallLLIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSVCActiveCallLLIndex.setDescription(' Lower Layer Index. This attribute is Instance Id 2 ')
wfFrSVCActiveCallDLCI = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 11, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSVCActiveCallDLCI.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSVCActiveCallDLCI.setDescription(' DCLI number. This attribute is Instance Id 3 ')
wfFrSVCActiveCallDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 11, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inbound", 1), ("outbound", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSVCActiveCallDirection.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSVCActiveCallDirection.setDescription(' Direction of call relative to router ')
wfFrSVCActiveCallCircuitNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 11, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSVCActiveCallCircuitNumber.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSVCActiveCallCircuitNumber.setDescription(' Circuit number associated with this call ')
wfFrSVCActiveCallCalledNum = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 11, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSVCActiveCallCalledNum.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSVCActiveCallCalledNum.setDescription(' Number from called party number information element ')
wfFrSVCActiveCallCalledSubAdr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 11, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSVCActiveCallCalledSubAdr.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSVCActiveCallCalledSubAdr.setDescription(' Subaddress from called party subaddress information element ')
wfFrSVCActiveCallCalledPlan = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 11, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSVCActiveCallCalledPlan.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSVCActiveCallCalledPlan.setDescription(' Numbering plan from called party number information element ')
wfFrSVCActiveCallCalledTypeNum = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 11, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSVCActiveCallCalledTypeNum.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSVCActiveCallCalledTypeNum.setDescription(' Type of number from called party number information element ')
wfFrSVCActiveCallCallingNum = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 11, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSVCActiveCallCallingNum.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSVCActiveCallCallingNum.setDescription(' Number from calling party number information element ')
wfFrSVCActiveCallCallingSubAdr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 11, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSVCActiveCallCallingSubAdr.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSVCActiveCallCallingSubAdr.setDescription(' Subaddress from calling party subaddress information element ')
wfFrSVCActiveCallCallingPlan = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 11, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSVCActiveCallCallingPlan.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSVCActiveCallCallingPlan.setDescription(' Numbering plan from calling party number information element ')
wfFrSVCActiveCallCallingTypeNum = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 11, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSVCActiveCallCallingTypeNum.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSVCActiveCallCallingTypeNum.setDescription(' Type of number from calling party number information element ')
wfFrSVCActiveCallX213DataPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 11, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSVCActiveCallX213DataPriority.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSVCActiveCallX213DataPriority.setDescription(' The priority of data on the network connection, from the X.213 information element. ')
wfFrSVCActiveCallX213DataLQAPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 11, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSVCActiveCallX213DataLQAPriority.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSVCActiveCallX213DataLQAPriority.setDescription(' The lowest quality acceptable (LQA) priority of data on the network connection, from the X.213 information element. ')
wfFrSVCActiveCallX213GainPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 11, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSVCActiveCallX213GainPriority.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSVCActiveCallX213GainPriority.setDescription(' The priority to gain a network connection, from the X.213 information element. ')
wfFrSVCActiveCallX213GainLQAPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 11, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSVCActiveCallX213GainLQAPriority.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSVCActiveCallX213GainLQAPriority.setDescription(' The lowest quality acceptable (LQA) priority to gain a network connection, from the X.213 information element. ')
wfFrSVCActiveCallX213KeepPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 11, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSVCActiveCallX213KeepPriority.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSVCActiveCallX213KeepPriority.setDescription(' The priority to keep a network connection, from the X.213 information element. ')
wfFrSVCActiveCallX213KeepLQAPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 11, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSVCActiveCallX213KeepLQAPriority.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSVCActiveCallX213KeepLQAPriority.setDescription(' The lowest quality acceptable (LQA) priority to keep a network connection, from the X.213 information element. ')
wfFrSVCActiveCallLLCoreOutThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 11, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSVCActiveCallLLCoreOutThroughput.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSVCActiveCallLLCoreOutThroughput.setDescription(' Requested outgoing throughput, from the link layer core information element. ')
wfFrSVCActiveCallLLCoreInThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 11, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSVCActiveCallLLCoreInThroughput.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSVCActiveCallLLCoreInThroughput.setDescription(' Requested incoming throughput, from the link layer core information element. ')
wfFrSVCActiveCallLLCoreMinOutThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 11, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSVCActiveCallLLCoreMinOutThroughput.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSVCActiveCallLLCoreMinOutThroughput.setDescription(' Minimum acceptable outgoing throughput, from the link layer core information element. ')
wfFrSVCActiveCallLLCoreMinInThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 11, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSVCActiveCallLLCoreMinInThroughput.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSVCActiveCallLLCoreMinInThroughput.setDescription(' Minimum acceptable incoming throughput, from the link layer core information element. ')
wfFrSVCActiveCallLLCoreOutBc = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 11, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSVCActiveCallLLCoreOutBc.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSVCActiveCallLLCoreOutBc.setDescription(' Outgoing committed burst size in bytes, from the link layer core information element. ')
wfFrSVCActiveCallLLCoreInBc = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 11, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSVCActiveCallLLCoreInBc.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSVCActiveCallLLCoreInBc.setDescription(' Incoming committed burst size in bytes, from the link layer core information element. ')
wfFrSVCActiveCallLLCoreOutBe = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 11, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSVCActiveCallLLCoreOutBe.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSVCActiveCallLLCoreOutBe.setDescription(' Outgoing excess burst size in bytes, from the link layer core information element. ')
wfFrSVCActiveCallLLCoreInBe = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 11, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSVCActiveCallLLCoreInBe.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSVCActiveCallLLCoreInBe.setDescription(' Incoming excess burst size in bytes, from the link layer core information element. ')
wfFrSVCActiveCallConnectTime = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 11, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrSVCActiveCallConnectTime.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrSVCActiveCallConnectTime.setDescription('Time connect message was sent or received. ')
wfFrPtIntfTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 12), )
if mibBuilder.loadTexts: wfFrPtIntfTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrPtIntfTable.setDescription('The PVC Passthru interface table contains the list of interface circuits. There will be one entry for each direct mode PVC configured for PVC Passthru.')
wfFrPtIntfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 12, 1), ).setIndexNames((0, "Wellfleet-FR2-MIB", "wfFrPtIntfCct"), (0, "Wellfleet-FR2-MIB", "wfFrPtIntfDlci"))
if mibBuilder.loadTexts: wfFrPtIntfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrPtIntfEntry.setDescription('A PVC Passthru interface.')
wfFrPtIntfDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrPtIntfDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrPtIntfDelete.setDescription('Create/delete indicator for the PVC Passthru Interface entry.')
wfFrPtIntfDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrPtIntfDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrPtIntfDisable.setDescription('Enable/disable indicator for the PVC Passthru Interface entry.')
wfFrPtIntfCct = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 12, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrPtIntfCct.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrPtIntfCct.setDescription('The DP circuit on which this interface resides. This attribute is the first component of the Instance ID for this object.')
wfFrPtIntfDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 12, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrPtIntfDlci.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrPtIntfDlci.setDescription('The dlci associated with this circuit. This attribute is the second component of the Instance ID for this object.')
wfFrPtIntfState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 12, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2), ("invalid", 3), ("notpresent", 4))).clone('notpresent')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrPtIntfState.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrPtIntfState.setDescription('Interface state indicator. The state is active if the circuit is up.')
wfFrPtIntfRxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 12, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrPtIntfRxFrames.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrPtIntfRxFrames.setDescription('The number of frames received on this interface.')
wfFrPtIntfTxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 12, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrPtIntfTxFrames.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrPtIntfTxFrames.setDescription('The number of frames transmitted on this interface.')
wfFrPtIntfDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 12, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrPtIntfDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrPtIntfDiscards.setDescription('The number of inbound frames discarded, either because this passthru interface is disabled or it has no partner.')
wfFrPtIntfDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 12, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrPtIntfDrops.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrPtIntfDrops.setDescription('The number of outbound frames dropped, because this passthru interface is disabled or inactive.')
wfFrPtMappingTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 13), )
if mibBuilder.loadTexts: wfFrPtMappingTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrPtMappingTable.setDescription('The PVC Passthru mapping table contains the static routes between PVCs.')
wfFrPtMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 13, 1), ).setIndexNames((0, "Wellfleet-FR2-MIB", "wfFrPtMappingCctA"), (0, "Wellfleet-FR2-MIB", "wfFrPtMappingDlciA"), (0, "Wellfleet-FR2-MIB", "wfFrPtMappingCctB"), (0, "Wellfleet-FR2-MIB", "wfFrPtMappingDlciB"))
if mibBuilder.loadTexts: wfFrPtMappingEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrPtMappingEntry.setDescription('A PVC Passthru mapping.')
wfFrPtMappingDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 13, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrPtMappingDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrPtMappingDelete.setDescription('Create/delete indicator for the PVC Passthru Mapping entry.')
wfFrPtMappingDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 13, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrPtMappingDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrPtMappingDisable.setDescription('Enable/disable indicator for the PVC Passthru Mapping entry.')
wfFrPtMappingCctA = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 13, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrPtMappingCctA.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrPtMappingCctA.setDescription('The first circuit (i.e., hybrid mode PVC) for this mapping. All data received on this circuit is delivered to circuit B. This attribute is the 1st of 2 components of the Instance ID for this object.')
wfFrPtMappingDlciA = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 13, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrPtMappingDlciA.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrPtMappingDlciA.setDescription('The dlci associated with circuit A.')
wfFrPtMappingCctB = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 13, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrPtMappingCctB.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrPtMappingCctB.setDescription('The second circuit (i.e., hybrid mode PVC) for this mapping. All data received on this circuit is delivered to circuit A. This attribute is the 2nd of 2 components of the Instance ID for this object.')
wfFrPtMappingDlciB = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 13, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrPtMappingDlciB.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrPtMappingDlciB.setDescription('The dlci associated with circuit B.')
wfFrPtMappingState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 13, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2), ("invalid", 3), ("notpresent", 4))).clone('notpresent')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrPtMappingState.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrPtMappingState.setDescription('Mapping state indicator. The state is active if both circuits are up, inactive if one or both are down. The state is invalid if this mapping conflicts with another, or is misconfigured.')
wfFrMlTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 14), )
if mibBuilder.loadTexts: wfFrMlTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrMlTable.setDescription('The Multilink Frame Relay Table, containing information and statistics for each Multilink Circuit')
wfFrMlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 14, 1), ).setIndexNames((0, "Wellfleet-FR2-MIB", "wfFrMlCircuitNumber"))
if mibBuilder.loadTexts: wfFrMlEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrMlEntry.setDescription('per bundle Multilink Frame Relay information and counters')
wfFrMlDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 14, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrMlDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrMlDelete.setDescription('Create/Delete parameter')
wfFrMlCircuitNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 14, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1023))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrMlCircuitNumber.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrMlCircuitNumber.setDescription('cct number for this instance')
wfFrMlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 14, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dtedte", 1), ("uni", 2))).clone('dtedte')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrMlMode.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrMlMode.setDescription('Multilink frame relay mode')
wfFrMlFragPermEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 14, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrMlFragPermEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrMlFragPermEnable.setDescription('Bundle level enable/disable for fragmenting packets regardless of trigger size.')
wfFrMlCircuitMaxBuffers = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 14, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 60)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrMlCircuitMaxBuffers.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrMlCircuitMaxBuffers.setDescription('This is the maximum number of stored buffers allowed in the Multilink Receive logic for this circuit at any one time.')
wfFrMlFragTriggerSize = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 14, 1, 6), Integer32().clone(256)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrMlFragTriggerSize.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrMlFragTriggerSize.setDescription('This is the minimum size of a packet of which Multilink will fragment.')
wfFrMlFragStrict = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 14, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrMlFragStrict.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrMlFragStrict.setDescription('enable/disable strict fragmentation algorithm i.e. fragmenting a packet when its size exceeds the threshold regardless of what the average packet size is')
wfFrMlAggVCStatusMode = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 14, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("anyactive", 1), ("allactive", 2), ("other", 3))).clone('anyactive')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrMlAggVCStatusMode.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrMlAggVCStatusMode.setDescription('FRF.13 defined mode of status aggregation.')
wfFrMlCompressionEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 14, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrMlCompressionEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrMlCompressionEnable.setDescription('Enable compression for all PVCs in the bundle.')
wfFrMlHomeSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 14, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrMlHomeSlot.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrMlHomeSlot.setDescription('Slot on which this Multilink Control Subsystem exists')
wfFrMlStatsLineCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 14, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrMlStatsLineCnt.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrMlStatsLineCnt.setDescription('Current count of lines in Multilink bundle')
wfFrMlStatsBundleSpd = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 14, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrMlStatsBundleSpd.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrMlStatsBundleSpd.setDescription('Current total bandwidth of Multilink bundle')
wfFrMlStatsTxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 14, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrMlStatsTxOctets.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrMlStatsTxOctets.setDescription('Number of octets transmitted by Multilink')
wfFrMlStatsTxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 14, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrMlStatsTxPkts.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrMlStatsTxPkts.setDescription('Number of packets transmitted by Multilink')
wfFrMlStatsAvgTxListLen = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 14, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrMlStatsAvgTxListLen.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrMlStatsAvgTxListLen.setDescription('Average number of packets received in the transient list by the Multilink Transmit gate.')
wfFrMlStatsRxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 14, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrMlStatsRxOctets.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrMlStatsRxOctets.setDescription('Number of octets received without error')
wfFrMlStatsRxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 14, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrMlStatsRxPkts.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrMlStatsRxPkts.setDescription('Number of packets received by Multilink')
wfFrMlStatsReasmFails = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 14, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrMlStatsReasmFails.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrMlStatsReasmFails.setDescription('Number of packet reassembly failures')
wfFrMlStatsSeqNumberLost = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 14, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrMlStatsSeqNumberLost.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrMlStatsSeqNumberLost.setDescription('Number of Multilink packets considered to be lost on the wire')
wfFrMlStatsSeqNumberArrivedLate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 14, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrMlStatsSeqNumberArrivedLate.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrMlStatsSeqNumberArrivedLate.setDescription('Number of Multilink packets which arrive containing an old Sequence Number. IE: packets with a more current Sequence Number have already been sent up to NCP')
wfFrMlStatsReSeqBufferCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 14, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrMlStatsReSeqBufferCnt.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrMlStatsReSeqBufferCnt.setDescription('Number of Multilink packets currently stored in the ReSequencing buffer pool.')
wfFrMlStatsReSeqBufferMax = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 14, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrMlStatsReSeqBufferMax.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrMlStatsReSeqBufferMax.setDescription('The Maximum Number of Multilink packets stored in the ReSequencing buffer pool.')
wfFrMlStatsExceededBufferMax = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 14, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrMlStatsExceededBufferMax.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrMlStatsExceededBufferMax.setDescription('The number of times a buffer needed to be stored by the Multilink Receive logic when the count of buffers stored, wfFrMlStatsReSeqBufferMax,was equal to the maximum allowable for this circuit, wfFrMlCircuitMaxBuffers.')
wfFrMlStatsLinkIdleEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 14, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrMlStatsLinkIdleEvents.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrMlStatsLinkIdleEvents.setDescription('The number of times the Multilink Receive logic detected a stored buffer received on a line which has been declared idle.')
wfFrMlStatsCalcPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 14, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrMlStatsCalcPercent.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrMlStatsCalcPercent.setDescription('enable/disable collection of Rx percentage line usage')
wfFrMlStatsDebug = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 14, 1, 26), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrMlStatsDebug.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrMlStatsDebug.setDescription('DEBUG parameter - this is used to control debug code for the Multilink subsystem')
wfFrMlStatsReassmBufferCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 14, 1, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrMlStatsReassmBufferCnt.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrMlStatsReassmBufferCnt.setDescription('Number of Multilink packets currently stored in the Reassembling buffer pools.')
wfFrMlStatsReassmBufferMax = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 14, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrMlStatsReassmBufferMax.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrMlStatsReassmBufferMax.setDescription('The Maximum Number of Multilink packets stored in the Reassembling buffer pools.')
wfFrMlStatsNumPktsFragmented = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 14, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrMlStatsNumPktsFragmented.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrMlStatsNumPktsFragmented.setDescription('The Number of Multilink packets that were fragmented.')
wfFrMlStatsPQHiXmits = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 14, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrMlStatsPQHiXmits.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrMlStatsPQHiXmits.setDescription('High priority transmit count.')
wfFrMlStatsPQNormalXmits = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 14, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrMlStatsPQNormalXmits.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrMlStatsPQNormalXmits.setDescription('Normal priority transmit count.')
wfFrMlStatsPQLoXmits = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 14, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrMlStatsPQLoXmits.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrMlStatsPQLoXmits.setDescription('Low priority transmit count')
wfFrMlStatsPQHiClippedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 14, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrMlStatsPQHiClippedPkts.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrMlStatsPQHiClippedPkts.setDescription('High priority transmit clip Count')
wfFrMlStatsPQNormalClippedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 14, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrMlStatsPQNormalClippedPkts.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrMlStatsPQNormalClippedPkts.setDescription('Normal priority transmit clip Count')
wfFrMlStatsPQLoClippedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 14, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrMlStatsPQLoClippedPkts.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrMlStatsPQLoClippedPkts.setDescription('Low priority transmit clip Count')
wfFrMlStatsPQIntrQHighWaterPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 14, 1, 36), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrMlStatsPQIntrQHighWaterPkts.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrMlStatsPQIntrQHighWaterPkts.setDescription('Interrupt-priority Queue high-water mark')
wfFrMlStatsPQHiQHighWaterPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 14, 1, 37), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrMlStatsPQHiQHighWaterPkts.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrMlStatsPQHiQHighWaterPkts.setDescription('High-priority Queue high-water mark')
wfFrMlStatsPQNormalQHighWaterPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 14, 1, 38), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrMlStatsPQNormalQHighWaterPkts.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrMlStatsPQNormalQHighWaterPkts.setDescription('Normal-priority Queue high-water mark')
wfFrMlStatsPQLoQHighWaterPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 14, 1, 39), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrMlStatsPQLoQHighWaterPkts.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrMlStatsPQLoQHighWaterPkts.setDescription('Low-priority Queue high-water mark')
wfFrMlStatsPQHighWaterPktsClear = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 14, 1, 40), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrMlStatsPQHighWaterPktsClear.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrMlStatsPQHighWaterPktsClear.setDescription('Attribute to clear the high-water marks. When the MIB changes, Priority Queueing (if ENABLED) checks to see if HighWaterPktsClear is different than the last time the MIB was modified in any way. If it is different, all the high water marks (see above) are set to zero.')
wfFrMlStatsPQDroppedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 14, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrMlStatsPQDroppedPkts.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrMlStatsPQDroppedPkts.setDescription('Packets which were filtered in Priority Queueing')
wfFrMlStatsPQLargePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 14, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrMlStatsPQLargePkts.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrMlStatsPQLargePkts.setDescription('Large Packets which became an exception to latency rules')
wfFrMlStatsPQHiTotalOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 14, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrMlStatsPQHiTotalOctets.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrMlStatsPQHiTotalOctets.setDescription('Running total of High Octets transmitted when using Bandwidth Allocation dequeueing algorithm')
wfFrMlStatsPQNormalTotalOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 14, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrMlStatsPQNormalTotalOctets.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrMlStatsPQNormalTotalOctets.setDescription('Running total of Normal Octets transmitted when using Bandwidth Allocation dequeueing algorithm')
wfFrMlStatsPQLoTotalOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 14, 1, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrMlStatsPQLoTotalOctets.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrMlStatsPQLoTotalOctets.setDescription('Running total of Low Octets transmitted when using Bandwidth Allocation dequeueing algorithm')
wfFrMlStatsPQPktsNotQueued = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 14, 1, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrMlStatsPQPktsNotQueued.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrMlStatsPQPktsNotQueued.setDescription('Packets that were not Queued or Dropped by Priority Queuing ')
wfFrMlVCTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 15), )
if mibBuilder.loadTexts: wfFrMlVCTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrMlVCTable.setDescription('The Multilink Frame Relay VC Table, containing information and statistics for each multilink aggregated VC')
wfFrMlVCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 15, 1), ).setIndexNames((0, "Wellfleet-FR2-MIB", "wfFrMlVCCircuitNumber"), (0, "Wellfleet-FR2-MIB", "wfFrMlVCDlci"))
if mibBuilder.loadTexts: wfFrMlVCEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrMlVCEntry.setDescription('Multilink Frame Relay VC information and counters')
wfFrMlVCDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 15, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrMlVCDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrMlVCDelete.setDescription('Create/Delete parameter')
wfFrMlVCCircuitNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 15, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1023))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrMlVCCircuitNumber.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrMlVCCircuitNumber.setDescription('cct number for this instance')
wfFrMlVCDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 15, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrMlVCDlci.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrMlVCDlci.setDescription(' DCLI number. ')
wfFrMlVCAggState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 15, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2))).clone('active')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrMlVCAggState.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrMlVCAggState.setDescription('Vc is active or inactive according to rules of wfFrMlAggVCStatusMode.')
wfFrMlVCAggNumberVCs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 15, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrMlVCAggNumberVCs.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrMlVCAggNumberVCs.setDescription('Number of VCs comprising this aggregated VC.')
wfFrMlVCAggNumberVCsActive = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 15, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrMlVCAggNumberVCsActive.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrMlVCAggNumberVCsActive.setDescription('Number of VCs comprising this aggregated VC that are active.')
wfFrMlVCStatsLineCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 15, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrMlVCStatsLineCnt.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrMlVCStatsLineCnt.setDescription('Current count of lines in this aggregated VC that are active')
wfFrMlVCStatsBundleSpd = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 15, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrMlVCStatsBundleSpd.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrMlVCStatsBundleSpd.setDescription('Current total bandwidth of lines used by this vc')
wfFrMlVCStatsTxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 15, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrMlVCStatsTxOctets.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrMlVCStatsTxOctets.setDescription('Number of octets transmitted by Multilink')
wfFrMlVCStatsTxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 15, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrMlVCStatsTxPkts.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrMlVCStatsTxPkts.setDescription('Number of packets transmitted by Multilink')
wfFrMlVCStatsAvgTxListLen = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 15, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrMlVCStatsAvgTxListLen.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrMlVCStatsAvgTxListLen.setDescription('Average number of packets received in the transient list by the Multilink Transmit gate.')
wfFrMlVCStatsRxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 15, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrMlVCStatsRxOctets.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrMlVCStatsRxOctets.setDescription('Number of octets received without error')
wfFrMlVCStatsRxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 15, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrMlVCStatsRxPkts.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrMlVCStatsRxPkts.setDescription('Number of packets received by Multilink')
wfFrMlVCStatsReasmFails = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 15, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrMlVCStatsReasmFails.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrMlVCStatsReasmFails.setDescription('Number of packet reassembly failures')
wfFrMlVCStatsSeqNumberLost = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 15, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrMlVCStatsSeqNumberLost.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrMlVCStatsSeqNumberLost.setDescription('Number of Multilink packets considered to be lost on the wire')
wfFrMlVCStatsSeqNumberArrivedLate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 15, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrMlVCStatsSeqNumberArrivedLate.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrMlVCStatsSeqNumberArrivedLate.setDescription('Number of Multilink packets which arrive containing an old Sequence Number. IE: packets with a more current Sequence Number have already been sent up to NCP')
wfFrMlVCStatsReSeqBufferCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 15, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrMlVCStatsReSeqBufferCnt.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrMlVCStatsReSeqBufferCnt.setDescription('Number of Multilink packets currently stored in the ReSequencing buffer pool.')
wfFrMlVCStatsReSeqBufferMax = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 15, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrMlVCStatsReSeqBufferMax.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrMlVCStatsReSeqBufferMax.setDescription('The Maximum Number of Multilink packets stored in the ReSequencing buffer pool.')
wfFrMlVCStatsExceededBufferMax = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 15, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrMlVCStatsExceededBufferMax.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrMlVCStatsExceededBufferMax.setDescription('The number of times a buffer needed to be stored by the Multilink Receive logic when the count of buffers stored, wfFrMlVCStatsReSeqBufferMax,was equal to the maximum allowable for this circuit, wfFrMlVCCircuitMaxBuffers.')
wfFrMlVCStatsLinkIdleEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 15, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrMlVCStatsLinkIdleEvents.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrMlVCStatsLinkIdleEvents.setDescription('The number of times the Multilink Receive logic detected a stored buffer received on a line which has been declared idle.')
wfFrMlVCStatsCalcPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 15, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrMlVCStatsCalcPercent.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrMlVCStatsCalcPercent.setDescription('enable/disable collection of Rx percentage line usage')
wfFrMlVCStatsDebug = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 15, 1, 22), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFrMlVCStatsDebug.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrMlVCStatsDebug.setDescription('DEBUG parameter - this is used to control debug code for the Multilink subsystem')
wfFrMlVCStatsReassmBufferCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 15, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrMlVCStatsReassmBufferCnt.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrMlVCStatsReassmBufferCnt.setDescription('Number of Multilink packets currently stored in the Reassembling buffer pools.')
wfFrMlVCStatsReassmBufferMax = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 15, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrMlVCStatsReassmBufferMax.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrMlVCStatsReassmBufferMax.setDescription('The Maximum Number of Multilink packets stored in the Reassembling buffer pools.')
wfFrMlVCStatsNumPktsFragmented = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 15, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrMlVCStatsNumPktsFragmented.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrMlVCStatsNumPktsFragmented.setDescription('The Number of Multilink packets that were fragmented.')
wfFrMapDlcmiTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 16), )
if mibBuilder.loadTexts: wfFrMapDlcmiTable.setReference('American National Standard T1.617-1991, Annex D')
if mibBuilder.loadTexts: wfFrMapDlcmiTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrMapDlcmiTable.setDescription('The Parameters for the Data Link Connection Management Interface for the frame relay service on this interface.')
wfFrMapDlcmiEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 16, 1), ).setIndexNames((0, "Wellfleet-FR2-MIB", "wfFrMapDlcmiIfIndex"))
if mibBuilder.loadTexts: wfFrMapDlcmiEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrMapDlcmiEntry.setDescription('The Parameters for a particular Data Link Connection Management Interface.')
wfFrMapDlcmiIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 16, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrMapDlcmiIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrMapDlcmiIfIndex.setDescription('The ifIndex value of the corresponding ifEntry.')
wfFrMapDlcmiState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 16, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noLmiConfigured", 1), ("lmiRev1", 2), ("ansiT1617D", 3), ("ansiT1617B", 4), ("itut933A", 5), ("ansiT1617D1994", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrMapDlcmiState.setReference('American National Standard T1.617-1991, American National Standard T1.617a-1994, ITU-T Recommendation Q.933 (03/93).')
if mibBuilder.loadTexts: wfFrMapDlcmiState.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrMapDlcmiState.setDescription('This variable states which Data Link Connection Management scheme is active (and by implication, what DLCI it uses) on the Frame Relay interface.')
wfFrMapDlcmiAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 16, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("q921", 1), ("q922March90", 2), ("q922November90", 3), ("q922", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrMapDlcmiAddress.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrMapDlcmiAddress.setDescription('This variable states which address format is in use on the Frame Relay interface.')
wfFrMapDlcmiAddressLen = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 16, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("twoOctets", 2), ("threeOctets", 3), ("fourOctets", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrMapDlcmiAddressLen.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrMapDlcmiAddressLen.setDescription('This variable states the address length in octets. In the case of Q922 format, the length indicates the entire length of the address including the control portion.')
wfFrMapDlcmiPollingInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 16, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 30)).clone(10)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrMapDlcmiPollingInterval.setReference('American National Standard T1.617-1991, Section D.7 Timer T391.')
if mibBuilder.loadTexts: wfFrMapDlcmiPollingInterval.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrMapDlcmiPollingInterval.setDescription('This is the number of seconds between successive status enquiry messages.')
wfFrMapDlcmiFullEnquiryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 16, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrMapDlcmiFullEnquiryInterval.setReference('American National Standard T1.617-1991, Section D.7 Counter N391.')
if mibBuilder.loadTexts: wfFrMapDlcmiFullEnquiryInterval.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrMapDlcmiFullEnquiryInterval.setDescription('Number of status enquiry intervals that pass before issuance of a full status enquiry message.')
wfFrMapDlcmiErrorThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 16, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrMapDlcmiErrorThreshold.setReference('American National Standard T1.617-1991, Section D.5.1 Counter N392.')
if mibBuilder.loadTexts: wfFrMapDlcmiErrorThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrMapDlcmiErrorThreshold.setDescription('This is the maximum number of unanswered Status Enquiries the equipment shall accept before declaring the interface down.')
wfFrMapDlcmiMonitoredEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 16, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrMapDlcmiMonitoredEvents.setReference('American National Standard T1.617-1991, Section D.5.2 Counter N393.')
if mibBuilder.loadTexts: wfFrMapDlcmiMonitoredEvents.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrMapDlcmiMonitoredEvents.setDescription("This is the number of status polling intervals over which the error threshold is counted. For example, if within 'MonitoredEvents' number of events the station receives 'ErrorThreshold' number of errors, the interface is marked as down.")
wfFrMapDlcmiMaxSupportedVCs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 16, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrMapDlcmiMaxSupportedVCs.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrMapDlcmiMaxSupportedVCs.setDescription("The maximum number of Virtual Circuits allowed for this interface. Usually dictated by the Frame Relay network. In response to a SET, if a value less than zero or higher than the agent's maximal capability is configured, the agent should respond badValue")
wfFrMapDlcmiMulticast = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 16, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nonBroadcast", 1), ("broadcast", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrMapDlcmiMulticast.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrMapDlcmiMulticast.setDescription('This indicates whether the Frame Relay interface is using a multicast service.')
wfFrMapDlcmiStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 16, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("running", 1), ("fault", 2), ("initializing", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrMapDlcmiStatus.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrMapDlcmiStatus.setDescription('This indicates the status of the Frame Relay interface as determined by the performance of the dlcmi. If no dlcmi is running, the Frame Relay interface will stay in the running state indefinitely.')
wfFrMapDlcmiRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 16, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrMapDlcmiRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrMapDlcmiRowStatus.setDescription('SNMP Version 2 Row Status Variable. Writable objects in the table may be written in any RowStatus state.')
wfFrMapDlcmiLineNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 16, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrMapDlcmiLineNumber.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrMapDlcmiLineNumber.setDescription('Instance identifier. This is the line number on which the associated Frame Relay interface resides.')
wfFrMapDlcmiLLIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 16, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrMapDlcmiLLIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrMapDlcmiLLIndex.setDescription('The Lower layer index uniquely identifies the lower layer in cases where the lower layer may be something other than the physical layer. For example if Frame Relay is running over an ATM VC, the LLIndex identifies the ATM VC.')
wfFrMapCircuitTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 17), )
if mibBuilder.loadTexts: wfFrMapCircuitTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrMapCircuitTable.setDescription('The Frame Relay VC Table to support RFC2115 , containing information and statistics for frCircuitEntry')
wfFrMapCircuitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 17, 1), ).setIndexNames((0, "Wellfleet-FR2-MIB", "wfFrMapCircuitIfIndex"), (0, "Wellfleet-FR2-MIB", "wfFrMapCircuitDlci"))
if mibBuilder.loadTexts: wfFrMapCircuitEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrMapCircuitEntry.setDescription('Frame Relay VC information mapped to frCircuitEntry')
wfFrMapCircuitIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 17, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrMapCircuitIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrMapCircuitIfIndex.setDescription('The ifIndex Value of the ifEntry this virtual circuit is layered onto.')
wfFrMapCircuitDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 17, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrMapCircuitDlci.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrMapCircuitDlci.setDescription('The Data Link Connection Identifier for this virtual circuit.')
wfFrMapCircuitState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 17, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("invalid", 1), ("active", 2), ("inactive", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrMapCircuitState.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrMapCircuitState.setDescription("Indicates whether the particular virtual circuit is operational. In the absence of a Data Link Connection Management Interface, virtual circuit entries (rows) may be created by setting virtual circuit state to 'active', or deleted by changing Circuit state to 'invalid'. Whether or not the row actually disappears is left to the implementation, so this object may actually read as 'invalid' for some arbitrary length of time. It is also legal to set the state of a virtual circuit to 'inactive' to temporarily disable a given circuit. The use of 'invalid' is deprecated in this SNMP Version 2 MIB, in favor of frCircuitRowStatus.")
wfFrMapCircuitReceivedFECNs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 17, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrMapCircuitReceivedFECNs.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrMapCircuitReceivedFECNs.setDescription('Number of frames received from the network indicating forward congestion since the virtual circuit was created. This occurs when the remote DTE sets the FECN flag, or when a switch in the network enqueues the frame to a trunk whose transmission queue is congested.')
wfFrMapCircuitReceivedBECNs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 17, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrMapCircuitReceivedBECNs.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrMapCircuitReceivedBECNs.setDescription('Number of frames received from the network indicating backward congestion since the virtual circuit was created. This occurs when the remote DTE sets the BECN flag, or when a switch in the network receives the frame from a trunk whose transmission queue is congested')
wfFrMapCircuitSentFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 17, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrMapCircuitSentFrames.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrMapCircuitSentFrames.setDescription('The number of frames sent from this virtual circuit since it was created. Octets counted are the full frame relay header and the payload, but do not include the flag characters or CRC.')
wfFrMapCircuitSentOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 17, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrMapCircuitSentOctets.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrMapCircuitSentOctets.setDescription('The number of octets sent from this virtual circuit since it was created. Octets counted are the full frame relay header and the payload, but do not include the flag characters or CRC.')
wfFrMapCircuitReceivedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 17, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrMapCircuitReceivedFrames.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrMapCircuitReceivedFrames.setDescription('Number of frames received over this virtual circuit since it was created.')
wfFrMapCircuitReceivedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 17, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrMapCircuitReceivedOctets.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrMapCircuitReceivedOctets.setDescription('Number of octets received over this virtual circuit since it was created. Octets counted include the full frame relay header, but do not include the flag characters or the CRC.')
wfFrMapCircuitCreationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 17, 1, 10), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrMapCircuitCreationTime.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrMapCircuitCreationTime.setDescription('The value of sysUpTime when the virtual circuit was created, whether by the Data Link Connection Management Interface or by a SetRequest.')
wfFrMapCircuitLastTimeChange = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 17, 1, 11), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrMapCircuitLastTimeChange.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrMapCircuitLastTimeChange.setDescription('The value of sysUpTime when last there was a change in the virtual circuit state')
wfFrMapCircuitCommittedBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 17, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrMapCircuitCommittedBurst.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrMapCircuitCommittedBurst.setDescription('This variable indicates the maximum amount of data, in bits, that the network agrees to transfer under normal conditions, during the measurement interval.')
wfFrMapCircuitExcessBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 17, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrMapCircuitExcessBurst.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrMapCircuitExcessBurst.setDescription('This variable indicates the maximum amount of uncommitted data bits that the network will attempt to deliver over the measurement interval. By default, if not configured when creating the entry, the Excess Information Burst Size is set to the value of ifSpeed.')
wfFrMapCircuitThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 17, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrMapCircuitThroughput.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrMapCircuitThroughput.setDescription("Throughput is the average number of 'Frame Relay Information Field' bits transferred per second across a user network interface in one direction, measured over the measurement interval. If the configured committed burst rate and throughput are both non-zero, the measurement interval, T, is T=frCircuitCommittedBurst/frCircuitThroughput. If the configured committed burst rate and throughput are both zero, the measurement interval, T, is T=frCircuitExcessBurst/ifSpeed.")
wfFrMapCircuitMulticast = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 17, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unicast", 1), ("oneWay", 2), ("twoWay", 3), ("nWay", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrMapCircuitMulticast.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrMapCircuitMulticast.setDescription('This indicates whether this VC is used as a unicast VC (i.e. not multicast) or the type of multicast service subscribed to')
wfFrMapCircuitType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 17, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrMapCircuitType.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrMapCircuitType.setDescription('Indication of whether the VC was manually created (static), or dynamically created (dynamic) via the data link control management interface.')
wfFrMapCircuitDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 17, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrMapCircuitDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrMapCircuitDiscards.setDescription('The number of inbound frames dropped because of format errors, or because the VC is inactive.')
wfFrMapCircuitReceivedDEs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 17, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrMapCircuitReceivedDEs.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrMapCircuitReceivedDEs.setDescription("Number of frames received from the network indicating that they were eligible for discard since the virtual circuit was created. This occurs when the remote DTE sets the DE flag, or when in remote DTE's switch detects that the frame was received as Excess Burst data.")
wfFrMapCircuitSentDEs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 17, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrMapCircuitSentDEs.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrMapCircuitSentDEs.setDescription('TNumber of frames sent to the network indicating that they were eligible for discard since the virtual circuit was created. This occurs when the local DTE sets the DE flag, indicating that during Network congestion situations those frames should be discarded in preference of other frames sent without the DE bit set.')
wfFrMapCircuitLogicalIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 17, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrMapCircuitLogicalIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrMapCircuitLogicalIfIndex.setDescription('The number of times a buffer needed to be stored by the Multilink Receive logic when the count of buffers stored, wfFrMlVCStatsReSeqBufferMax,was equal to the maximum allowable for this circuit, wfFrMlVCCircuitMaxBuffers.')
wfFrMapCircuitRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 17, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrMapCircuitRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrMapCircuitRowStatus.setDescription('This object is used to create a new row or modify or destroy an existing row in the manner described in the definition of the RowStatus textual convention. Writable objects in the table may be written in any RowStatus state.')
wfFrMapCircuitLineNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 17, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrMapCircuitLineNumber.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrMapCircuitLineNumber.setDescription('Instance identifier. This is the line number on which the associated Frame Relay interface resides.')
wfFrMapCircuitLLIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 17, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrMapCircuitLLIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrMapCircuitLLIndex.setDescription('The Lower layer index uniquely identifies the lower layer in cases where the lower layer may be something other than the physical layer. For example if Frame Relay is running over an ATM VC, the LLIndex identifies the ATM VC.')
wfFrMapErrTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 18), )
if mibBuilder.loadTexts: wfFrMapErrTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrMapErrTable.setDescription('A table containing information about Errors on the Frame Relay interface. Discontinuities in the counters contained in this table are the same as apply to the ifEntry associated with the Interface.')
wfFrMapErrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 18, 1), ).setIndexNames((0, "Wellfleet-FR2-MIB", "wfFrMapErrIfIndex"))
if mibBuilder.loadTexts: wfFrMapErrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrMapErrEntry.setDescription('The error information for a single frame relay interface.')
wfFrMapErrIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 18, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrMapErrIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrMapErrIfIndex.setDescription('The ifIndex Value of the corresponding ifEntry.')
wfFrMapErrType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 18, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("unknownError", 1), ("receiveShort", 2), ("receiveLong", 3), ("illegalAddress", 4), ("unknownAddress", 5), ("dlcmiProtoErr", 6), ("dlcmiUnknownIE", 7), ("dlcmiSequenceErr", 8), ("dlcmiUnknownRpt", 9), ("noErrorSinceReset", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrMapErrType.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrMapErrType.setDescription('The type of error that was last seen on this interface: receiveShort: frame was not long enough to allow demultiplexing - the address field was incomplete, or for virtual circuits using Multiprotocol over Frame Relay, the protocol identifier was missing or incomplete. receiveLong: frame exceeded maximum length configured for this interface. illegalAddress: address field did not match configured format. unknownAddress: frame received on a virtual circuit which was not active or administratively disabled. dlcmiProtoErr: unspecified error occurred when attempting to interpret link maintenance frame. dlcmiUnknownIE: link maintenance frame contained an Information Element type which is not valid for the configured link maintenance protocol. dlcmiSequenceErr: link maintenance frame contained a sequence number other than the expected value. dlcmiUnknownRpt: link maintenance frame contained a Report Type Information Element whose value was not valid for the configured link maintenance protocol. noErrorSinceReset: no errors have been detected since the last cold start or warm start.')
wfFrMapErrData = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 18, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1600))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrMapErrData.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrMapErrData.setDescription('An octet string containing as much of the error packet as possible. As a minimum, it must contain the Q.922 Address or as much as was delivered. It is desirable to include all header and demultiplexing information.')
wfFrMapErrTime = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 18, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrMapErrTime.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrMapErrTime.setDescription('The value of sysUpTime at which the error was detected.')
wfFrMapErrFaults = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 18, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrMapErrFaults.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrMapErrFaults.setDescription('The number of times the interface has gone down since it was initialized.')
wfFrMapErrFaultTime = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 18, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrMapErrFaultTime.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrMapErrFaultTime.setDescription('The value of sysUpTime at the time when the interface was taken down due to excessive errors. Excessive errors is defined as the time when a DLCMI exceeds the frDlcmiErrorThreshold number of errors within frDlcmiMonitoredEvents. See FrDlcmiEntry for further details.')
wfFrMapErrLineNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 18, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrMapErrLineNumber.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrMapErrLineNumber.setDescription('Instance identifier. This is the line number on which the associated Frame Relay interface resides.')
wfFrMapErrLLIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 9, 18, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfFrMapErrLLIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wfFrMapErrLLIndex.setDescription('The Lower layer index uniquely identifies the lower layer in cases where the lower layer may be something other than the physical layer. For example if Frame Relay is running over an ATM VC, the LLIndex identifies the ATM VC.')
mibBuilder.exportSymbols("Wellfleet-FR2-MIB", wfFrSVCActiveCallCircuitNumber=wfFrSVCActiveCallCircuitNumber, wfFrMlStatsTxOctets=wfFrMlStatsTxOctets, wfFrMapCircuitCreationTime=wfFrMapCircuitCreationTime, wfFrMlStatsSeqNumberLost=wfFrMlStatsSeqNumberLost, wfFrMlVCDlci=wfFrMlVCDlci, wfFrServiceRecordifLastChange=wfFrServiceRecordifLastChange, wfFrMapDlcmiRowStatus=wfFrMapDlcmiRowStatus, wfFrMapCircuitReceivedFECNs=wfFrMapCircuitReceivedFECNs, wfFrPtMappingEntry=wfFrPtMappingEntry, wfFrCircuitShapedLargePkts=wfFrCircuitShapedLargePkts, wfFrMapCircuitMulticast=wfFrMapCircuitMulticast, wfFrCircuitCreationTime=wfFrCircuitCreationTime, wfFrCircuitSubCct=wfFrCircuitSubCct, wfFrFRF4SigReleaseRx=wfFrFRF4SigReleaseRx, wfFrServiceRecordSVCLocNum=wfFrServiceRecordSVCLocNum, wfFrFRF4SigConnectRx=wfFrFRF4SigConnectRx, wfFrServiceRecordBackupLLIndex=wfFrServiceRecordBackupLLIndex, wfFrCircuitCongestionCtr=wfFrCircuitCongestionCtr, wfFrMlVCStatsReassmBufferCnt=wfFrMlVCStatsReassmBufferCnt, wfFrErrDiscards=wfFrErrDiscards, wfFrPtMappingTable=wfFrPtMappingTable, wfFrMlStatsBundleSpd=wfFrMlStatsBundleSpd, wfFrSVCActiveCallLLCoreOutBe=wfFrSVCActiveCallLLCoreOutBe, wfFrCircuitShapedNormalQHighWaterPkts=wfFrCircuitShapedNormalQHighWaterPkts, wfFrSVCActiveCallLLCoreInBc=wfFrSVCActiveCallLLCoreInBc, wfFrSigLLIndex=wfFrSigLLIndex, wfFrMapCircuitDlci=wfFrMapCircuitDlci, wfFrSVCOptionsLLCoreMinOutThroughput=wfFrSVCOptionsLLCoreMinOutThroughput, wfFrMapCircuitEntry=wfFrMapCircuitEntry, wfFrPtMappingState=wfFrPtMappingState, wfFrMapCircuitLLIndex=wfFrMapCircuitLLIndex, wfFrDlcmiCircuit=wfFrDlcmiCircuit, wfFrMlStatsPQHiXmits=wfFrMlStatsPQHiXmits, wfLapfXIDSent=wfLapfXIDSent, wfFrSVCOptionsLLCoreOutBc=wfFrSVCOptionsLLCoreOutBc, wfFrDlcmiErrorThreshold=wfFrDlcmiErrorThreshold, wfFrSVCOptionsInactMode=wfFrSVCOptionsInactMode, wfFrPtMappingCctA=wfFrPtMappingCctA, wfFrMlVCStatsReassmBufferMax=wfFrMlVCStatsReassmBufferMax, wfFrSigEntry=wfFrSigEntry, wfLapfREJsSent=wfLapfREJsSent, wfFrMlVCStatsExceededBufferMax=wfFrMlVCStatsExceededBufferMax, wfFrDlcmiInterfaceType=wfFrDlcmiInterfaceType, wfFrServiceRecordBackupMainCct=wfFrServiceRecordBackupMainCct, wfFrSVCActiveCallDLCI=wfFrSVCActiveCallDLCI, wfFrMapCircuitRowStatus=wfFrMapCircuitRowStatus, wfFrSVCActiveCallX213KeepPriority=wfFrSVCActiveCallX213KeepPriority, wfFrSigConformance=wfFrSigConformance, wfFrMlVCStatsTxPkts=wfFrMlVCStatsTxPkts, wfFrFRF4SigStatusEnquiryRx=wfFrFRF4SigStatusEnquiryRx, wfFrDlcmiDelete=wfFrDlcmiDelete, wfFrFRF4SigT303=wfFrFRF4SigT303, wfFrMlVCStatsBundleSpd=wfFrMlVCStatsBundleSpd, wfFrPtIntfRxFrames=wfFrPtIntfRxFrames, wfFrLapfTable=wfFrLapfTable, wfLapfActionInitiate=wfLapfActionInitiate, wfLapfUISent=wfLapfUISent, wfFrMlStatsLineCnt=wfFrMlStatsLineCnt, wfFrMapDlcmiTable=wfFrMapDlcmiTable, wfFrFRF4SigDisconnectRx=wfFrFRF4SigDisconnectRx, wfFrSigNumMaxSVCs=wfFrSigNumMaxSVCs, wfFrCircuitExcessBurst=wfFrCircuitExcessBurst, wfFrErrType=wfFrErrType, wfFrErrDrops=wfFrErrDrops, wfFrMapDlcmiAddress=wfFrMapDlcmiAddress, wfFrMapCircuitSentFrames=wfFrMapCircuitSentFrames, wfFrPtIntfDelete=wfFrPtIntfDelete, wfFrSVCActiveCallCallingSubAdr=wfFrSVCActiveCallCallingSubAdr, wfFrMlVCStatsReSeqBufferMax=wfFrMlVCStatsReSeqBufferMax, wfFrDlcmiLLIndex=wfFrDlcmiLLIndex, wfFrErrFaults=wfFrErrFaults, wfFrFRF4SigCallProcTx=wfFrFRF4SigCallProcTx, wfLapfRRsRcvd=wfLapfRRsRcvd, wfFrFRF4SigLineNumber=wfFrFRF4SigLineNumber, wfFrCircuitSentDEs=wfFrCircuitSentDEs, wfFrPtMappingDlciB=wfFrPtMappingDlciB, wfFrMapErrIfIndex=wfFrMapErrIfIndex, wfFrServiceRecordName=wfFrServiceRecordName, wfFrSVCOptionsLLCoreInThroughput=wfFrSVCOptionsLLCoreInThroughput, wfFrServiceRecordifOutCtrlPkts=wfFrServiceRecordifOutCtrlPkts, wfFrSVCOptionsRemPlan=wfFrSVCOptionsRemPlan, wfFrMlStatsPQLoXmits=wfFrMlStatsPQLoXmits, wfFrCctErrorDiscards=wfFrCctErrorDiscards, wfFrCircuitCurHiQueueLimit=wfFrCircuitCurHiQueueLimit, wfFrServiceRecordState=wfFrServiceRecordState, wfFrServiceRecordLLIndex=wfFrServiceRecordLLIndex, wfFrSigT310=wfFrSigT310, wfFrCctErrorDrops=wfFrCctErrorDrops, wfLapfXIDRcvd=wfLapfXIDRcvd, wfFrCircuitCongestionMethod=wfFrCircuitCongestionMethod, wfFrCircuitSentFrames=wfFrCircuitSentFrames, wfFrCircuitShapedLoQueueLimit=wfFrCircuitShapedLoQueueLimit, wfFrDlcmiLineNumber=wfFrDlcmiLineNumber, wfFrMlStatsPQHiClippedPkts=wfFrMlStatsPQHiClippedPkts, wfFrSVCOptionsLLCoreOutBe=wfFrSVCOptionsLLCoreOutBe, wfLapfT200Timeouts=wfLapfT200Timeouts, wfFrMapCircuitIfIndex=wfFrMapCircuitIfIndex, wfFrFRF4SigTable=wfFrFRF4SigTable, wfLapfStationType=wfLapfStationType, wfFrDlcmiDebugLevel=wfFrDlcmiDebugLevel, wfFrMapErrEntry=wfFrMapErrEntry, wfFrMlStatsRxPkts=wfFrMlStatsRxPkts, wfFrMlVCStatsTxOctets=wfFrMlVCStatsTxOctets, wfFrSVCOptionsEntry=wfFrSVCOptionsEntry, wfFrErrTime=wfFrErrTime, wfFrFRF4SigN322=wfFrFRF4SigN322, wfFrServiceRecordSVCLocSubAdr=wfFrServiceRecordSVCLocSubAdr, wfFrCircuitLLIndex=wfFrCircuitLLIndex, wfFrSigT305=wfFrSigT305, wfFrSigMaxSvcs=wfFrSigMaxSvcs, wfFrSVCOptionsLLIndex=wfFrSVCOptionsLLIndex, wfFrCircuitShapedHiClippedPkts=wfFrCircuitShapedHiClippedPkts, wfFrCircuitShapedHiXmits=wfFrCircuitShapedHiXmits, wfFrCircuitReceivedDEs=wfFrCircuitReceivedDEs, wfFrMlStatsSeqNumberArrivedLate=wfFrMlStatsSeqNumberArrivedLate, wfFrMlAggVCStatusMode=wfFrMlAggVCStatusMode, wfFrSVCActiveCallCalledPlan=wfFrSVCActiveCallCalledPlan, wfFrMlVCStatsLineCnt=wfFrMlVCStatsLineCnt, wfFrMapCircuitExcessBurst=wfFrMapCircuitExcessBurst, wfFrDlcmiSeqCount=wfFrDlcmiSeqCount, wfFrFRF4SigReleaseCompleteRx=wfFrFRF4SigReleaseCompleteRx, wfLapfUIRcvd=wfLapfUIRcvd, wfFrMapCircuitTable=wfFrMapCircuitTable, wfFrMapErrData=wfFrMapErrData, wfFrMlVCTable=wfFrMlVCTable, wfFrMlVCStatsLinkIdleEvents=wfFrMlVCStatsLinkIdleEvents, wfFrCircuitReceivedOctets=wfFrCircuitReceivedOctets, wfFrCircuitNumber=wfFrCircuitNumber, wfFrCctErrorEntry=wfFrCctErrorEntry, wfFrMlStatsReassmBufferCnt=wfFrMlStatsReassmBufferCnt, wfFrMapCircuitType=wfFrMapCircuitType, wfFrCircuitShapedPktsNotQueued=wfFrCircuitShapedPktsNotQueued, wfFrMapDlcmiAddressLen=wfFrMapDlcmiAddressLen, wfLapfTxWin=wfLapfTxWin, wfFrCircuitType=wfFrCircuitType, wfFrFRF4SigDisable=wfFrFRF4SigDisable, wfFrMapErrType=wfFrMapErrType, wfFrCircuitCommittedBurst=wfFrCircuitCommittedBurst, wfFrMapCircuitCommittedBurst=wfFrMapCircuitCommittedBurst, wfFrMlStatsPQLoTotalOctets=wfFrMlStatsPQLoTotalOctets, wfLapfT200=wfLapfT200, wfFrCircuitLineNumber=wfFrCircuitLineNumber, wfFrMlVCStatsRxOctets=wfFrMlVCStatsRxOctets, wfFrServiceRecordPrimaryMainCct=wfFrServiceRecordPrimaryMainCct, wfFrMapDlcmiIfIndex=wfFrMapDlcmiIfIndex, wfFrLapfEntry=wfFrLapfEntry, wfFrSVCOptionsX213GainPriority=wfFrSVCOptionsX213GainPriority, wfFrCctErrorTable=wfFrCctErrorTable, wfFrSVCActiveCallLLCoreOutBc=wfFrSVCActiveCallLLCoreOutBc, wfFrPtIntfDlci=wfFrPtIntfDlci, wfFrSVCActiveCallLLCoreInBe=wfFrSVCActiveCallLLCoreInBe, wfFrMlStatsAvgTxListLen=wfFrMlStatsAvgTxListLen, wfFrVCircuitEntry=wfFrVCircuitEntry, wfFrSVCActiveCallTable=wfFrSVCActiveCallTable, wfFrMlStatsReSeqBufferCnt=wfFrMlStatsReSeqBufferCnt, wfFrFRF4SigSetupRx=wfFrFRF4SigSetupRx, wfFrMapCircuitReceivedBECNs=wfFrMapCircuitReceivedBECNs, wfFrMapCircuitReceivedOctets=wfFrMapCircuitReceivedOctets, wfFrServiceRecordEntry=wfFrServiceRecordEntry, wfLapfN201Error=wfLapfN201Error, wfFrMapDlcmiPollingInterval=wfFrMapDlcmiPollingInterval, wfFrServiceRecordNumberActiveVCs=wfFrServiceRecordNumberActiveVCs, wfFrDlcmiBackupFilterCct=wfFrDlcmiBackupFilterCct, wfFrMlStatsRxOctets=wfFrMlStatsRxOctets, wfFrServiceRecordDelete=wfFrServiceRecordDelete, wfLapfT203=wfLapfT203, wfFrFRF4SigStatusTx=wfFrFRF4SigStatusTx, wfFrCircuitStartupDelay=wfFrCircuitStartupDelay, wfFrSVCActiveCallLineNumber=wfFrSVCActiveCallLineNumber, wfFrIfDlcmiTable=wfFrIfDlcmiTable, wfLapfRRsSent=wfLapfRRsSent, wfFrCircuitShapingState=wfFrCircuitShapingState, wfFrMapErrFaultTime=wfFrMapErrFaultTime, wfFrSVCActiveCallLLIndex=wfFrSVCActiveCallLLIndex, wfFrMapDlcmiState=wfFrMapDlcmiState, wfFrCircuitDelete=wfFrCircuitDelete, wfLapfK=wfLapfK, wfFrSVCOptionsLineNumber=wfFrSVCOptionsLineNumber, wfFrSVCActiveCallCalledTypeNum=wfFrSVCActiveCallCalledTypeNum, wfFrMapErrLineNumber=wfFrMapErrLineNumber, wfFrMlHomeSlot=wfFrMlHomeSlot, wfFrSigNumSvcRej=wfFrSigNumSvcRej, wfFrCircuitShapedHighWaterPktsClear=wfFrCircuitShapedHighWaterPktsClear, wfFrCircuitShapedDroppedPkts=wfFrCircuitShapedDroppedPkts, wfFrSigLineNumber=wfFrSigLineNumber, wfFrPtMappingDisable=wfFrPtMappingDisable, wfFrMlVCAggNumberVCs=wfFrMlVCAggNumberVCs, wfFrSVCOptionsLLCoreInBc=wfFrSVCOptionsLLCoreInBc, wfFrSigStatus=wfFrSigStatus, wfFrMlStatsPQLargePkts=wfFrMlStatsPQLargePkts, wfFrMapCircuitThroughput=wfFrMapCircuitThroughput, wfFrSigNumConnRej=wfFrSigNumConnRej, wfFrFRF4SigReleaseTx=wfFrFRF4SigReleaseTx, wfFrSVCActiveCallCalledNum=wfFrSVCActiveCallCalledNum, wfFrIfDlcmiEntry=wfFrIfDlcmiEntry, wfFrSVCOptionsRemTypeNum=wfFrSVCOptionsRemTypeNum, wfFrMlStatsPQNormalTotalOctets=wfFrMlStatsPQNormalTotalOctets, wfFrMlStatsPQIntrQHighWaterPkts=wfFrMlStatsPQIntrQHighWaterPkts, wfFrMapDlcmiMulticast=wfFrMapDlcmiMulticast, wfFrCircuitPrimaryHoldTmr=wfFrCircuitPrimaryHoldTmr, wfFrMlVCStatsDebug=wfFrMlVCStatsDebug, wfFrCircuitShapedLoQHighWaterPkts=wfFrCircuitShapedLoQHighWaterPkts, wfFrFRF4SigReleaseCompleteTx=wfFrFRF4SigReleaseCompleteTx, wfFrCircuitDlci=wfFrCircuitDlci, wfFrSVCOptionsTable=wfFrSVCOptionsTable, wfFrMlStatsPQLoQHighWaterPkts=wfFrMlStatsPQLoQHighWaterPkts, wfFrServiceRecordSVCInScrnDisable=wfFrServiceRecordSVCInScrnDisable, wfFrMapCircuitDiscards=wfFrMapCircuitDiscards, wfFrDlcmiTraceLevel=wfFrDlcmiTraceLevel, wfFrSVCOptionsCircuitNumber=wfFrSVCOptionsCircuitNumber, wfFrDlcmiCongestionTmr=wfFrDlcmiCongestionTmr, wfFrCircuitMode=wfFrCircuitMode, wfFrMlStatsPQNormalQHighWaterPkts=wfFrMlStatsPQNormalQHighWaterPkts, wfFrMlVCStatsSeqNumberLost=wfFrMlVCStatsSeqNumberLost, wfFrPtIntfDiscards=wfFrPtIntfDiscards, wfFrSigSvcDeletePolicy=wfFrSigSvcDeletePolicy, wfFrServiceRecordPrimaryLLIndex=wfFrServiceRecordPrimaryLLIndex, wfFrMlStatsLinkIdleEvents=wfFrMlStatsLinkIdleEvents, wfFrCircuitShapedNormalXmits=wfFrCircuitShapedNormalXmits, wfFrMlStatsReasmFails=wfFrMlStatsReasmFails, wfFrCircuitThroughput=wfFrCircuitThroughput, wfFrCircuitMulticast=wfFrCircuitMulticast, wfFrServiceRecordNumberVCs=wfFrServiceRecordNumberVCs, wfFrServiceRecordSVCLocTypeNum=wfFrServiceRecordSVCLocTypeNum, wfFrMlStatsPQDroppedPkts=wfFrMlStatsPQDroppedPkts, wfFrMlStatsTxPkts=wfFrMlStatsTxPkts, wfFrFRF4SigOctetsReceived=wfFrFRF4SigOctetsReceived, wfLapfUARcvd=wfLapfUARcvd, wfFrMlStatsPQPktsNotQueued=wfFrMlStatsPQPktsNotQueued, wfFrServiceRecordPreMultiCircuit=wfFrServiceRecordPreMultiCircuit, wfFrPtIntfCct=wfFrPtIntfCct, wfFrPtIntfDrops=wfFrPtIntfDrops, wfFrFRF4SigSetupTx=wfFrFRF4SigSetupTx, wfFrMlFragTriggerSize=wfFrMlFragTriggerSize, wfFrMapDlcmiMonitoredEvents=wfFrMapDlcmiMonitoredEvents, wfFrFRF4SigFramesReceived=wfFrFRF4SigFramesReceived, wfFrCircuitBwThreshold=wfFrCircuitBwThreshold, wfFrSVCOptionsInstanceIndex=wfFrSVCOptionsInstanceIndex, wfLapfRxWin=wfLapfRxWin, wfFrSVCActiveCallConnectTime=wfFrSVCActiveCallConnectTime, wfFrMapDlcmiEntry=wfFrMapDlcmiEntry, wfLapfDisable=wfLapfDisable, wfFrMlVCStatsRxPkts=wfFrMlVCStatsRxPkts, wfLapfSABMERcvd=wfLapfSABMERcvd, wfFrFRF4SigT322=wfFrFRF4SigT322, wfFrMapDlcmiStatus=wfFrMapDlcmiStatus, wfFrMlStatsReassmBufferMax=wfFrMlStatsReassmBufferMax, wfFrFRF4SigLLIndex=wfFrFRF4SigLLIndex, wfFrFRF4SigDelete=wfFrFRF4SigDelete, wfFrPtIntfEntry=wfFrPtIntfEntry, wfFrSVCOptionsTrafficShapingDisable=wfFrSVCOptionsTrafficShapingDisable, wfFrSigNumSvcFailed=wfFrSigNumSvcFailed, wfFrSVCOptionsX213DataPriority=wfFrSVCOptionsX213DataPriority, wfFrMapDlcmiLLIndex=wfFrMapDlcmiLLIndex)
mibBuilder.exportSymbols("Wellfleet-FR2-MIB", wfFrCircuitCurLoQueueLimit=wfFrCircuitCurLoQueueLimit, wfLapfIFramesRcvd=wfLapfIFramesRcvd, wfFrErrFaultTime=wfFrErrFaultTime, wfFrServiceRecordifInOctets=wfFrServiceRecordifInOctets, wfFrSVCOptionsX213KeepPriority=wfFrSVCOptionsX213KeepPriority, wfFrMlVCEntry=wfFrMlVCEntry, wfFrMapCircuitState=wfFrMapCircuitState, wfFrPtIntfTxFrames=wfFrPtIntfTxFrames, wfFrFRF4SigFramesDropped=wfFrFRF4SigFramesDropped, wfFrSVCOptionsRemSubAdr=wfFrSVCOptionsRemSubAdr, wfFrDlcmiAnnexSwEnq=wfFrDlcmiAnnexSwEnq, wfFrPtIntfDisable=wfFrPtIntfDisable, wfLapfDISCRcvd=wfLapfDISCRcvd, wfFrSVCOptionsX213KeepLQAPriority=wfFrSVCOptionsX213KeepLQAPriority, wfFrServiceRecordSVCCallBlock=wfFrServiceRecordSVCCallBlock, wfFrMlFragPermEnable=wfFrMlFragPermEnable, wfLapfFRMRSent=wfLapfFRMRSent, wfFrMapDlcmiFullEnquiryInterval=wfFrMapDlcmiFullEnquiryInterval, wfFrSVCActiveCallLLCoreMinInThroughput=wfFrSVCActiveCallLLCoreMinInThroughput, wfFrCircuitShapedHiQHighWaterPkts=wfFrCircuitShapedHiQHighWaterPkts, wfFrCircuitCongestionTmr=wfFrCircuitCongestionTmr, wfFrDlcmiMulticast=wfFrDlcmiMulticast, wfFrDlcmiCongestionCtr=wfFrDlcmiCongestionCtr, wfFrFRF4SigCallProcRx=wfFrFRF4SigCallProcRx, wfFrMapCircuitLogicalIfIndex=wfFrMapCircuitLogicalIfIndex, wfFrMapCircuitLastTimeChange=wfFrMapCircuitLastTimeChange, wfFrMapCircuitSentOctets=wfFrMapCircuitSentOctets, wfFrDlcmiPolls=wfFrDlcmiPolls, wfFrSVCActiveCallLLCoreOutThroughput=wfFrSVCActiveCallLLCoreOutThroughput, wfFrSVCOptionsName=wfFrSVCOptionsName, wfFrServiceRecordCircuitNumber=wfFrServiceRecordCircuitNumber, wfFrCircuitShapedLoTotalOctets=wfFrCircuitShapedLoTotalOctets, wfFrMlStatsCalcPercent=wfFrMlStatsCalcPercent, wfFrServiceRecordSVCInactTimer=wfFrServiceRecordSVCInactTimer, wfFrMlCircuitNumber=wfFrMlCircuitNumber, wfFrDlcmiAddressLen=wfFrDlcmiAddressLen, wfFrCircuitSentOctets=wfFrCircuitSentOctets, wfFrMlStatsPQNormalXmits=wfFrMlStatsPQNormalXmits, wfFrMapCircuitReceivedFrames=wfFrMapCircuitReceivedFrames, wfFrServiceRecordNumberStaticVCs=wfFrServiceRecordNumberStaticVCs, wfLapfDMRcvd=wfLapfDMRcvd, wfFrMlCompressionEnable=wfFrMlCompressionEnable, wfFrCircuitShapedNormalQueueLimit=wfFrCircuitShapedNormalQueueLimit, wfLapfN200=wfLapfN200, wfFrSVCActiveCallCallingTypeNum=wfFrSVCActiveCallCallingTypeNum, wfFrServiceRecordLineNumber=wfFrServiceRecordLineNumber, wfFrMlMode=wfFrMlMode, wfLapfDMSent=wfLapfDMSent, wfFrMapDlcmiErrorThreshold=wfFrMapDlcmiErrorThreshold, wfFrSigT308=wfFrSigT308, wfLapfIFramesSent=wfLapfIFramesSent, wfFrCircuitShapedNormalTotalOctets=wfFrCircuitShapedNormalTotalOctets, wfFrServiceRecordPrimaryLineNumber=wfFrServiceRecordPrimaryLineNumber, wfFrSVCOptionsDisable=wfFrSVCOptionsDisable, wfLapfDelete=wfLapfDelete, wfFrCircuitStateSet=wfFrCircuitStateSet, wfFrDlcmiShapingNormalQueueLimit=wfFrDlcmiShapingNormalQueueLimit, wfFrFRF4SigConnectTx=wfFrFRF4SigConnectTx, wfFrMlStatsExceededBufferMax=wfFrMlStatsExceededBufferMax, wfFrSigSvcReplacePolicy=wfFrSigSvcReplacePolicy, wfFrDlcmiManagementType=wfFrDlcmiManagementType, wfFrMlVCStatsCalcPercent=wfFrMlVCStatsCalcPercent, wfFrServiceRecordNumberSVCs=wfFrServiceRecordNumberSVCs, wfFrCircuitInactivityMode=wfFrCircuitInactivityMode, wfFrPtIntfTable=wfFrPtIntfTable, wfFrFRF4SigFramesSent=wfFrFRF4SigFramesSent, wfFrMlStatsPQNormalClippedPkts=wfFrMlStatsPQNormalClippedPkts, wfFrServiceRecordSVCLocPlan=wfFrServiceRecordSVCLocPlan, wfLapfUASent=wfLapfUASent, wfFrSVCOptionsLLCoreMinInThroughput=wfFrSVCOptionsLLCoreMinInThroughput, wfFrSVCActiveCallCallingPlan=wfFrSVCActiveCallCallingPlan, wfFrDlcmiShapingHiQueueLimit=wfFrDlcmiShapingHiQueueLimit, wfFrMlVCStatsSeqNumberArrivedLate=wfFrMlVCStatsSeqNumberArrivedLate, wfFrDlcmiShapingTmr=wfFrDlcmiShapingTmr, wfFrMapDlcmiMaxSupportedVCs=wfFrMapDlcmiMaxSupportedVCs, wfLapfRNRsRcvd=wfLapfRNRsRcvd, wfFrMlStatsDebug=wfFrMlStatsDebug, wfFrDlcmiDialFailureDisable=wfFrDlcmiDialFailureDisable, wfFrSVCActiveCallCallingNum=wfFrSVCActiveCallCallingNum, wfFrCctErrorCct=wfFrCctErrorCct, wfFrMlTable=wfFrMlTable, wfFrDlcmiStatus=wfFrDlcmiStatus, wfFrDlcmiEnableSinglePVCUpdate=wfFrDlcmiEnableSinglePVCUpdate, wfLapfFRMRRcvd=wfLapfFRMRRcvd, wfFrDlcmiXoffDisable=wfFrDlcmiXoffDisable, wfFrSVCActiveCallLLCoreInThroughput=wfFrSVCActiveCallLLCoreInThroughput, wfFrDlcmiExtraStatusInfoEnable=wfFrDlcmiExtraStatusInfoEnable, wfLapfDISCSent=wfLapfDISCSent, wfFrCircuitState=wfFrCircuitState, wfFrSVCActiveCallX213DataLQAPriority=wfFrSVCActiveCallX213DataLQAPriority, wfLapfREJsRcvd=wfLapfREJsRcvd, wfFrSVCOptionsRemNum=wfFrSVCOptionsRemNum, wfLapfRNRsSent=wfLapfRNRsSent, wfFrServiceRecordNumberDynamicVCs=wfFrServiceRecordNumberDynamicVCs, wfFrCircuitWcpEnable=wfFrCircuitWcpEnable, wfFrDlcmiPassiveSeqCount=wfFrDlcmiPassiveSeqCount, wfFrCircuitDiscards=wfFrCircuitDiscards, wfFrMlVCStatsAvgTxListLen=wfFrMlVCStatsAvgTxListLen, wfFrSVCOptionsLLCoreInBe=wfFrSVCOptionsLLCoreInBe, wfLapfN200Exceeded=wfLapfN200Exceeded, wfFrMlStatsPQHiQHighWaterPkts=wfFrMlStatsPQHiQHighWaterPkts, wfFrServiceRecordifInDiscards=wfFrServiceRecordifInDiscards, wfFrServiceRecordDefaultFlag=wfFrServiceRecordDefaultFlag, wfFrServiceRecordSVCInScrnUsage=wfFrServiceRecordSVCInScrnUsage, wfLapfSABMESent=wfLapfSABMESent, wfLapfT203Timeouts=wfLapfT203Timeouts, wfFrMlStatsReSeqBufferMax=wfFrMlStatsReSeqBufferMax, wfFrMlStatsNumPktsFragmented=wfFrMlStatsNumPktsFragmented, wfFrFRF4SigStatusRx=wfFrFRF4SigStatusRx, wfFrSVCActiveCallDelete=wfFrSVCActiveCallDelete, wfFrCircuitCongestionState=wfFrCircuitCongestionState, wfFrMlVCCircuitNumber=wfFrMlVCCircuitNumber, wfFrDlcmiVCsConfigured=wfFrDlcmiVCsConfigured, wfFrMapDlcmiLineNumber=wfFrMapDlcmiLineNumber, wfFrDlcmiFullEnquiryInterval=wfFrDlcmiFullEnquiryInterval, wfFrFRF4SigT305=wfFrFRF4SigT305, wfFrMlStatsPQLoClippedPkts=wfFrMlStatsPQLoClippedPkts, wfFrFRF4SigEntry=wfFrFRF4SigEntry, wfFrDlcmiMaxSupportedVCs=wfFrDlcmiMaxSupportedVCs, wfFrFRF4SigMaxSvcs=wfFrFRF4SigMaxSvcs, wfFrFRF4SigT310=wfFrFRF4SigT310, wfFrFRF4SigStatusEnquiryTx=wfFrFRF4SigStatusEnquiryTx, wfFrDlcmiPollingInterval=wfFrDlcmiPollingInterval, wfFrDlcmiLastReceived=wfFrDlcmiLastReceived, wfLapfLineNumber=wfLapfLineNumber, wfFrMapErrLLIndex=wfFrMapErrLLIndex, wfFrSVCOptionsLLCoreOutThroughput=wfFrSVCOptionsLLCoreOutThroughput, wfFrDlcmiCongestionMethod=wfFrDlcmiCongestionMethod, wfFrMlVCAggNumberVCsActive=wfFrMlVCAggNumberVCsActive, wfFrMlVCAggState=wfFrMlVCAggState, wfFrMlVCStatsReasmFails=wfFrMlVCStatsReasmFails, wfFrCircuitCongestionDisable=wfFrCircuitCongestionDisable, wfFrSigT303=wfFrSigT303, wfFrDlcmiName=wfFrDlcmiName, wfFrSVCActiveCallX213DataPriority=wfFrSVCActiveCallX213DataPriority, wfFrSVCOptionsCongestionCtr=wfFrSVCOptionsCongestionCtr, wfFrDlcmiShapingLoQueueLimit=wfFrDlcmiShapingLoQueueLimit, wfFrFRF4SigT308=wfFrFRF4SigT308, wfFrMapErrTime=wfFrMapErrTime, wfFrPtMappingCctB=wfFrPtMappingCctB, wfFrSVCActiveCallX213KeepLQAPriority=wfFrSVCActiveCallX213KeepLQAPriority, wfFrMlStatsPQHighWaterPktsClear=wfFrMlStatsPQHighWaterPktsClear, wfFrSVCOptionsInactTimer=wfFrSVCOptionsInactTimer, wfFrCircuitInactivityTimer=wfFrCircuitInactivityTimer, wfFrSVCOptionsX213GainLQAPriority=wfFrSVCOptionsX213GainLQAPriority, wfFrSVCOptionsX213DataLQAPriority=wfFrSVCOptionsX213DataLQAPriority, wfFrDlcmiDisable=wfFrDlcmiDisable, wfFrDlcmiCongestionDisable=wfFrDlcmiCongestionDisable, wfFrCircuitShapedLoClippedPkts=wfFrCircuitShapedLoClippedPkts, wfFrSVCActiveCallEntry=wfFrSVCActiveCallEntry, wfFrCircuitReceivedFrames=wfFrCircuitReceivedFrames, wfFrServiceRecordBackupLineNumber=wfFrServiceRecordBackupLineNumber, wfFrMlCircuitMaxBuffers=wfFrMlCircuitMaxBuffers, wfFrDlcmiAnnexSwEnqTmr=wfFrDlcmiAnnexSwEnqTmr, wfFrCircuitCurNormalQueueLimit=wfFrCircuitCurNormalQueueLimit, wfFrServiceRecordBackupFilterCct=wfFrServiceRecordBackupFilterCct, wfFrSVCOptionsCongestionMethod=wfFrSVCOptionsCongestionMethod, wfFrSigT322=wfFrSigT322, wfFrSVCOptionsDelete=wfFrSVCOptionsDelete, wfFrMapCircuitSentDEs=wfFrMapCircuitSentDEs, wfFrFRF4SigDisconnectTx=wfFrFRF4SigDisconnectTx, wfFrServiceRecordTable=wfFrServiceRecordTable, wfFrCircuitShapedLoXmits=wfFrCircuitShapedLoXmits, wfFrSVCActiveCallX213GainLQAPriority=wfFrSVCActiveCallX213GainLQAPriority, wfFrMlVCStatsNumPktsFragmented=wfFrMlVCStatsNumPktsFragmented, wfFrMlDelete=wfFrMlDelete, wfFrSigSvcIdleTimer=wfFrSigSvcIdleTimer, wfFrMapErrTable=wfFrMapErrTable, wfFrSVCOptionsBroadcastDisable=wfFrSVCOptionsBroadcastDisable, wfLapfN201=wfLapfN201, wfFrSVCActiveCallDirection=wfFrSVCActiveCallDirection, wfFrSigDelete=wfFrSigDelete, wfFrSVCOptionsCongestionTmr=wfFrSVCOptionsCongestionTmr, wfFrPtMappingDlciA=wfFrPtMappingDlciA, wfFrSVCOptionsWcpEnable=wfFrSVCOptionsWcpEnable, wfFrDlcmiMonitoredEvents=wfFrDlcmiMonitoredEvents, wfFrCircuitReceivedBECNs=wfFrCircuitReceivedBECNs, wfFrSigTable=wfFrSigTable, wfFrDlcmiMissingPolls=wfFrDlcmiMissingPolls, wfFrErrData=wfFrErrData, wfFrMlStatsPQHiTotalOctets=wfFrMlStatsPQHiTotalOctets, wfFrMapCircuitLineNumber=wfFrMapCircuitLineNumber, wfFrServiceRecordifInCtrlPkts=wfFrServiceRecordifInCtrlPkts, wfFrSVCOptionsCongestionDisable=wfFrSVCOptionsCongestionDisable, wfFrPtMappingDelete=wfFrPtMappingDelete, wfFrCircuitLastTimeChange=wfFrCircuitLastTimeChange, wfFrSigDisable=wfFrSigDisable, wfFrSigN322=wfFrSigN322, wfFrVCircuitTable=wfFrVCircuitTable, wfFrServiceRecordifOutOctets=wfFrServiceRecordifOutOctets, wfFrMlEntry=wfFrMlEntry, wfFrPtIntfState=wfFrPtIntfState, wfFrDlcmiAddress=wfFrDlcmiAddress, wfFrCircuitShapedNormalClippedPkts=wfFrCircuitShapedNormalClippedPkts, wfFrCircuitDrops=wfFrCircuitDrops, wfFrMlVCStatsReSeqBufferCnt=wfFrMlVCStatsReSeqBufferCnt, wfFrCircuitShapedHiTotalOctets=wfFrCircuitShapedHiTotalOctets, wfFrFRF4SigFramesDiscarded=wfFrFRF4SigFramesDiscarded, wfFrServiceRecordSVCInactMode=wfFrServiceRecordSVCInactMode, wfFrDlcmiPassiveReceived=wfFrDlcmiPassiveReceived, wfFrMapErrFaults=wfFrMapErrFaults, wfFrSVCActiveCallX213GainPriority=wfFrSVCActiveCallX213GainPriority, wfFrMlVCDelete=wfFrMlVCDelete, wfFrSigCircuit=wfFrSigCircuit, wfFrSVCActiveCallLLCoreMinOutThroughput=wfFrSVCActiveCallLLCoreMinOutThroughput, wfLapfLLIndex=wfLapfLLIndex, wfFrCircuitShapedHiQueueLimit=wfFrCircuitShapedHiQueueLimit, wfFrServiceRecordSVCDisable=wfFrServiceRecordSVCDisable, wfFrSVCActiveCallCalledSubAdr=wfFrSVCActiveCallCalledSubAdr, wfFrServiceRecordifOutDiscards=wfFrServiceRecordifOutDiscards, wfLapfStatus=wfLapfStatus, wfFrFRF4SigOctetsSent=wfFrFRF4SigOctetsSent, wfFrMlFragStrict=wfFrMlFragStrict, wfFrCircuitReceivedFECNs=wfFrCircuitReceivedFECNs, wfFrMapCircuitReceivedDEs=wfFrMapCircuitReceivedDEs)
