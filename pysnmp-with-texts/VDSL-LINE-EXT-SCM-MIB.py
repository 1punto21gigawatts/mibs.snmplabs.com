#
# PySNMP MIB module VDSL-LINE-EXT-SCM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/VDSL-LINE-EXT-SCM-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:33:36 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
transmission, iso, NotificationType, ObjectIdentity, MibIdentifier, Unsigned32, Integer32, Counter64, Counter32, Gauge32, ModuleIdentity, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "transmission", "iso", "NotificationType", "ObjectIdentity", "MibIdentifier", "Unsigned32", "Integer32", "Counter64", "Counter32", "Gauge32", "ModuleIdentity", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "IpAddress")
TruthValue, RowStatus, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "RowStatus", "DisplayString", "TextualConvention")
vdslLineConfProfileName, = mibBuilder.importSymbols("VDSL-LINE-MIB", "vdslLineConfProfileName")
vdslExtSCMMIB = ModuleIdentity((1, 3, 6, 1, 2, 1, 10, 228))
vdslExtSCMMIB.setRevisions(('2005-04-28 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: vdslExtSCMMIB.setRevisionsDescriptions(('Initial version, published as RFC 4069.',))
if mibBuilder.loadTexts: vdslExtSCMMIB.setLastUpdated('200504280000Z')
if mibBuilder.loadTexts: vdslExtSCMMIB.setOrganization('ADSLMIB Working Group')
if mibBuilder.loadTexts: vdslExtSCMMIB.setContactInfo('WG-email: adslmib@ietf.org Info: https://www1.ietf.org/mailman/listinfo/adslmib Chair: Mike Sneed Sand Channel Systems Postal: P.O. Box 37324 Raleigh NC 27627-732 Email: sneedmike@hotmail.com Phone: +1 206 600 7022 Co-Chair/Co-editor: Bob Ray PESA Switching Systems, Inc. Postal: 330-A Wynn Drive Huntsville, AL 35805 USA Email: rray@pesa.com Phone: +1 256 726 9200 ext. 142 Co-editor: Menachem Dodge ECI Telecom Ltd. Postal: 30 Hasivim St. Petach Tikva 49517, Israel Email: mbdodge@ieee.org Phone: +972 3 926 8421 ')
if mibBuilder.loadTexts: vdslExtSCMMIB.setDescription('The VDSL-LINE-MIB found in RFC 3728 defines objects for the management of a pair of VDSL transceivers at each end of the VDSL line. The VDSL-LINE-MIB configures and monitors the line code independent parameters (TC layer) of the VDSL line. This MIB module is an optional extension of the VDSL-LINE-MIB and defines objects for configuration and monitoring of the line code specific (LCS) elements (PMD layer) for VDSL lines using SCM coding. The objects in this extension MIB MUST NOT be used for VDSL lines using Multiple Carrier Modulation (MCM) line coding. If an object in this extension MIB is referenced by a line which does not use SCM, it has no effect on the operation of that line. Naming Conventions: Vtuc -- VDSL transceiver at near (Central) end of line Vtur -- VDSL transceiver at Remote end of line Vtu -- One of either Vtuc or Vtur Curr -- Current Atn -- Attenuation LCS -- Line Code Specific Max -- Maximum Mgn -- Margin PSD -- Power Spectral Density Rx -- Receive Snr -- Signal to Noise Ratio Tx -- Transmit Copyright (C) The Internet Society (2005). This version of this MIB module is part of RFC 4069: see the RFC itself for full legal notices.')
vdslLineExtSCMMib = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 228, 1))
vdslLineExtSCMMibObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 228, 1, 1))
class VdslSCMBandId(TextualConvention, Integer32):
    description = 'This data type is used as the syntax for the VDSL SCM Band Identity. Attributes with this syntax identify the SCM Band referred to. Specified as an INTEGER, the possible values are: optionalBand (1) -- the optional Band range [25kHz - 138kHz] firstDownstreamBand (2) -- first Downstream Band firstUpstreamBand (3) -- first Upstream Band secondDownstreamBand (4) -- second Downstream Band secondUpstreamBand (5) -- second Upstream Band thirdDownstreamBand (6) -- third Downstream Band thirdUpstreamBand (7) -- third Upstream Band'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("optionalBand", 1), ("firstDownstreamBand", 2), ("firstUpstreamBand", 3), ("secondDownstreamBand", 4), ("secondUpstreamBand", 5), ("thirdDownstreamBand", 6), ("thirdUpstreamBand", 7))

vdslLineSCMConfProfileBandTable = MibTable((1, 3, 6, 1, 2, 1, 10, 228, 1, 1, 1), )
if mibBuilder.loadTexts: vdslLineSCMConfProfileBandTable.setStatus('current')
if mibBuilder.loadTexts: vdslLineSCMConfProfileBandTable.setDescription('This table contains transmit band descriptor configuration information for a VDSL line. Each entry in this table reflects the configuration for one of possibly many bands of a single carrier modulation (SCM) VDSL line. For each profile which is associated with a VDSL line using SCM line coding, five entries in this table will exist, one for each of the five bands. Bands which are not in use will be marked as unused. These entries are defined by a manager and can be used to configure the VDSL line. If an entry in this table is referenced by a line which does not use SCM, it has no effect on the operation of that line.')
vdslLineSCMConfProfileBandEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 228, 1, 1, 1, 1), ).setIndexNames((0, "VDSL-LINE-MIB", "vdslLineConfProfileName"), (0, "VDSL-LINE-EXT-SCM-MIB", "vdslLineSCMConfProfileBandId"))
if mibBuilder.loadTexts: vdslLineSCMConfProfileBandEntry.setStatus('current')
if mibBuilder.loadTexts: vdslLineSCMConfProfileBandEntry.setDescription("Each entry consists of a list of parameters that represents the configuration of a single carrier modulation VDSL modem transmit band. A default profile with an index of 'DEFVAL', will always exist and its parameters will be set to vendor specific values, unless otherwise specified in this document. All read-create objects defined in this MIB module SHOULD be stored persistently.")
vdslLineSCMConfProfileBandId = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 228, 1, 1, 1, 1, 1), VdslSCMBandId())
if mibBuilder.loadTexts: vdslLineSCMConfProfileBandId.setStatus('current')
if mibBuilder.loadTexts: vdslLineSCMConfProfileBandId.setDescription('The BandId for this entry, which specifies which band is being referred to.')
vdslLineSCMConfProfileBandInUse = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 228, 1, 1, 1, 1, 2), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vdslLineSCMConfProfileBandInUse.setStatus('current')
if mibBuilder.loadTexts: vdslLineSCMConfProfileBandInUse.setDescription('Indicates whether this band is in use. If set to True this band is in use.')
vdslLineSCMConfProfileBandCenterFrequency = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 228, 1, 1, 1, 1, 3), Unsigned32()).setUnits('Hz').setMaxAccess("readcreate")
if mibBuilder.loadTexts: vdslLineSCMConfProfileBandCenterFrequency.setReference('T1E1.4/2000-011R3')
if mibBuilder.loadTexts: vdslLineSCMConfProfileBandCenterFrequency.setStatus('current')
if mibBuilder.loadTexts: vdslLineSCMConfProfileBandCenterFrequency.setDescription('Specifies the center frequency in Hz')
vdslLineSCMConfProfileBandSymbolRate = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 228, 1, 1, 1, 1, 4), Unsigned32()).setUnits('baud').setMaxAccess("readcreate")
if mibBuilder.loadTexts: vdslLineSCMConfProfileBandSymbolRate.setReference('T1E1.4/2000-011R3')
if mibBuilder.loadTexts: vdslLineSCMConfProfileBandSymbolRate.setStatus('current')
if mibBuilder.loadTexts: vdslLineSCMConfProfileBandSymbolRate.setDescription('The requested symbol rate in baud.')
vdslLineSCMConfProfileBandConstellationSize = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 228, 1, 1, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setUnits('log2').setMaxAccess("readcreate")
if mibBuilder.loadTexts: vdslLineSCMConfProfileBandConstellationSize.setReference('T1E1.4/2000-011R3')
if mibBuilder.loadTexts: vdslLineSCMConfProfileBandConstellationSize.setStatus('current')
if mibBuilder.loadTexts: vdslLineSCMConfProfileBandConstellationSize.setDescription('Specifies the constellation size.')
vdslLineSCMConfProfileBandTransmitPSDLevel = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 228, 1, 1, 1, 1, 6), Unsigned32()).setUnits('-0.25 dBm/Hz').setMaxAccess("readcreate")
if mibBuilder.loadTexts: vdslLineSCMConfProfileBandTransmitPSDLevel.setReference('T1E1.4/2000-011R3')
if mibBuilder.loadTexts: vdslLineSCMConfProfileBandTransmitPSDLevel.setStatus('current')
if mibBuilder.loadTexts: vdslLineSCMConfProfileBandTransmitPSDLevel.setDescription('The requested transmit power spectral density for the VDSL modem. The Actual value in -0.25 dBm/Hz.')
vdslLineSCMConfProfileBandRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 228, 1, 1, 1, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vdslLineSCMConfProfileBandRowStatus.setStatus('current')
if mibBuilder.loadTexts: vdslLineSCMConfProfileBandRowStatus.setDescription("This object is used to create a new row or modify or delete an existing row in this table. A profile activated by setting this object to `active'. When `active' is set, the system will validate the profile. None of the columns in this row may be modified while the row is in the `active' state. Before a profile can be deleted or taken out of service, (by setting this object to `destroy' or `notInService') it must be first unreferenced from all associated lines.")
vdslLineSCMPhysBandTable = MibTable((1, 3, 6, 1, 2, 1, 10, 228, 1, 1, 2), )
if mibBuilder.loadTexts: vdslLineSCMPhysBandTable.setStatus('current')
if mibBuilder.loadTexts: vdslLineSCMPhysBandTable.setDescription('This table provides one row for each SCM Vtu band. This table is read only as it reflects the current physical parameters of each band. For each ifIndex which is associated with a VDSL line using SCM line coding, five entries in this table will exist, one for each of the five bands. Bands which are not in use will be marked as unused.')
vdslLineSCMPhysBandEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 228, 1, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "VDSL-LINE-EXT-SCM-MIB", "vdslLineSCMPhysBandId"))
if mibBuilder.loadTexts: vdslLineSCMPhysBandEntry.setStatus('current')
if mibBuilder.loadTexts: vdslLineSCMPhysBandEntry.setDescription('An entry in the vdslLineSCMPhysBandTable.')
vdslLineSCMPhysBandId = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 228, 1, 1, 2, 1, 1), VdslSCMBandId())
if mibBuilder.loadTexts: vdslLineSCMPhysBandId.setStatus('current')
if mibBuilder.loadTexts: vdslLineSCMPhysBandId.setDescription('The BandId for this entry, which specifies which band is being referred to.')
vdslLineSCMPhysBandInUse = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 228, 1, 1, 2, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vdslLineSCMPhysBandInUse.setStatus('current')
if mibBuilder.loadTexts: vdslLineSCMPhysBandInUse.setDescription('Indicates whether this band is in use. If set to True this band is in use.')
vdslLineSCMPhysBandCurrCenterFrequency = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 228, 1, 1, 2, 1, 3), Unsigned32()).setUnits('Hz').setMaxAccess("readonly")
if mibBuilder.loadTexts: vdslLineSCMPhysBandCurrCenterFrequency.setReference('T1E1.4/2000-011R3')
if mibBuilder.loadTexts: vdslLineSCMPhysBandCurrCenterFrequency.setStatus('current')
if mibBuilder.loadTexts: vdslLineSCMPhysBandCurrCenterFrequency.setDescription('The current center frequency in Hz for this band.')
vdslLineSCMPhysBandCurrSymbolRate = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 228, 1, 1, 2, 1, 4), Unsigned32()).setUnits('baud').setMaxAccess("readonly")
if mibBuilder.loadTexts: vdslLineSCMPhysBandCurrSymbolRate.setReference('T1E1.4/2000-011R3')
if mibBuilder.loadTexts: vdslLineSCMPhysBandCurrSymbolRate.setStatus('current')
if mibBuilder.loadTexts: vdslLineSCMPhysBandCurrSymbolRate.setDescription('The current value of the symbol rate in baud for this band.')
vdslLineSCMPhysBandCurrConstellationSize = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 228, 1, 1, 2, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setUnits('log2').setMaxAccess("readonly")
if mibBuilder.loadTexts: vdslLineSCMPhysBandCurrConstellationSize.setReference('T1E1.4/2000-011R3')
if mibBuilder.loadTexts: vdslLineSCMPhysBandCurrConstellationSize.setStatus('current')
if mibBuilder.loadTexts: vdslLineSCMPhysBandCurrConstellationSize.setDescription('The current constellation size on this band.')
vdslLineSCMPhysBandCurrPSDLevel = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 228, 1, 1, 2, 1, 6), Unsigned32()).setUnits('- 0.25 dBm/Hz').setMaxAccess("readonly")
if mibBuilder.loadTexts: vdslLineSCMPhysBandCurrPSDLevel.setReference('T1E1.4/2000-011R3')
if mibBuilder.loadTexts: vdslLineSCMPhysBandCurrPSDLevel.setStatus('current')
if mibBuilder.loadTexts: vdslLineSCMPhysBandCurrPSDLevel.setDescription('The transmit power spectral density for the VDSL modem.')
vdslLineSCMPhysBandCurrSnrMgn = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 228, 1, 1, 2, 1, 7), Integer32()).setUnits('0.25 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: vdslLineSCMPhysBandCurrSnrMgn.setStatus('current')
if mibBuilder.loadTexts: vdslLineSCMPhysBandCurrSnrMgn.setDescription('Noise margin as seen by this Vtu and band with respect to its received signal in 0.25 dB.')
vdslLineSCMPhysBandCurrAtn = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 228, 1, 1, 2, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setUnits('0.25 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: vdslLineSCMPhysBandCurrAtn.setStatus('current')
if mibBuilder.loadTexts: vdslLineSCMPhysBandCurrAtn.setDescription('Measured difference in the total power transmitted by the peer Vtu on this band and the total power received by this Vtu on this band in 0.25 dB.')
vdslLineExtSCMConformance = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 228, 1, 2))
vdslLineExtSCMGroups = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 228, 1, 2, 1))
vdslLineExtSCMCompliances = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 228, 1, 2, 2))
vdslLineExtSCMMibCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 10, 228, 1, 2, 2, 1)).setObjects(("VDSL-LINE-EXT-SCM-MIB", "vdslLineExtSCMGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vdslLineExtSCMMibCompliance = vdslLineExtSCMMibCompliance.setStatus('current')
if mibBuilder.loadTexts: vdslLineExtSCMMibCompliance.setDescription('The compliance statement for SNMP entities which manage VDSL interfaces.')
vdslLineExtSCMGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 228, 1, 2, 1, 1)).setObjects(("VDSL-LINE-EXT-SCM-MIB", "vdslLineSCMConfProfileBandInUse"), ("VDSL-LINE-EXT-SCM-MIB", "vdslLineSCMConfProfileBandTransmitPSDLevel"), ("VDSL-LINE-EXT-SCM-MIB", "vdslLineSCMConfProfileBandSymbolRate"), ("VDSL-LINE-EXT-SCM-MIB", "vdslLineSCMConfProfileBandConstellationSize"), ("VDSL-LINE-EXT-SCM-MIB", "vdslLineSCMConfProfileBandCenterFrequency"), ("VDSL-LINE-EXT-SCM-MIB", "vdslLineSCMConfProfileBandRowStatus"), ("VDSL-LINE-EXT-SCM-MIB", "vdslLineSCMPhysBandInUse"), ("VDSL-LINE-EXT-SCM-MIB", "vdslLineSCMPhysBandCurrPSDLevel"), ("VDSL-LINE-EXT-SCM-MIB", "vdslLineSCMPhysBandCurrSymbolRate"), ("VDSL-LINE-EXT-SCM-MIB", "vdslLineSCMPhysBandCurrConstellationSize"), ("VDSL-LINE-EXT-SCM-MIB", "vdslLineSCMPhysBandCurrCenterFrequency"), ("VDSL-LINE-EXT-SCM-MIB", "vdslLineSCMPhysBandCurrSnrMgn"), ("VDSL-LINE-EXT-SCM-MIB", "vdslLineSCMPhysBandCurrAtn"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vdslLineExtSCMGroup = vdslLineExtSCMGroup.setStatus('current')
if mibBuilder.loadTexts: vdslLineExtSCMGroup.setDescription('A collection of objects providing configuration information for a VDSL line based upon single carrier modulation modem.')
mibBuilder.exportSymbols("VDSL-LINE-EXT-SCM-MIB", vdslLineSCMConfProfileBandTable=vdslLineSCMConfProfileBandTable, vdslLineSCMConfProfileBandRowStatus=vdslLineSCMConfProfileBandRowStatus, vdslLineSCMPhysBandCurrSnrMgn=vdslLineSCMPhysBandCurrSnrMgn, vdslLineSCMConfProfileBandCenterFrequency=vdslLineSCMConfProfileBandCenterFrequency, vdslLineSCMConfProfileBandTransmitPSDLevel=vdslLineSCMConfProfileBandTransmitPSDLevel, vdslLineSCMPhysBandTable=vdslLineSCMPhysBandTable, vdslLineSCMConfProfileBandId=vdslLineSCMConfProfileBandId, vdslLineExtSCMMibObjects=vdslLineExtSCMMibObjects, vdslLineSCMPhysBandCurrCenterFrequency=vdslLineSCMPhysBandCurrCenterFrequency, vdslLineExtSCMConformance=vdslLineExtSCMConformance, vdslLineSCMConfProfileBandInUse=vdslLineSCMConfProfileBandInUse, vdslLineSCMPhysBandId=vdslLineSCMPhysBandId, vdslLineExtSCMMibCompliance=vdslLineExtSCMMibCompliance, vdslLineExtSCMMib=vdslLineExtSCMMib, vdslLineExtSCMGroups=vdslLineExtSCMGroups, vdslLineSCMPhysBandCurrAtn=vdslLineSCMPhysBandCurrAtn, vdslExtSCMMIB=vdslExtSCMMIB, vdslLineSCMConfProfileBandEntry=vdslLineSCMConfProfileBandEntry, vdslLineSCMPhysBandEntry=vdslLineSCMPhysBandEntry, VdslSCMBandId=VdslSCMBandId, PYSNMP_MODULE_ID=vdslExtSCMMIB, vdslLineSCMPhysBandCurrSymbolRate=vdslLineSCMPhysBandCurrSymbolRate, vdslLineSCMConfProfileBandSymbolRate=vdslLineSCMConfProfileBandSymbolRate, vdslLineSCMPhysBandCurrPSDLevel=vdslLineSCMPhysBandCurrPSDLevel, vdslLineExtSCMCompliances=vdslLineExtSCMCompliances, vdslLineSCMPhysBandCurrConstellationSize=vdslLineSCMPhysBandCurrConstellationSize, vdslLineSCMConfProfileBandConstellationSize=vdslLineSCMConfProfileBandConstellationSize, vdslLineExtSCMGroup=vdslLineExtSCMGroup, vdslLineSCMPhysBandInUse=vdslLineSCMPhysBandInUse)
