#
# PySNMP MIB module PORTSECURITY-PRIVATE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/PORTSECURITY-PRIVATE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:41:26 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
quanta, switch = mibBuilder.importSymbols("QUANTA-SWITCH-MIB", "quanta", "switch")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Bits, Counter64, MibIdentifier, ModuleIdentity, iso, ObjectIdentity, Counter32, TimeTicks, IpAddress, Integer32, NotificationType, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter64", "MibIdentifier", "ModuleIdentity", "iso", "ObjectIdentity", "Counter32", "TimeTicks", "IpAddress", "Integer32", "NotificationType", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32")
DisplayString, TextualConvention, RowStatus, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "RowStatus", "MacAddress")
portSecurity = ModuleIdentity((1, 3, 6, 1, 4, 1, 7244, 2, 20))
if mibBuilder.loadTexts: portSecurity.setLastUpdated('201108310000Z')
if mibBuilder.loadTexts: portSecurity.setOrganization('Quanta Computer Inc.')
if mibBuilder.loadTexts: portSecurity.setContactInfo(' Customer Support Postal: Quanta Computer Inc. No. 4, Wen Ming 1 St., Kuei Shan Hsiang, Tao Yuan Shien, Taiwan, R.O.C. Tel: +886 328 0050 E-Mail: strong.chen@quantatw.com')
if mibBuilder.loadTexts: portSecurity.setDescription('The QCI Private MIB for Port Security Feature.')
agentPortSecurityGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 7244, 2, 20, 1))
agentGlobalPortSecurityMode = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 20, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentGlobalPortSecurityMode.setStatus('current')
if mibBuilder.loadTexts: agentGlobalPortSecurityMode.setDescription('Mode showing whether at the global level, port security is enabled or not.')
agentPortSecurityTable = MibTable((1, 3, 6, 1, 4, 1, 7244, 2, 20, 1, 2), )
if mibBuilder.loadTexts: agentPortSecurityTable.setStatus('current')
if mibBuilder.loadTexts: agentPortSecurityTable.setDescription('A table for Port Security and associated functionality.')
agentPortSecurityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7244, 2, 20, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: agentPortSecurityEntry.setStatus('current')
if mibBuilder.loadTexts: agentPortSecurityEntry.setDescription('Represents entry for port security table')
agentPortSecurityMode = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 20, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortSecurityMode.setStatus('current')
if mibBuilder.loadTexts: agentPortSecurityMode.setDescription('Mode showing whether at port level security is enabled or not.')
agentPortSecurityDynamicLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 20, 1, 2, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 600)).clone(600)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortSecurityDynamicLimit.setStatus('current')
if mibBuilder.loadTexts: agentPortSecurityDynamicLimit.setDescription('This variable signifies the limit of dynamically locked MAC addresses allowed on a specific port.')
agentPortSecurityStaticLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 20, 1, 2, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 20)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortSecurityStaticLimit.setStatus('current')
if mibBuilder.loadTexts: agentPortSecurityStaticLimit.setDescription('This variable signifies the limit of statically locked MAC addresses allowed on a specific port.')
agentPortSecurityViolationTrapMode = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 20, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortSecurityViolationTrapMode.setStatus('current')
if mibBuilder.loadTexts: agentPortSecurityViolationTrapMode.setDescription('This variable is used to enable or disable the sending of new violation traps designating when a packet with a disallowed MAC address is received on a locked port.')
agentPortSecurityStaticMACs = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 20, 1, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPortSecurityStaticMACs.setStatus('current')
if mibBuilder.loadTexts: agentPortSecurityStaticMACs.setDescription('This variable displays the statically locked MAC addresses for port. The list displayed in a particular fashion : 2 a0:b1:c2:d1:e3:a1,11 a0:b1:c2:d3:e4:f5 (i.e., VLAN MAC pairs separated by commas).')
agentPortSecurityLastDiscardedMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 20, 1, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPortSecurityLastDiscardedMAC.setStatus('current')
if mibBuilder.loadTexts: agentPortSecurityLastDiscardedMAC.setDescription('This variable displays the vlan-id and source MAC address of the last packet that was discarded on a locked port.')
agentPortSecurityMACAddressAdd = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 20, 1, 2, 1, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortSecurityMACAddressAdd.setStatus('current')
if mibBuilder.loadTexts: agentPortSecurityMACAddressAdd.setDescription('This MIB variable accepts a VLAN id and MAC address to be added to the list of statically locked MAC addresses on a port. The VLAN id and MAC address combination would be entered in a particular fashion like :- 2 a0:b0:c0:d1:e2:a1(the vlan-id and MAC address separated by a blank-space).')
agentPortSecurityMACAddressRemove = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 20, 1, 2, 1, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortSecurityMACAddressRemove.setStatus('current')
if mibBuilder.loadTexts: agentPortSecurityMACAddressRemove.setDescription('This MIB variable accepts a VLAN id and MAC address to be removed from the list of statically locked MAC addresses on a port.. The VLAN id and MAC address combination would be entered in a particular fashion like :- 2 a0:b0:c0:d1:e2:a1(the vlan-id and MAC address separated by a blank-space).')
agentPortSecurityMACAddressMove = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 20, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortSecurityMACAddressMove.setStatus('current')
if mibBuilder.loadTexts: agentPortSecurityMACAddressMove.setDescription('When this object is enabled, all the dynamically locked MAC addresses will be moved to statically locked addresses on a port. GET operation on this object will display disable.')
agentPortSecurityDynamicTable = MibTable((1, 3, 6, 1, 4, 1, 7244, 2, 20, 1, 3), )
if mibBuilder.loadTexts: agentPortSecurityDynamicTable.setStatus('current')
if mibBuilder.loadTexts: agentPortSecurityDynamicTable.setDescription('A table for Port Security Dynamic and associated functionality.')
agentPortSecurityDynamicEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7244, 2, 20, 1, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "PORTSECURITY-PRIVATE-MIB", "agentPortSecurityDynamicVLANId"), (0, "PORTSECURITY-PRIVATE-MIB", "agentPortSecurityDynamicMACAddress"))
if mibBuilder.loadTexts: agentPortSecurityDynamicEntry.setStatus('current')
if mibBuilder.loadTexts: agentPortSecurityDynamicEntry.setDescription('Represents entry for port MAC Locking table')
agentPortSecurityDynamicVLANId = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 20, 1, 3, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPortSecurityDynamicVLANId.setStatus('current')
if mibBuilder.loadTexts: agentPortSecurityDynamicVLANId.setDescription('Source VLAN id of the packet that is received on the dynamically locked port.')
agentPortSecurityDynamicMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 20, 1, 3, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPortSecurityDynamicMACAddress.setStatus('current')
if mibBuilder.loadTexts: agentPortSecurityDynamicMACAddress.setDescription('Source MAC address of the packet that is received on the dynamically locked port.')
agentPortSecurityTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 7244, 2, 20, 2))
agentPortSecurityViolation = NotificationType((1, 3, 6, 1, 4, 1, 7244, 2, 20, 2, 1)).setObjects(("IF-MIB", "ifIndex"), ("PORTSECURITY-PRIVATE-MIB", "agentPortSecurityLastDiscardedMAC"))
if mibBuilder.loadTexts: agentPortSecurityViolation.setStatus('current')
if mibBuilder.loadTexts: agentPortSecurityViolation.setDescription('Sent when a packet is received on a locked port with a source MAC address that is not allowed.')
mibBuilder.exportSymbols("PORTSECURITY-PRIVATE-MIB", agentPortSecurityDynamicVLANId=agentPortSecurityDynamicVLANId, agentPortSecurityLastDiscardedMAC=agentPortSecurityLastDiscardedMAC, agentPortSecurityStaticMACs=agentPortSecurityStaticMACs, PYSNMP_MODULE_ID=portSecurity, agentPortSecurityStaticLimit=agentPortSecurityStaticLimit, agentPortSecurityMACAddressAdd=agentPortSecurityMACAddressAdd, agentPortSecurityDynamicLimit=agentPortSecurityDynamicLimit, agentPortSecurityViolation=agentPortSecurityViolation, portSecurity=portSecurity, agentPortSecurityMACAddressRemove=agentPortSecurityMACAddressRemove, agentPortSecurityTable=agentPortSecurityTable, agentPortSecurityGroup=agentPortSecurityGroup, agentPortSecurityMode=agentPortSecurityMode, agentPortSecurityViolationTrapMode=agentPortSecurityViolationTrapMode, agentPortSecurityEntry=agentPortSecurityEntry, agentGlobalPortSecurityMode=agentGlobalPortSecurityMode, agentPortSecurityDynamicEntry=agentPortSecurityDynamicEntry, agentPortSecurityMACAddressMove=agentPortSecurityMACAddressMove, agentPortSecurityTraps=agentPortSecurityTraps, agentPortSecurityDynamicTable=agentPortSecurityDynamicTable, agentPortSecurityDynamicMACAddress=agentPortSecurityDynamicMACAddress)
