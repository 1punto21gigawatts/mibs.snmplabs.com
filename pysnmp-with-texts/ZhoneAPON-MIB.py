#
# PySNMP MIB module ZhoneAPON-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ZhoneAPON-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:52:32 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint")
ifStackGroup2, ifOldObjectsGroup, ifHCPacketGroup, ifOutMulticastPkts, ifStackLowerLayer, ifInBroadcastPkts, ifRcvAddressGroup, ifHCInUcastPkts, ifTableLastChange, ifStackLastChange, ifCompliance, ifHCInOctets, ifTestGroup, ifOutBroadcastPkts, ifStackHigherLayer, ifHighSpeed, ifFixedLengthGroup, ifCounterDiscontinuityTime, ifAlias, ifPacketGroup, ifHCInMulticastPkts, ifStackGroup, ifCompliance2, ifHCFixedLengthGroup, ifTestId, ifPromiscuousMode, ifGeneralInformationGroup, ifLinkUpDownTrapEnable, ifRcvAddressAddress, ifHCOutOctets, ifNumber, ifIndex, ifName, ifConnectorPresent, ifHCOutMulticastPkts, ifRcvAddressType, ifVHCPacketGroup, ifTestType, ifHCOutUcastPkts, ifStackStatus, ifInMulticastPkts, ifHCInBroadcastPkts, ifRcvAddressStatus, ifTestStatus, ifTestResult, ifTestCode, ifGeneralGroup, ifHCOutBroadcastPkts, ifCounterDiscontinuityGroup, ifTestOwner = mibBuilder.importSymbols("IF-MIB", "ifStackGroup2", "ifOldObjectsGroup", "ifHCPacketGroup", "ifOutMulticastPkts", "ifStackLowerLayer", "ifInBroadcastPkts", "ifRcvAddressGroup", "ifHCInUcastPkts", "ifTableLastChange", "ifStackLastChange", "ifCompliance", "ifHCInOctets", "ifTestGroup", "ifOutBroadcastPkts", "ifStackHigherLayer", "ifHighSpeed", "ifFixedLengthGroup", "ifCounterDiscontinuityTime", "ifAlias", "ifPacketGroup", "ifHCInMulticastPkts", "ifStackGroup", "ifCompliance2", "ifHCFixedLengthGroup", "ifTestId", "ifPromiscuousMode", "ifGeneralInformationGroup", "ifLinkUpDownTrapEnable", "ifRcvAddressAddress", "ifHCOutOctets", "ifNumber", "ifIndex", "ifName", "ifConnectorPresent", "ifHCOutMulticastPkts", "ifRcvAddressType", "ifVHCPacketGroup", "ifTestType", "ifHCOutUcastPkts", "ifStackStatus", "ifInMulticastPkts", "ifHCInBroadcastPkts", "ifRcvAddressStatus", "ifTestStatus", "ifTestResult", "ifTestCode", "ifGeneralGroup", "ifHCOutBroadcastPkts", "ifCounterDiscontinuityGroup", "ifTestOwner")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
IpAddress, Integer32, MibIdentifier, Unsigned32, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Gauge32, iso, Bits, TimeTicks, Counter32, ObjectIdentity, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "Integer32", "MibIdentifier", "Unsigned32", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Gauge32", "iso", "Bits", "TimeTicks", "Counter32", "ObjectIdentity", "Counter64")
DisplayString, TimeStamp, TruthValue, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TimeStamp", "TruthValue", "TextualConvention")
zhoneConsole, zhoneVoiceStats, zhoneDrafts, zhoneSystem, sipUAMIB, zhoneShelf, zhoneGroups, zhoneVoice, zhoneShelfSlotCompliance, zhoneOcx, sipTC, zhoneZedge, zhoneRegWtn, zhonePpp, sipCommonMIB, zhoneBridge, zhoneRegMalc, zhoneInterfaceGroup, zhoneDsl, zhoneAtm, sechtor300, zhonePhysical, zhoneShelfSlotGroup, zhoneMalc, zhoneRegPls, zhoneEnet, zhoneGenWtn, zhoneSubscriber, zhoneVoip, zhoneLineTypes, zhoneRadio, zhoneModules, apsMIB, zhoneRegCpe, zhoneRegSechtor, zhoneMasterAgent, zhoneZplex, zhoneDsx, zhoneIp, zhoneShelfIndex, zhoneWtn, zhoneDs3Ext, zhoneTrapModules, zhoneSonet, zhoneZmsProduct, zhonePls, zhoneCard, zhoneSlotIndex, zhoneRegMux, zhoneIma, sechtor100, zhoneInterfaceTranslation, zhoneZAP = mibBuilder.importSymbols("Zhone", "zhoneConsole", "zhoneVoiceStats", "zhoneDrafts", "zhoneSystem", "sipUAMIB", "zhoneShelf", "zhoneGroups", "zhoneVoice", "zhoneShelfSlotCompliance", "zhoneOcx", "sipTC", "zhoneZedge", "zhoneRegWtn", "zhonePpp", "sipCommonMIB", "zhoneBridge", "zhoneRegMalc", "zhoneInterfaceGroup", "zhoneDsl", "zhoneAtm", "sechtor300", "zhonePhysical", "zhoneShelfSlotGroup", "zhoneMalc", "zhoneRegPls", "zhoneEnet", "zhoneGenWtn", "zhoneSubscriber", "zhoneVoip", "zhoneLineTypes", "zhoneRadio", "zhoneModules", "apsMIB", "zhoneRegCpe", "zhoneRegSechtor", "zhoneMasterAgent", "zhoneZplex", "zhoneDsx", "zhoneIp", "zhoneShelfIndex", "zhoneWtn", "zhoneDs3Ext", "zhoneTrapModules", "zhoneSonet", "zhoneZmsProduct", "zhonePls", "zhoneCard", "zhoneSlotIndex", "zhoneRegMux", "zhoneIma", "sechtor100", "zhoneInterfaceTranslation", "zhoneZAP")
ZhoneAdminString, ZhoneRowStatus = mibBuilder.importSymbols("Zhone-TC", "ZhoneAdminString", "ZhoneRowStatus")
zhoneAponMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 5504, 5, 12, 1))
zhoneAponMIB.setRevisions(('2006-04-25 11:03', '2005-04-18 14:42', '2004-06-09 11:56', '2004-03-25 16:27', '2003-12-08 15:29', '2003-11-19 12:49', '2003-08-18 15:59', '2003-08-12 11:25', '2003-08-05 10:12',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: zhoneAponMIB.setRevisionsDescriptions(('Add zhoneOnuConfigRfVideo', 'Added new alarm definitions: LOS PEE SUF OAML LCD', 'Added trap info.', 'Add OLT line status change trap support.', 'Corrected spelling of guaranteedBw.', 'Modified SerialNumber field from string to integer.', 'Add Traffic Container mib.', 'Change MALC-side ONU tables to OLT/ONU. Add far-side ONU tables.', 'Initial version.',))
if mibBuilder.loadTexts: zhoneAponMIB.setLastUpdated('200604251445Z')
if mibBuilder.loadTexts: zhoneAponMIB.setOrganization('Zhone Terchnologies, Inc.')
if mibBuilder.loadTexts: zhoneAponMIB.setContactInfo(' Postal: Zhone Technologies, Inc. @ Zhone Way 7001 Oakport Street Oakland, CA 94621 USA Toll-Free: +1 877-ZHONE20 (+1 877-946-6320) Tel: +1-510-777-7000 Fax: +1-510-777-7001 E-mail: support@zhone.com')
if mibBuilder.loadTexts: zhoneAponMIB.setDescription('This is the Zhone ATM-PON mib.')
zhoneApon = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 5, 12))
if mibBuilder.loadTexts: zhoneApon.setStatus('current')
if mibBuilder.loadTexts: zhoneApon.setDescription('ATM Passive Optical Network-related Zhone MIBs.')
zhoneOltConfigTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 5, 12, 1, 2), )
if mibBuilder.loadTexts: zhoneOltConfigTable.setStatus('current')
if mibBuilder.loadTexts: zhoneOltConfigTable.setDescription('Optical Line Termination configuration table.')
zhoneOltConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 5, 12, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: zhoneOltConfigEntry.setStatus('current')
if mibBuilder.loadTexts: zhoneOltConfigEntry.setDescription('An entry in the Olt Config table.')
zhoneOltConfigAutoLearn = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 12, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("oltAutolearnEnable", 1), ("oltAutolearnDisable", 2))).clone('oltAutolearnDisable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneOltConfigAutoLearn.setStatus('current')
if mibBuilder.loadTexts: zhoneOltConfigAutoLearn.setDescription('Auto-learn enable flag.')
zhoneOltConfigCellScrambling = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 12, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("oltCellScramblingOff", 1), ("oltCellScramblingRxOnly", 2), ("oltCellScramblingTxOnly", 3), ("oltCellScramblingRxAndTx", 4))).clone('oltCellScramblingRxAndTx')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneOltConfigCellScrambling.setStatus('current')
if mibBuilder.loadTexts: zhoneOltConfigCellScrambling.setDescription('Cell scrambling option control flag.')
zhoneOltConfigBip8 = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 12, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("oltBip8Off", 1), ("oltBip8RxCorrectionOnly", 2), ("oltBip8TxGenerationOnly", 3), ("oltBip8RxAndTx", 4))).clone('oltBip8TxGenerationOnly')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneOltConfigBip8.setStatus('current')
if mibBuilder.loadTexts: zhoneOltConfigBip8.setDescription('Bip8 - Bit Interleave Parity, a procedure whereby each bit of a resulting BIP8 parity byte is a parity bit done across a specific bit position.')
zhoneOltConfigHec = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 12, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("oltHecOff", 1), ("oltHecRxCorrectionOnly", 2), ("oltHecTxGenerationOnly", 3), ("oltHecRxAndTx", 4))).clone('oltHecRxCorrectionOnly')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneOltConfigHec.setStatus('current')
if mibBuilder.loadTexts: zhoneOltConfigHec.setDescription('Headder Error Control field.')
zhoneOltConfigHecRxBypass = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 12, 1, 2, 1, 5), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneOltConfigHecRxBypass.setStatus('current')
if mibBuilder.loadTexts: zhoneOltConfigHecRxBypass.setDescription('Cyclic Redundancy Check bypass for reception.')
zhoneOltConfigCrcRx = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 12, 1, 2, 1, 6), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneOltConfigCrcRx.setStatus('current')
if mibBuilder.loadTexts: zhoneOltConfigCrcRx.setDescription('Cyclic Redundancy Check for reception.')
zhoneOltConfigOverheadSize = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 12, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("oltPonOverhead3Bytes", 1), ("oltPonOverhead6Bytes", 2), ("oltPonOverhead12Bytes", 3))).clone('oltPonOverhead3Bytes')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneOltConfigOverheadSize.setStatus('current')
if mibBuilder.loadTexts: zhoneOltConfigOverheadSize.setDescription('Overhead size definition field.')
zhoneOltConfigDelimiterPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 12, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(162)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneOltConfigDelimiterPattern.setStatus('current')
if mibBuilder.loadTexts: zhoneOltConfigDelimiterPattern.setDescription('A unique pattern indicating the start of the ATM cell or minislot, which can be used to perform byte synchronization.')
zhoneOltConfigDelimiterSize = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 12, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 16)).clone(8)).setUnits('Number of bits').setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneOltConfigDelimiterSize.setStatus('current')
if mibBuilder.loadTexts: zhoneOltConfigDelimiterSize.setDescription('Delimiter pattern size.')
zhoneOltConfigCdrPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 12, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(192)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneOltConfigCdrPattern.setStatus('current')
if mibBuilder.loadTexts: zhoneOltConfigCdrPattern.setDescription('Re-sync signal pattern. ')
zhoneOltConfigCdrLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 12, 1, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneOltConfigCdrLocation.setStatus('current')
if mibBuilder.loadTexts: zhoneOltConfigCdrLocation.setDescription('Re-sync signal location.')
zhoneOltConfigCdrActiveHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 12, 1, 2, 1, 12), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneOltConfigCdrActiveHigh.setStatus('current')
if mibBuilder.loadTexts: zhoneOltConfigCdrActiveHigh.setDescription('Clock Data Recovery.')
zhoneOltConfigCpeLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 12, 1, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneOltConfigCpeLimit.setStatus('current')
if mibBuilder.loadTexts: zhoneOltConfigCpeLimit.setDescription('Cell phase error limit.')
zhoneOltConfigLcdLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 12, 1, 2, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 15)).clone(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneOltConfigLcdLimit.setStatus('current')
if mibBuilder.loadTexts: zhoneOltConfigLcdLimit.setDescription('Loss of cell delineation limit.')
zhoneOltConfigLcdAlpha = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 12, 1, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneOltConfigLcdAlpha.setStatus('current')
if mibBuilder.loadTexts: zhoneOltConfigLcdAlpha.setDescription('Number of cells in delineation error before the LCD alarm is raised.')
zhoneOltConfigLcdDelta = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 12, 1, 2, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneOltConfigLcdDelta.setStatus('current')
if mibBuilder.loadTexts: zhoneOltConfigLcdDelta.setDescription('Number of cells received NOT in delineation error required to clear LCD Alarm.')
zhoneOltConfigTxDiscardNonMatchingVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 12, 1, 2, 1, 17), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneOltConfigTxDiscardNonMatchingVpi.setStatus('current')
if mibBuilder.loadTexts: zhoneOltConfigTxDiscardNonMatchingVpi.setDescription('Discard non-matching Vpi.')
zhoneOltConfigUtopiaDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 12, 1, 2, 1, 18), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneOltConfigUtopiaDiscard.setStatus('current')
if mibBuilder.loadTexts: zhoneOltConfigUtopiaDiscard.setDescription('Discard Utopia cells with HEC errors or arriving on unknown Vpi.')
zhoneOltConfigSyncBytesClkDivisor = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 12, 1, 2, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneOltConfigSyncBytesClkDivisor.setStatus('current')
if mibBuilder.loadTexts: zhoneOltConfigSyncBytesClkDivisor.setDescription('Sync Bytes Clock Divisor.')
zhoneOltConfigTxSyncBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 12, 1, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("txSyncBytesEnable", 1), ("txSyncBytesDisable", 2))).clone('txSyncBytesDisable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneOltConfigTxSyncBytes.setStatus('current')
if mibBuilder.loadTexts: zhoneOltConfigTxSyncBytes.setDescription('Enable transmission of sync bytes for ONUs to get their clock from a network source.')
zhoneOltConfigLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 12, 1, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("loopbackNone", 1), ("loopbackInward", 2), ("loopbackLine", 3))).clone('loopbackNone')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneOltConfigLoopback.setStatus('current')
if mibBuilder.loadTexts: zhoneOltConfigLoopback.setDescription('OLT loopback configuration.')
zhoneOltConfigMaxPonDistance = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 12, 1, 2, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(200)).setUnits('Distance in microseconds, used in the ranging process.').setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneOltConfigMaxPonDistance.setStatus('current')
if mibBuilder.loadTexts: zhoneOltConfigMaxPonDistance.setDescription('Max PON distance.')
zhoneOltConfigLineStatusChangeTrapEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 12, 1, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneOltConfigLineStatusChangeTrapEnable.setStatus('current')
if mibBuilder.loadTexts: zhoneOltConfigLineStatusChangeTrapEnable.setDescription('Enable/disable control for line status traps on this interface.')
zhoneOltStatusTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 5, 12, 1, 3), )
if mibBuilder.loadTexts: zhoneOltStatusTable.setStatus('current')
if mibBuilder.loadTexts: zhoneOltStatusTable.setDescription('Optical Line Termination status table.')
zhoneOltStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 5, 12, 1, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: zhoneOltStatusEntry.setStatus('current')
if mibBuilder.loadTexts: zhoneOltStatusEntry.setDescription('An entry in the OLT Status table.')
zhoneOltStatusState = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 12, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("oltStateDown", 1), ("oltStateUp", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneOltStatusState.setStatus('current')
if mibBuilder.loadTexts: zhoneOltStatusState.setDescription('Line state of the OLT.')
zhoneOltStatusLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 12, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("oltLoopbackNone", 1), ("oltLoopbackInward", 2), ("oltLoopbackLine", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneOltStatusLoopback.setStatus('current')
if mibBuilder.loadTexts: zhoneOltStatusLoopback.setDescription('Loopback state of the OLT.')
zhoneOltStatusPonAlarmLPHY = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 12, 1, 3, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneOltStatusPonAlarmLPHY.setStatus('current')
if mibBuilder.loadTexts: zhoneOltStatusPonAlarmLPHY.setDescription('Loss of physical layer alarm.')
zhoneOltStatusPonAlarmTF = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 12, 1, 3, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneOltStatusPonAlarmTF.setStatus('current')
if mibBuilder.loadTexts: zhoneOltStatusPonAlarmTF.setDescription('Transmitter failure notification.')
zhoneOltStatusPonAlarmSUF = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 12, 1, 3, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneOltStatusPonAlarmSUF.setStatus('current')
if mibBuilder.loadTexts: zhoneOltStatusPonAlarmSUF.setDescription('StartUp Failure - ranging process failed N times. Note that SUF reflects a hardware problem, and does not include cases where the ONU serial number/password are wrong/unknown.')
zhoneOltStatusPonAlarmPEE = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 12, 1, 3, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneOltStatusPonAlarmPEE.setStatus('current')
if mibBuilder.loadTexts: zhoneOltStatusPonAlarmPEE.setDescription('Physical Equipment Error (received from an ONU.)')
zhoneOltStatusPonAlarmLCD = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 12, 1, 3, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneOltStatusPonAlarmLCD.setStatus('current')
if mibBuilder.loadTexts: zhoneOltStatusPonAlarmLCD.setDescription('Loss of Cell Delineation.')
zhoneOltStatusPonAlarmLOS = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 12, 1, 3, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneOltStatusPonAlarmLOS.setStatus('current')
if mibBuilder.loadTexts: zhoneOltStatusPonAlarmLOS.setDescription('Loss of Signal alarm.')
zhoneOltStatusPonAlarmOAML = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 12, 1, 3, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneOltStatusPonAlarmOAML.setStatus('current')
if mibBuilder.loadTexts: zhoneOltStatusPonAlarmOAML.setDescription('PLOAM cell loss.')
zhoneOltStatusPonAlarmCPE = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 12, 1, 3, 1, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneOltStatusPonAlarmCPE.setStatus('current')
if mibBuilder.loadTexts: zhoneOltStatusPonAlarmCPE.setDescription('Cell Phase Error.')
zhoneOltStatusLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 12, 1, 3, 1, 11), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneOltStatusLastChange.setStatus('current')
if mibBuilder.loadTexts: zhoneOltStatusLastChange.setDescription('Time of last line status change.')
zhoneOltOnuConfigTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 5, 12, 1, 4), )
if mibBuilder.loadTexts: zhoneOltOnuConfigTable.setStatus('current')
if mibBuilder.loadTexts: zhoneOltOnuConfigTable.setDescription('Optical Network Unit configuration table - MALC side.')
zhoneOltOnuConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 5, 12, 1, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: zhoneOltOnuConfigEntry.setStatus('current')
if mibBuilder.loadTexts: zhoneOltOnuConfigEntry.setDescription('An entry in the ONU Config table.')
zhoneOltOnuConfigPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 12, 1, 4, 1, 1), ZhoneAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneOltOnuConfigPassword.setStatus('current')
if mibBuilder.loadTexts: zhoneOltOnuConfigPassword.setDescription('ONU remote-device password.')
zhoneOltOnuConfigSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 12, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneOltOnuConfigSerialNum.setStatus('current')
if mibBuilder.loadTexts: zhoneOltOnuConfigSerialNum.setDescription('ONU remote-device serial number.')
zhoneOltOnuConfigChurnkey = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 12, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("onuChurnkeyEnable", 1), ("onuChurnkeyDisable", 2))).clone('onuChurnkeyDisable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneOltOnuConfigChurnkey.setStatus('current')
if mibBuilder.loadTexts: zhoneOltOnuConfigChurnkey.setDescription('Churn key enable flag.')
zhoneOltOnuConfigLineStatusChangeTrapEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 12, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneOltOnuConfigLineStatusChangeTrapEnable.setStatus('current')
if mibBuilder.loadTexts: zhoneOltOnuConfigLineStatusChangeTrapEnable.setDescription('Enable/disable control for line status traps on this interface.')
zhoneOltOnuStatusTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 5, 12, 1, 5), )
if mibBuilder.loadTexts: zhoneOltOnuStatusTable.setStatus('current')
if mibBuilder.loadTexts: zhoneOltOnuStatusTable.setDescription('Optical Network Unit status table - MALC side.')
zhoneOltOnuStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 5, 12, 1, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: zhoneOltOnuStatusEntry.setStatus('current')
if mibBuilder.loadTexts: zhoneOltOnuStatusEntry.setDescription('An entry in the OLT/ONU Status table.')
zhoneOltOnuStatusPonAlarmLOA = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 12, 1, 5, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneOltOnuStatusPonAlarmLOA.setStatus('current')
if mibBuilder.loadTexts: zhoneOltOnuStatusPonAlarmLOA.setDescription('Loss of ACK - ONU.')
zhoneOltOnuStatusPonAlarmERR = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 12, 1, 5, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneOltOnuStatusPonAlarmERR.setStatus('current')
if mibBuilder.loadTexts: zhoneOltOnuStatusPonAlarmERR.setDescription('Bip8 error - ONU.')
zhoneOltOnuStatusPonAlarmSD = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 12, 1, 5, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneOltOnuStatusPonAlarmSD.setStatus('current')
if mibBuilder.loadTexts: zhoneOltOnuStatusPonAlarmSD.setDescription('Signal Degraded alarm.')
zhoneOltOnuStatusPonAlarmREI = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 12, 1, 5, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneOltOnuStatusPonAlarmREI.setStatus('current')
if mibBuilder.loadTexts: zhoneOltOnuStatusPonAlarmREI.setDescription('Remote Error Indication.')
zhoneOltOnuStatusPonAlarmMEM = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 12, 1, 5, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneOltOnuStatusPonAlarmMEM.setStatus('current')
if mibBuilder.loadTexts: zhoneOltOnuStatusPonAlarmMEM.setDescription('Message Error Message.')
zhoneOltOnuStatusPonAlarmRXINH = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 12, 1, 5, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneOltOnuStatusPonAlarmRXINH.setStatus('current')
if mibBuilder.loadTexts: zhoneOltOnuStatusPonAlarmRXINH.setDescription('Rx alarm inhibit.')
zhoneOltOnuStatusPonAlarmLOS = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 12, 1, 5, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneOltOnuStatusPonAlarmLOS.setStatus('current')
if mibBuilder.loadTexts: zhoneOltOnuStatusPonAlarmLOS.setDescription('Description.')
zhoneOltOnuStatusPonAlarmPEE = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 12, 1, 5, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneOltOnuStatusPonAlarmPEE.setStatus('current')
if mibBuilder.loadTexts: zhoneOltOnuStatusPonAlarmPEE.setDescription('Description.')
zhoneOltOnuStatusPonAlarmSUF = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 12, 1, 5, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneOltOnuStatusPonAlarmSUF.setStatus('current')
if mibBuilder.loadTexts: zhoneOltOnuStatusPonAlarmSUF.setDescription('Description.')
zhoneOltOnuStatusPonAlarmOAML = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 12, 1, 5, 1, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneOltOnuStatusPonAlarmOAML.setStatus('current')
if mibBuilder.loadTexts: zhoneOltOnuStatusPonAlarmOAML.setDescription('Description.')
zhoneOltOnuStatusPonAlarmLCD = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 12, 1, 5, 1, 11), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneOltOnuStatusPonAlarmLCD.setStatus('current')
if mibBuilder.loadTexts: zhoneOltOnuStatusPonAlarmLCD.setDescription('Description.')
zhoneOnuConfigTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 5, 12, 1, 6), )
if mibBuilder.loadTexts: zhoneOnuConfigTable.setStatus('current')
if mibBuilder.loadTexts: zhoneOnuConfigTable.setDescription('Configuration information for the far-end (ONU) device.')
zhoneOnuConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 5, 12, 1, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: zhoneOnuConfigEntry.setStatus('current')
if mibBuilder.loadTexts: zhoneOnuConfigEntry.setDescription('An entry in the ONU Config table.')
zhoneOnuConfigSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 12, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneOnuConfigSerialNumber.setStatus('current')
if mibBuilder.loadTexts: zhoneOnuConfigSerialNumber.setDescription('ONU serial number.')
zhoneOnuConfigPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 12, 1, 6, 1, 2), ZhoneAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneOnuConfigPassword.setStatus('current')
if mibBuilder.loadTexts: zhoneOnuConfigPassword.setDescription('ONU password.')
zhoneOnuConfigNetworkRefClk = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 12, 1, 6, 1, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneOnuConfigNetworkRefClk.setStatus('current')
if mibBuilder.loadTexts: zhoneOnuConfigNetworkRefClk.setDescription('Network reference clock usage flag.')
zhoneOnuConfigHEC = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 12, 1, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("onuOff", 1), ("onuRxCorrectionOnly", 2), ("onuTxGenerationOnly", 3), ("onuRxAndTx", 4))).clone('onuRxAndTx')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneOnuConfigHEC.setStatus('current')
if mibBuilder.loadTexts: zhoneOnuConfigHEC.setDescription('Header Error Control.')
zhoneOnuConfigLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 12, 1, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("onuNone", 1), ("onuInward", 2), ("onuLine", 3))).clone('onuLine')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneOnuConfigLoopback.setStatus('current')
if mibBuilder.loadTexts: zhoneOnuConfigLoopback.setDescription('Loopback mode for device.')
zhoneOnuConfigOverheadSize = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 12, 1, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("onuOverheadSize3Bytes", 1), ("onuOverheadSize6Bytes", 2), ("onuOverheadSize12Bytes", 3))).clone('onuOverheadSize3Bytes')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneOnuConfigOverheadSize.setStatus('current')
if mibBuilder.loadTexts: zhoneOnuConfigOverheadSize.setDescription('Overhead size definition field.')
zhoneOnuConfigRfVideo = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 12, 1, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneOnuConfigRfVideo.setStatus('current')
if mibBuilder.loadTexts: zhoneOnuConfigRfVideo.setDescription('Used to turn rf video on and off and to read current status of rf video.')
zhoneOnuStatusTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 5, 12, 1, 7), )
if mibBuilder.loadTexts: zhoneOnuStatusTable.setStatus('current')
if mibBuilder.loadTexts: zhoneOnuStatusTable.setDescription('Status and alarm information for the far-end (ONU) device.')
zhoneOnuStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 5, 12, 1, 7, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: zhoneOnuStatusEntry.setStatus('current')
if mibBuilder.loadTexts: zhoneOnuStatusEntry.setDescription('An entry in the ONU Status table.')
zhoneOnuStatusOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 12, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("onuStateDown", 1), ("onuStateUp", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneOnuStatusOperStatus.setStatus('current')
if mibBuilder.loadTexts: zhoneOnuStatusOperStatus.setDescription('Operational status.')
zhoneOnuStatusLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 12, 1, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("onuNone", 1), ("onuInward", 2), ("onuLine", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneOnuStatusLoopback.setStatus('current')
if mibBuilder.loadTexts: zhoneOnuStatusLoopback.setDescription('Loopback status.')
zhoneOnuStatusAlarmTF = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 12, 1, 7, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneOnuStatusAlarmTF.setStatus('current')
if mibBuilder.loadTexts: zhoneOnuStatusAlarmTF.setDescription('Transmitter Failure - The ONU transmitter is declared in failure when there is no nominal backfacet photocurrent or when the drive currents go beyond the maximum specification.')
zhoneOnuStatusAlarmLOS = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 12, 1, 7, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneOnuStatusAlarmLOS.setStatus('current')
if mibBuilder.loadTexts: zhoneOnuStatusAlarmLOS.setDescription('Loss Of Signal - No valid optical signal. E.g. this can be generated by the logical function (OAML.AND.FRML.AND.LCD).')
zhoneOnuStatusAlarmPEE = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 12, 1, 7, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneOnuStatusAlarmPEE.setStatus('current')
if mibBuilder.loadTexts: zhoneOnuStatusAlarmPEE.setDescription('Physical Equipment Error - When the ONU receives a PEE message.')
zhoneOnuStatusAlarmSUF = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 12, 1, 7, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneOnuStatusAlarmSUF.setStatus('current')
if mibBuilder.loadTexts: zhoneOnuStatusAlarmSUF.setDescription('Startup Failure - The ranging of this ONU has failed (see ranging protocol for exact condition).')
zhoneOnuStatusAlarmOAML = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 12, 1, 7, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneOnuStatusAlarmOAML.setStatus('current')
if mibBuilder.loadTexts: zhoneOnuStatusAlarmOAML.setDescription('PLOAM Cell Loss - When three consecutive PLOAM headers are wrong.')
zhoneOnuStatusAlarmLCD = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 12, 1, 7, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneOnuStatusAlarmLCD.setStatus('current')
if mibBuilder.loadTexts: zhoneOnuStatusAlarmLCD.setDescription('Loss of Cell Delineation - When seven consecutive ATM cells have an invalid HEC.')
zhoneOnuStatusAlarmFRML = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 12, 1, 7, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneOnuStatusAlarmFRML.setStatus('current')
if mibBuilder.loadTexts: zhoneOnuStatusAlarmFRML.setDescription('Loss Of Downstream Frame - When the frame bit is 0 for three consecutive frames.')
zhoneOnuStatusAlarmERR = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 12, 1, 7, 1, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneOnuStatusAlarmERR.setStatus('current')
if mibBuilder.loadTexts: zhoneOnuStatusAlarmERR.setDescription('Block Error Detection - The downstream received BIP8 is compared with the calculated BIP8 on the received stream. The number of differing bits is accumulated in ERR. At regular intervals, the content is sent via REI to the OLT. This interval is programmed by the OLT with a BER_interval_timer message. ERR is renewed at every reception of a downstream PLOAM cell. ')
zhoneOnuStatusAlarmSD = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 12, 1, 7, 1, 11), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneOnuStatusAlarmSD.setStatus('current')
if mibBuilder.loadTexts: zhoneOnuStatusAlarmSD.setDescription('Signal Degraded - Set active when the downstream BER >= 10E-5')
zhoneOnuStatusAlarmMEM = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 12, 1, 7, 1, 12), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneOnuStatusAlarmMEM.setStatus('current')
if mibBuilder.loadTexts: zhoneOnuStatusAlarmMEM.setDescription('Message Error Message - When the ONU receives an unknown message.')
zhoneOnuStatusAlarmDACT = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 12, 1, 7, 1, 13), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneOnuStatusAlarmDACT.setStatus('current')
if mibBuilder.loadTexts: zhoneOnuStatusAlarmDACT.setDescription('De-activate PON-ID - It instructs the ONU to deactivate itself.')
zhoneOnuStatusAlarmDIS = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 12, 1, 7, 1, 14), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneOnuStatusAlarmDIS.setStatus('current')
if mibBuilder.loadTexts: zhoneOnuStatusAlarmDIS.setDescription("Disabled ONU - When the ONU receives a Disable_serial_number message with it's own serial number and the enable flag=0xFF. It stays in this state even after power off.")
zhoneOnuStatusAlarmMIS = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 12, 1, 7, 1, 15), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneOnuStatusAlarmMIS.setStatus('current')
if mibBuilder.loadTexts: zhoneOnuStatusAlarmMIS.setDescription('Link Mismatching - The ONU detects that the received PST and transmitted PST are different.')
zhoneOnuStatusLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 12, 1, 7, 1, 16), TimeStamp().clone(0)).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneOnuStatusLastChange.setStatus('current')
if mibBuilder.loadTexts: zhoneOnuStatusLastChange.setDescription('Time of last line status change.')
zhoneOltTrafficContainerIndexNext = MibScalar((1, 3, 6, 1, 4, 1, 5504, 5, 12, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneOltTrafficContainerIndexNext.setStatus('current')
if mibBuilder.loadTexts: zhoneOltTrafficContainerIndexNext.setDescription('This object contains an appropriate value to be used for the zhoneOltTrafficContainerIndex when creating entries in the zhoneOltTrafficContainerTable. The value 0 indicates that no unassigned entries are available. To obtain the zhoneOltTrafficContainerIndex value for a new entry, the manager issues a management protocol retrieval operation to obtain the current value of this object. After each retrieval, the agent should modify the value to the next unassigned index. After a manager retrieves a value the agent will determine through its local policy when this index value will be made available for reuse. ')
zhoneOltTrafficContainerTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 5, 12, 1, 9), )
if mibBuilder.loadTexts: zhoneOltTrafficContainerTable.setStatus('current')
if mibBuilder.loadTexts: zhoneOltTrafficContainerTable.setDescription('Traffic Container definitions for the OLT.')
zhoneOltTrafficContainerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 5, 12, 1, 9, 1), ).setIndexNames((0, "ZhoneAPON-MIB", "zhoneOltTrafficContainerIndex"))
if mibBuilder.loadTexts: zhoneOltTrafficContainerEntry.setStatus('current')
if mibBuilder.loadTexts: zhoneOltTrafficContainerEntry.setDescription('Description.')
zhoneOltTrafficContainerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 12, 1, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: zhoneOltTrafficContainerIndex.setStatus('current')
if mibBuilder.loadTexts: zhoneOltTrafficContainerIndex.setDescription('A unique value to identify this traffic container entry.')
zhoneOltTrafficContainerGuaranteedBW = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 12, 1, 9, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('Megabits per second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneOltTrafficContainerGuaranteedBW.setStatus('current')
if mibBuilder.loadTexts: zhoneOltTrafficContainerGuaranteedBW.setDescription('The maximum guareented bandwidth is downstream bit rate divided by number of ONUs. For this incarnation, it is 622 / 32 = 19.4')
zhoneOltTrafficContainerMaximumBW = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 12, 1, 9, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneOltTrafficContainerMaximumBW.setStatus('current')
if mibBuilder.loadTexts: zhoneOltTrafficContainerMaximumBW.setDescription('Maximum bandwidth for a PON channel. The maximum bandwidth is downstream bit rate divided by the number of ONUs. For this incarnation, it is 622 / 32 = 19.4')
zhoneOltTrafficContainerCBR = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 12, 1, 9, 1, 4), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneOltTrafficContainerCBR.setStatus('current')
if mibBuilder.loadTexts: zhoneOltTrafficContainerCBR.setDescription('Constant Bit Rate - describes the nature of the traffic on the channel. A TRUE setting implies that the data stream will be of a constant nature. FALSE implies that the traffic will be bursty.')
zhoneOltTrafficContainerCbrCompensate = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 12, 1, 9, 1, 5), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneOltTrafficContainerCbrCompensate.setStatus('current')
if mibBuilder.loadTexts: zhoneOltTrafficContainerCbrCompensate.setDescription('A flag for ranging compensation. When a ranging window is opened, the Grant Handler appends to the end of the ranging window all the grants missed due to the ranging window by CBR flows with the compensation flag set.')
zhoneOltTrafficContainerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 12, 1, 9, 1, 6), ZhoneRowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneOltTrafficContainerRowStatus.setStatus('current')
if mibBuilder.loadTexts: zhoneOltTrafficContainerRowStatus.setDescription("Row status of the traffic container entry. This field must be initially set to 'createAndGo'.")
zhoneAponTraps = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 5, 12, 3))
if mibBuilder.loadTexts: zhoneAponTraps.setStatus('current')
if mibBuilder.loadTexts: zhoneAponTraps.setDescription('Definitions for Atm PON traps.')
zhoneAPONV2Traps = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 5, 12, 3, 0))
if mibBuilder.loadTexts: zhoneAPONV2Traps.setStatus('current')
if mibBuilder.loadTexts: zhoneAPONV2Traps.setDescription('APON Olt and Onu Traps.')
zhoneOltLineStatusChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 5504, 5, 12, 3, 0, 1)).setObjects(("ZhoneAPON-MIB", "zhoneOltStatusLastChange"), ("IF-MIB", "ifAlias"))
if mibBuilder.loadTexts: zhoneOltLineStatusChangeTrap.setStatus('current')
if mibBuilder.loadTexts: zhoneOltLineStatusChangeTrap.setDescription('Line status change trap for the OLT APON interface.')
zhoneOnuLineStatusChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 5504, 5, 12, 3, 0, 2)).setObjects(("ZhoneAPON-MIB", "zhoneOnuStatusLastChange"), ("IF-MIB", "ifAlias"))
if mibBuilder.loadTexts: zhoneOnuLineStatusChangeTrap.setStatus('current')
if mibBuilder.loadTexts: zhoneOnuLineStatusChangeTrap.setDescription('Line status change trap for a particular Onu APON interface.')
zhoneAponOltConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 9, 1, 2)).setObjects(("ZhoneAPON-MIB", "zhoneOltConfigCellScrambling"), ("ZhoneAPON-MIB", "zhoneOltConfigBip8"), ("ZhoneAPON-MIB", "zhoneOltConfigHec"), ("ZhoneAPON-MIB", "zhoneOltConfigHecRxBypass"), ("ZhoneAPON-MIB", "zhoneOltConfigCrcRx"), ("ZhoneAPON-MIB", "zhoneOltConfigOverheadSize"), ("ZhoneAPON-MIB", "zhoneOltConfigDelimiterPattern"), ("ZhoneAPON-MIB", "zhoneOltConfigDelimiterSize"), ("ZhoneAPON-MIB", "zhoneOltConfigCdrPattern"), ("ZhoneAPON-MIB", "zhoneOltConfigCdrLocation"), ("ZhoneAPON-MIB", "zhoneOltConfigCdrActiveHigh"), ("ZhoneAPON-MIB", "zhoneOltConfigCpeLimit"), ("ZhoneAPON-MIB", "zhoneOltConfigLcdLimit"), ("ZhoneAPON-MIB", "zhoneOltConfigLcdAlpha"), ("ZhoneAPON-MIB", "zhoneOltConfigLcdDelta"), ("ZhoneAPON-MIB", "zhoneOltConfigTxDiscardNonMatchingVpi"), ("ZhoneAPON-MIB", "zhoneOltConfigUtopiaDiscard"), ("ZhoneAPON-MIB", "zhoneOltConfigLineStatusChangeTrapEnable"), ("ZhoneAPON-MIB", "zhoneOltConfigLoopback"), ("ZhoneAPON-MIB", "zhoneOltConfigAutoLearn"), ("ZhoneAPON-MIB", "zhoneOltConfigSyncBytesClkDivisor"), ("ZhoneAPON-MIB", "zhoneOltConfigTxSyncBytes"), ("ZhoneAPON-MIB", "zhoneOltConfigMaxPonDistance"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhoneAponOltConfigGroup = zhoneAponOltConfigGroup.setStatus('current')
if mibBuilder.loadTexts: zhoneAponOltConfigGroup.setDescription('OLT Config objects.')
zhoneAponOltStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 9, 1, 3)).setObjects(("ZhoneAPON-MIB", "zhoneOltStatusState"), ("ZhoneAPON-MIB", "zhoneOltStatusLoopback"), ("ZhoneAPON-MIB", "zhoneOltStatusPonAlarmLPHY"), ("ZhoneAPON-MIB", "zhoneOltStatusPonAlarmTF"), ("ZhoneAPON-MIB", "zhoneOltStatusPonAlarmSUF"), ("ZhoneAPON-MIB", "zhoneOltStatusPonAlarmPEE"), ("ZhoneAPON-MIB", "zhoneOltStatusPonAlarmLCD"), ("ZhoneAPON-MIB", "zhoneOltStatusPonAlarmLOS"), ("ZhoneAPON-MIB", "zhoneOltStatusPonAlarmOAML"), ("ZhoneAPON-MIB", "zhoneOltStatusPonAlarmCPE"), ("ZhoneAPON-MIB", "zhoneOltStatusLastChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhoneAponOltStatusGroup = zhoneAponOltStatusGroup.setStatus('current')
if mibBuilder.loadTexts: zhoneAponOltStatusGroup.setDescription('Zhone ATM-PON OLT Status objects.')
zhoneAponOltOnuConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 9, 1, 4)).setObjects(("ZhoneAPON-MIB", "zhoneOltOnuConfigPassword"), ("ZhoneAPON-MIB", "zhoneOltOnuConfigSerialNum"), ("ZhoneAPON-MIB", "zhoneOltOnuConfigChurnkey"), ("ZhoneAPON-MIB", "zhoneOltOnuConfigLineStatusChangeTrapEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhoneAponOltOnuConfigGroup = zhoneAponOltOnuConfigGroup.setStatus('current')
if mibBuilder.loadTexts: zhoneAponOltOnuConfigGroup.setDescription('Zhone ATM-PON ONU Config objects.')
zhoneAponOltOnuStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 9, 1, 5)).setObjects(("ZhoneAPON-MIB", "zhoneOltOnuStatusPonAlarmLOA"), ("ZhoneAPON-MIB", "zhoneOltOnuStatusPonAlarmERR"), ("ZhoneAPON-MIB", "zhoneOltOnuStatusPonAlarmSD"), ("ZhoneAPON-MIB", "zhoneOltOnuStatusPonAlarmREI"), ("ZhoneAPON-MIB", "zhoneOltOnuStatusPonAlarmMEM"), ("ZhoneAPON-MIB", "zhoneOltOnuStatusPonAlarmRXINH"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhoneAponOltOnuStatusGroup = zhoneAponOltOnuStatusGroup.setStatus('current')
if mibBuilder.loadTexts: zhoneAponOltOnuStatusGroup.setDescription('Zhone ATM-PON ONU Status objects.')
zhoneAponOnuConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 9, 1, 6)).setObjects(("ZhoneAPON-MIB", "zhoneOnuConfigSerialNumber"), ("ZhoneAPON-MIB", "zhoneOnuConfigPassword"), ("ZhoneAPON-MIB", "zhoneOnuConfigNetworkRefClk"), ("ZhoneAPON-MIB", "zhoneOnuConfigHEC"), ("ZhoneAPON-MIB", "zhoneOnuConfigLoopback"), ("ZhoneAPON-MIB", "zhoneOnuConfigOverheadSize"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhoneAponOnuConfigGroup = zhoneAponOnuConfigGroup.setStatus('current')
if mibBuilder.loadTexts: zhoneAponOnuConfigGroup.setDescription('ONU configuration information.')
zhoneAponOnuStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 9, 1, 7)).setObjects(("ZhoneAPON-MIB", "zhoneOnuStatusLoopback"), ("ZhoneAPON-MIB", "zhoneOnuStatusAlarmTF"), ("ZhoneAPON-MIB", "zhoneOnuStatusAlarmLOS"), ("ZhoneAPON-MIB", "zhoneOnuStatusAlarmPEE"), ("ZhoneAPON-MIB", "zhoneOnuStatusAlarmSUF"), ("ZhoneAPON-MIB", "zhoneOnuStatusAlarmOAML"), ("ZhoneAPON-MIB", "zhoneOnuStatusAlarmLCD"), ("ZhoneAPON-MIB", "zhoneOnuStatusAlarmFRML"), ("ZhoneAPON-MIB", "zhoneOnuStatusAlarmERR"), ("ZhoneAPON-MIB", "zhoneOnuStatusAlarmSD"), ("ZhoneAPON-MIB", "zhoneOnuStatusAlarmMEM"), ("ZhoneAPON-MIB", "zhoneOnuStatusAlarmDACT"), ("ZhoneAPON-MIB", "zhoneOnuStatusAlarmDIS"), ("ZhoneAPON-MIB", "zhoneOnuStatusAlarmMIS"), ("ZhoneAPON-MIB", "zhoneOnuStatusOperStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhoneAponOnuStatusGroup = zhoneAponOnuStatusGroup.setStatus('current')
if mibBuilder.loadTexts: zhoneAponOnuStatusGroup.setDescription('ONU status and alarm information.')
zhoneAponOltTrafficContainerGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 9, 1, 8)).setObjects(("ZhoneAPON-MIB", "zhoneOltTrafficContainerMaximumBW"), ("ZhoneAPON-MIB", "zhoneOltTrafficContainerCBR"), ("ZhoneAPON-MIB", "zhoneOltTrafficContainerIndexNext"), ("ZhoneAPON-MIB", "zhoneOltTrafficContainerCbrCompensate"), ("ZhoneAPON-MIB", "zhoneOltTrafficContainerRowStatus"), ("ZhoneAPON-MIB", "zhoneOltTrafficContainerGuaranteedBW"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhoneAponOltTrafficContainerGroup = zhoneAponOltTrafficContainerGroup.setStatus('current')
if mibBuilder.loadTexts: zhoneAponOltTrafficContainerGroup.setDescription('OLT Traffic Container objects.')
zhoneAponTrapsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 5504, 9, 1, 9)).setObjects(("ZhoneAPON-MIB", "zhoneOltLineStatusChangeTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhoneAponTrapsGroup = zhoneAponTrapsGroup.setStatus('current')
if mibBuilder.loadTexts: zhoneAponTrapsGroup.setDescription('Atm PON traps group.')
mibBuilder.exportSymbols("ZhoneAPON-MIB", zhoneOnuConfigTable=zhoneOnuConfigTable, zhoneOltOnuStatusPonAlarmPEE=zhoneOltOnuStatusPonAlarmPEE, zhoneOltOnuStatusEntry=zhoneOltOnuStatusEntry, zhoneAPONV2Traps=zhoneAPONV2Traps, zhoneOnuStatusAlarmLOS=zhoneOnuStatusAlarmLOS, zhoneOnuStatusAlarmERR=zhoneOnuStatusAlarmERR, zhoneOltConfigAutoLearn=zhoneOltConfigAutoLearn, zhoneOnuStatusAlarmDACT=zhoneOnuStatusAlarmDACT, zhoneOltTrafficContainerEntry=zhoneOltTrafficContainerEntry, zhoneOltConfigCdrPattern=zhoneOltConfigCdrPattern, zhoneOnuStatusAlarmOAML=zhoneOnuStatusAlarmOAML, zhoneOltConfigLcdDelta=zhoneOltConfigLcdDelta, zhoneAponOltConfigGroup=zhoneAponOltConfigGroup, zhoneOnuStatusAlarmDIS=zhoneOnuStatusAlarmDIS, zhoneOnuStatusOperStatus=zhoneOnuStatusOperStatus, zhoneOnuStatusEntry=zhoneOnuStatusEntry, zhoneOnuLineStatusChangeTrap=zhoneOnuLineStatusChangeTrap, zhoneOnuConfigPassword=zhoneOnuConfigPassword, zhoneOltTrafficContainerMaximumBW=zhoneOltTrafficContainerMaximumBW, zhoneOltOnuStatusPonAlarmERR=zhoneOltOnuStatusPonAlarmERR, zhoneOltConfigTxDiscardNonMatchingVpi=zhoneOltConfigTxDiscardNonMatchingVpi, zhoneOltConfigLoopback=zhoneOltConfigLoopback, zhoneOltStatusPonAlarmCPE=zhoneOltStatusPonAlarmCPE, zhoneOltConfigSyncBytesClkDivisor=zhoneOltConfigSyncBytesClkDivisor, zhoneOltOnuStatusPonAlarmREI=zhoneOltOnuStatusPonAlarmREI, zhoneOltOnuStatusPonAlarmOAML=zhoneOltOnuStatusPonAlarmOAML, zhoneOnuConfigRfVideo=zhoneOnuConfigRfVideo, zhoneOltTrafficContainerIndex=zhoneOltTrafficContainerIndex, zhoneAponOnuStatusGroup=zhoneAponOnuStatusGroup, zhoneOltStatusState=zhoneOltStatusState, zhoneOnuStatusAlarmSUF=zhoneOnuStatusAlarmSUF, zhoneOltConfigHecRxBypass=zhoneOltConfigHecRxBypass, zhoneOltConfigBip8=zhoneOltConfigBip8, zhoneOltStatusPonAlarmOAML=zhoneOltStatusPonAlarmOAML, zhoneOnuStatusAlarmPEE=zhoneOnuStatusAlarmPEE, zhoneOltTrafficContainerGuaranteedBW=zhoneOltTrafficContainerGuaranteedBW, zhoneOltOnuConfigEntry=zhoneOltOnuConfigEntry, zhoneOltOnuConfigLineStatusChangeTrapEnable=zhoneOltOnuConfigLineStatusChangeTrapEnable, zhoneOltOnuConfigSerialNum=zhoneOltOnuConfigSerialNum, zhoneOltConfigOverheadSize=zhoneOltConfigOverheadSize, zhoneOnuConfigLoopback=zhoneOnuConfigLoopback, zhoneOltConfigCdrLocation=zhoneOltConfigCdrLocation, zhoneAponTrapsGroup=zhoneAponTrapsGroup, zhoneOltConfigMaxPonDistance=zhoneOltConfigMaxPonDistance, zhoneOnuStatusAlarmMEM=zhoneOnuStatusAlarmMEM, zhoneOltConfigTxSyncBytes=zhoneOltConfigTxSyncBytes, zhoneAponMIB=zhoneAponMIB, zhoneOltStatusPonAlarmSUF=zhoneOltStatusPonAlarmSUF, zhoneOnuConfigHEC=zhoneOnuConfigHEC, zhoneOltOnuStatusPonAlarmLOS=zhoneOltOnuStatusPonAlarmLOS, zhoneOltStatusPonAlarmPEE=zhoneOltStatusPonAlarmPEE, zhoneOltOnuStatusPonAlarmLCD=zhoneOltOnuStatusPonAlarmLCD, zhoneOltTrafficContainerCbrCompensate=zhoneOltTrafficContainerCbrCompensate, zhoneOltConfigEntry=zhoneOltConfigEntry, zhoneAponOltStatusGroup=zhoneAponOltStatusGroup, zhoneOltConfigTable=zhoneOltConfigTable, zhoneOltConfigCrcRx=zhoneOltConfigCrcRx, zhoneOltOnuStatusPonAlarmSUF=zhoneOltOnuStatusPonAlarmSUF, zhoneOnuConfigOverheadSize=zhoneOnuConfigOverheadSize, zhoneOnuStatusLastChange=zhoneOnuStatusLastChange, zhoneOltStatusPonAlarmLCD=zhoneOltStatusPonAlarmLCD, PYSNMP_MODULE_ID=zhoneAponMIB, zhoneOltTrafficContainerCBR=zhoneOltTrafficContainerCBR, zhoneOnuConfigNetworkRefClk=zhoneOnuConfigNetworkRefClk, zhoneOnuConfigSerialNumber=zhoneOnuConfigSerialNumber, zhoneOnuStatusAlarmSD=zhoneOnuStatusAlarmSD, zhoneOltOnuConfigChurnkey=zhoneOltOnuConfigChurnkey, zhoneOltConfigDelimiterPattern=zhoneOltConfigDelimiterPattern, zhoneOltStatusLoopback=zhoneOltStatusLoopback, zhoneOnuConfigEntry=zhoneOnuConfigEntry, zhoneOltOnuConfigTable=zhoneOltOnuConfigTable, zhoneOltStatusTable=zhoneOltStatusTable, zhoneOltStatusLastChange=zhoneOltStatusLastChange, zhoneOnuStatusAlarmTF=zhoneOnuStatusAlarmTF, zhoneOnuStatusAlarmMIS=zhoneOnuStatusAlarmMIS, zhoneAponOltOnuConfigGroup=zhoneAponOltOnuConfigGroup, zhoneOltConfigLcdAlpha=zhoneOltConfigLcdAlpha, zhoneOnuStatusAlarmFRML=zhoneOnuStatusAlarmFRML, zhoneOltConfigUtopiaDiscard=zhoneOltConfigUtopiaDiscard, zhoneOltStatusEntry=zhoneOltStatusEntry, zhoneOltConfigHec=zhoneOltConfigHec, zhoneOltTrafficContainerIndexNext=zhoneOltTrafficContainerIndexNext, zhoneOltStatusPonAlarmLPHY=zhoneOltStatusPonAlarmLPHY, zhoneOltStatusPonAlarmLOS=zhoneOltStatusPonAlarmLOS, zhoneAponOltOnuStatusGroup=zhoneAponOltOnuStatusGroup, zhoneOltTrafficContainerTable=zhoneOltTrafficContainerTable, zhoneOltConfigCpeLimit=zhoneOltConfigCpeLimit, zhoneOltStatusPonAlarmTF=zhoneOltStatusPonAlarmTF, zhoneOltOnuStatusPonAlarmLOA=zhoneOltOnuStatusPonAlarmLOA, zhoneOnuStatusLoopback=zhoneOnuStatusLoopback, zhoneOltConfigLineStatusChangeTrapEnable=zhoneOltConfigLineStatusChangeTrapEnable, zhoneOltConfigCdrActiveHigh=zhoneOltConfigCdrActiveHigh, zhoneOnuStatusTable=zhoneOnuStatusTable, zhoneAponTraps=zhoneAponTraps, zhoneApon=zhoneApon, zhoneOnuStatusAlarmLCD=zhoneOnuStatusAlarmLCD, zhoneOltOnuStatusPonAlarmSD=zhoneOltOnuStatusPonAlarmSD, zhoneOltConfigLcdLimit=zhoneOltConfigLcdLimit, zhoneOltOnuStatusPonAlarmRXINH=zhoneOltOnuStatusPonAlarmRXINH, zhoneAponOltTrafficContainerGroup=zhoneAponOltTrafficContainerGroup, zhoneOltConfigCellScrambling=zhoneOltConfigCellScrambling, zhoneOltLineStatusChangeTrap=zhoneOltLineStatusChangeTrap, zhoneOltOnuStatusTable=zhoneOltOnuStatusTable, zhoneOltOnuConfigPassword=zhoneOltOnuConfigPassword, zhoneOltTrafficContainerRowStatus=zhoneOltTrafficContainerRowStatus, zhoneOltConfigDelimiterSize=zhoneOltConfigDelimiterSize, zhoneOltOnuStatusPonAlarmMEM=zhoneOltOnuStatusPonAlarmMEM, zhoneAponOnuConfigGroup=zhoneAponOnuConfigGroup)
