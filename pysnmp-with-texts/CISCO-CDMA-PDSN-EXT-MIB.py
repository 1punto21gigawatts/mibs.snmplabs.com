#
# PySNMP MIB module CISCO-CDMA-PDSN-EXT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-CDMA-PDSN-EXT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:52:52 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
cCdmaServingPdsnHostname, cCdmaPcfSoRpRegStatsEntry, cCdmaPcfSoPppSetupStatsEntry = mibBuilder.importSymbols("CISCO-CDMA-PDSN-MIB", "cCdmaServingPdsnHostname", "cCdmaPcfSoRpRegStatsEntry", "cCdmaPcfSoPppSetupStatsEntry")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
ZeroBasedCounter32, = mibBuilder.importSymbols("RMON2-MIB", "ZeroBasedCounter32")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
NotificationType, Integer32, IpAddress, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Gauge32, MibIdentifier, Counter32, ObjectIdentity, iso, Unsigned32, Bits, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Integer32", "IpAddress", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Gauge32", "MibIdentifier", "Counter32", "ObjectIdentity", "iso", "Unsigned32", "Bits", "ModuleIdentity")
DisplayString, TextualConvention, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "TruthValue")
ciscoCdmaPdsnExtMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 669))
ciscoCdmaPdsnExtMIB.setRevisions(('2010-07-20 00:00', '2010-06-08 00:00', '2009-09-17 00:00', '2008-08-08 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoCdmaPdsnExtMIB.setRevisionsDescriptions(('+ Added new object ccpCdmaExtRegReqNoCIDAvailable to ccpCdmaExtRPRegReqErrors. + Added new object ccpCdmaExtPcfSoRpRegStatsNoCIDAvailable to ccpCdmaExtPcfSoRpRegStatsEntry. + Added new groups ciscoCdmaExtPdsnPcfSoRpRegGroupSupR01 and ciscoCdmaExtSystemPdsnGroupSupR02. + Added new compliance ciscoCdmaPdsnExtMIBComplianceRev3, which deprecates ciscoCdmaPdsnExtMIBComplianceRev2.', '+ Added new objects ccpCdmaExtRohcEnabled and ccpCdmaExtRohcAuxA10sCount to ccpCdmaExtSystemInfo. + Added new OBJECT IDENTIFIER ccpCdmaExtRohcStats to ccpCdmaExtPerformanceStats. + Added new group ciscoCdmaExtSystemPdsnGroupSupR01. + Added new compliance ciscoCdmaPdsnExtMIBComplianceRev2, which deprecates ciscoCdmaPdsnExtMIBComplianceRev1.', '+ Added following table ccpCdmaExtPcfSoPppSetupStatsTable. + Added ccpCdmaExtCacEnabled to ccpCdmaExtSystemInfo. + Added ciscoCdmaPdsnExtMIBComplianceRev1. + Added ciscoCdmaExtPdsnPcfSoPppGroup , ciscoCdmaExtSystemPdsnCacGroup.', 'Initial version of this MIB module',))
if mibBuilder.loadTexts: ciscoCdmaPdsnExtMIB.setLastUpdated('201007200000Z')
if mibBuilder.loadTexts: ciscoCdmaPdsnExtMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoCdmaPdsnExtMIB.setContactInfo(' Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-pdsn@cisco.com')
if mibBuilder.loadTexts: ciscoCdmaPdsnExtMIB.setDescription('This MIB is an extension to the CISCO-CDMA-PDSN-MIB. A CDMA network supports wireless data communication through 3G CDMA radio access technology and 3G A10/A11 interface. PDSN acts as a foreign agent that establishes, maintains and terminates the link layer to a mobile station. The high level architecture of a third generation CDMA network is shown below: +========+=+ +====+ +=======+ | RAdio |P| | | Data | Home | | Network|C|==A10/A11==|PDSN|===Core=|Network| | (RAN) |F| Interface | |Network | | +========+=+ +====+ (DCN)+=======+ /|\\ Foreign Agent Home Agent | (FA) (HA) | Visited Access | Provider Network | \\|/ +========+ | Mobile | | Station| | (MS) | +========+ The following diagram illustrates protocols usage by the CDMA network elements: MS=== RAN=== PDSN === DCN == Home Network | | A10/A11 | | | +=signaling==+ | | | | | +...L2TP/L2F | tunnelling..+ | | | +======== PPP ========+ | | | | | +..Mobile IP | tunnelling.. + | | | | | | +=================Mobile IP===========+ | | | | +======================data===========+ The CDMA PDSN EXTENSION MIB provides operational information for a CDMA PDSN implementation. The following areas are managed: 1) Global PDSN information. This area contains generic information such as the number of auxiliary connections per session, PDSN IpAddress, system bandwidth etc. 2) PDSN session information. This area contains details about PPP sessions maintained by the PDSN router and other related information such as flows or PCF. 3) Failure notification. This area contains details of notifications sent to network management applications in case of session creation failure. Acronyms and terms: A10/A11 A10 interface is a virtual interface interface used for transporting data between the RAN and the PDSN. A11 interface is the signaling protocol used for maintaining a logical connection between the RAN and PDSN. CAC Call Admission Control CDMA Code Division Multiple Access DCN Data Core Network DSCP Differentiated Services Code Point GRE Generic Routing Encapsulation HRPD High Rate Packet Data MN Mobile Node Mobile IP Protocol enhancements that allow transparent routing of IP datagrams to mobile nodes. Refer to RFC 2002 for more details. MS Mobile Station NVSE Non Vendor Specific Extension PCF Packet Control Function PDSN Packet Data Serving Node PPPoGRE Point-to-Point over Generic Routing Encapsulation PPPoHDLC Point-to-Point over High Level Data Link Control PDSN session A PPP connection between a MS and the PDSN. One session may contain one or multiple PDSN flows. QOS Quality of Service RAN/RN Radio Network ROHC Robust Header Compression. Refer to RFC 3095 for more details. RP Radio Packet RSVP Resource Reservation protocol Simple IP IP routing used by a MS when MoIP services are not needed SO Service Option TFT Traffic Flow Template.')
ciscoCdmaPdsnExtMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 669, 0))
ciscoCdmaPdsnExtMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 669, 1))
ciscoCdmaPdsnExtMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 669, 2))
ccpCdmaExtSystemInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 669, 1, 1))
ccpCdmaExtPerformanceStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 669, 1, 2))
ccpCdmaExtRpErrors = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 669, 1, 3))
ccpCdmaExtNotifObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 669, 1, 4))
ccpCdmaExtRPRegReqErrors = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 669, 1, 3, 1))
ccpCdmaExtRsvpStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 669, 1, 2, 1))
ccpCdmaExtQosStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 669, 1, 2, 2))
ccpCdmaExtBandwidthPolicyStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 669, 1, 2, 3))
ccpCdmaExtRpRegStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 669, 1, 2, 4))
ccpCdmaExtRpSessUpdStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 669, 1, 2, 5))
ccpCdmaExtPcfSoRpRegStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 669, 1, 2, 6))
ccpCdmaExtPcfSoPppSetupStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 669, 1, 2, 7))
ccpCdmaExtRohcStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 669, 1, 2, 8))
ccpCdmaExtTotalBandwidth = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 669, 1, 1, 1), Gauge32()).setUnits('bits/sec').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccpCdmaExtTotalBandwidth.setStatus('current')
if mibBuilder.loadTexts: ccpCdmaExtTotalBandwidth.setDescription('The total bandwidth value configured via the CLI that would be supported by PDSN system.')
ccpCdmaExtAvailableBandwidth = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 669, 1, 1, 2), Gauge32()).setUnits('bits/sec').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccpCdmaExtAvailableBandwidth.setStatus('current')
if mibBuilder.loadTexts: ccpCdmaExtAvailableBandwidth.setDescription('Bandwidth available on the PDSN system for creation of new sessions.')
ccpCdmaExtAllocatedBandwidth = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 669, 1, 1, 3), Gauge32()).setUnits('bits/sec').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccpCdmaExtAllocatedBandwidth.setStatus('current')
if mibBuilder.loadTexts: ccpCdmaExtAllocatedBandwidth.setDescription('Total bandwidth allocated for sessions currently established on the PDSN.')
ccpCdmaExtSessionAuxConnectionsEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 669, 1, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccpCdmaExtSessionAuxConnectionsEnabled.setStatus('current')
if mibBuilder.loadTexts: ccpCdmaExtSessionAuxConnectionsEnabled.setDescription("An indication which determines if the PDSN system supports auxiliary A10 connections for the session. 'true' indicates support of auxiliary A10 connections for the session. 'false' indicates auxiliary A10 connections are not supported for the session.")
ccpCdmaExtSessionMaxAuxConnectionsAllowed = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 669, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccpCdmaExtSessionMaxAuxConnectionsAllowed.setStatus('current')
if mibBuilder.loadTexts: ccpCdmaExtSessionMaxAuxConnectionsAllowed.setDescription('The maximum number of A10 auxiliary connections allowed by the PDSN per session.')
ccpCdmaExtSessionAuxConnectionsTotal = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 669, 1, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccpCdmaExtSessionAuxConnectionsTotal.setStatus('current')
if mibBuilder.loadTexts: ccpCdmaExtSessionAuxConnectionsTotal.setDescription('The total number of A10 auxiliary connections currently established for all the sessions on the PDSN.')
ccpCdmaExtPolicingEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 669, 1, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccpCdmaExtPolicingEnabled.setStatus('current')
if mibBuilder.loadTexts: ccpCdmaExtPolicingEnabled.setDescription("An indication which determines if the PDSN system supports bandwidth policing per session based on maximum authorized aggregate bandwidth value. 'true' indicates support of bandwidth policing for the session. 'false' indicates bandwidth policing is not supported for the session.")
ccpCdmaExtAuxSessionTotal = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 669, 1, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccpCdmaExtAuxSessionTotal.setStatus('current')
if mibBuilder.loadTexts: ccpCdmaExtAuxSessionTotal.setDescription('The total number of sessions with auxiliary connections currently established on PDSN.')
ccpCdmaExtPolicingSessionTotal = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 669, 1, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccpCdmaExtPolicingSessionTotal.setStatus('current')
if mibBuilder.loadTexts: ccpCdmaExtPolicingSessionTotal.setDescription('The total number of sessions with policing enabled currently established on PDSN.')
ccpCdmaExtDscpSession = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 669, 1, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccpCdmaExtDscpSession.setStatus('current')
if mibBuilder.loadTexts: ccpCdmaExtDscpSession.setDescription('The total number of sessions with DSCP remarking enabled currently established on the PDSN.')
ccpCdmaExtLoadHighReachedNotifEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 669, 1, 1, 11), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccpCdmaExtLoadHighReachedNotifEnabled.setStatus('current')
if mibBuilder.loadTexts: ccpCdmaExtLoadHighReachedNotifEnabled.setDescription("'true' indicates cCdmaExtLoadHighReachedNotif notification will be sent out when the maximum load of the system has been reached. 'false' indicates cCdmaExtLoadHighReachedNotif notification will not be sent out when the maximum load of the system has been reached.")
ccpCdmaExtCacEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 669, 1, 1, 12), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccpCdmaExtCacEnabled.setStatus('current')
if mibBuilder.loadTexts: ccpCdmaExtCacEnabled.setDescription("An indication which determines if the PDSN system supports call admission control feature for the session. 'true' indicates call admission control supported for the session. 'false' indicates call admission control not supported for the session.")
ccpCdmaExtRohcEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 669, 1, 1, 13), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccpCdmaExtRohcEnabled.setStatus('current')
if mibBuilder.loadTexts: ccpCdmaExtRohcEnabled.setDescription("An indication which determines if the ROHC is enabled on PDSN system. 'true' indicates ROHC supported for the session. 'false' indicates ROHC not supported for the session.")
ccpCdmaExtRohcAuxA10sCount = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 669, 1, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccpCdmaExtRohcAuxA10sCount.setStatus('current')
if mibBuilder.loadTexts: ccpCdmaExtRohcAuxA10sCount.setDescription('This object indicates total number of A10 auxiliary connections using ROHC currently established for all sessions on PDSN.')
ccpCdmaExtRpReRegNewAuxConnections = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 669, 1, 2, 4, 1), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccpCdmaExtRpReRegNewAuxConnections.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for details about A10/A11(R-P) interface.')
if mibBuilder.loadTexts: ccpCdmaExtRpReRegNewAuxConnections.setStatus('current')
if mibBuilder.loadTexts: ccpCdmaExtRpReRegNewAuxConnections.setDescription('The total number of A11 re-registration messages received at the PDSN to establish new auxiliary A10 connections. This object value is maintained since system was last restarted.')
ccpCdmaExtRpReRegCloseAuxConnections = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 669, 1, 2, 4, 2), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccpCdmaExtRpReRegCloseAuxConnections.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for details about A10/A11(R-P) interface.')
if mibBuilder.loadTexts: ccpCdmaExtRpReRegCloseAuxConnections.setStatus('current')
if mibBuilder.loadTexts: ccpCdmaExtRpReRegCloseAuxConnections.setDescription('The total number of A11 re-registration messages received at PDSN, without the information for exiting A10 connections, thereby indicating the removal of these missing A10 connections at PDSN. A11 re-registration messages received for a HRPD session always contains details of all the currently established auxiliary A10 connections for the session. This object value is maintained since system was last restarted.')
ccpCdmaExtRpReRegRemapFlows = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 669, 1, 2, 4, 4), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccpCdmaExtRpReRegRemapFlows.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for details about A10/A11(R-P) interface.')
if mibBuilder.loadTexts: ccpCdmaExtRpReRegRemapFlows.setStatus('current')
if mibBuilder.loadTexts: ccpCdmaExtRpReRegRemapFlows.setDescription('The total number of A11 registration/re- registration messages received at the PDSN, indicating a change of IP flow association with an A10 connection, for the session. This object value is maintained since system was last restarted.')
ccpCdmaExtRpRegNewAuxConnections = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 669, 1, 2, 4, 5), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccpCdmaExtRpRegNewAuxConnections.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for details about A10/A11(R-P) interface.')
if mibBuilder.loadTexts: ccpCdmaExtRpRegNewAuxConnections.setStatus('current')
if mibBuilder.loadTexts: ccpCdmaExtRpRegNewAuxConnections.setDescription('The total number of A11 registration messages received at the PDSN from PCF to establish new auxiliary A10 connections for the session. This object value is maintained since system was last restarted.')
ccpCdmaExtRpSessionUpdSubQoses = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 669, 1, 2, 5, 1), ZeroBasedCounter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccpCdmaExtRpSessionUpdSubQoses.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for details about A10 session update messages.')
if mibBuilder.loadTexts: ccpCdmaExtRpSessionUpdSubQoses.setStatus('current')
if mibBuilder.loadTexts: ccpCdmaExtRpSessionUpdSubQoses.setDescription('This object indicates the total number of A11 session update messages sent from PDSN to PCF, regarding the addition or modification of subscriber Qos parameters maintained for the session. This object value is maintained since system was last restarted.')
ccpCdmaExtRsvpCreationSuccessTfts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 669, 1, 2, 1, 1), Counter32()).setUnits('passes').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccpCdmaExtRsvpCreationSuccessTfts.setStatus('current')
if mibBuilder.loadTexts: ccpCdmaExtRsvpCreationSuccessTfts.setDescription('This object indicates total number of TFTs that have been created successfully at the PDSN. This object value is maintained since system was last restarted.')
ccpCdmaExtRsvpCreationFailureTfts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 669, 1, 2, 1, 2), Counter32()).setUnits('failures').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccpCdmaExtRsvpCreationFailureTfts.setStatus('current')
if mibBuilder.loadTexts: ccpCdmaExtRsvpCreationFailureTfts.setDescription('This object indicates total number of TFTs that failed to be created at the PDSN. This object value is maintained since system was last restarted.')
ccpCdmaExtRsvpPacketFilterAddFailureTfts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 669, 1, 2, 1, 3), Counter32()).setUnits('failures').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccpCdmaExtRsvpPacketFilterAddFailureTfts.setStatus('current')
if mibBuilder.loadTexts: ccpCdmaExtRsvpPacketFilterAddFailureTfts.setDescription('This object indicates the total number of failures during packet filter addition, to the requested TFT, on the PDSN. This object value is maintained since system was last restarted.')
ccpCdmaExtRsvpPacketFilterUnavailableTfts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 669, 1, 2, 1, 4), Counter32()).setUnits('failures').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccpCdmaExtRsvpPacketFilterUnavailableTfts.setStatus('current')
if mibBuilder.loadTexts: ccpCdmaExtRsvpPacketFilterUnavailableTfts.setDescription('This object indicates total number of failures due to unavailable packet filters during modification/removal of packet filters on the requested TFT. This object value is maintained since system was last restarted.')
ccpCdmaExtRsvpPacketFilterReplaceFailureTfts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 669, 1, 2, 1, 5), Counter32()).setUnits('failures').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccpCdmaExtRsvpPacketFilterReplaceFailureTfts.setStatus('current')
if mibBuilder.loadTexts: ccpCdmaExtRsvpPacketFilterReplaceFailureTfts.setDescription('This object indicates total number of failures while replacing a packet filter on the requested TFT. This object value is maintained since system was last restarted.')
ccpCdmaExtRsvpPacketFilterAddBeforeCreationTfts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 669, 1, 2, 1, 6), Counter32()).setUnits('failures').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccpCdmaExtRsvpPacketFilterAddBeforeCreationTfts.setStatus('current')
if mibBuilder.loadTexts: ccpCdmaExtRsvpPacketFilterAddBeforeCreationTfts.setDescription('This object indicates total number of failures while adding packet filters to non-existing TFT at the PDSN. This object value is maintained since system was last restarted.')
ccpCdmaExtRsvpUnableToParseTfts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 669, 1, 2, 1, 7), Counter32()).setUnits('failures').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccpCdmaExtRsvpUnableToParseTfts.setStatus('current')
if mibBuilder.loadTexts: ccpCdmaExtRsvpUnableToParseTfts.setDescription('This object indicates total number of TFTs that failed to be parsed at the PDSN. This object value is maintained since system was last restarted.')
ccpCdmaExtRsvpPrecedenceContentionTfts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 669, 1, 2, 1, 8), Counter32()).setUnits('failures').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccpCdmaExtRsvpPrecedenceContentionTfts.setStatus('current')
if mibBuilder.loadTexts: ccpCdmaExtRsvpPrecedenceContentionTfts.setDescription('This object indicates total number of failures due to precedence contention while addition of packet filters to the TFT. This object value is maintained since system was last restarted.')
ccpCdmaExtRsvpTreatmentUnsupportedTfts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 669, 1, 2, 1, 9), Counter32()).setUnits('failures').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccpCdmaExtRsvpTreatmentUnsupportedTfts.setStatus('current')
if mibBuilder.loadTexts: ccpCdmaExtRsvpTreatmentUnsupportedTfts.setDescription('This object indicates total number of failures due to TFTs that are received at PDSN with MS flow treatment value. MS flows treatment is not supported on PDSN, hence accounted as unsupported. This object value is maintained since system was last restarted.')
ccpCdmaExtRsvpMaxPacketFiltersReachedTfts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 669, 1, 2, 1, 10), Counter32()).setUnits('failures').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccpCdmaExtRsvpMaxPacketFiltersReachedTfts.setStatus('current')
if mibBuilder.loadTexts: ccpCdmaExtRsvpMaxPacketFiltersReachedTfts.setDescription('This object indicates failures during addition of packet filters to a requested TFT containing 255 packet filters. TFT can store up to 255 packet filters only. This object value is maintained since system was last restarted.')
ccpCdmaExtRsvpUnAuthorizeTfts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 669, 1, 2, 1, 11), Counter32()).setUnits('failures').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccpCdmaExtRsvpUnAuthorizeTfts.setStatus('current')
if mibBuilder.loadTexts: ccpCdmaExtRsvpUnAuthorizeTfts.setDescription('This object indicates total number of failures for TFTs, that are received for non-existing flow IP addresses on the session. This object value is maintained since system was last restarted.')
ccpCdmaExtBandwidthPolicyInstallSuccesses = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 669, 1, 2, 3, 1), Counter32()).setUnits('passes').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccpCdmaExtBandwidthPolicyInstallSuccesses.setStatus('current')
if mibBuilder.loadTexts: ccpCdmaExtBandwidthPolicyInstallSuccesses.setDescription('This object indicates total number successful installations of policing framework at the PDSN for the session. This object value is maintained since system was last restarted.')
ccpCdmaExtBandwidthPolicyInstallFailures = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 669, 1, 2, 3, 2), Counter32()).setUnits('failures').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccpCdmaExtBandwidthPolicyInstallFailures.setStatus('current')
if mibBuilder.loadTexts: ccpCdmaExtBandwidthPolicyInstallFailures.setDescription('This object indicates total number failures during installation of policing framework at the PDSN during session creation. This object value is maintained since system was last restarted.')
ccpCdmaExtBandwidthPolicyRemoves = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 669, 1, 2, 3, 3), Counter32()).setUnits('passes').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccpCdmaExtBandwidthPolicyRemoves.setStatus('current')
if mibBuilder.loadTexts: ccpCdmaExtBandwidthPolicyRemoves.setDescription('This object indicates total number of successful removal of the policing framework at PDSN during session deletion. This object value is maintained since system was last restarted.')
ccpCdmaExtQosSuccesses = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 669, 1, 2, 2, 1), Counter32()).setUnits('passes').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccpCdmaExtQosSuccesses.setStatus('current')
if mibBuilder.loadTexts: ccpCdmaExtQosSuccesses.setDescription('This object indicates total number of subscriber QoS profiles that have been downloaded from AAA and parsed successfully. This object value is maintained since system was last restarted.')
ccpCdmaExtQosFailures = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 669, 1, 2, 2, 2), Counter32()).setUnits('failures').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccpCdmaExtQosFailures.setStatus('current')
if mibBuilder.loadTexts: ccpCdmaExtQosFailures.setDescription('This object indicates total number failures that occurred during parsing of subscriber Qos profiles downloaded from AAA. This object value is maintained since system was last restarted.')
ccpCdmaExtQosDscpRemarkedPkts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 669, 1, 2, 2, 3), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccpCdmaExtQosDscpRemarkedPkts.setStatus('current')
if mibBuilder.loadTexts: ccpCdmaExtQosDscpRemarkedPkts.setDescription("This object indicates total number of packets that have been remarked at the PDSN for the session. Differentiated services markings that the MS applies to packets are based on values contained in subscriber QoS profile. The PDSN may re-mark the packet according to local policy if the type of marking (MS marking) is not authorized by the user's allowed differentiated services marking attribute. This object value is maintained since system was last restarted.")
ccpCdmaExtRohcSuccessCount = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 669, 1, 2, 8, 1), Counter32()).setUnits('passes').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccpCdmaExtRohcSuccessCount.setStatus('current')
if mibBuilder.loadTexts: ccpCdmaExtRohcSuccessCount.setDescription('This object provides a count of the times a ROHC compressor channel was successfully initialized. This object value is maintained since system was last restarted.')
ccpCdmaExtRohcFailuresCount = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 669, 1, 2, 8, 2), Counter32()).setUnits('failures').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccpCdmaExtRohcFailuresCount.setStatus('current')
if mibBuilder.loadTexts: ccpCdmaExtRohcFailuresCount.setDescription('This object provides a count of the times a ROHC compressor channel initialization failed. This object value is maintained since system was last restarted.')
ccpCdmaExtRohcOutIpPkts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 669, 1, 2, 8, 3), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccpCdmaExtRohcOutIpPkts.setStatus('current')
if mibBuilder.loadTexts: ccpCdmaExtRohcOutIpPkts.setDescription('This object indicates total number of IP packets sent after ROHC compression. This object value is maintained since system was last restarted.')
ccpCdmaExtRohcOutIpBytes = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 669, 1, 2, 8, 4), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccpCdmaExtRohcOutIpBytes.setStatus('current')
if mibBuilder.loadTexts: ccpCdmaExtRohcOutIpBytes.setDescription('This object indicates total number of IP bytes sent after ROHC compression. This object value is maintained since system was last restarted.')
ccpCdmaExtRohcDeCompSuccessCount = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 669, 1, 2, 8, 5), Counter32()).setUnits('passes').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccpCdmaExtRohcDeCompSuccessCount.setStatus('current')
if mibBuilder.loadTexts: ccpCdmaExtRohcDeCompSuccessCount.setDescription('This object provides a count of the times a ROHC de-compressor channel was successfully initialized. This object value is maintained since system was last restarted.')
ccpCdmaExtRohcDeCompFailuresCount = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 669, 1, 2, 8, 6), Counter32()).setUnits('failures').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccpCdmaExtRohcDeCompFailuresCount.setStatus('current')
if mibBuilder.loadTexts: ccpCdmaExtRohcDeCompFailuresCount.setDescription('This object provides a count of the times a ROHC de-compressor channel initialization failed. This object value is maintained since system was last restarted.')
ccpCdmaExtRohcDeCompOutIpPkts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 669, 1, 2, 8, 7), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccpCdmaExtRohcDeCompOutIpPkts.setStatus('current')
if mibBuilder.loadTexts: ccpCdmaExtRohcDeCompOutIpPkts.setDescription('This object indicates total number of IP packets sent after ROHC de-compression. This object value is maintained since system was last restarted.')
ccpCdmaExtRohcDeCompOutIpBytes = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 669, 1, 2, 8, 8), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccpCdmaExtRohcDeCompOutIpBytes.setStatus('current')
if mibBuilder.loadTexts: ccpCdmaExtRohcDeCompOutIpBytes.setDescription('This object indicates total number of IP bytes sent after ROHC de-compression. This object value is maintained since system was last restarted.')
ccpCdmaExtRegReqBwUnavailableSess = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 669, 1, 3, 1, 1), ZeroBasedCounter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccpCdmaExtRegReqBwUnavailableSess.setStatus('current')
if mibBuilder.loadTexts: ccpCdmaExtRegReqBwUnavailableSess.setDescription('This object indicates total number of A11 registration messages rejected at the PDSN, as the system has reached its maximum allowed bandwidth. This object value is maintained since system was last restarted.')
ccpCdmaExtRegReqMaxServiceFlows = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 669, 1, 3, 1, 2), ZeroBasedCounter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccpCdmaExtRegReqMaxServiceFlows.setStatus('current')
if mibBuilder.loadTexts: ccpCdmaExtRegReqMaxServiceFlows.setDescription('This object indicates total number of A11 registration messages rejected at the PDSN, based on the ccpCdmaExtSessionMaxAuxConnectionsAllowed object. This object value is maintained since system was last restarted.')
ccpCdmaExtRegReqUnSupportedSOs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 669, 1, 3, 1, 3), ZeroBasedCounter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccpCdmaExtRegReqUnSupportedSOs.setStatus('current')
if mibBuilder.loadTexts: ccpCdmaExtRegReqUnSupportedSOs.setDescription('This object indicates total number of A11 registration messages rejected at the PDSN, because of unsupported service option value. This object value is maintained since system was last restarted.')
ccpCdmaExtRegReqNonExistA10s = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 669, 1, 3, 1, 4), ZeroBasedCounter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccpCdmaExtRegReqNonExistA10s.setStatus('current')
if mibBuilder.loadTexts: ccpCdmaExtRegReqNonExistA10s.setDescription('This object indicates total number of A11 registration messages rejected at the PDSN, as it contains a IP flow mapping to non existent A10. This object value is maintained since system was last restarted.')
ccpCdmaExtRegReqNoCIDAvailable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 669, 1, 3, 1, 5), ZeroBasedCounter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccpCdmaExtRegReqNoCIDAvailable.setStatus('current')
if mibBuilder.loadTexts: ccpCdmaExtRegReqNoCIDAvailable.setDescription('This object indicates total number of A11 registration messages rejected at the PDSN, due to no CID available for robust header compression. This object value is maintained since system was last restarted.')
ccpCdmaExtPcfSoRpRegStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 669, 1, 2, 6, 1), )
if mibBuilder.loadTexts: ccpCdmaExtPcfSoRpRegStatsTable.setStatus('current')
if mibBuilder.loadTexts: ccpCdmaExtPcfSoRpRegStatsTable.setDescription('This table contains additional attributes to the PCF profiles that exists ccpCdmaPcfSoRpRegStatsTable in CISCO-CDMA-PDSN-MIB.')
ccpCdmaExtPcfSoRpRegStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 669, 1, 2, 6, 1, 1), )
cCdmaPcfSoRpRegStatsEntry.registerAugmentions(("CISCO-CDMA-PDSN-EXT-MIB", "ccpCdmaExtPcfSoRpRegStatsEntry"))
ccpCdmaExtPcfSoRpRegStatsEntry.setIndexNames(*cCdmaPcfSoRpRegStatsEntry.getIndexNames())
if mibBuilder.loadTexts: ccpCdmaExtPcfSoRpRegStatsEntry.setStatus('current')
if mibBuilder.loadTexts: ccpCdmaExtPcfSoRpRegStatsEntry.setDescription('A conceptual row in the Extention PCF table.')
ccpCdmaExtPcfSoStatsTotalAuxConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 669, 1, 2, 6, 1, 1, 1), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccpCdmaExtPcfSoStatsTotalAuxConnections.setStatus('current')
if mibBuilder.loadTexts: ccpCdmaExtPcfSoStatsTotalAuxConnections.setDescription('The total number of A10 auxiliary connections currently established with the PCF.')
ccpCdmaExtPcfSoRpRegStatsNewAuxConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 669, 1, 2, 6, 1, 1, 2), ZeroBasedCounter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccpCdmaExtPcfSoRpRegStatsNewAuxConnections.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for details about A10/A11(R-P) interface.')
if mibBuilder.loadTexts: ccpCdmaExtPcfSoRpRegStatsNewAuxConnections.setStatus('current')
if mibBuilder.loadTexts: ccpCdmaExtPcfSoRpRegStatsNewAuxConnections.setDescription('The total number of A11 registration messages received per PCF at the PDSN to establish new auxiliary A10 connections. This object value is maintained since system was last restarted.')
ccpCdmaExtPcfSoRpReRegStatsNewAuxConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 669, 1, 2, 6, 1, 1, 3), ZeroBasedCounter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccpCdmaExtPcfSoRpReRegStatsNewAuxConnections.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for details about A10/A11(R-P) interface.')
if mibBuilder.loadTexts: ccpCdmaExtPcfSoRpReRegStatsNewAuxConnections.setStatus('current')
if mibBuilder.loadTexts: ccpCdmaExtPcfSoRpReRegStatsNewAuxConnections.setDescription('The total number of A11 re-registration messages received per PCF at the PDSN to establish new auxiliary A10 connections. This object value is maintained since system was last restarted.')
ccpCdmaExtPcfSoRpReRegStatsCloseAuxConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 669, 1, 2, 6, 1, 1, 4), ZeroBasedCounter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccpCdmaExtPcfSoRpReRegStatsCloseAuxConnections.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for details about A10/A11(R-P) interface.')
if mibBuilder.loadTexts: ccpCdmaExtPcfSoRpReRegStatsCloseAuxConnections.setStatus('current')
if mibBuilder.loadTexts: ccpCdmaExtPcfSoRpReRegStatsCloseAuxConnections.setDescription('The total number of A11 re-registration messages received per PCF at PDSN, without the information for existing A10 connections, thereby indicating the removal of these missing A10 connections at PDSN. A11 re-registration messages received for a HRPD session always contains details of all the currently established auxiliary A10 connections for the session. This object value is maintained since system was last restarted.')
ccpCdmaExtPcfSoRpReRegStatsRemapFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 669, 1, 2, 6, 1, 1, 5), ZeroBasedCounter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccpCdmaExtPcfSoRpReRegStatsRemapFlows.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for details about A10/A11(R-P) interface.')
if mibBuilder.loadTexts: ccpCdmaExtPcfSoRpReRegStatsRemapFlows.setStatus('current')
if mibBuilder.loadTexts: ccpCdmaExtPcfSoRpReRegStatsRemapFlows.setDescription('The total number of A11 registration/re- registration messages received per PCF at PDSN, indicating a change of IP flow association with an A10 connection, for the session This object value is maintained since system was last restarted.')
ccpCdmaExtPcfSoRpRegStatsBwUnavailableSess = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 669, 1, 2, 6, 1, 1, 6), ZeroBasedCounter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccpCdmaExtPcfSoRpRegStatsBwUnavailableSess.setStatus('current')
if mibBuilder.loadTexts: ccpCdmaExtPcfSoRpRegStatsBwUnavailableSess.setDescription('This object indicates total number of A11 registration messages rejected per PCF at PDSN, as the system has reached its maximum allowed bandwidth This object value is maintained since system was last restarted.')
ccpCdmaExtPcfSoRpRegStatsSessionUpdSubQoses = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 669, 1, 2, 6, 1, 1, 7), ZeroBasedCounter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccpCdmaExtPcfSoRpRegStatsSessionUpdSubQoses.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for details about A10 session update messages.')
if mibBuilder.loadTexts: ccpCdmaExtPcfSoRpRegStatsSessionUpdSubQoses.setStatus('current')
if mibBuilder.loadTexts: ccpCdmaExtPcfSoRpRegStatsSessionUpdSubQoses.setDescription('This object indicates the total number of A11 session update messages sent from PDSN to per PCF, regarding the addition or modification of subscriber Qos parameters maintained for the session. This object value is maintained since system was last restarted.')
ccpCdmaExtPcfSoRpRegStatsMaxServiceFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 669, 1, 2, 6, 1, 1, 8), ZeroBasedCounter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccpCdmaExtPcfSoRpRegStatsMaxServiceFlows.setStatus('current')
if mibBuilder.loadTexts: ccpCdmaExtPcfSoRpRegStatsMaxServiceFlows.setDescription('This object indicates total number of A11 registration messages rejected per PCF at PDSN, based on the ccpCdmaExtSessionMaxAuxConnectionsAllowed object. This object value is maintained since system was last restarted.')
ccpCdmaExtPcfSoRpRegStatsUnsupportedSOs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 669, 1, 2, 6, 1, 1, 9), ZeroBasedCounter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccpCdmaExtPcfSoRpRegStatsUnsupportedSOs.setStatus('current')
if mibBuilder.loadTexts: ccpCdmaExtPcfSoRpRegStatsUnsupportedSOs.setDescription('This object indicates total number of A11 registration messages rejected per PCF at PDSN, because of unsupported service option value. This object value is maintained since system was last restarted.')
ccpCdmaExtPcfSoRpRegStatsNonExistA10s = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 669, 1, 2, 6, 1, 1, 10), ZeroBasedCounter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccpCdmaExtPcfSoRpRegStatsNonExistA10s.setStatus('current')
if mibBuilder.loadTexts: ccpCdmaExtPcfSoRpRegStatsNonExistA10s.setDescription('This object indicates total number of A11 registration messages rejected per PCF at PDSN, as it contains a IP flow mapping to non existent A10. This object value is maintained since system was last restarted.')
ccpCdmaExtPcfSoRpRegStatsNoCIDAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 669, 1, 2, 6, 1, 1, 11), ZeroBasedCounter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccpCdmaExtPcfSoRpRegStatsNoCIDAvailable.setStatus('current')
if mibBuilder.loadTexts: ccpCdmaExtPcfSoRpRegStatsNoCIDAvailable.setDescription('This object indicates total number of A11 registration messages rejected per PCF at PDSN, due to no CID available for robust header compression. This object value is maintained since system was last restarted.')
ccpCdmaExtPcfSoPppSetupStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 669, 1, 2, 7, 1), )
if mibBuilder.loadTexts: ccpCdmaExtPcfSoPppSetupStatsTable.setStatus('current')
if mibBuilder.loadTexts: ccpCdmaExtPcfSoPppSetupStatsTable.setDescription('This table contains additional attributes to the PCF profiles that present in cCdmaPcfSoPppSetupStatsTable in CISCO-CDMA-PDSN-MIB.')
ccpCdmaExtPcfSoPppSetupStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 669, 1, 2, 7, 1, 1), )
cCdmaPcfSoPppSetupStatsEntry.registerAugmentions(("CISCO-CDMA-PDSN-EXT-MIB", "ccpCdmaExtPcfSoPppSetupStatsEntry"))
ccpCdmaExtPcfSoPppSetupStatsEntry.setIndexNames(*cCdmaPcfSoPppSetupStatsEntry.getIndexNames())
if mibBuilder.loadTexts: ccpCdmaExtPcfSoPppSetupStatsEntry.setStatus('current')
if mibBuilder.loadTexts: ccpCdmaExtPcfSoPppSetupStatsEntry.setDescription('An entry in ccpCdmaExtPcfSoPppSetupStatsTable.Each entry contains PPP negotiation statistics information on IPCP,LCP etc.')
ccpCdmaExtPcfSoPppPreLCPPdsnA10Rls = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 669, 1, 2, 7, 1, 1, 1), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccpCdmaExtPcfSoPppPreLCPPdsnA10Rls.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A11/A10 interface and PPP related RFC 1661, 1662, 1332, 1570, 1979, 1962, 1974, 2509, 2716, 2284, 2118, 1994')
if mibBuilder.loadTexts: ccpCdmaExtPcfSoPppPreLCPPdsnA10Rls.setStatus('current')
if mibBuilder.loadTexts: ccpCdmaExtPcfSoPppPreLCPPdsnA10Rls.setDescription('This object indicates total number of A10 connections released per PCF by PDSN before the PPP enters LCP negotiation phase.')
ccpCdmaExtPcfSoPppPreLCPPcfA10Rls = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 669, 1, 2, 7, 1, 1, 2), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccpCdmaExtPcfSoPppPreLCPPcfA10Rls.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A11/A10 interface and PPP related RFC 1661, 1662, 1332, 1570, 1979, 1962, 1974, 2509, 2716, 2284, 2118, 1994')
if mibBuilder.loadTexts: ccpCdmaExtPcfSoPppPreLCPPcfA10Rls.setStatus('current')
if mibBuilder.loadTexts: ccpCdmaExtPcfSoPppPreLCPPcfA10Rls.setDescription('This object indicates total number of A10 connections released by PCF before the PPP enters LCP negotiation phase.')
ccpCdmaExtPcfSoPppLcpOptionIssueFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 669, 1, 2, 7, 1, 1, 3), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccpCdmaExtPcfSoPppLcpOptionIssueFailures.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A11/A10 interface and PPP related RFC 1661, 1662, 1332, 1570, 1979, 1962, 1974, 2509, 2716, 2284, 2118, 1994')
if mibBuilder.loadTexts: ccpCdmaExtPcfSoPppLcpOptionIssueFailures.setStatus('current')
if mibBuilder.loadTexts: ccpCdmaExtPcfSoPppLcpOptionIssueFailures.setDescription('This object indicates total number of PPP connection requests terminated per PCF due to LCP options negotiation failure such as call back user not negotiating the call back option.')
ccpCdmaExtPcfSoPppLcpFailuresMaxRetrans = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 669, 1, 2, 7, 1, 1, 4), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccpCdmaExtPcfSoPppLcpFailuresMaxRetrans.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A11/A10 interface and PPP related RFC 1661, 1662, 1332, 1570, 1979, 1962, 1974, 2509, 2716, 2284, 2118, 1994')
if mibBuilder.loadTexts: ccpCdmaExtPcfSoPppLcpFailuresMaxRetrans.setStatus('current')
if mibBuilder.loadTexts: ccpCdmaExtPcfSoPppLcpFailuresMaxRetrans.setDescription('This object indicates total number of PPP connection requests failed per PCF at LCP stage after max number of retransmissions.')
ccpCdmaExtPcfSoPppLcpFailuresUnknown = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 669, 1, 2, 7, 1, 1, 5), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccpCdmaExtPcfSoPppLcpFailuresUnknown.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A11/A10 interface and PPP related RFC 1661, 1662, 1332, 1570, 1979, 1962, 1974, 2509, 2716, 2284, 2118, 1994')
if mibBuilder.loadTexts: ccpCdmaExtPcfSoPppLcpFailuresUnknown.setStatus('current')
if mibBuilder.loadTexts: ccpCdmaExtPcfSoPppLcpFailuresUnknown.setDescription('This object indicates total number of PPP connection requests failed per PCF at LCP stage due to an unknown reason.')
ccpCdmaExtPcfSoPppLcpPhaseRxTermreqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 669, 1, 2, 7, 1, 1, 6), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccpCdmaExtPcfSoPppLcpPhaseRxTermreqs.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A11/A10 interface and PPP related RFC 1661, 1662, 1332, 1570, 1979, 1962, 1974, 2509, 2716, 2284, 2118, 1994')
if mibBuilder.loadTexts: ccpCdmaExtPcfSoPppLcpPhaseRxTermreqs.setStatus('current')
if mibBuilder.loadTexts: ccpCdmaExtPcfSoPppLcpPhaseRxTermreqs.setDescription('This object indicates total number of PPP negotiations terminated per PCF due to PPP receiving TERM request during the LCP phase.')
ccpCdmaExtPcfSoPppLcpPcfA10Rls = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 669, 1, 2, 7, 1, 1, 7), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccpCdmaExtPcfSoPppLcpPcfA10Rls.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A11/A10 interface and PPP related RFC 1661, 1662, 1332, 1570, 1979, 1962, 1974, 2509, 2716, 2284, 2118, 1994')
if mibBuilder.loadTexts: ccpCdmaExtPcfSoPppLcpPcfA10Rls.setStatus('current')
if mibBuilder.loadTexts: ccpCdmaExtPcfSoPppLcpPcfA10Rls.setDescription('This object indicates total number of A10 connections released by PCF during the LCP negotiation phase.')
ccpCdmaExtPcfSoPppAuthFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 669, 1, 2, 7, 1, 1, 8), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccpCdmaExtPcfSoPppAuthFailures.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A11/A10 interface and PPP related RFC 1661, 1662, 1332, 1570, 1979, 1962, 1974, 2509, 2716, 2284, 2118, 1994')
if mibBuilder.loadTexts: ccpCdmaExtPcfSoPppAuthFailures.setStatus('current')
if mibBuilder.loadTexts: ccpCdmaExtPcfSoPppAuthFailures.setDescription('This object indicates total number of PPP Setup connections failed per PCF at authentication stage.')
ccpCdmaExtPcfSoPppAuthAAATimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 669, 1, 2, 7, 1, 1, 9), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccpCdmaExtPcfSoPppAuthAAATimeouts.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A11/A10 interface and PPP related RFC 1661, 1662, 1332, 1570, 1979, 1962, 1974, 2509, 2716, 2284, 2118, 1994')
if mibBuilder.loadTexts: ccpCdmaExtPcfSoPppAuthAAATimeouts.setStatus('current')
if mibBuilder.loadTexts: ccpCdmaExtPcfSoPppAuthAAATimeouts.setDescription('This object indicates total number of PPP authentication failures per PCF, due to AAA timeouts.')
ccpCdmaExtPcfSoPppAuthFailuresUnknown = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 669, 1, 2, 7, 1, 1, 10), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccpCdmaExtPcfSoPppAuthFailuresUnknown.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A11/A10 interface and PPP related RFC 1661, 1662, 1332, 1570, 1979, 1962, 1974, 2509, 2716, 2284, 2118, 1994')
if mibBuilder.loadTexts: ccpCdmaExtPcfSoPppAuthFailuresUnknown.setStatus('current')
if mibBuilder.loadTexts: ccpCdmaExtPcfSoPppAuthFailuresUnknown.setDescription('This object indicates total number of PPP connection Per PCF requests, that failed at authentication stage due to an unknown reason.')
ccpCdmaExtPcfSoPppAuthMaxRetransFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 669, 1, 2, 7, 1, 1, 11), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccpCdmaExtPcfSoPppAuthMaxRetransFailures.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A11/A10 interface and PPP related RFC 1661, 1662, 1332, 1570, 1979, 1962, 1974, 2509, 2716, 2284, 2118, 1994')
if mibBuilder.loadTexts: ccpCdmaExtPcfSoPppAuthMaxRetransFailures.setStatus('current')
if mibBuilder.loadTexts: ccpCdmaExtPcfSoPppAuthMaxRetransFailures.setDescription('This object indicates total number of PPP connection per PCF requests, that failed at authentication stage after max number of retransmissions.')
ccpCdmaExtPcfSoPppAuthPhaseRxTermreqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 669, 1, 2, 7, 1, 1, 12), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccpCdmaExtPcfSoPppAuthPhaseRxTermreqs.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A11/A10 interface and PPP related RFC 1661, 1662, 1332, 1570, 1979, 1962, 1974, 2509, 2716, 2284, 2118, 1994')
if mibBuilder.loadTexts: ccpCdmaExtPcfSoPppAuthPhaseRxTermreqs.setStatus('current')
if mibBuilder.loadTexts: ccpCdmaExtPcfSoPppAuthPhaseRxTermreqs.setDescription('This object indicates total number of PPP negotiations terminated per PCF due to PPP receiving TERM request during the authentication phase.')
ccpCdmaExtPcfSoPppAuthPcfA10Rls = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 669, 1, 2, 7, 1, 1, 13), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccpCdmaExtPcfSoPppAuthPcfA10Rls.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A11/A10 interface and PPP related RFC 1661, 1662, 1332, 1570, 1979, 1962, 1974, 2509, 2716, 2284, 2118, 1994')
if mibBuilder.loadTexts: ccpCdmaExtPcfSoPppAuthPcfA10Rls.setStatus('current')
if mibBuilder.loadTexts: ccpCdmaExtPcfSoPppAuthPcfA10Rls.setDescription('This object indicates total number of A10 connections released by PCF during the PPP authentication phase.')
ccpCdmaExtPcfSoPppIpcpOptionIssueFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 669, 1, 2, 7, 1, 1, 14), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccpCdmaExtPcfSoPppIpcpOptionIssueFailures.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A11/A10 interface and PPP related RFC 1661, 1662, 1332, 1570, 1979, 1962, 1974, 2509, 2716, 2284, 2118, 1994')
if mibBuilder.loadTexts: ccpCdmaExtPcfSoPppIpcpOptionIssueFailures.setStatus('current')
if mibBuilder.loadTexts: ccpCdmaExtPcfSoPppIpcpOptionIssueFailures.setDescription('This object indicates total number of PPP connections terminated per PCF due to IPCP options negotiation failure such as ip address negotiation.')
ccpCdmaExtPcfSoPppIpcpFailuresMaxRetrans = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 669, 1, 2, 7, 1, 1, 15), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccpCdmaExtPcfSoPppIpcpFailuresMaxRetrans.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A11/A10 interface and PPP related RFC 1661, 1662, 1332, 1570, 1979, 1962, 1974, 2509, 2716, 2284, 2118, 1994')
if mibBuilder.loadTexts: ccpCdmaExtPcfSoPppIpcpFailuresMaxRetrans.setStatus('current')
if mibBuilder.loadTexts: ccpCdmaExtPcfSoPppIpcpFailuresMaxRetrans.setDescription('This object indicates total number of PPP connection requests failed per PCF at IPCP stage after max number of retransmissions.')
ccpCdmaExtPcfSoPppIpcpFailuresUnknown = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 669, 1, 2, 7, 1, 1, 16), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccpCdmaExtPcfSoPppIpcpFailuresUnknown.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A11/A10 interface and PPP related RFC 1661, 1662, 1332, 1570, 1979, 1962, 1974, 2509, 2716, 2284, 2118, 1994')
if mibBuilder.loadTexts: ccpCdmaExtPcfSoPppIpcpFailuresUnknown.setStatus('current')
if mibBuilder.loadTexts: ccpCdmaExtPcfSoPppIpcpFailuresUnknown.setDescription('This object indicates total number of PPP connection requests failed per PCF at IPCP stage due to an unknown reason.')
ccpCdmaExtPcfSoPppIpcpPhaseRxTermreqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 669, 1, 2, 7, 1, 1, 17), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccpCdmaExtPcfSoPppIpcpPhaseRxTermreqs.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A11/A10 interface and PPP related RFC 1661, 1662, 1332, 1570, 1979, 1962, 1974, 2509, 2716, 2284, 2118, 1994')
if mibBuilder.loadTexts: ccpCdmaExtPcfSoPppIpcpPhaseRxTermreqs.setStatus('current')
if mibBuilder.loadTexts: ccpCdmaExtPcfSoPppIpcpPhaseRxTermreqs.setDescription('This object indicates total number of PPP negotiations terminated per PCF due to PPP receiving TERM request during the IPCP phase.')
ccpCdmaExtPcfSoPppIpcpPcfA10Rls = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 669, 1, 2, 7, 1, 1, 18), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccpCdmaExtPcfSoPppIpcpPcfA10Rls.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A11/A10 interface and PPP related RFC 1661, 1662, 1332, 1570, 1979, 1962, 1974, 2509, 2716, 2284, 2118, 1994')
if mibBuilder.loadTexts: ccpCdmaExtPcfSoPppIpcpPcfA10Rls.setStatus('current')
if mibBuilder.loadTexts: ccpCdmaExtPcfSoPppIpcpPcfA10Rls.setDescription('This object indicates total number of A10 connections released by PCF during the IPCP negotiation phase.')
ccpCdmaExtPcfSoPppIpcpIpResourceFail = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 669, 1, 2, 7, 1, 1, 19), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccpCdmaExtPcfSoPppIpcpIpResourceFail.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A11/A10 interface and PPP related RFC 1661, 1662, 1332, 1570, 1979, 1962, 1974, 2509, 2716, 2284, 2118, 1994')
if mibBuilder.loadTexts: ccpCdmaExtPcfSoPppIpcpIpResourceFail.setStatus('current')
if mibBuilder.loadTexts: ccpCdmaExtPcfSoPppIpcpIpResourceFail.setDescription('This object indicates total number of PPP negotiations terminated per PCF due to IP address exhaustion in the IP pool.')
ccpCdmaExtPcfSoPppRenegTotalReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 669, 1, 2, 7, 1, 1, 20), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccpCdmaExtPcfSoPppRenegTotalReqs.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A11/A10 interface and PPP related RFC 1661, 1662, 1332, 1570, 1979, 1962, 1974, 2509, 2716, 2284, 2118, 1994')
if mibBuilder.loadTexts: ccpCdmaExtPcfSoPppRenegTotalReqs.setStatus('current')
if mibBuilder.loadTexts: ccpCdmaExtPcfSoPppRenegTotalReqs.setDescription('This object indicates total number of PPP connections renegotiated per PCF by either PDSN or mobile node.')
ccpCdmaExtPcfSoPppRenegByPdsnReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 669, 1, 2, 7, 1, 1, 21), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccpCdmaExtPcfSoPppRenegByPdsnReqs.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A11/A10 interface and PPP related RFC 1661, 1662, 1332, 1570, 1979, 1962, 1974, 2509, 2716, 2284, 2118, 1994')
if mibBuilder.loadTexts: ccpCdmaExtPcfSoPppRenegByPdsnReqs.setStatus('current')
if mibBuilder.loadTexts: ccpCdmaExtPcfSoPppRenegByPdsnReqs.setDescription('This object indicates total number of PPP connections renegotiation requests initiated per PCF by PDSN.')
ccpCdmaExtPcfSoPppRenegByMobileReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 669, 1, 2, 7, 1, 1, 22), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccpCdmaExtPcfSoPppRenegByMobileReqs.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A11/A10 interface and PPP related RFC 1661, 1662, 1332, 1570, 1979, 1962, 1974, 2509, 2716, 2284, 2118, 1994')
if mibBuilder.loadTexts: ccpCdmaExtPcfSoPppRenegByMobileReqs.setStatus('current')
if mibBuilder.loadTexts: ccpCdmaExtPcfSoPppRenegByMobileReqs.setDescription('This object indicates total number of PPP connections renegotiation requests initiated per PCF by mobile node.')
ccpCdmaExtPcfSoPppRenegSuccesses = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 669, 1, 2, 7, 1, 1, 23), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccpCdmaExtPcfSoPppRenegSuccesses.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A11/A10 interface and PPP related RFC 1661, 1662, 1332, 1570, 1979, 1962, 1974, 2509, 2716, 2284, 2118, 1994')
if mibBuilder.loadTexts: ccpCdmaExtPcfSoPppRenegSuccesses.setStatus('current')
if mibBuilder.loadTexts: ccpCdmaExtPcfSoPppRenegSuccesses.setDescription('This object indicates total number of PPP re-negotiations per Pcf that have been successfully brought to active state.')
ccpCdmaExtPcfSoPppRenegFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 669, 1, 2, 7, 1, 1, 24), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccpCdmaExtPcfSoPppRenegFailures.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A11/A10 interface and PPP related RFC 1661, 1662, 1332, 1570, 1979, 1962, 1974, 2509, 2716, 2284, 2118, 1994')
if mibBuilder.loadTexts: ccpCdmaExtPcfSoPppRenegFailures.setStatus('current')
if mibBuilder.loadTexts: ccpCdmaExtPcfSoPppRenegFailures.setDescription('This object indicates total number of PPP re-negotiations failed per PCF at PDSN.')
ccpCdmaExtPcfSoPppRenegConnectionsAborted = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 669, 1, 2, 7, 1, 1, 25), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccpCdmaExtPcfSoPppRenegConnectionsAborted.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A11/A10 interface and PPP related RFC 1661, 1662, 1332, 1570, 1979, 1962, 1974, 2509, 2716, 2284, 2118, 1994')
if mibBuilder.loadTexts: ccpCdmaExtPcfSoPppRenegConnectionsAborted.setStatus('current')
if mibBuilder.loadTexts: ccpCdmaExtPcfSoPppRenegConnectionsAborted.setDescription('This object indicates total number of PPP re-negotiations terminated per PCF prematurely due to reasons such as MN power off etc.')
ccpCdmaExtPcfSoPppRenegAddrMismatchReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 669, 1, 2, 7, 1, 1, 26), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccpCdmaExtPcfSoPppRenegAddrMismatchReqs.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A11/A10 interface and PPP related RFC 1661, 1662, 1332, 1570, 1979, 1962, 1974, 2509, 2716, 2284, 2118, 1994')
if mibBuilder.loadTexts: ccpCdmaExtPcfSoPppRenegAddrMismatchReqs.setStatus('current')
if mibBuilder.loadTexts: ccpCdmaExtPcfSoPppRenegAddrMismatchReqs.setDescription('This object indicates total number of PPP connections renegotiated per PCF due to ip address mismatch.')
ccpCdmaExtPcfSoPppRenegAccessNwIdChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 669, 1, 2, 7, 1, 1, 27), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccpCdmaExtPcfSoPppRenegAccessNwIdChanges.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A11/A10 interface and PPP related RFC 1661, 1662, 1332, 1570, 1979, 1962, 1974, 2509, 2716, 2284, 2118, 1994')
if mibBuilder.loadTexts: ccpCdmaExtPcfSoPppRenegAccessNwIdChanges.setStatus('current')
if mibBuilder.loadTexts: ccpCdmaExtPcfSoPppRenegAccessNwIdChanges.setDescription('This object indicates total number of PPP connections renegotiated per PCF due to access-network id(anid) change during session handoff.')
ccpCdmaExtPcfSoPppRenegGreChangeReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 669, 1, 2, 7, 1, 1, 28), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccpCdmaExtPcfSoPppRenegGreChangeReqs.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A11/A10 interface and PPP related RFC 1661, 1662, 1332, 1570, 1979, 1962, 1974, 2509, 2716, 2284, 2118, 1994')
if mibBuilder.loadTexts: ccpCdmaExtPcfSoPppRenegGreChangeReqs.setStatus('current')
if mibBuilder.loadTexts: ccpCdmaExtPcfSoPppRenegGreChangeReqs.setDescription('This object indicates total number of PPP connections renegotiated per PCF due to GRE key change requests received from MN.')
ccpCdmaExtPcfSoPppRenegOtherReasonReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 669, 1, 2, 7, 1, 1, 29), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccpCdmaExtPcfSoPppRenegOtherReasonReqs.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A11/A10 interface and PPP related RFC 1661, 1662, 1332, 1570, 1979, 1962, 1974, 2509, 2661, 2716, 2284, 2118, 1994')
if mibBuilder.loadTexts: ccpCdmaExtPcfSoPppRenegOtherReasonReqs.setStatus('current')
if mibBuilder.loadTexts: ccpCdmaExtPcfSoPppRenegOtherReasonReqs.setDescription('This object indicates total number of PPP connections renegotiated per PCF due to reasons other than IP address mismatch.')
ccpCdmaExtNotifReason = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 669, 1, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("bandwidth", 1), ("cputhreshold", 2), ("procthreshold", 3), ("iomemthreshold", 4)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ccpCdmaExtNotifReason.setStatus('current')
if mibBuilder.loadTexts: ccpCdmaExtNotifReason.setDescription("This object indicates the notification causes for the maximum load notification generated by the PDSN. The notification causes for the maximum load notification are as follows : ` 'bandwidth' - Allowed bandwidth limit reached 'cputhreshold' - Allowed CPU threshold limit reached 'procthreshold' - Allowed process memory limit reached 'iomemthreshold' - Allowed i/o memory limit reached.")
ccpCdmaExtNotifReasonCurrentValue = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 669, 1, 4, 4), Gauge32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ccpCdmaExtNotifReasonCurrentValue.setStatus('current')
if mibBuilder.loadTexts: ccpCdmaExtNotifReasonCurrentValue.setDescription('This object indicates current value of ccpCdmaExtNotifReason.')
ciscoCdmaExtLoadLowReachedNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 669, 0, 1)).setObjects(("CISCO-CDMA-PDSN-MIB", "cCdmaServingPdsnHostname"), ("CISCO-CDMA-PDSN-EXT-MIB", "ccpCdmaExtNotifReason"), ("CISCO-CDMA-PDSN-EXT-MIB", "ccpCdmaExtNotifReasonCurrentValue"))
if mibBuilder.loadTexts: ciscoCdmaExtLoadLowReachedNotif.setStatus('current')
if mibBuilder.loadTexts: ciscoCdmaExtLoadLowReachedNotif.setDescription('This notification indicates PDSN has reached the ninety percent of the configured load after generating the ccpCdmaExtLoadHighReachedNotif notification. In this state new session request will be accepted.')
ciscoCdmaExtLoadHighReachedNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 669, 0, 2)).setObjects(("CISCO-CDMA-PDSN-MIB", "cCdmaServingPdsnHostname"), ("CISCO-CDMA-PDSN-EXT-MIB", "ccpCdmaExtNotifReason"), ("CISCO-CDMA-PDSN-EXT-MIB", "ccpCdmaExtNotifReasonCurrentValue"))
if mibBuilder.loadTexts: ciscoCdmaExtLoadHighReachedNotif.setStatus('current')
if mibBuilder.loadTexts: ciscoCdmaExtLoadHighReachedNotif.setDescription('A notification of this type is generated by PDSN to indicated that PDSN has exceeds the maximum load configured. Maximum load on PDSN is based on the any one of following parameters bandwidth, cputhreshold, procmemthreshold and iomemthreshold The notification reason object indicates the parameter that has exceeds the configured load.')
ciscoCdmaPdsnExtMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 669, 2, 1))
ciscoCdmaPdsnExtMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 669, 2, 2))
ciscoCdmaPdsnExtMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 669, 2, 1, 1)).setObjects(("CISCO-CDMA-PDSN-EXT-MIB", "ciscoCdmaExtSystemPdsnGroup"), ("CISCO-CDMA-PDSN-EXT-MIB", "ciscoCdmaExtPdsnPcfSoRpRegGroup"), ("CISCO-CDMA-PDSN-EXT-MIB", "ciscoCdmaExtNotifPdsnGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoCdmaPdsnExtMIBCompliance = ciscoCdmaPdsnExtMIBCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoCdmaPdsnExtMIBCompliance.setDescription('The compliance statement for entities which implement the CDMA PDSN Management Extension MIB.')
ciscoCdmaPdsnExtMIBComplianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 669, 2, 1, 2)).setObjects(("CISCO-CDMA-PDSN-EXT-MIB", "ciscoCdmaExtSystemPdsnGroup"), ("CISCO-CDMA-PDSN-EXT-MIB", "ciscoCdmaExtPdsnPcfSoRpRegGroup"), ("CISCO-CDMA-PDSN-EXT-MIB", "ciscoCdmaExtPdsnPcfSoPppGroup"), ("CISCO-CDMA-PDSN-EXT-MIB", "ciscoCdmaExtSystemPdsnCacGroup"), ("CISCO-CDMA-PDSN-EXT-MIB", "ciscoCdmaExtNotifPdsnGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoCdmaPdsnExtMIBComplianceRev1 = ciscoCdmaPdsnExtMIBComplianceRev1.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoCdmaPdsnExtMIBComplianceRev1.setDescription('The compliance statement for entities which implement the CDMA PDSN Management Extension MIB.')
ciscoCdmaPdsnExtMIBComplianceRev2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 669, 2, 1, 3)).setObjects(("CISCO-CDMA-PDSN-EXT-MIB", "ciscoCdmaExtSystemPdsnGroup"), ("CISCO-CDMA-PDSN-EXT-MIB", "ciscoCdmaExtPdsnPcfSoRpRegGroup"), ("CISCO-CDMA-PDSN-EXT-MIB", "ciscoCdmaExtPdsnPcfSoPppGroup"), ("CISCO-CDMA-PDSN-EXT-MIB", "ciscoCdmaExtSystemPdsnCacGroup"), ("CISCO-CDMA-PDSN-EXT-MIB", "ciscoCdmaExtNotifPdsnGroup"), ("CISCO-CDMA-PDSN-EXT-MIB", "ciscoCdmaExtSystemPdsnGroupSupR01"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoCdmaPdsnExtMIBComplianceRev2 = ciscoCdmaPdsnExtMIBComplianceRev2.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoCdmaPdsnExtMIBComplianceRev2.setDescription('The compliance statement for entities which implement the CDMA PDSN Management Extension MIB.')
ciscoCdmaPdsnExtMIBComplianceRev3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 669, 2, 1, 4)).setObjects(("CISCO-CDMA-PDSN-EXT-MIB", "ciscoCdmaExtSystemPdsnGroup"), ("CISCO-CDMA-PDSN-EXT-MIB", "ciscoCdmaExtPdsnPcfSoRpRegGroup"), ("CISCO-CDMA-PDSN-EXT-MIB", "ciscoCdmaExtPdsnPcfSoPppGroup"), ("CISCO-CDMA-PDSN-EXT-MIB", "ciscoCdmaExtSystemPdsnCacGroup"), ("CISCO-CDMA-PDSN-EXT-MIB", "ciscoCdmaExtNotifPdsnGroup"), ("CISCO-CDMA-PDSN-EXT-MIB", "ciscoCdmaExtSystemPdsnGroupSupR01"), ("CISCO-CDMA-PDSN-EXT-MIB", "ciscoCdmaExtPdsnPcfSoRpRegGroupSupR01"), ("CISCO-CDMA-PDSN-EXT-MIB", "ciscoCdmaExtSystemPdsnGroupSupR02"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoCdmaPdsnExtMIBComplianceRev3 = ciscoCdmaPdsnExtMIBComplianceRev3.setStatus('current')
if mibBuilder.loadTexts: ciscoCdmaPdsnExtMIBComplianceRev3.setDescription('The compliance statement for entities which implement the CDMA PDSN Management Extension MIB.')
ciscoCdmaExtSystemPdsnGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 669, 2, 2, 1)).setObjects(("CISCO-CDMA-PDSN-EXT-MIB", "ccpCdmaExtRsvpCreationFailureTfts"), ("CISCO-CDMA-PDSN-EXT-MIB", "ccpCdmaExtRsvpPacketFilterAddFailureTfts"), ("CISCO-CDMA-PDSN-EXT-MIB", "ccpCdmaExtRsvpPacketFilterUnavailableTfts"), ("CISCO-CDMA-PDSN-EXT-MIB", "ccpCdmaExtRsvpPacketFilterReplaceFailureTfts"), ("CISCO-CDMA-PDSN-EXT-MIB", "ccpCdmaExtRsvpPacketFilterAddBeforeCreationTfts"), ("CISCO-CDMA-PDSN-EXT-MIB", "ccpCdmaExtRsvpUnableToParseTfts"), ("CISCO-CDMA-PDSN-EXT-MIB", "ccpCdmaExtRsvpPrecedenceContentionTfts"), ("CISCO-CDMA-PDSN-EXT-MIB", "ccpCdmaExtRsvpTreatmentUnsupportedTfts"), ("CISCO-CDMA-PDSN-EXT-MIB", "ccpCdmaExtRsvpMaxPacketFiltersReachedTfts"), ("CISCO-CDMA-PDSN-EXT-MIB", "ccpCdmaExtRsvpCreationSuccessTfts"), ("CISCO-CDMA-PDSN-EXT-MIB", "ccpCdmaExtRsvpUnAuthorizeTfts"), ("CISCO-CDMA-PDSN-EXT-MIB", "ccpCdmaExtQosSuccesses"), ("CISCO-CDMA-PDSN-EXT-MIB", "ccpCdmaExtQosFailures"), ("CISCO-CDMA-PDSN-EXT-MIB", "ccpCdmaExtQosDscpRemarkedPkts"), ("CISCO-CDMA-PDSN-EXT-MIB", "ccpCdmaExtAuxSessionTotal"), ("CISCO-CDMA-PDSN-EXT-MIB", "ccpCdmaExtPolicingSessionTotal"), ("CISCO-CDMA-PDSN-EXT-MIB", "ccpCdmaExtDscpSession"), ("CISCO-CDMA-PDSN-EXT-MIB", "ccpCdmaExtBandwidthPolicyInstallFailures"), ("CISCO-CDMA-PDSN-EXT-MIB", "ccpCdmaExtBandwidthPolicyRemoves"), ("CISCO-CDMA-PDSN-EXT-MIB", "ccpCdmaExtBandwidthPolicyInstallSuccesses"), ("CISCO-CDMA-PDSN-EXT-MIB", "ccpCdmaExtRpReRegNewAuxConnections"), ("CISCO-CDMA-PDSN-EXT-MIB", "ccpCdmaExtRpReRegCloseAuxConnections"), ("CISCO-CDMA-PDSN-EXT-MIB", "ccpCdmaExtRpReRegRemapFlows"), ("CISCO-CDMA-PDSN-EXT-MIB", "ccpCdmaExtRpRegNewAuxConnections"), ("CISCO-CDMA-PDSN-EXT-MIB", "ccpCdmaExtNotifReason"), ("CISCO-CDMA-PDSN-EXT-MIB", "ccpCdmaExtNotifReasonCurrentValue"), ("CISCO-CDMA-PDSN-EXT-MIB", "ccpCdmaExtSessionAuxConnectionsTotal"), ("CISCO-CDMA-PDSN-EXT-MIB", "ccpCdmaExtAvailableBandwidth"), ("CISCO-CDMA-PDSN-EXT-MIB", "ccpCdmaExtPolicingEnabled"), ("CISCO-CDMA-PDSN-EXT-MIB", "ccpCdmaExtTotalBandwidth"), ("CISCO-CDMA-PDSN-EXT-MIB", "ccpCdmaExtAllocatedBandwidth"), ("CISCO-CDMA-PDSN-EXT-MIB", "ccpCdmaExtSessionAuxConnectionsEnabled"), ("CISCO-CDMA-PDSN-EXT-MIB", "ccpCdmaExtLoadHighReachedNotifEnabled"), ("CISCO-CDMA-PDSN-EXT-MIB", "ccpCdmaExtSessionMaxAuxConnectionsAllowed"), ("CISCO-CDMA-PDSN-EXT-MIB", "ccpCdmaExtRpSessionUpdSubQoses"), ("CISCO-CDMA-PDSN-EXT-MIB", "ccpCdmaExtRegReqMaxServiceFlows"), ("CISCO-CDMA-PDSN-EXT-MIB", "ccpCdmaExtRegReqUnSupportedSOs"), ("CISCO-CDMA-PDSN-EXT-MIB", "ccpCdmaExtRegReqNonExistA10s"), ("CISCO-CDMA-PDSN-EXT-MIB", "ccpCdmaExtRegReqBwUnavailableSess"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoCdmaExtSystemPdsnGroup = ciscoCdmaExtSystemPdsnGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoCdmaExtSystemPdsnGroup.setDescription('A collection of System Information, Performance statistics objects needed for PDSN.')
ciscoCdmaExtNotifPdsnGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 669, 2, 2, 2)).setObjects(("CISCO-CDMA-PDSN-EXT-MIB", "ciscoCdmaExtLoadLowReachedNotif"), ("CISCO-CDMA-PDSN-EXT-MIB", "ciscoCdmaExtLoadHighReachedNotif"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoCdmaExtNotifPdsnGroup = ciscoCdmaExtNotifPdsnGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoCdmaExtNotifPdsnGroup.setDescription('A collection notifications related to PDSN.')
ciscoCdmaExtPdsnPcfSoRpRegGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 669, 2, 2, 3)).setObjects(("CISCO-CDMA-PDSN-EXT-MIB", "ccpCdmaExtPcfSoStatsTotalAuxConnections"), ("CISCO-CDMA-PDSN-EXT-MIB", "ccpCdmaExtPcfSoRpRegStatsNewAuxConnections"), ("CISCO-CDMA-PDSN-EXT-MIB", "ccpCdmaExtPcfSoRpReRegStatsNewAuxConnections"), ("CISCO-CDMA-PDSN-EXT-MIB", "ccpCdmaExtPcfSoRpReRegStatsCloseAuxConnections"), ("CISCO-CDMA-PDSN-EXT-MIB", "ccpCdmaExtPcfSoRpReRegStatsRemapFlows"), ("CISCO-CDMA-PDSN-EXT-MIB", "ccpCdmaExtPcfSoRpRegStatsSessionUpdSubQoses"), ("CISCO-CDMA-PDSN-EXT-MIB", "ccpCdmaExtPcfSoRpRegStatsMaxServiceFlows"), ("CISCO-CDMA-PDSN-EXT-MIB", "ccpCdmaExtPcfSoRpRegStatsUnsupportedSOs"), ("CISCO-CDMA-PDSN-EXT-MIB", "ccpCdmaExtPcfSoRpRegStatsNonExistA10s"), ("CISCO-CDMA-PDSN-EXT-MIB", "ccpCdmaExtPcfSoRpRegStatsBwUnavailableSess"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoCdmaExtPdsnPcfSoRpRegGroup = ciscoCdmaExtPdsnPcfSoRpRegGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoCdmaExtPdsnPcfSoRpRegGroup.setDescription('A collection of PCF RP registration statistics MIB objects needed for PDSN.')
ciscoCdmaExtSystemPdsnCacGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 669, 2, 2, 4)).setObjects(("CISCO-CDMA-PDSN-EXT-MIB", "ccpCdmaExtCacEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoCdmaExtSystemPdsnCacGroup = ciscoCdmaExtSystemPdsnCacGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoCdmaExtSystemPdsnCacGroup.setDescription('System Information object needed for PDSN to specify call admission control feature is enabled or not.')
ciscoCdmaExtPdsnPcfSoPppGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 669, 2, 2, 5)).setObjects(("CISCO-CDMA-PDSN-EXT-MIB", "ccpCdmaExtPcfSoPppPreLCPPdsnA10Rls"), ("CISCO-CDMA-PDSN-EXT-MIB", "ccpCdmaExtPcfSoPppPreLCPPcfA10Rls"), ("CISCO-CDMA-PDSN-EXT-MIB", "ccpCdmaExtPcfSoPppLcpOptionIssueFailures"), ("CISCO-CDMA-PDSN-EXT-MIB", "ccpCdmaExtPcfSoPppLcpFailuresMaxRetrans"), ("CISCO-CDMA-PDSN-EXT-MIB", "ccpCdmaExtPcfSoPppLcpFailuresUnknown"), ("CISCO-CDMA-PDSN-EXT-MIB", "ccpCdmaExtPcfSoPppLcpPhaseRxTermreqs"), ("CISCO-CDMA-PDSN-EXT-MIB", "ccpCdmaExtPcfSoPppLcpPcfA10Rls"), ("CISCO-CDMA-PDSN-EXT-MIB", "ccpCdmaExtPcfSoPppAuthFailures"), ("CISCO-CDMA-PDSN-EXT-MIB", "ccpCdmaExtPcfSoPppAuthAAATimeouts"), ("CISCO-CDMA-PDSN-EXT-MIB", "ccpCdmaExtPcfSoPppAuthMaxRetransFailures"), ("CISCO-CDMA-PDSN-EXT-MIB", "ccpCdmaExtPcfSoPppAuthPhaseRxTermreqs"), ("CISCO-CDMA-PDSN-EXT-MIB", "ccpCdmaExtPcfSoPppAuthFailuresUnknown"), ("CISCO-CDMA-PDSN-EXT-MIB", "ccpCdmaExtPcfSoPppAuthPcfA10Rls"), ("CISCO-CDMA-PDSN-EXT-MIB", "ccpCdmaExtPcfSoPppIpcpOptionIssueFailures"), ("CISCO-CDMA-PDSN-EXT-MIB", "ccpCdmaExtPcfSoPppIpcpFailuresMaxRetrans"), ("CISCO-CDMA-PDSN-EXT-MIB", "ccpCdmaExtPcfSoPppIpcpFailuresUnknown"), ("CISCO-CDMA-PDSN-EXT-MIB", "ccpCdmaExtPcfSoPppIpcpPhaseRxTermreqs"), ("CISCO-CDMA-PDSN-EXT-MIB", "ccpCdmaExtPcfSoPppIpcpPcfA10Rls"), ("CISCO-CDMA-PDSN-EXT-MIB", "ccpCdmaExtPcfSoPppIpcpIpResourceFail"), ("CISCO-CDMA-PDSN-EXT-MIB", "ccpCdmaExtPcfSoPppRenegTotalReqs"), ("CISCO-CDMA-PDSN-EXT-MIB", "ccpCdmaExtPcfSoPppRenegByPdsnReqs"), ("CISCO-CDMA-PDSN-EXT-MIB", "ccpCdmaExtPcfSoPppRenegByMobileReqs"), ("CISCO-CDMA-PDSN-EXT-MIB", "ccpCdmaExtPcfSoPppRenegSuccesses"), ("CISCO-CDMA-PDSN-EXT-MIB", "ccpCdmaExtPcfSoPppRenegFailures"), ("CISCO-CDMA-PDSN-EXT-MIB", "ccpCdmaExtPcfSoPppRenegConnectionsAborted"), ("CISCO-CDMA-PDSN-EXT-MIB", "ccpCdmaExtPcfSoPppRenegAddrMismatchReqs"), ("CISCO-CDMA-PDSN-EXT-MIB", "ccpCdmaExtPcfSoPppRenegAccessNwIdChanges"), ("CISCO-CDMA-PDSN-EXT-MIB", "ccpCdmaExtPcfSoPppRenegGreChangeReqs"), ("CISCO-CDMA-PDSN-EXT-MIB", "ccpCdmaExtPcfSoPppRenegOtherReasonReqs"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoCdmaExtPdsnPcfSoPppGroup = ciscoCdmaExtPdsnPcfSoPppGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoCdmaExtPdsnPcfSoPppGroup.setDescription('A collection of PCF PPP statistics MIB objects needed for PDSN.')
ciscoCdmaExtSystemPdsnGroupSupR01 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 669, 2, 2, 6)).setObjects(("CISCO-CDMA-PDSN-EXT-MIB", "ccpCdmaExtRohcEnabled"), ("CISCO-CDMA-PDSN-EXT-MIB", "ccpCdmaExtRohcSuccessCount"), ("CISCO-CDMA-PDSN-EXT-MIB", "ccpCdmaExtRohcFailuresCount"), ("CISCO-CDMA-PDSN-EXT-MIB", "ccpCdmaExtRohcOutIpPkts"), ("CISCO-CDMA-PDSN-EXT-MIB", "ccpCdmaExtRohcOutIpBytes"), ("CISCO-CDMA-PDSN-EXT-MIB", "ccpCdmaExtRohcDeCompSuccessCount"), ("CISCO-CDMA-PDSN-EXT-MIB", "ccpCdmaExtRohcDeCompFailuresCount"), ("CISCO-CDMA-PDSN-EXT-MIB", "ccpCdmaExtRohcDeCompOutIpPkts"), ("CISCO-CDMA-PDSN-EXT-MIB", "ccpCdmaExtRohcDeCompOutIpBytes"), ("CISCO-CDMA-PDSN-EXT-MIB", "ccpCdmaExtRohcAuxA10sCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoCdmaExtSystemPdsnGroupSupR01 = ciscoCdmaExtSystemPdsnGroupSupR01.setStatus('current')
if mibBuilder.loadTexts: ciscoCdmaExtSystemPdsnGroupSupR01.setDescription('A collection of System Information, Performance statistics objects needed for PDSN.')
ciscoCdmaExtPdsnPcfSoRpRegGroupSupR01 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 669, 2, 2, 7)).setObjects(("CISCO-CDMA-PDSN-EXT-MIB", "ccpCdmaExtPcfSoRpRegStatsNoCIDAvailable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoCdmaExtPdsnPcfSoRpRegGroupSupR01 = ciscoCdmaExtPdsnPcfSoRpRegGroupSupR01.setStatus('current')
if mibBuilder.loadTexts: ciscoCdmaExtPdsnPcfSoRpRegGroupSupR01.setDescription('A collection of PCF RP registration statistics MIB objects needed for PDSN.')
ciscoCdmaExtSystemPdsnGroupSupR02 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 669, 2, 2, 8)).setObjects(("CISCO-CDMA-PDSN-EXT-MIB", "ccpCdmaExtRegReqNoCIDAvailable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoCdmaExtSystemPdsnGroupSupR02 = ciscoCdmaExtSystemPdsnGroupSupR02.setStatus('current')
if mibBuilder.loadTexts: ciscoCdmaExtSystemPdsnGroupSupR02.setDescription('A collection of System Information, Performance statistics objects needed for PDSN.')
mibBuilder.exportSymbols("CISCO-CDMA-PDSN-EXT-MIB", ciscoCdmaPdsnExtMIBComplianceRev3=ciscoCdmaPdsnExtMIBComplianceRev3, ccpCdmaExtRohcDeCompSuccessCount=ccpCdmaExtRohcDeCompSuccessCount, ccpCdmaExtPcfSoPppAuthAAATimeouts=ccpCdmaExtPcfSoPppAuthAAATimeouts, ciscoCdmaPdsnExtMIBConformance=ciscoCdmaPdsnExtMIBConformance, ciscoCdmaExtSystemPdsnCacGroup=ciscoCdmaExtSystemPdsnCacGroup, ccpCdmaExtRohcSuccessCount=ccpCdmaExtRohcSuccessCount, ccpCdmaExtRohcDeCompFailuresCount=ccpCdmaExtRohcDeCompFailuresCount, ccpCdmaExtCacEnabled=ccpCdmaExtCacEnabled, ccpCdmaExtAllocatedBandwidth=ccpCdmaExtAllocatedBandwidth, ccpCdmaExtPcfSoPppRenegAccessNwIdChanges=ccpCdmaExtPcfSoPppRenegAccessNwIdChanges, ciscoCdmaExtSystemPdsnGroupSupR01=ciscoCdmaExtSystemPdsnGroupSupR01, ciscoCdmaExtLoadHighReachedNotif=ciscoCdmaExtLoadHighReachedNotif, ccpCdmaExtRohcAuxA10sCount=ccpCdmaExtRohcAuxA10sCount, ciscoCdmaPdsnExtMIBGroups=ciscoCdmaPdsnExtMIBGroups, ccpCdmaExtPcfSoRpRegStatsSessionUpdSubQoses=ccpCdmaExtPcfSoRpRegStatsSessionUpdSubQoses, ccpCdmaExtPcfSoPppSetupStatsEntry=ccpCdmaExtPcfSoPppSetupStatsEntry, ccpCdmaExtPcfSoPppSetupStats=ccpCdmaExtPcfSoPppSetupStats, ccpCdmaExtPcfSoRpRegStatsUnsupportedSOs=ccpCdmaExtPcfSoRpRegStatsUnsupportedSOs, ccpCdmaExtRohcOutIpBytes=ccpCdmaExtRohcOutIpBytes, ccpCdmaExtPcfSoPppAuthFailuresUnknown=ccpCdmaExtPcfSoPppAuthFailuresUnknown, ccpCdmaExtPcfSoRpRegStatsBwUnavailableSess=ccpCdmaExtPcfSoRpRegStatsBwUnavailableSess, ccpCdmaExtNotifObjects=ccpCdmaExtNotifObjects, ccpCdmaExtRpRegStats=ccpCdmaExtRpRegStats, ccpCdmaExtPcfSoRpRegStats=ccpCdmaExtPcfSoRpRegStats, ccpCdmaExtPcfSoPppIpcpOptionIssueFailures=ccpCdmaExtPcfSoPppIpcpOptionIssueFailures, ccpCdmaExtRsvpPacketFilterUnavailableTfts=ccpCdmaExtRsvpPacketFilterUnavailableTfts, ccpCdmaExtPcfSoPppIpcpPcfA10Rls=ccpCdmaExtPcfSoPppIpcpPcfA10Rls, ccpCdmaExtRohcDeCompOutIpPkts=ccpCdmaExtRohcDeCompOutIpPkts, ccpCdmaExtRsvpPacketFilterAddBeforeCreationTfts=ccpCdmaExtRsvpPacketFilterAddBeforeCreationTfts, ccpCdmaExtRpReRegCloseAuxConnections=ccpCdmaExtRpReRegCloseAuxConnections, ccpCdmaExtPcfSoPppRenegGreChangeReqs=ccpCdmaExtPcfSoPppRenegGreChangeReqs, ccpCdmaExtPcfSoPppLcpPcfA10Rls=ccpCdmaExtPcfSoPppLcpPcfA10Rls, ccpCdmaExtPcfSoPppLcpFailuresMaxRetrans=ccpCdmaExtPcfSoPppLcpFailuresMaxRetrans, PYSNMP_MODULE_ID=ciscoCdmaPdsnExtMIB, ccpCdmaExtPcfSoRpReRegStatsRemapFlows=ccpCdmaExtPcfSoRpReRegStatsRemapFlows, ciscoCdmaExtPdsnPcfSoRpRegGroup=ciscoCdmaExtPdsnPcfSoRpRegGroup, ccpCdmaExtRpErrors=ccpCdmaExtRpErrors, ccpCdmaExtQosFailures=ccpCdmaExtQosFailures, ccpCdmaExtPerformanceStats=ccpCdmaExtPerformanceStats, ccpCdmaExtNotifReasonCurrentValue=ccpCdmaExtNotifReasonCurrentValue, ccpCdmaExtPcfSoPppRenegSuccesses=ccpCdmaExtPcfSoPppRenegSuccesses, ccpCdmaExtPcfSoRpRegStatsEntry=ccpCdmaExtPcfSoRpRegStatsEntry, ccpCdmaExtRohcStats=ccpCdmaExtRohcStats, ciscoCdmaPdsnExtMIB=ciscoCdmaPdsnExtMIB, ciscoCdmaPdsnExtMIBNotifs=ciscoCdmaPdsnExtMIBNotifs, ccpCdmaExtPcfSoPppPreLCPPcfA10Rls=ccpCdmaExtPcfSoPppPreLCPPcfA10Rls, ccpCdmaExtTotalBandwidth=ccpCdmaExtTotalBandwidth, ccpCdmaExtSessionAuxConnectionsEnabled=ccpCdmaExtSessionAuxConnectionsEnabled, ccpCdmaExtRpReRegRemapFlows=ccpCdmaExtRpReRegRemapFlows, ciscoCdmaPdsnExtMIBComplianceRev2=ciscoCdmaPdsnExtMIBComplianceRev2, ccpCdmaExtRegReqBwUnavailableSess=ccpCdmaExtRegReqBwUnavailableSess, ccpCdmaExtRegReqNonExistA10s=ccpCdmaExtRegReqNonExistA10s, ccpCdmaExtLoadHighReachedNotifEnabled=ccpCdmaExtLoadHighReachedNotifEnabled, ciscoCdmaPdsnExtMIBCompliance=ciscoCdmaPdsnExtMIBCompliance, ccpCdmaExtPcfSoPppAuthMaxRetransFailures=ccpCdmaExtPcfSoPppAuthMaxRetransFailures, ccpCdmaExtPcfSoPppRenegByMobileReqs=ccpCdmaExtPcfSoPppRenegByMobileReqs, ccpCdmaExtRegReqNoCIDAvailable=ccpCdmaExtRegReqNoCIDAvailable, ccpCdmaExtPcfSoPppAuthFailures=ccpCdmaExtPcfSoPppAuthFailures, ccpCdmaExtPcfSoStatsTotalAuxConnections=ccpCdmaExtPcfSoStatsTotalAuxConnections, ccpCdmaExtRsvpTreatmentUnsupportedTfts=ccpCdmaExtRsvpTreatmentUnsupportedTfts, ccpCdmaExtPolicingSessionTotal=ccpCdmaExtPolicingSessionTotal, ccpCdmaExtPcfSoPppIpcpIpResourceFail=ccpCdmaExtPcfSoPppIpcpIpResourceFail, ccpCdmaExtSessionAuxConnectionsTotal=ccpCdmaExtSessionAuxConnectionsTotal, ciscoCdmaPdsnExtMIBObjects=ciscoCdmaPdsnExtMIBObjects, ccpCdmaExtRohcDeCompOutIpBytes=ccpCdmaExtRohcDeCompOutIpBytes, ccpCdmaExtRsvpPacketFilterAddFailureTfts=ccpCdmaExtRsvpPacketFilterAddFailureTfts, ccpCdmaExtPcfSoPppRenegTotalReqs=ccpCdmaExtPcfSoPppRenegTotalReqs, ccpCdmaExtPolicingEnabled=ccpCdmaExtPolicingEnabled, ccpCdmaExtRohcOutIpPkts=ccpCdmaExtRohcOutIpPkts, ccpCdmaExtPcfSoRpReRegStatsNewAuxConnections=ccpCdmaExtPcfSoRpReRegStatsNewAuxConnections, ccpCdmaExtRsvpCreationSuccessTfts=ccpCdmaExtRsvpCreationSuccessTfts, ccpCdmaExtPcfSoRpReRegStatsCloseAuxConnections=ccpCdmaExtPcfSoRpReRegStatsCloseAuxConnections, ccpCdmaExtPcfSoPppLcpOptionIssueFailures=ccpCdmaExtPcfSoPppLcpOptionIssueFailures, ccpCdmaExtPcfSoPppRenegOtherReasonReqs=ccpCdmaExtPcfSoPppRenegOtherReasonReqs, ccpCdmaExtBandwidthPolicyRemoves=ccpCdmaExtBandwidthPolicyRemoves, ccpCdmaExtRpReRegNewAuxConnections=ccpCdmaExtRpReRegNewAuxConnections, ccpCdmaExtRpSessUpdStats=ccpCdmaExtRpSessUpdStats, ciscoCdmaExtNotifPdsnGroup=ciscoCdmaExtNotifPdsnGroup, ccpCdmaExtQosDscpRemarkedPkts=ccpCdmaExtQosDscpRemarkedPkts, ciscoCdmaExtSystemPdsnGroup=ciscoCdmaExtSystemPdsnGroup, ccpCdmaExtPcfSoPppLcpFailuresUnknown=ccpCdmaExtPcfSoPppLcpFailuresUnknown, ccpCdmaExtSessionMaxAuxConnectionsAllowed=ccpCdmaExtSessionMaxAuxConnectionsAllowed, ccpCdmaExtRsvpCreationFailureTfts=ccpCdmaExtRsvpCreationFailureTfts, ccpCdmaExtPcfSoPppLcpPhaseRxTermreqs=ccpCdmaExtPcfSoPppLcpPhaseRxTermreqs, ccpCdmaExtDscpSession=ccpCdmaExtDscpSession, ciscoCdmaExtLoadLowReachedNotif=ciscoCdmaExtLoadLowReachedNotif, ccpCdmaExtRsvpUnAuthorizeTfts=ccpCdmaExtRsvpUnAuthorizeTfts, ccpCdmaExtPcfSoRpRegStatsTable=ccpCdmaExtPcfSoRpRegStatsTable, ccpCdmaExtPcfSoPppRenegAddrMismatchReqs=ccpCdmaExtPcfSoPppRenegAddrMismatchReqs, ccpCdmaExtRpSessionUpdSubQoses=ccpCdmaExtRpSessionUpdSubQoses, ccpCdmaExtPcfSoRpRegStatsMaxServiceFlows=ccpCdmaExtPcfSoRpRegStatsMaxServiceFlows, ccpCdmaExtPcfSoRpRegStatsNewAuxConnections=ccpCdmaExtPcfSoRpRegStatsNewAuxConnections, ccpCdmaExtRsvpPacketFilterReplaceFailureTfts=ccpCdmaExtRsvpPacketFilterReplaceFailureTfts, ccpCdmaExtRegReqMaxServiceFlows=ccpCdmaExtRegReqMaxServiceFlows, ccpCdmaExtRohcFailuresCount=ccpCdmaExtRohcFailuresCount, ccpCdmaExtRPRegReqErrors=ccpCdmaExtRPRegReqErrors, ccpCdmaExtQosSuccesses=ccpCdmaExtQosSuccesses, ccpCdmaExtQosStats=ccpCdmaExtQosStats, ccpCdmaExtAvailableBandwidth=ccpCdmaExtAvailableBandwidth, ciscoCdmaExtSystemPdsnGroupSupR02=ciscoCdmaExtSystemPdsnGroupSupR02, ccpCdmaExtRsvpPrecedenceContentionTfts=ccpCdmaExtRsvpPrecedenceContentionTfts, ccpCdmaExtSystemInfo=ccpCdmaExtSystemInfo, ciscoCdmaPdsnExtMIBCompliances=ciscoCdmaPdsnExtMIBCompliances, ccpCdmaExtPcfSoPppIpcpFailuresMaxRetrans=ccpCdmaExtPcfSoPppIpcpFailuresMaxRetrans, ccpCdmaExtPcfSoPppRenegConnectionsAborted=ccpCdmaExtPcfSoPppRenegConnectionsAborted, ccpCdmaExtPcfSoPppPreLCPPdsnA10Rls=ccpCdmaExtPcfSoPppPreLCPPdsnA10Rls, ccpCdmaExtPcfSoPppIpcpPhaseRxTermreqs=ccpCdmaExtPcfSoPppIpcpPhaseRxTermreqs, ccpCdmaExtBandwidthPolicyInstallFailures=ccpCdmaExtBandwidthPolicyInstallFailures, ciscoCdmaPdsnExtMIBComplianceRev1=ciscoCdmaPdsnExtMIBComplianceRev1, ccpCdmaExtPcfSoPppRenegByPdsnReqs=ccpCdmaExtPcfSoPppRenegByPdsnReqs, ccpCdmaExtPcfSoPppAuthPhaseRxTermreqs=ccpCdmaExtPcfSoPppAuthPhaseRxTermreqs, ccpCdmaExtPcfSoPppAuthPcfA10Rls=ccpCdmaExtPcfSoPppAuthPcfA10Rls, ccpCdmaExtAuxSessionTotal=ccpCdmaExtAuxSessionTotal, ccpCdmaExtNotifReason=ccpCdmaExtNotifReason, ccpCdmaExtBandwidthPolicyInstallSuccesses=ccpCdmaExtBandwidthPolicyInstallSuccesses, ccpCdmaExtPcfSoPppSetupStatsTable=ccpCdmaExtPcfSoPppSetupStatsTable, ccpCdmaExtPcfSoPppIpcpFailuresUnknown=ccpCdmaExtPcfSoPppIpcpFailuresUnknown, ccpCdmaExtPcfSoRpRegStatsNoCIDAvailable=ccpCdmaExtPcfSoRpRegStatsNoCIDAvailable, ccpCdmaExtRsvpUnableToParseTfts=ccpCdmaExtRsvpUnableToParseTfts, ciscoCdmaExtPdsnPcfSoRpRegGroupSupR01=ciscoCdmaExtPdsnPcfSoRpRegGroupSupR01, ccpCdmaExtRpRegNewAuxConnections=ccpCdmaExtRpRegNewAuxConnections, ccpCdmaExtRsvpStats=ccpCdmaExtRsvpStats, ccpCdmaExtPcfSoRpRegStatsNonExistA10s=ccpCdmaExtPcfSoRpRegStatsNonExistA10s, ccpCdmaExtBandwidthPolicyStats=ccpCdmaExtBandwidthPolicyStats, ciscoCdmaExtPdsnPcfSoPppGroup=ciscoCdmaExtPdsnPcfSoPppGroup, ccpCdmaExtRohcEnabled=ccpCdmaExtRohcEnabled, ccpCdmaExtPcfSoPppRenegFailures=ccpCdmaExtPcfSoPppRenegFailures, ccpCdmaExtRsvpMaxPacketFiltersReachedTfts=ccpCdmaExtRsvpMaxPacketFiltersReachedTfts, ccpCdmaExtRegReqUnSupportedSOs=ccpCdmaExtRegReqUnSupportedSOs)
