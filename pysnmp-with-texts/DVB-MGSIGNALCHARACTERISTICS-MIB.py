#
# PySNMP MIB module DVB-MGSIGNALCHARACTERISTICS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DVB-MGSIGNALCHARACTERISTICS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:54:58 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint")
Modulation, FloatingPoint, RateStatus, PIDPlusOne, InputNumber, ServiceId, DeliverySystemType = mibBuilder.importSymbols("DVB-MGTR101290-MIB", "Modulation", "FloatingPoint", "RateStatus", "PIDPlusOne", "InputNumber", "ServiceId", "DeliverySystemType")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
Integer32, Gauge32, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, enterprises, iso, Bits, Counter64, ObjectIdentity, TimeTicks, MibIdentifier, IpAddress, Counter32, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "Gauge32", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "enterprises", "iso", "Bits", "Counter64", "ObjectIdentity", "TimeTicks", "MibIdentifier", "IpAddress", "Counter32", "Unsigned32")
DateAndTime, TruthValue, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DateAndTime", "TruthValue", "DisplayString", "TextualConvention")
mgSignalCharacteristics = ModuleIdentity((1, 3, 6, 1, 4, 1, 2696, 3, 3))
if mibBuilder.loadTexts: mgSignalCharacteristics.setLastUpdated('200111071400Z')
if mibBuilder.loadTexts: mgSignalCharacteristics.setOrganization('DVB')
if mibBuilder.loadTexts: mgSignalCharacteristics.setContactInfo('DVB project European Broadcasting Union CH-1218 GRAND SACONNEX (Geneva) Switzerland Tel: +41 22 717 21 11 Fax: +41 22 717 24 81')
if mibBuilder.loadTexts: mgSignalCharacteristics.setDescription('DVB Measurement Group Signal Characteristics MIB module. This mgSignalCharacteristics module contains Transport Stream structure information and RF characteristics information to assist in interpreting measurements and tests, in particular those specified in TR 101 290.')
class CASystemID(TextualConvention, Integer32):
    description = 'Representation of CA_system_ID as found in a CA_descriptor. A value of -1 means that the CA_system_ID is unknown.'
    status = 'current'
    displayHint = 'x'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(-1, 65535)

class EncryptionState(TextualConvention, Integer32):
    description = 'Used to indicate whether a service or PID is encrypted or unencrypted. The value unknown means that the information is not available, for example because the instrument does not gather this information.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("unencrypted", 1), ("encrypted", 2), ("unknown", 3))

class GuardInterval(TextualConvention, Integer32):
    description = 'Guard interval used in the DVB-T modulation scheme.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("guard1over32", 1), ("guard1over16", 2), ("guard1over8", 3), ("guard1over4", 4))

class InnerCodeRate(TextualConvention, Integer32):
    description = 'This is used to specify the inner (Viterbi) code rate of a transmission.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("rateNone", 1), ("rate1over2", 2), ("rate2over3", 3), ("rate3over4", 4), ("rate5over6", 5), ("rate7over8", 6))

class NetworkID(TextualConvention, Integer32):
    description = 'This represents a network_id or original_network_id as used in the SI tables. A value of -1 indicates that value is unknown.'
    status = 'current'
    displayHint = 'x'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(-1, 65535)

class PID(TextualConvention, Integer32):
    reference = 'ISO 13818-1 2.1.32'
    description = 'An object of type PID directly represents an MPEG-2 PID number'
    status = 'current'
    displayHint = 'x'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 8191)

class ReadableString(TextualConvention, OctetString):
    reference = 'RFC 2279'
    description = 'An octet string containing a human-readable string. This string may have originally been encoded as specified in EN 300 468 Annex A, but this is not a requirement. To maintain generality, the information is represented using the ISO/IEC IS 10646-1 character set, encoded as an octet string using the UTF-8 transformation format described in RFC2279. Control codes are interpreted as specified in EN 300 468 Annex A, section A.1. The interpretation of other control codes is undefined. For information encoded in 7-bit US-ASCII, the UTF-8 encoding is identical to the US-ASCII encoding. UTF-8 may require multiple bytes to represent a single character/code point; thus the length of this object in octets may be different from the number of characters encoded. Similarly, size constraints refer to the number of encoded octets, not the number of characters represented by an encoding.'
    status = 'current'
    displayHint = '255t'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 255)

class TerrestrialTransmissionMode(TextualConvention, Integer32):
    description = 'Used to inform whether a DVB-T transmission uses 2k or 8k mode.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("carriers2k", 1), ("carriers8k", 2))

dvb = MibIdentifier((1, 3, 6, 1, 4, 1, 2696))
mg = MibIdentifier((1, 3, 6, 1, 4, 1, 2696, 3))
mgSignalCharacteristicsObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1))
mgTSStructure = MibIdentifier((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 1))
mgTSStructureTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 1, 1))
structureTrapPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 1, 1, 0))
tsStructureChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 1, 1, 0, 1)).setObjects(("DVB-MGSIGNALCHARACTERISTICS-MIB", "structureTrapInput"), ("DVB-MGSIGNALCHARACTERISTICS-MIB", "structureTrapControlOID"), ("DVB-MGSIGNALCHARACTERISTICS-MIB", "structureTrapControlChangeTime"))
if mibBuilder.loadTexts: tsStructureChangeTrap.setStatus('current')
if mibBuilder.loadTexts: tsStructureChangeTrap.setDescription('Trap which is sent when any value within the mgTSStructure branch of this MIB changes. Transmission of the trap is subject to rate control through the structureTrapControlRateStatus object.')
structureTrapControlTable = MibTable((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 1, 1, 1), )
if mibBuilder.loadTexts: structureTrapControlTable.setStatus('current')
if mibBuilder.loadTexts: structureTrapControlTable.setDescription('Per-input table of values which control the generation of tsStructureChangeTrap traps.')
structureTrapControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 1, 1, 1, 1), ).setIndexNames((0, "DVB-MGSIGNALCHARACTERISTICS-MIB", "structureTrapControlInputNumber"))
if mibBuilder.loadTexts: structureTrapControlEntry.setStatus('current')
if mibBuilder.loadTexts: structureTrapControlEntry.setDescription('Row specification')
structureTrapControlInputNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 1, 1, 1, 1, 1), InputNumber())
if mibBuilder.loadTexts: structureTrapControlInputNumber.setStatus('current')
if mibBuilder.loadTexts: structureTrapControlInputNumber.setDescription('Transport Stream input to which the trap control objects apply.')
structureTrapControlOID = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 1, 1, 1, 1, 2), ObjectIdentifier()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: structureTrapControlOID.setStatus('current')
if mibBuilder.loadTexts: structureTrapControlOID.setDescription('This object holds the OID of the object within the mgTSStructure branch of the MIB whose change triggered the trap. It is present for the formal purpose of defining the variable bindings returned with the tsStructureChangeTrap. It is not accessible for normal reading.')
structureTrapControlChangeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 1, 1, 1, 1, 3), DateAndTime()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: structureTrapControlChangeTime.setStatus('current')
if mibBuilder.loadTexts: structureTrapControlChangeTime.setDescription('This indicates the time when the change which triggered the trap occurred. It is present for the formal purpose of defining the variable bindings returned with the tsStructureChangeTrap. It is not accessible for normal reading.')
structureTrapControlRateStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 1, 1, 1, 1, 4), RateStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: structureTrapControlRateStatus.setStatus('current')
if mibBuilder.loadTexts: structureTrapControlRateStatus.setDescription("This object is used for rate control of traps, preventing overload of the management network by transmission of an excessive number of traps. The value 'disabled' means that traps are never sent. The value 'enabled' means that a trap will be sent when triggered. When a trap is sent, the agent changes the value of this object to 'enabledThrottled'. In this state the agent will not send any more traps. The agent automatically changes the value back to 'enabled' when the time specified by trapControlPeriod expires. A management application may set the value to 'enabled' at any time, but must never set the value to 'enabledThrottled'.")
structureTrapControlPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 1, 1, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600000))).setUnits('millisecond').setMaxAccess("readwrite")
if mibBuilder.loadTexts: structureTrapControlPeriod.setStatus('current')
if mibBuilder.loadTexts: structureTrapControlPeriod.setDescription('The agent will ensure that the interval between sending traps is no shorter than this time period (unless overridden by the manager).')
structureTrapInput = MibScalar((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 1, 1, 2), InputNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: structureTrapInput.setStatus('current')
if mibBuilder.loadTexts: structureTrapInput.setDescription('The Transport Stream input whose change triggered the current trap. This information can also be obtained by analysing the structureTrapControlOID, but structureTrapInput provides the information directly. This object is present for the formal purpose of defining the variable bindings returned with the tsStructureChangeTrap. It is not accessible for normal reading.')
mgTSTable = MibTable((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 1, 2), )
if mibBuilder.loadTexts: mgTSTable.setStatus('current')
if mibBuilder.loadTexts: mgTSTable.setDescription('PSI/SI information relating to the whole Transport Stream')
mgTSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 1, 2, 1), ).setIndexNames((0, "DVB-MGSIGNALCHARACTERISTICS-MIB", "mgTSInputNumber"))
if mibBuilder.loadTexts: mgTSEntry.setStatus('current')
if mibBuilder.loadTexts: mgTSEntry.setDescription('Row specification')
mgTSInputNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 1, 2, 1, 1), InputNumber())
if mibBuilder.loadTexts: mgTSInputNumber.setStatus('current')
if mibBuilder.loadTexts: mgTSInputNumber.setDescription('The physical input on which this Transport Stream appears')
mgTSId = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgTSId.setReference('ISO/IEC 13818-1 2.4.4.3')
if mibBuilder.loadTexts: mgTSId.setStatus('current')
if mibBuilder.loadTexts: mgTSId.setDescription('The transport_stream_id for this Transport Stream as read from the PAT. If the transport_stream_id is unknown, this object has the value -1.')
mgTSOriginalNetworkID = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 1, 2, 1, 3), NetworkID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgTSOriginalNetworkID.setReference('ISO/IEC 13818-1 5.2.1')
if mibBuilder.loadTexts: mgTSOriginalNetworkID.setStatus('current')
if mibBuilder.loadTexts: mgTSOriginalNetworkID.setDescription('The original_network_id for this Transport Stream. This is found by reading the transport_stream_id from the PAT. This transport_stream_id is then located in the transport_stream_loop of the NIT (actual transport stream). The value of mgTSOriginalNetworkID is the original_network_id found in this instance of the loop.')
mgTSNetworkID = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 1, 2, 1, 4), NetworkID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgTSNetworkID.setReference('ISO/IEC 13818-1 5.2.1')
if mibBuilder.loadTexts: mgTSNetworkID.setStatus('current')
if mibBuilder.loadTexts: mgTSNetworkID.setDescription('The network_id for this Transport Stream as read from the NIT. This is found by reading the network_id in the NIT (actual_network)')
mgTSNetworkName = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 1, 2, 1, 5), ReadableString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgTSNetworkName.setReference('EN 300 468 6.2.24 and 6.2.21')
if mibBuilder.loadTexts: mgTSNetworkName.setStatus('current')
if mibBuilder.loadTexts: mgTSNetworkName.setDescription('network_name for this Transport Stream as read from the NIT. This is found by reading the network name descriptor in the NIT (actual_network). If the network_name is unknown, the value of this object is a zero length string.')
mgServiceTable = MibTable((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 1, 3), )
if mibBuilder.loadTexts: mgServiceTable.setStatus('current')
if mibBuilder.loadTexts: mgServiceTable.setDescription('PSI/SI information relating to each service within the Transport Stream. A service is included in the table if it is found in both the PAT and the PMT.')
mgServiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 1, 3, 1), ).setIndexNames((0, "DVB-MGSIGNALCHARACTERISTICS-MIB", "mgServiceNumber"), (0, "DVB-MGSIGNALCHARACTERISTICS-MIB", "mgServiceInputNumber"))
if mibBuilder.loadTexts: mgServiceEntry.setStatus('current')
if mibBuilder.loadTexts: mgServiceEntry.setDescription('Row specification')
mgServiceInputNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 1, 3, 1, 1), InputNumber())
if mibBuilder.loadTexts: mgServiceInputNumber.setStatus('current')
if mibBuilder.loadTexts: mgServiceInputNumber.setDescription('The physical input on which this Transport Stream appears')
mgServiceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 1, 3, 1, 2), ServiceId())
if mibBuilder.loadTexts: mgServiceNumber.setStatus('current')
if mibBuilder.loadTexts: mgServiceNumber.setDescription('The program_number/service_id to which the information in the rest of the row applies.')
mgServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgServiceType.setReference('EN 300 468 6.2.30')
if mibBuilder.loadTexts: mgServiceType.setStatus('current')
if mibBuilder.loadTexts: mgServiceType.setDescription('The service_type from the service_descriptor field in the SDT. A value of -1 indicates that the service_type is unknown.')
mgServiceName = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 1, 3, 1, 4), ReadableString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgServiceName.setReference('EN 300 468 6.2.22 and 6.2.30')
if mibBuilder.loadTexts: mgServiceName.setStatus('current')
if mibBuilder.loadTexts: mgServiceName.setDescription('The service_name from the service_descriptor in the SDT. If this information is not available, the value of this object will be a zero length string.')
mgServiceProviderName = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 1, 3, 1, 5), ReadableString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgServiceProviderName.setReference('EN 300 468 6.2.22 and 6.2.30')
if mibBuilder.loadTexts: mgServiceProviderName.setStatus('current')
if mibBuilder.loadTexts: mgServiceProviderName.setDescription('The service_provider_name from the service_descriptor in the SDT. If this information is not available, the value of this object will be a zero length string.')
mgServicePMTPID = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 1, 3, 1, 6), PID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgServicePMTPID.setReference('ISO/IEC 13838-1 2.4.4.3')
if mibBuilder.loadTexts: mgServicePMTPID.setStatus('current')
if mibBuilder.loadTexts: mgServicePMTPID.setDescription('The PMT PID for this service as read from the PAT')
mgServicePCRPID = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 1, 3, 1, 7), PID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgServicePCRPID.setReference('ISO/IEC 13838-1 2.4.4.8')
if mibBuilder.loadTexts: mgServicePCRPID.setStatus('current')
if mibBuilder.loadTexts: mgServicePCRPID.setDescription('The PCR PID for this service as read from the PMT')
mgServiceCondAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 1, 3, 1, 8), EncryptionState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgServiceCondAccess.setReference('EN 300 468 5.2.3')
if mibBuilder.loadTexts: mgServiceCondAccess.setStatus('current')
if mibBuilder.loadTexts: mgServiceCondAccess.setDescription('The encryption state of the service, derived from the free_CA_mode bit in the SDT')
mgServiceEITComponentDescriptor = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 1, 3, 1, 9), ReadableString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgServiceEITComponentDescriptor.setReference('EN 300 468 6.2.7')
if mibBuilder.loadTexts: mgServiceEITComponentDescriptor.setStatus('current')
if mibBuilder.loadTexts: mgServiceEITComponentDescriptor.setDescription('This is a text description of the main elementary stream in the service as read from the component_descriptor in the EIT. If this information is not available, the value of this object will be a zero length string.')
mgPIDTable = MibTable((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 1, 4), )
if mibBuilder.loadTexts: mgPIDTable.setStatus('current')
if mibBuilder.loadTexts: mgPIDTable.setDescription('PSI/SI information relating to each PID in each service in the Transport Stream. A PID is included in the table if it listed as an elementary_PID in the PMT for the service.')
mgPIDEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 1, 4, 1), ).setIndexNames((0, "DVB-MGSIGNALCHARACTERISTICS-MIB", "mgPIDServiceNumber"), (0, "DVB-MGSIGNALCHARACTERISTICS-MIB", "mgPIDNumber"), (0, "DVB-MGSIGNALCHARACTERISTICS-MIB", "mgPIDInputNumber"))
if mibBuilder.loadTexts: mgPIDEntry.setStatus('current')
if mibBuilder.loadTexts: mgPIDEntry.setDescription('Row specification')
mgPIDInputNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 1, 4, 1, 1), InputNumber())
if mibBuilder.loadTexts: mgPIDInputNumber.setStatus('current')
if mibBuilder.loadTexts: mgPIDInputNumber.setDescription('The physical input on which this Transport Stream appears')
mgPIDServiceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 1, 4, 1, 2), ServiceId())
if mibBuilder.loadTexts: mgPIDServiceNumber.setStatus('current')
if mibBuilder.loadTexts: mgPIDServiceNumber.setDescription('The program_number/service_id to which the row information applies.')
mgPIDNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 1, 4, 1, 3), PIDPlusOne())
if mibBuilder.loadTexts: mgPIDNumber.setStatus('current')
if mibBuilder.loadTexts: mgPIDNumber.setDescription('The PID, included in the service identified by mgPIDServiceNumber, to which the information in the row applies.')
mgPIDType = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgPIDType.setReference('ISO/IEC 13818-1 Table 2-29')
if mibBuilder.loadTexts: mgPIDType.setStatus('current')
if mibBuilder.loadTexts: mgPIDType.setDescription('The stream_type read from the PMT')
mgPIDCondAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 1, 4, 1, 5), EncryptionState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgPIDCondAccess.setReference('ISO/IEC 13818-1 2.4.3.2')
if mibBuilder.loadTexts: mgPIDCondAccess.setStatus('current')
if mibBuilder.loadTexts: mgPIDCondAccess.setDescription('The encryption state of the PID. This is deduced from the values of the transport_scrambling_control field in the Transport Stream packet headers for this PID.')
mgEMMTable = MibTable((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 1, 5), )
if mibBuilder.loadTexts: mgEMMTable.setStatus('current')
if mibBuilder.loadTexts: mgEMMTable.setDescription('This table identifies the PIDs occupied by EMMs')
mgEMMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 1, 5, 1), ).setIndexNames((0, "DVB-MGSIGNALCHARACTERISTICS-MIB", "mgEMMInputNumber"), (0, "DVB-MGSIGNALCHARACTERISTICS-MIB", "mgEMMCaPID"))
if mibBuilder.loadTexts: mgEMMEntry.setStatus('current')
if mibBuilder.loadTexts: mgEMMEntry.setDescription('Row specification')
mgEMMInputNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 1, 5, 1, 1), InputNumber())
if mibBuilder.loadTexts: mgEMMInputNumber.setStatus('current')
if mibBuilder.loadTexts: mgEMMInputNumber.setDescription('The physical input on which this Transport Stream appears')
mgEMMCaPID = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 1, 5, 1, 2), PIDPlusOne())
if mibBuilder.loadTexts: mgEMMCaPID.setReference('ISO/IEC 13818-1 2.6.16')
if mibBuilder.loadTexts: mgEMMCaPID.setStatus('current')
if mibBuilder.loadTexts: mgEMMCaPID.setDescription('The CA_PID from the CA_descriptor in the CAT plus one. This indicates the PID on which the EMM is found.')
mgEMMCASystemID = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 1, 5, 1, 3), CASystemID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgEMMCASystemID.setReference('ISO/IEC 13818-1 2.6.16')
if mibBuilder.loadTexts: mgEMMCASystemID.setStatus('current')
if mibBuilder.loadTexts: mgEMMCASystemID.setDescription('The CA_system_ID from the CA_descriptor in the CAT')
mgServiceECMTable = MibTable((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 1, 6), )
if mibBuilder.loadTexts: mgServiceECMTable.setStatus('current')
if mibBuilder.loadTexts: mgServiceECMTable.setDescription('This table identifies the PIDs occupied by ECMs relating to a whole service. This information is found in the first descriptor loop of a TS_program_map_section.')
mgServiceECMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 1, 6, 1), ).setIndexNames((0, "DVB-MGSIGNALCHARACTERISTICS-MIB", "mgServiceECMInputNumber"), (0, "DVB-MGSIGNALCHARACTERISTICS-MIB", "mgServiceECMServiceNumber"))
if mibBuilder.loadTexts: mgServiceECMEntry.setStatus('current')
if mibBuilder.loadTexts: mgServiceECMEntry.setDescription('Row specification')
mgServiceECMInputNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 1, 6, 1, 1), InputNumber())
if mibBuilder.loadTexts: mgServiceECMInputNumber.setStatus('current')
if mibBuilder.loadTexts: mgServiceECMInputNumber.setDescription('The physical input on which this Transport Stream appears')
mgServiceECMServiceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 1, 6, 1, 2), ServiceId())
if mibBuilder.loadTexts: mgServiceECMServiceNumber.setStatus('current')
if mibBuilder.loadTexts: mgServiceECMServiceNumber.setDescription('The program_number/service_id to which the information in the row applies.')
mgServiceECMCaPID = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 1, 6, 1, 3), PIDPlusOne())
if mibBuilder.loadTexts: mgServiceECMCaPID.setReference('ISO/IEC 13818-1 2.6.16')
if mibBuilder.loadTexts: mgServiceECMCaPID.setStatus('current')
if mibBuilder.loadTexts: mgServiceECMCaPID.setDescription('The CA_PID from the CA_descriptor in the PMT plus one. This indicates the PID on which the ECM is found.')
mgServiceECMCASystemID = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 1, 6, 1, 4), CASystemID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgServiceECMCASystemID.setReference('ISO/IEC 13818-1 2.6.16')
if mibBuilder.loadTexts: mgServiceECMCASystemID.setStatus('current')
if mibBuilder.loadTexts: mgServiceECMCASystemID.setDescription('The CA_system_ID from the CA_descriptor in the PMT')
mgPIDECMTable = MibTable((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 1, 7), )
if mibBuilder.loadTexts: mgPIDECMTable.setStatus('current')
if mibBuilder.loadTexts: mgPIDECMTable.setDescription('This table identifies the PIDs occupied by ECMs related to a single elementary stream. This information is found in the elementary stream specific descriptor loop of a TS_program_map_section.')
mgPIDECMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 1, 7, 1), ).setIndexNames((0, "DVB-MGSIGNALCHARACTERISTICS-MIB", "mgPIDECMInputNumber"), (0, "DVB-MGSIGNALCHARACTERISTICS-MIB", "mgPIDECMServiceNumber"), (0, "DVB-MGSIGNALCHARACTERISTICS-MIB", "mgPIDECMPID"))
if mibBuilder.loadTexts: mgPIDECMEntry.setStatus('current')
if mibBuilder.loadTexts: mgPIDECMEntry.setDescription('Row specification')
mgPIDECMInputNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 1, 7, 1, 1), InputNumber())
if mibBuilder.loadTexts: mgPIDECMInputNumber.setStatus('current')
if mibBuilder.loadTexts: mgPIDECMInputNumber.setDescription('The physical input on which this Transport Stream appears')
mgPIDECMServiceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 1, 7, 1, 2), ServiceId())
if mibBuilder.loadTexts: mgPIDECMServiceNumber.setStatus('current')
if mibBuilder.loadTexts: mgPIDECMServiceNumber.setDescription('The program_number/service_id to which the information in the row applies.')
mgPIDECMPID = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 1, 7, 1, 3), PIDPlusOne())
if mibBuilder.loadTexts: mgPIDECMPID.setStatus('current')
if mibBuilder.loadTexts: mgPIDECMPID.setDescription('The elementary stream PID which is unscrambled by this ECM.')
mgPIDECMCaPID = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 1, 7, 1, 4), PIDPlusOne())
if mibBuilder.loadTexts: mgPIDECMCaPID.setReference('ISO/IEC 13818-1 2.6.16')
if mibBuilder.loadTexts: mgPIDECMCaPID.setStatus('current')
if mibBuilder.loadTexts: mgPIDECMCaPID.setDescription('The CA_PID from the CA_descriptor in the PMT plus one. This indicates the PID on which the ECM is found.')
mgPIDECMCASystemID = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 1, 7, 1, 5), CASystemID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgPIDECMCASystemID.setReference('ISO/IEC 13818-1 2.6.16')
if mibBuilder.loadTexts: mgPIDECMCASystemID.setStatus('current')
if mibBuilder.loadTexts: mgPIDECMCASystemID.setDescription('The CA_system_ID from the CA_descriptor in the PMT')
mgNITDeliverySystemTable = MibTable((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 1, 8), )
if mibBuilder.loadTexts: mgNITDeliverySystemTable.setReference('EN 300 468 section 6.2.12')
if mibBuilder.loadTexts: mgNITDeliverySystemTable.setStatus('current')
if mibBuilder.loadTexts: mgNITDeliverySystemTable.setDescription('Delivery system information for this Transport Stream read from the delivery system descriptors in the NIT. This information is found by reading the transport_stream_id from the PAT. This transport_stream_id is then located in the transport_stream_loop of the NIT (actual_network). The delivery system descriptor found in this instance of the loop is analysed to obtain the values in this table.')
mgNITDeliverySystemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 1, 8, 1), ).setIndexNames((0, "DVB-MGSIGNALCHARACTERISTICS-MIB", "mgNITDSInputNumber"))
if mibBuilder.loadTexts: mgNITDeliverySystemEntry.setStatus('current')
if mibBuilder.loadTexts: mgNITDeliverySystemEntry.setDescription('Row specification')
mgNITDSInputNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 1, 8, 1, 1), InputNumber())
if mibBuilder.loadTexts: mgNITDSInputNumber.setStatus('current')
if mibBuilder.loadTexts: mgNITDSInputNumber.setDescription('The physical input on which this Transport Stream appears')
mgNITDSSystemType = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 1, 8, 1, 2), DeliverySystemType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgNITDSSystemType.setStatus('current')
if mibBuilder.loadTexts: mgNITDSSystemType.setDescription("Which delivery system is in use. The value of this object determines which other objects in this table row have valid values. If this object has the value 'unknown' none of the other objects in this table row have valid values.")
mgNITDSFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 1, 8, 1, 3), FloatingPoint()).setUnits('MHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: mgNITDSFrequency.setReference('EN 300 468 6.2.12')
if mibBuilder.loadTexts: mgNITDSFrequency.setStatus('current')
if mibBuilder.loadTexts: mgNITDSFrequency.setDescription('The frequency or centre_frequency for the transmission expressed in MHz Valid for: cable, satellite, terrestrial')
mgNITDSFecOuter = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 1, 8, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgNITDSFecOuter.setReference('EN 300 468 Table 31')
if mibBuilder.loadTexts: mgNITDSFecOuter.setStatus('current')
if mibBuilder.loadTexts: mgNITDSFecOuter.setDescription('The Outer Forward Error Correction Code, values as specified for the cable_delivery_system_descriptor. Valid for: cable')
mgNITDSCableModulation = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 1, 8, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgNITDSCableModulation.setReference('EN 300 468 Table 32')
if mibBuilder.loadTexts: mgNITDSCableModulation.setStatus('current')
if mibBuilder.loadTexts: mgNITDSCableModulation.setDescription('Modulation scheme, values as specified for the cable_delivery_system_descriptor Valid for: cable')
mgNITDSSymbolRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 1, 8, 1, 6), Unsigned32()).setUnits('symbol/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: mgNITDSSymbolRate.setReference('EN 300 468 6.2.12.1 and 6.2.12.2')
if mibBuilder.loadTexts: mgNITDSSymbolRate.setStatus('current')
if mibBuilder.loadTexts: mgNITDSSymbolRate.setDescription('The symbol rate in symbols per second Valid for: cable, satellite')
mgNITDSFecInner = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 1, 8, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgNITDSFecInner.setReference('EN 300 468 Table 33')
if mibBuilder.loadTexts: mgNITDSFecInner.setStatus('current')
if mibBuilder.loadTexts: mgNITDSFecInner.setDescription('The inner FEC scheme, values as specified for the cable_delivery_system_descriptor Valid for: cable, satellite')
mgNITDSOrbitalPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 1, 8, 1, 8), FloatingPoint()).setUnits('degree').setMaxAccess("readonly")
if mibBuilder.loadTexts: mgNITDSOrbitalPosition.setReference('EN 300 468 6.2.12.2')
if mibBuilder.loadTexts: mgNITDSOrbitalPosition.setStatus('current')
if mibBuilder.loadTexts: mgNITDSOrbitalPosition.setDescription('The orbital position in degrees Valid for: satellite')
mgNITDSWestEastFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 1, 8, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("west", 0), ("east", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgNITDSWestEastFlag.setStatus('current')
if mibBuilder.loadTexts: mgNITDSWestEastFlag.setDescription('Orbital position direction: east (1) or west (0). Valid for: satellite')
mgNITDSPolarization = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 1, 8, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgNITDSPolarization.setReference('EN 300 468 Table 35')
if mibBuilder.loadTexts: mgNITDSPolarization.setStatus('current')
if mibBuilder.loadTexts: mgNITDSPolarization.setDescription('Polarization, values as specified for the satellite_delivery_system_descriptor Valid for: satellite')
mgNITDSSatelliteModulation = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 1, 8, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgNITDSSatelliteModulation.setReference('EN 300 468 Table 36')
if mibBuilder.loadTexts: mgNITDSSatelliteModulation.setStatus('current')
if mibBuilder.loadTexts: mgNITDSSatelliteModulation.setDescription('Modulation scheme, values as specified for the satellite_delivery_system_descriptor Valid for: satellite')
mgNITDSBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 1, 8, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgNITDSBandwidth.setReference('EN 300 468 Table 38')
if mibBuilder.loadTexts: mgNITDSBandwidth.setStatus('current')
if mibBuilder.loadTexts: mgNITDSBandwidth.setDescription('The bandwidth, values as specified for the terrestrial_delivery_system_descriptor Valid for: terrestrial')
mgNITDSConstellation = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 1, 8, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgNITDSConstellation.setReference('EN 300 468 Table 39')
if mibBuilder.loadTexts: mgNITDSConstellation.setStatus('current')
if mibBuilder.loadTexts: mgNITDSConstellation.setDescription('The modulation constellation: values as specified for the terrestrial_delivery_system_descriptor Valid for: terrestrial')
mgNITDSHierarchyInformation = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 1, 8, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgNITDSHierarchyInformation.setReference('EN 300 468 Table 40')
if mibBuilder.loadTexts: mgNITDSHierarchyInformation.setStatus('current')
if mibBuilder.loadTexts: mgNITDSHierarchyInformation.setDescription('Hierarchy Information: values as specified for the terrestrial_delivery_system_descriptor Valid for: terrestrial')
mgNITDSCodeRateHPStream = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 1, 8, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgNITDSCodeRateHPStream.setReference('EN 300 468 Table 41')
if mibBuilder.loadTexts: mgNITDSCodeRateHPStream.setStatus('current')
if mibBuilder.loadTexts: mgNITDSCodeRateHPStream.setDescription('The code rate for the high priority stream: values as specified for the terrestrial_delivery_system_descriptor Valid for: terrestrial')
mgNITDSCodeRateLPStream = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 1, 8, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgNITDSCodeRateLPStream.setReference('EN 300 468 Table 41')
if mibBuilder.loadTexts: mgNITDSCodeRateLPStream.setStatus('current')
if mibBuilder.loadTexts: mgNITDSCodeRateLPStream.setDescription('The code rate for low priority stream: values as specified for the terrestrial_delivery_system_descriptor Valid for: terrestrial')
mgNITDSGuardInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 1, 8, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgNITDSGuardInterval.setReference('EN 300 468 Table 42')
if mibBuilder.loadTexts: mgNITDSGuardInterval.setStatus('current')
if mibBuilder.loadTexts: mgNITDSGuardInterval.setDescription('The guard_interval: values as specified for the terrestrial_delivery_system_descriptor Valid for: terrestrial')
mgNITDSTransmissionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 1, 8, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgNITDSTransmissionMode.setReference('EN 300 468 Table 43')
if mibBuilder.loadTexts: mgNITDSTransmissionMode.setStatus('current')
if mibBuilder.loadTexts: mgNITDSTransmissionMode.setDescription('The transmission_mode: values as specified for the terrestrial_delivery_system_descriptor Valid for: terrestrial')
mgNITDSOtherFrequencyFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 1, 8, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgNITDSOtherFrequencyFlag.setReference('EN 300 468 6.2.12.3')
if mibBuilder.loadTexts: mgNITDSOtherFrequencyFlag.setStatus('current')
if mibBuilder.loadTexts: mgNITDSOtherFrequencyFlag.setDescription('other_frequency_flag: values as specified for the terrestrial_delivery_system_descriptor Valid for: terrestrial')
mgRFCharacteristics = MibIdentifier((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 2))
mgRFCharacteristicsTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 2, 1))
rfTrapPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 2, 1, 0))
rfCharacteristicsChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 2, 1, 0, 1)).setObjects(("DVB-MGSIGNALCHARACTERISTICS-MIB", "rfCharacteristicsTrapInput"), ("DVB-MGSIGNALCHARACTERISTICS-MIB", "rfCharacteristicsTrapControlOID"), ("DVB-MGSIGNALCHARACTERISTICS-MIB", "rfCharacteristicsTrapControlChangeTime"))
if mibBuilder.loadTexts: rfCharacteristicsChangeTrap.setStatus('current')
if mibBuilder.loadTexts: rfCharacteristicsChangeTrap.setDescription('Trap which is sent when a value in the mgRFCharacteristics part of the MIB changes substantially. Transmission of the trap is subject to rate control through the rfCharacteristicsTrapControlRateStatus object.')
rfCharacteristicsTrapControlTable = MibTable((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 2, 1, 1), )
if mibBuilder.loadTexts: rfCharacteristicsTrapControlTable.setStatus('current')
if mibBuilder.loadTexts: rfCharacteristicsTrapControlTable.setDescription('Per-input table of values which control the generation of rfCharacteristicsChangeTrap traps.')
rfCharacteristicsTrapControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 2, 1, 1, 1), ).setIndexNames((0, "DVB-MGSIGNALCHARACTERISTICS-MIB", "rfCharacteristicsTrapControlInputNumber"))
if mibBuilder.loadTexts: rfCharacteristicsTrapControlEntry.setStatus('current')
if mibBuilder.loadTexts: rfCharacteristicsTrapControlEntry.setDescription('Row specification')
rfCharacteristicsTrapControlInputNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 2, 1, 1, 1, 1), InputNumber())
if mibBuilder.loadTexts: rfCharacteristicsTrapControlInputNumber.setStatus('current')
if mibBuilder.loadTexts: rfCharacteristicsTrapControlInputNumber.setDescription('Transport Stream on which an RF value has changed, triggering the transmission of the trap.')
rfCharacteristicsTrapControlOID = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 2, 1, 1, 1, 2), ObjectIdentifier()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: rfCharacteristicsTrapControlOID.setStatus('current')
if mibBuilder.loadTexts: rfCharacteristicsTrapControlOID.setDescription('This object holds the OID of the object within the rfCharacteristics branch of the MIB whose change triggered the trap. It is present for the formal purpose of defining the variable bindings returned with the rfCharacteristicsChangeTrap. It is not accessible for normal reading. Note that this may not be the only value which has changed; managers need to poll to obtain all the new values that they need.')
rfCharacteristicsTrapControlChangeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 2, 1, 1, 1, 3), DateAndTime()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: rfCharacteristicsTrapControlChangeTime.setStatus('current')
if mibBuilder.loadTexts: rfCharacteristicsTrapControlChangeTime.setDescription('This indicates the time when the change which triggered the trap occurred. It is present for the formal purpose of defining the variable bindings returned with the rfCharacteristicsChangeTrap. It is not accessible for normal reading.')
rfCharacteristicsTrapControlRateStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 2, 1, 1, 1, 4), RateStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfCharacteristicsTrapControlRateStatus.setStatus('current')
if mibBuilder.loadTexts: rfCharacteristicsTrapControlRateStatus.setDescription("This object is used for rate control of traps, preventing overload of the management network by transmission of an excessive number of traps. The value 'disabled' means that traps are never sent. The value 'enabled' means that a trap will be sent when triggered. When a trap is sent, the agent changes the value of this object to 'enabledThrottled'. In this state the agent will not send any more traps. The agent automatically changes the value back to 'enabled' when the time specified by trapControlPeriod expires. A management application may set the value to 'enabled' at any time, but must never set the value to 'enabledThrottled'.")
rfCharacteristicsTrapControlPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 2, 1, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600000))).setUnits('millisecond').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfCharacteristicsTrapControlPeriod.setStatus('current')
if mibBuilder.loadTexts: rfCharacteristicsTrapControlPeriod.setDescription('The agent will ensure that the interval between sending traps is no shorter than this time period (unless overridden by the manager).')
rfCharacteristicsTrapInput = MibScalar((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 2, 1, 2), InputNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: rfCharacteristicsTrapInput.setStatus('current')
if mibBuilder.loadTexts: rfCharacteristicsTrapInput.setDescription('The Transport Stream input whose change triggered the current trap. This information can also be obtained by analysing the rfCharacteristicsTrapOID, but rfCharacteristicsTrapInput provides the information directly. This object is present for the formal purpose of defining the variable bindings returned with the traps. It is not accessible for normal reading.')
mgRFCharacteristicsTable = MibTable((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 2, 2), )
if mibBuilder.loadTexts: mgRFCharacteristicsTable.setStatus('current')
if mibBuilder.loadTexts: mgRFCharacteristicsTable.setDescription("The RF characteristics of the input signal. These values represent the measuring instrument's 'best effort' to determine them.")
mgRFCharacteristicsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 2, 2, 1), ).setIndexNames((0, "DVB-MGSIGNALCHARACTERISTICS-MIB", "mgRFInputNumber"))
if mibBuilder.loadTexts: mgRFCharacteristicsEntry.setStatus('current')
if mibBuilder.loadTexts: mgRFCharacteristicsEntry.setDescription('Row specification')
mgRFInputNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 2, 2, 1, 1), InputNumber())
if mibBuilder.loadTexts: mgRFInputNumber.setStatus('current')
if mibBuilder.loadTexts: mgRFInputNumber.setDescription('The physical input on which these RF characteristics are found')
mgRFSystemType = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 2, 2, 1, 2), DeliverySystemType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgRFSystemType.setStatus('current')
if mibBuilder.loadTexts: mgRFSystemType.setDescription('Which delivery system is in use: cable, satellite or terrestrial. The value of this object determines which other objects in this table have valid values.')
mgRFCentreFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 2, 2, 1, 3), FloatingPoint()).setUnits('MHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: mgRFCentreFrequency.setStatus('current')
if mibBuilder.loadTexts: mgRFCentreFrequency.setDescription('This is the centre frequency to which the measuring equipment is tuned. This frequency is the actual input frequency to the measuring equipment, which may be at an intermediate frequency (IF) rather than the final RF. Valid for: cable, satellite, terrestrial')
mgRFModulation = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 2, 2, 1, 4), Modulation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgRFModulation.setStatus('current')
if mibBuilder.loadTexts: mgRFModulation.setDescription('The modulation scheme in use Valid for: cable, satellite, terrestrial')
mgRFFecInner = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 2, 2, 1, 5), InnerCodeRate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgRFFecInner.setStatus('current')
if mibBuilder.loadTexts: mgRFFecInner.setDescription('Inner Forward Error Correction scheme (also referred to as code rate). In the case of a hierarchical terrestrial transmission, this is the inner code rate for the high priority stream. Valid for: satellite, terrestrial')
mgRFFecInnerLP = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 2, 2, 1, 6), InnerCodeRate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgRFFecInnerLP.setStatus('current')
if mibBuilder.loadTexts: mgRFFecInnerLP.setDescription('Inner Forward Error Correction scheme (also referred to as code rate). This is the code rate for the low priority stream in a hierarchical terrestrial transmission. Valid for: terrestrial')
mgRFSymbolRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 2, 2, 1, 7), FloatingPoint()).setUnits('Msymbol/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: mgRFSymbolRate.setStatus('current')
if mibBuilder.loadTexts: mgRFSymbolRate.setDescription('Indicates the symbol rate of the transmission. Valid for: cable, satellite')
mgRFBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 2, 2, 1, 8), FloatingPoint()).setUnits('MHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: mgRFBandwidth.setStatus('current')
if mibBuilder.loadTexts: mgRFBandwidth.setDescription('Bandwidth of the signal. Normally this will be equivalent to the channel spacing. Valid for: terrestrial')
mgRFTransmissionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 2, 2, 1, 9), TerrestrialTransmissionMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgRFTransmissionMode.setStatus('current')
if mibBuilder.loadTexts: mgRFTransmissionMode.setDescription('Whether there are 2k or 8k carriers in the OFDM modulation scheme. Valid for: terrestrial')
mgRFIsHierarchical = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 2, 2, 1, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgRFIsHierarchical.setStatus('current')
if mibBuilder.loadTexts: mgRFIsHierarchical.setDescription('Whether the transmission is hierarchical Valid for: terrestrial')
mgRFGuardInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2696, 3, 3, 1, 2, 2, 1, 11), GuardInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgRFGuardInterval.setStatus('current')
if mibBuilder.loadTexts: mgRFGuardInterval.setDescription('The guard interval in use Valid for: terrestrial')
mgSignalCharacteristicsConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2696, 3, 3, 2))
mgSignalCharacteristicsCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2696, 3, 3, 2, 1))
mgSCTransportStreamCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2696, 3, 3, 2, 1, 1)).setObjects(("DVB-MGSIGNALCHARACTERISTICS-MIB", "mgSCTransportStreamGroup"), ("DVB-MGSIGNALCHARACTERISTICS-MIB", "mgSCTransportStreamTrapGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mgSCTransportStreamCompliance = mgSCTransportStreamCompliance.setStatus('current')
if mibBuilder.loadTexts: mgSCTransportStreamCompliance.setDescription('An implementation which provides all the information in the mgTSStructure part of the MIB and implements the tsStructureChangeTrap can claim this conformance.')
mgSCRadioFrequencyCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2696, 3, 3, 2, 1, 2)).setObjects(("DVB-MGSIGNALCHARACTERISTICS-MIB", "mgSCRadioFrequencyGroup"), ("DVB-MGSIGNALCHARACTERISTICS-MIB", "mgSCRadioFrequencyTrapGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mgSCRadioFrequencyCompliance = mgSCRadioFrequencyCompliance.setStatus('current')
if mibBuilder.loadTexts: mgSCRadioFrequencyCompliance.setDescription('An implementation which provides all the information in the mgRFCharacteristics part of the MIB and implements the rfCharacteristicsChangeTrap can claim this conformance.')
mgSignalCharacteristicsGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2696, 3, 3, 2, 3))
mgSCTransportStreamGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2696, 3, 3, 2, 3, 1)).setObjects(("DVB-MGSIGNALCHARACTERISTICS-MIB", "structureTrapControlOID"), ("DVB-MGSIGNALCHARACTERISTICS-MIB", "structureTrapControlChangeTime"), ("DVB-MGSIGNALCHARACTERISTICS-MIB", "structureTrapControlRateStatus"), ("DVB-MGSIGNALCHARACTERISTICS-MIB", "structureTrapControlPeriod"), ("DVB-MGSIGNALCHARACTERISTICS-MIB", "structureTrapInput"), ("DVB-MGSIGNALCHARACTERISTICS-MIB", "mgTSId"), ("DVB-MGSIGNALCHARACTERISTICS-MIB", "mgTSOriginalNetworkID"), ("DVB-MGSIGNALCHARACTERISTICS-MIB", "mgTSNetworkID"), ("DVB-MGSIGNALCHARACTERISTICS-MIB", "mgTSNetworkName"), ("DVB-MGSIGNALCHARACTERISTICS-MIB", "mgServiceType"), ("DVB-MGSIGNALCHARACTERISTICS-MIB", "mgServiceName"), ("DVB-MGSIGNALCHARACTERISTICS-MIB", "mgServiceProviderName"), ("DVB-MGSIGNALCHARACTERISTICS-MIB", "mgServicePMTPID"), ("DVB-MGSIGNALCHARACTERISTICS-MIB", "mgServicePCRPID"), ("DVB-MGSIGNALCHARACTERISTICS-MIB", "mgServiceCondAccess"), ("DVB-MGSIGNALCHARACTERISTICS-MIB", "mgServiceEITComponentDescriptor"), ("DVB-MGSIGNALCHARACTERISTICS-MIB", "mgPIDType"), ("DVB-MGSIGNALCHARACTERISTICS-MIB", "mgPIDCondAccess"), ("DVB-MGSIGNALCHARACTERISTICS-MIB", "mgEMMCASystemID"), ("DVB-MGSIGNALCHARACTERISTICS-MIB", "mgServiceECMCASystemID"), ("DVB-MGSIGNALCHARACTERISTICS-MIB", "mgPIDECMCASystemID"), ("DVB-MGSIGNALCHARACTERISTICS-MIB", "mgNITDSSystemType"), ("DVB-MGSIGNALCHARACTERISTICS-MIB", "mgNITDSFrequency"), ("DVB-MGSIGNALCHARACTERISTICS-MIB", "mgNITDSFecOuter"), ("DVB-MGSIGNALCHARACTERISTICS-MIB", "mgNITDSCableModulation"), ("DVB-MGSIGNALCHARACTERISTICS-MIB", "mgNITDSSymbolRate"), ("DVB-MGSIGNALCHARACTERISTICS-MIB", "mgNITDSFecInner"), ("DVB-MGSIGNALCHARACTERISTICS-MIB", "mgNITDSOrbitalPosition"), ("DVB-MGSIGNALCHARACTERISTICS-MIB", "mgNITDSWestEastFlag"), ("DVB-MGSIGNALCHARACTERISTICS-MIB", "mgNITDSPolarization"), ("DVB-MGSIGNALCHARACTERISTICS-MIB", "mgNITDSSatelliteModulation"), ("DVB-MGSIGNALCHARACTERISTICS-MIB", "mgNITDSBandwidth"), ("DVB-MGSIGNALCHARACTERISTICS-MIB", "mgNITDSConstellation"), ("DVB-MGSIGNALCHARACTERISTICS-MIB", "mgNITDSHierarchyInformation"), ("DVB-MGSIGNALCHARACTERISTICS-MIB", "mgNITDSCodeRateHPStream"), ("DVB-MGSIGNALCHARACTERISTICS-MIB", "mgNITDSCodeRateLPStream"), ("DVB-MGSIGNALCHARACTERISTICS-MIB", "mgNITDSGuardInterval"), ("DVB-MGSIGNALCHARACTERISTICS-MIB", "mgNITDSTransmissionMode"), ("DVB-MGSIGNALCHARACTERISTICS-MIB", "mgNITDSOtherFrequencyFlag"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mgSCTransportStreamGroup = mgSCTransportStreamGroup.setStatus('current')
if mibBuilder.loadTexts: mgSCTransportStreamGroup.setDescription('This group contains all the objects in the mgTSStructure part of the MIB.')
mgSCRadioFrequencyGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2696, 3, 3, 2, 3, 2)).setObjects(("DVB-MGSIGNALCHARACTERISTICS-MIB", "rfCharacteristicsTrapControlOID"), ("DVB-MGSIGNALCHARACTERISTICS-MIB", "rfCharacteristicsTrapControlChangeTime"), ("DVB-MGSIGNALCHARACTERISTICS-MIB", "rfCharacteristicsTrapControlRateStatus"), ("DVB-MGSIGNALCHARACTERISTICS-MIB", "rfCharacteristicsTrapControlPeriod"), ("DVB-MGSIGNALCHARACTERISTICS-MIB", "rfCharacteristicsTrapInput"), ("DVB-MGSIGNALCHARACTERISTICS-MIB", "mgRFSystemType"), ("DVB-MGSIGNALCHARACTERISTICS-MIB", "mgRFCentreFrequency"), ("DVB-MGSIGNALCHARACTERISTICS-MIB", "mgRFModulation"), ("DVB-MGSIGNALCHARACTERISTICS-MIB", "mgRFFecInner"), ("DVB-MGSIGNALCHARACTERISTICS-MIB", "mgRFFecInnerLP"), ("DVB-MGSIGNALCHARACTERISTICS-MIB", "mgRFSymbolRate"), ("DVB-MGSIGNALCHARACTERISTICS-MIB", "mgRFBandwidth"), ("DVB-MGSIGNALCHARACTERISTICS-MIB", "mgRFTransmissionMode"), ("DVB-MGSIGNALCHARACTERISTICS-MIB", "mgRFIsHierarchical"), ("DVB-MGSIGNALCHARACTERISTICS-MIB", "mgRFGuardInterval"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mgSCRadioFrequencyGroup = mgSCRadioFrequencyGroup.setStatus('current')
if mibBuilder.loadTexts: mgSCRadioFrequencyGroup.setDescription('This group contains all the objects in the mgRFCharacteristics part of the MIB')
mgSCTransportStreamTrapGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 2696, 3, 3, 2, 3, 3)).setObjects(("DVB-MGSIGNALCHARACTERISTICS-MIB", "tsStructureChangeTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mgSCTransportStreamTrapGroup = mgSCTransportStreamTrapGroup.setStatus('current')
if mibBuilder.loadTexts: mgSCTransportStreamTrapGroup.setDescription('Contains tsStructureChangeTrap')
mgSCRadioFrequencyTrapGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 2696, 3, 3, 2, 3, 4)).setObjects(("DVB-MGSIGNALCHARACTERISTICS-MIB", "rfCharacteristicsChangeTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mgSCRadioFrequencyTrapGroup = mgSCRadioFrequencyTrapGroup.setStatus('current')
if mibBuilder.loadTexts: mgSCRadioFrequencyTrapGroup.setDescription('Contains rfCharacteristicsChangeTrap')
mibBuilder.exportSymbols("DVB-MGSIGNALCHARACTERISTICS-MIB", structureTrapControlInputNumber=structureTrapControlInputNumber, TerrestrialTransmissionMode=TerrestrialTransmissionMode, mgTSNetworkID=mgTSNetworkID, mgRFModulation=mgRFModulation, mgServiceEntry=mgServiceEntry, GuardInterval=GuardInterval, tsStructureChangeTrap=tsStructureChangeTrap, mgPIDType=mgPIDType, rfCharacteristicsTrapControlEntry=rfCharacteristicsTrapControlEntry, mgServiceName=mgServiceName, mgTSStructure=mgTSStructure, mgRFCharacteristicsTrap=mgRFCharacteristicsTrap, mgNITDSFecOuter=mgNITDSFecOuter, mgTSId=mgTSId, mgRFCharacteristicsTable=mgRFCharacteristicsTable, rfCharacteristicsTrapControlInputNumber=rfCharacteristicsTrapControlInputNumber, mgRFSystemType=mgRFSystemType, mgTSStructureTrap=mgTSStructureTrap, mgNITDSTransmissionMode=mgNITDSTransmissionMode, dvb=dvb, rfCharacteristicsTrapControlRateStatus=rfCharacteristicsTrapControlRateStatus, mgPIDECMEntry=mgPIDECMEntry, ReadableString=ReadableString, mgRFBandwidth=mgRFBandwidth, mgNITDSSymbolRate=mgNITDSSymbolRate, mgServiceECMTable=mgServiceECMTable, mgPIDECMInputNumber=mgPIDECMInputNumber, mgServiceTable=mgServiceTable, mgPIDInputNumber=mgPIDInputNumber, mgNITDeliverySystemEntry=mgNITDeliverySystemEntry, rfCharacteristicsTrapControlOID=rfCharacteristicsTrapControlOID, mgPIDServiceNumber=mgPIDServiceNumber, mgServiceProviderName=mgServiceProviderName, PYSNMP_MODULE_ID=mgSignalCharacteristics, mgServiceCondAccess=mgServiceCondAccess, mgNITDSFecInner=mgNITDSFecInner, mgSignalCharacteristicsGroups=mgSignalCharacteristicsGroups, rfCharacteristicsTrapControlTable=rfCharacteristicsTrapControlTable, mgSCRadioFrequencyCompliance=mgSCRadioFrequencyCompliance, mgNITDSOrbitalPosition=mgNITDSOrbitalPosition, mgTSInputNumber=mgTSInputNumber, mgServiceNumber=mgServiceNumber, mgNITDSPolarization=mgNITDSPolarization, mgTSEntry=mgTSEntry, mgServiceECMEntry=mgServiceECMEntry, mgServicePCRPID=mgServicePCRPID, InnerCodeRate=InnerCodeRate, mgSignalCharacteristicsObjects=mgSignalCharacteristicsObjects, rfTrapPrefix=rfTrapPrefix, mgEMMEntry=mgEMMEntry, mgServiceECMCaPID=mgServiceECMCaPID, mgSignalCharacteristics=mgSignalCharacteristics, NetworkID=NetworkID, mgEMMCASystemID=mgEMMCASystemID, mgNITDSCodeRateLPStream=mgNITDSCodeRateLPStream, mgNITDSFrequency=mgNITDSFrequency, mgTSOriginalNetworkID=mgTSOriginalNetworkID, structureTrapControlOID=structureTrapControlOID, rfCharacteristicsChangeTrap=rfCharacteristicsChangeTrap, mgNITDSCodeRateHPStream=mgNITDSCodeRateHPStream, mgTSNetworkName=mgTSNetworkName, mgRFInputNumber=mgRFInputNumber, structureTrapControlEntry=structureTrapControlEntry, mgPIDECMCASystemID=mgPIDECMCASystemID, mgServiceInputNumber=mgServiceInputNumber, mgSCTransportStreamCompliance=mgSCTransportStreamCompliance, mgRFFecInnerLP=mgRFFecInnerLP, CASystemID=CASystemID, mgNITDSWestEastFlag=mgNITDSWestEastFlag, mgNITDSOtherFrequencyFlag=mgNITDSOtherFrequencyFlag, mgEMMTable=mgEMMTable, mg=mg, mgNITDeliverySystemTable=mgNITDeliverySystemTable, rfCharacteristicsTrapInput=rfCharacteristicsTrapInput, mgRFIsHierarchical=mgRFIsHierarchical, mgEMMCaPID=mgEMMCaPID, mgSignalCharacteristicsConformance=mgSignalCharacteristicsConformance, mgPIDEntry=mgPIDEntry, mgPIDNumber=mgPIDNumber, mgSCTransportStreamTrapGroup=mgSCTransportStreamTrapGroup, mgRFCharacteristicsEntry=mgRFCharacteristicsEntry, mgNITDSSystemType=mgNITDSSystemType, mgNITDSBandwidth=mgNITDSBandwidth, mgRFCharacteristics=mgRFCharacteristics, mgSCRadioFrequencyTrapGroup=mgSCRadioFrequencyTrapGroup, mgServiceECMCASystemID=mgServiceECMCASystemID, mgTSTable=mgTSTable, mgSignalCharacteristicsCompliances=mgSignalCharacteristicsCompliances, mgSCTransportStreamGroup=mgSCTransportStreamGroup, mgNITDSCableModulation=mgNITDSCableModulation, mgEMMInputNumber=mgEMMInputNumber, mgServiceType=mgServiceType, EncryptionState=EncryptionState, mgPIDECMTable=mgPIDECMTable, mgRFGuardInterval=mgRFGuardInterval, rfCharacteristicsTrapControlPeriod=rfCharacteristicsTrapControlPeriod, structureTrapPrefix=structureTrapPrefix, mgRFTransmissionMode=mgRFTransmissionMode, structureTrapInput=structureTrapInput, mgServiceECMServiceNumber=mgServiceECMServiceNumber, rfCharacteristicsTrapControlChangeTime=rfCharacteristicsTrapControlChangeTime, structureTrapControlChangeTime=structureTrapControlChangeTime, mgNITDSConstellation=mgNITDSConstellation, structureTrapControlRateStatus=structureTrapControlRateStatus, mgPIDTable=mgPIDTable, mgRFCentreFrequency=mgRFCentreFrequency, mgServicePMTPID=mgServicePMTPID, mgRFSymbolRate=mgRFSymbolRate, mgRFFecInner=mgRFFecInner, mgPIDCondAccess=mgPIDCondAccess, mgPIDECMServiceNumber=mgPIDECMServiceNumber, structureTrapControlTable=structureTrapControlTable, mgNITDSHierarchyInformation=mgNITDSHierarchyInformation, mgPIDECMCaPID=mgPIDECMCaPID, mgNITDSSatelliteModulation=mgNITDSSatelliteModulation, mgSCRadioFrequencyGroup=mgSCRadioFrequencyGroup, mgPIDECMPID=mgPIDECMPID, mgNITDSGuardInterval=mgNITDSGuardInterval, structureTrapControlPeriod=structureTrapControlPeriod, PID=PID, mgServiceECMInputNumber=mgServiceECMInputNumber, mgServiceEITComponentDescriptor=mgServiceEITComponentDescriptor, mgNITDSInputNumber=mgNITDSInputNumber)
