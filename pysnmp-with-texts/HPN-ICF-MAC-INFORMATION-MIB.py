#
# PySNMP MIB module HPN-ICF-MAC-INFORMATION-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HPN-ICF-MAC-INFORMATION-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:40:07 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint")
hpnicfCommon, = mibBuilder.importSymbols("HPN-ICF-OID-MIB", "hpnicfCommon")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Unsigned32, IpAddress, Gauge32, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, TimeTicks, Counter32, Bits, ObjectIdentity, Integer32, Counter64, NotificationType, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "IpAddress", "Gauge32", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "TimeTicks", "Counter32", "Bits", "ObjectIdentity", "Integer32", "Counter64", "NotificationType", "ModuleIdentity")
MacAddress, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "TextualConvention", "DisplayString")
hpnicfMACInformation = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 87))
hpnicfMACInformation.setRevisions(('2007-12-28 19:12',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hpnicfMACInformation.setRevisionsDescriptions(('The initial version of this MIB file.',))
if mibBuilder.loadTexts: hpnicfMACInformation.setLastUpdated('200712281912Z')
if mibBuilder.loadTexts: hpnicfMACInformation.setOrganization('')
if mibBuilder.loadTexts: hpnicfMACInformation.setContactInfo('')
if mibBuilder.loadTexts: hpnicfMACInformation.setDescription('This MIB file is to provide the definition of the MAC Information general configuration. MAC Information feature is used to make that the changed MAC information in the monitored device is knowable in remote monitoring device.')
class HpnicfMACInfoWorkMode(TextualConvention, Integer32):
    description = 'The working mode of the MAC Information feature.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("trap", 1), ("syslog", 2))

hpnicfMACInformationObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 87, 1))
hpnicfMACInformationMibGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 87, 1, 1))
hpnicfMACInformationMIBTableTroop = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 87, 1, 2))
hpnicfMACInformationMibTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 87, 1, 3))
hpnicfMACInformationMibTrapExt = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 87, 1, 4))
hpnicfMACInformationEnabled = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 87, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfMACInformationEnabled.setStatus('current')
if mibBuilder.loadTexts: hpnicfMACInformationEnabled.setDescription('The value is a global setting. The feature will not work until the value is set to enabled(1). If the value is set to disabled(2), the feature will stop working even there are interfaces that have been enabled the feature.')
hpnicfMACInformationcSendInterval = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 87, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 20000)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfMACInformationcSendInterval.setStatus('current')
if mibBuilder.loadTexts: hpnicfMACInformationcSendInterval.setDescription('The maximum interval that the device generate syslogs or traps. The unit is second.')
hpnicfMACInformationLearntMACNum = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 87, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfMACInformationLearntMACNum.setStatus('current')
if mibBuilder.loadTexts: hpnicfMACInformationLearntMACNum.setDescription('The number of MAC addresses that learnt by the device since the hpnicfMACInformationEnabled is set to enabled(1) and hpnicfMACLearntEnable is set to enabled(1) at least on one interface. If the hpnicfMACInformationEnabled is set to disabled(2), the object will always return 0.')
hpnicfMACInformationRemovedMACNum = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 87, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfMACInformationRemovedMACNum.setStatus('current')
if mibBuilder.loadTexts: hpnicfMACInformationRemovedMACNum.setDescription('The number of MAC addresses that removed by the device since the hpnicfMACInformationEnabled is set to enabled(1) and hpnicfMACRemovedEnable is set to enabled(1) at least on one interface. If the hpnicfMACInformationEnabled is set to disabled(2), the object will always return 0.')
hpnicfMACInformationTrapSendNum = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 87, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfMACInformationTrapSendNum.setStatus('current')
if mibBuilder.loadTexts: hpnicfMACInformationTrapSendNum.setDescription('The number of traps that have been generated. This object is valid only when the hpnicfMACInfomationWorkMode is set to trap(1). If the hpnicfMACInfomationWorkMode is set to syslog(2), the object will always return 0.')
hpnicfMACInformationSyslogSendNum = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 87, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfMACInformationSyslogSendNum.setStatus('current')
if mibBuilder.loadTexts: hpnicfMACInformationSyslogSendNum.setDescription('The number of syslogs that have been generated. This object is valid only when the hpnicfMACInfomationWorkMode is set to syslog(2). If the hpnicfMACInfomationWorkMode is set to trap(1), the object will always return 0.')
hpnicfMACInformationCacheLen = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 87, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000)).clone(50)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfMACInformationCacheLen.setStatus('current')
if mibBuilder.loadTexts: hpnicfMACInformationCacheLen.setDescription('The maximum queue lenth used to cache the changed MAC addresses information in the monitored device. If the value is set to 0, syslog or trap will generate as soon as there is a MAC address learnt or removed.')
hpnicfMACInfomationWorkMode = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 87, 1, 1, 8), HpnicfMACInfoWorkMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfMACInfomationWorkMode.setStatus('current')
if mibBuilder.loadTexts: hpnicfMACInfomationWorkMode.setDescription('The working mode of MAC Information feature. If the object is set to trap(1), the device will use trap mode to notify the MAC address information and all properties of trap interrelated is valid. If the object is set to syslog(2), the device will use syslog mode to notify the MAC address information and all properties of trap interrelated is invalid.')
hpnicfMACInfomationIfTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 87, 1, 2, 1), )
if mibBuilder.loadTexts: hpnicfMACInfomationIfTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfMACInfomationIfTable.setDescription('The table is used to enable or disable the MAC Information feature on interfaces.')
hpnicfMACInfomationIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 87, 1, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hpnicfMACInfomationIfEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfMACInfomationIfEntry.setDescription('The entry of hpnicfMACInfomationIfTable.')
hpnicfMACLearntEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 87, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfMACLearntEnable.setStatus('current')
if mibBuilder.loadTexts: hpnicfMACLearntEnable.setDescription('If the object is set to enabled(1) on interface, the device will cache the MAC address information that learnt on the interface.')
hpnicfMACRemovedEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 87, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfMACRemovedEnable.setStatus('current')
if mibBuilder.loadTexts: hpnicfMACRemovedEnable.setDescription('If the object is set to enable(1) on interface, the device will cache the MAC address information that removed on the interface.')
hpnicfMACInformationTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 87, 1, 3, 0))
hpnicfMACInformationChangedTrap = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 87, 1, 3, 0, 1)).setObjects(("HPN-ICF-MAC-INFORMATION-MIB", "hpnicfMACInfoTrapIndex"), ("HPN-ICF-MAC-INFORMATION-MIB", "hpnicfMACInfoTrapCount"), ("HPN-ICF-MAC-INFORMATION-MIB", "hpnicfMACInfoTrapMsg"))
if mibBuilder.loadTexts: hpnicfMACInformationChangedTrap.setStatus('current')
if mibBuilder.loadTexts: hpnicfMACInformationChangedTrap.setDescription('When the cached number of MAC address information is reached the value specified by hpnicfMACInformationCacheLen, trap is generated and is sent to the remote monitoring device. The trap is also generated when the amount of time elapsed since the previous notification is greater than the interval value specified by hpnicfMACInformationcSendInterval and there is at least one cached MAC address information learnt or removed. The object is valid only when hpnicfMACInfomationWorkMode is set to trap(1). When the hpnicfMACInfomationWorkMode is set to syslog(2), No trap will be generated even hpnicfMACInformationEnabled is set to enabled(1) and the feature is enabled on interface.')
hpnicfMACInformationTrapObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 87, 1, 3, 2))
hpnicfMACInfoTrapIndex = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 87, 1, 3, 2, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfMACInfoTrapIndex.setStatus('current')
if mibBuilder.loadTexts: hpnicfMACInfoTrapIndex.setDescription('The sequence number of trap information. When it reaches the maximum value, it should be set to 1.')
hpnicfMACInfoTrapCount = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 87, 1, 3, 2, 2), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfMACInfoTrapCount.setStatus('current')
if mibBuilder.loadTexts: hpnicfMACInfoTrapCount.setDescription('The cell number of the current trap information. The trap message may consists of more than one MAC address information. Each of the one MAC address information in one trap is called cell.')
hpnicfMACInfoTrapMsg = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 87, 1, 3, 2, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 254))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfMACInfoTrapMsg.setStatus('current')
if mibBuilder.loadTexts: hpnicfMACInfoTrapMsg.setDescription("This object is the MAC information that learnt or removed in the monitored device. It can consists of more than one MAC information in the object. This object is in the format of '<cell1><cell2>...'. Each cell consists of 12 octets in the format of '<operationType><VLAN><MAC><MACtype><ifIndex>'. <operationType> is the reason type of MAC address changed and have size of 1 octet. It only supports the following values. 1 - MAC learnt. 2 - MAC removed. <VLAN> is the vlan number that correspond to the MAC address in MAC address table and has size of 2 octet. <MAC> is the MAC address and has size of 6 octets. <MACtype> is the MAC address type and has size of 1 octet. It only supports the following values. 0 - Unknown 1 - Learnt 2 - Config dynamic 3 - Config static 4 - Blackhole 5 - Security 6 - 802.1x 7 - MAC authentication 8 - Voice VLAN 9 - Reserved <ifIndex> is the index of the interface where the MAC address is learnt or removed and has size of 2 octets.")
hpnicfMACInformationTrapsExt = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 87, 1, 4, 0))
hpnicfMACInformationChangedTrapExt = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 87, 1, 4, 0, 1)).setObjects(("HPN-ICF-MAC-INFORMATION-MIB", "hpnicfMACInfoTrapVerExt"), ("HPN-ICF-MAC-INFORMATION-MIB", "hpnicfMACInfoTrapIndexExt"), ("HPN-ICF-MAC-INFORMATION-MIB", "hpnicfMACInfoTrapCountExt"), ("HPN-ICF-MAC-INFORMATION-MIB", "hpnicfMACInfoTrapMsgExt"))
if mibBuilder.loadTexts: hpnicfMACInformationChangedTrapExt.setStatus('current')
if mibBuilder.loadTexts: hpnicfMACInformationChangedTrapExt.setDescription('When the cached number of MAC address information is reached the value specified by hpnicfMACInformationCacheLen, trap is generated and is sent to the remote monitoring device. The trap is also generated when the amount of time elapsed since the previous notification is greater than the interval value specified by hpnicfMACInformationcSendInterval and there is at least one cached MAC address information learnt or removed. The object is valid only when hpnicfMACInfomationWorkMode is set to trap(1). When the hpnicfMACInfomationWorkMode is set to syslog(2), No trap will be generated even hpnicfMACInformationEnabled is set to enabled(1) and the feature is enabled on interface.')
hpnicfMACInformationMovedTrap = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 87, 1, 4, 0, 2)).setObjects(("HPN-ICF-MAC-INFORMATION-MIB", "hpnicfMACInfoTrapMsgMovedAddress"), ("HPN-ICF-MAC-INFORMATION-MIB", "hpnicfMACInfoTrapMsgMovedVlan"), ("HPN-ICF-MAC-INFORMATION-MIB", "hpnicfMACInfoTrapMsgMovedFromIf"), ("HPN-ICF-MAC-INFORMATION-MIB", "hpnicfMACInfoTrapMsgMovedToIf"), ("HPN-ICF-MAC-INFORMATION-MIB", "hpnicfMACInfoTrapMsgMovedCount"))
if mibBuilder.loadTexts: hpnicfMACInformationMovedTrap.setStatus('current')
if mibBuilder.loadTexts: hpnicfMACInformationMovedTrap.setDescription('When the MAC address has been moved to another interface, trap is generated and is sent to the remote monitoring device.')
hpnicfMACInformationTrapObjectsExt = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 87, 1, 4, 2))
hpnicfMACInfoTrapVerExt = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 87, 1, 4, 2, 1), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfMACInfoTrapVerExt.setStatus('current')
if mibBuilder.loadTexts: hpnicfMACInfoTrapVerExt.setDescription('The version of trap information.')
hpnicfMACInfoTrapIndexExt = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 87, 1, 4, 2, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfMACInfoTrapIndexExt.setStatus('current')
if mibBuilder.loadTexts: hpnicfMACInfoTrapIndexExt.setDescription('The sequence number of trap information. When it reaches the maximum value, it should be set to 1.')
hpnicfMACInfoTrapCountExt = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 87, 1, 4, 2, 3), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfMACInfoTrapCountExt.setStatus('current')
if mibBuilder.loadTexts: hpnicfMACInfoTrapCountExt.setDescription('The cell number of the current trap information. The trap message may consists of more than one MAC address information. Each of the one MAC address information in one trap is called cell.')
hpnicfMACInfoTrapMsgExt = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 87, 1, 4, 2, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 254))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfMACInfoTrapMsgExt.setStatus('current')
if mibBuilder.loadTexts: hpnicfMACInfoTrapMsgExt.setDescription("This object is the MAC information that learnt or removed in the monitored device. It can consists of more than one MAC information in the object. This object is in the format of '<cell1><cell2>...'. Each cell consists of 14 octets in the format of '<operationType><VLAN><MAC><MACtype><ifIndex>'. <operationType> is the reason type of MAC address changed and have size of 1 octet. It only supports the following values. 1 - MAC learnt. 2 - MAC removed. <VLAN> is the vlan number that correspond to the MAC address in MAC address table and has size of 2 octet. <MAC> is the MAC address and has size of 6 octets. <MACtype> is the MAC address type and has size of 1 octet. It only supports the following values. 0 - Unknown 1 - Learnt 2 - Config dynamic 3 - Config static 4 - Blackhole 5 - Security 6 - 802.1x 7 - MAC authentication 8 - Voice VLAN 9 - Reserved <ifIndex> is the index of the interface where the MAC address is learnt or removed and has size of 4 octets.")
hpnicfMACInfoTrapMsgMovedAddress = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 87, 1, 4, 2, 5), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfMACInfoTrapMsgMovedAddress.setStatus('current')
if mibBuilder.loadTexts: hpnicfMACInfoTrapMsgMovedAddress.setDescription('The MAC address that is moved between interfaces.')
hpnicfMACInfoTrapMsgMovedVlan = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 87, 1, 4, 2, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfMACInfoTrapMsgMovedVlan.setStatus('current')
if mibBuilder.loadTexts: hpnicfMACInfoTrapMsgMovedVlan.setDescription('The VLAN number in which the MAC address is moved.')
hpnicfMACInfoTrapMsgMovedFromIf = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 87, 1, 4, 2, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfMACInfoTrapMsgMovedFromIf.setStatus('current')
if mibBuilder.loadTexts: hpnicfMACInfoTrapMsgMovedFromIf.setDescription('The index of the interface from which the MAC address is moved.')
hpnicfMACInfoTrapMsgMovedToIf = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 87, 1, 4, 2, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfMACInfoTrapMsgMovedToIf.setStatus('current')
if mibBuilder.loadTexts: hpnicfMACInfoTrapMsgMovedToIf.setDescription('The index of the interface to which the MAC address is moved.')
hpnicfMACInfoTrapMsgMovedCount = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 87, 1, 4, 2, 9), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfMACInfoTrapMsgMovedCount.setStatus('current')
if mibBuilder.loadTexts: hpnicfMACInfoTrapMsgMovedCount.setDescription('The times for which the MAC address has been moved between the interfaces.')
mibBuilder.exportSymbols("HPN-ICF-MAC-INFORMATION-MIB", hpnicfMACInformationMovedTrap=hpnicfMACInformationMovedTrap, hpnicfMACInfoTrapMsgMovedCount=hpnicfMACInfoTrapMsgMovedCount, hpnicfMACInformationEnabled=hpnicfMACInformationEnabled, hpnicfMACInformationTraps=hpnicfMACInformationTraps, hpnicfMACInformationTrapsExt=hpnicfMACInformationTrapsExt, hpnicfMACInfoTrapMsgMovedVlan=hpnicfMACInfoTrapMsgMovedVlan, hpnicfMACInformationLearntMACNum=hpnicfMACInformationLearntMACNum, hpnicfMACInfoTrapMsg=hpnicfMACInfoTrapMsg, hpnicfMACInformationMibGlobal=hpnicfMACInformationMibGlobal, hpnicfMACInformationRemovedMACNum=hpnicfMACInformationRemovedMACNum, hpnicfMACInfoTrapMsgMovedToIf=hpnicfMACInfoTrapMsgMovedToIf, hpnicfMACInformationMIBTableTroop=hpnicfMACInformationMIBTableTroop, hpnicfMACInformationTrapSendNum=hpnicfMACInformationTrapSendNum, hpnicfMACRemovedEnable=hpnicfMACRemovedEnable, hpnicfMACInformationChangedTrapExt=hpnicfMACInformationChangedTrapExt, hpnicfMACInfoTrapCountExt=hpnicfMACInfoTrapCountExt, hpnicfMACInfoTrapIndexExt=hpnicfMACInfoTrapIndexExt, hpnicfMACInfoTrapMsgMovedAddress=hpnicfMACInfoTrapMsgMovedAddress, hpnicfMACInformationSyslogSendNum=hpnicfMACInformationSyslogSendNum, hpnicfMACInfomationIfTable=hpnicfMACInfomationIfTable, hpnicfMACInfoTrapVerExt=hpnicfMACInfoTrapVerExt, hpnicfMACInfoTrapMsgMovedFromIf=hpnicfMACInfoTrapMsgMovedFromIf, hpnicfMACInformationTrapObjectsExt=hpnicfMACInformationTrapObjectsExt, hpnicfMACInfomationWorkMode=hpnicfMACInfomationWorkMode, hpnicfMACInformationMibTrap=hpnicfMACInformationMibTrap, hpnicfMACInfomationIfEntry=hpnicfMACInfomationIfEntry, hpnicfMACInfoTrapCount=hpnicfMACInfoTrapCount, hpnicfMACInformation=hpnicfMACInformation, hpnicfMACInformationTrapObjects=hpnicfMACInformationTrapObjects, hpnicfMACLearntEnable=hpnicfMACLearntEnable, hpnicfMACInformationObjects=hpnicfMACInformationObjects, hpnicfMACInformationChangedTrap=hpnicfMACInformationChangedTrap, PYSNMP_MODULE_ID=hpnicfMACInformation, hpnicfMACInformationMibTrapExt=hpnicfMACInformationMibTrapExt, hpnicfMACInformationCacheLen=hpnicfMACInformationCacheLen, hpnicfMACInfoTrapMsgExt=hpnicfMACInfoTrapMsgExt, hpnicfMACInformationcSendInterval=hpnicfMACInformationcSendInterval, hpnicfMACInfoTrapIndex=hpnicfMACInfoTrapIndex, HpnicfMACInfoWorkMode=HpnicfMACInfoWorkMode)
