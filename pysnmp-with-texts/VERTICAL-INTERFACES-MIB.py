#
# PySNMP MIB module VERTICAL-INTERFACES-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/VERTICAL-INTERFACES-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:34:06 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
iso, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, ModuleIdentity, Counter32, NotificationType, TimeTicks, Unsigned32, enterprises, MibIdentifier, Integer32, ObjectIdentity, NotificationType, Gauge32, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "ModuleIdentity", "Counter32", "NotificationType", "TimeTicks", "Unsigned32", "enterprises", "MibIdentifier", "Integer32", "ObjectIdentity", "NotificationType", "Gauge32", "Counter64")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
vertical = MibIdentifier((1, 3, 6, 1, 4, 1, 2338))
vinterfaces = MibIdentifier((1, 3, 6, 1, 4, 1, 2338, 14))
vifNumber = MibScalar((1, 3, 6, 1, 4, 1, 2338, 14, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vifNumber.setStatus('mandatory')
if mibBuilder.loadTexts: vifNumber.setDescription('The number of Instant office devices (regardless of their current state) present on this system.')
vifTable = MibTable((1, 3, 6, 1, 4, 1, 2338, 14, 2), )
if mibBuilder.loadTexts: vifTable.setStatus('mandatory')
if mibBuilder.loadTexts: vifTable.setDescription('A list of interface entries. The number of entries is given by the value of ifNumber.')
vifEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2338, 14, 2, 1), ).setIndexNames((0, "VERTICAL-INTERFACES-MIB", "vifIndex"))
if mibBuilder.loadTexts: vifEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vifEntry.setDescription('An interface entry containing objects at the subnetwork layer and below for a particular interface.')
vifIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2338, 14, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vifIndex.setStatus('mandatory')
if mibBuilder.loadTexts: vifIndex.setDescription("A unique value for each interface. The value for each interface must remain constant at least from one re-initialization of the entity's network management system to the next re- initialization.")
vifDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 2338, 14, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vifDescr.setStatus('mandatory')
if mibBuilder.loadTexts: vifDescr.setDescription('A textual string containing information about the interface, typically the slot number occupied by this interface as well as the type of this interface. ')
vifType = MibTableColumn((1, 3, 6, 1, 4, 1, 2338, 14, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32))).clone(namedValues=NamedValues(("other", 1), ("regular1822", 2), ("hdh1822", 3), ("ddn-x25", 4), ("rfc877-x25", 5), ("ethernet-csmacd", 6), ("iso88023-csmacd", 7), ("iso88024-tokenBus", 8), ("iso88025-tokenRing", 9), ("iso88026-man", 10), ("starLan", 11), ("proteon-10Mbit", 12), ("proteon-80Mbit", 13), ("hyperchannel", 14), ("fddi", 15), ("lapb", 16), ("sdlc", 17), ("ds1", 18), ("e1", 19), ("basicISDN", 20), ("primaryISDN", 21), ("propPointToPointSerial", 22), ("ppp", 23), ("softwareLoopback", 24), ("eon", 25), ("ethernet-3Mbit", 26), ("nsip", 27), ("slip", 28), ("ultra", 29), ("ds3", 30), ("sip", 31), ("frame-relay", 32)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vifType.setStatus('mandatory')
if mibBuilder.loadTexts: vifType.setDescription("The type of interface, distinguished according to the physical/link protocol(s) immediately `below' the network layer in the protocol stack.")
vifOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2338, 14, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vifOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: vifOperStatus.setDescription('The current operational state of the interface. The testing(3) state indicates that no operational packets can be passed.')
vifSpecific = MibTableColumn((1, 3, 6, 1, 4, 1, 2338, 14, 2, 1, 5), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vifSpecific.setStatus('mandatory')
if mibBuilder.loadTexts: vifSpecific.setDescription('A reference to MIB definitions specific to the particular media being used to realize the interface. For example, if the interface is realized by an ethernet, then the value of this object refers to a document defining objects specific to ethernet. If this information is not present, its value should be set to the OBJECT IDENTIFIER { 0 0 }, which is a syntatically valid object identifier, and any conformant implementation of ASN.1 and BER must be able to generate and recognize this value.')
mibBuilder.exportSymbols("VERTICAL-INTERFACES-MIB", vifDescr=vifDescr, vifEntry=vifEntry, vinterfaces=vinterfaces, vifSpecific=vifSpecific, vertical=vertical, vifType=vifType, vifTable=vifTable, vifNumber=vifNumber, vifOperStatus=vifOperStatus, vifIndex=vifIndex)
