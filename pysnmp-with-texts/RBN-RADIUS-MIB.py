#
# PySNMP MIB module RBN-RADIUS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/RBN-RADIUS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:53:18 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
radiusAccServerEntry, radiusAccServerAddress, radiusAccClientServerPortNumber = mibBuilder.importSymbols("RADIUS-ACC-CLIENT-MIB", "radiusAccServerEntry", "radiusAccServerAddress", "radiusAccClientServerPortNumber")
radiusAuthServerEntry, radiusAuthServerAddress, radiusAuthClientServerPortNumber = mibBuilder.importSymbols("RADIUS-AUTH-CLIENT-MIB", "radiusAuthServerEntry", "radiusAuthServerAddress", "radiusAuthClientServerPortNumber")
rbnMgmt, = mibBuilder.importSymbols("RBN-SMI", "rbnMgmt")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
Integer32, Unsigned32, MibIdentifier, Bits, IpAddress, iso, TimeTicks, ModuleIdentity, NotificationType, Gauge32, Counter64, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "Unsigned32", "MibIdentifier", "Bits", "IpAddress", "iso", "TimeTicks", "ModuleIdentity", "NotificationType", "Gauge32", "Counter64", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32")
TruthValue, TextualConvention, DisplayString, TimeStamp = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "TextualConvention", "DisplayString", "TimeStamp")
rbnRadiusMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 2352, 2, 32))
rbnRadiusMib.setRevisions(('2005-03-29 17:00', '2003-12-16 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: rbnRadiusMib.setRevisionsDescriptions(('Added new objects: rbnRadiusAuthStripDomain rbnRadiusAcctStripDomain Added new groups: rbnRadiusAuthGroup2 rbnRadiusAcctGroup2 Added new compliance: rbnRadiusCompliance2.', 'Initial verison.',))
if mibBuilder.loadTexts: rbnRadiusMib.setLastUpdated('200503291700Z')
if mibBuilder.loadTexts: rbnRadiusMib.setOrganization('RedBack Networks, Inc.')
if mibBuilder.loadTexts: rbnRadiusMib.setContactInfo(' RedBack Networks, Inc. Postal: 300 Holger Way San Jose, CA 95134-1362 USA Phone: +1 408 750-5000 Fax: +1 408 750-5599 E-mail: mib-info@redback.com')
if mibBuilder.loadTexts: rbnRadiusMib.setDescription('This Redback MIB supplements the standard Remote Access Dialin User Service (RADIUS) MIBs, namely: RADIUS-AUTH-CLIENT-MIB (RFC 2618) RADIUS-ACC-CLIENT-MIB (RFC 2620) This module defines additional objects and notifications for managing the RADIUS authentication and accounting servers in use by the Redback system. All mib objects defined in this module are viewed within the context identified in the SNMP protocol (i.e. the community string in v1/v2c or the contextName in v3).')
rbnRadiusMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2352, 2, 32, 0))
rbnRadiusMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2352, 2, 32, 1))
rbnRadiusMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2352, 2, 32, 2))
rbnRadiusAuthObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2352, 2, 32, 1, 1))
rbnRadiusAcctObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2352, 2, 32, 1, 2))
rbnRadiusNotifyObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2352, 2, 32, 1, 3))
class RbnRadiusServerState(TextualConvention, Integer32):
    description = "The current state of a RADIUS server. When a server is initially configured its state is 'unknown'. When requests are sent to this server it will transition to either 'up' or 'down', depending on whether the server replies to the requests. It will then transition between 'up' and 'down' accordingly. It will never transition back to 'unknown'."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("unknown", 1), ("up", 2), ("down", 3))

class RbnRadiusServerReason(TextualConvention, Integer32):
    description = "When a RADIUS transitions to a new state, this identifies the reason for the transition. Note that there are two types of timeouts: packet-level and server-level. The packet-level timeout is managed via rbnRadiusAuthPktTimeout and rbnRadiusAcctPktTimeout. The server-level timeout is managed via rbnRadiusAuthSrvTimeout and rbnRadiusAcctSrvTimeout. All requests will timeout if no response is received within the packet-level timeout window. If there is no configured server-level timeout the server will be transitioned to 'down' immediately. Otherwise the server will transition to 'down' only if no replies have been received from the server within the server-level timeout window."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("responding", 1), ("packetTimeout", 2), ("serverTimeout", 3), ("portDown", 4))

rbnRadiusAuthPktTimeout = MibScalar((1, 3, 6, 1, 4, 1, 2352, 2, 32, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbnRadiusAuthPktTimeout.setStatus('current')
if mibBuilder.loadTexts: rbnRadiusAuthPktTimeout.setDescription('The maximum amount of time to wait for a response from a RADIUS authorization server before assuming the packet was lost.')
rbnRadiusAuthSrvTimeout = MibScalar((1, 3, 6, 1, 4, 1, 2352, 2, 32, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbnRadiusAuthSrvTimeout.setStatus('current')
if mibBuilder.loadTexts: rbnRadiusAuthSrvTimeout.setDescription("The maximum amount of time to wait for any response from a RADIUS authorization server before assuming the server is unreachable. A value of '0' indicates that there is no timeout value. In this case a server is considered to be unreachable when no response is received within the rbnRadiusAuthPktTimeout window.")
rbnRadiusAuthDeadtime = MibScalar((1, 3, 6, 1, 4, 1, 2352, 2, 32, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('minutes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbnRadiusAuthDeadtime.setStatus('current')
if mibBuilder.loadTexts: rbnRadiusAuthDeadtime.setDescription("After a RADIUS authorization server has been transitioned to 'down' it will be assumed to be unreachable for this interval. After that point the system may start sending requests to the server again. A value of '0' indicates the system may start sending requests to the server immediately.")
rbnRadiusAuthTries = MibScalar((1, 3, 6, 1, 4, 1, 2352, 2, 32, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setUnits('tries').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbnRadiusAuthTries.setStatus('current')
if mibBuilder.loadTexts: rbnRadiusAuthTries.setDescription('The number of times the system will attempt to transmit an authorization request to a RADIUS server. If multiple RADIUS authorization servers have been configured retransmissions will cycle through the other servers before being retransmitted to the server that originally failed to respond.')
rbnRadiusAuthStripDomain = MibScalar((1, 3, 6, 1, 4, 1, 2352, 2, 32, 1, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbnRadiusAuthStripDomain.setStatus('current')
if mibBuilder.loadTexts: rbnRadiusAuthStripDomain.setDescription('If this object is false, the entire username, including the domain name is sent to the RADIUS server. If true, the domain portion of a structured username is stripped before relaying a request to a RADIUS server.')
rbnRadiusAuthSrvTable = MibTable((1, 3, 6, 1, 4, 1, 2352, 2, 32, 1, 1, 5), )
if mibBuilder.loadTexts: rbnRadiusAuthSrvTable.setStatus('current')
if mibBuilder.loadTexts: rbnRadiusAuthSrvTable.setDescription('This table augments the radiusAuthServerTable. All entries that exist in that table will have a corresponding entry in this table.')
rbnRadiusAuthSrvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2352, 2, 32, 1, 1, 5, 1), )
radiusAuthServerEntry.registerAugmentions(("RBN-RADIUS-MIB", "rbnRadiusAuthSrvEntry"))
rbnRadiusAuthSrvEntry.setIndexNames(*radiusAuthServerEntry.getIndexNames())
if mibBuilder.loadTexts: rbnRadiusAuthSrvEntry.setStatus('current')
if mibBuilder.loadTexts: rbnRadiusAuthSrvEntry.setDescription('A Redback proprietary extension to the radiusAuthServerEntry.')
rbnRadiusAuthSrvState = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 32, 1, 1, 5, 1, 1), RbnRadiusServerState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnRadiusAuthSrvState.setStatus('current')
if mibBuilder.loadTexts: rbnRadiusAuthSrvState.setDescription('The current state of the RADIUS server.')
rbnRadiusAuthSrvLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 32, 1, 1, 5, 1, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnRadiusAuthSrvLastChange.setStatus('current')
if mibBuilder.loadTexts: rbnRadiusAuthSrvLastChange.setDescription("The value of sysUpTime when this server last changed state. If rbnRadiusAuthSrvState is 'unknown' this is effectively the value of sysUpTime when this server was initially configured.")
rbnRadiusAuthSrvCounterResetTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 32, 1, 1, 5, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnRadiusAuthSrvCounterResetTime.setStatus('current')
if mibBuilder.loadTexts: rbnRadiusAuthSrvCounterResetTime.setDescription('The value of sysUpTime on the most recent occasion when any of the counters for this RADIUS server experienced a discontinuity. Note: this includes counters in this table as well as those in radiusAuthServerTable.')
rbnRadiusAuthSrvSendErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 32, 1, 1, 5, 1, 4), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnRadiusAuthSrvSendErrors.setStatus('current')
if mibBuilder.loadTexts: rbnRadiusAuthSrvSendErrors.setDescription('The number of packets destined to this RADIUS server which could not be transmitted due to an error. Discontinuities in the value of this counter are indicated by the value of rbnRadiusAuthSrvCounterResetTime.')
rbnRadiusAcctPktTimeout = MibScalar((1, 3, 6, 1, 4, 1, 2352, 2, 32, 1, 2, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbnRadiusAcctPktTimeout.setStatus('current')
if mibBuilder.loadTexts: rbnRadiusAcctPktTimeout.setDescription("The maximum amount of time to wait for a response from a RADIUS accounting server before assuming the packet was lost. Note: if the system is using a RADIUS server for both authorization and accounting, this object's value will be ignored for that server. Instead the rbnRadiusAuthPktTimeout value will be used for all requests going to that server.")
rbnRadiusAcctSrvTimeout = MibScalar((1, 3, 6, 1, 4, 1, 2352, 2, 32, 1, 2, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbnRadiusAcctSrvTimeout.setStatus('current')
if mibBuilder.loadTexts: rbnRadiusAcctSrvTimeout.setDescription("The maximum amount of time to wait for any response from a RADIUS accounting server before assuming the server is unreachable. A value of '0' indicates that there is no timeout value. In this case a server is considered to be unreachable when no response is received within the rbnRadiusAcctPktTimeout window. Note: if the system is using a RADIUS server for both authorization and accounting, this object's value will be ignored for that server. Instead the rbnRadiusAuthSrvTimeout value will be used for that server.")
rbnRadiusAcctDeadtime = MibScalar((1, 3, 6, 1, 4, 1, 2352, 2, 32, 1, 2, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('minutes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbnRadiusAcctDeadtime.setStatus('current')
if mibBuilder.loadTexts: rbnRadiusAcctDeadtime.setDescription("After a RADIUS accounting server has been transitioned to 'down' it will be assumed to be unreachable for this interval. After that point the system may start sending accounting records to the server again. A value of '0' indicates the system may start sending records to the server immediately. Note: if the system is using a RADIUS server for both authorization and accounting, this object's value will be ignored for that server. Instead the rbnRadiusAuthDeadtime value will be used for that server.")
rbnRadiusAcctTries = MibScalar((1, 3, 6, 1, 4, 1, 2352, 2, 32, 1, 2, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setUnits('retries').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbnRadiusAcctTries.setStatus('current')
if mibBuilder.loadTexts: rbnRadiusAcctTries.setDescription("The number of times the system will attempt to transmit an accounting record to a RADIUS server. If multiple RADIUS accounting servers have been configured retransmissions will cycle through the other servers before being retransmitted to the server that originally failed to respond. Note: if the system is using a RADIUS server for both authorization and accounting, this object's value will be ignored for that server. Instead the rbnRadiusAuthTries value will be used for that server.")
rbnRadiusAcctStripDomain = MibScalar((1, 3, 6, 1, 4, 1, 2352, 2, 32, 1, 2, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbnRadiusAcctStripDomain.setStatus('current')
if mibBuilder.loadTexts: rbnRadiusAcctStripDomain.setDescription('If this object is false, the entire username, including the domain name is sent to the RADIUS server. If true, the domain portion of a structured username is stripped before relaying a request to a RADIUS server.')
rbnRadiusAcctSrvTable = MibTable((1, 3, 6, 1, 4, 1, 2352, 2, 32, 1, 2, 5), )
if mibBuilder.loadTexts: rbnRadiusAcctSrvTable.setStatus('current')
if mibBuilder.loadTexts: rbnRadiusAcctSrvTable.setDescription('This table augments the radiusAccServerTable. All entries that exist in that table will have a corresponding entry in this table.')
rbnRadiusAcctSrvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2352, 2, 32, 1, 2, 5, 1), )
radiusAccServerEntry.registerAugmentions(("RBN-RADIUS-MIB", "rbnRadiusAcctSrvEntry"))
rbnRadiusAcctSrvEntry.setIndexNames(*radiusAccServerEntry.getIndexNames())
if mibBuilder.loadTexts: rbnRadiusAcctSrvEntry.setStatus('current')
if mibBuilder.loadTexts: rbnRadiusAcctSrvEntry.setDescription('A Redback proprietary extension to the radiusAccServerEntry.')
rbnRadiusAcctSrvState = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 32, 1, 2, 5, 1, 1), RbnRadiusServerState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnRadiusAcctSrvState.setStatus('current')
if mibBuilder.loadTexts: rbnRadiusAcctSrvState.setDescription('The current state of the RADIUS server.')
rbnRadiusAcctSrvLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 32, 1, 2, 5, 1, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnRadiusAcctSrvLastChange.setStatus('current')
if mibBuilder.loadTexts: rbnRadiusAcctSrvLastChange.setDescription("The value of sysUpTime when this server last changed state. If rbnRadiusAcctSrvState is 'unknown' this is effectively the value of sysUpTime when this server was initially configured.")
rbnRadiusAcctSrvCounterResetTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 32, 1, 2, 5, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnRadiusAcctSrvCounterResetTime.setStatus('current')
if mibBuilder.loadTexts: rbnRadiusAcctSrvCounterResetTime.setDescription('The value of sysUpTime on the most recent occasion when any of the counters for this RADIUS server experienced a discontinuity. Note: this includes counters in this table as well as those in radiusAccServerTable.')
rbnRadiusAcctSrvSendErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 32, 1, 2, 5, 1, 4), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnRadiusAcctSrvSendErrors.setStatus('current')
if mibBuilder.loadTexts: rbnRadiusAcctSrvSendErrors.setDescription('The number of packets destined to this RADIUS server which could not be transmitted due to an error. Discontinuities in the value of this counter are indicated by the value of rbnRadiusAcctSrvCounterResetTime.')
rbnRadiusClientPort = MibScalar((1, 3, 6, 1, 4, 1, 2352, 2, 32, 1, 3, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1024, 65535))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: rbnRadiusClientPort.setStatus('current')
if mibBuilder.loadTexts: rbnRadiusClientPort.setDescription("A system may be configured to use a range of source TCP/IP ports when sending requests to a RADIUS server. When a server transitions to 'up' or 'down' and a state-change notification is generated, an instance of this object is included to indicate which source port was being used when the server changed state.")
rbnRadiusContext = MibScalar((1, 3, 6, 1, 4, 1, 2352, 2, 32, 1, 3, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 63))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: rbnRadiusContext.setStatus('current')
if mibBuilder.loadTexts: rbnRadiusContext.setDescription('The name of the context in which this server is configured.')
rbnRadiusReason = MibScalar((1, 3, 6, 1, 4, 1, 2352, 2, 32, 1, 3, 3), RbnRadiusServerReason()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: rbnRadiusReason.setStatus('current')
if mibBuilder.loadTexts: rbnRadiusReason.setDescription("The reason for the server's last state change.")
rbnRadiusUsername = MibScalar((1, 3, 6, 1, 4, 1, 2352, 2, 32, 1, 3, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: rbnRadiusUsername.setStatus('current')
if mibBuilder.loadTexts: rbnRadiusUsername.setDescription("The name of the user the system was trying to authenticate or send accouting information for when the RADIUS server transitioned to 'down'. Note: the 'username' is only valid when transitioning due to a packet-level timeout. When transitioning due to any other reason the value for this object will be a zero-length string.")
rbnRadiusAuthStateChange = NotificationType((1, 3, 6, 1, 4, 1, 2352, 2, 32, 0, 1)).setObjects(("RBN-RADIUS-MIB", "rbnRadiusAuthSrvState"), ("RADIUS-AUTH-CLIENT-MIB", "radiusAuthServerAddress"), ("RADIUS-AUTH-CLIENT-MIB", "radiusAuthClientServerPortNumber"), ("RBN-RADIUS-MIB", "rbnRadiusClientPort"), ("RBN-RADIUS-MIB", "rbnRadiusContext"), ("RBN-RADIUS-MIB", "rbnRadiusReason"), ("RBN-RADIUS-MIB", "rbnRadiusUsername"))
if mibBuilder.loadTexts: rbnRadiusAuthStateChange.setStatus('current')
if mibBuilder.loadTexts: rbnRadiusAuthStateChange.setDescription("This notification signifies that a RADIUS authorization server has transitioned to 'up' or 'down'. Note: if rbnRadiusAuthSrvState's value is 'down' and rbnRadiusReason's value is 'packetTimeout', then rbnRadiusUsername's value will be a username. For all other cases, rbnRadiusUsername's value will be a zero-length string.")
rbnRadiusAcctStateChange = NotificationType((1, 3, 6, 1, 4, 1, 2352, 2, 32, 0, 2)).setObjects(("RBN-RADIUS-MIB", "rbnRadiusAcctSrvState"), ("RADIUS-ACC-CLIENT-MIB", "radiusAccServerAddress"), ("RADIUS-ACC-CLIENT-MIB", "radiusAccClientServerPortNumber"), ("RBN-RADIUS-MIB", "rbnRadiusClientPort"), ("RBN-RADIUS-MIB", "rbnRadiusContext"), ("RBN-RADIUS-MIB", "rbnRadiusReason"), ("RBN-RADIUS-MIB", "rbnRadiusUsername"))
if mibBuilder.loadTexts: rbnRadiusAcctStateChange.setStatus('current')
if mibBuilder.loadTexts: rbnRadiusAcctStateChange.setDescription("This notification signifies that a RADIUS accounting server has transitioned to 'up' or 'down'. Note: if rbnRadiusAcctSrvState's value is 'down' and rbnRadiusReason's value is 'packetTimeout', then rbnRadiusUsername's value will be a username. For all other cases, rbnRadiusUsername's value will be a zero-length string.")
rbnRadiusCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2352, 2, 32, 2, 1))
rbnRadiusGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2352, 2, 32, 2, 2))
rbnRadiusCompliance2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 2352, 2, 32, 2, 1, 2)).setObjects(("RBN-RADIUS-MIB", "rbnRadiusAuthGroup2"), ("RBN-RADIUS-MIB", "rbnRadiusAcctGroup2"), ("RBN-RADIUS-MIB", "rbnRadiusNotifyGroup"), ("RBN-RADIUS-MIB", "rbnRadiusAuthNotifyGroup"), ("RBN-RADIUS-MIB", "rbnRadiusAcctNotifyGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnRadiusCompliance2 = rbnRadiusCompliance2.setStatus('current')
if mibBuilder.loadTexts: rbnRadiusCompliance2.setDescription('The compliance statement for SNMP entities which implement the Redback RADIUS MIB.')
rbnRadiusAuthGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 2352, 2, 32, 2, 2, 6)).setObjects(("RBN-RADIUS-MIB", "rbnRadiusAuthPktTimeout"), ("RBN-RADIUS-MIB", "rbnRadiusAuthSrvTimeout"), ("RBN-RADIUS-MIB", "rbnRadiusAuthDeadtime"), ("RBN-RADIUS-MIB", "rbnRadiusAuthTries"), ("RBN-RADIUS-MIB", "rbnRadiusAuthSrvState"), ("RBN-RADIUS-MIB", "rbnRadiusAuthSrvLastChange"), ("RBN-RADIUS-MIB", "rbnRadiusAuthSrvCounterResetTime"), ("RBN-RADIUS-MIB", "rbnRadiusAuthSrvSendErrors"), ("RBN-RADIUS-MIB", "rbnRadiusAuthStripDomain"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnRadiusAuthGroup2 = rbnRadiusAuthGroup2.setStatus('current')
if mibBuilder.loadTexts: rbnRadiusAuthGroup2.setDescription('The collection of objects used to manage RADIUS authentication servers.')
rbnRadiusAcctGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 2352, 2, 32, 2, 2, 7)).setObjects(("RBN-RADIUS-MIB", "rbnRadiusAcctPktTimeout"), ("RBN-RADIUS-MIB", "rbnRadiusAcctSrvTimeout"), ("RBN-RADIUS-MIB", "rbnRadiusAcctDeadtime"), ("RBN-RADIUS-MIB", "rbnRadiusAcctTries"), ("RBN-RADIUS-MIB", "rbnRadiusAcctSrvState"), ("RBN-RADIUS-MIB", "rbnRadiusAcctSrvLastChange"), ("RBN-RADIUS-MIB", "rbnRadiusAcctSrvCounterResetTime"), ("RBN-RADIUS-MIB", "rbnRadiusAcctSrvSendErrors"), ("RBN-RADIUS-MIB", "rbnRadiusAcctStripDomain"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnRadiusAcctGroup2 = rbnRadiusAcctGroup2.setStatus('current')
if mibBuilder.loadTexts: rbnRadiusAcctGroup2.setDescription('The collection of objects used to manage RADIUS accounting servers.')
rbnRadiusNotifyGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2352, 2, 32, 2, 2, 3)).setObjects(("RBN-RADIUS-MIB", "rbnRadiusClientPort"), ("RBN-RADIUS-MIB", "rbnRadiusContext"), ("RBN-RADIUS-MIB", "rbnRadiusReason"), ("RBN-RADIUS-MIB", "rbnRadiusUsername"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnRadiusNotifyGroup = rbnRadiusNotifyGroup.setStatus('current')
if mibBuilder.loadTexts: rbnRadiusNotifyGroup.setDescription('The collection of objects used only in notifications.')
rbnRadiusAuthNotifyGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 2352, 2, 32, 2, 2, 4)).setObjects(("RBN-RADIUS-MIB", "rbnRadiusAuthStateChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnRadiusAuthNotifyGroup = rbnRadiusAuthNotifyGroup.setStatus('current')
if mibBuilder.loadTexts: rbnRadiusAuthNotifyGroup.setDescription('Notification for tracking the status of RADIUS authentication servers.')
rbnRadiusAcctNotifyGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 2352, 2, 32, 2, 2, 5)).setObjects(("RBN-RADIUS-MIB", "rbnRadiusAcctStateChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnRadiusAcctNotifyGroup = rbnRadiusAcctNotifyGroup.setStatus('current')
if mibBuilder.loadTexts: rbnRadiusAcctNotifyGroup.setDescription('Notification for tracking the status of RADIUS accounting servers.')
rbnRadiusCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2352, 2, 32, 2, 1, 1)).setObjects(("RBN-RADIUS-MIB", "rbnRadiusAuthGroup"), ("RBN-RADIUS-MIB", "rbnRadiusAcctGroup"), ("RBN-RADIUS-MIB", "rbnRadiusNotifyGroup"), ("RBN-RADIUS-MIB", "rbnRadiusAuthNotifyGroup"), ("RBN-RADIUS-MIB", "rbnRadiusAcctNotifyGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnRadiusCompliance = rbnRadiusCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: rbnRadiusCompliance.setDescription('The compliance statement for SNMP entities which implement the Redback RADIUS MIB.')
rbnRadiusAuthGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2352, 2, 32, 2, 2, 1)).setObjects(("RBN-RADIUS-MIB", "rbnRadiusAuthPktTimeout"), ("RBN-RADIUS-MIB", "rbnRadiusAuthSrvTimeout"), ("RBN-RADIUS-MIB", "rbnRadiusAuthDeadtime"), ("RBN-RADIUS-MIB", "rbnRadiusAuthTries"), ("RBN-RADIUS-MIB", "rbnRadiusAuthSrvState"), ("RBN-RADIUS-MIB", "rbnRadiusAuthSrvLastChange"), ("RBN-RADIUS-MIB", "rbnRadiusAuthSrvCounterResetTime"), ("RBN-RADIUS-MIB", "rbnRadiusAuthSrvSendErrors"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnRadiusAuthGroup = rbnRadiusAuthGroup.setStatus('deprecated')
if mibBuilder.loadTexts: rbnRadiusAuthGroup.setDescription('The collection of objects used to manage RADIUS authentication servers.')
rbnRadiusAcctGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2352, 2, 32, 2, 2, 2)).setObjects(("RBN-RADIUS-MIB", "rbnRadiusAcctPktTimeout"), ("RBN-RADIUS-MIB", "rbnRadiusAcctSrvTimeout"), ("RBN-RADIUS-MIB", "rbnRadiusAcctDeadtime"), ("RBN-RADIUS-MIB", "rbnRadiusAcctTries"), ("RBN-RADIUS-MIB", "rbnRadiusAcctSrvState"), ("RBN-RADIUS-MIB", "rbnRadiusAcctSrvLastChange"), ("RBN-RADIUS-MIB", "rbnRadiusAcctSrvCounterResetTime"), ("RBN-RADIUS-MIB", "rbnRadiusAcctSrvSendErrors"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnRadiusAcctGroup = rbnRadiusAcctGroup.setStatus('deprecated')
if mibBuilder.loadTexts: rbnRadiusAcctGroup.setDescription('The collection of objects used to manage RADIUS accounting servers.')
mibBuilder.exportSymbols("RBN-RADIUS-MIB", rbnRadiusAcctPktTimeout=rbnRadiusAcctPktTimeout, rbnRadiusAcctSrvSendErrors=rbnRadiusAcctSrvSendErrors, rbnRadiusAuthSrvTable=rbnRadiusAuthSrvTable, rbnRadiusAcctObjects=rbnRadiusAcctObjects, rbnRadiusMIBConformance=rbnRadiusMIBConformance, rbnRadiusGroups=rbnRadiusGroups, rbnRadiusAuthDeadtime=rbnRadiusAuthDeadtime, rbnRadiusCompliances=rbnRadiusCompliances, rbnRadiusAcctSrvState=rbnRadiusAcctSrvState, rbnRadiusMIBObjects=rbnRadiusMIBObjects, rbnRadiusNotifyGroup=rbnRadiusNotifyGroup, rbnRadiusMib=rbnRadiusMib, rbnRadiusAuthStripDomain=rbnRadiusAuthStripDomain, rbnRadiusAuthNotifyGroup=rbnRadiusAuthNotifyGroup, rbnRadiusAuthSrvCounterResetTime=rbnRadiusAuthSrvCounterResetTime, rbnRadiusMIBNotifications=rbnRadiusMIBNotifications, rbnRadiusAcctStripDomain=rbnRadiusAcctStripDomain, rbnRadiusAcctStateChange=rbnRadiusAcctStateChange, rbnRadiusAuthGroup2=rbnRadiusAuthGroup2, rbnRadiusAuthTries=rbnRadiusAuthTries, rbnRadiusAcctSrvTable=rbnRadiusAcctSrvTable, rbnRadiusAuthSrvTimeout=rbnRadiusAuthSrvTimeout, rbnRadiusUsername=rbnRadiusUsername, rbnRadiusAcctGroup=rbnRadiusAcctGroup, rbnRadiusAuthPktTimeout=rbnRadiusAuthPktTimeout, rbnRadiusAuthSrvEntry=rbnRadiusAuthSrvEntry, rbnRadiusAcctSrvEntry=rbnRadiusAcctSrvEntry, rbnRadiusCompliance2=rbnRadiusCompliance2, rbnRadiusAuthObjects=rbnRadiusAuthObjects, RbnRadiusServerReason=RbnRadiusServerReason, rbnRadiusAuthGroup=rbnRadiusAuthGroup, rbnRadiusAcctSrvLastChange=rbnRadiusAcctSrvLastChange, rbnRadiusAcctDeadtime=rbnRadiusAcctDeadtime, rbnRadiusAcctGroup2=rbnRadiusAcctGroup2, rbnRadiusAcctNotifyGroup=rbnRadiusAcctNotifyGroup, rbnRadiusReason=rbnRadiusReason, rbnRadiusCompliance=rbnRadiusCompliance, rbnRadiusAcctSrvCounterResetTime=rbnRadiusAcctSrvCounterResetTime, RbnRadiusServerState=RbnRadiusServerState, rbnRadiusAcctTries=rbnRadiusAcctTries, rbnRadiusAuthStateChange=rbnRadiusAuthStateChange, rbnRadiusNotifyObjects=rbnRadiusNotifyObjects, rbnRadiusAuthSrvLastChange=rbnRadiusAuthSrvLastChange, PYSNMP_MODULE_ID=rbnRadiusMib, rbnRadiusClientPort=rbnRadiusClientPort, rbnRadiusContext=rbnRadiusContext, rbnRadiusAuthSrvState=rbnRadiusAuthSrvState, rbnRadiusAcctSrvTimeout=rbnRadiusAcctSrvTimeout, rbnRadiusAuthSrvSendErrors=rbnRadiusAuthSrvSendErrors)
