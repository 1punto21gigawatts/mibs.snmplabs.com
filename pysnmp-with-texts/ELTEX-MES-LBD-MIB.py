#
# PySNMP MIB module ELTEX-MES-LBD-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ELTEX-MES-LBD-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:01:39 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
eltMes, = mibBuilder.importSymbols("ELTEX-MES", "eltMes")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
VlanIndex, = mibBuilder.importSymbols("Q-BRIDGE-MIB", "VlanIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Unsigned32, TimeTicks, ObjectIdentity, Counter32, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, IpAddress, Counter64, NotificationType, Bits, Gauge32, iso, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "TimeTicks", "ObjectIdentity", "Counter32", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "IpAddress", "Counter64", "NotificationType", "Bits", "Gauge32", "iso", "Integer32")
TextualConvention, TruthValue, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TruthValue", "DisplayString")
eltMesLbd = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 23, 127))
eltMesLbdNotif = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 23, 127, 0))
eltLbdVlanBased = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 23, 127, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltLbdVlanBased.setStatus('current')
if mibBuilder.loadTexts: eltLbdVlanBased.setDescription('Enable/Disable VLAN based loopback detection.')
eltLbdVlanBasedRecoveryTime = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 23, 127, 2), Integer32()).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltLbdVlanBasedRecoveryTime.setStatus('current')
if mibBuilder.loadTexts: eltLbdVlanBasedRecoveryTime.setDescription('VLAN disable period in seconds. Valid only for VLAN based loopback detection. Default value of 0 means that VLAN will never be recovered.')
eltLbdVlanBasedPortTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 23, 127, 3), )
if mibBuilder.loadTexts: eltLbdVlanBasedPortTable.setStatus('current')
if mibBuilder.loadTexts: eltLbdVlanBasedPortTable.setDescription('This table contains per port VLAN list for which loopback is detected.')
eltLbdVlanBasedPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 23, 127, 3, 1), ).setIndexNames((0, "ELTEX-MES-LBD-MIB", "eltLbdVlanBasedPort"))
if mibBuilder.loadTexts: eltLbdVlanBasedPortEntry.setStatus('current')
if mibBuilder.loadTexts: eltLbdVlanBasedPortEntry.setDescription('The entry contains per port VLAN list for which loopback is detected.')
eltLbdVlanBasedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 127, 3, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eltLbdVlanBasedPort.setStatus('current')
if mibBuilder.loadTexts: eltLbdVlanBasedPort.setDescription('The port number.')
eltLbdVlanBasedVlanId1To1024 = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 127, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eltLbdVlanBasedVlanId1To1024.setStatus('current')
if mibBuilder.loadTexts: eltLbdVlanBasedVlanId1To1024.setDescription('First VlanId List that have detected a loopback.')
eltLbdVlanBasedVlanId1025To2048 = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 127, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eltLbdVlanBasedVlanId1025To2048.setStatus('current')
if mibBuilder.loadTexts: eltLbdVlanBasedVlanId1025To2048.setDescription('Second VlanId List that have detected a loopback.')
eltLbdVlanBasedVlanId2049To3072 = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 127, 3, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eltLbdVlanBasedVlanId2049To3072.setStatus('current')
if mibBuilder.loadTexts: eltLbdVlanBasedVlanId2049To3072.setDescription('Third VlanId List that have detected a loopback.')
eltLbdVlanBasedVlanId3073To4094 = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 127, 3, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eltLbdVlanBasedVlanId3073To4094.setStatus('current')
if mibBuilder.loadTexts: eltLbdVlanBasedVlanId3073To4094.setDescription('Fourth VlanId List that have detected a loopback.')
eltLbdVlanBasedVlanStateTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 23, 127, 4), )
if mibBuilder.loadTexts: eltLbdVlanBasedVlanStateTable.setStatus('current')
if mibBuilder.loadTexts: eltLbdVlanBasedVlanStateTable.setDescription('This table contains per port and VLAN loopback state. Only VLANS in which port is tagged or native member are present.')
eltLbdVlanBasedVlanStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 23, 127, 4, 1), ).setIndexNames((0, "ELTEX-MES-LBD-MIB", "eltLbdVlanBasedVlanStatePort"), (0, "ELTEX-MES-LBD-MIB", "eltLbdVlanBasedVlanStateVlan"))
if mibBuilder.loadTexts: eltLbdVlanBasedVlanStateEntry.setStatus('current')
if mibBuilder.loadTexts: eltLbdVlanBasedVlanStateEntry.setDescription('The entry contains per port and VLAN loopback state.')
eltLbdVlanBasedVlanStatePort = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 127, 4, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eltLbdVlanBasedVlanStatePort.setStatus('current')
if mibBuilder.loadTexts: eltLbdVlanBasedVlanStatePort.setDescription('Port number with LBD enabled.')
eltLbdVlanBasedVlanStateVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 127, 4, 1, 2), VlanIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eltLbdVlanBasedVlanStateVlan.setStatus('current')
if mibBuilder.loadTexts: eltLbdVlanBasedVlanStateVlan.setDescription('ID of VLAN that port belongs to.')
eltLbdVlanBasedVlanState = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 127, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("blocked", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eltLbdVlanBasedVlanState.setStatus('current')
if mibBuilder.loadTexts: eltLbdVlanBasedVlanState.setDescription('The loopback state of port in VLAN.')
eltLbdVlanBasedVlanNotif = NotificationType((1, 3, 6, 1, 4, 1, 35265, 1, 23, 127, 0, 1)).setObjects(("ELTEX-MES-LBD-MIB", "eltLbdVlanBasedVlanState"))
if mibBuilder.loadTexts: eltLbdVlanBasedVlanNotif.setStatus('current')
if mibBuilder.loadTexts: eltLbdVlanBasedVlanNotif.setDescription('A eltLbdVlanBasedVlanNotif is generated when VLAN with detected loopback is enabled/disabled.')
mibBuilder.exportSymbols("ELTEX-MES-LBD-MIB", eltLbdVlanBasedVlanId2049To3072=eltLbdVlanBasedVlanId2049To3072, eltMesLbd=eltMesLbd, eltLbdVlanBasedVlanStatePort=eltLbdVlanBasedVlanStatePort, eltLbdVlanBased=eltLbdVlanBased, eltLbdVlanBasedVlanStateVlan=eltLbdVlanBasedVlanStateVlan, eltLbdVlanBasedVlanNotif=eltLbdVlanBasedVlanNotif, eltLbdVlanBasedVlanState=eltLbdVlanBasedVlanState, eltLbdVlanBasedPortTable=eltLbdVlanBasedPortTable, eltLbdVlanBasedVlanId1To1024=eltLbdVlanBasedVlanId1To1024, eltLbdVlanBasedVlanId3073To4094=eltLbdVlanBasedVlanId3073To4094, eltLbdVlanBasedVlanStateTable=eltLbdVlanBasedVlanStateTable, eltLbdVlanBasedPort=eltLbdVlanBasedPort, eltLbdVlanBasedVlanStateEntry=eltLbdVlanBasedVlanStateEntry, eltLbdVlanBasedPortEntry=eltLbdVlanBasedPortEntry, eltLbdVlanBasedRecoveryTime=eltLbdVlanBasedRecoveryTime, eltLbdVlanBasedVlanId1025To2048=eltLbdVlanBasedVlanId1025To2048, eltMesLbdNotif=eltMesLbdNotif)
