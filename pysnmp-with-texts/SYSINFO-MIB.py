#
# PySNMP MIB module SYSINFO-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SYSINFO-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:14:27 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Gauge32, Unsigned32, Counter64, NotificationType, Counter32, enterprises, ObjectIdentity, TimeTicks, MibIdentifier, IpAddress, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Bits, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "Unsigned32", "Counter64", "NotificationType", "Counter32", "enterprises", "ObjectIdentity", "TimeTicks", "MibIdentifier", "IpAddress", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Bits", "Integer32")
PhysAddress, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "PhysAddress", "TextualConvention", "DisplayString")
ibm = MibIdentifier((1, 3, 6, 1, 4, 1, 2))
ibmProd = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6))
systemsMonitor6000 = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 12))
smProgramInformation = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 12, 1))
smSiaSystemInformation = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 12, 2))
smSiaCommand = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 12, 4))
smSiaAdministration = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 12, 20))
smSiaFileMonitor = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 12, 21))
smSiaProgramData = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 12, 1, 10))
smSiaResourceUsage = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 12, 1, 11))
smSiaProgramMessages = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 12, 1, 12))
smSiaProgramDescription = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 12, 1, 10, 1))
smSiaProgramControl = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 12, 1, 10, 2))
smSiaProgramLog = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 12, 1, 10, 3))
smSiaProgramSetableTestObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 12, 1, 10, 5))
smSiaProgramName = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 12, 1, 10, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaProgramName.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaProgramName.setDescription('Official name of the Systems Information Agent program.')
smSiaProgramNumber = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 12, 1, 10, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaProgramNumber.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaProgramNumber.setDescription('Program number for the Systems Information Agent program.')
smSiaProgramVersion = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 12, 1, 10, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaProgramVersion.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaProgramVersion.setDescription('Version number of the Systems Information Agent program.')
smSiaProgramCompilationDate = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 12, 1, 10, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaProgramCompilationDate.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaProgramCompilationDate.setDescription('Date and time when the current agent was compiled.')
smSiaProgramUpTime = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 12, 1, 10, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaProgramUpTime.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaProgramUpTime.setDescription('Time (in hundredths of a second) since the Systems Information Agent Program was last re-initialized.')
smSiaProgramContact = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 12, 1, 10, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smSiaProgramContact.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaProgramContact.setDescription('Textual identification of the contact person for the Systems Information Agent program on this managed node and information on how to contact this person.')
smSiaProgramControlLocalConfigurationFile = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 12, 1, 10, 2, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smSiaProgramControlLocalConfigurationFile.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaProgramControlLocalConfigurationFile.setDescription('Name of a local configuration file. The local configuration file is written when the smSiaProgramControlSaveConfiguration MIB variable is set to true(2).')
smSiaProgramControlSavedFlags = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 12, 1, 10, 2, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smSiaProgramControlSavedFlags.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaProgramControlSavedFlags.setDescription('Saved flags which will be used to start the agent. This field can be modified to be used with the smSiaProgramControlReInitializeMonitor function. The flags are saved in the file: /usr/etc/sysinfod.flags')
smSiaProgramControlAgentAddress = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 12, 1, 10, 2, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smSiaProgramControlAgentAddress.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaProgramControlAgentAddress.setDescription('Address of the box where SIA is running. This address is used while generating traps.')
smSiaProgramControlReserved1 = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 12, 1, 10, 2, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smSiaProgramControlReserved1.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaProgramControlReserved1.setDescription('Reserved.')
smSiaProgramControlPercentMultiplier = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 12, 1, 10, 2, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smSiaProgramControlPercentMultiplier.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaProgramControlPercentMultiplier.setDescription('Multiplier used to multiply percentage variables. The default is 1; 0 is treated the same as the default.')
smSiaProgramControlPollTime = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 12, 1, 10, 2, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smSiaProgramControlPollTime.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaProgramControlPollTime.setDescription('Reserved')
smSiaProgramControlFlags = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 12, 1, 10, 2, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smSiaProgramControlFlags.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaProgramControlFlags.setDescription('Reserved')
smSiaProgramControlRetryCount = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 12, 1, 10, 2, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smSiaProgramControlRetryCount.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaProgramControlRetryCount.setDescription('Reserved. Default number of retries for actions that can be retried.')
smSiaProgramControlTimeout = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 12, 1, 10, 2, 9), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smSiaProgramControlTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaProgramControlTimeout.setDescription('Reserved. Default number of timeout for actions that can timeout.')
smSiaProgramControlCurrentFlags = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 12, 1, 10, 2, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaProgramControlCurrentFlags.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaProgramControlCurrentFlags.setDescription('Current flags which were used to start or re-initialize the agent.')
smSiaProgramControlReinitFlags = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 12, 1, 10, 2, 11), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smSiaProgramControlReinitFlags.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaProgramControlReinitFlags.setDescription('Re-intialize flags which will be used to start the agent. This field is set to smSiaProgramControlCurrentFlags at program start or re-initialization. This field can be modified to be used with the smSiaProgramControlReInitializeMonitor function.')
smSiaProgramControlReInitializeMonitor = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 12, 1, 10, 2, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("false", 1), ("trueReinit", 2), ("trueSaved", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smSiaProgramControlReInitializeMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaProgramControlReInitializeMonitor.setDescription('Allows the re-initializaton of the Systems Information Agent. Setting to trueReinit(2) uses the flags in smSiaProgramControlReinitFlags as the start-up flags. Setting to trueSaved(3) uses the flags in smSiaProgramControlSavedFlags as the start-up flags. The value of this variable returns to false once the re-start has occurred.')
smSiaProgramControlSaveConfiguration = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 12, 1, 10, 2, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smSiaProgramControlSaveConfiguration.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaProgramControlSaveConfiguration.setDescription('Setting this variable to true(2) results in the current Systems Information Agent configuration being saved to the file specified by the value of the smSiaProgramControl LocalConfigurationFile variable. The value of this variable returns to false once the configuration is saved.')
smSiaProgramLogFileName = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 12, 1, 10, 3, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smSiaProgramLogFileName.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaProgramLogFileName.setDescription('File name for logging information in System Information Agent. The type of information being logged depends on the trace mask (ie. smSiaProgramLogMask).')
smSiaProgramLogFileSize = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 12, 1, 10, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaProgramLogFileSize.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaProgramLogFileSize.setDescription('Current size of the log file in bytes.')
smSiaProgramLogMaxFileSize = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 12, 1, 10, 3, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smSiaProgramLogMaxFileSize.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaProgramLogMaxFileSize.setDescription('Maximum size of the log file in kilobytes.')
smSiaProgramLogNumFiles = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 12, 1, 10, 3, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smSiaProgramLogNumFiles.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaProgramLogNumFiles.setDescription('Maximum number of log files to keep. When the data log file is full, it is rolled over to <logFilename>1. Files are rolled up until the number of files specified by this field exists (ie. <LogFilename>1 becomes <LogFilename>2, etc.).')
smSiaProgramLogFileBehavior = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 12, 1, 10, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("wrapFlush", 1), ("wrapNoflush", 2), ("nowrapFlush", 3), ("nowrapNoflush", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smSiaProgramLogFileBehavior.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaProgramLogFileBehavior.setDescription('This field determines what is done when the maximum file size is exceeded and the number of log files specified already exists. If wrap is specified, then the oldest log file is removed, all other files are rolled up, and logging continues into a new file. If nowrap is specified, no more data will be logged until either the log file name is changed or the existing files are renamed (or removed). Flushing refers to whether or not each log entry is immediately written to the log file or whether the log data is written out in large chunks containing multiple log entries. Flushing allows the log file to always contain the latest log entries. However, CPU time can be saved if flushing is not activated.')
smSiaProgramLogMask = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 12, 1, 10, 3, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smSiaProgramLogMask.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaProgramLogMask.setDescription('The log mask field is used to indicate the type of information that is being logged. The log mask may contain the following literals: none logs nothing inform logs informational messages warning logs warning messages error logs error messages base logs System Information Agent base information command logs command table information smux logs SMUX interface traffic call logs all internal functions called all logs all information')
smSiaProgramControlSetableInteger = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 12, 1, 10, 5, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smSiaProgramControlSetableInteger.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaProgramControlSetableInteger.setDescription('A settable integer with no function.')
smSiaProgramControlSetableCounter = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 12, 1, 10, 5, 2), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smSiaProgramControlSetableCounter.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaProgramControlSetableCounter.setDescription('A settable counter with no function.')
smSiaProgramControlSetableGauge = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 12, 1, 10, 5, 3), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smSiaProgramControlSetableGauge.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaProgramControlSetableGauge.setDescription('A settable gauge with no function.')
smSiaProgramControlSetableIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 12, 1, 10, 5, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smSiaProgramControlSetableIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaProgramControlSetableIpAddress.setDescription('A settable IP address with no function.')
smSiaProgramControlSetableTimeTicks = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 12, 1, 10, 5, 5), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smSiaProgramControlSetableTimeTicks.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaProgramControlSetableTimeTicks.setDescription('A settable TimeTicks with no function.')
smSiaProgramControlSetableOctetString = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 12, 1, 10, 5, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smSiaProgramControlSetableOctetString.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaProgramControlSetableOctetString.setDescription('A settable DisplayString with no function.')
smSiaResourceUsageTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 12, 1, 11, 1), )
if mibBuilder.loadTexts: smSiaResourceUsageTable.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaResourceUsageTable.setDescription('Systems Information Agent resource utilization table.')
smSiaResourceUsageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 12, 1, 11, 1, 1), ).setIndexNames((0, "SYSINFO-MIB", "smSiaResourceUsageName"))
if mibBuilder.loadTexts: smSiaResourceUsageEntry.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaResourceUsageEntry.setDescription('Each entry contains a different resource summary.')
smSiaResourceUsageName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 1, 11, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaResourceUsageName.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaResourceUsageName.setDescription('Self, child, and total.')
smSiaResourceUsageUserTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 1, 11, 1, 1, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaResourceUsageUserTime.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaResourceUsageUserTime.setDescription('Amount of CPU time in user mode since start-up.')
smSiaResourceUsageSystemTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 1, 11, 1, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaResourceUsageSystemTime.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaResourceUsageSystemTime.setDescription('Amount of CPU time in system mode since start-up.')
smSiaResourceUsageTotalTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 1, 11, 1, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaResourceUsageTotalTime.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaResourceUsageTotalTime.setDescription('Total CPU time for process since start-up.')
smSiaResourceUsageMaxrss = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 1, 11, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaResourceUsageMaxrss.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaResourceUsageMaxrss.setDescription('Maximum resident set size. Not supported on Sun Solaris 2.x.')
smSiaResourceUsageIxrss = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 1, 11, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaResourceUsageIxrss.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaResourceUsageIxrss.setDescription('Integral size (kilobyte-seconds). Not supported on Sun Solaris 2.x.')
smSiaResourceUsageIdrss = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 1, 11, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaResourceUsageIdrss.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaResourceUsageIdrss.setDescription('Unshared resident set size (kilobyte-seconds). Not supported on Sun Solaris 2.x.')
smSiaResourceUsageIsrss = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 1, 11, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaResourceUsageIsrss.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaResourceUsageIsrss.setDescription('Unshared stack set size (kilobyte-seconds). Not supported on Sun Solaris 2.x.')
smSiaResourceUsageMinflt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 1, 11, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaResourceUsageMinflt.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaResourceUsageMinflt.setDescription('Page faults serviced without I/O activity.')
smSiaResourceUsageMajflt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 1, 11, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaResourceUsageMajflt.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaResourceUsageMajflt.setDescription('Page faults serviced with I/O activity.')
smSiaResourceUsageNSwap = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 1, 11, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaResourceUsageNSwap.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaResourceUsageNSwap.setDescription('Number of times a process swapped.')
smSiaResourceUsageInBlock = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 1, 11, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaResourceUsageInBlock.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaResourceUsageInBlock.setDescription('Number of times a file system performed input.')
smSiaResourceUsageOutBlock = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 1, 11, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaResourceUsageOutBlock.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaResourceUsageOutBlock.setDescription('Number of times a file system performed output.')
smSiaResourceUsageMsgsnd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 1, 11, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaResourceUsageMsgsnd.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaResourceUsageMsgsnd.setDescription('Number of IPC messages sent.')
smSiaResourceUsageMsgrcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 1, 11, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaResourceUsageMsgrcv.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaResourceUsageMsgrcv.setDescription('Number of IPC messages received.')
smSiaResourceUsageNSignals = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 1, 11, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaResourceUsageNSignals.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaResourceUsageNSignals.setDescription('Number of signals received.')
smSiaResourceUsageVcsw = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 1, 11, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaResourceUsageVcsw.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaResourceUsageVcsw.setDescription('Number of voluntary context switches.')
smSiaResourceUsageIcsw = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 1, 11, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaResourceUsageIcsw.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaResourceUsageIcsw.setDescription('Number of involuntary context switches.')
smSiaProgramMessagesTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 12, 1, 12, 1), )
if mibBuilder.loadTexts: smSiaProgramMessagesTable.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaProgramMessagesTable.setDescription('Systems Information Agent information and error messages.')
smSiaProgramMessagesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 12, 1, 12, 1, 1), ).setIndexNames((0, "SYSINFO-MIB", "smSiaProgramMessagesRowNumber"))
if mibBuilder.loadTexts: smSiaProgramMessagesEntry.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaProgramMessagesEntry.setDescription('Each entry contains a different message summary.')
smSiaProgramMessagesRowNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 1, 12, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaProgramMessagesRowNumber.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaProgramMessagesRowNumber.setDescription('Table index - no real meaning.')
smSiaProgramMessagesTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 1, 12, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaProgramMessagesTime.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaProgramMessagesTime.setDescription('Time at which the message was generated.')
smSiaProgramMessagesText = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 1, 12, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaProgramMessagesText.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaProgramMessagesText.setDescription('Text of the message. ')
smSiaProgramMessagesTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 1, 12, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaProgramMessagesTimeStamp.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaProgramMessagesTimeStamp.setDescription('Time (in seconds) at which message was generated.')
smSiaSystemDescription = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 1))
smSiaSystemConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 2))
smSiaSystemDevice = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3))
smSiaSystemPagingInformation = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 4))
smSiaSystemFileSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 5))
smSiaSystemSubSystems = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 6))
smSiaSystemProcess = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 7))
smSiaSystemUsers = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 8))
smSiaSystemUtilization = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9))
smSiaSystemMiscellaneous = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 11))
smSiaSystemNodeName = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemNodeName.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemNodeName.setDescription('Node name.')
smSiaSystemSysName = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemSysName.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemSysName.setDescription('System name.')
smSiaSystemVersion = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemVersion.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemVersion.setDescription('Operating System version.')
smSiaSystemRelease = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemRelease.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemRelease.setDescription('Operating System release.')
smSiaSystemMachine = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemMachine.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemMachine.setDescription('Hardware type.')
smSiaSystemTime = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemTime.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemTime.setDescription('Current system time.')
smSiaSystemFreePagingSpace = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemFreePagingSpace.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemFreePagingSpace.setDescription('Free paging space in the system, in megabytes. It can be useful to set a threshold on this variable to indicate when it drops below a certain number of Mbs, (for instance, for AIX, the threshold is 2 Mb) because when there is less than adequate free paging space, the kernel sends a SIGDANGER to all processes on the system, and if the free paging space continues to drop, the kernel will begin killing large processes until it can get back 512 pages (enough to prevent a system crash).')
smSiaSystemFreePagingSpaceUntilKill = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemFreePagingSpaceUntilKill.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemFreePagingSpaceUntilKill.setDescription('Free paging space until kill threshold, in megabytes. On HP-UX and Sun Solaris, this variable is the same as smSiaSystemFreePagingSpace. On Digital UNIX, this variable is the low water mark for paging space (20 Mb).')
smSiaSystemKillThresholdToFreePagingSpacePercent = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemKillThresholdToFreePagingSpacePercent.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemKillThresholdToFreePagingSpacePercent.setDescription('Ratio of kill threshold to free paging space expressed as a percentage. This value remains zero until the kill threshold becomes >= 1% of the free paging space. On HP-UX and Sun Solaris, this variable is computed as the percentage of paging space used. On Digital UNIX, this variable is the difference between free paging space and the FreePagingSpaceUntilKill expressed as a percent.')
smSiaSystemPagingSpace = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 4, 4))
smSiaSystemPagingStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 4, 5))
smSiaSystemPagingSpaceCount = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 4, 4, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemPagingSpaceCount.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemPagingSpaceCount.setDescription('The number of paging spaces.')
smSiaSystemPagingSpaceTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 4, 4, 2), )
if mibBuilder.loadTexts: smSiaSystemPagingSpaceTable.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemPagingSpaceTable.setDescription('Paging space table.')
smSiaSystemPagingSpaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 4, 4, 2, 1), ).setIndexNames((0, "SYSINFO-MIB", "smSiaSystemPagingSpaceName"))
if mibBuilder.loadTexts: smSiaSystemPagingSpaceEntry.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemPagingSpaceEntry.setDescription('Each entry contains objects for a particular paging space.')
smSiaSystemPagingSpaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 4, 4, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemPagingSpaceName.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemPagingSpaceName.setDescription('Paging space name.')
smSiaSystemPagingSpacePhysicalVolume = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 4, 4, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemPagingSpacePhysicalVolume.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemPagingSpacePhysicalVolume.setDescription('Physical volume on which paging space resides. Not supported on Digital UNIX.')
smSiaSystemPagingSpaceVolumeGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 4, 4, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemPagingSpaceVolumeGroup.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemPagingSpaceVolumeGroup.setDescription('Volume group of paging space. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemPagingSpaceSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 4, 4, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemPagingSpaceSize.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemPagingSpaceSize.setDescription('Size in megabytes.')
smSiaSystemPagingSpacePercentUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 4, 4, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemPagingSpacePercentUsed.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemPagingSpacePercentUsed.setDescription('Percent used. This value can be helpful in maintaining acceptable system performance. When the percent of paging space used goes above approximately 80 percent, the system performance can be affected.')
smSiaSystemPagingSpaceActive = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 4, 4, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemPagingSpaceActive.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemPagingSpaceActive.setDescription('Active indicator --- Yes or No Not supported on Digital UNIX.')
smSiaSystemPagingSpaceAuto = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 4, 4, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemPagingSpaceAuto.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemPagingSpaceAuto.setDescription('Auto indicator --- Yes or No Not supported on HP-UX or Digital UNIX.')
smSiaSystemPagingSpaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 4, 4, 2, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemPagingSpaceType.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemPagingSpaceType.setDescription('Paging space type. Not supported on Digital UNIX.')
smSiaSystemPagingStatisticsPollingInterval = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 4, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemPagingStatisticsPollingInterval.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemPagingStatisticsPollingInterval.setDescription('Polling interval for paging statistics data. Currently reserved.')
smSiaSystemPagingStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 4, 5, 2), )
if mibBuilder.loadTexts: smSiaSystemPagingStatisticsTable.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemPagingStatisticsTable.setDescription('Input/Output statistics table.')
smSiaSystemPagingStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 4, 5, 2, 1), ).setIndexNames((0, "SYSINFO-MIB", "smSiaSystemPagingStatisticsName"))
if mibBuilder.loadTexts: smSiaSystemPagingStatisticsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemPagingStatisticsEntry.setDescription('Each instance contains paging statistics over a different interval. - same information as vmstat')
smSiaSystemPagingStatisticsName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 4, 5, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemPagingStatisticsName.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemPagingStatisticsName.setDescription('Description of interval.')
smSiaSystemPagingStatisticsIntervalStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 4, 5, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemPagingStatisticsIntervalStartTime.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemPagingStatisticsIntervalStartTime.setDescription('Start time of interval.')
smSiaSystemPagingStatisticsIntervalLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 4, 5, 2, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemPagingStatisticsIntervalLength.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemPagingStatisticsIntervalLength.setDescription('Length of interval during which paging statistics are computed.')
smSiaSystemPagingStatisticsPageFaults = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 4, 5, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemPagingStatisticsPageFaults.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemPagingStatisticsPageFaults.setDescription('Total number of page faults over the interval. Not supported on Digital UNIX.')
smSiaSystemPagingStatisticsPageReclaims = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 4, 5, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemPagingStatisticsPageReclaims.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemPagingStatisticsPageReclaims.setDescription('Total number of page reclaims over the interval. On Digital UNIX, this variable is the number of pages freed.')
smSiaSystemPagingStatisticsPagesPagedIn = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 4, 5, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemPagingStatisticsPagesPagedIn.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemPagingStatisticsPagesPagedIn.setDescription('Total number of Pages Paged In over the interval')
smSiaSystemPagingStatisticsPagesPagedOut = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 4, 5, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemPagingStatisticsPagesPagedOut.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemPagingStatisticsPagesPagedOut.setDescription('Total number of Pages Paged Out over the interval')
smSiaSystemPagingStatisticsPageInsFromPagingSpace = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 4, 5, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemPagingStatisticsPageInsFromPagingSpace.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemPagingStatisticsPageInsFromPagingSpace.setDescription('Total number of Page Ins From Paging Space. Not supported on Digital UNIX.')
smSiaSystemPagingStatisticsPageOutsFromPagingSpace = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 4, 5, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemPagingStatisticsPageOutsFromPagingSpace.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemPagingStatisticsPageOutsFromPagingSpace.setDescription('Total number of Page Outs From Paging Space Not supported on Digital UNIX.')
smSiaSystemPagingStatisticsStartIOs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 4, 5, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemPagingStatisticsStartIOs.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemPagingStatisticsStartIOs.setDescription('Total number of IO Starts Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemPagingStatisticsDoneIOs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 4, 5, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemPagingStatisticsDoneIOs.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemPagingStatisticsDoneIOs.setDescription('Total number of IOs Done Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemPagingStatisticsPageScans = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 4, 5, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemPagingStatisticsPageScans.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemPagingStatisticsPageScans.setDescription('Total number of page scans')
smSiaSystemPagingStatisticsScanClockCycles = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 4, 5, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemPagingStatisticsScanClockCycles.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemPagingStatisticsScanClockCycles.setDescription('Total page scan clock cycles. Not supported on Digital UNIX.')
smSiaSystemPagingStatisticsPageSteals = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 4, 5, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemPagingStatisticsPageSteals.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemPagingStatisticsPageSteals.setDescription('Total number of page steals Not supported on HP-UX or Digital UNIX.')
smSiaSystemPagingStatisticsFreeFrameWaits = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 4, 5, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemPagingStatisticsFreeFrameWaits.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemPagingStatisticsFreeFrameWaits.setDescription('Total number of free frame waits. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemPagingStatisticsExtendXPTWaits = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 4, 5, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemPagingStatisticsExtendXPTWaits.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemPagingStatisticsExtendXPTWaits.setDescription('Total number of extend XPT waits. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemPagingStatisticsPendingIOWaits = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 4, 5, 2, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemPagingStatisticsPendingIOWaits.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemPagingStatisticsPendingIOWaits.setDescription('Total number of Pending I/O waits Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemPagingStatisticsPageFaultsMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 4, 5, 2, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemPagingStatisticsPageFaultsMinimum.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemPagingStatisticsPageFaultsMinimum.setDescription('Minimum page faults. Not supported on Digital UNIX.')
smSiaSystemPagingStatisticsPageReclaimsMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 4, 5, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemPagingStatisticsPageReclaimsMinimum.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemPagingStatisticsPageReclaimsMinimum.setDescription('Minimum page reclaims')
smSiaSystemPagingStatisticsPagesPagedInMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 4, 5, 2, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemPagingStatisticsPagesPagedInMinimum.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemPagingStatisticsPagesPagedInMinimum.setDescription('Minimum pages paged in')
smSiaSystemPagingStatisticsPagesPagedOutMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 4, 5, 2, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemPagingStatisticsPagesPagedOutMinimum.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemPagingStatisticsPagesPagedOutMinimum.setDescription('Minimum pages paged out')
smSiaSystemPagingStatisticsPageInsFromPagingSpaceMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 4, 5, 2, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemPagingStatisticsPageInsFromPagingSpaceMinimum.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemPagingStatisticsPageInsFromPagingSpaceMinimum.setDescription('Minimum Page Ins From Paging Space. Not supported on Digital UNIX.')
smSiaSystemPagingStatisticsPageOutsFromPagingSpaceMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 4, 5, 2, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemPagingStatisticsPageOutsFromPagingSpaceMinimum.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemPagingStatisticsPageOutsFromPagingSpaceMinimum.setDescription('Minimum Page Outs From Paging Space. Not supported on Digital UNIX.')
smSiaSystemPagingStatisticsStartIOsMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 4, 5, 2, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemPagingStatisticsStartIOsMinimum.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemPagingStatisticsStartIOsMinimum.setDescription('Minimum IO Starts Not supported on HP-UX or Digital UNIX.')
smSiaSystemPagingStatisticsDoneIOsMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 4, 5, 2, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemPagingStatisticsDoneIOsMinimum.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemPagingStatisticsDoneIOsMinimum.setDescription('Minimum IOs Done Not supported on HP-UX or Digital UNIX.')
smSiaSystemPagingStatisticsPageScansMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 4, 5, 2, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemPagingStatisticsPageScansMinimum.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemPagingStatisticsPageScansMinimum.setDescription('Minimum number of page scans')
smSiaSystemPagingStatisticsScanClockCyclesMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 4, 5, 2, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemPagingStatisticsScanClockCyclesMinimum.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemPagingStatisticsScanClockCyclesMinimum.setDescription('Minimum page scan clock cycles Not supported on Digital UNIX.')
smSiaSystemPagingStatisticsPageStealsMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 4, 5, 2, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemPagingStatisticsPageStealsMinimum.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemPagingStatisticsPageStealsMinimum.setDescription('Minimum page steals Not supported on HP-UX or Digital UNIX.')
smSiaSystemPagingStatisticsFreeFrameWaitsMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 4, 5, 2, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemPagingStatisticsFreeFrameWaitsMinimum.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemPagingStatisticsFreeFrameWaitsMinimum.setDescription('Minimum free frame waits Not supported on HP-UX or Digital UNIX.')
smSiaSystemPagingStatisticsExtendXPTWaitsMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 4, 5, 2, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemPagingStatisticsExtendXPTWaitsMinimum.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemPagingStatisticsExtendXPTWaitsMinimum.setDescription('Minimum Extend XPT waits. Not supported on HP-UX or Digital UNIX.')
smSiaSystemPagingStatisticsPendingIOWaitsMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 4, 5, 2, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemPagingStatisticsPendingIOWaitsMinimum.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemPagingStatisticsPendingIOWaitsMinimum.setDescription('Minimum Pending I/O waits Not supported on HP-UX or Digital UNIX.')
smSiaSystemPagingStatisticsPageFaultsMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 4, 5, 2, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemPagingStatisticsPageFaultsMaximum.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemPagingStatisticsPageFaultsMaximum.setDescription('Maximum page faults Not supported on Digital UNIX.')
smSiaSystemPagingStatisticsPageReclaimsMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 4, 5, 2, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemPagingStatisticsPageReclaimsMaximum.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemPagingStatisticsPageReclaimsMaximum.setDescription('Maximum page reclaims')
smSiaSystemPagingStatisticsPagesPagedInMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 4, 5, 2, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemPagingStatisticsPagesPagedInMaximum.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemPagingStatisticsPagesPagedInMaximum.setDescription('Maximum Pages Paged In')
smSiaSystemPagingStatisticsPagesPagedOutMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 4, 5, 2, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemPagingStatisticsPagesPagedOutMaximum.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemPagingStatisticsPagesPagedOutMaximum.setDescription('Maximum Pages Paged Out')
smSiaSystemPagingStatisticsPageInsFromPagingSpaceMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 4, 5, 2, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemPagingStatisticsPageInsFromPagingSpaceMaximum.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemPagingStatisticsPageInsFromPagingSpaceMaximum.setDescription('Maximum Page Ins From Paging Space Not supported on Digital UNIX.')
smSiaSystemPagingStatisticsPageOutsFromPagingSpaceMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 4, 5, 2, 1, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemPagingStatisticsPageOutsFromPagingSpaceMaximum.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemPagingStatisticsPageOutsFromPagingSpaceMaximum.setDescription('Maximum Page Outs From Paging Space Not supported on Digital UNIX.')
smSiaSystemPagingStatisticsStartIOsMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 4, 5, 2, 1, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemPagingStatisticsStartIOsMaximum.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemPagingStatisticsStartIOsMaximum.setDescription('Maximum IO Starts Not supported on HP-UX or Digital UNIX.')
smSiaSystemPagingStatisticsDoneIOsMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 4, 5, 2, 1, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemPagingStatisticsDoneIOsMaximum.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemPagingStatisticsDoneIOsMaximum.setDescription('Maximum IOs Done Not supported on HP-UX or Digital UNIX.')
smSiaSystemPagingStatisticsPageScansMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 4, 5, 2, 1, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemPagingStatisticsPageScansMaximum.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemPagingStatisticsPageScansMaximum.setDescription('Maximum number of page scans')
smSiaSystemPagingStatisticsScanClockCyclesMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 4, 5, 2, 1, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemPagingStatisticsScanClockCyclesMaximum.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemPagingStatisticsScanClockCyclesMaximum.setDescription('Maximum page scan clock cycles Not supported on Digital UNIX.')
smSiaSystemPagingStatisticsPageStealsMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 4, 5, 2, 1, 42), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemPagingStatisticsPageStealsMaximum.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemPagingStatisticsPageStealsMaximum.setDescription('Maximum page steals Not supported on HP-UX or Digital UNIX.')
smSiaSystemPagingStatisticsFreeFrameWaitsMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 4, 5, 2, 1, 43), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemPagingStatisticsFreeFrameWaitsMaximum.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemPagingStatisticsFreeFrameWaitsMaximum.setDescription('Maximum free frame waits Not supported on HP-UX or Digital UNIX.')
smSiaSystemPagingStatisticsExtendXPTWaitsMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 4, 5, 2, 1, 44), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemPagingStatisticsExtendXPTWaitsMaximum.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemPagingStatisticsExtendXPTWaitsMaximum.setDescription('Maximum Extend XPT waits. Not supported on HP-UX or Digital UNIX.')
smSiaSystemPagingStatisticsPendingIOWaitsMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 4, 5, 2, 1, 45), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemPagingStatisticsPendingIOWaitsMaximum.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemPagingStatisticsPendingIOWaitsMaximum.setDescription('Maximum Pending I/O waits Not supported on HP-UX or Digital UNIX.')
smSiaSystemBufferPoolMark = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemBufferPoolMark.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemBufferPoolMark.setDescription('Buffer Pool High water mark On Sun Solaris, the mbuf high water mark includes only the normal mbuf and not the cluster mbuf. Not supported on Digital UNIX.')
smSiaSystemMaxMbufs = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemMaxMbufs.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemMaxMbufs.setDescription('Max mbufs high-water mark. Not supported on Sun Solaris 2.x or Digital UNIX.')
smSiaSystemMaxUserProcesses = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemMaxUserProcesses.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemMaxUserProcesses.setDescription('Maximum number of processes per user.')
smSiaSystemMaxSystemProcesses = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemMaxSystemProcesses.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemMaxSystemProcesses.setDescription('Maximum number of processes on the system. Not supported on Digital UNIX.')
smSiaSystemRecordLockTableSize = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemRecordLockTableSize.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemRecordLockTableSize.setDescription('Number of entries in record lock table. Not supported on Sun Solaris.')
smSiaSystemOpenFileTableSize = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemOpenFileTableSize.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemOpenFileTableSize.setDescription('Maximum number of entries in open file table. Not supported on Sun Solaris 2.x.')
smSiaSystemCBlockArraySize = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 2, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemCBlockArraySize.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemCBlockArraySize.setDescription('Maximum number of cblocks in cblock array. For Sun Solaris 2.x, it is the number of clists allocated. Not supported on Digital UNIX.')
smSiaSystemDiskIOHistory = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDiskIOHistory.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDiskIOHistory.setDescription('Disk I/O History enabled. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemAutomaticBootAfterHalt = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemAutomaticBootAfterHalt.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemAutomaticBootAfterHalt.setDescription('Automatic boot after halt. Not supported on HP-UX or Digital UNIX. On Sun Solaris, this variable reflects the value of the openprom option variable <watchdog-reboot?>.')
smSiaSystemMemScrub = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 2, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemMemScrub.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemMemScrub.setDescription('Memory scrubbing enabled. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemLeastPriv = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 2, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemLeastPriv.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemLeastPriv.setDescription('Least privilege enablement. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemMaxPout = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 2, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemMaxPout.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemMaxPout.setDescription('Number of file pageouts at which waiting occurs. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemMinPout = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 2, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemMinPout.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemMinPout.setDescription('Number of file pageouts at which ready occurs. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemPageSize = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 2, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemPageSize.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemPageSize.setDescription('System page size (from getpagesize())')
smSiaSystemProcessMaxOpenFiles = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 2, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemProcessMaxOpenFiles.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemProcessMaxOpenFiles.setDescription('Maximum open files per process.')
smSiaSystemProcessMaxOpenStreams = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 2, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemProcessMaxOpenStreams.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemProcessMaxOpenStreams.setDescription('Maximum open streams per process On Sun Solaris, there is no limit on the number of streams in the system or per processor. The maximum open streams per process is limited by the number of open files per process. That is, this variable always has the same value as smSiaSystemProcessMaxOpenFiles.')
smSiaSystemProcessDescriptorTableSize = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 2, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemProcessDescriptorTableSize.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemProcessDescriptorTableSize.setDescription('Descriptor table size for System Information Agent.')
smSiaSystemPhysicalMemorySize = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 2, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemPhysicalMemorySize.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemPhysicalMemorySize.setDescription('Amount of usable physical memory in Mbytes')
smSiaSystemDeviceList = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 1))
smSiaSystemDeviceTokenRing = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 2))
smSiaSystemDeviceEthernet = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 3))
smSiaSystemDeviceX25 = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4))
smSiaSystemDeviceListInstalled = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceListInstalled.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceListInstalled.setDescription('The number of devices installed.')
smSiaSystemDeviceListTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 1, 2), )
if mibBuilder.loadTexts: smSiaSystemDeviceListTable.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceListTable.setDescription('Device list table.')
smSiaSystemDeviceListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 1, 2, 1), ).setIndexNames((0, "SYSINFO-MIB", "smSiaSystemDeviceListName"))
if mibBuilder.loadTexts: smSiaSystemDeviceListEntry.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceListEntry.setDescription('Each entry contains objects for a particular device.')
smSiaSystemDeviceListName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 1, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceListName.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceListName.setDescription('Names of devices installed.')
smSiaSystemDeviceListDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 1, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceListDescription.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceListDescription.setDescription('Location of device. Shows status, location and description')
smSiaSystemDeviceListLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 1, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceListLocation.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceListLocation.setDescription('Location of device. Not supported on Sun Solaris.')
smSiaSystemDeviceListVPD = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 1, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceListVPD.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceListVPD.setDescription('Vital Product Data. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemDeviceListAttributes = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 1, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceListAttributes.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceListAttributes.setDescription('Device Attributes. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemDeviceListDiagnostics = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 1, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceListDiagnostics.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceListDiagnostics.setDescription('Results of diagnostic tests. Currently reserved')
smSiaSystemDeviceTokenRingInstalled = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceTokenRingInstalled.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceTokenRingInstalled.setDescription('The number of devices installed.')
smSiaSystemDeviceTokenRingTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 2, 2), )
if mibBuilder.loadTexts: smSiaSystemDeviceTokenRingTable.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceTokenRingTable.setDescription('Adapter table.')
smSiaSystemDeviceTokenRingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 2, 2, 1), ).setIndexNames((0, "SYSINFO-MIB", "smSiaSystemDeviceTokenRingNumber"))
if mibBuilder.loadTexts: smSiaSystemDeviceTokenRingEntry.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceTokenRingEntry.setDescription('Each entry contains objects for a particular device.')
smSiaSystemDeviceTokenRingNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceTokenRingNumber.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceTokenRingNumber.setDescription('Token ring number.')
smSiaSystemDeviceTokenRingHardwareAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 2, 2, 1, 2), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceTokenRingHardwareAddress.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceTokenRingHardwareAddress.setDescription('Burned-in MAC Address. On Sun Solaris 2.x, the token ring card does not have a built-in address. This variable is the same as the smSiaSystemDeviceTokenRingCurrentAddress. On AIX4, this variable is the same as the smSiaSystemDeviceTokenRingCurrentAddress for devices that are based on CDLI model.')
smSiaSystemDeviceTokenRingCurrentAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 2, 2, 1, 3), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceTokenRingCurrentAddress.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceTokenRingCurrentAddress.setDescription('Current MAC Address.')
smSiaSystemDeviceTokenRingReceiveDataOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 2, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceTokenRingReceiveDataOffset.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceTokenRingReceiveDataOffset.setDescription('Receive data transfer offset. Not supported on HP-UX, Sun Solaris and Digital UNIX. On AIX4, this variable is not supported for devices that are based on CDLI model.')
smSiaSystemDeviceTokenRingBroadwrap = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceTokenRingBroadwrap.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceTokenRingBroadwrap.setDescription('Supports broadcast wrap of data. Not supported on HP-UX, Sun Solaris and Digital UNIX. On AIX4, this variable is not supported for devices that are based on CDLI model.')
smSiaSystemDeviceTokenRingTxByteMcnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 2, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceTokenRingTxByteMcnt.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceTokenRingTxByteMcnt.setDescription('Most significant bits of successfully transmitted byte count. Not supported on HP-UX or Sun Solaris.')
smSiaSystemDeviceTokenRingTxByteLcnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 2, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceTokenRingTxByteLcnt.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceTokenRingTxByteLcnt.setDescription('Least significant bits of successfully transmitted byte count. Not supported on HP-UX or Sun Solaris.')
smSiaSystemDeviceTokenRingRxByteMcnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 2, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceTokenRingRxByteMcnt.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceTokenRingRxByteMcnt.setDescription('Most significant bits of successfully received byte count. Not supported on HP-UX or Sun Solaris.')
smSiaSystemDeviceTokenRingRxByteLcnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 2, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceTokenRingRxByteLcnt.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceTokenRingRxByteLcnt.setDescription('Least significant bits of successfully received byte count. Not supported on HP-UX or Sun Solaris.')
smSiaSystemDeviceTokenRingTxFrameMcnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 2, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceTokenRingTxFrameMcnt.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceTokenRingTxFrameMcnt.setDescription('Most significant bits of successfully transmitted byte count.')
smSiaSystemDeviceTokenRingTxFrameLcnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 2, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceTokenRingTxFrameLcnt.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceTokenRingTxFrameLcnt.setDescription('Least significant bits of successfully transmitted byte count.')
smSiaSystemDeviceTokenRingRxFrameMcnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 2, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceTokenRingRxFrameMcnt.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceTokenRingRxFrameMcnt.setDescription('Most significant bits of successfully received byte count.')
smSiaSystemDeviceTokenRingRxFrameLcnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 2, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceTokenRingRxFrameLcnt.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceTokenRingRxFrameLcnt.setDescription('Least significant bits of successfully received byte count.')
smSiaSystemDeviceTokenRingTxErrCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 2, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceTokenRingTxErrCnt.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceTokenRingTxErrCnt.setDescription('Frame transmit error count Not supported on Digital UNIX.')
smSiaSystemDeviceTokenRingRxErrCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 2, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceTokenRingRxErrCnt.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceTokenRingRxErrCnt.setDescription('Frame receive error count Not supported on Digital UNIX.')
smSiaSystemDeviceTokenRingNidTblHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 2, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceTokenRingNidTblHigh.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceTokenRingNidTblHigh.setDescription('Maximum netids in use. Not supported on HP-UX, Sun Solaris and Digital UNIX. On AIX4, this variable is not supported for devices that are based on CDLI model.')
smSiaSystemDeviceTokenRingTxQueHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 2, 2, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceTokenRingTxQueHigh.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceTokenRingTxQueHigh.setDescription('Maximum transmits ever queued for adapter. On an adapter, buffer queue size is 30 by default. It can be useful to set a threshold on this variable to watch for the value to go over 20, indicating a need to increase buffer queue size to prevent an overflow. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemDeviceTokenRingRxQueHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 2, 2, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceTokenRingRxQueHigh.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceTokenRingRxQueHigh.setDescription('Maximum received ever queued for any open. On an adapter, buffer queue size is 30 by dfault. It can be useful to set a threshold on this variable to watch for the value to go over 20, indicating a need to increase buffer queue size to prevent an overflow. Not supported on HP-UX, Sun Solaris and Digital UNIX. On AIX4, this variable is not supported for devices that are based on CDLI model.')
smSiaSystemDeviceTokenRingStaQueHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 2, 2, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceTokenRingStaQueHigh.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceTokenRingStaQueHigh.setDescription('Maximum status blocks queued for any open. Not supported on HP-UX, Sun Solaris and Digital UNIX. On AIX4, this variable is not supported for devices that are based on CDLI model.')
smSiaSystemDeviceTokenRingIntrLost = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 2, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceTokenRingIntrLost.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceTokenRingIntrLost.setDescription('Interrupts lost. Not supported on HP-UX, Sun Solaris and Digital UNIX. On AIX4, this variable is not supported for devices that are based on CDLI model.')
smSiaSystemDeviceTokenRingWdtLost = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 2, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceTokenRingWdtLost.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceTokenRingWdtLost.setDescription('Wdt Interrupts lost. Not supported on HP-UX, Sun Solaris and Digital UNIX. On AIX4, this variable is not supported for devices that are based on CDLI model.')
smSiaSystemDeviceTokenRingTimoLost = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 2, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceTokenRingTimoLost.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceTokenRingTimoLost.setDescription('Timeout Interrupts lost. Not supported on HP-UX, Sun Solaris and Digital UNIX. On AIX4, this variable is not supported for devices that are based on CDLI model.')
smSiaSystemDeviceTokenRingStaQueOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 2, 2, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceTokenRingStaQueOverflow.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceTokenRingStaQueOverflow.setDescription('Status lost due to queue overflow. Not supported on HP-UX, Sun Solaris and Digital UNIX. On AIX4, this variable is not supported for devices that are based on CDLI model.')
smSiaSystemDeviceTokenRingRxQueOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 2, 2, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceTokenRingRxQueOverflow.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceTokenRingRxQueOverflow.setDescription('Packet lost due to queue overflow. Not supported on HP-UX, Sun Solaris and Digital UNIX. On AIX4, this variable is not supported for devices that are based on CDLI model.')
smSiaSystemDeviceTokenRingRxQueNoMbuf = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 2, 2, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceTokenRingRxQueNoMbuf.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceTokenRingRxQueNoMbuf.setDescription("Packet lost due to no mbufs. If this variable's value is not 0, you should extend mbuf as soon as possible. All data that goes through the adapter is copied from adapter to mbuf. Thus, if no mbuf is available to receive data, serious errors can occur. Be conservative when increasing mbuf size, because this takes real machine memory away from other applications. Not supported on HP-UX or Sun Solaris.")
smSiaSystemDeviceTokenRingRxQueNoMbufExt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 2, 2, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceTokenRingRxQueNoMbufExt.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceTokenRingRxQueNoMbufExt.setDescription("Packet lost due to no mbuf extensions. If this variable's value is not 0, you should extend mbuf as soon as possible. All data that goes through the adapter is copied from adapter to mbuf. Thus, if no mbuf extension is available to receive data, serious errors can occur. Be conservative when increasing mbuf size, because this takes real machine memory away from other applications. Not supported on HP-UX, Sun Solaris and Digital UNIX. On AIX4, this variable is not supported for devices that are based on CDLI model.")
smSiaSystemDeviceTokenRingTxIntrCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 2, 2, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceTokenRingTxIntrCnt.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceTokenRingTxIntrCnt.setDescription('Transmit interrupt count. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemDeviceTokenRingRxIntrCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 2, 2, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceTokenRingRxIntrCnt.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceTokenRingRxIntrCnt.setDescription('Receive interrupt count. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemDeviceTokenRingPktRejCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 2, 2, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceTokenRingPktRejCnt.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceTokenRingPktRejCnt.setDescription('Packets rejected no NETID. Not supported on HP-UX, Sun Solaris and Digital UNIX. On AIX4, this variable is not supported for devices that are based on CDLI model.')
smSiaSystemDeviceTokenRingPktAccCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 2, 2, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceTokenRingPktAccCnt.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceTokenRingPktAccCnt.setDescription('Packets accepted - valid NETID. Not supported on HP-UX, Sun Solaris and Digital UNIX. On AIX4, this variable is not supported for devices that are based on CDLI model.')
smSiaSystemDeviceTokenRingPktTxCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 2, 2, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceTokenRingPktTxCnt.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceTokenRingPktTxCnt.setDescription('Packet transmit counter. Not supported on HP-UX or Sun Solaris. On AIX4, this variable is not supported for devices that are based on CDLI model.')
smSiaSystemDeviceTokenRingOvfloPktCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 2, 2, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceTokenRingOvfloPktCnt.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceTokenRingOvfloPktCnt.setDescription('Overflow packets received. Not supported on HP-UX or Sun Solaris. On AIX4, this variable is not supported for devices that are based on CDLI model.')
smSiaSystemDeviceTokenRingPktTxErrCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 2, 2, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceTokenRingPktTxErrCnt.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceTokenRingPktTxErrCnt.setDescription('Packet transmission errors detected by adapter. Not supported on HP-UX or Sun Solaris. On AIX4, this variable is not supported for devices that are based on CDLI model.')
smSiaSystemDeviceTokenRingSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 2, 2, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceTokenRingSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceTokenRingSpeed.setDescription('Ring speed, megabits/second. Not supported on HP-UX. On Sun Solaris, the speed of the Sun token ring card is controlled by jumpers on the card. The setting is not available from software. It defaults to return the speed of 16M.')
smSiaSystemDeviceTokenRingVPD = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 2, 2, 1, 35), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceTokenRingVPD.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceTokenRingVPD.setDescription('Vital Product Data from adapter. Not supported on HP-UX or Digital UNIX. On Sun Solaris, this variable always shows the he name of the device, for example, tr0.')
smSiaSystemDeviceTokenRingAdapPhysAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 2, 2, 1, 36), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceTokenRingAdapPhysAddr.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceTokenRingAdapPhysAddr.setDescription('Adapter Physical Address. On AIX4, this variable is not supported for devices that are based on CDLI model.')
smSiaSystemDeviceTokenRingUpstreamNodeAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 2, 2, 1, 37), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceTokenRingUpstreamNodeAddr.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceTokenRingUpstreamNodeAddr.setDescription('Upstream node address. Not supported on HP-UX and Sun Solaris. On AIX4, this variable is not supported for devices that are based on CDLI model.')
smSiaSystemDeviceTokenRingUpstreamPhysAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 2, 2, 1, 38), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceTokenRingUpstreamPhysAddr.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceTokenRingUpstreamPhysAddr.setDescription('Upstream Physical Address. Not supported on HP-UX and Sun Solaris. On AIX4, this variable is not supported for devices that are based on CDLI model.')
smSiaSystemDeviceTokenRingLastPollAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 2, 2, 1, 39), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceTokenRingLastPollAddr.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceTokenRingLastPollAddr.setDescription('Last Poll address. Not supported on HP-UX, Sun Solaris and Digital UNIX. On AIX4, this variable is not supported for devices that are based on CDLI model.')
smSiaSystemDeviceTokenRingAuthorEnv = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 2, 2, 1, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceTokenRingAuthorEnv.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceTokenRingAuthorEnv.setDescription('Authorized environment. Not supported on HP-UX, Sun Solaris and Digital UNIX. On AIX4, this variable is not supported for devices that are based on CDLI model.')
smSiaSystemDeviceTokenRingTxAccessPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 2, 2, 1, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceTokenRingTxAccessPriority.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceTokenRingTxAccessPriority.setDescription('Transmit priority. Not supported on HP-UX and Sun Solaris. On AIX4, this variable is not supported for devices that are based on CDLI model.')
smSiaSystemDeviceTokenRingSrcClassAuthor = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 2, 2, 1, 42), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceTokenRingSrcClassAuthor.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceTokenRingSrcClassAuthor.setDescription('Source class authorization. Not supported on HP-UX, Sun Solaris and Digital UNIX. On AIX4, this variable is not supported for devices that are based on CDLI model.')
smSiaSystemDeviceTokenRingLastAttenCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 2, 2, 1, 43), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceTokenRingLastAttenCode.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceTokenRingLastAttenCode.setDescription('Last attention code. Not supported on HP-UX, Sun Solaris and Digital UNIX. On AIX4, this variable is not supported for devices that are based on CDLI model.')
smSiaSystemDeviceTokenRingLastSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 2, 2, 1, 44), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceTokenRingLastSrcAddr.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceTokenRingLastSrcAddr.setDescription('Last source address. Not supported on HP-UX, Sun Solaris and Digital UNIX. On AIX4, this variable is not supported for devices that are based on CDLI model.')
smSiaSystemDeviceTokenRingLastBeaconType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 2, 2, 1, 45), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceTokenRingLastBeaconType.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceTokenRingLastBeaconType.setDescription('Last beacon type. Not supported on HP-UX, Sun Solaris and Digital UNIX. On AIX4, this variable is not supported for devices that are based on CDLI model.')
smSiaSystemDeviceTokenRingLastMajorVector = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 2, 2, 1, 46), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceTokenRingLastMajorVector.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceTokenRingLastMajorVector.setDescription('Last major vector. Not supported on HP-UX and Sun Solaris. On AIX4, this variable is not supported for devices that are based on CDLI model.')
smSiaSystemDeviceTokenRingRingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 2, 2, 1, 47), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceTokenRingRingStatus.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceTokenRingRingStatus.setDescription('Ring status. Not supported on Sun Solaris.')
smSiaSystemDeviceTokenRingSoftErrorTimerVal = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 2, 2, 1, 48), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceTokenRingSoftErrorTimerVal.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceTokenRingSoftErrorTimerVal.setDescription('Soft Error timer value. Not supported on HP-UX and Sun Solaris. On AIX4, this variable is not supported for devices that are based on CDLI model.')
smSiaSystemDeviceTokenRingFrontEndTimerVal = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 2, 2, 1, 49), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceTokenRingFrontEndTimerVal.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceTokenRingFrontEndTimerVal.setDescription('Front end timer value. Not supported on HP-UX, Sun Solaris and Digital UNIX. On AIX4, this variable is not supported for devices that are based on CDLI model.')
smSiaSystemDeviceTokenRingMonitorErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 2, 2, 1, 50), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceTokenRingMonitorErrorCode.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceTokenRingMonitorErrorCode.setDescription('Monitor error code. Not supported on HP-UX and Sun Solaris. On AIX4, this variable is not supported for devices that are based on CDLI model.')
smSiaSystemDeviceTokenRingBeaconTxType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 2, 2, 1, 51), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceTokenRingBeaconTxType.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceTokenRingBeaconTxType.setDescription('Beacon transmit type. Not supported on HP-UX and Sun Solaris. On AIX4, this variable is not supported for devices that are based on CDLI model.')
smSiaSystemDeviceTokenRingBeaconRxType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 2, 2, 1, 52), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceTokenRingBeaconRxType.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceTokenRingBeaconRxType.setDescription('Beacon Receive type. Not supported on HP-UX and Sun Solaris. On AIX4, this variable is not supported for devices that are based on CDLI model.')
smSiaSystemDeviceTokenRingFrameCorrSave = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 2, 2, 1, 53), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceTokenRingFrameCorrSave.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceTokenRingFrameCorrSave.setDescription('Frame Correlator save. Not supported on HP-UX, Sun Solaris and Digital UNIX. On AIX4, this variable is not supported for devices that are based on CDLI model.')
smSiaSystemDeviceTokenRingBeaconStationNAUN = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 2, 2, 1, 54), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceTokenRingBeaconStationNAUN.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceTokenRingBeaconStationNAUN.setDescription('Beaconing station NAUN. Not supported on HP-UX, Sun Solaris and Digital UNIX. On AIX4, this variable is not supported for devices that are based on CDLI model.')
smSiaSystemDeviceTokenRingBeaconStationPhysAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 2, 2, 1, 55), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceTokenRingBeaconStationPhysAddr.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceTokenRingBeaconStationPhysAddr.setDescription('Beaconing station physical address. Not supported on HP-UX and Sun Solaris. On AIX4, this variable is not supported for devices that are based on CDLI model.')
smSiaSystemDeviceTokenRingClear = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 2, 2, 1, 56), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smSiaSystemDeviceTokenRingClear.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceTokenRingClear.setDescription('Set to clear clearable statistics Not supported on AIX and Digital UNIX.')
smSiaSystemDeviceEthernetInstalled = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceEthernetInstalled.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceEthernetInstalled.setDescription('The number of devices installed.')
smSiaSystemDeviceEthernetTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 3, 2), )
if mibBuilder.loadTexts: smSiaSystemDeviceEthernetTable.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceEthernetTable.setDescription('Adapter table.')
smSiaSystemDeviceEthernetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 3, 2, 1), ).setIndexNames((0, "SYSINFO-MIB", "smSiaSystemDeviceEthernetNumber"))
if mibBuilder.loadTexts: smSiaSystemDeviceEthernetEntry.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceEthernetEntry.setDescription('Each entry contains objects for a particular device')
smSiaSystemDeviceEthernetNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceEthernetNumber.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceEthernetNumber.setDescription('Adapter number. On Sun Solaris, there can be more than one kind of Ethernet interface on a system; both ie and le can be on the same system. The Ethernet number does not reflect the device unit number of the interface device; it is just a row index on the MIB table.')
smSiaSystemDeviceEthernetHardwareAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 3, 2, 1, 2), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceEthernetHardwareAddress.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceEthernetHardwareAddress.setDescription('Burned-in MAC Address. On Sun Solaris 2.x, the Ethernet interface does not have its own built-in hardware address; instead, all network interfaces use the MAC address in the idprom on the motherboard. This variable is the same as smSiaSystemDeviceEthernetCurrentAddress. For AIX4 devices supporting CDLI model, this variable is the same as the smSiaSystemDeviceEthernetCurrentAddress.')
smSiaSystemDeviceEthernetCurrentAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 3, 2, 1, 3), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceEthernetCurrentAddress.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceEthernetCurrentAddress.setDescription('Current MAC Address Not supported on Digital UNIX.')
smSiaSystemDeviceEthernetReceiveDataOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 3, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceEthernetReceiveDataOffset.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceEthernetReceiveDataOffset.setDescription('Receive Data transfer Offset Not supported on HP-UX, Sun Solaris and Digital UNIX. On AIX4, this variable is not supported for devices that are based on CDLI model.')
smSiaSystemDeviceEthernetBroadwrap = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceEthernetBroadwrap.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceEthernetBroadwrap.setDescription('Supports broadcast wrap of data. Not supported on HP-UX, Sun Solaris and Digital UNIX. On AIX4, this variable is not supported for devices that are based on CDLI model.')
smSiaSystemDeviceEthernetTxByteMcnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 3, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceEthernetTxByteMcnt.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceEthernetTxByteMcnt.setDescription('Most significant bits of successfully transmitted byte count. Not supported on HP-UX or Sun Solaris.')
smSiaSystemDeviceEthernetTxByteLcnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 3, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceEthernetTxByteLcnt.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceEthernetTxByteLcnt.setDescription('Least significant bits of successfully transmitted byte count. Not supported on HP-UX or Sun Solaris.')
smSiaSystemDeviceEthernetRxByteMcnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 3, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceEthernetRxByteMcnt.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceEthernetRxByteMcnt.setDescription('Most significant bits of successfully received byte count. Not supported on HP-UX or Sun Solaris.')
smSiaSystemDeviceEthernetRxByteLcnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 3, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceEthernetRxByteLcnt.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceEthernetRxByteLcnt.setDescription('Least significant bits of successfully received byte count. Not supported on HP-UX or Sun Solaris.')
smSiaSystemDeviceEthernetTxFrameMcnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 3, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceEthernetTxFrameMcnt.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceEthernetTxFrameMcnt.setDescription('Most significant bits of successfully transmitted byte count.')
smSiaSystemDeviceEthernetTxFrameLcnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 3, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceEthernetTxFrameLcnt.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceEthernetTxFrameLcnt.setDescription('Least significant bits of successfully transmitted byte count.')
smSiaSystemDeviceEthernetRxFrameMcnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 3, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceEthernetRxFrameMcnt.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceEthernetRxFrameMcnt.setDescription('Most significant bits of successfully received byte count.')
smSiaSystemDeviceEthernetRxFrameLcnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 3, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceEthernetRxFrameLcnt.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceEthernetRxFrameLcnt.setDescription('Least significant bits of successfully received byte count.')
smSiaSystemDeviceEthernetTxErrCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 3, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceEthernetTxErrCnt.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceEthernetTxErrCnt.setDescription('Frame transmit error count Not supported on Digital UNIX.')
smSiaSystemDeviceEthernetRxErrCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 3, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceEthernetRxErrCnt.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceEthernetRxErrCnt.setDescription('Frame receive error count Not supported on Digital UNIX.')
smSiaSystemDeviceEthernetNidTblHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 3, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceEthernetNidTblHigh.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceEthernetNidTblHigh.setDescription('Maximum netids in use Not supported on HP-UX, Sun Solaris and Digital UNIX. On AIX4, this variable is not supported for devices that are based on CDLI model.')
smSiaSystemDeviceEthernetTxQueHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 3, 2, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceEthernetTxQueHigh.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceEthernetTxQueHigh.setDescription('Maximum transmits ever queued for adapter Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemDeviceEthernetRxQueHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 3, 2, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceEthernetRxQueHigh.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceEthernetRxQueHigh.setDescription('Maximum received ever queued for any open Not supported on HP-UX, Sun Solaris and Digital UNIX. On AIX4, this variable is not supported for devices that are based on CDLI model.')
smSiaSystemDeviceEthernetStaQueHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 3, 2, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceEthernetStaQueHigh.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceEthernetStaQueHigh.setDescription('Maximum status blocks queued for any open Not supported on HP-UX, Sun Solaris and Digital UNIX. On AIX4, this variable is not supported for devices that are based on CDLI model.')
smSiaSystemDeviceEthernetIntrLost = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 3, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceEthernetIntrLost.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceEthernetIntrLost.setDescription('Interrupts lost Not supported on HP-UX, Sun Solaris and Digital UNIX. On AIX4, this variable is not supported for devices that are based on CDLI model.')
smSiaSystemDeviceEthernetWdtLost = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 3, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceEthernetWdtLost.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceEthernetWdtLost.setDescription('Wdt Interrupts lost Not supported on HP-UX, Sun Solaris and Digital UNIX. On AIX4, this variable is not supported for devices that are based on CDLI model.')
smSiaSystemDeviceEthernetTimoLost = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 3, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceEthernetTimoLost.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceEthernetTimoLost.setDescription('Timeout Interrupts lost Not supported on HP-UX, Sun Solaris and Digital UNIX. On AIX4, this variable is not supported for devices that are based on CDLI model.')
smSiaSystemDeviceEthernetStaQueOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 3, 2, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceEthernetStaQueOverflow.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceEthernetStaQueOverflow.setDescription('Status lost due to queue overflow Supported on Sun Solaris 2.4 only. Not supported on HP-UX or Digital UNIX. On AIX4, this variable is not supported for devices that are based on CDLI model.')
smSiaSystemDeviceEthernetRxQueOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 3, 2, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceEthernetRxQueOverflow.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceEthernetRxQueOverflow.setDescription('Packet lost due to queue overflow Not supported on HP-UX, Sun Solaris and Digital UNIX. On AIX4, this variable is not supported for devices that are based on CDLI model.')
smSiaSystemDeviceEthernetRxQueNoMbuf = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 3, 2, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceEthernetRxQueNoMbuf.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceEthernetRxQueNoMbuf.setDescription('Packet lost due to no mbufs Not supported on HP-UX, Sun Solaris and Digital UNIX. On AIX4, this variable is not supported for devices that are based on CDLI model.')
smSiaSystemDeviceEthernetRxQueNoMbufExt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 3, 2, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceEthernetRxQueNoMbufExt.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceEthernetRxQueNoMbufExt.setDescription('Packet lost due to no mbuf extensions Not supported on HP-UX, Sun Solaris and Digital UNIX. On AIX4, this variable is not supported for devices that are based on CDLI model.')
smSiaSystemDeviceEthernetTxIntrCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 3, 2, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceEthernetTxIntrCnt.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceEthernetTxIntrCnt.setDescription('Transmit interrupt count Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemDeviceEthernetRxIntrCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 3, 2, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceEthernetRxIntrCnt.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceEthernetRxIntrCnt.setDescription('Receive interrupt count Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemDeviceEthernetCRCErr = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 3, 2, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceEthernetCRCErr.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceEthernetCRCErr.setDescription('CRC Errors Not supported on Digital UNIX.')
smSiaSystemDeviceEthernetAlignErr = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 3, 2, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceEthernetAlignErr.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceEthernetAlignErr.setDescription('Alignment Errors. On Sun Solaris, this variable is supported on interface ie, not on interface le. Not supported on Digital UNIX.')
smSiaSystemDeviceEthernetOverrun = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 3, 2, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceEthernetOverrun.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceEthernetOverrun.setDescription('Overrun Errors. On Sun Solaris 2.x, this variable is supported on interface ie, not on interface le. Not supported on HP-UX.')
smSiaSystemDeviceEthernetTooShort = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 3, 2, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceEthernetTooShort.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceEthernetTooShort.setDescription('Too short Errors Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemDeviceEthernetTooLong = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 3, 2, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceEthernetTooLong.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceEthernetTooLong.setDescription('Too long Errors. Not supported on Sun Solaris.')
smSiaSystemDeviceEthernetNoResources = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 3, 2, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceEthernetNoResources.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceEthernetNoResources.setDescription('Out of resource errors. Not supported on Sun Solaris 2.x or Digital UNIX.')
smSiaSystemDeviceEthernetPktDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 3, 2, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceEthernetPktDiscard.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceEthernetPktDiscard.setDescription('Packets discarded. Not supported on Sun Solaris.')
smSiaSystemDeviceEthernetMaxCollision = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 3, 2, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceEthernetMaxCollision.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceEthernetMaxCollision.setDescription('Maximum collisions')
smSiaSystemDeviceEthernetLateCollision = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 3, 2, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceEthernetLateCollision.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceEthernetLateCollision.setDescription('Collisions after slot time elapsed. On Sun Solaris, this variable is supported on interface le, not on interface ie. Not supported on Digital UNIX.')
smSiaSystemDeviceEthernetCarrierLost = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 3, 2, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceEthernetCarrierLost.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceEthernetCarrierLost.setDescription('Carrier lost errors')
smSiaSystemDeviceEthernetUnderrun = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 3, 2, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceEthernetUnderrun.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceEthernetUnderrun.setDescription('Underrun errors. On Sun Solaris 2.x, this variable is supported on interface ie, not on interface le. Not supported on HP-UX or Digital UNIX.')
smSiaSystemDeviceEthernetCTSLost = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 3, 2, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceEthernetCTSLost.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceEthernetCTSLost.setDescription('Clear to send lost errors. Not supported on HP-UX, Sun Solaris 2.x or Digital UNIX.')
smSiaSystemDeviceEthernetTxTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 3, 2, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceEthernetTxTimeouts.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceEthernetTxTimeouts.setDescription('Transmit Timeouts Not supported on HP-UX or Digital UNIX.')
smSiaSystemDeviceEthernetParErrCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 3, 2, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceEthernetParErrCnt.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceEthernetParErrCnt.setDescription('Parity errors Not supported on HP-UX, Sun Solaris or Digital UNIX. On AIX4, this variable is not supported for devices that are based on CDLI model.')
smSiaSystemDeviceEthernetDiagOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 3, 2, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceEthernetDiagOverflow.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceEthernetDiagOverflow.setDescription('Diagnostic overflow. Not supported on HP-UX, Sun Solaris and Digital UNIX. On AIX4, this variable is not supported for devices that are based on CDLI model.')
smSiaSystemDeviceEthernetExecOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 3, 2, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceEthernetExecOverflow.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceEthernetExecOverflow.setDescription('Execute queue overflows. Not supported on HP-UX, Sun Solaris and Digital UNIX. On AIX4, this variable is not supported for devices that are based on CDLI model.')
smSiaSystemDeviceEthernetExecCmdErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 3, 2, 1, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceEthernetExecCmdErrors.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceEthernetExecCmdErrors.setDescription('Execute command errors. Not supported on HP-UX, Sun Solaris and Digital UNIX. On AIX4, this variable is not supported for devices that are based on CDLI model.')
smSiaSystemDeviceEthernetHostRecEol = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 3, 2, 1, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceEthernetHostRecEol.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceEthernetHostRecEol.setDescription('Host received end of list. Not supported on HP-UX, Sun Solaris and Digital UNIX. On AIX4, this variable is not supported for devices that are based on CDLI model.')
smSiaSystemDeviceEthernetAdptRecEol = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 3, 2, 1, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceEthernetAdptRecEol.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceEthernetAdptRecEol.setDescription('Adapter received end of list. Not supported on HP-UX, Sun Solaris and Digital UNIX. On AIX4, this variable is not supported for devices that are based on CDLI model.')
smSiaSystemDeviceEthernetHostRecPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 3, 2, 1, 48), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceEthernetHostRecPkt.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceEthernetHostRecPkt.setDescription('Packets host actually received from adapter. Not supported on HP-UX, Sun Solaris and Digital UNIX. On AIX4, this variable is not supported for devices that are based on CDLI model.')
smSiaSystemDeviceEthernetAdptRecPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 3, 2, 1, 49), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceEthernetAdptRecPkt.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceEthernetAdptRecPkt.setDescription('Packets to be delivered to host. Not supported on HP-UX and Sun Solaris. On AIX4, this variable is not supported for devices that are based on CDLI model.')
smSiaSystemDeviceEthernetStartRxCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 3, 2, 1, 50), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceEthernetStartRxCmd.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceEthernetStartRxCmd.setDescription('Start receptions commands issued to adapter. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemDeviceEthernetStartRxDmaTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 3, 2, 1, 51), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceEthernetStartRxDmaTimeouts.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceEthernetStartRxDmaTimeouts.setDescription('DMA timeouts. Not supported on HP-UX, Sun Solaris and Digital UNIX. On AIX4, this variable is not supported for devices that are based on CDLI model.')
smSiaSystemDeviceEthernetVPD = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 3, 2, 1, 52), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceEthernetVPD.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceEthernetVPD.setDescription('Vital Product Data from adapter. Not supported on HP-UX, Sun Solaris 2.x and Digital UNIX.')
smSiaSystemDeviceEthernetClear = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 3, 2, 1, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smSiaSystemDeviceEthernetClear.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceEthernetClear.setDescription('Set to clear to clear clearable statistics. Not supported on AIX and Digital UNIX.')
smSiaSystemDeviceX25Installed = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceX25Installed.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceX25Installed.setDescription('The number of devices installed. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemDeviceX25Table = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2), )
if mibBuilder.loadTexts: smSiaSystemDeviceX25Table.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceX25Table.setDescription('Adapter table. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemDeviceX25Entry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1), ).setIndexNames((0, "SYSINFO-MIB", "smSiaSystemDeviceX25Number"))
if mibBuilder.loadTexts: smSiaSystemDeviceX25Entry.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceX25Entry.setDescription('Each entry contains objects for a particular device Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemDeviceX25Number = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceX25Number.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceX25Number.setDescription('smSiaSystemDeviceX25Number Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemDeviceX25Address = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceX25Address.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceX25Address.setDescription('smSiaSystemDeviceX25Address Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemDeviceX25SupportLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceX25SupportLevel.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceX25SupportLevel.setDescription('smSiaSystemDeviceX25SupportLevel. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemDeviceX25SupportedFacilities = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceX25SupportedFacilities.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceX25SupportedFacilities.setDescription('smSiaSystemDeviceX25SupportedFacilities. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemDeviceX25NetworkId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 5), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceX25NetworkId.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceX25NetworkId.setDescription('smSiaSystemDeviceX25NetworkId. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemDeviceX25MaxTxPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceX25MaxTxPacketSize.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceX25MaxTxPacketSize.setDescription('smSiaSystemDeviceX25MaxTxPacketSize. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemDeviceX25MaxRxPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceX25MaxRxPacketSize.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceX25MaxRxPacketSize.setDescription('smSiaSystemDeviceX25MaxRxPacketSize. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemDeviceX25DefaultSvcTxPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceX25DefaultSvcTxPacketSize.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceX25DefaultSvcTxPacketSize.setDescription('smSiaSystemDeviceX25DefaultSvcTxPacketSize. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemDeviceX25DefaultSvcRxPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceX25DefaultSvcRxPacketSize.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceX25DefaultSvcRxPacketSize.setDescription('smSiaSystemDeviceX25DefaultSvcRxPacketSize. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemDeviceX25ReceiveDataTransferOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceX25ReceiveDataTransferOffset.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceX25ReceiveDataTransferOffset.setDescription('smSiaSystemDeviceX25ReceiveDataTransferOffset. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemDeviceX25MemoryWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceX25MemoryWindowSize.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceX25MemoryWindowSize.setDescription('smSiaSystemDeviceX25MemoryWindowSize. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemDeviceX25TxByteMcnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceX25TxByteMcnt.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceX25TxByteMcnt.setDescription('Most significant bits of successfully transmitted byte count. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemDeviceX25TxByteLcnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceX25TxByteLcnt.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceX25TxByteLcnt.setDescription('Least significant bits of successfully transmitted byte count. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemDeviceX25RxByteMcnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceX25RxByteMcnt.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceX25RxByteMcnt.setDescription('Most significant bits of successfully received byte count. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemDeviceX25RxByteLcnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceX25RxByteLcnt.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceX25RxByteLcnt.setDescription('Least significant bits of successfully received byte count. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemDeviceX25TxFrameMcnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceX25TxFrameMcnt.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceX25TxFrameMcnt.setDescription('Most significant bits of successfully transmitted byte count. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemDeviceX25TxFrameLcnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceX25TxFrameLcnt.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceX25TxFrameLcnt.setDescription('Least significant bits of successfully transmitted byte count. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemDeviceX25RxFrameMcnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceX25RxFrameMcnt.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceX25RxFrameMcnt.setDescription('Most significant bits of successfully received byte count. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemDeviceX25RxFrameLcnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceX25RxFrameLcnt.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceX25RxFrameLcnt.setDescription('Least significant bits of successfully received byte count. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemDeviceX25TxErrCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceX25TxErrCnt.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceX25TxErrCnt.setDescription('Frame transmit error count. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemDeviceX25RxErrCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceX25RxErrCnt.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceX25RxErrCnt.setDescription('Frame receive error count. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemDeviceX25NidTblHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceX25NidTblHigh.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceX25NidTblHigh.setDescription('Maximum netids in use. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemDeviceX25TxQueHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceX25TxQueHigh.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceX25TxQueHigh.setDescription('Maximum transmits ever queued for adapter. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemDeviceX25RxQueHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceX25RxQueHigh.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceX25RxQueHigh.setDescription('Maximum received ever queued for any open. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemDeviceX25StaQueHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceX25StaQueHigh.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceX25StaQueHigh.setDescription('Maximum status blocks queued for any open. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemDeviceX25IgnoredFTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceX25IgnoredFTx.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceX25IgnoredFTx.setDescription('smSiaSystemDeviceX25IgnoredFTx. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemDeviceX25RrFTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceX25RrFTx.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceX25RrFTx.setDescription('smSiaSystemDeviceX25RrFTx. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemDeviceX25RnrFTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceX25RnrFTx.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceX25RnrFTx.setDescription('smSiaSystemDeviceX25RnrFTx. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemDeviceX25RejFTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceX25RejFTx.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceX25RejFTx.setDescription('smSiaSystemDeviceX25RejFTx. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemDeviceX25InfoFTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceX25InfoFTx.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceX25InfoFTx.setDescription('smSiaSystemDeviceX25InfoFTx Not supported on HP-UX.')
smSiaSystemDeviceX25SabmFTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceX25SabmFTx.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceX25SabmFTx.setDescription('smSiaSystemDeviceX25SabmFTx. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemDeviceX25SarmDmFTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceX25SarmDmFTx.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceX25SarmDmFTx.setDescription('smSiaSystemDeviceX25SarmDmFTx. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemDeviceX25DiscFTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceX25DiscFTx.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceX25DiscFTx.setDescription('smSiaSystemDeviceX25DiscFTx. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemDeviceX25UaFTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceX25UaFTx.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceX25UaFTx.setDescription('smSiaSystemDeviceX25UaFTx. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemDeviceX25FrmrFTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceX25FrmrFTx.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceX25FrmrFTx.setDescription('smSiaSystemDeviceX25FrmrFTx. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemDeviceX25BadNrFTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceX25BadNrFTx.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceX25BadNrFTx.setDescription('smSiaSystemDeviceX25BadNrFTx. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemDeviceX25UnknownFTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceX25UnknownFTx.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceX25UnknownFTx.setDescription('smSiaSystemDeviceX25UnknownFTx. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemDeviceX25XidFTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceX25XidFTx.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceX25XidFTx.setDescription('smSiaSystemDeviceX25XidFTx. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemDeviceX25BadLengthFTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceX25BadLengthFTx.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceX25BadLengthFTx.setDescription('smSiaSystemDeviceX25BadLengthFTx. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemDeviceX25T1Expirations = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceX25T1Expirations.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceX25T1Expirations.setDescription('smSiaSystemDeviceX25T1Expirations. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemDeviceX25Lvl2Connects = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceX25Lvl2Connects.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceX25Lvl2Connects.setDescription('smSiaSystemDeviceX25Lvl2Connects. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemDeviceX25Lvl2Disconnects = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceX25Lvl2Disconnects.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceX25Lvl2Disconnects.setDescription('smSiaSystemDeviceX25Lvl2Disconnects. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemDeviceX25CarrierLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceX25CarrierLoss.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceX25CarrierLoss.setDescription('smSiaSystemDeviceX25CarrierLoss. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemDeviceX25ConnectTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 44), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceX25ConnectTime.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceX25ConnectTime.setDescription('smSiaSystemDeviceX25ConnectTime. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemDeviceX25T4Expirations = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceX25T4Expirations.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceX25T4Expirations.setDescription('smSiaSystemDeviceX25T4Expirations. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemDeviceX25T4N2Times = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceX25T4N2Times.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceX25T4N2Times.setDescription('smSiaSystemDeviceX25T4N2Times. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemDeviceX25IgnoredFRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceX25IgnoredFRx.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceX25IgnoredFRx.setDescription('smSiaSystemDeviceX25IgnoredFRx. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemDeviceX25RrFRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 48), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceX25RrFRx.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceX25RrFRx.setDescription('smSiaSystemDeviceX25RrFRx. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemDeviceX25RnrFRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 49), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceX25RnrFRx.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceX25RnrFRx.setDescription('smSiaSystemDeviceX25RnrFRx. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemDeviceX25RejFRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 50), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceX25RejFRx.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceX25RejFRx.setDescription('smSiaSystemDeviceX25RejFRx. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemDeviceX25InfoFRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 51), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceX25InfoFRx.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceX25InfoFRx.setDescription('smSiaSystemDeviceX25InfoFRx. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemDeviceX25SabmFRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 52), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceX25SabmFRx.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceX25SabmFRx.setDescription('smSiaSystemDeviceX25SabmFRx. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemDeviceX25SarmDmFRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 53), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceX25SarmDmFRx.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceX25SarmDmFRx.setDescription('smSiaSystemDeviceX25SarmDmFRx. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemDeviceX25DiscFRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 54), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceX25DiscFRx.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceX25DiscFRx.setDescription('smSiaSystemDeviceX25DiscFRx. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemDeviceX25UaFRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 55), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceX25UaFRx.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceX25UaFRx.setDescription('smSiaSystemDeviceX25UaFRx. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemDeviceX25FrmrFRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 56), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceX25FrmrFRx.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceX25FrmrFRx.setDescription('smSiaSystemDeviceX25FrmrFRx. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemDeviceX25BadNrFRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 57), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceX25BadNrFRx.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceX25BadNrFRx.setDescription('smSiaSystemDeviceX25BadNrFRx. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemDeviceX25UnknownFRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 58), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceX25UnknownFRx.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceX25UnknownFRx.setDescription('smSiaSystemDeviceX25UnknownFRx. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemDeviceX25XidFRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 59), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceX25XidFRx.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceX25XidFRx.setDescription('smSiaSystemDeviceX25XidFRx. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemDeviceX25BadLengthFRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 60), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceX25BadLengthFRx.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceX25BadLengthFRx.setDescription('smSiaSystemDeviceX25BadLengthFRx. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemDeviceX25DataPTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 61), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceX25DataPTx.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceX25DataPTx.setDescription('smSiaSystemDeviceX25DataPTx. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemDeviceX25RrPTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 62), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceX25RrPTx.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceX25RrPTx.setDescription('smSiaSystemDeviceX25RrPTx. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemDeviceX25RnrPTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 63), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceX25RnrPTx.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceX25RnrPTx.setDescription('smSiaSystemDeviceX25RnrPTx. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemDeviceX25InterruptPTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 64), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceX25InterruptPTx.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceX25InterruptPTx.setDescription('smSiaSystemDeviceX25InterruptPTx. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemDeviceX25InterruptConfirmPTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 65), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceX25InterruptConfirmPTx.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceX25InterruptConfirmPTx.setDescription('smSiaSystemDeviceX25InterruptConfirmPTx. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemDeviceX25CallRequestPTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 66), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceX25CallRequestPTx.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceX25CallRequestPTx.setDescription('smSiaSystemDeviceX25CallRequestPTx. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemDeviceX25CallAcceptPTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 67), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceX25CallAcceptPTx.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceX25CallAcceptPTx.setDescription('smSiaSystemDeviceX25CallAcceptPTx. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemDeviceX25ClearRequestPTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 68), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceX25ClearRequestPTx.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceX25ClearRequestPTx.setDescription('smSiaSystemDeviceX25ClearRequestPTx. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemDeviceX25ClearConfirmPTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 69), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceX25ClearConfirmPTx.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceX25ClearConfirmPTx.setDescription('smSiaSystemDeviceX25ClearConfirmPTx. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemDeviceX25ResetRequestPTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 70), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceX25ResetRequestPTx.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceX25ResetRequestPTx.setDescription('smSiaSystemDeviceX25ResetRequestPTx. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemDeviceX25ResetConfirmPTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 71), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceX25ResetConfirmPTx.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceX25ResetConfirmPTx.setDescription('smSiaSystemDeviceX25ResetConfirmPTx. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemDeviceX25DiagnosticPTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 72), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceX25DiagnosticPTx.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceX25DiagnosticPTx.setDescription('smSiaSystemDeviceX25DiagnosticPTx. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemDeviceX25RegistrationPTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 73), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceX25RegistrationPTx.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceX25RegistrationPTx.setDescription('smSiaSystemDeviceX25RegistrationPTx. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemDeviceX25RegistrationConfirmPTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 74), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceX25RegistrationConfirmPTx.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceX25RegistrationConfirmPTx.setDescription('smSiaSystemDeviceX25RegistrationConfirmPTx. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemDeviceX25RestartPTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 75), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceX25RestartPTx.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceX25RestartPTx.setDescription('smSiaSystemDeviceX25RestartPTx. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemDeviceX25RestartConfirmPTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 76), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceX25RestartConfirmPTx.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceX25RestartConfirmPTx.setDescription('smSiaSystemDeviceX25RestartConfirmPTx. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemDeviceX25ErrorPTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 77), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceX25ErrorPTx.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceX25ErrorPTx.setDescription('smSiaSystemDeviceX25ErrorPTx. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemDeviceX25T20Expirations = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 78), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceX25T20Expirations.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceX25T20Expirations.setDescription('smSiaSystemDeviceX25T20Expirations. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemDeviceX25T21Expirations = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 79), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceX25T21Expirations.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceX25T21Expirations.setDescription('smSiaSystemDeviceX25T21Expirations. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemDeviceX25T22Expirations = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 80), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceX25T22Expirations.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceX25T22Expirations.setDescription('smSiaSystemDeviceX25T22Expirations. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemDeviceX25T23Expirations = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 81), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceX25T23Expirations.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceX25T23Expirations.setDescription('smSiaSystemDeviceX25T23Expirations. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemDeviceX25VcEstablishments = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 82), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceX25VcEstablishments.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceX25VcEstablishments.setDescription('smSiaSystemDeviceX25VcEstablishments. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemDeviceX25T24Expirations = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 83), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceX25T24Expirations.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceX25T24Expirations.setDescription('smSiaSystemDeviceX25T24Expirations. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemDeviceX25T25Expirations = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 84), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceX25T25Expirations.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceX25T25Expirations.setDescription('smSiaSystemDeviceX25T25Expirations. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemDeviceX25T26Expirations = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 85), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceX25T26Expirations.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceX25T26Expirations.setDescription('smSiaSystemDeviceX25T26Expirations. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemDeviceX25T28Expirations = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 86), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceX25T28Expirations.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceX25T28Expirations.setDescription('smSiaSystemDeviceX25T28Expirations. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemDeviceX25DataPRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 87), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceX25DataPRx.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceX25DataPRx.setDescription('smSiaSystemDeviceX25DataPRx. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemDeviceX25RrPRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 88), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceX25RrPRx.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceX25RrPRx.setDescription('smSiaSystemDeviceX25RrPRx. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemDeviceX25RnrPRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 89), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceX25RnrPRx.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceX25RnrPRx.setDescription('smSiaSystemDeviceX25RnrPRx. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemDeviceX25InterruptPRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 90), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceX25InterruptPRx.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceX25InterruptPRx.setDescription('smSiaSystemDeviceX25InterruptPRx. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemDeviceX25InterruptConfirmPRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 91), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceX25InterruptConfirmPRx.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceX25InterruptConfirmPRx.setDescription('smSiaSystemDeviceX25InterruptConfirmPRx. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemDeviceX25IncomingCallPRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 92), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceX25IncomingCallPRx.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceX25IncomingCallPRx.setDescription('smSiaSystemDeviceX25IncomingCallPRx. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemDeviceX25CallConnectedPRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 93), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceX25CallConnectedPRx.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceX25CallConnectedPRx.setDescription('smSiaSystemDeviceX25CallConnectedPRx. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemDeviceX25ClearIndicationPRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 94), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceX25ClearIndicationPRx.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceX25ClearIndicationPRx.setDescription('smSiaSystemDeviceX25ClearIndicationPRx. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemDeviceX25ClearConfirmPRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 95), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceX25ClearConfirmPRx.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceX25ClearConfirmPRx.setDescription('smSiaSystemDeviceX25ClearConfirmPRx. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemDeviceX25ResetIndicationPRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 96), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceX25ResetIndicationPRx.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceX25ResetIndicationPRx.setDescription('smSiaSystemDeviceX25ResetIndicationPRx. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemDeviceX25ResetConfirmPRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 97), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceX25ResetConfirmPRx.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceX25ResetConfirmPRx.setDescription('smSiaSystemDeviceX25ResetConfirmPRx. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemDeviceX25DiagnosticPRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 98), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceX25DiagnosticPRx.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceX25DiagnosticPRx.setDescription('smSiaSystemDeviceX25DiagnosticPRx. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemDeviceX25RegistrationPRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 99), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceX25RegistrationPRx.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceX25RegistrationPRx.setDescription('smSiaSystemDeviceX25RegistrationPRx. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemDeviceX25RegistrationConfirmPRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 100), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceX25RegistrationConfirmPRx.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceX25RegistrationConfirmPRx.setDescription('smSiaSystemDeviceX25RegistrationConfirmPRx. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemDeviceX25RestartPRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 101), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceX25RestartPRx.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceX25RestartPRx.setDescription('smSiaSystemDeviceX25RestartPRx. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemDeviceX25RestartConfirmPRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 102), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceX25RestartConfirmPRx.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceX25RestartConfirmPRx.setDescription('smSiaSystemDeviceX25RestartConfirmPRx. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemDeviceX25TxUnknownSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 103), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceX25TxUnknownSize.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceX25TxUnknownSize.setDescription('smSiaSystemDeviceX25TxUnknownSize. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemDeviceX25TxReserved1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 104), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceX25TxReserved1.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceX25TxReserved1.setDescription('smSiaSystemDeviceX25TxReserved1. Not supported on HP-UX and Sun Solaris.')
smSiaSystemDeviceX25TxReserved2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 105), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceX25TxReserved2.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceX25TxReserved2.setDescription('smSiaSystemDeviceX25TxReserved2. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemDeviceX25TxReserved3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 106), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceX25TxReserved3.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceX25TxReserved3.setDescription('smSiaSystemDeviceX25TxReserved3. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemDeviceX25Tx0x15 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 107), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceX25Tx0x15.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceX25Tx0x15.setDescription('smSiaSystemDeviceX25Tx0x15. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemDeviceX25Tx16x31 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 108), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceX25Tx16x31.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceX25Tx16x31.setDescription('smSiaSystemDeviceX25Tx16x31. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemDeviceX25Tx32x63 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 109), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceX25Tx32x63.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceX25Tx32x63.setDescription('smSiaSystemDeviceX25Tx32x63. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemDeviceX25Tx64x127 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 110), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceX25Tx64x127.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceX25Tx64x127.setDescription('smSiaSystemDeviceX25Tx64x127. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemDeviceX25Tx128x255 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 111), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceX25Tx128x255.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceX25Tx128x255.setDescription('smSiaSystemDeviceX25Tx128x255. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemDeviceX25Tx256x511 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 112), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceX25Tx256x511.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceX25Tx256x511.setDescription('smSiaSystemDeviceX25Tx256x511. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemDeviceX25Tx512x1023 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 113), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceX25Tx512x1023.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceX25Tx512x1023.setDescription('smSiaSystemDeviceX25Tx512x1023. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemDeviceX25Tx1024x2047 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 114), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceX25Tx1024x2047.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceX25Tx1024x2047.setDescription('smSiaSystemDeviceX25Tx1024x2047. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemDeviceX25Tx2048x4095 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 115), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceX25Tx2048x4095.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceX25Tx2048x4095.setDescription('smSiaSystemDeviceX25Tx2048x4095. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemDeviceX25TxReserved13 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 116), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceX25TxReserved13.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceX25TxReserved13.setDescription('smSiaSystemDeviceX25TxReserved13. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemDeviceX25TxReserved14 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 117), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceX25TxReserved14.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceX25TxReserved14.setDescription('smSiaSystemDeviceX25TxReserved14. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemDeviceX25TxReserved15 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 118), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceX25TxReserved15.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceX25TxReserved15.setDescription('smSiaSystemDeviceX25TxReserved15. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemDeviceX25TxTotalPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 119), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceX25TxTotalPackets.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceX25TxTotalPackets.setDescription('smSiaSystemDeviceX25TxTotalPackets. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemDeviceX25RxUnknownSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 120), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceX25RxUnknownSize.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceX25RxUnknownSize.setDescription('smSiaSystemDeviceX25RxUnknownSize. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemDeviceX25RxReserved1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 121), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceX25RxReserved1.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceX25RxReserved1.setDescription('smSiaSystemDeviceX25RxReserved1. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemDeviceX25RxReserved2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 122), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceX25RxReserved2.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceX25RxReserved2.setDescription('smSiaSystemDeviceX25RxReserved2. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemDeviceX25RxReserved3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 123), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceX25RxReserved3.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceX25RxReserved3.setDescription('smSiaSystemDeviceX25RxReserved3. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemDeviceX25Rx0x15 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 124), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceX25Rx0x15.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceX25Rx0x15.setDescription('smSiaSystemDeviceX25Rx0x15. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemDeviceX25Rx16x31 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 125), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceX25Rx16x31.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceX25Rx16x31.setDescription('smSiaSystemDeviceX25Rx16x31. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemDeviceX25Rx32x63 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 126), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceX25Rx32x63.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceX25Rx32x63.setDescription('smSiaSystemDeviceX25Rx32x63. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemDeviceX25Rx64x127 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 127), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceX25Rx64x127.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceX25Rx64x127.setDescription('smSiaSystemDeviceX25Rx64x127. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemDeviceX25Rx128x255 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 128), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceX25Rx128x255.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceX25Rx128x255.setDescription('smSiaSystemDeviceX25Rx128x255. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemDeviceX25Rx256x511 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 129), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceX25Rx256x511.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceX25Rx256x511.setDescription('smSiaSystemDeviceX25Rx256x511. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemDeviceX25Rx512x1023 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 130), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceX25Rx512x1023.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceX25Rx512x1023.setDescription('smSiaSystemDeviceX25Rx512x1023. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemDeviceX25Rx1024x2047 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 131), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceX25Rx1024x2047.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceX25Rx1024x2047.setDescription('smSiaSystemDeviceX25Rx1024x2047. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemDeviceX25Rx2048x4095 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 132), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceX25Rx2048x4095.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceX25Rx2048x4095.setDescription('smSiaSystemDeviceX25Rx2048x4095. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemDeviceX25RxReserved13 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 133), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceX25RxReserved13.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceX25RxReserved13.setDescription('smSiaSystemDeviceX25RxReserved13. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemDeviceX25RxReserved14 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 134), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceX25RxReserved14.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceX25RxReserved14.setDescription('smSiaSystemDeviceX25RxReserved14. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemDeviceX25RxReserved15 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 135), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceX25RxReserved15.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceX25RxReserved15.setDescription('smSiaSystemDeviceX25RxReserved15. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemDeviceX25RxTotalPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 136), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceX25RxTotalPackets.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceX25RxTotalPackets.setDescription('smSiaSystemDeviceX25RxTotalPackets. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemDeviceX25Clear = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 137), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smSiaSystemDeviceX25Clear.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceX25Clear.setDescription('Set to clear to clear clearable statistics. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemDeviceX25RouteCount = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceX25RouteCount.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceX25RouteCount.setDescription('The number of devices installed. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemDeviceX25RouteTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 4), )
if mibBuilder.loadTexts: smSiaSystemDeviceX25RouteTable.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceX25RouteTable.setDescription('Routing information. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemDeviceX25RouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 4, 1), ).setIndexNames((0, "SYSINFO-MIB", "smSiaSystemDeviceX25RouteNumber"))
if mibBuilder.loadTexts: smSiaSystemDeviceX25RouteEntry.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceX25RouteEntry.setDescription('Each entry contains objects for a particular route. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemDeviceX25RouteNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceX25RouteNumber.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceX25RouteNumber.setDescription('Route Entry number. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemDeviceX25RouteEntryName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceX25RouteEntryName.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceX25RouteEntryName.setDescription('Route name. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemDeviceX25RouteUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 4, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceX25RouteUserName.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceX25RouteUserName.setDescription('User name. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemDeviceX25RoutePort = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 4, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceX25RoutePort.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceX25RoutePort.setDescription('Port. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemDeviceX25RouteCallingAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 4, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceX25RouteCallingAddress.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceX25RouteCallingAddress.setDescription('Calling address. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemDeviceX25RouteCalledSubaddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 4, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceX25RouteCalledSubaddress.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceX25RouteCalledSubaddress.setDescription('Called subaddress. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemDeviceX25RouteCallingAddressExt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 4, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceX25RouteCallingAddressExt.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceX25RouteCallingAddressExt.setDescription('Calling address extension. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemDeviceX25RouteCalledAddressExt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 4, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceX25RouteCalledAddressExt.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceX25RouteCalledAddressExt.setDescription('Called address extension. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemDeviceX25RouteCalledUserData = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 4, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceX25RouteCalledUserData.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceX25RouteCalledUserData.setDescription('Called address extension. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemDeviceX25RoutePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 4, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceX25RoutePriority.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceX25RoutePriority.setDescription('Priority. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemDeviceX25RouteAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 4, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("forward", 1), ("reject", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemDeviceX25RouteAction.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemDeviceX25RouteAction.setDescription('Action taken when no listening application is running. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemFileSystemMounted = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 5, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemFileSystemMounted.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemFileSystemMounted.setDescription('The number of file systems mounted.')
smSiaSystemFileSystemTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 5, 2), )
if mibBuilder.loadTexts: smSiaSystemFileSystemTable.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemFileSystemTable.setDescription('File system table.')
smSiaSystemFileSystemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 5, 2, 1), ).setIndexNames((0, "SYSINFO-MIB", "smSiaSystemFileSystemName"))
if mibBuilder.loadTexts: smSiaSystemFileSystemEntry.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemFileSystemEntry.setDescription('Each entry contains objects for a particular file system.')
smSiaSystemFileSystemName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 5, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemFileSystemName.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemFileSystemName.setDescription('Name of mount point for a file system.')
smSiaSystemFileSystemSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 5, 2, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemFileSystemSize.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemFileSystemSize.setDescription('Total kilobytes in file system.')
smSiaSystemFileSystemFree = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 5, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemFileSystemFree.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemFileSystemFree.setDescription('Free file system space in kilobytes. Set a threshold against this variable to monitor for a filesystem to run out of space. The /var and /tmp directories are good candidates for monitoring, since they are often used by applications and an out-of-space condition can result in errors.')
smSiaSystemFileSystemPercentUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 5, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemFileSystemPercentUsed.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemFileSystemPercentUsed.setDescription('Percent of file system used.')
smSiaSystemFileSystemInodesUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 5, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemFileSystemInodesUsed.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemFileSystemInodesUsed.setDescription('Used inodes in file system. Not supported for remote file systems for HP-UX, Sun Solaris 2.x and Digital UNIX.')
smSiaSystemFileSystemInodesPercentUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 5, 2, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemFileSystemInodesPercentUsed.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemFileSystemInodesPercentUsed.setDescription('Percent inodes used. Not supported for remote file systems for HP-UX, Sun Solaris 2.x and Digital UNIX.')
smSiaSystemFileSystemInodeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 5, 2, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemFileSystemInodeCount.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemFileSystemInodeCount.setDescription('Inode count. Not supported for remote file systems for HP-UX, Sun Solaris 2.x and Digital UNIX.')
smSiaSystemFileSystemFileSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 5, 2, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemFileSystemFileSystem.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemFileSystemFileSystem.setDescription('NFS File system.')
smSiaSystemFileSystemRemote = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 5, 2, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemFileSystemRemote.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemFileSystemRemote.setDescription('Remote node for remotely mounted filesystems.')
smSiaSystemSubSystemsCount = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 6, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemSubSystemsCount.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemSubSystemsCount.setDescription('The number of subsystems in table. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemSubSystemsTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 6, 2), )
if mibBuilder.loadTexts: smSiaSystemSubSystemsTable.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemSubSystemsTable.setDescription('Subsystems table. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemSubSystemsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 6, 2, 1), ).setIndexNames((0, "SYSINFO-MIB", "smSiaSystemSubSystemsName"))
if mibBuilder.loadTexts: smSiaSystemSubSystemsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemSubSystemsEntry.setDescription('Each entry contains objects for a particular file system. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemSubSystemsName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 6, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemSubSystemsName.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemSubSystemsName.setDescription('Name of sub system. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemSubSystemsPID = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 6, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemSubSystemsPID.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemSubSystemsPID.setDescription('PID of subsystem, if active. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemSubSystemsStatusDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 6, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemSubSystemsStatusDescription.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemSubSystemsStatusDescription.setDescription('Process group. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemSubSystemsStatusText = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 6, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemSubSystemsStatusText.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemSubSystemsStatusText.setDescription('Status text. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemSubSystemsStatusCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 6, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemSubSystemsStatusCode.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemSubSystemsStatusCode.setDescription('Integer status code. Indicates whether the subsystem is active or inoperative. A value of 1 indicates the subsystem is active; a value of 11 indicates that it is inoperative. Not supported on HP-UX, Sun Solaris and Digital UNIX.')
smSiaSystemProcessCount = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 7, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemProcessCount.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemProcessCount.setDescription('The number of processes in table.')
smSiaSystemProcessTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 7, 2), )
if mibBuilder.loadTexts: smSiaSystemProcessTable.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemProcessTable.setDescription('Process table.')
smSiaSystemProcessEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 7, 2, 1), ).setIndexNames((0, "SYSINFO-MIB", "smSiaSystemProcessCommand"), (0, "SYSINFO-MIB", "smSiaSystemProcessPID"))
if mibBuilder.loadTexts: smSiaSystemProcessEntry.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemProcessEntry.setDescription('Each entry contains objects for a particular file system.')
smSiaSystemProcessLoginUser = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 7, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemProcessLoginUser.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemProcessLoginUser.setDescription('Name of user to whom process belongs.')
smSiaSystemProcessPID = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 7, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemProcessPID.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemProcessPID.setDescription('Process ID. This can be a useful variable to monitor if you want to make sure a process is running or you want to watch for a process to be started.')
smSiaSystemProcessParentPID = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 7, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemProcessParentPID.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemProcessParentPID.setDescription('Parent Process ID')
smSiaSystemProcessCPUTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 7, 2, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemProcessCPUTime.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemProcessCPUTime.setDescription('Total CPU Time used since startup')
smSiaSystemProcessUserTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 7, 2, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemProcessUserTime.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemProcessUserTime.setDescription('CPU Time used in user mode since startup.')
smSiaSystemProcessSystemTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 7, 2, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemProcessSystemTime.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemProcessSystemTime.setDescription('CPU Time used in system mode since startup.')
smSiaSystemProcessPageFaultsIO = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 7, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemProcessPageFaultsIO.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemProcessPageFaultsIO.setDescription('Number of Page faults requiring I/O.')
smSiaSystemProcessPageFaultsNoIO = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 7, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemProcessPageFaultsNoIO.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemProcessPageFaultsNoIO.setDescription('Number of Page faults not requiring I/O.')
smSiaSystemProcessPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 7, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemProcessPriority.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemProcessPriority.setDescription('Process Priority')
smSiaSystemProcessNice = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 7, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemProcessNice.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemProcessNice.setDescription('Process Nice Value ')
smSiaSystemProcessState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 7, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4, 5, 6, 666))).clone(namedValues=NamedValues(("sleep", 1), ("run", 3), ("iDL", 4), ("zombie", 5), ("stop", 6), ("none", 666)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemProcessState.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemProcessState.setDescription('Current Process state')
smSiaSystemProcessWait = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 7, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 666))).clone(namedValues=NamedValues(("event", 1), ("lock", 2), ("timer", 3), ("cpu", 4), ("pageIn", 5), ("pageOut", 6), ("pLock", 7), ("pageFree", 8), ("memory", 9), ("none", 666)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemProcessWait.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemProcessWait.setDescription('Process wait reason. On Sun Solaris, the process wait reason may be none or event. This variable does not provide additional details on the type of event. Not supported on HP-UX or Digital UNIX.')
smSiaSystemProcessDataResidentSetSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 7, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemProcessDataResidentSetSize.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemProcessDataResidentSetSize.setDescription('Data resident set size in kilobytes. On Digital UNIX, this variable is the resident set size for the entire process. On Sun Solaris, statistics for resident set size for the text, data, and stack segments are not maintained separately. This variable is the total resident set size for all three segments.')
smSiaSystemProcessTextResidentSetSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 7, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemProcessTextResidentSetSize.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemProcessTextResidentSetSize.setDescription('Text resident set size in kilobytes. Not supported on Sun Solaris 2.x or Digital UNIX.')
smSiaSystemProcessImageSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 7, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemProcessImageSize.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemProcessImageSize.setDescription('core image size. On Sun Solaris, this variable is the total of the text, data, and stack segments. On AIX and HP-UX, this variable is the same as smSiaSystemProcessDataVirtualMemorySize.')
smSiaSystemProcessDataVirtualMemorySize = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 7, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemProcessDataVirtualMemorySize.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemProcessDataVirtualMemorySize.setDescription('Data Virtual Memory size. Not supported on Digital UNIX.')
smSiaSystemProcessPercentMemory = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 7, 2, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemProcessPercentMemory.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemProcessPercentMemory.setDescription('Percentage of real memory used. Not supported on HP-UX.')
smSiaSystemProcessCPU = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 7, 2, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemProcessCPU.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemProcessCPU.setDescription('Percentage of CPU used on each process. This variable is not supported on Sun Solaris 2.x.')
smSiaSystemProcessStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 7, 2, 1, 19), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemProcessStartTime.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemProcessStartTime.setDescription('Process starting time.')
smSiaSystemProcessCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 7, 2, 1, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemProcessCommand.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemProcessCommand.setDescription('Process starting command.')
smSiaSystemProcessLoginUID = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 7, 2, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemProcessLoginUID.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemProcessLoginUID.setDescription('Login User ID Not supported on HP-UX.')
smSiaSystemProcessEffectiveUID = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 7, 2, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemProcessEffectiveUID.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemProcessEffectiveUID.setDescription('Effective User ID')
smSiaSystemProcessEffectiveGID = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 7, 2, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemProcessEffectiveGID.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemProcessEffectiveGID.setDescription('Effective Group ID. Not supported on HP-UX.')
smSiaSystemProcessEffectiveGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 7, 2, 1, 24), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemProcessEffectiveGroupName.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemProcessEffectiveGroupName.setDescription('Effective Group Name. Not supported on HP-UX.')
smSiaSystemProcessSUID = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 7, 2, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemProcessSUID.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemProcessSUID.setDescription('Saved User ID')
smSiaSystemProcessPgrp = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 7, 2, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemProcessPgrp.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemProcessPgrp.setDescription('Process group')
smSiaSystemProcessPFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 7, 2, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemProcessPFlags.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemProcessPFlags.setDescription('Process flags - look in /usr/include/sys/proc.h')
smSiaSystemProcessAdspace = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 7, 2, 1, 28), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemProcessAdspace.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemProcessAdspace.setDescription('Process Address space. Not supported on Digital UNIX.')
smSiaSystemProcessTTYp = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 7, 2, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemProcessTTYp.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemProcessTTYp.setDescription('Whether process has a controlling tty.')
smSiaSystemProcessTTYd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 7, 2, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemProcessTTYd.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemProcessTTYd.setDescription('Process Controlling TTY')
smSiaSystemProcessNSwap = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 7, 2, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemProcessNSwap.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemProcessNSwap.setDescription('Number of times process swapped out. Supported on HP-UX 9.0 only on Series 800 machines.')
smSiaSystemProcessInblocks = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 7, 2, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemProcessInblocks.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemProcessInblocks.setDescription('File blocks input Not supported on HP-UX.')
smSiaSystemProcessOutblocks = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 7, 2, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemProcessOutblocks.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemProcessOutblocks.setDescription('File blocks output. Supported on HP-UX 9.0 only on Series 800 machines.')
smSiaSystemProcessMsgsnd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 7, 2, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemProcessMsgsnd.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemProcessMsgsnd.setDescription('Number of IPC Messages sent. Supported on HP-UX 9.0 only on Series 800 machines.')
smSiaSystemProcessMsgrcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 7, 2, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemProcessMsgrcv.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemProcessMsgrcv.setDescription('Number of IPC Messages received. Supported on HP-UX 9.0 only on Series 800 machines.')
smSiaSystemProcessNsignals = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 7, 2, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemProcessNsignals.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemProcessNsignals.setDescription('Number of Signals delivered. Supported on HP-UX 9.0 only on Series 800 machines.')
smSiaSystemProcessNVcsw = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 7, 2, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemProcessNVcsw.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemProcessNVcsw.setDescription('Number of Voluntary context switches. Supported on HP-UX 9.0 only on Series 800 machines.')
smSiaSystemProcessNIvcsw = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 7, 2, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemProcessNIvcsw.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemProcessNIvcsw.setDescription('Number of Involuntary context switches. Supported on HP-UX 9.0 only on Series 800 machines.')
smSiaSystemProcessArguments = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 7, 2, 1, 39), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemProcessArguments.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemProcessArguments.setDescription('Process command syntax in full path')
smSiaSystemProcessSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 7, 2, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 60, 61, 62, 63))).clone(namedValues=NamedValues(("sighup", 1), ("sigint", 2), ("sigquit", 3), ("sigill", 4), ("sigtrap", 5), ("sigabrt", 6), ("sigemt", 7), ("sigfpe", 8), ("sigkill", 9), ("sigbus", 10), ("sigsegv", 11), ("sigsys", 12), ("sigpipe", 13), ("sigalrm", 14), ("sigterm", 15), ("sigurg", 16), ("sigstop", 17), ("sigtstp", 18), ("sigcont", 19), ("sigchld", 20), ("sigttin", 21), ("sigttou", 22), ("sigio", 23), ("sigxcpu", 24), ("sigxfsz", 25), ("sigmsg", 27), ("sigwinch", 28), ("sigpwr", 29), ("sigusr1", 30), ("sigusr2", 31), ("sigprof", 32), ("sigdanger", 33), ("sigvtalrm", 34), ("sigmigrate", 35), ("sigpre", 36), ("sigvirt", 37), ("siggrant", 60), ("sigretract", 61), ("sigsound", 62), ("sigsak", 63)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smSiaSystemProcessSignal.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemProcessSignal.setDescription('Sends a signal to process when set Currently reserved. Not supported on HP-UX.')
smSiaSystemUsersLoggedIn = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 8, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemUsersLoggedIn.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemUsersLoggedIn.setDescription('The number of users logged in')
smSiaSystemUsersTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 8, 2), )
if mibBuilder.loadTexts: smSiaSystemUsersTable.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemUsersTable.setDescription('User table.')
smSiaSystemUsersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 8, 2, 1), ).setIndexNames((0, "SYSINFO-MIB", "smSiaSystemUsersName"), (0, "SYSINFO-MIB", "smSiaSystemUsersPID"))
if mibBuilder.loadTexts: smSiaSystemUsersEntry.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemUsersEntry.setDescription('Each entry contains objects for a particular user.')
smSiaSystemUsersName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 8, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemUsersName.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemUsersName.setDescription('User name')
smSiaSystemUsersLine = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 8, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemUsersLine.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemUsersLine.setDescription('Device name')
smSiaSystemUsersTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 8, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemUsersTime.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemUsersTime.setDescription('Login time')
smSiaSystemUsersPID = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 8, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemUsersPID.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemUsersPID.setDescription('Process ID.')
smSiaSystemUsersRemoteHost = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 8, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemUsersRemoteHost.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemUsersRemoteHost.setDescription('Remote hostname. This is a good variable to watch for security appliations. Monitor for unknown hostnames and send a trap when one is found.')
smSiaSystemMiscellaneousTimeText = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 11, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemMiscellaneousTimeText.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemMiscellaneousTimeText.setDescription('Current System Time')
smSiaSystemMiscellaneousTime = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 11, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemMiscellaneousTime.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemMiscellaneousTime.setDescription('Current system time, seconds since reference time')
smSiaSystemMiscellaneousRandom = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 11, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemMiscellaneousRandom.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemMiscellaneousRandom.setDescription('A random number generated by the random() call')
smSiaSystemMiscellaneousFreeSpace = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 11, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemMiscellaneousFreeSpace.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemMiscellaneousFreeSpace.setDescription('Unallocated space in active volume groups, in kilobytes. Not supported on HP-UX, Sun Solaris 2.4 and Digital UNIX.')
smSiaSystemMiscellaneousPublicKey = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 11, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smSiaSystemMiscellaneousPublicKey.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemMiscellaneousPublicKey.setDescription('Reserved.')
smSiaSystemMiscellaneousLocalSocket = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 11, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemMiscellaneousLocalSocket.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemMiscellaneousLocalSocket.setDescription('Reserved.')
smSiaSystemUtilizationCPU = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 1))
smSiaSystemUtilizationKernel = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 2))
smSiaSystemUtilizationIostat = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 3))
smSiaSystemUtilizationCPUPollingInterval = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemUtilizationCPUPollingInterval.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemUtilizationCPUPollingInterval.setDescription('Polling Interval for CPU data Currently reserved.')
smSiaSystemUtilizationCPUCount = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemUtilizationCPUCount.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemUtilizationCPUCount.setDescription('Number of CPUs in system')
smSiaSystemUtilizationCPUTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 1, 3), )
if mibBuilder.loadTexts: smSiaSystemUtilizationCPUTable.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemUtilizationCPUTable.setDescription('CPU Utilization table.')
smSiaSystemUtilizationCPUEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 1, 3, 1), ).setIndexNames((0, "SYSINFO-MIB", "smSiaSystemUtilizationCPUIntervalName"))
if mibBuilder.loadTexts: smSiaSystemUtilizationCPUEntry.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemUtilizationCPUEntry.setDescription('Each entry contains CPU over a different interval')
smSiaSystemUtilizationCPUIntervalName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 1, 3, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemUtilizationCPUIntervalName.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemUtilizationCPUIntervalName.setDescription('Description of interval')
smSiaSystemUtilizationCPUIntervalStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 1, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemUtilizationCPUIntervalStartTime.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemUtilizationCPUIntervalStartTime.setDescription('Start time of interval')
smSiaSystemUtilizationCPUIntervalLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 1, 3, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemUtilizationCPUIntervalLength.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemUtilizationCPUIntervalLength.setDescription('Length of Interval over which CPU computed')
smSiaSystemUtilizationCPUUser = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 1, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemUtilizationCPUUser.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemUtilizationCPUUser.setDescription('Average Percent CPU in user mode over the interval. Monitor this value to get inforamtion about utilization of CPU in user mode. This information can also be retrieved using the vmstat or iostat command.')
smSiaSystemUtilizationCPUSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 1, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemUtilizationCPUSystem.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemUtilizationCPUSystem.setDescription('Average Percent CPU in system mode over the interval: the count is incremented whenever the current running process executes in the kernel mode. This information can also be retrieved using the vmstat or iostat commands.')
smSiaSystemUtilizationCPUIdle = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 1, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemUtilizationCPUIdle.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemUtilizationCPUIdle.setDescription("Average Percent CPU in idle mode over the interval: the cpu idle count is incremented whenever the 'wait' process is the current running process.")
smSiaSystemUtilizationCPUWait = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 1, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemUtilizationCPUWait.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemUtilizationCPUWait.setDescription('Average Percent CPU in wait mode over the interval. The count is incremented whenever the current running process is waiting for a block i/o request to complete.')
smSiaSystemUtilizationCPUBusy = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 1, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemUtilizationCPUBusy.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemUtilizationCPUBusy.setDescription('Average Percent CPU in user and system mode over the interval. Gives a good indication of of CPU utilization for the whole system. This information can also be retrieved using the vmstat or iostat commands. ')
smSiaSystemUtilizationCPUUserMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 1, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemUtilizationCPUUserMinimum.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemUtilizationCPUUserMinimum.setDescription('Minimum Percent CPU user mode')
smSiaSystemUtilizationCPUSystemMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 1, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemUtilizationCPUSystemMinimum.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemUtilizationCPUSystemMinimum.setDescription('Minimum Percent CPU system mode')
smSiaSystemUtilizationCPUIdleMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 1, 3, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemUtilizationCPUIdleMinimum.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemUtilizationCPUIdleMinimum.setDescription('Minimum Percent CPU idle mode')
smSiaSystemUtilizationCPUWaitMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 1, 3, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemUtilizationCPUWaitMinimum.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemUtilizationCPUWaitMinimum.setDescription('Minimum Percent CPU idle mode')
smSiaSystemUtilizationCPUBusyMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 1, 3, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemUtilizationCPUBusyMinimum.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemUtilizationCPUBusyMinimum.setDescription('Minimum Percent CPU user and system mode ')
smSiaSystemUtilizationCPUUserMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 1, 3, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemUtilizationCPUUserMaximum.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemUtilizationCPUUserMaximum.setDescription('Maximum Percent CPU user mode')
smSiaSystemUtilizationCPUSystemMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 1, 3, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemUtilizationCPUSystemMaximum.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemUtilizationCPUSystemMaximum.setDescription('Maximum Percent CPU system mode')
smSiaSystemUtilizationCPUIdleMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 1, 3, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemUtilizationCPUIdleMaximum.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemUtilizationCPUIdleMaximum.setDescription('Maximum Percent CPU idle mode')
smSiaSystemUtilizationCPUWaitMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 1, 3, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemUtilizationCPUWaitMaximum.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemUtilizationCPUWaitMaximum.setDescription('Maximum Percent CPU idle mode')
smSiaSystemUtilizationCPUBusyMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 1, 3, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemUtilizationCPUBusyMaximum.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemUtilizationCPUBusyMaximum.setDescription('Maximum Percent CPU user and system mode. ')
smSiaSystemUtilizationCPUNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 1, 3, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemUtilizationCPUNumber.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemUtilizationCPUNumber.setDescription('CPU Number this row applies to ')
smSiaSystemUtilizationKernelPollingInterval = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemUtilizationKernelPollingInterval.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemUtilizationKernelPollingInterval.setDescription('Polling Interval for Utilization kernel data. Currently reserved.')
smSiaSystemUtilizationKernelTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 2, 2), )
if mibBuilder.loadTexts: smSiaSystemUtilizationKernelTable.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemUtilizationKernelTable.setDescription('Kernel statistics table.')
smSiaSystemUtilizationKernelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 2, 2, 1), ).setIndexNames((0, "SYSINFO-MIB", "smSiaSystemUtilizationKernelName"))
if mibBuilder.loadTexts: smSiaSystemUtilizationKernelEntry.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemUtilizationKernelEntry.setDescription('Each entry contains Utilization Kernel over a different interval')
smSiaSystemUtilizationKernelName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 2, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemUtilizationKernelName.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemUtilizationKernelName.setDescription('Description of interval')
smSiaSystemUtilizationKernelIntervalStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 2, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemUtilizationKernelIntervalStartTime.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemUtilizationKernelIntervalStartTime.setDescription('Start time of interval- gives the date and time at which the interval started')
smSiaSystemUtilizationKernelIntervalLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 2, 2, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemUtilizationKernelIntervalLength.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemUtilizationKernelIntervalLength.setDescription('Length of Interval over which Utilization Kernel computed')
smSiaSystemUtilizationKernelContextSwitches = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 2, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemUtilizationKernelContextSwitches.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemUtilizationKernelContextSwitches.setDescription('The number of context switches per second observed in the sample interval')
smSiaSystemUtilizationKernelSystemCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 2, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemUtilizationKernelSystemCalls.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemUtilizationKernelSystemCalls.setDescription('The number of system calls per second observed in the sample interval')
smSiaSystemUtilizationKernelSystemReads = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 2, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemUtilizationKernelSystemReads.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemUtilizationKernelSystemReads.setDescription('Total number of system reads')
smSiaSystemUtilizationKernelSystemWrites = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 2, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemUtilizationKernelSystemWrites.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemUtilizationKernelSystemWrites.setDescription('Total number of system writes')
smSiaSystemUtilizationKernelForks = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 2, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemUtilizationKernelForks.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemUtilizationKernelForks.setDescription('Total number of forks system calls')
smSiaSystemUtilizationKernelExecs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 2, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemUtilizationKernelExecs.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemUtilizationKernelExecs.setDescription('Total number of EXEC system calls')
smSiaSystemUtilizationKernelRunQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 2, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemUtilizationKernelRunQueue.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemUtilizationKernelRunQueue.setDescription('Number of jobs per second placed on the run queue during the interval. The processes placed in the run queue are the processes that are ready to run.')
smSiaSystemUtilizationKernelSwapQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 2, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemUtilizationKernelSwapQueue.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemUtilizationKernelSwapQueue.setDescription('Number of jobs per second placed on the swap queue. These are the processes that are inactive because they are waiting to be paged in.')
smSiaSystemUtilizationKernelSemaphores = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 2, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemUtilizationKernelSemaphores.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemUtilizationKernelSemaphores.setDescription('Total number of semaphore operations')
smSiaSystemUtilizationKernelMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 2, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemUtilizationKernelMessages.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemUtilizationKernelMessages.setDescription('Total number of message operations.')
smSiaSystemUtilizationKernelProcessOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 2, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemUtilizationKernelProcessOverflow.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemUtilizationKernelProcessOverflow.setDescription('Total number of process creation failures: this field is incremented by one whenever an attempt is made to create a kernel process and one of the following happens: - the user has forked to the maximum limit the user is allowed or - the configuration limit of processes has been reached.')
smSiaSystemUtilizationKernelBytesRead = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 2, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemUtilizationKernelBytesRead.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemUtilizationKernelBytesRead.setDescription('Total bytes read. This variable is not supported on HP-UX.')
smSiaSystemUtilizationKernelBytesWritten = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 2, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemUtilizationKernelBytesWritten.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemUtilizationKernelBytesWritten.setDescription('Total bytes written. This variable is not supported on HP-UX.')
smSiaSystemUtilizationKernelRawTTYOut = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 2, 2, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemUtilizationKernelRawTTYOut.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemUtilizationKernelRawTTYOut.setDescription('Total raw TTY out count')
smSiaSystemUtilizationKernelContextSwitchesMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 2, 2, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemUtilizationKernelContextSwitchesMinimum.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemUtilizationKernelContextSwitchesMinimum.setDescription('Minimum context switches')
smSiaSystemUtilizationKernelSystemCallsMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 2, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemUtilizationKernelSystemCallsMinimum.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemUtilizationKernelSystemCallsMinimum.setDescription('Minimum system calls')
smSiaSystemUtilizationKernelSystemReadsMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 2, 2, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemUtilizationKernelSystemReadsMinimum.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemUtilizationKernelSystemReadsMinimum.setDescription('Minimum system reads.')
smSiaSystemUtilizationKernelSystemWritesMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 2, 2, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemUtilizationKernelSystemWritesMinimum.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemUtilizationKernelSystemWritesMinimum.setDescription('Minimum system writes.')
smSiaSystemUtilizationKernelForksMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 2, 2, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemUtilizationKernelForksMinimum.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemUtilizationKernelForksMinimum.setDescription('Minimum forks')
smSiaSystemUtilizationKernelExecsMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 2, 2, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemUtilizationKernelExecsMinimum.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemUtilizationKernelExecsMinimum.setDescription('Minimum execs.')
smSiaSystemUtilizationKernelRunQueueMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 2, 2, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemUtilizationKernelRunQueueMinimum.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemUtilizationKernelRunQueueMinimum.setDescription('Minimum run queue length')
smSiaSystemUtilizationKernelSwapQueueMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 2, 2, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemUtilizationKernelSwapQueueMinimum.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemUtilizationKernelSwapQueueMinimum.setDescription('Minimum swap queue length')
smSiaSystemUtilizationKernelSemaphoresMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 2, 2, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemUtilizationKernelSemaphoresMinimum.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemUtilizationKernelSemaphoresMinimum.setDescription('Minimum semaphore operations.')
smSiaSystemUtilizationKernelMessagesMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 2, 2, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemUtilizationKernelMessagesMinimum.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemUtilizationKernelMessagesMinimum.setDescription('Minimum message operations.')
smSiaSystemUtilizationKernelProcessOverflowMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 2, 2, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemUtilizationKernelProcessOverflowMinimum.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemUtilizationKernelProcessOverflowMinimum.setDescription('Minimum process creation failures.')
smSiaSystemUtilizationKernelBytesReadMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 2, 2, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemUtilizationKernelBytesReadMinimum.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemUtilizationKernelBytesReadMinimum.setDescription('Minimum bytes read Not supported on HP-UX.')
smSiaSystemUtilizationKernelBytesWrittenMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 2, 2, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemUtilizationKernelBytesWrittenMinimum.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemUtilizationKernelBytesWrittenMinimum.setDescription('Minimum bytes written Not supported on HP-UX.')
smSiaSystemUtilizationKernelRawTTYOutMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 2, 2, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemUtilizationKernelRawTTYOutMinimum.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemUtilizationKernelRawTTYOutMinimum.setDescription('Minimum raw TTY out count')
smSiaSystemUtilizationKernelContextSwitchesMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 2, 2, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemUtilizationKernelContextSwitchesMaximum.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemUtilizationKernelContextSwitchesMaximum.setDescription('Maximum context switches')
smSiaSystemUtilizationKernelSystemCallsMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 2, 2, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemUtilizationKernelSystemCallsMaximum.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemUtilizationKernelSystemCallsMaximum.setDescription('Maximum system calls')
smSiaSystemUtilizationKernelSystemReadsMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 2, 2, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemUtilizationKernelSystemReadsMaximum.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemUtilizationKernelSystemReadsMaximum.setDescription('Maximum system reads Not supported on HP-UX.')
smSiaSystemUtilizationKernelSystemWritesMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 2, 2, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemUtilizationKernelSystemWritesMaximum.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemUtilizationKernelSystemWritesMaximum.setDescription('Maximum system writes.')
smSiaSystemUtilizationKernelForksMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 2, 2, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemUtilizationKernelForksMaximum.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemUtilizationKernelForksMaximum.setDescription('Maximum forks')
smSiaSystemUtilizationKernelExecsMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 2, 2, 1, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemUtilizationKernelExecsMaximum.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemUtilizationKernelExecsMaximum.setDescription('Maximum execs.')
smSiaSystemUtilizationKernelRunQueueMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 2, 2, 1, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemUtilizationKernelRunQueueMaximum.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemUtilizationKernelRunQueueMaximum.setDescription('Maximum run queue length')
smSiaSystemUtilizationKernelSwapQueueMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 2, 2, 1, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemUtilizationKernelSwapQueueMaximum.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemUtilizationKernelSwapQueueMaximum.setDescription('Maximum swap queue length')
smSiaSystemUtilizationKernelSemaphoresMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 2, 2, 1, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemUtilizationKernelSemaphoresMaximum.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemUtilizationKernelSemaphoresMaximum.setDescription('Maximum semaphore operations.')
smSiaSystemUtilizationKernelMessagesMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 2, 2, 1, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemUtilizationKernelMessagesMaximum.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemUtilizationKernelMessagesMaximum.setDescription('Maximum message operations.')
smSiaSystemUtilizationKernelProcessOverflowMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 2, 2, 1, 42), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemUtilizationKernelProcessOverflowMaximum.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemUtilizationKernelProcessOverflowMaximum.setDescription('Maximum process creation failures.')
smSiaSystemUtilizationKernelBytesReadMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 2, 2, 1, 43), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemUtilizationKernelBytesReadMaximum.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemUtilizationKernelBytesReadMaximum.setDescription('Maximum bytes read Not supported on HP-UX.')
smSiaSystemUtilizationKernelBytesWrittenMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 2, 2, 1, 44), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemUtilizationKernelBytesWrittenMaximum.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemUtilizationKernelBytesWrittenMaximum.setDescription('Maximum bytes written Not supported on HP-UX.')
smSiaSystemUtilizationKernelRawTTYOutMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 2, 2, 1, 45), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemUtilizationKernelRawTTYOutMaximum.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemUtilizationKernelRawTTYOutMaximum.setDescription('Maximum raw TTY out count')
smSiaSystemUtilizationIostatPollingInterval = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemUtilizationIostatPollingInterval.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemUtilizationIostatPollingInterval.setDescription('Polling interval for IO statistics data. Currently reserved.')
smSiaSystemUtilizationIostatTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 3, 2), )
if mibBuilder.loadTexts: smSiaSystemUtilizationIostatTable.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemUtilizationIostatTable.setDescription('Input/Output statistics table. On HP-UX, not supported for some types of disks. On Sun Solaris, removable devices, such as cdroms, must be mounted when sysinfod starts in order to be entered into this table. When the removable device is dismounted and remounted later, it will be treated as a new device and activities will not be added to the table.')
smSiaSystemUtilizationIostatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 3, 2, 1), ).setIndexNames((0, "SYSINFO-MIB", "smSiaSystemUtilizationIostatName"))
if mibBuilder.loadTexts: smSiaSystemUtilizationIostatEntry.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemUtilizationIostatEntry.setDescription('Each entry contains IO statistics over a different interval')
smSiaSystemUtilizationIostatName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 3, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemUtilizationIostatName.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemUtilizationIostatName.setDescription('Description of interval - returns hard disk name and the interval length')
smSiaSystemUtilizationIostatIntervalStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 3, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemUtilizationIostatIntervalStartTime.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemUtilizationIostatIntervalStartTime.setDescription('Start time of interval- gives the date and time at which the interval started')
smSiaSystemUtilizationIostatIntervalLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 3, 2, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemUtilizationIostatIntervalLength.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemUtilizationIostatIntervalLength.setDescription('Length of interval over which IO statistics were computed')
smSiaSystemUtilizationIostatPercentTimeActive = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 3, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemUtilizationIostatPercentTimeActive.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemUtilizationIostatPercentTimeActive.setDescription('Average Percent Time when the hard disk was busy: that is the total time in an interval, when disk i/o took place, divided by the length of interval. The result is multiplied by the programControlPercentMultiplier and then displayed. On HP-UX, not supported for some types of disks.')
smSiaSystemUtilizationIostatKilobytesTransferRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 3, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemUtilizationIostatKilobytesTransferRate.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemUtilizationIostatKilobytesTransferRate.setDescription('Average Transfer Rate: the sum of the kilobyes read and kilobytes written over an interval divided by the length of the interval.')
smSiaSystemUtilizationIostatTransfers = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 3, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemUtilizationIostatTransfers.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemUtilizationIostatTransfers.setDescription("Average number of kilobytes transfered to and from disk. The value is obtained from the kernel memory using field 'dk_xfers' of structure 'dkstat' defined in iostat.h.")
smSiaSystemUtilizationIostatKilobytesRead = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 3, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemUtilizationIostatKilobytesRead.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemUtilizationIostatKilobytesRead.setDescription('Number of Kilobytes read over the interval On HP-UX and Digital UNIX, this variable is the total kilobytes transferred (read OR written) during the time interval.')
smSiaSystemUtilizationIostatKilobytesWritten = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 3, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemUtilizationIostatKilobytesWritten.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemUtilizationIostatKilobytesWritten.setDescription('Number of kilobytes written over the interval On HP-UX and Digital UNIX, this variable always has a value of zero. Statistics for kilobytes written are included in the variable smSiaSystemUtilizationIostatKilobytesRead.')
smSiaSystemUtilizationIostatPercentTimeActiveMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 3, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemUtilizationIostatPercentTimeActiveMinimum.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemUtilizationIostatPercentTimeActiveMinimum.setDescription('Minimum Percent Time Active')
smSiaSystemUtilizationIostatKilobytesTransferRateMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 3, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemUtilizationIostatKilobytesTransferRateMinimum.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemUtilizationIostatKilobytesTransferRateMinimum.setDescription('Minimum Transfer Rate: that is sum of minimum number of kilobytes read and written divided by the length of the interval.')
smSiaSystemUtilizationIostatTransfersMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 3, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemUtilizationIostatTransfersMinimum.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemUtilizationIostatTransfersMinimum.setDescription('Minimum Number of Transfers')
smSiaSystemUtilizationIostatKilobytesReadMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 3, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemUtilizationIostatKilobytesReadMinimum.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemUtilizationIostatKilobytesReadMinimum.setDescription('Minimum kilobytes read')
smSiaSystemUtilizationIostatKilobytesWrittenMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 3, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemUtilizationIostatKilobytesWrittenMinimum.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemUtilizationIostatKilobytesWrittenMinimum.setDescription('Minimum kilobytes written')
smSiaSystemUtilizationIostatPercentTimeActiveMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 3, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemUtilizationIostatPercentTimeActiveMaximum.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemUtilizationIostatPercentTimeActiveMaximum.setDescription('Maximum percentage Time Active.')
smSiaSystemUtilizationIostatKilobytesTransferRateMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 3, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemUtilizationIostatKilobytesTransferRateMaximum.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemUtilizationIostatKilobytesTransferRateMaximum.setDescription('Maximum Transfer Rate')
smSiaSystemUtilizationIostatTransfersMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 3, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemUtilizationIostatTransfersMaximum.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemUtilizationIostatTransfersMaximum.setDescription('Maximum Number of Transfers')
smSiaSystemUtilizationIostatKilobytesReadMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 3, 2, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemUtilizationIostatKilobytesReadMaximum.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemUtilizationIostatKilobytesReadMaximum.setDescription('Maximum Number of Kilobytes read')
smSiaSystemUtilizationIostatKilobytesWrittenMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 3, 2, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaSystemUtilizationIostatKilobytesWrittenMaximum.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaSystemUtilizationIostatKilobytesWrittenMaximum.setDescription('Maximum Number of Kilobytes written')
smSiaCommandTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 12, 4, 1), )
if mibBuilder.loadTexts: smSiaCommandTable.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaCommandTable.setDescription('Command table.')
smSiaCommandEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 12, 4, 1, 1), ).setIndexNames((0, "SYSINFO-MIB", "smSiaCommandName"))
if mibBuilder.loadTexts: smSiaCommandEntry.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaCommandEntry.setDescription('Each entry contains objects for a particular command.')
smSiaCommandState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 1, 2))).clone(namedValues=NamedValues(("enabled", 3), ("disabled", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smSiaCommandState.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaCommandState.setDescription('State of command for execution - disabled (1), invalid (2), or enabled (3).')
smSiaCommandName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 4, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smSiaCommandName.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaCommandName.setDescription('Command name for use as a label and row instance. The selection of a row in the table uses the command name as the instance for the row selection. The command name is appended to the row object ID to uniquely identify the instance of this variable. For example, the instance of smSiaCommandState is smSiaCommandState.smSiaCommandName, where each octet in smSiaCommandName is a value in dot notation for the variable.')
smSiaCommandDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 4, 1, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smSiaCommandDescription.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaCommandDescription.setDescription('Command description for the command to execute.')
smSiaCommandOwnerID = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 4, 1, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smSiaCommandOwnerID.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaCommandOwnerID.setDescription('Owner ID (IP address or hostname) who generated the command entry. This must be initialized by the user.')
smSiaCommandGetStringAndParameters = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 4, 1, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smSiaCommandGetStringAndParameters.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaCommandGetStringAndParameters.setDescription('Command string and parameters for execution on a GET request. The GET request must be issued to the smSiaCommandDisplayStringResult, smSiaCommandIntegerResult, smSiaCommandCounterResult, or smSiaCommandGaugeResult for the command to be executed. Environment variables which are available on execution are: SM6K_HOSTNAME={hostname running subagent} SM6K_DOMAIN_NAME={fully qualified hostname} SM6K_HOST_ADDRESS={ip address} SM6K_INSTANCE_NAME={instance string of row} SM6K_INSTANCE_ID={instance ASCII octet value of row} SM6K_COMMAND_TIME_OUT_VALUE={value from TimeOutValue} SM6K_COMMAND_OWNERID={string from OwnerID} SM6K_COMMAND_RESULT_TYPE=DisplayString||Integer||Counter|| Gauge SM6K_COMMAND_SET_VALUE={value from get request} SM6K_EXECUTION_REASON=Command_Get')
smSiaCommandSetStringAndParameters = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 4, 1, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smSiaCommandSetStringAndParameters.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaCommandSetStringAndParameters.setDescription('Command string and parameters for execution on a SET request. The SET request must be issued to the smSiaCommandDisplayStringResult, smSiaCommandIntegerResult, smSiaCommandCounterResult, or smSiaCommandGaugeResult for the command to be executed. The SM6K_COMMAND_SET_VALUE contains the value from the SET request. If the execution of the command returns a non-zero exit return code then the SET request is rejected and a badValue is returned from the SNMPD agent. Environment variables which are available on command execution are: SM6K_COMMAND_SET_VALUE={value from set request} SM6K_HOSTNAME={hostname running subagent} SM6K_DOMAIN_NAME={fully qualified hostname} SM6K_HOST_ADDRESS={ip address} SM6K_INSTANCE_NAME={instance string of row} SM6K_INSTANCE_ID={instance ASCII octet value of row} SM6K_COMMAND_TIME_OUT_VALUE={value from TimeOutValue} SM6K_COMMAND_OWNERID={string from OwnerID} SM6K_COMMAND_RESULT_TYPE=DisplayString||Integer||Counter|| Gauge SM6K_EXECUTION_REASON=Command_Set')
smSiaCommandTimeOutValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smSiaCommandTimeOutValue.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaCommandTimeOutValue.setDescription('Time out value in seconds for command execution. The default is three seconds. Time outs over twenty seconds cause subagent performance degradation for multiple requests which may be queued.')
smSiaCommandCountToLive = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaCommandCountToLive.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaCommandCountToLive.setDescription('Count to live in seconds before the command to execute is executed again. This value is a count down from the time to live value. This allows multiple GET requests for parsing of the output from the command execution. It also allows a SET operation followed by a GET request so that the GET command is NOT executed on the GET request.')
smSiaCommandTimeToLive = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 4, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smSiaCommandTimeToLive.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaCommandTimeToLive.setDescription('Time to live value in seconds before the GET or SET command is executed based on the last time the command was run. The CountToLive variable is set to this value at command execution.')
smSiaCommandOutputResultIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 4, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("displaystring", 1), ("integer", 2), ("counter", 3), ("gauge", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smSiaCommandOutputResultIndex.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaCommandOutputResultIndex.setDescription('Index to point to command output result type. The results of the command execution are converted to the type set, displaystring, integer, counter, or gauge.')
smSiaCommandOutputRowIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 4, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smSiaCommandOutputRowIndex.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaCommandOutputRowIndex.setDescription('Index for the row to be returned. New line is the delimiter for row. A value of zero returns all rows. This allows the parsing of the output from the command execution by row.')
smSiaCommandOutputColumnIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 4, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smSiaCommandOutputColumnIndex.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaCommandOutputColumnIndex.setDescription('Index for the column to be returned. White space is the delimiter for the column. A value of zero returns all columns. This allows the parsing of the output from the command execution by column.')
smSiaCommandDisplayStringResult = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 4, 1, 1, 13), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smSiaCommandDisplayStringResult.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaCommandDisplayStringResult.setDescription('Command output for ASCII.')
smSiaCommandIntegerResult = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 4, 1, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smSiaCommandIntegerResult.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaCommandIntegerResult.setDescription('Command result for integer. For each get/set request the response is saved as a signed integer. The range is -2147483648 to 2147483647.')
smSiaCommandCounterResult = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 4, 1, 1, 15), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smSiaCommandCounterResult.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaCommandCounterResult.setDescription('Command result for counter. For each get/set request the command response is saved as an unsigned integer. The range is 0 to 4294967295.')
smSiaCommandGaugeResult = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 4, 1, 1, 16), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smSiaCommandGaugeResult.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaCommandGaugeResult.setDescription('Command result for gauge. For each get/set request the command response is saved as an unsigned integer. The range is 0 to 4294967295.')
smSiaCommandExecutionReturnCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 4, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaCommandExecutionReturnCode.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaCommandExecutionReturnCode.setDescription("Return code from the command execution. This value is the exit status from the command execution. NOTE: because of the 'wait' system call, only the lower 8 bits of the exit status is returned, so negative exit codes are lost. Therefore, all return codes are 0 - 255.")
smSiaCommandStandardError = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 4, 1, 1, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaCommandStandardError.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaCommandStandardError.setDescription('Standard error output from the command execution.')
smSiaAdministrationTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 12, 20, 1), )
if mibBuilder.loadTexts: smSiaAdministrationTable.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaAdministrationTable.setDescription('Table of user information.')
smSiaAdministrationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 12, 20, 1, 1), ).setIndexNames((0, "SYSINFO-MIB", "smSiaAdministrationFieldName"))
if mibBuilder.loadTexts: smSiaAdministrationEntry.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaAdministrationEntry.setDescription('Each entry contains objects for a particular administrative community.')
smSiaAdministrationFieldState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 20, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2), ("outDated", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smSiaAdministrationFieldState.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaAdministrationFieldState.setDescription('Indication that administrative information is either valid (1), invalid (2), or outdated (3). Note: Setting state to invalid will delete the row.')
smSiaAdministrationFieldName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 20, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smSiaAdministrationFieldName.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaAdministrationFieldName.setDescription('Name of administrative information. There should be a corporate-wide policy on naming information in order to avoid possible naming conflicts.')
smSiaAdministrationFieldOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 20, 1, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smSiaAdministrationFieldOwner.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaAdministrationFieldOwner.setDescription('Owner of this piece of administrative information.')
smSiaAdministrationFieldDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 20, 1, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smSiaAdministrationFieldDescription.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaAdministrationFieldDescription.setDescription('Description of the administrative information.')
smSiaAdministrationFieldValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 20, 1, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smSiaAdministrationFieldValue.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaAdministrationFieldValue.setDescription('The actual administrative information.')
smSiaFileMonitorTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 12, 21, 1), )
if mibBuilder.loadTexts: smSiaFileMonitorTable.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaFileMonitorTable.setDescription('File Monitor table.')
smSiaFileMonitorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 12, 21, 1, 1), ).setIndexNames((0, "SYSINFO-MIB", "smSiaFileMonitorName"))
if mibBuilder.loadTexts: smSiaFileMonitorEntry.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaFileMonitorEntry.setDescription('Each entry contains objects for a particular file.')
smSiaFileMonitorState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 21, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 1, 2))).clone(namedValues=NamedValues(("enabled", 3), ("enabledFromBegin", 4), ("disabled", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smSiaFileMonitorState.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaFileMonitorState.setDescription('State of file monitor entry - disabled (1), invalid (2), enabled (3), enabledFromBegin (4).')
smSiaFileMonitorName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 21, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smSiaFileMonitorName.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaFileMonitorName.setDescription('File Monitor name for use as a label and row instance. The selection of a row in the table uses the file monitor name as the instance for the row selection. The file monitor name is appended to the row object ID to uniquely identify the instance of this variable. For example, the instance of smSiaFileMonitorState is smSiaFileMonitorState.smSiaFileMonitorName, where each octet in smSiaFileMonitorName is a value in dot notation for the variable.')
smSiaFileMonitorType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 21, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("string", 1), ("dataChange", 2), ("statusChange", 3), ("strDataStatus", 4), ("notExist", 5), ("exist", 6), ("all", 7), ("notString", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smSiaFileMonitorType.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaFileMonitorType.setDescription('Type of file monitor entry - string (1), dataChange (2), statusChange (3), strDataStatus (4), notExist (5), exist (6), all (7), notString(8).')
smSiaFileMonitorTrapState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 21, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("send", 1), ("noSend", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smSiaFileMonitorTrapState.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaFileMonitorTrapState.setDescription('Trap state for file monitor entry - send (1) or noSend (2). Not supported for Systems Monitor Version 1. Type of Traps: generic 6 specific 21 : String found MIB variable binding: v1 = Entry name v2 = Entry description v3 = Full path filename v4 = time string found v5 = file size v6 = previous file size v7 = line count of file v8 = search for string v9 = Found string count v10 = Actual string found v11 = Line number string found v12 = Character position in line string was found v13 = complete line string was found v14 = Character position in file string was found generic 6 specific 22 : File data modified MIB variable binding: v1 = Entry name v2 = Entry description v3 = Full path filename v4 = Time of data modification v5 = Size of file v6 = previous size of file generic 6 specific 23 : File status changed MIB variable binding: v1 = Entry name v2 = Entry description v3 = Full path filename v4 = Time of status change v5 = mode of of file v6 = userID of file v7 = groupID of file v8 = previous mode of of file v9 = previous userID of file v10 = previous groupID of file generic 6 specific 24 : File does not exist MIB variable binding: v1 = Entry name v2 = Entry description v3 = Full path filename generic 6 specific 25 : File exists MIB variable binding: v1 = Entry name v2 = Entry description v3 = Full path filename v4 = Time file creation v5 = mode of of file v6 = userID of file v7 = groupID of file generic 6 specific 26 : String not found MIB variable binding: v1 = Entry name v2 = Entry description v3 = Full path filename v4 = search for string')
smSiaFileMonitorCaseState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 21, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("case", 1), ("ignoreCase", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smSiaFileMonitorCaseState.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaFileMonitorCaseState.setDescription('Case state for string search: case (1) or ignoreCase (2). On Solaris 2.4, search is always case-sensitive.')
smSiaFileMonitorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 21, 1, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smSiaFileMonitorDescription.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaFileMonitorDescription.setDescription('File Monitor description for this file monitor entry.')
smSiaFileMonitorOwnerID = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 21, 1, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smSiaFileMonitorOwnerID.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaFileMonitorOwnerID.setDescription('Owner ID (IP address or hostname) who generated the file monitor entry. This must be initialized by the user.')
smSiaFileMonitorFullPathName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 21, 1, 1, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smSiaFileMonitorFullPathName.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaFileMonitorFullPathName.setDescription('Full path name of file to monitor. If the file already exists then the monitoring starts at the last byte position in the file. If the file is created after the monitoring is enabled then searching for the string is started at the beginning of the file. If no string is specified then a met condition occurs, whenever, the file is modified or its status changes. Status changes are when the user, group, or mode is modified.')
smSiaFileMonitorForString = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 21, 1, 1, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smSiaFileMonitorForString.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaFileMonitorForString.setDescription('String to monitor within a file. The string or pattern can be any limited regular expression (RE) in the style of the ed or egrep command. If the anchor symbols (^ or $) are used in the regular expression then searching is done only when a line is terminated by a new line (\\n) character. On Solaris 2.4, regular expressions are not supported.')
smSiaFileMonitorActivationState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 21, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1, 3))).clone(namedValues=NamedValues(("active", 2), ("notEnabled", 1), ("inactive", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaFileMonitorActivationState.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaFileMonitorActivationState.setDescription('This field indicates whether or not the entry is active in file monitoring. When the file monitor entry is active, it is monitoring the file. When the file monitor entry is inactive, it is not monitoring the file, but will start monitoring when the activation time arrives. The activation state can be inactive only if activation/deactivation days are specified. Otherwise, the activation state is activated when the smSiaFileMonitorState field is set to enabled. If this field is notEnabled, the smSiaFileMonitorState field is not set to enabled.')
smSiaFileMonitorActivationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 21, 1, 1, 11), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smSiaFileMonitorActivationTime.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaFileMonitorActivationTime.setDescription('This field specifies the time to activate the file monitor (ie. change the activation state from inactive to active). The format should be HH:MM where HH represents the hour (integer between 0 and 23) and MM represents the minute (integer between 0 and 59) to activate the file monitor. A value all blanks will be interpreted as 00:00.')
smSiaFileMonitorActivationDayOfWeek = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 21, 1, 1, 12), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smSiaFileMonitorActivationDayOfWeek.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaFileMonitorActivationDayOfWeek.setDescription("This field specifies the days of the week to activate the file monitor at the time specified in the ActivationTime field (ie. change the activation state from inactive to active). The day of the week may be one of three literals: none - Doesn't activate weekdays - Activates file monitor entry on MTWThF all - Activates file monitor entry every day SuMTWThFS Alternatively, the days of the week may be specified as a list of numbers between 0 and 6 (Sunday = 0, Monday = 1, ..., Saturday = 6). The expression '1,3,5' would activate the file monitor entry at the specified time on MWF.")
smSiaFileMonitorDeactivationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 21, 1, 1, 13), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smSiaFileMonitorDeactivationTime.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaFileMonitorDeactivationTime.setDescription('This field specifies the time to deactivate the file monitor (ie. change the activation state from active to inactive). The format should be HH:MM where HH represents the hour (integer between 0 and 23) and MM represents the minute (integer between 0 and 59) to deactivate the file monitor. A value of all blanks will be interpreted as 00:00.')
smSiaFileMonitorDeactivationDayOfWeek = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 21, 1, 1, 14), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smSiaFileMonitorDeactivationDayOfWeek.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaFileMonitorDeactivationDayOfWeek.setDescription("This field specifies the days of the week to deactivate the file monitor at the time specified in the DeactivationTime field (ie. change the activation state from active to inactive). The day of the week may be one of three literals: none - Doesn't deactivate weekdays - Dectivates file monitor entry on MTWThF all - Deactivates file monitor entry every day SuMTWThFS Alternatively, the days of the week may be specified as a list of numbers between 0 and 6 (Sunday = 0, Monday = 1, ..., Saturday = 6). The expression '1,3,5' would deactivate the file monitor entry at the specified time on MWF.")
smSiaFileMonitorPollTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 21, 1, 1, 15), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smSiaFileMonitorPollTime.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaFileMonitorPollTime.setDescription('File Monitor polling time. Polling units are decimal values appended by the unit: d - day, h - hour, m - minute, or s - second. If no unit is appended, the value is minutes. Multiple values/units are allowed (i.e. 1h45m = 1 hour, 45 minutes). The default poll time is 10 seconds.')
smSiaFileMonitorResetToStartOfFile = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 21, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smSiaFileMonitorResetToStartOfFile.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaFileMonitorResetToStartOfFile.setDescription('Setting to true causes file monitoring to reset to the beginning of the file. The value of this variable returns to false once the reset has occurred.')
smSiaFileMonitorCurrentLineCountOfFile = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 21, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaFileMonitorCurrentLineCountOfFile.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaFileMonitorCurrentLineCountOfFile.setDescription('Current monitoring line count of the file. Line count starts at one.')
smSiaFileMonitorFoundStringCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 21, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaFileMonitorFoundStringCount.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaFileMonitorFoundStringCount.setDescription('Count of number of times string found within file.')
smSiaFileMonitorStringFound = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 21, 1, 1, 19), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaFileMonitorStringFound.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaFileMonitorStringFound.setDescription('String found in the file.')
smSiaFileMonitorFoundStringAtLineNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 21, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaFileMonitorFoundStringAtLineNumber.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaFileMonitorFoundStringAtLineNumber.setDescription('Line number within file string was found.')
smSiaFileMonitorBytePositionWithinLine = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 21, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaFileMonitorBytePositionWithinLine.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaFileMonitorBytePositionWithinLine.setDescription('Character position within line number in which string was found. Character position starts at one.')
smSiaFileMonitorCompleteLineStringFound = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 21, 1, 1, 22), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaFileMonitorCompleteLineStringFound.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaFileMonitorCompleteLineStringFound.setDescription('Complete line in which string was found in the file.')
smSiaFileMonitorFoundStringBytePositionWithinFile = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 21, 1, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaFileMonitorFoundStringBytePositionWithinFile.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaFileMonitorFoundStringBytePositionWithinFile.setDescription('Character position within file in which string was found. Character position starts at one.')
smSiaFileMonitorTimeLastFound = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 21, 1, 1, 24), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaFileMonitorTimeLastFound.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaFileMonitorTimeLastFound.setDescription('Time last found. Format is the output of the date command.')
smSiaFileMonitorCommandToExecuteTypeMet = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 21, 1, 1, 25), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smSiaFileMonitorCommandToExecuteTypeMet.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaFileMonitorCommandToExecuteTypeMet.setDescription('Command to execute if the type of the file monitor condition is met. This command is run once for each condtion that is met and each time a string is found in the file. Environment variables which are available on file monitor execution are: SM6K_HOSTNAME = {hostname running subagent} SM6K_DOMAIN_NAME = {fully qualified hostname} SM6K_HOST_ADDRESS = {ip address} SM6K_INSTANCE_NAME = {instance string of row} SM6K_INSTANCE_ID = {instance ASCII octet value of row} SM6K_FILE_MONITOR_REASON = File_Monitor_Found_String, File_Monitor_Data_Change, File_Monitor_Status_Change, File_Monitor_Not_Exist, File_Monitor_Exist SM6K_FILE_MONITOR_TYPE = {enumerated value for type} SM6K_FILE_MONITOR_DESCRIPTION = {string from description field} SM6K_FILE_MONITOR_OWNERID = {string from ownerid filed} SM6K_FILE_MONITOR_FULL_PATH_NAME = {file name for monitor} SM6K_FILE_MONITOR_FOR_STRING = {search string} SM6K_FILE_MONITOR_POLL_TIME = {poll time} SM6K_FILE_MONITOR_CURRENT_LINE_COUNT_OF_FILE = {line count} SM6K_FILE_MONITOR_FOUND_STRING_COUNT = {string count found} SM6K_FILE_MONITOR_FOUND_STRING_AT_LINE_NUMBER = {line number found} SM6K_FILE_MONITOR_BYTE_POSITION_WITHIN_LINE = {position in line} SM6K_FILE_MONITOR_COMPLETE_LINE_STRING_FOUND = {complete line} SM6K_FILE_MONITOR_BYTE_POSITION_WITHIN_FILE = {byte count} SM6K_FILE_MONITOR_STRING_FOUND = {string found} SM6K_FILE_MONITOR_TIME_LAST_FOUND = {time last found} SM6K_FILE_MONITOR_SIZE = {size of file} SM6K_FILE_MONITOR_MODE = {mode of file} SM6K_FILE_MONITOR_USERID = {userID of file} SM6K_FILE_MONITOR_GROUPID = {groupID of file} SM6K_FILE_MONITOR_OLD_SIZE = {previous size of file} SM6K_FILE_MONITOR_OLD_MODE = {previous mode of file} SM6K_FILE_MONITOR_OLD_USERID = {previous userID of file} SM6K_FILE_MONITOR_OLD_GROUPID = {previous groupID of file}')
smSiaFileMonitorCommandToExecuteBeforeMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 21, 1, 1, 26), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smSiaFileMonitorCommandToExecuteBeforeMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaFileMonitorCommandToExecuteBeforeMonitor.setDescription('Command to execute before monitoring a file for any of the types. This MIB variable can be used to generate the file prior to monitoring it. Environment variables which are available on file monitor execution before monitoring are: SM6K_HOSTNAME = {hostname running subagent} SM6K_DOMAIN_NAME = {fully qualified hostname} SM6K_HOST_ADDRESS = {ip address} SM6K_INSTANCE_NAME = {instance string of row} SM6K_INSTANCE_ID = {instance ASCII octet value of row} SM6K_FILE_MONITOR_REASON = File_Monitor_Before_Monitor SM6K_FILE_MONITOR_TYPE = {enumerated value for type} SM6K_FILE_MONITOR_DESCRIPTION = {string from description field} SM6K_FILE_MONITOR_OWNERID = {string from ownerid filed} SM6K_FILE_MONITOR_FULL_PATH_NAME = {file name for monitor} SM6K_FILE_MONITOR_FOR_STRING = {search string} SM6K_FILE_MONITOR_POLL_TIME = {poll time} SM6K_FILE_MONITOR_CURRENT_LINE_COUNT_OF_FILE = {line count} SM6K_FILE_MONITOR_FOUND_STRING_COUNT = {string count found} SM6K_FILE_MONITOR_FOUND_STRING_AT_LINE_NUMBER = {line number found} SM6K_FILE_MONITOR_BYTE_POSITION_WITHIN_LINE = {position in line} SM6K_FILE_MONITOR_COMPLETE_LINE_STRING_FOUND = {complete line} SM6K_FILE_MONITOR_FOUND_STRING_AT_BYTE_POSITION_WITHIN_FILE = {byte count} SM6K_FILE_MONITOR_STRING_FOUND = {string found} SM6K_FILE_MONITOR_TIME_LAST_FOUND = {time last found} SM6K_FILE_MONITOR_SIZE = {size of file} SM6K_FILE_MONITOR_MODE = {mode of file} SM6K_FILE_MONITOR_USERID = {userID of file} SM6K_FILE_MONITOR_GROUPID = {groupID of file} SM6K_FILE_MONITOR_OLD_SIZE = {previous size of file} SM6K_FILE_MONITOR_OLD_MODE = {previous mode of file} SM6K_FILE_MONITOR_OLD_USERID = {previous userID of file} SM6K_FILE_MONITOR_OLD_GROUPID = {previous groupID of file} This MIB variable can be used to generate the file, modifiy the file or translate the file prior to the search')
smSiaFileMonitorMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 21, 1, 1, 27), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smSiaFileMonitorMode.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaFileMonitorMode.setDescription('File mode for the file. The mode can be modified by setting the three octal digits.')
smSiaFileMonitorUserID = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 21, 1, 1, 28), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smSiaFileMonitorUserID.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaFileMonitorUserID.setDescription('User ID that owns the file. The user/owner can be modified by setting a new owner/user.')
smSiaFileMonitorGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 21, 1, 1, 29), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smSiaFileMonitorGroupID.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaFileMonitorGroupID.setDescription('Group ID for the file. The group ID can be modified by setting a new group.')
smSiaFileMonitorSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 21, 1, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaFileMonitorSize.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaFileMonitorSize.setDescription('Size of file in bytes. If the size of the file decreases or the file wraps then string searching resets to the first byte of the file.')
smSiaFileMonitorTimeLastDataModification = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 21, 1, 1, 31), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaFileMonitorTimeLastDataModification.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaFileMonitorTimeLastDataModification.setDescription('Time last data modification to file. This is updated when the file data is modified. Format is the output of the date command.')
smSiaFileMonitorTimeLastFileStatusChange = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 21, 1, 1, 32), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaFileMonitorTimeLastFileStatusChange.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaFileMonitorTimeLastFileStatusChange.setDescription('Time last status change on the file. This is updated when the user, group, or mode is changed. Format is the output of the date command.')
smSiaFileMonitorReturnCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 21, 1, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaFileMonitorReturnCode.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaFileMonitorReturnCode.setDescription('Return code from file monitor operations. The value is zero if successful, non-zero if error.')
smSiaFileMonitorMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 21, 1, 1, 34), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSiaFileMonitorMessages.setStatus('mandatory')
if mibBuilder.loadTexts: smSiaFileMonitorMessages.setDescription('Messages from file monitor operations.')
mibBuilder.exportSymbols("SYSINFO-MIB", smSiaSystemDeviceX25T4Expirations=smSiaSystemDeviceX25T4Expirations, smSiaSystemDeviceX25SabmFRx=smSiaSystemDeviceX25SabmFRx, smSiaSystemDeviceTokenRingMonitorErrorCode=smSiaSystemDeviceTokenRingMonitorErrorCode, smSiaSystemUtilizationCPUUserMaximum=smSiaSystemUtilizationCPUUserMaximum, smSiaSystemUtilizationIostatIntervalStartTime=smSiaSystemUtilizationIostatIntervalStartTime, smSiaSystemDeviceX25VcEstablishments=smSiaSystemDeviceX25VcEstablishments, smSiaProgramData=smSiaProgramData, smSiaSystemDeviceTokenRingLastPollAddr=smSiaSystemDeviceTokenRingLastPollAddr, smSiaSystemUsersTable=smSiaSystemUsersTable, smSiaSystemDeviceX25CallConnectedPRx=smSiaSystemDeviceX25CallConnectedPRx, smSiaSystemUtilizationCPUEntry=smSiaSystemUtilizationCPUEntry, smSiaSystemDeviceEthernetRxQueNoMbuf=smSiaSystemDeviceEthernetRxQueNoMbuf, smSiaSystemDeviceEthernetBroadwrap=smSiaSystemDeviceEthernetBroadwrap, smSiaAdministrationFieldDescription=smSiaAdministrationFieldDescription, smSiaSystemUtilizationKernelBytesReadMinimum=smSiaSystemUtilizationKernelBytesReadMinimum, smSiaSystemUtilizationCPUPollingInterval=smSiaSystemUtilizationCPUPollingInterval, smSiaSystemPagingStatisticsExtendXPTWaitsMaximum=smSiaSystemPagingStatisticsExtendXPTWaitsMaximum, smSiaCommandDisplayStringResult=smSiaCommandDisplayStringResult, smSiaSystemDeviceTokenRingLastBeaconType=smSiaSystemDeviceTokenRingLastBeaconType, smSiaSystemPagingStatisticsPagesPagedOut=smSiaSystemPagingStatisticsPagesPagedOut, smSiaFileMonitorName=smSiaFileMonitorName, smSiaSystemPagingStatisticsExtendXPTWaits=smSiaSystemPagingStatisticsExtendXPTWaits, smSiaSystemDeviceX25TxReserved3=smSiaSystemDeviceX25TxReserved3, smSiaSystemDeviceX25RxReserved1=smSiaSystemDeviceX25RxReserved1, smSiaProgramSetableTestObjects=smSiaProgramSetableTestObjects, smSiaSystemDeviceX25RrFRx=smSiaSystemDeviceX25RrFRx, smSiaProgramControlCurrentFlags=smSiaProgramControlCurrentFlags, smSiaSystemPagingStatisticsPendingIOWaits=smSiaSystemPagingStatisticsPendingIOWaits, smSiaSystemSubSystemsEntry=smSiaSystemSubSystemsEntry, smSiaSystemProcessNsignals=smSiaSystemProcessNsignals, smSiaAdministrationFieldName=smSiaAdministrationFieldName, smSiaSystemProcessUserTime=smSiaSystemProcessUserTime, smSiaSystemDeviceX25UaFRx=smSiaSystemDeviceX25UaFRx, smSiaSystemProcessSignal=smSiaSystemProcessSignal, smSiaSystemPagingStatisticsPagesPagedInMinimum=smSiaSystemPagingStatisticsPagesPagedInMinimum, smSiaSystemDeviceEthernetTxFrameMcnt=smSiaSystemDeviceEthernetTxFrameMcnt, smSiaSystemPagingStatisticsPageInsFromPagingSpaceMaximum=smSiaSystemPagingStatisticsPageInsFromPagingSpaceMaximum, smSiaSystemDeviceEthernetTimoLost=smSiaSystemDeviceEthernetTimoLost, smSiaSystemDeviceX25RouteCalledSubaddress=smSiaSystemDeviceX25RouteCalledSubaddress, smSiaCommandOwnerID=smSiaCommandOwnerID, smSiaSystemInformation=smSiaSystemInformation, smSiaSystemDeviceListEntry=smSiaSystemDeviceListEntry, smSiaSystemDeviceEthernetTxFrameLcnt=smSiaSystemDeviceEthernetTxFrameLcnt, smSiaSystemUtilizationIostatPollingInterval=smSiaSystemUtilizationIostatPollingInterval, smSiaSystemProcessMaxOpenStreams=smSiaSystemProcessMaxOpenStreams, smSiaSystemPagingStatisticsScanClockCyclesMinimum=smSiaSystemPagingStatisticsScanClockCyclesMinimum, smSiaCommandEntry=smSiaCommandEntry, smSiaSystemDeviceX25Installed=smSiaSystemDeviceX25Installed, smSiaCommandGaugeResult=smSiaCommandGaugeResult, smSiaFileMonitorCommandToExecuteTypeMet=smSiaFileMonitorCommandToExecuteTypeMet, smSiaSystemDeviceTokenRingTxIntrCnt=smSiaSystemDeviceTokenRingTxIntrCnt, smSiaSystemDeviceEthernetVPD=smSiaSystemDeviceEthernetVPD, smSiaFileMonitorCurrentLineCountOfFile=smSiaFileMonitorCurrentLineCountOfFile, smSiaSystemDeviceX25RestartConfirmPTx=smSiaSystemDeviceX25RestartConfirmPTx, smSiaProgramControlSetableIpAddress=smSiaProgramControlSetableIpAddress, smSiaProgramLogMaxFileSize=smSiaProgramLogMaxFileSize, smSiaProgramControlReInitializeMonitor=smSiaProgramControlReInitializeMonitor, smSiaSystemDeviceTokenRingPktRejCnt=smSiaSystemDeviceTokenRingPktRejCnt, smSiaSystemDeviceTokenRingNumber=smSiaSystemDeviceTokenRingNumber, smSiaSystemDeviceEthernet=smSiaSystemDeviceEthernet, smSiaSystemPagingSpaceName=smSiaSystemPagingSpaceName, smSiaFileMonitorBytePositionWithinLine=smSiaFileMonitorBytePositionWithinLine, smSiaSystemDeviceEthernetExecCmdErrors=smSiaSystemDeviceEthernetExecCmdErrors, smSiaSystemDeviceX25Lvl2Connects=smSiaSystemDeviceX25Lvl2Connects, smSiaSystemDeviceX25RnrFRx=smSiaSystemDeviceX25RnrFRx, smSiaSystemDeviceX25RouteNumber=smSiaSystemDeviceX25RouteNumber, smSiaProgramLogFileName=smSiaProgramLogFileName, smSiaProgramMessages=smSiaProgramMessages, smSiaSystemDeviceEthernetAdptRecPkt=smSiaSystemDeviceEthernetAdptRecPkt, smSiaSystemDeviceTokenRingTxByteLcnt=smSiaSystemDeviceTokenRingTxByteLcnt, smSiaSystemDeviceX25SarmDmFTx=smSiaSystemDeviceX25SarmDmFTx, smSiaSystemMiscellaneousLocalSocket=smSiaSystemMiscellaneousLocalSocket, smSiaSystemUtilizationKernelBytesRead=smSiaSystemUtilizationKernelBytesRead, smSiaSystemDeviceX25NidTblHigh=smSiaSystemDeviceX25NidTblHigh, smSiaSystemUtilizationKernelProcessOverflowMinimum=smSiaSystemUtilizationKernelProcessOverflowMinimum, smSiaSystemUtilizationIostatName=smSiaSystemUtilizationIostatName, smSiaSystemUtilizationCPUWaitMaximum=smSiaSystemUtilizationCPUWaitMaximum, smSiaSystemDeviceListVPD=smSiaSystemDeviceListVPD, smSiaProgramControlSetableTimeTicks=smSiaProgramControlSetableTimeTicks, smSiaResourceUsageMinflt=smSiaResourceUsageMinflt, smSiaSystemProcessSystemTime=smSiaSystemProcessSystemTime, smSiaFileMonitorForString=smSiaFileMonitorForString, smSiaSystemDeviceX25DataPRx=smSiaSystemDeviceX25DataPRx, smSiaSystemDeviceX25RxReserved13=smSiaSystemDeviceX25RxReserved13, smSiaSystemDeviceTokenRingLastAttenCode=smSiaSystemDeviceTokenRingLastAttenCode, smSiaSystemDeviceX25RegistrationConfirmPTx=smSiaSystemDeviceX25RegistrationConfirmPTx, smSiaSystemUtilizationIostat=smSiaSystemUtilizationIostat, smSiaFileMonitorCompleteLineStringFound=smSiaFileMonitorCompleteLineStringFound, smSiaSystemUtilizationKernelContextSwitchesMaximum=smSiaSystemUtilizationKernelContextSwitchesMaximum, smSiaSystemUtilizationKernelRunQueueMaximum=smSiaSystemUtilizationKernelRunQueueMaximum, smSiaSystemUsersRemoteHost=smSiaSystemUsersRemoteHost, smSiaSystemDeviceX25RegistrationConfirmPRx=smSiaSystemDeviceX25RegistrationConfirmPRx, smSiaSystemDeviceListInstalled=smSiaSystemDeviceListInstalled, smSiaFileMonitor=smSiaFileMonitor, smSiaSystemDeviceX25XidFRx=smSiaSystemDeviceX25XidFRx, smSiaSystemDeviceX25CallRequestPTx=smSiaSystemDeviceX25CallRequestPTx, smSiaSystemDeviceEthernetTxErrCnt=smSiaSystemDeviceEthernetTxErrCnt, smSiaSystemDeviceX25T21Expirations=smSiaSystemDeviceX25T21Expirations, smSiaProgramControlSetableInteger=smSiaProgramControlSetableInteger, smSiaSystemUtilizationKernelMessages=smSiaSystemUtilizationKernelMessages, smSiaSystemProcessTTYp=smSiaSystemProcessTTYp, smSiaSystemDeviceTokenRingAuthorEnv=smSiaSystemDeviceTokenRingAuthorEnv, smSiaSystemPagingStatisticsScanClockCyclesMaximum=smSiaSystemPagingStatisticsScanClockCyclesMaximum, smSiaSystemUtilizationCPUIdleMinimum=smSiaSystemUtilizationCPUIdleMinimum, smSiaSystemDeviceTokenRingTxAccessPriority=smSiaSystemDeviceTokenRingTxAccessPriority, smSiaSystemDeviceX25RouteUserName=smSiaSystemDeviceX25RouteUserName, smSiaSystemDeviceListDiagnostics=smSiaSystemDeviceListDiagnostics, smSiaSystemDeviceX25InterruptPRx=smSiaSystemDeviceX25InterruptPRx, smSiaSystemPhysicalMemorySize=smSiaSystemPhysicalMemorySize, smSiaSystemMaxMbufs=smSiaSystemMaxMbufs, smSiaSystemDeviceTokenRingFrameCorrSave=smSiaSystemDeviceTokenRingFrameCorrSave, smSiaSystemUtilizationKernelBytesWrittenMaximum=smSiaSystemUtilizationKernelBytesWrittenMaximum, smSiaSystemPagingStatisticsPageSteals=smSiaSystemPagingStatisticsPageSteals, smSiaSystemDeviceList=smSiaSystemDeviceList, smSiaSystemDeviceTokenRingClear=smSiaSystemDeviceTokenRingClear, smSiaSystemDeviceEthernetRxQueOverflow=smSiaSystemDeviceEthernetRxQueOverflow, smSiaSystemDeviceX25T4N2Times=smSiaSystemDeviceX25T4N2Times, smSiaSystemDeviceEthernetTxTimeouts=smSiaSystemDeviceEthernetTxTimeouts, smSiaSystemUtilizationKernelPollingInterval=smSiaSystemUtilizationKernelPollingInterval, smSiaSystemPagingSpace=smSiaSystemPagingSpace, smSiaSystemDeviceX25TxFrameMcnt=smSiaSystemDeviceX25TxFrameMcnt, smSiaSystemDeviceX25RouteCallingAddressExt=smSiaSystemDeviceX25RouteCallingAddressExt, smSiaSystemDeviceEthernetDiagOverflow=smSiaSystemDeviceEthernetDiagOverflow, smSiaSystemProcessParentPID=smSiaSystemProcessParentPID, smSiaSystemProcessPercentMemory=smSiaSystemProcessPercentMemory, smSiaSystemDeviceTokenRingTxQueHigh=smSiaSystemDeviceTokenRingTxQueHigh, smSiaSystemUsersTime=smSiaSystemUsersTime, smSiaSystemUtilizationKernelName=smSiaSystemUtilizationKernelName, smSiaSystemDeviceEthernetTxByteMcnt=smSiaSystemDeviceEthernetTxByteMcnt, smSiaSystemMiscellaneousTimeText=smSiaSystemMiscellaneousTimeText, smSiaSystemDeviceX25FrmrFRx=smSiaSystemDeviceX25FrmrFRx, smSiaSystemPagingStatisticsPageStealsMinimum=smSiaSystemPagingStatisticsPageStealsMinimum, smSiaCommand=smSiaCommand, smSiaSystemUtilizationCPUSystemMaximum=smSiaSystemUtilizationCPUSystemMaximum, smSiaSystemDeviceTokenRingVPD=smSiaSystemDeviceTokenRingVPD, smSiaSystemDeviceX25RouteCalledUserData=smSiaSystemDeviceX25RouteCalledUserData, smSiaProgramNumber=smSiaProgramNumber, smSiaSystemUtilizationIostatKilobytesWrittenMaximum=smSiaSystemUtilizationIostatKilobytesWrittenMaximum, smSiaSystemUtilizationKernelSwapQueueMinimum=smSiaSystemUtilizationKernelSwapQueueMinimum, smSiaSystemDeviceX25TxQueHigh=smSiaSystemDeviceX25TxQueHigh, smSiaSystemDeviceX25Rx256x511=smSiaSystemDeviceX25Rx256x511, smSiaFileMonitorUserID=smSiaFileMonitorUserID, smSiaSystemPagingSpaceCount=smSiaSystemPagingSpaceCount, smSiaSystemDeviceEthernetStartRxDmaTimeouts=smSiaSystemDeviceEthernetStartRxDmaTimeouts, smSiaSystemDeviceX25RrPRx=smSiaSystemDeviceX25RrPRx, smSiaSystemUtilizationCPUIntervalName=smSiaSystemUtilizationCPUIntervalName, smSiaSystemUtilizationIostatKilobytesTransferRate=smSiaSystemUtilizationIostatKilobytesTransferRate, smSiaSystemProcessState=smSiaSystemProcessState, smSiaSystemUtilizationCPUSystem=smSiaSystemUtilizationCPUSystem, smSiaSystemUtilizationIostatPercentTimeActiveMaximum=smSiaSystemUtilizationIostatPercentTimeActiveMaximum, smSiaSystemDeviceX25T28Expirations=smSiaSystemDeviceX25T28Expirations, smSiaCommandName=smSiaCommandName, smSiaCommandSetStringAndParameters=smSiaCommandSetStringAndParameters, smSiaSystemSubSystems=smSiaSystemSubSystems, smSiaFileMonitorActivationDayOfWeek=smSiaFileMonitorActivationDayOfWeek, smSiaFileMonitorFoundStringAtLineNumber=smSiaFileMonitorFoundStringAtLineNumber, smSiaSystemDeviceEthernetParErrCnt=smSiaSystemDeviceEthernetParErrCnt, smSiaSystemPagingSpacePhysicalVolume=smSiaSystemPagingSpacePhysicalVolume, smSiaSystemDeviceTokenRingWdtLost=smSiaSystemDeviceTokenRingWdtLost, smSiaProgramControlReserved1=smSiaProgramControlReserved1, smSiaSystemUtilizationCPUIdle=smSiaSystemUtilizationCPUIdle, smSiaSystemDeviceX25CallAcceptPTx=smSiaSystemDeviceX25CallAcceptPTx, smSiaSystemMaxUserProcesses=smSiaSystemMaxUserProcesses, smSiaProgramContact=smSiaProgramContact, smSiaSystemDeviceX25NetworkId=smSiaSystemDeviceX25NetworkId, smSiaSystemDeviceTokenRingSpeed=smSiaSystemDeviceTokenRingSpeed, smSiaSystemDeviceX25RestartConfirmPRx=smSiaSystemDeviceX25RestartConfirmPRx, smSiaResourceUsageIdrss=smSiaResourceUsageIdrss, smSiaSystemUtilizationIostatTable=smSiaSystemUtilizationIostatTable, smSiaSystemDeviceEthernetClear=smSiaSystemDeviceEthernetClear, smSiaSystemDeviceX25RouteCallingAddress=smSiaSystemDeviceX25RouteCallingAddress, smSiaSystemPagingStatisticsDoneIOs=smSiaSystemPagingStatisticsDoneIOs, smSiaSystemUtilizationIostatKilobytesTransferRateMinimum=smSiaSystemUtilizationIostatKilobytesTransferRateMinimum, smSiaSystemUtilizationKernelForksMinimum=smSiaSystemUtilizationKernelForksMinimum, smSiaProgramControlSetableGauge=smSiaProgramControlSetableGauge, smSiaSystemMaxSystemProcesses=smSiaSystemMaxSystemProcesses, smSiaSystemDeviceTokenRingBeaconTxType=smSiaSystemDeviceTokenRingBeaconTxType, smSiaResourceUsageSystemTime=smSiaResourceUsageSystemTime, smSiaSystemKillThresholdToFreePagingSpacePercent=smSiaSystemKillThresholdToFreePagingSpacePercent, smSiaSystemDevice=smSiaSystemDevice, smSiaSystemDeviceX25TxReserved14=smSiaSystemDeviceX25TxReserved14, smSiaSystemProcessArguments=smSiaSystemProcessArguments, smSiaSystemDeviceX25T24Expirations=smSiaSystemDeviceX25T24Expirations, smSiaSystemUtilizationKernelBytesReadMaximum=smSiaSystemUtilizationKernelBytesReadMaximum, smSiaProgramLogFileBehavior=smSiaProgramLogFileBehavior, smSiaSystemDeviceX25T23Expirations=smSiaSystemDeviceX25T23Expirations, smSiaSystemDeviceX25IncomingCallPRx=smSiaSystemDeviceX25IncomingCallPRx, smSiaSystemUtilizationKernelForksMaximum=smSiaSystemUtilizationKernelForksMaximum, smSiaSystemDeviceListTable=smSiaSystemDeviceListTable, smSiaSystemDeviceX25Entry=smSiaSystemDeviceX25Entry, smSiaSystemUtilizationKernelIntervalLength=smSiaSystemUtilizationKernelIntervalLength, smSiaSystemDeviceEthernetTxQueHigh=smSiaSystemDeviceEthernetTxQueHigh, smSiaSystemDeviceEthernetExecOverflow=smSiaSystemDeviceEthernetExecOverflow, smSiaSystemDeviceX25InterruptConfirmPRx=smSiaSystemDeviceX25InterruptConfirmPRx, smSiaSystemDeviceTokenRingOvfloPktCnt=smSiaSystemDeviceTokenRingOvfloPktCnt, smSiaProgramControlLocalConfigurationFile=smSiaProgramControlLocalConfigurationFile, smSiaSystemDeviceX25Tx32x63=smSiaSystemDeviceX25Tx32x63, smSiaSystemDeviceX25DiagnosticPRx=smSiaSystemDeviceX25DiagnosticPRx, smSiaSystemDeviceX25RejFRx=smSiaSystemDeviceX25RejFRx, smSiaSystemDeviceEthernetCarrierLost=smSiaSystemDeviceEthernetCarrierLost, smSiaSystemDeviceEthernetInstalled=smSiaSystemDeviceEthernetInstalled, smSiaCommandCountToLive=smSiaCommandCountToLive, smSiaSystemDeviceEthernetTxByteLcnt=smSiaSystemDeviceEthernetTxByteLcnt, smSiaSystemDeviceX25RrPTx=smSiaSystemDeviceX25RrPTx, smSiaSystemDeviceX25SarmDmFRx=smSiaSystemDeviceX25SarmDmFRx, smSiaSystemUtilizationKernelBytesWritten=smSiaSystemUtilizationKernelBytesWritten, smSiaSystemSubSystemsName=smSiaSystemSubSystemsName, smSiaSystemUtilizationIostatTransfersMinimum=smSiaSystemUtilizationIostatTransfersMinimum, ibm=ibm, smSiaProgramMessagesTimeStamp=smSiaProgramMessagesTimeStamp, smSiaResourceUsageInBlock=smSiaResourceUsageInBlock, smSiaResourceUsageName=smSiaResourceUsageName, smSiaSystemAutomaticBootAfterHalt=smSiaSystemAutomaticBootAfterHalt, smSiaSystemPagingSpacePercentUsed=smSiaSystemPagingSpacePercentUsed, smSiaSystemUtilizationCPUUserMinimum=smSiaSystemUtilizationCPUUserMinimum, smSiaSystemProcessWait=smSiaSystemProcessWait, smSiaSystemUtilizationIostatPercentTimeActiveMinimum=smSiaSystemUtilizationIostatPercentTimeActiveMinimum, smSiaSystemDeviceX25ErrorPTx=smSiaSystemDeviceX25ErrorPTx, smSiaSystemDeviceEthernetMaxCollision=smSiaSystemDeviceEthernetMaxCollision, smSiaSystemDeviceTokenRingNidTblHigh=smSiaSystemDeviceTokenRingNidTblHigh, smSiaSystemUtilizationKernelExecsMinimum=smSiaSystemUtilizationKernelExecsMinimum, smSiaSystemDeviceTokenRingPktTxErrCnt=smSiaSystemDeviceTokenRingPktTxErrCnt, smSiaResourceUsageIxrss=smSiaResourceUsageIxrss, smSiaSystemPagingStatisticsDoneIOsMinimum=smSiaSystemPagingStatisticsDoneIOsMinimum, smSiaSystemDeviceX25TxReserved13=smSiaSystemDeviceX25TxReserved13, smSiaSystemDeviceX25InterruptConfirmPTx=smSiaSystemDeviceX25InterruptConfirmPTx, smSiaSystemDeviceTokenRingRxQueHigh=smSiaSystemDeviceTokenRingRxQueHigh, smSiaFileMonitorFoundStringCount=smSiaFileMonitorFoundStringCount, smSiaSystemDeviceEthernetWdtLost=smSiaSystemDeviceEthernetWdtLost, smSiaSystemDeviceEthernetRxByteMcnt=smSiaSystemDeviceEthernetRxByteMcnt, smSiaSystemDescription=smSiaSystemDescription, smSiaSystemDeviceTokenRingTxByteMcnt=smSiaSystemDeviceTokenRingTxByteMcnt, smSiaSystemDeviceX25ClearIndicationPRx=smSiaSystemDeviceX25ClearIndicationPRx, smSiaSystemDeviceX25Rx2048x4095=smSiaSystemDeviceX25Rx2048x4095, smSiaResourceUsage=smSiaResourceUsage, smSiaSystemDeviceX25RxUnknownSize=smSiaSystemDeviceX25RxUnknownSize, smSiaSystemUtilizationKernelEntry=smSiaSystemUtilizationKernelEntry, smSiaSystemFileSystemEntry=smSiaSystemFileSystemEntry, smSiaSystemFileSystemFree=smSiaSystemFileSystemFree, smSiaSystemMaxPout=smSiaSystemMaxPout, smSiaSystemDeviceListDescription=smSiaSystemDeviceListDescription, smSiaSystemUtilizationKernelSemaphoresMaximum=smSiaSystemUtilizationKernelSemaphoresMaximum, smSiaSystemDeviceTokenRingRxFrameMcnt=smSiaSystemDeviceTokenRingRxFrameMcnt, smSiaSystemPagingStatisticsPagesPagedOutMaximum=smSiaSystemPagingStatisticsPagesPagedOutMaximum, smSiaSystemPagingStatisticsPageScansMinimum=smSiaSystemPagingStatisticsPageScansMinimum, smSiaSystemUsersEntry=smSiaSystemUsersEntry, smSiaSystemDeviceX25Rx512x1023=smSiaSystemDeviceX25Rx512x1023, smSiaSystemPagingStatisticsDoneIOsMaximum=smSiaSystemPagingStatisticsDoneIOsMaximum, smSiaSystemProcessNVcsw=smSiaSystemProcessNVcsw, smSiaSystemUtilizationCPUIntervalStartTime=smSiaSystemUtilizationCPUIntervalStartTime, smSiaSystemUtilizationKernelIntervalStartTime=smSiaSystemUtilizationKernelIntervalStartTime, smSiaFileMonitorDeactivationTime=smSiaFileMonitorDeactivationTime, smSiaSystemUtilizationKernelSemaphores=smSiaSystemUtilizationKernelSemaphores, smSiaCommandExecutionReturnCode=smSiaCommandExecutionReturnCode)
mibBuilder.exportSymbols("SYSINFO-MIB", smSiaSystemPagingStatisticsFreeFrameWaitsMinimum=smSiaSystemPagingStatisticsFreeFrameWaitsMinimum, smSiaSystemProcessPgrp=smSiaSystemProcessPgrp, smSiaSystemProcessStartTime=smSiaSystemProcessStartTime, smSiaSystemUtilizationKernelProcessOverflowMaximum=smSiaSystemUtilizationKernelProcessOverflowMaximum, smSiaSystemUtilizationKernelSystemCallsMaximum=smSiaSystemUtilizationKernelSystemCallsMaximum, smSiaSystemSysName=smSiaSystemSysName, smSiaSystemDeviceX25UaFTx=smSiaSystemDeviceX25UaFTx, smSiaResourceUsageMajflt=smSiaResourceUsageMajflt, smSiaProgramVersion=smSiaProgramVersion, smSiaSystemDeviceX25Rx64x127=smSiaSystemDeviceX25Rx64x127, smSiaProgramControlPercentMultiplier=smSiaProgramControlPercentMultiplier, smSiaSystemProcessImageSize=smSiaSystemProcessImageSize, smSiaSystemDeviceTokenRingIntrLost=smSiaSystemDeviceTokenRingIntrLost, smSiaSystemSubSystemsCount=smSiaSystemSubSystemsCount, smSiaSystemNodeName=smSiaSystemNodeName, smSiaSystemUtilizationKernelProcessOverflow=smSiaSystemUtilizationKernelProcessOverflow, smSiaSystemPagingSpaceVolumeGroup=smSiaSystemPagingSpaceVolumeGroup, smSiaSystemUtilizationCPUNumber=smSiaSystemUtilizationCPUNumber, smSiaSystemDeviceEthernetHostRecEol=smSiaSystemDeviceEthernetHostRecEol, smSiaSystemDeviceX25BadNrFRx=smSiaSystemDeviceX25BadNrFRx, smSiaAdministrationTable=smSiaAdministrationTable, smSiaFileMonitorType=smSiaFileMonitorType, smSiaSystemProcessTable=smSiaSystemProcessTable, smSiaSystemFileSystemFileSystem=smSiaSystemFileSystemFileSystem, smSiaSystemDeviceEthernetRxFrameLcnt=smSiaSystemDeviceEthernetRxFrameLcnt, smSiaSystemProcessPageFaultsIO=smSiaSystemProcessPageFaultsIO, smSiaSystemProcessAdspace=smSiaSystemProcessAdspace, smSiaSystemUtilizationCPUWaitMinimum=smSiaSystemUtilizationCPUWaitMinimum, smSiaSystemDeviceEthernetNoResources=smSiaSystemDeviceEthernetNoResources, smSiaProgramLogMask=smSiaProgramLogMask, smSiaSystemCBlockArraySize=smSiaSystemCBlockArraySize, smSiaSystemProcessPriority=smSiaSystemProcessPriority, smSiaFileMonitorEntry=smSiaFileMonitorEntry, smSiaProgramUpTime=smSiaProgramUpTime, smSiaSystemDeviceX25RnrPTx=smSiaSystemDeviceX25RnrPTx, smSiaSystemDeviceX25TxReserved15=smSiaSystemDeviceX25TxReserved15, smSiaSystemDeviceTokenRingEntry=smSiaSystemDeviceTokenRingEntry, smSiaFileMonitorFoundStringBytePositionWithinFile=smSiaFileMonitorFoundStringBytePositionWithinFile, smSiaCommandDescription=smSiaCommandDescription, smSiaSystemMinPout=smSiaSystemMinPout, smSiaSystemDeviceX25Tx64x127=smSiaSystemDeviceX25Tx64x127, smSiaSystemDeviceX25ConnectTime=smSiaSystemDeviceX25ConnectTime, smSiaSystemProcessMsgsnd=smSiaSystemProcessMsgsnd, smSiaSystemUtilizationIostatKilobytesWrittenMinimum=smSiaSystemUtilizationIostatKilobytesWrittenMinimum, smSiaCommandTable=smSiaCommandTable, smSiaSystemDeviceX25TxByteLcnt=smSiaSystemDeviceX25TxByteLcnt, smSiaSystemUtilizationKernelMessagesMaximum=smSiaSystemUtilizationKernelMessagesMaximum, smSiaSystemUtilizationKernel=smSiaSystemUtilizationKernel, smSiaFileMonitorPollTime=smSiaFileMonitorPollTime, smSiaSystemDeviceEthernetTooLong=smSiaSystemDeviceEthernetTooLong, smSiaSystemMiscellaneousTime=smSiaSystemMiscellaneousTime, smSiaSystemDeviceX25RxFrameLcnt=smSiaSystemDeviceX25RxFrameLcnt, smSiaSystemPagingStatisticsStartIOsMaximum=smSiaSystemPagingStatisticsStartIOsMaximum, smSiaSystemProcessSUID=smSiaSystemProcessSUID, smSiaSystemUtilizationKernelSwapQueue=smSiaSystemUtilizationKernelSwapQueue, smSiaSystemDeviceX25RxReserved2=smSiaSystemDeviceX25RxReserved2, smSiaSystemDeviceX25ResetIndicationPRx=smSiaSystemDeviceX25ResetIndicationPRx, smSiaFileMonitorTimeLastFileStatusChange=smSiaFileMonitorTimeLastFileStatusChange, smSiaSystemDeviceX25Number=smSiaSystemDeviceX25Number, smSiaSystemDeviceEthernetTxIntrCnt=smSiaSystemDeviceEthernetTxIntrCnt, smSiaSystemProcessNice=smSiaSystemProcessNice, smSiaSystemProcessDataResidentSetSize=smSiaSystemProcessDataResidentSetSize, smSiaProgramControlTimeout=smSiaProgramControlTimeout, smSiaSystemPagingStatisticsPageStealsMaximum=smSiaSystemPagingStatisticsPageStealsMaximum, smSiaSystemDeviceX25IgnoredFRx=smSiaSystemDeviceX25IgnoredFRx, smSiaSystemDeviceTokenRingAdapPhysAddr=smSiaSystemDeviceTokenRingAdapPhysAddr, smSiaSystemDeviceX25T20Expirations=smSiaSystemDeviceX25T20Expirations, smSiaSystemUtilizationCPUBusyMinimum=smSiaSystemUtilizationCPUBusyMinimum, smSiaSystemDeviceX25MemoryWindowSize=smSiaSystemDeviceX25MemoryWindowSize, smSiaProgramControlSavedFlags=smSiaProgramControlSavedFlags, smSiaSystemDeviceTokenRingRingStatus=smSiaSystemDeviceTokenRingRingStatus, smSiaProgramMessagesText=smSiaProgramMessagesText, smSiaSystemUtilizationIostatKilobytesWritten=smSiaSystemUtilizationIostatKilobytesWritten, smSiaFileMonitorDescription=smSiaFileMonitorDescription, smSiaSystemUtilization=smSiaSystemUtilization, smSiaCommandStandardError=smSiaCommandStandardError, smSiaAdministrationFieldState=smSiaAdministrationFieldState, smSiaSystemDeviceTokenRingTimoLost=smSiaSystemDeviceTokenRingTimoLost, smSiaSystemProcessLoginUID=smSiaSystemProcessLoginUID, smSiaSystemDeviceX25RnrFTx=smSiaSystemDeviceX25RnrFTx, smSiaSystemDeviceX25SupportedFacilities=smSiaSystemDeviceX25SupportedFacilities, smSiaSystemDeviceTokenRingLastSrcAddr=smSiaSystemDeviceTokenRingLastSrcAddr, smSiaSystemDeviceX25RxFrameMcnt=smSiaSystemDeviceX25RxFrameMcnt, smSiaSystemPagingInformation=smSiaSystemPagingInformation, smSiaSystemPagingStatisticsPageOutsFromPagingSpaceMaximum=smSiaSystemPagingStatisticsPageOutsFromPagingSpaceMaximum, smSiaSystemProcessLoginUser=smSiaSystemProcessLoginUser, smSiaSystemDeviceX25TxFrameLcnt=smSiaSystemDeviceX25TxFrameLcnt, smSiaCommandTimeToLive=smSiaCommandTimeToLive, smSiaSystemUtilizationKernelSystemReads=smSiaSystemUtilizationKernelSystemReads, smSiaCommandOutputRowIndex=smSiaCommandOutputRowIndex, smSiaSystemDeviceX25TxReserved2=smSiaSystemDeviceX25TxReserved2, smSiaSystemPagingSpaceEntry=smSiaSystemPagingSpaceEntry, smSiaSystemProcessEffectiveGroupName=smSiaSystemProcessEffectiveGroupName, smSiaSystemDeviceX25RestartPTx=smSiaSystemDeviceX25RestartPTx, smSiaFileMonitorGroupID=smSiaFileMonitorGroupID, smSiaSystemUtilizationCPUTable=smSiaSystemUtilizationCPUTable, smSiaSystemUtilizationKernelSystemCallsMinimum=smSiaSystemUtilizationKernelSystemCallsMinimum, smSiaSystemDeviceX25RouteCalledAddressExt=smSiaSystemDeviceX25RouteCalledAddressExt, smSiaSystemDeviceX25RestartPRx=smSiaSystemDeviceX25RestartPRx, smSiaSystemDeviceX25Rx32x63=smSiaSystemDeviceX25Rx32x63, smSiaCommandState=smSiaCommandState, smSiaSystemDeviceX25TxUnknownSize=smSiaSystemDeviceX25TxUnknownSize, smSiaSystemUtilizationKernelBytesWrittenMinimum=smSiaSystemUtilizationKernelBytesWrittenMinimum, smSiaSystemBufferPoolMark=smSiaSystemBufferPoolMark, smSiaSystemPagingStatisticsFreeFrameWaits=smSiaSystemPagingStatisticsFreeFrameWaits, smSiaSystemDeviceX25BadNrFTx=smSiaSystemDeviceX25BadNrFTx, smSiaSystemDeviceX25TxTotalPackets=smSiaSystemDeviceX25TxTotalPackets, smSiaSystemPagingSpaceType=smSiaSystemPagingSpaceType, smSiaSystemProcessTTYd=smSiaSystemProcessTTYd, smSiaSystemPagingStatisticsPollingInterval=smSiaSystemPagingStatisticsPollingInterval, smSiaSystemDeviceListAttributes=smSiaSystemDeviceListAttributes, smSiaSystemDeviceX25RegistrationPTx=smSiaSystemDeviceX25RegistrationPTx, smSiaProgramDescription=smSiaProgramDescription, smSiaSystemDeviceX25FrmrFTx=smSiaSystemDeviceX25FrmrFTx, smSiaSystemDeviceX25RoutePort=smSiaSystemDeviceX25RoutePort, smSiaSystemProcessMsgrcv=smSiaSystemProcessMsgrcv, smSiaSystemUtilizationKernelContextSwitches=smSiaSystemUtilizationKernelContextSwitches, smSiaSystemProcessInblocks=smSiaSystemProcessInblocks, smSiaSystemPagingStatisticsFreeFrameWaitsMaximum=smSiaSystemPagingStatisticsFreeFrameWaitsMaximum, smSiaSystemUsersName=smSiaSystemUsersName, smSiaSystemDeviceTokenRingInstalled=smSiaSystemDeviceTokenRingInstalled, smSiaSystemFileSystem=smSiaSystemFileSystem, smSiaSystemProcessCommand=smSiaSystemProcessCommand, smSiaSystemUtilizationIostatKilobytesReadMaximum=smSiaSystemUtilizationIostatKilobytesReadMaximum, smSiaProgramMessagesRowNumber=smSiaProgramMessagesRowNumber, smSiaSystemDeviceEthernetReceiveDataOffset=smSiaSystemDeviceEthernetReceiveDataOffset, smSiaSystemDeviceTokenRingSrcClassAuthor=smSiaSystemDeviceTokenRingSrcClassAuthor, smSiaSystemDeviceX25DefaultSvcTxPacketSize=smSiaSystemDeviceX25DefaultSvcTxPacketSize, smSiaSystemUtilizationCPU=smSiaSystemUtilizationCPU, smSiaProgramControlPollTime=smSiaProgramControlPollTime, smSiaSystemDeviceX25SabmFTx=smSiaSystemDeviceX25SabmFTx, smSiaSystemUtilizationKernelSystemCalls=smSiaSystemUtilizationKernelSystemCalls, smSiaFileMonitorStringFound=smSiaFileMonitorStringFound, smSiaProgramMessagesTable=smSiaProgramMessagesTable, smSiaSystemPagingStatisticsIntervalStartTime=smSiaSystemPagingStatisticsIntervalStartTime, smSiaFileMonitorActivationTime=smSiaFileMonitorActivationTime, smSiaSystemUtilizationKernelSemaphoresMinimum=smSiaSystemUtilizationKernelSemaphoresMinimum, smSiaSystemConfiguration=smSiaSystemConfiguration, smSiaSystemDeviceEthernetEntry=smSiaSystemDeviceEthernetEntry, ibmProd=ibmProd, smSiaSystemDeviceEthernetAdptRecEol=smSiaSystemDeviceEthernetAdptRecEol, smSiaSystemProcessEffectiveGID=smSiaSystemProcessEffectiveGID, smSiaSystemDeviceX25RxTotalPackets=smSiaSystemDeviceX25RxTotalPackets, smSiaSystemUsersLoggedIn=smSiaSystemUsersLoggedIn, smSiaSystemFileSystemRemote=smSiaSystemFileSystemRemote, smSiaSystemPagingStatisticsPageOutsFromPagingSpaceMinimum=smSiaSystemPagingStatisticsPageOutsFromPagingSpaceMinimum, smSiaResourceUsageIsrss=smSiaResourceUsageIsrss, smSiaSystemDeviceX25Table=smSiaSystemDeviceX25Table, smSiaSystemUtilizationIostatTransfers=smSiaSystemUtilizationIostatTransfers, smSiaSystemDeviceTokenRingStaQueOverflow=smSiaSystemDeviceTokenRingStaQueOverflow, smSiaSystemRelease=smSiaSystemRelease, smSiaSystemFileSystemMounted=smSiaSystemFileSystemMounted, smSiaSystemDeviceEthernetRxQueHigh=smSiaSystemDeviceEthernetRxQueHigh, smSiaFileMonitorMode=smSiaFileMonitorMode, smSiaProgramControlRetryCount=smSiaProgramControlRetryCount, smSiaSystemDeviceX25ClearConfirmPTx=smSiaSystemDeviceX25ClearConfirmPTx, smSiaSystemPagingStatisticsPageInsFromPagingSpace=smSiaSystemPagingStatisticsPageInsFromPagingSpace, smSiaSystemDeviceEthernetRxFrameMcnt=smSiaSystemDeviceEthernetRxFrameMcnt, smSiaSystemDeviceTokenRingBeaconStationNAUN=smSiaSystemDeviceTokenRingBeaconStationNAUN, smSiaFileMonitorDeactivationDayOfWeek=smSiaFileMonitorDeactivationDayOfWeek, smSiaSystemDeviceX25DiscFRx=smSiaSystemDeviceX25DiscFRx, smSiaSystemDeviceTokenRingTable=smSiaSystemDeviceTokenRingTable, smSiaSystemUtilizationKernelExecsMaximum=smSiaSystemUtilizationKernelExecsMaximum, smSiaProgramControlFlags=smSiaProgramControlFlags, smSiaSystemDeviceTokenRingSoftErrorTimerVal=smSiaSystemDeviceTokenRingSoftErrorTimerVal, smSiaFileMonitorResetToStartOfFile=smSiaFileMonitorResetToStartOfFile, smSiaSystemDeviceTokenRingRxQueNoMbufExt=smSiaSystemDeviceTokenRingRxQueNoMbufExt, smSiaSystemDeviceEthernetRxQueNoMbufExt=smSiaSystemDeviceEthernetRxQueNoMbufExt, smSiaSystemOpenFileTableSize=smSiaSystemOpenFileTableSize, smSiaSystemUtilizationCPUIdleMaximum=smSiaSystemUtilizationCPUIdleMaximum, smSiaProgramMessagesEntry=smSiaProgramMessagesEntry, smSiaSystemMiscellaneousPublicKey=smSiaSystemMiscellaneousPublicKey, smSiaSystemDeviceX25SupportLevel=smSiaSystemDeviceX25SupportLevel, smSiaProgramName=smSiaProgramName, smSiaFileMonitorOwnerID=smSiaFileMonitorOwnerID, smSiaSystemDeviceX25Address=smSiaSystemDeviceX25Address, smSiaSystemPagingStatisticsStartIOs=smSiaSystemPagingStatisticsStartIOs, smSiaAdministrationFieldOwner=smSiaAdministrationFieldOwner, smSiaSystemMachine=smSiaSystemMachine, smSiaSystemDeviceEthernetOverrun=smSiaSystemDeviceEthernetOverrun, smSiaSystemProcessCPUTime=smSiaSystemProcessCPUTime, smSiaSystemDeviceX25Tx256x511=smSiaSystemDeviceX25Tx256x511, smSiaSystemUtilizationIostatKilobytesRead=smSiaSystemUtilizationIostatKilobytesRead, smSiaSystemDeviceX25RxReserved15=smSiaSystemDeviceX25RxReserved15, smSiaFileMonitorTable=smSiaFileMonitorTable, smSiaSystemDeviceEthernetRxErrCnt=smSiaSystemDeviceEthernetRxErrCnt, smSiaSystemLeastPriv=smSiaSystemLeastPriv, smSiaSystemDeviceX25RouteCount=smSiaSystemDeviceX25RouteCount, smSiaSystemDeviceX25RxReserved14=smSiaSystemDeviceX25RxReserved14, smSiaSystemDeviceX25Tx2048x4095=smSiaSystemDeviceX25Tx2048x4095, smSiaSystemDeviceX25Tx128x255=smSiaSystemDeviceX25Tx128x255, smSiaSystemDeviceEthernetCTSLost=smSiaSystemDeviceEthernetCTSLost, smSiaSystemSubSystemsStatusText=smSiaSystemSubSystemsStatusText, smSiaSystemUtilizationCPUWait=smSiaSystemUtilizationCPUWait, smSiaSystemUtilizationCPUBusyMaximum=smSiaSystemUtilizationCPUBusyMaximum, smSiaSystemDeviceX25RouteEntry=smSiaSystemDeviceX25RouteEntry, smSiaSystemSubSystemsStatusCode=smSiaSystemSubSystemsStatusCode, smSiaSystemProcessDataVirtualMemorySize=smSiaSystemProcessDataVirtualMemorySize, smSiaResourceUsageEntry=smSiaResourceUsageEntry, smSiaSystemPagingStatisticsPendingIOWaitsMinimum=smSiaSystemPagingStatisticsPendingIOWaitsMinimum, smSiaResourceUsageVcsw=smSiaResourceUsageVcsw, smSiaProgramControlSaveConfiguration=smSiaProgramControlSaveConfiguration, smSiaSystemDeviceX25=smSiaSystemDeviceX25, smSiaSystemUsersPID=smSiaSystemUsersPID, smSiaSystemDeviceEthernetStartRxCmd=smSiaSystemDeviceEthernetStartRxCmd, smSiaProgramMessagesTime=smSiaProgramMessagesTime, smSiaSystemFileSystemSize=smSiaSystemFileSystemSize, smSiaSystemPagingStatisticsPageOutsFromPagingSpace=smSiaSystemPagingStatisticsPageOutsFromPagingSpace, smSiaSystemDeviceX25T1Expirations=smSiaSystemDeviceX25T1Expirations, smSiaFileMonitorState=smSiaFileMonitorState, smSiaSystemDeviceTokenRingRxErrCnt=smSiaSystemDeviceTokenRingRxErrCnt, smSiaSystemDeviceTokenRingLastMajorVector=smSiaSystemDeviceTokenRingLastMajorVector, smSiaSystemPagingStatisticsPageInsFromPagingSpaceMinimum=smSiaSystemPagingStatisticsPageInsFromPagingSpaceMinimum, smSiaSystemDeviceX25RegistrationPRx=smSiaSystemDeviceX25RegistrationPRx, smSiaSystemUtilizationKernelRunQueue=smSiaSystemUtilizationKernelRunQueue, smSiaSystemDeviceListName=smSiaSystemDeviceListName, smSiaResourceUsageNSignals=smSiaResourceUsageNSignals, smProgramInformation=smProgramInformation, smSiaSystemPagingStatisticsExtendXPTWaitsMinimum=smSiaSystemPagingStatisticsExtendXPTWaitsMinimum, smSiaSystemPagingStatisticsScanClockCycles=smSiaSystemPagingStatisticsScanClockCycles, smSiaSystemDeviceEthernetStaQueOverflow=smSiaSystemDeviceEthernetStaQueOverflow, smSiaFileMonitorTimeLastFound=smSiaFileMonitorTimeLastFound, smSiaSystemDeviceX25RxByteLcnt=smSiaSystemDeviceX25RxByteLcnt, systemsMonitor6000=systemsMonitor6000, smSiaSystemDeviceEthernetNumber=smSiaSystemDeviceEthernetNumber, smSiaSystemDeviceX25MaxRxPacketSize=smSiaSystemDeviceX25MaxRxPacketSize, smSiaResourceUsageMaxrss=smSiaResourceUsageMaxrss, smSiaSystemDeviceX25RxReserved3=smSiaSystemDeviceX25RxReserved3, smSiaSystemDeviceX25T25Expirations=smSiaSystemDeviceX25T25Expirations, smSiaSystemUtilizationIostatEntry=smSiaSystemUtilizationIostatEntry, smSiaFileMonitorFullPathName=smSiaFileMonitorFullPathName, smSiaSystemDeviceListLocation=smSiaSystemDeviceListLocation, smSiaSystemDeviceTokenRingRxByteMcnt=smSiaSystemDeviceTokenRingRxByteMcnt, smSiaSystemPagingStatisticsName=smSiaSystemPagingStatisticsName, smSiaAdministrationEntry=smSiaAdministrationEntry, smSiaSystemPagingStatisticsEntry=smSiaSystemPagingStatisticsEntry, smSiaSystemFileSystemName=smSiaSystemFileSystemName, smSiaProgramLog=smSiaProgramLog, smSiaSystemUtilizationKernelRawTTYOut=smSiaSystemUtilizationKernelRawTTYOut, smSiaSystemDeviceEthernetRxIntrCnt=smSiaSystemDeviceEthernetRxIntrCnt, smSiaSystemUtilizationIostatIntervalLength=smSiaSystemUtilizationIostatIntervalLength, smSiaSystemPagingStatisticsPageReclaimsMinimum=smSiaSystemPagingStatisticsPageReclaimsMinimum, smSiaSystemDeviceX25TxByteMcnt=smSiaSystemDeviceX25TxByteMcnt, smSiaSystemDeviceEthernetTooShort=smSiaSystemDeviceEthernetTooShort, smSiaSystemDeviceTokenRingFrontEndTimerVal=smSiaSystemDeviceTokenRingFrontEndTimerVal, smSiaSystemDeviceTokenRingPktAccCnt=smSiaSystemDeviceTokenRingPktAccCnt, smSiaSystemDeviceX25ReceiveDataTransferOffset=smSiaSystemDeviceX25ReceiveDataTransferOffset, smSiaSystemDeviceX25Clear=smSiaSystemDeviceX25Clear, smSiaSystemDeviceX25DiagnosticPTx=smSiaSystemDeviceX25DiagnosticPTx, smSiaSystemDeviceEthernetAlignErr=smSiaSystemDeviceEthernetAlignErr, smSiaSystemSubSystemsStatusDescription=smSiaSystemSubSystemsStatusDescription, smSiaSystemPagingStatisticsPagesPagedOutMinimum=smSiaSystemPagingStatisticsPagesPagedOutMinimum, smSiaSystemPagingStatisticsTable=smSiaSystemPagingStatisticsTable, smSiaSystemDeviceTokenRingHardwareAddress=smSiaSystemDeviceTokenRingHardwareAddress)
mibBuilder.exportSymbols("SYSINFO-MIB", smSiaSystemDeviceEthernetIntrLost=smSiaSystemDeviceEthernetIntrLost, smSiaSystemDeviceEthernetCRCErr=smSiaSystemDeviceEthernetCRCErr, smSiaSystemDeviceX25RrFTx=smSiaSystemDeviceX25RrFTx, smSiaSystemDeviceX25Tx16x31=smSiaSystemDeviceX25Tx16x31, smSiaSystemUsersLine=smSiaSystemUsersLine, smSiaSystemDeviceX25UnknownFTx=smSiaSystemDeviceX25UnknownFTx, smSiaSystemDeviceEthernetStaQueHigh=smSiaSystemDeviceEthernetStaQueHigh, smSiaAdministrationFieldValue=smSiaAdministrationFieldValue, smSiaSystemPagingStatisticsStartIOsMinimum=smSiaSystemPagingStatisticsStartIOsMinimum, smSiaSystemUtilizationKernelRawTTYOutMinimum=smSiaSystemUtilizationKernelRawTTYOutMinimum, smSiaSystemDeviceTokenRingReceiveDataOffset=smSiaSystemDeviceTokenRingReceiveDataOffset, smSiaSystemDeviceEthernetPktDiscard=smSiaSystemDeviceEthernetPktDiscard, smSiaSystemUtilizationCPUIntervalLength=smSiaSystemUtilizationCPUIntervalLength, smSiaSystemPagingSpaceAuto=smSiaSystemPagingSpaceAuto, smSiaSystemDeviceX25MaxTxPacketSize=smSiaSystemDeviceX25MaxTxPacketSize, smSiaSystemUtilizationKernelRunQueueMinimum=smSiaSystemUtilizationKernelRunQueueMinimum, smSiaSystemDeviceX25RouteTable=smSiaSystemDeviceX25RouteTable, smSiaSystemUtilizationKernelSystemReadsMaximum=smSiaSystemUtilizationKernelSystemReadsMaximum, smSiaSystemUtilizationKernelSystemWritesMinimum=smSiaSystemUtilizationKernelSystemWritesMinimum, smSiaSystemFileSystemInodesUsed=smSiaSystemFileSystemInodesUsed, smSiaProgramLogFileSize=smSiaProgramLogFileSize, smSiaSystemPagingStatisticsPendingIOWaitsMaximum=smSiaSystemPagingStatisticsPendingIOWaitsMaximum, smSiaSystemUtilizationKernelSystemReadsMinimum=smSiaSystemUtilizationKernelSystemReadsMinimum, smSiaSystemDeviceTokenRingTxErrCnt=smSiaSystemDeviceTokenRingTxErrCnt, smSiaSystemDeviceX25InfoFRx=smSiaSystemDeviceX25InfoFRx, smSiaFileMonitorCaseState=smSiaFileMonitorCaseState, smSiaSystemPageSize=smSiaSystemPageSize, smSiaSystemUtilizationKernelTable=smSiaSystemUtilizationKernelTable, smSiaCommandIntegerResult=smSiaCommandIntegerResult, smSiaSystemDeviceX25RoutePriority=smSiaSystemDeviceX25RoutePriority, smSiaSystemDeviceX25DiscFTx=smSiaSystemDeviceX25DiscFTx, smSiaResourceUsageOutBlock=smSiaResourceUsageOutBlock, smSiaSystemPagingStatisticsPageFaultsMaximum=smSiaSystemPagingStatisticsPageFaultsMaximum, smSiaSystemDeviceTokenRingRxIntrCnt=smSiaSystemDeviceTokenRingRxIntrCnt, smSiaSystemDeviceEthernetNidTblHigh=smSiaSystemDeviceEthernetNidTblHigh, smSiaSystemProcessOutblocks=smSiaSystemProcessOutblocks, smSiaSystemPagingStatisticsPageReclaimsMaximum=smSiaSystemPagingStatisticsPageReclaimsMaximum, smSiaSystemMiscellaneousFreeSpace=smSiaSystemMiscellaneousFreeSpace, smSiaSystemPagingSpaceTable=smSiaSystemPagingSpaceTable, smSiaSystemFreePagingSpaceUntilKill=smSiaSystemFreePagingSpaceUntilKill, smSiaFileMonitorTrapState=smSiaFileMonitorTrapState, smSiaSystemDeviceX25Rx0x15=smSiaSystemDeviceX25Rx0x15, smSiaSystemFreePagingSpace=smSiaSystemFreePagingSpace, smSiaSystemFileSystemInodesPercentUsed=smSiaSystemFileSystemInodesPercentUsed, smSiaSystemDeviceX25Rx128x255=smSiaSystemDeviceX25Rx128x255, smSiaSystemUtilizationKernelForks=smSiaSystemUtilizationKernelForks, smSiaSystemUtilizationIostatTransfersMaximum=smSiaSystemUtilizationIostatTransfersMaximum, smSiaProgramControlReinitFlags=smSiaProgramControlReinitFlags, smSiaSystemDeviceEthernetCurrentAddress=smSiaSystemDeviceEthernetCurrentAddress, smSiaSystemDeviceTokenRingTxFrameLcnt=smSiaSystemDeviceTokenRingTxFrameLcnt, smSiaSystemDeviceEthernetHostRecPkt=smSiaSystemDeviceEthernetHostRecPkt, smSiaSystemUtilizationCPUBusy=smSiaSystemUtilizationCPUBusy, smSiaSystemProcessNIvcsw=smSiaSystemProcessNIvcsw, smSiaSystemDeviceX25InterruptPTx=smSiaSystemDeviceX25InterruptPTx, smSiaSystemPagingStatisticsPagesPagedIn=smSiaSystemPagingStatisticsPagesPagedIn, smSiaSystemPagingStatisticsPageFaultsMinimum=smSiaSystemPagingStatisticsPageFaultsMinimum, smSiaFileMonitorCommandToExecuteBeforeMonitor=smSiaFileMonitorCommandToExecuteBeforeMonitor, smSiaSystemProcessEffectiveUID=smSiaSystemProcessEffectiveUID, smSiaSystemUsers=smSiaSystemUsers, smSiaSystemVersion=smSiaSystemVersion, smSiaSystemDiskIOHistory=smSiaSystemDiskIOHistory, smSiaSystemDeviceTokenRingCurrentAddress=smSiaSystemDeviceTokenRingCurrentAddress, smSiaSystemUtilizationIostatKilobytesReadMinimum=smSiaSystemUtilizationIostatKilobytesReadMinimum, smSiaSystemUtilizationCPUCount=smSiaSystemUtilizationCPUCount, smSiaSystemDeviceX25Lvl2Disconnects=smSiaSystemDeviceX25Lvl2Disconnects, smSiaSystemProcessMaxOpenFiles=smSiaSystemProcessMaxOpenFiles, smSiaFileMonitorActivationState=smSiaFileMonitorActivationState, smSiaSystemDeviceX25InfoFTx=smSiaSystemDeviceX25InfoFTx, smSiaSystemUtilizationKernelRawTTYOutMaximum=smSiaSystemUtilizationKernelRawTTYOutMaximum, smSiaSystemDeviceX25Tx1024x2047=smSiaSystemDeviceX25Tx1024x2047, smSiaSystemProcessPID=smSiaSystemProcessPID, smSiaSystemDeviceX25ResetRequestPTx=smSiaSystemDeviceX25ResetRequestPTx, smSiaSystemDeviceX25RxQueHigh=smSiaSystemDeviceX25RxQueHigh, smSiaSystemUtilizationKernelContextSwitchesMinimum=smSiaSystemUtilizationKernelContextSwitchesMinimum, smSiaSystemSubSystemsPID=smSiaSystemSubSystemsPID, smSiaSystemUtilizationIostatKilobytesTransferRateMaximum=smSiaSystemUtilizationIostatKilobytesTransferRateMaximum, smSiaSystemDeviceEthernetUnderrun=smSiaSystemDeviceEthernetUnderrun, smSiaSystemPagingStatisticsPageFaults=smSiaSystemPagingStatisticsPageFaults, smSiaAdministration=smSiaAdministration, smSiaSystemDeviceTokenRingTxFrameMcnt=smSiaSystemDeviceTokenRingTxFrameMcnt, smSiaSystemFileSystemInodeCount=smSiaSystemFileSystemInodeCount, smSiaSystemDeviceX25RouteAction=smSiaSystemDeviceX25RouteAction, smSiaCommandOutputColumnIndex=smSiaCommandOutputColumnIndex, smSiaSystemDeviceTokenRingPktTxCnt=smSiaSystemDeviceTokenRingPktTxCnt, smSiaCommandCounterResult=smSiaCommandCounterResult, smSiaResourceUsageUserTime=smSiaResourceUsageUserTime, smSiaSystemPagingStatistics=smSiaSystemPagingStatistics, smSiaResourceUsageNSwap=smSiaResourceUsageNSwap, smSiaSystemDeviceX25Tx0x15=smSiaSystemDeviceX25Tx0x15, smSiaSystemUtilizationKernelSystemWritesMaximum=smSiaSystemUtilizationKernelSystemWritesMaximum, smSiaSystemPagingStatisticsPageScansMaximum=smSiaSystemPagingStatisticsPageScansMaximum, smSiaSystemPagingStatisticsIntervalLength=smSiaSystemPagingStatisticsIntervalLength, smSiaSystemDeviceX25DataPTx=smSiaSystemDeviceX25DataPTx, smSiaSystemDeviceEthernetTable=smSiaSystemDeviceEthernetTable, smSiaSystemDeviceX25DefaultSvcRxPacketSize=smSiaSystemDeviceX25DefaultSvcRxPacketSize, smSiaSystemDeviceTokenRingBroadwrap=smSiaSystemDeviceTokenRingBroadwrap, smSiaSystemDeviceX25RxByteMcnt=smSiaSystemDeviceX25RxByteMcnt, smSiaProgramControl=smSiaProgramControl, smSiaSystemUtilizationCPUSystemMinimum=smSiaSystemUtilizationCPUSystemMinimum, smSiaSystemDeviceEthernetHardwareAddress=smSiaSystemDeviceEthernetHardwareAddress, smSiaSystemDeviceX25TxErrCnt=smSiaSystemDeviceX25TxErrCnt, smSiaSystemDeviceX25RejFTx=smSiaSystemDeviceX25RejFTx, smSiaSystemDeviceX25ClearRequestPTx=smSiaSystemDeviceX25ClearRequestPTx, smSiaSystemDeviceX25ClearConfirmPRx=smSiaSystemDeviceX25ClearConfirmPRx, smSiaSystemDeviceTokenRingBeaconStationPhysAddr=smSiaSystemDeviceTokenRingBeaconStationPhysAddr, smSiaSystemFileSystemTable=smSiaSystemFileSystemTable, smSiaSystemSubSystemsTable=smSiaSystemSubSystemsTable, smSiaSystemRecordLockTableSize=smSiaSystemRecordLockTableSize, smSiaSystemDeviceX25StaQueHigh=smSiaSystemDeviceX25StaQueHigh, smSiaResourceUsageMsgrcv=smSiaResourceUsageMsgrcv, smSiaResourceUsageMsgsnd=smSiaResourceUsageMsgsnd, smSiaSystemDeviceTokenRingUpstreamNodeAddr=smSiaSystemDeviceTokenRingUpstreamNodeAddr, smSiaSystemDeviceX25T22Expirations=smSiaSystemDeviceX25T22Expirations, smSiaSystemDeviceX25XidFTx=smSiaSystemDeviceX25XidFTx, smSiaSystemUtilizationIostatPercentTimeActive=smSiaSystemUtilizationIostatPercentTimeActive, smSiaFileMonitorMessages=smSiaFileMonitorMessages, smSiaSystemUtilizationKernelSystemWrites=smSiaSystemUtilizationKernelSystemWrites, smSiaSystemDeviceEthernetRxByteLcnt=smSiaSystemDeviceEthernetRxByteLcnt, smSiaSystemTime=smSiaSystemTime, smSiaSystemProcessCPU=smSiaSystemProcessCPU, smSiaSystemProcess=smSiaSystemProcess, smSiaProgramControlSetableOctetString=smSiaProgramControlSetableOctetString, smSiaSystemProcessPageFaultsNoIO=smSiaSystemProcessPageFaultsNoIO, smSiaSystemDeviceX25RxErrCnt=smSiaSystemDeviceX25RxErrCnt, smSiaFileMonitorReturnCode=smSiaFileMonitorReturnCode, smSiaSystemUtilizationKernelExecs=smSiaSystemUtilizationKernelExecs, smSiaSystemPagingStatisticsPageReclaims=smSiaSystemPagingStatisticsPageReclaims, smSiaSystemUtilizationCPUUser=smSiaSystemUtilizationCPUUser, smSiaProgramLogNumFiles=smSiaProgramLogNumFiles, smSiaSystemProcessPFlags=smSiaSystemProcessPFlags, smSiaSystemDeviceX25TxReserved1=smSiaSystemDeviceX25TxReserved1, smSiaSystemProcessDescriptorTableSize=smSiaSystemProcessDescriptorTableSize, smSiaSystemPagingSpaceSize=smSiaSystemPagingSpaceSize, smSiaSystemDeviceTokenRing=smSiaSystemDeviceTokenRing, smSiaSystemDeviceEthernetLateCollision=smSiaSystemDeviceEthernetLateCollision, smSiaFileMonitorSize=smSiaFileMonitorSize, smSiaResourceUsageTotalTime=smSiaResourceUsageTotalTime, smSiaSystemDeviceTokenRingRxQueOverflow=smSiaSystemDeviceTokenRingRxQueOverflow, smSiaSystemDeviceX25Rx16x31=smSiaSystemDeviceX25Rx16x31, smSiaSystemProcessCount=smSiaSystemProcessCount, smSiaSystemDeviceX25CarrierLoss=smSiaSystemDeviceX25CarrierLoss, smSiaProgramCompilationDate=smSiaProgramCompilationDate, smSiaSystemDeviceTokenRingRxByteLcnt=smSiaSystemDeviceTokenRingRxByteLcnt, smSiaSystemDeviceX25T26Expirations=smSiaSystemDeviceX25T26Expirations, smSiaSystemDeviceTokenRingBeaconRxType=smSiaSystemDeviceTokenRingBeaconRxType, smSiaSystemProcessTextResidentSetSize=smSiaSystemProcessTextResidentSetSize, smSiaCommandGetStringAndParameters=smSiaCommandGetStringAndParameters, smSiaSystemDeviceX25RnrPRx=smSiaSystemDeviceX25RnrPRx, smSiaSystemProcessEntry=smSiaSystemProcessEntry, smSiaSystemDeviceX25BadLengthFTx=smSiaSystemDeviceX25BadLengthFTx, smSiaSystemDeviceTokenRingStaQueHigh=smSiaSystemDeviceTokenRingStaQueHigh, smSiaSystemMemScrub=smSiaSystemMemScrub, smSiaResourceUsageTable=smSiaResourceUsageTable, smSiaSystemDeviceTokenRingRxQueNoMbuf=smSiaSystemDeviceTokenRingRxQueNoMbuf, smSiaResourceUsageIcsw=smSiaResourceUsageIcsw, smSiaSystemPagingStatisticsPageScans=smSiaSystemPagingStatisticsPageScans, smSiaFileMonitorTimeLastDataModification=smSiaFileMonitorTimeLastDataModification, smSiaSystemPagingSpaceActive=smSiaSystemPagingSpaceActive, smSiaSystemDeviceX25IgnoredFTx=smSiaSystemDeviceX25IgnoredFTx, smSiaSystemDeviceX25Rx1024x2047=smSiaSystemDeviceX25Rx1024x2047, smSiaSystemDeviceTokenRingRxFrameLcnt=smSiaSystemDeviceTokenRingRxFrameLcnt, smSiaProgramControlAgentAddress=smSiaProgramControlAgentAddress, smSiaSystemDeviceTokenRingUpstreamPhysAddr=smSiaSystemDeviceTokenRingUpstreamPhysAddr, smSiaCommandOutputResultIndex=smSiaCommandOutputResultIndex, smSiaProgramControlSetableCounter=smSiaProgramControlSetableCounter, smSiaSystemMiscellaneous=smSiaSystemMiscellaneous, smSiaSystemFileSystemPercentUsed=smSiaSystemFileSystemPercentUsed, smSiaSystemDeviceX25ResetConfirmPRx=smSiaSystemDeviceX25ResetConfirmPRx, smSiaSystemProcessNSwap=smSiaSystemProcessNSwap, smSiaSystemDeviceX25ResetConfirmPTx=smSiaSystemDeviceX25ResetConfirmPTx, smSiaSystemDeviceX25Tx512x1023=smSiaSystemDeviceX25Tx512x1023, smSiaSystemDeviceX25BadLengthFRx=smSiaSystemDeviceX25BadLengthFRx, smSiaSystemUtilizationKernelSwapQueueMaximum=smSiaSystemUtilizationKernelSwapQueueMaximum, smSiaSystemPagingStatisticsPagesPagedInMaximum=smSiaSystemPagingStatisticsPagesPagedInMaximum, smSiaCommandTimeOutValue=smSiaCommandTimeOutValue, smSiaSystemDeviceX25UnknownFRx=smSiaSystemDeviceX25UnknownFRx, smSiaSystemUtilizationKernelMessagesMinimum=smSiaSystemUtilizationKernelMessagesMinimum, smSiaSystemDeviceX25RouteEntryName=smSiaSystemDeviceX25RouteEntryName, smSiaSystemMiscellaneousRandom=smSiaSystemMiscellaneousRandom)
