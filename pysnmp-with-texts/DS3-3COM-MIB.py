#
# PySNMP MIB module DS3-3COM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DS3-3COM-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:54:24 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Gauge32, Counter64, enterprises, IpAddress, ModuleIdentity, experimental, Counter32, NotificationType, ObjectIdentity, Unsigned32, Integer32, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, MibIdentifier, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "Counter64", "enterprises", "IpAddress", "ModuleIdentity", "experimental", "Counter32", "NotificationType", "ObjectIdentity", "Unsigned32", "Integer32", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "MibIdentifier", "TimeTicks")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
usr = MibIdentifier((1, 3, 6, 1, 4, 1, 429))
nas = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1))
ds3 = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 44))
ds3Cfg = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 44, 1))
ds3CfgTable = MibTable((1, 3, 6, 1, 4, 1, 429, 1, 44, 1, 1), )
if mibBuilder.loadTexts: ds3CfgTable.setStatus('mandatory')
if mibBuilder.loadTexts: ds3CfgTable.setDescription('The DS3 Configuration Table.')
ds3CfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 429, 1, 44, 1, 1, 1), ).setIndexNames((0, "DS3-3COM-MIB", "ds3CfgIndex"))
if mibBuilder.loadTexts: ds3CfgEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ds3CfgEntry.setDescription('An entry in the DS3 Configuration Table.')
ds3CfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 44, 1, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds3CfgIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ds3CfgIndex.setDescription('A unique value at the DS3 level in the chassis.')
ds3CfgXmitLineBuildOut = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 44, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("twoHundredTwentyFive", 1), ("fourHundredFifty", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds3CfgXmitLineBuildOut.setStatus('mandatory')
if mibBuilder.loadTexts: ds3CfgXmitLineBuildOut.setDescription('This object is used to configure the amount of attenuation that is to be applied to the DS3 transmit signal in order to control cross-talk, etc. The settings are for distances of 0-225 feet or 226 to 450 feet. Default=225(1)')
ds3CfgMonitorPortSource = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 44, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(29, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28))).clone(namedValues=NamedValues(("spanBITS", 29), ("spanLine1", 1), ("spanLine2", 2), ("spanLine3", 3), ("spanLine4", 4), ("spanLine5", 5), ("spanLine6", 6), ("spanLine7", 7), ("spanLine8", 8), ("spanLine9", 9), ("spanLine10", 10), ("spanLine11", 11), ("spanLine12", 12), ("spanLine13", 13), ("spanLine14", 14), ("spanLine15", 15), ("spanLine16", 16), ("spanLine17", 17), ("spanLine18", 18), ("spanLine19", 19), ("spanLine20", 20), ("spanLine21", 21), ("spanLine22", 22), ("spanLine23", 23), ("spanLine24", 24), ("spanLine25", 25), ("spanLine26", 26), ("spanLine27", 27), ("spanLine28", 28)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds3CfgMonitorPortSource.setStatus('mandatory')
if mibBuilder.loadTexts: ds3CfgMonitorPortSource.setDescription('This object is for designation of monitor port DS1 source. Default=spanLine1(1).')
ds3Current = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 44, 2))
ds3CurrentTable = MibTable((1, 3, 6, 1, 4, 1, 429, 1, 44, 2, 1), )
if mibBuilder.loadTexts: ds3CurrentTable.setStatus('mandatory')
if mibBuilder.loadTexts: ds3CurrentTable.setDescription('This table contains various statistics being collected for the current 15 minute interval.')
ds3CurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 429, 1, 44, 2, 1, 1), ).setIndexNames((0, "DS3-3COM-MIB", "ds3CurrentIndex"))
if mibBuilder.loadTexts: ds3CurrentEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ds3CurrentEntry.setDescription('An entry in the DS3 current table.')
ds3CurrentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 44, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds3CurrentIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ds3CurrentIndex.setDescription('The index value which uniquely identifies the DS3 interface to which this entry is applicable.')
ds3CurrentFCPs = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 44, 2, 1, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds3CurrentFCPs.setStatus('mandatory')
if mibBuilder.loadTexts: ds3CurrentFCPs.setDescription('This object indicates near end path failure count. The count of LOF or AIS events.')
ds3CurrentFCCPs = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 44, 2, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds3CurrentFCCPs.setStatus('mandatory')
if mibBuilder.loadTexts: ds3CurrentFCCPs.setDescription('This object indicates far end path failure count. The count of Remote Alarm Indication (RAI) events.')
ds3CurrentSESLs = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 44, 2, 1, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds3CurrentSESLs.setStatus('mandatory')
if mibBuilder.loadTexts: ds3CurrentSESLs.setDescription('The object is the counter associated with the number of Severely Errored Seconds on the line.')
ds3CurrentUASCPs = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 44, 2, 1, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds3CurrentUASCPs.setStatus('mandatory')
if mibBuilder.loadTexts: ds3CurrentUASCPs.setDescription('This object is the counter associated with the number of Unavailable Seconds for the C-bit parity application.')
ds3Interval = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 44, 3))
ds3IntervalTable = MibTable((1, 3, 6, 1, 4, 1, 429, 1, 44, 3, 1), )
if mibBuilder.loadTexts: ds3IntervalTable.setStatus('mandatory')
if mibBuilder.loadTexts: ds3IntervalTable.setDescription('The DS3 Interval Table contains various statistics collected by each DS3 Interface over the previous 24 hours of operation. The past 24 hours are broken into 96 completed 15 minute intervals. Each row in this table represents one such interval (identified by ds3IntervalNumber) and for one specific interface (identified by ds3IntervalIndex).')
ds3IntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 429, 1, 44, 3, 1, 1), ).setIndexNames((0, "DS3-3COM-MIB", "ds3IntervalIndex"), (0, "DS3-3COM-MIB", "ds3IntervalNumber"))
if mibBuilder.loadTexts: ds3IntervalEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ds3IntervalEntry.setDescription('An entry in the DS3 Interval Table.')
ds3IntervalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 44, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds3IntervalIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ds3IntervalIndex.setDescription('The index value which uniquely identifies the DS3 interface to which this entry is applicable.')
ds3IntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 44, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds3IntervalNumber.setStatus('mandatory')
if mibBuilder.loadTexts: ds3IntervalNumber.setDescription('A number between 1 and 96, where 1 is the most recently completed 15 minute interval and 96 is the 15 minutes interval completes 23 hours and 45 minutes prior to interval 1.')
ds3IntervalSESLs = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 44, 3, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds3IntervalSESLs.setStatus('mandatory')
if mibBuilder.loadTexts: ds3IntervalSESLs.setDescription('This object is the counter associated with the number of Severely Errored Seconds on the line in the previous 15 minute interval.')
ds3IntervalCVCPs = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 44, 3, 1, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds3IntervalCVCPs.setStatus('mandatory')
if mibBuilder.loadTexts: ds3IntervalCVCPs.setDescription('This object is the counter associated with the number of near-end path code violations for the C-bit parity application in the previous 15 minute interval.')
ds3IntervalUASCPs = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 44, 3, 1, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds3IntervalUASCPs.setStatus('mandatory')
if mibBuilder.loadTexts: ds3IntervalUASCPs.setDescription('This object is the counter associated with the number of Unavailable Seconds for the C-bit parity application in the previous 15 minute interval.')
ds3Total = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 44, 4))
ds3TotalTable = MibTable((1, 3, 6, 1, 4, 1, 429, 1, 44, 4, 1), )
if mibBuilder.loadTexts: ds3TotalTable.setStatus('mandatory')
if mibBuilder.loadTexts: ds3TotalTable.setDescription('The DS3 Total Table contains the cumulative sum of the various statics for the 24 hour period preceding the current interval.')
ds3TotalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 429, 1, 44, 4, 1, 1), ).setIndexNames((0, "DS3-3COM-MIB", "ds3TotalIndex"))
if mibBuilder.loadTexts: ds3TotalEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ds3TotalEntry.setDescription('An entry in the DS3 Total Table.')
ds3TotalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 44, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds3TotalIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ds3TotalIndex.setDescription('The index value which uniquely identifies the DS3 interface to which this entry is applicable.')
ds3TotalSESLs = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 44, 4, 1, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds3TotalSESLs.setStatus('mandatory')
if mibBuilder.loadTexts: ds3TotalSESLs.setDescription('This object is the counter associated with the number of Severely Errored Seconds on the line in the previous 24 hour interval. Invalid 15 intervals count as 0.')
ds3TotalCVCPs = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 44, 4, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds3TotalCVCPs.setStatus('mandatory')
if mibBuilder.loadTexts: ds3TotalCVCPs.setDescription('This object is the counter associated with the number of near-end path code violations for the C-bit parity application in the previous 24 hour interval. Invalid 15 minute intervals count as 0.')
ds3TotalUASCPs = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 44, 4, 1, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds3TotalUASCPs.setStatus('mandatory')
if mibBuilder.loadTexts: ds3TotalUASCPs.setDescription('This object is the counter associated with the number of Unavailable Seconds for the C-bit parity application in the previous 24 hour interval. Invalid 15 minute intervals count as 0.')
ds3TrapEnable = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 44, 5))
ds3TrapEnableTable = MibTable((1, 3, 6, 1, 4, 1, 429, 1, 44, 5, 1), )
if mibBuilder.loadTexts: ds3TrapEnableTable.setStatus('mandatory')
if mibBuilder.loadTexts: ds3TrapEnableTable.setDescription('The DS3 Trap eanble table contains the line status change trap enable')
ds3TrapEnableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 429, 1, 44, 5, 1, 1), ).setIndexNames((0, "DS3-3COM-MIB", "ds3TrapEnableIndex"))
if mibBuilder.loadTexts: ds3TrapEnableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ds3TrapEnableEntry.setDescription('An entry in Ds3 Trap Enable Table')
ds3TrapEnableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 44, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds3TrapEnableIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ds3TrapEnableIndex.setDescription('An unique value which identifies the DS3. ')
ds3LineStatusChangeTE = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 44, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enableTrap", 1), ("disableAll", 2), ("enableLog", 3), ("enableAll", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds3LineStatusChangeTE.setStatus('mandatory')
if mibBuilder.loadTexts: ds3LineStatusChangeTE.setDescription('DS3 Line status change trap enable flag')
ds3TrapObj = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 44, 6))
ds3TrapObjTable = MibTable((1, 3, 6, 1, 4, 1, 429, 1, 44, 6, 1), )
if mibBuilder.loadTexts: ds3TrapObjTable.setStatus('mandatory')
if mibBuilder.loadTexts: ds3TrapObjTable.setDescription('DS3 Trap obj table is a pace holder for status string')
ds3TrapObjEntry = MibTableRow((1, 3, 6, 1, 4, 1, 429, 1, 44, 6, 1, 1), ).setIndexNames((0, "DS3-3COM-MIB", "ds3TrapObjIndex"))
if mibBuilder.loadTexts: ds3TrapObjEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ds3TrapObjEntry.setDescription('An entry in DS3 Trap Obj table')
ds3TrapObjIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 44, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds3TrapObjIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ds3TrapObjIndex.setDescription('An unique value for the index')
ds3StatusObjString = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 44, 6, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50)))
if mibBuilder.loadTexts: ds3StatusObjString.setStatus('mandatory')
if mibBuilder.loadTexts: ds3StatusObjString.setDescription('For line status string it is a place holder')
mibBuilder.exportSymbols("DS3-3COM-MIB", ds3TrapEnableIndex=ds3TrapEnableIndex, ds3CurrentSESLs=ds3CurrentSESLs, ds3IntervalTable=ds3IntervalTable, ds3Cfg=ds3Cfg, ds3IntervalUASCPs=ds3IntervalUASCPs, ds3TrapObjEntry=ds3TrapObjEntry, nas=nas, usr=usr, ds3TrapEnableTable=ds3TrapEnableTable, ds3IntervalNumber=ds3IntervalNumber, ds3CfgMonitorPortSource=ds3CfgMonitorPortSource, ds3TrapObjTable=ds3TrapObjTable, ds3TotalUASCPs=ds3TotalUASCPs, ds3TrapObjIndex=ds3TrapObjIndex, ds3IntervalCVCPs=ds3IntervalCVCPs, ds3TotalTable=ds3TotalTable, ds3TotalIndex=ds3TotalIndex, ds3CurrentFCPs=ds3CurrentFCPs, ds3LineStatusChangeTE=ds3LineStatusChangeTE, ds3=ds3, ds3CurrentFCCPs=ds3CurrentFCCPs, ds3TrapObj=ds3TrapObj, ds3CfgIndex=ds3CfgIndex, ds3CurrentEntry=ds3CurrentEntry, ds3StatusObjString=ds3StatusObjString, ds3CfgEntry=ds3CfgEntry, ds3CurrentUASCPs=ds3CurrentUASCPs, ds3TotalSESLs=ds3TotalSESLs, ds3CfgTable=ds3CfgTable, ds3IntervalIndex=ds3IntervalIndex, ds3TotalCVCPs=ds3TotalCVCPs, ds3IntervalEntry=ds3IntervalEntry, ds3CurrentIndex=ds3CurrentIndex, ds3TrapEnableEntry=ds3TrapEnableEntry, ds3TrapEnable=ds3TrapEnable, ds3CurrentTable=ds3CurrentTable, ds3IntervalSESLs=ds3IntervalSESLs, ds3CfgXmitLineBuildOut=ds3CfgXmitLineBuildOut, ds3TotalEntry=ds3TotalEntry, ds3Current=ds3Current, ds3Total=ds3Total, ds3Interval=ds3Interval)
