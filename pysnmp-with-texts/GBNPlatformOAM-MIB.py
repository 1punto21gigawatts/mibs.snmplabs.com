#
# PySNMP MIB module GBNPlatformOAM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/GBNPlatformOAM-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:18:27 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint")
gbnPlatform, = mibBuilder.importSymbols("GREENTECH-MASTER-MIB", "gbnPlatform")
PortList, dot1qStaticMulticastEntry = mibBuilder.importSymbols("Q-BRIDGE-MIB", "PortList", "dot1qStaticMulticastEntry")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
Integer32, NotificationType, IpAddress, Unsigned32, iso, Counter32, Counter64, MibIdentifier, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, Gauge32, Bits, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "NotificationType", "IpAddress", "Unsigned32", "iso", "Counter32", "Counter64", "MibIdentifier", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "Gauge32", "Bits", "ObjectIdentity")
MacAddress, DisplayString, RowStatus, TextualConvention, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "DisplayString", "RowStatus", "TextualConvention", "TruthValue")
gbnPlatformOAM = ModuleIdentity((1, 3, 6, 1, 4, 1, 13464, 1, 2, 1, 1))
gbnPlatformOAM.setRevisions(('1900-11-02 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: gbnPlatformOAM.setRevisionsDescriptions(('Initial MIB creation.',))
if mibBuilder.loadTexts: gbnPlatformOAM.setLastUpdated('0011020000Z')
if mibBuilder.loadTexts: gbnPlatformOAM.setOrganization('Greentech')
if mibBuilder.loadTexts: gbnPlatformOAM.setContactInfo('Adam Armstrong E-mail: adama@observium.org')
if mibBuilder.loadTexts: gbnPlatformOAM.setDescription('Gbn Common Enterprise MIB definition.')
class VctRunResultTxRxPairNoType(TextualConvention, Integer32):
    description = 'txpair1rxpair1txpair2rxpair2'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("txpair1", 0), ("rxpair1", 1), ("txpair2", 2), ("rxpair2", 3))

class VctRunResultStatusType(TextualConvention, Integer32):
    description = 'normalshortopenimpedance mismatch'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("normal", 0), ("short", 1), ("open", 2), ("impedance_mismatch", 3))

gbnPlatformOAMSysIf = MibIdentifier((1, 3, 6, 1, 4, 1, 13464, 1, 2, 1, 1, 1))
gbnPlatformOAMSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 13464, 1, 2, 1, 1, 2))
gbnPlatformOAMIpAccessControl = MibIdentifier((1, 3, 6, 1, 4, 1, 13464, 1, 2, 1, 1, 3))
gbnPlatformOAMWatchDog = MibIdentifier((1, 3, 6, 1, 4, 1, 13464, 1, 2, 1, 1, 4))
gbnPlatformOAMMuser = MibIdentifier((1, 3, 6, 1, 4, 1, 13464, 1, 2, 1, 1, 5))
gbnPlatformOAMUpDownLoad = MibIdentifier((1, 3, 6, 1, 4, 1, 13464, 1, 2, 1, 1, 6))
gbnPlatformOAMSnmp = MibIdentifier((1, 3, 6, 1, 4, 1, 13464, 1, 2, 1, 1, 7))
gbnPlatformOAMSntpClient = MibIdentifier((1, 3, 6, 1, 4, 1, 13464, 1, 2, 1, 1, 8))
gbnPlatformOAMSyslog = MibIdentifier((1, 3, 6, 1, 4, 1, 13464, 1, 2, 1, 1, 9))
gbnPlatformOAMPortCar = MibIdentifier((1, 3, 6, 1, 4, 1, 13464, 1, 2, 1, 1, 10))
gbnPlatformOAMSsh = MibIdentifier((1, 3, 6, 1, 4, 1, 13464, 1, 2, 1, 1, 11))
gbnPlatformOAMMailalarm = MibIdentifier((1, 3, 6, 1, 4, 1, 13464, 1, 2, 1, 1, 12))
gbnPlatformOAMVctRun = MibIdentifier((1, 3, 6, 1, 4, 1, 13464, 1, 2, 1, 1, 13))
gbnPlatformOAMVctRunResult = MibIdentifier((1, 3, 6, 1, 4, 1, 13464, 1, 2, 1, 1, 14))
sysIfMACAddr = MibScalar((1, 3, 6, 1, 4, 1, 13464, 1, 2, 1, 1, 1, 1), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysIfMACAddr.setStatus('current')
if mibBuilder.loadTexts: sysIfMACAddr.setDescription("DURABLE: { '000000000000'H } The base (i.e., first) MAC address used by the gbn agent for its in-band ports.")
sysIfIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 13464, 1, 2, 1, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysIfIpAddress.setStatus('current')
if mibBuilder.loadTexts: sysIfIpAddress.setDescription("DURABLE: { '00000000'H } The IP Address for sw0 (swEND 0); only applies after reset - see 'gbnCommonMiscReset'.")
sysIfIPGateAddress = MibScalar((1, 3, 6, 1, 4, 1, 13464, 1, 2, 1, 1, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysIfIPGateAddress.setStatus('current')
if mibBuilder.loadTexts: sysIfIPGateAddress.setDescription("DURABLE: { '00000000'H } The default Gateway Address (i.e., next hop router) for sw0 (swEND 0); only applies after reset - see 'gbnCommonMiscReset'.")
sysIfIPNetMask = MibScalar((1, 3, 6, 1, 4, 1, 13464, 1, 2, 1, 1, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysIfIPNetMask.setStatus('current')
if mibBuilder.loadTexts: sysIfIPNetMask.setDescription("DURABLE: { 'ffffff00'H } The IP NetMask for sw0 (swEND 0); only applies after reset - see 'gbnCommonMiscReset'.")
sysIfIPStatus = MibScalar((1, 3, 6, 1, 4, 1, 13464, 1, 2, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notModified", 1), ("modified", 2), ("restore", 3), ("apply", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysIfIPStatus.setStatus('current')
if mibBuilder.loadTexts: sysIfIPStatus.setDescription('This object is used to synchronize the modification of the IP parameters used by the protocol stack based on the gbnCommonIP MIB objects. This allows the user to change gbnCommonIPMACAddr, gbnCommonIPIpAddress, gbnCommonIPGateAddress, and gbnCommonIPNetMask, and then apply the changes to the unit using apply(4). If gbnCommonIPStatus returns notModified(1), no modifications were made to any gbnCommonIP MIB objects. If gbnCommonIPStatus returns modified(2), one or more objects were changed, but have not been applied. Both notModified(1) and modified(2) are read-only values; the agent returns a SNMP_BADVALUE for sets using these values. Both restore(3) and apply(4) are valid SET values. If one or more of the gbnCommonIP objects were modified, the user can restore the parameters to a mirror of the NVM values using restore(3).')
sysIfBOOTPOnOff = MibScalar((1, 3, 6, 1, 4, 1, 13464, 1, 2, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysIfBOOTPOnOff.setStatus('current')
if mibBuilder.loadTexts: sysIfBOOTPOnOff.setDescription("DURABLE: { disable } Enable/Disable BOOTP operation for the gbn agent. When 'disable(2)', no BOOTPs are transmitted by the Application. When 'enable(1)', the Application sends BOOTP requests during system startup.")
sysIfDHCPOnOff = MibScalar((1, 3, 6, 1, 4, 1, 13464, 1, 2, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysIfDHCPOnOff.setStatus('current')
if mibBuilder.loadTexts: sysIfDHCPOnOff.setDescription("DURABLE: { disable } Enable/Disable DHCP operation for the gbn agent. When 'disable(2)', no DHCPs are transmitted by the Application. When enabled, the Application sends DHCP requests during system startup.")
sysIfManageVLANTbale = MibTable((1, 3, 6, 1, 4, 1, 13464, 1, 2, 1, 1, 1, 9), )
if mibBuilder.loadTexts: sysIfManageVLANTbale.setStatus('mandatory')
if mibBuilder.loadTexts: sysIfManageVLANTbale.setDescription('ManageVlan table')
sysIfManageVLANEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13464, 1, 2, 1, 1, 1, 9, 1), ).setIndexNames((0, "GBNPlatformOAM-MIB", "sysIfManageVLANVid"))
if mibBuilder.loadTexts: sysIfManageVLANEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sysIfManageVLANEntry.setDescription('ManageVlan entry')
sysIfManageVLANVid = MibTableColumn((1, 3, 6, 1, 4, 1, 13464, 1, 2, 1, 1, 1, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysIfManageVLANVid.setStatus('current')
if mibBuilder.loadTexts: sysIfManageVLANVid.setDescription('ManageVLAN-ID, as an index, the maximum number is 26.')
sysIfManageVLANRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 13464, 1, 2, 1, 1, 1, 9, 1, 2), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysIfManageVLANRowStatus.setStatus('current')
if mibBuilder.loadTexts: sysIfManageVLANRowStatus.setDescription('ManageVLAN status')
softwarePlate = MibScalar((1, 3, 6, 1, 4, 1, 13464, 1, 2, 1, 1, 2, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: softwarePlate.setStatus('current')
if mibBuilder.loadTexts: softwarePlate.setDescription('Software platform used by switches.')
softwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 13464, 1, 2, 1, 1, 2, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: softwareVersion.setStatus('current')
if mibBuilder.loadTexts: softwareVersion.setDescription('Software version, the format is V100R001B02D06P03SP3')
softwareCompiledTimeE = MibScalar((1, 3, 6, 1, 4, 1, 13464, 1, 2, 1, 1, 2, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: softwareCompiledTimeE.setStatus('current')
if mibBuilder.loadTexts: softwareCompiledTimeE.setDescription('Software Compiled time displayed in English, the format is Feburary 17 2003 15:47:00')
softwareCompiledTimeC = MibScalar((1, 3, 6, 1, 4, 1, 13464, 1, 2, 1, 1, 2, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: softwareCompiledTimeC.setStatus('current')
if mibBuilder.loadTexts: softwareCompiledTimeC.setDescription('Software Compiled time ')
cpuDescription = MibScalar((1, 3, 6, 1, 4, 1, 13464, 1, 2, 1, 1, 2, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuDescription.setStatus('current')
if mibBuilder.loadTexts: cpuDescription.setDescription('System CPU description, the format is Mips 32334, 133MHz')
sdramDescription = MibScalar((1, 3, 6, 1, 4, 1, 13464, 1, 2, 1, 1, 2, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdramDescription.setStatus('current')
if mibBuilder.loadTexts: sdramDescription.setDescription('System Memory description, the format is 32M')
flashDescription = MibScalar((1, 3, 6, 1, 4, 1, 13464, 1, 2, 1, 1, 2, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: flashDescription.setStatus('current')
if mibBuilder.loadTexts: flashDescription.setDescription('System Flash description, the format is 4096k')
hardwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 13464, 1, 2, 1, 1, 2, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hardwareVersion.setStatus('current')
if mibBuilder.loadTexts: hardwareVersion.setDescription('Hardware version, the format is V3.0')
bootromVersion = MibScalar((1, 3, 6, 1, 4, 1, 13464, 1, 2, 1, 1, 2, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bootromVersion.setStatus('current')
if mibBuilder.loadTexts: bootromVersion.setDescription('Bootrom version, the format is V2.0')
hostName = MibScalar((1, 3, 6, 1, 4, 1, 13464, 1, 2, 1, 1, 2, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hostName.setStatus('current')
if mibBuilder.loadTexts: hostName.setDescription('System host name')
cpuIdle = MibScalar((1, 3, 6, 1, 4, 1, 13464, 1, 2, 1, 1, 2, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuIdle.setStatus('current')
if mibBuilder.loadTexts: cpuIdle.setDescription('The percentage of free CPU in the current system.')
memorySize = MibScalar((1, 3, 6, 1, 4, 1, 13464, 1, 2, 1, 1, 2, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memorySize.setStatus('current')
if mibBuilder.loadTexts: memorySize.setDescription('The current system memory size, unit is byte.')
memoryIdle = MibScalar((1, 3, 6, 1, 4, 1, 13464, 1, 2, 1, 1, 2, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryIdle.setStatus('current')
if mibBuilder.loadTexts: memoryIdle.setDescription('The current system free memory size, unit is byte.')
systemClock = MibIdentifier((1, 3, 6, 1, 4, 1, 13464, 1, 2, 1, 1, 2, 14))
clockTime = MibScalar((1, 3, 6, 1, 4, 1, 13464, 1, 2, 1, 1, 2, 14, 1), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clockTime.setStatus('current')
if mibBuilder.loadTexts: clockTime.setDescription('The current calendar time in seconds. The based time is 1979/1/1. Year of the date must be the number between 2000 and 2099')
timeZoneName = MibScalar((1, 3, 6, 1, 4, 1, 13464, 1, 2, 1, 1, 2, 14, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeZoneName.setStatus('current')
if mibBuilder.loadTexts: timeZoneName.setDescription('the timezone name,1-32 letters.')
timeZoneOffset = MibScalar((1, 3, 6, 1, 4, 1, 13464, 1, 2, 1, 1, 2, 14, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 86399))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeZoneOffset.setStatus('current')
if mibBuilder.loadTexts: timeZoneOffset.setDescription('seconds between current timezone and GMT ')
offsetNegFlag = MibScalar((1, 3, 6, 1, 4, 1, 13464, 1, 2, 1, 1, 2, 14, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: offsetNegFlag.setStatus('current')
if mibBuilder.loadTexts: offsetNegFlag.setDescription('earlier or latter than GMT,it is true when timeZoneOffset is negative')
productName = MibScalar((1, 3, 6, 1, 4, 1, 13464, 1, 2, 1, 1, 2, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: productName.setStatus('current')
if mibBuilder.loadTexts: productName.setDescription("DURABLE: { 'WindRiver gbn Agent' } The product name associated with this agent. This name is displayed on the console screens and Web pages.")
systemReset = MibScalar((1, 3, 6, 1, 4, 1, 13464, 1, 2, 1, 1, 2, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noop", 1), ("reset", 2), ("resetToDefaults", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemReset.setStatus('current')
if mibBuilder.loadTexts: systemReset.setDescription("Physically performs a hardware reset of the unit. Use with care. A 'reset(2)' resets the unit, a 'resetToDefaults(3)' resets the NVM configuration to factory defaults and then resets the unit, and 'noop(1)' does nothing. A value of 'noop(1)' is always returned for a GET operation.")
writeConfig = MibScalar((1, 3, 6, 1, 4, 1, 13464, 1, 2, 1, 1, 2, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noop", 1), ("save", 2), ("saveInProgress", 3), ("saveFailed", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: writeConfig.setStatus('current')
if mibBuilder.loadTexts: writeConfig.setDescription("When set to 'save(2)', config file is saved to NVM (Nonvolatile Memory). NVM save operations may be slow (e.g., erasing/writing Flash device). Consequently, all or many updates should be made before saving to NVM. Note that the SNMP set to 'save(2)' returns immediately to the caller. Gets on this object then return 'saveInProgress(3)' until the save operation completes, at which time 'noop(1)' is returned if the save operation is succeeded, otherwise 'saveFailed(4)' is returned. Consequently, a get operation always returns 'noop(1)', 'saveInProgress(3)' or 'saveFailed(4) depending on the current state and the result of the save operation. The agent returns 'badValue' for SNMPv1 or 'inconsistentValue' for SNMPv2c/v3 for a set to 'Save(2)' while the current get state is 'saveInProgress(3)'. Attempts to set this object to 'saveInProgress(3)' or 'saveFailed(4)' returns 'badValue' for SNMPv1 or 'wrongValue' for SNMPv2c/v3.")
saveNMInterfaceConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 13464, 1, 2, 1, 1, 2, 18))
nmInterfaceId = MibScalar((1, 3, 6, 1, 4, 1, 13464, 1, 2, 1, 1, 2, 18, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmInterfaceId.setStatus('current')
if mibBuilder.loadTexts: nmInterfaceId.setDescription('interface id of vlan saved for nm_interface configuration.')
nmInterfaceIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 13464, 1, 2, 1, 1, 2, 18, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmInterfaceIpAddress.setStatus('current')
if mibBuilder.loadTexts: nmInterfaceIpAddress.setDescription('ip address saved for nm_interface configuration.')
nmInterfaceNetMask = MibScalar((1, 3, 6, 1, 4, 1, 13464, 1, 2, 1, 1, 2, 18, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmInterfaceNetMask.setStatus('current')
if mibBuilder.loadTexts: nmInterfaceNetMask.setDescription('mask saved for nm_interface configuration. ')
nmInterfaceGateAddress = MibScalar((1, 3, 6, 1, 4, 1, 13464, 1, 2, 1, 1, 2, 18, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmInterfaceGateAddress.setStatus('current')
if mibBuilder.loadTexts: nmInterfaceGateAddress.setDescription('gateway address saved for nm_interface configuration. ')
writeNMInterfaceConifig = MibScalar((1, 3, 6, 1, 4, 1, 13464, 1, 2, 1, 1, 2, 18, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("saveNmconfig", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: writeNMInterfaceConifig.setStatus('current')
if mibBuilder.loadTexts: writeNMInterfaceConifig.setDescription("We save the nm_interface configuration through setting this Mib. When setting to 'saveNmconfig(1)', nm_interface configuration is starting to be saved. At the same time the value of writeNMInterfaceConifigStatus Mib is set to 'saveInProgress(2)'. Then the value of nmInterfaceId, nmInterfaceIpAddress, nmInterfaceNetMask, nmInterfaceGateAddress will be read one by one.According to these value, the nm_interface configuration is to be saved. Untill the process was over the value of writeNMInterfaceConifigStatus Mib is changed to 'saveSuccess(1)'. And if the process was ended for exception the value of writeNMInterfaceConifigStatus Mib is set to a error code from 'saveFailed(3)' to 'invalidIpOrMask(11)'. ")
writeNMInterfaceConifigStatus = MibScalar((1, 3, 6, 1, 4, 1, 13464, 1, 2, 1, 1, 2, 18, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("saveSuccess", 1), ("saveInProgress", 2), ("saveFailed", 3), ("noInterface", 4), ("noIpAddress", 5), ("differentSubnet", 6), ("noInterfaceParameter", 7), ("noIpAddressParameter", 8), ("noMaskParameter", 9), ("noGatewayParameter", 10), ("invalidIpOrMask", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: writeNMInterfaceConifigStatus.setStatus('current')
if mibBuilder.loadTexts: writeNMInterfaceConifigStatus.setDescription('Reserve the status of process in saving Nmconfig.')
prodSerialNo = MibScalar((1, 3, 6, 1, 4, 1, 13464, 1, 2, 1, 1, 2, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prodSerialNo.setStatus('current')
if mibBuilder.loadTexts: prodSerialNo.setDescription('Product Serial Number')
cpuBusyStatus = MibScalar((1, 3, 6, 1, 4, 1, 13464, 1, 2, 1, 1, 2, 20), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuBusyStatus.setStatus('current')
if mibBuilder.loadTexts: cpuBusyStatus.setDescription('CPU busy status')
cpuBusyAlarmEnable = MibScalar((1, 3, 6, 1, 4, 1, 13464, 1, 2, 1, 1, 2, 21), TruthValue().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2))).clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuBusyAlarmEnable.setStatus('current')
if mibBuilder.loadTexts: cpuBusyAlarmEnable.setDescription('the enable status of cpu busy alarm.')
cpuBusyThreshold = MibScalar((1, 3, 6, 1, 4, 1, 13464, 1, 2, 1, 1, 2, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuBusyThreshold.setStatus('current')
if mibBuilder.loadTexts: cpuBusyThreshold.setDescription('CPU busy threshold.')
cpuUnbusyThreshold = MibScalar((1, 3, 6, 1, 4, 1, 13464, 1, 2, 1, 1, 2, 23), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuUnbusyThreshold.setStatus('current')
if mibBuilder.loadTexts: cpuUnbusyThreshold.setDescription('CPU unbusy threshold.')
cpuStatusTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 13464, 1, 2, 1, 1, 2, 24))
cpuBusyTrap = NotificationType((1, 3, 6, 1, 4, 1, 13464, 1, 2, 1, 1, 2, 24, 1))
if mibBuilder.loadTexts: cpuBusyTrap.setStatus('current')
if mibBuilder.loadTexts: cpuBusyTrap.setDescription('cpu busy trap.')
cpuUnbusyTrap = NotificationType((1, 3, 6, 1, 4, 1, 13464, 1, 2, 1, 1, 2, 24, 2))
if mibBuilder.loadTexts: cpuUnbusyTrap.setStatus('current')
if mibBuilder.loadTexts: cpuUnbusyTrap.setDescription('cpu unbusy trap.')
ipAccessControlTable = MibTable((1, 3, 6, 1, 4, 1, 13464, 1, 2, 1, 1, 3, 1), )
if mibBuilder.loadTexts: ipAccessControlTable.setStatus('current')
if mibBuilder.loadTexts: ipAccessControlTable.setDescription('IP address access control table.')
ipAccessControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13464, 1, 2, 1, 1, 3, 1, 1), ).setIndexNames((0, "GBNPlatformOAM-MIB", "controlIpAddress"), (0, "GBNPlatformOAM-MIB", "controlIpMask"), (0, "GBNPlatformOAM-MIB", "controlTeminal"))
if mibBuilder.loadTexts: ipAccessControlEntry.setStatus('current')
if mibBuilder.loadTexts: ipAccessControlEntry.setDescription('IP address access control entry.')
controlIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 13464, 1, 2, 1, 1, 3, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controlIpAddress.setStatus('current')
if mibBuilder.loadTexts: controlIpAddress.setDescription('The accessible ip address of the switch')
controlIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 13464, 1, 2, 1, 1, 3, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controlIpMask.setStatus('current')
if mibBuilder.loadTexts: controlIpMask.setDescription('The accessible ip address mask of the switch, wildcard supports mask and unmask')
controlTeminal = MibTableColumn((1, 3, 6, 1, 4, 1, 13464, 1, 2, 1, 1, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("snmp", 1), ("web", 2), ("telnet", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: controlTeminal.setStatus('current')
if mibBuilder.loadTexts: controlTeminal.setDescription('The client type connected to switch, snmp(1) means connecting switch by SNMP, web(2) means connecting switch by WEB, telnet(3) means connecting switch by telnet.')
controlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 13464, 1, 2, 1, 1, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("destroy", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlStatus.setStatus('current')
if mibBuilder.loadTexts: controlStatus.setDescription('IP address control status, active(1) means adding the ip address to list, destroy(2) means deleting the ip address from list')
softDogProxy = MibScalar((1, 3, 6, 1, 4, 1, 13464, 1, 2, 1, 1, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: softDogProxy.setStatus('current')
if mibBuilder.loadTexts: softDogProxy.setDescription('Enable/disable the soft dog.')
musrTable = MibTable((1, 3, 6, 1, 4, 1, 13464, 1, 2, 1, 1, 5, 1), )
if mibBuilder.loadTexts: musrTable.setStatus('current')
if mibBuilder.loadTexts: musrTable.setDescription('A Table of usr_name and Password.')
musrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13464, 1, 2, 1, 1, 5, 1, 1), ).setIndexNames((0, "GBNPlatformOAM-MIB", "musrIndex"))
if mibBuilder.loadTexts: musrEntry.setStatus('current')
if mibBuilder.loadTexts: musrEntry.setDescription('A list of usr parameters.')
musrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13464, 1, 2, 1, 1, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: musrIndex.setStatus('current')
if mibBuilder.loadTexts: musrIndex.setDescription("A simple index into 'gbnCommonUsrTable'.")
musrName = MibTableColumn((1, 3, 6, 1, 4, 1, 13464, 1, 2, 1, 1, 5, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: musrName.setStatus('current')
if mibBuilder.loadTexts: musrName.setDescription(' A simple usrname of gbnCommonUsrEntry.')
musrPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 13464, 1, 2, 1, 1, 5, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: musrPassword.setStatus('current')
if mibBuilder.loadTexts: musrPassword.setDescription(' A simple password of gbnCommonUsrEntry.')
musrType = MibTableColumn((1, 3, 6, 1, 4, 1, 13464, 1, 2, 1, 1, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normalUser", 0), ("superUser", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: musrType.setStatus('current')
if mibBuilder.loadTexts: musrType.setDescription("DURABLE: { NormalUser } A simple UsrType into 'gbnCommonUsrTable'. when 'NomalUser' configuration is limitted")
musrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 13464, 1, 2, 1, 1, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: musrRowStatus.setStatus('current')
if mibBuilder.loadTexts: musrRowStatus.setDescription("DURABLE: { disable } A simple RowStatus into 'gbnCommonUsrTable'. when 'disable' the user is deleted")
manageUserAuthenType = MibScalar((1, 3, 6, 1, 4, 1, 13464, 1, 2, 1, 1, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("locacl", 1), ("radius", 2), ("radiusFailLocal", 3), ("tacacsplus", 4), ("tacacsplusFailLocal", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: manageUserAuthenType.setStatus('current')
if mibBuilder.loadTexts: manageUserAuthenType.setDescription('Authentication method 1:local, 2:radius, 3:radius first and then local after failed,4:tacacsplus,5:tacacsplus first, and then local after failed.')
manageUserAuthenRadiusName = MibScalar((1, 3, 6, 1, 4, 1, 13464, 1, 2, 1, 1, 5, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: manageUserAuthenRadiusName.setStatus('current')
if mibBuilder.loadTexts: manageUserAuthenRadiusName.setDescription('radius server name.')
manageUserAuthChallegeType = MibScalar((1, 3, 6, 1, 4, 1, 13464, 1, 2, 1, 1, 5, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("chap", 1), ("pap", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: manageUserAuthChallegeType.setStatus('current')
if mibBuilder.loadTexts: manageUserAuthChallegeType.setDescription('Radius authentication method1:CHAP, 2:PAP.')
manageUserTacacsAuthor = MibScalar((1, 3, 6, 1, 4, 1, 13464, 1, 2, 1, 1, 5, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: manageUserTacacsAuthor.setStatus('current')
if mibBuilder.loadTexts: manageUserTacacsAuthor.setDescription('authorization afer authenticastion.')
manageUserTacacsAccount = MibScalar((1, 3, 6, 1, 4, 1, 13464, 1, 2, 1, 1, 5, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: manageUserTacacsAccount.setStatus('current')
if mibBuilder.loadTexts: manageUserTacacsAccount.setDescription('accounting after authorization.')
loadTftpAddress = MibScalar((1, 3, 6, 1, 4, 1, 13464, 1, 2, 1, 1, 6, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: loadTftpAddress.setStatus('current')
if mibBuilder.loadTexts: loadTftpAddress.setDescription('DURABLE: The IP Address for the TFTP server used for downloading and/or uploading files.')
loadTftpFileName = MibScalar((1, 3, 6, 1, 4, 1, 13464, 1, 2, 1, 1, 6, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: loadTftpFileName.setStatus('current')
if mibBuilder.loadTexts: loadTftpFileName.setDescription('DURABLE: The TFTP file path and name.')
loadType = MibScalar((1, 3, 6, 1, 4, 1, 13464, 1, 2, 1, 1, 6, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("application", 1), ("normalBootRom", 2), ("configuration", 3), ("bootCode", 4), ("alarm", 5), ("syslog", 6), ("wholeBootRom", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: loadType.setStatus('current')
if mibBuilder.loadTexts: loadType.setDescription("DURABLE: { application } The type of file to download or upload upon an 'gbnCommonLoadExecute'. application:program file of the switch configuration:configuration file,should be uploaded before you download it. miccode:microcode is the program file of vdsl chip. removed during the boot Flash write operation, the agent cannot be recovered).")
loadExecute = MibScalar((1, 3, 6, 1, 4, 1, 13464, 1, 2, 1, 1, 6, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noop", 1), ("downloadTftp", 2), ("uploadTftp", 3), ("downloadFtp", 4), ("uploadFtp", 5), ("downloadXmodem", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: loadExecute.setStatus('current')
if mibBuilder.loadTexts: loadExecute.setDescription("Execute file download or upload procedure. A SET of this object starts the load procedure. Note that the Application and Boot images can only be downloaded. The NVM Configuration file can be uploaded and downloaded. A GET of this object will return the status of the executed operation. Use 'gbnCommonLoadExecuteStatus' to determine the status of the executed load.")
loadExecuteStatus = MibScalar((1, 3, 6, 1, 4, 1, 13464, 1, 2, 1, 1, 6, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("notStarted", 1), ("inProgressTftp", 2), ("successTftp", 3), ("errorConnectionTftp", 4), ("errorFilenameTftp", 5), ("errorFaultTftp", 6), ("inProgressFtp", 7), ("successFtp", 8), ("errorConnectionFtp", 9), ("errorFilenameFtp", 10), ("errorFaultFtp", 11), ("inProgressXmodem", 12), ("successXmodem", 13), ("errorConnectionXmodem", 14), ("errorFilenameXmodem", 15), ("errorFaultXmodem", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: loadExecuteStatus.setStatus('current')
if mibBuilder.loadTexts: loadExecuteStatus.setDescription('Provides status on the execute file load progress.')
loadFtpAddress = MibScalar((1, 3, 6, 1, 4, 1, 13464, 1, 2, 1, 1, 6, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: loadFtpAddress.setStatus('current')
if mibBuilder.loadTexts: loadFtpAddress.setDescription('DURABLE: The IP Address for the FTP server used for downloading and/or uploading files.')
loadFtpFileName = MibScalar((1, 3, 6, 1, 4, 1, 13464, 1, 2, 1, 1, 6, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: loadFtpFileName.setStatus('current')
if mibBuilder.loadTexts: loadFtpFileName.setDescription('DURABLE: The FTP file path and name.')
loadFtpUserName = MibScalar((1, 3, 6, 1, 4, 1, 13464, 1, 2, 1, 1, 6, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: loadFtpUserName.setStatus('current')
if mibBuilder.loadTexts: loadFtpUserName.setDescription('DURABLE: The FTP user name.')
loadFtpUserPassword = MibScalar((1, 3, 6, 1, 4, 1, 13464, 1, 2, 1, 1, 6, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: loadFtpUserPassword.setStatus('current')
if mibBuilder.loadTexts: loadFtpUserPassword.setDescription('DURABLE: The FTP user password.')
snmpCommunityToViewTable = MibTable((1, 3, 6, 1, 4, 1, 13464, 1, 2, 1, 1, 7, 1), )
if mibBuilder.loadTexts: snmpCommunityToViewTable.setStatus('current')
if mibBuilder.loadTexts: snmpCommunityToViewTable.setDescription('A table of SNMPv1/v2c community string to view name mappings.')
snmpCommunityToViewEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13464, 1, 2, 1, 1, 7, 1, 1), ).setIndexNames((0, "GBNPlatformOAM-MIB", "snmpComm2ViewIndex"))
if mibBuilder.loadTexts: snmpCommunityToViewEntry.setStatus('current')
if mibBuilder.loadTexts: snmpCommunityToViewEntry.setDescription('A list of community-to-view parameters.')
snmpComm2ViewIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13464, 1, 2, 1, 1, 7, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: snmpComm2ViewIndex.setStatus('current')
if mibBuilder.loadTexts: snmpComm2ViewIndex.setDescription("A simple index into 'gbnCommonCommunityToViewTable'.")
snmpComm2ViewCommName = MibTableColumn((1, 3, 6, 1, 4, 1, 13464, 1, 2, 1, 1, 7, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpComm2ViewCommName.setStatus('current')
if mibBuilder.loadTexts: snmpComm2ViewCommName.setDescription("DURABLE: { 'public','':all } The SNMPv1/v2c community name string. Duplicate community names are not allowed in this table. Note that a null string is not a valid community name (i.e., a null string forces 'gbnCommonComm2ViewRowStatus' to 'notReady(3)').")
snmpComm2ViewViewName = MibTableColumn((1, 3, 6, 1, 4, 1, 13464, 1, 2, 1, 1, 7, 1, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpComm2ViewViewName.setStatus('current')
if mibBuilder.loadTexts: snmpComm2ViewViewName.setDescription("DURABLE: { 'internet':all } At runtime (i.e., not when this object is SET), this view name is compared to the 'vacmViewTreeFamilyViewName' in the 'vacmViewTreeFamilyTable' (see RFC2575). If a match is found and the varbind(s) specify valid object type and instance, the 'gbnCommonComm2ViewPermission' privilege is permitted. Note that a null string is not a valid view name value. Also note that the value of this object does not have to match an existing entry in the 'vacmViewTreeFamilyTable' (if no match, no access is allowed). Note that the factory default value for this object is 'internet', which allows access to the subtree under '1.3.6.1'.")
snmpComm2ViewPermission = MibTableColumn((1, 3, 6, 1, 4, 1, 13464, 1, 2, 1, 1, 7, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("readOnly", 1), ("readWrite", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpComm2ViewPermission.setStatus('current')
if mibBuilder.loadTexts: snmpComm2ViewPermission.setDescription("DURABLE: { readWrite:all } This object specifies the type of access allowed. 'readOnly(1)' allows GET operations (i.e., GET, GET-NEXT, GET-BULK) and 'readWrite(2)' allows both GET and SET operations.")
snmpComm2ViewRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 13464, 1, 2, 1, 1, 7, 1, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpComm2ViewRowStatus.setStatus('current')
if mibBuilder.loadTexts: snmpComm2ViewRowStatus.setDescription("DURABLE: This object indicates the status of this entry. A row in this table can be created using the 'createAndGo(4)' (i.e., all parameters must be valid - supplied in a single SNMP PDU or have default values) or the 'createAndWait(5)' action states. Until all parameters are valid for a conceptual row, this object is 'notReady(3)'. All parameters must be valid before this object can be set to 'active(1)'. Any object in a conceptual row can be modified independent of the value of this object (e.g., can be changed while 'active(1)').")
snmpNotifyTypeTable = MibTable((1, 3, 6, 1, 4, 1, 13464, 1, 2, 1, 1, 7, 2), )
if mibBuilder.loadTexts: snmpNotifyTypeTable.setStatus('current')
if mibBuilder.loadTexts: snmpNotifyTypeTable.setDescription('A table of SNMPv1/v2c notify type .')
snmpNotifyTypeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13464, 1, 2, 1, 1, 7, 2, 1), ).setIndexNames((0, "GBNPlatformOAM-MIB", "snmpPrivateNotifyType"))
if mibBuilder.loadTexts: snmpNotifyTypeEntry.setStatus('current')
if mibBuilder.loadTexts: snmpNotifyTypeEntry.setDescription('A list of notify type parameters.')
snmpPrivateNotifyType = MibTableColumn((1, 3, 6, 1, 4, 1, 13464, 1, 2, 1, 1, 7, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpPrivateNotifyType.setStatus('current')
if mibBuilder.loadTexts: snmpPrivateNotifyType.setDescription('notify type.')
snmpNotifyTypeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 13464, 1, 2, 1, 1, 7, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpNotifyTypeStatus.setStatus('current')
if mibBuilder.loadTexts: snmpNotifyTypeStatus.setDescription('It signifies if the traps with corresponding notify-type can be sent.')
gbnPlatformOAMSnmpNotifyType = MibIdentifier((1, 3, 6, 1, 4, 1, 13464, 1, 2, 1, 1, 7, 3))
snmpNotifyTypeSaveConfiguration = NotificationType((1, 3, 6, 1, 4, 1, 13464, 1, 2, 1, 1, 7, 3, 1))
if mibBuilder.loadTexts: snmpNotifyTypeSaveConfiguration.setStatus('current')
if mibBuilder.loadTexts: snmpNotifyTypeSaveConfiguration.setDescription('A private type for traps or informs. It signifies that the SNMPv2 entity have just saved the configuration.')
snmpTrapSource = MibScalar((1, 3, 6, 1, 4, 1, 13464, 1, 2, 1, 1, 7, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapSource.setStatus('current')
if mibBuilder.loadTexts: snmpTrapSource.setDescription('The id of vlan or supervlan which interface traps or informs are sent from belongs to. vlan id: 0-4094; supervlan id: 0-11.')
snmpRemoteEngineTable = MibTable((1, 3, 6, 1, 4, 1, 13464, 1, 2, 1, 1, 7, 5), )
if mibBuilder.loadTexts: snmpRemoteEngineTable.setStatus('current')
if mibBuilder.loadTexts: snmpRemoteEngineTable.setDescription('A table of remote engine .')
snmpRemoteEngineEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13464, 1, 2, 1, 1, 7, 5, 1), ).setIndexNames((0, "GBNPlatformOAM-MIB", "snmpRemoteEngineID"))
if mibBuilder.loadTexts: snmpRemoteEngineEntry.setStatus('current')
if mibBuilder.loadTexts: snmpRemoteEngineEntry.setDescription('A list of remote engine.')
snmpRemoteEngineID = MibTableColumn((1, 3, 6, 1, 4, 1, 13464, 1, 2, 1, 1, 7, 5, 1, 1), DisplayString())
if mibBuilder.loadTexts: snmpRemoteEngineID.setStatus('current')
if mibBuilder.loadTexts: snmpRemoteEngineID.setDescription("The remote engine's id.Note that the engine id can only appear once in the table.")
snmpRemoteHostTAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 13464, 1, 2, 1, 1, 7, 5, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpRemoteHostTAddr.setStatus('current')
if mibBuilder.loadTexts: snmpRemoteHostTAddr.setDescription('The ip and port number of remote host.Note that the value including ip and port number can only appear once in the table.')
snmpDeleteRemoteEngineTableRow = MibTableColumn((1, 3, 6, 1, 4, 1, 13464, 1, 2, 1, 1, 7, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("deleteRow", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpDeleteRemoteEngineTableRow.setStatus('current')
if mibBuilder.loadTexts: snmpDeleteRemoteEngineTableRow.setDescription("You can delete a row by setting the value to 'deleteRow(1)'.")
snmpTrapSourceType = MibScalar((1, 3, 6, 1, 4, 1, 13464, 1, 2, 1, 1, 7, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapSourceType.setStatus('current')
if mibBuilder.loadTexts: snmpTrapSourceType.setDescription('The type of the interface which traps or informs are sent from. 1: vlan interface; 2: supervlan interface.')
portCarTable = MibTable((1, 3, 6, 1, 4, 1, 13464, 1, 2, 1, 1, 10, 1), )
if mibBuilder.loadTexts: portCarTable.setStatus('current')
if mibBuilder.loadTexts: portCarTable.setDescription('A Table of port CAR.')
portCarEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13464, 1, 2, 1, 1, 10, 1, 1), ).setIndexNames((0, "GBNPlatformOAM-MIB", "portCarPort"))
if mibBuilder.loadTexts: portCarEntry.setStatus('current')
if mibBuilder.loadTexts: portCarEntry.setDescription('A list of port CAR.')
portCarPort = MibTableColumn((1, 3, 6, 1, 4, 1, 13464, 1, 2, 1, 1, 10, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: portCarPort.setStatus('current')
if mibBuilder.loadTexts: portCarPort.setDescription('The port number.')
portCarEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 13464, 1, 2, 1, 1, 10, 1, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portCarEnable.setStatus('current')
if mibBuilder.loadTexts: portCarEnable.setDescription('The enable status of the port CAR')
portDiscardBpdu = MibTableColumn((1, 3, 6, 1, 4, 1, 13464, 1, 2, 1, 1, 10, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portDiscardBpdu.setStatus('current')
if mibBuilder.loadTexts: portDiscardBpdu.setDescription('The enable status of the port discard BPDU')
portCarRateBpdu = MibTableColumn((1, 3, 6, 1, 4, 1, 13464, 1, 2, 1, 1, 10, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portCarRateBpdu.setStatus('current')
if mibBuilder.loadTexts: portCarRateBpdu.setDescription('The port CAR max packet receive rate.')
portCarGlobalEnable = MibScalar((1, 3, 6, 1, 4, 1, 13464, 1, 2, 1, 1, 10, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portCarGlobalEnable.setStatus('current')
if mibBuilder.loadTexts: portCarGlobalEnable.setDescription('The global enable status of port CAR.')
portCarOpenTime = MibScalar((1, 3, 6, 1, 4, 1, 13464, 1, 2, 1, 1, 10, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portCarOpenTime.setStatus('current')
if mibBuilder.loadTexts: portCarOpenTime.setDescription('The closed port Re-open time.')
discardBpdu = MibScalar((1, 3, 6, 1, 4, 1, 13464, 1, 2, 1, 1, 10, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: discardBpdu.setStatus('current')
if mibBuilder.loadTexts: discardBpdu.setDescription('The global enable status of port discard BPDU.')
portCarRate = MibScalar((1, 3, 6, 1, 4, 1, 13464, 1, 2, 1, 1, 10, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portCarRate.setStatus('current')
if mibBuilder.loadTexts: portCarRate.setDescription('The port CAR max packet receive rate.')
vctRunTable = MibTable((1, 3, 6, 1, 4, 1, 13464, 1, 2, 1, 1, 13, 1), )
if mibBuilder.loadTexts: vctRunTable.setStatus('current')
if mibBuilder.loadTexts: vctRunTable.setDescription('A Table of VCT run.')
vctRunEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13464, 1, 2, 1, 1, 13, 1, 1), ).setIndexNames((0, "GBNPlatformOAM-MIB", "vctRunPort"))
if mibBuilder.loadTexts: vctRunEntry.setStatus('current')
if mibBuilder.loadTexts: vctRunEntry.setDescription('A list of VCT run.')
vctRunPort = MibTableColumn((1, 3, 6, 1, 4, 1, 13464, 1, 2, 1, 1, 13, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24)))
if mibBuilder.loadTexts: vctRunPort.setStatus('current')
if mibBuilder.loadTexts: vctRunPort.setDescription('The port number.')
vctRunEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 13464, 1, 2, 1, 1, 13, 1, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vctRunEnable.setStatus('current')
if mibBuilder.loadTexts: vctRunEnable.setDescription('The enable status of the VCT run')
vctAutoRunEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 13464, 1, 2, 1, 1, 13, 1, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vctAutoRunEnable.setStatus('current')
if mibBuilder.loadTexts: vctAutoRunEnable.setDescription('The enable status of the VCT auto run')
vctAutoRunGlobalEnable = MibScalar((1, 3, 6, 1, 4, 1, 13464, 1, 2, 1, 1, 13, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vctAutoRunGlobalEnable.setStatus('current')
if mibBuilder.loadTexts: vctAutoRunGlobalEnable.setDescription('The global enable status of VCT auto run.')
vctRunResultTable = MibTable((1, 3, 6, 1, 4, 1, 13464, 1, 2, 1, 1, 14, 1), )
if mibBuilder.loadTexts: vctRunResultTable.setStatus('current')
if mibBuilder.loadTexts: vctRunResultTable.setDescription('A Table of VCT run result.')
vctRunResultEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13464, 1, 2, 1, 1, 14, 1, 1), ).setIndexNames((0, "GBNPlatformOAM-MIB", "vctRunResultPort"), (0, "GBNPlatformOAM-MIB", "vctRunResultTxRxPairNo"))
if mibBuilder.loadTexts: vctRunResultEntry.setStatus('current')
if mibBuilder.loadTexts: vctRunResultEntry.setDescription('A list of VCT run result.')
vctRunResultPort = MibTableColumn((1, 3, 6, 1, 4, 1, 13464, 1, 2, 1, 1, 14, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24)))
if mibBuilder.loadTexts: vctRunResultPort.setStatus('current')
if mibBuilder.loadTexts: vctRunResultPort.setDescription('The port number.')
vctRunResultTxRxPairNo = MibTableColumn((1, 3, 6, 1, 4, 1, 13464, 1, 2, 1, 1, 14, 1, 1, 2), VctRunResultTxRxPairNoType())
if mibBuilder.loadTexts: vctRunResultTxRxPairNo.setStatus('current')
if mibBuilder.loadTexts: vctRunResultTxRxPairNo.setDescription('The tx rx pair NO.')
vctRunResultStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 13464, 1, 2, 1, 1, 14, 1, 1, 3), VctRunResultStatusType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vctRunResultStatus.setStatus('current')
if mibBuilder.loadTexts: vctRunResultStatus.setDescription('The status of the VCT run result')
vctRunResultErrorLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 13464, 1, 2, 1, 1, 14, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vctRunResultErrorLocation.setStatus('current')
if mibBuilder.loadTexts: vctRunResultErrorLocation.setDescription('The error location of the VCT run result')
mibBuilder.exportSymbols("GBNPlatformOAM-MIB", snmpDeleteRemoteEngineTableRow=snmpDeleteRemoteEngineTableRow, vctRunPort=vctRunPort, cpuBusyStatus=cpuBusyStatus, musrType=musrType, snmpComm2ViewIndex=snmpComm2ViewIndex, sysIfManageVLANEntry=sysIfManageVLANEntry, musrRowStatus=musrRowStatus, gbnPlatformOAMSntpClient=gbnPlatformOAMSntpClient, discardBpdu=discardBpdu, musrPassword=musrPassword, systemClock=systemClock, cpuUnbusyTrap=cpuUnbusyTrap, snmpNotifyTypeSaveConfiguration=snmpNotifyTypeSaveConfiguration, snmpRemoteEngineTable=snmpRemoteEngineTable, portCarGlobalEnable=portCarGlobalEnable, offsetNegFlag=offsetNegFlag, snmpPrivateNotifyType=snmpPrivateNotifyType, snmpRemoteEngineEntry=snmpRemoteEngineEntry, snmpNotifyTypeTable=snmpNotifyTypeTable, portCarOpenTime=portCarOpenTime, gbnPlatformOAMSyslog=gbnPlatformOAMSyslog, cpuBusyTrap=cpuBusyTrap, snmpCommunityToViewEntry=snmpCommunityToViewEntry, cpuUnbusyThreshold=cpuUnbusyThreshold, softwareVersion=softwareVersion, cpuStatusTrap=cpuStatusTrap, writeNMInterfaceConifigStatus=writeNMInterfaceConifigStatus, systemReset=systemReset, gbnPlatformOAMSnmp=gbnPlatformOAMSnmp, PYSNMP_MODULE_ID=gbnPlatformOAM, writeNMInterfaceConifig=writeNMInterfaceConifig, musrName=musrName, VctRunResultTxRxPairNoType=VctRunResultTxRxPairNoType, gbnPlatformOAMMuser=gbnPlatformOAMMuser, musrIndex=musrIndex, gbnPlatformOAMPortCar=gbnPlatformOAMPortCar, controlStatus=controlStatus, manageUserAuthenRadiusName=manageUserAuthenRadiusName, snmpComm2ViewViewName=snmpComm2ViewViewName, gbnPlatformOAMVctRunResult=gbnPlatformOAMVctRunResult, loadExecute=loadExecute, snmpRemoteEngineID=snmpRemoteEngineID, vctRunResultErrorLocation=vctRunResultErrorLocation, vctRunResultEntry=vctRunResultEntry, clockTime=clockTime, flashDescription=flashDescription, sysIfIpAddress=sysIfIpAddress, gbnPlatformOAMSsh=gbnPlatformOAMSsh, hardwareVersion=hardwareVersion, gbnPlatformOAMWatchDog=gbnPlatformOAMWatchDog, sysIfDHCPOnOff=sysIfDHCPOnOff, writeConfig=writeConfig, snmpCommunityToViewTable=snmpCommunityToViewTable, loadExecuteStatus=loadExecuteStatus, prodSerialNo=prodSerialNo, vctAutoRunEnable=vctAutoRunEnable, portCarEntry=portCarEntry, portCarRate=portCarRate, softwareCompiledTimeC=softwareCompiledTimeC, cpuIdle=cpuIdle, vctRunResultTable=vctRunResultTable, gbnPlatformOAMMailalarm=gbnPlatformOAMMailalarm, loadFtpFileName=loadFtpFileName, softwarePlate=softwarePlate, vctRunResultPort=vctRunResultPort, vctRunEnable=vctRunEnable, timeZoneOffset=timeZoneOffset, snmpNotifyTypeStatus=snmpNotifyTypeStatus, portDiscardBpdu=portDiscardBpdu, softwareCompiledTimeE=softwareCompiledTimeE, manageUserTacacsAccount=manageUserTacacsAccount, productName=productName, nmInterfaceId=nmInterfaceId, musrEntry=musrEntry, vctRunTable=vctRunTable, snmpRemoteHostTAddr=snmpRemoteHostTAddr, saveNMInterfaceConfig=saveNMInterfaceConfig, sysIfManageVLANVid=sysIfManageVLANVid, nmInterfaceIpAddress=nmInterfaceIpAddress, gbnPlatformOAMIpAccessControl=gbnPlatformOAMIpAccessControl, loadFtpAddress=loadFtpAddress, loadFtpUserName=loadFtpUserName, sysIfIPStatus=sysIfIPStatus, gbnPlatformOAMSystem=gbnPlatformOAMSystem, nmInterfaceNetMask=nmInterfaceNetMask, snmpComm2ViewCommName=snmpComm2ViewCommName, loadFtpUserPassword=loadFtpUserPassword, controlIpMask=controlIpMask, memorySize=memorySize, controlTeminal=controlTeminal, vctRunResultTxRxPairNo=vctRunResultTxRxPairNo, VctRunResultStatusType=VctRunResultStatusType, gbnPlatformOAMSysIf=gbnPlatformOAMSysIf, portCarRateBpdu=portCarRateBpdu, sysIfManageVLANRowStatus=sysIfManageVLANRowStatus, musrTable=musrTable, gbnPlatformOAM=gbnPlatformOAM, controlIpAddress=controlIpAddress, gbnPlatformOAMUpDownLoad=gbnPlatformOAMUpDownLoad, portCarPort=portCarPort, gbnPlatformOAMSnmpNotifyType=gbnPlatformOAMSnmpNotifyType, manageUserAuthenType=manageUserAuthenType, loadType=loadType, nmInterfaceGateAddress=nmInterfaceGateAddress, sysIfMACAddr=sysIfMACAddr, sysIfIPNetMask=sysIfIPNetMask, sysIfIPGateAddress=sysIfIPGateAddress, timeZoneName=timeZoneName, manageUserTacacsAuthor=manageUserTacacsAuthor, loadTftpAddress=loadTftpAddress, hostName=hostName, ipAccessControlTable=ipAccessControlTable, memoryIdle=memoryIdle, softDogProxy=softDogProxy, gbnPlatformOAMVctRun=gbnPlatformOAMVctRun, loadTftpFileName=loadTftpFileName, bootromVersion=bootromVersion, ipAccessControlEntry=ipAccessControlEntry, snmpComm2ViewPermission=snmpComm2ViewPermission, snmpComm2ViewRowStatus=snmpComm2ViewRowStatus, cpuBusyThreshold=cpuBusyThreshold, portCarTable=portCarTable, sdramDescription=sdramDescription, manageUserAuthChallegeType=manageUserAuthChallegeType, sysIfBOOTPOnOff=sysIfBOOTPOnOff, vctRunResultStatus=vctRunResultStatus, sysIfManageVLANTbale=sysIfManageVLANTbale, portCarEnable=portCarEnable, snmpTrapSourceType=snmpTrapSourceType, cpuBusyAlarmEnable=cpuBusyAlarmEnable, snmpNotifyTypeEntry=snmpNotifyTypeEntry, vctRunEntry=vctRunEntry, vctAutoRunGlobalEnable=vctAutoRunGlobalEnable, snmpTrapSource=snmpTrapSource, cpuDescription=cpuDescription)
