#
# PySNMP MIB module AP553LIU-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/AP553LIU-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:22:59 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint")
liuGroup, = mibBuilder.importSymbols("INNOVX-CORE-MIB", "liuGroup")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter64, TimeTicks, Unsigned32, ModuleIdentity, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, Integer32, Bits, NotificationType, Counter32, Gauge32, iso, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "TimeTicks", "Unsigned32", "ModuleIdentity", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "Integer32", "Bits", "NotificationType", "Counter32", "Gauge32", "iso", "IpAddress")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
liuAdmin = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 22, 1, 3, 1))
liuCsuNetCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 22, 1, 3, 2))
liuDsuCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 22, 1, 3, 3))
liuNetAlarmCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 22, 1, 3, 4))
liuDiagnostics = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 22, 1, 3, 5))
liuStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 22, 1, 3, 6))
liuCurrentStats = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 22, 1, 3, 7))
liuTotalStats = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 22, 1, 3, 8))
liuHistoryStats = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 22, 1, 3, 9))
ap553MIBversion = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(5, 5)).setFixedLength(5)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ap553MIBversion.setStatus('mandatory')
if mibBuilder.loadTexts: ap553MIBversion.setDescription("Identifies the version of the MIB as `X.YZT' where: X: Major Revision (1-9) Y: Minor Revision (0-9) Z: Typographical Revision (0-9) T: Test Revision (A-Z) Upon formal release, the test revision will not be present.")
ap553NetSetFrameType = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 3, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("esf", 1), ("d4", 2), ("auto", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ap553NetSetFrameType.setStatus('mandatory')
if mibBuilder.loadTexts: ap553NetSetFrameType.setDescription("Defines the line interface framing type as follows: `esf' sets extended superframe format, `d4' sets D4 framing format, `auto' instructs the unit to determine framing WEBFLAG ESF D4 Automatic WEBEND")
ap553NetOperFrameType = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 3, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("esf", 1), ("d4", 2), ("auto", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ap553NetOperFrameType.setStatus('mandatory')
if mibBuilder.loadTexts: ap553NetOperFrameType.setDescription("Identifies the line interface framing type acquired by the unit as defined by the `ap553NetSetFrameType' object as follows: `esf' indicates extended superframe format, `d4' indicates D4 framing format, `auto' indicates the unit is still `acquiring', frame type is indeterminate at this time. WEBFLAG ESF D4 Automatic WEBEND")
ap553NetEsfMode = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 3, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ansi-T1-403", 1), ("tr-54016", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ap553NetEsfMode.setStatus('mandatory')
if mibBuilder.loadTexts: ap553NetEsfMode.setDescription("Defines the use of the Facilities Data Link as follows: `ansi_T1_403' defines the FDL exchange per ANSI specification, `tr-54016' defines the FDL exchange as ESF. Selections of `ansi_T1_403' and `tr-54016' are only valid when ap553NetOperFrameType is `esf'. WEBFLAG ANSI T1.403 TR-54016 WEBEND")
ap553NetLineCoding = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 3, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("b8zs", 1), ("ami", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ap553NetLineCoding.setStatus('mandatory')
if mibBuilder.loadTexts: ap553NetLineCoding.setDescription("Defines the Zero Code Suppression mechanism for the interface. `b8zs' defines the use of a specified pattern of normal bits and bipolar violations used to replace a sequence of eight zero bits. `ami' (alternate mark inversion) defines a mode wherein no zero code suppression is provided. Therefore ami line encoding does not protect against inadequate ones density. The DSU will enforce an 8x(N+1) minimum ones density requirement when ap553NetLineCoding == `ami' and ap553DS0Fmt == `nx64k' and ap553DS0AllocationScheme == `consecutive'. WEBFLAG B8ZS AMI WEBEND")
ap553NetIntfType = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 3, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("ds1-auto-lbo", 1), ("ds1-zero-dB", 2), ("ds1-neg7pt5-dB", 3), ("ds1-neg15pt0-dB", 4), ("ds1-neg22pt5-dB", 5), ("dsx1-preeq133-ft", 6), ("dsx1-preeq266-ft", 7), ("dsx1-preeq399-ft", 8), ("dsx1-preeq533-ft", 9), ("dsx1-preeq655-ft", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ap553NetIntfType.setStatus('mandatory')
if mibBuilder.loadTexts: ap553NetIntfType.setDescription("Defines the operating mode of the interface, and the attenuation or gain. The following values specify operation as a standard DS1 interface, with the specified attenuation: `ds1-auto-lbo' allows the unit to determine the interface buildout value. `ds1-zero-dB' sets the transmit buildout to 0.0 dB. `ds1-neg7pt5-dB' sets the transmit buildout to -7.5dB. `ds1-neg15pt0-dB' sets the transmit buildout to -15.0dB. `ds1-neg22pt5-dB' sets the transmit buildout to -22.5dB. The following values specify operation as a standard cross-connect DSX-1 interface, with the specified transmitter gain: `dsx1-preeq133_ft' -- transmitter gain for 0 < 133 feet `dsx1-preeq266_ft' -- transmitter gain for 133 < 266 feet `dsx1-preeq399_ft' -- transmitter gain for 266 < 399 feet `dsx1-preeq533_ft' -- transmitter gain for 399 < 533 feet `dsx1-preeq655_ft' -- transmitter gain for 533 < 655 feet WEBFLAG DS1 Auto Line Buildout DS1 0.0dB Line Buildout DS1 -7.5dB Line Buildout DS1 -15.0dB Line Buildout DS1 -22.5dB Line Buildout DSX1 0 - 133 ft Pre-equalization DSX1 133 - 266 ft Pre-equalization DSX1 266 - 399 ft Pre-equalization DSX1 399 - 533 ft Pre-equalization DSX1 533 - 655 ft Pre-equalization WEBEND")
ap553NetDS1IntfRcvLevel = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 3, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noSignal", 1), ("pos2toNeg7pt5-dB", 2), ("neg7pt5toNeg15-dB", 3), ("neg15toNeg22pt5-dB", 4), ("lessThanNeg22pt5-dB", 5), ("invalidDSX1intf", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ap553NetDS1IntfRcvLevel.setStatus('mandatory')
if mibBuilder.loadTexts: ap553NetDS1IntfRcvLevel.setDescription("Identifies the Network Interface Receive level for a DS1 type interface. `noSignal' indicates that no T1 signal is detected on the interface, (the `NS' LED on the unit's front panel will be on. `pos2toNeg7pt5-dB'=> + 2.0dB to - 7.5dB DS1 interface receive level `neg7pt5toNeg15-dB'=> - 7.5dB to -15.0dB DS1 interface receive level `neg15toNeg22pt5-dB'=> -15.0dB to -22.5dB DS1 interface receive level `lessThanNeg22pt5-dB'=> less than -22.5dB DS1 interface receive level `invalidDSX1intf=> invalid object, interface type is DSX1 WEBFLAG no signal + 2.0dB to - 7.5dB - 7.5dB to -15.0dB -15.0dB to -22.5dB less than -22.5dB invalid dsx selected WEBEND")
ap553DS0AllocationScheme = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 3, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("consecutive", 1), ("alternate", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ap553DS0AllocationScheme.setStatus('mandatory')
if mibBuilder.loadTexts: ap553DS0AllocationScheme.setDescription("Defines the DSU DS0 allocation scheme. `consecutive' specifies DSU data passed in contiguous DS0 cell assignments as specified by the ap553StartingDS0 and ap553NumDS0s objects. `alternate' specifies DSU data passed in every other DS0 cell, with each data cell a corresponding adjacent cell is forced to marks (ones), this scheme ensures that a minimum ones density requirement is met to maintain frame synchronization. This scheme provides a maximum throughput of 12x56K or 12x64K, as specified by the ap552DS0Format and ap553NumDS0s objects. The DSU will enforce an 8x(N+1) minimum ones density requirement when ap553NetLineCoding == `ami' and ap553DS0Fmt == `nx64k' and ap553DS0AllocationScheme == `consecutive'. WEBFLAG Consecutive Alternate WEBEND")
ap553DS0Fmt = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 3, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nx56k", 1), ("nx64k", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ap553DS0Fmt.setStatus('mandatory')
if mibBuilder.loadTexts: ap553DS0Fmt.setDescription("Defines the DS0 base rate as either 56K or 64K bits per second. This object value, in conjunction with the ap553NumDS0s object value determines the LIU aggregate bandwidth. `nx64k' defines a DS0 data format as clear channel in which all 8 bits of the DS0 are used for data. `nx56k defines a DS0 data format as 7 bits for data, and 1 bit used for signalling information or unused and forced to marks. The DSU will enforce an 8x(N+1) minimum ones density requirement when ap553NetLineCoding == `ami' and ap553DS0Fmt == `nx64k' and ap553DS0AllocationScheme == `consecutive'. WEBFLAG N x 56K N x 64K WEBEND")
ap553StartingDS0 = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 3, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ap553StartingDS0.setStatus('mandatory')
if mibBuilder.loadTexts: ap553StartingDS0.setDescription('Defines the starting DS0 number for the bundle of DS0s used for the LIU aggregate bandwidth. Values of 1-24 are valid when ap553DS0AllocationScheme is consecutive. Values of 1-23 are valid when ap553DS0AllocationScheme is alternate.')
ap553NumDS0s = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 3, 3, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ap553NumDS0s.setStatus('mandatory')
if mibBuilder.loadTexts: ap553NumDS0s.setDescription('Defines the number of DS0 cells used for passing DSU data. When ap553DS0AllocationScheme is consecutive, valid values are 1 - N where N <= (25 - ap553StartingDS0). When ap553DS0AllocationScheme is alternate, valid values are 1 - N where N <= (25 - ap553StartingDS0)/2.')
ap553LIUAggregateRate = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 3, 3, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(11, 11)).setFixedLength(11)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ap553LIUAggregateRate.setStatus('mandatory')
if mibBuilder.loadTexts: ap553LIUAggregateRate.setDescription("Displays the current aggregate LIU data rate as: ` aggRate Kbps ' with values ranging from ` 56 Kbps ' to ` 1536 Kbps ', where aggregate rate is calculated as follows: aggRate = ap553NumDS0s * (ap553DS0Fmt == `nx56k') ? 56 : 64;")
ap553SystemStatus = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 3, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ap553SystemStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ap553SystemStatus.setDescription('The System Status option. When enabled, allows the DSU to clamp DSR upon receiving the following Network codes: 1. Out of Service Code (OOS) 2. Abnormal Station Code (ASC) 3. No Signal(not a network code) 4. other inactive channel codes (ICC) WEBFLAG Disable Enable WEBEND')
ap553CircuitAssurance = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 3, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ap553CircuitAssurance.setStatus('mandatory')
if mibBuilder.loadTexts: ap553CircuitAssurance.setDescription('The Circuit Assurance option. When enabled, allows the DSU to clamp CTS upon receiving the following Network codes: 1. IDLE(no DCD) 2. Out of Service Code (OOS) 3. Abnormal Station Code (ASC) 4. No Signal(not a network code) 5. other inactive channel codes (ICC) WEBFLAG Disable Enable WEBEND')
ap553InbandLoop = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 3, 3, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("inhibit", 1), ("payloadloop", 2), ("lineloop", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ap553InbandLoop.setStatus('mandatory')
if mibBuilder.loadTexts: ap553InbandLoop.setDescription('The Inband Loop Control option. Defines the DSU response to Inband Line Loopback codes as follows: inhibit - the DSU does not respond to in-band T1 loop codes payloadloop - the DSU starts or stops a payload loop test lineloop - the DSU starts or stops a line loop test WEBFLAG Inhibit Start/Stop Payload Loop Start/Stop Line Loop WEBEND')
ap553NetBpvTrapSeverity = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 3, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("inhibit", 1), ("critical", 2), ("major", 3), ("minor", 4), ("warning", 5), ("info", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ap553NetBpvTrapSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: ap553NetBpvTrapSeverity.setDescription('Controls the reporting and defines the severity of the Network Bipolar Violations Alarm when this event occurs and meets the window & threshold requirements for reporting as specified by the associated window and threshold object values below. WEBFLAG Inhibit Critical Major Minor Warning Info WEBEND')
ap553NetBpvWindow = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 3, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("oneMinute", 1), ("fifteenMinutes", 2), ("oneHour", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ap553NetBpvWindow.setStatus('mandatory')
if mibBuilder.loadTexts: ap553NetBpvWindow.setDescription("Specifies the sampling window in which to report the Network Bipolar Violations alarm condition as active. All other values specify the size of the sampling window in which the event may be reported one time as active, as controlled by the associated mask object value, when the associated obj's threshold condition is met. WEBFLAG One Minute Fifteen Minutes One Hour WEBEND")
ap553NetBpvThresh = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 3, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("thr1", 1), ("thr10", 2), ("thr100", 3), ("thr1000", 4), ("thr10000", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ap553NetBpvThresh.setStatus('mandatory')
if mibBuilder.loadTexts: ap553NetBpvThresh.setDescription('Specifies the threshold of events to be exceeded for reporting the Network Bipolar Violations alarm condition. WEBFLAG 1 10 100 1,000 10,000 WEBEND')
ap553NetCrcTrapSeverity = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 3, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("inhibit", 1), ("critical", 2), ("major", 3), ("minor", 4), ("warning", 5), ("info", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ap553NetCrcTrapSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: ap553NetCrcTrapSeverity.setDescription('Controls the reporting and defines the severity of the Network Cyclical Redundancy Check Alarm when this event occurs and meets the window and threshold requirements for reporting as specified by the associated window and threshold object values below. WEBFLAG Inhibit Critical Major Minor Warning Info WEBEND')
ap553NetCrcWindow = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 3, 4, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("oneMinute", 1), ("fifteenMinutes", 2), ("oneHour", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ap553NetCrcWindow.setStatus('mandatory')
if mibBuilder.loadTexts: ap553NetCrcWindow.setDescription("Specifies the sampling window in which to report the Network Cyclical Redundancy Check alarm condition as active. All other values specify the size of the sampling window in which the event may be reported one time as active, as controlled by the associated mask object value, when the associated obj's threshold condition is met. WEBFLAG One Minute Fifteen Minutes One Hour WEBEND")
ap553NetCrcThresh = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 3, 4, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("thr1", 1), ("thr10", 2), ("thr100", 3), ("thr1000", 4), ("thr10000", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ap553NetCrcThresh.setStatus('mandatory')
if mibBuilder.loadTexts: ap553NetCrcThresh.setDescription('Specifies the threshold of events to be exceeded for reporting the Network Cyclical Redundancy Check alarm condition. WEBFLAG 1 10 100 1,000 10,000 WEBEND')
ap553NetLadTrapSeverity = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 3, 4, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("inhibit", 1), ("critical", 2), ("major", 3), ("minor", 4), ("warning", 5), ("info", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ap553NetLadTrapSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: ap553NetLadTrapSeverity.setDescription('Controls the reporting and defines the severity of the Network Low Average Density Alarm when this event occurs and meets the window and threshold requirements for reporting as specified by the associated window and threshold object values below. WEBFLAG Inhibit Critical Major Minor Warning Info WEBEND')
ap553NetLadWindow = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 3, 4, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("oneMinute", 1), ("fifteenMinutes", 2), ("oneHour", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ap553NetLadWindow.setStatus('mandatory')
if mibBuilder.loadTexts: ap553NetLadWindow.setDescription("Specifies the sampling window in which to report the Network Low Average Density alarm condition as active. All other values specify the size of the sampling window in which the event may be reported one time as active, as controlled by the associated mask object value, when the associated obj's threshold condition is met. WEBFLAG One Minute Fifteen Minutes One Hour WEBEND")
ap553NetLadThresh = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 3, 4, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("thr1", 1), ("thr10", 2), ("thr100", 3), ("thr1000", 4), ("thr10000", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ap553NetLadThresh.setStatus('mandatory')
if mibBuilder.loadTexts: ap553NetLadThresh.setDescription('Specifies the threshold of events to be exceeded for reporting the Network Low Average Density alarm condition. WEBFLAG 1 10 100 1,000 10,000 WEBEND')
ap553NetAisTrapSeverity = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 3, 4, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("inhibit", 1), ("critical", 2), ("major", 3), ("minor", 4), ("warning", 5), ("info", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ap553NetAisTrapSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: ap553NetAisTrapSeverity.setDescription('Controls the reporting and defines the severity of the Network Alarm Indication Signal Alarm when this event occurs. WEBFLAG Inhibit Critical Major Minor Warning Info WEBEND')
ap553NetLosTrapSeverity = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 3, 4, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("inhibit", 1), ("critical", 2), ("major", 3), ("minor", 4), ("warning", 5), ("info", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ap553NetLosTrapSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: ap553NetLosTrapSeverity.setDescription('Controls the reporting and defines the severity of the Network Loss of Signal Alarm when this event occurs. WEBFLAG Inhibit Critical Major Minor Warning Info WEBEND')
ap553NetOofTrapSeverity = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 3, 4, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("inhibit", 1), ("critical", 2), ("major", 3), ("minor", 4), ("warning", 5), ("info", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ap553NetOofTrapSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: ap553NetOofTrapSeverity.setDescription('Controls the reporting and defines the severity of the Network Out of Frame Alarm when this event occurs. WEBFLAG Inhibit Critical Major Minor Warning Info WEBEND')
ap553NetRcdYelTrapSeverity = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 3, 4, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("inhibit", 1), ("critical", 2), ("major", 3), ("minor", 4), ("warning", 5), ("info", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ap553NetRcdYelTrapSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: ap553NetRcdYelTrapSeverity.setDescription('Controls the reporting and defines the severity of the Network Received Yellow Alarm when this event occurs. WEBFLAG Inhibit Critical Major Minor Warning Info WEBEND')
ap553NetUssTrapSeverity = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 3, 4, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("inhibit", 1), ("critical", 2), ("major", 3), ("minor", 4), ("warning", 5), ("info", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ap553NetUssTrapSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: ap553NetUssTrapSeverity.setDescription('Controls the reporting and defines the severity of the Network Unavailable Signal State Alarm when this event occurs. WEBFLAG Inhibit Critical Major Minor Warning Info WEBEND')
ap553DiagT1Test = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 3, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("t1LineLoopback", 1), ("t1PayLoadLoopback", 2), ("t1StopTest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ap553DiagT1Test.setStatus('mandatory')
if mibBuilder.loadTexts: ap553DiagT1Test.setDescription('Specifies the test to be executed, or stops the current test.')
ap553DiagTestDuration = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 3, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("testTime1Min", 1), ("testTime5Mins", 2), ("testTime10Mins", 3), ("testTime20Mins", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ap553DiagTestDuration.setStatus('mandatory')
if mibBuilder.loadTexts: ap553DiagTestDuration.setDescription('Defines the length of all LIU diagnostic tests.')
ap553DiagTestStatus = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 3, 5, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("statT1LineLoopback", 1), ("statT1PayLoadLoopback", 2), ("statNoTestinProgress", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ap553DiagTestStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ap553DiagTestStatus.setDescription('Displays the test in progress, if any.')
ap553LedStatus = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 3, 6, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ap553LedStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ap553LedStatus.setDescription('A bitwise snapshot of the front panel LED states, where 0 = LED off and 1 = LED on, as follows: LED description Octet 1 bit 7 - n/u bit 6 - n/u bit 5 - n/u bit 4 - DCE LMI LMI traffic on DCE bit 3 - SD NTWK send data - network traffic bit 2 - RD NTWK receive data - network traffic bit 1 - NS No Signal on T1 interface bit 0 - OOF Out of Frame condition on T1 Interface')
ap553PortStatus = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 3, 6, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ap553PortStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ap553PortStatus.setDescription('A bitwise snapshot of interface port status conditions and EIA signals, where 0 = condition not present, and 1 = condition present, as follows: Octet 1 - NETWORK Interface Port Status bit 7 - n/u bit 6 - n/u bit 5 - n/u bit 4 - n/u bit 3 - Alarm Indication Signal bit 2 - Out Of Frame Alarm bit 1 - Loss Of Signal Alarm bit 0 - Remote Alarm')
ap553PortFrameCounts = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 3, 6, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ap553PortFrameCounts.setStatus('mandatory')
if mibBuilder.loadTexts: ap553PortFrameCounts.setDescription('The total number of frames transmitted and received on each interface port. This object will be reset to zero after a read, and after power up, soft reset, or factory defaults reset. Octet 1 - NETWORK Interface Transmit Frame Count Octet 2 bit 7 - 2^15 bit 7 - 2^7 bit 6 - 2^14 bit 6 - 2^6 bit 5 - 2^13 bit 5 - 2^5 bit 4 - 2^12 bit 4 - 2^4 bit 3 - 2^11 bit 3 - 2^3 bit 2 - 2^10 bit 2 - 2^2 bit 1 - 2^9 bit 1 - 2^1 bit 0 - 2^8 bit 0 - 2^0 Octet 3 - NETWORK Interface Receive Frame Count Octet 4 bit 7 - 2^15 bit 7 - 2^7 bit 6 - 2^14 bit 6 - 2^6 bit 5 - 2^13 bit 5 - 2^5 bit 4 - 2^12 bit 4 - 2^4 bit 3 - 2^11 bit 3 - 2^3 bit 2 - 2^10 bit 2 - 2^2 bit 1 - 2^9 bit 1 - 2^1 bit 0 - 2^8 bit 0 - 2^0')
ap553CurrentIntervalCompletion = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 3, 7, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ap553CurrentIntervalCompletion.setStatus('mandatory')
if mibBuilder.loadTexts: ap553CurrentIntervalCompletion.setDescription('The elapsed time into the current interval expressed as a percent of completion from 0 to 100%. When the current Line Stats interval is complete (15 minutes), the collected data is moved into the first historical interval (#1), and collection begins again in this object. This object will be reset to zero after a read, and after power up, soft reset, or factory defaults reset.')
ap553CurrentErroredSeconds = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 3, 7, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ap553CurrentErroredSeconds.setStatus('mandatory')
if mibBuilder.loadTexts: ap553CurrentErroredSeconds.setDescription('The Line statistics for the current 15 minute interval, also specifies the percent completion of this interval. When the current Line Stats interval time is complete (15 minutes), this data is moved into the first historical interval (#1), and collection begins again in this object. This object will be reset to zero after a read, and after power up, soft reset, or factory defaults reset.')
ap553CurrentSeverelyErroredSeconds = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 3, 7, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ap553CurrentSeverelyErroredSeconds.setStatus('mandatory')
if mibBuilder.loadTexts: ap553CurrentSeverelyErroredSeconds.setDescription('The Line statistics for the current 15 minute interval, also specifies the percent completion of this interval. When the current Line Stats interval time is complete (15 minutes), this data is moved into the first historical interval (#1), and collection begins again in this object. This object will be reset to zero after a read, and after power up, soft reset, or factory defaults reset.')
ap553CurrentBurstyErroredSeconds = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 3, 7, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ap553CurrentBurstyErroredSeconds.setStatus('mandatory')
if mibBuilder.loadTexts: ap553CurrentBurstyErroredSeconds.setDescription('The Line statistics for the current 15 minute interval, also specifies the percent completion of this interval. When the current Line Stats interval time is complete (15 minutes), this data is moved into the first historical interval (#1), and collection begins again in this object. This object will be reset to zero after a read, and after power up, soft reset, or factory defaults reset. For a E1 product this statistic is Frame Alignment Signal Errors')
ap553CurrentCrcErrors = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 3, 7, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ap553CurrentCrcErrors.setStatus('mandatory')
if mibBuilder.loadTexts: ap553CurrentCrcErrors.setDescription('The Line statistics for the current 15 minute interval, also specifies the percent completion of this interval. When the current Line Stats interval time is complete (15 minutes), this data is moved into the first historical interval (#1), and collection begins again in this object. This object will be reset to zero after a read, and after power up, soft reset, or factory defaults reset. For a E1 product this statistic is CRC4')
ap553CurrentUnavailableSeconds = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 3, 7, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ap553CurrentUnavailableSeconds.setStatus('mandatory')
if mibBuilder.loadTexts: ap553CurrentUnavailableSeconds.setDescription('The Line statistics for the current 15 minute interval, also specifies the percent completion of this interval. When the current Line Stats interval time is complete (15 minutes), this data is moved into the first historical interval (#1), and collection begins again in this object. This object will be reset to zero after a read, and after power up, soft reset, or factory defaults reset.')
ap553CurrentLossOfFrameErrors = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 3, 7, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ap553CurrentLossOfFrameErrors.setStatus('mandatory')
if mibBuilder.loadTexts: ap553CurrentLossOfFrameErrors.setDescription('The Line statistics for the current 15 minute interval, also specifies the percent completion of this interval. When the current Line Stats interval time is complete (15 minutes), this data is moved into the first historical interval (#1), and collection begins again in this object. This object will be reset to zero after a read, and after power up, soft reset, or factory defaults reset. For a E1 product this statistic is Far End Block Errors')
ap553CurrentBipolarViolationsErrors = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 3, 7, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ap553CurrentBipolarViolationsErrors.setStatus('mandatory')
if mibBuilder.loadTexts: ap553CurrentBipolarViolationsErrors.setDescription('The Line statistics for the current 15 minute interval, also specifies the percent completion of this interval. When the current Line Stats interval time is complete (15 minutes), this data is moved into the first historical interval (#1), and collection begins again in this object. This object will be reset to zero after a read, and after power up, soft reset, or factory defaults reset. For a E1 product this statistic is LCV')
ap553CurrentLossOfSignalErrors = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 3, 7, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ap553CurrentLossOfSignalErrors.setStatus('mandatory')
if mibBuilder.loadTexts: ap553CurrentLossOfSignalErrors.setDescription('The Line statistics for the current 15 minute interval, also specifies the percent completion of this interval. When the current Line Stats interval time is complete (15 minutes), this data is moved into the first historical interval (#1), and collection begins again in this object. This object will be reset to zero after a read, and after power up, soft reset, or factory defaults reset. For a E1 product this statistic is not used')
ap553TotalErroredSeconds = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 3, 8, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ap553TotalErroredSeconds.setStatus('mandatory')
if mibBuilder.loadTexts: ap553TotalErroredSeconds.setDescription('The line statistics totals of the valid Line Statistics Interval objects as specified by the ap553ValidHistoryIntervals object value. This object will be reset to zero after a read, and after power up, soft reset, or factory defaults reset.')
ap553TotalSeverelyErroredSeconds = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 3, 8, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ap553TotalSeverelyErroredSeconds.setStatus('mandatory')
if mibBuilder.loadTexts: ap553TotalSeverelyErroredSeconds.setDescription('The line statistics totals of the valid Line Statistics Interval objects as specified by the ap553ValidHistoryIntervals object value. This object will be reset to zero after a read, and after power up, soft reset, or factory defaults reset.')
ap553TotalBurstyErroredSeconds = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 3, 8, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ap553TotalBurstyErroredSeconds.setStatus('mandatory')
if mibBuilder.loadTexts: ap553TotalBurstyErroredSeconds.setDescription('The line statistics totals of the valid Line Statistics Interval objects as specified by the ap553ValidHistoryIntervals object value. This object will be reset to zero after a read, and after power up, soft reset, or factory defaults reset. For a E1 product this statistic is Frame Alignment Signal Errors.')
ap553TotalCrcErrors = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 3, 8, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ap553TotalCrcErrors.setStatus('mandatory')
if mibBuilder.loadTexts: ap553TotalCrcErrors.setDescription('The line statistics totals of the valid Line Statistics Interval objects as specified by the ap553ValidHistoryIntervals object value. This object will be reset to zero after a read, and after power up, soft reset, or factory defaults reset. For a E1 product this statistic is CRC4')
ap553TotalUnavailableSeconds = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 3, 8, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ap553TotalUnavailableSeconds.setStatus('mandatory')
if mibBuilder.loadTexts: ap553TotalUnavailableSeconds.setDescription('The line statistics totals of the valid Line Statistics Interval objects as specified by the ap553ValidHistoryIntervals object value. This object will be reset to zero after a read, and after power up, soft reset, or factory defaults reset.')
ap553TotalLossOfFrameErrors = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 3, 8, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ap553TotalLossOfFrameErrors.setStatus('mandatory')
if mibBuilder.loadTexts: ap553TotalLossOfFrameErrors.setDescription('The line statistics totals of the valid Line Statistics Interval objects as specified by the ap553ValidHistoryIntervals object value. This object will be reset to zero after a read, and after power up, soft reset, or factory defaults reset. For a E1 product this statistic is Far End Block Errors')
ap553TotalBipolarViolationsErrors = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 3, 8, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ap553TotalBipolarViolationsErrors.setStatus('mandatory')
if mibBuilder.loadTexts: ap553TotalBipolarViolationsErrors.setDescription('The line statistics totals of the valid Line Statistics Interval objects as specified by the ap553ValidHistoryIntervals object value. This object will be reset to zero after a read, and after power up, soft reset, or factory defaults reset. For a E1 product this statistic is LCV')
ap553TotalLossOfSignalErrors = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 3, 8, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ap553TotalLossOfSignalErrors.setStatus('mandatory')
if mibBuilder.loadTexts: ap553TotalLossOfSignalErrors.setDescription('The line statistics totals of the valid Line Statistics Interval objects as specified by the ap553ValidHistoryIntervals object value. This object will be reset to zero after a read, and after power up, soft reset, or factory defaults reset. For a E1 product this statistic is not used.')
ap553ValidHistoryIntervals = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 3, 9, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ap553ValidHistoryIntervals.setStatus('mandatory')
if mibBuilder.loadTexts: ap553ValidHistoryIntervals.setDescription('The number of 15 minute intervals for which line statistics data has been collected. The value will be 96 unless the interface was brought on-line within the last 24 hours, in which case the value will be the number of complete 15 minute intervals the interface has been online. This object will be reset to zero after a read, and after power up, soft reset, or factory defaults reset.')
ap553LineStats24hrHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 498, 22, 1, 3, 9, 2), )
if mibBuilder.loadTexts: ap553LineStats24hrHistoryTable.setStatus('mandatory')
if mibBuilder.loadTexts: ap553LineStats24hrHistoryTable.setDescription('The ap553 Line Statistics 24 hour history table. This table is comprised of 96 objects, each of which hold T1 Line statistics data for a 15 minute time period. Upon power up or after a reset, data is collected in the current interval object: ap553CurrentLineStats. After 15 minutes this data is moved into the first of 96 historical objects. After each sub- sequent 15 minute period completes, data is moved downstream, data from interval #1 is moved into interval #2, etc. The number of valid history intervals contained in ap553ValidLineStatsIntervals is incremented. The ap553TotalLineStats object is recalculated after each 15 minute interval completes, summing all valid interval data into this object. When all 96 objects have been filled, containing 24 hours of data, the oldest object, #96, will be overwritten by object #95, at the completion of the next 15 minute interval. In this fashion, the unit is able to maintain a current 24 hour history of Line Statistics data.')
ap553HistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 22, 1, 3, 9, 2, 1), ).setIndexNames((0, "AP553LIU-MIB", "ap553HistoryInterval"))
if mibBuilder.loadTexts: ap553HistoryEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ap553HistoryEntry.setDescription('An entry in the Line Statistics 24 hour history table.')
ap553HistoryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 22, 1, 3, 9, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ap553HistoryInterval.setStatus('mandatory')
if mibBuilder.loadTexts: ap553HistoryInterval.setDescription('Identifies the relative time period of this data. Interval #1 is the most recent historical 15 minute period. Interval #96 is the oldest 15 minute time period in the current 24 hour history.')
ap553ErroredSecondsData = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 22, 1, 3, 9, 2, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ap553ErroredSecondsData.setStatus('mandatory')
if mibBuilder.loadTexts: ap553ErroredSecondsData.setDescription('The Line Statistics Data for a 15 minute historical period within the last 24 hours, as specified by the ap553HistoryInterval. This object will be reset to zero after a read, and after power up, soft reset, or factory defaults reset.')
ap553SeverelyErroredSecondsData = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 22, 1, 3, 9, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ap553SeverelyErroredSecondsData.setStatus('mandatory')
if mibBuilder.loadTexts: ap553SeverelyErroredSecondsData.setDescription('The Line Statistics Data for a 15 minute historical period within the last 24 hours, as specified by the ap553HistoryInterval. This object will be reset to zero after a read, and after power up, soft reset, or factory defaults reset.')
ap553BurstyErroredSecondsData = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 22, 1, 3, 9, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ap553BurstyErroredSecondsData.setStatus('mandatory')
if mibBuilder.loadTexts: ap553BurstyErroredSecondsData.setDescription('The Line Statistics Data for a 15 minute historical period within the last 24 hours, as specified by the ap553HistoryInterval. This object will be reset to zero after a read, and after power up, soft reset, or factory defaults reset. For a E1 product this statistic is Frame Alignment Signal Errors')
ap553CrcErrorsData = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 22, 1, 3, 9, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ap553CrcErrorsData.setStatus('mandatory')
if mibBuilder.loadTexts: ap553CrcErrorsData.setDescription('The Line Statistics Data for a 15 minute historical period within the last 24 hours, as specified by the ap553HistoryInterval. This object will be reset to zero after a read, and after power up, soft reset, or factory defaults reset. For a E1 product this statistic is CRC4')
ap553UnavailableSecondsData = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 22, 1, 3, 9, 2, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ap553UnavailableSecondsData.setStatus('mandatory')
if mibBuilder.loadTexts: ap553UnavailableSecondsData.setDescription('The Line Statistics Data for a 15 minute historical period within the last 24 hours, as specified by the ap553HistoryInterval. This object will be reset to zero after a read, and after power up, soft reset, or factory defaults reset.')
ap553LossOfFrameErrorsData = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 22, 1, 3, 9, 2, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ap553LossOfFrameErrorsData.setStatus('mandatory')
if mibBuilder.loadTexts: ap553LossOfFrameErrorsData.setDescription('The Line Statistics Data for a 15 minute historical period within the last 24 hours, as specified by the ap553HistoryInterval. This object will be reset to zero after a read, and after power up, soft reset, or factory defaults reset. For a E1 product this statistic is Far End Block Errors')
ap553BipolarViolationsErrorsData = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 22, 1, 3, 9, 2, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ap553BipolarViolationsErrorsData.setStatus('mandatory')
if mibBuilder.loadTexts: ap553BipolarViolationsErrorsData.setDescription('The Line Statistics Data for a 15 minute historical period within the last 24 hours, as specified by the ap553HistoryInterval. This object will be reset to zero after a read, and after power up, soft reset, or factory defaults reset. For a E1 product this statistic is LCV')
ap553LossOfSignalErrorsData = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 22, 1, 3, 9, 2, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ap553LossOfSignalErrorsData.setStatus('mandatory')
if mibBuilder.loadTexts: ap553LossOfSignalErrorsData.setDescription('The Line Statistics Data for a 15 minute historical period within the last 24 hours, as specified by the ap553HistoryInterval. This object will be reset to zero after a read, and after power up, soft reset, or factory defaults reset. For a E1 product this statistic is not used.')
mibBuilder.exportSymbols("AP553LIU-MIB", ap553CrcErrorsData=ap553CrcErrorsData, ap553CurrentBipolarViolationsErrors=ap553CurrentBipolarViolationsErrors, liuCsuNetCfg=liuCsuNetCfg, ap553NetAisTrapSeverity=ap553NetAisTrapSeverity, ap553NumDS0s=ap553NumDS0s, ap553DiagT1Test=ap553DiagT1Test, liuDiagnostics=liuDiagnostics, ap553NetBpvTrapSeverity=ap553NetBpvTrapSeverity, ap553DiagTestStatus=ap553DiagTestStatus, ap553ErroredSecondsData=ap553ErroredSecondsData, liuAdmin=liuAdmin, ap553NetCrcTrapSeverity=ap553NetCrcTrapSeverity, ap553SeverelyErroredSecondsData=ap553SeverelyErroredSecondsData, ap553UnavailableSecondsData=ap553UnavailableSecondsData, ap553CurrentIntervalCompletion=ap553CurrentIntervalCompletion, ap553LossOfFrameErrorsData=ap553LossOfFrameErrorsData, ap553TotalErroredSeconds=ap553TotalErroredSeconds, ap553CurrentUnavailableSeconds=ap553CurrentUnavailableSeconds, ap553CurrentCrcErrors=ap553CurrentCrcErrors, ap553CurrentSeverelyErroredSeconds=ap553CurrentSeverelyErroredSeconds, ap553CurrentLossOfSignalErrors=ap553CurrentLossOfSignalErrors, liuNetAlarmCfg=liuNetAlarmCfg, ap553BipolarViolationsErrorsData=ap553BipolarViolationsErrorsData, ap553TotalSeverelyErroredSeconds=ap553TotalSeverelyErroredSeconds, ap553LossOfSignalErrorsData=ap553LossOfSignalErrorsData, ap553LIUAggregateRate=ap553LIUAggregateRate, ap553NetOperFrameType=ap553NetOperFrameType, ap553NetBpvWindow=ap553NetBpvWindow, ap553TotalCrcErrors=ap553TotalCrcErrors, ap553HistoryEntry=ap553HistoryEntry, ap553NetBpvThresh=ap553NetBpvThresh, ap553MIBversion=ap553MIBversion, ap553NetRcdYelTrapSeverity=ap553NetRcdYelTrapSeverity, ap553NetUssTrapSeverity=ap553NetUssTrapSeverity, ap553DiagTestDuration=ap553DiagTestDuration, ap553TotalBipolarViolationsErrors=ap553TotalBipolarViolationsErrors, ap553HistoryInterval=ap553HistoryInterval, ap553NetDS1IntfRcvLevel=ap553NetDS1IntfRcvLevel, liuCurrentStats=liuCurrentStats, ap553NetCrcThresh=ap553NetCrcThresh, ap553LineStats24hrHistoryTable=ap553LineStats24hrHistoryTable, ap553NetLineCoding=ap553NetLineCoding, ap553NetSetFrameType=ap553NetSetFrameType, ap553NetCrcWindow=ap553NetCrcWindow, ap553TotalBurstyErroredSeconds=ap553TotalBurstyErroredSeconds, ap553PortFrameCounts=ap553PortFrameCounts, ap553NetEsfMode=ap553NetEsfMode, ap553LedStatus=ap553LedStatus, ap553SystemStatus=ap553SystemStatus, ap553NetLadThresh=ap553NetLadThresh, ap553ValidHistoryIntervals=ap553ValidHistoryIntervals, ap553NetLosTrapSeverity=ap553NetLosTrapSeverity, ap553CurrentErroredSeconds=ap553CurrentErroredSeconds, ap553NetIntfType=ap553NetIntfType, liuTotalStats=liuTotalStats, ap553NetLadTrapSeverity=ap553NetLadTrapSeverity, ap553CurrentLossOfFrameErrors=ap553CurrentLossOfFrameErrors, ap553TotalUnavailableSeconds=ap553TotalUnavailableSeconds, liuStatus=liuStatus, ap553PortStatus=ap553PortStatus, ap553DS0AllocationScheme=ap553DS0AllocationScheme, ap553StartingDS0=ap553StartingDS0, ap553InbandLoop=ap553InbandLoop, liuHistoryStats=liuHistoryStats, ap553TotalLossOfSignalErrors=ap553TotalLossOfSignalErrors, ap553DS0Fmt=ap553DS0Fmt, ap553CircuitAssurance=ap553CircuitAssurance, ap553BurstyErroredSecondsData=ap553BurstyErroredSecondsData, ap553NetOofTrapSeverity=ap553NetOofTrapSeverity, ap553NetLadWindow=ap553NetLadWindow, ap553CurrentBurstyErroredSeconds=ap553CurrentBurstyErroredSeconds, liuDsuCfg=liuDsuCfg, ap553TotalLossOfFrameErrors=ap553TotalLossOfFrameErrors)
