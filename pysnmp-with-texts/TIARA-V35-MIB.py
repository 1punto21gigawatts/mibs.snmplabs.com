#
# PySNMP MIB module TIARA-V35-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/TIARA-V35-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:16:40 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, NotificationType, iso, ObjectIdentity, MibIdentifier, Gauge32, Integer32, IpAddress, NotificationType, Counter64, Unsigned32, TimeTicks, Counter32, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "NotificationType", "iso", "ObjectIdentity", "MibIdentifier", "Gauge32", "Integer32", "IpAddress", "NotificationType", "Counter64", "Unsigned32", "TimeTicks", "Counter32", "ModuleIdentity")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
tiaraInterfaces, = mibBuilder.importSymbols("TIARA-NETWORKS-SMI", "tiaraInterfaces")
tiaraV35Mib = ModuleIdentity((1, 3, 6, 1, 4, 1, 3174, 2, 7, 3))
tiaraV35Mib.setRevisions(('1900-08-18 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: tiaraV35Mib.setRevisionsDescriptions(('Initial revision.',))
if mibBuilder.loadTexts: tiaraV35Mib.setLastUpdated('0008180000Z')
if mibBuilder.loadTexts: tiaraV35Mib.setOrganization('Tiara Networks Inc.')
if mibBuilder.loadTexts: tiaraV35Mib.setContactInfo('Tiara Networks Customer Support 525 Race Street, Suite 100, San Jose, CA 95126 USA Tel: +1 408-216-4700 Fax: +1 408-216-4701 Email: support@tiaranetworks.com')
if mibBuilder.loadTexts: tiaraV35Mib.setDescription('MIB definitions for Tiara V35 module.')
v35Traps = MibIdentifier((1, 3, 6, 1, 4, 1, 3174, 2, 7, 3, 3))
v35TrapVariables = MibIdentifier((1, 3, 6, 1, 4, 1, 3174, 2, 7, 3, 3, 1))
v35ConfigTable = MibTable((1, 3, 6, 1, 4, 1, 3174, 2, 7, 3, 1), )
if mibBuilder.loadTexts: v35ConfigTable.setStatus('current')
if mibBuilder.loadTexts: v35ConfigTable.setDescription('Tiara Networks V35 interface-related configurable parameters are listed in this table.')
v35ConfigTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3174, 2, 7, 3, 1, 1), ).setIndexNames((0, "TIARA-V35-MIB", "v35IfIndex"))
if mibBuilder.loadTexts: v35ConfigTableEntry.setStatus('current')
if mibBuilder.loadTexts: v35ConfigTableEntry.setDescription('V35 table entry.')
v35IfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3174, 2, 7, 3, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: v35IfIndex.setStatus('current')
if mibBuilder.loadTexts: v35IfIndex.setDescription('An integer value that is an index in the entries of the ifTable (MIB-II) with a V.35 interface type.')
v35ConfigClockRate = MibTableColumn((1, 3, 6, 1, 4, 1, 3174, 2, 7, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1000000, 8000000)).clone(8000000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: v35ConfigClockRate.setStatus('current')
if mibBuilder.loadTexts: v35ConfigClockRate.setDescription('Configures the clock rate for V35.')
v35ConfigClockSource = MibTableColumn((1, 3, 6, 1, 4, 1, 3174, 2, 7, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("internal", 1), ("line", 2))).clone('line')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: v35ConfigClockSource.setStatus('current')
if mibBuilder.loadTexts: v35ConfigClockSource.setDescription('Configures the clock source for V35. It can be either internal or line.')
v35ConfigMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3174, 2, 7, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dce", 1), ("dte", 2))).clone('dte')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: v35ConfigMode.setStatus('current')
if mibBuilder.loadTexts: v35ConfigMode.setDescription('Configures the mode for V35 to be either dce or dte.')
v35ConfigCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 3174, 2, 7, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("crc16", 1), ("crc32", 2))).clone('crc32')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: v35ConfigCRC.setStatus('current')
if mibBuilder.loadTexts: v35ConfigCRC.setDescription('Configures the cyclic redundancy check for V35 to be either 16 or 32 bits.')
v35ConfigDataMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3174, 2, 7, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("inverted", 2))).clone('normal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: v35ConfigDataMode.setStatus('current')
if mibBuilder.loadTexts: v35ConfigDataMode.setDescription('Configures the data for V.35 to be either normal or inverted.')
v35ConfigFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 3174, 2, 7, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: v35ConfigFlowControl.setStatus('current')
if mibBuilder.loadTexts: v35ConfigFlowControl.setDescription('Configures the hardware flow control for V.35 to be either on or off.')
v35StatsTable = MibTable((1, 3, 6, 1, 4, 1, 3174, 2, 7, 3, 2), )
if mibBuilder.loadTexts: v35StatsTable.setStatus('current')
if mibBuilder.loadTexts: v35StatsTable.setDescription('Tiara Networks V35 interface-related status variables are listed in this table.')
v35StatsTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3174, 2, 7, 3, 2, 1), ).setIndexNames((0, "TIARA-V35-MIB", "v35IfIndex"))
if mibBuilder.loadTexts: v35StatsTableEntry.setStatus('current')
if mibBuilder.loadTexts: v35StatsTableEntry.setDescription('V35 statistics table entry.')
v35StatsAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3174, 2, 7, 3, 2, 1, 1), Bits().clone(namedValues=NamedValues(("v35-no-alarms", 0), ("v35-alarms-DTR", 1), ("v35-alarms-DSR", 2), ("v35-alarms-ST", 3), ("v35-alarms-CTS", 4), ("v35-alarms-RTS", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v35StatsAlarmStatus.setStatus('current')
if mibBuilder.loadTexts: v35StatsAlarmStatus.setDescription('Specifies the status of the V35 alarm. If the bit is set, it indicates that the alarm state is on. Alarm bits are mode dependent; they are interpreted as follows: v35-alarms-DTR - DTR not received from DTE (V.35 is DCE) v35-alarms-DSR - DSR not received from DCE (V.35 is DTE) v35-alarms-ST - V.35 adaptor driving ST (V.35 is DCE) v35-alarms-CTS - CTS not received from DCE (V.35 is DTE) v35-alarms-RTS - RTS not received from DTE (V.35 is DCE) ')
v35StatsFramesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3174, 2, 7, 3, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v35StatsFramesIn.setStatus('current')
if mibBuilder.loadTexts: v35StatsFramesIn.setDescription('Specifies the number of incoming frames.')
v35StatsFramesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3174, 2, 7, 3, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v35StatsFramesOut.setStatus('current')
if mibBuilder.loadTexts: v35StatsFramesOut.setDescription('Specifies the number of outgoing frames.')
v35StatsOctetsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3174, 2, 7, 3, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v35StatsOctetsIn.setStatus('current')
if mibBuilder.loadTexts: v35StatsOctetsIn.setDescription('Specifies the number of incoming octets.')
v35StatsOctetsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3174, 2, 7, 3, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v35StatsOctetsOut.setStatus('current')
if mibBuilder.loadTexts: v35StatsOctetsOut.setDescription('Specifies the number of outgoing octets.')
v35StatsCRCErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3174, 2, 7, 3, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v35StatsCRCErrors.setStatus('current')
if mibBuilder.loadTexts: v35StatsCRCErrors.setDescription('Specifies the number of CRC errors that have been identified so far.')
v35SlotNumber = MibScalar((1, 3, 6, 1, 4, 1, 3174, 2, 7, 3, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: v35SlotNumber.setStatus('current')
if mibBuilder.loadTexts: v35SlotNumber.setDescription('This V35 trap variable specifies the slot number of the V35 interface.')
v35AlarmType = MibScalar((1, 3, 6, 1, 4, 1, 3174, 2, 7, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("v35-alarm-DTR", 1), ("v35-alarm-DSR", 2), ("v35-alarm-ST", 3), ("v35-alarm-CTS", 4), ("v35-alarm-RTS", 5))))
if mibBuilder.loadTexts: v35AlarmType.setStatus('current')
if mibBuilder.loadTexts: v35AlarmType.setDescription('This V35 alarm type specifies the type of the alarm trap generated by the agent for the V35 interface. Alarm bits are mode dependent; they are interpreted as follows: v35-alarms-DTR - DTR not received from DTE (V.35 is DCE) v35-alarms-DSR - DSR not received from DCE (V.35 is DTE) v35-alarms-ST - V.35 adaptor driving ST (V.35 is DCE) v35-alarms-CTS - CTS not received from DCE (V.35 is DTE) v35-alarms-RTS - RTS not received from DTE (V.35 is DCE) ')
v35AlarmOnTrap = NotificationType((1, 3, 6, 1, 4, 1, 3174, 2, 7, 3, 3) + (0,1)).setObjects(("TIARA-V35-MIB", "v35IfIndex"), ("TIARA-V35-MIB", "v35AlarmType"))
if mibBuilder.loadTexts: v35AlarmOnTrap.setDescription('V35 alarm traps for the Alarm On state.')
v35AlarmOffTrap = NotificationType((1, 3, 6, 1, 4, 1, 3174, 2, 7, 3, 3) + (0,2)).setObjects(("TIARA-V35-MIB", "v35IfIndex"), ("TIARA-V35-MIB", "v35AlarmType"))
if mibBuilder.loadTexts: v35AlarmOffTrap.setDescription('V35 alarm traps for the Alarm Off state.')
mibBuilder.exportSymbols("TIARA-V35-MIB", v35AlarmType=v35AlarmType, v35IfIndex=v35IfIndex, v35ConfigMode=v35ConfigMode, v35ConfigCRC=v35ConfigCRC, v35AlarmOnTrap=v35AlarmOnTrap, v35StatsFramesOut=v35StatsFramesOut, v35StatsAlarmStatus=v35StatsAlarmStatus, v35StatsTableEntry=v35StatsTableEntry, v35ConfigClockRate=v35ConfigClockRate, v35TrapVariables=v35TrapVariables, v35ConfigClockSource=v35ConfigClockSource, tiaraV35Mib=tiaraV35Mib, v35ConfigFlowControl=v35ConfigFlowControl, v35ConfigTableEntry=v35ConfigTableEntry, v35StatsOctetsIn=v35StatsOctetsIn, v35StatsOctetsOut=v35StatsOctetsOut, v35StatsTable=v35StatsTable, v35ConfigDataMode=v35ConfigDataMode, v35Traps=v35Traps, v35SlotNumber=v35SlotNumber, PYSNMP_MODULE_ID=tiaraV35Mib, v35StatsCRCErrors=v35StatsCRCErrors, v35StatsFramesIn=v35StatsFramesIn, v35ConfigTable=v35ConfigTable, v35AlarmOffTrap=v35AlarmOffTrap)
