#
# PySNMP MIB module RADLAN-ARPSPOOFING-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/RADLAN-ARPSPOOFING-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:45:10 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
InterfaceIndexOrZero, InterfaceIndex = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero", "InterfaceIndex")
rnd, = mibBuilder.importSymbols("RADLAN-MIB", "rnd")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ModuleIdentity, TimeTicks, MibIdentifier, Unsigned32, NotificationType, Counter32, ObjectIdentity, Gauge32, Bits, Counter64, Integer32, iso, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "TimeTicks", "MibIdentifier", "Unsigned32", "NotificationType", "Counter32", "ObjectIdentity", "Gauge32", "Bits", "Counter64", "Integer32", "iso", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DisplayString, RowStatus, PhysAddress, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "RowStatus", "PhysAddress", "TextualConvention")
rlArpSpoofing = ModuleIdentity((1, 3, 6, 1, 4, 1, 89, 60))
rlArpSpoofing.setRevisions(('2007-01-02 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: rlArpSpoofing.setRevisionsDescriptions(('Initial revision.',))
if mibBuilder.loadTexts: rlArpSpoofing.setLastUpdated('200701020000Z')
if mibBuilder.loadTexts: rlArpSpoofing.setOrganization('Radlan - a MARVELL company. Marvell Semiconductor, Inc.')
if mibBuilder.loadTexts: rlArpSpoofing.setContactInfo('www.marvell.com')
if mibBuilder.loadTexts: rlArpSpoofing.setDescription('This private MIB module defines ARP spoofing private MIBs.')
rlArpSpoofingMibVersion = MibScalar((1, 3, 6, 1, 4, 1, 89, 60, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlArpSpoofingMibVersion.setStatus('current')
if mibBuilder.loadTexts: rlArpSpoofingMibVersion.setDescription("MIB's version, the current version is 1.")
rlArpSpoofingTable = MibTable((1, 3, 6, 1, 4, 1, 89, 60, 2), )
if mibBuilder.loadTexts: rlArpSpoofingTable.setStatus('current')
if mibBuilder.loadTexts: rlArpSpoofingTable.setDescription('A list of the ifIndexes, IP addresses and corresponding MAC addresses.')
rlArpSpoofingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 60, 2, 1), ).setIndexNames((0, "RADLAN-ARPSPOOFING-MIB", "rlArpSpoofingIfIndex"), (0, "RADLAN-ARPSPOOFING-MIB", "rlArpSpoofingLocalIpAddr"))
if mibBuilder.loadTexts: rlArpSpoofingEntry.setStatus('current')
if mibBuilder.loadTexts: rlArpSpoofingEntry.setDescription('An entry of this table specifis ifIndex,IP Address and MAC address.')
rlArpSpoofingIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 60, 2, 1, 1), InterfaceIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlArpSpoofingIfIndex.setStatus('current')
if mibBuilder.loadTexts: rlArpSpoofingIfIndex.setDescription('The physical interface for which this entry contains information.')
rlArpSpoofingLocalIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 60, 2, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlArpSpoofingLocalIpAddr.setStatus('current')
if mibBuilder.loadTexts: rlArpSpoofingLocalIpAddr.setDescription('Ip addres for which the device will send ARP reply (ARP spoofing).')
rlArpSpoofingMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 60, 2, 1, 3), PhysAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlArpSpoofingMacAddr.setStatus('current')
if mibBuilder.loadTexts: rlArpSpoofingMacAddr.setDescription("MAC addres with which the device will send ARP reply. If the field is ommited or its value 0.0.0.0 the device will send with the interface's MAC address.")
rlArpSpoofingRemoteIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 60, 2, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlArpSpoofingRemoteIpAddr.setStatus('current')
if mibBuilder.loadTexts: rlArpSpoofingRemoteIpAddr.setDescription('Ip addres for which the device will send periodically ARP requests if its value differs from 0.0.0.0.')
rlArpSpoofingOutPhysIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 60, 2, 1, 5), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlArpSpoofingOutPhysIfIndex.setStatus('current')
if mibBuilder.loadTexts: rlArpSpoofingOutPhysIfIndex.setDescription("The physical interface to which the device will send periodically ARP requests if its value differs from 0. If its value is 0 then ARP requests will send to all the VLAN's ports.")
rlArpSpoofingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 60, 2, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlArpSpoofingStatus.setStatus('current')
if mibBuilder.loadTexts: rlArpSpoofingStatus.setDescription('It is used to insert, update or delete an entry')
mibBuilder.exportSymbols("RADLAN-ARPSPOOFING-MIB", rlArpSpoofingTable=rlArpSpoofingTable, rlArpSpoofingLocalIpAddr=rlArpSpoofingLocalIpAddr, rlArpSpoofing=rlArpSpoofing, rlArpSpoofingOutPhysIfIndex=rlArpSpoofingOutPhysIfIndex, rlArpSpoofingMibVersion=rlArpSpoofingMibVersion, rlArpSpoofingIfIndex=rlArpSpoofingIfIndex, rlArpSpoofingRemoteIpAddr=rlArpSpoofingRemoteIpAddr, rlArpSpoofingEntry=rlArpSpoofingEntry, rlArpSpoofingMacAddr=rlArpSpoofingMacAddr, PYSNMP_MODULE_ID=rlArpSpoofing, rlArpSpoofingStatus=rlArpSpoofingStatus)
