#
# PySNMP MIB module NBS-VLAN-FWD-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NBS-VLAN-FWD-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:17:48 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint")
InterfaceIndex, nbs = mibBuilder.importSymbols("NBS-CMMC-MIB", "InterfaceIndex", "nbs")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Gauge32, IpAddress, TimeTicks, ModuleIdentity, Integer32, iso, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, Counter64, NotificationType, ObjectIdentity, MibIdentifier, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "IpAddress", "TimeTicks", "ModuleIdentity", "Integer32", "iso", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "Counter64", "NotificationType", "ObjectIdentity", "MibIdentifier", "Bits")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
nbsVlanFwdMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 629, 215))
if mibBuilder.loadTexts: nbsVlanFwdMib.setLastUpdated('201011120000Z')
if mibBuilder.loadTexts: nbsVlanFwdMib.setOrganization('NBS')
if mibBuilder.loadTexts: nbsVlanFwdMib.setContactInfo('For technical support, please contact your service channel')
if mibBuilder.loadTexts: nbsVlanFwdMib.setDescription('MIB for representing VLAN Forwarding information')
nbsVlanFwdGrp = ObjectIdentity((1, 3, 6, 1, 4, 1, 629, 215, 1))
if mibBuilder.loadTexts: nbsVlanFwdGrp.setStatus('current')
if mibBuilder.loadTexts: nbsVlanFwdGrp.setDescription('VLAN Forwarding Configuration and Capabilities')
nbsVlanControlGrp = ObjectIdentity((1, 3, 6, 1, 4, 1, 629, 215, 2))
if mibBuilder.loadTexts: nbsVlanControlGrp.setStatus('current')
if mibBuilder.loadTexts: nbsVlanControlGrp.setDescription('VLAN Control Configuration and Capabilities')
nbsVlanFwdTableSize = MibScalar((1, 3, 6, 1, 4, 1, 629, 215, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsVlanFwdTableSize.setStatus('current')
if mibBuilder.loadTexts: nbsVlanFwdTableSize.setDescription('The number of entries in nbsVlanFwdTable')
nbsVlanFwdTable = MibTable((1, 3, 6, 1, 4, 1, 629, 215, 1, 2), )
if mibBuilder.loadTexts: nbsVlanFwdTable.setStatus('current')
if mibBuilder.loadTexts: nbsVlanFwdTable.setDescription('VLAN Forwarding information.')
nbsVlanFwdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 629, 215, 1, 2, 1), ).setIndexNames((0, "NBS-VLAN-FWD-MIB", "nbsVlanFwdIfIndex"))
if mibBuilder.loadTexts: nbsVlanFwdEntry.setStatus('current')
if mibBuilder.loadTexts: nbsVlanFwdEntry.setDescription("The VLAN Forwarding port's information")
nbsVlanFwdIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 215, 1, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: nbsVlanFwdIfIndex.setStatus('current')
if mibBuilder.loadTexts: nbsVlanFwdIfIndex.setDescription('The Mib2 ifIndex of this VLAN Forwarding port')
nbsVlanFwdVidList = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 215, 1, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsVlanFwdVidList.setStatus('current')
if mibBuilder.loadTexts: nbsVlanFwdVidList.setDescription('A list of VLAN ids as a free format text string. A non-empty string indicates that the port only forwards frames to other port(s) having the same VLAN id(s). For example: 1001 specifies one isolated VLAN id.')
nbsVlanFwdVid = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 215, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsVlanFwdVid.setStatus('current')
if mibBuilder.loadTexts: nbsVlanFwdVid.setDescription('Specifies the VLAN id to be used when adding a new outer VLAN tag to frames.')
nbsVlanFwdPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 215, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsVlanFwdPriority.setStatus('current')
if mibBuilder.loadTexts: nbsVlanFwdPriority.setDescription('Specifies the priority to be used when adding a new outer VLAN tag to frames.')
nbsVlanFwdEgressTagAction = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 215, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notSupported", 1), ("add", 2), ("strip", 3), ("retain", 4))).clone('retain')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsVlanFwdEgressTagAction.setStatus('current')
if mibBuilder.loadTexts: nbsVlanFwdEgressTagAction.setDescription('Specifies what tagging action to perform on outgoing frames from this port: add(2) a new outer VLAN tag to each outgoing frame, using nbsVlanFwdVid and nbsVlanFwdPriority; strip(3) the outer VLAN tag from each outgoing frame; retain(4) tagging as is on each outgoing frame.')
nbsVlanFwdEgressTagCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 215, 1, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsVlanFwdEgressTagCapability.setStatus('current')
if mibBuilder.loadTexts: nbsVlanFwdEgressTagCapability.setDescription('This bitmask indicates which nbsVlanPortEgressTagAction values are supported: add(2) if bit 2 is set, strip(3) if bit 3 is set, and retain(4) if bit 4 is set.')
nbsVlanFwdIngressTagAction = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 215, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notSupported", 1), ("add", 2), ("strip", 3), ("retain", 4))).clone('retain')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsVlanFwdIngressTagAction.setStatus('current')
if mibBuilder.loadTexts: nbsVlanFwdIngressTagAction.setDescription('Specifies what tagging action to perform on incoming frames on this port: add(2) a new outer VLAN tag to each incoming frame, using nbsVlanFwdVid and nbsVlanFwdPriority; strip(3) the outer VLAN tag from each incoming frame; retain(4) tagging as is on each incoming frame.')
nbsVlanFwdIngressTagCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 215, 1, 2, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsVlanFwdIngressTagCapability.setStatus('current')
if mibBuilder.loadTexts: nbsVlanFwdIngressTagCapability.setDescription('This bitmask indicates which nbsVlanPortIngressTagAction values are supported: add(2) if bit 2 is set, strip(3) if bit 3 is set, and retain(4) if bit 4 is set.')
nbsVlanControlTableSize = MibScalar((1, 3, 6, 1, 4, 1, 629, 215, 2, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsVlanControlTableSize.setStatus('current')
if mibBuilder.loadTexts: nbsVlanControlTableSize.setDescription('The number of entries in nbsVlanControlTable')
nbsVlanControlTable = MibTable((1, 3, 6, 1, 4, 1, 629, 215, 2, 2), )
if mibBuilder.loadTexts: nbsVlanControlTable.setStatus('current')
if mibBuilder.loadTexts: nbsVlanControlTable.setDescription('VLAN Management information.')
nbsVlanControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 629, 215, 2, 2, 1), ).setIndexNames((0, "NBS-VLAN-FWD-MIB", "nbsVlanControlIfIndex"))
if mibBuilder.loadTexts: nbsVlanControlEntry.setStatus('current')
if mibBuilder.loadTexts: nbsVlanControlEntry.setDescription("The VLAN entity's management information")
nbsVlanControlIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 215, 2, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: nbsVlanControlIfIndex.setStatus('current')
if mibBuilder.loadTexts: nbsVlanControlIfIndex.setDescription('The Mib2 ifIndex of this VLAN entity')
nbsVlanControlMgmtVid = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 215, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095)).clone(4094)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsVlanControlMgmtVid.setStatus('current')
if mibBuilder.loadTexts: nbsVlanControlMgmtVid.setDescription('Specifies the VLAN id to be used for management traffic.')
mibBuilder.exportSymbols("NBS-VLAN-FWD-MIB", nbsVlanFwdEntry=nbsVlanFwdEntry, nbsVlanFwdEgressTagCapability=nbsVlanFwdEgressTagCapability, nbsVlanFwdTable=nbsVlanFwdTable, nbsVlanFwdVidList=nbsVlanFwdVidList, nbsVlanFwdGrp=nbsVlanFwdGrp, nbsVlanFwdIngressTagAction=nbsVlanFwdIngressTagAction, PYSNMP_MODULE_ID=nbsVlanFwdMib, nbsVlanControlTable=nbsVlanControlTable, nbsVlanFwdPriority=nbsVlanFwdPriority, nbsVlanFwdIngressTagCapability=nbsVlanFwdIngressTagCapability, nbsVlanControlTableSize=nbsVlanControlTableSize, nbsVlanFwdEgressTagAction=nbsVlanFwdEgressTagAction, nbsVlanFwdMib=nbsVlanFwdMib, nbsVlanControlGrp=nbsVlanControlGrp, nbsVlanControlEntry=nbsVlanControlEntry, nbsVlanFwdIfIndex=nbsVlanFwdIfIndex, nbsVlanControlIfIndex=nbsVlanControlIfIndex, nbsVlanControlMgmtVid=nbsVlanControlMgmtVid, nbsVlanFwdTableSize=nbsVlanFwdTableSize, nbsVlanFwdVid=nbsVlanFwdVid)
