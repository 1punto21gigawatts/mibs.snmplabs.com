#
# PySNMP MIB module QWESCOM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/QWESCOM-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:44:19 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter32, Gauge32, NotificationType, Unsigned32, TimeTicks, ModuleIdentity, enterprises, Bits, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Counter64, IpAddress, MibIdentifier, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "Gauge32", "NotificationType", "Unsigned32", "TimeTicks", "ModuleIdentity", "enterprises", "Bits", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Counter64", "IpAddress", "MibIdentifier", "ObjectIdentity")
DisplayString, TextualConvention, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "RowStatus")
class DisplayString(OctetString):
    pass

class PhysAddress(OctetString):
    pass

class TimeDateString(Integer32):
    pass

class Boolean(Integer32):
    pass

qwescom = MibIdentifier((1, 3, 6, 1, 4, 1, 3662))
oemTree = MibIdentifier((1, 3, 6, 1, 4, 1, 3662, 3662))
oem = MibIdentifier((1, 3, 6, 1, 4, 1, 3662, 3662, 3662))
qproprietaryMib2 = MibIdentifier((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 1))
qproducts = MibIdentifier((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 2))
qslots = MibIdentifier((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 3))
qFlowClass = MibIdentifier((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 4))
qatm = MibIdentifier((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 5))
qcraftPort = MibIdentifier((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 6))
qeventGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 8))
qextmib = MibIdentifier((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 9))
qmanufactRecord = MibIdentifier((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 10))
qethernet = MibIdentifier((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 11))
qds1_e1 = MibIdentifier((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 12)).setLabel("qds1-e1")
qconfigManager = MibIdentifier((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 13))
qportManagement = MibIdentifier((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 15))
qip = MibIdentifier((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 16))
qmanagementGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 17))
qOamGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 18))
qmiscGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 19))
qsnmp = MibIdentifier((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 1, 11))
qigmp = MibIdentifier((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 16, 7))
qsnmpCommunityTable = MibTable((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 1, 11, 1), )
if mibBuilder.loadTexts: qsnmpCommunityTable.setStatus('mandatory')
if mibBuilder.loadTexts: qsnmpCommunityTable.setDescription('A list of SNMP Community entries. The maximum number of SNMP Communities are five.')
qsnmpCommunityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 1, 11, 1, 1), ).setIndexNames((0, "QWESCOM-MIB", "qsnmpCommunityIndex"))
if mibBuilder.loadTexts: qsnmpCommunityEntry.setStatus('mandatory')
if mibBuilder.loadTexts: qsnmpCommunityEntry.setDescription('One entry in the table.')
qsnmpCommunityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 1, 11, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qsnmpCommunityIndex.setStatus('mandatory')
if mibBuilder.loadTexts: qsnmpCommunityIndex.setDescription('A unique value which identifies each SNMP Community.')
qsnmpCommunityRights = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 1, 11, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("readonly", 0), ("readwrite", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qsnmpCommunityRights.setStatus('optional')
if mibBuilder.loadTexts: qsnmpCommunityRights.setDescription('The first and third qsnmpCommunityIndex have read-write permission while the others have read-only privilege. Values 0 = ReadOnly, and 1 = ReadWrite')
qsnmpCommunityName = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 1, 11, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qsnmpCommunityName.setStatus('mandatory')
if mibBuilder.loadTexts: qsnmpCommunityName.setDescription('The SNMP Community Name used to access the unit with the associated permission from the qsnmpCommunityRights.')
qsnmpNMSTable = MibTable((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 1, 11, 2), )
if mibBuilder.loadTexts: qsnmpNMSTable.setStatus('mandatory')
if mibBuilder.loadTexts: qsnmpNMSTable.setDescription('A list of SNMP Network Management System (NMS) entries.')
qsnmpNMSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 1, 11, 2, 1), ).setIndexNames((0, "QWESCOM-MIB", "qsnmpNMSIndex"))
if mibBuilder.loadTexts: qsnmpNMSEntry.setStatus('mandatory')
if mibBuilder.loadTexts: qsnmpNMSEntry.setDescription('One entry in the table.')
qsnmpNMSIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 1, 11, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qsnmpNMSIndex.setStatus('mandatory')
if mibBuilder.loadTexts: qsnmpNMSIndex.setDescription('A unique value which identifies each NMS.')
qsnmpNMSIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 1, 11, 2, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qsnmpNMSIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: qsnmpNMSIpAddress.setDescription('The IP Address of a Network Management System, which is allowed to access MIB variables.')
qsnmpTrapTable = MibTable((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 1, 11, 3), )
if mibBuilder.loadTexts: qsnmpTrapTable.setStatus('mandatory')
if mibBuilder.loadTexts: qsnmpTrapTable.setDescription('A list of IP Address entries associated with traps.')
qsnmpTrapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 1, 11, 3, 1), ).setIndexNames((0, "QWESCOM-MIB", "qsnmpTrapIndex"))
if mibBuilder.loadTexts: qsnmpTrapEntry.setStatus('mandatory')
if mibBuilder.loadTexts: qsnmpTrapEntry.setDescription('One entry in the table.')
qsnmpTrapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 1, 11, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qsnmpTrapIndex.setStatus('mandatory')
if mibBuilder.loadTexts: qsnmpTrapIndex.setDescription('A unique value which identifies each IP Address.')
qsnmpTrapIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 1, 11, 3, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qsnmpTrapIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: qsnmpTrapIpAddress.setDescription('The IP Address of an IP entity, which is allowed to receive SNMP Trap events.')
qsnmpForwardTrap = MibScalar((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 1, 11, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qsnmpForwardTrap.setStatus('mandatory')
if mibBuilder.loadTexts: qsnmpForwardTrap.setDescription('The flag which enables(1)/disables(2) SNMP Trap events to be transmitted.')
qClassDefinitionMaxEntries = MibScalar((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 4, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qClassDefinitionMaxEntries.setStatus('mandatory')
if mibBuilder.loadTexts: qClassDefinitionMaxEntries.setDescription('The number of Class Definition entries.')
qClassDefinitionTable = MibTable((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 4, 2), )
if mibBuilder.loadTexts: qClassDefinitionTable.setStatus('mandatory')
if mibBuilder.loadTexts: qClassDefinitionTable.setDescription('A list of Class Definition entries. The number of entries is given by the value of qClassDefinitionMaxEntries.')
qClassDefinitionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 4, 2, 1), ).setIndexNames((0, "QWESCOM-MIB", "qClassDefinitionIndex"))
if mibBuilder.loadTexts: qClassDefinitionEntry.setStatus('mandatory')
if mibBuilder.loadTexts: qClassDefinitionEntry.setDescription('One entry in the table.')
qClassDefinitionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qClassDefinitionIndex.setStatus('mandatory')
if mibBuilder.loadTexts: qClassDefinitionIndex.setDescription('A unique value for each class definition. Values 0 and 1 are reserved for internal use.')
qClassDefinitionAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 4, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qClassDefinitionAlias.setStatus('optional')
if mibBuilder.loadTexts: qClassDefinitionAlias.setDescription('A textual string containing user defined information about the Class Definition.')
qClassDefinitionParentClassID = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qClassDefinitionParentClassID.setStatus('optional')
if mibBuilder.loadTexts: qClassDefinitionParentClassID.setDescription('The qClassDefinitionIndex value of the parent for this Class Definition.')
qClassDefinitionFlowType = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("normal", 1), ("dsingres", 2), ("dsegress", 3), ("dsnode", 4), ("invalid", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qClassDefinitionFlowType.setStatus('mandatory')
if mibBuilder.loadTexts: qClassDefinitionFlowType.setDescription('The type of Class Definition being created. INVALID causes the current Class Definition Entry to be removed.')
qClassDefinitionSourceIPMask = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 4, 2, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qClassDefinitionSourceIPMask.setStatus('optional')
if mibBuilder.loadTexts: qClassDefinitionSourceIPMask.setDescription('The IP address mask for the source.')
qClassDefinitionSourceIPLowerBound = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 4, 2, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qClassDefinitionSourceIPLowerBound.setStatus('optional')
if mibBuilder.loadTexts: qClassDefinitionSourceIPLowerBound.setDescription('The first source IP address which matches the class (after masking).')
qClassDefinitionSourceIPUpperBound = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 4, 2, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qClassDefinitionSourceIPUpperBound.setStatus('optional')
if mibBuilder.loadTexts: qClassDefinitionSourceIPUpperBound.setDescription('The last source IP address which matches the class (after masking).')
qClassDefinitionDestIPMask = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 4, 2, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qClassDefinitionDestIPMask.setStatus('optional')
if mibBuilder.loadTexts: qClassDefinitionDestIPMask.setDescription('The IP address mask for the destination.')
qClassDefinitionDestIPLowerBound = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 4, 2, 1, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qClassDefinitionDestIPLowerBound.setStatus('optional')
if mibBuilder.loadTexts: qClassDefinitionDestIPLowerBound.setDescription('The first destination IP address which matches the class (after masking).')
qClassDefinitionDestIPUpperBound = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 4, 2, 1, 10), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qClassDefinitionDestIPUpperBound.setStatus('optional')
if mibBuilder.loadTexts: qClassDefinitionDestIPUpperBound.setDescription('The last destination IP address which matches the class (after masking).')
qClassDefinitionDSMask = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 4, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qClassDefinitionDSMask.setStatus('optional')
if mibBuilder.loadTexts: qClassDefinitionDSMask.setDescription('The DS/TOS byte mask value.')
qClassDefinitionDSLowerBound = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 4, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qClassDefinitionDSLowerBound.setStatus('optional')
if mibBuilder.loadTexts: qClassDefinitionDSLowerBound.setDescription('The first DS/TOS byte value which matches the class (after masking).')
qClassDefinitionDSUpperBound = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 4, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qClassDefinitionDSUpperBound.setStatus('optional')
if mibBuilder.loadTexts: qClassDefinitionDSUpperBound.setDescription('The last DS/TOS byte value which matches the class (after masking).')
qClassDefinitionWellKnownApplication = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 4, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61))).clone(namedValues=NamedValues(("unspecified", 0), ("realaudio", 1), ("netmeeting", 2), ("echo", 3), ("discard", 4), ("rip", 5), ("daytime", 5), ("quoteofday", 6), ("msp", 7), ("ftp", 8), ("telnet", 9), ("smtp", 10), ("msg", 11), ("time", 12), ("rap", 13), ("rlp", 14), ("whois", 15), ("login", 16), ("remotemail", 17), ("xns", 18), ("dns", 19), ("sql", 20), ("bootp", 21), ("tftp", 22), ("gopher", 23), ("finger", 24), ("http", 25), ("kerberos", 26), ("npp", 27), ("hostname", 28), ("isotsap", 29), ("remotetelnet", 30), ("sna", 31), ("pop3", 32), ("rpc", 33), ("authentication", 34), ("audionews", 35), ("sftp", 36), ("uucp", 37), ("networktime", 38), ("pwdgen", 39), ("ciscofna", 40), ("ciscotna", 41), ("ciscosys", 42), ("netbios", 43), ("news", 44), ("management", 45), ("send", 46), ("appletalk", 47), ("ipx", 48), ("performancedata", 49), ("ldap", 50), ("novell", 51), ("microsoft", 52), ("doom", 53), ("lotusnotes", 54), ("audiomail", 55), ("videomail", 56), ("autodesk", 57), ("ibm", 58), ("vlsi", 59), ("oracle", 60), ("xwindows", 61)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qClassDefinitionWellKnownApplication.setStatus('mandatory')
if mibBuilder.loadTexts: qClassDefinitionWellKnownApplication.setDescription('The type of application to match.')
qClassDefinitionProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 4, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18))).clone(namedValues=NamedValues(("all", 0), ("udptcp", 1), ("udp", 2), ("tcp", 3), ("icmp", 4), ("arp", 5), ("rsvp", 6), ("egp", 7), ("ipinip", 8), ("rdp", 9), ("isotp4", 10), ("idrp", 11), ("pvp", 12), ("isoip", 13), ("vines", 14), ("ttp", 15), ("nsfnetigp", 16), ("igrp", 17), ("ospfigp", 18)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qClassDefinitionProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: qClassDefinitionProtocol.setDescription('The IP protocol which matches the class.')
qClassDefinitionSourcePortLowerBound = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 4, 2, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qClassDefinitionSourcePortLowerBound.setStatus('optional')
if mibBuilder.loadTexts: qClassDefinitionSourcePortLowerBound.setDescription('The first source UDP/TCP port which matches the class. Only valid if qClassDefinitionWellKnownApplication = UNSPECIFIED, and qClassDefinitionProtocol = (ALL, UDPTCP, UDP, or TCP).')
qClassDefinitionSourcePortUpperBound = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 4, 2, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qClassDefinitionSourcePortUpperBound.setStatus('optional')
if mibBuilder.loadTexts: qClassDefinitionSourcePortUpperBound.setDescription('The last source UDP/TCP port which matches the class. Only valid if qClassDefinitionWellKnownApplication = UNSPECIFIED, and qClassDefinitionProtocol = (ALL, UDPTCP, UDP, or TCP).')
qClassDefinitionDestPortLowerBound = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 4, 2, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qClassDefinitionDestPortLowerBound.setStatus('optional')
if mibBuilder.loadTexts: qClassDefinitionDestPortLowerBound.setDescription('The first dest UDP/TCP port which matches the class. Only valid if qClassDefinitionWellKnownApplication = UNSPECIFIED, and qClassDefinitionProtocol = (ALL, UDPTCP, UDP, or TCP).')
qClassDefinitionDestPortUpperBound = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 4, 2, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qClassDefinitionDestPortUpperBound.setStatus('optional')
if mibBuilder.loadTexts: qClassDefinitionDestPortUpperBound.setDescription('The last dest UDP/TCP port which matches the class. Only valid if qClassDefinitionWellKnownApplication = UNSPECIFIED, and qClassDefinitionProtocol = (ALL, UDPTCP, UDP, or TCP).')
qClassDefinitionFlowAgingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 4, 2, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qClassDefinitionFlowAgingTime.setStatus('mandatory')
if mibBuilder.loadTexts: qClassDefinitionFlowAgingTime.setDescription('The number of seconds to use as the aging time for LIF related flow information.')
qPolicyDefinitionMaxEntries = MibScalar((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 4, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qPolicyDefinitionMaxEntries.setStatus('mandatory')
if mibBuilder.loadTexts: qPolicyDefinitionMaxEntries.setDescription('The number of Policy Definition entries.')
qPolicyDefinitionTable = MibTable((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 4, 4), )
if mibBuilder.loadTexts: qPolicyDefinitionTable.setStatus('mandatory')
if mibBuilder.loadTexts: qPolicyDefinitionTable.setDescription('A list of Policy Definition entries. The number of entries is given by the value of qPolicyDefinitionMaxEntries.')
qPolicyDefinitionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 4, 4, 1), ).setIndexNames((0, "QWESCOM-MIB", "qPolicyDefinitionIndex"))
if mibBuilder.loadTexts: qPolicyDefinitionEntry.setStatus('mandatory')
qPolicyDefinitionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 4, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qPolicyDefinitionIndex.setStatus('mandatory')
if mibBuilder.loadTexts: qPolicyDefinitionIndex.setDescription('A unique value for each policy definition. Values 0 and 1 are reserved for internal use.')
qPolicyDefinitionAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 4, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qPolicyDefinitionAlias.setStatus('optional')
if mibBuilder.loadTexts: qPolicyDefinitionAlias.setDescription('A textual string containing user defined information about the Policy Definition.')
qPolicyDefinitionType = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 4, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("normal", 1), ("dsingress", 2), ("dsnode", 3), ("dsegress", 4), ("discard", 5), ("delete", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qPolicyDefinitionType.setStatus('optional')
if mibBuilder.loadTexts: qPolicyDefinitionType.setDescription('The type of Policy Definition. DELETE causes the current definition to be removed.')
qPolicyDefinitionLP = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 4, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qPolicyDefinitionLP.setStatus('optional')
if mibBuilder.loadTexts: qPolicyDefinitionLP.setDescription('The logical interface this policy relates to.')
qPolicyDefinitionStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 4, 4, 1, 5), TimeDateString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qPolicyDefinitionStartTime.setStatus('optional')
if mibBuilder.loadTexts: qPolicyDefinitionStartTime.setDescription('The time of day this policy takes effect. NULL = always in effect.')
qPolicyDefinitionEndTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 4, 4, 1, 6), TimeDateString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qPolicyDefinitionEndTime.setStatus('optional')
if mibBuilder.loadTexts: qPolicyDefinitionEndTime.setDescription('The time of day this policy stops taking effect. NULL = always in effect.')
qPolicyDefinitionDayofWeek = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 4, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qPolicyDefinitionDayofWeek.setStatus('optional')
if mibBuilder.loadTexts: qPolicyDefinitionDayofWeek.setDescription('Bit flags which indicate the day of week. Bit 0 = Monday, 1 = Tuesday, 2 = Weds, 4 = Thurs, 8 = Fri, 16 = Sat, 32 = Sun, 64 = Holidays.')
qPolicyDefinitionPipeID = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 4, 4, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qPolicyDefinitionPipeID.setStatus('mandatory')
if mibBuilder.loadTexts: qPolicyDefinitionPipeID.setDescription('The pipe definition this policy references.')
qPolicyDefinitionClassID = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 4, 4, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qPolicyDefinitionClassID.setStatus('mandatory')
if mibBuilder.loadTexts: qPolicyDefinitionClassID.setDescription('The class definition this policy references.')
qPolicyDefinitionChannelized = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 4, 4, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qPolicyDefinitionChannelized.setStatus('optional')
if mibBuilder.loadTexts: qPolicyDefinitionChannelized.setDescription('Bit flags indicating which Classing range is used to create unique channels. 0 = off, 1 = Source IP, 2 = Dest IP 4 = Source Port, 8 = Dest Port, 16 = Protocol, 32 = DS. The maximum number of channels (1-255) is set into the upper byte of this value. If a channel is selected, the default maximum is 16.')
qPolicyDefinitionOutboundDSValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 4, 4, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qPolicyDefinitionOutboundDSValue.setStatus('optional')
if mibBuilder.loadTexts: qPolicyDefinitionOutboundDSValue.setDescription('The DS/TOS byte value to set in outbound PDUs. A value of 256 indicates no replacement.')
qPolicyDefinitionPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 4, 4, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qPolicyDefinitionPriority.setStatus('optional')
if mibBuilder.loadTexts: qPolicyDefinitionPriority.setDescription('The relative priority of this policy.')
qPolicyDefinitionEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 4, 4, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("static", 1), ("time", 2), ("reducedbw", 3), ("increasedbw", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qPolicyDefinitionEvent.setStatus('mandatory')
if mibBuilder.loadTexts: qPolicyDefinitionEvent.setDescription('The type of event which causes this policy to come into effect.')
qPipeDefinitionMaxEntries = MibScalar((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 4, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qPipeDefinitionMaxEntries.setStatus('mandatory')
if mibBuilder.loadTexts: qPipeDefinitionMaxEntries.setDescription('The number of Pipe Definition entries.')
qPipeDefinitionTable = MibTable((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 4, 6), )
if mibBuilder.loadTexts: qPipeDefinitionTable.setStatus('mandatory')
if mibBuilder.loadTexts: qPipeDefinitionTable.setDescription('A list of Pipe Definition entries. The number of entries is given by the value of qPipeDefinitionMaxEntries.')
qPipeDefinitionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 4, 6, 1), ).setIndexNames((0, "QWESCOM-MIB", "qPipeDefinitionIndex"))
if mibBuilder.loadTexts: qPipeDefinitionEntry.setStatus('mandatory')
qPipeDefinitionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 4, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qPipeDefinitionIndex.setStatus('mandatory')
if mibBuilder.loadTexts: qPipeDefinitionIndex.setDescription('A unique value for each pipe definition. Values 0 and 1 are reserved for internal use.')
qPipeDefinitionAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 4, 6, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qPipeDefinitionAlias.setStatus('optional')
if mibBuilder.loadTexts: qPipeDefinitionAlias.setDescription('A textual string containing user defined information about the Pipe Definition.')
qPipeDefinitionType = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 4, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qPipeDefinitionType.setStatus('optional')
if mibBuilder.loadTexts: qPipeDefinitionType.setDescription('The type of Pipe Definition. DELETE causes the current definition to be removed.')
qPipeDefinitionCircuitID = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 4, 6, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qPipeDefinitionCircuitID.setStatus('optional')
if mibBuilder.loadTexts: qPipeDefinitionCircuitID.setDescription('The WAN circuit this pipe relates to.')
qPipeDefinitionBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 4, 6, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qPipeDefinitionBandwidth.setStatus('optional')
if mibBuilder.loadTexts: qPipeDefinitionBandwidth.setDescription('The sustained bandwidth (bits/sec) of this pipe.')
qPipeDefinitionPeak = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 4, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qPipeDefinitionPeak.setStatus('optional')
if mibBuilder.loadTexts: qPipeDefinitionPeak.setDescription('Peak bandwidth of this pipe (bits/sec). Write-acces not supported in Release 1.')
qPipeDefinitionMBS = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 4, 6, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qPipeDefinitionMBS.setStatus('mandatory')
if mibBuilder.loadTexts: qPipeDefinitionMBS.setDescription('The maximum burst size (bytes). Write-acces not supported in Release 1.')
qPipeDefinitionBufferAllocation = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 4, 6, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qPipeDefinitionBufferAllocation.setStatus('mandatory')
if mibBuilder.loadTexts: qPipeDefinitionBufferAllocation.setDescription('The maximum queuing delay for this pipe.')
qPipeDefinitionDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 4, 6, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qPipeDefinitionDelay.setStatus('mandatory')
if mibBuilder.loadTexts: qPipeDefinitionDelay.setDescription('The maximum queuing delay for this pipe.')
qPipeDefinitionPhyIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 4, 6, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qPipeDefinitionPhyIdx.setStatus('mandatory')
if mibBuilder.loadTexts: qPipeDefinitionPhyIdx.setDescription('The physical index for the port.')
qPipeDefinitionPhyType = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 4, 6, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qPipeDefinitionPhyType.setStatus('mandatory')
if mibBuilder.loadTexts: qPipeDefinitionPhyType.setDescription('The physical type for the port.')
qClassStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 4, 7), )
if mibBuilder.loadTexts: qClassStatisticsTable.setStatus('mandatory')
if mibBuilder.loadTexts: qClassStatisticsTable.setDescription('A list of Class Statistics entries. The number of entries is given by the value of qClassDefinitionMaxEntries.')
qClassStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 4, 7, 1), ).setIndexNames((0, "QWESCOM-MIB", "qClassStatisticsIndex"))
if mibBuilder.loadTexts: qClassStatisticsEntry.setStatus('mandatory')
qClassStatisticsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 4, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qClassStatisticsIndex.setStatus('mandatory')
if mibBuilder.loadTexts: qClassStatisticsIndex.setDescription('A unique value for each class stats entry. These match their corresponding Class Definition entry index.')
qClassStatisticsAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 4, 7, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qClassStatisticsAlias.setStatus('mandatory')
if mibBuilder.loadTexts: qClassStatisticsAlias.setDescription('A textual string containing user defined information about the Class Definition this stats entry relates to.')
qClassStatisticsTransmittedCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 4, 7, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qClassStatisticsTransmittedCount.setStatus('mandatory')
if mibBuilder.loadTexts: qClassStatisticsTransmittedCount.setDescription('The number of bytes transmitted.')
qClassStatisticsDiscardCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 4, 7, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qClassStatisticsDiscardCount.setStatus('mandatory')
if mibBuilder.loadTexts: qClassStatisticsDiscardCount.setDescription('The number of bytes discarded.')
qClassStatisticsFallbackCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 4, 7, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qClassStatisticsFallbackCount.setStatus('mandatory')
if mibBuilder.loadTexts: qClassStatisticsFallbackCount.setDescription("The number of bytes transmitted on the 'all others' flow.")
qatmCircuitTable = MibTable((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 5, 1), )
if mibBuilder.loadTexts: qatmCircuitTable.setStatus('mandatory')
if mibBuilder.loadTexts: qatmCircuitTable.setDescription('A list of ATM circuit entries.')
qatmCircuitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 5, 1, 1), ).setIndexNames((0, "QWESCOM-MIB", "qatmCircuitId"))
if mibBuilder.loadTexts: qatmCircuitEntry.setStatus('mandatory')
if mibBuilder.loadTexts: qatmCircuitEntry.setDescription('One entry in the table.')
qatmCircuitId = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qatmCircuitId.setStatus('mandatory')
if mibBuilder.loadTexts: qatmCircuitId.setDescription('A unique value for this circuit definition.')
qatmCircuitAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 5, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 52))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qatmCircuitAlias.setStatus('mandatory')
if mibBuilder.loadTexts: qatmCircuitAlias.setDescription('A unique alias for this circuit definition.')
qatmCircuitUNI = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qatmCircuitUNI.setStatus('mandatory')
if mibBuilder.loadTexts: qatmCircuitUNI.setDescription('The UNI interface number for this circuit.')
qatmCircuitLogicalInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qatmCircuitLogicalInterface.setStatus('mandatory')
if mibBuilder.loadTexts: qatmCircuitLogicalInterface.setDescription('The LIF to assign this Circuit to. LIF 1 is reserved as an Ethernet identifier.')
qatmCircuitVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qatmCircuitVpi.setStatus('mandatory')
if mibBuilder.loadTexts: qatmCircuitVpi.setDescription('The Virtual Path Identifier for this circuit.')
qatmCircuitFirstVci = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qatmCircuitFirstVci.setStatus('mandatory')
if mibBuilder.loadTexts: qatmCircuitFirstVci.setDescription('The Virtual Path Identifier for this circuit.')
qatmCircuitMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 5, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cell", 1), ("packet", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qatmCircuitMode.setStatus('mandatory')
if mibBuilder.loadTexts: qatmCircuitMode.setDescription('Determining the multiplexing mode for this connection.')
qatmCircuitStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 5, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("deltete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qatmCircuitStatus.setStatus('mandatory')
if mibBuilder.loadTexts: qatmCircuitStatus.setDescription('Setting a value of 1 adds/modifies an entry. Setting a value of 2 deletes a current entry.')
qatmUniTable = MibTable((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 5, 2), )
if mibBuilder.loadTexts: qatmUniTable.setStatus('mandatory')
if mibBuilder.loadTexts: qatmUniTable.setDescription('This table contains the QWES.com proprietary configuration parameters for an ATM local Interface (UNI).')
qatmUniEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 5, 2, 1), ).setIndexNames((0, "QWESCOM-MIB", "ifIndex"))
if mibBuilder.loadTexts: qatmUniEntry.setStatus('mandatory')
if mibBuilder.loadTexts: qatmUniEntry.setDescription('This list contains the QWES.com proprietary configuration parameters and state variables and is indexed by ifIndex values ATM interface.')
qatmSpanPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 25))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qatmSpanPort.setStatus('mandatory')
if mibBuilder.loadTexts: qatmSpanPort.setDescription('The SPAN port associates with this UNI.')
qatmUniName = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 5, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qatmUniName.setStatus('mandatory')
if mibBuilder.loadTexts: qatmUniName.setDescription('Unique Name for this UNI.')
qatmUniAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 5, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qatmUniAlias.setStatus('mandatory')
if mibBuilder.loadTexts: qatmUniAlias.setDescription('A textual string containing user defined information about the UNI.')
qatmUniTrapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qatmUniTrapStatus.setStatus('mandatory')
if mibBuilder.loadTexts: qatmUniTrapStatus.setDescription('Indicates whether the Link Up/Link Down traps should be generated for this interface.')
qatmUniMaxQueueDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 5, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qatmUniMaxQueueDelay.setStatus('mandatory')
if mibBuilder.loadTexts: qatmUniMaxQueueDelay.setDescription('xxxx')
qatmUniMinAllocBuffer = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 5, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qatmUniMinAllocBuffer.setStatus('mandatory')
if mibBuilder.loadTexts: qatmUniMinAllocBuffer.setDescription('xxxx')
qatmUniSharedBuffer = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 5, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qatmUniSharedBuffer.setStatus('mandatory')
if mibBuilder.loadTexts: qatmUniSharedBuffer.setDescription('xxxx')
qatmUniLinkBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 5, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qatmUniLinkBandwidth.setStatus('mandatory')
if mibBuilder.loadTexts: qatmUniLinkBandwidth.setDescription('xxxx')
qatmUniLinkDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 5, 2, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qatmUniLinkDelay.setStatus('mandatory')
if mibBuilder.loadTexts: qatmUniLinkDelay.setDescription('xxxx')
qatmUniBandwidthGranularity = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 5, 2, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qatmUniBandwidthGranularity.setStatus('mandatory')
if mibBuilder.loadTexts: qatmUniBandwidthGranularity.setDescription('xxxx')
qatmUniIlmiStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 5, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qatmUniIlmiStatus.setStatus('mandatory')
if mibBuilder.loadTexts: qatmUniIlmiStatus.setDescription('Enable/Disable ILMI function for this UNI.')
qatmUniRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 5, 2, 1, 12), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qatmUniRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: qatmUniRowStatus.setDescription('This object is used to create, delete or modify a row in this table.')
qatmVplTable = MibTable((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 5, 3), )
if mibBuilder.loadTexts: qatmVplTable.setStatus('mandatory')
if mibBuilder.loadTexts: qatmVplTable.setDescription('The Virtual Path Link (VPL) table.')
qatmVplEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 5, 3, 1), ).setIndexNames((0, "QWESCOM-MIB", "ifIndex"), (0, "QWESCOM-MIB", "ifIndex"))
if mibBuilder.loadTexts: qatmVplEntry.setStatus('mandatory')
if mibBuilder.loadTexts: qatmVplEntry.setDescription('One entry in the table.')
qatmVplMaxVcc = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 5, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qatmVplMaxVcc.setStatus('mandatory')
if mibBuilder.loadTexts: qatmVplMaxVcc.setDescription('The maximum number of VCCs initialized and active for this VPC. If the value is 0, then this VPC is only for management purposes and is not assigned to a scheduler.')
qatmVplLowestVci = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 5, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qatmVplLowestVci.setStatus('mandatory')
if mibBuilder.loadTexts: qatmVplLowestVci.setDescription('The start of a contiguous and increasing VCI range whose maximum is given by the maximum VCCs allowed.')
qatmVplMaxQueueDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 5, 3, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qatmVplMaxQueueDelay.setStatus('mandatory')
if mibBuilder.loadTexts: qatmVplMaxQueueDelay.setDescription('The maximum queueing delay in milliseconds (msec). Combining this value with the sustained rate will determine the maximum buffering allowed.')
qatmVplReservedBuffer = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 5, 3, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qatmVplReservedBuffer.setStatus('mandatory')
if mibBuilder.loadTexts: qatmVplReservedBuffer.setDescription('The minimum amount of buffering that this VCC will be allocated to use.')
qatmVplBwGranularity = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 5, 3, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qatmVplBwGranularity.setStatus('mandatory')
if mibBuilder.loadTexts: qatmVplBwGranularity.setDescription('The bandwidth granularity can be apply to this VPC.')
qatmVplMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 5, 3, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qatmVplMtu.setStatus('mandatory')
if mibBuilder.loadTexts: qatmVplMtu.setDescription('The MTU size can be apply to this VPC.')
qatmVplSharedBuffer = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 5, 3, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qatmVplSharedBuffer.setStatus('mandatory')
if mibBuilder.loadTexts: qatmVplSharedBuffer.setDescription('The amount of buffering to be assigned to a VPC for sharing on a First In First Out (FIFO) basis between flows on this VPC.')
qatmVclTable = MibTable((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 5, 4), )
if mibBuilder.loadTexts: qatmVclTable.setStatus('mandatory')
if mibBuilder.loadTexts: qatmVclTable.setDescription('The Virtual Channel Link (VCL) table.')
qatmVclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 5, 4, 1), ).setIndexNames((0, "QWESCOM-MIB", "ifIndex"), (0, "QWESCOM-MIB", "ifIndex"), (0, "QWESCOM-MIB", "ifIndex"))
if mibBuilder.loadTexts: qatmVclEntry.setStatus('mandatory')
if mibBuilder.loadTexts: qatmVclEntry.setDescription('One entry in the table.')
qatmVclBwGranularity = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 5, 4, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qatmVclBwGranularity.setStatus('mandatory')
if mibBuilder.loadTexts: qatmVclBwGranularity.setDescription('The bandwidth granularity can be apply to this VCC.')
qatmVclMaxSubChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 5, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qatmVclMaxSubChannels.setStatus('mandatory')
if mibBuilder.loadTexts: qatmVclMaxSubChannels.setDescription('The maximum number of sub-channels supported on this Virtual Circuit.')
qatmVclMaxQueueDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 5, 4, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qatmVclMaxQueueDelay.setStatus('mandatory')
if mibBuilder.loadTexts: qatmVclMaxQueueDelay.setDescription('The maximum queueing delay in milliseconds (msec). Combining this value with the sustained rate will determine the maximum buffering allowed.')
qatmVclReservedBuffer = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 5, 4, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qatmVclReservedBuffer.setStatus('mandatory')
if mibBuilder.loadTexts: qatmVclReservedBuffer.setDescription('The minimum reserved buffer in bytes that this VCC will be allocated to use.')
qatmVclSharedBuffer = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 5, 4, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qatmVclSharedBuffer.setStatus('mandatory')
if mibBuilder.loadTexts: qatmVclSharedBuffer.setDescription('The amount of buffering to be assigned to a VCC for sharing on a First In First Out (FIFO) basis between flows on this VCC.')
qatmAal5Table = MibTable((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 5, 5), )
if mibBuilder.loadTexts: qatmAal5Table.setStatus('mandatory')
if mibBuilder.loadTexts: qatmAal5Table.setDescription('The ATM Adaptation Layer 5 (Aal5) table.')
qatmAal5Entry = MibTableRow((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 5, 5, 1), ).setIndexNames((0, "QWESCOM-MIB", "ifIndex"))
if mibBuilder.loadTexts: qatmAal5Entry.setStatus('mandatory')
if mibBuilder.loadTexts: qatmAal5Entry.setDescription('One entry in the table.')
qatmAal5Uni = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 5, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 25))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qatmAal5Uni.setStatus('mandatory')
if mibBuilder.loadTexts: qatmAal5Uni.setDescription('The UNI port alias associates with this AAL5 interface.')
qatmAal5Aal5Name = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 5, 5, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qatmAal5Aal5Name.setStatus('mandatory')
if mibBuilder.loadTexts: qatmAal5Aal5Name.setDescription('The AAL5 port name.')
qatmAal5Aal5Alias = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 5, 5, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qatmAal5Aal5Alias.setStatus('mandatory')
if mibBuilder.loadTexts: qatmAal5Aal5Alias.setDescription('The alias for this AAL5 interface.')
qatmAal5AdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 5, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qatmAal5AdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: qatmAal5AdminStatus.setDescription('The desired state for this interface.')
qatmAal5TrapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 5, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qatmAal5TrapStatus.setStatus('mandatory')
if mibBuilder.loadTexts: qatmAal5TrapStatus.setDescription('Indicates whether the Link Up/Link Down traps should be generated for this interface.')
qatmAal5MtuSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 5, 5, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qatmAal5MtuSize.setStatus('mandatory')
if mibBuilder.loadTexts: qatmAal5MtuSize.setDescription('Set the largest PDU size for the AAL5 CPCS layer that cen be processed by the AAL5 entity.')
qatmAal5RowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 5, 5, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qatmAal5RowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: qatmAal5RowStatus.setDescription("Indicate the entry's status. (1..5 = add) 6 = delete.")
qatmTrafficDescriptorTable = MibTable((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 5, 6), )
if mibBuilder.loadTexts: qatmTrafficDescriptorTable.setStatus('mandatory')
if mibBuilder.loadTexts: qatmTrafficDescriptorTable.setDescription('The TrafficDescriptor table.')
qatmTrafficDescriptorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 5, 6, 1), ).setIndexNames((0, "QWESCOM-MIB", "ifIndex"))
if mibBuilder.loadTexts: qatmTrafficDescriptorEntry.setStatus('mandatory')
if mibBuilder.loadTexts: qatmTrafficDescriptorEntry.setDescription('One entry in the table.')
qatmTrafficDescriptorAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 5, 6, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qatmTrafficDescriptorAlias.setStatus('mandatory')
if mibBuilder.loadTexts: qatmTrafficDescriptorAlias.setDescription('The alias for this traffic descriptor.')
qatmTcTable = MibTable((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 5, 7), )
if mibBuilder.loadTexts: qatmTcTable.setStatus('mandatory')
if mibBuilder.loadTexts: qatmTcTable.setDescription('The ATM TC table.')
qatmTcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 5, 7, 1), ).setIndexNames((0, "QWESCOM-MIB", "ifIndex"))
if mibBuilder.loadTexts: qatmTcEntry.setStatus('mandatory')
if mibBuilder.loadTexts: qatmTcEntry.setDescription('One entry in the table.')
qatmTcCellSync = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 5, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qatmTcCellSync.setStatus('mandatory')
if mibBuilder.loadTexts: qatmTcCellSync.setDescription('The number of cell sync occurred on this Tc interface.')
qatmTcPortErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 5, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qatmTcPortErrors.setStatus('mandatory')
if mibBuilder.loadTexts: qatmTcPortErrors.setDescription('The number of errors received on this Tc interface.')
qatmTcDmaErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 5, 7, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qatmTcDmaErrors.setStatus('mandatory')
if mibBuilder.loadTexts: qatmTcDmaErrors.setDescription('The number of DMA errors received on this Tc interface.')
qatmInvalidCells = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 5, 7, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qatmInvalidCells.setStatus('mandatory')
if mibBuilder.loadTexts: qatmInvalidCells.setDescription('The number of invalid cellls received on this Tc interface.')
qatmCellsForInactiveVcc = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 5, 7, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qatmCellsForInactiveVcc.setStatus('mandatory')
if mibBuilder.loadTexts: qatmCellsForInactiveVcc.setDescription('The number of cellls received for an inactive Vcc.')
qatmAal5VccStatsTable = MibTable((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 5, 8), )
if mibBuilder.loadTexts: qatmAal5VccStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: qatmAal5VccStatsTable.setDescription('The ATM AAL5 Vcc Statistics table.')
qatmAal5VccStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 5, 8, 1), ).setIndexNames((0, "QWESCOM-MIB", "ifIndex"), (0, "QWESCOM-MIB", "ifIndex"), (0, "QWESCOM-MIB", "ifIndex"))
if mibBuilder.loadTexts: qatmAal5VccStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: qatmAal5VccStatsEntry.setDescription('One entry in the table.')
qatmAal5VccStatsInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 5, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qatmAal5VccStatsInBytes.setStatus('mandatory')
if mibBuilder.loadTexts: qatmAal5VccStatsInBytes.setDescription('The number of bytes received by this AAL5 interface.')
qatmAal5VccStatsOutBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 5, 8, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qatmAal5VccStatsOutBytes.setStatus('mandatory')
if mibBuilder.loadTexts: qatmAal5VccStatsOutBytes.setDescription('The number of bytes send by this AAL5 interface.')
qatmAal5VccStatsInSdus = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 5, 8, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qatmAal5VccStatsInSdus.setStatus('mandatory')
if mibBuilder.loadTexts: qatmAal5VccStatsInSdus.setDescription('The number of SDUs received by this AAL5 interface.')
qatmAal5VccStatsOutSdus = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 5, 8, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qatmAal5VccStatsOutSdus.setStatus('mandatory')
if mibBuilder.loadTexts: qatmAal5VccStatsOutSdus.setDescription('The number of SDUs send by this AAL5 interface.')
qatmAal5VccStatsErrsAndDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 5, 8, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qatmAal5VccStatsErrsAndDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: qatmAal5VccStatsErrsAndDiscards.setDescription('The number of error and discard packets received by this AAL5 interface.')
qatmAal5VccStatsLengthMismatchs = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 5, 8, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qatmAal5VccStatsLengthMismatchs.setStatus('mandatory')
if mibBuilder.loadTexts: qatmAal5VccStatsLengthMismatchs.setDescription('The number of length mismatched packets received by this AAL5 interface.')
qatmAal5VccStatsUserAborts = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 5, 8, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qatmAal5VccStatsUserAborts.setStatus('mandatory')
if mibBuilder.loadTexts: qatmAal5VccStatsUserAborts.setDescription('The number of packets aborted by users.')
qatmAal5VccStatsPoolDepleteds = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 5, 8, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qatmAal5VccStatsPoolDepleteds.setStatus('mandatory')
if mibBuilder.loadTexts: qatmAal5VccStatsPoolDepleteds.setDescription('The number of packets aborted by users.')
qcpStatus = MibScalar((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("down", 0), ("up", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qcpStatus.setStatus('mandatory')
if mibBuilder.loadTexts: qcpStatus.setDescription('')
qcpBaudRate = MibScalar((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 6, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("br-1200", 0), ("br-2400", 1), ("br-4800", 2), ("br-9600", 3), ("br-14400", 4), ("br-19200", 5), ("br-28800", 6), ("br-38400", 7), ("br-57600", 8), ("br-115200", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qcpBaudRate.setStatus('mandatory')
if mibBuilder.loadTexts: qcpBaudRate.setDescription('The craft port command baud rate.')
qcpStopBitLength = MibScalar((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 6, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("sb-1", 0), ("sb-2", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qcpStopBitLength.setStatus('mandatory')
if mibBuilder.loadTexts: qcpStopBitLength.setDescription('')
qcpParity = MibScalar((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 6, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("even", 0), ("odd", 1), ("none", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qcpParity.setStatus('mandatory')
if mibBuilder.loadTexts: qcpParity.setDescription('')
qcpDataBits = MibScalar((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 6, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("db-7", 0), ("db-8", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qcpDataBits.setStatus('mandatory')
if mibBuilder.loadTexts: qcpDataBits.setDescription('')
qcpCharsSent = MibScalar((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 6, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qcpCharsSent.setStatus('mandatory')
if mibBuilder.loadTexts: qcpCharsSent.setDescription('')
qcpCharsReceived = MibScalar((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 6, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qcpCharsReceived.setStatus('mandatory')
if mibBuilder.loadTexts: qcpCharsReceived.setDescription('')
qEventConfigTable = MibTable((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 8, 1), )
if mibBuilder.loadTexts: qEventConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: qEventConfigTable.setDescription('A list of Event System Configuration Entries used for viewing / changing event options')
qEventConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 8, 1, 1), ).setIndexNames((0, "QWESCOM-MIB", "qEventConfigIndex"))
if mibBuilder.loadTexts: qEventConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: qEventConfigEntry.setDescription('One entry in the table')
qEventConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 8, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qEventConfigIndex.setStatus('mandatory')
if mibBuilder.loadTexts: qEventConfigIndex.setDescription('A unique value for each event that has been logged into one of the Event Logs')
qEventSeverityType = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 8, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("fatal", 1), ("critical", 2), ("mild", 3), ("standard-snmp", 4), ("informational", 5), ("debug", 6))).clone(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: qEventSeverityType.setStatus('mandatory')
if mibBuilder.loadTexts: qEventSeverityType.setDescription('A unique value which identifies each Event Type (Severity).')
qLogFileType = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 8, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("alarm", 1), ("system", 2), ("none", 3))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qLogFileType.setStatus('mandatory')
if mibBuilder.loadTexts: qLogFileType.setDescription('A unique value which allows the selection of the type of Log file to Log events into.')
qLogOption = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 8, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qLogOption.setStatus('mandatory')
if mibBuilder.loadTexts: qLogOption.setDescription('A flag which enables(1)/disables(2) the logging feature of the Event Subsystem')
qDisplayOption = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 8, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qDisplayOption.setStatus('mandatory')
if mibBuilder.loadTexts: qDisplayOption.setDescription('A flag which enables(1)/disables(2) the display feature of the Event Subsystem')
qTrapOption = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 8, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qTrapOption.setStatus('mandatory')
if mibBuilder.loadTexts: qTrapOption.setDescription('A flag which enables(1)/disables(2) the Send Trap feature of the Event Subsystem')
qEventSystemTable = MibTable((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 8, 2), )
if mibBuilder.loadTexts: qEventSystemTable.setStatus('mandatory')
if mibBuilder.loadTexts: qEventSystemTable.setDescription('A list of Event Log Display entries used for viewing the Logs.')
qEventSystemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 8, 2, 1), ).setIndexNames((0, "QWESCOM-MIB", "qEventSystemIndex"))
if mibBuilder.loadTexts: qEventSystemEntry.setStatus('mandatory')
if mibBuilder.loadTexts: qEventSystemEntry.setDescription('One entry in the table')
qEventSystemIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 8, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qEventSystemIndex.setStatus('mandatory')
if mibBuilder.loadTexts: qEventSystemIndex.setDescription('A unique value for each event that has been logged into one of the Event Logs')
qEventSystemDateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 8, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qEventSystemDateTime.setStatus('mandatory')
if mibBuilder.loadTexts: qEventSystemDateTime.setDescription('The time of day an event occurs SNMP Community.')
qEventSystemType = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 8, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("fatal", 1), ("critical", 2), ("mild", 3), ("standard-snmp", 4), ("informational", 5), ("debug", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qEventSystemType.setStatus('mandatory')
if mibBuilder.loadTexts: qEventSystemType.setDescription('This value will be used to identify the Event Type to be displayed')
qEventSystemSubSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 8, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25))).clone(namedValues=NamedValues(("general-subsystem", 1), ("ip-subsystem", 2), ("atm-subsystem", 3), ("ethernet-subsystem", 4), ("tftp-subsystem", 5), ("telnet-subsystem", 6), ("clip-subsystem", 7), ("flash-subsystem", 8), ("flow-subsystem", 9), ("serial-subsystem", 10), ("port-manager-subsystem", 11), ("get-subsystem", 12), ("oam-subsystem", 13), ("reset-subsystem", 14), ("time-subsystem", 15), ("icmp-subsystem", 16), ("igmp-subsystem", 17), ("ping-subsystem", 18), ("snmp-subsystem", 19), ("tcp-subsystem", 20), ("upd-subsystem", 21), ("lp-subsystem", 22), ("lif-subsystem", 23), ("circuit-subsystem", 24), ("arp-subsystem", 25)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qEventSystemSubSystem.setStatus('mandatory')
if mibBuilder.loadTexts: qEventSystemSubSystem.setDescription('This value will be used to identify the Event Type to be displayed')
qEventSystemID_Number = MibScalar((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 8, 2, 1, 5), Integer32()).setLabel("qEventSystemID-Number").setMaxAccess("readonly")
if mibBuilder.loadTexts: qEventSystemID_Number.setStatus('mandatory')
if mibBuilder.loadTexts: qEventSystemID_Number.setDescription('A unique value for each event that has been logged into one of the Event Logs')
qEventSystemDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 8, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qEventSystemDescription.setStatus('mandatory')
if mibBuilder.loadTexts: qEventSystemDescription.setDescription('A textual string containing the Description of the occurred Event.')
qEventAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 8, 3), )
if mibBuilder.loadTexts: qEventAlarmTable.setStatus('mandatory')
if mibBuilder.loadTexts: qEventAlarmTable.setDescription('A list of Event Log Display entries used for viewing the Logs.')
qEventAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 8, 3, 1), ).setIndexNames((0, "QWESCOM-MIB", "qEventAlarmIndex"))
if mibBuilder.loadTexts: qEventAlarmEntry.setStatus('mandatory')
if mibBuilder.loadTexts: qEventAlarmEntry.setDescription('One entry in the table')
qEventAlarmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 8, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qEventAlarmIndex.setStatus('mandatory')
if mibBuilder.loadTexts: qEventAlarmIndex.setDescription('A unique value for each event that has been logged into one of the Event Logs')
qEventAlarmDateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 8, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qEventAlarmDateTime.setStatus('mandatory')
if mibBuilder.loadTexts: qEventAlarmDateTime.setDescription('The time of day an event occurs SNMP Community.')
qEventAlarmType = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 8, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("fatal", 1), ("critical", 2), ("mild", 3), ("standard-snmp", 4), ("informational", 5), ("debug", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qEventAlarmType.setStatus('mandatory')
if mibBuilder.loadTexts: qEventAlarmType.setDescription('This value will be used to identify the Event Type to be displayed')
qEventAlarmSubSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 8, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25))).clone(namedValues=NamedValues(("general-subsystem", 1), ("ip-subsystem", 2), ("atm-subsystem", 3), ("ethernet-subsystem", 4), ("tftp-subsystem", 5), ("telnet-subsystem", 6), ("clip-subsystem", 7), ("flash-subsystem", 8), ("flow-subsystem", 9), ("serial-subsystem", 10), ("port-manager-subsystem", 11), ("get-subsystem", 12), ("oam-subsystem", 13), ("reset-subsystem", 14), ("time-subsystem", 15), ("icmp-subsystem", 16), ("igmp-subsystem", 17), ("ping-subsystem", 18), ("snmp-subsystem", 19), ("tcp-subsystem", 20), ("upd-subsystem", 21), ("lp-subsystem", 22), ("lif-subsystem", 23), ("circuit-subsystem", 24), ("arp-subsystem", 25)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qEventAlarmSubSystem.setStatus('mandatory')
if mibBuilder.loadTexts: qEventAlarmSubSystem.setDescription('This value will be used to identify the Event Type to be displayed')
qEventAlarmID_Number = MibScalar((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 8, 3, 1, 5), Integer32()).setLabel("qEventAlarmID-Number").setMaxAccess("readonly")
if mibBuilder.loadTexts: qEventAlarmID_Number.setStatus('mandatory')
if mibBuilder.loadTexts: qEventAlarmID_Number.setDescription('A unique value for each event that has been logged into one of the Event Logs')
qEventAlarmDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 8, 3, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qEventAlarmDescription.setStatus('mandatory')
if mibBuilder.loadTexts: qEventAlarmDescription.setDescription('A textual string containing the Description of the occurred Event.')
qipExt = MibIdentifier((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 9, 1))
qarpExt = MibIdentifier((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 9, 2))
qripExt = MibIdentifier((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 9, 3))
qipCircExtTable = MibTable((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 9, 1, 1), )
if mibBuilder.loadTexts: qipCircExtTable.setStatus('mandatory')
if mibBuilder.loadTexts: qipCircExtTable.setDescription('Table of IP circuit parameters')
qipCircExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 9, 1, 1, 1), ).setIndexNames((0, "QWESCOM-MIB", "qipCircExtIndex"))
if mibBuilder.loadTexts: qipCircExtEntry.setStatus('mandatory')
if mibBuilder.loadTexts: qipCircExtEntry.setDescription('A circuits IP parameters')
qipCircExtIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 9, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qipCircExtIndex.setStatus('mandatory')
if mibBuilder.loadTexts: qipCircExtIndex.setDescription('An index value which uniquely identifies this circuit within the router. This may or may not be related to the physical interface index.')
qipCircExtIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 9, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qipCircExtIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: qipCircExtIfIndex.setDescription('An index value which uniquely identifies the local physical interface which this circuit uses. This value identifies the same interface identified by ifIndex in MIB-2.')
qipCircExtAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 9, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qipCircExtAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: qipCircExtAdminState.setDescription('Enable or disable the operation of IP on the specified interface.')
qipCircExtOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 9, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qipCircExtOperState.setStatus('mandatory')
if mibBuilder.loadTexts: qipCircExtOperState.setDescription('The operational state of the circuit. May or may not be the same as administrative state.')
qarpExtTtl = MibScalar((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 9, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qarpExtTtl.setStatus('mandatory')
if mibBuilder.loadTexts: qarpExtTtl.setDescription('The lifetime of an ARP entry within the router.')
qarpCircExtTable = MibTable((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 9, 2, 2), )
if mibBuilder.loadTexts: qarpCircExtTable.setStatus('mandatory')
if mibBuilder.loadTexts: qarpCircExtTable.setDescription('Table of ARP circuit parameters')
qarpCircExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 9, 2, 2, 1), ).setIndexNames((0, "QWESCOM-MIB", "qarpCircExtIndex"))
if mibBuilder.loadTexts: qarpCircExtEntry.setStatus('mandatory')
if mibBuilder.loadTexts: qarpCircExtEntry.setDescription('A circuits ARP parameters')
qarpCircExtIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 9, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qarpCircExtIndex.setStatus('mandatory')
if mibBuilder.loadTexts: qarpCircExtIndex.setDescription('An index value which uniquely identifies this circuit within the router. This may or may not be related to the physical interface index.')
qarpCircExtIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 9, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qarpCircExtIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: qarpCircExtIfIndex.setDescription('An index value which uniquely identifies the local physical interface which this circuit uses. This value identifies the same interface identified by ifIndex in MIB-2.')
qarpCircExtDoProxy = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 9, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qarpCircExtDoProxy.setStatus('mandatory')
if mibBuilder.loadTexts: qarpCircExtDoProxy.setDescription('Enable or disable ARP proxy responses on the specified interface.')
qarpCircExtDoResp = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 9, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qarpCircExtDoResp.setStatus('mandatory')
if mibBuilder.loadTexts: qarpCircExtDoResp.setDescription('Enable or disable the sending of ARP responses on specified circuit.')
qripExtAdminState = MibScalar((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 9, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qripExtAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: qripExtAdminState.setDescription('Enable or disable the operation of RIP on all interfaces.')
qripExtUpdateTime = MibScalar((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 9, 3, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qripExtUpdateTime.setStatus('mandatory')
if mibBuilder.loadTexts: qripExtUpdateTime.setDescription('The time between transmission of RIP updates.')
qripCircExtTable = MibTable((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 9, 3, 3), )
if mibBuilder.loadTexts: qripCircExtTable.setStatus('mandatory')
if mibBuilder.loadTexts: qripCircExtTable.setDescription('Table of RIP circuit parameters')
qripCircExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 9, 3, 3, 1), ).setIndexNames((0, "QWESCOM-MIB", "qripCircExtIndex"))
if mibBuilder.loadTexts: qripCircExtEntry.setStatus('mandatory')
if mibBuilder.loadTexts: qripCircExtEntry.setDescription('A circuits RIP parameters')
qripCircExtIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 9, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qripCircExtIndex.setStatus('mandatory')
if mibBuilder.loadTexts: qripCircExtIndex.setDescription('An index value which uniquely identifies this circuit within the router. This may or may not be related to the physical interface index.')
qripCircExtIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 9, 3, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qripCircExtIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: qripCircExtIfIndex.setDescription('An index value which uniquely identifies the local physical interface which this circuit uses. This value identifies the same interface identified by ifIndex in MIB-2.')
qripCircExtTalk = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 9, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qripCircExtTalk.setStatus('mandatory')
if mibBuilder.loadTexts: qripCircExtTalk.setDescription('Enable or disable RIP transmission on the specified interface.')
qripCircExtListen = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 9, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qripCircExtListen.setStatus('mandatory')
if mibBuilder.loadTexts: qripCircExtListen.setDescription('Enable or disable RIP reception on the specified interface.')
qripCircExtPoison = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 9, 3, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qripCircExtPoison.setStatus('mandatory')
if mibBuilder.loadTexts: qripCircExtPoison.setDescription('Enable or disable operation of poison reverse on the specified interface. If poison is disabled, split-horzon operation is enabled.')
qmrCheckSum = MibScalar((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 10, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qmrCheckSum.setStatus('mandatory')
if mibBuilder.loadTexts: qmrCheckSum.setDescription('The checksum of the manufacturing record.')
qmrBurnDate = MibScalar((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 10, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qmrBurnDate.setStatus('mandatory')
if mibBuilder.loadTexts: qmrBurnDate.setDescription('The Date the manufacturing record was burned into flash.')
qmrBurnTime = MibScalar((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 10, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qmrBurnTime.setStatus('mandatory')
if mibBuilder.loadTexts: qmrBurnTime.setDescription('The time the manufacturing record was burned into flash.')
qmrOemName = MibScalar((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 10, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qmrOemName.setStatus('mandatory')
if mibBuilder.loadTexts: qmrOemName.setDescription('The OEM Name of the unit.')
qmrOemID = MibScalar((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 10, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qmrOemID.setStatus('mandatory')
if mibBuilder.loadTexts: qmrOemID.setDescription('The OEM ID of the unit.')
qmrSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 10, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qmrSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: qmrSerialNumber.setDescription('The serial number of the unit.')
qmrProductID = MibScalar((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 10, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("qwes-span", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qmrProductID.setStatus('mandatory')
if mibBuilder.loadTexts: qmrProductID.setDescription('The product ID of the unit.')
qmrModelID = MibScalar((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 10, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("prototype", 1), ("rev3", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qmrModelID.setStatus('mandatory')
if mibBuilder.loadTexts: qmrModelID.setDescription('The model ID of the unit.')
qmrMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 10, 9), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qmrMacAddress.setStatus('mandatory')
if mibBuilder.loadTexts: qmrMacAddress.setDescription('The MAC address of the unit.')
qmrRepairTable = MibTable((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 10, 10), ).setMaxAccess("readonly")
if mibBuilder.loadTexts: qmrRepairTable.setStatus('mandatory')
if mibBuilder.loadTexts: qmrRepairTable.setDescription('List of Repairs performed on the unit.')
qmrRepairEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 10, 10, 1), ).setMaxAccess("readonly").setIndexNames((0, "QWESCOM-MIB", "qmrRepType"), (0, "QWESCOM-MIB", "qmrRepCode"))
if mibBuilder.loadTexts: qmrRepairEntry.setStatus('mandatory')
if mibBuilder.loadTexts: qmrRepairEntry.setDescription('List of Repairs performed on the unit.')
qmrRepType = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 10, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("repair", 1), ("eco", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qmrRepType.setStatus('mandatory')
if mibBuilder.loadTexts: qmrRepType.setDescription('The Type of the repair.')
qmrRepCode = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 10, 10, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qmrRepCode.setStatus('mandatory')
if mibBuilder.loadTexts: qmrRepCode.setDescription('The code of the repair.')
qmrRepDate = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 10, 10, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qmrRepDate.setStatus('mandatory')
if mibBuilder.loadTexts: qmrRepDate.setDescription('The date of the repair.')
qmrRepTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 10, 10, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qmrRepTime.setStatus('mandatory')
if mibBuilder.loadTexts: qmrRepTime.setDescription('The time of the repair.')
qethernetCfgTable = MibTable((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 11, 1), )
if mibBuilder.loadTexts: qethernetCfgTable.setStatus('mandatory')
if mibBuilder.loadTexts: qethernetCfgTable.setDescription('A list of Ethernet Configuration entries. The maximum number is based on the maximum interfaces.')
qethernetCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 11, 1, 1), ).setIndexNames((0, "QWESCOM-MIB", "ifIndex"))
if mibBuilder.loadTexts: qethernetCfgEntry.setStatus('mandatory')
if mibBuilder.loadTexts: qethernetCfgEntry.setDescription('The Ethernet configuration information for each Ethernet interface.')
qethernetMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 11, 1, 1, 1), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qethernetMacAddress.setStatus('mandatory')
if mibBuilder.loadTexts: qethernetMacAddress.setDescription("The ethernet's physical address. An six byte hexidecimal identifier, which identifies the interface on the physical media.")
qethernetSpeedMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 11, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("full-duplex-100-mbps", 1), ("full-duplex-10-mbps", 2), ("half-duplex-100-mbps", 3), ("half-duplex-10-mbps", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qethernetSpeedMode.setStatus('mandatory')
if mibBuilder.loadTexts: qethernetSpeedMode.setDescription('The Ethernet chipset has five available modes: (1) 100-MBPS-FULL-DUPLEX - sets ethernet chipset to 100 mbps, full duplex mode; (2) 10-MBPS-FULL-DUPLEX - sets ethernet chipset to 10 mbps, full duplex mode; (3) 100-MBPS-HALF-DUPLEX - sets ethernet chipset to 100 mbps, half duplex mode; (4) 10-MBPS-HALF-DUPLEX - sets ethernet chipset to 10 mbps, half duplex mode.')
qethernetEncapsulation = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 11, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("etherv2encap", 1), ("ieee8023encap", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qethernetEncapsulation.setStatus('mandatory')
if mibBuilder.loadTexts: qethernetEncapsulation.setDescription('The flag which sets the ethernets encapsulation type. 1 = Ethernet Version 2 encapsulation; 2 = IEEE 802.3 encapsulation.')
qethernetAutoSense = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 11, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qethernetAutoSense.setStatus('mandatory')
if mibBuilder.loadTexts: qethernetAutoSense.setDescription('This object is used to negotiate the speed/duplex. The default is set to YES (1) - which negotiates from the configured speed/duplex (qethernetSpeedMode) or lower. When set to NO (2) - this forces the configured speed/duplex mode and will not establish a link unless the other end complies.')
qethernetName = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 11, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qethernetName.setStatus('mandatory')
if mibBuilder.loadTexts: qethernetName.setDescription('This object is used to???')
qethernetCurrentSpeedMode = MibScalar((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 11, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("full-duplex-100-mbps", 1), ("full-duplex-10-mbps", 2), ("half-duplex-100-mbps", 3), ("half-duplex-10-mbps", 4), ("no-link", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qethernetCurrentSpeedMode.setStatus('mandatory')
if mibBuilder.loadTexts: qethernetCurrentSpeedMode.setDescription("The Ethernet chipset has four available modes or operation: (1) 100-MBPS-FULL-DUPLEX - sets ethernet chipset to 100 mbps, full duplex mode; (2) 10-MBPS-FULL-DUPLEX - sets ethernet chipset to 10 mbps, full duplex mode; (3) 100-MBPS-HALF-DUPLEX - sets ethernet chipset to 100 mbps, half duplex mode; (4) 10-MBPS-HALF-DUPLEX - sets ethernet chipset to 10 mbps, half duplex mode. This object will provide the current speed/duplex achieved or 'No Link'.")
qds1AutoClockSourceSearching = MibScalar((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 12, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qds1AutoClockSourceSearching.setStatus('mandatory')
if mibBuilder.loadTexts: qds1AutoClockSourceSearching.setDescription('Selecting (1) YES will allow the Policy Point unit to automatically select the next available SPAN to provide clock if the Primary Clock Source fails. Selecting (2) NO will instruct the unit to ignore all clock source ports except the primary source clock port.')
qds1PrimaryClockSource = MibScalar((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 12, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("span-1", 2), ("span-2", 3), ("span-3", 4), ("span-4", 5), ("span-5", 6), ("span-6", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qds1PrimaryClockSource.setStatus('mandatory')
if mibBuilder.loadTexts: qds1PrimaryClockSource.setDescription("Identifies the unit's primary clock source. The first SPAN port - (2) SPAN-1; the second SPAN port - (3) SPAN-2; the third SPAN port - (4) SPAN-3; the fourth SPAN port - (5) SPAN-4; the fifth SPAN port - (6) SPAN-5; the sixth SPAN port - (7) SPAN-6.")
qds1PrimaryClockSourceAction = MibScalar((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 12, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("use-current-source", 1), ("restore-to-primary-source", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qds1PrimaryClockSourceAction.setStatus('mandatory')
if mibBuilder.loadTexts: qds1PrimaryClockSourceAction.setDescription('Instructs the Span unit to (1) USE-CURRENT-SOURCE - stay with the current source clock, or (2) RETURN-TO-PRIMARY-SOURCE - restore the clock to the primary clock source.')
qds1SpanCfgTable = MibTable((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 12, 4), )
if mibBuilder.loadTexts: qds1SpanCfgTable.setStatus('mandatory')
if mibBuilder.loadTexts: qds1SpanCfgTable.setDescription('A list of Span Configuration entries. The maximum number is based on the maximum interfaces.')
qds1SpanCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 12, 4, 1), ).setIndexNames((0, "QWESCOM-MIB", "qds1LineCfgIndex"))
if mibBuilder.loadTexts: qds1SpanCfgEntry.setStatus('mandatory')
if mibBuilder.loadTexts: qds1SpanCfgEntry.setDescription('The DS1/E1 configuration information for each DS1/E1 interface.')
qds1LineCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 12, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qds1LineCfgIndex.setStatus('mandatory')
if mibBuilder.loadTexts: qds1LineCfgIndex.setDescription("A unique value which identifies a DS1/E1 interface. This value 'should' be made equal to the ifIndex, however, this may not be the case, but will have an internal association with the ifEntry.")
qds1LineBuildOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 12, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("line-build-out-133-ft", 1), ("line-build-out-266-ft", 2), ("line-build-out-399-ft", 3), ("line-build-out-533-ft", 4), ("line-build-out-655-ft", 5), ("line-build-out-n7-5db", 6), ("line-build-out-n15db", 7), ("line-build-out-n22-5db", 8), ("not-applicable", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qds1LineBuildOut.setStatus('mandatory')
if mibBuilder.loadTexts: qds1LineBuildOut.setDescription('The Line Build Out specification for the DS1/E1 interface. NOTE: (1) represents not only the LINE-BUILD-OUT-133-FT, but also 0 db CSU.')
qds1ClockSourceEligibility = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 12, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("eligible", 1), ("ineligible", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qds1ClockSourceEligibility.setStatus('mandatory')
if mibBuilder.loadTexts: qds1ClockSourceEligibility.setDescription('Identifies whether the DS1/E1 interface is eligible to be the source clock or not.')
qds1ClockMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 12, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("slavetonetwork", 1), ("providemasterclock", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qds1ClockMode.setStatus('mandatory')
if mibBuilder.loadTexts: qds1ClockMode.setDescription("Identifies the clock's mode of operation. Setting the clock mode to (1) will allow the interface to act as the slave to the network clock, and setting the mode to (2) will allow the unit's interface to provide the master clock.")
qds1PerformanceMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 12, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qds1PerformanceMonitor.setStatus('optional')
if mibBuilder.loadTexts: qds1PerformanceMonitor.setDescription('Indicates whether or not performance monitoring will be transmitted on this interface. ENABLE (1) will transmit the performance report according to the ANSI T1.403-1995 standard. The performance report contains performance information for each of the four previous one-second intervals.')
qds1Scrambler = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 12, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qds1Scrambler.setStatus('optional')
if mibBuilder.loadTexts: qds1Scrambler.setDescription('Indicates whether or not scrambling of data is being generated on this interface. ENABLE (1) will transmit the scrambled data according to the ITU-T 0.191 Recommendation; DISABLE (2) will not scramble the data. NOTE: A T1 interface will NOT support scrambling, and therefore will be DISABLED.')
qds1SpanLoopBackCmdTable = MibTable((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 12, 5), )
if mibBuilder.loadTexts: qds1SpanLoopBackCmdTable.setStatus('mandatory')
if mibBuilder.loadTexts: qds1SpanLoopBackCmdTable.setDescription('A list of Span Loopback Configuration entries. The maximum number is based on the maximum DS1/E1 interfaces.')
qds1SpanLoopBackCmdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 12, 5, 1), ).setIndexNames((0, "QWESCOM-MIB", "qds1LineLoopbackIndex"))
if mibBuilder.loadTexts: qds1SpanLoopBackCmdEntry.setStatus('mandatory')
if mibBuilder.loadTexts: qds1SpanLoopBackCmdEntry.setDescription('The DS1/E1 loopback configuration information for each DS1/E1 interface.')
qds1LineLoopbackIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 12, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qds1LineLoopbackIndex.setStatus('mandatory')
if mibBuilder.loadTexts: qds1LineLoopbackIndex.setDescription('A unique value which identifies DS1/E1 interface. This value should be made equal to the ifIndex.')
qds1LoopbackCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 12, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("activate", 1), ("deactivate", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qds1LoopbackCommand.setStatus('mandatory')
if mibBuilder.loadTexts: qds1LoopbackCommand.setDescription('This object is used to (1) ACTIVATE the configured loopback on the selected interface (qds1LineIndex) of the specified entity. If the dsx1OtherLoop (4) has been configured (see rfc2495 - dsx1LoopbackConfig), the supported loopback is the Local Port Loopback (LPL). The Local Port Loopback is used to validate the ability to send and receive data to the local DS1/E1 interface. LPL will use OAM flow to verify data transfer. Normal OAM flows are discontinued and an F4 OAM segment flow is automatically started on VPI=0, VCI=3 with a repeat timer of 1 second. When the loopback is set to (2) DEACTIVATE or comes to completion, the previous OAM configuration flows are restored.')
qds1LoopbackDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 12, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qds1LoopbackDuration.setStatus('mandatory')
if mibBuilder.loadTexts: qds1LoopbackDuration.setDescription('The value indicates the duration (in SECONDS) that the Loopback will be in process.')
qds1SpanLoopBackStatsTable = MibTable((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 12, 6), )
if mibBuilder.loadTexts: qds1SpanLoopBackStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: qds1SpanLoopBackStatsTable.setDescription('A list of Span Loopback Statistics for each entries. The maximum number is based on the maximum DS1/E1 interfaces.')
qds1SpanLoopBackStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 12, 6, 1), ).setIndexNames((0, "QWESCOM-MIB", "qds1LineLoopbackStatIndex"))
if mibBuilder.loadTexts: qds1SpanLoopBackStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: qds1SpanLoopBackStatsEntry.setDescription('The DS1/E1 loopback statistics information foreach DS1/E1 interface.')
qds1LineLoopbackStatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 12, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qds1LineLoopbackStatIndex.setStatus('mandatory')
if mibBuilder.loadTexts: qds1LineLoopbackStatIndex.setDescription('A unique value which identifies DS1/E1 interface. This value should be made equal to the ifIndex.')
qds1OamSegmentSent = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 12, 6, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qds1OamSegmentSent.setStatus('mandatory')
if mibBuilder.loadTexts: qds1OamSegmentSent.setDescription('The total number of segment OAM messages transmitted on the DS1/E1 interface in question for the duration of the test.')
qds1OamSegmentReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 12, 6, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qds1OamSegmentReceived.setStatus('mandatory')
if mibBuilder.loadTexts: qds1OamSegmentReceived.setDescription('The total number of segment OAM messages received on the DS1/E1 interface in question for the duration of the test.')
qds1OamSegmentFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 12, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qds1OamSegmentFailures.setStatus('mandatory')
if mibBuilder.loadTexts: qds1OamSegmentFailures.setDescription('The total number of segment OAM messages timed out on the DS1/E1 interface in question for the duration of the test.')
qds10amRunnigTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 12, 6, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qds10amRunnigTime.setStatus('mandatory')
if mibBuilder.loadTexts: qds10amRunnigTime.setDescription('This is running time for the loop back.')
qcmSystemFile = MibScalar((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 13, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qcmSystemFile.setStatus('mandatory')
if mibBuilder.loadTexts: qcmSystemFile.setDescription('The name of the configuration file to edit.')
qcmConfigMaxEntries = MibScalar((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 13, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qcmConfigMaxEntries.setStatus('mandatory')
if mibBuilder.loadTexts: qcmConfigMaxEntries.setDescription('The number of Configuration entries.')
qcmConfigTable = MibTable((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 13, 3), )
if mibBuilder.loadTexts: qcmConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: qcmConfigTable.setDescription('A list of configuration file entries. The number of entries is given by the value of qcmConfigMaxEntries.')
qcmConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 13, 3, 1), ).setIndexNames((0, "QWESCOM-MIB", "qcmTableIndex"))
if mibBuilder.loadTexts: qcmConfigEntry.setStatus('mandatory')
qcmTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 13, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qcmTableIndex.setStatus('mandatory')
if mibBuilder.loadTexts: qcmTableIndex.setDescription('A unique value for each config file.')
qcmCurrentConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 13, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qcmCurrentConfig.setStatus('mandatory')
if mibBuilder.loadTexts: qcmCurrentConfig.setDescription('Flag that indicates if this record is the current operational configuration.')
qcmActionOnConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 13, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 0), ("delete", 1), ("activatenow", 2), ("activatelater", 3), ("save", 4), ("saveas", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qcmActionOnConfig.setStatus('mandatory')
if mibBuilder.loadTexts: qcmActionOnConfig.setDescription('Operations that can be performed on the current table record.')
qcmFileAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 13, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qcmFileAlias.setStatus('mandatory')
if mibBuilder.loadTexts: qcmFileAlias.setDescription("The file alias name of the 'release' / 'configuration file' pair.")
qcmRelease = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 13, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qcmRelease.setStatus('mandatory')
if mibBuilder.loadTexts: qcmRelease.setDescription('The name of the release file (executable).')
qcmConfigFile = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 13, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qcmConfigFile.setStatus('mandatory')
if mibBuilder.loadTexts: qcmConfigFile.setDescription('The name of the configuration file.')
qcmBootSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 13, 3, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qcmBootSequence.setStatus('mandatory')
if mibBuilder.loadTexts: qcmBootSequence.setDescription('The boot sequence.')
qcmCreateDateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 13, 3, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qcmCreateDateTime.setStatus('mandatory')
if mibBuilder.loadTexts: qcmCreateDateTime.setDescription('The creation date and time of the configuration file.')
qcmOperSchedDateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 13, 3, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qcmOperSchedDateTime.setStatus('mandatory')
if mibBuilder.loadTexts: qcmOperSchedDateTime.setDescription('The date and time the configuration file became operational.')
qcmReleaseTable = MibTable((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 13, 4), )
if mibBuilder.loadTexts: qcmReleaseTable.setStatus('mandatory')
if mibBuilder.loadTexts: qcmReleaseTable.setDescription('A list of Release file entries.')
qcmReleaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 13, 4, 1), ).setIndexNames((0, "QWESCOM-MIB", "qcmReleaseIndex"))
if mibBuilder.loadTexts: qcmReleaseEntry.setStatus('mandatory')
qcmReleaseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 13, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qcmReleaseIndex.setStatus('mandatory')
if mibBuilder.loadTexts: qcmReleaseIndex.setDescription('A unique value for each Release file.')
qcmReleaseName = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 13, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qcmReleaseName.setStatus('mandatory')
if mibBuilder.loadTexts: qcmReleaseName.setDescription('The name of a release file.')
qcmReleaseVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 13, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qcmReleaseVersion.setStatus('mandatory')
if mibBuilder.loadTexts: qcmReleaseVersion.setDescription('The version of the release file.')
qcmConfigVerTable = MibTable((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 13, 5), )
if mibBuilder.loadTexts: qcmConfigVerTable.setStatus('mandatory')
if mibBuilder.loadTexts: qcmConfigVerTable.setDescription('A list of Config file entries.')
qcmConfigVerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 13, 5, 1), ).setIndexNames((0, "QWESCOM-MIB", "qcmConfigVerIndex"))
if mibBuilder.loadTexts: qcmConfigVerEntry.setStatus('mandatory')
qcmConfigVerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 13, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qcmConfigVerIndex.setStatus('mandatory')
if mibBuilder.loadTexts: qcmConfigVerIndex.setDescription('A unique value for each Config file.')
qcmConfigName = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 13, 5, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qcmConfigName.setStatus('mandatory')
if mibBuilder.loadTexts: qcmConfigName.setDescription('The name of a Config file.')
qcmConfigVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 13, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qcmConfigVersion.setStatus('mandatory')
if mibBuilder.loadTexts: qcmConfigVersion.setDescription('The version of the Config file.')
qcmConfigWorkWithMin = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 13, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qcmConfigWorkWithMin.setStatus('mandatory')
if mibBuilder.loadTexts: qcmConfigWorkWithMin.setDescription('The minimum version of a Release file the Config file is compatable with.')
qcmConfigWorkWithMax = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 13, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qcmConfigWorkWithMax.setStatus('mandatory')
if mibBuilder.loadTexts: qcmConfigWorkWithMax.setDescription('The maximum version of a Release file the Config file is compatable with.')
qcmWhichFile = MibScalar((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 13, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("operational", 0), ("base", 1), ("new", 2), ("default", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qcmWhichFile.setStatus('mandatory')
if mibBuilder.loadTexts: qcmWhichFile.setDescription('Which file to do SNMP GETs and SETS on.')
qcmUserBaseCfgFile = MibScalar((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 13, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qcmUserBaseCfgFile.setStatus('mandatory')
if mibBuilder.loadTexts: qcmUserBaseCfgFile.setDescription('The name of the configuration file to edit.')
qcmUserNewCfgFile = MibScalar((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 13, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qcmUserNewCfgFile.setStatus('mandatory')
if mibBuilder.loadTexts: qcmUserNewCfgFile.setDescription('The name of the new configuration file.')
qcmUserFileAlias = MibScalar((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 13, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qcmUserFileAlias.setStatus('mandatory')
if mibBuilder.loadTexts: qcmUserFileAlias.setDescription('The file alias of the system file.')
qcmUserRelease = MibScalar((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 13, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qcmUserRelease.setStatus('mandatory')
if mibBuilder.loadTexts: qcmUserRelease.setDescription('The name of the release file.')
qcmUserBootSequence = MibScalar((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 13, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qcmUserBootSequence.setStatus('mandatory')
if mibBuilder.loadTexts: qcmUserBootSequence.setDescription('The boot sequence.')
qcmUserDateTime = MibScalar((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 13, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qcmUserDateTime.setStatus('mandatory')
if mibBuilder.loadTexts: qcmUserDateTime.setDescription('The date and time LDF is be scheduled.')
qcmStartConfig = MibScalar((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 13, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qcmStartConfig.setStatus('mandatory')
if mibBuilder.loadTexts: qcmStartConfig.setDescription('Start the configuration process.')
qcmStopConfig = MibScalar((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 13, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qcmStopConfig.setStatus('mandatory')
if mibBuilder.loadTexts: qcmStopConfig.setDescription('Stop and Save the current configuration process.')
qcmStartViewConfig = MibScalar((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 13, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qcmStartViewConfig.setStatus('mandatory')
if mibBuilder.loadTexts: qcmStartViewConfig.setDescription('Start viewing a configuration file.')
qcmStopViewConfig = MibScalar((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 13, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qcmStopViewConfig.setStatus('mandatory')
if mibBuilder.loadTexts: qcmStopViewConfig.setDescription('Stop viewing a configuration file.')
qcmCancelConfig = MibScalar((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 13, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qcmCancelConfig.setStatus('mandatory')
if mibBuilder.loadTexts: qcmCancelConfig.setDescription('Cancel the current configuration process.')
qwesLpTable = MibTable((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 15, 1), )
if mibBuilder.loadTexts: qwesLpTable.setStatus('mandatory')
if mibBuilder.loadTexts: qwesLpTable.setDescription('A list of Logical Port entries.')
qwesLpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 15, 1, 1), ).setIndexNames((0, "QWESCOM-MIB", "ifIndex"))
if mibBuilder.loadTexts: qwesLpEntry.setStatus('mandatory')
if mibBuilder.loadTexts: qwesLpEntry.setDescription('One entry in the table.')
qwesLpName = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 15, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qwesLpName.setStatus('current')
if mibBuilder.loadTexts: qwesLpName.setDescription('Display the name for the Logical Port.')
qwesLpAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 15, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qwesLpAlias.setStatus('current')
if mibBuilder.loadTexts: qwesLpAlias.setDescription('Enter an alias for the Logical Port Inteface name that has significant to your organization.')
qwesLpPhysicalInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 15, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qwesLpPhysicalInterface.setStatus('mandatory')
if mibBuilder.loadTexts: qwesLpPhysicalInterface.setDescription('The physical port that this Logical Port associated.')
qwesLpDataLinkInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 15, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(25, 88))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qwesLpDataLinkInterface.setStatus('mandatory')
if mibBuilder.loadTexts: qwesLpDataLinkInterface.setDescription('The data link port that this Logical Port associated.')
qwesLpTrapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 15, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qwesLpTrapStatus.setStatus('mandatory')
if mibBuilder.loadTexts: qwesLpTrapStatus.setDescription('Indicates whether the Link Up/Link Down traps should be generated for this interface.')
qwesLpAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 15, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qwesLpAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: qwesLpAdminStatus.setDescription('The desired state of the interface set by management.')
qwesLpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 15, 1, 1, 7), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qwesLpRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: qwesLpRowStatus.setDescription('This object is used to create a new row or modify or delete an existing row in this table.')
qwesLifTable = MibTable((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 15, 2), )
if mibBuilder.loadTexts: qwesLifTable.setStatus('mandatory')
if mibBuilder.loadTexts: qwesLifTable.setDescription('A list of Logical Interface entries.')
qwesLifEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 15, 2, 1), ).setIndexNames((0, "QWESCOM-MIB", "ifIndex"))
if mibBuilder.loadTexts: qwesLifEntry.setStatus('mandatory')
if mibBuilder.loadTexts: qwesLifEntry.setDescription('One entry in the table.')
qwesLifName = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 15, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qwesLifName.setStatus('current')
if mibBuilder.loadTexts: qwesLifName.setDescription('The name for the Logical Port.')
qwesLifAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 15, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qwesLifAlias.setStatus('current')
if mibBuilder.loadTexts: qwesLifAlias.setDescription('The alias for the logical inteface name that has significant to your organization.')
qwesLifLpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 15, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(257, 512))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qwesLifLpIndex.setStatus('mandatory')
if mibBuilder.loadTexts: qwesLifLpIndex.setDescription('The logical port (LP) number that this logical interface has an association with.')
qwesLifTrapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 15, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qwesLifTrapStatus.setStatus('mandatory')
if mibBuilder.loadTexts: qwesLifTrapStatus.setDescription('Indicates whether the Link Up/Link Down traps should be generated for this interface.')
qwesLifAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 15, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qwesLifAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: qwesLifAdminStatus.setDescription('The desired state of the interface set by management.')
qwesLifRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 15, 2, 1, 6), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qwesLifRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: qwesLifRowStatus.setDescription('This object is used to create a new row or modify or delete an existing row in this table.')
qwesAtmArpTable = MibTable((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 15, 3), )
if mibBuilder.loadTexts: qwesAtmArpTable.setStatus('mandatory')
if mibBuilder.loadTexts: qwesAtmArpTable.setDescription('A list of ATM ARP entries.')
qwesAtmArpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 15, 3, 1), ).setIndexNames((0, "QWESCOM-MIB", "ifIndex"))
if mibBuilder.loadTexts: qwesAtmArpEntry.setStatus('mandatory')
if mibBuilder.loadTexts: qwesAtmArpEntry.setDescription('One entry in the table.')
qwesAtmArpLifIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 15, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qwesAtmArpLifIndex.setStatus('mandatory')
if mibBuilder.loadTexts: qwesAtmArpLifIndex.setDescription('The logical interfacne (LIF) number that this ATM ARP entry has an association with.')
qSysTime = MibScalar((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 17, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 28))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qSysTime.setStatus('mandatory')
if mibBuilder.loadTexts: qSysTime.setDescription('System Time in GMT.')
qTftpType = MibScalar((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 17, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qTftpType.setStatus('mandatory')
if mibBuilder.loadTexts: qTftpType.setDescription('The file upload type. 1 = operational, 2 = config')
qTftpFileName = MibScalar((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 17, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qTftpFileName.setStatus('mandatory')
if mibBuilder.loadTexts: qTftpFileName.setDescription('Local filename to download into. If it exists, it WILL be overwritten.')
qTftpServerIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 17, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qTftpServerIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: qTftpServerIpAddress.setDescription("Server's IP address")
qTftpServerFileName = MibScalar((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 17, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qTftpServerFileName.setStatus('mandatory')
if mibBuilder.loadTexts: qTftpServerFileName.setDescription("Server's filename to get")
qTftpAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 17, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qTftpAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: qTftpAdminStatus.setDescription('set to 1 to start TFTP download. 0 = ready for next download.')
qTftpOperStatus = MibScalar((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 17, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qTftpOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: qTftpOperStatus.setDescription('0=idle, 1=reading, 2=server IP error, 3=server filename error, 4 = done')
qTftpRxCount = MibScalar((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 17, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qTftpRxCount.setStatus('mandatory')
if mibBuilder.loadTexts: qTftpRxCount.setDescription('Number of blocks received')
qTimeZone = MibScalar((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 17, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27))).clone(namedValues=NamedValues(("eniwetok", 1), ("samoa", 2), ("hawaii", 3), ("alaska", 4), ("pacific", 5), ("arizona", 6), ("mountain", 7), ("central", 8), ("atlantic", 9), ("newfoundland", 10), ("buenos-aires", 11), ("mid-atlantic", 12), ("azores", 13), ("gmt", 14), ("paris", 15), ("israel", 16), ("moscow", 17), ("tehran", 18), ("abu-dhabi", 19), ("islamabad", 20), ("almaty", 21), ("bangkok", 22), ("beijing", 23), ("tokyo", 24), ("brisbane", 25), ("new-caledonia", 26), ("auckland", 27)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qTimeZone.setStatus('mandatory')
if mibBuilder.loadTexts: qTimeZone.setDescription('Current time zone of the unit.')
qipPortTable = MibTable((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 16, 1), )
if mibBuilder.loadTexts: qipPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: qipPortTable.setDescription('A list of IP Port entries.')
qipPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 16, 1, 1), ).setIndexNames((0, "QWESCOM-MIB", "qIpLp"))
if mibBuilder.loadTexts: qipPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: qipPortEntry.setDescription('One entry in the table.')
qIpLp = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 16, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qIpLp.setStatus('current')
if mibBuilder.loadTexts: qIpLp.setDescription('The logical port number associated with this IP port.')
qIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 16, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: qIpAddr.setDescription('The IP address of this IP Port.')
qIpSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 16, 1, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qIpSubnet.setStatus('mandatory')
if mibBuilder.loadTexts: qIpSubnet.setDescription('The IP subnet ddress of this IP Port.')
qIpMulticast = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 16, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qIpMulticast.setStatus('current')
if mibBuilder.loadTexts: qIpMulticast.setDescription('Indicate whether or not multicast will be transmit on this interface.')
qIpRipStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 16, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qIpRipStatus.setStatus('current')
if mibBuilder.loadTexts: qIpRipStatus.setDescription('Indicate the RIP status.')
qIpArpTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 16, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qIpArpTimeout.setStatus('current')
if mibBuilder.loadTexts: qIpArpTimeout.setDescription('The elapsed time of seconds before an ARP entry can be removed from the ARP table.')
qIpEncap = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 16, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("standard", 1), ("hp", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qIpEncap.setStatus('current')
if mibBuilder.loadTexts: qIpEncap.setDescription('Indicate the encapsulation type.')
qRipPortTable = MibTable((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 16, 2), )
if mibBuilder.loadTexts: qRipPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: qRipPortTable.setDescription('A list of IP Port entries.')
qRipPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 16, 2, 1), ).setIndexNames((0, "QWESCOM-MIB", "qRipIpAddr"))
if mibBuilder.loadTexts: qRipPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: qRipPortEntry.setDescription('One entry in the table.')
qRipIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 16, 2, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qRipIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: qRipIpAddr.setDescription('The IP address associated with this RIP Port.')
qMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 16, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("password", 2), ("md5", 3))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qMode.setStatus('current')
if mibBuilder.loadTexts: qMode.setDescription('Selects what type of rip authentication to be used on the selected port.')
qAuthentication = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 16, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qAuthentication.setStatus('current')
if mibBuilder.loadTexts: qAuthentication.setDescription('This is the password to be used, when password type is selected for above authentication.')
qSplitHorizon = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 16, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("poisoned-reverse", 1), ("simple", 2), ("disable", 3))).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qSplitHorizon.setStatus('current')
if mibBuilder.loadTexts: qSplitHorizon.setDescription('.')
qAdvertiseStaticRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 16, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qAdvertiseStaticRoutes.setStatus('current')
if mibBuilder.loadTexts: qAdvertiseStaticRoutes.setDescription('.')
qAdvertiseIntf = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 16, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qAdvertiseIntf.setStatus('current')
if mibBuilder.loadTexts: qAdvertiseIntf.setDescription('.')
qBroadcastType = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 16, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("local", 1), ("direct-with-ones", 2), ("direct-with-zeros", 3))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qBroadcastType.setStatus('current')
if mibBuilder.loadTexts: qBroadcastType.setDescription('.')
qHoldDownInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 16, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qHoldDownInterval.setStatus('current')
if mibBuilder.loadTexts: qHoldDownInterval.setDescription('.')
qUpdatesSend = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 16, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("silent", 1), ("version-1", 2), ("rip-1-compatible", 3), ("version-2", 4), ("version-1-demand", 5), ("version-2-demand", 6))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qUpdatesSend.setStatus('current')
if mibBuilder.loadTexts: qUpdatesSend.setDescription('What the router sends on this interface. ripVersion1 implies sending RIP updates compliant with RFC 1058. rip1Compatible implies broadcasting RIP-2 updates using RFC 1058 route subsumption rules. ripVersion2 implies multicasting RIP-2 updates. ripV1Demand indicates the use of Demand RIP on a WAN interface under RIP Version 1 rules. ripV2Demand indicates the use of Demand RIP on a WAN interface under Version 2 rules.')
qUpdatesReceive = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 16, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 3))).clone(namedValues=NamedValues(("rip1", 1), ("rip2", 2), ("rip1-or-rip2", 3), ("none", 3))).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qUpdatesReceive.setStatus('current')
if mibBuilder.loadTexts: qUpdatesReceive.setDescription('This indicates which version of RIP updates are to be accepted. Note that rip2 and rip1OrRip2 implies reception of multicast packets.')
qDefaultRouteMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 16, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qDefaultRouteMetric.setStatus('current')
if mibBuilder.loadTexts: qDefaultRouteMetric.setDescription('This variable indicates the metric that is to be used for the default route entry in RIP updates originated on this interface. A value of zero indicates that no default route should be originated; in this case, a default route via another router may be propagated.')
qStaticArpTable = MibTable((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 16, 3), )
if mibBuilder.loadTexts: qStaticArpTable.setStatus('mandatory')
if mibBuilder.loadTexts: qStaticArpTable.setDescription('A list of Static ARP entries.')
qStaticArpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 16, 3, 1), ).setIndexNames((0, "QWESCOM-MIB", "qStaticArpAddr"))
if mibBuilder.loadTexts: qStaticArpEntry.setStatus('mandatory')
if mibBuilder.loadTexts: qStaticArpEntry.setDescription('One entry in the table.')
qStaticArpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 16, 3, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qStaticArpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: qStaticArpAddr.setDescription('The IP address associated with this ARP entry.')
qLif = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 16, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(513, 1536))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qLif.setStatus('mandatory')
if mibBuilder.loadTexts: qLif.setDescription('The Logical Interface which uniquely identifies the local interface which this ARP entry can be reached.')
qPhysType = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 16, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ethernet", 1), ("atm-and-others", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qPhysType.setStatus('mandatory')
if mibBuilder.loadTexts: qPhysType.setDescription('The physical interface type associated with this ARP entry.')
qMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 16, 3, 1, 4), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qMacAddr.setStatus('mandatory')
if mibBuilder.loadTexts: qMacAddr.setDescription('The physical address associated with this ARP entry.')
qType = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 16, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("add-activate", 1), ("add-not-activate", 2), ("delete", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qType.setStatus('mandatory')
if mibBuilder.loadTexts: qType.setDescription('Defines the ARP entry current status. Setting this entry to invalid(2) has the effect of invalidating the correspding entry in the ARP table. Setting this entry to valid(1) has the effect of installing the entry in the ARP table and make it active.')
qipTtl = MibScalar((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 16, 4), Integer32().clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qipTtl.setStatus('mandatory')
if mibBuilder.loadTexts: qipTtl.setDescription('The time-to-live (in seconds) that a packet can live in the network.')
qipRoutePriority = MibScalar((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 16, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("rip", 1), ("static", 2))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qipRoutePriority.setStatus('mandatory')
if mibBuilder.loadTexts: qipRoutePriority.setDescription('The route priority indicates routing entry precedence in the system. If RIP is selected, then all routing entries learned by RIP will have higher priority then other entries. Also, if STATIC is selected, then all routing entries which are static defined will have higher priority then other entries.')
qipRipStatus = MibScalar((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 16, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qipRipStatus.setStatus('mandatory')
if mibBuilder.loadTexts: qipRipStatus.setDescription('The RIP system flag.')
qigmpInMsgs = MibScalar((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 16, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qigmpInMsgs.setStatus('mandatory')
if mibBuilder.loadTexts: qigmpInMsgs.setDescription('Messages received by the system.')
qigmpOutMsgs = MibScalar((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 16, 7, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qigmpOutMsgs.setStatus('mandatory')
if mibBuilder.loadTexts: qigmpOutMsgs.setDescription('Messages transmitted by the system.')
qigmpInErrors = MibScalar((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 16, 7, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qigmpInErrors.setStatus('mandatory')
if mibBuilder.loadTexts: qigmpInErrors.setDescription('Error messages received by the system.')
qigmpInReports = MibScalar((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 16, 7, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qigmpInReports.setStatus('mandatory')
if mibBuilder.loadTexts: qigmpInReports.setDescription('Reported messages received by the system.')
qigmpInQueries = MibScalar((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 16, 7, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qigmpInQueries.setStatus('mandatory')
if mibBuilder.loadTexts: qigmpInQueries.setDescription('Querries received by the system.')
qigmpInUnknownType = MibScalar((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 16, 7, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qigmpInUnknownType.setStatus('mandatory')
if mibBuilder.loadTexts: qigmpInUnknownType.setDescription('Unkown messages received by the system.')
qIgmpStaticTable = MibTable((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 16, 7, 7), )
if mibBuilder.loadTexts: qIgmpStaticTable.setStatus('mandatory')
if mibBuilder.loadTexts: qIgmpStaticTable.setDescription('A list of Static IGMP entries.')
qIgmpStaticEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 16, 7, 7, 1), ).setIndexNames((0, "QWESCOM-MIB", "qIgmpStaticAddr"))
if mibBuilder.loadTexts: qIgmpStaticEntry.setStatus('mandatory')
if mibBuilder.loadTexts: qIgmpStaticEntry.setDescription('One entry in the table.')
qIgmpStaticAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 16, 7, 7, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qIgmpStaticAddr.setStatus('mandatory')
if mibBuilder.loadTexts: qIgmpStaticAddr.setDescription('The IP address associated with this IGMP entry.')
qIgmpLp = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 16, 7, 7, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qIgmpLp.setStatus('current')
if mibBuilder.loadTexts: qIgmpLp.setDescription('The logical port number associated with this IP port.')
qIgmpType = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 16, 7, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("add-activate", 1), ("add-not-activate", 2), ("delete", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qIgmpType.setStatus('current')
if mibBuilder.loadTexts: qIgmpType.setDescription('Defines the IGMP entry current status. Setting this entry to invalid(2) has the effect of invalidating the correspding entry in the IGMP table. Setting this entry to valid(1) has the effect of installing the entry in the IGMP table and make it active.')
qIgmpGroupTable = MibTable((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 16, 7, 8), )
if mibBuilder.loadTexts: qIgmpGroupTable.setStatus('current')
if mibBuilder.loadTexts: qIgmpGroupTable.setDescription('A list of IGMP Group entries.')
qIgmpGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 16, 7, 8, 1), ).setIndexNames((0, "QWESCOM-MIB", "qIgmpGroupLp"), (0, "QWESCOM-MIB", "qIgmpGroupAddr"))
if mibBuilder.loadTexts: qIgmpGroupEntry.setStatus('current')
if mibBuilder.loadTexts: qIgmpGroupEntry.setDescription('One entry in the table.')
qIgmpGroupAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 16, 7, 8, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qIgmpGroupAddr.setStatus('current')
if mibBuilder.loadTexts: qIgmpGroupAddr.setDescription('The Multicast IP address associated with this IGMP entry.')
qIgmpGroupLp = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 16, 7, 8, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qIgmpGroupLp.setStatus('current')
if mibBuilder.loadTexts: qIgmpGroupLp.setDescription('The logical port number associated with this IP port.')
qIgmpGroupMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 16, 7, 8, 1, 3), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qIgmpGroupMacAddr.setStatus('current')
if mibBuilder.loadTexts: qIgmpGroupMacAddr.setDescription('The Multicast MAC address associated with the qIgmpGroupLp.')
qIgmpGroupInstallType = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 16, 7, 8, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qIgmpGroupInstallType.setStatus('current')
if mibBuilder.loadTexts: qIgmpGroupInstallType.setDescription('Defines how the multicast IP was installed. Static(1) entries are specifically created by the user. Dynamic(2) entries are learned. All others are unknown.')
qarpInMsgs = MibScalar((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 16, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qarpInMsgs.setStatus('mandatory')
if mibBuilder.loadTexts: qarpInMsgs.setDescription('Arp messages received by the system.')
qarpOutMsgs = MibScalar((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 16, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qarpOutMsgs.setStatus('mandatory')
if mibBuilder.loadTexts: qarpOutMsgs.setDescription('Arp messages send by the system.')
qarpReqInMsg = MibScalar((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 16, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qarpReqInMsg.setStatus('mandatory')
if mibBuilder.loadTexts: qarpReqInMsg.setDescription('Request Arp messages received by the system.')
qarpReqOutMsgs = MibScalar((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 16, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qarpReqOutMsgs.setStatus('mandatory')
if mibBuilder.loadTexts: qarpReqOutMsgs.setDescription('Arp request messages send by the system.')
qarpRespInMsgs = MibScalar((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 16, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qarpRespInMsgs.setStatus('mandatory')
if mibBuilder.loadTexts: qarpRespInMsgs.setDescription('Arp reply messages received by the system.')
qarpRespOutMsgs = MibScalar((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 16, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qarpRespOutMsgs.setStatus('mandatory')
if mibBuilder.loadTexts: qarpRespOutMsgs.setDescription('Arp reply messages send by the system.')
qarpSendDiscards = MibScalar((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 16, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qarpSendDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: qarpSendDiscards.setDescription('Arp discard messages send by the system.')
qarpSendTimeouts = MibScalar((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 16, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qarpSendTimeouts.setStatus('mandatory')
if mibBuilder.loadTexts: qarpSendTimeouts.setDescription('Arp timeout messages send by the system.')
qarpInResourceErrors = MibScalar((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 16, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qarpInResourceErrors.setStatus('mandatory')
if mibBuilder.loadTexts: qarpInResourceErrors.setDescription('Lack of resources Arp messages received by the system.')
qarpOutResourceErrors = MibScalar((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 16, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qarpOutResourceErrors.setStatus('mandatory')
if mibBuilder.loadTexts: qarpOutResourceErrors.setDescription('Lack of resources Arp messages send by the system.')
qRipStatsTable = MibTable((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 16, 23), )
if mibBuilder.loadTexts: qRipStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: qRipStatsTable.setDescription('A list of Static ARP entries.')
qRipStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 16, 23, 1), ).setIndexNames((0, "QWESCOM-MIB", "qRipStatsAddr"))
if mibBuilder.loadTexts: qRipStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: qRipStatsEntry.setDescription('One entry in the table.')
qRipStatsAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 16, 23, 1, 1), IpAddress())
if mibBuilder.loadTexts: qRipStatsAddr.setStatus('mandatory')
if mibBuilder.loadTexts: qRipStatsAddr.setDescription('Rip updates received by this system.')
qrip2IfStatsUpdatesReceives = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 16, 23, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrip2IfStatsUpdatesReceives.setStatus('mandatory')
if mibBuilder.loadTexts: qrip2IfStatsUpdatesReceives.setDescription('Rip updates received by this system.')
qoamGroupConfigTable = MibTable((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 18, 1), )
if mibBuilder.loadTexts: qoamGroupConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: qoamGroupConfigTable.setDescription('A list of OAM group Configurable Parameters entries.')
qoamGroupConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 18, 1, 1), ).setIndexNames((0, "QWESCOM-MIB", "qoamGroupConfigIndex"))
if mibBuilder.loadTexts: qoamGroupConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: qoamGroupConfigEntry.setDescription('One entry in the table.')
qoamGroupConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 18, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qoamGroupConfigIndex.setStatus('current')
if mibBuilder.loadTexts: qoamGroupConfigIndex.setDescription('The entry index of a particular group. Currently, there are 6 groups define: 1) All circuit 2) All Uni1 3) All Uni2, 4) All Uni3, 5) All Vpl, 6) All Vcl.')
qoamGroupConfigAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 18, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qoamGroupConfigAlias.setStatus('current')
if mibBuilder.loadTexts: qoamGroupConfigAlias.setDescription('Alias name of a specified circuit or for all configured UNIs, 1=end-to-end, 2=segment-to-segment, 3=both.')
qoamGroupConfigType = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 18, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("segment-2-segment", 1), ("end-2-end", 2), ("both", 3))).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qoamGroupConfigType.setStatus('current')
if mibBuilder.loadTexts: qoamGroupConfigType.setDescription('The type of OAM to be generated.')
qoamGroupConfigTransmitInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 18, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qoamGroupConfigTransmitInterval.setStatus('current')
if mibBuilder.loadTexts: qoamGroupConfigTransmitInterval.setDescription('The interval between OAM transmission in seconds.')
qoamGroupConfigS2SAlarmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 18, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qoamGroupConfigS2SAlarmThreshold.setStatus('current')
if mibBuilder.loadTexts: qoamGroupConfigS2SAlarmThreshold.setDescription('The number of timed out segment-to-segment OAM replies accumulated in sequence before an alarm is generated.')
qoamGroupConfigE2EAlarmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 18, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qoamGroupConfigE2EAlarmThreshold.setStatus('current')
if mibBuilder.loadTexts: qoamGroupConfigE2EAlarmThreshold.setDescription('The number of timed out end-to-end OAM replies accumulated in sequence before an alarm is generated.')
qoamGroupConfigStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 18, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qoamGroupConfigStatus.setStatus('current')
if mibBuilder.loadTexts: qoamGroupConfigStatus.setDescription('Enable/disable OAM operation.')
qoamCircuitConfigTable = MibTable((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 18, 2), )
if mibBuilder.loadTexts: qoamCircuitConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: qoamCircuitConfigTable.setDescription('A list of OAM Configurable Parameters entries.')
qoamCircuitConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 18, 2, 1), ).setIndexNames((0, "QWESCOM-MIB", "qoamCircuitConfigIndex"))
if mibBuilder.loadTexts: qoamCircuitConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: qoamCircuitConfigEntry.setDescription('One entry in the table.')
qoamCircuitConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 18, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qoamCircuitConfigIndex.setStatus('current')
if mibBuilder.loadTexts: qoamCircuitConfigIndex.setDescription('The index for the selected circuit.')
qoamCircuitConfigType = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 18, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("segment-2-segment", 1), ("end-2-end", 2), ("both", 3))).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qoamCircuitConfigType.setStatus('current')
if mibBuilder.loadTexts: qoamCircuitConfigType.setDescription('The type of OAM to be generated.')
qoamCircuitConfigTransmitInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 18, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qoamCircuitConfigTransmitInterval.setStatus('current')
if mibBuilder.loadTexts: qoamCircuitConfigTransmitInterval.setDescription('The interval between OAM transmission in seconds.')
qoamCircuitConfigS2SAlarmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 18, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qoamCircuitConfigS2SAlarmThreshold.setStatus('current')
if mibBuilder.loadTexts: qoamCircuitConfigS2SAlarmThreshold.setDescription('The number of timed out segment-to-segment OAM replies accumulated in sequence before an alarm is generated.')
qoamCircuitConfigE2EAlarmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 18, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qoamCircuitConfigE2EAlarmThreshold.setStatus('current')
if mibBuilder.loadTexts: qoamCircuitConfigE2EAlarmThreshold.setDescription('The number of timed out end-to-end OAM replies accumulated in sequence before an alarm is generated.')
qoamCircuitConfigStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 18, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("add-activate", 1), ("add-not-activate", 2), ("delete", 3))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qoamCircuitConfigStatus.setStatus('current')
if mibBuilder.loadTexts: qoamCircuitConfigStatus.setDescription('Enable/disable OAM operation.')
qoamGroupControlTable = MibTable((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 18, 3), )
if mibBuilder.loadTexts: qoamGroupControlTable.setStatus('mandatory')
if mibBuilder.loadTexts: qoamGroupControlTable.setDescription('A list of OAM Control Parameters entries.')
qoamGroupControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 18, 3, 1), ).setIndexNames((0, "QWESCOM-MIB", "qoamGroupControlIndex"))
if mibBuilder.loadTexts: qoamGroupControlEntry.setStatus('mandatory')
if mibBuilder.loadTexts: qoamGroupControlEntry.setDescription('One entry in the table.')
qoamGroupControlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 18, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qoamGroupControlIndex.setStatus('current')
if mibBuilder.loadTexts: qoamGroupControlIndex.setDescription('The index for the selected circuit.')
qoamGroupControlType = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 18, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("segment-2-segment", 1), ("end-2-end", 2), ("both", 3))).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qoamGroupControlType.setStatus('current')
if mibBuilder.loadTexts: qoamGroupControlType.setDescription('The type of OAM to be generated, 1=end-to-end, 2=segment-to-segment, 3=both.')
qoamGroupControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 18, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("start", 1), ("stop", 2), ("restore", 3))).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qoamGroupControlStatus.setStatus('current')
if mibBuilder.loadTexts: qoamGroupControlStatus.setDescription('Initiate or terminate OAM operation, 1=start and 2=stop')
qoamCircuitControlTable = MibTable((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 18, 4), )
if mibBuilder.loadTexts: qoamCircuitControlTable.setStatus('mandatory')
if mibBuilder.loadTexts: qoamCircuitControlTable.setDescription('A list of OAM Control Parameters entry.')
qoamCircuitControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 18, 4, 1), ).setIndexNames((0, "QWESCOM-MIB", "qoamCircuitControlIndex"))
if mibBuilder.loadTexts: qoamCircuitControlEntry.setStatus('mandatory')
if mibBuilder.loadTexts: qoamCircuitControlEntry.setDescription('One entry in the table.')
qoamCircuitControlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 18, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qoamCircuitControlIndex.setStatus('current')
if mibBuilder.loadTexts: qoamCircuitControlIndex.setDescription('The index for the selected circuit.')
qoamCircuitControlType = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 18, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("segment-2-segment", 1), ("end-2-end", 2), ("both", 3))).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qoamCircuitControlType.setStatus('current')
if mibBuilder.loadTexts: qoamCircuitControlType.setDescription('The type of OAM to be generated, 1=end-to-end, 2=segment-to-segment, 3=both.')
qoamCircuitControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 18, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("start", 1), ("stop", 2), ("restore", 3))).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qoamCircuitControlStatus.setStatus('current')
if mibBuilder.loadTexts: qoamCircuitControlStatus.setDescription('Initiate or terminate OAM operation, 1=start and 2=stop')
qoamStatsTable = MibTable((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 18, 5), )
if mibBuilder.loadTexts: qoamStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: qoamStatsTable.setDescription('A list of OAM statistics entries.')
qoamStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 18, 5, 1), ).setIndexNames((0, "QWESCOM-MIB", "qatmCircuitId"))
if mibBuilder.loadTexts: qoamStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: qoamStatsEntry.setDescription('One entry in the table.')
qoamStatsCircuit = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 18, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qoamStatsCircuit.setStatus('current')
if mibBuilder.loadTexts: qoamStatsCircuit.setDescription('The circuit id identifies the entry.')
qoamStatsVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 18, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qoamStatsVpi.setStatus('current')
if mibBuilder.loadTexts: qoamStatsVpi.setDescription('The first half of the VPI/VCI pairs associated with the circuit id.')
qoamStatsVci = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 18, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qoamStatsVci.setStatus('current')
if mibBuilder.loadTexts: qoamStatsVci.setDescription('The second half of the VPI/VCI pairs associated with the circuit id.')
qoamStatsType = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 18, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("f4-segment", 1), ("f4-end", 2), ("f5-segment", 3), ("f5-end", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qoamStatsType.setStatus('current')
if mibBuilder.loadTexts: qoamStatsType.setDescription('The type of OAM.')
qoamStatsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 18, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qoamStatsStatus.setStatus('current')
if mibBuilder.loadTexts: qoamStatsStatus.setDescription('The current operational status of OAM on this circuit. ON=OAMs being transmitted, OFF=OAMs not being transmitted.')
qoamRequestTx = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 18, 5, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qoamRequestTx.setStatus('current')
if mibBuilder.loadTexts: qoamRequestTx.setDescription('The total number of OAM requests transmitted.')
qoamRequestRx = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 18, 5, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qoamRequestRx.setStatus('current')
if mibBuilder.loadTexts: qoamRequestRx.setDescription('The total number of OAM requests received.')
qoamReplyTx = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 18, 5, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qoamReplyTx.setStatus('current')
if mibBuilder.loadTexts: qoamReplyTx.setDescription('The total number of OAM replies transmitted.')
qoamReplyRx = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 18, 5, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qoamReplyRx.setStatus('current')
if mibBuilder.loadTexts: qoamReplyRx.setDescription('The total number of OAM replies received.')
qoamTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 18, 5, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qoamTimeouts.setStatus('current')
if mibBuilder.loadTexts: qoamTimeouts.setDescription('The total number of OAM replies that were not received before timeout.')
qoamMinRt = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 18, 5, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qoamMinRt.setStatus('current')
if mibBuilder.loadTexts: qoamMinRt.setDescription('The minimum round trip time in seconds for receiving OAM replies since the counters were last reset.')
qoamMaxRt = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 18, 5, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qoamMaxRt.setStatus('current')
if mibBuilder.loadTexts: qoamMaxRt.setDescription('The maximun round trip time in seconds for receiving OAM replies since the counters were last reset.')
qoamAveRt = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 18, 5, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qoamAveRt.setStatus('current')
if mibBuilder.loadTexts: qoamAveRt.setDescription('The average round trip time in seconds for receiving OAM replies since the counters were last reset.')
qoamOtherInErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 18, 5, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qoamOtherInErrs.setStatus('current')
if mibBuilder.loadTexts: qoamOtherInErrs.setDescription('The number of OAM received but discarded due to errors.')
qoamOtherOutErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 18, 5, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qoamOtherOutErrs.setStatus('current')
if mibBuilder.loadTexts: qoamOtherOutErrs.setDescription("The number of OAM can't transmitted due to errors.")
qoamCrc10InErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 18, 5, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qoamCrc10InErrs.setStatus('current')
if mibBuilder.loadTexts: qoamCrc10InErrs.setDescription('The number of OAM received but discarded due to crc-10 checksum error.')
qoamCrc10OutErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 3662, 3662, 3662, 18, 5, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qoamCrc10OutErrs.setStatus('current')
if mibBuilder.loadTexts: qoamCrc10OutErrs.setDescription("The number of OAM can't transmitted due to crc-10 checksum error.")
mibBuilder.exportSymbols("QWESCOM-MIB", qatmVplBwGranularity=qatmVplBwGranularity, qEventAlarmTable=qEventAlarmTable, qoamCircuitConfigE2EAlarmThreshold=qoamCircuitConfigE2EAlarmThreshold, qoamStatsTable=qoamStatsTable, qPipeDefinitionCircuitID=qPipeDefinitionCircuitID, qEventSystemID_Number=qEventSystemID_Number, qproducts=qproducts, qoamCircuitConfigS2SAlarmThreshold=qoamCircuitConfigS2SAlarmThreshold, qPipeDefinitionPeak=qPipeDefinitionPeak, qEventAlarmDescription=qEventAlarmDescription, qClassDefinitionDestPortUpperBound=qClassDefinitionDestPortUpperBound, qIpRipStatus=qIpRipStatus, qIgmpLp=qIgmpLp, qcmConfigWorkWithMax=qcmConfigWorkWithMax, qatmTcCellSync=qatmTcCellSync, qatmAal5VccStatsPoolDepleteds=qatmAal5VccStatsPoolDepleteds, qClassDefinitionEntry=qClassDefinitionEntry, qatmUniTrapStatus=qatmUniTrapStatus, qatmAal5MtuSize=qatmAal5MtuSize, qethernetCfgTable=qethernetCfgTable, qcmUserDateTime=qcmUserDateTime, qoamGroupConfigS2SAlarmThreshold=qoamGroupConfigS2SAlarmThreshold, qEventSeverityType=qEventSeverityType, qextmib=qextmib, qarpInMsgs=qarpInMsgs, qsnmpCommunityRights=qsnmpCommunityRights, qIpSubnet=qIpSubnet, qLogOption=qLogOption, qEventSystemTable=qEventSystemTable, qatmUniTable=qatmUniTable, qIgmpStaticAddr=qIgmpStaticAddr, qoamCircuitConfigTransmitInterval=qoamCircuitConfigTransmitInterval, qripCircExtIfIndex=qripCircExtIfIndex, qds1LoopbackCommand=qds1LoopbackCommand, qcmConfigName=qcmConfigName, qds1OamSegmentReceived=qds1OamSegmentReceived, qClassDefinitionIndex=qClassDefinitionIndex, qEventSystemIndex=qEventSystemIndex, qatmTcDmaErrors=qatmTcDmaErrors, qIpMulticast=qIpMulticast, qmrRepairEntry=qmrRepairEntry, qcpStopBitLength=qcpStopBitLength, qPipeDefinitionIndex=qPipeDefinitionIndex, qTrapOption=qTrapOption, qTftpRxCount=qTftpRxCount, qoamGroupConfigTransmitInterval=qoamGroupConfigTransmitInterval, qatmUniMinAllocBuffer=qatmUniMinAllocBuffer, qoamGroupConfigType=qoamGroupConfigType, qPolicyDefinitionEndTime=qPolicyDefinitionEndTime, qatmAal5TrapStatus=qatmAal5TrapStatus, qds1SpanLoopBackStatsTable=qds1SpanLoopBackStatsTable, qethernetEncapsulation=qethernetEncapsulation, qFlowClass=qFlowClass, qds1SpanLoopBackStatsEntry=qds1SpanLoopBackStatsEntry, qwesLifTable=qwesLifTable, qRipStatsEntry=qRipStatsEntry, qPipeDefinitionPhyIdx=qPipeDefinitionPhyIdx, qPolicyDefinitionPipeID=qPolicyDefinitionPipeID, qds1SpanCfgEntry=qds1SpanCfgEntry, qClassStatisticsTransmittedCount=qClassStatisticsTransmittedCount, qEventConfigIndex=qEventConfigIndex, qoamStatsEntry=qoamStatsEntry, qatmVplMaxVcc=qatmVplMaxVcc, qoamCrc10InErrs=qoamCrc10InErrs, qClassDefinitionDestIPUpperBound=qClassDefinitionDestIPUpperBound, qarpReqInMsg=qarpReqInMsg, qwesLpDataLinkInterface=qwesLpDataLinkInterface, qatmVplTable=qatmVplTable, qds1SpanCfgTable=qds1SpanCfgTable, qproprietaryMib2=qproprietaryMib2, qcmReleaseTable=qcmReleaseTable, qwescom=qwescom, qBroadcastType=qBroadcastType, qoamCircuitConfigEntry=qoamCircuitConfigEntry, qcmCancelConfig=qcmCancelConfig, qoamStatsVpi=qoamStatsVpi, qoamStatsStatus=qoamStatsStatus, qwesLifEntry=qwesLifEntry, qClassDefinitionTable=qClassDefinitionTable, qipCircExtOperState=qipCircExtOperState, qwesLpRowStatus=qwesLpRowStatus, qmanufactRecord=qmanufactRecord, qcmCurrentConfig=qcmCurrentConfig, qethernetAutoSense=qethernetAutoSense, qoamGroupControlStatus=qoamGroupControlStatus, qatmVclMaxSubChannels=qatmVclMaxSubChannels, qPipeDefinitionMaxEntries=qPipeDefinitionMaxEntries, qportManagement=qportManagement, qcmUserBootSequence=qcmUserBootSequence, qClassDefinitionWellKnownApplication=qClassDefinitionWellKnownApplication, qarpCircExtEntry=qarpCircExtEntry, qds1Scrambler=qds1Scrambler, qPolicyDefinitionOutboundDSValue=qPolicyDefinitionOutboundDSValue, qarpCircExtDoResp=qarpCircExtDoResp, qatmAal5Uni=qatmAal5Uni, qatmTcPortErrors=qatmTcPortErrors, qEventSystemEntry=qEventSystemEntry, qoamGroupConfigEntry=qoamGroupConfigEntry, qPipeDefinitionMBS=qPipeDefinitionMBS, qoamReplyRx=qoamReplyRx, qRipIpAddr=qRipIpAddr, qatmUniName=qatmUniName, qarpCircExtTable=qarpCircExtTable, qatmVplSharedBuffer=qatmVplSharedBuffer, qClassDefinitionDestPortLowerBound=qClassDefinitionDestPortLowerBound, qPolicyDefinitionStartTime=qPolicyDefinitionStartTime, qwesLpAdminStatus=qwesLpAdminStatus, qoamGroupConfigStatus=qoamGroupConfigStatus, qconfigManager=qconfigManager, qPolicyDefinitionTable=qPolicyDefinitionTable, qcmUserBaseCfgFile=qcmUserBaseCfgFile, qatmVclEntry=qatmVclEntry, qatmVclMaxQueueDelay=qatmVclMaxQueueDelay, qds10amRunnigTime=qds10amRunnigTime, qcmSystemFile=qcmSystemFile, qmrSerialNumber=qmrSerialNumber, qipCircExtEntry=qipCircExtEntry, qds1LineLoopbackIndex=qds1LineLoopbackIndex, qEventAlarmID_Number=qEventAlarmID_Number, qwesLifRowStatus=qwesLifRowStatus, qTftpOperStatus=qTftpOperStatus, qatmCircuitUNI=qatmCircuitUNI, qPhysType=qPhysType, qClassDefinitionDSMask=qClassDefinitionDSMask, qClassDefinitionSourceIPLowerBound=qClassDefinitionSourceIPLowerBound, qatmCircuitId=qatmCircuitId, qwesAtmArpEntry=qwesAtmArpEntry, qcmConfigVerIndex=qcmConfigVerIndex, qigmpInErrors=qigmpInErrors, qEventAlarmIndex=qEventAlarmIndex, qwesAtmArpTable=qwesAtmArpTable, qwesLpPhysicalInterface=qwesLpPhysicalInterface, qigmp=qigmp, qwesLpAlias=qwesLpAlias, qcmOperSchedDateTime=qcmOperSchedDateTime, qwesLifTrapStatus=qwesLifTrapStatus, qarpSendTimeouts=qarpSendTimeouts, qoamMinRt=qoamMinRt, qatmVplMtu=qatmVplMtu, qsnmpCommunityName=qsnmpCommunityName, oem=oem, qcpCharsReceived=qcpCharsReceived, qcmStartViewConfig=qcmStartViewConfig, qoamCircuitControlEntry=qoamCircuitControlEntry, qarpReqOutMsgs=qarpReqOutMsgs, qoamMaxRt=qoamMaxRt, qsnmpNMSTable=qsnmpNMSTable, qatmTrafficDescriptorEntry=qatmTrafficDescriptorEntry, qoamGroupControlIndex=qoamGroupControlIndex, qarpOutResourceErrors=qarpOutResourceErrors, qcmReleaseEntry=qcmReleaseEntry, qMode=qMode, qClassStatisticsAlias=qClassStatisticsAlias, qoamGroupConfigE2EAlarmThreshold=qoamGroupConfigE2EAlarmThreshold, qatmVclBwGranularity=qatmVclBwGranularity, qPolicyDefinitionAlias=qPolicyDefinitionAlias, qDisplayOption=qDisplayOption, qRipStatsAddr=qRipStatsAddr, qsnmpTrapIpAddress=qsnmpTrapIpAddress, qClassDefinitionDSUpperBound=qClassDefinitionDSUpperBound, qatmUniSharedBuffer=qatmUniSharedBuffer, qTftpType=qTftpType, qoamGroupConfigTable=qoamGroupConfigTable, qClassDefinitionSourceIPUpperBound=qClassDefinitionSourceIPUpperBound, qatmUniRowStatus=qatmUniRowStatus, qatmAal5VccStatsErrsAndDiscards=qatmAal5VccStatsErrsAndDiscards, qripCircExtTable=qripCircExtTable, qmrMacAddress=qmrMacAddress, qClassStatisticsIndex=qClassStatisticsIndex, qoamCircuitConfigType=qoamCircuitConfigType, qIgmpGroupEntry=qIgmpGroupEntry, qds1PrimaryClockSource=qds1PrimaryClockSource, qoamOtherInErrs=qoamOtherInErrs, qClassDefinitionMaxEntries=qClassDefinitionMaxEntries, qoamStatsCircuit=qoamStatsCircuit, qClassDefinitionSourcePortUpperBound=qClassDefinitionSourcePortUpperBound, qds1ClockMode=qds1ClockMode, qcmCreateDateTime=qcmCreateDateTime, qAdvertiseIntf=qAdvertiseIntf, qcmConfigTable=qcmConfigTable, qLif=qLif, qPipeDefinitionEntry=qPipeDefinitionEntry, qsnmp=qsnmp, qSysTime=qSysTime, qoamGroupControlType=qoamGroupControlType, qsnmpNMSIndex=qsnmpNMSIndex, qPolicyDefinitionEntry=qPolicyDefinitionEntry, qatmInvalidCells=qatmInvalidCells, qarpCircExtDoProxy=qarpCircExtDoProxy, qEventSystemType=qEventSystemType, qatmAal5VccStatsInBytes=qatmAal5VccStatsInBytes, qwesLpName=qwesLpName, qigmpOutMsgs=qigmpOutMsgs, qPipeDefinitionDelay=qPipeDefinitionDelay, qoamRequestTx=qoamRequestTx, qcraftPort=qcraftPort, qds1PrimaryClockSourceAction=qds1PrimaryClockSourceAction, qcmUserNewCfgFile=qcmUserNewCfgFile, qripExtAdminState=qripExtAdminState, qTftpServerIpAddress=qTftpServerIpAddress, qarpOutMsgs=qarpOutMsgs, qatmAal5VccStatsInSdus=qatmAal5VccStatsInSdus, qClassStatisticsEntry=qClassStatisticsEntry, qPolicyDefinitionIndex=qPolicyDefinitionIndex, qds1SpanLoopBackCmdEntry=qds1SpanLoopBackCmdEntry, qcmStartConfig=qcmStartConfig, qipExt=qipExt, qarpRespOutMsgs=qarpRespOutMsgs, qipCircExtIndex=qipCircExtIndex, qatmVplLowestVci=qatmVplLowestVci, qds1AutoClockSourceSearching=qds1AutoClockSourceSearching, qcmConfigFile=qcmConfigFile, qoamTimeouts=qoamTimeouts, qIgmpGroupMacAddr=qIgmpGroupMacAddr, qatmAal5VccStatsEntry=qatmAal5VccStatsEntry, qatmVplEntry=qatmVplEntry, qipPortTable=qipPortTable, qipRipStatus=qipRipStatus, qType=qType, qoamStatsType=qoamStatsType, qwesAtmArpLifIndex=qwesAtmArpLifIndex, qClassDefinitionDestIPLowerBound=qClassDefinitionDestIPLowerBound, qatmCircuitTable=qatmCircuitTable, qStaticArpTable=qStaticArpTable, qcmWhichFile=qcmWhichFile, qsnmpTrapTable=qsnmpTrapTable, qsnmpForwardTrap=qsnmpForwardTrap, qmrRepType=qmrRepType, qsnmpNMSEntry=qsnmpNMSEntry, qoamOtherOutErrs=qoamOtherOutErrs, qatmUniMaxQueueDelay=qatmUniMaxQueueDelay, qatmCircuitVpi=qatmCircuitVpi, qarpRespInMsgs=qarpRespInMsgs, qripCircExtEntry=qripCircExtEntry, qarpExtTtl=qarpExtTtl, qatmVclSharedBuffer=qatmVclSharedBuffer, qatm=qatm, qatmAal5Entry=qatmAal5Entry, qarpExt=qarpExt, qds1OamSegmentSent=qds1OamSegmentSent, qds1_e1=qds1_e1, qIgmpGroupLp=qIgmpGroupLp, qatmSpanPort=qatmSpanPort, qatmUniLinkBandwidth=qatmUniLinkBandwidth, qatmTcEntry=qatmTcEntry, qIpEncap=qIpEncap, qoamGroupConfigAlias=qoamGroupConfigAlias, qcmConfigMaxEntries=qcmConfigMaxEntries, qcmReleaseIndex=qcmReleaseIndex, qTftpFileName=qTftpFileName, qatmAal5VccStatsOutSdus=qatmAal5VccStatsOutSdus, qatmCircuitStatus=qatmCircuitStatus, qeventGroup=qeventGroup, qwesLifLpIndex=qwesLifLpIndex)
mibBuilder.exportSymbols("QWESCOM-MIB", qethernetMacAddress=qethernetMacAddress, qipPortEntry=qipPortEntry, qPolicyDefinitionEvent=qPolicyDefinitionEvent, qatmCircuitFirstVci=qatmCircuitFirstVci, qethernetName=qethernetName, qatmAal5RowStatus=qatmAal5RowStatus, qoamCircuitControlIndex=qoamCircuitControlIndex, qUpdatesReceive=qUpdatesReceive, qClassDefinitionSourcePortLowerBound=qClassDefinitionSourcePortLowerBound, qcmActionOnConfig=qcmActionOnConfig, qIpArpTimeout=qIpArpTimeout, qStaticArpEntry=qStaticArpEntry, qatmVplMaxQueueDelay=qatmVplMaxQueueDelay, qIgmpStaticEntry=qIgmpStaticEntry, qoamStatsVci=qoamStatsVci, qPolicyDefinitionType=qPolicyDefinitionType, qClassDefinitionFlowType=qClassDefinitionFlowType, qatmCircuitEntry=qatmCircuitEntry, qatmVclTable=qatmVclTable, qarpCircExtIndex=qarpCircExtIndex, qClassDefinitionProtocol=qClassDefinitionProtocol, qripCircExtListen=qripCircExtListen, qcmReleaseName=qcmReleaseName, qoamCrc10OutErrs=qoamCrc10OutErrs, qPipeDefinitionBufferAllocation=qPipeDefinitionBufferAllocation, qmrBurnTime=qmrBurnTime, qcpStatus=qcpStatus, qigmpInReports=qigmpInReports, qOamGroup=qOamGroup, qatmVplReservedBuffer=qatmVplReservedBuffer, qatmUniEntry=qatmUniEntry, qcmUserRelease=qcmUserRelease, qoamAveRt=qoamAveRt, qTimeZone=qTimeZone, qIpAddr=qIpAddr, qoamCircuitControlType=qoamCircuitControlType, qcmConfigEntry=qcmConfigEntry, qcmConfigVerEntry=qcmConfigVerEntry, qEventAlarmDateTime=qEventAlarmDateTime, qRipStatsTable=qRipStatsTable, qEventSystemSubSystem=qEventSystemSubSystem, qripExt=qripExt, qds1SpanLoopBackCmdTable=qds1SpanLoopBackCmdTable, qUpdatesSend=qUpdatesSend, qripExtUpdateTime=qripExtUpdateTime, qClassDefinitionDSLowerBound=qClassDefinitionDSLowerBound, qsnmpCommunityEntry=qsnmpCommunityEntry, qRipPortEntry=qRipPortEntry, qEventSystemDescription=qEventSystemDescription, qarpCircExtIfIndex=qarpCircExtIfIndex, qcpBaudRate=qcpBaudRate, qatmUniAlias=qatmUniAlias, qMacAddr=qMacAddr, qcmConfigVersion=qcmConfigVersion, qarpInResourceErrors=qarpInResourceErrors, qoamCircuitControlStatus=qoamCircuitControlStatus, qatmAal5VccStatsUserAborts=qatmAal5VccStatsUserAborts, qAuthentication=qAuthentication, qPolicyDefinitionPriority=qPolicyDefinitionPriority, qClassDefinitionDestIPMask=qClassDefinitionDestIPMask, qmrOemID=qmrOemID, qStaticArpAddr=qStaticArpAddr, qIgmpGroupAddr=qIgmpGroupAddr, qslots=qslots, qripCircExtPoison=qripCircExtPoison, qClassDefinitionAlias=qClassDefinitionAlias, qipRoutePriority=qipRoutePriority, qcmReleaseVersion=qcmReleaseVersion, qsnmpCommunityTable=qsnmpCommunityTable, Boolean=Boolean, qmrRepairTable=qmrRepairTable, qipCircExtTable=qipCircExtTable, qethernetSpeedMode=qethernetSpeedMode, qEventSystemDateTime=qEventSystemDateTime, qTftpAdminStatus=qTftpAdminStatus, qPolicyDefinitionClassID=qPolicyDefinitionClassID, qigmpInQueries=qigmpInQueries, qatmCircuitAlias=qatmCircuitAlias, qatmAal5Table=qatmAal5Table, qIpLp=qIpLp, qClassDefinitionSourceIPMask=qClassDefinitionSourceIPMask, qTftpServerFileName=qTftpServerFileName, qPipeDefinitionTable=qPipeDefinitionTable, qatmAal5VccStatsTable=qatmAal5VccStatsTable, qsnmpCommunityIndex=qsnmpCommunityIndex, qwesLpEntry=qwesLpEntry, qPipeDefinitionAlias=qPipeDefinitionAlias, qPolicyDefinitionLP=qPolicyDefinitionLP, qwesLifAdminStatus=qwesLifAdminStatus, qoamRequestRx=qoamRequestRx, qip=qip, qEventAlarmType=qEventAlarmType, qarpSendDiscards=qarpSendDiscards, qripCircExtTalk=qripCircExtTalk, qEventConfigEntry=qEventConfigEntry, qcmStopViewConfig=qcmStopViewConfig, qcmFileAlias=qcmFileAlias, qRipPortTable=qRipPortTable, qcmConfigWorkWithMin=qcmConfigWorkWithMin, qPipeDefinitionBandwidth=qPipeDefinitionBandwidth, qClassDefinitionParentClassID=qClassDefinitionParentClassID, qEventConfigTable=qEventConfigTable, qcmTableIndex=qcmTableIndex, qIgmpGroupTable=qIgmpGroupTable, qSplitHorizon=qSplitHorizon, qethernetCfgEntry=qethernetCfgEntry, qcmUserFileAlias=qcmUserFileAlias, qcmBootSequence=qcmBootSequence, DisplayString=DisplayString, qds1LineBuildOut=qds1LineBuildOut, qcpParity=qcpParity, qPipeDefinitionPhyType=qPipeDefinitionPhyType, qds1LineLoopbackStatIndex=qds1LineLoopbackStatIndex, qsnmpTrapIndex=qsnmpTrapIndex, qsnmpTrapEntry=qsnmpTrapEntry, qmrRepCode=qmrRepCode, qmrRepDate=qmrRepDate, qatmCircuitMode=qatmCircuitMode, qClassStatisticsDiscardCount=qClassStatisticsDiscardCount, qEventAlarmSubSystem=qEventAlarmSubSystem, qoamGroupControlEntry=qoamGroupControlEntry, qatmAal5AdminStatus=qatmAal5AdminStatus, qoamGroupConfigIndex=qoamGroupConfigIndex, qPolicyDefinitionDayofWeek=qPolicyDefinitionDayofWeek, qmrProductID=qmrProductID, qds1OamSegmentFailures=qds1OamSegmentFailures, qatmVclReservedBuffer=qatmVclReservedBuffer, qPolicyDefinitionChannelized=qPolicyDefinitionChannelized, qmiscGroup=qmiscGroup, qds1ClockSourceEligibility=qds1ClockSourceEligibility, PhysAddress=PhysAddress, qatmAal5VccStatsOutBytes=qatmAal5VccStatsOutBytes, oemTree=oemTree, qcpCharsSent=qcpCharsSent, qwesLifName=qwesLifName, qoamReplyTx=qoamReplyTx, qmrCheckSum=qmrCheckSum, qPolicyDefinitionMaxEntries=qPolicyDefinitionMaxEntries, qmrModelID=qmrModelID, qethernet=qethernet, qwesLpTrapStatus=qwesLpTrapStatus, qmanagementGroup=qmanagementGroup, qDefaultRouteMetric=qDefaultRouteMetric, qethernetCurrentSpeedMode=qethernetCurrentSpeedMode, qmrOemName=qmrOemName, qwesLifAlias=qwesLifAlias, qPipeDefinitionType=qPipeDefinitionType, qatmTcTable=qatmTcTable, TimeDateString=TimeDateString, qipCircExtIfIndex=qipCircExtIfIndex, qsnmpNMSIpAddress=qsnmpNMSIpAddress, qmrBurnDate=qmrBurnDate, qoamCircuitConfigIndex=qoamCircuitConfigIndex, qClassStatisticsFallbackCount=qClassStatisticsFallbackCount, qAdvertiseStaticRoutes=qAdvertiseStaticRoutes, qClassStatisticsTable=qClassStatisticsTable, qatmAal5Aal5Alias=qatmAal5Aal5Alias, qcmRelease=qcmRelease, qoamCircuitConfigTable=qoamCircuitConfigTable, qoamGroupControlTable=qoamGroupControlTable, qcmConfigVerTable=qcmConfigVerTable, qIgmpGroupInstallType=qIgmpGroupInstallType, qEventAlarmEntry=qEventAlarmEntry, qipCircExtAdminState=qipCircExtAdminState, qripCircExtIndex=qripCircExtIndex, qIgmpType=qIgmpType, qrip2IfStatsUpdatesReceives=qrip2IfStatsUpdatesReceives, qmrRepTime=qmrRepTime, qLogFileType=qLogFileType, qatmUniBandwidthGranularity=qatmUniBandwidthGranularity, qatmAal5Aal5Name=qatmAal5Aal5Name, qClassDefinitionFlowAgingTime=qClassDefinitionFlowAgingTime, qds1PerformanceMonitor=qds1PerformanceMonitor, qigmpInUnknownType=qigmpInUnknownType, qatmTrafficDescriptorAlias=qatmTrafficDescriptorAlias, qds1LineCfgIndex=qds1LineCfgIndex, qHoldDownInterval=qHoldDownInterval, qatmCellsForInactiveVcc=qatmCellsForInactiveVcc, qcmStopConfig=qcmStopConfig, qcpDataBits=qcpDataBits, qatmTrafficDescriptorTable=qatmTrafficDescriptorTable, qoamCircuitControlTable=qoamCircuitControlTable, qipTtl=qipTtl, qatmUniLinkDelay=qatmUniLinkDelay, qatmAal5VccStatsLengthMismatchs=qatmAal5VccStatsLengthMismatchs, qigmpInMsgs=qigmpInMsgs, qatmCircuitLogicalInterface=qatmCircuitLogicalInterface, qoamCircuitConfigStatus=qoamCircuitConfigStatus, qatmUniIlmiStatus=qatmUniIlmiStatus, qwesLpTable=qwesLpTable, qIgmpStaticTable=qIgmpStaticTable, qds1LoopbackDuration=qds1LoopbackDuration)
