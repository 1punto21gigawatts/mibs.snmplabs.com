#
# PySNMP MIB module HUAWEI-LswMSTP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HUAWEI-LswMSTP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:46:22 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint")
dot1dStpPortEntry, dot1dStpPort = mibBuilder.importSymbols("BRIDGE-MIB", "dot1dStpPortEntry", "dot1dStpPort")
lswCommon, = mibBuilder.importSymbols("HUAWEI-3COM-OID-MIB", "lswCommon")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibIdentifier, Bits, Gauge32, ObjectIdentity, TimeTicks, ModuleIdentity, Counter32, iso, Unsigned32, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, IpAddress, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "Bits", "Gauge32", "ObjectIdentity", "TimeTicks", "ModuleIdentity", "Counter32", "iso", "Unsigned32", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "IpAddress", "NotificationType")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
hwdot1sMstp = ModuleIdentity((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 14))
hwdot1sMstp.setRevisions(('2001-06-29 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hwdot1sMstp.setRevisionsDescriptions(('',))
if mibBuilder.loadTexts: hwdot1sMstp.setLastUpdated('200106290000Z')
if mibBuilder.loadTexts: hwdot1sMstp.setOrganization('')
if mibBuilder.loadTexts: hwdot1sMstp.setContactInfo('')
if mibBuilder.loadTexts: hwdot1sMstp.setDescription('')
class EnabledStatus(TextualConvention, Integer32):
    description = 'A simple status value for the object.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("enabled", 1), ("disabled", 2))

class BridgeId(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(8, 8)
    fixedLength = 8

class Hwdot1sFormatStatus(TextualConvention, Integer32):
    description = 'Legacy means that the BPDU format is legacy. Dot1s means that the BPDU format is IEEE 802.1s. Auto means that the format of BPDU sending on the port is determined by the BPDU format of its connective port.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("legacy", 1), ("dot1s", 2), ("auto", 3))

hwdot1sStpStatus = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 14, 1), EnabledStatus().clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwdot1sStpStatus.setStatus('current')
if mibBuilder.loadTexts: hwdot1sStpStatus.setDescription('Whether the Bridge MSTP is enabled.')
hwdot1sStpForceVersion = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 14, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 3))).clone(namedValues=NamedValues(("stp", 0), ("rstp", 2), ("mstp", 3))).clone('mstp')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwdot1sStpForceVersion.setStatus('current')
if mibBuilder.loadTexts: hwdot1sStpForceVersion.setDescription(' The mode of this Bridge spanning-tree protocol.')
hwdot1sStpDiameter = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 14, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 7)).clone(7)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwdot1sStpDiameter.setStatus('current')
if mibBuilder.loadTexts: hwdot1sStpDiameter.setDescription('The diameter of Bridge.')
hwdot1sMstBridgeMaxHops = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 14, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 40)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwdot1sMstBridgeMaxHops.setStatus('current')
if mibBuilder.loadTexts: hwdot1sMstBridgeMaxHops.setDescription('The maximum value of the Bridge hops.')
hwdot1sMstMasterBridgeID = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 14, 5), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwdot1sMstMasterBridgeID.setStatus('current')
if mibBuilder.loadTexts: hwdot1sMstMasterBridgeID.setDescription('The Bridge Identifier of the current Master Bridge.')
hwdot1sMstMasterPathCost = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 14, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwdot1sMstMasterPathCost.setStatus('current')
if mibBuilder.loadTexts: hwdot1sMstMasterPathCost.setDescription('The CIST path cost from the transmitting Bridge to the Master Bridge.')
hwdot1sMstBpduGuard = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 14, 7), EnabledStatus().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwdot1sMstBpduGuard.setStatus('current')
if mibBuilder.loadTexts: hwdot1sMstBpduGuard.setDescription('Whether the Bridge BPDU Guard function is enabled. If the function is enabled, the port will shutdown when received BPDU and the port is configured as portfast.')
hwdot1sMstAdminFormatSelector = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 14, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwdot1sMstAdminFormatSelector.setStatus('current')
if mibBuilder.loadTexts: hwdot1sMstAdminFormatSelector.setDescription('The administrative Configuration Identifier Format Selector in use by the Bridge. This has a value of 0 indicate the format specified in the Standard of IEEE 802.1s.')
hwdot1sMstAdminRegionName = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 14, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwdot1sMstAdminRegionName.setStatus('current')
if mibBuilder.loadTexts: hwdot1sMstAdminRegionName.setDescription('This MSTP administrative region name.')
hwdot1sMstAdminRevisionLevel = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 14, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwdot1sMstAdminRevisionLevel.setStatus('current')
if mibBuilder.loadTexts: hwdot1sMstAdminRevisionLevel.setDescription('This MSTP administrative revision level.')
hwdot1sMstOperFormatSelector = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 14, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwdot1sMstOperFormatSelector.setStatus('current')
if mibBuilder.loadTexts: hwdot1sMstOperFormatSelector.setDescription('The operative Configuration Identifier Format Selector in use by the Bridge. This has a value of 0 indicate the format specified in the Standard of IEEE 802.1s.')
hwdot1sMstOperRegionName = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 14, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwdot1sMstOperRegionName.setStatus('current')
if mibBuilder.loadTexts: hwdot1sMstOperRegionName.setDescription('This MSTP operative region name.')
hwdot1sMstOperRevisionLevel = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 14, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwdot1sMstOperRevisionLevel.setStatus('current')
if mibBuilder.loadTexts: hwdot1sMstOperRevisionLevel.setDescription('This MSTP operative revision level.')
hwdot1sMstOperConfigDigest = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 14, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwdot1sMstOperConfigDigest.setStatus('current')
if mibBuilder.loadTexts: hwdot1sMstOperConfigDigest.setDescription("This MSTP Region's Configuration Digest Signature Key.")
hwdot1sMstRegionConfActive = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 14, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwdot1sMstRegionConfActive.setStatus('current')
if mibBuilder.loadTexts: hwdot1sMstRegionConfActive.setDescription('Active the region configuration.')
hwdot1sMstDefaultVlanAllo = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 14, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 65535))).clone(namedValues=NamedValues(("enable", 1), ("unused", 65535)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwdot1sMstDefaultVlanAllo.setStatus('current')
if mibBuilder.loadTexts: hwdot1sMstDefaultVlanAllo.setDescription('Set default configuration about VLAN allocation and all VLANs are mapped to CIST.')
hwdot1sMstDefaultRegionName = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 14, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 65535))).clone(namedValues=NamedValues(("enable", 1), ("unused", 65535)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwdot1sMstDefaultRegionName.setStatus('current')
if mibBuilder.loadTexts: hwdot1sMstDefaultRegionName.setDescription('Set default region name.')
hwdot1sVIDAllocationTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 14, 18), )
if mibBuilder.loadTexts: hwdot1sVIDAllocationTable.setStatus('current')
if mibBuilder.loadTexts: hwdot1sVIDAllocationTable.setDescription('')
hwdot1sVIDAllocationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 14, 18, 1), ).setIndexNames((0, "HUAWEI-LswMSTP-MIB", "hwdot1sMstVID"))
if mibBuilder.loadTexts: hwdot1sVIDAllocationEntry.setStatus('current')
if mibBuilder.loadTexts: hwdot1sVIDAllocationEntry.setDescription('')
hwdot1sMstVID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 14, 18, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwdot1sMstVID.setStatus('current')
if mibBuilder.loadTexts: hwdot1sMstVID.setDescription('VLAN Identifier')
hwdot1sAdminMstID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 14, 18, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwdot1sAdminMstID.setStatus('current')
if mibBuilder.loadTexts: hwdot1sAdminMstID.setDescription('Administrative Multiple spanning-tree instance Identifier.')
hwdot1sOperMstID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 14, 18, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwdot1sOperMstID.setStatus('current')
if mibBuilder.loadTexts: hwdot1sOperMstID.setDescription('Operative Multiple spanning-tree instance Identifier.')
hwdot1sInstanceTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 14, 19), )
if mibBuilder.loadTexts: hwdot1sInstanceTable.setStatus('current')
if mibBuilder.loadTexts: hwdot1sInstanceTable.setDescription('')
hwdot1sInstanceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 14, 19, 1), ).setIndexNames((0, "HUAWEI-LswMSTP-MIB", "hwdot1sInstanceID"))
if mibBuilder.loadTexts: hwdot1sInstanceEntry.setStatus('current')
if mibBuilder.loadTexts: hwdot1sInstanceEntry.setDescription('')
hwdot1sInstanceID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 14, 19, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwdot1sInstanceID.setStatus('current')
if mibBuilder.loadTexts: hwdot1sInstanceID.setDescription('Multiple spanning-tree instance Identifier')
hwdot1sMstiBridgeID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 14, 19, 1, 2), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwdot1sMstiBridgeID.setStatus('current')
if mibBuilder.loadTexts: hwdot1sMstiBridgeID.setDescription('The Bridge Identifier for the spanning tree instance identified by MSTID')
hwdot1sMstiBridgePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 14, 19, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 61440)).clone(32768)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwdot1sMstiBridgePriority.setStatus('current')
if mibBuilder.loadTexts: hwdot1sMstiBridgePriority.setDescription('The Bridge Priority for the spanning tree instance identified by MSTID. Step of 4096')
hwdot1sMstiDesignedRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 14, 19, 1, 4), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwdot1sMstiDesignedRoot.setStatus('current')
if mibBuilder.loadTexts: hwdot1sMstiDesignedRoot.setDescription('The Bridge Identifier of the Root Bridge for the spanning tree instance identified by MSTID')
hwdot1sMstiRootPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 14, 19, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwdot1sMstiRootPathCost.setStatus('current')
if mibBuilder.loadTexts: hwdot1sMstiRootPathCost.setDescription('The path cost from the transmitting Bridge to the Root Bridge for the spanning tree instance identified by MSTID')
hwdot1sMstiRootPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 14, 19, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwdot1sMstiRootPort.setStatus('current')
if mibBuilder.loadTexts: hwdot1sMstiRootPort.setDescription('The Root Port for the spanning tree instance identified by the MSTID')
hwdot1sMstiRootType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 14, 19, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("normal", 0), ("secondary", 1), ("primary", 2))).clone('normal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwdot1sMstiRootType.setStatus('current')
if mibBuilder.loadTexts: hwdot1sMstiRootType.setDescription('Config this Bridge as a primary root or seconary root and or cancel the root for this spanning tree instance identified by MSTID')
hwdot1sMstiRemainingHops = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 14, 19, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwdot1sMstiRemainingHops.setStatus('current')
if mibBuilder.loadTexts: hwdot1sMstiRemainingHops.setDescription('The remaining hops of the spanning tree instance identified by MSTID')
hwdot1sMstiAdminMappedVlanListLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 14, 19, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwdot1sMstiAdminMappedVlanListLow.setStatus('current')
if mibBuilder.loadTexts: hwdot1sMstiAdminMappedVlanListLow.setDescription(' The lower part of administrative Vlan list mapped to the spanning tree instance identified by MSTID')
hwdot1sMstiAdminMappedVlanListHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 14, 19, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwdot1sMstiAdminMappedVlanListHigh.setStatus('current')
if mibBuilder.loadTexts: hwdot1sMstiAdminMappedVlanListHigh.setDescription(' The higher part of administrative Vlan list mapped to the spanning tree instance identified by MSTID')
hwdot1sMstiOperMappedVlanListLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 14, 19, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwdot1sMstiOperMappedVlanListLow.setStatus('current')
if mibBuilder.loadTexts: hwdot1sMstiOperMappedVlanListLow.setDescription(' The lower part of operative Vlan list mapped to the spanning tree instance identified by MSTID')
hwdot1sMstiOperMappedVlanListHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 14, 19, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwdot1sMstiOperMappedVlanListHigh.setStatus('current')
if mibBuilder.loadTexts: hwdot1sMstiOperMappedVlanListHigh.setDescription(' The higher part of operative Vlan list mapped to the spanning tree instance identified by MSTID')
hwdot1sPortTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 14, 20), )
if mibBuilder.loadTexts: hwdot1sPortTable.setStatus('current')
if mibBuilder.loadTexts: hwdot1sPortTable.setDescription('')
hwdot1sPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 14, 20, 1), ).setIndexNames((0, "HUAWEI-LswMSTP-MIB", "hwdot1sInstanceID"), (0, "HUAWEI-LswMSTP-MIB", "hwdot1sMstiPortIndex"))
if mibBuilder.loadTexts: hwdot1sPortEntry.setStatus('current')
if mibBuilder.loadTexts: hwdot1sPortEntry.setDescription('')
hwdot1sMstiPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 14, 20, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwdot1sMstiPortIndex.setStatus('current')
if mibBuilder.loadTexts: hwdot1sMstiPortIndex.setDescription('The index of the Bridge Port')
hwdot1sMstiState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 14, 20, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 5))).clone(namedValues=NamedValues(("disabled", 1), ("discarding", 2), ("learning", 4), ("forwarding", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwdot1sMstiState.setStatus('current')
if mibBuilder.loadTexts: hwdot1sMstiState.setDescription('The current state of the Port (i.e., Disabled, Discarding , Learning, Forwarding)')
hwdot1sMstiPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 14, 20, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 240)).clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwdot1sMstiPortPriority.setStatus('current')
if mibBuilder.loadTexts: hwdot1sMstiPortPriority.setDescription('The value of the priority field which is contained in the first (in network byte order) four bits of the (2 octet long) Port ID. The other octet of the Port ID is given by the value of mstiPortIndex. And step of 16')
hwdot1sMstiPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 14, 20, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwdot1sMstiPathCost.setStatus('current')
if mibBuilder.loadTexts: hwdot1sMstiPathCost.setDescription('The contribution of this port to the path cost of paths towards the spanning tree root which include this port. The range of path cost is 1..65535 for 802.1d standard, is 1..200000000 for 802.1t standard, and is 1..200000 for the legacy standard. ')
hwdot1sMstiDesignatedRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 14, 20, 1, 5), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwdot1sMstiDesignatedRoot.setStatus('current')
if mibBuilder.loadTexts: hwdot1sMstiDesignatedRoot.setDescription('The Bridge Identifier of the Root Bridge for the port of the Spanning Tree instance identified by the MSTID')
hwdot1sMstiDesignatedCost = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 14, 20, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwdot1sMstiDesignatedCost.setStatus('current')
if mibBuilder.loadTexts: hwdot1sMstiDesignatedCost.setDescription('The path cost of the Designated Port of the segment connected to this port. This value is compared to the Root Path Cost field in received bridge PDUs.')
hwdot1sMstiDesignatedBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 14, 20, 1, 7), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwdot1sMstiDesignatedBridge.setStatus('current')
if mibBuilder.loadTexts: hwdot1sMstiDesignatedBridge.setDescription("The Bridge Identifier of the bridge which this port considers to be the Designated Bridge for this port's segment.")
hwdot1sMstiDesignatedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 14, 20, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwdot1sMstiDesignatedPort.setStatus('current')
if mibBuilder.loadTexts: hwdot1sMstiDesignatedPort.setDescription("The Port Identifier of the port on the Designated Bridge for this port's segment.")
hwdot1sMstiMasterBridgeID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 14, 20, 1, 9), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwdot1sMstiMasterBridgeID.setStatus('current')
if mibBuilder.loadTexts: hwdot1sMstiMasterBridgeID.setDescription('The Bridge Idnetifier of the current Master Bridge. Effective in CIST.')
hwdot1sMstiMasterPortCost = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 14, 20, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwdot1sMstiMasterPortCost.setStatus('current')
if mibBuilder.loadTexts: hwdot1sMstiMasterPortCost.setDescription('The CIST path cost from the transmitting Bridge to the Master Bridge. Effective in CIST.')
hwdot1sMstiStpPortEdgeport = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 14, 20, 1, 11), EnabledStatus().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwdot1sMstiStpPortEdgeport.setStatus('current')
if mibBuilder.loadTexts: hwdot1sMstiStpPortEdgeport.setDescription(' Whether the port fast is enabled. Effective in CIST.')
hwdot1sMstiStpPortPointToPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 14, 20, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("forceTrue", 1), ("forceFalse", 2), ("auto", 3))).clone('auto')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwdot1sMstiStpPortPointToPoint.setStatus('current')
if mibBuilder.loadTexts: hwdot1sMstiStpPortPointToPoint.setDescription(' Whether the port conects the point to point link. Effective in CIST.')
hwdot1sMstiStpMcheck = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 14, 20, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 65535))).clone(namedValues=NamedValues(("enable", 1), ("unused", 65535)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwdot1sMstiStpMcheck.setStatus('current')
if mibBuilder.loadTexts: hwdot1sMstiStpMcheck.setDescription(' Forcing the state machine to send MST BPDUs in this manner can be used to test whether all legacy Bridges on a given LAN have been removed. Effective in CIST.')
hwdot1sMstiStpTransLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 14, 20, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwdot1sMstiStpTransLimit.setStatus('current')
if mibBuilder.loadTexts: hwdot1sMstiStpTransLimit.setDescription('The value used by the Port Transmit state machine to limit the maximum transmission rate. Effective in CIST.')
hwdot1sMstiStpRXStpBPDU = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 14, 20, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwdot1sMstiStpRXStpBPDU.setStatus('current')
if mibBuilder.loadTexts: hwdot1sMstiStpRXStpBPDU.setDescription('The number of received Config BPDU. Effective in CIST.')
hwdot1sMstiStpTXStpBPDU = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 14, 20, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwdot1sMstiStpTXStpBPDU.setStatus('current')
if mibBuilder.loadTexts: hwdot1sMstiStpTXStpBPDU.setDescription('The number of transimitted Config BPDU. Effective in CIST.')
hwdot1sMstiStpRXTCNBPDU = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 14, 20, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwdot1sMstiStpRXTCNBPDU.setStatus('current')
if mibBuilder.loadTexts: hwdot1sMstiStpRXTCNBPDU.setDescription('The number of received TCN BPDU. Effective in CIST.')
hwdot1sMstiStpTXTCNBPDU = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 14, 20, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwdot1sMstiStpTXTCNBPDU.setStatus('current')
if mibBuilder.loadTexts: hwdot1sMstiStpTXTCNBPDU.setDescription('The number of transimitted TCN BPDU. Effective in CIST.')
hwdot1sMstiStpRXRSTPBPDU = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 14, 20, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwdot1sMstiStpRXRSTPBPDU.setStatus('current')
if mibBuilder.loadTexts: hwdot1sMstiStpRXRSTPBPDU.setDescription('The number of received RST BPDU. Effective in CIST.')
hwdot1sMstiStpTXRSTPBPDU = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 14, 20, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwdot1sMstiStpTXRSTPBPDU.setStatus('current')
if mibBuilder.loadTexts: hwdot1sMstiStpTXRSTPBPDU.setDescription('The number of transimitted RST BPDU. Effective in CIST.')
hwdot1sMstiStpRXMSTPBPDU = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 14, 20, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwdot1sMstiStpRXMSTPBPDU.setStatus('current')
if mibBuilder.loadTexts: hwdot1sMstiStpRXMSTPBPDU.setDescription('The number of received MST BPDU. Effective in CIST.')
hwdot1sMstiStpTXMSTPBPDU = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 14, 20, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwdot1sMstiStpTXMSTPBPDU.setStatus('current')
if mibBuilder.loadTexts: hwdot1sMstiStpTXMSTPBPDU.setDescription('The number of transimitted MST BPDU. Effective in CIST.')
hwdot1sMstiStpClearStatistics = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 14, 20, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 65535))).clone(namedValues=NamedValues(("clear", 1), ("unused", 65535)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwdot1sMstiStpClearStatistics.setStatus('current')
if mibBuilder.loadTexts: hwdot1sMstiStpClearStatistics.setDescription('Clear the spanning tree statistic. Effective in CIST.')
hwdot1sMstiStpDefaultPortCost = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 14, 20, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 65535))).clone(namedValues=NamedValues(("enable", 1), ("unused", 65535)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwdot1sMstiStpDefaultPortCost.setStatus('current')
if mibBuilder.loadTexts: hwdot1sMstiStpDefaultPortCost.setDescription('Set default Port path cost. ')
hwdot1sMstiStpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 14, 20, 1, 25), EnabledStatus().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwdot1sMstiStpStatus.setStatus('current')
if mibBuilder.loadTexts: hwdot1sMstiStpStatus.setDescription('Whether the spanning tree protocol is enabled on this port. Effective in CIST.')
hwdot1sMstiPortRootGuard = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 14, 20, 1, 26), EnabledStatus().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwdot1sMstiPortRootGuard.setStatus('current')
if mibBuilder.loadTexts: hwdot1sMstiPortRootGuard.setDescription('Whether the root guard is enabled. Effective in CIST.')
hwdot1sMstiPortLoopGuard = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 14, 20, 1, 27), EnabledStatus().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwdot1sMstiPortLoopGuard.setStatus('current')
if mibBuilder.loadTexts: hwdot1sMstiPortLoopGuard.setDescription('Whether the loop protection is enabled. Effective in CIST.')
hwdot1sMstiStpPortSendingBPDUType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 14, 20, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("stp", 1), ("rstp", 2), ("mstp", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwdot1sMstiStpPortSendingBPDUType.setStatus('current')
if mibBuilder.loadTexts: hwdot1sMstiStpPortSendingBPDUType.setDescription('Type of BPDU which the port is sending.')
hwdot1sMstiStpOperPortPointToPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 14, 20, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwdot1sMstiStpOperPortPointToPoint.setStatus('current')
if mibBuilder.loadTexts: hwdot1sMstiStpOperPortPointToPoint.setDescription('This object indicates whether the port has connected to a point-to-point link or not. The value of the node is an operative value. The administrative value can be read from the node hwdot1sMstiStpPortPointToPoint. If the value of hwdot1sMstiStpPortPointToPoint is auto, the value of this node should be calculated by the network topology of this port. If the value of hwdot1sMstiStpPortPointToPoint is forceFalse, the value of this node is false. If the value of hwdot1sMstiStpPortPointToPoint is forceTrue, the value of this node is true.')
hwdot1sMstiStpPortAdminBPDUFmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 14, 20, 1, 30), Hwdot1sFormatStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwdot1sMstiStpPortAdminBPDUFmt.setStatus('current')
if mibBuilder.loadTexts: hwdot1sMstiStpPortAdminBPDUFmt.setDescription('The value of the node is an administrative value. Value legacy means that the MST BPDU format is forced to legacy. Value dot1s means that the MST BPDU format is forced to IEEE 802.1s. Value auto means that the format of MST BPDU sending on the port is determined by the MST BPDU that the port has received. Effective in CIST.')
hwdot1sMstiStpPortOperBPDUFmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 14, 20, 1, 31), Hwdot1sFormatStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwdot1sMstiStpPortOperBPDUFmt.setStatus('current')
if mibBuilder.loadTexts: hwdot1sMstiStpPortOperBPDUFmt.setDescription('The format of MST BPDU which the port is sending. Value legacy means that the format of MST BPDU sending on the port is legacy. Value dot1s means that the format of MST BPDU sending on the port is IEEE 802.1s. Effective in CIST.')
hwdot1sStpPathCostStandard = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 14, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("legacy", 0), ("dot1d-1998", 1), ("dot1t", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwdot1sStpPathCostStandard.setStatus('current')
if mibBuilder.loadTexts: hwdot1sStpPathCostStandard.setDescription('Path cost standard of the bridge. Value dot1d-1998 is IEEE 802.1d standard in 1998, value dot1t is IEEE 802.1t standard, and value legacy is a private legacy standard.')
hwMstpEventsV2 = ObjectIdentity((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 14, 0))
if mibBuilder.loadTexts: hwMstpEventsV2.setStatus('current')
if mibBuilder.loadTexts: hwMstpEventsV2.setDescription('Definition point for Mstp notifications.')
hwPortMstiStateForwarding = NotificationType((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 14, 0, 1)).setObjects(("HUAWEI-LswMSTP-MIB", "hwdot1sInstanceID"), ("HUAWEI-LswMSTP-MIB", "hwdot1sMstiPortIndex"))
if mibBuilder.loadTexts: hwPortMstiStateForwarding.setStatus('current')
if mibBuilder.loadTexts: hwPortMstiStateForwarding.setDescription('The SNMP trap that is generated when a port turns into forwarding state form other state.')
hwPortMstiStateDiscarding = NotificationType((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 14, 0, 2)).setObjects(("HUAWEI-LswMSTP-MIB", "hwdot1sInstanceID"), ("HUAWEI-LswMSTP-MIB", "hwdot1sMstiPortIndex"))
if mibBuilder.loadTexts: hwPortMstiStateDiscarding.setStatus('current')
if mibBuilder.loadTexts: hwPortMstiStateDiscarding.setDescription('The SNMP trap that is generated when a port turns into discarding state form forwarding state.')
hwBridgeLostRootPrimary = NotificationType((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 14, 0, 3)).setObjects(("HUAWEI-LswMSTP-MIB", "hwdot1sInstanceID"))
if mibBuilder.loadTexts: hwBridgeLostRootPrimary.setStatus('current')
if mibBuilder.loadTexts: hwBridgeLostRootPrimary.setDescription('The SNMP trap that is generated when the bridge is no longer the root bridge of the instance. Another switch with higher priority has already been the root bridge of the instance.')
hwPortMstiRootGuarded = NotificationType((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 14, 0, 4)).setObjects(("HUAWEI-LswMSTP-MIB", "hwdot1sInstanceID"), ("HUAWEI-LswMSTP-MIB", "hwdot1sMstiPortIndex"))
if mibBuilder.loadTexts: hwPortMstiRootGuarded.setStatus('current')
if mibBuilder.loadTexts: hwPortMstiRootGuarded.setDescription('The SNMP trap that is generated when a root-guard port receives a superior message on the relevant instance.')
hwPortMstiBpduGuarded = NotificationType((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 14, 0, 5)).setObjects(("BRIDGE-MIB", "dot1dStpPort"))
if mibBuilder.loadTexts: hwPortMstiBpduGuarded.setStatus('current')
if mibBuilder.loadTexts: hwPortMstiBpduGuarded.setDescription('The SNMP trap that is generated when an edged port of the BPDU-guard switch recevies BPDU packets.')
hwPortMstiLoopGuarded = NotificationType((1, 3, 6, 1, 4, 1, 2011, 2, 23, 1, 14, 0, 6)).setObjects(("HUAWEI-LswMSTP-MIB", "hwdot1sInstanceID"), ("HUAWEI-LswMSTP-MIB", "hwdot1sMstiPortIndex"))
if mibBuilder.loadTexts: hwPortMstiLoopGuarded.setStatus('current')
if mibBuilder.loadTexts: hwPortMstiLoopGuarded.setDescription('The SNMP trap that is generated when an Alternate-Port or Root-Port is aged out.')
mibBuilder.exportSymbols("HUAWEI-LswMSTP-MIB", hwdot1sMstiDesignatedRoot=hwdot1sMstiDesignatedRoot, hwdot1sMstAdminRevisionLevel=hwdot1sMstAdminRevisionLevel, hwdot1sMstOperRevisionLevel=hwdot1sMstOperRevisionLevel, hwdot1sStpPathCostStandard=hwdot1sStpPathCostStandard, hwdot1sMstiAdminMappedVlanListLow=hwdot1sMstiAdminMappedVlanListLow, hwdot1sMstiStpClearStatistics=hwdot1sMstiStpClearStatistics, hwdot1sMstiStpPortSendingBPDUType=hwdot1sMstiStpPortSendingBPDUType, hwdot1sMstiPortIndex=hwdot1sMstiPortIndex, hwdot1sStpForceVersion=hwdot1sStpForceVersion, hwdot1sMstiStpPortOperBPDUFmt=hwdot1sMstiStpPortOperBPDUFmt, BridgeId=BridgeId, hwdot1sVIDAllocationTable=hwdot1sVIDAllocationTable, hwdot1sMstBpduGuard=hwdot1sMstBpduGuard, hwdot1sMstDefaultRegionName=hwdot1sMstDefaultRegionName, hwdot1sMstiPathCost=hwdot1sMstiPathCost, hwMstpEventsV2=hwMstpEventsV2, hwdot1sInstanceTable=hwdot1sInstanceTable, hwdot1sMstiStpPortAdminBPDUFmt=hwdot1sMstiStpPortAdminBPDUFmt, hwdot1sStpStatus=hwdot1sStpStatus, hwdot1sMstiStpPortPointToPoint=hwdot1sMstiStpPortPointToPoint, hwdot1sMstiDesignatedPort=hwdot1sMstiDesignatedPort, hwdot1sMstiMasterBridgeID=hwdot1sMstiMasterBridgeID, hwdot1sMstiOperMappedVlanListHigh=hwdot1sMstiOperMappedVlanListHigh, hwdot1sMstiStpTXMSTPBPDU=hwdot1sMstiStpTXMSTPBPDU, hwPortMstiStateForwarding=hwPortMstiStateForwarding, hwdot1sMstiStpRXRSTPBPDU=hwdot1sMstiStpRXRSTPBPDU, hwdot1sMstiMasterPortCost=hwdot1sMstiMasterPortCost, hwdot1sMstOperConfigDigest=hwdot1sMstOperConfigDigest, EnabledStatus=EnabledStatus, hwdot1sMstiRootType=hwdot1sMstiRootType, hwdot1sMstiStpRXMSTPBPDU=hwdot1sMstiStpRXMSTPBPDU, hwdot1sPortEntry=hwdot1sPortEntry, hwPortMstiLoopGuarded=hwPortMstiLoopGuarded, hwdot1sMstiOperMappedVlanListLow=hwdot1sMstiOperMappedVlanListLow, hwdot1sMstiStpMcheck=hwdot1sMstiStpMcheck, hwdot1sMstiAdminMappedVlanListHigh=hwdot1sMstiAdminMappedVlanListHigh, hwdot1sMstiStpStatus=hwdot1sMstiStpStatus, hwdot1sMstiDesignedRoot=hwdot1sMstiDesignedRoot, hwPortMstiRootGuarded=hwPortMstiRootGuarded, hwdot1sMstRegionConfActive=hwdot1sMstRegionConfActive, hwdot1sMstiState=hwdot1sMstiState, Hwdot1sFormatStatus=Hwdot1sFormatStatus, hwdot1sMstiRootPort=hwdot1sMstiRootPort, hwdot1sInstanceID=hwdot1sInstanceID, hwdot1sMstiStpTXRSTPBPDU=hwdot1sMstiStpTXRSTPBPDU, hwdot1sMstOperRegionName=hwdot1sMstOperRegionName, hwdot1sStpDiameter=hwdot1sStpDiameter, hwPortMstiBpduGuarded=hwPortMstiBpduGuarded, hwdot1sMstOperFormatSelector=hwdot1sMstOperFormatSelector, hwdot1sMstiBridgeID=hwdot1sMstiBridgeID, hwdot1sPortTable=hwdot1sPortTable, hwdot1sMstiRemainingHops=hwdot1sMstiRemainingHops, hwdot1sMstiStpTransLimit=hwdot1sMstiStpTransLimit, hwdot1sMstiStpTXStpBPDU=hwdot1sMstiStpTXStpBPDU, hwdot1sVIDAllocationEntry=hwdot1sVIDAllocationEntry, hwBridgeLostRootPrimary=hwBridgeLostRootPrimary, hwdot1sMstiPortPriority=hwdot1sMstiPortPriority, hwdot1sMstiDesignatedBridge=hwdot1sMstiDesignatedBridge, hwdot1sMstiPortRootGuard=hwdot1sMstiPortRootGuard, PYSNMP_MODULE_ID=hwdot1sMstp, hwdot1sMstp=hwdot1sMstp, hwdot1sMstiStpDefaultPortCost=hwdot1sMstiStpDefaultPortCost, hwdot1sMstiRootPathCost=hwdot1sMstiRootPathCost, hwdot1sInstanceEntry=hwdot1sInstanceEntry, hwdot1sMstiStpOperPortPointToPoint=hwdot1sMstiStpOperPortPointToPoint, hwdot1sMstDefaultVlanAllo=hwdot1sMstDefaultVlanAllo, hwdot1sMstiStpRXTCNBPDU=hwdot1sMstiStpRXTCNBPDU, hwdot1sMstiStpPortEdgeport=hwdot1sMstiStpPortEdgeport, hwdot1sMstBridgeMaxHops=hwdot1sMstBridgeMaxHops, hwdot1sOperMstID=hwdot1sOperMstID, hwdot1sMstAdminRegionName=hwdot1sMstAdminRegionName, hwdot1sMstVID=hwdot1sMstVID, hwdot1sMstMasterBridgeID=hwdot1sMstMasterBridgeID, hwdot1sMstMasterPathCost=hwdot1sMstMasterPathCost, hwdot1sAdminMstID=hwdot1sAdminMstID, hwdot1sMstiStpRXStpBPDU=hwdot1sMstiStpRXStpBPDU, hwdot1sMstiPortLoopGuard=hwdot1sMstiPortLoopGuard, hwdot1sMstAdminFormatSelector=hwdot1sMstAdminFormatSelector, hwdot1sMstiStpTXTCNBPDU=hwdot1sMstiStpTXTCNBPDU, hwPortMstiStateDiscarding=hwPortMstiStateDiscarding, hwdot1sMstiBridgePriority=hwdot1sMstiBridgePriority, hwdot1sMstiDesignatedCost=hwdot1sMstiDesignatedCost)
