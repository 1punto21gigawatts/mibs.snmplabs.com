#
# PySNMP MIB module IBM3172-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/IBM3172-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:51:21 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
Counter64, Integer32, TimeTicks, enterprises, Counter32, ModuleIdentity, NotificationType, Gauge32, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, IpAddress, iso, Bits, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "Integer32", "TimeTicks", "enterprises", "Counter32", "ModuleIdentity", "NotificationType", "Gauge32", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "IpAddress", "iso", "Bits", "Unsigned32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
ibm3172MIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2, 6, 1, 8))
if mibBuilder.loadTexts: ibm3172MIB.setLastUpdated('9704070000Z')
if mibBuilder.loadTexts: ibm3172MIB.setOrganization('OS/390 TCP/IP OpenEdition Development')
if mibBuilder.loadTexts: ibm3172MIB.setContactInfo(' Kenneth White Postal: International Business Machines Corporation P.O. Box 12195 Dept. G80/Bldg. 503 Research Triangle Park, NC 27709 USA Tel: +1 919 254 0102 Fax: +1 919 254 4027 E-mail: kennethw@vnet.ibm.com')
if mibBuilder.loadTexts: ibm3172MIB.setDescription('The MIB module for managing an IBM 3172 Device that has is running ICP.')
ibm = MibIdentifier((1, 3, 6, 1, 4, 1, 2))
ibmProd = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6))
ibm3172 = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 1))
ibm3172SystemTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 1, 1), )
if mibBuilder.loadTexts: ibm3172SystemTable.setStatus('current')
if mibBuilder.loadTexts: ibm3172SystemTable.setDescription('Descriptive information about units of 3172s.')
ibm3172SystemTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: ibm3172SystemTableEntry.setStatus('current')
if mibBuilder.loadTexts: ibm3172SystemTableEntry.setDescription('Descriptive information about a 3172.')
ibm3172Descr = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 1, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 253))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibm3172Descr.setStatus('current')
if mibBuilder.loadTexts: ibm3172Descr.setDescription("Text Description of the 3172. Contains information on the hardware and software of the 3172. The format of the ibm3172Descr variable is : ttttxMODELxmmm,xSERIALxNUMBERxsssssssss,xiiiiiiiiiix 111111,xPROGRAMxNUMBERxpppppp where : x represents a blank character upper case letters are hardcoded characters , represents a comma the remaining lower case letters represent variable data as follows: t - machine type m - model number s - serial number i - software program name l - software level numbers p - software program product number. An example of the information sent with this attribute would be : '3172 MODEL 001, SERIAL NUMBER 000001234, 3172 Interconnect Ctlr Program 020100, 5601433'")
ibm3172Contact = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibm3172Contact.setStatus('current')
if mibBuilder.loadTexts: ibm3172Contact.setDescription('The textual identification of the contact person for this 3172, together with information on how to contact this person. This information is provided by the 3172 Operator Facility.')
ibm3172Location = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibm3172Location.setStatus('current')
if mibBuilder.loadTexts: ibm3172Location.setDescription('The physical location of this node. This information is provided by the 3172 Operator Facility.')
ibm3172ifNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 1, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibm3172ifNumber.setStatus('current')
if mibBuilder.loadTexts: ibm3172ifNumber.setDescription('The number of interfaces (regardless of their current state) on which this 3172 can send data.')
ibm3172ifTrapTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 1, 2), )
if mibBuilder.loadTexts: ibm3172ifTrapTable.setStatus('current')
if mibBuilder.loadTexts: ibm3172ifTrapTable.setDescription('Table of objects at the interface level pertaining to the trap function.')
ibm3172ifTrapTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: ibm3172ifTrapTableEntry.setStatus('current')
if mibBuilder.loadTexts: ibm3172ifTrapTableEntry.setDescription('Objects at the interface level pertaining to the trap function.')
ibm3172ifTrapEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibm3172ifTrapEnable.setStatus('current')
if mibBuilder.loadTexts: ibm3172ifTrapEnable.setDescription("Flag to indicate whether the 3172 should send traps for this interface to the SNMP proxy agent. '0' indicates the trap function of the 3172 is disabled, '1' indicates that it is enabled.")
ibm3172ifChanCountersTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 1, 3), )
if mibBuilder.loadTexts: ibm3172ifChanCountersTable.setStatus('current')
if mibBuilder.loadTexts: ibm3172ifChanCountersTable.setDescription('Table of objects at the subnetwork layer and below pertaining to a particular subchannel of the 3172.')
ibm3172ifChanCountersTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 1, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: ibm3172ifChanCountersTableEntry.setStatus('current')
if mibBuilder.loadTexts: ibm3172ifChanCountersTableEntry.setDescription('Objects at the subnetwork layer and below pertaining to a particular subchannel of the 3172.')
ibm3172ifInChanOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 1, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibm3172ifInChanOctets.setStatus('current')
if mibBuilder.loadTexts: ibm3172ifInChanOctets.setDescription('The number of inbound octets which were transmitted to the host by the 3172, including all headers.')
ibm3172ifOutChanOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 1, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibm3172ifOutChanOctets.setStatus('current')
if mibBuilder.loadTexts: ibm3172ifOutChanOctets.setDescription('The number of outbound octets which were received from the host by the 3172, including all headers.')
ibm3172ifInChanBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 1, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibm3172ifInChanBlocks.setStatus('current')
if mibBuilder.loadTexts: ibm3172ifInChanBlocks.setDescription('The number of inbound blocks which were transmitted to the host by the 3172.')
ibm3172ifOutChanBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 1, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibm3172ifOutChanBlocks.setStatus('current')
if mibBuilder.loadTexts: ibm3172ifOutChanBlocks.setDescription('The number of outbound blocks which were received from the host by the 3172.')
ibm3172ifLANCountersTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 1, 4), )
if mibBuilder.loadTexts: ibm3172ifLANCountersTable.setStatus('current')
if mibBuilder.loadTexts: ibm3172ifLANCountersTable.setDescription('Table of objects at the subnetwork layer and below pertaining to a particular LAN of the 3172.')
ibm3172ifLANCountersTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 1, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: ibm3172ifLANCountersTableEntry.setStatus('current')
if mibBuilder.loadTexts: ibm3172ifLANCountersTableEntry.setDescription('Objects at the subnetwork layer and below pertaining to a particular LAN of the 3172.')
ibm3172ifInLANOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 1, 4, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibm3172ifInLANOctets.setStatus('current')
if mibBuilder.loadTexts: ibm3172ifInLANOctets.setDescription('The number of inbound octets which were received from the LAN by the 3172, including all headers.')
ibm3172ifOutLANOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 1, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibm3172ifOutLANOctets.setStatus('current')
if mibBuilder.loadTexts: ibm3172ifOutLANOctets.setDescription('The number of outbound octets which were transmitted to the LAN by the 3172, including all headers.')
ibm3172ifInLANFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 1, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibm3172ifInLANFrames.setStatus('current')
if mibBuilder.loadTexts: ibm3172ifInLANFrames.setDescription('The number of inbound frames which were received from the LAN by the 3172.')
ibm3172ifOutLANFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 1, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibm3172ifOutLANFrames.setStatus('current')
if mibBuilder.loadTexts: ibm3172ifOutLANFrames.setDescription('The number of outbound frames which were transmitted to the LAN by the 3172.')
ibm3172ifInLANErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 1, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibm3172ifInLANErrors.setStatus('current')
if mibBuilder.loadTexts: ibm3172ifInLANErrors.setDescription('The number of inbound frames received from the LAN by the 3172 that contained errors preventing them from being deliverable to a higher layer protocol. This variable, when combined with ibm3172ifInBlkErrors, reflects the total number of inbound frames not forwarded from the LAN to the host because of errors.')
ibm3172ifOutLANErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 1, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibm3172ifOutLANErrors.setStatus('current')
if mibBuilder.loadTexts: ibm3172ifOutLANErrors.setDescription('The number of outbound frames that could not be transmitted to the LAN because of transmission failures. This variable, when combined with ibm3172ifOutDblkErrors, reflects the total number of outbound frames not transmitted to the LAN because of transmission errors.')
ibm3172ifInLANDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 1, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibm3172ifInLANDiscards.setStatus('current')
if mibBuilder.loadTexts: ibm3172ifInLANDiscards.setDescription('The number of inbound frames received from the LAN that were discarded by the 3172, even though no errors had been detected to prevent their being deliverable to a higher layer protocol. One possible reason for discarding such a frame could be because of insufficient buffer space. This variable, when combined with ibm3172ifInBlkDiscards, reflects the total number of inbound frames not forwarded from the LAN when no error was detected.')
ibm3172ifOutLANDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 1, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibm3172ifOutLANDiscards.setStatus('current')
if mibBuilder.loadTexts: ibm3172ifOutLANDiscards.setDescription('The number of outbound frames that are discarded.')
ibm3172ifBlkCountersTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 1, 5), )
if mibBuilder.loadTexts: ibm3172ifBlkCountersTable.setStatus('current')
if mibBuilder.loadTexts: ibm3172ifBlkCountersTable.setDescription('Table of objects at the Subnetwork layer and below pertaining to a particular Blocker Task of the 3172.')
ibm3172ifBlkCountersTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 1, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: ibm3172ifBlkCountersTableEntry.setStatus('current')
if mibBuilder.loadTexts: ibm3172ifBlkCountersTableEntry.setDescription('Objects at the Subnetwork layer and below pertaining to a particular Blocker Task of the 3172.')
ibm3172ifBlkRcvOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 1, 5, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibm3172ifBlkRcvOctets.setStatus('current')
if mibBuilder.loadTexts: ibm3172ifBlkRcvOctets.setDescription('The number of inbound octets which were received by the Blocker from the LAN, including all headers.')
ibm3172ifBlkXmitOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 1, 5, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibm3172ifBlkXmitOctets.setStatus('current')
if mibBuilder.loadTexts: ibm3172ifBlkXmitOctets.setDescription('The number of inbound octets which were transmitted to the channel adapter by the Blocker, including all headers.')
ibm3172ifBlkRcvFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 1, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibm3172ifBlkRcvFrames.setStatus('current')
if mibBuilder.loadTexts: ibm3172ifBlkRcvFrames.setDescription('The number of inbound frames which were received from the LAN adapter by the Blocker Task.')
ibm3172ifBlkXmitBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 1, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibm3172ifBlkXmitBlocks.setStatus('current')
if mibBuilder.loadTexts: ibm3172ifBlkXmitBlocks.setDescription('The number of inbound blocks which were transmitted to the channel adapter by the blocker task.')
ibm3172ifInBlkErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 1, 5, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibm3172ifInBlkErrors.setStatus('current')
if mibBuilder.loadTexts: ibm3172ifInBlkErrors.setDescription('The number of inbound frames transmitted by the LAN adapter to the Blocker Task which contained errors preventing them from being deliverable to a higher layer protocol. This variable, when combined with ibm3172ifInLANErrors, reflects the total number of inbound frames discarded by the 3172 because of errors.')
ibm3172ifInBlkDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 1, 5, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibm3172ifInBlkDiscards.setStatus('current')
if mibBuilder.loadTexts: ibm3172ifInBlkDiscards.setDescription('The number of inbound frames transmitted by the LAN adapter to the Blocker Task which were discarded by the 3172, even though no errors had been detected to prevent their being deliverable to a higher layer protocol. One possible reason for discarding such a frame could be because of insufficient buffer space. This variable, when combined with ibm3172ifInLANDiscards, reflects the total number of inbound frames discarded by the 3172 when no error was detected.')
ibm3172ifDblkCountersTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 1, 6), )
if mibBuilder.loadTexts: ibm3172ifDblkCountersTable.setStatus('current')
if mibBuilder.loadTexts: ibm3172ifDblkCountersTable.setDescription('Table of objects at the subnetwork layer and below pertaining to a particular Deblocker Task of the 3172.')
ibm3172ifDblkCountersTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 1, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: ibm3172ifDblkCountersTableEntry.setStatus('current')
if mibBuilder.loadTexts: ibm3172ifDblkCountersTableEntry.setDescription('Objects at the subnetwork layer and below pertaining to a particular Deblocker Task of the 3172.')
ibm3172ifDblkRcvOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 1, 6, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibm3172ifDblkRcvOctets.setStatus('current')
if mibBuilder.loadTexts: ibm3172ifDblkRcvOctets.setDescription('The number of outbound octets which were received by the Deblocker from the channel adapter, including all headers.')
ibm3172ifDblkXmitOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 1, 6, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibm3172ifDblkXmitOctets.setStatus('current')
if mibBuilder.loadTexts: ibm3172ifDblkXmitOctets.setDescription('The number of outbound octets which were transmitted to the LAN adapter by the Deblocker, including all headers.')
ibm3172ifDblkRcvBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 1, 6, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibm3172ifDblkRcvBlocks.setStatus('current')
if mibBuilder.loadTexts: ibm3172ifDblkRcvBlocks.setDescription('The number of outbound blocks which were received from the channel adapter by the deblocker task.')
ibm3172ifDblkXmitFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 1, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibm3172ifDblkXmitFrames.setStatus('current')
if mibBuilder.loadTexts: ibm3172ifDblkXmitFrames.setDescription('The number of outbound frames which were transmitted to the LAN adapter by the Deblocker Task.')
ibm3172ifOutDblkErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 1, 6, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibm3172ifOutDblkErrors.setStatus('current')
if mibBuilder.loadTexts: ibm3172ifOutDblkErrors.setDescription('The number of outbound frames transmitted by the channel adapter to the Deblocker Task which contained errors preventing them from being deliverable to a higher layer protocol. This variable, when combined with ibm3172ifOutLANErrors, reflects the total number of outbound frames discarded by the 3172 because of errors.')
ibm3172ifOutDblkDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 1, 6, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibm3172ifOutDblkDiscards.setStatus('current')
if mibBuilder.loadTexts: ibm3172ifOutDblkDiscards.setDescription('The number of outbound frames transmitted by the channel adapter to the Deblocker Task which were discarded by the 3172, even though no errors had been detected to prevent their being deliverable to a higher layer protocol . One possible reason for discarding such a frame could be because of insufficient buffer space. This variable reflects the total number of outbound frames discarded by the 3172 when no error was detected.')
ibm3172ifDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 1, 7), )
if mibBuilder.loadTexts: ibm3172ifDeviceTable.setStatus('current')
if mibBuilder.loadTexts: ibm3172ifDeviceTable.setDescription('')
ibm3172ifDeviceTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 1, 7, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: ibm3172ifDeviceTableEntry.setStatus('current')
if mibBuilder.loadTexts: ibm3172ifDeviceTableEntry.setDescription('')
ibm3172ifDeviceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 1, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibm3172ifDeviceNumber.setStatus('current')
if mibBuilder.loadTexts: ibm3172ifDeviceNumber.setDescription('The instance number, used to reference the ibm3172SystemTable, for the device associated with this interface.')
ibm3172MIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 1, 8, 2))
ibm3172MIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 1, 8, 2, 1))
ibm3172MIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 1, 8, 2, 2))
ibm3172MIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2, 6, 1, 8, 2, 1, 1)).setObjects(("IBM3172-MIB", "ibm3172Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ibm3172MIBCompliance = ibm3172MIBCompliance.setStatus('current')
if mibBuilder.loadTexts: ibm3172MIBCompliance.setDescription('The compliance statement for SNMPv2 entities which implement the IBM3172 MIB.')
ibm3172Group = ObjectGroup((1, 3, 6, 1, 4, 1, 2, 6, 1, 8, 2, 2, 1)).setObjects(("IBM3172-MIB", "ibm3172Descr"), ("IBM3172-MIB", "ibm3172Contact"), ("IBM3172-MIB", "ibm3172Location"), ("IBM3172-MIB", "ibm3172ifNumber"), ("IBM3172-MIB", "ibm3172ifTrapEnable"), ("IBM3172-MIB", "ibm3172ifInChanOctets"), ("IBM3172-MIB", "ibm3172ifOutChanOctets"), ("IBM3172-MIB", "ibm3172ifInChanBlocks"), ("IBM3172-MIB", "ibm3172ifOutChanBlocks"), ("IBM3172-MIB", "ibm3172ifInLANOctets"), ("IBM3172-MIB", "ibm3172ifOutLANOctets"), ("IBM3172-MIB", "ibm3172ifInLANFrames"), ("IBM3172-MIB", "ibm3172ifOutLANFrames"), ("IBM3172-MIB", "ibm3172ifInLANErrors"), ("IBM3172-MIB", "ibm3172ifOutLANErrors"), ("IBM3172-MIB", "ibm3172ifInLANDiscards"), ("IBM3172-MIB", "ibm3172ifOutLANDiscards"), ("IBM3172-MIB", "ibm3172ifBlkRcvOctets"), ("IBM3172-MIB", "ibm3172ifBlkXmitOctets"), ("IBM3172-MIB", "ibm3172ifBlkRcvFrames"), ("IBM3172-MIB", "ibm3172ifBlkXmitBlocks"), ("IBM3172-MIB", "ibm3172ifInBlkErrors"), ("IBM3172-MIB", "ibm3172ifInBlkDiscards"), ("IBM3172-MIB", "ibm3172ifDblkRcvOctets"), ("IBM3172-MIB", "ibm3172ifDblkXmitOctets"), ("IBM3172-MIB", "ibm3172ifDblkRcvBlocks"), ("IBM3172-MIB", "ibm3172ifDblkXmitFrames"), ("IBM3172-MIB", "ibm3172ifOutDblkErrors"), ("IBM3172-MIB", "ibm3172ifOutDblkDiscards"), ("IBM3172-MIB", "ibm3172ifDeviceNumber"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ibm3172Group = ibm3172Group.setStatus('current')
if mibBuilder.loadTexts: ibm3172Group.setDescription('The ibm3172 group of objects providing for basic management of of an IBM 3172 device running ICP.')
mibBuilder.exportSymbols("IBM3172-MIB", ibm3172ifOutLANErrors=ibm3172ifOutLANErrors, ibm3172ifChanCountersTableEntry=ibm3172ifChanCountersTableEntry, ibm3172ifDeviceNumber=ibm3172ifDeviceNumber, ibm3172ifBlkCountersTableEntry=ibm3172ifBlkCountersTableEntry, ibm3172ifInLANFrames=ibm3172ifInLANFrames, ibm3172=ibm3172, ibm3172ifInBlkDiscards=ibm3172ifInBlkDiscards, ibm3172MIBGroups=ibm3172MIBGroups, ibmProd=ibmProd, ibm3172ifDblkXmitOctets=ibm3172ifDblkXmitOctets, ibm3172Descr=ibm3172Descr, ibm3172Location=ibm3172Location, ibm3172SystemTable=ibm3172SystemTable, ibm3172ifTrapTable=ibm3172ifTrapTable, ibm3172ifOutLANDiscards=ibm3172ifOutLANDiscards, ibm3172ifBlkXmitOctets=ibm3172ifBlkXmitOctets, ibm3172ifOutLANFrames=ibm3172ifOutLANFrames, ibm3172ifTrapEnable=ibm3172ifTrapEnable, ibm3172ifOutChanOctets=ibm3172ifOutChanOctets, ibm3172MIBConformance=ibm3172MIBConformance, ibm3172Group=ibm3172Group, ibm3172SystemTableEntry=ibm3172SystemTableEntry, ibm3172ifDblkCountersTable=ibm3172ifDblkCountersTable, ibm3172ifDeviceTable=ibm3172ifDeviceTable, ibm3172ifBlkRcvOctets=ibm3172ifBlkRcvOctets, ibm3172ifDblkRcvBlocks=ibm3172ifDblkRcvBlocks, ibm3172ifLANCountersTableEntry=ibm3172ifLANCountersTableEntry, ibm3172MIBCompliance=ibm3172MIBCompliance, ibm3172ifDblkRcvOctets=ibm3172ifDblkRcvOctets, ibm3172ifInLANOctets=ibm3172ifInLANOctets, ibm3172ifBlkXmitBlocks=ibm3172ifBlkXmitBlocks, ibm3172ifInLANErrors=ibm3172ifInLANErrors, ibm3172Contact=ibm3172Contact, ibm3172ifInChanBlocks=ibm3172ifInChanBlocks, ibm3172ifOutLANOctets=ibm3172ifOutLANOctets, ibm3172ifInChanOctets=ibm3172ifInChanOctets, PYSNMP_MODULE_ID=ibm3172MIB, ibm3172ifTrapTableEntry=ibm3172ifTrapTableEntry, ibm3172ifInLANDiscards=ibm3172ifInLANDiscards, ibm3172ifBlkRcvFrames=ibm3172ifBlkRcvFrames, ibm=ibm, ibm3172ifDblkCountersTableEntry=ibm3172ifDblkCountersTableEntry, ibm3172ifLANCountersTable=ibm3172ifLANCountersTable, ibm3172ifNumber=ibm3172ifNumber, ibm3172ifOutDblkDiscards=ibm3172ifOutDblkDiscards, ibm3172ifDblkXmitFrames=ibm3172ifDblkXmitFrames, ibm3172ifChanCountersTable=ibm3172ifChanCountersTable, ibm3172ifOutChanBlocks=ibm3172ifOutChanBlocks, ibm3172ifInBlkErrors=ibm3172ifInBlkErrors, ibm3172MIB=ibm3172MIB, ibm3172MIBCompliances=ibm3172MIBCompliances, ibm3172ifBlkCountersTable=ibm3172ifBlkCountersTable, ibm3172ifDeviceTableEntry=ibm3172ifDeviceTableEntry, ibm3172ifOutDblkErrors=ibm3172ifOutDblkErrors)
