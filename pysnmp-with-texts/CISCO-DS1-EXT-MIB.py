#
# PySNMP MIB module CISCO-DS1-EXT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-DS1-EXT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:56:06 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
BulkConfigResult, ConfigIterator = mibBuilder.importSymbols("CISCO-TC", "BulkConfigResult", "ConfigIterator")
dsx1FarEndCurrentEntry, dsx1FarEndIntervalEntry, dsx1TotalEntry, dsx1IntervalEntry, dsx1CurrentEntry, dsx1FarEndTotalEntry, dsx1ConfigEntry = mibBuilder.importSymbols("DS1-MIB", "dsx1FarEndCurrentEntry", "dsx1FarEndIntervalEntry", "dsx1TotalEntry", "dsx1IntervalEntry", "dsx1CurrentEntry", "dsx1FarEndTotalEntry", "dsx1ConfigEntry")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
PerfIntervalCount, PerfTotalCount, PerfCurrentCount = mibBuilder.importSymbols("PerfHist-TC-MIB", "PerfIntervalCount", "PerfTotalCount", "PerfCurrentCount")
OwnerString, = mibBuilder.importSymbols("RMON-MIB", "OwnerString")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
IpAddress, Counter64, iso, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, Integer32, ModuleIdentity, Bits, Unsigned32, TimeTicks, NotificationType, Gauge32, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "Counter64", "iso", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "Integer32", "ModuleIdentity", "Bits", "Unsigned32", "TimeTicks", "NotificationType", "Gauge32", "MibIdentifier")
TextualConvention, RowStatus, DisplayString, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "RowStatus", "DisplayString", "TruthValue")
ciscoDs1ExtMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 229))
ciscoDs1ExtMIB.setRevisions(('2003-02-25 00:00', '2002-12-30 00:00', '2001-09-13 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoDs1ExtMIB.setRevisionsDescriptions(('Add new table: cds1CallConfigTable', 'Add the following objects to cds1ConfigTable: cds1Repetition, cds1RepetitionOwner, cds1RepetitionResult. ', 'Initial version of the MIB module.',))
if mibBuilder.loadTexts: ciscoDs1ExtMIB.setLastUpdated('200302250000Z')
if mibBuilder.loadTexts: ciscoDs1ExtMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoDs1ExtMIB.setContactInfo('Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-wanatm@cisco.com')
if mibBuilder.loadTexts: ciscoDs1ExtMIB.setDescription('The MIB module to describe DS1/E1 interface objects. This is an extension to the standard DS1/E1 MIB (RFC 2495). Unless mentioned, the DS1 interface refers to both T1/E1 interfaces. Terminology ( Taken From RFC2495) AIS - Alarm Indication Signal LOS - Loss Of Signal LOF - Loss Of Frame Yellow Alarm - Far End LOF. Red Alarm - Near End LOF. BPV - Bipolar Violation for an AMI-coded signal is the occurrence of a pulse of the same polarity as the previous pulse. A BPV error event for a B8ZS- or HDB3- coded signal is the occurrence of a pulse of the same polarity as the previous pulse without being part of the zero substitution code. (See TR-TSV-000773 Section 3.5.1.1) EXZ - An Excessive Zeroes error event for an AMI-coded signal is the occurrence of more than fifteen contiguous zeroes. For a B8ZS coded signal, the defect occurs when more than seven contiguous zeroes are detected. LCV - Line Coding Violation is the occurrence of either Bipolar Violation (BPV) or Excessive Zeroes (EXZ) error event. PCV - A Path Coding Violation error event is a frame synchronization bit error in the D4 and E1-noCRC formats, or a CRC or frame synch. bit error in the ESF and E1-CRC formats. (Also known as CV-P; See T1.231 Section 6.5.2.1) CS - A Controlled Slip is the replication or deletion of the payload bits of a DS1 frame. (See T1.231 Section 6.1.1.2.3) A Controlled Slip may be performed when there is a difference between the timing of a synchronous receiving terminal and the received signal. A Controlled Slip does not cause an Out of Frame defect. LES - Line Errored Seconds. A LES is a second in which one or more LCV error events are detected. (See TR-TSV-000773 Section 3.5.1.1) ES - Errored Seconds (ES). For ESF and E1-CRC links an ES is a second with one or more PCV or one or more OOF defects OR one or more CS events OR a detected AIS defect. (See TR-TSV-000773 Section 3.5.1.1) For D4 and EN-noCRC links, the presence of BPVs also triggers an ES. This is not incremented during an UAS. BES - Bursty Errored Seconds. A BES is a second with fewer than 1 PCV error events, no Severely Errored Frame defects and no detected incoming AIS defects. The CS are not included in this parameter. This is not incremented during an UAS. It applies to ESF signals only. SES - Severely Errored Seconds. A SES for ESF signals is a second with 320 or more PCV error events OR one or more OOF defects OR a detected AIS defect. (See TR-TSV-000773 Section 3.5.1.1) For E1-CRC signals, a SES is a second with 832 or PCV error events OR one or more OOF defects. For E1-noCRC signals, a SES is a 2048 LCVs or more. For D4 signals, a SES is a count of one second intervals with Framing Error events, or an OOF defect, or 1544 LCVs or more. SEFS - Severely Errored Framing Second. An SESF is a second with one or more OOF defects OR a detected AIS defect. (Also known as SAS-P (SEF/AIS second). (See TR-TSV-000773 Section 3.5.1.1) DM - Degraded Minutes. A DM is one in which the estimated error rate exceeds 1E-6 but does not exceed 1E-3. UAS - Unavailable Seconds. The UAS are calculated by counting the number of seconds that the interface is unavailable. CSS - Controlled Slip Seconds. A CSS is a one-second interval containing one or more controlled slips. This is not incremented during an Unavailable Second. LSES - Line Severely Errored Seconds is defined as a count of 1-second intervals with 1544 Bipolar Violations plus Excessive Zeros event or one or more LOS defects. PSAS - Path SEF/AIS (PSAS) encountered. ')
ciscoDs1MIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 229, 1))
cds1Config = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 229, 1, 1))
cds1Alarm = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 229, 1, 2))
cds1Stats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 229, 1, 3))
cds1NotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 229, 1, 4))
class PerfCurrent24HourCount(TextualConvention, Gauge32):
    description = 'A counter associated with a performance measurement in the current 24 hour measurement interval. The value of this counter starts from zero and is increased when associated events occur, until the end of the 24 hour interval. In case where the agent has no valid data available for the current interval the corresponding object instance is not available and upon a retrieval request a corresponding error message shall be returned to indicate that this instance does not exist (for example, a noSuchName error for SNMPv1 and a noSuchInstance for SNMPv2 GET operation).'
    status = 'current'

class PerfPrevious24HourCount(TextualConvention, Gauge32):
    description = 'A counter associated with a performance measurement in the previous 24 hour measurement interval. The value of this counter starts from zero and is increased when associated events occur, until the end of the 24 hour interval. In case where the agent has no valid data available for the current interval the corresponding object instance is not available and upon a retrieval request a corresponding error message shall be returned to indicate that this instance does not exist (for example, a noSuchName error for SNMPv1 and a noSuchInstance for SNMPv2 GET operation).'
    status = 'current'

cds1ConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 229, 1, 1, 1), )
if mibBuilder.loadTexts: cds1ConfigTable.setStatus('current')
if mibBuilder.loadTexts: cds1ConfigTable.setDescription('The DS1 Configuration table. This table has objects for configuring DS1 interfaces.')
cds1ConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 229, 1, 1, 1, 1), )
dsx1ConfigEntry.registerAugmentions(("CISCO-DS1-EXT-MIB", "cds1ConfigEntry"))
cds1ConfigEntry.setIndexNames(*dsx1ConfigEntry.getIndexNames())
if mibBuilder.loadTexts: cds1ConfigEntry.setStatus('current')
if mibBuilder.loadTexts: cds1ConfigEntry.setDescription('An entry in the table. There is an entry for each available DS1/E1 interface identified by ifType value of ds1(18). By default, interfaces are disabled.')
cds1LineType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 229, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 20, 21))).clone(namedValues=NamedValues(("other", 1), ("dsx1ESF", 2), ("dsx1D4", 3), ("dsx1E1", 4), ("dsx1E1CRC", 5), ("dsx1E1MF", 6), ("dsx1E1CRCMF", 7), ("dsx1Unframed", 8), ("dsx1E1Unframed", 9), ("dsx1DS2M12", 10), ("dsx2E2", 11), ("dsx1E1Q50", 20), ("dsx1E1Q50CRC", 21)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cds1LineType.setReference('ITU-T G.704.')
if mibBuilder.loadTexts: cds1LineType.setStatus('current')
if mibBuilder.loadTexts: cds1LineType.setDescription("This variable indicates the variety of DS1 Line implementing this circuit. The type of circuit affects the number of bits per second that the circuit can reasonably carry, as well as the interpretation of the usage and error statistics. The reasons behind adding 'cds1Linetype' object (apart from 'dsx1LineType' in DS1-MIB.my) for 'line type', with enums from 'other(1)' to 'dsx2E2(11)' replicated, are following: 1) Addition of the two new enums (viz. 'dsx1E1Q50' and 'dsx1E1Q50CRC') in the standard DS1-MIB might not take place in near future; that's why it was decided to have a new object 'cds1LineType'. 2) A way was needed to be provided to configure 'line type' from CLI (Command Line Interface) for service modules supporting line type values from 'dsx1LineType' as well as 'cds1LineType', without having to modify two separate parameters and at the same time, making sure that CLI parameter values directly map to the MIB values. Hence, enums from 'other(1)' to 'dsx2E2(11)' from object 'dsx1LineType' are replicated, and the new enums are added as 'dsx1E1Q50(20)' and 'dsx1E1Q50CRC(21)'. The gap between 'dsx2E2(11)' and 'dsx1E1Q50(20)' provides a safe margin in the case of modifications in 'dsx1LineType' in future; so the CLI can still have the same enums as the standard MIB. It is to be noted that objects 'dsx1LineType' and 'cds1LineType' are mutually exclusive. Setting both in a SET request (with the exception of value 'other(1)') should result into an 'INCONSISTENT VALUE' error. In the case of successive 'SET' requests, the value associated with the latest request should prevail irrespective of the object ('dsx1LineType' or 'cds1LineType') used. Following values reflect the corresponding values in 'dsx1LineType' object in DS1-MIB. dsx1ESF Extended SuperFrame DS1 (T1.107) dsx1D4 AT&T D4 format DS1 (T1.107) dsx1E1 ITU-T Recommendation G.704 (Table 4a) dsx1E1-CRC ITU-T Recommendation G.704 (Table 4b) dsxE1-MF G.704 (Table 4a) with TS16 multiframing enabled dsx1E1-CRC-MF G.704 (Table 4b) with TS16 multiframing enabled dsx1Unframed DS1 with No Framing dsx1E1Unframed E1 with No Framing (G.703) dsx1DS2M12 DS2 frame format (T1.107) dsx1E2 E2 frame format (G.704) The recommended value for 'dsx1LineType' object is 'other'(1) for following values. dsx1E1Q50(20) ITU-T G.704 with TS16 bits 5,7,8 set to 101. In all the other cases TS16 bits 5,7,8 set to 111.(Table 14) dsx1E1Q50CRC(21): dsx1E1Q50 with CRC. For clarification, the capacity for each E1 type is as listed below: dsx1E1Unframed - E1, no framing = 32 x 64k = 2048k dsx1E1 or dsx1E1CRC - E1, with framing, no signalling = 31 x 64k = 1984k dsx1E1MF or dsx1E1CRCMF - E1, with framing, signalling = 30 x 64k = 1920k For further information See ITU-T Recomm G.704")
cds1LoopbackCodeDetection = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 229, 1, 1, 1, 1, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cds1LoopbackCodeDetection.setStatus('current')
if mibBuilder.loadTexts: cds1LoopbackCodeDetection.setDescription("This object is used to enable or disable the detection of far end loop back requests (inband or out-of-band (ESF)). The loopback detection is enabled by setting this object to 'true' and loopback detection is disabled by setting this object to 'false'. The value of this object does not have any impact on the way dsx1LoopbackConfig object is implemented.")
cds1Repetition = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 229, 1, 1, 1, 1, 3), ConfigIterator().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cds1Repetition.setStatus('current')
if mibBuilder.loadTexts: cds1Repetition.setDescription('This object is used to repeatedly apply the writable objects of dsx1ConfigTable and cds1ConfigTable specified in the same SNMP PDU starting from the row indicated by the index of the instance for the number of rows specified in this object. The order of operation is iterated through the logical order of the DS1 lines. Whether the iteration will be applied across the physical boundary or not is depended on the system implmentation. The GET operation on this object will always return 1.')
cds1RepetitionOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 229, 1, 1, 1, 1, 4), OwnerString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cds1RepetitionOwner.setStatus('current')
if mibBuilder.loadTexts: cds1RepetitionOwner.setDescription('This object is used for error checking of the operation specified in cds1Repetition. The value of this object is set by the SNMP manager for its own identifier at the same time as issuing the bulk operation by setting cds1Repetition. Later on, the SNMP manager should check the value of this object, if it is the same with the SNMP manager name, then the value of cds1RepetitionResult indicates the result of bulk operation initiated by this SNMP manager.')
cds1RepetitionResult = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 229, 1, 1, 1, 1, 5), BulkConfigResult()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cds1RepetitionResult.setStatus('current')
if mibBuilder.loadTexts: cds1RepetitionResult.setDescription('This object is used for error checking of the operation specified in cds1Repetition. This object indicates the result of bulk configuraton initiated by the SNMP manager specified in the value of cds1RepetitionOwner.')
cds1CallConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 229, 1, 1, 2), )
if mibBuilder.loadTexts: cds1CallConfigTable.setStatus('current')
if mibBuilder.loadTexts: cds1CallConfigTable.setDescription('The DS1 Configuration table for call related parameters. ')
cds1CallConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 229, 1, 1, 2, 1), )
dsx1ConfigEntry.registerAugmentions(("CISCO-DS1-EXT-MIB", "cds1CallConfigEntry"))
cds1CallConfigEntry.setIndexNames(*dsx1ConfigEntry.getIndexNames())
if mibBuilder.loadTexts: cds1CallConfigEntry.setStatus('current')
if mibBuilder.loadTexts: cds1CallConfigEntry.setDescription('The entry in this table is for DS1/E1 interface which need call related configuraton. ')
cds1CallTrunkConditionEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 229, 1, 1, 2, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cds1CallTrunkConditionEnable.setStatus('current')
if mibBuilder.loadTexts: cds1CallTrunkConditionEnable.setDescription("This object specifies whether trunk-condition is enabled. The value 'true' means trunk-condition enable and the value 'false' means trunk-condition disable. If this object is set to 'true', gateway will apply trunk conditioning on the DS0's of this DS1 interface that are in alarm. Trunk Conditioning - gateway will transmit idle code pattern for the first 2.5 secs and then transmit seized code, both idle code and seized code are specified by the 'ds0IdleCode' and 'ds0SeizedCode' MIB objects in the CISCO-CAS-IF-EXT-MIB. This object is applicable for trunking applications only. ")
cds1CurrentTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 229, 1, 3, 1), )
if mibBuilder.loadTexts: cds1CurrentTable.setStatus('current')
if mibBuilder.loadTexts: cds1CurrentTable.setDescription('The DS1 current table contains various statistics being collected for the current 15 minute interval.')
cds1CurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 229, 1, 3, 1, 1), )
dsx1CurrentEntry.registerAugmentions(("CISCO-DS1-EXT-MIB", "cds1CurrentEntry"))
cds1CurrentEntry.setIndexNames(*dsx1CurrentEntry.getIndexNames())
if mibBuilder.loadTexts: cds1CurrentEntry.setStatus('current')
if mibBuilder.loadTexts: cds1CurrentEntry.setDescription('An entry in the DS1 current table. An entry in this table is automatically created when a line activated.')
cds1CurrentLSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 229, 1, 3, 1, 1, 1), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cds1CurrentLSESs.setReference('ANSI T1.231-1997 Section 6.5.1.3')
if mibBuilder.loadTexts: cds1CurrentLSESs.setStatus('current')
if mibBuilder.loadTexts: cds1CurrentLSESs.setDescription('The number of LSES (Line Severely Errored Seconds) encountered by the interface.')
cds1CurrentPSASs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 229, 1, 3, 1, 1, 2), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cds1CurrentPSASs.setReference('ANSI T1.231-1997 Section 6.5.1.3')
if mibBuilder.loadTexts: cds1CurrentPSASs.setStatus('current')
if mibBuilder.loadTexts: cds1CurrentPSASs.setDescription('The number of Path SEF/AIS (PSAS) encountered by the ds1 interface.')
cds1IntervalTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 229, 1, 3, 2), )
if mibBuilder.loadTexts: cds1IntervalTable.setStatus('current')
if mibBuilder.loadTexts: cds1IntervalTable.setDescription('The DS1 interval table contains various statistics collected by each DS1 interface over the previous 24 hours of operation. The past 24 hours are broken into 96 completed 15 minute intervals. Each row in this table represents one such interval (identified by dsx1IntervalNumber) for one specific instance (identified by ifIndex).')
cds1IntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 229, 1, 3, 2, 1), )
dsx1IntervalEntry.registerAugmentions(("CISCO-DS1-EXT-MIB", "cds1IntervalEntry"))
cds1IntervalEntry.setIndexNames(*dsx1IntervalEntry.getIndexNames())
if mibBuilder.loadTexts: cds1IntervalEntry.setStatus('current')
if mibBuilder.loadTexts: cds1IntervalEntry.setDescription('An entry in the DS1 interval table.')
cds1IntervalLSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 229, 1, 3, 2, 1, 1), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cds1IntervalLSESs.setReference('ANSI T1.231-1997 Section 6.5.1.3')
if mibBuilder.loadTexts: cds1IntervalLSESs.setStatus('current')
if mibBuilder.loadTexts: cds1IntervalLSESs.setDescription('The number of LSES (Line Severely Errored Seconds) encountered by the interface.')
cds1IntervalPSASs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 229, 1, 3, 2, 1, 2), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cds1IntervalPSASs.setStatus('current')
if mibBuilder.loadTexts: cds1IntervalPSASs.setDescription('The number of PSAS encountered by the interface.')
cds1TotalTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 229, 1, 3, 3), )
if mibBuilder.loadTexts: cds1TotalTable.setStatus('current')
if mibBuilder.loadTexts: cds1TotalTable.setDescription('The DS1 Total Table contains the cumulative sum of the various statistics collected for the 96 fifteen minutes intervals preceding the current interval.')
cds1TotalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 229, 1, 3, 3, 1), )
dsx1TotalEntry.registerAugmentions(("CISCO-DS1-EXT-MIB", "cds1TotalEntry"))
cds1TotalEntry.setIndexNames(*dsx1TotalEntry.getIndexNames())
if mibBuilder.loadTexts: cds1TotalEntry.setStatus('current')
if mibBuilder.loadTexts: cds1TotalEntry.setDescription('An entry in the DS1 Total table.')
cds1TotalLSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 229, 1, 3, 3, 1, 1), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cds1TotalLSESs.setStatus('current')
if mibBuilder.loadTexts: cds1TotalLSESs.setDescription('The sum of Line Severely Errored Seconds (LSES) encountered by a DS1 interface in the previous 96 fifteen minutes intervals.')
cds1TotalPSASs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 229, 1, 3, 3, 1, 2), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cds1TotalPSASs.setStatus('current')
if mibBuilder.loadTexts: cds1TotalPSASs.setDescription('The sum of Path SEF/AIS (PSAS) encountered by a DS1 interface in the previous 96 fifteen minutes intervals')
cds1FarEndCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 229, 1, 3, 4), )
if mibBuilder.loadTexts: cds1FarEndCurrentTable.setStatus('current')
if mibBuilder.loadTexts: cds1FarEndCurrentTable.setDescription('The DS1 Far End Current Table contains various statistics collected for the current 15 minute interval. The statistics are collected from the far end messages on the Facilities Data Link (FDL).')
cds1FarEndCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 229, 1, 3, 4, 1), )
dsx1FarEndCurrentEntry.registerAugmentions(("CISCO-DS1-EXT-MIB", "cds1FarEndCurrentEntry"))
cds1FarEndCurrentEntry.setIndexNames(*dsx1FarEndCurrentEntry.getIndexNames())
if mibBuilder.loadTexts: cds1FarEndCurrentEntry.setStatus('current')
if mibBuilder.loadTexts: cds1FarEndCurrentEntry.setDescription('An entry in the cds1FarEndCurrentTable.')
cds1FarEndCurrentLOFCs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 229, 1, 3, 4, 1, 1), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cds1FarEndCurrentLOFCs.setStatus('current')
if mibBuilder.loadTexts: cds1FarEndCurrentLOFCs.setDescription('The number of Loss Of Frame Counts in the current 15 minute interval.')
cds1FarEndIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 229, 1, 3, 5), )
if mibBuilder.loadTexts: cds1FarEndIntervalTable.setStatus('current')
if mibBuilder.loadTexts: cds1FarEndIntervalTable.setDescription('The DS1 Far End Interval Table contains various statistics collected by each DS1 interface over the previous 24 hours of operation. The past 24 hours are broken into 96 completed 15 minute intervals. Each row in this table represents one such interval (identified by dsx1FarEndIntervalNumber) for one specific instance (identified by ifIndex).')
cds1FarEndIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 229, 1, 3, 5, 1), )
dsx1FarEndIntervalEntry.registerAugmentions(("CISCO-DS1-EXT-MIB", "cds1FarEndIntervalEntry"))
cds1FarEndIntervalEntry.setIndexNames(*dsx1FarEndIntervalEntry.getIndexNames())
if mibBuilder.loadTexts: cds1FarEndIntervalEntry.setStatus('current')
if mibBuilder.loadTexts: cds1FarEndIntervalEntry.setDescription('An entry in the DS1 Far End Interval table.')
cds1FarEndIntervalLOFCs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 229, 1, 3, 5, 1, 1), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cds1FarEndIntervalLOFCs.setStatus('current')
if mibBuilder.loadTexts: cds1FarEndIntervalLOFCs.setDescription('The number of Loss Of Frame Counts encountered by the interface.')
cds1FarEndTotalTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 229, 1, 3, 6), )
if mibBuilder.loadTexts: cds1FarEndTotalTable.setStatus('current')
if mibBuilder.loadTexts: cds1FarEndTotalTable.setDescription('The DS1 Far End Total Table contains the cumulative sum of the various statistics for the 96 fifteen minutes intervals preceding the current interval.')
cds1FarEndTotalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 229, 1, 3, 6, 1), )
dsx1FarEndTotalEntry.registerAugmentions(("CISCO-DS1-EXT-MIB", "cds1FarEndTotalEntry"))
cds1FarEndTotalEntry.setIndexNames(*dsx1FarEndTotalEntry.getIndexNames())
if mibBuilder.loadTexts: cds1FarEndTotalEntry.setStatus('current')
if mibBuilder.loadTexts: cds1FarEndTotalEntry.setDescription('An entry in the DS1 Far End Total table.')
cds1FarEndTotalLOFCs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 229, 1, 3, 6, 1, 1), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cds1FarEndTotalLOFCs.setStatus('current')
if mibBuilder.loadTexts: cds1FarEndTotalLOFCs.setDescription('The number of Loss Of Frame Counts encountered by the interface in the previous 96 fifteen minutes interval.')
cds1AlarmThresholdGroupTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 229, 1, 2, 1), )
if mibBuilder.loadTexts: cds1AlarmThresholdGroupTable.setStatus('current')
if mibBuilder.loadTexts: cds1AlarmThresholdGroupTable.setDescription('The DS1 alarm threshold configuration table. This table contains the objects associated with threshold values for different statistics. The thresholds may be configured for: BES - Bursty Errored Seconds CSS - Controlled Slip Seconds DM - Degraded Minutes ES - Errored Seconds LCV - Line Code Violations LES - Line Errored Seconds LSES - Line Severely Errored Seconds PCV - Path Coding Violations PSAS - Path SEF/AIS Second SES - Severely Errored Seconds SEFS - Severely Errored Framing Seconds UAS - Unavailable Seconds ')
cds1AlarmThresholdGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 229, 1, 2, 1, 1), ).setIndexNames((0, "CISCO-DS1-EXT-MIB", "cds1AlarmThresholdGroupIndex"))
if mibBuilder.loadTexts: cds1AlarmThresholdGroupEntry.setStatus('current')
if mibBuilder.loadTexts: cds1AlarmThresholdGroupEntry.setDescription("This identifies the unique threshold entry in cds1AlarmThresholdGroupTable. The number of entries allowed is implementation specific. The values set in the respective threshold objects determine the values which when exceeded in a 15 minute or 24 hour window, will raise alarm by generating 'cds1StatThresholdAlarm' trap. An entry is created by setting 'cds1AlarmThresholdGroupRowStatus' to 'createAndGo(4)' and is deleted by setting it to 'destroy(6)'.")
cds1AlarmThresholdGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 229, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: cds1AlarmThresholdGroupIndex.setStatus('current')
if mibBuilder.loadTexts: cds1AlarmThresholdGroupIndex.setDescription('An unique value identifying an entry in cds1AlarmThresholdGroupTable.')
cds1Current15MinBESsThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 229, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(2147483647)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cds1Current15MinBESsThreshold.setReference('RFC2495')
if mibBuilder.loadTexts: cds1Current15MinBESsThreshold.setStatus('current')
if mibBuilder.loadTexts: cds1Current15MinBESsThreshold.setDescription('This object identifies 15 minute threshold for BES.')
cds1Current24HrBESsThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 229, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(2147483647)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cds1Current24HrBESsThreshold.setReference('RFC2495')
if mibBuilder.loadTexts: cds1Current24HrBESsThreshold.setStatus('current')
if mibBuilder.loadTexts: cds1Current24HrBESsThreshold.setDescription('This object identifies 24 hour threshold for BES.')
cds1Current15MinCSSsThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 229, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(2147483647)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cds1Current15MinCSSsThreshold.setReference('RFC2495')
if mibBuilder.loadTexts: cds1Current15MinCSSsThreshold.setStatus('current')
if mibBuilder.loadTexts: cds1Current15MinCSSsThreshold.setDescription('This object identifies 15 minute threshold for CSS.')
cds1Current24HrCSSsThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 229, 1, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(2147483647)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cds1Current24HrCSSsThreshold.setReference('RFC2495')
if mibBuilder.loadTexts: cds1Current24HrCSSsThreshold.setStatus('current')
if mibBuilder.loadTexts: cds1Current24HrCSSsThreshold.setDescription('This object identifies 24 hour threshold for CSS.')
cds1Current15MinDMsThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 229, 1, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(2147483647)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cds1Current15MinDMsThreshold.setReference('RFC2495')
if mibBuilder.loadTexts: cds1Current15MinDMsThreshold.setStatus('current')
if mibBuilder.loadTexts: cds1Current15MinDMsThreshold.setDescription('This object identifies 15 minute threshold for DM.')
cds1Current24HrDMsThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 229, 1, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(2147483647)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cds1Current24HrDMsThreshold.setReference('RFC2495')
if mibBuilder.loadTexts: cds1Current24HrDMsThreshold.setStatus('current')
if mibBuilder.loadTexts: cds1Current24HrDMsThreshold.setDescription('This object identifies 24 hour threshold for DM.')
cds1Current15MinESsThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 229, 1, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(12)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cds1Current15MinESsThreshold.setReference('RFC2495, Bellcore TR-TSV-000773')
if mibBuilder.loadTexts: cds1Current15MinESsThreshold.setStatus('current')
if mibBuilder.loadTexts: cds1Current15MinESsThreshold.setDescription('This object identifies 15 minute threshold for ES.')
cds1Current24HrESsThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 229, 1, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(121)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cds1Current24HrESsThreshold.setReference('RFC2495, Bellcore TR-TSV-000773')
if mibBuilder.loadTexts: cds1Current24HrESsThreshold.setStatus('current')
if mibBuilder.loadTexts: cds1Current24HrESsThreshold.setDescription('This object identifies 24 hour threshold for ES.')
cds1Current15MinLCVsThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 229, 1, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(14)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cds1Current15MinLCVsThreshold.setReference('RFC2495, Bellcore TR-TSV-000773')
if mibBuilder.loadTexts: cds1Current15MinLCVsThreshold.setStatus('current')
if mibBuilder.loadTexts: cds1Current15MinLCVsThreshold.setDescription('This object identifies 15 minute threshold for LCV.')
cds1Current24HrLCVsThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 229, 1, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(134)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cds1Current24HrLCVsThreshold.setReference('RFC2495, Bellcore TR-TSV-000773')
if mibBuilder.loadTexts: cds1Current24HrLCVsThreshold.setStatus('current')
if mibBuilder.loadTexts: cds1Current24HrLCVsThreshold.setDescription('This object identifies 24 hour threshold for LCV.')
cds1Current15MinLESsThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 229, 1, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(12)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cds1Current15MinLESsThreshold.setReference('RFC2495, Bellcore TR-TSV-000773')
if mibBuilder.loadTexts: cds1Current15MinLESsThreshold.setStatus('current')
if mibBuilder.loadTexts: cds1Current15MinLESsThreshold.setDescription('This object identifies 15 minute threshold for LES.')
cds1Current24HrLESsThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 229, 1, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(121)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cds1Current24HrLESsThreshold.setReference('RFC2495, Bellcore TR-TSV-000773')
if mibBuilder.loadTexts: cds1Current24HrLESsThreshold.setStatus('current')
if mibBuilder.loadTexts: cds1Current24HrLESsThreshold.setDescription('This object identifies 24 hour threshold for LES.')
cds1Current15MinLSESsThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 229, 1, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(10)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cds1Current15MinLSESsThreshold.setReference('ANSI T1.231-1997 Section 6.5.1.3')
if mibBuilder.loadTexts: cds1Current15MinLSESsThreshold.setStatus('current')
if mibBuilder.loadTexts: cds1Current15MinLSESsThreshold.setDescription('This object identifies 15 minute threshold for LSES.')
cds1Current24HrLSESsThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 229, 1, 2, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(100)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cds1Current24HrLSESsThreshold.setReference('ANSI T1.231-1997 Section 6.5.1.3')
if mibBuilder.loadTexts: cds1Current24HrLSESsThreshold.setStatus('current')
if mibBuilder.loadTexts: cds1Current24HrLSESsThreshold.setDescription('This object identifies 24 hour threshold for LSES.')
cds1Current15MinPCVsThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 229, 1, 2, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(2147483647)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cds1Current15MinPCVsThreshold.setReference('RFC2495')
if mibBuilder.loadTexts: cds1Current15MinPCVsThreshold.setStatus('current')
if mibBuilder.loadTexts: cds1Current15MinPCVsThreshold.setDescription('This object identifies 15 minute threshold for PCV.')
cds1Current24HrPCVsThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 229, 1, 2, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(2147483647)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cds1Current24HrPCVsThreshold.setReference('RFC2495')
if mibBuilder.loadTexts: cds1Current24HrPCVsThreshold.setStatus('current')
if mibBuilder.loadTexts: cds1Current24HrPCVsThreshold.setDescription('This object identifies 24 hour threshold for PCV.')
cds1Current15MinPSASsThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 229, 1, 2, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(2147483647)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cds1Current15MinPSASsThreshold.setReference('RFC2495')
if mibBuilder.loadTexts: cds1Current15MinPSASsThreshold.setStatus('current')
if mibBuilder.loadTexts: cds1Current15MinPSASsThreshold.setDescription('This object identifies 15 minute threshold for PSAS.')
cds1Current24HrPSASsThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 229, 1, 2, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(2147483647)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cds1Current24HrPSASsThreshold.setReference('RFC2495')
if mibBuilder.loadTexts: cds1Current24HrPSASsThreshold.setStatus('current')
if mibBuilder.loadTexts: cds1Current24HrPSASsThreshold.setDescription('This object identifies 24 hour threshold for PSAS.')
cds1Current15MinSESsThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 229, 1, 2, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(10)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cds1Current15MinSESsThreshold.setReference('RFC2495, Bellcore TR-TSV-000773')
if mibBuilder.loadTexts: cds1Current15MinSESsThreshold.setStatus('current')
if mibBuilder.loadTexts: cds1Current15MinSESsThreshold.setDescription('This object identifies 15 minute threshold for SES.')
cds1Current24HrSESsThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 229, 1, 2, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(100)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cds1Current24HrSESsThreshold.setReference('RFC2495, Bellcore TR-TSV-000773')
if mibBuilder.loadTexts: cds1Current24HrSESsThreshold.setStatus('current')
if mibBuilder.loadTexts: cds1Current24HrSESsThreshold.setDescription('This object identifies 24 hour threshold for SES.')
cds1Current15MinSEFSsThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 229, 1, 2, 1, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cds1Current15MinSEFSsThreshold.setReference('RFC2495, Bellcore TR-TSV-000773')
if mibBuilder.loadTexts: cds1Current15MinSEFSsThreshold.setStatus('current')
if mibBuilder.loadTexts: cds1Current15MinSEFSsThreshold.setDescription('This object identifies 15 minute threshold for SEFS.')
cds1Current24HrSEFSsThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 229, 1, 2, 1, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(17)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cds1Current24HrSEFSsThreshold.setReference('RFC2495, Bellcore TR-TSV-000773')
if mibBuilder.loadTexts: cds1Current24HrSEFSsThreshold.setStatus('current')
if mibBuilder.loadTexts: cds1Current24HrSEFSsThreshold.setDescription('This object identifies 24 hour threshold for SEFS.')
cds1Current15MinUASsThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 229, 1, 2, 1, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(10)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cds1Current15MinUASsThreshold.setReference('RFC2495, Bellcore TR-TSV-000773')
if mibBuilder.loadTexts: cds1Current15MinUASsThreshold.setStatus('current')
if mibBuilder.loadTexts: cds1Current15MinUASsThreshold.setDescription('This object identifies 15 minute threshold for UAS.')
cds1Current24HrUASsThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 229, 1, 2, 1, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(10)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cds1Current24HrUASsThreshold.setReference('RFC2495, Bellcore TR-TSV-000773')
if mibBuilder.loadTexts: cds1Current24HrUASsThreshold.setStatus('current')
if mibBuilder.loadTexts: cds1Current24HrUASsThreshold.setDescription('This object identifies 24 hour threshold for UAS.')
cds1AlarmThresholdGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 229, 1, 2, 1, 1, 26), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cds1AlarmThresholdGroupRowStatus.setStatus('current')
if mibBuilder.loadTexts: cds1AlarmThresholdGroupRowStatus.setDescription("The status of this conceptual row. This object is used for creating, modifying and deleting entries from cds1AlarmThresholdGroupTable. To create a row in this table, a manager must set this object to 'createAndGo(4)'. An entry can be deleted by setting this object to destroy'(6)'. An entry in this table may be modified after creation. The active threshold configuration is indicated by the object 'cds1AlarmThresholdActiveGroup'.")
cds1AlarmConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 229, 1, 2, 2), )
if mibBuilder.loadTexts: cds1AlarmConfigTable.setStatus('current')
if mibBuilder.loadTexts: cds1AlarmConfigTable.setDescription('The DS1 alarm configuration table. This table contains the objects associated with detecting and declaring alarms for the DS1/E1 interfaces. ')
cds1AlarmConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 229, 1, 2, 2, 1), )
dsx1ConfigEntry.registerAugmentions(("CISCO-DS1-EXT-MIB", "cds1AlarmConfigEntry"))
cds1AlarmConfigEntry.setIndexNames(*dsx1ConfigEntry.getIndexNames())
if mibBuilder.loadTexts: cds1AlarmConfigEntry.setStatus('current')
if mibBuilder.loadTexts: cds1AlarmConfigEntry.setDescription('Alarm configuration information for a particular DS1/E1 interface. The thresholds for different statistics is identified by an entry in cds1AlarmThresholdGroupTable. Once the thresholds configured in cds1AlarmThresholdGroupTable are exceeded, minor or major alarms are raised depending on the values configured in cds1StatisticalAlarmSeverity. Triggering of an alarm is indicated by generating a trap and also through the CLI (Command Line Interface).')
cds1StatisticalAlarmSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 229, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("minor", 1), ("major", 2), ("none", 3))).clone('minor')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cds1StatisticalAlarmSeverity.setStatus('current')
if mibBuilder.loadTexts: cds1StatisticalAlarmSeverity.setDescription('This variable is used to setup the severity of any of the Statistical alarms. So when a Statistical Counter exceeds its specified threshold, the system will send the alarm with appropriate severity. A value of none(3) indicates that no alarm will be raised.')
cds1StatisticalAlarmState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 229, 1, 2, 2, 1, 2), Bits().clone(namedValues=NamedValues(("cds1BES15Min", 0), ("cds1BES24Hr", 1), ("cds1CSS15Min", 2), ("cds1CSS24Hr", 3), ("cds1DM15Min", 4), ("cds1DM24Hr", 5), ("cds1ES15Min", 6), ("cds1ES24Hr", 7), ("cds1PCV15Min", 8), ("cds1PCV24Hr", 9), ("cds1LCV15Min", 10), ("cds1LCV24Hr", 11), ("cds1LES15Min", 12), ("cds1LES24Hr", 13), ("cds1LSES15Min", 14), ("cds1LSES24Hr", 15), ("cds1PSAS15Min", 16), ("cds1PSAS24Hr", 17), ("cds1SES15Min", 18), ("cds1SES24Hr", 19), ("cds1SEFS15Min", 20), ("cds1SEFS24Hr", 21), ("cds1UAS15Min", 22), ("cds1UAS24Hr", 23)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cds1StatisticalAlarmState.setStatus('current')
if mibBuilder.loadTexts: cds1StatisticalAlarmState.setDescription('This is a bitmap of the DS1 Line Statistical alarms. A clear bitmap (i.e. no bit is set) will indicate that no alarms are present. The values of individual bits mean: cds1BES15Min BES current 15 minute threshold exceeded cds1BES24Hr BES 24 hour threshold exceeded cds1CSS15Min CSS current 15 minute threshold exceeded cds1CSS24Hr CSS 24 hour threshold exceeded cds1DM15Min DM current 15 minute threshold exceeded cds1DM24Hr DM 24 hour threshold exceeded cds1ES15Min ES current 15 minute threshold exceeded cds1ES24Hr ES 24 hour threshold exceeded cds1PCV15Min PCV current 15 minute threshold exceeded cds1PCV24Hr PCV 24 hour threshold exceeded cds1LCV15Min LCV current 15 minute threshold exceeded cds1LCV24Hr LCV 24 hour threshold exceeded cds1LES15Min LES current 15 minute threshold exceeded cds1LES24Hr LES 24 hour threshold exceeded cds1LSES15Min LSES current 15 minute threshold exceeded cds1LSES24Hr LSES 24 hour threshold exceeded cds1PSAS15Min PSAS current 15 minute threshold exceeded cds1PSAS24Hr PSAS 24 Hour threshold exceeded cds1SES15Min SES current 15 minute threshold exceeded cds1SES24Hr SES 24 hour threshold exceeded cds1SEFS15Min SEFS current 15 minute threshold exceeded cds1SEFS24Hr SEFS 24 hour threshold exceeded cds1UAS15Min UAS current 15 minute threshold exceeded cds1UAS24Hr UAS 24 hour threshold exceeded')
cds1AlarmUpCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 229, 1, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cds1AlarmUpCount.setStatus('current')
if mibBuilder.loadTexts: cds1AlarmUpCount.setDescription("This parameter specifies the increment to the Near End alarm integration counters. The local alarms are LOS and LOF. The integration counter is incremented by this value every 100 ms while the alarm persists. When the integration counter exceeds 'cds1AlarmThreshold' an Alarm of the severity specified for the particular alarm is declared. The integration counter is an internal counter specific to the implementation and dictates the slope of integration.")
cds1AlarmDownCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 229, 1, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cds1AlarmDownCount.setStatus('current')
if mibBuilder.loadTexts: cds1AlarmDownCount.setDescription('This parameter specifies the decrement to the Near End alarm integration counters. The alarms are LOS and LOF. The integration counter is decremented by this value every 100 ms while no alarm persists. The counter does not decrement below zero. When the integration counter reaches zero any Alarm previously declared is removed.')
cds1AlarmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 229, 1, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(150)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cds1AlarmThreshold.setStatus('current')
if mibBuilder.loadTexts: cds1AlarmThreshold.setDescription('The value set in this object determines the value that the alarm integration counter must reach for an near end alarm to be declared. If the up count is 6, and the threshold 150, an Alarm is integrated in 2.5 seconds. If the down count is 1, then alarm will be cleared in 15 seconds.')
cds1AlarmThresholdActiveGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 229, 1, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cds1AlarmThresholdActiveGroup.setStatus('current')
if mibBuilder.loadTexts: cds1AlarmThresholdActiveGroup.setDescription('The value of this object identifies the row in the cds1AlarmThresholdGroupTable which contains the threshold values for different statistics, and is currently active.')
cds1Current24HrStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 229, 1, 3, 7), )
if mibBuilder.loadTexts: cds1Current24HrStatsTable.setStatus('current')
if mibBuilder.loadTexts: cds1Current24HrStatsTable.setDescription('The DS1 24 hour Statistics table. A 24 hour interval starts at twelve mid-night with reference to node time. In case of a manual change in node time all the counters in this table get reset to 0.')
cds1Current24HrStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 229, 1, 3, 7, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cds1Current24HrStatsEntry.setStatus('current')
if mibBuilder.loadTexts: cds1Current24HrStatsEntry.setDescription('An entry in the DS1 current 24 hour table. An entry is created automatically for each DS1 interface that is activated. ifEntries with ifType=ds1(18) will have an entry in this table.')
cds1Current24HrESs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 229, 1, 3, 7, 1, 1), PerfCurrent24HourCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cds1Current24HrESs.setStatus('current')
if mibBuilder.loadTexts: cds1Current24HrESs.setDescription('Number of ESs encountered in current 24 hour interval.')
cds1Current24HrSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 229, 1, 3, 7, 1, 2), PerfCurrent24HourCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cds1Current24HrSESs.setStatus('current')
if mibBuilder.loadTexts: cds1Current24HrSESs.setDescription('Number of SESs encountered in current 24 hour interval.')
cds1Current24HrSEFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 229, 1, 3, 7, 1, 3), PerfCurrent24HourCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cds1Current24HrSEFSs.setStatus('current')
if mibBuilder.loadTexts: cds1Current24HrSEFSs.setDescription('Number of SEFSs encountered in current 24 hour interval.')
cds1Current24HrUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 229, 1, 3, 7, 1, 4), PerfCurrent24HourCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cds1Current24HrUASs.setStatus('current')
if mibBuilder.loadTexts: cds1Current24HrUASs.setDescription('Number of UASs encountered in current 24 hour interval.')
cds1Current24HrCSSs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 229, 1, 3, 7, 1, 5), PerfCurrent24HourCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cds1Current24HrCSSs.setStatus('current')
if mibBuilder.loadTexts: cds1Current24HrCSSs.setDescription('Number of CSSs encountered in current 24 hour interval.')
cds1Current24HrPCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 229, 1, 3, 7, 1, 6), PerfCurrent24HourCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cds1Current24HrPCVs.setStatus('current')
if mibBuilder.loadTexts: cds1Current24HrPCVs.setDescription('Number of PCVs encountered in current 24 hour interval.')
cds1Current24HrLESs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 229, 1, 3, 7, 1, 7), PerfCurrent24HourCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cds1Current24HrLESs.setStatus('current')
if mibBuilder.loadTexts: cds1Current24HrLESs.setDescription('Number of LESs encountered in current 24 hour interval.')
cds1Current24HrBESs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 229, 1, 3, 7, 1, 8), PerfCurrent24HourCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cds1Current24HrBESs.setStatus('current')
if mibBuilder.loadTexts: cds1Current24HrBESs.setDescription('Number of BESs encountered in current 24 hour interval.')
cds1Current24HrDMs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 229, 1, 3, 7, 1, 9), PerfCurrent24HourCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cds1Current24HrDMs.setStatus('current')
if mibBuilder.loadTexts: cds1Current24HrDMs.setDescription('Number of DMs encountered in current 24 hour interval.')
cds1Current24HrLCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 229, 1, 3, 7, 1, 10), PerfCurrent24HourCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cds1Current24HrLCVs.setStatus('current')
if mibBuilder.loadTexts: cds1Current24HrLCVs.setDescription('Number of LCVs encountered in current 24 hour interval.')
cds1Previous24HrStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 229, 1, 3, 8), )
if mibBuilder.loadTexts: cds1Previous24HrStatsTable.setStatus('current')
if mibBuilder.loadTexts: cds1Previous24HrStatsTable.setDescription('Contains DS1 previous 24 hour Statistics table. A 24 hour interval starts at twelve midnight with reference to node time.')
cds1Previous24HrStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 229, 1, 3, 8, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cds1Previous24HrStatsEntry.setStatus('current')
if mibBuilder.loadTexts: cds1Previous24HrStatsEntry.setDescription('An entry in DS1 previous 24 hour table. ifEntries with ifType=ds1(18) will have an entry in this table.')
cds1Previous24HrESs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 229, 1, 3, 8, 1, 1), PerfPrevious24HourCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cds1Previous24HrESs.setStatus('current')
if mibBuilder.loadTexts: cds1Previous24HrESs.setDescription('Number of ESs encountered in previous 24 hour interval.')
cds1Previous24HrSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 229, 1, 3, 8, 1, 2), PerfPrevious24HourCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cds1Previous24HrSESs.setStatus('current')
if mibBuilder.loadTexts: cds1Previous24HrSESs.setDescription('Number of SESs encountered in previous 24 hour interval.')
cds1Previous24HrSEFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 229, 1, 3, 8, 1, 3), PerfPrevious24HourCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cds1Previous24HrSEFSs.setStatus('current')
if mibBuilder.loadTexts: cds1Previous24HrSEFSs.setDescription('Number of SEFSs encountered in previous 24 hour interval.')
cds1Previous24HrUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 229, 1, 3, 8, 1, 4), PerfPrevious24HourCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cds1Previous24HrUASs.setStatus('current')
if mibBuilder.loadTexts: cds1Previous24HrUASs.setDescription('Number of UASs encountered in previous 24 hour interval.')
cds1Previous24HrCSSs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 229, 1, 3, 8, 1, 5), PerfPrevious24HourCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cds1Previous24HrCSSs.setStatus('current')
if mibBuilder.loadTexts: cds1Previous24HrCSSs.setDescription('Number of CSSs encountered in previous 24 hour interval.')
cds1Previous24HrPCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 229, 1, 3, 8, 1, 6), PerfPrevious24HourCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cds1Previous24HrPCVs.setStatus('current')
if mibBuilder.loadTexts: cds1Previous24HrPCVs.setDescription('Number of PCVs encountered in previous 24 hour interval.')
cds1Previous24HrLESs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 229, 1, 3, 8, 1, 7), PerfPrevious24HourCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cds1Previous24HrLESs.setStatus('current')
if mibBuilder.loadTexts: cds1Previous24HrLESs.setDescription('Number of LESs encountered in previous 24 hour interval.')
cds1Previous24HrBESs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 229, 1, 3, 8, 1, 8), PerfPrevious24HourCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cds1Previous24HrBESs.setStatus('current')
if mibBuilder.loadTexts: cds1Previous24HrBESs.setDescription('Number of BESs encountered in previous 24 hour interval.')
cds1Previous24HrDMs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 229, 1, 3, 8, 1, 9), PerfPrevious24HourCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cds1Previous24HrDMs.setStatus('current')
if mibBuilder.loadTexts: cds1Previous24HrDMs.setDescription('Number of DMs encountered in previous 24 hour interval.')
cds1Previous24HrLCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 229, 1, 3, 8, 1, 10), PerfPrevious24HourCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cds1Previous24HrLCVs.setStatus('current')
if mibBuilder.loadTexts: cds1Previous24HrLCVs.setDescription('Number of LCVs encountered in previous 24 hour interval.')
cds1Previous24HrLSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 229, 1, 3, 8, 1, 11), PerfPrevious24HourCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cds1Previous24HrLSESs.setStatus('current')
if mibBuilder.loadTexts: cds1Previous24HrLSESs.setDescription('Number of LSESs encountered in previous 24 hour interval.')
cds1ErrStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 229, 1, 3, 9), )
if mibBuilder.loadTexts: cds1ErrStatsTable.setStatus('current')
if mibBuilder.loadTexts: cds1ErrStatsTable.setDescription('The DS1 error statistics table. This table contains the statistics since the systems was up or last re-initialized.')
cds1ErrStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 229, 1, 3, 9, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cds1ErrStatsEntry.setStatus('current')
if mibBuilder.loadTexts: cds1ErrStatsEntry.setDescription('An entry in the DS1 Error Stats Table. ifEntries with ifType=ds1(18) will have an entry in this table.')
cds1LOSCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 229, 1, 3, 9, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cds1LOSCounts.setStatus('current')
if mibBuilder.loadTexts: cds1LOSCounts.setDescription('The number of times the Loss Of Signal defect was detected with or without integrating to LOS alarm.')
cds1OOFCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 229, 1, 3, 9, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cds1OOFCounts.setStatus('current')
if mibBuilder.loadTexts: cds1OOFCounts.setDescription('The number of times the Out of Frame (OOF) was detected with or without integrating to OOF alarm.')
cds1RAICounts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 229, 1, 3, 9, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cds1RAICounts.setStatus('current')
if mibBuilder.loadTexts: cds1RAICounts.setDescription('The number of times Yellow Alarms was detected with or without integrating to RAI alarm.')
cds1FECounts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 229, 1, 3, 9, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cds1FECounts.setStatus('current')
if mibBuilder.loadTexts: cds1FECounts.setDescription('The number of Framing Pattern Errors encountered by the DS1 interface.')
cds1Notifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 229, 1, 4, 0))
cds1StatThresholdAlarm = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 229, 1, 4, 0, 1)).setObjects(("CISCO-DS1-EXT-MIB", "cds1StatisticalAlarmState"))
if mibBuilder.loadTexts: cds1StatThresholdAlarm.setStatus('current')
if mibBuilder.loadTexts: cds1StatThresholdAlarm.setDescription('A cds1StatThresholdAlarm trap is sent by an agent to notify the NMS about a statistical alarm condition. Such an alarm condition exists when a statistical counter exceeds its specified threshold. For example : If value in object dsx1CurrentBESs exceeds the value in the object cds1Current15MinBESsThreshold, a cds1StatThresholdAlarm trap will be generated.')
ciscoDs1MIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 229, 3))
ciscoDs1MIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 229, 3, 1))
ciscoDs1MIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 229, 3, 2))
ciscoDs1MIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 229, 3, 1, 1)).setObjects(("CISCO-DS1-EXT-MIB", "ciscoDs1ConfMIBGroup"), ("CISCO-DS1-EXT-MIB", "ciscoDs1CurrentMIBGroup"), ("CISCO-DS1-EXT-MIB", "ciscoDs1AlarmConfigGroup"), ("CISCO-DS1-EXT-MIB", "ciscoDs1Alarm15MinThreshGroup"), ("CISCO-DS1-EXT-MIB", "ciscoDs1Alarm24HrThreshGroup"), ("CISCO-DS1-EXT-MIB", "ciscoDs1Current24HrMIBGroup"), ("CISCO-DS1-EXT-MIB", "ciscoDs1Previous24HrMIBGroup"), ("CISCO-DS1-EXT-MIB", "ciscoDs1IntervalMIBGroup"), ("CISCO-DS1-EXT-MIB", "ciscoDs1TotalMIBGroup"), ("CISCO-DS1-EXT-MIB", "ciscoDs1StatsMIBGroup"), ("CISCO-DS1-EXT-MIB", "ciscoDs1FarEndStatsMIBGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoDs1MIBCompliance = ciscoDs1MIBCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoDs1MIBCompliance.setDescription('Compliance statement for Cisco DS1 Extension MIB.')
ciscoDs1MIBComplianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 229, 3, 1, 2)).setObjects(("CISCO-DS1-EXT-MIB", "ciscoDs1ConfMIBGroup"), ("CISCO-DS1-EXT-MIB", "ciscoDs1CurrentMIBGroup"), ("CISCO-DS1-EXT-MIB", "ciscoDs1AlarmConfigGroup"), ("CISCO-DS1-EXT-MIB", "ciscoDs1Alarm15MinThreshGroup"), ("CISCO-DS1-EXT-MIB", "ciscoDs1Alarm24HrThreshGroup"), ("CISCO-DS1-EXT-MIB", "ciscoDs1Current24HrMIBGroup"), ("CISCO-DS1-EXT-MIB", "ciscoDs1Previous24HrMIBGroup"), ("CISCO-DS1-EXT-MIB", "ciscoDs1IntervalMIBGroup"), ("CISCO-DS1-EXT-MIB", "ciscoDs1TotalMIBGroup"), ("CISCO-DS1-EXT-MIB", "ciscoDs1StatsMIBGroup"), ("CISCO-DS1-EXT-MIB", "ciscoDs1FarEndStatsMIBGroup"), ("CISCO-DS1-EXT-MIB", "ciscoDs1BulkConfGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoDs1MIBComplianceRev1 = ciscoDs1MIBComplianceRev1.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoDs1MIBComplianceRev1.setDescription('Compliance statement for Cisco DS1 Extension MIB.')
ciscoDs1MIBComplianceRev2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 229, 3, 1, 3)).setObjects(("CISCO-DS1-EXT-MIB", "ciscoDs1ConfMIBGroup"), ("CISCO-DS1-EXT-MIB", "ciscoDs1CurrentMIBGroup"), ("CISCO-DS1-EXT-MIB", "ciscoDs1AlarmConfigGroup"), ("CISCO-DS1-EXT-MIB", "ciscoDs1AlarmThreshGroup"), ("CISCO-DS1-EXT-MIB", "ciscoDs1Alarm15MinThreshGroupRev1"), ("CISCO-DS1-EXT-MIB", "ciscoDs1Alarm24HrThreshGroupRev1"), ("CISCO-DS1-EXT-MIB", "ciscoDs1Current24HrMIBGroup"), ("CISCO-DS1-EXT-MIB", "ciscoDs1Previous24HrMIBGroup"), ("CISCO-DS1-EXT-MIB", "ciscoDs1IntervalMIBGroup"), ("CISCO-DS1-EXT-MIB", "ciscoDs1TotalMIBGroup"), ("CISCO-DS1-EXT-MIB", "ciscoDs1StatsMIBGroup"), ("CISCO-DS1-EXT-MIB", "ciscoDs1FarEndStatsMIBGroup"), ("CISCO-DS1-EXT-MIB", "ciscoDs1BulkConfGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoDs1MIBComplianceRev2 = ciscoDs1MIBComplianceRev2.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoDs1MIBComplianceRev2.setDescription('Compliance statement for Cisco DS1 Extension MIB.')
ciscoDs1MIBComplianceRev3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 229, 3, 1, 4)).setObjects(("CISCO-DS1-EXT-MIB", "ciscoDs1ConfMIBGroup"), ("CISCO-DS1-EXT-MIB", "ciscoDs1CurrentMIBGroup"), ("CISCO-DS1-EXT-MIB", "ciscoDs1AlarmConfigGroup"), ("CISCO-DS1-EXT-MIB", "ciscoDs1AlarmThreshGroup"), ("CISCO-DS1-EXT-MIB", "ciscoDs1Alarm15MinThreshGroupRev1"), ("CISCO-DS1-EXT-MIB", "ciscoDs1Alarm24HrThreshGroupRev1"), ("CISCO-DS1-EXT-MIB", "ciscoDs1Current24HrMIBGroup"), ("CISCO-DS1-EXT-MIB", "ciscoDs1Previous24HrMIBGroup"), ("CISCO-DS1-EXT-MIB", "ciscoDs1IntervalMIBGroup"), ("CISCO-DS1-EXT-MIB", "ciscoDs1TotalMIBGroup"), ("CISCO-DS1-EXT-MIB", "ciscoDs1StatsMIBGroup"), ("CISCO-DS1-EXT-MIB", "ciscoDs1FarEndStatsMIBGroup"), ("CISCO-DS1-EXT-MIB", "ciscoDs1BulkConfGroup"), ("CISCO-DS1-EXT-MIB", "ciscoDs1CallGroup"), ("CISCO-DS1-EXT-MIB", "cds1NEOptionalNotificationsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoDs1MIBComplianceRev3 = ciscoDs1MIBComplianceRev3.setStatus('current')
if mibBuilder.loadTexts: ciscoDs1MIBComplianceRev3.setDescription('Compliance statement for Cisco DS1 Extension MIB.')
ciscoDs1ConfMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 229, 3, 2, 1)).setObjects(("CISCO-DS1-EXT-MIB", "cds1LineType"), ("CISCO-DS1-EXT-MIB", "cds1LoopbackCodeDetection"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoDs1ConfMIBGroup = ciscoDs1ConfMIBGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoDs1ConfMIBGroup.setDescription('Collection of DS1/E1 interface related configuration parameters.')
ciscoDs1CurrentMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 229, 3, 2, 2)).setObjects(("CISCO-DS1-EXT-MIB", "cds1CurrentLSESs"), ("CISCO-DS1-EXT-MIB", "cds1CurrentPSASs"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoDs1CurrentMIBGroup = ciscoDs1CurrentMIBGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoDs1CurrentMIBGroup.setDescription('A collection of objects providing statistics information for current 15 minute.')
ciscoDs1IntervalMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 229, 3, 2, 3)).setObjects(("CISCO-DS1-EXT-MIB", "cds1IntervalLSESs"), ("CISCO-DS1-EXT-MIB", "cds1IntervalPSASs"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoDs1IntervalMIBGroup = ciscoDs1IntervalMIBGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoDs1IntervalMIBGroup.setDescription('A collection of objects providing statistics information for each DS1 interface over the previous 24 hour of operation.')
ciscoDs1TotalMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 229, 3, 2, 4)).setObjects(("CISCO-DS1-EXT-MIB", "cds1TotalLSESs"), ("CISCO-DS1-EXT-MIB", "cds1TotalPSASs"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoDs1TotalMIBGroup = ciscoDs1TotalMIBGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoDs1TotalMIBGroup.setDescription('A collection of objects providing statistics information applicable to all DS1 interfaces for the 24 hour period preceding the current interval.')
ciscoDs1FarEndStatsMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 229, 3, 2, 5)).setObjects(("CISCO-DS1-EXT-MIB", "cds1FarEndCurrentLOFCs"), ("CISCO-DS1-EXT-MIB", "cds1FarEndIntervalLOFCs"), ("CISCO-DS1-EXT-MIB", "cds1FarEndTotalLOFCs"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoDs1FarEndStatsMIBGroup = ciscoDs1FarEndStatsMIBGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoDs1FarEndStatsMIBGroup.setDescription('A collection of objects providing statistics information for the remote end.')
ciscoDs1AlarmConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 229, 3, 2, 6)).setObjects(("CISCO-DS1-EXT-MIB", "cds1StatisticalAlarmSeverity"), ("CISCO-DS1-EXT-MIB", "cds1StatisticalAlarmState"), ("CISCO-DS1-EXT-MIB", "cds1AlarmUpCount"), ("CISCO-DS1-EXT-MIB", "cds1AlarmDownCount"), ("CISCO-DS1-EXT-MIB", "cds1AlarmThreshold"), ("CISCO-DS1-EXT-MIB", "cds1AlarmThresholdActiveGroup"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoDs1AlarmConfigGroup = ciscoDs1AlarmConfigGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoDs1AlarmConfigGroup.setDescription('Statistical alarm configuration group for 15 Minute thresholds.')
ciscoDs1Alarm15MinThreshGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 229, 3, 2, 7)).setObjects(("CISCO-DS1-EXT-MIB", "cds1Current15MinLCVsThreshold"), ("CISCO-DS1-EXT-MIB", "cds1Current15MinLESsThreshold"), ("CISCO-DS1-EXT-MIB", "cds1Current15MinPCVsThreshold"), ("CISCO-DS1-EXT-MIB", "cds1Current15MinSEFSsThreshold"), ("CISCO-DS1-EXT-MIB", "cds1Current15MinUASsThreshold"), ("CISCO-DS1-EXT-MIB", "cds1Current15MinLSESsThreshold"), ("CISCO-DS1-EXT-MIB", "cds1Current15MinSESsThreshold"), ("CISCO-DS1-EXT-MIB", "cds1Current15MinBESsThreshold"), ("CISCO-DS1-EXT-MIB", "cds1Current15MinDMsThreshold"), ("CISCO-DS1-EXT-MIB", "cds1Current15MinESsThreshold"), ("CISCO-DS1-EXT-MIB", "cds1Current15MinCSSsThreshold"), ("CISCO-DS1-EXT-MIB", "cds1Current15MinPSASsThreshold"), ("CISCO-DS1-EXT-MIB", "cds1AlarmThresholdGroupRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoDs1Alarm15MinThreshGroup = ciscoDs1Alarm15MinThreshGroup.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoDs1Alarm15MinThreshGroup.setDescription('Threshold configuration group for stats collected in 15 minute intervals.')
ciscoDs1Alarm24HrThreshGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 229, 3, 2, 8)).setObjects(("CISCO-DS1-EXT-MIB", "cds1Current24HrLCVsThreshold"), ("CISCO-DS1-EXT-MIB", "cds1Current24HrLESsThreshold"), ("CISCO-DS1-EXT-MIB", "cds1Current24HrPCVsThreshold"), ("CISCO-DS1-EXT-MIB", "cds1Current24HrSEFSsThreshold"), ("CISCO-DS1-EXT-MIB", "cds1Current24HrUASsThreshold"), ("CISCO-DS1-EXT-MIB", "cds1Current24HrLSESsThreshold"), ("CISCO-DS1-EXT-MIB", "cds1Current24HrSESsThreshold"), ("CISCO-DS1-EXT-MIB", "cds1Current24HrBESsThreshold"), ("CISCO-DS1-EXT-MIB", "cds1Current24HrCSSsThreshold"), ("CISCO-DS1-EXT-MIB", "cds1Current24HrDMsThreshold"), ("CISCO-DS1-EXT-MIB", "cds1Current24HrESsThreshold"), ("CISCO-DS1-EXT-MIB", "cds1Current24HrPSASsThreshold"), ("CISCO-DS1-EXT-MIB", "cds1AlarmThresholdGroupRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoDs1Alarm24HrThreshGroup = ciscoDs1Alarm24HrThreshGroup.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoDs1Alarm24HrThreshGroup.setDescription('Threshold configuration group for stats collected in 24 minute intervals.')
ciscoDs1Current24HrMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 229, 3, 2, 9)).setObjects(("CISCO-DS1-EXT-MIB", "cds1Current24HrESs"), ("CISCO-DS1-EXT-MIB", "cds1Current24HrSESs"), ("CISCO-DS1-EXT-MIB", "cds1Current24HrSEFSs"), ("CISCO-DS1-EXT-MIB", "cds1Current24HrUASs"), ("CISCO-DS1-EXT-MIB", "cds1Current24HrCSSs"), ("CISCO-DS1-EXT-MIB", "cds1Current24HrPCVs"), ("CISCO-DS1-EXT-MIB", "cds1Current24HrLESs"), ("CISCO-DS1-EXT-MIB", "cds1Current24HrBESs"), ("CISCO-DS1-EXT-MIB", "cds1Current24HrDMs"), ("CISCO-DS1-EXT-MIB", "cds1Current24HrLCVs"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoDs1Current24HrMIBGroup = ciscoDs1Current24HrMIBGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoDs1Current24HrMIBGroup.setDescription('Group of current 24 hour performance counters.')
ciscoDs1Previous24HrMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 229, 3, 2, 10)).setObjects(("CISCO-DS1-EXT-MIB", "cds1Previous24HrESs"), ("CISCO-DS1-EXT-MIB", "cds1Previous24HrSESs"), ("CISCO-DS1-EXT-MIB", "cds1Previous24HrSEFSs"), ("CISCO-DS1-EXT-MIB", "cds1Previous24HrUASs"), ("CISCO-DS1-EXT-MIB", "cds1Previous24HrCSSs"), ("CISCO-DS1-EXT-MIB", "cds1Previous24HrPCVs"), ("CISCO-DS1-EXT-MIB", "cds1Previous24HrLESs"), ("CISCO-DS1-EXT-MIB", "cds1Previous24HrBESs"), ("CISCO-DS1-EXT-MIB", "cds1Previous24HrDMs"), ("CISCO-DS1-EXT-MIB", "cds1Previous24HrLCVs"), ("CISCO-DS1-EXT-MIB", "cds1Previous24HrLSESs"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoDs1Previous24HrMIBGroup = ciscoDs1Previous24HrMIBGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoDs1Previous24HrMIBGroup.setDescription('A collection of objects providing statistics for previous 24 hour.')
ciscoDs1StatsMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 229, 3, 2, 11)).setObjects(("CISCO-DS1-EXT-MIB", "cds1LOSCounts"), ("CISCO-DS1-EXT-MIB", "cds1OOFCounts"), ("CISCO-DS1-EXT-MIB", "cds1RAICounts"), ("CISCO-DS1-EXT-MIB", "cds1FECounts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoDs1StatsMIBGroup = ciscoDs1StatsMIBGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoDs1StatsMIBGroup.setDescription('A collection of objects related to DS1 statistics.')
cds1NEOptionalNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 229, 3, 2, 12)).setObjects(("CISCO-DS1-EXT-MIB", "cds1StatThresholdAlarm"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cds1NEOptionalNotificationsGroup = cds1NEOptionalNotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: cds1NEOptionalNotificationsGroup.setDescription('A collection of notifications that may be implemented on DS1/E1 interfaces.')
ciscoDs1BulkConfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 229, 3, 2, 13)).setObjects(("CISCO-DS1-EXT-MIB", "cds1Repetition"), ("CISCO-DS1-EXT-MIB", "cds1RepetitionOwner"), ("CISCO-DS1-EXT-MIB", "cds1RepetitionResult"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoDs1BulkConfGroup = ciscoDs1BulkConfGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoDs1BulkConfGroup.setDescription('Bulk provisioning parameters for DS1/E1 interface.')
ciscoDs1AlarmThreshGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 229, 3, 2, 14)).setObjects(("CISCO-DS1-EXT-MIB", "cds1AlarmThresholdGroupRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoDs1AlarmThreshGroup = ciscoDs1AlarmThreshGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoDs1AlarmThreshGroup.setDescription('The common group for DS1 alarm threshold configuration. Note: If this group is supported, at least one of ciscoDs1Alarm15MinThreshGroupRev1 and ciscoDs1Alarm24HrThreshGroupRev1 should be supported.')
ciscoDs1Alarm15MinThreshGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 229, 3, 2, 15)).setObjects(("CISCO-DS1-EXT-MIB", "cds1Current15MinLCVsThreshold"), ("CISCO-DS1-EXT-MIB", "cds1Current15MinLESsThreshold"), ("CISCO-DS1-EXT-MIB", "cds1Current15MinPCVsThreshold"), ("CISCO-DS1-EXT-MIB", "cds1Current15MinSEFSsThreshold"), ("CISCO-DS1-EXT-MIB", "cds1Current15MinUASsThreshold"), ("CISCO-DS1-EXT-MIB", "cds1Current15MinLSESsThreshold"), ("CISCO-DS1-EXT-MIB", "cds1Current15MinSESsThreshold"), ("CISCO-DS1-EXT-MIB", "cds1Current15MinBESsThreshold"), ("CISCO-DS1-EXT-MIB", "cds1Current15MinDMsThreshold"), ("CISCO-DS1-EXT-MIB", "cds1Current15MinESsThreshold"), ("CISCO-DS1-EXT-MIB", "cds1Current15MinCSSsThreshold"), ("CISCO-DS1-EXT-MIB", "cds1Current15MinPSASsThreshold"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoDs1Alarm15MinThreshGroupRev1 = ciscoDs1Alarm15MinThreshGroupRev1.setStatus('current')
if mibBuilder.loadTexts: ciscoDs1Alarm15MinThreshGroupRev1.setDescription('Threshold configuration group for stats collected in 15 minute intervals.')
ciscoDs1Alarm24HrThreshGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 229, 3, 2, 16)).setObjects(("CISCO-DS1-EXT-MIB", "cds1Current24HrLCVsThreshold"), ("CISCO-DS1-EXT-MIB", "cds1Current24HrLESsThreshold"), ("CISCO-DS1-EXT-MIB", "cds1Current24HrPCVsThreshold"), ("CISCO-DS1-EXT-MIB", "cds1Current24HrSEFSsThreshold"), ("CISCO-DS1-EXT-MIB", "cds1Current24HrUASsThreshold"), ("CISCO-DS1-EXT-MIB", "cds1Current24HrLSESsThreshold"), ("CISCO-DS1-EXT-MIB", "cds1Current24HrSESsThreshold"), ("CISCO-DS1-EXT-MIB", "cds1Current24HrBESsThreshold"), ("CISCO-DS1-EXT-MIB", "cds1Current24HrCSSsThreshold"), ("CISCO-DS1-EXT-MIB", "cds1Current24HrDMsThreshold"), ("CISCO-DS1-EXT-MIB", "cds1Current24HrESsThreshold"), ("CISCO-DS1-EXT-MIB", "cds1Current24HrPSASsThreshold"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoDs1Alarm24HrThreshGroupRev1 = ciscoDs1Alarm24HrThreshGroupRev1.setStatus('current')
if mibBuilder.loadTexts: ciscoDs1Alarm24HrThreshGroupRev1.setDescription('Threshold configuration group for stats collected in 24 minute intervals.')
ciscoDs1CallGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 229, 3, 2, 17)).setObjects(("CISCO-DS1-EXT-MIB", "cds1CallTrunkConditionEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoDs1CallGroup = ciscoDs1CallGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoDs1CallGroup.setDescription('Call related parameters for DS1/E1 interface.')
mibBuilder.exportSymbols("CISCO-DS1-EXT-MIB", cds1Current15MinPCVsThreshold=cds1Current15MinPCVsThreshold, ciscoDs1Alarm24HrThreshGroup=ciscoDs1Alarm24HrThreshGroup, cds1Previous24HrLSESs=cds1Previous24HrLSESs, cds1RepetitionOwner=cds1RepetitionOwner, cds1Previous24HrLCVs=cds1Previous24HrLCVs, ciscoDs1MIBCompliance=ciscoDs1MIBCompliance, cds1TotalTable=cds1TotalTable, cds1Previous24HrCSSs=cds1Previous24HrCSSs, cds1Repetition=cds1Repetition, cds1CurrentTable=cds1CurrentTable, cds1Notifications=cds1Notifications, cds1Previous24HrDMs=cds1Previous24HrDMs, cds1AlarmConfigTable=cds1AlarmConfigTable, cds1TotalEntry=cds1TotalEntry, cds1CurrentLSESs=cds1CurrentLSESs, cds1Current24HrESs=cds1Current24HrESs, cds1Current15MinCSSsThreshold=cds1Current15MinCSSsThreshold, ciscoDs1Alarm15MinThreshGroup=ciscoDs1Alarm15MinThreshGroup, cds1AlarmThresholdGroupEntry=cds1AlarmThresholdGroupEntry, ciscoDs1MIBComplianceRev3=ciscoDs1MIBComplianceRev3, cds1RAICounts=cds1RAICounts, cds1FarEndCurrentLOFCs=cds1FarEndCurrentLOFCs, PerfCurrent24HourCount=PerfCurrent24HourCount, cds1LineType=cds1LineType, cds1Previous24HrBESs=cds1Previous24HrBESs, cds1Stats=cds1Stats, cds1Current24HrBESsThreshold=cds1Current24HrBESsThreshold, cds1Current15MinUASsThreshold=cds1Current15MinUASsThreshold, ciscoDs1Alarm15MinThreshGroupRev1=ciscoDs1Alarm15MinThreshGroupRev1, cds1Current24HrStatsTable=cds1Current24HrStatsTable, ciscoDs1TotalMIBGroup=ciscoDs1TotalMIBGroup, cds1CallConfigTable=cds1CallConfigTable, cds1Current24HrLSESsThreshold=cds1Current24HrLSESsThreshold, cds1Current15MinLSESsThreshold=cds1Current15MinLSESsThreshold, cds1Current24HrStatsEntry=cds1Current24HrStatsEntry, ciscoDs1MIBCompliances=ciscoDs1MIBCompliances, ciscoDs1Current24HrMIBGroup=ciscoDs1Current24HrMIBGroup, cds1Current24HrCSSsThreshold=cds1Current24HrCSSsThreshold, ciscoDs1CurrentMIBGroup=ciscoDs1CurrentMIBGroup, cds1Current24HrDMsThreshold=cds1Current24HrDMsThreshold, cds1AlarmThresholdGroupRowStatus=cds1AlarmThresholdGroupRowStatus, cds1OOFCounts=cds1OOFCounts, ciscoDs1MIBComplianceRev2=ciscoDs1MIBComplianceRev2, cds1Current24HrUASsThreshold=cds1Current24HrUASsThreshold, cds1StatisticalAlarmState=cds1StatisticalAlarmState, ciscoDs1BulkConfGroup=ciscoDs1BulkConfGroup, cds1Current24HrSEFSsThreshold=cds1Current24HrSEFSsThreshold, ciscoDs1Previous24HrMIBGroup=ciscoDs1Previous24HrMIBGroup, cds1Current15MinSESsThreshold=cds1Current15MinSESsThreshold, cds1CallTrunkConditionEnable=cds1CallTrunkConditionEnable, cds1Current15MinLESsThreshold=cds1Current15MinLESsThreshold, PYSNMP_MODULE_ID=ciscoDs1ExtMIB, cds1TotalLSESs=cds1TotalLSESs, cds1ErrStatsEntry=cds1ErrStatsEntry, ciscoDs1CallGroup=ciscoDs1CallGroup, ciscoDs1IntervalMIBGroup=ciscoDs1IntervalMIBGroup, cds1Current24HrLCVsThreshold=cds1Current24HrLCVsThreshold, cds1AlarmConfigEntry=cds1AlarmConfigEntry, ciscoDs1AlarmThreshGroup=ciscoDs1AlarmThreshGroup, cds1AlarmThresholdGroupTable=cds1AlarmThresholdGroupTable, cds1IntervalEntry=cds1IntervalEntry, cds1IntervalLSESs=cds1IntervalLSESs, cds1Previous24HrStatsTable=cds1Previous24HrStatsTable, cds1Previous24HrLESs=cds1Previous24HrLESs, cds1Current24HrBESs=cds1Current24HrBESs, cds1NEOptionalNotificationsGroup=cds1NEOptionalNotificationsGroup, cds1FarEndTotalEntry=cds1FarEndTotalEntry, cds1Current24HrDMs=cds1Current24HrDMs, cds1StatThresholdAlarm=cds1StatThresholdAlarm, cds1FarEndIntervalEntry=cds1FarEndIntervalEntry, cds1Current15MinLCVsThreshold=cds1Current15MinLCVsThreshold, cds1Current15MinBESsThreshold=cds1Current15MinBESsThreshold, cds1Current24HrLESsThreshold=cds1Current24HrLESsThreshold, cds1FarEndCurrentTable=cds1FarEndCurrentTable, cds1Current24HrCSSs=cds1Current24HrCSSs, cds1Previous24HrESs=cds1Previous24HrESs, cds1Current15MinSEFSsThreshold=cds1Current15MinSEFSsThreshold, cds1NotificationPrefix=cds1NotificationPrefix, cds1StatisticalAlarmSeverity=cds1StatisticalAlarmSeverity, cds1CurrentPSASs=cds1CurrentPSASs, cds1LoopbackCodeDetection=cds1LoopbackCodeDetection, cds1Current24HrSESsThreshold=cds1Current24HrSESsThreshold, cds1Config=cds1Config, cds1FarEndCurrentEntry=cds1FarEndCurrentEntry, cds1TotalPSASs=cds1TotalPSASs, cds1ConfigEntry=cds1ConfigEntry, ciscoDs1MIBGroups=ciscoDs1MIBGroups, cds1Previous24HrSESs=cds1Previous24HrSESs, cds1FECounts=cds1FECounts, cds1Current24HrPSASsThreshold=cds1Current24HrPSASsThreshold, cds1Current24HrLCVs=cds1Current24HrLCVs, cds1Current24HrSEFSs=cds1Current24HrSEFSs, cds1FarEndTotalLOFCs=cds1FarEndTotalLOFCs, cds1AlarmThreshold=cds1AlarmThreshold, cds1Alarm=cds1Alarm, cds1Current24HrSESs=cds1Current24HrSESs, cds1Current24HrPCVs=cds1Current24HrPCVs, cds1Current15MinDMsThreshold=cds1Current15MinDMsThreshold, cds1Current24HrPCVsThreshold=cds1Current24HrPCVsThreshold, cds1IntervalTable=cds1IntervalTable, cds1FarEndIntervalLOFCs=cds1FarEndIntervalLOFCs, cds1AlarmThresholdActiveGroup=cds1AlarmThresholdActiveGroup, ciscoDs1AlarmConfigGroup=ciscoDs1AlarmConfigGroup, cds1CurrentEntry=cds1CurrentEntry, ciscoDs1MIBObjects=ciscoDs1MIBObjects, PerfPrevious24HourCount=PerfPrevious24HourCount, cds1LOSCounts=cds1LOSCounts, ciscoDs1Alarm24HrThreshGroupRev1=ciscoDs1Alarm24HrThreshGroupRev1, cds1FarEndTotalTable=cds1FarEndTotalTable, cds1Current15MinESsThreshold=cds1Current15MinESsThreshold, cds1Current24HrESsThreshold=cds1Current24HrESsThreshold, ciscoDs1MIBConformance=ciscoDs1MIBConformance, ciscoDs1MIBComplianceRev1=ciscoDs1MIBComplianceRev1, cds1Current24HrUASs=cds1Current24HrUASs, cds1AlarmUpCount=cds1AlarmUpCount, cds1AlarmThresholdGroupIndex=cds1AlarmThresholdGroupIndex, cds1Previous24HrStatsEntry=cds1Previous24HrStatsEntry, cds1Previous24HrPCVs=cds1Previous24HrPCVs, cds1Current24HrLESs=cds1Current24HrLESs, cds1AlarmDownCount=cds1AlarmDownCount, cds1RepetitionResult=cds1RepetitionResult, ciscoDs1FarEndStatsMIBGroup=ciscoDs1FarEndStatsMIBGroup, cds1ConfigTable=cds1ConfigTable, ciscoDs1ConfMIBGroup=ciscoDs1ConfMIBGroup, cds1FarEndIntervalTable=cds1FarEndIntervalTable, ciscoDs1StatsMIBGroup=ciscoDs1StatsMIBGroup, cds1CallConfigEntry=cds1CallConfigEntry, cds1Previous24HrSEFSs=cds1Previous24HrSEFSs, cds1ErrStatsTable=cds1ErrStatsTable, cds1Previous24HrUASs=cds1Previous24HrUASs, cds1IntervalPSASs=cds1IntervalPSASs, ciscoDs1ExtMIB=ciscoDs1ExtMIB, cds1Current15MinPSASsThreshold=cds1Current15MinPSASsThreshold)
