#
# PySNMP MIB module RADLAN-OSPF-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/RADLAN-OSPF-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:47:47 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion")
InterfaceIndexOrZero, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero")
PositiveInteger, RouterID, HelloRange, BigMetric, Status, TOSType, AreaID, Metric, DesignatedRouterPriority, UpToMaxAge = mibBuilder.importSymbols("OSPF-MIB", "PositiveInteger", "RouterID", "HelloRange", "BigMetric", "Status", "TOSType", "AreaID", "Metric", "DesignatedRouterPriority", "UpToMaxAge")
rnd, = mibBuilder.importSymbols("RADLAN-MIB", "rnd")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
ModuleIdentity, MibIdentifier, iso, NotificationType, Gauge32, IpAddress, Counter64, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, Bits, mib_2, Counter32, Integer32, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "MibIdentifier", "iso", "NotificationType", "Gauge32", "IpAddress", "Counter64", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "Bits", "mib-2", "Counter32", "Integer32", "TimeTicks")
TextualConvention, TruthValue, RowStatus, DisplayString, TimeStamp = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TruthValue", "RowStatus", "DisplayString", "TimeStamp")
rlOspf = ModuleIdentity((1, 3, 6, 1, 4, 1, 89, 210))
rlOspf.setRevisions(('2011-05-04 17:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: rlOspf.setRevisionsDescriptions(('Initial version of this MIB.',))
if mibBuilder.loadTexts: rlOspf.setLastUpdated('201105041700Z')
if mibBuilder.loadTexts: rlOspf.setOrganization('Radlan Computer Communications Ltd.')
if mibBuilder.loadTexts: rlOspf.setContactInfo('radlan.com')
if mibBuilder.loadTexts: rlOspf.setDescription('The private MIB module definition for Multi Instance OSPF MIB.')
class RlOspfProcessID(TextualConvention, Integer32):
    description = 'An OSPF Process Identifier.'
    status = 'current'

class RlOspfFastHelloMultiplierRange(TextualConvention, Integer32):
    description = 'The range of hello multipliers that determine how often Fast Hellos are exchanged.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(3, 20)

class RlOspfRestartHelperStatus(TextualConvention, Integer32):
    description = 'Indicates whether the router is acting as a hitless restart helper for a neighbor.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("notHelping", 1), ("helping", 2))

class RlOspfRestartExitReason(TextualConvention, Integer32):
    description = 'The reason for exiting an attempted graceful restart.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("none", 1), ("inProgress", 2), ("completed", 3), ("timedOut", 4), ("topologyChanged", 5))

class RlOspfRouterIdType(TextualConvention, Integer32):
    description = 'The reason for exiting an attempted graceful restart.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("default", 1), ("manual", 2))

class RlOspfAuthenticationType(TextualConvention, Integer32):
    description = 'The authentication type.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 9))
    namedValues = NamedValues(("none", 0), ("simplePassword", 1), ("md5", 2), ("null", 9))

class RlOspfUpToRefreshIntervalTC(TextualConvention, Unsigned32):
    reference = 'OSPF Version 2, Appendix B, Architectural Constants'
    description = 'The values one might be able to configure for variables bounded by the Refresh Interval.'
    status = 'current'
    displayHint = 'd-0'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(1, 65535)

class RlOspfDeadIntervalRangeTC(TextualConvention, Unsigned32):
    reference = 'OSPF for IPv6, Appendix C.3, Router Interface Parameters'
    description = 'The range, in seconds, of dead interval value.'
    status = 'current'
    displayHint = 'd-0'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(1, 65535)

rlOspfInstance = MibScalar((1, 3, 6, 1, 4, 1, 89, 210, 1), RlOspfProcessID()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlOspfInstance.setStatus('current')
if mibBuilder.loadTexts: rlOspfInstance.setDescription('Selected OSPF Process ID. Additional key value for old fashion usage of OSPF standard MIB to support multi OSPF instance.')
rlOspfGeneralGroupTable = MibTable((1, 3, 6, 1, 4, 1, 89, 210, 2), )
if mibBuilder.loadTexts: rlOspfGeneralGroupTable.setStatus('current')
if mibBuilder.loadTexts: rlOspfGeneralGroupTable.setDescription('OSPF Instance General Variables')
rlOspfGeneralGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 210, 2, 1), ).setIndexNames((0, "RADLAN-OSPF-MIB", "rlOspfProcessId"))
if mibBuilder.loadTexts: rlOspfGeneralGroupEntry.setStatus('current')
if mibBuilder.loadTexts: rlOspfGeneralGroupEntry.setDescription('Information describing the configured global parame- ters to the Router OSPF Process.')
rlOspfProcessId = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 2, 1, 1), RlOspfProcessID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfProcessId.setStatus('current')
if mibBuilder.loadTexts: rlOspfProcessId.setDescription('A 32-bit integer uniquely identifying an OSPF process.')
rlOspfRouterId = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 2, 1, 2), RouterID()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlOspfRouterId.setReference('OSPF Version 2, C.1 Global parameters')
if mibBuilder.loadTexts: rlOspfRouterId.setStatus('current')
if mibBuilder.loadTexts: rlOspfRouterId.setDescription("A 32-bit integer uniquely identifying the router in the Autonomous System. By convention, to ensure uniqueness, this should default to the value of one of the router's IP interface addresses. This object is persistent and when written the entity SHOULD save the change to non-volatile storage.")
rlOspfAdminStat = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 2, 1, 3), Status()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlOspfAdminStat.setStatus('current')
if mibBuilder.loadTexts: rlOspfAdminStat.setDescription("The administrative status of OSPF in the router. The value 'enabled' denotes that the OSPF Process is active on at least one interface; 'disabled' disables it on all interfaces. This object is persistent and when written the entity SHOULD save the change to non-volatile storage.")
rlOspfVersionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("version2", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfVersionNumber.setReference('OSPF Version 2, Title')
if mibBuilder.loadTexts: rlOspfVersionNumber.setStatus('current')
if mibBuilder.loadTexts: rlOspfVersionNumber.setDescription('The current version number of the OSPF protocol is 2.')
rlOspfAreaBdrRtrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 2, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfAreaBdrRtrStatus.setReference('OSPF Version 2, Section 3 Splitting the AS into Areas')
if mibBuilder.loadTexts: rlOspfAreaBdrRtrStatus.setStatus('current')
if mibBuilder.loadTexts: rlOspfAreaBdrRtrStatus.setDescription('A flag to note whether this router is an Area Border Router.')
rlOspfASBdrRtrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 2, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlOspfASBdrRtrStatus.setReference('OSPF Version 2, Section 3.3 Classification of routers')
if mibBuilder.loadTexts: rlOspfASBdrRtrStatus.setStatus('current')
if mibBuilder.loadTexts: rlOspfASBdrRtrStatus.setDescription('A flag to note whether this router is configured as an Autonomous System Border Router. This object is persistent and when written the entity SHOULD save the change to non-volatile storage.')
rlOspfExternLsaCount = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 2, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfExternLsaCount.setReference('OSPF Version 2, Appendix A.4.5 AS external link advertisements')
if mibBuilder.loadTexts: rlOspfExternLsaCount.setStatus('current')
if mibBuilder.loadTexts: rlOspfExternLsaCount.setDescription('The number of external (LS type-5) link state advertisements in the link state database.')
rlOspfExternLsaCksumSum = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfExternLsaCksumSum.setStatus('current')
if mibBuilder.loadTexts: rlOspfExternLsaCksumSum.setDescription("The 32-bit sum of the LS checksums of the external link state advertisements contained in the link state database. This sum can be used to determine if there has been a change in a router's link state database and to compare the link state database of two routers. The value should be treated as unsigned when comparing two sums of checksums.")
rlOspfTOSSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 2, 1, 9), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlOspfTOSSupport.setReference('OSPF Version 2, Appendix F.1.2 Optional TOS support')
if mibBuilder.loadTexts: rlOspfTOSSupport.setStatus('current')
if mibBuilder.loadTexts: rlOspfTOSSupport.setDescription("The router's support for type-of-service routing. This object is persistent and when written the entity SHOULD save the change to non-volatile storage.")
rlOspfOriginateNewLsas = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfOriginateNewLsas.setStatus('current')
if mibBuilder.loadTexts: rlOspfOriginateNewLsas.setDescription('The number of new link state advertisements that have been originated. This number is incremented each time the router originates a new LSA. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of ospfDiscontinuityTime.')
rlOspfRxNewLsas = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfRxNewLsas.setStatus('current')
if mibBuilder.loadTexts: rlOspfRxNewLsas.setDescription('The number of link state advertisements received that are determined to be new instantiations. This number does not include newer instantiations of self-originated link state advertisements. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of ospfDiscontinuityTime.')
rlOspfExtLsdbLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlOspfExtLsdbLimit.setStatus('current')
if mibBuilder.loadTexts: rlOspfExtLsdbLimit.setDescription("The maximum number of non-default AS-external LSAs entries that can be stored in the link state database. If the value is -1, then there is no limit. When the number of non-default AS-external LSAs in a router's link state database reaches rlOspfExtLsdbLimit, the router enters overflow state. The router never holds more than rlOspfExtLsdbLimit non-default AS-external LSAs in its database. OspfExtLsdbLimit MUST be set identically in all routers attached to the OSPF backbone and/or any regular OSPF area (i.e., OSPF stub areas and NSSAs are excluded). This object is persistent and when written the entity SHOULD save the change to non-volatile storage.")
rlOspfMulticastExtensions = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 2, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlOspfMulticastExtensions.setStatus('current')
if mibBuilder.loadTexts: rlOspfMulticastExtensions.setDescription("A bit mask indicating whether the router is forwarding IP multicast (Class D) datagrams based on the algorithms defined in the multicast extensions to OSPF. Bit 0, if set, indicates that the router can forward IP multicast datagrams in the router's directly attached areas (called intra-area multicast routing). Bit 1, if set, indicates that the router can forward IP multicast datagrams between OSPF areas (called inter-area multicast routing). Bit 2, if set, indicates that the router can forward IP multicast datagrams between Autonomous Systems (called inter-AS multicast routing). Only certain combinations of bit settings are allowed, namely: 0 (no multicast forwarding is enabled), 1 (intra-area multicasting only), 3 (intra-area and inter-area multicasting), 5 (intra-area and inter-AS multicasting), and 7 (multicasting everywhere). By default, no multicast forwarding is enabled. This object is persistent and when written the entity SHOULD save the change to non-volatile storage.")
rlOspfExitOverflowInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 2, 1, 14), PositiveInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlOspfExitOverflowInterval.setStatus('current')
if mibBuilder.loadTexts: rlOspfExitOverflowInterval.setDescription('The number of seconds that, after entering OverflowState, a router will attempt to leave OverflowState. This allows the router to again originate non-default AS-external LSAs. When set to 0, the router will not leave overflow state until restarted. This object is persistent and when written the entity SHOULD save the change to non-volatile storage.')
rlOspfDemandExtensions = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 2, 1, 15), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlOspfDemandExtensions.setReference('Extending OSPF to Support Demand Circuits')
if mibBuilder.loadTexts: rlOspfDemandExtensions.setStatus('current')
if mibBuilder.loadTexts: rlOspfDemandExtensions.setDescription("The router's support for demand routing. This object is persistent and when written the entity SHOULD save the change to non-volatile storage.")
rlOspfRFC1583Compatibility = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 2, 1, 16), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlOspfRFC1583Compatibility.setReference('OSPF Version 2, Section 16.4.1 External path preferences')
if mibBuilder.loadTexts: rlOspfRFC1583Compatibility.setStatus('current')
if mibBuilder.loadTexts: rlOspfRFC1583Compatibility.setDescription('Indicates metrics used to choose among multiple AS-external LSAs. When RFC1583Compatibility is set to enabled, only cost will be used when choosing among multiple AS-external LSAs advertising the same destination. When RFC1583Compatibility is set to disabled, preference will be driven first by type of path using cost only to break ties. This object is persistent and when written the entity SHOULD save the change to non-volatile storage.')
rlOspfOpaqueLsaSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 2, 1, 17), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfOpaqueLsaSupport.setReference('The OSPF Opaque LSA Option')
if mibBuilder.loadTexts: rlOspfOpaqueLsaSupport.setStatus('current')
if mibBuilder.loadTexts: rlOspfOpaqueLsaSupport.setDescription("The router's support for Opaque LSA types.")
rlOspfReferenceBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 2, 1, 18), Unsigned32()).setUnits('kilobits per second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlOspfReferenceBandwidth.setStatus('current')
if mibBuilder.loadTexts: rlOspfReferenceBandwidth.setDescription('Reference bandwidth in kilobits/second for calculating default interface metrics. The default value is 100,000 KBPS (100 MBPS). This object is persistent and when written the entity SHOULD save the change to non-volatile storage.')
rlOspfRestartSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("plannedOnly", 2), ("plannedAndUnplanned", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlOspfRestartSupport.setStatus('current')
if mibBuilder.loadTexts: rlOspfRestartSupport.setDescription("The router's support for OSPF graceful restart. Options include: no restart support, only planned restarts, or both planned and unplanned restarts. This object is persistent and when written the entity SHOULD save the change to non-volatile storage.")
rlOspfRestartInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 2, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1800))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlOspfRestartInterval.setStatus('current')
if mibBuilder.loadTexts: rlOspfRestartInterval.setDescription('Configured OSPF graceful restart timeout interval. This object is persistent and when written the entity SHOULD save the change to non-volatile storage.')
rlOspfRestartStrictLsaChecking = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 2, 1, 21), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlOspfRestartStrictLsaChecking.setStatus('current')
if mibBuilder.loadTexts: rlOspfRestartStrictLsaChecking.setDescription('Indicates if strict LSA checking is enabled for graceful restart. This object is persistent and when written the entity SHOULD save the change to non-volatile storage.')
rlOspfRestartStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 2, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notRestarting", 1), ("plannedRestart", 2), ("unplannedRestart", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfRestartStatus.setStatus('current')
if mibBuilder.loadTexts: rlOspfRestartStatus.setDescription('Current status of OSPF graceful restart.')
rlOspfRestartAge = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 2, 1, 23), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfRestartAge.setStatus('current')
if mibBuilder.loadTexts: rlOspfRestartAge.setDescription('Remaining time in current OSPF graceful restart interval.')
rlOspfRestartExitReason = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 2, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("inProgress", 2), ("completed", 3), ("timedOut", 4), ("topologyChanged", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfRestartExitReason.setStatus('current')
if mibBuilder.loadTexts: rlOspfRestartExitReason.setDescription("Describes the outcome of the last attempt at a graceful restart. If the value is 'none', no restart has yet been attempted. If the value is 'inProgress', a restart attempt is currently underway.")
rlOspfAsLsaCount = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 2, 1, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfAsLsaCount.setStatus('current')
if mibBuilder.loadTexts: rlOspfAsLsaCount.setDescription('The number of AS-scope link state advertisements in the AS-scope link state database.')
rlOspfAsLsaCksumSum = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 2, 1, 26), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfAsLsaCksumSum.setStatus('current')
if mibBuilder.loadTexts: rlOspfAsLsaCksumSum.setDescription("The 32-bit unsigned sum of the LS checksums of the AS link state advertisements contained in the AS-scope link state database. This sum can be used to determine if there has been a change in a router's AS-scope link state database, and to compare the AS-scope link state database of two routers.")
rlOspfStubRouterSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 2, 1, 27), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfStubRouterSupport.setReference('OSPF Stub Router Advertisement')
if mibBuilder.loadTexts: rlOspfStubRouterSupport.setStatus('current')
if mibBuilder.loadTexts: rlOspfStubRouterSupport.setDescription("The router's support for stub router functionality.")
rlOspfStubRouterAdvertisement = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 2, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("doNotAdvertise", 1), ("advertise", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlOspfStubRouterAdvertisement.setStatus('current')
if mibBuilder.loadTexts: rlOspfStubRouterAdvertisement.setDescription('This object controls the advertisement of stub router LSAs by the router. The value doNotAdvertise will result in the advertisement of a standard router LSA and is the default value. This object is persistent and when written the entity SHOULD save the change to non-volatile storage.')
rlOspfDiscontinuityTime = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 2, 1, 29), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfDiscontinuityTime.setStatus('current')
if mibBuilder.loadTexts: rlOspfDiscontinuityTime.setDescription("The value of sysUpTime on the most recent occasion at which any one of this MIB's counters suffered a discontinuity. If no such discontinuities have occurred since the last re-initialization of the local management subsystem, then this object contains a zero value.")
rlOspfGeneralGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 2, 1, 30), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlOspfGeneralGroupStatus.setStatus('current')
if mibBuilder.loadTexts: rlOspfGeneralGroupStatus.setDescription("This variable displays the status of the en- try. Setting it to 'invalid' has the effect of rendering it inoperative. The internal effect (row removal) is implementation dependent.")
rlOspfLogAdjacencyChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 2, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("detail", 2), ("disable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlOspfLogAdjacencyChanges.setStatus('current')
if mibBuilder.loadTexts: rlOspfLogAdjacencyChanges.setDescription('Configure the router to send a syslog message when an OSPF neighbor goes up or down. detail sends a syslog message for each state change, not just when a neighbor goes up or down')
rlOspfPassiveInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 2, 1, 32), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlOspfPassiveInterface.setStatus('current')
if mibBuilder.loadTexts: rlOspfPassiveInterface.setDescription('A flag to note whether to disable sending OSPF routing updates on all OSPF IP interfaces.')
rlOspfDefaultMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 2, 1, 33), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlOspfDefaultMetric.setStatus('current')
if mibBuilder.loadTexts: rlOspfDefaultMetric.setDescription('A default metric helps solve the problem of redistributing routes with incompatible metrics. Whenever metrics do not convert, using a default metric provides a reasonable substitute and enables the redistribution to proceed.')
rlOspfMaximumRedistPrefixNum = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 2, 1, 34), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlOspfMaximumRedistPrefixNum.setStatus('current')
if mibBuilder.loadTexts: rlOspfMaximumRedistPrefixNum.setDescription('Specifies the maximum number of IP prefixes that can be redistributed into OSPF.')
rlOspfMaximumRedistPrefixThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 2, 1, 35), Integer32().clone(75)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlOspfMaximumRedistPrefixThreshold.setStatus('current')
if mibBuilder.loadTexts: rlOspfMaximumRedistPrefixThreshold.setDescription('Threshold value, as a percentage, at which a warning message should be generated.')
rlOspfMaximumRedistPrefixWarningOnly = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 2, 1, 36), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlOspfMaximumRedistPrefixWarningOnly.setStatus('current')
if mibBuilder.loadTexts: rlOspfMaximumRedistPrefixWarningOnly.setDescription('Causes a warning message to be logged when the number of prefixes defined by the maximum argumenthas been exceeded. Additional redistribution is not prevented.')
rlOspfOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 2, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("goingUp", 3), ("goingDown", 4), ("actFailed", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfOperStatus.setStatus('current')
if mibBuilder.loadTexts: rlOspfOperStatus.setDescription('The current operational state of the OSPF in the router.')
rlOspfNextRouterId = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 2, 1, 38), RouterID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfNextRouterId.setStatus('current')
if mibBuilder.loadTexts: rlOspfNextRouterId.setDescription("A 32-bit integer uniquely identifying the of router in the Autonomous System after restart. By convention, to ensure uniqueness, this should default to the value of one of the router's IP interface addresses.")
rlOspfRouterIdType = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 2, 1, 39), RlOspfRouterIdType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfRouterIdType.setStatus('current')
if mibBuilder.loadTexts: rlOspfRouterIdType.setDescription('Type of router identifier - default value or manually set by user.')
rlOspfNextRouterIdType = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 2, 1, 40), RlOspfRouterIdType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfNextRouterIdType.setStatus('current')
if mibBuilder.loadTexts: rlOspfNextRouterIdType.setDescription('Type of router identifier after restart - default value or manually set by user.')
rlOspfASBdrRtrActualStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 2, 1, 41), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfASBdrRtrActualStatus.setStatus('current')
if mibBuilder.loadTexts: rlOspfASBdrRtrActualStatus.setDescription('A flag to note whether this router is an Autonomous System Border Router. Note: rlOspfASBdrRtrStatus field is the configuration while this filed is the actual ASBR status')
rlOspfCalcMaxDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 2, 1, 42), Unsigned32().clone(5000)).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlOspfCalcMaxDelay.setStatus('current')
if mibBuilder.loadTexts: rlOspfCalcMaxDelay.setDescription('The maximum delay before the Routing Table is recalculated following a change to the Link State Database. (Recalculation is delayed to reduce the frequency of recalculations of the Routing Table). This parameter has units of milliseconds. A value of 0 indicates that a routing calculation will immediately follow an update to the database.')
rlOspfRteMaxEqCostPaths = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 2, 1, 43), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlOspfRteMaxEqCostPaths.setStatus('current')
if mibBuilder.loadTexts: rlOspfRteMaxEqCostPaths.setDescription('The maximum number of equal cost paths that are stored for each destination in the Routing Table.')
rlOspfAreaTable = MibTable((1, 3, 6, 1, 4, 1, 89, 210, 3), )
if mibBuilder.loadTexts: rlOspfAreaTable.setReference('OSPF Version 2, Section 6 The Area Data Structure')
if mibBuilder.loadTexts: rlOspfAreaTable.setStatus('current')
if mibBuilder.loadTexts: rlOspfAreaTable.setDescription("Information describing the configured parameters and cumulative statistics of the router's attached areas. The interfaces and virtual links are configured as part of these areas. Area 0.0.0.0, by definition, is the backbone area.")
rlOspfAreaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 210, 3, 1), ).setIndexNames((0, "RADLAN-OSPF-MIB", "rlOspfAreaProcessId"), (0, "RADLAN-OSPF-MIB", "rlOspfAreaId"))
if mibBuilder.loadTexts: rlOspfAreaEntry.setStatus('current')
if mibBuilder.loadTexts: rlOspfAreaEntry.setDescription("Information describing the configured parameters and cumulative statistics of one of the router's attached areas. The interfaces and virtual links are configured as part of these areas. Area 0.0.0.0, by definition, is the backbone area. Information in this table is persistent and when this object is written the entity SHOULD save the change to non-volatile storage.")
rlOspfAreaProcessId = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 3, 1, 1), RlOspfProcessID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfAreaProcessId.setStatus('current')
if mibBuilder.loadTexts: rlOspfAreaProcessId.setDescription('A 32-bit integer uniquely identifying an OSPF process.')
rlOspfAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 3, 1, 2), AreaID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfAreaId.setReference('OSPF Version 2, Appendix C.2 Area parameters')
if mibBuilder.loadTexts: rlOspfAreaId.setStatus('current')
if mibBuilder.loadTexts: rlOspfAreaId.setDescription('A 32-bit integer uniquely identifying an area. Area ID 0.0.0.0 is used for the OSPF backbone.')
rlOspfAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 3, 1, 3), RlOspfAuthenticationType().clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlOspfAuthType.setReference('OSPF Version 2, Appendix D Authentication')
if mibBuilder.loadTexts: rlOspfAuthType.setStatus('current')
if mibBuilder.loadTexts: rlOspfAuthType.setDescription('The authentication type specified for an area.')
rlOspfImportAsExtern = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("importExternal", 1), ("importNoExternal", 2), ("importNssa", 3))).clone('importExternal')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlOspfImportAsExtern.setReference('OSPF Version 2, Appendix C.2 Area parameters')
if mibBuilder.loadTexts: rlOspfImportAsExtern.setStatus('current')
if mibBuilder.loadTexts: rlOspfImportAsExtern.setDescription('Indicates if an area is a stub area, NSSA, or standard area. Type-5 AS-external LSAs and type-11 Opaque LSAs are not imported into stub areas or NSSAs. NSSAs import AS-external data as type-7 LSAs')
rlOspfSpfRuns = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfSpfRuns.setStatus('current')
if mibBuilder.loadTexts: rlOspfSpfRuns.setDescription("The number of times that the intra-area route table has been calculated using this area's link state database. This is typically done using Dijkstra's algorithm. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of ospfDiscontinuityTime.")
rlOspfAreaBdrRtrCount = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 3, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfAreaBdrRtrCount.setStatus('current')
if mibBuilder.loadTexts: rlOspfAreaBdrRtrCount.setDescription('The total number of Area Border Routers reachable within this area. This is initially zero and is calculated in each Shortest Path First (SPF) pass.')
rlOspfAsBdrRtrCount = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 3, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfAsBdrRtrCount.setStatus('current')
if mibBuilder.loadTexts: rlOspfAsBdrRtrCount.setDescription('The total number of Autonomous System Border Routers reachable within this area. This is initially zero and is calculated in each SPF pass.')
rlOspfAreaLsaCount = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 3, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfAreaLsaCount.setStatus('current')
if mibBuilder.loadTexts: rlOspfAreaLsaCount.setDescription("The total number of link state advertisements in this area's link state database, excluding AS-external LSAs.")
rlOspfAreaLsaCksumSum = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfAreaLsaCksumSum.setStatus('current')
if mibBuilder.loadTexts: rlOspfAreaLsaCksumSum.setDescription("The 32-bit sum of the link state advertisements' LS checksums contained in this area's link state database. This sum excludes external (LS type-5) link state advertisements. The sum can be used to determine if there has been a change in a router's link state database, and to compare the link state database of two routers. The value should be treated as unsigned when comparing two sums of checksums.")
rlOspfAreaSummary = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noAreaSummary", 1), ("sendAreaSummary", 2))).clone('noAreaSummary')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlOspfAreaSummary.setStatus('current')
if mibBuilder.loadTexts: rlOspfAreaSummary.setDescription('The variable ospfAreaSummary controls the import of summary LSAs into stub and NSSA areas. It has no effect on other areas. If it is noAreaSummary, the router will not originate summary LSAs into the stub or NSSA area. It will rely entirely on its default route. If it is sendAreaSummary, the router will both summarize and propagate summary LSAs.')
rlOspfAreaStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 3, 1, 11), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlOspfAreaStatus.setStatus('current')
if mibBuilder.loadTexts: rlOspfAreaStatus.setDescription('This object permits management of the table by facilitating actions such as row creation, construction, and destruction. The value of this object has no effect on whether other objects in this conceptual row can be modified.')
rlOspfAreaNssaTranslatorRole = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("always", 1), ("candidate", 2))).clone('candidate')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlOspfAreaNssaTranslatorRole.setStatus('current')
if mibBuilder.loadTexts: rlOspfAreaNssaTranslatorRole.setDescription("Indicates an NSSA border router's ability to perform NSSA translation of type-7 LSAs into type-5 LSAs.")
rlOspfAreaNssaTranslatorState = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("elected", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfAreaNssaTranslatorState.setStatus('current')
if mibBuilder.loadTexts: rlOspfAreaNssaTranslatorState.setDescription("Indicates if and how an NSSA border router is performing NSSA translation of type-7 LSAs into type-5 LSAs. When this object is set to enabled, the NSSA Border router's OspfAreaNssaExtTranslatorRole has been set to always. When this object is set to elected, a candidate NSSA Border router is Translating type-7 LSAs into type-5. When this object is set to disabled, a candidate NSSA border router is NOT translating type-7 LSAs into type-5.")
rlOspfAreaNssaTranslatorStabilityInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 3, 1, 14), PositiveInteger().clone(40)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlOspfAreaNssaTranslatorStabilityInterval.setStatus('current')
if mibBuilder.loadTexts: rlOspfAreaNssaTranslatorStabilityInterval.setDescription('The number of seconds after an elected translator determines its services are no longer required, that it should continue to perform its translation duties.')
rlOspfAreaNssaTranslatorEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfAreaNssaTranslatorEvents.setStatus('current')
if mibBuilder.loadTexts: rlOspfAreaNssaTranslatorEvents.setDescription('Indicates the number of translator state changes that have occurred since the last boot-up. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of ospfDiscontinuityTime.')
rlOspfAreaAdminStat = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 3, 1, 16), Status().clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlOspfAreaAdminStat.setStatus('current')
if mibBuilder.loadTexts: rlOspfAreaAdminStat.setDescription("The OSPF Area's administrative status. The value formed on the area, and the in- terfaces associated with the area. The value 'disabled' denotes that the area is external to OSPF.")
rlOspfAreaOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 3, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("goingUp", 3), ("goingDown", 4), ("actFailed", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfAreaOperStatus.setStatus('current')
if mibBuilder.loadTexts: rlOspfAreaOperStatus.setDescription('The current operational state of the OSPF Area.')
rlOspfAreaFilterPrefixListIn = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 3, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlOspfAreaFilterPrefixListIn.setStatus('current')
if mibBuilder.loadTexts: rlOspfAreaFilterPrefixListIn.setDescription('The prefix list is applied to prefixes advertised to the specified area from other areas.')
rlOspfAreaFilterPrefixListOut = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 3, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlOspfAreaFilterPrefixListOut.setStatus('current')
if mibBuilder.loadTexts: rlOspfAreaFilterPrefixListOut.setDescription('The prefix list is applied to prefixes advertised out of the specified area to other areas.')
rlOspfStubAreaTable = MibTable((1, 3, 6, 1, 4, 1, 89, 210, 4), )
if mibBuilder.loadTexts: rlOspfStubAreaTable.setReference('OSPF Version 2, Appendix C.2, Area Parameters')
if mibBuilder.loadTexts: rlOspfStubAreaTable.setStatus('current')
if mibBuilder.loadTexts: rlOspfStubAreaTable.setDescription('The set of metrics that will be advertised by a default Area Border Router into a stub area.')
rlOspfStubAreaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 210, 4, 1), ).setIndexNames((0, "RADLAN-OSPF-MIB", "rlOspfStubProcessId"), (0, "RADLAN-OSPF-MIB", "rlOspfStubAreaId"), (0, "RADLAN-OSPF-MIB", "rlOspfStubTOS"))
if mibBuilder.loadTexts: rlOspfStubAreaEntry.setReference('OSPF Version 2, Appendix C.2, Area Parameters')
if mibBuilder.loadTexts: rlOspfStubAreaEntry.setStatus('current')
if mibBuilder.loadTexts: rlOspfStubAreaEntry.setDescription('The metric for a given Type of Service that will be advertised by a default Area Border Router into a stub area. Information in this table is persistent and when this object is written the entity SHOULD save the change to non-volatile storage.')
rlOspfStubProcessId = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 4, 1, 1), RlOspfProcessID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfStubProcessId.setStatus('current')
if mibBuilder.loadTexts: rlOspfStubProcessId.setDescription('A 32-bit integer uniquely identifying an OSPF process.')
rlOspfStubAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 4, 1, 2), AreaID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfStubAreaId.setStatus('current')
if mibBuilder.loadTexts: rlOspfStubAreaId.setDescription('The 32-bit identifier for the stub area. On creation, this can be derived from the instance.')
rlOspfStubTOS = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 4, 1, 3), TOSType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfStubTOS.setStatus('current')
if mibBuilder.loadTexts: rlOspfStubTOS.setDescription('The Type of Service associated with the metric. On creation, this can be derived from the instance.')
rlOspfStubMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 4, 1, 4), BigMetric()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlOspfStubMetric.setStatus('current')
if mibBuilder.loadTexts: rlOspfStubMetric.setDescription('The metric value applied at the indicated Type of Service. By default, this equals the least metric at the Type of Service among the interfaces to other areas.')
rlOspfStubStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 4, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlOspfStubStatus.setStatus('current')
if mibBuilder.loadTexts: rlOspfStubStatus.setDescription('This object permits management of the table by facilitating actions such as row creation, construction, and destruction. The value of this object has no effect on whether other objects in this conceptual row can be modified.')
rlOspfStubMetricType = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ospfMetric", 1), ("comparableCost", 2), ("nonComparable", 3))).clone('ospfMetric')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlOspfStubMetricType.setStatus('current')
if mibBuilder.loadTexts: rlOspfStubMetricType.setDescription('This variable displays the type of metric advertised as a default route.')
rlOspfLsdbTable = MibTable((1, 3, 6, 1, 4, 1, 89, 210, 5), )
if mibBuilder.loadTexts: rlOspfLsdbTable.setReference('OSPF Version 2, Section 12 Link State Advertisements')
if mibBuilder.loadTexts: rlOspfLsdbTable.setStatus('current')
if mibBuilder.loadTexts: rlOspfLsdbTable.setDescription("The OSPF Process's link state database (LSDB). The LSDB contains the link state advertisements from throughout the areas that the device is attached to.")
rlOspfLsdbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 210, 5, 1), ).setIndexNames((0, "RADLAN-OSPF-MIB", "rlOspfLsdbProcessId"), (0, "RADLAN-OSPF-MIB", "rlOspfLsdbAreaId"), (0, "RADLAN-OSPF-MIB", "rlOspfLsdbType"), (0, "RADLAN-OSPF-MIB", "rlOspfLsdbLsid"), (0, "RADLAN-OSPF-MIB", "rlOspfLsdbRouterId"))
if mibBuilder.loadTexts: rlOspfLsdbEntry.setStatus('current')
if mibBuilder.loadTexts: rlOspfLsdbEntry.setDescription('A single link state advertisement.')
rlOspfLsdbProcessId = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 5, 1, 1), RlOspfProcessID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfLsdbProcessId.setStatus('current')
if mibBuilder.loadTexts: rlOspfLsdbProcessId.setDescription('A 32-bit integer uniquely identifying an OSPF process.')
rlOspfLsdbAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 5, 1, 2), AreaID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfLsdbAreaId.setReference('OSPF Version 2, Appendix C.2 Area parameters')
if mibBuilder.loadTexts: rlOspfLsdbAreaId.setStatus('current')
if mibBuilder.loadTexts: rlOspfLsdbAreaId.setDescription('The 32-bit identifier of the area from which the LSA was received.')
rlOspfLsdbType = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 10))).clone(namedValues=NamedValues(("routerLink", 1), ("networkLink", 2), ("summaryLink", 3), ("asSummaryLink", 4), ("asExternalLink", 5), ("multicastLink", 6), ("nssaExternalLink", 7), ("areaOpaqueLink", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfLsdbType.setReference('OSPF Version 2, Appendix A.4.1 The Link State Advertisement header')
if mibBuilder.loadTexts: rlOspfLsdbType.setStatus('current')
if mibBuilder.loadTexts: rlOspfLsdbType.setDescription('The type of the link state advertisement. Each link state type has a separate advertisement format. Note: External link state advertisements are permitted for backward compatibility, but should be displayed in the ospfAsLsdbTable rather than here.')
rlOspfLsdbLsid = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 5, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfLsdbLsid.setReference('OSPF Version 2, Section 12.1.4 Link State ID')
if mibBuilder.loadTexts: rlOspfLsdbLsid.setStatus('current')
if mibBuilder.loadTexts: rlOspfLsdbLsid.setDescription('The Link State ID is an LS Type Specific field containing either a Router ID or an IP address; it identifies the piece of the routing domain that is being described by the advertisement.')
rlOspfLsdbRouterId = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 5, 1, 5), RouterID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfLsdbRouterId.setReference('OSPF Version 2, Appendix C.1 Global parameters')
if mibBuilder.loadTexts: rlOspfLsdbRouterId.setStatus('current')
if mibBuilder.loadTexts: rlOspfLsdbRouterId.setDescription('The 32-bit number that uniquely identifies the originating router in the Autonomous System.')
rlOspfLsdbSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 5, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfLsdbSequence.setReference('OSPF Version 2, Section 12.1.6 LS sequence number')
if mibBuilder.loadTexts: rlOspfLsdbSequence.setStatus('current')
if mibBuilder.loadTexts: rlOspfLsdbSequence.setDescription("The sequence number field is a signed 32-bit integer. It starts with the value '80000001'h, or -'7FFFFFFF'h, and increments until '7FFFFFFF'h. Thus, a typical sequence number will be very negative. It is used to detect old and duplicate Link State Advertisements. The space of sequence numbers is linearly ordered. The larger the sequence number, the more recent the advertisement.")
rlOspfLsdbAge = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 5, 1, 7), Integer32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfLsdbAge.setReference('OSPF Version 2, Section 12.1.1 LS age')
if mibBuilder.loadTexts: rlOspfLsdbAge.setStatus('current')
if mibBuilder.loadTexts: rlOspfLsdbAge.setDescription('This field is the age of the link state advertisement in seconds.')
rlOspfLsdbChecksum = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 5, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfLsdbChecksum.setReference('OSPF Version 2, Section 12.1.7 LS checksum')
if mibBuilder.loadTexts: rlOspfLsdbChecksum.setStatus('current')
if mibBuilder.loadTexts: rlOspfLsdbChecksum.setDescription("This field is the checksum of the complete contents of the advertisement, excepting the age field. The age field is excepted so that an advertisement's age can be incremented without updating the checksum. The checksum used is the same that is used for ISO connectionless datagrams; it is commonly referred to as the Fletcher checksum.")
rlOspfLsdbAdvertisement = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 5, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfLsdbAdvertisement.setReference('OSPF Version 2, Section 12 Link State Advertisements')
if mibBuilder.loadTexts: rlOspfLsdbAdvertisement.setStatus('current')
if mibBuilder.loadTexts: rlOspfLsdbAdvertisement.setDescription('The entire link state advertisement, including its header. Note that for variable length LSAs, SNMP agents may not be able to return the largest string size.')
rlOspfAreaRangeTable = MibTable((1, 3, 6, 1, 4, 1, 89, 210, 6), )
if mibBuilder.loadTexts: rlOspfAreaRangeTable.setReference('OSPF Version 2, Appendix C.2 Area parameters')
if mibBuilder.loadTexts: rlOspfAreaRangeTable.setStatus('obsolete')
if mibBuilder.loadTexts: rlOspfAreaRangeTable.setDescription('The Address Range Table acts as an adjunct to the Area Table. It describes those Address Range Summaries that are configured to be propagated from an Area to reduce the amount of information about it that is known beyond its borders. It contains a set of IP address ranges specified by an IP address/IP network mask pair. For example, class B address range of X.X.X.X with a network mask of 255.255.0.0 includes all IP addresses from X.X.0.0 to X.X.255.255. Note that this table is obsoleted and is replaced by the Area Aggregate Table.')
rlOspfAreaRangeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 210, 6, 1), ).setIndexNames((0, "RADLAN-OSPF-MIB", "rlOspfAreaRangeProcessId"), (0, "RADLAN-OSPF-MIB", "rlOspfAreaRangeAreaId"), (0, "RADLAN-OSPF-MIB", "rlOspfAreaRangeNet"))
if mibBuilder.loadTexts: rlOspfAreaRangeEntry.setReference('OSPF Version 2, Appendix C.2 Area parameters')
if mibBuilder.loadTexts: rlOspfAreaRangeEntry.setStatus('obsolete')
if mibBuilder.loadTexts: rlOspfAreaRangeEntry.setDescription('A single area address range. Information in this table is persistent and when this object is written the entity SHOULD save the change to non-volatile storage.')
rlOspfAreaRangeProcessId = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 6, 1, 1), RlOspfProcessID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfAreaRangeProcessId.setStatus('obsolete')
if mibBuilder.loadTexts: rlOspfAreaRangeProcessId.setDescription('A 32-bit integer uniquely identifying an OSPF process.')
rlOspfAreaRangeAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 6, 1, 2), AreaID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfAreaRangeAreaId.setReference('OSPF Version 2, Appendix C.2 Area parameters')
if mibBuilder.loadTexts: rlOspfAreaRangeAreaId.setStatus('obsolete')
if mibBuilder.loadTexts: rlOspfAreaRangeAreaId.setDescription('The area that the address range is to be found within.')
rlOspfAreaRangeNet = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 6, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfAreaRangeNet.setReference('OSPF Version 2, Appendix C.2 Area parameters')
if mibBuilder.loadTexts: rlOspfAreaRangeNet.setStatus('obsolete')
if mibBuilder.loadTexts: rlOspfAreaRangeNet.setDescription('The IP address of the net or subnet indicated by the range.')
rlOspfAreaRangeMask = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 6, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlOspfAreaRangeMask.setReference('OSPF Version 2, Appendix C.2 Area parameters')
if mibBuilder.loadTexts: rlOspfAreaRangeMask.setStatus('obsolete')
if mibBuilder.loadTexts: rlOspfAreaRangeMask.setDescription('The subnet mask that pertains to the net or subnet.')
rlOspfAreaRangeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 6, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlOspfAreaRangeStatus.setStatus('obsolete')
if mibBuilder.loadTexts: rlOspfAreaRangeStatus.setDescription('This object permits management of the table by facilitating actions such as row creation, construction, and destruction. The value of this object has no effect on whether other objects in this conceptual row can be modified.')
rlOspfAreaRangeEffect = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("advertiseMatching", 1), ("doNotAdvertiseMatching", 2))).clone('advertiseMatching')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlOspfAreaRangeEffect.setStatus('obsolete')
if mibBuilder.loadTexts: rlOspfAreaRangeEffect.setDescription("Subnets subsumed by ranges either trigger the advertisement of the indicated summary (advertiseMatching) or result in the subnet's not being advertised at all outside the area.")
rlOspfHostTable = MibTable((1, 3, 6, 1, 4, 1, 89, 210, 7), )
if mibBuilder.loadTexts: rlOspfHostTable.setReference('OSPF Version 2, Appendix C.7 Host route parameters')
if mibBuilder.loadTexts: rlOspfHostTable.setStatus('current')
if mibBuilder.loadTexts: rlOspfHostTable.setDescription('The Host/Metric Table indicates what hosts are directly attached to the router, what metrics and types of service should be advertised for them, and what areas they are found within.')
rlOspfHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 210, 7, 1), ).setIndexNames((0, "RADLAN-OSPF-MIB", "rlOspfHostProcessId"), (0, "RADLAN-OSPF-MIB", "rlOspfHostIpAddress"), (0, "RADLAN-OSPF-MIB", "rlOspfHostTOS"))
if mibBuilder.loadTexts: rlOspfHostEntry.setStatus('current')
if mibBuilder.loadTexts: rlOspfHostEntry.setDescription('A metric to be advertised, for a given type of service, when a given host is reachable. Information in this table is persistent and when this object is written the entity SHOULD save the change to non-volatile storage.')
rlOspfHostProcessId = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 7, 1, 1), RlOspfProcessID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfHostProcessId.setStatus('current')
if mibBuilder.loadTexts: rlOspfHostProcessId.setDescription('A 32-bit integer uniquely identifying an OSPF process.')
rlOspfHostIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 7, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfHostIpAddress.setReference('OSPF Version 2, Appendix C.7 Host route parameters')
if mibBuilder.loadTexts: rlOspfHostIpAddress.setStatus('current')
if mibBuilder.loadTexts: rlOspfHostIpAddress.setDescription('The IP address of the host.')
rlOspfHostTOS = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 7, 1, 3), TOSType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfHostTOS.setReference('OSPF Version 2, Appendix C.7 Host route parameters')
if mibBuilder.loadTexts: rlOspfHostTOS.setStatus('current')
if mibBuilder.loadTexts: rlOspfHostTOS.setDescription('The Type of Service of the route being configured.')
rlOspfHostMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 7, 1, 4), Metric()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlOspfHostMetric.setReference('OSPF Version 2, Appendix C.7 Host route parameters')
if mibBuilder.loadTexts: rlOspfHostMetric.setStatus('current')
if mibBuilder.loadTexts: rlOspfHostMetric.setDescription('The metric to be advertised.')
rlOspfHostStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 7, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlOspfHostStatus.setStatus('current')
if mibBuilder.loadTexts: rlOspfHostStatus.setDescription('This object permits management of the table by facilitating actions such as row creation, construction, and destruction. The value of this object has no effect on whether other objects in this conceptual row can be modified.')
rlOspfHostAreaID = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 7, 1, 6), AreaID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfHostAreaID.setReference('OSPF Version 2, Appendix C.7 Host parameters')
if mibBuilder.loadTexts: rlOspfHostAreaID.setStatus('deprecated')
if mibBuilder.loadTexts: rlOspfHostAreaID.setDescription('The OSPF area to which the host belongs. Deprecated by ospfHostCfgAreaID.')
rlOspfHostCfgAreaID = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 7, 1, 7), AreaID()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlOspfHostCfgAreaID.setReference('OSPF Version 2, Appendix C.7 Host parameters')
if mibBuilder.loadTexts: rlOspfHostCfgAreaID.setStatus('current')
if mibBuilder.loadTexts: rlOspfHostCfgAreaID.setDescription('To configure the OSPF area to which the host belongs.')
rlOspfIfTable = MibTable((1, 3, 6, 1, 4, 1, 89, 210, 8), )
if mibBuilder.loadTexts: rlOspfIfTable.setReference('OSPF Version 2, Appendix C.3 Router interface parameters')
if mibBuilder.loadTexts: rlOspfIfTable.setStatus('current')
if mibBuilder.loadTexts: rlOspfIfTable.setDescription('The OSPF Interface Table describes the interfaces from the viewpoint of OSPF. It augments the ipAddrTable with OSPF specific information.')
rlOspfIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 210, 8, 1), ).setIndexNames((0, "RADLAN-OSPF-MIB", "rlOspfIfProcessId"), (0, "RADLAN-OSPF-MIB", "rlOspfIfIpAddress"), (0, "RADLAN-OSPF-MIB", "rlOspfAddressLessIf"))
if mibBuilder.loadTexts: rlOspfIfEntry.setStatus('current')
if mibBuilder.loadTexts: rlOspfIfEntry.setDescription('The OSPF interface entry describes one interface from the viewpoint of OSPF. Information in this table is persistent and when this object is written the entity SHOULD save the change to non-volatile storage.')
rlOspfIfProcessId = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 8, 1, 1), RlOspfProcessID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfIfProcessId.setStatus('current')
if mibBuilder.loadTexts: rlOspfIfProcessId.setDescription('A 32-bit integer uniquely identifying an OSPF process.')
rlOspfIfIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 8, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfIfIpAddress.setStatus('current')
if mibBuilder.loadTexts: rlOspfIfIpAddress.setDescription('The IP address of this OSPF interface.')
rlOspfAddressLessIf = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 8, 1, 3), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfAddressLessIf.setStatus('current')
if mibBuilder.loadTexts: rlOspfAddressLessIf.setDescription('For the purpose of easing the instancing of addressed and addressless interfaces; this variable takes the value 0 on interfaces with IP addresses and the corresponding value of ifIndex for interfaces having no IP address.')
rlOspfIfAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 8, 1, 4), AreaID().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlOspfIfAreaId.setStatus('current')
if mibBuilder.loadTexts: rlOspfIfAreaId.setDescription('A 32-bit integer uniquely identifying the area to which the interface connects. Area ID 0.0.0.0 is used for the OSPF backbone.')
rlOspfIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 8, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 5))).clone(namedValues=NamedValues(("broadcast", 1), ("nbma", 2), ("pointToPoint", 3), ("pointToMultipoint", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlOspfIfType.setStatus('current')
if mibBuilder.loadTexts: rlOspfIfType.setDescription("The OSPF interface type. By way of a default, this field may be intuited from the corresponding value of ifType. Broadcast LANs, such as Ethernet and IEEE 802.5, take the value 'broadcast', X.25 and similar technologies take the value 'nbma', and links that are definitively point to point take the value 'pointToPoint'.")
rlOspfIfAdminStat = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 8, 1, 6), Status().clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlOspfIfAdminStat.setStatus('current')
if mibBuilder.loadTexts: rlOspfIfAdminStat.setDescription("The OSPF interface's administrative status. The value formed on the interface, and the interface will be advertised as an internal route to some area. The value 'disabled' denotes that the interface is external to OSPF.")
rlOspfIfRtrPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 8, 1, 7), DesignatedRouterPriority().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlOspfIfRtrPriority.setStatus('current')
if mibBuilder.loadTexts: rlOspfIfRtrPriority.setDescription('The priority of this interface. Used in multi-access networks, this field is used in the designated router election algorithm. The value 0 signifies that the router is not eligible to become the designated router on this particular network. In the event of a tie in this value, routers will use their Router ID as a tie breaker.')
rlOspfIfTransitDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 8, 1, 8), RlOspfUpToRefreshIntervalTC().clone(1)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlOspfIfTransitDelay.setStatus('current')
if mibBuilder.loadTexts: rlOspfIfTransitDelay.setDescription('The estimated number of seconds it takes to transmit a link state update packet over this interface. Note that the minimal value SHOULD be 1 second.')
rlOspfIfRetransInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 8, 1, 9), RlOspfUpToRefreshIntervalTC().clone(5)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlOspfIfRetransInterval.setStatus('current')
if mibBuilder.loadTexts: rlOspfIfRetransInterval.setDescription('The number of seconds between link state advertisement retransmissions, for adjacencies belonging to this interface. This value is also used when retransmitting database description and Link State request packets. Note that minimal value SHOULD be 1 second.')
rlOspfIfHelloInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 8, 1, 10), HelloRange().clone(10)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlOspfIfHelloInterval.setStatus('current')
if mibBuilder.loadTexts: rlOspfIfHelloInterval.setDescription('The length of time, in seconds, between the Hello packets that the router sends on the interface. This value must be the same for all routers attached to a common network.')
rlOspfIfRtrDeadInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 8, 1, 11), RlOspfDeadIntervalRangeTC().clone(40)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlOspfIfRtrDeadInterval.setStatus('current')
if mibBuilder.loadTexts: rlOspfIfRtrDeadInterval.setDescription("The number of seconds that a router's Hello packets have not been seen before its neighbors declare the router down. This should be some multiple of the Hello interval. This value must be the same for all routers attached to a common network.")
rlOspfIfPollInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 8, 1, 12), PositiveInteger().clone(120)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlOspfIfPollInterval.setStatus('current')
if mibBuilder.loadTexts: rlOspfIfPollInterval.setDescription('The larger time interval, in seconds, between the Hello packets sent to an inactive non-broadcast multi-access neighbor.')
rlOspfIfState = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 8, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("down", 1), ("loopback", 2), ("waiting", 3), ("pointToPoint", 4), ("designatedRouter", 5), ("backupDesignatedRouter", 6), ("otherDesignatedRouter", 7))).clone('down')).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfIfState.setStatus('current')
if mibBuilder.loadTexts: rlOspfIfState.setDescription('The OSPF Interface State.')
rlOspfIfDesignatedRouter = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 8, 1, 14), IpAddress().clone(hexValue="00000000")).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfIfDesignatedRouter.setStatus('current')
if mibBuilder.loadTexts: rlOspfIfDesignatedRouter.setDescription('The IP address of the designated router.')
rlOspfIfBackupDesignatedRouter = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 8, 1, 15), IpAddress().clone(hexValue="00000000")).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfIfBackupDesignatedRouter.setStatus('current')
if mibBuilder.loadTexts: rlOspfIfBackupDesignatedRouter.setDescription('The IP address of the backup designated router.')
rlOspfIfEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 8, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfIfEvents.setStatus('current')
if mibBuilder.loadTexts: rlOspfIfEvents.setDescription('The number of times this OSPF interface has changed its state or an error has occurred. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of ospfDiscontinuityTime.')
rlOspfIfAuthKey = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 8, 1, 17), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256)).clone(hexValue="0000000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlOspfIfAuthKey.setReference('OSPF Version 2, Section 9 The Interface Data Structure')
if mibBuilder.loadTexts: rlOspfIfAuthKey.setStatus('current')
if mibBuilder.loadTexts: rlOspfIfAuthKey.setDescription('The cleartext password used as an OSPF authentication key when simplePassword security is enabled. This object does not access any OSPF cryptogaphic (e.g., MD5) authentication key under any circumstance. If the key length is shorter than 8 octets, the agent will left adjust and zero fill to 8 octets. Unauthenticated interfaces need no authentication key, and simple password authentication cannot use a key of more than 8 octets. Note that the use of simplePassword authentication is NOT recommended when there is concern regarding attack upon the OSPF system. SimplePassword authentication is only sufficient to protect against accidental misconfigurations because it re-uses cleartext passwords [RFC1704]. When read, rlOspfIfAuthKey always returns an octet string of length zero.')
rlOspfIfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 8, 1, 18), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlOspfIfStatus.setStatus('current')
if mibBuilder.loadTexts: rlOspfIfStatus.setDescription('This object permits management of the table by facilitating actions such as row creation, construction, and destruction. The value of this object has no effect on whether other objects in this conceptual row can be modified.')
rlOspfIfMulticastForwarding = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 8, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("blocked", 1), ("multicast", 2), ("unicast", 3))).clone('blocked')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlOspfIfMulticastForwarding.setStatus('current')
if mibBuilder.loadTexts: rlOspfIfMulticastForwarding.setDescription('The way multicasts should be forwarded on this interface: not forwarded, forwarded as data link multicasts, or forwarded as data link unicasts. Data link multicasting is not meaningful on point-to-point and NBMA interfaces, and setting ospfMulticastForwarding to 0 effectively disables all multicast forwarding.')
rlOspfIfDemand = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 8, 1, 20), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlOspfIfDemand.setStatus('current')
if mibBuilder.loadTexts: rlOspfIfDemand.setDescription('Indicates whether Demand OSPF procedures (hello suppression to FULL neighbors and setting the DoNotAge flag on propagated LSAs) should be performed on this interface.')
rlOspfIfAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 8, 1, 21), RlOspfAuthenticationType().clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlOspfIfAuthType.setReference('OSPF Version 2, Appendix D Authentication')
if mibBuilder.loadTexts: rlOspfIfAuthType.setStatus('current')
if mibBuilder.loadTexts: rlOspfIfAuthType.setDescription('The authentication type specified for an interface. Note that this object can be used to engage in significant attacks against an OSPF router.')
rlOspfIfLsaCount = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 8, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfIfLsaCount.setStatus('current')
if mibBuilder.loadTexts: rlOspfIfLsaCount.setDescription("The total number of link-local link state advertisements in this interface's link-local link state database.")
rlOspfIfLsaCksumSum = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 8, 1, 23), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfIfLsaCksumSum.setStatus('current')
if mibBuilder.loadTexts: rlOspfIfLsaCksumSum.setDescription("The 32-bit unsigned sum of the Link State Advertisements' LS checksums contained in this interface's link-local link state database. The sum can be used to determine if there has been a change in the interface's link state database and to compare the interface link state database of routers attached to the same subnet.")
rlOspfIfDesignatedRouterId = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 8, 1, 24), RouterID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfIfDesignatedRouterId.setStatus('current')
if mibBuilder.loadTexts: rlOspfIfDesignatedRouterId.setDescription('The Router ID of the designated router.')
rlOspfIfBackupDesignatedRouterId = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 8, 1, 25), RouterID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfIfBackupDesignatedRouterId.setStatus('current')
if mibBuilder.loadTexts: rlOspfIfBackupDesignatedRouterId.setDescription('The Router ID of the backup designated router.')
rlOspfIfOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 8, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("goingUp", 3), ("goingDown", 4), ("actFailed", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfIfOperStatus.setStatus('current')
if mibBuilder.loadTexts: rlOspfIfOperStatus.setDescription('The current operational state of the OSPF interface.')
rlOspfIfAuthKeyChain = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 8, 1, 27), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlOspfIfAuthKeyChain.setStatus('current')
if mibBuilder.loadTexts: rlOspfIfAuthKeyChain.setDescription('The name of the authentication key-chain configured on this interface. The key-chain is a reference to which set of secret keys are to be accessed in order to determine which secret key string to use. The key chain name is not the secret key string password and can also be used in other routing protocols, such as RIP and ISIS.')
rlOspfIfPassive = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 8, 1, 28), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlOspfIfPassive.setStatus('current')
if mibBuilder.loadTexts: rlOspfIfPassive.setDescription('Indicates whether this interface is a passive interface. If set to TRUE, we suppress HELLO packets sent on and received from this interface. We will therefore advertise this interface in our LSAs but not run OSPF protocol over it.')
rlOspfIfLsaRefreshIntvl = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 8, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3599)).clone(1800)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlOspfIfLsaRefreshIntvl.setStatus('current')
if mibBuilder.loadTexts: rlOspfIfLsaRefreshIntvl.setDescription('Self-originated LSAs are periodically reflooded into the routing domain, to add to the robustness of the OSPF protocol. This value determines the interval between refreshes of LSAs that are only flooded over this interface, for example type-9 opaque LSAs, and is defaulted to the OSPF standard default of 1800 seconds (30 minutes).')
rlOspfIfFastHelloMultiplier = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 8, 1, 30), RlOspfFastHelloMultiplierRange().clone(5)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlOspfIfFastHelloMultiplier.setStatus('current')
if mibBuilder.loadTexts: rlOspfIfFastHelloMultiplier.setDescription('The number of Hellos that should be sent within 1 second when using Fast Hellos on this interface. This value does not have to be same for all routers attached to a common network, but it is advisable. Fast Hellos are configured using ospfPmIfRtrDeadInterval.')
rlOspfIfMtuIgnore = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 8, 1, 31), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlOspfIfMtuIgnore.setStatus('current')
if mibBuilder.loadTexts: rlOspfIfMtuIgnore.setDescription('This object controls whether DC-OSPF checks the MTU size on incoming Database Description packets. By default, if the received MTU size in a DB Description packet is higher than the MTU size configured on the incoming interface, the OSPF adjacency will not be established. If the interface is tunneled over, say, an MPLS network, then the administrator may not know the maximum MTU size and so can tell DC-OSPF to ignore the MTU size on incoming DB description packets.')
rlOspfIfNameLookup = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 8, 1, 32), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlOspfIfNameLookup.setStatus('current')
if mibBuilder.loadTexts: rlOspfIfNameLookup.setDescription('A flag to note whether to look up Domain Name System (DNS) names for use in all OSPF show EXEC command displays.')
rlOspfIfIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 8, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfIfIfIndex.setStatus('current')
if mibBuilder.loadTexts: rlOspfIfIfIndex.setDescription('A 32-bit index identifying this interface, or zero if no index value is known. For interfaces having no IP Address this field is automatically set to the value of the address-less interface index field.')
rlOspfIfActualAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 8, 1, 34), RlOspfAuthenticationType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfIfActualAuthType.setStatus('current')
if mibBuilder.loadTexts: rlOspfIfActualAuthType.setDescription('The actual authentication type specified for an interface.')
rlOspfIfMetricTable = MibTable((1, 3, 6, 1, 4, 1, 89, 210, 9), )
if mibBuilder.loadTexts: rlOspfIfMetricTable.setReference('OSPF Version 2, Appendix C.3 Router interface parameters')
if mibBuilder.loadTexts: rlOspfIfMetricTable.setStatus('current')
if mibBuilder.loadTexts: rlOspfIfMetricTable.setDescription('The Metric Table describes the metrics to be advertised for a specified interface at the various types of service. As such, this table is an adjunct of the OSPF Interface Table. Types of service, as defined by RFC 791, have the ability to request low delay, high bandwidth, or reliable linkage. For the purposes of this specification, the measure of bandwidth: Metric = referenceBandwidth / ifSpeed is the default value. The default reference bandwidth is 10^8. For multiple link interfaces, note that ifSpeed is the sum of the individual link speeds. This yields a number having the following typical values: Network Type/bit rate Metric >= 100 MBPS 1 Ethernet/802.3 10 E1 48 T1 (ESF) 65 64 KBPS 1562 56 KBPS 1785 19.2 KBPS 5208 9.6 KBPS 10416 Routes that are not specified use the default (TOS 0) metric. Note that the default reference bandwidth can be configured using the general group object ospfReferenceBandwidth.')
rlOspfIfMetricEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 210, 9, 1), ).setIndexNames((0, "RADLAN-OSPF-MIB", "rlOspfIfMetricProcessId"), (0, "RADLAN-OSPF-MIB", "rlOspfIfMetricIpAddress"), (0, "RADLAN-OSPF-MIB", "rlOspfIfMetricAddressLessIf"), (0, "RADLAN-OSPF-MIB", "rlOspfIfMetricTOS"))
if mibBuilder.loadTexts: rlOspfIfMetricEntry.setReference('OSPF Version 2, Appendix C.3 Router interface parameters')
if mibBuilder.loadTexts: rlOspfIfMetricEntry.setStatus('current')
if mibBuilder.loadTexts: rlOspfIfMetricEntry.setDescription('A particular TOS metric for a non-virtual interface identified by the interface index. Information in this table is persistent and when this object is written the entity SHOULD save the change to non-volatile storage.')
rlOspfIfMetricProcessId = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 9, 1, 1), RlOspfProcessID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfIfMetricProcessId.setStatus('current')
if mibBuilder.loadTexts: rlOspfIfMetricProcessId.setDescription('A 32-bit integer uniquely identifying an OSPF process.')
rlOspfIfMetricIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 9, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfIfMetricIpAddress.setStatus('current')
if mibBuilder.loadTexts: rlOspfIfMetricIpAddress.setDescription('The IP address of this OSPF interface. On row creation, this can be derived from the instance.')
rlOspfIfMetricAddressLessIf = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 9, 1, 3), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfIfMetricAddressLessIf.setStatus('current')
if mibBuilder.loadTexts: rlOspfIfMetricAddressLessIf.setDescription('For the purpose of easing the instancing of addressed and addressless interfaces; this variable takes the value 0 on interfaces with IP addresses and the value of ifIndex for interfaces having no IP address. On row creation, this can be derived from the instance.')
rlOspfIfMetricTOS = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 9, 1, 4), TOSType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfIfMetricTOS.setStatus('current')
if mibBuilder.loadTexts: rlOspfIfMetricTOS.setDescription('The Type of Service metric being referenced. On row creation, this can be derived from the instance.')
rlOspfIfMetricValue = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 9, 1, 5), Metric()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlOspfIfMetricValue.setStatus('current')
if mibBuilder.loadTexts: rlOspfIfMetricValue.setDescription('The metric of using this Type of Service on this interface. The default value of the TOS 0 metric is 10^8 / ifSpeed.')
rlOspfIfMetricStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 9, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlOspfIfMetricStatus.setStatus('current')
if mibBuilder.loadTexts: rlOspfIfMetricStatus.setDescription('This object permits management of the table by facilitating actions such as row creation, construction, and destruction. The value of this object has no effect on whether other objects in this conceptual row can be modified.')
rlOspfVirtIfTable = MibTable((1, 3, 6, 1, 4, 1, 89, 210, 10), )
if mibBuilder.loadTexts: rlOspfVirtIfTable.setReference('OSPF Version 2, Appendix C.4 Virtual link parameters')
if mibBuilder.loadTexts: rlOspfVirtIfTable.setStatus('current')
if mibBuilder.loadTexts: rlOspfVirtIfTable.setDescription("Information about this router's virtual interfaces that the OSPF Process is configured to carry on.")
rlOspfVirtIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 210, 10, 1), ).setIndexNames((0, "RADLAN-OSPF-MIB", "rlOspfVirtIfProcessId"), (0, "RADLAN-OSPF-MIB", "rlOspfVirtIfAreaId"), (0, "RADLAN-OSPF-MIB", "rlOspfVirtIfNeighbor"))
if mibBuilder.loadTexts: rlOspfVirtIfEntry.setStatus('current')
if mibBuilder.loadTexts: rlOspfVirtIfEntry.setDescription('Information about a single virtual interface. Information in this table is persistent and when this object is written the entity SHOULD save the change to non-volatile storage.')
rlOspfVirtIfProcessId = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 10, 1, 1), RlOspfProcessID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfVirtIfProcessId.setStatus('current')
if mibBuilder.loadTexts: rlOspfVirtIfProcessId.setDescription('A 32-bit integer uniquely identifying an OSPF process.')
rlOspfVirtIfAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 10, 1, 2), AreaID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfVirtIfAreaId.setStatus('current')
if mibBuilder.loadTexts: rlOspfVirtIfAreaId.setDescription('The transit area that the virtual link traverses. By definition, this is not 0.0.0.0.')
rlOspfVirtIfNeighbor = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 10, 1, 3), RouterID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfVirtIfNeighbor.setStatus('current')
if mibBuilder.loadTexts: rlOspfVirtIfNeighbor.setDescription('The Router ID of the virtual neighbor.')
rlOspfVirtIfTransitDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 10, 1, 4), RlOspfUpToRefreshIntervalTC().clone(1)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlOspfVirtIfTransitDelay.setStatus('current')
if mibBuilder.loadTexts: rlOspfVirtIfTransitDelay.setDescription('The estimated number of seconds it takes to transmit a Link State update packet over this interface. Note that the minimal value SHOULD be 1 second.')
rlOspfVirtIfRetransInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 10, 1, 5), RlOspfUpToRefreshIntervalTC().clone(5)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlOspfVirtIfRetransInterval.setStatus('current')
if mibBuilder.loadTexts: rlOspfVirtIfRetransInterval.setDescription('The number of seconds between link state avertisement retransmissions, for adjacencies belonging to this interface. This value is also used when retransmitting database description and Link State request packets. This value should be well over the expected round-trip time. Note that the minimal value SHOULD be 1 second.')
rlOspfVirtIfHelloInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 10, 1, 6), HelloRange().clone(10)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlOspfVirtIfHelloInterval.setStatus('current')
if mibBuilder.loadTexts: rlOspfVirtIfHelloInterval.setDescription('The length of time, in seconds, between the Hello packets that the router sends on the interface. This value must be the same for the virtual neighbor.')
rlOspfVirtIfRtrDeadInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 10, 1, 7), RlOspfDeadIntervalRangeTC().clone(60)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlOspfVirtIfRtrDeadInterval.setStatus('current')
if mibBuilder.loadTexts: rlOspfVirtIfRtrDeadInterval.setDescription("The number of seconds that a router's Hello packets have not been seen before its neighbors declare the router down. This should be some multiple of the Hello interval. This value must be the same for the virtual neighbor.")
rlOspfVirtIfState = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 10, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4))).clone(namedValues=NamedValues(("down", 1), ("pointToPoint", 4))).clone('down')).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfVirtIfState.setStatus('current')
if mibBuilder.loadTexts: rlOspfVirtIfState.setDescription('OSPF virtual interface states.')
rlOspfVirtIfEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 10, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfVirtIfEvents.setStatus('current')
if mibBuilder.loadTexts: rlOspfVirtIfEvents.setDescription('The number of state changes or error events on this virtual link. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of ospfDiscontinuityTime.')
rlOspfVirtIfAuthKey = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 10, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256)).clone(hexValue="0000000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlOspfVirtIfAuthKey.setReference('OSPF Version 2, Section 9 The Interface Data Structure')
if mibBuilder.loadTexts: rlOspfVirtIfAuthKey.setStatus('current')
if mibBuilder.loadTexts: rlOspfVirtIfAuthKey.setDescription('The cleartext password used as an OSPF authentication key when simplePassword security is enabled. This object does not access any OSPF cryptogaphic (e.g., MD5) authentication key under any circumstance. If the key length is shorter than 8 octets, the agent will left adjust and zero fill to 8 octets. Unauthenticated interfaces need no authentication key, and simple password authentication cannot use a key of more than 8 octets. Note that the use of simplePassword authentication is NOT recommended when there is concern regarding attack upon the OSPF system. SimplePassword authentication is only sufficient to protect against accidental misconfigurations because it re-uses cleartext passwords. [RFC1704] When read, rlOspfIfAuthKey always returns an octet string of length zero.')
rlOspfVirtIfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 10, 1, 11), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlOspfVirtIfStatus.setStatus('current')
if mibBuilder.loadTexts: rlOspfVirtIfStatus.setDescription('This object permits management of the table by facilitating actions such as row creation, construction, and destruction. The value of this object has no effect on whether other objects in this conceptual row can be modified.')
rlOspfVirtIfAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 10, 1, 12), RlOspfAuthenticationType().clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlOspfVirtIfAuthType.setReference('OSPF Version 2, Appendix E Authentication')
if mibBuilder.loadTexts: rlOspfVirtIfAuthType.setStatus('current')
if mibBuilder.loadTexts: rlOspfVirtIfAuthType.setDescription('The authentication type specified for a virtual interface. Note that this object can be used to engage in significant attacks against an OSPF router.')
rlOspfVirtIfLsaCount = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 10, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfVirtIfLsaCount.setStatus('current')
if mibBuilder.loadTexts: rlOspfVirtIfLsaCount.setDescription("The total number of link-local link state advertisements in this virtual interface's link-local link state database.")
rlOspfVirtIfLsaCksumSum = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 10, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfVirtIfLsaCksumSum.setStatus('current')
if mibBuilder.loadTexts: rlOspfVirtIfLsaCksumSum.setDescription("The 32-bit unsigned sum of the link state advertisements' LS checksums contained in this virtual interface's link-local link state database. The sum can be used to determine if there has been a change in the virtual interface's link state database, and to compare the virtual interface link state database of the virtual neighbors.")
rlOspfVirtIfAuthKeyChain = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 10, 1, 15), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlOspfVirtIfAuthKeyChain.setStatus('current')
if mibBuilder.loadTexts: rlOspfVirtIfAuthKeyChain.setDescription('The name of the authentication key-chain configured on this interface. The key-chain is a reference to which set of secret keys are to be accessed in order to determine which secret key string to use. The key chain name is not the secret key string password and can also be used in other routing protocols, such as RIP and ISIS.')
rlOspfVirtIfAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 10, 1, 16), Status().clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlOspfVirtIfAdminStatus.setStatus('current')
if mibBuilder.loadTexts: rlOspfVirtIfAdminStatus.setDescription('The desired administrative state of this virtual interface.')
rlOspfVirtIfOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 10, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("goingUp", 3), ("goingDown", 4), ("actFailed", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfVirtIfOperStatus.setStatus('current')
if mibBuilder.loadTexts: rlOspfVirtIfOperStatus.setDescription('The current operational state of this virtual interface.')
rlOspfVirtIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 10, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfVirtIfIndex.setStatus('current')
if mibBuilder.loadTexts: rlOspfVirtIfIndex.setDescription('The local index assigned by the OSPF Process to this OSPF virtual interface.')
rlOspfVirtIfActualAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 10, 1, 19), RlOspfAuthenticationType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfVirtIfActualAuthType.setStatus('current')
if mibBuilder.loadTexts: rlOspfVirtIfActualAuthType.setDescription('The actual authentication type specified for a virtual interface.')
rlOspfNbrTable = MibTable((1, 3, 6, 1, 4, 1, 89, 210, 11), )
if mibBuilder.loadTexts: rlOspfNbrTable.setReference('OSPF Version 2, Section 10 The Neighbor Data Structure')
if mibBuilder.loadTexts: rlOspfNbrTable.setStatus('current')
if mibBuilder.loadTexts: rlOspfNbrTable.setDescription('A table describing all non-virtual neighbors in the locality of the OSPF router.')
rlOspfNbrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 210, 11, 1), ).setIndexNames((0, "RADLAN-OSPF-MIB", "rlOspfNbrProcessId"), (0, "RADLAN-OSPF-MIB", "rlOspfNbrIpAddr"), (0, "RADLAN-OSPF-MIB", "rlOspfNbrAddressLessIndex"))
if mibBuilder.loadTexts: rlOspfNbrEntry.setReference('OSPF Version 2, Section 10 The Neighbor Data Structure')
if mibBuilder.loadTexts: rlOspfNbrEntry.setStatus('current')
if mibBuilder.loadTexts: rlOspfNbrEntry.setDescription('The information regarding a single neighbor. Information in this table is persistent and when this object is written the entity SHOULD save the change to non-volatile storage.')
rlOspfNbrProcessId = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 11, 1, 1), RlOspfProcessID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfNbrProcessId.setStatus('current')
if mibBuilder.loadTexts: rlOspfNbrProcessId.setDescription('A 32-bit integer uniquely identifying an OSPF process.')
rlOspfNbrIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 11, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfNbrIpAddr.setStatus('current')
if mibBuilder.loadTexts: rlOspfNbrIpAddr.setDescription("The IP address this neighbor is using in its IP source address. Note that, on addressless links, this will not be 0.0.0.0 but the address of another of the neighbor's interfaces.")
rlOspfNbrAddressLessIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 11, 1, 3), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfNbrAddressLessIndex.setStatus('current')
if mibBuilder.loadTexts: rlOspfNbrAddressLessIndex.setDescription('On an interface having an IP address, zero. On addressless interfaces, the corresponding value of ifIndex in the Internet Standard MIB. On row creation, this can be derived from the instance.')
rlOspfNbrRtrId = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 11, 1, 4), RouterID().clone(hexValue="00000000")).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfNbrRtrId.setStatus('current')
if mibBuilder.loadTexts: rlOspfNbrRtrId.setDescription('A 32-bit integer (represented as a type IpAddress) uniquely identifying the neighboring router in the Autonomous System.')
rlOspfNbrOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 11, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfNbrOptions.setReference('OSPF Version 2, Section 12.1.2 Options')
if mibBuilder.loadTexts: rlOspfNbrOptions.setStatus('current')
if mibBuilder.loadTexts: rlOspfNbrOptions.setDescription("A bit mask corresponding to the neighbor's options field. Bit 0, if set, indicates that the system will operate on Type of Service metrics other than TOS 0. If zero, the neighbor will ignore all metrics except the TOS 0 metric. Bit 1, if set, indicates that the associated area accepts and operates on external information; if zero, it is a stub area. Bit 2, if set, indicates that the system is capable of routing IP multicast datagrams, that is that it implements the multicast extensions to OSPF. Bit 3, if set, indicates that the associated area is an NSSA. These areas are capable of carrying type-7 external advertisements, which are translated into type-5 external advertisements at NSSA borders.")
rlOspfNbrPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 11, 1, 6), DesignatedRouterPriority().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlOspfNbrPriority.setStatus('current')
if mibBuilder.loadTexts: rlOspfNbrPriority.setDescription('The priority of this neighbor in the designated router election algorithm. The value 0 signifies that the neighbor is not eligible to become the designated router on this particular network.')
rlOspfNbrState = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 11, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("down", 1), ("attempt", 2), ("init", 3), ("twoWay", 4), ("exchangeStart", 5), ("exchange", 6), ("loading", 7), ("full", 8))).clone('down')).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfNbrState.setReference('OSPF Version 2, Section 10.1 Neighbor States')
if mibBuilder.loadTexts: rlOspfNbrState.setStatus('current')
if mibBuilder.loadTexts: rlOspfNbrState.setDescription('The state of the relationship with this neighbor.')
rlOspfNbrEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 11, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfNbrEvents.setStatus('current')
if mibBuilder.loadTexts: rlOspfNbrEvents.setDescription('The number of times this neighbor relationship has changed state or an error has occurred. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of ospfDiscontinuityTime.')
rlOspfNbrLsRetransQLen = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 11, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfNbrLsRetransQLen.setStatus('current')
if mibBuilder.loadTexts: rlOspfNbrLsRetransQLen.setDescription('The current length of the retransmission queue.')
rlOspfNbmaNbrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 11, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlOspfNbmaNbrStatus.setStatus('current')
if mibBuilder.loadTexts: rlOspfNbmaNbrStatus.setDescription('This object permits management of the table by facilitating actions such as row creation, construction, and destruction. The value of this object has no effect on whether other objects in this conceptual row can be modified.')
rlOspfNbmaNbrPermanence = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 11, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dynamic", 1), ("permanent", 2))).clone('permanent')).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfNbmaNbrPermanence.setStatus('current')
if mibBuilder.loadTexts: rlOspfNbmaNbrPermanence.setDescription("This variable displays the status of the entry; 'dynamic' and 'permanent' refer to how the neighbor became known.")
rlOspfNbrHelloSuppressed = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 11, 1, 12), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfNbrHelloSuppressed.setStatus('current')
if mibBuilder.loadTexts: rlOspfNbrHelloSuppressed.setDescription('Indicates whether Hellos are being suppressed to the neighbor.')
rlOspfNbrRestartHelperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 11, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notHelping", 1), ("helping", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfNbrRestartHelperStatus.setStatus('current')
if mibBuilder.loadTexts: rlOspfNbrRestartHelperStatus.setDescription('Indicates whether the router is acting as a graceful restart helper for the neighbor.')
rlOspfNbrRestartHelperAge = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 11, 1, 14), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfNbrRestartHelperAge.setStatus('current')
if mibBuilder.loadTexts: rlOspfNbrRestartHelperAge.setDescription('Remaining time in current OSPF graceful restart interval, if the router is acting as a restart helper for the neighbor.')
rlOspfNbrRestartHelperExitReason = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 11, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("inProgress", 2), ("completed", 3), ("timedOut", 4), ("topologyChanged", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfNbrRestartHelperExitReason.setStatus('current')
if mibBuilder.loadTexts: rlOspfNbrRestartHelperExitReason.setDescription('Describes the outcome of the last attempt at acting as a graceful restart helper for the neighbor.')
rlOspfNbrDeadTime = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 11, 1, 16), PositiveInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfNbrDeadTime.setStatus('current')
if mibBuilder.loadTexts: rlOspfNbrDeadTime.setDescription('The time remaining in seconds within which we need to receive a hello packet from the neighbor or we declare the adjacency down. If fast hellos area in use, this value is always set to 1. If the oper_status is down or ospfPmNbrState is DOWN, then the value is set to zero and the field is not valid.')
rlOspfNbrAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 11, 1, 17), AreaID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfNbrAreaId.setStatus('current')
if mibBuilder.loadTexts: rlOspfNbrAreaId.setDescription('The area to which the neighbor belongs. If the oper_status is down, then this value is set to zero and the field is not valid.')
rlOspfNbrIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 11, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfNbrIfIndex.setStatus('current')
if mibBuilder.loadTexts: rlOspfNbrIfIndex.setDescription('The interface index to whitch the neighbor is connected.')
rlOspfNbrIfIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 11, 1, 19), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfNbrIfIpAddr.setStatus('current')
if mibBuilder.loadTexts: rlOspfNbrIfIpAddr.setDescription('The interface IP address to whitch the neighbor is connected.')
rlOspfVirtNbrTable = MibTable((1, 3, 6, 1, 4, 1, 89, 210, 12), )
if mibBuilder.loadTexts: rlOspfVirtNbrTable.setReference('OSPF Version 2, Section 15 Virtual Links')
if mibBuilder.loadTexts: rlOspfVirtNbrTable.setStatus('current')
if mibBuilder.loadTexts: rlOspfVirtNbrTable.setDescription('This table describes all virtual neighbors. Since virtual links are configured in the Virtual Interface Table, this table is read-only.')
rlOspfVirtNbrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 210, 12, 1), ).setIndexNames((0, "RADLAN-OSPF-MIB", "rlOspfVirtNbrProcessId"), (0, "RADLAN-OSPF-MIB", "rlOspfVirtNbrArea"), (0, "RADLAN-OSPF-MIB", "rlOspfVirtNbrRtrId"))
if mibBuilder.loadTexts: rlOspfVirtNbrEntry.setStatus('current')
if mibBuilder.loadTexts: rlOspfVirtNbrEntry.setDescription('Virtual neighbor information.')
rlOspfVirtNbrProcessId = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 12, 1, 1), RlOspfProcessID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfVirtNbrProcessId.setStatus('current')
if mibBuilder.loadTexts: rlOspfVirtNbrProcessId.setDescription('A 32-bit integer uniquely identifying an OSPF process.')
rlOspfVirtNbrArea = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 12, 1, 2), AreaID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfVirtNbrArea.setStatus('current')
if mibBuilder.loadTexts: rlOspfVirtNbrArea.setDescription('The Transit Area Identifier.')
rlOspfVirtNbrRtrId = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 12, 1, 3), RouterID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfVirtNbrRtrId.setStatus('current')
if mibBuilder.loadTexts: rlOspfVirtNbrRtrId.setDescription('A 32-bit integer uniquely identifying the neighboring router in the Autonomous System.')
rlOspfVirtNbrIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 12, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfVirtNbrIpAddr.setStatus('current')
if mibBuilder.loadTexts: rlOspfVirtNbrIpAddr.setDescription('The IP address this virtual neighbor is using.')
rlOspfVirtNbrOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 12, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfVirtNbrOptions.setStatus('current')
if mibBuilder.loadTexts: rlOspfVirtNbrOptions.setDescription("A bit mask corresponding to the neighbor's options field. Bit 1, if set, indicates that the system will operate on Type of Service metrics other than TOS 0. If zero, the neighbor will ignore all metrics except the TOS 0 metric. Bit 2, if set, indicates that the system is network multicast capable, i.e., that it implements OSPF multicast routing.")
rlOspfVirtNbrState = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 12, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("down", 1), ("attempt", 2), ("init", 3), ("twoWay", 4), ("exchangeStart", 5), ("exchange", 6), ("loading", 7), ("full", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfVirtNbrState.setStatus('current')
if mibBuilder.loadTexts: rlOspfVirtNbrState.setDescription('The state of the virtual neighbor relationship.')
rlOspfVirtNbrEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 12, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfVirtNbrEvents.setStatus('current')
if mibBuilder.loadTexts: rlOspfVirtNbrEvents.setDescription('The number of times this virtual link has changed its state or an error has occurred. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of ospfDiscontinuityTime.')
rlOspfVirtNbrLsRetransQLen = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 12, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfVirtNbrLsRetransQLen.setStatus('current')
if mibBuilder.loadTexts: rlOspfVirtNbrLsRetransQLen.setDescription('The current length of the retransmission queue.')
rlOspfVirtNbrHelloSuppressed = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 12, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfVirtNbrHelloSuppressed.setStatus('current')
if mibBuilder.loadTexts: rlOspfVirtNbrHelloSuppressed.setDescription('Indicates whether Hellos are being suppressed to the neighbor.')
rlOspfVirtNbrRestartHelperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 12, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notHelping", 1), ("helping", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfVirtNbrRestartHelperStatus.setStatus('current')
if mibBuilder.loadTexts: rlOspfVirtNbrRestartHelperStatus.setDescription('Indicates whether the router is acting as a graceful restart helper for the neighbor.')
rlOspfVirtNbrRestartHelperAge = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 12, 1, 11), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfVirtNbrRestartHelperAge.setStatus('current')
if mibBuilder.loadTexts: rlOspfVirtNbrRestartHelperAge.setDescription('Remaining time in current OSPF graceful restart interval, if the router is acting as a restart helper for the neighbor.')
rlOspfVirtNbrRestartHelperExitReason = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 12, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("inProgress", 2), ("completed", 3), ("timedOut", 4), ("topologyChanged", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfVirtNbrRestartHelperExitReason.setStatus('current')
if mibBuilder.loadTexts: rlOspfVirtNbrRestartHelperExitReason.setDescription('Describes the outcome of the last attempt at acting as a graceful restart helper for the neighbor.')
rlOspfVirtNbrDeadTime = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 12, 1, 13), PositiveInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfVirtNbrDeadTime.setStatus('current')
if mibBuilder.loadTexts: rlOspfVirtNbrDeadTime.setDescription('The time remaining in seconds within which we need to receive a hello packet from the neighbor or we declare the adjacency down. If fast hellos area in use, this value is always set to 1. If the oper_status is down or ospfPmVirtNbrState is DOWN, then the value is set to zero and the field is not valid.')
rlOspfExtLsdbTable = MibTable((1, 3, 6, 1, 4, 1, 89, 210, 13), )
if mibBuilder.loadTexts: rlOspfExtLsdbTable.setReference('OSPF Version 2, Section 12 Link State Advertisements')
if mibBuilder.loadTexts: rlOspfExtLsdbTable.setStatus('deprecated')
if mibBuilder.loadTexts: rlOspfExtLsdbTable.setDescription("The OSPF Process's external LSA link state database. This table is identical to the OSPF LSDB Table in format, but contains only external link state advertisements. The purpose is to allow external LSAs to be displayed once for the router rather than once in each non-stub area. Note that external LSAs are also in the AS-scope link state database.")
rlOspfExtLsdbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 210, 13, 1), ).setIndexNames((0, "RADLAN-OSPF-MIB", "rlOspfExtLsdbProcessId"), (0, "RADLAN-OSPF-MIB", "rlOspfExtLsdbType"), (0, "RADLAN-OSPF-MIB", "rlOspfExtLsdbLsid"), (0, "RADLAN-OSPF-MIB", "rlOspfExtLsdbRouterId"))
if mibBuilder.loadTexts: rlOspfExtLsdbEntry.setStatus('deprecated')
if mibBuilder.loadTexts: rlOspfExtLsdbEntry.setDescription('A single link state advertisement.')
rlOspfExtLsdbProcessId = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 13, 1, 1), RlOspfProcessID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfExtLsdbProcessId.setStatus('current')
if mibBuilder.loadTexts: rlOspfExtLsdbProcessId.setDescription('A 32-bit integer uniquely identifying an OSPF process.')
rlOspfExtLsdbType = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 13, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5))).clone(namedValues=NamedValues(("asExternalLink", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfExtLsdbType.setReference('OSPF Version 2, Appendix A.4.1 The Link State Advertisement header')
if mibBuilder.loadTexts: rlOspfExtLsdbType.setStatus('deprecated')
if mibBuilder.loadTexts: rlOspfExtLsdbType.setDescription('The type of the link state advertisement. Each link state type has a separate advertisement format.')
rlOspfExtLsdbLsid = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 13, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfExtLsdbLsid.setReference('OSPF Version 2, Section 12.1.4 Link State ID')
if mibBuilder.loadTexts: rlOspfExtLsdbLsid.setStatus('deprecated')
if mibBuilder.loadTexts: rlOspfExtLsdbLsid.setDescription('The Link State ID is an LS Type Specific field containing either a Router ID or an IP address; it identifies the piece of the routing domain that is being described by the advertisement.')
rlOspfExtLsdbRouterId = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 13, 1, 4), RouterID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfExtLsdbRouterId.setReference('OSPF Version 2, Appendix C.1 Global parameters')
if mibBuilder.loadTexts: rlOspfExtLsdbRouterId.setStatus('deprecated')
if mibBuilder.loadTexts: rlOspfExtLsdbRouterId.setDescription('The 32-bit number that uniquely identifies the originating router in the Autonomous System.')
rlOspfExtLsdbSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 13, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfExtLsdbSequence.setReference('OSPF Version 2, Section 12.1.6 LS sequence number')
if mibBuilder.loadTexts: rlOspfExtLsdbSequence.setStatus('deprecated')
if mibBuilder.loadTexts: rlOspfExtLsdbSequence.setDescription("The sequence number field is a signed 32-bit integer. It starts with the value '80000001'h, or -'7FFFFFFF'h, and increments until '7FFFFFFF'h. Thus, a typical sequence number will be very negative. It is used to detect old and duplicate link state advertisements. The space of sequence numbers is linearly ordered. The larger the sequence number, the more recent the advertisement.")
rlOspfExtLsdbAge = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 13, 1, 6), Integer32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfExtLsdbAge.setReference('OSPF Version 2, Section 12.1.1 LS age')
if mibBuilder.loadTexts: rlOspfExtLsdbAge.setStatus('deprecated')
if mibBuilder.loadTexts: rlOspfExtLsdbAge.setDescription('This field is the age of the link state advertisement in seconds.')
rlOspfExtLsdbChecksum = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 13, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfExtLsdbChecksum.setReference('OSPF Version 2, Section 12.1.7 LS checksum')
if mibBuilder.loadTexts: rlOspfExtLsdbChecksum.setStatus('deprecated')
if mibBuilder.loadTexts: rlOspfExtLsdbChecksum.setDescription("This field is the checksum of the complete contents of the advertisement, excepting the age field. The age field is excepted so that an advertisement's age can be incremented without updating the checksum. The checksum used is the same that is used for ISO connectionless datagrams; it is commonly referred to as the Fletcher checksum.")
rlOspfExtLsdbAdvertisement = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 13, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(36, 36)).setFixedLength(36)).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfExtLsdbAdvertisement.setReference('OSPF Version 2, Section 12 Link State Advertisements')
if mibBuilder.loadTexts: rlOspfExtLsdbAdvertisement.setStatus('deprecated')
if mibBuilder.loadTexts: rlOspfExtLsdbAdvertisement.setDescription('The entire link state advertisement, including its header.')
rlOspfAreaAggregateTable = MibTable((1, 3, 6, 1, 4, 1, 89, 210, 14), )
if mibBuilder.loadTexts: rlOspfAreaAggregateTable.setReference('OSPF Version 2, Appendix C.2 Area parameters')
if mibBuilder.loadTexts: rlOspfAreaAggregateTable.setStatus('current')
if mibBuilder.loadTexts: rlOspfAreaAggregateTable.setDescription("The Area Aggregate Table acts as an adjunct to the Area Table. It describes those address aggregates that are configured to be propagated from an area. Its purpose is to reduce the amount of information that is known beyond an Area's borders. It contains a set of IP address ranges specified by an IP address/IP network mask pair. For example, a class B address range of X.X.X.X with a network mask of 255.255.0.0 includes all IP addresses from X.X.0.0 to X.X.255.255. Note that if ranges are configured such that one range subsumes another range (e.g., 10.0.0.0 mask 255.0.0.0 and 10.1.0.0 mask 255.255.0.0), the most specific match is the preferred one.")
rlOspfAreaAggregateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 210, 14, 1), ).setIndexNames((0, "RADLAN-OSPF-MIB", "rlOspfAreaAggregateProcessId"), (0, "RADLAN-OSPF-MIB", "rlOspfAreaAggregateAreaID"), (0, "RADLAN-OSPF-MIB", "rlOspfAreaAggregateLsdbType"), (0, "RADLAN-OSPF-MIB", "rlOspfAreaAggregateNet"), (0, "RADLAN-OSPF-MIB", "rlOspfAreaAggregateMask"))
if mibBuilder.loadTexts: rlOspfAreaAggregateEntry.setReference('OSPF Version 2, Appendix C.2 Area parameters')
if mibBuilder.loadTexts: rlOspfAreaAggregateEntry.setStatus('current')
if mibBuilder.loadTexts: rlOspfAreaAggregateEntry.setDescription('A single area aggregate entry. Information in this table is persistent and when this object is written the entity SHOULD save the change to non-volatile storage.')
rlOspfAreaAggregateProcessId = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 14, 1, 1), RlOspfProcessID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfAreaAggregateProcessId.setStatus('current')
if mibBuilder.loadTexts: rlOspfAreaAggregateProcessId.setDescription('A 32-bit integer uniquely identifying an OSPF process.')
rlOspfAreaAggregateAreaID = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 14, 1, 2), AreaID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfAreaAggregateAreaID.setReference('OSPF Version 2, Appendix C.2 Area parameters')
if mibBuilder.loadTexts: rlOspfAreaAggregateAreaID.setStatus('current')
if mibBuilder.loadTexts: rlOspfAreaAggregateAreaID.setDescription('The area within which the address aggregate is to be found.')
rlOspfAreaAggregateLsdbType = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 14, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 7))).clone(namedValues=NamedValues(("summaryLink", 3), ("nssaExternalLink", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfAreaAggregateLsdbType.setReference('OSPF Version 2, Appendix A.4.1 The Link State Advertisement header')
if mibBuilder.loadTexts: rlOspfAreaAggregateLsdbType.setStatus('current')
if mibBuilder.loadTexts: rlOspfAreaAggregateLsdbType.setDescription('The type of the address aggregate. This field specifies the Lsdb type that this address aggregate applies to.')
rlOspfAreaAggregateNet = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 14, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfAreaAggregateNet.setReference('OSPF Version 2, Appendix C.2 Area parameters')
if mibBuilder.loadTexts: rlOspfAreaAggregateNet.setStatus('current')
if mibBuilder.loadTexts: rlOspfAreaAggregateNet.setDescription('The IP address of the net or subnet indicated by the range.')
rlOspfAreaAggregateMask = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 14, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfAreaAggregateMask.setReference('OSPF Version 2, Appendix C.2 Area parameters')
if mibBuilder.loadTexts: rlOspfAreaAggregateMask.setStatus('current')
if mibBuilder.loadTexts: rlOspfAreaAggregateMask.setDescription('The subnet mask that pertains to the net or subnet.')
rlOspfAreaAggregateStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 14, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlOspfAreaAggregateStatus.setStatus('current')
if mibBuilder.loadTexts: rlOspfAreaAggregateStatus.setDescription('This object permits management of the table by facilitating actions such as row creation, construction, and destruction. The value of this object has no effect on whether other objects in this conceptual row can be modified.')
rlOspfAreaAggregateEffect = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 14, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("advertiseMatching", 1), ("doNotAdvertiseMatching", 2))).clone('advertiseMatching')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlOspfAreaAggregateEffect.setStatus('current')
if mibBuilder.loadTexts: rlOspfAreaAggregateEffect.setDescription("Subnets subsumed by ranges either trigger the advertisement of the indicated aggregate (advertiseMatching) or result in the subnet's not being advertised at all outside the area.")
rlOspfAreaAggregateExtRouteTag = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 14, 1, 8), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlOspfAreaAggregateExtRouteTag.setStatus('current')
if mibBuilder.loadTexts: rlOspfAreaAggregateExtRouteTag.setDescription('External route tag to be included in NSSA (type-7) LSAs.')
rlOspfLocalLsdbTable = MibTable((1, 3, 6, 1, 4, 1, 89, 210, 18), )
if mibBuilder.loadTexts: rlOspfLocalLsdbTable.setReference('OSPF Version 2, Section 12 Link State Advertisements and The OSPF Opaque LSA Option')
if mibBuilder.loadTexts: rlOspfLocalLsdbTable.setStatus('current')
if mibBuilder.loadTexts: rlOspfLocalLsdbTable.setDescription("The OSPF Process's link-local link state database for non-virtual links. This table is identical to the OSPF LSDB Table in format, but contains only link-local Link State Advertisements for non-virtual links. The purpose is to allow link-local LSAs to be displayed for each non-virtual interface. This table is implemented to support type-9 LSAs that are defined in 'The OSPF Opaque LSA Option'.")
rlOspfLocalLsdbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 210, 18, 1), ).setIndexNames((0, "RADLAN-OSPF-MIB", "rlOspfLocalLsdbProcessId"), (0, "RADLAN-OSPF-MIB", "rlOspfLocalLsdbIpAddress"), (0, "RADLAN-OSPF-MIB", "rlOspfLocalLsdbAddressLessIf"), (0, "RADLAN-OSPF-MIB", "rlOspfLocalLsdbType"), (0, "RADLAN-OSPF-MIB", "rlOspfLocalLsdbLsid"), (0, "RADLAN-OSPF-MIB", "rlOspfLocalLsdbRouterId"))
if mibBuilder.loadTexts: rlOspfLocalLsdbEntry.setStatus('current')
if mibBuilder.loadTexts: rlOspfLocalLsdbEntry.setDescription('A single link state advertisement.')
rlOspfLocalLsdbProcessId = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 18, 1, 1), Unsigned32())
if mibBuilder.loadTexts: rlOspfLocalLsdbProcessId.setStatus('current')
if mibBuilder.loadTexts: rlOspfLocalLsdbProcessId.setDescription('Identifies this OSPF entity.')
rlOspfLocalLsdbIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 18, 1, 2), IpAddress())
if mibBuilder.loadTexts: rlOspfLocalLsdbIpAddress.setReference('OSPF Version 2, Appendix C.3 Interface parameters')
if mibBuilder.loadTexts: rlOspfLocalLsdbIpAddress.setStatus('current')
if mibBuilder.loadTexts: rlOspfLocalLsdbIpAddress.setDescription('The IP address of the interface from which the LSA was received if the interface is numbered.')
rlOspfLocalLsdbAddressLessIf = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 18, 1, 3), InterfaceIndexOrZero())
if mibBuilder.loadTexts: rlOspfLocalLsdbAddressLessIf.setReference('OSPF Version 2, Appendix C.3 Interface parameters')
if mibBuilder.loadTexts: rlOspfLocalLsdbAddressLessIf.setStatus('current')
if mibBuilder.loadTexts: rlOspfLocalLsdbAddressLessIf.setDescription('The interface index of the interface from which the LSA was received if the interface is unnumbered.')
rlOspfLocalLsdbType = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 18, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(9))).clone(namedValues=NamedValues(("localOpaqueLink", 9))))
if mibBuilder.loadTexts: rlOspfLocalLsdbType.setReference('OSPF Version 2, Appendix A.4.1 The Link State Advertisement header')
if mibBuilder.loadTexts: rlOspfLocalLsdbType.setStatus('current')
if mibBuilder.loadTexts: rlOspfLocalLsdbType.setDescription('The type of the link state advertisement. Each link state type has a separate advertisement format.')
rlOspfLocalLsdbLsid = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 18, 1, 5), IpAddress())
if mibBuilder.loadTexts: rlOspfLocalLsdbLsid.setReference('OSPF Version 2, Section 12.1.4 Link State ID')
if mibBuilder.loadTexts: rlOspfLocalLsdbLsid.setStatus('current')
if mibBuilder.loadTexts: rlOspfLocalLsdbLsid.setDescription('The Link State ID is an LS Type Specific field containing a 32-bit identifier in IP address format; it identifies the piece of the routing domain that is being described by the advertisement.')
rlOspfLocalLsdbRouterId = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 18, 1, 6), RouterID())
if mibBuilder.loadTexts: rlOspfLocalLsdbRouterId.setReference('OSPF Version 2, Appendix C.1 Global parameters')
if mibBuilder.loadTexts: rlOspfLocalLsdbRouterId.setStatus('current')
if mibBuilder.loadTexts: rlOspfLocalLsdbRouterId.setDescription('The 32-bit number that uniquely identifies the originating router in the Autonomous System.')
rlOspfLocalLsdbSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 18, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfLocalLsdbSequence.setReference('OSPF Version 2, Section 12.1.6 LS sequence number')
if mibBuilder.loadTexts: rlOspfLocalLsdbSequence.setStatus('current')
if mibBuilder.loadTexts: rlOspfLocalLsdbSequence.setDescription("The sequence number field is a signed 32-bit integer. It starts with the value '80000001'h, or -'7FFFFFFF'h, and increments until '7FFFFFFF'h. Thus, a typical sequence number will be very negative. It is used to detect old and duplicate link state advertisements. The space of sequence numbers is linearly ordered. The larger the sequence number, the more recent the advertisement.")
rlOspfLocalLsdbAge = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 18, 1, 8), Integer32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfLocalLsdbAge.setReference('OSPF Version 2, Section 12.1.1 LS age')
if mibBuilder.loadTexts: rlOspfLocalLsdbAge.setStatus('current')
if mibBuilder.loadTexts: rlOspfLocalLsdbAge.setDescription('This field is the age of the link state advertisement in seconds.')
rlOspfLocalLsdbChecksum = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 18, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfLocalLsdbChecksum.setReference('OSPF Version 2, Section 12.1.7 LS checksum')
if mibBuilder.loadTexts: rlOspfLocalLsdbChecksum.setStatus('current')
if mibBuilder.loadTexts: rlOspfLocalLsdbChecksum.setDescription("This field is the checksum of the complete contents of the advertisement, excepting the age field. The age field is excepted so that an advertisement's age can be incremented without updating the checksum. The checksum used is the same that is used for ISO connectionless datagrams; it is commonly referred to as the Fletcher checksum.")
rlOspfLocalLsdbAdvertisement = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 18, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfLocalLsdbAdvertisement.setReference('OSPF Version 2, Section 12 Link State Advertisements')
if mibBuilder.loadTexts: rlOspfLocalLsdbAdvertisement.setStatus('current')
if mibBuilder.loadTexts: rlOspfLocalLsdbAdvertisement.setDescription('The entire link state advertisement, including its header. Note that for variable length LSAs, SNMP agents may not be able to return the largest string size.')
rlOspfLocalLsdbAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 18, 1, 11), AreaID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfLocalLsdbAreaId.setStatus('current')
if mibBuilder.loadTexts: rlOspfLocalLsdbAreaId.setDescription('The OSPF area in which the link belongs.')
rlOspfVirtLocalLsdbTable = MibTable((1, 3, 6, 1, 4, 1, 89, 210, 19), )
if mibBuilder.loadTexts: rlOspfVirtLocalLsdbTable.setReference('OSPF Version 2, Section 12 Link State Advertisements and The OSPF Opaque LSA Option')
if mibBuilder.loadTexts: rlOspfVirtLocalLsdbTable.setStatus('current')
if mibBuilder.loadTexts: rlOspfVirtLocalLsdbTable.setDescription("The OSPF Process's link-local link state database for virtual links. This table is identical to the OSPF LSDB Table in format, but contains only link-local Link State Advertisements for virtual links. The purpose is to allow link-local LSAs to be displayed for each virtual interface. This table is implemented to support type-9 LSAs that are defined in 'The OSPF Opaque LSA Option'.")
rlOspfVirtLocalLsdbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 210, 19, 1), ).setIndexNames((0, "RADLAN-OSPF-MIB", "rlOspfVirtLocalLsdbProcessId"), (0, "RADLAN-OSPF-MIB", "rlOspfVirtLocalLsdbTransitArea"), (0, "RADLAN-OSPF-MIB", "rlOspfVirtLocalLsdbNeighbor"), (0, "RADLAN-OSPF-MIB", "rlOspfVirtLocalLsdbType"), (0, "RADLAN-OSPF-MIB", "rlOspfVirtLocalLsdbLsid"), (0, "RADLAN-OSPF-MIB", "rlOspfVirtLocalLsdbRouterId"))
if mibBuilder.loadTexts: rlOspfVirtLocalLsdbEntry.setStatus('current')
if mibBuilder.loadTexts: rlOspfVirtLocalLsdbEntry.setDescription('A single link state advertisement.')
rlOspfVirtLocalLsdbProcessId = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 19, 1, 1), Unsigned32())
if mibBuilder.loadTexts: rlOspfVirtLocalLsdbProcessId.setStatus('current')
if mibBuilder.loadTexts: rlOspfVirtLocalLsdbProcessId.setDescription('Identifies this OSPF entity.')
rlOspfVirtLocalLsdbTransitArea = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 19, 1, 2), AreaID())
if mibBuilder.loadTexts: rlOspfVirtLocalLsdbTransitArea.setReference('OSPF Version 2, Appendix C.3 Interface parameters')
if mibBuilder.loadTexts: rlOspfVirtLocalLsdbTransitArea.setStatus('current')
if mibBuilder.loadTexts: rlOspfVirtLocalLsdbTransitArea.setDescription('The transit area that the virtual link traverses. By definition, this is not 0.0.0.0.')
rlOspfVirtLocalLsdbNeighbor = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 19, 1, 3), RouterID())
if mibBuilder.loadTexts: rlOspfVirtLocalLsdbNeighbor.setReference('OSPF Version 2, Appendix C.3 Interface parameters')
if mibBuilder.loadTexts: rlOspfVirtLocalLsdbNeighbor.setStatus('current')
if mibBuilder.loadTexts: rlOspfVirtLocalLsdbNeighbor.setDescription('The Router ID of the virtual neighbor.')
rlOspfVirtLocalLsdbType = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 19, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(9))).clone(namedValues=NamedValues(("localOpaqueLink", 9))))
if mibBuilder.loadTexts: rlOspfVirtLocalLsdbType.setReference('OSPF Version 2, Appendix A.4.1 The Link State Advertisement header')
if mibBuilder.loadTexts: rlOspfVirtLocalLsdbType.setStatus('current')
if mibBuilder.loadTexts: rlOspfVirtLocalLsdbType.setDescription('The type of the link state advertisement. Each link state type has a separate advertisement format.')
rlOspfVirtLocalLsdbLsid = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 19, 1, 5), IpAddress())
if mibBuilder.loadTexts: rlOspfVirtLocalLsdbLsid.setReference('OSPF Version 2, Section 12.1.4 Link State ID')
if mibBuilder.loadTexts: rlOspfVirtLocalLsdbLsid.setStatus('current')
if mibBuilder.loadTexts: rlOspfVirtLocalLsdbLsid.setDescription('The Link State ID is an LS Type Specific field containing a 32-bit identifier in IP address format; it identifies the piece of the routing domain that is being described by the advertisement.')
rlOspfVirtLocalLsdbRouterId = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 19, 1, 6), RouterID())
if mibBuilder.loadTexts: rlOspfVirtLocalLsdbRouterId.setReference('OSPF Version 2, Appendix C.1 Global parameters')
if mibBuilder.loadTexts: rlOspfVirtLocalLsdbRouterId.setStatus('current')
if mibBuilder.loadTexts: rlOspfVirtLocalLsdbRouterId.setDescription('The 32-bit number that uniquely identifies the originating router in the Autonomous System.')
rlOspfVirtLocalLsdbSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 19, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfVirtLocalLsdbSequence.setReference('OSPF Version 2, Section 12.1.6 LS sequence number')
if mibBuilder.loadTexts: rlOspfVirtLocalLsdbSequence.setStatus('current')
if mibBuilder.loadTexts: rlOspfVirtLocalLsdbSequence.setDescription("The sequence number field is a signed 32-bit integer. It starts with the value '80000001'h, or -'7FFFFFFF'h, and increments until '7FFFFFFF'h. Thus, a typical sequence number will be very negative. It is used to detect old and duplicate link state advertisements. The space of sequence numbers is linearly ordered. The larger the sequence number, the more recent the advertisement.")
rlOspfVirtLocalLsdbAge = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 19, 1, 8), Integer32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfVirtLocalLsdbAge.setReference('OSPF Version 2, Section 12.1.1 LS age')
if mibBuilder.loadTexts: rlOspfVirtLocalLsdbAge.setStatus('current')
if mibBuilder.loadTexts: rlOspfVirtLocalLsdbAge.setDescription('This field is the age of the link state advertisement in seconds.')
rlOspfVirtLocalLsdbChecksum = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 19, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfVirtLocalLsdbChecksum.setReference('OSPF Version 2, Section 12.1.7 LS checksum')
if mibBuilder.loadTexts: rlOspfVirtLocalLsdbChecksum.setStatus('current')
if mibBuilder.loadTexts: rlOspfVirtLocalLsdbChecksum.setDescription("This field is the checksum of the complete contents of the advertisement, excepting the age field. The age field is excepted so that an advertisement's age can be incremented without updating the checksum. The checksum used is the same that is used for ISO connectionless datagrams; it is commonly referred to as the Fletcher checksum.")
rlOspfVirtLocalLsdbAdvertisement = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 19, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfVirtLocalLsdbAdvertisement.setReference('OSPF Version 2, Section 12 Link State Advertisements. Note that for variable length LSAs, SNMP agents may not be able to return the largest string size.')
if mibBuilder.loadTexts: rlOspfVirtLocalLsdbAdvertisement.setStatus('current')
if mibBuilder.loadTexts: rlOspfVirtLocalLsdbAdvertisement.setDescription('The entire link state advertisement, including its header.')
rlOspfEnableTrapsOspfErrors = MibScalar((1, 3, 6, 1, 4, 1, 89, 210, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlOspfEnableTrapsOspfErrors.setStatus('current')
if mibBuilder.loadTexts: rlOspfEnableTrapsOspfErrors.setDescription('A bit mask indicating enable SNMP notifications for OSPF errors. Bit 0, if set, for authenticationFailure trap. enables only the ospfIfFailure trap. Allows SNMP notifications to be sent when a packet has been received on a nonvirtual interface from a neighbor router whose authentication key or authentication type conflicts with the authentication key or authentication type of this router. Bit 1, if set, for badPacket trap. enables only the ospfIfRxBadPacket trap. Allows SNMP notifications to be sent when an OSPF packet that has not been parsed has been received on a nonvirtual interface. Bit 2, if set, for configError trap. enables only the ospfIfConfigError trap. Sends SNMP notifications when a packet has been received in a nonvirtual interface from a neighbor router whose configuration parameters conflict with the configuration parameters of this router. Bit 3, if set, for virtAuthenticationFailure trap. enables only the ospfVirtIfFailure trap. Allows SNMP notifications to be sent when a packet has been received on a virtual interface from a neighbor router whose authentication key or authentication type conflicts with the authentication key or authentication type of this router. Bit 4, if set, for virtBadPacket trap. enables only the ospfVirtIfRxBadPacket trap. Allows SNMP notifications to be sent when an OSPF packet that has not been parsed has been received on a virtual interface. Bit 5, if set, for virtConfigError trap. enables only the ospfVirtIfConfigError trap. Sends SNMP notifications when a packet has been received in a virtual interface from a neighbor router whose configuration parameters conflict with the configuration parameters of this router.')
rlOspfEnableTrapsOspfLsa = MibScalar((1, 3, 6, 1, 4, 1, 89, 210, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlOspfEnableTrapsOspfLsa.setStatus('current')
if mibBuilder.loadTexts: rlOspfEnableTrapsOspfLsa.setDescription('A bit mask indicating enable SNMP notifications for OSPF LSA Bit 0, if set, for maxAgeLsa trap. enable the ospfMaxAgeLsa trap. Bit 1, if set, for originateLsa trap. enable the ospfOriginateLsa trap. When the originateLsa trap is enabled, it will not be invoked for simple LSA refreshes that take place every 30 minutes or when an LSA has reached its maximum age and is being flushed.')
rlOspfEnableTrapsOspfRateLimitSeconds = MibScalar((1, 3, 6, 1, 4, 1, 89, 210, 22), Integer32().clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlOspfEnableTrapsOspfRateLimitSeconds.setStatus('current')
if mibBuilder.loadTexts: rlOspfEnableTrapsOspfRateLimitSeconds.setDescription('Sets the rate limit window size, in seconds. A number from 2 to 60. The default value is 10.')
rlOspfEnableTrapsOspfRateLimitTrapNumber = MibScalar((1, 3, 6, 1, 4, 1, 89, 210, 23), Integer32().clone(7)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlOspfEnableTrapsOspfRateLimitTrapNumber.setStatus('current')
if mibBuilder.loadTexts: rlOspfEnableTrapsOspfRateLimitTrapNumber.setDescription('Sets the maximum number of traps sent during the window time. A number from 0 to 300. The default number is 7.')
rlOspfEnableTrapsOspfTransmit = MibScalar((1, 3, 6, 1, 4, 1, 89, 210, 24), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlOspfEnableTrapsOspfTransmit.setStatus('current')
if mibBuilder.loadTexts: rlOspfEnableTrapsOspfTransmit.setDescription('A bit mask indicating enable SNMP notifications for OSPF transmit Bit 0, if set, for packets trap. enables only the ospfTxRetransmit trap. Allows SNMP notifications to be sent when an OSPF packet has been re-sent on a nonvirtual interface. Bit 1, if set, for virtPackets trap. enables only the ospfVirtTxRetransmit trap. Allows SNMP notifications to be sent when an OSPF packet has been re-sent on a virtual interface.')
rlOspfEnableTrapsOspfStateChange = MibScalar((1, 3, 6, 1, 4, 1, 89, 210, 25), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlOspfEnableTrapsOspfStateChange.setStatus('current')
if mibBuilder.loadTexts: rlOspfEnableTrapsOspfStateChange.setDescription('A bit mask indicating enable SNMP notifications for OSPF State Change. Bit 0, if set, for ifStateChange trap. only the ospfIfStateChange trap. Sends SNMP notifications when there has been a change in the state of a non-virtual OSPF interface. Bit 1, if set, for neighborStateChange trap. enables only the ospfNbrStateChange trap. Sends SNMP notifications when there has been a change in the state of a non-virtual OSPF neighbor. Bit 2, if set, for ospfVirtIfStateChange trap. only the ospfVirtIfStateChange trap. Sends SNMP notifications when there has been a change in the state of a virtual OSPF interface. Bit 3, if set, for ospfVirtNbrStateChange trap. enables only the ospfVirtNbrStateChange trap. Sends SNMP notifications when there has been a change in the state of a virtual OSPF neighbor.')
rlOspfExt = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 210, 26))
rlOspfBrRouterTable = MibTable((1, 3, 6, 1, 4, 1, 89, 210, 26, 1), )
if mibBuilder.loadTexts: rlOspfBrRouterTable.setStatus('current')
if mibBuilder.loadTexts: rlOspfBrRouterTable.setDescription('Router Link State Advertisement.')
rlOspfBrRouterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 210, 26, 1, 1), ).setIndexNames((0, "RADLAN-OSPF-MIB", "rlOspfBrRouterProcessId"), (0, "RADLAN-OSPF-MIB", "rlOspfBrRouterAreaId"), (0, "RADLAN-OSPF-MIB", "rlOspfBrRouterRouterId"), (0, "RADLAN-OSPF-MIB", "rlOspfBrRouterNextHopIp"), (0, "RADLAN-OSPF-MIB", "rlOspfBrRouterOutIf"))
if mibBuilder.loadTexts: rlOspfBrRouterEntry.setStatus('current')
if mibBuilder.loadTexts: rlOspfBrRouterEntry.setDescription('A single entry from Router LSA.')
rlOspfBrRouterProcessId = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 26, 1, 1, 1), RlOspfProcessID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfBrRouterProcessId.setStatus('current')
if mibBuilder.loadTexts: rlOspfBrRouterProcessId.setDescription('A 32-bit integer uniquely identifying an OSPF process.')
rlOspfBrRouterAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 26, 1, 1, 2), AreaID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfBrRouterAreaId.setReference('OSPF Version 2, Appendix C.2 Area parameters')
if mibBuilder.loadTexts: rlOspfBrRouterAreaId.setStatus('current')
if mibBuilder.loadTexts: rlOspfBrRouterAreaId.setDescription('The 32 bit identifier of the Route Area.')
rlOspfBrRouterRouterId = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 26, 1, 1, 3), RouterID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfBrRouterRouterId.setReference('OSPF Version 2, Appendix C.1 Global parameters')
if mibBuilder.loadTexts: rlOspfBrRouterRouterId.setStatus('current')
if mibBuilder.loadTexts: rlOspfBrRouterRouterId.setDescription('The 32 bit number that uniquely identifies the originating router in the Autonomous System.')
rlOspfBrRouterNextHopIp = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 26, 1, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfBrRouterNextHopIp.setStatus('current')
if mibBuilder.loadTexts: rlOspfBrRouterNextHopIp.setDescription('The Hext Hop IP Address.')
rlOspfBrRouterOutIf = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 26, 1, 1, 5), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfBrRouterOutIf.setStatus('current')
if mibBuilder.loadTexts: rlOspfBrRouterOutIf.setDescription('The outgoing interface toward the destination.')
rlOspfBrRouterRouteType = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 26, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("intra", 1), ("inter", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfBrRouterRouteType.setStatus('current')
if mibBuilder.loadTexts: rlOspfBrRouterRouteType.setDescription('intra is intra-area route. inter is inter-area route.')
rlOspfBrRouterRouteCost = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 26, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfBrRouterRouteCost.setStatus('current')
if mibBuilder.loadTexts: rlOspfBrRouterRouteCost.setDescription('Cost of using this route.')
rlOspfBrRouterRouterType = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 210, 26, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("abr", 1), ("asbr", 2), ("both", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfBrRouterRouterType.setStatus('current')
if mibBuilder.loadTexts: rlOspfBrRouterRouterType.setDescription('The border router type: ABR, ASBR or both ABR and ASBR.')
mibBuilder.exportSymbols("RADLAN-OSPF-MIB", rlOspfVirtIfLsaCksumSum=rlOspfVirtIfLsaCksumSum, rlOspfVirtIfTable=rlOspfVirtIfTable, rlOspfAreaAggregateLsdbType=rlOspfAreaAggregateLsdbType, rlOspfEnableTrapsOspfStateChange=rlOspfEnableTrapsOspfStateChange, rlOspfReferenceBandwidth=rlOspfReferenceBandwidth, rlOspfIfMetricAddressLessIf=rlOspfIfMetricAddressLessIf, rlOspfCalcMaxDelay=rlOspfCalcMaxDelay, rlOspfLsdbTable=rlOspfLsdbTable, rlOspfIfProcessId=rlOspfIfProcessId, rlOspfAreaAggregateNet=rlOspfAreaAggregateNet, RlOspfRestartExitReason=RlOspfRestartExitReason, rlOspfHostStatus=rlOspfHostStatus, rlOspfStubAreaTable=rlOspfStubAreaTable, rlOspfVirtLocalLsdbLsid=rlOspfVirtLocalLsdbLsid, rlOspfEnableTrapsOspfErrors=rlOspfEnableTrapsOspfErrors, rlOspfAreaLsaCount=rlOspfAreaLsaCount, rlOspfIfMetricIpAddress=rlOspfIfMetricIpAddress, rlOspfOpaqueLsaSupport=rlOspfOpaqueLsaSupport, rlOspfExtLsdbEntry=rlOspfExtLsdbEntry, rlOspfExtLsdbAdvertisement=rlOspfExtLsdbAdvertisement, rlOspfIfAdminStat=rlOspfIfAdminStat, rlOspfIfRtrPriority=rlOspfIfRtrPriority, rlOspfInstance=rlOspfInstance, rlOspfNextRouterIdType=rlOspfNextRouterIdType, rlOspfAreaLsaCksumSum=rlOspfAreaLsaCksumSum, rlOspfAreaRangeEntry=rlOspfAreaRangeEntry, rlOspfOriginateNewLsas=rlOspfOriginateNewLsas, rlOspfAreaAdminStat=rlOspfAreaAdminStat, rlOspfIfAuthKey=rlOspfIfAuthKey, rlOspfRouterId=rlOspfRouterId, rlOspfAreaRangeEffect=rlOspfAreaRangeEffect, RlOspfProcessID=RlOspfProcessID, rlOspfStubTOS=rlOspfStubTOS, rlOspfProcessId=rlOspfProcessId, rlOspfNbrOptions=rlOspfNbrOptions, rlOspfVirtNbrLsRetransQLen=rlOspfVirtNbrLsRetransQLen, rlOspfExtLsdbLsid=rlOspfExtLsdbLsid, rlOspfRestartExitReason=rlOspfRestartExitReason, rlOspfAreaStatus=rlOspfAreaStatus, rlOspfVirtIfActualAuthType=rlOspfVirtIfActualAuthType, rlOspfTOSSupport=rlOspfTOSSupport, rlOspfMaximumRedistPrefixThreshold=rlOspfMaximumRedistPrefixThreshold, rlOspfStubRouterSupport=rlOspfStubRouterSupport, rlOspfBrRouterNextHopIp=rlOspfBrRouterNextHopIp, rlOspfIfRtrDeadInterval=rlOspfIfRtrDeadInterval, rlOspfIfBackupDesignatedRouterId=rlOspfIfBackupDesignatedRouterId, rlOspfVirtIfHelloInterval=rlOspfVirtIfHelloInterval, rlOspfVersionNumber=rlOspfVersionNumber, rlOspfNbrRestartHelperStatus=rlOspfNbrRestartHelperStatus, rlOspfStubMetricType=rlOspfStubMetricType, rlOspfVirtLocalLsdbProcessId=rlOspfVirtLocalLsdbProcessId, rlOspfIfLsaCksumSum=rlOspfIfLsaCksumSum, rlOspfBrRouterRouteCost=rlOspfBrRouterRouteCost, rlOspfVirtNbrIpAddr=rlOspfVirtNbrIpAddr, rlOspfHostAreaID=rlOspfHostAreaID, rlOspfNbrEntry=rlOspfNbrEntry, rlOspfVirtNbrEntry=rlOspfVirtNbrEntry, rlOspfLocalLsdbProcessId=rlOspfLocalLsdbProcessId, rlOspfAdminStat=rlOspfAdminStat, rlOspfLsdbChecksum=rlOspfLsdbChecksum, rlOspfAreaAggregateEffect=rlOspfAreaAggregateEffect, rlOspfRestartStatus=rlOspfRestartStatus, rlOspfLocalLsdbAge=rlOspfLocalLsdbAge, rlOspfEnableTrapsOspfLsa=rlOspfEnableTrapsOspfLsa, rlOspfAreaId=rlOspfAreaId, rlOspfRouterIdType=rlOspfRouterIdType, rlOspfHostEntry=rlOspfHostEntry, rlOspfVirtNbrRtrId=rlOspfVirtNbrRtrId, rlOspfAreaAggregateEntry=rlOspfAreaAggregateEntry, rlOspfIfOperStatus=rlOspfIfOperStatus, rlOspfVirtIfAuthKeyChain=rlOspfVirtIfAuthKeyChain, rlOspfAreaFilterPrefixListIn=rlOspfAreaFilterPrefixListIn, rlOspfIfMetricEntry=rlOspfIfMetricEntry, rlOspfAreaRangeProcessId=rlOspfAreaRangeProcessId, rlOspfLsdbSequence=rlOspfLsdbSequence, RlOspfAuthenticationType=RlOspfAuthenticationType, rlOspfIfMetricValue=rlOspfIfMetricValue, rlOspfIfTransitDelay=rlOspfIfTransitDelay, rlOspfIfMetricStatus=rlOspfIfMetricStatus, rlOspfNbrRtrId=rlOspfNbrRtrId, rlOspfVirtLocalLsdbNeighbor=rlOspfVirtLocalLsdbNeighbor, rlOspfStubRouterAdvertisement=rlOspfStubRouterAdvertisement, rlOspfBrRouterProcessId=rlOspfBrRouterProcessId, rlOspfRestartAge=rlOspfRestartAge, rlOspfAsBdrRtrCount=rlOspfAsBdrRtrCount, rlOspfAreaNssaTranslatorStabilityInterval=rlOspfAreaNssaTranslatorStabilityInterval, rlOspfAreaRangeStatus=rlOspfAreaRangeStatus, rlOspfPassiveInterface=rlOspfPassiveInterface, rlOspfIfIfIndex=rlOspfIfIfIndex, rlOspfIfLsaRefreshIntvl=rlOspfIfLsaRefreshIntvl, rlOspfIfMetricTOS=rlOspfIfMetricTOS, rlOspfExtLsdbTable=rlOspfExtLsdbTable, rlOspfMaximumRedistPrefixWarningOnly=rlOspfMaximumRedistPrefixWarningOnly, rlOspfIfBackupDesignatedRouter=rlOspfIfBackupDesignatedRouter, rlOspfNbrProcessId=rlOspfNbrProcessId, rlOspfAreaAggregateExtRouteTag=rlOspfAreaAggregateExtRouteTag, rlOspfVirtLocalLsdbAdvertisement=rlOspfVirtLocalLsdbAdvertisement, rlOspfIfAuthKeyChain=rlOspfIfAuthKeyChain, rlOspfGeneralGroupEntry=rlOspfGeneralGroupEntry, rlOspfIfStatus=rlOspfIfStatus, PYSNMP_MODULE_ID=rlOspf, rlOspfNbrHelloSuppressed=rlOspfNbrHelloSuppressed, rlOspfIfDesignatedRouter=rlOspfIfDesignatedRouter, rlOspfHostTable=rlOspfHostTable, rlOspfOperStatus=rlOspfOperStatus, rlOspfAsLsaCksumSum=rlOspfAsLsaCksumSum, rlOspfStubStatus=rlOspfStubStatus, rlOspfNbrLsRetransQLen=rlOspfNbrLsRetransQLen, rlOspfVirtIfLsaCount=rlOspfVirtIfLsaCount, rlOspfHostProcessId=rlOspfHostProcessId, rlOspfAuthType=rlOspfAuthType, rlOspfImportAsExtern=rlOspfImportAsExtern, rlOspfSpfRuns=rlOspfSpfRuns, rlOspfVirtIfRetransInterval=rlOspfVirtIfRetransInterval, rlOspfVirtNbrEvents=rlOspfVirtNbrEvents, rlOspfVirtNbrHelloSuppressed=rlOspfVirtNbrHelloSuppressed, rlOspfLsdbType=rlOspfLsdbType, rlOspfLsdbAdvertisement=rlOspfLsdbAdvertisement, rlOspfNbrRestartHelperAge=rlOspfNbrRestartHelperAge, rlOspfVirtLocalLsdbTransitArea=rlOspfVirtLocalLsdbTransitArea, rlOspfVirtIfAuthType=rlOspfVirtIfAuthType, RlOspfDeadIntervalRangeTC=RlOspfDeadIntervalRangeTC, rlOspfIfEvents=rlOspfIfEvents, rlOspfBrRouterEntry=rlOspfBrRouterEntry, rlOspfIfIpAddress=rlOspfIfIpAddress, rlOspfStubAreaId=rlOspfStubAreaId, rlOspfLsdbLsid=rlOspfLsdbLsid, rlOspfBrRouterOutIf=rlOspfBrRouterOutIf, rlOspfIfPassive=rlOspfIfPassive, rlOspfVirtIfEntry=rlOspfVirtIfEntry, rlOspfExtLsdbSequence=rlOspfExtLsdbSequence, rlOspfVirtNbrProcessId=rlOspfVirtNbrProcessId, rlOspfBrRouterTable=rlOspfBrRouterTable, rlOspfAddressLessIf=rlOspfAddressLessIf, rlOspf=rlOspf, RlOspfRouterIdType=RlOspfRouterIdType, RlOspfFastHelloMultiplierRange=RlOspfFastHelloMultiplierRange, rlOspfDiscontinuityTime=rlOspfDiscontinuityTime, rlOspfAreaOperStatus=rlOspfAreaOperStatus, rlOspfExtLsdbAge=rlOspfExtLsdbAge, rlOspfLocalLsdbEntry=rlOspfLocalLsdbEntry, rlOspfVirtLocalLsdbTable=rlOspfVirtLocalLsdbTable, rlOspfExternLsaCksumSum=rlOspfExternLsaCksumSum, rlOspfVirtNbrRestartHelperExitReason=rlOspfVirtNbrRestartHelperExitReason, rlOspfNbmaNbrStatus=rlOspfNbmaNbrStatus, rlOspfIfRetransInterval=rlOspfIfRetransInterval, rlOspfVirtIfOperStatus=rlOspfVirtIfOperStatus, rlOspfNbrIpAddr=rlOspfNbrIpAddr, rlOspfNbrPriority=rlOspfNbrPriority, rlOspfNbrEvents=rlOspfNbrEvents, rlOspfNbmaNbrPermanence=rlOspfNbmaNbrPermanence, rlOspfVirtLocalLsdbChecksum=rlOspfVirtLocalLsdbChecksum, rlOspfDemandExtensions=rlOspfDemandExtensions, rlOspfAreaAggregateMask=rlOspfAreaAggregateMask, rlOspfEnableTrapsOspfRateLimitSeconds=rlOspfEnableTrapsOspfRateLimitSeconds, rlOspfIfTable=rlOspfIfTable, rlOspfAreaAggregateTable=rlOspfAreaAggregateTable, rlOspfHostMetric=rlOspfHostMetric, rlOspfMulticastExtensions=rlOspfMulticastExtensions, rlOspfVirtLocalLsdbRouterId=rlOspfVirtLocalLsdbRouterId, rlOspfExtLsdbProcessId=rlOspfExtLsdbProcessId, rlOspfAreaRangeMask=rlOspfAreaRangeMask, rlOspfHostCfgAreaID=rlOspfHostCfgAreaID, rlOspfVirtNbrArea=rlOspfVirtNbrArea, rlOspfIfFastHelloMultiplier=rlOspfIfFastHelloMultiplier, rlOspfASBdrRtrActualStatus=rlOspfASBdrRtrActualStatus, rlOspfExtLsdbRouterId=rlOspfExtLsdbRouterId, rlOspfNextRouterId=rlOspfNextRouterId, rlOspfNbrIfIpAddr=rlOspfNbrIfIpAddr, rlOspfIfType=rlOspfIfType, rlOspfIfEntry=rlOspfIfEntry, rlOspfVirtNbrState=rlOspfVirtNbrState, rlOspfVirtIfAreaId=rlOspfVirtIfAreaId, rlOspfGeneralGroupTable=rlOspfGeneralGroupTable, rlOspfIfMetricProcessId=rlOspfIfMetricProcessId, rlOspfVirtIfRtrDeadInterval=rlOspfVirtIfRtrDeadInterval, rlOspfDefaultMetric=rlOspfDefaultMetric, rlOspfIfMetricTable=rlOspfIfMetricTable, RlOspfUpToRefreshIntervalTC=RlOspfUpToRefreshIntervalTC, rlOspfAreaAggregateAreaID=rlOspfAreaAggregateAreaID, rlOspfRFC1583Compatibility=rlOspfRFC1583Compatibility, rlOspfVirtNbrTable=rlOspfVirtNbrTable, rlOspfAreaAggregateStatus=rlOspfAreaAggregateStatus, rlOspfAreaBdrRtrStatus=rlOspfAreaBdrRtrStatus, rlOspfLocalLsdbAdvertisement=rlOspfLocalLsdbAdvertisement, rlOspfStubAreaEntry=rlOspfStubAreaEntry, rlOspfIfDemand=rlOspfIfDemand, rlOspfIfMtuIgnore=rlOspfIfMtuIgnore, rlOspfLsdbAreaId=rlOspfLsdbAreaId, rlOspfAreaAggregateProcessId=rlOspfAreaAggregateProcessId, rlOspfIfLsaCount=rlOspfIfLsaCount, rlOspfVirtIfAuthKey=rlOspfVirtIfAuthKey, rlOspfAreaRangeAreaId=rlOspfAreaRangeAreaId, rlOspfAreaFilterPrefixListOut=rlOspfAreaFilterPrefixListOut, rlOspfVirtLocalLsdbType=rlOspfVirtLocalLsdbType, rlOspfAreaRangeNet=rlOspfAreaRangeNet, rlOspfVirtNbrRestartHelperStatus=rlOspfVirtNbrRestartHelperStatus, rlOspfASBdrRtrStatus=rlOspfASBdrRtrStatus, rlOspfExternLsaCount=rlOspfExternLsaCount, rlOspfRxNewLsas=rlOspfRxNewLsas, rlOspfVirtIfProcessId=rlOspfVirtIfProcessId, rlOspfVirtIfNeighbor=rlOspfVirtIfNeighbor, rlOspfLsdbRouterId=rlOspfLsdbRouterId, rlOspfAreaRangeTable=rlOspfAreaRangeTable, rlOspfNbrAreaId=rlOspfNbrAreaId, rlOspfLocalLsdbAreaId=rlOspfLocalLsdbAreaId, rlOspfGeneralGroupStatus=rlOspfGeneralGroupStatus, rlOspfVirtLocalLsdbAge=rlOspfVirtLocalLsdbAge, rlOspfNbrIfIndex=rlOspfNbrIfIndex, rlOspfBrRouterRouteType=rlOspfBrRouterRouteType, rlOspfAreaProcessId=rlOspfAreaProcessId, rlOspfHostTOS=rlOspfHostTOS, rlOspfIfAuthType=rlOspfIfAuthType, rlOspfVirtIfTransitDelay=rlOspfVirtIfTransitDelay, rlOspfExtLsdbLimit=rlOspfExtLsdbLimit, rlOspfEnableTrapsOspfTransmit=rlOspfEnableTrapsOspfTransmit, rlOspfAreaEntry=rlOspfAreaEntry, rlOspfRestartInterval=rlOspfRestartInterval, rlOspfAreaSummary=rlOspfAreaSummary, rlOspfAreaBdrRtrCount=rlOspfAreaBdrRtrCount, rlOspfIfPollInterval=rlOspfIfPollInterval, rlOspfHostIpAddress=rlOspfHostIpAddress, rlOspfVirtIfState=rlOspfVirtIfState, rlOspfVirtIfStatus=rlOspfVirtIfStatus, rlOspfEnableTrapsOspfRateLimitTrapNumber=rlOspfEnableTrapsOspfRateLimitTrapNumber, rlOspfAreaNssaTranslatorState=rlOspfAreaNssaTranslatorState, RlOspfRestartHelperStatus=RlOspfRestartHelperStatus, rlOspfLocalLsdbLsid=rlOspfLocalLsdbLsid, rlOspfBrRouterRouterId=rlOspfBrRouterRouterId, rlOspfNbrDeadTime=rlOspfNbrDeadTime, rlOspfLocalLsdbIpAddress=rlOspfLocalLsdbIpAddress, rlOspfIfDesignatedRouterId=rlOspfIfDesignatedRouterId, rlOspfAreaTable=rlOspfAreaTable, rlOspfRestartStrictLsaChecking=rlOspfRestartStrictLsaChecking, rlOspfRteMaxEqCostPaths=rlOspfRteMaxEqCostPaths, rlOspfIfHelloInterval=rlOspfIfHelloInterval, rlOspfVirtLocalLsdbSequence=rlOspfVirtLocalLsdbSequence, rlOspfLsdbProcessId=rlOspfLsdbProcessId, rlOspfVirtLocalLsdbEntry=rlOspfVirtLocalLsdbEntry, rlOspfLsdbEntry=rlOspfLsdbEntry, rlOspfNbrRestartHelperExitReason=rlOspfNbrRestartHelperExitReason, rlOspfExtLsdbType=rlOspfExtLsdbType, rlOspfAreaNssaTranslatorEvents=rlOspfAreaNssaTranslatorEvents, rlOspfLogAdjacencyChanges=rlOspfLogAdjacencyChanges, rlOspfNbrTable=rlOspfNbrTable, rlOspfVirtIfAdminStatus=rlOspfVirtIfAdminStatus, rlOspfIfActualAuthType=rlOspfIfActualAuthType, rlOspfLsdbAge=rlOspfLsdbAge, rlOspfIfState=rlOspfIfState, rlOspfLocalLsdbChecksum=rlOspfLocalLsdbChecksum, rlOspfLocalLsdbTable=rlOspfLocalLsdbTable, rlOspfLocalLsdbRouterId=rlOspfLocalLsdbRouterId, rlOspfRestartSupport=rlOspfRestartSupport, rlOspfNbrAddressLessIndex=rlOspfNbrAddressLessIndex)
mibBuilder.exportSymbols("RADLAN-OSPF-MIB", rlOspfAsLsaCount=rlOspfAsLsaCount, rlOspfMaximumRedistPrefixNum=rlOspfMaximumRedistPrefixNum, rlOspfLocalLsdbAddressLessIf=rlOspfLocalLsdbAddressLessIf, rlOspfAreaNssaTranslatorRole=rlOspfAreaNssaTranslatorRole, rlOspfIfMulticastForwarding=rlOspfIfMulticastForwarding, rlOspfVirtNbrDeadTime=rlOspfVirtNbrDeadTime, rlOspfVirtIfEvents=rlOspfVirtIfEvents, rlOspfStubMetric=rlOspfStubMetric, rlOspfLocalLsdbType=rlOspfLocalLsdbType, rlOspfBrRouterRouterType=rlOspfBrRouterRouterType, rlOspfIfAreaId=rlOspfIfAreaId, rlOspfIfNameLookup=rlOspfIfNameLookup, rlOspfExtLsdbChecksum=rlOspfExtLsdbChecksum, rlOspfVirtIfIndex=rlOspfVirtIfIndex, rlOspfExt=rlOspfExt, rlOspfVirtNbrRestartHelperAge=rlOspfVirtNbrRestartHelperAge, rlOspfVirtNbrOptions=rlOspfVirtNbrOptions, rlOspfNbrState=rlOspfNbrState, rlOspfBrRouterAreaId=rlOspfBrRouterAreaId, rlOspfLocalLsdbSequence=rlOspfLocalLsdbSequence, rlOspfExitOverflowInterval=rlOspfExitOverflowInterval, rlOspfStubProcessId=rlOspfStubProcessId)
