#
# PySNMP MIB module HPN-ICF-CFCARD-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HPN-ICF-CFCARD-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:37:39 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection")
hpnicfCfCard, = mibBuilder.importSymbols("HPN-ICF-OID-MIB", "hpnicfCfCard")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
Gauge32, IpAddress, NotificationType, Unsigned32, Counter32, Counter64, MibIdentifier, Bits, Integer32, iso, ObjectIdentity, ModuleIdentity, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "IpAddress", "NotificationType", "Unsigned32", "Counter32", "Counter64", "MibIdentifier", "Bits", "Integer32", "iso", "ObjectIdentity", "ModuleIdentity", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
hpnicfCfCardMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 41, 1))
if mibBuilder.loadTexts: hpnicfCfCardMIB.setLastUpdated('200412240000Z')
if mibBuilder.loadTexts: hpnicfCfCardMIB.setOrganization('')
if mibBuilder.loadTexts: hpnicfCfCardMIB.setContactInfo('')
if mibBuilder.loadTexts: hpnicfCfCardMIB.setDescription('This MIB provides the information about CF Card.')
hpnicfCfCardMIBObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 41, 1, 1))
if mibBuilder.loadTexts: hpnicfCfCardMIBObjects.setStatus('current')
if mibBuilder.loadTexts: hpnicfCfCardMIBObjects.setDescription('Objects used for CF Card management.')
hpnicfCfCardScalarObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 41, 1, 1, 1))
if mibBuilder.loadTexts: hpnicfCfCardScalarObjects.setStatus('current')
if mibBuilder.loadTexts: hpnicfCfCardScalarObjects.setDescription('The scalar objects for the CF Card(s).')
hpnicfCfCardNumber = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 41, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCfCardNumber.setStatus('current')
if mibBuilder.loadTexts: hpnicfCfCardNumber.setDescription('The total number of the CF Card(s) at present.')
hpnicfCfCardInfoObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 41, 1, 1, 2))
if mibBuilder.loadTexts: hpnicfCfCardInfoObjects.setStatus('current')
if mibBuilder.loadTexts: hpnicfCfCardInfoObjects.setDescription('The basic information about CF Card(s).')
hpnicfCfCardInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 41, 1, 1, 2, 2), )
if mibBuilder.loadTexts: hpnicfCfCardInfoTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfCfCardInfoTable.setDescription('This table contains the basic information about CF Card(s).')
hpnicfCfCardInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 41, 1, 1, 2, 2, 1), ).setIndexNames((0, "HPN-ICF-CFCARD-MIB", "hpnicfCfCardIndex"))
if mibBuilder.loadTexts: hpnicfCfCardInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfCfCardInfoEntry.setDescription('This list contains the basic information about CF Card.')
hpnicfCfCardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 41, 1, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCfCardIndex.setStatus('current')
if mibBuilder.loadTexts: hpnicfCfCardIndex.setDescription('The index of the table.')
hpnicfCfCardIsPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 41, 1, 1, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCfCardIsPresent.setStatus('current')
if mibBuilder.loadTexts: hpnicfCfCardIsPresent.setDescription('The value indicates whether the CF Card is present or not.')
hpnicfCfCardContainedIn = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 41, 1, 1, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCfCardContainedIn.setStatus('current')
if mibBuilder.loadTexts: hpnicfCfCardContainedIn.setDescription('The number of the slot which containes this CF Card ')
hpnicfCfCardParentRelPos = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 41, 1, 1, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCfCardParentRelPos.setStatus('current')
if mibBuilder.loadTexts: hpnicfCfCardParentRelPos.setDescription('An indication of the relative position of this CF Card among all the CF Card contained in the same slot.')
hpnicfCfCardDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 41, 1, 1, 2, 2, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCfCardDescription.setStatus('current')
if mibBuilder.loadTexts: hpnicfCfCardDescription.setDescription('The Description of CF Card.')
hpnicfCfCardSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 41, 1, 1, 2, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCfCardSerialNumber.setStatus('current')
if mibBuilder.loadTexts: hpnicfCfCardSerialNumber.setDescription('The serial number of CF Card.')
hpnicfCfCardFirewareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 41, 1, 1, 2, 2, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCfCardFirewareVersion.setStatus('current')
if mibBuilder.loadTexts: hpnicfCfCardFirewareVersion.setDescription('The firmware revision of CF Card.')
hpnicfCfCardModelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 41, 1, 1, 2, 2, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCfCardModelNumber.setStatus('current')
if mibBuilder.loadTexts: hpnicfCfCardModelNumber.setDescription('The model number containing infomation of manufacturer.')
hpnicfCfCardState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 41, 1, 1, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 128, 240, 255))).clone(namedValues=NamedValues(("sNoError", 1), ("sFormatError", 2), ("sSectorBufferError", 3), ("sECCError", 4), ("sCMPError", 5), ("sSlaveError", 128), ("sIOError", 240), ("sOther", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCfCardState.setStatus('current')
if mibBuilder.loadTexts: hpnicfCfCardState.setDescription('The state of CF Card.')
hpnicfCfCardSize = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 41, 1, 1, 2, 2, 1, 10), Unsigned32()).setUnits('byte').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCfCardSize.setStatus('current')
if mibBuilder.loadTexts: hpnicfCfCardSize.setDescription('The size of CF Card.')
hpnicfCfCardUsedSize = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 41, 1, 1, 2, 2, 1, 11), Unsigned32()).setUnits('byte').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCfCardUsedSize.setStatus('current')
if mibBuilder.loadTexts: hpnicfCfCardUsedSize.setDescription('The used size of CF Card.')
hpnicfCfCardFreeSize = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 41, 1, 1, 2, 2, 1, 12), Unsigned32()).setUnits('byte').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCfCardFreeSize.setStatus('current')
if mibBuilder.loadTexts: hpnicfCfCardFreeSize.setDescription('The free size of CF Card.')
hpnicfCfCardNotifications = ObjectIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 41, 1, 2))
if mibBuilder.loadTexts: hpnicfCfCardNotifications.setStatus('current')
if mibBuilder.loadTexts: hpnicfCfCardNotifications.setDescription('Notification about the CF Card.')
hpnicfCfCardNotificationsV2 = ObjectIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 41, 1, 2, 0))
if mibBuilder.loadTexts: hpnicfCfCardNotificationsV2.setStatus('current')
if mibBuilder.loadTexts: hpnicfCfCardNotificationsV2.setDescription('Root node for the Notification.')
hpnicfCfCardHotSwapOn = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 41, 1, 2, 0, 1)).setObjects(("HPN-ICF-CFCARD-MIB", "hpnicfCfCardContainedIn"), ("HPN-ICF-CFCARD-MIB", "hpnicfCfCardParentRelPos"), ("HPN-ICF-CFCARD-MIB", "hpnicfCfCardDescription"))
if mibBuilder.loadTexts: hpnicfCfCardHotSwapOn.setStatus('current')
if mibBuilder.loadTexts: hpnicfCfCardHotSwapOn.setDescription('This notification is sent when a CF Card is hot swapped in.')
hpnicfCfCardHotSwapOff = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 41, 1, 2, 0, 2)).setObjects(("HPN-ICF-CFCARD-MIB", "hpnicfCfCardContainedIn"), ("HPN-ICF-CFCARD-MIB", "hpnicfCfCardParentRelPos"), ("HPN-ICF-CFCARD-MIB", "hpnicfCfCardDescription"))
if mibBuilder.loadTexts: hpnicfCfCardHotSwapOff.setStatus('current')
if mibBuilder.loadTexts: hpnicfCfCardHotSwapOff.setDescription('This notification is sent when a CF Card is hot swapped out.')
hpnicfCfCardMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 41, 1, 4))
hpnicfCfCardMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 41, 1, 4, 1))
hpnicfcurrentObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 41, 1, 4, 1, 1)).setObjects(("HPN-ICF-CFCARD-MIB", "hpnicfCfCardNumber"), ("HPN-ICF-CFCARD-MIB", "hpnicfCfCardIndex"), ("HPN-ICF-CFCARD-MIB", "hpnicfCfCardIsPresent"), ("HPN-ICF-CFCARD-MIB", "hpnicfCfCardContainedIn"), ("HPN-ICF-CFCARD-MIB", "hpnicfCfCardParentRelPos"), ("HPN-ICF-CFCARD-MIB", "hpnicfCfCardDescription"), ("HPN-ICF-CFCARD-MIB", "hpnicfCfCardSerialNumber"), ("HPN-ICF-CFCARD-MIB", "hpnicfCfCardFirewareVersion"), ("HPN-ICF-CFCARD-MIB", "hpnicfCfCardModelNumber"), ("HPN-ICF-CFCARD-MIB", "hpnicfCfCardState"), ("HPN-ICF-CFCARD-MIB", "hpnicfCfCardSize"), ("HPN-ICF-CFCARD-MIB", "hpnicfCfCardUsedSize"), ("HPN-ICF-CFCARD-MIB", "hpnicfCfCardFreeSize"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpnicfcurrentObjectGroup = hpnicfcurrentObjectGroup.setStatus('current')
if mibBuilder.loadTexts: hpnicfcurrentObjectGroup.setDescription('A collection of objects.')
hpnicfcurrentNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 41, 1, 4, 1, 2)).setObjects(("HPN-ICF-CFCARD-MIB", "hpnicfCfCardHotSwapOn"), ("HPN-ICF-CFCARD-MIB", "hpnicfCfCardHotSwapOff"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpnicfcurrentNotificationGroup = hpnicfcurrentNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: hpnicfcurrentNotificationGroup.setDescription('Notification group.')
hpnicfCfCardMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 41, 1, 4, 2))
hpnicfbasicCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 41, 1, 4, 2, 1)).setObjects(("HPN-ICF-CFCARD-MIB", "hpnicfcurrentObjectGroup"), ("HPN-ICF-CFCARD-MIB", "hpnicfcurrentNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpnicfbasicCompliance = hpnicfbasicCompliance.setStatus('current')
if mibBuilder.loadTexts: hpnicfbasicCompliance.setDescription('The compliance statement.')
mibBuilder.exportSymbols("HPN-ICF-CFCARD-MIB", PYSNMP_MODULE_ID=hpnicfCfCardMIB, hpnicfcurrentObjectGroup=hpnicfcurrentObjectGroup, hpnicfCfCardState=hpnicfCfCardState, hpnicfbasicCompliance=hpnicfbasicCompliance, hpnicfCfCardNotifications=hpnicfCfCardNotifications, hpnicfCfCardUsedSize=hpnicfCfCardUsedSize, hpnicfcurrentNotificationGroup=hpnicfcurrentNotificationGroup, hpnicfCfCardContainedIn=hpnicfCfCardContainedIn, hpnicfCfCardMIBGroups=hpnicfCfCardMIBGroups, hpnicfCfCardMIBObjects=hpnicfCfCardMIBObjects, hpnicfCfCardIndex=hpnicfCfCardIndex, hpnicfCfCardInfoObjects=hpnicfCfCardInfoObjects, hpnicfCfCardInfoTable=hpnicfCfCardInfoTable, hpnicfCfCardSerialNumber=hpnicfCfCardSerialNumber, hpnicfCfCardMIB=hpnicfCfCardMIB, hpnicfCfCardScalarObjects=hpnicfCfCardScalarObjects, hpnicfCfCardModelNumber=hpnicfCfCardModelNumber, hpnicfCfCardInfoEntry=hpnicfCfCardInfoEntry, hpnicfCfCardMIBConformance=hpnicfCfCardMIBConformance, hpnicfCfCardFirewareVersion=hpnicfCfCardFirewareVersion, hpnicfCfCardHotSwapOff=hpnicfCfCardHotSwapOff, hpnicfCfCardMIBCompliances=hpnicfCfCardMIBCompliances, hpnicfCfCardNumber=hpnicfCfCardNumber, hpnicfCfCardParentRelPos=hpnicfCfCardParentRelPos, hpnicfCfCardFreeSize=hpnicfCfCardFreeSize, hpnicfCfCardSize=hpnicfCfCardSize, hpnicfCfCardDescription=hpnicfCfCardDescription, hpnicfCfCardNotificationsV2=hpnicfCfCardNotificationsV2, hpnicfCfCardIsPresent=hpnicfCfCardIsPresent, hpnicfCfCardHotSwapOn=hpnicfCfCardHotSwapOn)
