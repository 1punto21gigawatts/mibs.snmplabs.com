#
# PySNMP MIB module NSCDXGLIP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NSCDXGLIP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:25:01 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint")
nscDx, = mibBuilder.importSymbols("NSC-MIB", "nscDx")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
iso, Bits, Unsigned32, TimeTicks, NotificationType, Gauge32, Integer32, ModuleIdentity, MibIdentifier, Counter32, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, enterprises, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "Bits", "Unsigned32", "TimeTicks", "NotificationType", "Gauge32", "Integer32", "ModuleIdentity", "MibIdentifier", "Counter32", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "enterprises", "IpAddress")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
nscDxGreenline = MibIdentifier((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4))
nscDxGlChannelTable = MibTable((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 1), )
if mibBuilder.loadTexts: nscDxGlChannelTable.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlChannelTable.setDescription('List of channel interface entries.')
nscDxGlChannelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 1, 1), ).setIndexNames((0, "NSCDXGLIP-MIB", "nscDxGlChanEntKeyId"))
if mibBuilder.loadTexts: nscDxGlChannelEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlChannelEntry.setDescription('Channel interface entry.')
nscDxGlChanEntKeyId = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlChanEntKeyId.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlChanEntKeyId.setDescription('Processor Key ID (KID). This is a unique value for each interface.')
nscDxGlChanEntType = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("bus-tag-hci", 1), ("bus-tag-rci", 2), ("escon-hci", 3), ("escon-rci", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlChanEntType.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlChanEntType.setDescription('Channel interface type.')
nscDxGlChanEntActivityState = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("idle", 1), ("active", 2), ("stacked", 3), ("suppressible", 4), ("unsuppressible", 5), ("ipl", 6), ("wait-for-resources", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlChanEntActivityState.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlChanEntActivityState.setDescription('This is the actual state of the HCI (which depends on the IP state and online/offline state of the HCI).')
nscDxGlChanEntResetState = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("system-reset", 2), ("selective-reset", 3), ("ifdisc", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlChanEntResetState.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlChanEntResetState.setDescription('This identifies the pending channel reset to process.')
nscDxGlChanEntIplState = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("idle", 1), ("active", 2), ("stacked", 3), ("suppressible", 4), ("unsuppressible", 5), ("ipl", 6), ("wait-for-resources", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlChanEntIplState.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlChanEntIplState.setDescription('This is the state prior to the first command chain being completed. It is used for IPL.')
nscDxGlChanEntIpState = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlChanEntIpState.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlChanEntIpState.setDescription('This indicates whether the interface has been set online by the coprocessor. It indicates whether a Start I/F has been sent by the coprocessor.')
nscDxGlChanEntOnlineOfflineState = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlChanEntOnlineOfflineState.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlChanEntOnlineOfflineState.setDescription('This indicates the state of the switch on the back of the HCI.')
nscDxGlChanEntPolling = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nscDxGlChanEntPolling.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlChanEntPolling.setDescription('For a bus-tag-hci type channel this indicates whether the HCI will request polling on the RCIs that it connects to. For a bus-tag-rci type channel this indicates whether the RCI will allow polling on its channel interface.')
nscDxGlChanEntActiveSubchannel = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlChanEntActiveSubchannel.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlChanEntActiveSubchannel.setDescription('The HCI device address of the active device.')
nscDxGlChanEntMemoryResourcesLimited = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlChanEntMemoryResourcesLimited.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlChanEntMemoryResourcesLimited.setDescription('Indicator of memory resource limitation.')
nscDxGlChanEntTagOverruns = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlChanEntTagOverruns.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlChanEntTagOverruns.setDescription('Number of channel overruns.')
nscDxGlChanEntDcOverruns = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlChanEntDcOverruns.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlChanEntDcOverruns.setDescription('Number of channel overruns in DC interlock mode.')
nscDxGlChanEntDsOverruns = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlChanEntDsOverruns.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlChanEntDsOverruns.setDescription('Number of channel overruns in data streaming mode.')
nscDxGlChanEntDmaParityErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlChanEntDmaParityErrors.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlChanEntDmaParityErrors.setDescription('Number of DMA parity errors.')
nscDxGlChanEntCrcErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlChanEntCrcErrors.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlChanEntCrcErrors.setDescription('Number of CRC errors.')
nscDxGlChanEntResetsDuringDma = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlChanEntResetsDuringDma.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlChanEntResetsDuringDma.setDescription('Number of times the DMA operation has been terminated by channel resets (selective reset, interface reconnect, system reset).')
nscDxGlChanEntCmdParityErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlChanEntCmdParityErrors.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlChanEntCmdParityErrors.setDescription('Number of channel command parity errors (a Bus parity error with Command Out active).')
nscDxGlChanEntUnsupportedStatuses = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlChanEntUnsupportedStatuses.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlChanEntUnsupportedStatuses.setDescription('Number of unsupported status errors.')
nscDxGlChanEntMiscompareParityErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlChanEntMiscompareParityErrors.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlChanEntMiscompareParityErrors.setDescription('Number of miscompare parity errors.')
nscDxGlChanEntSelectionTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlChanEntSelectionTimeouts.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlChanEntSelectionTimeouts.setDescription('Number of selection timeouts.')
nscDxGlChanEntStatusAcceptDiscIns = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlChanEntStatusAcceptDiscIns.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlChanEntStatusAcceptDiscIns.setDescription('Number of status accept disconnect in errors.')
nscDxGlChanEntStatusAcceptTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlChanEntStatusAcceptTimeouts.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlChanEntStatusAcceptTimeouts.setDescription('Number of status accept timeouts.')
nscDxGlChanEntStatusWaitDiscIns = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlChanEntStatusWaitDiscIns.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlChanEntStatusWaitDiscIns.setDescription('Number of status wait disconnect in errors.')
nscDxGlChanEntStatusWaitTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlChanEntStatusWaitTimeouts.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlChanEntStatusWaitTimeouts.setDescription('Number of status wait timeouts.')
nscDxGlChanEntOpInActiveTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlChanEntOpInActiveTimeouts.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlChanEntOpInActiveTimeouts.setDescription('Number of op inactive timeouts.')
nscDxGlChanEntNumCus = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 1, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlChanEntNumCus.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlChanEntNumCus.setDescription('Number of control units per interface.')
nscDxGlChanEntChannelStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 1, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("connected", 1), ("notconnected", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlChanEntChannelStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlChanEntChannelStatus.setDescription('The status of the channel interface.')
nscDxGlProfiles = MibIdentifier((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 2))
nscDxGlProfControlUnitTable = MibTable((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 2, 1), )
if mibBuilder.loadTexts: nscDxGlProfControlUnitTable.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlProfControlUnitTable.setDescription('List of Control Unit entries.')
nscDxGlProfControlUnitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 2, 1, 1), ).setIndexNames((0, "NSCDXGLIP-MIB", "nscDxGlCuEntKeyId"), (0, "NSCDXGLIP-MIB", "nscDxGlCuEntCuNum"))
if mibBuilder.loadTexts: nscDxGlProfControlUnitEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlProfControlUnitEntry.setDescription('Control Unit entry. This entry defines controller and device operating characteristics. Some of the characteristics are: the address ranges the HCI responds to, the type of devices that are supported, and the operational condition of the HCI interface device.')
nscDxGlProfCuEntKeyId = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlProfCuEntKeyId.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlProfCuEntKeyId.setDescription('Processor Key ID (KID). This is a unique value for each interface.')
nscDxGlProfCuEntCuNum = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlProfCuEntCuNum.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlProfCuEntCuNum.setDescription('The profile number of the controller. The HCI supports up to 16 controller definitions (a unique set of operating and address characteristics for a type of device). The controller establishes the operation conditions of a device.')
nscDxGlProfCuEntNumDevices = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlProfCuEntNumDevices.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlProfCuEntNumDevices.setDescription('Number of devices on this control unit.')
nscDxGlProfCuEntOnlineOfflineState = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("offline", 1), ("online", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nscDxGlProfCuEntOnlineOfflineState.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlProfCuEntOnlineOfflineState.setDescription('The profiled state of the device(s).')
nscDxGlProfCuEntDeviceType = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 2, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nscDxGlProfCuEntDeviceType.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlProfCuEntDeviceType.setDescription('The type of device associated with the controller function. The controller uses a specific CCW table tailored for the unique operating characteristics of that particular device. It allows the controller to reference a table identifying the unique operating characteristics of that particular device type.')
nscDxGlProfCuEntHostStartingDevAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nscDxGlProfCuEntHostStartingDevAddr.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlProfCuEntHostStartingDevAddr.setDescription('The first HCI device address in the range of addresses associated with the specified controller definition.')
nscDxGlProfCuEntHostEndingDevAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nscDxGlProfCuEntHostEndingDevAddr.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlProfCuEntHostEndingDevAddr.setDescription('The last HCI device address in the range of addresses associated with the specified controller definition. NOTE: This is used in conjunction with the nscDxGlProfCuEntHostStartingDevAddr variable. The total number of device addresses in range is bounded by the nscDxGlProfCuEntHostStartingDevAddr and nscDxGlProfCuEntHostEndingDevAddr values for the specified controller definition.')
nscDxGlProfCuEntHostChannelSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dci", 1), ("ds3", 2), ("ds4", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nscDxGlProfCuEntHostChannelSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlProfCuEntHostChannelSpeed.setDescription('The HCI channel speed to the host. This defines to the HCI the data transfer protocol and data transfer rate used for the specified controller definition.')
nscDxGlProfCuEntHostBufferRequirements = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nscDxGlProfCuEntHostBufferRequirements.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlProfCuEntHostBufferRequirements.setDescription('The number of data buffers the HCI will allocate for a write I/O command.')
nscDxGlProfCuEntRmtIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 2, 1, 1, 10), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nscDxGlProfCuEntRmtIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlProfCuEntRmtIpAddr.setDescription('The IP address of the remote interface, either an RCI where devices are attached, or an HCI for CTC.')
nscDxGlProfCuEntRmtStartingDevAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nscDxGlProfCuEntRmtStartingDevAddr.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlProfCuEntRmtStartingDevAddr.setDescription('The first remote device address in the range of addresses associated with the specified controller definition. This can be used only to map addresses recognized by the host to different addresses at the device. If address mapping is not used, nscDxGlProfCuEntRmtStartingDevAddr should be the same as nscDxGlProfCuEntHostStartingDevAddr.')
nscDxGlProfCuEntRmtBufferHold = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("tbl-def", 1), ("on", 2), ("off", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nscDxGlProfCuEntRmtBufferHold.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlProfCuEntRmtBufferHold.setDescription("This indicates whether an RCI should wait for all the data associated with a CCW to be received before starting the device. Each device-type CCW table assigns this attribute to the appropriate CCW's for that device. It is generally enabled for overrunable devices.")
nscDxGlProfCuEntRmtChannelSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dci", 1), ("ds3", 2), ("ds4", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nscDxGlProfCuEntRmtChannelSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlProfCuEntRmtChannelSpeed.setDescription('The remote channel speed to the device. This defines to the remote interface what data transfer protocol and data transfer rate should be used for the specified devices.')
nscDxGlProfCuEntRmtBufferRequirements = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nscDxGlProfCuEntRmtBufferRequirements.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlProfCuEntRmtBufferRequirements.setDescription('The number of data buffers an RCI will allocate for read I/O commands.')
nscDxGlProfCuEntUnsolStatusOption = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 2, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("q-non-uc", 1), ("discard", 2), ("q-uc", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nscDxGlProfCuEntUnsolStatusOption.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlProfCuEntUnsolStatusOption.setDescription('This variable profiles the HCI to handle unsolicited status. When unsolicited status is received by the HCI from an RCI, the status is queued for presentation to the channel, except if the device is busy. If the device is busy, the status is handled in one of the following ways, depending upon which option has been defined. discard - profiles the HCI to discard the unsolicited status q-non-uc - profiles the HCI to always queue the unsolicited status q-uc - profiles the HCI to queue the unsolicited status only if it contains Unit Check status')
nscDxGlProfCuEntDevDriverOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 2, 1, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nscDxGlProfCuEntDevDriverOptions.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlProfCuEntDevDriverOptions.setDescription('The device driver options. See the 7220/7256 Host & Remote Channel Interfaces (HCI & RCI) with Greenline-IP software (GLH-IP/GLD-IP) reference manual (460793). The value depends on the device driver in use.')
nscDxGlProfCuEntHostBufferHold = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 2, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("tbl-def", 1), ("on", 2), ("off", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nscDxGlProfCuEntHostBufferHold.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlProfCuEntHostBufferHold.setDescription('This indicates whether the HCI should wait for all of the data associated with a CCW to be received before reconnecting to the channel.')
nscDxGlProfCuEntWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 2, 1, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nscDxGlProfCuEntWindowSize.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlProfCuEntWindowSize.setDescription('This variable specifies the number of IP packets that transport will sent before it waits for an acknowledgement to come back. The following value are allowed. 1 = 8 packets. 2 = 16 packets. 3 = 32 packets. 4 = 64 packets. 5 = 128 packets. 6 = 256 packets. 7 = 512 packets.')
nscDxGlProfDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 2, 2), )
if mibBuilder.loadTexts: nscDxGlProfDeviceTable.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlProfDeviceTable.setDescription('List of Device entries.')
nscDxGlProfDeviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 2, 2, 1), ).setIndexNames((0, "NSCDXGLIP-MIB", "nscDxGlDevEntKeyId"), (0, "NSCDXGLIP-MIB", "nscDxGlProfDevEntDevice"))
if mibBuilder.loadTexts: nscDxGlProfDeviceEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlProfDeviceEntry.setDescription('Device entry. States whether device is profiled online or offline.')
nscDxGlProfDevEntKeyId = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlProfDevEntKeyId.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlProfDevEntKeyId.setDescription('Processor Key ID (KID). This is a unique value for each interface.')
nscDxGlProfDevEntDevice = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlProfDevEntDevice.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlProfDevEntDevice.setDescription('Starting address of the device.')
nscDxGlProfDevEntOnOff = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("offline", 1), ("online", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nscDxGlProfDevEntOnOff.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlProfDevEntOnOff.setDescription('Profile device online or offline.')
nscDxGlDevStatusTable = MibTable((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 3), )
if mibBuilder.loadTexts: nscDxGlDevStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlDevStatusTable.setDescription('List of Device Status entries.')
nscDxGlDevStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 3, 1), ).setIndexNames((0, "NSCDXGLIP-MIB", "nscDxGlDevStatusEntKeyId"), (0, "NSCDXGLIP-MIB", "nscDxGlDevStatusEntDeviceNum"))
if mibBuilder.loadTexts: nscDxGlDevStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlDevStatusEntry.setDescription('Device status entry.')
nscDxGlDevStatusEntKeyId = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlDevStatusEntKeyId.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlDevStatusEntKeyId.setDescription('Processor Key ID (KID). This is a unique value for each interface.')
nscDxGlDevStatusEntDeviceNum = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlDevStatusEntDeviceNum.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlDevStatusEntDeviceNum.setDescription('The device number.')
nscDxGlDevStatusEntHostDevAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlDevStatusEntHostDevAddr.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlDevStatusEntHostDevAddr.setDescription('The HCI device address.')
nscDxGlDevStatusEntRmtDevAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlDevStatusEntRmtDevAddr.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlDevStatusEntRmtDevAddr.setDescription('The remote device address.')
nscDxGlDevStatusEntOnOffState = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("marked-off", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlDevStatusEntOnOffState.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlDevStatusEntOnOffState.setDescription('Specifies if the device is online, offline, or marked offline.')
nscDxGlDevStatusEntReservedState = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unreserved", 1), ("reserved", 2), ("primed", 3), ("re-reserved", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlDevStatusEntReservedState.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlDevStatusEntReservedState.setDescription('Specifies if the device is reserved by this HCI.')
nscDxGlSesStatsTable = MibTable((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 4), )
if mibBuilder.loadTexts: nscDxGlSesStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlSesStatsTable.setDescription('List of Session statistics entries.')
nscDxGlSesStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 4, 1), ).setIndexNames((0, "NSCDXGLIP-MIB", "nscDxGlSesStatsEntKeyId"))
if mibBuilder.loadTexts: nscDxGlSesStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlSesStatsEntry.setDescription('Session statistics entry.')
nscDxGlSesStatsEntKeyId = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlSesStatsEntKeyId.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlSesStatsEntKeyId.setDescription('Processor Key ID (KID). This is a unique value for each interface.')
nscDxGlSesStatsEntInControlReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlSesStatsEntInControlReqs.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlSesStatsEntInControlReqs.setDescription('The number of control request packets received by session.')
nscDxGlSesStatsEntInControlResps = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlSesStatsEntInControlResps.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlSesStatsEntInControlResps.setDescription('The number of control response packets received by session.')
nscDxGlSesStatsEntInDevAvailResps = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlSesStatsEntInDevAvailResps.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlSesStatsEntInDevAvailResps.setDescription('The number of device available response packets received by session.')
nscDxGlSesStatsEntInDevStatResps = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlSesStatsEntInDevStatResps.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlSesStatsEntInDevStatResps.setDescription('The number of device status response packets received by session.')
nscDxGlSesStatsEntInInitReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlSesStatsEntInInitReqs.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlSesStatsEntInInitReqs.setDescription('The number of init request packets received by session.')
nscDxGlSesStatsEntInInitResps = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlSesStatsEntInInitResps.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlSesStatsEntInInitResps.setDescription('The number of init response packets received by session.')
nscDxGlSesStatsEntInReserveReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlSesStatsEntInReserveReqs.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlSesStatsEntInReserveReqs.setDescription('The number of reserve request packets received by session.')
nscDxGlSesStatsEntInReserveResps = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlSesStatsEntInReserveResps.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlSesStatsEntInReserveResps.setDescription('The number of reserve response packets received by session.')
nscDxGlSesStatsEntInSenseReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 4, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlSesStatsEntInSenseReqs.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlSesStatsEntInSenseReqs.setDescription('The number of sense request packets received by session.')
nscDxGlSesStatsEntInSenseResps = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 4, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlSesStatsEntInSenseResps.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlSesStatsEntInSenseResps.setDescription('The number of sense response packets received by session.')
nscDxGlSesStatsEntInUnreserveReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 4, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlSesStatsEntInUnreserveReqs.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlSesStatsEntInUnreserveReqs.setDescription('The number of unreserve request packets received by session.')
nscDxGlSesStatsEntInInvalids = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 4, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlSesStatsEntInInvalids.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlSesStatsEntInInvalids.setDescription('The number of invalid packets received by session.')
nscDxGlSesStatsEntOutControlReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 4, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlSesStatsEntOutControlReqs.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlSesStatsEntOutControlReqs.setDescription('The number of control request packets sent by session.')
nscDxGlSesStatsEntOutControlResps = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 4, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlSesStatsEntOutControlResps.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlSesStatsEntOutControlResps.setDescription('The number of control response packets sent by session.')
nscDxGlSesStatsEntOutDevAvailResps = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 4, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlSesStatsEntOutDevAvailResps.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlSesStatsEntOutDevAvailResps.setDescription('The number of device available response packets sent by session.')
nscDxGlSesStatsEntOutDevStatResps = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 4, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlSesStatsEntOutDevStatResps.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlSesStatsEntOutDevStatResps.setDescription('The number of device status response packets sent by session.')
nscDxGlSesStatsEntOutInitReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 4, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlSesStatsEntOutInitReqs.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlSesStatsEntOutInitReqs.setDescription('The number of init request packets sent by session.')
nscDxGlSesStatsEntOutInitResps = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 4, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlSesStatsEntOutInitResps.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlSesStatsEntOutInitResps.setDescription('The number of init response packets sent by session.')
nscDxGlSesStatsEntOutReserveReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 4, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlSesStatsEntOutReserveReqs.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlSesStatsEntOutReserveReqs.setDescription('The number of reserve request packets sent by session.')
nscDxGlSesStatsEntOutReserveResps = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 4, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlSesStatsEntOutReserveResps.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlSesStatsEntOutReserveResps.setDescription('The number of reserve response packets sent by session.')
nscDxGlSesStatsEntOutSenseReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 4, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlSesStatsEntOutSenseReqs.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlSesStatsEntOutSenseReqs.setDescription('The number of sense request packets sent by session.')
nscDxGlSesStatsEntOutSenseResps = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 4, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlSesStatsEntOutSenseResps.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlSesStatsEntOutSenseResps.setDescription('The number of sense response packets sent by session.')
nscDxGlSesStatsEntOutUnreserveReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 4, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlSesStatsEntOutUnreserveReqs.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlSesStatsEntOutUnreserveReqs.setDescription('The number of unreserve request packets sent by session.')
nscDxGlSesStatsEntOutInvalids = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 4, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlSesStatsEntOutInvalids.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlSesStatsEntOutInvalids.setDescription('The number of invalid packets sent by session.')
nscDxGlSesStatsEntHciState = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 4, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("closed", 1), ("initial-poll", 2), ("hci-wait", 3), ("active", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlSesStatsEntHciState.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlSesStatsEntHciState.setDescription('The state of the HCI.')
nscDxGlSesStatsEntRciState = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 4, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("closed", 1), ("initial-poll", 2), ("hci-wait", 3), ("active", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlSesStatsEntRciState.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlSesStatsEntRciState.setDescription('The state of the RCI.')
nscDxGlSesStatsEntHciMaxSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 4, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlSesStatsEntHciMaxSessions.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlSesStatsEntHciMaxSessions.setDescription('Maximum number of HCIs that can be connected to the RCI.')
nscDxGlSesStatsEntRciMaxSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 4, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlSesStatsEntRciMaxSessions.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlSesStatsEntRciMaxSessions.setDescription('Maximum number of remote interfaces that can be connected to the HCI.')
nscDxGlSesStatsEntRciPollStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 4, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlSesStatsEntRciPollStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlSesStatsEntRciPollStatus.setDescription('This indicates whether automatic device polling is active.')
nscDxGlSesStatsEntRciPollRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 4, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlSesStatsEntRciPollRequests.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlSesStatsEntRciPollRequests.setDescription('Poll request count.')
nscDxGlSesStatsEntRciPollDevice = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 4, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlSesStatsEntRciPollDevice.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlSesStatsEntRciPollDevice.setDescription('Poll device number.')
nscDxGlSesHciConnTable = MibTable((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 5), )
if mibBuilder.loadTexts: nscDxGlSesHciConnTable.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlSesHciConnTable.setDescription('List of session connection entries.')
nscDxGlSesHciConnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 5, 1), ).setIndexNames((0, "NSCDXGLIP-MIB", "nscDxGlSesHciConnEntKeyId"), (0, "NSCDXGLIP-MIB", "nscDxGlSesHciConnEntSesNum"))
if mibBuilder.loadTexts: nscDxGlSesHciConnEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlSesHciConnEntry.setDescription('Session connection entry.')
nscDxGlSesHciConnEntKeyId = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlSesHciConnEntKeyId.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlSesHciConnEntKeyId.setDescription('Processor Key ID (KID). This is a unique value for each interface.')
nscDxGlSesHciConnEntSesNum = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlSesHciConnEntSesNum.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlSesHciConnEntSesNum.setDescription('The session number.')
nscDxGlSesHciConnEntIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 5, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlSesHciConnEntIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlSesHciConnEntIpAddress.setDescription('The IP address of the remote RCI/HCI.')
nscDxGlSesHciConnEntStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("closed", 1), ("init1", 2), ("init2", 3), ("open", 4), ("closing", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlSesHciConnEntStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlSesHciConnEntStatus.setDescription('Session status. In normal operations it will be open')
nscDxGlSesHciConnEntSendState = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("idle", 6), ("header", 7), ("data", 8), ("flush", 9), ("trailer", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlSesHciConnEntSendState.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlSesHciConnEntSendState.setDescription('The current state of the outbound data stream.')
nscDxGlSesHciConnEntRecvState = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("idle", 6), ("header", 7), ("data", 8), ("flush", 9), ("trailer", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlSesHciConnEntRecvState.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlSesHciConnEntRecvState.setDescription('The current state of the inbound data stream.')
nscDxGlSesHciConnEntAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 5, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlSesHciConnEntAddr.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlSesHciConnEntAddr.setDescription('The local address of the device currently receiving data from the connected HCI.')
nscDxGlSesHciConnEntFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 5, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlSesHciConnEntFlags.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlSesHciConnEntFlags.setDescription('Session flag information. This is represented by an array of flags, with each flag represented by one hex digit which will have the value of one (on) or zero (off). The value may have multiple flags set at the same time. The following flags are currently in use. 10000000 - Polling has been requested by this HCI 1000000 - Reset has been sent 100000 - Session is congested')
nscDxGlSesHciConnEntReconn = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 5, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlSesHciConnEntReconn.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlSesHciConnEntReconn.setDescription('The amount of time in seconds between reconnects. It is only valid if status is closed.')
nscDxGlSesRciConnTable = MibTable((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 6), )
if mibBuilder.loadTexts: nscDxGlSesRciConnTable.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlSesRciConnTable.setDescription('List of session connection entries.')
nscDxGlSesRciConnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 6, 1), ).setIndexNames((0, "NSCDXGLIP-MIB", "nscDxGlSesRciConnEntKeyId"), (0, "NSCDXGLIP-MIB", "nscDxGlSesRciConnEntSesNum"))
if mibBuilder.loadTexts: nscDxGlSesRciConnEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlSesRciConnEntry.setDescription('Session connection entry.')
nscDxGlSesRciConnEntKeyId = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlSesRciConnEntKeyId.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlSesRciConnEntKeyId.setDescription('Processor Key ID (KID). This is a unique value for each interface.')
nscDxGlSesRciConnEntSesNum = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlSesRciConnEntSesNum.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlSesRciConnEntSesNum.setDescription('The session number.')
nscDxGlSesRciConnEntIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 6, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlSesRciConnEntIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlSesRciConnEntIpAddress.setDescription('The IP address of the remote HCI.')
nscDxGlSesRciConnEntStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("closed", 1), ("init1", 2), ("init2", 3), ("open", 4), ("closing", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlSesRciConnEntStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlSesRciConnEntStatus.setDescription('Session status. In normal operations it will be open')
nscDxGlSesRciConnEntSendState = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("idle", 6), ("header", 7), ("data", 8), ("flush", 9), ("trailer", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlSesRciConnEntSendState.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlSesRciConnEntSendState.setDescription('The current state of the outbound data stream.')
nscDxGlSesRciConnEntRecvState = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("idle", 6), ("header", 7), ("data", 8), ("flush", 9), ("trailer", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlSesRciConnEntRecvState.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlSesRciConnEntRecvState.setDescription('The current state of the inbound data stream.')
nscDxGlSesRciConnEntAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 6, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlSesRciConnEntAddr.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlSesRciConnEntAddr.setDescription('The local address of the device currently receiving data from this RCI.')
nscDxGlSesRciConnEntFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 6, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlSesRciConnEntFlags.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlSesRciConnEntFlags.setDescription('Session flag information. This is represented by an array of flags, with each flag represented by one hex digit which will have the value of one (on) or zero (off). The value may have multiple flags set at the same time. The following flags are currently in use. 10000000 - Polling has been requested by remote HCI 1000000 - Reset has been sent 100000 - Session is congested')
nscDxGlSesDevTable = MibTable((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 7), )
if mibBuilder.loadTexts: nscDxGlSesDevTable.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlSesDevTable.setDescription('List of session device entries.')
nscDxGlSesDevEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 7, 1), ).setIndexNames((0, "NSCDXGLIP-MIB", "nscDxGlSesDevEntKeyId"), (0, "NSCDXGLIP-MIB", "nscDxGlSesDevEntDevice"))
if mibBuilder.loadTexts: nscDxGlSesDevEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlSesDevEntry.setDescription('Session device entry.')
nscDxGlSesDevEntKeyId = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlSesDevEntKeyId.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlSesDevEntKeyId.setDescription('Processor Key ID (KID). This is a unique value for each interface.')
nscDxGlSesDevEntDevice = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlSesDevEntDevice.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlSesDevEntDevice.setDescription('The device address.')
nscDxGlSesDevEntReserve = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 7, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlSesDevEntReserve.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlSesDevEntReserve.setDescription('The session number of the HCI that has reserved the device. This value will -1 if the device is not currently reserved.')
nscDxGlSesDevEntPrimed = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 7, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlSesDevEntPrimed.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlSesDevEntPrimed.setDescription('Bit map with each bit representing an HCI that is waiting for the device to become unreserved. The right most bit corresponds to HCI 0.')
nscDxGlSesDevEntStat = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 7, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlSesDevEntStat.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlSesDevEntStat.setDescription('The status of the device, as given in the following: 0x80 - device is offline 0x40 - device in online but does not respond 0-7 - number of sense bytes')
nscDxGlSesDevEntSenseData = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 7, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlSesDevEntSenseData.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlSesDevEntSenseData.setDescription('The sense bytes.')
nscDxGlXportStatsTable = MibTable((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 8), )
if mibBuilder.loadTexts: nscDxGlXportStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlXportStatsTable.setDescription('List of transport statistics entries.')
nscDxGlXportStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 8, 1), ).setIndexNames((0, "NSCDXGLIP-MIB", "nscDxGlXportStatsEntKeyId"))
if mibBuilder.loadTexts: nscDxGlXportStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlXportStatsEntry.setDescription('Transport statistics entry.')
nscDxGlXportStatsEntKeyId = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlXportStatsEntKeyId.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlXportStatsEntKeyId.setDescription('Processor Key ID (KID). This is a unique value for each interface.')
nscDxGlXportStatsEntInAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 8, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlXportStatsEntInAcks.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlXportStatsEntInAcks.setDescription('The number of ack packets received by transport.')
nscDxGlXportStatsEntInConnects = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 8, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlXportStatsEntInConnects.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlXportStatsEntInConnects.setDescription('The number of connect packets received by transport.')
nscDxGlXportStatsEntInDataDups = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 8, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlXportStatsEntInDataDups.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlXportStatsEntInDataDups.setDescription('The number of data dup packets received by transport.')
nscDxGlXportStatsEntInDataInOrders = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 8, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlXportStatsEntInDataInOrders.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlXportStatsEntInDataInOrders.setDescription('The number of data in order packets received by transport.')
nscDxGlXportStatsEntInDataInvalids = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 8, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlXportStatsEntInDataInvalids.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlXportStatsEntInDataInvalids.setDescription('The number of data invalid packets received by transport.')
nscDxGlXportStatsEntInDataInWindows = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 8, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlXportStatsEntInDataInWindows.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlXportStatsEntInDataInWindows.setDescription('The number of data in window packets received by transport.')
nscDxGlXportStatsEntInDiscs = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 8, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlXportStatsEntInDiscs.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlXportStatsEntInDiscs.setDescription('The number of disconnect packets received by transport.')
nscDxGlXportStatsEntInNacks = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 8, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlXportStatsEntInNacks.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlXportStatsEntInNacks.setDescription('The number of nack packets received by transport.')
nscDxGlXportStatsEntInProbes = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 8, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlXportStatsEntInProbes.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlXportStatsEntInProbes.setDescription('The number of probe packets received by transport.')
nscDxGlXportStatsEntInProbeResps = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 8, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlXportStatsEntInProbeResps.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlXportStatsEntInProbeResps.setDescription('The number of probe response packets received by transport.')
nscDxGlXportStatsEntBadPckts = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 8, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlXportStatsEntBadPckts.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlXportStatsEntBadPckts.setDescription('The number of bad packets received by transport.')
nscDxGlXportStatsEntBadXcbs = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 8, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlXportStatsEntBadXcbs.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlXportStatsEntBadXcbs.setDescription('The number of bad xcb packets received by transport.')
nscDxGlXportStatsEntOutAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 8, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlXportStatsEntOutAcks.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlXportStatsEntOutAcks.setDescription('The number of ack packets sent by transport.')
nscDxGlXportStatsEntOutConnects = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 8, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlXportStatsEntOutConnects.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlXportStatsEntOutConnects.setDescription('The number of connect packets sent by transport.')
nscDxGlXportStatsEntOutDatas = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 8, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlXportStatsEntOutDatas.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlXportStatsEntOutDatas.setDescription('The number of data packets sent by transport.')
nscDxGlXportStatsEntOutDiscs = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 8, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlXportStatsEntOutDiscs.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlXportStatsEntOutDiscs.setDescription('The number of disconnect packets sent by transport.')
nscDxGlXportStatsEntOutNacks = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 8, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlXportStatsEntOutNacks.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlXportStatsEntOutNacks.setDescription('The number of nack packets sent by transport.')
nscDxGlXportStatsEntOutProbes = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 8, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlXportStatsEntOutProbes.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlXportStatsEntOutProbes.setDescription('The number of probe packets sent by transport.')
nscDxGlXportStatsEntOutProbeResps = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 8, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlXportStatsEntOutProbeResps.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlXportStatsEntOutProbeResps.setDescription('The number of probe response packets sent by transport.')
nscDxGlXportStatsEntReconns = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 8, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlXportStatsEntReconns.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlXportStatsEntReconns.setDescription('The number of reconnect packets sent by transport.')
nscDxGlXportStatsEntRetransmits = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 8, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlXportStatsEntRetransmits.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlXportStatsEntRetransmits.setDescription('The number of retransmit packets sent by transport.')
nscDxGlXportStatsEntBadChecksums = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 8, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlXportStatsEntBadChecksums.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlXportStatsEntBadChecksums.setDescription('The number of bad checksum errors.')
nscDxGlXportStatsEntBadVersions = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 8, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlXportStatsEntBadVersions.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlXportStatsEntBadVersions.setDescription('The number of bad version errors.')
nscDxGlXportStatsEntConnTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 8, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlXportStatsEntConnTimeouts.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlXportStatsEntConnTimeouts.setDescription('The number of connect timeout errors.')
nscDxGlXportStatsEntInitXcbExists = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 8, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlXportStatsEntInitXcbExists.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlXportStatsEntInitXcbExists.setDescription('The number of xcb exists errors.')
nscDxGlXportStatsEntNoHdrSpaces = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 8, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlXportStatsEntNoHdrSpaces.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlXportStatsEntNoHdrSpaces.setDescription('The number of no header space errors.')
nscDxGlXportStatsEntNoMemorys = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 8, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlXportStatsEntNoMemorys.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlXportStatsEntNoMemorys.setDescription('The number of no memory errors.')
nscDxGlXportStatsEntNoPes = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 8, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlXportStatsEntNoPes.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlXportStatsEntNoPes.setDescription('The number of no pe errors.')
nscDxGlXportStatsEntOutOfSeqDatas = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 8, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlXportStatsEntOutOfSeqDatas.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlXportStatsEntOutOfSeqDatas.setDescription('The number of out of sequence data errors.')
nscDxGlXportStatsEntShortPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 8, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlXportStatsEntShortPackets.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlXportStatsEntShortPackets.setDescription('The number of short packets errors.')
nscDxGlXportConnTable = MibTable((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 9), )
if mibBuilder.loadTexts: nscDxGlXportConnTable.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlXportConnTable.setDescription('List of transport connection entries.')
nscDxGlXportConnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 9, 1), ).setIndexNames((0, "NSCDXGLIP-MIB", "nscDxGlXportConnEntKeyId"), (0, "NSCDXGLIP-MIB", "nscDxGlXportConnEntNum"))
if mibBuilder.loadTexts: nscDxGlXportConnEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlXportConnEntry.setDescription('Transport connection entry.')
nscDxGlXportConnEntKeyId = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlXportConnEntKeyId.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlXportConnEntKeyId.setDescription('Processor Key ID (KID). This is a unique value for each interface.')
nscDxGlXportConnEntNum = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 9, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlXportConnEntNum.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlXportConnEntNum.setDescription('The transport connection number.')
nscDxGlXportConnEntLocalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 9, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlXportConnEntLocalAddress.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlXportConnEntLocalAddress.setDescription('The local IP address.')
nscDxGlXportConnEntLocalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 9, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlXportConnEntLocalPort.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlXportConnEntLocalPort.setDescription('The local transport port number.')
nscDxGlXportConnEntRemoteAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 9, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlXportConnEntRemoteAddress.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlXportConnEntRemoteAddress.setDescription('The remote IP address.')
nscDxGlXportConnEntRemotePort = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 9, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlXportConnEntRemotePort.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlXportConnEntRemotePort.setDescription('The remote transport port number.')
nscDxGlXportConnEntXopt = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 9, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlXportConnEntXopt.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlXportConnEntXopt.setDescription('Xport option information. This is represented by an array of flags, with each flag represented by one hex digit which will have the value of one (on) or zero (off). The value may have multiple flags set at the same time. The following flags are currently in use. 10000000 - Return data 1000000 - Fast search')
nscDxGlXportConnEntWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 9, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlXportConnEntWindowSize.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlXportConnEntWindowSize.setDescription('Window size specified as a packet count, 8, 16, 32, 64, 128, or 256')
nscDxGlXportConnEntRoundTripTime = MibScalar((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 9, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlXportConnEntRoundTripTime.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlXportConnEntRoundTripTime.setDescription('Round trip time in milliseconds.')
nscDxGlXportConnEntSeqNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 9, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlXportConnEntSeqNumber.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlXportConnEntSeqNumber.setDescription('Sequence number.')
nscDxGlXportConnEntXcbFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 3, 4, 9, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscDxGlXportConnEntXcbFlags.setStatus('mandatory')
if mibBuilder.loadTexts: nscDxGlXportConnEntXcbFlags.setDescription('Xport flag information. This is represented by an array of flags, with each flag represented by one hex digit which will have the value of one (on) or zero (off). The value may have multiple flags set at the same time. The following flags are currently in use. 10000000 - Owed ack 1000000 - Owe ack 100000 - Owed probe 10000 - Congested')
mibBuilder.exportSymbols("NSCDXGLIP-MIB", nscDxGlSesRciConnEntSendState=nscDxGlSesRciConnEntSendState, nscDxGlSesHciConnEntReconn=nscDxGlSesHciConnEntReconn, nscDxGlXportStatsEntKeyId=nscDxGlXportStatsEntKeyId, nscDxGlSesStatsEntHciMaxSessions=nscDxGlSesStatsEntHciMaxSessions, nscDxGlSesRciConnEntIpAddress=nscDxGlSesRciConnEntIpAddress, nscDxGlChanEntType=nscDxGlChanEntType, nscDxGlChanEntNumCus=nscDxGlChanEntNumCus, nscDxGlSesHciConnEntry=nscDxGlSesHciConnEntry, nscDxGlChanEntChannelStatus=nscDxGlChanEntChannelStatus, nscDxGlProfCuEntOnlineOfflineState=nscDxGlProfCuEntOnlineOfflineState, nscDxGlSesStatsEntRciState=nscDxGlSesStatsEntRciState, nscDxGlProfCuEntKeyId=nscDxGlProfCuEntKeyId, nscDxGlSesStatsEntOutControlReqs=nscDxGlSesStatsEntOutControlReqs, nscDxGlSesStatsEntHciState=nscDxGlSesStatsEntHciState, nscDxGlSesRciConnEntry=nscDxGlSesRciConnEntry, nscDxGlXportConnEntRemoteAddress=nscDxGlXportConnEntRemoteAddress, nscDxGlSesDevEntPrimed=nscDxGlSesDevEntPrimed, nscDxGlXportStatsEntInDiscs=nscDxGlXportStatsEntInDiscs, nscDxGlProfCuEntRmtChannelSpeed=nscDxGlProfCuEntRmtChannelSpeed, nscDxGlXportStatsEntOutDiscs=nscDxGlXportStatsEntOutDiscs, nscDxGlChanEntTagOverruns=nscDxGlChanEntTagOverruns, nscDxGlSesStatsEntOutReserveResps=nscDxGlSesStatsEntOutReserveResps, nscDxGlProfCuEntHostStartingDevAddr=nscDxGlProfCuEntHostStartingDevAddr, nscDxGlXportStatsEntOutDatas=nscDxGlXportStatsEntOutDatas, nscDxGlSesStatsEntOutSenseReqs=nscDxGlSesStatsEntOutSenseReqs, nscDxGlChanEntOnlineOfflineState=nscDxGlChanEntOnlineOfflineState, nscDxGlSesStatsEntry=nscDxGlSesStatsEntry, nscDxGlSesDevEntry=nscDxGlSesDevEntry, nscDxGlXportStatsEntInitXcbExists=nscDxGlXportStatsEntInitXcbExists, nscDxGlSesDevEntKeyId=nscDxGlSesDevEntKeyId, nscDxGlXportStatsEntShortPackets=nscDxGlXportStatsEntShortPackets, nscDxGlSesStatsEntInUnreserveReqs=nscDxGlSesStatsEntInUnreserveReqs, nscDxGlSesHciConnEntFlags=nscDxGlSesHciConnEntFlags, nscDxGlXportStatsEntOutOfSeqDatas=nscDxGlXportStatsEntOutOfSeqDatas, nscDxGlChanEntSelectionTimeouts=nscDxGlChanEntSelectionTimeouts, nscDxGlSesHciConnTable=nscDxGlSesHciConnTable, nscDxGlDevStatusEntReservedState=nscDxGlDevStatusEntReservedState, nscDxGlDevStatusEntRmtDevAddr=nscDxGlDevStatusEntRmtDevAddr, nscDxGlChanEntStatusAcceptTimeouts=nscDxGlChanEntStatusAcceptTimeouts, nscDxGlSesStatsEntOutDevAvailResps=nscDxGlSesStatsEntOutDevAvailResps, nscDxGlChanEntDcOverruns=nscDxGlChanEntDcOverruns, nscDxGlProfCuEntRmtBufferHold=nscDxGlProfCuEntRmtBufferHold, nscDxGlProfCuEntHostBufferRequirements=nscDxGlProfCuEntHostBufferRequirements, nscDxGlSesStatsEntRciPollRequests=nscDxGlSesStatsEntRciPollRequests, nscDxGlDevStatusTable=nscDxGlDevStatusTable, nscDxGlSesStatsEntInDevStatResps=nscDxGlSesStatsEntInDevStatResps, nscDxGlProfCuEntHostChannelSpeed=nscDxGlProfCuEntHostChannelSpeed, nscDxGlSesRciConnEntKeyId=nscDxGlSesRciConnEntKeyId, nscDxGlXportStatsEntInDataDups=nscDxGlXportStatsEntInDataDups, nscDxGlXportConnTable=nscDxGlXportConnTable, nscDxGlChanEntPolling=nscDxGlChanEntPolling, nscDxGlSesRciConnEntSesNum=nscDxGlSesRciConnEntSesNum, nscDxGlXportStatsEntBadVersions=nscDxGlXportStatsEntBadVersions, nscDxGlXportStatsEntInDataInOrders=nscDxGlXportStatsEntInDataInOrders, nscDxGlXportConnEntSeqNumber=nscDxGlXportConnEntSeqNumber, nscDxGlSesHciConnEntAddr=nscDxGlSesHciConnEntAddr, nscDxGlXportConnEntWindowSize=nscDxGlXportConnEntWindowSize, nscDxGlProfCuEntWindowSize=nscDxGlProfCuEntWindowSize, nscDxGlXportStatsEntOutAcks=nscDxGlXportStatsEntOutAcks, nscDxGlXportStatsEntBadPckts=nscDxGlXportStatsEntBadPckts, nscDxGlChanEntDmaParityErrors=nscDxGlChanEntDmaParityErrors, nscDxGlDevStatusEntry=nscDxGlDevStatusEntry, nscDxGlXportStatsTable=nscDxGlXportStatsTable, nscDxGlXportStatsEntRetransmits=nscDxGlXportStatsEntRetransmits, nscDxGlXportConnEntKeyId=nscDxGlXportConnEntKeyId, nscDxGlSesStatsEntOutControlResps=nscDxGlSesStatsEntOutControlResps, nscDxGlXportStatsEntInProbes=nscDxGlXportStatsEntInProbes, nscDxGlChanEntResetsDuringDma=nscDxGlChanEntResetsDuringDma, nscDxGlSesStatsEntOutInvalids=nscDxGlSesStatsEntOutInvalids, nscDxGlSesStatsEntInInitResps=nscDxGlSesStatsEntInInitResps, nscDxGlSesStatsEntOutReserveReqs=nscDxGlSesStatsEntOutReserveReqs, nscDxGlSesHciConnEntRecvState=nscDxGlSesHciConnEntRecvState, nscDxGlXportStatsEntInNacks=nscDxGlXportStatsEntInNacks, nscDxGlSesStatsEntInDevAvailResps=nscDxGlSesStatsEntInDevAvailResps, nscDxGlSesStatsEntInReserveReqs=nscDxGlSesStatsEntInReserveReqs, nscDxGlSesStatsEntOutSenseResps=nscDxGlSesStatsEntOutSenseResps, nscDxGlChanEntCrcErrors=nscDxGlChanEntCrcErrors, nscDxGlSesHciConnEntKeyId=nscDxGlSesHciConnEntKeyId, nscDxGlDevStatusEntOnOffState=nscDxGlDevStatusEntOnOffState, nscDxGlDevStatusEntHostDevAddr=nscDxGlDevStatusEntHostDevAddr, nscDxGlChanEntResetState=nscDxGlChanEntResetState, nscDxGlChanEntMiscompareParityErrors=nscDxGlChanEntMiscompareParityErrors, nscDxGlXportStatsEntNoPes=nscDxGlXportStatsEntNoPes, nscDxGlSesRciConnEntStatus=nscDxGlSesRciConnEntStatus, nscDxGlSesStatsEntRciPollDevice=nscDxGlSesStatsEntRciPollDevice, nscDxGlXportConnEntNum=nscDxGlXportConnEntNum, nscDxGlSesStatsEntOutUnreserveReqs=nscDxGlSesStatsEntOutUnreserveReqs, nscDxGlXportStatsEntOutProbes=nscDxGlXportStatsEntOutProbes, nscDxGlProfCuEntDeviceType=nscDxGlProfCuEntDeviceType, nscDxGlSesStatsEntInSenseResps=nscDxGlSesStatsEntInSenseResps, nscDxGlSesRciConnEntRecvState=nscDxGlSesRciConnEntRecvState, nscDxGlSesStatsEntInReserveResps=nscDxGlSesStatsEntInReserveResps, nscDxGlProfCuEntHostEndingDevAddr=nscDxGlProfCuEntHostEndingDevAddr, nscDxGlSesRciConnTable=nscDxGlSesRciConnTable, nscDxGlXportStatsEntInAcks=nscDxGlXportStatsEntInAcks, nscDxGlChannelTable=nscDxGlChannelTable, nscDxGlDevStatusEntDeviceNum=nscDxGlDevStatusEntDeviceNum, nscDxGlSesHciConnEntStatus=nscDxGlSesHciConnEntStatus, nscDxGlChanEntIpState=nscDxGlChanEntIpState, nscDxGlProfCuEntUnsolStatusOption=nscDxGlProfCuEntUnsolStatusOption, nscDxGlProfCuEntRmtBufferRequirements=nscDxGlProfCuEntRmtBufferRequirements, nscDxGlSesStatsEntInControlResps=nscDxGlSesStatsEntInControlResps, nscDxGlXportStatsEntBadXcbs=nscDxGlXportStatsEntBadXcbs, nscDxGlChanEntDsOverruns=nscDxGlChanEntDsOverruns, nscDxGlSesDevEntReserve=nscDxGlSesDevEntReserve, nscDxGlProfDevEntDevice=nscDxGlProfDevEntDevice, nscDxGlProfiles=nscDxGlProfiles, nscDxGlProfCuEntHostBufferHold=nscDxGlProfCuEntHostBufferHold, nscDxGlProfControlUnitTable=nscDxGlProfControlUnitTable, nscDxGlXportStatsEntOutConnects=nscDxGlXportStatsEntOutConnects, nscDxGlSesRciConnEntFlags=nscDxGlSesRciConnEntFlags, nscDxGlXportConnEntry=nscDxGlXportConnEntry, nscDxGlXportStatsEntInProbeResps=nscDxGlXportStatsEntInProbeResps, nscDxGlSesStatsTable=nscDxGlSesStatsTable, nscDxGlSesDevEntStat=nscDxGlSesDevEntStat, nscDxGlXportConnEntLocalAddress=nscDxGlXportConnEntLocalAddress, nscDxGlChanEntStatusWaitDiscIns=nscDxGlChanEntStatusWaitDiscIns, nscDxGlSesHciConnEntSendState=nscDxGlSesHciConnEntSendState, nscDxGlChanEntUnsupportedStatuses=nscDxGlChanEntUnsupportedStatuses, nscDxGlProfControlUnitEntry=nscDxGlProfControlUnitEntry, nscDxGlSesStatsEntRciPollStatus=nscDxGlSesStatsEntRciPollStatus, nscDxGlXportStatsEntBadChecksums=nscDxGlXportStatsEntBadChecksums, nscDxGlProfDeviceEntry=nscDxGlProfDeviceEntry, nscDxGlProfCuEntNumDevices=nscDxGlProfCuEntNumDevices, nscDxGlSesStatsEntInControlReqs=nscDxGlSesStatsEntInControlReqs, nscDxGlSesHciConnEntIpAddress=nscDxGlSesHciConnEntIpAddress, nscDxGlXportStatsEntReconns=nscDxGlXportStatsEntReconns, nscDxGlChanEntIplState=nscDxGlChanEntIplState, nscDxGlSesStatsEntRciMaxSessions=nscDxGlSesStatsEntRciMaxSessions, nscDxGlSesDevEntDevice=nscDxGlSesDevEntDevice, nscDxGlSesStatsEntInInvalids=nscDxGlSesStatsEntInInvalids, nscDxGlXportStatsEntInDataInWindows=nscDxGlXportStatsEntInDataInWindows, nscDxGlDevStatusEntKeyId=nscDxGlDevStatusEntKeyId, nscDxGlSesStatsEntOutDevStatResps=nscDxGlSesStatsEntOutDevStatResps, nscDxGlProfDeviceTable=nscDxGlProfDeviceTable, nscDxGlSesStatsEntInSenseReqs=nscDxGlSesStatsEntInSenseReqs, nscDxGlChanEntOpInActiveTimeouts=nscDxGlChanEntOpInActiveTimeouts, nscDxGlChanEntKeyId=nscDxGlChanEntKeyId, nscDxGlSesStatsEntInInitReqs=nscDxGlSesStatsEntInInitReqs, nscDxGlXportConnEntXopt=nscDxGlXportConnEntXopt, nscDxGlSesStatsEntOutInitResps=nscDxGlSesStatsEntOutInitResps, nscDxGlXportStatsEntInDataInvalids=nscDxGlXportStatsEntInDataInvalids, nscDxGlSesDevEntSenseData=nscDxGlSesDevEntSenseData, nscDxGlXportStatsEntNoHdrSpaces=nscDxGlXportStatsEntNoHdrSpaces, nscDxGlXportConnEntXcbFlags=nscDxGlXportConnEntXcbFlags, nscDxGlChanEntActivityState=nscDxGlChanEntActivityState, nscDxGlXportConnEntRoundTripTime=nscDxGlXportConnEntRoundTripTime, nscDxGlSesStatsEntKeyId=nscDxGlSesStatsEntKeyId, nscDxGlXportStatsEntConnTimeouts=nscDxGlXportStatsEntConnTimeouts, nscDxGlXportStatsEntNoMemorys=nscDxGlXportStatsEntNoMemorys, nscDxGlProfCuEntCuNum=nscDxGlProfCuEntCuNum, nscDxGlSesRciConnEntAddr=nscDxGlSesRciConnEntAddr, nscDxGlChanEntStatusWaitTimeouts=nscDxGlChanEntStatusWaitTimeouts, nscDxGlXportConnEntLocalPort=nscDxGlXportConnEntLocalPort, nscDxGreenline=nscDxGreenline, nscDxGlChanEntCmdParityErrors=nscDxGlChanEntCmdParityErrors, nscDxGlSesStatsEntOutInitReqs=nscDxGlSesStatsEntOutInitReqs, nscDxGlChanEntActiveSubchannel=nscDxGlChanEntActiveSubchannel, nscDxGlChannelEntry=nscDxGlChannelEntry, nscDxGlSesHciConnEntSesNum=nscDxGlSesHciConnEntSesNum, nscDxGlProfCuEntRmtIpAddr=nscDxGlProfCuEntRmtIpAddr, nscDxGlXportStatsEntOutNacks=nscDxGlXportStatsEntOutNacks, nscDxGlChanEntStatusAcceptDiscIns=nscDxGlChanEntStatusAcceptDiscIns, nscDxGlProfCuEntDevDriverOptions=nscDxGlProfCuEntDevDriverOptions, nscDxGlProfDevEntKeyId=nscDxGlProfDevEntKeyId, nscDxGlSesDevTable=nscDxGlSesDevTable, nscDxGlXportConnEntRemotePort=nscDxGlXportConnEntRemotePort, nscDxGlXportStatsEntry=nscDxGlXportStatsEntry, nscDxGlProfCuEntRmtStartingDevAddr=nscDxGlProfCuEntRmtStartingDevAddr, nscDxGlChanEntMemoryResourcesLimited=nscDxGlChanEntMemoryResourcesLimited, nscDxGlProfDevEntOnOff=nscDxGlProfDevEntOnOff, nscDxGlXportStatsEntInConnects=nscDxGlXportStatsEntInConnects, nscDxGlXportStatsEntOutProbeResps=nscDxGlXportStatsEntOutProbeResps)
