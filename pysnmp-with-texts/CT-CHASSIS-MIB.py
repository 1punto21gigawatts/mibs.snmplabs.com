#
# PySNMP MIB module CT-CHASSIS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CT-CHASSIS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:28:30 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint")
chassis, = mibBuilder.importSymbols("CTRON-MIB-NAMES", "chassis")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Gauge32, ModuleIdentity, IpAddress, NotificationType, Counter64, Counter32, TimeTicks, Integer32, MibIdentifier, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Bits, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "ModuleIdentity", "IpAddress", "NotificationType", "Counter64", "Counter32", "TimeTicks", "Integer32", "MibIdentifier", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Bits", "Unsigned32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
chType = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 2, 1), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chType.setStatus('mandatory')
if mibBuilder.loadTexts: chType.setDescription("Identifies the type of hub-based or standalone device. A vendor's authoritative identification of this chassis or device. By convention, this value is allocated within the SMI enterprises subtree(1.3.6.1.4.1), and provides an easy and unambiguous means for determining `what kind of box' is being managed. If this information is not present or unknown, its value should be set to the OBJECT IDENTIFIER { 0 0 }, which is a syntactically valid object identifier.")
chBackplaneTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 2, 2), )
if mibBuilder.loadTexts: chBackplaneTable.setStatus('mandatory')
if mibBuilder.loadTexts: chBackplaneTable.setDescription('A list of backplanes resident in this chassis.')
chBackplaneEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 2, 2, 1), ).setIndexNames((0, "CT-CHASSIS-MIB", "chBackplaneID"))
if mibBuilder.loadTexts: chBackplaneEntry.setStatus('mandatory')
if mibBuilder.loadTexts: chBackplaneEntry.setDescription('A backplane entry containing objects for a particular backplane.')
chBackplaneID = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chBackplaneID.setStatus('mandatory')
if mibBuilder.loadTexts: chBackplaneID.setDescription('An unique value identifying a backplane within the chassis.')
chBackplaneType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 2, 2, 1, 2), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chBackplaneType.setStatus('mandatory')
if mibBuilder.loadTexts: chBackplaneType.setDescription('An authoritative identification that is specific to the particular media being used to realize the backplane. For example, if the backplane is realized by an Ethernet, then the value of this object refers to a well known OID defined for Ethernet. If this information is not present or unknown, its value should be set to OBJECT IDENTIFIER { 0 0 }, which is a syntactically valid object identifier.')
chNumSlots = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chNumSlots.setStatus('mandatory')
if mibBuilder.loadTexts: chNumSlots.setDescription('Number of slots in a chassis. For bounded, slot-less systems, the value of this object shall be zero(0).')
chCompTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 2, 4), )
if mibBuilder.loadTexts: chCompTable.setStatus('mandatory')
if mibBuilder.loadTexts: chCompTable.setDescription('A list of components installed in this chassis.')
chCompEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 2, 4, 1), ).setIndexNames((0, "CT-CHASSIS-MIB", "chCompID"))
if mibBuilder.loadTexts: chCompEntry.setStatus('mandatory')
if mibBuilder.loadTexts: chCompEntry.setDescription('A component entry containing objects for a particular component.')
chCompID = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 2, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chCompID.setStatus('mandatory')
if mibBuilder.loadTexts: chCompID.setDescription('An unique value identifying a component, which includes, but is not limited to, routers, bridges, and terminal servers. Multiple instances of a functional device may exist within the same chassis.')
chCompAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("unknown", 1), ("invalid", 2), ("enabled", 3), ("testing", 4), ("operational", 5), ("error", 6), ("disabled", 7), ("delete", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chCompAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: chCompAdminStatus.setDescription('Provides the state of the given component. A component is activated by writing a value of enabled(3). Once enabled, a component enters testing mode, which is denoted by testing(4), when this object is read. After tests are complete, the component either enters the operational(5), or the error(6) state. The component may be de-activated by writing a value of disabled(7). In a disabled state, a component does exist within the given chassis, but is benign. A disabled component is available for subsequent activation.')
chCompArg = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 2, 4, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chCompArg.setStatus('mandatory')
if mibBuilder.loadTexts: chCompArg.setDescription('A variable that may be passed to a component, when it is being either enabled or disabled.')
chCompType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 2, 4, 1, 4), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chCompType.setStatus('mandatory')
if mibBuilder.loadTexts: chCompType.setDescription("Identifies a component within this chassis. A vendor's authoritative identification of this component type. By convention, this value is allocated within the SMI enterprises subtree(1.3.6.1.4.1), and provides an easy and unambiguous means for determining the component type. If this information is not present or unknown, its value should be set to the OBJECT IDENTIFIER { 0 0 }, which is a syntactically valid object identifier.")
chCompName = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 2, 4, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chCompName.setStatus('mandatory')
if mibBuilder.loadTexts: chCompName.setDescription('A textual description of the component.')
chCompVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 2, 4, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chCompVersion.setStatus('mandatory')
if mibBuilder.loadTexts: chCompVersion.setDescription("A textual description of the version/revision level for this component's software.")
chCompTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 2, 4, 1, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chCompTimeStamp.setStatus('mandatory')
if mibBuilder.loadTexts: chCompTimeStamp.setDescription('The value of sysUpTime of this management entity, when this component was last (re-)initialized.')
chCompAccessPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 2, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("invalid", 2), ("same", 3), ("otherCommStr", 4), ("other", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chCompAccessPolicy.setStatus('mandatory')
if mibBuilder.loadTexts: chCompAccessPolicy.setDescription('Defines access information for the pertinent component.')
chCompBasicCommStr = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 2, 4, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chCompBasicCommStr.setStatus('mandatory')
if mibBuilder.loadTexts: chCompBasicCommStr.setDescription('Read-only community string for the pertinent component. If the value of chCompAccessPolicy is otherCommStr(4) or other(5), then this object shall determine the read-only Community String to be used when accessing this component. This also defined the basic read only community string to access MIBs registered to this component.')
chCompROCommStr = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 2, 4, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chCompROCommStr.setStatus('mandatory')
if mibBuilder.loadTexts: chCompROCommStr.setDescription('Read-only community string for the pertinent component. If the value of chCompAccessPolicy is otherCommStr(4) or other(5), then this object shall determine the read-only Community String to be used when accessing this component. This also defined the read only community string to access MIBs registered to this component.')
chCompRWCommStr = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 2, 4, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chCompRWCommStr.setStatus('mandatory')
if mibBuilder.loadTexts: chCompRWCommStr.setDescription('Read-write community string for the pertinent component. If the value of chCompAccessPolicy is otherCommStr(4) or other(5), then this object shall determine the read-write Community String to be used when accessing this component. This also defined the read write community string to access MIBs registered to this component.')
chCompSUCommStr = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 2, 4, 1, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chCompSUCommStr.setStatus('mandatory')
if mibBuilder.loadTexts: chCompSUCommStr.setDescription('Super user community string for the pertinent component. If the value of chCompAccessPolicy is otherCommStr(4) or other(5), then this object shall determine the read-write Community String to be used when accessing this component. This also defined the read write community string to access MIBs registered to this component.')
chCompNetAdr = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 2, 4, 1, 13), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chCompNetAdr.setStatus('mandatory')
if mibBuilder.loadTexts: chCompNetAdr.setDescription('If the value of chCompAccessPolicy is other(5), then this object shall determine the Network Address to be used to access this component. In all other cases, a value of 0.0.0.0 shall be returned, when read.')
chSlotTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 2, 5), )
if mibBuilder.loadTexts: chSlotTable.setStatus('mandatory')
if mibBuilder.loadTexts: chSlotTable.setDescription('A list of modules installed in this chassis. A component, such as a router, may be incorporated on one or more modules. More than one component may be incorporated on each module.')
chSlotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 2, 5, 1), ).setIndexNames((0, "CT-CHASSIS-MIB", "chSlotID"), (0, "CT-CHASSIS-MIB", "chSlotCompID"))
if mibBuilder.loadTexts: chSlotEntry.setStatus('mandatory')
if mibBuilder.loadTexts: chSlotEntry.setDescription('A slot entry containing objects for a particular module.')
chSlotID = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 2, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSlotID.setStatus('mandatory')
if mibBuilder.loadTexts: chSlotID.setDescription('The slot number containing this module. An unique value, in the range between 0 and and the value of chNumSlots.')
chSlotCompID = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 2, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSlotCompID.setStatus('mandatory')
if mibBuilder.loadTexts: chSlotCompID.setDescription('The ID value for the component incorporated within this module. This object is similar to chCompID.')
chSlotClass = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 2, 5, 1, 3), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSlotClass.setStatus('mandatory')
if mibBuilder.loadTexts: chSlotClass.setDescription('The class (or type) of slot. For example, slots that only allow for power supply modules fall into a class that is different from slots that allow only interface cards.')
chSlotModuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 2, 5, 1, 4), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSlotModuleType.setStatus('mandatory')
if mibBuilder.loadTexts: chSlotModuleType.setDescription("Uniquely defines the module type. A vendor's authoritative identification for a module. By convention, this value is allocated within the SMI enterprises subtree(1.3.6.1.4.1), and provides an easy and unambiguous means for determining the type of module.")
chSlotModuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 2, 5, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chSlotModuleName.setStatus('mandatory')
if mibBuilder.loadTexts: chSlotModuleName.setDescription('A textual description of the module.')
chSlotModuleVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 2, 5, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSlotModuleVersion.setStatus('mandatory')
if mibBuilder.loadTexts: chSlotModuleVersion.setDescription("A textual description of the version/revision level for this module's hardware and firmware.")
chSlotModuleTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 2, 5, 1, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSlotModuleTimeStamp.setStatus('mandatory')
if mibBuilder.loadTexts: chSlotModuleTimeStamp.setDescription('The value of sysUpTime for this management entity, when this module was last (re-)initialized.')
chCompMIBTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 2, 6), )
if mibBuilder.loadTexts: chCompMIBTable.setStatus('deprecated')
if mibBuilder.loadTexts: chCompMIBTable.setDescription('A list of MIBs incorporated on components and their respective modules, within this chassis.')
chCompMIBEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 2, 6, 1), ).setIndexNames((0, "CT-CHASSIS-MIB", "chCompMIBID"), (0, "CT-CHASSIS-MIB", "chCompMIBSlotID"), (0, "CT-CHASSIS-MIB", "chCompMIBCompID"))
if mibBuilder.loadTexts: chCompMIBEntry.setStatus('deprecated')
if mibBuilder.loadTexts: chCompMIBEntry.setDescription('A MIB entry containing objects for a MIB that is realized by a particular module.')
chCompMIBID = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 2, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chCompMIBID.setStatus('deprecated')
if mibBuilder.loadTexts: chCompMIBID.setDescription('An unique value identifying an instance of a MIB.')
chCompMIBSlotID = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 2, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chCompMIBSlotID.setStatus('deprecated')
if mibBuilder.loadTexts: chCompMIBSlotID.setDescription('The slot number for the module that incorporates this MIB. The value shall be in the range between 0 and chNumSlots. A non-zero values indicates that the information presented by this entry is realized only on the module in the specified slot. A zero value indicates that this information pertains to the entire component, without partitioning across modules. This object is similar to chSlotID.')
chCompMIBCompID = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 2, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chCompMIBCompID.setStatus('deprecated')
if mibBuilder.loadTexts: chCompMIBCompID.setDescription('The component related to this MIB. This object is similar to chCompID.')
chCompMIBGrpOID = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 2, 6, 1, 4), ObjectIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chCompMIBGrpOID.setStatus('deprecated')
if mibBuilder.loadTexts: chCompMIBGrpOID.setDescription('A reference to a specific MIB group definition. For example, in the case of MIB-II, the value of this object may refer to an applicable group, which has been implemented. The access is read-write. This will allow network administrators, to register MIBs for a module that is known to the chassis management entity, by type alone: that is, a module for which component information is unknown.')
chCompMIBVectorObjectBase = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 2, 6, 1, 5), ObjectIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chCompMIBVectorObjectBase.setStatus('deprecated')
if mibBuilder.loadTexts: chCompMIBVectorObjectBase.setDescription('A reference to a specific entry of a vector object within this MIB, associated with the module identified by chCompMIBSlotID. For example, in the case of a repeater, the value of this object may refer to an entry in prtrBasicPortTable. This object facilitates logical to physical mapping of entities such as channels, links, interfaces, and ports.')
chCompMIBVectorNum = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 2, 6, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chCompMIBVectorNum.setStatus('deprecated')
if mibBuilder.loadTexts: chCompMIBVectorNum.setDescription('A value indicating the number of entries, starting with the one denoted by chCompMIBVectorObjectBase, that are realized on this module.')
chCompMIBType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 2, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("not-instanced", 1), ("instanced", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chCompMIBType.setStatus('deprecated')
if mibBuilder.loadTexts: chCompMIBType.setDescription('Depicts whether the MIB in question is instanced or not. For reason similar to ones that apply to chCompMIBGrpOID, the access mode is read-write.')
chCompMIBStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 2, 6, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("invalid", 2), ("agent", 3), ("management", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chCompMIBStatus.setStatus('deprecated')
if mibBuilder.loadTexts: chCompMIBStatus.setDescription('Depicts the status of the MIB. If marked as agent the MIB is generated based upon the components defined. If marked as management the entry was entered via a management station. If marked invalid the entry is to be deleted.')
chPhysicalChanges = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 2, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chPhysicalChanges.setStatus('deprecated')
if mibBuilder.loadTexts: chPhysicalChanges.setDescription('Depicts the number of physical changes that have occured to the chassis MIB. This includes additions and removal of components in the component table.')
chLogicalChanges = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 2, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chLogicalChanges.setStatus('deprecated')
if mibBuilder.loadTexts: chLogicalChanges.setDescription('Depicts the number of logical changes that have occured to the chassis MIB. This includes all sets to name strings etc.')
chCompGlobalBasicCommStr = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 2, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 27))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chCompGlobalBasicCommStr.setStatus('mandatory')
if mibBuilder.loadTexts: chCompGlobalBasicCommStr.setDescription('This is defined as the base read only community string to access MIBs on this module. A write to this object will change all instances of chCompBasicCommStr.')
chCompGlobalROCommStr = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 2, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 27))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chCompGlobalROCommStr.setStatus('mandatory')
if mibBuilder.loadTexts: chCompGlobalROCommStr.setDescription('This is defined as the expanded read only community string to access MIBs on this module. A write to this object will change all instances of chCompROCommStr.')
chCompGlobalRWCommStr = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 2, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 27))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chCompGlobalRWCommStr.setStatus('mandatory')
if mibBuilder.loadTexts: chCompGlobalRWCommStr.setDescription('This is defined as the read write community string to access MIBs on this module. A write to this object will change all instances of chCompRWCommStr.')
chCompGlobalSUCommStr = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 2, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 27))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chCompGlobalSUCommStr.setStatus('mandatory')
if mibBuilder.loadTexts: chCompGlobalSUCommStr.setDescription('This is defined as the super user community string to access MIBs on this module. A write to this object will change all instances of chCompSUCommStr.')
mibBuilder.exportSymbols("CT-CHASSIS-MIB", chCompMIBID=chCompMIBID, chSlotTable=chSlotTable, chBackplaneTable=chBackplaneTable, chCompEntry=chCompEntry, chCompNetAdr=chCompNetAdr, chCompBasicCommStr=chCompBasicCommStr, chCompGlobalBasicCommStr=chCompGlobalBasicCommStr, chCompAccessPolicy=chCompAccessPolicy, chSlotClass=chSlotClass, chCompMIBSlotID=chCompMIBSlotID, chCompName=chCompName, chBackplaneEntry=chBackplaneEntry, chCompID=chCompID, chCompMIBVectorObjectBase=chCompMIBVectorObjectBase, chSlotModuleVersion=chSlotModuleVersion, chSlotModuleTimeStamp=chSlotModuleTimeStamp, chSlotModuleName=chSlotModuleName, chCompAdminStatus=chCompAdminStatus, chCompMIBGrpOID=chCompMIBGrpOID, chCompGlobalROCommStr=chCompGlobalROCommStr, chCompType=chCompType, chSlotID=chSlotID, chCompGlobalRWCommStr=chCompGlobalRWCommStr, chCompMIBCompID=chCompMIBCompID, chCompMIBEntry=chCompMIBEntry, chCompSUCommStr=chCompSUCommStr, chCompGlobalSUCommStr=chCompGlobalSUCommStr, chCompMIBTable=chCompMIBTable, chCompMIBType=chCompMIBType, chSlotEntry=chSlotEntry, chCompVersion=chCompVersion, chType=chType, chCompMIBStatus=chCompMIBStatus, chCompRWCommStr=chCompRWCommStr, chLogicalChanges=chLogicalChanges, chCompTable=chCompTable, chCompTimeStamp=chCompTimeStamp, chPhysicalChanges=chPhysicalChanges, chCompROCommStr=chCompROCommStr, chCompArg=chCompArg, chBackplaneID=chBackplaneID, chBackplaneType=chBackplaneType, chNumSlots=chNumSlots, chSlotModuleType=chSlotModuleType, chSlotCompID=chSlotCompID, chCompMIBVectorNum=chCompMIBVectorNum)
