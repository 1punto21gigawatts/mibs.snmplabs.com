#
# PySNMP MIB module CISCO-IPSLA-ECHO-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-IPSLA-ECHO-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:02:37 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
InetPortNumber, InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetPortNumber", "InetAddressType", "InetAddress")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
ObjectIdentity, IpAddress, Bits, Gauge32, NotificationType, ModuleIdentity, MibIdentifier, Counter32, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Counter64, Integer32, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "IpAddress", "Bits", "Gauge32", "NotificationType", "ModuleIdentity", "MibIdentifier", "Counter32", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Counter64", "Integer32", "Unsigned32")
StorageType, TextualConvention, RowStatus, DisplayString, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "StorageType", "TextualConvention", "RowStatus", "DisplayString", "TruthValue")
ciscoIpSlaEchoMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 636))
ciscoIpSlaEchoMIB.setRevisions(('2007-08-16 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoIpSlaEchoMIB.setRevisionsDescriptions(('Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoIpSlaEchoMIB.setLastUpdated('200708160000Z')
if mibBuilder.loadTexts: ciscoIpSlaEchoMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoIpSlaEchoMIB.setContactInfo('Cisco Systems, Inc. Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 Tel: +1 800 553 NETS Email: cs-ipsla@cisco.com')
if mibBuilder.loadTexts: ciscoIpSlaEchoMIB.setDescription('This MIB module defines the templates for IP SLA operations of ICMP echo, UDP echo and TCP connect. The ICMP echo operation measures end-to-end response time between a Cisco router and any IP enabled device by computing the time taken between sending an ICMP echo request message to the destination and receiving an ICMP echo reply. The UDP echo operation measures end-to-end response time between a Cisco router and any IP enabled device by computing the time taken between sending an UDP echo request message to the destination and receiving an UDP echo reply. The TCP connect operation measures end-to-end response time between a Cisco router and any IP enabled device by computing the time taken to perform a TCP connect operation.')
ciscoIpSlaEchoMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 636, 0))
ciscoIpSlaEchoMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 636, 1))
cipslaIcmpEchoTmplTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 636, 1, 1), )
if mibBuilder.loadTexts: cipslaIcmpEchoTmplTable.setStatus('current')
if mibBuilder.loadTexts: cipslaIcmpEchoTmplTable.setDescription('A table that contains ICMP echo template definitions.')
cipslaIcmpEchoTmplEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 636, 1, 1, 1), ).setIndexNames((0, "CISCO-IPSLA-ECHO-MIB", "cipslaIcmpEchoTmplName"))
if mibBuilder.loadTexts: cipslaIcmpEchoTmplEntry.setStatus('current')
if mibBuilder.loadTexts: cipslaIcmpEchoTmplEntry.setDescription('A row entry representing an IPSLA ICMP echo template.')
cipslaIcmpEchoTmplName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 636, 1, 1, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 64)))
if mibBuilder.loadTexts: cipslaIcmpEchoTmplName.setStatus('current')
if mibBuilder.loadTexts: cipslaIcmpEchoTmplName.setDescription('This field is used to specify the ICMP echo template name.')
cipslaIcmpEchoTmplDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 636, 1, 1, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cipslaIcmpEchoTmplDescription.setStatus('current')
if mibBuilder.loadTexts: cipslaIcmpEchoTmplDescription.setDescription('This field is used to provide description for the ICMP echo template.')
cipslaIcmpEchoTmplSrcAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 636, 1, 1, 1, 3), InetAddressType().clone('ipv4')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cipslaIcmpEchoTmplSrcAddrType.setStatus('current')
if mibBuilder.loadTexts: cipslaIcmpEchoTmplSrcAddrType.setDescription('An enumerated value which specifies the IP address type of the source. It must be used along with the cipslaIcmpEchoTmplSrcAddr object.')
cipslaIcmpEchoTmplSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 636, 1, 1, 1, 4), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cipslaIcmpEchoTmplSrcAddr.setStatus('current')
if mibBuilder.loadTexts: cipslaIcmpEchoTmplSrcAddr.setDescription('A string which specifies the IP address of the source.')
cipslaIcmpEchoTmplTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 636, 1, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 604800000)).clone(5000)).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cipslaIcmpEchoTmplTimeOut.setStatus('current')
if mibBuilder.loadTexts: cipslaIcmpEchoTmplTimeOut.setDescription('Specifies the duration to wait for a IP SLA operation completion. For connection oriented protocols, this may cause the connection to be closed by the operation. Once closed, it will be assumed that the connection reestablishment will be performed. To prevent unwanted closure of connections, be sure to set this value to a realistic connection timeout.')
cipslaIcmpEchoTmplVerifyData = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 636, 1, 1, 1, 6), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cipslaIcmpEchoTmplVerifyData.setStatus('current')
if mibBuilder.loadTexts: cipslaIcmpEchoTmplVerifyData.setDescription('When set to true, the resulting data in each IP SLA operation is compared with the expected data. This includes checking header information (if possible) and exact packet size.')
cipslaIcmpEchoTmplReqDataSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 636, 1, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16384)).clone(28)).setUnits('octets').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cipslaIcmpEchoTmplReqDataSize.setStatus('current')
if mibBuilder.loadTexts: cipslaIcmpEchoTmplReqDataSize.setDescription("This object represents the number of octets to be placed into the ARR Data portion of the request message, when using SNA protocols. For non-ARR protocols' IP SLA request/responses, this value represents the native payload size. REMEMBER: The ARR Header overhead is not included in this value.")
cipslaIcmpEchoTmplTOS = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 636, 1, 1, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cipslaIcmpEchoTmplTOS.setReference('Refer to the following documents for TOS definition. RFC791/1349 for IPv4, IPv6, draft-ietf-diffserv-header-02.txt')
if mibBuilder.loadTexts: cipslaIcmpEchoTmplTOS.setStatus('current')
if mibBuilder.loadTexts: cipslaIcmpEchoTmplTOS.setDescription('This object represents the type of service octet in an IP header.')
cipslaIcmpEchoTmplVrfName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 636, 1, 1, 1, 9), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cipslaIcmpEchoTmplVrfName.setStatus('current')
if mibBuilder.loadTexts: cipslaIcmpEchoTmplVrfName.setDescription('This field is used to specify the VRF name with which the IP SLA operation will be used. For regular IP SLA operation this field should not be configured. The agent will use this field to identify the VRF routing table for this operation.')
cipslaIcmpEchoTmplThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 636, 1, 1, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(5000)).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cipslaIcmpEchoTmplThreshold.setStatus('current')
if mibBuilder.loadTexts: cipslaIcmpEchoTmplThreshold.setDescription('This object defines an administrative threshold limit. If the IP SLA operation time exceeds this limit and if the condition specified in cipslaIcmpEchoTmplHistFilter is satisfied, one threshold crossing occurrence will be counted.')
cipslaIcmpEchoTmplHistLives = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 636, 1, 1, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cipslaIcmpEchoTmplHistLives.setStatus('current')
if mibBuilder.loadTexts: cipslaIcmpEchoTmplHistLives.setDescription('The maximum number of history lives to record. A life is defined by the countdown (or transition) to zero by the cipslaAutoGroupScheduleLife object. A new life is created when the same conceptual control row is restarted via the transition of the cipslaAutoGroupScheduleLife object and its subsequent countdown. The value of zero will shut off all data collection.')
cipslaIcmpEchoTmplHistBuckets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 636, 1, 1, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 60)).clone(15)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cipslaIcmpEchoTmplHistBuckets.setStatus('current')
if mibBuilder.loadTexts: cipslaIcmpEchoTmplHistBuckets.setDescription('The maximum number of history buckets to record. This value is set to the number of operations to keep per lifetime. After cipslaIcmpEchoTmplHistBuckets are filled, the oldest entries are deleted and the most recent cipslaIcmpEchoTmplHistBuckets buckets are retained.')
cipslaIcmpEchoTmplHistFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 636, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("all", 2), ("overThreshold", 3), ("failures", 4))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cipslaIcmpEchoTmplHistFilter.setStatus('current')
if mibBuilder.loadTexts: cipslaIcmpEchoTmplHistFilter.setDescription('Defines a filter for adding RTT results to the history buffer: none(1) - no history is recorded all(2) - the results of all completion times and failed completions are recorded overThreshold(3) - the results of completion times over cipslaIcmpEchoTmplThreshold are recorded. failures(4) - the results of failed operations (only) are recorded.')
cipslaIcmpEchoTmplStatsHours = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 636, 1, 1, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 25)).clone(2)).setUnits('hours').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cipslaIcmpEchoTmplStatsHours.setStatus('current')
if mibBuilder.loadTexts: cipslaIcmpEchoTmplStatsHours.setDescription('The maximum number of hours for which statistics are maintained. Specifically this is the number of hourly groups to keep before rolling over. The value of one is not advisable because the hourly group will close and immediately be deleted before the network management station will have the opportunity to retrieve the statistics. The value of zero will shut off data collection.')
cipslaIcmpEchoTmplDistBuckets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 636, 1, 1, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cipslaIcmpEchoTmplDistBuckets.setStatus('current')
if mibBuilder.loadTexts: cipslaIcmpEchoTmplDistBuckets.setDescription('The maximum number of statistical distribution buckets to accumulate. Since this index does not rollover, only the first cipslaIcmpEchoTmplStatsNumDistBuckets will be kept. The last cipslaIcmpEchoTmplStatsNumDistBucket will contain all entries from its distribution interval start point to infinity.')
cipslaIcmpEchoTmplDistInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 636, 1, 1, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(20)).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cipslaIcmpEchoTmplDistInterval.setStatus('current')
if mibBuilder.loadTexts: cipslaIcmpEchoTmplDistInterval.setDescription('The statistical distribution buckets interval. Distribution Bucket Example: cipslaIcmpEchoTmplDistBuckets = 5 buckets cipslaIcmpEchoTmplDistInterval = 10 milliseconds | Bucket 1 | Bucket 2 | Bucket 3 | Bucket 4 | Bucket 5 | | 0-9 ms | 10-19 ms | 20-29 ms | 30-39 ms | 40-Inf ms | Odd Example: cipslaIcmpEchoTmplDistBuckets = 1 buckets cipslaIcmpEchoTmplDistInterval = 10 milliseconds | Bucket 1 | | 0-Inf ms | Thus, this odd example shows that the value of cipslaIcmpEchoTmplDistInterval does not apply when cipslaIcmpEchoTmplDistBuckets is one.')
cipslaIcmpEchoTmplStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 636, 1, 1, 1, 17), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cipslaIcmpEchoTmplStorageType.setStatus('current')
if mibBuilder.loadTexts: cipslaIcmpEchoTmplStorageType.setDescription('The storage type of this conceptual row.')
cipslaIcmpEchoTmplRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 636, 1, 1, 1, 18), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cipslaIcmpEchoTmplRowStatus.setStatus('current')
if mibBuilder.loadTexts: cipslaIcmpEchoTmplRowStatus.setDescription('The status of the conceptual ICMP echo template control row. When the status is active, all the read-create objects in that row can be modified.')
cipslaUdpEchoTmplTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 636, 1, 2), )
if mibBuilder.loadTexts: cipslaUdpEchoTmplTable.setStatus('current')
if mibBuilder.loadTexts: cipslaUdpEchoTmplTable.setDescription('A table that contains UDP echo template specific definitions.')
cipslaUdpEchoTmplEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 636, 1, 2, 1), ).setIndexNames((0, "CISCO-IPSLA-ECHO-MIB", "cipslaUdpEchoTmplName"))
if mibBuilder.loadTexts: cipslaUdpEchoTmplEntry.setStatus('current')
if mibBuilder.loadTexts: cipslaUdpEchoTmplEntry.setDescription('A row entry representing an IPSLA UDP echo template.')
cipslaUdpEchoTmplName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 636, 1, 2, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 64)))
if mibBuilder.loadTexts: cipslaUdpEchoTmplName.setStatus('current')
if mibBuilder.loadTexts: cipslaUdpEchoTmplName.setDescription('A string which specifies the UDP echo template name.')
cipslaUdpEchoTmplDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 636, 1, 2, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cipslaUdpEchoTmplDescription.setStatus('current')
if mibBuilder.loadTexts: cipslaUdpEchoTmplDescription.setDescription('A string which provides description to the UDP echo template.')
cipslaUdpEchoTmplControlEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 636, 1, 2, 1, 3), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cipslaUdpEchoTmplControlEnable.setStatus('current')
if mibBuilder.loadTexts: cipslaUdpEchoTmplControlEnable.setDescription('If this object is enabled, then the IP SLA application will send control messages to a responder, residing on the target router to respond to the data request packets being sent by the source router.')
cipslaUdpEchoTmplSrcAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 636, 1, 2, 1, 4), InetAddressType().clone('ipv4')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cipslaUdpEchoTmplSrcAddrType.setStatus('current')
if mibBuilder.loadTexts: cipslaUdpEchoTmplSrcAddrType.setDescription('An enumerated value which specifies the IP address type of the source. It must be used along with the cipslaUdpEchoTmplSrcAddr object.')
cipslaUdpEchoTmplSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 636, 1, 2, 1, 5), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cipslaUdpEchoTmplSrcAddr.setStatus('current')
if mibBuilder.loadTexts: cipslaUdpEchoTmplSrcAddr.setDescription('A string which specifies the IP address of the source.')
cipslaUdpEchoTmplSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 636, 1, 2, 1, 6), InetPortNumber()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cipslaUdpEchoTmplSrcPort.setStatus('current')
if mibBuilder.loadTexts: cipslaUdpEchoTmplSrcPort.setDescription("This object represents the source's port number. If this object is not specified, the application will get a port allocated by the system.")
cipslaUdpEchoTmplTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 636, 1, 2, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 604800000)).clone(5000)).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cipslaUdpEchoTmplTimeOut.setStatus('current')
if mibBuilder.loadTexts: cipslaUdpEchoTmplTimeOut.setDescription('Specifies the duration to wait for an IP SLA operation completion. For connection oriented protocols, this may cause the connection to be closed by the operation. Once closed, it will be assumed that the connection reestablishment will be performed. To prevent unwanted closure of connections, be sure to set this value to a realistic connection timeout.')
cipslaUdpEchoTmplVerifyData = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 636, 1, 2, 1, 8), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cipslaUdpEchoTmplVerifyData.setStatus('current')
if mibBuilder.loadTexts: cipslaUdpEchoTmplVerifyData.setDescription('When set to true, the resulting data in each IP SLA operation is compared with the expected data. This includes checking header information (if possible) and exact packet size.')
cipslaUdpEchoTmplReqDataSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 636, 1, 2, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(4, 1500)).clone(16)).setUnits('octets').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cipslaUdpEchoTmplReqDataSize.setStatus('current')
if mibBuilder.loadTexts: cipslaUdpEchoTmplReqDataSize.setDescription("This object represents the number of octets to be placed into the ARR Data portion of the request message, when using SNA protocols. For non-ARR protocols' RTT request/responses, this value represents the native payload size. REMEMBER: The ARR Header overhead is not included in this value.")
cipslaUdpEchoTmplTOS = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 636, 1, 2, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cipslaUdpEchoTmplTOS.setReference('Refer to the following documents for TOS definition. RFC791/1349 for IPv4, IPv6, draft-ietf-diffserv-header-02.txt')
if mibBuilder.loadTexts: cipslaUdpEchoTmplTOS.setStatus('current')
if mibBuilder.loadTexts: cipslaUdpEchoTmplTOS.setDescription('This object represents the type of service octet in an IP header.')
cipslaUdpEchoTmplVrfName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 636, 1, 2, 1, 11), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cipslaUdpEchoTmplVrfName.setStatus('current')
if mibBuilder.loadTexts: cipslaUdpEchoTmplVrfName.setDescription('This field is used to specify the VRF name with which the IP SLA operation will be used. For regular IP SLA operation this field should not be configured. The agent will use this field to identify the VRF routing Table for this operation.')
cipslaUdpEchoTmplThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 636, 1, 2, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(5000)).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cipslaUdpEchoTmplThreshold.setStatus('current')
if mibBuilder.loadTexts: cipslaUdpEchoTmplThreshold.setDescription('This object defines an administrative threshold limit. If the IP SLA operation time exceeds this limit and if the condition specified in cipslaUdpEchoTmplHistFilter is satisfied, one threshold crossing occurrence will be counted.')
cipslaUdpEchoTmplHistLives = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 636, 1, 2, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cipslaUdpEchoTmplHistLives.setStatus('current')
if mibBuilder.loadTexts: cipslaUdpEchoTmplHistLives.setDescription('The maximum number of history lives to record. A life is defined by the countdown (or transition) to zero by the cipslaAutoGroupScheduleLife object. A new life is created when the same conceptual control row is restarted via the transition of the cipslaAutoGroupScheduleLife object and its subsequent countdown. The value of zero will shut off all data collection.')
cipslaUdpEchoTmplHistBuckets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 636, 1, 2, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 60)).clone(15)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cipslaUdpEchoTmplHistBuckets.setStatus('current')
if mibBuilder.loadTexts: cipslaUdpEchoTmplHistBuckets.setDescription('The maximum number of history buckets to record. This value should be set to the number of operations to keep per lifetime. After cipslaUdpEchoTmplHistBuckets are filled, the oldest entries are deleted and the most recent cipslaUdpEchoTmplHistBuckets buckets are retained.')
cipslaUdpEchoTmplHistFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 636, 1, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("all", 2), ("overThreshold", 3), ("failures", 4))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cipslaUdpEchoTmplHistFilter.setStatus('current')
if mibBuilder.loadTexts: cipslaUdpEchoTmplHistFilter.setDescription('Defines a filter for adding RTT results to the history buffer: none(1) - no history is recorded all(2) - the results of all completion times and failed completions are recorded overThreshold(3) - the results of completion times over cipslaUdpEchoTmplThreshold are recorded. failures(4) - the results of failed operations (only) are recorded.')
cipslaUdpEchoTmplStatsHours = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 636, 1, 2, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 25)).clone(2)).setUnits('hours').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cipslaUdpEchoTmplStatsHours.setStatus('current')
if mibBuilder.loadTexts: cipslaUdpEchoTmplStatsHours.setDescription('The maximum number of hours for which statistics are maintained. Specifically this is the number of hourly groups to keep before rolling over. The value of one is not advisable because the hourly group will close and immediately be deleted before the network management station will have the opportunity to retrieve the statistics. The value of zero will shut off data collection.')
cipslaUdpEchoTmplDistBuckets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 636, 1, 2, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cipslaUdpEchoTmplDistBuckets.setStatus('current')
if mibBuilder.loadTexts: cipslaUdpEchoTmplDistBuckets.setDescription('The maximum number of statistical distribution buckets to accumulate. Since this index does not rollover, only the first cipslaUdpEchoTmplStatsNumDistBuckets will be kept. The last cipslaUdpEchoTmplStatsNumDistBuckets will contain all entries from its distribution interval start point to infinity.')
cipslaUdpEchoTmplDistInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 636, 1, 2, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(20)).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cipslaUdpEchoTmplDistInterval.setStatus('current')
if mibBuilder.loadTexts: cipslaUdpEchoTmplDistInterval.setDescription('The statistical distribution buckets interval. Distribution Bucket Example: cipslaUdpEchoTmplDistBuckets = 5 buckets cipslaUdpEchoTmplDistInterval = 10 milliseconds | Bucket 1 | Bucket 2 | Bucket 3 | Bucket 4 | Bucket 5 | | 0-9 ms | 10-19 ms | 20-29 ms | 30-39 ms | 40-Inf ms | Odd Example: cipslaUdpEchoTmplDistBuckets = 1 buckets cipslaUdpEchoTmplDistInterval = 10 milliseconds | Bucket 1 | | 0-Inf ms | Thus, this odd example shows that the value of cipslaUdpEchoTmplDistInterval does not apply when cipslaUdpEchoTmplDistBuckets is one.')
cipslaUdpEchoTmplStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 636, 1, 2, 1, 19), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cipslaUdpEchoTmplStorageType.setStatus('current')
if mibBuilder.loadTexts: cipslaUdpEchoTmplStorageType.setDescription('The storage type of this conceptual row.')
cipslaUdpEchoTmplRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 636, 1, 2, 1, 20), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cipslaUdpEchoTmplRowStatus.setStatus('current')
if mibBuilder.loadTexts: cipslaUdpEchoTmplRowStatus.setDescription('The status of the conceptual UDP echo template control row. When the status is active, all the read-create objects in that row can be modified.')
cipslaTcpConnTmplTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 636, 1, 3), )
if mibBuilder.loadTexts: cipslaTcpConnTmplTable.setStatus('current')
if mibBuilder.loadTexts: cipslaTcpConnTmplTable.setDescription('A table that contains TCP connect template specific definitions.')
cipslaTcpConnTmplEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 636, 1, 3, 1), ).setIndexNames((0, "CISCO-IPSLA-ECHO-MIB", "cipslaTcpConnTmplName"))
if mibBuilder.loadTexts: cipslaTcpConnTmplEntry.setStatus('current')
if mibBuilder.loadTexts: cipslaTcpConnTmplEntry.setDescription('A row entry representing an IPSLA TCP connect template.')
cipslaTcpConnTmplName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 636, 1, 3, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 64)))
if mibBuilder.loadTexts: cipslaTcpConnTmplName.setStatus('current')
if mibBuilder.loadTexts: cipslaTcpConnTmplName.setDescription('A string which specifies the TCP connect template name.')
cipslaTcpConnTmplDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 636, 1, 3, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cipslaTcpConnTmplDescription.setStatus('current')
if mibBuilder.loadTexts: cipslaTcpConnTmplDescription.setDescription('A string which provides description for the TCP connect template.')
cipslaTcpConnTmplControlEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 636, 1, 3, 1, 3), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cipslaTcpConnTmplControlEnable.setStatus('current')
if mibBuilder.loadTexts: cipslaTcpConnTmplControlEnable.setDescription('If this object is enabled, then the IP SLA application will send control messages to a responder, residing on the target router to respond to the data request packets being sent by the source router.')
cipslaTcpConnTmplSrcAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 636, 1, 3, 1, 4), InetAddressType().clone('ipv4')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cipslaTcpConnTmplSrcAddrType.setStatus('current')
if mibBuilder.loadTexts: cipslaTcpConnTmplSrcAddrType.setDescription('An enumerated value which specifies the IP address type of the source. It must be used along with the cipslaTcpConnTmplSrcAddr object.')
cipslaTcpConnTmplSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 636, 1, 3, 1, 5), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cipslaTcpConnTmplSrcAddr.setStatus('current')
if mibBuilder.loadTexts: cipslaTcpConnTmplSrcAddr.setDescription('A string which specifies the IP address of the source.')
cipslaTcpConnTmplSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 636, 1, 3, 1, 6), InetPortNumber()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cipslaTcpConnTmplSrcPort.setStatus('current')
if mibBuilder.loadTexts: cipslaTcpConnTmplSrcPort.setDescription("This object represents the source's port number. If this object is not specified, the application will get a port allocated by the system.")
cipslaTcpConnTmplTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 636, 1, 3, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 604800000)).clone(5000)).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cipslaTcpConnTmplTimeOut.setStatus('current')
if mibBuilder.loadTexts: cipslaTcpConnTmplTimeOut.setDescription('Specifies the duration to wait for an IP SLA operation completion. For connection oriented protocols, this may cause the connection to be closed by the operation. Once closed, it will be assumed that the connection reestablishment will be performed. To prevent unwanted closure of connections, be sure to set this value to a realistic connection timeout.')
cipslaTcpConnTmplVerifyData = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 636, 1, 3, 1, 8), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cipslaTcpConnTmplVerifyData.setStatus('current')
if mibBuilder.loadTexts: cipslaTcpConnTmplVerifyData.setDescription('When set to true, the resulting data in each IP SLA operation is compared with the expected data. This includes checking header information (if possible) and exact packet size.')
cipslaTcpConnTmplTOS = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 636, 1, 3, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cipslaTcpConnTmplTOS.setReference('Refer to the following documents for TOS definition. RFC791/1349 for IPv4, IPv6, draft-ietf-diffserv-header-02.txt')
if mibBuilder.loadTexts: cipslaTcpConnTmplTOS.setStatus('current')
if mibBuilder.loadTexts: cipslaTcpConnTmplTOS.setDescription('This object represents the type of service octet in an IP header.')
cipslaTcpConnTmplThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 636, 1, 3, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(5000)).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cipslaTcpConnTmplThreshold.setStatus('current')
if mibBuilder.loadTexts: cipslaTcpConnTmplThreshold.setDescription('This object defines an administrative threshold limit. If the IP SLA operation time exceeds this limit and if the condition specified in cipslaTcpConnTmplHistFilter is satisfied, one threshold crossing occurrence will be counted.')
cipslaTcpConnTmplHistLives = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 636, 1, 3, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cipslaTcpConnTmplHistLives.setStatus('current')
if mibBuilder.loadTexts: cipslaTcpConnTmplHistLives.setDescription('The maximum number of history lives to record. A life is defined by the countdown (or transition) to zero by the cipslaAutoGroupScheduleLife object. A new life is created when the same conceptual control row is restarted via the transition of the cipslaAutoGroupScheduleLife object and its subsequent countdown. The value of zero will shut off all data collection.')
cipslaTcpConnTmplHistBuckets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 636, 1, 3, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 60)).clone(15)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cipslaTcpConnTmplHistBuckets.setStatus('current')
if mibBuilder.loadTexts: cipslaTcpConnTmplHistBuckets.setDescription('The maximum number of history buckets to record. This value should be set to the number of operations to keep per lifetime. After cipslaTcpConnTmplHistBuckets are filled, the oldest entries are deleted and the most recent cipslaTcpConnTmplHistBuckets buckets are retained.')
cipslaTcpConnTmplHistFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 636, 1, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("all", 2), ("overThreshold", 3), ("failures", 4))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cipslaTcpConnTmplHistFilter.setStatus('current')
if mibBuilder.loadTexts: cipslaTcpConnTmplHistFilter.setDescription('Defines a filter for adding RTT results to the history buffer: none(1) - no history is recorded all(2) - the results of all completion times and failed completions are recorded overThreshold(3) - the results of completion times over cipslaTcpConnTmplThreshold are recorded. failures(4) - the results of failed operations (only) are recorded.')
cipslaTcpConnTmplStatsHours = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 636, 1, 3, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 25)).clone(2)).setUnits('hours').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cipslaTcpConnTmplStatsHours.setStatus('current')
if mibBuilder.loadTexts: cipslaTcpConnTmplStatsHours.setDescription('The maximum number of hours for which statistics are maintained. Specifically this is the number of hourly groups to keep before rolling over. The value of one is not advisable because the hourly group will close and immediately be deleted before the network management station will have the opportunity to retrieve the statistics. The value of zero will shut off data collection.')
cipslaTcpConnTmplDistBuckets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 636, 1, 3, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cipslaTcpConnTmplDistBuckets.setStatus('current')
if mibBuilder.loadTexts: cipslaTcpConnTmplDistBuckets.setDescription('The maximum number of statistical distribution buckets to accumulate. Since this index does not rollover, only the first cipslaTcpConnTmplDistBuckets will be kept. The last cipslaTcpConnTmplDistBuckets will contain all entries from its distribution interval start point to infinity.')
cipslaTcpConnTmplDistInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 636, 1, 3, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(20)).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cipslaTcpConnTmplDistInterval.setStatus('current')
if mibBuilder.loadTexts: cipslaTcpConnTmplDistInterval.setDescription('The statistical distribution buckets interval. Distribution Bucket Example: cipslaTcpConnTmplDistBuckets = 5 buckets cipslaTcpConnTmplDistInterval = 10 milliseconds | Bucket 1 | Bucket 2 | Bucket 3 | Bucket 4 | Bucket 5 | | 0-9 ms | 10-19 ms | 20-29 ms | 30-39 ms | 40-Inf ms | Odd Example: cipslaTcpConnTmplDistBuckets = 1 buckets cipslaTcpConnTmplDistInterval = 10 milliseconds | Bucket 1 | | 0-Inf ms | Thus, this odd example shows that the value of cipslaTcpConnTmplDistInterval does not apply when cipslaTcpConnTmplDistBuckets is one.')
cipslaTcpConnTmplStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 636, 1, 3, 1, 17), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cipslaTcpConnTmplStorageType.setStatus('current')
if mibBuilder.loadTexts: cipslaTcpConnTmplStorageType.setDescription('The storage type of this conceptual row.')
cipslaTcpConnTmplRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 636, 1, 3, 1, 18), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cipslaTcpConnTmplRowStatus.setStatus('current')
if mibBuilder.loadTexts: cipslaTcpConnTmplRowStatus.setDescription('The status of the conceptual tcp connect control row. When the status is active, all the read-create objects in that row can be modified.')
ciscoIpSlaEchoMIBConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 636, 2))
ciscoIpSlaEchoMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 636, 2, 1))
ciscoIpSlaEchoMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 636, 2, 2))
ciscoIpSlaEchoMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 636, 2, 1, 1)).setObjects(("CISCO-IPSLA-ECHO-MIB", "ciscoIpSlaIcmpEchoTmplGroup"), ("CISCO-IPSLA-ECHO-MIB", "ciscoIpSlaUdpEchoTmplGroup"), ("CISCO-IPSLA-ECHO-MIB", "ciscoIpSlaTcpConnTmplGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoIpSlaEchoMIBCompliance = ciscoIpSlaEchoMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: ciscoIpSlaEchoMIBCompliance.setDescription('The compliance statement for IP SLA (1) ICMP echo Template (2) UDP echo Template (3) TCP connect Template')
ciscoIpSlaIcmpEchoTmplGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 636, 2, 2, 1)).setObjects(("CISCO-IPSLA-ECHO-MIB", "cipslaIcmpEchoTmplDescription"), ("CISCO-IPSLA-ECHO-MIB", "cipslaIcmpEchoTmplSrcAddrType"), ("CISCO-IPSLA-ECHO-MIB", "cipslaIcmpEchoTmplSrcAddr"), ("CISCO-IPSLA-ECHO-MIB", "cipslaIcmpEchoTmplTimeOut"), ("CISCO-IPSLA-ECHO-MIB", "cipslaIcmpEchoTmplVerifyData"), ("CISCO-IPSLA-ECHO-MIB", "cipslaIcmpEchoTmplReqDataSize"), ("CISCO-IPSLA-ECHO-MIB", "cipslaIcmpEchoTmplTOS"), ("CISCO-IPSLA-ECHO-MIB", "cipslaIcmpEchoTmplVrfName"), ("CISCO-IPSLA-ECHO-MIB", "cipslaIcmpEchoTmplThreshold"), ("CISCO-IPSLA-ECHO-MIB", "cipslaIcmpEchoTmplHistLives"), ("CISCO-IPSLA-ECHO-MIB", "cipslaIcmpEchoTmplHistBuckets"), ("CISCO-IPSLA-ECHO-MIB", "cipslaIcmpEchoTmplHistFilter"), ("CISCO-IPSLA-ECHO-MIB", "cipslaIcmpEchoTmplStatsHours"), ("CISCO-IPSLA-ECHO-MIB", "cipslaIcmpEchoTmplDistBuckets"), ("CISCO-IPSLA-ECHO-MIB", "cipslaIcmpEchoTmplDistInterval"), ("CISCO-IPSLA-ECHO-MIB", "cipslaIcmpEchoTmplStorageType"), ("CISCO-IPSLA-ECHO-MIB", "cipslaIcmpEchoTmplRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoIpSlaIcmpEchoTmplGroup = ciscoIpSlaIcmpEchoTmplGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoIpSlaIcmpEchoTmplGroup.setDescription('A collection of objects related to ICMP echo Template.')
ciscoIpSlaUdpEchoTmplGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 636, 2, 2, 2)).setObjects(("CISCO-IPSLA-ECHO-MIB", "cipslaUdpEchoTmplDescription"), ("CISCO-IPSLA-ECHO-MIB", "cipslaUdpEchoTmplControlEnable"), ("CISCO-IPSLA-ECHO-MIB", "cipslaUdpEchoTmplSrcAddrType"), ("CISCO-IPSLA-ECHO-MIB", "cipslaUdpEchoTmplSrcAddr"), ("CISCO-IPSLA-ECHO-MIB", "cipslaUdpEchoTmplSrcPort"), ("CISCO-IPSLA-ECHO-MIB", "cipslaUdpEchoTmplTimeOut"), ("CISCO-IPSLA-ECHO-MIB", "cipslaUdpEchoTmplVerifyData"), ("CISCO-IPSLA-ECHO-MIB", "cipslaUdpEchoTmplReqDataSize"), ("CISCO-IPSLA-ECHO-MIB", "cipslaUdpEchoTmplTOS"), ("CISCO-IPSLA-ECHO-MIB", "cipslaUdpEchoTmplVrfName"), ("CISCO-IPSLA-ECHO-MIB", "cipslaUdpEchoTmplThreshold"), ("CISCO-IPSLA-ECHO-MIB", "cipslaUdpEchoTmplHistLives"), ("CISCO-IPSLA-ECHO-MIB", "cipslaUdpEchoTmplHistBuckets"), ("CISCO-IPSLA-ECHO-MIB", "cipslaUdpEchoTmplHistFilter"), ("CISCO-IPSLA-ECHO-MIB", "cipslaUdpEchoTmplStatsHours"), ("CISCO-IPSLA-ECHO-MIB", "cipslaUdpEchoTmplDistBuckets"), ("CISCO-IPSLA-ECHO-MIB", "cipslaUdpEchoTmplDistInterval"), ("CISCO-IPSLA-ECHO-MIB", "cipslaUdpEchoTmplStorageType"), ("CISCO-IPSLA-ECHO-MIB", "cipslaUdpEchoTmplRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoIpSlaUdpEchoTmplGroup = ciscoIpSlaUdpEchoTmplGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoIpSlaUdpEchoTmplGroup.setDescription('A collection of objects related to UDP echo Template.')
ciscoIpSlaTcpConnTmplGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 636, 2, 2, 3)).setObjects(("CISCO-IPSLA-ECHO-MIB", "cipslaTcpConnTmplDescription"), ("CISCO-IPSLA-ECHO-MIB", "cipslaTcpConnTmplControlEnable"), ("CISCO-IPSLA-ECHO-MIB", "cipslaTcpConnTmplSrcAddrType"), ("CISCO-IPSLA-ECHO-MIB", "cipslaTcpConnTmplSrcAddr"), ("CISCO-IPSLA-ECHO-MIB", "cipslaTcpConnTmplSrcPort"), ("CISCO-IPSLA-ECHO-MIB", "cipslaTcpConnTmplTimeOut"), ("CISCO-IPSLA-ECHO-MIB", "cipslaTcpConnTmplVerifyData"), ("CISCO-IPSLA-ECHO-MIB", "cipslaTcpConnTmplTOS"), ("CISCO-IPSLA-ECHO-MIB", "cipslaTcpConnTmplThreshold"), ("CISCO-IPSLA-ECHO-MIB", "cipslaTcpConnTmplHistLives"), ("CISCO-IPSLA-ECHO-MIB", "cipslaTcpConnTmplHistBuckets"), ("CISCO-IPSLA-ECHO-MIB", "cipslaTcpConnTmplHistFilter"), ("CISCO-IPSLA-ECHO-MIB", "cipslaTcpConnTmplStatsHours"), ("CISCO-IPSLA-ECHO-MIB", "cipslaTcpConnTmplDistBuckets"), ("CISCO-IPSLA-ECHO-MIB", "cipslaTcpConnTmplDistInterval"), ("CISCO-IPSLA-ECHO-MIB", "cipslaTcpConnTmplStorageType"), ("CISCO-IPSLA-ECHO-MIB", "cipslaTcpConnTmplRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoIpSlaTcpConnTmplGroup = ciscoIpSlaTcpConnTmplGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoIpSlaTcpConnTmplGroup.setDescription('A collection of objects related to TCP connect Template.')
mibBuilder.exportSymbols("CISCO-IPSLA-ECHO-MIB", cipslaIcmpEchoTmplDistBuckets=cipslaIcmpEchoTmplDistBuckets, cipslaTcpConnTmplStatsHours=cipslaTcpConnTmplStatsHours, cipslaIcmpEchoTmplTable=cipslaIcmpEchoTmplTable, cipslaUdpEchoTmplDistBuckets=cipslaUdpEchoTmplDistBuckets, cipslaIcmpEchoTmplThreshold=cipslaIcmpEchoTmplThreshold, ciscoIpSlaEchoMIB=ciscoIpSlaEchoMIB, cipslaIcmpEchoTmplHistBuckets=cipslaIcmpEchoTmplHistBuckets, cipslaUdpEchoTmplDescription=cipslaUdpEchoTmplDescription, cipslaIcmpEchoTmplSrcAddrType=cipslaIcmpEchoTmplSrcAddrType, ciscoIpSlaEchoMIBNotifs=ciscoIpSlaEchoMIBNotifs, cipslaUdpEchoTmplControlEnable=cipslaUdpEchoTmplControlEnable, cipslaUdpEchoTmplReqDataSize=cipslaUdpEchoTmplReqDataSize, cipslaIcmpEchoTmplStorageType=cipslaIcmpEchoTmplStorageType, cipslaUdpEchoTmplHistBuckets=cipslaUdpEchoTmplHistBuckets, cipslaTcpConnTmplTimeOut=cipslaTcpConnTmplTimeOut, cipslaTcpConnTmplDistInterval=cipslaTcpConnTmplDistInterval, cipslaIcmpEchoTmplStatsHours=cipslaIcmpEchoTmplStatsHours, ciscoIpSlaEchoMIBObjects=ciscoIpSlaEchoMIBObjects, cipslaIcmpEchoTmplEntry=cipslaIcmpEchoTmplEntry, ciscoIpSlaEchoMIBGroups=ciscoIpSlaEchoMIBGroups, cipslaUdpEchoTmplTable=cipslaUdpEchoTmplTable, cipslaIcmpEchoTmplName=cipslaIcmpEchoTmplName, cipslaUdpEchoTmplName=cipslaUdpEchoTmplName, cipslaTcpConnTmplSrcPort=cipslaTcpConnTmplSrcPort, cipslaTcpConnTmplTable=cipslaTcpConnTmplTable, cipslaIcmpEchoTmplHistFilter=cipslaIcmpEchoTmplHistFilter, cipslaTcpConnTmplVerifyData=cipslaTcpConnTmplVerifyData, cipslaUdpEchoTmplSrcAddr=cipslaUdpEchoTmplSrcAddr, cipslaUdpEchoTmplEntry=cipslaUdpEchoTmplEntry, cipslaTcpConnTmplSrcAddr=cipslaTcpConnTmplSrcAddr, cipslaTcpConnTmplRowStatus=cipslaTcpConnTmplRowStatus, cipslaIcmpEchoTmplVerifyData=cipslaIcmpEchoTmplVerifyData, cipslaUdpEchoTmplRowStatus=cipslaUdpEchoTmplRowStatus, cipslaUdpEchoTmplStorageType=cipslaUdpEchoTmplStorageType, cipslaUdpEchoTmplVerifyData=cipslaUdpEchoTmplVerifyData, cipslaIcmpEchoTmplTimeOut=cipslaIcmpEchoTmplTimeOut, cipslaUdpEchoTmplVrfName=cipslaUdpEchoTmplVrfName, cipslaTcpConnTmplThreshold=cipslaTcpConnTmplThreshold, ciscoIpSlaEchoMIBConform=ciscoIpSlaEchoMIBConform, ciscoIpSlaIcmpEchoTmplGroup=ciscoIpSlaIcmpEchoTmplGroup, cipslaIcmpEchoTmplDescription=cipslaIcmpEchoTmplDescription, ciscoIpSlaUdpEchoTmplGroup=ciscoIpSlaUdpEchoTmplGroup, cipslaTcpConnTmplDistBuckets=cipslaTcpConnTmplDistBuckets, cipslaIcmpEchoTmplTOS=cipslaIcmpEchoTmplTOS, cipslaIcmpEchoTmplHistLives=cipslaIcmpEchoTmplHistLives, cipslaTcpConnTmplControlEnable=cipslaTcpConnTmplControlEnable, cipslaIcmpEchoTmplReqDataSize=cipslaIcmpEchoTmplReqDataSize, cipslaUdpEchoTmplSrcPort=cipslaUdpEchoTmplSrcPort, cipslaTcpConnTmplName=cipslaTcpConnTmplName, cipslaUdpEchoTmplStatsHours=cipslaUdpEchoTmplStatsHours, cipslaTcpConnTmplHistFilter=cipslaTcpConnTmplHistFilter, cipslaTcpConnTmplStorageType=cipslaTcpConnTmplStorageType, ciscoIpSlaTcpConnTmplGroup=ciscoIpSlaTcpConnTmplGroup, cipslaTcpConnTmplHistBuckets=cipslaTcpConnTmplHistBuckets, cipslaTcpConnTmplDescription=cipslaTcpConnTmplDescription, cipslaUdpEchoTmplTOS=cipslaUdpEchoTmplTOS, cipslaTcpConnTmplTOS=cipslaTcpConnTmplTOS, cipslaIcmpEchoTmplRowStatus=cipslaIcmpEchoTmplRowStatus, cipslaUdpEchoTmplSrcAddrType=cipslaUdpEchoTmplSrcAddrType, ciscoIpSlaEchoMIBCompliance=ciscoIpSlaEchoMIBCompliance, cipslaTcpConnTmplEntry=cipslaTcpConnTmplEntry, PYSNMP_MODULE_ID=ciscoIpSlaEchoMIB, cipslaUdpEchoTmplThreshold=cipslaUdpEchoTmplThreshold, cipslaTcpConnTmplSrcAddrType=cipslaTcpConnTmplSrcAddrType, cipslaIcmpEchoTmplSrcAddr=cipslaIcmpEchoTmplSrcAddr, cipslaUdpEchoTmplHistFilter=cipslaUdpEchoTmplHistFilter, cipslaUdpEchoTmplTimeOut=cipslaUdpEchoTmplTimeOut, cipslaIcmpEchoTmplVrfName=cipslaIcmpEchoTmplVrfName, ciscoIpSlaEchoMIBCompliances=ciscoIpSlaEchoMIBCompliances, cipslaTcpConnTmplHistLives=cipslaTcpConnTmplHistLives, cipslaUdpEchoTmplDistInterval=cipslaUdpEchoTmplDistInterval, cipslaIcmpEchoTmplDistInterval=cipslaIcmpEchoTmplDistInterval, cipslaUdpEchoTmplHistLives=cipslaUdpEchoTmplHistLives)
