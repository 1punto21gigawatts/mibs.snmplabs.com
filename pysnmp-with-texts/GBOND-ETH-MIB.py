#
# PySNMP MIB module GBOND-ETH-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/GBOND-ETH-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:18:42 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection")
gBondMIB, = mibBuilder.importSymbols("GBOND-MIB", "gBondMIB")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
TimeTicks, ObjectIdentity, NotificationType, Integer32, ModuleIdentity, iso, Bits, IpAddress, Counter32, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, Unsigned32, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "ObjectIdentity", "NotificationType", "Integer32", "ModuleIdentity", "iso", "Bits", "IpAddress", "Counter32", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "Unsigned32", "MibIdentifier")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
gBondEthMIB = ModuleIdentity((1, 3, 6, 1, 2, 1, 211, 2))
gBondEthMIB.setRevisions(('2007-06-05 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: gBondEthMIB.setRevisionsDescriptions(('Initial version, published as RFC XXXX.',))
if mibBuilder.loadTexts: gBondEthMIB.setLastUpdated('200706050000Z')
if mibBuilder.loadTexts: gBondEthMIB.setOrganization('IETF ADSL MIB Working Group')
if mibBuilder.loadTexts: gBondEthMIB.setContactInfo('WG charter: http://www.ietf.org/html.charters/adslmib-charter.html Mailing Lists: General Discussion: adslmib@ietf.org To Subscribe: adslmib-request@ietf.org In Body: subscribe your_email_address Chair: Menachem Dodge Postal: ECI Telecom, Ltd. 30 Hasivim St., Petach-Tikva 49517 Israel Phone: +972-3-926-8421 EMail: menachem.dodge@ecitele.com Editor: Edward Beili Postal: Actelis Networks, Inc. 25 Bazel St., P.O.B. 10173 Petach-Tikva 10173 Israel Phone: +972-3-924-3491 EMail: edward.beili@actelis.com Editor: Moti Morgenstern Postal: ECI Telecom 30 Hasivim St. Petach-Tikva 49517 Israel Phone: +972-3-926-6258 EMail: moti.morgenstern@ecitele.com')
if mibBuilder.loadTexts: gBondEthMIB.setDescription("The objects in this MIB module are used to manage the Ethernet-based multi-pair bonded xDSL Interfaces, defined in ITU-T recommendation G.998.2 (G.Bond/Ethernet). This MIB module MUST be used in conjunction with GBOND-MIB module, common to all G.Bond technologies. The following references are used throughout this MIB module: [G.998.2] refers to: ITU-T Recommendation G.998.2: 'Ethernet-based multi-pair bonding', January 2005. [802.3] refers to: IEEE Std 802.3-2005: 'IEEE Standard for Information technology - Telecommunications and information exchange between systems - Local and metropolitan area networks - Specific requirements - Part 3: Carrier Sense Multiple Access with Collision Detection (CSMA/CD) Access Method and Physical Layer Specifications', December 2005. [WT-159] refers to: DSL Forum Technical Report: 'Management Framework for xDSL Bonding', May 2007. Naming Conventions: BCE - Bonding Channel Entity CO - Central Office CPE - Customer Premises Equipment GBS - Generic Bonding Sublayer HDLC - High-level Data Link Control PTM-TC - Packet Transfer Mode Transmission Convergence (sub-layer) SNR - Signal to Noise Ratio TC - Transmission Convergence (sub-layer) Copyright (C) The Internet Society (2007). This version of this MIB module is part of RFC XXXX; see the RFC itself for full legal notices.")
gBondEthObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 211, 2, 1))
gBondEthConformance = MibIdentifier((1, 3, 6, 1, 2, 1, 211, 2, 2))
gBondEthPort = MibIdentifier((1, 3, 6, 1, 2, 1, 211, 2, 1, 1))
gBondEthBce = MibIdentifier((1, 3, 6, 1, 2, 1, 211, 2, 1, 2))
class GBondEthPtmTcType(TextualConvention, Integer32):
    description = 'This textual convention represents possible PTM-TC types in G.bond/Eth ports. The following values are defined: tc6465 - 64/65-octet encapsulation, as defined in [802.3] Clause 61.3.3 tcHDLC - HDLC encapsulation, as defined in [G.998.2] Annex B'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("tc6465", 1), ("tcHDLC", 2))

gBondEthPortConfTable = MibTable((1, 3, 6, 1, 2, 1, 211, 2, 1, 1, 1), )
if mibBuilder.loadTexts: gBondEthPortConfTable.setStatus('current')
if mibBuilder.loadTexts: gBondEthPortConfTable.setDescription('Table for Configuration of G.Bond/Eth GBS ports. Entries in this table MUST be maintained in a persistent manner')
gBondEthPortConfEntry = MibTableRow((1, 3, 6, 1, 2, 1, 211, 2, 1, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: gBondEthPortConfEntry.setStatus('current')
if mibBuilder.loadTexts: gBondEthPortConfEntry.setDescription('An entry in the G.Bond/Eth Port Configuration table. Each entry represents an G.Bond Ethernet port indexed by the ifIndex. Note that an G.Bond/Eth GBS port runs on top of a single or multiple BCE port(s), which are also indexed by ifIndex.')
gBondEthTcAdminType = MibTableColumn((1, 3, 6, 1, 2, 1, 211, 2, 1, 1, 1, 1, 1), GBondEthPtmTcType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gBondEthTcAdminType.setReference('[WT-159] 5.5.3.1')
if mibBuilder.loadTexts: gBondEthTcAdminType.setStatus('current')
if mibBuilder.loadTexts: gBondEthTcAdminType.setDescription('Administrative (desired) PTM-TC encapsulation type of G.Bond/Eth port (GBS). Possible values are: tc6465(1) - 64/65-octet encapsulation tcHDLC(2) - HDLC encapsulation Attempts to set a port to a non-supported PTM-TC encapsulation type (see gBondEthTcTypesSupported) SHALL be rejected. Changing gBondEthTcAdminType is a traffic disruptive operation and as such SHALL be done when the link is Down. Attempts to cange this object SHALL be rejected if the link is Up or Initializing. This object maps to the WT-159 attribute aEthTcAdminType. This object MUST be maintained in a persistent manner.')
gBondEthPortCapabilityTable = MibTable((1, 3, 6, 1, 2, 1, 211, 2, 1, 1, 2), )
if mibBuilder.loadTexts: gBondEthPortCapabilityTable.setStatus('current')
if mibBuilder.loadTexts: gBondEthPortCapabilityTable.setDescription('Table for Capabilities of G.Bond/Eth Ports. Entries in this table MUST be maintained in a persistent manner')
gBondEthPortCapabilityEntry = MibTableRow((1, 3, 6, 1, 2, 1, 211, 2, 1, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: gBondEthPortCapabilityEntry.setStatus('current')
if mibBuilder.loadTexts: gBondEthPortCapabilityEntry.setDescription('An entry in the G.Bond/Eth Port Capability table. Each entry represents an G.Bond port indexed by the ifIndex. Note that a G.Bond GBS port runs on top of a single or multiple BCE port(s), which are also indexed by ifIndex.')
gBondEthTcTypesSupported = MibTableColumn((1, 3, 6, 1, 2, 1, 211, 2, 1, 1, 2, 1, 1), Bits().clone(namedValues=NamedValues(("tc6465", 0), ("tcHDLC", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gBondEthTcTypesSupported.setReference('[WT-159] 5.5.3.3')
if mibBuilder.loadTexts: gBondEthTcTypesSupported.setStatus('current')
if mibBuilder.loadTexts: gBondEthTcTypesSupported.setDescription('PTM-TC Encapsulation types supported by the G.Bond/Eth port. This is a bitmap of possible encapsulation types. The various bit positions are: tc6465 - GBS is capable of 64/65-octet encapsulation tcHDLC - GBS is capable of HDLC encapsulation A desired encapsulation is determined by gBondEthTcAdminType, while gBondEthTcOperType reflects the current operating mode. This object maps to the WT-159 attribute aEthTcTypesSupported.')
gBondEthPortStatusTable = MibTable((1, 3, 6, 1, 2, 1, 211, 2, 1, 1, 3), )
if mibBuilder.loadTexts: gBondEthPortStatusTable.setStatus('current')
if mibBuilder.loadTexts: gBondEthPortStatusTable.setDescription('This table provides overall status information of G.Bond ports, complementing the generic status information from the ifTable of IF-MIB. Additional status information about connected BCEs is available from the relevant line MIBs This table contains live data from the equipment. As such, it is NOT persistent.')
gBondEthPortStatusEntry = MibTableRow((1, 3, 6, 1, 2, 1, 211, 2, 1, 1, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: gBondEthPortStatusEntry.setStatus('current')
if mibBuilder.loadTexts: gBondEthPortStatusEntry.setDescription('An entry in the G.Bond/Eth Port Status table. Each entry represents an G.Bond/Eth port indexed by the ifIndex. Note that an G.Bond GBS port runs on top of a single or multiple BCE port(s), which are also indexed by ifIndex.')
gBondEthTcOperType = MibTableColumn((1, 3, 6, 1, 2, 1, 211, 2, 1, 1, 3, 1, 1), GBondEthPtmTcType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gBondEthTcOperType.setReference('[WT-159] 5.5.3.2')
if mibBuilder.loadTexts: gBondEthTcOperType.setStatus('current')
if mibBuilder.loadTexts: gBondEthTcOperType.setDescription('Current operational encapsulation type of the G.Bond/Eth port. Possible values are: tc6465(1) - GBS uses 64/65-octet encapsulation tcHDLC(2) - GBS uses HDLC encapsulation The operational PTM-TC encapsulation type can be configured via gBondEthTcAdminType variable. This objects maps to the WT-159 aEthTcOperType.')
gBondEthInErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 211, 2, 1, 1, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gBondEthInErrors.setReference('[WT-159] 5.5.3.4')
if mibBuilder.loadTexts: gBondEthInErrors.setStatus('current')
if mibBuilder.loadTexts: gBondEthInErrors.setDescription('A number of fragments that have been received across the gamma interface and discarded. This object maps to the WT-159 attribute aEthRxErrors. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of ifCounterDiscontinuityTime, defined in IF-MIB.')
gBondEthInSmallFragments = MibTableColumn((1, 3, 6, 1, 2, 1, 211, 2, 1, 1, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gBondEthInSmallFragments.setReference('[WT-159] 5.5.3.5')
if mibBuilder.loadTexts: gBondEthInSmallFragments.setStatus('current')
if mibBuilder.loadTexts: gBondEthInSmallFragments.setDescription('A number of fragments smaller than minFragmentSize (64 Bytes), that have been received across the gamma interface and discarded. This object maps to the WT-159 attribute aEthRxSmallFragments. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of ifCounterDiscontinuityTime, defined in IF-MIB.')
gBondEthInLargeFragments = MibTableColumn((1, 3, 6, 1, 2, 1, 211, 2, 1, 1, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gBondEthInLargeFragments.setReference('[WT-159] 5.5.3.6')
if mibBuilder.loadTexts: gBondEthInLargeFragments.setStatus('current')
if mibBuilder.loadTexts: gBondEthInLargeFragments.setDescription('A number of fragments larger than maxFragmentSize (512 Bytes), which have been received across the gamma interface and discarded. This object maps to the WT-159 attribute aEthRxLargeFragments. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of ifCounterDiscontinuityTime, defined in IF-MIB.')
gBondEthInBadFragments = MibTableColumn((1, 3, 6, 1, 2, 1, 211, 2, 1, 1, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gBondEthInBadFragments.setReference('[WT-159] 5.5.3.7')
if mibBuilder.loadTexts: gBondEthInBadFragments.setStatus('current')
if mibBuilder.loadTexts: gBondEthInBadFragments.setDescription('A number of fragments which do not fit into the sequence expected by the frame assembly function, that have been received across the gamma interface and discarded (the frame buffer is flushed to the next valid frame start). This object maps to the WT-159 attribute aEthRxBadFragments. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of ifCounterDiscontinuityTime, defined in IF-MIB.')
gBondEthInLostFragments = MibTableColumn((1, 3, 6, 1, 2, 1, 211, 2, 1, 1, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gBondEthInLostFragments.setReference('[WT-159] 5.5.3.8')
if mibBuilder.loadTexts: gBondEthInLostFragments.setStatus('current')
if mibBuilder.loadTexts: gBondEthInLostFragments.setDescription('A number of gaps in the sequence of fragments, which have been received across the gamma interface (the frame buffer is flushed to the next valid frame start, when fragment/fragments expected by the frame assembly function is/are not received). This object maps to the WT-159 attribute aEthRxLostFragments. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of ifCounterDiscontinuityTime, defined in IF-MIB.')
gBondEthInLostStarts = MibTableColumn((1, 3, 6, 1, 2, 1, 211, 2, 1, 1, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gBondEthInLostStarts.setReference('[WT-159] 5.5.3.9')
if mibBuilder.loadTexts: gBondEthInLostStarts.setStatus('current')
if mibBuilder.loadTexts: gBondEthInLostStarts.setDescription('A number of missing StartOfPacket indicators expected by the frame assembly function. This object maps to the WT-159 attribute aEthRxLostStarts. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of ifCounterDiscontinuityTime, defined in IF-MIB.')
gBondEthInLostEnds = MibTableColumn((1, 3, 6, 1, 2, 1, 211, 2, 1, 1, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gBondEthInLostEnds.setReference('[WT-159] 5.5.3.10')
if mibBuilder.loadTexts: gBondEthInLostEnds.setStatus('current')
if mibBuilder.loadTexts: gBondEthInLostEnds.setDescription('A number of missing EndOfPacket indicators expected by the frame assembly function. This object maps to the WT-159 attribute aEthRxLostEnds. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of ifCounterDiscontinuityTime, defined in IF-MIB.')
gBondEthInOverflows = MibTableColumn((1, 3, 6, 1, 2, 1, 211, 2, 1, 1, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gBondEthInOverflows.setReference('[WT-159] 5.5.3.11')
if mibBuilder.loadTexts: gBondEthInOverflows.setStatus('current')
if mibBuilder.loadTexts: gBondEthInOverflows.setDescription('A number of fragments, received across the gamma interface and discarded, which would have caused the frame assembly buffer to overflow. This object maps to the WT-159 attribute aEthRxOverflows. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of ifCounterDiscontinuityTime, defined in IF-MIB.')
gBondEthBceStatusTable = MibTable((1, 3, 6, 1, 2, 1, 211, 2, 1, 2, 1), )
if mibBuilder.loadTexts: gBondEthBceStatusTable.setStatus('current')
if mibBuilder.loadTexts: gBondEthBceStatusTable.setDescription('This table provides common status information of G.Bond/Eth BCE ports. This table contains live data from the equipment. As such, it is NOT persistent.')
gBondEthBceStatusEntry = MibTableRow((1, 3, 6, 1, 2, 1, 211, 2, 1, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: gBondEthBceStatusEntry.setStatus('current')
if mibBuilder.loadTexts: gBondEthBceStatusEntry.setDescription('An entry in the G.Bond/Eth BCE Status table. Each entry represents common aspects of a G.Bond/Eth BCE port indexed by the ifIndex. Note that a BCE port can be stacked below a single GBS port, also indexed by ifIndex, possibly together with other BCE ports.')
gBondEthBceTcInCodingErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 211, 2, 1, 2, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gBondEthBceTcInCodingErrors.setReference('[WT-159] 5.5.7.5')
if mibBuilder.loadTexts: gBondEthBceTcInCodingErrors.setStatus('current')
if mibBuilder.loadTexts: gBondEthBceTcInCodingErrors.setDescription('A number of PTM-TC encapsulation errors. This counter is incremented for each encapsulation error detected by the PTM-TC receive function. This object maps to WT-159 attribute aChannelPtmTcRxCodingViolations. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of ifCounterDiscontinuityTime, defined in IF-MIB.')
gBondEthBceTcInCrcErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 211, 2, 1, 2, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gBondEthBceTcInCrcErrors.setReference('[WT-159] 5.5.7.6')
if mibBuilder.loadTexts: gBondEthBceTcInCrcErrors.setStatus('current')
if mibBuilder.loadTexts: gBondEthBceTcInCrcErrors.setDescription('A number of PTM-TC CRC errors. This counter is incremented for each CRC error detected by the PTM-TC receive function. This object maps to WT-159 attribute aChannelPtmTcRxCrcErrors. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of ifCounterDiscontinuityTime, defined in IF-MIB.')
gBondEthGroups = MibIdentifier((1, 3, 6, 1, 2, 1, 211, 2, 2, 1))
gBondEthCompliances = MibIdentifier((1, 3, 6, 1, 2, 1, 211, 2, 2, 2))
gBondEthBasicGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 211, 2, 2, 1, 1)).setObjects(("GBOND-ETH-MIB", "gBondEthTcTypesSupported"), ("GBOND-ETH-MIB", "gBondEthTcAdminType"), ("GBOND-ETH-MIB", "gBondEthTcOperType"), ("GBOND-ETH-MIB", "gBondEthInErrors"), ("GBOND-ETH-MIB", "gBondEthInSmallFragments"), ("GBOND-ETH-MIB", "gBondEthInLargeFragments"), ("GBOND-ETH-MIB", "gBondEthInBadFragments"), ("GBOND-ETH-MIB", "gBondEthInLostFragments"), ("GBOND-ETH-MIB", "gBondEthInLostStarts"), ("GBOND-ETH-MIB", "gBondEthInLostEnds"), ("GBOND-ETH-MIB", "gBondEthInOverflows"), ("GBOND-ETH-MIB", "gBondEthBceTcInCodingErrors"), ("GBOND-ETH-MIB", "gBondEthBceTcInCrcErrors"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    gBondEthBasicGroup = gBondEthBasicGroup.setStatus('current')
if mibBuilder.loadTexts: gBondEthBasicGroup.setDescription('A collection of objects representing management information for G.Bond/Eth GBS ports.')
gBondEthBceGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 211, 2, 2, 1, 2)).setObjects(("GBOND-ETH-MIB", "gBondEthBceTcInCodingErrors"), ("GBOND-ETH-MIB", "gBondEthBceTcInCrcErrors"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    gBondEthBceGroup = gBondEthBceGroup.setStatus('current')
if mibBuilder.loadTexts: gBondEthBceGroup.setDescription('A collection of objects representing OPTIONAL management information for G.Bond/Eth BCE ports.')
gBondEthCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 211, 2, 2, 2, 1)).setObjects(("GBOND-ETH-MIB", "gBondEthBasicGroup"), ("GBOND-ETH-MIB", "gBondEthBceGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    gBondEthCompliance = gBondEthCompliance.setStatus('current')
if mibBuilder.loadTexts: gBondEthCompliance.setDescription('The compliance statement for G.Bond Ethernet interfaces. Compliance with the following external compliance statements is REQUIRED: MIB Module Compliance Statement ---------- -------------------- IF-MIB ifCompliance3 GBOND-MIB gBondCompliance')
mibBuilder.exportSymbols("GBOND-ETH-MIB", PYSNMP_MODULE_ID=gBondEthMIB, gBondEthInSmallFragments=gBondEthInSmallFragments, gBondEthPortConfTable=gBondEthPortConfTable, gBondEthCompliances=gBondEthCompliances, gBondEthInErrors=gBondEthInErrors, gBondEthPortConfEntry=gBondEthPortConfEntry, gBondEthGroups=gBondEthGroups, gBondEthTcAdminType=gBondEthTcAdminType, gBondEthInOverflows=gBondEthInOverflows, gBondEthPortCapabilityEntry=gBondEthPortCapabilityEntry, gBondEthInLostFragments=gBondEthInLostFragments, gBondEthPortStatusTable=gBondEthPortStatusTable, gBondEthCompliance=gBondEthCompliance, gBondEthBceStatusTable=gBondEthBceStatusTable, GBondEthPtmTcType=GBondEthPtmTcType, gBondEthBce=gBondEthBce, gBondEthMIB=gBondEthMIB, gBondEthBceStatusEntry=gBondEthBceStatusEntry, gBondEthBceTcInCrcErrors=gBondEthBceTcInCrcErrors, gBondEthBasicGroup=gBondEthBasicGroup, gBondEthTcTypesSupported=gBondEthTcTypesSupported, gBondEthInLostStarts=gBondEthInLostStarts, gBondEthBceTcInCodingErrors=gBondEthBceTcInCodingErrors, gBondEthInBadFragments=gBondEthInBadFragments, gBondEthInLargeFragments=gBondEthInLargeFragments, gBondEthObjects=gBondEthObjects, gBondEthInLostEnds=gBondEthInLostEnds, gBondEthPortCapabilityTable=gBondEthPortCapabilityTable, gBondEthPort=gBondEthPort, gBondEthConformance=gBondEthConformance, gBondEthBceGroup=gBondEthBceGroup, gBondEthTcOperType=gBondEthTcOperType, gBondEthPortStatusEntry=gBondEthPortStatusEntry)
