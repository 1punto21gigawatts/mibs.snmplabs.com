#
# PySNMP MIB module TIMETRA-VRRP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/TIMETRA-VRRP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:23:20 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
InetAddress, InetAddressType, InetAddressPrefixLength = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType", "InetAddressPrefixLength")
ipv6RouterAdvertEntry, = mibBuilder.importSymbols("IP-MIB", "ipv6RouterAdvertEntry")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
IpAddress, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, Counter32, MibIdentifier, Gauge32, iso, Counter64, ModuleIdentity, NotificationType, Integer32, TimeTicks, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "Counter32", "MibIdentifier", "Gauge32", "iso", "Counter64", "ModuleIdentity", "NotificationType", "Integer32", "TimeTicks", "Unsigned32")
RowStatus, TimeStamp, MacAddress, TimeInterval, DisplayString, TextualConvention, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TimeStamp", "MacAddress", "TimeInterval", "DisplayString", "TextualConvention", "TruthValue")
tmnxSRConfs, timetraSRMIBModules, tmnxSRNotifyPrefix, tmnxSRObjs = mibBuilder.importSymbols("TIMETRA-GLOBAL-MIB", "tmnxSRConfs", "timetraSRMIBModules", "tmnxSRNotifyPrefix", "tmnxSRObjs")
LAGInterfaceNumber, = mibBuilder.importSymbols("TIMETRA-LAG-MIB", "LAGInterfaceNumber")
TmnxPortID, TItemDescription, TNamedItem, TmnxServId, TNamedItemOrEmpty = mibBuilder.importSymbols("TIMETRA-TC-MIB", "TmnxPortID", "TItemDescription", "TNamedItem", "TmnxServId", "TNamedItemOrEmpty")
vrrpOperationsEntry, vrrpOperationsMasterIpAddr, vrrpRouterStatisticsEntry, vrrpOperationsVrId, vrrpNewMasterReason = mibBuilder.importSymbols("TIMETRA-VRRP-V3-MIB", "vrrpOperationsEntry", "vrrpOperationsMasterIpAddr", "vrrpRouterStatisticsEntry", "vrrpOperationsVrId", "vrrpNewMasterReason")
vrrpOperMasterIpAddr, vrrpOperVrId, vrrpRouterStatsEntry, vrrpOperEntry = mibBuilder.importSymbols("VRRP-MIB", "vrrpOperMasterIpAddr", "vrrpOperVrId", "vrrpRouterStatsEntry", "vrrpOperEntry")
timetraVrrpMIBModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 6527, 1, 1, 3, 20))
timetraVrrpMIBModule.setRevisions(('1911-02-01 00:00', '1909-02-28 00:00', '1908-07-01 00:00', '1907-01-01 00:00', '1905-08-31 00:00', '1905-01-24 00:00', '1904-01-15 00:00', '1903-08-15 00:00', '2003-01-20 00:00', '2002-05-13 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: timetraVrrpMIBModule.setRevisionsDescriptions(('Rev 9.0 1 Feb 2011 00:00 9.0 release of the TIMETRA-VRRP-MIB.', 'Rev 7.0 28 Feb 2009 00:00 7.0 release of the TIMETRA-VRRP-MIB.', 'Rev 6.1 01 Jul 2008 00:00 6.1 release of the TIMETRA-VRRP-MIB.', 'Rev 5.0 01 Jan 2007 00:00 5.0 release of the TIMETRA-VRRP-MIB.', 'Rev 3.0 31 Aug 2005 00:00 3.0 release of the TIMETRA-VRRP-MIB.', 'Rev 2.1 24 Jan 2005 00:00 2.1 release of the TIMETRA-VRRP-MIB.', 'Rev 2.0 15 Jan 2004 00:00 2.0 release of the TIMETRA-VRRP-MIB.', 'Rev 1.2 15 Aug 2003 00:00 1.2 release of the TIMETRA-VRRP-MIB.', 'Rev 1.0 20 Jan 2003 00:00 1.0 Release of the TIMETRA-VRRP-MIB.', 'Rev 0.1 13 May 2002 00:00 Initial version of the TIMETRA-VRRP-MIB.',))
if mibBuilder.loadTexts: timetraVrrpMIBModule.setLastUpdated('201102010000Z')
if mibBuilder.loadTexts: timetraVrrpMIBModule.setOrganization('Alcatel-Lucent')
if mibBuilder.loadTexts: timetraVrrpMIBModule.setContactInfo('Alcatel-Lucent SROS Support Web: http://support.alcatel-lucent.com')
if mibBuilder.loadTexts: timetraVrrpMIBModule.setDescription("This document is the SNMP MIB module to manage and provision Virtual Router Redundancy Protocol (VRRP) in the Alcatel-Lucent SROS system. Copyright 2003-2011 Alcatel-Lucent. All rights reserved. Reproduction of this document is authorized on the condition that the foregoing copyright notice is included. This SNMP MIB module (Specification) embodies Alcatel-Lucent's proprietary intellectual property. Alcatel-Lucent retains all title and ownership in the Specification, including any revisions. Alcatel-Lucent grants all interested parties a non-exclusive license to use and distribute an unmodified copy of this Specification in connection with management of Alcatel-Lucent products, and without fee, provided this copyright notice and license appear on all copies. This Specification is supplied `as is', and Alcatel-Lucent makes no warranty, either express or implied, as to the use, operation, condition, or performance of the Specification.")
tmnxVrrpMibObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20))
tmnxVrrpNotifyPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 20))
tmnxVrrpNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 20, 0))
tmnxVrrpConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 20))
tmnxVrrpObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 1))
tmnxVrrpPolicyObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 2))
tmnxVrrpNotificationObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 3))
class TmnxVrrpPolicyID(TextualConvention, Unsigned32):
    description = 'The TmnxVrrpPolicyID textual convention is used to uniquely identify a Priority Control Policy.'
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(1, 9999)

class TmnxVrrpPriority(TextualConvention, Unsigned32):
    description = 'The TmnxVrrpPriority textual convention specifies either the configured delta-in-use-limit priority for a VRRP Priority Control Policy or the configured delta or explicit priority for a Priority Control Event.'
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 254)

class TmnxEventType(TextualConvention, Integer32):
    description = 'The TmnxEventType textual convention is an enumerated integer that specifies whether the priority event is a delta(1) or an explicit(2) event. A Delta priority event is a conditional event defined in a Priority Control policy that subtracts a given amount from the base priority to give the current in-use priority for the VRRP virtual router instances to which the policy is applied. An Explicit priority event is a conditional event defined in a Priority Control policy that explicitly defines the in-use priority for the VRRP virtual router instances to which the policy is applied. Explicit events override all Delta Events. When multiple explicit events occur simultaneously, the event with the lowest priority value defines the in-use priority.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("delta", 1), ("explicit", 2))

class TmnxEventHoldSet(TextualConvention, Unsigned32):
    description = "The TmnxEventHoldSet textual convention specifies the hold-set time i.e. the amount of time in seconds that must transpire before an event which is in a 'set' state can transition to the 'cleared' state. The hold-set time is used to dampen the effect of a flapping event. Each time an event transitions between 'cleared' and 'set', the hold-set timer is loaded with the configured hold-set time and begins to count down to zero. If the timer reaches zero, the event will be allowed to enter the 'cleared' state depending on whether the object controlling the event conforms to the requirements defined in the event itself. It is possible, on some event types, to have a further 'set' action reload the hold-set timer. This extends the amount of time that must expire before entering the cleared state."
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 86400)

class TmnxEventHoldClear(TextualConvention, Unsigned32):
    description = 'The TmnxEventHoldClear textual convention specifies the hold-clear time i.e. the amount of time in seconds by which the effect of a cleared event on the associated virtual router instance is delayed. The hold-clear time is used to prevent black hole conditions when a virtual router instance advertises itself as a master before other conditions associated with the cleared event have had a chance to enter a forwarding state.'
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 86400)

class TmnxPortDownEventOperState(TextualConvention, Integer32):
    description = 'The TmnxPortDownEventOperState textual convention is an enumerated integer that specifies the operational state of a Port Down Priority Event. The event state corresponds to the state of the port or the channel with which it is associated.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("cleared", 0), ("setNotProvisioned", 1), ("setNotPopulated", 2), ("setDown", 3))

class TmnxLagPortDownEventOperState(TextualConvention, Integer32):
    description = 'The TmnxLagPortDownEventOperState textual convention is an enumerated integer that specifies the operational state of a LAG Port Down Priority Event. The event state depends on the state of each port in the LAG (Link Aggregation Group) with which it is associated.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17))
    namedValues = NamedValues(("cleared", 0), ("setNonExistant", 1), ("setOnePortDown", 2), ("setTwoPortDown", 3), ("setThreePortDown", 4), ("setFourPortDown", 5), ("setFivePortDown", 6), ("setSixPortDown", 7), ("setSevenPortDown", 8), ("setEightPortDown", 9), ("setNinePortDown", 10), ("setTenPortDown", 11), ("setElevenPortDown", 12), ("setTwelvePortDown", 13), ("setThirteenPortDown", 14), ("setFourteenPortDown", 15), ("setFifteenPortDown", 16), ("setSixteenPortDown", 17))

class TmnxHostUnreachableEventOperState(TextualConvention, Integer32):
    description = 'The TmnxHostUnreachableEventOperState textual convention is an enumerated integer that specifies the operational state of a Host Unreachable Priority Event. The event state corresponds to the ability to receive ICMP Echo Reply packets from the IP host address associated with the event'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))
    namedValues = NamedValues(("clearedNoArp", 0), ("clearedNoRoute", 1), ("clearedHostUnreachable", 2), ("clearedNoReply", 3), ("clearedReplyReceived", 4), ("setNoArp", 5), ("setNoRoute", 6), ("setHostUnreachable", 7), ("setNoReply", 8), ("setReplyReceived", 9))

class TmnxRouteUnknownEventOperState(TextualConvention, Integer32):
    description = 'The TmnxRouteUnknownEventOperState textual convention is an enumerated integer that specifies the operational state of a Route Unknown Priority Event. The event state corresponds to the existence in the routing table of an active route to the IP route prefix corresponding to the event.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("clearedLessSpecificFound", 0), ("clearedFound", 1), ("setNonExistent", 2), ("setInActive", 3), ("setWrongNextHop", 4), ("setWrongProtocol", 5), ("setLessSpecificFound", 6), ("setDefaultBestMatch", 7))

class TmnxVrrpAssoBfdIntfSessOperState(TextualConvention, Integer32):
    description = 'The TmnxVrrpAssoBfdIntfSessOperState data type is an enumerated integer that describes the values used to identify the operational state of a BFD session the VRRP virtual router instance is relying upon for its fast triggering mechanism.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("unknown", 1), ("connected", 2), ("broken", 3), ("peerDetectsDown", 4), ("notConfigured", 5), ("noResources", 6))

tmnxVrrpOperTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 1, 1), )
if mibBuilder.loadTexts: tmnxVrrpOperTable.setStatus('current')
if mibBuilder.loadTexts: tmnxVrrpOperTable.setDescription('The tmnxVrrpOperTable provides an extension of the vrrpOperTable in the VRRP-MIB. Use of AUGMENTS clause implies a one-to-one dependent relationship between the base table, vrrpOperTable, and the augmenting table, tmnxVrrpOperTable. This in effect extends the vrrpOperTable with additional columns. Creation (or deletion) of a row in the vrrpOperTable results in the same fate for the row in the tmnxVrrpOperTable.')
tmnxVrrpOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 1, 1, 1), )
vrrpOperEntry.registerAugmentions(("TIMETRA-VRRP-MIB", "tmnxVrrpOperEntry"))
tmnxVrrpOperEntry.setIndexNames(*vrrpOperEntry.getIndexNames())
if mibBuilder.loadTexts: tmnxVrrpOperEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxVrrpOperEntry.setDescription('Each row entry in the tmnxVrrpOperTable represents additional columns in the vrrpOperTable for attributes specific to the Alcatel-Lucent SROS series VRRP implementation.')
tmnxVrrpOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxVrrpOperState.setStatus('current')
if mibBuilder.loadTexts: tmnxVrrpOperState.setDescription('The value of tmnxVrrpOperState gives the operational state of the VRRP virtual router instance.')
tmnxVrrpOperVirtualMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 1, 1, 1, 2), MacAddress().clone(hexValue="000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxVrrpOperVirtualMacAddr.setStatus('current')
if mibBuilder.loadTexts: tmnxVrrpOperVirtualMacAddr.setDescription('The value of tmnxVrrpOperVirtualMacAddr specifies the virtual MAC address used in ARP responses when the VRRP virtual router instance is operating as a master.')
tmnxVrrpOperMismatchDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 1, 1, 1, 3), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxVrrpOperMismatchDiscard.setStatus('current')
if mibBuilder.loadTexts: tmnxVrrpOperMismatchDiscard.setDescription("The tmnxVrrpOperMismatchDiscard is valid only if the VRRP virtual router instance associated with this entry is a non-owner. The value of tmnxVrrpOperMismatchDiscard specifies the action taken when IP Address List within a received VRRP Advertisement message does not match the configured virtual router IP addresses. If the value is 'true', then such VRRP messages are discarded.")
tmnxVrrpOperPingReply = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 1, 1, 1, 4), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxVrrpOperPingReply.setStatus('current')
if mibBuilder.loadTexts: tmnxVrrpOperPingReply.setDescription("The tmnxVrrpOperPingReply is valid only if the VRRP virtual router instance associated with this entry is a non-owner. By setting tmnxVrrpOperPingReply to 'true', a non-owner master is enabled to reply to ICMP Echo requests directed to the virtual router instance IP addresses. A non-owner backup virtual router never responds to such ICMP echo requests irrespective of the value of tmnxVrrpOperPingReply.")
tmnxVrrpOperTelnetReply = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 1, 1, 1, 5), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxVrrpOperTelnetReply.setStatus('current')
if mibBuilder.loadTexts: tmnxVrrpOperTelnetReply.setDescription("The tmnxVrrpOperTelnetReply is valid only if the VRRP virtual router instance associated with this entry is a non-owner. By setting tmnxVrrpOperTelnetReply to 'true', a non-owner master is enabled to reply to TCP Port 23 Telnet Requests directed to the virtual router instance IP addresses. A non-owner backup virtual router never responds to such Telnet requests irrespective of the value of tmnxVrrpOperTelnetReply.")
tmnxVrrpOperSshReply = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 1, 1, 1, 6), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxVrrpOperSshReply.setStatus('current')
if mibBuilder.loadTexts: tmnxVrrpOperSshReply.setDescription("The tmnxVrrpOperSshReply is valid only if the VRRP virtual router instance associated with this entry is a non-owner. By setting tmnxVrrpOperSshReply to 'true', a non-owner master is enabled to reply to SSH Requests directed to the virtual router instance IP addresses. A non-owner backup virtual router never responds to such SSH requests irrespective of the value of tmnxVrrpOperSshReply.")
tmnxVrrpOperPolicyId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 1, 1, 1, 7), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxVrrpOperPolicyId.setStatus('current')
if mibBuilder.loadTexts: tmnxVrrpOperPolicyId.setDescription('The tmnxVrrpOperPolicyId identifies the VRRP Priority Control policy associated with the VRRP virtual router instance. This policy must be a valid policy in the tmnxVrrpPolicyTable. A value of 0 indicates that no Priority Control policy is associated with the virtual router instance.')
tmnxVrrpOperInUsePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 1, 1, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxVrrpOperInUsePriority.setStatus('current')
if mibBuilder.loadTexts: tmnxVrrpOperInUsePriority.setDescription('The tmnxVrrpOperInUsePriority specifies the current in-use priority associated with the VRRP virtual router instance.')
tmnxVrrpOperMasterSince = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 1, 1, 1, 9), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxVrrpOperMasterSince.setStatus('current')
if mibBuilder.loadTexts: tmnxVrrpOperMasterSince.setDescription('The tmnxVrrpOperMasterSince, in case of a virtual router which is the current master, is the sysUpTime when operational state (vrrpOperState) of the virtual router changed to master(3). In case of a backup virtual router, this value specifies the sysUpTime when it received the first VRRP advertisement message from the virtual router which is the current master.')
tmnxVrrpOperMasterPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 1, 1, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxVrrpOperMasterPriority.setStatus('current')
if mibBuilder.loadTexts: tmnxVrrpOperMasterPriority.setDescription('The value of tmnxVrrpOperMasterPriority specifies the priority of the virtual router instance which is the current master')
tmnxVrrpOperOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 1, 1, 1, 11), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxVrrpOperOwner.setStatus('current')
if mibBuilder.loadTexts: tmnxVrrpOperOwner.setDescription("The value of tmnxVrrpOperOwner specifies whether or not the virtual router instance has been configured as an owner. If 'true', then the virtual router instance is an 'owner', if 'false' then the instance is a 'non-owner'.")
tmnxVrrpOperMasterDownInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 1, 1, 1, 12), TimeInterval()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxVrrpOperMasterDownInterval.setReference('www.ietf.org/internet-drafts/draft-ietf-vrrp-spec-v2-06.txt')
if mibBuilder.loadTexts: tmnxVrrpOperMasterDownInterval.setStatus('current')
if mibBuilder.loadTexts: tmnxVrrpOperMasterDownInterval.setDescription('The value of tmnxVrrpOperMasterDownInterval specifies the time interval for the backup router to declare the master as down. It is calculated as (3 * Advertisement_Interval) + Skew_time where Skew_Time is calculated as (256 - Priority) / 256 ')
tmnxVrrpOperMasterDownTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 1, 1, 1, 13), TimeInterval()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxVrrpOperMasterDownTimer.setReference('www.ietf.org/internet-drafts/draft-ietf-vrrp-spec-v2-06.txt')
if mibBuilder.loadTexts: tmnxVrrpOperMasterDownTimer.setStatus('current')
if mibBuilder.loadTexts: tmnxVrrpOperMasterDownTimer.setDescription('The value of tmnxVrrpOperMasterDownTimer specifies the current value of the Master Down Timer. When a backup router receives a VRRP advertisement from a master, it resets this timer to the value of the Master Down Interval and begins to count down. If the backup router does not receive an advertisement till this timer times out, it will assume that the master is down and will declare itself to be the master.')
tmnxVrrpOperAdvIntervalInherit = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 1, 1, 1, 14), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxVrrpOperAdvIntervalInherit.setStatus('current')
if mibBuilder.loadTexts: tmnxVrrpOperAdvIntervalInherit.setDescription("The tmnxVrrpOperAdvIntervalInherit object is valid only if the VRRP virtual router instance associated with this entry is a non-owner. When the VRRP instance is operating as a backup and the value of tmnxVrrpOperAdvIntervalInherit is set to 'true', the master down timer is indirectly derived from the value in the advertisement interval field of the VRRP message received from the current master. When the VRRP instance is operating as a backup and the value of tmnxVrrpOperAdvIntervalInherit is set to 'false', the configured advertisement interval (vrrpOperAdvertisementInterval) is matched against the value in the advertisement interval field of the VRRP message received from the current master. If the two values do not match then the VRRP advertisement is discarded When the VRRP instance is operating as a master, the value of tmnxVrrpOperAdvIntervalInherit has no effect.")
tmnxVrrpOperInUseAdvInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 1, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxVrrpOperInUseAdvInterval.setStatus('current')
if mibBuilder.loadTexts: tmnxVrrpOperInUseAdvInterval.setDescription("The tmnxVrrpOperInUseAdvInterval specifies the operational value for the advertisement interval. When the VRRP instance is operating as a master, the value of tmnxVrrpOperInUseAdvInterval is the same as the value of vrrpOperAdvertisementInterval. When the VRRP instance is operating as a backup and the value of tmnxVrrpOperAdvIntervalInherit is set to 'true', the total value of tmnxVrrpOperInUseAdvInterval and tmnxVrrpOperInUseAdvIntlMilSec equals the value in the advertisement interval field of the VRRP Advertisement message received from the current master. When the VRRP instance is operating as a backup and the value of tmnxVrrpOperAdvIntervalInherit is set to 'false', the value of tmnxVrrpOperInUseAdvInterval is the same as the value of vrrpOperAdvertisementInterval. To get the total interval time, add the value for tmnxVrrpOperInUseAdvInterval in seconds and tmnxVrrpOperInUseAdvIntlMilSec in milliseconds. Only the master router sends VRRP advertisements.")
tmnxVrrpOperTracerouteReply = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 1, 1, 1, 16), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxVrrpOperTracerouteReply.setStatus('current')
if mibBuilder.loadTexts: tmnxVrrpOperTracerouteReply.setDescription("The tmnxVrrpOperTracerouteReply is valid only if the VRRP virtual router instance associated with this entry is a non-owner. By setting tmnxVrrpOperTracerouteReply to 'true', a non-owner master is enabled to reply to traceroute requests directed to the virtual router instance IP addresses. A non-owner backup virtual router never responds to such traceroute requests irrespective of the value of tmnxVrrpOperTracerouteReply.")
tmnxVrrpOperStandbyFwding = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 1, 1, 1, 17), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxVrrpOperStandbyFwding.setStatus('current')
if mibBuilder.loadTexts: tmnxVrrpOperStandbyFwding.setDescription("The value of tmnxVrrpOperStandbyFwding specifies whether this vrrp instance allows forwarding packets to standy router. The value 'false' specifies that a standby router should not forward traffic sent to virtual router's MAC address. However, the standby router should forward traffic sent to the standby routers real MAC address. The value 'true' specifies that a standby router should forward all traffic.")
tmnxVrrpOperAdvIntervalMilSec = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 1, 1, 1, 18), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(100, 900), ))).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxVrrpOperAdvIntervalMilSec.setStatus('current')
if mibBuilder.loadTexts: tmnxVrrpOperAdvIntervalMilSec.setDescription('The value of tmnxVrrpOperAdvIntervalMilSec specifies the milli seconds time interval between sending advertisement messages. To get the total interval time, add the value for vrrpOperAdvertisementInterval in seconds and tmnxVrrpOperAdvIntervalMilSec in milliseconds. Only the master router sends VRRP advertisements.')
tmnxVrrpOperInUseAdvIntlMilSec = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 1, 1, 1, 19), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(100, 900), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxVrrpOperInUseAdvIntlMilSec.setStatus('current')
if mibBuilder.loadTexts: tmnxVrrpOperInUseAdvIntlMilSec.setDescription("The tmnxVrrpOperInUseAdvIntlMilSec specifies the operational value for the advertisement milli second interval. When the VRRP instance is operating as a master, the value of tmnxVrrpOperInUseAdvIntlMilSec is the same as the value of tmnxVrrpOperAdvIntervalMilSec. When the VRRP instance is operating as a backup and the value of tmnxVrrpOperAdvIntervalInherit is set to 'true', the total value of tmnxVrrpOperInUseAdvInterval and tmnxVrrpOperInUseAdvIntlMilSec equals the value in the advertisement interval field of the VRRP Advertisement message received from the current master. When the VRRP instance is operating as a backup and the value of tmnxVrrpOperAdvIntervalInherit is set to 'false', the value of tmnxVrrpOperInUseAdvIntlMilSec is the same as the value of tmnxVrrpOperAdvIntervalMilSec. To get the total interval time, add the value for tmnxVrrpOperInUseAdvInterval in seconds and tmnxVrrpOperInUseAdvIntlMilSec in milliseconds. Only the master router sends VRRP advertisements.")
tmnxVrrpOperInitDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 1, 1, 1, 20), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxVrrpOperInitDelay.setStatus('current')
if mibBuilder.loadTexts: tmnxVrrpOperInitDelay.setDescription('The value of tmnxVrrpOperInitDelay specifies the initialization delay timer for VRRP, in seconds.')
tmnxVrrpOperInitTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 1, 1, 1, 21), TimeInterval()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxVrrpOperInitTimer.setStatus('current')
if mibBuilder.loadTexts: tmnxVrrpOperInitTimer.setDescription('The value of tmnxVrrpOperInitTimer indicates the current value of initialization delay timer for VRRP, in milli-seconds.')
tmnxVrrpRouterStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 1, 2), )
if mibBuilder.loadTexts: tmnxVrrpRouterStatsTable.setStatus('current')
if mibBuilder.loadTexts: tmnxVrrpRouterStatsTable.setDescription('The tmnxVrrpRouterStatsTable provides an extension of the vrrpRouterStatsTable in the VRRP-MIB. Use of AUGMENTS clause implies a one-to-one dependent relationship between the base table, vrrpRouterStatsTable, and the augmenting table, tmnxVrrpRouterStatsTable. This in effect extends the vrrpRouterStatsTable with additional columns.')
tmnxVrrpRouterStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 1, 2, 1), )
vrrpRouterStatsEntry.registerAugmentions(("TIMETRA-VRRP-MIB", "tmnxVrrpRouterStatsEntry"))
tmnxVrrpRouterStatsEntry.setIndexNames(*vrrpRouterStatsEntry.getIndexNames())
if mibBuilder.loadTexts: tmnxVrrpRouterStatsEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxVrrpRouterStatsEntry.setDescription('Each row entry in the tmnxVrrpRouterStatsTable represents additional columns in the vrrpRouterStatsTable for statistics specific to the Alcatel-Lucent SROS series VRRP implementation.')
tmnxVrrpStatsAdvertiseSent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 1, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxVrrpStatsAdvertiseSent.setStatus('current')
if mibBuilder.loadTexts: tmnxVrrpStatsAdvertiseSent.setDescription('The total number of VRRP advertisements sent by this virtual router.')
tmnxVrrpStatsPreemptEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 1, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxVrrpStatsPreemptEvents.setStatus('current')
if mibBuilder.loadTexts: tmnxVrrpStatsPreemptEvents.setDescription('The value for tmnxVrrpStatsPreemptEvents specifies the total number of times the virtual router has preempted another non-owner master with lower priority.')
tmnxVrrpStatsPreemptedEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 1, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxVrrpStatsPreemptedEvents.setStatus('current')
if mibBuilder.loadTexts: tmnxVrrpStatsPreemptedEvents.setDescription('The value for tmnxVrrpStatsPreemptedEvents specifies the total number of times the virtual router has been preempted by another non-owner master with higher priority.')
tmnxVrrpStatsMasterChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 1, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxVrrpStatsMasterChanges.setStatus('current')
if mibBuilder.loadTexts: tmnxVrrpStatsMasterChanges.setDescription('The value for tmnxVrrpStatsMasterChanges specifies the total number of times the virtual router has seen the master virtual router change.')
tmnxVrrpStatsAdvertiseIntervalDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 1, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxVrrpStatsAdvertiseIntervalDiscards.setStatus('current')
if mibBuilder.loadTexts: tmnxVrrpStatsAdvertiseIntervalDiscards.setDescription('The total number of VRRP advertisement packets discarded because the advertisement interval in the received packet was different than the one configured for the local virtual router.')
tmnxVrrpStatsAddressListDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 1, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxVrrpStatsAddressListDiscards.setStatus('current')
if mibBuilder.loadTexts: tmnxVrrpStatsAddressListDiscards.setDescription('The total number of VRRP advertisement packets discarded because the address list did not match the locally configured list for the virtual router.')
tmnxVrrpStatsTotalDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 1, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxVrrpStatsTotalDiscards.setStatus('current')
if mibBuilder.loadTexts: tmnxVrrpStatsTotalDiscards.setDescription('The total number of VRRP advertisement packets discarded for any reason. This includes the packets discarded due to advertise interval mismatch and address list mismatch.')
tmnxVrrpRouterMasterTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 1, 3), )
if mibBuilder.loadTexts: tmnxVrrpRouterMasterTable.setStatus('current')
if mibBuilder.loadTexts: tmnxVrrpRouterMasterTable.setDescription('The tmnxVrrpRouterMasterTable is a read-only table which provides a list of the master primary addresses that have been seen by the VRRP virtual router instance. Only the most recent 32 masters are listed by this table.')
tmnxVrrpRouterMasterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 1, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "VRRP-MIB", "vrrpOperVrId"), (0, "TIMETRA-VRRP-MIB", "tmnxVrrpRouterMasterPrimaryAddr"))
if mibBuilder.loadTexts: tmnxVrrpRouterMasterEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxVrrpRouterMasterEntry.setDescription('Each row entry in the tmnxVrrpRouterMasterTable represents the primary address of a VRRP virtual router instance that has become the master as seen by the virtual router instance identified by ifIndex and vrrpOperVrId.')
tmnxVrrpRouterMasterPrimaryAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 1, 3, 1, 1), IpAddress())
if mibBuilder.loadTexts: tmnxVrrpRouterMasterPrimaryAddr.setStatus('current')
if mibBuilder.loadTexts: tmnxVrrpRouterMasterPrimaryAddr.setDescription('The value of tmnxVrrpRouterMasterPrimaryAddr gives the primary address of the virtual router that became a master as seen by the virtual router instance identified by ifIndex and vrrpOperVrId.')
tmnxVrrpRouterMasterLastSeen = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 1, 3, 1, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxVrrpRouterMasterLastSeen.setStatus('current')
if mibBuilder.loadTexts: tmnxVrrpRouterMasterLastSeen.setDescription('The value for tmnxVrrpRouterMasterLastSeen specifies the sysUpTime when the master was last seen by this virtual router instance. In other words it is the timestamp of the last advertisement message that was received from that master.')
tmnxVrrpRouterMasterMessageCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 1, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxVrrpRouterMasterMessageCount.setStatus('current')
if mibBuilder.loadTexts: tmnxVrrpRouterMasterMessageCount.setDescription('The value for tmnxVrrpRouterMasterMessageCount specifies the total number of VRRP advertisement messages that have been received from the master.')
tmnxVrrpRouterMasterAuthSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 1, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxVrrpRouterMasterAuthSequence.setStatus('current')
if mibBuilder.loadTexts: tmnxVrrpRouterMasterAuthSequence.setDescription('The value for tmnxVrrpRouterMasterAuthSequence specifies the last sequence number seen in the IP Authentication header of the advertisement messages received from the master. A negative value implies that the master was not being authenticated via IP authentication header.')
tmnxVrrpRouterMasterIPListMatch = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 1, 3, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxVrrpRouterMasterIPListMatch.setStatus('current')
if mibBuilder.loadTexts: tmnxVrrpRouterMasterIPListMatch.setDescription('The value for tmnxVrrpRouterMasterIPListMatch specifies whether or not the IP address list in the advertisement messages received from the master matched the configured virtual router IP address list.')
tmnxVrrpAssoBfdIntfTblLastChgd = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 1, 4), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxVrrpAssoBfdIntfTblLastChgd.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxVrrpAssoBfdIntfTblLastChgd.setDescription('Timestamp of the last change to the tmnxVrrpAssoBfdIntfTable either from adding a row or removing a row.')
tmnxVrrpAssoBfdIntfTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 1, 5), )
if mibBuilder.loadTexts: tmnxVrrpAssoBfdIntfTable.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxVrrpAssoBfdIntfTable.setDescription('The tmnxVrrpAssoBfdIntfTable is a read-only table which provides a list of the BFD interfaces associated with the corrosponding VRRP virtual router instance. The BFD interface provides a fast mechanism for changing the state of an VRRP virtual router instance riding on the same subnet. The tmnxVrrpAssoBfdIntfTable is obsoleted and is replaced by tVrrpAssoBfdIntfTable.')
tmnxVrrpAssoBfdIntfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 1, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "VRRP-MIB", "vrrpOperVrId"), (0, "TIMETRA-VRRP-MIB", "tmnxVrrpAssoBfdIntfSvcId"), (0, "TIMETRA-VRRP-MIB", "tmnxVrrpAssoBfdIntfIfName"), (0, "TIMETRA-VRRP-MIB", "tmnxVrrpAssoBfdIntfDestIpType"), (0, "TIMETRA-VRRP-MIB", "tmnxVrrpAssoBfdIntfDestIp"))
if mibBuilder.loadTexts: tmnxVrrpAssoBfdIntfEntry.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxVrrpAssoBfdIntfEntry.setDescription('Each row entry in the tmnxVrrpAssoBfdIntfTable represents the BFD interface associated with VRRP virtual router instance identified by ifIndex and vrrpOperVrId.')
tmnxVrrpAssoBfdIntfSvcId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 1, 5, 1, 1), TmnxServId())
if mibBuilder.loadTexts: tmnxVrrpAssoBfdIntfSvcId.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxVrrpAssoBfdIntfSvcId.setDescription('The value of tmnxVrrpAssoBfdIntfSvcId specifies the service ID of the interface running BFD.')
tmnxVrrpAssoBfdIntfIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 1, 5, 1, 2), TNamedItem())
if mibBuilder.loadTexts: tmnxVrrpAssoBfdIntfIfName.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxVrrpAssoBfdIntfIfName.setDescription('The value of tmnxVrrpAssoBfdIntfIfName specifies the name of the interface running BFD.')
tmnxVrrpAssoBfdIntfDestIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 1, 5, 1, 3), InetAddressType())
if mibBuilder.loadTexts: tmnxVrrpAssoBfdIntfDestIpType.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxVrrpAssoBfdIntfDestIpType.setDescription('The value of tmnxVrrpAssoBfdIntfDestIpType specifies the address type of tmnxVrrpAssoBfdIntfDestIp object.')
tmnxVrrpAssoBfdIntfDestIp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 1, 5, 1, 4), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), ValueSizeConstraint(20, 20), )))
if mibBuilder.loadTexts: tmnxVrrpAssoBfdIntfDestIp.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxVrrpAssoBfdIntfDestIp.setDescription('The value of tmnxVrrpAssoBfdIntfDestIp specifies the destination IP address on the interface running BFD.')
tmnxVrrpAssoBfdIntfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 1, 5, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxVrrpAssoBfdIntfRowStatus.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxVrrpAssoBfdIntfRowStatus.setDescription('This object tmnxVrrpAssoBfdIntfRowStatus is used for creation or deletion of entries in the tmnxVrrpAssoBfdIntfEntry. Deletion of an entry in this table will not succeed if it is obsoletely associated with any VRRP virtual router instance.')
tmnxVrrpAssoBfdIntfLastChgd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 1, 5, 1, 6), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxVrrpAssoBfdIntfLastChgd.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxVrrpAssoBfdIntfLastChgd.setDescription('The value of tmnxVrrpAssoBfdIntfLastChgd specifies the time stamp of the last change to this row of this table.')
tmnxVrrpAssoBfdIntfSrcIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 1, 5, 1, 7), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxVrrpAssoBfdIntfSrcIpType.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxVrrpAssoBfdIntfSrcIpType.setDescription('The value of tmnxVrrpAssoBfdIntfSrcIpType indicates the address type of tmnxVrrpAssoBfdIntfSrcIp object.')
tmnxVrrpAssoBfdIntfSrcIp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 1, 5, 1, 8), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), ValueSizeConstraint(20, 20), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxVrrpAssoBfdIntfSrcIp.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxVrrpAssoBfdIntfSrcIp.setDescription('The value of tmnxVrrpAssoBfdIntfSrcIp indicates the source IP address on the interface running BFD.')
tmnxVrrpAssoBfdIntfSessOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 1, 5, 1, 9), TmnxVrrpAssoBfdIntfSessOperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxVrrpAssoBfdIntfSessOperState.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxVrrpAssoBfdIntfSessOperState.setDescription('The value of tmnxVrrpAssoBfdIntfSessOperState indicates the operational state of the BFD session the VRRP virtual router instance is relying upon for its fast triggering mechanism.')
tmnxVrrpPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 2, 1), )
if mibBuilder.loadTexts: tmnxVrrpPolicyTable.setStatus('current')
if mibBuilder.loadTexts: tmnxVrrpPolicyTable.setDescription('The tmnxVrrpPolicyTable contains a list of VRRP Priority Control Policies.')
tmnxVrrpPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 2, 1, 1), ).setIndexNames((0, "TIMETRA-VRRP-MIB", "tmnxVrrpPolicyId"))
if mibBuilder.loadTexts: tmnxVrrpPolicyEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxVrrpPolicyEntry.setDescription('Each row entry in the tmnxVrrpPolicyTable represents an instance of a Priority Control Policy used to override or adjust the base priority value of a VRRP virtual router instance depending on events or conditions within the chassis. Entries can be created and deleted via SNMP SET operations using tmnxVrrpPolicyRowStatus.')
tmnxVrrpPolicyId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 2, 1, 1, 1), TmnxVrrpPolicyID())
if mibBuilder.loadTexts: tmnxVrrpPolicyId.setStatus('current')
if mibBuilder.loadTexts: tmnxVrrpPolicyId.setDescription('The index value tmnxVrrpPolicyId uniquely identifies a policy-id to be used when creating a Priority Control Policy.')
tmnxVrrpPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 2, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxVrrpPolicyRowStatus.setStatus('current')
if mibBuilder.loadTexts: tmnxVrrpPolicyRowStatus.setDescription('tmnxVrrpPolicyRowStatus is used for creation or deletion of entries in the tmnxVrrpPolicyTable. Deletion of an entry in this table willnot succeed if it is currently associated with any VRRP virtual router instance.')
tmnxVrrpPolicyDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 2, 1, 1, 3), TItemDescription().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxVrrpPolicyDescription.setStatus('current')
if mibBuilder.loadTexts: tmnxVrrpPolicyDescription.setDescription('The value of tmnxVrrpPolicyDescription specifies a user provided description for the VRRP Policy. It can consist of any printable ASCII characters.')
tmnxVrrpPolicyDeltaInUseLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 2, 1, 1, 4), TmnxVrrpPriority().subtype(subtypeSpec=ValueRangeConstraint(1, 254)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxVrrpPolicyDeltaInUseLimit.setStatus('current')
if mibBuilder.loadTexts: tmnxVrrpPolicyDeltaInUseLimit.setDescription("The value of tmnxVrrpPolicyDeltaInUseLimit specifies the delta-in-use-limit for a VRRP policy. Once the total sum of all delta events has been calculated and subtracted from the base-priority of the virtual router, the result is compared to the delta-in-use-limit value. If the result is less than this value, the delta-in-use-limit value is used as the virtual router in-use priority value. If an explicit priority control event overrides the delta priority control events, the delta-in-use-limit has no effect. Setting tmnxVrrpPolicyDeltaInUseLimit to 0 and allowing the sum of the delta priority control events to reduce the virtual router's in-use-priority to 0, can prevented it from becoming or staying master.")
tmnxVrrpPolicyReferenceCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 2, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxVrrpPolicyReferenceCount.setStatus('current')
if mibBuilder.loadTexts: tmnxVrrpPolicyReferenceCount.setDescription('The value of tmnxVrrpPolicyReferenceCount specifies the number of virtual router instances to which the policy has been applied. The policy cannot be deleted unless this value is 0.')
tmnxVrrpPolicyCurrentExplicit = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 2, 1, 1, 6), TmnxVrrpPriority()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxVrrpPolicyCurrentExplicit.setStatus('current')
if mibBuilder.loadTexts: tmnxVrrpPolicyCurrentExplicit.setDescription('When multiple explicitly defined events associated with the priority control policy happen simultaneously, the lowest value of all the current explicit priorities will be used as the in-use priority for the virtual router. This value is specified by the variable tmnxVrrpPolicyCurrentExplicit.')
tmnxVrrpPolicyCurrentDeltaSum = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 2, 1, 1, 7), TmnxVrrpPriority()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxVrrpPolicyCurrentDeltaSum.setStatus('current')
if mibBuilder.loadTexts: tmnxVrrpPolicyCurrentDeltaSum.setDescription('When multiple delta events associated with the priority control policy happen simultaneously, the sum of the priorites of all these delta events is specified by the variable tmnxVrrpPolicyCurrentDeltaSum. This sum is subtracted from the base priority of the virtual router to give the in-use priority.')
tmnxVrrpPolicySvcContext = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 2, 1, 1, 8), TmnxServId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxVrrpPolicySvcContext.setStatus('current')
if mibBuilder.loadTexts: tmnxVrrpPolicySvcContext.setDescription("The value of tmnxVrrpPolicySvcContext specifies the service ID to which this policy applies. A value of '0' means that this policy does not apply to a service, but to the base router instance. This object can only be set at row creation time.")
tmnxVrrpPortDownEventTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 2, 2), )
if mibBuilder.loadTexts: tmnxVrrpPortDownEventTable.setStatus('current')
if mibBuilder.loadTexts: tmnxVrrpPortDownEventTable.setDescription('The tmnxVrrpPortDownEventTable contains a list of Port Down Priority Events.')
tmnxVrrpPortDownEventEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 2, 2, 1), ).setIndexNames((0, "TIMETRA-VRRP-MIB", "tmnxVrrpPolicyId"), (0, "TIMETRA-VRRP-MIB", "tmnxVrrpPortDownEventPortId"))
if mibBuilder.loadTexts: tmnxVrrpPortDownEventEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxVrrpPortDownEventEntry.setDescription('Each row entry in the tmnxVrrpPortDownEventTable represents an instance of a Port Down Priority Event used to override or adjust the base priority value of a VRRP virtual router instance depending on the operational state of the event. Entries can be created and deleted via SNMP SET operations using tmnxVrrpPortDownEventRowStatus.')
tmnxVrrpPortDownEventPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 2, 2, 1, 1), TmnxPortID())
if mibBuilder.loadTexts: tmnxVrrpPortDownEventPortId.setStatus('current')
if mibBuilder.loadTexts: tmnxVrrpPortDownEventPortId.setDescription('The index value tmnxVrrpPortDownEventPortId uniquely identifies the port or channel whose operational state is monitored by this priority control event.')
tmnxVrrpPortDownEventRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 2, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxVrrpPortDownEventRowStatus.setStatus('current')
if mibBuilder.loadTexts: tmnxVrrpPortDownEventRowStatus.setDescription('tmnxVrrpPortDownEventRowStatus is used for the creation or deletion of entries in the tmnxVrrpPortDownEventTable.')
tmnxVrrpPortDownEventPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 2, 2, 1, 3), TmnxVrrpPriority()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxVrrpPortDownEventPriority.setStatus('current')
if mibBuilder.loadTexts: tmnxVrrpPortDownEventPriority.setDescription("The value of tmnxVrrpPortDownEventPriority specifies the priority level associated with this event. When the operational state of the event transitions to one of the 'set' states, this value will either be subtracted from the in-use priority (if the event is a 'delta' event) or the in-use priority will be explicitly overridden by this priority value (if the event is an 'explicit' event).")
tmnxVrrpPortDownEventType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 2, 2, 1, 4), TmnxEventType().clone('delta')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxVrrpPortDownEventType.setStatus('current')
if mibBuilder.loadTexts: tmnxVrrpPortDownEventType.setDescription("The value of tmnxVrrpPortDownEventType specifies whether this event is a 'delta' or an 'explicit' event. When the event is 'set', the value of tmnxVrrpPortDownEventPriority will be subtracted from the in-use priority in case of a 'delta' event or the in-use priority will be explicitly overridden by the value of tmnxVrrpPortDownEventPriority in case of an 'explicit' event.")
tmnxVrrpPortDownEventHoldSet = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 2, 2, 1, 5), TmnxEventHoldSet()).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxVrrpPortDownEventHoldSet.setStatus('current')
if mibBuilder.loadTexts: tmnxVrrpPortDownEventHoldSet.setDescription('The value of tmnxVrrpPortDownEventHoldSet specifies the configured Hold Set time associated with the event.')
tmnxVrrpPortDownEventOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 2, 2, 1, 6), TmnxPortDownEventOperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxVrrpPortDownEventOperState.setStatus('current')
if mibBuilder.loadTexts: tmnxVrrpPortDownEventOperState.setDescription('The value of tmnxVrrpPortDownEventOperState specifies the current operational state of the event.')
tmnxVrrpPortDownEventHoldSetRemaining = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 2, 2, 1, 7), TmnxEventHoldSet()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxVrrpPortDownEventHoldSetRemaining.setStatus('current')
if mibBuilder.loadTexts: tmnxVrrpPortDownEventHoldSetRemaining.setDescription('The value of tmnxVrrpPortDownEventHoldSetRemaining specifies the current value of the hold-set timer i.e. the amount of time remaining before the event will transition into the cleared state.')
tmnxVrrpPortDownEventPrevState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 2, 2, 1, 8), TmnxPortDownEventOperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxVrrpPortDownEventPrevState.setStatus('current')
if mibBuilder.loadTexts: tmnxVrrpPortDownEventPrevState.setDescription('The value of tmnxVrrpPortDownEventPrevState specifies the previous operational state of the event.')
tmnxVrrpPortDownEventLastTransition = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 2, 2, 1, 9), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxVrrpPortDownEventLastTransition.setStatus('current')
if mibBuilder.loadTexts: tmnxVrrpPortDownEventLastTransition.setDescription('The value of tmnxVrrpPortDownEventLastTransition specifies the sysUpTime when the operational state of the event last changed.')
tmnxVrrpPortDownEventSetCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 2, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxVrrpPortDownEventSetCounter.setStatus('current')
if mibBuilder.loadTexts: tmnxVrrpPortDownEventSetCounter.setDescription("The value of tmnxVrrpPortDownEventSetCounter specifies the number of times the event has transitioned to one of the 'set' states.")
tmnxVrrpPortDownEventInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 2, 2, 1, 11), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxVrrpPortDownEventInUse.setStatus('current')
if mibBuilder.loadTexts: tmnxVrrpPortDownEventInUse.setDescription("If value of tmnxVrrpPortDownEventInUse is 'true', then the event is currently affecting the in-use priority of some virtual router.")
tmnxVrrpPortDownEventHoldClear = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 2, 2, 1, 12), TmnxEventHoldClear()).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxVrrpPortDownEventHoldClear.setStatus('current')
if mibBuilder.loadTexts: tmnxVrrpPortDownEventHoldClear.setDescription('The value of tmnxVrrpPortDownEventHoldClear specifies the configured Hold Clear time associated with the event.')
tmnxVrrpPortDownEventHoldClearRemaining = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 2, 2, 1, 13), TmnxEventHoldClear()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxVrrpPortDownEventHoldClearRemaining.setStatus('current')
if mibBuilder.loadTexts: tmnxVrrpPortDownEventHoldClearRemaining.setDescription('The value of tmnxVrrpPortDownEventHoldClearRemaining specifies the current value of the hold-clear timer i.e. the amount of time remaining before the cleared event will have an effect on the virtual router instance.')
tmnxVrrpLagPortDownEventTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 2, 3), )
if mibBuilder.loadTexts: tmnxVrrpLagPortDownEventTable.setStatus('current')
if mibBuilder.loadTexts: tmnxVrrpLagPortDownEventTable.setDescription('The tmnxVrrpLagPortDownEventTable contains a list of Lag Port Down Priority Events.')
tmnxVrrpLagPortDownEventEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 2, 3, 1), ).setIndexNames((0, "TIMETRA-VRRP-MIB", "tmnxVrrpPolicyId"), (0, "TIMETRA-VRRP-MIB", "tmnxVrrpLagPortDownEventLagId"))
if mibBuilder.loadTexts: tmnxVrrpLagPortDownEventEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxVrrpLagPortDownEventEntry.setDescription('Each row entry in the tmnxVrrpLagPortDownEventTable represents an instance of a Lag Port Down Priority Event used to override or adjust the base priority value of a VRRP virtual router instance depending on the operational state of the event. Entries can be created and deleted via SNMP SET operations using tmnxVrrpLagPortDownEventRowStatus.')
tmnxVrrpLagPortDownEventLagId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 2, 3, 1, 1), LAGInterfaceNumber())
if mibBuilder.loadTexts: tmnxVrrpLagPortDownEventLagId.setStatus('current')
if mibBuilder.loadTexts: tmnxVrrpLagPortDownEventLagId.setDescription('The index value tmnxVrrpLagPortDownEventLagId uniquely identifies the Link Aggregation Group (LAG) whose operational state is monitored by this priority control event.')
tmnxVrrpLagPortDownEventRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 2, 3, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxVrrpLagPortDownEventRowStatus.setStatus('current')
if mibBuilder.loadTexts: tmnxVrrpLagPortDownEventRowStatus.setDescription('tmnxVrrpLagPortDownEventRowStatus is used for the creation or deletion of entries in the tmnxVrrpLagPortDownEventTable.')
tmnxVrrpLagPortDownEventHoldSet = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 2, 3, 1, 3), TmnxEventHoldSet()).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxVrrpLagPortDownEventHoldSet.setStatus('current')
if mibBuilder.loadTexts: tmnxVrrpLagPortDownEventHoldSet.setDescription('The value of tmnxVrrpLagPortDownEventHoldSet specifies the configured Hold Set time associated with the event.')
tmnxVrrpLagPortDownEventOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 2, 3, 1, 4), TmnxLagPortDownEventOperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxVrrpLagPortDownEventOperState.setStatus('current')
if mibBuilder.loadTexts: tmnxVrrpLagPortDownEventOperState.setDescription('The value of tmnxVrrpLagPortDownEventOperState specifies the current operational state of the event.')
tmnxVrrpLagPortDownEventHoldSetRemaining = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 2, 3, 1, 5), TmnxEventHoldSet()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxVrrpLagPortDownEventHoldSetRemaining.setStatus('current')
if mibBuilder.loadTexts: tmnxVrrpLagPortDownEventHoldSetRemaining.setDescription('The value of tmnxVrrpLagPortDownEventHoldSetRemaining specifies the current value of the hold-set timer i.e. the amount of time remaining before the event will transition into the cleared state.')
tmnxVrrpLagPortDownEventPrevState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 2, 3, 1, 6), TmnxLagPortDownEventOperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxVrrpLagPortDownEventPrevState.setStatus('current')
if mibBuilder.loadTexts: tmnxVrrpLagPortDownEventPrevState.setDescription('The value of tmnxVrrpLagPortDownEventPrevState specifies the previous operational state of the event.')
tmnxVrrpLagPortDownEventLastTransition = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 2, 3, 1, 7), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxVrrpLagPortDownEventLastTransition.setStatus('current')
if mibBuilder.loadTexts: tmnxVrrpLagPortDownEventLastTransition.setDescription('The value of tmnxVrrpLagPortDownEventLastTransition specifies the sysUpTime when the operational state of the event last changed.')
tmnxVrrpLagPortDownEventSetCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 2, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxVrrpLagPortDownEventSetCounter.setStatus('current')
if mibBuilder.loadTexts: tmnxVrrpLagPortDownEventSetCounter.setDescription("The value of tmnxVrrpLagPortDownEventSetCounter specifies the number of times the event has transitioned to one of the 'set' states.")
tmnxVrrpLagPortDownEventInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 2, 3, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxVrrpLagPortDownEventInUse.setStatus('current')
if mibBuilder.loadTexts: tmnxVrrpLagPortDownEventInUse.setDescription("If value of tmnxVrrpLagPortDownEventInUse is 'true', then the event is currently affecting the in-use priority of some virtual router.")
tmnxVrrpLagPortDownEventHoldClear = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 2, 3, 1, 10), TmnxEventHoldClear()).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxVrrpLagPortDownEventHoldClear.setStatus('current')
if mibBuilder.loadTexts: tmnxVrrpLagPortDownEventHoldClear.setDescription('The value of tmnxVrrpLagPortDownEventHoldClear specifies the configured Hold Clear time associated with the event.')
tmnxVrrpLagPortDownEventHoldClearRemaining = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 2, 3, 1, 11), TmnxEventHoldClear()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxVrrpLagPortDownEventHoldClearRemaining.setStatus('current')
if mibBuilder.loadTexts: tmnxVrrpLagPortDownEventHoldClearRemaining.setDescription('The value of tmnxVrrpLagPortDownEventHoldClearRemaining specifies the current value of the hold-clear timer i.e. the amount of time remaining before the cleared event will have an effect on the virtual router instance.')
tmnxVrrpLagNumberDownEventTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 2, 4), )
if mibBuilder.loadTexts: tmnxVrrpLagNumberDownEventTable.setStatus('current')
if mibBuilder.loadTexts: tmnxVrrpLagNumberDownEventTable.setDescription('The tmnxVrrpLagNumberDownEventTable contains a list of events corresponding to the number of LAG ports that are operationally down within a specific LAG.')
tmnxVrrpLagNumberDownEventEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 2, 4, 1), ).setIndexNames((0, "TIMETRA-VRRP-MIB", "tmnxVrrpPolicyId"), (0, "TIMETRA-VRRP-MIB", "tmnxVrrpLagPortDownEventLagId"), (0, "TIMETRA-VRRP-MIB", "tmnxVrrpLagNumberDown"))
if mibBuilder.loadTexts: tmnxVrrpLagNumberDownEventEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxVrrpLagNumberDownEventEntry.setDescription('Each tmnxVrrpLagNumberDownEventEntry is associated with an entry in the tmnxVrrpLagPortDownEventTable. It is used to assign a priority value to the LAG Port Down Priority Event depending on the number of LAG ports that are in the operationally down state. Entries can be created and deleted via SNMP SET operations using tmnxVrrpLagNumberDownEventRowStatus. When a tmnxVrrpLagPortDownEventEntry is deleted all tmnxVrrpLagNumberDownEventTable entries associated with it are also deleted.')
tmnxVrrpLagNumberDown = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 2, 4, 1, 1), Unsigned32())
if mibBuilder.loadTexts: tmnxVrrpLagNumberDown.setStatus('current')
if mibBuilder.loadTexts: tmnxVrrpLagNumberDown.setDescription('The index value tmnxVrrpLagNumberDown corresponds to the number of LAG ports that are operationally down for a specific LAG. This value sets a threshold for a LAG Port Down Event.')
tmnxVrrpLagNumberDownEventRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 2, 4, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxVrrpLagNumberDownEventRowStatus.setStatus('current')
if mibBuilder.loadTexts: tmnxVrrpLagNumberDownEventRowStatus.setDescription('tmnxVrrpLagNumberDownEventRowStatus is used for the creation or deletion of entries in the tmnxVrrpLagNumberDownEventTable.')
tmnxVrrpLagNumberDownEventPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 2, 4, 1, 3), TmnxVrrpPriority()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxVrrpLagNumberDownEventPriority.setStatus('current')
if mibBuilder.loadTexts: tmnxVrrpLagNumberDownEventPriority.setDescription("The value of tmnxVrrpLagNumberDownEventPriority specifies the priority level associated with this event. When the number of LAG ports that are operationally down exceeds the threshold defined by tmnxVrrpLagNumberDown, this priority value will either be subtracted from the in-use priority (if the event is a 'delta' event) or the in-use priority will be explicitly overridden by this priority value (if the event is an 'explicit' event).")
tmnxVrrpLagNumberDownEventType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 2, 4, 1, 4), TmnxEventType().clone('delta')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxVrrpLagNumberDownEventType.setStatus('current')
if mibBuilder.loadTexts: tmnxVrrpLagNumberDownEventType.setDescription("The value of tmnxVrrpLagNumberDownEventType specifies whether this event is a 'delta' or an 'explicit' event. When the number of LAG ports that are operationally down exceeds the threshold defined by tmnxVrrpLagNumberDown, the value of tmnxVrrpLagNumberDownEventPriority will be subtracted from the in-use priority in case of a 'delta' event or the in-use priority will be explicitly overridden by the value of tmnxVrrpLagNumberDownEventPriority in case of an 'explicit' event.")
tmnxVrrpHostUnreachableEventTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 2, 5), )
if mibBuilder.loadTexts: tmnxVrrpHostUnreachableEventTable.setStatus('current')
if mibBuilder.loadTexts: tmnxVrrpHostUnreachableEventTable.setDescription('The tmnxVrrpHostUnreachableEventTable contains a list of Host Unreachable Priority Events.')
tmnxVrrpHostUnreachableEventEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 2, 5, 1), ).setIndexNames((0, "TIMETRA-VRRP-MIB", "tmnxVrrpPolicyId"), (0, "TIMETRA-VRRP-MIB", "tmnxVrrpHostUnreachableEventIpAddr"))
if mibBuilder.loadTexts: tmnxVrrpHostUnreachableEventEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxVrrpHostUnreachableEventEntry.setDescription("Each row entry in the tmnxVrrpHostUnreachableEventTable represents an instance of a 'HostUnreachable' Priority Event used to override or adjust the base priority value of a VRRP virtual router instance depending on the operational state of the event. Entries can be created and deleted via SNMP SET operations using tmnxVrrpHostUnreachableEventRowStatus.")
tmnxVrrpHostUnreachableEventIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 2, 5, 1, 1), IpAddress())
if mibBuilder.loadTexts: tmnxVrrpHostUnreachableEventIpAddr.setStatus('current')
if mibBuilder.loadTexts: tmnxVrrpHostUnreachableEventIpAddr.setDescription('This priority control event monitors the ability to receive ICMP Echo Reply packets from a host which is uniquely identified by the index value tmnxVrrpHostUnreachableEventIpAddr.')
tmnxVrrpHostUnreachableEventRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 2, 5, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxVrrpHostUnreachableEventRowStatus.setStatus('current')
if mibBuilder.loadTexts: tmnxVrrpHostUnreachableEventRowStatus.setDescription('tmnxVrrpHostUnreachableEventRowStatus is used for the creation or deletion of entries in the tmnxVrrpHostUnreachableEventTable.')
tmnxVrrpHostUnreachableEventPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 2, 5, 1, 3), TmnxVrrpPriority()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxVrrpHostUnreachableEventPriority.setStatus('current')
if mibBuilder.loadTexts: tmnxVrrpHostUnreachableEventPriority.setDescription("The value of tmnxVrrpHostUnreachableEventPriority specifies the priority level associated with this event. When the operational state of the event transitions to one of the 'set' states, this value will either be subtracted from the in-use priority (if the event is a 'delta' event) or the in-use priority will be explicitly overridden by this priority value (if the event is an 'explicit' event).")
tmnxVrrpHostUnreachableEventType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 2, 5, 1, 4), TmnxEventType().clone('delta')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxVrrpHostUnreachableEventType.setStatus('current')
if mibBuilder.loadTexts: tmnxVrrpHostUnreachableEventType.setDescription("The value of tmnxVrrpHostUnreachableEventType specifies whether this event is a 'delta' or an 'explicit' event. When the event is 'set', the value of tmnxVrrpHostUnreachableEventPriority will be subtracted from the in-use priority in case of a 'delta' event or the in-use priority will be explicitly overridden by the value of tmnxVrrpHostUnreachableEventPriority in case of an 'explicit' event.")
tmnxVrrpHostUnreachableEventHoldSet = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 2, 5, 1, 5), TmnxEventHoldSet()).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxVrrpHostUnreachableEventHoldSet.setStatus('current')
if mibBuilder.loadTexts: tmnxVrrpHostUnreachableEventHoldSet.setDescription('The value of tmnxVrrpHostUnreachableEventHoldSet specifies the configured Hold Set time associated with the event.')
tmnxVrrpHostUnreachableEventInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 2, 5, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 60)).clone(1)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxVrrpHostUnreachableEventInterval.setStatus('current')
if mibBuilder.loadTexts: tmnxVrrpHostUnreachableEventInterval.setDescription('The value of tmnxVrrpHostUnreachableEventInterval specifies the amount of time in seconds between consecutive ICMP Echo Requests sent to the far end host IP address.')
tmnxVrrpHostUnreachableEventTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 2, 5, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 60)).clone(1)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxVrrpHostUnreachableEventTimeout.setStatus('current')
if mibBuilder.loadTexts: tmnxVrrpHostUnreachableEventTimeout.setDescription('The value of tmnxVrrpHostUnreachableEventTimeout specifies the amount of time in seconds that is allowed for receiving an ICMP Echo Reply message from the far end host IP address to which a ICMP Echo Request message was sent out. If a reply is not received within this time the far end host is considered unresponsive.')
tmnxVrrpHostUnreachableEventDropCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 2, 5, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 60)).clone(3)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxVrrpHostUnreachableEventDropCount.setStatus('current')
if mibBuilder.loadTexts: tmnxVrrpHostUnreachableEventDropCount.setDescription("The value of tmnxVrrpHostUnreachableEventDropCount specifies the number of consecutive ICMP Echo Request message send attempts that must fail for the priority event to enter a 'set' state.")
tmnxVrrpHostUnreachableEventOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 2, 5, 1, 9), TmnxHostUnreachableEventOperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxVrrpHostUnreachableEventOperState.setStatus('current')
if mibBuilder.loadTexts: tmnxVrrpHostUnreachableEventOperState.setDescription('The value of tmnxVrrpHostUnreachableEventOperState specifies the current operational state of the event.')
tmnxVrrpHostUnreachableEventHoldSetRemaining = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 2, 5, 1, 10), TmnxEventHoldSet()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxVrrpHostUnreachableEventHoldSetRemaining.setStatus('current')
if mibBuilder.loadTexts: tmnxVrrpHostUnreachableEventHoldSetRemaining.setDescription('The value of tmnxVrrpHostUnreachableEventHoldSetRemaining specifies the current value of the hold-set timer i.e. the amount of time remaining before the event will transition into the cleared state.')
tmnxVrrpHostUnreachableEventPrevState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 2, 5, 1, 11), TmnxHostUnreachableEventOperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxVrrpHostUnreachableEventPrevState.setStatus('current')
if mibBuilder.loadTexts: tmnxVrrpHostUnreachableEventPrevState.setDescription('The value of tmnxVrrpHostUnreachableEventPrevState specifies the previous operational state of the event.')
tmnxVrrpHostUnreachableEventLastTransition = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 2, 5, 1, 12), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxVrrpHostUnreachableEventLastTransition.setStatus('current')
if mibBuilder.loadTexts: tmnxVrrpHostUnreachableEventLastTransition.setDescription('The value of tmnxVrrpHostUnreachableEventLastTransition specifies the sysUpTime when the operational state of the event last changed.')
tmnxVrrpHostUnreachableEventSetCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 2, 5, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxVrrpHostUnreachableEventSetCounter.setStatus('current')
if mibBuilder.loadTexts: tmnxVrrpHostUnreachableEventSetCounter.setDescription("The value of tmnxVrrpHostUnreachableEventSetCounter specifies the number of times the event has transitioned to one of the 'set' states.")
tmnxVrrpHostUnreachableEventInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 2, 5, 1, 14), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxVrrpHostUnreachableEventInUse.setStatus('current')
if mibBuilder.loadTexts: tmnxVrrpHostUnreachableEventInUse.setDescription("If value of tmnxVrrpHostUnreachableEventInUse is 'true', then the event is currently affecting the in-use priority of some virtual router.")
tmnxVrrpHostUnreachableEventHoldClear = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 2, 5, 1, 15), TmnxEventHoldClear()).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxVrrpHostUnreachableEventHoldClear.setStatus('current')
if mibBuilder.loadTexts: tmnxVrrpHostUnreachableEventHoldClear.setDescription('The value of tmnxVrrpHostUnreachableEventHoldClear specifies the configured Hold Clear time associated with the event.')
tmnxVrrpHostUnreachableEventHoldClearRemaining = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 2, 5, 1, 16), TmnxEventHoldClear()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxVrrpHostUnreachableEventHoldClearRemaining.setStatus('current')
if mibBuilder.loadTexts: tmnxVrrpHostUnreachableEventHoldClearRemaining.setDescription('The value of tmnxVrrpHostUnreachableEventHoldClearRemaining specifies the current value of the hold-clear timer i.e. the amount of time remaining before the cleared event will have an effect on the virtual router instance.')
tmnxVrrpRouteUnknownEventTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 2, 6), )
if mibBuilder.loadTexts: tmnxVrrpRouteUnknownEventTable.setStatus('current')
if mibBuilder.loadTexts: tmnxVrrpRouteUnknownEventTable.setDescription('The tmnxVrrpRouteUnknownEventTable contains a list of Route Unknown Priority Events.')
tmnxVrrpRouteUnknownEventEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 2, 6, 1), ).setIndexNames((0, "TIMETRA-VRRP-MIB", "tmnxVrrpPolicyId"), (0, "TIMETRA-VRRP-MIB", "tmnxVrrpRouteUnknownEventPrefix"), (0, "TIMETRA-VRRP-MIB", "tmnxVrrpRouteUnknownEventMaskLen"))
if mibBuilder.loadTexts: tmnxVrrpRouteUnknownEventEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxVrrpRouteUnknownEventEntry.setDescription('Each row entry in the tmnxVrrpRouteUnknownEventTable represents an instance of a Route Unknown Priority Event used to override or adjust the base priority value of a VRRP virtual router instance depending on the operational state of the event. Entries can be created and deleted via SNMP SET operations using tmnxVrrpRouteUnknownEventRowStatus.')
tmnxVrrpRouteUnknownEventPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 2, 6, 1, 1), IpAddress())
if mibBuilder.loadTexts: tmnxVrrpRouteUnknownEventPrefix.setStatus('current')
if mibBuilder.loadTexts: tmnxVrrpRouteUnknownEventPrefix.setDescription('The index value tmnxVrrpRouteUnknownEventPrefix identifies the IP prefix of the route whose existence within the routing table is being monitored by this priority control event.')
tmnxVrrpRouteUnknownEventMaskLen = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 2, 6, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 32)))
if mibBuilder.loadTexts: tmnxVrrpRouteUnknownEventMaskLen.setStatus('current')
if mibBuilder.loadTexts: tmnxVrrpRouteUnknownEventMaskLen.setDescription('The index value tmnxVrrpRouteUnknownEventMaskLen identifies the prefix mask length of the route whose existence within the routing table is being monitored by this priority control event.')
tmnxVrrpRouteUnknownEventRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 2, 6, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxVrrpRouteUnknownEventRowStatus.setStatus('current')
if mibBuilder.loadTexts: tmnxVrrpRouteUnknownEventRowStatus.setDescription('tmnxVrrpRouteUnknownEventRowStatus is used for the creation or deletion of entries in the tmnxVrrpRouteUnknownEventTable.')
tmnxVrrpRouteUnknownEventPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 2, 6, 1, 4), TmnxVrrpPriority()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxVrrpRouteUnknownEventPriority.setStatus('current')
if mibBuilder.loadTexts: tmnxVrrpRouteUnknownEventPriority.setDescription("The value of tmnxVrrpRouteUnknownEventPriority specifies the priority level associated with this event. When the operational state of the event transitions to one of the 'set' states, this value will either be subtracted from the in-use priority (if the event is a 'delta' event) or the in-use priority will be explicitly overridden by this priority value (if the event is an 'explicit' event).")
tmnxVrrpRouteUnknownEventType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 2, 6, 1, 5), TmnxEventType().clone('delta')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxVrrpRouteUnknownEventType.setStatus('current')
if mibBuilder.loadTexts: tmnxVrrpRouteUnknownEventType.setDescription("The value of tmnxVrrpRouteUnknownEventType specifies whether this event is a 'delta' or an 'explicit' event. When the event is 'set', the value of tmnxVrrpRouteUnknownEventPriority will be subtracted from the in-use priority in case of a 'delta' event or the in-use priority will be explicitly overridden by the value of tmnxVrrpRouteUnknownEventPriority in case of an 'explicit' event.")
tmnxVrrpRouteUnknownEventHoldSet = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 2, 6, 1, 6), TmnxEventHoldSet()).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxVrrpRouteUnknownEventHoldSet.setStatus('current')
if mibBuilder.loadTexts: tmnxVrrpRouteUnknownEventHoldSet.setDescription('The value of tmnxVrrpRouteUnknownEventHoldSet specifies the configured Hold Set time associated with the event.')
tmnxVrrpRouteUnknownEventLessSpecific = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 2, 6, 1, 7), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxVrrpRouteUnknownEventLessSpecific.setStatus('current')
if mibBuilder.loadTexts: tmnxVrrpRouteUnknownEventLessSpecific.setDescription("Setting the value of tmnxVrrpRouteUnknownEventLessSpecific to 'true', allows a route with a less specific IP prefix to match the IP prefix associated with the event.")
tmnxVrrpRouteUnknownEventDefaultAllowed = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 2, 6, 1, 8), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxVrrpRouteUnknownEventDefaultAllowed.setStatus('current')
if mibBuilder.loadTexts: tmnxVrrpRouteUnknownEventDefaultAllowed.setDescription("Setting the value of tmnxVrrpRouteUnknownEventDefaultAllowed to 'true', allows the default route to match the IP prefix associated with the event. This value is valid only when tmnxVrrpRouteUnknownEventLessSpecific is 'true'. If tmnxVrrpRouteUnknownEventLessSpecific is 'false' this value is ignored.")
tmnxVrrpRouteUnknownEventProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 2, 6, 1, 9), Bits().clone(namedValues=NamedValues(("bgp", 0), ("ospf", 1), ("isis", 2), ("rip", 3), ("static", 4), ("bgpVpn", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxVrrpRouteUnknownEventProtocol.setStatus('current')
if mibBuilder.loadTexts: tmnxVrrpRouteUnknownEventProtocol.setDescription('The bits of tmnxVrrpRouteUnknownEventProtocol identify the allowed route sources when matching the IP prefix associated with this event with the results of a Route table lookup. If the bit corresponding to a protocol is set then the protocol is considered as a route source match constraint.')
tmnxVrrpRouteUnknownEventOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 2, 6, 1, 10), TmnxRouteUnknownEventOperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxVrrpRouteUnknownEventOperState.setStatus('current')
if mibBuilder.loadTexts: tmnxVrrpRouteUnknownEventOperState.setDescription('The value of tmnxVrrpRouteUnknownEventOperState specifies the current operational state of the event.')
tmnxVrrpRouteUnknownEventHoldSetRemaining = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 2, 6, 1, 11), TmnxEventHoldSet()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxVrrpRouteUnknownEventHoldSetRemaining.setStatus('current')
if mibBuilder.loadTexts: tmnxVrrpRouteUnknownEventHoldSetRemaining.setDescription('The value of tmnxVrrpRouteUnknownEventHoldSetRemaining specifies the current value of the hold-set timer i.e. the amount of time remaining before the event will transition into the cleared state.')
tmnxVrrpRouteUnknownEventPrevState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 2, 6, 1, 12), TmnxRouteUnknownEventOperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxVrrpRouteUnknownEventPrevState.setStatus('current')
if mibBuilder.loadTexts: tmnxVrrpRouteUnknownEventPrevState.setDescription('The value of tmnxVrrpRouteUnknownEventPrevState specifies the previous operational state of the event.')
tmnxVrrpRouteUnknownEventLastTransition = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 2, 6, 1, 13), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxVrrpRouteUnknownEventLastTransition.setStatus('current')
if mibBuilder.loadTexts: tmnxVrrpRouteUnknownEventLastTransition.setDescription('The value of tmnxVrrpRouteUnknownEventLastTransition specifies the sysUpTime when the operational state of the event last changed.')
tmnxVrrpRouteUnknownEventSetCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 2, 6, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxVrrpRouteUnknownEventSetCounter.setStatus('current')
if mibBuilder.loadTexts: tmnxVrrpRouteUnknownEventSetCounter.setDescription("The value of tmnxVrrpRouteUnknownEventSetCounter specifies the number of times the event has transitioned to one of the 'set' states.")
tmnxVrrpRouteUnknownEventInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 2, 6, 1, 15), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxVrrpRouteUnknownEventInUse.setStatus('current')
if mibBuilder.loadTexts: tmnxVrrpRouteUnknownEventInUse.setDescription("If value of tmnxVrrpRouteUnknownEventInUse is 'true', then the event is currently affecting the in-use priority of some virtual router.")
tmnxVrrpRouteUnknownEventHoldClear = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 2, 6, 1, 16), TmnxEventHoldClear()).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxVrrpRouteUnknownEventHoldClear.setStatus('current')
if mibBuilder.loadTexts: tmnxVrrpRouteUnknownEventHoldClear.setDescription('The value of tmnxVrrpRouteUnknownEventHoldClear specifies the configured Hold Clear time associated with the event.')
tmnxVrrpRouteUnknownEventHoldClearRemaining = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 2, 6, 1, 17), TmnxEventHoldClear()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxVrrpRouteUnknownEventHoldClearRemaining.setStatus('current')
if mibBuilder.loadTexts: tmnxVrrpRouteUnknownEventHoldClearRemaining.setDescription('The value of tmnxVrrpRouteUnknownEventHoldClearRemaining specifies the current value of the hold-clear timer i.e. the amount of time amount of time remaining before the cleared event will have an effect on the virtual router instance.')
tmnxVrrpRouteUnknownEventNextHopTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 2, 7), )
if mibBuilder.loadTexts: tmnxVrrpRouteUnknownEventNextHopTable.setStatus('current')
if mibBuilder.loadTexts: tmnxVrrpRouteUnknownEventNextHopTable.setDescription('The tmnxVrrpRouteUnknownEventNextHopTable contains a list of next-hop IP addresses associated with each Route Unknown Priority Events defined in tmnxVrrpRouteUnknownEventTable.')
tmnxVrrpRouteUnknownEventNextHopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 2, 7, 1), ).setIndexNames((0, "TIMETRA-VRRP-MIB", "tmnxVrrpPolicyId"), (0, "TIMETRA-VRRP-MIB", "tmnxVrrpRouteUnknownEventPrefix"), (0, "TIMETRA-VRRP-MIB", "tmnxVrrpRouteUnknownEventMaskLen"), (0, "TIMETRA-VRRP-MIB", "tmnxVrrpRouteUnknownEventNextHop"))
if mibBuilder.loadTexts: tmnxVrrpRouteUnknownEventNextHopEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxVrrpRouteUnknownEventNextHopEntry.setDescription('Each row entry in the tmnxVrrpRouteUnknownEventNextHopTable represents an instance of a next-hop IP address which is defined as a match criterion for the Route Unknown Priority Event associated with this entry. Entries can be created and deleted via SNMP SET operations using tmnxVrrpRouteUnknownEventNextHopRowStatus.')
tmnxVrrpRouteUnknownEventNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 2, 7, 1, 1), IpAddress())
if mibBuilder.loadTexts: tmnxVrrpRouteUnknownEventNextHop.setStatus('current')
if mibBuilder.loadTexts: tmnxVrrpRouteUnknownEventNextHop.setDescription('The index value tmnxVrrpRouteUnknownEventNextHop identifies the next-hop IP address which is used to match the route prefix being monitored by this priority control event with the results of a route table lookup.')
tmnxVrrpRouteUnknownEventNextHopRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 2, 7, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxVrrpRouteUnknownEventNextHopRowStatus.setStatus('current')
if mibBuilder.loadTexts: tmnxVrrpRouteUnknownEventNextHopRowStatus.setDescription('tmnxVrrpRouteUnknownEventNextHopRowStatus is used for the creation or deletion of entries in the tmnxVrrpRouteUnknownEventNextHopTable.')
tVrrpOpTblLastChgd = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 1, 6), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tVrrpOpTblLastChgd.setStatus('current')
if mibBuilder.loadTexts: tVrrpOpTblLastChgd.setDescription('Timestamp of the last change to the vrrpOperationsTable either from adding a row or removing a row.')
tVrrpOpTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 1, 7), )
if mibBuilder.loadTexts: tVrrpOpTable.setStatus('current')
if mibBuilder.loadTexts: tVrrpOpTable.setDescription('The tVrrpOpTable provides an extension of the vrrpOperationsTable in the TIMETRA-VRRP-V3-MIB. Use of AUGMENTS clause implies a one-to-one dependent relationship between the base table, vrrpOperationsTable, and the augmenting table, tVrrpOpTable. This in effect extends the vrrpOperationsTable with additional columns. Creation (or deletion) of a row in the vrrpOperationsTable results in the same fate for the row in the tVrrpOpTable.')
tVrrpOpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 1, 7, 1), )
vrrpOperationsEntry.registerAugmentions(("TIMETRA-VRRP-MIB", "tVrrpOpEntry"))
tVrrpOpEntry.setIndexNames(*vrrpOperationsEntry.getIndexNames())
if mibBuilder.loadTexts: tVrrpOpEntry.setStatus('current')
if mibBuilder.loadTexts: tVrrpOpEntry.setDescription('Each row entry in the tVrrpOpTable represents additional columns in the vrrpOperationsTable for attributes specific to the Alcatel-Lucent SROS series VRRP implementation.')
tVrrpOpState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tVrrpOpState.setStatus('current')
if mibBuilder.loadTexts: tVrrpOpState.setDescription('The value of tVrrpOpState indicates the operational state of the VRRP virtual router instance.')
tVrrpOpVirtualMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 1, 7, 1, 2), MacAddress().clone(hexValue="000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tVrrpOpVirtualMacAddr.setStatus('current')
if mibBuilder.loadTexts: tVrrpOpVirtualMacAddr.setDescription('The value of tVrrpOpVirtualMacAddr specifies the virtual MAC address used in ARP (IPv4) or ND (IPv6) responses when the VRRP virtual router instance is operating as a master.')
tVrrpOpPingReply = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 1, 7, 1, 3), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tVrrpOpPingReply.setStatus('current')
if mibBuilder.loadTexts: tVrrpOpPingReply.setDescription("The tVrrpOpPingReply is valid only if the VRRP virtual router instance associated with this entry is a non-owner. By setting tVrrpOpPingReply to 'true', a non-owner master is enabled to reply to ICMP Echo requests directed to the virtual router instance IP addresses. A non-owner backup virtual router never responds to such ICMP echo requests irrespective of the value of tVrrpOpPingReply.")
tVrrpOpTelnetReply = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 1, 7, 1, 4), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tVrrpOpTelnetReply.setStatus('current')
if mibBuilder.loadTexts: tVrrpOpTelnetReply.setDescription("The tVrrpOpTelnetReply is valid only if the VRRP virtual router instance associated with this entry is a non-owner. By setting tVrrpOpTelnetReply to 'true', a non-owner master is enabled to reply to TCP Port 23 Telnet Requests directed to the virtual router instance IP addresses. A non-owner backup virtual router never responds to such Telnet requests irrespective of the value of tVrrpOpTelnetReply.")
tVrrpOpPolicyId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 1, 7, 1, 5), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tVrrpOpPolicyId.setStatus('current')
if mibBuilder.loadTexts: tVrrpOpPolicyId.setDescription('The tVrrpOpPolicyId specifies the VRRP Priority Control policy associated with the VRRP virtual router instance. This policy must be a valid policy in the tmnxVrrpPolicyTable. A value of 0 indicates that no Priority Control policy is associated with the virtual router instance.')
tVrrpOpInUsePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 1, 7, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tVrrpOpInUsePriority.setStatus('current')
if mibBuilder.loadTexts: tVrrpOpInUsePriority.setDescription('The tVrrpOpInUsePriority indicates the current in-use priority associated with the VRRP virtual router instance.')
tVrrpOpMasterSince = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 1, 7, 1, 7), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tVrrpOpMasterSince.setStatus('current')
if mibBuilder.loadTexts: tVrrpOpMasterSince.setDescription('The tVrrpOpMasterSince, in case of a virtual router which is the current master, indicates the sysUpTime when operational state (vrrpOperState) of the virtual router changed to master(3). In case of a backup virtual router, this value specifies the sysUpTime when it received the first VRRP advertisement message from the virtual router which is the current master.')
tVrrpOpMasterPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 1, 7, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tVrrpOpMasterPriority.setStatus('current')
if mibBuilder.loadTexts: tVrrpOpMasterPriority.setDescription('The value of tVrrpOpMasterPriority indicates the priority of the virtual router instance which is the current master')
tVrrpOpOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 1, 7, 1, 9), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tVrrpOpOwner.setStatus('current')
if mibBuilder.loadTexts: tVrrpOpOwner.setDescription("The value of tVrrpOpOwner specifies whether or not the virtual router instance has been configured as an owner. If 'true', then the virtual router instance is an 'owner', if 'false' then the instance is a 'non-owner'.")
tVrrpOpMasterDownInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 1, 7, 1, 10), TimeInterval()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: tVrrpOpMasterDownInterval.setReference('www.ietf.org/internet-drafts/draft-ietf-vrrp-spec-v2-06.txt')
if mibBuilder.loadTexts: tVrrpOpMasterDownInterval.setStatus('current')
if mibBuilder.loadTexts: tVrrpOpMasterDownInterval.setDescription('The value of tVrrpOpMasterDownInterval indicates the time interval in milliseconds for the backup router to declare the master as down. It is calculated as (3 * Advertisement_Interval) + Skew_time where Skew_Time is calculated as ((256 - Priority) * Master_Adver_Interval) / 256 ')
tVrrpOpMasterDownTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 1, 7, 1, 11), TimeInterval()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: tVrrpOpMasterDownTimer.setReference('www.ietf.org/internet-drafts/draft-ietf-vrrp-spec-v2-06.txt')
if mibBuilder.loadTexts: tVrrpOpMasterDownTimer.setStatus('current')
if mibBuilder.loadTexts: tVrrpOpMasterDownTimer.setDescription('The value of tVrrpOpMasterDownTimer indicates the current value of the Master Down Timer in milliseconds. When a backup router receives a VRRP advertisement from a master, it resets this timer to the value of the Master Down Interval and begins to count down. If the backup router does not receive an advertisement till this timer times out, it will assume that the master is down and will declare itself to be the master.')
tVrrpOpAdvIntervalInherit = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 1, 7, 1, 12), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tVrrpOpAdvIntervalInherit.setStatus('current')
if mibBuilder.loadTexts: tVrrpOpAdvIntervalInherit.setDescription("The tVrrpOpAdvIntervalInherit object is valid only if the VRRP virtual router instance associated with this entry is a non-owner. When the VRRP instance is operating as a backup and the value of tVrrpOpAdvIntervalInherit is set to 'true', the master down timer is indirectly derived from the value in the advertisement interval field of the VRRP message received from the current master. When the VRRP instance is operating as a backup and the value of tVrrpOpAdvIntervalInherit is set to 'false', the configured advertisement interval (vrrpOperationsAdvInterval) is matched against the value in the advertisement interval field of the VRRP message received from the current master. If the two values do not match then the VRRP advertisement is discarded When the VRRP instance is operating as a master, the value of tVrrpOpAdvIntervalInherit has no effect.")
tVrrpOpInUseAdvInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 1, 7, 1, 13), TimeInterval().subtype(subtypeSpec=ValueRangeConstraint(1, 4096))).setUnits('centiseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: tVrrpOpInUseAdvInterval.setStatus('current')
if mibBuilder.loadTexts: tVrrpOpInUseAdvInterval.setDescription("The tVrrpOpInUseAdvInterval indicates the operational value for the advertisement interval. When the VRRP instance is operating as a master, the value of tVrrpOpInUseAdvInterval is equivalent to the value of vrrpOperationsAdvInterval. When the VRRP instance is operating as a backup and the value of tVrrpOpAdvIntervalInherit is set to 'true', the value of tVrrpOpInUseAdvInterval equals the value in the advertisement interval field of the VRRP Advertisement message received from the current master. When the VRRP instance is operating as a backup and the value of tVrrpOpAdvIntervalInherit is set to 'false', the value of tVrrpOpInUseAdvInterval is equivalent to the value of vrrpOperationsAdvInterval. Only the master router sends VRRP advertisements.")
tVrrpOpTracerouteReply = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 1, 7, 1, 14), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tVrrpOpTracerouteReply.setStatus('current')
if mibBuilder.loadTexts: tVrrpOpTracerouteReply.setDescription("The tVrrpOpTracerouteReply is valid only if the VRRP virtual router instance associated with this entry is a non-owner. By setting tVrrpOpTracerouteReply to 'true', a non-owner master is enabled to reply to traceroute requests directed to the virtual router instance IP addresses. A non-owner backup virtual router never responds to such traceroute requests irrespective of the value of tVrrpOpTracerouteReply.")
tVrrpOpStandbyFwding = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 1, 7, 1, 15), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tVrrpOpStandbyFwding.setStatus('current')
if mibBuilder.loadTexts: tVrrpOpStandbyFwding.setDescription("The value of tVrrpOpStandbyFwding specifies whether this vrrp instance allows forwarding packets to standy router. The value 'false' specifies that a standby router should not forward traffic sent to virtual router's MAC address. However, the standby router should forward traffic sent to the standby routers real MAC address. The value 'true' specifies that a standby router should forward all traffic.")
tVrrpOpInitDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 1, 7, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tVrrpOpInitDelay.setStatus('current')
if mibBuilder.loadTexts: tVrrpOpInitDelay.setDescription('The value of tVrrpOpInitDelay specifies the initialization delay timer for VRRP, in seconds.')
tVrrpOpInitTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 1, 7, 1, 17), TimeInterval()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: tVrrpOpInitTimer.setStatus('current')
if mibBuilder.loadTexts: tVrrpOpInitTimer.setDescription('The value of tVrrpOpInitTimer indicates the current value of initialization delay timer for VRRP, in milli-seconds.')
tVrrpOpLastChgd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 1, 7, 1, 18), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tVrrpOpLastChgd.setStatus('current')
if mibBuilder.loadTexts: tVrrpOpLastChgd.setDescription('The value of tVrrpOpLastChgd indicates the time stamp of the last change to this row of this table.')
tVrrpOpOperDownReason = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 1, 7, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 0), ("notActive", 1), ("adminDown", 2), ("ifDown", 3), ("noLnkLclAddrCfg", 4), ("rtrAdvNoProperCfg", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tVrrpOpOperDownReason.setStatus('current')
if mibBuilder.loadTexts: tVrrpOpOperDownReason.setDescription("The value of tVrrpOpOperDownReason indicates the reason for the operational state to be 'down'.")
tVrrpRtrStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 1, 8), )
if mibBuilder.loadTexts: tVrrpRtrStatisticsTable.setStatus('current')
if mibBuilder.loadTexts: tVrrpRtrStatisticsTable.setDescription('The tVrrpRtrStatisticsTable provides an extension of the vrrpRouterStatisticsTable in the TIMETRA-VRRP-V3-MIB. Use of AUGMENTS clause implies a one-to-one dependent relationship between the base table, vrrpRouterStatisticsTable, and the augmenting table, tVrrpRtrStatisticsTable. This in effect extends the vrrpRouterStatisticsTable with additional columns.')
tVrrpRtrStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 1, 8, 1), )
vrrpRouterStatisticsEntry.registerAugmentions(("TIMETRA-VRRP-MIB", "tVrrpRtrStatisticsEntry"))
tVrrpRtrStatisticsEntry.setIndexNames(*vrrpRouterStatisticsEntry.getIndexNames())
if mibBuilder.loadTexts: tVrrpRtrStatisticsEntry.setStatus('current')
if mibBuilder.loadTexts: tVrrpRtrStatisticsEntry.setDescription('Each row entry in the tVrrpRtrStatisticsTable represents additional columns in the vrrpRouterStatisticsTable for statistics specific to the Alcatel-Lucent SROS series VRRP implementation.')
tVrrpStatAdvertiseSent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 1, 8, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tVrrpStatAdvertiseSent.setStatus('current')
if mibBuilder.loadTexts: tVrrpStatAdvertiseSent.setDescription('The value of tVrrpStatAdvertiseSent indicates the total number of VRRP advertisements sent by this virtual router.')
tVrrpStatPreemptEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 1, 8, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tVrrpStatPreemptEvents.setStatus('current')
if mibBuilder.loadTexts: tVrrpStatPreemptEvents.setDescription('The value for tVrrpStatPreemptEvents indicates the total number of times the virtual router has preempted another non-owner master with lower priority.')
tVrrpStatPreemptedEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 1, 8, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tVrrpStatPreemptedEvents.setStatus('current')
if mibBuilder.loadTexts: tVrrpStatPreemptedEvents.setDescription('The value for tVrrpStatPreemptedEvents indicates the total number of times the virtual router has been preempted by another non-owner master with higher priority.')
tVrrpStatMasterChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 1, 8, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tVrrpStatMasterChanges.setStatus('current')
if mibBuilder.loadTexts: tVrrpStatMasterChanges.setDescription('The value for tVrrpStatMasterChanges indicates the total number of times the virtual router has seen the master virtual router change.')
tVrrpStatAdvIntvlDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 1, 8, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tVrrpStatAdvIntvlDiscards.setStatus('current')
if mibBuilder.loadTexts: tVrrpStatAdvIntvlDiscards.setDescription('The value of tVrrpStatAdvIntvlDiscards indicates the total number of VRRP advertisement packets discarded because the advertisement interval in the received packet was different than the one configured for the local virtual router.')
tVrrpStatTotalDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 1, 8, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tVrrpStatTotalDiscards.setStatus('current')
if mibBuilder.loadTexts: tVrrpStatTotalDiscards.setDescription('The value of tVrrpStatTotalDiscards indicates the total number of VRRP advertisement packets discarded for any reason. This includes the packets discarded due to advertise interval mismatch and address list mismatch.')
tVrrpRtrMasterTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 1, 9), )
if mibBuilder.loadTexts: tVrrpRtrMasterTable.setStatus('current')
if mibBuilder.loadTexts: tVrrpRtrMasterTable.setDescription('The tVrrpRtrMasterTable is a read-only table which provides a list of the master primary addresses that have been seen by the VRRP virtual router instance. Only the most recent 32 masters are listed by this table.')
tVrrpRtrMasterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 1, 9, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "TIMETRA-VRRP-V3-MIB", "vrrpOperationsVrId"), (0, "TIMETRA-VRRP-MIB", "tVrrpRtrMasterInetAddrType"), (0, "TIMETRA-VRRP-MIB", "tVrrpRtrMasterPrimaryAddr"))
if mibBuilder.loadTexts: tVrrpRtrMasterEntry.setStatus('current')
if mibBuilder.loadTexts: tVrrpRtrMasterEntry.setDescription('Each row entry in the tVrrpRtrMasterTable represents the primary address of a VRRP virtual router instance that has become the master as seen by the virtual router instance identified by ifIndex and vrrpOperVrId.')
tVrrpRtrMasterInetAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 1, 9, 1, 1), InetAddressType())
if mibBuilder.loadTexts: tVrrpRtrMasterInetAddrType.setStatus('current')
if mibBuilder.loadTexts: tVrrpRtrMasterInetAddrType.setDescription('The IP address type of tVrrpRtrMasterPrimaryAddr.')
tVrrpRtrMasterPrimaryAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 1, 9, 1, 2), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: tVrrpRtrMasterPrimaryAddr.setStatus('current')
if mibBuilder.loadTexts: tVrrpRtrMasterPrimaryAddr.setDescription('The value of tVrrpRtrMasterPrimaryAddr identifies the primary address of the virtual router that became a master as seen by the virtual router instance identified by ifIndex and vrrpOperVrId.')
tVrrpRtrMasterLastSeen = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 1, 9, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tVrrpRtrMasterLastSeen.setStatus('current')
if mibBuilder.loadTexts: tVrrpRtrMasterLastSeen.setDescription('The value for tVrrpRtrMasterLastSeen indicates the sysUpTime when the master was last seen by this virtual router instance. In other words it is the timestamp of the last advertisement message that was received from that master.')
tVrrpRtrMasterMessageCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 1, 9, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tVrrpRtrMasterMessageCount.setStatus('current')
if mibBuilder.loadTexts: tVrrpRtrMasterMessageCount.setDescription('The value for tVrrpRtrMasterMessageCount indicates the total number of VRRP advertisement messages that have been received from the master.')
tVrrpRtrMasterAuthSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 1, 9, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tVrrpRtrMasterAuthSequence.setStatus('current')
if mibBuilder.loadTexts: tVrrpRtrMasterAuthSequence.setDescription('The value for tVrrpRtrMasterAuthSequence indicates the last sequence number seen in the IP Authentication header of the advertisement messages received from the master. A negative value implies that the master was not being authenticated via IP authentication header.')
tVrrpRtrMasterIPListMatch = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 1, 9, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tVrrpRtrMasterIPListMatch.setStatus('current')
if mibBuilder.loadTexts: tVrrpRtrMasterIPListMatch.setDescription('The value for tVrrpRtrMasterIPListMatch indicates whether or not the IP address list in the advertisement messages received from the master matched the configured virtual router IP address list.')
tVrrpHstUnrchEvtTblLastChgd = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 2, 8), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tVrrpHstUnrchEvtTblLastChgd.setStatus('current')
if mibBuilder.loadTexts: tVrrpHstUnrchEvtTblLastChgd.setDescription('Timestamp of the last change to the tVrrpHstUnrchEvtTable either from adding a row or removing a row.')
tVrrpHstUnrchEvtTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 2, 9), )
if mibBuilder.loadTexts: tVrrpHstUnrchEvtTable.setStatus('current')
if mibBuilder.loadTexts: tVrrpHstUnrchEvtTable.setDescription('The tVrrpHstUnrchEvtTable contains a list of Host Unreachable Priority Events.')
tVrrpHstUnrchEvtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 2, 9, 1), ).setIndexNames((0, "TIMETRA-VRRP-MIB", "tmnxVrrpPolicyId"), (0, "TIMETRA-VRRP-MIB", "tVrrpHstUnrchEvtAddrType"), (0, "TIMETRA-VRRP-MIB", "tVrrpHstUnrchEvtIpAddr"), (0, "TIMETRA-VRRP-MIB", "tVrrpHstUnrchEvtIfName"))
if mibBuilder.loadTexts: tVrrpHstUnrchEvtEntry.setStatus('current')
if mibBuilder.loadTexts: tVrrpHstUnrchEvtEntry.setDescription("Each row entry in the tVrrpHstUnrchEvtTable represents an instance of a 'HostUnreachable' Priority Event used to override or adjust the base priority value of a VRRP virtual router instance depending on the operational state of the event. Entries can be created and deleted via SNMP SET operations using tVrrpHstUnrchEvtRowStatus.")
tVrrpHstUnrchEvtAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 2, 9, 1, 1), InetAddressType())
if mibBuilder.loadTexts: tVrrpHstUnrchEvtAddrType.setStatus('current')
if mibBuilder.loadTexts: tVrrpHstUnrchEvtAddrType.setDescription('The IP address type of tVrrpHstUnrchEvtIpAddr.')
tVrrpHstUnrchEvtIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 2, 9, 1, 2), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), ValueSizeConstraint(20, 20), )))
if mibBuilder.loadTexts: tVrrpHstUnrchEvtIpAddr.setStatus('current')
if mibBuilder.loadTexts: tVrrpHstUnrchEvtIpAddr.setDescription('This priority control event monitors the ability to receive ICMP Echo Reply packets from a host which is uniquely identified by the index value tVrrpHstUnrchEvtIpAddr.')
tVrrpHstUnrchEvtIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 2, 9, 1, 3), TNamedItemOrEmpty())
if mibBuilder.loadTexts: tVrrpHstUnrchEvtIfName.setStatus('current')
if mibBuilder.loadTexts: tVrrpHstUnrchEvtIfName.setDescription('The value of tVrrpHstUnrchEvtIfName specifies the interface name when a link-local address is specified for tVrrpHstUnrchEvtIpAddr. This object is set to empty when tVrrpHstUnrchEvtIpAddr is not a link-local address.')
tVrrpHstUnrchEvtRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 2, 9, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tVrrpHstUnrchEvtRowStatus.setStatus('current')
if mibBuilder.loadTexts: tVrrpHstUnrchEvtRowStatus.setDescription('tVrrpHstUnrchEvtRowStatus is used for the creation or deletion of entries in the tVrrpHstUnrchEvtTable.')
tVrrpHstUnrchEvtPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 2, 9, 1, 5), TmnxVrrpPriority()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tVrrpHstUnrchEvtPriority.setStatus('current')
if mibBuilder.loadTexts: tVrrpHstUnrchEvtPriority.setDescription("The value of tVrrpHstUnrchEvtPriority specifies the priority level associated with this event. When the operational state of the event transitions to one of the 'set' states, this value will either be subtracted from the in-use priority (if the event is a 'delta' event) or the in-use priority will be explicitly overridden by this priority value (if the event is an 'explicit' event).")
tVrrpHstUnrchEvtType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 2, 9, 1, 6), TmnxEventType().clone('delta')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tVrrpHstUnrchEvtType.setStatus('current')
if mibBuilder.loadTexts: tVrrpHstUnrchEvtType.setDescription("The value of tVrrpHstUnrchEvtType specifies whether this event is a 'delta' or an 'explicit' event. When the event is 'set', the value of tVrrpHstUnrchEvtPriority will be subtracted from the in-use priority in case of a 'delta' event or the in-use priority will be explicitly overridden by the value of tVrrpHstUnrchEvtPriority in case of an 'explicit' event.")
tVrrpHstUnrchEvtHoldSet = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 2, 9, 1, 7), TmnxEventHoldSet()).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tVrrpHstUnrchEvtHoldSet.setStatus('current')
if mibBuilder.loadTexts: tVrrpHstUnrchEvtHoldSet.setDescription('The value of tVrrpHstUnrchEvtHoldSet specifies the configured Hold Set time associated with the event.')
tVrrpHstUnrchEvtInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 2, 9, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 60)).clone(1)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tVrrpHstUnrchEvtInterval.setStatus('current')
if mibBuilder.loadTexts: tVrrpHstUnrchEvtInterval.setDescription('The value of tVrrpHstUnrchEvtInterval specifies the amount of time in seconds between consecutive ICMP Echo Requests sent to the far end host IP address.')
tVrrpHstUnrchEvtTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 2, 9, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 60)).clone(1)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tVrrpHstUnrchEvtTimeout.setStatus('current')
if mibBuilder.loadTexts: tVrrpHstUnrchEvtTimeout.setDescription('The value of tVrrpHstUnrchEvtTimeout specifies the amount of time in seconds that is allowed for receiving an ICMP Echo Reply message from the far end host IP address to which a ICMP Echo Request message was sent out. If a reply is not received within this time the far end host is considered unresponsive.')
tVrrpHstUnrchEvtDropCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 2, 9, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 60)).clone(3)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tVrrpHstUnrchEvtDropCount.setStatus('current')
if mibBuilder.loadTexts: tVrrpHstUnrchEvtDropCount.setDescription("The value of tVrrpHstUnrchEvtDropCount specifies the number of consecutive ICMP Echo Request message send attempts that must fail for the priority event to enter a 'set' state.")
tVrrpHstUnrchEvtOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 2, 9, 1, 11), TmnxHostUnreachableEventOperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tVrrpHstUnrchEvtOperState.setStatus('current')
if mibBuilder.loadTexts: tVrrpHstUnrchEvtOperState.setDescription('The value of tVrrpHstUnrchEvtOperState indicates the current operational state of the event.')
tVrrpHstUnrchEvtHoldSetRemaining = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 2, 9, 1, 12), TmnxEventHoldSet()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: tVrrpHstUnrchEvtHoldSetRemaining.setStatus('current')
if mibBuilder.loadTexts: tVrrpHstUnrchEvtHoldSetRemaining.setDescription('The value of tVrrpHstUnrchEvtHoldSetRemaining indicates the current value of the hold-set timer i.e. the amount of time remaining before the event will transition into the cleared state.')
tVrrpHstUnrchEvtPrevState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 2, 9, 1, 13), TmnxHostUnreachableEventOperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tVrrpHstUnrchEvtPrevState.setStatus('current')
if mibBuilder.loadTexts: tVrrpHstUnrchEvtPrevState.setDescription('The value of tVrrpHstUnrchEvtPrevState indicates the previous operational state of the event.')
tVrrpHstUnrchEvtLastTransition = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 2, 9, 1, 14), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tVrrpHstUnrchEvtLastTransition.setStatus('current')
if mibBuilder.loadTexts: tVrrpHstUnrchEvtLastTransition.setDescription('The value of tVrrpHstUnrchEvtLastTransition indicates the sysUpTime when the operational state of the event last changed.')
tVrrpHstUnrchEvtSetCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 2, 9, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tVrrpHstUnrchEvtSetCounter.setStatus('current')
if mibBuilder.loadTexts: tVrrpHstUnrchEvtSetCounter.setDescription("The value of tVrrpHstUnrchEvtSetCounter indicates the number of times the event has transitioned to one of the 'set' states.")
tVrrpHstUnrchEvtInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 2, 9, 1, 16), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tVrrpHstUnrchEvtInUse.setStatus('current')
if mibBuilder.loadTexts: tVrrpHstUnrchEvtInUse.setDescription("The value of tVrrpHstUnrchEvtInUse when set to 'true' indicates that the event is currently affecting the in-use priority of some virtual router.")
tVrrpHstUnrchEvtHoldClear = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 2, 9, 1, 17), TmnxEventHoldClear()).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tVrrpHstUnrchEvtHoldClear.setStatus('current')
if mibBuilder.loadTexts: tVrrpHstUnrchEvtHoldClear.setDescription('The value of tVrrpHstUnrchEvtHoldClear specifies the configured Hold Clear time associated with the event.')
tVrrpHstUnrchEvtHldClrRemain = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 2, 9, 1, 18), TmnxEventHoldClear()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: tVrrpHstUnrchEvtHldClrRemain.setStatus('current')
if mibBuilder.loadTexts: tVrrpHstUnrchEvtHldClrRemain.setDescription('The value of tVrrpHstUnrchEvtHldClrRemain indicates the current value of the hold-clear timer i.e. the amount of time remaining before the cleared event will have an effect on the virtual router instance.')
tVrrpHstUnrchEvtLastChgd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 2, 9, 1, 19), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tVrrpHstUnrchEvtLastChgd.setStatus('current')
if mibBuilder.loadTexts: tVrrpHstUnrchEvtLastChgd.setDescription('The value of tVrrpHstUnrchEvtLastChgd indicates the time stamp of the last change to this row of this table.')
tVrrpRtUnknEvtTblLastChgd = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 2, 10), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tVrrpRtUnknEvtTblLastChgd.setStatus('current')
if mibBuilder.loadTexts: tVrrpRtUnknEvtTblLastChgd.setDescription('Timestamp of the last change to the tVrrpRtUnknEvtTable either from adding a row or removing a row.')
tVrrpRtUnknEvtTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 2, 11), )
if mibBuilder.loadTexts: tVrrpRtUnknEvtTable.setStatus('current')
if mibBuilder.loadTexts: tVrrpRtUnknEvtTable.setDescription('The tVrrpRtUnknEvtTable contains a list of Route Unknown Priority Events.')
tVrrpRtUnknEvtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 2, 11, 1), ).setIndexNames((0, "TIMETRA-VRRP-MIB", "tmnxVrrpPolicyId"), (0, "TIMETRA-VRRP-MIB", "tVrrpRtUnknEvtPrefixType"), (0, "TIMETRA-VRRP-MIB", "tVrrpRtUnknEvtPrefix"), (0, "TIMETRA-VRRP-MIB", "tVrrpRtUnknEvtMaskLen"))
if mibBuilder.loadTexts: tVrrpRtUnknEvtEntry.setStatus('current')
if mibBuilder.loadTexts: tVrrpRtUnknEvtEntry.setDescription('Each row entry in the tVrrpRtUnknEvtTable represents an instance of a Route Unknown Priority Event used to override or adjust the base priority value of a VRRP virtual router instance depending on the operational state of the event. Entries can be created and deleted via SNMP SET operations using tVrrpRtUnknEvtRowStatus.')
tVrrpRtUnknEvtPrefixType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 2, 11, 1, 1), InetAddressType())
if mibBuilder.loadTexts: tVrrpRtUnknEvtPrefixType.setStatus('current')
if mibBuilder.loadTexts: tVrrpRtUnknEvtPrefixType.setDescription('The IP address type of tVrrpRtUnknEvtPrefix.')
tVrrpRtUnknEvtPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 2, 11, 1, 2), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: tVrrpRtUnknEvtPrefix.setStatus('current')
if mibBuilder.loadTexts: tVrrpRtUnknEvtPrefix.setDescription('The index value tVrrpRtUnknEvtPrefix identifies the IP prefix of the route whose existence within the routing table is being monitored by this priority control event.')
tVrrpRtUnknEvtMaskLen = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 2, 11, 1, 3), InetAddressPrefixLength())
if mibBuilder.loadTexts: tVrrpRtUnknEvtMaskLen.setStatus('current')
if mibBuilder.loadTexts: tVrrpRtUnknEvtMaskLen.setDescription('The index value tVrrpRtUnknEvtMaskLen identifies the prefix mask length of the route whose existence within the routing table is being monitored by this priority control event.')
tVrrpRtUnknEvtRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 2, 11, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tVrrpRtUnknEvtRowStatus.setStatus('current')
if mibBuilder.loadTexts: tVrrpRtUnknEvtRowStatus.setDescription('tVrrpRtUnknEvtRowStatus is used for the creation or deletion of entries in the tVrrpRtUnknEvtTable.')
tVrrpRtUnknEvtPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 2, 11, 1, 5), TmnxVrrpPriority()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tVrrpRtUnknEvtPriority.setStatus('current')
if mibBuilder.loadTexts: tVrrpRtUnknEvtPriority.setDescription("The value of tVrrpRtUnknEvtPriority specifies the priority level associated with this event. When the operational state of the event transitions to one of the 'set' states, this value will either be subtracted from the in-use priority (if the event is a 'delta' event) or the in-use priority will be explicitly overridden by this priority value (if the event is an 'explicit' event).")
tVrrpRtUnknEvtType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 2, 11, 1, 6), TmnxEventType().clone('delta')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tVrrpRtUnknEvtType.setStatus('current')
if mibBuilder.loadTexts: tVrrpRtUnknEvtType.setDescription("The value of tVrrpRtUnknEvtType specifies whether this event is a 'delta' or an 'explicit' event. When the event is 'set', the value of tVrrpRtUnknEvtPriority will be subtracted from the in-use priority in case of a 'delta' event or the in-use priority will be explicitly overridden by the value of tVrrpRtUnknEvtPriority in case of an 'explicit' event.")
tVrrpRtUnknEvtHoldSet = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 2, 11, 1, 7), TmnxEventHoldSet()).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tVrrpRtUnknEvtHoldSet.setStatus('current')
if mibBuilder.loadTexts: tVrrpRtUnknEvtHoldSet.setDescription('The value of tVrrpRtUnknEvtHoldSet specifies the configured Hold Set time associated with the event.')
tVrrpRtUnknEvtLessSpecific = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 2, 11, 1, 8), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tVrrpRtUnknEvtLessSpecific.setStatus('current')
if mibBuilder.loadTexts: tVrrpRtUnknEvtLessSpecific.setDescription("Setting the value of tVrrpRtUnknEvtLessSpecific to 'true', allows a route with a less specific IP prefix to match the IP prefix associated with the event.")
tVrrpRtUnknEvtDefaultAllowed = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 2, 11, 1, 9), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tVrrpRtUnknEvtDefaultAllowed.setStatus('current')
if mibBuilder.loadTexts: tVrrpRtUnknEvtDefaultAllowed.setDescription("Setting the value of tVrrpRtUnknEvtDefaultAllowed to 'true', allows the default route to match the IP prefix associated with the event. This value is valid only when tVrrpRtUnknEvtLessSpecific is 'true'. If tVrrpRtUnknEvtLessSpecific is 'false' this value is ignored.")
tVrrpRtUnknEvtProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 2, 11, 1, 10), Bits().clone(namedValues=NamedValues(("bgp", 0), ("ospf", 1), ("isis", 2), ("rip", 3), ("static", 4), ("bgpVpn", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tVrrpRtUnknEvtProtocol.setStatus('current')
if mibBuilder.loadTexts: tVrrpRtUnknEvtProtocol.setDescription('The bits of tVrrpRtUnknEvtProtocol specify the allowed route sources when matching the IP prefix associated with this event with the results of a Route table lookup. If the bit corresponding to a protocol is set then the protocol is considered as a route source match constraint.')
tVrrpRtUnknEvtOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 2, 11, 1, 11), TmnxRouteUnknownEventOperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tVrrpRtUnknEvtOperState.setStatus('current')
if mibBuilder.loadTexts: tVrrpRtUnknEvtOperState.setDescription('The value of tVrrpRtUnknEvtOperState indicates the current operational state of the event.')
tVrrpRtUnknEvtHoldSetRemaining = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 2, 11, 1, 12), TmnxEventHoldSet()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: tVrrpRtUnknEvtHoldSetRemaining.setStatus('current')
if mibBuilder.loadTexts: tVrrpRtUnknEvtHoldSetRemaining.setDescription('The value of tVrrpRtUnknEvtHoldSetRemaining indicates the current value of the hold-set timer i.e. the amount of time remaining before the event will transition into the cleared state.')
tVrrpRtUnknEvtPrevState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 2, 11, 1, 13), TmnxRouteUnknownEventOperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tVrrpRtUnknEvtPrevState.setStatus('current')
if mibBuilder.loadTexts: tVrrpRtUnknEvtPrevState.setDescription('The value of tVrrpRtUnknEvtPrevState indicates the previous operational state of the event.')
tVrrpRtUnknEvtLastTransition = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 2, 11, 1, 14), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tVrrpRtUnknEvtLastTransition.setStatus('current')
if mibBuilder.loadTexts: tVrrpRtUnknEvtLastTransition.setDescription('The value of tVrrpRtUnknEvtLastTransition indicates the sysUpTime when the operational state of the event last changed.')
tVrrpRtUnknEvtSetCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 2, 11, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tVrrpRtUnknEvtSetCounter.setStatus('current')
if mibBuilder.loadTexts: tVrrpRtUnknEvtSetCounter.setDescription("The value of tVrrpRtUnknEvtSetCounter indicates the number of times the event has transitioned to one of the 'set' states.")
tVrrpRtUnknEvtInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 2, 11, 1, 16), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tVrrpRtUnknEvtInUse.setStatus('current')
if mibBuilder.loadTexts: tVrrpRtUnknEvtInUse.setDescription("The value of tVrrpRtUnknEvtInUse when set to 'true' indicates that the event is currently affecting the in-use priority of some virtual router.")
tVrrpRtUnknEvtHoldClear = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 2, 11, 1, 17), TmnxEventHoldClear()).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tVrrpRtUnknEvtHoldClear.setStatus('current')
if mibBuilder.loadTexts: tVrrpRtUnknEvtHoldClear.setDescription('The value of tVrrpRtUnknEvtHoldClear indicates the configured Hold Clear time associated with the event.')
tVrrpRtUnknEvtHoldClearRemaining = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 2, 11, 1, 18), TmnxEventHoldClear()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: tVrrpRtUnknEvtHoldClearRemaining.setStatus('current')
if mibBuilder.loadTexts: tVrrpRtUnknEvtHoldClearRemaining.setDescription('The value of tVrrpRtUnknEvtHoldClearRemaining indicates the current value of the hold-clear timer i.e. the amount of time amount of time remaining before the cleared event will have an effect on the virtual router instance.')
tVrrpRtUnknEvtLastChgd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 2, 11, 1, 19), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tVrrpRtUnknEvtLastChgd.setStatus('current')
if mibBuilder.loadTexts: tVrrpRtUnknEvtLastChgd.setDescription('The value of tVrrpRtUnknEvtLastChgd indicates the time stamp of the last change to this row of this table.')
tVrrpRtUnknEvtNextHopTblLastChgd = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 2, 12), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tVrrpRtUnknEvtNextHopTblLastChgd.setStatus('current')
if mibBuilder.loadTexts: tVrrpRtUnknEvtNextHopTblLastChgd.setDescription('Timestamp of the last change to the tVrrpRtUnknEvtNextHopTable either from adding a row or removing a row.')
tVrrpRtUnknEvtNextHopTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 2, 13), )
if mibBuilder.loadTexts: tVrrpRtUnknEvtNextHopTable.setStatus('current')
if mibBuilder.loadTexts: tVrrpRtUnknEvtNextHopTable.setDescription('The tVrrpRtUnknEvtNextHopTable contains a list of next-hop IP addresses associated with each Route Unknown Priority Events defined in tVrrpRtUnknEvtTable.')
tVrrpRtUnknEvtNextHopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 2, 13, 1), ).setIndexNames((0, "TIMETRA-VRRP-MIB", "tmnxVrrpPolicyId"), (0, "TIMETRA-VRRP-MIB", "tVrrpRtUnknEvtPrefixType"), (0, "TIMETRA-VRRP-MIB", "tVrrpRtUnknEvtPrefix"), (0, "TIMETRA-VRRP-MIB", "tVrrpRtUnknEvtMaskLen"), (0, "TIMETRA-VRRP-MIB", "tVrrpRtUnknEvtNextHopType"), (0, "TIMETRA-VRRP-MIB", "tVrrpRtUnknEvtNextHop"), (0, "TIMETRA-VRRP-MIB", "tVrrpRtUnknEvtNextHopIfName"))
if mibBuilder.loadTexts: tVrrpRtUnknEvtNextHopEntry.setStatus('current')
if mibBuilder.loadTexts: tVrrpRtUnknEvtNextHopEntry.setDescription('Each row entry in the tVrrpRtUnknEvtNextHopTable represents an instance of a next-hop IP address which is defined as a match criterion for the Route Unknown Priority Event associated with this entry. Entries can be created and deleted via SNMP SET operations using tVrrpRtUnknEvtNextHopRowStatus.')
tVrrpRtUnknEvtNextHopType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 2, 13, 1, 1), InetAddressType())
if mibBuilder.loadTexts: tVrrpRtUnknEvtNextHopType.setStatus('current')
if mibBuilder.loadTexts: tVrrpRtUnknEvtNextHopType.setDescription('The IP address type of tVrrpRtUnknEvtNextHop.')
tVrrpRtUnknEvtNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 2, 13, 1, 2), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), ValueSizeConstraint(20, 20), )))
if mibBuilder.loadTexts: tVrrpRtUnknEvtNextHop.setStatus('current')
if mibBuilder.loadTexts: tVrrpRtUnknEvtNextHop.setDescription('The index value tVrrpRtUnknEvtNextHop identifies the next-hop IP address which is used to match the route prefix being monitored by this priority control event with the results of a route table lookup.')
tVrrpRtUnknEvtNextHopIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 2, 13, 1, 3), TNamedItemOrEmpty())
if mibBuilder.loadTexts: tVrrpRtUnknEvtNextHopIfName.setStatus('current')
if mibBuilder.loadTexts: tVrrpRtUnknEvtNextHopIfName.setDescription('The value of tVrrpRtUnknEvtNextHopIfName specifies the interface name when a link-local address is specified for tVrrpRtUnknEvtNextHop. This object is set to empty when tVrrpRtUnknEvtNextHop is not a link-local address.')
tVrrpRtUnknEvtNextHopRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 2, 13, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tVrrpRtUnknEvtNextHopRowStatus.setStatus('current')
if mibBuilder.loadTexts: tVrrpRtUnknEvtNextHopRowStatus.setDescription('tVrrpRtUnknEvtNextHopRowStatus is used for the creation or deletion of entries in the tVrrpRtUnknEvtNextHopTable.')
tVrrpRtUnknEvtNextHopLastChgd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 2, 13, 1, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tVrrpRtUnknEvtNextHopLastChgd.setStatus('current')
if mibBuilder.loadTexts: tVrrpRtUnknEvtNextHopLastChgd.setDescription('The value of tVrrpRtUnknEvtNextHopLastChgd indicates the time stamp of the last change to this row of this table.')
tVrrpIpv6RouterAdvertTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 1, 10), )
if mibBuilder.loadTexts: tVrrpIpv6RouterAdvertTable.setStatus('current')
if mibBuilder.loadTexts: tVrrpIpv6RouterAdvertTable.setDescription('The table containing information used to construct VRRP specific extensions to router advertisements.')
tVrrpIpv6RouterAdvertEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 1, 10, 1), )
ipv6RouterAdvertEntry.registerAugmentions(("TIMETRA-VRRP-MIB", "tVrrpIpv6RouterAdvertEntry"))
tVrrpIpv6RouterAdvertEntry.setIndexNames(*ipv6RouterAdvertEntry.getIndexNames())
if mibBuilder.loadTexts: tVrrpIpv6RouterAdvertEntry.setStatus('current')
if mibBuilder.loadTexts: tVrrpIpv6RouterAdvertEntry.setDescription('The tVrrpIpv6RouterAdvertEntry provides VRRP specific extension to the ipv6RouterAdvertEntry in the IP-MIB. Use of AUGMENTS clause implies a one-to-one dependent relationship between the base table, ipv6RouterAdvertTable, and the augmenting table, tVrrpIpv6RouterAdvertTable. This in effect extends the ipv6RouterAdvertTable with additional columns. Creation (or deletion) of a row in the ipv6RouterAdvertTable results in the same fate for the row in the tVrrpIpv6RouterAdvertTable.')
tVrrpIpv6RouterAdvertUseVirtualMac = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 1, 10, 1, 1), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tVrrpIpv6RouterAdvertUseVirtualMac.setStatus('current')
if mibBuilder.loadTexts: tVrrpIpv6RouterAdvertUseVirtualMac.setDescription('The value of tVrrpIpv6RouterAdvertUseVirtualMac specifies whether Router Advertisement messages are sent using the VRRP virtual MAC address, provided that the virtual router is currently the master. If the virtual router is not the master, no Router Advertisement messages are sent.')
tVrrpAssoBfdIntfTblLastChgd = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 1, 11), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tVrrpAssoBfdIntfTblLastChgd.setStatus('current')
if mibBuilder.loadTexts: tVrrpAssoBfdIntfTblLastChgd.setDescription('Timestamp of the last change to the tVrrpAssoBfdIntfTable either from adding a row or removing a row.')
tVrrpAssoBfdIntfTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 1, 12), )
if mibBuilder.loadTexts: tVrrpAssoBfdIntfTable.setStatus('current')
if mibBuilder.loadTexts: tVrrpAssoBfdIntfTable.setDescription('The tVrrpAssoBfdIntfTable is a read-only table which provides a list of the BFD interfaces associated with the corresponding VRRP virtual router instance. The BFD interface provides a fast mechanism for changing the state of an VRRP virtual router instance riding on the same subnet.')
tVrrpAssoBfdIntfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 1, 12, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "TIMETRA-VRRP-MIB", "tVrrpAssoBfdIntfVrIdIpType"), (0, "VRRP-MIB", "vrrpOperVrId"), (0, "TIMETRA-VRRP-MIB", "tVrrpAssoBfdIntfSvcId"), (0, "TIMETRA-VRRP-MIB", "tVrrpAssoBfdIntfIfName"), (0, "TIMETRA-VRRP-MIB", "tVrrpAssoBfdIntfDestIpType"), (0, "TIMETRA-VRRP-MIB", "tVrrpAssoBfdIntfDestIp"))
if mibBuilder.loadTexts: tVrrpAssoBfdIntfEntry.setStatus('current')
if mibBuilder.loadTexts: tVrrpAssoBfdIntfEntry.setDescription('Each row entry in the tVrrpAssoBfdIntfTable represents the BFD interface associated with VRRP virtual router instance identified by ifIndex, tVrrpAssoBfdIntfVrIdIpType and vrrpOperVrId.')
tVrrpAssoBfdIntfVrIdIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 1, 12, 1, 1), InetAddressType())
if mibBuilder.loadTexts: tVrrpAssoBfdIntfVrIdIpType.setStatus('current')
if mibBuilder.loadTexts: tVrrpAssoBfdIntfVrIdIpType.setDescription('The value of tVrrpAssoBfdIntfVrIdIpType specifies the address type of vrrpOperVrId object.')
tVrrpAssoBfdIntfSvcId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 1, 12, 1, 2), TmnxServId())
if mibBuilder.loadTexts: tVrrpAssoBfdIntfSvcId.setStatus('current')
if mibBuilder.loadTexts: tVrrpAssoBfdIntfSvcId.setDescription('The value of tVrrpAssoBfdIntfSvcId specifies the service ID of the interface running BFD.')
tVrrpAssoBfdIntfIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 1, 12, 1, 3), TNamedItem())
if mibBuilder.loadTexts: tVrrpAssoBfdIntfIfName.setStatus('current')
if mibBuilder.loadTexts: tVrrpAssoBfdIntfIfName.setDescription('The value of tVrrpAssoBfdIntfIfName specifies the name of the interface running BFD.')
tVrrpAssoBfdIntfDestIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 1, 12, 1, 4), InetAddressType())
if mibBuilder.loadTexts: tVrrpAssoBfdIntfDestIpType.setStatus('current')
if mibBuilder.loadTexts: tVrrpAssoBfdIntfDestIpType.setDescription('The value of tVrrpAssoBfdIntfDestIpType specifies the address type of tVrrpAssoBfdIntfDestIp object.')
tVrrpAssoBfdIntfDestIp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 1, 12, 1, 5), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), ValueSizeConstraint(20, 20), )))
if mibBuilder.loadTexts: tVrrpAssoBfdIntfDestIp.setStatus('current')
if mibBuilder.loadTexts: tVrrpAssoBfdIntfDestIp.setDescription('The value of tVrrpAssoBfdIntfDestIp specifies the destination IP address on the interface running BFD.')
tVrrpAssoBfdIntfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 1, 12, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tVrrpAssoBfdIntfRowStatus.setStatus('current')
if mibBuilder.loadTexts: tVrrpAssoBfdIntfRowStatus.setDescription('This object tVrrpAssoBfdIntfRowStatus is used for creation or deletion of entries in the tVrrpAssoBfdIntfEntry. Deletion of an entry in this table will not succeed if it is currently associated with any VRRP virtual router instance.')
tVrrpAssoBfdIntfLastChgd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 1, 12, 1, 7), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tVrrpAssoBfdIntfLastChgd.setStatus('current')
if mibBuilder.loadTexts: tVrrpAssoBfdIntfLastChgd.setDescription('The value of tVrrpAssoBfdIntfLastChgd specifies the time stamp of the last change to this row of this table.')
tVrrpAssoBfdIntfSrcIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 1, 12, 1, 8), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tVrrpAssoBfdIntfSrcIpType.setStatus('current')
if mibBuilder.loadTexts: tVrrpAssoBfdIntfSrcIpType.setDescription('The value of tVrrpAssoBfdIntfSrcIpType indicates the address type of tVrrpAssoBfdIntfSrcIp object.')
tVrrpAssoBfdIntfSrcIp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 1, 12, 1, 9), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), ValueSizeConstraint(20, 20), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tVrrpAssoBfdIntfSrcIp.setStatus('current')
if mibBuilder.loadTexts: tVrrpAssoBfdIntfSrcIp.setDescription('The value of tVrrpAssoBfdIntfSrcIp indicates the source IP address on the interface running BFD.')
tVrrpAssoBfdIntfSessOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 1, 12, 1, 10), TmnxVrrpAssoBfdIntfSessOperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tVrrpAssoBfdIntfSessOperState.setStatus('current')
if mibBuilder.loadTexts: tVrrpAssoBfdIntfSessOperState.setDescription('The value of tVrrpAssoBfdIntfSessOperState indicates the operational state of the BFD session the VRRP virtual router instance is relying upon for its fast triggering mechanism.')
tmnxVrrpNotifBfdIntfSvcId = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 3, 1), TmnxServId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxVrrpNotifBfdIntfSvcId.setStatus('current')
if mibBuilder.loadTexts: tmnxVrrpNotifBfdIntfSvcId.setDescription('The value of tmnxVrrpNotifBfdIntfSvcId specifies the service ID of the interface running BFD in the notification.')
tmnxVrrpNotifBfdIntfIfName = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 3, 2), TNamedItem()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxVrrpNotifBfdIntfIfName.setStatus('current')
if mibBuilder.loadTexts: tmnxVrrpNotifBfdIntfIfName.setDescription('The value of tmnxVrrpNotifBfdIntfIfName specifies the name of the interface running BFD in the notification.')
tmnxVrrpNotifBfdIntfDestIpType = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 3, 3), InetAddressType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxVrrpNotifBfdIntfDestIpType.setStatus('current')
if mibBuilder.loadTexts: tmnxVrrpNotifBfdIntfDestIpType.setDescription('The value of tmnxVrrpNotifBfdIntfDestIpType specifies the address type of tmnxVrrpNotifBfdIntfDestIp object.')
tmnxVrrpNotifBfdIntfDestIp = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 3, 4), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), ValueSizeConstraint(20, 20), ))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxVrrpNotifBfdIntfDestIp.setStatus('current')
if mibBuilder.loadTexts: tmnxVrrpNotifBfdIntfDestIp.setDescription('The value of tmnxVrrpNotifBfdIntfDestIp specifies the destination IP address on the interface running BFD in the notification.')
tmnxVrrpNotifBfdIntfSessState = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 20, 3, 5), TmnxVrrpAssoBfdIntfSessOperState()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxVrrpNotifBfdIntfSessState.setStatus('current')
if mibBuilder.loadTexts: tmnxVrrpNotifBfdIntfSessState.setDescription('The value of tmnxVrrpNotifBfdIntfSessState indicates the operational state of BFD session on the interface in the notification.')
tmnxVrrpIPListMismatch = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 20, 0, 1)).setObjects(("TIMETRA-VRRP-MIB", "tmnxVrrpRouterMasterIPListMatch"))
if mibBuilder.loadTexts: tmnxVrrpIPListMismatch.setStatus('current')
if mibBuilder.loadTexts: tmnxVrrpIPListMismatch.setDescription('The tmnxVrrpIPListMismatch trap is generated when the IP address list received in the advertisement messages received from the current master did not match the configured IP address list. This is an edge triggered notification. A second trap will not be generated for a packet from the same master until this event has been cleared.')
tmnxVrrpIPListMismatchClear = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 20, 0, 2)).setObjects(("TIMETRA-VRRP-MIB", "tmnxVrrpRouterMasterIPListMatch"))
if mibBuilder.loadTexts: tmnxVrrpIPListMismatchClear.setStatus('current')
if mibBuilder.loadTexts: tmnxVrrpIPListMismatchClear.setDescription('The tmnxVrrpIPListMismatchClear trap is generated when a previously ocurring tmnxVrrpIPListMismatch trap has been cleared because the IP address list in the advertisement messages received from the current master now matches the configured IP address list. This is an edge triggered notification. A second trap will not be generated for a packet from the same master until this event has been set again.')
tmnxVrrpMultipleOwners = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 20, 0, 3)).setObjects(("TIMETRA-VRRP-MIB", "tmnxVrrpRouterMasterLastSeen"))
if mibBuilder.loadTexts: tmnxVrrpMultipleOwners.setStatus('current')
if mibBuilder.loadTexts: tmnxVrrpMultipleOwners.setDescription('The tmnxVrrpMultipleOwners trap is generated when a VRRP virtual router instance that has been configured as an owner notices that that another VRRP instance is also advertising itself as an owner.')
tmnxVrrpBecameBackup = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 20, 0, 4)).setObjects(("VRRP-MIB", "vrrpOperMasterIpAddr"))
if mibBuilder.loadTexts: tmnxVrrpBecameBackup.setStatus('current')
if mibBuilder.loadTexts: tmnxVrrpBecameBackup.setDescription("The tmnxVrrpBecameBackup trap is generated when the sending agent has transitioned to 'Backup' state.")
tmnxVrrpBfdIntfSessStateChgd = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 20, 0, 5)).setObjects(("TIMETRA-VRRP-MIB", "tmnxVrrpNotifBfdIntfSvcId"), ("TIMETRA-VRRP-MIB", "tmnxVrrpNotifBfdIntfIfName"), ("TIMETRA-VRRP-MIB", "tmnxVrrpNotifBfdIntfDestIpType"), ("TIMETRA-VRRP-MIB", "tmnxVrrpNotifBfdIntfDestIp"), ("TIMETRA-VRRP-MIB", "tmnxVrrpNotifBfdIntfSessState"))
if mibBuilder.loadTexts: tmnxVrrpBfdIntfSessStateChgd.setStatus('current')
if mibBuilder.loadTexts: tmnxVrrpBfdIntfSessStateChgd.setDescription('The notification tmnxVrrpBfdIntfSessStateChgd is generated when the operational state of BFD session of the VRRP instance changes.')
tVrrpBecameBackup = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 20, 0, 6)).setObjects(("TIMETRA-VRRP-V3-MIB", "vrrpOperationsMasterIpAddr"))
if mibBuilder.loadTexts: tVrrpBecameBackup.setStatus('current')
if mibBuilder.loadTexts: tVrrpBecameBackup.setDescription("The tmnxVrrpBecameBackup trap is generated when the sending agent has transitioned to 'Backup' state.")
tVrrpTrapNewMaster = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 20, 0, 7)).setObjects(("TIMETRA-VRRP-V3-MIB", "vrrpOperationsMasterIpAddr"), ("TIMETRA-VRRP-V3-MIB", "vrrpNewMasterReason"))
if mibBuilder.loadTexts: tVrrpTrapNewMaster.setStatus('current')
if mibBuilder.loadTexts: tVrrpTrapNewMaster.setDescription("The tVrrpTrapNewMaster trap indicates that the sending agent has transitioned to 'Master' state.")
tVrrpIPListMismatch = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 20, 0, 8)).setObjects(("TIMETRA-VRRP-MIB", "tVrrpRtrMasterIPListMatch"))
if mibBuilder.loadTexts: tVrrpIPListMismatch.setStatus('current')
if mibBuilder.loadTexts: tVrrpIPListMismatch.setDescription('The tVrrpIPListMismatch trap is generated when the IPv6 address list received in the advertisement messages received from the current master did not match the configured IPv6 address list. This is an edge triggered notification. A second trap will not be generated for a packet from the same master until this event has been cleared.')
tVrrpIPListMismatchClear = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 20, 0, 9)).setObjects(("TIMETRA-VRRP-MIB", "tVrrpRtrMasterIPListMatch"))
if mibBuilder.loadTexts: tVrrpIPListMismatchClear.setStatus('current')
if mibBuilder.loadTexts: tVrrpIPListMismatchClear.setDescription('The tVrrpIPListMismatchClear trap is generated when a previously ocurring tVrrpIPListMismatch trap has been cleared because the IPv6 address list in the advertisement messages received from the current master now matches the configured IPv6 address list. This is an edge triggered notification. A second trap will not be generated for a packet from the same master until this event has been set again.')
tVrrpMultipleOwners = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 20, 0, 10)).setObjects(("TIMETRA-VRRP-MIB", "tVrrpRtrMasterLastSeen"))
if mibBuilder.loadTexts: tVrrpMultipleOwners.setStatus('current')
if mibBuilder.loadTexts: tVrrpMultipleOwners.setDescription('The tVrrpMultipleOwners trap is generated when a VRRP virtual router instance that has been configured as an owner notices that that another VRRP instance is also advertising itself as an owner.')
tVrrpRouterAdvNotActivated = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 20, 0, 11)).setObjects(("TIMETRA-VRRP-MIB", "tVrrpOpState"))
if mibBuilder.loadTexts: tVrrpRouterAdvNotActivated.setStatus('current')
if mibBuilder.loadTexts: tVrrpRouterAdvNotActivated.setDescription("The tVrrpRouterAdvNotActivated trap is generated when the parent interface of the IPv6 virtual router instance is either not set to send out Router Advertisement or the Router Advertisement is not configured to use the virtual MAC address. The virtual router instance is not allowed to become operationally 'up'.")
tVrrpRouterAdvNotActivatedClear = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 20, 0, 12)).setObjects(("TIMETRA-VRRP-MIB", "tVrrpOpState"))
if mibBuilder.loadTexts: tVrrpRouterAdvNotActivatedClear.setStatus('current')
if mibBuilder.loadTexts: tVrrpRouterAdvNotActivatedClear.setDescription('The tVrrpRouterAdvNotActivatedClear trap is generated when a previously occurring tVrrpRouterAdvNotActivated trap has been cleared. The tVrrpRouterAdvNotActivatedClear trap is generated when either: - the parent interface of the IPv6 virtual router instance is set to send out Router Advertisement, and Router Advertisement is configured to user virtual MAC, or - the virtual router instance is no longer attempting to become active (e.g. the virtual-router is administratively shutdown).')
tmnxVrrpCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 20, 1))
tmnxVrrpGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 20, 2))
tmnxVrrpV4v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 20, 1, 3)).setObjects(("TIMETRA-VRRP-MIB", "tmnxVrrpOperV4v0Group"), ("TIMETRA-VRRP-MIB", "tmnxVrrpStatsGroup"), ("TIMETRA-VRRP-MIB", "tmnxVrrpRouteMasterGroup"), ("TIMETRA-VRRP-MIB", "tmnxVrrpPolicyGroup"), ("TIMETRA-VRRP-MIB", "tmnxVrrpPriorityEventsGroup"), ("TIMETRA-VRRP-MIB", "tmnxVrrpNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxVrrpV4v0Compliance = tmnxVrrpV4v0Compliance.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxVrrpV4v0Compliance.setDescription('The compliance statement for management of extended VRRP features on Alcatel-Lucent SROS series systems.')
tmnxVrrpV5v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 20, 1, 4)).setObjects(("TIMETRA-VRRP-MIB", "tmnxVrrpOperV5v0Group"), ("TIMETRA-VRRP-MIB", "tmnxVrrpStatsGroup"), ("TIMETRA-VRRP-MIB", "tmnxVrrpRouteMasterGroup"), ("TIMETRA-VRRP-MIB", "tmnxVrrpPolicyV5v0Group"), ("TIMETRA-VRRP-MIB", "tmnxVrrpPriorityEventsGroup"), ("TIMETRA-VRRP-MIB", "tmnxVrrpNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxVrrpV5v0Compliance = tmnxVrrpV5v0Compliance.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxVrrpV5v0Compliance.setDescription('The compliance statement for management of extended VRRP features on Alcatel-Lucent SROS series systems.')
tmnxVrrpV6v1Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 20, 1, 5)).setObjects(("TIMETRA-VRRP-MIB", "tmnxVrrpOperV6v1Group"), ("TIMETRA-VRRP-MIB", "tmnxVrrpStatsGroup"), ("TIMETRA-VRRP-MIB", "tmnxVrrpRouteMasterGroup"), ("TIMETRA-VRRP-MIB", "tmnxVrrpBfdGroup"), ("TIMETRA-VRRP-MIB", "tmnxVrrpPolicyV5v0Group"), ("TIMETRA-VRRP-MIB", "tmnxVrrpPriorityEventsGroup"), ("TIMETRA-VRRP-MIB", "tmnxVrrpNotificationV6v1Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxVrrpV6v1Compliance = tmnxVrrpV6v1Compliance.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxVrrpV6v1Compliance.setDescription('The compliance statement for management of extended VRRP features on Alcatel-Lucent SROS series systems.')
tmnxVrrp77x0V7v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 20, 1, 6)).setObjects(("TIMETRA-VRRP-MIB", "tmnxVrrpOperV6v1Group"), ("TIMETRA-VRRP-MIB", "tmnxVrrpStatsGroup"), ("TIMETRA-VRRP-MIB", "tmnxVrrpRouteMasterGroup"), ("TIMETRA-VRRP-MIB", "tmnxVrrpBfdGroup"), ("TIMETRA-VRRP-MIB", "tmnxVrrpPolicyV5v0Group"), ("TIMETRA-VRRP-MIB", "tmnxVrrpPriorityEventsGroup"), ("TIMETRA-VRRP-MIB", "tmnxVrrpNotificationV6v1Group"), ("TIMETRA-VRRP-MIB", "tVrrpNotificationV7v0Group"), ("TIMETRA-VRRP-MIB", "tVrrpHostUnreachableV7v0Group"), ("TIMETRA-VRRP-MIB", "tVrrpOpV7v0Group"), ("TIMETRA-VRRP-MIB", "tVrrpRouteUnknownV7v0Group"), ("TIMETRA-VRRP-MIB", "tVrrpMasterV7v0Group"), ("TIMETRA-VRRP-MIB", "tVrrpStatV7v0Group"), ("TIMETRA-VRRP-MIB", "tVrrpRouterAdverV7v0Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxVrrp77x0V7v0Compliance = tmnxVrrp77x0V7v0Compliance.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxVrrp77x0V7v0Compliance.setDescription('The compliance statement for management of extended VRRP features on Alcatel-Lucent 7750 and 7710 SR series systems.')
tmnxVrrp7450V7v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 20, 1, 7)).setObjects(("TIMETRA-VRRP-MIB", "tmnxVrrpOperV6v1Group"), ("TIMETRA-VRRP-MIB", "tmnxVrrpStatsGroup"), ("TIMETRA-VRRP-MIB", "tmnxVrrpRouteMasterGroup"), ("TIMETRA-VRRP-MIB", "tmnxVrrpBfdGroup"), ("TIMETRA-VRRP-MIB", "tmnxVrrpPolicyV5v0Group"), ("TIMETRA-VRRP-MIB", "tmnxVrrpPriorityEventsGroup"), ("TIMETRA-VRRP-MIB", "tmnxVrrpNotificationV6v1Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxVrrp7450V7v0Compliance = tmnxVrrp7450V7v0Compliance.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxVrrp7450V7v0Compliance.setDescription('The compliance statement for management of extended VRRP features on Alcatel-Lucent 7450 SR series systems.')
tmnxVrrp77x0V9v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 20, 1, 8)).setObjects(("TIMETRA-VRRP-MIB", "tmnxVrrpOperV6v1Group"), ("TIMETRA-VRRP-MIB", "tmnxVrrpStatsGroup"), ("TIMETRA-VRRP-MIB", "tmnxVrrpRouteMasterGroup"), ("TIMETRA-VRRP-MIB", "tmnxVrrpPolicyV5v0Group"), ("TIMETRA-VRRP-MIB", "tmnxVrrpPriorityEventsGroup"), ("TIMETRA-VRRP-MIB", "tmnxVrrpNotificationV6v1Group"), ("TIMETRA-VRRP-MIB", "tVrrpNotificationV7v0Group"), ("TIMETRA-VRRP-MIB", "tVrrpHostUnreachableV7v0Group"), ("TIMETRA-VRRP-MIB", "tVrrpOpV7v0Group"), ("TIMETRA-VRRP-MIB", "tVrrpRouteUnknownV7v0Group"), ("TIMETRA-VRRP-MIB", "tVrrpMasterV7v0Group"), ("TIMETRA-VRRP-MIB", "tVrrpStatV7v0Group"), ("TIMETRA-VRRP-MIB", "tVrrpRouterAdverV7v0Group"), ("TIMETRA-VRRP-MIB", "tVrrpBfdV9v0Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxVrrp77x0V9v0Compliance = tmnxVrrp77x0V9v0Compliance.setStatus('current')
if mibBuilder.loadTexts: tmnxVrrp77x0V9v0Compliance.setDescription('The compliance statement for management of extended VRRP features on Alcatel-Lucent 7750 and 7710 SR series systems.')
tmnxVrrp7450V9v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 20, 1, 9)).setObjects(("TIMETRA-VRRP-MIB", "tmnxVrrpOperV6v1Group"), ("TIMETRA-VRRP-MIB", "tmnxVrrpStatsGroup"), ("TIMETRA-VRRP-MIB", "tmnxVrrpRouteMasterGroup"), ("TIMETRA-VRRP-MIB", "tVrrpBfdV9v0Group"), ("TIMETRA-VRRP-MIB", "tmnxVrrpPolicyV5v0Group"), ("TIMETRA-VRRP-MIB", "tmnxVrrpPriorityEventsGroup"), ("TIMETRA-VRRP-MIB", "tmnxVrrpNotificationV6v1Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxVrrp7450V9v0Compliance = tmnxVrrp7450V9v0Compliance.setStatus('current')
if mibBuilder.loadTexts: tmnxVrrp7450V9v0Compliance.setDescription('The compliance statement for management of extended VRRP features on Alcatel-Lucent 7450 SR series systems.')
tmnxVrrpStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 20, 2, 2)).setObjects(("TIMETRA-VRRP-MIB", "tmnxVrrpStatsAdvertiseSent"), ("TIMETRA-VRRP-MIB", "tmnxVrrpStatsPreemptEvents"), ("TIMETRA-VRRP-MIB", "tmnxVrrpStatsPreemptedEvents"), ("TIMETRA-VRRP-MIB", "tmnxVrrpStatsMasterChanges"), ("TIMETRA-VRRP-MIB", "tmnxVrrpStatsAdvertiseIntervalDiscards"), ("TIMETRA-VRRP-MIB", "tmnxVrrpStatsAddressListDiscards"), ("TIMETRA-VRRP-MIB", "tmnxVrrpStatsTotalDiscards"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxVrrpStatsGroup = tmnxVrrpStatsGroup.setStatus('current')
if mibBuilder.loadTexts: tmnxVrrpStatsGroup.setDescription('The group of objects supporting management of extended VRRP statistics on Alcatel-Lucent SROS series systems.')
tmnxVrrpRouteMasterGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 20, 2, 3)).setObjects(("TIMETRA-VRRP-MIB", "tmnxVrrpRouterMasterLastSeen"), ("TIMETRA-VRRP-MIB", "tmnxVrrpRouterMasterMessageCount"), ("TIMETRA-VRRP-MIB", "tmnxVrrpRouterMasterAuthSequence"), ("TIMETRA-VRRP-MIB", "tmnxVrrpRouterMasterIPListMatch"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxVrrpRouteMasterGroup = tmnxVrrpRouteMasterGroup.setStatus('current')
if mibBuilder.loadTexts: tmnxVrrpRouteMasterGroup.setDescription('The group of objects supporting management of extended VRRP route masters on Alcatel-Lucent SROS series systems.')
tmnxVrrpPolicyGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 20, 2, 4)).setObjects(("TIMETRA-VRRP-MIB", "tmnxVrrpPolicyRowStatus"), ("TIMETRA-VRRP-MIB", "tmnxVrrpPolicyDescription"), ("TIMETRA-VRRP-MIB", "tmnxVrrpPolicyDeltaInUseLimit"), ("TIMETRA-VRRP-MIB", "tmnxVrrpPolicyReferenceCount"), ("TIMETRA-VRRP-MIB", "tmnxVrrpPolicyCurrentExplicit"), ("TIMETRA-VRRP-MIB", "tmnxVrrpPolicyCurrentDeltaSum"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxVrrpPolicyGroup = tmnxVrrpPolicyGroup.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxVrrpPolicyGroup.setDescription('The group of objects supporting management of extended VRRP policies on Alcatel-Lucent SROS series systems.')
tmnxVrrpPriorityEventsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 20, 2, 5)).setObjects(("TIMETRA-VRRP-MIB", "tmnxVrrpPortDownEventRowStatus"), ("TIMETRA-VRRP-MIB", "tmnxVrrpPortDownEventPriority"), ("TIMETRA-VRRP-MIB", "tmnxVrrpPortDownEventType"), ("TIMETRA-VRRP-MIB", "tmnxVrrpPortDownEventHoldSet"), ("TIMETRA-VRRP-MIB", "tmnxVrrpPortDownEventOperState"), ("TIMETRA-VRRP-MIB", "tmnxVrrpPortDownEventHoldSetRemaining"), ("TIMETRA-VRRP-MIB", "tmnxVrrpPortDownEventPrevState"), ("TIMETRA-VRRP-MIB", "tmnxVrrpPortDownEventLastTransition"), ("TIMETRA-VRRP-MIB", "tmnxVrrpPortDownEventSetCounter"), ("TIMETRA-VRRP-MIB", "tmnxVrrpPortDownEventInUse"), ("TIMETRA-VRRP-MIB", "tmnxVrrpPortDownEventHoldClear"), ("TIMETRA-VRRP-MIB", "tmnxVrrpPortDownEventHoldClearRemaining"), ("TIMETRA-VRRP-MIB", "tmnxVrrpLagPortDownEventRowStatus"), ("TIMETRA-VRRP-MIB", "tmnxVrrpLagPortDownEventHoldSet"), ("TIMETRA-VRRP-MIB", "tmnxVrrpLagPortDownEventOperState"), ("TIMETRA-VRRP-MIB", "tmnxVrrpLagPortDownEventHoldSetRemaining"), ("TIMETRA-VRRP-MIB", "tmnxVrrpLagPortDownEventPrevState"), ("TIMETRA-VRRP-MIB", "tmnxVrrpLagPortDownEventLastTransition"), ("TIMETRA-VRRP-MIB", "tmnxVrrpLagPortDownEventSetCounter"), ("TIMETRA-VRRP-MIB", "tmnxVrrpLagPortDownEventInUse"), ("TIMETRA-VRRP-MIB", "tmnxVrrpLagPortDownEventHoldClear"), ("TIMETRA-VRRP-MIB", "tmnxVrrpLagPortDownEventHoldClearRemaining"), ("TIMETRA-VRRP-MIB", "tmnxVrrpLagNumberDownEventRowStatus"), ("TIMETRA-VRRP-MIB", "tmnxVrrpLagNumberDownEventPriority"), ("TIMETRA-VRRP-MIB", "tmnxVrrpLagNumberDownEventType"), ("TIMETRA-VRRP-MIB", "tmnxVrrpHostUnreachableEventRowStatus"), ("TIMETRA-VRRP-MIB", "tmnxVrrpHostUnreachableEventPriority"), ("TIMETRA-VRRP-MIB", "tmnxVrrpHostUnreachableEventType"), ("TIMETRA-VRRP-MIB", "tmnxVrrpHostUnreachableEventHoldSet"), ("TIMETRA-VRRP-MIB", "tmnxVrrpHostUnreachableEventInterval"), ("TIMETRA-VRRP-MIB", "tmnxVrrpHostUnreachableEventTimeout"), ("TIMETRA-VRRP-MIB", "tmnxVrrpHostUnreachableEventDropCount"), ("TIMETRA-VRRP-MIB", "tmnxVrrpHostUnreachableEventOperState"), ("TIMETRA-VRRP-MIB", "tmnxVrrpHostUnreachableEventHoldSetRemaining"), ("TIMETRA-VRRP-MIB", "tmnxVrrpHostUnreachableEventPrevState"), ("TIMETRA-VRRP-MIB", "tmnxVrrpHostUnreachableEventLastTransition"), ("TIMETRA-VRRP-MIB", "tmnxVrrpHostUnreachableEventSetCounter"), ("TIMETRA-VRRP-MIB", "tmnxVrrpHostUnreachableEventInUse"), ("TIMETRA-VRRP-MIB", "tmnxVrrpHostUnreachableEventHoldClear"), ("TIMETRA-VRRP-MIB", "tmnxVrrpHostUnreachableEventHoldClearRemaining"), ("TIMETRA-VRRP-MIB", "tmnxVrrpRouteUnknownEventRowStatus"), ("TIMETRA-VRRP-MIB", "tmnxVrrpRouteUnknownEventPriority"), ("TIMETRA-VRRP-MIB", "tmnxVrrpRouteUnknownEventType"), ("TIMETRA-VRRP-MIB", "tmnxVrrpRouteUnknownEventHoldSet"), ("TIMETRA-VRRP-MIB", "tmnxVrrpRouteUnknownEventLessSpecific"), ("TIMETRA-VRRP-MIB", "tmnxVrrpRouteUnknownEventDefaultAllowed"), ("TIMETRA-VRRP-MIB", "tmnxVrrpRouteUnknownEventProtocol"), ("TIMETRA-VRRP-MIB", "tmnxVrrpRouteUnknownEventOperState"), ("TIMETRA-VRRP-MIB", "tmnxVrrpRouteUnknownEventHoldSetRemaining"), ("TIMETRA-VRRP-MIB", "tmnxVrrpRouteUnknownEventPrevState"), ("TIMETRA-VRRP-MIB", "tmnxVrrpRouteUnknownEventLastTransition"), ("TIMETRA-VRRP-MIB", "tmnxVrrpRouteUnknownEventSetCounter"), ("TIMETRA-VRRP-MIB", "tmnxVrrpRouteUnknownEventInUse"), ("TIMETRA-VRRP-MIB", "tmnxVrrpRouteUnknownEventHoldClear"), ("TIMETRA-VRRP-MIB", "tmnxVrrpRouteUnknownEventHoldClearRemaining"), ("TIMETRA-VRRP-MIB", "tmnxVrrpRouteUnknownEventNextHopRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxVrrpPriorityEventsGroup = tmnxVrrpPriorityEventsGroup.setStatus('current')
if mibBuilder.loadTexts: tmnxVrrpPriorityEventsGroup.setDescription('The group of objects supporting management of extended VRRP priority events on Alcatel-Lucent SROS series systems.')
tmnxVrrpBfdGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 20, 2, 6)).setObjects(("TIMETRA-VRRP-MIB", "tmnxVrrpAssoBfdIntfTblLastChgd"), ("TIMETRA-VRRP-MIB", "tmnxVrrpAssoBfdIntfRowStatus"), ("TIMETRA-VRRP-MIB", "tmnxVrrpAssoBfdIntfLastChgd"), ("TIMETRA-VRRP-MIB", "tmnxVrrpAssoBfdIntfSrcIpType"), ("TIMETRA-VRRP-MIB", "tmnxVrrpAssoBfdIntfSrcIp"), ("TIMETRA-VRRP-MIB", "tmnxVrrpAssoBfdIntfSessOperState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxVrrpBfdGroup = tmnxVrrpBfdGroup.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxVrrpBfdGroup.setDescription('The group of objects supporting management of VRRP scaling feature on Alcatel-Lucent SROS series systems.')
tmnxVrrpNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 20, 2, 7)).setObjects(("TIMETRA-VRRP-MIB", "tmnxVrrpIPListMismatch"), ("TIMETRA-VRRP-MIB", "tmnxVrrpIPListMismatchClear"), ("TIMETRA-VRRP-MIB", "tmnxVrrpMultipleOwners"), ("TIMETRA-VRRP-MIB", "tmnxVrrpBecameBackup"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxVrrpNotificationGroup = tmnxVrrpNotificationGroup.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxVrrpNotificationGroup.setDescription('The group of notifications supporting the extended VRRP feature on Alcatel-Lucent SROS series systems.')
tmnxVrrpOperV4v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 20, 2, 9)).setObjects(("TIMETRA-VRRP-MIB", "tmnxVrrpOperState"), ("TIMETRA-VRRP-MIB", "tmnxVrrpOperVirtualMacAddr"), ("TIMETRA-VRRP-MIB", "tmnxVrrpOperMismatchDiscard"), ("TIMETRA-VRRP-MIB", "tmnxVrrpOperPingReply"), ("TIMETRA-VRRP-MIB", "tmnxVrrpOperTelnetReply"), ("TIMETRA-VRRP-MIB", "tmnxVrrpOperSshReply"), ("TIMETRA-VRRP-MIB", "tmnxVrrpOperPolicyId"), ("TIMETRA-VRRP-MIB", "tmnxVrrpOperInUsePriority"), ("TIMETRA-VRRP-MIB", "tmnxVrrpOperMasterSince"), ("TIMETRA-VRRP-MIB", "tmnxVrrpOperMasterPriority"), ("TIMETRA-VRRP-MIB", "tmnxVrrpOperOwner"), ("TIMETRA-VRRP-MIB", "tmnxVrrpOperMasterDownInterval"), ("TIMETRA-VRRP-MIB", "tmnxVrrpOperMasterDownTimer"), ("TIMETRA-VRRP-MIB", "tmnxVrrpOperAdvIntervalInherit"), ("TIMETRA-VRRP-MIB", "tmnxVrrpOperInUseAdvInterval"), ("TIMETRA-VRRP-MIB", "tmnxVrrpOperTracerouteReply"), ("TIMETRA-VRRP-MIB", "tmnxVrrpOperStandbyFwding"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxVrrpOperV4v0Group = tmnxVrrpOperV4v0Group.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxVrrpOperV4v0Group.setDescription('The group of objects supporting management of extended VRRP operations on Alcatel-Lucent SROS series systems.')
tmnxVrrpPolicyV5v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 20, 2, 10)).setObjects(("TIMETRA-VRRP-MIB", "tmnxVrrpPolicyRowStatus"), ("TIMETRA-VRRP-MIB", "tmnxVrrpPolicyDescription"), ("TIMETRA-VRRP-MIB", "tmnxVrrpPolicyDeltaInUseLimit"), ("TIMETRA-VRRP-MIB", "tmnxVrrpPolicyReferenceCount"), ("TIMETRA-VRRP-MIB", "tmnxVrrpPolicyCurrentExplicit"), ("TIMETRA-VRRP-MIB", "tmnxVrrpPolicyCurrentDeltaSum"), ("TIMETRA-VRRP-MIB", "tmnxVrrpPolicySvcContext"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxVrrpPolicyV5v0Group = tmnxVrrpPolicyV5v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxVrrpPolicyV5v0Group.setDescription('The group of objects supporting management of extended VRRP policies on Alcatel-Lucent SROS series systems.')
tmnxVrrpOperV5v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 20, 2, 11)).setObjects(("TIMETRA-VRRP-MIB", "tmnxVrrpOperState"), ("TIMETRA-VRRP-MIB", "tmnxVrrpOperVirtualMacAddr"), ("TIMETRA-VRRP-MIB", "tmnxVrrpOperMismatchDiscard"), ("TIMETRA-VRRP-MIB", "tmnxVrrpOperPingReply"), ("TIMETRA-VRRP-MIB", "tmnxVrrpOperTelnetReply"), ("TIMETRA-VRRP-MIB", "tmnxVrrpOperSshReply"), ("TIMETRA-VRRP-MIB", "tmnxVrrpOperPolicyId"), ("TIMETRA-VRRP-MIB", "tmnxVrrpOperInUsePriority"), ("TIMETRA-VRRP-MIB", "tmnxVrrpOperMasterSince"), ("TIMETRA-VRRP-MIB", "tmnxVrrpOperMasterPriority"), ("TIMETRA-VRRP-MIB", "tmnxVrrpOperOwner"), ("TIMETRA-VRRP-MIB", "tmnxVrrpOperMasterDownInterval"), ("TIMETRA-VRRP-MIB", "tmnxVrrpOperMasterDownTimer"), ("TIMETRA-VRRP-MIB", "tmnxVrrpOperAdvIntervalInherit"), ("TIMETRA-VRRP-MIB", "tmnxVrrpOperInUseAdvInterval"), ("TIMETRA-VRRP-MIB", "tmnxVrrpOperTracerouteReply"), ("TIMETRA-VRRP-MIB", "tmnxVrrpOperStandbyFwding"), ("TIMETRA-VRRP-MIB", "tmnxVrrpOperAdvIntervalMilSec"), ("TIMETRA-VRRP-MIB", "tmnxVrrpOperInUseAdvIntlMilSec"), ("TIMETRA-VRRP-MIB", "tmnxVrrpOperInitDelay"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxVrrpOperV5v0Group = tmnxVrrpOperV5v0Group.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxVrrpOperV5v0Group.setDescription('The group of objects supporting management of extended VRRP operations on Alcatel-Lucent SROS series systems.')
tmnxVrrpNotificationV6v1Group = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 20, 2, 12)).setObjects(("TIMETRA-VRRP-MIB", "tmnxVrrpIPListMismatch"), ("TIMETRA-VRRP-MIB", "tmnxVrrpIPListMismatchClear"), ("TIMETRA-VRRP-MIB", "tmnxVrrpMultipleOwners"), ("TIMETRA-VRRP-MIB", "tmnxVrrpBecameBackup"), ("TIMETRA-VRRP-MIB", "tmnxVrrpBfdIntfSessStateChgd"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxVrrpNotificationV6v1Group = tmnxVrrpNotificationV6v1Group.setStatus('current')
if mibBuilder.loadTexts: tmnxVrrpNotificationV6v1Group.setDescription('The group of notifications supporting the extended VRRP feature on Alcatel-Lucent SROS series systems for 6.1 release.')
tmnxVrrpOperV6v1Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 20, 2, 13)).setObjects(("TIMETRA-VRRP-MIB", "tmnxVrrpOperState"), ("TIMETRA-VRRP-MIB", "tmnxVrrpOperVirtualMacAddr"), ("TIMETRA-VRRP-MIB", "tmnxVrrpOperMismatchDiscard"), ("TIMETRA-VRRP-MIB", "tmnxVrrpOperPingReply"), ("TIMETRA-VRRP-MIB", "tmnxVrrpOperTelnetReply"), ("TIMETRA-VRRP-MIB", "tmnxVrrpOperSshReply"), ("TIMETRA-VRRP-MIB", "tmnxVrrpOperPolicyId"), ("TIMETRA-VRRP-MIB", "tmnxVrrpOperInUsePriority"), ("TIMETRA-VRRP-MIB", "tmnxVrrpOperMasterSince"), ("TIMETRA-VRRP-MIB", "tmnxVrrpOperMasterPriority"), ("TIMETRA-VRRP-MIB", "tmnxVrrpOperOwner"), ("TIMETRA-VRRP-MIB", "tmnxVrrpOperMasterDownInterval"), ("TIMETRA-VRRP-MIB", "tmnxVrrpOperMasterDownTimer"), ("TIMETRA-VRRP-MIB", "tmnxVrrpOperAdvIntervalInherit"), ("TIMETRA-VRRP-MIB", "tmnxVrrpOperInUseAdvInterval"), ("TIMETRA-VRRP-MIB", "tmnxVrrpOperTracerouteReply"), ("TIMETRA-VRRP-MIB", "tmnxVrrpOperStandbyFwding"), ("TIMETRA-VRRP-MIB", "tmnxVrrpOperAdvIntervalMilSec"), ("TIMETRA-VRRP-MIB", "tmnxVrrpOperInUseAdvIntlMilSec"), ("TIMETRA-VRRP-MIB", "tmnxVrrpOperInitDelay"), ("TIMETRA-VRRP-MIB", "tmnxVrrpOperInitTimer"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxVrrpOperV6v1Group = tmnxVrrpOperV6v1Group.setStatus('current')
if mibBuilder.loadTexts: tmnxVrrpOperV6v1Group.setDescription('The group of objects supporting management of extended VRRP operations on Alcatel-Lucent SROS series systems.')
tmnxVrrpNotificationObjV6v1Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 20, 2, 14)).setObjects(("TIMETRA-VRRP-MIB", "tmnxVrrpNotifBfdIntfSvcId"), ("TIMETRA-VRRP-MIB", "tmnxVrrpNotifBfdIntfIfName"), ("TIMETRA-VRRP-MIB", "tmnxVrrpNotifBfdIntfDestIpType"), ("TIMETRA-VRRP-MIB", "tmnxVrrpNotifBfdIntfDestIp"), ("TIMETRA-VRRP-MIB", "tmnxVrrpNotifBfdIntfSessState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxVrrpNotificationObjV6v1Group = tmnxVrrpNotificationObjV6v1Group.setStatus('current')
if mibBuilder.loadTexts: tmnxVrrpNotificationObjV6v1Group.setDescription('The group of objects supporting management of notification objects on Alcatel-Lucent SROS 6.1 series systems.')
tVrrpHostUnreachableV7v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 20, 2, 15)).setObjects(("TIMETRA-VRRP-MIB", "tVrrpHstUnrchEvtDropCount"), ("TIMETRA-VRRP-MIB", "tVrrpHstUnrchEvtHoldClear"), ("TIMETRA-VRRP-MIB", "tVrrpHstUnrchEvtHldClrRemain"), ("TIMETRA-VRRP-MIB", "tVrrpHstUnrchEvtHoldSet"), ("TIMETRA-VRRP-MIB", "tVrrpHstUnrchEvtHoldSetRemaining"), ("TIMETRA-VRRP-MIB", "tVrrpHstUnrchEvtInUse"), ("TIMETRA-VRRP-MIB", "tVrrpHstUnrchEvtInterval"), ("TIMETRA-VRRP-MIB", "tVrrpHstUnrchEvtLastTransition"), ("TIMETRA-VRRP-MIB", "tVrrpHstUnrchEvtOperState"), ("TIMETRA-VRRP-MIB", "tVrrpHstUnrchEvtPrevState"), ("TIMETRA-VRRP-MIB", "tVrrpHstUnrchEvtPriority"), ("TIMETRA-VRRP-MIB", "tVrrpHstUnrchEvtRowStatus"), ("TIMETRA-VRRP-MIB", "tVrrpHstUnrchEvtSetCounter"), ("TIMETRA-VRRP-MIB", "tVrrpHstUnrchEvtTimeout"), ("TIMETRA-VRRP-MIB", "tVrrpHstUnrchEvtType"), ("TIMETRA-VRRP-MIB", "tVrrpHstUnrchEvtLastChgd"), ("TIMETRA-VRRP-MIB", "tVrrpHstUnrchEvtTblLastChgd"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tVrrpHostUnreachableV7v0Group = tVrrpHostUnreachableV7v0Group.setStatus('current')
if mibBuilder.loadTexts: tVrrpHostUnreachableV7v0Group.setDescription('The group of objects supporting management of extended VRRP Host Unreachable Events on Alcatel-Lucent SROS series systems.')
tVrrpOpV7v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 20, 2, 16)).setObjects(("TIMETRA-VRRP-MIB", "tVrrpOpAdvIntervalInherit"), ("TIMETRA-VRRP-MIB", "tVrrpOpInUseAdvInterval"), ("TIMETRA-VRRP-MIB", "tVrrpOpInUsePriority"), ("TIMETRA-VRRP-MIB", "tVrrpOpInitDelay"), ("TIMETRA-VRRP-MIB", "tVrrpOpInitTimer"), ("TIMETRA-VRRP-MIB", "tVrrpOpMasterDownInterval"), ("TIMETRA-VRRP-MIB", "tVrrpOpMasterDownTimer"), ("TIMETRA-VRRP-MIB", "tVrrpOpMasterPriority"), ("TIMETRA-VRRP-MIB", "tVrrpOpMasterSince"), ("TIMETRA-VRRP-MIB", "tVrrpOpOwner"), ("TIMETRA-VRRP-MIB", "tVrrpOpPingReply"), ("TIMETRA-VRRP-MIB", "tVrrpOpPolicyId"), ("TIMETRA-VRRP-MIB", "tVrrpOpStandbyFwding"), ("TIMETRA-VRRP-MIB", "tVrrpOpState"), ("TIMETRA-VRRP-MIB", "tVrrpOpTelnetReply"), ("TIMETRA-VRRP-MIB", "tVrrpOpTracerouteReply"), ("TIMETRA-VRRP-MIB", "tVrrpOpVirtualMacAddr"), ("TIMETRA-VRRP-MIB", "tVrrpOpOperDownReason"), ("TIMETRA-VRRP-MIB", "tVrrpOpLastChgd"), ("TIMETRA-VRRP-MIB", "tVrrpOpTblLastChgd"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tVrrpOpV7v0Group = tVrrpOpV7v0Group.setStatus('current')
if mibBuilder.loadTexts: tVrrpOpV7v0Group.setDescription('The group of objects supporting management of extended VRRP operations for IPv6 on Alcatel-Lucent SROS series systems.')
tVrrpRouteUnknownV7v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 20, 2, 17)).setObjects(("TIMETRA-VRRP-MIB", "tVrrpRtUnknEvtDefaultAllowed"), ("TIMETRA-VRRP-MIB", "tVrrpRtUnknEvtHoldClear"), ("TIMETRA-VRRP-MIB", "tVrrpRtUnknEvtHoldClearRemaining"), ("TIMETRA-VRRP-MIB", "tVrrpRtUnknEvtHoldSet"), ("TIMETRA-VRRP-MIB", "tVrrpRtUnknEvtHoldSetRemaining"), ("TIMETRA-VRRP-MIB", "tVrrpRtUnknEvtInUse"), ("TIMETRA-VRRP-MIB", "tVrrpRtUnknEvtLastTransition"), ("TIMETRA-VRRP-MIB", "tVrrpRtUnknEvtLessSpecific"), ("TIMETRA-VRRP-MIB", "tVrrpRtUnknEvtNextHopRowStatus"), ("TIMETRA-VRRP-MIB", "tVrrpRtUnknEvtOperState"), ("TIMETRA-VRRP-MIB", "tVrrpRtUnknEvtPrevState"), ("TIMETRA-VRRP-MIB", "tVrrpRtUnknEvtPriority"), ("TIMETRA-VRRP-MIB", "tVrrpRtUnknEvtProtocol"), ("TIMETRA-VRRP-MIB", "tVrrpRtUnknEvtRowStatus"), ("TIMETRA-VRRP-MIB", "tVrrpRtUnknEvtSetCounter"), ("TIMETRA-VRRP-MIB", "tVrrpRtUnknEvtType"), ("TIMETRA-VRRP-MIB", "tVrrpRtUnknEvtLastChgd"), ("TIMETRA-VRRP-MIB", "tVrrpRtUnknEvtNextHopLastChgd"), ("TIMETRA-VRRP-MIB", "tVrrpRtUnknEvtNextHopTblLastChgd"), ("TIMETRA-VRRP-MIB", "tVrrpRtUnknEvtTblLastChgd"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tVrrpRouteUnknownV7v0Group = tVrrpRouteUnknownV7v0Group.setStatus('current')
if mibBuilder.loadTexts: tVrrpRouteUnknownV7v0Group.setDescription('The group of objects supporting management of extended VRRP Route Unknown events on Alcatel-Lucent SROS series systems.')
tVrrpMasterV7v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 20, 2, 18)).setObjects(("TIMETRA-VRRP-MIB", "tVrrpRtrMasterAuthSequence"), ("TIMETRA-VRRP-MIB", "tVrrpRtrMasterIPListMatch"), ("TIMETRA-VRRP-MIB", "tVrrpRtrMasterLastSeen"), ("TIMETRA-VRRP-MIB", "tVrrpRtrMasterMessageCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tVrrpMasterV7v0Group = tVrrpMasterV7v0Group.setStatus('current')
if mibBuilder.loadTexts: tVrrpMasterV7v0Group.setDescription('The group of objects supporting management of extended VRRP Master table for IPv6 on Alcatel-Lucent SROS series systems.')
tVrrpStatV7v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 20, 2, 19)).setObjects(("TIMETRA-VRRP-MIB", "tVrrpStatAdvIntvlDiscards"), ("TIMETRA-VRRP-MIB", "tVrrpStatAdvertiseSent"), ("TIMETRA-VRRP-MIB", "tVrrpStatMasterChanges"), ("TIMETRA-VRRP-MIB", "tVrrpStatPreemptEvents"), ("TIMETRA-VRRP-MIB", "tVrrpStatPreemptedEvents"), ("TIMETRA-VRRP-MIB", "tVrrpStatTotalDiscards"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tVrrpStatV7v0Group = tVrrpStatV7v0Group.setStatus('current')
if mibBuilder.loadTexts: tVrrpStatV7v0Group.setDescription('The group of objects supporting management of extended VRRP statistics for IPv6 on Alcatel-Lucent SROS series systems.')
tVrrpRouterAdverV7v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 20, 2, 20)).setObjects(("TIMETRA-VRRP-MIB", "tVrrpIpv6RouterAdvertUseVirtualMac"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tVrrpRouterAdverV7v0Group = tVrrpRouterAdverV7v0Group.setStatus('current')
if mibBuilder.loadTexts: tVrrpRouterAdverV7v0Group.setDescription('The group of objects supporting management of extended Router Advertisement features for IPv6 on Alcatel-Lucent SROS series systems.')
tVrrpNotificationV7v0Group = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 20, 2, 21)).setObjects(("TIMETRA-VRRP-MIB", "tVrrpBecameBackup"), ("TIMETRA-VRRP-MIB", "tVrrpTrapNewMaster"), ("TIMETRA-VRRP-MIB", "tVrrpIPListMismatch"), ("TIMETRA-VRRP-MIB", "tVrrpIPListMismatchClear"), ("TIMETRA-VRRP-MIB", "tVrrpMultipleOwners"), ("TIMETRA-VRRP-MIB", "tVrrpRouterAdvNotActivated"), ("TIMETRA-VRRP-MIB", "tVrrpRouterAdvNotActivatedClear"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tVrrpNotificationV7v0Group = tVrrpNotificationV7v0Group.setStatus('current')
if mibBuilder.loadTexts: tVrrpNotificationV7v0Group.setDescription('The group of notifications supporting the extended VRRP feature on Alcatel-Lucent SROS series systems for 7.0 release.')
tVrrpBfdV9v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 20, 2, 22)).setObjects(("TIMETRA-VRRP-MIB", "tVrrpAssoBfdIntfLastChgd"), ("TIMETRA-VRRP-MIB", "tVrrpAssoBfdIntfRowStatus"), ("TIMETRA-VRRP-MIB", "tVrrpAssoBfdIntfSessOperState"), ("TIMETRA-VRRP-MIB", "tVrrpAssoBfdIntfSrcIp"), ("TIMETRA-VRRP-MIB", "tVrrpAssoBfdIntfSrcIpType"), ("TIMETRA-VRRP-MIB", "tVrrpAssoBfdIntfTblLastChgd"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tVrrpBfdV9v0Group = tVrrpBfdV9v0Group.setStatus('current')
if mibBuilder.loadTexts: tVrrpBfdV9v0Group.setDescription('The group of objects supporting management of BFD on extended VRRP for Alcatel-Lucent SROS series systems.')
tmnxVrrpObsoletedV9v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 20, 2, 23)).setObjects(("TIMETRA-VRRP-MIB", "tmnxVrrpAssoBfdIntfLastChgd"), ("TIMETRA-VRRP-MIB", "tmnxVrrpAssoBfdIntfRowStatus"), ("TIMETRA-VRRP-MIB", "tmnxVrrpAssoBfdIntfSessOperState"), ("TIMETRA-VRRP-MIB", "tmnxVrrpAssoBfdIntfSrcIp"), ("TIMETRA-VRRP-MIB", "tmnxVrrpAssoBfdIntfSrcIpType"), ("TIMETRA-VRRP-MIB", "tmnxVrrpAssoBfdIntfTblLastChgd"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxVrrpObsoletedV9v0Group = tmnxVrrpObsoletedV9v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxVrrpObsoletedV9v0Group.setDescription('The group of objects supporting VRRP feature objects obsoleted in release 9.0 of Alcatel-Lucent SROS series systems.')
mibBuilder.exportSymbols("TIMETRA-VRRP-MIB", tmnxVrrpRouteUnknownEventMaskLen=tmnxVrrpRouteUnknownEventMaskLen, tmnxVrrpOperInUsePriority=tmnxVrrpOperInUsePriority, tVrrpStatV7v0Group=tVrrpStatV7v0Group, tVrrpOpInUseAdvInterval=tVrrpOpInUseAdvInterval, tmnxVrrpPolicyTable=tmnxVrrpPolicyTable, tmnxVrrpOperStandbyFwding=tmnxVrrpOperStandbyFwding, tmnxVrrpRouteUnknownEventNextHopRowStatus=tmnxVrrpRouteUnknownEventNextHopRowStatus, tmnxVrrpRouteUnknownEventInUse=tmnxVrrpRouteUnknownEventInUse, tmnxVrrpMibObjects=tmnxVrrpMibObjects, TmnxEventType=TmnxEventType, tVrrpIpv6RouterAdvertEntry=tVrrpIpv6RouterAdvertEntry, tVrrpHstUnrchEvtInUse=tVrrpHstUnrchEvtInUse, tmnxVrrpRouteMasterGroup=tmnxVrrpRouteMasterGroup, tmnxVrrpRouteUnknownEventEntry=tmnxVrrpRouteUnknownEventEntry, tmnxVrrpLagPortDownEventHoldClear=tmnxVrrpLagPortDownEventHoldClear, tmnxVrrpOperMasterDownTimer=tmnxVrrpOperMasterDownTimer, tmnxVrrpAssoBfdIntfSvcId=tmnxVrrpAssoBfdIntfSvcId, tmnxVrrpPolicyV5v0Group=tmnxVrrpPolicyV5v0Group, TmnxVrrpPolicyID=TmnxVrrpPolicyID, tVrrpRtUnknEvtNextHopRowStatus=tVrrpRtUnknEvtNextHopRowStatus, tmnxVrrpLagNumberDownEventType=tmnxVrrpLagNumberDownEventType, tmnxVrrpOperTable=tmnxVrrpOperTable, tmnxVrrpLagPortDownEventRowStatus=tmnxVrrpLagPortDownEventRowStatus, tVrrpOpTelnetReply=tVrrpOpTelnetReply, tmnxVrrpNotifications=tmnxVrrpNotifications, tVrrpRtUnknEvtRowStatus=tVrrpRtUnknEvtRowStatus, tmnxVrrpOperAdvIntervalInherit=tmnxVrrpOperAdvIntervalInherit, tVrrpIpv6RouterAdvertTable=tVrrpIpv6RouterAdvertTable, timetraVrrpMIBModule=timetraVrrpMIBModule, tVrrpHstUnrchEvtInterval=tVrrpHstUnrchEvtInterval, tmnxVrrpRouteUnknownEventNextHopTable=tmnxVrrpRouteUnknownEventNextHopTable, tmnxVrrpV4v0Compliance=tmnxVrrpV4v0Compliance, tmnxVrrpLagPortDownEventEntry=tmnxVrrpLagPortDownEventEntry, tmnxVrrpPortDownEventType=tmnxVrrpPortDownEventType, tmnxVrrpPolicyCurrentDeltaSum=tmnxVrrpPolicyCurrentDeltaSum, tVrrpRtUnknEvtOperState=tVrrpRtUnknEvtOperState, tVrrpRtrMasterInetAddrType=tVrrpRtrMasterInetAddrType, tVrrpAssoBfdIntfIfName=tVrrpAssoBfdIntfIfName, tmnxVrrpOperTelnetReply=tmnxVrrpOperTelnetReply, tmnxVrrpCompliances=tmnxVrrpCompliances, tVrrpRouterAdvNotActivated=tVrrpRouterAdvNotActivated, TmnxPortDownEventOperState=TmnxPortDownEventOperState, tVrrpHstUnrchEvtOperState=tVrrpHstUnrchEvtOperState, tVrrpHstUnrchEvtHoldClear=tVrrpHstUnrchEvtHoldClear, tVrrpRtUnknEvtMaskLen=tVrrpRtUnknEvtMaskLen, tmnxVrrpHostUnreachableEventTable=tmnxVrrpHostUnreachableEventTable, tmnxVrrpObjects=tmnxVrrpObjects, TmnxLagPortDownEventOperState=TmnxLagPortDownEventOperState, tmnxVrrpPortDownEventLastTransition=tmnxVrrpPortDownEventLastTransition, tVrrpTrapNewMaster=tVrrpTrapNewMaster, tmnxVrrpRouteUnknownEventNextHop=tmnxVrrpRouteUnknownEventNextHop, tmnxVrrpPortDownEventHoldClear=tmnxVrrpPortDownEventHoldClear, tmnxVrrpBfdIntfSessStateChgd=tmnxVrrpBfdIntfSessStateChgd, tmnxVrrpRouteUnknownEventOperState=tmnxVrrpRouteUnknownEventOperState, tVrrpAssoBfdIntfTblLastChgd=tVrrpAssoBfdIntfTblLastChgd, TmnxEventHoldSet=TmnxEventHoldSet, tVrrpRtUnknEvtEntry=tVrrpRtUnknEvtEntry, tVrrpRtrMasterEntry=tVrrpRtrMasterEntry, tVrrpHstUnrchEvtIpAddr=tVrrpHstUnrchEvtIpAddr, tVrrpMasterV7v0Group=tVrrpMasterV7v0Group, tmnxVrrpPolicyGroup=tmnxVrrpPolicyGroup, tVrrpRouterAdverV7v0Group=tVrrpRouterAdverV7v0Group, tVrrpHstUnrchEvtPrevState=tVrrpHstUnrchEvtPrevState, tmnxVrrpPolicyObjects=tmnxVrrpPolicyObjects, tmnxVrrpLagPortDownEventHoldClearRemaining=tmnxVrrpLagPortDownEventHoldClearRemaining, tmnxVrrpPolicyReferenceCount=tmnxVrrpPolicyReferenceCount, tmnxVrrpAssoBfdIntfEntry=tmnxVrrpAssoBfdIntfEntry, tVrrpRtUnknEvtHoldSetRemaining=tVrrpRtUnknEvtHoldSetRemaining, tVrrpAssoBfdIntfDestIp=tVrrpAssoBfdIntfDestIp, tmnxVrrpOperInUseAdvInterval=tmnxVrrpOperInUseAdvInterval, tmnxVrrpPortDownEventRowStatus=tmnxVrrpPortDownEventRowStatus, tmnxVrrpOperV6v1Group=tmnxVrrpOperV6v1Group, tVrrpBecameBackup=tVrrpBecameBackup, tmnxVrrpPolicyDescription=tmnxVrrpPolicyDescription, tmnxVrrpStatsGroup=tmnxVrrpStatsGroup, tVrrpAssoBfdIntfSessOperState=tVrrpAssoBfdIntfSessOperState, tmnxVrrpHostUnreachableEventHoldSetRemaining=tmnxVrrpHostUnreachableEventHoldSetRemaining, tVrrpRtrMasterLastSeen=tVrrpRtrMasterLastSeen, tVrrpOpLastChgd=tVrrpOpLastChgd, tmnxVrrpOperV4v0Group=tmnxVrrpOperV4v0Group, TmnxVrrpPriority=TmnxVrrpPriority, tmnxVrrpNotifBfdIntfIfName=tmnxVrrpNotifBfdIntfIfName, tmnxVrrpAssoBfdIntfSrcIp=tmnxVrrpAssoBfdIntfSrcIp, tmnxVrrpObsoletedV9v0Group=tmnxVrrpObsoletedV9v0Group, tmnxVrrpRouteUnknownEventHoldSet=tmnxVrrpRouteUnknownEventHoldSet, tmnxVrrpOperMasterSince=tmnxVrrpOperMasterSince, tmnxVrrpLagPortDownEventSetCounter=tmnxVrrpLagPortDownEventSetCounter, tVrrpOpMasterDownTimer=tVrrpOpMasterDownTimer, tVrrpRtUnknEvtTable=tVrrpRtUnknEvtTable, tmnxVrrpAssoBfdIntfTable=tmnxVrrpAssoBfdIntfTable, tVrrpOpPolicyId=tVrrpOpPolicyId, tVrrpRtrMasterMessageCount=tVrrpRtrMasterMessageCount, tVrrpRtUnknEvtLastTransition=tVrrpRtUnknEvtLastTransition, tmnxVrrpRouterStatsTable=tmnxVrrpRouterStatsTable, tmnxVrrpPortDownEventHoldSetRemaining=tmnxVrrpPortDownEventHoldSetRemaining, tmnxVrrpPortDownEventSetCounter=tmnxVrrpPortDownEventSetCounter, tVrrpRtUnknEvtSetCounter=tVrrpRtUnknEvtSetCounter, tVrrpIPListMismatchClear=tVrrpIPListMismatchClear, tVrrpRtrMasterAuthSequence=tVrrpRtrMasterAuthSequence, tmnxVrrpPolicyDeltaInUseLimit=tmnxVrrpPolicyDeltaInUseLimit, tmnxVrrpAssoBfdIntfSessOperState=tmnxVrrpAssoBfdIntfSessOperState, tmnxVrrpStatsMasterChanges=tmnxVrrpStatsMasterChanges, tVrrpHostUnreachableV7v0Group=tVrrpHostUnreachableV7v0Group, tVrrpStatAdvIntvlDiscards=tVrrpStatAdvIntvlDiscards, tmnxVrrpLagPortDownEventHoldSet=tmnxVrrpLagPortDownEventHoldSet, tmnxVrrpLagPortDownEventTable=tmnxVrrpLagPortDownEventTable, tmnxVrrpRouterMasterEntry=tmnxVrrpRouterMasterEntry, TmnxHostUnreachableEventOperState=TmnxHostUnreachableEventOperState, tVrrpAssoBfdIntfSrcIpType=tVrrpAssoBfdIntfSrcIpType, tVrrpRtrMasterIPListMatch=tVrrpRtrMasterIPListMatch, tVrrpMultipleOwners=tVrrpMultipleOwners, tmnxVrrpHostUnreachableEventInterval=tmnxVrrpHostUnreachableEventInterval, tmnxVrrpAssoBfdIntfIfName=tmnxVrrpAssoBfdIntfIfName, tVrrpHstUnrchEvtType=tVrrpHstUnrchEvtType, tmnxVrrpOperInitTimer=tmnxVrrpOperInitTimer, tmnxVrrpHostUnreachableEventInUse=tmnxVrrpHostUnreachableEventInUse, tVrrpHstUnrchEvtHoldSetRemaining=tVrrpHstUnrchEvtHoldSetRemaining, tVrrpOpAdvIntervalInherit=tVrrpOpAdvIntervalInherit, tVrrpHstUnrchEvtHoldSet=tVrrpHstUnrchEvtHoldSet, tmnxVrrpIPListMismatch=tmnxVrrpIPListMismatch, tVrrpStatPreemptEvents=tVrrpStatPreemptEvents, tVrrpRouterAdvNotActivatedClear=tVrrpRouterAdvNotActivatedClear, tVrrpRtUnknEvtHoldClearRemaining=tVrrpRtUnknEvtHoldClearRemaining, tmnxVrrpOperAdvIntervalMilSec=tmnxVrrpOperAdvIntervalMilSec, tmnxVrrpRouteUnknownEventSetCounter=tmnxVrrpRouteUnknownEventSetCounter, tVrrpOpEntry=tVrrpOpEntry, tmnxVrrpBecameBackup=tmnxVrrpBecameBackup, tmnxVrrpRouteUnknownEventPrefix=tmnxVrrpRouteUnknownEventPrefix, tVrrpHstUnrchEvtSetCounter=tVrrpHstUnrchEvtSetCounter, tVrrpOpTblLastChgd=tVrrpOpTblLastChgd, tmnxVrrpStatsTotalDiscards=tmnxVrrpStatsTotalDiscards, tmnxVrrpHostUnreachableEventPrevState=tmnxVrrpHostUnreachableEventPrevState, tmnxVrrpOperV5v0Group=tmnxVrrpOperV5v0Group, tmnxVrrpConformance=tmnxVrrpConformance, tmnxVrrpNotifyPrefix=tmnxVrrpNotifyPrefix, tmnxVrrpRouteUnknownEventRowStatus=tmnxVrrpRouteUnknownEventRowStatus, tmnxVrrpNotificationV6v1Group=tmnxVrrpNotificationV6v1Group, tmnxVrrpPortDownEventEntry=tmnxVrrpPortDownEventEntry, tVrrpRtUnknEvtInUse=tVrrpRtUnknEvtInUse, PYSNMP_MODULE_ID=timetraVrrpMIBModule, tVrrpStatAdvertiseSent=tVrrpStatAdvertiseSent, tVrrpOpV7v0Group=tVrrpOpV7v0Group, tVrrpHstUnrchEvtPriority=tVrrpHstUnrchEvtPriority, tmnxVrrpV6v1Compliance=tmnxVrrpV6v1Compliance, tVrrpRtUnknEvtPrefixType=tVrrpRtUnknEvtPrefixType, tmnxVrrp77x0V7v0Compliance=tmnxVrrp77x0V7v0Compliance, tmnxVrrpLagPortDownEventLastTransition=tmnxVrrpLagPortDownEventLastTransition, tmnxVrrpIPListMismatchClear=tmnxVrrpIPListMismatchClear, TmnxEventHoldClear=TmnxEventHoldClear, tVrrpOpTracerouteReply=tVrrpOpTracerouteReply, tmnxVrrpLagPortDownEventHoldSetRemaining=tmnxVrrpLagPortDownEventHoldSetRemaining, tVrrpOpPingReply=tVrrpOpPingReply, tVrrpOpStandbyFwding=tVrrpOpStandbyFwding, tmnxVrrpOperVirtualMacAddr=tmnxVrrpOperVirtualMacAddr, tmnxVrrpPortDownEventTable=tmnxVrrpPortDownEventTable, tVrrpBfdV9v0Group=tVrrpBfdV9v0Group, tmnxVrrpNotifBfdIntfSvcId=tmnxVrrpNotifBfdIntfSvcId, tmnxVrrpLagPortDownEventLagId=tmnxVrrpLagPortDownEventLagId, tmnxVrrpRouterMasterMessageCount=tmnxVrrpRouterMasterMessageCount, tVrrpHstUnrchEvtAddrType=tVrrpHstUnrchEvtAddrType, tmnxVrrpAssoBfdIntfLastChgd=tmnxVrrpAssoBfdIntfLastChgd, tVrrpHstUnrchEvtIfName=tVrrpHstUnrchEvtIfName, tVrrpOpInitTimer=tVrrpOpInitTimer, tVrrpRtUnknEvtLastChgd=tVrrpRtUnknEvtLastChgd, tmnxVrrpRouteUnknownEventNextHopEntry=tmnxVrrpRouteUnknownEventNextHopEntry, tVrrpRtUnknEvtPrevState=tVrrpRtUnknEvtPrevState, tmnxVrrpNotificationObjV6v1Group=tmnxVrrpNotificationObjV6v1Group, tVrrpOpState=tVrrpOpState, tVrrpRtUnknEvtProtocol=tVrrpRtUnknEvtProtocol, tmnxVrrp7450V9v0Compliance=tmnxVrrp7450V9v0Compliance, tmnxVrrpPolicyId=tmnxVrrpPolicyId, tmnxVrrpPortDownEventHoldClearRemaining=tmnxVrrpPortDownEventHoldClearRemaining, tmnxVrrpPolicyRowStatus=tmnxVrrpPolicyRowStatus, tVrrpHstUnrchEvtTblLastChgd=tVrrpHstUnrchEvtTblLastChgd, tmnxVrrpBfdGroup=tmnxVrrpBfdGroup, tVrrpOpMasterDownInterval=tVrrpOpMasterDownInterval, tmnxVrrpHostUnreachableEventHoldClear=tmnxVrrpHostUnreachableEventHoldClear, tmnxVrrpRouteUnknownEventHoldSetRemaining=tmnxVrrpRouteUnknownEventHoldSetRemaining, tVrrpHstUnrchEvtHldClrRemain=tVrrpHstUnrchEvtHldClrRemain, tmnxVrrpOperInitDelay=tmnxVrrpOperInitDelay, tVrrpRtUnknEvtNextHop=tVrrpRtUnknEvtNextHop, tmnxVrrpV5v0Compliance=tmnxVrrpV5v0Compliance, tmnxVrrp7450V7v0Compliance=tmnxVrrp7450V7v0Compliance, tmnxVrrpRouteUnknownEventType=tmnxVrrpRouteUnknownEventType, tVrrpRtrStatisticsTable=tVrrpRtrStatisticsTable, tVrrpRtUnknEvtNextHopEntry=tVrrpRtUnknEvtNextHopEntry, tVrrpRouteUnknownV7v0Group=tVrrpRouteUnknownV7v0Group, tmnxVrrpHostUnreachableEventOperState=tmnxVrrpHostUnreachableEventOperState, tmnxVrrpStatsAdvertiseSent=tmnxVrrpStatsAdvertiseSent, tmnxVrrpPortDownEventPortId=tmnxVrrpPortDownEventPortId, tVrrpAssoBfdIntfSvcId=tVrrpAssoBfdIntfSvcId, tVrrpAssoBfdIntfTable=tVrrpAssoBfdIntfTable, tVrrpRtrMasterTable=tVrrpRtrMasterTable, tmnxVrrpHostUnreachableEventSetCounter=tmnxVrrpHostUnreachableEventSetCounter, tVrrpRtUnknEvtLessSpecific=tVrrpRtUnknEvtLessSpecific, tmnxVrrpOperPingReply=tmnxVrrpOperPingReply, tmnxVrrpPriorityEventsGroup=tmnxVrrpPriorityEventsGroup, tmnxVrrpRouteUnknownEventPrevState=tmnxVrrpRouteUnknownEventPrevState, tmnxVrrpRouterMasterTable=tmnxVrrpRouterMasterTable, tVrrpOpOwner=tVrrpOpOwner, tmnxVrrpRouterStatsEntry=tmnxVrrpRouterStatsEntry, tVrrpRtUnknEvtPriority=tVrrpRtUnknEvtPriority, tmnxVrrpNotifBfdIntfSessState=tmnxVrrpNotifBfdIntfSessState, tVrrpRtUnknEvtNextHopLastChgd=tVrrpRtUnknEvtNextHopLastChgd, tVrrpRtUnknEvtNextHopType=tVrrpRtUnknEvtNextHopType, tVrrpAssoBfdIntfLastChgd=tVrrpAssoBfdIntfLastChgd, tmnxVrrpLagNumberDown=tmnxVrrpLagNumberDown, tmnxVrrpPolicyEntry=tmnxVrrpPolicyEntry, tVrrpRtUnknEvtNextHopIfName=tVrrpRtUnknEvtNextHopIfName, tmnxVrrpRouteUnknownEventHoldClearRemaining=tmnxVrrpRouteUnknownEventHoldClearRemaining, tmnxVrrpOperMasterPriority=tmnxVrrpOperMasterPriority, tVrrpRtUnknEvtPrefix=tVrrpRtUnknEvtPrefix, tVrrpOpInitDelay=tVrrpOpInitDelay, tVrrpNotificationV7v0Group=tVrrpNotificationV7v0Group, tmnxVrrpHostUnreachableEventPriority=tmnxVrrpHostUnreachableEventPriority, tVrrpRtUnknEvtDefaultAllowed=tVrrpRtUnknEvtDefaultAllowed, tmnxVrrpOperTracerouteReply=tmnxVrrpOperTracerouteReply, tmnxVrrpRouteUnknownEventDefaultAllowed=tmnxVrrpRouteUnknownEventDefaultAllowed, tmnxVrrpHostUnreachableEventTimeout=tmnxVrrpHostUnreachableEventTimeout, tVrrpRtUnknEvtNextHopTable=tVrrpRtUnknEvtNextHopTable, tVrrpAssoBfdIntfSrcIp=tVrrpAssoBfdIntfSrcIp, tVrrpAssoBfdIntfRowStatus=tVrrpAssoBfdIntfRowStatus, tmnxVrrpOperEntry=tmnxVrrpOperEntry, tmnxVrrpOperState=tmnxVrrpOperState, tmnxVrrpStatsPreemptEvents=tmnxVrrpStatsPreemptEvents, tVrrpStatPreemptedEvents=tVrrpStatPreemptedEvents, tmnxVrrpOperMasterDownInterval=tmnxVrrpOperMasterDownInterval, tmnxVrrpAssoBfdIntfDestIp=tmnxVrrpAssoBfdIntfDestIp, tmnxVrrpOperOwner=tmnxVrrpOperOwner, tVrrpOpVirtualMacAddr=tVrrpOpVirtualMacAddr, tVrrpRtUnknEvtTblLastChgd=tVrrpRtUnknEvtTblLastChgd, tmnxVrrpMultipleOwners=tmnxVrrpMultipleOwners, tmnxVrrpRouterMasterLastSeen=tmnxVrrpRouterMasterLastSeen, TmnxVrrpAssoBfdIntfSessOperState=TmnxVrrpAssoBfdIntfSessOperState, tVrrpRtUnknEvtHoldSet=tVrrpRtUnknEvtHoldSet, tmnxVrrpLagPortDownEventOperState=tmnxVrrpLagPortDownEventOperState, tmnxVrrpPortDownEventOperState=tmnxVrrpPortDownEventOperState, tVrrpHstUnrchEvtTable=tVrrpHstUnrchEvtTable, tmnxVrrpAssoBfdIntfDestIpType=tmnxVrrpAssoBfdIntfDestIpType, tVrrpOpInUsePriority=tVrrpOpInUsePriority, tmnxVrrpRouteUnknownEventTable=tmnxVrrpRouteUnknownEventTable, tVrrpHstUnrchEvtLastChgd=tVrrpHstUnrchEvtLastChgd, tmnxVrrpRouteUnknownEventPriority=tmnxVrrpRouteUnknownEventPriority, tmnxVrrpGroups=tmnxVrrpGroups, tmnxVrrpPortDownEventHoldSet=tmnxVrrpPortDownEventHoldSet, tVrrpStatMasterChanges=tVrrpStatMasterChanges, tmnxVrrpAssoBfdIntfSrcIpType=tmnxVrrpAssoBfdIntfSrcIpType, tVrrpRtUnknEvtHoldClear=tVrrpRtUnknEvtHoldClear, tmnxVrrpRouteUnknownEventHoldClear=tmnxVrrpRouteUnknownEventHoldClear, tmnxVrrpStatsAdvertiseIntervalDiscards=tmnxVrrpStatsAdvertiseIntervalDiscards, tmnxVrrpHostUnreachableEventEntry=tmnxVrrpHostUnreachableEventEntry, tmnxVrrpOperInUseAdvIntlMilSec=tmnxVrrpOperInUseAdvIntlMilSec, tVrrpAssoBfdIntfDestIpType=tVrrpAssoBfdIntfDestIpType, TmnxRouteUnknownEventOperState=TmnxRouteUnknownEventOperState)
mibBuilder.exportSymbols("TIMETRA-VRRP-MIB", tmnxVrrpHostUnreachableEventHoldSet=tmnxVrrpHostUnreachableEventHoldSet, tmnxVrrpAssoBfdIntfRowStatus=tmnxVrrpAssoBfdIntfRowStatus, tmnxVrrpOperPolicyId=tmnxVrrpOperPolicyId, tVrrpAssoBfdIntfEntry=tVrrpAssoBfdIntfEntry, tVrrpHstUnrchEvtTimeout=tVrrpHstUnrchEvtTimeout, tVrrpStatTotalDiscards=tVrrpStatTotalDiscards, tmnxVrrpOperMismatchDiscard=tmnxVrrpOperMismatchDiscard, tVrrpOpMasterPriority=tVrrpOpMasterPriority, tmnxVrrpHostUnreachableEventHoldClearRemaining=tmnxVrrpHostUnreachableEventHoldClearRemaining, tmnxVrrpLagNumberDownEventEntry=tmnxVrrpLagNumberDownEventEntry, tmnxVrrpStatsAddressListDiscards=tmnxVrrpStatsAddressListDiscards, tmnxVrrpRouteUnknownEventLastTransition=tmnxVrrpRouteUnknownEventLastTransition, tVrrpOpMasterSince=tVrrpOpMasterSince, tVrrpRtrMasterPrimaryAddr=tVrrpRtrMasterPrimaryAddr, tmnxVrrpPolicyCurrentExplicit=tmnxVrrpPolicyCurrentExplicit, tVrrpAssoBfdIntfVrIdIpType=tVrrpAssoBfdIntfVrIdIpType, tmnxVrrpAssoBfdIntfTblLastChgd=tmnxVrrpAssoBfdIntfTblLastChgd, tmnxVrrpHostUnreachableEventLastTransition=tmnxVrrpHostUnreachableEventLastTransition, tVrrpRtUnknEvtType=tVrrpRtUnknEvtType, tmnxVrrpRouteUnknownEventProtocol=tmnxVrrpRouteUnknownEventProtocol, tVrrpIpv6RouterAdvertUseVirtualMac=tVrrpIpv6RouterAdvertUseVirtualMac, tmnxVrrpRouteUnknownEventLessSpecific=tmnxVrrpRouteUnknownEventLessSpecific, tmnxVrrpRouterMasterIPListMatch=tmnxVrrpRouterMasterIPListMatch, tmnxVrrpLagNumberDownEventPriority=tmnxVrrpLagNumberDownEventPriority, tmnxVrrpPortDownEventPriority=tmnxVrrpPortDownEventPriority, tmnxVrrpStatsPreemptedEvents=tmnxVrrpStatsPreemptedEvents, tmnxVrrpRouterMasterPrimaryAddr=tmnxVrrpRouterMasterPrimaryAddr, tVrrpIPListMismatch=tVrrpIPListMismatch, tVrrpHstUnrchEvtLastTransition=tVrrpHstUnrchEvtLastTransition, tVrrpHstUnrchEvtRowStatus=tVrrpHstUnrchEvtRowStatus, tmnxVrrpPortDownEventPrevState=tmnxVrrpPortDownEventPrevState, tmnxVrrpNotifBfdIntfDestIp=tmnxVrrpNotifBfdIntfDestIp, tmnxVrrpLagPortDownEventPrevState=tmnxVrrpLagPortDownEventPrevState, tmnxVrrpLagNumberDownEventTable=tmnxVrrpLagNumberDownEventTable, tmnxVrrpNotifBfdIntfDestIpType=tmnxVrrpNotifBfdIntfDestIpType, tVrrpOpOperDownReason=tVrrpOpOperDownReason, tmnxVrrpHostUnreachableEventIpAddr=tmnxVrrpHostUnreachableEventIpAddr, tVrrpHstUnrchEvtDropCount=tVrrpHstUnrchEvtDropCount, tmnxVrrp77x0V9v0Compliance=tmnxVrrp77x0V9v0Compliance, tmnxVrrpLagNumberDownEventRowStatus=tmnxVrrpLagNumberDownEventRowStatus, tmnxVrrpRouterMasterAuthSequence=tmnxVrrpRouterMasterAuthSequence, tmnxVrrpPolicySvcContext=tmnxVrrpPolicySvcContext, tmnxVrrpHostUnreachableEventRowStatus=tmnxVrrpHostUnreachableEventRowStatus, tmnxVrrpHostUnreachableEventType=tmnxVrrpHostUnreachableEventType, tVrrpRtUnknEvtNextHopTblLastChgd=tVrrpRtUnknEvtNextHopTblLastChgd, tmnxVrrpHostUnreachableEventDropCount=tmnxVrrpHostUnreachableEventDropCount, tmnxVrrpNotificationGroup=tmnxVrrpNotificationGroup, tVrrpHstUnrchEvtEntry=tVrrpHstUnrchEvtEntry, tmnxVrrpOperSshReply=tmnxVrrpOperSshReply, tmnxVrrpLagPortDownEventInUse=tmnxVrrpLagPortDownEventInUse, tVrrpOpTable=tVrrpOpTable, tmnxVrrpNotificationObjects=tmnxVrrpNotificationObjects, tmnxVrrpPortDownEventInUse=tmnxVrrpPortDownEventInUse, tVrrpRtrStatisticsEntry=tVrrpRtrStatisticsEntry)
