#
# PySNMP MIB module CISCO-SP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-SP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:12:41 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint")
ciscoExperiment, = mibBuilder.importSymbols("CISCO-SMI", "ciscoExperiment")
InterfaceIndexOrZero, = mibBuilder.importSymbols("CISCO-TC", "InterfaceIndexOrZero")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
iso, Counter64, Unsigned32, Integer32, Bits, IpAddress, MibIdentifier, Gauge32, ModuleIdentity, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Counter32, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "Counter64", "Unsigned32", "Integer32", "Bits", "IpAddress", "MibIdentifier", "Gauge32", "ModuleIdentity", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Counter32", "ObjectIdentity")
TextualConvention, TimeStamp, DisplayString, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TimeStamp", "DisplayString", "TruthValue")
ciscoSpMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 10, 73))
ciscoSpMIB.setRevisions(('2006-01-16 00:00', '2001-06-07 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoSpMIB.setRevisionsDescriptions(('The CISCO-SP-MIB is obsolete and has been replaced by the combination of the CISCO-ITP-TC-MIB and CISCO-ITP-GSP-MIB. Updated the mib to import Unsigned32 from SNMPv2-SMI instead of CISCO-TC. Modified the syntax of CSpRouteTableName and CSpLinksetId to OCTET STRING. Changed the order of objects in cSpAccountingTableEntry SEQUENCE. Added the notification group ciscoSpNotificationsGroup and included it in the MODULE-COMPLIANCE as optional.', 'Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoSpMIB.setLastUpdated('200601160000Z')
if mibBuilder.loadTexts: ciscoSpMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoSpMIB.setContactInfo(' Cisco Systems, Inc Customer Service Postal: 170 W. Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-ss7@cisco.com')
if mibBuilder.loadTexts: ciscoSpMIB.setDescription("The MIB for managing the SS7 Signalling Point (SP) implemented in the Cisco IOS SS7 offload product. The relevant ITU documents describing this technology is the ITU Q series, including ITU Q.700: Introduction to CCITT Signalling System No. 7 and ITU Q.701 Functional description of the message transfer part (MTP) of Signalling System No. 7. This MIB models the SP as follows: The SP is associated with one or more point codes. Each pointcode is associated with: an ss7 variant, timers, and linksets. Linksets contain: destination point code linkset byte/packet statistics, accounting information per DPC and OPC violation accounting information per DPC and OPC links, reference to incoming and outgoing ACL reference to a routing table for each SS7 packet type Links contain: timers, and byte/packet statistics. The figure below provides a diagrammatic representation of the relationships. Each box may be replicated providing multiple instances of the object. '--->' indicates that the object to the left contains a reference to the object to the right. '###>' indicates that the object to the left contains an instance of the object to the right. The down arrow indicates that the object being pointed to contains snmp indices of the objects above it. ________________ | | | Sp |###> point code, timers |________________| | V ________________ | | | |---> Accounting | Linkset |---> Violation Accounting | |---> Incoming ACL | |---> Outgoing ACL |________________|---> Routing Tables. | V ________________ | Link |###> timers |________________|---> statistics ")
ciscoSpMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 73, 1))
cSpScalars = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 1))
cSpLinkset = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 2))
cSpLink = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 3))
cSpRoute = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 4))
cSpAccessControlList = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 5))
cSpAccounting = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 6))
cSpNotificationsEnable = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 7))
class CSpPointCode(TextualConvention, Unsigned32):
    description = 'The SS7 network node address as specified in the International Telecommunication Union standard Q.708: Specifications of Signalling System No. 7 - Numbering of International Signalling Point Codes, and by ANSI T1.111.8 Numbering of Signalling Point Codes.'
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 16777216)

class CSpSs7Variant(TextualConvention, Integer32):
    description = "The list of SS7 variants. 'ANSI' : The ANSI variant of the SS7 specification. 'ITU' : The ITU variant of the SS7 specification."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("ansi", 1), ("itu", 2))

class CSpLinkType(TextualConvention, Integer32):
    description = "The link types. 'other' : This link is of some type not listed below. 'serial' : This link is an serial link transporting SS7 traffic. 'sctpIp' : This a SCTP/IP link."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("other", 1), ("serial", 2), ("sctpIp", 3))

class CSpLinkSLC(TextualConvention, Unsigned32):
    description = 'The Signalling Link Code. This is the link identifier within a linkset.'
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 15)

class CSpLinksetId(TextualConvention, OctetString):
    description = 'The configured name associated with an Sp Linkset.'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(1, 19)

class CSpAclAction(TextualConvention, Integer32):
    description = "The list of possible actions to be performed on a packet who's point code matches an access control. 'accept' : The matching packet is accepted for further processing. 'discard' : The matching packet is to be discarded without any further processing on this packet."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("accept", 1), ("discard", 2))

class CSpOsiState(TextualConvention, Integer32):
    description = "The list of possible link/linkset statuses. 'active' : Traffic may flow over this link/linkset 'inactive' : Traffic cannot flow over this link/linkset. 'inhibited' : Traffic cannot flow over this link/linkset. This state was reached as a result of administrative action. 'uninhibited': The link/linkset is available at the MTP3 layer. 'shut ': The link/linkset has been forced to an unavailable state by an administrative action. 'noshut ': The link/linkset has been removed from an unavailable state by an administrative action."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("active", 1), ("inactive", 2), ("inhibited", 3), ("uninhibited", 4), ("shut", 5), ("noshut", 6))

class CSpAclId(TextualConvention, Unsigned32):
    description = 'An numeric Identifier used to specify and access list used to permit and deny packets based on MTP3 information.'
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 2999)

class CSpRouteTableName(TextualConvention, OctetString):
    description = 'The configured name associated with an SP Route Table.'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(1, 19)

class CSpAclSi(TextualConvention, Unsigned32):
    description = 'The list of possible Service Indicator values. This identifies the type of SS7 packet. The service indicator codes for the international signalling network are allocated as follows: 0 Signalling network management messages (SNMM) 1 Signalling network testing and maintenance messages (SNTM) 2 Spare 2 3 SCCP 4 Telephone User Part (TUP) 5 ISDN User Part (ISUP) 6 Data User Part, call and circuit-related messages (DUPC) 7 Data User Part, facility registration and cancellation messages (DUPF) 8 Reserved for MTP Testing User Part (MTUP) 9 Broadband ISDN User Part (BISUP) 10 Satellite ISDN User Part (SISUP) 11 Spare 12 Spare 13 Spare 14 Spare 15 Spare Reference: ITU Q.704 Signalling network functions and messages section 14.2.1 Service indicator. '
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 15)

class CSpRouteStatus(TextualConvention, Integer32):
    description = "The status of the route from the perspective of the SP. 'available' : Route is available for routing of packets. 'restricted' : Route has been restricted from routing. 'unavailable' : Route is unavailable for routing of packets."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("available", 1), ("restricted", 2), ("unavailable", 3))

cSpSs7Variant = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 1, 1), CSpSs7Variant()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpSs7Variant.setStatus('current')
if mibBuilder.loadTexts: cSpSs7Variant.setDescription('The SS7 variant implemented in this SP.')
cSpPointCode = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 1, 2), CSpPointCode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpPointCode.setStatus('current')
if mibBuilder.loadTexts: cSpPointCode.setDescription('The point code for this SP.')
cSpMtp2T01 = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 1, 3), Unsigned32()).setUnits('milli-seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpMtp2T01.setReference('ITU Q.703 Signalling Link. ANSI T1.111.3 Telecommunications - Signaling system No. 7 (SS7)-Message Transfer Part (MTP).')
if mibBuilder.loadTexts: cSpMtp2T01.setStatus('current')
if mibBuilder.loadTexts: cSpMtp2T01.setDescription('Alignment ready timer. The default and valid range is dependant on the value of cSpSs7Variant. The ranges are defined in the following references.')
cSpMtp2T02 = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 1, 4), Unsigned32()).setUnits('100 milli-seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpMtp2T02.setReference('ITU Q.703 Signalling Link. ANSI T1.111.3 Telecommunications - Signaling system No. 7 (SS7)-Message Transfer Part (MTP).')
if mibBuilder.loadTexts: cSpMtp2T02.setStatus('current')
if mibBuilder.loadTexts: cSpMtp2T02.setDescription('Not aligned timer. The default and valid range is dependant on the value of cSpSs7Variant. The ranges are defined in the following references. This timer is only applicable if cSpLinkType is serial. A get on this object will return a zero if cSpLinkType is not serial.')
cSpMtp2T03 = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 1, 5), Unsigned32()).setUnits('milli-seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpMtp2T03.setReference('ITU Q.703 Signalling Link. ANSI T1.111.3 Telecommunications - Signaling system No. 7 (SS7)-Message Transfer Part (MTP).')
if mibBuilder.loadTexts: cSpMtp2T03.setStatus('current')
if mibBuilder.loadTexts: cSpMtp2T03.setDescription('Aligned timer. The default and valid range is dependant on the value of cSpSs7Variant. The ranges are defined in the following references.')
cSpMtp2T4N = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 1, 6), Unsigned32()).setUnits('milli-seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpMtp2T4N.setReference('ITU Q.703 Signalling Link. ANSI T1.111.3 Telecommunications - Signaling system No. 7 (SS7)-Message Transfer Part (MTP).')
if mibBuilder.loadTexts: cSpMtp2T4N.setStatus('current')
if mibBuilder.loadTexts: cSpMtp2T4N.setDescription('Proving period timer normal timer. The default and valid range is dependant on the value of cSpSs7Variant. The ranges are defined in the following references. ')
cSpMtp2T4E = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 1, 7), Unsigned32()).setUnits('milli-seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpMtp2T4E.setReference('ITU Q.703 Signalling Link. ANSI T1.111.3 Telecommunications - Signaling system No. 7 (SS7)-Message Transfer Part (MTP).')
if mibBuilder.loadTexts: cSpMtp2T4E.setStatus('current')
if mibBuilder.loadTexts: cSpMtp2T4E.setDescription('Proving period timer emergency timer. The default and valid range is dependant on the value of cSpSs7Variant. The ranges are defined in the following references.')
cSpMtp2T05 = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 1, 8), Unsigned32()).setUnits('milli-seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpMtp2T05.setReference('ITU Q.703 Signalling Link. ANSI T1.111.3 Telecommunications - Signaling system No. 7 (SS7)-Message Transfer Part (MTP).')
if mibBuilder.loadTexts: cSpMtp2T05.setStatus('current')
if mibBuilder.loadTexts: cSpMtp2T05.setDescription('Sending SIB timer. The default and valid range is dependant on the value of cSpSs7Variant. The ranges are defined in the following references.')
cSpMtp2T06 = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 1, 9), Unsigned32()).setUnits('milli-seconds.').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpMtp2T06.setReference('ITU Q.703 Signalling Link. ANSI T1.111.3 Telecommunications - Signaling system No. 7 (SS7)-Message Transfer Part (MTP).')
if mibBuilder.loadTexts: cSpMtp2T06.setStatus('current')
if mibBuilder.loadTexts: cSpMtp2T06.setDescription('Remote congestion timer. The default and valid range is dependant on the value of cSpSs7Variant. The ranges are defined in the following references.')
cSpMtp2T07 = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 1, 10), Unsigned32()).setUnits('milli-seconds.').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpMtp2T07.setReference('ITU Q.703 Signalling Link. ANSI T1.111.3 Telecommunications - Signaling system No. 7 (SS7)-Message Transfer Part (MTP).')
if mibBuilder.loadTexts: cSpMtp2T07.setStatus('current')
if mibBuilder.loadTexts: cSpMtp2T07.setDescription('Excessive delay of acknowledgement timer. The default and valid range is dependant on the value of cSpSs7Variant. The ranges are defined in the following references.')
cSpMtp2T08 = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpMtp2T08.setReference('ITU Q.703 Signalling Link. ANSI T1.111.3 Telecommunications - Signaling system No. 7 (SS7)-Message Transfer Part (MTP).')
if mibBuilder.loadTexts: cSpMtp2T08.setStatus('current')
if mibBuilder.loadTexts: cSpMtp2T08.setDescription('Interval timer for error interval monitor.')
cSpMtp3T01 = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpMtp3T01.setReference('ITU Q.704 Signalling network functions and messages. ANSI T1.111 Telecommunications - Signaling system No. 7 (SS7)-Message Transfer Part (MTP).')
if mibBuilder.loadTexts: cSpMtp3T01.setStatus('current')
if mibBuilder.loadTexts: cSpMtp3T01.setDescription('Delay to avoid message mis-sequencing on changeover.')
cSpMtp3T02 = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpMtp3T02.setReference('ITU Q.704 Signalling network functions and messages. ANSI T1.111 Telecommunications - Signaling system No. 7 (SS7)-Message Transfer Part (MTP).')
if mibBuilder.loadTexts: cSpMtp3T02.setStatus('current')
if mibBuilder.loadTexts: cSpMtp3T02.setDescription('Waiting for changeover acknowledgement.')
cSpMtp3T03 = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpMtp3T03.setReference('ITU Q.704 Signalling network functions and messages. ANSI T1.111 Telecommunications - Signaling system No. 7 (SS7)-Message Transfer Part (MTP).')
if mibBuilder.loadTexts: cSpMtp3T03.setStatus('current')
if mibBuilder.loadTexts: cSpMtp3T03.setDescription('Time controlled diversion-delay to avoid mis-sequencing on change back.')
cSpMtp3T04 = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpMtp3T04.setReference('ITU Q.704 Signalling network functions and messages. ANSI T1.111 Telecommunications - Signaling system No. 7 (SS7)-Message Transfer Part (MTP).')
if mibBuilder.loadTexts: cSpMtp3T04.setStatus('current')
if mibBuilder.loadTexts: cSpMtp3T04.setDescription('Waiting for change back acknowledgement (first attempt).')
cSpMtp3T05 = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpMtp3T05.setReference('ITU Q.704 Signalling network functions and messages. ANSI T1.111 Telecommunications - Signaling system No. 7 (SS7)-Message Transfer Part (MTP).')
if mibBuilder.loadTexts: cSpMtp3T05.setStatus('current')
if mibBuilder.loadTexts: cSpMtp3T05.setDescription('Waiting for change back acknowledgement (second attempt).')
cSpMtp3T06 = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 1, 17), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpMtp3T06.setReference('ITU Q.704 Signalling network functions and messages. ANSI T1.111 Telecommunications - Signaling system No. 7 (SS7)-Message Transfer Part (MTP).')
if mibBuilder.loadTexts: cSpMtp3T06.setStatus('current')
if mibBuilder.loadTexts: cSpMtp3T06.setDescription('Delay to avoid message mis-sequencing on controlled rerouting.')
cSpMtp3T07 = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 1, 18), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpMtp3T07.setReference('ITU Q.704 Signalling network functions and messages. ANSI T1.111 Telecommunications - Signaling system No. 7 (SS7)-Message Transfer Part (MTP).')
if mibBuilder.loadTexts: cSpMtp3T07.setStatus('current')
if mibBuilder.loadTexts: cSpMtp3T07.setDescription('Waiting for signalling data link connection acknowledgement.')
cSpMtp3T08 = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 1, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpMtp3T08.setReference('ITU Q.704 Signalling network functions and messages. ANSI T1.111 Telecommunications - Signaling system No. 7 (SS7)-Message Transfer Part (MTP).')
if mibBuilder.loadTexts: cSpMtp3T08.setStatus('current')
if mibBuilder.loadTexts: cSpMtp3T08.setDescription('Transfer prohibited inhibition timer (transient solution).')
cSpMtp3T10 = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 1, 20), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpMtp3T10.setReference('ITU Q.704 Signalling network functions and messages. ANSI T1.111 Telecommunications - Signaling system No. 7 (SS7)-Message Transfer Part (MTP).')
if mibBuilder.loadTexts: cSpMtp3T10.setStatus('current')
if mibBuilder.loadTexts: cSpMtp3T10.setDescription('Waiting to repeat signalling routeset test message.')
cSpMtp3T11 = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 1, 21), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpMtp3T11.setReference('ITU Q.704 Signalling network functions and messages. ANSI T1.111 Telecommunications - Signaling system No. 7 (SS7)-Message Transfer Part (MTP).')
if mibBuilder.loadTexts: cSpMtp3T11.setStatus('current')
if mibBuilder.loadTexts: cSpMtp3T11.setDescription('Transfer restricted timer. (This is one way of implementing the function described in 13.4/Q.704 and mainly intended to simplify SPs.).')
cSpMtp3T12 = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 1, 22), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpMtp3T12.setReference('ITU Q.704 Signalling network functions and messages. ANSI T1.111 Telecommunications - Signaling system No. 7 (SS7)-Message Transfer Part (MTP).')
if mibBuilder.loadTexts: cSpMtp3T12.setStatus('current')
if mibBuilder.loadTexts: cSpMtp3T12.setDescription('Waiting for uninhibit acknowledgement.')
cSpMtp3T13 = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 1, 23), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpMtp3T13.setReference('ITU Q.704 Signalling network functions and messages. ANSI T1.111 Telecommunications - Signaling system No. 7 (SS7)-Message Transfer Part (MTP).')
if mibBuilder.loadTexts: cSpMtp3T13.setStatus('current')
if mibBuilder.loadTexts: cSpMtp3T13.setDescription('Waiting for force uninhibit.')
cSpMtp3T14 = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 1, 24), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpMtp3T14.setReference('ITU Q.704 Signalling network functions and messages. ANSI T1.111 Telecommunications - Signaling system No. 7 (SS7)-Message Transfer Part (MTP).')
if mibBuilder.loadTexts: cSpMtp3T14.setStatus('current')
if mibBuilder.loadTexts: cSpMtp3T14.setDescription('Waiting for inhibition acknowledgement.')
cSpMtp3T15 = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 1, 25), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpMtp3T15.setReference('ITU Q.704 Signalling network functions and messages. ANSI T1.111 Telecommunications - Signaling system No. 7 (SS7)-Message Transfer Part (MTP).')
if mibBuilder.loadTexts: cSpMtp3T15.setStatus('current')
if mibBuilder.loadTexts: cSpMtp3T15.setDescription('Waiting to start signalling routeset congestion test.')
cSpMtp3T16 = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 1, 26), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpMtp3T16.setReference('ITU Q.704 Signalling network functions and messages. ANSI T1.111 Telecommunications - Signaling system No. 7 (SS7)-Message Transfer Part (MTP).')
if mibBuilder.loadTexts: cSpMtp3T16.setStatus('current')
if mibBuilder.loadTexts: cSpMtp3T16.setDescription('Waiting for routeset congestion status update.')
cSpMtp3T17 = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 1, 27), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpMtp3T17.setReference('ITU Q.704 Signalling network functions and messages. ANSI T1.111 Telecommunications - Signaling system No. 7 (SS7)-Message Transfer Part (MTP).')
if mibBuilder.loadTexts: cSpMtp3T17.setStatus('current')
if mibBuilder.loadTexts: cSpMtp3T17.setDescription('Delay to avoid oscillation of initial alignment failure and link restart.')
cSpMtp3T18 = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 1, 28), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpMtp3T18.setReference('ITU Q.704 Signalling network functions and messages. ANSI T1.111 Telecommunications - Signaling system No. 7 (SS7)-Message Transfer Part (MTP).')
if mibBuilder.loadTexts: cSpMtp3T18.setStatus('current')
if mibBuilder.loadTexts: cSpMtp3T18.setDescription('Timer within a signalling point whose MTP restarts, for supervising link and linkset activation as well as the receipt of routing information.')
cSpMtp3T19 = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 1, 29), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpMtp3T19.setReference('ITU Q.704 Signalling network functions and messages. ANSI T1.111 Telecommunications - Signaling system No. 7 (SS7)-Message Transfer Part (MTP).')
if mibBuilder.loadTexts: cSpMtp3T19.setStatus('current')
if mibBuilder.loadTexts: cSpMtp3T19.setDescription('Supervision timer during MTP restart to avoid possible ping-pong of TFP, TFR2) and TRA messages.')
cSpMtp3T20 = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 1, 30), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpMtp3T20.setReference('ITU Q.704 Signalling network functions and messages. ANSI T1.111 Telecommunications - Signaling system No. 7 (SS7)-Message Transfer Part (MTP).')
if mibBuilder.loadTexts: cSpMtp3T20.setStatus('current')
if mibBuilder.loadTexts: cSpMtp3T20.setDescription('Overall MTP restart timer at the signalling point whose MTP restarts. Overall MTP restart timer at a signalling point adjacent to one whose MTP restarts.')
cSpMtp3T21 = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 1, 31), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpMtp3T21.setReference('ITU Q.704 Signalling network functions and messages. ANSI T1.111 Telecommunications - Signaling system No. 7 (SS7)-Message Transfer Part (MTP).')
if mibBuilder.loadTexts: cSpMtp3T21.setStatus('current')
if mibBuilder.loadTexts: cSpMtp3T21.setDescription('Overall MTP restart timer at a signalling point adjacent to one whose MTP restarts.')
cSpMtp3T22 = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 1, 32), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpMtp3T22.setReference('ITU Q.704 Signalling network functions and messages. ANSI T1.111 Telecommunications - Signaling system No. 7 (SS7)-Message Transfer Part (MTP).')
if mibBuilder.loadTexts: cSpMtp3T22.setStatus('current')
if mibBuilder.loadTexts: cSpMtp3T22.setDescription('Local inhibit test timer.')
cSpMtp3T23 = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 1, 33), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpMtp3T23.setReference('ITU Q.704 Signalling network functions and messages. ANSI T1.111 Telecommunications - Signaling system No. 7 (SS7)-Message Transfer Part (MTP).')
if mibBuilder.loadTexts: cSpMtp3T23.setStatus('current')
if mibBuilder.loadTexts: cSpMtp3T23.setDescription('Remote inhibit test timer.')
cSpMtp3T24 = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 1, 34), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpMtp3T24.setReference('ITU Q.704 Signalling network functions and messages. ANSI T1.111 Telecommunications - Signaling system No. 7 (SS7)-Message Transfer Part (MTP).')
if mibBuilder.loadTexts: cSpMtp3T24.setStatus('current')
if mibBuilder.loadTexts: cSpMtp3T24.setDescription('Stabilizing timer after removal of local processor outage, used in LPO latching to RPO (national option)')
cSpMtp3T25 = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 1, 35), Unsigned32()).setUnits('seconds.').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpMtp3T25.setReference('ANSI T1.111 Telecommunications - Signaling system No. 7 (SS7)-Message Transfer Part (MTP)')
if mibBuilder.loadTexts: cSpMtp3T25.setStatus('current')
if mibBuilder.loadTexts: cSpMtp3T25.setDescription('Timer at Signalling Point (SP) adjacent to restarting SP, waiting for traffic restart allowed message.')
cSpMtp3T26 = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 1, 36), Unsigned32()).setUnits('seconds.').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpMtp3T26.setReference('ANSI T1.111 Telecommunications - Signaling system No. 7 (SS7)-Message Transfer Part (MTP)')
if mibBuilder.loadTexts: cSpMtp3T26.setStatus('current')
if mibBuilder.loadTexts: cSpMtp3T26.setDescription('Timer at restarting SP waiting to repeat traffic restart waiting message.')
cSpMtp3T27 = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 1, 37), Unsigned32()).setUnits('seconds.').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpMtp3T27.setReference('ANSI T1.111 Telecommunications - Signaling system No. 7 (SS7)-Message Transfer Part (MTP)')
if mibBuilder.loadTexts: cSpMtp3T27.setStatus('current')
if mibBuilder.loadTexts: cSpMtp3T27.setDescription('Minimum duration of unavailability for full restart.')
cSpMtp3T28 = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 1, 38), Unsigned32()).setUnits('seconds.').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpMtp3T28.setReference('ANSI T1.111 Telecommunications - Signaling system No. 7 (SS7)-Message Transfer Part (MTP)')
if mibBuilder.loadTexts: cSpMtp3T28.setStatus('current')
if mibBuilder.loadTexts: cSpMtp3T28.setDescription('Timer at SP adjacent to restarting SP waiting for traffic restart waiting message.')
cSpMtp3T29 = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 1, 39), Unsigned32()).setUnits('seconds.').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpMtp3T29.setReference('ANSI T1.111 Telecommunications - Signaling system No. 7 (SS7)-Message Transfer Part (MTP)')
if mibBuilder.loadTexts: cSpMtp3T29.setStatus('current')
if mibBuilder.loadTexts: cSpMtp3T29.setDescription('Timer started when TRA sent in response to unexpected TRA or TRW.')
cSpMtp3T30 = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 1, 40), Unsigned32()).setUnits('seconds.').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpMtp3T30.setReference('ANSI T1.111 Telecommunications - Signaling system No. 7 (SS7)-Message Transfer Part (MTP)')
if mibBuilder.loadTexts: cSpMtp3T30.setStatus('current')
if mibBuilder.loadTexts: cSpMtp3T30.setDescription('Timer to limit sending of TFPs and TFRs in response to unexpected TRA or TRW.')
cSpMtp3T31 = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 1, 41), Unsigned32()).setUnits('seconds.').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpMtp3T31.setReference('ANSI T1.111 Telecommunications - Signaling system No. 7 (SS7)-Message Transfer Part (MTP)')
if mibBuilder.loadTexts: cSpMtp3T31.setStatus('current')
if mibBuilder.loadTexts: cSpMtp3T31.setDescription('False link congestion detection timer.')
cSpMtp3T32 = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 1, 42), Unsigned32()).setUnits('seconds.').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpMtp3T32.setReference('ANSI T1.111 Telecommunications - Signaling system No. 7 (SS7)-Message Transfer Part (MTP)')
if mibBuilder.loadTexts: cSpMtp3T32.setStatus('current')
if mibBuilder.loadTexts: cSpMtp3T32.setDescription('Link oscillation timer - Procedure A.')
cSpMtp3T33 = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 1, 43), Unsigned32()).setUnits('seconds.').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpMtp3T33.setReference('ANSI T1.111 Telecommunications - Signaling system No. 7 (SS7)-Message Transfer Part (MTP)')
if mibBuilder.loadTexts: cSpMtp3T33.setStatus('current')
if mibBuilder.loadTexts: cSpMtp3T33.setDescription('Probation timer for link oscillation - Procedure B.')
cSpMtp3T34 = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 1, 44), Unsigned32()).setUnits('seconds.').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpMtp3T34.setReference('ANSI T1.111 Telecommunications - Signaling system No. 7 (SS7)-Message Transfer Part (MTP)')
if mibBuilder.loadTexts: cSpMtp3T34.setStatus('current')
if mibBuilder.loadTexts: cSpMtp3T34.setDescription('Suspension timer for link oscillation - Procedure B.')
cSpLinksetTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 2, 1), )
if mibBuilder.loadTexts: cSpLinksetTable.setStatus('current')
if mibBuilder.loadTexts: cSpLinksetTable.setDescription('A table of linksets for this SP. ')
cSpLinksetTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 2, 1, 1), ).setIndexNames((0, "CISCO-SP-MIB", "cSpLinksetName"))
if mibBuilder.loadTexts: cSpLinksetTableEntry.setStatus('current')
if mibBuilder.loadTexts: cSpLinksetTableEntry.setDescription('A list of SP linkset attributes for a particular SP entity.')
cSpLinksetName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 2, 1, 1, 1), CSpLinksetId())
if mibBuilder.loadTexts: cSpLinksetName.setStatus('current')
if mibBuilder.loadTexts: cSpLinksetName.setDescription('The name of the linkset.')
cSpLinksetAdjacentPointCode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 2, 1, 1, 2), CSpPointCode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinksetAdjacentPointCode.setStatus('current')
if mibBuilder.loadTexts: cSpLinksetAdjacentPointCode.setDescription('The point code to which this linkset is connected.')
cSpLinksetState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 2, 1, 1, 3), CSpOsiState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinksetState.setStatus('current')
if mibBuilder.loadTexts: cSpLinksetState.setDescription('The status of this linkset.')
cSpLinksetInboundAcl = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 2, 1, 1, 4), CSpAclId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinksetInboundAcl.setStatus('current')
if mibBuilder.loadTexts: cSpLinksetInboundAcl.setDescription('Packets are filtered against this access control list before they are passed to the routing function. A value of zero indicates that no access control list is present.')
cSpLinksetOutboundAcl = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 2, 1, 1, 5), CSpAclId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinksetOutboundAcl.setStatus('current')
if mibBuilder.loadTexts: cSpLinksetOutboundAcl.setDescription('Packets are filtered against this access control list after they have passed through the routing function. A value of zero indicates that no access control list is present.')
cSpLinksetSnmmRouteTableName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 2, 1, 1, 6), CSpRouteTableName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinksetSnmmRouteTableName.setReference('ITU Q.704 Signalling network functions and messages, section 14.2.1.')
if mibBuilder.loadTexts: cSpLinksetSnmmRouteTableName.setStatus('current')
if mibBuilder.loadTexts: cSpLinksetSnmmRouteTableName.setDescription('The routing table for signalling network management messages.')
cSpLinksetSntmRouteTableName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 2, 1, 1, 7), CSpRouteTableName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinksetSntmRouteTableName.setReference('ITU Q.704 Signalling network functions and messages, section 14.2.1.')
if mibBuilder.loadTexts: cSpLinksetSntmRouteTableName.setStatus('current')
if mibBuilder.loadTexts: cSpLinksetSntmRouteTableName.setDescription('The routing table for signalling network test and maintenance messages.')
cSpLinksetSpare2RouteTableName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 2, 1, 1, 8), CSpRouteTableName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinksetSpare2RouteTableName.setReference('ITU Q.704 Signalling network functions and messages, section 14.2.1.')
if mibBuilder.loadTexts: cSpLinksetSpare2RouteTableName.setStatus('current')
if mibBuilder.loadTexts: cSpLinksetSpare2RouteTableName.setDescription('This routing table has been defined as a spare routing table by the standards committee.')
cSpLinksetSccpRouteTableName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 2, 1, 1, 9), CSpRouteTableName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinksetSccpRouteTableName.setReference('ITU Q.704 Signalling network functions and messages, section 14.2.1.')
if mibBuilder.loadTexts: cSpLinksetSccpRouteTableName.setStatus('current')
if mibBuilder.loadTexts: cSpLinksetSccpRouteTableName.setDescription('The routing table for SS7 Signaling Connection Control Part(SCCP) messages.')
cSpLinksetTupRouteTableName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 2, 1, 1, 10), CSpRouteTableName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinksetTupRouteTableName.setReference('ITU Q.704 Signalling network functions and messages, section 14.2.1.')
if mibBuilder.loadTexts: cSpLinksetTupRouteTableName.setStatus('current')
if mibBuilder.loadTexts: cSpLinksetTupRouteTableName.setDescription('The routing table for Telephone User Part(TUP) messages.')
cSpLinksetIsupRouteTableName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 2, 1, 1, 11), CSpRouteTableName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinksetIsupRouteTableName.setReference('ITU Q.704 Signalling network functions and messages, section 14.2.1.')
if mibBuilder.loadTexts: cSpLinksetIsupRouteTableName.setStatus('current')
if mibBuilder.loadTexts: cSpLinksetIsupRouteTableName.setDescription('The routing table for ISDN User Part messages.')
cSpLinksetDupcRouteTableName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 2, 1, 1, 12), CSpRouteTableName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinksetDupcRouteTableName.setReference('ITU Q.704 Signalling network functions and messages, section 14.2.1.')
if mibBuilder.loadTexts: cSpLinksetDupcRouteTableName.setStatus('current')
if mibBuilder.loadTexts: cSpLinksetDupcRouteTableName.setDescription('The routing table for Data User Part (call and circuit-related messages).')
cSpLinksetDupfRouteTableName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 2, 1, 1, 13), CSpRouteTableName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinksetDupfRouteTableName.setReference('ITU Q.704 Signalling network functions and messages, section 14.2.1.')
if mibBuilder.loadTexts: cSpLinksetDupfRouteTableName.setStatus('current')
if mibBuilder.loadTexts: cSpLinksetDupfRouteTableName.setDescription('The routing table for Data User Part (facility registration and cancellation messages).')
cSpLinksetMtupRouteTableName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 2, 1, 1, 14), CSpRouteTableName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinksetMtupRouteTableName.setReference('ITU Q.704 Signalling network functions and messages, section 14.2.1.')
if mibBuilder.loadTexts: cSpLinksetMtupRouteTableName.setStatus('current')
if mibBuilder.loadTexts: cSpLinksetMtupRouteTableName.setDescription('The routing table for MTP Testing User Part messages.')
cSpLinksetBisupRouteTableName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 2, 1, 1, 15), CSpRouteTableName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinksetBisupRouteTableName.setReference('ITU Q.704 Signalling network functions and messages, section 14.2.1.')
if mibBuilder.loadTexts: cSpLinksetBisupRouteTableName.setStatus('current')
if mibBuilder.loadTexts: cSpLinksetBisupRouteTableName.setDescription('The routing table for Broadband ISDN User Part(BISUP) messages.')
cSpLinksetSisupRouteTableName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 2, 1, 1, 16), CSpRouteTableName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinksetSisupRouteTableName.setReference('ITU Q.704 Signalling network functions and messages, section 14.2.1.')
if mibBuilder.loadTexts: cSpLinksetSisupRouteTableName.setStatus('current')
if mibBuilder.loadTexts: cSpLinksetSisupRouteTableName.setDescription('The routing table for Satellite ISDN User Part(SISUP) messages.')
cSpLinksetSpare11RouteTableName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 2, 1, 1, 17), CSpRouteTableName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinksetSpare11RouteTableName.setReference('ITU Q.704 Signalling network functions and messages, section 14.2.1.')
if mibBuilder.loadTexts: cSpLinksetSpare11RouteTableName.setStatus('current')
if mibBuilder.loadTexts: cSpLinksetSpare11RouteTableName.setDescription('This routing table has been defined as a spare routing table by the standards committee.')
cSpLinksetSpare12RouteTableName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 2, 1, 1, 18), CSpRouteTableName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinksetSpare12RouteTableName.setReference('ITU Q.704 Signalling network functions and messages, section 14.2.1.')
if mibBuilder.loadTexts: cSpLinksetSpare12RouteTableName.setStatus('current')
if mibBuilder.loadTexts: cSpLinksetSpare12RouteTableName.setDescription('This routing table has been defined as a spare routing table by the standards committee.')
cSpLinksetSpare13RouteTableName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 2, 1, 1, 19), CSpRouteTableName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinksetSpare13RouteTableName.setReference('ITU Q.704 Signalling network functions and messages, section 14.2.1.')
if mibBuilder.loadTexts: cSpLinksetSpare13RouteTableName.setStatus('current')
if mibBuilder.loadTexts: cSpLinksetSpare13RouteTableName.setDescription('This routing table has been defined as a spare routing table by the standards committee.')
cSpLinksetSpare14RouteTableName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 2, 1, 1, 20), CSpRouteTableName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinksetSpare14RouteTableName.setReference('ITU Q.704 Signalling network functions and messages, section 14.2.1.')
if mibBuilder.loadTexts: cSpLinksetSpare14RouteTableName.setStatus('current')
if mibBuilder.loadTexts: cSpLinksetSpare14RouteTableName.setDescription('This routing table has been defined as a spare routing table by the standards committee.')
cSpLinksetSpare15RouteTableName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 2, 1, 1, 21), CSpRouteTableName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinksetSpare15RouteTableName.setReference('ITU Q.704 Signalling network functions and messages, section 14.2.1.')
if mibBuilder.loadTexts: cSpLinksetSpare15RouteTableName.setStatus('current')
if mibBuilder.loadTexts: cSpLinksetSpare15RouteTableName.setDescription('This routing table has been defined as a spare routing table by the standards committee.')
cSpLinksetAccountingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 2, 1, 1, 22), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinksetAccountingEnabled.setStatus('current')
if mibBuilder.loadTexts: cSpLinksetAccountingEnabled.setDescription("This indicates if accounting for this linkset is enabled. 'true' Indicates that the accounting function is enabled for this linkset and is being accumulated in cSpAccountingTable. 'false' Indicates that the accounting function is disabled.")
cSpLinksetNumLinks = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 2, 1, 1, 23), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinksetNumLinks.setStatus('current')
if mibBuilder.loadTexts: cSpLinksetNumLinks.setDescription('The number of links in this linkset.')
cSpLinksetPacketsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 2, 1, 1, 24), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinksetPacketsSent.setStatus('current')
if mibBuilder.loadTexts: cSpLinksetPacketsSent.setDescription('The number of packets(message signal units) transmitted by this linkset(Q752/3.3).')
cSpLinksetHCPacketsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 2, 1, 1, 25), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinksetHCPacketsSent.setStatus('current')
if mibBuilder.loadTexts: cSpLinksetHCPacketsSent.setDescription('The number of packets(message signal units) transmitted by this linkset(Q752/3.3). This is the 64-bit version of cSpLinksetPacketsSent.')
cSpLinksetPacketsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 2, 1, 1, 26), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinksetPacketsRcvd.setStatus('current')
if mibBuilder.loadTexts: cSpLinksetPacketsRcvd.setDescription('The number of packets(message signal units) received by this linkset(Q752/3.5).')
cSpLinksetHCPacketsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 2, 1, 1, 27), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinksetHCPacketsRcvd.setStatus('current')
if mibBuilder.loadTexts: cSpLinksetHCPacketsRcvd.setDescription('The number of packets(message signal units) received by this linkset(Q752/3.5). This is the 64-bit version of cSpLinksetPacketsRcvd.')
cSpLinksetBytesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 2, 1, 1, 28), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinksetBytesSent.setStatus('current')
if mibBuilder.loadTexts: cSpLinksetBytesSent.setDescription('The number of bytes transmitted by this linkset(Q752/3.1).')
cSpLinksetHCBytesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 2, 1, 1, 29), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinksetHCBytesSent.setStatus('current')
if mibBuilder.loadTexts: cSpLinksetHCBytesSent.setDescription('The number of bytes transmitted by this linkset(Q752/3.1). This is the 64-bit version of cSpLinksetBytesSent.')
cSpLinksetBytesRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 2, 1, 1, 30), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinksetBytesRcvd.setStatus('current')
if mibBuilder.loadTexts: cSpLinksetBytesRcvd.setDescription('The number of bytes received by this linkset(Q752/3.4).')
cSpLinksetHCBytesRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 2, 1, 1, 31), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinksetHCBytesRcvd.setStatus('current')
if mibBuilder.loadTexts: cSpLinksetHCBytesRcvd.setDescription('The number of bytes received by this linkset(Q752/3.4). This is the 64-bit version of cSpLinksetBytesRcvd.')
cSpLinksetDurationInService = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 2, 1, 1, 32), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinksetDurationInService.setStatus('current')
if mibBuilder.loadTexts: cSpLinksetDurationInService.setDescription('Time linkset was providing service related to Q752/Table 4.2.')
cSpLinksetDurationOutService = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 2, 1, 1, 33), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinksetDurationOutService.setStatus('current')
if mibBuilder.loadTexts: cSpLinksetDurationOutService.setDescription('Time linkset was Out-of-Service as required for Q752/Table 4.2.')
cSpLinksetMtp2T01 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 2, 1, 1, 34), Unsigned32()).setUnits('100 milli-seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinksetMtp2T01.setReference('ITU Q.703 Signalling Link. ANSI T1.111.3 Telecommunications - Signaling system No. 7 (SS7)-Message Transfer Part (MTP).')
if mibBuilder.loadTexts: cSpLinksetMtp2T01.setStatus('current')
if mibBuilder.loadTexts: cSpLinksetMtp2T01.setDescription('Alignment ready timer. The default and valid range is dependant on the value of cSpSs7Variant. The ranges are defined in the following references.')
cSpLinksetMtp2T02 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 2, 1, 1, 35), Unsigned32()).setUnits('100 milli-seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinksetMtp2T02.setReference('ITU Q.703 Signalling Link. ANSI T1.111.3 Telecommunications - Signaling system No. 7 (SS7)-Message Transfer Part (MTP).')
if mibBuilder.loadTexts: cSpLinksetMtp2T02.setStatus('current')
if mibBuilder.loadTexts: cSpLinksetMtp2T02.setDescription('Not aligned timer. The default and valid range is dependant on the value of cSpSs7Variant. The ranges are defined in the following references. This timer is only applicable if cSpLinkType is serial.')
cSpLinksetMtp2T03 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 2, 1, 1, 36), Unsigned32()).setUnits('100 milli-seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinksetMtp2T03.setReference('ITU Q.703 Signalling Link. ANSI T1.111.3 Telecommunications - Signaling system No. 7 (SS7)-Message Transfer Part (MTP).')
if mibBuilder.loadTexts: cSpLinksetMtp2T03.setStatus('current')
if mibBuilder.loadTexts: cSpLinksetMtp2T03.setDescription('Aligned timer. The default and valid range is dependant on the value of cSpSs7Variant. The ranges are defined in the following references. This timer is only applicable if cSpLinkType is serial.')
cSpLinksetMtp2T4N = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 2, 1, 1, 37), Unsigned32()).setUnits('100 milli-seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinksetMtp2T4N.setReference('ITU Q.703 Signalling Link. ANSI T1.111.3 Telecommunications - Signaling system No. 7 (SS7)-Message Transfer Part (MTP).')
if mibBuilder.loadTexts: cSpLinksetMtp2T4N.setStatus('current')
if mibBuilder.loadTexts: cSpLinksetMtp2T4N.setDescription('Proving period timer normal timer. The default and valid range is dependant on the value of cSpSs7Variant. The ranges are defined in the following references.')
cSpLinksetMtp2T4E = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 2, 1, 1, 38), Unsigned32()).setUnits('100 milli-seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinksetMtp2T4E.setReference('ITU Q.703 Signalling Link. ANSI T1.111.3 Telecommunications - Signaling system No. 7 (SS7)-Message Transfer Part (MTP).')
if mibBuilder.loadTexts: cSpLinksetMtp2T4E.setStatus('current')
if mibBuilder.loadTexts: cSpLinksetMtp2T4E.setDescription('Proving period timer emergency timer. The default and valid range is dependant on the value of cSpSs7Variant. The ranges are defined in the following references. This timer is only applicable if cSpLinkType is serial.')
cSpLinksetMtp2T05 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 2, 1, 1, 39), Unsigned32()).setUnits('milli-seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinksetMtp2T05.setReference('ITU Q.703 Signalling Link. ANSI T1.111.3 Telecommunications - Signaling system No. 7 (SS7)-Message Transfer Part (MTP).')
if mibBuilder.loadTexts: cSpLinksetMtp2T05.setStatus('current')
if mibBuilder.loadTexts: cSpLinksetMtp2T05.setDescription('Sending SIB timer. The default and valid range is dependant on the value of cSpSs7Variant. The ranges are defined in the following references. This timer is only applicable if cSpLinkType is serial.')
cSpLinksetMtp2T06 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 2, 1, 1, 40), Unsigned32()).setUnits('100 milli-seconds.').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinksetMtp2T06.setReference('ITU Q.703 Signalling Link. ANSI T1.111.3 Telecommunications - Signaling system No. 7 (SS7)-Message Transfer Part (MTP).')
if mibBuilder.loadTexts: cSpLinksetMtp2T06.setStatus('current')
if mibBuilder.loadTexts: cSpLinksetMtp2T06.setDescription('Remote congestion timer. The default and valid range is dependant on the value of cSpSs7Variant. The ranges are defined in the following references.')
cSpLinksetMtp2T07 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 2, 1, 1, 41), Unsigned32()).setUnits('100 milli-seconds.').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinksetMtp2T07.setReference('ITU Q.703 Signalling Link. ANSI T1.111.3 Telecommunications - Signaling system No. 7 (SS7)-Message Transfer Part (MTP).')
if mibBuilder.loadTexts: cSpLinksetMtp2T07.setStatus('current')
if mibBuilder.loadTexts: cSpLinksetMtp2T07.setDescription('Excessive delay of acknowledgement timer. The default and valid range is dependant on the value of cSpSs7Variant The ranges are defined in the following references. This timer is only applicable if cSpLinkType is serial.')
cSpLinksetMtp2T08 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 2, 1, 1, 42), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinksetMtp2T08.setReference('ITU Q.703 Signalling Link. ANSI T1.111.3 Telecommunications - Signaling system No. 7 (SS7)-Message Transfer Part (MTP).')
if mibBuilder.loadTexts: cSpLinksetMtp2T08.setStatus('current')
if mibBuilder.loadTexts: cSpLinksetMtp2T08.setDescription('Interval timer for error interval monitor. Note that this timer is only applicable if cSpLinkType is serial.')
cSpLinksetMtp3T01 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 2, 1, 1, 43), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinksetMtp3T01.setReference('ITU Q.704 Signalling network functions and messages. ANSI T1.111 Telecommunications - Signaling system No. 7 (SS7)-Message Transfer Part (MTP).')
if mibBuilder.loadTexts: cSpLinksetMtp3T01.setStatus('current')
if mibBuilder.loadTexts: cSpLinksetMtp3T01.setDescription('Delay to avoid message mis-sequencing on changeover.')
cSpLinksetMtp3T02 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 2, 1, 1, 44), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinksetMtp3T02.setReference('ITU Q.704 Signalling network functions and messages. ANSI T1.111 Telecommunications - Signaling system No. 7 (SS7)-Message Transfer Part (MTP).')
if mibBuilder.loadTexts: cSpLinksetMtp3T02.setStatus('current')
if mibBuilder.loadTexts: cSpLinksetMtp3T02.setDescription('Waiting for changeover acknowledgement.')
cSpLinksetMtp3T03 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 2, 1, 1, 45), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinksetMtp3T03.setReference('ITU Q.704 Signalling network functions and messages. ANSI T1.111 Telecommunications - Signaling system No. 7 (SS7)-Message Transfer Part (MTP).')
if mibBuilder.loadTexts: cSpLinksetMtp3T03.setStatus('current')
if mibBuilder.loadTexts: cSpLinksetMtp3T03.setDescription('Time controlled diversion-delay to avoid mis-sequencing on change back.')
cSpLinksetMtp3T04 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 2, 1, 1, 46), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinksetMtp3T04.setReference('ITU Q.704 Signalling network functions and messages. ANSI T1.111 Telecommunications - Signaling system No. 7 (SS7)-Message Transfer Part (MTP).')
if mibBuilder.loadTexts: cSpLinksetMtp3T04.setStatus('current')
if mibBuilder.loadTexts: cSpLinksetMtp3T04.setDescription('Waiting for change back acknowledgement (first attempt).')
cSpLinksetMtp3T05 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 2, 1, 1, 47), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinksetMtp3T05.setReference('ITU Q.704 Signalling network functions and messages. ANSI T1.111 Telecommunications - Signaling system No. 7 (SS7)-Message Transfer Part (MTP).')
if mibBuilder.loadTexts: cSpLinksetMtp3T05.setStatus('current')
if mibBuilder.loadTexts: cSpLinksetMtp3T05.setDescription('Waiting for change back acknowledgement (second attempt).')
cSpLinksetMtp3T06 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 2, 1, 1, 48), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinksetMtp3T06.setReference('ITU Q.704 Signalling network functions and messages. ANSI T1.111 Telecommunications - Signaling system No. 7 (SS7)-Message Transfer Part (MTP).')
if mibBuilder.loadTexts: cSpLinksetMtp3T06.setStatus('current')
if mibBuilder.loadTexts: cSpLinksetMtp3T06.setDescription('Delay to avoid message mis-sequencing on controlled rerouting.')
cSpLinksetMtp3T07 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 2, 1, 1, 49), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinksetMtp3T07.setReference('ITU Q.704 Signalling network functions and messages. ANSI T1.111 Telecommunications - Signaling system No. 7 (SS7)-Message Transfer Part (MTP).')
if mibBuilder.loadTexts: cSpLinksetMtp3T07.setStatus('current')
if mibBuilder.loadTexts: cSpLinksetMtp3T07.setDescription('Waiting for signalling data link connection acknowledgement.')
cSpLinksetMtp3T08 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 2, 1, 1, 50), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinksetMtp3T08.setReference('ITU Q.704 Signalling network functions and messages. ANSI T1.111 Telecommunications - Signaling system No. 7 (SS7)-Message Transfer Part (MTP).')
if mibBuilder.loadTexts: cSpLinksetMtp3T08.setStatus('current')
if mibBuilder.loadTexts: cSpLinksetMtp3T08.setDescription('Transfer prohibited inhibition timer (transient solution).')
cSpLinksetMtp3T10 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 2, 1, 1, 51), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinksetMtp3T10.setReference('ITU Q.704 Signalling network functions and messages. ANSI T1.111 Telecommunications - Signaling system No. 7 (SS7)-Message Transfer Part (MTP).')
if mibBuilder.loadTexts: cSpLinksetMtp3T10.setStatus('current')
if mibBuilder.loadTexts: cSpLinksetMtp3T10.setDescription('Waiting to repeat signalling routeset test message.')
cSpLinksetMtp3T11 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 2, 1, 1, 52), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinksetMtp3T11.setReference('ITU Q.704 Signalling network functions and messages. ANSI T1.111 Telecommunications - Signaling system No. 7 (SS7)-Message Transfer Part (MTP).')
if mibBuilder.loadTexts: cSpLinksetMtp3T11.setStatus('current')
if mibBuilder.loadTexts: cSpLinksetMtp3T11.setDescription('Transfer restricted timer. (This is one way of implementing the function described in 13.4/Q.704 and mainly intended to simplify SPs.).')
cSpLinksetMtp3T12 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 2, 1, 1, 53), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinksetMtp3T12.setReference('ITU Q.704 Signalling network functions and messages. ANSI T1.111 Telecommunications - Signaling system No. 7 (SS7)-Message Transfer Part (MTP).')
if mibBuilder.loadTexts: cSpLinksetMtp3T12.setStatus('current')
if mibBuilder.loadTexts: cSpLinksetMtp3T12.setDescription('Waiting for uninhibit acknowledgement.')
cSpLinksetMtp3T13 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 2, 1, 1, 54), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinksetMtp3T13.setReference('ITU Q.704 Signalling network functions and messages. ANSI T1.111 Telecommunications - Signaling system No. 7 (SS7)-Message Transfer Part (MTP).')
if mibBuilder.loadTexts: cSpLinksetMtp3T13.setStatus('current')
if mibBuilder.loadTexts: cSpLinksetMtp3T13.setDescription('Waiting for force uninhibit.')
cSpLinksetMtp3T14 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 2, 1, 1, 55), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinksetMtp3T14.setReference('ITU Q.704 Signalling network functions and messages. ANSI T1.111 Telecommunications - Signaling system No. 7 (SS7)-Message Transfer Part (MTP).')
if mibBuilder.loadTexts: cSpLinksetMtp3T14.setStatus('current')
if mibBuilder.loadTexts: cSpLinksetMtp3T14.setDescription('Waiting for inhibition acknowledgement.')
cSpLinksetMtp3T15 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 2, 1, 1, 56), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinksetMtp3T15.setReference('ITU Q.704 Signalling network functions and messages. ANSI T1.111 Telecommunications - Signaling system No. 7 (SS7)-Message Transfer Part (MTP).')
if mibBuilder.loadTexts: cSpLinksetMtp3T15.setStatus('current')
if mibBuilder.loadTexts: cSpLinksetMtp3T15.setDescription('Waiting to start signalling routeset congestion test.')
cSpLinksetMtp3T16 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 2, 1, 1, 57), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinksetMtp3T16.setReference('ITU Q.704 Signalling network functions and messages. ANSI T1.111 Telecommunications - Signaling system No. 7 (SS7)-Message Transfer Part (MTP).')
if mibBuilder.loadTexts: cSpLinksetMtp3T16.setStatus('current')
if mibBuilder.loadTexts: cSpLinksetMtp3T16.setDescription('Waiting for routeset congestion status update.')
cSpLinksetMtp3T17 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 2, 1, 1, 58), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinksetMtp3T17.setReference('ITU Q.704 Signalling network functions and messages. ANSI T1.111 Telecommunications - Signaling system No. 7 (SS7)-Message Transfer Part (MTP).')
if mibBuilder.loadTexts: cSpLinksetMtp3T17.setStatus('current')
if mibBuilder.loadTexts: cSpLinksetMtp3T17.setDescription('Delay to avoid oscillation of initial alignment failure and link restart.')
cSpLinksetMtp3T18 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 2, 1, 1, 59), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinksetMtp3T18.setReference('ITU Q.704 Signalling network functions and messages. ANSI T1.111 Telecommunications - Signaling system No. 7 (SS7)-Message Transfer Part (MTP).')
if mibBuilder.loadTexts: cSpLinksetMtp3T18.setStatus('current')
if mibBuilder.loadTexts: cSpLinksetMtp3T18.setDescription('Timer within a signalling point whose MTP restarts, for supervising link and linkset activation as well as the receipt of routing information.')
cSpLinksetMtp3T19 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 2, 1, 1, 60), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinksetMtp3T19.setReference('ITU Q.704 Signalling network functions and messages. ANSI T1.111 Telecommunications - Signaling system No. 7 (SS7)-Message Transfer Part (MTP).')
if mibBuilder.loadTexts: cSpLinksetMtp3T19.setStatus('current')
if mibBuilder.loadTexts: cSpLinksetMtp3T19.setDescription('Supervision timer during MTP restart to avoid possible ping-pong of TFP, TFR2) and TRA messages.')
cSpLinksetMtp3T20 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 2, 1, 1, 61), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinksetMtp3T20.setReference('ITU Q.704 Signalling network functions and messages. ANSI T1.111 Telecommunications - Signaling system No. 7 (SS7)-Message Transfer Part (MTP).')
if mibBuilder.loadTexts: cSpLinksetMtp3T20.setStatus('current')
if mibBuilder.loadTexts: cSpLinksetMtp3T20.setDescription('Overall MTP restart timer at the signalling point whose MTP restarts. Overall MTP restart timer at a signalling point adjacent to one whose MTP restarts.')
cSpLinksetMtp3T21 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 2, 1, 1, 62), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinksetMtp3T21.setReference('ITU Q.704 Signalling network functions and messages. ANSI T1.111 Telecommunications - Signaling system No. 7 (SS7)-Message Transfer Part (MTP).')
if mibBuilder.loadTexts: cSpLinksetMtp3T21.setStatus('current')
if mibBuilder.loadTexts: cSpLinksetMtp3T21.setDescription('Overall MTP restart timer at a signalling point adjacent to one whose MTP restarts.')
cSpLinksetMtp3T22 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 2, 1, 1, 63), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinksetMtp3T22.setReference('ITU Q.704 Signalling network functions and messages. ANSI T1.111 Telecommunications - Signaling system No. 7 (SS7)-Message Transfer Part (MTP).')
if mibBuilder.loadTexts: cSpLinksetMtp3T22.setStatus('current')
if mibBuilder.loadTexts: cSpLinksetMtp3T22.setDescription('Local inhibit test timer.')
cSpLinksetMtp3T23 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 2, 1, 1, 64), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinksetMtp3T23.setReference('ITU Q.704 Signalling network functions and messages. ANSI T1.111 Telecommunications - Signaling system No. 7 (SS7)-Message Transfer Part (MTP).')
if mibBuilder.loadTexts: cSpLinksetMtp3T23.setStatus('current')
if mibBuilder.loadTexts: cSpLinksetMtp3T23.setDescription('Remote inhibit test timer.')
cSpLinksetMtp3T24 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 2, 1, 1, 65), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinksetMtp3T24.setReference('ITU Q.704 Signalling network functions and messages. ANSI T1.111 Telecommunications - Signaling system No. 7 (SS7)-Message Transfer Part (MTP).')
if mibBuilder.loadTexts: cSpLinksetMtp3T24.setStatus('current')
if mibBuilder.loadTexts: cSpLinksetMtp3T24.setDescription('Stabilizing timer after removal of local processor outage, used in LPO latching to RPO (national option)')
cSpLinksetMtp3T25 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 2, 1, 1, 66), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinksetMtp3T25.setReference('ANSI T1.111 Telecommunications - Signaling system No. 7 (SS7)-Message Transfer Part (MTP).')
if mibBuilder.loadTexts: cSpLinksetMtp3T25.setStatus('current')
if mibBuilder.loadTexts: cSpLinksetMtp3T25.setDescription('Timer at Signalling Point (SP) adjacent to restarting SP, waiting for traffic restart allowed message.')
cSpLinksetMtp3T26 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 2, 1, 1, 67), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinksetMtp3T26.setReference('ANSI T1.111 Telecommunications - Signaling system No. 7 (SS7)-Message Transfer Part (MTP).')
if mibBuilder.loadTexts: cSpLinksetMtp3T26.setStatus('current')
if mibBuilder.loadTexts: cSpLinksetMtp3T26.setDescription('Timer at restarting SP waiting to repeat traffic restart waiting message.')
cSpLinksetMtp3T27 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 2, 1, 1, 68), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinksetMtp3T27.setReference('ANSI T1.111 Telecommunications - Signaling system No. 7 (SS7)-Message Transfer Part (MTP).')
if mibBuilder.loadTexts: cSpLinksetMtp3T27.setStatus('current')
if mibBuilder.loadTexts: cSpLinksetMtp3T27.setDescription('Minimum duration of unavailability for full restart.')
cSpLinksetMtp3T28 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 2, 1, 1, 69), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinksetMtp3T28.setReference('ANSI T1.111 Telecommunications - Signaling system No. 7 (SS7)-Message Transfer Part (MTP).')
if mibBuilder.loadTexts: cSpLinksetMtp3T28.setStatus('current')
if mibBuilder.loadTexts: cSpLinksetMtp3T28.setDescription('Timer at SP adjacent to restarting SP waiting for traffic restart waiting message.')
cSpLinksetMtp3T29 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 2, 1, 1, 70), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinksetMtp3T29.setReference('ANSI T1.111 Telecommunications - Signaling system No. 7 (SS7)-Message Transfer Part (MTP).')
if mibBuilder.loadTexts: cSpLinksetMtp3T29.setStatus('current')
if mibBuilder.loadTexts: cSpLinksetMtp3T29.setDescription('Timer started when TRA sent in response to unexpected TRA or TRW.')
cSpLinksetMtp3T30 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 2, 1, 1, 71), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinksetMtp3T30.setReference('ANSI T1.111 Telecommunications - Signaling system No. 7 (SS7)-Message Transfer Part (MTP).')
if mibBuilder.loadTexts: cSpLinksetMtp3T30.setStatus('current')
if mibBuilder.loadTexts: cSpLinksetMtp3T30.setDescription('Timer to limit sending of TFPs and TFRs in response to unexpected TRA or TRW.')
cSpLinksetMtp3T31 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 2, 1, 1, 72), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinksetMtp3T31.setReference('ANSI T1.111 Telecommunications - Signaling system No. 7 (SS7)-Message Transfer Part (MTP).')
if mibBuilder.loadTexts: cSpLinksetMtp3T31.setStatus('current')
if mibBuilder.loadTexts: cSpLinksetMtp3T31.setDescription('False link congestion detection timer.')
cSpLinksetMtp3T32 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 2, 1, 1, 73), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinksetMtp3T32.setReference('ANSI T1.111 Telecommunications - Signaling system No. 7 (SS7)-Message Transfer Part (MTP).')
if mibBuilder.loadTexts: cSpLinksetMtp3T32.setStatus('current')
if mibBuilder.loadTexts: cSpLinksetMtp3T32.setDescription('Link oscillation timer - Procedure A.')
cSpLinksetMtp3T33 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 2, 1, 1, 74), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinksetMtp3T33.setReference('ANSI T1.111 Telecommunications - Signaling system No. 7 (SS7)-Message Transfer Part (MTP).')
if mibBuilder.loadTexts: cSpLinksetMtp3T33.setStatus('current')
if mibBuilder.loadTexts: cSpLinksetMtp3T33.setDescription('Probation timer for link oscillation - Procedure B.')
cSpLinksetMtp3T34 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 2, 1, 1, 75), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinksetMtp3T34.setReference('ANSI T1.111 Telecommunications - Signaling system No. 7 (SS7)-Message Transfer Part (MTP).')
if mibBuilder.loadTexts: cSpLinksetMtp3T34.setStatus('current')
if mibBuilder.loadTexts: cSpLinksetMtp3T34.setDescription('Suspension timer for link oscillation - Procedure B.')
cSpLinkTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 3, 1), )
if mibBuilder.loadTexts: cSpLinkTable.setStatus('current')
if mibBuilder.loadTexts: cSpLinkTable.setDescription('A table of SP links for this SP.')
cSpLinkTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 3, 1, 1), ).setIndexNames((0, "CISCO-SP-MIB", "cSpLinksetName"), (0, "CISCO-SP-MIB", "cSpLinkSlc"))
if mibBuilder.loadTexts: cSpLinkTableEntry.setStatus('current')
if mibBuilder.loadTexts: cSpLinkTableEntry.setDescription('A list of SP link attributes.')
cSpLinkSlc = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 3, 1, 1, 1), CSpLinkSLC())
if mibBuilder.loadTexts: cSpLinkSlc.setReference('ITU Q.704 Signalling network functions and messages. ANSI T1.111 Telecommunications - Signaling system No. 7 (SS7)-Message Transfer Part (MTP).')
if mibBuilder.loadTexts: cSpLinkSlc.setStatus('current')
if mibBuilder.loadTexts: cSpLinkSlc.setDescription('The Signalling Link Code for this link.')
cSpLinkState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 3, 1, 1, 2), CSpOsiState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinkState.setStatus('current')
if mibBuilder.loadTexts: cSpLinkState.setDescription('The status of this link.')
cSpLinkType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 3, 1, 1, 3), CSpLinkType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinkType.setReference('For SCTP see RFC 2960.')
if mibBuilder.loadTexts: cSpLinkType.setStatus('current')
if mibBuilder.loadTexts: cSpLinkType.setDescription('The link type.')
cSpLinkifIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 3, 1, 1, 4), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinkifIndex.setReference('RFC1213.txt')
if mibBuilder.loadTexts: cSpLinkifIndex.setStatus('current')
if mibBuilder.loadTexts: cSpLinkifIndex.setDescription('If the link type specified by cSpLinkType is serial, this is the ifIndex specified in MIB-2, otherwise no significance is to be placed on this value.')
cSpLinkSctpAssociation = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinkSctpAssociation.setStatus('current')
if mibBuilder.loadTexts: cSpLinkSctpAssociation.setDescription('If the link type specified by cSpLinkType is sctpIp, this is the sctpAssocId defined in the CISCO-SCTP-MIB. Where value greater than or equal to zero indicates a valid association and negative one indicates an invalid association. This value will always be set to negative one when cSpLinkType is set to the two value.')
cSpLinkMtp3PacketsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 3, 1, 1, 6), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinkMtp3PacketsRcvd.setStatus('current')
if mibBuilder.loadTexts: cSpLinkMtp3PacketsRcvd.setDescription('The number of MTP3 packets received by this link. This measurement is specified in Q752/3.5')
cSpLinkMtp3PacketsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 3, 1, 1, 7), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinkMtp3PacketsSent.setStatus('current')
if mibBuilder.loadTexts: cSpLinkMtp3PacketsSent.setDescription('The number of MTP3 packets sent by this link. This measurement is specified in Q752/3.3')
cSpLinkHCMtp3PacketsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 3, 1, 1, 8), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinkHCMtp3PacketsRcvd.setStatus('current')
if mibBuilder.loadTexts: cSpLinkHCMtp3PacketsRcvd.setDescription('The number of MTP3 packets received by this link. This is the 64-bit version of cSpLinkMtp3PacketsRcvd. This measurement is specified in Q752/3.5')
cSpLinkHCMtp3PacketsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 3, 1, 1, 9), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinkHCMtp3PacketsSent.setStatus('current')
if mibBuilder.loadTexts: cSpLinkHCMtp3PacketsSent.setDescription('The number of MTP3 packets sent by this link. This is the 64-bit version of cSpLinkMtp3PacketsSent. This measurement is specified in Q752/3.3')
cSpLinkMtp3BytesRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 3, 1, 1, 10), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinkMtp3BytesRcvd.setStatus('current')
if mibBuilder.loadTexts: cSpLinkMtp3BytesRcvd.setDescription('The number of MTP3 bytes received by this link. This measurement is specified in Q752/3.4')
cSpLinkMtp3BytesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 3, 1, 1, 11), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinkMtp3BytesSent.setStatus('current')
if mibBuilder.loadTexts: cSpLinkMtp3BytesSent.setDescription('The number of MTP3 bytes sent by this link. This measurement is specified in Q752/3.1')
cSpLinkHCMtp3BytesRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 3, 1, 1, 12), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinkHCMtp3BytesRcvd.setStatus('current')
if mibBuilder.loadTexts: cSpLinkHCMtp3BytesRcvd.setDescription('The number of MTP3 bytes received by this link. This is the 64-bit version of cSpLinkMtp3BytesRcvd. This measurement is specified in Q752/3.4')
cSpLinkHCMtp3BytesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 3, 1, 1, 13), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinkHCMtp3BytesSent.setStatus('current')
if mibBuilder.loadTexts: cSpLinkHCMtp3BytesSent.setDescription('The number of MTP3 bytes sent by this link. This is the 64-bit version of cSpLinkMtp3BytesSent. This measurement is specified in Q752/3.1')
cSpLinkMtp2T01 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 3, 1, 1, 14), Unsigned32()).setUnits('100 milli-seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinkMtp2T01.setReference('ITU Q.703 Signalling Link. ANSI T1.111.3 Telecommunications - Signaling system No. 7 (SS7)-Message Transfer Part (MTP).')
if mibBuilder.loadTexts: cSpLinkMtp2T01.setStatus('current')
if mibBuilder.loadTexts: cSpLinkMtp2T01.setDescription("Alignment ready timer. The default and valid range is dependant on the value of cSpSs7Variant. The ranges are defined in the following references. This timer is only applicable if cSpLinkType value is equal to 'serial'. A get on this object will return a zero if cSpLinkType is not serial.")
cSpLinkMtp2T02 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 3, 1, 1, 15), Unsigned32()).setUnits('100 milli-seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinkMtp2T02.setReference('ITU Q.703 Signalling Link. ANSI T1.111.3 Telecommunications - Signaling system No. 7 (SS7)-Message Transfer Part (MTP).')
if mibBuilder.loadTexts: cSpLinkMtp2T02.setStatus('current')
if mibBuilder.loadTexts: cSpLinkMtp2T02.setDescription('Not aligned timer. The default and valid range is dependant on the value of cSpSs7Variant. The ranges are defined in the following references. This timer is only applicable if cSpLinkType is serial. A get on this object will return a zero if cSpLinkType is not serial.')
cSpLinkMtp2T03 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 3, 1, 1, 16), Unsigned32()).setUnits('100 milli-seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinkMtp2T03.setReference('ITU Q.703 Signalling Link. ANSI T1.111.3 Telecommunications - Signaling system No. 7 (SS7)-Message Transfer Part (MTP).')
if mibBuilder.loadTexts: cSpLinkMtp2T03.setStatus('current')
if mibBuilder.loadTexts: cSpLinkMtp2T03.setDescription('Aligned timer. The default and valid range is dependant on the value of cSpSs7Variant. The ranges are defined in the following references. This timer is only applicable if cSpLinkType is serial. A get on this object will return a zero if cSpLinkType is not serial.')
cSpLinkMtp2T4N = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 3, 1, 1, 17), Unsigned32()).setUnits('100 milli-seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinkMtp2T4N.setReference('ITU Q.703 Signalling Link. ANSI T1.111.3 Telecommunications - Signaling system No. 7 (SS7)-Message Transfer Part (MTP).')
if mibBuilder.loadTexts: cSpLinkMtp2T4N.setStatus('current')
if mibBuilder.loadTexts: cSpLinkMtp2T4N.setDescription('Proving period timer normal timer. The default and valid range is dependant on the value of cSpSs7Variant. The ranges are defined in the following references.')
cSpLinkMtp2T4E = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 3, 1, 1, 18), Unsigned32()).setUnits('100 milli-seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinkMtp2T4E.setReference('ITU Q.703 Signalling Link. ANSI T1.111.3 Telecommunications - Signaling system No. 7 (SS7)-Message Transfer Part (MTP).')
if mibBuilder.loadTexts: cSpLinkMtp2T4E.setStatus('current')
if mibBuilder.loadTexts: cSpLinkMtp2T4E.setDescription('Proving period timer emergency timer. The default and valid range is dependant on the value of cSpSs7Variant. The ranges are defined in the following references. This timer is only applicable if cSpLinkType is serial. A get on this object will return a zero if cSpLinkType is not serial.')
cSpLinkMtp2T05 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 3, 1, 1, 19), Unsigned32()).setUnits('milli-seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinkMtp2T05.setReference('ITU Q.703 Signalling Link. ANSI T1.111.3 Telecommunications - Signaling system No. 7 (SS7)-Message Transfer Part (MTP).')
if mibBuilder.loadTexts: cSpLinkMtp2T05.setStatus('current')
if mibBuilder.loadTexts: cSpLinkMtp2T05.setDescription('Sending SIB timer. The default and valid range is dependant on the value of cSpSs7Variant. The ranges are defined in the following references. This timer is only applicable if cSpLinkType is serial. A get on this object will return a zero if cSpLinkType is not serial.')
cSpLinkMtp2T06 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 3, 1, 1, 20), Unsigned32()).setUnits('100 milli-seconds.').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinkMtp2T06.setReference('ITU Q.703 Signalling Link. ANSI T1.111.3 Telecommunications - Signaling system No. 7 (SS7)-Message Transfer Part (MTP).')
if mibBuilder.loadTexts: cSpLinkMtp2T06.setStatus('current')
if mibBuilder.loadTexts: cSpLinkMtp2T06.setDescription('Remote congestion timer. The default and valid range is dependant on the value of cSpSs7Variant. The ranges are defined in the following references. This timer is only applicable if cSpLinkType is serial. A get on this object will return a zero if cSpLinkType is not serial.')
cSpLinkMtp2T07 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 3, 1, 1, 21), Unsigned32()).setUnits('100 milli-seconds.').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinkMtp2T07.setReference('ITU Q.703 Signalling Link. ANSI T1.111.3 Telecommunications - Signaling system No. 7 (SS7)-Message Transfer Part (MTP).')
if mibBuilder.loadTexts: cSpLinkMtp2T07.setStatus('current')
if mibBuilder.loadTexts: cSpLinkMtp2T07.setDescription('Excessive delay of acknowledgement timer. The default and valid range is dependant on the value of cSpSs7Variant The ranges are defined in the following references. This timer is only applicable if cSpLinkType is serial. A get on this object will return a zero if cSpLinkType is not serial.')
cSpLinkMtp2T08 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 3, 1, 1, 22), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinkMtp2T08.setReference('ITU Q.703 Signalling Link. ANSI T1.111.3 Telecommunications - Signaling system No. 7 (SS7)-Message Transfer Part (MTP).')
if mibBuilder.loadTexts: cSpLinkMtp2T08.setStatus('current')
if mibBuilder.loadTexts: cSpLinkMtp2T08.setDescription('Interval timer for error interval monitor. Note that this timer is only applicable if cSpLinkType is serial. A get on this object will return a zero if cSpLinkType is not serial.')
cSpLinkMtp3T01 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 3, 1, 1, 23), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinkMtp3T01.setReference('ITU Q.704 Signalling network functions and messages. ANSI T1.111 Telecommunications - Signaling system No. 7 (SS7)-Message Transfer Part (MTP).')
if mibBuilder.loadTexts: cSpLinkMtp3T01.setStatus('current')
if mibBuilder.loadTexts: cSpLinkMtp3T01.setDescription('Delay to avoid message mis-sequencing on changeover.')
cSpLinkMtp3T02 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 3, 1, 1, 24), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinkMtp3T02.setReference('ITU Q.704 Signalling network functions and messages. ANSI T1.111 Telecommunications - Signaling system No. 7 (SS7)-Message Transfer Part (MTP).')
if mibBuilder.loadTexts: cSpLinkMtp3T02.setStatus('current')
if mibBuilder.loadTexts: cSpLinkMtp3T02.setDescription('Waiting for changeover acknowledgement.')
cSpLinkMtp3T03 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 3, 1, 1, 25), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinkMtp3T03.setReference('ITU Q.704 Signalling network functions and messages. ANSI T1.111 Telecommunications - Signaling system No. 7 (SS7)-Message Transfer Part (MTP).')
if mibBuilder.loadTexts: cSpLinkMtp3T03.setStatus('current')
if mibBuilder.loadTexts: cSpLinkMtp3T03.setDescription('Time controlled diversion-delay to avoid mis-sequencing on change back.')
cSpLinkMtp3T04 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 3, 1, 1, 26), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinkMtp3T04.setReference('ITU Q.704 Signalling network functions and messages. ANSI T1.111 Telecommunications - Signaling system No. 7 (SS7)-Message Transfer Part (MTP).')
if mibBuilder.loadTexts: cSpLinkMtp3T04.setStatus('current')
if mibBuilder.loadTexts: cSpLinkMtp3T04.setDescription('Waiting for change back acknowledgement (first attempt).')
cSpLinkMtp3T05 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 3, 1, 1, 27), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinkMtp3T05.setReference('ITU Q.704 Signalling network functions and messages. ANSI T1.111 Telecommunications - Signaling system No. 7 (SS7)-Message Transfer Part (MTP).')
if mibBuilder.loadTexts: cSpLinkMtp3T05.setStatus('current')
if mibBuilder.loadTexts: cSpLinkMtp3T05.setDescription('Waiting for change back acknowledgement (second attempt).')
cSpLinkMtp3T06 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 3, 1, 1, 28), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinkMtp3T06.setReference('ITU Q.704 Signalling network functions and messages. ANSI T1.111 Telecommunications - Signaling system No. 7 (SS7)-Message Transfer Part (MTP).')
if mibBuilder.loadTexts: cSpLinkMtp3T06.setStatus('current')
if mibBuilder.loadTexts: cSpLinkMtp3T06.setDescription('Delay to avoid message mis-sequencing on controlled rerouting.')
cSpLinkMtp3T07 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 3, 1, 1, 29), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinkMtp3T07.setReference('ITU Q.704 Signalling network functions and messages. ANSI T1.111 Telecommunications - Signaling system No. 7 (SS7)-Message Transfer Part (MTP).')
if mibBuilder.loadTexts: cSpLinkMtp3T07.setStatus('current')
if mibBuilder.loadTexts: cSpLinkMtp3T07.setDescription('Waiting for signalling data link connection acknowledgement.')
cSpLinkMtp3T08 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 3, 1, 1, 30), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinkMtp3T08.setReference('ITU Q.704 Signalling network functions and messages. ANSI T1.111 Telecommunications - Signaling system No. 7 (SS7)-Message Transfer Part (MTP).')
if mibBuilder.loadTexts: cSpLinkMtp3T08.setStatus('current')
if mibBuilder.loadTexts: cSpLinkMtp3T08.setDescription('Transfer prohibited inhibition timer (transient solution).')
cSpLinkMtp3T10 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 3, 1, 1, 31), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinkMtp3T10.setReference('ITU Q.704 Signalling network functions and messages. ANSI T1.111 Telecommunications - Signaling system No. 7 (SS7)-Message Transfer Part (MTP).')
if mibBuilder.loadTexts: cSpLinkMtp3T10.setStatus('current')
if mibBuilder.loadTexts: cSpLinkMtp3T10.setDescription('Waiting to repeat signalling routeset test message.')
cSpLinkMtp3T11 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 3, 1, 1, 32), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinkMtp3T11.setReference('ITU Q.704 Signalling network functions and messages. ANSI T1.111 Telecommunications - Signaling system No. 7 (SS7)-Message Transfer Part (MTP).')
if mibBuilder.loadTexts: cSpLinkMtp3T11.setStatus('current')
if mibBuilder.loadTexts: cSpLinkMtp3T11.setDescription('Transfer restricted timer. (This is one way of implementing the function described in 13.4/Q.704 and mainly intended to simplify SPs.).')
cSpLinkMtp3T12 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 3, 1, 1, 33), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinkMtp3T12.setReference('ITU Q.704 Signalling network functions and messages. ANSI T1.111 Telecommunications - Signaling system No. 7 (SS7)-Message Transfer Part (MTP).')
if mibBuilder.loadTexts: cSpLinkMtp3T12.setStatus('current')
if mibBuilder.loadTexts: cSpLinkMtp3T12.setDescription('Waiting for uninhibit acknowledgement.')
cSpLinkMtp3T13 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 3, 1, 1, 34), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinkMtp3T13.setReference('ITU Q.704 Signalling network functions and messages. ANSI T1.111 Telecommunications - Signaling system No. 7 (SS7)-Message Transfer Part (MTP).')
if mibBuilder.loadTexts: cSpLinkMtp3T13.setStatus('current')
if mibBuilder.loadTexts: cSpLinkMtp3T13.setDescription('Waiting for force uninhibit.')
cSpLinkMtp3T14 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 3, 1, 1, 35), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinkMtp3T14.setReference('ITU Q.704 Signalling network functions and messages. ANSI T1.111 Telecommunications - Signaling system No. 7 (SS7)-Message Transfer Part (MTP).')
if mibBuilder.loadTexts: cSpLinkMtp3T14.setStatus('current')
if mibBuilder.loadTexts: cSpLinkMtp3T14.setDescription('Waiting for inhibition acknowledgement.')
cSpLinkMtp3T15 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 3, 1, 1, 36), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinkMtp3T15.setReference('ITU Q.704 Signalling network functions and messages. ANSI T1.111 Telecommunications - Signaling system No. 7 (SS7)-Message Transfer Part (MTP).')
if mibBuilder.loadTexts: cSpLinkMtp3T15.setStatus('current')
if mibBuilder.loadTexts: cSpLinkMtp3T15.setDescription('Waiting to start signalling routeset congestion test.')
cSpLinkMtp3T16 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 3, 1, 1, 37), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinkMtp3T16.setReference('ITU Q.704 Signalling network functions and messages. ANSI T1.111 Telecommunications - Signaling system No. 7 (SS7)-Message Transfer Part (MTP).')
if mibBuilder.loadTexts: cSpLinkMtp3T16.setStatus('current')
if mibBuilder.loadTexts: cSpLinkMtp3T16.setDescription('Waiting for routeset congestion status update.')
cSpLinkMtp3T17 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 3, 1, 1, 38), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinkMtp3T17.setReference('ITU Q.704 Signalling network functions and messages. ANSI T1.111 Telecommunications - Signaling system No. 7 (SS7)-Message Transfer Part (MTP).')
if mibBuilder.loadTexts: cSpLinkMtp3T17.setStatus('current')
if mibBuilder.loadTexts: cSpLinkMtp3T17.setDescription('Delay to avoid oscillation of initial alignment failure and link restart.')
cSpLinkMtp3T18 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 3, 1, 1, 39), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinkMtp3T18.setReference('ITU Q.704 Signalling network functions and messages. ANSI T1.111 Telecommunications - Signaling system No. 7 (SS7)-Message Transfer Part (MTP).')
if mibBuilder.loadTexts: cSpLinkMtp3T18.setStatus('current')
if mibBuilder.loadTexts: cSpLinkMtp3T18.setDescription('Timer within a signalling point whose MTP restarts, for supervising link and linkset activation as well as the receipt of routing information.')
cSpLinkMtp3T19 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 3, 1, 1, 40), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinkMtp3T19.setReference('ITU Q.704 Signalling network functions and messages. ANSI T1.111 Telecommunications - Signaling system No. 7 (SS7)-Message Transfer Part (MTP).')
if mibBuilder.loadTexts: cSpLinkMtp3T19.setStatus('current')
if mibBuilder.loadTexts: cSpLinkMtp3T19.setDescription('Supervision timer during MTP restart to avoid possible ping-pong of TFP, TFR2) and TRA messages.')
cSpLinkMtp3T20 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 3, 1, 1, 41), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinkMtp3T20.setReference('ITU Q.704 Signalling network functions and messages. ANSI T1.111 Telecommunications - Signaling system No. 7 (SS7)-Message Transfer Part (MTP).')
if mibBuilder.loadTexts: cSpLinkMtp3T20.setStatus('current')
if mibBuilder.loadTexts: cSpLinkMtp3T20.setDescription('Overall MTP restart timer at the signalling point whose MTP restarts. Overall MTP restart timer at a signalling point adjacent to one whose MTP restarts.')
cSpLinkMtp3T21 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 3, 1, 1, 42), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinkMtp3T21.setReference('ITU Q.704 Signalling network functions and messages. ANSI T1.111 Telecommunications - Signaling system No. 7 (SS7)-Message Transfer Part (MTP).')
if mibBuilder.loadTexts: cSpLinkMtp3T21.setStatus('current')
if mibBuilder.loadTexts: cSpLinkMtp3T21.setDescription('Overall MTP restart timer at a signalling point adjacent to one whose MTP restarts.')
cSpLinkMtp3T22 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 3, 1, 1, 43), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinkMtp3T22.setReference('ITU Q.704 Signalling network functions and messages. ANSI T1.111 Telecommunications - Signaling system No. 7 (SS7)-Message Transfer Part (MTP).')
if mibBuilder.loadTexts: cSpLinkMtp3T22.setStatus('current')
if mibBuilder.loadTexts: cSpLinkMtp3T22.setDescription('Local inhibit test timer.')
cSpLinkMtp3T23 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 3, 1, 1, 44), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinkMtp3T23.setReference('ITU Q.704 Signalling network functions and messages. ANSI T1.111 Telecommunications - Signaling system No. 7 (SS7)-Message Transfer Part (MTP).')
if mibBuilder.loadTexts: cSpLinkMtp3T23.setStatus('current')
if mibBuilder.loadTexts: cSpLinkMtp3T23.setDescription('Remote inhibit test timer.')
cSpLinkMtp3T24 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 3, 1, 1, 45), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinkMtp3T24.setReference('ITU Q.704 Signalling network functions and messages. ANSI T1.111 Telecommunications - Signaling system No. 7 (SS7)-Message Transfer Part (MTP).')
if mibBuilder.loadTexts: cSpLinkMtp3T24.setStatus('current')
if mibBuilder.loadTexts: cSpLinkMtp3T24.setDescription('Stabilizing timer after removal of local processor outage, used in LPO latching to RPO (national option)')
cSpLinkMtp3T25 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 3, 1, 1, 46), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinkMtp3T25.setReference('ANSI T1.111 Telecommunications - Signaling system No. 7 (SS7)-Message Transfer Part (MTP).')
if mibBuilder.loadTexts: cSpLinkMtp3T25.setStatus('current')
if mibBuilder.loadTexts: cSpLinkMtp3T25.setDescription('Timer at Signalling Point (SP) adjacent to restarting SP, waiting for traffic restart allowed message.')
cSpLinkMtp3T26 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 3, 1, 1, 47), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinkMtp3T26.setReference('ANSI T1.111 Telecommunications - Signaling system No. 7 (SS7)-Message Transfer Part (MTP).')
if mibBuilder.loadTexts: cSpLinkMtp3T26.setStatus('current')
if mibBuilder.loadTexts: cSpLinkMtp3T26.setDescription('Timer at restarting SP waiting to repeat traffic restart waiting message.')
cSpLinkMtp3T27 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 3, 1, 1, 48), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinkMtp3T27.setReference('ANSI T1.111 Telecommunications - Signaling system No. 7 (SS7)-Message Transfer Part (MTP).')
if mibBuilder.loadTexts: cSpLinkMtp3T27.setStatus('current')
if mibBuilder.loadTexts: cSpLinkMtp3T27.setDescription('Minimum duration of unavailability for full restart.')
cSpLinkMtp3T28 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 3, 1, 1, 49), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinkMtp3T28.setReference('ANSI T1.111 Telecommunications - Signaling system No. 7 (SS7)-Message Transfer Part (MTP).')
if mibBuilder.loadTexts: cSpLinkMtp3T28.setStatus('current')
if mibBuilder.loadTexts: cSpLinkMtp3T28.setDescription('Timer at SP adjacent to restarting SP waiting for traffic restart waiting message.')
cSpLinkMtp3T29 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 3, 1, 1, 50), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinkMtp3T29.setReference('ANSI T1.111 Telecommunications - Signaling system No. 7 (SS7)-Message Transfer Part (MTP).')
if mibBuilder.loadTexts: cSpLinkMtp3T29.setStatus('current')
if mibBuilder.loadTexts: cSpLinkMtp3T29.setDescription('Timer started when TRA sent in response to unexpected TRA or TRW.')
cSpLinkMtp3T30 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 3, 1, 1, 51), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinkMtp3T30.setReference('ANSI T1.111 Telecommunications - Signaling system No. 7 (SS7)-Message Transfer Part (MTP).')
if mibBuilder.loadTexts: cSpLinkMtp3T30.setStatus('current')
if mibBuilder.loadTexts: cSpLinkMtp3T30.setDescription('Timer to limit sending of TFPs and TFRs in response to unexpected TRA or TRW.')
cSpLinkMtp3T31 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 3, 1, 1, 52), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinkMtp3T31.setReference('ANSI T1.111 Telecommunications - Signaling system No. 7 (SS7)-Message Transfer Part (MTP).')
if mibBuilder.loadTexts: cSpLinkMtp3T31.setStatus('current')
if mibBuilder.loadTexts: cSpLinkMtp3T31.setDescription('False link congestion detection timer.')
cSpLinkMtp3T32 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 3, 1, 1, 53), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinkMtp3T32.setReference('ANSI T1.111 Telecommunications - Signaling system No. 7 (SS7)-Message Transfer Part (MTP).')
if mibBuilder.loadTexts: cSpLinkMtp3T32.setStatus('current')
if mibBuilder.loadTexts: cSpLinkMtp3T32.setDescription('Link oscillation timer - Procedure A.')
cSpLinkMtp3T33 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 3, 1, 1, 54), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinkMtp3T33.setReference('ANSI T1.111 Telecommunications - Signaling system No. 7 (SS7)-Message Transfer Part (MTP).')
if mibBuilder.loadTexts: cSpLinkMtp3T33.setStatus('current')
if mibBuilder.loadTexts: cSpLinkMtp3T33.setDescription('Probation timer for link oscillation - Procedure B.')
cSpLinkMtp3T34 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 3, 1, 1, 55), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinkMtp3T34.setReference('ANSI T1.111 Telecommunications - Signaling system No. 7 (SS7)-Message Transfer Part (MTP).')
if mibBuilder.loadTexts: cSpLinkMtp3T34.setStatus('current')
if mibBuilder.loadTexts: cSpLinkMtp3T34.setDescription('Suspension timer for link oscillation - Procedure B.')
cSpLinkXmitQueueDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 3, 1, 1, 56), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinkXmitQueueDepth.setStatus('current')
if mibBuilder.loadTexts: cSpLinkXmitQueueDepth.setDescription('Number of packets waiting to be sent over this link.')
cSpLinkXmitQueueDepthHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 3, 1, 1, 57), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cSpLinkXmitQueueDepthHigh.setStatus('current')
if mibBuilder.loadTexts: cSpLinkXmitQueueDepthHigh.setDescription('This is the maximum number of packets waiting to be sent over this link since the last time this value was reset as indicated by cSpLinkXmitQueueDepthHighReset. Resetting this object is achieved by setting this object to 0. Attempting to set this object to any other value will result in a wrongValue error.')
cSpLinkXmitQueueDepthHighReset = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 3, 1, 1, 58), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinkXmitQueueDepthHighReset.setStatus('current')
if mibBuilder.loadTexts: cSpLinkXmitQueueDepthHighReset.setDescription('This indicates when cSpLinkXmitQueueDepthHigh was set to 0.')
cSpLinkCongestionState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 3, 1, 1, 59), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinkCongestionState.setReference('ITU Q.704 Signalling network functions and messages. ANSI T1.111 Telecommunications - Signaling system No. 7 (SS7)-Signalling network functions and messages 2.3.5.2.')
if mibBuilder.loadTexts: cSpLinkCongestionState.setStatus('current')
if mibBuilder.loadTexts: cSpLinkCongestionState.setDescription('The signalling link congestion status of this link. 0 is the least congestion level, 3 is the highest congestion level.')
cSpLinkCongestionAbate1 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 3, 1, 1, 60), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinkCongestionAbate1.setStatus('current')
if mibBuilder.loadTexts: cSpLinkCongestionAbate1.setDescription('Threshold used to abate congestion level 1.')
cSpLinkCongestionAbate2 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 3, 1, 1, 61), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinkCongestionAbate2.setStatus('current')
if mibBuilder.loadTexts: cSpLinkCongestionAbate2.setDescription('Threshold used to abate congestion level 2.')
cSpLinkCongestionAbate3 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 3, 1, 1, 62), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinkCongestionAbate3.setStatus('current')
if mibBuilder.loadTexts: cSpLinkCongestionAbate3.setDescription('Threshold used to abate congestion level 3.')
cSpLinkCongestionOnset1 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 3, 1, 1, 63), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinkCongestionOnset1.setStatus('current')
if mibBuilder.loadTexts: cSpLinkCongestionOnset1.setDescription('Threshold used to mark onset of congestion level 1.')
cSpLinkCongestionOnset2 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 3, 1, 1, 64), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinkCongestionOnset2.setStatus('current')
if mibBuilder.loadTexts: cSpLinkCongestionOnset2.setDescription('Threshold used to mark onset of congestion level 2.')
cSpLinkCongestionOnset3 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 3, 1, 1, 65), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinkCongestionOnset3.setStatus('current')
if mibBuilder.loadTexts: cSpLinkCongestionOnset3.setDescription('Threshold used to mark onset of congestion level 3.')
cSpLinkSigLinkTest = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 3, 1, 1, 66), TruthValue().clone('true')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinkSigLinkTest.setStatus('current')
if mibBuilder.loadTexts: cSpLinkSigLinkTest.setDescription('Indicated if signalling link test is enabled on this link. true : signalling link test is enabled. false : signalling link test not enabled.')
cSpLinkQ752T1E1 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 3, 1, 1, 67), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinkQ752T1E1.setStatus('current')
if mibBuilder.loadTexts: cSpLinkQ752T1E1.setDescription('Duration of link in the In-Service state Q752/1.1.')
cSpLinkQ752T1E2 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 3, 1, 1, 68), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinkQ752T1E2.setStatus('current')
if mibBuilder.loadTexts: cSpLinkQ752T1E2.setDescription('Count of Signalling Link failures - All reasons Q752/1.2.')
cSpLinkQ752T1E3 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 3, 1, 1, 69), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinkQ752T1E3.setStatus('current')
if mibBuilder.loadTexts: cSpLinkQ752T1E3.setDescription('Count of Signalling Link failures - Abnormal FIBR/BSNR Q752/1.4.')
cSpLinkQ752T1E4 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 3, 1, 1, 70), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinkQ752T1E4.setStatus('current')
if mibBuilder.loadTexts: cSpLinkQ752T1E4.setDescription('Count of Signalling Link failures - Excessive delay of acknowledgement Q752/1.4.')
cSpLinkQ752T1E5 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 3, 1, 1, 71), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinkQ752T1E5.setStatus('current')
if mibBuilder.loadTexts: cSpLinkQ752T1E5.setDescription('Count of Signalling Link failures - Excessive error rate Q752/1.5.')
cSpLinkQ752T1E6 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 3, 1, 1, 72), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinkQ752T1E6.setStatus('current')
if mibBuilder.loadTexts: cSpLinkQ752T1E6.setDescription('Count of Signalling Link failures - Excessive duration of congestion Q752/1.6.')
cSpLinkQ752T1E7 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 3, 1, 1, 73), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinkQ752T1E7.setStatus('current')
if mibBuilder.loadTexts: cSpLinkQ752T1E7.setDescription('Count of alignment or proving errors Q752/1.7.')
cSpLinkQ752T1E8 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 3, 1, 1, 74), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinkQ752T1E8.setStatus('current')
if mibBuilder.loadTexts: cSpLinkQ752T1E8.setDescription('Count of signal units received in error Q752/1.8.')
cSpLinkQ752T1E9 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 3, 1, 1, 75), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinkQ752T1E9.setStatus('current')
if mibBuilder.loadTexts: cSpLinkQ752T1E9.setDescription('Count of negative acknowledgements received Q752/1.9.')
cSpLinkQ752T1E10 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 3, 1, 1, 76), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinkQ752T1E10.setStatus('current')
if mibBuilder.loadTexts: cSpLinkQ752T1E10.setDescription("Count of 'local automatic changeover' events Q752/1.10.")
cSpLinkQ752T1E11 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 3, 1, 1, 77), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinkQ752T1E11.setStatus('current')
if mibBuilder.loadTexts: cSpLinkQ752T1E11.setDescription("Count of 'local automatic changeback' events Q752/1.11.")
cSpLinkQ752T2E1 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 3, 1, 1, 78), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinkQ752T2E1.setStatus('current')
if mibBuilder.loadTexts: cSpLinkQ752T2E1.setDescription('Duration of Signalling Link unavailable(for any reason) Q752/2.1.')
cSpLinkQ752T2E5 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 3, 1, 1, 79), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinkQ752T2E5.setStatus('current')
if mibBuilder.loadTexts: cSpLinkQ752T2E5.setDescription('Duration of Signalling Link unavailable due to local management actions Q752/2.5.')
cSpLinkQ752T2E6 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 3, 1, 1, 80), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinkQ752T2E6.setStatus('current')
if mibBuilder.loadTexts: cSpLinkQ752T2E6.setDescription('Duration of Signalling Link unavailable due to remote management actions Q752/2.6.')
cSpLinkQ752T2E7 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 3, 1, 1, 81), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinkQ752T2E7.setStatus('current')
if mibBuilder.loadTexts: cSpLinkQ752T2E7.setDescription('Duration of Signalling Link unavailable due to link failure Q752/2.7.')
cSpLinkQ752T2E9 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 3, 1, 1, 82), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinkQ752T2E9.setStatus('current')
if mibBuilder.loadTexts: cSpLinkQ752T2E9.setDescription('Duration of Signalling Link unavailable due to remote processor outage Q752/2.9.')
cSpLinkQ752T2E10 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 3, 1, 1, 83), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinkQ752T2E10.setStatus('current')
if mibBuilder.loadTexts: cSpLinkQ752T2E10.setDescription("Count of 'remote processor outage' events Q752/2.10 and Q752/2.11. The standard only requires that events are issued. The entries have been combined into a single entry to track all occurrences of these event types.")
cSpLinkQ752T2E15 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 3, 1, 1, 84), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinkQ752T2E15.setStatus('current')
if mibBuilder.loadTexts: cSpLinkQ752T2E15.setDescription('Duration of local busy Q752/2.15.')
cSpLinkQ752T2E16 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 3, 1, 1, 85), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinkQ752T2E16.setStatus('current')
if mibBuilder.loadTexts: cSpLinkQ752T2E16.setDescription('Count of local inhibition Q752/2.16 and Q752/2.17. The standard only requires that events are issued. The entries have been combined into a single entry to track all occurrences of these event types.')
cSpLinkQ752T2E18 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 3, 1, 1, 86), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinkQ752T2E18.setStatus('current')
if mibBuilder.loadTexts: cSpLinkQ752T2E18.setDescription('Count of remote inhibition Q752/2.18 and Q752/2.19. The standard only requires that events are issued. The entries have been combined into a single entry to track all occurrences of these event types.')
cSpLinkMtp3PacketsRetrans = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 3, 1, 1, 87), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinkMtp3PacketsRetrans.setStatus('current')
if mibBuilder.loadTexts: cSpLinkMtp3PacketsRetrans.setDescription('The number of MTP3 packets retransmitted on this link. This measurement is specified in Q752/3.2')
cSpLinkMtp3BytesRetrans = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 3, 1, 1, 88), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinkMtp3BytesRetrans.setStatus('current')
if mibBuilder.loadTexts: cSpLinkMtp3BytesRetrans.setDescription('The number of MTP3 bytes retransmitted on this link. This measurement is specified in Q752/3.2')
cSpLinkQ752T3E6 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 3, 1, 1, 89), Counter32()).setUnits('events').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinkQ752T3E6.setStatus('current')
if mibBuilder.loadTexts: cSpLinkQ752T3E6.setDescription('The number times this signalling link was marked congested. This measurement is specified in Q752/3.6')
cSpLinkQ752T3E7 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 3, 1, 1, 90), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinkQ752T3E7.setStatus('current')
if mibBuilder.loadTexts: cSpLinkQ752T3E7.setDescription('Cumulative duration of signalling link congestion Q752/3.7.')
cSpLinkQ752T3E10L1 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 3, 1, 1, 91), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinkQ752T3E10L1.setStatus('current')
if mibBuilder.loadTexts: cSpLinkQ752T3E10L1.setDescription('The number of packets(MSUs) discarded due to signalling link level 1 congestion Q752/3.10')
cSpLinkQ752T3E10L2 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 3, 1, 1, 92), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinkQ752T3E10L2.setStatus('current')
if mibBuilder.loadTexts: cSpLinkQ752T3E10L2.setDescription('The number of packets(MSUs) discard due to signalling link level 2 congestion Q752/3.10')
cSpLinkQ752T3E10L3 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 3, 1, 1, 93), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinkQ752T3E10L3.setStatus('current')
if mibBuilder.loadTexts: cSpLinkQ752T3E10L3.setDescription('The number of packets(MSUs) discard due to signalling link level 3 congestion Q752/3.10')
cSpLinkQ752T3E11L1 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 3, 1, 1, 94), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinkQ752T3E11L1.setStatus('current')
if mibBuilder.loadTexts: cSpLinkQ752T3E11L1.setDescription('The number times this signalling link entered congestion level 1 and packets were discarded. This measurement is specified in Q752/3.11')
cSpLinkQ752T3E11L2 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 3, 1, 1, 95), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinkQ752T3E11L2.setStatus('current')
if mibBuilder.loadTexts: cSpLinkQ752T3E11L2.setDescription('The number times this signalling link entered congestion level 2 and packets were discarded. This measurement is specified in Q752/3.11')
cSpLinkQ752T3E11L3 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 3, 1, 1, 96), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpLinkQ752T3E11L3.setStatus('current')
if mibBuilder.loadTexts: cSpLinkQ752T3E11L3.setDescription('The number times this signalling link entered congestion level 3 and packets were discarded. This measurement is specified in Q752/3.11')
cSpRouteTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 4, 1), )
if mibBuilder.loadTexts: cSpRouteTable.setStatus('current')
if mibBuilder.loadTexts: cSpRouteTable.setDescription('The route table for determining the linkset that a packet must traverse to arrive at its destination node given by the destination point code.')
cSpRouteTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 4, 1, 1), ).setIndexNames((0, "CISCO-SP-MIB", "cSpRouteTableName"), (0, "CISCO-SP-MIB", "cSpRouteDpc"), (0, "CISCO-SP-MIB", "cSpRouteDestLsCost"), (0, "CISCO-SP-MIB", "cSpRouteDestLinkset"), (0, "CISCO-SP-MIB", "cSpRouteMask"))
if mibBuilder.loadTexts: cSpRouteTableEntry.setStatus('current')
if mibBuilder.loadTexts: cSpRouteTableEntry.setDescription('A list statements used to route mtp3 packets. Information in packets are matched against the information in each route statements and the packet is sent on the selected linkset.')
cSpRouteTableName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 4, 1, 1, 1), CSpRouteTableName())
if mibBuilder.loadTexts: cSpRouteTableName.setStatus('current')
if mibBuilder.loadTexts: cSpRouteTableName.setDescription('The configured name for this route table.')
cSpRouteDpc = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 4, 1, 1, 2), CSpPointCode())
if mibBuilder.loadTexts: cSpRouteDpc.setStatus('current')
if mibBuilder.loadTexts: cSpRouteDpc.setDescription('The destination point code.')
cSpRouteDestLsCost = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 4, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 9)))
if mibBuilder.loadTexts: cSpRouteDestLsCost.setStatus('current')
if mibBuilder.loadTexts: cSpRouteDestLsCost.setDescription('The cost assigned to this linkset matching this route. Higher numbers represent higher cost.')
cSpRouteDestLinkset = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 4, 1, 1, 4), CSpLinksetId())
if mibBuilder.loadTexts: cSpRouteDestLinkset.setStatus('current')
if mibBuilder.loadTexts: cSpRouteDestLinkset.setDescription('The linkset that the packet is to be forwarded to on matching this route.')
cSpRouteMask = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 4, 1, 1, 5), Unsigned32())
if mibBuilder.loadTexts: cSpRouteMask.setStatus('current')
if mibBuilder.loadTexts: cSpRouteMask.setDescription('The mask used to define which part of cSpRouteDpc is significant when comparing the cSpRouteDpc to the destination code point in the packet to be routed.')
cSpRouteStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 4, 1, 1, 6), CSpRouteStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpRouteStatus.setStatus('current')
if mibBuilder.loadTexts: cSpRouteStatus.setDescription('The status of the route from the perspective of the Signaling Point.')
cSpAclTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 5, 1), )
if mibBuilder.loadTexts: cSpAclTable.setStatus('current')
if mibBuilder.loadTexts: cSpAclTable.setDescription('A table of SP access controls. The access control definition controls which packets are accepted or rejected. The access control may be applied before sending the packet to the routing table or may be applied after the packet is processed by the routing table.')
cSpAclTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 5, 1, 1), ).setIndexNames((0, "CISCO-SP-MIB", "cSpAclId"), (0, "CISCO-SP-MIB", "cSpAclEntryNumber"))
if mibBuilder.loadTexts: cSpAclTableEntry.setStatus('current')
if mibBuilder.loadTexts: cSpAclTableEntry.setDescription('A list of SP access control attributes.')
cSpAclId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 5, 1, 1, 1), CSpAclId())
if mibBuilder.loadTexts: cSpAclId.setStatus('current')
if mibBuilder.loadTexts: cSpAclId.setDescription('The identifier for this ACL.')
cSpAclEntryNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 5, 1, 1, 2), Unsigned32())
if mibBuilder.loadTexts: cSpAclEntryNumber.setStatus('current')
if mibBuilder.loadTexts: cSpAclEntryNumber.setDescription('An numeric value assigned to each access list entry. The values start with zero and increase by one.')
cSpAclType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("dpc", 1), ("opc", 2), ("pattern", 3), ("sio", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpAclType.setStatus('current')
if mibBuilder.loadTexts: cSpAclType.setDescription("This indicates which columns are used in determining the matching criteria for this access control. 'dpc' : cSpAclDpc and cSpAclDpcMask are the relevant columns. The packet is compared to cSpAclDpc in conjunction with cSpAclDpcMask to determine if the packet matches this access control. 'opc' : cSpAclOpc and cSpAclOpcMask are the relevant columns. The packet is compared to cSpAclOpc in conjunction with cSpAclOpcMask to determine if the packet matches this access control. 'pattern' : cSpAclPattern and cSpAclOffset are the relevant columns. The matching criteria is based on matching the pattern specified by cSpAclPattern at offset cSpAclOffset from the start of the packet. 'sio' : cSpAclSi is the relevant column. The SIO field of the packet is compared to cSpAclSi and a match is based on equality. ")
cSpAclDpc = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 5, 1, 1, 4), CSpPointCode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpAclDpc.setStatus('current')
if mibBuilder.loadTexts: cSpAclDpc.setDescription('The destination point code specified for this ACL.')
cSpAclDpcMask = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 5, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpAclDpcMask.setStatus('current')
if mibBuilder.loadTexts: cSpAclDpcMask.setDescription('The mask used to define which part of the point code in the packet is significant when comparing the destination point code with cSpAclDpc.')
cSpAclOpc = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 5, 1, 1, 6), CSpPointCode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpAclOpc.setStatus('current')
if mibBuilder.loadTexts: cSpAclOpc.setDescription('The origin point code specified in this ACL.')
cSpAclOpcMask = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 5, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpAclOpcMask.setStatus('current')
if mibBuilder.loadTexts: cSpAclOpcMask.setDescription('The mask used to define which part of the origin point code in the packet is significant when comparing the origin point code with cSpAclDpc.')
cSpAclSi = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 5, 1, 1, 8), CSpAclSi()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpAclSi.setStatus('current')
if mibBuilder.loadTexts: cSpAclSi.setDescription('The Service Indicator Octet.')
cSpAclPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 5, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpAclPattern.setStatus('current')
if mibBuilder.loadTexts: cSpAclPattern.setDescription('The pattern used to match a packet at offset cSpAclOffset.')
cSpAclOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 5, 1, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpAclOffset.setStatus('current')
if mibBuilder.loadTexts: cSpAclOffset.setDescription('The offset into the packet were we begin matching the pattern specified by cSpAclPattern is to start.')
cSpAclAction = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 5, 1, 1, 11), CSpAclAction()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpAclAction.setStatus('current')
if mibBuilder.loadTexts: cSpAclAction.setDescription('The action to be performed on the packet that matched this access control.')
cSpAccountingTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 6, 1), )
if mibBuilder.loadTexts: cSpAccountingTable.setStatus('current')
if mibBuilder.loadTexts: cSpAccountingTable.setDescription("A table of packet and byte counts for packets that match an ACL in the linkset's inbound ACL and in the outbound ACL. These counters are updated no more frequently than the value specified by cSpAccCheckPointPeriod. Polling more frequently than this period results in the same values being returned.")
cSpAccountingTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 6, 1, 1), ).setIndexNames((0, "CISCO-SP-MIB", "cSpAccTableId"), (0, "CISCO-SP-MIB", "cSpLinksetName"), (0, "CISCO-SP-MIB", "cSpAccDpc"), (0, "CISCO-SP-MIB", "cSpAccOpc"))
if mibBuilder.loadTexts: cSpAccountingTableEntry.setStatus('current')
if mibBuilder.loadTexts: cSpAccountingTableEntry.setDescription('A list of accounting objects.')
cSpAccTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("passed", 1), ("violation", 2))))
if mibBuilder.loadTexts: cSpAccTableId.setStatus('current')
if mibBuilder.loadTexts: cSpAccTableId.setDescription("The accounting table identifier. 'passed' : signifies that this table instance represents statistics for packets that matched an ACL in the linkset's inbound ACL and in the outbound ACL. 'violation' : signifies that this table instance represents statistics for packets that did not match an ACL in the linkset's inbound ACL and in the outbound ACL.")
cSpAccDpc = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 6, 1, 1, 2), CSpPointCode())
if mibBuilder.loadTexts: cSpAccDpc.setStatus('current')
if mibBuilder.loadTexts: cSpAccDpc.setDescription('The destination point code.')
cSpAccOpc = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 6, 1, 1, 3), CSpPointCode())
if mibBuilder.loadTexts: cSpAccOpc.setStatus('current')
if mibBuilder.loadTexts: cSpAccOpc.setDescription('The origin point code.')
cSpAccRcvdPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 6, 1, 1, 4), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpAccRcvdPackets.setStatus('current')
if mibBuilder.loadTexts: cSpAccRcvdPackets.setDescription('Sum of all received packets for this linkset, DPC and OPC combination.')
cSpAccHCRcvdPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 6, 1, 1, 5), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpAccHCRcvdPackets.setStatus('current')
if mibBuilder.loadTexts: cSpAccHCRcvdPackets.setDescription('Sum of all received packets for this linkset, DPC and OPC combination. This is the 64 bit version of cSpAccRcvdPackets .')
cSpAccSentPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 6, 1, 1, 6), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpAccSentPackets.setStatus('current')
if mibBuilder.loadTexts: cSpAccSentPackets.setDescription('Sum of all transmitted packets for this linkset, DPC and OPC combination.')
cSpAccHCSentPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 6, 1, 1, 7), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpAccHCSentPackets.setStatus('current')
if mibBuilder.loadTexts: cSpAccHCSentPackets.setDescription('Sum of all transmitted packets for this linkset, DPC and OPC combination. This is the 64 bit version of cSpAccSentPackets .')
cSpAccRcvdBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 6, 1, 1, 8), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpAccRcvdBytes.setStatus('current')
if mibBuilder.loadTexts: cSpAccRcvdBytes.setDescription('Sum of all received bytes for this linkset, DPC and OPC combination.')
cSpAccHCRcvdBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 6, 1, 1, 9), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpAccHCRcvdBytes.setStatus('current')
if mibBuilder.loadTexts: cSpAccHCRcvdBytes.setDescription('Sum of all received bytes for this linkset, DPC and OPC combination. This is the 64 bit version of cSpAccRcvdBytes .')
cSpAccSentBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 6, 1, 1, 10), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpAccSentBytes.setStatus('current')
if mibBuilder.loadTexts: cSpAccSentBytes.setDescription('Sum of all transmitted bytes for this linkset, DPC and OPC combination.')
cSpAccHCSentBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 6, 1, 1, 11), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpAccHCSentBytes.setStatus('current')
if mibBuilder.loadTexts: cSpAccHCSentBytes.setDescription('Sum of all transmitted bytes for this linkset, DPC and OPC combination. This is the 64 bit version of cSpAccSentBytes .')
cSpAccSnmmRcvdPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 6, 1, 1, 12), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpAccSnmmRcvdPackets.setStatus('current')
if mibBuilder.loadTexts: cSpAccSnmmRcvdPackets.setDescription('Count of Signalling Network Management (SNM) packets received on this linkset, DPC and OPC combination.')
cSpAccHCSnmmRcvdPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 6, 1, 1, 13), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpAccHCSnmmRcvdPackets.setStatus('current')
if mibBuilder.loadTexts: cSpAccHCSnmmRcvdPackets.setDescription('Count of Signalling Network Management (SNM) packets received on this linkset, DPC and OPC combination. This is the 64 bit version of cSpAccSnmmRcvdPackets .')
cSpAccSnmmRcvdBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 6, 1, 1, 14), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpAccSnmmRcvdBytes.setStatus('current')
if mibBuilder.loadTexts: cSpAccSnmmRcvdBytes.setDescription('Count of bytes contained in the Signalling Network Management (SNM) messages received on this linkset, DPC and OPC combination.')
cSpAccHCSnmmRcvdBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 6, 1, 1, 15), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpAccHCSnmmRcvdBytes.setStatus('current')
if mibBuilder.loadTexts: cSpAccHCSnmmRcvdBytes.setDescription('Count of bytes contained in the Signalling Network Management (SNM) messages received on this linkset, DPC and OPC combination. This is the 64 bit version of cSpAccSnmmRcvdBytes .')
cSpAccSnmmSentPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 6, 1, 1, 16), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpAccSnmmSentPackets.setStatus('current')
if mibBuilder.loadTexts: cSpAccSnmmSentPackets.setDescription('Count of Signalling Network Management (SNM) packets transmitted on this linkset, DPC and OPC combination.')
cSpAccHCSnmmSentPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 6, 1, 1, 17), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpAccHCSnmmSentPackets.setStatus('current')
if mibBuilder.loadTexts: cSpAccHCSnmmSentPackets.setDescription('Count of Signalling Network Management (SNM) packets transmitted on this linkset, DPC and OPC combination. This is the 64 bit version of cSpAccSnmmSentPackets .')
cSpAccSnmmSentBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 6, 1, 1, 18), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpAccSnmmSentBytes.setStatus('current')
if mibBuilder.loadTexts: cSpAccSnmmSentBytes.setDescription('Count of Signalling Network Management (SNM) bytes transmitted on this linkset, DPC and OPC combination.')
cSpAccHCSnmmSentBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 6, 1, 1, 19), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpAccHCSnmmSentBytes.setStatus('current')
if mibBuilder.loadTexts: cSpAccHCSnmmSentBytes.setDescription('Count of Signalling Network Management (SNM) bytes transmitted on this linkset, DPC and OPC combination. This is the 64 bit version of cSpAccSnmmSentBytes .')
cSpAccSntmRcvdPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 6, 1, 1, 20), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpAccSntmRcvdPackets.setStatus('current')
if mibBuilder.loadTexts: cSpAccSntmRcvdPackets.setDescription('Count of Signalling Network Testing and maintenance (MTN) packets received on this linkset, DPC and OPC combination.')
cSpAccHCSntmRcvdPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 6, 1, 1, 21), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpAccHCSntmRcvdPackets.setStatus('current')
if mibBuilder.loadTexts: cSpAccHCSntmRcvdPackets.setDescription('Count of Signalling Network Testing and maintenance (MTN) packets received on this linkset, DPC and OPC combination. This is the 64 bit version of cSpAccSntmRcvdPackets .')
cSpAccSntmRcvdBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 6, 1, 1, 22), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpAccSntmRcvdBytes.setStatus('current')
if mibBuilder.loadTexts: cSpAccSntmRcvdBytes.setDescription('Count of Signalling Network Testing and maintenance (MTN) bytes received on this linkset, DPC and OPC combination.')
cSpAccHCSntmRcvdBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 6, 1, 1, 23), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpAccHCSntmRcvdBytes.setStatus('current')
if mibBuilder.loadTexts: cSpAccHCSntmRcvdBytes.setDescription('Count of Signalling Network Testing and maintenance (MTN) bytes received on this linkset, DPC and OPC combination. This is the 64 bit version of cSpAccSntmRcvdBytes .')
cSpAccSntmSentPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 6, 1, 1, 24), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpAccSntmSentPackets.setStatus('current')
if mibBuilder.loadTexts: cSpAccSntmSentPackets.setDescription('Count of Signalling Network Testing and maintenance (MTN) packets transmitted on this linkset, DPC and OPC combination.')
cSpAccHCSntmSentPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 6, 1, 1, 25), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpAccHCSntmSentPackets.setStatus('current')
if mibBuilder.loadTexts: cSpAccHCSntmSentPackets.setDescription('Count of Signalling Network Testing and maintenance (MTN) packets transmitted on this linkset, DPC and OPC combination. This is the 64 bit version of cSpAccSntmSentPackets .')
cSpAccSntmSentBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 6, 1, 1, 26), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpAccSntmSentBytes.setStatus('current')
if mibBuilder.loadTexts: cSpAccSntmSentBytes.setDescription('Count of Signalling Network Testing and maintenance (MTN) bytes transmitted on this linkset, DPC and OPC combination.')
cSpAccHCSntmSentBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 6, 1, 1, 27), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpAccHCSntmSentBytes.setStatus('current')
if mibBuilder.loadTexts: cSpAccHCSntmSentBytes.setDescription('Count of Signalling Network Testing and maintenance (MTN) bytes transmitted on this linkset, DPC and OPC combination. This is the 64 bit version of cSpAccSntmSentBytes .')
cSpAccSpare2RcvdPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 6, 1, 1, 28), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpAccSpare2RcvdPackets.setStatus('current')
if mibBuilder.loadTexts: cSpAccSpare2RcvdPackets.setDescription('Count of packets with Service Indicator value 2 received on this linkset, DPC and OPC combination.')
cSpAccHCSpare2RcvdPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 6, 1, 1, 29), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpAccHCSpare2RcvdPackets.setStatus('current')
if mibBuilder.loadTexts: cSpAccHCSpare2RcvdPackets.setDescription('Count of packets with Service Indicator value 2 received on this linkset, DPC and OPC combination. This is the 64 bit version of cSpAccSpare2RcvdPackets .')
cSpAccSpare2RcvdBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 6, 1, 1, 30), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpAccSpare2RcvdBytes.setStatus('current')
if mibBuilder.loadTexts: cSpAccSpare2RcvdBytes.setDescription('Count of bytes with Service Indicator value 2 received on this linkset, DPC and OPC combination.')
cSpAccHCSpare2RcvdBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 6, 1, 1, 31), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpAccHCSpare2RcvdBytes.setStatus('current')
if mibBuilder.loadTexts: cSpAccHCSpare2RcvdBytes.setDescription('Count of bytes with Service Indicator value 2 received on this linkset, DPC and OPC combination. This is the 64 bit version of cSpAccSpare2RcvdBytes .')
cSpAccSpare2SentPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 6, 1, 1, 32), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpAccSpare2SentPackets.setStatus('current')
if mibBuilder.loadTexts: cSpAccSpare2SentPackets.setDescription('Count of packets with Service Indicator value 2 transmitted on this linkset, DPC and OPC combination.')
cSpAccHCSpare2SentPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 6, 1, 1, 33), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpAccHCSpare2SentPackets.setStatus('current')
if mibBuilder.loadTexts: cSpAccHCSpare2SentPackets.setDescription('Count of packets with Service Indicator value 2 transmitted on this linkset, DPC and OPC combination. This is the 64 bit version of cSpAccSpare2SentPackets .')
cSpAccSpare2SentBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 6, 1, 1, 34), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpAccSpare2SentBytes.setStatus('current')
if mibBuilder.loadTexts: cSpAccSpare2SentBytes.setDescription('Count of bytes with Service Indicator value 2 transmitted on this linkset, DPC and OPC combination.')
cSpAccHCSpare2SentBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 6, 1, 1, 35), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpAccHCSpare2SentBytes.setStatus('current')
if mibBuilder.loadTexts: cSpAccHCSpare2SentBytes.setDescription('Count of bytes with Service Indicator value 2 transmitted on this linkset, DPC and OPC combination. This is the 64 bit version of cSpAccSpare2SentBytes .')
cSpAccSccpRcvdPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 6, 1, 1, 36), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpAccSccpRcvdPackets.setStatus('current')
if mibBuilder.loadTexts: cSpAccSccpRcvdPackets.setDescription('Count of Signaling Connection Control Part (SCCP) packets received on this linkset, DPC and OPC combination.')
cSpAccHCSccpRcvdPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 6, 1, 1, 37), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpAccHCSccpRcvdPackets.setStatus('current')
if mibBuilder.loadTexts: cSpAccHCSccpRcvdPackets.setDescription('Count of Signaling Connection Control Part (SCCP) packets received on this linkset, DPC and OPC combination. This is the 64 bit version of cSpAccSccpRcvdPackets .')
cSpAccSccpRcvdBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 6, 1, 1, 38), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpAccSccpRcvdBytes.setStatus('current')
if mibBuilder.loadTexts: cSpAccSccpRcvdBytes.setDescription('Count of Signaling Connection Control Part (SCCP) bytes received on this linkset, DPC and OPC combination.')
cSpAccHCSccpRcvdBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 6, 1, 1, 39), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpAccHCSccpRcvdBytes.setStatus('current')
if mibBuilder.loadTexts: cSpAccHCSccpRcvdBytes.setDescription('Count of Signaling Connection Control Part (SCCP) bytes received on this linkset, DPC and OPC combination. This is the 64 bit version of cSpAccSccpRcvdBytes .')
cSpAccSccpSentPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 6, 1, 1, 40), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpAccSccpSentPackets.setStatus('current')
if mibBuilder.loadTexts: cSpAccSccpSentPackets.setDescription('Count of Signaling Connection Control Part (SCCP) packets transmitted on this linkset, DPC and OPC combination.')
cSpAccHCSccpSentPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 6, 1, 1, 41), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpAccHCSccpSentPackets.setStatus('current')
if mibBuilder.loadTexts: cSpAccHCSccpSentPackets.setDescription('Count of Signaling Connection Control Part (SCCP) packets transmitted on this linkset, DPC and OPC combination. This is the 64 bit version of cSpAccSccpSentPackets .')
cSpAccSccpSentBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 6, 1, 1, 42), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpAccSccpSentBytes.setStatus('current')
if mibBuilder.loadTexts: cSpAccSccpSentBytes.setDescription('Count of Signaling Connection Control Part (SCCP) bytes transmitted on this linkset, DPC and OPC combination.')
cSpAccHCSccpSentBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 6, 1, 1, 43), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpAccHCSccpSentBytes.setStatus('current')
if mibBuilder.loadTexts: cSpAccHCSccpSentBytes.setDescription('Count of Signaling Connection Control Part (SCCP) bytes transmitted on this linkset, DPC and OPC combination. This is the 64 bit version of cSpAccSccpSentBytes .')
cSpAccTupRcvdPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 6, 1, 1, 44), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpAccTupRcvdPackets.setStatus('current')
if mibBuilder.loadTexts: cSpAccTupRcvdPackets.setDescription('Count of Telephone User Part (TUP) packets received on this linkset, DPC and OPC combination.')
cSpAccHCTupRcvdPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 6, 1, 1, 45), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpAccHCTupRcvdPackets.setStatus('current')
if mibBuilder.loadTexts: cSpAccHCTupRcvdPackets.setDescription('Count of Telephone User Part (TUP) packets received on this linkset, DPC and OPC combination. This is the 64 bit version of cSpAccTupRcvdPackets .')
cSpAccTupRcvdBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 6, 1, 1, 46), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpAccTupRcvdBytes.setStatus('current')
if mibBuilder.loadTexts: cSpAccTupRcvdBytes.setDescription('Count of Telephone User Part (TUP) bytes received on this linkset, DPC and OPC combination.')
cSpAccHCTupRcvdBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 6, 1, 1, 47), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpAccHCTupRcvdBytes.setStatus('current')
if mibBuilder.loadTexts: cSpAccHCTupRcvdBytes.setDescription('Count of Telephone User Part (TUP) bytes received on this linkset, DPC and OPC combination. This is the 64 bit version of cSpAccTupRcvdBytes .')
cSpAccTupSentPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 6, 1, 1, 48), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpAccTupSentPackets.setStatus('current')
if mibBuilder.loadTexts: cSpAccTupSentPackets.setDescription('Count of Telephone User Part (TUP) packets transmitted on this linkset, DPC and OPC combination.')
cSpAccHCTupSentPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 6, 1, 1, 49), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpAccHCTupSentPackets.setStatus('current')
if mibBuilder.loadTexts: cSpAccHCTupSentPackets.setDescription('Count of Telephone User Part (TUP) packets transmitted on this linkset, DPC and OPC combination. This is the 64 bit version of cSpAccTupSentPackets .')
cSpAccTupSentBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 6, 1, 1, 50), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpAccTupSentBytes.setStatus('current')
if mibBuilder.loadTexts: cSpAccTupSentBytes.setDescription('Count of Telephone User Part (TUP) bytes transmitted on this linkset, DPC and OPC combination.')
cSpAccHCTupSentBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 6, 1, 1, 51), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpAccHCTupSentBytes.setStatus('current')
if mibBuilder.loadTexts: cSpAccHCTupSentBytes.setDescription('Count of Telephone User Part (TUP) bytes transmitted on this linkset, DPC and OPC combination. This is the 64 bit version of cSpAccTupSentBytes .')
cSpAccIsupRcvdPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 6, 1, 1, 52), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpAccIsupRcvdPackets.setStatus('current')
if mibBuilder.loadTexts: cSpAccIsupRcvdPackets.setDescription('Count of ISDN User Part (ISUP) packets received on this linkset, DPC and OPC combination.')
cSpAccHCIsupRcvdPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 6, 1, 1, 53), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpAccHCIsupRcvdPackets.setStatus('current')
if mibBuilder.loadTexts: cSpAccHCIsupRcvdPackets.setDescription('Count of ISDN User Part (ISUP) packets received on this linkset, DPC and OPC combination. This is the 64 bit version of cSpAccIsupRcvdPackets .')
cSpAccIsupRcvdBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 6, 1, 1, 54), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpAccIsupRcvdBytes.setStatus('current')
if mibBuilder.loadTexts: cSpAccIsupRcvdBytes.setDescription('Count of ISDN User Part (ISUP) bytes received on this linkset, DPC and OPC combination.')
cSpAccHCIsupRcvdBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 6, 1, 1, 55), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpAccHCIsupRcvdBytes.setStatus('current')
if mibBuilder.loadTexts: cSpAccHCIsupRcvdBytes.setDescription('Count of ISDN User Part (ISUP) bytes received on this linkset, DPC and OPC combination. This is the 64 bit version of cSpAccIsupRcvdBytes .')
cSpAccIsupSentPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 6, 1, 1, 56), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpAccIsupSentPackets.setStatus('current')
if mibBuilder.loadTexts: cSpAccIsupSentPackets.setDescription('Count of ISDN User Part (ISUP) packets transmitted on this linkset, DPC and OPC combination.')
cSpAccHCIsupSentPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 6, 1, 1, 57), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpAccHCIsupSentPackets.setStatus('current')
if mibBuilder.loadTexts: cSpAccHCIsupSentPackets.setDescription('Count of ISDN User Part (ISUP) packets transmitted on this linkset, DPC and OPC combination. This is the 64 bit version of cSpAccIsupSentPackets .')
cSpAccIsupSentBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 6, 1, 1, 58), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpAccIsupSentBytes.setStatus('current')
if mibBuilder.loadTexts: cSpAccIsupSentBytes.setDescription('Count of ISDN User Part (ISUP) bytes transmitted on this linkset, DPC and OPC combination.')
cSpAccHCIsupSentBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 6, 1, 1, 59), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpAccHCIsupSentBytes.setStatus('current')
if mibBuilder.loadTexts: cSpAccHCIsupSentBytes.setDescription('Count of ISDN User Part (ISUP) bytes transmitted on this linkset, DPC and OPC combination. This is the 64 bit version of cSpAccIsupSentBytes .')
cSpAccDupcRcvdPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 6, 1, 1, 60), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpAccDupcRcvdPackets.setStatus('current')
if mibBuilder.loadTexts: cSpAccDupcRcvdPackets.setDescription('Count of Data User Part (call and circuit-related messages) - Dupc packets received on this linkset, DPC and OPC combination.')
cSpAccHCDupcRcvdPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 6, 1, 1, 61), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpAccHCDupcRcvdPackets.setStatus('current')
if mibBuilder.loadTexts: cSpAccHCDupcRcvdPackets.setDescription('Count of Data User Part (call and circuit-related messages) - Dupc packets received on this linkset, DPC and OPC combination. This is the 64 bit version of cSpAccDupcRcvdPackets .')
cSpAccDupcRcvdBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 6, 1, 1, 62), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpAccDupcRcvdBytes.setStatus('current')
if mibBuilder.loadTexts: cSpAccDupcRcvdBytes.setDescription('Count of Dupc bytes received on this linkset, DPC and OPC combination.')
cSpAccHCDupcRcvdBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 6, 1, 1, 63), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpAccHCDupcRcvdBytes.setStatus('current')
if mibBuilder.loadTexts: cSpAccHCDupcRcvdBytes.setDescription('Count of Dupc bytes received on this linkset, DPC and OPC combination. This is the 64 bit version of cSpAccDupcRcvdBytes .')
cSpAccDupcSentPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 6, 1, 1, 64), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpAccDupcSentPackets.setStatus('current')
if mibBuilder.loadTexts: cSpAccDupcSentPackets.setDescription('Count of Dupc packets transmitted on this linkset, DPC and OPC combination.')
cSpAccHCDupcSentPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 6, 1, 1, 65), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpAccHCDupcSentPackets.setStatus('current')
if mibBuilder.loadTexts: cSpAccHCDupcSentPackets.setDescription('Count of Dupc packets transmitted on this linkset, DPC and OPC combination. This is the 64 bit version of cSpAccDupcSentPackets .')
cSpAccDupcSentBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 6, 1, 1, 66), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpAccDupcSentBytes.setStatus('current')
if mibBuilder.loadTexts: cSpAccDupcSentBytes.setDescription('Count of Dupc bytes transmitted on this linkset, DPC and OPC combination.')
cSpAccHCDupcSentBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 6, 1, 1, 67), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpAccHCDupcSentBytes.setStatus('current')
if mibBuilder.loadTexts: cSpAccHCDupcSentBytes.setDescription('Count of Dupc bytes transmitted on this linkset, DPC and OPC combination. This is the 64 bit version of cSpAccDupcSentBytes .')
cSpAccDupfRcvdPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 6, 1, 1, 68), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpAccDupfRcvdPackets.setStatus('current')
if mibBuilder.loadTexts: cSpAccDupfRcvdPackets.setDescription('Count of Data User Part (facility registration and cancellation messages) - Dupf packets received on this linkset, DPC and OPC combination.')
cSpAccHCDupfRcvdPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 6, 1, 1, 69), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpAccHCDupfRcvdPackets.setStatus('current')
if mibBuilder.loadTexts: cSpAccHCDupfRcvdPackets.setDescription('Count of Data User Part (facility registration and cancellation messages) - Dupf packets received on this linkset, DPC and OPC combination. This is the 64 bit version of cSpAccDupfRcvdPackets .')
cSpAccDupfRcvdBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 6, 1, 1, 70), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpAccDupfRcvdBytes.setStatus('current')
if mibBuilder.loadTexts: cSpAccDupfRcvdBytes.setDescription('Count of Dupf bytes received on this linkset, DPC and OPC combination.')
cSpAccHCDupfRcvdBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 6, 1, 1, 71), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpAccHCDupfRcvdBytes.setStatus('current')
if mibBuilder.loadTexts: cSpAccHCDupfRcvdBytes.setDescription('Count of Dupf bytes received on this linkset, DPC and OPC combination. This is the 64 bit version of cSpAccDupfRcvdBytes .')
cSpAccDupfSentPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 6, 1, 1, 72), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpAccDupfSentPackets.setStatus('current')
if mibBuilder.loadTexts: cSpAccDupfSentPackets.setDescription('Count of Dupf packets transmitted on this linkset, DPC and OPC combination.')
cSpAccHCDupfSentPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 6, 1, 1, 73), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpAccHCDupfSentPackets.setStatus('current')
if mibBuilder.loadTexts: cSpAccHCDupfSentPackets.setDescription('Count of Dupf packets transmitted on this linkset, DPC and OPC combination. This is the 64 bit version of cSpAccDupfSentPackets .')
cSpAccDupfSentBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 6, 1, 1, 74), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpAccDupfSentBytes.setStatus('current')
if mibBuilder.loadTexts: cSpAccDupfSentBytes.setDescription('Count of Dupf bytes transmitted on this linkset, DPC and OPC combination.')
cSpAccHCDupfSentBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 6, 1, 1, 75), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpAccHCDupfSentBytes.setStatus('current')
if mibBuilder.loadTexts: cSpAccHCDupfSentBytes.setDescription('Count of Dupf bytes transmitted on this linkset, DPC and OPC combination. This is the 64 bit version of cSpAccDupfSentBytes .')
cSpAccMtupRcvdPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 6, 1, 1, 76), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpAccMtupRcvdPackets.setStatus('current')
if mibBuilder.loadTexts: cSpAccMtupRcvdPackets.setDescription('Count of Reserved for MTP Testing User Part (Mtup) packets received on this linkset, DPC and OPC combination.')
cSpAccHCMtupRcvdPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 6, 1, 1, 77), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpAccHCMtupRcvdPackets.setStatus('current')
if mibBuilder.loadTexts: cSpAccHCMtupRcvdPackets.setDescription('Count of Reserved for MTP Testing User Part (Mtup) packets received on this linkset, DPC and OPC combination. This is the 64 bit version of cSpAccMtupRcvdPackets .')
cSpAccMtupRcvdBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 6, 1, 1, 78), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpAccMtupRcvdBytes.setStatus('current')
if mibBuilder.loadTexts: cSpAccMtupRcvdBytes.setDescription('Count of Reserved for MTP Testing User Part (Mtup) bytes received on this linkset, DPC and OPC combination.')
cSpAccHCMtupRcvdBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 6, 1, 1, 79), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpAccHCMtupRcvdBytes.setStatus('current')
if mibBuilder.loadTexts: cSpAccHCMtupRcvdBytes.setDescription('Count of Reserved for MTP Testing User Part (Mtup) bytes received on this linkset, DPC and OPC combination. This is the 64 bit version of cSpAccMtupRcvdBytes .')
cSpAccMtupSentPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 6, 1, 1, 80), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpAccMtupSentPackets.setStatus('current')
if mibBuilder.loadTexts: cSpAccMtupSentPackets.setDescription('Count of Reserved for MTP Testing User Part (Mtup) packets transmitted on this linkset, DPC and OPC combination.')
cSpAccHCMtupSentPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 6, 1, 1, 81), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpAccHCMtupSentPackets.setStatus('current')
if mibBuilder.loadTexts: cSpAccHCMtupSentPackets.setDescription('Count of Reserved for MTP Testing User Part (Mtup) packets transmitted on this linkset, DPC and OPC combination. This is the 64 bit version of cSpAccMtupSentPackets .')
cSpAccMtupSentBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 6, 1, 1, 82), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpAccMtupSentBytes.setStatus('current')
if mibBuilder.loadTexts: cSpAccMtupSentBytes.setDescription('Count of Reserved for MTP Testing User Part (Mtup) bytes transmitted on this linkset, DPC and OPC combination.')
cSpAccHCMtupSentBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 6, 1, 1, 83), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpAccHCMtupSentBytes.setStatus('current')
if mibBuilder.loadTexts: cSpAccHCMtupSentBytes.setDescription('Count of Reserved for MTP Testing User Part (Mtup) bytes transmitted on this linkset, DPC and OPC combination. This is the 64 bit version of cSpAccMtupSentBytes .')
cSpAccBisupRcvdPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 6, 1, 1, 84), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpAccBisupRcvdPackets.setStatus('current')
if mibBuilder.loadTexts: cSpAccBisupRcvdPackets.setDescription('Count of Broadband ISDN User Part (Bisup) packets received on this linkset, DPC and OPC combination.')
cSpAccHCBisupRcvdPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 6, 1, 1, 85), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpAccHCBisupRcvdPackets.setStatus('current')
if mibBuilder.loadTexts: cSpAccHCBisupRcvdPackets.setDescription('Count of Broadband ISDN User Part (Bisup) packets received on this linkset, DPC and OPC combination. This is the 64 bit version of cSpAccBisupRcvdPackets .')
cSpAccBisupRcvdBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 6, 1, 1, 86), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpAccBisupRcvdBytes.setStatus('current')
if mibBuilder.loadTexts: cSpAccBisupRcvdBytes.setDescription('Count of Broadband ISDN User Part (Bisup) bytes received on this linkset, DPC and OPC combination.')
cSpAccHCBisupRcvdBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 6, 1, 1, 87), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpAccHCBisupRcvdBytes.setStatus('current')
if mibBuilder.loadTexts: cSpAccHCBisupRcvdBytes.setDescription('Count of Broadband ISDN User Part (Bisup) bytes received on this linkset, DPC and OPC combination. This is the 64 bit version of cSpAccBisupRcvdBytes .')
cSpAccBisupSentPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 6, 1, 1, 88), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpAccBisupSentPackets.setStatus('current')
if mibBuilder.loadTexts: cSpAccBisupSentPackets.setDescription('Count of Broadband ISDN User Part (Bisup) packets transmitted on this linkset, DPC and OPC combination.')
cSpAccHCBisupSentPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 6, 1, 1, 89), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpAccHCBisupSentPackets.setStatus('current')
if mibBuilder.loadTexts: cSpAccHCBisupSentPackets.setDescription('Count of Broadband ISDN User Part (Bisup) packets transmitted on this linkset, DPC and OPC combination. This is the 64 bit version of cSpAccBisupSentPackets .')
cSpAccBisupSentBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 6, 1, 1, 90), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpAccBisupSentBytes.setStatus('current')
if mibBuilder.loadTexts: cSpAccBisupSentBytes.setDescription('Count of Broadband ISDN User Part (Bisup) bytes transmitted on this linkset, DPC and OPC combination.')
cSpAccHCBisupSentBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 6, 1, 1, 91), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpAccHCBisupSentBytes.setStatus('current')
if mibBuilder.loadTexts: cSpAccHCBisupSentBytes.setDescription('Count of Broadband ISDN User Part (Bisup) bytes transmitted on this linkset, DPC and OPC combination. This is the 64 bit version of cSpAccBisupSentBytes .')
cSpAccSisupRcvdPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 6, 1, 1, 92), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpAccSisupRcvdPackets.setStatus('current')
if mibBuilder.loadTexts: cSpAccSisupRcvdPackets.setDescription('Count of Satellite ISDN User Part (Sisup) packets received on this linkset, DPC and OPC combination.')
cSpAccHCSisupRcvdPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 6, 1, 1, 93), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpAccHCSisupRcvdPackets.setStatus('current')
if mibBuilder.loadTexts: cSpAccHCSisupRcvdPackets.setDescription('Count of Satellite ISDN User Part (Sisup) packets received on this linkset, DPC and OPC combination. This is the 64 bit version of cSpAccSisupRcvdPackets .')
cSpAccSisupRcvdBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 6, 1, 1, 94), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpAccSisupRcvdBytes.setStatus('current')
if mibBuilder.loadTexts: cSpAccSisupRcvdBytes.setDescription('Count of Satellite ISDN User Part (Sisup) bytes received on this linkset, DPC and OPC combination.')
cSpAccHCSisupRcvdBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 6, 1, 1, 95), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpAccHCSisupRcvdBytes.setStatus('current')
if mibBuilder.loadTexts: cSpAccHCSisupRcvdBytes.setDescription('Count of Satellite ISDN User Part (Sisup) bytes received on this linkset, DPC and OPC combination. This is the 64 bit version of cSpAccSisupRcvdBytes .')
cSpAccSisupSentPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 6, 1, 1, 96), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpAccSisupSentPackets.setStatus('current')
if mibBuilder.loadTexts: cSpAccSisupSentPackets.setDescription('Count of Satellite ISDN User Part (Sisup) packets transmitted on this linkset, DPC and OPC combination.')
cSpAccHCSisupSentPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 6, 1, 1, 97), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpAccHCSisupSentPackets.setStatus('current')
if mibBuilder.loadTexts: cSpAccHCSisupSentPackets.setDescription('Count of Satellite ISDN User Part (Sisup) packets transmitted on this linkset, DPC and OPC combination. This is the 64 bit version of cSpAccSisupSentPackets .')
cSpAccSisupSentBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 6, 1, 1, 98), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpAccSisupSentBytes.setStatus('current')
if mibBuilder.loadTexts: cSpAccSisupSentBytes.setDescription('Count of Satellite ISDN User Part (Sisup) bytes transmitted on this linkset, DPC and OPC combination.')
cSpAccHCSisupSentBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 6, 1, 1, 99), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpAccHCSisupSentBytes.setStatus('current')
if mibBuilder.loadTexts: cSpAccHCSisupSentBytes.setDescription('Count of Satellite ISDN User Part (Sisup) bytes transmitted on this linkset, DPC and OPC combination. This is the 64 bit version of cSpAccSisupSentBytes .')
cSpAccSpare11RcvdPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 6, 1, 1, 100), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpAccSpare11RcvdPackets.setStatus('current')
if mibBuilder.loadTexts: cSpAccSpare11RcvdPackets.setDescription('Count of packets with Service Indicator value 11 received on this linkset, DPC and OPC combination.')
cSpAccHCSpare11RcvdPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 6, 1, 1, 101), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpAccHCSpare11RcvdPackets.setStatus('current')
if mibBuilder.loadTexts: cSpAccHCSpare11RcvdPackets.setDescription('Count of packets with Service Indicator value 11 received on this linkset, DPC and OPC combination. This is the 64 bit version of cSpAccSpare11RcvdPackets .')
cSpAccSpare11RcvdBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 6, 1, 1, 102), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpAccSpare11RcvdBytes.setStatus('current')
if mibBuilder.loadTexts: cSpAccSpare11RcvdBytes.setDescription('Count of bytes with Service Indicator value 11 received on this linkset, DPC and OPC combination.')
cSpAccHCSpare11RcvdBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 6, 1, 1, 103), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpAccHCSpare11RcvdBytes.setStatus('current')
if mibBuilder.loadTexts: cSpAccHCSpare11RcvdBytes.setDescription('Count of bytes with Service Indicator value 11 received on this linkset, DPC and OPC combination. This is the 64 bit version of cSpAccSpare11RcvdBytes .')
cSpAccSpare11SentPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 6, 1, 1, 104), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpAccSpare11SentPackets.setStatus('current')
if mibBuilder.loadTexts: cSpAccSpare11SentPackets.setDescription('Count of packets with Service Indicator value 11 transmitted on this linkset, DPC and OPC combination.')
cSpAccHCSpare11SentPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 6, 1, 1, 105), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpAccHCSpare11SentPackets.setStatus('current')
if mibBuilder.loadTexts: cSpAccHCSpare11SentPackets.setDescription('Count of packets with Service Indicator value 11 transmitted on this linkset, DPC and OPC combination. This is the 64 bit version of cSpAccSpare11SentPackets .')
cSpAccSpare11SentBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 6, 1, 1, 106), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpAccSpare11SentBytes.setStatus('current')
if mibBuilder.loadTexts: cSpAccSpare11SentBytes.setDescription('Count of bytes with Service Indicator value 11 transmitted on this linkset, DPC and OPC combination.')
cSpAccHCSpare11SentBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 6, 1, 1, 107), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpAccHCSpare11SentBytes.setStatus('current')
if mibBuilder.loadTexts: cSpAccHCSpare11SentBytes.setDescription('Count of bytes with Service Indicator value 11 transmitted on this linkset, DPC and OPC combination. This is the 64 bit version of cSpAccSpare11SentBytes .')
cSpAccSpare12RcvdPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 6, 1, 1, 108), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpAccSpare12RcvdPackets.setStatus('current')
if mibBuilder.loadTexts: cSpAccSpare12RcvdPackets.setDescription('Count of packets with Service Indicator value 12 received on this linkset, DPC and OPC combination.')
cSpAccHCSpare12RcvdPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 6, 1, 1, 109), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpAccHCSpare12RcvdPackets.setStatus('current')
if mibBuilder.loadTexts: cSpAccHCSpare12RcvdPackets.setDescription('Count of packets with Service Indicator value 12 received on this linkset, DPC and OPC combination. This is the 64 bit version of cSpAccSpare12RcvdPackets .')
cSpAccSpare12RcvdBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 6, 1, 1, 110), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpAccSpare12RcvdBytes.setStatus('current')
if mibBuilder.loadTexts: cSpAccSpare12RcvdBytes.setDescription('Count of bytes with Service Indicator value 12 received on this linkset, DPC and OPC combination.')
cSpAccHCSpare12RcvdBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 6, 1, 1, 111), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpAccHCSpare12RcvdBytes.setStatus('current')
if mibBuilder.loadTexts: cSpAccHCSpare12RcvdBytes.setDescription('Count of bytes with Service Indicator value 12 received on this linkset, DPC and OPC combination. This is the 64 bit version of cSpAccSpare12RcvdBytes .')
cSpAccSpare12SentPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 6, 1, 1, 112), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpAccSpare12SentPackets.setStatus('current')
if mibBuilder.loadTexts: cSpAccSpare12SentPackets.setDescription('Count of packets with Service Indicator value 12 transmitted on this linkset, DPC and OPC combination.')
cSpAccHCSpare12SentPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 6, 1, 1, 113), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpAccHCSpare12SentPackets.setStatus('current')
if mibBuilder.loadTexts: cSpAccHCSpare12SentPackets.setDescription('Count of packets with Service Indicator value 12 transmitted on this linkset, DPC and OPC combination. This is the 64 bit version of cSpAccSpare12SentPackets .')
cSpAccSpare12SentBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 6, 1, 1, 114), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpAccSpare12SentBytes.setStatus('current')
if mibBuilder.loadTexts: cSpAccSpare12SentBytes.setDescription('Count of bytes with Service Indicator value 12 transmitted on this linkset, DPC and OPC combination.')
cSpAccHCSpare12SentBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 6, 1, 1, 115), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpAccHCSpare12SentBytes.setStatus('current')
if mibBuilder.loadTexts: cSpAccHCSpare12SentBytes.setDescription('Count of bytes with Service Indicator value 12 transmitted on this linkset, DPC and OPC combination. This is the 64 bit version of cSpAccSpare12SentBytes .')
cSpAccSpare13RcvdPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 6, 1, 1, 116), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpAccSpare13RcvdPackets.setStatus('current')
if mibBuilder.loadTexts: cSpAccSpare13RcvdPackets.setDescription('Count of packets with Service Indicator value 13 received on this linkset, DPC and OPC combination.')
cSpAccHCSpare13RcvdPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 6, 1, 1, 117), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpAccHCSpare13RcvdPackets.setStatus('current')
if mibBuilder.loadTexts: cSpAccHCSpare13RcvdPackets.setDescription('Count of packets with Service Indicator value 13 received on this linkset, DPC and OPC combination. This is the 64 bit version of cSpAccSpare13RcvdPackets .')
cSpAccSpare13RcvdBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 6, 1, 1, 118), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpAccSpare13RcvdBytes.setStatus('current')
if mibBuilder.loadTexts: cSpAccSpare13RcvdBytes.setDescription('Count of bytes with Service Indicator value 13 received on this linkset, DPC and OPC combination.')
cSpAccHCSpare13RcvdBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 6, 1, 1, 119), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpAccHCSpare13RcvdBytes.setStatus('current')
if mibBuilder.loadTexts: cSpAccHCSpare13RcvdBytes.setDescription('Count of bytes with Service Indicator value 13 received on this linkset, DPC and OPC combination. This is the 64 bit version of cSpAccSpare13RcvdBytes .')
cSpAccSpare13SentPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 6, 1, 1, 120), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpAccSpare13SentPackets.setStatus('current')
if mibBuilder.loadTexts: cSpAccSpare13SentPackets.setDescription('Count of packets with Service Indicator value 13 transmitted on this linkset, DPC and OPC combination.')
cSpAccHCSpare13SentPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 6, 1, 1, 121), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpAccHCSpare13SentPackets.setStatus('current')
if mibBuilder.loadTexts: cSpAccHCSpare13SentPackets.setDescription('Count of packets with Service Indicator value 13 transmitted on this linkset, DPC and OPC combination. This is the 64 bit version of cSpAccSpare13SentPackets .')
cSpAccSpare13SentBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 6, 1, 1, 122), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpAccSpare13SentBytes.setStatus('current')
if mibBuilder.loadTexts: cSpAccSpare13SentBytes.setDescription('Count of bytes with Service Indicator value 13 transmitted on this linkset, DPC and OPC combination.')
cSpAccHCSpare13SentBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 6, 1, 1, 123), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpAccHCSpare13SentBytes.setStatus('current')
if mibBuilder.loadTexts: cSpAccHCSpare13SentBytes.setDescription('Count of bytes with Service Indicator value 13 transmitted on this linkset, DPC and OPC combination. This is the 64 bit version of cSpAccSpare13SentBytes .')
cSpAccSpare14RcvdPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 6, 1, 1, 124), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpAccSpare14RcvdPackets.setStatus('current')
if mibBuilder.loadTexts: cSpAccSpare14RcvdPackets.setDescription('Count of packets with Service Indicator value 14 received on this linkset, DPC and OPC combination.')
cSpAccHCSpare14RcvdPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 6, 1, 1, 125), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpAccHCSpare14RcvdPackets.setStatus('current')
if mibBuilder.loadTexts: cSpAccHCSpare14RcvdPackets.setDescription('Count of packets with Service Indicator value 14 received on this linkset, DPC and OPC combination. This is the 64 bit version of cSpAccSpare14RcvdPackets .')
cSpAccSpare14RcvdBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 6, 1, 1, 126), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpAccSpare14RcvdBytes.setStatus('current')
if mibBuilder.loadTexts: cSpAccSpare14RcvdBytes.setDescription('Count of bytes with Service Indicator value 14 received on this linkset, DPC and OPC combination.')
cSpAccHCSpare14RcvdBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 6, 1, 1, 127), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpAccHCSpare14RcvdBytes.setStatus('current')
if mibBuilder.loadTexts: cSpAccHCSpare14RcvdBytes.setDescription('Count of bytes with Service Indicator value 14 received on this linkset, DPC and OPC combination. This is the 64 bit version of cSpAccSpare14RcvdBytes .')
cSpAccSpare14SentPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 6, 1, 1, 128), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpAccSpare14SentPackets.setStatus('current')
if mibBuilder.loadTexts: cSpAccSpare14SentPackets.setDescription('Count of packets with Service Indicator value 14 transmitted on this linkset, DPC and OPC combination.')
cSpAccHCSpare14SentPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 6, 1, 1, 129), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpAccHCSpare14SentPackets.setStatus('current')
if mibBuilder.loadTexts: cSpAccHCSpare14SentPackets.setDescription('Count of packets with Service Indicator value 14 transmitted on this linkset, DPC and OPC combination. This is the 64 bit version of cSpAccSpare14SentPackets .')
cSpAccSpare14SentBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 6, 1, 1, 130), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpAccSpare14SentBytes.setStatus('current')
if mibBuilder.loadTexts: cSpAccSpare14SentBytes.setDescription('Count of bytes with Service Indicator value 14 transmitted on this linkset, DPC and OPC combination.')
cSpAccHCSpare14SentBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 6, 1, 1, 131), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpAccHCSpare14SentBytes.setStatus('current')
if mibBuilder.loadTexts: cSpAccHCSpare14SentBytes.setDescription('Count of bytes with Service Indicator value 15 transmitted on this linkset, DPC and OPC combination. This is the 64 bit version of cSpAccSpare15SentBytes .')
cSpAccSpare15RcvdPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 6, 1, 1, 132), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpAccSpare15RcvdPackets.setStatus('current')
if mibBuilder.loadTexts: cSpAccSpare15RcvdPackets.setDescription('Count of packets with Service Indicator value 15 received on this linkset, DPC and OPC combination.')
cSpAccHCSpare15RcvdPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 6, 1, 1, 133), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpAccHCSpare15RcvdPackets.setStatus('current')
if mibBuilder.loadTexts: cSpAccHCSpare15RcvdPackets.setDescription('Count of packets with Service Indicator value 15 received on this linkset, DPC and OPC combination. This is the 64 bit version of cSpAccSpare15RcvdPackets .')
cSpAccSpare15RcvdBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 6, 1, 1, 134), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpAccSpare15RcvdBytes.setStatus('current')
if mibBuilder.loadTexts: cSpAccSpare15RcvdBytes.setDescription('Count of bytes with Service Indicator value 15 received on this linkset, DPC and OPC combination.')
cSpAccHCSpare15RcvdBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 6, 1, 1, 135), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpAccHCSpare15RcvdBytes.setStatus('current')
if mibBuilder.loadTexts: cSpAccHCSpare15RcvdBytes.setDescription('Count of bytes with Service Indicator value 15 received on this linkset, DPC and OPC combination. This is the 64 bit version of cSpAccSpare15RcvdBytes .')
cSpAccSpare15SentPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 6, 1, 1, 136), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpAccSpare15SentPackets.setStatus('current')
if mibBuilder.loadTexts: cSpAccSpare15SentPackets.setDescription('Count of packets with Service Indicator value 15 transmitted on this linkset, DPC and OPC combination.')
cSpAccHCSpare15SentPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 6, 1, 1, 137), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpAccHCSpare15SentPackets.setStatus('current')
if mibBuilder.loadTexts: cSpAccHCSpare15SentPackets.setDescription('Count of packets with Service Indicator value 15 transmitted on this linkset, DPC and OPC combination. This is the 64 bit version of cSpAccSpare15SentPackets .')
cSpAccSpare15SentBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 6, 1, 1, 138), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpAccSpare15SentBytes.setStatus('current')
if mibBuilder.loadTexts: cSpAccSpare15SentBytes.setDescription('Count of bytes with Service Indicator value 15 transmitted on this linkset, DPC and OPC combination.')
cSpAccHCSpare15SentBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 6, 1, 1, 139), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSpAccHCSpare15SentBytes.setStatus('current')
if mibBuilder.loadTexts: cSpAccHCSpare15SentBytes.setDescription('Count of bytes with Service Indicator value 15 transmitted on this linkset, DPC and OPC combination. This is the 64 bit version of cSpAccSpare15SentBytes .')
cSpLsStateChangeNotifEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 7, 1), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cSpLsStateChangeNotifEnabled.setStatus('current')
if mibBuilder.loadTexts: cSpLsStateChangeNotifEnabled.setDescription("The SP linkset notification truth value. 'true' Indicates that ciscoSpLinksetStateChange notification is to be generated when the state changes. That is, the notification generation is enabled. 'false' Indicates that ciscoSpLinksetStateChange notification generation is disabled.")
cSpLnkStateChangeNotifEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 73, 1, 7, 2), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cSpLnkStateChangeNotifEnabled.setStatus('current')
if mibBuilder.loadTexts: cSpLnkStateChangeNotifEnabled.setDescription("The SP link notification truth value. 'true' Indicates that ciscoSpLinkStateChange notification is to be generated when the state changes. That is, the notification generation is enabled. 'false' Indicates that ciscoSpLinkStateChange notification generation is disabled.")
ciscoSpMIBNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 73, 2))
ciscoSpMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 73, 2, 0))
ciscoSpLinksetStateChange = NotificationType((1, 3, 6, 1, 4, 1, 9, 10, 73, 2, 0, 1)).setObjects(("CISCO-SP-MIB", "cSpLinksetState"))
if mibBuilder.loadTexts: ciscoSpLinksetStateChange.setStatus('current')
if mibBuilder.loadTexts: ciscoSpLinksetStateChange.setDescription('The notification generated when a linkset changes to a new state. The value of cSpLinksetState indicates the new state.')
ciscoSpLinkStateChange = NotificationType((1, 3, 6, 1, 4, 1, 9, 10, 73, 2, 0, 2)).setObjects(("CISCO-SP-MIB", "cSpLinkState"))
if mibBuilder.loadTexts: ciscoSpLinkStateChange.setStatus('current')
if mibBuilder.loadTexts: ciscoSpLinkStateChange.setDescription('The notification generated when a SP link changes state. The value of cSpLinkState indicates the new state.')
ciscoSpMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 73, 3))
ciscoSpMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 73, 3, 1))
ciscoSpMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 73, 3, 2))
ciscoSpMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 10, 73, 3, 1, 1)).setObjects(("CISCO-SP-MIB", "ciscoSpSwitchGroup"), ("CISCO-SP-MIB", "ciscoSpLinksetGroup"), ("CISCO-SP-MIB", "ciscoSpLinkGroup"), ("CISCO-SP-MIB", "ciscoSpRouteGroup"), ("CISCO-SP-MIB", "ciscoSpAccessListGroup"), ("CISCO-SP-MIB", "ciscoSpAccountingGroup"), ("CISCO-SP-MIB", "ciscoSpNotificationsEnableGroup"), ("CISCO-SP-MIB", "ciscoSpNotificationsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSpMIBCompliance = ciscoSpMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: ciscoSpMIBCompliance.setDescription('The compliance statement for entities which implement the Cisco SP MIB')
ciscoSpSwitchGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 73, 3, 2, 1)).setObjects(("CISCO-SP-MIB", "cSpPointCode"), ("CISCO-SP-MIB", "cSpSs7Variant"), ("CISCO-SP-MIB", "cSpMtp2T01"), ("CISCO-SP-MIB", "cSpMtp2T02"), ("CISCO-SP-MIB", "cSpMtp2T03"), ("CISCO-SP-MIB", "cSpMtp2T4N"), ("CISCO-SP-MIB", "cSpMtp2T4E"), ("CISCO-SP-MIB", "cSpMtp2T05"), ("CISCO-SP-MIB", "cSpMtp2T06"), ("CISCO-SP-MIB", "cSpMtp2T07"), ("CISCO-SP-MIB", "cSpMtp2T08"), ("CISCO-SP-MIB", "cSpMtp3T01"), ("CISCO-SP-MIB", "cSpMtp3T02"), ("CISCO-SP-MIB", "cSpMtp3T03"), ("CISCO-SP-MIB", "cSpMtp3T04"), ("CISCO-SP-MIB", "cSpMtp3T05"), ("CISCO-SP-MIB", "cSpMtp3T06"), ("CISCO-SP-MIB", "cSpMtp3T07"), ("CISCO-SP-MIB", "cSpMtp3T08"), ("CISCO-SP-MIB", "cSpMtp3T10"), ("CISCO-SP-MIB", "cSpMtp3T11"), ("CISCO-SP-MIB", "cSpMtp3T12"), ("CISCO-SP-MIB", "cSpMtp3T13"), ("CISCO-SP-MIB", "cSpMtp3T14"), ("CISCO-SP-MIB", "cSpMtp3T15"), ("CISCO-SP-MIB", "cSpMtp3T16"), ("CISCO-SP-MIB", "cSpMtp3T17"), ("CISCO-SP-MIB", "cSpMtp3T18"), ("CISCO-SP-MIB", "cSpMtp3T19"), ("CISCO-SP-MIB", "cSpMtp3T20"), ("CISCO-SP-MIB", "cSpMtp3T21"), ("CISCO-SP-MIB", "cSpMtp3T22"), ("CISCO-SP-MIB", "cSpMtp3T23"), ("CISCO-SP-MIB", "cSpMtp3T24"), ("CISCO-SP-MIB", "cSpMtp3T25"), ("CISCO-SP-MIB", "cSpMtp3T26"), ("CISCO-SP-MIB", "cSpMtp3T27"), ("CISCO-SP-MIB", "cSpMtp3T28"), ("CISCO-SP-MIB", "cSpMtp3T29"), ("CISCO-SP-MIB", "cSpMtp3T30"), ("CISCO-SP-MIB", "cSpMtp3T31"), ("CISCO-SP-MIB", "cSpMtp3T32"), ("CISCO-SP-MIB", "cSpMtp3T33"), ("CISCO-SP-MIB", "cSpMtp3T34"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSpSwitchGroup = ciscoSpSwitchGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoSpSwitchGroup.setDescription('SP main objects.')
ciscoSpLinksetGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 73, 3, 2, 2)).setObjects(("CISCO-SP-MIB", "cSpLinksetAdjacentPointCode"), ("CISCO-SP-MIB", "cSpLinksetState"), ("CISCO-SP-MIB", "cSpLinksetInboundAcl"), ("CISCO-SP-MIB", "cSpLinksetOutboundAcl"), ("CISCO-SP-MIB", "cSpLinksetSnmmRouteTableName"), ("CISCO-SP-MIB", "cSpLinksetSntmRouteTableName"), ("CISCO-SP-MIB", "cSpLinksetSpare2RouteTableName"), ("CISCO-SP-MIB", "cSpLinksetSccpRouteTableName"), ("CISCO-SP-MIB", "cSpLinksetTupRouteTableName"), ("CISCO-SP-MIB", "cSpLinksetIsupRouteTableName"), ("CISCO-SP-MIB", "cSpLinksetDupcRouteTableName"), ("CISCO-SP-MIB", "cSpLinksetDupfRouteTableName"), ("CISCO-SP-MIB", "cSpLinksetMtupRouteTableName"), ("CISCO-SP-MIB", "cSpLinksetBisupRouteTableName"), ("CISCO-SP-MIB", "cSpLinksetSisupRouteTableName"), ("CISCO-SP-MIB", "cSpLinksetSpare11RouteTableName"), ("CISCO-SP-MIB", "cSpLinksetSpare12RouteTableName"), ("CISCO-SP-MIB", "cSpLinksetSpare13RouteTableName"), ("CISCO-SP-MIB", "cSpLinksetSpare14RouteTableName"), ("CISCO-SP-MIB", "cSpLinksetSpare15RouteTableName"), ("CISCO-SP-MIB", "cSpLinksetAccountingEnabled"), ("CISCO-SP-MIB", "cSpLinksetNumLinks"), ("CISCO-SP-MIB", "cSpLinksetPacketsSent"), ("CISCO-SP-MIB", "cSpLinksetHCPacketsSent"), ("CISCO-SP-MIB", "cSpLinksetPacketsRcvd"), ("CISCO-SP-MIB", "cSpLinksetHCPacketsRcvd"), ("CISCO-SP-MIB", "cSpLinksetBytesSent"), ("CISCO-SP-MIB", "cSpLinksetHCBytesSent"), ("CISCO-SP-MIB", "cSpLinksetBytesRcvd"), ("CISCO-SP-MIB", "cSpLinksetHCBytesRcvd"), ("CISCO-SP-MIB", "cSpLinksetDurationInService"), ("CISCO-SP-MIB", "cSpLinksetDurationOutService"), ("CISCO-SP-MIB", "cSpLinksetMtp2T01"), ("CISCO-SP-MIB", "cSpLinksetMtp2T02"), ("CISCO-SP-MIB", "cSpLinksetMtp2T03"), ("CISCO-SP-MIB", "cSpLinksetMtp2T4N"), ("CISCO-SP-MIB", "cSpLinksetMtp2T4E"), ("CISCO-SP-MIB", "cSpLinksetMtp2T05"), ("CISCO-SP-MIB", "cSpLinksetMtp2T06"), ("CISCO-SP-MIB", "cSpLinksetMtp2T07"), ("CISCO-SP-MIB", "cSpLinksetMtp2T08"), ("CISCO-SP-MIB", "cSpLinksetMtp3T01"), ("CISCO-SP-MIB", "cSpLinksetMtp3T02"), ("CISCO-SP-MIB", "cSpLinksetMtp3T03"), ("CISCO-SP-MIB", "cSpLinksetMtp3T04"), ("CISCO-SP-MIB", "cSpLinksetMtp3T05"), ("CISCO-SP-MIB", "cSpLinksetMtp3T06"), ("CISCO-SP-MIB", "cSpLinksetMtp3T07"), ("CISCO-SP-MIB", "cSpLinksetMtp3T08"), ("CISCO-SP-MIB", "cSpLinksetMtp3T10"), ("CISCO-SP-MIB", "cSpLinksetMtp3T11"), ("CISCO-SP-MIB", "cSpLinksetMtp3T12"), ("CISCO-SP-MIB", "cSpLinksetMtp3T13"), ("CISCO-SP-MIB", "cSpLinksetMtp3T14"), ("CISCO-SP-MIB", "cSpLinksetMtp3T15"), ("CISCO-SP-MIB", "cSpLinksetMtp3T16"), ("CISCO-SP-MIB", "cSpLinksetMtp3T17"), ("CISCO-SP-MIB", "cSpLinksetMtp3T18"), ("CISCO-SP-MIB", "cSpLinksetMtp3T19"), ("CISCO-SP-MIB", "cSpLinksetMtp3T20"), ("CISCO-SP-MIB", "cSpLinksetMtp3T21"), ("CISCO-SP-MIB", "cSpLinksetMtp3T22"), ("CISCO-SP-MIB", "cSpLinksetMtp3T23"), ("CISCO-SP-MIB", "cSpLinksetMtp3T24"), ("CISCO-SP-MIB", "cSpLinksetMtp3T25"), ("CISCO-SP-MIB", "cSpLinksetMtp3T26"), ("CISCO-SP-MIB", "cSpLinksetMtp3T27"), ("CISCO-SP-MIB", "cSpLinksetMtp3T28"), ("CISCO-SP-MIB", "cSpLinksetMtp3T29"), ("CISCO-SP-MIB", "cSpLinksetMtp3T30"), ("CISCO-SP-MIB", "cSpLinksetMtp3T31"), ("CISCO-SP-MIB", "cSpLinksetMtp3T32"), ("CISCO-SP-MIB", "cSpLinksetMtp3T33"), ("CISCO-SP-MIB", "cSpLinksetMtp3T34"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSpLinksetGroup = ciscoSpLinksetGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoSpLinksetGroup.setDescription('SP linkset objects.')
ciscoSpLinkGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 73, 3, 2, 3)).setObjects(("CISCO-SP-MIB", "cSpLinkState"), ("CISCO-SP-MIB", "cSpLinkType"), ("CISCO-SP-MIB", "cSpLinkifIndex"), ("CISCO-SP-MIB", "cSpLinkSctpAssociation"), ("CISCO-SP-MIB", "cSpLinkMtp3PacketsRcvd"), ("CISCO-SP-MIB", "cSpLinkMtp3PacketsSent"), ("CISCO-SP-MIB", "cSpLinkHCMtp3PacketsRcvd"), ("CISCO-SP-MIB", "cSpLinkHCMtp3PacketsSent"), ("CISCO-SP-MIB", "cSpLinkMtp3BytesRcvd"), ("CISCO-SP-MIB", "cSpLinkMtp3BytesSent"), ("CISCO-SP-MIB", "cSpLinkHCMtp3BytesRcvd"), ("CISCO-SP-MIB", "cSpLinkHCMtp3BytesSent"), ("CISCO-SP-MIB", "cSpLinkMtp2T01"), ("CISCO-SP-MIB", "cSpLinkMtp2T02"), ("CISCO-SP-MIB", "cSpLinkMtp2T03"), ("CISCO-SP-MIB", "cSpLinkMtp2T4N"), ("CISCO-SP-MIB", "cSpLinkMtp2T4E"), ("CISCO-SP-MIB", "cSpLinkMtp2T05"), ("CISCO-SP-MIB", "cSpLinkMtp2T06"), ("CISCO-SP-MIB", "cSpLinkMtp2T07"), ("CISCO-SP-MIB", "cSpLinkMtp2T08"), ("CISCO-SP-MIB", "cSpLinkMtp3T01"), ("CISCO-SP-MIB", "cSpLinkMtp3T02"), ("CISCO-SP-MIB", "cSpLinkMtp3T03"), ("CISCO-SP-MIB", "cSpLinkMtp3T04"), ("CISCO-SP-MIB", "cSpLinkMtp3T05"), ("CISCO-SP-MIB", "cSpLinkMtp3T06"), ("CISCO-SP-MIB", "cSpLinkMtp3T07"), ("CISCO-SP-MIB", "cSpLinkMtp3T08"), ("CISCO-SP-MIB", "cSpLinkMtp3T10"), ("CISCO-SP-MIB", "cSpLinkMtp3T11"), ("CISCO-SP-MIB", "cSpLinkMtp3T12"), ("CISCO-SP-MIB", "cSpLinkMtp3T13"), ("CISCO-SP-MIB", "cSpLinkMtp3T14"), ("CISCO-SP-MIB", "cSpLinkMtp3T15"), ("CISCO-SP-MIB", "cSpLinkMtp3T16"), ("CISCO-SP-MIB", "cSpLinkMtp3T17"), ("CISCO-SP-MIB", "cSpLinkMtp3T18"), ("CISCO-SP-MIB", "cSpLinkMtp3T19"), ("CISCO-SP-MIB", "cSpLinkMtp3T20"), ("CISCO-SP-MIB", "cSpLinkMtp3T21"), ("CISCO-SP-MIB", "cSpLinkMtp3T22"), ("CISCO-SP-MIB", "cSpLinkMtp3T23"), ("CISCO-SP-MIB", "cSpLinkMtp3T24"), ("CISCO-SP-MIB", "cSpLinkMtp3T25"), ("CISCO-SP-MIB", "cSpLinkMtp3T26"), ("CISCO-SP-MIB", "cSpLinkMtp3T27"), ("CISCO-SP-MIB", "cSpLinkMtp3T28"), ("CISCO-SP-MIB", "cSpLinkMtp3T29"), ("CISCO-SP-MIB", "cSpLinkMtp3T30"), ("CISCO-SP-MIB", "cSpLinkMtp3T31"), ("CISCO-SP-MIB", "cSpLinkMtp3T32"), ("CISCO-SP-MIB", "cSpLinkMtp3T33"), ("CISCO-SP-MIB", "cSpLinkMtp3T34"), ("CISCO-SP-MIB", "cSpLinkXmitQueueDepth"), ("CISCO-SP-MIB", "cSpLinkXmitQueueDepthHigh"), ("CISCO-SP-MIB", "cSpLinkXmitQueueDepthHighReset"), ("CISCO-SP-MIB", "cSpLinkCongestionState"), ("CISCO-SP-MIB", "cSpLinkCongestionAbate1"), ("CISCO-SP-MIB", "cSpLinkCongestionAbate2"), ("CISCO-SP-MIB", "cSpLinkCongestionAbate3"), ("CISCO-SP-MIB", "cSpLinkCongestionOnset1"), ("CISCO-SP-MIB", "cSpLinkCongestionOnset2"), ("CISCO-SP-MIB", "cSpLinkCongestionOnset3"), ("CISCO-SP-MIB", "cSpLinkSigLinkTest"), ("CISCO-SP-MIB", "cSpLinkQ752T1E1"), ("CISCO-SP-MIB", "cSpLinkQ752T1E2"), ("CISCO-SP-MIB", "cSpLinkQ752T1E3"), ("CISCO-SP-MIB", "cSpLinkQ752T1E4"), ("CISCO-SP-MIB", "cSpLinkQ752T1E5"), ("CISCO-SP-MIB", "cSpLinkQ752T1E6"), ("CISCO-SP-MIB", "cSpLinkQ752T1E7"), ("CISCO-SP-MIB", "cSpLinkQ752T1E8"), ("CISCO-SP-MIB", "cSpLinkQ752T1E9"), ("CISCO-SP-MIB", "cSpLinkQ752T1E10"), ("CISCO-SP-MIB", "cSpLinkQ752T1E11"), ("CISCO-SP-MIB", "cSpLinkQ752T2E1"), ("CISCO-SP-MIB", "cSpLinkQ752T2E5"), ("CISCO-SP-MIB", "cSpLinkQ752T2E6"), ("CISCO-SP-MIB", "cSpLinkQ752T2E7"), ("CISCO-SP-MIB", "cSpLinkQ752T2E9"), ("CISCO-SP-MIB", "cSpLinkQ752T2E10"), ("CISCO-SP-MIB", "cSpLinkQ752T2E15"), ("CISCO-SP-MIB", "cSpLinkQ752T2E16"), ("CISCO-SP-MIB", "cSpLinkQ752T2E18"), ("CISCO-SP-MIB", "cSpLinkMtp3PacketsRetrans"), ("CISCO-SP-MIB", "cSpLinkMtp3BytesRetrans"), ("CISCO-SP-MIB", "cSpLinkQ752T3E6"), ("CISCO-SP-MIB", "cSpLinkQ752T3E7"), ("CISCO-SP-MIB", "cSpLinkQ752T3E10L1"), ("CISCO-SP-MIB", "cSpLinkQ752T3E10L2"), ("CISCO-SP-MIB", "cSpLinkQ752T3E10L3"), ("CISCO-SP-MIB", "cSpLinkQ752T3E11L1"), ("CISCO-SP-MIB", "cSpLinkQ752T3E11L2"), ("CISCO-SP-MIB", "cSpLinkQ752T3E11L3"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSpLinkGroup = ciscoSpLinkGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoSpLinkGroup.setDescription('SP link objects.')
ciscoSpRouteGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 73, 3, 2, 4)).setObjects(("CISCO-SP-MIB", "cSpRouteStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSpRouteGroup = ciscoSpRouteGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoSpRouteGroup.setDescription('SP route table objects.')
ciscoSpAccessListGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 73, 3, 2, 5)).setObjects(("CISCO-SP-MIB", "cSpAclType"), ("CISCO-SP-MIB", "cSpAclDpc"), ("CISCO-SP-MIB", "cSpAclDpcMask"), ("CISCO-SP-MIB", "cSpAclOpc"), ("CISCO-SP-MIB", "cSpAclOpcMask"), ("CISCO-SP-MIB", "cSpAclSi"), ("CISCO-SP-MIB", "cSpAclPattern"), ("CISCO-SP-MIB", "cSpAclOffset"), ("CISCO-SP-MIB", "cSpAclAction"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSpAccessListGroup = ciscoSpAccessListGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoSpAccessListGroup.setDescription('SP access control list objects.')
ciscoSpAccountingGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 73, 3, 2, 6)).setObjects(("CISCO-SP-MIB", "cSpAccRcvdPackets"), ("CISCO-SP-MIB", "cSpAccHCRcvdPackets"), ("CISCO-SP-MIB", "cSpAccSentPackets"), ("CISCO-SP-MIB", "cSpAccHCSentPackets"), ("CISCO-SP-MIB", "cSpAccRcvdBytes"), ("CISCO-SP-MIB", "cSpAccHCRcvdBytes"), ("CISCO-SP-MIB", "cSpAccSentBytes"), ("CISCO-SP-MIB", "cSpAccHCSentBytes"), ("CISCO-SP-MIB", "cSpAccSnmmRcvdPackets"), ("CISCO-SP-MIB", "cSpAccHCSnmmRcvdPackets"), ("CISCO-SP-MIB", "cSpAccSnmmRcvdBytes"), ("CISCO-SP-MIB", "cSpAccHCSnmmRcvdBytes"), ("CISCO-SP-MIB", "cSpAccSnmmSentPackets"), ("CISCO-SP-MIB", "cSpAccHCSnmmSentPackets"), ("CISCO-SP-MIB", "cSpAccSnmmSentBytes"), ("CISCO-SP-MIB", "cSpAccHCSnmmSentBytes"), ("CISCO-SP-MIB", "cSpAccSntmRcvdPackets"), ("CISCO-SP-MIB", "cSpAccHCSntmRcvdPackets"), ("CISCO-SP-MIB", "cSpAccSntmRcvdBytes"), ("CISCO-SP-MIB", "cSpAccHCSntmRcvdBytes"), ("CISCO-SP-MIB", "cSpAccSntmSentPackets"), ("CISCO-SP-MIB", "cSpAccHCSntmSentPackets"), ("CISCO-SP-MIB", "cSpAccSntmSentBytes"), ("CISCO-SP-MIB", "cSpAccHCSntmSentBytes"), ("CISCO-SP-MIB", "cSpAccSpare2RcvdPackets"), ("CISCO-SP-MIB", "cSpAccHCSpare2RcvdPackets"), ("CISCO-SP-MIB", "cSpAccSpare2RcvdBytes"), ("CISCO-SP-MIB", "cSpAccHCSpare2RcvdBytes"), ("CISCO-SP-MIB", "cSpAccSpare2SentPackets"), ("CISCO-SP-MIB", "cSpAccHCSpare2SentPackets"), ("CISCO-SP-MIB", "cSpAccSpare2SentBytes"), ("CISCO-SP-MIB", "cSpAccHCSpare2SentBytes"), ("CISCO-SP-MIB", "cSpAccSccpRcvdPackets"), ("CISCO-SP-MIB", "cSpAccHCSccpRcvdPackets"), ("CISCO-SP-MIB", "cSpAccSccpRcvdBytes"), ("CISCO-SP-MIB", "cSpAccHCSccpRcvdBytes"), ("CISCO-SP-MIB", "cSpAccSccpSentPackets"), ("CISCO-SP-MIB", "cSpAccHCSccpSentPackets"), ("CISCO-SP-MIB", "cSpAccSccpSentBytes"), ("CISCO-SP-MIB", "cSpAccHCSccpSentBytes"), ("CISCO-SP-MIB", "cSpAccTupRcvdPackets"), ("CISCO-SP-MIB", "cSpAccHCTupRcvdPackets"), ("CISCO-SP-MIB", "cSpAccTupRcvdBytes"), ("CISCO-SP-MIB", "cSpAccHCTupRcvdBytes"), ("CISCO-SP-MIB", "cSpAccTupSentPackets"), ("CISCO-SP-MIB", "cSpAccHCTupSentPackets"), ("CISCO-SP-MIB", "cSpAccTupSentBytes"), ("CISCO-SP-MIB", "cSpAccHCTupSentBytes"), ("CISCO-SP-MIB", "cSpAccIsupRcvdPackets"), ("CISCO-SP-MIB", "cSpAccHCIsupRcvdPackets"), ("CISCO-SP-MIB", "cSpAccIsupRcvdBytes"), ("CISCO-SP-MIB", "cSpAccHCIsupRcvdBytes"), ("CISCO-SP-MIB", "cSpAccIsupSentPackets"), ("CISCO-SP-MIB", "cSpAccHCIsupSentPackets"), ("CISCO-SP-MIB", "cSpAccIsupSentBytes"), ("CISCO-SP-MIB", "cSpAccHCIsupSentBytes"), ("CISCO-SP-MIB", "cSpAccDupcRcvdPackets"), ("CISCO-SP-MIB", "cSpAccHCDupcRcvdPackets"), ("CISCO-SP-MIB", "cSpAccDupcRcvdBytes"), ("CISCO-SP-MIB", "cSpAccHCDupcRcvdBytes"), ("CISCO-SP-MIB", "cSpAccDupcSentPackets"), ("CISCO-SP-MIB", "cSpAccHCDupcSentPackets"), ("CISCO-SP-MIB", "cSpAccDupcSentBytes"), ("CISCO-SP-MIB", "cSpAccHCDupcSentBytes"), ("CISCO-SP-MIB", "cSpAccDupfRcvdPackets"), ("CISCO-SP-MIB", "cSpAccHCDupfRcvdPackets"), ("CISCO-SP-MIB", "cSpAccDupfRcvdBytes"), ("CISCO-SP-MIB", "cSpAccHCDupfRcvdBytes"), ("CISCO-SP-MIB", "cSpAccDupfSentPackets"), ("CISCO-SP-MIB", "cSpAccHCDupfSentPackets"), ("CISCO-SP-MIB", "cSpAccDupfSentBytes"), ("CISCO-SP-MIB", "cSpAccHCDupfSentBytes"), ("CISCO-SP-MIB", "cSpAccMtupRcvdPackets"), ("CISCO-SP-MIB", "cSpAccHCMtupRcvdPackets"), ("CISCO-SP-MIB", "cSpAccMtupRcvdBytes"), ("CISCO-SP-MIB", "cSpAccHCMtupRcvdBytes"), ("CISCO-SP-MIB", "cSpAccMtupSentPackets"), ("CISCO-SP-MIB", "cSpAccHCMtupSentPackets"), ("CISCO-SP-MIB", "cSpAccMtupSentBytes"), ("CISCO-SP-MIB", "cSpAccHCMtupSentBytes"), ("CISCO-SP-MIB", "cSpAccBisupRcvdPackets"), ("CISCO-SP-MIB", "cSpAccHCBisupRcvdPackets"), ("CISCO-SP-MIB", "cSpAccBisupRcvdBytes"), ("CISCO-SP-MIB", "cSpAccHCBisupRcvdBytes"), ("CISCO-SP-MIB", "cSpAccBisupSentPackets"), ("CISCO-SP-MIB", "cSpAccHCBisupSentPackets"), ("CISCO-SP-MIB", "cSpAccBisupSentBytes"), ("CISCO-SP-MIB", "cSpAccHCBisupSentBytes"), ("CISCO-SP-MIB", "cSpAccSisupRcvdPackets"), ("CISCO-SP-MIB", "cSpAccHCSisupRcvdPackets"), ("CISCO-SP-MIB", "cSpAccSisupRcvdBytes"), ("CISCO-SP-MIB", "cSpAccHCSisupRcvdBytes"), ("CISCO-SP-MIB", "cSpAccSisupSentPackets"), ("CISCO-SP-MIB", "cSpAccHCSisupSentPackets"), ("CISCO-SP-MIB", "cSpAccSisupSentBytes"), ("CISCO-SP-MIB", "cSpAccHCSisupSentBytes"), ("CISCO-SP-MIB", "cSpAccSpare11RcvdPackets"), ("CISCO-SP-MIB", "cSpAccHCSpare11RcvdPackets"), ("CISCO-SP-MIB", "cSpAccSpare11RcvdBytes"), ("CISCO-SP-MIB", "cSpAccHCSpare11RcvdBytes"), ("CISCO-SP-MIB", "cSpAccSpare11SentPackets"), ("CISCO-SP-MIB", "cSpAccHCSpare11SentPackets"), ("CISCO-SP-MIB", "cSpAccSpare11SentBytes"), ("CISCO-SP-MIB", "cSpAccHCSpare11SentBytes"), ("CISCO-SP-MIB", "cSpAccSpare12RcvdPackets"), ("CISCO-SP-MIB", "cSpAccHCSpare12RcvdPackets"), ("CISCO-SP-MIB", "cSpAccSpare12RcvdBytes"), ("CISCO-SP-MIB", "cSpAccHCSpare12RcvdBytes"), ("CISCO-SP-MIB", "cSpAccSpare12SentPackets"), ("CISCO-SP-MIB", "cSpAccHCSpare12SentPackets"), ("CISCO-SP-MIB", "cSpAccSpare12SentBytes"), ("CISCO-SP-MIB", "cSpAccHCSpare12SentBytes"), ("CISCO-SP-MIB", "cSpAccSpare13RcvdPackets"), ("CISCO-SP-MIB", "cSpAccHCSpare13RcvdPackets"), ("CISCO-SP-MIB", "cSpAccSpare13RcvdBytes"), ("CISCO-SP-MIB", "cSpAccHCSpare13RcvdBytes"), ("CISCO-SP-MIB", "cSpAccSpare13SentPackets"), ("CISCO-SP-MIB", "cSpAccHCSpare13SentPackets"), ("CISCO-SP-MIB", "cSpAccSpare13SentBytes"), ("CISCO-SP-MIB", "cSpAccHCSpare13SentBytes"), ("CISCO-SP-MIB", "cSpAccSpare14RcvdPackets"), ("CISCO-SP-MIB", "cSpAccHCSpare14RcvdPackets"), ("CISCO-SP-MIB", "cSpAccSpare14RcvdBytes"), ("CISCO-SP-MIB", "cSpAccHCSpare14RcvdBytes"), ("CISCO-SP-MIB", "cSpAccSpare14SentPackets"), ("CISCO-SP-MIB", "cSpAccHCSpare14SentPackets"), ("CISCO-SP-MIB", "cSpAccSpare14SentBytes"), ("CISCO-SP-MIB", "cSpAccHCSpare14SentBytes"), ("CISCO-SP-MIB", "cSpAccSpare15RcvdPackets"), ("CISCO-SP-MIB", "cSpAccHCSpare15RcvdPackets"), ("CISCO-SP-MIB", "cSpAccSpare15RcvdBytes"), ("CISCO-SP-MIB", "cSpAccHCSpare15RcvdBytes"), ("CISCO-SP-MIB", "cSpAccSpare15SentPackets"), ("CISCO-SP-MIB", "cSpAccHCSpare15SentPackets"), ("CISCO-SP-MIB", "cSpAccSpare15SentBytes"), ("CISCO-SP-MIB", "cSpAccHCSpare15SentBytes"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSpAccountingGroup = ciscoSpAccountingGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoSpAccountingGroup.setDescription('SP accounting objects.')
ciscoSpNotificationsEnableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 73, 3, 2, 7)).setObjects(("CISCO-SP-MIB", "cSpLsStateChangeNotifEnabled"), ("CISCO-SP-MIB", "cSpLnkStateChangeNotifEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSpNotificationsEnableGroup = ciscoSpNotificationsEnableGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoSpNotificationsEnableGroup.setDescription('SP enable notification objects.')
ciscoSpNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 10, 73, 3, 2, 8)).setObjects(("CISCO-SP-MIB", "ciscoSpLinksetStateChange"), ("CISCO-SP-MIB", "ciscoSpLinkStateChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSpNotificationsGroup = ciscoSpNotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoSpNotificationsGroup.setDescription('The collection of notifications used to indicate wrapped and unwrapped node state information.')
mibBuilder.exportSymbols("CISCO-SP-MIB", CSpRouteTableName=CSpRouteTableName, cSpLinksetMtp2T03=cSpLinksetMtp2T03, cSpLinksetMtp3T05=cSpLinksetMtp3T05, cSpAccDupcSentPackets=cSpAccDupcSentPackets, cSpMtp3T05=cSpMtp3T05, cSpAclOpcMask=cSpAclOpcMask, cSpLinkXmitQueueDepthHigh=cSpLinkXmitQueueDepthHigh, cSpAccounting=cSpAccounting, cSpAccHCSnmmRcvdBytes=cSpAccHCSnmmRcvdBytes, CSpPointCode=CSpPointCode, cSpMtp3T33=cSpMtp3T33, cSpMtp3T34=cSpMtp3T34, cSpLinksetSpare11RouteTableName=cSpLinksetSpare11RouteTableName, ciscoSpNotificationsGroup=ciscoSpNotificationsGroup, cSpLinkQ752T3E7=cSpLinkQ752T3E7, cSpLinkMtp3PacketsRetrans=cSpLinkMtp3PacketsRetrans, cSpMtp2T05=cSpMtp2T05, cSpLinkQ752T1E8=cSpLinkQ752T1E8, CSpAclId=CSpAclId, cSpAccountingTable=cSpAccountingTable, cSpAccMtupRcvdBytes=cSpAccMtupRcvdBytes, cSpLinkCongestionAbate2=cSpLinkCongestionAbate2, cSpAccSpare2RcvdBytes=cSpAccSpare2RcvdBytes, cSpAccTupRcvdBytes=cSpAccTupRcvdBytes, cSpLinkMtp3T31=cSpLinkMtp3T31, cSpLinksetSpare12RouteTableName=cSpLinksetSpare12RouteTableName, cSpLinkMtp3T20=cSpLinkMtp3T20, cSpAccHCTupRcvdPackets=cSpAccHCTupRcvdPackets, CSpRouteStatus=CSpRouteStatus, cSpAccHCSpare15SentPackets=cSpAccHCSpare15SentPackets, cSpAccSpare12RcvdPackets=cSpAccSpare12RcvdPackets, cSpMtp3T22=cSpMtp3T22, cSpAclEntryNumber=cSpAclEntryNumber, cSpLinkMtp3T24=cSpLinkMtp3T24, ciscoSpMIBNotificationPrefix=ciscoSpMIBNotificationPrefix, cSpMtp3T24=cSpMtp3T24, cSpAccHCMtupRcvdBytes=cSpAccHCMtupRcvdBytes, cSpAccHCRcvdPackets=cSpAccHCRcvdPackets, cSpAccSccpRcvdBytes=cSpAccSccpRcvdBytes, cSpLinkHCMtp3BytesSent=cSpLinkHCMtp3BytesSent, cSpScalars=cSpScalars, cSpLinkCongestionState=cSpLinkCongestionState, cSpAccBisupSentBytes=cSpAccBisupSentBytes, cSpLinkQ752T2E1=cSpLinkQ752T2E1, cSpAccDupfSentBytes=cSpAccDupfSentBytes, cSpLinkQ752T2E5=cSpLinkQ752T2E5, cSpLinksetSnmmRouteTableName=cSpLinksetSnmmRouteTableName, cSpAccHCSpare13SentPackets=cSpAccHCSpare13SentPackets, cSpLinkMtp3BytesSent=cSpLinkMtp3BytesSent, cSpAccHCSpare11RcvdPackets=cSpAccHCSpare11RcvdPackets, cSpAccHCSisupSentPackets=cSpAccHCSisupSentPackets, cSpLinksetBisupRouteTableName=cSpLinksetBisupRouteTableName, cSpAclTable=cSpAclTable, cSpLinkMtp3T16=cSpLinkMtp3T16, cSpLinkMtp3T19=cSpLinkMtp3T19, cSpMtp3T14=cSpMtp3T14, cSpLinkQ752T3E10L2=cSpLinkQ752T3E10L2, cSpAccTableId=cSpAccTableId, cSpLinksetMtp2T4E=cSpLinksetMtp2T4E, cSpLinkHCMtp3PacketsRcvd=cSpLinkHCMtp3PacketsRcvd, cSpLinkifIndex=cSpLinkifIndex, cSpLinkQ752T1E11=cSpLinkQ752T1E11, cSpLinksetIsupRouteTableName=cSpLinksetIsupRouteTableName, cSpLinkMtp3T18=cSpLinkMtp3T18, cSpAccDupfRcvdBytes=cSpAccDupfRcvdBytes, cSpAccDupcRcvdPackets=cSpAccDupcRcvdPackets, cSpAccHCSpare12SentPackets=cSpAccHCSpare12SentPackets, cSpAccHCSnmmSentBytes=cSpAccHCSnmmSentBytes, ciscoSpMIBCompliance=ciscoSpMIBCompliance, cSpAccHCSccpRcvdPackets=cSpAccHCSccpRcvdPackets, cSpAccHCTupRcvdBytes=cSpAccHCTupRcvdBytes, cSpLinksetAdjacentPointCode=cSpLinksetAdjacentPointCode, cSpLinksetMtp3T18=cSpLinksetMtp3T18, cSpAccountingTableEntry=cSpAccountingTableEntry, cSpRouteStatus=cSpRouteStatus, cSpAccHCBisupSentPackets=cSpAccHCBisupSentPackets, cSpLinksetDupfRouteTableName=cSpLinksetDupfRouteTableName, cSpAccMtupRcvdPackets=cSpAccMtupRcvdPackets, cSpLinksetMtp2T02=cSpLinksetMtp2T02, cSpAccBisupRcvdPackets=cSpAccBisupRcvdPackets, cSpLinkQ752T3E6=cSpLinkQ752T3E6, cSpAccHCDupcSentPackets=cSpAccHCDupcSentPackets, cSpLinksetMtp3T12=cSpLinksetMtp3T12, cSpMtp3T07=cSpMtp3T07, cSpAccSpare15RcvdPackets=cSpAccSpare15RcvdPackets, cSpLinkMtp3BytesRetrans=cSpLinkMtp3BytesRetrans, cSpLinkCongestionAbate3=cSpLinkCongestionAbate3, cSpMtp2T4N=cSpMtp2T4N, cSpAccHCRcvdBytes=cSpAccHCRcvdBytes, cSpAccBisupRcvdBytes=cSpAccBisupRcvdBytes, cSpMtp3T12=cSpMtp3T12, cSpLinksetPacketsRcvd=cSpLinksetPacketsRcvd, cSpLinkMtp2T02=cSpLinkMtp2T02, cSpLinksetMtp3T33=cSpLinksetMtp3T33, cSpLinkMtp3T14=cSpLinkMtp3T14, ciscoSpMIBCompliances=ciscoSpMIBCompliances, cSpLinksetSpare13RouteTableName=cSpLinksetSpare13RouteTableName, cSpLinkMtp2T03=cSpLinkMtp2T03, cSpAccSccpSentBytes=cSpAccSccpSentBytes, cSpMtp3T19=cSpMtp3T19, cSpAccSntmRcvdPackets=cSpAccSntmRcvdPackets, ciscoSpRouteGroup=ciscoSpRouteGroup, cSpLinksetPacketsSent=cSpLinksetPacketsSent, cSpAccSpare13RcvdBytes=cSpAccSpare13RcvdBytes, cSpMtp2T08=cSpMtp2T08, cSpLinkCongestionOnset3=cSpLinkCongestionOnset3, cSpLinksetTupRouteTableName=cSpLinksetTupRouteTableName, cSpLinksetMtp3T26=cSpLinksetMtp3T26, cSpLinksetOutboundAcl=cSpLinksetOutboundAcl, ciscoSpMIB=ciscoSpMIB, cSpAccIsupRcvdPackets=cSpAccIsupRcvdPackets, cSpAclDpc=cSpAclDpc, cSpAccSisupSentBytes=cSpAccSisupSentBytes, cSpAccHCIsupSentPackets=cSpAccHCIsupSentPackets, cSpAccSccpSentPackets=cSpAccSccpSentPackets, cSpMtp2T01=cSpMtp2T01, cSpLinksetMtp3T02=cSpLinksetMtp3T02, cSpAccHCSpare2RcvdBytes=cSpAccHCSpare2RcvdBytes, cSpMtp3T06=cSpMtp3T06, cSpAccDupfRcvdPackets=cSpAccDupfRcvdPackets, cSpLinksetDurationInService=cSpLinksetDurationInService, cSpMtp2T07=cSpMtp2T07, cSpAccessControlList=cSpAccessControlList, cSpAccHCSpare2SentBytes=cSpAccHCSpare2SentBytes, cSpAccSntmRcvdBytes=cSpAccSntmRcvdBytes, cSpLinksetMtp3T25=cSpLinksetMtp3T25, cSpAclPattern=cSpAclPattern, cSpMtp3T30=cSpMtp3T30, cSpLinkMtp3T22=cSpLinkMtp3T22, cSpAccHCSntmSentPackets=cSpAccHCSntmSentPackets, cSpAccHCSpare14SentPackets=cSpAccHCSpare14SentPackets, cSpAccTupSentBytes=cSpAccTupSentBytes, cSpLinksetName=cSpLinksetName, cSpAccHCIsupRcvdPackets=cSpAccHCIsupRcvdPackets, cSpLinksetMtp3T34=cSpLinksetMtp3T34, cSpLinkMtp2T4E=cSpLinkMtp2T4E, cSpLinkType=cSpLinkType, ciscoSpMIBConformance=ciscoSpMIBConformance, cSpLinkQ752T1E2=cSpLinkQ752T1E2, cSpLinkState=cSpLinkState, cSpSs7Variant=cSpSs7Variant, cSpAccIsupSentBytes=cSpAccIsupSentBytes, cSpAccHCSpare11SentBytes=cSpAccHCSpare11SentBytes, cSpLinksetMtp3T21=cSpLinksetMtp3T21, ciscoSpLinksetStateChange=ciscoSpLinksetStateChange, ciscoSpMIBNotifications=ciscoSpMIBNotifications, cSpAccMtupSentPackets=cSpAccMtupSentPackets, cSpAccRcvdBytes=cSpAccRcvdBytes, cSpAccSisupRcvdPackets=cSpAccSisupRcvdPackets, cSpLinkQ752T1E3=cSpLinkQ752T1E3, cSpAccHCBisupRcvdBytes=cSpAccHCBisupRcvdBytes, cSpAccHCSpare11SentPackets=cSpAccHCSpare11SentPackets, cSpLinkMtp2T05=cSpLinkMtp2T05, cSpLinkMtp3T30=cSpLinkMtp3T30, cSpMtp3T27=cSpMtp3T27, cSpAccHCDupcRcvdBytes=cSpAccHCDupcRcvdBytes, cSpMtp3T02=cSpMtp3T02, cSpLinkQ752T1E1=cSpLinkQ752T1E1, cSpLinkQ752T2E18=cSpLinkQ752T2E18, cSpAccHCIsupRcvdBytes=cSpAccHCIsupRcvdBytes, cSpRouteTableEntry=cSpRouteTableEntry, cSpLinksetSccpRouteTableName=cSpLinksetSccpRouteTableName, cSpAccSpare14RcvdBytes=cSpAccSpare14RcvdBytes, ciscoSpLinkStateChange=ciscoSpLinkStateChange, cSpLinksetMtp3T10=cSpLinksetMtp3T10, cSpLinksetDupcRouteTableName=cSpLinksetDupcRouteTableName, cSpLinksetMtp3T01=cSpLinksetMtp3T01, cSpLinksetMtp3T14=cSpLinksetMtp3T14, cSpMtp3T01=cSpMtp3T01, cSpLinkMtp2T08=cSpLinkMtp2T08, cSpLinkQ752T3E11L2=cSpLinkQ752T3E11L2, cSpLinksetMtp3T24=cSpLinksetMtp3T24, cSpPointCode=cSpPointCode, cSpMtp3T03=cSpMtp3T03, cSpMtp3T25=cSpMtp3T25, cSpLinkMtp3T03=cSpLinkMtp3T03, cSpLinkSctpAssociation=cSpLinkSctpAssociation, ciscoSpSwitchGroup=ciscoSpSwitchGroup, cSpLinkset=cSpLinkset, cSpAccSpare2SentBytes=cSpAccSpare2SentBytes, cSpAccSpare15SentPackets=cSpAccSpare15SentPackets, cSpLinkQ752T1E4=cSpLinkQ752T1E4, cSpAccHCSpare12RcvdBytes=cSpAccHCSpare12RcvdBytes, cSpLinksetMtp3T30=cSpLinksetMtp3T30, cSpLinksetMtp3T27=cSpLinksetMtp3T27, cSpLinksetTableEntry=cSpLinksetTableEntry, PYSNMP_MODULE_ID=ciscoSpMIB, cSpAccSpare13SentPackets=cSpAccSpare13SentPackets, cSpAccRcvdPackets=cSpAccRcvdPackets, cSpLinkMtp2T4N=cSpLinkMtp2T4N, cSpAccHCSisupRcvdPackets=cSpAccHCSisupRcvdPackets, cSpAclSi=cSpAclSi, cSpLinkMtp2T07=cSpLinkMtp2T07, cSpAccHCBisupRcvdPackets=cSpAccHCBisupRcvdPackets, ciscoSpAccessListGroup=ciscoSpAccessListGroup, cSpAclTableEntry=cSpAclTableEntry, cSpLinkMtp3T17=cSpLinkMtp3T17, cSpLinkMtp3T34=cSpLinkMtp3T34, cSpAccHCDupfRcvdPackets=cSpAccHCDupfRcvdPackets, cSpLinkMtp3T21=cSpLinkMtp3T21, cSpLinksetMtp2T08=cSpLinksetMtp2T08, cSpMtp3T10=cSpMtp3T10, cSpMtp3T04=cSpMtp3T04, cSpMtp3T08=cSpMtp3T08, cSpAccSpare11SentPackets=cSpAccSpare11SentPackets, cSpMtp3T21=cSpMtp3T21, cSpMtp3T11=cSpMtp3T11, cSpLinkQ752T1E6=cSpLinkQ752T1E6, cSpAccHCSpare12RcvdPackets=cSpAccHCSpare12RcvdPackets, cSpLinksetMtp3T32=cSpLinksetMtp3T32, cSpAccOpc=cSpAccOpc, cSpAccHCTupSentBytes=cSpAccHCTupSentBytes, cSpAccHCDupcSentBytes=cSpAccHCDupcSentBytes, cSpAccIsupSentPackets=cSpAccIsupSentPackets, cSpLinksetMtp3T15=cSpLinksetMtp3T15, cSpMtp3T23=cSpMtp3T23, cSpAccDupfSentPackets=cSpAccDupfSentPackets, cSpLinkMtp3T23=cSpLinkMtp3T23, cSpLinkMtp3PacketsSent=cSpLinkMtp3PacketsSent, cSpLinkXmitQueueDepth=cSpLinkXmitQueueDepth, cSpAccSentPackets=cSpAccSentPackets, cSpAccHCSpare13SentBytes=cSpAccHCSpare13SentBytes, cSpAccSnmmSentPackets=cSpAccSnmmSentPackets, cSpLinkXmitQueueDepthHighReset=cSpLinkXmitQueueDepthHighReset, cSpLinksetMtp3T31=cSpLinksetMtp3T31, cSpMtp3T18=cSpMtp3T18, cSpLinkQ752T3E10L3=cSpLinkQ752T3E10L3, cSpLinkMtp3T25=cSpLinkMtp3T25, cSpLinkQ752T2E15=cSpLinkQ752T2E15, cSpAccHCDupfSentPackets=cSpAccHCDupfSentPackets, cSpMtp2T4E=cSpMtp2T4E, cSpAclType=cSpAclType, cSpLinkQ752T2E10=cSpLinkQ752T2E10, cSpAccHCMtupRcvdPackets=cSpAccHCMtupRcvdPackets, cSpAccHCSpare13RcvdBytes=cSpAccHCSpare13RcvdBytes, cSpAccTupSentPackets=cSpAccTupSentPackets, ciscoSpNotificationsEnableGroup=ciscoSpNotificationsEnableGroup, cSpLinkCongestionOnset1=cSpLinkCongestionOnset1, cSpAccSntmSentBytes=cSpAccSntmSentBytes, cSpLinksetMtp2T4N=cSpLinksetMtp2T4N, cSpAccSpare13SentBytes=cSpAccSpare13SentBytes, ciscoSpMIBObjects=ciscoSpMIBObjects, cSpAccHCDupcRcvdPackets=cSpAccHCDupcRcvdPackets, cSpLinkQ752T3E10L1=cSpLinkQ752T3E10L1, cSpLinkQ752T2E7=cSpLinkQ752T2E7, cSpAccHCSpare12SentBytes=cSpAccHCSpare12SentBytes, cSpRouteDpc=cSpRouteDpc, cSpRouteDestLinkset=cSpRouteDestLinkset, cSpLinkQ752T1E5=cSpLinkQ752T1E5, cSpLinkMtp3T04=cSpLinkMtp3T04, cSpLinksetMtp2T01=cSpLinksetMtp2T01, cSpAclDpcMask=cSpAclDpcMask, cSpMtp3T29=cSpMtp3T29, cSpAccTupRcvdPackets=cSpAccTupRcvdPackets)
mibBuilder.exportSymbols("CISCO-SP-MIB", cSpLinksetMtp3T13=cSpLinksetMtp3T13, cSpLinkTableEntry=cSpLinkTableEntry, cSpLinkMtp3T33=cSpLinkMtp3T33, cSpAccHCSisupSentBytes=cSpAccHCSisupSentBytes, cSpAccHCMtupSentPackets=cSpAccHCMtupSentPackets, CSpLinkSLC=CSpLinkSLC, cSpLinksetHCPacketsRcvd=cSpLinksetHCPacketsRcvd, cSpLinksetMtp2T06=cSpLinksetMtp2T06, cSpLinkMtp3T07=cSpLinkMtp3T07, cSpAccHCSpare15SentBytes=cSpAccHCSpare15SentBytes, cSpAccHCMtupSentBytes=cSpAccHCMtupSentBytes, cSpAccHCSpare2SentPackets=cSpAccHCSpare2SentPackets, cSpRouteTable=cSpRouteTable, cSpLinksetMtp3T03=cSpLinksetMtp3T03, cSpAccSentBytes=cSpAccSentBytes, cSpLinkMtp3T05=cSpLinkMtp3T05, cSpLinksetMtp3T17=cSpLinksetMtp3T17, cSpLinksetSpare14RouteTableName=cSpLinksetSpare14RouteTableName, cSpLinkQ752T2E9=cSpLinkQ752T2E9, cSpLinkMtp3BytesRcvd=cSpLinkMtp3BytesRcvd, ciscoSpAccountingGroup=ciscoSpAccountingGroup, cSpAccHCSccpRcvdBytes=cSpAccHCSccpRcvdBytes, cSpAccSnmmRcvdPackets=cSpAccSnmmRcvdPackets, cSpAccSpare15SentBytes=cSpAccSpare15SentBytes, cSpAccHCSpare15RcvdPackets=cSpAccHCSpare15RcvdPackets, cSpMtp3T26=cSpMtp3T26, cSpAccHCSpare14RcvdBytes=cSpAccHCSpare14RcvdBytes, cSpLinksetMtp3T08=cSpLinksetMtp3T08, cSpAccHCSentPackets=cSpAccHCSentPackets, cSpAccHCSnmmRcvdPackets=cSpAccHCSnmmRcvdPackets, cSpLinksetInboundAcl=cSpLinksetInboundAcl, cSpAccMtupSentBytes=cSpAccMtupSentBytes, cSpAccSpare11RcvdBytes=cSpAccSpare11RcvdBytes, cSpLinksetMtp3T06=cSpLinksetMtp3T06, cSpLinkCongestionAbate1=cSpLinkCongestionAbate1, cSpAccHCSntmRcvdPackets=cSpAccHCSntmRcvdPackets, cSpAccHCTupSentPackets=cSpAccHCTupSentPackets, cSpLinkSigLinkTest=cSpLinkSigLinkTest, cSpAccIsupRcvdBytes=cSpAccIsupRcvdBytes, cSpAccSntmSentPackets=cSpAccSntmSentPackets, cSpMtp2T02=cSpMtp2T02, cSpAccSnmmRcvdBytes=cSpAccSnmmRcvdBytes, cSpLinksetBytesSent=cSpLinksetBytesSent, cSpAccHCDupfSentBytes=cSpAccHCDupfSentBytes, cSpAccHCSntmSentBytes=cSpAccHCSntmSentBytes, cSpLinksetMtp3T29=cSpLinksetMtp3T29, cSpLinksetMtp3T22=cSpLinksetMtp3T22, cSpMtp3T32=cSpMtp3T32, cSpLinksetSpare2RouteTableName=cSpLinksetSpare2RouteTableName, cSpLinksetState=cSpLinksetState, cSpRouteTableName=cSpRouteTableName, cSpAccSnmmSentBytes=cSpAccSnmmSentBytes, cSpAccHCSnmmSentPackets=cSpAccHCSnmmSentPackets, cSpLinkMtp3T32=cSpLinkMtp3T32, cSpRouteMask=cSpRouteMask, cSpAccHCSccpSentPackets=cSpAccHCSccpSentPackets, cSpAccHCSpare2RcvdPackets=cSpAccHCSpare2RcvdPackets, cSpLinksetMtp3T07=cSpLinksetMtp3T07, CSpSs7Variant=CSpSs7Variant, cSpLinksetMtp3T11=cSpLinksetMtp3T11, cSpRouteDestLsCost=cSpRouteDestLsCost, cSpLinkQ752T1E10=cSpLinkQ752T1E10, cSpLinksetHCBytesSent=cSpLinksetHCBytesSent, cSpAclId=cSpAclId, ciscoSpLinksetGroup=ciscoSpLinksetGroup, cSpMtp3T28=cSpMtp3T28, cSpLinkMtp3T28=cSpLinkMtp3T28, cSpMtp3T31=cSpMtp3T31, cSpLinkQ752T1E9=cSpLinkQ752T1E9, cSpAccSpare15RcvdBytes=cSpAccSpare15RcvdBytes, cSpAccHCIsupSentBytes=cSpAccHCIsupSentBytes, cSpLinkMtp3T08=cSpLinkMtp3T08, cSpLinksetDurationOutService=cSpLinksetDurationOutService, cSpAccSpare12SentPackets=cSpAccSpare12SentPackets, cSpLinkQ752T3E11L1=cSpLinkQ752T3E11L1, cSpAccHCSccpSentBytes=cSpAccHCSccpSentBytes, cSpAccSpare14RcvdPackets=cSpAccSpare14RcvdPackets, cSpLinkMtp3T10=cSpLinkMtp3T10, cSpLnkStateChangeNotifEnabled=cSpLnkStateChangeNotifEnabled, cSpAccSisupRcvdBytes=cSpAccSisupRcvdBytes, cSpLinkMtp3T12=cSpLinkMtp3T12, cSpAccSpare14SentBytes=cSpAccSpare14SentBytes, cSpLinkCongestionOnset2=cSpLinkCongestionOnset2, cSpLinksetAccountingEnabled=cSpLinksetAccountingEnabled, cSpLinkHCMtp3BytesRcvd=cSpLinkHCMtp3BytesRcvd, cSpMtp3T13=cSpMtp3T13, cSpMtp2T06=cSpMtp2T06, cSpAccHCSpare15RcvdBytes=cSpAccHCSpare15RcvdBytes, cSpAccHCSpare13RcvdPackets=cSpAccHCSpare13RcvdPackets, cSpLinkMtp3T06=cSpLinkMtp3T06, cSpLinksetMtp3T19=cSpLinksetMtp3T19, cSpAccHCSpare14RcvdPackets=cSpAccHCSpare14RcvdPackets, cSpAclOffset=cSpAclOffset, cSpLinkMtp3PacketsRcvd=cSpLinkMtp3PacketsRcvd, CSpAclSi=CSpAclSi, cSpAccDupcRcvdBytes=cSpAccDupcRcvdBytes, cSpAccSpare11RcvdPackets=cSpAccSpare11RcvdPackets, cSpMtp3T15=cSpMtp3T15, cSpMtp2T03=cSpMtp2T03, cSpNotificationsEnable=cSpNotificationsEnable, CSpLinkType=CSpLinkType, cSpLinkMtp2T01=cSpLinkMtp2T01, cSpLinksetMtp3T28=cSpLinksetMtp3T28, cSpLinksetSpare15RouteTableName=cSpLinksetSpare15RouteTableName, cSpLinkMtp2T06=cSpLinkMtp2T06, cSpMtp3T20=cSpMtp3T20, cSpLinkQ752T2E16=cSpLinkQ752T2E16, cSpLinksetMtp2T07=cSpLinksetMtp2T07, cSpLinksetTable=cSpLinksetTable, cSpLinkMtp3T02=cSpLinkMtp3T02, cSpAccSpare11SentBytes=cSpAccSpare11SentBytes, cSpLinkHCMtp3PacketsSent=cSpLinkHCMtp3PacketsSent, cSpAccHCSisupRcvdBytes=cSpAccHCSisupRcvdBytes, cSpLinksetMtp3T04=cSpLinksetMtp3T04, cSpAccDupcSentBytes=cSpAccDupcSentBytes, cSpLsStateChangeNotifEnabled=cSpLsStateChangeNotifEnabled, cSpLink=cSpLink, cSpLinkMtp3T13=cSpLinkMtp3T13, cSpLinkQ752T3E11L3=cSpLinkQ752T3E11L3, cSpRoute=cSpRoute, cSpLinkSlc=cSpLinkSlc, cSpAclAction=cSpAclAction, cSpLinkTable=cSpLinkTable, cSpAccBisupSentPackets=cSpAccBisupSentPackets, cSpAccSpare12RcvdBytes=cSpAccSpare12RcvdBytes, cSpLinksetSntmRouteTableName=cSpLinksetSntmRouteTableName, cSpAccSccpRcvdPackets=cSpAccSccpRcvdPackets, cSpLinkMtp3T26=cSpLinkMtp3T26, cSpAccHCSpare11RcvdBytes=cSpAccHCSpare11RcvdBytes, cSpAccSpare13RcvdPackets=cSpAccSpare13RcvdPackets, ciscoSpLinkGroup=ciscoSpLinkGroup, cSpAccSpare2RcvdPackets=cSpAccSpare2RcvdPackets, cSpLinksetNumLinks=cSpLinksetNumLinks, cSpLinkMtp3T27=cSpLinkMtp3T27, cSpAccHCSntmRcvdBytes=cSpAccHCSntmRcvdBytes, cSpLinksetSisupRouteTableName=cSpLinksetSisupRouteTableName, cSpAccHCBisupSentBytes=cSpAccHCBisupSentBytes, cSpLinkMtp3T01=cSpLinkMtp3T01, cSpLinksetMtp3T20=cSpLinksetMtp3T20, cSpLinkMtp3T11=cSpLinkMtp3T11, cSpLinksetMtp3T16=cSpLinksetMtp3T16, cSpLinkMtp3T29=cSpLinkMtp3T29, cSpLinksetHCPacketsSent=cSpLinksetHCPacketsSent, cSpLinksetBytesRcvd=cSpLinksetBytesRcvd, cSpAccHCDupfRcvdBytes=cSpAccHCDupfRcvdBytes, CSpLinksetId=CSpLinksetId, cSpAccHCSpare14SentBytes=cSpAccHCSpare14SentBytes, CSpOsiState=CSpOsiState, cSpAclOpc=cSpAclOpc, cSpLinkQ752T2E6=cSpLinkQ752T2E6, cSpLinksetMtp2T05=cSpLinksetMtp2T05, cSpAccSpare2SentPackets=cSpAccSpare2SentPackets, cSpMtp3T16=cSpMtp3T16, cSpLinksetHCBytesRcvd=cSpLinksetHCBytesRcvd, CSpAclAction=CSpAclAction, cSpAccSisupSentPackets=cSpAccSisupSentPackets, ciscoSpMIBGroups=ciscoSpMIBGroups, cSpLinksetMtp3T23=cSpLinksetMtp3T23, cSpAccSpare12SentBytes=cSpAccSpare12SentBytes, cSpAccDpc=cSpAccDpc, cSpLinkQ752T1E7=cSpLinkQ752T1E7, cSpAccSpare14SentPackets=cSpAccSpare14SentPackets, cSpLinksetMtupRouteTableName=cSpLinksetMtupRouteTableName, cSpMtp3T17=cSpMtp3T17, cSpAccHCSentBytes=cSpAccHCSentBytes, cSpLinkMtp3T15=cSpLinkMtp3T15)
