#
# PySNMP MIB module Fore-frf5-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Fore-frf5-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:17:39 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint")
frameInternetworking, AtmAddress = mibBuilder.importSymbols("Fore-Common-MIB", "frameInternetworking", "AtmAddress")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Unsigned32, IpAddress, Integer32, Bits, ModuleIdentity, TimeTicks, NotificationType, iso, Counter64, Counter32, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "IpAddress", "Integer32", "Bits", "ModuleIdentity", "TimeTicks", "NotificationType", "iso", "Counter64", "Counter32", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "MibIdentifier")
DisplayString, TextualConvention, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "RowStatus")
frf5 = ModuleIdentity((1, 3, 6, 1, 4, 1, 326, 1, 16, 7))
if mibBuilder.loadTexts: frf5.setLastUpdated('9912090000Z')
if mibBuilder.loadTexts: frf5.setOrganization('FORE')
if mibBuilder.loadTexts: frf5.setContactInfo(' Postal: FORE Systems, Inc. 1000 FORE Drive Warrendale, PA 15086-7502 USA Tel: +1 724-742-4444 Email: info@fore.com Web: http://www.fore.com')
if mibBuilder.loadTexts: frf5.setDescription('This MIB module defines FR/ATM interworking tables. It gives the means to create/remove a FR/ATM interworking connection and provides statistics at the connection level.')
frf5ConnTable = MibTable((1, 3, 6, 1, 4, 1, 326, 1, 16, 7, 1), )
if mibBuilder.loadTexts: frf5ConnTable.setStatus('current')
if mibBuilder.loadTexts: frf5ConnTable.setDescription('Table of cross connections between the frame relay and ATM Fabric connections')
frf5ConnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 1, 16, 7, 1, 1), ).setIndexNames((0, "Fore-frf5-MIB", "frf5ConnFrServiceIfIndex"), (0, "Fore-frf5-MIB", "frf5ConnDlci"))
if mibBuilder.loadTexts: frf5ConnEntry.setStatus('current')
if mibBuilder.loadTexts: frf5ConnEntry.setDescription('Entry in the frame relay/atm netmod crossconnect table')
frf5ConnFrServiceIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 7, 1, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frf5ConnFrServiceIfIndex.setStatus('current')
if mibBuilder.loadTexts: frf5ConnFrServiceIfIndex.setDescription('Interface index of the Frame Relay service this connection exists on')
frf5ConnDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 7, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frf5ConnDlci.setStatus('current')
if mibBuilder.loadTexts: frf5ConnDlci.setDescription('DLCI of this connection on the frame relay service')
frf5ConnFrsscsDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 7, 1, 1, 3), Integer32().clone(1022)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: frf5ConnFrsscsDlci.setStatus('current')
if mibBuilder.loadTexts: frf5ConnFrsscsDlci.setDescription('FR SSCS DLCI of this connection which will be multiplexed on a ATM PVC')
frf5ConnFabServiceIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 7, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frf5ConnFabServiceIfIndex.setStatus('current')
if mibBuilder.loadTexts: frf5ConnFabServiceIfIndex.setDescription('This is the IfIndex associated with the fabric pseudo atm service this connection is mapped to by the agent when this Frame Relay connection is created.')
frf5ConnFabAtmIf = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 7, 1, 1, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: frf5ConnFabAtmIf.setStatus('current')
if mibBuilder.loadTexts: frf5ConnFabAtmIf.setDescription('This is the fabric ATM interface of the ATM connection this frame relay/ATM connection is mapped to by the agent when this row is created. This variable can be set only for dangling connections.')
frf5ConnFabVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 7, 1, 1, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: frf5ConnFabVpi.setStatus('current')
if mibBuilder.loadTexts: frf5ConnFabVpi.setDescription('This is the fabric VPI (equivalent to ivpi) of the ATM connection this frame relay/ATM connection is mapped to by the agent when this row is created. This VPI will be used to establish a connection across the switching fabric by means of the FORE-switch MIB. This variable can be set only for dangling connections.')
frf5ConnFabVci = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 7, 1, 1, 7), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: frf5ConnFabVci.setStatus('current')
if mibBuilder.loadTexts: frf5ConnFabVci.setDescription('This is the fabric VCI (equivalent to ivci) of the ATM connection this frame relay connection is mapped to by the agent when this row is created. This VCI will be used to establish a connection across the switching fabric by means of the FORE-switch MIB. This variable can be set only for dangling connections.')
frf5ConnRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 7, 1, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: frf5ConnRowStatus.setStatus('current')
if mibBuilder.loadTexts: frf5ConnRowStatus.setDescription('This object is used for dynamic creation of entries in this table and all frame relay connection level tables. This object is also used to delete existing connection rows.')
frf5ConnProfileEpdPpdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 7, 1, 1, 9), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: frf5ConnProfileEpdPpdIndex.setStatus('current')
if mibBuilder.loadTexts: frf5ConnProfileEpdPpdIndex.setDescription('The index of the EpdPpd Controller profile.')
frf5ConnAtmAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 7, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("null", 1), ("e164", 2), ("nsap", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: frf5ConnAtmAddrType.setStatus('current')
if mibBuilder.loadTexts: frf5ConnAtmAddrType.setDescription('Defines the address format of the ATM Service User end point')
frf5ConnAtmAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 7, 1, 1, 11), AtmAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: frf5ConnAtmAddress.setStatus('current')
if mibBuilder.loadTexts: frf5ConnAtmAddress.setDescription('The destination ATM address to which this Virtual Circuit is connected.')
frf5ConnAtmSubAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 7, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("null", 1), ("e164", 2), ("nsap", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: frf5ConnAtmSubAddrType.setStatus('current')
if mibBuilder.loadTexts: frf5ConnAtmSubAddrType.setDescription('Defines the sub-address format of the ATM Service User end point ')
frf5ConnAtmSubAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 7, 1, 1, 13), AtmAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: frf5ConnAtmSubAddress.setStatus('current')
if mibBuilder.loadTexts: frf5ConnAtmSubAddress.setDescription('The destination ATM subaddress to which this Virtual Circuit is connected.')
frf5ConnFrAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 7, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("null", 1), ("e164", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: frf5ConnFrAddrType.setStatus('current')
if mibBuilder.loadTexts: frf5ConnFrAddrType.setDescription('Defines the frame relay address format of the Frame Relay Service User end point')
frf5ConnFrAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 7, 1, 1, 15), AtmAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: frf5ConnFrAddress.setStatus('current')
if mibBuilder.loadTexts: frf5ConnFrAddress.setDescription('The address to which the Frame Relay DLCI is connected.')
frf5ConnAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 7, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: frf5ConnAdminStatus.setStatus('current')
if mibBuilder.loadTexts: frf5ConnAdminStatus.setDescription('Indicates whether the particular virtual circuit is operational. ')
frf5ConnOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 7, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frf5ConnOperStatus.setStatus('current')
if mibBuilder.loadTexts: frf5ConnOperStatus.setDescription(' The current operational status of the interworking connection')
frf5ConnCreationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 7, 1, 1, 18), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frf5ConnCreationTime.setStatus('current')
if mibBuilder.loadTexts: frf5ConnCreationTime.setDescription('The value of sysUpTime when the virtual circuit was created')
frf5ConnTimeChange = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 7, 1, 1, 19), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frf5ConnTimeChange.setStatus('current')
if mibBuilder.loadTexts: frf5ConnTimeChange.setDescription('The value of sysUpTime (MIB II) when last there was a change in the virtual circuit state ')
frf5extDlcmiTable = MibTable((1, 3, 6, 1, 4, 1, 326, 1, 16, 7, 2), )
if mibBuilder.loadTexts: frf5extDlcmiTable.setStatus('current')
if mibBuilder.loadTexts: frf5extDlcmiTable.setDescription('The Parameters for the Data Link Connection Management Interface corresponding to a given ifEntry. These parameters are logical extensions to those contained within the object frDlcmiTable in RFC1315.')
frf5extDlcmiEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 1, 16, 7, 2, 1), ).setIndexNames((0, "Fore-frf5-MIB", "frf5extDlmciAtmIf"), (0, "Fore-frf5-MIB", "frf5extDlcmiAtmVpi"), (0, "Fore-frf5-MIB", "frf5extDlcmiAtmVci"))
if mibBuilder.loadTexts: frf5extDlcmiEntry.setStatus('current')
if mibBuilder.loadTexts: frf5extDlcmiEntry.setDescription('The Parameters for the Data Link Connection Management Interface.')
frf5extDlmciAtmIf = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 7, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frf5extDlmciAtmIf.setStatus('current')
if mibBuilder.loadTexts: frf5extDlmciAtmIf.setDescription('The Atm interface index corresponds to the port. This is also the index of the portTable.')
frf5extDlcmiAtmVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 7, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frf5extDlcmiAtmVpi.setStatus('current')
if mibBuilder.loadTexts: frf5extDlcmiAtmVpi.setDescription('VPI of the ATM VCC on which FR DLCIs are multiplexed')
frf5extDlcmiAtmVci = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 7, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frf5extDlcmiAtmVci.setStatus('current')
if mibBuilder.loadTexts: frf5extDlcmiAtmVci.setDescription('VCI of the ATM VCC on which FR DLCIs are multiplexed ')
frf5extDlcmiProfileLmiIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 7, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frf5extDlcmiProfileLmiIndex.setStatus('current')
if mibBuilder.loadTexts: frf5extDlcmiProfileLmiIndex.setDescription('Index for the LMI profile for this ATM VCC.')
frf5extDlcmiProfileFrf5Index = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 7, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frf5extDlcmiProfileFrf5Index.setStatus('current')
if mibBuilder.loadTexts: frf5extDlcmiProfileFrf5Index.setDescription('Index for the FRF5 profile, in the fore-profile.mib.')
frf5extDlcmiStatsMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 7, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frf5extDlcmiStatsMonitor.setStatus('current')
if mibBuilder.loadTexts: frf5extDlcmiStatsMonitor.setDescription('This object specifies whether statistics (ATM VCC and FR DLCI statistics) are to be counted at an ATM VCC level. When the state changes from enabled to disabled, all the related statistics will be frozen at their current value. When the state changes from disabled to enabled, all related statistics will be reset (zeroed). Note that this Monitor is overridden by the netmod level nmFramStatsMonitor. Refer to fore-fram.mib for more details.')
frf5extDlcmiStatsEnabledTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 7, 2, 1, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frf5extDlcmiStatsEnabledTimeStamp.setStatus('current')
if mibBuilder.loadTexts: frf5extDlcmiStatsEnabledTimeStamp.setDescription('This object reflects the point in time, with reference to sysUpTime, either when frf5extDlcmiStatsMonitor is set to enabled or when nmFramStatsMonitor is set to enabled. The time will reflect the last StatsMonitor to be enabled. The timestamp provides a starting timestamp for the current statistics that are being counted.')
frf5extDlcmiLmiDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 7, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1023))).clone(namedValues=NamedValues(("q933AnnexA", 0), ("stratacom", 1023)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frf5extDlcmiLmiDlci.setStatus('current')
if mibBuilder.loadTexts: frf5extDlcmiLmiDlci.setDescription('The dlci upon which LMI traffic will be broadcast. If Q933-AnnexA=0, otherwise STRATACOM=1023.')
frf5extDlcmiLmiFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 7, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frf5extDlcmiLmiFlowControl.setStatus('current')
if mibBuilder.loadTexts: frf5extDlcmiLmiFlowControl.setDescription('Specifies whether STRATACOM LMI based (R-bit) notification performs flow control for the Circuits on this interface.')
frf5extDlcmiLmiBandwidthControl = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 7, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frf5extDlcmiLmiBandwidthControl.setStatus('current')
if mibBuilder.loadTexts: frf5extDlcmiLmiBandwidthControl.setDescription('Specifies whether STRATACOM LMI based CIR notification affects the CIR flow control parameters for the connections on this interface.')
frf5extDlcmiRxAbortedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 7, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frf5extDlcmiRxAbortedFrames.setStatus('current')
if mibBuilder.loadTexts: frf5extDlcmiRxAbortedFrames.setDescription('The number of aborted frames received on this Frame Relay logical interface. A frame is considered aborted after receiving 7 or more continuous ones.')
frf5extDlcmiRcvCrcErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 7, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frf5extDlcmiRcvCrcErrors.setStatus('current')
if mibBuilder.loadTexts: frf5extDlcmiRcvCrcErrors.setDescription('Specifies the number of frames receive with CRC errors on this interface.')
frf5extDlcmiRcvShortFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 7, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frf5extDlcmiRcvShortFrames.setStatus('current')
if mibBuilder.loadTexts: frf5extDlcmiRcvShortFrames.setDescription('The number of frames containing less than 5 octets received on this interface.')
frf5extDlcmiRcvLongFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 7, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frf5extDlcmiRcvLongFrames.setStatus('current')
if mibBuilder.loadTexts: frf5extDlcmiRcvLongFrames.setDescription('The number of frames containing greater than 8191 octets received on this interface.')
frf5extDlcmiRcvInvalidDLCI = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 7, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frf5extDlcmiRcvInvalidDLCI.setStatus('current')
if mibBuilder.loadTexts: frf5extDlcmiRcvInvalidDLCI.setDescription('The number of frames with an invalid DLCI received on this interface.')
frf5extDlcmiRcvUnknownErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 7, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frf5extDlcmiRcvUnknownErrs.setStatus('current')
if mibBuilder.loadTexts: frf5extDlcmiRcvUnknownErrs.setDescription('The number of frames with other errors received on this interface.')
frf5extDlcmiLmiTxStatusResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 7, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frf5extDlcmiLmiTxStatusResponses.setStatus('current')
if mibBuilder.loadTexts: frf5extDlcmiLmiTxStatusResponses.setDescription('Number of STATUS messages transmitted on this interface.')
frf5extDlcmiLmiTxFullStatusResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 7, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frf5extDlcmiLmiTxFullStatusResponses.setStatus('current')
if mibBuilder.loadTexts: frf5extDlcmiLmiTxFullStatusResponses.setDescription('Number of STATUS messages with full status Information Element transmitted on this interface.')
frf5extDlcmiLmiTxStatusEnquiries = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 7, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frf5extDlcmiLmiTxStatusEnquiries.setStatus('current')
if mibBuilder.loadTexts: frf5extDlcmiLmiTxStatusEnquiries.setDescription('Number of STATUS ENQUIRY messages transmitted on this interface.')
frf5extDlcmiLmiTxFullStatusEnquiries = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 7, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frf5extDlcmiLmiTxFullStatusEnquiries.setStatus('current')
if mibBuilder.loadTexts: frf5extDlcmiLmiTxFullStatusEnquiries.setDescription('Number of STATUS ENQUIRY messages with full status Information Element transmitted on this interface.')
frf5extDlcmiLmiRxStatusResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 7, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frf5extDlcmiLmiRxStatusResponses.setStatus('current')
if mibBuilder.loadTexts: frf5extDlcmiLmiRxStatusResponses.setDescription('Number of STATUS messages received on this interface.')
frf5extDlcmiLmiRxFullStatusResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 7, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frf5extDlcmiLmiRxFullStatusResponses.setStatus('current')
if mibBuilder.loadTexts: frf5extDlcmiLmiRxFullStatusResponses.setDescription('Number of STATUS messages with full status Information Element received on this interface.')
frf5extDlcmiLmiRxStatusEnquiries = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 7, 2, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frf5extDlcmiLmiRxStatusEnquiries.setStatus('current')
if mibBuilder.loadTexts: frf5extDlcmiLmiRxStatusEnquiries.setDescription('Number of STATUS messages received on this interface.')
frf5extDlcmiLmiRxFullStatusEnquiries = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 7, 2, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frf5extDlcmiLmiRxFullStatusEnquiries.setStatus('current')
if mibBuilder.loadTexts: frf5extDlcmiLmiRxFullStatusEnquiries.setDescription('Number of STATUS ENQUIRY messages with full status Information Element receive on this interface.')
frf5extDlcmiLmiUnknownMessagesRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 7, 2, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frf5extDlcmiLmiUnknownMessagesRcvd.setStatus('current')
if mibBuilder.loadTexts: frf5extDlcmiLmiUnknownMessagesRcvd.setDescription('Number of Unknown LMI messages received on this interface.')
frf5extDlcmiLmiStatusLostSequences = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 7, 2, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frf5extDlcmiLmiStatusLostSequences.setStatus('current')
if mibBuilder.loadTexts: frf5extDlcmiLmiStatusLostSequences.setDescription('The total number of times a loss of sequencing in received STATUS messages was detected on this interface.')
frf5extDlcmiLmiStatusEnqLostSequences = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 7, 2, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frf5extDlcmiLmiStatusEnqLostSequences.setStatus('current')
if mibBuilder.loadTexts: frf5extDlcmiLmiStatusEnqLostSequences.setDescription('The total number of times a loss of sequencing in received STATUS ENQUIRY messages was detected on this interface.')
frf5extDlcmiLmiMissingStatEnquiries = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 7, 2, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frf5extDlcmiLmiMissingStatEnquiries.setStatus('current')
if mibBuilder.loadTexts: frf5extDlcmiLmiMissingStatEnquiries.setDescription('The number of times an expected STATUS ENQUIRY message was not received within the expected time on this interface.')
frf5extDlcmiLmiUnexpectedPVCStatMsg = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 7, 2, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frf5extDlcmiLmiUnexpectedPVCStatMsg.setStatus('current')
if mibBuilder.loadTexts: frf5extDlcmiLmiUnexpectedPVCStatMsg.setDescription('The number of LMI messages that were received with unexpected PVC STATUS Information Element on this interface.')
frf5extDlcmiLmiUnexpectedDLCI = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 7, 2, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frf5extDlcmiLmiUnexpectedDLCI.setStatus('current')
if mibBuilder.loadTexts: frf5extDlcmiLmiUnexpectedDLCI.setDescription('The number of STATUS messages received with unconfigured DLCI')
frf5extDlcmiLmiStatEnqRatePlus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 7, 2, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frf5extDlcmiLmiStatEnqRatePlus.setStatus('current')
if mibBuilder.loadTexts: frf5extDlcmiLmiStatEnqRatePlus.setDescription('The number of times the STATUS ENQUIRY message was received more frequently than expected. For STRATACOM only')
frf5extDlcmiLmiInvInfoFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 7, 2, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frf5extDlcmiLmiInvInfoFrame.setStatus('current')
if mibBuilder.loadTexts: frf5extDlcmiLmiInvInfoFrame.setDescription('The number of times an LMI message was received with information type not equal to unnumbered information type.')
frf5extDlcmiLmiInvFrameHdr = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 7, 2, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frf5extDlcmiLmiInvFrameHdr.setStatus('current')
if mibBuilder.loadTexts: frf5extDlcmiLmiInvFrameHdr.setDescription('The number of LMI frames received with error in the header bits.')
frf5extDlcmiLmiNoIERepType = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 7, 2, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frf5extDlcmiLmiNoIERepType.setStatus('current')
if mibBuilder.loadTexts: frf5extDlcmiLmiNoIERepType.setDescription('The number of times an LMI frame was received with missing Report Type Information Element')
frf5extDlcmiLmiNoIEKeepAlive = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 7, 2, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frf5extDlcmiLmiNoIEKeepAlive.setStatus('current')
if mibBuilder.loadTexts: frf5extDlcmiLmiNoIEKeepAlive.setDescription('The number of times an LMI frame was received with missing Link Integrity Verification Information Element.')
frf5extDlcmiLmiMissingResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 7, 2, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frf5extDlcmiLmiMissingResponses.setStatus('current')
if mibBuilder.loadTexts: frf5extDlcmiLmiMissingResponses.setDescription('The total number of times a timeout occurred without receiving a response to an LMI request by this interface.')
frf5extDlcmiLmiUnsuppIERcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 7, 2, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frf5extDlcmiLmiUnsuppIERcvd.setStatus('current')
if mibBuilder.loadTexts: frf5extDlcmiLmiUnsuppIERcvd.setDescription('The number of LMI messages received with unknown Information Element.')
frf5extDlcmiDlcis = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 7, 2, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frf5extDlcmiDlcis.setStatus('current')
if mibBuilder.loadTexts: frf5extDlcmiDlcis.setDescription('The number of permanent DLCIs established on this ATM logical interface')
frf5extDlcmiUserLinkRelErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 7, 2, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frf5extDlcmiUserLinkRelErrors.setStatus('current')
if mibBuilder.loadTexts: frf5extDlcmiUserLinkRelErrors.setDescription('The number of user-side local in-channel signalling link reliability errors (i.e., non- receipt of Status/Status Enquiry messages or invalid sequence numbers in a Link Integrity Verification Information Element) for this UNI/NNI logical port. If the logical port is not performing user-side procedures, then this value is equal to noSuchName.')
frf5extDlcmiUserProtErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 7, 2, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frf5extDlcmiUserProtErrors.setStatus('current')
if mibBuilder.loadTexts: frf5extDlcmiUserProtErrors.setDescription('The number of user-side local in-channel signalling protocol errors (i.e., protocol discriminator, message type, call reference, and mandatory information element errors) for this UNI/NNI logical port. If the logical port is not performing user-side procedures, then this value is equal to noSuchName.')
frf5extDlcmiUserChanInactive = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 7, 2, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frf5extDlcmiUserChanInactive.setStatus('current')
if mibBuilder.loadTexts: frf5extDlcmiUserChanInactive.setDescription('The number of times the user-side channel was declared inactive (i.e., N392 errors in N393 events) for this UNI/NNI logical port. If the logical port is not performing user-side procedures, then this value is equal to noSuchName.')
frf5extDlcmiNetLinkRelErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 7, 2, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frf5extDlcmiNetLinkRelErrors.setStatus('current')
if mibBuilder.loadTexts: frf5extDlcmiNetLinkRelErrors.setDescription('The number of network-side local in-channel signalling link reliability errors (i.e., non- receipt of Status/Status Enquiry messages or invalid sequence numbers in a Link Integrity Verification Information Element) for this UNI/NNI logical port. If the logical port is not performing network-side procedures, then this value is equal to noSuchName.')
frf5extDlcmiNetProtErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 7, 2, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frf5extDlcmiNetProtErrors.setStatus('current')
if mibBuilder.loadTexts: frf5extDlcmiNetProtErrors.setDescription('The number of network-side local in-channel signalling protocol errors (i.e., protocol discriminator, message type, call reference, and mandatory information element errors) for this UNI/NNI logical port. If the logical port is not performing network-side procedures, then this value is equal to noSuchName.')
frf5extDlcmiNetChanInactive = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 7, 2, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frf5extDlcmiNetChanInactive.setStatus('current')
if mibBuilder.loadTexts: frf5extDlcmiNetChanInactive.setDescription('The number of times the network-side channel was declared inactive (i.e., N392 errors in N393 events) for this UNI/NNI logical port. If the logical port is not performing network-side procedures, then this value is equal to noSuchName.')
frf5extDlcmiRootService = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 7, 2, 1, 45), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frf5extDlcmiRootService.setStatus('current')
if mibBuilder.loadTexts: frf5extDlcmiRootService.setDescription('The service ifindex of the first connection belonging to this VCC.')
frf5extDlcmiRootDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 7, 2, 1, 46), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frf5extDlcmiRootDlci.setStatus('current')
if mibBuilder.loadTexts: frf5extDlcmiRootDlci.setDescription('The dlci of the first connection belonging to this VCC.')
mibBuilder.exportSymbols("Fore-frf5-MIB", frf5ConnAtmAddrType=frf5ConnAtmAddrType, frf5ConnFabAtmIf=frf5ConnFabAtmIf, frf5ConnFrsscsDlci=frf5ConnFrsscsDlci, frf5extDlcmiAtmVci=frf5extDlcmiAtmVci, frf5extDlcmiLmiBandwidthControl=frf5extDlcmiLmiBandwidthControl, frf5extDlcmiStatsMonitor=frf5extDlcmiStatsMonitor, frf5extDlcmiLmiMissingStatEnquiries=frf5extDlcmiLmiMissingStatEnquiries, frf5extDlcmiUserLinkRelErrors=frf5extDlcmiUserLinkRelErrors, frf5extDlcmiRootService=frf5extDlcmiRootService, frf5ConnOperStatus=frf5ConnOperStatus, frf5ConnAdminStatus=frf5ConnAdminStatus, frf5extDlcmiLmiUnexpectedDLCI=frf5extDlcmiLmiUnexpectedDLCI, frf5extDlcmiUserChanInactive=frf5extDlcmiUserChanInactive, frf5extDlcmiStatsEnabledTimeStamp=frf5extDlcmiStatsEnabledTimeStamp, frf5=frf5, frf5extDlcmiLmiStatusEnqLostSequences=frf5extDlcmiLmiStatusEnqLostSequences, frf5ConnEntry=frf5ConnEntry, frf5ConnRowStatus=frf5ConnRowStatus, frf5ConnAtmSubAddrType=frf5ConnAtmSubAddrType, frf5ConnDlci=frf5ConnDlci, frf5ConnCreationTime=frf5ConnCreationTime, frf5extDlcmiRcvShortFrames=frf5extDlcmiRcvShortFrames, frf5extDlcmiRcvLongFrames=frf5extDlcmiRcvLongFrames, frf5extDlcmiEntry=frf5extDlcmiEntry, frf5extDlcmiRcvInvalidDLCI=frf5extDlcmiRcvInvalidDLCI, frf5extDlcmiLmiUnknownMessagesRcvd=frf5extDlcmiLmiUnknownMessagesRcvd, frf5extDlcmiLmiUnexpectedPVCStatMsg=frf5extDlcmiLmiUnexpectedPVCStatMsg, frf5extDlcmiLmiStatEnqRatePlus=frf5extDlcmiLmiStatEnqRatePlus, frf5ConnFrAddrType=frf5ConnFrAddrType, frf5extDlcmiLmiNoIEKeepAlive=frf5extDlcmiLmiNoIEKeepAlive, frf5extDlcmiLmiUnsuppIERcvd=frf5extDlcmiLmiUnsuppIERcvd, frf5extDlcmiLmiInvFrameHdr=frf5extDlcmiLmiInvFrameHdr, frf5extDlcmiNetProtErrors=frf5extDlcmiNetProtErrors, frf5extDlcmiAtmVpi=frf5extDlcmiAtmVpi, frf5extDlmciAtmIf=frf5extDlmciAtmIf, frf5extDlcmiLmiDlci=frf5extDlcmiLmiDlci, frf5ConnTable=frf5ConnTable, frf5extDlcmiRootDlci=frf5extDlcmiRootDlci, frf5extDlcmiRcvCrcErrors=frf5extDlcmiRcvCrcErrors, frf5extDlcmiLmiRxStatusEnquiries=frf5extDlcmiLmiRxStatusEnquiries, PYSNMP_MODULE_ID=frf5, frf5ConnAtmSubAddress=frf5ConnAtmSubAddress, frf5extDlcmiLmiRxFullStatusEnquiries=frf5extDlcmiLmiRxFullStatusEnquiries, frf5extDlcmiLmiNoIERepType=frf5extDlcmiLmiNoIERepType, frf5extDlcmiUserProtErrors=frf5extDlcmiUserProtErrors, frf5extDlcmiLmiTxStatusEnquiries=frf5extDlcmiLmiTxStatusEnquiries, frf5extDlcmiProfileLmiIndex=frf5extDlcmiProfileLmiIndex, frf5extDlcmiLmiRxFullStatusResponses=frf5extDlcmiLmiRxFullStatusResponses, frf5ConnFabServiceIfIndex=frf5ConnFabServiceIfIndex, frf5extDlcmiNetChanInactive=frf5extDlcmiNetChanInactive, frf5extDlcmiLmiTxFullStatusResponses=frf5extDlcmiLmiTxFullStatusResponses, frf5ConnFabVpi=frf5ConnFabVpi, frf5ConnProfileEpdPpdIndex=frf5ConnProfileEpdPpdIndex, frf5ConnFrAddress=frf5ConnFrAddress, frf5ConnAtmAddress=frf5ConnAtmAddress, frf5extDlcmiProfileFrf5Index=frf5extDlcmiProfileFrf5Index, frf5extDlcmiLmiFlowControl=frf5extDlcmiLmiFlowControl, frf5extDlcmiRxAbortedFrames=frf5extDlcmiRxAbortedFrames, frf5extDlcmiRcvUnknownErrs=frf5extDlcmiRcvUnknownErrs, frf5extDlcmiLmiRxStatusResponses=frf5extDlcmiLmiRxStatusResponses, frf5extDlcmiLmiTxFullStatusEnquiries=frf5extDlcmiLmiTxFullStatusEnquiries, frf5extDlcmiNetLinkRelErrors=frf5extDlcmiNetLinkRelErrors, frf5extDlcmiDlcis=frf5extDlcmiDlcis, frf5extDlcmiLmiTxStatusResponses=frf5extDlcmiLmiTxStatusResponses, frf5ConnFrServiceIfIndex=frf5ConnFrServiceIfIndex, frf5extDlcmiLmiMissingResponses=frf5extDlcmiLmiMissingResponses, frf5ConnFabVci=frf5ConnFabVci, frf5extDlcmiTable=frf5extDlcmiTable, frf5ConnTimeChange=frf5ConnTimeChange, frf5extDlcmiLmiStatusLostSequences=frf5extDlcmiLmiStatusLostSequences, frf5extDlcmiLmiInvInfoFrame=frf5extDlcmiLmiInvInfoFrame)
