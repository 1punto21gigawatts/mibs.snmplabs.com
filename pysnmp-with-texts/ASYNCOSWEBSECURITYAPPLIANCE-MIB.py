#
# PySNMP MIB module ASYNCOSWEBSECURITYAPPLIANCE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ASYNCOSWEBSECURITYAPPLIANCE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:29:35 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint")
connectionURL, = mibBuilder.importSymbols("ASYNCOS-MAIL-MIB", "connectionURL")
asyncOSAppliances, = mibBuilder.importSymbols("IRONPORT-SMI", "asyncOSAppliances")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
TimeTicks, iso, NotificationType, Bits, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, IpAddress, Counter32, Gauge32, ModuleIdentity, Counter64, Integer32, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "iso", "NotificationType", "Bits", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "IpAddress", "Counter32", "Gauge32", "ModuleIdentity", "Counter64", "Integer32", "MibIdentifier")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
asyncOSWebSecurityAppliance = ModuleIdentity((1, 3, 6, 1, 4, 1, 15497, 1, 2))
asyncOSWebSecurityAppliance.setRevisions(('2013-08-09 00:00', '2010-04-20 00:00', '2010-04-15 00:00', '2009-07-13 00:00', '2007-03-27 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: asyncOSWebSecurityAppliance.setRevisionsDescriptions(('Add missing connectionURL import', 'Add missing cacheMemoryBufferUsagePct, cacheClientReqMisses, cacheClientReqDenials.', 'Minor description tweaks', 'Cleaning up integration with IRONPORT-SMI', 'MIB Version 0.1',))
if mibBuilder.loadTexts: asyncOSWebSecurityAppliance.setLastUpdated('201308090000Z')
if mibBuilder.loadTexts: asyncOSWebSecurityAppliance.setOrganization('IronPort Systems')
if mibBuilder.loadTexts: asyncOSWebSecurityAppliance.setContactInfo('Postal: 950 Elm Avenue San Bruno, CA 94066 E-mail: tac-content-security@cisco.com')
if mibBuilder.loadTexts: asyncOSWebSecurityAppliance.setDescription('Enterprise MIB for IronPort Systems Web Security Appliances.')
proxySystem = MibIdentifier((1, 3, 6, 1, 4, 1, 15497, 1, 2, 1))
proxyConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 15497, 1, 2, 2))
proxyPerf = MibIdentifier((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3))
proxyHardware = MibIdentifier((1, 3, 6, 1, 4, 1, 15497, 1, 2, 4))
proxyTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 15497, 1, 2, 5))
cacheUptime = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 1, 1), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheUptime.setStatus('current')
if mibBuilder.loadTexts: cacheUptime.setDescription('The Uptime of the proxy in timeticks')
cacheMemory = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheMemory.setStatus('current')
if mibBuilder.loadTexts: cacheMemory.setDescription('System Memory size in KB')
cacheSysStorage = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheSysStorage.setStatus('current')
if mibBuilder.loadTexts: cacheSysStorage.setDescription('Caching Storage size in KB')
cacheAdmin = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 2, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheAdmin.setStatus('current')
if mibBuilder.loadTexts: cacheAdmin.setDescription('The contact responsible for the administration of the proxy. Usually a name and email address.')
cacheSoftware = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 2, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheSoftware.setStatus('current')
if mibBuilder.loadTexts: cacheSoftware.setDescription('Name of the proxy sofware.')
cacheVersion = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 2, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheVersion.setStatus('current')
if mibBuilder.loadTexts: cacheVersion.setDescription('Version of the proxy software.')
licenseExpiration = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseExpiration.setStatus('current')
if mibBuilder.loadTexts: licenseExpiration.setDescription('When does the license expire.')
proxySysPerf = MibIdentifier((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 1))
proxyClientSidePerf = MibIdentifier((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 2))
proxyServerSidePerf = MibIdentifier((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 3))
proxyCachePerf = MibIdentifier((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 4))
proxyMedianSvcTime = MibIdentifier((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 5))
proxyExecutiveSummary = MibIdentifier((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 6))
proxyRecentPerf = MibIdentifier((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 7))
cacheCpuTime = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheCpuTime.setStatus('current')
if mibBuilder.loadTexts: cacheCpuTime.setDescription('Amount of CPU seconds consumed')
cacheCpuUsage = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheCpuUsage.setStatus('current')
if mibBuilder.loadTexts: cacheCpuUsage.setDescription('Proxy CPU percent (0-100) used - measured every 10 seconds')
cacheMaxResSize = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheMaxResSize.setStatus('current')
if mibBuilder.loadTexts: cacheMaxResSize.setDescription('Maximum Resident Size in KB')
cacheUsedStoragePct = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheUsedStoragePct.setStatus('current')
if mibBuilder.loadTexts: cacheUsedStoragePct.setDescription('Percentage use of caching storage')
cacheBusyCPUPct = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheBusyCPUPct.setStatus('current')
if mibBuilder.loadTexts: cacheBusyCPUPct.setDescription('Percentage busy time of CPU')
cacheMemoryBufferUsagePct = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheMemoryBufferUsagePct.setStatus('current')
if mibBuilder.loadTexts: cacheMemoryBufferUsagePct.setDescription('Percentage of memory buffers in use.')
cacheClientSizeHistTable = MibTable((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 2, 1), )
if mibBuilder.loadTexts: cacheClientSizeHistTable.setStatus('current')
if mibBuilder.loadTexts: cacheClientSizeHistTable.setDescription('The table of median statistics serviced by the proxy indexed by the median time.')
cacheClientSizeHistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 2, 1, 1), ).setIndexNames((0, "ASYNCOSWEBSECURITYAPPLIANCE-MIB", "cacheClientSizeHistBinNumber"))
if mibBuilder.loadTexts: cacheClientSizeHistEntry.setStatus('current')
if mibBuilder.loadTexts: cacheClientSizeHistEntry.setDescription('An entry in the cacheCacheSizeHistTable.')
cacheClientSizeHistBinNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheClientSizeHistBinNumber.setStatus('current')
if mibBuilder.loadTexts: cacheClientSizeHistBinNumber.setDescription('The value used to index the table 1..15.')
cacheClientReqSize = MibTableColumn((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheClientReqSize.setStatus('current')
if mibBuilder.loadTexts: cacheClientReqSize.setDescription('The size distribution of requests from the clients.')
cacheClientRequests = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheClientRequests.setStatus('current')
if mibBuilder.loadTexts: cacheClientRequests.setDescription('The number of HTTP requests received from clients.')
cacheClientHits = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheClientHits.setStatus('current')
if mibBuilder.loadTexts: cacheClientHits.setDescription('The number of HTTP hits that the proxy clients have produced.')
cacheClientErrors = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheClientErrors.setStatus('current')
if mibBuilder.loadTexts: cacheClientErrors.setDescription('The number of HTTP errors caused by client connections.')
cacheClientInKb = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheClientInKb.setStatus('current')
if mibBuilder.loadTexts: cacheClientInKb.setDescription('The number of KBs received from the clients by the proxy.')
cacheClientOutKb = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 2, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheClientOutKb.setStatus('current')
if mibBuilder.loadTexts: cacheClientOutKb.setDescription('The number of KBs delivered to clients from the proxy.')
cacheClientIdleConns = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 2, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheClientIdleConns.setStatus('current')
if mibBuilder.loadTexts: cacheClientIdleConns.setDescription('The number of connected but idle persistent client connections.')
cacheClientTotalConns = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 2, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheClientTotalConns.setStatus('current')
if mibBuilder.loadTexts: cacheClientTotalConns.setDescription('The current number of active + idle client connections.')
cacheClientMaxConns = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 2, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheClientMaxConns.setStatus('current')
if mibBuilder.loadTexts: cacheClientMaxConns.setDescription('The maximum number of simultaneous client connections that will be allowed.')
cacheClientAccepts = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 2, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheClientAccepts.setStatus('current')
if mibBuilder.loadTexts: cacheClientAccepts.setDescription('The total number of sockets accepted from the clients.')
cacheClientICPRequests = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 2, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheClientICPRequests.setStatus('current')
if mibBuilder.loadTexts: cacheClientICPRequests.setDescription('The number of ICP requests received from clients.')
cacheClientICPHits = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 2, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheClientICPHits.setStatus('current')
if mibBuilder.loadTexts: cacheClientICPHits.setDescription('The number of ICP hits that the proxy clients have produced.')
cacheClientICPMisses = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 2, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheClientICPMisses.setStatus('current')
if mibBuilder.loadTexts: cacheClientICPMisses.setDescription('The number of ICP misses that the proxy clients have produced.')
cacheClientICPErrors = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 2, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheClientICPErrors.setStatus('current')
if mibBuilder.loadTexts: cacheClientICPErrors.setDescription('The number of ICP errors that the proxy clients have produced.')
cacheClientICPDenials = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 2, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheClientICPDenials.setStatus('current')
if mibBuilder.loadTexts: cacheClientICPDenials.setDescription('The number of ICP denials that the proxy clients have produced.')
cacheClientReqMisses = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 2, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheClientReqMisses.setStatus('current')
if mibBuilder.loadTexts: cacheClientReqMisses.setDescription('The number of misses that the proxy clients have produced.')
cacheClientReqDenials = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 2, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheClientReqDenials.setStatus('current')
if mibBuilder.loadTexts: cacheClientReqDenials.setDescription('The number of responses blocked by access control.')
cacheServerSizeHistTable = MibTable((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 3, 1), )
if mibBuilder.loadTexts: cacheServerSizeHistTable.setStatus('current')
if mibBuilder.loadTexts: cacheServerSizeHistTable.setDescription('The table of median statistics serviced by the proxy indexed by the median time.')
cacheServerSizeHistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 3, 1, 1), ).setIndexNames((0, "ASYNCOSWEBSECURITYAPPLIANCE-MIB", "cacheServerSizeHistBinNumber"))
if mibBuilder.loadTexts: cacheServerSizeHistEntry.setStatus('current')
if mibBuilder.loadTexts: cacheServerSizeHistEntry.setDescription('An entry in the cacheCacheSizeHistTable.')
cacheServerSizeHistBinNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheServerSizeHistBinNumber.setStatus('current')
if mibBuilder.loadTexts: cacheServerSizeHistBinNumber.setDescription('The value used to index the table 1..15.')
cacheServerReplySize = MibTableColumn((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheServerReplySize.setStatus('current')
if mibBuilder.loadTexts: cacheServerReplySize.setDescription('The size distribution of replies from the Servers.')
cacheServerRequests = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 3, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheServerRequests.setStatus('current')
if mibBuilder.loadTexts: cacheServerRequests.setDescription('The total number of HTTP requests sent to servers.')
cacheServerSockets = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 3, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheServerSockets.setStatus('current')
if mibBuilder.loadTexts: cacheServerSockets.setDescription('The total number of sockets opened from the servers.')
cacheServerErrors = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 3, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheServerErrors.setStatus('current')
if mibBuilder.loadTexts: cacheServerErrors.setDescription('The number of HTTP errors while fetching objects.')
cacheServerInKb = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 3, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheServerInKb.setStatus('current')
if mibBuilder.loadTexts: cacheServerInKb.setDescription('The number of KBs received by the proxy from remote servers.')
cacheServerOutKb = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 3, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheServerOutKb.setStatus('current')
if mibBuilder.loadTexts: cacheServerOutKb.setDescription('The number of KBs sent the proxy to remote servers.')
cacheServerIdleConns = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 3, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheServerIdleConns.setStatus('current')
if mibBuilder.loadTexts: cacheServerIdleConns.setDescription('The number of connected but idle persistent server connections.')
cacheServerTotalConns = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 3, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheServerTotalConns.setStatus('current')
if mibBuilder.loadTexts: cacheServerTotalConns.setDescription('The current number of active + idle server connections.')
cacheServerCloseIdleConns = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 3, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheServerCloseIdleConns.setStatus('current')
if mibBuilder.loadTexts: cacheServerCloseIdleConns.setDescription('The number of server connections closed due to idle time limits.')
cacheServerLimitIdleConns = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 3, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheServerLimitIdleConns.setStatus('current')
if mibBuilder.loadTexts: cacheServerLimitIdleConns.setDescription('The number of times the number of idle persistent connections hit the count limit and caused a connection to be closed.')
cacheServerConnsThresh = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 3, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheServerConnsThresh.setStatus('current')
if mibBuilder.loadTexts: cacheServerConnsThresh.setDescription('The limit on the number of server connections.')
cacheServerPersisConnsRetries = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 3, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheServerPersisConnsRetries.setStatus('current')
if mibBuilder.loadTexts: cacheServerPersisConnsRetries.setDescription('The number of retries on persistent connections.')
cacheServerRegConnsRetries = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 3, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheServerRegConnsRetries.setStatus('current')
if mibBuilder.loadTexts: cacheServerRegConnsRetries.setDescription('The number of retries on regular connections.')
cacheServerRWErrorRetries = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 3, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheServerRWErrorRetries.setStatus('current')
if mibBuilder.loadTexts: cacheServerRWErrorRetries.setDescription('The number of retries due to read/write errors.')
cacheServerEarlyCloseRetries = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 3, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheServerEarlyCloseRetries.setStatus('current')
if mibBuilder.loadTexts: cacheServerEarlyCloseRetries.setDescription('The number of retries due to early closed connections.')
cacheServerICPRequests = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 3, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheServerICPRequests.setStatus('current')
if mibBuilder.loadTexts: cacheServerICPRequests.setDescription('The number of ICP requests sent to servers.')
cacheServerICPHits = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 3, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheServerICPHits.setStatus('current')
if mibBuilder.loadTexts: cacheServerICPHits.setDescription('The number of ICP hits that the proxy servers have produced.')
cacheServerICPMisses = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 3, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheServerICPMisses.setStatus('current')
if mibBuilder.loadTexts: cacheServerICPMisses.setDescription('The number of ICP misses that the proxy servers have produced.')
cacheServerICPErrors = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 3, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheServerICPErrors.setStatus('current')
if mibBuilder.loadTexts: cacheServerICPErrors.setDescription('The number of ICP errors that the proxy servers have produced.')
cacheServerICPDenials = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 3, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheServerICPDenials.setStatus('current')
if mibBuilder.loadTexts: cacheServerICPDenials.setDescription('The number of ICP denials that the proxy servers have produced.')
cacheCacheSizeHistTable = MibTable((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 4, 1), )
if mibBuilder.loadTexts: cacheCacheSizeHistTable.setStatus('current')
if mibBuilder.loadTexts: cacheCacheSizeHistTable.setDescription('The table of median statistics serviced by the proxy indexed by the median time.')
cacheCacheSizeHistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 4, 1, 1), ).setIndexNames((0, "ASYNCOSWEBSECURITYAPPLIANCE-MIB", "cacheSizeHistBinNumber"))
if mibBuilder.loadTexts: cacheCacheSizeHistEntry.setStatus('current')
if mibBuilder.loadTexts: cacheCacheSizeHistEntry.setDescription('An entry in the cacheCacheSizeHistTable.')
cacheSizeHistBinNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheSizeHistBinNumber.setStatus('current')
if mibBuilder.loadTexts: cacheSizeHistBinNumber.setDescription('The value used to index the table 1..15.')
cacheCacheActiveObjs = MibTableColumn((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 4, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheCacheActiveObjs.setStatus('current')
if mibBuilder.loadTexts: cacheCacheActiveObjs.setDescription('The size distribution of currently cached objects.')
cacheCacheAllObjs = MibTableColumn((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 4, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheCacheAllObjs.setStatus('current')
if mibBuilder.loadTexts: cacheCacheAllObjs.setDescription('The size distribution of all cached objects.')
cacheCacheLiveCachedObjs = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 4, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheCacheLiveCachedObjs.setStatus('current')
if mibBuilder.loadTexts: cacheCacheLiveCachedObjs.setDescription('The number of objects currently cached.')
cacheCacheLiveCachedObjSizes = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 4, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheCacheLiveCachedObjSizes.setStatus('current')
if mibBuilder.loadTexts: cacheCacheLiveCachedObjSizes.setDescription('The total size in KBs of currently cached objects.')
cacheCacheTotalCachedObjs = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 4, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheCacheTotalCachedObjs.setStatus('current')
if mibBuilder.loadTexts: cacheCacheTotalCachedObjs.setDescription('The total number of cached objects written to disks.')
cacheCacheTotalCachedObjSizes = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 4, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheCacheTotalCachedObjSizes.setStatus('current')
if mibBuilder.loadTexts: cacheCacheTotalCachedObjSizes.setDescription('The total size in KBs of all objects ever cached and written to disks.')
cacheMedianSvcTable = MibTable((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 5, 1), )
if mibBuilder.loadTexts: cacheMedianSvcTable.setStatus('current')
if mibBuilder.loadTexts: cacheMedianSvcTable.setDescription('The table of median statistics serviced by the proxy indexed by the median time.')
cacheMedianSvcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 5, 1, 1), ).setIndexNames((0, "ASYNCOSWEBSECURITYAPPLIANCE-MIB", "cacheMedianTime"))
if mibBuilder.loadTexts: cacheMedianSvcEntry.setStatus('current')
if mibBuilder.loadTexts: cacheMedianSvcEntry.setDescription('An entry in the proxyMedianSvcTable.')
cacheMedianTime = MibTableColumn((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheMedianTime.setStatus('current')
if mibBuilder.loadTexts: cacheMedianTime.setDescription('The value used to index the table 1/5/60')
cacheHTTPCltSvcTime = MibTableColumn((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 5, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheHTTPCltSvcTime.setStatus('current')
if mibBuilder.loadTexts: cacheHTTPCltSvcTime.setDescription('The service time for all HTTP requests.')
cacheHTTPMissSvcTime = MibTableColumn((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 5, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheHTTPMissSvcTime.setStatus('current')
if mibBuilder.loadTexts: cacheHTTPMissSvcTime.setDescription('The service time for all HTTP misses.')
cacheHTTPHitSvcTime = MibTableColumn((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 5, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheHTTPHitSvcTime.setStatus('current')
if mibBuilder.loadTexts: cacheHTTPHitSvcTime.setDescription('The service time for all HTTP hits.')
cacheHTTPSrvSvcTime = MibTableColumn((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 5, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheHTTPSrvSvcTime.setStatus('current')
if mibBuilder.loadTexts: cacheHTTPSrvSvcTime.setDescription('The service time from servers.')
cacheDnsSvcTime = MibTableColumn((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 5, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheDnsSvcTime.setStatus('current')
if mibBuilder.loadTexts: cacheDnsSvcTime.setDescription('The DNS service time.')
cacheHTTPSvcWaitTime = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 5, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheHTTPSvcWaitTime.setStatus('current')
if mibBuilder.loadTexts: cacheHTTPSvcWaitTime.setDescription('The time waiting for first byte response from servers.')
cacheTotalHttpReqs = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheTotalHttpReqs.setStatus('current')
if mibBuilder.loadTexts: cacheTotalHttpReqs.setDescription('Total number of HTTP requests from clients')
cacheMeanRespTime = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheMeanRespTime.setStatus('current')
if mibBuilder.loadTexts: cacheMeanRespTime.setDescription('The HTTP mean response time')
cacheMeanMissRespTime = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 6, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheMeanMissRespTime.setStatus('current')
if mibBuilder.loadTexts: cacheMeanMissRespTime.setDescription('The HTTP mean response time of Misses')
cacheMeanHitRespTime = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 6, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheMeanHitRespTime.setStatus('current')
if mibBuilder.loadTexts: cacheMeanHitRespTime.setDescription('The HTTP mean response time of Hits')
cacheMeanHitRatio = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 6, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheMeanHitRatio.setStatus('current')
if mibBuilder.loadTexts: cacheMeanHitRatio.setDescription('The HTTP hit ratio')
cacheMeanByteHitRatio = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 6, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheMeanByteHitRatio.setStatus('current')
if mibBuilder.loadTexts: cacheMeanByteHitRatio.setDescription('The HTTP byte hit ratio')
cacheTotalBandwidthSaving = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 6, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheTotalBandwidthSaving.setStatus('current')
if mibBuilder.loadTexts: cacheTotalBandwidthSaving.setDescription('The total bandwidth savings for HTTP in Mbits/sec')
cacheDuration = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 6, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheDuration.setStatus('current')
if mibBuilder.loadTexts: cacheDuration.setDescription('The proxy up time')
cacheCltReplyErrPct = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 6, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheCltReplyErrPct.setStatus('current')
if mibBuilder.loadTexts: cacheCltReplyErrPct.setDescription('The percentage of errors in the HTTP replies to clients')
proxyRecentThruputPerf = MibIdentifier((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 7, 1))
cacheThruputNow = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheThruputNow.setStatus('current')
if mibBuilder.loadTexts: cacheThruputNow.setDescription('Request throughput in the last minute')
cacheThruput1hrPeak = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheThruput1hrPeak.setStatus('current')
if mibBuilder.loadTexts: cacheThruput1hrPeak.setDescription('Peak request throughput in the last hour')
cacheThruput1hrMean = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 7, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheThruput1hrMean.setStatus('current')
if mibBuilder.loadTexts: cacheThruput1hrMean.setDescription('Average request throughput in the last hour')
cacheThruput1dayPeak = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 7, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheThruput1dayPeak.setStatus('current')
if mibBuilder.loadTexts: cacheThruput1dayPeak.setDescription('Peak request throughput in the last day')
cacheThruput1dayMean = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 7, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheThruput1dayMean.setStatus('current')
if mibBuilder.loadTexts: cacheThruput1dayMean.setDescription('Average request throughput in the last day')
cacheThruput1weekPeak = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 7, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheThruput1weekPeak.setStatus('current')
if mibBuilder.loadTexts: cacheThruput1weekPeak.setDescription('Peak request throughput in the last week')
cacheThruput1weekMean = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 7, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheThruput1weekMean.setStatus('current')
if mibBuilder.loadTexts: cacheThruput1weekMean.setDescription('Average request throughput in the last week')
cacheThruputLifePeak = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 7, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheThruputLifePeak.setStatus('current')
if mibBuilder.loadTexts: cacheThruputLifePeak.setDescription('Peak request throughput in the cache lifetime')
cacheThruputLifeMean = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 7, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheThruputLifeMean.setStatus('current')
if mibBuilder.loadTexts: cacheThruputLifeMean.setDescription('Average request throughput in the cache lifetime')
proxyRecentBandWSavPerf = MibIdentifier((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 7, 2))
cacheBwidthSavingNow = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 7, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheBwidthSavingNow.setStatus('current')
if mibBuilder.loadTexts: cacheBwidthSavingNow.setDescription('Bandwidth savings in the last minute (in Kb/sec)')
cacheBwidthSaving1hrPeak = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 7, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheBwidthSaving1hrPeak.setStatus('current')
if mibBuilder.loadTexts: cacheBwidthSaving1hrPeak.setDescription('Peak Bandwidth savings in the last hour (in Kb/sec)')
cacheBwidthSaving1hrMean = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 7, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheBwidthSaving1hrMean.setStatus('current')
if mibBuilder.loadTexts: cacheBwidthSaving1hrMean.setDescription('Average Bandwidth savings in the last hour (in Kb/sec)')
cacheBwidthSaving1dayPeak = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 7, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheBwidthSaving1dayPeak.setStatus('current')
if mibBuilder.loadTexts: cacheBwidthSaving1dayPeak.setDescription('Peak Bandwidth savings in the last day (in Kb/sec)')
cacheBwidthSaving1dayMean = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 7, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheBwidthSaving1dayMean.setStatus('current')
if mibBuilder.loadTexts: cacheBwidthSaving1dayMean.setDescription('Average Bandwidth savings in the last day (in Kb/sec)')
cacheBwidthSaving1weekPeak = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 7, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheBwidthSaving1weekPeak.setStatus('current')
if mibBuilder.loadTexts: cacheBwidthSaving1weekPeak.setDescription('Peak Bandwidth savings in the last week (in Kb/sec)')
cacheBwidthSaving1weekMean = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 7, 2, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheBwidthSaving1weekMean.setStatus('current')
if mibBuilder.loadTexts: cacheBwidthSaving1weekMean.setDescription('Average Bandwidth savings in the last week (in Kb/sec)')
cacheBwidthSavingLifePeak = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 7, 2, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheBwidthSavingLifePeak.setStatus('current')
if mibBuilder.loadTexts: cacheBwidthSavingLifePeak.setDescription('Peak Bandwidth savings in the cache lifetime (in Kb/sec)')
cacheBwidthSavingLifeMean = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 7, 2, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheBwidthSavingLifeMean.setStatus('current')
if mibBuilder.loadTexts: cacheBwidthSavingLifeMean.setDescription('Average Bandwidth savings in the cache lifetime (in Kb/sec)')
proxyRecentBandWSpntPerf = MibIdentifier((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 7, 3))
cacheBwidthSpentNow = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 7, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheBwidthSpentNow.setStatus('current')
if mibBuilder.loadTexts: cacheBwidthSpentNow.setDescription('Bandwidth spent in the last minute (in Kb/sec)')
cacheBwidthSpent1hrPeak = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 7, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheBwidthSpent1hrPeak.setStatus('current')
if mibBuilder.loadTexts: cacheBwidthSpent1hrPeak.setDescription('Peak Bandwidth spent in the last hour (in Kb/sec)')
cacheBwidthSpent1hrMean = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 7, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheBwidthSpent1hrMean.setStatus('current')
if mibBuilder.loadTexts: cacheBwidthSpent1hrMean.setDescription('Average Bandwidth spent in the last hour (in Kb/sec)')
cacheBwidthSpent1dayPeak = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 7, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheBwidthSpent1dayPeak.setStatus('current')
if mibBuilder.loadTexts: cacheBwidthSpent1dayPeak.setDescription('Peak Bandwidth spent in the last day (in Kb/sec)')
cacheBwidthSpent1dayMean = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 7, 3, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheBwidthSpent1dayMean.setStatus('current')
if mibBuilder.loadTexts: cacheBwidthSpent1dayMean.setDescription('Average Bandwidth spent in the last day (in Kb/sec)')
cacheBwidthSpent1weekPeak = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 7, 3, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheBwidthSpent1weekPeak.setStatus('current')
if mibBuilder.loadTexts: cacheBwidthSpent1weekPeak.setDescription('Peak Bandwidth spent in the last week (in Kb/sec)')
cacheBwidthSpent1weekMean = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 7, 3, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheBwidthSpent1weekMean.setStatus('current')
if mibBuilder.loadTexts: cacheBwidthSpent1weekMean.setDescription('Average Bandwidth spent in the last week (in Kb/sec)')
cacheBwidthSpentLifePeak = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 7, 3, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheBwidthSpentLifePeak.setStatus('current')
if mibBuilder.loadTexts: cacheBwidthSpentLifePeak.setDescription('Peak Bandwidth spent in the cache lifetime (in Kb/sec)')
cacheBwidthSpentLifeMean = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 7, 3, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheBwidthSpentLifeMean.setStatus('current')
if mibBuilder.loadTexts: cacheBwidthSpentLifeMean.setDescription('Average Bandwidth spent in the cache lifetime (in Kb/sec)')
proxyRecentBandWTotPerf = MibIdentifier((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 7, 4))
cacheBwidthTotalNow = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 7, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheBwidthTotalNow.setStatus('current')
if mibBuilder.loadTexts: cacheBwidthTotalNow.setDescription('Bandwidth total in the last minute (in Kb/sec)')
cacheBwidthTotal1hrPeak = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 7, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheBwidthTotal1hrPeak.setStatus('current')
if mibBuilder.loadTexts: cacheBwidthTotal1hrPeak.setDescription('Peak Bandwidth total in the last hour (in Kb/sec)')
cacheBwidthTotal1hrMean = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 7, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheBwidthTotal1hrMean.setStatus('current')
if mibBuilder.loadTexts: cacheBwidthTotal1hrMean.setDescription('Average Bandwidth total in the last hour (in Kb/sec)')
cacheBwidthTotal1dayPeak = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 7, 4, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheBwidthTotal1dayPeak.setStatus('current')
if mibBuilder.loadTexts: cacheBwidthTotal1dayPeak.setDescription('Peak Bandwidth total in the last day (in Kb/sec)')
cacheBwidthTotal1dayMean = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 7, 4, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheBwidthTotal1dayMean.setStatus('current')
if mibBuilder.loadTexts: cacheBwidthTotal1dayMean.setDescription('Average Bandwidth total in the last day (in Kb/sec)')
cacheBwidthTotal1weekPeak = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 7, 4, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheBwidthTotal1weekPeak.setStatus('current')
if mibBuilder.loadTexts: cacheBwidthTotal1weekPeak.setDescription('Peak Bandwidth total in the last week (in Kb/sec)')
cacheBwidthTotal1weekMean = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 7, 4, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheBwidthTotal1weekMean.setStatus('current')
if mibBuilder.loadTexts: cacheBwidthTotal1weekMean.setDescription('Average Bandwidth total in the last week (in Kb/sec)')
cacheBwidthTotalLifePeak = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 7, 4, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheBwidthTotalLifePeak.setStatus('current')
if mibBuilder.loadTexts: cacheBwidthTotalLifePeak.setDescription('Peak Bandwidth total in the cache lifetime (in Kb/sec)')
cacheBwidthTotalLifeMean = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 7, 4, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheBwidthTotalLifeMean.setStatus('current')
if mibBuilder.loadTexts: cacheBwidthTotalLifeMean.setDescription('Average Bandwidth total in the cache lifetime (in Kb/sec)')
proxyRecentHitsPerf = MibIdentifier((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 7, 5))
cacheHitsNow = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 7, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheHitsNow.setStatus('current')
if mibBuilder.loadTexts: cacheHitsNow.setDescription('Hit throughput in the last minute')
cacheHits1hrPeak = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 7, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheHits1hrPeak.setStatus('current')
if mibBuilder.loadTexts: cacheHits1hrPeak.setDescription('Peak hit throughput in the last hour')
cacheHits1hrMean = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 7, 5, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheHits1hrMean.setStatus('current')
if mibBuilder.loadTexts: cacheHits1hrMean.setDescription('Average hit throughput in the last hour')
cacheHits1dayPeak = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 7, 5, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheHits1dayPeak.setStatus('current')
if mibBuilder.loadTexts: cacheHits1dayPeak.setDescription('Peak hit throughput in the last day')
cacheHits1dayMean = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 7, 5, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheHits1dayMean.setStatus('current')
if mibBuilder.loadTexts: cacheHits1dayMean.setDescription('Average hit throughput in the last day')
cacheHits1weekPeak = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 7, 5, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheHits1weekPeak.setStatus('current')
if mibBuilder.loadTexts: cacheHits1weekPeak.setDescription('Peak hit throughput in the last week')
cacheHits1weekMean = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 7, 5, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheHits1weekMean.setStatus('current')
if mibBuilder.loadTexts: cacheHits1weekMean.setDescription('Average hit throughput in the last week')
cacheHitsLifePeak = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 7, 5, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheHitsLifePeak.setStatus('current')
if mibBuilder.loadTexts: cacheHitsLifePeak.setDescription('Peak hit throughput in the cache lifetime')
cacheHitsLifeMean = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 7, 5, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheHitsLifeMean.setStatus('current')
if mibBuilder.loadTexts: cacheHitsLifeMean.setDescription('Average hit throughput in the cache lifetime')
proxyRecentMissesPerf = MibIdentifier((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 7, 6))
cacheMissesNow = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 7, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheMissesNow.setStatus('current')
if mibBuilder.loadTexts: cacheMissesNow.setDescription('Miss throughput in the last minute')
cacheMisses1hrPeak = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 7, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheMisses1hrPeak.setStatus('current')
if mibBuilder.loadTexts: cacheMisses1hrPeak.setDescription('Peak miss throughput in the last hour')
cacheMisses1hrMean = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 7, 6, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheMisses1hrMean.setStatus('current')
if mibBuilder.loadTexts: cacheMisses1hrMean.setDescription('Average miss throughput in the last hour')
cacheMisses1dayPeak = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 7, 6, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheMisses1dayPeak.setStatus('current')
if mibBuilder.loadTexts: cacheMisses1dayPeak.setDescription('Peak miss throughput in the last day')
cacheMisses1dayMean = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 7, 6, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheMisses1dayMean.setStatus('current')
if mibBuilder.loadTexts: cacheMisses1dayMean.setDescription('Average miss throughput in the last day')
cacheMisses1weekPeak = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 7, 6, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheMisses1weekPeak.setStatus('current')
if mibBuilder.loadTexts: cacheMisses1weekPeak.setDescription('Peak miss throughput in the last week')
cacheMisses1weekMean = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 7, 6, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheMisses1weekMean.setStatus('current')
if mibBuilder.loadTexts: cacheMisses1weekMean.setDescription('Average miss throughput in the last week')
cacheMissesLifePeak = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 7, 6, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheMissesLifePeak.setStatus('current')
if mibBuilder.loadTexts: cacheMissesLifePeak.setDescription('Peak miss throughput in the cache lifetime')
cacheMissesLifeMean = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 7, 6, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheMissesLifeMean.setStatus('current')
if mibBuilder.loadTexts: cacheMissesLifeMean.setDescription('Average miss throughput in the cache lifetime')
proxyRecentHitRespTimePerf = MibIdentifier((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 7, 7))
cacheHitRespTimeNow = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 7, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheHitRespTimeNow.setStatus('current')
if mibBuilder.loadTexts: cacheHitRespTimeNow.setDescription('Cache hit response time in the last minute')
cacheHitRespTime1hrPeak = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 7, 7, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheHitRespTime1hrPeak.setStatus('current')
if mibBuilder.loadTexts: cacheHitRespTime1hrPeak.setDescription('Peak cache hit response time in the last hour')
cacheHitRespTime1hrMean = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 7, 7, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheHitRespTime1hrMean.setStatus('current')
if mibBuilder.loadTexts: cacheHitRespTime1hrMean.setDescription('Average cache hit response time in the last hour')
cacheHitRespTime1dayPeak = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 7, 7, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheHitRespTime1dayPeak.setStatus('current')
if mibBuilder.loadTexts: cacheHitRespTime1dayPeak.setDescription('Peak cache hit response time in the last day')
cacheHitRespTime1dayMean = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 7, 7, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheHitRespTime1dayMean.setStatus('current')
if mibBuilder.loadTexts: cacheHitRespTime1dayMean.setDescription('Average cache hit response time in the last day')
cacheHitRespTime1weekPeak = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 7, 7, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheHitRespTime1weekPeak.setStatus('current')
if mibBuilder.loadTexts: cacheHitRespTime1weekPeak.setDescription('Peak cache hit response time in the last week')
cacheHitRespTime1weekMean = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 7, 7, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheHitRespTime1weekMean.setStatus('current')
if mibBuilder.loadTexts: cacheHitRespTime1weekMean.setDescription('Average cache hit response time in the last week')
cacheHitRespTimeLifePeak = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 7, 7, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheHitRespTimeLifePeak.setStatus('current')
if mibBuilder.loadTexts: cacheHitRespTimeLifePeak.setDescription('Peak cache hit response time in the cache lifetime')
cacheHitRespTimeLifeMean = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 7, 7, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheHitRespTimeLifeMean.setStatus('current')
if mibBuilder.loadTexts: cacheHitRespTimeLifeMean.setDescription('Average cache hit response time in the cache lifetime')
proxyRecentMissRespTimePerf = MibIdentifier((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 7, 8))
cacheMissRespTimeNow = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 7, 8, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheMissRespTimeNow.setStatus('current')
if mibBuilder.loadTexts: cacheMissRespTimeNow.setDescription('Cache miss response time in the last minute')
cacheMissRespTime1hrPeak = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 7, 8, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheMissRespTime1hrPeak.setStatus('current')
if mibBuilder.loadTexts: cacheMissRespTime1hrPeak.setDescription('Peak cache miss response time in the last hour')
cacheMissRespTime1hrMean = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 7, 8, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheMissRespTime1hrMean.setStatus('current')
if mibBuilder.loadTexts: cacheMissRespTime1hrMean.setDescription('Average cache miss response time in the last hour')
cacheMissRespTime1dayPeak = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 7, 8, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheMissRespTime1dayPeak.setStatus('current')
if mibBuilder.loadTexts: cacheMissRespTime1dayPeak.setDescription('Peak cache miss response time in the last day')
cacheMissRespTime1dayMean = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 7, 8, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheMissRespTime1dayMean.setStatus('current')
if mibBuilder.loadTexts: cacheMissRespTime1dayMean.setDescription('Average cache miss response time in the last day')
cacheMissRespTime1weekPeak = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 7, 8, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheMissRespTime1weekPeak.setStatus('current')
if mibBuilder.loadTexts: cacheMissRespTime1weekPeak.setDescription('Peak cache miss response time in the last week')
cacheMissRespTime1weekMean = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 7, 8, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheMissRespTime1weekMean.setStatus('current')
if mibBuilder.loadTexts: cacheMissRespTime1weekMean.setDescription('Average cache miss response time in the last week')
cacheMissRespTimeLifePeak = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 7, 8, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheMissRespTimeLifePeak.setStatus('current')
if mibBuilder.loadTexts: cacheMissRespTimeLifePeak.setDescription('Peak cache miss response time in the cache lifetime')
cacheMissRespTimeLifeMean = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 7, 8, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheMissRespTimeLifeMean.setStatus('current')
if mibBuilder.loadTexts: cacheMissRespTimeLifeMean.setDescription('Average cache miss response time in the cache lifetime')
proxyRecentTotalRespTimePerf = MibIdentifier((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 7, 9))
cacheTotalRespTimeNow = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 7, 9, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheTotalRespTimeNow.setStatus('current')
if mibBuilder.loadTexts: cacheTotalRespTimeNow.setDescription('Cache total response time in the last minute')
cacheTotalRespTime1hrPeak = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 7, 9, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheTotalRespTime1hrPeak.setStatus('current')
if mibBuilder.loadTexts: cacheTotalRespTime1hrPeak.setDescription('Peak cache total response time in the last hour')
cacheTotalRespTime1hrMean = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 7, 9, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheTotalRespTime1hrMean.setStatus('current')
if mibBuilder.loadTexts: cacheTotalRespTime1hrMean.setDescription('Average cache total response time in the last hour')
cacheTotalRespTime1dayPeak = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 7, 9, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheTotalRespTime1dayPeak.setStatus('current')
if mibBuilder.loadTexts: cacheTotalRespTime1dayPeak.setDescription('Peak cache total response time in the last day')
cacheTotalRespTime1dayMean = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 7, 9, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheTotalRespTime1dayMean.setStatus('current')
if mibBuilder.loadTexts: cacheTotalRespTime1dayMean.setDescription('Average cache total response time in the last day')
cacheTotalRespTime1weekPeak = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 7, 9, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheTotalRespTime1weekPeak.setStatus('current')
if mibBuilder.loadTexts: cacheTotalRespTime1weekPeak.setDescription('Peak cache total response time in the last week')
cacheTotalRespTime1weekMean = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 7, 9, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheTotalRespTime1weekMean.setStatus('current')
if mibBuilder.loadTexts: cacheTotalRespTime1weekMean.setDescription('Average cache total response time in the last week')
cacheTotalRespTimeLifePeak = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 7, 9, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheTotalRespTimeLifePeak.setStatus('current')
if mibBuilder.loadTexts: cacheTotalRespTimeLifePeak.setDescription('Peak cache total response time in the cache lifetime')
cacheTotalRespTimeLifeMean = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 7, 9, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheTotalRespTimeLifeMean.setStatus('current')
if mibBuilder.loadTexts: cacheTotalRespTimeLifeMean.setDescription('Average cache total response time in the cache lifetime')
proxyRecentErrsPerf = MibIdentifier((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 7, 10))
cacheErrsNow = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 7, 10, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheErrsNow.setStatus('current')
if mibBuilder.loadTexts: cacheErrsNow.setDescription('Cache error throughput time in the last minute')
cacheErrs1hrPeak = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 7, 10, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheErrs1hrPeak.setStatus('current')
if mibBuilder.loadTexts: cacheErrs1hrPeak.setDescription('Peak cache error throughput time in the last hour')
cacheErrs1hrMean = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 7, 10, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheErrs1hrMean.setStatus('current')
if mibBuilder.loadTexts: cacheErrs1hrMean.setDescription('Average cache error throughput time in the last hour')
cacheErrs1dayPeak = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 7, 10, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheErrs1dayPeak.setStatus('current')
if mibBuilder.loadTexts: cacheErrs1dayPeak.setDescription('Peak cache error throughput time in the last day')
cacheErrs1dayMean = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 7, 10, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheErrs1dayMean.setStatus('current')
if mibBuilder.loadTexts: cacheErrs1dayMean.setDescription('Average cache error throughput time in the last day')
cacheErrs1weekPeak = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 7, 10, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheErrs1weekPeak.setStatus('current')
if mibBuilder.loadTexts: cacheErrs1weekPeak.setDescription('Peak cache error throughput time in the last week')
cacheErrs1weekMean = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 7, 10, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheErrs1weekMean.setStatus('current')
if mibBuilder.loadTexts: cacheErrs1weekMean.setDescription('Average cache error throughput time in the last week')
cacheErrsLifePeak = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 7, 10, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheErrsLifePeak.setStatus('current')
if mibBuilder.loadTexts: cacheErrsLifePeak.setDescription('Peak cache error throughput time in the cache lifetime')
cacheErrsLifeMean = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 7, 10, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheErrsLifeMean.setStatus('current')
if mibBuilder.loadTexts: cacheErrsLifeMean.setDescription('Average cache error throughput time in the cache lifetime')
proxyRecentDeniedPerf = MibIdentifier((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 7, 11))
cacheDeniedNow = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 7, 11, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheDeniedNow.setStatus('current')
if mibBuilder.loadTexts: cacheDeniedNow.setDescription('Cache denial throughput time in the last minute')
cacheDenied1hrPeak = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 7, 11, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheDenied1hrPeak.setStatus('current')
if mibBuilder.loadTexts: cacheDenied1hrPeak.setDescription('Peak cache denial throughput time in the last hour')
cacheDenied1hrMean = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 7, 11, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheDenied1hrMean.setStatus('current')
if mibBuilder.loadTexts: cacheDenied1hrMean.setDescription('Average cache denial throughput time in the last hour')
cacheDenied1dayPeak = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 7, 11, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheDenied1dayPeak.setStatus('current')
if mibBuilder.loadTexts: cacheDenied1dayPeak.setDescription('Peak cache denial throughput time in the last day')
cacheDenied1dayMean = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 7, 11, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheDenied1dayMean.setStatus('current')
if mibBuilder.loadTexts: cacheDenied1dayMean.setDescription('Average cache denial throughput time in the last day')
cacheDenied1weekPeak = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 7, 11, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheDenied1weekPeak.setStatus('current')
if mibBuilder.loadTexts: cacheDenied1weekPeak.setDescription('Peak cache denial throughput time in the last week')
cacheDenied1weekMean = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 7, 11, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheDenied1weekMean.setStatus('current')
if mibBuilder.loadTexts: cacheDenied1weekMean.setDescription('Average cache denial throughput time in the last week')
cacheDeniedLifePeak = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 7, 11, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheDeniedLifePeak.setStatus('current')
if mibBuilder.loadTexts: cacheDeniedLifePeak.setDescription('Peak cache denial throughput time in the cache lifetime')
cacheDeniedLifeMean = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 7, 11, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheDeniedLifeMean.setStatus('current')
if mibBuilder.loadTexts: cacheDeniedLifeMean.setDescription('Average cache denial throughput time in the cache lifetime')
proxyRecentErrRespTimePerf = MibIdentifier((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 7, 12))
cacheErrRespTimeNow = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 7, 12, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheErrRespTimeNow.setStatus('current')
if mibBuilder.loadTexts: cacheErrRespTimeNow.setDescription('Cache error response time in the last minute')
cacheErrRespTime1hrPeak = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 7, 12, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheErrRespTime1hrPeak.setStatus('current')
if mibBuilder.loadTexts: cacheErrRespTime1hrPeak.setDescription('Peak cache error response time in the last hour')
cacheErrRespTime1hrMean = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 7, 12, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheErrRespTime1hrMean.setStatus('current')
if mibBuilder.loadTexts: cacheErrRespTime1hrMean.setDescription('Average cache error response time in the last hour')
cacheErrRespTime1dayPeak = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 7, 12, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheErrRespTime1dayPeak.setStatus('current')
if mibBuilder.loadTexts: cacheErrRespTime1dayPeak.setDescription('Peak cache error response time in the last day')
cacheErrRespTime1dayMean = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 7, 12, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheErrRespTime1dayMean.setStatus('current')
if mibBuilder.loadTexts: cacheErrRespTime1dayMean.setDescription('Average cache error response time in the last day')
cacheErrRespTime1weekPeak = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 7, 12, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheErrRespTime1weekPeak.setStatus('current')
if mibBuilder.loadTexts: cacheErrRespTime1weekPeak.setDescription('Peak cache error response time in the last week')
cacheErrRespTime1weekMean = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 7, 12, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheErrRespTime1weekMean.setStatus('current')
if mibBuilder.loadTexts: cacheErrRespTime1weekMean.setDescription('Average cache error response time in the last week')
cacheErrRespTimeLifePeak = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 7, 12, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheErrRespTimeLifePeak.setStatus('current')
if mibBuilder.loadTexts: cacheErrRespTimeLifePeak.setDescription('Peak cache error response time in the cache lifetime')
cacheErrRespTimeLifeMean = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 7, 12, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheErrRespTimeLifeMean.setStatus('current')
if mibBuilder.loadTexts: cacheErrRespTimeLifeMean.setDescription('Average cache error response time in the cache lifetime')
proxyRecentDeniedRespTimePerf = MibIdentifier((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 7, 13))
cacheDeniedRespTimeNow = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 7, 13, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheDeniedRespTimeNow.setStatus('current')
if mibBuilder.loadTexts: cacheDeniedRespTimeNow.setDescription('Cache denial response time in the last minute')
cacheDeniedRespTime1hrPeak = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 7, 13, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheDeniedRespTime1hrPeak.setStatus('current')
if mibBuilder.loadTexts: cacheDeniedRespTime1hrPeak.setDescription('Peak cache denial response time in the last hour')
cacheDeniedRespTime1hrMean = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 7, 13, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheDeniedRespTime1hrMean.setStatus('current')
if mibBuilder.loadTexts: cacheDeniedRespTime1hrMean.setDescription('Average cache denial response time in the last hour')
cacheDeniedRespTime1dayPeak = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 7, 13, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheDeniedRespTime1dayPeak.setStatus('current')
if mibBuilder.loadTexts: cacheDeniedRespTime1dayPeak.setDescription('Peak cache denial response time in the last day')
cacheDeniedRespTime1dayMean = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 7, 13, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheDeniedRespTime1dayMean.setStatus('current')
if mibBuilder.loadTexts: cacheDeniedRespTime1dayMean.setDescription('Average cache denial response time in the last day')
cacheDeniedRespTime1weekPeak = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 7, 13, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheDeniedRespTime1weekPeak.setStatus('current')
if mibBuilder.loadTexts: cacheDeniedRespTime1weekPeak.setDescription('Peak cache denial response time in the last week')
cacheDeniedRespTime1weekMean = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 7, 13, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheDeniedRespTime1weekMean.setStatus('current')
if mibBuilder.loadTexts: cacheDeniedRespTime1weekMean.setDescription('Average cache denial response time in the last week')
cacheDeniedRespTimeLifePeak = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 7, 13, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheDeniedRespTimeLifePeak.setStatus('current')
if mibBuilder.loadTexts: cacheDeniedRespTimeLifePeak.setDescription('Peak cache denial response time in the cache lifetime')
cacheDeniedRespTimeLifeMean = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 2, 3, 7, 13, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheDeniedRespTimeLifeMean.setStatus('current')
if mibBuilder.loadTexts: cacheDeniedRespTimeLifeMean.setDescription('Average cache denial response time in the cache lifetime')
proxyHardwareDisk = MibIdentifier((1, 3, 6, 1, 4, 1, 15497, 1, 2, 4, 1))
hardwareDiskStatTable = MibTable((1, 3, 6, 1, 4, 1, 15497, 1, 2, 4, 1, 1), )
if mibBuilder.loadTexts: hardwareDiskStatTable.setStatus('current')
if mibBuilder.loadTexts: hardwareDiskStatTable.setDescription('The table of disk activitity statistics.')
diskStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 15497, 1, 2, 4, 1, 1, 1), ).setIndexNames((0, "ASYNCOSWEBSECURITYAPPLIANCE-MIB", "diskStatEntryNumber"))
if mibBuilder.loadTexts: diskStatEntry.setStatus('current')
if mibBuilder.loadTexts: diskStatEntry.setDescription('An entry in the hardwareDiskStatTable.')
diskStatEntryNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 15497, 1, 2, 4, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 18))).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskStatEntryNumber.setStatus('current')
if mibBuilder.loadTexts: diskStatEntryNumber.setDescription('Disk Identifier 1..18')
diskStatWrites = MibTableColumn((1, 3, 6, 1, 4, 1, 15497, 1, 2, 4, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskStatWrites.setStatus('current')
if mibBuilder.loadTexts: diskStatWrites.setDescription('Number of writes to disk')
diskStatWriteErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 15497, 1, 2, 4, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskStatWriteErrs.setStatus('current')
if mibBuilder.loadTexts: diskStatWriteErrs.setDescription('Number of write errors on disk')
diskStatReads = MibTableColumn((1, 3, 6, 1, 4, 1, 15497, 1, 2, 4, 1, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskStatReads.setStatus('current')
if mibBuilder.loadTexts: diskStatReads.setDescription('Number of reads from disk')
diskStatReadErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 15497, 1, 2, 4, 1, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskStatReadErrs.setStatus('current')
if mibBuilder.loadTexts: diskStatReadErrs.setDescription('Number of read errors on disk')
upstreamProxyFailure = NotificationType((1, 3, 6, 1, 4, 1, 15497, 1, 2, 5, 1)).setObjects(("ASYNCOS-MAIL-MIB", "connectionURL"))
if mibBuilder.loadTexts: upstreamProxyFailure.setStatus('current')
if mibBuilder.loadTexts: upstreamProxyFailure.setDescription('The IP address of an unresponsive upstream proxy.')
mibBuilder.exportSymbols("ASYNCOSWEBSECURITYAPPLIANCE-MIB", cacheBwidthSpent1hrMean=cacheBwidthSpent1hrMean, cacheDeniedLifeMean=cacheDeniedLifeMean, cacheClientReqDenials=cacheClientReqDenials, cacheBwidthTotal1dayMean=cacheBwidthTotal1dayMean, cacheCacheTotalCachedObjs=cacheCacheTotalCachedObjs, proxyRecentErrsPerf=proxyRecentErrsPerf, cacheErrs1dayPeak=cacheErrs1dayPeak, cacheHits1weekPeak=cacheHits1weekPeak, cacheCacheSizeHistEntry=cacheCacheSizeHistEntry, cacheClientICPErrors=cacheClientICPErrors, cacheMeanHitRespTime=cacheMeanHitRespTime, cacheMedianSvcTable=cacheMedianSvcTable, cacheMeanByteHitRatio=cacheMeanByteHitRatio, proxyRecentThruputPerf=proxyRecentThruputPerf, cacheMeanHitRatio=cacheMeanHitRatio, proxyRecentBandWSpntPerf=proxyRecentBandWSpntPerf, cacheHits1dayPeak=cacheHits1dayPeak, cacheDenied1dayPeak=cacheDenied1dayPeak, cacheVersion=cacheVersion, cacheHitRespTimeNow=cacheHitRespTimeNow, cacheTotalRespTimeLifeMean=cacheTotalRespTimeLifeMean, cacheBwidthSavingNow=cacheBwidthSavingNow, cacheMisses1dayMean=cacheMisses1dayMean, cacheDenied1weekMean=cacheDenied1weekMean, cacheDeniedRespTime1hrMean=cacheDeniedRespTime1hrMean, cacheUsedStoragePct=cacheUsedStoragePct, cacheHitRespTime1hrPeak=cacheHitRespTime1hrPeak, cacheMissRespTime1weekMean=cacheMissRespTime1weekMean, cacheDenied1hrMean=cacheDenied1hrMean, cacheDenied1weekPeak=cacheDenied1weekPeak, cacheCacheLiveCachedObjSizes=cacheCacheLiveCachedObjSizes, cacheErrRespTime1weekPeak=cacheErrRespTime1weekPeak, cacheBusyCPUPct=cacheBusyCPUPct, cacheMissRespTimeLifePeak=cacheMissRespTimeLifePeak, cacheClientOutKb=cacheClientOutKb, cacheClientICPDenials=cacheClientICPDenials, cacheBwidthSpent1hrPeak=cacheBwidthSpent1hrPeak, cacheMissesNow=cacheMissesNow, cacheBwidthSavingLifeMean=cacheBwidthSavingLifeMean, cacheMissRespTime1hrMean=cacheMissRespTime1hrMean, cacheErrRespTime1hrPeak=cacheErrRespTime1hrPeak, cacheServerLimitIdleConns=cacheServerLimitIdleConns, cacheErrRespTimeNow=cacheErrRespTimeNow, cacheBwidthTotal1hrPeak=cacheBwidthTotal1hrPeak, cacheClientSizeHistBinNumber=cacheClientSizeHistBinNumber, cacheBwidthSpentNow=cacheBwidthSpentNow, cacheErrRespTimeLifeMean=cacheErrRespTimeLifeMean, cacheDeniedRespTime1weekMean=cacheDeniedRespTime1weekMean, cacheDeniedRespTimeLifeMean=cacheDeniedRespTimeLifeMean, cacheMisses1hrMean=cacheMisses1hrMean, cacheAdmin=cacheAdmin, cacheTotalRespTime1dayMean=cacheTotalRespTime1dayMean, cacheDuration=cacheDuration, cacheBwidthSpentLifePeak=cacheBwidthSpentLifePeak, cacheThruput1dayMean=cacheThruput1dayMean, cacheCacheLiveCachedObjs=cacheCacheLiveCachedObjs, cacheServerSizeHistEntry=cacheServerSizeHistEntry, proxySysPerf=proxySysPerf, cacheServerICPRequests=cacheServerICPRequests, cacheBwidthTotalNow=cacheBwidthTotalNow, proxyRecentPerf=proxyRecentPerf, cacheHits1hrPeak=cacheHits1hrPeak, cacheMissRespTime1dayMean=cacheMissRespTime1dayMean, cacheThruputLifeMean=cacheThruputLifeMean, cacheServerICPMisses=cacheServerICPMisses, proxyCachePerf=proxyCachePerf, cacheClientSizeHistEntry=cacheClientSizeHistEntry, cacheBwidthSavingLifePeak=cacheBwidthSavingLifePeak, cacheTotalRespTimeLifePeak=cacheTotalRespTimeLifePeak, cacheErrsLifeMean=cacheErrsLifeMean, cacheErrRespTime1weekMean=cacheErrRespTime1weekMean, cacheBwidthSpent1dayMean=cacheBwidthSpent1dayMean, cacheServerSockets=cacheServerSockets, diskStatWriteErrs=diskStatWriteErrs, cacheThruputLifePeak=cacheThruputLifePeak, cacheBwidthSaving1weekMean=cacheBwidthSaving1weekMean, cacheClientReqSize=cacheClientReqSize, cacheMaxResSize=cacheMaxResSize, proxyConfig=proxyConfig, cacheMemory=cacheMemory, cacheMemoryBufferUsagePct=cacheMemoryBufferUsagePct, proxyRecentMissesPerf=proxyRecentMissesPerf, cacheTotalRespTime1weekPeak=cacheTotalRespTime1weekPeak, cacheSizeHistBinNumber=cacheSizeHistBinNumber, cacheBwidthTotal1dayPeak=cacheBwidthTotal1dayPeak, proxyRecentDeniedPerf=proxyRecentDeniedPerf, cacheDenied1hrPeak=cacheDenied1hrPeak, cacheMissRespTime1dayPeak=cacheMissRespTime1dayPeak, cacheBwidthSaving1hrMean=cacheBwidthSaving1hrMean, cacheDeniedNow=cacheDeniedNow, cacheServerSizeHistBinNumber=cacheServerSizeHistBinNumber, diskStatEntry=diskStatEntry, cacheDeniedRespTime1dayPeak=cacheDeniedRespTime1dayPeak, cacheBwidthSaving1dayPeak=cacheBwidthSaving1dayPeak, proxyHardwareDisk=proxyHardwareDisk, cacheMisses1weekPeak=cacheMisses1weekPeak, cacheErrs1dayMean=cacheErrs1dayMean, cacheCacheSizeHistTable=cacheCacheSizeHistTable, cacheHTTPSrvSvcTime=cacheHTTPSrvSvcTime, cacheClientICPHits=cacheClientICPHits, cacheHitRespTimeLifePeak=cacheHitRespTimeLifePeak, cacheClientReqMisses=cacheClientReqMisses, cacheHitRespTimeLifeMean=cacheHitRespTimeLifeMean, cacheServerICPDenials=cacheServerICPDenials, cacheCpuTime=cacheCpuTime, cacheBwidthSaving1dayMean=cacheBwidthSaving1dayMean, cacheHTTPSvcWaitTime=cacheHTTPSvcWaitTime, cacheBwidthTotal1weekMean=cacheBwidthTotal1weekMean, cacheErrRespTime1dayPeak=cacheErrRespTime1dayPeak, cacheMisses1weekMean=cacheMisses1weekMean, cacheCacheAllObjs=cacheCacheAllObjs, cacheClientICPRequests=cacheClientICPRequests, cacheServerRegConnsRetries=cacheServerRegConnsRetries, cacheBwidthSpentLifeMean=cacheBwidthSpentLifeMean, diskStatReads=diskStatReads, cacheServerInKb=cacheServerInKb, cacheTotalHttpReqs=cacheTotalHttpReqs, diskStatEntryNumber=diskStatEntryNumber, cacheHitRespTime1hrMean=cacheHitRespTime1hrMean, cacheTotalRespTime1hrPeak=cacheTotalRespTime1hrPeak, proxyRecentBandWSavPerf=proxyRecentBandWSavPerf, cacheClientAccepts=cacheClientAccepts, cacheBwidthTotalLifeMean=cacheBwidthTotalLifeMean, cacheDnsSvcTime=cacheDnsSvcTime, cacheServerConnsThresh=cacheServerConnsThresh, cacheServerCloseIdleConns=cacheServerCloseIdleConns, cacheBwidthSpent1weekPeak=cacheBwidthSpent1weekPeak, cacheCpuUsage=cacheCpuUsage, proxyTraps=proxyTraps, cacheServerICPHits=cacheServerICPHits, proxyRecentBandWTotPerf=proxyRecentBandWTotPerf, proxySystem=proxySystem, cacheHTTPHitSvcTime=cacheHTTPHitSvcTime, cacheClientHits=cacheClientHits, cacheThruput1hrPeak=cacheThruput1hrPeak, cacheMissesLifePeak=cacheMissesLifePeak, cacheHitRespTime1dayMean=cacheHitRespTime1dayMean, upstreamProxyFailure=upstreamProxyFailure, cacheServerRWErrorRetries=cacheServerRWErrorRetries, cacheBwidthSpent1weekMean=cacheBwidthSpent1weekMean, cacheServerErrors=cacheServerErrors, cacheDeniedRespTime1weekPeak=cacheDeniedRespTime1weekPeak, cacheBwidthSaving1hrPeak=cacheBwidthSaving1hrPeak, cacheTotalRespTime1hrMean=cacheTotalRespTime1hrMean, cacheErrs1weekMean=cacheErrs1weekMean, cacheErrRespTimeLifePeak=cacheErrRespTimeLifePeak, cacheSoftware=cacheSoftware, cacheUptime=cacheUptime, cacheMisses1hrPeak=cacheMisses1hrPeak, cacheSysStorage=cacheSysStorage, cacheCltReplyErrPct=cacheCltReplyErrPct, proxyHardware=proxyHardware, PYSNMP_MODULE_ID=asyncOSWebSecurityAppliance, cacheMisses1dayPeak=cacheMisses1dayPeak, cacheBwidthSaving1weekPeak=cacheBwidthSaving1weekPeak, cacheMissRespTimeLifeMean=cacheMissRespTimeLifeMean, cacheClientErrors=cacheClientErrors, cacheClientTotalConns=cacheClientTotalConns, cacheMeanMissRespTime=cacheMeanMissRespTime, licenseExpiration=licenseExpiration, cacheServerOutKb=cacheServerOutKb, cacheThruput1weekMean=cacheThruput1weekMean, proxyRecentDeniedRespTimePerf=proxyRecentDeniedRespTimePerf, proxyServerSidePerf=proxyServerSidePerf, cacheHitsLifePeak=cacheHitsLifePeak, hardwareDiskStatTable=hardwareDiskStatTable, proxyPerf=proxyPerf, asyncOSWebSecurityAppliance=asyncOSWebSecurityAppliance, cacheServerEarlyCloseRetries=cacheServerEarlyCloseRetries, cacheMedianTime=cacheMedianTime, cacheHits1dayMean=cacheHits1dayMean, cacheThruputNow=cacheThruputNow, cacheTotalBandwidthSaving=cacheTotalBandwidthSaving, cacheErrsLifePeak=cacheErrsLifePeak, cacheTotalRespTimeNow=cacheTotalRespTimeNow, diskStatReadErrs=diskStatReadErrs, proxyRecentHitsPerf=proxyRecentHitsPerf, cacheDeniedRespTimeNow=cacheDeniedRespTimeNow, proxyMedianSvcTime=proxyMedianSvcTime, cacheClientSizeHistTable=cacheClientSizeHistTable, cacheClientMaxConns=cacheClientMaxConns, cacheHitsNow=cacheHitsNow, cacheClientInKb=cacheClientInKb, cacheHitRespTime1dayPeak=cacheHitRespTime1dayPeak, cacheHitRespTime1weekMean=cacheHitRespTime1weekMean, cacheMissRespTime1weekPeak=cacheMissRespTime1weekPeak, cacheErrs1hrPeak=cacheErrs1hrPeak, cacheHitsLifeMean=cacheHitsLifeMean, proxyRecentTotalRespTimePerf=proxyRecentTotalRespTimePerf, cacheHTTPMissSvcTime=cacheHTTPMissSvcTime, cacheServerPersisConnsRetries=cacheServerPersisConnsRetries, cacheHTTPCltSvcTime=cacheHTTPCltSvcTime, cacheBwidthTotal1hrMean=cacheBwidthTotal1hrMean, cacheDenied1dayMean=cacheDenied1dayMean, cacheHits1weekMean=cacheHits1weekMean, cacheDeniedLifePeak=cacheDeniedLifePeak, cacheDeniedRespTime1dayMean=cacheDeniedRespTime1dayMean, cacheServerReplySize=cacheServerReplySize, cacheHits1hrMean=cacheHits1hrMean, cacheMissRespTimeNow=cacheMissRespTimeNow, proxyExecutiveSummary=proxyExecutiveSummary, cacheErrs1weekPeak=cacheErrs1weekPeak, cacheErrs1hrMean=cacheErrs1hrMean, cacheServerICPErrors=cacheServerICPErrors, cacheErrRespTime1dayMean=cacheErrRespTime1dayMean, cacheClientRequests=cacheClientRequests, cacheMissRespTime1hrPeak=cacheMissRespTime1hrPeak, cacheCacheTotalCachedObjSizes=cacheCacheTotalCachedObjSizes, cacheTotalRespTime1weekMean=cacheTotalRespTime1weekMean, cacheErrRespTime1hrMean=cacheErrRespTime1hrMean, cacheBwidthSpent1dayPeak=cacheBwidthSpent1dayPeak, cacheCacheActiveObjs=cacheCacheActiveObjs, cacheClientICPMisses=cacheClientICPMisses, proxyRecentMissRespTimePerf=proxyRecentMissRespTimePerf, cacheHitRespTime1weekPeak=cacheHitRespTime1weekPeak, cacheServerRequests=cacheServerRequests, cacheClientIdleConns=cacheClientIdleConns, cacheMissesLifeMean=cacheMissesLifeMean, proxyRecentHitRespTimePerf=proxyRecentHitRespTimePerf, cacheBwidthTotalLifePeak=cacheBwidthTotalLifePeak, proxyRecentErrRespTimePerf=proxyRecentErrRespTimePerf, cacheMedianSvcEntry=cacheMedianSvcEntry, cacheThruput1hrMean=cacheThruput1hrMean, cacheMeanRespTime=cacheMeanRespTime, cacheBwidthTotal1weekPeak=cacheBwidthTotal1weekPeak, diskStatWrites=diskStatWrites, cacheErrsNow=cacheErrsNow, cacheThruput1weekPeak=cacheThruput1weekPeak, proxyClientSidePerf=proxyClientSidePerf, cacheDeniedRespTime1hrPeak=cacheDeniedRespTime1hrPeak, cacheThruput1dayPeak=cacheThruput1dayPeak, cacheServerTotalConns=cacheServerTotalConns, cacheTotalRespTime1dayPeak=cacheTotalRespTime1dayPeak, cacheServerIdleConns=cacheServerIdleConns, cacheDeniedRespTimeLifePeak=cacheDeniedRespTimeLifePeak, cacheServerSizeHistTable=cacheServerSizeHistTable)
