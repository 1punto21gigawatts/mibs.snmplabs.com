#
# PySNMP MIB module CISCO-C12000-IF-HC-COUNTERS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-C12000-IF-HC-COUNTERS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:51:38 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
ciscoExperiment, = mibBuilder.importSymbols("CISCO-SMI", "ciscoExperiment")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
IpAddress, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, NotificationType, Counter64, Counter32, ModuleIdentity, Unsigned32, iso, Gauge32, Integer32, TimeTicks, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "NotificationType", "Counter64", "Counter32", "ModuleIdentity", "Unsigned32", "iso", "Gauge32", "Integer32", "TimeTicks", "MibIdentifier")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
ciscoC12000IfHcCountersMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 10, 31))
if mibBuilder.loadTexts: ciscoC12000IfHcCountersMIB.setLastUpdated('9805270000Z')
if mibBuilder.loadTexts: ciscoC12000IfHcCountersMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoC12000IfHcCountersMIB.setContactInfo(' Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-snmp@cisco.com')
if mibBuilder.loadTexts: ciscoC12000IfHcCountersMIB.setDescription('A MIB module to describe and store IF-MIB High Capacity (ie 64 bit) Counters as two 32 bit objects. This mib will ONLY be supported in the 11.2GS version of IOS and will NOT be ported to any later versions.')
cHCCounterMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 31, 1))
cHCCounterTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 31, 1, 1), )
if mibBuilder.loadTexts: cHCCounterTable.setStatus('current')
if mibBuilder.loadTexts: cHCCounterTable.setDescription('A table containing the High Capacity Counter information in the IF-MIB in two 32 bit fields.')
cHCCounterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 31, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cHCCounterEntry.setStatus('current')
if mibBuilder.loadTexts: cHCCounterEntry.setDescription('High Capacity Counter information for each interface in the IF-MIB.')
cHCCounterIfInOctetsUpper = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 31, 1, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cHCCounterIfInOctetsUpper.setStatus('current')
if mibBuilder.loadTexts: cHCCounterIfInOctetsUpper.setDescription('The upper 32 bits of ifHCInOctets as described in the IF-MIB.')
cHCCounterIfInOctetsLower = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 31, 1, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cHCCounterIfInOctetsLower.setStatus('current')
if mibBuilder.loadTexts: cHCCounterIfInOctetsLower.setDescription('The lower 32 bits of ifHCInOctets as described in the IF-MIB.')
cHCCounterIfInUcastPktsUpper = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 31, 1, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cHCCounterIfInUcastPktsUpper.setStatus('current')
if mibBuilder.loadTexts: cHCCounterIfInUcastPktsUpper.setDescription('The upper 32 bits of ifHCInUcastPkts as described in the IF-MIB.')
cHCCounterIfInUcastPktsLower = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 31, 1, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cHCCounterIfInUcastPktsLower.setStatus('current')
if mibBuilder.loadTexts: cHCCounterIfInUcastPktsLower.setDescription('The lower 32 bits of ifHCInUcastPkts as described in the IF-MIB.')
cHCCounterIfOutOctetsUpper = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 31, 1, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cHCCounterIfOutOctetsUpper.setStatus('current')
if mibBuilder.loadTexts: cHCCounterIfOutOctetsUpper.setDescription('The upper 32 bits of ifHCOutOctets as described in the IF-MIB.')
cHCCounterIfOutOctetsLower = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 31, 1, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cHCCounterIfOutOctetsLower.setStatus('current')
if mibBuilder.loadTexts: cHCCounterIfOutOctetsLower.setDescription('The lower 32 bits of ifHCOutOctets as described in the IF-MIB.')
cHCCounterIfOutUcastPktsUpper = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 31, 1, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cHCCounterIfOutUcastPktsUpper.setStatus('current')
if mibBuilder.loadTexts: cHCCounterIfOutUcastPktsUpper.setDescription('The upper 32 bits of ifHCOutUcastPkts as described in the IF-MIB.')
cHCCounterIfOutUcastPktsLower = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 31, 1, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cHCCounterIfOutUcastPktsLower.setStatus('current')
if mibBuilder.loadTexts: cHCCounterIfOutUcastPktsLower.setDescription('The lower 32 bits of ifHCOutUcastPkts as described in the IF-MIB.')
ciscoHCCountersMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 31, 2))
ciscoHCCountersMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 31, 3))
ciscoHCCountersMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 31, 3, 1))
ciscoHCCountersMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 31, 3, 2))
ciscoHCCountersMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 10, 31, 3, 1, 1)).setObjects(("CISCO-C12000-IF-HC-COUNTERS-MIB", "ciscoHCCountersMIBGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoHCCountersMIBCompliance = ciscoHCCountersMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: ciscoHCCountersMIBCompliance.setDescription('The compliance statement for entities which implement the Cisco HC Counter MIB. This mib will ONLY be supported in the 11.2GS version of IOS and will NOT be ported to any later versions.')
ciscoHCCountersMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 31, 3, 2, 1)).setObjects(("CISCO-C12000-IF-HC-COUNTERS-MIB", "cHCCounterIfInOctetsUpper"), ("CISCO-C12000-IF-HC-COUNTERS-MIB", "cHCCounterIfInOctetsLower"), ("CISCO-C12000-IF-HC-COUNTERS-MIB", "cHCCounterIfInUcastPktsUpper"), ("CISCO-C12000-IF-HC-COUNTERS-MIB", "cHCCounterIfInUcastPktsLower"), ("CISCO-C12000-IF-HC-COUNTERS-MIB", "cHCCounterIfOutOctetsUpper"), ("CISCO-C12000-IF-HC-COUNTERS-MIB", "cHCCounterIfOutOctetsLower"), ("CISCO-C12000-IF-HC-COUNTERS-MIB", "cHCCounterIfOutUcastPktsUpper"), ("CISCO-C12000-IF-HC-COUNTERS-MIB", "cHCCounterIfOutUcastPktsLower"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoHCCountersMIBGroup = ciscoHCCountersMIBGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoHCCountersMIBGroup.setDescription('A collection of objects providing the HC Counter capability. These objects will ONLY be supported in the 11.2GS version of IOS and will NOT be ported to any later versions.')
mibBuilder.exportSymbols("CISCO-C12000-IF-HC-COUNTERS-MIB", cHCCounterIfOutUcastPktsUpper=cHCCounterIfOutUcastPktsUpper, ciscoHCCountersMIBCompliance=ciscoHCCountersMIBCompliance, ciscoHCCountersMIBCompliances=ciscoHCCountersMIBCompliances, cHCCounterIfInOctetsLower=cHCCounterIfInOctetsLower, cHCCounterTable=cHCCounterTable, PYSNMP_MODULE_ID=ciscoC12000IfHcCountersMIB, ciscoC12000IfHcCountersMIB=ciscoC12000IfHcCountersMIB, cHCCounterIfInUcastPktsUpper=cHCCounterIfInUcastPktsUpper, cHCCounterIfOutUcastPktsLower=cHCCounterIfOutUcastPktsLower, cHCCounterEntry=cHCCounterEntry, cHCCounterIfInOctetsUpper=cHCCounterIfInOctetsUpper, cHCCounterIfOutOctetsUpper=cHCCounterIfOutOctetsUpper, cHCCounterMIBObjects=cHCCounterMIBObjects, ciscoHCCountersMIBConformance=ciscoHCCountersMIBConformance, cHCCounterIfInUcastPktsLower=cHCCounterIfInUcastPktsLower, cHCCounterIfOutOctetsLower=cHCCounterIfOutOctetsLower, ciscoHCCountersMIBNotifications=ciscoHCCountersMIBNotifications, ciscoHCCountersMIBGroup=ciscoHCCountersMIBGroup, ciscoHCCountersMIBGroups=ciscoHCCountersMIBGroups)
