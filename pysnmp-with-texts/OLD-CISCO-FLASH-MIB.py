#
# PySNMP MIB module OLD-CISCO-FLASH-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/OLD-CISCO-FLASH-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:32:42 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion")
local, = mibBuilder.importSymbols("CISCO-SMI", "local")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, NotificationType, ObjectIdentity, Gauge32, Counter64, Integer32, TimeTicks, Counter32, IpAddress, iso, ModuleIdentity, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "NotificationType", "ObjectIdentity", "Gauge32", "Counter64", "Integer32", "TimeTicks", "Counter32", "IpAddress", "iso", "ModuleIdentity", "Unsigned32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
lflash = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 2, 10))
flashSize = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 10, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flashSize.setStatus('mandatory')
if mibBuilder.loadTexts: flashSize.setDescription('Total Size in Octets of Flash memory')
flashFree = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 10, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flashFree.setStatus('mandatory')
if mibBuilder.loadTexts: flashFree.setDescription('Unused Size in Octets of Flash memory')
flashController = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 10, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flashController.setStatus('mandatory')
if mibBuilder.loadTexts: flashController.setDescription('Provides the type of Flash controller (either CCTL or CCTL2) installed in the router.')
flashCard = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 10, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flashCard.setStatus('mandatory')
if mibBuilder.loadTexts: flashCard.setDescription('Provides the type of Flash Card installed in the router. For example, the type of Flash Card could be either CSC-MS or CSC-MC+.')
flashVPP = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 10, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("installed", 1), ("missing", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: flashVPP.setStatus('mandatory')
if mibBuilder.loadTexts: flashVPP.setDescription('State of the VPP DIP jumper on the Flash memory card. Files can be written to the Flash memory card only if the VPP DIP jumper is turned on.')
flashErase = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 10, 6), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: flashErase.setStatus('mandatory')
if mibBuilder.loadTexts: flashErase.setDescription('Request to erase flash memory')
flashEraseTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 10, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flashEraseTime.setStatus('mandatory')
if mibBuilder.loadTexts: flashEraseTime.setDescription('Indicates the value of sysUptime the last time Flash memory was erased. If the flash had not been erased after powerup it has a value of 0 days 00:00:00.')
flashEraseStatus = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 10, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("flashOpInProgress", 1), ("flashOpSuccess", 2), ("flashOpFailure", 3), ("flashReadOnly", 4), ("flashOpenFailure", 5), ("bufferAllocationFailure", 6), ("noOpAfterPowerOn", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: flashEraseStatus.setStatus('mandatory')
if mibBuilder.loadTexts: flashEraseStatus.setDescription('Status of current or last flash erasing')
flashToNet = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 10, 9), DisplayString()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: flashToNet.setStatus('mandatory')
if mibBuilder.loadTexts: flashToNet.setDescription('Write flash entry to tftp server. Value should be the name of the flash entry to send. Instance is the IP address of the tftp host.')
flashToNetTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 10, 10), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flashToNetTime.setStatus('mandatory')
if mibBuilder.loadTexts: flashToNetTime.setDescription('Indicates the value of sysUpTime the last time a file was transfered from Flash memory on the router to a TFTP host. Returns 0 days 00:00:00 if there had been no transfer since powerup.')
flashToNetStatus = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 10, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("flashOpInProgress", 1), ("flashOpSuccess", 2), ("flashOpFailure", 3), ("flashReadOnly", 4), ("flashOpenFailure", 5), ("bufferAllocationFailure", 6), ("noOpAfterPowerOn", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: flashToNetStatus.setStatus('mandatory')
if mibBuilder.loadTexts: flashToNetStatus.setDescription('Status of current or last flash to net transfer')
netToFlash = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 10, 12), DisplayString()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: netToFlash.setStatus('mandatory')
if mibBuilder.loadTexts: netToFlash.setDescription('Write flash entry from tftp server. Value should be the name of the flash entry to write. Instance is the IP address of the tftp host.')
netToFlashTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 10, 13), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netToFlashTime.setStatus('mandatory')
if mibBuilder.loadTexts: netToFlashTime.setDescription('Indicates the value of sysUpTime the last time file was copied from a Trivial File Transfer Protocol(TFTP) server to the Flash memory on the router. Returns 0 days 00:00:00 if there had been no transfers since powerup.')
netToFlashStatus = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 10, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("flashOpInProgress", 1), ("flashOpSuccess", 2), ("flashOpFailure", 3), ("flashReadOnly", 4), ("flashOpenFailure", 5), ("bufferAllocationFailure", 6), ("noOpAfterPowerOn", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netToFlashStatus.setStatus('mandatory')
if mibBuilder.loadTexts: netToFlashStatus.setDescription('Status of current or last net to flash transfer')
flashStatus = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 10, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("busy", 1), ("available", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: flashStatus.setStatus('mandatory')
if mibBuilder.loadTexts: flashStatus.setDescription('Status of the availability of flash')
flashEntries = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 10, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flashEntries.setStatus('mandatory')
if mibBuilder.loadTexts: flashEntries.setDescription('Number of entries in the flash directory')
lflashFileDirTable = MibTable((1, 3, 6, 1, 4, 1, 9, 2, 10, 17), )
if mibBuilder.loadTexts: lflashFileDirTable.setStatus('mandatory')
if mibBuilder.loadTexts: lflashFileDirTable.setDescription(' A list of flash file entries.')
lflashFileDirEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 2, 10, 17, 1), ).setIndexNames((0, "OLD-CISCO-FLASH-MIB", "flashEntries"))
if mibBuilder.loadTexts: lflashFileDirEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lflashFileDirEntry.setDescription('A collection of flash eprom objects')
flashDirName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 10, 17, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flashDirName.setStatus('mandatory')
if mibBuilder.loadTexts: flashDirName.setDescription('Name associated with the flash entry')
flashDirSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 10, 17, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flashDirSize.setStatus('mandatory')
if mibBuilder.loadTexts: flashDirSize.setDescription('Size in Octets of a flash entry')
flashDirStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 10, 17, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("deleted", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: flashDirStatus.setStatus('mandatory')
if mibBuilder.loadTexts: flashDirStatus.setDescription('Indicates the status of the entry')
mibBuilder.exportSymbols("OLD-CISCO-FLASH-MIB", flashCard=flashCard, flashEraseStatus=flashEraseStatus, flashStatus=flashStatus, lflash=lflash, flashToNetStatus=flashToNetStatus, netToFlashStatus=netToFlashStatus, flashFree=flashFree, flashController=flashController, flashToNetTime=flashToNetTime, flashDirName=flashDirName, flashSize=flashSize, flashToNet=flashToNet, lflashFileDirTable=lflashFileDirTable, netToFlash=netToFlash, flashVPP=flashVPP, flashErase=flashErase, flashEntries=flashEntries, netToFlashTime=netToFlashTime, lflashFileDirEntry=lflashFileDirEntry, flashDirStatus=flashDirStatus, flashEraseTime=flashEraseTime, flashDirSize=flashDirSize)
