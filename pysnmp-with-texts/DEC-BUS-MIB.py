#
# PySNMP MIB module DEC-BUS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DEC-BUS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:37:26 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint")
decMIBextension, = mibBuilder.importSymbols("DECATM-MIB", "decMIBextension")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Integer32, ObjectIdentity, ModuleIdentity, Gauge32, TimeTicks, Bits, IpAddress, MibIdentifier, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Counter32, Counter64, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "ObjectIdentity", "ModuleIdentity", "Gauge32", "TimeTicks", "Bits", "IpAddress", "MibIdentifier", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Counter32", "Counter64", "Unsigned32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
decBusMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 29))
decBusMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 29, 1))
decBusMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 29, 2))
decBusMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 29, 2, 1))
decBusMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 29, 2, 2))
decBusConfigTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 29, 1, 1), )
if mibBuilder.loadTexts: decBusConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: decBusConfigTable.setDescription('A table which describes all the Broadcast and Unknown Server components implemented by this managed device.')
decBusConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 29, 1, 1, 1), ).setIndexNames((0, "DEC-BUS-MIB", "decBusIndex"))
if mibBuilder.loadTexts: decBusConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: decBusConfigEntry.setDescription('Each row of the table describes a standalone BUS or a component of a BUS.')
decBusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 29, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decBusIndex.setStatus('mandatory')
if mibBuilder.loadTexts: decBusIndex.setDescription('A unique number greater than zero which identifies this table row.')
decBusRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 29, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: decBusRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: decBusRowStatus.setDescription("This object is used to create and delete Broadcast and Unknown Server components. If this object is writable, it will accept the values 'createAndGo' 'destroy' under suitable conditions. Use decBusAdminStatus to enable and disable service.")
decBusAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 29, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: decBusAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: decBusAdminStatus.setDescription("The desired state of this BUS component. When a BUS is distributed, this object controls the 'local' server component, as opposed to the overall state of the BUS. If a LES is connected to the BUS, enabling/disabling either server may affect both of them. Otherwise it is up to the network manager to coordinate the state of the servers.")
decBusOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 29, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("disabling", 3), ("deleting", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: decBusOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: decBusOperStatus.setDescription("The operational state of this BUS component. A BUS component may not become operational until it has been configured with values for LAN Type Maximum Data Frame Size Maximum Frame Age When a BUS is in the 'disabling' or 'deleting' state, attempts to set decBusAdminStatus to 'up' will fail.")
decBusLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 29, 1, 1, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decBusLastChange.setStatus('mandatory')
if mibBuilder.loadTexts: decBusLastChange.setDescription('The value of sysUpTime at the time that this server last entered its current operational state. If the current state was entered prior to the last re-initialization of the local network management subsystem, then this object contains a zero value.')
decBusAtmAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 29, 1, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: decBusAtmAddress.setStatus('mandatory')
if mibBuilder.loadTexts: decBusAtmAddress.setDescription('The ATM address of this Broadcast and Unknown Server, or Broadcast and Unknown Server component. Clients establish Multicast Send VCCs to this address as part of the BUS Connect phase of LAN Emulation.')
decBusDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 29, 1, 1, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: decBusDescription.setStatus('mandatory')
if mibBuilder.loadTexts: decBusDescription.setDescription('A human-readable string which can contain anything the network manager wants.')
decBusLanName = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 29, 1, 1, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: decBusLanName.setReference('ATM Forum LAN Emulation Over ATM Specification, V1.0, Section 5.1.1')
if mibBuilder.loadTexts: decBusLanName.setStatus('mandatory')
if mibBuilder.loadTexts: decBusLanName.setDescription('The name of this emulated LAN. While not required for operational purposes, providing a LAN Name may make it easier to keep track of which BUS component is which. This string is not guaranteed to uniquely identify the emulated LAN.')
decBusLanType = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 29, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("aflane8023", 2), ("aflane8025", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: decBusLanType.setReference('ATM Forum LAN Emulation Over ATM Specification, V1.0, Section 5.1.2')
if mibBuilder.loadTexts: decBusLanType.setStatus('mandatory')
if mibBuilder.loadTexts: decBusLanType.setDescription("The data frame format (or LAN-TYPE) for the emulated LAN this Broadcast and Unknown Server supports. In an active emulated LAN, this parameter MUST have a consistent value in all of the LES and BUS components serving the emulated LAN. Otherwise, problems may result. This columnar object's value may only be changed when 'decBus[Admin,Oper]Status' are 'down'.")
decBusMaxDataFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 29, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5))).clone(namedValues=NamedValues(("max1516", 2), ("max4544", 3), ("max9234", 4), ("max18190", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: decBusMaxDataFrameSize.setReference('ATM Forum LAN Emulation Over ATM Specification, V1.0, Section 5.1.2')
if mibBuilder.loadTexts: decBusMaxDataFrameSize.setStatus('mandatory')
if mibBuilder.loadTexts: decBusMaxDataFrameSize.setDescription("The maximum AAL-5 SDU size for data frames sent over this emulated LAN. This must be one of the standard sizes defined in the LAN Emulation specification, in other words either 1516, 4544, 9234, or 18190 octets. In an active emulated LAN, this parameter MUST have a consistent value in all of the LES and BUS components serving the emulated LAN. Otherwise, problems may result. This columnar object's value may only be changed when 'decBus[Admin,Oper]Status' are 'down'.")
decBusMaxFrameAge = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 29, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: decBusMaxFrameAge.setReference('ATM Forum LAN Emulation Over ATM Specification, V1.0, Section 5.1.2')
if mibBuilder.loadTexts: decBusMaxFrameAge.setStatus('mandatory')
if mibBuilder.loadTexts: decBusMaxFrameAge.setDescription('The maximum amount of time which this Broadcast and Unknown Server can hold a frame before being forced to either forward or discard it. If a BUS is distributed, each of its servers should have the same value for this parameter.')
decBusMaxForwardingRate = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 29, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: decBusMaxForwardingRate.setStatus('mandatory')
if mibBuilder.loadTexts: decBusMaxForwardingRate.setDescription('The maximum rate at which this Broadcast and Unknown Server will forward frames.')
decBusClientStatesTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 29, 1, 2), )
if mibBuilder.loadTexts: decBusClientStatesTable.setStatus('mandatory')
if mibBuilder.loadTexts: decBusClientStatesTable.setDescription('A table describing how many clients are in various membership states.')
decBusClientStatesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 29, 1, 2, 1), ).setIndexNames((0, "DEC-BUS-MIB", "decBusIndex"))
if mibBuilder.loadTexts: decBusClientStatesEntry.setStatus('mandatory')
if mibBuilder.loadTexts: decBusClientStatesEntry.setDescription('Each row contains counters for one BUS component.')
decBusActiveClients = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 29, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decBusActiveClients.setStatus('mandatory')
if mibBuilder.loadTexts: decBusActiveClients.setDescription('The number of active clients of this BUS component. This count only includes those clients which have both Multicast Send and Multicast Forward VCCs.')
decBusMulticastFwdInProgress = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 29, 1, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decBusMulticastFwdInProgress.setStatus('mandatory')
if mibBuilder.loadTexts: decBusMulticastFwdInProgress.setDescription('The number of clients to which this BUS component is currently establishing Multicast Forward VCCs.')
decBusTerminating = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 29, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decBusTerminating.setStatus('mandatory')
if mibBuilder.loadTexts: decBusTerminating.setDescription('The number of clients whose memberships this BUS component is in the process of terminating.')
decBusTrafficTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 29, 1, 3), )
if mibBuilder.loadTexts: decBusTrafficTable.setStatus('mandatory')
if mibBuilder.loadTexts: decBusTrafficTable.setDescription('A table of traffic statistics, with one row for each Broadcast and Unknown Server.')
decBusTrafficEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 29, 1, 3, 1), ).setIndexNames((0, "DEC-BUS-MIB", "decBusIndex"))
if mibBuilder.loadTexts: decBusTrafficEntry.setStatus('mandatory')
if mibBuilder.loadTexts: decBusTrafficEntry.setDescription('A set of traffic statistics for one BUS component.')
decBusFramesForwarded = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 29, 1, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decBusFramesForwarded.setStatus('mandatory')
if mibBuilder.loadTexts: decBusFramesForwarded.setDescription('The number of frames successfully forwarded by this Broadcast and Unknown Server.')
decBusInvalidFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 29, 1, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decBusInvalidFrames.setStatus('mandatory')
if mibBuilder.loadTexts: decBusInvalidFrames.setDescription('The number of frames which were discarded because of errors (such as invalid frame length).')
decBusFramesAgedOut = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 29, 1, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decBusFramesAgedOut.setStatus('mandatory')
if mibBuilder.loadTexts: decBusFramesAgedOut.setDescription('The number of frames which were discarded because delay exceeded the Maximum Frame Age.')
decBusFramesRateLimited = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 29, 1, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decBusFramesRateLimited.setStatus('mandatory')
if mibBuilder.loadTexts: decBusFramesRateLimited.setDescription("The number of frames which were discarded in order to enforce 'decBusMaxForwardingRate'.")
decBusFramesDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 29, 1, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decBusFramesDiscarded.setStatus('mandatory')
if mibBuilder.loadTexts: decBusFramesDiscarded.setDescription('The number of frames which could not be forwarded, even though no errors had been detected, and the frames had not aged out.')
decBusClientTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 29, 1, 4), )
if mibBuilder.loadTexts: decBusClientTable.setStatus('mandatory')
if mibBuilder.loadTexts: decBusClientTable.setDescription('A table listing clients of the emulated LANs which this node serves. This table reflects the actual membership of each emulated LAN, as opposed to the desired membership.')
decBusClientEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 29, 1, 4, 1), ).setIndexNames((0, "DEC-BUS-MIB", "decBusIndex"), (0, "DEC-BUS-MIB", "decBusClientIndex"))
if mibBuilder.loadTexts: decBusClientEntry.setStatus('mandatory')
if mibBuilder.loadTexts: decBusClientEntry.setDescription('Each entry describes an active LAN Emulation Client, from the perspective of the BUS.')
decBusClientIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 29, 1, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decBusClientIndex.setStatus('mandatory')
if mibBuilder.loadTexts: decBusClientIndex.setDescription("A unique value for each table row. This value has no predefined relation to a client's LECID.")
decBusClientAtmAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 29, 1, 4, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: decBusClientAtmAddress.setStatus('mandatory')
if mibBuilder.loadTexts: decBusClientAtmAddress.setDescription('The primary ATM address of the LAN Emulation Client.')
decBusClientID = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 29, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65279))).setMaxAccess("readonly")
if mibBuilder.loadTexts: decBusClientID.setStatus('mandatory')
if mibBuilder.loadTexts: decBusClientID.setDescription('Contains the first LECID the appropriate BUS has seen for this client, or zero if none has been seen yet.')
decBusClientUsedSeveralIDs = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 29, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: decBusClientUsedSeveralIDs.setStatus('mandatory')
if mibBuilder.loadTexts: decBusClientUsedSeveralIDs.setDescription('Indicates whether the appropriate BUS has seen two or more non-zero LEC IDs for this client. This is not a normal condition, and it would usually arise due to a transmission error in a frame or due to a client that was violating the LAN Emulation specification.')
decBusClientState = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 29, 1, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("noBusConnect", 2), ("busConnect", 3), ("clientConnect", 4), ("operational", 5), ("deleting", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: decBusClientState.setStatus('mandatory')
if mibBuilder.loadTexts: decBusClientState.setDescription("Indicates the status of this LEC from the server's perspective.")
decBusClientRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 29, 1, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: decBusClientRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: decBusClientRowStatus.setDescription("Provides a way to disconnect a LEC from the BUS. When read, this object has the value 'active'. When written, it only accepts the value 'destroy'. Because the ability to disconnect clients could lead to denial-of-service attacks, support for this feature is strictly optional.")
decBusLecTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 29, 1, 5), )
if mibBuilder.loadTexts: decBusLecTable.setStatus('mandatory')
if mibBuilder.loadTexts: decBusLecTable.setDescription('A table listing clients which belong to the emulated LANs that this node serves.')
decBusLecEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 29, 1, 5, 1), ).setIndexNames((0, "DEC-BUS-MIB", "decBusIndex"), (0, "DEC-BUS-MIB", "decBusLecAtmAddress"))
if mibBuilder.loadTexts: decBusLecEntry.setStatus('mandatory')
if mibBuilder.loadTexts: decBusLecEntry.setDescription('Each entry describes a LAN Emulation Client from the perspective of the BUS.')
decBusLecAtmAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 29, 1, 5, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: decBusLecAtmAddress.setStatus('mandatory')
if mibBuilder.loadTexts: decBusLecAtmAddress.setDescription('The primary ATM address of the LAN Emulation Client.')
decBusLecIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 29, 1, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decBusLecIndex.setStatus('mandatory')
if mibBuilder.loadTexts: decBusLecIndex.setDescription("The client's index in the 'decBusClientTable'. Note that this value is NOT the client's LEC-ID.")
decBusLecID = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 29, 1, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65279))).setMaxAccess("readonly")
if mibBuilder.loadTexts: decBusLecID.setStatus('mandatory')
if mibBuilder.loadTexts: decBusLecID.setDescription('Contains the first LECID the appropriate BUS has seen for this client, or zero if none has been seen yet.')
decBusLecUsedSeveralIDs = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 29, 1, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: decBusLecUsedSeveralIDs.setStatus('mandatory')
if mibBuilder.loadTexts: decBusLecUsedSeveralIDs.setDescription('Indicates whether the appropriate BUS has seen two or more non-zero LEC IDs for this client. This is not a normal condition, and it would usually arise due to a transmission error in a frame or due to a client that was violating the LAN Emulation specification.')
decBusLecState = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 29, 1, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("noBusConnect", 2), ("busConnect", 3), ("clientConnect", 4), ("operational", 5), ("deleting", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: decBusLecState.setStatus('mandatory')
if mibBuilder.loadTexts: decBusLecState.setDescription("Indicates the status of this LEC from the server's perspective.")
decBusLecRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 29, 1, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: decBusLecRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: decBusLecRowStatus.setDescription("Provides a way to disconnect a LEC from the BUS. When read, this object has the value 'active'. When written, it only accepts the value 'destroy'. Because the ability to disconnect clients could lead to denial-of-service attacks, support for this feature is strictly optional.")
decBusMulticastSendTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 29, 1, 6), )
if mibBuilder.loadTexts: decBusMulticastSendTable.setStatus('mandatory')
if mibBuilder.loadTexts: decBusMulticastSendTable.setDescription('This optional table identifies Multicast Send VCCs at the place where they attach to the BUS. In a SVC implementation, the objects in this table will be read-only. In a PVC implementation, this table can be used to tell the BUS about the creation or the deletion of Multicast Send VCCs.')
decBusMulticastSendEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 29, 1, 6, 1), ).setIndexNames((0, "DEC-BUS-MIB", "decBusIndex"), (0, "DEC-BUS-MIB", "decBusLecAtmAddress"))
if mibBuilder.loadTexts: decBusMulticastSendEntry.setStatus('mandatory')
if mibBuilder.loadTexts: decBusMulticastSendEntry.setDescription('Each entry describes the circuits going to one LAN Emulation Client.')
decBusMulticastSendInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 29, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: decBusMulticastSendInterface.setStatus('mandatory')
if mibBuilder.loadTexts: decBusMulticastSendInterface.setDescription("If a Multicast Send PVC or SVC exists, this object has a value equal to the 'ifIndex' of the ATM port which terminates that circuit at the BUS. Otherwise it has the value 0.")
decBusMulticastSendVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 29, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: decBusMulticastSendVpi.setStatus('mandatory')
if mibBuilder.loadTexts: decBusMulticastSendVpi.setDescription('If a Multicast Send PVC or SVC exists, this object has a value equal to the VPI of the Multicast Send VCC at the point where it connects to the BUS. Otherwise, it has the value 0.')
decBusMulticastSendVci = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 29, 1, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: decBusMulticastSendVci.setStatus('mandatory')
if mibBuilder.loadTexts: decBusMulticastSendVci.setDescription('If a Multicast Send PVC or SVC exists, this object has a value equal to the VCI of the Multicast Send VCC at the point where it connects to the BUS. Otherwise, it has the value 0.')
decBusMulticastSendRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 29, 1, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: decBusMulticastSendRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: decBusMulticastSendRowStatus.setDescription('Used to create and delete rows in the table.')
decBusMulticastFwdTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 29, 1, 7), )
if mibBuilder.loadTexts: decBusMulticastFwdTable.setStatus('mandatory')
if mibBuilder.loadTexts: decBusMulticastFwdTable.setDescription('This optional table identifies Multicast Forward VCCs at the place where they attach to the BUS. In a SVC implementation, this table will be read- only. In a PVC implementation, this table can be used to tell the BUS about the creation or the deletion of Multicast Forward VCCs.')
decBusMulticastFwdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 29, 1, 7, 1), ).setIndexNames((0, "DEC-BUS-MIB", "decBusIndex"), (0, "DEC-BUS-MIB", "decBusMulticastFwdInterface"), (0, "DEC-BUS-MIB", "decBusMulticastFwdVpi"), (0, "DEC-BUS-MIB", "decBusMulticastFwdVci"))
if mibBuilder.loadTexts: decBusMulticastFwdEntry.setStatus('mandatory')
if mibBuilder.loadTexts: decBusMulticastFwdEntry.setDescription('Each entry describes the circuits going to one LAN Emulation Client.')
decBusMulticastFwdInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 29, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: decBusMulticastFwdInterface.setStatus('mandatory')
if mibBuilder.loadTexts: decBusMulticastFwdInterface.setDescription("The 'ifIndex' of the ATM port which terminates the Multicast Forward VCC at the BUS.")
decBusMulticastFwdVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 29, 1, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: decBusMulticastFwdVpi.setStatus('mandatory')
if mibBuilder.loadTexts: decBusMulticastFwdVpi.setDescription('The VPI of the Multicast Forward VCC at the point where this VCC connects to the BUS.')
decBusMulticastFwdVci = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 29, 1, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: decBusMulticastFwdVci.setStatus('mandatory')
if mibBuilder.loadTexts: decBusMulticastFwdVci.setDescription('The VCI of the Multicast Forward VCC at the point where this VCC connects to the BUS.')
decBusMulticastFwdRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 29, 1, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: decBusMulticastFwdRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: decBusMulticastFwdRowStatus.setDescription('An object provided to satisfy the requirement that all tables have at least one accessible object; in the future, it may also be extended to provide PVC support.')
decBusCallStatsTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 29, 1, 8), )
if mibBuilder.loadTexts: decBusCallStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: decBusCallStatsTable.setDescription("This table holds statistics on virtual circuit/leaf establishment attempts. It contains one row for each Broadcast and Unknown Server, and acts as an extension to the 'decBusConfigTable'.")
decBusCallStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 29, 1, 8, 1), ).setIndexNames((0, "DEC-BUS-MIB", "decBusIndex"))
if mibBuilder.loadTexts: decBusCallStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: decBusCallStatsEntry.setDescription('Each row contains connection statistics for one Broadcast and Unknown Server.')
decBusMulticastSendCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 29, 1, 8, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decBusMulticastSendCalls.setStatus('mandatory')
if mibBuilder.loadTexts: decBusMulticastSendCalls.setDescription('The total number of Multicast Send establishment attempts for this BUS component.')
decBusMulticastSendFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 29, 1, 8, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decBusMulticastSendFailures.setStatus('mandatory')
if mibBuilder.loadTexts: decBusMulticastSendFailures.setDescription('The number of Multicast Send establishment attempts for this BUS component which were not accepted. This includes failures counted in decBusMsOutOfResourcesFailures decBusMsInvalidInfoElements decBusMsWrongLanTypes decBusMsWrongMaxFrameSizes and any miscellaneous failures.')
decBusMsOutOfResourcesFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 29, 1, 8, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decBusMsOutOfResourcesFailures.setStatus('mandatory')
if mibBuilder.loadTexts: decBusMsOutOfResourcesFailures.setDescription('The number of Multicast Send establishment attempts for this BUS component which failed for lack of resources.')
decBusMsInvalidInfoElements = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 29, 1, 8, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decBusMsInvalidInfoElements.setStatus('mandatory')
if mibBuilder.loadTexts: decBusMsInvalidInfoElements.setDescription('The number of Multicast Send establishment attempts for this BUS component which failed because required information elements were missing or contained invalid information. The optional Event Log group can help you determine which information elements were invalid or missing. This object does not count call failures included in decBusMsWrongLanTypes or decBusMsWrongMaxFrameSizes.')
decBusMsWrongLanTypes = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 29, 1, 8, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decBusMsWrongLanTypes.setStatus('mandatory')
if mibBuilder.loadTexts: decBusMsWrongLanTypes.setDescription('The number of Multicast Send establishment attempts which were rejected because they specified a different LAN Type (data frame format) than the one configured for this BUS component.')
decBusMsWrongMaxFrameSizes = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 29, 1, 8, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decBusMsWrongMaxFrameSizes.setStatus('mandatory')
if mibBuilder.loadTexts: decBusMsWrongMaxFrameSizes.setDescription('The number of Multicast Send establishment attempts which were rejected because they specified a different maximum AAL-5 SDU size than the one configured for this BUS component.')
decBusMulticastForwardCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 29, 1, 8, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decBusMulticastForwardCalls.setStatus('mandatory')
if mibBuilder.loadTexts: decBusMulticastForwardCalls.setDescription('The number of Multicast Forward connections which this BUS tried to establish.')
decBusMulticastForwardFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 29, 1, 8, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decBusMulticastForwardFailures.setStatus('mandatory')
if mibBuilder.loadTexts: decBusMulticastForwardFailures.setDescription('The number of Multicast Forward connections which this BUS was unable to establish. This includes failures counted in decBusMfOutOfResourcesFailures decBusMfClientRejects and any miscellaneous failures.')
decBusMfOutOfResourcesFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 29, 1, 8, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decBusMfOutOfResourcesFailures.setStatus('mandatory')
if mibBuilder.loadTexts: decBusMfOutOfResourcesFailures.setDescription('The number of Multicast Forward connections which this BUS component could not establish due to lack of resources.')
decBusMfClientRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 29, 1, 8, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decBusMfClientRejects.setStatus('mandatory')
if mibBuilder.loadTexts: decBusMfClientRejects.setDescription("The number of Multicast Forward connections which this BUS component's clients refused to accept.")
decBusEventLogMaximumSize = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 29, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: decBusEventLogMaximumSize.setStatus('mandatory')
if mibBuilder.loadTexts: decBusEventLogMaximumSize.setDescription('The minimum number of events which the agent should remember before purging old log entries to make way for new ones.')
decBusEventLogTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 29, 1, 10), )
if mibBuilder.loadTexts: decBusEventLogTable.setStatus('mandatory')
if mibBuilder.loadTexts: decBusEventLogTable.setDescription('A table of event log entries for the emulated LANs that this node serves.')
decBusEventLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 29, 1, 10, 1), ).setIndexNames((0, "DEC-BUS-MIB", "decBusEventIndex"))
if mibBuilder.loadTexts: decBusEventLogEntry.setStatus('mandatory')
if mibBuilder.loadTexts: decBusEventLogEntry.setDescription('An entry describing a significant event.')
decBusEventIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 29, 1, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decBusEventIndex.setStatus('mandatory')
if mibBuilder.loadTexts: decBusEventIndex.setDescription('A unique number greater than zero which identifies this table row.')
decBusEventType = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 29, 1, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("joinFailed", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: decBusEventType.setStatus('mandatory')
if mibBuilder.loadTexts: decBusEventType.setDescription('The event which triggered this log entry. joinFailed(1) - A client tried to join one of the broadcast domains which this host serves, but the attempt failed. ')
decBusEventReason = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 29, 1, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 5, 6, 7, 8, 9, 10, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 100, 101))).clone(namedValues=NamedValues(("versionNotSupported", 1), ("invalidRequestParameters", 2), ("duplicateLanDestination", 4), ("duplicateAtmAddress", 5), ("insufficientResources", 6), ("accessDenied", 7), ("invalidRequestorId", 8), ("invalidLanDestination", 9), ("invalidAtmAddress", 10), ("wrongLanType", 50), ("wrongMaxFrameSize", 51), ("wrongJoinMaxFrameSize", 52), ("nonDuplicateRequest", 53), ("controlDistributeFailure", 54), ("multicastForwardFailure", 55), ("joinNotCompleted", 56), ("joinTimeout", 57), ("busConnectTimeout", 58), ("clientNotConnectedToLes", 59), ("missingInformationElement", 70), ("noAalParameters", 71), ("noAtmTrafficDescriptor", 72), ("noBroadbandBearerCapability", 73), ("noBlli", 74), ("noCallingPartyNumber", 75), ("noCalledPartyNumber", 76), ("noConnectionIdentifier", 77), ("noQosParameter", 78), ("invalidInformationElement", 80), ("invalidAalParameters", 81), ("invalidAtmTrafficDescriptor", 82), ("invalidBroadbandBearerCapability", 83), ("invalidBlli", 84), ("invalidCallingPartyNumber", 85), ("invalidCalledPartyNumber", 86), ("invalidConnectionIdentifier", 87), ("invalidQosParameter", 88), ("invalidAalMode", 90), ("invalidAalSccs", 91), ("insecureAtmAddress", 100), ("unverifiedAtmAddress", 101)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: decBusEventReason.setStatus('mandatory')
if mibBuilder.loadTexts: decBusEventReason.setDescription('The cause of the failure.')
decBusEventServer = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 29, 1, 10, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decBusEventServer.setStatus('mandatory')
if mibBuilder.loadTexts: decBusEventServer.setDescription("The 'decBusIndex' of the LAN Emulation Server that was involved in this incident. If the value of this object is zero, it indicates that the server no longer exists.")
decBusEventServerAtmAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 29, 1, 10, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: decBusEventServerAtmAddress.setStatus('mandatory')
if mibBuilder.loadTexts: decBusEventServerAtmAddress.setDescription('The ATM address of the Broadcast and Unknown Server that was involved in this incident.')
decBusEventClientAtmAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 29, 1, 10, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: decBusEventClientAtmAddress.setStatus('mandatory')
if mibBuilder.loadTexts: decBusEventClientAtmAddress.setDescription('If known, the ATM address of the LAN Emulation Client that was involved in this incident.')
decBusEventTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 29, 1, 10, 1, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decBusEventTimestamp.setStatus('mandatory')
if mibBuilder.loadTexts: decBusEventTimestamp.setDescription('The value of sysUpTime at the time that the event occurred. If the event occurred prior to the last re-initialization of the local network management subsystem, this object contains a zero value.')
decBusConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 29, 2, 1, 1))
decBusClientStatesGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 29, 2, 1, 2))
decBusTrafficGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 29, 2, 1, 3))
decBusClientGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 29, 2, 1, 4))
decBusLecGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 29, 2, 1, 5))
decBusCircuitGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 29, 2, 1, 6))
decBusCallStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 29, 2, 1, 7))
decBusEventLogGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 29, 2, 1, 8))
decBusMIBCompliance = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 29, 2, 2, 1))
mibBuilder.exportSymbols("DEC-BUS-MIB", decBusLecState=decBusLecState, decBusMulticastFwdInterface=decBusMulticastFwdInterface, decBusClientEntry=decBusClientEntry, decBusMIB=decBusMIB, decBusClientStatesTable=decBusClientStatesTable, decBusMulticastFwdVpi=decBusMulticastFwdVpi, decBusConfigGroup=decBusConfigGroup, decBusConfigEntry=decBusConfigEntry, decBusEventServer=decBusEventServer, decBusMIBConformance=decBusMIBConformance, decBusEventLogEntry=decBusEventLogEntry, decBusMulticastSendVpi=decBusMulticastSendVpi, decBusFramesForwarded=decBusFramesForwarded, decBusOperStatus=decBusOperStatus, decBusCallStatsGroup=decBusCallStatsGroup, decBusLecUsedSeveralIDs=decBusLecUsedSeveralIDs, decBusMulticastFwdRowStatus=decBusMulticastFwdRowStatus, decBusMaxDataFrameSize=decBusMaxDataFrameSize, decBusClientRowStatus=decBusClientRowStatus, decBusClientAtmAddress=decBusClientAtmAddress, decBusClientIndex=decBusClientIndex, decBusEventTimestamp=decBusEventTimestamp, decBusIndex=decBusIndex, decBusMIBGroups=decBusMIBGroups, decBusMIBCompliance=decBusMIBCompliance, decBusMulticastSendVci=decBusMulticastSendVci, decBusClientStatesGroup=decBusClientStatesGroup, decBusLanName=decBusLanName, decBusMaxForwardingRate=decBusMaxForwardingRate, decBusMulticastFwdEntry=decBusMulticastFwdEntry, decBusMIBCompliances=decBusMIBCompliances, decBusMulticastForwardCalls=decBusMulticastForwardCalls, decBusLecAtmAddress=decBusLecAtmAddress, decBusMulticastFwdTable=decBusMulticastFwdTable, decBusLecIndex=decBusLecIndex, decBusClientStatesEntry=decBusClientStatesEntry, decBusInvalidFrames=decBusInvalidFrames, decBusClientGroup=decBusClientGroup, decBusClientUsedSeveralIDs=decBusClientUsedSeveralIDs, decBusAdminStatus=decBusAdminStatus, decBusCircuitGroup=decBusCircuitGroup, decBusLecGroup=decBusLecGroup, decBusLastChange=decBusLastChange, decBusMulticastSendInterface=decBusMulticastSendInterface, decBusEventLogMaximumSize=decBusEventLogMaximumSize, decBusTrafficTable=decBusTrafficTable, decBusMulticastSendEntry=decBusMulticastSendEntry, decBusMIBObjects=decBusMIBObjects, decBusMaxFrameAge=decBusMaxFrameAge, decBusConfigTable=decBusConfigTable, decBusEventLogTable=decBusEventLogTable, decBusLecEntry=decBusLecEntry, decBusMfClientRejects=decBusMfClientRejects, decBusFramesRateLimited=decBusFramesRateLimited, decBusCallStatsEntry=decBusCallStatsEntry, decBusLecTable=decBusLecTable, decBusClientState=decBusClientState, decBusLecID=decBusLecID, decBusEventServerAtmAddress=decBusEventServerAtmAddress, decBusActiveClients=decBusActiveClients, decBusMulticastSendTable=decBusMulticastSendTable, decBusMsWrongLanTypes=decBusMsWrongLanTypes, decBusLanType=decBusLanType, decBusFramesDiscarded=decBusFramesDiscarded, decBusTrafficGroup=decBusTrafficGroup, decBusMulticastSendCalls=decBusMulticastSendCalls, decBusMsOutOfResourcesFailures=decBusMsOutOfResourcesFailures, decBusEventIndex=decBusEventIndex, decBusEventLogGroup=decBusEventLogGroup, decBusClientTable=decBusClientTable, decBusTrafficEntry=decBusTrafficEntry, decBusMfOutOfResourcesFailures=decBusMfOutOfResourcesFailures, decBusLecRowStatus=decBusLecRowStatus, decBusCallStatsTable=decBusCallStatsTable, decBusEventClientAtmAddress=decBusEventClientAtmAddress, decBusMulticastForwardFailures=decBusMulticastForwardFailures, decBusMulticastSendFailures=decBusMulticastSendFailures, decBusEventReason=decBusEventReason, decBusRowStatus=decBusRowStatus, decBusMsInvalidInfoElements=decBusMsInvalidInfoElements, decBusMsWrongMaxFrameSizes=decBusMsWrongMaxFrameSizes, decBusMulticastFwdVci=decBusMulticastFwdVci, decBusMulticastFwdInProgress=decBusMulticastFwdInProgress, decBusMulticastSendRowStatus=decBusMulticastSendRowStatus, decBusClientID=decBusClientID, decBusDescription=decBusDescription, decBusTerminating=decBusTerminating, decBusEventType=decBusEventType, decBusAtmAddress=decBusAtmAddress, decBusFramesAgedOut=decBusFramesAgedOut)
