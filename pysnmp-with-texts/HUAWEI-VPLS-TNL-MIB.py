#
# PySNMP MIB module HUAWEI-VPLS-TNL-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HUAWEI-VPLS-TNL-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:49:40 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint")
hwDatacomm, = mibBuilder.importSymbols("HUAWEI-MIB", "hwDatacomm")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
ModuleIdentity, MibIdentifier, Counter32, Counter64, IpAddress, Integer32, NotificationType, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, ObjectIdentity, TimeTicks, Bits, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "MibIdentifier", "Counter32", "Counter64", "IpAddress", "Integer32", "NotificationType", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "ObjectIdentity", "TimeTicks", "Bits", "Gauge32")
TextualConvention, RowStatus, DisplayString, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "RowStatus", "DisplayString", "TruthValue")
hwL2VpnVplsTnlExt = ModuleIdentity((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 6))
if mibBuilder.loadTexts: hwL2VpnVplsTnlExt.setLastUpdated('200812151925Z')
if mibBuilder.loadTexts: hwL2VpnVplsTnlExt.setOrganization('Huawei Technologies Co., Ltd.')
if mibBuilder.loadTexts: hwL2VpnVplsTnlExt.setContactInfo('R&D BeiJing, Huawei Technologies co.,Ltd. Huawei Bld.,NO.3 Xinxi Rd., Shang-Di Information Industry Base, Hai-Dian District Beijing P.R. China Zip:100085 Http://www.huawei.com E-mail:support@huawei.com')
if mibBuilder.loadTexts: hwL2VpnVplsTnlExt.setDescription('This MIB defines all the objects that containing VPLS tunnel information.')
hwL2Vpn = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119))
hwVplsTunnelMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 6, 1))
hwVplsTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 6, 1, 1), )
if mibBuilder.loadTexts: hwVplsTunnelTable.setStatus('current')
if mibBuilder.loadTexts: hwVplsTunnelTable.setDescription('Information about VPLS PW Tunnel. This object is used to get VPLS PW tunnel table.')
hwVplsTunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 6, 1, 1, 1), ).setIndexNames((0, "HUAWEI-VPLS-TNL-MIB", "hwVplsVsiName"), (0, "HUAWEI-VPLS-TNL-MIB", "hwVplsNexthopPeer"), (0, "HUAWEI-VPLS-TNL-MIB", "hwVplsSiteOrPwId"), (0, "HUAWEI-VPLS-TNL-MIB", "hwVplsPeerTnlId"))
if mibBuilder.loadTexts: hwVplsTunnelEntry.setStatus('current')
if mibBuilder.loadTexts: hwVplsTunnelEntry.setDescription('It is used to get detailed tunnel information.')
hwVplsVsiName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 6, 1, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31)))
if mibBuilder.loadTexts: hwVplsVsiName.setStatus('current')
if mibBuilder.loadTexts: hwVplsVsiName.setDescription('The name of this VPLS instance.')
hwVplsNexthopPeer = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 6, 1, 1, 1, 2), IpAddress())
if mibBuilder.loadTexts: hwVplsNexthopPeer.setStatus('current')
if mibBuilder.loadTexts: hwVplsNexthopPeer.setDescription('The ip address of the peer PE.')
hwVplsSiteOrPwId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 6, 1, 1, 1, 3), Unsigned32())
if mibBuilder.loadTexts: hwVplsSiteOrPwId.setStatus('current')
if mibBuilder.loadTexts: hwVplsSiteOrPwId.setDescription('Remote Site ID for BGP Mode, or PW id for LDP Mode')
hwVplsPeerTnlId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 6, 1, 1, 1, 4), Unsigned32())
if mibBuilder.loadTexts: hwVplsPeerTnlId.setStatus('current')
if mibBuilder.loadTexts: hwVplsPeerTnlId.setDescription('The Tunnel ID.')
hwVplsTnlName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 6, 1, 1, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVplsTnlName.setStatus('current')
if mibBuilder.loadTexts: hwVplsTnlName.setDescription('The name of this Tunnel.')
hwVplsTnlType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 6, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("lsp", 1), ("crlsp", 2), ("other", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVplsTnlType.setStatus('current')
if mibBuilder.loadTexts: hwVplsTnlType.setDescription('The type of this Tunnel. e.g. LSP/GRE/CR-LSP...')
hwVplsTnlSrcAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 6, 1, 1, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVplsTnlSrcAddress.setStatus('current')
if mibBuilder.loadTexts: hwVplsTnlSrcAddress.setDescription('The source ip address of this tunnel.')
hwVplsTnlDestAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 6, 1, 1, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVplsTnlDestAddress.setStatus('current')
if mibBuilder.loadTexts: hwVplsTnlDestAddress.setDescription('The destination ip address of this tunnel.')
hwVplsLspIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 6, 1, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVplsLspIndex.setStatus('current')
if mibBuilder.loadTexts: hwVplsLspIndex.setDescription('The index of lsp.')
hwVplsLspOutIf = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 6, 1, 1, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVplsLspOutIf.setStatus('current')
if mibBuilder.loadTexts: hwVplsLspOutIf.setDescription('The out-interface of lsp.')
hwVplsLspOutLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 6, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVplsLspOutLabel.setStatus('current')
if mibBuilder.loadTexts: hwVplsLspOutLabel.setDescription('The out-label of lsp.')
hwVplsLspNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 6, 1, 1, 1, 12), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVplsLspNextHop.setStatus('current')
if mibBuilder.loadTexts: hwVplsLspNextHop.setDescription('The next-hop of lsp.')
hwVplsLspFec = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 6, 1, 1, 1, 13), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVplsLspFec.setStatus('current')
if mibBuilder.loadTexts: hwVplsLspFec.setDescription('The Fec of lsp.')
hwVplsLspFecPfxLen = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 6, 1, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVplsLspFecPfxLen.setStatus('current')
if mibBuilder.loadTexts: hwVplsLspFecPfxLen.setDescription('The length of mask for hwVplsLspFec.')
hwVplsLspIsBackup = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 6, 1, 1, 1, 15), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVplsLspIsBackup.setStatus('current')
if mibBuilder.loadTexts: hwVplsLspIsBackup.setDescription('Indicate whether the lsp is main.')
hwVplsIsBalance = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 6, 1, 1, 1, 16), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVplsIsBalance.setStatus('current')
if mibBuilder.loadTexts: hwVplsIsBalance.setDescription('Property of Balance. Rerurn True if Tunnel-Policy is configed.')
hwVplsLspTunnelId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 6, 1, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVplsLspTunnelId.setStatus('current')
if mibBuilder.loadTexts: hwVplsLspTunnelId.setDescription('This object indicates the tunnel ID of the tunnel interface.')
hwVplsLspSignType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 6, 1, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 20))).clone(namedValues=NamedValues(("ldp", 1), ("crLdp", 2), ("rsvp", 3), ("bgp", 4), ("l3vpn", 5), ("static", 6), ("crStatic", 7), ("bgpIpv6", 8), ("staticHa", 9), ("l2vpnIpv6", 10), ("maxSignal", 20)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVplsLspSignType.setStatus('current')
if mibBuilder.loadTexts: hwVplsLspSignType.setDescription('This object indicates the signaling protocol of the tunnel.')
hwVplsTnlRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 6, 1, 1, 1, 50), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwVplsTnlRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwVplsTnlRowStatus.setDescription('The operating state of the row.')
hwVplsTunnelMIBTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 6, 2))
hwVplsTunnelMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 6, 3))
hwVplsTunnelMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 6, 3, 1))
hwVplsTunnelMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 6, 3, 1, 1)).setObjects(("HUAWEI-VPLS-TNL-MIB", "hwVplsTunnelGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwVplsTunnelMIBCompliance = hwVplsTunnelMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: hwVplsTunnelMIBCompliance.setDescription('The compliance statement for systems supporting the HUAWEI-VPLS-TNL-MIB.')
hwVplsTunnelMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 6, 3, 2))
hwVplsTunnelGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 6, 3, 2, 1)).setObjects(("HUAWEI-VPLS-TNL-MIB", "hwVplsTnlName"), ("HUAWEI-VPLS-TNL-MIB", "hwVplsTnlType"), ("HUAWEI-VPLS-TNL-MIB", "hwVplsTnlSrcAddress"), ("HUAWEI-VPLS-TNL-MIB", "hwVplsTnlDestAddress"), ("HUAWEI-VPLS-TNL-MIB", "hwVplsLspOutIf"), ("HUAWEI-VPLS-TNL-MIB", "hwVplsLspOutLabel"), ("HUAWEI-VPLS-TNL-MIB", "hwVplsLspNextHop"), ("HUAWEI-VPLS-TNL-MIB", "hwVplsLspFec"), ("HUAWEI-VPLS-TNL-MIB", "hwVplsLspFecPfxLen"), ("HUAWEI-VPLS-TNL-MIB", "hwVplsLspIsBackup"), ("HUAWEI-VPLS-TNL-MIB", "hwVplsIsBalance"), ("HUAWEI-VPLS-TNL-MIB", "hwVplsLspTunnelId"), ("HUAWEI-VPLS-TNL-MIB", "hwVplsLspSignType"), ("HUAWEI-VPLS-TNL-MIB", "hwVplsTnlRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwVplsTunnelGroup = hwVplsTunnelGroup.setStatus('current')
if mibBuilder.loadTexts: hwVplsTunnelGroup.setDescription('The VPLS tunnel group.')
mibBuilder.exportSymbols("HUAWEI-VPLS-TNL-MIB", hwVplsSiteOrPwId=hwVplsSiteOrPwId, hwVplsTunnelMIBConformance=hwVplsTunnelMIBConformance, hwVplsIsBalance=hwVplsIsBalance, PYSNMP_MODULE_ID=hwL2VpnVplsTnlExt, hwVplsTunnelMIBCompliances=hwVplsTunnelMIBCompliances, hwVplsTunnelMIBObjects=hwVplsTunnelMIBObjects, hwVplsTunnelGroup=hwVplsTunnelGroup, hwVplsTunnelMIBTraps=hwVplsTunnelMIBTraps, hwVplsTnlRowStatus=hwVplsTnlRowStatus, hwVplsLspSignType=hwVplsLspSignType, hwVplsTunnelMIBCompliance=hwVplsTunnelMIBCompliance, hwVplsLspFec=hwVplsLspFec, hwVplsLspTunnelId=hwVplsLspTunnelId, hwVplsLspIndex=hwVplsLspIndex, hwVplsTunnelEntry=hwVplsTunnelEntry, hwVplsTunnelMIBGroups=hwVplsTunnelMIBGroups, hwVplsTnlName=hwVplsTnlName, hwVplsLspOutIf=hwVplsLspOutIf, hwVplsLspFecPfxLen=hwVplsLspFecPfxLen, hwL2Vpn=hwL2Vpn, hwVplsTnlType=hwVplsTnlType, hwVplsTunnelTable=hwVplsTunnelTable, hwVplsLspNextHop=hwVplsLspNextHop, hwVplsTnlSrcAddress=hwVplsTnlSrcAddress, hwVplsTnlDestAddress=hwVplsTnlDestAddress, hwVplsPeerTnlId=hwVplsPeerTnlId, hwL2VpnVplsTnlExt=hwL2VpnVplsTnlExt, hwVplsLspOutLabel=hwVplsLspOutLabel, hwVplsLspIsBackup=hwVplsLspIsBackup, hwVplsNexthopPeer=hwVplsNexthopPeer, hwVplsVsiName=hwVplsVsiName)
