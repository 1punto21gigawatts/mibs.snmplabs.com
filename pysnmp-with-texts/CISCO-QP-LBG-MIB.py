#
# PySNMP MIB module CISCO-QP-LBG-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-QP-LBG-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:10:30 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
entPhysicalIndex, = mibBuilder.importSymbols("ENTITY-MIB", "entPhysicalIndex")
ifDescr, = mibBuilder.importSymbols("IF-MIB", "ifDescr")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
Gauge32, NotificationType, Bits, iso, ModuleIdentity, Integer32, TimeTicks, Counter32, ObjectIdentity, IpAddress, Counter64, MibIdentifier, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "NotificationType", "Bits", "iso", "ModuleIdentity", "Integer32", "TimeTicks", "Counter32", "ObjectIdentity", "IpAddress", "Counter64", "MibIdentifier", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
MacAddress, TextualConvention, TruthValue, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "TextualConvention", "TruthValue", "DisplayString")
ciscoQpLbgMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 824))
ciscoQpLbgMIB.setRevisions(('2015-09-21 00:00', '2014-08-27 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoQpLbgMIB.setRevisionsDescriptions(("The table cqlqamPartitionTable describes the various parameters of QP such as QP's state, protocol, management IP, server IP, server state, associated QAM details and configured video route details. The table cqlloadBalanceGroupTable describes the LBG parameters such as total bandwidth, available bandwidth and reserved bandwidth of QAM & IP based sessions. The table cqllbgrouteTable describes the destination IP, udp range, reserved bandwidth of routes configured under LBG and flow count per route. Following objects were added to the MIB to provide trap notification support for the over subscribed Qam. cqlQamOverSubscribedAlert cqlQamOverSubscribedEnable Added object cqlqpServerIpList of type OCTET STRING for displaying multiple server IP's.", 'Latest version of this MIB module.',))
if mibBuilder.loadTexts: ciscoQpLbgMIB.setLastUpdated('201509210000Z')
if mibBuilder.loadTexts: ciscoQpLbgMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoQpLbgMIB.setContactInfo('Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-rfgw10@cisco.com')
if mibBuilder.loadTexts: ciscoQpLbgMIB.setDescription('This MIB module represents the Qam-Partition (QP) and Load Balance Group (LBG) parameters in the headend and it is supported by an snmp agent. It defines objects for managing both QP and LBG.')
ciscoQpLbgNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 824, 0))
ciscoQpLbgObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 824, 1))
ciscoQpLbgConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 824, 2))
cqlQpStateChange = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 824, 0, 1)).setObjects(("CISCO-QP-LBG-MIB", "cqlqpState"))
if mibBuilder.loadTexts: cqlQpStateChange.setStatus('current')
if mibBuilder.loadTexts: cqlQpStateChange.setDescription("The device generates this notification when a QP state has changed and the value of cqlQpNotifyEnable is 'true'.")
cqlQamAdd = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 824, 0, 2)).setObjects(("CISCO-QP-LBG-MIB", "cqlqpId"), ("IF-MIB", "ifDescr"))
if mibBuilder.loadTexts: cqlQamAdd.setStatus('current')
if mibBuilder.loadTexts: cqlQamAdd.setDescription("The device generates this notification when a qam has been added to QP and the value of cqlQamNotifyEnable is 'true'.")
cqlQamDelete = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 824, 0, 3)).setObjects(("CISCO-QP-LBG-MIB", "cqlqpId"), ("IF-MIB", "ifDescr"))
if mibBuilder.loadTexts: cqlQamDelete.setStatus('current')
if mibBuilder.loadTexts: cqlQamDelete.setDescription("The device generates this notification when a qam has been deleted from QP and the value of cqlQamNotifyEnable is 'true'.")
cqlLbgRouteAdd = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 824, 0, 4)).setObjects(("CISCO-QP-LBG-MIB", "cqlqpRouteDetails"))
if mibBuilder.loadTexts: cqlLbgRouteAdd.setStatus('current')
if mibBuilder.loadTexts: cqlLbgRouteAdd.setDescription("The device generates this notification when a route has been added to QP and the value of cqlRouteNotifyEnable is 'true'.")
cqlLbgRouteDelete = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 824, 0, 5)).setObjects(("CISCO-QP-LBG-MIB", "cqlqpRouteDetails"))
if mibBuilder.loadTexts: cqlLbgRouteDelete.setStatus('current')
if mibBuilder.loadTexts: cqlLbgRouteDelete.setDescription("The device generates this notification when a route has been deleted from QP and the value of cqlRouteNotifyEnable is 'true'.")
cqlQamOverSubscribedAlert = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 824, 0, 6)).setObjects(("IF-MIB", "ifDescr"), ("CISCO-QP-LBG-MIB", "cqlqpQamOversubscribedStatus"))
if mibBuilder.loadTexts: cqlQamOverSubscribedAlert.setStatus('current')
if mibBuilder.loadTexts: cqlQamOverSubscribedAlert.setDescription("The device generates this notification when a qam has been oversubscribed or cleared. This will be enabled when the object cqlQamOverSubscribedEnable is set to 'true'.")
cqlqamPartitionTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 824, 1, 1), )
if mibBuilder.loadTexts: cqlqamPartitionTable.setStatus('current')
if mibBuilder.loadTexts: cqlqamPartitionTable.setDescription("This table describes the various parameters of QP such as QP's state, protocol, management IP, server IP, server state, information related to qam and video routes.")
cqlqamPartitionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 824, 1, 1, 1), ).setIndexNames((0, "CISCO-QP-LBG-MIB", "cqlqpIndex"))
if mibBuilder.loadTexts: cqlqamPartitionEntry.setStatus('current')
if mibBuilder.loadTexts: cqlqamPartitionEntry.setDescription('Each entry corresponds to the configuration of a QP.')
cqlqpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 824, 1, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cqlqpIndex.setStatus('current')
if mibBuilder.loadTexts: cqlqpIndex.setDescription('Table Index. This index uniquely identifies the QP.')
cqlqpId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 824, 1, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cqlqpId.setStatus('current')
if mibBuilder.loadTexts: cqlqpId.setDescription('This object specifies the QP Id.')
cqlqpMgmtIpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 824, 1, 1, 1, 3), InetAddressType().clone('ipv4')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cqlqpMgmtIpAddrType.setStatus('current')
if mibBuilder.loadTexts: cqlqpMgmtIpAddrType.setDescription('The type of the Management address as defined inetAddressType. The supported address types are IPv4 and IPv6.')
cqlqpMgmtIp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 824, 1, 1, 1, 4), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cqlqpMgmtIp.setStatus('current')
if mibBuilder.loadTexts: cqlqpMgmtIp.setDescription('This object specifies the Management IP address of a QP.')
cqlqpServerIpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 824, 1, 1, 1, 5), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cqlqpServerIpAddrType.setStatus('current')
if mibBuilder.loadTexts: cqlqpServerIpAddrType.setDescription('The type of the Server address as defined inetAddressType. The supported address types are IPv4 and IPv6.')
cqlqpServerIp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 824, 1, 1, 1, 6), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cqlqpServerIp.setStatus('current')
if mibBuilder.loadTexts: cqlqpServerIp.setDescription('Server IP of the QP.')
cqlqpState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 824, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("inactive", 1), ("init", 2), ("active", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cqlqpState.setStatus('current')
if mibBuilder.loadTexts: cqlqpState.setDescription('This object specifies the state of the QP. The following are the valid states. inactive(1) QP is in inactive state. init(2) QP is in init state. active(3) QP is in active state.')
cqlqpProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 824, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("gqi", 1), ("ermi", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cqlqpProtocol.setStatus('current')
if mibBuilder.loadTexts: cqlqpProtocol.setDescription('This object specifies the QP Protocol. Gqi(1) Ermi(2)')
cqlqpKeepAliveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 824, 1, 1, 1, 9), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cqlqpKeepAliveTime.setStatus('current')
if mibBuilder.loadTexts: cqlqpKeepAliveTime.setDescription('This object specifies the keepalive timer in seconds for a QP.')
cqlqpServerState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 824, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disconnected", 1), ("connected", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cqlqpServerState.setStatus('current')
if mibBuilder.loadTexts: cqlqpServerState.setDescription('This object specifies the Server state of the QP. disconnected(1) Server is in disconnected state. connected(2) Server is in connected state.')
cqlqpGqiMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 824, 1, 1, 1, 11), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cqlqpGqiMacAddr.setStatus('current')
if mibBuilder.loadTexts: cqlqpGqiMacAddr.setDescription('This object specifies the MAC address of a QP, applicable only for GQI Protocol.')
cqlqpGqiResetInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 824, 1, 1, 1, 12), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cqlqpGqiResetInterval.setStatus('current')
if mibBuilder.loadTexts: cqlqpGqiResetInterval.setDescription('This object specifies Reset interval for a QP. It is applicable only for GQI protocol.')
cqlqpNumQams = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 824, 1, 1, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cqlqpNumQams.setStatus('current')
if mibBuilder.loadTexts: cqlqpNumQams.setDescription('The total number of qams associated with the QP.')
cqlqpQamCarrrierList = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 824, 1, 1, 1, 14), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cqlqpQamCarrrierList.setStatus('current')
if mibBuilder.loadTexts: cqlqpQamCarrrierList.setDescription('This object specifies the list of Qam carriers associated with the QP.')
cqlqpNumRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 824, 1, 1, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cqlqpNumRoutes.setStatus('current')
if mibBuilder.loadTexts: cqlqpNumRoutes.setDescription('The total number of routes associated with the QP.')
cqlqpRouteDetails = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 824, 1, 1, 1, 16), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cqlqpRouteDetails.setStatus('current')
if mibBuilder.loadTexts: cqlqpRouteDetails.setDescription('Route details of the QP. It includes the configured IP and also the highest and lowest UDP range.')
cqlqpErmiErrpComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 824, 1, 1, 1, 17), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cqlqpErmiErrpComponentName.setStatus('current')
if mibBuilder.loadTexts: cqlqpErmiErrpComponentName.setDescription('Component Name for the QP, applicable only for ERMI protocol.')
cqlqpErmiErrpStreamingZone = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 824, 1, 1, 1, 18), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cqlqpErmiErrpStreamingZone.setStatus('current')
if mibBuilder.loadTexts: cqlqpErmiErrpStreamingZone.setDescription('Streaming zone for the QP, applicable only for ERMI protocol.')
cqlqpErmiErrpHoldTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 824, 1, 1, 1, 19), Unsigned32().clone(90)).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cqlqpErmiErrpHoldTime.setStatus('current')
if mibBuilder.loadTexts: cqlqpErmiErrpHoldTime.setDescription('Hold Time in seconds for the QP, applicable only for ERMI protocol.')
cqlqpErmiErrpConnnectTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 824, 1, 1, 1, 20), Unsigned32().clone(10)).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cqlqpErmiErrpConnnectTime.setStatus('current')
if mibBuilder.loadTexts: cqlqpErmiErrpConnnectTime.setDescription('Connect Time in seconds for the QP, applicable only for ERMI protocol.')
cqlqpErmiErrpConnectRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 824, 1, 1, 1, 21), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cqlqpErmiErrpConnectRetry.setStatus('current')
if mibBuilder.loadTexts: cqlqpErmiErrpConnectRetry.setDescription('Connection retry in seconds for the QP. It is applicable only for ERMI protocol.')
cqlqpErmiRtspConnectTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 824, 1, 1, 1, 22), Unsigned32().clone(200)).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cqlqpErmiRtspConnectTime.setStatus('current')
if mibBuilder.loadTexts: cqlqpErmiRtspConnectTime.setDescription('Connect time in seconds for the QP. It is applicable only for ERMI protocol.')
cqlqpErmiRtspConnectRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 824, 1, 1, 1, 23), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cqlqpErmiRtspConnectRetry.setStatus('current')
if mibBuilder.loadTexts: cqlqpErmiRtspConnectRetry.setDescription('Connect retry in seconds for the QP, applicable only for ERMI protocol.')
cqlqpErmiRtspKeepAliveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 824, 1, 1, 1, 24), Unsigned32().clone(300)).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cqlqpErmiRtspKeepAliveTime.setStatus('current')
if mibBuilder.loadTexts: cqlqpErmiRtspKeepAliveTime.setDescription('Connection timeout in seconds for the QP. It is applicable only for ERMI protocol.')
cqlqpErmiRtspSessionTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 824, 1, 1, 1, 25), Unsigned32().clone(10800)).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cqlqpErmiRtspSessionTimeout.setStatus('current')
if mibBuilder.loadTexts: cqlqpErmiRtspSessionTimeout.setDescription('Session Timeout in seconds for the QP. It is applicable only for ERMI protocol.')
cqlqpQamOversubscribedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 824, 1, 1, 1, 26), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cqlqpQamOversubscribedStatus.setStatus('current')
if mibBuilder.loadTexts: cqlqpQamOversubscribedStatus.setDescription("This object specifies oversubscription status of a Qam. The value 'True' indicates the Qam is oversubscribed. Otherwise the value 'False' is reported.")
cqlqpServerIpList = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 824, 1, 1, 1, 27), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cqlqpServerIpList.setStatus('current')
if mibBuilder.loadTexts: cqlqpServerIpList.setDescription("List of Server IP's for the QP.")
cqlloadBalanceGroupTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 824, 1, 2), )
if mibBuilder.loadTexts: cqlloadBalanceGroupTable.setStatus('current')
if mibBuilder.loadTexts: cqlloadBalanceGroupTable.setDescription('This table describes the total bandwidth and the reserved bandwidth of QAM/IP based sessions.')
cqlloadBalanceGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 824, 1, 2, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "CISCO-QP-LBG-MIB", "cqllbgIndex"))
if mibBuilder.loadTexts: cqlloadBalanceGroupEntry.setStatus('current')
if mibBuilder.loadTexts: cqlloadBalanceGroupEntry.setDescription('Each entry corresponds to the parameters of a LBG.')
cqllbgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 824, 1, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cqllbgIndex.setStatus('current')
if mibBuilder.loadTexts: cqllbgIndex.setDescription('This index is to identify the LBG group within the slot.')
cqllbgTotalBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 824, 1, 2, 1, 2), Unsigned32()).setUnits('Kbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: cqllbgTotalBandwidth.setStatus('current')
if mibBuilder.loadTexts: cqllbgTotalBandwidth.setDescription('This object specifies the total bandwidth in Kbps of a LBG.')
cqllbgQamRsvBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 824, 1, 2, 1, 3), Unsigned32()).setUnits('Kbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: cqllbgQamRsvBandwidth.setStatus('current')
if mibBuilder.loadTexts: cqllbgQamRsvBandwidth.setDescription('This object specifies the total reserved bandwidth in Kbps for depi sessions.')
cqllbgIpRsvBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 824, 1, 2, 1, 4), Unsigned32()).setUnits('Kbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: cqllbgIpRsvBandwidth.setStatus('current')
if mibBuilder.loadTexts: cqllbgIpRsvBandwidth.setDescription('This object specifies the total reserved bandwidth in Kbps for video sessions.')
cqllbgAvailableBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 824, 1, 2, 1, 5), Unsigned32()).setUnits('Kbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: cqllbgAvailableBandwidth.setStatus('current')
if mibBuilder.loadTexts: cqllbgAvailableBandwidth.setDescription('This object specifies the available bandwidth in Kbps. This may be calculated as (TotalBandwidth - (QamRsvBandwidth + IpRsvBandwith)).')
cqllbgrouteTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 824, 1, 3), )
if mibBuilder.loadTexts: cqllbgrouteTable.setStatus('current')
if mibBuilder.loadTexts: cqllbgrouteTable.setDescription('This table describes the route parameters such as QP id,destination ip, low and high udp range, reserved and allocated bandwidth.')
cqllbgrouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 824, 1, 3, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "CISCO-QP-LBG-MIB", "cqllbgRouteIndex"))
if mibBuilder.loadTexts: cqllbgrouteEntry.setStatus('current')
if mibBuilder.loadTexts: cqllbgrouteEntry.setDescription('Each entry corresponds to the parameters of a route.')
cqllbgRouteIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 824, 1, 3, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cqllbgRouteIndex.setStatus('current')
if mibBuilder.loadTexts: cqllbgRouteIndex.setDescription('The table index. This is the index which uniquely identifies the route within the LBG group.')
cqllbgQpId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 824, 1, 3, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cqllbgQpId.setStatus('current')
if mibBuilder.loadTexts: cqllbgQpId.setDescription('This object specifies the QP ID. The range of the QP is between 1 and 50.')
cqllbgDstIpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 824, 1, 3, 1, 3), InetAddressType().clone('ipv4')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cqllbgDstIpAddrType.setStatus('current')
if mibBuilder.loadTexts: cqllbgDstIpAddrType.setDescription('The type of the destination address as defined inetAddressType. The supported address types are IPv4 and IPv6.')
cqllbgDstIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 824, 1, 3, 1, 4), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cqllbgDstIpAddr.setStatus('current')
if mibBuilder.loadTexts: cqllbgDstIpAddr.setDescription('Destination IP address of the route to which the incoming packets are routed to.')
cqllbgUdpPortRangeMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 824, 1, 3, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cqllbgUdpPortRangeMin.setStatus('current')
if mibBuilder.loadTexts: cqllbgUdpPortRangeMin.setDescription('The lowest UDP port of the UDP port range that can be used.')
cqllbgUdpPortRangeMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 824, 1, 3, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cqllbgUdpPortRangeMax.setStatus('current')
if mibBuilder.loadTexts: cqllbgUdpPortRangeMax.setDescription('The highest UDP port of the UDP port range that can be used.')
cqllbgGqiIngressPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 824, 1, 3, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cqllbgGqiIngressPort.setStatus('current')
if mibBuilder.loadTexts: cqllbgGqiIngressPort.setDescription('Ingress port of a QP, applicable only for GQI protocol.')
cqllbgRsvBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 824, 1, 3, 1, 8), Unsigned32()).setUnits('Kbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: cqllbgRsvBandwidth.setStatus('current')
if mibBuilder.loadTexts: cqllbgRsvBandwidth.setDescription('Reserved bandwidth is the total bitrate reserved on this route in Kbps.')
cqllbgAllocatedBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 824, 1, 3, 1, 9), Unsigned32()).setUnits('Kbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: cqllbgAllocatedBandwidth.setStatus('current')
if mibBuilder.loadTexts: cqllbgAllocatedBandwidth.setDescription('The total bandwidth being used by sessions using this route in Kbps.')
cqllbgNumFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 824, 1, 3, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cqllbgNumFlows.setStatus('current')
if mibBuilder.loadTexts: cqllbgNumFlows.setDescription('Number of sessions currently use this route to forward this traffic in Kbps.')
cqlQpNotifyEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 824, 1, 4), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cqlQpNotifyEnable.setStatus('current')
if mibBuilder.loadTexts: cqlQpNotifyEnable.setDescription('This object specifies whether the system generates cqlQpStateChange notifications. A false value will prevent cqlQpStateChange notifications from being generated by this system.')
cqlQamNotifyEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 824, 1, 5), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cqlQamNotifyEnable.setStatus('current')
if mibBuilder.loadTexts: cqlQamNotifyEnable.setDescription('This object specifies whether the system generates cqlQamAdd or cqlQamDelete notifications. A false value will prevent cqlQamAdd or cqlQamDelete notifications from being generated by this system.')
cqlRouteNotifyEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 824, 1, 6), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cqlRouteNotifyEnable.setStatus('current')
if mibBuilder.loadTexts: cqlRouteNotifyEnable.setDescription('This object specifies whether the system produces cqlRouteAdd or cqlRouteDelete notifications. A false value will prevent cqlRouteAdd or cqlRouteDelete notifications from being generated by this system.')
cqlQamOverSubscribedEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 824, 1, 7), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cqlQamOverSubscribedEnable.setStatus('current')
if mibBuilder.loadTexts: cqlQamOverSubscribedEnable.setDescription('This object specifies whether the system produces cqlQamOverSubscribedAlert notifications. A false value will prevent cqlQamOverSubscribedAlert notifications from being generated by the system.')
ciscoQpLbgCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 824, 2, 1))
ciscoQpLbgGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 824, 2, 2))
cqlciscoQpLbgCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 824, 2, 1, 1)).setObjects(("CISCO-QP-LBG-MIB", "cqlciscoLbgRouteObjectGroup"), ("CISCO-QP-LBG-MIB", "cqlciscoQpNotifsGroup"), ("CISCO-QP-LBG-MIB", "cqlciscoQpObjectGroup"), ("CISCO-QP-LBG-MIB", "cqlciscoQpLbgNotifsControlGroup"), ("CISCO-QP-LBG-MIB", "cqlciscoLbgNotifsGroup"), ("CISCO-QP-LBG-MIB", "cqlciscoLbgObjectGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cqlciscoQpLbgCompliance = cqlciscoQpLbgCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: cqlciscoQpLbgCompliance.setDescription('These objects describe the support level for QP and LBG.')
cqlciscoQpLbgCompliance1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 824, 2, 1, 2)).setObjects(("CISCO-QP-LBG-MIB", "cqlciscoLbgRouteObjectGroup"), ("CISCO-QP-LBG-MIB", "cqlciscoLbgNotifsGroup"), ("CISCO-QP-LBG-MIB", "cqlciscoLbgObjectGroup"), ("CISCO-QP-LBG-MIB", "cqlciscoQpNotifsGroup1"), ("CISCO-QP-LBG-MIB", "cqlciscoQpObjectGroup1"), ("CISCO-QP-LBG-MIB", "cqlciscoQpLbgNotifsControlGroup1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cqlciscoQpLbgCompliance1 = cqlciscoQpLbgCompliance1.setStatus('current')
if mibBuilder.loadTexts: cqlciscoQpLbgCompliance1.setDescription('These objects describe the support level for QP and LBG.')
cqlciscoQpNotifsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 824, 2, 2, 1)).setObjects(("CISCO-QP-LBG-MIB", "cqlQpStateChange"), ("CISCO-QP-LBG-MIB", "cqlQamAdd"), ("CISCO-QP-LBG-MIB", "cqlQamDelete"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cqlciscoQpNotifsGroup = cqlciscoQpNotifsGroup.setStatus('deprecated')
if mibBuilder.loadTexts: cqlciscoQpNotifsGroup.setDescription('A collection of QP notifications that may optionally be implemented. cqlciscoQpNotifsGroup object is superseded by cqlciscoQpNotifsGroup1.')
cqlciscoLbgNotifsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 824, 2, 2, 2)).setObjects(("CISCO-QP-LBG-MIB", "cqlLbgRouteAdd"), ("CISCO-QP-LBG-MIB", "cqlLbgRouteDelete"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cqlciscoLbgNotifsGroup = cqlciscoLbgNotifsGroup.setStatus('current')
if mibBuilder.loadTexts: cqlciscoLbgNotifsGroup.setDescription('A collection of LBG notifications that may optionally be implemented.')
cqlciscoQpObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 824, 2, 2, 3)).setObjects(("CISCO-QP-LBG-MIB", "cqlqpId"), ("CISCO-QP-LBG-MIB", "cqlqpMgmtIp"), ("CISCO-QP-LBG-MIB", "cqlqpState"), ("CISCO-QP-LBG-MIB", "cqlqpProtocol"), ("CISCO-QP-LBG-MIB", "cqlqpKeepAliveTime"), ("CISCO-QP-LBG-MIB", "cqlqpGqiResetInterval"), ("CISCO-QP-LBG-MIB", "cqlqpServerIp"), ("CISCO-QP-LBG-MIB", "cqlqpServerState"), ("CISCO-QP-LBG-MIB", "cqlqpGqiMacAddr"), ("CISCO-QP-LBG-MIB", "cqlqpNumQams"), ("CISCO-QP-LBG-MIB", "cqlqpQamCarrrierList"), ("CISCO-QP-LBG-MIB", "cqlqpNumRoutes"), ("CISCO-QP-LBG-MIB", "cqlqpRouteDetails"), ("CISCO-QP-LBG-MIB", "cqlqpErmiErrpComponentName"), ("CISCO-QP-LBG-MIB", "cqlqpErmiErrpStreamingZone"), ("CISCO-QP-LBG-MIB", "cqlqpErmiErrpConnectRetry"), ("CISCO-QP-LBG-MIB", "cqlqpErmiErrpConnnectTime"), ("CISCO-QP-LBG-MIB", "cqlqpErmiErrpHoldTime"), ("CISCO-QP-LBG-MIB", "cqlqpErmiRtspConnectRetry"), ("CISCO-QP-LBG-MIB", "cqlqpErmiRtspConnectTime"), ("CISCO-QP-LBG-MIB", "cqlqpErmiRtspKeepAliveTime"), ("CISCO-QP-LBG-MIB", "cqlqpErmiRtspSessionTimeout"), ("CISCO-QP-LBG-MIB", "cqlqpMgmtIpAddrType"), ("CISCO-QP-LBG-MIB", "cqlqpServerIpAddrType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cqlciscoQpObjectGroup = cqlciscoQpObjectGroup.setStatus('deprecated')
if mibBuilder.loadTexts: cqlciscoQpObjectGroup.setDescription('A collection of objects providing information about the QP parameters. cqlciscoQpObjectGroup object is superseded by cqlciscoQpObjectGroup1.')
cqlciscoLbgObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 824, 2, 2, 4)).setObjects(("CISCO-QP-LBG-MIB", "cqllbgTotalBandwidth"), ("CISCO-QP-LBG-MIB", "cqllbgQamRsvBandwidth"), ("CISCO-QP-LBG-MIB", "cqllbgIpRsvBandwidth"), ("CISCO-QP-LBG-MIB", "cqllbgAvailableBandwidth"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cqlciscoLbgObjectGroup = cqlciscoLbgObjectGroup.setStatus('current')
if mibBuilder.loadTexts: cqlciscoLbgObjectGroup.setDescription('A collection of objects providing information about the LBG parameters.')
cqlciscoLbgRouteObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 824, 2, 2, 5)).setObjects(("CISCO-QP-LBG-MIB", "cqllbgQpId"), ("CISCO-QP-LBG-MIB", "cqllbgDstIpAddr"), ("CISCO-QP-LBG-MIB", "cqllbgUdpPortRangeMin"), ("CISCO-QP-LBG-MIB", "cqllbgUdpPortRangeMax"), ("CISCO-QP-LBG-MIB", "cqllbgGqiIngressPort"), ("CISCO-QP-LBG-MIB", "cqllbgAllocatedBandwidth"), ("CISCO-QP-LBG-MIB", "cqllbgRsvBandwidth"), ("CISCO-QP-LBG-MIB", "cqllbgNumFlows"), ("CISCO-QP-LBG-MIB", "cqllbgDstIpAddrType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cqlciscoLbgRouteObjectGroup = cqlciscoLbgRouteObjectGroup.setStatus('current')
if mibBuilder.loadTexts: cqlciscoLbgRouteObjectGroup.setDescription('A collection of objects providing information about the LBG route parameters.')
cqlciscoQpLbgNotifsControlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 824, 2, 2, 6)).setObjects(("CISCO-QP-LBG-MIB", "cqlQpNotifyEnable"), ("CISCO-QP-LBG-MIB", "cqlQamNotifyEnable"), ("CISCO-QP-LBG-MIB", "cqlRouteNotifyEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cqlciscoQpLbgNotifsControlGroup = cqlciscoQpLbgNotifsControlGroup.setStatus('deprecated')
if mibBuilder.loadTexts: cqlciscoQpLbgNotifsControlGroup.setDescription('A collection of objects providing information about the notification enables. cqlciscoQpLbgNotifsControlGroup object is superseded by cqlciscoQpLbgNotifsControlGroup1.')
cqlciscoQpNotifsGroup1 = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 824, 2, 2, 7)).setObjects(("CISCO-QP-LBG-MIB", "cqlQpStateChange"), ("CISCO-QP-LBG-MIB", "cqlQamAdd"), ("CISCO-QP-LBG-MIB", "cqlQamDelete"), ("CISCO-QP-LBG-MIB", "cqlQamOverSubscribedAlert"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cqlciscoQpNotifsGroup1 = cqlciscoQpNotifsGroup1.setStatus('current')
if mibBuilder.loadTexts: cqlciscoQpNotifsGroup1.setDescription('A collection of QP notifications that may optionally be implemented.')
cqlciscoQpObjectGroup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 824, 2, 2, 8)).setObjects(("CISCO-QP-LBG-MIB", "cqlqpId"), ("CISCO-QP-LBG-MIB", "cqlqpMgmtIpAddrType"), ("CISCO-QP-LBG-MIB", "cqlqpMgmtIp"), ("CISCO-QP-LBG-MIB", "cqlqpServerIpAddrType"), ("CISCO-QP-LBG-MIB", "cqlqpServerIp"), ("CISCO-QP-LBG-MIB", "cqlqpState"), ("CISCO-QP-LBG-MIB", "cqlqpProtocol"), ("CISCO-QP-LBG-MIB", "cqlqpKeepAliveTime"), ("CISCO-QP-LBG-MIB", "cqlqpServerState"), ("CISCO-QP-LBG-MIB", "cqlqpGqiMacAddr"), ("CISCO-QP-LBG-MIB", "cqlqpGqiResetInterval"), ("CISCO-QP-LBG-MIB", "cqlqpNumQams"), ("CISCO-QP-LBG-MIB", "cqlqpQamCarrrierList"), ("CISCO-QP-LBG-MIB", "cqlqpNumRoutes"), ("CISCO-QP-LBG-MIB", "cqlqpRouteDetails"), ("CISCO-QP-LBG-MIB", "cqlqpErmiErrpComponentName"), ("CISCO-QP-LBG-MIB", "cqlqpErmiErrpStreamingZone"), ("CISCO-QP-LBG-MIB", "cqlqpErmiErrpHoldTime"), ("CISCO-QP-LBG-MIB", "cqlqpErmiErrpConnnectTime"), ("CISCO-QP-LBG-MIB", "cqlqpErmiErrpConnectRetry"), ("CISCO-QP-LBG-MIB", "cqlqpErmiRtspConnectTime"), ("CISCO-QP-LBG-MIB", "cqlqpErmiRtspConnectRetry"), ("CISCO-QP-LBG-MIB", "cqlqpErmiRtspKeepAliveTime"), ("CISCO-QP-LBG-MIB", "cqlqpErmiRtspSessionTimeout"), ("CISCO-QP-LBG-MIB", "cqlqpQamOversubscribedStatus"), ("CISCO-QP-LBG-MIB", "cqlqpServerIpList"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cqlciscoQpObjectGroup1 = cqlciscoQpObjectGroup1.setStatus('current')
if mibBuilder.loadTexts: cqlciscoQpObjectGroup1.setDescription('A collection of objects providing information about the QP parameters.')
cqlciscoQpLbgNotifsControlGroup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 824, 2, 2, 9)).setObjects(("CISCO-QP-LBG-MIB", "cqlQpNotifyEnable"), ("CISCO-QP-LBG-MIB", "cqlQamNotifyEnable"), ("CISCO-QP-LBG-MIB", "cqlRouteNotifyEnable"), ("CISCO-QP-LBG-MIB", "cqlQamOverSubscribedEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cqlciscoQpLbgNotifsControlGroup1 = cqlciscoQpLbgNotifsControlGroup1.setStatus('current')
if mibBuilder.loadTexts: cqlciscoQpLbgNotifsControlGroup1.setDescription('A collection of objects providing information about the notification enables.')
mibBuilder.exportSymbols("CISCO-QP-LBG-MIB", cqlqpId=cqlqpId, cqlLbgRouteDelete=cqlLbgRouteDelete, cqlqpErmiErrpStreamingZone=cqlqpErmiErrpStreamingZone, cqlqpMgmtIp=cqlqpMgmtIp, cqlqpErmiRtspConnectTime=cqlqpErmiRtspConnectTime, cqllbgQpId=cqllbgQpId, cqllbgUdpPortRangeMax=cqllbgUdpPortRangeMax, cqlLbgRouteAdd=cqlLbgRouteAdd, cqllbgrouteEntry=cqllbgrouteEntry, cqlciscoQpLbgCompliance=cqlciscoQpLbgCompliance, cqlqpKeepAliveTime=cqlqpKeepAliveTime, cqllbgRouteIndex=cqllbgRouteIndex, cqlciscoLbgNotifsGroup=cqlciscoLbgNotifsGroup, cqlQpStateChange=cqlQpStateChange, cqlqpErmiErrpConnectRetry=cqlqpErmiErrpConnectRetry, cqlciscoQpObjectGroup=cqlciscoQpObjectGroup, cqlciscoQpLbgCompliance1=cqlciscoQpLbgCompliance1, cqlqpServerIpAddrType=cqlqpServerIpAddrType, ciscoQpLbgNotifs=ciscoQpLbgNotifs, ciscoQpLbgMIB=ciscoQpLbgMIB, cqlqpMgmtIpAddrType=cqlqpMgmtIpAddrType, cqlqpState=cqlqpState, cqlqpNumQams=cqlqpNumQams, cqlqpErmiRtspConnectRetry=cqlqpErmiRtspConnectRetry, cqlloadBalanceGroupEntry=cqlloadBalanceGroupEntry, cqllbgIndex=cqllbgIndex, cqllbgAllocatedBandwidth=cqllbgAllocatedBandwidth, cqlciscoQpNotifsGroup1=cqlciscoQpNotifsGroup1, cqlqpGqiResetInterval=cqlqpGqiResetInterval, ciscoQpLbgCompliances=ciscoQpLbgCompliances, cqlQamDelete=cqlQamDelete, cqlqpQamOversubscribedStatus=cqlqpQamOversubscribedStatus, cqlloadBalanceGroupTable=cqlloadBalanceGroupTable, cqllbgTotalBandwidth=cqllbgTotalBandwidth, cqllbgQamRsvBandwidth=cqllbgQamRsvBandwidth, cqlqpGqiMacAddr=cqlqpGqiMacAddr, cqlQamOverSubscribedEnable=cqlQamOverSubscribedEnable, cqlQamOverSubscribedAlert=cqlQamOverSubscribedAlert, cqlqpServerIpList=cqlqpServerIpList, cqlqpServerIp=cqlqpServerIp, cqlciscoQpLbgNotifsControlGroup1=cqlciscoQpLbgNotifsControlGroup1, cqlqpServerState=cqlqpServerState, cqlqpNumRoutes=cqlqpNumRoutes, cqlQamAdd=cqlQamAdd, cqlciscoLbgObjectGroup=cqlciscoLbgObjectGroup, cqllbgRsvBandwidth=cqllbgRsvBandwidth, cqlQpNotifyEnable=cqlQpNotifyEnable, cqlciscoLbgRouteObjectGroup=cqlciscoLbgRouteObjectGroup, cqllbgAvailableBandwidth=cqllbgAvailableBandwidth, cqlqpIndex=cqlqpIndex, cqlqpProtocol=cqlqpProtocol, cqllbgGqiIngressPort=cqllbgGqiIngressPort, ciscoQpLbgConform=ciscoQpLbgConform, cqlqpErmiErrpComponentName=cqlqpErmiErrpComponentName, cqlqpErmiErrpConnnectTime=cqlqpErmiErrpConnnectTime, cqllbgrouteTable=cqllbgrouteTable, cqllbgDstIpAddrType=cqllbgDstIpAddrType, cqlqamPartitionEntry=cqlqamPartitionEntry, PYSNMP_MODULE_ID=ciscoQpLbgMIB, cqlQamNotifyEnable=cqlQamNotifyEnable, ciscoQpLbgObjects=ciscoQpLbgObjects, cqlqamPartitionTable=cqlqamPartitionTable, cqlqpErmiRtspSessionTimeout=cqlqpErmiRtspSessionTimeout, cqllbgDstIpAddr=cqllbgDstIpAddr, cqllbgNumFlows=cqllbgNumFlows, cqlRouteNotifyEnable=cqlRouteNotifyEnable, cqlciscoQpLbgNotifsControlGroup=cqlciscoQpLbgNotifsControlGroup, cqlqpErmiErrpHoldTime=cqlqpErmiErrpHoldTime, cqllbgIpRsvBandwidth=cqllbgIpRsvBandwidth, cqlqpRouteDetails=cqlqpRouteDetails, ciscoQpLbgGroups=ciscoQpLbgGroups, cqlciscoQpObjectGroup1=cqlciscoQpObjectGroup1, cqlqpQamCarrrierList=cqlqpQamCarrrierList, cqlciscoQpNotifsGroup=cqlciscoQpNotifsGroup, cqllbgUdpPortRangeMin=cqllbgUdpPortRangeMin, cqlqpErmiRtspKeepAliveTime=cqlqpErmiRtspKeepAliveTime)
