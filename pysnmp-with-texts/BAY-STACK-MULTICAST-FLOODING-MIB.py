#
# PySNMP MIB module BAY-STACK-MULTICAST-FLOODING-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BAY-STACK-MULTICAST-FLOODING-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:35:50 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
VlanId, = mibBuilder.importSymbols("Q-BRIDGE-MIB", "VlanId")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
iso, Integer32, ObjectIdentity, Bits, ModuleIdentity, Unsigned32, IpAddress, MibIdentifier, TimeTicks, Gauge32, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "Integer32", "ObjectIdentity", "Bits", "ModuleIdentity", "Unsigned32", "IpAddress", "MibIdentifier", "TimeTicks", "Gauge32", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "Counter32")
DisplayString, TextualConvention, RowStatus, MacAddress, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "RowStatus", "MacAddress", "TruthValue")
bayStackMibs, = mibBuilder.importSymbols("SYNOPTICS-ROOT-MIB", "bayStackMibs")
bayStackMulticastFloodingMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 45, 5, 6))
bayStackMulticastFloodingMib.setRevisions(('2009-06-25 00:00', '2008-06-25 00:00', '2008-06-19 00:00', '2006-08-07 00:00', '2004-05-19 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: bayStackMulticastFloodingMib.setRevisionsDescriptions(('v5: Added per-vlan support.', 'v4: Added IMPLIED to index of bsmfAllowedInetAddressTable.', 'v3: Added support for multicast IP addresses.', 'v2: Cleaned up some descriptions.', 'v1: Initial version.',))
if mibBuilder.loadTexts: bayStackMulticastFloodingMib.setLastUpdated('200906250000Z')
if mibBuilder.loadTexts: bayStackMulticastFloodingMib.setOrganization('Nortel Networks')
if mibBuilder.loadTexts: bayStackMulticastFloodingMib.setContactInfo('Nortel Networks')
if mibBuilder.loadTexts: bayStackMulticastFloodingMib.setDescription("BayStack Multicast Flooding MIB Copyright 2003 Nortel Networks, Inc. All rights reserved. This Bay Networks SNMP Management Information Base Specification (Specification) embodies Bay Networks' confidential and proprietary intellectual property. Bay Networks retains all title and ownership in the Specification, including any revisions. This Specification is supplied 'AS IS,' and Bay Networks makes no warranty, either express or implied, as to the use, operation, condition, or performance of the Specification.")
bsmfNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 5, 6, 0))
bsmfObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 5, 6, 1))
bsmfMulticastFloodingEnabled = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 6, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsmfMulticastFloodingEnabled.setStatus('current')
if mibBuilder.loadTexts: bsmfMulticastFloodingEnabled.setDescription('This object indicates whether filtering of multicast MAC addresses to be flooded is enabled. If the value of this object is false(2), then multicast packets are always flooded to all ports. Otherwise, if the value is true(1), multicast packets that do not match an address in the bsmfAllowedAddressTable are flooded only to IGMP multicast router ports, and multicast packets that do match an address in the bsmfAllowedAddressTable are flooded to all ports.')
bsmfAllowedAddressTable = MibTable((1, 3, 6, 1, 4, 1, 45, 5, 6, 2), )
if mibBuilder.loadTexts: bsmfAllowedAddressTable.setStatus('current')
if mibBuilder.loadTexts: bsmfAllowedAddressTable.setDescription('This table is used to specify particular multicast MAC addresses that are allowed to be flooded to all ports.')
bsmfAllowedAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 5, 6, 2, 1), ).setIndexNames((0, "BAY-STACK-MULTICAST-FLOODING-MIB", "bsmfAllowedAddressMacAddr"))
if mibBuilder.loadTexts: bsmfAllowedAddressEntry.setStatus('current')
if mibBuilder.loadTexts: bsmfAllowedAddressEntry.setDescription('An entry in the bsmfAllowedAddressTable.')
bsmfAllowedAddressMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 6, 2, 1, 1), MacAddress())
if mibBuilder.loadTexts: bsmfAllowedAddressMacAddr.setStatus('current')
if mibBuilder.loadTexts: bsmfAllowedAddressMacAddr.setDescription('A MAC address that is allowed to flood all ports.')
bsmfAllowedAddressRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 6, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsmfAllowedAddressRowStatus.setStatus('current')
if mibBuilder.loadTexts: bsmfAllowedAddressRowStatus.setDescription('This object controls creation and deletion of rows in the table.')
bsmfAllowedInetAddressTable = MibTable((1, 3, 6, 1, 4, 1, 45, 5, 6, 3), )
if mibBuilder.loadTexts: bsmfAllowedInetAddressTable.setStatus('current')
if mibBuilder.loadTexts: bsmfAllowedInetAddressTable.setDescription('This table is used to specify particular multicast IP addresses that are allowed to be flooded to all ports.')
bsmfAllowedInetAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 5, 6, 3, 1), ).setIndexNames((0, "BAY-STACK-MULTICAST-FLOODING-MIB", "bsmfAllowedInetAddressType"), (1, "BAY-STACK-MULTICAST-FLOODING-MIB", "bsmfAllowedInetAddress"))
if mibBuilder.loadTexts: bsmfAllowedInetAddressEntry.setStatus('current')
if mibBuilder.loadTexts: bsmfAllowedInetAddressEntry.setDescription('An entry in the bsmfAllowedInetAddressTable.')
bsmfAllowedInetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 6, 3, 1, 1), InetAddressType())
if mibBuilder.loadTexts: bsmfAllowedInetAddressType.setStatus('current')
if mibBuilder.loadTexts: bsmfAllowedInetAddressType.setDescription('The type of address contained in the corresponding instance of bsmfAllowedInetAddress. Currently, only values of ipv4(1) and ipv6(2) are allowed.')
bsmfAllowedInetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 6, 3, 1, 2), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: bsmfAllowedInetAddress.setStatus('current')
if mibBuilder.loadTexts: bsmfAllowedInetAddress.setDescription('A multicast IP address that is allowed to flood all ports. Unicast and broadcast addresses are not allowed.')
bsmfAllowedInetAddressRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 6, 3, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsmfAllowedInetAddressRowStatus.setStatus('current')
if mibBuilder.loadTexts: bsmfAllowedInetAddressRowStatus.setDescription('This object controls creation and deletion of rows in the table.')
bsmfVlanTable = MibTable((1, 3, 6, 1, 4, 1, 45, 5, 6, 4), )
if mibBuilder.loadTexts: bsmfVlanTable.setStatus('current')
if mibBuilder.loadTexts: bsmfVlanTable.setDescription('This table is used to control per-VLAN whether multicast flooding is enabled.')
bsmfVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 5, 6, 4, 1), ).setIndexNames((0, "BAY-STACK-MULTICAST-FLOODING-MIB", "bsmfVlanId"))
if mibBuilder.loadTexts: bsmfVlanEntry.setStatus('current')
if mibBuilder.loadTexts: bsmfVlanEntry.setDescription('An entry in the bsmfVlanTable.')
bsmfVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 6, 4, 1, 1), VlanId())
if mibBuilder.loadTexts: bsmfVlanId.setStatus('current')
if mibBuilder.loadTexts: bsmfVlanId.setDescription('An existing VLAN.')
bsmfVlanMulticastFloodingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 6, 4, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsmfVlanMulticastFloodingEnabled.setStatus('current')
if mibBuilder.loadTexts: bsmfVlanMulticastFloodingEnabled.setDescription('This object indicates whether filtering of multicast MAC addresses to be flooded is enabled on a per-vlan basis. If the value of this object is false(2), then multicast packets are always flooded to all ports of a vlan. Otherwise, if the value is true(1), multicast packets that do not match an address in the bsmfVlanAllowedAddressTable are flooded only to IGMP multicast router ports, and multicast packets that do match an address in the bsmfAllowedAddressTable are flooded to all ports.')
bsmfVlanAllowedAddressTable = MibTable((1, 3, 6, 1, 4, 1, 45, 5, 6, 5), )
if mibBuilder.loadTexts: bsmfVlanAllowedAddressTable.setStatus('current')
if mibBuilder.loadTexts: bsmfVlanAllowedAddressTable.setDescription('This table is used to specify particular multicast MAC addresses that are allowed to be flooded to all ports on a per-vlan basis.')
bsmfVlanAllowedAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 5, 6, 5, 1), ).setIndexNames((0, "BAY-STACK-MULTICAST-FLOODING-MIB", "bsmfVlanAllowedAddressVlanId"), (0, "BAY-STACK-MULTICAST-FLOODING-MIB", "bsmfVlanAllowedAddressMacAddr"))
if mibBuilder.loadTexts: bsmfVlanAllowedAddressEntry.setStatus('current')
if mibBuilder.loadTexts: bsmfVlanAllowedAddressEntry.setDescription('An entry in the bsmfVlanAllowedAddressTable.')
bsmfVlanAllowedAddressVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 6, 5, 1, 1), VlanId())
if mibBuilder.loadTexts: bsmfVlanAllowedAddressVlanId.setStatus('current')
if mibBuilder.loadTexts: bsmfVlanAllowedAddressVlanId.setDescription('An existing VLAN ID.')
bsmfVlanAllowedAddressMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 6, 5, 1, 2), MacAddress())
if mibBuilder.loadTexts: bsmfVlanAllowedAddressMacAddr.setStatus('current')
if mibBuilder.loadTexts: bsmfVlanAllowedAddressMacAddr.setDescription('A MAC address that is allowed to flood all ports.')
bsmfVlanAllowedAddressRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 6, 5, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsmfVlanAllowedAddressRowStatus.setStatus('current')
if mibBuilder.loadTexts: bsmfVlanAllowedAddressRowStatus.setDescription('This object controls creation and deletion of rows in the table.')
bsmfVlanAllowedInetAddressTable = MibTable((1, 3, 6, 1, 4, 1, 45, 5, 6, 6), )
if mibBuilder.loadTexts: bsmfVlanAllowedInetAddressTable.setStatus('current')
if mibBuilder.loadTexts: bsmfVlanAllowedInetAddressTable.setDescription('This table is used to specify particular multicast IP addresses that are allowed to be flooded to all ports on a per-vlan basis.')
bsmfVlanAllowedInetAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 5, 6, 6, 1), ).setIndexNames((0, "BAY-STACK-MULTICAST-FLOODING-MIB", "bsmfVlanAllowedInetAddressVlanId"), (0, "BAY-STACK-MULTICAST-FLOODING-MIB", "bsmfVlanAllowedInetAddressType"), (1, "BAY-STACK-MULTICAST-FLOODING-MIB", "bsmfVlanAllowedInetAddress"))
if mibBuilder.loadTexts: bsmfVlanAllowedInetAddressEntry.setStatus('current')
if mibBuilder.loadTexts: bsmfVlanAllowedInetAddressEntry.setDescription('An entry in the bsmfVlanAllowedInetAddressTable.')
bsmfVlanAllowedInetAddressVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 6, 6, 1, 1), VlanId())
if mibBuilder.loadTexts: bsmfVlanAllowedInetAddressVlanId.setStatus('current')
if mibBuilder.loadTexts: bsmfVlanAllowedInetAddressVlanId.setDescription('An existing VLAN ID.')
bsmfVlanAllowedInetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 6, 6, 1, 2), InetAddressType())
if mibBuilder.loadTexts: bsmfVlanAllowedInetAddressType.setStatus('current')
if mibBuilder.loadTexts: bsmfVlanAllowedInetAddressType.setDescription('The type of address contained in the corresponding instance of bsmfVlanAllowedInetAddress. Currently, only values of ipv4(1) and ipv6(2) are allowed.')
bsmfVlanAllowedInetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 6, 6, 1, 3), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: bsmfVlanAllowedInetAddress.setStatus('current')
if mibBuilder.loadTexts: bsmfVlanAllowedInetAddress.setDescription('A multicast IP address that is allowed to flood all ports. Unicast and broadcast addresses are not allowed.')
bsmfVlanAllowedInetAddressRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 6, 6, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsmfVlanAllowedInetAddressRowStatus.setStatus('current')
if mibBuilder.loadTexts: bsmfVlanAllowedInetAddressRowStatus.setDescription('This object controls creation and deletion of rows in the table.')
mibBuilder.exportSymbols("BAY-STACK-MULTICAST-FLOODING-MIB", bsmfAllowedInetAddressRowStatus=bsmfAllowedInetAddressRowStatus, bsmfVlanTable=bsmfVlanTable, bsmfNotifications=bsmfNotifications, bsmfAllowedAddressRowStatus=bsmfAllowedAddressRowStatus, bsmfVlanAllowedInetAddress=bsmfVlanAllowedInetAddress, bsmfVlanAllowedAddressRowStatus=bsmfVlanAllowedAddressRowStatus, bsmfVlanEntry=bsmfVlanEntry, bsmfAllowedInetAddress=bsmfAllowedInetAddress, bsmfMulticastFloodingEnabled=bsmfMulticastFloodingEnabled, bsmfVlanAllowedAddressTable=bsmfVlanAllowedAddressTable, bsmfVlanAllowedInetAddressVlanId=bsmfVlanAllowedInetAddressVlanId, bsmfVlanAllowedInetAddressEntry=bsmfVlanAllowedInetAddressEntry, bsmfVlanMulticastFloodingEnabled=bsmfVlanMulticastFloodingEnabled, PYSNMP_MODULE_ID=bayStackMulticastFloodingMib, bsmfVlanAllowedAddressEntry=bsmfVlanAllowedAddressEntry, bsmfAllowedAddressEntry=bsmfAllowedAddressEntry, bsmfAllowedAddressMacAddr=bsmfAllowedAddressMacAddr, bsmfAllowedInetAddressEntry=bsmfAllowedInetAddressEntry, bsmfObjects=bsmfObjects, bayStackMulticastFloodingMib=bayStackMulticastFloodingMib, bsmfVlanId=bsmfVlanId, bsmfAllowedInetAddressTable=bsmfAllowedInetAddressTable, bsmfVlanAllowedInetAddressRowStatus=bsmfVlanAllowedInetAddressRowStatus, bsmfVlanAllowedAddressVlanId=bsmfVlanAllowedAddressVlanId, bsmfAllowedAddressTable=bsmfAllowedAddressTable, bsmfAllowedInetAddressType=bsmfAllowedInetAddressType, bsmfVlanAllowedInetAddressTable=bsmfVlanAllowedInetAddressTable, bsmfVlanAllowedInetAddressType=bsmfVlanAllowedInetAddressType, bsmfVlanAllowedAddressMacAddr=bsmfVlanAllowedAddressMacAddr)
