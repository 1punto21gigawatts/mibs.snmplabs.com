#
# PySNMP MIB module Wellfleet-E1-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Wellfleet-E1-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:40:04 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
NotificationType, Bits, Counter64, Opaque, IpAddress, MibIdentifier, mib_2, NotificationType, Integer32, ObjectIdentity, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, mgmt, TimeTicks, Unsigned32, ModuleIdentity, Counter32, enterprises = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Bits", "Counter64", "Opaque", "IpAddress", "MibIdentifier", "mib-2", "NotificationType", "Integer32", "ObjectIdentity", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "mgmt", "TimeTicks", "Unsigned32", "ModuleIdentity", "Counter32", "enterprises")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
wfLine, = mibBuilder.importSymbols("Wellfleet-COMMON-MIB", "wfLine")
wfE1Table = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 4, 11), )
if mibBuilder.loadTexts: wfE1Table.setStatus('mandatory')
if mibBuilder.loadTexts: wfE1Table.setDescription('E1 line record')
wfE1Entry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 4, 11, 1), ).setIndexNames((0, "Wellfleet-E1-MIB", "wfE1Slot"), (0, "Wellfleet-E1-MIB", "wfE1Connector"))
if mibBuilder.loadTexts: wfE1Entry.setStatus('mandatory')
if mibBuilder.loadTexts: wfE1Entry.setDescription('An entry in the E1 table')
wfE1Delete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfE1Delete.setStatus('mandatory')
if mibBuilder.loadTexts: wfE1Delete.setDescription('create/delete parameter, dflt = created')
wfE1Disable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfE1Disable.setStatus('mandatory')
if mibBuilder.loadTexts: wfE1Disable.setDescription('enable/disable parameter, dflt = enabled')
wfE1State = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4))).clone(namedValues=NamedValues(("up", 1), ("init", 3), ("notpresent", 4))).clone('notpresent')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfE1State.setStatus('mandatory')
if mibBuilder.loadTexts: wfE1State.setDescription('line driver state variable, Not Present, Init, Up')
wfE1Slot = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 11, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfE1Slot.setStatus('mandatory')
if mibBuilder.loadTexts: wfE1Slot.setDescription('instance ID Slot, filled in by driver')
wfE1Connector = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 11, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("one", 1), ("two", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfE1Connector.setStatus('mandatory')
if mibBuilder.loadTexts: wfE1Connector.setDescription('instance ID Connector, filled in by driver')
wfE1Madr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 11, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfE1Madr.setStatus('mandatory')
if mibBuilder.loadTexts: wfE1Madr.setDescription('Line mac address, filled in by driver')
wfE1HDB3Support = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 11, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfE1HDB3Support.setStatus('mandatory')
if mibBuilder.loadTexts: wfE1HDB3Support.setDescription('HDB3 Support - Enables or disables high density bipolar coding')
wfE1ClockMode = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 11, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4))).clone(namedValues=NamedValues(("internal", 1), ("slave", 2), ("manual", 4))).clone('internal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfE1ClockMode.setStatus('mandatory')
if mibBuilder.loadTexts: wfE1ClockMode.setDescription('Clock Mode - Specifies the source of the E1 transmit clock')
wfE1MiniDacs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 11, 1, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfE1MiniDacs.setStatus('mandatory')
if mibBuilder.loadTexts: wfE1MiniDacs.setDescription('MiniDacs Configuration - assigns each E1 channel to a specific function')
wfE1BipolarVios = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 11, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfE1BipolarVios.setStatus('mandatory')
if mibBuilder.loadTexts: wfE1BipolarVios.setDescription('Number of Bipolar Violations')
wfE1FrameErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 11, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfE1FrameErrs.setStatus('mandatory')
if mibBuilder.loadTexts: wfE1FrameErrs.setDescription('Number of Frame errors')
wfE1RcvRemAlms = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 11, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfE1RcvRemAlms.setStatus('mandatory')
if mibBuilder.loadTexts: wfE1RcvRemAlms.setDescription('Number of remote alarms received')
wfE1RcvMfmAlms = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 11, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfE1RcvMfmAlms.setStatus('mandatory')
if mibBuilder.loadTexts: wfE1RcvMfmAlms.setDescription('Number of Multiframe Alarms Received')
wfE1MfsErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 11, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfE1MfsErrs.setStatus('mandatory')
if mibBuilder.loadTexts: wfE1MfsErrs.setDescription('Number of instances of CAS Multiframe resync criteria met')
wfE1SyncLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 11, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfE1SyncLoss.setStatus('mandatory')
if mibBuilder.loadTexts: wfE1SyncLoss.setDescription('Number of instances of sync loss')
wfE1RcvSig1s = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 11, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfE1RcvSig1s.setStatus('mandatory')
if mibBuilder.loadTexts: wfE1RcvSig1s.setDescription("Number of instances of receive signalling all 1's")
wfE1RcvUnfrm1s = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 11, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfE1RcvUnfrm1s.setStatus('mandatory')
if mibBuilder.loadTexts: wfE1RcvUnfrm1s.setDescription("Number of instances of Receive unframed all 1's")
wfE1LineType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 11, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("e1", 1), ("e1crc4", 2))).clone('e1')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfE1LineType.setStatus('mandatory')
if mibBuilder.loadTexts: wfE1LineType.setDescription('Enable/Disable CRC-4')
wfE1CRC4Errors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 11, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfE1CRC4Errors.setStatus('mandatory')
if mibBuilder.loadTexts: wfE1CRC4Errors.setDescription('Count of CRC-4 Errors')
mibBuilder.exportSymbols("Wellfleet-E1-MIB", wfE1LineType=wfE1LineType, wfE1Entry=wfE1Entry, wfE1RcvSig1s=wfE1RcvSig1s, wfE1Connector=wfE1Connector, wfE1FrameErrs=wfE1FrameErrs, wfE1BipolarVios=wfE1BipolarVios, wfE1RcvMfmAlms=wfE1RcvMfmAlms, wfE1Slot=wfE1Slot, wfE1SyncLoss=wfE1SyncLoss, wfE1Delete=wfE1Delete, wfE1MfsErrs=wfE1MfsErrs, wfE1MiniDacs=wfE1MiniDacs, wfE1CRC4Errors=wfE1CRC4Errors, wfE1Madr=wfE1Madr, wfE1Disable=wfE1Disable, wfE1RcvRemAlms=wfE1RcvRemAlms, wfE1Table=wfE1Table, wfE1RcvUnfrm1s=wfE1RcvUnfrm1s, wfE1HDB3Support=wfE1HDB3Support, wfE1State=wfE1State, wfE1ClockMode=wfE1ClockMode)
