#
# PySNMP MIB module Nortel-MsCarrier-MscPassport-DcmeMIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Nortel-MsCarrier-MscPassport-DcmeMIB
# Produced by pysmi-0.3.4 at Wed May  1 14:29:40 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
DisplayString, RowStatus, Unsigned32, Counter32, Gauge32, StorageType, RowPointer, Integer32 = mibBuilder.importSymbols("Nortel-MsCarrier-MscPassport-StandardTextualConventionsMIB", "DisplayString", "RowStatus", "Unsigned32", "Counter32", "Gauge32", "StorageType", "RowPointer", "Integer32")
FixedPoint1, EnterpriseDateAndTime, DigitString, AsciiString, Link, NonReplicated, Hex, PassportCounter64 = mibBuilder.importSymbols("Nortel-MsCarrier-MscPassport-TextualConventionsMIB", "FixedPoint1", "EnterpriseDateAndTime", "DigitString", "AsciiString", "Link", "NonReplicated", "Hex", "PassportCounter64")
mscComponents, mscPassportMIBs = mibBuilder.importSymbols("Nortel-MsCarrier-MscPassport-UsefulDefinitionsMIB", "mscComponents", "mscPassportMIBs")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ObjectIdentity, Unsigned32, Counter64, ModuleIdentity, Counter32, iso, Gauge32, MibIdentifier, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, TimeTicks, Integer32, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "Unsigned32", "Counter64", "ModuleIdentity", "Counter32", "iso", "Gauge32", "MibIdentifier", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "TimeTicks", "Integer32", "NotificationType")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
dcmeMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 134))
mscDcme = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 129))
mscDcmeRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 129, 1), )
if mibBuilder.loadTexts: mscDcmeRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscDcmeRowStatusTable.setDescription('This entry controls the addition and deletion of mscDcme components.')
mscDcmeRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 129, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDcmeIndex"))
if mibBuilder.loadTexts: mscDcmeRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscDcmeRowStatusEntry.setDescription('A single entry in the table represents a single mscDcme component.')
mscDcmeRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 129, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscDcmeRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscDcmeRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscDcme components. These components can be added and deleted.')
mscDcmeComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 129, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDcmeComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscDcmeComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscDcmeStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 129, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDcmeStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscDcmeStorageType.setDescription('This variable represents the storage type value for the mscDcme tables.')
mscDcmeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 129, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)))
if mibBuilder.loadTexts: mscDcmeIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscDcmeIndex.setDescription('This variable represents the index for the mscDcme tables.')
mscDcmeProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 129, 10), )
if mibBuilder.loadTexts: mscDcmeProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscDcmeProvTable.setDescription('This group contains the provisionable attributes of a Dcme component.')
mscDcmeProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 129, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDcmeIndex"))
if mibBuilder.loadTexts: mscDcmeProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscDcmeProvEntry.setDescription('An entry in the mscDcmeProvTable.')
mscDcmeCommentText = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 129, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 40)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscDcmeCommentText.setStatus('mandatory')
if mibBuilder.loadTexts: mscDcmeCommentText.setDescription('Use of this attribute is at the discretion of the system administrator. Typically, it specifies the name of the customer that is using this Dcme.')
mscDcmePreestablishedConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 129, 10, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 30)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscDcmePreestablishedConnections.setStatus('mandatory')
if mibBuilder.loadTexts: mscDcmePreestablishedConnections.setDescription('This attribute specifies the number of Logical Connections (LC) preestablished between each DcmeLink associated with this Dcme and its remote peer, that are established beyond those that are required to carry established connections. Those are the standby LCs to be used for the subsequent user speech or audio 3.1 kHz calls. This attribute should be set to the number of speech and audio 3.1 kHz calls expected in a typical burst of calls received from the ISC on one DcmeLink.')
mscDcmeTrmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 129, 10, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 30)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscDcmeTrmThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: mscDcmeTrmThreshold.setDescription("This attribute is used to determine when the DcmeLink may be unable to handle incoming calls from the ISC. If the Dcme fails to replenish the number of preestablished connections the 'No trunk(s) available for 3.1 kHz audio or speech' TRM signal is sent to the ISC.")
mscDcmeTrmSignalChangeInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 129, 10, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(10, 300)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscDcmeTrmSignalChangeInterval.setStatus('mandatory')
if mibBuilder.loadTexts: mscDcmeTrmSignalChangeInterval.setDescription("This attribute specifies a minimum time interval between TRM signal change from 'No trunk(s) available for 3.1 kHz audio or speech' or 'No 64 kbit/s capacity available' to 'DCME normal' signal.")
mscDcmeSpeechAlarmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 129, 10, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscDcmeSpeechAlarmThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: mscDcmeSpeechAlarmThreshold.setDescription('This attribute specifies how many normal speech calls can be rejected by one dcmeLink within the alarmTimeInterval time before a SET alarm is generated. This alarm is cleared when the number of rejected speech calls is less than speechAlarmThreshold in a subsequent interval. If the value is 0 the rejected speech calls are not monitored.')
mscDcmeAudio3kHzAlarmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 129, 10, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscDcmeAudio3kHzAlarmThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: mscDcmeAudio3kHzAlarmThreshold.setDescription('This attribute specifies how many audio 3.1 kHz calls can be rejected by one dcmeLink within the alarmTimeInterval time before a SET alarm is generated. This alarm is cleared when the number of rejected audio 3.1 kHz calls is less than audio3kHzAlarmThreshold in a subsequent interval. If the value is 0 the rejected audio 3.1 kHz calls are not monitored.')
mscDcmeUnrestricted64kAlarmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 129, 10, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscDcmeUnrestricted64kAlarmThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: mscDcmeUnrestricted64kAlarmThreshold.setDescription('This attribute specifies how many unrestricted 64 kbit/s calls can be rejected by one dcmeLink within the alarmTimeInterval time before a SET alarm is generated. This alarm is cleared when the number of rejected unrestricted 64 kbit/s calls is less than unrestricted64kAlarmThreshold in a subsequent interval. If the value is 0 the rejected unrestricted 64 kbit/s calls are not monitored.')
mscDcmeAlarmTimeInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 129, 10, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 120)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscDcmeAlarmTimeInterval.setStatus('mandatory')
if mibBuilder.loadTexts: mscDcmeAlarmTimeInterval.setDescription('This attribute specifies the time interval within which the rejected speech calls, audio 3.1 kHz calls, and unrestricted 64 kbit/s calls are monitored. It is used in the conjunction with the speechAlarmThreshold, audio3kHzAlarmThreshold, and unrestricted64kAlarmThreshold attributes.')
mscDcmeMaxUnrestricted64kCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 129, 10, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 420)).clone(420)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscDcmeMaxUnrestricted64kCalls.setStatus('mandatory')
if mibBuilder.loadTexts: mscDcmeMaxUnrestricted64kCalls.setDescription('This attribute specifies the maximum number of simultaneous dynamic unrestricted 64 kbit/s calls that can be established. A value of 0 means that no dynamic unrestricted 64 kbit/s calls can be established.')
mscDcmeStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 129, 11), )
if mibBuilder.loadTexts: mscDcmeStateTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscDcmeStateTable.setDescription('This group contains the three OSI State attributes. The descriptions generically indicate what each state attribute implies about the component. Note that not all the values and state combinations described here are supported by every component which uses this group. For component-specific information and the valid state combinations, refer to NTP 241-7001-150, Passport Operations and Maintenance Guide.')
mscDcmeStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 129, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDcmeIndex"))
if mibBuilder.loadTexts: mscDcmeStateEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscDcmeStateEntry.setDescription('An entry in the mscDcmeStateTable.')
mscDcmeAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 129, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDcmeAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: mscDcmeAdminState.setDescription('This attribute indicates the OSI Administrative State of the component. The value locked indicates that the component is administratively prohibited from providing services for its users. A Lock or Lock - force command has been previously issued for this component. When the value is locked, the value of usageState must be idle. The value shuttingDown indicates that the component is administratively permitted to provide service to its existing users only. A Lock command was issued against the component and it is in the process of shutting down. The value unlocked indicates that the component is administratively permitted to provide services for its users. To enter this state, issue an Unlock command to this component.')
mscDcmeOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 129, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDcmeOperationalState.setStatus('mandatory')
if mibBuilder.loadTexts: mscDcmeOperationalState.setDescription('This attribute indicates the OSI Operational State of the component. The value enabled indicates that the component is available for operation. Note that if adminState is locked, it would still not be providing service. The value disabled indicates that the component is not available for operation. For example, something is wrong with the component itself, or with another component on which this one depends. If the value is disabled, the usageState must be idle.')
mscDcmeUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 129, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDcmeUsageState.setStatus('mandatory')
if mibBuilder.loadTexts: mscDcmeUsageState.setDescription('This attribute indicates the OSI Usage State of the component. The value idle indicates that the component is not currently in use. The value active indicates that the component is in use and has spare capacity to provide for additional users. The value busy indicates that the component is in use and has no spare operating capacity for additional users at this time.')
mscDcmeStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 129, 13), )
if mibBuilder.loadTexts: mscDcmeStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscDcmeStatsTable.setDescription('This group contains the statistics maintained by this Dcme.')
mscDcmeStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 129, 13, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDcmeIndex"))
if mibBuilder.loadTexts: mscDcmeStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscDcmeStatsEntry.setDescription('An entry in the mscDcmeStatsTable.')
mscDcmeTrm64kNotAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 129, 13, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDcmeTrm64kNotAvailable.setStatus('mandatory')
if mibBuilder.loadTexts: mscDcmeTrm64kNotAvailable.setDescription("This attribute counts the total number of times the TRM signal was changed to the 'No 64 kbit/s capacity available' signal. This counter wraps to zero when it exceeds its maximum.")
mscDcmeTrmSpeechNotAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 129, 13, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDcmeTrmSpeechNotAvailable.setStatus('mandatory')
if mibBuilder.loadTexts: mscDcmeTrmSpeechNotAvailable.setDescription("This attribute counts the total number of times the TRM signal was changed to the 'No trunk(s) available for 3.1 kHz audio or speech' signal. This counter wraps to zero when it exceeds its maximum.")
mscDcmeDLinksTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 129, 419), )
if mibBuilder.loadTexts: mscDcmeDLinksTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscDcmeDLinksTable.setDescription('This attribute specifies all of the DcmeLinks which are associated with this Dcme. There can be up to 14 DcmeLinks associated with one Dcme.')
mscDcmeDLinksEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 129, 419, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDcmeIndex"), (0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDcmeDLinksValue"))
if mibBuilder.loadTexts: mscDcmeDLinksEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscDcmeDLinksEntry.setDescription('An entry in the mscDcmeDLinksTable.')
mscDcmeDLinksValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 129, 419, 1, 1), Link()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscDcmeDLinksValue.setStatus('mandatory')
if mibBuilder.loadTexts: mscDcmeDLinksValue.setDescription('This variable represents both the value and the index for the mscDcmeDLinksTable.')
mscDcmeDLinksRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 129, 419, 1, 2), RowStatus()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: mscDcmeDLinksRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscDcmeDLinksRowStatus.setDescription('This variable is used to control the addition and deletion of individual values of the mscDcmeDLinksTable.')
mscDcmeActiveDcmeLinksTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 129, 420), )
if mibBuilder.loadTexts: mscDcmeActiveDcmeLinksTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscDcmeActiveDcmeLinksTable.setDescription('This attribute indicates all of the DcmeLink components that are currently active and have registered with this Dcme.')
mscDcmeActiveDcmeLinksEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 129, 420, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDcmeIndex"), (0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDcmeActiveDcmeLinksValue"))
if mibBuilder.loadTexts: mscDcmeActiveDcmeLinksEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscDcmeActiveDcmeLinksEntry.setDescription('An entry in the mscDcmeActiveDcmeLinksTable.')
mscDcmeActiveDcmeLinksValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 129, 420, 1, 1), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDcmeActiveDcmeLinksValue.setStatus('mandatory')
if mibBuilder.loadTexts: mscDcmeActiveDcmeLinksValue.setDescription('This variable represents both the value and the index for the mscDcmeActiveDcmeLinksTable.')
mscDcmeProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 129, 2))
mscDcmeProfileRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 129, 2, 1), )
if mibBuilder.loadTexts: mscDcmeProfileRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscDcmeProfileRowStatusTable.setDescription('This entry controls the addition and deletion of mscDcmeProfile components.')
mscDcmeProfileRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 129, 2, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDcmeIndex"), (0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDcmeProfileIndex"))
if mibBuilder.loadTexts: mscDcmeProfileRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscDcmeProfileRowStatusEntry.setDescription('A single entry in the table represents a single mscDcmeProfile component.')
mscDcmeProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 129, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDcmeProfileRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscDcmeProfileRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscDcmeProfile components. These components cannot be added nor deleted.')
mscDcmeProfileComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 129, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDcmeProfileComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscDcmeProfileComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscDcmeProfileStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 129, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDcmeProfileStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscDcmeProfileStorageType.setDescription('This variable represents the storage type value for the mscDcmeProfile tables.')
mscDcmeProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 129, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscDcmeProfileIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscDcmeProfileIndex.setDescription('This variable represents the index for the mscDcmeProfile tables.')
mscDcmeProfileLCOpsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 129, 2, 10), )
if mibBuilder.loadTexts: mscDcmeProfileLCOpsTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscDcmeProfileLCOpsTable.setDescription('This group contains attributes used in setting up Switched Logical Connections (SLC) over the network using the Path Oriented Routing System (PORS) between two peer DcmeLink components.')
mscDcmeProfileLCOpsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 129, 2, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDcmeIndex"), (0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDcmeProfileIndex"))
if mibBuilder.loadTexts: mscDcmeProfileLCOpsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscDcmeProfileLCOpsEntry.setDescription('An entry in the mscDcmeProfileLCOpsTable.')
mscDcmeProfileSetupPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 129, 2, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscDcmeProfileSetupPriority.setStatus('mandatory')
if mibBuilder.loadTexts: mscDcmeProfileSetupPriority.setDescription("This attribute specifies the priority at which a path is established. Zero is the highest priority and four is the lowest. When PORS establishes a path through the network, it uses the setupPriority attribute to determine its potential for bumping established paths to acquire their bandwidth. The holdingPriority, a complementary attribute of this attribute, indicates the priority a path maintains once it is established. A new path can bump an existing path if the new path's setupPriority is higher (numerically less) than the existing path's holdingPriority.")
mscDcmeProfileHoldingPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 129, 2, 10, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscDcmeProfileHoldingPriority.setStatus('mandatory')
if mibBuilder.loadTexts: mscDcmeProfileHoldingPriority.setDescription("This attribute specifies the priority that a path holds once it is established. Zero is the highest priority and four is the lowest. A path's holdingPriority determines its likelihood of being bumped by a new path to acquire its bandwidth. The setupPriority, a complementary attribute, indicates the priority of a path at establishment time. A new path can bump an existing path if the new path's setupPriority is higher (numerically less) than the existing path's holdingPriority.")
mscDcmeProfileBumpPreference = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 129, 2, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("bumpWhenNecessary", 0), ("bumpToObtainBestRoute", 1))).clone('bumpWhenNecessary')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscDcmeProfileBumpPreference.setStatus('mandatory')
if mibBuilder.loadTexts: mscDcmeProfileBumpPreference.setDescription('This attribute specifies when bumping occurs in the route selection process. A connection with higher (numerically less) setupPriority may bump a connection with lower (numerically higher) setupPriority in order to acquire its bandwidth and be established. If bumpPreference is bumpWhenNecessary, bumping occurs only when it is necessary. That is, a connection will bump another connection only if there is no other way for the connection to be established. If bumpPreference is bumpToObtainBestRoute, bumping occurs in order to use the best available route it may have.')
mscDcmeProfileRequiredTrafficType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 129, 2, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("voice", 0), ("data", 1), ("video", 2), ("trafficType1", 3), ("trafficType2", 4), ("trafficType3", 5), ("trafficType4", 6), ("trafficType5", 7))).clone('voice')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscDcmeProfileRequiredTrafficType.setStatus('mandatory')
if mibBuilder.loadTexts: mscDcmeProfileRequiredTrafficType.setDescription('This attribute specifies the type of traffic transmitted over the path. There are eight possible traffic types, and the path can transmit only one of them. The originating end of the connection determines the type. The voice, data and video traffic types are defined, and five other arbitrary traffic types can be defined by the network administration. This attribute is used in the route selection process to restrict the route to trunks that support this traffic type. The supportedTrafficType trunk attribute lists all the types of traffic allowed on the trunk. For example, if requiredTrafficType is specified as trafficType1, then only trunks that include trafficType1 in supportedTrafficType will be candidates for this connection.')
mscDcmeProfilePermittedTrunkTypes = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 129, 2, 10, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1).clone(hexValue="f8")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscDcmeProfilePermittedTrunkTypes.setStatus('mandatory')
if mibBuilder.loadTexts: mscDcmeProfilePermittedTrunkTypes.setDescription("This attribute specifies up to eight types of trunks that can be used on the route. The terrestrial and satellite trunk types are defined, leaving six remaining arbitrary types that can be defined by the network administration. The trunk's type is indicated in the trunkType attribute of the Trunk component. When selecting a route, PORS chooses only trunks whose trunkTypes are in the permittedTrunkTypes for the path. Description of bits: terrestrial(0) satellite(1) trunkType1(2) trunkType2(3) trunkType3(4) trunkType4(5) trunkType5(6) trunkType6(7)")
mscDcmeProfileRequiredSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 129, 2, 10, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscDcmeProfileRequiredSecurity.setStatus('mandatory')
if mibBuilder.loadTexts: mscDcmeProfileRequiredSecurity.setDescription("This attribute specifies the required minimum level of security of the trunks on the route. Zero represents the most secure and seven represents the least secure. The trunk's security is indicated by the trunkSecurity attribute of the Trunk component, and has values identical in range and meaning to the requiredSecurity attribute. PORS ensures that any route selected does not contain a trunk whose trunkSecurity attribute is numerically greater than the requiredSecurity.")
mscDcmeProfileRequiredCustomerParm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 129, 2, 10, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscDcmeProfileRequiredCustomerParm.setStatus('mandatory')
if mibBuilder.loadTexts: mscDcmeProfileRequiredCustomerParm.setDescription('This attribute specifies the allowed customer defined parameter of the trunks on the route. The value of requiredCustomerParm ranges from 0 to 7. The meaning of each value is specific to a particular network, thus allowing them to customize the use of their trunks. A complementary trunk attribute, customerParameter, also has a value from zero to seven. The route selection process does not consider trunks whose customerParameter is greater than the requiredCustomerParameter of the path.')
mscDcmeProfilePathAttributeToMinimize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 129, 2, 10, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("cost", 0), ("delay", 1))).clone('cost')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscDcmeProfilePathAttributeToMinimize.setStatus('mandatory')
if mibBuilder.loadTexts: mscDcmeProfilePathAttributeToMinimize.setDescription('This attribute specifies whether a route is selected on the basis of minimizing the cost or the delay. Each trunk has a cost and a delay metric associated with it. The cost of a selected route is the sum of the trunk cost metrics for all trunks included in the route. The delay of a selected route is the sum of the trunk delay metrics for all trunks included in the route.')
mscDcmeProfileMaximumAcceptableCost = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 129, 2, 10, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(1280)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscDcmeProfileMaximumAcceptableCost.setStatus('mandatory')
if mibBuilder.loadTexts: mscDcmeProfileMaximumAcceptableCost.setDescription('This attribute specifies an upper bound on the cost metric of a route, which is the sum of the cost metrics of all trunks on the route. The cost metric is the trunkCost attribute of the Trunk component. If for any trunk the trunkCost is larger than the maximumAcceptableCost, then that trunk is not considered during the route selection. While a shortest route is being selected, the route cost is being compared with the maximumAcceptableCost attribute, and this is done for any minimization criterion. No route is selected if the cost metric of the shortest route is larger than the maximumAcceptableCost.')
mscDcmeProfileMaximumAcceptableDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 129, 2, 10, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000)).clone(100000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscDcmeProfileMaximumAcceptableDelay.setStatus('mandatory')
if mibBuilder.loadTexts: mscDcmeProfileMaximumAcceptableDelay.setDescription("This attribute specifies an upper bound on the delay of a route, which is the sum of the delays of all trunks on the route. It should be provisioned with a reasonable maximum acceptable delay for the end to end one way delay of a 512-byte packet. During its staging, a trunk measures a measuredRoundTripDelay. This delay is divided by two and truncated to an integer number of milliseconds to provide a one way delay which is used to populate the delay in this trunk object in the topological database. The value includes emission, propagation, and queuing delays. A 512-byte packet is used to perform the measurement. If for any trunk the half of the trunk's measuredRoundTripDelay is larger than the maximumAcceptableDelay, then that trunk is not considered during the route selection. While a shortest route is being selected, the route delay is being compared with the maximumAcceptableDelay attribute, and this is done for any minimization criterion. No route is selected if the delay metric of the shortest route is larger than the maximumAcceptableDelay.")
mscDcmeProfileEmissionPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 129, 2, 10, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscDcmeProfileEmissionPriority.setStatus('mandatory')
if mibBuilder.loadTexts: mscDcmeProfileEmissionPriority.setDescription('This attribute specifies the urgency with which packets on the path are emitted by the trunks on the route. An emissionPriority of 0 indicates the highest emission priority, while 2 indicates the lowest emission priority. Packets with a higher emissionPriority (or numerically less) are serviced and sent out before the packets with a lower emissionPriority (or numerically higher).')
mscDcmeProfileDiscardPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 129, 2, 10, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 3)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscDcmeProfileDiscardPriority.setStatus('mandatory')
if mibBuilder.loadTexts: mscDcmeProfileDiscardPriority.setDescription('This attribute specifies the importance of the packets on the path. A discardPriority of 1 is used for paths carrying the most important traffic, and three is used for paths carrying the least important traffic. Packets with lower discardPriority(numerically lower) are discarded after packets with a higher discardPriority(numerically higher).')
mscDcmeProfilePathFailureAction = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 129, 2, 10, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disconnectConnection", 0), ("reRoutePath", 1))).clone('reRoutePath')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscDcmeProfilePathFailureAction.setStatus('mandatory')
if mibBuilder.loadTexts: mscDcmeProfilePathFailureAction.setDescription('This attribute specifies whether the application can tolerate momentary interruption of a path while a new path is selected. If pathFailureAction is disconnectConnection, the application is informed as soon as possible about a failure by disconnection. If pathFailureAction is reRoutePath, the path may attempt an immediate reroute, provided the failure is a recoverable failure. If rerouting fails, the application is informed of the failure. If pathFailureAction is reRoutePath, the LCo may wait up to 30 seconds before informing the service of complete disconnection in order to allow both ends to attempt to reconnect. Note that if PLC components are different at both ends only the calling end is allowed to reconnect. All pathTypes respect this attribute. Also on a manualPath with both ends provisioned with independent paths (at least with respect to the failure) this option has the desired effect that the path is rerouted without complete disconnection at both ends.')
mscDcmeProfileOptimization = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 129, 2, 10, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscDcmeProfileOptimization.setStatus('mandatory')
if mibBuilder.loadTexts: mscDcmeProfileOptimization.setDescription('This attribute specifies whether this connection should attempt to optimize its path when requested by the Rtg Pors component. Every path is optimal when it is established, but as network traffic patterns and configurations change this path may no longer be optimal. The PORS connection manager on a module requests circuits to optimize at the optimizationInterval.')
mscDcmeProfileFrOpsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 129, 2, 11), )
if mibBuilder.loadTexts: mscDcmeProfileFrOpsTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscDcmeProfileFrOpsTable.setDescription('This group contains attributes which define how audio data will be carried across the Passport network.')
mscDcmeProfileFrOpsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 129, 2, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDcmeIndex"), (0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDcmeProfileIndex"))
if mibBuilder.loadTexts: mscDcmeProfileFrOpsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscDcmeProfileFrOpsEntry.setDescription('An entry in the mscDcmeProfileFrOpsTable.')
mscDcmeProfileVoiceEncoding = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 129, 2, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("g711G726", 0), ("g728at16", 1), ("g729at8", 2))).clone('g728at16')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscDcmeProfileVoiceEncoding.setStatus('mandatory')
if mibBuilder.loadTexts: mscDcmeProfileVoiceEncoding.setDescription('This attribute specifies the encoding of voice traffic. A voiceEncoding setting of g711G726 specifies that either pulse code modulation (PCM) defined by ITU-T G.711 or adaptive differential pulse code modulation (ADPCM) defined by ITU-T G.726 is used to encode voice traffic. The actual encoding performed depends on congestion in the network and the settings of minVoiceG711G726Rate and maxVoiceG711G726Rate. If voiceEncoding is g711G726, the bit rate of voice traffic can change during a call due to congestion in the network. In this case, the minimum and maximum rates that can occur during a call are specified by minVoiceG711G726Rate and maxVoiceG711G726Rate respectively. If voiceEncoding is g711G726, minVoiceG711G726Rate is 64 and maxVoiceG711G726Rate is 64, G.711 (PCM) encoding is always performed on voice traffic on this channel and all voice traffic is carried uncompressed at 64 kbit/s. A voiceEncoding setting of g728at16 specifies that the Low Delay Coded Excited Linear Predictive Coder (LD-CELP) algorithm defined by ITU-T G.728 is always performed on voice traffic. If voiceEncoding is g728at16, the bit rate of all voice traffic is fixed at 16 kbit/s. The minVoiceG711G726Rate and maxVoiceG711G726Rate attributes do not apply if voiceEncoding is g728at16. A voiceEncoding setting of g729at8 indicates that the Conjugated Structure Algebraic Code Excited Linear Predictive Coder (CS- ACELP) algorithm defined by ITU-T G.729 is always performed on voice traffic. If voiceEncoding is g729at8, the bit rate of all voice traffic is fixed at 8 kbit/s. The minVoiceG711G726Rate and maxVoiceG711G726Rate attributes do not apply if voiceEncoding is g729at8.')
mscDcmeProfileMaxVoiceBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 129, 2, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("n64", 0), ("n32", 1), ("n24", 2))).clone('n64')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscDcmeProfileMaxVoiceBitRate.setStatus('mandatory')
if mibBuilder.loadTexts: mscDcmeProfileMaxVoiceBitRate.setDescription('This attribute specifies the maximum possible bit rate (minimum possible compression rate) during a voice call on this channel when voiceEncoding is g711G726. It applies only to voice traffic, not modem or fax traffic. It also applies only if voiceEncoding is g711G726. If voiceEncoding is g711G726, the bit rate of voice traffic can change during a call due to congestion in the network. In this case, the minimum and maximum rates that can occur during a call are specified by minVoiceG711G726Rate and maxVoiceG711G726Rate respectively. If voiceEncoding is g711G726, minVoiceG711G726Rate is 64 and maxVoiceG711G726Rate is 64, the G.711 (PCM) algorithm is always performed on voice traffic on this channel and all voice traffic is carried uncompressed at 64 kbit/s.')
mscDcmeProfileMinVoiceBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 129, 2, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("n64", 0), ("n32", 1), ("n24", 2))).clone('n64')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscDcmeProfileMinVoiceBitRate.setStatus('mandatory')
if mibBuilder.loadTexts: mscDcmeProfileMinVoiceBitRate.setDescription('This attribute specifies the minimum possible bit rate (maximum possible compression rate) during a voice call on this channel when voiceEncoding is g711G726. It applies only to voice traffic, not modem or fax traffic. It also applies only if voiceEncoding is g711G726. If voiceEncoding is g711G726, the bit rate of voice traffic can change during a call due to congestion in the network. In this case, the minimum and maximum rates that can occur during a call are specified by minVoiceG711G726Rate and maxVoiceG711G726Rate respectively. If voiceEncoding is g711G726, minVoiceG711G726Rate is 64 and maxVoiceG711G726Rate is 64, the G.711 (PCM) algorithm is always performed on voice traffic on this channel and all voice traffic is carried uncompressed at 64 kbit/s.')
mscDcmeProfileVoiceTrafficOptimization = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 129, 2, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("bandwidth", 0), ("delay", 1))).clone('bandwidth')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscDcmeProfileVoiceTrafficOptimization.setStatus('mandatory')
if mibBuilder.loadTexts: mscDcmeProfileVoiceTrafficOptimization.setDescription('This attribute specifies how to optimize voice traffic. If voiceTrafficOptimization is bandwidth, voice traffic is optimized to preserve bandwidth. If voiceTrafficOptimization is delay, voice traffic is optimized to minimize delay.')
mscDcmeProfileSilenceSuppression = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 129, 2, 11, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("off", 0), ("on", 1), ("congested", 2), ("slow", 3), ("slowAndCongested", 4))).clone('on')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscDcmeProfileSilenceSuppression.setStatus('mandatory')
if mibBuilder.loadTexts: mscDcmeProfileSilenceSuppression.setDescription('This attribute specifies when silence suppression is performed. It applies to both voice and modem calls. If silenceSuppression is off, silence suppression is never performed. If silenceSuppression is on, silence suppression is always performed. If silenceSuppression is congested, silence suppression is performed only when the network is congested. If silenceSuppression is slow, silence suppression begins after 10 to 20 seconds without any detected speech or modem traffic. If silenceSuppression is slowAndCongested, both the slow and congested options are applied.')
mscDcmeProfileSilenceSuppressionFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 129, 2, 11, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 60)).clone(40)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscDcmeProfileSilenceSuppressionFactor.setStatus('mandatory')
if mibBuilder.loadTexts: mscDcmeProfileSilenceSuppressionFactor.setDescription('This attribute specifies the expected savings (percent reduction) in required bandwidth if silence suppression is used. If silence suppression is used, the bandwidth required for the connection will be lower than if silence suppression is not used. However, the routing system will not be aware of the unused bandwidth unless that bandwidth is specified by this attribute. If the value specified for the expected savings is too low, then some bandwidth made available by the use of silence suppression will be wasted. If the value specified for the expected savings is too high, then some connections may fail to set up because the routing system will over-calculate the amount of bandwidth available. The effectiveness of silence suppression can be influenced by language related speech patterns.')
mscDcmeProfileEchoCancellation = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 129, 2, 11, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscDcmeProfileEchoCancellation.setStatus('mandatory')
if mibBuilder.loadTexts: mscDcmeProfileEchoCancellation.setDescription('This attribute specifies whether echo cancellation is performed on calls using this profile as specified by ITU-T G.165. It applies mainly to voice traffic. Echo cancellation is usually (but not always) disabled during modem and fax calls. If echoCancellation is on, the traffic that is echo cancelled is determined by ITU-T G.165.')
mscDcmeProfileModemFaxEncoding = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 129, 2, 11, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("g711G726", 0), ("faxRelayOnly", 1), ("faxRelayG711G726", 2), ("useVoiceEncoding", 3))).clone('faxRelayOnly')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscDcmeProfileModemFaxEncoding.setStatus('mandatory')
if mibBuilder.loadTexts: mscDcmeProfileModemFaxEncoding.setDescription("This attribute specifies how modem and fax traffic is encoded. Modem and fax traffic are identified by an inband 2100 Hz tone. Prior to the detection of a 2100 Hz tone, all traffic is handled according to voiceEncoding. If modemFaxEncoding is useVoiceEncoding, 2100 Hz tones are not detected on the channel. In this case, the channel does not differentiate between modem and fax traffic and voice traffic. All traffic is handled according to voiceEncoding. If voiceEncoding is g728at16 or g729at8, modem and fax calls will not work. If a 2100 Hz tone is detected and modemFaxEncoding is g711G726, all subsequent traffic during a call is encoded using pulse code modulation (PCM) defined by ITU-T G.711 or adaptive differential pulse code modulation (ADPCM) defined by ITU-T G.726. When the 2100 Hz tone is detected, traffic is initially encoded at the rate specified by maxModemFaxG711G726Rate. For the duration of the call, the bit rate can change due to network congestion. In this case, the minimum and maximum rates that can occur during the call are specified by minModemFaxG711G726Rate and maxModemFaxG711G726Rate respectively. If a 2100 Hz tone is detected and modemFaxEncoding is faxRelayG711G726, encoding switches to G.711 or G.726 at the rate specified in maxModemFaxG711G726Rate, exactly as it does if modemFaxEncoding is g711G726. Until a fax preamble is detected, the rate may fluctuate between maxModemFaxG711G726Rate and minModemFaxG711G726Rate due to network congestion, exactly as it does if modemFaxEncoding is g711G726. If a fax preamble is detected, all subsequent traffic during a call is demodulated and sent through the network as cells at the base rate of the sending machine. Supported demodulation methods are V.29 (up to 9.6 kbit/s) and V.27 (up to 4.8 kbit/s). The modulation and demodulation of fax traffic is called 'fax relay'. If a 2100 Hz tone is detected and modemFaxEncoding is faxRelayOnly, this channel does not wait for a fax preamble to switch to 'fax relay'. Instead, 'fax relay' is entered immediately. If modemFaxEncoding is faxRelayOnly, modem calls do not work on this Dcme. Therefore, this setting is only appropriate if modem calls are not made on the channel. The faxRelay feature is required to set modemFaxEncoding to faxRelayG711G726 or faxRelayOnly. modemFaxEncoding must have the same value at both ends of a Dcme. If modemFaxEncoding is not provisioned with the same values at both ends of a Dcme, the Dcme will not be able to carry the modem and fax traffic successfully.")
mscDcmeProfileMaxModemFaxG711G726Rate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 129, 2, 11, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("n64", 0), ("n32", 1))).clone('n64')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscDcmeProfileMaxModemFaxG711G726Rate.setStatus('mandatory')
if mibBuilder.loadTexts: mscDcmeProfileMaxModemFaxG711G726Rate.setDescription('This attribute specifies the maximum possible bit rate (minimum possible compression rate) during a modem call on this channel. It also specifies the maximum possible bit rate (minimum possible compression rate) during a fax call on this channel, but only if faxEncoding is g711G726. maxModemFaxG711G726Rate always applies to modem traffic, and never applies to voice traffic. If faxEncoding is g711G726, maxModemFaxG711G726Rate also applies to fax traffic. If faxEncoding is faxRelay, maxModemFaxG711G726Rate does not apply to fax traffic. Rates can change during a call due to congestion in the network.')
mscDcmeProfileMinModemFaxG711G726Rate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 129, 2, 11, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("n64", 0), ("n32", 1))).clone('n64')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscDcmeProfileMinModemFaxG711G726Rate.setStatus('mandatory')
if mibBuilder.loadTexts: mscDcmeProfileMinModemFaxG711G726Rate.setDescription('This attribute specifies the minimum possible bit rate (maximum possible compression rate) during a modem call on this channel. It also specifies the minimum possible bit rate (maximum possible compression rate) during a fax call on this channel, but only if faxEncoding is g711G726. minModemFaxG711G726Rate always applies to modem traffic, and never applies to voice traffic. If faxEncoding is g711G726, minModemFaxG711G726Rate also applies to fax traffic. If faxEncoding is faxRelay, minModemFaxG711G726Rate does not apply to fax traffic. Rates can change during a call due to congestion in the network.')
mscDcmeProfileFaxIdleSuppressionG711G726 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 129, 2, 11, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscDcmeProfileFaxIdleSuppressionG711G726.setStatus('mandatory')
if mibBuilder.loadTexts: mscDcmeProfileFaxIdleSuppressionG711G726.setDescription('This attribute specifies whether fax idle suppression is performed on fax traffic on calls using this profile. It only applies to fax traffic, not voice or modem traffic. It also only applies if fax traffic is carried using G.711 or G.726.')
mscDcmeProfileInsertedOutputDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 129, 2, 11, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 15, 22, 30, 35, 40, 45, 50, 75, 100, 125, 150))).clone(namedValues=NamedValues(("n5", 5), ("n15", 15), ("n22", 22), ("n30", 30), ("n35", 35), ("n40", 40), ("n45", 45), ("n50", 50), ("n75", 75), ("n100", 100), ("n125", 125), ("n150", 150))).clone('n22')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscDcmeProfileInsertedOutputDelay.setStatus('mandatory')
if mibBuilder.loadTexts: mscDcmeProfileInsertedOutputDelay.setDescription('This attribute specifies the amount of added output delay used to compensate for cross network delay variations. It applies to voice, modem and fax traffic. It is required to add output delay so that the statistical variation in the transit time of cells crossing the network does not cause gaps in speech. Backbone networks where high priority traffic consumes a high percentage of trunk bandwidth will require a higher insertedOutputDelay to compensate for the greater cell delay variation (CDV).')
mscDcmeProfileIngressAudioGain = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 129, 2, 11, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-12, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscDcmeProfileIngressAudioGain.setStatus('mandatory')
if mibBuilder.loadTexts: mscDcmeProfileIngressAudioGain.setDescription('This attribute specifies the gain in dB that is applied to data coming from outside the network before it is transferred across the network. It applies to voice, modem and fax traffic. For example, ingress gain is applied to audio data coming from a PBX. If ingressAudioGain is negative, a loss is applied. ingressAudioGain and egressAudioGain are used in loss planning, which is the configuration of the devices in a network to ensure that the signal level from any point in the network to any other point is correct.')
mscDcmeProfileEgressAudioGain = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 129, 2, 11, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-12, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscDcmeProfileEgressAudioGain.setStatus('mandatory')
if mibBuilder.loadTexts: mscDcmeProfileEgressAudioGain.setDescription('This attribute specifies the gain in dB that is applied to data leaving the network on this route. It applies to voice, modem and fax traffic. For example, egress gain is applied to audio data going to a PBX. If egressAudioGain is negative, a loss is applied. ingressAudioGain and egressAudioGain are used in loss planning, which is the configuration of the devices in the network to ensure that the signal level from any point in the network to any other point is correct.')
mscDcmeProfileSpeechHangoverTime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 129, 2, 11, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(10, 500)).clone(150)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscDcmeProfileSpeechHangoverTime.setStatus('mandatory')
if mibBuilder.loadTexts: mscDcmeProfileSpeechHangoverTime.setDescription('This attribute specifies the time after the end of speech before silence suppression starts. It applies only to voice traffic. Higher values of speechHangoverTime reduce undesirable clipping but increase bandwidth usage.')
mscDcmeProfileComfortNoiseCap = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 129, 2, 11, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-78, -78), ValueRangeConstraint(-65, -65), ValueRangeConstraint(-60, -60), ValueRangeConstraint(-54, -54), ValueRangeConstraint(-52, -52), ValueRangeConstraint(-50, -50), ValueRangeConstraint(-48, -48), ValueRangeConstraint(-46, -46), ValueRangeConstraint(-44, -44), ValueRangeConstraint(-42, -42), ValueRangeConstraint(-40, -40), )).clone(-40)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscDcmeProfileComfortNoiseCap.setStatus('mandatory')
if mibBuilder.loadTexts: mscDcmeProfileComfortNoiseCap.setDescription('This attribute specifies the maximum level at which comfort noise is generated. The comfort noise is limited by comfortNoiseCap before egressAudioGain is applied. The default value of -40 dBm0 equates to the maximum level of comfort noise available and effectively disables the comfortNoiseCap.')
mscDcmeProfileModemFaxSpeechDiscrim = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 129, 2, 11, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1))).clone('on')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscDcmeProfileModemFaxSpeechDiscrim.setStatus('mandatory')
if mibBuilder.loadTexts: mscDcmeProfileModemFaxSpeechDiscrim.setDescription('This attribute specifies whether this Dcme differentiates between modemFax traffic and speech. If modemFaxSpeechDiscrim is on and a false 2100 Hz tone is detected, any Vs under this Dcme reverts to speech mode when speech is detected.')
mscDcmeProfileV17EncodedAsG711G726 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 129, 2, 11, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscDcmeProfileV17EncodedAsG711G726.setStatus('mandatory')
if mibBuilder.loadTexts: mscDcmeProfileV17EncodedAsG711G726.setDescription('This attribute specifies how services using this Profile negotiate with V.17 fax machines. This attribute is not used unless the modemFaxEncoding, defined in this Profile, is faxRelayG711G726 If v17EncodedAsG711G726 is no, V.17 fax machines are instructed to use V.29 and V.29 fax traffic sent by fax machines is demodulated and encoded using fax relay. If v17EncodedAsG711G726 is yes, V.17 fax machines are permitted to use V.17 and V.17 fax traffic sent by fax machines is encoded using G.711 or G.726. The actual encoding performed depends on the minModemFaxG711G726Rate and maxModemFaxG711G726Rate, available in this Profile.')
mscDcmeProfileDtmfRegeneration = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 129, 2, 11, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscDcmeProfileDtmfRegeneration.setStatus('mandatory')
if mibBuilder.loadTexts: mscDcmeProfileDtmfRegeneration.setDescription('This attribute specifies the DTMF regeneration parameter used during negotiation with the remote end across the subnet. If dtmfRegeneration is on, it is desired that DTMF tones received from the link are first converted to digits before being sent to the subnet. When a digit is received from the subnet, its respective DTMF tone is desired to be generated before being sent to the link. If dtmfRegeneration is off, it is desired that DTMF tones are transported transparently as audio.')
mscDcmeProfileMaxFaxRelayRate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 129, 2, 11, 1, 21), FixedPoint1().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(24, 24), ValueRangeConstraint(48, 48), ValueRangeConstraint(72, 72), ValueRangeConstraint(96, 96), ValueRangeConstraint(120, 120), ValueRangeConstraint(144, 144), )).clone(144)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscDcmeProfileMaxFaxRelayRate.setStatus('mandatory')
if mibBuilder.loadTexts: mscDcmeProfileMaxFaxRelayRate.setDescription('This attribute specifies the maximum desired fax relay rate. This attribute only applies if modemFaxEncoding is faxRelayOnly or faxRelayG711G726.')
mscDcl = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130))
mscDclRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 1), )
if mibBuilder.loadTexts: mscDclRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclRowStatusTable.setDescription('This entry controls the addition and deletion of mscDcl components.')
mscDclRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclIndex"))
if mibBuilder.loadTexts: mscDclRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclRowStatusEntry.setDescription('A single entry in the table represents a single mscDcl component.')
mscDclRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscDclRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscDcl components. These components can be added and deleted.')
mscDclComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscDclStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclStorageType.setDescription('This variable represents the storage type value for the mscDcl tables.')
mscDclIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 14)))
if mibBuilder.loadTexts: mscDclIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclIndex.setDescription('This variable represents the index for the mscDcl tables.')
mscDclProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 10), )
if mibBuilder.loadTexts: mscDclProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclProvTable.setDescription('This group contains the provisionable attributes of a DcmeLink.')
mscDclProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclIndex"))
if mibBuilder.loadTexts: mscDclProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclProvEntry.setDescription('An entry in the mscDclProvTable.')
mscDclCommentText = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 40)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscDclCommentText.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclCommentText.setDescription('Use of this attribute is at the discretion of the system administrator. Typically, it specifies the name of the customer that is using this DcmeLink.')
mscDclRemoteNpi = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("x121", 0), ("e164", 1))).clone('e164')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscDclRemoteNpi.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclRemoteNpi.setDescription('This attribute specifies the Numbering Plan Indicator used for the remoteDna attribute of this DcmeLink.')
mscDclRemoteDna = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 10, 1, 3), DigitString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscDclRemoteDna.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclRemoteDna.setDescription('This attribute specifies the Data Network Address (DNA) of the remote DcmeLink. This is the DNA of the peer DcmeLink to which the DcmeLink component establishes its Logical Connection (LC).')
mscDclDcme = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 10, 1, 4), Link()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscDclDcme.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclDcme.setDescription('This attribute specifies the Dcme component that this DcmeLink belongs to.')
mscDclIdlePattern = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 10, 1, 5), Hex().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(213)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscDclIdlePattern.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclIdlePattern.setDescription('This attribute specifies an idlePattern in the channel received from the E1 interface, which is required to determine if the channel is active or not. When the end of the idlePattern is detected it indicates the start of a new speech call. When this idlePattern is detected it indicates the end of a speech call. When changing this attribute make sure that the alternateIdlePattern attibute is set correctly.')
mscDclAlternateIdlePattern = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 10, 1, 6), Hex().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(213)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscDclAlternateIdlePattern.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclAlternateIdlePattern.setDescription('This attribute specifies an alternateIdlePattern in the channel received from the E1 interface, after the end of a 64kbit/s call. The value of this attribute should be different than the value of the idlePattern attribute only if the ISC is programmed for Even/Odd Bit Inversion (EBI/OBI). This is only the case when the ISC is performing A to Mu or Mu to A Law conversion. When the end of the alternateIdlePattern is detected it indicates the start of a new speech call.')
mscDclStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 11), )
if mibBuilder.loadTexts: mscDclStateTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclStateTable.setDescription('This group contains the three OSI State attributes. The descriptions generically indicate what each state attribute implies about the component. Note that not all the values and state combinations described here are supported by every component which uses this group. For component-specific information and the valid state combinations, refer to NTP 241-7001-150, Passport Operations and Maintenance Guide.')
mscDclStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclIndex"))
if mibBuilder.loadTexts: mscDclStateEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclStateEntry.setDescription('An entry in the mscDclStateTable.')
mscDclAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclAdminState.setDescription('This attribute indicates the OSI Administrative State of the component. The value locked indicates that the component is administratively prohibited from providing services for its users. A Lock or Lock - force command has been previously issued for this component. When the value is locked, the value of usageState must be idle. The value shuttingDown indicates that the component is administratively permitted to provide service to its existing users only. A Lock command was issued against the component and it is in the process of shutting down. The value unlocked indicates that the component is administratively permitted to provide services for its users. To enter this state, issue an Unlock command to this component.')
mscDclOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclOperationalState.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclOperationalState.setDescription('This attribute indicates the OSI Operational State of the component. The value enabled indicates that the component is available for operation. Note that if adminState is locked, it would still not be providing service. The value disabled indicates that the component is not available for operation. For example, something is wrong with the component itself, or with another component on which this one depends. If the value is disabled, the usageState must be idle.')
mscDclUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclUsageState.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclUsageState.setDescription('This attribute indicates the OSI Usage State of the component. The value idle indicates that the component is not currently in use. The value active indicates that the component is in use and has spare capacity to provide for additional users. The value busy indicates that the component is in use and has no spare operating capacity for additional users at this time.')
mscDclOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 12), )
if mibBuilder.loadTexts: mscDclOperTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclOperTable.setDescription('This group provides the operational attributes for the DcmeLink component.')
mscDclOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 12, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclIndex"))
if mibBuilder.loadTexts: mscDclOperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclOperEntry.setDescription('An entry in the mscDclOperTable.')
mscDclActiveSpeechCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 12, 1, 1), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclActiveSpeechCalls.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclActiveSpeechCalls.setDescription('This attribute indicates the number of speech calls that are currently in progress on this DcmeLink.')
mscDclActive3kHzCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 12, 1, 2), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclActive3kHzCalls.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclActive3kHzCalls.setDescription('This attribute indicates the number of audio 3.1 kHz calls that are currently in progress on this DcmeLink.')
mscDclActive64kCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 12, 1, 3), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclActive64kCalls.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclActive64kCalls.setDescription('This attribute indicates the number of unrestricted 64 kbit/s calls that are currently in progress on this DcmeLink.')
mscDclReceivedTrmSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 12, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("none000", 0), ("invalid001", 1), ("invalid010", 2), ("invalid011", 3), ("invalid100", 4), ("switchingCentreNormal101", 5), ("maintenanceReleaseAck110", 6), ("dcmeClearOfTraffic111", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclReceivedTrmSignal.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclReceivedTrmSignal.setDescription('This attribute indicates the last TRM signal received from the ISC. The received TRM signal can be one of: Invalid (xxx): this signal should never be received, Switching Centre normal (101): this signal is allways transmitted by the ISC when there is no other signal to be sent, Maintenance release ack(110): this signal is transmitted by the ISC if it accepts the maintenance release request, Dcme clear of traffic: this signal is transmitted by the ISC if it has accepted the maintenance release request signal and now informs the DCME when all circuits are idle,')
mscDclTransmittedTrmSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 12, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 5, 6, 7))).clone(namedValues=NamedValues(("none000", 0), ("dcmeNormal100", 4), ("no64KbitSCapacity101", 5), ("maintenanceReleaseRequest110", 6), ("noCapacityAvailable111", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclTransmittedTrmSignal.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclTransmittedTrmSignal.setDescription('This attribute indicates the last TRM signal transmitted to the ISC. The transmitted TRM signal can be one of: Dcme normal (100): , this signal is allways transmitted by the DCME when there is no other signal to be sent, No 64 kbit/s capacity (101): this signal is transmitted by the DCME when it is not able to handle new 64 kbit/s call requests, Maintenance release request(110): this signal is transmitted by the DCME when the DCME is to be removed from the service for maintenance, No capacity available (111) this signal is transmitted by the DCME when there is bearer capacity available to set up new 3.1 kHz audio or speech calls,')
mscDclStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 13), )
if mibBuilder.loadTexts: mscDclStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclStatsTable.setDescription('This group contains statistics for the DcmeLink component.')
mscDclStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 13, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclIndex"))
if mibBuilder.loadTexts: mscDclStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclStatsEntry.setDescription('An entry in the mscDclStatsTable.')
mscDclTotalSpeechCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 13, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclTotalSpeechCalls.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclTotalSpeechCalls.setDescription('This attribute counts the total number of speech calls that have been handled by this DcmeLink, including rejected calls. This counter wraps to zero when it exceeds its maximum.')
mscDclTotal3kHzCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 13, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclTotal3kHzCalls.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclTotal3kHzCalls.setDescription('This attribute counts the total number of audio 3.1 kHz calls that have been handled by this DcmeLink, including rejected calls. This counter wraps to zero when it exceeds its maximum.')
mscDclTotal64kCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 13, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclTotal64kCalls.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclTotal64kCalls.setDescription('This attribute counts the total number of unrestricted 64 kbit/s calls that have been handled by this DcmeLink, including rejected calls. This counter wraps to zero when it exceeds its maximum.')
mscDclRejectedSpeechCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 13, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclRejectedSpeechCalls.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclRejectedSpeechCalls.setDescription('This attribute counts the total number of speech calls that have been rejected by this DcmeLink because there was no preestablished LC available. This counter wraps to zero when it exceeds its maximum.')
mscDclRejected3kHzCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 13, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclRejected3kHzCalls.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclRejected3kHzCalls.setDescription('This attribute counts the total number of audio 3.1 KHz calls that have been rejected by this DcmeLink because there was no preestablished LC available. This counter wraps to zero when it exceeds its maximum.')
mscDclRejected64kCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 13, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclRejected64kCalls.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclRejected64kCalls.setDescription('This attribute counts the total number of unrestricted 64 kbit/s calls that have been rejected by this DcmeLink. This counter wraps to zero when it reaches its maximum.')
mscDclInvalidTrmSignals = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 13, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclInvalidTrmSignals.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclInvalidTrmSignals.setDescription('This attribute counts the number of invalid TRM/Maintenance signals received from the ISC by this DcmeLink. The most probable cause of an invalid TRM/Maintenance signal is an invalid ISC provisionning or a transmission error. The invalid bit settings are 000, 001, 010, 011, 100. This counter wraps to zero when it exceeds its maximum.')
mscDclDna = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 2))
mscDclDnaRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 2, 1), )
if mibBuilder.loadTexts: mscDclDnaRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclDnaRowStatusTable.setDescription('This entry controls the addition and deletion of mscDclDna components.')
mscDclDnaRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 2, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclIndex"), (0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclDnaIndex"))
if mibBuilder.loadTexts: mscDclDnaRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclDnaRowStatusEntry.setDescription('A single entry in the table represents a single mscDclDna component.')
mscDclDnaRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclDnaRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclDnaRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscDclDna components. These components cannot be added nor deleted.')
mscDclDnaComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclDnaComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclDnaComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscDclDnaStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclDnaStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclDnaStorageType.setDescription('This variable represents the storage type value for the mscDclDna tables.')
mscDclDnaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscDclDnaIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclDnaIndex.setDescription('This variable represents the index for the mscDclDna tables.')
mscDclDnaAddressTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 2, 10), )
if mibBuilder.loadTexts: mscDclDnaAddressTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclDnaAddressTable.setDescription("The Address group contains attributes common to all Dna's. Every Dna used in the network is defined with this group of 2 attributes. The string of address digits is complemented by the type of address or Npi. These attributes are used to interpret the format of the address digits.")
mscDclDnaAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 2, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclIndex"), (0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclDnaIndex"))
if mibBuilder.loadTexts: mscDclDnaAddressEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclDnaAddressEntry.setDescription('An entry in the mscDclDnaAddressTable.')
mscDclDnaNumberingPlanIndicator = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 2, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("x121", 0), ("e164", 1))).clone('e164')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscDclDnaNumberingPlanIndicator.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclDnaNumberingPlanIndicator.setDescription('This attribute indicates the Numbering Plan Indicator (NPI) of the Dna that is entered. An address may belong to the X.121 or E.164 numbering plans. X.121 is used in packet switched data networks.')
mscDclDnaDataNetworkAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 2, 10, 1, 2), DigitString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscDclDnaDataNetworkAddress.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclDnaDataNetworkAddress.setDescription('The Dna attribute contains digits which form a unique identifier of the customer interface. It can be compared (approximation only) to a telephone number where each phone number identifies a unique telephone set. Dna digits are selected and assigned by network operators.')
mscDclFramer = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 3))
mscDclFramerRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 3, 1), )
if mibBuilder.loadTexts: mscDclFramerRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclFramerRowStatusTable.setDescription('This entry controls the addition and deletion of mscDclFramer components.')
mscDclFramerRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 3, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclIndex"), (0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclFramerIndex"))
if mibBuilder.loadTexts: mscDclFramerRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclFramerRowStatusEntry.setDescription('A single entry in the table represents a single mscDclFramer component.')
mscDclFramerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 3, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclFramerRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclFramerRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscDclFramer components. These components cannot be added nor deleted.')
mscDclFramerComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclFramerComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclFramerComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscDclFramerStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclFramerStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclFramerStorageType.setDescription('This variable represents the storage type value for the mscDclFramer tables.')
mscDclFramerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 3, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscDclFramerIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclFramerIndex.setDescription('This variable represents the index for the mscDclFramer tables.')
mscDclFramerProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 3, 10), )
if mibBuilder.loadTexts: mscDclFramerProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclFramerProvTable.setDescription('This group contains the base provisioning data for the Framer component. Application or hardware interface specific provisioning data is contained in other provisionable Framer groups.')
mscDclFramerProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 3, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclIndex"), (0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclFramerIndex"))
if mibBuilder.loadTexts: mscDclFramerProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclFramerProvEntry.setDescription('An entry in the mscDclFramerProvTable.')
mscDclFramerInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 3, 10, 1, 1), Link()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscDclFramerInterfaceName.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclFramerInterfaceName.setDescription("This attribute contains a hardware component name. The attribute associates the application with a specific link. This defines the module processor on which Framer's parent component (as well as Framer itself) will run.")
mscDclFramerStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 3, 12), )
if mibBuilder.loadTexts: mscDclFramerStateTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclFramerStateTable.setDescription('This group contains the three OSI State attributes. The descriptions generically indicate what each state attribute implies about the component. Note that not all the values and state combinations described here are supported by every component which uses this group. For component-specific information and the valid state combinations, refer to NTP 241-7001-150, Passport Operations and Maintenance Guide.')
mscDclFramerStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 3, 12, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclIndex"), (0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclFramerIndex"))
if mibBuilder.loadTexts: mscDclFramerStateEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclFramerStateEntry.setDescription('An entry in the mscDclFramerStateTable.')
mscDclFramerAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 3, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclFramerAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclFramerAdminState.setDescription('This attribute indicates the OSI Administrative State of the component. The value locked indicates that the component is administratively prohibited from providing services for its users. A Lock or Lock - force command has been previously issued for this component. When the value is locked, the value of usageState must be idle. The value shuttingDown indicates that the component is administratively permitted to provide service to its existing users only. A Lock command was issued against the component and it is in the process of shutting down. The value unlocked indicates that the component is administratively permitted to provide services for its users. To enter this state, issue an Unlock command to this component.')
mscDclFramerOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 3, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclFramerOperationalState.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclFramerOperationalState.setDescription('This attribute indicates the OSI Operational State of the component. The value enabled indicates that the component is available for operation. Note that if adminState is locked, it would still not be providing service. The value disabled indicates that the component is not available for operation. For example, something is wrong with the component itself, or with another component on which this one depends. If the value is disabled, the usageState must be idle.')
mscDclFramerUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 3, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclFramerUsageState.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclFramerUsageState.setDescription('This attribute indicates the OSI Usage State of the component. The value idle indicates that the component is not currently in use. The value active indicates that the component is in use and has spare capacity to provide for additional users. The value busy indicates that the component is in use and has no spare operating capacity for additional users at this time.')
mscDclVs = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4))
mscDclVsRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 1), )
if mibBuilder.loadTexts: mscDclVsRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclVsRowStatusTable.setDescription('This entry controls the addition and deletion of mscDclVs components.')
mscDclVsRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclIndex"), (0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclVsIndex"))
if mibBuilder.loadTexts: mscDclVsRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclVsRowStatusEntry.setDescription('A single entry in the table represents a single mscDclVs component.')
mscDclVsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscDclVsRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclVsRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscDclVs components. These components can be added and deleted.')
mscDclVsComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclVsComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclVsComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscDclVsStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclVsStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclVsStorageType.setDescription('This variable represents the storage type value for the mscDclVs tables.')
mscDclVsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)))
if mibBuilder.loadTexts: mscDclVsIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclVsIndex.setDescription('This variable represents the index for the mscDclVs tables.')
mscDclVsProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 10), )
if mibBuilder.loadTexts: mscDclVsProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclVsProvTable.setDescription('This group contains the provisionable attributes of a DcmeVs component.')
mscDclVsProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclIndex"), (0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclVsIndex"))
if mibBuilder.loadTexts: mscDclVsProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclVsProvEntry.setDescription('An entry in the mscDclVsProvTable.')
mscDclVsVsType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("dynamicVs", 0), ("permanent64kVs", 1))).clone('dynamicVs')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscDclVsVsType.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclVsVsType.setDescription('This attribute specifies the type of calls offered by this DcmeVs. If the value permanent64kVs is selected the 64 kbit/s call is established on the channel associated with this DcmeVs upon system activation. If this call is cleared due to the subnet failure it is reestablished again by the DcmeLink. If the value dynamicVs is selected this channel can be used to establish user selected calls.')
mscDclVsOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 11), )
if mibBuilder.loadTexts: mscDclVsOperTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclVsOperTable.setDescription('This group provides the operational attributes for the DcmeVoiceService component.')
mscDclVsOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclIndex"), (0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclVsIndex"))
if mibBuilder.loadTexts: mscDclVsOperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclVsOperEntry.setDescription('An entry in the mscDclVsOperTable.')
mscDclVsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("idle", 0), ("seized", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclVsStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclVsStatus.setDescription('This attribute indicates the current status of the channel. idle means that there is no call currently active on this channel. seized means that the channel has currently an active call.')
mscDclVsCallType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("speech", 1), ("n31KHz", 2), ("n64KbitS", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclVsCallType.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclVsCallType.setDescription('This attribute indicates the type of call that this channel is currently carrying. If no call is active, then it displays the value for the last call.')
mscDclVsReceivedAbBits = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none00", 0), ("normalServiceAvailable01", 1), ("n31KHzRequest10", 2), ("n64KbitSRequest11", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclVsReceivedAbBits.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclVsReceivedAbBits.setDescription('This attribute indicates the most recently received AB bits.')
mscDclVsTransmittedAbBits = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 11, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none00", 0), ("normalServiceAvailable01", 1), ("specialServiceAck10", 2), ("channelOutOfService11", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclVsTransmittedAbBits.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclVsTransmittedAbBits.setDescription('This attribute indicates the AB bits currently being transmitted.')
mscDclVsStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 12), )
if mibBuilder.loadTexts: mscDclVsStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclVsStatsTable.setDescription('This group provides the operational attributes for the DcmeVoiceService component.')
mscDclVsStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 12, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclIndex"), (0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclVsIndex"))
if mibBuilder.loadTexts: mscDclVsStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclVsStatsEntry.setDescription('An entry in the mscDclVsStatsTable.')
mscDclVsTotalCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 12, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclVsTotalCalls.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclVsTotalCalls.setDescription('This attribute counts the call attempts processed on this channel (in both directions). This count includes both successful and unsuccessful calls. The value wraps when it exceeds its maximum.')
mscDclVsTotalCallSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 12, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclVsTotalCallSeconds.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclVsTotalCallSeconds.setDescription('This attribute counts the total number of seconds that this channel is handling a call. This is regardless of whether the call is successful or not. In other words, this is the amount of time that the channel is not in the idle state. The value wraps when it reaches its maximum.')
mscDclVsInvalidAbBits = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 12, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclVsInvalidAbBits.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclVsInvalidAbBits.setDescription('This attribute counts the number of invalid AB bits signals received from the ISC on this channel. The invalid bit setting is 00. This counter wraps to zero when it reaches its maximum.')
mscDclVsStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 13), )
if mibBuilder.loadTexts: mscDclVsStateTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclVsStateTable.setDescription('This group contains the three OSI State attributes. The descriptions generically indicate what each state attribute implies about the component. Note that not all the values and state combinations described here are supported by every component which uses this group. For component-specific information and the valid state combinations, refer to NTP 241-7001-150, Passport Operations and Maintenance Guide.')
mscDclVsStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 13, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclIndex"), (0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclVsIndex"))
if mibBuilder.loadTexts: mscDclVsStateEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclVsStateEntry.setDescription('An entry in the mscDclVsStateTable.')
mscDclVsAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 13, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclVsAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclVsAdminState.setDescription('This attribute indicates the OSI Administrative State of the component. The value locked indicates that the component is administratively prohibited from providing services for its users. A Lock or Lock - force command has been previously issued for this component. When the value is locked, the value of usageState must be idle. The value shuttingDown indicates that the component is administratively permitted to provide service to its existing users only. A Lock command was issued against the component and it is in the process of shutting down. The value unlocked indicates that the component is administratively permitted to provide services for its users. To enter this state, issue an Unlock command to this component.')
mscDclVsOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 13, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclVsOperationalState.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclVsOperationalState.setDescription('This attribute indicates the OSI Operational State of the component. The value enabled indicates that the component is available for operation. Note that if adminState is locked, it would still not be providing service. The value disabled indicates that the component is not available for operation. For example, something is wrong with the component itself, or with another component on which this one depends. If the value is disabled, the usageState must be idle.')
mscDclVsUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 13, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclVsUsageState.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclVsUsageState.setDescription('This attribute indicates the OSI Usage State of the component. The value idle indicates that the component is not currently in use. The value active indicates that the component is in use and has spare capacity to provide for additional users. The value busy indicates that the component is in use and has no spare operating capacity for additional users at this time.')
mscDclVsFramer = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2))
mscDclVsFramerRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2, 1), )
if mibBuilder.loadTexts: mscDclVsFramerRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclVsFramerRowStatusTable.setDescription('This entry controls the addition and deletion of mscDclVsFramer components.')
mscDclVsFramerRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclIndex"), (0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclVsIndex"), (0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclVsFramerIndex"))
if mibBuilder.loadTexts: mscDclVsFramerRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclVsFramerRowStatusEntry.setDescription('A single entry in the table represents a single mscDclVsFramer component.')
mscDclVsFramerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclVsFramerRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclVsFramerRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscDclVsFramer components. These components cannot be added nor deleted.')
mscDclVsFramerComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclVsFramerComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclVsFramerComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscDclVsFramerStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclVsFramerStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclVsFramerStorageType.setDescription('This variable represents the storage type value for the mscDclVsFramer tables.')
mscDclVsFramerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscDclVsFramerIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclVsFramerIndex.setDescription('This variable represents the index for the mscDclVsFramer tables.')
mscDclVsFramerProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2, 10), )
if mibBuilder.loadTexts: mscDclVsFramerProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclVsFramerProvTable.setDescription('This group contains the base provisioning data for the Framer component. Application or hardware interface specific provisioning data is contained in other provisionable Framer groups.')
mscDclVsFramerProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclIndex"), (0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclVsIndex"), (0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclVsFramerIndex"))
if mibBuilder.loadTexts: mscDclVsFramerProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclVsFramerProvEntry.setDescription('An entry in the mscDclVsFramerProvTable.')
mscDclVsFramerInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2, 10, 1, 1), Link()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscDclVsFramerInterfaceName.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclVsFramerInterfaceName.setDescription("This attribute contains a hardware component name. The attribute associates the application with a specific link. This defines the module processor on which Framer's parent component (as well as Framer itself) will run.")
mscDclVsFramerStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2, 14), )
if mibBuilder.loadTexts: mscDclVsFramerStateTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclVsFramerStateTable.setDescription('This group contains the three OSI State attributes. The descriptions generically indicate what each state attribute implies about the component. Note that not all the values and state combinations described here are supported by every component which uses this group. For component-specific information and the valid state combinations, refer to NTP 241-7001-150, Passport Operations and Maintenance Guide.')
mscDclVsFramerStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2, 14, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclIndex"), (0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclVsIndex"), (0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclVsFramerIndex"))
if mibBuilder.loadTexts: mscDclVsFramerStateEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclVsFramerStateEntry.setDescription('An entry in the mscDclVsFramerStateTable.')
mscDclVsFramerAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2, 14, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclVsFramerAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclVsFramerAdminState.setDescription('This attribute indicates the OSI Administrative State of the component. The value locked indicates that the component is administratively prohibited from providing services for its users. A Lock or Lock - force command has been previously issued for this component. When the value is locked, the value of usageState must be idle. The value shuttingDown indicates that the component is administratively permitted to provide service to its existing users only. A Lock command was issued against the component and it is in the process of shutting down. The value unlocked indicates that the component is administratively permitted to provide services for its users. To enter this state, issue an Unlock command to this component.')
mscDclVsFramerOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2, 14, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclVsFramerOperationalState.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclVsFramerOperationalState.setDescription('This attribute indicates the OSI Operational State of the component. The value enabled indicates that the component is available for operation. Note that if adminState is locked, it would still not be providing service. The value disabled indicates that the component is not available for operation. For example, something is wrong with the component itself, or with another component on which this one depends. If the value is disabled, the usageState must be idle.')
mscDclVsFramerUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2, 14, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclVsFramerUsageState.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclVsFramerUsageState.setDescription('This attribute indicates the OSI Usage State of the component. The value idle indicates that the component is not currently in use. The value active indicates that the component is in use and has spare capacity to provide for additional users. The value busy indicates that the component is in use and has no spare operating capacity for additional users at this time.')
mscDclVsFramerStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2, 15), )
if mibBuilder.loadTexts: mscDclVsFramerStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclVsFramerStatsTable.setDescription('This group contains the operational statistics data for a Framer component.')
mscDclVsFramerStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2, 15, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclIndex"), (0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclVsIndex"), (0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclVsFramerIndex"))
if mibBuilder.loadTexts: mscDclVsFramerStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclVsFramerStatsEntry.setDescription('An entry in the mscDclVsFramerStatsTable.')
mscDclVsFramerTotalCells = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2, 15, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclVsFramerTotalCells.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclVsFramerTotalCells.setDescription('This attribute counts the total number of cells received from the interface. Each cell contains 44 bytes of data from the DS0 channel. Since a DS0 provides data at 64 kbit/s, each cell contains 5.5 ms of audio data. This data flow is measured before compression is performed on the channel. This counter wraps to zero after reaching its maximum value.')
mscDclVsFramerAudioCells = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2, 15, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclVsFramerAudioCells.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclVsFramerAudioCells.setDescription('This attribute counts the total number of cells containing audio data received from the interface while the channel was seized. A CCS channel is always considered to be seized. Audio data includes cells containing voice as well modem audio, but not silence. A cell contains 44 bytes of data from the DS0 channel(5.5 ms). This flow is measured before compression is performed on the channel. This counter wraps to zero after reaching its maximum value.')
mscDclVsFramerSilenceCells = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2, 15, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclVsFramerSilenceCells.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclVsFramerSilenceCells.setDescription('This attribute counts the total number of cells containing silence data received from the interface which was not forwarded into the network, thus saving bandwidth. A channel may go into silence due to the operation of the silence suppression feature or for CAS channels when the ABCD signalling bits go idle. A cell contains 44 bytes of data from the DS0 channel(5.5 ms). This flow is measured before compression is performed on the channel. This counter wraps to zero after reaching its maximum value.')
mscDclVsFramerModemCells = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2, 15, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclVsFramerModemCells.setStatus('obsolete')
if mibBuilder.loadTexts: mscDclVsFramerModemCells.setDescription('This attribute is migrated into modemFaxCells.')
mscDclVsFramerCurrentEncodingRate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2, 15, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("n640", 1), ("n320", 2), ("n240", 3), ("n160", 4), ("n80", 5), ("n144", 6), ("n120", 7), ("n96", 8), ("n72", 9), ("n63", 10), ("n53", 11), ("n48", 12), ("n24", 13), ("n12", 14), ("n03", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclVsFramerCurrentEncodingRate.setStatus('obsolete')
if mibBuilder.loadTexts: mscDclVsFramerCurrentEncodingRate.setDescription('This attribute has been migrated to currentRate in Operational group.')
mscDclVsFramerLrcErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2, 15, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclVsFramerLrcErrors.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclVsFramerLrcErrors.setDescription('This attribute counts the number of frames received from the network with LRC errors.')
mscDclVsFramerFrmLostInNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2, 15, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclVsFramerFrmLostInNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclVsFramerFrmLostInNetwork.setDescription('This attribute counts the number of frames which the service knows it did not receive from the network although they were sent in to the network from the far end.')
mscDclVsFramerFrmUnderRuns = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2, 15, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclVsFramerFrmUnderRuns.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclVsFramerFrmUnderRuns.setDescription('This attribute counts the number of times that a frame was needed but was not available because it had been delayed too long in the network. This error may occur repeatedly if the interface clocks at the two access points to the network are operating at different rates.')
mscDclVsFramerFrmDumped = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2, 15, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclVsFramerFrmDumped.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclVsFramerFrmDumped.setDescription('This attribute counts the number of frames which have been dumped because the output queue grew too large. This can occur if the clock rate on the incoming interface is faster than the clock rate on the outgoing interface and there are no silence periods to absorb the difference, or when a compression rate change occurs. This count wraps to zero after reaching its maximum value.')
mscDclVsFramerModemSilenceCells = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2, 15, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclVsFramerModemSilenceCells.setStatus('obsolete')
if mibBuilder.loadTexts: mscDclVsFramerModemSilenceCells.setDescription('This attribute is migrated into faxIdleCells.')
mscDclVsFramerCurrentEncoding = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2, 15, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 32, 33, 64, 65, 66, 67, 255))).clone(namedValues=NamedValues(("g729", 1), ("g728", 2), ("g723", 3), ("g726", 4), ("g711", 5), ("v22", 32), ("v22bis", 33), ("faxRelay", 64), ("v27", 65), ("v29", 66), ("v17", 67), ("none", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclVsFramerCurrentEncoding.setStatus('obsolete')
if mibBuilder.loadTexts: mscDclVsFramerCurrentEncoding.setDescription('This attribute has been migrated to currentEncoding in Operational group.')
mscDclVsFramerTptStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2, 15, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("operating", 0), ("rejected", 1), ("monitoring", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclVsFramerTptStatus.setStatus('obsolete')
if mibBuilder.loadTexts: mscDclVsFramerTptStatus.setDescription('This attribute has been migrated to tptStatus in Operational group.')
mscDclVsFramerFaxRelayCells = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2, 15, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclVsFramerFaxRelayCells.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclVsFramerFaxRelayCells.setDescription('This attribute counts the total number of fax relay cells sent to the network. This counter wraps to zero after reaching its maximum value.')
mscDclVsFramerModemFaxCells = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2, 15, 1, 36), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclVsFramerModemFaxCells.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclVsFramerModemFaxCells.setDescription('This attribute counts the total number of cells containing modem data received from the interface while the channel was seized. A CCS channel is always considered to be seized. Cells are considered to be modem data if a constant energy level above -25 dBmO is detected for more than 900 ms. An energy level below -36 dBmO for more than 650 ms is required to detect that the modem is no longer present. A cell contains 44 bytes of data from the DS0 channel (5.5 ms). This flow is measured before compression is performed on the channel. This counter wraps to zero after reaching its maximum value.')
mscDclVsFramerFaxIdleCells = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2, 15, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclVsFramerFaxIdleCells.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclVsFramerFaxIdleCells.setDescription('This attribute counts the total number of cells containing silent fax data received from the interface which were not forwarded into the network, thus saving bandwidth. A channel may go into silence due to the silence Suppression feature or for CAS channels when the ABCD signalling bits go idle. A cell contains 44 bytes of data from the DS0 channel (5.5 ms). This flow is measured before compression is performed on the channel. This counter wraps to zero after reaching its maximum value.')
mscDclVsFramerOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2, 16), )
if mibBuilder.loadTexts: mscDclVsFramerOperTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclVsFramerOperTable.setDescription('This group contains the operational data for a Svs Framer.')
mscDclVsFramerOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2, 16, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclIndex"), (0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclVsIndex"), (0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclVsFramerIndex"))
if mibBuilder.loadTexts: mscDclVsFramerOperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclVsFramerOperEntry.setDescription('An entry in the mscDclVsFramerOperTable.')
mscDclVsFramerOpCurrentEncoding = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2, 16, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 32, 33, 64, 65, 66, 67, 255))).clone(namedValues=NamedValues(("g729", 1), ("g728", 2), ("g723", 3), ("g726", 4), ("g711", 5), ("v22", 32), ("v22bis", 33), ("faxRelay", 64), ("v27", 65), ("v29", 66), ("v17", 67), ("none", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclVsFramerOpCurrentEncoding.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclVsFramerOpCurrentEncoding.setDescription('This attribute indicates the encoding currently being performed on this channel. g711 indicates that pulse code modulation (PCM) defined by ITU-T G.711 is being performed. g726 indicates that adaptive differential pulse code modulation (ADPCM) defined by ITU-T G.726 is being performed. g728 indicates that the Low Delay Coded Excited Linear Predictive Coder (LD-CELP) algorithm defined by ITU-T G.728 is being performed. g729 indicates that the Conjunctive Structure Algebraic Code Excited Linear Predictive Coder (CS-ACELP) algorithm defined by ITU-T G.729 is being performed. v27 indicates that the algorithm defined by ITU-T V.27 is being performed. v29 indicates that the algorithm defined by ITU-T V.29 is being performed.')
mscDclVsFramerCurrentRate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2, 16, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("n0", 0), ("n640", 1), ("n320", 2), ("n240", 3), ("n160", 4), ("n80", 5), ("n144", 6), ("n120", 7), ("n96", 8), ("n72", 9), ("n63", 10), ("n53", 11), ("n48", 12), ("n24", 13), ("n12", 14), ("n03", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclVsFramerCurrentRate.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclVsFramerCurrentRate.setDescription('This attribute indicates the current encoding rate for frames being sent to the network.')
mscDclVsFramerOpTptStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2, 16, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 3))).clone(namedValues=NamedValues(("operating", 0), ("monitoring", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclVsFramerOpTptStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclVsFramerOpTptStatus.setDescription('This attribute indicates the current status of the tandem pass through algorithm. If tptStatus is operating, the tandem pass through algorithm is cutting through a voice switch. If tptStatus is monitoring, negotiatedTandemPassThrough is enabled, but the tandem pass through algorithm is not cutting through a voice switch. If tptStatus is disabled, negotiatedTandemPassThrough is disabled.')
mscDclVsFramerNegTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2, 17), )
if mibBuilder.loadTexts: mscDclVsFramerNegTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclVsFramerNegTable.setDescription('This group contains the attributes indicating the results of voice networking end to end negotiation.')
mscDclVsFramerNegEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2, 17, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclIndex"), (0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclVsIndex"), (0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclVsFramerIndex"))
if mibBuilder.loadTexts: mscDclVsFramerNegEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclVsFramerNegEntry.setDescription('An entry in the mscDclVsFramerNegTable.')
mscDclVsFramerNegotiatedSilenceSuppression = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2, 17, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("off", 0), ("on", 1), ("congested", 2), ("slow", 3), ("slowAndCongested", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscDclVsFramerNegotiatedSilenceSuppression.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclVsFramerNegotiatedSilenceSuppression.setDescription('This attribute indicates the result of negotiating silence suppression with the remote end across the subnet. The parameter used for negotiating with the remote end is provisioned in Vncs Vp silenceSuppression. If negotiatedSilenceSuppression is off, silence suppression is never performed. If negotiatedSilenceSuppression is on, silence suppression is always performed. If negotiatedSilenceSuppression is congested, silence suppression is performed only when the network is congested. If negotiatedSilenceSuppression is slow, silence suppression begins after 10 to 20 seconds without any speech or audio being detected. If negotiatedSilenceSuppression is slowAndCongested, both the slow and congested options are applied.')
mscDclVsFramerNegotiatedFisG711G726 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2, 17, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscDclVsFramerNegotiatedFisG711G726.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclVsFramerNegotiatedFisG711G726.setDescription('This attribute indicates the result of negotiating G.711/G.726 fax idle suppression with the remote end across the subnet. The parameter used for negotiating with the remote end is provisioned in Vncs Vp faxIdleSuppressionG711G726.')
mscDclVsFramerNegotiatedDtmfRegeneration = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2, 17, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscDclVsFramerNegotiatedDtmfRegeneration.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclVsFramerNegotiatedDtmfRegeneration.setDescription('This attribute indicates the result of negotiating DTMF regeneration with the remote end across the subnet. The parameter used for negotiating with the remote end is provisioned in Vncs Vp dtmfRegeneration. If negotiatedDtmfRegeneration is on, DTMF tones received from the link are first converted to digits before being sent to the subnet. When a digit is received from the subnet, its respective DTMF tone is generated before being sent to the link. If negotiatedDtmfRegeneration is off, DTMF tones are transported transparently.')
mscDclVsFramerNegotiatedV17AsG711G726 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2, 17, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclVsFramerNegotiatedV17AsG711G726.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclVsFramerNegotiatedV17AsG711G726.setDescription('This attribute indicates how this SwitchedVoiceService negotiates with V.17 fax machines, as determined by negotiation with the remote end across the subnet. The parameter used for negotiating with the remote end is provisioned in Vncs Vp v17EncodedAsG711G726. If negotiatedV17AsG711G726 is no, V.17 fax machines are instructed to use V.29, and V.29 fax traffic sent by fax machines is demodulated and encoded using fax relay. If negotiatedV17AsG711G726 is yes, V.17 fax machines are permitted to use V.17 and V.17 fax traffic sent by fax machines is encoded using G.711 or G.726, at the rates given in negotiatedRates.')
mscDclVsFramerNegotiatedTandemPassThrough = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2, 17, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclVsFramerNegotiatedTandemPassThrough.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclVsFramerNegotiatedTandemPassThrough.setDescription('This attribute indicates the result of negotiating tandem pass through with the remote end across the subnet. The parameter used for negotiating with the remote end is provisioned in Vncs Vp tandemPassThrough.')
mscDclVsFramerFrmToNetworkTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2, 315), )
if mibBuilder.loadTexts: mscDclVsFramerFrmToNetworkTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclVsFramerFrmToNetworkTable.setDescription('This attribute counts the number of frames sent to the network at each encoding rate. Fax relay cells are not included.')
mscDclVsFramerFrmToNetworkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2, 315, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclIndex"), (0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclVsIndex"), (0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclVsFramerIndex"), (0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclVsFramerFrmToNetworkIndex"))
if mibBuilder.loadTexts: mscDclVsFramerFrmToNetworkEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclVsFramerFrmToNetworkEntry.setDescription('An entry in the mscDclVsFramerFrmToNetworkTable.')
mscDclVsFramerFrmToNetworkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2, 315, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("n64KbitS", 0), ("n32KbitS", 1), ("n24KbitS", 2), ("n16KbitS", 3), ("n8KbitS", 4))))
if mibBuilder.loadTexts: mscDclVsFramerFrmToNetworkIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclVsFramerFrmToNetworkIndex.setDescription('This variable represents the mscDclVsFramerFrmToNetworkTable specific index for the mscDclVsFramerFrmToNetworkTable.')
mscDclVsFramerFrmToNetworkValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2, 315, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclVsFramerFrmToNetworkValue.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclVsFramerFrmToNetworkValue.setDescription('This variable represents an individual value for the mscDclVsFramerFrmToNetworkTable.')
mscDclVsFramerFrmFromNetworkTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2, 316), )
if mibBuilder.loadTexts: mscDclVsFramerFrmFromNetworkTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclVsFramerFrmFromNetworkTable.setDescription('This attribute counts the number of frames received from the network at each encoding rate.')
mscDclVsFramerFrmFromNetworkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2, 316, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclIndex"), (0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclVsIndex"), (0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclVsFramerIndex"), (0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclVsFramerFrmFromNetworkIndex"))
if mibBuilder.loadTexts: mscDclVsFramerFrmFromNetworkEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclVsFramerFrmFromNetworkEntry.setDescription('An entry in the mscDclVsFramerFrmFromNetworkTable.')
mscDclVsFramerFrmFromNetworkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2, 316, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("n64KbitS", 0), ("n32KbitS", 1), ("n24KbitS", 2), ("n16KbitS", 3), ("n8KbitS", 4))))
if mibBuilder.loadTexts: mscDclVsFramerFrmFromNetworkIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclVsFramerFrmFromNetworkIndex.setDescription('This variable represents the mscDclVsFramerFrmFromNetworkTable specific index for the mscDclVsFramerFrmFromNetworkTable.')
mscDclVsFramerFrmFromNetworkValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2, 316, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclVsFramerFrmFromNetworkValue.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclVsFramerFrmFromNetworkValue.setDescription('This variable represents an individual value for the mscDclVsFramerFrmFromNetworkTable.')
mscDclVsFramerNEncodingTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2, 467), )
if mibBuilder.loadTexts: mscDclVsFramerNEncodingTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclVsFramerNEncodingTable.setDescription('This attribute indicates the results of negotiating audio call encodings for voice, modemFax and fax traffic with the remote end across the subnet. The parameters used for negotiating with the remote end are provisioned in Vncs Vp voiceEncodingChoice and Vncs Vp modemFaxEncodingChoice. voice traffic is all traffic from the start of a call or speech until a 2100 Hz tone or call release. modemFax traffic is all traffic after a 2100 Hz tone but before a fax preamble, speech or call release. fax traffic is all traffic after a fax preamble but before speech or call release. g711 indicates that pulse code modulation (PCM) defined by ITU-T G.711 is the negotiated encoding. g726 indicates that Adaptive Differential Pulse Code Modulation (ADPCM) defined by ITU-T G.726 is the negotiated encoding. g711G726 indicates that pulse code modulation (PCM) defined by ITU-T G.711 and Adaptive Differential Pulse Code Modulation (ADPCM) defined by ITU-T G.726 are both negotiated encodings. If negotiatedEncoding is g711G726, the actual encoding performed can be either G.711 or G.726, depending on network congestion. g728 indicates that Low Delay Coded Excited Linear Predictive Coder (CS-ACELP) defined by ITU-T G.728 is the negotiated encoding. g729 indicates that Conjunctive Structure Algebraic Code Excited Linear Predictive Coder (CS-ACELP) defined by ITU-T G.729 is the negotiated encoding. v29V27Relay indicates that fax relay using ITU-T V.29 or ITU-T V.27 is the negotiated encoding. v17V29V27Relay indicates that fax relay using ITU-T V.17, ITU-T V.29, or ITU-T V.27 is the negotiated encoding. If all negotiated encodings are none, the negotiation of audio call encodings is not complete.')
mscDclVsFramerNEncodingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2, 467, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclIndex"), (0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclVsIndex"), (0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclVsFramerIndex"), (0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclVsFramerNEncodingIndex"))
if mibBuilder.loadTexts: mscDclVsFramerNEncodingEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclVsFramerNEncodingEntry.setDescription('An entry in the mscDclVsFramerNEncodingTable.')
mscDclVsFramerNEncodingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2, 467, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("voice", 0), ("modemFax", 1), ("fax", 2))))
if mibBuilder.loadTexts: mscDclVsFramerNEncodingIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclVsFramerNEncodingIndex.setDescription('This variable represents the mscDclVsFramerNEncodingTable specific index for the mscDclVsFramerNEncodingTable.')
mscDclVsFramerNEncodingValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2, 467, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 5, 31, 64, 68, 255))).clone(namedValues=NamedValues(("g729", 1), ("g728", 2), ("g726", 4), ("g711", 5), ("g711G726", 31), ("v29V27Relay", 64), ("v17V29V27Relay", 68), ("none", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscDclVsFramerNEncodingValue.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclVsFramerNEncodingValue.setDescription('This variable represents an individual value for the mscDclVsFramerNEncodingTable.')
mscDclVsFramerNRatesTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2, 479), )
if mibBuilder.loadTexts: mscDclVsFramerNRatesTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclVsFramerNRatesTable.setDescription('This attribute indicates the results of negotiating minimum and maximum rates for voice, modemFax and fax traffic with the remote end across the subnet. The parameters used for negotiating with the remote end are provisioned in Vncs Vp voiceRates and Vncs Vp modemFaxRates.')
mscDclVsFramerNRatesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2, 479, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclIndex"), (0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclVsIndex"), (0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclVsFramerIndex"), (0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclVsFramerNRatesTrafficIndex"), (0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclVsFramerNRatesRateIndex"))
if mibBuilder.loadTexts: mscDclVsFramerNRatesEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclVsFramerNRatesEntry.setDescription('An entry in the mscDclVsFramerNRatesTable.')
mscDclVsFramerNRatesTrafficIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2, 479, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("voice", 0), ("modemFax", 1), ("fax", 2))))
if mibBuilder.loadTexts: mscDclVsFramerNRatesTrafficIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclVsFramerNRatesTrafficIndex.setDescription('This variable represents the next to last index for the mscDclVsFramerNRatesTable.')
mscDclVsFramerNRatesRateIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2, 479, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("min", 0), ("max", 1))))
if mibBuilder.loadTexts: mscDclVsFramerNRatesRateIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclVsFramerNRatesRateIndex.setDescription('This variable represents the final index for the mscDclVsFramerNRatesTable.')
mscDclVsFramerNRatesValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2, 479, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 66, 67, 68, 69, 70))).clone(namedValues=NamedValues(("n00", 0), ("n03", 1), ("n12", 2), ("n24", 3), ("n48", 4), ("n72", 5), ("n96", 6), ("n120", 7), ("n144", 8), ("n80", 66), ("n160", 67), ("n240", 68), ("n320", 69), ("n640", 70)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscDclVsFramerNRatesValue.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclVsFramerNRatesValue.setDescription('This variable represents an individual value for the mscDclVsFramerNRatesTable.')
mscDclVsFramerVfpDebug = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2, 5))
mscDclVsFramerVfpDebugRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2, 5, 1), )
if mibBuilder.loadTexts: mscDclVsFramerVfpDebugRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclVsFramerVfpDebugRowStatusTable.setDescription('This entry controls the addition and deletion of mscDclVsFramerVfpDebug components.')
mscDclVsFramerVfpDebugRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2, 5, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclIndex"), (0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclVsIndex"), (0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclVsFramerIndex"), (0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclVsFramerVfpDebugIndex"))
if mibBuilder.loadTexts: mscDclVsFramerVfpDebugRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclVsFramerVfpDebugRowStatusEntry.setDescription('A single entry in the table represents a single mscDclVsFramerVfpDebug component.')
mscDclVsFramerVfpDebugRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2, 5, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclVsFramerVfpDebugRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclVsFramerVfpDebugRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscDclVsFramerVfpDebug components. These components cannot be added nor deleted.')
mscDclVsFramerVfpDebugComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2, 5, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclVsFramerVfpDebugComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclVsFramerVfpDebugComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscDclVsFramerVfpDebugStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2, 5, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclVsFramerVfpDebugStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclVsFramerVfpDebugStorageType.setDescription('This variable represents the storage type value for the mscDclVsFramerVfpDebug tables.')
mscDclVsFramerVfpDebugIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2, 5, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscDclVsFramerVfpDebugIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclVsFramerVfpDebugIndex.setDescription('This variable represents the index for the mscDclVsFramerVfpDebug tables.')
mscDclVsFramerMvpDebug = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2, 6))
mscDclVsFramerMvpDebugRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2, 6, 1), )
if mibBuilder.loadTexts: mscDclVsFramerMvpDebugRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclVsFramerMvpDebugRowStatusTable.setDescription('This entry controls the addition and deletion of mscDclVsFramerMvpDebug components.')
mscDclVsFramerMvpDebugRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2, 6, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclIndex"), (0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclVsIndex"), (0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclVsFramerIndex"), (0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclVsFramerMvpDebugIndex"))
if mibBuilder.loadTexts: mscDclVsFramerMvpDebugRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclVsFramerMvpDebugRowStatusEntry.setDescription('A single entry in the table represents a single mscDclVsFramerMvpDebug component.')
mscDclVsFramerMvpDebugRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2, 6, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclVsFramerMvpDebugRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclVsFramerMvpDebugRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscDclVsFramerMvpDebug components. These components cannot be added nor deleted.')
mscDclVsFramerMvpDebugComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2, 6, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclVsFramerMvpDebugComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclVsFramerMvpDebugComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscDclVsFramerMvpDebugStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2, 6, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclVsFramerMvpDebugStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclVsFramerMvpDebugStorageType.setDescription('This variable represents the storage type value for the mscDclVsFramerMvpDebug tables.')
mscDclVsFramerMvpDebugIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2, 6, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscDclVsFramerMvpDebugIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclVsFramerMvpDebugIndex.setDescription('This variable represents the index for the mscDclVsFramerMvpDebug tables.')
mscDclVsFramerPcmCapture = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2, 7))
mscDclVsFramerPcmCaptureRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2, 7, 1), )
if mibBuilder.loadTexts: mscDclVsFramerPcmCaptureRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclVsFramerPcmCaptureRowStatusTable.setDescription('This entry controls the addition and deletion of mscDclVsFramerPcmCapture components.')
mscDclVsFramerPcmCaptureRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2, 7, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclIndex"), (0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclVsIndex"), (0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclVsFramerIndex"), (0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclVsFramerPcmCaptureIndex"))
if mibBuilder.loadTexts: mscDclVsFramerPcmCaptureRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclVsFramerPcmCaptureRowStatusEntry.setDescription('A single entry in the table represents a single mscDclVsFramerPcmCapture component.')
mscDclVsFramerPcmCaptureRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2, 7, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclVsFramerPcmCaptureRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclVsFramerPcmCaptureRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscDclVsFramerPcmCapture components. These components cannot be added nor deleted.')
mscDclVsFramerPcmCaptureComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2, 7, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclVsFramerPcmCaptureComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclVsFramerPcmCaptureComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscDclVsFramerPcmCaptureStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2, 7, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclVsFramerPcmCaptureStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclVsFramerPcmCaptureStorageType.setDescription('This variable represents the storage type value for the mscDclVsFramerPcmCapture tables.')
mscDclVsFramerPcmCaptureIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 2, 7, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscDclVsFramerPcmCaptureIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclVsFramerPcmCaptureIndex.setDescription('This variable represents the index for the mscDclVsFramerPcmCapture tables.')
mscDclVsLCo = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 3))
mscDclVsLCoRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 3, 1), )
if mibBuilder.loadTexts: mscDclVsLCoRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclVsLCoRowStatusTable.setDescription('This entry controls the addition and deletion of mscDclVsLCo components.')
mscDclVsLCoRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 3, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclIndex"), (0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclVsIndex"), (0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclVsLCoIndex"))
if mibBuilder.loadTexts: mscDclVsLCoRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclVsLCoRowStatusEntry.setDescription('A single entry in the table represents a single mscDclVsLCo component.')
mscDclVsLCoRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 3, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclVsLCoRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclVsLCoRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscDclVsLCo components. These components cannot be added nor deleted.')
mscDclVsLCoComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclVsLCoComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclVsLCoComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscDclVsLCoStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclVsLCoStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclVsLCoStorageType.setDescription('This variable represents the storage type value for the mscDclVsLCo tables.')
mscDclVsLCoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 3, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscDclVsLCoIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclVsLCoIndex.setDescription('This variable represents the index for the mscDclVsLCo tables.')
mscDclVsLCoPathDataTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 3, 10), )
if mibBuilder.loadTexts: mscDclVsLCoPathDataTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclVsLCoPathDataTable.setDescription('This group contains all operational attributes for the path oriented LCo.')
mscDclVsLCoPathDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 3, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclIndex"), (0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclVsIndex"), (0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclVsLCoIndex"))
if mibBuilder.loadTexts: mscDclVsLCoPathDataEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclVsLCoPathDataEntry.setDescription('An entry in the mscDclVsLCoPathDataTable.')
mscDclVsLCoState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 3, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("pathDown", 0), ("selectingRoute", 1), ("connecting", 2), ("pathUp", 3), ("pathDownRetrying", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclVsLCoState.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclVsLCoState.setDescription('This attribute reflects the current state of the connection. The pathDown state indicates a connection that has no remote end provisioned or the application has not yet signalled for a path. The selectingRoute state occurs when a request has been sent to route selector and it has not yet responded. The connectingState occurs while a path is being established. The pathUp state is the normal operational state of a path. The pathDownRetrying state indicates a path that attempted route selection but received no route and is now waiting to retry route selection again.')
mscDclVsLCoOverrideRemoteName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 3, 10, 1, 2), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscDclVsLCoOverrideRemoteName.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclVsLCoOverrideRemoteName.setDescription("If set and the current PLC remoteName is blank this remoteName will override the blank PLC remoteName. Usually you would set this attribute and then lock/unlock the service component which will result in this new overrideRemoteName being used as if it had been provisioned into the PLC remoteName. The advantage of this attribute is that the connection's remoteName can be changed immediately without having to 'activate prov' but the disadvantage is that the overrideRemoteName is not permanent and if the card or switch is reset the override will be lost.")
mscDclVsLCoEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 3, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("calling", 0), ("called", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclVsLCoEnd.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclVsLCoEnd.setDescription('This attribute identifies whether this is the calling or called end of the path.')
mscDclVsLCoCostMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 3, 10, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclVsLCoCostMetric.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclVsLCoCostMetric.setDescription("This attribute gives the route's total cost metric. It is calculated as the sum of the cost metric of all trunks in the path at the time the connection was established. The cost metric of a trunk is defined by the trunkCost attribute of the Trunk component. The costMetric for an LCo that is originated and terminated on the same module is 0.")
mscDclVsLCoDelayMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 3, 10, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclVsLCoDelayMetric.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclVsLCoDelayMetric.setDescription('This attribute gives the total delay of the route as the one way delay for a 512 byte packet. It is calculated as the sum of the delays of all trunks in the path stored in topology at the time the connection was established. The delay for an LCo that is originated and terminated on the same module is 0.')
mscDclVsLCoRoundTripDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 3, 10, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 200000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclVsLCoRoundTripDelay.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclVsLCoRoundTripDelay.setDescription('This attribute contains the time taken for a packet (cell) of 44 bytes to be transmitted to the remote LCo and return to this LCo. The number reported is given in milliseconds to the nearest millisecond. A value of one millisecond is reported if the time is less than 1 millisecond even though the delay may be less than 1 Millisecond when the LCo is originated and terminated on the same module.')
mscDclVsLCoSetupPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 3, 10, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclVsLCoSetupPriority.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclVsLCoSetupPriority.setDescription('This attribute gives the priority at which the current path is established. Zero is the highest priority and four is the lowest. The holdingPriority, a complementary attribute of this component, indicates the priority a path maintains once it is established.')
mscDclVsLCoHoldingPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 3, 10, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclVsLCoHoldingPriority.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclVsLCoHoldingPriority.setDescription('This attribute gives the priority at which a path holds its current path once the path is established. Zero is the highest priority and four is the lowest. The setupPriority, a complementary attribute, indicates the priority of a path at establishment time.')
mscDclVsLCoRequiredTxBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 3, 10, 1, 9), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclVsLCoRequiredTxBandwidth.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclVsLCoRequiredTxBandwidth.setDescription('This attribute gives the actual bandwidth (in bits per second) reserved by this path on each of the trunks of its route. This attribute represents the bandwidth for traffic outgoing to the remote end point. The originating end of the connection determines this value.')
mscDclVsLCoRequiredRxBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 3, 10, 1, 10), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclVsLCoRequiredRxBandwidth.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclVsLCoRequiredRxBandwidth.setDescription('This attribute gives the actual bandwidth (in bits per second) reserved by this path on each of trunks of its route. This attribute represents the bandwidth for traffic incoming from the remote end point. The originating end of the connection determines this value')
mscDclVsLCoRequiredTrafficType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 3, 10, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("voice", 0), ("data", 1), ("video", 2), ("trafficType1", 3), ("trafficType2", 4), ("trafficType3", 5), ("trafficType4", 6), ("trafficType5", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclVsLCoRequiredTrafficType.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclVsLCoRequiredTrafficType.setDescription('This operational attribute indicates the type of traffic transmitted over the path. There are eight possible traffic types, and the path can transmit only one of them. The originating end of the connection determines the type. These are arbitrary designations for traffic type. The voice, data and video traffic types are defined, and five other arbitrary traffic types can be defined by the network administration. This attribute is used in the route selection process to restrict the route to trunks that support this traffic type. The supportedTrafficType trunk attribute lists all the types of traffic allowed on the trunk. For example, if requiredTrafficType is specified as trafficType1 then only trunks that include trafficType1 in supportedTrafficType, will be candidates for this connection.')
mscDclVsLCoPermittedTrunkTypes = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 3, 10, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclVsLCoPermittedTrunkTypes.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclVsLCoPermittedTrunkTypes.setDescription("This operational attribute lists up to eight types of trunk that can be used on the route. The originating end of the connection determines the types. The terrestrial and satellite trunk types have been defined, leaving six remaining arbitrary types that can be defined by the network administration. The trunk's type is indicated in the trunkType attribute of the Trunk component. When selecting a route, PORS only chooses trunks whose trunkType are in the permittedTrunkTypes for the path. Description of bits: terrestrial(0) satellite(1) trunkType1(2) trunkType2(3) trunkType3(4) trunkType4(5) trunkType5(6) trunkType6(7)")
mscDclVsLCoRequiredSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 3, 10, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclVsLCoRequiredSecurity.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclVsLCoRequiredSecurity.setDescription("This attribute indicates the required minimum level of security of the trunks on the route. Zero represents the most secure and seven represents the least secure. The trunk's security is indicated by the trunkSecurity attribute of the Trunk component, and has values identical in range and meaning to the requiredSecurity attribute. PORS ensures that any route selected does not contain a trunk whose trunkSecurity attribute is numerically greater than the requiredSecurity.")
mscDclVsLCoRequiredCustomerParameter = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 3, 10, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclVsLCoRequiredCustomerParameter.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclVsLCoRequiredCustomerParameter.setDescription('This attribute indicates the allowed customer defined parameter of the trunks on the route.The originating end of the connection determines the customer defined parameter. Its value, a number from zero to seven, is chosen by a network administration to have a meaning specific to their network, thus allowing them to customize the use of their trunks. A complementary trunk attribute, customerParameter, also has a value from zero to seven. The route selection process does not consider trunks whose customerParameter is greater than the requiredCustomerParameter of the path.')
mscDclVsLCoEmissionPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 3, 10, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclVsLCoEmissionPriority.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclVsLCoEmissionPriority.setDescription('This attribute indicates the urgency with which packets on the path are emitted by the trunks on the route. The originating end of the connection selects the emissionPriority. EmissionPriority of zero indicates the highest emission priority, while two indicates the lowest emission priority. Packets with a higher emissionPriority (or numerically less) are serviced and sent out before the packets of lower emissionPriority (or numerically higher).')
mscDclVsLCoDiscardPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 3, 10, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclVsLCoDiscardPriority.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclVsLCoDiscardPriority.setDescription('This attribute indicates the importance of the packets on the path.The originating end of the connection sets discardPriority. One is used for paths carrying the most important traffic, and three is used for paths carrying the least important traffic. Packets with lower discardPriority(numerically lower) are discarded after packets with a higher discardPriority(numerically higher).')
mscDclVsLCoPathType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 3, 10, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("normal", 0), ("manual", 1), ("forced", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclVsLCoPathType.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclVsLCoPathType.setDescription('This attribute indicates whether the path for this PLC was determined automatically or by static provisioning. Normal pathTypes are selected automatically by Route Selector.The other pathTypes are both manual pathTypes where the operator must specify, through provisioning, a static route termed the manualPath. A manual pathType connection is nearly identical to a normal path type connection with the exception that the route is pre-provisioned. For a manual pathType, bandwidth reservations are respected along the path exactly as in a normal path. The last type, the forced pathType, is also a manual path but regardless of the bandwidth available the route is granted provided the trunks are operational and there are sufficient Logical Channels (LChs). The forced pathType could result in over committing the reserved bandwidth allowed on a trunk. A better way to achieve the effects of a forced pathType is to use a manual pathType with setupPriority = 0 and holdingPriority = 0. In this manner the path will reserve correct bandwidth and it will bump other paths if required while not being bumped itself.')
mscDclVsLCoRetryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 3, 10, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclVsLCoRetryCount.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclVsLCoRetryCount.setDescription('This attribute is the count of the number of times the path chosen during route selection could not be instantiated. This count should be three or below if the network is performing adequately. A high value indicates that the route selection is often performed using an out-of-date view of available network bandwidth and/or topology. This attribute will only increase at the calling end of the connection. This attribute is reset each time a path reconnects and stops counting when it reaches its maximum value.')
mscDclVsLCoPathFailureCount = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 3, 10, 1, 19), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclVsLCoPathFailureCount.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclVsLCoPathFailureCount.setDescription('This attribute is the count of the number of times the path has successfully connected. It is set to zero the first time the path is up. If a path fails anytime after connecting this count will be incremented when the path is up again. Failed route requests do not count in this statistic. See retryCount above. This attribute stops counting at its maximum value.')
mscDclVsLCoReasonForNoRoute = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 3, 10, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("none", 0), ("destinationNameTooLong", 1), ("destinationNotSpecified", 2), ("unknownDestinationName", 3), ("incorrectDestination", 4), ("incorrectDestinationEndPoint", 5), ("unknownSource", 6), ("unknownDestination", 7), ("sameNode", 8), ("routeCostTooMuch", 9), ("routesDelayTooLong", 10), ("attributesNotMet", 11), ("anError", 12), ("attributeProfileProblem", 13), ("manualPathIndexProblem", 14))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclVsLCoReasonForNoRoute.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclVsLCoReasonForNoRoute.setDescription("This attribute is the route selection's reasonForNoRoute and provides a brief reason for which a route was not selected. The reasons are essentially self-explanatory. Perhaps two reasons for no route require some explanation. The reason unknownRemoteNodeName is issued when the remote node name is not in the topological database. The reason plcAttributesNotMet is issued when there is no network connectivity at a level specified by the PLC attributes. This reason is also issued when there is no physical connectivity between two end nodes.")
mscDclVsLCoLastTearDownReason = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 3, 10, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23))).clone(namedValues=NamedValues(("none", 0), ("normalShutDown", 1), ("insufficientTxLcOrBandwidth", 2), ("insufficientRxLcOrBandwidth", 3), ("trunkFailure", 4), ("trunkCardFailure", 5), ("operatorForced", 6), ("lostLcnClash", 7), ("networkCongestion", 8), ("trunkNotFound", 9), ("farEndNotFound", 10), ("wrongModuleReached", 11), ("farEndBusy", 12), ("callLoopedBack", 13), ("unknownReason", 14), ("farEndNotReady", 15), ("remoteNameMismatch", 16), ("serviceTypeMismatch", 17), ("reconnectFromFarEnd", 18), ("bumped", 19), ("accessCardFailure", 20), ("optimized", 21), ("overrideRemoteName", 22), ("trunkOrFarEndDidNotSupportMode", 23))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclVsLCoLastTearDownReason.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclVsLCoLastTearDownReason.setDescription("This attribute reflects the last tear down reason for a connection (LCo). In many cases this displays the reason for a momentary service interruption. This attribute applies to the last path failure only. If a path is no longer up, this may give an indication to the reason that the path has failed. In many cases an alarm will also be generated with more specific information. The following is a brief description of the reasons: none - This path has no information for the teardown this is typical of a path provisioned with no remoteName that has not been up. normalShutDown - This path has gone down due to normal call termination. insufficientTxLcOrBandwidth - At present there is either no available bandwidth or logical channel numbers available on one or more of the trunks for this path in the transmit direction. insufficientRxLcOrBandwidth - At present there is either no available bandwidth or logical channel numbers available on one or more of the trunks for this path in the receive direction. trunkFailure- A trunk on the path has failed or has gone down due to a provisioning change of a critical attribute. trunkCardFailure- A trunk FP card has failed along the path. accessCardFailure- The FP on which the peer access service was running has failed. operatorForced- The path has terminated due to the operator locking a trunk along the path. lostLcnClash- The path has terminated because the PA's at both ends of an intermediate trunk have allocated the same LC to different calls. When this happens both calls must go down and then try to come up again a fraction of a second later (effectively ensuring that they will now be assigned different LC's). It is normal to get the odd clash especially when the PA's usedLC is approaching the PA's maxLC. networkCongestion - The path has failed due to control information being lost and not recoverable. trunkNotFound - Occurs on a manual path usually. Check for trunks not up or names provisioned incorrectly. farEndNotFound - The far end is not provisioned or is not up. Check remote Name. wrongModuleReached - This may occur on a manual path. Check provisioning for correct trunk and service names. For a normal path, the network Topology may be changing check remoteName. farEndBusy - The far end has been reached but it is busy. Check remoteName and remote end provisioning. callLoopedBack - This LCo is provisioned to call itself. Re- provision since this is invalid. unknownReason - The failure was not resolved. farEndNotReady - The remote end was reached but the connection was refused due to the remote end not being enabled. remoteNameMismatch - The remote end has alarmed and rejected this setup due to remoteName provisioning. serviceTypeMismatch - The remote Service Type does not match this service type. Check provisioning. reconnectFromFarEnd - The remote end re-established this connection. Check the remote end lastTearDownReason to determine the real reason. bumped - Another call bumped this path from a trunk to get bandwidth (or an LC) which it required to come up. This other path had a higher setupPriority than this path's holdingPriority hence it was allowed to steal the bandwidth (or LC) from this path. optimized - This call has been rerouted due to the optimization feature. The call is still active this just indicates why the path changed. trunkOrFarEndDidNotSupportMode - This call was unable to complete because a mode required by the service was not supported by one of the trunks the route went through or by the far end service it connected to. Currently the only mode that this applies to is the map/mux mode on TRUNK PA ATM component. Map mode was required by the application (CES/FrAtm etc.) but was not available on the TRUNK PA ATM component through which the call was routed or the far end CES/FrAtm component did not specify the same mode.")
mscDclVsLCoPathFailureAction = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 3, 10, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disconnectConnection", 0), ("reRoutePath", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclVsLCoPathFailureAction.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclVsLCoPathFailureAction.setDescription('This attribute displays whether the application is set to tolerate momentary interruption of a path while a new path is selected. If disconnectConnection is displayed, the application is informed as soon as possible about a failure by disconnection. If the attribute displays reRoutePath, the path may attempt an immediate reroute, provided the failure is a recoverable failure. If rerouting fails the application is informed of the failure. With this option set to reRoutePath the LCo may wait up to 30 seconds before informing the service of complete disconnection in order to allow both ends to attempt to reconnect. Note that if PLC components are different at both ends only the calling end is allowed to reconnect. All pathTypes respect this attribute. Also on a manualPath with both ends provisioned with independent paths (at least with respect to the failure) this option will have the desired effect that the path is rerouted without complete disconnection at both ends')
mscDclVsLCoBumpPreference = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 3, 10, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("bumpWhenNecessary", 0), ("bumpToObtainBestRoute", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclVsLCoBumpPreference.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclVsLCoBumpPreference.setDescription("This attribute specifies when bumping will occur during route selection process. Bumping may occur when necessary or always. It will be necessary for a connection to bump if there is not enough resources for the connection to be established and these resources are occupied by a connection whose setupPriority is lower (numerically higher) than the connection's setupPriority. A connection may also always bump in order to obtain the best route.")
mscDclVsLCoOptimization = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 3, 10, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclVsLCoOptimization.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclVsLCoOptimization.setDescription('This attribute is used to specify whether this connection should attempt to optimize its path when requested by the routing PORS component. Every path is as optimal as it can be when it is established, but as network traffic patterns and configurations change this path may no longer be as optimal as it could be. The PORS connection manager on a module requests circuits to optimize at the optimization interval.')
mscDclVsLCoPathUpDateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 3, 10, 1, 25), EnterpriseDateAndTime().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(19, 19), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclVsLCoPathUpDateTime.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclVsLCoPathUpDateTime.setDescription('This is the time stamp when the current path was established or reestablished.')
mscDclVsLCoStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 3, 11), )
if mibBuilder.loadTexts: mscDclVsLCoStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclVsLCoStatsTable.setDescription('This group contains the operational statistics attributes for the path oriented LCo.')
mscDclVsLCoStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 3, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclIndex"), (0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclVsIndex"), (0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclVsLCoIndex"))
if mibBuilder.loadTexts: mscDclVsLCoStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclVsLCoStatsEntry.setDescription('An entry in the mscDclVsLCoStatsTable.')
mscDclVsLCoPktsToNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 3, 11, 1, 1), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclVsLCoPktsToNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclVsLCoPktsToNetwork.setDescription('This attribute counts the number of packets transmitted to the network over this Logical Connection.')
mscDclVsLCoBytesToNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 3, 11, 1, 2), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclVsLCoBytesToNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclVsLCoBytesToNetwork.setDescription('This attribute counts the number of bytes sent to the network over this Logical Connection.')
mscDclVsLCoPktsFromNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 3, 11, 1, 3), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclVsLCoPktsFromNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclVsLCoPktsFromNetwork.setDescription('This attribute counts the number of packets received from the remote LCo via the network.')
mscDclVsLCoBytesFromNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 3, 11, 1, 4), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclVsLCoBytesFromNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclVsLCoBytesFromNetwork.setDescription('This attribute counts the number of bytes received from the remote LCo via the network.')
mscDclVsLCoPathTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 3, 264), )
if mibBuilder.loadTexts: mscDclVsLCoPathTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclVsLCoPathTable.setDescription('This attribute contains the trunk component names over which the path has been instantiated and the remote end point name terminating the path.')
mscDclVsLCoPathEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 3, 264, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclIndex"), (0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclVsIndex"), (0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclVsLCoIndex"), (0, "Nortel-MsCarrier-MscPassport-DcmeMIB", "mscDclVsLCoPathValue"))
if mibBuilder.loadTexts: mscDclVsLCoPathEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclVsLCoPathEntry.setDescription('An entry in the mscDclVsLCoPathTable.')
mscDclVsLCoPathValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 130, 4, 3, 264, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDclVsLCoPathValue.setStatus('mandatory')
if mibBuilder.loadTexts: mscDclVsLCoPathValue.setDescription('This variable represents both the value and the index for the mscDclVsLCoPathTable.')
dcmeGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 134, 1))
dcmeGroupCA = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 134, 1, 1))
dcmeGroupCA02 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 134, 1, 1, 3))
dcmeGroupCA02A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 134, 1, 1, 3, 2))
dcmeCapabilities = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 134, 3))
dcmeCapabilitiesCA = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 134, 3, 1))
dcmeCapabilitiesCA02 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 134, 3, 1, 3))
dcmeCapabilitiesCA02A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 134, 3, 1, 3, 2))
mibBuilder.exportSymbols("Nortel-MsCarrier-MscPassport-DcmeMIB", mscDclOperEntry=mscDclOperEntry, mscDclVsFramerStateEntry=mscDclVsFramerStateEntry, mscDclTotal64kCalls=mscDclTotal64kCalls, mscDclStatsTable=mscDclStatsTable, mscDclVsTotalCallSeconds=mscDclVsTotalCallSeconds, mscDclVsFramerOperTable=mscDclVsFramerOperTable, mscDclRowStatusTable=mscDclRowStatusTable, mscDclVsStateEntry=mscDclVsStateEntry, mscDclVsOperTable=mscDclVsOperTable, mscDclVsLCoRetryCount=mscDclVsLCoRetryCount, mscDclVsFramerVfpDebugIndex=mscDclVsFramerVfpDebugIndex, dcmeGroupCA02=dcmeGroupCA02, mscDcmeProfileRequiredTrafficType=mscDcmeProfileRequiredTrafficType, mscDclVsFramerCurrentEncodingRate=mscDclVsFramerCurrentEncodingRate, mscDclVsFramerPcmCaptureIndex=mscDclVsFramerPcmCaptureIndex, mscDclVsLCoStatsTable=mscDclVsLCoStatsTable, mscDclVsFramerAdminState=mscDclVsFramerAdminState, mscDclAlternateIdlePattern=mscDclAlternateIdlePattern, mscDclVsStatus=mscDclVsStatus, mscDcmeProfileSilenceSuppression=mscDcmeProfileSilenceSuppression, mscDclVsReceivedAbBits=mscDclVsReceivedAbBits, mscDclFramerInterfaceName=mscDclFramerInterfaceName, mscDclVsLCoBytesFromNetwork=mscDclVsLCoBytesFromNetwork, mscDclVsFramerNEncodingEntry=mscDclVsFramerNEncodingEntry, mscDclVsLCoPathType=mscDclVsLCoPathType, mscDclVsFramerSilenceCells=mscDclVsFramerSilenceCells, mscDclVsLCoEmissionPriority=mscDclVsLCoEmissionPriority, mscDcmeProfileDiscardPriority=mscDcmeProfileDiscardPriority, mscDclFramerUsageState=mscDclFramerUsageState, mscDclVsLCoPathUpDateTime=mscDclVsLCoPathUpDateTime, mscDclVsFramerCurrentRate=mscDclVsFramerCurrentRate, mscDcmeProfileEgressAudioGain=mscDcmeProfileEgressAudioGain, mscDclOperationalState=mscDclOperationalState, mscDclVsOperationalState=mscDclVsOperationalState, mscDclVsFramerComponentName=mscDclVsFramerComponentName, mscDclVsFramerIndex=mscDclVsFramerIndex, mscDclVsFramerNegEntry=mscDclVsFramerNegEntry, mscDclReceivedTrmSignal=mscDclReceivedTrmSignal, mscDclVsFramerFrmToNetworkEntry=mscDclVsFramerFrmToNetworkEntry, mscDclVsStatsTable=mscDclVsStatsTable, mscDclVsFramerNEncodingIndex=mscDclVsFramerNEncodingIndex, mscDclVsFramerOperEntry=mscDclVsFramerOperEntry, mscDclVsLCoPathDataTable=mscDclVsLCoPathDataTable, mscDclVsLCoBumpPreference=mscDclVsLCoBumpPreference, mscDcmeProfileLCOpsTable=mscDcmeProfileLCOpsTable, mscDcmeProfileOptimization=mscDcmeProfileOptimization, mscDclVsLCoDelayMetric=mscDclVsLCoDelayMetric, mscDcmeProfileVoiceTrafficOptimization=mscDcmeProfileVoiceTrafficOptimization, mscDclVsLCoEnd=mscDclVsLCoEnd, mscDcmeActiveDcmeLinksTable=mscDcmeActiveDcmeLinksTable, mscDcmeProfileIndex=mscDcmeProfileIndex, mscDclVsFramerNegotiatedDtmfRegeneration=mscDclVsFramerNegotiatedDtmfRegeneration, mscDclOperTable=mscDclOperTable, mscDclVsFramerProvTable=mscDclVsFramerProvTable, mscDclDnaAddressTable=mscDclDnaAddressTable, mscDclVsLCoPktsFromNetwork=mscDclVsLCoPktsFromNetwork, mscDcmeProfileMaximumAcceptableDelay=mscDcmeProfileMaximumAcceptableDelay, mscDcmeStorageType=mscDcmeStorageType, mscDclVsIndex=mscDclVsIndex, mscDclVsLCoRequiredTxBandwidth=mscDclVsLCoRequiredTxBandwidth, mscDclVsLCoPathTable=mscDclVsLCoPathTable, mscDcmeTrm64kNotAvailable=mscDcmeTrm64kNotAvailable, mscDclVsComponentName=mscDclVsComponentName, mscDclVsTransmittedAbBits=mscDclVsTransmittedAbBits, mscDcmeProfileDtmfRegeneration=mscDcmeProfileDtmfRegeneration, mscDclVsFramerVfpDebugRowStatusEntry=mscDclVsFramerVfpDebugRowStatusEntry, mscDclTransmittedTrmSignal=mscDclTransmittedTrmSignal, mscDclVsLCoRequiredRxBandwidth=mscDclVsLCoRequiredRxBandwidth, mscDclTotal3kHzCalls=mscDclTotal3kHzCalls, mscDclVsInvalidAbBits=mscDclVsInvalidAbBits, mscDclVsFramerFrmDumped=mscDclVsFramerFrmDumped, mscDclVsFramerMvpDebug=mscDclVsFramerMvpDebug, mscDcmeProfileIngressAudioGain=mscDcmeProfileIngressAudioGain, mscDclVsFramerProvEntry=mscDclVsFramerProvEntry, mscDclVsFramerMvpDebugComponentName=mscDclVsFramerMvpDebugComponentName, mscDclVsFramerRowStatus=mscDclVsFramerRowStatus, mscDclVsLCoComponentName=mscDclVsLCoComponentName, mscDclFramerOperationalState=mscDclFramerOperationalState, mscDclVsFramerUsageState=mscDclVsFramerUsageState, mscDcl=mscDcl, mscDclDnaRowStatusEntry=mscDclDnaRowStatusEntry, mscDcmeStateTable=mscDcmeStateTable, mscDclFramerStateEntry=mscDclFramerStateEntry, mscDclVsRowStatusTable=mscDclVsRowStatusTable, mscDclVsFramerModemFaxCells=mscDclVsFramerModemFaxCells, mscDclTotalSpeechCalls=mscDclTotalSpeechCalls, mscDcmeProfilePermittedTrunkTypes=mscDcmeProfilePermittedTrunkTypes, mscDclAdminState=mscDclAdminState, mscDcmeProfileVoiceEncoding=mscDcmeProfileVoiceEncoding, mscDclFramerIndex=mscDclFramerIndex, mscDclVsFramerCurrentEncoding=mscDclVsFramerCurrentEncoding, mscDcmeTrmSpeechNotAvailable=mscDcmeTrmSpeechNotAvailable, mscDcmeAudio3kHzAlarmThreshold=mscDcmeAudio3kHzAlarmThreshold, mscDclVsLCoBytesToNetwork=mscDclVsLCoBytesToNetwork, mscDclVsFramerNegotiatedTandemPassThrough=mscDclVsFramerNegotiatedTandemPassThrough, mscDclVsFramerMvpDebugRowStatusEntry=mscDclVsFramerMvpDebugRowStatusEntry, mscDclVsFramerModemSilenceCells=mscDclVsFramerModemSilenceCells, mscDclVsFramerPcmCaptureRowStatus=mscDclVsFramerPcmCaptureRowStatus, mscDclVsFramerNegotiatedSilenceSuppression=mscDclVsFramerNegotiatedSilenceSuppression, mscDclVs=mscDclVs, mscDclVsLCoRowStatusTable=mscDclVsLCoRowStatusTable, dcmeCapabilities=dcmeCapabilities, mscDcmePreestablishedConnections=mscDcmePreestablishedConnections, mscDclVsFramerRowStatusTable=mscDclVsFramerRowStatusTable, mscDclVsFramerNRatesEntry=mscDclVsFramerNRatesEntry, mscDclVsFramerMvpDebugRowStatusTable=mscDclVsFramerMvpDebugRowStatusTable, mscDcmeProfileRowStatusEntry=mscDcmeProfileRowStatusEntry, mscDclVsFramerModemCells=mscDclVsFramerModemCells, mscDclActiveSpeechCalls=mscDclActiveSpeechCalls, mscDclVsFramerInterfaceName=mscDclVsFramerInterfaceName, mscDclVsFramer=mscDclVsFramer, mscDclVsLCoPathEntry=mscDclVsLCoPathEntry, mscDclVsFramerNEncodingTable=mscDclVsFramerNEncodingTable, mscDclVsFramerPcmCaptureRowStatusTable=mscDclVsFramerPcmCaptureRowStatusTable, mscDcmeIndex=mscDcmeIndex, mscDclVsLCoPathFailureAction=mscDclVsLCoPathFailureAction, mscDclVsOperEntry=mscDclVsOperEntry, mscDclDna=mscDclDna, mscDcmeRowStatus=mscDcmeRowStatus, mscDcmeProfileSpeechHangoverTime=mscDcmeProfileSpeechHangoverTime, mscDcmeStateEntry=mscDcmeStateEntry, mscDclActive3kHzCalls=mscDclActive3kHzCalls, mscDclFramerStateTable=mscDclFramerStateTable, mscDclVsFramerNRatesRateIndex=mscDclVsFramerNRatesRateIndex, mscDclStatsEntry=mscDclStatsEntry, mscDclVsFramerPcmCapture=mscDclVsFramerPcmCapture, dcmeCapabilitiesCA02A=dcmeCapabilitiesCA02A, dcmeGroupCA02A=dcmeGroupCA02A, mscDclDnaRowStatusTable=mscDclDnaRowStatusTable, mscDcmeProfileMaxVoiceBitRate=mscDcmeProfileMaxVoiceBitRate, mscDcmeDLinksTable=mscDcmeDLinksTable, mscDclVsFramerVfpDebugRowStatusTable=mscDclVsFramerVfpDebugRowStatusTable, mscDclVsStatsEntry=mscDclVsStatsEntry, mscDcmeActiveDcmeLinksEntry=mscDcmeActiveDcmeLinksEntry, mscDcmeProfileRequiredSecurity=mscDcmeProfileRequiredSecurity, mscDclVsLCoHoldingPriority=mscDclVsLCoHoldingPriority, mscDcmeProfileSetupPriority=mscDcmeProfileSetupPriority, mscDclVsStorageType=mscDclVsStorageType, mscDclVsLCoPermittedTrunkTypes=mscDclVsLCoPermittedTrunkTypes, mscDclVsFramerFaxIdleCells=mscDclVsFramerFaxIdleCells, mscDclVsLCo=mscDclVsLCo, mscDclVsFramerNegTable=mscDclVsFramerNegTable, mscDcmeProfileRowStatus=mscDcmeProfileRowStatus, mscDcmeProfileFaxIdleSuppressionG711G726=mscDcmeProfileFaxIdleSuppressionG711G726, mscDclVsFramerFrmLostInNetwork=mscDclVsFramerFrmLostInNetwork, mscDclVsFramerPcmCaptureStorageType=mscDclVsFramerPcmCaptureStorageType, mscDcmeProfileMinModemFaxG711G726Rate=mscDcmeProfileMinModemFaxG711G726Rate, mscDcmeProfileMaxModemFaxG711G726Rate=mscDcmeProfileMaxModemFaxG711G726Rate, mscDcmeUsageState=mscDcmeUsageState, mscDcmeDLinksEntry=mscDcmeDLinksEntry, mscDclComponentName=mscDclComponentName, mscDclIndex=mscDclIndex, mscDclDnaNumberingPlanIndicator=mscDclDnaNumberingPlanIndicator, mscDclVsFramerFrmFromNetworkIndex=mscDclVsFramerFrmFromNetworkIndex, mscDcmeProvEntry=mscDcmeProvEntry, mscDclUsageState=mscDclUsageState, mscDcmeAlarmTimeInterval=mscDcmeAlarmTimeInterval, mscDcmeComponentName=mscDcmeComponentName, mscDcmeRowStatusTable=mscDcmeRowStatusTable, mscDcmeProfileComfortNoiseCap=mscDcmeProfileComfortNoiseCap, mscDclFramerRowStatus=mscDclFramerRowStatus, mscDcmeProfileV17EncodedAsG711G726=mscDcmeProfileV17EncodedAsG711G726, mscDclVsLCoIndex=mscDclVsLCoIndex, mscDclVsLCoStorageType=mscDclVsLCoStorageType, mscDcmeProfileRequiredCustomerParm=mscDcmeProfileRequiredCustomerParm, mscDclStateEntry=mscDclStateEntry, mscDcmeProfileModemFaxEncoding=mscDcmeProfileModemFaxEncoding, mscDclVsLCoRoundTripDelay=mscDclVsLCoRoundTripDelay, mscDclFramerStorageType=mscDclFramerStorageType, mscDcmeProfileBumpPreference=mscDcmeProfileBumpPreference, mscDclVsFramerMvpDebugStorageType=mscDclVsFramerMvpDebugStorageType, mscDclActive64kCalls=mscDclActive64kCalls, dcmeCapabilitiesCA=dcmeCapabilitiesCA, mscDclStateTable=mscDclStateTable, mscDcmeActiveDcmeLinksValue=mscDcmeActiveDcmeLinksValue, mscDclVsFramerAudioCells=mscDclVsFramerAudioCells, mscDcmeStatsTable=mscDcmeStatsTable, mscDclVsFramerTotalCells=mscDclVsFramerTotalCells, mscDcmeProfileSilenceSuppressionFactor=mscDcmeProfileSilenceSuppressionFactor, mscDclFramerProvEntry=mscDclFramerProvEntry, mscDcmeRowStatusEntry=mscDcmeRowStatusEntry, mscDclRemoteNpi=mscDclRemoteNpi, mscDclVsFramerFaxRelayCells=mscDclVsFramerFaxRelayCells, mscDclVsLCoRowStatusEntry=mscDclVsLCoRowStatusEntry, mscDcmeProfilePathFailureAction=mscDcmeProfilePathFailureAction, mscDclVsFramerFrmToNetworkIndex=mscDclVsFramerFrmToNetworkIndex, mscDclVsFramerFrmFromNetworkValue=mscDclVsFramerFrmFromNetworkValue, mscDclVsLCoPathDataEntry=mscDclVsLCoPathDataEntry, mscDclDnaComponentName=mscDclDnaComponentName, mscDclVsLCoSetupPriority=mscDclVsLCoSetupPriority, mscDclVsFramerNRatesTable=mscDclVsFramerNRatesTable, mscDclVsLCoState=mscDclVsLCoState, mscDclVsFramerStateTable=mscDclVsFramerStateTable, mscDclIdlePattern=mscDclIdlePattern, mscDclVsLCoOverrideRemoteName=mscDclVsLCoOverrideRemoteName, mscDclFramerComponentName=mscDclFramerComponentName, mscDclVsFramerLrcErrors=mscDclVsFramerLrcErrors, mscDcmeDLinksValue=mscDcmeDLinksValue, mscDclVsLCoPathValue=mscDclVsLCoPathValue, mscDcmeProfileModemFaxSpeechDiscrim=mscDcmeProfileModemFaxSpeechDiscrim, mscDcmeAdminState=mscDcmeAdminState, mscDclVsFramerFrmToNetworkValue=mscDclVsFramerFrmToNetworkValue, mscDclDnaRowStatus=mscDclDnaRowStatus, mscDclVsFramerNEncodingValue=mscDclVsFramerNEncodingValue, mscDclFramerRowStatusTable=mscDclFramerRowStatusTable, mscDcmeProfileEmissionPriority=mscDcmeProfileEmissionPriority, mscDclVsFramerFrmUnderRuns=mscDclVsFramerFrmUnderRuns, mscDcmeDLinksRowStatus=mscDcmeDLinksRowStatus, mscDcmeProfileHoldingPriority=mscDcmeProfileHoldingPriority, mscDclVsFramerFrmFromNetworkTable=mscDclVsFramerFrmFromNetworkTable, mscDclVsFramerNRatesValue=mscDclVsFramerNRatesValue, mscDclDnaAddressEntry=mscDclDnaAddressEntry, mscDclVsFramerVfpDebugStorageType=mscDclVsFramerVfpDebugStorageType, mscDcmeUnrestricted64kAlarmThreshold=mscDcmeUnrestricted64kAlarmThreshold, mscDclFramerAdminState=mscDclFramerAdminState, mscDclVsFramerNegotiatedV17AsG711G726=mscDclVsFramerNegotiatedV17AsG711G726, mscDcmeProfileMaximumAcceptableCost=mscDcmeProfileMaximumAcceptableCost, mscDclVsLCoReasonForNoRoute=mscDclVsLCoReasonForNoRoute, mscDclRemoteDna=mscDclRemoteDna, mscDcmeProfileInsertedOutputDelay=mscDcmeProfileInsertedOutputDelay, mscDclFramer=mscDclFramer, mscDclVsProvTable=mscDclVsProvTable, mscDclVsLCoLastTearDownReason=mscDclVsLCoLastTearDownReason, mscDcmeOperationalState=mscDcmeOperationalState, mscDcmeProfileMaxFaxRelayRate=mscDcmeProfileMaxFaxRelayRate, mscDclVsFramerRowStatusEntry=mscDclVsFramerRowStatusEntry, mscDclVsFramerTptStatus=mscDclVsFramerTptStatus, mscDclVsLCoStatsEntry=mscDclVsLCoStatsEntry, mscDclVsProvEntry=mscDclVsProvEntry, mscDclFramerProvTable=mscDclFramerProvTable, mscDclRejected3kHzCalls=mscDclRejected3kHzCalls, mscDclVsFramerVfpDebugRowStatus=mscDclVsFramerVfpDebugRowStatus, mscDcmeProfilePathAttributeToMinimize=mscDcmeProfilePathAttributeToMinimize, mscDclVsAdminState=mscDclVsAdminState, mscDclVsLCoRowStatus=mscDclVsLCoRowStatus, mscDclVsFramerFrmToNetworkTable=mscDclVsFramerFrmToNetworkTable, mscDclVsFramerVfpDebug=mscDclVsFramerVfpDebug, mscDcmeProfile=mscDcmeProfile, mscDclFramerRowStatusEntry=mscDclFramerRowStatusEntry, mscDcmeTrmSignalChangeInterval=mscDcmeTrmSignalChangeInterval, mscDclRowStatus=mscDclRowStatus, mscDcmeProfileEchoCancellation=mscDcmeProfileEchoCancellation, mscDclVsLCoPktsToNetwork=mscDclVsLCoPktsToNetwork, mscDclVsUsageState=mscDclVsUsageState, mscDclDnaIndex=mscDclDnaIndex, mscDcmeProfileRowStatusTable=mscDcmeProfileRowStatusTable, mscDcmeProfileComponentName=mscDcmeProfileComponentName, mscDclInvalidTrmSignals=mscDclInvalidTrmSignals, dcmeGroup=dcmeGroup, mscDclProvTable=mscDclProvTable, mscDclVsVsType=mscDclVsVsType, mscDclVsFramerStatsEntry=mscDclVsFramerStatsEntry, mscDclVsLCoOptimization=mscDclVsLCoOptimization, mscDclStorageType=mscDclStorageType)
mibBuilder.exportSymbols("Nortel-MsCarrier-MscPassport-DcmeMIB", mscDclVsFramerStorageType=mscDclVsFramerStorageType, mscDclRejectedSpeechCalls=mscDclRejectedSpeechCalls, mscDcmeTrmThreshold=mscDcmeTrmThreshold, mscDclVsRowStatus=mscDclVsRowStatus, mscDclVsLCoRequiredTrafficType=mscDclVsLCoRequiredTrafficType, mscDclVsFramerPcmCaptureRowStatusEntry=mscDclVsFramerPcmCaptureRowStatusEntry, mscDclVsLCoCostMetric=mscDclVsLCoCostMetric, mscDclVsFramerFrmFromNetworkEntry=mscDclVsFramerFrmFromNetworkEntry, dcmeMIB=dcmeMIB, mscDclVsLCoRequiredCustomerParameter=mscDclVsLCoRequiredCustomerParameter, mscDclVsFramerOperationalState=mscDclVsFramerOperationalState, mscDcmeCommentText=mscDcmeCommentText, mscDcmeSpeechAlarmThreshold=mscDcmeSpeechAlarmThreshold, mscDcmeMaxUnrestricted64kCalls=mscDcmeMaxUnrestricted64kCalls, mscDclVsRowStatusEntry=mscDclVsRowStatusEntry, mscDclVsStateTable=mscDclVsStateTable, mscDcmeProfileFrOpsTable=mscDcmeProfileFrOpsTable, mscDclVsFramerMvpDebugRowStatus=mscDclVsFramerMvpDebugRowStatus, mscDclVsLCoDiscardPriority=mscDclVsLCoDiscardPriority, dcmeGroupCA=dcmeGroupCA, mscDcmeStatsEntry=mscDcmeStatsEntry, mscDcme=mscDcme, mscDclCommentText=mscDclCommentText, mscDclDnaStorageType=mscDclDnaStorageType, mscDclVsFramerMvpDebugIndex=mscDclVsFramerMvpDebugIndex, mscDclProvEntry=mscDclProvEntry, mscDclVsFramerPcmCaptureComponentName=mscDclVsFramerPcmCaptureComponentName, mscDclVsFramerNRatesTrafficIndex=mscDclVsFramerNRatesTrafficIndex, dcmeCapabilitiesCA02=dcmeCapabilitiesCA02, mscDcmeProfileStorageType=mscDcmeProfileStorageType, mscDcmeProfileLCOpsEntry=mscDcmeProfileLCOpsEntry, mscDclRejected64kCalls=mscDclRejected64kCalls, mscDclVsCallType=mscDclVsCallType, mscDclVsFramerOpCurrentEncoding=mscDclVsFramerOpCurrentEncoding, mscDclRowStatusEntry=mscDclRowStatusEntry, mscDclVsFramerOpTptStatus=mscDclVsFramerOpTptStatus, mscDclVsFramerStatsTable=mscDclVsFramerStatsTable, mscDcmeProvTable=mscDcmeProvTable, mscDclDcme=mscDclDcme, mscDclVsFramerNegotiatedFisG711G726=mscDclVsFramerNegotiatedFisG711G726, mscDcmeProfileFrOpsEntry=mscDcmeProfileFrOpsEntry, mscDclVsTotalCalls=mscDclVsTotalCalls, mscDclVsLCoRequiredSecurity=mscDclVsLCoRequiredSecurity, mscDclVsLCoPathFailureCount=mscDclVsLCoPathFailureCount, mscDclVsFramerVfpDebugComponentName=mscDclVsFramerVfpDebugComponentName, mscDclDnaDataNetworkAddress=mscDclDnaDataNetworkAddress, mscDcmeProfileMinVoiceBitRate=mscDcmeProfileMinVoiceBitRate)
