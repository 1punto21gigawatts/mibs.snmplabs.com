#
# PySNMP MIB module CISCO-PING-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-PING-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:09:28 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
CiscoNetworkAddress, CiscoNetworkProtocol = mibBuilder.importSymbols("CISCO-TC", "CiscoNetworkAddress", "CiscoNetworkProtocol")
OwnerString, = mibBuilder.importSymbols("IF-MIB", "OwnerString")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
Counter64, Counter32, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, iso, Bits, Integer32, ObjectIdentity, ModuleIdentity, MibIdentifier, TimeTicks, Unsigned32, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "Counter32", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "iso", "Bits", "Integer32", "ObjectIdentity", "ModuleIdentity", "MibIdentifier", "TimeTicks", "Unsigned32", "IpAddress")
RowStatus, TextualConvention, DisplayString, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TextualConvention", "DisplayString", "TruthValue")
ciscoPingMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 16))
ciscoPingMIB.setRevisions(('2001-08-28 00:00', '2001-05-14 00:00', '1999-10-08 00:00', '1994-11-11 00:00', '1994-07-22 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoPingMIB.setRevisionsDescriptions(('Added VPN name to notifications', 'Add VrfName attribute to support VPN ping', '', 'Redefined Ping completion trap.', 'Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoPingMIB.setLastUpdated('200108280000Z')
if mibBuilder.loadTexts: ciscoPingMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoPingMIB.setContactInfo(' Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-snmp@cisco.com')
if mibBuilder.loadTexts: ciscoPingMIB.setDescription('Modified description of ciscoPingAddress object.')
ciscoPingMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 16, 1))
ciscoPingTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 16, 1, 1), )
if mibBuilder.loadTexts: ciscoPingTable.setStatus('current')
if mibBuilder.loadTexts: ciscoPingTable.setDescription('A table of ping request entries.')
ciscoPingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 16, 1, 1, 1), ).setIndexNames((0, "CISCO-PING-MIB", "ciscoPingSerialNumber"))
if mibBuilder.loadTexts: ciscoPingEntry.setStatus('current')
if mibBuilder.loadTexts: ciscoPingEntry.setDescription('A ping request entry. A management station wishing to create an entry should first generate a pseudo-random serial number to be used as the index to this sparse table. The station should then create the associated instance of the row status and row owner objects. It must also, either in the same or in successive PDUs, create the associated instance of the protocol and address objects. It should also modify the default values for the other configuration objects if the defaults are not appropriate. Once the appropriate instance of all the configuration objects have been created, either by an explicit SNMP set request or by default, the row status should be set to active to initiate the request. Note that this entire procedure may be initiated via a single set request which specifies a row status of createAndGo as well as specifies valid values for the non-defaulted configuration objects. Once the ping sequence has been activated, it cannot be stopped -- it will run until the configured number of packets have been sent. Once the sequence completes, the management station should retrieve the values of the status objects of interest, and should then delete the entry. In order to prevent old entries from clogging the table, entries will be aged out, but an entry will never be deleted within 5 minutes of completing.')
ciscoPingSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 16, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: ciscoPingSerialNumber.setStatus('current')
if mibBuilder.loadTexts: ciscoPingSerialNumber.setDescription('Object which specifies a unique entry in the ciscoPingTable. A management station wishing to initiate a ping operation should use a pseudo-random value for this object when creating or modifying an instance of a ciscoPingEntry. The RowStatus semantics of the ciscoPingEntryStatus object will prevent access conflicts.')
ciscoPingProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 16, 1, 1, 1, 2), CiscoNetworkProtocol()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciscoPingProtocol.setStatus('current')
if mibBuilder.loadTexts: ciscoPingProtocol.setDescription('The protocol to use. Once an instance of this object is created, its value can not be changed.')
ciscoPingAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 16, 1, 1, 1, 3), CiscoNetworkAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciscoPingAddress.setStatus('current')
if mibBuilder.loadTexts: ciscoPingAddress.setDescription('The address of the device to be pinged. An instance of this object cannot be created until the associated instance of ciscoPingProtocol is created.')
ciscoPingPacketCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 16, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)).clone(5)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciscoPingPacketCount.setStatus('current')
if mibBuilder.loadTexts: ciscoPingPacketCount.setDescription('Specifies the number of ping packets to send to the target in this sequence.')
ciscoPingPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 16, 1, 1, 1, 5), Integer32().clone(100)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciscoPingPacketSize.setStatus('current')
if mibBuilder.loadTexts: ciscoPingPacketSize.setDescription('Specifies the size of ping packets to send to the target in this sequence. The lower and upper boundaries of this object are protocol-dependent. An instance of this object cannot be modified unless the associated instance of ciscoPingProtocol has been created (so as to allow protocol-specific range checking on the new value).')
ciscoPingPacketTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 16, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600000)).clone(2000)).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciscoPingPacketTimeout.setStatus('current')
if mibBuilder.loadTexts: ciscoPingPacketTimeout.setDescription("Specifies the amount of time to wait for a response to a transmitted packet before declaring the packet 'dropped.'")
ciscoPingDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 16, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600000))).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciscoPingDelay.setStatus('current')
if mibBuilder.loadTexts: ciscoPingDelay.setDescription('Specifies the minimum amount of time to wait before sending the next packet in a sequence after receiving a response or declaring a timeout for a previous packet. The actual delay may be greater due to internal task scheduling.')
ciscoPingTrapOnCompletion = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 16, 1, 1, 1, 8), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciscoPingTrapOnCompletion.setStatus('current')
if mibBuilder.loadTexts: ciscoPingTrapOnCompletion.setDescription('Specifies whether or not a ciscoPingCompletion trap should be issued on completion of the sequence of pings. If such a trap is desired, it is the responsibility of the management entity to ensure that the SNMP administrative model is configured in such a way as to allow the trap to be delivered.')
ciscoPingSentPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 16, 1, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoPingSentPackets.setStatus('current')
if mibBuilder.loadTexts: ciscoPingSentPackets.setDescription('The number of ping packets that have been sent to the target in this sequence.')
ciscoPingReceivedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 16, 1, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoPingReceivedPackets.setStatus('current')
if mibBuilder.loadTexts: ciscoPingReceivedPackets.setDescription('The number of ping packets that have been received from the target in this sequence.')
ciscoPingMinRtt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 16, 1, 1, 1, 11), Integer32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoPingMinRtt.setStatus('current')
if mibBuilder.loadTexts: ciscoPingMinRtt.setDescription('The minimum round trip time of all the packets that have been sent in this sequence. This object will not be created until the first ping response in a sequence is received.')
ciscoPingAvgRtt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 16, 1, 1, 1, 12), Integer32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoPingAvgRtt.setStatus('current')
if mibBuilder.loadTexts: ciscoPingAvgRtt.setDescription('The average round trip time of all the packets that have been sent in this sequence. This object will not be created until the first ping response in a sequence is received.')
ciscoPingMaxRtt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 16, 1, 1, 1, 13), Integer32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoPingMaxRtt.setStatus('current')
if mibBuilder.loadTexts: ciscoPingMaxRtt.setDescription('The maximum round trip time of all the packets that have been sent in this sequence. This object will not be created until the first ping response in a sequence is received.')
ciscoPingCompleted = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 16, 1, 1, 1, 14), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoPingCompleted.setStatus('current')
if mibBuilder.loadTexts: ciscoPingCompleted.setDescription('Set to true when all the packets in this sequence have been either responded to or timed out.')
ciscoPingEntryOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 16, 1, 1, 1, 15), OwnerString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciscoPingEntryOwner.setStatus('current')
if mibBuilder.loadTexts: ciscoPingEntryOwner.setDescription('The entity that configured this entry.')
ciscoPingEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 16, 1, 1, 1, 16), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciscoPingEntryStatus.setStatus('current')
if mibBuilder.loadTexts: ciscoPingEntryStatus.setDescription('The status of this table entry. Once the entry status is set to active, the associate entry cannot be modified until the sequence completes (ciscoPingCompleted is true).')
ciscoPingVrfName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 16, 1, 1, 1, 17), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciscoPingVrfName.setStatus('current')
if mibBuilder.loadTexts: ciscoPingVrfName.setDescription('This field is used to specify the VPN name in which the ping will be used. For regular ping this field should not be configured. The agent will use this field to identify the VPN routing Table for this ping. This is the same ascii string used in the CLI to refer to this VPN. ')
ciscoPingMIBTrapPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 16, 2))
ciscoPingMIBTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 16, 2, 0))
ciscoPingCompletion = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 16, 2, 0, 1)).setObjects(("CISCO-PING-MIB", "ciscoPingCompleted"), ("CISCO-PING-MIB", "ciscoPingSentPackets"), ("CISCO-PING-MIB", "ciscoPingReceivedPackets"))
if mibBuilder.loadTexts: ciscoPingCompletion.setStatus('current')
if mibBuilder.loadTexts: ciscoPingCompletion.setDescription('A ciscoPingCompleted trap is sent at the completion of a sequence of pings if such a trap was requested when the sequence was initiated. In addition to the above listed objects (which are always present), the message will contain the following objects if any responses were received: ciscoPingMinRtt ciscoPingAvgRtt ciscoPingMaxRtt It will also contain the following object if the ping is to a VPN address: ciscoPingVrfName')
ciscoPingMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 16, 3))
ciscoPingMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 16, 3, 1))
ciscoPingMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 16, 3, 2))
ciscoPingMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 16, 3, 1, 1)).setObjects(("CISCO-PING-MIB", "ciscoPingMIBGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoPingMIBCompliance = ciscoPingMIBCompliance.setStatus('obsolete')
if mibBuilder.loadTexts: ciscoPingMIBCompliance.setDescription('The compliance statement for entities which implement the Cisco Ping MIB')
ciscoPingMIBComplianceVpn = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 16, 3, 1, 2)).setObjects(("CISCO-PING-MIB", "ciscoPingMIBGroupVpn"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoPingMIBComplianceVpn = ciscoPingMIBComplianceVpn.setStatus('current')
if mibBuilder.loadTexts: ciscoPingMIBComplianceVpn.setDescription('The compliance statement for entities which implement the Cisco Ping MIB')
ciscoPingMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 16, 3, 2, 1)).setObjects(("CISCO-PING-MIB", "ciscoPingProtocol"), ("CISCO-PING-MIB", "ciscoPingAddress"), ("CISCO-PING-MIB", "ciscoPingPacketCount"), ("CISCO-PING-MIB", "ciscoPingPacketSize"), ("CISCO-PING-MIB", "ciscoPingPacketTimeout"), ("CISCO-PING-MIB", "ciscoPingDelay"), ("CISCO-PING-MIB", "ciscoPingTrapOnCompletion"), ("CISCO-PING-MIB", "ciscoPingSentPackets"), ("CISCO-PING-MIB", "ciscoPingReceivedPackets"), ("CISCO-PING-MIB", "ciscoPingMinRtt"), ("CISCO-PING-MIB", "ciscoPingAvgRtt"), ("CISCO-PING-MIB", "ciscoPingMaxRtt"), ("CISCO-PING-MIB", "ciscoPingCompleted"), ("CISCO-PING-MIB", "ciscoPingEntryOwner"), ("CISCO-PING-MIB", "ciscoPingEntryStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoPingMIBGroup = ciscoPingMIBGroup.setStatus('obsolete')
if mibBuilder.loadTexts: ciscoPingMIBGroup.setDescription('A collection of objects providing ping (echo) ability to a Cisco agent.')
ciscoPingMIBGroupVpn = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 16, 3, 2, 2)).setObjects(("CISCO-PING-MIB", "ciscoPingProtocol"), ("CISCO-PING-MIB", "ciscoPingAddress"), ("CISCO-PING-MIB", "ciscoPingPacketCount"), ("CISCO-PING-MIB", "ciscoPingPacketSize"), ("CISCO-PING-MIB", "ciscoPingPacketTimeout"), ("CISCO-PING-MIB", "ciscoPingDelay"), ("CISCO-PING-MIB", "ciscoPingTrapOnCompletion"), ("CISCO-PING-MIB", "ciscoPingSentPackets"), ("CISCO-PING-MIB", "ciscoPingReceivedPackets"), ("CISCO-PING-MIB", "ciscoPingMinRtt"), ("CISCO-PING-MIB", "ciscoPingAvgRtt"), ("CISCO-PING-MIB", "ciscoPingMaxRtt"), ("CISCO-PING-MIB", "ciscoPingCompleted"), ("CISCO-PING-MIB", "ciscoPingEntryOwner"), ("CISCO-PING-MIB", "ciscoPingEntryStatus"), ("CISCO-PING-MIB", "ciscoPingVrfName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoPingMIBGroupVpn = ciscoPingMIBGroupVpn.setStatus('current')
if mibBuilder.loadTexts: ciscoPingMIBGroupVpn.setDescription('A collection of objects providing ping (echo) ability to a Cisco agent.')
ciscoPingMIBNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 16, 3, 2, 3)).setObjects(("CISCO-PING-MIB", "ciscoPingCompletion"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoPingMIBNotificationGroup = ciscoPingMIBNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoPingMIBNotificationGroup.setDescription('Set of notifications implemented in this module.')
mibBuilder.exportSymbols("CISCO-PING-MIB", ciscoPingEntryStatus=ciscoPingEntryStatus, ciscoPingMIBGroupVpn=ciscoPingMIBGroupVpn, ciscoPingMIBCompliance=ciscoPingMIBCompliance, ciscoPingAddress=ciscoPingAddress, ciscoPingEntryOwner=ciscoPingEntryOwner, ciscoPingPacketSize=ciscoPingPacketSize, ciscoPingVrfName=ciscoPingVrfName, PYSNMP_MODULE_ID=ciscoPingMIB, ciscoPingMIBCompliances=ciscoPingMIBCompliances, ciscoPingMIBComplianceVpn=ciscoPingMIBComplianceVpn, ciscoPingMIBGroups=ciscoPingMIBGroups, ciscoPingMIBGroup=ciscoPingMIBGroup, ciscoPingTrapOnCompletion=ciscoPingTrapOnCompletion, ciscoPingDelay=ciscoPingDelay, ciscoPingSerialNumber=ciscoPingSerialNumber, ciscoPingCompletion=ciscoPingCompletion, ciscoPingEntry=ciscoPingEntry, ciscoPingCompleted=ciscoPingCompleted, ciscoPingPacketTimeout=ciscoPingPacketTimeout, ciscoPingSentPackets=ciscoPingSentPackets, ciscoPingMIBTraps=ciscoPingMIBTraps, ciscoPingPacketCount=ciscoPingPacketCount, ciscoPingMIB=ciscoPingMIB, ciscoPingMIBNotificationGroup=ciscoPingMIBNotificationGroup, ciscoPingProtocol=ciscoPingProtocol, ciscoPingReceivedPackets=ciscoPingReceivedPackets, ciscoPingMIBObjects=ciscoPingMIBObjects, ciscoPingTable=ciscoPingTable, ciscoPingAvgRtt=ciscoPingAvgRtt, ciscoPingMaxRtt=ciscoPingMaxRtt, ciscoPingMinRtt=ciscoPingMinRtt, ciscoPingMIBTrapPrefix=ciscoPingMIBTrapPrefix, ciscoPingMIBConformance=ciscoPingMIBConformance)
