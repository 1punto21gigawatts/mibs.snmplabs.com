#
# PySNMP MIB module AT-INTERFACES-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/AT-INTERFACES-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:30:14 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint")
atRouter, traps = mibBuilder.importSymbols("AT-SMI-MIB", "atRouter", "traps")
ifName, InterfaceIndexOrZero = mibBuilder.importSymbols("IF-MIB", "ifName", "InterfaceIndexOrZero")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, Integer32, TimeTicks, Counter32, iso, Counter64, Unsigned32, MibIdentifier, NotificationType, ObjectIdentity, IpAddress, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "Integer32", "TimeTicks", "Counter32", "iso", "Counter64", "Unsigned32", "MibIdentifier", "NotificationType", "ObjectIdentity", "IpAddress", "Bits")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
arInterfaces = ModuleIdentity((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 5))
arInterfaces.setRevisions(('2006-06-14 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: arInterfaces.setRevisionsDescriptions(('Initial version of this MIB module.',))
if mibBuilder.loadTexts: arInterfaces.setLastUpdated('200606140000Z')
if mibBuilder.loadTexts: arInterfaces.setOrganization('Allied Telesis, Inc.')
if mibBuilder.loadTexts: arInterfaces.setContactInfo(' http://www.alliedtelesis.com')
if mibBuilder.loadTexts: arInterfaces.setDescription('subtree beneath which interface ids are assigned..')
igmpTraps = ObjectIdentity((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 2, 1))
if mibBuilder.loadTexts: igmpTraps.setStatus('current')
if mibBuilder.loadTexts: igmpTraps.setDescription('object id for igmp traps.')
igmpGeneralQueryNotReceivedEvent = NotificationType((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 2, 1, 1)).setObjects(("IF-MIB", "ifName"))
if mibBuilder.loadTexts: igmpGeneralQueryNotReceivedEvent.setStatus('current')
if mibBuilder.loadTexts: igmpGeneralQueryNotReceivedEvent.setDescription('Triggered when no general IGMP-Query message is received within a user-defined time period on a specific interface.')
arBoardMaxIndex = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arBoardMaxIndex.setStatus('current')
if mibBuilder.loadTexts: arBoardMaxIndex.setDescription('The maximum index of boards in the board table. Index 1 is reserved for the main system board of the router.')
arBoardTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 5, 2), )
if mibBuilder.loadTexts: arBoardTable.setStatus('current')
if mibBuilder.loadTexts: arBoardTable.setDescription('The table of boards in the AR router.')
arBoardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 5, 2, 1), ).setIndexNames((0, "AT-INTERFACES-MIB", "arBoardIndex"))
if mibBuilder.loadTexts: arBoardEntry.setStatus('current')
if mibBuilder.loadTexts: arBoardEntry.setDescription('A single entry in the board table. Each entry consists of information about one board in the router.')
arBoardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arBoardIndex.setStatus('current')
if mibBuilder.loadTexts: arBoardIndex.setDescription('The index of the board in the board table. Index 1 is reserved for the main system board of the router. Other boards will take index numbers as they are initialised at router startup, or for routers with hot-swap capability, as boards are added to and removed from the router.')
arBoardId = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 5, 2, 1, 2), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arBoardId.setStatus('current')
if mibBuilder.loadTexts: arBoardId.setDescription('The type of board in this board entry. The values of this object are taken from the pprXxx object IDs under the boards sub-tree.')
arBoardName = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 5, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arBoardName.setStatus('current')
if mibBuilder.loadTexts: arBoardName.setDescription('The name of the board in this board entry. This is a readable string which identifies the board to the manager.')
arBoardRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 5, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arBoardRevision.setStatus('current')
if mibBuilder.loadTexts: arBoardRevision.setDescription('The manufacturing revision of the board in this board entry. This string has the format Xm-n, where X is P for prototype, or M for manufacturing, m is the major revision number for this board, and n is the field upgrade revision number for this board.')
arBoardSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 5, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arBoardSerialNumber.setStatus('current')
if mibBuilder.loadTexts: arBoardSerialNumber.setDescription("The serial number of the board in this board entry. Serial numbers are strings of decimal numbers up to 10 digits in length. Each and every serial number is globally unique. It is possible for the serial number of a board to be invalid. In this case the value returned for this object will be '*** Invalid ***'")
arBoardTotalSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 5, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arBoardTotalSlots.setStatus('current')
if mibBuilder.loadTexts: arBoardTotalSlots.setDescription("The number of slots on this board. Each slot from 1 to the value of this object may be empty or occupied by another board. By searching the arSlotTable with this board's board index and all values of slot index from 1 to the value of this object, a tree of the boards in this router can be built. The value 0 for this object means that it has no slots.")
arBoardTotalPositions = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 5, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arBoardTotalPositions.setStatus('current')
if mibBuilder.loadTexts: arBoardTotalPositions.setDescription('The number of positions on this board. Each position from 1 to the value of this object contains a single router interface. Note that positions are different from slots. An position contains an actual interface while a slot contains a different board which itself may contain interfaces in its positions.')
arSlotTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 5, 3), )
if mibBuilder.loadTexts: arSlotTable.setStatus('current')
if mibBuilder.loadTexts: arSlotTable.setDescription('The table of slots in the router, indexed by board index and slot index.')
arSlotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 5, 3, 1), ).setIndexNames((0, "AT-INTERFACES-MIB", "arSlotBoardIndex"), (0, "AT-INTERFACES-MIB", "arSlotSlotIndex"))
if mibBuilder.loadTexts: arSlotEntry.setStatus('current')
if mibBuilder.loadTexts: arSlotEntry.setDescription('A single entry in the board slot table.')
arSlotBoardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 5, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arSlotBoardIndex.setStatus('current')
if mibBuilder.loadTexts: arSlotBoardIndex.setDescription('The index of the board for this slot entry. Index 1 is reserved for the main system board of the router.')
arSlotSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 5, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arSlotSlotIndex.setStatus('current')
if mibBuilder.loadTexts: arSlotSlotIndex.setDescription('The index of the slot for this slot entry. Indices start from 1 and are specific to each different board type. There are no gaps in the sequence of slot indices. The maximum value for slot index is given by the value of arBoardTotalSlots for this board.')
arSlotHeldBoardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 5, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arSlotHeldBoardIndex.setStatus('current')
if mibBuilder.loadTexts: arSlotHeldBoardIndex.setDescription('The index of the board held in the slot for this slot entry. This is an index into the arBoardTable. A value of 0 for this object means that the slot is not populated.')
arSlotDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 5, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arSlotDescription.setStatus('current')
if mibBuilder.loadTexts: arSlotDescription.setDescription("A description for this slot entry. This is a textual description which gives the manager a clue as to what the slot for this entry is. For example, the slots on an AR 720 have descriptions 'Bay0', 'Bay1' and 'MAC'.")
arInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 5, 4), )
if mibBuilder.loadTexts: arInterfaceTable.setStatus('current')
if mibBuilder.loadTexts: arInterfaceTable.setDescription('The table of physical interfaces in the AR router.')
arInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 5, 4, 1), ).setIndexNames((0, "AT-INTERFACES-MIB", "arInterfaceBoardIndex"), (0, "AT-INTERFACES-MIB", "arInterfacePosition"))
if mibBuilder.loadTexts: arInterfaceEntry.setStatus('current')
if mibBuilder.loadTexts: arInterfaceEntry.setDescription('A single entry in the interface table. Each entry consists of information about one interface in the router, and is indexed by the board index and the position of the interface on the board.')
arInterfaceBoardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 5, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arInterfaceBoardIndex.setStatus('current')
if mibBuilder.loadTexts: arInterfaceBoardIndex.setDescription('The index of the board in the board table which contains this interface. Index 1 is reserved for the main system board of the router.')
arInterfacePosition = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 5, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arInterfacePosition.setStatus('current')
if mibBuilder.loadTexts: arInterfacePosition.setDescription('The position of the interface on the board. Each board type will have well-known positions which are the interfaces provided by the board. The number of positions on a given board is given by the object arBoardTotalPositions for this board.')
arInterfaceIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 5, 4, 1, 3), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arInterfaceIfIndex.setStatus('current')
if mibBuilder.loadTexts: arInterfaceIfIndex.setDescription("The ifIndex for the interface represented by this entry of the interfaces table. This is the ifIndex of the ifEntry used to represent the physical interface. The value 0 is used for interfaces which don't have an ifIndex.")
arInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 5, 4, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arInterfaceName.setStatus('current')
if mibBuilder.loadTexts: arInterfaceName.setDescription('The name of this interface. This is the name that the manager can use to refer to this interface in entering router commands.')
arInterfaceFullName = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 5, 4, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arInterfaceFullName.setStatus('current')
if mibBuilder.loadTexts: arInterfaceFullName.setDescription("The fully qualified name for this interface. This identifies the path that must be followed to reach the interface. This name can be used in router commands. In routers don't support fully qualified names, this is the same as arInterfaceName.")
arIfXTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 5, 5), )
if mibBuilder.loadTexts: arIfXTable.setStatus('current')
if mibBuilder.loadTexts: arIfXTable.setDescription('The table of interface statistics for the AR router. This table extends the ifTable.')
arIfXEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 5, 5, 1), ).setIndexNames((0, "AT-INTERFACES-MIB", "arIfXIndex"))
if mibBuilder.loadTexts: arIfXEntry.setStatus('current')
if mibBuilder.loadTexts: arIfXEntry.setDescription('A single entry in the interface extension table. Each entry consists of extra interface information not covered in standard MIBs. The index for this table is ifIndex, the same as for ifTable.')
arIfXIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 5, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arIfXIndex.setStatus('current')
if mibBuilder.loadTexts: arIfXIndex.setDescription('The index of the ifTable.')
arIfXAverageInputBitsSecond = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 5, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arIfXAverageInputBitsSecond.setStatus('current')
if mibBuilder.loadTexts: arIfXAverageInputBitsSecond.setDescription("The average number of bits received per second on all interfaces over the past 8.5 minutes. The average is calculated by an 8.5 minute (512s) decaying average, which is updated every 4 seconds using the following formula: X' = 127/128X + 1/128i where X' is the new average X is the old average i is the most recent poll result The times and multiplier factors have been chosen to give the simplest possible calculation using bit shifting operations.")
arIfXAverageInputPacketsSecond = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 5, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arIfXAverageInputPacketsSecond.setStatus('current')
if mibBuilder.loadTexts: arIfXAverageInputPacketsSecond.setDescription('The average number of packets received per second on all interfaces over the past 8.5 minutes. See the description for arIfXAverageInputBitsSecond for details of the way in which the average is calculated.')
arIfXAverageOutputBitsSecond = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 5, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arIfXAverageOutputBitsSecond.setStatus('current')
if mibBuilder.loadTexts: arIfXAverageOutputBitsSecond.setDescription('The average number of bits sent per second on all interfaces over the past 8.5 minutes. See the description for arIfXAverageInputBitsSecond for details of the way in which the average is calculated.')
arIfXAverageOutputPacketsSecond = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 5, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arIfXAverageOutputPacketsSecond.setStatus('current')
if mibBuilder.loadTexts: arIfXAverageOutputPacketsSecond.setDescription('The average number of bits sent per second on all interfaces over the past 8.5 minutes. See the description for arIfXAverageInputBitsSecond for details of the way in which the average is calculated.')
mibBuilder.exportSymbols("AT-INTERFACES-MIB", arInterfaceEntry=arInterfaceEntry, igmpTraps=igmpTraps, arSlotSlotIndex=arSlotSlotIndex, arIfXAverageInputBitsSecond=arIfXAverageInputBitsSecond, arBoardId=arBoardId, arSlotDescription=arSlotDescription, arIfXAverageOutputBitsSecond=arIfXAverageOutputBitsSecond, arBoardEntry=arBoardEntry, arIfXTable=arIfXTable, arBoardTotalSlots=arBoardTotalSlots, arInterfaceFullName=arInterfaceFullName, arIfXAverageInputPacketsSecond=arIfXAverageInputPacketsSecond, arBoardMaxIndex=arBoardMaxIndex, PYSNMP_MODULE_ID=arInterfaces, arInterfaceTable=arInterfaceTable, arBoardName=arBoardName, arInterfaces=arInterfaces, arIfXIndex=arIfXIndex, arBoardTotalPositions=arBoardTotalPositions, arInterfaceName=arInterfaceName, arSlotHeldBoardIndex=arSlotHeldBoardIndex, arIfXEntry=arIfXEntry, arInterfaceBoardIndex=arInterfaceBoardIndex, arBoardSerialNumber=arBoardSerialNumber, arSlotEntry=arSlotEntry, arBoardTable=arBoardTable, arSlotTable=arSlotTable, arInterfaceIfIndex=arInterfaceIfIndex, arBoardRevision=arBoardRevision, arInterfacePosition=arInterfacePosition, arIfXAverageOutputPacketsSecond=arIfXAverageOutputPacketsSecond, igmpGeneralQueryNotReceivedEvent=igmpGeneralQueryNotReceivedEvent, arSlotBoardIndex=arSlotBoardIndex, arBoardIndex=arBoardIndex)
