#
# PySNMP MIB module XEDIA-DRIVER-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/XEDIA-DRIVER-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:42:41 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
Counter32, MibIdentifier, NotificationType, TimeTicks, Bits, ObjectIdentity, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, Unsigned32, Counter64, ModuleIdentity, IpAddress, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "MibIdentifier", "NotificationType", "TimeTicks", "Bits", "ObjectIdentity", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "Unsigned32", "Counter64", "ModuleIdentity", "IpAddress", "iso")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
xediaMibs, = mibBuilder.importSymbols("XEDIA-REG", "xediaMibs")
xediaDriverMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 838, 3, 6))
if mibBuilder.loadTexts: xediaDriverMIB.setLastUpdated('9703252155Z')
if mibBuilder.loadTexts: xediaDriverMIB.setOrganization('Xedia Corp.')
if mibBuilder.loadTexts: xediaDriverMIB.setContactInfo('support@xedia.com')
if mibBuilder.loadTexts: xediaDriverMIB.setDescription('This module defines proprietary objects that extend those in the driver type MIBs.')
xdriverObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 838, 3, 6, 1))
xdriverConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 838, 3, 6, 2))
xdriverStatsTable = MibTable((1, 3, 6, 1, 4, 1, 838, 3, 6, 1, 1), )
if mibBuilder.loadTexts: xdriverStatsTable.setStatus('current')
if mibBuilder.loadTexts: xdriverStatsTable.setDescription('Xedia proprietary statistics for drivers.')
xdriverStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 838, 3, 6, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: xdriverStatsEntry.setStatus('current')
if mibBuilder.loadTexts: xdriverStatsEntry.setDescription('Xedia proprietary statistics for single driver interface.')
xdriverStatsInternalQOverflows = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 6, 1, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdriverStatsInternalQOverflows.setStatus('current')
if mibBuilder.loadTexts: xdriverStatsInternalQOverflows.setDescription("A count of the number of times the driver software failed to drain the hardware's statistics queue fast enough (and therefore may not have incremented some statistics properly).")
xdriverStatsOutGoodFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 6, 1, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdriverStatsOutGoodFrames.setStatus('current')
if mibBuilder.loadTexts: xdriverStatsOutGoodFrames.setDescription('The total number of frames that were transmitted without error. This is the sum of ifOutUcastPkts, ifOutMulticastPkts, and ifOutBroadcastPkts.')
xdriverStatsOutPercentGood = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 6, 1, 1, 1, 3), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: xdriverStatsOutPercentGood.setStatus('current')
if mibBuilder.loadTexts: xdriverStatsOutPercentGood.setDescription('The percentage of the total frames that were transmitted without error. (This is the throughput of the interface.)')
xdriverStatsOutPercentBad = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 6, 1, 1, 1, 4), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: xdriverStatsOutPercentBad.setStatus('current')
if mibBuilder.loadTexts: xdriverStatsOutPercentBad.setDescription('The percentage of the total frames that the higher layers requested to be transmitted that could not be due to errors.')
xdriverStatsOutAvgFrameLen = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 6, 1, 1, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdriverStatsOutAvgFrameLen.setStatus('current')
if mibBuilder.loadTexts: xdriverStatsOutAvgFrameLen.setDescription('The average length of the frames transmitted out this interface.')
xdriverStatsInCRCErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 6, 1, 1, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdriverStatsInCRCErrors.setStatus('current')
if mibBuilder.loadTexts: xdriverStatsInCRCErrors.setDescription('The number of frames that had CRC errors on this interface.')
xdriverStatsInGoodFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 6, 1, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdriverStatsInGoodFrames.setStatus('current')
if mibBuilder.loadTexts: xdriverStatsInGoodFrames.setDescription('The number of frames that were received on this interface that did not have errors.')
xdriverStatsInNoResources = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 6, 1, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdriverStatsInNoResources.setStatus('current')
if mibBuilder.loadTexts: xdriverStatsInNoResources.setDescription('The number of times the driver was suspended because of a lack of resources.')
xdriverStatsInPercentGood = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 6, 1, 1, 1, 9), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: xdriverStatsInPercentGood.setStatus('current')
if mibBuilder.loadTexts: xdriverStatsInPercentGood.setDescription('The percentage of incoming frames that did not have any error.')
xdriverStatsInPercentBad = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 6, 1, 1, 1, 10), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: xdriverStatsInPercentBad.setStatus('current')
if mibBuilder.loadTexts: xdriverStatsInPercentBad.setDescription('The percentage of incoming frames that had errors.')
xdriverStatsInAvgFrameLen = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 6, 1, 1, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdriverStatsInAvgFrameLen.setStatus('current')
if mibBuilder.loadTexts: xdriverStatsInAvgFrameLen.setDescription('The average length of a frame received on the interface.')
xdriverCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 838, 3, 6, 2, 1))
xdriverGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 838, 3, 6, 2, 2))
xdriverCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 838, 3, 6, 2, 1, 1)).setObjects(("XEDIA-DRIVER-MIB", "xdriverGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    xdriverCompliance = xdriverCompliance.setStatus('current')
if mibBuilder.loadTexts: xdriverCompliance.setDescription('The compliance statement for all agents that support this MIB. A compliant agent implements all objects defined in this MIB.')
xdriverGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 838, 3, 6, 2, 2, 1)).setObjects(("XEDIA-DRIVER-MIB", "xdriverStatsInternalQOverflows"), ("XEDIA-DRIVER-MIB", "xdriverStatsOutGoodFrames"), ("XEDIA-DRIVER-MIB", "xdriverStatsOutPercentGood"), ("XEDIA-DRIVER-MIB", "xdriverStatsOutPercentBad"), ("XEDIA-DRIVER-MIB", "xdriverStatsOutAvgFrameLen"), ("XEDIA-DRIVER-MIB", "xdriverStatsInCRCErrors"), ("XEDIA-DRIVER-MIB", "xdriverStatsInGoodFrames"), ("XEDIA-DRIVER-MIB", "xdriverStatsInNoResources"), ("XEDIA-DRIVER-MIB", "xdriverStatsInPercentGood"), ("XEDIA-DRIVER-MIB", "xdriverStatsInPercentBad"), ("XEDIA-DRIVER-MIB", "xdriverStatsInAvgFrameLen"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    xdriverGroup = xdriverGroup.setStatus('current')
if mibBuilder.loadTexts: xdriverGroup.setDescription('The set of all accessible objects in this MIB.')
mibBuilder.exportSymbols("XEDIA-DRIVER-MIB", xdriverStatsInNoResources=xdriverStatsInNoResources, xdriverStatsInPercentBad=xdriverStatsInPercentBad, xdriverConformance=xdriverConformance, xdriverStatsOutAvgFrameLen=xdriverStatsOutAvgFrameLen, xdriverObjects=xdriverObjects, xdriverStatsInGoodFrames=xdriverStatsInGoodFrames, xdriverStatsInCRCErrors=xdriverStatsInCRCErrors, xdriverStatsInPercentGood=xdriverStatsInPercentGood, xdriverStatsOutGoodFrames=xdriverStatsOutGoodFrames, xdriverStatsOutPercentGood=xdriverStatsOutPercentGood, xdriverStatsInAvgFrameLen=xdriverStatsInAvgFrameLen, xdriverCompliances=xdriverCompliances, xdriverGroup=xdriverGroup, xdriverCompliance=xdriverCompliance, xdriverStatsInternalQOverflows=xdriverStatsInternalQOverflows, xdriverStatsOutPercentBad=xdriverStatsOutPercentBad, xdriverStatsTable=xdriverStatsTable, xdriverGroups=xdriverGroups, PYSNMP_MODULE_ID=xediaDriverMIB, xdriverStatsEntry=xdriverStatsEntry, xediaDriverMIB=xediaDriverMIB)
