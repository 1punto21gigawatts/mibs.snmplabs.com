#
# PySNMP MIB module HPN-ICF-3GMODEM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HPN-ICF-3GMODEM-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:37:20 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint")
hpnicfCommon, = mibBuilder.importSymbols("HPN-ICF-OID-MIB", "hpnicfCommon")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ModuleIdentity, Counter32, Bits, Integer32, NotificationType, iso, Counter64, ObjectIdentity, TimeTicks, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, MibIdentifier, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Counter32", "Bits", "Integer32", "NotificationType", "iso", "Counter64", "ObjectIdentity", "TimeTicks", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "MibIdentifier", "Unsigned32")
TruthValue, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "DisplayString", "TextualConvention")
hpnicf3GModem = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 98))
hpnicf3GModem.setRevisions(('2009-04-30 12:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hpnicf3GModem.setRevisionsDescriptions(('Initial version of this MIB module.',))
if mibBuilder.loadTexts: hpnicf3GModem.setLastUpdated('200904301200Z')
if mibBuilder.loadTexts: hpnicf3GModem.setOrganization('')
if mibBuilder.loadTexts: hpnicf3GModem.setContactInfo('')
if mibBuilder.loadTexts: hpnicf3GModem.setDescription('The information about the wireless card and the UIM (User Identification Module).')
class HpnicfUIMStatusType(TextualConvention, Integer32):
    description = 'The status of the UIM.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("absent", 1), ("initial", 2), ("fault", 3), ("unprotected", 4), ("protected", 5), ("pinLocked", 6), ("pukLocked", 7), ("selfDestruct", 8))

class HpnicfSmsEncodeType(TextualConvention, Integer32):
    description = 'The encode type of Sms (short message service).'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("ascii", 1), ("ucs2", 2))

hpnicf3GModemObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 98, 1))
hpnicfWirelessCard = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 98, 1, 1))
hpnicfUIM = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 98, 1, 2))
hpnicf3GCdma = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 98, 1, 3))
hpnicf3GGsm = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 98, 1, 4))
hpnicfLte = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 98, 1, 5))
hpnicfWirelessCardTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 98, 1, 1, 1), )
if mibBuilder.loadTexts: hpnicfWirelessCardTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfWirelessCardTable.setDescription('This table contains one row per wireless card.')
hpnicfWirelessCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 98, 1, 1, 1, 1), ).setIndexNames((0, "HPN-ICF-3GMODEM-MIB", "hpnicfWirelessCardIndex"))
if mibBuilder.loadTexts: hpnicfWirelessCardEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfWirelessCardEntry.setDescription('Information about a particular wireless card.')
hpnicfWirelessCardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 98, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfWirelessCardIndex.setStatus('current')
if mibBuilder.loadTexts: hpnicfWirelessCardIndex.setDescription('The index for this entry.')
hpnicfWirelessCardModelName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 98, 1, 1, 1, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfWirelessCardModelName.setStatus('current')
if mibBuilder.loadTexts: hpnicfWirelessCardModelName.setDescription('The model name of this card.')
hpnicfWirelessCardMfgName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 98, 1, 1, 1, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfWirelessCardMfgName.setStatus('current')
if mibBuilder.loadTexts: hpnicfWirelessCardMfgName.setDescription('The name of the manufacturer of this card.')
hpnicfWirelessCardDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 98, 1, 1, 1, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfWirelessCardDescription.setStatus('current')
if mibBuilder.loadTexts: hpnicfWirelessCardDescription.setDescription('The textual description of this card.')
hpnicfWirelessCardSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 98, 1, 1, 1, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfWirelessCardSerialNumber.setStatus('current')
if mibBuilder.loadTexts: hpnicfWirelessCardSerialNumber.setDescription('The vendor-specific serial number string for this card.')
hpnicfWirelessCardCMIIID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 98, 1, 1, 1, 1, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfWirelessCardCMIIID.setStatus('current')
if mibBuilder.loadTexts: hpnicfWirelessCardCMIIID.setDescription('The card ID of CMII (Ministry of Information Industry of China).')
hpnicfWirelessCardHardwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 98, 1, 1, 1, 1, 7), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfWirelessCardHardwareVersion.setStatus('current')
if mibBuilder.loadTexts: hpnicfWirelessCardHardwareVersion.setDescription('The vendor-specific hardware version string for this card.')
hpnicfWirelessCardFirmwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 98, 1, 1, 1, 1, 8), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfWirelessCardFirmwareVersion.setStatus('current')
if mibBuilder.loadTexts: hpnicfWirelessCardFirmwareVersion.setDescription('The vendor-specific firmware version string for this card.')
hpnicfWirelessCardPRLVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 98, 1, 1, 1, 1, 9), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfWirelessCardPRLVersion.setStatus('current')
if mibBuilder.loadTexts: hpnicfWirelessCardPRLVersion.setDescription('The preferred roaming list version for this card.')
hpnicfWirelessCardInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 98, 1, 1, 1, 1, 10), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfWirelessCardInterfaceIndex.setStatus('current')
if mibBuilder.loadTexts: hpnicfWirelessCardInterfaceIndex.setDescription('The interface index in IF-MIB of this card.')
hpnicfWirelessCardModemStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 98, 1, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("onLine", 2), ("offLine", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfWirelessCardModemStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfWirelessCardModemStatus.setDescription('The status of modem.')
hpnicfWirelessCardModemMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 98, 1, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("tdscdma", 2), ("wcdma", 3), ("cdma", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfWirelessCardModemMode.setStatus('current')
if mibBuilder.loadTexts: hpnicfWirelessCardModemMode.setDescription('The mode of the 3G-Modem.')
hpnicfWirelessCardCurNetConn = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 98, 1, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("unknown", 1), ("noService", 2), ("gsm", 3), ("gprs", 4), ("edge", 5), ("hsdpa", 6), ("hsupa", 7), ("hsupaAndhsdpa", 8), ("hspaPlus", 9), ("umts", 10), ("dchspaPlus", 11), ("lte", 12), ("onexrtt", 13), ("evdo", 14), ("onexrttAndevdo", 15), ("tdscdma", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfWirelessCardCurNetConn.setStatus('current')
if mibBuilder.loadTexts: hpnicfWirelessCardCurNetConn.setDescription('The current network connection.')
hpnicfSmsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 98, 1, 1, 2))
hpnicfSmsScalarObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 98, 1, 1, 2, 1))
hpnicfSmsRxNotifSwitch = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 98, 1, 1, 2, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfSmsRxNotifSwitch.setStatus('current')
if mibBuilder.loadTexts: hpnicfSmsRxNotifSwitch.setDescription('The switch of notification when a short message received.')
hpnicfSmsOperationTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 98, 1, 1, 2, 2), )
if mibBuilder.loadTexts: hpnicfSmsOperationTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfSmsOperationTable.setDescription('This table contains one row per short message.')
hpnicfSmsOperationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 98, 1, 1, 2, 2, 1), ).setIndexNames((0, "HPN-ICF-3GMODEM-MIB", "hpnicfWirelessCardIndex"))
if mibBuilder.loadTexts: hpnicfSmsOperationEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfSmsOperationEntry.setDescription('The infomation about the short message.')
hpnicfSmsDestNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 98, 1, 1, 2, 2, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfSmsDestNumber.setStatus('current')
if mibBuilder.loadTexts: hpnicfSmsDestNumber.setDescription('The destination number of the short message.')
hpnicfSmsEncode = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 98, 1, 1, 2, 2, 1, 2), HpnicfSmsEncodeType().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfSmsEncode.setStatus('current')
if mibBuilder.loadTexts: hpnicfSmsEncode.setDescription('The encoded type of the short message.')
hpnicfSmsContent = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 98, 1, 1, 2, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfSmsContent.setStatus('current')
if mibBuilder.loadTexts: hpnicfSmsContent.setDescription('Content of the short message.')
hpnicfSmsSendStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 98, 1, 1, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18))).clone(namedValues=NamedValues(("set2Send", 1), ("ready2Send", 2), ("sending", 3), ("sentAlready", 4), ("telnumberInvalid", 5), ("paramInvalid", 6), ("contentTooLong", 7), ("codeError", 8), ("unknown", 9), ("busy", 10), ("notPresent", 11), ("notSupport", 12), ("initializing", 13), ("noCenterNum", 14), ("noSim", 15), ("simNotReady", 16), ("sendAtFailed", 17), ("sendDisable", 18)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfSmsSendStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfSmsSendStatus.setDescription('Status of the short message sent.')
hpnicfWirelessCardOnlineTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 98, 1, 1, 3), )
if mibBuilder.loadTexts: hpnicfWirelessCardOnlineTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfWirelessCardOnlineTable.setDescription('This table contains one row per wireless card.')
hpnicfWirelessCardOnlineEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 98, 1, 1, 3, 1), ).setIndexNames((0, "HPN-ICF-3GMODEM-MIB", "hpnicfWirelessCardIndex"), (0, "HPN-ICF-3GMODEM-MIB", "hpnicfWirelessCardOnlineTime"))
if mibBuilder.loadTexts: hpnicfWirelessCardOnlineEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfWirelessCardOnlineEntry.setDescription('Information about online time of a wireless card.')
hpnicfWirelessCardOnlineTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 98, 1, 1, 3, 1, 1), Unsigned32())
if mibBuilder.loadTexts: hpnicfWirelessCardOnlineTime.setStatus('current')
if mibBuilder.loadTexts: hpnicfWirelessCardOnlineTime.setDescription('The index for this entry.')
hpnicfWirelessCardOnlineType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 98, 1, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfWirelessCardOnlineType.setStatus('current')
if mibBuilder.loadTexts: hpnicfWirelessCardOnlineType.setDescription('The online type of this wireless card.')
hpnicfUIMInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 98, 1, 2, 1), )
if mibBuilder.loadTexts: hpnicfUIMInfoTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfUIMInfoTable.setDescription('This table contains one row per UIM.')
hpnicfUIMInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 98, 1, 2, 1, 1), ).setIndexNames((0, "HPN-ICF-3GMODEM-MIB", "hpnicfWirelessCardIndex"), (0, "HPN-ICF-3GMODEM-MIB", "hpnicfUIMIndex"))
if mibBuilder.loadTexts: hpnicfUIMInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfUIMInfoEntry.setDescription('The information about the UIM.')
hpnicfUIMIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 98, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: hpnicfUIMIndex.setStatus('current')
if mibBuilder.loadTexts: hpnicfUIMIndex.setDescription('The index for this entry.')
hpnicfUIMStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 98, 1, 2, 1, 1, 2), HpnicfUIMStatusType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfUIMStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfUIMStatus.setDescription('The status about this UIM.')
hpnicfUIMImsi = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 98, 1, 2, 1, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfUIMImsi.setStatus('current')
if mibBuilder.loadTexts: hpnicfUIMImsi.setDescription('The IMSI (International Mobile Subscriber Identification Number) about this UIM. If this information is unknown to the agent, then this object will be returned a zero-length string.')
hpnicfUIMPin = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 98, 1, 2, 1, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfUIMPin.setStatus('current')
if mibBuilder.loadTexts: hpnicfUIMPin.setDescription('The PIN about this UIM. If this information is unknown to the agent, then this object will be returned a zero-length string.')
hpnicfUIMVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 98, 1, 2, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setUnits('milli-volt').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfUIMVoltage.setStatus('current')
if mibBuilder.loadTexts: hpnicfUIMVoltage.setDescription('The voltage about this UIM. If this information is unknown to the agent, then this object will be returned 4294967295.')
hpnicfUIMProvider = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 98, 1, 2, 1, 1, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfUIMProvider.setStatus('current')
if mibBuilder.loadTexts: hpnicfUIMProvider.setDescription('The provider of mobile network. If this information is unknown to the agent, then this object will be returned a zero-length string.')
hpnicfUIMSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 98, 1, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 31), ValueRangeConstraint(99, 99), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfUIMSignal.setStatus('current')
if mibBuilder.loadTexts: hpnicfUIMSignal.setDescription("The intensity of the signal about this UIM. A value of '99' means no signal.")
hpnicfUIMTryPinPukTimes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 98, 1, 2, 1, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfUIMTryPinPukTimes.setStatus('current')
if mibBuilder.loadTexts: hpnicfUIMTryPinPukTimes.setDescription('The number of remaining times for unlocking PIN or PUK. The value is associated the same instance of hpnicfUIMStatus. If this information is unknown to the agent, then this object will be returned 4294967295.')
hpnicfUIMOldPin = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 98, 1, 2, 1, 1, 9), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 9))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfUIMOldPin.setStatus('current')
if mibBuilder.loadTexts: hpnicfUIMOldPin.setDescription('The old PIN for this UIM.')
hpnicf3GCdma1xRttTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 98, 1, 3, 1), )
if mibBuilder.loadTexts: hpnicf3GCdma1xRttTable.setStatus('current')
if mibBuilder.loadTexts: hpnicf3GCdma1xRttTable.setDescription('CDMA 1xRTT table.')
hpnicf3GCdma1xRttEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 98, 1, 3, 1, 1), ).setIndexNames((0, "HPN-ICF-3GMODEM-MIB", "hpnicfWirelessCardIndex"))
if mibBuilder.loadTexts: hpnicf3GCdma1xRttEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicf3GCdma1xRttEntry.setDescription('An entry of hpnicf3GCdma1xRttTable.')
hpnicf3GCdma1xRttCurrentRssi = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 98, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-2147483648, -2147483648), ValueRangeConstraint(-150, 0), ))).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicf3GCdma1xRttCurrentRssi.setStatus('current')
if mibBuilder.loadTexts: hpnicf3GCdma1xRttCurrentRssi.setDescription('The Received Signal Strength Indicator(RSSI) of CDMA 1xRTT.')
hpnicf3GCdma1xRttRssiMediumThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 98, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-150, 0))).setUnits('dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicf3GCdma1xRttRssiMediumThreshold.setStatus('current')
if mibBuilder.loadTexts: hpnicf3GCdma1xRttRssiMediumThreshold.setDescription('The medium signal threshold of CMDA 1xRTT RSSI. The absolute value of hpnicf3GCdma1xRttRssiMediumThreshold should be less than or equal to the absolute value of hpnicf3GCdma1xRttRssiWeakThreshold (|hpnicf3GCdma1xRttRssiMediumThreshold| <= |hpnicf3GCdma1xRttRssiWeakThreshold|).')
hpnicf3GCdma1xRttRssiWeakThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 98, 1, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-150, 0)).clone(-150)).setUnits('dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicf3GCdma1xRttRssiWeakThreshold.setStatus('current')
if mibBuilder.loadTexts: hpnicf3GCdma1xRttRssiWeakThreshold.setDescription('The weak signal threshold of CMDA 1xRTT RSSI. The absolute value of hpnicf3GCdma1xRttRssiMediumThreshold should be less than or equal to the absolute value of hpnicf3GCdma1xRttRssiWeakThreshold (|hpnicf3GCdma1xRttRssiMediumThreshold| <= |hpnicf3GCdma1xRttRssiWeakThreshold|).')
hpnicf3GCdma1xRttCurServiceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 98, 1, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("available", 2), ("emergency", 3), ("lowPower", 4), ("noService", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicf3GCdma1xRttCurServiceStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicf3GCdma1xRttCurServiceStatus.setDescription('The status of service.')
hpnicf3GCdma1xRttCurRoamingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 98, 1, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("roaming", 2), ("home", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicf3GCdma1xRttCurRoamingStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicf3GCdma1xRttCurRoamingStatus.setDescription('The status of roaming.')
hpnicf3GCdmaEvDoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 98, 1, 3, 2), )
if mibBuilder.loadTexts: hpnicf3GCdmaEvDoTable.setStatus('current')
if mibBuilder.loadTexts: hpnicf3GCdmaEvDoTable.setDescription('CDMA EvDo table.')
hpnicf3GCdmaEvDoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 98, 1, 3, 2, 1), ).setIndexNames((0, "HPN-ICF-3GMODEM-MIB", "hpnicfWirelessCardIndex"))
if mibBuilder.loadTexts: hpnicf3GCdmaEvDoEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicf3GCdmaEvDoEntry.setDescription('An entry of hpnicf3GCdmaEvDoTable.')
hpnicf3GCdmaEvDoCurrentRssi = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 98, 1, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-2147483648, -2147483648), ValueRangeConstraint(-150, 0), ))).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicf3GCdmaEvDoCurrentRssi.setStatus('current')
if mibBuilder.loadTexts: hpnicf3GCdmaEvDoCurrentRssi.setDescription('The Received Signal Strength Indicator(RSSI) of CDMA EvDo.')
hpnicf3GCdmaEvDoRssiMediumThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 98, 1, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-150, 0))).setUnits('dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicf3GCdmaEvDoRssiMediumThreshold.setStatus('current')
if mibBuilder.loadTexts: hpnicf3GCdmaEvDoRssiMediumThreshold.setDescription('The medium signal threshold of CMDA EvDo RSSI. The absolute value of hpnicf3GCdmaEvDoRssiMediumThreshold should be less than or equal to the absolute value of hpnicf3GCdmaEvDoRssiWeakThreshold (|hpnicf3GCdmaEvDoRssiMediumThreshold| <= |hpnicf3GCdmaEvDoRssiWeakThreshold|).')
hpnicf3GCdmaEvDoRssiWeakThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 98, 1, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-150, 0)).clone(-150)).setUnits('dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicf3GCdmaEvDoRssiWeakThreshold.setStatus('current')
if mibBuilder.loadTexts: hpnicf3GCdmaEvDoRssiWeakThreshold.setDescription('The weak signal threshold of CMDA EvDo RSSI. The absolute value of hpnicf3GCdmaEvDoRssiMediumThreshold should be less than or equal to the absolute value of hpnicf3GCdmaEvDoRssiWeakThreshold (|hpnicf3GCdmaEvDoRssiMediumThreshold| <= |hpnicf3GCdmaEvDoRssiWeakThreshold|).')
hpnicf3GCdmaEvDoCurServiceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 98, 1, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("available", 2), ("emergency", 3), ("lowPower", 4), ("noService", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicf3GCdmaEvDoCurServiceStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicf3GCdmaEvDoCurServiceStatus.setDescription('The status of service.')
hpnicf3GCdmaEvDoCurRoamingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 98, 1, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("roaming", 2), ("home", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicf3GCdmaEvDoCurRoamingStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicf3GCdmaEvDoCurRoamingStatus.setDescription('The status of roaming.')
hpnicf3GGsmInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 98, 1, 4, 1), )
if mibBuilder.loadTexts: hpnicf3GGsmInfoTable.setStatus('current')
if mibBuilder.loadTexts: hpnicf3GGsmInfoTable.setDescription('GSM information table.')
hpnicf3GGsmInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 98, 1, 4, 1, 1), ).setIndexNames((0, "HPN-ICF-3GMODEM-MIB", "hpnicfWirelessCardIndex"))
if mibBuilder.loadTexts: hpnicf3GGsmInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicf3GGsmInfoEntry.setDescription('An entry of hpnicf3GGsmInfoTable.')
hpnicf3GGsmCurrentRssi = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 98, 1, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-2147483648, -2147483648), ValueRangeConstraint(-150, 0), ))).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicf3GGsmCurrentRssi.setStatus('current')
if mibBuilder.loadTexts: hpnicf3GGsmCurrentRssi.setDescription('The Received Signal Strength Indicator(RSSI) of GSM.')
hpnicf3GGsmRssiMediumThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 98, 1, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-150, 0))).setUnits('dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicf3GGsmRssiMediumThreshold.setStatus('current')
if mibBuilder.loadTexts: hpnicf3GGsmRssiMediumThreshold.setDescription('The medium signal threshold of GSM RSSI. The absolute value of hpnicf3GGsmRssiMediumThreshold should be less than or equal to the absolute value of hpnicf3GGsmRssiWeakThreshold (|hpnicf3GGsmRssiMediumThreshold| <= |hpnicf3GGsmRssiWeakThreshold|).')
hpnicf3GGsmRssiWeakThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 98, 1, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-150, 0)).clone(-150)).setUnits('dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicf3GGsmRssiWeakThreshold.setStatus('current')
if mibBuilder.loadTexts: hpnicf3GGsmRssiWeakThreshold.setDescription('The weak signal threshold of GSM RSSI. The absolute value of hpnicf3GGsmRssiMediumThreshold should be less than or equal to the absolute value of hpnicf3GGsmRssiWeakThreshold (|hpnicf3GGsmRssiMediumThreshold| <= |hpnicf3GGsmRssiWeakThreshold|).')
hpnicf3GGsmImsi = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 98, 1, 4, 1, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicf3GGsmImsi.setStatus('current')
if mibBuilder.loadTexts: hpnicf3GGsmImsi.setDescription('The International Mobile Subscriber Identity(IMSI) of GSM.')
hpnicf3GGsmImei = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 98, 1, 4, 1, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicf3GGsmImei.setStatus('current')
if mibBuilder.loadTexts: hpnicf3GGsmImei.setDescription('The International Mobile Equipment Identity(IMEI) of GSM.')
hpnicf3GGsmApn = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 98, 1, 4, 1, 1, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicf3GGsmApn.setStatus('current')
if mibBuilder.loadTexts: hpnicf3GGsmApn.setDescription('The Access Point Name(APN) of GSM.')
hpnicf3GGsmPacketSessionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 98, 1, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("active", 2), ("inactive", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicf3GGsmPacketSessionStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicf3GGsmPacketSessionStatus.setDescription('The packet session status of GSM.')
hpnicf3GGsmNetworkSelectionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 98, 1, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("automatic", 2), ("manual", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicf3GGsmNetworkSelectionMode.setStatus('current')
if mibBuilder.loadTexts: hpnicf3GGsmNetworkSelectionMode.setDescription('The network selection mode of GSM.')
hpnicf3GGsmMobileNetworkName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 98, 1, 4, 1, 1, 9), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicf3GGsmMobileNetworkName.setStatus('current')
if mibBuilder.loadTexts: hpnicf3GGsmMobileNetworkName.setDescription('The mobile network name of GSM.')
hpnicf3GGsmLac = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 98, 1, 4, 1, 1, 10), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicf3GGsmLac.setStatus('current')
if mibBuilder.loadTexts: hpnicf3GGsmLac.setDescription('The Location Area Code(LAC) of GSM.')
hpnicf3GGsmCellId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 98, 1, 4, 1, 1, 11), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicf3GGsmCellId.setStatus('current')
if mibBuilder.loadTexts: hpnicf3GGsmCellId.setDescription('The ID of cell.')
hpnicf3GGsmSimStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 98, 1, 4, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("notInsert", 3), ("networkReject", 4), ("blocked", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicf3GGsmSimStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicf3GGsmSimStatus.setDescription('The status of SIM.')
hpnicf3GGsmCurServiceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 98, 1, 4, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("available", 2), ("emergency", 3), ("lowPower", 4), ("noService", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicf3GGsmCurServiceStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicf3GGsmCurServiceStatus.setDescription('The status of service.')
hpnicf3GGsmCurRoamingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 98, 1, 4, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("roaming", 2), ("home", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicf3GGsmCurRoamingStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicf3GGsmCurRoamingStatus.setDescription('The status of roaming.')
hpnicf3GGsmMcc = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 98, 1, 4, 1, 1, 15), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicf3GGsmMcc.setStatus('current')
if mibBuilder.loadTexts: hpnicf3GGsmMcc.setDescription('The Mobile Country Code(MCC) of GSM.')
hpnicf3GGsmMnc = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 98, 1, 4, 1, 1, 16), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicf3GGsmMnc.setStatus('current')
if mibBuilder.loadTexts: hpnicf3GGsmMnc.setDescription('The Mobile Network Code of GSM.')
hpnicfLteInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 98, 1, 5, 1), )
if mibBuilder.loadTexts: hpnicfLteInfoTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfLteInfoTable.setDescription('The quality of signal table.')
hpnicfLteInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 98, 1, 5, 1, 1), ).setIndexNames((0, "HPN-ICF-3GMODEM-MIB", "hpnicfWirelessCardIndex"))
if mibBuilder.loadTexts: hpnicfLteInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfLteInfoEntry.setDescription('The quality about the signal.')
hpnicfLteCurrentRsrp = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 98, 1, 5, 1, 1, 1), Integer32()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfLteCurrentRsrp.setStatus('current')
if mibBuilder.loadTexts: hpnicfLteCurrentRsrp.setDescription('Reference signal receiving power.')
hpnicfLteCurrentRsrq = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 98, 1, 5, 1, 1, 2), Integer32()).setUnits('dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfLteCurrentRsrq.setStatus('current')
if mibBuilder.loadTexts: hpnicfLteCurrentRsrq.setDescription('Reference signal receiving quality.')
hpnicfLteCurrentSinr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 98, 1, 5, 1, 1, 3), Integer32()).setUnits('dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfLteCurrentSinr.setStatus('current')
if mibBuilder.loadTexts: hpnicfLteCurrentSinr.setDescription('Signal to interface plus noise ratio.')
hpnicfLteTxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 98, 1, 5, 1, 1, 4), Integer32()).setUnits('dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfLteTxPower.setStatus('current')
if mibBuilder.loadTexts: hpnicfLteTxPower.setDescription('Transmit power, 0x8000 means invalid.')
hpnicfLteCurrentRssi = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 98, 1, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-2147483648, -2147483648), ValueRangeConstraint(-150, 0), ))).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfLteCurrentRssi.setStatus('current')
if mibBuilder.loadTexts: hpnicfLteCurrentRssi.setDescription('The Received Signal Strength Indicator(RSSI) of LTE.')
hpnicfLteRssiMediumThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 98, 1, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-150, 0))).setUnits('dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfLteRssiMediumThreshold.setStatus('current')
if mibBuilder.loadTexts: hpnicfLteRssiMediumThreshold.setDescription('The medium signal threshold of LTE RSSI. The absolute value of hpnicfLteRssiMediumThreshold should be less than or equal to the absolute value of hpnicfLteRssiWeakThreshold (|hpnicfLteRssiMediumThreshold| <= |hpnicfLteRssiWeakThreshold|).')
hpnicfLteRssiWeakThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 98, 1, 5, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-150, 0)).clone(-150)).setUnits('dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfLteRssiWeakThreshold.setStatus('current')
if mibBuilder.loadTexts: hpnicfLteRssiWeakThreshold.setDescription('The weak signal threshold of LTE RSSI. The absolute value of hpnicfLteRssiMediumThreshold should be less than or equal to the absolute value of hpnicfLteRssiWeakThreshold (|hpnicfLteRssiMediumThreshold| <= |hpnicfLteRssiWeakThreshold|).')
hpnicf3GModemTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 98, 2))
hpnicf3GModemTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 98, 3))
hpnicf3GModemTrapPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 98, 3, 0))
hpnicfDevSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 98, 2, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfDevSerialNumber.setStatus('current')
if mibBuilder.loadTexts: hpnicfDevSerialNumber.setDescription('The serial number of the current device.')
hpnicfDeviceOUI = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 98, 2, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfDeviceOUI.setStatus('current')
if mibBuilder.loadTexts: hpnicfDeviceOUI.setDescription('The OUI (Organizational Unique Identifier) of the current device.')
hpnicfAccessMedia = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 98, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("air", 2), ("cable", 3)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfAccessMedia.setStatus('current')
if mibBuilder.loadTexts: hpnicfAccessMedia.setDescription('The current access media.')
hpnicf3GCurrentService = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 98, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("oneXRtt", 2), ("evDo", 3), ("gsm", 4), ("lte", 5)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicf3GCurrentService.setStatus('current')
if mibBuilder.loadTexts: hpnicf3GCurrentService.setDescription('The current service type which binded in the notifications.')
hpnicf3GCurrentRssiBind = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 98, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-2147483648, -2147483648), ValueRangeConstraint(-150, 0), ))).setUnits('dBm').setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicf3GCurrentRssiBind.setStatus('current')
if mibBuilder.loadTexts: hpnicf3GCurrentRssiBind.setDescription('The current RSSI which binded in the notifications.')
hpnicf3GImsiBind = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 98, 2, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicf3GImsiBind.setStatus('current')
if mibBuilder.loadTexts: hpnicf3GImsiBind.setDescription('The IMSI which binded in the notifications.')
hpnicfSmsSrcNumberBind = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 98, 2, 7), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfSmsSrcNumberBind.setStatus('current')
if mibBuilder.loadTexts: hpnicfSmsSrcNumberBind.setDescription('The source number which binded in the notifications.')
hpnicfSmsTimeBind = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 98, 2, 8), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfSmsTimeBind.setStatus('current')
if mibBuilder.loadTexts: hpnicfSmsTimeBind.setDescription('The sending time which binded in the notifications.')
hpnicfSmsEncodeBind = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 98, 2, 9), HpnicfSmsEncodeType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfSmsEncodeBind.setStatus('current')
if mibBuilder.loadTexts: hpnicfSmsEncodeBind.setDescription('The encoded type which binded in the notifications.')
hpnicfSmsContentBind = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 98, 2, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfSmsContentBind.setStatus('current')
if mibBuilder.loadTexts: hpnicfSmsContentBind.setDescription('The content of short message which binded in the notifications.')
hpnicfWirelessCardInserted = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 98, 3, 0, 1)).setObjects(("HPN-ICF-3GMODEM-MIB", "hpnicfDeviceOUI"), ("HPN-ICF-3GMODEM-MIB", "hpnicfDevSerialNumber"), ("HPN-ICF-3GMODEM-MIB", "hpnicfWirelessCardSerialNumber"), ("HPN-ICF-3GMODEM-MIB", "hpnicfUIMImsi"))
if mibBuilder.loadTexts: hpnicfWirelessCardInserted.setStatus('current')
if mibBuilder.loadTexts: hpnicfWirelessCardInserted.setDescription('A hpnicfWirelessCardInserted notification is generated when a wireless card is inserted.')
hpnicfWirelessCardPulledOut = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 98, 3, 0, 2)).setObjects(("HPN-ICF-3GMODEM-MIB", "hpnicfDeviceOUI"), ("HPN-ICF-3GMODEM-MIB", "hpnicfDevSerialNumber"), ("HPN-ICF-3GMODEM-MIB", "hpnicfWirelessCardSerialNumber"), ("HPN-ICF-3GMODEM-MIB", "hpnicfUIMImsi"))
if mibBuilder.loadTexts: hpnicfWirelessCardPulledOut.setStatus('current')
if mibBuilder.loadTexts: hpnicfWirelessCardPulledOut.setDescription('A hpnicfWirelessCardPulledOut notification is generated when a wireless card is pulled out.')
hpnicfUIMPinInvalid = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 98, 3, 0, 3)).setObjects(("HPN-ICF-3GMODEM-MIB", "hpnicfDeviceOUI"), ("HPN-ICF-3GMODEM-MIB", "hpnicfDevSerialNumber"), ("HPN-ICF-3GMODEM-MIB", "hpnicfWirelessCardSerialNumber"), ("HPN-ICF-3GMODEM-MIB", "hpnicfUIMImsi"))
if mibBuilder.loadTexts: hpnicfUIMPinInvalid.setStatus('current')
if mibBuilder.loadTexts: hpnicfUIMPinInvalid.setDescription('A hpnicfUIMPinInvalid notification is generated when UIM PIN is invalid.')
hpnicfUIMPinChanged = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 98, 3, 0, 4)).setObjects(("HPN-ICF-3GMODEM-MIB", "hpnicfDeviceOUI"), ("HPN-ICF-3GMODEM-MIB", "hpnicfDevSerialNumber"), ("HPN-ICF-3GMODEM-MIB", "hpnicfWirelessCardSerialNumber"), ("HPN-ICF-3GMODEM-MIB", "hpnicfUIMImsi"), ("HPN-ICF-3GMODEM-MIB", "hpnicfUIMOldPin"), ("HPN-ICF-3GMODEM-MIB", "hpnicfUIMPin"))
if mibBuilder.loadTexts: hpnicfUIMPinChanged.setStatus('current')
if mibBuilder.loadTexts: hpnicfUIMPinChanged.setDescription('A hpnicfUIMPinInvalid notification is generated when UIM PIN is changed.')
hpnicfAccessMediaChanged = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 98, 3, 0, 5)).setObjects(("HPN-ICF-3GMODEM-MIB", "hpnicfDeviceOUI"), ("HPN-ICF-3GMODEM-MIB", "hpnicfDevSerialNumber"), ("HPN-ICF-3GMODEM-MIB", "hpnicfWirelessCardSerialNumber"), ("HPN-ICF-3GMODEM-MIB", "hpnicfUIMImsi"), ("HPN-ICF-3GMODEM-MIB", "hpnicfAccessMedia"))
if mibBuilder.loadTexts: hpnicfAccessMediaChanged.setStatus('current')
if mibBuilder.loadTexts: hpnicfAccessMediaChanged.setDescription('A hpnicfAccessMediaChanged notification is generated when access media is changed.')
hpnicf3GRssiStrongSignalTrap = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 98, 3, 0, 6)).setObjects(("HPN-ICF-3GMODEM-MIB", "hpnicfWirelessCardIndex"), ("HPN-ICF-3GMODEM-MIB", "hpnicfDeviceOUI"), ("HPN-ICF-3GMODEM-MIB", "hpnicfDevSerialNumber"), ("HPN-ICF-3GMODEM-MIB", "hpnicfWirelessCardSerialNumber"), ("HPN-ICF-3GMODEM-MIB", "hpnicf3GCurrentService"), ("HPN-ICF-3GMODEM-MIB", "hpnicf3GCurrentRssiBind"), ("HPN-ICF-3GMODEM-MIB", "hpnicf3GImsiBind"))
if mibBuilder.loadTexts: hpnicf3GRssiStrongSignalTrap.setStatus('current')
if mibBuilder.loadTexts: hpnicf3GRssiStrongSignalTrap.setDescription('A hpnicf3GRssiStrongSignalTrap notification is generated when current RSSI exceeds the medium signal threshold.')
hpnicf3GRssiMediumSignalTrap = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 98, 3, 0, 7)).setObjects(("HPN-ICF-3GMODEM-MIB", "hpnicfWirelessCardIndex"), ("HPN-ICF-3GMODEM-MIB", "hpnicfDeviceOUI"), ("HPN-ICF-3GMODEM-MIB", "hpnicfDevSerialNumber"), ("HPN-ICF-3GMODEM-MIB", "hpnicfWirelessCardSerialNumber"), ("HPN-ICF-3GMODEM-MIB", "hpnicf3GCurrentService"), ("HPN-ICF-3GMODEM-MIB", "hpnicf3GCurrentRssiBind"), ("HPN-ICF-3GMODEM-MIB", "hpnicf3GImsiBind"))
if mibBuilder.loadTexts: hpnicf3GRssiMediumSignalTrap.setStatus('current')
if mibBuilder.loadTexts: hpnicf3GRssiMediumSignalTrap.setDescription('A hpnicf3GRssiMediumSignalTrap notification is generated when the current RSSI falls or rises to a value between the medium and weak signal thresholds.')
hpnicf3GRssiWeakSignalTrap = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 98, 3, 0, 8)).setObjects(("HPN-ICF-3GMODEM-MIB", "hpnicfWirelessCardIndex"), ("HPN-ICF-3GMODEM-MIB", "hpnicfDeviceOUI"), ("HPN-ICF-3GMODEM-MIB", "hpnicfDevSerialNumber"), ("HPN-ICF-3GMODEM-MIB", "hpnicfWirelessCardSerialNumber"), ("HPN-ICF-3GMODEM-MIB", "hpnicf3GCurrentService"), ("HPN-ICF-3GMODEM-MIB", "hpnicf3GCurrentRssiBind"), ("HPN-ICF-3GMODEM-MIB", "hpnicf3GImsiBind"))
if mibBuilder.loadTexts: hpnicf3GRssiWeakSignalTrap.setStatus('current')
if mibBuilder.loadTexts: hpnicf3GRssiWeakSignalTrap.setDescription('A hpnicf3GRssiWeakSignalTrap notification is generated when current RSSI falls below the weak signal threshold.')
hpnicfSmsTxNotification = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 98, 3, 0, 9)).setObjects(("HPN-ICF-3GMODEM-MIB", "hpnicfWirelessCardIndex"), ("HPN-ICF-3GMODEM-MIB", "hpnicfSmsSendStatus"))
if mibBuilder.loadTexts: hpnicfSmsTxNotification.setStatus('current')
if mibBuilder.loadTexts: hpnicfSmsTxNotification.setDescription('A hpnicfSmsTxNotification notification is generated when a short message is sent.')
hpnicfSmsRxNotification = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 98, 3, 0, 10)).setObjects(("HPN-ICF-3GMODEM-MIB", "hpnicfWirelessCardIndex"), ("HPN-ICF-3GMODEM-MIB", "hpnicfSmsSrcNumberBind"), ("HPN-ICF-3GMODEM-MIB", "hpnicfSmsTimeBind"), ("HPN-ICF-3GMODEM-MIB", "hpnicfSmsEncodeBind"), ("HPN-ICF-3GMODEM-MIB", "hpnicfSmsContentBind"))
if mibBuilder.loadTexts: hpnicfSmsRxNotification.setStatus('current')
if mibBuilder.loadTexts: hpnicfSmsRxNotification.setDescription('A hpnicfSmsRxNotification notification is generated when a short message is recieved.')
mibBuilder.exportSymbols("HPN-ICF-3GMODEM-MIB", hpnicfUIMOldPin=hpnicfUIMOldPin, hpnicfLteCurrentRsrp=hpnicfLteCurrentRsrp, hpnicfWirelessCardSerialNumber=hpnicfWirelessCardSerialNumber, hpnicf3GModemTrap=hpnicf3GModemTrap, hpnicf3GModemTraps=hpnicf3GModemTraps, hpnicf3GGsmInfoEntry=hpnicf3GGsmInfoEntry, hpnicfWirelessCardMfgName=hpnicfWirelessCardMfgName, hpnicfWirelessCardInserted=hpnicfWirelessCardInserted, hpnicfSmsContent=hpnicfSmsContent, hpnicfLteCurrentRsrq=hpnicfLteCurrentRsrq, hpnicfWirelessCardModemMode=hpnicfWirelessCardModemMode, hpnicf3GGsmRssiWeakThreshold=hpnicf3GGsmRssiWeakThreshold, hpnicf3GCdmaEvDoTable=hpnicf3GCdmaEvDoTable, hpnicfWirelessCardFirmwareVersion=hpnicfWirelessCardFirmwareVersion, hpnicf3GCurrentRssiBind=hpnicf3GCurrentRssiBind, hpnicfSmsScalarObjects=hpnicfSmsScalarObjects, hpnicfLteInfoTable=hpnicfLteInfoTable, hpnicf3GGsmMnc=hpnicf3GGsmMnc, hpnicf3GGsmSimStatus=hpnicf3GGsmSimStatus, hpnicfSmsDestNumber=hpnicfSmsDestNumber, hpnicfWirelessCardHardwareVersion=hpnicfWirelessCardHardwareVersion, hpnicfSmsTxNotification=hpnicfSmsTxNotification, hpnicfAccessMediaChanged=hpnicfAccessMediaChanged, hpnicfSmsSendStatus=hpnicfSmsSendStatus, HpnicfSmsEncodeType=HpnicfSmsEncodeType, hpnicf3GGsmCurrentRssi=hpnicf3GGsmCurrentRssi, hpnicfWirelessCardOnlineType=hpnicfWirelessCardOnlineType, hpnicfUIMPinInvalid=hpnicfUIMPinInvalid, hpnicfLteCurrentRssi=hpnicfLteCurrentRssi, hpnicf3GGsmPacketSessionStatus=hpnicf3GGsmPacketSessionStatus, hpnicf3GGsmCellId=hpnicf3GGsmCellId, hpnicfWirelessCardOnlineEntry=hpnicfWirelessCardOnlineEntry, hpnicfLteRssiMediumThreshold=hpnicfLteRssiMediumThreshold, hpnicfLteRssiWeakThreshold=hpnicfLteRssiWeakThreshold, hpnicf3GGsmLac=hpnicf3GGsmLac, hpnicfSmsOperationEntry=hpnicfSmsOperationEntry, hpnicf3GCdma1xRttCurServiceStatus=hpnicf3GCdma1xRttCurServiceStatus, hpnicfDevSerialNumber=hpnicfDevSerialNumber, hpnicfWirelessCardCMIIID=hpnicfWirelessCardCMIIID, hpnicf3GCdma1xRttTable=hpnicf3GCdma1xRttTable, hpnicfUIMVoltage=hpnicfUIMVoltage, hpnicfWirelessCard=hpnicfWirelessCard, hpnicfWirelessCardIndex=hpnicfWirelessCardIndex, hpnicf3GGsmCurServiceStatus=hpnicf3GGsmCurServiceStatus, hpnicf3GCdma1xRttEntry=hpnicf3GCdma1xRttEntry, hpnicf3GCdma1xRttCurRoamingStatus=hpnicf3GCdma1xRttCurRoamingStatus, hpnicf3GGsmMcc=hpnicf3GGsmMcc, hpnicfWirelessCardEntry=hpnicfWirelessCardEntry, hpnicfWirelessCardPRLVersion=hpnicfWirelessCardPRLVersion, hpnicf3GGsmCurRoamingStatus=hpnicf3GGsmCurRoamingStatus, hpnicf3GModemObjects=hpnicf3GModemObjects, hpnicfUIMIndex=hpnicfUIMIndex, hpnicfUIMInfoTable=hpnicfUIMInfoTable, hpnicf3GCdmaEvDoRssiMediumThreshold=hpnicf3GCdmaEvDoRssiMediumThreshold, hpnicfAccessMedia=hpnicfAccessMedia, hpnicf3GCdma=hpnicf3GCdma, hpnicf3GCdma1xRttRssiWeakThreshold=hpnicf3GCdma1xRttRssiWeakThreshold, hpnicfLte=hpnicfLte, hpnicf3GModemTrapPrefix=hpnicf3GModemTrapPrefix, hpnicf3GGsmApn=hpnicf3GGsmApn, hpnicfUIMSignal=hpnicfUIMSignal, hpnicfLteInfoEntry=hpnicfLteInfoEntry, hpnicf3GCurrentService=hpnicf3GCurrentService, hpnicfUIMImsi=hpnicfUIMImsi, hpnicfWirelessCardDescription=hpnicfWirelessCardDescription, hpnicf3GGsmMobileNetworkName=hpnicf3GGsmMobileNetworkName, hpnicf3GGsmImei=hpnicf3GGsmImei, hpnicf3GGsmRssiMediumThreshold=hpnicf3GGsmRssiMediumThreshold, PYSNMP_MODULE_ID=hpnicf3GModem, HpnicfUIMStatusType=HpnicfUIMStatusType, hpnicf3GGsm=hpnicf3GGsm, hpnicf3GModem=hpnicf3GModem, hpnicf3GCdmaEvDoCurServiceStatus=hpnicf3GCdmaEvDoCurServiceStatus, hpnicfSmsEncode=hpnicfSmsEncode, hpnicf3GGsmNetworkSelectionMode=hpnicf3GGsmNetworkSelectionMode, hpnicfWirelessCardCurNetConn=hpnicfWirelessCardCurNetConn, hpnicf3GCdmaEvDoRssiWeakThreshold=hpnicf3GCdmaEvDoRssiWeakThreshold, hpnicfWirelessCardTable=hpnicfWirelessCardTable, hpnicfUIMInfoEntry=hpnicfUIMInfoEntry, hpnicfWirelessCardOnlineTable=hpnicfWirelessCardOnlineTable, hpnicfSmsSrcNumberBind=hpnicfSmsSrcNumberBind, hpnicfLteTxPower=hpnicfLteTxPower, hpnicf3GGsmInfoTable=hpnicf3GGsmInfoTable, hpnicfSmsRxNotifSwitch=hpnicfSmsRxNotifSwitch, hpnicfUIMPinChanged=hpnicfUIMPinChanged, hpnicfUIMTryPinPukTimes=hpnicfUIMTryPinPukTimes, hpnicf3GCdma1xRttCurrentRssi=hpnicf3GCdma1xRttCurrentRssi, hpnicfDeviceOUI=hpnicfDeviceOUI, hpnicf3GRssiMediumSignalTrap=hpnicf3GRssiMediumSignalTrap, hpnicfSmsEncodeBind=hpnicfSmsEncodeBind, hpnicf3GCdmaEvDoCurrentRssi=hpnicf3GCdmaEvDoCurrentRssi, hpnicfWirelessCardPulledOut=hpnicfWirelessCardPulledOut, hpnicfSmsGroup=hpnicfSmsGroup, hpnicf3GCdma1xRttRssiMediumThreshold=hpnicf3GCdma1xRttRssiMediumThreshold, hpnicfSmsContentBind=hpnicfSmsContentBind, hpnicfWirelessCardOnlineTime=hpnicfWirelessCardOnlineTime, hpnicf3GRssiStrongSignalTrap=hpnicf3GRssiStrongSignalTrap, hpnicf3GImsiBind=hpnicf3GImsiBind, hpnicfUIMPin=hpnicfUIMPin, hpnicfSmsRxNotification=hpnicfSmsRxNotification, hpnicfUIMProvider=hpnicfUIMProvider, hpnicfUIM=hpnicfUIM, hpnicfLteCurrentSinr=hpnicfLteCurrentSinr, hpnicf3GCdmaEvDoEntry=hpnicf3GCdmaEvDoEntry, hpnicf3GCdmaEvDoCurRoamingStatus=hpnicf3GCdmaEvDoCurRoamingStatus, hpnicfWirelessCardInterfaceIndex=hpnicfWirelessCardInterfaceIndex, hpnicf3GRssiWeakSignalTrap=hpnicf3GRssiWeakSignalTrap, hpnicfUIMStatus=hpnicfUIMStatus, hpnicfWirelessCardModemStatus=hpnicfWirelessCardModemStatus, hpnicfWirelessCardModelName=hpnicfWirelessCardModelName, hpnicfSmsTimeBind=hpnicfSmsTimeBind, hpnicf3GGsmImsi=hpnicf3GGsmImsi, hpnicfSmsOperationTable=hpnicfSmsOperationTable)
