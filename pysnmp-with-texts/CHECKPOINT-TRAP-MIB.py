#
# PySNMP MIB module CHECKPOINT-TRAP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CHECKPOINT-TRAP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:48:44 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
svnNetIfOperState, voltageSensorValue, svnNetIfName, haProblemStatus, multiProcSystemTime, raidVolumeState, voltageSensorUnit, raidDiskFlags, fanSpeedSensorUnit, multiDiskFreeAvailablePercent, haState, multiProcIdleTime, multiProcUserTime, fwLSConnOverall, haStatCode, multiProcIndex, tempertureSensorName, raidDiskVolumeID, raidVolumeID, fanSpeedSensorType, svnNetIfAddress, haProblemDescr, voltageSensorStatus, multiDiskName, haProblemVerified, haIdentifier, tempertureSensorValue, raidDiskState, haProblemPriority, haProblemName, voltageSensorName, multiProcUsage, fwLocalLoggingStat, haTrusted, fanSpeedSensorStatus, svnNetIfState, tempertureSensorUnit, tempertureSensorType, fwLSConnOverallDesc, fwLocalLoggingDesc, fwLSConnState, haStatLong, haStatShort, multiProcRunQueue, haIP, haBlockState, fwLSConnName, raidDiskID, memTotalVirtual64, fanSpeedSensorName, voltageSensorType, memActiveVirtual64, haShared, fanSpeedSensorValue, multiProcInterrupts, fwLSConnStateDesc, memActiveReal64, memTotalReal64, haIfName, haStatus, tempertureSensorStatus = mibBuilder.importSymbols("CHECKPOINT-MIB", "svnNetIfOperState", "voltageSensorValue", "svnNetIfName", "haProblemStatus", "multiProcSystemTime", "raidVolumeState", "voltageSensorUnit", "raidDiskFlags", "fanSpeedSensorUnit", "multiDiskFreeAvailablePercent", "haState", "multiProcIdleTime", "multiProcUserTime", "fwLSConnOverall", "haStatCode", "multiProcIndex", "tempertureSensorName", "raidDiskVolumeID", "raidVolumeID", "fanSpeedSensorType", "svnNetIfAddress", "haProblemDescr", "voltageSensorStatus", "multiDiskName", "haProblemVerified", "haIdentifier", "tempertureSensorValue", "raidDiskState", "haProblemPriority", "haProblemName", "voltageSensorName", "multiProcUsage", "fwLocalLoggingStat", "haTrusted", "fanSpeedSensorStatus", "svnNetIfState", "tempertureSensorUnit", "tempertureSensorType", "fwLSConnOverallDesc", "fwLocalLoggingDesc", "fwLSConnState", "haStatLong", "haStatShort", "multiProcRunQueue", "haIP", "haBlockState", "fwLSConnName", "raidDiskID", "memTotalVirtual64", "fanSpeedSensorName", "voltageSensorType", "memActiveVirtual64", "haShared", "fanSpeedSensorValue", "multiProcInterrupts", "fwLSConnStateDesc", "memActiveReal64", "memTotalReal64", "haIfName", "haStatus", "tempertureSensorStatus")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter64, ModuleIdentity, enterprises, Bits, Gauge32, ObjectIdentity, IpAddress, Integer32, TimeTicks, NotificationType, MibIdentifier, Counter32, iso, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "ModuleIdentity", "enterprises", "Bits", "Gauge32", "ObjectIdentity", "IpAddress", "Integer32", "TimeTicks", "NotificationType", "MibIdentifier", "Counter32", "iso", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
chkpntTrapMibModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 2620, 1, 2000, 0, 0))
chkpntTrapMibModule.setRevisions(('2013-12-26 13:09',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: chkpntTrapMibModule.setRevisionsDescriptions(('Update the SMIv1 MIB to SMIv2',))
if mibBuilder.loadTexts: chkpntTrapMibModule.setLastUpdated('201312261309Z')
if mibBuilder.loadTexts: chkpntTrapMibModule.setOrganization('Check Point')
if mibBuilder.loadTexts: chkpntTrapMibModule.setContactInfo('Check Point')
if mibBuilder.loadTexts: chkpntTrapMibModule.setDescription('Check Point SNMPv2 Traps, to enable\\disable traps use threshold_config on the GW\\Mgmt. On policy installation the Mgmt. confirurations override the GWs configurations See the most common OIDs, with detailed descriptions, in the SNMP Best Practices Guide - sk98552 (https://supportcenter.checkpoint.com/supportcenter/portal?eventSubmit_doGoviewsolutiondetails=&solutionid=sk98552)')
checkpoint = MibIdentifier((1, 3, 6, 1, 4, 1, 2620))
products = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1))
chkpntTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 2000))
chkpntTrapInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 2000, 0))
chkpntTrapNet = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 2000, 1))
chkpntTrapDisk = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 2000, 2))
chkpntTrapCPU = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 2000, 3))
chkpntTrapMemory = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 2000, 4))
chkpntTrapHWSensor = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 2000, 5))
chkpntTrapHA = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 2000, 6))
chkpntTrapLSConn = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 2000, 7))
chkpntTrapOID = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2000, 0, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chkpntTrapOID.setStatus('current')
if mibBuilder.loadTexts: chkpntTrapOID.setDescription('The trap OID that triggered this event.')
chkpntTrapOIDValue = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2000, 0, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chkpntTrapOIDValue.setStatus('current')
if mibBuilder.loadTexts: chkpntTrapOIDValue.setDescription('The value of the trap OID that triggered this event.')
chkpntTrapMsgText = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2000, 0, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chkpntTrapMsgText.setStatus('current')
if mibBuilder.loadTexts: chkpntTrapMsgText.setDescription('Alert Message Text')
chkpntTrapSeverity = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2000, 0, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chkpntTrapSeverity.setStatus('current')
if mibBuilder.loadTexts: chkpntTrapSeverity.setDescription('Alert Severity Value - Critical Alert(4) - High Alert(3) - Medium Alert(2) - Low Alert(1) - Clear Alert(0)')
chkpntTrapCategory = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 2000, 0, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chkpntTrapCategory.setStatus('current')
if mibBuilder.loadTexts: chkpntTrapCategory.setDescription('The category of the trap')
chkpntDiskSpaceTrap = NotificationType((1, 3, 6, 1, 4, 1, 2620, 1, 2000, 2, 1)).setObjects(("CHECKPOINT-TRAP-MIB", "chkpntTrapOID"), ("CHECKPOINT-TRAP-MIB", "chkpntTrapOIDValue"), ("CHECKPOINT-TRAP-MIB", "chkpntTrapMsgText"), ("CHECKPOINT-TRAP-MIB", "chkpntTrapSeverity"), ("CHECKPOINT-TRAP-MIB", "chkpntTrapCategory"), ("CHECKPOINT-MIB", "multiDiskName"), ("CHECKPOINT-MIB", "multiDiskFreeAvailablePercent"))
if mibBuilder.loadTexts: chkpntDiskSpaceTrap.setStatus('current')
if mibBuilder.loadTexts: chkpntDiskSpaceTrap.setDescription('Monitored disk partiton is dangerously full alert, alerts when multiDiskFreeAvailablePercent <= X (filesystem name in trap)')
chkpntRAIDVolumeTrap = NotificationType((1, 3, 6, 1, 4, 1, 2620, 1, 2000, 2, 2)).setObjects(("CHECKPOINT-TRAP-MIB", "chkpntTrapOID"), ("CHECKPOINT-TRAP-MIB", "chkpntTrapOIDValue"), ("CHECKPOINT-TRAP-MIB", "chkpntTrapMsgText"), ("CHECKPOINT-TRAP-MIB", "chkpntTrapSeverity"), ("CHECKPOINT-TRAP-MIB", "chkpntTrapCategory"), ("CHECKPOINT-MIB", "raidVolumeID"), ("CHECKPOINT-MIB", "raidVolumeState"))
if mibBuilder.loadTexts: chkpntRAIDVolumeTrap.setStatus('current')
if mibBuilder.loadTexts: chkpntRAIDVolumeTrap.setDescription('Monitored RAID volume state, alerts when raidVolumeState = 2(volume ID in trap)')
chkpntRAIDDiskTrap = NotificationType((1, 3, 6, 1, 4, 1, 2620, 1, 2000, 2, 3)).setObjects(("CHECKPOINT-TRAP-MIB", "chkpntTrapOID"), ("CHECKPOINT-TRAP-MIB", "chkpntTrapOIDValue"), ("CHECKPOINT-TRAP-MIB", "chkpntTrapMsgText"), ("CHECKPOINT-TRAP-MIB", "chkpntTrapSeverity"), ("CHECKPOINT-TRAP-MIB", "chkpntTrapCategory"), ("CHECKPOINT-MIB", "raidDiskVolumeID"), ("CHECKPOINT-MIB", "raidDiskID"), ("CHECKPOINT-MIB", "raidDiskState"))
if mibBuilder.loadTexts: chkpntRAIDDiskTrap.setStatus('current')
if mibBuilder.loadTexts: chkpntRAIDDiskTrap.setDescription('Monitored RAID disk state alert, alerts when raidDiskState is one of [DEGRADED (1), FAILED(2) or UNKNOWN(255)](disk ID and volume ID in trap)')
chkpntRAIDDiskFlagsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2620, 1, 2000, 2, 4)).setObjects(("CHECKPOINT-TRAP-MIB", "chkpntTrapOID"), ("CHECKPOINT-TRAP-MIB", "chkpntTrapOIDValue"), ("CHECKPOINT-TRAP-MIB", "chkpntTrapMsgText"), ("CHECKPOINT-TRAP-MIB", "chkpntTrapSeverity"), ("CHECKPOINT-TRAP-MIB", "chkpntTrapCategory"), ("CHECKPOINT-MIB", "raidDiskVolumeID"), ("CHECKPOINT-MIB", "raidDiskID"), ("CHECKPOINT-MIB", "raidDiskState"), ("CHECKPOINT-MIB", "raidDiskFlags"))
if mibBuilder.loadTexts: chkpntRAIDDiskFlagsTrap.setStatus('current')
if mibBuilder.loadTexts: chkpntRAIDDiskFlagsTrap.setDescription('Monitored RAID disk flag alert, alerts when raidDiskFalgs contains the OUT_OF_SYNC(0x01) or QUIESCED(0x02) flags (disk ID and volume ID in trap)')
chkpntTrapNetIfState = NotificationType((1, 3, 6, 1, 4, 1, 2620, 1, 2000, 1, 1)).setObjects(("CHECKPOINT-TRAP-MIB", "chkpntTrapOID"), ("CHECKPOINT-TRAP-MIB", "chkpntTrapOIDValue"), ("CHECKPOINT-TRAP-MIB", "chkpntTrapMsgText"), ("CHECKPOINT-TRAP-MIB", "chkpntTrapSeverity"), ("CHECKPOINT-TRAP-MIB", "chkpntTrapCategory"), ("CHECKPOINT-MIB", "svnNetIfName"), ("CHECKPOINT-MIB", "svnNetIfAddress"), ("CHECKPOINT-MIB", "svnNetIfState"))
if mibBuilder.loadTexts: chkpntTrapNetIfState.setStatus('current')
if mibBuilder.loadTexts: chkpntTrapNetIfState.setDescription('Interface admin status alert, alerts when svnNetIfState = 0(Interface name provided in trap)')
chkpntTrapNetIfUnplugged = NotificationType((1, 3, 6, 1, 4, 1, 2620, 1, 2000, 1, 2)).setObjects(("CHECKPOINT-TRAP-MIB", "chkpntTrapOID"), ("CHECKPOINT-TRAP-MIB", "chkpntTrapOIDValue"), ("CHECKPOINT-TRAP-MIB", "chkpntTrapMsgText"), ("CHECKPOINT-TRAP-MIB", "chkpntTrapSeverity"), ("CHECKPOINT-TRAP-MIB", "chkpntTrapCategory"), ("CHECKPOINT-MIB", "svnNetIfName"), ("CHECKPOINT-MIB", "svnNetIfAddress"))
if mibBuilder.loadTexts: chkpntTrapNetIfUnplugged.setStatus('current')
if mibBuilder.loadTexts: chkpntTrapNetIfUnplugged.setDescription('Interface unplugged alert, alerts when an interface disappear from svnNetIfTable(Interface name provided in trap)')
chkpntTrapNewConnRate = NotificationType((1, 3, 6, 1, 4, 1, 2620, 1, 2000, 1, 3)).setObjects(("CHECKPOINT-TRAP-MIB", "chkpntTrapOID"), ("CHECKPOINT-TRAP-MIB", "chkpntTrapOIDValue"), ("CHECKPOINT-TRAP-MIB", "chkpntTrapMsgText"), ("CHECKPOINT-TRAP-MIB", "chkpntTrapSeverity"), ("CHECKPOINT-TRAP-MIB", "chkpntTrapCategory"))
if mibBuilder.loadTexts: chkpntTrapNewConnRate.setStatus('current')
if mibBuilder.loadTexts: chkpntTrapNewConnRate.setDescription('New connection rate alert, alerts when the new connection rate equals\\exceeds X (New Connections/Sec)')
chkpntTrapConcurrentConnRate = NotificationType((1, 3, 6, 1, 4, 1, 2620, 1, 2000, 1, 4)).setObjects(("CHECKPOINT-TRAP-MIB", "chkpntTrapOID"), ("CHECKPOINT-TRAP-MIB", "chkpntTrapOIDValue"), ("CHECKPOINT-TRAP-MIB", "chkpntTrapMsgText"), ("CHECKPOINT-TRAP-MIB", "chkpntTrapSeverity"), ("CHECKPOINT-TRAP-MIB", "chkpntTrapCategory"))
if mibBuilder.loadTexts: chkpntTrapConcurrentConnRate.setStatus('current')
if mibBuilder.loadTexts: chkpntTrapConcurrentConnRate.setDescription('Concurrent connections rate alert, alerts when fwNumConn >= X (Connections/Sec)')
chkpntTrapBytesThroughput = NotificationType((1, 3, 6, 1, 4, 1, 2620, 1, 2000, 1, 5)).setObjects(("CHECKPOINT-TRAP-MIB", "chkpntTrapOID"), ("CHECKPOINT-TRAP-MIB", "chkpntTrapOIDValue"), ("CHECKPOINT-TRAP-MIB", "chkpntTrapMsgText"), ("CHECKPOINT-TRAP-MIB", "chkpntTrapSeverity"), ("CHECKPOINT-TRAP-MIB", "chkpntTrapCategory"))
if mibBuilder.loadTexts: chkpntTrapBytesThroughput.setStatus('current')
if mibBuilder.loadTexts: chkpntTrapBytesThroughput.setDescription('Bytes throughput alert, alerts when the throughput equals\\exceeds X (Bytes/Sec)')
chkpntTrapAcceptedPacketRate = NotificationType((1, 3, 6, 1, 4, 1, 2620, 1, 2000, 1, 6)).setObjects(("CHECKPOINT-TRAP-MIB", "chkpntTrapOID"), ("CHECKPOINT-TRAP-MIB", "chkpntTrapOIDValue"), ("CHECKPOINT-TRAP-MIB", "chkpntTrapMsgText"), ("CHECKPOINT-TRAP-MIB", "chkpntTrapSeverity"), ("CHECKPOINT-TRAP-MIB", "chkpntTrapCategory"))
if mibBuilder.loadTexts: chkpntTrapAcceptedPacketRate.setStatus('current')
if mibBuilder.loadTexts: chkpntTrapAcceptedPacketRate.setDescription('Accepted packet rate alert, alerts when the accepted packet rate equals\\exceeds X (Packets/Sec)')
chkpntTrapNetIfOperState = NotificationType((1, 3, 6, 1, 4, 1, 2620, 1, 2000, 1, 7)).setObjects(("CHECKPOINT-TRAP-MIB", "chkpntTrapOID"), ("CHECKPOINT-TRAP-MIB", "chkpntTrapOIDValue"), ("CHECKPOINT-TRAP-MIB", "chkpntTrapMsgText"), ("CHECKPOINT-TRAP-MIB", "chkpntTrapSeverity"), ("CHECKPOINT-TRAP-MIB", "chkpntTrapCategory"), ("CHECKPOINT-MIB", "svnNetIfName"), ("CHECKPOINT-MIB", "svnNetIfAddress"), ("CHECKPOINT-MIB", "svnNetIfOperState"))
if mibBuilder.loadTexts: chkpntTrapNetIfOperState.setStatus('current')
if mibBuilder.loadTexts: chkpntTrapNetIfOperState.setDescription('Interface operational link status alert, alerts when svnNetIfOperState = 0(Interface name provided in trap)')
chkpntCPUCoreUtilTrap = NotificationType((1, 3, 6, 1, 4, 1, 2620, 1, 2000, 3, 1)).setObjects(("CHECKPOINT-TRAP-MIB", "chkpntTrapOID"), ("CHECKPOINT-TRAP-MIB", "chkpntTrapOIDValue"), ("CHECKPOINT-TRAP-MIB", "chkpntTrapMsgText"), ("CHECKPOINT-TRAP-MIB", "chkpntTrapSeverity"), ("CHECKPOINT-TRAP-MIB", "chkpntTrapCategory"), ("CHECKPOINT-MIB", "multiProcIndex"), ("CHECKPOINT-MIB", "multiProcUserTime"), ("CHECKPOINT-MIB", "multiProcSystemTime"), ("CHECKPOINT-MIB", "multiProcIdleTime"), ("CHECKPOINT-MIB", "multiProcUsage"), ("CHECKPOINT-MIB", "multiProcRunQueue"), ("CHECKPOINT-MIB", "multiProcInterrupts"))
if mibBuilder.loadTexts: chkpntCPUCoreUtilTrap.setStatus('current')
if mibBuilder.loadTexts: chkpntCPUCoreUtilTrap.setDescription('Core utilization alert, alerts when multiProcUsage >= X (core name in trap)')
chkpntCPUCoreInterruptsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2620, 1, 2000, 3, 2)).setObjects(("CHECKPOINT-TRAP-MIB", "chkpntTrapOID"), ("CHECKPOINT-TRAP-MIB", "chkpntTrapOIDValue"), ("CHECKPOINT-TRAP-MIB", "chkpntTrapMsgText"), ("CHECKPOINT-TRAP-MIB", "chkpntTrapSeverity"), ("CHECKPOINT-TRAP-MIB", "chkpntTrapCategory"), ("CHECKPOINT-MIB", "multiProcIndex"), ("CHECKPOINT-MIB", "multiProcUserTime"), ("CHECKPOINT-MIB", "multiProcSystemTime"), ("CHECKPOINT-MIB", "multiProcIdleTime"), ("CHECKPOINT-MIB", "multiProcUsage"), ("CHECKPOINT-MIB", "multiProcRunQueue"), ("CHECKPOINT-MIB", "multiProcInterrupts"))
if mibBuilder.loadTexts: chkpntCPUCoreInterruptsTrap.setStatus('current')
if mibBuilder.loadTexts: chkpntCPUCoreInterruptsTrap.setDescription('Core interrupts alert, alerts when multiProcInterrupts >= X (core name in trap)')
chkpntSwapMemoryTrap = NotificationType((1, 3, 6, 1, 4, 1, 2620, 1, 2000, 4, 1)).setObjects(("CHECKPOINT-TRAP-MIB", "chkpntTrapOID"), ("CHECKPOINT-TRAP-MIB", "chkpntTrapOIDValue"), ("CHECKPOINT-TRAP-MIB", "chkpntTrapMsgText"), ("CHECKPOINT-TRAP-MIB", "chkpntTrapSeverity"), ("CHECKPOINT-TRAP-MIB", "chkpntTrapCategory"), ("CHECKPOINT-MIB", "memTotalVirtual64"), ("CHECKPOINT-MIB", "memActiveVirtual64"))
if mibBuilder.loadTexts: chkpntSwapMemoryTrap.setStatus('current')
if mibBuilder.loadTexts: chkpntSwapMemoryTrap.setDescription('Swap memory utilization alert, alerts when memActiveVirtual64 exceeds X% of memTotalVirtual64')
chkpntRealMemoryTrap = NotificationType((1, 3, 6, 1, 4, 1, 2620, 1, 2000, 4, 2)).setObjects(("CHECKPOINT-TRAP-MIB", "chkpntTrapOID"), ("CHECKPOINT-TRAP-MIB", "chkpntTrapOIDValue"), ("CHECKPOINT-TRAP-MIB", "chkpntTrapMsgText"), ("CHECKPOINT-TRAP-MIB", "chkpntTrapSeverity"), ("CHECKPOINT-TRAP-MIB", "chkpntTrapCategory"), ("CHECKPOINT-MIB", "memTotalReal64"), ("CHECKPOINT-MIB", "memActiveReal64"))
if mibBuilder.loadTexts: chkpntRealMemoryTrap.setStatus('current')
if mibBuilder.loadTexts: chkpntRealMemoryTrap.setDescription('Real memory utilization alert, alerts when memActiveReal64 exceeds X% of memTotalReal64')
chkpntTrapTempertureSensor = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 2000, 5, 1))
chkpntTrapFanSpeedSensor = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 2000, 5, 2))
chkpntTrapVoltageSensor = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 2000, 5, 3))
chkpntTempertureTrap = NotificationType((1, 3, 6, 1, 4, 1, 2620, 1, 2000, 5, 1, 1)).setObjects(("CHECKPOINT-TRAP-MIB", "chkpntTrapOID"), ("CHECKPOINT-TRAP-MIB", "chkpntTrapOIDValue"), ("CHECKPOINT-TRAP-MIB", "chkpntTrapMsgText"), ("CHECKPOINT-TRAP-MIB", "chkpntTrapSeverity"), ("CHECKPOINT-TRAP-MIB", "chkpntTrapCategory"), ("CHECKPOINT-MIB", "tempertureSensorName"), ("CHECKPOINT-MIB", "tempertureSensorValue"), ("CHECKPOINT-MIB", "tempertureSensorUnit"), ("CHECKPOINT-MIB", "tempertureSensorType"), ("CHECKPOINT-MIB", "tempertureSensorStatus"))
if mibBuilder.loadTexts: chkpntTempertureTrap.setStatus('current')
if mibBuilder.loadTexts: chkpntTempertureTrap.setDescription('Temperture sensor alert (Sensor name provided in trap)')
chkpntFanSpeedTrap = NotificationType((1, 3, 6, 1, 4, 1, 2620, 1, 2000, 5, 2, 1)).setObjects(("CHECKPOINT-TRAP-MIB", "chkpntTrapOID"), ("CHECKPOINT-TRAP-MIB", "chkpntTrapOIDValue"), ("CHECKPOINT-TRAP-MIB", "chkpntTrapMsgText"), ("CHECKPOINT-TRAP-MIB", "chkpntTrapSeverity"), ("CHECKPOINT-TRAP-MIB", "chkpntTrapCategory"), ("CHECKPOINT-MIB", "fanSpeedSensorName"), ("CHECKPOINT-MIB", "fanSpeedSensorValue"), ("CHECKPOINT-MIB", "fanSpeedSensorUnit"), ("CHECKPOINT-MIB", "fanSpeedSensorType"), ("CHECKPOINT-MIB", "fanSpeedSensorStatus"))
if mibBuilder.loadTexts: chkpntFanSpeedTrap.setStatus('current')
if mibBuilder.loadTexts: chkpntFanSpeedTrap.setDescription('Fan speed sensor alert (Sensor name provided in trap)')
chkpntVoltageTrap = NotificationType((1, 3, 6, 1, 4, 1, 2620, 1, 2000, 5, 3, 1)).setObjects(("CHECKPOINT-TRAP-MIB", "chkpntTrapOID"), ("CHECKPOINT-TRAP-MIB", "chkpntTrapOIDValue"), ("CHECKPOINT-TRAP-MIB", "chkpntTrapMsgText"), ("CHECKPOINT-TRAP-MIB", "chkpntTrapSeverity"), ("CHECKPOINT-TRAP-MIB", "chkpntTrapCategory"), ("CHECKPOINT-MIB", "voltageSensorName"), ("CHECKPOINT-MIB", "voltageSensorValue"), ("CHECKPOINT-MIB", "voltageSensorUnit"), ("CHECKPOINT-MIB", "voltageSensorType"), ("CHECKPOINT-MIB", "voltageSensorStatus"))
if mibBuilder.loadTexts: chkpntVoltageTrap.setStatus('current')
if mibBuilder.loadTexts: chkpntVoltageTrap.setDescription('Voltage sensor alert (Sensor name provided in trap)')
chkpntClusterMemberStateTrap = NotificationType((1, 3, 6, 1, 4, 1, 2620, 1, 2000, 6, 1)).setObjects(("CHECKPOINT-TRAP-MIB", "chkpntTrapOID"), ("CHECKPOINT-TRAP-MIB", "chkpntTrapOIDValue"), ("CHECKPOINT-TRAP-MIB", "chkpntTrapMsgText"), ("CHECKPOINT-TRAP-MIB", "chkpntTrapSeverity"), ("CHECKPOINT-TRAP-MIB", "chkpntTrapCategory"), ("CHECKPOINT-MIB", "haIdentifier"), ("CHECKPOINT-MIB", "haState"))
if mibBuilder.loadTexts: chkpntClusterMemberStateTrap.setStatus('current')
if mibBuilder.loadTexts: chkpntClusterMemberStateTrap.setDescription('Cluster member state changed alert, alerts when haState changed (Cluster member identifier provided in trap)')
chkpntClusterBlockStateTrap = NotificationType((1, 3, 6, 1, 4, 1, 2620, 1, 2000, 6, 2)).setObjects(("CHECKPOINT-TRAP-MIB", "chkpntTrapOID"), ("CHECKPOINT-TRAP-MIB", "chkpntTrapOIDValue"), ("CHECKPOINT-TRAP-MIB", "chkpntTrapMsgText"), ("CHECKPOINT-TRAP-MIB", "chkpntTrapSeverity"), ("CHECKPOINT-TRAP-MIB", "chkpntTrapCategory"), ("CHECKPOINT-MIB", "haIdentifier"), ("CHECKPOINT-MIB", "haBlockState"), ("CHECKPOINT-MIB", "haState"))
if mibBuilder.loadTexts: chkpntClusterBlockStateTrap.setStatus('current')
if mibBuilder.loadTexts: chkpntClusterBlockStateTrap.setDescription('Cluster block state alert, alert when haBlockState is not equal to OK (Cluster member identifier provided in trap)')
chkpntClusterStateTrap = NotificationType((1, 3, 6, 1, 4, 1, 2620, 1, 2000, 6, 3)).setObjects(("CHECKPOINT-TRAP-MIB", "chkpntTrapOID"), ("CHECKPOINT-TRAP-MIB", "chkpntTrapOIDValue"), ("CHECKPOINT-TRAP-MIB", "chkpntTrapMsgText"), ("CHECKPOINT-TRAP-MIB", "chkpntTrapSeverity"), ("CHECKPOINT-TRAP-MIB", "chkpntTrapCategory"), ("CHECKPOINT-MIB", "haIdentifier"), ("CHECKPOINT-MIB", "haBlockState"), ("CHECKPOINT-MIB", "haState"), ("CHECKPOINT-MIB", "haStatCode"), ("CHECKPOINT-MIB", "haStatShort"), ("CHECKPOINT-MIB", "haStatLong"))
if mibBuilder.loadTexts: chkpntClusterStateTrap.setStatus('current')
if mibBuilder.loadTexts: chkpntClusterStateTrap.setDescription('Cluster state alert, alert when haStatCode is not equal to 0 (Cluster member identifier provided in trap)')
chkpntClusterProblemStateTrap = NotificationType((1, 3, 6, 1, 4, 1, 2620, 1, 2000, 6, 4)).setObjects(("CHECKPOINT-TRAP-MIB", "chkpntTrapOID"), ("CHECKPOINT-TRAP-MIB", "chkpntTrapOIDValue"), ("CHECKPOINT-TRAP-MIB", "chkpntTrapMsgText"), ("CHECKPOINT-TRAP-MIB", "chkpntTrapSeverity"), ("CHECKPOINT-TRAP-MIB", "chkpntTrapCategory"), ("CHECKPOINT-MIB", "haProblemName"), ("CHECKPOINT-MIB", "haProblemStatus"), ("CHECKPOINT-MIB", "haProblemPriority"), ("CHECKPOINT-MIB", "haProblemVerified"), ("CHECKPOINT-MIB", "haProblemDescr"))
if mibBuilder.loadTexts: chkpntClusterProblemStateTrap.setStatus('current')
if mibBuilder.loadTexts: chkpntClusterProblemStateTrap.setDescription('Cluster problem status alert, alert when haProblemStatus is not equal to OK')
chkpntClusterInterfaceStateTrap = NotificationType((1, 3, 6, 1, 4, 1, 2620, 1, 2000, 6, 5)).setObjects(("CHECKPOINT-TRAP-MIB", "chkpntTrapOID"), ("CHECKPOINT-TRAP-MIB", "chkpntTrapOIDValue"), ("CHECKPOINT-TRAP-MIB", "chkpntTrapMsgText"), ("CHECKPOINT-TRAP-MIB", "chkpntTrapSeverity"), ("CHECKPOINT-TRAP-MIB", "chkpntTrapCategory"), ("CHECKPOINT-MIB", "haIfName"), ("CHECKPOINT-MIB", "haIP"), ("CHECKPOINT-MIB", "haStatus"), ("CHECKPOINT-MIB", "haTrusted"), ("CHECKPOINT-MIB", "haShared"))
if mibBuilder.loadTexts: chkpntClusterInterfaceStateTrap.setStatus('current')
if mibBuilder.loadTexts: chkpntClusterInterfaceStateTrap.setDescription('Cluster interface status alert, alerts when haStatus is not equal to Up (Interface name provided in trap)')
chkpntTrapLSConnState = NotificationType((1, 3, 6, 1, 4, 1, 2620, 1, 2000, 7, 1)).setObjects(("CHECKPOINT-TRAP-MIB", "chkpntTrapOID"), ("CHECKPOINT-TRAP-MIB", "chkpntTrapOIDValue"), ("CHECKPOINT-TRAP-MIB", "chkpntTrapMsgText"), ("CHECKPOINT-TRAP-MIB", "chkpntTrapSeverity"), ("CHECKPOINT-TRAP-MIB", "chkpntTrapCategory"), ("CHECKPOINT-MIB", "fwLSConnName"), ("CHECKPOINT-MIB", "fwLSConnState"), ("CHECKPOINT-MIB", "fwLSConnStateDesc"), ("CHECKPOINT-MIB", "fwLocalLoggingDesc"), ("CHECKPOINT-MIB", "fwLocalLoggingStat"))
if mibBuilder.loadTexts: chkpntTrapLSConnState.setStatus('current')
if mibBuilder.loadTexts: chkpntTrapLSConnState.setDescription('Problem with connection to log server(Log server name provided in trap)')
chkpntTrapOverallLSConnState = NotificationType((1, 3, 6, 1, 4, 1, 2620, 1, 2000, 7, 2)).setObjects(("CHECKPOINT-TRAP-MIB", "chkpntTrapOID"), ("CHECKPOINT-TRAP-MIB", "chkpntTrapOIDValue"), ("CHECKPOINT-TRAP-MIB", "chkpntTrapMsgText"), ("CHECKPOINT-TRAP-MIB", "chkpntTrapSeverity"), ("CHECKPOINT-TRAP-MIB", "chkpntTrapCategory"), ("CHECKPOINT-MIB", "fwLSConnOverall"), ("CHECKPOINT-MIB", "fwLSConnOverallDesc"), ("CHECKPOINT-MIB", "fwLocalLoggingDesc"), ("CHECKPOINT-MIB", "fwLocalLoggingStat"))
if mibBuilder.loadTexts: chkpntTrapOverallLSConnState.setStatus('current')
if mibBuilder.loadTexts: chkpntTrapOverallLSConnState.setDescription('Problem with connection to one or more log servers')
chkpntTrapLocalLoggingState = NotificationType((1, 3, 6, 1, 4, 1, 2620, 1, 2000, 7, 3)).setObjects(("CHECKPOINT-TRAP-MIB", "chkpntTrapOID"), ("CHECKPOINT-TRAP-MIB", "chkpntTrapOIDValue"), ("CHECKPOINT-TRAP-MIB", "chkpntTrapMsgText"), ("CHECKPOINT-TRAP-MIB", "chkpntTrapSeverity"), ("CHECKPOINT-TRAP-MIB", "chkpntTrapCategory"), ("CHECKPOINT-MIB", "fwLSConnOverall"), ("CHECKPOINT-MIB", "fwLSConnOverallDesc"), ("CHECKPOINT-MIB", "fwLocalLoggingDesc"), ("CHECKPOINT-MIB", "fwLocalLoggingStat"))
if mibBuilder.loadTexts: chkpntTrapLocalLoggingState.setStatus('current')
if mibBuilder.loadTexts: chkpntTrapLocalLoggingState.setDescription('Problem with one or more log servers resulted with local logging')
mibBuilder.exportSymbols("CHECKPOINT-TRAP-MIB", chkpntTrapInfo=chkpntTrapInfo, chkpntDiskSpaceTrap=chkpntDiskSpaceTrap, chkpntTrapMibModule=chkpntTrapMibModule, chkpntRAIDDiskFlagsTrap=chkpntRAIDDiskFlagsTrap, chkpntTrapAcceptedPacketRate=chkpntTrapAcceptedPacketRate, chkpntTrapOverallLSConnState=chkpntTrapOverallLSConnState, checkpoint=checkpoint, chkpntSwapMemoryTrap=chkpntSwapMemoryTrap, chkpntTrapLocalLoggingState=chkpntTrapLocalLoggingState, chkpntTrapSeverity=chkpntTrapSeverity, chkpntTrap=chkpntTrap, chkpntTrapNetIfState=chkpntTrapNetIfState, chkpntTrapCategory=chkpntTrapCategory, chkpntTrapCPU=chkpntTrapCPU, chkpntTrapDisk=chkpntTrapDisk, chkpntTrapHWSensor=chkpntTrapHWSensor, chkpntClusterProblemStateTrap=chkpntClusterProblemStateTrap, chkpntTrapMsgText=chkpntTrapMsgText, chkpntClusterInterfaceStateTrap=chkpntClusterInterfaceStateTrap, chkpntTrapConcurrentConnRate=chkpntTrapConcurrentConnRate, chkpntTrapLSConn=chkpntTrapLSConn, chkpntTempertureTrap=chkpntTempertureTrap, chkpntTrapNetIfOperState=chkpntTrapNetIfOperState, chkpntFanSpeedTrap=chkpntFanSpeedTrap, chkpntClusterBlockStateTrap=chkpntClusterBlockStateTrap, chkpntClusterStateTrap=chkpntClusterStateTrap, chkpntTrapOID=chkpntTrapOID, chkpntCPUCoreUtilTrap=chkpntCPUCoreUtilTrap, chkpntTrapHA=chkpntTrapHA, chkpntTrapMemory=chkpntTrapMemory, chkpntTrapNetIfUnplugged=chkpntTrapNetIfUnplugged, PYSNMP_MODULE_ID=chkpntTrapMibModule, chkpntCPUCoreInterruptsTrap=chkpntCPUCoreInterruptsTrap, chkpntVoltageTrap=chkpntVoltageTrap, products=products, chkpntTrapOIDValue=chkpntTrapOIDValue, chkpntTrapTempertureSensor=chkpntTrapTempertureSensor, chkpntTrapNewConnRate=chkpntTrapNewConnRate, chkpntTrapNet=chkpntTrapNet, chkpntTrapVoltageSensor=chkpntTrapVoltageSensor, chkpntClusterMemberStateTrap=chkpntClusterMemberStateTrap, chkpntRAIDDiskTrap=chkpntRAIDDiskTrap, chkpntTrapFanSpeedSensor=chkpntTrapFanSpeedSensor, chkpntTrapBytesThroughput=chkpntTrapBytesThroughput, chkpntRAIDVolumeTrap=chkpntRAIDVolumeTrap, chkpntRealMemoryTrap=chkpntRealMemoryTrap, chkpntTrapLSConnState=chkpntTrapLSConnState)
