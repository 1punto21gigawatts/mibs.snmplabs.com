#
# PySNMP MIB module LEFTHAND-NETWORKS-GLOBAL-REG (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/LEFTHAND-NETWORKS-GLOBAL-REG
# Produced by pysmi-0.3.4 at Wed May  1 14:06:21 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ModuleIdentity, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, NotificationType, Unsigned32, iso, MibIdentifier, enterprises, TimeTicks, Gauge32, Integer32, Counter32, Bits, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "NotificationType", "Unsigned32", "iso", "MibIdentifier", "enterprises", "TimeTicks", "Gauge32", "Integer32", "Counter32", "Bits", "IpAddress")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
leftHandNetworksGlobalRegistrationModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 9804, 1, 1, 1))
if mibBuilder.loadTexts: leftHandNetworksGlobalRegistrationModule.setLastUpdated('200106010000Z')
if mibBuilder.loadTexts: leftHandNetworksGlobalRegistrationModule.setOrganization('LeftHand Networks, Inc.')
if mibBuilder.loadTexts: leftHandNetworksGlobalRegistrationModule.setContactInfo(' Primary Author: Jose Faria postal: 6185 Arapahoe Rd. Boulder, CO 80301 phone: +1 303 449-4100 email: jfaria@lefthandnetworks.com')
if mibBuilder.loadTexts: leftHandNetworksGlobalRegistrationModule.setDescription('This file defines the private LeftHand Networks SNMP MIB extensions.')
leftHandNetworks = ObjectIdentity((1, 3, 6, 1, 4, 1, 9804))
if mibBuilder.loadTexts: leftHandNetworks.setStatus('current')
if mibBuilder.loadTexts: leftHandNetworks.setDescription('The root of the OID sub-tree assigned to LeftHand Networks by the Internet Assigned Numbers Authority (IANA).')
lhnRegistrations = ObjectIdentity((1, 3, 6, 1, 4, 1, 9804, 1))
if mibBuilder.loadTexts: lhnRegistrations.setStatus('current')
if mibBuilder.loadTexts: lhnRegistrations.setDescription('Sub-tree for registrations')
lhnGeneric = ObjectIdentity((1, 3, 6, 1, 4, 1, 9804, 2))
if mibBuilder.loadTexts: lhnGeneric.setStatus('current')
if mibBuilder.loadTexts: lhnGeneric.setDescription('Sub-tree for object and event definitions common accross all products')
lhnProducts = ObjectIdentity((1, 3, 6, 1, 4, 1, 9804, 3))
if mibBuilder.loadTexts: lhnProducts.setStatus('current')
if mibBuilder.loadTexts: lhnProducts.setDescription('Sub-tree for product specific object and event definitions')
lhnCapabilities = ObjectIdentity((1, 3, 6, 1, 4, 1, 9804, 4))
if mibBuilder.loadTexts: lhnCapabilities.setStatus('current')
if mibBuilder.loadTexts: lhnCapabilities.setDescription('Sub-tree for agent profiles')
lhnRequirements = ObjectIdentity((1, 3, 6, 1, 4, 1, 9804, 5))
if mibBuilder.loadTexts: lhnRequirements.setStatus('current')
if mibBuilder.loadTexts: lhnRequirements.setDescription('Sub-tree for management application requirements')
lhnExperimental = ObjectIdentity((1, 3, 6, 1, 4, 1, 9804, 6))
if mibBuilder.loadTexts: lhnExperimental.setStatus('current')
if mibBuilder.loadTexts: lhnExperimental.setDescription('Sub-tree for experimental definitions')
lhnModules = ObjectIdentity((1, 3, 6, 1, 4, 1, 9804, 1, 1))
if mibBuilder.loadTexts: lhnModules.setStatus('current')
if mibBuilder.loadTexts: lhnModules.setDescription('Sub-tree to register the values assigned to modules with the MODULE-IDENTITY construct')
lhnNusDevices = ObjectIdentity((1, 3, 6, 1, 4, 1, 9804, 1, 2))
if mibBuilder.loadTexts: lhnNusDevices.setStatus('current')
if mibBuilder.loadTexts: lhnNusDevices.setDescription('NUS Storage Devices')
lhnNusCommon = ObjectIdentity((1, 3, 6, 1, 4, 1, 9804, 1, 2, 1))
if mibBuilder.loadTexts: lhnNusCommon.setStatus('current')
if mibBuilder.loadTexts: lhnNusCommon.setDescription('NUS Model Devices')
lhnNusDevicesMIBs = ObjectIdentity((1, 3, 6, 1, 4, 1, 9804, 3, 1))
if mibBuilder.loadTexts: lhnNusDevicesMIBs.setStatus('current')
if mibBuilder.loadTexts: lhnNusDevicesMIBs.setDescription('Sub-tree for NUS Devices MIBs')
lhnNusCommonMIB = ObjectIdentity((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1))
if mibBuilder.loadTexts: lhnNusCommonMIB.setStatus('current')
if mibBuilder.loadTexts: lhnNusCommonMIB.setDescription('Sub-tree for NUS Model 1 objects and events MIBs')
mibBuilder.exportSymbols("LEFTHAND-NETWORKS-GLOBAL-REG", leftHandNetworksGlobalRegistrationModule=leftHandNetworksGlobalRegistrationModule, lhnGeneric=lhnGeneric, lhnNusCommon=lhnNusCommon, lhnNusDevicesMIBs=lhnNusDevicesMIBs, lhnRequirements=lhnRequirements, PYSNMP_MODULE_ID=leftHandNetworksGlobalRegistrationModule, lhnNusCommonMIB=lhnNusCommonMIB, leftHandNetworks=leftHandNetworks, lhnNusDevices=lhnNusDevices, lhnModules=lhnModules, lhnCapabilities=lhnCapabilities, lhnExperimental=lhnExperimental, lhnProducts=lhnProducts, lhnRegistrations=lhnRegistrations)
